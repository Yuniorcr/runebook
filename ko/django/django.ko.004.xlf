<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="django">
    <body>
      <group id="django">
        <trans-unit id="8e6930a6c173b07b683b82da9d1f296b3dcb130c" translate="yes" xml:space="preserve">
          <source>After each test, Django empties only tables corresponding to models in available apps. However, at the database level, truncation may cascade to related models in unavailable apps. Furthermore &lt;a href=&quot;../../ref/signals#django.db.models.signals.post_migrate&quot;&gt;&lt;code&gt;post_migrate&lt;/code&gt;&lt;/a&gt; isn&amp;rsquo;t fired; it will be fired by the next &lt;code&gt;TransactionTestCase&lt;/code&gt;, after the correct set of applications is selected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b85411d44bdeb415c99e270e325cf620c6f3d48c" translate="yes" xml:space="preserve">
          <source>After identifying a bug, we wrote a test that exposes it and corrected the bug in the code so our test passes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ca69a5e2e9e85d442e5087cec08c6e01b338c19" translate="yes" xml:space="preserve">
          <source>After incrementing the choice count, the code returns an &lt;a href=&quot;../ref/request-response#django.http.HttpResponseRedirect&quot;&gt;&lt;code&gt;HttpResponseRedirect&lt;/code&gt;&lt;/a&gt; rather than a normal &lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;../ref/request-response#django.http.HttpResponseRedirect&quot;&gt;&lt;code&gt;HttpResponseRedirect&lt;/code&gt;&lt;/a&gt; takes a single argument: the URL to which the user will be redirected (see the following point for how we construct the URL in this case).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="774c302b2329f500a54a6b1f4edb804e0b750ee4" translate="yes" xml:space="preserve">
          <source>After installation, open the command prompt and check that the Python version matches the version you installed by executing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71a6e296bbb95376e2919538a9365dbb8734ff32" translate="yes" xml:space="preserve">
          <source>After installing Memcached itself, you&amp;rsquo;ll need to install a Memcached binding. There are several Python Memcached bindings available; the two most common are &lt;a href=&quot;https://pypi.org/project/python-memcached/&quot;&gt;python-memcached&lt;/a&gt; and &lt;a href=&quot;https://pypi.org/project/pylibmc/&quot;&gt;pylibmc&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aa4b22c12e8c71bdc31e0284bc1ee8ce0c4ac6c" translate="yes" xml:space="preserve">
          <source>After installing Postgres.app, add the following to your &lt;code&gt;.bash_profile&lt;/code&gt; so you can run the package&amp;rsquo;s programs from the command-line. Replace &lt;code&gt;X.Y&lt;/code&gt; with the version of PostgreSQL in the Postgres.app you installed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b736f158d630c0182bc11671267f8e1b4815968a" translate="yes" xml:space="preserve">
          <source>After installing the binary packages, you&amp;rsquo;ll want to add the following to your &lt;code&gt;.profile&lt;/code&gt; to be able to run the package programs from the command-line:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a60de7d58c77244f0cf00d8e784d29a1e7247f48" translate="yes" xml:space="preserve">
          <source>After passing through template response middleware, but before passing through response middleware.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bee1621e895ebf9bd0640dd87cf6d184eec12d4" translate="yes" xml:space="preserve">
          <source>After reading those, if you want something a little meatier to sink your teeth into, there&amp;rsquo;s always the Python &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt; documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dc0c875063a5da44991572aecb9756257b690a4" translate="yes" xml:space="preserve">
          <source>After setting the language choice, Django looks for a &lt;code&gt;next&lt;/code&gt; parameter in the &lt;code&gt;POST&lt;/code&gt; or &lt;code&gt;GET&lt;/code&gt; data. If that is found and Django considers it to be a safe URL (i.e. it doesn&amp;rsquo;t point to a different host and uses a safe scheme), a redirect to that URL will be performed. Otherwise, Django may fall back to redirecting the user to the URL from the &lt;code&gt;Referer&lt;/code&gt; header or, if it is not set, to &lt;code&gt;/&lt;/code&gt;, depending on the nature of the request:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7620c7b76f9f6f83e5a60670049dd6c754d2eb5" translate="yes" xml:space="preserve">
          <source>After setting up and activating the virtualenv, run the following command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="749f4fb21ac06aa715512fb023e5e4518d514613" translate="yes" xml:space="preserve">
          <source>After somebody votes in a question, the &lt;code&gt;vote()&lt;/code&gt; view redirects to the results page for the question. Let&amp;rsquo;s write that view:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a217c47f5d8014faf6fc30b3753dfee60b8d8123" translate="yes" xml:space="preserve">
          <source>After the &lt;a href=&quot;../../../ref/models/querysets#django.db.models.query.QuerySet.delete&quot;&gt;&lt;code&gt;delete()&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&quot;../../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; cache needs to be cleared, and the referenced objects should be gone:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fcd69199df456b7ec6054b8a08e330f73536452" translate="yes" xml:space="preserve">
          <source>After the field has been cleaned and validated, the &lt;code&gt;UploadedFile&lt;/code&gt; object will have an additional &lt;code&gt;image&lt;/code&gt; attribute containing the Pillow &lt;a href=&quot;https://pillow.readthedocs.io/en/latest/reference/Image.html&quot;&gt;Image&lt;/a&gt; instance used to check if the file was a valid image. Pillow closes the underlying file descriptor after verifying an image, so whilst non-image data attributes, such as &lt;code&gt;format&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;, and &lt;code&gt;width&lt;/code&gt;, are available, methods that access the underlying image data, such as &lt;code&gt;getdata()&lt;/code&gt; or &lt;code&gt;getpixel()&lt;/code&gt;, cannot be used without reopening the file. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14ee9b4c42739ebdc299c256addfef73b7b4d50d" translate="yes" xml:space="preserve">
          <source>After the installation has completed, you can verify your Django installation by executing &lt;code&gt;django-admin --version&lt;/code&gt; in the command prompt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81017b450bb562125665785f46775a28051421ac" translate="yes" xml:space="preserve">
          <source>After the previous tutorials, our project should look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac7e3cfe6d36fcc8800548c504c913db5ea08bda" translate="yes" xml:space="preserve">
          <source>After the tables are created, execute an &lt;code&gt;ALTER TABLE&lt;/code&gt; statement to convert a table to a new storage engine (such as InnoDB):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="833c95b13093b5d748d6f17ddb4f86d50a0bd954" translate="yes" xml:space="preserve">
          <source>After those, if you&amp;rsquo;re still hungry for more information about contributing, you can always browse through the rest of &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/index/&quot;&gt;Django&amp;rsquo;s documentation on contributing&lt;/a&gt;. It contains a ton of useful information and should be your first source for answering any questions you might have.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="454dbfd1138b5db0a027bc12c3fb8a7dd0e23f9f" translate="yes" xml:space="preserve">
          <source>After you call this method, the test client will have all the cookies and session data cleared to defaults. Subsequent requests will appear to come from an &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.AnonymousUser&quot;&gt;&lt;code&gt;AnonymousUser&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb6524b580510278d19c4826bcc1d86bb9822378" translate="yes" xml:space="preserve">
          <source>After you call this method, the test client will have all the cookies and session data required to pass any login-based tests that may form part of a view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ccf916013f6746ea045fc6d05d7dcf32415b07c" translate="yes" xml:space="preserve">
          <source>After you create your message file &amp;ndash; and each time you make changes to it &amp;ndash; you&amp;rsquo;ll need to compile it into a more efficient form, for use by &lt;code&gt;gettext&lt;/code&gt;. Do this with the &lt;a href=&quot;../../ref/django-admin#django-admin-compilemessages&quot;&gt;&lt;code&gt;django-admin compilemessages&lt;/code&gt;&lt;/a&gt; utility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f142d8357e94c93bff8e02e5c80a67c40758627" translate="yes" xml:space="preserve">
          <source>After you have run the tests, fix any failures. While you have the release notes fresh in your mind, it may also be a good time to take advantage of new features in Django by refactoring your code to eliminate any deprecation warnings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75948cd661d2774dc7b4af27c50f524b8ec48d16" translate="yes" xml:space="preserve">
          <source>After you&amp;rsquo;ve created and activated a virtual environment, enter the command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c00f9f95d692f9f5d52dc64a0c910df8598d94d" translate="yes" xml:space="preserve">
          <source>After you&amp;rsquo;ve created the translations, the &lt;a href=&quot;../../ref/urlresolvers#django.urls.reverse&quot;&gt;&lt;code&gt;reverse()&lt;/code&gt;&lt;/a&gt; function will return the URL in the active language. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a83bf81fa68c7adb95861b4267776fda80bfd431" translate="yes" xml:space="preserve">
          <source>After you&amp;rsquo;ve either set &lt;a href=&quot;#envvar-DJANGO_SETTINGS_MODULE&quot; id=&quot;index-0&quot;&gt;&lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt;&lt;/a&gt; or called &lt;code&gt;configure()&lt;/code&gt;, you&amp;rsquo;ll need to call &lt;a href=&quot;../ref/applications#django.setup&quot;&gt;&lt;code&gt;django.setup()&lt;/code&gt;&lt;/a&gt; to load your settings and populate Django&amp;rsquo;s application registry. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eb54cbde4f24bf5c6af4e6dd0b7a585b18eb988" translate="yes" xml:space="preserve">
          <source>After you&amp;rsquo;ve installed the KyngChaos binaries and modified your &lt;code&gt;PATH&lt;/code&gt;, as described above, &lt;code&gt;psycopg2&lt;/code&gt; may be installed using the following command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88b1186bb9c94ec6c9603db091e796a247ecb17d" translate="yes" xml:space="preserve">
          <source>After you&amp;rsquo;ve taken these steps, you&amp;rsquo;ll be able to use the admin site by visiting the URL you hooked it into (&lt;code&gt;/admin/&lt;/code&gt;, by default).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84768878fd67444cf6aeb2b9f70fb7f8c46001a3" translate="yes" xml:space="preserve">
          <source>Afterwards, invoke the Django shell from the &lt;code&gt;geodjango&lt;/code&gt; project directory:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0c1764bcde7adb7e9f9737f8f18137d064ad3a9" translate="yes" xml:space="preserve">
          <source>Afterwards, you can also install the KyngChaos binary packages for &lt;a href=&quot;https://www.kyngchaos.com/software/postgres&quot;&gt;PostgreSQL and PostGIS&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="609ae4a2b711e9851698f5c7ccad2895c556ca86" translate="yes" xml:space="preserve">
          <source>Afterwards, you should familiarize yourself with the changes that were made in the new Django version(s):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76d9eb1aa30256965c27105fa5717d6b2a4ac66b" translate="yes" xml:space="preserve">
          <source>Again, &lt;code&gt;polls&lt;/code&gt; is a minimal application, but however complex it grows in the future and whatever other code it interacts with, we now have some guarantee that the method we have written tests for will behave in expected ways.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76edc27b78551b9907274be664d0d529b149a682" translate="yes" xml:space="preserve">
          <source>Again, defining project-specific configuration classes in a submodule called &lt;code&gt;apps&lt;/code&gt; is a convention, not a requirement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4800e0bd8f8bf2f1ef78d7b6e6b1e6c25da9510a" translate="yes" xml:space="preserve">
          <source>Again, middleware are run in reverse order during the response phase, which includes &lt;code&gt;process_exception&lt;/code&gt;. If an exception middleware returns a response, the &lt;code&gt;process_exception&lt;/code&gt; methods of the middleware classes above that middleware won&amp;rsquo;t be called at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07f00b688ea0b766303ecee7f61a1a4a6d54efd8" translate="yes" xml:space="preserve">
          <source>Again, the above is only a selection of the whole list; see the &lt;a href=&quot;builtins#ref-templates-builtins-tags&quot;&gt;built-in tag reference&lt;/a&gt; for the complete list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72d90458b1cb9acc91a52abbd86072d9d2f737ca" translate="yes" xml:space="preserve">
          <source>Again, these are just a few examples; see the &lt;a href=&quot;builtins#ref-templates-builtins-filters&quot;&gt;built-in filter reference&lt;/a&gt; for the complete list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2a7af272e8491c8ef8998c146668b3190e291a3" translate="yes" xml:space="preserve">
          <source>Again, these are just short descriptions of the most common field options. Full details can be found in the &lt;a href=&quot;../../ref/models/fields#common-model-field-options&quot;&gt;common model field option reference&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ad6465156415426b3b441f0d6cb9831006c7d96" translate="yes" xml:space="preserve">
          <source>Again, this is a minimal example; your tests may require additional settings to run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22f87c4755a2a72211f05d455242c68a7b90af59" translate="yes" xml:space="preserve">
          <source>Again, this only scratches the surface. A complete reference can be found in the &lt;a href=&quot;../../ref/models/querysets#field-lookups&quot;&gt;field lookup reference&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f6e5271c1968addea0910c36407cb68adbcc2a4" translate="yes" xml:space="preserve">
          <source>Again, we stress that this behavior is on by default. If you&amp;rsquo;re using Django&amp;rsquo;s template system, you&amp;rsquo;re protected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a8e8189f1313ddd69a6c196be4e792c160e8ade" translate="yes" xml:space="preserve">
          <source>Aggregate</source>
          <target state="translated">Aggregate</target>
        </trans-unit>
        <trans-unit id="558d7aad6e94b62a3c3d222979b260b60b6db7d2" translate="yes" xml:space="preserve">
          <source>Aggregate Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58db3b6eabf8f4ca517fda205de7d76143146986" translate="yes" xml:space="preserve">
          <source>Aggregate functions for statistics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e592a786dfbb7bba39abe800dc70d129c6dce799" translate="yes" xml:space="preserve">
          <source>Aggregates can also participate in filters. Any &lt;code&gt;filter()&lt;/code&gt; (or &lt;code&gt;exclude()&lt;/code&gt;) applied to normal model fields will have the effect of constraining the objects that are considered for aggregation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c1907fa8ba92171ecd5a41aa1138a68fd39e6c3" translate="yes" xml:space="preserve">
          <source>Aggregates may be used within a &lt;code&gt;Subquery&lt;/code&gt;, but they require a specific combination of &lt;a href=&quot;querysets#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;querysets#django.db.models.query.QuerySet.values&quot;&gt;&lt;code&gt;values()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;querysets#django.db.models.query.QuerySet.annotate&quot;&gt;&lt;code&gt;annotate()&lt;/code&gt;&lt;/a&gt; to get the subquery grouping correct.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3046a0b95ce675e13e620164db3548ddbeed47d" translate="yes" xml:space="preserve">
          <source>Aggregates specified using keyword arguments will use the keyword as the name for the annotation. Anonymous arguments will have a name generated for them based upon the name of the aggregate function and the model field that is being aggregated. Complex aggregates cannot use anonymous arguments and must specify a keyword argument as an alias.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c54474caf51a4cfcf55ae1aeaad92afdaea6ae2" translate="yes" xml:space="preserve">
          <source>Aggregates the logic of multiple fields that together produce a single value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5224068860504ef288a954b021f18be1d0eca82" translate="yes" xml:space="preserve">
          <source>Aggregating annotations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9ba037c0e4c06d192c83e08070b15787f07daaa" translate="yes" xml:space="preserve">
          <source>Aggregation</source>
          <target state="translated">Aggregation</target>
        </trans-unit>
        <trans-unit id="8744763c19352d1e7e8a834af21ab845a14c6d4a" translate="yes" xml:space="preserve">
          <source>Aggregation functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db05f7da09b2a0260f41b164da50f58bf58d7db4" translate="yes" xml:space="preserve">
          <source>Aggregation functions return &lt;code&gt;None&lt;/code&gt; when used with an empty &lt;code&gt;QuerySet&lt;/code&gt;. For example, the &lt;code&gt;Sum&lt;/code&gt; aggregation function returns &lt;code&gt;None&lt;/code&gt; instead of &lt;code&gt;0&lt;/code&gt; if the &lt;code&gt;QuerySet&lt;/code&gt; contains no entries. An exception is &lt;code&gt;Count&lt;/code&gt;, which does return &lt;code&gt;0&lt;/code&gt; if the &lt;code&gt;QuerySet&lt;/code&gt; is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28526bd2f39d981e3a8e47d55d1edc91059ed733" translate="yes" xml:space="preserve">
          <source>Aggregations and other &lt;code&gt;QuerySet&lt;/code&gt; clauses</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03401c7929a3c8c6e403e43f42554e9b39a016bc" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#django.contrib.gis.gdal.OGRGeometry.point_count&quot;&gt;&lt;code&gt;point_count&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89a10a12a5bd894bfe79c45dad116ea940883dff" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#django.contrib.gis.gdal.SpatialReference.proj&quot;&gt;&lt;code&gt;SpatialReference.proj&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="311340d0f664404d0e32bcc705f7f5a3f899a664" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry.json&quot;&gt;&lt;code&gt;GEOSGeometry.json&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eea85015493bafd873240e2440370250d63e355a" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#django.contrib.gis.measure.Area&quot;&gt;&lt;code&gt;Area&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3139c96ef36bdd16b025d9f6b3f8b24e7ab6c197" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#django.contrib.gis.measure.Distance&quot;&gt;&lt;code&gt;Distance&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3596c0273800b5bfe61283f267b07dcfe497e68" translate="yes" xml:space="preserve">
          <source>Alias of &lt;a href=&quot;#django.utils.encoding.force_str&quot;&gt;&lt;code&gt;force_str()&lt;/code&gt;&lt;/a&gt; for backwards compatibility, especially in code that supports Python 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e367d79c8df65fe0d42fc97a7d15eb1a67e28fd5" translate="yes" xml:space="preserve">
          <source>All &lt;a href=&quot;#django.views.decorators.debug.sensitive_variables&quot;&gt;&lt;code&gt;sensitive_variables()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.views.decorators.debug.sensitive_post_parameters&quot;&gt;&lt;code&gt;sensitive_post_parameters()&lt;/code&gt;&lt;/a&gt; do is, respectively, annotate the decorated function with the names of sensitive variables and annotate the &lt;code&gt;HttpRequest&lt;/code&gt; object with the names of sensitive POST parameters, so that this sensitive information can later be filtered out of reports when an error occurs. The actual filtering is done by Django&amp;rsquo;s default error reporter filter: &lt;a href=&quot;#django.views.debug.SafeExceptionReporterFilter&quot;&gt;&lt;code&gt;django.views.debug.SafeExceptionReporterFilter&lt;/code&gt;&lt;/a&gt;. This filter uses the decorators&amp;rsquo; annotations to replace the corresponding values with stars (&lt;code&gt;**********&lt;/code&gt;) when the error reports are produced. If you wish to override or customize this default behavior for your entire site, you need to define your own filter class and tell Django to use it via the &lt;a href=&quot;../ref/settings#std:setting-DEFAULT_EXCEPTION_REPORTER_FILTER&quot;&gt;&lt;code&gt;DEFAULT_EXCEPTION_REPORTER_FILTER&lt;/code&gt;&lt;/a&gt; setting:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8039f9e6b2179f06189ad75d841b92549f36262" translate="yes" xml:space="preserve">
          <source>All &lt;a href=&quot;../topics/auth/default#django.contrib.auth.views.PasswordResetView&quot;&gt;&lt;code&gt;PasswordResetView&lt;/code&gt;&lt;/a&gt; tokens.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83ad2f51e4998821b250c8647a84c6d07b6ed7e4" translate="yes" xml:space="preserve">
          <source>All &lt;a href=&quot;../topics/http/sessions&quot;&gt;sessions&lt;/a&gt; if you are using any other session backend than &lt;code&gt;django.contrib.sessions.backends.cache&lt;/code&gt;, or are using the default &lt;a href=&quot;../topics/auth/customizing#django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash&quot;&gt;&lt;code&gt;get_session_auth_hash()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04ac9d489c3dc8f1a010bfe9b454bb3b904669e8" translate="yes" xml:space="preserve">
          <source>All &lt;a href=&quot;contrib/messages&quot;&gt;messages&lt;/a&gt; if you are using &lt;a href=&quot;contrib/messages#django.contrib.messages.storage.cookie.CookieStorage&quot;&gt;&lt;code&gt;CookieStorage&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;contrib/messages#django.contrib.messages.storage.fallback.FallbackStorage&quot;&gt;&lt;code&gt;FallbackStorage&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0384f79740400bf6124e127c5152b7d8fa1cdbc2" translate="yes" xml:space="preserve">
          <source>All &lt;a href=&quot;tools#django.test.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; subclasses are run first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31517b0b1c71d2abf5c73d7d73dc156598e93d51" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;SessionStore&lt;/code&gt; classes available in Django inherit from &lt;a href=&quot;#django.contrib.sessions.backends.base.SessionBase&quot;&gt;&lt;code&gt;SessionBase&lt;/code&gt;&lt;/a&gt; and implement data manipulation methods, namely:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9f1617e377da8269575590aa14bf2bce27cdb91" translate="yes" xml:space="preserve">
          <source>All Django wants is that &lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt;. Or an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dd77df42cbf9e4375aa2cccefdd1a4331364ccb" translate="yes" xml:space="preserve">
          <source>All POST parameters are systematically filtered out of error reports for certain &lt;a href=&quot;../topics/auth/default#module-django.contrib.auth.views&quot;&gt;&lt;code&gt;django.contrib.auth.views&lt;/code&gt;&lt;/a&gt; views (&lt;code&gt;login&lt;/code&gt;, &lt;code&gt;password_reset_confirm&lt;/code&gt;, &lt;code&gt;password_change&lt;/code&gt;, and &lt;code&gt;add_view&lt;/code&gt; and &lt;code&gt;user_change_password&lt;/code&gt; in the &lt;code&gt;auth&lt;/code&gt; admin) to prevent the leaking of sensitive information such as user passwords.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b711e4e0c0aa1b459af24f49b004fe6a8f8910a" translate="yes" xml:space="preserve">
          <source>All aggregates have the &lt;a href=&quot;../../models/querysets#aggregate-filter&quot;&gt;filter&lt;/a&gt; keyword argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8d288bc11de64752d70a611e5d42fa8b3b32332" translate="yes" xml:space="preserve">
          <source>All aggregates have the following parameters in common:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a23a0a248b43bbcfef231f9bbc931de01093aed" translate="yes" xml:space="preserve">
          <source>All arguments passed to &lt;code&gt;push()&lt;/code&gt; will be passed to the &lt;code&gt;dict&lt;/code&gt; constructor used to build the new context level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe5fd9064b79f1bef279924828a3bad888755038" translate="yes" xml:space="preserve">
          <source>All attributes can be set in your derived class and can be used in &lt;a href=&quot;#django.core.management.BaseCommand&quot;&gt;&lt;code&gt;BaseCommand&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s &lt;a href=&quot;#ref-basecommand-subclasses&quot;&gt;subclasses&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a9a5ca4be05a737b99621754bef89baa865d53b" translate="yes" xml:space="preserve">
          <source>All attributes should be considered read-only unless stated otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3654cf136b268bf0a4f4bf5e1314d277651c1fe1" translate="yes" xml:space="preserve">
          <source>All attributes should be considered read-only, unless stated otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c4a691f96ada2abf291b5d01a2c703144bc487d" translate="yes" xml:space="preserve">
          <source>All authentication views</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d2cc8e4b1a53e5ff26f7c2253d15ca956b99f0e" translate="yes" xml:space="preserve">
          <source>All examples in the reference below are given for geometry fields and inputs, but the lookups can be used the same way with rasters on both sides. Whenever a lookup doesn&amp;rsquo;t support raster input, the input is automatically converted to a geometry where necessary using the &lt;a href=&quot;https://postgis.net/docs/RT_ST_Polygon.html&quot;&gt;ST_Polygon&lt;/a&gt; function. See also the &lt;a href=&quot;db-api#spatial-lookup-raster&quot;&gt;introduction to raster lookups&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1164b8ae07415e94da9b058be21f6bb9956deb5c" translate="yes" xml:space="preserve">
          <source>All examples in this section use the sample &lt;code&gt;Blog&lt;/code&gt;, &lt;code&gt;Author&lt;/code&gt; and &lt;code&gt;Entry&lt;/code&gt; models defined at the top of this page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02c9e7a76c652166d38ab264750ff35c60dc4b46" translate="yes" xml:space="preserve">
          <source>All file upload handlers should be subclasses of &lt;code&gt;django.core.files.uploadhandler.FileUploadHandler&lt;/code&gt;. You can define upload handlers wherever you wish.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19a5a27019567030d2cbca69e09abcfb4975cafd" translate="yes" xml:space="preserve">
          <source>All form classes are created as subclasses of either &lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt;&lt;code&gt;django.forms.Form&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;django.forms.ModelForm&lt;/code&gt;&lt;/a&gt;. You can think of &lt;code&gt;ModelForm&lt;/code&gt; as a subclass of &lt;code&gt;Form&lt;/code&gt;. &lt;code&gt;Form&lt;/code&gt; and &lt;code&gt;ModelForm&lt;/code&gt; actually inherit common functionality from a (private) &lt;code&gt;BaseForm&lt;/code&gt; class, but this implementation detail is rarely important.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9082a9d4ed7be6ac91a3858cfc8e0d456bc7434e" translate="yes" xml:space="preserve">
          <source>All functions come without default aliases, so you must explicitly provide one. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb8c277929e720d58493dcd7faeaed7ee077a3e1" translate="yes" xml:space="preserve">
          <source>All keyword parameter names are turned to lowercase, and underscores are converted to hyphens.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="544970aea4074b488ba69731db1254ed617836c1" translate="yes" xml:space="preserve">
          <source>All loggers except &lt;a href=&quot;#django-server-logger&quot;&gt;django.server&lt;/a&gt; propagate logging to their parents, up to the root &lt;code&gt;django&lt;/code&gt; logger. The &lt;code&gt;console&lt;/code&gt; and &lt;code&gt;mail_admins&lt;/code&gt; handlers are attached to the root logger to provide the behavior described above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9016f8182d2fe2c55bef97c4e79cb1bf3e62947b" translate="yes" xml:space="preserve">
          <source>All message file repositories are structured the same way. They are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2a722a87c436c67f4c4024376ede8cce074d719" translate="yes" xml:space="preserve">
          <source>All methods on &lt;code&gt;PreparedGeometry&lt;/code&gt; take an &lt;code&gt;other&lt;/code&gt; argument, which must be a &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt;&lt;code&gt;GEOSGeometry&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd9bfa9ebbc4d39a8057cc0688dd6cd8bba7bfc3" translate="yes" xml:space="preserve">
          <source>All non-deferred fields of the model are updated to the values currently present in the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52bd8839678fd66e4de579c13c97026b52a41c70" translate="yes" xml:space="preserve">
          <source>All numeric values are now translated as plural, except &lt;code&gt;1.0&lt;/code&gt; which is translated as a singular phrase. This may be incorrect for some languages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43879c25ad1f9ff0dbd0dee3407939e60e2d2d88" translate="yes" xml:space="preserve">
          <source>All of Django&amp;rsquo;s built-in fields, such as &lt;a href=&quot;#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt;, are particular implementations of &lt;code&gt;Field&lt;/code&gt;. If you need a custom field, you can either subclass any of the built-in fields or write a &lt;code&gt;Field&lt;/code&gt; from scratch. In either case, see &lt;a href=&quot;../../howto/custom-model-fields&quot;&gt;Writing custom model fields&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e0d672fbdfd3bd2fd3b9fdc94cd770c410f30ef" translate="yes" xml:space="preserve">
          <source>All of Django&amp;rsquo;s database backends automatically convert strings into the appropriate encoding for talking to the database. They also automatically convert strings retrieved from the database into strings. You don&amp;rsquo;t even need to tell Django what encoding your database uses: that is handled transparently.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25d8c074531237860e80f6129a0d529bf6a881f2" translate="yes" xml:space="preserve">
          <source>All of Django&amp;rsquo;s fields (and when we say &lt;em&gt;fields&lt;/em&gt; in this document, we always mean model fields and not &lt;a href=&quot;../ref/forms/fields&quot;&gt;form fields&lt;/a&gt;) are subclasses of &lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;django.db.models.Field&lt;/code&gt;&lt;/a&gt;. Most of the information that Django records about a field is common to all fields &amp;ndash; name, help text, uniqueness and so forth. Storing all that information is handled by &lt;code&gt;Field&lt;/code&gt;. We&amp;rsquo;ll get into the precise details of what &lt;code&gt;Field&lt;/code&gt; can do later on; for now, suffice it to say that everything descends from &lt;code&gt;Field&lt;/code&gt; and then customizes key pieces of the class behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd788ae21f1d7d0fcd8ae323dc21ea5bbe95d8f5" translate="yes" xml:space="preserve">
          <source>All of the &lt;code&gt;kwargs&lt;/code&gt; dictionary is passed directly to the form field&amp;rsquo;s &lt;code&gt;__init__()&lt;/code&gt; method. Normally, all you need to do is set up a good default for the &lt;code&gt;form_class&lt;/code&gt; (and maybe &lt;code&gt;choices_form_class&lt;/code&gt;) argument and then delegate further handling to the parent class. This might require you to write a custom form field (and even a form widget). See the &lt;a href=&quot;../topics/forms/index&quot;&gt;forms documentation&lt;/a&gt; for information about this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db95fd1155b2734442bf4a034c402f65a5fac4d4" translate="yes" xml:space="preserve">
          <source>All of the above can be combined to form complex expressions. For such expressions, it can be important to know how the operators are grouped when the expression is evaluated - that is, the precedence rules. The precedence of the operators, from lowest to highest, is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90e2cc10b0a5ed4093dc1410275ea6c4e9a947e4" translate="yes" xml:space="preserve">
          <source>All of the built-in Django template tags are safe to use with the cached loader, but if you&amp;rsquo;re using custom template tags that come from third party packages, or that you wrote yourself, you should ensure that the &lt;code&gt;Node&lt;/code&gt; implementation for each tag is thread-safe. For more information, see &lt;a href=&quot;../../howto/custom-template-tags#template-tag-thread-safety&quot;&gt;template tag thread safety considerations&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09975dacc6609e21c13e0ae24e664fb6e20c2dfd" translate="yes" xml:space="preserve">
          <source>All of the cautions in the note for the &lt;a href=&quot;#django.db.models.query.QuerySet.defer&quot;&gt;&lt;code&gt;defer()&lt;/code&gt;&lt;/a&gt; documentation apply to &lt;code&gt;only()&lt;/code&gt; as well. Use it cautiously and only after exhausting your other options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="842bb58d8d3fde08f19712960e865ccc82a3b6a4" translate="yes" xml:space="preserve">
          <source>All of the core Django operations are available from the &lt;code&gt;django.db.migrations.operations&lt;/code&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fe0461c1dc8f2290a9c15cc547f9e3d24400d21" translate="yes" xml:space="preserve">
          <source>All of the fields of &lt;code&gt;Place&lt;/code&gt; will also be available in &lt;code&gt;Restaurant&lt;/code&gt;, although the data will reside in a different database table. So these are both possible:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b101a05b6664afc950679820eed8500bf36c445e" translate="yes" xml:space="preserve">
          <source>All of the following spatial predicate methods take another &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt;&lt;code&gt;GEOSGeometry&lt;/code&gt;&lt;/a&gt; instance (&lt;code&gt;other&lt;/code&gt;) as a parameter, and return a boolean.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7d8fdc618c1fcb75c91fd91936783ef99cfc1e4" translate="yes" xml:space="preserve">
          <source>All of the generic views listed above have matching &lt;code&gt;Base&lt;/code&gt; views that only differ in that they do not include the &lt;a href=&quot;mixins-multiple-object#django.views.generic.list.MultipleObjectTemplateResponseMixin&quot;&gt;&lt;code&gt;MultipleObjectTemplateResponseMixin&lt;/code&gt;&lt;/a&gt; (for the archive views) or &lt;a href=&quot;mixins-single-object#django.views.generic.detail.SingleObjectTemplateResponseMixin&quot;&gt;&lt;code&gt;SingleObjectTemplateResponseMixin&lt;/code&gt;&lt;/a&gt; (for the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#DateDetailView&quot;&gt;&lt;code&gt;DateDetailView&lt;/code&gt;&lt;/a&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="993f88424c9eb90136110e3989777865daf81d23" translate="yes" xml:space="preserve">
          <source>All of the options without an explanation in the above list have the same meaning they do for normal Django fields. See the &lt;a href=&quot;../ref/models/fields&quot;&gt;field documentation&lt;/a&gt; for examples and details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="624a5a8d10c60270d031b529a547369c7fd64845" translate="yes" xml:space="preserve">
          <source>All of the range fields translate to &lt;a href=&quot;https://www.psycopg.org/docs/extras.html#adapt-range&quot;&gt;psycopg2 Range objects&lt;/a&gt; in Python, but also accept tuples as input if no bounds information is necessary. The default is lower bound included, upper bound excluded; that is, &lt;code&gt;[)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2902724522b24a6a9baf75157913e5df50ff81cf" translate="yes" xml:space="preserve">
          <source>All of the searching tools provided by &lt;a href=&quot;../../ref/contrib/postgres/index#module-django.contrib.postgres&quot;&gt;&lt;code&gt;django.contrib.postgres&lt;/code&gt;&lt;/a&gt; are constructed entirely on public APIs such as &lt;a href=&quot;../../ref/models/lookups&quot;&gt;custom lookups&lt;/a&gt; and &lt;a href=&quot;../../ref/models/database-functions&quot;&gt;database functions&lt;/a&gt;. Depending on your database, you should be able to construct queries to allow similar APIs. If there are specific things which cannot be achieved this way, please open a ticket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c98396e0c2b9f2c7ef436c4e1cf9e5f31888c1be" translate="yes" xml:space="preserve">
          <source>All of these &lt;a href=&quot;../../migration-operations&quot;&gt;operations&lt;/a&gt; are available from the &lt;code&gt;django.contrib.postgres.operations&lt;/code&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf69fe6ddacfc94447bb1654591dc2ef5e20fd2e" translate="yes" xml:space="preserve">
          <source>All of these fields and widgets are available from the &lt;code&gt;django.contrib.postgres.forms&lt;/code&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6c91b1cb74c4317aa449a6be37db052e8b533e8" translate="yes" xml:space="preserve">
          <source>All of these fields are available from the &lt;code&gt;django.contrib.postgres.fields&lt;/code&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2acb772d997846489b2b26ab0c755d6580d4b4f6" translate="yes" xml:space="preserve">
          <source>All of these functions are available from the &lt;code&gt;django.contrib.postgres.functions&lt;/code&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="856c715c58d67f1194ee039629e537842d2c1e4d" translate="yes" xml:space="preserve">
          <source>All of these privileges are included in the DBA role, which is appropriate for use on a private developer&amp;rsquo;s database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbf98850f8f06d736b8ca5f7baec9fbb0a05444b" translate="yes" xml:space="preserve">
          <source>All open tags are closed implicitly, e.g. when a surrounding tag is closed or the HTML document ends.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0f69135e80ea5c60940b72ac5f763b58088a197" translate="yes" xml:space="preserve">
          <source>All other arguments are passed directly to the constructor of the email backend.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50e8cd16153274bc54b4af97b232706269c58a27" translate="yes" xml:space="preserve">
          <source>All other parameters are added with their value, after applying &lt;code&gt;str()&lt;/code&gt; to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f4fdbbc35fbb9ea3542dc3763d600cc60c72446" translate="yes" xml:space="preserve">
          <source>All parameters should be strings, except &lt;code&gt;categories&lt;/code&gt;, which should be a sequence of strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7f29b7d19514ab25d12772fb55a815025e66f61" translate="yes" xml:space="preserve">
          <source>All parameters should be strings, except &lt;code&gt;categories&lt;/code&gt;, which should be a sequence of strings. Beware that some control characters are &lt;a href=&quot;https://www.w3.org/International/questions/qa-controls&quot;&gt;not allowed&lt;/a&gt; in XML documents. If your content has some of them, you might encounter a &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; when producing the feed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4af4dad26ab178c09537c563b2a0614380b4b23a" translate="yes" xml:space="preserve">
          <source>All parameters, if given, should be strings, except:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a271b4683a28a9fc5a2fc552854a0d231daccb3" translate="yes" xml:space="preserve">
          <source>All paths listed in &lt;a href=&quot;../../ref/settings#std:setting-LOCALE_PATHS&quot;&gt;&lt;code&gt;LOCALE_PATHS&lt;/code&gt;&lt;/a&gt; in your settings file are searched for &lt;code&gt;&amp;lt;language&amp;gt;/LC_MESSAGES/django.(po|mo)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5db8c4111c1c2d8f37d711c7a4555c41dfb63b67" translate="yes" xml:space="preserve">
          <source>All signals are &lt;a href=&quot;#django.dispatch.Signal&quot;&gt;&lt;code&gt;django.dispatch.Signal&lt;/code&gt;&lt;/a&gt; instances. The &lt;code&gt;providing_args&lt;/code&gt; is a list of the names of arguments the signal will provide to listeners. This is purely documentational, however, as there is nothing that checks that the signal actually provides these arguments to its listeners.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5600e5832db9d352453e1ae0c944a0cb30304f5" translate="yes" xml:space="preserve">
          <source>All string literals are inserted &lt;strong&gt;without&lt;/strong&gt; any automatic escaping into the template &amp;ndash; they act as if they were all passed through the &lt;a href=&quot;builtins#std:templatefilter-safe&quot;&gt;&lt;code&gt;safe&lt;/code&gt;&lt;/a&gt; filter. The reasoning behind this is that the template author is in control of what goes into the string literal, so they can make sure the text is correctly escaped when the template is written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eef9606bdef9ac250cca6fae75b8370dda710764" translate="yes" xml:space="preserve">
          <source>All that will be stored in your database is a path to the file (relative to &lt;a href=&quot;../settings#std:setting-MEDIA_ROOT&quot;&gt;&lt;code&gt;MEDIA_ROOT&lt;/code&gt;&lt;/a&gt;). You&amp;rsquo;ll most likely want to use the convenience &lt;a href=&quot;#django.db.models.fields.files.FieldFile.url&quot;&gt;&lt;code&gt;url&lt;/code&gt;&lt;/a&gt; attribute provided by Django. For example, if your &lt;a href=&quot;#django.db.models.ImageField&quot;&gt;&lt;code&gt;ImageField&lt;/code&gt;&lt;/a&gt; is called &lt;code&gt;mug_shot&lt;/code&gt;, you can get the absolute path to your image in a template with &lt;code&gt;{{ object.mug_shot.url }}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f2f6ea665148cbc04152358949c5beb998e57ea" translate="yes" xml:space="preserve">
          <source>All the date formatting attributes in these mixins use &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt;&lt;code&gt;strftime()&lt;/code&gt;&lt;/a&gt; format characters. Do not try to use the format characters from the &lt;a href=&quot;../templates/builtins#std:templatetag-now&quot;&gt;&lt;code&gt;now&lt;/code&gt;&lt;/a&gt; template tag as they are not compatible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d411a1915cf1d79692f0ecc7eab33f4df58268f" translate="yes" xml:space="preserve">
          <source>All the following querying routines may take either a string IP address or a fully qualified domain name (FQDN). For example, both &lt;code&gt;'205.186.163.125'&lt;/code&gt; and &lt;code&gt;'djangoproject.com'&lt;/code&gt; would be valid query parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a23111386f47d33144e97c201e8b2819947440dd" translate="yes" xml:space="preserve">
          <source>All the form&amp;rsquo;s fields and their attributes will be unpacked into HTML markup from that &lt;code&gt;{{ form }}&lt;/code&gt; by Django&amp;rsquo;s template language.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70f425fb82934c9c3f6ad3e0e4651384ac86ae46" translate="yes" xml:space="preserve">
          <source>All these constructors take the keyword argument &lt;code&gt;srid&lt;/code&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d93916726c30a4bd59a342267e7e13db2348de5f" translate="yes" xml:space="preserve">
          <source>All three steps are performed when you call a model&amp;rsquo;s &lt;a href=&quot;#django.db.models.Model.full_clean&quot;&gt;&lt;code&gt;full_clean()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f5d1da75bdef06070e1dc5cbe9e56db56806493" translate="yes" xml:space="preserve">
          <source>All types of whitespace are considered equivalent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="960e29b6390375b2975735a4f48891f3bc5ac228" translate="yes" xml:space="preserve">
          <source>All views are &lt;a href=&quot;../class-based-views/index&quot;&gt;class-based&lt;/a&gt;, which allows you to easily customize them by subclassing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="511c46e961182dd1e2188c3056c3fd8298dc280a" translate="yes" xml:space="preserve">
          <source>All writer objects have a &lt;code&gt;write(geom)&lt;/code&gt; method that returns either the WKB or WKT of the given geometry. In addition, &lt;a href=&quot;#django.contrib.gis.geos.WKBWriter&quot;&gt;&lt;code&gt;WKBWriter&lt;/code&gt;&lt;/a&gt; objects also have properties that may be used to change the byte order, and or include the SRID value (in other words, EWKB).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="976206a5e39fc2cd6f46f9358ce379242cf92f7c" translate="yes" xml:space="preserve">
          <source>All you need to do to get your form into a template is to place the form instance into the template context. So if your form is called &lt;code&gt;form&lt;/code&gt; in the context, &lt;code&gt;{{ form }}&lt;/code&gt; will render its &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; elements appropriately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42b60e0ae235388663637de3e921a7ed4445dd82" translate="yes" xml:space="preserve">
          <source>Allow certain users to connect to a WebDAV share created with &lt;a href=&quot;https://httpd.apache.org/docs/2.2/mod/mod_dav.html&quot;&gt;mod_dav&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="190d3b06294b0737593e33b2a763d1fcd1eea641" translate="yes" xml:space="preserve">
          <source>Allow the &lt;a href=&quot;templates/api#django.template.context_processors.debug&quot;&gt;&lt;code&gt;debug()&lt;/code&gt;&lt;/a&gt; context processor to add some variables to the template context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66b7cc1827e806b544424c0ff618a3255503780d" translate="yes" xml:space="preserve">
          <source>Allow users to create, update, and delete objects &amp;ndash; with or without authorization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71a13e3c339e6985292477c95ec07f081b0e242e" translate="yes" xml:space="preserve">
          <source>Allowed HTTP methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec83abe710d81428cfbbb0caa76901503f7932b0" translate="yes" xml:space="preserve">
          <source>Allows Django to skip an app&amp;rsquo;s initial migration if all database tables with the names of all models created by all &lt;a href=&quot;migration-operations#django.db.migrations.operations.CreateModel&quot;&gt;&lt;code&gt;CreateModel&lt;/code&gt;&lt;/a&gt; operations in that migration already exist. This option is intended for use when first running migrations against a database that preexisted the use of migrations. This option does not, however, check for matching database schema beyond matching table names and so is only safe to use if you are confident that your existing schema matches what is recorded in your initial migration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f1aa13a48b42ff100decd5fc5ded1a58aa81a1a" translate="yes" xml:space="preserve">
          <source>Allows a user to change their password.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6c4b72fea14639d13b981ac1ddbff185022a039" translate="yes" xml:space="preserve">
          <source>Allows a user to reset their password by generating a one-time use link that can be used to reset the password, and sending that link to the user&amp;rsquo;s registered email address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b5db4acef816cc020ffda17473160d626d24626" translate="yes" xml:space="preserve">
          <source>Allows changing a user&amp;rsquo;s password. It prompts you to enter a new password twice for the given user. If the entries are identical, this immediately becomes the new password. If you do not supply a user, the command will attempt to change the password whose username matches the current user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="945c742eac538b55929d9c2519561e805d8de9f1" translate="yes" xml:space="preserve">
          <source>Allows creating tables for apps without migrations. While this isn&amp;rsquo;t recommended, the migrations framework is sometimes too slow on large projects with hundreds of models.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="775e744db0d361ad243681079679c9dfe7619701" translate="yes" xml:space="preserve">
          <source>Allows naming the generated migration(s) instead of using a generated name. The name must be a valid Python &lt;a href=&quot;https://docs.python.org/3/reference/lexical_analysis.html#identifiers&quot;&gt;identifier&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c5d7a1ae635e28e0843f83610edbf2c00760416" translate="yes" xml:space="preserve">
          <source>Allows running of arbitrary SQL on the database - useful for more advanced features of database backends that Django doesn&amp;rsquo;t support directly, like partial indexes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3fc80d31ea31c921a37c65daf34995b592e35ee" translate="yes" xml:space="preserve">
          <source>Allows the handler to completely override the parsing of the raw HTTP input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eccb9b87175b88b821a7bc4e489d2465a78cb3b9" translate="yes" xml:space="preserve">
          <source>Allows the selection of a single model object, suitable for representing a foreign key. Note that the default widget for &lt;code&gt;ModelChoiceField&lt;/code&gt; becomes impractical when the number of entries increases. You should avoid using it for more than 100 items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29acfb43849ab9b0daf20cd41edafb3f9243b2d6" translate="yes" xml:space="preserve">
          <source>Allows the selection of one or more model objects, suitable for representing a many-to-many relation. As with &lt;a href=&quot;#django.forms.ModelChoiceField&quot;&gt;&lt;code&gt;ModelChoiceField&lt;/code&gt;&lt;/a&gt;, you can use &lt;code&gt;label_from_instance&lt;/code&gt; to customize the object representations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc224d0743f2b3f1729cd3289e77a06a12ab78e8" translate="yes" xml:space="preserve">
          <source>Along with another app &lt;code&gt;rare/models.py&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74c6032e98af391fe7bf85d75bccec29ac396723" translate="yes" xml:space="preserve">
          <source>Also as a convenience, the &lt;code&gt;ModelAdmin&lt;/code&gt; object is passed to the &lt;code&gt;lookups&lt;/code&gt; method, for example if you want to base the lookups on the available data:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dccc91e2b5b7283cd7d78d2ca5a8c6c83cdc4461" translate="yes" xml:space="preserve">
          <source>Also consider what you want to happen when the migration is unapplied. You could either do nothing (as in the example above) or remove some or all of the data from the new application. Adjust the second argument of the &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.RunPython&quot;&gt;&lt;code&gt;RunPython&lt;/code&gt;&lt;/a&gt; operation accordingly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="079db1f37aab1427fb72df3b03673a8a53beed4e" translate="yes" xml:space="preserve">
          <source>Also make sure that the database user provided in &lt;code&gt;mysite/settings.py&lt;/code&gt; has &amp;ldquo;create database&amp;rdquo; privileges. This allows automatic creation of a &lt;a href=&quot;../topics/testing/overview#the-test-database&quot;&gt;test database&lt;/a&gt; which will be needed in a later tutorial.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="430d3e806bb33f656af3862b5015413135ec86e7" translate="yes" xml:space="preserve">
          <source>Also make sure you&amp;rsquo;ve correctly set &lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt;&lt;code&gt;SITE_ID&lt;/code&gt;&lt;/a&gt; to the ID of the site the settings file represents. This will usually be &lt;code&gt;1&lt;/code&gt; (i.e. &lt;code&gt;SITE_ID = 1&lt;/code&gt;, but if you&amp;rsquo;re using the sites framework to manage multiple sites, it could be the ID of a different site.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8b0b0c45501b28f9ae6548c508388d04ebd9a13" translate="yes" xml:space="preserve">
          <source>Also note that &lt;code&gt;initial&lt;/code&gt; values are &lt;em&gt;not&lt;/em&gt; used as &amp;ldquo;fallback&amp;rdquo; data in validation if a particular field&amp;rsquo;s value is not given. &lt;code&gt;initial&lt;/code&gt; values are &lt;em&gt;only&lt;/em&gt; intended for initial form display:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be520e4bab7c72fb552c6243756860e284bb3687" translate="yes" xml:space="preserve">
          <source>Also note that &lt;code&gt;items()&lt;/code&gt; also follows the same algorithm &amp;ndash; first, it tries &lt;code&gt;items(obj)&lt;/code&gt;, then &lt;code&gt;items()&lt;/code&gt;, then finally an &lt;code&gt;items&lt;/code&gt; class attribute (which should be a list).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddd7d3643d00b0897475d780a3c9e83ac347bcfc" translate="yes" xml:space="preserve">
          <source>Also note that Django expects the &lt;code&gt;&quot;%s&quot;&lt;/code&gt; placeholder, &lt;em&gt;not&lt;/em&gt; the &lt;code&gt;&quot;?&quot;&lt;/code&gt; placeholder, which is used by the SQLite Python bindings. This is for the sake of consistency and sanity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2634049a3f74c53b08c8960283181a1d277b605" translate="yes" xml:space="preserve">
          <source>Also note that GeoDjango provides a &lt;a href=&quot;../ref/contrib/gis/serializers&quot;&gt;customized GeoJSON serializer&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09c5f604de33bd5f14c0e2b803d418d64e00922c" translate="yes" xml:space="preserve">
          <source>Also note that by the time you reach this step, individual model instances have already been created for each &lt;code&gt;Form&lt;/code&gt;. Modifying a value in &lt;code&gt;form.cleaned_data&lt;/code&gt; is not sufficient to affect the saved value. If you wish to modify a value in &lt;code&gt;ModelFormSet.clean()&lt;/code&gt; you must modify &lt;code&gt;form.instance&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b6f701f2b5f4527d2271459ed75e2410e4d7a1b" translate="yes" xml:space="preserve">
          <source>Also note that even an uploaded HTML file, since it can be executed by the browser (though not by the server), can pose security threats that are equivalent to XSS or CSRF attacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f8ddc74def1b0eb285056b958bc6feae34a8858" translate="yes" xml:space="preserve">
          <source>Also note that even though slicing an unevaluated &lt;code&gt;QuerySet&lt;/code&gt; returns another unevaluated &lt;code&gt;QuerySet&lt;/code&gt;, modifying it further (e.g., adding more filters, or modifying ordering) is not allowed, since that does not translate well into SQL and it would not have a clear meaning either.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb1d889432b542300870c076033a0c500c3f32c9" translate="yes" xml:space="preserve">
          <source>Also note that there are special considerations when overriding the &lt;code&gt;clean()&lt;/code&gt; method of a &lt;code&gt;ModelForm&lt;/code&gt; subclass. (see the &lt;a href=&quot;../../topics/forms/modelforms#overriding-modelform-clean-method&quot;&gt;ModelForm documentation&lt;/a&gt; for more information)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b337869beeb43597783a966bea73e9d052f4736d" translate="yes" xml:space="preserve">
          <source>Also note that your code should &lt;em&gt;not&lt;/em&gt; import from either &lt;code&gt;global_settings&lt;/code&gt; or your own settings file. &lt;code&gt;django.conf.settings&lt;/code&gt; abstracts the concepts of default settings and site-specific settings; it presents a single interface. It also decouples the code that uses settings from the location of your settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b29efb6291c296b502920b310ea73c4228fffac" translate="yes" xml:space="preserve">
          <source>Also note the &amp;ldquo;Add Another&amp;rdquo; link next to &amp;ldquo;Question.&amp;rdquo; Every object with a &lt;code&gt;ForeignKey&lt;/code&gt; relationship to another gets this for free. When you click &amp;ldquo;Add Another&amp;rdquo;, you&amp;rsquo;ll get a popup window with the &amp;ldquo;Add question&amp;rdquo; form. If you add a question in that window and click &amp;ldquo;Save&amp;rdquo;, Django will save the question to the database and dynamically add it as the selected choice on the &amp;ldquo;Add choice&amp;rdquo; form you&amp;rsquo;re looking at.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf024fe79e32a8702c4c93dfb2506ad81ad9987b" translate="yes" xml:space="preserve">
          <source>Also note: if you want a user account to be able to create users using the Django admin site, you&amp;rsquo;ll need to give them permission to add users &lt;em&gt;and&lt;/em&gt; change users (i.e., the &amp;ldquo;Add user&amp;rdquo; and &amp;ldquo;Change user&amp;rdquo; permissions). If an account has permission to add users but not to change them, that account won&amp;rsquo;t be able to add users. Why? Because if you have permission to add users, you have the power to create superusers, which can then, in turn, change other users. So Django requires add &lt;em&gt;and&lt;/em&gt; change permissions as a slight security measure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="696e086368362c2d09106b35b57c47867e028a93" translate="yes" xml:space="preserve">
          <source>Also notice that this isn&amp;rsquo;t a very elegant way of doing publisher-specific books. If we want to add another publisher page, we&amp;rsquo;d need another handful of lines in the URLconf, and more than a few publishers would get unreasonable. We&amp;rsquo;ll deal with this problem in the next section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9b4efe342a799ea29ae37efd1b65b2539fe6c99" translate="yes" xml:space="preserve">
          <source>Also takes &lt;code&gt;max_length&lt;/code&gt;, &lt;code&gt;min_length&lt;/code&gt;, and &lt;code&gt;strip&lt;/code&gt;, which work just as they do for &lt;a href=&quot;#django.forms.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43d3f0dec8708afadcd4301e960c1f9ba74f008b" translate="yes" xml:space="preserve">
          <source>Also takes some optional arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41e4d1d7bc570080f714dde302cfe63771621c32" translate="yes" xml:space="preserve">
          <source>Also this helper function only serves the actual &lt;a href=&quot;../../ref/settings#std:setting-STATIC_ROOT&quot;&gt;&lt;code&gt;STATIC_ROOT&lt;/code&gt;&lt;/a&gt; folder; it doesn&amp;rsquo;t perform static files discovery like &lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt;&lt;code&gt;django.contrib.staticfiles&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="953ccdb4013747658e82aad06c56f0c154c9caf2" translate="yes" xml:space="preserve">
          <source>Also, &lt;code&gt;extra=0&lt;/code&gt; doesn&amp;rsquo;t prevent creation of new model instances as you can &lt;a href=&quot;formsets#understanding-the-managementform&quot;&gt;add additional forms with JavaScript&lt;/a&gt; or send additional POST data. Formsets &lt;a href=&quot;https://code.djangoproject.com/ticket/26142&quot;&gt;don&amp;rsquo;t yet provide functionality&lt;/a&gt; for an &amp;ldquo;edit only&amp;rdquo; view that prevents creation of new instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2bd6e68e9d37a21829d8762c978cf7a2c012cf0" translate="yes" xml:space="preserve">
          <source>Also, &lt;code&gt;request.POST&lt;/code&gt; is accessed by &lt;a href=&quot;../../ref/middleware#django.middleware.csrf.CsrfViewMiddleware&quot;&gt;&lt;code&gt;CsrfViewMiddleware&lt;/code&gt;&lt;/a&gt; which is enabled by default. This means you will need to use &lt;a href=&quot;../../ref/csrf#django.views.decorators.csrf.csrf_exempt&quot;&gt;&lt;code&gt;csrf_exempt()&lt;/code&gt;&lt;/a&gt; on your view to allow you to change the upload handlers. You will then need to use &lt;a href=&quot;../../ref/csrf#django.views.decorators.csrf.csrf_protect&quot;&gt;&lt;code&gt;csrf_protect()&lt;/code&gt;&lt;/a&gt; on the function that actually processes the request. Note that this means that the handlers may start receiving the file upload before the CSRF checks have been done. Example code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92a75a0b0baf789cfb6ccc150f550b1442b059a0" translate="yes" xml:space="preserve">
          <source>Also, if you call the database-altering methods &lt;a href=&quot;relations#django.db.models.fields.related.RelatedManager.add&quot;&gt;&lt;code&gt;add()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;relations#django.db.models.fields.related.RelatedManager.remove&quot;&gt;&lt;code&gt;remove()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;relations#django.db.models.fields.related.RelatedManager.clear&quot;&gt;&lt;code&gt;clear()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;relations#django.db.models.fields.related.RelatedManager.set&quot;&gt;&lt;code&gt;set()&lt;/code&gt;&lt;/a&gt;, on &lt;a href=&quot;relations#django.db.models.fields.related.RelatedManager&quot;&gt;&lt;code&gt;related managers&lt;/code&gt;&lt;/a&gt;, any prefetched cache for the relation will be cleared.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="698ca776869738d41eaf7a155f51f0e5da884fdc" translate="yes" xml:space="preserve">
          <source>Also, if your search fields include fields that aren&amp;rsquo;t indexed by the database, you might encounter poor performance on extremely large tables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0825e6acbf0d587052cfc960fc478bc68675d460" translate="yes" xml:space="preserve">
          <source>Also, if your template tag creates a new context for performing some sub-rendering, set the auto-escape attribute to the current context&amp;rsquo;s value. The &lt;code&gt;__init__&lt;/code&gt; method for the &lt;code&gt;Context&lt;/code&gt; class takes a parameter called &lt;code&gt;autoescape&lt;/code&gt; that you can use for this purpose. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92abe54f4e4095755881b3d83e2ca157117e1f06" translate="yes" xml:space="preserve">
          <source>Also, it&amp;rsquo;s an error to call &lt;code&gt;configure()&lt;/code&gt; more than once, or to call &lt;code&gt;configure()&lt;/code&gt; after any setting has been accessed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de338795c2b16c294f7a41b095d17ca5ed1c7c66" translate="yes" xml:space="preserve">
          <source>Also, note that &lt;code&gt;reverse()&lt;/code&gt; should generally only be called on a &lt;code&gt;QuerySet&lt;/code&gt; which has a defined ordering (e.g., when querying against a model which defines a default ordering, or when using &lt;a href=&quot;#django.db.models.query.QuerySet.order_by&quot;&gt;&lt;code&gt;order_by()&lt;/code&gt;&lt;/a&gt;). If no such ordering is defined for a given &lt;code&gt;QuerySet&lt;/code&gt;, calling &lt;code&gt;reverse()&lt;/code&gt; on it has no real effect (the ordering was undefined prior to calling &lt;code&gt;reverse()&lt;/code&gt;, and will remain undefined afterward).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6564a059141b793de7c4015d115111e5700aa878" translate="yes" xml:space="preserve">
          <source>Also, note the &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting at the top of the file. That holds the names of all Django applications that are activated in this Django instance. Apps can be used in multiple projects, and you can package and distribute them for use by others in their projects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32fad38c70d331f28b8993769e786f5f8acf6480" translate="yes" xml:space="preserve">
          <source>Also, register the model in the app&amp;rsquo;s &lt;code&gt;admin.py&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47fd7628205150d42e8bf244b355fc6770d7aa52" translate="yes" xml:space="preserve">
          <source>Also, use of &lt;code&gt;iterator()&lt;/code&gt; causes previous &lt;code&gt;prefetch_related()&lt;/code&gt; calls to be ignored since these two optimizations do not make sense together.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c24b47c5852869dcfdc94dc268593f79c8801929" translate="yes" xml:space="preserve">
          <source>Also, you can easily &lt;a href=&quot;../../howto/custom-model-fields&quot;&gt;write your own custom model fields&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe2f959782b3ac938753e3a5cc6f8e44788d56e9" translate="yes" xml:space="preserve">
          <source>Also, you can give &lt;a href=&quot;#django.template.RequestContext&quot;&gt;&lt;code&gt;RequestContext&lt;/code&gt;&lt;/a&gt; a list of additional processors, using the optional, third positional argument, &lt;code&gt;processors&lt;/code&gt;. In this example, the &lt;a href=&quot;#django.template.RequestContext&quot;&gt;&lt;code&gt;RequestContext&lt;/code&gt;&lt;/a&gt; instance gets an &lt;code&gt;ip_address&lt;/code&gt; variable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d068b3f2fe4f8285a438bec72113e6d9cc12d56b" translate="yes" xml:space="preserve">
          <source>Altering settings at runtime</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71a869542b89c60e80814055a00906889f48491c" translate="yes" xml:space="preserve">
          <source>Alternative software implementations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e522f9a7cffe2ed0c63f89a3004cfe45ca65f35" translate="yes" xml:space="preserve">
          <source>Alternative template systems vary in the extent to which they share Django&amp;rsquo;s templating language.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33dcb6032eefd2804d531b416d323ccba2ea1014" translate="yes" xml:space="preserve">
          <source>Alternatively it is possible to register the inclusion tag using a &lt;a href=&quot;../ref/templates/api#django.template.Template&quot;&gt;&lt;code&gt;django.template.Template&lt;/code&gt;&lt;/a&gt; instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7cdd84aa7f928d9cff82ebbc61a89788dc1bc59" translate="yes" xml:space="preserve">
          <source>Alternatively you can use plain text and &lt;a href=&quot;../utils#django.utils.html.escape&quot;&gt;&lt;code&gt;django.utils.html.escape()&lt;/code&gt;&lt;/a&gt; to escape any HTML special characters. Ensure that you escape any help text that may come from untrusted users to avoid a cross-site scripting attack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2624e15c47d1ca23eaf50d436bb985d27e5220ab" translate="yes" xml:space="preserve">
          <source>Alternatively, it would still be less work than the above approach to have a separate view for processing the form, which could use &lt;a href=&quot;../../ref/class-based-views/generic-editing#django.views.generic.edit.FormView&quot;&gt;&lt;code&gt;FormView&lt;/code&gt;&lt;/a&gt; distinct from &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt; without concerns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ceea1051ad37e03b252c47ef8b593e57b8c022b" translate="yes" xml:space="preserve">
          <source>Alternatively, template tag modules can be registered through the &lt;code&gt;'libraries'&lt;/code&gt; argument to &lt;a href=&quot;../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt;&lt;code&gt;DjangoTemplates&lt;/code&gt;&lt;/a&gt;. This is useful if you want to use a different label from the template tag module name when loading template tags. It also enables you to register tags without installing an application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad074627882cec434ab6881802c7f64d46ab69ee" translate="yes" xml:space="preserve">
          <source>Alternatively, you can activate the &lt;a href=&quot;../../ref/templates/api#django.template.context_processors.tz&quot;&gt;&lt;code&gt;tz()&lt;/code&gt;&lt;/a&gt; context processor and use the &lt;code&gt;TIME_ZONE&lt;/code&gt; context variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d7e1d285de0e8c723c915766ec923e21dec62b3" translate="yes" xml:space="preserve">
          <source>Alternatively, you can create a subclass that sets &lt;code&gt;self.queryset&lt;/code&gt; in &lt;code&gt;__init__&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9aa58af8effd4d680ef6010538b711b78b68f52" translate="yes" xml:space="preserve">
          <source>Alternatively, you can map fields in the query to model fields using the &lt;code&gt;translations&lt;/code&gt; argument to &lt;code&gt;raw()&lt;/code&gt;. This is a dictionary mapping names of fields in the query to names of fields on the model. For example, the above query could also be written:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="588bd3c0e8ac048379d18ae614bd814abd203833" translate="yes" xml:space="preserve">
          <source>Alternatively, you can pass &lt;code&gt;attach()&lt;/code&gt; three arguments: &lt;code&gt;filename&lt;/code&gt;, &lt;code&gt;content&lt;/code&gt; and &lt;code&gt;mimetype&lt;/code&gt;. &lt;code&gt;filename&lt;/code&gt; is the name of the file attachment as it will appear in the email, &lt;code&gt;content&lt;/code&gt; is the data that will be contained inside the attachment and &lt;code&gt;mimetype&lt;/code&gt; is the optional MIME type for the attachment. If you omit &lt;code&gt;mimetype&lt;/code&gt;, the MIME content type will be guessed from the filename of the attachment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56baacf75a7d1dd4e8e5a5ae7bb58b76cd961ea0" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use &lt;code&gt;save(commit=False)&lt;/code&gt; and manually set any extra required fields:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85fbfeef40e52114cb18912e3180133fb64b164e" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use a &lt;a href=&quot;#django.dispatch.receiver&quot;&gt;&lt;code&gt;receiver()&lt;/code&gt;&lt;/a&gt; decorator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2ab6c8b2d0a505ac8a240c953a735296c8dd0ef" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use the &lt;a href=&quot;../topics/templates&quot;&gt;Django template system&lt;/a&gt; to generate CSV. This is lower-level than using the convenient Python &lt;a href=&quot;https://docs.python.org/3/library/csv.html#module-csv&quot;&gt;&lt;code&gt;csv&lt;/code&gt;&lt;/a&gt; module, but the solution is presented here for completeness.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27e398202050801cd681b4055b573026e175814f" translate="yes" xml:space="preserve">
          <source>Alternatively, you may alter an existing user&amp;rsquo;s role from the SQL shell (assuming this is done from an existing superuser account):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0abe152a51938c05079be6a7f31d395c658aeab4" translate="yes" xml:space="preserve">
          <source>Alternatively, you may have a complex Python object that can somehow be serialized to fit into a standard database column type. This is another case where a &lt;code&gt;Field&lt;/code&gt; subclass will help you use your object with your models.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d22e73a36ee72142b9710c6f598b2fa17ad341ae" translate="yes" xml:space="preserve">
          <source>Alternatively, your filter code can manually take care of any necessary escaping. This is necessary when you&amp;rsquo;re introducing new HTML markup into the result. You want to mark the output as safe from further escaping so that your HTML markup isn&amp;rsquo;t escaped further, so you&amp;rsquo;ll need to handle the input yourself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea10ad892df4bcea34e41f944c0cec79f52baaf9" translate="yes" xml:space="preserve">
          <source>Alternatives to Django&amp;rsquo;s template language</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae3e5f3db33e272b63b1b64732ee7fcd4f54eb4b" translate="yes" xml:space="preserve">
          <source>Alters a field&amp;rsquo;s definition, including changes to its type, &lt;a href=&quot;models/fields#django.db.models.Field.null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;models/fields#django.db.models.Field.unique&quot;&gt;&lt;code&gt;unique&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;models/fields#django.db.models.Field.db_column&quot;&gt;&lt;code&gt;db_column&lt;/code&gt;&lt;/a&gt; and other field attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5910625172e9af95bdd7fc7ab84528f5d87198e" translate="yes" xml:space="preserve">
          <source>Alters the managers that are available during migrations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36a270dcb3503dfb775409cd7f97e05895cb28d0" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; output is the default output style when you &lt;code&gt;print&lt;/code&gt; a form, other output styles are available. Each style is available as a method on a form object, and each rendering method returns a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1d6bdab964b21813432d1c5afef320356d65640" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;reporter.stories_filed = F('stories_filed') + 1&lt;/code&gt; looks like a normal Python assignment of value to an instance attribute, in fact it&amp;rsquo;s an SQL construct describing an operation on the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb73c88f5f50706eae03b23bf2627359294c5bf9" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;select_for_update()&lt;/code&gt; normally fails in autocommit mode, since &lt;a href=&quot;../../topics/testing/tools#django.test.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; automatically wraps each test in a transaction, calling &lt;code&gt;select_for_update()&lt;/code&gt; in a &lt;code&gt;TestCase&lt;/code&gt; even outside an &lt;a href=&quot;../../topics/db/transactions#django.db.transaction.atomic&quot;&gt;&lt;code&gt;atomic()&lt;/code&gt;&lt;/a&gt; block will (perhaps unexpectedly) pass without raising a &lt;code&gt;TransactionManagementError&lt;/code&gt;. To properly test &lt;code&gt;select_for_update()&lt;/code&gt; you should use &lt;a href=&quot;../../topics/testing/tools#django.test.TransactionTestCase&quot;&gt;&lt;code&gt;TransactionTestCase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17d2e7a0d393b7d56d8a593921880b94e217792b" translate="yes" xml:space="preserve">
          <source>Although Python provides a mail sending interface via the &lt;a href=&quot;https://docs.python.org/3/library/smtplib.html#module-smtplib&quot;&gt;&lt;code&gt;smtplib&lt;/code&gt;&lt;/a&gt; module, Django provides a couple of light wrappers over it. These wrappers are provided to make sending email extra quick, to help test email sending during development, and to provide support for platforms that can&amp;rsquo;t use SMTP.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad28848e7e3de4d9e1c1d1e1c78fd615e37e0584" translate="yes" xml:space="preserve">
          <source>Although it&amp;rsquo;s not required that you use the sites framework, it&amp;rsquo;s strongly encouraged, because Django takes advantage of it in a few places. Even if your Django installation is powering only a single site, you should take the two seconds to create the site object with your &lt;code&gt;domain&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt;, and point to its ID in your &lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt;&lt;code&gt;SITE_ID&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="194869c1637c7a1a85b3692422964d84722a7385" translate="yes" xml:space="preserve">
          <source>Although macOS comes with Python installed, users can use &lt;a href=&quot;https://www.python.org/ftp/python/&quot;&gt;framework installers&lt;/a&gt; provided by the Python Software Foundation. An advantage to using the installer is that macOS&amp;rsquo;s Python will remain &amp;ldquo;pristine&amp;rdquo; for internal operating system use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df04fcbdb047e55419855b5e1f2c6a44d972baa7" translate="yes" xml:space="preserve">
          <source>Although some commands may allow their own custom options, every command allows for the following options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25e537bbf3b1fe34054d4a0be78f060d686c2d47" translate="yes" xml:space="preserve">
          <source>Although the above example would work in the Python interactive interpreter, some of the test client&amp;rsquo;s functionality, notably the template-related functionality, is only available &lt;em&gt;while tests are running&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="642aada3b4dd7550553bdd48221f14037a9e70d5" translate="yes" xml:space="preserve">
          <source>Although the module is named &lt;code&gt;gdal&lt;/code&gt;, GeoDjango only supports some of the capabilities of OGR and GDAL&amp;rsquo;s raster features at this time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bee4b6c86d4b5ab7cb7d3c1c53cb24d37af0da9f" translate="yes" xml:space="preserve">
          <source>Although the primary way you&amp;rsquo;ll use &lt;code&gt;Field&lt;/code&gt; classes is in &lt;code&gt;Form&lt;/code&gt; classes, you can also instantiate them and use them directly to get a better idea of how they work. Each &lt;code&gt;Field&lt;/code&gt; instance has a &lt;code&gt;clean()&lt;/code&gt; method, which takes a single argument and either raises a &lt;code&gt;django.forms.ValidationError&lt;/code&gt; exception or returns the clean value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6226386795c943c9b1edd5627cd66bae7276a870" translate="yes" xml:space="preserve">
          <source>Although the setting offers little practical benefit, it&amp;rsquo;s sometimes required by security auditors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7668db2531ca50b0b25171433eb3dcb36b9e4815" translate="yes" xml:space="preserve">
          <source>Although there is no built-in method for copying model instances, it is possible to easily create new instance with all fields&amp;rsquo; values copied. In the simplest case, you can set &lt;code&gt;pk&lt;/code&gt; to &lt;code&gt;None&lt;/code&gt;. Using our blog example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e224421f07b0d6dcb4559fde5db93254f751573e" translate="yes" xml:space="preserve">
          <source>Although you can access model classes as described above, avoid interacting with the database in your &lt;a href=&quot;#django.apps.AppConfig.ready&quot;&gt;&lt;code&gt;ready()&lt;/code&gt;&lt;/a&gt; implementation. This includes model methods that execute queries (&lt;a href=&quot;models/instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;models/instances#django.db.models.Model.delete&quot;&gt;&lt;code&gt;delete()&lt;/code&gt;&lt;/a&gt;, manager methods etc.), and also raw SQL queries via &lt;code&gt;django.db.connection&lt;/code&gt;. Your &lt;a href=&quot;#django.apps.AppConfig.ready&quot;&gt;&lt;code&gt;ready()&lt;/code&gt;&lt;/a&gt; method will run during startup of every management command. For example, even though the test database configuration is separate from the production settings, &lt;code&gt;manage.py test&lt;/code&gt; would still execute some queries against your &lt;strong&gt;production&lt;/strong&gt; database!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61b75b8d0b36d72cb541a55f1994f7c38a8ead9d" translate="yes" xml:space="preserve">
          <source>Although you can pass any number of arguments to a template tag using &lt;code&gt;token.split_contents()&lt;/code&gt;, the arguments are all unpacked as string literals. A little more work is required in order to pass dynamic content (a template variable) to a template tag as an argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1a76598ce45e214be02b0c1dad6e5cccdb65e6a" translate="yes" xml:space="preserve">
          <source>Although you can use Django without a database, it comes with an &lt;a href=&quot;https://en.wikipedia.org/wiki/Object-relational_mapping&quot;&gt;object-relational mapper&lt;/a&gt; in which you describe your database layout in Python code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f2946c2a1c3d3fb758114cb91b72f1c7ecc85a0" translate="yes" xml:space="preserve">
          <source>Although you can&amp;rsquo;t import models at the module-level where &lt;a href=&quot;#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; classes are defined, you can import them in &lt;code&gt;ready()&lt;/code&gt;, using either an &lt;code&gt;import&lt;/code&gt; statement or &lt;a href=&quot;#django.apps.AppConfig.get_model&quot;&gt;&lt;code&gt;get_model()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c9d48b83bada6a5ee76fb5e0fea2eab96528d7e" translate="yes" xml:space="preserve">
          <source>Although you might think about storing files in the database, consider that it is bad design in 99% of the cases. This field is &lt;em&gt;not&lt;/em&gt; a replacement for proper &lt;a href=&quot;../../howto/static-files/index&quot;&gt;static files&lt;/a&gt; handling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67df2de3326ef19fc04ce801e27ed4b4b8fad0ec" translate="yes" xml:space="preserve">
          <source>Always &lt;code&gt;False&lt;/code&gt;. This method makes an &lt;a href=&quot;#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; instance a stream-like object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4686e5206fe2cbfcf5605c9202da330b22ccc178" translate="yes" xml:space="preserve">
          <source>Always &lt;code&gt;True&lt;/code&gt;. This method makes an &lt;a href=&quot;#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; instance a stream-like object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="125a4148526d3132ede8f973cff78ac6a82e0dff" translate="yes" xml:space="preserve">
          <source>Always prefer &lt;a href=&quot;#django.db.transaction.atomic&quot;&gt;&lt;code&gt;atomic()&lt;/code&gt;&lt;/a&gt; if possible at all. It accounts for the idiosyncrasies of each database and prevents invalid operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92aeab1f6ae301136883fbf61b508354c6a1d03b" translate="yes" xml:space="preserve">
          <source>Always refer to the documentation that corresponds to the version of Django you&amp;rsquo;re using!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e36151c5431caa487785143303f4667f6105373" translate="yes" xml:space="preserve">
          <source>Always return strings from a template tag&amp;rsquo;s &lt;code&gt;render()&lt;/code&gt; method and from template filters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e129e2c256cac5a202052b90d6f48444141571d0" translate="yes" xml:space="preserve">
          <source>Always use &lt;code&gt;params&lt;/code&gt; instead of embedding values directly into &lt;code&gt;where&lt;/code&gt; because &lt;code&gt;params&lt;/code&gt; will ensure values are quoted correctly according to your particular backend. For example, quotes will be escaped correctly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1509c95c0c093c1fb332475c1de5de599eb6a97d" translate="yes" xml:space="preserve">
          <source>Amend URLconf</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0797826ea1aa534137aa2c3b4982212038f9bbc" translate="yes" xml:space="preserve">
          <source>Amend views</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98cb3586308743cf6fabda4d4ef48767bd8f9376" translate="yes" xml:space="preserve">
          <source>Among Django&amp;rsquo;s built-in database backends, MySQL 8.0.2+, PostgreSQL, and Oracle support window expressions. Support for different window expression features varies among the different databases. For example, the options in &lt;a href=&quot;#django.db.models.Expression.asc&quot;&gt;&lt;code&gt;asc()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.db.models.Expression.desc&quot;&gt;&lt;code&gt;desc()&lt;/code&gt;&lt;/a&gt; may not be supported. Consult the documentation for your database as needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc2ba95fda99894557e8f895c4b9ab687f5bc290" translate="yes" xml:space="preserve">
          <source>Among other things, the default logging configuration passes HTTP 500 server errors to an email log handler when &lt;a href=&quot;#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;False&lt;/code&gt;. See also &lt;a href=&quot;../topics/logging#configuring-logging&quot;&gt;Configuring logging&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5dfcb63505f909d2e384679116d111c4e9c2d49" translate="yes" xml:space="preserve">
          <source>An &amp;ldquo;exact&amp;rdquo; match. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f863f157d9803f99f181e74a12c7d7d120b7259" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#django.core.validators.EmailValidator&quot;&gt;&lt;code&gt;EmailValidator&lt;/code&gt;&lt;/a&gt; instance without any customizations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c68635b466c4a39a19dd05df8c021ee90a24ffd" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#django.db.models.IntegerField&quot;&gt;&lt;code&gt;IntegerField&lt;/code&gt;&lt;/a&gt; that automatically increments according to available IDs. You usually won&amp;rsquo;t need to use this directly; a primary key field will automatically be added to your model if you don&amp;rsquo;t specify otherwise. See &lt;a href=&quot;../../topics/db/models#automatic-primary-key-fields&quot;&gt;Automatic primary key fields&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faddb2573c4c67040a191c29d77ac165c4bfede9" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; subclass that helps to create a JSON-encoded response. It inherits most behavior from its superclass with a couple differences:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0d33f2c22b5dcd80cd0b425eda25b332db008db" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../../request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; representing the current request,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="186111add1c13054b5e366f4d7b79674600a0885" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;applications#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; instance for the application about to be migrated/synced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da3b88811bdac19d13bfca669b77a38651837b81" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;applications#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; instance for the application that was just installed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4106e26619049b03071241b0425bb837c58c7e97" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfa7d765cd5e7151478725f3460053f18691d841" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;F()&lt;/code&gt; object represents the value of a model field or annotated column. It makes it possible to refer to model field values and perform database operations using them without actually having to pull them out of the database into Python memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f6969cbb4292c3086f7c958ae19344bb5aaa421" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Operation&lt;/code&gt; subclass which installs PostgreSQL extensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98724fe973995dab889727509346ca4f9510047d" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;id&lt;/code&gt; field is added automatically, but this behavior can be overridden. See &lt;a href=&quot;#automatic-primary-key-fields&quot;&gt;Automatic primary key fields&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59a2100a48bb74ca3c223e06a67c881b76a9b9c4" translate="yes" xml:space="preserve">
          <source>An API is available to manipulate session data outside of a view:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65dffa4497ac4db1209b15a06c360f65a3812e50" translate="yes" xml:space="preserve">
          <source>An IPv4 or IPv6 address, in string format (e.g. &lt;code&gt;192.0.2.30&lt;/code&gt; or &lt;code&gt;2a02:42fe::4&lt;/code&gt;). The default form widget for this field is a &lt;a href=&quot;../forms/widgets#django.forms.TextInput&quot;&gt;&lt;code&gt;TextInput&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18e6d94a1f45fbaae76dc484c2c64added263e27" translate="yes" xml:space="preserve">
          <source>An absolute or relative URL, which will be used as-is for the redirect location.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3925ec179972ff07fb76189661269abc5b99a88" translate="yes" xml:space="preserve">
          <source>An action was &lt;strong&gt;not&lt;/strong&gt; successful or some other failure occurred</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3a6647bd061a5c968c8eaf481deb4759e5f2412" translate="yes" xml:space="preserve">
          <source>An action was successful, e.g. &amp;ldquo;Your profile was updated successfully&amp;rdquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4435bfb73984e94fc86de917153522bf1df0a5d7" translate="yes" xml:space="preserve">
          <source>An admin site that lets you add, change, and delete polls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c68c75bc4729d236beed0fc44e1ac416abbfd61" translate="yes" xml:space="preserve">
          <source>An aggregate expression is a special case of a &lt;a href=&quot;#func-expressions&quot;&gt;Func() expression&lt;/a&gt; that informs the query that a &lt;code&gt;GROUP BY&lt;/code&gt; clause is required. All of the &lt;a href=&quot;querysets#aggregation-functions&quot;&gt;aggregate functions&lt;/a&gt;, like &lt;code&gt;Sum()&lt;/code&gt; and &lt;code&gt;Count()&lt;/code&gt;, inherit from &lt;code&gt;Aggregate()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dac8c4d87a8e94f377a297147a7ed6a8deb0b20" translate="yes" xml:space="preserve">
          <source>An aggregate within a &lt;code&gt;values()&lt;/code&gt; clause is applied before other arguments within the same &lt;code&gt;values()&lt;/code&gt; clause. If you need to group by another value, add it to an earlier &lt;code&gt;values()&lt;/code&gt; clause instead. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33d2fc7e42e04914b254e4159f933abde947704f" translate="yes" xml:space="preserve">
          <source>An alias for &lt;a href=&quot;#django.contrib.gis.gdal.OGRGeometry.tuple&quot;&gt;&lt;code&gt;tuple&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aff51db3da0e7b64fab96d99fc5c327a215a3e4" translate="yes" xml:space="preserve">
          <source>An alias for &lt;a href=&quot;#django.contrib.gis.gdal.Polygon.shell&quot;&gt;&lt;code&gt;shell&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61d19c8e07f4c913c49aeae377f8f1d9b469aa9c" translate="yes" xml:space="preserve">
          <source>An alternative better solution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1deb6430deb14f32cdaa8501e3f8aec60b594ea3" translate="yes" xml:space="preserve">
          <source>An anonymous user is one that is not authenticated i.e. they have provided no valid authentication details. However, that does not necessarily mean they are not authorized to do anything. At the most basic level, most websites authorize anonymous users to browse most of the site, and many allow anonymous posting of comments etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b08a99e915ba9c989b651c61303f82ad2208c1e" translate="yes" xml:space="preserve">
          <source>An attacker in possession of the &lt;a href=&quot;../../ref/settings#std:setting-SECRET_KEY&quot;&gt;&lt;code&gt;SECRET_KEY&lt;/code&gt;&lt;/a&gt; can not only generate falsified session data, which your site will trust, but also remotely execute arbitrary code, as the data is serialized using pickle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb2dca9b7402e3038c29ea2d17d64957926209e9" translate="yes" xml:space="preserve">
          <source>An attribute that defaults to &lt;code&gt;True&lt;/code&gt;. If set to &lt;code&gt;False&lt;/code&gt;, the microseconds part of &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.time&quot;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; values will be set to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd268500a89a883b70edb57f72986316598ae3d7" translate="yes" xml:space="preserve">
          <source>An authentication backend is a class that implements two required methods: &lt;code&gt;get_user(user_id)&lt;/code&gt; and &lt;code&gt;authenticate(request, **credentials)&lt;/code&gt;, as well as a set of optional permission related &lt;a href=&quot;#authorization-methods&quot;&gt;authorization methods&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de073d9defd676ec7471fad3bbfe1a2dc52b507b" translate="yes" xml:space="preserve">
          <source>An available formatting that can be used for displaying date fields on templates. Note that if &lt;a href=&quot;#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt;, then the corresponding locale-dictated format has higher precedence and will be applied. See &lt;a href=&quot;templates/builtins#std:templatefilter-date&quot;&gt;&lt;code&gt;allowed date format strings&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96ebe49d47555429233b3848f332b38958349db3" translate="yes" xml:space="preserve">
          <source>An available formatting that can be used for displaying datetime fields on templates. Note that if &lt;a href=&quot;#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt;, then the corresponding locale-dictated format has higher precedence and will be applied. See &lt;a href=&quot;templates/builtins#std:templatefilter-date&quot;&gt;&lt;code&gt;allowed date format strings&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ea26de5566952ec524cedbb60ee90bf6c1be0e2" translate="yes" xml:space="preserve">
          <source>An example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44dc5e773df10840021031d5567151fd83c15331" translate="yes" xml:space="preserve">
          <source>An example makes this easier to understand:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c7cf5762a90e14bf9c1f5ef6f288bc6ceef0b2a" translate="yes" xml:space="preserve">
          <source>An example might clarify things here:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b994f90ff92f4e93c073288c79a6cd02bfc15ab0" translate="yes" xml:space="preserve">
          <source>An example of clickjacking</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e5daf695560715d43805edc8de2766a29f586db" translate="yes" xml:space="preserve">
          <source>An example of this is how &lt;a href=&quot;#django.forms.SplitDateTimeWidget&quot;&gt;&lt;code&gt;SplitDateTimeWidget&lt;/code&gt;&lt;/a&gt; turns a &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; value into a list with date and time split into two separate values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e35ab3d53b689526afb17ba5bf93be01898a48f4" translate="yes" xml:space="preserve">
          <source>An example to demonstrate:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f481ad49809e7c27b79d2e6d830283b22c04c1f7" translate="yes" xml:space="preserve">
          <source>An example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb43ae8a2d9729a801eac153bba3110e42b5e9c8" translate="yes" xml:space="preserve">
          <source>An exception raised when an error occurs when constructing or using a spatial reference system object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5be9941c1dfa47b6a4a02b39ea4053fdb6457e4" translate="yes" xml:space="preserve">
          <source>An exception to this rule is the &lt;a href=&quot;../../ref/django-admin#django-admin-makemigrations&quot;&gt;&lt;code&gt;makemigrations&lt;/code&gt;&lt;/a&gt; command. It validates the migration history in the databases to catch problems with the existing migration files (which could be caused by editing them) before creating new migrations. By default, it checks only the &lt;code&gt;default&lt;/code&gt; database, but it consults the &lt;a href=&quot;#allow_migrate&quot;&gt;&lt;code&gt;allow_migrate()&lt;/code&gt;&lt;/a&gt; method of &lt;a href=&quot;#topics-db-multi-db-routing&quot;&gt;routers&lt;/a&gt; if any are installed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed175ed81f980812bd97abba4555214c4575fb8d" translate="yes" xml:space="preserve">
          <source>An in-memory raster is created through the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3a0de81244b1acb46976eba51d4d245458bc3eb" translate="yes" xml:space="preserve">
          <source>An inactive user is one that has its &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User.is_active&quot;&gt;&lt;code&gt;is_active&lt;/code&gt;&lt;/a&gt; field set to &lt;code&gt;False&lt;/code&gt;. The &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.backends.ModelBackend&quot;&gt;&lt;code&gt;ModelBackend&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.backends.RemoteUserBackend&quot;&gt;&lt;code&gt;RemoteUserBackend&lt;/code&gt;&lt;/a&gt; authentication backends prohibits these users from authenticating. If a custom user model doesn&amp;rsquo;t have an &lt;a href=&quot;#django.contrib.auth.models.CustomUser.is_active&quot;&gt;&lt;code&gt;is_active&lt;/code&gt;&lt;/a&gt; field, all users will be allowed to authenticate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="274d404b49cf7865c14ab687e838802e41ea0186" translate="yes" xml:space="preserve">
          <source>An included URLconf receives any captured parameters from parent URLconfs, so the following example is valid:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79f65afd7426a1dc2bc9545fd8cbde0c68685dda" translate="yes" xml:space="preserve">
          <source>An included template is rendered within the context of the template that includes it. This example produces the output &lt;code&gt;&quot;Hello, John!&quot;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4168fcd2b3e8ad3adb04bc480ef91ac9dc32ac30" translate="yes" xml:space="preserve">
          <source>An infinite loop is caused by ordering</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c342f5dc50caf73da0bd431eb33d447655a8bc38" translate="yes" xml:space="preserve">
          <source>An instance attribute that helps create colored output when writing to &lt;code&gt;stdout&lt;/code&gt; or &lt;code&gt;stderr&lt;/code&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f2451f5257ef2ded26bcd890212ab4d9e0f0273" translate="yes" xml:space="preserve">
          <source>An instance of &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b677133dba37f8a0d05b9f531f292924134b17ce" translate="yes" xml:space="preserve">
          <source>An instance of &lt;a href=&quot;../../ref/urlresolvers#django.urls.ResolverMatch&quot;&gt;&lt;code&gt;ResolverMatch&lt;/code&gt;&lt;/a&gt; for the response. You can use the &lt;a href=&quot;../../ref/urlresolvers#django.urls.ResolverMatch.func&quot;&gt;&lt;code&gt;func&lt;/code&gt;&lt;/a&gt; attribute, for example, to verify the view that served the response:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7151476a634aadae82a4558d217d3768bb129a09" translate="yes" xml:space="preserve">
          <source>An instance of &lt;a href=&quot;applications#django.apps.apps&quot;&gt;&lt;code&gt;Apps&lt;/code&gt;&lt;/a&gt; containing the state of the project after the migration run. It should be used instead of the global &lt;a href=&quot;applications#django.apps.apps&quot;&gt;&lt;code&gt;apps&lt;/code&gt;&lt;/a&gt; registry to retrieve the models you want to perform operations on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cee580ae302ae948e23c6225b6c391017760b3a8" translate="yes" xml:space="preserve">
          <source>An instance of &lt;a href=&quot;applications#module-django.apps&quot;&gt;&lt;code&gt;Apps&lt;/code&gt;&lt;/a&gt; containing the state of the project before the migration run. It should be used instead of the global &lt;a href=&quot;applications#django.apps.apps&quot;&gt;&lt;code&gt;apps&lt;/code&gt;&lt;/a&gt; registry to retrieve the models you want to perform operations on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e82dde0c45c38efd74e624d73450580c79f107d0" translate="yes" xml:space="preserve">
          <source>An instance of &lt;a href=&quot;urlresolvers#django.urls.ResolverMatch&quot;&gt;&lt;code&gt;ResolverMatch&lt;/code&gt;&lt;/a&gt; representing the resolved URL. This attribute is only set after URL resolving took place, which means it&amp;rsquo;s available in all views but not in middleware which are executed before URL resolving takes place (you can use it in &lt;a href=&quot;../topics/http/middleware#process_view&quot;&gt;&lt;code&gt;process_view()&lt;/code&gt;&lt;/a&gt; though).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62ebe3e92736407b7884afd74c06e451815b6cb6" translate="yes" xml:space="preserve">
          <source>An instance of the correct type (e.g., &lt;code&gt;Hand&lt;/code&gt; in our ongoing example).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c52b4b7dae7b1e7ef9416b4cfb7f0b060d5fcc5" translate="yes" xml:space="preserve">
          <source>An instance of the model where the &lt;code&gt;FileField&lt;/code&gt; is defined. More specifically, this is the particular instance where the current file is being attached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="246472979f1a8942a4358ead771333c2b2a02c0e" translate="yes" xml:space="preserve">
          <source>An integer specifying how many objects should be displayed per page. If this is given, the view will paginate objects with &lt;code&gt;paginate_by&lt;/code&gt; objects per page. The view will expect either a &lt;code&gt;page&lt;/code&gt; query string parameter (via &lt;code&gt;request.GET&lt;/code&gt;) or a &lt;code&gt;page&lt;/code&gt; variable specified in the URLconf.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cf3b0caba7b39ed0e3bdd29ce7b2c628df21356" translate="yes" xml:space="preserve">
          <source>An integer specifying the number of &amp;ldquo;overflow&amp;rdquo; objects the last page can contain. By default this returns the value of &lt;a href=&quot;#django.views.generic.list.MultipleObjectMixin.paginate_orphans&quot;&gt;&lt;code&gt;paginate_orphans&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4ecc6422927cd0e8e9f3314e294f6a80faeaf21" translate="yes" xml:space="preserve">
          <source>An integer specifying the number of &amp;ldquo;overflow&amp;rdquo; objects the last page can contain. This extends the &lt;a href=&quot;#django.views.generic.list.MultipleObjectMixin.paginate_by&quot;&gt;&lt;code&gt;paginate_by&lt;/code&gt;&lt;/a&gt; limit on the last page by up to &lt;code&gt;paginate_orphans&lt;/code&gt;, in order to keep the last page from having a very small number of objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30bb341a7bdb22e3ad1a0e3a492d93a67005d6ea" translate="yes" xml:space="preserve">
          <source>An integer. Values from &lt;code&gt;-2147483648&lt;/code&gt; to &lt;code&gt;2147483647&lt;/code&gt; are safe in all databases supported by Django.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e411d51eaf1718afd2228051f6d13a61f2e26282" translate="yes" xml:space="preserve">
          <source>An iterable containing the widgets needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="782cb10126cecb403d126e1d894a7815f6715df8" translate="yes" xml:space="preserve">
          <source>An iterable of 2-tuples. The first element is an expression or string. The second element is a SQL operator represented as a string. To avoid typos, you may use &lt;a href=&quot;fields#django.contrib.postgres.fields.RangeOperators&quot;&gt;&lt;code&gt;RangeOperators&lt;/code&gt;&lt;/a&gt; which maps the operators with strings. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1557e7d813a443c6e97ac8e302948f8a2a92ddc6" translate="yes" xml:space="preserve">
          <source>An iterator of the response content, bytestring encoded according to &lt;a href=&quot;#django.http.HttpResponse.charset&quot;&gt;&lt;code&gt;HttpResponse.charset&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="764c42b91212f12a629a423f0f0afc1d1031be0b" translate="yes" xml:space="preserve">
          <source>An optional &lt;a href=&quot;#django.db.models.Q&quot;&gt;&lt;code&gt;Q object&lt;/code&gt;&lt;/a&gt; that&amp;rsquo;s used to filter the rows that are aggregated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76ce46abaa60ff7cf50fa9f088ed9542f78f2bd9" translate="yes" xml:space="preserve">
          <source>An optional &lt;a href=&quot;../ref/request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; that will be available during the template&amp;rsquo;s rendering process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51eabca0c49f8538626e416027ab8362de298d12" translate="yes" xml:space="preserve">
          <source>An optional JSON-encoding class to serialize data types not supported by the standard JSON serializer (&lt;code&gt;datetime&lt;/code&gt;, &lt;code&gt;uuid&lt;/code&gt;, etc.). For example, you can use the &lt;a href=&quot;../../../topics/serialization#django.core.serializers.json.DjangoJSONEncoder&quot;&gt;&lt;code&gt;DjangoJSONEncoder&lt;/code&gt;&lt;/a&gt; class or any other &lt;a href=&quot;https://docs.python.org/3/library/json.html#json.JSONEncoder&quot;&gt;&lt;code&gt;json.JSONEncoder&lt;/code&gt;&lt;/a&gt; subclass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf302c0ed6a7c8a745f8c8a389e92f3899cfc20e" translate="yes" xml:space="preserve">
          <source>An optional argument containing the characters which should not be escaped can be provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37ddfbc6f10b5cbdd9c7a438e7bb14fa1cb94502" translate="yes" xml:space="preserve">
          <source>An optional argument that represents the &lt;a href=&quot;fields&quot;&gt;model field&lt;/a&gt; of the return value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="176299013af047e8122133ec1910bd95756256bf" translate="yes" xml:space="preserve">
          <source>An optional argument, &lt;code&gt;starts_with&lt;/code&gt;, can be applied to limit the returned pages to those beginning with a particular base URL. This argument may be passed as a string, or as a variable to be resolved from the context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90bbb5879cc4d952fc776e24ebf8fbe1815ea83c" translate="yes" xml:space="preserve">
          <source>An optional boolean argument that determines if array values will be distinct. Defaults to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d7f719647ab51bd56cc6adc7bb2ef3848a3d37a" translate="yes" xml:space="preserve">
          <source>An optional boolean argument that determines if concatenated values will be distinct. Defaults to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0965bf17b8eef60057dfda1be8bca2a9a5b070a" translate="yes" xml:space="preserve">
          <source>An optional dict of months to use in the &amp;ldquo;months&amp;rdquo; select box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04946ca43c81da1014a5b10d04e67a735be7869b" translate="yes" xml:space="preserve">
          <source>An optional list/tuple of years to use in the &amp;ldquo;year&amp;rdquo; select box. The default is a list containing the current year and the next 9 years.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b15bc30576b82accc7ddd0cd521ab74377a57926" translate="yes" xml:space="preserve">
          <source>An optional string of a field name (with an optional &lt;code&gt;&quot;-&quot;&lt;/code&gt; prefix which indicates descending order) or an expression (or a tuple or list of strings and/or expressions) that specifies the ordering of the elements in the result list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="310bd87082e4e4832de44c97dbfa3ba94bc08f0d" translate="yes" xml:space="preserve">
          <source>An optional string of a field name (with an optional &lt;code&gt;&quot;-&quot;&lt;/code&gt; prefix which indicates descending order) or an expression (or a tuple or list of strings and/or expressions) that specifies the ordering of the elements in the result string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f4edaf62b1dfdf8cb719bee64a43ebbceef00a2" translate="yes" xml:space="preserve">
          <source>An optional template engine &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-NAME&quot;&gt;&lt;code&gt;NAME&lt;/code&gt;&lt;/a&gt;. The search for the template will be restricted to that engine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="611aeb7acdb34b543451330642fcd3627d71cd8a" translate="yes" xml:space="preserve">
          <source>An override to the &lt;code&gt;verbose_name&lt;/code&gt; found in the model&amp;rsquo;s inner &lt;code&gt;Meta&lt;/code&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffcf163174409718ffabbf89f4d0f36fb79d14f9" translate="yes" xml:space="preserve">
          <source>An override to the &lt;code&gt;verbose_name_plural&lt;/code&gt; found in the model&amp;rsquo;s inner &lt;code&gt;Meta&lt;/code&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="355d8688f4f9696453a0994cdc549492d8510967" translate="yes" xml:space="preserve">
          <source>An unbound form has no data associated with it. When rendered to the user, it will be empty or will contain default values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1a32456d35755cee8d21b9e4b77c13ccc1b84b8" translate="yes" xml:space="preserve">
          <source>Analogous to &lt;a href=&quot;#django.test.SimpleTestCase.assertRaisesMessage&quot;&gt;&lt;code&gt;SimpleTestCase.assertRaisesMessage()&lt;/code&gt;&lt;/a&gt; but for &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertWarnsRegex&quot;&gt;&lt;code&gt;assertWarnsRegex()&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaisesRegex&quot;&gt;&lt;code&gt;assertRaisesRegex()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba957c88b3cfd199216b4fefecb0aef4a43c8fb5" translate="yes" xml:space="preserve">
          <source>Analyzes the request to find what language the user wants the system to show. Only languages listed in settings.LANGUAGES are taken into account. If the user requests a sublanguage where we have a main language, we send out the main language.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fd715a6a77af890a531d36685a0c3f6488bc441" translate="yes" xml:space="preserve">
          <source>And from the other end:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1696dfe29429eaa7aa951e64f0a5a0adc2a6a84e" translate="yes" xml:space="preserve">
          <source>And here is a custom error message:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cca8f3e51662b018d26f9c47a0d2d61b45340e4" translate="yes" xml:space="preserve">
          <source>And here&amp;rsquo;s &lt;code&gt;select_related&lt;/code&gt; lookup:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69a494ceeb088d95a44de3a13081c4a6afeb1751" translate="yes" xml:space="preserve">
          <source>And here&amp;rsquo;s an example of how that filter would be used:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03bff843633202076259ba7c810194e187aa4c2d" translate="yes" xml:space="preserve">
          <source>And here&amp;rsquo;s that same fixture as YAML:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06b5a16628fc09b1a5c529ccdfe782e3493039ed" translate="yes" xml:space="preserve">
          <source>And if we would then do something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33563f4b623edbd67004711fb92d511f217ed694" translate="yes" xml:space="preserve">
          <source>And in the template you would have:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87cd8b6594bb03456295bc34593a83a34adf0007" translate="yes" xml:space="preserve">
          <source>And in your template you would use the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51a020ab2b01733bf5f33cb4a326e7e4db7ea093" translate="yes" xml:space="preserve">
          <source>And individual features may be retrieved by their feature ID:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90cfe1c3ebdd87032c4d116041779adeb21eb6ac" translate="yes" xml:space="preserve">
          <source>And it would be used in a view to block queries from the template like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f1888caae39ce8f393771e448ad036616a00801" translate="yes" xml:space="preserve">
          <source>And now we have three tests that confirm that &lt;code&gt;Question.was_published_recently()&lt;/code&gt; returns sensible values for past, recent, and future questions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="516c9f6b5c81b8fee9261467ab6cdf478025ee22" translate="yes" xml:space="preserve">
          <source>And of course you can easily access methods you&amp;rsquo;ve explicitly defined on your own models:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dac469ad58c399cc88277f4ad145c4c7733aab27" translate="yes" xml:space="preserve">
          <source>And of course, we will add some tests, to check that a &lt;code&gt;Question&lt;/code&gt; whose &lt;code&gt;pub_date&lt;/code&gt; is in the past can be displayed, and that one with a &lt;code&gt;pub_date&lt;/code&gt; in the future is not:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff7ec6ce2edd2d93bc624030dca48c59e112bf65" translate="yes" xml:space="preserve">
          <source>And on databases that support distinct on fields (such as PostgreSQL), &lt;code&gt;Experiment.objects.distinct('change__abs')&lt;/code&gt; generates:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69e0e14986a207d85dd815a22886b945871f3a0c" translate="yes" xml:space="preserve">
          <source>And one required method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8939b75db788e776e0ebb67584800991f6f44cb3" translate="yes" xml:space="preserve">
          <source>And so on. In effect, we are using the tests to tell a story of admin input and user experience on the site, and checking that at every state and for every new change in the state of the system, the expected results are published.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="116552834b156417c58cbe981b1c02c3e334ad4f" translate="yes" xml:space="preserve">
          <source>And speaking of forms with dozens of fields, you might want to split the form up into fieldsets:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2afd6d3f3b296fe1c08c8b4bd7068fb7e83d7b2" translate="yes" xml:space="preserve">
          <source>And that&amp;rsquo;s it! Every time the &lt;code&gt;bad_mojo&lt;/code&gt; condition is activated, an error log record will be written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcfe3c0f395badbeb6a1fad7612c3793afe4eb8a" translate="yes" xml:space="preserve">
          <source>And that&amp;rsquo;s it! If we placed this file in the &lt;code&gt;templates/admin/my_app&lt;/code&gt; directory, our link would appear on the change form for all models within my_app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07e887c0940acf021ebba5ade747fc8fbec51123" translate="yes" xml:space="preserve">
          <source>And the accompanying URLconf:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eab402753ae334de81ac60191919efb50b4bc242" translate="yes" xml:space="preserve">
          <source>And the template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b52dd3016f5a17d966f982881e55520530da65e" translate="yes" xml:space="preserve">
          <source>And the view:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a697ce9cc8667c8e9256c8d32cb413cc810723e1" translate="yes" xml:space="preserve">
          <source>And then later:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee6c7a92a558879bf024246e43dd7ff7bd50e6b3" translate="yes" xml:space="preserve">
          <source>And then use it to query for a particular &lt;a href=&quot;auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt;, or to get access to the &lt;code&gt;User&lt;/code&gt; model class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1098706171a72ea5de650d6dada38e6c6afa8002" translate="yes" xml:space="preserve">
          <source>And to find whether a queryset contains any items:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="869524675f01329a247aa1f09e51825df4ec11fc" translate="yes" xml:space="preserve">
          <source>And to store numbers up to approximately one billion with a resolution of 10 decimal places:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="122dc325cc02b859f8d88f5588295d211a44e206" translate="yes" xml:space="preserve">
          <source>And we also want a router that sends all other apps to the primary/replica configuration, and randomly chooses a replica to read from:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e49b4c10f64ab640d69b1da323441187a6908f6" translate="yes" xml:space="preserve">
          <source>And you can clear from the other end:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82df6ae1054c31cec6c0f243a78e94fb29b9663d" translate="yes" xml:space="preserve">
          <source>Annotated values can also be filtered. The alias for the annotation can be used in &lt;code&gt;filter()&lt;/code&gt; and &lt;code&gt;exclude()&lt;/code&gt; clauses in the same way as any other model field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b554aee820c7e57ad49dd7b64f3173f5d178236d" translate="yes" xml:space="preserve">
          <source>Annotates each object in the &lt;code&gt;QuerySet&lt;/code&gt; with the provided list of &lt;a href=&quot;expressions&quot;&gt;query expressions&lt;/a&gt;. An expression may be a simple value, a reference to a field on the model (or any related models), or an aggregate expression (averages, sums, etc.) that has been computed over the objects that are related to the objects in the &lt;code&gt;QuerySet&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="829792c80022a8daeaba47c149334e000c254d65" translate="yes" xml:space="preserve">
          <source>Annotations can be used as a basis for ordering. When you define an &lt;code&gt;order_by()&lt;/code&gt; clause, the aggregates you provide can reference any alias defined as part of an &lt;code&gt;annotate()&lt;/code&gt; clause in the query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e92b3487e05d5f47d7725bc0a904c803488d603" translate="yes" xml:space="preserve">
          <source>Annotations specified using keyword arguments will use the keyword as the alias for the annotation. Anonymous arguments will have an alias generated for them based upon the name of the aggregate function and the model field that is being aggregated. Only aggregate expressions that reference a single field can be anonymous arguments. Everything else must be a keyword argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88461f63d604b59172c0ff0ab1c649468d205b75" translate="yes" xml:space="preserve">
          <source>Another approach is to use a &amp;ldquo;dumb&amp;rdquo; SMTP server that receives the emails locally and displays them to the terminal, but does not actually send anything. Python has a built-in way to accomplish this with a single command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba396ad6193b9ca5749ed17aafe362419ec415c8" translate="yes" xml:space="preserve">
          <source>Another approach to searching is trigram similarity. A trigram is a group of three consecutive characters. In addition to the &lt;a href=&quot;lookups#std:fieldlookup-trigram_similar&quot;&gt;&lt;code&gt;trigram_similar&lt;/code&gt;&lt;/a&gt; lookup, you can use a couple of other expressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21ba367c9e3496589a56140d591b0ffe544a18b6" translate="yes" xml:space="preserve">
          <source>Another common need is to filter down the objects given in a list page by some key in the URL. Earlier we hard-coded the publisher&amp;rsquo;s name in the URLconf, but what if we wanted to write a view that displayed all the books by some arbitrary publisher?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45940903ef290c6607fb9dc48fca66f59422159d" translate="yes" xml:space="preserve">
          <source>Another common pattern is writing custom SQL statements in model methods and module-level methods. For more details on using raw SQL, see the documentation on &lt;a href=&quot;sql&quot;&gt;using raw SQL&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a290b2c69d35adb6da1a5bfba443ced0c880483" translate="yes" xml:space="preserve">
          <source>Another common setup is to use flat pages for a limited set of known pages and to hard code the urls, so you can reference them with the &lt;a href=&quot;../templates/builtins#std:templatetag-url&quot;&gt;&lt;code&gt;url&lt;/code&gt;&lt;/a&gt; template tag:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1577f6aa21d88594318532f249d8835a0c12d0e" translate="yes" xml:space="preserve">
          <source>Another common tactic is to serve static files from a cloud storage provider like Amazon&amp;rsquo;s S3 and/or a CDN (content delivery network). This lets you ignore the problems of serving static files and can often make for faster-loading Web pages (especially when using a CDN).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87f01f544f559b7fee6f441175ba35e7b16c744c" translate="yes" xml:space="preserve">
          <source>Another common type of template tag is the type that displays some data by rendering &lt;em&gt;another&lt;/em&gt; template. For example, Django&amp;rsquo;s admin interface uses custom template tags to display the buttons along the bottom of the &amp;ldquo;add/change&amp;rdquo; form pages. Those buttons always look the same, but the link targets change depending on the object being edited &amp;ndash; so they&amp;rsquo;re a perfect case for using a small template that is filled with details from the current object. (In the admin&amp;rsquo;s case, this is the &lt;code&gt;submit_row&lt;/code&gt; tag.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0f51871d5071d412fc32544909d6747215d5a77" translate="yes" xml:space="preserve">
          <source>Another consideration is that the context data from class-based generic views will override data provided by context processors; see &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin.get_context_data&quot;&gt;&lt;code&gt;get_context_data()&lt;/code&gt;&lt;/a&gt; for an example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b24e12dd9fad842cfca1849299590204ccaf993" translate="yes" xml:space="preserve">
          <source>Another difference from one-to-many relationships is that in addition to model instances, the &lt;code&gt;add()&lt;/code&gt;, &lt;code&gt;set()&lt;/code&gt;, and &lt;code&gt;remove()&lt;/code&gt; methods on many-to-many relationships accept primary key values. For example, if &lt;code&gt;e1&lt;/code&gt; and &lt;code&gt;e2&lt;/code&gt; are &lt;code&gt;Entry&lt;/code&gt; instances, then these &lt;code&gt;set()&lt;/code&gt; calls work identically:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9a69673a48bf9c65937988bc581b8dc380dd048" translate="yes" xml:space="preserve">
          <source>Another example would be a backend that only handles writing to files. In this case, you would not need to implement any of the above methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dedf5ccdeb6bf446ef7cfb01d8db4c4b042b2078" translate="yes" xml:space="preserve">
          <source>Another example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4986e55d85710f6d524794428b573b2ea0944346" translate="yes" xml:space="preserve">
          <source>Another feature &lt;code&gt;{% blocktrans %}&lt;/code&gt; supports is the &lt;code&gt;trimmed&lt;/code&gt; option. This option will remove newline characters from the beginning and the end of the content of the &lt;code&gt;{% blocktrans %}&lt;/code&gt; tag, replace any whitespace at the beginning and end of a line and merge all lines into one using a space character to separate them. This is quite useful for indenting the content of a &lt;code&gt;{%
blocktrans %}&lt;/code&gt; tag without having the indentation characters end up in the corresponding entry in the PO file, which makes the translation process easier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6f38b8bf22ce33d0915eebda059aeb43f57443f" translate="yes" xml:space="preserve">
          <source>Another option is to add the required hosts to &lt;a href=&quot;../../ref/settings#std:setting-ALLOWED_HOSTS&quot;&gt;&lt;code&gt;ALLOWED_HOSTS&lt;/code&gt;&lt;/a&gt; using &lt;a href=&quot;tools#django.test.override_settings&quot;&gt;&lt;code&gt;override_settings()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;tools#django.test.SimpleTestCase.modify_settings&quot;&gt;&lt;code&gt;modify_settings()&lt;/code&gt;&lt;/a&gt;. This option may be preferable in standalone apps that can&amp;rsquo;t package their own settings file or for projects where the list of domains is not static (e.g., subdomains for multitenancy). For example, you could write a test for the domain &lt;code&gt;http://otherserver/&lt;/code&gt; as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86cbfa1018d17aad7dbbe0a2952b209be21563af" translate="yes" xml:space="preserve">
          <source>Another option is to configure class attributes as keyword arguments to the &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View.as_view&quot;&gt;&lt;code&gt;as_view()&lt;/code&gt;&lt;/a&gt; call in the URLconf:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e2072ae951398dc6d033749ffe3f4ec2a9529ef" translate="yes" xml:space="preserve">
          <source>Another option is to use &lt;a href=&quot;https://docs.python.org/3/library/collections.html#collections.namedtuple&quot;&gt;&lt;code&gt;collections.namedtuple()&lt;/code&gt;&lt;/a&gt; from the Python standard library. A &lt;code&gt;namedtuple&lt;/code&gt; is a tuple-like object that has fields accessible by attribute lookup; it&amp;rsquo;s also indexable and iterable. Results are immutable and accessible by field names or indices, which might be useful:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b600586952a903b98a1e51daa4f184b2a654da9b" translate="yes" xml:space="preserve">
          <source>Another option is to use the &lt;code&gt;init_command&lt;/code&gt; option for MySQLdb prior to creating your tables:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c3275efd45f8519667225b74be1bee3394ee839" translate="yes" xml:space="preserve">
          <source>Another option is to use the constructor for the specific geometry type that you wish to create. For example, a &lt;a href=&quot;#django.contrib.gis.geos.Point&quot;&gt;&lt;code&gt;Point&lt;/code&gt;&lt;/a&gt; object may be created by passing in the X and Y coordinates into its constructor:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5712178c1bd67ebd8b516f654132f1288bddf9c3" translate="yes" xml:space="preserve">
          <source>Another option is to wrap each &lt;code&gt;QuerySet&lt;/code&gt; using server-side cursors in an &lt;a href=&quot;../topics/db/transactions#django.db.transaction.atomic&quot;&gt;&lt;code&gt;atomic()&lt;/code&gt;&lt;/a&gt; block, because it disables &lt;code&gt;autocommit&lt;/code&gt; for the duration of the transaction. This way, the server-side cursor will only live for the duration of the transaction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a4aa7df42c54947c30745a80b3d8f27cb3b16d7" translate="yes" xml:space="preserve">
          <source>Another possibility is to include additional URL patterns by using a list of &lt;a href=&quot;../../ref/urls#django.urls.path&quot;&gt;&lt;code&gt;path()&lt;/code&gt;&lt;/a&gt; instances. For example, consider this URLconf:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8351180c3ac17f96e32412d210d1d3655c0a4ab4" translate="yes" xml:space="preserve">
          <source>Another possible attack would be if &lt;code&gt;good.example.com&lt;/code&gt; sets its &lt;a href=&quot;../../ref/settings#std:setting-SESSION_COOKIE_DOMAIN&quot;&gt;&lt;code&gt;SESSION_COOKIE_DOMAIN&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;&quot;example.com&quot;&lt;/code&gt; which would cause session cookies from that site to be sent to &lt;code&gt;bad.example.com&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="634ae931c8918bb787c1ab614abd3ba33818e955" translate="yes" xml:space="preserve">
          <source>Another side effect of using &lt;code&gt;commit=False&lt;/code&gt; is seen when your model has a many-to-many relation with another model. If your model has a many-to-many relation and you specify &lt;code&gt;commit=False&lt;/code&gt; when you save a form, Django cannot immediately save the form data for the many-to-many relation. This is because it isn&amp;rsquo;t possible to save many-to-many data for an instance until the instance exists in the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19a769a5876c833200ddb5a61c4aac99cdd61a35" translate="yes" xml:space="preserve">
          <source>Another solution is to sort the data in the template using the &lt;a href=&quot;#std:templatefilter-dictsort&quot;&gt;&lt;code&gt;dictsort&lt;/code&gt;&lt;/a&gt; filter, if your data is in a list of dictionaries:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2bcb7bd2a2294b9fd69bcc472db817498190e7c" translate="yes" xml:space="preserve">
          <source>Another thing to note about this example is that &lt;code&gt;Manager&lt;/code&gt; methods can access &lt;code&gt;self.model&lt;/code&gt; to get the model class to which they&amp;rsquo;re attached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c24ed1973db71e4a285cbe24ded0d0a7d1fac1f2" translate="yes" xml:space="preserve">
          <source>Another useful benefit of &lt;code&gt;F()&lt;/code&gt; is that having the database - rather than Python - update a field&amp;rsquo;s value avoids a &lt;em&gt;race condition&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="350b06198d36b009231e64363f3cd68696d2c3fb" translate="yes" xml:space="preserve">
          <source>Another way to access the same information is by querying the &lt;a href=&quot;queries#m2m-reverse-relationships&quot;&gt;many-to-many reverse relationship&lt;/a&gt; from a &lt;code&gt;Person&lt;/code&gt; object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6720499a689b825b3931c9adad686693b94d7ca" translate="yes" xml:space="preserve">
          <source>Any &lt;a href=&quot;#django.core.files.File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; that is associated with an object (as with &lt;code&gt;Car.photo&lt;/code&gt;, below) will also have a couple of extra methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="259f07ccd997e3ebbc7533171ea4ac71a43f828b" translate="yes" xml:space="preserve">
          <source>Any &lt;code&gt;Car&lt;/code&gt; instance will have a &lt;code&gt;photo&lt;/code&gt; attribute that you can use to get at the details of the attached photo:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82f12e18262dfa08be2fd8dc34797d2dadcfa0eb" translate="yes" xml:space="preserve">
          <source>Any &lt;code&gt;choices&lt;/code&gt; attribute set on the formfield will be limited to the form field only. If the corresponding field on the model has choices set, the choices provided to the form must be a valid subset of those choices, otherwise the form submission will fail with a &lt;a href=&quot;../../exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; when the model itself is validated before saving.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cfcbfb5e16e8c8b294fbb366355136915411066" translate="yes" xml:space="preserve">
          <source>Any Django field</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0943bcec768321ce586e2262a98b924049a43318" translate="yes" xml:space="preserve">
          <source>Any arguments passed to &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View.as_view&quot;&gt;&lt;code&gt;as_view()&lt;/code&gt;&lt;/a&gt; will override attributes set on the class. In this example, we set &lt;code&gt;template_name&lt;/code&gt; on the &lt;code&gt;TemplateView&lt;/code&gt;. A similar overriding pattern can be used for the &lt;code&gt;url&lt;/code&gt; attribute on &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.RedirectView&quot;&gt;&lt;code&gt;RedirectView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b95e74b82f7912fd5a57b4159d009906620dcdd" translate="yes" xml:space="preserve">
          <source>Any cached relations are cleared from the reloaded instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87ad20ba32653e2c8263b7d56b8e2b1f508d28d2" translate="yes" xml:space="preserve">
          <source>Any class reference (must be in module&amp;rsquo;s top-level scope)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7cfbb9e6237b5e4d9536ebf29c5cc594bad4538" translate="yes" xml:space="preserve">
          <source>Any extra keyword arguments you pass to &lt;code&gt;__init__&lt;/code&gt; will be stored in &lt;code&gt;self.feed&lt;/code&gt; for use with &lt;a href=&quot;#custom-feed-generators&quot;&gt;custom feed generators&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e8de9d3cf5f05073aa258263f2473c8604fc0dd" translate="yes" xml:space="preserve">
          <source>Any extra keyword arguments you pass to &lt;code&gt;__init__&lt;/code&gt; will be stored in &lt;code&gt;self.feed&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaa1bdee468ee233f3d4bef58a335623ca9709d4" translate="yes" xml:space="preserve">
          <source>Any field in &lt;code&gt;list_editable&lt;/code&gt; must also be in &lt;code&gt;list_display&lt;/code&gt;. You can&amp;rsquo;t edit a field that&amp;rsquo;s not displayed!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc2c1f8f4f91fd73109d4df0901557ed01d4acba" translate="yes" xml:space="preserve">
          <source>Any fields not included in a form by the above logic will not be set by the form&amp;rsquo;s &lt;code&gt;save()&lt;/code&gt; method. Also, if you manually add the excluded fields back to the form, they will not be initialized from the model instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0f265b427e58215ab20a4d836d7f8c516eb4a51" translate="yes" xml:space="preserve">
          <source>Any fields that are stored with &lt;code&gt;VARCHAR&lt;/code&gt; column types have their &lt;code&gt;max_length&lt;/code&gt; restricted to 255 characters if you are using &lt;code&gt;unique=True&lt;/code&gt; for the field. This affects &lt;a href=&quot;models/fields#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;models/fields#django.db.models.SlugField&quot;&gt;&lt;code&gt;SlugField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23d9acd68c46ec11121d32d169fe6c012befed6e" translate="yes" xml:space="preserve">
          <source>Any fields used in an &lt;a href=&quot;#django.db.models.query.QuerySet.order_by&quot;&gt;&lt;code&gt;order_by()&lt;/code&gt;&lt;/a&gt; call are included in the SQL &lt;code&gt;SELECT&lt;/code&gt; columns. This can sometimes lead to unexpected results when used in conjunction with &lt;code&gt;distinct()&lt;/code&gt;. If you order by fields from a related model, those fields will be added to the selected columns and they may make otherwise duplicate rows appear to be distinct. Since the extra columns don&amp;rsquo;t appear in the returned results (they are only there to support ordering), it sometimes looks like non-distinct results are being returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="389de725feff980095e919bb4630a4b7aa4cbedb" translate="yes" xml:space="preserve">
          <source>Any function or method reference (e.g. &lt;code&gt;datetime.datetime.today&lt;/code&gt;) (must be in module&amp;rsquo;s top-level scope)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="340f6cd4cdae6a9fe26ccc2c1321f21a7a65b64b" translate="yes" xml:space="preserve">
          <source>Any help text that has been associated with the field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4d976c10e6d33bf9091130ca4635d6f2a79ca77" translate="yes" xml:space="preserve">
          <source>Any initial data loaded in migrations will only be available in &lt;code&gt;TestCase&lt;/code&gt; tests and not in &lt;code&gt;TransactionTestCase&lt;/code&gt; tests, and additionally only on backends where transactions are supported (the most important exception being MyISAM). This is also true for tests which rely on &lt;code&gt;TransactionTestCase&lt;/code&gt; such as &lt;a href=&quot;tools#django.test.LiveServerTestCase&quot;&gt;&lt;code&gt;LiveServerTestCase&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/contrib/staticfiles#django.contrib.staticfiles.testing.StaticLiveServerTestCase&quot;&gt;&lt;code&gt;StaticLiveServerTestCase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f7538d5b082eb7ff86214f434df9e9db4b7599c" translate="yes" xml:space="preserve">
          <source>Any items in the &lt;code&gt;OPTIONS&lt;/code&gt; in &lt;a href=&quot;../../ref/settings#std:setting-AUTH_PASSWORD_VALIDATORS&quot;&gt;&lt;code&gt;AUTH_PASSWORD_VALIDATORS&lt;/code&gt;&lt;/a&gt; for your validator will be passed to the constructor. All constructor arguments should have a default value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="269822aff3cab02690efcc28e3a2fadd4d2d5a67" translate="yes" xml:space="preserve">
          <source>Any keyword arguments passed to &lt;code&gt;get_or_create()&lt;/code&gt; &amp;mdash; &lt;em&gt;except&lt;/em&gt; an optional one called &lt;code&gt;defaults&lt;/code&gt; &amp;mdash; will be used in a &lt;a href=&quot;#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; call. If an object is found, &lt;code&gt;get_or_create()&lt;/code&gt; returns a tuple of that object and &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa00f3f233bd76654fd4c34e32d4e0293431a21f" translate="yes" xml:space="preserve">
          <source>Any migration can be reverted with &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; by using the number of previous migrations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="206cfa10cfb7598b7f46150d0b397fbd96ad0e5a" translate="yes" xml:space="preserve">
          <source>Any object that has a URL that uniquely identifies it should define this method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bff4e22bfefe56190b6103de76226c38c3154301" translate="yes" xml:space="preserve">
          <source>Any option passed to the &lt;code&gt;startapp&lt;/code&gt; command (among the command&amp;rsquo;s supported options)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e138beee32bdd3845314ecab39ac8b6f36c0256" translate="yes" xml:space="preserve">
          <source>Any option passed to the &lt;code&gt;startproject&lt;/code&gt; command (among the command&amp;rsquo;s supported options)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5723036376b87299a4b70f4866a921fb58935b0c" translate="yes" xml:space="preserve">
          <source>Any other day is formatted according to given argument or the &lt;a href=&quot;../settings#std:setting-DATE_FORMAT&quot;&gt;&lt;code&gt;DATE_FORMAT&lt;/code&gt;&lt;/a&gt; setting if no argument is given.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab61e75123334a3ff03ee2353a6d3605bcdc00e5" translate="yes" xml:space="preserve">
          <source>Any request that could be used to change the state of the system - for example, a request that makes changes in the database - should use &lt;code&gt;POST&lt;/code&gt;. &lt;code&gt;GET&lt;/code&gt; should be used only for requests that do not affect the state of the system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="016a35f4da2b589350ad00d87184ff46d26ee10f" translate="yes" xml:space="preserve">
          <source>Any usage of &lt;a href=&quot;../topics/signing&quot;&gt;cryptographic signing&lt;/a&gt;, unless a different key is provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cef5f901bb8067b01d106ba21a0409d9d05625a" translate="yes" xml:space="preserve">
          <source>Any valid &lt;code&gt;Cache-Control&lt;/code&gt; response directive is valid in &lt;code&gt;cache_control()&lt;/code&gt;. Here are some more examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08019805145fd9728fd9fa82951bfad51124fe4e" translate="yes" xml:space="preserve">
          <source>Any valid template lookup is a legal grouping attribute for the regroup tag, including methods, attributes, dictionary keys and list items. For example, if the &amp;ldquo;country&amp;rdquo; field is a foreign key to a class with an attribute &amp;ldquo;description,&amp;rdquo; you could use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a547bb66aef536c1758d075687b8c3c012333d15" translate="yes" xml:space="preserve">
          <source>Any variable set in the context will only be available in the same &lt;code&gt;block&lt;/code&gt; of the template in which it was assigned. This behavior is intentional; it provides a scope for variables so that they don&amp;rsquo;t conflict with context in other blocks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b921f6c9cdbfc0bbe655c78b4cff9c39227a8ad1" translate="yes" xml:space="preserve">
          <source>Any variables from &lt;a href=&quot;#django.views.generic.detail.SingleObjectMixin.get_context_data&quot;&gt;&lt;code&gt;get_context_data()&lt;/code&gt;&lt;/a&gt; take precedence over context variables from &lt;a href=&quot;../templates/api#subclassing-context-requestcontext&quot;&gt;context processors&lt;/a&gt;. For example, if your view sets the &lt;a href=&quot;#django.views.generic.detail.SingleObjectMixin.model&quot;&gt;&lt;code&gt;model&lt;/code&gt;&lt;/a&gt; attribute to &lt;a href=&quot;../contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt;, the default context object name of &lt;code&gt;user&lt;/code&gt; would override the &lt;code&gt;user&lt;/code&gt; variable from the &lt;a href=&quot;../templates/api#django.contrib.auth.context_processors.auth&quot;&gt;&lt;code&gt;django.contrib.auth.context_processors.auth()&lt;/code&gt;&lt;/a&gt; context processor. Use &lt;a href=&quot;#django.views.generic.detail.SingleObjectMixin.get_context_object_name&quot;&gt;&lt;code&gt;get_context_object_name()&lt;/code&gt;&lt;/a&gt; to avoid a clash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33fdeb58433575a49dc08ea16ba42eea7ffe5d40" translate="yes" xml:space="preserve">
          <source>Any view you render that uses the admin templates, or extends the base admin template, should set &lt;code&gt;request.current_app&lt;/code&gt; before rendering the template. It should be set to either &lt;code&gt;self.name&lt;/code&gt; if your view is on an &lt;code&gt;AdminSite&lt;/code&gt; or &lt;code&gt;self.admin_site.name&lt;/code&gt; if your view is on a &lt;code&gt;ModelAdmin&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c61ae39f874e4c3fea92eacfe4842fbe9d061b82" translate="yes" xml:space="preserve">
          <source>Any website which allows users to log in should enforce site-wide HTTPS to avoid transmitting access tokens in clear. In Django, access tokens include the login/password, the session cookie, and password reset tokens. (You can&amp;rsquo;t do much to protect password reset tokens if you&amp;rsquo;re sending them by email.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="482767877854b0eb1336580862dfd1a6bcdc6520" translate="yes" xml:space="preserve">
          <source>Anything with a custom &lt;code&gt;deconstruct()&lt;/code&gt; method (&lt;a href=&quot;#custom-deconstruct-method&quot;&gt;see below&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63593d0d5d435dfe384aa50d6b9d31230859491f" translate="yes" xml:space="preserve">
          <source>App names</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd830f06d5852ef2c9dc8bcccf701902da95053b" translate="yes" xml:space="preserve">
          <source>Appends an item to the internal list associated with key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa63e6b9e38d910d3df41e7a8cac3f1bb7e475e3" translate="yes" xml:space="preserve">
          <source>Application &lt;a href=&quot;applications#django.apps.AppConfig.label&quot;&gt;&lt;code&gt;labels&lt;/code&gt;&lt;/a&gt; &amp;mdash; by default the final part of the name &amp;mdash; must be unique too. For example, you can&amp;rsquo;t include both &lt;code&gt;django.contrib.auth&lt;/code&gt; and &lt;code&gt;myproject.auth&lt;/code&gt;. However, you can relabel an application with a custom configuration that defines a different &lt;a href=&quot;applications#django.apps.AppConfig.label&quot;&gt;&lt;code&gt;label&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cce177b4ed99f13272552802e5efb7cd98ca52c8" translate="yes" xml:space="preserve">
          <source>Application &lt;a href=&quot;applications#django.apps.AppConfig.name&quot;&gt;&lt;code&gt;names&lt;/code&gt;&lt;/a&gt; &amp;mdash; the dotted Python path to the application package &amp;mdash; must be unique. There is no way to include the same application twice, short of duplicating its code under another name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ce84d4d04cdd60bd8ab75207bda952026831b49" translate="yes" xml:space="preserve">
          <source>Application configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d00cf03fc5959163a7822755887dc62e3a89d38" translate="yes" xml:space="preserve">
          <source>Application configuration objects store metadata for an application. Some attributes can be configured in &lt;a href=&quot;#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; subclasses. Others are set by Django and read-only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02814f34a196dfe9c70486833f53df2ac42d4ff8" translate="yes" xml:space="preserve">
          <source>Application index page</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fba94f3256e26835d76c00860685efd830812bb" translate="yes" xml:space="preserve">
          <source>Application labels (that is, the final part of the dotted path to application packages) &lt;em&gt;must&lt;/em&gt; be unique in &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;. Avoid using the same label as any of the Django &lt;a href=&quot;../ref/contrib/index&quot;&gt;contrib packages&lt;/a&gt;, for example &lt;code&gt;auth&lt;/code&gt;, &lt;code&gt;admin&lt;/code&gt;, or &lt;code&gt;messages&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb450da0c07754aedf67cd45c88b1558ac1cd645" translate="yes" xml:space="preserve">
          <source>Application names and labels must be unique in &lt;a href=&quot;#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07f619ff555df81b21d8f81b05235ca1997f69ce" translate="yes" xml:space="preserve">
          <source>Application namespaces of included URLconfs can be specified in two ways.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="751084ce854ca0846d5944c04c858023f5b8c71c" translate="yes" xml:space="preserve">
          <source>Application registry</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76c74bd071dd73f01696fddbbffc77712a479faf" translate="yes" xml:space="preserve">
          <source>Applications</source>
          <target state="translated">Applications</target>
        </trans-unit>
        <trans-unit id="2d95a17e385a3c2fb23081cac8c9295e5d6e462d" translate="yes" xml:space="preserve">
          <source>Applications can register their own actions with &lt;code&gt;manage.py&lt;/code&gt;. For example, you might want to add a &lt;code&gt;manage.py&lt;/code&gt; action for a Django app that you&amp;rsquo;re distributing. In this document, we will be building a custom &lt;code&gt;closepoll&lt;/code&gt; command for the &lt;code&gt;polls&lt;/code&gt; application from the &lt;a href=&quot;../intro/tutorial01&quot;&gt;tutorial&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b33e5c91a312fb3c95a81e0182e2a5529ab4d2d6" translate="yes" xml:space="preserve">
          <source>Applications include some combination of models, views, templates, template tags, static files, URLs, middleware, etc. They&amp;rsquo;re generally wired into projects with the &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting and optionally with other mechanisms such as URLconfs, the &lt;a href=&quot;settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; setting, or template inheritance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcf5bca7c1c28b2d4896a4ad439584b5047d4594" translate="yes" xml:space="preserve">
          <source>Applies HTML escaping to a string (see the &lt;a href=&quot;#std:templatefilter-escape&quot;&gt;&lt;code&gt;escape&lt;/code&gt;&lt;/a&gt; filter for details). This filter is applied &lt;em&gt;immediately&lt;/em&gt; and returns a new, escaped string. This is useful in the rare cases where you need multiple escaping or want to apply other filters to the escaped results. Normally, you want to use the &lt;a href=&quot;#std:templatefilter-escape&quot;&gt;&lt;code&gt;escape&lt;/code&gt;&lt;/a&gt; filter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84df2e98f0fb6b4a2a7a0e18e64e0533759512be" translate="yes" xml:space="preserve">
          <source>Applies NFKC Unicode normalization to usernames so that visually identical characters with different Unicode code points are considered identical.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97651a1b0d977cf8ff25a459e82fee2dcd0fc103" translate="yes" xml:space="preserve">
          <source>Applies the &lt;a href=&quot;#std:templatefilter-safe&quot;&gt;&lt;code&gt;safe&lt;/code&gt;&lt;/a&gt; filter to each element of a sequence. Useful in conjunction with other filters that operate on sequences, such as &lt;a href=&quot;#std:templatefilter-join&quot;&gt;&lt;code&gt;join&lt;/code&gt;&lt;/a&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e90ac2f737d779a01b5c20e7cefbbc501e3d3c1" translate="yes" xml:space="preserve">
          <source>Applying &lt;code&gt;escape&lt;/code&gt; to a variable that would normally have auto-escaping applied to the result will only result in one round of escaping being done. So it is safe to use this function even in auto-escaping environments. If you want multiple escaping passes to be applied, use the &lt;a href=&quot;#std:templatefilter-force_escape&quot;&gt;&lt;code&gt;force_escape&lt;/code&gt;&lt;/a&gt; filter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71fb7e3800ea4bff489d57465f1ad69f7ab2a7ce" translate="yes" xml:space="preserve">
          <source>Applying ASGI middleware</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ae8ad953facfec96824ae104e86374b11f31f03" translate="yes" xml:space="preserve">
          <source>Applying WSGI middleware</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bab876cb9ceac2f91928039efab65ebe5cbf56f" translate="yes" xml:space="preserve">
          <source>Applying a &amp;ldquo;plain&amp;rdquo; migration that adds a unique non-nullable field to a table with existing rows will raise an error because the value used to populate existing rows is generated only once, thus breaking the unique constraint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fb043dc44486291dc3527759033c8e5b635a5ce" translate="yes" xml:space="preserve">
          <source>Applying further encoding (such as &lt;a href=&quot;https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote&quot;&gt;&lt;code&gt;urllib.parse.quote()&lt;/code&gt;&lt;/a&gt;) to the output of &lt;code&gt;reverse()&lt;/code&gt; may produce undesirable results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fb0e010e8f9e5d7e29b766c8e457da1478cbaa4" translate="yes" xml:space="preserve">
          <source>Appropriate use of field types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab3c3c1852b7964fa4b3a4d4233e6676835a9dae" translate="yes" xml:space="preserve">
          <source>Apps &lt;a href=&quot;overview#test-case-serialized-rollback&quot;&gt;will not see their data reloaded&lt;/a&gt;; if you need this functionality (for example, third-party apps should enable this) you can set &lt;code&gt;serialized_rollback = True&lt;/code&gt; inside the &lt;code&gt;TestCase&lt;/code&gt; body.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a272d52149333fb6693bfc9f661e41c2ea99cab6" translate="yes" xml:space="preserve">
          <source>Apps without migrations are also listed, but have &lt;code&gt;(no migrations)&lt;/code&gt; printed under them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40df94333b003783fd4708f6c30ce7e977931fb2" translate="yes" xml:space="preserve">
          <source>Apps without migrations must not have relations (&lt;code&gt;ForeignKey&lt;/code&gt;, &lt;code&gt;ManyToManyField&lt;/code&gt;, etc.) to apps with migrations. Sometimes it may work, but it&amp;rsquo;s not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a448e7c70834c89c84d512849750974b243b0c1" translate="yes" xml:space="preserve">
          <source>Arbitrary class instances (e.g. &lt;code&gt;MyClass(4.3, 5.7)&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7921b5d129746e8520dbca543895e37d9e3c2ad" translate="yes" xml:space="preserve">
          <source>Arbitrary keyword arguments can be passed in a dictionary to the target view. We aren&amp;rsquo;t going to use this feature of Django in the tutorial.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4538085594fa71765ec146351dc02cd2a62a49b6" translate="yes" xml:space="preserve">
          <source>Are marked as &amp;ldquo;internal&amp;rdquo; (as opposed to &amp;ldquo;EXTERNAL&amp;rdquo;) in &lt;a href=&quot;../topics/logging#django.utils.log.AdminEmailHandler&quot;&gt;&lt;code&gt;AdminEmailHandler&lt;/code&gt;&lt;/a&gt; emails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a712e2d33d70b1022cfdcb9a2ae180418d15103" translate="yes" xml:space="preserve">
          <source>Are you new to Django or to programming? This is the place to start!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ede565cc656a4a577574a466fa3c9ef2c776096" translate="yes" xml:space="preserve">
          <source>Argon2</source>
          <target state="translated">Argon2</target>
        </trans-unit>
        <trans-unit id="2b8852ca2366a97e55c0d2d71ee2669e30845b41" translate="yes" xml:space="preserve">
          <source>Argon2 has three attributes that can be customized:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce5e5792e97fe5c7861d6ae9b29cf5a25cc0e70a" translate="yes" xml:space="preserve">
          <source>Argument</source>
          <target state="translated">Argument</target>
        </trans-unit>
        <trans-unit id="cbb9fa252e60809efa55a7ad83aea5438ef56753" translate="yes" xml:space="preserve">
          <source>Arguments</source>
          <target state="translated">Arguments</target>
        </trans-unit>
        <trans-unit id="58197fa61986afbdda62ef537066c9d7d284ce51" translate="yes" xml:space="preserve">
          <source>Arguments &lt;code&gt;formset&lt;/code&gt;, &lt;code&gt;extra&lt;/code&gt;, &lt;code&gt;max_num&lt;/code&gt;, &lt;code&gt;can_order&lt;/code&gt;, &lt;code&gt;can_delete&lt;/code&gt; and &lt;code&gt;validate_max&lt;/code&gt; are passed through to &lt;a href=&quot;formsets#django.forms.formsets.formset_factory&quot;&gt;&lt;code&gt;formset_factory()&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;../../topics/forms/formsets&quot;&gt;formsets&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8034fbe6240dce8c15d34b6c1adfb6d842f7d740" translate="yes" xml:space="preserve">
          <source>Arguments &lt;code&gt;model&lt;/code&gt;, &lt;code&gt;form&lt;/code&gt;, &lt;code&gt;fields&lt;/code&gt;, &lt;code&gt;exclude&lt;/code&gt;, &lt;code&gt;formfield_callback&lt;/code&gt;, &lt;code&gt;widgets&lt;/code&gt;, &lt;code&gt;localized_fields&lt;/code&gt;, &lt;code&gt;labels&lt;/code&gt;, &lt;code&gt;help_texts&lt;/code&gt;, &lt;code&gt;error_messages&lt;/code&gt;, and &lt;code&gt;field_classes&lt;/code&gt; are all passed through to &lt;a href=&quot;#django.forms.models.modelform_factory&quot;&gt;&lt;code&gt;modelform_factory()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d1cff7b9a2f029cdb3903bd7fc9052c131b2a51" translate="yes" xml:space="preserve">
          <source>Arguments passed into &lt;a href=&quot;base#django.views.generic.base.View.as_view&quot;&gt;&lt;code&gt;as_view()&lt;/code&gt;&lt;/a&gt; will be assigned onto the instance that is used to service a request. Using the previous example, this means that every request on &lt;code&gt;MyView&lt;/code&gt; is able to use &lt;code&gt;self.size&lt;/code&gt;. Arguments must correspond to attributes that already exist on the class (return &lt;code&gt;True&lt;/code&gt; on a &lt;code&gt;hasattr&lt;/code&gt; check).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f078c1fdd22e76807380df315056c024853f7857" translate="yes" xml:space="preserve">
          <source>Arguments passed to a view are shared between every instance of a view. This means that you shouldn&amp;rsquo;t use a list, dictionary, or any other mutable object as an argument to a view. If you do and the shared object is modified, the actions of one user visiting your view could have an effect on subsequent users visiting the same view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b605e3fad4f4e7cae16a126b8f64ee64d9e62bd8" translate="yes" xml:space="preserve">
          <source>Arguments sent with this signal:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88fea68375f653adcd5dce7d298e6094ef9a8491" translate="yes" xml:space="preserve">
          <source>Arguments that are sent with this signal:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77a319939251fa1d350565160d40ce342e3a2bdc" translate="yes" xml:space="preserve">
          <source>Arithmetic with &lt;code&gt;DurationField&lt;/code&gt; works in most cases. However on all databases other than PostgreSQL, comparing the value of a &lt;code&gt;DurationField&lt;/code&gt; to arithmetic on &lt;code&gt;DateTimeField&lt;/code&gt; instances will not work as expected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd9b41cfd3e7dff29518994e0b9851065abeabf4" translate="yes" xml:space="preserve">
          <source>Article objects have access to their related Reporter objects:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="803ebeca0014020157039a56b7c955bf6bab52e0" translate="yes" xml:space="preserve">
          <source>As Python&amp;rsquo;s normal &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase&quot;&gt;&lt;code&gt;unittest.TestCase&lt;/code&gt;&lt;/a&gt; class implements assertion methods such as &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertTrue&quot;&gt;&lt;code&gt;assertTrue()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertEqual&quot;&gt;&lt;code&gt;assertEqual()&lt;/code&gt;&lt;/a&gt;, Django&amp;rsquo;s custom &lt;a href=&quot;#django.test.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; class provides a number of custom assertion methods that are useful for testing Web applications:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a91d2631645bc3353f670fdb4233c68c7ae8c704" translate="yes" xml:space="preserve">
          <source>As a consequence, if you&amp;rsquo;re using PostgreSQL, you can switch between &lt;code&gt;USE_TZ
= False&lt;/code&gt; and &lt;code&gt;USE_TZ = True&lt;/code&gt; freely. The database connection&amp;rsquo;s time zone will be set to &lt;a href=&quot;../../ref/settings#std:setting-TIME_ZONE&quot;&gt;&lt;code&gt;TIME_ZONE&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;UTC&lt;/code&gt; respectively, so that Django obtains correct datetimes in all cases. You don&amp;rsquo;t need to perform any data conversions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cb03d8e9a6467edf4c13eac5fd28360a8fcfcb1" translate="yes" xml:space="preserve">
          <source>As a contributor, you can help us keep the Django community open and inclusive. Please read and follow our &lt;a href=&quot;https://www.djangoproject.com/conduct/&quot;&gt;Code of Conduct&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd4ac7c4d6c742fe78034f36f942a1b187ad4bf2" translate="yes" xml:space="preserve">
          <source>As a convenience when no lookup type is provided (like in &lt;code&gt;Entry.objects.get(id=14)&lt;/code&gt;) the lookup type is assumed to be &lt;a href=&quot;#std:fieldlookup-exact&quot;&gt;&lt;code&gt;exact&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5d3a6963dda7727f66b10430d291ec5d9a69966" translate="yes" xml:space="preserve">
          <source>As a convenience, Django comes with a view, &lt;a href=&quot;#django.views.i18n.set_language&quot;&gt;&lt;code&gt;django.views.i18n.set_language()&lt;/code&gt;&lt;/a&gt;, that sets a user&amp;rsquo;s language preference and redirects to a given URL or, by default, back to the previous page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a148d3a8c6ce021a1fb375d505172fcf07511531" translate="yes" xml:space="preserve">
          <source>As a convenience, Django provides a way to test whether the user&amp;rsquo;s browser accepts cookies. Call the &lt;a href=&quot;#django.contrib.sessions.backends.base.SessionBase.set_test_cookie&quot;&gt;&lt;code&gt;set_test_cookie()&lt;/code&gt;&lt;/a&gt; method of &lt;code&gt;request.session&lt;/code&gt; in a view, and call &lt;a href=&quot;#django.contrib.sessions.backends.base.SessionBase.test_cookie_worked&quot;&gt;&lt;code&gt;test_cookie_worked()&lt;/code&gt;&lt;/a&gt; in a subsequent view &amp;ndash; not in the same view call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2fac89610d998a78384559c126919b128271b4f" translate="yes" xml:space="preserve">
          <source>As a convenience, each message includes, in the form of a comment line prefixed with &lt;code&gt;#&lt;/code&gt; and located above the &lt;code&gt;msgid&lt;/code&gt; line, the filename and line number from which the translation string was gleaned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64031d0a37856a43f293b7ae4f2de01aeeaebdd4" translate="yes" xml:space="preserve">
          <source>As a convenience, the &lt;code&gt;HttpRequest&lt;/code&gt; object is passed to the &lt;code&gt;lookups&lt;/code&gt; and &lt;code&gt;queryset&lt;/code&gt; methods, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55ecd310b00d3a2bedf330c88278908e0dba94f8" translate="yes" xml:space="preserve">
          <source>As a custom field author, you don&amp;rsquo;t need to care about the first two values; the base &lt;code&gt;Field&lt;/code&gt; class has all the code to work out the field&amp;rsquo;s attribute name and import path. You do, however, have to care about the positional and keyword arguments, as these are likely the things you are changing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5d0254c52feffc267681ce4c32d47c81002ce3c" translate="yes" xml:space="preserve">
          <source>As a general rule, &lt;code&gt;to_python()&lt;/code&gt; should deal gracefully with any of the following arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="162f6d794632acfbba6013b0fb22a35fd35d7af3" translate="yes" xml:space="preserve">
          <source>As a general rule, if you can provide functions to compute &lt;em&gt;both&lt;/em&gt; the ETag and the last modified time, you should do so. You don&amp;rsquo;t know which headers any given HTTP client will send you, so be prepared to handle both. However, sometimes only one value is easy to compute and Django provides decorators that handle only ETag or only last-modified computations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4c7b21bf36c481e9159296ec7557ce258ac1e99" translate="yes" xml:space="preserve">
          <source>As a result, each &lt;code&gt;Entry&lt;/code&gt; object will have an extra attribute, &lt;code&gt;is_recent&lt;/code&gt;, a boolean representing whether the entry&amp;rsquo;s &lt;code&gt;pub_date&lt;/code&gt; is greater than Jan. 1, 2006.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8b143dadf99761dc7a79ebf9d0877018fc623ba" translate="yes" xml:space="preserve">
          <source>As a rule of thumb, only capture the values the view needs to work with and use non-capturing arguments when the regular expression needs an argument but the view ignores it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9c9f4b6a6f224e6e33f22feaf9223aac12b41e7" translate="yes" xml:space="preserve">
          <source>As a security measure, Django will &lt;em&gt;not&lt;/em&gt; include settings that might be sensitive, such as &lt;a href=&quot;#std:setting-SECRET_KEY&quot;&gt;&lt;code&gt;SECRET_KEY&lt;/code&gt;&lt;/a&gt;. Specifically, it will exclude any setting whose name includes any of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84cae640195b75a5b531e4722d3e827ad162687b" translate="yes" xml:space="preserve">
          <source>As a shortcut, the default cache is available as &lt;code&gt;django.core.cache.cache&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d14d8992d9e997382b4e9e188ab3c54a0fe914b1" translate="yes" xml:space="preserve">
          <source>As a shortcut, you can use the convenient &lt;a href=&quot;#django.contrib.auth.decorators.login_required&quot;&gt;&lt;code&gt;login_required()&lt;/code&gt;&lt;/a&gt; decorator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65dec2b26adfff7621033fdea8385bf825f6f9f8" translate="yes" xml:space="preserve">
          <source>As a shortcut, you can use the convenient &lt;code&gt;user_passes_test&lt;/code&gt; decorator which performs a redirect when the callable returns &lt;code&gt;False&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3282f21de03e9905c2d09d969f11529dd59351e4" translate="yes" xml:space="preserve">
          <source>As a special case, you are also permitted to use &lt;code&gt;last&lt;/code&gt; as a value for &lt;code&gt;page&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="060ec047b1ef0821812a28018949722fd546d7a8" translate="yes" xml:space="preserve">
          <source>As above, it is recommended to pass a list of &lt;code&gt;ValidationError&lt;/code&gt; instances with &lt;code&gt;code&lt;/code&gt;s and &lt;code&gt;params&lt;/code&gt; but a list of strings will also work:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f50ad2b65a9d524066daa50cc71bac67fe4f013" translate="yes" xml:space="preserve">
          <source>As above: the class of the user that just logged out or &lt;code&gt;None&lt;/code&gt; if the user was not authenticated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bb130c31241b060e083cd4e48479a7cdb3daa85" translate="yes" xml:space="preserve">
          <source>As above: the model class that just had an instance created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9b3807dca5d7355faf6db7cfede8eab86a99e6a" translate="yes" xml:space="preserve">
          <source>As always, you should document your field type, so users will know what it is. In addition to providing a docstring for it, which is useful for developers, you can also allow users of the admin app to see a short description of the field type via the &lt;a href=&quot;../ref/contrib/admin/admindocs&quot;&gt;django.contrib.admindocs&lt;/a&gt; application. To do this provide descriptive text in a &lt;a href=&quot;../ref/models/fields#django.db.models.Field.description&quot;&gt;&lt;code&gt;description&lt;/code&gt;&lt;/a&gt; class attribute of your custom field. In the above example, the description displayed by the &lt;code&gt;admindocs&lt;/code&gt; application for a &lt;code&gt;HandField&lt;/code&gt; will be &amp;lsquo;A hand of cards (bridge style)&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4483ceedafba3827803d0c6b7e6be9eb9bd58787" translate="yes" xml:space="preserve">
          <source>As an example, let&amp;rsquo;s make an operation that loads PostgreSQL extensions (which contain some of PostgreSQL&amp;rsquo;s more exciting features). Since there&amp;rsquo;s no model state changes, all it does is run one command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2f0ca9775bd19abb637e2e3b74d35f61538732e" translate="yes" xml:space="preserve">
          <source>As an example, the login form for the Django admin contains several &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; elements: one of &lt;code&gt;type=&quot;text&quot;&lt;/code&gt; for the username, one of &lt;code&gt;type=&quot;password&quot;&lt;/code&gt; for the password, and one of &lt;code&gt;type=&quot;submit&quot;&lt;/code&gt; for the &amp;ldquo;Log in&amp;rdquo; button. It also contains some hidden text fields that the user doesn&amp;rsquo;t see, which Django uses to determine what to do next.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bbf58fa832a1ed4496f565aefc0d8b472ea5042" translate="yes" xml:space="preserve">
          <source>As an example, though, here&amp;rsquo;s what a fixture for a &lt;code&gt;Person&lt;/code&gt; model might look like in JSON:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c2023817dac1207534202df5e2018211834ce8f" translate="yes" xml:space="preserve">
          <source>As an optimization, Django only flushes the &lt;code&gt;default&lt;/code&gt; database at the start of each test run. If your setup contains multiple databases, and you have a test that requires every database to be clean, you can use the &lt;code&gt;databases&lt;/code&gt; attribute on the test suite to request extra databases to be flushed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc354dd23505586b5af6774ee796c5ecb636150c" translate="yes" xml:space="preserve">
          <source>As currently implemented, setting &lt;code&gt;auto_now&lt;/code&gt; or &lt;code&gt;auto_now_add&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt; will cause the field to have &lt;code&gt;editable=False&lt;/code&gt; and &lt;code&gt;blank=True&lt;/code&gt; set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65a69528a8ff360aa751b0174a6a42ab5e776f10" translate="yes" xml:space="preserve">
          <source>As described above in &lt;a href=&quot;#django.db.models.query.QuerySet.get_or_create&quot;&gt;&lt;code&gt;get_or_create()&lt;/code&gt;&lt;/a&gt;, this method is prone to a race-condition which can result in multiple rows being inserted simultaneously if uniqueness is not enforced at the database level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c71ae107d635a60941fd857f322a439c4135e3ff" translate="yes" xml:space="preserve">
          <source>As described in the previous section, if a test run is forcefully interrupted, the test database may not be destroyed. On the next run, you&amp;rsquo;ll be asked whether you want to reuse or destroy the database. Use the &lt;a href=&quot;../../ref/django-admin#cmdoption-test-noinput&quot;&gt;&lt;code&gt;test
--noinput&lt;/code&gt;&lt;/a&gt; option to suppress that prompt and automatically destroy the database. This can be useful when running tests on a continuous integration server where tests may be interrupted by a timeout, for example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="797408375ed7da94f4e17bb1cfa01a5cf8e7ef8d" translate="yes" xml:space="preserve">
          <source>As described in the previous two sections, the cache key provided by a user is not used verbatim &amp;ndash; it is combined with the cache prefix and key version to provide a final cache key. By default, the three parts are joined using colons to produce a final string:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b7ec2ed3acca43c13049b422fb538687f6f7ecb" translate="yes" xml:space="preserve">
          <source>As discussed in &lt;a href=&quot;../security#sql-injection-protection&quot;&gt;SQL injection protection&lt;/a&gt;, using the &lt;code&gt;params&lt;/code&gt; argument and leaving the placeholders unquoted protects you from &lt;a href=&quot;https://en.wikipedia.org/wiki/SQL_injection&quot;&gt;SQL injection attacks&lt;/a&gt;, a common exploit where attackers inject arbitrary SQL into your database. If you use string interpolation or quote the placeholder, you&amp;rsquo;re at risk for SQL injection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20b88726251efae057f2600361cd15353b9aefaf" translate="yes" xml:space="preserve">
          <source>As discussed in &lt;a href=&quot;../topics/migrations#migrations-removing-model-fields&quot;&gt;removing fields&lt;/a&gt;, you must retain the original &lt;code&gt;CustomCharField&lt;/code&gt; class as long as you have migrations that reference it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41bf8726ebe535d8ba58d750aa07cec91ebd0cc7" translate="yes" xml:space="preserve">
          <source>As explained in &amp;ldquo;Outputting forms as HTML&amp;rdquo; above, the default label for a &lt;code&gt;Field&lt;/code&gt; is generated from the field name by converting all underscores to spaces and upper-casing the first letter. Specify &lt;code&gt;label&lt;/code&gt; if that default behavior doesn&amp;rsquo;t result in an adequate label.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8befa0db1dba58966a2414b9768c2deffe876e03" translate="yes" xml:space="preserve">
          <source>As explained in the documentation of &lt;a href=&quot;../../ref/settings#std:setting-TIME_ZONE&quot;&gt;&lt;code&gt;TIME_ZONE&lt;/code&gt;&lt;/a&gt;, Django sets environment variables so that its process runs in the default time zone. This happens regardless of the value of &lt;a href=&quot;../../ref/settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ&lt;/code&gt;&lt;/a&gt; and of the current time zone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ed84b5ba0ead8c1fa04f36e7e7bc74c3791dacc" translate="yes" xml:space="preserve">
          <source>As general programming practice, this goes without saying. Find out &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/faq/models/#faq-see-raw-sql-queries&quot;&gt;what queries you are doing and what they are costing you&lt;/a&gt;. Use &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.explain&quot;&gt;&lt;code&gt;QuerySet.explain()&lt;/code&gt;&lt;/a&gt; to understand how specific &lt;code&gt;QuerySet&lt;/code&gt;s are executed by your database. You may also want to use an external project like &lt;a href=&quot;https://github.com/jazzband/django-debug-toolbar/&quot;&gt;django-debug-toolbar&lt;/a&gt;, or a tool that monitors your database directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96991b8ac8856522132d360631369f91573de2f0" translate="yes" xml:space="preserve">
          <source>As in the &lt;a href=&quot;#django.contrib.auth.decorators.login_required&quot;&gt;&lt;code&gt;login_required()&lt;/code&gt;&lt;/a&gt; decorator, &lt;code&gt;login_url&lt;/code&gt; defaults to &lt;a href=&quot;../../ref/settings#std:setting-LOGIN_URL&quot;&gt;&lt;code&gt;settings.LOGIN_URL&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da9fe3df0ac51ceac9db719eba0178803cb06518" translate="yes" xml:space="preserve">
          <source>As in the previous example, we&amp;rsquo;ll use &lt;code&gt;parser.parse()&lt;/code&gt;. But this time, we pass the resulting &lt;code&gt;nodelist&lt;/code&gt; to the &lt;code&gt;Node&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd1a31b1b353515241d23397568df73c392b1bb5" translate="yes" xml:space="preserve">
          <source>As long as all of the arguments to your class&amp;rsquo; constructor are themselves serializable, you can use the &lt;code&gt;@deconstructible&lt;/code&gt; class decorator from &lt;code&gt;django.utils.deconstruct&lt;/code&gt; to add the &lt;code&gt;deconstruct()&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e600596bc5c873450b656d74b175877787ab3b6f" translate="yes" xml:space="preserve">
          <source>As long as the names match, the model instances will be created correctly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fde90f7d4164594d56ad64de71511cd1675ba34" translate="yes" xml:space="preserve">
          <source>As long as your tests are properly isolated, you can run them in parallel to gain a speed up on multi-core hardware. See &lt;a href=&quot;../../ref/django-admin#cmdoption-test-parallel&quot;&gt;&lt;code&gt;test --parallel&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3c70acb93c6e5c1218f6c1395e14e58b7f5c205" translate="yes" xml:space="preserve">
          <source>As long as your tests are sensibly arranged, they won&amp;rsquo;t become unmanageable. Good rules-of-thumb include having:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff98741fa13b2a84ea85722bce2d6ba0fe6eb0c8" translate="yes" xml:space="preserve">
          <source>As mentioned above, an example of a wrapper is a query execution blocker. It could look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b370539c468c4dfb8aa0c2d9330c6f649435a7a" translate="yes" xml:space="preserve">
          <source>As mentioned in &lt;a href=&quot;tutorial03&quot;&gt;Tutorial 3&lt;/a&gt;, &lt;code&gt;request&lt;/code&gt; is an &lt;a href=&quot;../ref/request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; object. For more on &lt;a href=&quot;../ref/request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; objects, see the &lt;a href=&quot;../ref/request-response&quot;&gt;request and response documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d95c5bf0cefa9c9545e31ef3d2005a5c070fd4d" translate="yes" xml:space="preserve">
          <source>As mentioned, Django will automatically create a &lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt;&lt;code&gt;OneToOneField&lt;/code&gt;&lt;/a&gt; linking your child class back to any non-abstract parent models. If you want to control the name of the attribute linking back to the parent, you can create your own &lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt;&lt;code&gt;OneToOneField&lt;/code&gt;&lt;/a&gt; and set &lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField.parent_link&quot;&gt;&lt;code&gt;parent_link=True&lt;/code&gt;&lt;/a&gt; to indicate that your field is the link back to the parent class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4b79767de4ca41245f3982197bcd1108401cb20" translate="yes" xml:space="preserve">
          <source>As mentioned, any of these methods can raise a &lt;code&gt;ValidationError&lt;/code&gt;. For any field, if the &lt;code&gt;Field.clean()&lt;/code&gt; method raises a &lt;code&gt;ValidationError&lt;/code&gt;, any field-specific cleaning method is not called. However, the cleaning methods for all remaining fields are still executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5537608bf329c234a50e1e6bf69edb69274b89a" translate="yes" xml:space="preserve">
          <source>As noted &lt;a href=&quot;#emptying-test-outbox&quot;&gt;previously&lt;/a&gt;, the test outbox is emptied at the start of every test in a Django &lt;code&gt;*TestCase&lt;/code&gt;. To empty the outbox manually, assign the empty list to &lt;code&gt;mail.outbox&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11567f9b2cb4749058f2ee08859ac819cbb887ba" translate="yes" xml:space="preserve">
          <source>As noted in the warning at the top of this section, Django stores all SQL queries when &lt;code&gt;DEBUG=True&lt;/code&gt;. Set &lt;code&gt;DEBUG=False&lt;/code&gt; in your settings, and this should stop excessive memory use when running &lt;code&gt;LayerMapping&lt;/code&gt; scripts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b24969d3792077ea0404a1157efaffa2850972af" translate="yes" xml:space="preserve">
          <source>As part of the validation process, &lt;code&gt;ModelForm&lt;/code&gt; will call the &lt;code&gt;clean()&lt;/code&gt; method of each field on your model that has a corresponding field on your form. If you have excluded any model fields, validation will not be run on those fields. See the &lt;a href=&quot;../../ref/forms/validation&quot;&gt;form validation&lt;/a&gt; documentation for more on how field cleaning and validation work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f8ea1ba8d0d9e453e5627c48418ee9fcf732126" translate="yes" xml:space="preserve">
          <source>As per &lt;a href=&quot;https://www.python.org/dev/peps/pep-3134&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;PEP 3134&lt;/strong&gt;&lt;/a&gt;, a &lt;code&gt;__cause__&lt;/code&gt; attribute is set with the original (underlying) database exception, allowing access to any additional information provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a975be9a69e196fd48d57d72a02baaad0186cb2" translate="yes" xml:space="preserve">
          <source>As previously discussed, you may need to linearize migrations manually when two development branches are joined. While editing migration dependencies, you can inadvertently create an inconsistent history state where a migration has been applied but some of its dependencies haven&amp;rsquo;t. This is a strong indication that the dependencies are incorrect, so Django will refuse to run migrations or make new migrations until it&amp;rsquo;s fixed. When using multiple databases, you can use the &lt;a href=&quot;db/multi-db#allow_migrate&quot;&gt;&lt;code&gt;allow_migrate()&lt;/code&gt;&lt;/a&gt; method of &lt;a href=&quot;db/multi-db#topics-db-multi-db-routing&quot;&gt;database routers&lt;/a&gt; to control which databases &lt;a href=&quot;../ref/django-admin#django-admin-makemigrations&quot;&gt;&lt;code&gt;makemigrations&lt;/code&gt;&lt;/a&gt; checks for consistent history.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34fd3226d75f12bed342a63f13cbfb1d23154cae" translate="yes" xml:space="preserve">
          <source>As some examples have already demonstrated, when using a callable, a model method, or a &lt;code&gt;ModelAdmin&lt;/code&gt; method, you can customize the column&amp;rsquo;s title by adding a &lt;code&gt;short_description&lt;/code&gt; attribute to the callable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2561f19164b49d25174c86ee7483f65e053b31b2" translate="yes" xml:space="preserve">
          <source>As stated earlier, you can override the default queryset used by the model formset:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e45703de797a79b14a59e52d99d9dea8a4938b96" translate="yes" xml:space="preserve">
          <source>As the Python comment above points out, you should always return an &lt;a href=&quot;../ref/request-response#django.http.HttpResponseRedirect&quot;&gt;&lt;code&gt;HttpResponseRedirect&lt;/code&gt;&lt;/a&gt; after successfully dealing with POST data. This tip isn&amp;rsquo;t specific to Django; it&amp;rsquo;s good Web development practice in general.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a4e0f05200f4e3bd790c9fcec0b86c5782a9738" translate="yes" xml:space="preserve">
          <source>As the current site is stored in the database, each call to &lt;code&gt;Site.objects.get_current()&lt;/code&gt; could result in a database query. But Django is a little cleverer than that: on the first request, the current site is cached, and any subsequent call returns the cached data instead of hitting the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f4099ae5355f2d5fb266cbbd62c197aa3fbf97a" translate="yes" xml:space="preserve">
          <source>As the name suggests the dummy backend does nothing with your messages. To specify this backend, put the following in your settings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2d24c8e355d23d5cc3828d2e2775a8d9e8611a3" translate="yes" xml:space="preserve">
          <source>As the reverse name for a field should be unique, be careful if you intend to subclass your model. To work around name collisions, part of the name should contain &lt;code&gt;'%(app_label)s'&lt;/code&gt; and &lt;code&gt;'%(model_name)s'&lt;/code&gt;, which are replaced respectively by the name of the application the model is in, and the name of the model, both lowercased. See the paragraph on &lt;a href=&quot;../../topics/db/models#abstract-related-name&quot;&gt;related names for abstract models&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f01c1b15fa03baf75efdacb0fbf90b5fd8345d1" translate="yes" xml:space="preserve">
          <source>As this example shows, the same datetime has a different date, depending on the time zone in which it is represented. But the real problem is more fundamental.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4703cede843d60da3b461a023a621276dff45e4" translate="yes" xml:space="preserve">
          <source>As this example suggests, you can instantiate &lt;code&gt;Client&lt;/code&gt; from within a session of the Python interactive interpreter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="502899b59d7f16acbbec8754d2d17b6c9dfe74f9" translate="yes" xml:space="preserve">
          <source>As users create new sessions on your website, session data can accumulate in your session store. If you&amp;rsquo;re using the database backend, the &lt;code&gt;django_session&lt;/code&gt; database table will grow. If you&amp;rsquo;re using the file backend, your temporary directory will contain an increasing number of files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83a34f76469cc0136158fd2b4197ba5b321cd9c2" translate="yes" xml:space="preserve">
          <source>As we can see, &lt;code&gt;formset.errors&lt;/code&gt; is a list whose entries correspond to the forms in the formset. Validation was performed for each of the two forms, and the expected error message appears for the second item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="536eb63644b98260775a8d5bdac6172bde9f8ea8" translate="yes" xml:space="preserve">
          <source>As we mentioned earlier, filter arguments can be strings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d97e9a7198203ff3683051dde6ca2dc19c4acf85" translate="yes" xml:space="preserve">
          <source>As well as WSGI, Django also supports deploying on &lt;a href=&quot;https://asgi.readthedocs.io/en/latest/&quot;&gt;ASGI&lt;/a&gt;, the emerging Python standard for asynchronous web servers and applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3389aa26160872fdc1ff800062f3da9f89662bf3" translate="yes" xml:space="preserve">
          <source>As well as being used in operations on single instances as above, &lt;code&gt;F()&lt;/code&gt; can be used on &lt;code&gt;QuerySets&lt;/code&gt; of object instances, with &lt;code&gt;update()&lt;/code&gt;. This reduces the two queries we were using above - the &lt;code&gt;get()&lt;/code&gt; and the &lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; - to just one:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b32c9168863a30b185a6576d29e12334bee3290" translate="yes" xml:space="preserve">
          <source>As well as caching of the whole &lt;code&gt;QuerySet&lt;/code&gt;, there is caching of the result of attributes on ORM objects. In general, attributes that are not callable will be cached. For example, assuming the &lt;a href=&quot;queries#queryset-model-example&quot;&gt;example Weblog models&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f07fcd9b4fddeadcbcc6d4ab96f71f5ab157dc76" translate="yes" xml:space="preserve">
          <source>As well as changing the database schema, you can also use migrations to change the data in the database itself, in conjunction with the schema if you want.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb9aab9ad8871c655982b7b13ec479d3f5d6959c" translate="yes" xml:space="preserve">
          <source>As well as its &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; elements, a form must specify two things:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6abd1f01d13e5e8325182af83c6feb5563a04b9" translate="yes" xml:space="preserve">
          <source>As well as offering potential performance advantages, &lt;code&gt;@cached_property&lt;/code&gt; can ensure that an attribute&amp;rsquo;s value does not change unexpectedly over the life of an instance. This could occur with a method whose computation is based on &lt;code&gt;datetime.now()&lt;/code&gt;, or if a change were saved to the database by some other process in the brief interval between subsequent invocations of a method on the same instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebe8b7ef5f360037fb3404468afcd52377e7e74f" translate="yes" xml:space="preserve">
          <source>As well as the named group syntax, e.g. &lt;code&gt;(?P&amp;lt;year&amp;gt;[0-9]{4})&lt;/code&gt;, you can also use the shorter unnamed group, e.g. &lt;code&gt;([0-9]{4})&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e6561daa7eafe8b31858f977bd4b5a102fd1e7c" translate="yes" xml:space="preserve">
          <source>As with &lt;a href=&quot;#urlize&quot;&gt;urlize&lt;/a&gt;, this filter should only be applied to plain text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="195bc7afc75bee63d50df5ca12d3cc6ac1d43324" translate="yes" xml:space="preserve">
          <source>As with &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;, a &lt;a href=&quot;../../ref/models/fields#recursive-relationships&quot;&gt;recursive relationship&lt;/a&gt; can be defined and &lt;a href=&quot;../../ref/models/fields#lazy-relationships&quot;&gt;references to as-yet undefined models&lt;/a&gt; can be made.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d12d0262217934e05bda9cb843bd23a7b0971aca" translate="yes" xml:space="preserve">
          <source>As with &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;, you can also create &lt;a href=&quot;../../ref/models/fields#recursive-relationships&quot;&gt;recursive relationships&lt;/a&gt; (an object with a many-to-many relationship to itself) and &lt;a href=&quot;../../ref/models/fields#lazy-relationships&quot;&gt;relationships to models not yet defined&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8c6e392099eca6c7e281f29671628ef8d61549b" translate="yes" xml:space="preserve">
          <source>As with &lt;code&gt;aggregate()&lt;/code&gt;, the name for the annotation is automatically derived from the name of the aggregate function and the name of the field being aggregated. You can override this default name by providing an alias when you specify the annotation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d5177c681d3236422cff8cca56cf926bb1d7cc5" translate="yes" xml:space="preserve">
          <source>As with a &lt;code&gt;ModelForm&lt;/code&gt;, you can save the data as a model object. This is done with the formset&amp;rsquo;s &lt;code&gt;save()&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d344166e704cbb21a3a3d2b39d35983e33095843" translate="yes" xml:space="preserve">
          <source>As with basic forms, you can extend and reuse &lt;code&gt;ModelForms&lt;/code&gt; by inheriting them. This is useful if you need to declare extra fields or extra methods on a parent class for use in a number of forms derived from models. For example, using the previous &lt;code&gt;ArticleForm&lt;/code&gt; class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8a6cb2344f9d9208fd7d7b21b208a1b9b466d30" translate="yes" xml:space="preserve">
          <source>As with filter registration, it is also possible to use this as a decorator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f84614669e2fdbcc38582abe3003d63a2433a52" translate="yes" xml:space="preserve">
          <source>As with other HTTP headers in &lt;code&gt;request.META&lt;/code&gt;, the header name received from the server is normalized by converting all characters to uppercase, replacing any hyphens with underscores, and adding an &lt;code&gt;'HTTP_'&lt;/code&gt; prefix to the name. For example, if your client sends a &lt;code&gt;'X-XSRF-TOKEN'&lt;/code&gt; header, the setting should be &lt;code&gt;'HTTP_X_XSRF_TOKEN'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d5eeeb534d86f8c229f540d1e439534abcf6637" translate="yes" xml:space="preserve">
          <source>As with other PostgreSQL fields, there are three standard containment operators: &lt;code&gt;contains&lt;/code&gt;, &lt;code&gt;contained_by&lt;/code&gt; and &lt;code&gt;overlap&lt;/code&gt;, using the SQL operators &lt;code&gt;@&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;@&lt;/code&gt;, and &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e64144e886b411ea54b8b392eef0caf07cb6cef" translate="yes" xml:space="preserve">
          <source>As with regular forms, it&amp;rsquo;s possible to specify initial data for forms by specifying an &lt;code&gt;initial&lt;/code&gt; parameter when instantiating the form. Initial values provided this way will override both initial values from the form field and values from an attached model instance. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffe99c485c3dc0ce533f1043d34823610c27123f" translate="yes" xml:space="preserve">
          <source>As with regular formsets, it&amp;rsquo;s possible to &lt;a href=&quot;formsets#formsets-initial-data&quot;&gt;specify initial data&lt;/a&gt; for forms in the formset by specifying an &lt;code&gt;initial&lt;/code&gt; parameter when instantiating the model formset class returned by &lt;a href=&quot;../../ref/forms/models#django.forms.models.modelformset_factory&quot;&gt;&lt;code&gt;modelformset_factory()&lt;/code&gt;&lt;/a&gt;. However, with model formsets, the initial values only apply to extra forms, those that aren&amp;rsquo;t attached to an existing model instance. If the length of &lt;code&gt;initial&lt;/code&gt; exceeds the number of extra forms, the excess initial data is ignored. If the extra forms with initial data aren&amp;rsquo;t changed by the user, they won&amp;rsquo;t be validated or saved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="527f8cf0e286007c370fc877419357e189a4595a" translate="yes" xml:space="preserve">
          <source>As with regular formsets, you can use the &lt;code&gt;max_num&lt;/code&gt; and &lt;code&gt;extra&lt;/code&gt; parameters to &lt;a href=&quot;../../ref/forms/models#django.forms.models.modelformset_factory&quot;&gt;&lt;code&gt;modelformset_factory()&lt;/code&gt;&lt;/a&gt; to limit the number of extra forms displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d5de867c1639776d4da6c2f4f2d7cb718667f07" translate="yes" xml:space="preserve">
          <source>As with the &lt;a href=&quot;#django.contrib.admin.ModelAdmin.fields&quot;&gt;&lt;code&gt;fields&lt;/code&gt;&lt;/a&gt; option, to display multiple fields on the same line, wrap those fields in their own tuple. In this example, the &lt;code&gt;first_name&lt;/code&gt; and &lt;code&gt;last_name&lt;/code&gt; fields will display on the same line:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2234be373123e78349407666595d653e39152ca6" translate="yes" xml:space="preserve">
          <source>As with the &lt;code&gt;filter()&lt;/code&gt; clause, the order in which &lt;code&gt;annotate()&lt;/code&gt; and &lt;code&gt;values()&lt;/code&gt; clauses are applied to a query is significant. If the &lt;code&gt;values()&lt;/code&gt; clause precedes the &lt;code&gt;annotate()&lt;/code&gt;, the annotation will be computed using the grouping described by the &lt;code&gt;values()&lt;/code&gt; clause.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fba9371114d62d3639b4d42414a8a9aa5814a71" translate="yes" xml:space="preserve">
          <source>As you are using an intermediate model, you can also query on its attributes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc048712e6598211018ab15fc4c4e5d7705ea164" translate="yes" xml:space="preserve">
          <source>As you can see it only displayed one empty form. The number of empty forms that is displayed is controlled by the &lt;code&gt;extra&lt;/code&gt; parameter. By default, &lt;a href=&quot;../../ref/forms/formsets#django.forms.formsets.formset_factory&quot;&gt;&lt;code&gt;formset_factory()&lt;/code&gt;&lt;/a&gt; defines one extra form; the following example will create a formset class to display two blank forms:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="879c04f43647cd15cb5b4809e41772fd4186faf1" translate="yes" xml:space="preserve">
          <source>As you can see, &lt;code&gt;SlugField&lt;/code&gt; is a &lt;code&gt;CharField&lt;/code&gt; with a customized validator that validates that submitted text obeys to some character rules. This can also be done on field definition so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67c02b659fb85b72e2371888efd652ce146dfaa7" translate="yes" xml:space="preserve">
          <source>As you can see, the &lt;code&gt;deserialize&lt;/code&gt; function takes the same format argument as &lt;code&gt;serialize&lt;/code&gt;, a string or stream of data, and returns an iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71345e5bba220323ebb78dd2c42b60e93d3002a3" translate="yes" xml:space="preserve">
          <source>As you can see, the &lt;code&gt;if&lt;/code&gt; tag may take one or several &lt;code&gt;{% elif %}&lt;/code&gt; clauses, as well as an &lt;code&gt;{% else %}&lt;/code&gt; clause that will be displayed if all previous conditions fail. These clauses are optional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8915f71d46f96a37ab702d1b08b5f5deda8900e" translate="yes" xml:space="preserve">
          <source>As you can see, the action is rather short; all the complex logic would belong in your export view. This would need to deal with objects of any type, hence the business with the &lt;code&gt;ContentType&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ba5fb948174a296eee1bc5ce8a1d74a772bd21b" translate="yes" xml:space="preserve">
          <source>As you can see, the view logic of a model formset isn&amp;rsquo;t drastically different than that of a &amp;ldquo;normal&amp;rdquo; formset. The only difference is that we call &lt;code&gt;formset.save()&lt;/code&gt; to save the data into the database. (This was described above, in &lt;a href=&quot;#saving-objects-in-the-formset&quot;&gt;Saving objects in the formset&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de0f25a2104a49777d9ee597d14852fc1ff51dce" translate="yes" xml:space="preserve">
          <source>As you might expect, the &lt;code&gt;ForeignKey&lt;/code&gt; and &lt;code&gt;ManyToManyField&lt;/code&gt; model field types are special cases:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbdc9cb77dc9cc6e2126127526db5ead30982a19" translate="yes" xml:space="preserve">
          <source>As you might expect, the created models will have an attribute for every field in the table. Note that &lt;code&gt;inspectdb&lt;/code&gt; has a few special cases in its field-name output:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b982efad890175e01516b81e3f537fb6d8014461" translate="yes" xml:space="preserve">
          <source>Aside from strings and bytestrings, there&amp;rsquo;s a third type of string-like object you may encounter when using Django. The framework&amp;rsquo;s internationalization features introduce the concept of a &amp;ldquo;lazy translation&amp;rdquo; &amp;ndash; a string that has been marked as translated but whose actual translation result isn&amp;rsquo;t determined until the object is used in a string. This feature is useful in cases where the translation locale is unknown until the string is used, even though the string might have originally been created when the code was first imported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73bf916809eadb87e354ae61d91f8d7fada6f240" translate="yes" xml:space="preserve">
          <source>Aside from the HTML generated by the server, web applications generally need to serve additional files &amp;mdash; such as images, JavaScript, or CSS &amp;mdash; necessary to render the complete web page. In Django, we refer to these files as &amp;ldquo;static files&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="801335ff891c76c3f61153e82fc7e76f405d1de3" translate="yes" xml:space="preserve">
          <source>Aside from using a separate database, the test runner will otherwise use all of the same database settings you have in your settings file: &lt;a href=&quot;../../ref/settings#std:setting-DATABASE-ENGINE&quot;&gt;&lt;code&gt;ENGINE&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/settings#std:setting-USER&quot;&gt;&lt;code&gt;USER&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/settings#std:setting-HOST&quot;&gt;&lt;code&gt;HOST&lt;/code&gt;&lt;/a&gt;, etc. The test database is created by the user specified by &lt;a href=&quot;../../ref/settings#std:setting-USER&quot;&gt;&lt;code&gt;USER&lt;/code&gt;&lt;/a&gt;, so you&amp;rsquo;ll need to make sure that the given user account has sufficient privileges to create a new database on the system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3e68cd197fc11a427c01118c11dbb487de2b2c1" translate="yes" xml:space="preserve">
          <source>Ask a question in the &lt;a href=&quot;irc://irc.freenode.net/django&quot;&gt;#django IRC channel&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7eb1f68e967a33147b40021bee5c44bbf8c067e4" translate="yes" xml:space="preserve">
          <source>Ask your question on the &lt;a href=&quot;https://groups.google.com/d/forum/geodjango&quot;&gt;GeoDjango&lt;/a&gt; mailing list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49bf55dc112eb3597726ba8ecf785a4fae4cbce0" translate="yes" xml:space="preserve">
          <source>Assertions</source>
          <target state="translated">Assertions</target>
        </trans-unit>
        <trans-unit id="3c3ab385220f6b65aa5032ebca76349ce0988bbe" translate="yes" xml:space="preserve">
          <source>Asserts that a &lt;code&gt;Response&lt;/code&gt; instance produced the given &lt;code&gt;status_code&lt;/code&gt; and that &lt;code&gt;text&lt;/code&gt; appears in the content of the response. If &lt;code&gt;count&lt;/code&gt; is provided, &lt;code&gt;text&lt;/code&gt; must occur exactly &lt;code&gt;count&lt;/code&gt; times in the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="463c066a0ef6fd410a35e951dd7b3b5877e69f1f" translate="yes" xml:space="preserve">
          <source>Asserts that a &lt;code&gt;Response&lt;/code&gt; instance produced the given &lt;code&gt;status_code&lt;/code&gt; and that &lt;code&gt;text&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; appear in the content of the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fd5de239fdc9bd26df8c09eab928a6817abad4f" translate="yes" xml:space="preserve">
          <source>Asserts that a field on a form raises the provided list of errors when rendered on the form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42c441e6d48fad10619b9628fd6668cb1e216b3a" translate="yes" xml:space="preserve">
          <source>Asserts that a form field behaves correctly with various inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c16ebaf667ff8d9be17b8441be73f7c3b07fcbff" translate="yes" xml:space="preserve">
          <source>Asserts that a queryset &lt;code&gt;qs&lt;/code&gt; returns a particular list of values &lt;code&gt;values&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d04d0343979b42c4abb311c3aa9e3d89b870915" translate="yes" xml:space="preserve">
          <source>Asserts that execution of &lt;code&gt;callable&lt;/code&gt; raises &lt;code&gt;expected_exception&lt;/code&gt; and that &lt;code&gt;expected_message&lt;/code&gt; is found in the exception&amp;rsquo;s message. Any other outcome is reported as a failure. It&amp;rsquo;s a simpler version of &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaisesRegex&quot;&gt;&lt;code&gt;unittest.TestCase.assertRaisesRegex()&lt;/code&gt;&lt;/a&gt; with the difference that &lt;code&gt;expected_message&lt;/code&gt; isn&amp;rsquo;t treated as a regular expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6161ea697a7c27f8a9591827bd5e9b9c1efba2e" translate="yes" xml:space="preserve">
          <source>Asserts that the &lt;code&gt;formset&lt;/code&gt; raises the provided list of errors when rendered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff59a197649a85d7611947dbf66400822fd3fd57" translate="yes" xml:space="preserve">
          <source>Asserts that the HTML fragment &lt;code&gt;needle&lt;/code&gt; is contained in the &lt;code&gt;haystack&lt;/code&gt; one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72cfd60eeafd9e065c5cb6d7c2c4205bb79b91ee" translate="yes" xml:space="preserve">
          <source>Asserts that the JSON fragments &lt;code&gt;raw&lt;/code&gt; and &lt;code&gt;expected_data&lt;/code&gt; are &lt;em&gt;not&lt;/em&gt; equal. See &lt;a href=&quot;#django.test.SimpleTestCase.assertJSONEqual&quot;&gt;&lt;code&gt;assertJSONEqual()&lt;/code&gt;&lt;/a&gt; for further details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85e70bc6e665bfcc530f2833752ea8a330e09608" translate="yes" xml:space="preserve">
          <source>Asserts that the JSON fragments &lt;code&gt;raw&lt;/code&gt; and &lt;code&gt;expected_data&lt;/code&gt; are equal. Usual JSON non-significant whitespace rules apply as the heavyweight is delegated to the &lt;a href=&quot;https://docs.python.org/3/library/json.html#module-json&quot;&gt;&lt;code&gt;json&lt;/code&gt;&lt;/a&gt; library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04e2a1c4987747529f25e1ccd3d7e5bcbf9496bb" translate="yes" xml:space="preserve">
          <source>Asserts that the response returned a &lt;code&gt;status_code&lt;/code&gt; redirect status, redirected to &lt;code&gt;expected_url&lt;/code&gt; (including any &lt;code&gt;GET&lt;/code&gt; data), and that the final page was received with &lt;code&gt;target_status_code&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10ab43696f727131a6cc76c15936e9e996766dfb" translate="yes" xml:space="preserve">
          <source>Asserts that the strings &lt;code&gt;html1&lt;/code&gt; and &lt;code&gt;html2&lt;/code&gt; are &lt;em&gt;not&lt;/em&gt; equal. The comparison is based on HTML semantics. See &lt;a href=&quot;#django.test.SimpleTestCase.assertHTMLEqual&quot;&gt;&lt;code&gt;assertHTMLEqual()&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62ddcb768dff0ff64abf8e34d084b990dac6d090" translate="yes" xml:space="preserve">
          <source>Asserts that the strings &lt;code&gt;html1&lt;/code&gt; and &lt;code&gt;html2&lt;/code&gt; are equal. The comparison is based on HTML semantics. The comparison takes following things into account:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09bb4880b10bf0be7916cea611cb80f9ba9d0a6f" translate="yes" xml:space="preserve">
          <source>Asserts that the strings &lt;code&gt;xml1&lt;/code&gt; and &lt;code&gt;xml2&lt;/code&gt; are &lt;em&gt;not&lt;/em&gt; equal. The comparison is based on XML semantics. See &lt;a href=&quot;#django.test.SimpleTestCase.assertXMLEqual&quot;&gt;&lt;code&gt;assertXMLEqual()&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f3ac14ce90af9e23f5ed205d1f3feb60e5cb4d4" translate="yes" xml:space="preserve">
          <source>Asserts that the strings &lt;code&gt;xml1&lt;/code&gt; and &lt;code&gt;xml2&lt;/code&gt; are equal. The comparison is based on XML semantics. Similarly to &lt;a href=&quot;#django.test.SimpleTestCase.assertHTMLEqual&quot;&gt;&lt;code&gt;assertHTMLEqual()&lt;/code&gt;&lt;/a&gt;, the comparison is made on parsed content, hence only semantic differences are considered, not syntax differences. When invalid XML is passed in any parameter, an &lt;code&gt;AssertionError&lt;/code&gt; is always raised, even if both string are identical.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f1524535e73d36ad269e12fefb6d8f92b80612e" translate="yes" xml:space="preserve">
          <source>Asserts that the template with the given name was &lt;em&gt;not&lt;/em&gt; used in rendering the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bcd878feb16c89a31efac7d1f686961eb4e9018" translate="yes" xml:space="preserve">
          <source>Asserts that the template with the given name was used in rendering the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af9f8e52fffda162a5c29828d54ce8db12a7288f" translate="yes" xml:space="preserve">
          <source>Asserts that two URLs are the same, ignoring the order of query string parameters except for parameters with the same name. For example, &lt;code&gt;/path/?x=1&amp;amp;y=2&lt;/code&gt; is equal to &lt;code&gt;/path/?y=2&amp;amp;x=1&lt;/code&gt;, but &lt;code&gt;/path/?a=1&amp;amp;a=2&lt;/code&gt; isn&amp;rsquo;t equal to &lt;code&gt;/path/?a=2&amp;amp;a=1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="236be22124ed0d7fa04be050a132e368d177a148" translate="yes" xml:space="preserve">
          <source>Asserts that when &lt;code&gt;func&lt;/code&gt; is called with &lt;code&gt;*args&lt;/code&gt; and &lt;code&gt;**kwargs&lt;/code&gt; that &lt;code&gt;num&lt;/code&gt; database queries are executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba1117e518e5f60b947e1eb3cbc96a3a0de81d79" translate="yes" xml:space="preserve">
          <source>Assets and Django Admin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee7a87f125429d68fd6a5d90f091a081608f015c" translate="yes" xml:space="preserve">
          <source>Assets as a static definition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f461fa34176c4b47a012aabf643fc1615d7d901" translate="yes" xml:space="preserve">
          <source>Associate the &lt;code&gt;Article&lt;/code&gt; with a &lt;code&gt;Publication&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="604f2861391a4966f134874defeeccf87347ea1b" translate="yes" xml:space="preserve">
          <source>Associating content with a single site</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="160af382fad84f01ed5831a3e803426a07248982" translate="yes" xml:space="preserve">
          <source>Associating content with multiple sites</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="596ea1966975c3b5e427a0286ede76cada93b872" translate="yes" xml:space="preserve">
          <source>Assuming &lt;code&gt;author&lt;/code&gt; is a &lt;code&gt;ForeignKey&lt;/code&gt; to a &lt;code&gt;User&lt;/code&gt; model, this will limit the &lt;code&gt;list_filter&lt;/code&gt; choices to the users who have written a book instead of listing all users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67cb6d59d5bd23a55c32da92b2e5f481aaf089de" translate="yes" xml:space="preserve">
          <source>Assuming an existing Employee Fred Smith who has both a User and Employee model, you can access the related information using Django&amp;rsquo;s standard related model conventions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="185a5c0fe2f8a27d76d5b4ea8cbea1d6724b2c74" translate="yes" xml:space="preserve">
          <source>Assuming both models have a &lt;code&gt;length&lt;/code&gt; field, to find posts where the post length is greater than the total length of all combined comments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9fe69b31f449015f041b355315b24ddf7359871" translate="yes" xml:space="preserve">
          <source>Assuming models live in a file &lt;code&gt;mysite/blog/models.py&lt;/code&gt;, here&amp;rsquo;s an example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a43372f88213dad295044509b366e98b21109371" translate="yes" xml:space="preserve">
          <source>Assuming rows of 10-20 columns with a mix of textual and numeric data, 2000 is going to fetch less than 100KB of data, which seems a good compromise between the number of rows transferred and the data discarded if the loop is exited early.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6365343a740bba2824b80576a3bf0941694912be" translate="yes" xml:space="preserve">
          <source>Assuming that &lt;a href=&quot;../settings#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt; and &lt;a href=&quot;../settings#std:setting-LANGUAGE_CODE&quot;&gt;&lt;code&gt;LANGUAGE_CODE&lt;/code&gt;&lt;/a&gt; is, for example, &lt;code&gt;&quot;de&quot;&lt;/code&gt;, then for:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a9b104a6162d8533d6966d8db536a2936bbdb5f" translate="yes" xml:space="preserve">
          <source>Assuming that &lt;a href=&quot;../settings#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt; and &lt;a href=&quot;../settings#std:setting-LANGUAGE_CODE&quot;&gt;&lt;code&gt;LANGUAGE_CODE&lt;/code&gt;&lt;/a&gt; is, for example, &lt;code&gt;&quot;es&quot;&lt;/code&gt;, then for:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e859c14e91e44380de99cb3733de849b3d0bf3ca" translate="yes" xml:space="preserve">
          <source>Assuming the settings above were in a &lt;code&gt;postgis.py&lt;/code&gt; file in the same directory as &lt;code&gt;runtests.py&lt;/code&gt;, then all Django and GeoDjango tests would be performed when executing the command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15d9d44a1a13ae4c3c09865d41e5911a0d169d65" translate="yes" xml:space="preserve">
          <source>Assuming you have an application with an &lt;a href=&quot;../../ref/models/options#django.db.models.Options.app_label&quot;&gt;&lt;code&gt;app_label&lt;/code&gt;&lt;/a&gt;&lt;code&gt;foo&lt;/code&gt; and a model named &lt;code&gt;Bar&lt;/code&gt;, to test for basic permissions you should use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24ffd2b9ba150c77f60a52bfae4dd953b7b74828" translate="yes" xml:space="preserve">
          <source>Astute readers will ask: But if &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-DIRS&quot;&gt;&lt;code&gt;DIRS&lt;/code&gt;&lt;/a&gt; was empty by default, how was Django finding the default admin templates? The answer is that, since &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-APP_DIRS&quot;&gt;&lt;code&gt;APP_DIRS&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt;, Django automatically looks for a &lt;code&gt;templates/&lt;/code&gt; subdirectory within each application package, for use as a fallback (don&amp;rsquo;t forget that &lt;code&gt;django.contrib.admin&lt;/code&gt; is an application).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce6652834c4009b903e89f99e020f920dd5b16ab" translate="yes" xml:space="preserve">
          <source>Async-safety</source>
          <target state="translated">Async-safety</target>
        </trans-unit>
        <trans-unit id="a3e3a088b1b429408c27d37377c0f5fbb7e78544" translate="yes" xml:space="preserve">
          <source>Asynchronous support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="becc4b8b4fde1f67917d72e71ac9f0397a752159" translate="yes" xml:space="preserve">
          <source>At a certain point you are bound to look at your tests and wonder whether your code is suffering from test bloat, which brings us to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b07648c0929cd0231e4f9c7354122d36df0feb38" translate="yes" xml:space="preserve">
          <source>At any point, your &lt;code&gt;urlpatterns&lt;/code&gt; can &amp;ldquo;include&amp;rdquo; other URLconf modules. This essentially &amp;ldquo;roots&amp;rdquo; a set of URLs below other ones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fb6bc9538b157b5311479759837c5d348f05677" translate="yes" xml:space="preserve">
          <source>At first, this seems like a harmless way to display a user&amp;rsquo;s name, but consider what would happen if the user entered their name as this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c7e592441c168f09fb7eebbe767a10d6bcec63c" translate="yes" xml:space="preserve">
          <source>At its core, a class-based view allows you to respond to different HTTP request methods with different class instance methods, instead of with conditionally branching code inside a single view function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c3be719804e367e8aea431959dce605a3f6cb0b" translate="yes" xml:space="preserve">
          <source>At present, the only hint that will be provided is &lt;code&gt;instance&lt;/code&gt;, an object instance that is related to the read or write operation that is underway. This might be the instance that is being saved, or it might be an instance that is being added in a many-to-many relation. In some cases, no instance hint will be provided at all. The router checks for the existence of an instance hint, and determine if that hint should be used to alter routing behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="829ecd1b52e49d4303ad554db77d3eafc6207a1a" translate="yes" xml:space="preserve">
          <source>At runtime, Django builds an in-memory unified catalog of literals-translations. To achieve this it looks for translations by following this algorithm regarding the order in which it examines the different file paths to load the compiled &lt;a href=&quot;index#term-message-file&quot;&gt;message files&lt;/a&gt; (&lt;code&gt;.mo&lt;/code&gt;) and the precedence of multiple translations for the same literal:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a89ebae1007e121e4006edfa5c170f6cee641b3" translate="yes" xml:space="preserve">
          <source>At that point, the template engine will notice the three &lt;a href=&quot;builtins#std:templatetag-block&quot;&gt;&lt;code&gt;block&lt;/code&gt;&lt;/a&gt; tags in &lt;code&gt;base.html&lt;/code&gt; and replace those blocks with the contents of the child template. Depending on the value of &lt;code&gt;blog_entries&lt;/code&gt;, the output might look like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77cfb22bf021959ce50588c2fc80c01976cdb6a4" translate="yes" xml:space="preserve">
          <source>At the beginning of each request, Django closes the connection if it has reached its maximum age. If your database terminates idle connections after some time, you should set &lt;a href=&quot;settings#std:setting-CONN_MAX_AGE&quot;&gt;&lt;code&gt;CONN_MAX_AGE&lt;/code&gt;&lt;/a&gt; to a lower value, so that Django doesn&amp;rsquo;t attempt to use a connection that has been terminated by the database server. (This problem may only affect very low traffic sites.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7585cf05112053b01eb73497ef6e6dfe3dfa8b5a" translate="yes" xml:space="preserve">
          <source>At the end of each request, Django closes the connection if it has reached its maximum age or if it is in an unrecoverable error state. If any database errors have occurred while processing the requests, Django checks whether the connection still works, and closes it if it doesn&amp;rsquo;t. Thus, database errors affect at most one request; if the connection becomes unusable, the next request gets a fresh connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d1991088e173e325b34bee658329e011aaa91e8" translate="yes" xml:space="preserve">
          <source>At the end of the three current slots you will find an &amp;ldquo;Add another Choice&amp;rdquo; link. If you click on it, a new slot will be added. If you want to remove the added slot, you can click on the X to the top right of the added slot. Note that you can&amp;rsquo;t remove the original three slots. This image shows an added slot:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="189124accca7c04c0f44767f105be012dfc11d09" translate="yes" xml:space="preserve">
          <source>At the heart of the contenttypes application is the &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; model, which lives at &lt;code&gt;django.contrib.contenttypes.models.ContentType&lt;/code&gt;. Instances of &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; represent and store information about the models installed in your project, and new instances of &lt;a href=&quot;#django.contrib.contenttypes.models.ContentType&quot;&gt;&lt;code&gt;ContentType&lt;/code&gt;&lt;/a&gt; are automatically created whenever new models are installed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb21848242712cb52d07267f0c869a17ef5ee284" translate="yes" xml:space="preserve">
          <source>At the heart of this system of components is Django&amp;rsquo;s &lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; class. In much the same way that a Django model describes the logical structure of an object, its behavior, and the way its parts are represented to us, a &lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; class describes a form and determines how it works and appears.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c74271cae7a8a63a2cd5fb403d3d02546e9dd5b6" translate="yes" xml:space="preserve">
          <source>At the highest level, you can serialize data like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1644e5cc2b98ba7a4722587d8f99ea04893a79ef" translate="yes" xml:space="preserve">
          <source>At the most basic level, use &lt;a href=&quot;../../ref/models/querysets#queryset-api&quot;&gt;filter and exclude&lt;/a&gt; to do filtering in the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1ca0bd847e379e96f7fd3a9732e92c9726b4d7c" translate="yes" xml:space="preserve">
          <source>At the start of each test, before &lt;code&gt;setUp()&lt;/code&gt; is run, Django will flush the database, returning the database to the state it was in directly after &lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; was called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5ea45b8b50778db88aebff1341f87e398f338dd" translate="yes" xml:space="preserve">
          <source>At this point it&amp;rsquo;s much easier to get Django to do most of this work for us.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d3d271c0b51bfb091b47dcdc7750c2825e9b7ea" translate="yes" xml:space="preserve">
          <source>At this point it&amp;rsquo;s natural to reach for a &lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; to encapsulate the information sent from the user&amp;rsquo;s browser to Django. Say also that we&amp;rsquo;re heavily invested in &lt;a href=&quot;https://en.wikipedia.org/wiki/Representational_state_transfer&quot;&gt;REST&lt;/a&gt;, so we want to use the same URL for displaying the author as for capturing the message from the user. Let&amp;rsquo;s rewrite our &lt;code&gt;AuthorDetailView&lt;/code&gt; to do that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90c41d5fe4f42710c126fb73e78fd7dfc79715aa" translate="yes" xml:space="preserve">
          <source>At this time 3D support is limited to the PostGIS and SpatiaLite backends.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba6166c252b5f3de38513da17ca78e12d2d37fbe" translate="yes" xml:space="preserve">
          <source>At worst, as you continue developing, you might find that you have some tests that are now redundant. Even that&amp;rsquo;s not a problem; in testing redundancy is a &lt;em&gt;good&lt;/em&gt; thing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9be5bc386eecce030df49a1fa6668e0b4cbebbaf" translate="yes" xml:space="preserve">
          <source>Atom feeds require a &lt;code&gt;&amp;lt;link rel=&quot;self&quot;&amp;gt;&lt;/code&gt; that defines the feed&amp;rsquo;s current location. The syndication framework populates this automatically, using the domain of the current site according to the &lt;a href=&quot;../settings#std:setting-SITE_ID&quot;&gt;&lt;code&gt;SITE_ID&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b90ff34b6a9489024350085d4eb6b735977a0a57" translate="yes" xml:space="preserve">
          <source>Atomicity is the defining property of database transactions. &lt;code&gt;atomic&lt;/code&gt; allows us to create a block of code within which the atomicity on the database is guaranteed. If the block of code is successfully completed, the changes are committed to the database. If there is an exception, the changes are rolled back.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dcbf3ddd9b69ace301044258cc096b7ab7406f4" translate="yes" xml:space="preserve">
          <source>Attribute lookup. Example: &lt;code&gt;foo.bar&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c55f8f4ff4b77e0b477555d903221859914f758b" translate="yes" xml:space="preserve">
          <source>Attribute or method lookup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6652617f2c799eb11ee727b16c5646c48af6905" translate="yes" xml:space="preserve">
          <source>Attributes</source>
          <target state="translated">Attributes</target>
        </trans-unit>
        <trans-unit id="edc8a446f5933031f7f093676869a8b07a4eb854" translate="yes" xml:space="preserve">
          <source>Attributes for fields</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c0023632c2c11e1b27921f86d99a10bac174095" translate="yes" xml:space="preserve">
          <source>Attributes for fields with relations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd6d67bb1ba246f3e978a406d1c86519dde7af4e" translate="yes" xml:space="preserve">
          <source>Attributes of &lt;code&gt;BoundField&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="993fe975317384740fde5b696d0e0475c75b8515" translate="yes" xml:space="preserve">
          <source>Attributes set by application code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0a488eccef6df802ff85932b4c6929619c28d72" translate="yes" xml:space="preserve">
          <source>Attributes set by middleware</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f04a43b920a1e48fb45a6c179cdc2084ecebf1a" translate="yes" xml:space="preserve">
          <source>Attributes without an argument are equal to attributes that equal in name and value (see the examples).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35d0f5fbca4b84a0ac3992970ff0119954a9281f" translate="yes" xml:space="preserve">
          <source>Auth</source>
          <target state="translated">Auth</target>
        </trans-unit>
        <trans-unit id="fd9c4ff0e3b6b88e4e4dc570b6c34789d2a1e482" translate="yes" xml:space="preserve">
          <source>Authenticate access to a &lt;a href=&quot;https://subversion.apache.org/&quot;&gt;Subversion&lt;/a&gt; repository against Django users with a certain permission.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6337477691f18524a224e218ab6eaa20e4031637" translate="yes" xml:space="preserve">
          <source>Authenticating against Django&amp;rsquo;s user database from Apache</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ac3a9f2d16fbe183a3d2e9a6f8ff0841176ff51" translate="yes" xml:space="preserve">
          <source>Authenticating against Django’s user database from Apache</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e97f1991db31b26ac8a9363240aa4d3ec0615f5c" translate="yes" xml:space="preserve">
          <source>Authenticating users</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed14dcd0fbc726381cb35622dd153753cdb041ca" translate="yes" xml:space="preserve">
          <source>Authentication Views</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4983997c1873796ebbede4e16561236e028f0a9" translate="yes" xml:space="preserve">
          <source>Authentication against third-parties (OAuth, for example)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c38992e4692a0d7975f058861174b5e44159613e" translate="yes" xml:space="preserve">
          <source>Authentication backends</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0da0e5cb0ab6921e6b41fbc41b1d18be2795467" translate="yes" xml:space="preserve">
          <source>Authentication data in templates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9e0ae3d7a1f59d5610b13b4e0795fe4f6eeae90" translate="yes" xml:space="preserve">
          <source>Authentication in Web requests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbf83e500df5ca166953c47d5fd41f5df535f927" translate="yes" xml:space="preserve">
          <source>Authentication in web requests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fd5affdb2596beda05dcf367629948f7af5fdac" translate="yes" xml:space="preserve">
          <source>Authentication middleware</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dfefff9469de419af848d00af520745ea8a4c6b" translate="yes" xml:space="preserve">
          <source>Authentication support is bundled as a Django contrib module in &lt;code&gt;django.contrib.auth&lt;/code&gt;. By default, the required configuration is already included in the &lt;code&gt;settings.py&lt;/code&gt; generated by &lt;a href=&quot;../../ref/django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;django-admin
startproject&lt;/code&gt;&lt;/a&gt;, these consist of two items listed in your &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28abf6b352445a849a8ed1ac4abaedc6f68a13c8" translate="yes" xml:space="preserve">
          <source>Authentication using &lt;code&gt;REMOTE_USER&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da5b697f1b93b20c027315397a08a6d47e1b7a2a" translate="yes" xml:space="preserve">
          <source>Authentication using REMOTE_USER</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cb23f99177d8d154483c5dea174d94d6eb5ca7b" translate="yes" xml:space="preserve">
          <source>Authentication with &lt;code&gt;mod_wsgi&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="212ec648f9cab319ad23c113e8368944db9a13b4" translate="yes" xml:space="preserve">
          <source>Authorization for anonymous users</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deebdf5e7d673f1085d509c1b58594d399c3632d" translate="yes" xml:space="preserve">
          <source>Authorization for inactive users</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3c77cf7e085536fe4f642640a0a0f676bb2d395" translate="yes" xml:space="preserve">
          <source>Authorization with &lt;code&gt;mod_wsgi&lt;/code&gt; and Django groups</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5d0ea80bfa024e6d10cf0c5e2149c9e5030bdd7" translate="yes" xml:space="preserve">
          <source>Authors with multiple entries appear multiple times and authors without any entries have &lt;code&gt;None&lt;/code&gt; for the entry headline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55f9e784343673164bbb195a41119d309f4c90e6" translate="yes" xml:space="preserve">
          <source>Auto-escaping considerations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ade49e65aa2d499a314989d73b7a5087ffe5df44" translate="yes" xml:space="preserve">
          <source>Auto-generate the models</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="960a275624ec1eca722f7e66870b2a9f99cfac4d" translate="yes" xml:space="preserve">
          <source>Auto-incrementing primary keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8453dfc709bd717007fa35256ab12791696925f8" translate="yes" xml:space="preserve">
          <source>Autocommit</source>
          <target state="translated">Autocommit</target>
        </trans-unit>
        <trans-unit id="84cf5f8413204d40a8f95216ba5d5526d11ffeaf" translate="yes" xml:space="preserve">
          <source>Autocommit is initially turned on. If you turn it off, it&amp;rsquo;s your responsibility to restore it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a943f8638c8dcc1ad157c95e08768cc1250e25d7" translate="yes" xml:space="preserve">
          <source>Automated testing is an extremely useful bug-killing tool for the modern Web developer. You can use a collection of tests &amp;ndash; a &lt;strong&gt;test suite&lt;/strong&gt; &amp;ndash; to solve, or avoid, a number of problems:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27e49177e9807d73541f916f6c05979f97b85ba4" translate="yes" xml:space="preserve">
          <source>Automatic HTML escaping</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61fa92d56d11b7919bb8da95ce33a7ad7110c3eb" translate="yes" xml:space="preserve">
          <source>Automatic Spatial Transformations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0ca671cba6e070d7b0566fe1ba785b6645d5a0c" translate="yes" xml:space="preserve">
          <source>Automatic database routing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2daa6540a46502f028c3d359454675fd27347edd" translate="yes" xml:space="preserve">
          <source>Automatic primary key fields</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d8ad18befa397a93cf4e3a8b465b236689355f7" translate="yes" xml:space="preserve">
          <source>Automatic reloading of &lt;a href=&quot;../ref/django-admin#django-admin-runserver&quot;&gt;&lt;code&gt;runserver&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1394ea568cf8a61e49123ff400b9295452be4554" translate="yes" xml:space="preserve">
          <source>Automatic typecasting can cause unexpected results</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a5b7c843454a5b2b1e845bfbf336ce8a6a2428f" translate="yes" xml:space="preserve">
          <source>Automatically generate a mapping dictionary for use with &lt;a href=&quot;layermapping#django.contrib.gis.utils.LayerMapping&quot;&gt;&lt;code&gt;LayerMapping&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="348a1bbe32f1a6d151804e3d0e2a998d171cfd50" translate="yes" xml:space="preserve">
          <source>Automatically set the field to now every time the object is saved. Useful for &amp;ldquo;last-modified&amp;rdquo; timestamps. Note that the current date is &lt;em&gt;always&lt;/em&gt; used; it&amp;rsquo;s not just a default value that you can override.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1eb3738429a66a56ba42aade58f3873fec71c49" translate="yes" xml:space="preserve">
          <source>Automatically set the field to now when the object is first created. Useful for creation of timestamps. Note that the current date is &lt;em&gt;always&lt;/em&gt; used; it&amp;rsquo;s not just a default value that you can override. So even if you set a value for this field when creating the object, it will be ignored. If you want to be able to modify this field, set the following instead of &lt;code&gt;auto_now_add=True&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c56f5d1cbaa3e3798d943d9e0c7e14536b2ace4" translate="yes" xml:space="preserve">
          <source>Available &lt;code&gt;Meta&lt;/code&gt; options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="749dcc6931e997fce0e6000d53dab329edee9e45" translate="yes" xml:space="preserve">
          <source>Available authentication backends</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8022dbeab0ead822466c6e95e26e7dc7892483ad" translate="yes" xml:space="preserve">
          <source>Available commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="005b1caaecf7a5e7e239831f844db54f7fb44385" translate="yes" xml:space="preserve">
          <source>Available format strings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66149627d8cbb08e48e77e67a8c900cf6f8e757f" translate="yes" xml:space="preserve">
          <source>Available formats are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9329e10e25582241a54c6a10908254870af37224" translate="yes" xml:space="preserve">
          <source>Available middleware</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="277a0831ffa6dd7df99804a3bbb855b456ec1f81" translate="yes" xml:space="preserve">
          <source>Available settings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feb8fbc77cb1d6f4edc7d323a43667ba938321aa" translate="yes" xml:space="preserve">
          <source>Available values for &lt;code&gt;allowed_permissions&lt;/code&gt; and the corresponding method checks are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e196c09ba87bfb3b1ca68e7701b13e4fdceeae7" translate="yes" xml:space="preserve">
          <source>Avoid anything more complex</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f080a09173571088fa9d223a4573d550fffb2f30" translate="yes" xml:space="preserve">
          <source>Avoid catching exceptions inside &lt;code&gt;atomic&lt;/code&gt;!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e0e214b2855516f39cd3567c046d6d06b5c7dad" translate="yes" xml:space="preserve">
          <source>Avoid using &lt;a href=&quot;#django.db.models.Field.null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; on string-based fields such as &lt;a href=&quot;#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.db.models.TextField&quot;&gt;&lt;code&gt;TextField&lt;/code&gt;&lt;/a&gt;. If a string-based field has &lt;code&gt;null=True&lt;/code&gt;, that means it has two possible values for &amp;ldquo;no data&amp;rdquo;: &lt;code&gt;NULL&lt;/code&gt;, and the empty string. In most cases, it&amp;rsquo;s redundant to have two possible values for &amp;ldquo;no data;&amp;rdquo; the Django convention is to use the empty string, not &lt;code&gt;NULL&lt;/code&gt;. One exception is when a &lt;a href=&quot;#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt; has both &lt;code&gt;unique=True&lt;/code&gt; and &lt;code&gt;blank=True&lt;/code&gt; set. In this situation, &lt;code&gt;null=True&lt;/code&gt; is required to avoid unique constraint violations when saving multiple objects with blank values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2c4addd555a2578588f134a04c414a8bfc5cd8d" translate="yes" xml:space="preserve">
          <source>Avoid using the &lt;code&gt;filter&lt;/code&gt; argument with a single annotation or aggregation. It&amp;rsquo;s more efficient to use &lt;code&gt;QuerySet.filter()&lt;/code&gt; to exclude rows. The aggregation &lt;code&gt;filter&lt;/code&gt; argument is only useful when using two or more aggregations over the same relations with different conditionals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94d7b19f9decbb77a74552061d2a7e28ff16c911" translate="yes" xml:space="preserve">
          <source>Avoiding SQL injection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9410dc97d2c72692ef59e83fd28566db94c67883" translate="yes" xml:space="preserve">
          <source>Avoiding XSS vulnerabilities when reusing built-in filters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65a8d185f4de4fa2986100dd5bc5fd9f71b4dd53" translate="yes" xml:space="preserve">
          <source>Avoiding race conditions using &lt;code&gt;F()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae4f281df5a5d0ff3cad6371f76d5c29b6d953ec" translate="yes" xml:space="preserve">
          <source>B</source>
          <target state="translated">B</target>
        </trans-unit>
        <trans-unit id="d3995b2b37b0a9d72d4c1f4df49540d8b2f1d7ac" translate="yes" xml:space="preserve">
          <source>B, C</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49d16c123e63cae0aa2ecdd12be80bdb56763577" translate="yes" xml:space="preserve">
          <source>Babel provides similar features to &lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt;&lt;code&gt;makemessages&lt;/code&gt;&lt;/a&gt;, can replace it in general, and doesn&amp;rsquo;t depend on &lt;code&gt;gettext&lt;/code&gt;. For more information, read its documentation about &lt;a href=&quot;http://babel.pocoo.org/en/latest/messages.html&quot;&gt;working with message catalogs&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="022a7f167d95521de1acf21e27e11c487396593f" translate="yes" xml:space="preserve">
          <source>Back to the &lt;code&gt;detail()&lt;/code&gt; view for our poll application. Given the context variable &lt;code&gt;question&lt;/code&gt;, here&amp;rsquo;s what the &lt;code&gt;polls/detail.html&lt;/code&gt; template might look like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e758ca64563fdd62965a2b97b76d555b1a70d938" translate="yes" xml:space="preserve">
          <source>Backend</source>
          <target state="translated">Backend</target>
        </trans-unit>
        <trans-unit id="907a75668b7e03c4659947b3193d65847d1a8f35" translate="yes" xml:space="preserve">
          <source>Backend Support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64dd60fe1a049fe6db3eb1369dec2e42bf428e21" translate="yes" xml:space="preserve">
          <source>Background</source>
          <target state="translated">Background</target>
        </trans-unit>
        <trans-unit id="138b85f239e58f9bda1316136aa82c90e7878d7f" translate="yes" xml:space="preserve">
          <source>Background theory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fd78925dba59eef91afba0cdabe923520e5ee69" translate="yes" xml:space="preserve">
          <source>Backwards compatibility</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1ff57d696aa3ec09bd76c88944e1a7097ee37a3" translate="yes" xml:space="preserve">
          <source>Bad:</source>
          <target state="translated">Bad:</target>
        </trans-unit>
        <trans-unit id="02fb997b61900c1aeca6956107b15ab95765ea07" translate="yes" xml:space="preserve">
          <source>Bad: &lt;code&gt;'example.com/foo/bar/'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc163b02e6955ecbd0ac6fa7a6c224b77e0f614b" translate="yes" xml:space="preserve">
          <source>Bad: &lt;code&gt;'https://example.com/foo/bar/'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5400b30a122881d47fdeb120840f94c91748df48" translate="yes" xml:space="preserve">
          <source>Base class for all syndication feeds. Subclasses should provide write().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a98533d4533777678a2826b595332b97d370e7d" translate="yes" xml:space="preserve">
          <source>Base class for form range fields.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="694691a2cdd7f3264022193ea43da2dc86d47851" translate="yes" xml:space="preserve">
          <source>Base class for model range fields.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33498e9763de95f98078b83846fb61dc566837f8" translate="yes" xml:space="preserve">
          <source>Base class restrictions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1327df53c1a32ce9abfbbd3212f5272b0617455c" translate="yes" xml:space="preserve">
          <source>Base class-based views can be thought of as &lt;em&gt;parent&lt;/em&gt; views, which can be used by themselves or inherited from. They may not provide all the capabilities required for projects, in which case there are Mixins which extend what base views can do.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22ad5eb083aa4a8059d54f5bd8ea8049a7a5258c" translate="yes" xml:space="preserve">
          <source>Base directory to where GeoIP data is located or the full path to where the city or country data files (&lt;code&gt;.mmdb&lt;/code&gt;) are located. Assumes that both the city and country datasets are located in this directory; overrides the &lt;a href=&quot;#std:setting-GEOIP_PATH&quot;&gt;&lt;code&gt;GEOIP_PATH&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49f6341ab3962fe35e78e061dffd867a40acb8d9" translate="yes" xml:space="preserve">
          <source>Base managers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27eb3e111fe45536ce06e4e05df628d6121d667c" translate="yes" xml:space="preserve">
          <source>Base managers aren&amp;rsquo;t used when querying on related models. For example, if the &lt;code&gt;Question&lt;/code&gt; model &lt;a href=&quot;../../intro/tutorial02#creating-models&quot;&gt;from the tutorial&lt;/a&gt; had a &lt;code&gt;deleted&lt;/code&gt; field and a base manager that filters out instances with &lt;code&gt;deleted=True&lt;/code&gt;, a queryset like &lt;code&gt;Choice.objects.filter(question__name__startswith='What')&lt;/code&gt; would include choices related to deleted questions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5ed205aa5fd703bcc3d50fb6437d7138a8d1c26" translate="yes" xml:space="preserve">
          <source>Base views</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13b83badb163e89e1591cbc1c77011d952c1640b" translate="yes" xml:space="preserve">
          <source>Base vs Generic views</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0ce6714ceb84d23825af929df33051d80afd8c9" translate="yes" xml:space="preserve">
          <source>Base widget classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc1e70bb062910be7a643ca6e26ad21dd094cf82" translate="yes" xml:space="preserve">
          <source>Base widget classes &lt;a href=&quot;#django.forms.Widget&quot;&gt;&lt;code&gt;Widget&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.forms.MultiWidget&quot;&gt;&lt;code&gt;MultiWidget&lt;/code&gt;&lt;/a&gt; are subclassed by all the &lt;a href=&quot;#built-in-widgets&quot;&gt;built-in widgets&lt;/a&gt; and may serve as a foundation for custom widgets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="023ccd9b632124d69f29133e19fa531effbe1c65" translate="yes" xml:space="preserve">
          <source>Based on &lt;a href=&quot;../../forms/fields#django.forms.DateField&quot;&gt;&lt;code&gt;DateField&lt;/code&gt;&lt;/a&gt; and translates its input into &lt;a href=&quot;https://www.psycopg.org/docs/extras.html#psycopg2.extras.DateRange&quot;&gt;&lt;code&gt;DateRange&lt;/code&gt;&lt;/a&gt;. Default for &lt;a href=&quot;fields#django.contrib.postgres.fields.DateRangeField&quot;&gt;&lt;code&gt;DateRangeField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91cf6094cf7e99756e3d52b512c1ed523b74be07" translate="yes" xml:space="preserve">
          <source>Based on &lt;a href=&quot;../../forms/fields#django.forms.DateTimeField&quot;&gt;&lt;code&gt;DateTimeField&lt;/code&gt;&lt;/a&gt; and translates its input into &lt;a href=&quot;https://www.psycopg.org/docs/extras.html#psycopg2.extras.DateTimeTZRange&quot;&gt;&lt;code&gt;DateTimeTZRange&lt;/code&gt;&lt;/a&gt;. Default for &lt;a href=&quot;fields#django.contrib.postgres.fields.DateTimeRangeField&quot;&gt;&lt;code&gt;DateTimeRangeField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d4dac139c2acb993f0cfb3295d29cf679450b8b" translate="yes" xml:space="preserve">
          <source>Based on &lt;a href=&quot;../../forms/fields#django.forms.DecimalField&quot;&gt;&lt;code&gt;DecimalField&lt;/code&gt;&lt;/a&gt; and translates its input into &lt;a href=&quot;https://www.psycopg.org/docs/extras.html#psycopg2.extras.NumericRange&quot;&gt;&lt;code&gt;NumericRange&lt;/code&gt;&lt;/a&gt;. Default for &lt;a href=&quot;fields#django.contrib.postgres.fields.DecimalRangeField&quot;&gt;&lt;code&gt;DecimalRangeField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2d5fc68b0e87ce589e5a7786b34368ef0034a1e" translate="yes" xml:space="preserve">
          <source>Based on &lt;a href=&quot;../../forms/fields#django.forms.FloatField&quot;&gt;&lt;code&gt;FloatField&lt;/code&gt;&lt;/a&gt; and translates its input into &lt;a href=&quot;https://www.psycopg.org/docs/extras.html#psycopg2.extras.NumericRange&quot;&gt;&lt;code&gt;NumericRange&lt;/code&gt;&lt;/a&gt;. Default for &lt;a href=&quot;fields#django.contrib.postgres.fields.FloatRangeField&quot;&gt;&lt;code&gt;FloatRangeField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="593a52dc3c5e2722090dcbfa0ed8460ebad0bdd8" translate="yes" xml:space="preserve">
          <source>Based on &lt;a href=&quot;../../forms/fields#django.forms.IntegerField&quot;&gt;&lt;code&gt;IntegerField&lt;/code&gt;&lt;/a&gt; and translates its input into &lt;a href=&quot;https://www.psycopg.org/docs/extras.html#psycopg2.extras.NumericRange&quot;&gt;&lt;code&gt;NumericRange&lt;/code&gt;&lt;/a&gt;. Default for &lt;a href=&quot;fields#django.contrib.postgres.fields.IntegerRangeField&quot;&gt;&lt;code&gt;IntegerRangeField&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;fields#django.contrib.postgres.fields.BigIntegerRangeField&quot;&gt;&lt;code&gt;BigIntegerRangeField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e63f51f7e5afad0c831b1acc1916d16e437f5b4a" translate="yes" xml:space="preserve">
          <source>Bash completion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36c41688b96ebca8546b978b079367e1aa359e74" translate="yes" xml:space="preserve">
          <source>Basic configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c8d5fdc5db9950cf7bea592d196bad4f803b3fb" translate="yes" xml:space="preserve">
          <source>Basic examples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5fbde77a176de1b8104d736377f8f9f6c7c45c5" translate="yes" xml:space="preserve">
          <source>Basic file uploads</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c171ef65e06890e2659b070f8e8e3e962cb28bc" translate="yes" xml:space="preserve">
          <source>Basic forms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5f25c152bb6bc0e7fa0c6d19f0fd9ee0aaac6f7" translate="yes" xml:space="preserve">
          <source>Basic lookups keyword arguments take the form &lt;code&gt;field__lookuptype=value&lt;/code&gt;. (That&amp;rsquo;s a double-underscore). For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5f6d1eff70850fa7cf94c4c89bc731b91ecc609" translate="yes" xml:space="preserve">
          <source>Basic testing strategies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb3a8802da5b3164771a468d78ff7995a249f08a" translate="yes" xml:space="preserve">
          <source>Basic usage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="722f99933cbd1a6d2ea10a0e75995a9b288cb431" translate="yes" xml:space="preserve">
          <source>Basically, the deployment of a GeoDjango application is not different from the deployment of a normal Django application. Please consult Django&amp;rsquo;s &lt;a href=&quot;../../../howto/deployment/index&quot;&gt;deployment documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fcebeefad3cdbbf8733aa928160dec7dc90c1a1" translate="yes" xml:space="preserve">
          <source>Basics</source>
          <target state="translated">Basics</target>
        </trans-unit>
        <trans-unit id="517dbf0b4b497174beda382d4dbff241d4173d30" translate="yes" xml:space="preserve">
          <source>Be aware that files created in this way are not automatically closed. The following approach may be used to close files automatically:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ec8a16f0562ac16bec7f7eba4ff2610dedf37d0" translate="yes" xml:space="preserve">
          <source>Be aware that if all the passwords in your database aren&amp;rsquo;t encoded in the default hasher&amp;rsquo;s algorithm, you may be vulnerable to a user enumeration timing attack due to a difference between the duration of a login request for a user with a password encoded in a non-default algorithm and the duration of a login request for a nonexistent user (which runs the default hasher). You may be able to mitigate this by &lt;a href=&quot;#wrapping-password-hashers&quot;&gt;upgrading older password hashes&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="894fadfef402ddaec33f2601f2a9a2e3348e30d3" translate="yes" xml:space="preserve">
          <source>Be aware that not all Django output can be passed unmodified to &lt;a href=&quot;https://docs.python.org/3/library/json.html#module-json&quot;&gt;&lt;code&gt;json&lt;/code&gt;&lt;/a&gt;. For example, if you have some custom type in an object to be serialized, you&amp;rsquo;ll have to write a custom &lt;a href=&quot;https://docs.python.org/3/library/json.html#module-json&quot;&gt;&lt;code&gt;json&lt;/code&gt;&lt;/a&gt; encoder for it. Something like this will work:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77345e4d4278d00200e1ee0b3d2293aa945623d3" translate="yes" xml:space="preserve">
          <source>Be aware that not all options set in the &lt;a href=&quot;settings#std:setting-OPTIONS&quot;&gt;&lt;code&gt;OPTIONS&lt;/code&gt;&lt;/a&gt; part of your database configuration in &lt;a href=&quot;settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt; are passed to the command-line client, e.g. &lt;code&gt;'isolation_level'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79e3498394e017162e5dbcbada25f0d715476bfd" translate="yes" xml:space="preserve">
          <source>Be aware that the &lt;code&gt;update()&lt;/code&gt; method is converted directly to an SQL statement. It is a bulk operation for direct updates. It doesn&amp;rsquo;t run any &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; methods on your models, or emit the &lt;code&gt;pre_save&lt;/code&gt; or &lt;code&gt;post_save&lt;/code&gt; signals (which are a consequence of calling &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt;), or honor the &lt;a href=&quot;../../ref/models/fields#django.db.models.DateField.auto_now&quot;&gt;&lt;code&gt;auto_now&lt;/code&gt;&lt;/a&gt; field option. If you want to save every item in a &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; and make sure that the &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; method is called on each instance, you don&amp;rsquo;t need any special function to handle that. Loop over them and call &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e728258ab818b7ff5c26154c9afe0d25d494d28" translate="yes" xml:space="preserve">
          <source>Be aware that this migration will take on the order of several minutes for several thousand users, depending on the speed of your hardware.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf4d63f2b9cfcfa220a03e6a26d997aa9e14d6d2" translate="yes" xml:space="preserve">
          <source>Be aware that this particular setup disables authentication with the default &lt;code&gt;ModelBackend&lt;/code&gt;. This means that if the &lt;code&gt;REMOTE_USER&lt;/code&gt; value is not set then the user is unable to log in, even using Django&amp;rsquo;s admin interface. Adding &lt;code&gt;'django.contrib.auth.backends.ModelBackend'&lt;/code&gt; to the &lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt; list will use &lt;code&gt;ModelBackend&lt;/code&gt; as a fallback if &lt;code&gt;REMOTE_USER&lt;/code&gt; is absent, which will solve these issues.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c45bcc820afa9ec7f09ab5e262d83093e9f5054" translate="yes" xml:space="preserve">
          <source>Be careful not to modify any objects created in &lt;code&gt;setUpTestData()&lt;/code&gt; in your test methods. Modifications to in-memory objects from setup work done at the class level will persist between test methods. If you do need to modify them, you could reload them in the &lt;code&gt;setUp()&lt;/code&gt; method with &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.refresh_from_db&quot;&gt;&lt;code&gt;refresh_from_db()&lt;/code&gt;&lt;/a&gt;, for example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b6c803cd4cd7fb715766d27118b3711aba748cc" translate="yes" xml:space="preserve">
          <source>Be careful when deciding if your filter really does leave safe strings as safe. If you&amp;rsquo;re &lt;em&gt;removing&lt;/em&gt; characters, you might inadvertently leave unbalanced HTML tags or entities in the result. For example, removing a &lt;code&gt;&amp;gt;&lt;/code&gt; from the input might turn &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; into &lt;code&gt;&amp;lt;a&lt;/code&gt;, which would need to be escaped on output to avoid causing problems. Similarly, removing a semicolon (&lt;code&gt;;&lt;/code&gt;) can turn &lt;code&gt;&amp;amp;amp;&lt;/code&gt; into &lt;code&gt;&amp;amp;amp&lt;/code&gt;, which is no longer a valid entity and thus needs further escaping. Most cases won&amp;rsquo;t be nearly this tricky, but keep an eye out for any problems like that when reviewing your code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eba0553e37be2c52b9440df03c21c723bfad622f" translate="yes" xml:space="preserve">
          <source>Be careful when reading template code - the template system does not allow use of parentheses, but will call callables automatically, hiding the above distinction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69691257ffe84235eced0129d9f45dba26cd9e72" translate="yes" xml:space="preserve">
          <source>Be careful when using the &lt;code&gt;tables&lt;/code&gt; parameter if you&amp;rsquo;re specifying tables that are already used in the query. When you add extra tables via the &lt;code&gt;tables&lt;/code&gt; parameter, Django assumes you want that table included an extra time, if it is already included. That creates a problem, since the table name will then be given an alias. If a table appears multiple times in an SQL statement, the second and subsequent occurrences must use aliases so the database can tell them apart. If you&amp;rsquo;re referring to the extra table you added in the extra &lt;code&gt;where&lt;/code&gt; parameter this is going to cause errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bccc52da60358d2d264adb4897908ef269c5f82" translate="yes" xml:space="preserve">
          <source>Be careful when you override settings, especially when the default value is a non-empty list or dictionary, such as &lt;a href=&quot;#std:setting-STATICFILES_FINDERS&quot;&gt;&lt;code&gt;STATICFILES_FINDERS&lt;/code&gt;&lt;/a&gt;. Make sure you keep the components required by the features of Django you wish to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd1ed2ef21e62a68037633065cc360f961c4e002" translate="yes" xml:space="preserve">
          <source>Be careful with &lt;code&gt;related_name&lt;/code&gt; and &lt;code&gt;related_query_name&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5bdad25aa14bf675ac1781f25c4b227f57b0179" translate="yes" xml:space="preserve">
          <source>Be careful with the order of decorators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d3f850c6cb2bd3b2b49588b50efb20bdb7e6cf3" translate="yes" xml:space="preserve">
          <source>Be careful with this attribute in subclasses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bd60f39da97cb517c583ecc7dc05525327c66e5" translate="yes" xml:space="preserve">
          <source>Be careful with your own custom properties - it is up to you to implement caching when required, for example using the &lt;a href=&quot;../../ref/utils#django.utils.functional.cached_property&quot;&gt;&lt;code&gt;cached_property&lt;/code&gt;&lt;/a&gt; decorator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cae78767c33d88536b3f71df5c5467f045e15884" translate="yes" xml:space="preserve">
          <source>Be careful, though. You need to do more than just mark the output as safe. You need to ensure it really &lt;em&gt;is&lt;/em&gt; safe, and what you do depends on whether auto-escaping is in effect. The idea is to write filters that can operate in templates where auto-escaping is either on or off in order to make things easier for your template authors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9843c5e6a04319a8b29711d8e625e85b3a246449" translate="yes" xml:space="preserve">
          <source>Be cautious about using nested queries and understand your database server&amp;rsquo;s performance characteristics (if in doubt, benchmark!). Some database backends, most notably MySQL, don&amp;rsquo;t optimize nested queries very well. It is more efficient, in those cases, to extract a list of values and then pass that into the second query. That is, execute two queries instead of one:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfeddad7d119eee7c62f567d08fe9d6b52683e9c" translate="yes" xml:space="preserve">
          <source>Be cautious when ordering by fields in related models if you are also using &lt;a href=&quot;#django.db.models.query.QuerySet.distinct&quot;&gt;&lt;code&gt;distinct()&lt;/code&gt;&lt;/a&gt;. See the note in &lt;a href=&quot;#django.db.models.query.QuerySet.distinct&quot;&gt;&lt;code&gt;distinct()&lt;/code&gt;&lt;/a&gt; for an explanation of how related model ordering can change the expected results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1016c4e42e4fadf15e517758fc4068d8d542bdce" translate="yes" xml:space="preserve">
          <source>Be cautious when updating this setting on a production site. If you update this setting to enable cross-domain cookies on a site that previously used standard domain cookies, existing user cookies that have the old domain will not be updated. This will result in site users being unable to switch the language as long as these cookies persist. The only safe and reliable option to perform the switch is to change the language cookie name permanently (via the &lt;a href=&quot;#std:setting-LANGUAGE_COOKIE_NAME&quot;&gt;&lt;code&gt;LANGUAGE_COOKIE_NAME&lt;/code&gt;&lt;/a&gt; setting) and to add a middleware that copies the value from the old cookie to a new one and then deletes the old one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="917d17d58fe2ef61dc24fb00cc8fb801f576cedc" translate="yes" xml:space="preserve">
          <source>Be cautious when updating this setting on a production site. If you update this setting to enable cross-domain cookies on a site that previously used standard domain cookies, existing user cookies will be set to the old domain. This may result in them being unable to log in as long as these cookies persist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61b4a3d60b793cba756caf46f3fdd82b2777e45d" translate="yes" xml:space="preserve">
          <source>Be cautious when updating this setting on a production site. If you update this setting to use a deeper path than it previously used, existing user cookies that have the old path will not be updated. This will result in site users being unable to switch the language as long as these cookies persist. The only safe and reliable option to perform the switch is to change the language cookie name permanently (via the &lt;a href=&quot;#std:setting-LANGUAGE_COOKIE_NAME&quot;&gt;&lt;code&gt;LANGUAGE_COOKIE_NAME&lt;/code&gt;&lt;/a&gt; setting), and to add a middleware that copies the value from the old cookie to a new one and then deletes the one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="040e8be262282dccbf78f864cd1c6985021f4421" translate="yes" xml:space="preserve">
          <source>Be sure to account for Python&amp;rsquo;s behavior if an exception is raised during &lt;code&gt;setUpClass()&lt;/code&gt;. If that happens, neither the tests in the class nor &lt;code&gt;tearDownClass()&lt;/code&gt; are run. In the case of &lt;a href=&quot;#django.test.TestCase&quot;&gt;&lt;code&gt;django.test.TestCase&lt;/code&gt;&lt;/a&gt;, this will leak the transaction created in &lt;code&gt;super()&lt;/code&gt; which results in various symptoms including a segmentation fault on some platforms (reported on macOS). If you want to intentionally raise an exception such as &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.SkipTest&quot;&gt;&lt;code&gt;unittest.SkipTest&lt;/code&gt;&lt;/a&gt; in &lt;code&gt;setUpClass()&lt;/code&gt;, be sure to do it before calling &lt;code&gt;super()&lt;/code&gt; to avoid this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef293d4c285cf086b316ae959351a0cccfa79be9" translate="yes" xml:space="preserve">
          <source>Be thoughtful about how you allow users to manage permissions. If you give a non-superuser the ability to edit users, this is ultimately the same as giving them superuser status because they will be able to elevate permissions of users including themselves!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beddae976d47ce08353a7d3f7a198e04d440ec69" translate="yes" xml:space="preserve">
          <source>Be very careful if using a &lt;code&gt;RemoteUserMiddleware&lt;/code&gt; subclass with a custom HTTP header. You must be sure that your front-end web server always sets or strips that header based on the appropriate authentication checks, never permitting an end-user to submit a fake (or &amp;ldquo;spoofed&amp;rdquo;) header value. Since the HTTP headers &lt;code&gt;X-Auth-User&lt;/code&gt; and &lt;code&gt;X-Auth_User&lt;/code&gt; (for example) both normalize to the &lt;code&gt;HTTP_X_AUTH_USER&lt;/code&gt; key in &lt;code&gt;request.META&lt;/code&gt;, you must also check that your web server doesn&amp;rsquo;t allow a spoofed header using underscores in place of dashes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67405c085c36ff7bf9e47c05c6ca9a8add17cdbf" translate="yes" xml:space="preserve">
          <source>Be very careful with marking views with the &lt;code&gt;csrf_exempt&lt;/code&gt; decorator unless it is absolutely necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="463ef2f89f1e249a7b9be4618cd7fcd06a48a5af" translate="yes" xml:space="preserve">
          <source>Bear in mind that when reversed, this is actually adding a field to a model. The operation is reversible (apart from any data loss, which of course is irreversible) if the field is nullable or if it has a default value that can be used to populate the recreated column. If the field is not nullable and does not have a default value, the operation is irreversible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="042ea8e5fddce26815628fa17044ba5d24eb96ab" translate="yes" xml:space="preserve">
          <source>Because 404 errors are by far the most common HTTP error, there&amp;rsquo;s an easier way to handle those errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5c2d2c9e70508835a73ca5b22f9ada7d96afd08" translate="yes" xml:space="preserve">
          <source>Because &lt;a href=&quot;fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; attributes and reverse relations can have multiple related rows, including these can have a multiplier effect on the size of your result set. This will be especially pronounced if you include multiple such fields in your &lt;code&gt;values()&lt;/code&gt; query, in which case all possible combinations will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="732623fe54e2e13e287f4b043b432d7f9c00f9ec" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;order_with_respect_to&lt;/code&gt; adds a new database column, be sure to make and apply the appropriate migrations if you add or change &lt;code&gt;order_with_respect_to&lt;/code&gt; after your initial &lt;a href=&quot;../django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3f6262139a989927fabc6f1997f91059c06e8ee" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;{% regroup %}&lt;/code&gt; produces &lt;a href=&quot;https://docs.python.org/3/library/collections.html#collections.namedtuple&quot;&gt;&lt;code&gt;namedtuple()&lt;/code&gt;&lt;/a&gt; objects, you can also write the previous example as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3c27e564d0e5f570e887ae09cb356cf5b1a7d16" translate="yes" xml:space="preserve">
          <source>Because Django intentionally limits the amount of logic processing available in the template language, it is not possible to pass arguments to method calls accessed from within templates. Data should be calculated in views, then passed to templates for display.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc9cbe0ffd1fa8524ae9029257a68071ccaddc76" translate="yes" xml:space="preserve">
          <source>Because Django was developed in a fast-paced newsroom environment, it was designed to make common Web-development tasks fast and easy. Here&amp;rsquo;s an informal overview of how to write a database-driven Web app with Django.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7073f6e15877a9af2f4c64844b792af6a94b35a7" translate="yes" xml:space="preserve">
          <source>Because Django&amp;rsquo;s URL resolver expects to send the request and associated arguments to a callable function, not a class, class-based views have an &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View.as_view&quot;&gt;&lt;code&gt;as_view()&lt;/code&gt;&lt;/a&gt; class method which returns a function that can be called when a request arrives for a URL matching the associated pattern. The function creates an instance of the class, calls &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View.setup&quot;&gt;&lt;code&gt;setup()&lt;/code&gt;&lt;/a&gt; to initialize its attributes, and then calls its &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View.dispatch&quot;&gt;&lt;code&gt;dispatch()&lt;/code&gt;&lt;/a&gt; method. &lt;code&gt;dispatch&lt;/code&gt; looks at the request to determine whether it is a &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, etc, and relays the request to a matching method if one is defined, or raises &lt;a href=&quot;../../ref/request-response#django.http.HttpResponseNotAllowed&quot;&gt;&lt;code&gt;HttpResponseNotAllowed&lt;/code&gt;&lt;/a&gt; if not:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4114dc9d50278d2b36039acfff453d545e54801" translate="yes" xml:space="preserve">
          <source>Because GeoDjango has its own Python interface, the preceding instructions do not build GDAL&amp;rsquo;s own Python bindings. The bindings may be built by adding the &lt;code&gt;--with-python&lt;/code&gt; flag when running &lt;code&gt;configure&lt;/code&gt;. See &lt;a href=&quot;https://trac.osgeo.org/gdal/wiki/GdalOgrInPython&quot;&gt;GDAL/OGR In Python&lt;/a&gt; for more information on GDAL&amp;rsquo;s bindings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eec5abbbc5a08b4bc4c34df5374fe6e6dfcdca67" translate="yes" xml:space="preserve">
          <source>Because GeoDjango is included with Django, please refer to Django&amp;rsquo;s &lt;a href=&quot;../../../../topics/install#installing-official-release&quot;&gt;installation instructions&lt;/a&gt; for details on how to install.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dbdfdb0d36449d54e4c454f3616ebdb6e2b91d5" translate="yes" xml:space="preserve">
          <source>Because GeoDjango takes advantage of the latest in the open source geospatial software technology, recent versions of the libraries are necessary. If binary packages aren&amp;rsquo;t available for your platform, installation from source may be required. When compiling the libraries from source, please follow the directions closely, especially if you&amp;rsquo;re a beginner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba346e04a85337ab290c6223a629db6764aa3818" translate="yes" xml:space="preserve">
          <source>Because a settings file contains sensitive information, such as the database password, you should make every attempt to limit access to it. For example, change its file permissions so that only you and your Web server&amp;rsquo;s user can read it. This is especially important in a shared-hosting environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0191f795bb5a539693858d5221eca789bfb06b55" translate="yes" xml:space="preserve">
          <source>Because a settings file is a Python module, the following apply:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa97793ffa48e7799626ae1a3b81b880bdd406f6" translate="yes" xml:space="preserve">
          <source>Because all strings are returned from the database as &lt;code&gt;str&lt;/code&gt; objects, model fields that are character based (CharField, TextField, URLField, etc.) will contain Unicode values when Django retrieves data from the database. This is &lt;em&gt;always&lt;/em&gt; the case, even if the data could fit into an ASCII bytestring.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27968fb82192cc6e4d325a0225a156067b99db0c" translate="yes" xml:space="preserve">
          <source>Because an enumeration with a concrete data type requires all values to match the type, overriding the &lt;a href=&quot;#field-choices-blank-label&quot;&gt;blank label&lt;/a&gt; cannot be achieved by creating a member with a value of &lt;code&gt;None&lt;/code&gt;. Instead, set the &lt;code&gt;__empty__&lt;/code&gt; attribute on the class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebc3024b77f785efa1d4b0fbb10d4ee925ba8acb" translate="yes" xml:space="preserve">
          <source>Because auto-escaping is turned off in the base template, it will also be turned off in the child template, resulting in the following rendered HTML when the &lt;code&gt;greeting&lt;/code&gt; variable contains the string &lt;code&gt;&amp;lt;b&amp;gt;Hello!&amp;lt;/b&amp;gt;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa7b97b187e5272ee175067b7632a5cafe8eec2c" translate="yes" xml:space="preserve">
          <source>Because dictionary lookup happens first, that behavior kicks in and provides a default value instead of using the intended &lt;code&gt;.items()&lt;/code&gt; method. In this case, consider converting to a dictionary first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da72b29a6853c54fa30cdfd4198cbc4c6dd11319" translate="yes" xml:space="preserve">
          <source>Because even seemingly-secure web server configurations are susceptible to fake &lt;code&gt;Host&lt;/code&gt; headers, Django validates &lt;code&gt;Host&lt;/code&gt; headers against the &lt;a href=&quot;../ref/settings#std:setting-ALLOWED_HOSTS&quot;&gt;&lt;code&gt;ALLOWED_HOSTS&lt;/code&gt;&lt;/a&gt; setting in the &lt;a href=&quot;../ref/request-response#django.http.HttpRequest.get_host&quot;&gt;&lt;code&gt;django.http.HttpRequest.get_host()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b14c385e9c068c17518da9eb24b790c994df9ab7" translate="yes" xml:space="preserve">
          <source>Because geography calculations involve more mathematics, only a subset of the PostGIS spatial lookups are available for the geography type. Practically, this means that in addition to the &lt;a href=&quot;geoquerysets#distance-lookups&quot;&gt;distance lookups&lt;/a&gt; only the following additional &lt;a href=&quot;geoquerysets#spatial-lookups&quot;&gt;spatial lookups&lt;/a&gt; are available for geography columns:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="595a309749b3a496f49826a3190012c59dc15e12" translate="yes" xml:space="preserve">
          <source>Because it is possible for the developer to turn off the &lt;code&gt;CsrfViewMiddleware&lt;/code&gt;, all relevant views in contrib apps use the &lt;code&gt;csrf_protect&lt;/code&gt; decorator to ensure the security of these applications against CSRF. It is recommended that the developers of other reusable apps that want the same guarantees also use the &lt;code&gt;csrf_protect&lt;/code&gt; decorator on their views.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbaffa73d9aa8e66279a76ef371ab49ef8c024dd" translate="yes" xml:space="preserve">
          <source>Because it&amp;rsquo;s convenient, let&amp;rsquo;s use Django&amp;rsquo;s own database API, which we covered in &lt;a href=&quot;tutorial02&quot;&gt;Tutorial 2&lt;/a&gt;. Here&amp;rsquo;s one stab at a new &lt;code&gt;index()&lt;/code&gt; view, which displays the latest 5 poll questions in the system, separated by commas, according to publication date:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db170df6f33cedcfecf70802e14df5bcdf21d2f3" translate="yes" xml:space="preserve">
          <source>Because it&amp;rsquo;s impossible to serialize arbitrary Python code, these historical models will not have any custom methods that you have defined. They will, however, have the same fields, relationships, managers (limited to those with &lt;code&gt;use_in_migrations = True&lt;/code&gt;) and &lt;code&gt;Meta&lt;/code&gt; options (also versioned, so they may be different from your current ones).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a576b7b74156d956bbdf99772743cf4d2872e210" translate="yes" xml:space="preserve">
          <source>Because migrations are stored in version control, you&amp;rsquo;ll occasionally come across situations where you and another developer have both committed a migration to the same app at the same time, resulting in two migrations with the same number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecf48349c2e18001cd26b4d210fff49794438a69" translate="yes" xml:space="preserve">
          <source>Because multi-table inheritance uses an implicit &lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt;&lt;code&gt;OneToOneField&lt;/code&gt;&lt;/a&gt; to link the child and the parent, it&amp;rsquo;s possible to move from the parent down to the child, as in the above example. However, this uses up the name that is the default &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_name&quot;&gt;&lt;code&gt;related_name&lt;/code&gt;&lt;/a&gt; value for &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; relations. If you are putting those types of relations on a subclass of the parent model, you &lt;strong&gt;must&lt;/strong&gt; specify the &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.related_name&quot;&gt;&lt;code&gt;related_name&lt;/code&gt;&lt;/a&gt; attribute on each such field. If you forget, Django will raise a validation error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07db482e681450eaf30c5a9a75feed11bd8fc0ec" translate="yes" xml:space="preserve">
          <source>Because of how &lt;code&gt;xgettext&lt;/code&gt; (used by &lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt;&lt;code&gt;makemessages&lt;/code&gt;&lt;/a&gt;) works, only functions that take a single string argument can be imported as &lt;code&gt;_&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08b376685af40f9d58e48e32fc32aee5deed6a38" translate="yes" xml:space="preserve">
          <source>Because of the modular design of the admin templates, it is usually neither necessary nor advisable to replace an entire template. It is almost always better to override only the section of the template which you need to change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="713b60fca0bbcd7b6e58185e3d1bda5280526dde" translate="yes" xml:space="preserve">
          <source>Because of the nature of JSON (there is no native distinction between lists and tuples) if you pass in a tuple, you will get a list from &lt;code&gt;signing.loads(object)&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bba94ca23cad5e9236d4fe8e0f33ecc7d7ba1816" translate="yes" xml:space="preserve">
          <source>Because of the variety of packaging systems available for macOS, users have several different options for installing GeoDjango. These options are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b50530b574b77078f31f6b85ffe2cb4b3381b5f" translate="yes" xml:space="preserve">
          <source>Because of the way that Python resolves method overloading, the call to &lt;code&gt;super().render_to_response(context)&lt;/code&gt; ends up calling the &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.render_to_response&quot;&gt;&lt;code&gt;render_to_response()&lt;/code&gt;&lt;/a&gt; implementation of &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin&quot;&gt;&lt;code&gt;TemplateResponseMixin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f7e10f96940de25853d507df6c9e0fad8db0d5e" translate="yes" xml:space="preserve">
          <source>Because of the way the &lt;a href=&quot;https://docs.python.org/3/reference/datamodel.html#descriptor-invocation&quot;&gt;descriptor protocol&lt;/a&gt; works, using &lt;code&gt;del&lt;/code&gt; (or &lt;code&gt;delattr&lt;/code&gt;) on a &lt;code&gt;cached_property&lt;/code&gt; that hasn&amp;rsquo;t been accessed raises &lt;code&gt;AttributeError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4edf1c60b9c9146737fc713b35918c556d71ae4" translate="yes" xml:space="preserve">
          <source>Because of this, &lt;code&gt;staticfiles&lt;/code&gt; ships its own &lt;a href=&quot;../../ref/contrib/staticfiles#django.contrib.staticfiles.testing.StaticLiveServerTestCase&quot;&gt;&lt;code&gt;django.contrib.staticfiles.testing.StaticLiveServerTestCase&lt;/code&gt;&lt;/a&gt;, a subclass of the built-in one that has the ability to transparently serve all the assets during execution of these tests in a way very similar to what we get at development time with &lt;code&gt;DEBUG = True&lt;/code&gt;, i.e. without having to collect them using &lt;a href=&quot;../../ref/contrib/staticfiles#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25ea53ad057f59936b93761f6edb3a935113ee48" translate="yes" xml:space="preserve">
          <source>Because some string operations come up again and again, Django ships with a few useful functions that should make working with string and bytestring objects a bit easier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="506105669e8434900f8152c16f863fa603dac585" translate="yes" xml:space="preserve">
          <source>Because that would couple the model layer to the view layer. One of the foremost design goals of Django is to maintain loose coupling. Some controlled coupling is introduced in the &lt;a href=&quot;../topics/http/shortcuts#module-django.shortcuts&quot;&gt;&lt;code&gt;django.shortcuts&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb2c9a0cdf89cda842c176d6dfe984045f57cf93" translate="yes" xml:space="preserve">
          <source>Because the &lt;code&gt;FlatpageFallbackMiddleware&lt;/code&gt; is applied only after URL resolution has failed and produced a 404, the response it returns will not apply any &lt;a href=&quot;../../topics/http/middleware#view-middleware&quot;&gt;view middleware&lt;/a&gt; methods. Only requests which are successfully routed to a view via normal URL resolution apply view middleware.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28be2cf935e455cb809f1b408c0f959b8443b8cb" translate="yes" xml:space="preserve">
          <source>Because the &lt;code&gt;distance&lt;/code&gt; attribute is a &lt;a href=&quot;measure#django.contrib.gis.measure.Distance&quot;&gt;&lt;code&gt;Distance&lt;/code&gt;&lt;/a&gt; object, you can easily express the value in the units of your choice. For example, &lt;code&gt;city.distance.mi&lt;/code&gt; is the distance value in miles and &lt;code&gt;city.distance.km&lt;/code&gt; is the distance value in kilometers. See &lt;a href=&quot;measure&quot;&gt;Measurement Objects&lt;/a&gt; for usage details and the list of &lt;a href=&quot;measure#supported-units&quot;&gt;Supported units&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5b3e63b0f71b204654b3d2115213f5de20d372b" translate="yes" xml:space="preserve">
          <source>Because values are converted to Python before validators are run, you can even use the same validator with forms:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00e9ab899d3bca12dd35ac7aa67ab15be3a15c95" translate="yes" xml:space="preserve">
          <source>Because varying on cookie is so common, there&amp;rsquo;s a &lt;a href=&quot;http/decorators#django.views.decorators.vary.vary_on_cookie&quot;&gt;&lt;code&gt;django.views.decorators.vary.vary_on_cookie()&lt;/code&gt;&lt;/a&gt; decorator. These two views are equivalent:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af28755edcf5980a22b136cdea6613753af2c890" translate="yes" xml:space="preserve">
          <source>Before &lt;a href=&quot;#django.contrib.auth.middleware.RemoteUserMiddleware&quot;&gt;&lt;code&gt;RemoteUserMiddleware&lt;/code&gt;&lt;/a&gt;, or any other authentication middleware that may perform a login, and hence rotate the CSRF token, before calling down the middleware chain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30a79da2b8b5a03591499e3e59e4ae9b57b131b8" translate="yes" xml:space="preserve">
          <source>Before MySQL 5.6.1, spatial extensions only support bounding box operations (what MySQL calls minimum bounding rectangles, or MBR). Specifically, MySQL did not conform to the OGC standard. Django supports spatial functions operating on real geometries available in modern MySQL versions. However, the spatial functions are not as rich as other backends like PostGIS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e747f4b68ab596bd8ab1b7359d47a91efe16e3f6" translate="yes" xml:space="preserve">
          <source>Before a &lt;a href=&quot;#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt; instance can be returned to the client, it must be rendered. The rendering process takes the intermediate representation of template and context, and turns it into the final byte stream that can be served to the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39a8ed35440f50154028026a9bd0d7bdf0ccc46f" translate="yes" xml:space="preserve">
          <source>Before any middleware that may change or use the response body.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b8caca6ca0dc3464c58f73d8b04f82a19d5e4a8" translate="yes" xml:space="preserve">
          <source>Before any middleware that may change the response (it sets the &lt;code&gt;Content-Length&lt;/code&gt; header). A middleware that appears before &lt;code&gt;CommonMiddleware&lt;/code&gt; and changes the response must reset &lt;code&gt;Content-Length&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="335b3daca29ecf4cc845518aaab15798bfbefa79" translate="yes" xml:space="preserve">
          <source>Before any middleware that may change the response (it sets the &lt;code&gt;ETag&lt;/code&gt; header).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddc0fe43c53abb991ec3aef5669c18586af6055c" translate="yes" xml:space="preserve">
          <source>Before any middleware that may raise an an exception to trigger an error view (such as &lt;a href=&quot;exceptions#django.core.exceptions.PermissionDenied&quot;&gt;&lt;code&gt;PermissionDenied&lt;/code&gt;&lt;/a&gt;) if you&amp;rsquo;re using &lt;a href=&quot;settings#std:setting-CSRF_USE_SESSIONS&quot;&gt;&lt;code&gt;CSRF_USE_SESSIONS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83e652eda1f9c39025a7134ac1e5f7d6f6ca91de" translate="yes" xml:space="preserve">
          <source>Before any view middleware that assumes that CSRF attacks have been dealt with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bb8531e29d8b0d7e4de297fcbd58b12c5e7175c" translate="yes" xml:space="preserve">
          <source>Before making any changes, create a new branch for the ticket:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87c61853de29443906cf113351b191d8c3eceae6" translate="yes" xml:space="preserve">
          <source>Before running the test suite, install its dependencies by &lt;code&gt;cd&lt;/code&gt;-ing into the Django &lt;code&gt;tests/&lt;/code&gt; directory and then running:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46ff700820e6c9290efec4b221a3887fe7db92ef" translate="yes" xml:space="preserve">
          <source>Before the &lt;a href=&quot;https://www.ecma-international.org/ecma-262/5.1/index.html#sec-11.1.4&quot;&gt;5th edition of ECMAScript&lt;/a&gt; it was possible to poison the JavaScript &lt;code&gt;Array&lt;/code&gt; constructor. For this reason, Django does not allow passing non-dict objects to the &lt;a href=&quot;#django.http.JsonResponse&quot;&gt;&lt;code&gt;JsonResponse&lt;/code&gt;&lt;/a&gt; constructor by default. However, most modern browsers implement EcmaScript 5 which removes this attack vector. Therefore it is possible to disable this security precaution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3482fc661487a504b5ead4f883ceae1521f0e887" translate="yes" xml:space="preserve">
          <source>Before those that modify the &lt;code&gt;Vary&lt;/code&gt; header (&lt;code&gt;SessionMiddleware&lt;/code&gt;, &lt;code&gt;GZipMiddleware&lt;/code&gt;, &lt;code&gt;LocaleMiddleware&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c312fbdec5708b04fa2e14447f26928bb7d1ca25" translate="yes" xml:space="preserve">
          <source>Before upgrading, it&amp;rsquo;s a good idea to resolve any deprecation warnings raised by your project while using your current version of Django. Fixing these warnings before upgrading ensures that you&amp;rsquo;re informed about areas of the code that need altering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b150695e7cea893935dbf9808598af414c22465e" translate="yes" xml:space="preserve">
          <source>Before using raw SQL, explore &lt;a href=&quot;index&quot;&gt;the ORM&lt;/a&gt;. Ask on &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/mailing-lists/#django-users-mailing-list&quot;&gt;django-users&lt;/a&gt; or the &lt;a href=&quot;irc://irc.freenode.net/django&quot;&gt;#django IRC channel&lt;/a&gt; to see if the ORM supports your use case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf36f7df8cb66d43c619f2dbc972675dbd7510b7" translate="yes" xml:space="preserve">
          <source>Before using the database cache, you must create the cache table with this command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35936ffe9025a0f37c58cf19bdffd8c3833f7b58" translate="yes" xml:space="preserve">
          <source>Before we try to fix anything, let&amp;rsquo;s have a look at the tools at our disposal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96e4edc0e1a30c2aee339e20d6a65cd6e9caa561" translate="yes" xml:space="preserve">
          <source>Before you can use Django, you&amp;rsquo;ll need to get it installed. We have a &lt;a href=&quot;../topics/install&quot;&gt;complete installation guide&lt;/a&gt; that covers all the possibilities; this guide will guide you to a minimal installation that&amp;rsquo;ll work while you walk through the introduction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3319c838b49b9a8ad0454acd5932ea7e7a286b87" translate="yes" xml:space="preserve">
          <source>Before you get too into writing patches for Django, there&amp;rsquo;s a little more information on contributing that you should probably take a look at:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5116dedc7de53fc4f4989aaba0cf94dc321d797e" translate="yes" xml:space="preserve">
          <source>Before you save uploaded files, the data needs to be stored somewhere.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17aef405ad4670f8dce2fd1c4684c6d92449e710" translate="yes" xml:space="preserve">
          <source>Behaves like the standard Python &lt;code&gt;file.close()&lt;/code&gt; method and closes the file associated with this instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="058c0a12a9e6a73336cf169899bbd67b58a2696e" translate="yes" xml:space="preserve">
          <source>Behaves the same way as &lt;a href=&quot;#django.db.models.Lookup.process_lhs&quot;&gt;&lt;code&gt;process_lhs()&lt;/code&gt;&lt;/a&gt;, for the right-hand side.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb28c8b66f1ee877886160ca0f703455045690d5" translate="yes" xml:space="preserve">
          <source>Behavior of contrib apps</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60b5147242d1edb8f92a770b1ec638025b54631a" translate="yes" xml:space="preserve">
          <source>Behavior of parallel requests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1334bd3587d4348b9da90cad653f4e01715be733" translate="yes" xml:space="preserve">
          <source>Behavior of unbound forms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bbe3ddff5d188e8a248228bc2152ed147d1b379" translate="yes" xml:space="preserve">
          <source>Behind the scenes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e0fdab6cf6d41997c57faa8163f6751db7574ee" translate="yes" xml:space="preserve">
          <source>Behind the scenes, Django appends &lt;code&gt;&quot;_id&quot;&lt;/code&gt; to the field name to create its database column name. In the above example, the database table for the &lt;code&gt;Car&lt;/code&gt; model will have a &lt;code&gt;manufacturer_id&lt;/code&gt; column. (You can change this explicitly by specifying &lt;a href=&quot;#django.db.models.Field.db_column&quot;&gt;&lt;code&gt;db_column&lt;/code&gt;&lt;/a&gt;) However, your code should never have to deal with the database column name, unless you write custom SQL. You&amp;rsquo;ll always deal with the field names of your model object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67735357870cd4968ee69d9e4658542d8718d889" translate="yes" xml:space="preserve">
          <source>Behind the scenes, Django creates an intermediary join table to represent the many-to-many relationship. By default, this table name is generated using the name of the many-to-many field and the name of the table for the model that contains it. Since some databases don&amp;rsquo;t support table names above a certain length, these table names will be automatically truncated and a uniqueness hash will be used, e.g. &lt;code&gt;author_books_9cdf&lt;/code&gt;. You can manually provide the name of the join table using the &lt;a href=&quot;#django.db.models.ManyToManyField.db_table&quot;&gt;&lt;code&gt;db_table&lt;/code&gt;&lt;/a&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="847ed7171a03f4ee94168580b2643b171022fd15" translate="yes" xml:space="preserve">
          <source>Behind the scenes, Django delegates decisions about how and where to store files to a file storage system. This is the object that actually understands things like file systems, opening and reading files, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e49d6c01119504d3fdf8c01c48b0c6efd480cb8" translate="yes" xml:space="preserve">
          <source>Behind the scenes, Django has a very flexible model of deciding which language should be used &amp;ndash; installation-wide, for a particular user, or both.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ba868d3f6818c8124d167f978b5d1a635fee7c3" translate="yes" xml:space="preserve">
          <source>Behind the scenes, Django maintains a list of &amp;ldquo;authentication backends&amp;rdquo; that it checks for authentication. When somebody calls &lt;a href=&quot;default#django.contrib.auth.authenticate&quot;&gt;&lt;code&gt;django.contrib.auth.authenticate()&lt;/code&gt;&lt;/a&gt; &amp;ndash; as described in &lt;a href=&quot;default#how-to-log-a-user-in&quot;&gt;How to log a user in&lt;/a&gt; &amp;ndash; Django tries authenticating across all of its authentication backends. If the first authentication method fails, Django tries the second one, and so on, until all backends have been attempted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ae796c8f967944cf5b3b9586a675409c7bce0a0" translate="yes" xml:space="preserve">
          <source>Behind the scenes, the high-level RSS framework uses a lower-level framework for generating feeds&amp;rsquo; XML. This framework lives in a single module: &lt;a href=&quot;https://github.com/django/django/blob/master/django/utils/feedgenerator.py&quot;&gt;django/utils/feedgenerator.py&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de607bb55bcbba294aab6e11baba773b851c22de" translate="yes" xml:space="preserve">
          <source>Being a Python Web framework, Django requires Python. See &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/faq/install/#faq-python-version-support&quot;&gt;What Python version can I use with Django?&lt;/a&gt; for details. Python includes a lightweight database called &lt;a href=&quot;https://sqlite.org/&quot;&gt;SQLite&lt;/a&gt; so you won&amp;rsquo;t need to set up a database just yet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9faca6de7aa94d2253e5d5df9f103d69e6f90b79" translate="yes" xml:space="preserve">
          <source>Being a web framework, Django needs a convenient way to generate HTML dynamically. The most common approach relies on templates. A template contains the static parts of the desired HTML output as well as some special syntax describing how dynamic content will be inserted. For a hands-on example of creating HTML pages with templates, see &lt;a href=&quot;../intro/tutorial03&quot;&gt;Tutorial 3&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29847749d7d87d002cedf859b42e3c8ea2340133" translate="yes" xml:space="preserve">
          <source>Being the following models:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29ba9999347feeefaf6721511a130a94485610f8" translate="yes" xml:space="preserve">
          <source>Below is a minimal template that illustrates a few basics. Each element will be explained later in this document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7732e0f628d85310bcf1bb1d2ad558c746163ee" translate="yes" xml:space="preserve">
          <source>Below is an example showing how to record the initial values of fields that are loaded from the database:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aea67d5c4a3a061a6414eb0357c40f0719003ce" translate="yes" xml:space="preserve">
          <source>Below you&amp;rsquo;ll find technical implementation details that may be useful to library authors. The technical API and examples below will help with creating generic query expressions that can extend the built-in functionality that Django provides.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d6d722e58731054a35fb11344c7ffa69bc490f5" translate="yes" xml:space="preserve">
          <source>Besides saving to the database, the field also needs to know how to serialize its value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aea0ab0cd2f5ec049be1d62ac0d001c18183b1b4" translate="yes" xml:space="preserve">
          <source>Besides the basic request/response middleware pattern described earlier, you can add three other special methods to class-based middleware:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0a22402c5a7a0d8715b7dff47f4a27e90de161a" translate="yes" xml:space="preserve">
          <source>Beware not to alter the &lt;code&gt;base_fields&lt;/code&gt; attribute because this modification will influence all subsequent &lt;code&gt;ContactForm&lt;/code&gt; instances within the same Python process:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10aa69e316ddf2acb7e875ea988e8d27d57c7274" translate="yes" xml:space="preserve">
          <source>Beware that because query terms are split and ANDed as described earlier, searching with &lt;a href=&quot;../../models/querysets#std:fieldlookup-exact&quot;&gt;&lt;code&gt;exact&lt;/code&gt;&lt;/a&gt; only works with a single search word since two or more words can&amp;rsquo;t all be an exact match unless all words are the same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="622c66e4edc1ad0f6a4ad5d57013bbd82948702d" translate="yes" xml:space="preserve">
          <source>Beware that not all browsers support entering localized numbers in &lt;code&gt;number&lt;/code&gt; input types. Django itself avoids using them for fields having their &lt;a href=&quot;fields#django.forms.Field.localize&quot;&gt;&lt;code&gt;localize&lt;/code&gt;&lt;/a&gt; property set to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dbfe08480fdd4580be353bc61b70fd49eefec07" translate="yes" xml:space="preserve">
          <source>Beyond permissions, groups are a convenient way to categorize users to give them some label, or extended functionality. For example, you could create a group &lt;code&gt;'Special users'&lt;/code&gt;, and you could write code that could, say, give them access to a members-only portion of your site, or send them members-only email messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af83e688fe9b2eb0c89238fbcc88dde3fe5b201d" translate="yes" xml:space="preserve">
          <source>Beyond this, applications may choose to define a whitelist of allowable file extensions for user uploaded files and configure the web server to only serve such files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43fc195cfd349a4a1f123ea11403f4010e985e12" translate="yes" xml:space="preserve">
          <source>Big Endian (e.g., compatible with RISC systems)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc19b486bb1ddeed173efe877d3c44a522132c1b" translate="yes" xml:space="preserve">
          <source>Bilateral raster support &lt;code&gt;B&lt;/code&gt;: the operator supports rasters only if both sides of the lookup receive raster inputs. Raster data is automatically converted to geometries for mixed lookups.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88d606ed7a6ca8c7e0fdb1bb58c5b0ff94fdcc6a" translate="yes" xml:space="preserve">
          <source>Binding uploaded files to a form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b3017a81a16b3859294e63ebb0dcf3214b0c029" translate="yes" xml:space="preserve">
          <source>Blocks are evaluated &lt;em&gt;before&lt;/em&gt; they are included. This means that a template that includes blocks from another will contain blocks that have &lt;em&gt;already been evaluated and rendered&lt;/em&gt; - not blocks that can be overridden by, for example, an extending template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19b79bd29901fecdcff5f9b55665749238a8f4d6" translate="yes" xml:space="preserve">
          <source>Blog homepage &amp;ndash; displays the latest few entries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c586081e94278f4ab3f8651a00d240f20483118" translate="yes" xml:space="preserve">
          <source>Boolean attribute that is set to &lt;code&gt;True&lt;/code&gt; after the registry is fully populated and all &lt;a href=&quot;#django.apps.AppConfig.ready&quot;&gt;&lt;code&gt;AppConfig.ready()&lt;/code&gt;&lt;/a&gt; methods are called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c57ed60ca047811d1eb4219526ceb9e03a84d622" translate="yes" xml:space="preserve">
          <source>Boolean flag that indicates if a field contains references to one or more other models for its functionality (e.g. &lt;code&gt;ForeignKey&lt;/code&gt;, &lt;code&gt;ManyToManyField&lt;/code&gt;, &lt;code&gt;OneToOneField&lt;/code&gt;, etc.).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a491e8508ab7beeda7e08d5b2926368c7f3f7d60" translate="yes" xml:space="preserve">
          <source>Boolean flag that indicates if a field is used to back another non-hidden field&amp;rsquo;s functionality (e.g. the &lt;code&gt;content_type&lt;/code&gt; and &lt;code&gt;object_id&lt;/code&gt; fields that make up a &lt;code&gt;GenericForeignKey&lt;/code&gt;). The &lt;code&gt;hidden&lt;/code&gt; flag is used to distinguish what constitutes the public subset of fields on the model from all the fields on the model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b400fa2047b32604313a17a1b9dcadb1289ba348" translate="yes" xml:space="preserve">
          <source>Boolean flag that indicates if the field has a database column associated with it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31248d2fa09fc5fa8737d35cf40775f786ef09c8" translate="yes" xml:space="preserve">
          <source>Boolean flag that indicates if the field was automatically created, such as the &lt;code&gt;OneToOneField&lt;/code&gt; used by model inheritance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24e9d47bbb22d3a1ea6015b1ce3ed95e3bff9524" translate="yes" xml:space="preserve">
          <source>Boolean flag that is &lt;code&gt;True&lt;/code&gt; if the field has a many-to-many relation; &lt;code&gt;False&lt;/code&gt; otherwise. The only field included with Django where this is &lt;code&gt;True&lt;/code&gt; is &lt;code&gt;ManyToManyField&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09e5deb8255bc876a423901b827f061382f2e909" translate="yes" xml:space="preserve">
          <source>Boolean flag that is &lt;code&gt;True&lt;/code&gt; if the field has a many-to-one relation, such as a &lt;code&gt;ForeignKey&lt;/code&gt;; &lt;code&gt;False&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d99a68cdaba34987d54b364ba1eee856d540243e" translate="yes" xml:space="preserve">
          <source>Boolean flag that is &lt;code&gt;True&lt;/code&gt; if the field has a one-to-many relation, such as a &lt;code&gt;GenericRelation&lt;/code&gt; or the reverse of a &lt;code&gt;ForeignKey&lt;/code&gt;; &lt;code&gt;False&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbd87de469961b6cd397262e9a12019cbd2d048c" translate="yes" xml:space="preserve">
          <source>Boolean flag that is &lt;code&gt;True&lt;/code&gt; if the field has a one-to-one relation, such as a &lt;code&gt;OneToOneField&lt;/code&gt;; &lt;code&gt;False&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2fa624072564a810746530375d41bc96fee0481" translate="yes" xml:space="preserve">
          <source>Boolean for whether it&amp;rsquo;s a leap year.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02774d2bd49b309c70bcbf1cd2d7f51fdc3d2b2f" translate="yes" xml:space="preserve">
          <source>Boolean operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19ad5fb707718293b132cdce1022b9dd006b360a" translate="yes" xml:space="preserve">
          <source>Boolean value specifying if a textarea input showing the serialized representation of the current geometry is visible, mainly for debugging purposes (default is &lt;code&gt;False&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61eebf1faa58cb7fd72d8d980915192a9a1883b2" translate="yes" xml:space="preserve">
          <source>Boolean value to control whether or not the default test runner serializes the database into an in-memory JSON string before running tests (used to restore the database state between tests if you don&amp;rsquo;t have transactions). You can set this to &lt;code&gt;False&lt;/code&gt; to speed up creation time if you don&amp;rsquo;t have any test classes with &lt;a href=&quot;../topics/testing/overview#test-case-serialized-rollback&quot;&gt;serialized_rollback=True&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbc03b8abef8fb163417b4b62cd1a4b71bca7f80" translate="yes" xml:space="preserve">
          <source>Boolean. Designates that this user has all permissions without explicitly assigning them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="479c9baa82213a601019a64be0aae91f03bd41ef" translate="yes" xml:space="preserve">
          <source>Boolean. Designates whether this user account should be considered active. We recommend that you set this flag to &lt;code&gt;False&lt;/code&gt; instead of deleting accounts; that way, if your applications have any foreign keys to users, the foreign keys won&amp;rsquo;t break.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91bc55a48db5f039c7f21820089fa5b15e7ea20a" translate="yes" xml:space="preserve">
          <source>Boolean. Designates whether this user can access the admin site.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12100cf35e7460f4cf60e199f11b03115bf48115" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;iri_to_uri()&lt;/code&gt; and &lt;code&gt;uri_to_iri()&lt;/code&gt; functions are idempotent, which means the following is always true:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a6859c01d14fc75c8473aed8539e31a0bb9d064" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;send()&lt;/code&gt; and &lt;code&gt;send_robust()&lt;/code&gt; return a list of tuple pairs &lt;code&gt;[(receiver, response), ... ]&lt;/code&gt;, representing the list of called receiver functions and their response values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f32e4a3e6adae83ca09fa4768da096bde0fcc84" translate="yes" xml:space="preserve">
          <source>Both a domain and a port may be returned by &lt;a href=&quot;../request-response#django.http.HttpRequest.get_host&quot;&gt;&lt;code&gt;request.get_host()&lt;/code&gt;&lt;/a&gt; when the Host header has a port explicitly specified, e.g. &lt;code&gt;example.com:80&lt;/code&gt;. In such cases, if the lookup fails because the host does not match a record in the database, the port is stripped and the lookup is retried with the domain part only. This does not apply to &lt;a href=&quot;#django.contrib.sites.requests.RequestSite&quot;&gt;&lt;code&gt;RequestSite&lt;/code&gt;&lt;/a&gt; which will always use the unmodified host.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42d7aaf353ff186a2edd9f7c4dd2ff8f1a8aa9fb" translate="yes" xml:space="preserve">
          <source>Both classes return SQL with the template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acd8b8f2ced06e6045d9801d6449d0f0128815b7" translate="yes" xml:space="preserve">
          <source>Both ends of a many-to-many relationship get automatic API access to the other end. The API works similar to a &amp;ldquo;backward&amp;rdquo; one-to-many relationship, above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3f1e4df24e414c20facb4ae64fef56a0d425b5c" translate="yes" xml:space="preserve">
          <source>Both of the exceptions are subclasses of &lt;a href=&quot;#django.core.paginator.InvalidPage&quot;&gt;&lt;code&gt;InvalidPage&lt;/code&gt;&lt;/a&gt;, so you can handle them both with &lt;code&gt;except InvalidPage&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99d6855a06959ae137281d00c142ba20aba534d4" translate="yes" xml:space="preserve">
          <source>Both of these methods will perform their queries using the default manager for the model. If you need to emulate filtering used by a custom manager, or want to perform one-off custom filtering, both methods also accept optional keyword arguments, which should be in the format described in &lt;a href=&quot;querysets#field-lookups&quot;&gt;Field lookups&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71ccddc398be9491bbc09cb407c8d0178fb35981" translate="yes" xml:space="preserve">
          <source>Both of these options are meant to normalize URLs. The philosophy is that each URL should exist in one, and only one, place. Technically a URL &lt;code&gt;foo.com/bar&lt;/code&gt; is distinct from &lt;code&gt;foo.com/bar/&lt;/code&gt; &amp;ndash; a search-engine indexer would treat them as separate URLs &amp;ndash; so it&amp;rsquo;s best practice to normalize URLs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e610620f9dfb80553f706cbec4671b3dfbcc8a64" translate="yes" xml:space="preserve">
          <source>Both patterns use nested arguments and will resolve: for example, &lt;code&gt;blog/page-2/&lt;/code&gt; will result in a match to &lt;code&gt;blog_articles&lt;/code&gt; with two positional arguments: &lt;code&gt;page-2/&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt;. The second pattern for &lt;code&gt;comments&lt;/code&gt; will match &lt;code&gt;comments/page-2/&lt;/code&gt; with keyword argument &lt;code&gt;page_number&lt;/code&gt; set to 2. The outer argument in this case is a non-capturing argument &lt;code&gt;(?:...)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3743f3696dbe043adb8aa03f4c03181ff9c5c72e" translate="yes" xml:space="preserve">
          <source>Both queries return a list of publishers that have at least one book with a rating exceeding 3.0, hence publisher C is excluded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d97c990f9f7ab50a3461446f82ab6fef4ca78133" translate="yes" xml:space="preserve">
          <source>Both session stores are quite fast, but the simple cache is faster because it disregards persistence. In most cases, the &lt;code&gt;cached_db&lt;/code&gt; backend will be fast enough, but if you need that last bit of performance, and are willing to let session data be expunged from time to time, the &lt;code&gt;cache&lt;/code&gt; backend is for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bae8be7a054de22b21b2c2ad0a3ad76499d8599" translate="yes" xml:space="preserve">
          <source>Both sides of a &lt;a href=&quot;fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; relation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a6cceefce0f8210367eb73d0138c56d8b39b044" translate="yes" xml:space="preserve">
          <source>Both the Django ORM and MySQL (when using the InnoDB &lt;a href=&quot;#mysql-storage-engines&quot;&gt;storage engine&lt;/a&gt;) support database &lt;a href=&quot;../topics/db/transactions#topics-db-transactions-savepoints&quot;&gt;savepoints&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8832043234b86b4b4c61f7a25dbd37e888c4ed91" translate="yes" xml:space="preserve">
          <source>Bound and unbound form instances</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fee2a37bc6ae6c3be9ba2395925beb828979f93b" translate="yes" xml:space="preserve">
          <source>Bound and unbound forms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae9335d6b2cceffabf51455e2150c204c4de13e8" translate="yes" xml:space="preserve">
          <source>Boundary geometries may be exported as WKT and GeoJSON:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44d29dfb08a346485e2a7faab9c37191666de3dd" translate="yes" xml:space="preserve">
          <source>British chain (Benoit 1895 B)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb9b1548d029b52e63c45098b3e4b382f1c345d7" translate="yes" xml:space="preserve">
          <source>British chain (Sears 1922 truncated)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3b47fc7d264802e61b608afa5fc13e1a4a0666c" translate="yes" xml:space="preserve">
          <source>British chain (Sears 1922)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c832b47382ee35ce02018d224b87da6b8e8d32f1" translate="yes" xml:space="preserve">
          <source>British foot (Sears 1922)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2be18390fee4d6f980764e91b7b6316577e071a" translate="yes" xml:space="preserve">
          <source>British yard (Sears 1922)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae9284e75c69a8ace06b4c17a4b8aa1d4c8ce2a0" translate="yes" xml:space="preserve">
          <source>Browser-length sessions vs. persistent sessions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00cf37314d677742b22b839a33a7a79037f8f83f" translate="yes" xml:space="preserve">
          <source>Browsers properly respecting the HSTS header will refuse to allow users to bypass warnings and connect to a site with an expired, self-signed, or otherwise invalid SSL certificate. If you use HSTS, make sure your certificates are in good shape and stay that way!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3966d5b1a06d6426db8194be0c8cb2e845d459a2" translate="yes" xml:space="preserve">
          <source>Browsers that support &lt;code&gt;X-Frame-Options&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bff21794c75ce5c0b47aee10ec62091dbe075b3c" translate="yes" xml:space="preserve">
          <source>Browsers use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer&quot;&gt;the Referer header&lt;/a&gt; as a way to send information to a site about how users got there. When a user clicks a link, the browser will send the full URL of the linking page as the referrer. While this can be useful for some purposes &amp;ndash; like figuring out who&amp;rsquo;s linking to your site &amp;ndash; it also can cause privacy concerns by informing one site that a user was visiting another site.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36bb926a81174dc836269f018cacaa9ddb032971" translate="yes" xml:space="preserve">
          <source>Browsers use the &lt;code&gt;Referer&lt;/code&gt; header as a way to send information to a site about how users got there. By setting a &lt;em&gt;Referrer Policy&lt;/em&gt; you can help to protect the privacy of your users, restricting under which circumstances the &lt;code&gt;Referer&lt;/code&gt; header is set. See &lt;a href=&quot;../ref/middleware#referrer-policy&quot;&gt;the referrer policy section of the security middleware reference&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f52d68a1f34947d06eef6f08c481a9dad277bb1" translate="yes" xml:space="preserve">
          <source>Bugs are fixed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff039448f0a19f651133a8f20db33c0b32b356f4" translate="yes" xml:space="preserve">
          <source>Build the keyword arguments required to instantiate the form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c32b4c0475aa1d3c17d443976396036e0bec114" translate="yes" xml:space="preserve">
          <source>Building a form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efba0068ecb38a741e9fe95691bfca9f00ef2211" translate="yes" xml:space="preserve">
          <source>Building a form in Django</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cd56ee99256f6026c82a35e18d75551094d8936" translate="yes" xml:space="preserve">
          <source>Building from source</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb83f3e89a9115c5f9727e9debcc0ec154d7f9c1" translate="yes" xml:space="preserve">
          <source>Building up Django&amp;rsquo;s generic class-based views</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abfb756f1960f2a68e3831b83e6578fb94d59131" translate="yes" xml:space="preserve">
          <source>Building your own</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a2e2711854025997e1bea31255f325c45d238b5" translate="yes" xml:space="preserve">
          <source>Built-in &lt;code&gt;Field&lt;/code&gt; classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3431b3da19de9cdec7e1c4e704fd582c17cbdfca" translate="yes" xml:space="preserve">
          <source>Built-in Expressions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b1bf6558c61898cd1ba91e374db1fd1c5275cf0" translate="yes" xml:space="preserve">
          <source>Built-in Views</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d46393a64dbe8b8f5ed2a192064e0dd5bdb933ee" translate="yes" xml:space="preserve">
          <source>Built-in backends</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abd2d2ba6bc6351f5d33bec56744bfc9e580bedd" translate="yes" xml:space="preserve">
          <source>Built-in class-based generic views</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a9306a7fdf022ff047c4dfb202dab7a00b06175" translate="yes" xml:space="preserve">
          <source>Built-in class-based views API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f20ddc74b40574bc30f602019a0bac7988651d9" translate="yes" xml:space="preserve">
          <source>Built-in filter reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f0d3d822c4b0fee49fa41ac9fdefa5098291d6d" translate="yes" xml:space="preserve">
          <source>Built-in forms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6f9f7ef35fc2e617b477e67d6061e7260c90e32" translate="yes" xml:space="preserve">
          <source>Built-in tag reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e37629fd03730fe9ec1c35fa1b442835f61c0a1c" translate="yes" xml:space="preserve">
          <source>Built-in template context processors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d157a68954f4d33e9dd01a84397acf6ccb6634eb" translate="yes" xml:space="preserve">
          <source>Built-in template tags and filters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b0baaf1c76bb24ba5453ea99b63a9fee40f1ccd" translate="yes" xml:space="preserve">
          <source>Built-in upload handlers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="853adbe6a9c9185cf38b20fec800da9b6c47bf4a" translate="yes" xml:space="preserve">
          <source>Built-in validators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f346e66e328aed1c2cf792169078744901d465ee" translate="yes" xml:space="preserve">
          <source>Built-in variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98ba7b671f23dab9f34d2f8ae9ea6a550bd27607" translate="yes" xml:space="preserve">
          <source>Built-in widgets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c618b84834bda232d4a74573f63d885a24657384" translate="yes" xml:space="preserve">
          <source>Built-in-template form renderers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2de65647893a05f4aebec02d34419686bb84c5fd" translate="yes" xml:space="preserve">
          <source>Builtin tags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31d6613c73b953d8d865da15d64e9bacf91155de" translate="yes" xml:space="preserve">
          <source>Bulk delete some &lt;code&gt;Publications&lt;/code&gt; - references to deleted publications should go:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4eb7338477ed5baba9c088537c4a1c8a9a6d6ec" translate="yes" xml:space="preserve">
          <source>Bulk delete some articles - references to deleted objects should go:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43ec9d792d7de6f7125957e047e69342c821effb" translate="yes" xml:space="preserve">
          <source>Bundled serializers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce1a69446d0c672b58fb0530613c60a9efa3e876" translate="yes" xml:space="preserve">
          <source>But both cases will result in a queryset where each model is annotated with an extra attribute &lt;code&gt;field_lower&lt;/code&gt; produced, roughly, from the following SQL:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdd5ec48453857bbdf3fe2e5c18bb890c739f864" translate="yes" xml:space="preserve">
          <source>But first we need to tell our project that the &lt;code&gt;polls&lt;/code&gt; app is installed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5753035110de1edd2e59a272326ee1a6bd2f5f14" translate="yes" xml:space="preserve">
          <source>But given the fact that it makes use of the &lt;a href=&quot;#django.contrib.staticfiles.views.serve&quot;&gt;&lt;code&gt;django.contrib.staticfiles.views.serve()&lt;/code&gt;&lt;/a&gt; view described above, it can transparently overlay at test execution-time the assets provided by the &lt;code&gt;staticfiles&lt;/code&gt; finders. This means you don&amp;rsquo;t need to run &lt;a href=&quot;#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; before or as a part of your tests setup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="271ed46e914dc0e2a6b956959129204e40b78817" translate="yes" xml:space="preserve">
          <source>But how is this possible, given that a model class doesn&amp;rsquo;t know which other model classes are related to it until those other model classes are loaded?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d3b87b96c617efee7554c67154e6e2d789c302f" translate="yes" xml:space="preserve">
          <source>But if &lt;a href=&quot;../../ref/settings#std:setting-STATIC_URL&quot;&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;'http://static.example.com/'&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d8dcf12056db2b6fbc7eb04370da7b125c9a98e" translate="yes" xml:space="preserve">
          <source>But if you want to add content incrementally, you can use &lt;code&gt;response&lt;/code&gt; as a file-like object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83b3069ac39c0cba44bbc451a1af61871751efd3" translate="yes" xml:space="preserve">
          <source>But in general, callable attributes cause DB lookups every time:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56434ede0f21c5685ad9ee8c7618d6c97bbfe5e5" translate="yes" xml:space="preserve">
          <source>But it could also authenticate a token, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1783fb3605ffe7744e2f0fa6f6997964ffb0c644" translate="yes" xml:space="preserve">
          <source>But the common case is to read templates from the filesystem. If your template files are not stored with a UTF-8 encoding, adjust the &lt;a href=&quot;settings#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt; setting. The built-in &lt;a href=&quot;../topics/templates#module-django.template.backends.django&quot;&gt;&lt;code&gt;django&lt;/code&gt;&lt;/a&gt; backend provides the &lt;code&gt;'file_charset'&lt;/code&gt; option to change the encoding used to read files from disk.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed19ac65e72f0848620202faf2b7776586f7554b" translate="yes" xml:space="preserve">
          <source>But there is a solution: instead of doing something during the atomic block (transaction) and then undoing it if the transaction fails, use &lt;a href=&quot;#django.db.transaction.on_commit&quot;&gt;&lt;code&gt;on_commit()&lt;/code&gt;&lt;/a&gt; to delay doing it in the first place until after the transaction succeeds. It&amp;rsquo;s a lot easier to undo something you never did in the first place!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fb76733fed315bb70ba8a5197a05cf7d9d269f1" translate="yes" xml:space="preserve">
          <source>But this testing thing looks kinda hard&amp;hellip;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="995464aec11d3775483f73b3e3198e51f5f9435c" translate="yes" xml:space="preserve">
          <source>But where&amp;rsquo;s our poll app? It&amp;rsquo;s not displayed on the admin index page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2202cd3e9d759b197b3d583981e4c9ded5099f1f" translate="yes" xml:space="preserve">
          <source>But with &lt;code&gt;ArticleFormset(prefix='article')&lt;/code&gt; that becomes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6aa1c618c20f2f5550cf9ffdc2fe0d9015e8305" translate="yes" xml:space="preserve">
          <source>But, don&amp;rsquo;t do that. It&amp;rsquo;s silly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b90ee8a334b2c076d6d7dd057c7630c1fb36218d" translate="yes" xml:space="preserve">
          <source>But, really, this is an inefficient way of adding &lt;code&gt;Choice&lt;/code&gt; objects to the system. It&amp;rsquo;d be better if you could add a bunch of Choices directly when you create the &lt;code&gt;Question&lt;/code&gt; object. Let&amp;rsquo;s make that happen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ec7007553f17b8a87dc51c4e5d190a629ec94b2" translate="yes" xml:space="preserve">
          <source>But, suppose we have two templates rendering the template snippet from above at the same time:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae11cf1c68f0d41091e3883e5a07294053388ce7" translate="yes" xml:space="preserve">
          <source>But, there&amp;rsquo;s a problem with &lt;code&gt;CurrentTimeNode2&lt;/code&gt;: The variable name &lt;code&gt;current_time&lt;/code&gt; is hard-coded. This means you&amp;rsquo;ll need to make sure your template doesn&amp;rsquo;t use &lt;code&gt;{{ current_time }}&lt;/code&gt; anywhere else, because the &lt;code&gt;{% current_time %}&lt;/code&gt; will blindly overwrite that variable&amp;rsquo;s value. A cleaner solution is to make the template tag specify the name of the output variable, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af714f981e3d0837ea96ccaa766e31ed322e29d1" translate="yes" xml:space="preserve">
          <source>But:</source>
          <target state="translated">But:</target>
        </trans-unit>
        <trans-unit id="c9e38d8918fd75c2b7850a802ea1152efd6d8fdd" translate="yes" xml:space="preserve">
          <source>By convention, Django appends &lt;code&gt;&quot;_id&quot;&lt;/code&gt; to the foreign key field name. (Yes, you can override this, as well.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c24d074a6e8f2705c0835ca4d3bd1c296feeb47d" translate="yes" xml:space="preserve">
          <source>By convention, the logger name is usually &lt;code&gt;__name__&lt;/code&gt;, the name of the Python module that contains the logger. This allows you to filter and handle logging calls on a per-module basis. However, if you have some other way of organizing your logging messages, you can provide any dot-separated name to identify your logger:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d0f7390794176de87ead84711c5da8d6a4134f8" translate="yes" xml:space="preserve">
          <source>By default (when &lt;a href=&quot;../settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;), the template system reads and compiles your templates every time they&amp;rsquo;re rendered. While the Django template system is quite fast, the overhead from reading and compiling templates can add up.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cea576a06f7095919010d4c370cb3e14411cc8a" translate="yes" xml:space="preserve">
          <source>By default &lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt;&lt;code&gt;django-admin makemessages&lt;/code&gt;&lt;/a&gt; examines every file that has the &lt;code&gt;.html&lt;/code&gt;, &lt;code&gt;.txt&lt;/code&gt; or &lt;code&gt;.py&lt;/code&gt; file extension. If you want to override that default, use the &lt;a href=&quot;../../ref/django-admin#cmdoption-makemessages-extension&quot;&gt;&lt;code&gt;--extension&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;-e&lt;/code&gt; option to specify the file extensions to examine:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69d02a00a5ac758fbc8b68701447435660af8c4d" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;--parallel&lt;/code&gt; runs one process per core according to &lt;a href=&quot;https://docs.python.org/3/library/multiprocessing.html#multiprocessing.cpu_count&quot;&gt;&lt;code&gt;multiprocessing.cpu_count()&lt;/code&gt;&lt;/a&gt;. You can adjust the number of processes either by providing it as the option&amp;rsquo;s value, e.g. &lt;code&gt;--parallel=4&lt;/code&gt;, or by setting the &lt;code&gt;DJANGO_TEST_PROCESSES&lt;/code&gt; environment variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aa337c075d5be61fd7c91e2cc57ba6b377ffc38" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;CovarPop&lt;/code&gt; returns the general population covariance. However, if &lt;code&gt;sample=True&lt;/code&gt;, the return value will be the sample population covariance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18fd94d22755789d17780e34a12e7968e3d6d722" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;Form.field_order=None&lt;/code&gt;, which retains the order in which you define the fields in your form class. If &lt;code&gt;field_order&lt;/code&gt; is a list of field names, the fields are ordered as specified by the list and remaining fields are appended according to the default order. Unknown field names in the list are ignored. This makes it possible to disable a field in a subclass by setting it to &lt;code&gt;None&lt;/code&gt; without having to redefine ordering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfcee9ee7ed21ddfad1a6afd1892727054140197" translate="yes" xml:space="preserve">
          <source>By default a &lt;code&gt;ModelForm&lt;/code&gt; is dynamically created for your model. It is used to create the form presented on both the add/change pages. You can easily provide your own &lt;code&gt;ModelForm&lt;/code&gt; to override any default form behavior on the add/change pages. Alternatively, you can customize the default form rather than specifying an entirely new one by using the &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_form&quot;&gt;&lt;code&gt;ModelAdmin.get_form()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5939a5d0bc618026ccbf5e18bdb3e2bc19fb342f" translate="yes" xml:space="preserve">
          <source>By default in Django, every template automatically escapes the output of every variable tag. Specifically, these five characters are escaped:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fafae4d5763192abf1c9ad7ff88730985cedd451" translate="yes" xml:space="preserve">
          <source>By default issues a temporary redirect; pass &lt;code&gt;permanent=True&lt;/code&gt; to issue a permanent redirect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5b75a4d068c5067cc38ef5bf367a80d02610906" translate="yes" xml:space="preserve">
          <source>By default nothing is returned and the geometry is transformed in-place. However, if the &lt;code&gt;clone&lt;/code&gt; keyword is set to &lt;code&gt;True&lt;/code&gt; then a transformed clone of this geometry is returned instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55efc2041b009f8f926e0e3e415382ab48cc7e66" translate="yes" xml:space="preserve">
          <source>By default the &lt;a href=&quot;../../ref/models/relations#django.db.models.fields.related.RelatedManager&quot;&gt;&lt;code&gt;RelatedManager&lt;/code&gt;&lt;/a&gt; used for reverse relations is a subclass of the &lt;a href=&quot;managers#manager-names&quot;&gt;default manager&lt;/a&gt; for that model. If you would like to specify a different manager for a given query you can use the following syntax:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95c37119c82de2229d9b8fc60036a51677dedd3a" translate="yes" xml:space="preserve">
          <source>By default the &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; widget used by &lt;code&gt;ModelChoiceField&lt;/code&gt; will have an empty choice at the top of the list. You can change the text of this label (which is &lt;code&gt;&quot;---------&quot;&lt;/code&gt; by default) with the &lt;code&gt;empty_label&lt;/code&gt; attribute, or you can disable the empty label entirely by setting &lt;code&gt;empty_label&lt;/code&gt; to &lt;code&gt;None&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e014d15d73fb9275e22fe13eeab9712bdb04f75" translate="yes" xml:space="preserve">
          <source>By default the admin shows all fields as editable. Any fields in this option (which should be a &lt;code&gt;list&lt;/code&gt; or &lt;code&gt;tuple&lt;/code&gt;) will display its data as-is and non-editable; they are also excluded from the &lt;a href=&quot;../../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;ModelForm&lt;/code&gt;&lt;/a&gt; used for creating and editing. Note that when specifying &lt;a href=&quot;#django.contrib.admin.ModelAdmin.fields&quot;&gt;&lt;code&gt;ModelAdmin.fields&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#django.contrib.admin.ModelAdmin.fieldsets&quot;&gt;&lt;code&gt;ModelAdmin.fieldsets&lt;/code&gt;&lt;/a&gt; the read-only fields must be present to be shown (they are ignored otherwise).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7ac984e0ce45c3fcdb8a79ddcf48daf83e51dc4" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;#django.shortcuts.redirect&quot;&gt;&lt;code&gt;redirect()&lt;/code&gt;&lt;/a&gt; returns a temporary redirect. All of the above forms accept a &lt;code&gt;permanent&lt;/code&gt; argument; if set to &lt;code&gt;True&lt;/code&gt; a permanent redirect will be returned:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bf87a19b2a79208dd00c23461b41f3400b812bc" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;../../ref/settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt;&lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt;&lt;/a&gt; is set to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b374dcc5ef3445d664229d8deaf877912163088d" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;../../ref/settings#std:setting-SESSION_EXPIRE_AT_BROWSER_CLOSE&quot;&gt;&lt;code&gt;SESSION_EXPIRE_AT_BROWSER_CLOSE&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;False&lt;/code&gt;, which means session cookies will be stored in users&amp;rsquo; browsers for as long as &lt;a href=&quot;../../ref/settings#std:setting-SESSION_COOKIE_AGE&quot;&gt;&lt;code&gt;SESSION_COOKIE_AGE&lt;/code&gt;&lt;/a&gt;. Use this if you don&amp;rsquo;t want people to have to log in every time they open a browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e597adc1b942c4024654e35e3af6f395093eb327" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;../ref/django-admin#django-admin-inspectdb&quot;&gt;&lt;code&gt;inspectdb&lt;/code&gt;&lt;/a&gt; creates unmanaged models. That is, &lt;code&gt;managed = False&lt;/code&gt; in the model&amp;rsquo;s &lt;code&gt;Meta&lt;/code&gt; class tells Django not to manage each table&amp;rsquo;s creation, modification, and deletion:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7c9b01007ed5d3f2b59fc441a13fa67ed6bc16e" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; contains the following apps, all of which come with Django:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="763c7b8e04451adc9a4904f68068f804e1c2cc21" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;https://github.com/django/django/blob/master/django/conf/app_template&quot;&gt;the new directory&lt;/a&gt; contains a &lt;code&gt;models.py&lt;/code&gt; file and other app template files. If only the app name is given, the app directory will be created in the current working directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="796ca62db9b760fe1ade79ed8c372b41694ae671" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;https://github.com/django/django/blob/master/django/conf/project_template&quot;&gt;the new directory&lt;/a&gt; contains &lt;code&gt;manage.py&lt;/code&gt; and a project package (containing a &lt;code&gt;settings.py&lt;/code&gt; and other files).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fba45fef5bf8c2ca4a5e57fa55d79ff5a3e0c592" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;AuthenticationForm&lt;/code&gt; rejects users whose &lt;code&gt;is_active&lt;/code&gt; flag is set to &lt;code&gt;False&lt;/code&gt;. You may override this behavior with a custom policy to determine which users can log in. Do this with a custom form that subclasses &lt;code&gt;AuthenticationForm&lt;/code&gt; and overrides the &lt;code&gt;confirm_login_allowed()&lt;/code&gt; method. This method should raise a &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; if the given user may not log in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3355e177bd174c2b8232cf042eb4b27741bada09" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;BinaryField&lt;/code&gt; sets &lt;a href=&quot;#django.db.models.Field.editable&quot;&gt;&lt;code&gt;editable&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;False&lt;/code&gt;, in which case it can&amp;rsquo;t be included in a &lt;a href=&quot;../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;ModelForm&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3438b5135d6b792aacfce1c22f9e18dcf874a67" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;RunPython&lt;/code&gt; will run its contents inside a transaction on databases that do not support DDL transactions (for example, MySQL and Oracle). This should be safe, but may cause a crash if you attempt to use the &lt;code&gt;schema_editor&lt;/code&gt; provided on these backends; in this case, pass &lt;code&gt;atomic=False&lt;/code&gt; to the &lt;code&gt;RunPython&lt;/code&gt; operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31df2bf359b650c9c5953940281eed7e9d6d323b" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;StdDev&lt;/code&gt; returns the population standard deviation. However, if &lt;code&gt;sample=True&lt;/code&gt;, the return value will be the sample standard deviation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2c0c1d78fc29f2ea80a080baf027d3a3258e7a0" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;Variance&lt;/code&gt; returns the population variance. However, if &lt;code&gt;sample=True&lt;/code&gt;, the return value will be the sample variance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b5b27ae0340c785d0509ecbeb0a2141dc2f00a8" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;as_json()&lt;/code&gt; does not escape its output. If you are using it for something like AJAX requests to a form view where the client interprets the response and inserts errors into the page, you&amp;rsquo;ll want to be sure to escape the results on the client-side to avoid the possibility of a cross-site scripting attack. You can do this in JavaScript with &lt;code&gt;element.textContent = errorText&lt;/code&gt; or with jQuery&amp;rsquo;s &lt;code&gt;$(el).text(errorText)&lt;/code&gt; (rather than its &lt;code&gt;.html()&lt;/code&gt; function).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39e3d645e797319de56f1af001219394cd2cc3a9" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;auto_id&lt;/code&gt; is set to the string &lt;code&gt;'id_%s'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7e9c1fe4227e00f6c96e5ab6773325194881ac8" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;available_apps&lt;/code&gt; is set to &lt;code&gt;None&lt;/code&gt;. After each test, Django calls &lt;a href=&quot;../../ref/django-admin#django-admin-flush&quot;&gt;&lt;code&gt;flush&lt;/code&gt;&lt;/a&gt; to reset the database state. This empties all tables and emits the &lt;a href=&quot;../../ref/signals#django.db.models.signals.post_migrate&quot;&gt;&lt;code&gt;post_migrate&lt;/code&gt;&lt;/a&gt; signal, which recreates one content type and four permissions for each model. This operation gets expensive proportionally to the number of models.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d257f37a44bbdabb09f52d07d65972f0af1c01b" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;inspectdb&lt;/code&gt; creates unmanaged models. That is, &lt;code&gt;managed = False&lt;/code&gt; in the model&amp;rsquo;s &lt;code&gt;Meta&lt;/code&gt; class tells Django not to manage each table&amp;rsquo;s creation, modification, and deletion. If you do want to allow Django to manage the table&amp;rsquo;s lifecycle, you&amp;rsquo;ll need to change the &lt;a href=&quot;models/options#django.db.models.Options.managed&quot;&gt;&lt;code&gt;managed&lt;/code&gt;&lt;/a&gt; option to &lt;code&gt;True&lt;/code&gt; (or remove it because &lt;code&gt;True&lt;/code&gt; is its default value).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a16208c9970ab3b20072e917cd324f2924c2c83" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;is_safe&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;, and you can omit it from any filters where it isn&amp;rsquo;t required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f707503a34a0b1f695e68eae89c4aa403264257" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;is_secure()&lt;/code&gt; determines if a request is secure by confirming that a requested URL uses &lt;code&gt;https://&lt;/code&gt;. This method is important for Django&amp;rsquo;s CSRF protection, and it may be used by your own code or third-party apps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c60e61b4d57d0279b6aaa3d91afc2731459b7de" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;lookup_allowed()&lt;/code&gt; allows access to a model&amp;rsquo;s local fields, field paths used in &lt;a href=&quot;#django.contrib.admin.ModelAdmin.list_filter&quot;&gt;&lt;code&gt;list_filter&lt;/code&gt;&lt;/a&gt; (but not paths from &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_list_filter&quot;&gt;&lt;code&gt;get_list_filter()&lt;/code&gt;&lt;/a&gt;), and lookups required for &lt;a href=&quot;../../models/fields#django.db.models.ForeignKey.limit_choices_to&quot;&gt;&lt;code&gt;limit_choices_to&lt;/code&gt;&lt;/a&gt; to function correctly in &lt;a href=&quot;#django.contrib.admin.ModelAdmin.raw_id_fields&quot;&gt;&lt;code&gt;raw_id_fields&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b5839ea5bcb8e808e1acee60c72db972a736644" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;max_num&lt;/code&gt; only affects how many forms are displayed and does not affect validation. If &lt;code&gt;validate_max=True&lt;/code&gt; is passed to the &lt;a href=&quot;../../ref/forms/formsets#django.forms.formsets.formset_factory&quot;&gt;&lt;code&gt;formset_factory()&lt;/code&gt;&lt;/a&gt;, then &lt;code&gt;max_num&lt;/code&gt; will affect validation. See &lt;a href=&quot;#validate-max&quot;&gt;validate_max&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4db2d65717ec90fd6c19b009eef8a476e142a64" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;save()&lt;/code&gt; populates the &lt;code&gt;context&lt;/code&gt; with the same variables that &lt;a href=&quot;#django.contrib.auth.views.PasswordResetView&quot;&gt;&lt;code&gt;PasswordResetView&lt;/code&gt;&lt;/a&gt; passes to its email context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1cadc59a100b071402a4c6f0ce408b53a93b64e" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;save_as&lt;/code&gt; is set to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7131eb9d215a63ebdf9efd75cc05fe2f15a2258" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;save_as_continue&lt;/code&gt; is set to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="751722daaab98724ff464d77f93ca2177e2c3301" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;save_on_top&lt;/code&gt; is set to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1039e2fb966e8e902075281a6f4bcd0ead5b3c2a" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;select_for_update()&lt;/code&gt; locks all rows that are selected by the query. For example, rows of related objects specified in &lt;a href=&quot;#django.db.models.query.QuerySet.select_related&quot;&gt;&lt;code&gt;select_related()&lt;/code&gt;&lt;/a&gt; are locked in addition to rows of the queryset&amp;rsquo;s model. If this isn&amp;rsquo;t desired, specify the related objects you want to lock in &lt;code&gt;select_for_update(of=(...))&lt;/code&gt; using the same fields syntax as &lt;a href=&quot;#django.db.models.query.QuerySet.select_related&quot;&gt;&lt;code&gt;select_related()&lt;/code&gt;&lt;/a&gt;. Use the value &lt;code&gt;'self'&lt;/code&gt; to refer to the queryset&amp;rsquo;s model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89a2a077095cdc823e533145146c1d321447822c" translate="yes" xml:space="preserve">
          <source>By default, Django adds a &lt;code&gt;Manager&lt;/code&gt; with the name &lt;code&gt;objects&lt;/code&gt; to every Django model class. However, if you want to use &lt;code&gt;objects&lt;/code&gt; as a field name, or if you want to use a name other than &lt;code&gt;objects&lt;/code&gt; for the &lt;code&gt;Manager&lt;/code&gt;, you can rename it on a per-model basis. To rename the &lt;code&gt;Manager&lt;/code&gt; for a given class, define a class attribute of type &lt;code&gt;models.Manager()&lt;/code&gt; on that model. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3c98bef4586da244addd6c04c7a757ef07d5422" translate="yes" xml:space="preserve">
          <source>By default, Django configures the following logging:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4fa8cf870695b473dc00ee9fd66e5e90e008bcf" translate="yes" xml:space="preserve">
          <source>By default, Django displays the &lt;code&gt;str()&lt;/code&gt; of each object. But sometimes it&amp;rsquo;d be more helpful if we could display individual fields. To do that, use the &lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_display&quot;&gt;&lt;code&gt;list_display&lt;/code&gt;&lt;/a&gt; admin option, which is a tuple of field names to display, as columns, on the change list page for the object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4523cea84040a5ecbce055a731ff0103e2e1367f" translate="yes" xml:space="preserve">
          <source>By default, Django figures out a database table name by joining the model&amp;rsquo;s &amp;ldquo;app label&amp;rdquo; &amp;ndash; the name you used in &lt;code&gt;manage.py startapp&lt;/code&gt; &amp;ndash; to the model&amp;rsquo;s class name, with an underscore between them. In the example we&amp;rsquo;ve assumed that the &lt;code&gt;Person&lt;/code&gt; model lives in an app named &lt;code&gt;myapp&lt;/code&gt;, so its table would be &lt;code&gt;myapp_person&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66bb6b1e06547b1878e5d828b3f013d4ca0606ff" translate="yes" xml:space="preserve">
          <source>By default, Django gives each model the following field:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14fdca39f334e6cb2e8dbfba9d9e6db0a1d40b6f" translate="yes" xml:space="preserve">
          <source>By default, Django looks in the &lt;code&gt;fixtures&lt;/code&gt; directory inside each app for fixtures. You can set the &lt;a href=&quot;../ref/settings#std:setting-FIXTURE_DIRS&quot;&gt;&lt;code&gt;FIXTURE_DIRS&lt;/code&gt;&lt;/a&gt; setting to a list of additional directories where Django should look.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f65d06e293864e5fb6e7a70cdcf86c2e313abed" translate="yes" xml:space="preserve">
          <source>By default, Django only saves to the session database when the session has been modified &amp;ndash; that is if any of its dictionary values have been assigned or deleted:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2431d8ad8d3f578c6fd489c2c79ed71958fe3bf1" translate="yes" xml:space="preserve">
          <source>By default, Django sends email from &lt;a href=&quot;mailto:webmaster%40localhost&quot;&gt;webmaster@localhost&lt;/a&gt; and &lt;a href=&quot;mailto:root%40localhost&quot;&gt;root@localhost&lt;/a&gt;. However, some mail providers reject email from these addresses. To use different sender addresses, modify the &lt;a href=&quot;../../ref/settings#std:setting-DEFAULT_FROM_EMAIL&quot;&gt;&lt;code&gt;DEFAULT_FROM_EMAIL&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/settings#std:setting-SERVER_EMAIL&quot;&gt;&lt;code&gt;SERVER_EMAIL&lt;/code&gt;&lt;/a&gt; settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8db9d3a9be8d19a6b2f2bf780986e3120a2f3b1e" translate="yes" xml:space="preserve">
          <source>By default, Django serializes session data using JSON. You can use the &lt;a href=&quot;../../ref/settings#std:setting-SESSION_SERIALIZER&quot;&gt;&lt;code&gt;SESSION_SERIALIZER&lt;/code&gt;&lt;/a&gt; setting to customize the session serialization format. Even with the caveats described in &lt;a href=&quot;#custom-serializers&quot;&gt;Write your own serializer&lt;/a&gt;, we highly recommend sticking with JSON serialization &lt;em&gt;especially if you are using the cookie backend&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6aac2f971616a532d8fcf9c5ead885d7ee8d507" translate="yes" xml:space="preserve">
          <source>By default, Django stores files locally, using the &lt;a href=&quot;../ref/settings#std:setting-MEDIA_ROOT&quot;&gt;&lt;code&gt;MEDIA_ROOT&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/settings#std:setting-MEDIA_URL&quot;&gt;&lt;code&gt;MEDIA_URL&lt;/code&gt;&lt;/a&gt; settings. The examples below assume that you&amp;rsquo;re using these defaults.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83e96daab66ce2c8db85e901a32da6d8c175e10f" translate="yes" xml:space="preserve">
          <source>By default, Django stores sessions in your database (using the model &lt;code&gt;django.contrib.sessions.models.Session&lt;/code&gt;). Though this is convenient, in some setups it&amp;rsquo;s faster to store session data elsewhere, so Django can be configured to store session data on your filesystem or in your cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43b76a73f32b0191f0b7a16b050fdff8ae887047" translate="yes" xml:space="preserve">
          <source>By default, Django uses a filesystem-based template loader, but Django comes with a few other template loaders, which know how to load templates from other sources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50132fad56367cfcf6ca1c6f25897ec22d538343" translate="yes" xml:space="preserve">
          <source>By default, Django uses an instance of the &lt;code&gt;Model._base_manager&lt;/code&gt; manager class when accessing related objects (i.e. &lt;code&gt;choice.question&lt;/code&gt;), not the &lt;code&gt;_default_manager&lt;/code&gt; on the related object. This is because Django needs to be able to retrieve the related object, even if it would otherwise be filtered out (and hence be inaccessible) by the default manager.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c13445dbe2ebefb07541aa101fbacfdda1100b1a" translate="yes" xml:space="preserve">
          <source>By default, Django uses the &lt;a href=&quot;https://en.wikipedia.org/wiki/PBKDF2&quot;&gt;PBKDF2&lt;/a&gt; algorithm with a SHA256 hash, a password stretching mechanism recommended by &lt;a href=&quot;https://dx.doi.org/10.6028/NIST.SP.800-132&quot;&gt;NIST&lt;/a&gt;. This should be sufficient for most users: it&amp;rsquo;s quite secure, requiring massive amounts of computing time to break.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62cc122acf0974f8c7b6e199128915e27d8300dd" translate="yes" xml:space="preserve">
          <source>By default, Django will assume all databases depend on the &lt;code&gt;default&lt;/code&gt; database and therefore always create the &lt;code&gt;default&lt;/code&gt; database first. However, no guarantees are made on the creation order of any other databases in your test setup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52d6fd8840fd6f8d869f41583fc3813fcfa7f8d2" translate="yes" xml:space="preserve">
          <source>By default, Django will send email from &lt;a href=&quot;mailto:root%40localhost&quot;&gt;root@localhost&lt;/a&gt;. However, some mail providers reject all email from this address. To use a different sender address, modify the &lt;a href=&quot;../ref/settings#std:setting-SERVER_EMAIL&quot;&gt;&lt;code&gt;SERVER_EMAIL&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a719a3d5d6a53e07ee4805a64f9f531534a713b2" translate="yes" xml:space="preserve">
          <source>By default, Django&amp;rsquo;s &lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt; emulates the SQL constraint &lt;code&gt;ON DELETE CASCADE&lt;/code&gt; &amp;mdash; in other words, any objects with foreign keys pointing at the objects to be deleted will be deleted along with them. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee238cb006e049549c22fc61d2ea0ce06238c18f" translate="yes" xml:space="preserve">
          <source>By default, Django&amp;rsquo;s admin uses a select-box interface (&amp;lt;select&amp;gt;) for fields that are &lt;code&gt;ForeignKey&lt;/code&gt; or have &lt;code&gt;choices&lt;/code&gt; set. If a field is present in &lt;code&gt;radio_fields&lt;/code&gt;, Django will use a radio-button interface instead. Assuming &lt;code&gt;group&lt;/code&gt; is a &lt;code&gt;ForeignKey&lt;/code&gt; on the &lt;code&gt;Person&lt;/code&gt; model:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="241b0dcffeb732299248f8a27799d8cea1154d91" translate="yes" xml:space="preserve">
          <source>By default, Django&amp;rsquo;s admin uses a select-box interface (&amp;lt;select&amp;gt;) for fields that are &lt;code&gt;ForeignKey&lt;/code&gt;. Sometimes you don&amp;rsquo;t want to incur the overhead of having to select all the related instances to display in the drop-down.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25a3c3fc1a785fb5e5a60500f146d20a0e203d8f" translate="yes" xml:space="preserve">
          <source>By default, Django&amp;rsquo;s cache system creates its cache keys using the requested fully-qualified URL &amp;ndash; e.g., &lt;code&gt;&quot;https://www.example.com/stories/2005/?order_by=author&quot;&lt;/code&gt;. This means every request to that URL will use the same cached version, regardless of user-agent differences such as cookies or language preferences. However, if this page produces different content based on some difference in request headers &amp;ndash; such as a cookie, or a language, or a user-agent &amp;ndash; you&amp;rsquo;ll need to use the &lt;code&gt;Vary&lt;/code&gt; header to tell caching mechanisms that the page output depends on those things.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="047cc3f39eda62ed2b989307ca9e95b2025696de" translate="yes" xml:space="preserve">
          <source>By default, a &amp;lsquo;403 Forbidden&amp;rsquo; response is sent to the user if an incoming request fails the checks performed by &lt;code&gt;CsrfViewMiddleware&lt;/code&gt;. This should usually only be seen when there is a genuine Cross Site Request Forgery, or when, due to a programming error, the CSRF token has not been included with a POST form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="099aed6c6c75f6dafea1ba3efd1db8b7348db65a" translate="yes" xml:space="preserve">
          <source>By default, a &lt;a href=&quot;../../models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; is displayed in the admin site with a &lt;code&gt;&amp;lt;select multiple&amp;gt;&lt;/code&gt;. However, multiple-select boxes can be difficult to use when selecting many items. Adding a &lt;a href=&quot;../../models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; to this list will instead use a nifty unobtrusive JavaScript &amp;ldquo;filter&amp;rdquo; interface that allows searching within the options. The unselected and selected options appear in two boxes side by side. See &lt;a href=&quot;#django.contrib.admin.ModelAdmin.filter_vertical&quot;&gt;&lt;code&gt;filter_vertical&lt;/code&gt;&lt;/a&gt; to use a vertical interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffee4a96e934b7be37c85bf6953bfafb1516419d" translate="yes" xml:space="preserve">
          <source>By default, a &lt;code&gt;HEAD&lt;/code&gt; request will be delegated to &lt;code&gt;get()&lt;/code&gt;. If you need to handle &lt;code&gt;HEAD&lt;/code&gt; requests in a different way than &lt;code&gt;GET&lt;/code&gt;, you can override the &lt;code&gt;head()&lt;/code&gt; method. See &lt;a href=&quot;../../topics/class-based-views/index#supporting-other-http-methods&quot;&gt;Supporting other HTTP methods&lt;/a&gt; for an example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ab85f179f87b7e9059c5a2d8e97db2555d7d9d1" translate="yes" xml:space="preserve">
          <source>By default, a &lt;code&gt;QuerySet&lt;/code&gt; will not eliminate duplicate rows. In practice, this is rarely a problem, because simple queries such as &lt;code&gt;Blog.objects.all()&lt;/code&gt; don&amp;rsquo;t introduce the possibility of duplicate result rows. However, if your query spans multiple tables, it&amp;rsquo;s possible to get duplicate results when a &lt;code&gt;QuerySet&lt;/code&gt; is evaluated. That&amp;rsquo;s when you&amp;rsquo;d use &lt;code&gt;distinct()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ee67621be09152cc7085f4ab857502f91a2d6f6" translate="yes" xml:space="preserve">
          <source>By default, a call to &lt;code&gt;get_connection()&lt;/code&gt; will return an instance of the email backend specified in &lt;a href=&quot;../ref/settings#std:setting-EMAIL_BACKEND&quot;&gt;&lt;code&gt;EMAIL_BACKEND&lt;/code&gt;&lt;/a&gt;. If you specify the &lt;code&gt;backend&lt;/code&gt; argument, an instance of that backend will be instantiated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3832b1492479c9c292aedc644abbdd13b8162655" translate="yes" xml:space="preserve">
          <source>By default, a call to delete an existing object will be executed on the same database that was used to retrieve the object in the first place:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="660e9c2bec7bd66769c17f1d2bab7dbc9f47a5c5" translate="yes" xml:space="preserve">
          <source>By default, admin widgets for many-to-many relations will be displayed on whichever model contains the actual reference to the &lt;a href=&quot;../../models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt;. Depending on your &lt;code&gt;ModelAdmin&lt;/code&gt; definition, each many-to-many field in your model will be represented by a standard HTML &lt;code&gt;&amp;lt;select multiple&amp;gt;&lt;/code&gt;, a horizontal or vertical filter, or a &lt;code&gt;raw_id_admin&lt;/code&gt; widget. However, it is also possible to replace these widgets with inlines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a124ee7c24bef6658434d9dc955d2e48dd9a375e" translate="yes" xml:space="preserve">
          <source>By default, after an action is performed the user is redirected back to the original change list page. However, some actions, especially more complex ones, will need to return intermediate pages. For example, the built-in delete action asks for confirmation before deleting the selected objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69c36def4e619cd2bfa968a8266ad7a530f1817f" translate="yes" xml:space="preserve">
          <source>By default, all apps will be checked. You can check a subset of apps by providing a list of app labels as arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64b97b34dd35ba558901be5203051f1364c73092" translate="yes" xml:space="preserve">
          <source>By default, all matching locations are found. To only return the first match for each relative path, use the &lt;code&gt;--first&lt;/code&gt; option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e24a7a8f3cec0088e1993cf71a0c6faf39464ad" translate="yes" xml:space="preserve">
          <source>By default, an instance of the email backend specified in &lt;a href=&quot;../ref/settings#std:setting-EMAIL_BACKEND&quot;&gt;&lt;code&gt;EMAIL_BACKEND&lt;/code&gt;&lt;/a&gt; will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4095135a9ecffea85258cf1ddc177eaca8597a9c" translate="yes" xml:space="preserve">
          <source>By default, any key request will automatically include the site default cache key version. However, the primitive cache functions all include a &lt;code&gt;version&lt;/code&gt; argument, so you can specify a particular cache key version to set or get. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e5d75d1b984eeb57834a5db618a90cbee5c793b" translate="yes" xml:space="preserve">
          <source>By default, any log message that meets log level requirements will be handled. However, by installing a filter, you can place additional criteria on the logging process. For example, you could install a filter that only allows &lt;code&gt;ERROR&lt;/code&gt; messages from a particular source to be emitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ed6d08d4bdc2598ddc552cb3b82f26f4033a0a3" translate="yes" xml:space="preserve">
          <source>By default, any object using a static &lt;code&gt;Media&lt;/code&gt; definition will inherit all the assets associated with the parent widget. This occurs regardless of how the parent defines its own requirements. For example, if we were to extend our basic Calendar widget from the example above:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc74fce2ded58569d277ca1ac0b3bce0c7e390a6" translate="yes" xml:space="preserve">
          <source>By default, collected files receive permissions from &lt;a href=&quot;../settings#std:setting-FILE_UPLOAD_PERMISSIONS&quot;&gt;&lt;code&gt;FILE_UPLOAD_PERMISSIONS&lt;/code&gt;&lt;/a&gt; and collected directories receive permissions from &lt;a href=&quot;../settings#std:setting-FILE_UPLOAD_DIRECTORY_PERMISSIONS&quot;&gt;&lt;code&gt;FILE_UPLOAD_DIRECTORY_PERMISSIONS&lt;/code&gt;&lt;/a&gt;. If you would like different permissions for these files and/or directories, you can subclass either of the &lt;a href=&quot;#staticfiles-storages&quot;&gt;static files storage classes&lt;/a&gt; and specify the &lt;code&gt;file_permissions_mode&lt;/code&gt; and/or &lt;code&gt;directory_permissions_mode&lt;/code&gt; parameters, respectively. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b7a0dcd80b8cdff2b90ee60a88853b994ee1d25" translate="yes" xml:space="preserve">
          <source>By default, each &lt;code&gt;Field&lt;/code&gt; class assumes the value is required, so if you pass an empty value &amp;ndash; either &lt;code&gt;None&lt;/code&gt; or the empty string (&lt;code&gt;&quot;&quot;&lt;/code&gt;) &amp;ndash; then &lt;code&gt;clean()&lt;/code&gt; will raise a &lt;code&gt;ValidationError&lt;/code&gt; exception:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aff43728c24d95c555a12771c6f1637c955b36ca" translate="yes" xml:space="preserve">
          <source>By default, feeds produced in this framework use RSS 2.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bad5dcbca8a4e7babba3e817398b7347bd1c46d0" translate="yes" xml:space="preserve">
          <source>By default, fixtures are only loaded into the &lt;code&gt;default&lt;/code&gt; database. If you are using multiple databases and set &lt;a href=&quot;#django.test.TransactionTestCase.databases&quot;&gt;&lt;code&gt;TransactionTestCase.databases&lt;/code&gt;&lt;/a&gt;, fixtures will be loaded into all specified databases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ea67f185a46403f05b66ef175b8dd27f7f9e75a" translate="yes" xml:space="preserve">
          <source>By default, flatpages are rendered via the template &lt;code&gt;flatpages/default.html&lt;/code&gt;, but you can override that for a particular flatpage: in the admin, a collapsed fieldset titled &amp;ldquo;Advanced options&amp;rdquo; (clicking will expand it) contains a field for specifying a template name. If you&amp;rsquo;re creating a flat page via the Python API you can set the template name as the field &lt;code&gt;template_name&lt;/code&gt; on the &lt;code&gt;FlatPage&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffa64f0dc535a3e6328b636928d139b03aef4a86" translate="yes" xml:space="preserve">
          <source>By default, forms use &lt;code&gt;django.forms.utils.ErrorList&lt;/code&gt; to format validation errors. If you&amp;rsquo;d like to use an alternate class for displaying errors, you can pass that in at construction time:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79b8cb197e9ad200179d59e6fcd76fe9a7f86f82" translate="yes" xml:space="preserve">
          <source>By default, if an uploaded file is smaller than 2.5 megabytes, Django will hold the entire contents of the upload in memory. This means that saving the file involves only a read from memory and a write to disk and thus is very fast.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b304d0eaef1bfcde05509e4432d0cfba116239c8" translate="yes" xml:space="preserve">
          <source>By default, if both &lt;code&gt;form_class&lt;/code&gt; and &lt;code&gt;choices_form_class&lt;/code&gt; are &lt;code&gt;None&lt;/code&gt;, it uses &lt;a href=&quot;../forms/fields#django.forms.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt;. If the field has &lt;a href=&quot;#django.db.models.Field.choices&quot;&gt;&lt;code&gt;choices&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;choices_form_class&lt;/code&gt; isn&amp;rsquo;t specified, it uses &lt;a href=&quot;../forms/fields#django.forms.TypedChoiceField&quot;&gt;&lt;code&gt;TypedChoiceField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="640277932876e1f5e964e545945a1d3243bacf42" translate="yes" xml:space="preserve">
          <source>By default, indexes are created with an ascending order for each column. To define an index with a descending order for a column, add a hyphen before the field&amp;rsquo;s name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10d56c35bf9e30223bbe68e3953921129582299d" translate="yes" xml:space="preserve">
          <source>By default, it displays all the apps in &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; that have been registered with the admin application, in alphabetical order. You may want to make significant changes to the layout. After all, the index is probably the most important page of the admin, and it should be easy to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e73b5b8a0aeda43bc28c2cd88abfd1e2851d04e7" translate="yes" xml:space="preserve">
          <source>By default, management commands are executed with the current active locale.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d6c0354b373c788a2ffee3e4e7504ef01726e3f" translate="yes" xml:space="preserve">
          <source>By default, non-fatal error notifications are printed to &lt;code&gt;sys.stdout&lt;/code&gt;, but this keyword may be set to disable these notifications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d9714230ce9793bba7e47fea39a4acdc5e5b5be" translate="yes" xml:space="preserve">
          <source>By default, only the &lt;code&gt;default&lt;/code&gt; database will be wrapped in a transaction during a &lt;code&gt;TestCase&lt;/code&gt;&amp;rsquo;s execution and attempts to query other databases will result in assertion errors to prevent state leaking between tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59a817490e730f892b43cd4e00000ea6313a56ee" translate="yes" xml:space="preserve">
          <source>By default, results returned by a &lt;code&gt;QuerySet&lt;/code&gt; are ordered by the ordering tuple given by the &lt;code&gt;ordering&lt;/code&gt; option in the model&amp;rsquo;s &lt;code&gt;Meta&lt;/code&gt;. You can override this on a per-&lt;code&gt;QuerySet&lt;/code&gt; basis by using the &lt;code&gt;order_by&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a1f4daeaf09cb1e740e1ce47725d9bddcb66e9f" translate="yes" xml:space="preserve">
          <source>By default, returns &lt;code&gt;False&lt;/code&gt; for hidden widgets and &lt;code&gt;True&lt;/code&gt; otherwise. Special cases are &lt;a href=&quot;#django.forms.ClearableFileInput&quot;&gt;&lt;code&gt;ClearableFileInput&lt;/code&gt;&lt;/a&gt;, which returns &lt;code&gt;False&lt;/code&gt; when &lt;code&gt;initial&lt;/code&gt; is set, and &lt;a href=&quot;#django.forms.CheckboxSelectMultiple&quot;&gt;&lt;code&gt;CheckboxSelectMultiple&lt;/code&gt;&lt;/a&gt;, which always returns &lt;code&gt;False&lt;/code&gt; because browser validation would require all checkboxes to be checked instead of at least one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6634d8c32e80a484be41d7d16cb9bfe5e83c108" translate="yes" xml:space="preserve">
          <source>By default, the &lt;a href=&quot;#std:templatetag-get_flatpages&quot;&gt;&lt;code&gt;get_flatpages&lt;/code&gt;&lt;/a&gt; template tag will only show flatpages that are marked &lt;code&gt;registration_required = False&lt;/code&gt;. If you want to display registration-protected flatpages, you need to specify an authenticated user using a &lt;code&gt;for&lt;/code&gt; clause.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d944f37a8346d7136a820d62a17bf0802066a0e" translate="yes" xml:space="preserve">
          <source>By default, the &lt;a href=&quot;../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt; generic view uses a template called &lt;code&gt;&amp;lt;app name&amp;gt;/&amp;lt;model name&amp;gt;_detail.html&lt;/code&gt;. In our case, it would use the template &lt;code&gt;&quot;polls/question_detail.html&quot;&lt;/code&gt;. The &lt;code&gt;template_name&lt;/code&gt; attribute is used to tell Django to use a specific template name instead of the autogenerated default template name. We also specify the &lt;code&gt;template_name&lt;/code&gt; for the &lt;code&gt;results&lt;/code&gt; list view &amp;ndash; this ensures that the results view and the detail view have a different appearance when rendered, even though they&amp;rsquo;re both a &lt;a href=&quot;../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt; behind the scenes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="620d51650e80bad341e31d8237c208818c37e19c" translate="yes" xml:space="preserve">
          <source>By default, the &lt;a href=&quot;../ref/django-admin#django-admin-runserver&quot;&gt;&lt;code&gt;runserver&lt;/code&gt;&lt;/a&gt; command starts the development server on the internal IP at port 8000.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="731f12531f1d77897db3cb12a8abd0c64e27b70b" translate="yes" xml:space="preserve">
          <source>By default, the &lt;a href=&quot;../ref/settings#std:setting-LOGGING&quot;&gt;&lt;code&gt;LOGGING&lt;/code&gt;&lt;/a&gt; setting is merged with &lt;a href=&quot;#default-logging-configuration&quot;&gt;Django&amp;rsquo;s default logging configuration&lt;/a&gt; using the following scheme.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d881d13c27be262c330be0f2b538abac4a5f2d2" translate="yes" xml:space="preserve">
          <source>By default, the &lt;a href=&quot;settings#std:setting-DEFAULT_CHARSET&quot;&gt;&lt;code&gt;DEFAULT_CHARSET&lt;/code&gt;&lt;/a&gt; setting is used as the assumed encoding for form data. If you need to change this for a particular form, you can set the &lt;code&gt;encoding&lt;/code&gt; attribute on an &lt;code&gt;HttpRequest&lt;/code&gt; instance. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a9c62f322b4338c7957f84443f6b57a434afcca" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;Signer&lt;/code&gt; class uses the &lt;a href=&quot;../ref/settings#std:setting-SECRET_KEY&quot;&gt;&lt;code&gt;SECRET_KEY&lt;/code&gt;&lt;/a&gt; setting to generate signatures. You can use a different secret by passing it to the &lt;code&gt;Signer&lt;/code&gt; constructor:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="029202ec108453b92fc0f661e53d449b64d142cf" translate="yes" xml:space="preserve">
          <source>By default, the MIME type of the &lt;code&gt;body&lt;/code&gt; parameter in an &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;&quot;text/plain&quot;&lt;/code&gt;. It is good practice to leave this alone, because it guarantees that any recipient will be able to read the email, regardless of their mail client. However, if you are confident that your recipients can handle an alternative content type, you can use the &lt;code&gt;content_subtype&lt;/code&gt; attribute on the &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; class to change the main content type. The major type will always be &lt;code&gt;&quot;text&quot;&lt;/code&gt;, but you can change the subtype. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2975ada45be6c550edeb43c254b0bd4341da731" translate="yes" xml:space="preserve">
          <source>By default, the Oracle backend uses a &lt;code&gt;RETURNING INTO&lt;/code&gt; clause to efficiently retrieve the value of an &lt;code&gt;AutoField&lt;/code&gt; when inserting new rows. This behavior may result in a &lt;code&gt;DatabaseError&lt;/code&gt; in certain unusual setups, such as when inserting into a remote table, or into a view with an &lt;code&gt;INSTEAD OF&lt;/code&gt; trigger. The &lt;code&gt;RETURNING INTO&lt;/code&gt; clause can be disabled by setting the &lt;code&gt;use_returning_into&lt;/code&gt; option of the database configuration to &lt;code&gt;False&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10bcf238e4c2c0929a750f612eba603fdd7cd108" translate="yes" xml:space="preserve">
          <source>By default, the PostGIS installer on Windows includes a template spatial database entitled &lt;code&gt;template_postgis&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c95b26306f63e8210b753a104e04be5ef76d60a2" translate="yes" xml:space="preserve">
          <source>By default, the Python DB API will return results without their field names, which means you end up with a &lt;code&gt;list&lt;/code&gt; of values, rather than a &lt;code&gt;dict&lt;/code&gt;. At a small performance and memory cost, you can return results as a &lt;code&gt;dict&lt;/code&gt; by using something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcd62cbe9226d5a82908a114072a806156c631be" translate="yes" xml:space="preserve">
          <source>By default, the admin uses a select-box interface (&lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;) for those fields. Sometimes you don&amp;rsquo;t want to incur the overhead of selecting all the related instances to display in the dropdown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e03dc211d8b2ed013dd2ba41b2af67a4aa8e556b" translate="yes" xml:space="preserve">
          <source>By default, the cache tag will try to use the cache called &amp;ldquo;template_fragments&amp;rdquo;. If no such cache exists, it will fall back to using the default cache. You may select an alternate cache backend to use with the &lt;code&gt;using&lt;/code&gt; keyword argument, which must be the last argument to the tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39f73968f384cdab8be97039a6628c4fffd3c0cf" translate="yes" xml:space="preserve">
          <source>By default, the change list page allows sorting by all model fields (and callables that have the &lt;code&gt;admin_order_field&lt;/code&gt; property) specified in &lt;a href=&quot;#django.contrib.admin.ModelAdmin.list_display&quot;&gt;&lt;code&gt;list_display&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b1947ebba5353b1443839d253e5cab1e4417bed" translate="yes" xml:space="preserve">
          <source>By default, the change list page will link the first column &amp;ndash; the first field specified in &lt;code&gt;list_display&lt;/code&gt; &amp;ndash; to the change page for each item. But &lt;code&gt;list_display_links&lt;/code&gt; lets you change this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70cebcccd9e4de08a9bdda825103487c596787e6" translate="yes" xml:space="preserve">
          <source>By default, the comparison is also ordering dependent. If &lt;code&gt;qs&lt;/code&gt; doesn&amp;rsquo;t provide an implicit ordering, you can set the &lt;code&gt;ordered&lt;/code&gt; parameter to &lt;code&gt;False&lt;/code&gt;, which turns the comparison into a &lt;code&gt;collections.Counter&lt;/code&gt; comparison. If the order is undefined (if the given &lt;code&gt;qs&lt;/code&gt; isn&amp;rsquo;t ordered and the comparison is against more than one ordered values), a &lt;code&gt;ValueError&lt;/code&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc7c0a91c830ec3b2833f4277ed815b0784816db" translate="yes" xml:space="preserve">
          <source>By default, the configuration uses SQLite. If you&amp;rsquo;re new to databases, or you&amp;rsquo;re just interested in trying Django, this is the easiest choice. SQLite is included in Python, so you won&amp;rsquo;t need to install anything else to support your database. When starting your first real project, however, you may want to use a more scalable database like PostgreSQL, to avoid database-switching headaches down the road.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aa0bfe9713f717ec0a3c773a4b5a81a940b8e8e" translate="yes" xml:space="preserve">
          <source>By default, the development server doesn&amp;rsquo;t serve any static files for your site (such as CSS files, images, things under &lt;a href=&quot;settings#std:setting-MEDIA_URL&quot;&gt;&lt;code&gt;MEDIA_URL&lt;/code&gt;&lt;/a&gt; and so forth). If you want to configure Django to serve static media, read &lt;a href=&quot;../howto/static-files/index&quot;&gt;Managing static files (e.g. images, JavaScript, CSS)&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f58e3dd0ee4655dafce5b8858db422df970dd622" translate="yes" xml:space="preserve">
          <source>By default, the driver of the source raster is used and the name of the raster is the original name appended with &lt;code&gt;'_copy' + source_driver_name&lt;/code&gt;. A different driver or name can be specified with the &lt;code&gt;driver&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b19da54ae6331a8a2bf381559a183e56db701f7f" translate="yes" xml:space="preserve">
          <source>By default, the fields in a &lt;code&gt;ModelForm&lt;/code&gt; will not localize their data. To enable localization for fields, you can use the &lt;code&gt;localized_fields&lt;/code&gt; attribute on the &lt;code&gt;Meta&lt;/code&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f321e8127d9ac658d4b1949cc1490de438d01f32" translate="yes" xml:space="preserve">
          <source>By default, the following methods raise &lt;code&gt;NotImplementedError&lt;/code&gt; and will typically have to be overridden:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca2bffb5221d5f05b126cb02c1e20561e1923fbf" translate="yes" xml:space="preserve">
          <source>By default, the form rendering methods include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6c82cab571b8304e1b1b7e936f353a02a4240bb" translate="yes" xml:space="preserve">
          <source>By default, the microseconds part of the time value is always set to &lt;code&gt;0&lt;/code&gt;. If microseconds are required, use a subclass with the &lt;a href=&quot;#django.forms.Widget.supports_microseconds&quot;&gt;&lt;code&gt;supports_microseconds&lt;/code&gt;&lt;/a&gt; attribute set to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3a6b68e955078c44c9dcd820229284496e89bde" translate="yes" xml:space="preserve">
          <source>By default, the middleware will set the &lt;code&gt;X-Frame-Options&lt;/code&gt; header to &lt;code&gt;DENY&lt;/code&gt; for every outgoing &lt;code&gt;HttpResponse&lt;/code&gt;. If you want any other value for this header instead, set the &lt;a href=&quot;settings#std:setting-X_FRAME_OPTIONS&quot;&gt;&lt;code&gt;X_FRAME_OPTIONS&lt;/code&gt;&lt;/a&gt; setting:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29fcae8b59f0e0174123704e7fb3ff407a446248" translate="yes" xml:space="preserve">
          <source>By default, the path that the user should be redirected to upon successful authentication is stored in a query string parameter called &lt;code&gt;&quot;next&quot;&lt;/code&gt;. If you would prefer to use a different name for this parameter, &lt;a href=&quot;#django.contrib.auth.decorators.login_required&quot;&gt;&lt;code&gt;login_required()&lt;/code&gt;&lt;/a&gt; takes an optional &lt;code&gt;redirect_field_name&lt;/code&gt; parameter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d69c2cc747e1098ea4727b5082d05171bad864aa" translate="yes" xml:space="preserve">
          <source>By default, the test client will disable any CSRF checks performed by your site.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32ef3d7bec141ea4c91ac4b2829652c3c772e23f" translate="yes" xml:space="preserve">
          <source>By default, the warp functions keeps most parameters equal to the values of the original source raster, so only parameters that should be changed need to be specified. Note that this includes the driver, so for file-based rasters the warp function will create a new raster on disk.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69ff8f5f15e325f2ab63add63c8e185070bfd198" translate="yes" xml:space="preserve">
          <source>By default, this config only sends messages of level &lt;code&gt;INFO&lt;/code&gt; or higher to the console (same as Django&amp;rsquo;s default logging config, except that the default only displays log records when &lt;code&gt;DEBUG=True&lt;/code&gt;). Django does not log many such messages. With this config, however, you can also set the environment variable &lt;code&gt;DJANGO_LOG_LEVEL=DEBUG&lt;/code&gt; to see all of Django&amp;rsquo;s debug logging which is very verbose as it includes all database queries:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8936f3b8626007e68d17bdde77929a62946954af" translate="yes" xml:space="preserve">
          <source>By default, this function does not preserve topology. For example, &lt;a href=&quot;#django.contrib.gis.geos.Polygon&quot;&gt;&lt;code&gt;Polygon&lt;/code&gt;&lt;/a&gt; objects can be split, be collapsed into lines, or disappear. &lt;a href=&quot;#django.contrib.gis.geos.Polygon&quot;&gt;&lt;code&gt;Polygon&lt;/code&gt;&lt;/a&gt; holes can be created or disappear, and lines may cross. By specifying &lt;code&gt;preserve_topology=True&lt;/code&gt;, the result will have the same dimension and number of components as the input; this is significantly slower, however.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bca9facc8f3a7a02739246fa4f33411469509d03" translate="yes" xml:space="preserve">
          <source>By default, this is &lt;a href=&quot;views#django.views.defaults.bad_request&quot;&gt;&lt;code&gt;django.views.defaults.bad_request()&lt;/code&gt;&lt;/a&gt;. If you implement a custom view, be sure it accepts &lt;code&gt;request&lt;/code&gt; and &lt;code&gt;exception&lt;/code&gt; arguments and returns an &lt;a href=&quot;request-response#django.http.HttpResponseBadRequest&quot;&gt;&lt;code&gt;HttpResponseBadRequest&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d871d6917fd6adc4f716f1d8dd826642b8d0f4a" translate="yes" xml:space="preserve">
          <source>By default, this is &lt;a href=&quot;views#django.views.defaults.page_not_found&quot;&gt;&lt;code&gt;django.views.defaults.page_not_found()&lt;/code&gt;&lt;/a&gt;. If you implement a custom view, be sure it accepts &lt;code&gt;request&lt;/code&gt; and &lt;code&gt;exception&lt;/code&gt; arguments and returns an &lt;a href=&quot;request-response#django.http.HttpResponseNotFound&quot;&gt;&lt;code&gt;HttpResponseNotFound&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d0a3321b10650c4b923bda4022a187e8881c185" translate="yes" xml:space="preserve">
          <source>By default, this is &lt;a href=&quot;views#django.views.defaults.permission_denied&quot;&gt;&lt;code&gt;django.views.defaults.permission_denied()&lt;/code&gt;&lt;/a&gt;. If you implement a custom view, be sure it accepts &lt;code&gt;request&lt;/code&gt; and &lt;code&gt;exception&lt;/code&gt; arguments and returns an &lt;a href=&quot;request-response#django.http.HttpResponseForbidden&quot;&gt;&lt;code&gt;HttpResponseForbidden&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1420cf9b26544fb28a25be612f8701df833400f" translate="yes" xml:space="preserve">
          <source>By default, this is &lt;a href=&quot;views#django.views.defaults.server_error&quot;&gt;&lt;code&gt;django.views.defaults.server_error()&lt;/code&gt;&lt;/a&gt;. If you implement a custom view, be sure it accepts a &lt;code&gt;request&lt;/code&gt; argument and returns an &lt;a href=&quot;request-response#django.http.HttpResponseServerError&quot;&gt;&lt;code&gt;HttpResponseServerError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e95538e33c1c66fcd085f85924c4523f442dff3" translate="yes" xml:space="preserve">
          <source>By default, this is set to &lt;code&gt;False&lt;/code&gt;. When &lt;code&gt;False&lt;/code&gt;, each value from the repeated fields is stored. When set to &lt;code&gt;True&lt;/code&gt;, any trailing values which are blank will be stripped from the result. If the underlying field has &lt;code&gt;required=True&lt;/code&gt;, but &lt;code&gt;remove_trailing_nulls&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, then null values are only allowed at the end, and will be stripped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f6e346f836e87a1c31da41e33c533b26435c8cf" translate="yes" xml:space="preserve">
          <source>By default, this will be the field&amp;rsquo;s name prefixed by &lt;code&gt;id_&lt;/code&gt; (&amp;ldquo;&lt;code&gt;id_my_field&lt;/code&gt;&amp;rdquo; for the example above). You may modify the ID by setting &lt;a href=&quot;widgets#django.forms.Widget.attrs&quot;&gt;&lt;code&gt;attrs&lt;/code&gt;&lt;/a&gt; on the field&amp;rsquo;s widget. For example, declaring a field like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dac32222e1bc8ec7c8c991f8ad6c18f46b9b4bda" translate="yes" xml:space="preserve">
          <source>By default, validators are used in the forms to reset or change passwords and in the &lt;a href=&quot;../../ref/django-admin#django-admin-createsuperuser&quot;&gt;&lt;code&gt;createsuperuser&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/django-admin#django-admin-changepassword&quot;&gt;&lt;code&gt;changepassword&lt;/code&gt;&lt;/a&gt; management commands. Validators aren&amp;rsquo;t applied at the model level, for example in &lt;code&gt;User.objects.create_user()&lt;/code&gt; and &lt;code&gt;create_superuser()&lt;/code&gt;, because we assume that developers, not users, interact with Django at that level and also because model validation doesn&amp;rsquo;t automatically run as part of creating models.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="066e359739b47403283251fad4aed92c61c4920e" translate="yes" xml:space="preserve">
          <source>By default, when you create a formset from a model, the formset will use a queryset that includes all objects in the model (e.g., &lt;code&gt;Author.objects.all()&lt;/code&gt;). You can override this behavior by using the &lt;code&gt;queryset&lt;/code&gt; argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26f00cf8c6097bc1f1a223f1fb303483b4162693" translate="yes" xml:space="preserve">
          <source>By default, when you use &lt;code&gt;modelformset_factory&lt;/code&gt;, a model form will be created using &lt;a href=&quot;../../ref/forms/models#django.forms.models.modelform_factory&quot;&gt;&lt;code&gt;modelform_factory()&lt;/code&gt;&lt;/a&gt;. Often, it can be useful to specify a custom model form. For example, you can create a custom model form that has custom validation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ca1536f7a03b8bdd2425a35c3fd0822d351fe0d" translate="yes" xml:space="preserve">
          <source>By default, when you use the &lt;code&gt;as&lt;/code&gt; keyword with the cycle tag, the usage of &lt;code&gt;{% cycle %}&lt;/code&gt; that initiates the cycle will itself produce the first value in the cycle. This could be a problem if you want to use the value in a nested loop or an included template. If you only want to declare the cycle but not produce the first value, you can add a &lt;code&gt;silent&lt;/code&gt; keyword as the last keyword in the tag. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="617bf421f9811653cfb1d1684975aa07e423d0b7" translate="yes" xml:space="preserve">
          <source>By default, with a UTF-8 database, MySQL will use the &lt;code&gt;utf8_general_ci&lt;/code&gt; collation. This results in all string equality comparisons being done in a &lt;em&gt;case-insensitive&lt;/em&gt; manner. That is, &lt;code&gt;&quot;Fred&quot;&lt;/code&gt; and &lt;code&gt;&quot;freD&quot;&lt;/code&gt; are considered equal at the database level. If you have a unique constraint on a field, it would be illegal to try to insert both &lt;code&gt;&quot;aa&quot;&lt;/code&gt; and &lt;code&gt;&quot;AA&quot;&lt;/code&gt; into the same column, since they compare as equal (and, hence, non-unique) with the default collation. If you want case-sensitive comparisons on a particular column or table, change the column or table to use the &lt;code&gt;utf8_bin&lt;/code&gt; collation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="467033616921a80b8937e8371ddac7a34223bb6e" translate="yes" xml:space="preserve">
          <source>By definition, these extra lookups may not be portable to different database engines (because you&amp;rsquo;re explicitly writing SQL code) and violate the DRY principle, so you should avoid them if possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7144ebfb5d375c533eb02e491b7e5c4749d3b7b" translate="yes" xml:space="preserve">
          <source>By ensuring each Django instance has a different &lt;a href=&quot;../ref/settings#std:setting-CACHES-KEY_PREFIX&quot;&gt;&lt;code&gt;KEY_PREFIX&lt;/code&gt;&lt;/a&gt;, you can ensure that there will be no collisions in cache values.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
