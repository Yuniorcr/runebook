<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="django">
    <body>
      <group id="django">
        <trans-unit id="8b1fa3471d34f0d234ba4558b474a601a8cc898d" translate="yes" xml:space="preserve">
          <source>Moreover, if the &lt;code&gt;GEOSGeometry&lt;/code&gt; is in a different coordinate system (has a different SRID value) than that of the field, then it will be implicitly transformed into the SRID of the model&amp;rsquo;s field, using the spatial database&amp;rsquo;s transform procedure:</source>
          <target state="translated">또한 &lt;code&gt;GEOSGeometry&lt;/code&gt; 가 필드와 다른 좌표계 (서로 다른 SRID 값을 가짐)에있는 경우 공간 데이터베이스의 변환 프로 시저를 사용하여 모델 필드의 SRID로 내재적으로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="fee232fed6319afa654e98407d6a84369cdc26ae" translate="yes" xml:space="preserve">
          <source>Morphs this SpatialReference from ESRI&amp;rsquo;s format to EPSG</source>
          <target state="translated">이 SpatialReference를 ESRI 형식에서 EPSG로 변경합니다.</target>
        </trans-unit>
        <trans-unit id="2776d1cf12cc121cc6a53ab101839d36c44da49e" translate="yes" xml:space="preserve">
          <source>Morphs this SpatialReference to ESRI&amp;rsquo;s format.</source>
          <target state="translated">이 SpatialReference를 ESRI 형식으로 변경합니다.</target>
        </trans-unit>
        <trans-unit id="de802c1632cedcbed1d1269dec4dd87d1626b63d" translate="yes" xml:space="preserve">
          <source>Most &lt;code&gt;QueryDict&lt;/code&gt;s you encounter, and in particular those at &lt;code&gt;request.POST&lt;/code&gt; and &lt;code&gt;request.GET&lt;/code&gt;, will be immutable. If you are instantiating one yourself, you can make it mutable by passing &lt;code&gt;mutable=True&lt;/code&gt; to its &lt;code&gt;__init__()&lt;/code&gt;.</source>
          <target state="translated">발생하는 대부분의 &lt;code&gt;QueryDict&lt;/code&gt; 및 특히 &lt;code&gt;request.POST&lt;/code&gt; 및 &lt;code&gt;request.GET&lt;/code&gt; 에 있는 QueryDict 는 변경할 수 없습니다. 직접 인스턴스화하는 경우 &lt;code&gt;mutable=True&lt;/code&gt; 를 &lt;code&gt;__init__()&lt;/code&gt; 전달하여 변경 가능하게 만들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fd83b2da2d31a5769324d7579da823d1abff813e" translate="yes" xml:space="preserve">
          <source>Most developers won&amp;rsquo;t need to worry about changing form encoding, but this is a useful feature for applications that talk to legacy systems whose encoding you cannot control.</source>
          <target state="translated">대부분의 개발자는 양식 인코딩 변경에 대해 걱정할 필요가 없지만 이는 인코딩을 제어 할 수없는 레거시 시스템과 통신하는 응용 프로그램에 유용한 기능입니다.</target>
        </trans-unit>
        <trans-unit id="10ade9a2061b05f7b91f4318c4b19e8aa5ca9527" translate="yes" xml:space="preserve">
          <source>Most fields don&amp;rsquo;t require data preparation. Simple data types, such as integers and strings, are &amp;lsquo;ready to write&amp;rsquo; as a Python object. However, more complex data types often require some modification.</source>
          <target state="translated">대부분의 필드는 데이터 준비가 필요하지 않습니다. 정수 및 문자열과 같은 간단한 데이터 유형은 Python 객체로 '쓰기 준비 완료'입니다. 그러나보다 복잡한 데이터 유형은 종종 일부 수정이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="d529a24fa241e9065286615d191b753364639d64" translate="yes" xml:space="preserve">
          <source>Most filters don&amp;rsquo;t take arguments. In this case, leave the argument out of your function:</source>
          <target state="translated">대부분의 필터는 인수를 사용하지 않습니다. 이 경우 인수를 함수에서 제외하십시오.</target>
        </trans-unit>
        <trans-unit id="6ac8c4baf64570371700af7032fa39a6dc85046f" translate="yes" xml:space="preserve">
          <source>Most generic views require the &lt;code&gt;queryset&lt;/code&gt; key, which is a &lt;code&gt;QuerySet&lt;/code&gt; instance; see &lt;a href=&quot;../../topics/db/queries&quot;&gt;Making queries&lt;/a&gt; for more information about &lt;code&gt;QuerySet&lt;/code&gt; objects.</source>
          <target state="translated">대부분의 일반 뷰에는 &lt;code&gt;QuerySet&lt;/code&gt; &lt;code&gt;queryset&lt;/code&gt; 키가 필요합니다 . &lt;code&gt;QuerySet&lt;/code&gt; 오브젝트 에 대한 자세한 정보는 &lt;a href=&quot;../../topics/db/queries&quot;&gt;조회 작성&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="283a9ab800c27a0c42452de79dd91ba830b18c75" translate="yes" xml:space="preserve">
          <source>Most larger Django sites use a separate Web server &amp;ndash; i.e., one that&amp;rsquo;s not also running Django &amp;ndash; for serving static files. This server often runs a different type of web server &amp;ndash; faster but less full-featured. Some common choices are:</source>
          <target state="translated">더 큰 Django 사이트는 정적 파일을 제공하기 위해 별도의 웹 서버 (Django를 실행하지 않는 서버)를 사용합니다. 이 서버는 종종 다른 유형의 웹 서버를 실행하지만 더 빠르지 만 기능이 적습니다. 몇 가지 일반적인 선택은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d071dd58c0ea09b5920680c494256897fe6f5f87" translate="yes" xml:space="preserve">
          <source>Most method calls attached to objects are also available from within templates. This means that templates have access to much more than just class attributes (like field names) and variables passed in from views. For example, the Django ORM provides the &lt;a href=&quot;../../topics/db/queries#topics-db-queries-related&quot;&gt;&amp;ldquo;entry_set&amp;rdquo;&lt;/a&gt; syntax for finding a collection of objects related on a foreign key. Therefore, given a model called &amp;ldquo;comment&amp;rdquo; with a foreign key relationship to a model called &amp;ldquo;task&amp;rdquo; you can loop through all comments attached to a given task like this:</source>
          <target state="translated">개체에 연결된 대부분의 메서드 호출은 템플릿 내에서도 사용할 수 있습니다. 즉, 템플릿은 클래스 이름 (예 : 필드 이름)과 뷰에서 전달 된 변수 이상의 것에 액세스 할 수 있습니다. 예를 들어, Django ORM은 외래 키와 관련된 객체 모음을 찾기위한 &lt;a href=&quot;../../topics/db/queries#topics-db-queries-related&quot;&gt;&quot;entry_set&quot;&lt;/a&gt; 구문을 제공합니다 . 따라서&amp;ldquo;task&amp;rdquo;라는 모델과 외래 키 관계를 가진&amp;ldquo;comment&amp;rdquo;라는 모델이 있으면 주어진 작업에 첨부 된 모든 주석을 다음과 같이 반복 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="145d0f6157ec473a53e372c29d0eb1af87df32d4" translate="yes" xml:space="preserve">
          <source>Most of the time you&amp;rsquo;ll use &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.all&quot;&gt;&lt;code&gt;all()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.exclude&quot;&gt;&lt;code&gt;exclude()&lt;/code&gt;&lt;/a&gt; when you need to look up objects from the database. However, that&amp;rsquo;s far from all there is; see the &lt;a href=&quot;../../ref/models/querysets#queryset-api&quot;&gt;QuerySet API Reference&lt;/a&gt; for a complete list of all the various &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">대부분의 경우 데이터베이스에서 객체를 찾아야 할 때 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.all&quot;&gt; &lt;code&gt;all()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.exclude&quot;&gt; &lt;code&gt;exclude()&lt;/code&gt; &lt;/a&gt; 합니다. 그러나 그것은 모든 것과는 거리가 멀다. 모든 다양한 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; 메소드 의 전체 목록은 &lt;a href=&quot;../../ref/models/querysets#queryset-api&quot;&gt;QuerySet API Reference&lt;/a&gt; 를 참조 하십시오 .</target>
        </trans-unit>
        <trans-unit id="e5a70a402429d9e0751ab8352b3b6edf4a999b65" translate="yes" xml:space="preserve">
          <source>Most of the time you&amp;rsquo;ll use a &lt;code&gt;File&lt;/code&gt; that Django&amp;rsquo;s given you (i.e. a file attached to a model as above, or perhaps an uploaded file).</source>
          <target state="translated">대부분의 시간을 당신은 사용할 것이다 &lt;code&gt;File&lt;/code&gt; 장고의 당신을 주어진 것으로 (즉, 파일 위와 같이 모델에 장착, 또는 아마도 업로드 된 파일을).</target>
        </trans-unit>
        <trans-unit id="ee3f7c7371e94698b53b1354c3bef6e0872c9065" translate="yes" xml:space="preserve">
          <source>Most of the time, you&amp;rsquo;ll instantiate &lt;a href=&quot;#django.template.Context&quot;&gt;&lt;code&gt;Context&lt;/code&gt;&lt;/a&gt; objects by passing in a fully-populated dictionary to &lt;code&gt;Context()&lt;/code&gt;. But you can add and delete items from a &lt;code&gt;Context&lt;/code&gt; object once it&amp;rsquo;s been instantiated, too, using standard dictionary syntax:</source>
          <target state="translated">대부분의 경우 완전히 채워진 사전을 &lt;code&gt;Context()&lt;/code&gt; 에 전달하여 &lt;a href=&quot;#django.template.Context&quot;&gt; &lt;code&gt;Context&lt;/code&gt; &lt;/a&gt; 객체를 인스턴스화 합니다 . 그러나 표준 사전 구문을 사용하여 인스턴스화 된 &lt;code&gt;Context&lt;/code&gt; 객체 에서 항목을 추가하고 삭제할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="75df474b5d319622c3cc5760d003faf378b95a8e" translate="yes" xml:space="preserve">
          <source>Most of the time, you&amp;rsquo;ll pass the file data from &lt;code&gt;request&lt;/code&gt; into the form as described in &lt;a href=&quot;../../ref/forms/api#binding-uploaded-files&quot;&gt;Binding uploaded files to a form&lt;/a&gt;. This would look something like:</source>
          <target state="translated">대부분의 경우 &lt;a href=&quot;../../ref/forms/api#binding-uploaded-files&quot;&gt;업로드 된 파일을 양식&lt;/a&gt; 에 바인딩에 설명 된대로 &lt;code&gt;request&lt;/code&gt; 에서 파일 데이터를 양식으로 전달합니다 . 이것은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="119f2c924a319d37b00a931fb60d52e9b7e587d8" translate="yes" xml:space="preserve">
          <source>Most other &lt;code&gt;django-admin&lt;/code&gt; commands that interact with the database operate in the same way as &lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; &amp;ndash; they only ever operate on one database at a time, using &lt;code&gt;--database&lt;/code&gt; to control the database used.</source>
          <target state="translated">데이터베이스와 상호 작용하는 대부분의 다른 &lt;code&gt;django-admin&lt;/code&gt; 명령은 &lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt; 과 동일한 방식으로 작동합니다. &lt;code&gt;--database&lt;/code&gt; 를 사용하여 사용 된 데이터베이스를 제어하는 한 번에 하나의 데이터베이스에서만 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="377bcaf04e9797c6340b2a8bdad4bee17d23a9bf" translate="yes" xml:space="preserve">
          <source>Most people are familiar with using latitude and longitude to reference a location on the earth&amp;rsquo;s surface. However, latitude and longitude are angles, not distances. In other words, while the shortest path between two points on a flat surface is a straight line, the shortest path between two points on a curved surface (such as the earth) is an &lt;em&gt;arc&lt;/em&gt; of a &lt;a href=&quot;https://en.wikipedia.org/wiki/Great_circle&quot;&gt;great circle&lt;/a&gt;. &lt;a href=&quot;#fnthematic&quot; id=&quot;id8&quot;&gt;[4]&lt;/a&gt; Thus, additional computation is required to obtain distances in planar units (e.g., kilometers and miles). Using a geographic coordinate system may introduce complications for the developer later on. For example, SpatiaLite does not have the capability to perform distance calculations between geometries using geographic coordinate systems, e.g. constructing a query to find all points within 5 miles of a county boundary stored as WGS84. &lt;a href=&quot;#fndist&quot; id=&quot;id9&quot;&gt;[5]&lt;/a&gt;</source>
          <target state="translated">대부분의 사람들은 지구 표면의 위치를 ​​참조하기 위해 위도와 경도를 사용하는 것에 익숙합니다. 그러나 위도와 경도는 거리가 아니라 각도입니다. 평평한 표면에, 두 지점 사이의 최단 경로가 직선 (예 : 지상)를, 곡면상의 두 지점 사이의 최단 경로 중에 환언에서, 인 &lt;em&gt;아크&lt;/em&gt; (A)의 &lt;a href=&quot;https://en.wikipedia.org/wiki/Great_circle&quot;&gt;큰 원&lt;/a&gt; . &lt;a href=&quot;#fnthematic&quot; id=&quot;id8&quot;&gt;[4]&lt;/a&gt;따라서, 평면 단위 (예를 들어, 킬로미터 및 마일)로 거리를 얻기 위해서는 추가적인 계산이 필요하다. 지리적 좌표 시스템을 사용하면 나중에 개발자에게 합병증이 발생할 수 있습니다. 예를 들어 SpatiaLite는 지리적 좌표계를 사용하여 형상 간 거리 계산을 수행 할 수있는 기능이 없습니다 (예 : WGS84로 저장된 카운티 경계에서 5 마일 이내에있는 모든 지점을 찾기위한 쿼리 구성). &lt;a href=&quot;#fndist&quot; id=&quot;id9&quot;&gt;[5]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="aa380c3aed18b055c47fc70106524669e774f0e4" translate="yes" xml:space="preserve">
          <source>Most tags accept arguments:</source>
          <target state="translated">대부분의 태그는 인수를 허용합니다.</target>
        </trans-unit>
        <trans-unit id="7d98610356545b43a90b40c891fb649c8f9fda3c" translate="yes" xml:space="preserve">
          <source>Most validation can be done using &lt;a href=&quot;#validators&quot;&gt;validators&lt;/a&gt; - helpers that can be reused. Validators are functions (or callables) that take a single argument and raise &lt;code&gt;ValidationError&lt;/code&gt; on invalid input. Validators are run after the field&amp;rsquo;s &lt;code&gt;to_python&lt;/code&gt; and &lt;code&gt;validate&lt;/code&gt; methods have been called.</source>
          <target state="translated">대부분의 유효성 검사는 재사용 할 수있는 도우미 인 &lt;a href=&quot;#validators&quot;&gt;유효성 검사기를&lt;/a&gt; 사용하여 수행 할 수 있습니다. 유효성 검사기는 단일 인수를 사용 하여 유효하지 않은 입력에서 &lt;code&gt;ValidationError&lt;/code&gt; 를 발생 시키는 함수 (또는 호출 가능)입니다 . 필드의 &lt;code&gt;to_python&lt;/code&gt; 및 &lt;code&gt;validate&lt;/code&gt; 메소드가 호출 된 후에 유효성 검증 기가 실행 됩니다.</target>
        </trans-unit>
        <trans-unit id="723f4d4f07515e4cb9cdd3456d1f4fe86b2d6da5" translate="yes" xml:space="preserve">
          <source>Most views requires CSRF protection, but a few do not.</source>
          <target state="translated">대부분의보기에는 CSRF 보호가 필요하지만 일부는 그렇지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4128c1d8e90ab53d91e5ee014d62fddc81452af8" translate="yes" xml:space="preserve">
          <source>Most websites that care about time zones ask users in which time zone they live and store this information in the user&amp;rsquo;s profile. For anonymous users, they use the time zone of their primary audience or UTC. &lt;a href=&quot;http://pytz.sourceforge.net/&quot;&gt;pytz&lt;/a&gt; provides &lt;a href=&quot;http://pytz.sourceforge.net/#helpers&quot;&gt;helpers&lt;/a&gt;, like a list of time zones per country, that you can use to pre-select the most likely choices.</source>
          <target state="translated">표준 시간대를 염려하는 대부분의 웹 사이트는 사용자에게 현재 시간대를 묻고이 정보를 사용자 프로필에 저장합니다. 익명 사용자의 경우 기본 잠재 고객 또는 UTC의 시간대를 사용합니다. &lt;a href=&quot;http://pytz.sourceforge.net/&quot;&gt;pytz&lt;/a&gt; 는 국가 별 시간대 목록과 같이 &lt;a href=&quot;http://pytz.sourceforge.net/#helpers&quot;&gt;도우미를&lt;/a&gt; 제공 하여 가장 가능성이 높은 선택을 미리 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6c8d12148748172394b8e79a6d152a32dd323fc1" translate="yes" xml:space="preserve">
          <source>Move the &lt;code&gt;polls&lt;/code&gt; directory into the &lt;code&gt;django-polls&lt;/code&gt; directory.</source>
          <target state="translated">&lt;code&gt;polls&lt;/code&gt; 디렉토리를 &lt;code&gt;django-polls&lt;/code&gt; 디렉토리 로 이동하십시오 .</target>
        </trans-unit>
        <trans-unit id="c58c013c30d8701a971a22d72e01d0b764b2b536" translate="yes" xml:space="preserve">
          <source>Moves the model&amp;rsquo;s table from one tablespace to another.</source>
          <target state="translated">모델의 테이블을 한 테이블 스페이스에서 다른 테이블 스페이스로 이동합니다.</target>
        </trans-unit>
        <trans-unit id="d794a8d047d2027efa4972e195bbc53e5a2bcbce" translate="yes" xml:space="preserve">
          <source>Moving an object from one database to another</source>
          <target state="translated">한 데이터베이스에서 다른 데이터베이스로 오브젝트 이동</target>
        </trans-unit>
        <trans-unit id="64683d853b5d7f50f535fc278d45f921a490d24b" translate="yes" xml:space="preserve">
          <source>Much like &lt;a href=&quot;#django.db.migrations.operations.RunSQL&quot;&gt;&lt;code&gt;RunSQL&lt;/code&gt;&lt;/a&gt;, ensure that if you change schema inside here you&amp;rsquo;re either doing it outside the scope of the Django model system (e.g. triggers) or that you use &lt;a href=&quot;#django.db.migrations.operations.SeparateDatabaseAndState&quot;&gt;&lt;code&gt;SeparateDatabaseAndState&lt;/code&gt;&lt;/a&gt; to add in operations that will reflect your changes to the model state - otherwise, the versioned ORM and the autodetector will stop working correctly.</source>
          <target state="translated">&lt;a href=&quot;#django.db.migrations.operations.RunSQL&quot;&gt; &lt;code&gt;RunSQL&lt;/code&gt; &lt;/a&gt; 과 마찬가지로 여기에서 스키마를 변경하면 Django 모델 시스템 범위 (예 : 트리거) 범위 밖에서 스키마를 수행하거나 모델 상태에 대한 변경 사항을 반영하는 작업을 추가 하기 위해 &lt;a href=&quot;#django.db.migrations.operations.SeparateDatabaseAndState&quot;&gt; &lt;code&gt;SeparateDatabaseAndState&lt;/code&gt; &lt;/a&gt; 를 사용 하십시오. 버전이 지정된 ORM 및 자동 감지 기능이 올바르게 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="41621a064f44e6daabdc27522b33298fa8aa62b1" translate="yes" xml:space="preserve">
          <source>Multi-database support</source>
          <target state="translated">다중 데이터베이스 지원</target>
        </trans-unit>
        <trans-unit id="ddb04e3ae372a17b92e0255fc4b279009db9af90" translate="yes" xml:space="preserve">
          <source>Multi-table inheritance</source>
          <target state="translated">다중 테이블 상속</target>
        </trans-unit>
        <trans-unit id="85c68fd61341ba3993094799674748ff1b1fad2b" translate="yes" xml:space="preserve">
          <source>Multidimensional arrays with indexes and slices</source>
          <target state="translated">인덱스와 슬라이스가있는 다차원 배열</target>
        </trans-unit>
        <trans-unit id="6dae03e38262e1d8fbd6001ae280309609de7140" translate="yes" xml:space="preserve">
          <source>Multiple admin sites in the same URLconf</source>
          <target state="translated">동일한 URLconf의 여러 관리 사이트</target>
        </trans-unit>
        <trans-unit id="d28c471111be99bb04f22b41815e829ee1145175" translate="yes" xml:space="preserve">
          <source>Multiple databases</source>
          <target state="translated">여러 데이터베이스</target>
        </trans-unit>
        <trans-unit id="a9dadd9453a271030d305246c8860a4e63627858" translate="yes" xml:space="preserve">
          <source>Multiple inheritance</source>
          <target state="translated">다중 상속</target>
        </trans-unit>
        <trans-unit id="232abe7a48c7c1ee8c0efaa67e739c2a6509d72e" translate="yes" xml:space="preserve">
          <source>Multiple keys can be chained together to form a path lookup:</source>
          <target state="translated">여러 키를 함께 연결하여 경로 조회를 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5112902c4e583bfe7514db7252746db758fd62e2" translate="yes" xml:space="preserve">
          <source>Multiple object mixins</source>
          <target state="translated">다중 객체 믹스 인</target>
        </trans-unit>
        <trans-unit id="86f9c0e7700126520aeb57e446419f134fb8a6f7" translate="yes" xml:space="preserve">
          <source>Mumbai: 19,000,000</source>
          <target state="translated">뭄바이 : 19,000,000</target>
        </trans-unit>
        <trans-unit id="ce70a430cc3e5cc4fd6f19e52ba7a0369c6c0c5b" translate="yes" xml:space="preserve">
          <source>Must be a subclass of &lt;a href=&quot;widgets#django.forms.MultiWidget&quot;&gt;&lt;code&gt;django.forms.MultiWidget&lt;/code&gt;&lt;/a&gt;. Default value is &lt;a href=&quot;widgets#django.forms.TextInput&quot;&gt;&lt;code&gt;TextInput&lt;/code&gt;&lt;/a&gt;, which probably is not very useful in this case.</source>
          <target state="translated">&lt;a href=&quot;widgets#django.forms.MultiWidget&quot;&gt; &lt;code&gt;django.forms.MultiWidget&lt;/code&gt; &lt;/a&gt; 의 서브 클래스 여야합니다 . 기본값은 &lt;a href=&quot;widgets#django.forms.TextInput&quot;&gt; &lt;code&gt;TextInput&lt;/code&gt; &lt;/a&gt; 이며,이 경우에는 그다지 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6f73e164a384f2624b0aa7805fd299ecce41fed8" translate="yes" xml:space="preserve">
          <source>Must return the lookup named &lt;code&gt;lookup_name&lt;/code&gt;. For instance, by returning &lt;code&gt;self.output_field.get_lookup(lookup_name)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lookup_name&lt;/code&gt; 이라는 조회를 리턴해야합니다 . 예를 들어 &lt;code&gt;self.output_field.get_lookup(lookup_name)&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="c493b67af068ea997fcbeb95a43f0dc8b18c7ce6" translate="yes" xml:space="preserve">
          <source>Must return the lookup named &lt;code&gt;transform_name&lt;/code&gt;. For instance, by returning &lt;code&gt;self.output_field.get_transform(transform_name)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;transform_name&lt;/code&gt; 이라는 조회를 리턴해야합니다 . 예를 들어 &lt;code&gt;self.output_field.get_transform(transform_name)&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="a96b7ca96aaabf64fd5a1e1f8c1b203d836deaa9" translate="yes" xml:space="preserve">
          <source>Mutability: &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt;&lt;code&gt;GEOSGeometry&lt;/code&gt;&lt;/a&gt; objects may be modified.</source>
          <target state="translated">변경 가능성 : &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt; &lt;code&gt;GEOSGeometry&lt;/code&gt; &lt;/a&gt; 객체가 수정 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4bccb0eee0e8600913c2c28639c66e179e6c916b" translate="yes" xml:space="preserve">
          <source>My logs are filled with GEOS-related errors</source>
          <target state="translated">내 로그는 GEOS 관련 오류로 채워져 있습니다</target>
        </trans-unit>
        <trans-unit id="deaa0c393a6613972aaccbf1fecfdad67aa21e88" translate="yes" xml:space="preserve">
          <source>MySQL</source>
          <target state="translated">MySQL</target>
        </trans-unit>
        <trans-unit id="2e0075770347408bd338637c0345bcd2dba7d8f7" translate="yes" xml:space="preserve">
          <source>MySQL 5.6.4 and later can store fractional seconds, provided that the column definition includes a fractional indication (e.g. &lt;code&gt;DATETIME(6)&lt;/code&gt;). Earlier versions do not support them at all.</source>
          <target state="translated">열 정의에 분수 표시 (예 : &lt;code&gt;DATETIME(6)&lt;/code&gt; )가 포함 된 경우 MySQL 5.6.4 이상에서는 분수 초를 저장할 수 있습니다 . 이전 버전은 전혀 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="86a5ac5197e92a3bf370a96a8eed2e3a94e4cb1f" translate="yes" xml:space="preserve">
          <source>MySQL &lt;a href=&quot;#id10&quot; id=&quot;id9&quot;&gt;[5]&lt;/a&gt;</source>
          <target state="translated">MySQL &lt;a href=&quot;#id10&quot; id=&quot;id9&quot;&gt;[5]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="986a60a235cf32f505dc63fb40ec496ad291c705" translate="yes" xml:space="preserve">
          <source>MySQL Connector/Python</source>
          <target state="translated">MySQL 커넥터 / 파이썬</target>
        </trans-unit>
        <trans-unit id="667f44d66957f73e91d3746ec1ac71180eba2323" translate="yes" xml:space="preserve">
          <source>MySQL Connector/Python is available from the &lt;a href=&quot;https://dev.mysql.com/downloads/connector/python/&quot;&gt;download page&lt;/a&gt;. The Django adapter is available in versions 1.1.X and later. It may not support the most recent releases of Django.</source>
          <target state="translated">MySQL Connector / Python은 &lt;a href=&quot;https://dev.mysql.com/downloads/connector/python/&quot;&gt;다운로드 페이지&lt;/a&gt; 에서 사용할 수 있습니다 . Django 어댑터는 버전 1.1.X 이상에서 사용 가능합니다. Django의 최신 릴리스를 지원하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9bb341b82bf1c83dd03f7466f030dfb1c4ead4ae" translate="yes" xml:space="preserve">
          <source>MySQL DB API Drivers</source>
          <target state="translated">MySQL DB API 드라이버</target>
        </trans-unit>
        <trans-unit id="2a32013dda91967e55f3b5f97fbb0212e962e6ad" translate="yes" xml:space="preserve">
          <source>MySQL Spatial Limitations</source>
          <target state="translated">MySQL 공간 제한</target>
        </trans-unit>
        <trans-unit id="983d4198c4fe496e039642a0b10a31ff61fb8930" translate="yes" xml:space="preserve">
          <source>MySQL and MariaDB</source>
          <target state="translated">MySQL과 MariaDB</target>
        </trans-unit>
        <trans-unit id="1ae647f2055c46f7991330b9effd8766eca9dada" translate="yes" xml:space="preserve">
          <source>MySQL and MariaDB do not support some options to the &lt;code&gt;SELECT ... FOR UPDATE&lt;/code&gt; statement. If &lt;code&gt;select_for_update()&lt;/code&gt; is used with an unsupported option, then a &lt;a href=&quot;exceptions#django.db.NotSupportedError&quot;&gt;&lt;code&gt;NotSupportedError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">MySQL과 MariaDB는 &lt;code&gt;SELECT ... FOR UPDATE&lt;/code&gt; 문에 대한 일부 옵션을 지원하지 않습니다 . 경우 &lt;code&gt;select_for_update()&lt;/code&gt; 지원되지 않는 옵션과 함께 사용되어, 다음 &lt;a href=&quot;exceptions#django.db.NotSupportedError&quot;&gt; &lt;code&gt;NotSupportedError&lt;/code&gt; 가&lt;/a&gt; 발생합니다.</target>
        </trans-unit>
        <trans-unit id="6f05eb6ba63b7a6cd32e2832c1d889278aa95ffb" translate="yes" xml:space="preserve">
          <source>MySQL and SpatiaLite without LWGEOM don&amp;rsquo;t support area calculations on geographic SRSes.</source>
          <target state="translated">LWGEOM이없는 MySQL 및 SpatiaLite는 지리적 SRS에 대한 영역 계산을 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e619fd44bc5f6e15a9f90141b521fe84e6c5c40b" translate="yes" xml:space="preserve">
          <source>MySQL can index only the first N chars of a &lt;code&gt;BLOB&lt;/code&gt; or &lt;code&gt;TEXT&lt;/code&gt; column. Since &lt;code&gt;TextField&lt;/code&gt; doesn&amp;rsquo;t have a defined length, you can&amp;rsquo;t mark it as &lt;code&gt;unique=True&lt;/code&gt;. MySQL will report: &amp;ldquo;BLOB/TEXT column &amp;lsquo;&amp;lt;db_column&amp;gt;&amp;rsquo; used in key specification without a key length&amp;rdquo;.</source>
          <target state="translated">MySQL은 &lt;code&gt;BLOB&lt;/code&gt; 또는 &lt;code&gt;TEXT&lt;/code&gt; 열의 첫 N 문자 만 색인 할 수 있습니다 . 때문에 &lt;code&gt;TextField&lt;/code&gt; 정의 된 길이가 없습니다, 당신은로 표시 할 수 없습니다 &lt;code&gt;unique=True&lt;/code&gt; . MySQL은 &quot;키 길이없이 키 사양에 사용 된 BLOB / TEXT 열 '&amp;lt;db_column&amp;gt;'&quot;을보고합니다.</target>
        </trans-unit>
        <trans-unit id="e7f9037fbe1194d4e43f2ae2e2b77cd89ac807a6" translate="yes" xml:space="preserve">
          <source>MySQL comparisons</source>
          <target state="translated">MySQL 비교</target>
        </trans-unit>
        <trans-unit id="1b2f25b29e36685e347b0022acef2066f4e227da" translate="yes" xml:space="preserve">
          <source>MySQL doesn&amp;rsquo;t support length calculations on geographic SRSes.</source>
          <target state="translated">MySQL은 지리적 SRS에서 길이 계산을 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="bb747cd75bad69ca691abcfc9dda3c14f82ee26e" translate="yes" xml:space="preserve">
          <source>MySQL doesn&amp;rsquo;t support streaming results, hence the Python database driver loads the entire result set into memory. The result set is then transformed into Python row objects by the database adapter using the &lt;code&gt;fetchmany()&lt;/code&gt; method defined in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0249&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;PEP 249&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">MySQL은 스트리밍 결과를 지원하지 않으므로 Python 데이터베이스 드라이버는 전체 결과 세트를 메모리에로드합니다. 그런 다음 &lt;a href=&quot;https://www.python.org/dev/peps/pep-0249&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;PEP 249에&lt;/strong&gt;&lt;/a&gt; 정의 된 &lt;code&gt;fetchmany()&lt;/code&gt; 메소드를 사용하여 데이터베이스 어댑터가 결과 세트를 Python 행 오브젝트로 변환 합니다.&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9699bc8cbc6d21071c531e97cae0a82b4d28855a" translate="yes" xml:space="preserve">
          <source>MySQL has a couple drivers that implement the Python Database API described in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0249&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;PEP 249&lt;/strong&gt;&lt;/a&gt;:</source>
          <target state="translated">MySQL에는 &lt;a href=&quot;https://www.python.org/dev/peps/pep-0249&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;PEP 249에&lt;/strong&gt;&lt;/a&gt; 설명 된 Python Database API를 구현하는 몇 가지 드라이버가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="dd36a013a62a179e364138cb150dda709e3289ba" translate="yes" xml:space="preserve">
          <source>MySQL has several &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/storage-engines.html&quot;&gt;storage engines&lt;/a&gt;. You can change the default storage engine in the server configuration.</source>
          <target state="translated">MySQL에는 여러 &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/storage-engines.html&quot;&gt;스토리지 엔진이&lt;/a&gt; 있습니다. 서버 구성에서 기본 스토리지 엔진을 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="13c24d5b3db43171b5ef4d816ab11e8214bf90ac" translate="yes" xml:space="preserve">
          <source>MySQL lacks support for transactions around schema alteration operations, meaning that if a migration fails to apply you will have to manually unpick the changes in order to try again (it&amp;rsquo;s impossible to roll back to an earlier point).</source>
          <target state="translated">MySQL은 스키마 변경 작업과 관련된 트랜잭션을 지원하지 않습니다. 즉, 마이그레이션이 적용되지 않으면 다시 시도하기 위해 변경 사항을 수동으로 선택 해제해야합니다 (이전 지점으로 롤백 할 수 없음).</target>
        </trans-unit>
        <trans-unit id="da7ec2dd90480fe6867f579ccf7b82e69036fc20" translate="yes" xml:space="preserve">
          <source>MySQL notes</source>
          <target state="translated">MySQL 노트</target>
        </trans-unit>
        <trans-unit id="c97f25b2cd670ac90747ff6c4670fa29f1bdcc07" translate="yes" xml:space="preserve">
          <source>MySQL option files.</source>
          <target state="translated">MySQL 옵션 파일.</target>
        </trans-unit>
        <trans-unit id="a18101faca156f271f971ff4f81a92f324b38b2f" translate="yes" xml:space="preserve">
          <source>MySQL support was added.</source>
          <target state="translated">MySQL 지원이 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="0aca998cada4db772b8e544e84480f89cb51ce1e" translate="yes" xml:space="preserve">
          <source>MySQL users, refer to the &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/charset-database.html&quot;&gt;MySQL manual&lt;/a&gt; for details on how to set or alter the database character set encoding.</source>
          <target state="translated">MySQL 사용자의 경우 데이터베이스 문자 세트 인코딩을 설정하거나 변경하는 방법에 대한 자세한 내용 은 &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/charset-database.html&quot;&gt;MySQL 설명서&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="901623a9cc98c4d53a4f346dc9d64f6ee667fc21" translate="yes" xml:space="preserve">
          <source>MySQL with MyISAM and fixtures</source>
          <target state="translated">MyISAM 및 비품이있는 MySQL</target>
        </trans-unit>
        <trans-unit id="c8423889e44ab6d190ce5b97f8e3f5999ada3a9e" translate="yes" xml:space="preserve">
          <source>MySQL&amp;rsquo;s default storage engine is &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/innodb-storage-engine.html&quot;&gt;InnoDB&lt;/a&gt;. This engine is fully transactional and supports foreign key references. It&amp;rsquo;s the recommended choice. However, the InnoDB autoincrement counter is lost on a MySQL restart because it does not remember the &lt;code&gt;AUTO_INCREMENT&lt;/code&gt; value, instead recreating it as &amp;ldquo;max(id)+1&amp;rdquo;. This may result in an inadvertent reuse of &lt;a href=&quot;models/fields#django.db.models.AutoField&quot;&gt;&lt;code&gt;AutoField&lt;/code&gt;&lt;/a&gt; values.</source>
          <target state="translated">MySQL의 기본 스토리지 엔진은 &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/innodb-storage-engine.html&quot;&gt;InnoDB&lt;/a&gt; 입니다. 이 엔진은 트랜잭션이 완전하며 외래 키 참조를 지원합니다. 권장되는 선택입니다. 그러나 InnoDB 자동 증분 카운터는 &lt;code&gt;AUTO_INCREMENT&lt;/code&gt; 값을 기억하지 않고 &quot;max (id) +1&quot;로 다시 작성하기 때문에 MySQL 재시작시 손실됩니다 . 이로 인해 실수로 &lt;a href=&quot;models/fields#django.db.models.AutoField&quot;&gt; &lt;code&gt;AutoField&lt;/code&gt; &lt;/a&gt; 값이 재사용 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="da894fa611c76d98f190b501119ec407ebf26fcc" translate="yes" xml:space="preserve">
          <source>MySQL, PostGIS, SpatiaLite</source>
          <target state="translated">MySQL, PostGIS, SpatiaLite</target>
        </trans-unit>
        <trans-unit id="e6d7af34f14cc7cd71ad2da3150f20559678178f" translate="yes" xml:space="preserve">
          <source>MySQL: &lt;code&gt;max_allowed_packet&lt;/code&gt; error</source>
          <target state="translated">MySQL : &lt;code&gt;max_allowed_packet&lt;/code&gt; 오류</target>
        </trans-unit>
        <trans-unit id="aa93eb462b33d3480c38c1390b6b9dda484bd422" translate="yes" xml:space="preserve">
          <source>MySQL: load the time zone tables with &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/mysql-tzinfo-to-sql.html&quot;&gt;mysql_tzinfo_to_sql&lt;/a&gt;.</source>
          <target state="translated">MySQL : 시간대 테이블을 &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/mysql-tzinfo-to-sql.html&quot;&gt;mysql_tzinfo_to_sql로&lt;/a&gt; 로드하십시오 .</target>
        </trans-unit>
        <trans-unit id="b51a60734da64be0e618bacbea2865a8a7dcd669" translate="yes" xml:space="preserve">
          <source>N</source>
          <target state="translated">N</target>
        </trans-unit>
        <trans-unit id="87bfcc6203402acde4aabbaf0352d970adff0de9" translate="yes" xml:space="preserve">
          <source>N, B</source>
          <target state="translated">N, B</target>
        </trans-unit>
        <trans-unit id="42279a6f78cd081c721ab2a673715d6e0141307a" translate="yes" xml:space="preserve">
          <source>NULL and empty strings</source>
          <target state="translated">NULL 및 빈 문자열</target>
        </trans-unit>
        <trans-unit id="3ec5dc9e67bb01760f1a1602b80350c782cc4a3d" translate="yes" xml:space="preserve">
          <source>Naive and aware datetime objects</source>
          <target state="translated">순진하고 알기 쉬운 날짜 / 시간 객체</target>
        </trans-unit>
        <trans-unit id="991cb900a910173a0198132c33364a293aa20dc5" translate="yes" xml:space="preserve">
          <source>Name of a model field which will be auto-populated with the height of the image each time the model instance is saved.</source>
          <target state="translated">모델 인스턴스가 저장 될 때마다 이미지의 높이에 자동으로 채워지는 모델 필드의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="77b12c2e53e54a360eee73a9a579997d2f334a46" translate="yes" xml:space="preserve">
          <source>Name of a model field which will be auto-populated with the width of the image each time the model instance is saved.</source>
          <target state="translated">모델 인스턴스가 저장 될 때마다 이미지 너비로 자동 채워지는 모델 필드의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="e796ff17766e96ff2c6860b2879523670c9a432e" translate="yes" xml:space="preserve">
          <source>Name of a supported database vendor that this model is specific to. Current built-in vendor names are: &lt;code&gt;sqlite&lt;/code&gt;, &lt;code&gt;postgresql&lt;/code&gt;, &lt;code&gt;mysql&lt;/code&gt;, &lt;code&gt;oracle&lt;/code&gt;. If this attribute is not empty and the current connection vendor doesn&amp;rsquo;t match it, the model will not be synchronized.</source>
          <target state="translated">이 모델이 지원하는 지원되는 데이터베이스 공급 업체의 이름입니다. 현재 내장 된 공급 업체 이름은 &lt;code&gt;sqlite&lt;/code&gt; , &lt;code&gt;postgresql&lt;/code&gt; , &lt;code&gt;mysql&lt;/code&gt; , &lt;code&gt;oracle&lt;/code&gt; 입니다. 이 속성이 비어 있지 않고 현재 연결 공급 업체가 일치하지 않으면 모델이 동기화되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="21e40c06422396c66fc6f011529e9fbb22670cb1" translate="yes" xml:space="preserve">
          <source>Named arguments can be passed by using either one of the following syntaxes:</source>
          <target state="translated">다음 구문 중 하나를 사용하여 명명 된 인수를 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="456472e152b75181780a0aa5cf5f649563895b18" translate="yes" xml:space="preserve">
          <source>Named interpolation: This mode is selected by passing the optional boolean &lt;code&gt;named&lt;/code&gt; parameter as &lt;code&gt;true&lt;/code&gt;. &lt;code&gt;obj&lt;/code&gt; contains a JavaScript object or associative array. For example:</source>
          <target state="translated">명명 된 보간 :이 모드는 선택적 부울 &lt;code&gt;named&lt;/code&gt; 매개 변수를 &lt;code&gt;true&lt;/code&gt; 로 전달하여 선택 됩니다 . &lt;code&gt;obj&lt;/code&gt; 는 JavaScript 객체 또는 연관 배열을 포함합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="cddd6003787cffa647cd2f5ab65bee28c43a64f5" translate="yes" xml:space="preserve">
          <source>Namespace packages as apps</source>
          <target state="translated">앱으로서의 네임 스페이스 패키지</target>
        </trans-unit>
        <trans-unit id="b401e0e546ac63496e6d96c97a9fc5aeb9b68b6f" translate="yes" xml:space="preserve">
          <source>Namespaced URLs are specified using the &lt;code&gt;':'&lt;/code&gt; operator. For example, the main index page of the admin application is referenced using &lt;code&gt;'admin:index'&lt;/code&gt;. This indicates a namespace of &lt;code&gt;'admin'&lt;/code&gt;, and a named URL of &lt;code&gt;'index'&lt;/code&gt;.</source>
          <target state="translated">네임 스페이스 URL은 &lt;code&gt;':'&lt;/code&gt; 연산자를 사용하여 지정됩니다 . 예를 들어, 관리 애플리케이션의 기본 색인 페이지는 &lt;code&gt;'admin:index'&lt;/code&gt; 를 사용하여 참조됩니다 . 네임 스페이스는 &lt;code&gt;'admin'&lt;/code&gt; 이고 이름이 지정된 URL은 &lt;code&gt;'index'&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="49121460562c588ebec421e328fc0f9d720e75bf" translate="yes" xml:space="preserve">
          <source>Namespaces can also be nested. The named URL &lt;code&gt;'sports:polls:index'&lt;/code&gt; would look for a pattern named &lt;code&gt;'index'&lt;/code&gt; in the namespace &lt;code&gt;'polls'&lt;/code&gt; that is itself defined within the top-level namespace &lt;code&gt;'sports'&lt;/code&gt;.</source>
          <target state="translated">네임 스페이스도 중첩 될 수 있습니다. 명명 된 URL &lt;code&gt;'sports:polls:index'&lt;/code&gt; 는 최상위 네임 스페이스 &lt;code&gt;'sports'&lt;/code&gt; 내에 자체 정의 된 네임 스페이스 &lt;code&gt;'polls'&lt;/code&gt; 에서 &lt;code&gt;'index'&lt;/code&gt; 라는 패턴을 찾습니다 .</target>
        </trans-unit>
        <trans-unit id="7214a30965a0f1415063399b413c8991e0fe715d" translate="yes" xml:space="preserve">
          <source>Namespacing URL names</source>
          <target state="translated">네임 스페이스 URL 이름</target>
        </trans-unit>
        <trans-unit id="245bfd6a442d9a4f4c7f5466cc42e94f2e24f6ba" translate="yes" xml:space="preserve">
          <source>Naming URL patterns</source>
          <target state="translated">이름 지정 URL 패턴</target>
        </trans-unit>
        <trans-unit id="3801dd9c44d08b327a9ff306cbbe6bed16008529" translate="yes" xml:space="preserve">
          <source>Naming issues</source>
          <target state="translated">명명 문제</target>
        </trans-unit>
        <trans-unit id="7e587f8f91b92c319567d66e4457de8a3eb6d592" translate="yes" xml:space="preserve">
          <source>Naming loggers</source>
          <target state="translated">명명 로거</target>
        </trans-unit>
        <trans-unit id="6e94241c26e8d79594ba2990ac79ac771826be76" translate="yes" xml:space="preserve">
          <source>Naming your URL lets you refer to it unambiguously from elsewhere in Django, especially from within templates. This powerful feature allows you to make global changes to the URL patterns of your project while only touching a single file.</source>
          <target state="translated">URL의 이름을 지정하면 Django의 다른 곳, 특히 템플릿 내에서 명확하게 참조 할 수 있습니다. 이 강력한 기능을 사용하면 단일 파일 만 터치하면서 프로젝트의 URL 패턴을 전체적으로 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b0e5d9ee1e706056e66182c63e2373c6ad455b80" translate="yes" xml:space="preserve">
          <source>Native raster support &lt;code&gt;N&lt;/code&gt;: the operator accepts rasters natively on both sides of the lookup, and raster input can be mixed with geometry inputs.</source>
          <target state="translated">기본 래스터 지원 &lt;code&gt;N&lt;/code&gt; : 작업자가 기본적으로 조회의 양쪽에서 래스터를 허용하며 래스터 입력을 형상 입력과 혼합 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="71cb039d6cfd99775661211c11211853f3118ab8" translate="yes" xml:space="preserve">
          <source>Natural keys</source>
          <target state="translated">자연 키</target>
        </trans-unit>
        <trans-unit id="15de939347cd0f43fbb2c840def2f0483ccf19fc" translate="yes" xml:space="preserve">
          <source>Natural keys and forward references</source>
          <target state="translated">자연스러운 키와 앞으로 참조</target>
        </trans-unit>
        <trans-unit id="f2670621a6a242a585790697568a8a79acebea97" translate="yes" xml:space="preserve">
          <source>Naturally, the &lt;code&gt;forms&lt;/code&gt; library comes with a set of &lt;code&gt;Field&lt;/code&gt; classes that represent common validation needs. This section documents each built-in field.</source>
          <target state="translated">당연히 &lt;code&gt;forms&lt;/code&gt; 라이브러리에는 일반적인 유효성 검사 요구를 나타내는 일련의 &lt;code&gt;Field&lt;/code&gt; 클래스가 제공됩니다. 이 섹션에서는 각 내장 필드에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="a0fd1dadeac26fc980d64d53a1d51dc00d872199" translate="yes" xml:space="preserve">
          <source>Nautical Mile</source>
          <target state="translated">해상 마일</target>
        </trans-unit>
        <trans-unit id="c1bf29ee2167be4389b40be2ec27bb9ac6854cf5" translate="yes" xml:space="preserve">
          <source>Nautical Mile (UK)</source>
          <target state="translated">해상 마일 (영국)</target>
        </trans-unit>
        <trans-unit id="5e303aed43f7eea12893a04c1344d77f1422d360" translate="yes" xml:space="preserve">
          <source>Navigate to Django&amp;rsquo;s &lt;code&gt;tests/shortcuts/&lt;/code&gt; folder and create a new file &lt;code&gt;test_make_toast.py&lt;/code&gt;. Add the following code:</source>
          <target state="translated">Django의 &lt;code&gt;tests/shortcuts/&lt;/code&gt; 폴더로 이동하여 &lt;code&gt;test_make_toast.py&lt;/code&gt; 파일을 새로 만듭니다 . 다음 코드를 추가하십시오 :</target>
        </trans-unit>
        <trans-unit id="391931ae9af417747703c930330f904886c481c0" translate="yes" xml:space="preserve">
          <source>Navigate to the &lt;code&gt;django/&lt;/code&gt; folder and open the &lt;code&gt;shortcuts.py&lt;/code&gt; file. At the bottom, add:</source>
          <target state="translated">&lt;code&gt;django/&lt;/code&gt; 폴더로 이동 하여 &lt;code&gt;shortcuts.py&lt;/code&gt; 파일을여십시오. 하단에 다음을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="6ff1387ed6d44dceb1969e9b463d291bf6feec8d" translate="yes" xml:space="preserve">
          <source>Needing the result in every template.</source>
          <target state="translated">모든 템플릿에 결과가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="854d8a7501a391087e8af696c7e80444951d2100" translate="yes" xml:space="preserve">
          <source>Negated object identity. Tests if two values are not the same object. This is the negation of the &lt;code&gt;is&lt;/code&gt; operator. Example:</source>
          <target state="translated">부정적 객체 정체성. 두 값이 동일한 객체가 아닌지 테스트합니다. 이것은의 부정 인 &lt;code&gt;is&lt;/code&gt; 오퍼레이터. 예:</target>
        </trans-unit>
        <trans-unit id="74cddaa347454041893fdb47ba6c8cf1d732490d" translate="yes" xml:space="preserve">
          <source>Negative indexing (i.e. &lt;code&gt;Entry.objects.all()[-1]&lt;/code&gt;) is not supported.</source>
          <target state="translated">음수 인덱싱 (즉, &lt;code&gt;Entry.objects.all()[-1]&lt;/code&gt; )은 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="16b2420a502b3deb13acfb660bcc642e826d0622" translate="yes" xml:space="preserve">
          <source>Nested arguments</source>
          <target state="translated">중첩 된 인수</target>
        </trans-unit>
        <trans-unit id="a51d1007934ad9baaf9054dadf4bd0eaf7048e4f" translate="yes" xml:space="preserve">
          <source>Nested captured arguments create a strong coupling between the view arguments and the URL as illustrated by &lt;code&gt;blog_articles&lt;/code&gt;: the view receives part of the URL (&lt;code&gt;page-2/&lt;/code&gt;) instead of only the value the view is interested in. This coupling is even more pronounced when reversing, since to reverse the view we need to pass the piece of URL instead of the page number.</source>
          <target state="translated">중첩 된 캡처 된 인수는 &lt;code&gt;blog_articles&lt;/code&gt; 에 설명 된대로보기 인수와 URL 사이에 강력한 연결을 만듭니다 .보기는 보기가 관심있는 값 대신 URL의 일부 ( &lt;code&gt;page-2/&lt;/code&gt; )를 수신 합니다. 뷰를 되돌리려면 페이지 번호 대신 URL을 전달해야합니다.</target>
        </trans-unit>
        <trans-unit id="65046fcf73f5e6ac3773f70ea1badbd965d975c0" translate="yes" xml:space="preserve">
          <source>Nested classes</source>
          <target state="translated">중첩 클래스</target>
        </trans-unit>
        <trans-unit id="ffea8bcefbb1127b7c2b6d104e473978a7a5dfd5" translate="yes" xml:space="preserve">
          <source>Never deploy a site into production with &lt;a href=&quot;#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; turned on.</source>
          <target state="translated">&lt;a href=&quot;#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; 를&lt;/a&gt; 켠 상태에서 사이트를 프로덕션에 배포하지 마십시오 .</target>
        </trans-unit>
        <trans-unit id="4e08b5505096fc8f458225bbe21af122777de6ec" translate="yes" xml:space="preserve">
          <source>New York: 20,000,000</source>
          <target state="translated">뉴욕 : 20,000,000</target>
        </trans-unit>
        <trans-unit id="bc6939c687d34dccd6c0632aa8427056bf9dd500" translate="yes" xml:space="preserve">
          <source>New applications should avoid &lt;code&gt;default_app_config&lt;/code&gt;. Instead they should require the dotted path to the appropriate &lt;a href=&quot;#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; subclass to be configured explicitly in &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">새로운 애플리케이션은 &lt;code&gt;default_app_config&lt;/code&gt; 를 피해야 합니다. 대신 적절한 &lt;a href=&quot;#django.apps.AppConfig&quot;&gt; &lt;code&gt;AppConfig&lt;/code&gt; &lt;/a&gt; 서브 클래스에 대한 점으로 구분 된 경로가 &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; 에&lt;/a&gt; 명시 적으로 구성되어야합니다 .</target>
        </trans-unit>
        <trans-unit id="bb77323982627c875ecedea26b1cf8c9800f344b" translate="yes" xml:space="preserve">
          <source>New apps come preconfigured to accept migrations, and so you can add migrations by running &lt;a href=&quot;../ref/django-admin#django-admin-makemigrations&quot;&gt;&lt;code&gt;makemigrations&lt;/code&gt;&lt;/a&gt; once you&amp;rsquo;ve made some changes.</source>
          <target state="translated">새로운 앱은 마이그레이션을 허용하도록 미리 구성되어 있으므로 변경 한 후에 &lt;a href=&quot;../ref/django-admin#django-admin-makemigrations&quot;&gt; &lt;code&gt;makemigrations&lt;/code&gt; &lt;/a&gt; 를 실행하여 마이그레이션을 추가 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="397e08be4588b3e13fecbfaca297d85d558665ee" translate="yes" xml:space="preserve">
          <source>New features and improvements are added.</source>
          <target state="translated">새로운 기능과 개선 사항이 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="cdb2b3eaffe8e9fe13d1e76ec6f821570338db67" translate="yes" xml:space="preserve">
          <source>New in Django 2.2.</source>
          <target state="translated">Django 2.2의 새로운 기능.</target>
        </trans-unit>
        <trans-unit id="a8859c9f8e0e148cbb9c7e291b070736ec990c4d" translate="yes" xml:space="preserve">
          <source>New in Django 2.2:</source>
          <target state="translated">Django 2.2의 새로운 기능 :</target>
        </trans-unit>
        <trans-unit id="7d4766fe3d85797ad596d99b8671ea4eafbe878d" translate="yes" xml:space="preserve">
          <source>New in Django 3.0.</source>
          <target state="translated">Django 3.0의 새로운 기능.</target>
        </trans-unit>
        <trans-unit id="7802f5226ecb3555d94a9cf2a3159c22a8454a02" translate="yes" xml:space="preserve">
          <source>New in Django 3.0:</source>
          <target state="translated">장고 3.0의 새로운 기능 :</target>
        </trans-unit>
        <trans-unit id="3bdd2af04da21e645534a0164ec69a9d2e7eea84" translate="yes" xml:space="preserve">
          <source>New to Django? Or to Web development in general? Well, you came to the right place: read this material to quickly get up and running.</source>
          <target state="translated">장고를 처음 사용하십니까? 아니면 일반적으로 웹 개발? 글쎄, 당신은 바로 이곳에 왔습니다.이 자료를 읽고 빨리 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="42c8c31ac17b91db81378ce6cded2f0b14aad34c" translate="yes" xml:space="preserve">
          <source>Newer is often - but not always - better</source>
          <target state="translated">새로운 것은 종종-항상은 아니지만-더 나은</target>
        </trans-unit>
        <trans-unit id="90839b06d66480978bb51446f706afdc2004ad1e" translate="yes" xml:space="preserve">
          <source>Newer versions of Python, and also of Python packages, will often perform better too - but measure, rather than assume.</source>
          <target state="translated">최신 버전의 Python 및 Python 패키지도 종종 더 나은 성능을 발휘하지만 가정하기보다는 측정합니다.</target>
        </trans-unit>
        <trans-unit id="0f758a36445ca7a95d9a1d5274601a1eef8619f7" translate="yes" xml:space="preserve">
          <source>Newlines in the HTML content will be preserved.</source>
          <target state="translated">HTML 내용의 줄 바꿈이 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="60c9dfae09ab7d11db1bd2a8800128d7b6ebdec0" translate="yes" xml:space="preserve">
          <source>Newlines within the string will be removed.</source>
          <target state="translated">문자열 내 줄 바꿈이 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="11fc14203dd0f4441645a9c34d5dd022905f56e4" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="translated">다음 단계</target>
        </trans-unit>
        <trans-unit id="6d1add59418ea384f8c14da01d32dd82a0c03a15" translate="yes" xml:space="preserve">
          <source>Next we need to import the test client class (later in &lt;code&gt;tests.py&lt;/code&gt; we will use the &lt;a href=&quot;../topics/testing/tools#django.test.TestCase&quot;&gt;&lt;code&gt;django.test.TestCase&lt;/code&gt;&lt;/a&gt; class, which comes with its own client, so this won&amp;rsquo;t be required):</source>
          <target state="translated">다음으로 테스트 클라이언트 클래스를 가져와야합니다 ( &lt;code&gt;tests.py&lt;/code&gt; 에서 자체 클라이언트와 함께 제공되는 &lt;a href=&quot;../topics/testing/tools#django.test.TestCase&quot;&gt; &lt;code&gt;django.test.TestCase&lt;/code&gt; &lt;/a&gt; 클래스 를 사용 하므로 필요하지 않습니다).</target>
        </trans-unit>
        <trans-unit id="b111a7c819e1512c7c04b41004b2e237b4657367" translate="yes" xml:space="preserve">
          <source>Next we&amp;rsquo;ll be adding the &lt;code&gt;make_toast()&lt;/code&gt; function.</source>
          <target state="translated">다음으로 &lt;code&gt;make_toast()&lt;/code&gt; 함수를 추가 하겠습니다 .</target>
        </trans-unit>
        <trans-unit id="76a45c894c9d7c9724383aea29e1d93ed7e569dd" translate="yes" xml:space="preserve">
          <source>Next we&amp;rsquo;ll create &lt;code&gt;setup.cfg&lt;/code&gt; and &lt;code&gt;setup.py&lt;/code&gt; files which detail how to build and install the app. A full explanation of these files is beyond the scope of this tutorial, but the &lt;a href=&quot;https://setuptools.readthedocs.io/en/latest/&quot;&gt;setuptools documentation&lt;/a&gt; has a good explanation. Create the files &lt;code&gt;django-polls/setup.cfg&lt;/code&gt; and &lt;code&gt;django-polls/setup.py&lt;/code&gt; with the following contents:</source>
          <target state="translated">다음으로 앱 빌드 및 설치 방법을 자세히 설명하는 &lt;code&gt;setup.cfg&lt;/code&gt; 및 &lt;code&gt;setup.py&lt;/code&gt; 파일을 만듭니다 . 이러한 파일에 대한 자세한 설명은이 학습서의 범위를 벗어나지 만 &lt;a href=&quot;https://setuptools.readthedocs.io/en/latest/&quot;&gt;setuptools 문서&lt;/a&gt; 에는 좋은 설명이 있습니다. 다음 내용으로 &lt;code&gt;django-polls/setup.cfg&lt;/code&gt; 및 &lt;code&gt;django-polls/setup.py&lt;/code&gt; 파일을 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="2428b562258cc645b8a378441e5a8efef21e5410" translate="yes" xml:space="preserve">
          <source>Next we&amp;rsquo;ll need to ensure this &lt;code&gt;wsgi.py&lt;/code&gt; with a WSGI application object exists. As of Django version 1.4, &lt;a href=&quot;../../../ref/django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;startproject&lt;/code&gt;&lt;/a&gt; will have created one for you; otherwise, you&amp;rsquo;ll need to create it. See the &lt;a href=&quot;index&quot;&gt;WSGI overview documentation&lt;/a&gt; for the default contents you should put in this file, and what else you can add to it.</source>
          <target state="translated">다음 으로 WSGI 응용 프로그램 객체가있는 이 &lt;code&gt;wsgi.py&lt;/code&gt; 가 존재 하는지 확인해야 합니다. Django 버전 1.4부터 &lt;a href=&quot;../../../ref/django-admin#django-admin-startproject&quot;&gt; &lt;code&gt;startproject&lt;/code&gt; &lt;/a&gt; 는 하나를 만들었습니다. 그렇지 않으면 생성해야합니다. 이 파일에 넣어야하는 기본 내용 및 추가 할 수있는 내용은 &lt;a href=&quot;index&quot;&gt;WSGI 개요 설명서&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4458b46e2456208cc57f0c3fe8234e81455698af" translate="yes" xml:space="preserve">
          <source>Next, add the following at the top of &lt;code&gt;polls/templates/polls/index.html&lt;/code&gt;:</source>
          <target state="translated">다음으로 &lt;code&gt;polls/templates/polls/index.html&lt;/code&gt; 상단에 다음을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="c7e08d179fd99e5127a4244c23ceecf4befacdb5" translate="yes" xml:space="preserve">
          <source>Next, change into the directory where GEOS was unpacked, run the configure script, compile, and install:</source>
          <target state="translated">다음으로, GEOS의 압축이 풀린 디렉토리로 변경하고 configure 스크립트를 실행하고 컴파일하고 설치하십시오 :</target>
        </trans-unit>
        <trans-unit id="97c565000f4ddc46a4029869cb4fde12f8283aea" translate="yes" xml:space="preserve">
          <source>Next, create the template used to render the tag&amp;rsquo;s output. This template is a fixed feature of the tag: the tag writer specifies it, not the template designer. Following our example, the template is very short:</source>
          <target state="translated">그런 다음 태그의 출력을 렌더링하는 데 사용되는 템플릿을 만듭니다. 이 템플릿은 태그의 고정 된 기능입니다. 태그 작성기는 템플릿 디자이너가 아니라 태그를 지정합니다. 이 예에 따르면 템플릿이 매우 짧습니다.</target>
        </trans-unit>
        <trans-unit id="b06e64f44c84b4c936c45d05747ad2632f4f84e0" translate="yes" xml:space="preserve">
          <source>Next, edit your &lt;code&gt;urls.py&lt;/code&gt; in the &lt;code&gt;geodjango&lt;/code&gt; application folder as follows:</source>
          <target state="translated">다음으로 &lt;code&gt;geodjango&lt;/code&gt; 애플리케이션 폴더 에서 &lt;code&gt;urls.py&lt;/code&gt; 를 다음과 같이 편집하십시오 .</target>
        </trans-unit>
        <trans-unit id="977397e98ad4a4b3fb6d6c58fd844d5bc9efb0cf" translate="yes" xml:space="preserve">
          <source>Next, edit your Apache configuration to add a location that you want only authenticated users to be able to view:</source>
          <target state="translated">다음으로 인증 된 사용자 만 볼 수있는 위치를 추가하도록 Apache 구성을 편집하십시오.</target>
        </trans-unit>
        <trans-unit id="c378e99152f7b9fca914a5bcc9c3e1b7f8efc41d" translate="yes" xml:space="preserve">
          <source>Next, import the &lt;code&gt;load&lt;/code&gt; module, call the &lt;code&gt;run&lt;/code&gt; routine, and watch &lt;code&gt;LayerMapping&lt;/code&gt; do the work:</source>
          <target state="translated">그런 다음 &lt;code&gt;load&lt;/code&gt; 모듈을 가져 와서 &lt;code&gt;run&lt;/code&gt; 루틴을 호출하고 &lt;code&gt;LayerMapping&lt;/code&gt; 이 작업을 수행하는 것을보십시오.</target>
        </trans-unit>
        <trans-unit id="0ebf4ba3fa141f4156fed974267f5f3468106b7b" translate="yes" xml:space="preserve">
          <source>Next, let&amp;rsquo;s register it for &lt;code&gt;IntegerField&lt;/code&gt;:</source>
          <target state="translated">다음으로 &lt;code&gt;IntegerField&lt;/code&gt; 에 등록 해 봅시다 :</target>
        </trans-unit>
        <trans-unit id="70a1521747b230808ef34f3a484673e2d3e2c778" translate="yes" xml:space="preserve">
          <source>Next, let&amp;rsquo;s register it:</source>
          <target state="translated">다음으로 등록합시다 :</target>
        </trans-unit>
        <trans-unit id="654260d8e6502409d1293980e5369dedc75a1e08" translate="yes" xml:space="preserve">
          <source>Next, run the &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; command to install any extra needed database records such as admin permissions and content types:</source>
          <target state="translated">그런 다음 &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt; 명령을 실행하여 관리자 권한 및 컨텐츠 유형과 같은 추가로 필요한 데이터베이스 레코드를 설치하십시오.</target>
        </trans-unit>
        <trans-unit id="7bd185e2faa9b778aa47cb7ad13b219b635277a4" translate="yes" xml:space="preserve">
          <source>Next, run the &lt;code&gt;configure&lt;/code&gt; script &amp;ndash; however the &lt;code&gt;CFLAGS&lt;/code&gt; environment variable needs to be customized so that SQLite knows to build the R*Tree module:</source>
          <target state="translated">다음으로 &lt;code&gt;configure&lt;/code&gt; 스크립트를 실행하십시오. 그러나 SQLite가 R * Tree 모듈을 빌드 할 수 있도록 &lt;code&gt;CFLAGS&lt;/code&gt; 환경 변수를 사용자 정의해야합니다.</target>
        </trans-unit>
        <trans-unit id="6725dcdbf417b3ebc4306851939ccba5bb592dda" translate="yes" xml:space="preserve">
          <source>Next, run the Django command-line utilities to create the database tables automatically:</source>
          <target state="translated">다음으로 Django 명령 행 유틸리티를 실행하여 데이터베이스 테이블을 자동으로 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="3d2afbfa24772718392bac2a4e9a06485063aa1a" translate="yes" xml:space="preserve">
          <source>Next, start up the Django development server:</source>
          <target state="translated">다음으로 Django 개발 서버를 시작하십시오 :</target>
        </trans-unit>
        <trans-unit id="71a03345430550cc7e9c59db9c5b7395c24fb91c" translate="yes" xml:space="preserve">
          <source>Next, untar the source code archive, and extract the datum shifting files in the &lt;code&gt;nad&lt;/code&gt; subdirectory. This must be done &lt;em&gt;prior&lt;/em&gt; to configuration:</source>
          <target state="translated">다음으로, 소스 코드 아카이브를 압축 해제하고 &lt;code&gt;nad&lt;/code&gt; 서브 디렉토리 에서 데이텀 전환 파일을 추출하십시오 . 구성 &lt;em&gt;하기 전에&lt;/em&gt; 수행해야합니다 .</target>
        </trans-unit>
        <trans-unit id="021c776346f3be3e04eaad68d47bfd2f60ac64ea" translate="yes" xml:space="preserve">
          <source>Next, we define a function called &lt;code&gt;current_datetime&lt;/code&gt;. This is the view function. Each view function takes an &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; object as its first parameter, which is typically named &lt;code&gt;request&lt;/code&gt;.</source>
          <target state="translated">다음으로 &lt;code&gt;current_datetime&lt;/code&gt; 이라는 함수를 정의합니다 . 보기 기능입니다. 각 뷰 함수는 &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; &lt;/a&gt; 객체를 첫 번째 매개 변수로 사용하며 일반적으로 &lt;code&gt;request&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="285aab5cab4e6d27cc92dd179795c52e99d8e048" translate="yes" xml:space="preserve">
          <source>Next, we write the method responsible for generating the SQL:</source>
          <target state="translated">다음으로 SQL 생성을 담당하는 메소드를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="0c7a20054827a1f65c3805460f6867fbf008e055" translate="yes" xml:space="preserve">
          <source>Next, we&amp;rsquo;ll create a subdirectory for images. Create an &lt;code&gt;images&lt;/code&gt; subdirectory in the &lt;code&gt;polls/static/polls/&lt;/code&gt; directory. Inside this directory, put an image called &lt;code&gt;background.gif&lt;/code&gt;. In other words, put your image in &lt;code&gt;polls/static/polls/images/background.gif&lt;/code&gt;.</source>
          <target state="translated">다음으로 이미지의 하위 디렉토리를 만듭니다. &lt;code&gt;polls/static/polls/&lt;/code&gt; 디렉토리에 &lt;code&gt;images&lt;/code&gt; 서브 디렉토리를 작성하십시오 . 이 디렉토리 안에 &lt;code&gt;background.gif&lt;/code&gt; 라는 이미지를 넣습니다 . 즉, 이미지를 &lt;code&gt;polls/static/polls/images/background.gif&lt;/code&gt; 에 넣으십시오 .</target>
        </trans-unit>
        <trans-unit id="2448d8012ce49bb13b445b0d77f557096a6e430b" translate="yes" xml:space="preserve">
          <source>Next, we&amp;rsquo;ll need to inform our &lt;a href=&quot;index#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt; of the action. This works just like any other configuration option. So, the complete &lt;code&gt;admin.py&lt;/code&gt; with the action and its registration would look like:</source>
          <target state="translated">다음으로 &lt;a href=&quot;index#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; &lt;/a&gt; 에 조치 를 알려야 합니다. 이것은 다른 구성 옵션과 동일하게 작동합니다. 따라서 액션과 등록을 포함한 완전한 &lt;code&gt;admin.py&lt;/code&gt; 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="96a65e04544e3b461117b55fa16483b977d28de6" translate="yes" xml:space="preserve">
          <source>Next, we&amp;rsquo;ll write the &lt;code&gt;PublisherBookList&lt;/code&gt; view itself:</source>
          <target state="translated">다음으로 &lt;code&gt;PublisherBookList&lt;/code&gt; 뷰 자체를 작성합니다 .</target>
        </trans-unit>
        <trans-unit id="a0e179a073e3c81a9e2691303a73447da0cb82ce" translate="yes" xml:space="preserve">
          <source>Next, we&amp;rsquo;re going to remove our old &lt;code&gt;index&lt;/code&gt;, &lt;code&gt;detail&lt;/code&gt;, and &lt;code&gt;results&lt;/code&gt; views and use Django&amp;rsquo;s generic views instead. To do so, open the &lt;code&gt;polls/views.py&lt;/code&gt; file and change it like so:</source>
          <target state="translated">다음으로 이전 &lt;code&gt;index&lt;/code&gt; , &lt;code&gt;detail&lt;/code&gt; 및 &lt;code&gt;results&lt;/code&gt; 뷰 를 제거하고 대신 Django의 일반 뷰를 사용합니다. 이렇게하려면 &lt;code&gt;polls/views.py&lt;/code&gt; 파일을 열고 다음 과 같이 변경하십시오.</target>
        </trans-unit>
        <trans-unit id="5f86a40e869fcd75bbca46dc9ff1ce17defbb2ec" translate="yes" xml:space="preserve">
          <source>Next, you must replace the &lt;a href=&quot;../ref/contrib/auth#django.contrib.auth.backends.ModelBackend&quot;&gt;&lt;code&gt;ModelBackend&lt;/code&gt;&lt;/a&gt; with &lt;a href=&quot;../ref/contrib/auth#django.contrib.auth.backends.RemoteUserBackend&quot;&gt;&lt;code&gt;RemoteUserBackend&lt;/code&gt;&lt;/a&gt; in the &lt;a href=&quot;../ref/settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt;&lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt;&lt;/a&gt; setting:</source>
          <target state="translated">다음으로 &lt;a href=&quot;../ref/settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt; &lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt; &lt;/a&gt; 설정 에서 &lt;a href=&quot;../ref/contrib/auth#django.contrib.auth.backends.ModelBackend&quot;&gt; &lt;code&gt;ModelBackend&lt;/code&gt; &lt;/a&gt; 를 &lt;a href=&quot;../ref/contrib/auth#django.contrib.auth.backends.RemoteUserBackend&quot;&gt; &lt;code&gt;RemoteUserBackend&lt;/code&gt; &lt;/a&gt; 로 바꿔야 합니다.</target>
        </trans-unit>
        <trans-unit id="f2560cbce63028d4ce27fdd2ae2588b9ae69ca1e" translate="yes" xml:space="preserve">
          <source>Nginx</source>
          <target state="translated">Nginx</target>
        </trans-unit>
        <trans-unit id="816c52fd2bdd94a63cd0944823a6c0aa9384c103" translate="yes" xml:space="preserve">
          <source>No</source>
          <target state="translated">No</target>
        </trans-unit>
        <trans-unit id="20edec5d0ae49d85148c06bcee71d165b579befe" translate="yes" xml:space="preserve">
          <source>No arguments: All apps have all of their migrations run.</source>
          <target state="translated">인수 없음 : 모든 앱에서 모든 마이그레이션이 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="d14d96d5d8b6c42d1f07720884470a5df54ddfae" translate="yes" xml:space="preserve">
          <source>No bulletproof technical solution exists at the framework level to safely validate all user uploaded file content, however, there are some other steps you can take to mitigate these attacks:</source>
          <target state="translated">프레임 워크 수준에는 사용자가 업로드 한 모든 파일 내용을 안전하게 확인하기위한 방탄 기술 솔루션이 없지만 이러한 공격을 완화하기 위해 수행 할 수있는 다른 단계가 있습니다.</target>
        </trans-unit>
        <trans-unit id="3d8384f7fd7da9b2b422f4c883195efb29896bda" translate="yes" xml:space="preserve">
          <source>No checking is done on the SQL statement that is passed in to &lt;code&gt;.raw()&lt;/code&gt;. Django expects that the statement will return a set of rows from the database, but does nothing to enforce that. If the query does not return rows, a (possibly cryptic) error will result.</source>
          <target state="translated">&lt;code&gt;.raw()&lt;/code&gt; 전달 된 SQL 문에서 점검이 수행되지 않습니다 . Django는 명령문이 데이터베이스에서 행 세트를 리턴 할 것으로 예상하지만이를 강제로 수행하지는 않습니다. 쿼리가 행을 반환하지 않으면 (암호적인) 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="3b1825829e0d568b54e3f2738dbb38d3f1fe4df1" translate="yes" xml:space="preserve">
          <source>No gettext?</source>
          <target state="translated">gettext가 없습니까?</target>
        </trans-unit>
        <trans-unit id="77e07c3be309fde63eb2e14702370190c908a04a" translate="yes" xml:space="preserve">
          <source>No matter which database backend we are using, this will mean that &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; and other SQL commands create the right column type for storing a string.</source>
          <target state="translated">어떤 데이터베이스 백엔드를 사용하든 &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt; 및 기타 SQL 명령은 문자열을 저장하기위한 올바른 열 유형을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="12930b65de7726f62fe80a0b6083ac02553c2c82" translate="yes" xml:space="preserve">
          <source>No referrer: do not send a &lt;code&gt;Referer&lt;/code&gt; header at all.</source>
          <target state="translated">리퍼러는 : 송신하지 않는 &lt;code&gt;Referer&lt;/code&gt; 전혀 헤더를.</target>
        </trans-unit>
        <trans-unit id="4a2f33f43afb49828b5490390f091674882fcb65" translate="yes" xml:space="preserve">
          <source>No safety guarantee</source>
          <target state="translated">안전 보장 없음</target>
        </trans-unit>
        <trans-unit id="5d4134379c894768a5b0b531aeca8ad07511ff4d" translate="yes" xml:space="preserve">
          <source>No, that&amp;rsquo;s not a typo: the &amp;ldquo;update&amp;rdquo; middleware must be first in the list, and the &amp;ldquo;fetch&amp;rdquo; middleware must be last. The details are a bit obscure, but see &lt;a href=&quot;#order-of-middleware&quot;&gt;Order of MIDDLEWARE&lt;/a&gt; below if you&amp;rsquo;d like the full story.</source>
          <target state="translated">아니요, 오타가 아닙니다.&amp;ldquo;업데이트&amp;rdquo;미들웨어가 목록에서 가장 먼저 있어야하고&amp;ldquo;페치&amp;rdquo;미들웨어가 마지막이어야합니다. 자세한 내용은 다소 모호하지만 전체 내용을 보려면 아래 &lt;a href=&quot;#order-of-middleware&quot;&gt;의 MIDDLEWARE 순서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0bae75e75a1d8c0944e2819de3d77ea82e28a278" translate="yes" xml:space="preserve">
          <source>No, this is by design. Not linking CSRF protection to a session allows using the protection on sites such as a &lt;code&gt;pastebin&lt;/code&gt; that allow submissions from anonymous users which don&amp;rsquo;t have a session.</source>
          <target state="translated">아니요, 이것은 의도적으로 설계된 것입니다. CSRF 보호를 세션에 연결 하지 않으면 세션이없는 익명 사용자의 제출을 ​​허용 하는 &lt;code&gt;pastebin&lt;/code&gt; 과 같은 사이트에서 보호 를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="75a6e20e5d3d2a956555b09b0ceec04066703569" translate="yes" xml:space="preserve">
          <source>No, this is by design. Without a man-in-the-middle attack, there is no way for an attacker to send a CSRF token cookie to a victim&amp;rsquo;s browser, so a successful attack would need to obtain the victim&amp;rsquo;s browser&amp;rsquo;s cookie via XSS or similar, in which case an attacker usually doesn&amp;rsquo;t need CSRF attacks.</source>
          <target state="translated">아니요, 이것은 의도적으로 설계된 것입니다. MITM (Man-in-the-Middle) 공격이 없으면 공격자가 CSRF 토큰 쿠키를 피해자의 브라우저로 보낼 수있는 방법이 없으므로 성공적인 공격은 XSS 또는 이와 유사한 방법을 통해 피해자의 브라우저 쿠키를 얻어야합니다. 공격자는 일반적으로 CSRF 공격이 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="bd0b455c46e5ca610bef77120da2e5ba9eaebc54" translate="yes" xml:space="preserve">
          <source>Non-atomic migrations</source>
          <target state="translated">비 원자 마이그레이션</target>
        </trans-unit>
        <trans-unit id="69833b38232d3e89572bdb6759074b9ad006c98c" translate="yes" xml:space="preserve">
          <source>Non-field errors (and/or hidden field errors that are rendered at the top of the form when using helpers like &lt;code&gt;form.as_p()&lt;/code&gt;) will be rendered with an additional class of &lt;code&gt;nonfield&lt;/code&gt; to help distinguish them from field-specific errors. For example, &lt;code&gt;{{ form.non_field_errors }}&lt;/code&gt; would look like:</source>
          <target state="translated">비 필드 오류 (같은 헬퍼 사용하는 경우 양식의 맨 위에 렌더링 및 / 또는 숨겨진 필드 오류 &lt;code&gt;form.as_p()&lt;/code&gt; )의 추가 클래스와 렌더링됩니다 &lt;code&gt;nonfield&lt;/code&gt; 도움에 필드 고유의 오류를 구별. 예를 들어 &lt;code&gt;{{ form.non_field_errors }}&lt;/code&gt; 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6eef6648406c333a4035cd5e60d0bf2ecf2606d7" translate="yes" xml:space="preserve">
          <source>None</source>
          <target state="translated">None</target>
        </trans-unit>
        <trans-unit id="c32acd7553559b10b098232e03fd1062116c6e62" translate="yes" xml:space="preserve">
          <source>None of this is true in a time zone aware environment:</source>
          <target state="translated">시간대 인식 환경에서는이 중 어느 것도 해당되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6c905dba689783614e7cd8189d7380a8142bf699" translate="yes" xml:space="preserve">
          <source>Normal Python name resolution rules apply. If you have multiple base classes that declare a &lt;code&gt;Meta&lt;/code&gt; inner class, only the first one will be used. This means the child&amp;rsquo;s &lt;code&gt;Meta&lt;/code&gt;, if it exists, otherwise the &lt;code&gt;Meta&lt;/code&gt; of the first parent, etc.</source>
          <target state="translated">일반적인 파이썬 이름 확인 규칙이 적용됩니다. &lt;code&gt;Meta&lt;/code&gt; 내부 클래스 를 선언하는 여러 기본 클래스가있는 경우 첫 번째 클래스 만 사용됩니다. 이것은 아이의 &lt;code&gt;Meta&lt;/code&gt; 가 존재한다면 존재하고 그렇지 않으면 첫 번째 부모 의 &lt;code&gt;Meta&lt;/code&gt; 등을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="787e251fceb20e20f58285f09344abec1dac3b8e" translate="yes" xml:space="preserve">
          <source>Normal Python unit test classes extend a base class of &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase&quot;&gt;&lt;code&gt;unittest.TestCase&lt;/code&gt;&lt;/a&gt;. Django provides a few extensions of this base class:</source>
          <target state="translated">일반적인 Python 단위 테스트 클래스는 &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase&quot;&gt; &lt;code&gt;unittest.TestCase&lt;/code&gt; &lt;/a&gt; 의 기본 클래스를 확장합니다 . Django는이 기본 클래스의 몇 가지 확장을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="1ad536357eed7c72cb7dc875d4df958bc22cdd9b" translate="yes" xml:space="preserve">
          <source>Normalizes email addresses by lowercasing the domain portion of the email address.</source>
          <target state="translated">이메일 주소의 도메인 부분을 줄임으로써 이메일 주소를 정규화합니다.</target>
        </trans-unit>
        <trans-unit id="d2bd9144908a9d20be8073dbbaa165af1378fd10" translate="yes" xml:space="preserve">
          <source>Normalizes the email by calling &lt;a href=&quot;#django.contrib.auth.models.BaseUserManager.normalize_email&quot;&gt;&lt;code&gt;BaseUserManager.normalize_email()&lt;/code&gt;&lt;/a&gt;. If you override this method, be sure to call &lt;code&gt;super()&lt;/code&gt; to retain the normalization.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.auth.models.BaseUserManager.normalize_email&quot;&gt; &lt;code&gt;BaseUserManager.normalize_email()&lt;/code&gt; &lt;/a&gt; 을 호출하여 이메일을 정규화합니다 . 이 메서드를 재정의하는 경우 정규화를 유지하려면 &lt;code&gt;super()&lt;/code&gt; 를 호출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="ebca8d3e7cb9434f28975cda931653991094e57c" translate="yes" xml:space="preserve">
          <source>Normalizes the username by calling &lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser.normalize_username&quot;&gt;&lt;code&gt;normalize_username()&lt;/code&gt;&lt;/a&gt;. If you override this method, be sure to call &lt;code&gt;super()&lt;/code&gt; to retain the normalization.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.auth.models.AbstractBaseUser.normalize_username&quot;&gt; &lt;code&gt;normalize_username()&lt;/code&gt; &lt;/a&gt; 을 호출하여 사용자 이름을 정규화합니다 . 이 메소드를 재정의하는 경우 정규화를 유지하려면 &lt;code&gt;super()&lt;/code&gt; 를 호출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="c716c10654bb0f9670d96ab83c4ff9181bbc894e" translate="yes" xml:space="preserve">
          <source>Normalizes to: A &lt;a href=&quot;https://docs.python.org/3/library/uuid.html#uuid.UUID&quot;&gt;&lt;code&gt;UUID&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3/library/uuid.html#uuid.UUID&quot;&gt; &lt;code&gt;UUID&lt;/code&gt; &lt;/a&gt; 객체로 정규화 합니다.</target>
        </trans-unit>
        <trans-unit id="23571b266e909356ef73bc9292429433256272f7" translate="yes" xml:space="preserve">
          <source>Normalizes to: A &lt;code&gt;QuerySet&lt;/code&gt; of model instances.</source>
          <target state="translated">모델 인스턴스 의 &lt;code&gt;QuerySet&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d8db01bd92878bf8c9d9ba50bf01d544d075050e" translate="yes" xml:space="preserve">
          <source>Normalizes to: A Python &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.timedelta&quot;&gt;&lt;code&gt;timedelta&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Python &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.timedelta&quot;&gt; &lt;code&gt;timedelta&lt;/code&gt; 로&lt;/a&gt; 정규화합니다 .</target>
        </trans-unit>
        <trans-unit id="f06883286dbd9b7a7366dcec2b203da4a388e3d8" translate="yes" xml:space="preserve">
          <source>Normalizes to: A Python &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt; value.</source>
          <target state="translated">Python &lt;code&gt;True&lt;/code&gt; 또는 &lt;code&gt;False&lt;/code&gt; 값으로 정규화 합니다.</target>
        </trans-unit>
        <trans-unit id="d4886d2a0f53043db52f5cde8feddfa0bc26c7b2" translate="yes" xml:space="preserve">
          <source>Normalizes to: A Python &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;False&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt; value.</source>
          <target state="translated">Python &lt;code&gt;True&lt;/code&gt; , &lt;code&gt;False&lt;/code&gt; 또는 &lt;code&gt;None&lt;/code&gt; 값으로 정규화 합니다.</target>
        </trans-unit>
        <trans-unit id="605b63bef291da49b100f180cd452f4da48ba0c9" translate="yes" xml:space="preserve">
          <source>Normalizes to: A Python &lt;code&gt;datetime.date&lt;/code&gt; object.</source>
          <target state="translated">Python &lt;code&gt;datetime.date&lt;/code&gt; 객체로 정규화 합니다.</target>
        </trans-unit>
        <trans-unit id="9ca92c54da10e1d5c685996a1b8233213ac1d451" translate="yes" xml:space="preserve">
          <source>Normalizes to: A Python &lt;code&gt;datetime.datetime&lt;/code&gt; object.</source>
          <target state="translated">파이썬 &lt;code&gt;datetime.datetime&lt;/code&gt; 객체.</target>
        </trans-unit>
        <trans-unit id="f27a4c57bf6c2c00615c6bd981ee576ffc7d62f7" translate="yes" xml:space="preserve">
          <source>Normalizes to: A Python &lt;code&gt;datetime.time&lt;/code&gt; object.</source>
          <target state="translated">파이썬 &lt;code&gt;datetime.time&lt;/code&gt; 객체.</target>
        </trans-unit>
        <trans-unit id="8208bd6963bb476e18fec3f6260c3df00f3671a6" translate="yes" xml:space="preserve">
          <source>Normalizes to: A Python &lt;code&gt;decimal&lt;/code&gt;.</source>
          <target state="translated">다음과 같이 정규화합니다. Python &lt;code&gt;decimal&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="77e22ea42119f399cbae9e4153b4d1808eaee60c" translate="yes" xml:space="preserve">
          <source>Normalizes to: A Python float.</source>
          <target state="translated">파이썬 플로트.</target>
        </trans-unit>
        <trans-unit id="3a1c8382df016399dc527e0652beec43e30a44b8" translate="yes" xml:space="preserve">
          <source>Normalizes to: A Python integer.</source>
          <target state="translated">파이썬 정수.</target>
        </trans-unit>
        <trans-unit id="a22741f23a65dd20cd7fdbc9a7d00afdfb0db9cf" translate="yes" xml:space="preserve">
          <source>Normalizes to: A list of strings.</source>
          <target state="translated">다음으로 정규화 : 문자열 목록.</target>
        </trans-unit>
        <trans-unit id="03edfdc79677e527c568c032a0794b48135d3b8f" translate="yes" xml:space="preserve">
          <source>Normalizes to: A list of values of the type provided by the &lt;code&gt;coerce&lt;/code&gt; argument.</source>
          <target state="translated">다음으로 정규화 : &lt;code&gt;coerce&lt;/code&gt; 인수에 의해 제공되는 유형의 값 목록 .</target>
        </trans-unit>
        <trans-unit id="7a4cda7e66de907da2a21e509ad56f05074178a7" translate="yes" xml:space="preserve">
          <source>Normalizes to: A model instance.</source>
          <target state="translated">다음으로 정규화합니다. 모델 인스턴스.</target>
        </trans-unit>
        <trans-unit id="55888b9b4ff1eb1ec8ba6a3bbc52308ac1adbfc2" translate="yes" xml:space="preserve">
          <source>Normalizes to: A string.</source>
          <target state="translated">정규화 : 문자열.</target>
        </trans-unit>
        <trans-unit id="24a53ad769cff7f9d766b78fc9dcb56af2255d2e" translate="yes" xml:space="preserve">
          <source>Normalizes to: A string. IPv6 addresses are normalized as described below.</source>
          <target state="translated">정규화 : 문자열. IPv6 주소는 아래 설명 된대로 정규화됩니다.</target>
        </trans-unit>
        <trans-unit id="f17a7f7bab37ec3a1b4b6f3ae02f34271a88be2a" translate="yes" xml:space="preserve">
          <source>Normalizes to: A value of the type provided by the &lt;a href=&quot;#django.forms.TypedChoiceField.coerce&quot;&gt;&lt;code&gt;coerce&lt;/code&gt;&lt;/a&gt; argument.</source>
          <target state="translated">다음으로 정규화 : &lt;a href=&quot;#django.forms.TypedChoiceField.coerce&quot;&gt; &lt;code&gt;coerce&lt;/code&gt; &lt;/a&gt; 인수에 의해 제공되는 유형의 값 .</target>
        </trans-unit>
        <trans-unit id="8e7beb335ed1ad3ce19afe6d6855d444ffea421d" translate="yes" xml:space="preserve">
          <source>Normalizes to: An &lt;code&gt;UploadedFile&lt;/code&gt; object that wraps the file content and file name into a single object.</source>
          <target state="translated">정규화 대상 : 파일 내용과 파일 이름을 단일 객체로 래핑 하는 &lt;code&gt;UploadedFile&lt;/code&gt; 객체.</target>
        </trans-unit>
        <trans-unit id="4e7bc8818cf68569ca76c5ed75dcf2518442499f" translate="yes" xml:space="preserve">
          <source>Normalizes to: the type returned by the &lt;code&gt;compress&lt;/code&gt; method of the subclass.</source>
          <target state="translated">정규화 : 서브 클래스 의 &lt;code&gt;compress&lt;/code&gt; 메소드가 리턴 한 유형 .</target>
        </trans-unit>
        <trans-unit id="4ed9d7700d72a59a0582b3f18f6a1b3e16b71b15" translate="yes" xml:space="preserve">
          <source>Normally the &lt;a href=&quot;templates/builtins#std:templatetag-csrf_token&quot;&gt;&lt;code&gt;csrf_token&lt;/code&gt;&lt;/a&gt; template tag will not work if &lt;code&gt;CsrfViewMiddleware.process_view&lt;/code&gt; or an equivalent like &lt;code&gt;csrf_protect&lt;/code&gt; has not run. The view decorator &lt;code&gt;requires_csrf_token&lt;/code&gt; can be used to ensure the template tag does work. This decorator works similarly to &lt;code&gt;csrf_protect&lt;/code&gt;, but never rejects an incoming request.</source>
          <target state="translated">&lt;code&gt;CsrfViewMiddleware.process_view&lt;/code&gt; 또는 이와 동등한 &lt;code&gt;csrf_protect&lt;/code&gt; 가 실행되지 않으면 일반적으로 &lt;a href=&quot;templates/builtins#std:templatetag-csrf_token&quot;&gt; &lt;code&gt;csrf_token&lt;/code&gt; &lt;/a&gt; 템플리트 태그가 작동 하지 않습니다. 뷰 데코레이터 &lt;code&gt;requires_csrf_token&lt;/code&gt; 은 템플릿 태그가 작업을 수행하기 위해 사용할 수 있습니다. 이 데코레이터는 &lt;code&gt;csrf_protect&lt;/code&gt; 와 유사하게 작동 하지만 들어오는 요청을 거부하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="cdf12ca4e299dccc08f02ece3bea84cff2a538e5" translate="yes" xml:space="preserve">
          <source>Normally the template name is relative to the template loader&amp;rsquo;s root directory. A string argument may also be a relative path starting with &lt;code&gt;./&lt;/code&gt; or &lt;code&gt;../&lt;/code&gt; as described in the &lt;a href=&quot;#std:templatetag-extends&quot;&gt;&lt;code&gt;extends&lt;/code&gt;&lt;/a&gt; tag.</source>
          <target state="translated">일반적으로 템플릿 이름은 템플릿 로더의 루트 디렉토리를 기준으로합니다. 문자열 인수는 &lt;a href=&quot;#std:templatetag-extends&quot;&gt; &lt;code&gt;extends&lt;/code&gt; &lt;/a&gt; 태그에 설명 된대로 &lt;code&gt;./&lt;/code&gt; 또는 &lt;code&gt;../&lt;/code&gt; 로 시작하는 상대 경로 일 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="735ce792d80ea48985a0c3c2c332b181a7542837" translate="yes" xml:space="preserve">
          <source>Normally the template name is relative to the template loader&amp;rsquo;s root directory. A string argument may also be a relative path starting with &lt;code&gt;./&lt;/code&gt; or &lt;code&gt;../&lt;/code&gt;. For example, assume the following directory structure:</source>
          <target state="translated">일반적으로 템플릿 이름은 템플릿 로더의 루트 디렉토리를 기준으로합니다. 문자열 인수는 &lt;code&gt;./&lt;/code&gt; 또는 &lt;code&gt;../&lt;/code&gt; 로 시작하는 상대 경로 일 수도 있습니다 . 예를 들어, 다음 디렉토리 구조를 가정하십시오.</target>
        </trans-unit>
        <trans-unit id="2dd3dec7507f373967972687c007b5c2f2200db3" translate="yes" xml:space="preserve">
          <source>Normally you&amp;rsquo;ll only be adding extra tables that don&amp;rsquo;t already appear in the query. However, if the case outlined above does occur, there are a few solutions. First, see if you can get by without including the extra table and use the one already in the query. If that isn&amp;rsquo;t possible, put your &lt;code&gt;extra()&lt;/code&gt; call at the front of the queryset construction so that your table is the first use of that table. Finally, if all else fails, look at the query produced and rewrite your &lt;code&gt;where&lt;/code&gt; addition to use the alias given to your extra table. The alias will be the same each time you construct the queryset in the same way, so you can rely upon the alias name to not change.</source>
          <target state="translated">일반적으로 쿼리에 아직 표시되지 않은 테이블 만 추가합니다. 그러나 위에서 설명한 경우가 발생하면 몇 가지 해결책이 있습니다. 먼저 여분의 테이블을 포함하지 않고 얻을 수 있는지 확인하고 이미 쿼리에있는 테이블을 사용하십시오. 이것이 가능하지 않은 경우 테이블이 해당 테이블의 첫 번째 사용이되도록 &lt;code&gt;extra()&lt;/code&gt; 호출을 쿼리 세트 구성 앞에 배치하십시오. 마지막으로, 다른 모든 방법이 실패하면 생성 된 쿼리를보고 추가 테이블에 제공된 별칭을 사용할 수 &lt;code&gt;where&lt;/code&gt; 추가 위치를 다시 작성하십시오 . 동일한 방식으로 쿼리 세트를 구성 할 때마다 별칭이 동일하므로 별칭 이름을 사용하여 변경하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4f40a32d698fbe63e70a0ff00283bd488789116d" translate="yes" xml:space="preserve">
          <source>Normally, objects have three save options: &amp;ldquo;Save&amp;rdquo;, &amp;ldquo;Save and continue editing&amp;rdquo;, and &amp;ldquo;Save and add another&amp;rdquo;. If &lt;code&gt;save_as&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, &amp;ldquo;Save and add another&amp;rdquo; will be replaced by a &amp;ldquo;Save as new&amp;rdquo; button that creates a new object (with a new ID) rather than updating the existing object.</source>
          <target state="translated">일반적으로 객체에는 &quot;저장&quot;, &quot;저장 후 편집 계속&quot;및 &quot;다른 저장 후 추가&quot;의 세 가지 저장 옵션이 있습니다. 경우 &lt;code&gt;save_as&lt;/code&gt; 는 것입니다 &lt;code&gt;True&lt;/code&gt; , &quot;저장 및 다른 추가&quot;오히려 기존 개체를 업데이트하는 것보다 (새로운 ID로) 새로운 객체를 생성하는 &quot;저장 새와 같은&quot;버튼으로 대체됩니다.</target>
        </trans-unit>
        <trans-unit id="fc1a750f10e8d842b641d322f43c6420831581c7" translate="yes" xml:space="preserve">
          <source>Normally, the save buttons appear only at the bottom of the forms. If you set &lt;code&gt;save_on_top&lt;/code&gt;, the buttons will appear both on the top and the bottom.</source>
          <target state="translated">일반적으로 저장 단추는 양식의 맨 아래에만 나타납니다. &lt;code&gt;save_on_top&lt;/code&gt; 을 설정 하면 버튼이 상단과 하단에 모두 나타납니다.</target>
        </trans-unit>
        <trans-unit id="159f39779a59cc0691baa39db4014b657a742b47" translate="yes" xml:space="preserve">
          <source>Normally, you should always use &lt;a href=&quot;#django.urls.reverse&quot;&gt;&lt;code&gt;reverse()&lt;/code&gt;&lt;/a&gt; to define URLs within your application. However, if your application constructs part of the URL hierarchy itself, you may occasionally need to generate URLs. In that case, you need to be able to find the base URL of the Django project within its Web server (normally, &lt;a href=&quot;#django.urls.reverse&quot;&gt;&lt;code&gt;reverse()&lt;/code&gt;&lt;/a&gt; takes care of this for you). In that case, you can call &lt;code&gt;get_script_prefix()&lt;/code&gt;, which will return the script prefix portion of the URL for your Django project. If your Django project is at the root of its web server, this is always &lt;code&gt;&quot;/&quot;&lt;/code&gt;.</source>
          <target state="translated">일반적으로 응용 프로그램 내에서 URL을 정의 하려면 항상 &lt;a href=&quot;#django.urls.reverse&quot;&gt; &lt;code&gt;reverse()&lt;/code&gt; &lt;/a&gt; 를 사용해야 합니다. 그러나 응용 프로그램이 URL 계층 자체의 일부를 구성하는 경우 때때로 URL을 생성해야 할 수도 있습니다. 이 경우 웹 서버에서 Django 프로젝트의 기본 URL을 찾을 수 있어야합니다 (일반적으로 &lt;a href=&quot;#django.urls.reverse&quot;&gt; &lt;code&gt;reverse()&lt;/code&gt; &lt;/a&gt; 가이를 처리합니다). 이 경우 &lt;code&gt;get_script_prefix()&lt;/code&gt; 호출하면 Django 프로젝트 URL의 스크립트 접두사 부분이 반환됩니다. Django 프로젝트가 웹 서버의 루트에있는 경우 항상 &lt;code&gt;&quot;/&quot;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="e93810e7ce2337ee98760b872339538f911e403d" translate="yes" xml:space="preserve">
          <source>Normally, you will not need to override the defaults in this fashion. The Django defaults are sufficiently tame that you can safely use them. Be aware that if you do pass in a new default module, it entirely &lt;em&gt;replaces&lt;/em&gt; the Django defaults, so you must specify a value for every possible setting that might be used in that code you are importing. Check in &lt;code&gt;django.conf.settings.global_settings&lt;/code&gt; for the full list.</source>
          <target state="translated">일반적으로이 방식으로 기본값을 재정의 할 필요는 없습니다. Django 기본값은 안전하게 사용할 수 있도록 충분히 길들여져 있습니다. 새로운 기본 모듈을 전달 하면 Django 기본값을 완전히 &lt;em&gt;대체&lt;/em&gt; 하므로 가져 오는 해당 코드에서 사용될 수있는 모든 설정에 대한 값을 지정해야합니다. &lt;code&gt;django.conf.settings.global_settings&lt;/code&gt; 에서 전체 목록을 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="0bf43317eddd783b9efbccb3bf152e0b1cdb043f" translate="yes" xml:space="preserve">
          <source>Normally, you won&amp;rsquo;t have to worry about lazy translations. Just be aware that if you examine an object and it claims to be a &lt;code&gt;django.utils.functional.__proxy__&lt;/code&gt; object, it is a lazy translation. Calling &lt;code&gt;str()&lt;/code&gt; with the lazy translation as the argument will generate a string in the current locale.</source>
          <target state="translated">일반적으로 게으른 번역에 대해 걱정할 필요가 없습니다. 객체를 검사 할 때 &lt;code&gt;django.utils.functional.__proxy__&lt;/code&gt; 객체 라고 주장하는 경우 게으른 번역입니다. 인수로 지연 변환과 함께 &lt;code&gt;str()&lt;/code&gt; 을 호출 하면 현재 로케일에서 문자열이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="887896ca3cf9796c1df0cd00c7595e083f030487" translate="yes" xml:space="preserve">
          <source>Normally, you&amp;rsquo;ll only need to use &lt;code&gt;force_str()&lt;/code&gt;. Call it as early as possible on any input data that might be either a string or a bytestring, and from then on, you can treat the result as always being a string.</source>
          <target state="translated">일반적으로 &lt;code&gt;force_str()&lt;/code&gt; 만 사용 하면 됩니다. 문자열 또는 바이트 문자열 일 수있는 모든 입력 데이터에 대해 가능한 빨리 호출 한 다음 결과를 항상 문자열로 취급 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f226bb2d80ebbb2763506939a29736102f7ef23d" translate="yes" xml:space="preserve">
          <source>Normally, you&amp;rsquo;re either writing a Django field to match a particular database column type, or you will need a way to convert your data to, say, a string.</source>
          <target state="translated">일반적으로 특정 데이터베이스 열 유형과 일치하도록 장고 필드를 작성하거나 데이터를 문자열로 변환하는 방법이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="ce4466a62d04187676c02df4614fbce2c4ba7436" translate="yes" xml:space="preserve">
          <source>Not all backends support all functions, so refer to the documentation of each function to see if your database backend supports the function you want to use. If you call a geographic function on a backend that doesn&amp;rsquo;t support it, you&amp;rsquo;ll get a &lt;code&gt;NotImplementedError&lt;/code&gt; exception.</source>
          <target state="translated">모든 백엔드가 모든 기능을 지원하는 것은 아니므로 각 기능의 설명서를 참조하여 데이터베이스 백엔드가 사용하려는 기능을 지원하는지 확인하십시오. 이를 지원하지 않는 백엔드에서 geographic 함수를 호출하면 &lt;code&gt;NotImplementedError&lt;/code&gt; 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="d9b293fdef69d661a6a9fab7edba5fc8c10298b9" translate="yes" xml:space="preserve">
          <source>Not all features of the &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; class are available through the &lt;a href=&quot;#django.core.mail.send_mail&quot;&gt;&lt;code&gt;send_mail()&lt;/code&gt;&lt;/a&gt; and related wrapper functions. If you wish to use advanced features, such as BCC&amp;rsquo;ed recipients, file attachments, or multi-part email, you&amp;rsquo;ll need to create &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; instances directly.</source>
          <target state="translated">&lt;a href=&quot;#django.core.mail.send_mail&quot;&gt; &lt;code&gt;send_mail()&lt;/code&gt; &lt;/a&gt; 및 관련 랩퍼 함수를 통해 &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; &lt;/a&gt; 클래스 의 모든 기능을 사용할 수 있는 것은 아닙니다 . 당신은 BCC'ed받는 사람, 첨부 파일, 또는 여러 부분으로 이메일과 같은 고급 기능을 사용하려면, 당신은 만들어야합니다 &lt;a href=&quot;#django.core.mail.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; 의&lt;/a&gt; 직접 인스턴스.</target>
        </trans-unit>
        <trans-unit id="affd0634cea2588f77f986208d4ea492e34b7daf" translate="yes" xml:space="preserve">
          <source>Not all mixins can be used together, and not all generic class based views can be used with all other mixins. Here we present a few examples that do work; if you want to bring together other functionality then you&amp;rsquo;ll have to consider interactions between attributes and methods that overlap between the different classes you&amp;rsquo;re using, and how &lt;a href=&quot;https://www.python.org/download/releases/2.3/mro/&quot;&gt;method resolution order&lt;/a&gt; will affect which versions of the methods will be called in what order.</source>
          <target state="translated">모든 믹스 인을 함께 사용할 수있는 것은 아니며 모든 일반 클래스 기반 뷰를 다른 모든 믹스 인과 함께 사용할 수있는 것은 아닙니다. 여기 우리는 작동하는 몇 가지 예를 제시합니다. 다른 기능을 함께 사용하려면 사용중인 여러 클래스간에 겹치는 속성과 메서드 간의 상호 작용 및 &lt;a href=&quot;https://www.python.org/download/releases/2.3/mro/&quot;&gt;메서드 확인 순서&lt;/a&gt; 가 어떤 버전의 메서드가 어떤 순서로 호출되는지에 영향을주는 방식 을 고려해야합니다 .</target>
        </trans-unit>
        <trans-unit id="391ee549e2bdb434e349e78237a5df19f1d67675" translate="yes" xml:space="preserve">
          <source>Not contained within. This is the negation of the &lt;code&gt;in&lt;/code&gt; operator.</source>
          <target state="translated">안에 포함되어 있지 않습니다. 이것은 &lt;code&gt;in&lt;/code&gt; 연산자 의 부정입니다 .</target>
        </trans-unit>
        <trans-unit id="d73f1f8457b1700a505f1a5f8a7aa88ca0436156" translate="yes" xml:space="preserve">
          <source>Not every &lt;code&gt;QuerySet&lt;/code&gt; method makes sense at the &lt;code&gt;Manager&lt;/code&gt; level; for instance we intentionally prevent the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.delete&quot;&gt;&lt;code&gt;QuerySet.delete()&lt;/code&gt;&lt;/a&gt; method from being copied onto the &lt;code&gt;Manager&lt;/code&gt; class.</source>
          <target state="translated">모든 &lt;code&gt;QuerySet&lt;/code&gt; 메소드가 &lt;code&gt;Manager&lt;/code&gt; 레벨 에서 의미가있는 것은 아닙니다 . 예를 들어 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.delete&quot;&gt; &lt;code&gt;QuerySet.delete()&lt;/code&gt; &lt;/a&gt; 메소드가 &lt;code&gt;Manager&lt;/code&gt; 클래스 에 복사되는 것을 의도적으로 방지합니다 .</target>
        </trans-unit>
        <trans-unit id="a63cbf6b4d6edab9e07d126c7a36e814a81f1ec6" translate="yes" xml:space="preserve">
          <source>Not every template in &lt;code&gt;contrib/admin/templates/admin&lt;/code&gt; may be overridden per app or per model. The following can:</source>
          <target state="translated">&lt;code&gt;contrib/admin/templates/admin&lt;/code&gt; 의 모든 템플릿이 앱 또는 모델별로 재정의 되는 것은 아닙니다 . 다음이 가능합니다 :</target>
        </trans-unit>
        <trans-unit id="2fc7fe98cf64c700ce9b0cc4bb17c0caec7c3361" translate="yes" xml:space="preserve">
          <source>Not represented in the form</source>
          <target state="translated">형태로 표시되지 않음</target>
        </trans-unit>
        <trans-unit id="d3f69563db3e7715296e2ae2d359c0c8bdd2cce0" translate="yes" xml:space="preserve">
          <source>Not using Django templates?</source>
          <target state="translated">Django 템플릿을 사용하지 않습니까?</target>
        </trans-unit>
        <trans-unit id="2c924e3088204ee77ba681f72be3444357932fca" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="translated">Note</target>
        </trans-unit>
        <trans-unit id="296473149ccc264ba7b462302f22e07ee1613215" translate="yes" xml:space="preserve">
          <source>Note &lt;code&gt;{{ article.pub_date|date:&quot;F j, Y&quot; }}&lt;/code&gt; uses a Unix-style &amp;ldquo;pipe&amp;rdquo; (the &amp;ldquo;|&amp;rdquo; character). This is called a template filter, and it&amp;rsquo;s a way to filter the value of a variable. In this case, the date filter formats a Python datetime object in the given format (as found in PHP&amp;rsquo;s date function).</source>
          <target state="translated">참고 &lt;code&gt;{{ article.pub_date|date:&quot;F j, Y&quot; }}&lt;/code&gt; 는 Unix 스타일의 &quot;pipe&quot;( &quot;|&quot;문자)를 사용합니다. 이를 템플릿 필터라고하며 변수 값을 필터링하는 방법입니다. 이 경우 날짜 필터는 주어진 날짜 형식으로 Python datetime 객체의 형식을 지정합니다 (PHP의 날짜 함수에 있음).</target>
        </trans-unit>
        <trans-unit id="870a794d4d0468102a15a5fa5bb46615f6e62898" translate="yes" xml:space="preserve">
          <source>Note a few important things about how the test client works:</source>
          <target state="translated">테스트 클라이언트 작동 방식에 대한 몇 가지 중요한 사항에 유의하십시오.</target>
        </trans-unit>
        <trans-unit id="5da84070f0015820b57bc36610be733ca3294c24" translate="yes" xml:space="preserve">
          <source>Note also that Django stores signal handlers as weak references by default, so if your handler is a local function, it may be garbage collected. To prevent this, pass &lt;code&gt;weak=False&lt;/code&gt; when you call the signal&amp;rsquo;s &lt;a href=&quot;../topics/signals#django.dispatch.Signal.connect&quot;&gt;&lt;code&gt;connect()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Django는 기본적으로 신호 처리기를 약한 참조로 저장하므로 처리기가 로컬 함수 인 경우 가비지 수집 될 수 있습니다. 이를 방지하려면 신호의 &lt;a href=&quot;../topics/signals#django.dispatch.Signal.connect&quot;&gt; &lt;code&gt;connect()&lt;/code&gt; &lt;/a&gt; 를 호출 할 때 &lt;code&gt;weak=False&lt;/code&gt; 를 전달 하십시오 .</target>
        </trans-unit>
        <trans-unit id="14299bd3cea26d7db0d4aabfc73b1f096d5551d9" translate="yes" xml:space="preserve">
          <source>Note also that while the MAC can guarantee the authenticity of the data (that it was generated by your site, and not someone else), and the integrity of the data (that it is all there and correct), it cannot guarantee freshness i.e. that you are being sent back the last thing you sent to the client. This means that for some uses of session data, the cookie backend might open you up to &lt;a href=&quot;https://en.wikipedia.org/wiki/Replay_attack&quot;&gt;replay attacks&lt;/a&gt;. Unlike other session backends which keep a server-side record of each session and invalidate it when a user logs out, cookie-based sessions are not invalidated when a user logs out. Thus if an attacker steals a user&amp;rsquo;s cookie, they can use that cookie to login as that user even if the user logs out. Cookies will only be detected as &amp;lsquo;stale&amp;rsquo; if they are older than your &lt;a href=&quot;../../ref/settings#std:setting-SESSION_COOKIE_AGE&quot;&gt;&lt;code&gt;SESSION_COOKIE_AGE&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">MAC은 데이터의 신뢰성 (다른 사람이 아닌 귀하의 사이트에서 생성 한 것)과 데이터의 무결성 (모두 존재하고 정확함)을 보장 할 수 있지만 신선도를 보장 할 수는 없습니다. 당신은 당신이 클라이언트에게 마지막으로 보낸 것을 돌려받습니다. 즉, 세션 데이터를 일부 사용하는 경우 쿠키 백엔드가 &lt;a href=&quot;https://en.wikipedia.org/wiki/Replay_attack&quot;&gt;공격&lt;/a&gt; 을 재개 할 수 있습니다 . 각 세션의 서버 측 레코드를 유지하고 사용자가 로그 아웃 할 때이를 무효화하는 다른 세션 백엔드와 달리 쿠키 기반 세션은 사용자가 로그 아웃 할 때 무효화되지 않습니다. 따라서 공격자가 사용자 쿠키를 훔치는 경우 사용자가 로그 아웃하더라도 해당 쿠키를 사용하여 해당 사용자로 로그인 할 수 있습니다. 쿠키가 &lt;a href=&quot;../../ref/settings#std:setting-SESSION_COOKIE_AGE&quot;&gt; &lt;code&gt;SESSION_COOKIE_AGE&lt;/code&gt; &lt;/a&gt; 보다 오래된 경우에만 쿠키가 '이야기'로 감지됩니다 .</target>
        </trans-unit>
        <trans-unit id="a33d9580056f5d9f9ef0f3f8d807edc652ece048" translate="yes" xml:space="preserve">
          <source>Note also that you can only inherit from one generic view - that is, only one parent class may inherit from &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt; and the rest (if any) should be mixins. Trying to inherit from more than one class that inherits from &lt;code&gt;View&lt;/code&gt; - for example, trying to use a form at the top of a list and combining &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.ProcessFormView&quot;&gt;&lt;code&gt;ProcessFormView&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.list.ListView&quot;&gt;&lt;code&gt;ListView&lt;/code&gt;&lt;/a&gt; - won&amp;rsquo;t work as expected.</source>
          <target state="translated">또한 하나의 일반 뷰에서만 상속 할 수 있습니다. 즉, 하나의 상위 클래스 만 &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View&quot;&gt; &lt;code&gt;View&lt;/code&gt; &lt;/a&gt; 에서 상속 할 수 있으며 나머지 클래스 (있는 경우)는 믹스 인이어야합니다. 예를 들어 목록의 맨 위에 양식을 사용하고 &lt;a href=&quot;../../ref/class-based-views/mixins-editing#django.views.generic.edit.ProcessFormView&quot;&gt; &lt;code&gt;ProcessFormView&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.list.ListView&quot;&gt; &lt;code&gt;ListView&lt;/code&gt; 를&lt;/a&gt; 결합하는 등 &lt;code&gt;View&lt;/code&gt; 에서 상속되는 둘 이상의 클래스에서 상속 하려고하면 예상대로 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9582cd85442dd5db57f039a1ee4d57e14418eb91" translate="yes" xml:space="preserve">
          <source>Note also, that if you delete an object that has a &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericRelation&quot;&gt;&lt;code&gt;GenericRelation&lt;/code&gt;&lt;/a&gt;, any objects which have a &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt;&lt;code&gt;GenericForeignKey&lt;/code&gt;&lt;/a&gt; pointing at it will be deleted as well. In the example above, this means that if a &lt;code&gt;Bookmark&lt;/code&gt; object were deleted, any &lt;code&gt;TaggedItem&lt;/code&gt; objects pointing at it would be deleted at the same time.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.contenttypes.fields.GenericRelation&quot;&gt; &lt;code&gt;GenericRelation&lt;/code&gt; &lt;/a&gt; 이있는 객체를 삭제하면 &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt; &lt;code&gt;GenericForeignKey&lt;/code&gt; &lt;/a&gt; 가있는 객체 도 삭제됩니다. 위의 예에서 이는 &lt;code&gt;Bookmark&lt;/code&gt; 객체가 삭제 된 경우 이를 가리키는 &lt;code&gt;TaggedItem&lt;/code&gt; 객체가 동시에 삭제됨을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="afb22d70274d73a3af0a11a9efbc7601c6cffe84" translate="yes" xml:space="preserve">
          <source>Note however that not all these methods are required and may be deliberately omitted. As it happens, it is possible to leave each method unimplemented and still have a working Storage.</source>
          <target state="translated">그러나 이러한 방법이 모두 필요한 것은 아니며 일부러 생략 할 수도 있습니다. 이와 같이 각 방법을 구현하지 않은 채로 두어도 여전히 작동하는 스토리지를 보유 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a281167ca6f3f3d6ce6cf851b7d39c49313bd017" translate="yes" xml:space="preserve">
          <source>Note on performance</source>
          <target state="translated">성능에 대한 참고 사항</target>
        </trans-unit>
        <trans-unit id="8edc7ffdd6f4a3b096034148187e765e050e9ef8" translate="yes" xml:space="preserve">
          <source>Note that &amp;ldquo;bar&amp;rdquo; in a template expression like &lt;code&gt;{{ foo.bar }}&lt;/code&gt; will be interpreted as a literal string and not using the value of the variable &amp;ldquo;bar&amp;rdquo;, if one exists in the template context.</source>
          <target state="translated">&lt;code&gt;{{ foo.bar }}&lt;/code&gt; 와 같은 템플리트 표현식에서 &quot;bar&quot; 는 리터럴 문자열로 해석되며 템플리트 컨텍스트에 변수 &quot;bar&quot;의 값이 있으면이를 사용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="afe31081e1c0a0c22ce8c03c79b6e9fe781b5cdf" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;#django.contrib.auth.decorators.permission_required&quot;&gt;&lt;code&gt;permission_required()&lt;/code&gt;&lt;/a&gt; also takes an optional &lt;code&gt;login_url&lt;/code&gt; parameter:</source>
          <target state="translated">참고 &lt;a href=&quot;#django.contrib.auth.decorators.permission_required&quot;&gt; &lt;code&gt;permission_required()&lt;/code&gt; &lt;/a&gt; 선택 사양합니다 &lt;code&gt;login_url&lt;/code&gt; 매개 변수를 :</target>
        </trans-unit>
        <trans-unit id="5935aa7699bc39ae3d2e0a6a74be308015833cce" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;#django.contrib.auth.logout&quot;&gt;&lt;code&gt;logout()&lt;/code&gt;&lt;/a&gt; doesn&amp;rsquo;t throw any errors if the user wasn&amp;rsquo;t logged in.</source>
          <target state="translated">참고 &lt;a href=&quot;#django.contrib.auth.logout&quot;&gt; &lt;code&gt;logout()&lt;/code&gt; &lt;/a&gt; 사용자가 로그인하지 않은 경우 오류가 발생하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d5a560efe9ed69acab07d99a89a77ed4ccc33f23" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;#std:setting-EMAIL_USE_TLS&quot;&gt;&lt;code&gt;EMAIL_USE_TLS&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;#std:setting-EMAIL_USE_SSL&quot;&gt;&lt;code&gt;EMAIL_USE_SSL&lt;/code&gt;&lt;/a&gt; are mutually exclusive, so only set one of those settings to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">참고 &lt;a href=&quot;#std:setting-EMAIL_USE_TLS&quot;&gt; &lt;code&gt;EMAIL_USE_TLS&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;#std:setting-EMAIL_USE_SSL&quot;&gt; &lt;code&gt;EMAIL_USE_SSL&lt;/code&gt; 이&lt;/a&gt; 너무 만에 그 설정 중 하나를 설정, 상호 배타적 &lt;code&gt;True&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d3a5ff144d4383f6e080bcaf3e8709508673fa55" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.delete&quot;&gt;&lt;code&gt;delete()&lt;/code&gt;&lt;/a&gt; is the only &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; method that is not exposed on a &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt;&lt;code&gt;Manager&lt;/code&gt;&lt;/a&gt; itself. This is a safety mechanism to prevent you from accidentally requesting &lt;code&gt;Entry.objects.delete()&lt;/code&gt;, and deleting &lt;em&gt;all&lt;/em&gt; the entries. If you &lt;em&gt;do&lt;/em&gt; want to delete all the objects, then you have to explicitly request a complete query set:</source>
          <target state="translated">참고 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.delete&quot;&gt; &lt;code&gt;delete()&lt;/code&gt; &lt;/a&gt; 만입니다 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; (A)에 노출되지 않는 방법 &lt;a href=&quot;managers#django.db.models.Manager&quot;&gt; &lt;code&gt;Manager&lt;/code&gt; &lt;/a&gt; 자체가. 이것은 실수로 &lt;code&gt;Entry.objects.delete()&lt;/code&gt; 요청 하고 &lt;em&gt;모든&lt;/em&gt; 항목을 삭제 하지 못하게하는 안전 메커니즘 입니다. 당신이 경우 &lt;em&gt;않는&lt;/em&gt; 모든 개체를 삭제하려면, 당신은 명시 적으로 완전한 쿼리 세트를 요청해야 :</target>
        </trans-unit>
        <trans-unit id="efbe9c61755a3354107632b1df1edcfca88d5654" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.FILES&quot;&gt;&lt;code&gt;request.FILES&lt;/code&gt;&lt;/a&gt; will only contain data if the request method was &lt;code&gt;POST&lt;/code&gt; and the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; that posted the request has the attribute &lt;code&gt;enctype=&quot;multipart/form-data&quot;&lt;/code&gt;. Otherwise, &lt;code&gt;request.FILES&lt;/code&gt; will be empty.</source>
          <target state="translated">참고 &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.FILES&quot;&gt; &lt;code&gt;request.FILES&lt;/code&gt; 가&lt;/a&gt; 요청 방법 인 경우에만 데이터를 포함 &lt;code&gt;POST&lt;/code&gt; 및 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 상기 요청을 게시 속성 보유 &lt;code&gt;enctype=&quot;multipart/form-data&quot;&lt;/code&gt; . 그렇지 않으면 &lt;code&gt;request.FILES&lt;/code&gt; 가 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="114ec4ae4f7b3f1c9ee023cbb2f4ae83341a7264" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;../exceptions#django.core.exceptions.ObjectDoesNotExist&quot;&gt;&lt;code&gt;django.core.exceptions.ObjectDoesNotExist&lt;/code&gt;&lt;/a&gt;, which is the base class for all Django database API &lt;code&gt;DoesNotExist&lt;/code&gt; exceptions, has &lt;code&gt;silent_variable_failure = True&lt;/code&gt;. So if you&amp;rsquo;re using Django templates with Django model objects, any &lt;code&gt;DoesNotExist&lt;/code&gt; exception will fail silently.</source>
          <target state="translated">참고 &lt;a href=&quot;../exceptions#django.core.exceptions.ObjectDoesNotExist&quot;&gt; &lt;code&gt;django.core.exceptions.ObjectDoesNotExist&lt;/code&gt; &lt;/a&gt; 모든 장고 데이터베이스 API의 기본 클래스입니다, &lt;code&gt;DoesNotExist&lt;/code&gt; 의 예외가있다 &lt;code&gt;silent_variable_failure = True&lt;/code&gt; . 따라서 Django 모델 객체와 함께 Django 템플릿을 사용하는 경우 &lt;code&gt;DoesNotExist&lt;/code&gt; 예외가 자동으로 실패합니다.</target>
        </trans-unit>
        <trans-unit id="12f148b2871d0ee0ac320bfab0d6043b1e56d19b" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;django-admin#django-admin-runserver&quot;&gt;&lt;code&gt;runserver&lt;/code&gt;&lt;/a&gt; strips all headers with underscores in the name, so you won&amp;rsquo;t see them in &lt;code&gt;META&lt;/code&gt;. This prevents header-spoofing based on ambiguity between underscores and dashes both being normalizing to underscores in WSGI environment variables. It matches the behavior of Web servers like Nginx and Apache 2.4+.</source>
          <target state="translated">그주의 &lt;a href=&quot;django-admin#django-admin-runserver&quot;&gt; &lt;code&gt;runserver&lt;/code&gt; &lt;/a&gt; 당신이 그들을 볼 수 없습니다, 그래서 이름에 밑줄을 가지는 모든 헤더를 제거합니다 &lt;code&gt;META&lt;/code&gt; . 이는 밑줄과 대시 사이의 모호성을 기반으로하는 헤더 스푸핑이 WSGI 환경 변수에서 밑줄로 정규화되는 것을 방지합니다. Nginx 및 Apache 2.4 이상과 같은 웹 서버의 동작과 일치합니다.</target>
        </trans-unit>
        <trans-unit id="51299edb450e554bd78f74b0809db32387011d1a" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;fields#django.forms.MultiValueField&quot;&gt;&lt;code&gt;MultiValueField&lt;/code&gt;&lt;/a&gt; has a complementary method &lt;a href=&quot;fields#django.forms.MultiValueField.compress&quot;&gt;&lt;code&gt;compress()&lt;/code&gt;&lt;/a&gt; with the opposite responsibility - to combine cleaned values of all member fields into one.</source>
          <target state="translated">참고 &lt;a href=&quot;fields#django.forms.MultiValueField&quot;&gt; &lt;code&gt;MultiValueField&lt;/code&gt; 는&lt;/a&gt; 상보 방식 갖는 &lt;a href=&quot;fields#django.forms.MultiValueField.compress&quot;&gt; &lt;code&gt;compress()&lt;/code&gt; &lt;/a&gt; 반대의 책임 - 하나로 모든 멤버 필드의 정리 값을 결합한다.</target>
        </trans-unit>
        <trans-unit id="174125b977abe383ebe027c7283e688f70171a40" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;Form.add_error()&lt;/code&gt; automatically removes the relevant field from &lt;code&gt;cleaned_data&lt;/code&gt;.</source>
          <target state="translated">참고 &lt;code&gt;Form.add_error()&lt;/code&gt; 자동에서 관련 필드를 제거 &lt;code&gt;cleaned_data&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4591c68c233751182879e8ea4c7ab5f0a044d31a" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;add()&lt;/code&gt;, &lt;code&gt;create()&lt;/code&gt;, &lt;code&gt;remove()&lt;/code&gt;, &lt;code&gt;clear()&lt;/code&gt;, and &lt;code&gt;set()&lt;/code&gt; all apply database changes immediately for all types of related fields. In other words, there is no need to call &lt;code&gt;save()&lt;/code&gt; on either end of the relationship.</source>
          <target state="translated">참고 &lt;code&gt;add()&lt;/code&gt; , &lt;code&gt;create()&lt;/code&gt; , &lt;code&gt;remove()&lt;/code&gt; , &lt;code&gt;clear()&lt;/code&gt; 와 &lt;code&gt;set()&lt;/code&gt; 모든 데이터베이스 관련 분야의 모든 종류의 즉시 변경 적용됩니다. 즉, 관계의 양쪽 끝에서 &lt;code&gt;save()&lt;/code&gt; 를 호출 할 필요가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="90ef74f6371e10a6782d0c647e7ce73f1b8c10a7" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;django.conf.settings&lt;/code&gt; isn&amp;rsquo;t a module &amp;ndash; it&amp;rsquo;s an object. So importing individual settings is not possible:</source>
          <target state="translated">참고 &lt;code&gt;django.conf.settings&lt;/code&gt; 하는 모듈 아니다 - 그것은 객체입니다. 따라서 개별 설정을 가져올 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="4d70a240827ed6a63d96ee2feb5521ee6e8c53d8" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;dumpdata&lt;/code&gt; uses the default manager on the model for selecting the records to dump. If you&amp;rsquo;re using a &lt;a href=&quot;../topics/db/managers#custom-managers&quot;&gt;custom manager&lt;/a&gt; as the default manager and it filters some of the available records, not all of the objects will be dumped.</source>
          <target state="translated">참고 &lt;code&gt;dumpdata&lt;/code&gt; 가 덤프 레코드를 선택하는 모델에 기본 관리자를 사용합니다. &lt;a href=&quot;../topics/db/managers#custom-managers&quot;&gt;사용자 정의 관리자&lt;/a&gt; 를 기본 관리자 로 사용하고 사용 가능한 일부 레코드를 필터링하면 모든 오브젝트가 덤프되지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="617474170b52d9ea43a8f37beddaa5594df33958" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;earliest()&lt;/code&gt; and &lt;code&gt;latest()&lt;/code&gt; exist purely for convenience and readability.</source>
          <target state="translated">참고 &lt;code&gt;earliest()&lt;/code&gt; 와 &lt;code&gt;latest()&lt;/code&gt; 편의성과 가독성을 위해 순수하게 존재한다.</target>
        </trans-unit>
        <trans-unit id="60bc6baf0f131a6ccb397c320fca68e1cf2cb32d" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;first()&lt;/code&gt; is a convenience method, the following code sample is equivalent to the above example:</source>
          <target state="translated">참고 &lt;code&gt;first()&lt;/code&gt; 편리한 방법으로서, 다음의 코드 샘플은 상기 실시 예에 해당이다 :</target>
        </trans-unit>
        <trans-unit id="2477105d4945a87d3531b00f61d9dfbbde81b7a1" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;full_clean()&lt;/code&gt; will &lt;em&gt;not&lt;/em&gt; be called automatically when you call your model&amp;rsquo;s &lt;a href=&quot;#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; method. You&amp;rsquo;ll need to call it manually when you want to run one-step model validation for your own manually created models. For example:</source>
          <target state="translated">참고 &lt;code&gt;full_clean()&lt;/code&gt; 것입니다 &lt;em&gt;하지&lt;/em&gt; 당신이 모델의 호출 할 때 자동으로 호출 &lt;a href=&quot;#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt; 메소드를. 직접 만든 모델에 대해 1 단계 모델 유효성 검사를 실행하려면 수동으로 호출해야합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b60eaaa655b6061f0ff964b2c7c786fae5248e6d" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;localize&lt;/code&gt; is a pytz extension to the &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; API. Also, you may want to catch &lt;code&gt;pytz.InvalidTimeError&lt;/code&gt;. The documentation of pytz contains &lt;a href=&quot;http://pytz.sourceforge.net/#example-usage&quot;&gt;more examples&lt;/a&gt;. You should review it before attempting to manipulate aware datetimes.</source>
          <target state="translated">하는 것으로 &lt;code&gt;localize&lt;/code&gt; 에 pytz 확장이다 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.tzinfo&quot;&gt; &lt;code&gt;tzinfo&lt;/code&gt; 의&lt;/a&gt; API. 또한 &lt;code&gt;pytz.InvalidTimeError&lt;/code&gt; 를 잡을 수도 있습니다. pytz 문서에는 &lt;a href=&quot;http://pytz.sourceforge.net/#example-usage&quot;&gt;더 많은 예제&lt;/a&gt; 가 포함되어 있습니다 . 인식 된 날짜 시간을 조작하기 전에 검토해야합니다.</target>
        </trans-unit>
        <trans-unit id="fcff2e0ec8bf12bd9fd1d74a3726364370255148" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;output_field&lt;/code&gt; is only required when Django is unable to determine what field type the result should be. Complex expressions that mix field types should define the desired &lt;code&gt;output_field&lt;/code&gt;. For example, adding an &lt;code&gt;IntegerField()&lt;/code&gt; and a &lt;code&gt;FloatField()&lt;/code&gt; together should probably have &lt;code&gt;output_field=FloatField()&lt;/code&gt; defined.</source>
          <target state="translated">참고 &lt;code&gt;output_field&lt;/code&gt; 이 장고 결과가 있어야합니다 어떤 필드 유형을 확인 할 수없는 경우에만 필요합니다. 필드 유형을 혼합하는 복잡한 표현식은 원하는 &lt;code&gt;output_field&lt;/code&gt; 를 정의해야합니다 . 예를 들어 &lt;code&gt;IntegerField()&lt;/code&gt; 와 &lt;code&gt;FloatField()&lt;/code&gt; 함께 추가하면 &lt;code&gt;output_field=FloatField()&lt;/code&gt; 정의 되어 있어야합니다 .</target>
        </trans-unit>
        <trans-unit id="3e0000d6c434afcf6f1baf1d4b21199b5b33c66a" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;page&lt;/code&gt;&lt;em&gt;must&lt;/em&gt; be either a valid page number or the value &lt;code&gt;last&lt;/code&gt;; any other value for &lt;code&gt;page&lt;/code&gt; will result in a 404 error.</source>
          <target state="translated">참고 &lt;code&gt;page&lt;/code&gt; &lt;em&gt;있어야&lt;/em&gt; 유효한 페이지 번호 또는 값이 될 &lt;code&gt;last&lt;/code&gt; ; &lt;code&gt;page&lt;/code&gt; 의 다른 값 은 404 오류를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="4fa87508d78ed938ea3b53c04e6e8bac6e4c0d53" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;pnt&lt;/code&gt; may also be constructed with EWKT, an &amp;ldquo;extended&amp;rdquo; form of WKT that includes the SRID:</source>
          <target state="translated">참고 &lt;code&gt;pnt&lt;/code&gt; 또한 EWKT 상기 SRID 포함 WKT의 &quot;확장&quot;형태로 구성 될 수있다 :</target>
        </trans-unit>
        <trans-unit id="69afc1bd88ec7db55e0a8541d45277ff4bd45240" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;render()&lt;/code&gt; returns the empty string. &lt;code&gt;render()&lt;/code&gt; should always return string output. If all the template tag does is set a variable, &lt;code&gt;render()&lt;/code&gt; should return the empty string.</source>
          <target state="translated">참고 &lt;code&gt;render()&lt;/code&gt; 빈 문자열을 반환합니다. &lt;code&gt;render()&lt;/code&gt; 는 항상 문자열 출력을 반환해야합니다. 모든 템플릿 태그가 변수를 설정하면 &lt;code&gt;render()&lt;/code&gt; 는 빈 문자열을 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="eeadeb6021da41a361ee20d5764d2103bff4b20d" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;sqlmigrate&lt;/code&gt; doesn&amp;rsquo;t colorize its output.</source>
          <target state="translated">참고 &lt;code&gt;sqlmigrate&lt;/code&gt; 출력을 색상 화하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f4ef6ae7ec0603ef3df71659f00737594af30ccc" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;striptags&lt;/code&gt; doesn&amp;rsquo;t give any guarantee about its output being HTML safe, particularly with non valid HTML input. So &lt;strong&gt;NEVER&lt;/strong&gt; apply the &lt;code&gt;safe&lt;/code&gt; filter to a &lt;code&gt;striptags&lt;/code&gt; output. If you are looking for something more robust, you can use the &lt;code&gt;bleach&lt;/code&gt; Python library, notably its &lt;a href=&quot;https://bleach.readthedocs.io/en/latest/clean.html&quot;&gt;clean&lt;/a&gt; method.</source>
          <target state="translated">참고 &lt;code&gt;striptags&lt;/code&gt; 은 특히 비 유효한 HTML 입력을, 그 출력 존재의 HTML의 안전에 대한 보증을 제공하지 않습니다. 따라서 &lt;code&gt;safe&lt;/code&gt; 필터를 &lt;code&gt;striptags&lt;/code&gt; 출력에 적용하지 &lt;strong&gt;마십시오&lt;/strong&gt; . 더 강력한 것을 찾고 있다면 &lt;code&gt;bleach&lt;/code&gt; 파이썬 라이브러리, 특히 &lt;a href=&quot;https://bleach.readthedocs.io/en/latest/clean.html&quot;&gt;깨끗한&lt;/a&gt; 방법을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e6c1a0bf2d18380514c058c2103f2660189ecd36" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;{% regroup %}&lt;/code&gt; does not order its input! Our example relies on the fact that the &lt;code&gt;cities&lt;/code&gt; list was ordered by &lt;code&gt;country&lt;/code&gt; in the first place. If the &lt;code&gt;cities&lt;/code&gt; list did &lt;em&gt;not&lt;/em&gt; order its members by &lt;code&gt;country&lt;/code&gt;, the regrouping would naively display more than one group for a single country. For example, say the &lt;code&gt;cities&lt;/code&gt; list was set to this (note that the countries are not grouped together):</source>
          <target state="translated">참고 &lt;code&gt;{% regroup %}&lt;/code&gt; 입력을 주문하지 않습니다! 이 예는 &lt;code&gt;cities&lt;/code&gt; 목록이 &lt;code&gt;country&lt;/code&gt; 주문 된 사실에 의존합니다 . 는 IF &lt;code&gt;cities&lt;/code&gt; 목록 않았다 &lt;em&gt;하지&lt;/em&gt; 에 의해 회원을 주문 &lt;code&gt;country&lt;/code&gt; 의 재편성 순진하게도 단일 국가에 대해 둘 이상의 그룹을 표시합니다. 예를 들어 &lt;code&gt;cities&lt;/code&gt; 목록이 다음과 같이 설정되어 있다고 가정합니다 (국가는 함께 그룹화되지 않음).</target>
        </trans-unit>
        <trans-unit id="555959baa50f98a7ff375b125440d82908185be5" translate="yes" xml:space="preserve">
          <source>Note that Django also provides &lt;a href=&quot;../ref/request-response#django.http.HttpRequest.GET&quot;&gt;&lt;code&gt;request.GET&lt;/code&gt;&lt;/a&gt; for accessing GET data in the same way &amp;ndash; but we&amp;rsquo;re explicitly using &lt;a href=&quot;../ref/request-response#django.http.HttpRequest.POST&quot;&gt;&lt;code&gt;request.POST&lt;/code&gt;&lt;/a&gt; in our code, to ensure that data is only altered via a POST call.</source>
          <target state="translated">Django는 동일한 방식으로 GET 데이터에 액세스하기 위해 &lt;a href=&quot;../ref/request-response#django.http.HttpRequest.GET&quot;&gt; &lt;code&gt;request.GET&lt;/code&gt; &lt;/a&gt; 도 제공합니다. 그러나 코드에서 &lt;a href=&quot;../ref/request-response#django.http.HttpRequest.POST&quot;&gt; &lt;code&gt;request.POST&lt;/code&gt; &lt;/a&gt; 를 명시 적으로 사용하여 POST 호출을 통해서만 데이터가 변경되도록합니다.</target>
        </trans-unit>
        <trans-unit id="5a86bd35e7d0371b683012acf70b7110506f8792" translate="yes" xml:space="preserve">
          <source>Note that a callable (with the parentheses omitted) is passed to &lt;code&gt;default&lt;/code&gt;, not an instance of &lt;code&gt;UUID&lt;/code&gt;.</source>
          <target state="translated">괄호가 생략 된 callable 은 &lt;code&gt;UUID&lt;/code&gt; 인스턴스가 아닌 &lt;code&gt;default&lt;/code&gt; 로 전달 됩니다 .</target>
        </trans-unit>
        <trans-unit id="769f71352d570fcd1ad93b9334853d28dc71b571" translate="yes" xml:space="preserve">
          <source>Note that a settings file should &lt;em&gt;not&lt;/em&gt; import from &lt;code&gt;global_settings&lt;/code&gt;, because that&amp;rsquo;s redundant.</source>
          <target state="translated">설정 파일은 &lt;code&gt;global_settings&lt;/code&gt; 에서 가져 와서 는 &lt;em&gt;안됩니다&lt;/em&gt; . 중복 된 것이기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="91d33e115058c62ed3b06406e2b16a18f7403773" translate="yes" xml:space="preserve">
          <source>Note that all subsequent PDF-generation methods are called on the PDF object (in this case, &lt;code&gt;p&lt;/code&gt;) &amp;ndash; not on &lt;code&gt;buffer&lt;/code&gt;.</source>
          <target state="translated">이후의 모든 PDF 생성 메소드는 &lt;code&gt;buffer&lt;/code&gt; 가 아니라 PDF 객체 (이 경우 &lt;code&gt;p&lt;/code&gt; ) 에서 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="e2720462e729bf12c9dc1637761930abaf6e5302" translate="yes" xml:space="preserve">
          <source>Note that although this function uses &lt;code&gt;str.format()&lt;/code&gt; to do the interpolation, some of the formatting options provided by &lt;code&gt;str.format()&lt;/code&gt; (e.g. number formatting) will not work, since all arguments are passed through &lt;a href=&quot;#django.utils.html.conditional_escape&quot;&gt;&lt;code&gt;conditional_escape()&lt;/code&gt;&lt;/a&gt; which (ultimately) calls &lt;a href=&quot;#django.utils.encoding.force_str&quot;&gt;&lt;code&gt;force_str()&lt;/code&gt;&lt;/a&gt; on the values.</source>
          <target state="translated">참고이 기능의 사용에 있지만 &lt;code&gt;str.format()&lt;/code&gt; 보간을 수행하려면에서 제공하는 서식 옵션 중 일부 &lt;code&gt;str.format()&lt;/code&gt; (예 : 숫자 서식)하지 않습니다 작업, 모든 인수를 통해 전달되기 때문에 &lt;a href=&quot;#django.utils.html.conditional_escape&quot;&gt; &lt;code&gt;conditional_escape()&lt;/code&gt; &lt;/a&gt; 하는 (궁극적으로) 값에 대해 &lt;a href=&quot;#django.utils.encoding.force_str&quot;&gt; &lt;code&gt;force_str()&lt;/code&gt; &lt;/a&gt; 을 호출 합니다.</target>
        </trans-unit>
        <trans-unit id="1655d49d10104c3e29e68482b9119e277e90f07d" translate="yes" xml:space="preserve">
          <source>Note that an even more flexible (but more heavyweight) way of doing this would be to use Django&amp;rsquo;s template system. Assuming Lawrence.com and LJWorld.com have different template directories (&lt;a href=&quot;../settings#std:setting-TEMPLATES-DIRS&quot;&gt;&lt;code&gt;DIRS&lt;/code&gt;&lt;/a&gt;), you could farm out to the template system like so:</source>
          <target state="translated">이 작업을 수행하는 훨씬 더 유연하지만 더 무거운 방법은 Django의 템플릿 시스템을 사용하는 것입니다. Lawrence.com과 LJWorld.com에 서로 다른 템플릿 디렉토리 ( &lt;a href=&quot;../settings#std:setting-TEMPLATES-DIRS&quot;&gt; &lt;code&gt;DIRS&lt;/code&gt; &lt;/a&gt; ) 가 있다고 가정하면 다음과 같이 템플릿 시스템으로 팜 아웃 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a03be98ba22733726f31548200c2a1eb13fd38d0" translate="yes" xml:space="preserve">
          <source>Note that any data set during the anonymous session is retained in the session after a user logs in.</source>
          <target state="translated">익명 세션 동안 설정된 모든 데이터는 사용자가 로그인 한 후에 세션에 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="5e76af3cfee25aa8aedca5c9cce37758a092a5a5" translate="yes" xml:space="preserve">
          <source>Note that any errors raised by your &lt;a href=&quot;api#django.forms.Form.clean&quot;&gt;&lt;code&gt;Form.clean()&lt;/code&gt;&lt;/a&gt; override will not be associated with any field in particular. They go into a special &amp;ldquo;field&amp;rdquo; (called &lt;code&gt;__all__&lt;/code&gt;), which you can access via the &lt;a href=&quot;api#django.forms.Form.non_field_errors&quot;&gt;&lt;code&gt;non_field_errors()&lt;/code&gt;&lt;/a&gt; method if you need to. If you want to attach errors to a specific field in the form, you need to call &lt;a href=&quot;api#django.forms.Form.add_error&quot;&gt;&lt;code&gt;add_error()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;api#django.forms.Form.clean&quot;&gt; &lt;code&gt;Form.clean()&lt;/code&gt; &lt;/a&gt; 재정의로 발생한 오류 는 특정 필드와 관련이 없습니다. 특수한 &quot;필드&quot;( &lt;code&gt;__all__&lt;/code&gt; ) 로 이동하여 필요한 경우 &lt;a href=&quot;api#django.forms.Form.non_field_errors&quot;&gt; &lt;code&gt;non_field_errors()&lt;/code&gt; &lt;/a&gt; 메소드 를 통해 액세스 할 수 있습니다 . 양식의 특정 필드에 오류를 첨부하려면 &lt;a href=&quot;api#django.forms.Form.add_error&quot;&gt; &lt;code&gt;add_error()&lt;/code&gt; &lt;/a&gt; 를 호출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="bb7f74b1561095f41f3d18b56dd6375c9ec3906f" translate="yes" xml:space="preserve">
          <source>Note that any of Django&amp;rsquo;s default admin templates can be overridden. To override a template, do the same thing you did with &lt;code&gt;base_site.html&lt;/code&gt; &amp;ndash; copy it from the default directory into your custom directory, and make changes.</source>
          <target state="translated">Django의 기본 관리자 템플릿은 무시할 수 있습니다. 템플릿을 재정의하려면 &lt;code&gt;base_site.html&lt;/code&gt; 에서와 동일한 작업을 수행하십시오 . 기본 디렉토리에서 사용자 정의 디렉토리로 복사하고 변경하십시오.</target>
        </trans-unit>
        <trans-unit id="239df39fbba56c17e5c95caf2ecf410c00f83202" translate="yes" xml:space="preserve">
          <source>Note that any text-based field &amp;ndash; such as &lt;code&gt;CharField&lt;/code&gt; or &lt;code&gt;EmailField&lt;/code&gt; &amp;ndash; always cleans the input into a string. We&amp;rsquo;ll cover the encoding implications later in this document.</source>
          <target state="translated">&lt;code&gt;CharField&lt;/code&gt; 또는 &lt;code&gt;EmailField&lt;/code&gt; 와 같은 텍스트 기반 필드는 항상 입력을 문자열로 정리합니다. 이 문서의 뒷부분에서 인코딩의 의미를 다룰 것입니다.</target>
        </trans-unit>
        <trans-unit id="7bedfd96029424831aed4722f0eb96eed865f31a" translate="yes" xml:space="preserve">
          <source>Note that as the method is now a property, in Python code it will need to be accessed appropriately:</source>
          <target state="translated">메소드는 이제 속성이므로 Python 코드에서는 적절하게 액세스해야합니다.</target>
        </trans-unit>
        <trans-unit id="fe32d6c5f76eb9f75c146ee626da625540f82c24" translate="yes" xml:space="preserve">
          <source>Note that calling &lt;code&gt;django.setup()&lt;/code&gt; is only necessary if your code is truly standalone. When invoked by your Web server, or through &lt;a href=&quot;../ref/django-admin&quot;&gt;django-admin&lt;/a&gt;, Django will handle this for you.</source>
          <target state="translated">&lt;code&gt;django.setup()&lt;/code&gt; 호출 은 코드가 실제로 독립형 인 경우에만 필요합니다. 웹 서버 또는 &lt;a href=&quot;../ref/django-admin&quot;&gt;django-admin을&lt;/a&gt; 통해 Django가이를 처리합니다.</target>
        </trans-unit>
        <trans-unit id="3bc381cc771bad16450ca029b7c0214227351136" translate="yes" xml:space="preserve">
          <source>Note that choices can be any sequence object &amp;ndash; not necessarily a list or tuple. This lets you construct choices dynamically. But if you find yourself hacking &lt;a href=&quot;#django.db.models.Field.choices&quot;&gt;&lt;code&gt;choices&lt;/code&gt;&lt;/a&gt; to be dynamic, you&amp;rsquo;re probably better off using a proper database table with a &lt;a href=&quot;#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;#django.db.models.Field.choices&quot;&gt;&lt;code&gt;choices&lt;/code&gt;&lt;/a&gt; is meant for static data that doesn&amp;rsquo;t change much, if ever.</source>
          <target state="translated">선택은 목록이나 튜플 일 필요는없는 임의의 시퀀스 객체 일 수 있습니다. 이를 통해 선택 사항을 동적으로 구성 할 수 있습니다. 그러나 해킹 &lt;a href=&quot;#django.db.models.Field.choices&quot;&gt; &lt;code&gt;choices&lt;/code&gt; &lt;/a&gt; 이 동적이라는 것을 알게되면 &lt;a href=&quot;#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; 와 함께 적절한 데이터베이스 테이블을 사용하는 것이 좋습니다 . &lt;a href=&quot;#django.db.models.Field.choices&quot;&gt; &lt;code&gt;choices&lt;/code&gt; &lt;/a&gt; 은 정적 데이터가 큰 변화가없는 경우에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="23311557d1c1b4a3bc91b67a7dcbb2a15f706caf" translate="yes" xml:space="preserve">
          <source>Note that command options that take no arguments are passed as keywords with &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;, as you can see with the &lt;code&gt;interactive&lt;/code&gt; option above.</source>
          <target state="translated">위 의 &lt;code&gt;interactive&lt;/code&gt; 옵션에서 볼 수 있듯이 인수를 사용하지 않는 명령 옵션은 &lt;code&gt;True&lt;/code&gt; 또는 &lt;code&gt;False&lt;/code&gt; 를 사용하여 키워드로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="771c36984deec4007d5e353a2afde4a1288b3d14" translate="yes" xml:space="preserve">
          <source>Note that each form field has an ID attribute set to &lt;code&gt;id_&amp;lt;field-name&amp;gt;&lt;/code&gt;, which is referenced by the accompanying label tag. This is important in ensuring that forms are accessible to assistive technology such as screen reader software. You can also &lt;a href=&quot;../../ref/forms/api#ref-forms-api-configuring-label&quot;&gt;customize the way in which labels and ids are generated&lt;/a&gt;.</source>
          <target state="translated">각 양식 필드에는 ID 속성이 &lt;code&gt;id_&amp;lt;field-name&amp;gt;&lt;/code&gt; 으로 설정되어 있으며 이는 레이블 레이블로 참조됩니다. 화면 판독기 소프트웨어와 같은 보조 기술에서 양식에 액세스 할 수 있도록하는 것이 중요합니다. &lt;a href=&quot;../../ref/forms/api#ref-forms-api-configuring-label&quot;&gt;레이블과 ID가 생성되는 방식을 사용자 정의&lt;/a&gt; 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1f0445bbbacae2bc87d1553017a414c56d8a13c4" translate="yes" xml:space="preserve">
          <source>Note that each process will have its own private cache instance, which means no cross-process caching is possible. This obviously also means the local memory cache isn&amp;rsquo;t particularly memory-efficient, so it&amp;rsquo;s probably not a good choice for production environments. It&amp;rsquo;s nice for development.</source>
          <target state="translated">각 프로세스에는 자체 프라이빗 캐시 인스턴스가 있으므로 프로세스 간 캐싱이 불가능합니다. 이것은 또한 로컬 메모리 캐시가 특히 메모리 효율적이지 않다는 것을 의미하므로 프로덕션 환경에는 적합하지 않을 수 있습니다. 개발하기에 좋습니다.</target>
        </trans-unit>
        <trans-unit id="a2eeff486edfad4d9520b6f22313f2e3567d2e11" translate="yes" xml:space="preserve">
          <source>Note that extra options will &lt;em&gt;always&lt;/em&gt; be passed to &lt;em&gt;every&lt;/em&gt; line in the included URLconf, regardless of whether the line&amp;rsquo;s view actually accepts those options as valid. For this reason, this technique is only useful if you&amp;rsquo;re certain that every view in the included URLconf accepts the extra options you&amp;rsquo;re passing.</source>
          <target state="translated">행의보기가 실제로 해당 옵션을 유효한 것으로 허용하는지 여부에 관계없이 포함 된 URLconf의 &lt;em&gt;모든&lt;/em&gt; 행에 추가 옵션이 &lt;em&gt;항상&lt;/em&gt; 전달됩니다 . 이러한 이유로이 기술은 포함 된 URLconf의 모든보기가 전달하는 추가 옵션을 허용하는 경우에만 유용합니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="92c628e1fbd6a9010f3d0db034ba40cb41449dee" translate="yes" xml:space="preserve">
          <source>Note that having the view instance in the template context may expose potentially hazardous methods to template authors. To prevent methods like this from being called in the template, set &lt;code&gt;alters_data=True&lt;/code&gt; on those methods. For more information, read the documentation on &lt;a href=&quot;../templates/api#alters-data-description&quot;&gt;rendering a template context&lt;/a&gt;.</source>
          <target state="translated">템플릿 컨텍스트에 뷰 인스턴스가 있으면 잠재적으로 위험한 방법을 템플릿 작성자에게 노출시킬 수 있습니다. 이와 같은 메소드가 템플리트에서 호출되지 않도록하려면 해당 메소드에서 &lt;code&gt;alters_data=True&lt;/code&gt; 를 설정 하십시오 . 자세한 내용 &lt;a href=&quot;../templates/api#alters-data-description&quot;&gt;은 템플릿 컨텍스트 렌더링에 대한&lt;/a&gt; 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="98f6de66c762486638954c88d910ab00b17debe3" translate="yes" xml:space="preserve">
          <source>Note that if &lt;a href=&quot;#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt;, then the corresponding locale-dictated format has higher precedence and will be applied.</source>
          <target state="translated">경우 유의 &lt;a href=&quot;#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N&lt;/code&gt; 가&lt;/a&gt; 설정되어 &lt;code&gt;True&lt;/code&gt; 후 해당 로케일 지시 포맷 높은 우선 순위를 가지고 적용된다.</target>
        </trans-unit>
        <trans-unit id="50d31d0e0ebd30e972979684ec82c5fb17e9796a" translate="yes" xml:space="preserve">
          <source>Note that if &lt;a href=&quot;#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;True&lt;/code&gt;, then the locale-dictated format has higher precedence and will be applied instead.</source>
          <target state="translated">참고 경우 것으로 &lt;a href=&quot;#std:setting-USE_L10N&quot;&gt; &lt;code&gt;USE_L10N&lt;/code&gt; 가&lt;/a&gt; 설정되어 &lt;code&gt;True&lt;/code&gt; , 다음 로케일 구술 형식은 높은 우선 순위를 가지고 있으며, 대신 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="49e296c8c84c9dd47aab0634b92f9ddef9e72e21" translate="yes" xml:space="preserve">
          <source>Note that if a &lt;code&gt;ModelChoiceField&lt;/code&gt; is required and has a default initial value, no empty choice is created (regardless of the value of &lt;code&gt;empty_label&lt;/code&gt;).</source>
          <target state="translated">경우주의 &lt;code&gt;ModelChoiceField&lt;/code&gt; 가 필요하고 기본 초기 값을 가지고 있습니다, 빈 선택 (관계없이 값의 생성되지 않습니다 &lt;code&gt;empty_label&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="a602110fb64a1dd4cb469f056ba8051460109907" translate="yes" xml:space="preserve">
          <source>Note that if an empty string is given, the default value will &lt;em&gt;not&lt;/em&gt; be used. Use the &lt;a href=&quot;#std:templatefilter-default&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt; filter if you want to fallback for empty strings.</source>
          <target state="translated">빈 문자열이 제공되면 기본값 이 사용 &lt;em&gt;되지 않습니다&lt;/em&gt; . 빈 문자열에 대해 대체 하려면 &lt;a href=&quot;#std:templatefilter-default&quot;&gt; &lt;code&gt;default&lt;/code&gt; &lt;/a&gt; 필터를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="80730ee1d592ce07bf82235a3404e06b9d3abf66" translate="yes" xml:space="preserve">
          <source>Note that if the URL you&amp;rsquo;re reversing doesn&amp;rsquo;t exist, you&amp;rsquo;ll get an &lt;a href=&quot;../exceptions#django.urls.NoReverseMatch&quot;&gt;&lt;code&gt;NoReverseMatch&lt;/code&gt;&lt;/a&gt; exception raised, which will cause your site to display an error page.</source>
          <target state="translated">되 돌리는 URL이 존재하지 않으면 &lt;a href=&quot;../exceptions#django.urls.NoReverseMatch&quot;&gt; &lt;code&gt;NoReverseMatch&lt;/code&gt; &lt;/a&gt; 예외가 발생하여 사이트에 오류 페이지가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="3e45a85a7dcecfdfcfb4389a347188b10434abde" translate="yes" xml:space="preserve">
          <source>Note that if the form &lt;a href=&quot;#validation-on-modelform&quot;&gt;hasn&amp;rsquo;t been validated&lt;/a&gt;, calling &lt;code&gt;save()&lt;/code&gt; will do so by checking &lt;code&gt;form.errors&lt;/code&gt;. A &lt;code&gt;ValueError&lt;/code&gt; will be raised if the data in the form doesn&amp;rsquo;t validate &amp;ndash; i.e., if &lt;code&gt;form.errors&lt;/code&gt; evaluates to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">양식의 &lt;a href=&quot;#validation-on-modelform&quot;&gt;유효성이 검사되지 않은&lt;/a&gt; 경우 &lt;code&gt;save()&lt;/code&gt; 를 호출 하면 &lt;code&gt;form.errors&lt;/code&gt; 를 검사하여 수행 합니다. &lt;code&gt;ValueError&lt;/code&gt; 형태의 데이터가없는 검증 않는 경우 발생합니다 - 즉, 경우 &lt;code&gt;form.errors&lt;/code&gt; 의 평가됩니다에 &lt;code&gt;True&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="61f3ec02092015ed9d1f89e12937af6bb0ee587e" translate="yes" xml:space="preserve">
          <source>Note that if the tests are run on a database with no transaction support (for instance, MySQL with the MyISAM engine), &lt;code&gt;setUpTestData()&lt;/code&gt; will be called before each test, negating the speed benefits.</source>
          <target state="translated">트랜잭션 지원이없는 데이터베이스 (예 : MyISAM 엔진이있는 MySQL)에서 테스트를 실행하면 각 테스트 전에 &lt;code&gt;setUpTestData()&lt;/code&gt; 가 호출되어 속도 이점을 무시 합니다.</target>
        </trans-unit>
        <trans-unit id="a758f5f8e960e50154e5596b9c6aefae0ab85207" translate="yes" xml:space="preserve">
          <source>Note that if two fixtures with the same name but different fixture type are discovered (for example, if &lt;code&gt;mydata.json&lt;/code&gt; and &lt;code&gt;mydata.xml.gz&lt;/code&gt; were found in the same fixture directory), fixture installation will be aborted, and any data installed in the call to &lt;code&gt;loaddata&lt;/code&gt; will be removed from the database.</source>
          <target state="translated">이름이 같지만 고정구 유형이 다른 두 개의 고정구가 발견되면 (예 : &lt;code&gt;mydata.json&lt;/code&gt; 및 &lt;code&gt;mydata.xml.gz&lt;/code&gt; 가 동일한 고정구 디렉토리에있는 경우) 고정구 설치가 중단되고 모든 데이터가 &lt;code&gt;loaddata&lt;/code&gt; 호출 이 데이터베이스에서 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="ac49bd48639bcacfaff102892d44aa3595f4440b" translate="yes" xml:space="preserve">
          <source>Note that if you don&amp;rsquo;t specify the &lt;code&gt;login_url&lt;/code&gt; parameter, you&amp;rsquo;ll need to ensure that the &lt;a href=&quot;../../ref/settings#std:setting-LOGIN_URL&quot;&gt;&lt;code&gt;settings.LOGIN_URL&lt;/code&gt;&lt;/a&gt; and your login view are properly associated. For example, using the defaults, add the following lines to your URLconf:</source>
          <target state="translated">&lt;code&gt;login_url&lt;/code&gt; 매개 변수를 지정하지 않으면 &lt;a href=&quot;../../ref/settings#std:setting-LOGIN_URL&quot;&gt; &lt;code&gt;settings.LOGIN_URL&lt;/code&gt; &lt;/a&gt; 과 로그인보기가 올바르게 연관 되어 있는지 확인해야합니다 . 예를 들어, 기본값을 사용하여 URLconf에 다음 행을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="6cd271fbb7b9ed101646f23af0c3630189f7de5d" translate="yes" xml:space="preserve">
          <source>Note that if you provide a value to &lt;code&gt;redirect_field_name&lt;/code&gt;, you will most likely need to customize your login template as well, since the template context variable which stores the redirect path will use the value of &lt;code&gt;redirect_field_name&lt;/code&gt; as its key rather than &lt;code&gt;&quot;next&quot;&lt;/code&gt; (the default).</source>
          <target state="translated">참고가 값을 제공하는 경우 해당 &lt;code&gt;redirect_field_name&lt;/code&gt; , 당신은 할 저장 템플릿 컨텍스트 변수가 리디렉션 경로의 값을 사용하기 때문에,뿐만 아니라 로그인 템플릿을 사용자 정의해야 할 가능성이 가장 높은 &lt;code&gt;redirect_field_name&lt;/code&gt; 를 핵심으로하기보다는 &lt;code&gt;&quot;next&quot;&lt;/code&gt; (기본 ).</target>
        </trans-unit>
        <trans-unit id="7d9053627b6ab7bc8cafe04e748b5f7e44a6dca7" translate="yes" xml:space="preserve">
          <source>Note that if you provide an &lt;code&gt;exclude&lt;/code&gt; argument to &lt;code&gt;validate_unique()&lt;/code&gt;, any &lt;a href=&quot;options#django.db.models.Options.unique_together&quot;&gt;&lt;code&gt;unique_together&lt;/code&gt;&lt;/a&gt; constraint involving one of the fields you provided will not be checked.</source>
          <target state="translated">&lt;code&gt;validate_unique()&lt;/code&gt; &lt;code&gt;exclude&lt;/code&gt; 인수를 제공하면 제공 한 필드 중 하나를 포함 하는 &lt;a href=&quot;options#django.db.models.Options.unique_together&quot;&gt; &lt;code&gt;unique_together&lt;/code&gt; &lt;/a&gt; 제한 조건이 점검되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4bf8a879fdf5070b51826c9b7caa260383bcc815" translate="yes" xml:space="preserve">
          <source>Note that if you set this to point to a &lt;a href=&quot;#django.db.models.DateTimeField&quot;&gt;&lt;code&gt;DateTimeField&lt;/code&gt;&lt;/a&gt;, only the date portion of the field will be considered. Besides, when &lt;a href=&quot;../settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;, the check will be performed in the &lt;a href=&quot;../../topics/i18n/timezones#default-current-time-zone&quot;&gt;current time zone&lt;/a&gt; at the time the object gets saved.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.DateTimeField&quot;&gt; &lt;code&gt;DateTimeField&lt;/code&gt; &lt;/a&gt; 를 가리 키도록 설정 하면 필드의 날짜 부분 만 고려됩니다. 또한 &lt;a href=&quot;../settings#std:setting-USE_TZ&quot;&gt; &lt;code&gt;USE_TZ&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;True&lt;/code&gt; 인 경우 오브젝트가 저장 될 때 &lt;a href=&quot;../../topics/i18n/timezones#default-current-time-zone&quot;&gt;현재 시간대&lt;/a&gt; 에서 검사가 수행됩니다 .</target>
        </trans-unit>
        <trans-unit id="57208e52924136beaba1ef45b1cfb353a276896c" translate="yes" xml:space="preserve">
          <source>Note that if you use &lt;code&gt;iterator()&lt;/code&gt; to run the query, &lt;code&gt;prefetch_related()&lt;/code&gt; calls will be ignored since these two optimizations do not make sense together.</source>
          <target state="translated">&lt;code&gt;iterator()&lt;/code&gt; 를 사용 하여 쿼리를 실행하는 경우 &lt;code&gt;prefetch_related()&lt;/code&gt; 호출은 무시됩니다.이 두 가지 최적화는 함께 이해되지 않기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="d3fefd7119376ae7f60ef230db53d905b5c5f7ea" translate="yes" xml:space="preserve">
          <source>Note that if you want the number of items in a &lt;code&gt;QuerySet&lt;/code&gt; and are also retrieving model instances from it (for example, by iterating over it), it&amp;rsquo;s probably more efficient to use &lt;code&gt;len(queryset)&lt;/code&gt; which won&amp;rsquo;t cause an extra database query like &lt;code&gt;count()&lt;/code&gt; would.</source>
          <target state="translated">&lt;code&gt;QuerySet&lt;/code&gt; 의 항목 수를 원하고 모델 인스턴스를 검색하는 경우 (예를 들어 반복하여) 추가 데이터베이스 쿼리를 발생시키지 않는 &lt;code&gt;len(queryset)&lt;/code&gt; 을 사용하는 것이 더 효율적일 수 있습니다. &lt;code&gt;count()&lt;/code&gt; 는 것입니다.</target>
        </trans-unit>
        <trans-unit id="4b51148aa0e1df68489edcd2daa4501a3ad657c5" translate="yes" xml:space="preserve">
          <source>Note that if you want to include literal percent signs in the query, you have to double them in the case you are passing parameters:</source>
          <target state="translated">쿼리에 리터럴 백분율 기호를 포함하려면 매개 변수를 전달할 경우 기호를 두 배로 늘려야합니다.</target>
        </trans-unit>
        <trans-unit id="4b4035dfedcff608a0dab9991ed7812ee69969f8" translate="yes" xml:space="preserve">
          <source>Note that if you wish to use the same file handle for multiple &lt;code&gt;post()&lt;/code&gt; calls then you will need to manually reset the file pointer between posts. The easiest way to do this is to manually close the file after it has been provided to &lt;code&gt;post()&lt;/code&gt;, as demonstrated above.</source>
          <target state="translated">여러 &lt;code&gt;post()&lt;/code&gt; 호출에 동일한 파일 핸들을 사용하려면 게시물 사이의 파일 포인터를 수동으로 재설정해야합니다. 가장 쉬운 방법 은 위에서 설명한 것처럼 &lt;code&gt;post()&lt;/code&gt; 에 제공된 파일을 수동으로 닫는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="7f860210b1c27c53f17cee74317f048e4e6632b1" translate="yes" xml:space="preserve">
          <source>Note that in case there is no other lookup specified, Django interprets &lt;code&gt;change__abs=27&lt;/code&gt; as &lt;code&gt;change__abs__exact=27&lt;/code&gt;.</source>
          <target state="translated">다른 조회가 지정되지 않은 경우 Django는 &lt;code&gt;change__abs=27&lt;/code&gt; 을 &lt;code&gt;change__abs__exact=27&lt;/code&gt; 로 해석 합니다.</target>
        </trans-unit>
        <trans-unit id="9930c8dc279b69fbaa1a8be67211867deca2a03e" translate="yes" xml:space="preserve">
          <source>Note that in most deployment situations where Django isn&amp;rsquo;t involved in serving user-uploaded files, this setting won&amp;rsquo;t help you. For example, if your &lt;a href=&quot;settings#std:setting-MEDIA_URL&quot;&gt;&lt;code&gt;MEDIA_URL&lt;/code&gt;&lt;/a&gt; is served directly by your front-end Web server (nginx, Apache, etc.) then you&amp;rsquo;d want to set this header there. On the other hand, if you are using Django to do something like require authorization in order to download files and you cannot set the header using your Web server, this setting will be useful.</source>
          <target state="translated">Django가 사용자가 업로드 한 파일을 제공하지 않는 대부분의 배포 상황에서는이 설정이 도움이되지 않습니다. 예를 들어, &lt;a href=&quot;settings#std:setting-MEDIA_URL&quot;&gt; &lt;code&gt;MEDIA_URL&lt;/code&gt; &lt;/a&gt; 이 프론트 엔드 웹 서버 (nginx, Apache 등)에 의해 직접 제공되는 경우이 헤더를 설정하려고합니다. 반면에 Django를 사용하여 파일을 다운로드하기 위해 권한 부여가 필요한 것과 같은 작업을 수행하고 웹 서버를 사용하여 헤더를 설정할 수없는 경우이 설정이 유용합니다.</target>
        </trans-unit>
        <trans-unit id="99e79e30a12a76f1313050e4f0b66fec20480e07" translate="yes" xml:space="preserve">
          <source>Note that in the case of identical date values, these methods will use the primary key as a tie-breaker. This guarantees that no records are skipped or duplicated. That also means you cannot use those methods on unsaved objects.</source>
          <target state="translated">동일한 날짜 값의 경우 이러한 방법은 기본 키를 타이 브레이커로 사용합니다. 이를 통해 레코드를 건너 뛰거나 복제 할 수 없습니다. 또한 저장하지 않은 객체에는 해당 방법을 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="90c15f36e80bc36194e7fc7c88e2411b03bc0b09" translate="yes" xml:space="preserve">
          <source>Note that in the last example the article has moved from John to Paul.</source>
          <target state="translated">마지막 예에서 기사는 요한에서 바울로 옮겨졌습니다.</target>
        </trans-unit>
        <trans-unit id="cf55cefd5bd9a22b0ef1f0f6fcfbd1370197c2a8" translate="yes" xml:space="preserve">
          <source>Note that inheriting from multiple models that have a common &lt;code&gt;id&lt;/code&gt; primary key field will raise an error. To properly use multiple inheritance, you can use an explicit &lt;a href=&quot;../../ref/models/fields#django.db.models.AutoField&quot;&gt;&lt;code&gt;AutoField&lt;/code&gt;&lt;/a&gt; in the base models:</source>
          <target state="translated">공통 &lt;code&gt;id&lt;/code&gt; 기본 키 필드가 있는 여러 모델에서 상속 하면 오류가 발생합니다. 다중 상속을 올바르게 사용하려면 기본 모델에서 명시 적 &lt;a href=&quot;../../ref/models/fields#django.db.models.AutoField&quot;&gt; &lt;code&gt;AutoField&lt;/code&gt; &lt;/a&gt; 를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f16597be826caa262d10a0f4d0ad1380467491e9" translate="yes" xml:space="preserve">
          <source>Note that it &lt;strong&gt;does not&lt;/strong&gt; include the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tags, or a submit button. We&amp;rsquo;ll have to provide those ourselves in the template.</source>
          <target state="translated">참고는 것을 &lt;strong&gt;하지 않는&lt;/strong&gt; 인클루드 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 태그를하거나 버튼을 제출합니다. 템플릿에 직접 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="20fcecc00ae0237fe53c67889180caee6880fbb3" translate="yes" xml:space="preserve">
          <source>Note that it is possible to compare &lt;code&gt;Polygon&lt;/code&gt; objects directly with &lt;code&gt;&amp;lt;&lt;/code&gt; or &lt;code&gt;&amp;gt;&lt;/code&gt;, but as the comparison is made through Polygon&amp;rsquo;s &lt;a href=&quot;#django.contrib.gis.geos.LineString&quot;&gt;&lt;code&gt;LineString&lt;/code&gt;&lt;/a&gt;, it does not mean much (but is consistent and quick). You can always force the comparison with the &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry.area&quot;&gt;&lt;code&gt;area&lt;/code&gt;&lt;/a&gt; property:</source>
          <target state="translated">&lt;code&gt;Polygon&lt;/code&gt; 객체를 &lt;code&gt;&amp;lt;&lt;/code&gt; 또는 &lt;code&gt;&amp;gt;&lt;/code&gt; 과 직접 비교할 수는 있지만 Polygon의 &lt;a href=&quot;#django.contrib.gis.geos.LineString&quot;&gt; &lt;code&gt;LineString&lt;/code&gt; 을&lt;/a&gt; 통해 비교할 때는 그다지 의미가 없지만 (일관되고 빠릅니다). 항상 &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry.area&quot;&gt; &lt;code&gt;area&lt;/code&gt; &lt;/a&gt; 속성 과 비교할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="309e54b62c2f8838bb6218907b1b434ce25c9449" translate="yes" xml:space="preserve">
          <source>Note that it&amp;rsquo;s perfectly safe to store global information that will not change throughout the life of the &lt;code&gt;Node&lt;/code&gt; as an attribute. In the case of &lt;code&gt;CycleNode&lt;/code&gt;, the &lt;code&gt;cyclevars&lt;/code&gt; argument doesn&amp;rsquo;t change after the &lt;code&gt;Node&lt;/code&gt; is instantiated, so we don&amp;rsquo;t need to put it in the &lt;code&gt;render_context&lt;/code&gt;. But state information that is specific to the template that is currently being rendered, like the current iteration of the &lt;code&gt;CycleNode&lt;/code&gt;, should be stored in the &lt;code&gt;render_context&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Node&lt;/code&gt; 수명 동안 변경되지 않는 전역 정보를 속성 으로 저장하는 것이 안전 합니다. 의 경우 &lt;code&gt;CycleNode&lt;/code&gt; 의 &lt;code&gt;cyclevars&lt;/code&gt; 의 사후이 변경되지 않습니다 인수 &lt;code&gt;Node&lt;/code&gt; 우리가에 넣을 필요가 없습니다, 인스턴스화 &lt;code&gt;render_context&lt;/code&gt; . 그러나 &lt;code&gt;CycleNode&lt;/code&gt; 의 현재 반복과 같이 현재 렌더링중인 템플리트에 특정한 상태 정보 는 &lt;code&gt;render_context&lt;/code&gt; 에 저장되어야합니다 .</target>
        </trans-unit>
        <trans-unit id="e90fd4cc43a3b840e41758699f16f4a951c22c6a" translate="yes" xml:space="preserve">
          <source>Note that model interdependencies in Django can get very complex, and squashing may result in migrations that do not run; either mis-optimized (in which case you can try again with &lt;code&gt;--no-optimize&lt;/code&gt;, though you should also report an issue), or with a &lt;code&gt;CircularDependencyError&lt;/code&gt;, in which case you can manually resolve it.</source>
          <target state="translated">Django의 모델 상호 종속성은 매우 복잡 할 수 있으며 스 쿼싱으로 인해 마이그레이션이 실행되지 않을 수 있습니다. 잘못 최적화 된 경우 (이 경우 &lt;code&gt;--no-optimize&lt;/code&gt; 로 다시 시도 하여 문제를보고해야 함) 또는 &lt;code&gt;CircularDependencyError&lt;/code&gt; 로 수동으로 해결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="284c76538164a551a6ead0347d70137da1e7759a" translate="yes" xml:space="preserve">
          <source>Note that not all changes are possible on all databases - for example, you cannot change a text-type field like &lt;code&gt;models.TextField()&lt;/code&gt; into a number-type field like &lt;code&gt;models.IntegerField()&lt;/code&gt; on most databases.</source>
          <target state="translated">모든 변경 사항이 모든 데이터베이스에 가능 주 - 예를 들어, 당신은 같은 텍스트 형식 필드를 변경할 수 없습니다 &lt;code&gt;models.TextField()&lt;/code&gt; 같은 숫자 형 필드에 &lt;code&gt;models.IntegerField()&lt;/code&gt; 대부분의 데이터베이스에.</target>
        </trans-unit>
        <trans-unit id="5765b42680f5abb4a72b6c1b5ae0dc4354eab406" translate="yes" xml:space="preserve">
          <source>Note that older or more recent versions of these libraries &lt;em&gt;may&lt;/em&gt; also work totally fine with GeoDjango. Your mileage may vary.</source>
          <target state="translated">이 라이브러리의 이전 또는 최신 버전은 GeoDjango에서도 완벽하게 작동 &lt;em&gt;할 수&lt;/em&gt; 있습니다. 귀하의 마일리지가 다를 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fbd318205dcfeda5f23d3aa3a5607de8d9bf49a6" translate="yes" xml:space="preserve">
          <source>Note that once we&amp;rsquo;ve done this in all these views, we no longer need to import &lt;a href=&quot;../topics/templates#module-django.template.loader&quot;&gt;&lt;code&gt;loader&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; (you&amp;rsquo;ll want to keep &lt;code&gt;HttpResponse&lt;/code&gt; if you still have the stub methods for &lt;code&gt;detail&lt;/code&gt;, &lt;code&gt;results&lt;/code&gt;, and &lt;code&gt;vote&lt;/code&gt;).</source>
          <target state="translated">이러한 모든 뷰에서이 작업을 완료하면 더 이상 &lt;a href=&quot;../topics/templates#module-django.template.loader&quot;&gt; &lt;code&gt;loader&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt; 를 가져올 필요가 없습니다 ( &lt;code&gt;detail&lt;/code&gt; , &lt;code&gt;results&lt;/code&gt; 및 &lt;code&gt;vote&lt;/code&gt; 대한 스텁 메소드가 여전히있는 경우 &lt;code&gt;HttpResponse&lt;/code&gt; 를 유지해야 함 ).</target>
        </trans-unit>
        <trans-unit id="db3daa7b3e0d58113112241aa78669b84d25e7f6" translate="yes" xml:space="preserve">
          <source>Note that only the execution of your view is enclosed in the transactions. Middleware runs outside of the transaction, and so does the rendering of template responses.</source>
          <target state="translated">뷰 실행 만 트랜잭션에 포함됩니다. 미들웨어는 트랜잭션 외부에서 실행되므로 템플리트 응답 렌더링도 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="f230fc5e74b5fca6a965580a65f23bf035b6e813" translate="yes" xml:space="preserve">
          <source>Note that only the outermost call to &lt;a href=&quot;../../../topics/db/transactions#django.db.transaction.atomic&quot;&gt;&lt;code&gt;atomic()&lt;/code&gt;&lt;/a&gt; sets up a transaction and thus sets the time that &lt;code&gt;TransactionNow()&lt;/code&gt; will return; nested calls create savepoints which do not affect the transaction time.</source>
          <target state="translated">&lt;a href=&quot;../../../topics/db/transactions#django.db.transaction.atomic&quot;&gt; &lt;code&gt;atomic()&lt;/code&gt; &lt;/a&gt; 대한 가장 바깥 쪽 호출 만이 트랜잭션을 설정하므로 &lt;code&gt;TransactionNow()&lt;/code&gt; 가 리턴 할 시간을 설정합니다 . 중첩 된 호출은 트랜잭션 시간에 영향을 미치지 않는 저장 점을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="d57570c30207a70feb1f95d543f2d181afc9bba6" translate="yes" xml:space="preserve">
          <source>Note that passing an empty dictionary creates a &lt;em&gt;bound&lt;/em&gt; form with empty data:</source>
          <target state="translated">빈 사전을 전달하면 빈 데이터 가있는 &lt;em&gt;바인딩 된&lt;/em&gt; 양식이 생성 됩니다.</target>
        </trans-unit>
        <trans-unit id="eaad0f28e2fcb42d6532c371c6cfac0fd491200a" translate="yes" xml:space="preserve">
          <source>Note that per-user installations can still affect the behavior of system tools that run as that user, so &lt;code&gt;virtualenv&lt;/code&gt; is a more robust solution (see below).</source>
          <target state="translated">사용자 별 설치는 해당 사용자로 실행되는 시스템 도구의 동작에 여전히 영향을 줄 수 있으므로 &lt;code&gt;virtualenv&lt;/code&gt; 가보다 강력한 솔루션입니다 (아래 참조).</target>
        </trans-unit>
        <trans-unit id="cb0441db5179fedc88175f7abe68eb6db9244379" translate="yes" xml:space="preserve">
          <source>Note that pluralization is complicated and works differently in each language. Comparing &lt;code&gt;count&lt;/code&gt; to 1 isn&amp;rsquo;t always the correct rule. This code looks sophisticated, but will produce incorrect results for some languages:</source>
          <target state="translated">복수화는 복잡하고 언어마다 다르게 작동합니다. &lt;code&gt;count&lt;/code&gt; 를 1로 비교하는 것이 항상 올바른 규칙은 아닙니다. 이 코드는 정교 해 보이지만 일부 언어에서는 잘못된 결과를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="5de11d40e524334a2d38e78962aaeec3d5b135e7" translate="yes" xml:space="preserve">
          <source>Note that request methods should be in uppercase.</source>
          <target state="translated">요청 메소드는 대문자 여야합니다.</target>
        </trans-unit>
        <trans-unit id="968db22470d1ca267f45216e5aaa73f7fd939af9" translate="yes" xml:space="preserve">
          <source>Note that setting &lt;a href=&quot;#std:setting-EMAIL_SSL_CERTFILE&quot;&gt;&lt;code&gt;EMAIL_SSL_CERTFILE&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#std:setting-EMAIL_SSL_KEYFILE&quot;&gt;&lt;code&gt;EMAIL_SSL_KEYFILE&lt;/code&gt;&lt;/a&gt; doesn&amp;rsquo;t result in any certificate checking. They&amp;rsquo;re passed to the underlying SSL connection. Please refer to the documentation of Python&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3/library/ssl.html#ssl.wrap_socket&quot;&gt;&lt;code&gt;ssl.wrap_socket()&lt;/code&gt;&lt;/a&gt; function for details on how the certificate chain file and private key file are handled.</source>
          <target state="translated">&lt;a href=&quot;#std:setting-EMAIL_SSL_CERTFILE&quot;&gt; &lt;code&gt;EMAIL_SSL_CERTFILE&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#std:setting-EMAIL_SSL_KEYFILE&quot;&gt; &lt;code&gt;EMAIL_SSL_KEYFILE&lt;/code&gt; &lt;/a&gt; 을 설정해 도 인증서 검사가 수행되지 않습니다. 기본 SSL 연결로 전달됩니다. 인증서 체인 파일 및 개인 키 파일을 처리하는 방법에 대한 자세한 내용 은 Python의 &lt;a href=&quot;https://docs.python.org/3/library/ssl.html#ssl.wrap_socket&quot;&gt; &lt;code&gt;ssl.wrap_socket()&lt;/code&gt; &lt;/a&gt; 함수 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c22e8dd57361cf848941e0793916235467d46530" translate="yes" xml:space="preserve">
          <source>Note that since &lt;code&gt;set()&lt;/code&gt; is a compound operation, it is subject to race conditions. For instance, new objects may be added to the database in between the call to &lt;code&gt;clear()&lt;/code&gt; and the call to &lt;code&gt;add()&lt;/code&gt;.</source>
          <target state="translated">주 이후 있다는 &lt;code&gt;set()&lt;/code&gt; 복합 작업입니다, 그것은 경쟁 조건이 적용됩니다. 예를 들어 &lt;code&gt;clear()&lt;/code&gt; 호출과 &lt;code&gt;add()&lt;/code&gt; 호출 사이에 데이터베이스에 새 객체를 추가 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e1ea0edc5eb39ec2c96e83f140636e0429b857eb" translate="yes" xml:space="preserve">
          <source>Note that since the child template didn&amp;rsquo;t define the &lt;code&gt;sidebar&lt;/code&gt; block, the value from the parent template is used instead. Content within a &lt;code&gt;{% block %}&lt;/code&gt; tag in a parent template is always used as a fallback.</source>
          <target state="translated">하위 템플릿은 &lt;code&gt;sidebar&lt;/code&gt; 블록을 정의하지 않았으므로 상위 템플릿의 값이 대신 사용됩니다. 부모 템플릿 의 &lt;code&gt;{% block %}&lt;/code&gt; 태그 내의 내용 은 항상 대체로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="a0ef7e754d821fe5a5389a0e0485b1236840d758" translate="yes" xml:space="preserve">
          <source>Note that some Django code was executed while running tests, but it is not listed here because of the &lt;code&gt;source&lt;/code&gt; flag passed to the previous command.</source>
          <target state="translated">테스트를 실행하는 동안 일부 장고 코드가 실행되었지만 이전 명령으로 전달 된 &lt;code&gt;source&lt;/code&gt; 플래그로 인해 여기에 나열되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="b58e3568c1f9f0b7253202c19712cef23c12adeb" translate="yes" xml:space="preserve">
          <source>Note that the &lt;a href=&quot;#django.contrib.flatpages.middleware.FlatpageFallbackMiddleware&quot;&gt;&lt;code&gt;FlatpageFallbackMiddleware&lt;/code&gt;&lt;/a&gt; only steps in once another view has successfully produced a 404 response. If another view or middleware class attempts to produce a 404 but ends up raising an exception instead, the response will become an HTTP 500 (&amp;ldquo;Internal Server Error&amp;rdquo;) and the &lt;a href=&quot;#django.contrib.flatpages.middleware.FlatpageFallbackMiddleware&quot;&gt;&lt;code&gt;FlatpageFallbackMiddleware&lt;/code&gt;&lt;/a&gt; will not attempt to serve a flat page.</source>
          <target state="translated">참고 것을 &lt;a href=&quot;#django.contrib.flatpages.middleware.FlatpageFallbackMiddleware&quot;&gt; &lt;code&gt;FlatpageFallbackMiddleware&lt;/code&gt; 는&lt;/a&gt; 단지 다른보기가 성공적으로 404 응답을 생산 일단의 단계를 반복합니다. 다른 뷰 또는 미들웨어 클래스가 404를 생성하려고 시도하지만 대신 예외가 발생하면 응답은 HTTP 500 ( &quot;내부 서버 오류&quot;)이되고 &lt;a href=&quot;#django.contrib.flatpages.middleware.FlatpageFallbackMiddleware&quot;&gt; &lt;code&gt;FlatpageFallbackMiddleware&lt;/code&gt; &lt;/a&gt; 는 플랫 페이지를 제공하려고 시도하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6fd81eb0266642f411e0ec2b93dda43fb0cdaa81" translate="yes" xml:space="preserve">
          <source>Note that the &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.delete&quot;&gt;&lt;code&gt;delete()&lt;/code&gt;&lt;/a&gt; method for an object is not necessarily called when &lt;a href=&quot;queries#topics-db-queries-delete&quot;&gt;deleting objects in bulk using a QuerySet&lt;/a&gt; or as a result of a &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.on_delete&quot;&gt;&lt;code&gt;cascading
delete&lt;/code&gt;&lt;/a&gt;. To ensure customized delete logic gets executed, you can use &lt;a href=&quot;../../ref/signals#django.db.models.signals.pre_delete&quot;&gt;&lt;code&gt;pre_delete&lt;/code&gt;&lt;/a&gt; and/or &lt;a href=&quot;../../ref/signals#django.db.models.signals.post_delete&quot;&gt;&lt;code&gt;post_delete&lt;/code&gt;&lt;/a&gt; signals.</source>
          <target state="translated">점을 유의 &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.delete&quot;&gt; &lt;code&gt;delete()&lt;/code&gt; &lt;/a&gt; 할 때 객체의 메소드가 반드시 호출되지 않습니다 &lt;a href=&quot;queries#topics-db-queries-delete&quot;&gt;검색어 세트를 사용하여 대량의 개체를 삭제&lt;/a&gt; 하거나의 결과로 &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.on_delete&quot;&gt; &lt;code&gt;cascading delete&lt;/code&gt; &lt;/a&gt; . 사용자 정의 된 삭제 논리가 실행되도록하려면 &lt;a href=&quot;../../ref/signals#django.db.models.signals.pre_delete&quot;&gt; &lt;code&gt;pre_delete&lt;/code&gt; &lt;/a&gt; 및 / 또는 &lt;a href=&quot;../../ref/signals#django.db.models.signals.post_delete&quot;&gt; &lt;code&gt;post_delete&lt;/code&gt; &lt;/a&gt; 신호를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="253ce872bdbdccddb3ef8b680bcb97ef630a7e6c" translate="yes" xml:space="preserve">
          <source>Note that the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.select_related&quot;&gt;&lt;code&gt;select_related()&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; method recursively prepopulates the cache of all one-to-many relationships ahead of time. Example:</source>
          <target state="translated">있습니다 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.select_related&quot;&gt; &lt;code&gt;select_related()&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; &lt;/a&gt; 방법은 재귀 적으로 사전에 모든 일대 다 관계의 캐시를 prepopulates. 예:</target>
        </trans-unit>
        <trans-unit id="e80f5630b8f1dca8b0ea0eedd1bf8d8773a13237" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;content&lt;/code&gt; argument must be an instance of either &lt;a href=&quot;#django.core.files.File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; or of a subclass of &lt;a href=&quot;#django.core.files.File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt;, such as &lt;a href=&quot;#django.core.files.base.ContentFile&quot;&gt;&lt;code&gt;ContentFile&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">것을 주 &lt;code&gt;content&lt;/code&gt; 인수가 하나의 인스턴스 여야합니다 &lt;a href=&quot;#django.core.files.File&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt; 또는 서브 클래스의 &lt;a href=&quot;#django.core.files.File&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt; 과 같은, &lt;a href=&quot;#django.core.files.base.ContentFile&quot;&gt; &lt;code&gt;ContentFile&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="69cf65c7f436b8fbaff150d2dc857544f903a181" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;content&lt;/code&gt; argument should be an instance of &lt;a href=&quot;../files/file#django.core.files.File&quot;&gt;&lt;code&gt;django.core.files.File&lt;/code&gt;&lt;/a&gt;, not Python&amp;rsquo;s built-in file object. You can construct a &lt;a href=&quot;../files/file#django.core.files.File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; from an existing Python file object like this:</source>
          <target state="translated">것을 주 &lt;code&gt;content&lt;/code&gt; 인수의 인스턴스해야 &lt;a href=&quot;../files/file#django.core.files.File&quot;&gt; &lt;code&gt;django.core.files.File&lt;/code&gt; 는&lt;/a&gt; , 파이썬이 내장되어있어되지 파일 객체. 다음 과 같이 기존 Python 파일 객체에서 &lt;a href=&quot;../files/file#django.core.files.File&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt; 을 생성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f40ef01b229f9c63dbeb83559c6536f91520f3ba" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;docs&lt;/code&gt; directory won&amp;rsquo;t be included in your package unless you add some files to it. Many Django apps also provide their documentation online through sites like &lt;a href=&quot;https://readthedocs.org&quot;&gt;readthedocs.org&lt;/a&gt;.</source>
          <target state="translated">참고 &lt;code&gt;docs&lt;/code&gt; 당신이 그것에 일부 파일을 추가하지 않으면 디렉토리가 패키지에 포함되지 않습니다. 많은 Django 앱은 &lt;a href=&quot;https://readthedocs.org&quot;&gt;readthedocs.org&lt;/a&gt; 와 같은 사이트를 통해 온라인으로 설명서를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="480e601acbf5c70f30565ccc01d9a0fb37503e26" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;models&lt;/code&gt; module is imported from &lt;code&gt;django.contrib.gis.db&lt;/code&gt;.</source>
          <target state="translated">주의 &lt;code&gt;models&lt;/code&gt; 모듈에서 가져 &lt;code&gt;django.contrib.gis.db&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d8c97e4e91823174dcc8b363df50dbaa5e57e373" translate="yes" xml:space="preserve">
          <source>Note that the block includes &lt;em&gt;all&lt;/em&gt; the text between the &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;endfilter&lt;/code&gt; tags.</source>
          <target state="translated">블록은 &lt;code&gt;filter&lt;/code&gt; 와 &lt;code&gt;endfilter&lt;/code&gt; 필터 태그 사이의 &lt;em&gt;모든&lt;/em&gt; 텍스트를 포함 합니다.</target>
        </trans-unit>
        <trans-unit id="d560327fe2008995352ea5ff59887465ed4e02c3" translate="yes" xml:space="preserve">
          <source>Note that the cache backend isn&amp;rsquo;t vulnerable to this problem, because caches automatically delete stale data. Neither is the cookie backend, because the session data is stored by the users&amp;rsquo; browsers.</source>
          <target state="translated">캐시는 오래된 데이터를 자동으로 삭제하므로 캐시 백엔드는이 문제에 취약하지 않습니다. 세션 데이터는 사용자의 브라우저에 의해 저장되므로 쿠키 백엔드도 아닙니다.</target>
        </trans-unit>
        <trans-unit id="997b862ea7c654dba69036735ee9c3d739d594e9" translate="yes" xml:space="preserve">
          <source>Note that the cache control settings &amp;ldquo;private&amp;rdquo; and &amp;ldquo;public&amp;rdquo; are mutually exclusive. The decorator ensures that the &amp;ldquo;public&amp;rdquo; directive is removed if &amp;ldquo;private&amp;rdquo; should be set (and vice versa). An example use of the two directives would be a blog site that offers both private and public entries. Public entries may be cached on any shared cache. The following code uses &lt;a href=&quot;../ref/utils#django.utils.cache.patch_cache_control&quot;&gt;&lt;code&gt;patch_cache_control()&lt;/code&gt;&lt;/a&gt;, the manual way to modify the cache control header (it is internally called by the &lt;a href=&quot;http/decorators#django.views.decorators.cache.cache_control&quot;&gt;&lt;code&gt;cache_control()&lt;/code&gt;&lt;/a&gt; decorator):</source>
          <target state="translated">캐시 제어 설정&amp;ldquo;private&amp;rdquo;과&amp;ldquo;public&amp;rdquo;은 상호 배타적입니다. 데코레이터는 &quot;private&quot;을 설정해야하는 경우 &quot;public&quot;지시문이 제거되도록합니다 (반대의 경우도 마찬가지). 두 가지 지시문의 사용 예는 개인 및 공개 항목을 모두 제공하는 블로그 사이트입니다. 공용 항목은 모든 공유 캐시에 캐시 될 수 있습니다. 다음 코드는 캐시 제어 헤더를 수정하는 수동 방법 인 &lt;a href=&quot;../ref/utils#django.utils.cache.patch_cache_control&quot;&gt; &lt;code&gt;patch_cache_control()&lt;/code&gt; &lt;/a&gt; 사용 합니다 ( 캐시 내부에서 &lt;a href=&quot;http/decorators#django.views.decorators.cache.cache_control&quot;&gt; &lt;code&gt;cache_control()&lt;/code&gt; &lt;/a&gt; 데코레이터가 호출 함 ).</target>
        </trans-unit>
        <trans-unit id="329a8fe91b918a1eabc78ec4127577a2eaa4620a" translate="yes" xml:space="preserve">
          <source>Note that the default IP address, &lt;code&gt;127.0.0.1&lt;/code&gt;, is not accessible from other machines on your network. To make your development server viewable to other machines on the network, use its own IP address (e.g. &lt;code&gt;192.168.2.1&lt;/code&gt;) or &lt;code&gt;0.0.0.0&lt;/code&gt; or &lt;code&gt;::&lt;/code&gt; (with IPv6 enabled).</source>
          <target state="translated">기본 IP 주소 &lt;code&gt;127.0.0.1&lt;/code&gt; 은 네트워크의 다른 시스템에서 액세스 할 수 없습니다. 개발 서버를 네트워크의 다른 시스템에서 볼 수있게하려면 자체 IP 주소 (예 : &lt;code&gt;192.168.2.1&lt;/code&gt; ) 또는 &lt;code&gt;0.0.0.0&lt;/code&gt; 또는 &lt;code&gt;::&lt;/code&gt; :( IPv6 사용)을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="40528c2a9e8caf146e1fc466ce15cb5b451cd1a5" translate="yes" xml:space="preserve">
          <source>Note that the first argument &lt;em&gt;must&lt;/em&gt; be called &lt;code&gt;context&lt;/code&gt;.</source>
          <target state="translated">첫 번째 인수 &lt;em&gt;는 &lt;/em&gt; &lt;code&gt;context&lt;/code&gt; 라고 &lt;em&gt;해야합니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="65e9739383cf60a6791ac75fed8f327d25413bd7" translate="yes" xml:space="preserve">
          <source>Note that the first parameter to the function &lt;em&gt;must&lt;/em&gt; be called &lt;code&gt;context&lt;/code&gt;.</source>
          <target state="translated">함수의 첫 번째 매개 변수 는 &lt;code&gt;context&lt;/code&gt; 라고 &lt;em&gt;해야합니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="0abaf39e2d3058e4498c22aad4c34d7e6f3e0926" translate="yes" xml:space="preserve">
          <source>Note that the header needs to be in the format as used by &lt;code&gt;request.META&lt;/code&gt; &amp;ndash; all caps and likely starting with &lt;code&gt;HTTP_&lt;/code&gt;. (Remember, Django automatically adds &lt;code&gt;'HTTP_'&lt;/code&gt; to the start of x-header names before making the header available in &lt;code&gt;request.META&lt;/code&gt;.)</source>
          <target state="translated">헤더는 &lt;code&gt;request.META&lt;/code&gt; 에서 사용하는 형식으로되어 있어야합니다. 모든 대문자이며 &lt;code&gt;HTTP_&lt;/code&gt; 로 시작될 수 있습니다 . (Django 는 &lt;code&gt;request.META&lt;/code&gt; 에서 헤더를 사용 가능하게하기 전에 x- 헤더 이름의 시작 부분에 &lt;code&gt;'HTTP_'&lt;/code&gt; 를 자동으로 추가 함을 기억하십시오 .)</target>
        </trans-unit>
        <trans-unit id="a0b88ccf06c4a2dde1c8ecf8326ade5f6087323f" translate="yes" xml:space="preserve">
          <source>Note that the key in the dictionary is the actual field class, &lt;em&gt;not&lt;/em&gt; a string. The value is another dictionary; these arguments will be passed to the form field&amp;rsquo;s &lt;code&gt;__init__()&lt;/code&gt; method. See &lt;a href=&quot;../../forms/api&quot;&gt;The Forms API&lt;/a&gt; for details.</source>
          <target state="translated">사전의 키 는 문자열이 &lt;em&gt;아닌&lt;/em&gt; 실제 필드 클래스 입니다. 값은 또 다른 사전입니다. 이 인수는 양식 필드의 &lt;code&gt;__init__()&lt;/code&gt; 메소드 로 전달됩니다 . 자세한 내용 &lt;a href=&quot;../../forms/api&quot;&gt;은 Forms API&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="09019a3c236f5e543c42c3fc84c9325d2206d759" translate="yes" xml:space="preserve">
          <source>Note that the label suffix is added only if the last character of the label isn&amp;rsquo;t a punctuation character (in English, those are &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;!&lt;/code&gt;, &lt;code&gt;?&lt;/code&gt; or &lt;code&gt;:&lt;/code&gt;).</source>
          <target state="translated">레이블의 접미사는 레이블의 마지막 문자가 문장 부호 문자가 아닌 경우에만 추가됩니다 (영어, &lt;code&gt;.&lt;/code&gt; , &lt;code&gt;!&lt;/code&gt; , &lt;code&gt;?&lt;/code&gt; 또는 &lt;code&gt;:&lt;/code&gt; ) .</target>
        </trans-unit>
        <trans-unit id="45f9ccb1fbd2c54a94373b7ce9767a5b690ebf8b" translate="yes" xml:space="preserve">
          <source>Note that the latest Django master may not always be stable. When developing against master, you can check &lt;a href=&quot;https://djangoci.com&quot;&gt;Django&amp;rsquo;s continuous integration builds&lt;/a&gt; to determine if the failures are specific to your machine or if they are also present in Django&amp;rsquo;s official builds. If you click to view a particular build, you can view the &amp;ldquo;Configuration Matrix&amp;rdquo; which shows failures broken down by Python version and database backend.</source>
          <target state="translated">최신 장고 마스터가 항상 안정적인 것은 아닙니다. 마스터를 대상으로 개발할 때 &lt;a href=&quot;https://djangoci.com&quot;&gt;Django의 지속적인 통합 빌드&lt;/a&gt; 를 확인하여 고장이 시스템에 고유한지 또는 Django의 공식 빌드에도 존재하는지 확인할 수 있습니다. 특정 빌드를 보려면 클릭하면 Python 버전 및 데이터베이스 백엔드별로 분류 된 실패를 보여주는&amp;ldquo;구성 매트릭스&amp;rdquo;를 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1c1acd60a0e2efb4514768243487586e4ccb5e22" translate="yes" xml:space="preserve">
          <source>Note that the loader performs an optimization when it first runs: it caches a list of which &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; packages have a &lt;code&gt;templates&lt;/code&gt; subdirectory.</source>
          <target state="translated">로더는 처음 실행될 때 최적화를 수행합니다. &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 패키지에 &lt;code&gt;templates&lt;/code&gt; 서브 디렉토리 가있는 목록을 캐시합니다 .</target>
        </trans-unit>
        <trans-unit id="1d5d95f9aa8b375a624a768724d8045e847dc228" translate="yes" xml:space="preserve">
          <source>Note that the name of the matched pattern in the path strings of the second and third patterns has changed from &lt;code&gt;&amp;lt;question_id&amp;gt;&lt;/code&gt; to &lt;code&gt;&amp;lt;pk&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">두 번째 및 세 번째 패턴의 경로 문자열에서 일치하는 패턴의 이름이 &lt;code&gt;&amp;lt;question_id&amp;gt;&lt;/code&gt; 에서 &lt;code&gt;&amp;lt;pk&amp;gt;&lt;/code&gt; 로 변경되었습니다 .</target>
        </trans-unit>
        <trans-unit id="b16982e8febbd865c853824b0312670d37d10b80" translate="yes" xml:space="preserve">
          <source>Note that the name of the view function doesn&amp;rsquo;t matter; it doesn&amp;rsquo;t have to be named in a certain way in order for Django to recognize it. We&amp;rsquo;re calling it &lt;code&gt;current_datetime&lt;/code&gt; here, because that name clearly indicates what it does.</source>
          <target state="translated">뷰 함수의 이름은 중요하지 않습니다. Django가 인식하기 위해 특정 방식으로 이름을 지정할 필요는 없습니다. 여기서는 &lt;code&gt;current_datetime&lt;/code&gt; 이라고 부릅니다. 그 이름은 그것이하는 일을 분명히 나타 내기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="1d37566e826663dd236669ec8c0a538314d88d04" translate="yes" xml:space="preserve">
          <source>Note that the object will no longer be in the database, so be very careful what you do with this instance.</source>
          <target state="translated">오브젝트가 더 이상 데이터베이스에 없으므로이 인스턴스로 수행하는 작업에 매우주의하십시오.</target>
        </trans-unit>
        <trans-unit id="6cb9b339d54209535bd6dcb521d136ae0891eda7" translate="yes" xml:space="preserve">
          <source>Note that the order in which fixture files are processed is undefined. However, all fixture data is installed as a single transaction, so data in one fixture can reference data in another fixture. If the database backend supports row-level constraints, these constraints will be checked at the end of the transaction.</source>
          <target state="translated">조명기 파일이 처리되는 순서는 정의되어 있지 않습니다. 그러나 모든 조명기 데이터는 단일 트랜잭션으로 설치되므로 한 조명기의 데이터는 다른 조명기의 데이터를 참조 할 수 있습니다. 데이터베이스 백엔드가 행 레벨 제한 조건을 지원하는 경우 트랜잭션이 끝날 때 이러한 제한 조건이 점검됩니다.</target>
        </trans-unit>
        <trans-unit id="cb80071655e1d9fbbd4b908b7ff6b7de62de9971" translate="yes" xml:space="preserve">
          <source>Note that the order of &lt;a href=&quot;../settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; matters. Generally, you can put &lt;a href=&quot;#django.contrib.flatpages.middleware.FlatpageFallbackMiddleware&quot;&gt;&lt;code&gt;FlatpageFallbackMiddleware&lt;/code&gt;&lt;/a&gt; at the end of the list. This means it will run first when processing the response, and ensures that any other response-processing middleware see the real flatpage response rather than the 404.</source>
          <target state="translated">&lt;a href=&quot;../settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt; 의 순서가 중요합니다. 일반적으로 &lt;a href=&quot;#django.contrib.flatpages.middleware.FlatpageFallbackMiddleware&quot;&gt; &lt;code&gt;FlatpageFallbackMiddleware&lt;/code&gt; &lt;/a&gt; 를 목록 끝에 놓을 수 있습니다 . 즉, 응답을 처리 할 때 먼저 실행되며 다른 응답 처리 미들웨어가 404가 아닌 실제 플랫 페이지 응답을 볼 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="08698ded25f56ec765d5763a05954e398b0131e4" translate="yes" xml:space="preserve">
          <source>Note that the order of &lt;a href=&quot;../settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; matters. Generally, you can put &lt;a href=&quot;#django.contrib.redirects.middleware.RedirectFallbackMiddleware&quot;&gt;&lt;code&gt;RedirectFallbackMiddleware&lt;/code&gt;&lt;/a&gt; at the end of the list, because it&amp;rsquo;s a last resort.</source>
          <target state="translated">&lt;a href=&quot;../settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt; 의 순서가 중요합니다. 일반적으로 &lt;a href=&quot;#django.contrib.redirects.middleware.RedirectFallbackMiddleware&quot;&gt; &lt;code&gt;RedirectFallbackMiddleware&lt;/code&gt; &lt;/a&gt; 는 마지막 수단이므로 목록 끝에 넣을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fef6bd3ebae4c1ec9ddd2798fe72b4fcf23c8784" translate="yes" xml:space="preserve">
          <source>Note that the parentheses required by most database engines around subqueries are not required in Django&amp;rsquo;s &lt;code&gt;select&lt;/code&gt; clauses. Also note that some database backends, such as some MySQL versions, don&amp;rsquo;t support subqueries.</source>
          <target state="translated">Django의 &lt;code&gt;select&lt;/code&gt; 절 에는 서브 쿼리 주변의 대부분의 데이터베이스 엔진에 필요한 괄호가 필요하지 않습니다 . 또한 일부 MySQL 버전과 같은 일부 데이터베이스 백엔드는 하위 쿼리를 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="cfc63e63ecf8ac2eb2e30b758738319acc47dd43" translate="yes" xml:space="preserve">
          <source>Note that the queries generated in object deletion is an implementation detail subject to change.</source>
          <target state="translated">객체 삭제에서 생성 된 쿼리는 구현 세부 사항이며 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="08ece2bb01374f6040408665502dabf3bdbfee50" translate="yes" xml:space="preserve">
          <source>Note that the result cache of the primary &lt;code&gt;QuerySet&lt;/code&gt; and all specified related objects will then be fully loaded into memory. This changes the typical behavior of &lt;code&gt;QuerySets&lt;/code&gt;, which normally try to avoid loading all objects into memory before they are needed, even after a query has been executed in the database.</source>
          <target state="translated">그런 다음 기본 &lt;code&gt;QuerySet&lt;/code&gt; 의 결과 캐시 와 지정된 모든 관련 객체가 메모리에 완전히로드됩니다. 이렇게하면 &lt;code&gt;QuerySets&lt;/code&gt; 의 일반적인 동작이 변경 되는데 , 일반적으로 데이터베이스에서 쿼리가 실행 된 후에도 필요한 모든 객체를 메모리에로드하지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="aa58b675144be5fd04bd425ca97fc559b052e8eb" translate="yes" xml:space="preserve">
          <source>Note that the return code for the test-runner script is 1 for any number of failed and erroneous tests. If all the tests pass, the return code is 0. This feature is useful if you&amp;rsquo;re using the test-runner script in a shell script and need to test for success or failure at that level.</source>
          <target state="translated">테스트 실행기 스크립트의 리턴 코드는 실패하고 잘못된 테스트 수에 관계없이 1입니다. 모든 테스트가 통과되면 리턴 코드는 0입니다.이 기능은 쉘 스크립트에서 테스트 실행기 스크립트를 사용하고 해당 레벨에서 성공 또는 실패를 테스트해야하는 경우에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="d50fd012ff22d54624835fa78fdc60e01d630190" translate="yes" xml:space="preserve">
          <source>Note that the session cookie is only sent when a session has been created or modified. If &lt;a href=&quot;../../ref/settings#std:setting-SESSION_SAVE_EVERY_REQUEST&quot;&gt;&lt;code&gt;SESSION_SAVE_EVERY_REQUEST&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;, the session cookie will be sent on every request.</source>
          <target state="translated">세션 쿠키는 세션이 생성되거나 수정 된 경우에만 전송됩니다. &lt;a href=&quot;../../ref/settings#std:setting-SESSION_SAVE_EVERY_REQUEST&quot;&gt; &lt;code&gt;SESSION_SAVE_EVERY_REQUEST&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;True&lt;/code&gt; 인 경우 모든 요청시 세션 쿠키가 전송됩니다.</target>
        </trans-unit>
        <trans-unit id="5a3066deed15c333016258a7e176bfa5fbe7bff4" translate="yes" xml:space="preserve">
          <source>Note that the test client is not intended to be a replacement for &lt;a href=&quot;http://seleniumhq.org/&quot;&gt;Selenium&lt;/a&gt; or other &amp;ldquo;in-browser&amp;rdquo; frameworks. Django&amp;rsquo;s test client has a different focus. In short:</source>
          <target state="translated">테스트 클라이언트는 &lt;a href=&quot;http://seleniumhq.org/&quot;&gt;Selenium&lt;/a&gt; 또는 기타 &quot;브라우저 내&quot;프레임 워크를 대체하기위한 것이 아닙니다 . Django의 테스트 클라이언트는 다른 초점을 가지고 있습니다. 한마디로 :</target>
        </trans-unit>
        <trans-unit id="e7c15fa6899ee16f22c2f3eebad5d4575601d120" translate="yes" xml:space="preserve">
          <source>Note that there also is a &lt;a href=&quot;#django.forms.MultipleHiddenInput&quot;&gt;&lt;code&gt;MultipleHiddenInput&lt;/code&gt;&lt;/a&gt; widget that encapsulates a set of hidden input elements.</source>
          <target state="translated">숨겨진 입력 요소 세트를 캡슐화하는 &lt;a href=&quot;#django.forms.MultipleHiddenInput&quot;&gt; &lt;code&gt;MultipleHiddenInput&lt;/code&gt; &lt;/a&gt; 위젯 도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f3dc5df00a8e3e730c40fe838d9cf28eedc30a0f" translate="yes" xml:space="preserve">
          <source>Note that there are a number of &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.bulk_create&quot;&gt;&lt;code&gt;caveats to this method&lt;/code&gt;&lt;/a&gt;, so make sure it&amp;rsquo;s appropriate for your use case.</source>
          <target state="translated">&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.bulk_create&quot;&gt; &lt;code&gt;caveats to this method&lt;/code&gt; &lt;/a&gt; 에는 몇 가지 주의 사항이 있으므로 사용 사례에 적합한 지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="ed11446b0c6e152b1bcc9ce1866f87a0033a7c22" translate="yes" xml:space="preserve">
          <source>Note that there are a number of &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.bulk_update&quot;&gt;&lt;code&gt;caveats to this method&lt;/code&gt;&lt;/a&gt;, so make sure it&amp;rsquo;s appropriate for your use case.</source>
          <target state="translated">&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.bulk_update&quot;&gt; &lt;code&gt;caveats to this method&lt;/code&gt; &lt;/a&gt; 에는 몇 가지 주의 사항이 있으므로 사용 사례에 적합한 지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="ec4883b6f62b2a123fc0b302f2c2ef4d90d01466" translate="yes" xml:space="preserve">
          <source>Note that there is a difference between using &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt;, and using &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt; with a slice of &lt;code&gt;[0]&lt;/code&gt;. If there are no results that match the query, &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; will raise a &lt;code&gt;DoesNotExist&lt;/code&gt; exception. This exception is an attribute of the model class that the query is being performed on - so in the code above, if there is no &lt;code&gt;Entry&lt;/code&gt; object with a primary key of 1, Django will raise &lt;code&gt;Entry.DoesNotExist&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt; 사용 과 &lt;code&gt;[0]&lt;/code&gt; 슬라이스로 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;/a&gt; 사용 사이에는 차이가 있습니다. 쿼리와 일치하는 결과가 없으면 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt; 은 &lt;code&gt;DoesNotExist&lt;/code&gt; 예외를 발생시킵니다. 이 예외는 쿼리가 수행되는 모델 클래스의 속성이므로 위의 코드 에서 기본 키가 1 인 &lt;code&gt;Entry&lt;/code&gt; 객체 가 없으면 Django는 &lt;code&gt;Entry.DoesNotExist&lt;/code&gt; 를 발생시킵니다 .</target>
        </trans-unit>
        <trans-unit id="e083cac1d45447670947e2765f04c7f401bd320c" translate="yes" xml:space="preserve">
          <source>Note that there is an extra &amp;ldquo;Delete?&amp;rdquo; column that allows removing rows added using the &amp;ldquo;Add Another Choice&amp;rdquo; button and rows that have already been saved.</source>
          <target state="translated">여분의 &quot;삭제&quot;가 있습니다. &amp;ldquo;Add Another Choice&amp;rdquo;버튼을 사용하여 추가 한 행과 이미 저장된 행을 제거 할 수있는 열.</target>
        </trans-unit>
        <trans-unit id="d2130933d4a7a35839fd38a445d7757805cf2913" translate="yes" xml:space="preserve">
          <source>Note that there&amp;rsquo;s no need to specify the keyword argument of the model that defines the relationship. In the above example, we don&amp;rsquo;t pass the parameter &lt;code&gt;blog&lt;/code&gt; to &lt;code&gt;create()&lt;/code&gt;. Django figures out that the new &lt;code&gt;Entry&lt;/code&gt; object&amp;rsquo;s &lt;code&gt;blog&lt;/code&gt; field should be set to &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="translated">관계를 정의하는 모델의 키워드 인수를 지정할 필요가 없습니다. 위의 예에서 매개 변수 &lt;code&gt;blog&lt;/code&gt; 를 &lt;code&gt;create()&lt;/code&gt; 로 전달하지 않습니다 . Django는 새로운 &lt;code&gt;Entry&lt;/code&gt; 객체의 &lt;code&gt;blog&lt;/code&gt; 필드가 &lt;code&gt;b&lt;/code&gt; 로 설정되어야 함을 알아 냈습니다 .</target>
        </trans-unit>
        <trans-unit id="2477290a913291cbc38ebf667d64085a6083a034" translate="yes" xml:space="preserve">
          <source>Note that these are &lt;em&gt;partial&lt;/em&gt; matches. &lt;code&gt;'PASS'&lt;/code&gt; will also match PASSWORD, just as &lt;code&gt;'TOKEN'&lt;/code&gt; will also match TOKENIZED and so on.</source>
          <target state="translated">이들은 &lt;em&gt;부분적으로&lt;/em&gt; 일치합니다. &lt;code&gt;'PASS'&lt;/code&gt; &lt;code&gt;'TOKEN'&lt;/code&gt; 도 TOKENIZED 등과 일치하는 것처럼 'PASS' 도 PASSWORD 와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="e1fc5fa3e855f806a565c439909e116dd3591f60" translate="yes" xml:space="preserve">
          <source>Note that these paths should use Unix-style forward slashes, even on Windows (e.g. &lt;code&gt;&quot;C:/Users/user/mysite/extra_static_content&quot;&lt;/code&gt;).</source>
          <target state="translated">이러한 경로는 Windows에서도 유닉스 스타일 슬래시를 사용해야합니다 (예 : &lt;code&gt;&quot;C:/Users/user/mysite/extra_static_content&quot;&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="795b6608e8468ba6ef747bf20d7df8c092e409b7" translate="yes" xml:space="preserve">
          <source>Note that these paths should use Unix-style forward slashes, even on Windows.</source>
          <target state="translated">이 경로는 Windows에서도 유닉스 스타일 슬래시를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="2cf35c103d926ddc769c79ec834723110b7dd384" translate="yes" xml:space="preserve">
          <source>Note that this HTML version of the email contains a full traceback, with names and values of local variables at each level of the stack, plus the values of your Django settings. This information is potentially very sensitive, and you may not want to send it over email. Consider using something such as &lt;a href=&quot;https://pypi.org/project/sentry/&quot;&gt;Sentry&lt;/a&gt; to get the best of both worlds &amp;ndash; the rich information of full tracebacks plus the security of &lt;em&gt;not&lt;/em&gt; sending the information over email. You may also explicitly designate certain sensitive information to be filtered out of error reports &amp;ndash; learn more on &lt;a href=&quot;../howto/error-reporting#filtering-error-reports&quot;&gt;Filtering error reports&lt;/a&gt;.</source>
          <target state="translated">이 HTML 버전의 전자 메일에는 스택의 각 수준에서 로컬 변수의 이름과 값 및 Django 설정 값이 포함 된 전체 역 추적 기능이 포함되어 있습니다. 이 정보는 잠재적으로 매우 중요하므로 이메일을 통해 보내지 않을 수 있습니다. &lt;a href=&quot;https://pypi.org/project/sentry/&quot;&gt;Sentry&lt;/a&gt; 와 같은 것을 사용하여 완전한 역 추적에 대한 풍부한 정보와 이메일을 통해 정보를 보내지 &lt;em&gt;않는&lt;/em&gt; 보안 등 두 가지 이점 을 최대한 활용하십시오 . 특정 민감한 정보를 명시 적으로 지정하여 오류 보고서에서 &lt;a href=&quot;../howto/error-reporting#filtering-error-reports&quot;&gt;필터링&lt;/a&gt; 할 수도 있습니다 . 오류 보고서 필터링에 대해 자세히 알아보십시오 .</target>
        </trans-unit>
        <trans-unit id="8a3d1d6be0677336f3c4ce808049c72f672b6643" translate="yes" xml:space="preserve">
          <source>Note that this checks only for the existence of a given key, not that the value of a key is non-empty.</source>
          <target state="translated">이것은 키의 값이 비어 있지 않은 것이 아니라 주어진 키의 존재 여부 만 검사합니다.</target>
        </trans-unit>
        <trans-unit id="0bbb736bbd29d6ee2584aa607cfd01a5217b40a3" translate="yes" xml:space="preserve">
          <source>Note that this equivalent to:</source>
          <target state="translated">이것은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="dba99c12af9dce2149cb16de622b8b3d2a6c2aad" translate="yes" xml:space="preserve">
          <source>Note that this is different than &lt;a href=&quot;#django.db.models.Field.null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;#django.db.models.Field.null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; is purely database-related, whereas &lt;a href=&quot;#django.db.models.Field.blank&quot;&gt;&lt;code&gt;blank&lt;/code&gt;&lt;/a&gt; is validation-related. If a field has &lt;code&gt;blank=True&lt;/code&gt;, form validation will allow entry of an empty value. If a field has &lt;code&gt;blank=False&lt;/code&gt;, the field will be required.</source>
          <target state="translated">이것은 &lt;a href=&quot;#django.db.models.Field.null&quot;&gt; &lt;code&gt;null&lt;/code&gt; 과&lt;/a&gt; 는 다릅니다 . &lt;a href=&quot;#django.db.models.Field.null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt; 은 순전히 데이터베이스 관련이지만 &lt;a href=&quot;#django.db.models.Field.blank&quot;&gt; &lt;code&gt;blank&lt;/code&gt; &lt;/a&gt; 는 유효성 검사 관련입니다. 필드가 &lt;code&gt;blank=True&lt;/code&gt; 인 경우 양식 유효성 검증은 빈 값을 입력 할 수있게합니다. 필드에 &lt;code&gt;blank=False&lt;/code&gt; 가 있으면 필드가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="e1a927a86b31c6fe256c0c201864b03e59d37343" translate="yes" xml:space="preserve">
          <source>Note that this is different than &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; is purely database-related, whereas &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.blank&quot;&gt;&lt;code&gt;blank&lt;/code&gt;&lt;/a&gt; is validation-related. If a field has &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.blank&quot;&gt;&lt;code&gt;blank=True&lt;/code&gt;&lt;/a&gt;, form validation will allow entry of an empty value. If a field has &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.blank&quot;&gt;&lt;code&gt;blank=False&lt;/code&gt;&lt;/a&gt;, the field will be required.</source>
          <target state="translated">이것은 &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.null&quot;&gt; &lt;code&gt;null&lt;/code&gt; 과&lt;/a&gt; 는 다릅니다 . &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt; 은 순전히 데이터베이스 관련이지만 &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.blank&quot;&gt; &lt;code&gt;blank&lt;/code&gt; &lt;/a&gt; 는 유효성 검사 관련입니다. 필드가 &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.blank&quot;&gt; &lt;code&gt;blank=True&lt;/code&gt; 인&lt;/a&gt; 경우 양식 유효성 검증은 빈 값을 입력 할 수있게합니다. 필드에 &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.blank&quot;&gt; &lt;code&gt;blank=False&lt;/code&gt; &lt;/a&gt; 가 있으면 필드가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="65807d9d49cf72ec77bf7a331d692c91fa7c9ef4" translate="yes" xml:space="preserve">
          <source>Note that this is not quite the same as slicing from the end of a sequence in Python. The above example will return the last item first, then the penultimate item and so on. If we had a Python sequence and looked at &lt;code&gt;seq[-5:]&lt;/code&gt;, we would see the fifth-last item first. Django doesn&amp;rsquo;t support that mode of access (slicing from the end), because it&amp;rsquo;s not possible to do it efficiently in SQL.</source>
          <target state="translated">이것은 파이썬에서 시퀀스의 끝에서 슬라이싱하는 것과 완전히 다릅니다. 위의 예는 마지막 항목을 먼저 반환 한 다음 두 번째 항목을 반환합니다. 파이썬 시퀀스를 가지고 있고 &lt;code&gt;seq[-5:]&lt;/code&gt; 를 보면, 다섯 번째 마지막 항목이 먼저 보일 것입니다. Django는 SQL에서 효율적으로 수행 할 수 없기 때문에 해당 액세스 모드 (끝에서 슬라이싱)를 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="bb0ad9f46efaf6ea73d6b6569c751fa30e6aab82" translate="yes" xml:space="preserve">
          <source>Note that this isn&amp;rsquo;t necessarily the time zone of the server. For example, one server may serve multiple Django-powered sites, each with a separate time zone setting.</source>
          <target state="translated">이것이 반드시 서버의 시간대는 아닙니다. 예를 들어, 한 대의 서버는 각각 별도의 시간대 설정이있는 여러 장고 사이트를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c953b63059173178458ed761fbedea0ac39027ac" translate="yes" xml:space="preserve">
          <source>Note that this only works given two things:</source>
          <target state="translated">이것은 두 가지 경우에만 작동합니다.</target>
        </trans-unit>
        <trans-unit id="43246198826a48db05dda06a13016417e496af6b" translate="yes" xml:space="preserve">
          <source>Note that this server does &lt;em&gt;not&lt;/em&gt; automatically detect changes to your Python source code (as &lt;a href=&quot;#django-admin-runserver&quot;&gt;&lt;code&gt;runserver&lt;/code&gt;&lt;/a&gt; does). It does, however, detect changes to templates.</source>
          <target state="translated">이 서버는 ( &lt;a href=&quot;#django-admin-runserver&quot;&gt; &lt;code&gt;runserver&lt;/code&gt; 와&lt;/a&gt; 마찬가지로) Python 소스 코드의 변경 사항을 자동으로 감지 하지 &lt;em&gt;않습니다&lt;/em&gt; . 그러나 템플릿 변경 사항은 감지합니다.</target>
        </trans-unit>
        <trans-unit id="77708f0489400a9d946be1d05b99670aa11a0f4b" translate="yes" xml:space="preserve">
          <source>Note that this value is &lt;em&gt;not&lt;/em&gt; HTML-escaped in automatically-generated forms. This lets you include HTML in &lt;a href=&quot;#django.db.models.Field.help_text&quot;&gt;&lt;code&gt;help_text&lt;/code&gt;&lt;/a&gt; if you so desire. For example:</source>
          <target state="translated">이 값은 자동 생성 양식에서 HTML 이스케이프 &lt;em&gt;되지 않습니다&lt;/em&gt; . 원하는 경우 &lt;a href=&quot;#django.db.models.Field.help_text&quot;&gt; &lt;code&gt;help_text&lt;/code&gt; 에&lt;/a&gt; HTML을 포함시킬 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="bcf38a05a5b6f4694b53daa8eea90c967fc370a2" translate="yes" xml:space="preserve">
          <source>Note that this value is &lt;em&gt;not&lt;/em&gt; HTML-escaped when it&amp;rsquo;s displayed in the admin interface. This lets you include HTML if you so desire. Alternatively you can use plain text and &lt;a href=&quot;../../utils#django.utils.html.escape&quot;&gt;&lt;code&gt;django.utils.html.escape()&lt;/code&gt;&lt;/a&gt; to escape any HTML special characters.</source>
          <target state="translated">이 값은 관리자 인터페이스에 표시 될 때 HTML 이스케이프 &lt;em&gt;되지 않습니다&lt;/em&gt; . 원하는 경우 HTML을 포함 할 수 있습니다. 또는 일반 텍스트와 &lt;a href=&quot;../../utils#django.utils.html.escape&quot;&gt; &lt;code&gt;django.utils.html.escape()&lt;/code&gt; &lt;/a&gt; 를 사용하여 HTML 특수 문자를 이스케이프 처리 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="906411ef03113b0636d2db25f54351b72fe13574" translate="yes" xml:space="preserve">
          <source>Note that unlike &lt;a href=&quot;#django.contrib.sessions.serializers.PickleSerializer&quot;&gt;&lt;code&gt;PickleSerializer&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&quot;#django.contrib.sessions.serializers.JSONSerializer&quot;&gt;&lt;code&gt;JSONSerializer&lt;/code&gt;&lt;/a&gt; cannot handle arbitrary Python data types. As is often the case, there is a trade-off between convenience and security. If you wish to store more advanced data types including &lt;code&gt;datetime&lt;/code&gt; and &lt;code&gt;Decimal&lt;/code&gt; in JSON backed sessions, you will need to write a custom serializer (or convert such values to a JSON serializable object before storing them in &lt;code&gt;request.session&lt;/code&gt;). While serializing these values is often straightforward (&lt;a href=&quot;../serialization#django.core.serializers.json.DjangoJSONEncoder&quot;&gt;&lt;code&gt;DjangoJSONEncoder&lt;/code&gt;&lt;/a&gt; may be helpful), writing a decoder that can reliably get back the same thing that you put in is more fragile. For example, you run the risk of returning a &lt;code&gt;datetime&lt;/code&gt; that was actually a string that just happened to be in the same format chosen for &lt;code&gt;datetime&lt;/code&gt;s).</source>
          <target state="translated">달리합니다 &lt;a href=&quot;#django.contrib.sessions.serializers.PickleSerializer&quot;&gt; &lt;code&gt;PickleSerializer&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;#django.contrib.sessions.serializers.JSONSerializer&quot;&gt; &lt;code&gt;JSONSerializer&lt;/code&gt; 가&lt;/a&gt; 임의의 파이썬 데이터 유형을 처리 할 수 없습니다. 종종 그렇듯이 편의성과 보안 사이에는 상충 관계가 있습니다. &lt;code&gt;datetime&lt;/code&gt; 및 &lt;code&gt;Decimal&lt;/code&gt; 을 포함한 고급 데이터 유형 을 JSON 지원 세션에 저장하려면 사용자 정의 직렬 변환기를 작성하거나 &lt;code&gt;request.session&lt;/code&gt; 에 저장하기 전에 이러한 값을 JSON 직렬화 가능 오브젝트로 변환해야합니다 . 이러한 값을 직렬화하는 것은 종종 간단하지만 ( &lt;a href=&quot;../serialization#django.core.serializers.json.DjangoJSONEncoder&quot;&gt; &lt;code&gt;DjangoJSONEncoder&lt;/code&gt; &lt;/a&gt; 가 도움이 될 수 있음), 넣은 것과 동일한 것을 안정적으로 되돌릴 수있는 디코더를 작성하는 것이 더 취약합니다. 예를 들어 &lt;code&gt;datetime&lt;/code&gt; 을 반환 할 위험이 있습니다.그것은 실제로 &lt;code&gt;datetime&lt;/code&gt; 선택된 것과 같은 형식으로 된 문자열이었습니다 ).</target>
        </trans-unit>
        <trans-unit id="702d81c03f196bf44f8bcd6b11a9b027b74ab4bb" translate="yes" xml:space="preserve">
          <source>Note that unlike a dictionary, &lt;code&gt;del&lt;/code&gt; doesn&amp;rsquo;t raise &lt;code&gt;KeyError&lt;/code&gt; if the header field doesn&amp;rsquo;t exist.</source>
          <target state="translated">사전과 달리 헤더 필드가 존재하지 않으면 &lt;code&gt;del&lt;/code&gt; 은 &lt;code&gt;KeyError&lt;/code&gt; 를 발생시키지 않습니다.</target>
        </trans-unit>
        <trans-unit id="66f752221b158da1f8b91ce1869204010b1f48ea" translate="yes" xml:space="preserve">
          <source>Note that using &lt;code&gt;YearInSchool.SENIOR&lt;/code&gt;, &lt;code&gt;YearInSchool['SENIOR']&lt;/code&gt;, or &lt;code&gt;YearInSchool('SR')&lt;/code&gt; to access or lookup enum members work as expected, as do the &lt;code&gt;.name&lt;/code&gt; and &lt;code&gt;.value&lt;/code&gt; properties on the members.</source>
          <target state="translated">사용하여 참고 &lt;code&gt;YearInSchool.SENIOR&lt;/code&gt; , &lt;code&gt;YearInSchool['SENIOR']&lt;/code&gt; 또는 &lt;code&gt;YearInSchool('SR')&lt;/code&gt; , 액세스 또는 예상대로 조회 ENUM 부재 일에이 같이 할 &lt;code&gt;.name&lt;/code&gt; 을 하고 &lt;code&gt;.value&lt;/code&gt; 멤버에 등록.</target>
        </trans-unit>
        <trans-unit id="f50008769d1a14e593867a6db9cdf9470058cdd6" translate="yes" xml:space="preserve">
          <source>Note that using &lt;code&gt;iterator()&lt;/code&gt; on a &lt;code&gt;QuerySet&lt;/code&gt; which has already been evaluated will force it to evaluate again, repeating the query.</source>
          <target state="translated">이미 평가 된 &lt;code&gt;QuerySet&lt;/code&gt; 에서 &lt;code&gt;iterator()&lt;/code&gt; 를 사용 하면 쿼리를 반복하여 다시 평가하게됩니다.</target>
        </trans-unit>
        <trans-unit id="f5a5705d4f4e4dba6360106b56cde3d815c0b93d" translate="yes" xml:space="preserve">
          <source>Note that we pass the &lt;code&gt;queryset&lt;/code&gt; argument in both the &lt;code&gt;POST&lt;/code&gt; and &lt;code&gt;GET&lt;/code&gt; cases in this example.</source>
          <target state="translated">이 예제 에서는 &lt;code&gt;POST&lt;/code&gt; 및 &lt;code&gt;GET&lt;/code&gt; 사례 모두 에서 &lt;code&gt;queryset&lt;/code&gt; 인수를 전달합니다 .</target>
        </trans-unit>
        <trans-unit id="fe5575ba32184ff281804a3e6ed550d830b3259c" translate="yes" xml:space="preserve">
          <source>Note that when &lt;code&gt;unique&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, you don&amp;rsquo;t need to specify &lt;a href=&quot;#django.db.models.Field.db_index&quot;&gt;&lt;code&gt;db_index&lt;/code&gt;&lt;/a&gt;, because &lt;code&gt;unique&lt;/code&gt; implies the creation of an index.</source>
          <target state="translated">때주의 &lt;code&gt;unique&lt;/code&gt; 입니다 &lt;code&gt;True&lt;/code&gt; , 당신이 지정할 필요가 없습니다 &lt;a href=&quot;#django.db.models.Field.db_index&quot;&gt; &lt;code&gt;db_index&lt;/code&gt; 을&lt;/a&gt; 하기 때문에, &lt;code&gt;unique&lt;/code&gt; 인덱스의 생성을 의미한다.</target>
        </trans-unit>
        <trans-unit id="39167b947707fbb5b9cf4b6e5a2e4668c034defb" translate="yes" xml:space="preserve">
          <source>Note that when a model is deleted, related files are not deleted. If you need to cleanup orphaned files, you&amp;rsquo;ll need to handle it yourself (for instance, with a custom management command that can be run manually or scheduled to run periodically via e.g. cron).</source>
          <target state="translated">모델이 삭제 될 때 관련 파일은 삭제되지 않습니다. 분리 된 파일을 정리해야하는 경우 직접 처리해야합니다 (예 : cron을 통해 수동으로 실행하거나 주기적으로 실행하도록 예약 할 수있는 사용자 지정 관리 명령 사용).</target>
        </trans-unit>
        <trans-unit id="719be46afabc795f700c5cdc4fb51623fb2f80af" translate="yes" xml:space="preserve">
          <source>Note that when deferred fields are accessed, the loading of the deferred field&amp;rsquo;s value happens through this method. Thus it is possible to customize the way deferred loading happens. The example below shows how one can reload all of the instance&amp;rsquo;s fields when a deferred field is reloaded:</source>
          <target state="translated">지연된 필드에 액세스 할 때 지연된 필드 값의로드는이 방법을 통해 발생합니다. 따라서 지연로드가 발생하는 방식을 사용자 정의 할 수 있습니다. 아래 예제는 지연된 필드를 다시로드 할 때 인스턴스의 모든 필드를 다시로드하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="94c1c16b5b2cd3f86c4031d357763da656691cbe" translate="yes" xml:space="preserve">
          <source>Note that when using this technique the &lt;a href=&quot;../../signals#django.db.models.signals.m2m_changed&quot;&gt;&lt;code&gt;m2m_changed&lt;/code&gt;&lt;/a&gt; signals aren&amp;rsquo;t triggered. This is because as far as the admin is concerned, &lt;code&gt;through&lt;/code&gt; is just a model with two foreign key fields rather than a many-to-many relation.</source>
          <target state="translated">이 기법을 사용할 때 &lt;a href=&quot;../../signals#django.db.models.signals.m2m_changed&quot;&gt; &lt;code&gt;m2m_changed&lt;/code&gt; &lt;/a&gt; 신호는 트리거되지 않습니다. 지금까지 관리자에 관한 한, 때문입니다 &lt;code&gt;through&lt;/code&gt; 두 개의 외래 키 필드 대신 다 대다 관계와 단지 모델입니다.</target>
        </trans-unit>
        <trans-unit id="b05fa36010992ac15dfe2760e5308fe656f763bc" translate="yes" xml:space="preserve">
          <source>Note that when you&amp;rsquo;re using &lt;code&gt;takes_context=True&lt;/code&gt;, there&amp;rsquo;s no need to pass arguments to the template tag. It automatically gets access to the context.</source>
          <target state="translated">&lt;code&gt;takes_context=True&lt;/code&gt; 를 사용 하는 경우 템플릿 태그에 인수를 전달할 필요가 없습니다. 컨텍스트에 자동으로 액세스합니다.</target>
        </trans-unit>
        <trans-unit id="79079404d7b87dcc164745f56a3bf81208b2cc17" translate="yes" xml:space="preserve">
          <source>Note that whenever you deal with uploaded files, you should pay close attention to where you&amp;rsquo;re uploading them and what type of files they are, to avoid security holes. &lt;em&gt;Validate all uploaded files&lt;/em&gt; so that you&amp;rsquo;re sure the files are what you think they are. For example, if you blindly let somebody upload files, without validation, to a directory that&amp;rsquo;s within your Web server&amp;rsquo;s document root, then somebody could upload a CGI or PHP script and execute that script by visiting its URL on your site. Don&amp;rsquo;t allow that.</source>
          <target state="translated">업로드 된 파일을 다룰 때마다 보안 허점을 피하기 위해 파일을 업로드하는 위치와 파일 형식에주의를 기울여야합니다. &lt;em&gt;업로드 한 모든 파일의 유효성을 검사&lt;/em&gt; 하여 파일이 생각한 것과 같은지 확인하십시오. 예를 들어, 웹 서버의 문서 루트 내에있는 디렉토리에 유효성 검사없이 파일을 맹목적으로 업로드하도록 허용 한 경우 누군가는 CGI 또는 PHP 스크립트를 업로드하고 해당 사이트의 URL을 방문하여 해당 스크립트를 실행할 수 있습니다. 허용하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="39f8400a649c5d93c855cdc636e888afa63eb937" translate="yes" xml:space="preserve">
          <source>Note that where the password is passed to one of these functions, this should always be the clear text password - not a hashed password.</source>
          <target state="translated">암호가 이러한 기능 중 하나에 전달되는 경우 항상 해시 암호가 아닌 일반 텍스트 암호 여야합니다.</target>
        </trans-unit>
        <trans-unit id="d093d349e1d459362f8b4a2b1a67b11670c43223" translate="yes" xml:space="preserve">
          <source>Note that while you can &lt;em&gt;define&lt;/em&gt; a custom manager on the abstract model, you can&amp;rsquo;t &lt;em&gt;invoke&lt;/em&gt; any methods using the abstract model. That is:</source>
          <target state="translated">당신이 할 수있는 동안 참고 것을 &lt;em&gt;정의하는&lt;/em&gt; 추상 모델에서 사용자 정의 관리자를, 당신은 할 수 &lt;em&gt;호출&lt;/em&gt; 추상 모델을 사용하는 방법을. 그건:</target>
        </trans-unit>
        <trans-unit id="3265dff3dd371813ef80cf218a365cc918b03a70" translate="yes" xml:space="preserve">
          <source>Note that you can backslash-escape a format string if you want to use the &amp;ldquo;raw&amp;rdquo; value. In this example, both &amp;ldquo;h&amp;rdquo; and &amp;ldquo;m&amp;rdquo; are backslash-escaped, because otherwise each is a format string that displays the hour and the month, respectively:</source>
          <target state="translated">&quot;원시&quot;값을 사용하려는 경우 형식 문자열을 백 슬래시 이스케이프 할 수 있습니다. 이 예에서 &quot;h&quot;와 &quot;m&quot;은 백 슬래시 이스케이프 처리됩니다. 그렇지 않으면 각각 시간과 월을 표시하는 형식 문자열이기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="7476fdc821a56bd47f0eda1f0b41d488383e4103" translate="yes" xml:space="preserve">
          <source>Note that you can backslash-escape a format string if you want to use the &amp;ldquo;raw&amp;rdquo; value. In this example, both &amp;ldquo;o&amp;rdquo; and &amp;ldquo;f&amp;rdquo; are backslash-escaped, because otherwise each is a format string that displays the year and the time, respectively:</source>
          <target state="translated">&quot;원시&quot;값을 사용하려는 경우 형식 문자열을 백 슬래시 이스케이프 할 수 있습니다. 이 예에서&amp;ldquo;o&amp;rdquo;와&amp;ldquo;f&amp;rdquo;는 백 슬래시로 이스케이프 처리됩니다. 그렇지 않으면 각각 연도와 시간을 표시하는 형식 문자열이기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="4f73d7dc009cf6ecb0d2dc25b668df5cadd84847" translate="yes" xml:space="preserve">
          <source>Note that you can give &lt;code&gt;Paginator&lt;/code&gt; a list/tuple, a Django &lt;code&gt;QuerySet&lt;/code&gt;, or any other object with a &lt;code&gt;count()&lt;/code&gt; or &lt;code&gt;__len__()&lt;/code&gt; method. When determining the number of objects contained in the passed object, &lt;code&gt;Paginator&lt;/code&gt; will first try calling &lt;code&gt;count()&lt;/code&gt;, then fallback to using &lt;code&gt;len()&lt;/code&gt; if the passed object has no &lt;code&gt;count()&lt;/code&gt; method. This allows objects such as Django&amp;rsquo;s &lt;code&gt;QuerySet&lt;/code&gt; to use a more efficient &lt;code&gt;count()&lt;/code&gt; method when available.</source>
          <target state="translated">당신이 줄 수있는 참고 &lt;code&gt;Paginator&lt;/code&gt; 리스트 / 튜플, 장고 &lt;code&gt;QuerySet&lt;/code&gt; A를, 또는 다른 개체 &lt;code&gt;count()&lt;/code&gt; 또는 &lt;code&gt;__len__()&lt;/code&gt; 메소드를. 전달 된 오브젝트에 포함 된 오브젝트 수를 판별 할 때 &lt;code&gt;Paginator&lt;/code&gt; 는 먼저 &lt;code&gt;count()&lt;/code&gt; 호출을 시도한 다음 전달 된 오브젝트에 &lt;code&gt;count()&lt;/code&gt; 메소드 가없는 경우 &lt;code&gt;len()&lt;/code&gt; 사용으로 폴백합니다 . 이를 통해 Django의 &lt;code&gt;QuerySet&lt;/code&gt; 과 같은 객체는 사용 가능한 경우보다 효율적인 &lt;code&gt;count()&lt;/code&gt; 메서드를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9e42e9704f036f9a6dfea5bd7eeae341bb89a4c9" translate="yes" xml:space="preserve">
          <source>Note that you can redirect standard output and error streams as all commands support the &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; options. For example, you could write:</source>
          <target state="translated">모든 명령이 &lt;code&gt;stdout&lt;/code&gt; 및 &lt;code&gt;stderr&lt;/code&gt; 옵션을 지원하므로 표준 출력 및 오류 스트림을 리디렉션 할 수 있습니다. 예를 들어 다음과 같이 쓸 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="28f96228f714507e7175e473320352a2987351be" translate="yes" xml:space="preserve">
          <source>Note that you can use the decorators in conjunction with the middleware. Use of a decorator overrides the middleware.</source>
          <target state="translated">미들웨어와 함께 데코레이터를 사용할 수 있습니다. 데코레이터를 사용하면 미들웨어보다 우선합니다.</target>
        </trans-unit>
        <trans-unit id="b96ab2ffca51fc0d415d2ea2c91ff51267bb654f" translate="yes" xml:space="preserve">
          <source>Note that you don&amp;rsquo;t have to use Django&amp;rsquo;s template system if you prefer another system. While Django&amp;rsquo;s template system is particularly well-integrated with Django&amp;rsquo;s model layer, nothing forces you to use it. For that matter, you don&amp;rsquo;t have to use Django&amp;rsquo;s database API, either. You can use another database abstraction layer, you can read XML files, you can read files off disk, or anything you want. Each piece of Django &amp;ndash; models, views, templates &amp;ndash; is decoupled from the next.</source>
          <target state="translated">다른 시스템을 선호한다면 Django의 템플릿 시스템을 사용할 필요가 없습니다. Django의 템플릿 시스템은 Django의 모델 레이어와 특히 잘 통합되어 있지만 사용하지 않아도됩니다. 이를 위해 Django의 데이터베이스 API를 사용할 필요가 없습니다. 다른 데이터베이스 추상화 계층을 사용하거나 XML 파일을 읽거나 디스크에서 파일을 읽거나 원하는 항목을 읽을 수 있습니다. Django의 각 부분 (모델, 뷰, 템플릿)은 다음과 분리됩니다.</target>
        </trans-unit>
        <trans-unit id="f31c5c5b9d42b1077c8970e03ed8c44f9ddad790" translate="yes" xml:space="preserve">
          <source>Note that you may not want autodiscovery of &lt;code&gt;admin&lt;/code&gt; modules when using your own &lt;code&gt;AdminSite&lt;/code&gt; instance since you will likely be importing all the per-app &lt;code&gt;admin&lt;/code&gt; modules in your &lt;code&gt;myproject.admin&lt;/code&gt; module. This means you need to put &lt;code&gt;'django.contrib.admin.apps.SimpleAdminConfig'&lt;/code&gt; instead of &lt;code&gt;'django.contrib.admin'&lt;/code&gt; in your &lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">&lt;code&gt;myproject.admin&lt;/code&gt; 모듈의 모든 앱별 &lt;code&gt;admin&lt;/code&gt; 모듈을 가져 오기 때문에 자체 &lt;code&gt;AdminSite&lt;/code&gt; 인스턴스를 사용할 때 &lt;code&gt;admin&lt;/code&gt; 모듈의 자동 검색을 원하지 않을 수 있습니다 . 이 방법은 당신이 둘 필요 &lt;code&gt;'django.contrib.admin.apps.SimpleAdminConfig'&lt;/code&gt; 대신 &lt;code&gt;'django.contrib.admin'&lt;/code&gt; 당신의 &lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; 의&lt;/a&gt; 설정.</target>
        </trans-unit>
        <trans-unit id="21df1330fbaf74e0680f4452a5609d54fd10fa1a" translate="yes" xml:space="preserve">
          <source>Note that you must save an object before it can be assigned to a foreign key relationship. For example, creating an &lt;code&gt;Article&lt;/code&gt; with unsaved &lt;code&gt;Reporter&lt;/code&gt; raises &lt;code&gt;ValueError&lt;/code&gt;:</source>
          <target state="translated">외래 키 관계에 할당되기 전에 객체를 저장해야합니다. 예를 들어, 생성 &lt;code&gt;Article&lt;/code&gt; 저장되지 않은와 &lt;code&gt;Reporter&lt;/code&gt; 제기 &lt;code&gt;ValueError&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="376f6d08577acaa494289e31892d8f4bc49a71b1" translate="yes" xml:space="preserve">
          <source>Note that you must save an object before it can be assigned to a one-to-one relationship. For example, creating a &lt;code&gt;Restaurant&lt;/code&gt; with unsaved &lt;code&gt;Place&lt;/code&gt; raises &lt;code&gt;ValueError&lt;/code&gt;:</source>
          <target state="translated">일대일 관계에 개체를 할당하기 전에 개체를 저장해야합니다. 예를 들어, 저장되지 않은 &lt;code&gt;Place&lt;/code&gt; 가 있는 &lt;code&gt;Restaurant&lt;/code&gt; 을 만들면 &lt;code&gt;ValueError&lt;/code&gt; 가 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="3aa4492251f1f89b7d1b67c82923a765943b8b96" translate="yes" xml:space="preserve">
          <source>Note that you set &lt;code&gt;feed_type&lt;/code&gt; to a class object, not an instance.</source>
          <target state="translated">&lt;code&gt;feed_type&lt;/code&gt; 을 인스턴스가 아닌 클래스 객체로 설정 합니다.</target>
        </trans-unit>
        <trans-unit id="41780517e58575ae1fd4b7cf13682bde6c859248" translate="yes" xml:space="preserve">
          <source>Note that you&amp;rsquo;ll have to provide the surrounding &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; elements yourself.</source>
          <target state="translated">주변의 &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; 또는 &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; 요소를 직접 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="739a26284bb028620f19294b60895ab661309c8a" translate="yes" xml:space="preserve">
          <source>Note that you&amp;rsquo;ll need to call &lt;a href=&quot;#django.contrib.sessions.base_session.AbstractBaseSession.get_decoded&quot;&gt;&lt;code&gt;get_decoded()&lt;/code&gt;&lt;/a&gt; to get the session dictionary. This is necessary because the dictionary is stored in an encoded format:</source>
          <target state="translated">세션 사전을 가져 오려면 &lt;a href=&quot;#django.contrib.sessions.base_session.AbstractBaseSession.get_decoded&quot;&gt; &lt;code&gt;get_decoded()&lt;/code&gt; &lt;/a&gt; 를 호출해야합니다 . 사전은 인코딩 된 형식으로 저장되므로 필요합니다.</target>
        </trans-unit>
        <trans-unit id="5764965c279a49130b8ab3f921987b56c15bcdef" translate="yes" xml:space="preserve">
          <source>Note that, with static (middleware-less) translation, the language is in &lt;code&gt;settings.LANGUAGE_CODE&lt;/code&gt;, while with dynamic (middleware) translation, it&amp;rsquo;s in &lt;code&gt;request.LANGUAGE_CODE&lt;/code&gt;.</source>
          <target state="translated">정적 (미들웨어가없는) 번역의 경우 언어는 &lt;code&gt;settings.LANGUAGE_CODE&lt;/code&gt; 에 있고 동적 (미들웨어) 번역의 경우 &lt;code&gt;request.LANGUAGE_CODE&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="285f98e8d01e4962eff6724b78a3c6724d0931e6" translate="yes" xml:space="preserve">
          <source>Note that:</source>
          <target state="translated">참고 :</target>
        </trans-unit>
        <trans-unit id="2c5683f35f8382bf853d6c54b47a1958d38402e3" translate="yes" xml:space="preserve">
          <source>Note the &lt;code&gt;list()&lt;/code&gt; call around the Blog &lt;code&gt;QuerySet&lt;/code&gt; to force execution of the first query. Without it, a nested query would be executed, because &lt;a href=&quot;../../topics/db/queries#querysets-are-lazy&quot;&gt;QuerySets are lazy&lt;/a&gt;.</source>
          <target state="translated">첫 번째 쿼리를 강제로 실행 하려면 블로그 &lt;code&gt;QuerySet&lt;/code&gt; 주위 의 &lt;code&gt;list()&lt;/code&gt; 호출에 유의하십시오 . &lt;a href=&quot;../../topics/db/queries#querysets-are-lazy&quot;&gt;그렇지 않으면 QuerySets가 게으 르기&lt;/a&gt; 때문에 중첩 쿼리가 실행 됩니다.</target>
        </trans-unit>
        <trans-unit id="50042f95afef19ddcee485ac7f7b1bcf7743b564" translate="yes" xml:space="preserve">
          <source>Note the &lt;code&gt;pk&lt;/code&gt; named group, which &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin.get_object&quot;&gt;&lt;code&gt;get_object()&lt;/code&gt;&lt;/a&gt; uses to look up the &lt;code&gt;Author&lt;/code&gt; instance. You could also use a slug, or any of the other features of &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt;&lt;code&gt;SingleObjectMixin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin.get_object&quot;&gt; &lt;code&gt;get_object()&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;Author&lt;/code&gt; 인스턴스 를 조회하는 데 사용 하는 &lt;code&gt;pk&lt;/code&gt; named group을 참고하십시오 . 슬러그 또는 &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt; &lt;code&gt;SingleObjectMixin&lt;/code&gt; &lt;/a&gt; 의 다른 기능을 사용할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1548150f65982792369c241ae984f2b20c5090cc" translate="yes" xml:space="preserve">
          <source>Note the addition of &lt;code&gt;import datetime&lt;/code&gt; and &lt;code&gt;from django.utils import
timezone&lt;/code&gt;, to reference Python&amp;rsquo;s standard &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#module-datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; module and Django&amp;rsquo;s time-zone-related utilities in &lt;a href=&quot;../ref/utils#module-django.utils.timezone&quot;&gt;&lt;code&gt;django.utils.timezone&lt;/code&gt;&lt;/a&gt;, respectively. If you aren&amp;rsquo;t familiar with time zone handling in Python, you can learn more in the &lt;a href=&quot;../topics/i18n/timezones&quot;&gt;time zone support docs&lt;/a&gt;.</source>
          <target state="translated">의 추가 참고 &lt;code&gt;import datetime&lt;/code&gt; 및 &lt;code&gt;from django.utils import timezone&lt;/code&gt; 파이썬의 표준 참조하려면 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#module-datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt; 에 모듈과 장고의 시간대 관련 유틸리티를 &lt;a href=&quot;../ref/utils#module-django.utils.timezone&quot;&gt; &lt;code&gt;django.utils.timezone&lt;/code&gt; &lt;/a&gt; 각각. 파이썬에서 표준 시간대 처리에 익숙하지 않다면 &lt;a href=&quot;../topics/i18n/timezones&quot;&gt;표준 시간대 지원 문서&lt;/a&gt; 에서 더 많은 것을 배울 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="36e778e75c22dd51e685a8060e6bf755ecbdde51" translate="yes" xml:space="preserve">
          <source>Note the first query will match &lt;code&gt;'Beatles Blog'&lt;/code&gt;, &lt;code&gt;'beatles blog'&lt;/code&gt;, &lt;code&gt;'BeAtLes BLoG'&lt;/code&gt;, etc.</source>
          <target state="translated">첫 번째 쿼리는 &lt;code&gt;'Beatles Blog'&lt;/code&gt; , &lt;code&gt;'beatles blog'&lt;/code&gt; , &lt;code&gt;'BeAtLes BLoG'&lt;/code&gt; 등과 일치합니다 .</target>
        </trans-unit>
        <trans-unit id="20d78a8e421517dfc8501178399cb2a435e63306" translate="yes" xml:space="preserve">
          <source>Note the following:</source>
          <target state="translated">다음에 유의하십시오.</target>
        </trans-unit>
        <trans-unit id="4270a55c8d2d5be21936635e96658dc1d9f116f5" translate="yes" xml:space="preserve">
          <source>Note the second example is more restrictive.</source>
          <target state="translated">두 번째 예는 더 제한적입니다.</target>
        </trans-unit>
        <trans-unit id="f90cc3f74d38c8aecec6b1b3c2cf127ed6722f4d" translate="yes" xml:space="preserve">
          <source>Note there is a race condition if you allow objects to be created while this migration is running. Objects created after the &lt;code&gt;AddField&lt;/code&gt; and before &lt;code&gt;RunPython&lt;/code&gt; will have their original &lt;code&gt;uuid&lt;/code&gt;&amp;rsquo;s overwritten.</source>
          <target state="translated">이 마이그레이션이 실행되는 동안 개체를 만들 수있게하려면 경쟁 조건이 있습니다. 애프터 만든 개체 &lt;code&gt;AddField&lt;/code&gt; 및 이전 &lt;code&gt;RunPython&lt;/code&gt; 원래의 것 &lt;code&gt;uuid&lt;/code&gt; 의 덮어 쓰기를.</target>
        </trans-unit>
        <trans-unit id="e57ad67f321891403673ac74379faf842d068ac0" translate="yes" xml:space="preserve">
          <source>Note this doesn&amp;rsquo;t delete the related objects &amp;ndash; it just disassociates them.</source>
          <target state="translated">이것은 관련 개체를 삭제하는 것이 아니라 연결을 해제하기 만합니다.</target>
        </trans-unit>
        <trans-unit id="1e1c648f6363a79666bda4022f326dccc253cf89" translate="yes" xml:space="preserve">
          <source>Note this will match any record with a &lt;code&gt;pub_date&lt;/code&gt; that falls on a Monday (day 2 of the week), regardless of the month or year in which it occurs. Week days are indexed with day 1 being Sunday and day 7 being Saturday.</source>
          <target state="translated">이는 월 또는 연도에 상관없이 월요일 (요일 2 일)에 해당 하는 &lt;code&gt;pub_date&lt;/code&gt; 의 모든 레코드와 일치 합니다. 요일은 1 일이 일요일이고 7 일이 토요일 인 것으로 색인됩니다.</target>
        </trans-unit>
        <trans-unit id="e6eb4a1725fee4458ebd4aae91065f1733dbed3c" translate="yes" xml:space="preserve">
          <source>Note this will match any record with a pub_date on the third day of the month, such as January 3, July 3, etc.</source>
          <target state="translated">이는 1 월 3 일, 7 월 3 일 등 3 월 3 일에 pub_date와 일치하는 레코드와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="91a2cf41eebcf0cbbe41c2fed03384b950262468" translate="yes" xml:space="preserve">
          <source>Note this will match the headline &lt;code&gt;'Lennon honored today'&lt;/code&gt; but not &lt;code&gt;'lennon
honored today'&lt;/code&gt;.</source>
          <target state="translated">이는 &lt;code&gt;'Lennon honored today'&lt;/code&gt; 라는 제목과 일치 하지만 &lt;code&gt;'lennon honored today'&lt;/code&gt; 일치 하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="fd54aed7458a908757d562528231778dc691427f" translate="yes" xml:space="preserve">
          <source>Note this will match the headline &lt;code&gt;'Today Lennon honored'&lt;/code&gt; but not &lt;code&gt;'today lennon honored'&lt;/code&gt;.</source>
          <target state="translated">이는 &lt;code&gt;'Today Lennon honored'&lt;/code&gt; 제목과 일치 하지만 '오늘 레논 명예' &lt;code&gt;'today lennon honored'&lt;/code&gt; 일치 하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="97147c98752b50c4fd43dfdbddc52f844a56c7e1" translate="yes" xml:space="preserve">
          <source>Note, however, that like &lt;a href=&quot;#django.db.models.Model.full_clean&quot;&gt;&lt;code&gt;Model.full_clean()&lt;/code&gt;&lt;/a&gt;, a model&amp;rsquo;s &lt;code&gt;clean()&lt;/code&gt; method is not invoked when you call your model&amp;rsquo;s &lt;a href=&quot;#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">그러나 &lt;a href=&quot;#django.db.models.Model.full_clean&quot;&gt; &lt;code&gt;Model.full_clean()&lt;/code&gt; &lt;/a&gt; 과 같이 모델의 &lt;a href=&quot;#django.db.models.Model.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt; 메소드를 호출 할 때 모델의 &lt;code&gt;clean()&lt;/code&gt; 메소드가 호출되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="e3ef265b66c27a036bf430bdf6cdf4e5f69c53b0" translate="yes" xml:space="preserve">
          <source>Note, however, that the first of these will raise &lt;code&gt;IndexError&lt;/code&gt; while the second will raise &lt;code&gt;DoesNotExist&lt;/code&gt; if no objects match the given criteria. See &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">그러나이 중 첫 번째는 &lt;code&gt;IndexError&lt;/code&gt; 를 발생시키고 두 번째는 지정된 기준과 일치하는 개체가 없으면 &lt;code&gt;DoesNotExist&lt;/code&gt; 를 발생 시킵니다 . 자세한 내용은 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="4bf23a731a060601e951cfde8e837da30936df56" translate="yes" xml:space="preserve">
          <source>Note, however, that these bulk update methods cannot call the &lt;code&gt;save()&lt;/code&gt; or &lt;code&gt;delete()&lt;/code&gt; methods of individual instances, which means that any custom behavior you have added for these methods will not be executed, including anything driven from the normal database object &lt;a href=&quot;../../ref/signals&quot;&gt;signals&lt;/a&gt;.</source>
          <target state="translated">그러나 이러한 대량 업데이트 메소드는 개별 인스턴스 의 &lt;code&gt;save()&lt;/code&gt; 또는 &lt;code&gt;delete()&lt;/code&gt; 메소드를 호출 할 수 없습니다. 즉, 일반 데이터베이스 오브젝트 &lt;a href=&quot;../../ref/signals&quot;&gt;신호&lt;/a&gt; 에서 구동되는 것을 포함하여 이러한 메소드에 대해 추가 한 사용자 정의 동작이 실행되지 않습니다. .</target>
        </trans-unit>
        <trans-unit id="c9a64d96116de9297dfea7c94ac09033ffbd0323" translate="yes" xml:space="preserve">
          <source>Note, the beginning of the pattern (&lt;code&gt;r'^static/'&lt;/code&gt;) should be your &lt;a href=&quot;../settings#std:setting-STATIC_URL&quot;&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">패턴의 시작 ( &lt;code&gt;r'^static/'&lt;/code&gt; )은 &lt;a href=&quot;../settings#std:setting-STATIC_URL&quot;&gt; &lt;code&gt;STATIC_URL&lt;/code&gt; &lt;/a&gt; 설정 이어야 합니다.</target>
        </trans-unit>
        <trans-unit id="53e1a6480426cb88534e0d776b00fdf6ab609686" translate="yes" xml:space="preserve">
          <source>Note, the snippet assumes your &lt;a href=&quot;settings#std:setting-MEDIA_URL&quot;&gt;&lt;code&gt;MEDIA_URL&lt;/code&gt;&lt;/a&gt; has a value of &lt;code&gt;'/media/'&lt;/code&gt;. This will call the &lt;a href=&quot;#django.views.static.serve&quot;&gt;&lt;code&gt;serve()&lt;/code&gt;&lt;/a&gt; view, passing in the path from the URLconf and the (required) &lt;code&gt;document_root&lt;/code&gt; parameter.</source>
          <target state="translated">이 스 니펫은 &lt;a href=&quot;settings#std:setting-MEDIA_URL&quot;&gt; &lt;code&gt;MEDIA_URL&lt;/code&gt; &lt;/a&gt; 의 값이 &lt;code&gt;'/media/'&lt;/code&gt; 라고 가정합니다 . URLconf 및 (필수) &lt;code&gt;document_root&lt;/code&gt; 매개 변수 의 경로를 전달 하여 &lt;a href=&quot;#django.views.static.serve&quot;&gt; &lt;code&gt;serve()&lt;/code&gt; &lt;/a&gt; 보기 를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="83423c198b6099edba08f185f940042d5dba3b79" translate="yes" xml:space="preserve">
          <source>Note:</source>
          <target state="translated">Note:</target>
        </trans-unit>
        <trans-unit id="9ef9ec7a9d7bf170473fb43f8eca38078f7b19b8" translate="yes" xml:space="preserve">
          <source>Note: &lt;code&gt;order_by('?')&lt;/code&gt; queries may be expensive and slow, depending on the database backend you&amp;rsquo;re using.</source>
          <target state="translated">참고 : &lt;code&gt;order_by('?')&lt;/code&gt; 쿼리는 사용중인 데이터베이스 백엔드에 따라 비싸고 느릴 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="befec88db067d5cfe6f992fabb031cd376020ac6" translate="yes" xml:space="preserve">
          <source>Note: As with &lt;code&gt;get()&lt;/code&gt;, a &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.MultipleObjectsReturned&quot;&gt;&lt;code&gt;MultipleObjectsReturned&lt;/code&gt;&lt;/a&gt; exception will be raised if more than one object is found.</source>
          <target state="translated">참고 :와 마찬가지로 &lt;code&gt;get()&lt;/code&gt; 하는 &lt;a href=&quot;../../ref/exceptions#django.core.exceptions.MultipleObjectsReturned&quot;&gt; &lt;code&gt;MultipleObjectsReturned&lt;/code&gt; 의&lt;/a&gt; 하나 이상의 개체가 발견되면 예외가 발생됩니다.</target>
        </trans-unit>
        <trans-unit id="910a845f2c2f78c037f270de3da706b062724005" translate="yes" xml:space="preserve">
          <source>Note: Don&amp;rsquo;t use this if all you want to do is determine if at least one result exists. It&amp;rsquo;s more efficient to use &lt;a href=&quot;#django.db.models.query.QuerySet.exists&quot;&gt;&lt;code&gt;exists()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">참고 : 원하는 결과가 하나 이상 있는지 확인하려는 경우에는 사용하지 마십시오. &lt;a href=&quot;#django.db.models.query.QuerySet.exists&quot;&gt; &lt;code&gt;exists()&lt;/code&gt; &lt;/a&gt; 를 사용 하는 것이 더 효율적 입니다.</target>
        </trans-unit>
        <trans-unit id="385f626475e0107c6a0177ca3b63ffea00ce9f62" translate="yes" xml:space="preserve">
          <source>Note: If you only need to determine the number of records in the set (and don&amp;rsquo;t need the actual objects), it&amp;rsquo;s much more efficient to handle a count at the database level using SQL&amp;rsquo;s &lt;code&gt;SELECT COUNT(*)&lt;/code&gt;. Django provides a &lt;a href=&quot;#django.db.models.query.QuerySet.count&quot;&gt;&lt;code&gt;count()&lt;/code&gt;&lt;/a&gt; method for precisely this reason.</source>
          <target state="translated">참고 : 세트의 레코드 수만 판별해야하고 실제 오브젝트는 필요하지 않은 경우 SQL의 &lt;code&gt;SELECT COUNT(*)&lt;/code&gt; 사용하여 데이터베이스 레벨에서 계수를 처리하는 것이 훨씬 효율적 입니다. Django는 이러한 이유로 정확하게 &lt;a href=&quot;#django.db.models.query.QuerySet.count&quot;&gt; &lt;code&gt;count()&lt;/code&gt; &lt;/a&gt; 메소드를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="e985be7c9234ac7fdd7d0605d286a7defa1cd034" translate="yes" xml:space="preserve">
          <source>Note: If you only want to determine if at least one result exists (and don&amp;rsquo;t need the actual objects), it&amp;rsquo;s more efficient to use &lt;a href=&quot;#django.db.models.query.QuerySet.exists&quot;&gt;&lt;code&gt;exists()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">참고 : 하나 이상의 결과 만 존재하는지 (실제 객체가 필요 없는지) 확인하려는 경우 &lt;a href=&quot;#django.db.models.query.QuerySet.exists&quot;&gt; &lt;code&gt;exists()&lt;/code&gt; &lt;/a&gt; 를 사용 하는 것이 더 효율적 입니다.</target>
        </trans-unit>
        <trans-unit id="d230e76ec82af164b0c7d3b96c1e1a1415482dfc" translate="yes" xml:space="preserve">
          <source>Note: Without a really compelling reason, such as a host that doesn&amp;rsquo;t support them, you should stick to the cache backends included with Django. They&amp;rsquo;ve been well-tested and are well-documented.</source>
          <target state="translated">참고 : 호스트를 지원하지 않는 호스트와 같은 강력한 이유없이 Django에 포함 된 캐시 백엔드를 사용해야합니다. 그들은 잘 테스트되고 잘 문서화되었습니다.</target>
        </trans-unit>
        <trans-unit id="70440046a3dc2e079f23ee1c57dfa76669b732aa" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="translated">Notes</target>
        </trans-unit>
        <trans-unit id="a8813e550b224d06483ad44dd0caab3e91810f54" translate="yes" xml:space="preserve">
          <source>Notes on field ordering</source>
          <target state="translated">현장 주문에 대한 참고 사항</target>
        </trans-unit>
        <trans-unit id="03285d22efba2cd6d7db91dcbcfa20e93a3abcbd" translate="yes" xml:space="preserve">
          <source>Notes on specific fields</source>
          <target state="translated">특정 분야에 대한 참고 사항</target>
        </trans-unit>
        <trans-unit id="9c3befe7e22c8667bc957541f49b0ee79970b588" translate="yes" xml:space="preserve">
          <source>Notes:</source>
          <target state="translated">Notes:</target>
        </trans-unit>
        <trans-unit id="000e64e4b4ee3745e9af8db1a328fea32acd56cf" translate="yes" xml:space="preserve">
          <source>Notice also that as both sides are used multiple times in the query the params need to contain &lt;code&gt;lhs_params&lt;/code&gt; and &lt;code&gt;rhs_params&lt;/code&gt; multiple times.</source>
          <target state="translated">또한 쿼리에서 양쪽이 여러 번 사용되므로 params는 &lt;code&gt;lhs_params&lt;/code&gt; 와 &lt;code&gt;rhs_params&lt;/code&gt; 를 여러 번 포함해야합니다 .</target>
        </trans-unit>
        <trans-unit id="2384e08c0f35bbe96198a9eea0586bf6a621eb2b" translate="yes" xml:space="preserve">
          <source>Notice first that we&amp;rsquo;ve moved &lt;code&gt;make_published&lt;/code&gt; into a method and renamed the &lt;code&gt;modeladmin&lt;/code&gt; parameter to &lt;code&gt;self&lt;/code&gt;, and second that we&amp;rsquo;ve now put the string &lt;code&gt;'make_published'&lt;/code&gt; in &lt;code&gt;actions&lt;/code&gt; instead of a direct function reference. This tells the &lt;a href=&quot;index#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt; to look up the action as a method.</source>
          <target state="translated">우리가 이동 한 것을 첫째주의 &lt;code&gt;make_published&lt;/code&gt; 방법으로하고 이름을 바꾼 &lt;code&gt;modeladmin&lt;/code&gt; 의 에 매개 변수를 &lt;code&gt;self&lt;/code&gt; , 우리는 문자열을 넣어 이제 한 두 번째 것을 &lt;code&gt;'make_published'&lt;/code&gt; 에서 &lt;code&gt;actions&lt;/code&gt; 대신 직접 함수를 참조하십시오. 이는 &lt;a href=&quot;index#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; &lt;/a&gt; 에게 조치를 메소드로 찾도록 지시합니다 .</target>
        </trans-unit>
        <trans-unit id="8b0cc5089c4b2a1219a366349dd5e31eab5291cc" translate="yes" xml:space="preserve">
          <source>Notice how the first block ends with &lt;code&gt;class=&quot;odd&quot;&lt;/code&gt; and the new one starts with &lt;code&gt;class=&quot;odd&quot;&lt;/code&gt;. Without the &lt;code&gt;{% resetcycle %}&lt;/code&gt; tag, the second block would start with &lt;code&gt;class=&quot;even&quot;&lt;/code&gt;.</source>
          <target state="translated">공지 방법에 첫 번째 블록 종료 &lt;code&gt;class=&quot;odd&quot;&lt;/code&gt; 와 함께 새로운 시작 &lt;code&gt;class=&quot;odd&quot;&lt;/code&gt; . &lt;code&gt;{% resetcycle %}&lt;/code&gt; 태그가 없으면 두 번째 블록은 &lt;code&gt;class=&quot;even&quot;&lt;/code&gt; 로 시작 합니다.</target>
        </trans-unit>
        <trans-unit id="f70af69036a60f939ee11c7ec6dd9119fc16aaef" translate="yes" xml:space="preserve">
          <source>Notice how we need to explicitly render &lt;code&gt;{{ form.id }}&lt;/code&gt;. This ensures that the model formset, in the &lt;code&gt;POST&lt;/code&gt; case, will work correctly. (This example assumes a primary key named &lt;code&gt;id&lt;/code&gt;. If you&amp;rsquo;ve explicitly defined your own primary key that isn&amp;rsquo;t called &lt;code&gt;id&lt;/code&gt;, make sure it gets rendered.)</source>
          <target state="translated">&lt;code&gt;{{ form.id }}&lt;/code&gt; 를 명시 적으로 렌더링해야하는 방법에 주목하십시오 . 이렇게하면 &lt;code&gt;POST&lt;/code&gt; 의 경우 모델 양식이 올바르게 작동합니다. (이 예제에서는 &lt;code&gt;id&lt;/code&gt; 라는 기본 키를 가정합니다 . &lt;code&gt;id&lt;/code&gt; 라고하지 않는 자신의 기본 키를 명시 적으로 정의한 경우 렌더링되도록하십시오.)</target>
        </trans-unit>
        <trans-unit id="0229f8c21d6b19db58706ac73ebaa3b227103d86" translate="yes" xml:space="preserve">
          <source>Notice how we pass &lt;code&gt;instance&lt;/code&gt; in both the &lt;code&gt;POST&lt;/code&gt; and &lt;code&gt;GET&lt;/code&gt; cases.</source>
          <target state="translated">&lt;code&gt;POST&lt;/code&gt; 와 &lt;code&gt;GET&lt;/code&gt; 모두에서 &lt;code&gt;instance&lt;/code&gt; 를 전달하는 방법에 주목하십시오 .</target>
        </trans-unit>
        <trans-unit id="aa5250b6be8df62e51f37c769420fd8720950beb" translate="yes" xml:space="preserve">
          <source>Notice how we set &lt;code&gt;self.object&lt;/code&gt; within &lt;code&gt;get()&lt;/code&gt; so we can use it again later in &lt;code&gt;get_context_data()&lt;/code&gt; and &lt;code&gt;get_queryset()&lt;/code&gt;. If you don&amp;rsquo;t set &lt;code&gt;template_name&lt;/code&gt;, the template will default to the normal &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#ListView&quot;&gt;&lt;code&gt;ListView&lt;/code&gt;&lt;/a&gt; choice, which in this case would be &lt;code&gt;&quot;books/book_list.html&quot;&lt;/code&gt; because it&amp;rsquo;s a list of books; &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#ListView&quot;&gt;&lt;code&gt;ListView&lt;/code&gt;&lt;/a&gt; knows nothing about &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt;&lt;code&gt;SingleObjectMixin&lt;/code&gt;&lt;/a&gt;, so it doesn&amp;rsquo;t have any clue this view is anything to do with a &lt;code&gt;Publisher&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;get()&lt;/code&gt; 내에 &lt;code&gt;self.object&lt;/code&gt; 를 설정 하여 나중에 &lt;code&gt;get_context_data()&lt;/code&gt; 및 &lt;code&gt;get_queryset()&lt;/code&gt; 에서 다시 사용할 수 있도록 하는 방법에 주목 하십시오 . &lt;code&gt;template_name&lt;/code&gt; 을 설정하지 않으면 템플릿은 기본 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#ListView&quot;&gt; &lt;code&gt;ListView&lt;/code&gt; &lt;/a&gt; 선택 항목 으로 기본 설정 &lt;code&gt;&quot;books/book_list.html&quot;&lt;/code&gt; 경우 책 목록이므로 &quot;books / book_list.html&quot; 이됩니다. &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#ListView&quot;&gt; &lt;code&gt;ListView&lt;/code&gt; &lt;/a&gt; 는 &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt; &lt;code&gt;SingleObjectMixin&lt;/code&gt; &lt;/a&gt; 에 대해 아무것도 모르므 로이 뷰가 &lt;code&gt;Publisher&lt;/code&gt; 와 관련이 있다는 단서가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="f88f6f6b02e714ff2c4fe469bdc1f6fb93d22663" translate="yes" xml:space="preserve">
          <source>Notice how we used &lt;code&gt;self&lt;/code&gt; to scope the &lt;code&gt;CycleNode&lt;/code&gt; specific information within the &lt;code&gt;render_context&lt;/code&gt;. There may be multiple &lt;code&gt;CycleNodes&lt;/code&gt; in a given template, so we need to be careful not to clobber another node&amp;rsquo;s state information. The easiest way to do this is to always use &lt;code&gt;self&lt;/code&gt; as the key into &lt;code&gt;render_context&lt;/code&gt;. If you&amp;rsquo;re keeping track of several state variables, make &lt;code&gt;render_context[self]&lt;/code&gt; a dictionary.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; 를 사용 하여 &lt;code&gt;render_context&lt;/code&gt; 내에서 &lt;code&gt;CycleNode&lt;/code&gt; 특정 정보의 범위를 지정 하는 방법에 주목 하십시오 . 주어진 템플릿에 여러 개의 &lt;code&gt;CycleNodes&lt;/code&gt; 가있을 수 있으므로 다른 노드의 상태 정보를 방해 하지 않도록주의해야합니다. 이를 수행하는 가장 쉬운 방법은 항상 &lt;code&gt;self&lt;/code&gt; 를 &lt;code&gt;render_context&lt;/code&gt; 의 키로 사용하는 것 입니다. 여러 상태 변수를 추적하는 경우 &lt;code&gt;render_context[self]&lt;/code&gt; 를 사전으로 만드십시오 .</target>
        </trans-unit>
        <trans-unit id="cb164517055d21810f3fcb5b55cae736b85fa840" translate="yes" xml:space="preserve">
          <source>Notice that &lt;code&gt;(0, 0)&lt;/code&gt; is the first and last coordinate &amp;ndash; if they were not equal, an error would be raised.</source>
          <target state="translated">공지 사항 것을 &lt;code&gt;(0, 0)&lt;/code&gt; 첫 번째와 마지막 좌표 - 그들은 동일한되지 않은 경우, 오류가 발생 될 것이다.</target>
        </trans-unit>
        <trans-unit id="ac06989a6888c756b6647843b41cc87a3733f5ba" translate="yes" xml:space="preserve">
          <source>Notice that along with a filtered &lt;code&gt;queryset&lt;/code&gt;, we&amp;rsquo;re also using a custom template name. If we didn&amp;rsquo;t, the generic view would use the same template as the &amp;ldquo;vanilla&amp;rdquo; object list, which might not be what we want.</source>
          <target state="translated">필터링 된 &lt;code&gt;queryset&lt;/code&gt; 과 함께 맞춤 템플릿 이름도 사용하고 있습니다. 그렇지 않은 경우 일반 뷰는 &quot;vanilla&quot;객체 목록과 동일한 템플릿을 사용하므로 원하는 형식이 아닐 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="423d90eb39ba0efaae8b6fe6038d1df1eed0d32b" translate="yes" xml:space="preserve">
          <source>Notice that the custom patterns are included &lt;em&gt;before&lt;/em&gt; the regular admin URLs: the admin URL patterns are very permissive and will match nearly anything, so you&amp;rsquo;ll usually want to prepend your custom URLs to the built-in ones.</source>
          <target state="translated">사용자 정의 패턴은 일반 관리 URL &lt;em&gt;앞에&lt;/em&gt; 포함 됩니다. 관리 URL 패턴은 매우 관용적이며 거의 모든 것과 일치하므로 일반적으로 사용자 정의 URL을 내장 된 URL 앞에 추가하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="a287bfd08800792a69e7a9c13eeb25e0be2944c0" translate="yes" xml:space="preserve">
          <source>Notice that the function takes a &lt;code&gt;sender&lt;/code&gt; argument, along with wildcard keyword arguments (&lt;code&gt;**kwargs&lt;/code&gt;); all signal handlers must take these arguments.</source>
          <target state="translated">이 함수는 와일드 카드 키워드 인수 ( &lt;code&gt;**kwargs&lt;/code&gt; ) 와 함께 &lt;code&gt;sender&lt;/code&gt; 인수를 사용합니다 . 모든 신호 핸들러는이 인수를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="c6d96c5e92b1bc39c53248522c2579dd44ac99ae" translate="yes" xml:space="preserve">
          <source>Notice that there isn&amp;rsquo;t a lot in these examples that&amp;rsquo;s PDF-specific &amp;ndash; just the bits using &lt;code&gt;reportlab&lt;/code&gt;. You can use a similar technique to generate any arbitrary format that you can find a Python library for. Also see &lt;a href=&quot;outputting-csv&quot;&gt;Outputting CSV with Django&lt;/a&gt; for another example and some techniques you can use when generated text-based formats.</source>
          <target state="translated">이 예제에는 PDF에 특정한 것이 &lt;code&gt;reportlab&lt;/code&gt; 사용하는 비트 만 있습니다. 비슷한 기술을 사용하여 파이썬 라이브러리를 찾을 수있는 임의의 형식을 생성 할 수 있습니다. 다른 예제와 텍스트 기반 형식을 생성 할 때 사용할 수있는 기술에 대해서는 &lt;a href=&quot;outputting-csv&quot;&gt;Django&lt;/a&gt; 로 CSV 출력을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="62566baa057cfcfdb2bc356cfe8e2afa1aa5d755" translate="yes" xml:space="preserve">
          <source>Notice that there isn&amp;rsquo;t very much specific to CSV here &amp;ndash; just the specific output format. You can use either of these techniques to output any text-based format you can dream of. You can also use a similar technique to generate arbitrary binary data; see &lt;a href=&quot;outputting-pdf&quot;&gt;Outputting PDFs with Django&lt;/a&gt; for an example.</source>
          <target state="translated">여기에는 CSV에만 국한된 것이 아니라 특정 출력 형식 만 있습니다. 이러한 기술 중 하나를 사용하여 원하는 텍스트 기반 형식을 출력 할 수 있습니다. 유사한 기술을 사용하여 임의의 이진 데이터를 생성 할 수도 있습니다. 예를 들어 &lt;a href=&quot;outputting-pdf&quot;&gt;Django&lt;/a&gt; 로 PDF 출력하기를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ec92f0273100502d01875ac12f88f482d518616e" translate="yes" xml:space="preserve">
          <source>Notice that we always return a &lt;code&gt;Hand&lt;/code&gt; instance from these methods. That&amp;rsquo;s the Python object type we want to store in the model&amp;rsquo;s attribute.</source>
          <target state="translated">이 메소드에서 항상 &lt;code&gt;Hand&lt;/code&gt; 인스턴스를 반환 합니다. 이것이 모델 속성에 저장하려는 Python 객체 유형입니다.</target>
        </trans-unit>
        <trans-unit id="7cb962ccf88e6d68aadedd4642d88f1b96287c61" translate="yes" xml:space="preserve">
          <source>Notice that we have to pass &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.FILES&quot;&gt;&lt;code&gt;request.FILES&lt;/code&gt;&lt;/a&gt; into the form&amp;rsquo;s constructor; this is how file data gets bound into a form.</source>
          <target state="translated">&lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.FILES&quot;&gt; &lt;code&gt;request.FILES&lt;/code&gt; &lt;/a&gt; 를 폼의 생성자 에 전달해야합니다 . 파일 데이터가 양식에 바인딩되는 방식입니다.</target>
        </trans-unit>
        <trans-unit id="ebe9aa5966d9fd8238eb5df6b3f145913747b3be" translate="yes" xml:space="preserve">
          <source>Notice the wrapped view in the fifth line above:</source>
          <target state="translated">위의 다섯 번째 줄에 래핑 된 뷰가 있습니다.</target>
        </trans-unit>
        <trans-unit id="7d3a34e68924487518a00635e921200b1ac742b0" translate="yes" xml:space="preserve">
          <source>Now &amp;ldquo;Choices&amp;rdquo; is an available option in the Django admin. The &amp;ldquo;Add choice&amp;rdquo; form looks like this:</source>
          <target state="translated">이제 &quot;Choices&quot;는 Django 관리자에서 사용 가능한 옵션입니다. &amp;ldquo;선택 추가&amp;rdquo;양식은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3506a6d9619d5b948e78683002fea85609bda448" translate="yes" xml:space="preserve">
          <source>Now Django knows to include the &lt;code&gt;polls&lt;/code&gt; app. Let&amp;rsquo;s run another command:</source>
          <target state="translated">이제 Django는 &lt;code&gt;polls&lt;/code&gt; 앱 을 포함하는 것을 알고 있습니다. 다른 명령을 실행 해 봅시다 :</target>
        </trans-unit>
        <trans-unit id="7f03ca20e19c12646270f4a55b9c68e694ccfc63" translate="yes" xml:space="preserve">
          <source>Now books can use that natural key to refer to &lt;code&gt;Person&lt;/code&gt; objects:</source>
          <target state="translated">이제 책은 자연 키를 사용하여 &lt;code&gt;Person&lt;/code&gt; 객체 를 참조 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f48eb4671182254c386d97a21fd740b58e671430" translate="yes" xml:space="preserve">
          <source>Now change your &lt;code&gt;polls/index.html&lt;/code&gt; template from:</source>
          <target state="translated">이제 &lt;code&gt;polls/index.html&lt;/code&gt; 템플릿을 다음에서 변경하십시오 .</target>
        </trans-unit>
        <trans-unit id="3c17a0825c6bc86f0b3d2cec1786b40f2a2a7adf" translate="yes" xml:space="preserve">
          <source>Now create a directory called &lt;code&gt;admin&lt;/code&gt; inside &lt;code&gt;templates&lt;/code&gt;, and copy the template &lt;code&gt;admin/base_site.html&lt;/code&gt; from within the default Django admin template directory in the source code of Django itself (&lt;code&gt;django/contrib/admin/templates&lt;/code&gt;) into that directory.</source>
          <target state="translated">이제 &lt;code&gt;templates&lt;/code&gt; 안에 &lt;code&gt;admin&lt;/code&gt; 이라는 디렉토리를 작성하고 Django 자체의 소스 코드 ( &lt;code&gt;django/contrib/admin/templates&lt;/code&gt; )에 있는 기본 Django 관리 템플리트 디렉토리에서 &lt;code&gt;admin/base_site.html&lt;/code&gt; 템플리트를 해당 디렉토리에 복사하십시오 .</target>
        </trans-unit>
        <trans-unit id="ad66c95e391e146cd22fbf05a88db00e41ed0fca" translate="yes" xml:space="preserve">
          <source>Now create admin views for the &lt;code&gt;Person&lt;/code&gt; and &lt;code&gt;Group&lt;/code&gt; models:</source>
          <target state="translated">이제 &lt;code&gt;Person&lt;/code&gt; 및 &lt;code&gt;Group&lt;/code&gt; 모델에 대한 관리자보기를 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="32171b8cd59d1de6923e5f771f767aa171c9ff0d" translate="yes" xml:space="preserve">
          <source>Now for our hands-on example.</source>
          <target state="translated">이제 실습 예제입니다.</target>
        </trans-unit>
        <trans-unit id="729e7fc2aa726bb0bbccd67b261c45e009998ba6" translate="yes" xml:space="preserve">
          <source>Now in your time on the web you may have come across such beauties as &amp;ldquo;ME2/Sites/dirmod.asp?sid=&amp;amp;type=gen&amp;amp;mod=Core+Pages&amp;amp;gid=A6CD4967199A42D9B65B1B&amp;rdquo;. You will be pleased to know that Django allows us much more elegant &lt;em&gt;URL patterns&lt;/em&gt; than that.</source>
          <target state="translated">이제 웹에서 당신은&amp;ldquo;ME2 / Sites / dirmod.asp? sid = &amp;amp; type = gen &amp;amp; mod = Core + Pages &amp;amp; gid = A6CD4967199A42D9B65B1B&amp;rdquo;와 같은 아름다움을 경험했을 것입니다. Django는 그보다 훨씬 더 우아한 &lt;em&gt;URL 패턴을&lt;/em&gt; 허용한다는 것을 알게되어 기쁩니다 .</target>
        </trans-unit>
        <trans-unit id="d7ae0cff622895ccfc58ecd68188d07d6dbf3c75" translate="yes" xml:space="preserve">
          <source>Now is a good time to check your backup strategy for these files.</source>
          <target state="translated">이제 이러한 파일에 대한 백업 전략을 확인하기에 좋은시기입니다.</target>
        </trans-unit>
        <trans-unit id="36e9dc72ab05bd8c0ba6109d8103272522c57402" translate="yes" xml:space="preserve">
          <source>Now it&amp;rsquo;s time to go through all the changes made in our patch. To stage all the changes ready for commit, run:</source>
          <target state="translated">이제 패치에서 변경 한 내용을 모두 살펴볼 차례입니다. 커밋 준비가 된 모든 변경 사항을 준비하려면 다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="f163c45d21c3827f27074167e2374cf71f319599" translate="yes" xml:space="preserve">
          <source>Now let&amp;rsquo;s add a few more views to &lt;code&gt;polls/views.py&lt;/code&gt;. These views are slightly different, because they take an argument:</source>
          <target state="translated">이제 &lt;code&gt;polls/views.py&lt;/code&gt; 에 뷰를 몇 개 더 추가 하겠습니다 . 이러한 견해는 인수를 취하기 때문에 약간 다릅니다.</target>
        </trans-unit>
        <trans-unit id="f9a6d41951be6209dd204da14498c508cbc2918a" translate="yes" xml:space="preserve">
          <source>Now let&amp;rsquo;s take a closer look at the &lt;code&gt;model&lt;/code&gt; argument we&amp;rsquo;ve been using all along. The &lt;code&gt;model&lt;/code&gt; argument, which specifies the database model that the view will operate upon, is available on all the generic views that operate on a single object or a collection of objects. However, the &lt;code&gt;model&lt;/code&gt; argument is not the only way to specify the objects that the view will operate upon &amp;ndash; you can also specify the list of objects using the &lt;code&gt;queryset&lt;/code&gt; argument:</source>
          <target state="translated">이제 우리가 함께 사용했던 &lt;code&gt;model&lt;/code&gt; 논쟁에 대해 자세히 살펴 보겠습니다 . &lt;code&gt;model&lt;/code&gt; 뷰에 작동하는 데이터베이스 모델을 지정하는 인수는 하나의 개체 또는 개체의 컬렉션에서 작동하는 모든 일반 뷰에서 사용할 수 있습니다. 그러나 &lt;code&gt;model&lt;/code&gt; 인수가 뷰가 작동 할 오브젝트를 지정하는 유일한 방법은 아닙니다. &lt;code&gt;queryset&lt;/code&gt; 인수를 사용하여 오브젝트 목록을 지정할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="04c4dc8474d5993bb9a263be8a4f51e3572a25c0" translate="yes" xml:space="preserve">
          <source>Now let&amp;rsquo;s update our &lt;code&gt;index&lt;/code&gt; view in &lt;code&gt;polls/views.py&lt;/code&gt; to use the template:</source>
          <target state="translated">이제 &lt;code&gt;polls/views.py&lt;/code&gt; 에서 &lt;code&gt;index&lt;/code&gt; 뷰를 업데이트 하여 템플릿을 사용 하겠습니다 :</target>
        </trans-unit>
        <trans-unit id="f7acf85e2f16d675683380e16460476b2319c859" translate="yes" xml:space="preserve">
          <source>Now normal &lt;code&gt;Person&lt;/code&gt; queries will be unordered and &lt;code&gt;OrderedPerson&lt;/code&gt; queries will be ordered by &lt;code&gt;last_name&lt;/code&gt;.</source>
          <target state="translated">이제 일반 &lt;code&gt;Person&lt;/code&gt; 쿼리는 정렬되지 않고 &lt;code&gt;OrderedPerson&lt;/code&gt; 쿼리는 &lt;code&gt;last_name&lt;/code&gt; 으로 정렬됩니다 .</target>
        </trans-unit>
        <trans-unit id="52926bd958ab5c5a3c94125229eeb6b79ce9a920" translate="yes" xml:space="preserve">
          <source>Now sit back and relax. Django&amp;rsquo;s entire test suite has thousands of tests, and it takes at least a few minutes run, depending on the speed of your computer.</source>
          <target state="translated">이제 앉아서 휴식을 취하십시오. Django의 전체 테스트 스위트는 수천 번의 테스트를 거쳤으며 컴퓨터 속도에 따라 최소 몇 분 정도 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="1207f077c878e60c8e36479acd1b3e82b4924ee9" translate="yes" xml:space="preserve">
          <source>Now that the Question admin page is looking good, let&amp;rsquo;s make some tweaks to the &amp;ldquo;change list&amp;rdquo; page &amp;ndash; the one that displays all the questions in the system.</source>
          <target state="translated">질문 관리 페이지가보기 좋게 표시되었으므로 시스템의 모든 질문을 표시하는 &quot;변경 목록&quot;페이지를 약간 조정 해 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="9c4af4d9ba28bde34b6930edb4ff370956fb3d37" translate="yes" xml:space="preserve">
          <source>Now that the server&amp;rsquo;s running, visit &lt;a href=&quot;http://127.0.0.1:8000/&quot;&gt;http://127.0.0.1:8000/&lt;/a&gt; with your Web browser. You&amp;rsquo;ll see a &amp;ldquo;Congratulations!&amp;rdquo; page, with a rocket taking off. It worked!</source>
          <target state="translated">서버가 실행 &lt;a href=&quot;http://127.0.0.1:8000/&quot;&gt;중이므로&lt;/a&gt; 웹 브라우저에서 http://127.0.0.1:8000/ 을 방문하십시오 . &quot;축하합니다!&quot;가 표시됩니다. 로켓 이륙과 함께. 효과가 있었다!</target>
        </trans-unit>
        <trans-unit id="75e57caa4343eb4793c179b4fc0c146dbae59a0e" translate="yes" xml:space="preserve">
          <source>Now that we&amp;rsquo;ve packaged and tested &lt;code&gt;django-polls&lt;/code&gt;, it&amp;rsquo;s ready to share with the world! If this wasn&amp;rsquo;t just an example, you could now:</source>
          <target state="translated">&lt;code&gt;django-polls&lt;/code&gt; 를 패키징하고 테스트 했으므로 이제 세계와 공유 할 준비가되었습니다! 이것이 단순한 예가 아니라면 이제 다음을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bf406cea330fa6d9142db8c49a22df6724bea522" translate="yes" xml:space="preserve">
          <source>Now that we&amp;rsquo;ve registered &lt;code&gt;Question&lt;/code&gt;, Django knows that it should be displayed on the admin index page:</source>
          <target state="translated">이제 우리는 &lt;code&gt;Question&lt;/code&gt; 을 등록 했으므로 장고는 관리자 색인 페이지에 표시되어야한다는 것을 알고 있습니다.</target>
        </trans-unit>
        <trans-unit id="75cde598167c7f2589d0c60c6738de9584b976d6" translate="yes" xml:space="preserve">
          <source>Now that you have a local copy of Django, you can install it just like you would install any package using &lt;code&gt;pip&lt;/code&gt;. The most convenient way to do so is by using a &lt;em&gt;virtual environment&lt;/em&gt;, which is a feature built into Python that allows you to keep a separate directory of installed packages for each of your projects so that they don&amp;rsquo;t interfere with each other.</source>
          <target state="translated">Django의 로컬 사본이 있으므로 &lt;code&gt;pip&lt;/code&gt; 를 사용하여 패키지를 설치하는 것처럼 설치할 수 있습니다 . 가장 편리한 방법은 &lt;em&gt;가상 환경&lt;/em&gt; 을 사용하는 것 입니다.이 기능은 각 프로젝트에 대해 설치된 패키지의 별도 디렉토리를 서로 방해하지 않도록 Python에 내장 된 기능입니다.</target>
        </trans-unit>
        <trans-unit id="64bad9fc6f101dcdbda55bfa6724529b3cc5e83a" translate="yes" xml:space="preserve">
          <source>Now that you have set up your &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; to use your intermediary model (&lt;code&gt;Membership&lt;/code&gt;, in this case), you&amp;rsquo;re ready to start creating some many-to-many relationships. You do this by creating instances of the intermediate model:</source>
          <target state="translated">중개 모델 ( 이 경우 &lt;code&gt;Membership&lt;/code&gt; ) 을 사용하도록 &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt; 를 설정 했으므로 다 대다 관계를 작성할 준비가되었습니다. 중간 모델의 인스턴스를 작성하여이를 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="2529a6500c0e15e2c4abe6d28f26cc62054cc372" translate="yes" xml:space="preserve">
          <source>Now that you&amp;rsquo;ve examined your dataset using &lt;code&gt;ogrinfo&lt;/code&gt;, create a GeoDjango model to represent this data:</source>
          <target state="translated">&lt;code&gt;ogrinfo&lt;/code&gt; 를 사용하여 데이터 세트를 조사 했으므로이 데이터를 나타내는 GeoDjango 모델을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="dc2389b5f334729c58b759c145bcf664705ad347" translate="yes" xml:space="preserve">
          <source>Now that you&amp;rsquo;ve seen how to define geographic models and import data with the &lt;a href=&quot;layermapping&quot;&gt;LayerMapping data import utility&lt;/a&gt;, it&amp;rsquo;s possible to further automate this process with use of the &lt;a href=&quot;commands#django-admin-ogrinspect&quot;&gt;&lt;code&gt;ogrinspect&lt;/code&gt;&lt;/a&gt; management command. The &lt;a href=&quot;commands#django-admin-ogrinspect&quot;&gt;&lt;code&gt;ogrinspect&lt;/code&gt;&lt;/a&gt; command introspects a GDAL-supported vector data source (e.g., a shapefile) and generates a model definition and &lt;code&gt;LayerMapping&lt;/code&gt; dictionary automatically.</source>
          <target state="translated">&lt;a href=&quot;layermapping&quot;&gt;LayerMapping 데이터 가져 오기 유틸리티를&lt;/a&gt; 사용하여 지리적 모델을 정의하고 데이터를 가져 오는 방법을 살펴 보았 &lt;a href=&quot;commands#django-admin-ogrinspect&quot;&gt; &lt;code&gt;ogrinspect&lt;/code&gt; &lt;/a&gt; 관리 명령 을 사용하여이 프로세스를 추가로 자동화 할 수 있습니다 . &lt;a href=&quot;commands#django-admin-ogrinspect&quot;&gt; &lt;code&gt;ogrinspect&lt;/code&gt; &lt;/a&gt; 명령 검사 한 GDAL 지원 벡터 데이터 소스 (예를 들어, 모양 파일) 및 모델 정의 및 생성 &lt;code&gt;LayerMapping&lt;/code&gt; 자동 사전.</target>
        </trans-unit>
        <trans-unit id="6376b1ae238a5fa6f312c93f3d2f4898fe8c1b17" translate="yes" xml:space="preserve">
          <source>Now that your environment &amp;ndash; a &amp;ldquo;project&amp;rdquo; &amp;ndash; is set up, you&amp;rsquo;re set to start doing work.</source>
          <target state="translated">&quot;프로젝트&quot;환경이 설정되었으므로 작업을 시작하도록 설정되었습니다.</target>
        </trans-unit>
        <trans-unit id="fae278f6e2f60b163eed4caa52b0d02177fea03c" translate="yes" xml:space="preserve">
          <source>Now the question change list page looks like this:</source>
          <target state="translated">이제 질문 변경 목록 페이지는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="eb90dc277d26d2a028d83b7c97946650cba77833" translate="yes" xml:space="preserve">
          <source>Now we &lt;em&gt;might&lt;/em&gt; be able to get away with putting our static files directly in &lt;code&gt;my_app/static/&lt;/code&gt; (rather than creating another &lt;code&gt;my_app&lt;/code&gt; subdirectory), but it would actually be a bad idea. Django will use the first static file it finds whose name matches, and if you had a static file with the same name in a &lt;em&gt;different&lt;/em&gt; application, Django would be unable to distinguish between them. We need to be able to point Django at the right one, and the best way to ensure this is by &lt;em&gt;namespacing&lt;/em&gt; them. That is, by putting those static files inside &lt;em&gt;another&lt;/em&gt; directory named for the application itself.</source>
          <target state="translated">이제 우리는 &lt;em&gt;수도&lt;/em&gt; 에서 직접 우리의 정적 파일을 넣어 멀리 얻을 수있을 &lt;code&gt;my_app/static/&lt;/code&gt; (아닌 다른 생성 &lt;code&gt;my_app&lt;/code&gt; 하위 디렉토리를)하지만 실제로 나쁜 아이디어가 될 것입니다. Django는 이름이 일치하는 첫 번째 정적 파일을 사용하며 &lt;em&gt;다른&lt;/em&gt; 응용 프로그램 에서 동일한 이름을 가진 정적 파일 이 있으면 Django는 이들을 구별 할 수 없습니다. Django가 올바른 것을 가리킬 수 있어야하며,이를 보장하는 가장 좋은 방법은 &lt;em&gt;이름을 지정&lt;/em&gt; 하는 것입니다. 즉, 정적 파일을 응용 프로그램 자체의 &lt;em&gt;다른&lt;/em&gt; 디렉토리 에 넣습니다 .</target>
        </trans-unit>
        <trans-unit id="01d175c1e637f3cee5ceb291fdf4c9adfc0dc821" translate="yes" xml:space="preserve">
          <source>Now we &lt;em&gt;might&lt;/em&gt; be able to get away with putting our templates directly in &lt;code&gt;polls/templates&lt;/code&gt; (rather than creating another &lt;code&gt;polls&lt;/code&gt; subdirectory), but it would actually be a bad idea. Django will choose the first template it finds whose name matches, and if you had a template with the same name in a &lt;em&gt;different&lt;/em&gt; application, Django would be unable to distinguish between them. We need to be able to point Django at the right one, and the best way to ensure this is by &lt;em&gt;namespacing&lt;/em&gt; them. That is, by putting those templates inside &lt;em&gt;another&lt;/em&gt; directory named for the application itself.</source>
          <target state="translated">이제 우리 &lt;em&gt;는&lt;/em&gt; 다른 &lt;code&gt;polls&lt;/code&gt; 서브 디렉토리를 생성하는 대신 &lt;code&gt;polls/templates&lt;/code&gt; 을 polls / templates에 직접 넣을 수 있지만 실제로는 나쁜 생각입니다. Django는 이름이 일치하는 첫 번째 템플릿을 선택하며, &lt;em&gt;다른&lt;/em&gt; 응용 프로그램 에서 동일한 이름을 가진 템플릿이 있으면 Django는 템플릿 을 구별 할 수 없습니다. Django가 올바른 것을 가리킬 수 있어야하며,이를 보장하는 가장 좋은 방법은 &lt;em&gt;이름을 지정&lt;/em&gt; 하는 것입니다. 즉, 해당 템플릿을 응용 프로그램 자체의 &lt;em&gt;다른&lt;/em&gt; 디렉토리 에 넣습니다 .&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7c4f42edd57918625d34396bf4a71a96fb72f5a7" translate="yes" xml:space="preserve">
          <source>Now we are ready to run the test suite. If you&amp;rsquo;re using GNU/Linux, macOS, or some other flavor of Unix, run:</source>
          <target state="translated">이제 테스트 스위트를 실행할 준비가되었습니다. GNU / Linux, macOS 또는 다른 유닉스 계열을 사용하는 경우 다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="e47a8ac15a5ebf5edb5feb22215c8cd06eb6fb07" translate="yes" xml:space="preserve">
          <source>Now we can write a new &lt;code&gt;PublisherDetail&lt;/code&gt;:</source>
          <target state="translated">이제 새로운 &lt;code&gt;PublisherDetail&lt;/code&gt; 을 작성할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7c66e87b3835c409da2dcefebcb4caed4fb353a1" translate="yes" xml:space="preserve">
          <source>Now we define our corresponding Django model (make sure to use &lt;a href=&quot;../../django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt;):</source>
          <target state="translated">이제 해당 Django 모델을 정의합니다 ( &lt;a href=&quot;../../django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt; 사용 ).</target>
        </trans-unit>
        <trans-unit id="4c5602413593d1c5528e6e57dcbd46503a8f2804" translate="yes" xml:space="preserve">
          <source>Now we have a different problem - the longer name of &amp;ldquo;Helena Bonham Carter&amp;rdquo; doesn&amp;rsquo;t show up as it is much longer. Trigram searches consider all combinations of three letters, and compares how many appear in both search and source strings. For the longer name, there are more combinations which appear in the source string so it is no longer considered a close match.</source>
          <target state="translated">&quot;Helena Bonham Carter&quot;라는 이름이 길수록 길어지지 않습니다. Trigram 검색은 세 글자의 모든 조합을 고려하고 검색 문자열과 소스 문자열에 나타나는 문자 수를 비교합니다. 더 긴 이름의 경우 소스 문자열에 더 많은 조합이 표시되므로 더 이상 근접한 것으로 간주되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2d795b337a92c0a5e31febc9c4041e82a9227dbc" translate="yes" xml:space="preserve">
          <source>Now we implement the pre-processing and validation. Since we do not have any of our own validation at this point, we delegate to the nested expressions:</source>
          <target state="translated">이제 전처리 및 검증을 구현합니다. 이 시점에서 우리 자신의 유효성 검사가 없으므로 중첩 식에 위임합니다.</target>
        </trans-unit>
        <trans-unit id="c37a1e6f4b5daec07056100cf46833458caf834e" translate="yes" xml:space="preserve">
          <source>Now we need to define a view:</source>
          <target state="translated">이제 뷰를 정의해야합니다.</target>
        </trans-unit>
        <trans-unit id="8cfc15775270a0cf7074a75118fb26261619cc6f" translate="yes" xml:space="preserve">
          <source>Now we need to make sure that the test we wrote earlier passes, so we can see whether the code we added is working correctly. Again, navigate to the Django &lt;code&gt;tests/&lt;/code&gt; directory and run:</source>
          <target state="translated">이제 이전에 작성한 테스트가 통과했는지 확인해야 추가 한 코드가 제대로 작동하는지 확인할 수 있습니다. 다시 Django &lt;code&gt;tests/&lt;/code&gt; 디렉토리로 이동하여 다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="bcac3a04746aabf930cb5a747d4e5bc7fbac7974" translate="yes" xml:space="preserve">
          <source>Now we&amp;rsquo;ll define your models &amp;ndash; essentially, your database layout, with additional metadata.</source>
          <target state="translated">이제 추가 메타 데이터를 사용하여 모델 (기본적으로 데이터베이스 레이아웃)을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="fe5908be768f13a2be925c73b002c0119eef5f3a" translate="yes" xml:space="preserve">
          <source>Now we&amp;rsquo;ll need to handle routing. First we want a router that knows to send queries for the &lt;code&gt;auth&lt;/code&gt; and &lt;code&gt;contenttypes&lt;/code&gt; apps to &lt;code&gt;auth_db&lt;/code&gt; (&lt;code&gt;auth&lt;/code&gt; models are linked to &lt;code&gt;ContentType&lt;/code&gt;, so they must be stored in the same database):</source>
          <target state="translated">이제 라우팅을 처리해야합니다. 먼저 &lt;code&gt;auth&lt;/code&gt; 및 &lt;code&gt;contenttypes&lt;/code&gt; 앱에 대한 쿼리 를 &lt;code&gt;auth_db&lt;/code&gt; 로 보내는 라우터 를 원합니다 ( &lt;code&gt;auth&lt;/code&gt; 모델은 &lt;code&gt;ContentType&lt;/code&gt; 에 연결 되므로 동일한 데이터베이스에 저장해야합니다).</target>
        </trans-unit>
        <trans-unit id="d5c11520a098768a6c24489507829a2b07907224" translate="yes" xml:space="preserve">
          <source>Now we&amp;rsquo;ve seen how Django&amp;rsquo;s generic class-based views use the provided mixins, let&amp;rsquo;s look at other ways we can combine them. Of course we&amp;rsquo;re still going to be combining them with either built-in class-based views, or other generic class-based views, but there are a range of rarer problems you can solve than are provided for by Django out of the box.</source>
          <target state="translated">이제 Django의 일반 클래스 기반 뷰가 제공된 믹스 인을 사용하는 방법을 살펴 보았습니다. 결합 할 수있는 다른 방법을 살펴 보겠습니다. 물론 우리는 여전히 내장 클래스 기반 뷰 또는 다른 일반 클래스 기반 뷰와 결합 할 예정이지만 Django가 제공하는 것보다 해결할 수있는 드문 문제가 있습니다. .</target>
        </trans-unit>
        <trans-unit id="2b516478da3cbf3e609d2d9aa54d602ac37ba736" translate="yes" xml:space="preserve">
          <source>Now you can access the country in a template with &lt;code&gt;{{ form.coordinates.country }}&lt;/code&gt;.</source>
          <target state="translated">이제 &lt;code&gt;{{ form.coordinates.country }}&lt;/code&gt; 로 템플릿에서 국가에 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d475869dbc3deb53f1f216a136b9eba20db60766" translate="yes" xml:space="preserve">
          <source>Now you can apply the migrations as usual with the &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">이제 &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; &lt;/a&gt; 명령 으로 평소와 같이 마이그레이션을 적용 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="72ac8fc1339f4d03f079fb6f9c9f0e194b347a82" translate="yes" xml:space="preserve">
          <source>Now you can put those skills to good use by helping to improve Django&amp;rsquo;s codebase.</source>
          <target state="translated">이제 Django의 코드베이스를 개선하여 이러한 기술을 잘 활용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="23f1e33e76b69dcdf87c9a1fb7103093a05beea6" translate="yes" xml:space="preserve">
          <source>Now you can satisfy yourself that this behaves as expected by firing up &lt;code&gt;runserver&lt;/code&gt;, loading the site in your browser, creating &lt;code&gt;Questions&lt;/code&gt; with dates in the past and future, and checking that only those that have been published are listed. You don&amp;rsquo;t want to have to do that &lt;em&gt;every single time you make any change that might affect this&lt;/em&gt; - so let&amp;rsquo;s also create a test, based on our &lt;a href=&quot;../ref/django-admin#django-admin-shell&quot;&gt;&lt;code&gt;shell&lt;/code&gt;&lt;/a&gt; session above.</source>
          <target state="translated">이제 &lt;code&gt;runserver&lt;/code&gt; 를 실행하고 , 브라우저에 사이트를로드하고 , 과거와 미래의 날짜가 포함 된 &lt;code&gt;Questions&lt;/code&gt; 을 작성 하고, 게시 된 날짜 만 나열 되는지 확인 하여 이것이 예상대로 작동 함을 스스로 만족시킬 수 있습니다. &lt;em&gt;영향을 줄 수있는 변경을 할 때마다이&lt;/em&gt; 작업을 수행 할 필요는 없습니다. 따라서 위 의 &lt;a href=&quot;../ref/django-admin#django-admin-shell&quot;&gt; &lt;code&gt;shell&lt;/code&gt; &lt;/a&gt; 세션을 기반으로 테스트를 작성하겠습니다 .</target>
        </trans-unit>
        <trans-unit id="0dd4f0d714b7b440236676490d5cd5cc97710517" translate="yes" xml:space="preserve">
          <source>Now you can use any of the documented attributes and methods of the &lt;a href=&quot;../ref/files/file#django.core.files.File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">이제 &lt;a href=&quot;../ref/files/file#django.core.files.File&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt; 클래스 의 문서화 된 속성 및 메소드를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7ab3a4c732a570e45e72d8279159c31dd602e88c" translate="yes" xml:space="preserve">
          <source>Now you&amp;rsquo;ll also need a view corresponding to that &lt;code&gt;/your-name/&lt;/code&gt; URL which will find the appropriate key/value pairs in the request, and then process them.</source>
          <target state="translated">이제 &lt;code&gt;/your-name/&lt;/code&gt; URL에 해당하는보기가 필요합니다.이 URL은 요청에서 적절한 키 / 값 쌍을 찾아서 처리합니다.</target>
        </trans-unit>
        <trans-unit id="773ae0c9b55a06a6212d086ca1c9132147c8e3bc" translate="yes" xml:space="preserve">
          <source>Now your admin site is set up to edit &lt;code&gt;Membership&lt;/code&gt; objects inline from either the &lt;code&gt;Person&lt;/code&gt; or the &lt;code&gt;Group&lt;/code&gt; detail pages.</source>
          <target state="translated">이제 관리 사이트가 &lt;code&gt;Person&lt;/code&gt; 또는 &lt;code&gt;Group&lt;/code&gt; 세부 사항 페이지 에서 인라인 &lt;code&gt;Membership&lt;/code&gt; 오브젝트 를 편집하도록 설정되었습니다 .</target>
        </trans-unit>
        <trans-unit id="1d7161c477ce1fa34e1cd8a8fcedd1a97cd45391" translate="yes" xml:space="preserve">
          <source>Now your tag should begin to look like this:</source>
          <target state="translated">이제 태그가 다음과 같이 나타납니다.</target>
        </trans-unit>
        <trans-unit id="3ca505f89a58836d8d8355a91fcfdcb88a64397d" translate="yes" xml:space="preserve">
          <source>Now&amp;rsquo;s a good time to note: &lt;strong&gt;don&amp;rsquo;t&lt;/strong&gt; use this server in anything resembling a production environment. It&amp;rsquo;s intended only for use while developing. (We&amp;rsquo;re in the business of making Web frameworks, not Web servers.)</source>
          <target state="translated">이제 주목할만한 시간 입니다. 프로덕션 환경과 유사한 어떤 환경에서도이 서버를 사용 &lt;strong&gt;하지 마십시오&lt;/strong&gt; . 개발 중에 만 사용하도록 고안되었습니다. (우리는 웹 서버가 아닌 웹 프레임 워크를 만드는 사업을하고 있습니다.)</target>
        </trans-unit>
        <trans-unit id="8d15bcc0a82dc2d5aaadb1122619ae9298528376" translate="yes" xml:space="preserve">
          <source>Now&amp;rsquo;s also a good time to note that change lists give you free pagination. The default is to display 100 items per page. &lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_per_page&quot;&gt;&lt;code&gt;Change list pagination&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.search_fields&quot;&gt;&lt;code&gt;search boxes&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_filter&quot;&gt;&lt;code&gt;filters&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.date_hierarchy&quot;&gt;&lt;code&gt;date-hierarchies&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_display&quot;&gt;&lt;code&gt;column-header-ordering&lt;/code&gt;&lt;/a&gt; all work together like you think they should.</source>
          <target state="translated">또한 변경 목록을 사용하면 페이지 매김을 무료로 수행 할 수 있습니다. 기본값은 페이지 당 100 개의 항목을 표시하는 것입니다. &lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_per_page&quot;&gt; &lt;code&gt;Change list pagination&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.search_fields&quot;&gt; &lt;code&gt;search boxes&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_filter&quot;&gt; &lt;code&gt;filters&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.date_hierarchy&quot;&gt; &lt;code&gt;date-hierarchies&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.list_display&quot;&gt; &lt;code&gt;column-header-ordering&lt;/code&gt; &lt;/a&gt; 모두 생각대로 작동합니다.</target>
        </trans-unit>
        <trans-unit id="99ce113dbab28c6966339979cd1800d1c3a5e9a6" translate="yes" xml:space="preserve">
          <source>Now, all you need to do is create a new function and have &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.RunPython&quot;&gt;&lt;code&gt;RunPython&lt;/code&gt;&lt;/a&gt; use it. &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.RunPython&quot;&gt;&lt;code&gt;RunPython&lt;/code&gt;&lt;/a&gt; expects a callable as its argument which takes two arguments - the first is an &lt;a href=&quot;../ref/applications&quot;&gt;app registry&lt;/a&gt; that has the historical versions of all your models loaded into it to match where in your history the migration sits, and the second is a &lt;a href=&quot;../ref/schema-editor&quot;&gt;SchemaEditor&lt;/a&gt;, which you can use to manually effect database schema changes (but beware, doing this can confuse the migration autodetector!)</source>
          <target state="translated">이제 필요한 것은 새 함수를 만들고 &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.RunPython&quot;&gt; &lt;code&gt;RunPython&lt;/code&gt; 이&lt;/a&gt; 사용하도록하는 것입니다. &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.RunPython&quot;&gt; &lt;code&gt;RunPython&lt;/code&gt; &lt;/a&gt; 은 두 개의 인수를 취하는 인수로 호출 가능을 예상합니다. 첫 번째는 마이그레이션이있는 위치와 일치하도록로드 된 모든 모델의 히스토리 버전 이있는 &lt;a href=&quot;../ref/applications&quot;&gt;앱 레지스트리&lt;/a&gt; 이고, 두 번째는 &lt;a href=&quot;../ref/schema-editor&quot;&gt;SchemaEditor입니다&lt;/a&gt; . 데이터베이스 스키마 변경 사항을 수동으로 적용하는 데 사용합니다 (그러나이 작업을 수행하면 마이그레이션 자동 검색기를 혼동 할 수 있습니다!)</target>
        </trans-unit>
        <trans-unit id="e26eeede8de5f6aef6477290252659725320f583" translate="yes" xml:space="preserve">
          <source>Now, create a &lt;code&gt;polls/results.html&lt;/code&gt; template:</source>
          <target state="translated">이제 &lt;code&gt;polls/results.html&lt;/code&gt; 템플릿을 만듭니다 :</target>
        </trans-unit>
        <trans-unit id="9b9600adacf65499e24be89755a51a93c7893117" translate="yes" xml:space="preserve">
          <source>Now, create and register the inclusion tag by calling the &lt;code&gt;inclusion_tag()&lt;/code&gt; method on a &lt;code&gt;Library&lt;/code&gt; object. Following our example, if the above template is in a file called &lt;code&gt;results.html&lt;/code&gt; in a directory that&amp;rsquo;s searched by the template loader, we&amp;rsquo;d register the tag like this:</source>
          <target state="translated">이제 &lt;code&gt;Library&lt;/code&gt; 오브젝트 에서 &lt;code&gt;inclusion_tag()&lt;/code&gt; 메소드를 호출하여 포함 태그를 작성하고 등록하십시오 . 위 예제 에서 템플릿 로더가 검색 한 디렉토리에 &lt;code&gt;results.html&lt;/code&gt; 이라는 파일 이 있으면 다음과 같이 태그를 등록합니다.</target>
        </trans-unit>
        <trans-unit id="61df64fac0bdb450dcab9337d6fdd355672882b3" translate="yes" xml:space="preserve">
          <source>Now, define a point of interest &lt;a href=&quot;#id13&quot; id=&quot;id7&quot;&gt;[3]&lt;/a&gt;:</source>
          <target state="translated">이제 관심 지점을 정의하십시오 &lt;a href=&quot;#id13&quot; id=&quot;id7&quot;&gt;[3]&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="c9f3f21fc4e880937be50b7fcf36ca081326148a" translate="yes" xml:space="preserve">
          <source>Now, go to &lt;code&gt;/polls/1/&lt;/code&gt; in your browser and vote in the question. You should see a results page that gets updated each time you vote. If you submit the form without having chosen a choice, you should see the error message.</source>
          <target state="translated">이제 브라우저에서 &lt;code&gt;/polls/1/&lt;/code&gt; 로 이동 하여 질문에 투표하십시오. 투표 할 때마다 업데이트되는 결과 페이지가 표시되어야합니다. 선택하지 않고 양식을 제출하면 오류 메시지가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="a1efea4230fe635c172ad6eeb75a83bbd75fc583" translate="yes" xml:space="preserve">
          <source>Now, let&amp;rsquo;s create a Django view that handles the submitted data and does something with it. Remember, in &lt;a href=&quot;tutorial03&quot;&gt;Tutorial 3&lt;/a&gt;, we created a URLconf for the polls application that includes this line:</source>
          <target state="translated">이제 제출 된 데이터를 처리하고 관련 작업을 수행하는 Django 뷰를 만들어 보겠습니다. 에 기억 &lt;a href=&quot;tutorial03&quot;&gt;튜토리얼 3&lt;/a&gt; , 우리는이 라인을 포함하는 여론 조사 응용 프로그램에 대한 URLconf를 만들었습니다 :</target>
        </trans-unit>
        <trans-unit id="38f59dfc7640b31e36394dc7c9a2f46f24eb17ba" translate="yes" xml:space="preserve">
          <source>Now, let&amp;rsquo;s hop into the interactive Python shell and play around with the free API Django gives you. To invoke the Python shell, use this command:</source>
          <target state="translated">이제 대화 형 Python 셸을 살펴보고 Django가 제공하는 무료 API를 사용해 봅시다. Python 셸을 호출하려면 다음 명령을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="7cbef95cf75c7a3f4b4837de306a008dbc014431" translate="yes" xml:space="preserve">
          <source>Now, let&amp;rsquo;s tackle the question detail view &amp;ndash; the page that displays the question text for a given poll. Here&amp;rsquo;s the view:</source>
          <target state="translated">이제 설문에 대한 질문 텍스트를 표시하는 페이지 인 질문 세부 사항보기를 다루겠습니다. 보기는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b460cbb07f78017c0c6f37a652de30bf9aafdb00" translate="yes" xml:space="preserve">
          <source>Now, open a Web browser and go to &amp;ldquo;/admin/&amp;rdquo; on your local domain &amp;ndash; e.g., &lt;a href=&quot;http://127.0.0.1:8000/admin/&quot;&gt;http://127.0.0.1:8000/admin/&lt;/a&gt;. You should see the admin&amp;rsquo;s login screen:</source>
          <target state="translated">이제 웹 브라우저를 열고 로컬 도메인의 &quot;/ admin /&quot;(예 : &lt;a href=&quot;http://127.0.0.1:8000/admin/&quot;&gt;http://127.0.0.1:8000/admin/)으로 이동하십시오&lt;/a&gt; . 관리자의 로그인 화면이 나타납니다.</target>
        </trans-unit>
        <trans-unit id="2b81dff36c6dd0997b6aebdd48e22ac831af4eec" translate="yes" xml:space="preserve">
          <source>Now, open the world borders shapefile using GeoDjango&amp;rsquo;s &lt;a href=&quot;gdal#django.contrib.gis.gdal.DataSource&quot;&gt;&lt;code&gt;DataSource&lt;/code&gt;&lt;/a&gt; interface:</source>
          <target state="translated">이제 GeoDjango의 &lt;a href=&quot;gdal#django.contrib.gis.gdal.DataSource&quot;&gt; &lt;code&gt;DataSource&lt;/code&gt; &lt;/a&gt; 인터페이스를 사용하여 월드 경계 모양 파일을 엽니 다 .</target>
        </trans-unit>
        <trans-unit id="19494074e0ce6b931ea15036d66465f2093b1be8" translate="yes" xml:space="preserve">
          <source>Now, open up &lt;code&gt;mysite/settings.py&lt;/code&gt;. It&amp;rsquo;s a normal Python module with module-level variables representing Django settings.</source>
          <target state="translated">이제 &lt;code&gt;mysite/settings.py&lt;/code&gt; 를 엽니 다 . Django 설정을 나타내는 모듈 수준 변수가있는 일반적인 Python 모듈입니다.</target>
        </trans-unit>
        <trans-unit id="98eda674a05d556734adf8bf7b9aad9a8c246679" translate="yes" xml:space="preserve">
          <source>Now, our &lt;code&gt;my_callback&lt;/code&gt; function will be called each time a request finishes.</source>
          <target state="translated">이제 &lt;code&gt;my_callback&lt;/code&gt; 함수는 요청이 완료 될 때마다 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="23d68917d434ad1e2573241b966e9bc0d51a64c4" translate="yes" xml:space="preserve">
          <source>Now, run &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; again to create those model tables in your database:</source>
          <target state="translated">이제 &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt; &lt;code&gt;migrate&lt;/code&gt; 를&lt;/a&gt; 다시 실행 하여 데이터베이스에 해당 모델 테이블을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="f6a08d106d707a8e05cb59e3d025bf0cc3bf4b7b" translate="yes" xml:space="preserve">
          <source>Now, the queryset &lt;code&gt;Author.objects.filter(name__upper=&quot;doe&quot;)&lt;/code&gt; will generate a case insensitive query like this:</source>
          <target state="translated">이제 queryset &lt;code&gt;Author.objects.filter(name__upper=&quot;doe&quot;)&lt;/code&gt; 는 다음과 같이 대소 문자를 구분하지 않는 쿼리를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="019b413f09c92b059447ea74193178d9efd7b8c3" translate="yes" xml:space="preserve">
          <source>Now, try logging in with the superuser account you created in the previous step. You should see the Django admin index page:</source>
          <target state="translated">이제 이전 단계에서 생성 한 수퍼 유저 계정으로 로그인하십시오. Django 관리자 색인 페이지가 표시되어야합니다.</target>
        </trans-unit>
        <trans-unit id="32c93024bff623c4289921c3b56bd9587350c8d3" translate="yes" xml:space="preserve">
          <source>Number of Arguments</source>
          <target state="translated">인수 개수</target>
        </trans-unit>
        <trans-unit id="116820b9b73509743abf48a1acbf4dddd83206b7" translate="yes" xml:space="preserve">
          <source>Number of days in the given month.</source>
          <target state="translated">주어진 달의 일수.</target>
        </trans-unit>
        <trans-unit id="b04cb777db62302a02b9d216b8670b547ad281d0" translate="yes" xml:space="preserve">
          <source>Number of digits grouped together on the integer part of a number.</source>
          <target state="translated">숫자의 정수 부분에 그룹화 된 자릿수입니다.</target>
        </trans-unit>
        <trans-unit id="95f9d371df5b0ffd2cc6176a1143927d2193cd4f" translate="yes" xml:space="preserve">
          <source>Numeric index lookup</source>
          <target state="translated">숫자 인덱스 조회</target>
        </trans-unit>
        <trans-unit id="fb91068c51189c866a8e510b38ba4dfebf5d32bc" translate="yes" xml:space="preserve">
          <source>ODBC</source>
          <target state="translated">ODBC</target>
        </trans-unit>
        <trans-unit id="662cf8bb9e3967038266eb1080ea6e4e8ea74f98" translate="yes" xml:space="preserve">
          <source>OGC Well Known Text (WKT) (a string)</source>
          <target state="translated">OGC 잘 알려진 텍스트 (WKT) (문자열)</target>
        </trans-unit>
        <trans-unit id="290c05886911d59cc8d674f70d003a43dc32e88b" translate="yes" xml:space="preserve">
          <source>OGR Geometries</source>
          <target state="translated">OGR 도형</target>
        </trans-unit>
        <trans-unit id="5c43e7d2987cbaac40255a43821f767dd0fadb67" translate="yes" xml:space="preserve">
          <source>OGR Inspection</source>
          <target state="translated">OGR 검사</target>
        </trans-unit>
        <trans-unit id="a58dcb8d2f4fd78a7f09ddeec7fda1d4d46d2e33" translate="yes" xml:space="preserve">
          <source>OK, we have our Question admin page, but a &lt;code&gt;Question&lt;/code&gt; has multiple &lt;code&gt;Choice&lt;/code&gt;s, and the admin page doesn&amp;rsquo;t display choices.</source>
          <target state="translated">자, 우리는 질문 관리 페이지를 가지고 있지만 &lt;code&gt;Question&lt;/code&gt; 은 여러 &lt;code&gt;Choice&lt;/code&gt; 사항을 가지고 있으며 관리 페이지는 선택 사항을 표시하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1cca936963e1216accc3c85fd19f87c15dacffe3" translate="yes" xml:space="preserve">
          <source>OR (&lt;code&gt;|&lt;/code&gt;)</source>
          <target state="translated">OR ( &lt;code&gt;|&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="8399256020378bed8c3d8bb2e9c6938a2d24c39c" translate="yes" xml:space="preserve">
          <source>OSGeo4W</source>
          <target state="translated">OSGeo4W</target>
        </trans-unit>
        <trans-unit id="60967688a30a09eb09743791c704681612911e27" translate="yes" xml:space="preserve">
          <source>Object identity. Tests if two values are the same object. Example:</source>
          <target state="translated">객체 정체성. 두 값이 동일한 객체인지 테스트합니다. 예:</target>
        </trans-unit>
        <trans-unit id="1138c91041e87452fb65f50c02a6263c018cceb2" translate="yes" xml:space="preserve">
          <source>Object oriented techniques such as mixins (multiple inheritance) can be used to factor code into reusable components.</source>
          <target state="translated">mixin (다중 상속)과 같은 객체 지향 기술을 사용하여 코드를 재사용 가능한 구성 요소로 분해 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3c3732315e88d1732eac3020ab7ae166984c473a" translate="yes" xml:space="preserve">
          <source>Object-level permissions</source>
          <target state="translated">객체 수준 권한</target>
        </trans-unit>
        <trans-unit id="30cbdb8ef956e08ea0a8a7249b15ecf177cfcdce" translate="yes" xml:space="preserve">
          <source>Objects of protected types are preserved as-is when passed to &lt;code&gt;force_str(strings_only=True)&lt;/code&gt;.</source>
          <target state="translated">보호 된 유형의 객체는 &lt;code&gt;force_str(strings_only=True)&lt;/code&gt; 전달 될 때있는 그대로 유지됩니다 .</target>
        </trans-unit>
        <trans-unit id="89bdb07bfaaf9bcd97ef26d457c9af59af02d739" translate="yes" xml:space="preserve">
          <source>Obtaining an instance of an email backend</source>
          <target state="translated">이메일 백엔드 인스턴스 확보</target>
        </trans-unit>
        <trans-unit id="0ee2fe4c89c33b784169dc3bdcf688393360399b" translate="yes" xml:space="preserve">
          <source>Obtaining sufficient privileges</source>
          <target state="translated">충분한 권한 얻기</target>
        </trans-unit>
        <trans-unit id="2c1bf815eac71da64c2550da0f9bbeb63ce8fbb8" translate="yes" xml:space="preserve">
          <source>Occasionally you may want to turn off this feature for other reasons, and tell the template system to leave a variable uncalled no matter what. To do so, set a &lt;code&gt;do_not_call_in_templates&lt;/code&gt; attribute on the callable with the value &lt;code&gt;True&lt;/code&gt;. The template system then will act as if your variable is not callable (allowing you to access attributes of the callable, for example).</source>
          <target state="translated">때때로 다른 이유로이 기능을 끄고 템플릿 시스템에 변수에 관계없이 변수를 남기지 말라고 지시 할 수 있습니다. 그렇게하려면 , 호출 가능 파일에 &lt;code&gt;do_not_call_in_templates&lt;/code&gt; 속성을 &lt;code&gt;True&lt;/code&gt; 값으로 설정하십시오 . 그러면 템플릿 시스템은 변수를 호출 할 수없는 것처럼 작동합니다 (예를 들어 호출 가능한 속성에 액세스 할 수 있도록 허용).</target>
        </trans-unit>
        <trans-unit id="dc14009bad7130e19f5888d5db446a5a88ed6bba" translate="yes" xml:space="preserve">
          <source>Of course the &lt;code&gt;{% static %}&lt;/code&gt; template tag is not available for use in static files like your stylesheet which aren&amp;rsquo;t generated by Django. You should always use &lt;strong&gt;relative paths&lt;/strong&gt; to link your static files between each other, because then you can change &lt;a href=&quot;../ref/settings#std:setting-STATIC_URL&quot;&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/a&gt; (used by the &lt;a href=&quot;../ref/templates/builtins#std:templatetag-static&quot;&gt;&lt;code&gt;static&lt;/code&gt;&lt;/a&gt; template tag to generate its URLs) without having to modify a bunch of paths in your static files as well.</source>
          <target state="translated">물론 Django에서 생성하지 않은 스타일 시트와 같은 정적 파일 에는 &lt;code&gt;{% static %}&lt;/code&gt; 템플릿 태그를 사용할 수 없습니다. 정적 파일 에서 여러 경로를 수정하지 않고도 정적 파일을 URL을 생성하기 위해 &lt;a href=&quot;../ref/templates/builtins#std:templatetag-static&quot;&gt; &lt;code&gt;static&lt;/code&gt; &lt;/a&gt; 템플릿 태그에서 사용하는 &lt;a href=&quot;../ref/settings#std:setting-STATIC_URL&quot;&gt; &lt;code&gt;STATIC_URL&lt;/code&gt; &lt;/a&gt; 을 변경할 수 있기 때문에 항상 &lt;strong&gt;상대 경로&lt;/strong&gt; 를 사용 하여 정적 파일을 서로 연결해야 합니다.</target>
        </trans-unit>
        <trans-unit id="1bfb2ce81e6431b7c29d4d51f74af68b25c65c1b" translate="yes" xml:space="preserve">
          <source>Of course, as with all deployment tasks, the devil&amp;rsquo;s in the details. Every production setup will be a bit different, so you&amp;rsquo;ll need to adapt the basic outline to fit your needs. Below are a few common patterns that might help.</source>
          <target state="translated">물론 모든 배포 작업과 마찬가지로 악마도 세부 사항에 있습니다. 모든 프로덕션 설정은 조금씩 다르므로 필요에 맞게 기본 개요를 조정해야합니다. 다음은 도움이 될 수있는 몇 가지 일반적인 패턴입니다.</target>
        </trans-unit>
        <trans-unit id="3138d541751c54ebe3947e00d873e0cb999fdf5a" translate="yes" xml:space="preserve">
          <source>Of course, because &lt;code&gt;get_queryset()&lt;/code&gt; returns a &lt;code&gt;QuerySet&lt;/code&gt; object, you can use &lt;code&gt;filter()&lt;/code&gt;, &lt;code&gt;exclude()&lt;/code&gt; and all the other &lt;code&gt;QuerySet&lt;/code&gt; methods on it. So these statements are all legal:</source>
          <target state="translated">물론 &lt;code&gt;get_queryset()&lt;/code&gt; 은 &lt;code&gt;QuerySet&lt;/code&gt; 객체를 반환 하기 때문에 &lt;code&gt;filter()&lt;/code&gt; , &lt;code&gt;exclude()&lt;/code&gt; 및 기타 모든 &lt;code&gt;QuerySet&lt;/code&gt; 메소드를 사용할 수 있습니다. 따라서 이러한 진술은 모두 합법적입니다.</target>
        </trans-unit>
        <trans-unit id="339c185649670de6cadadffe96de30e0ea152c7b" translate="yes" xml:space="preserve">
          <source>Of course, if you don&amp;rsquo;t add the &lt;code&gt;related_query_name&lt;/code&gt;, you can do the same types of lookups manually:</source>
          <target state="translated">물론 &lt;code&gt;related_query_name&lt;/code&gt; 을 추가하지 않으면 동일한 유형의 조회를 수동으로 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5ace8e5a78b0b07e276c3f79bec3e8c57d8d2cf9" translate="yes" xml:space="preserve">
          <source>Of course, if you don&amp;rsquo;t use the database cache backend, you don&amp;rsquo;t need to worry about providing routing instructions for the database cache model.</source>
          <target state="translated">물론 데이터베이스 캐시 백엔드를 사용하지 않으면 데이터베이스 캐시 모델에 대한 라우팅 지침을 제공 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="527c38a6fe862bcf884025c788e8189ecf445b95" translate="yes" xml:space="preserve">
          <source>Of course, it isn&amp;rsquo;t enough to just put logging calls into your code. You also need to configure the loggers, handlers, filters and formatters to ensure that logging output is output in a useful way.</source>
          <target state="translated">물론 로깅 호출을 코드에 넣는 것만으로는 충분하지 않습니다. 또한 로깅 출력이 유용한 방식으로 출력되도록 로거, 핸들러, 필터 및 포맷터를 구성해야합니다.</target>
        </trans-unit>
        <trans-unit id="fcc549ed333af5c6dc1f30c1549598ffa992a9e4" translate="yes" xml:space="preserve">
          <source>Of course, it&amp;rsquo;s ugly to hard-code the site IDs like that. This sort of hard-coding is best for hackish fixes that you need done quickly. The cleaner way of accomplishing the same thing is to check the current site&amp;rsquo;s domain:</source>
          <target state="translated">물론, 그런 사이트 ID를 하드 코딩하는 것은 추악합니다. 이러한 종류의 하드 코딩은 신속하게 수행해야하는 해시 수정에 가장 적합합니다. 동일한 작업을 수행하는 더 확실한 방법은 현재 사이트의 도메인을 확인하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="30da449e73eca2c680c3454cfd47b5e1c988d5a8" translate="yes" xml:space="preserve">
          <source>Of course, specifying a custom reverse manager also enables you to call its custom methods:</source>
          <target state="translated">물론 사용자 정의 리버스 관리자를 지정하면 해당 사용자 정의 메소드를 호출 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="3559c4a540af23819f57c71ccbe9f2efbc63b105" translate="yes" xml:space="preserve">
          <source>Of course, the &lt;code&gt;best_pizza&lt;/code&gt; relationship could also be fetched using &lt;code&gt;select_related&lt;/code&gt; to reduce the query count to 2:</source>
          <target state="translated">물론 &lt;code&gt;select_related&lt;/code&gt; 를 사용하여 &lt;code&gt;best_pizza&lt;/code&gt; 관계를 페치하여 쿼리 수를 2로 줄일 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f2e2608c2269e9abaf6c0d87ce7cd4ef673445a8" translate="yes" xml:space="preserve">
          <source>Of course, the price of this flexibility is more work. Until now we haven&amp;rsquo;t had to worry about how to display form errors, because that&amp;rsquo;s taken care of for us. In this example we have had to make sure we take care of any errors for each field and any errors for the form as a whole. Note &lt;code&gt;{{ form.non_field_errors
}}&lt;/code&gt; at the top of the form and the template lookup for errors on each field.</source>
          <target state="translated">물론이 유연성의 가격은 더 많은 작업입니다. 지금까지 양식 오류를 표시하는 방법에 대해 걱정할 필요가 없었습니다. 이 예에서는 각 필드에 대한 오류와 양식 전체에 대한 오류를 처리해야합니다. 참고 &lt;code&gt;{{ form.non_field_errors }}&lt;/code&gt; 형태의 상단과 각 필드의 오류에 대한 템플릿 조회에서.</target>
        </trans-unit>
        <trans-unit id="0b051c52844da773f0bf17768634155ead973ec0" translate="yes" xml:space="preserve">
          <source>Of course, these arguments can be used together.</source>
          <target state="translated">물론, 이러한 주장들은 함께 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b45a927f98e4c7ad1501b4da064e9694f24affbf" translate="yes" xml:space="preserve">
          <source>Of course, this example isn&amp;rsquo;t very exciting &amp;ndash; it&amp;rsquo;s exactly the same as running &lt;code&gt;Person.objects.all()&lt;/code&gt;. However, &lt;code&gt;raw()&lt;/code&gt; has a bunch of other options that make it very powerful.</source>
          <target state="translated">물론이 예제는 흥미롭지는 않지만 &lt;code&gt;Person.objects.all()&lt;/code&gt; 실행과 동일 합니다. 그러나 &lt;code&gt;raw()&lt;/code&gt; 에는 매우 강력한 다른 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="cdb127b59fbd7b604d617baf8fd8c288a7b18b4d" translate="yes" xml:space="preserve">
          <source>Of course, you can also tell your users to put &lt;code&gt;'rock_n_roll.apps.RockNRollConfig'&lt;/code&gt; in their &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting. You can even provide several different &lt;a href=&quot;#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; subclasses with different behaviors and allow your users to choose one via their &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">물론 사용자에게 &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 설정 에 &lt;code&gt;'rock_n_roll.apps.RockNRollConfig'&lt;/code&gt; 를 넣도록 지시 할 수도 있습니다 . 다른 동작을 가진 여러 다른 &lt;a href=&quot;#django.apps.AppConfig&quot;&gt; &lt;code&gt;AppConfig&lt;/code&gt; &lt;/a&gt; 서브 클래스를 제공 하고 사용자가 &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 설정을 통해 하나를 선택할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f16c3b04076cad0a812a7a10dc4a605fc752bf57" translate="yes" xml:space="preserve">
          <source>Often it is expensive (that is, resource-hungry and slow) to compute a value, so there can be huge benefit in saving the value to a quickly accessible cache, ready for the next time it&amp;rsquo;s required.</source>
          <target state="translated">값을 계산하는 데 비용이 많이 들기 때문에 (즉, 리소스가 많이 걸리고 느려짐) 값을 빠르게 액세스 할 수있는 캐시에 저장하면 다음에 필요할 때 준비 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8b78e944a624797ce2f6db948d2279c2ab3117b8" translate="yes" xml:space="preserve">
          <source>Often you need to present some extra information beyond that provided by the generic view. For example, think of showing a list of all the books on each publisher detail page. The &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt; generic view provides the publisher to the context, but how do we get additional information in that template?</source>
          <target state="translated">종종 일반적인 관점에서 제공하는 것 이외의 추가 정보를 제시해야합니다. 예를 들어, 각 출판사 세부 사항 페이지에 모든 책의 목록을 표시한다고 가정하십시오. &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt; &lt;code&gt;DetailView&lt;/code&gt; &lt;/a&gt; 일반적인보기는 문맥에 게시자를 제공하지만, 우리는 어떻게 그 템플릿에 추가 정보를 얻을 수 있습니까?</target>
        </trans-unit>
        <trans-unit id="6179c551e66fb1509d096aba5f29780dd1197fb9" translate="yes" xml:space="preserve">
          <source>Often you want the search engine crawlers to index views which are neither object detail pages nor flatpages. The solution is to explicitly list URL names for these views in &lt;code&gt;items&lt;/code&gt; and call &lt;a href=&quot;../urlresolvers#django.urls.reverse&quot;&gt;&lt;code&gt;reverse()&lt;/code&gt;&lt;/a&gt; in the &lt;code&gt;location&lt;/code&gt; method of the sitemap. For example:</source>
          <target state="translated">종종 검색 엔진 크롤러가 개체 세부 사항 페이지 나 플랫 페이지가 아닌보기를 인덱싱하기를 원합니다. 해결책은 &lt;code&gt;items&lt;/code&gt; 에 이러한보기의 URL 이름을 명시 적으로 나열 하고 사이트 맵 의 &lt;code&gt;location&lt;/code&gt; 메소드 에서 &lt;a href=&quot;../urlresolvers#django.urls.reverse&quot;&gt; &lt;code&gt;reverse()&lt;/code&gt; &lt;/a&gt; 를 호출 하는 것입니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f81feb967d1e47b1a7a307eacaa07cfd1652c9e4" translate="yes" xml:space="preserve">
          <source>Often, you will just want to use the parent class to hold information that you don&amp;rsquo;t want to have to type out for each child model. This class isn&amp;rsquo;t going to ever be used in isolation, so &lt;a href=&quot;#abstract-base-classes&quot;&gt;Abstract base classes&lt;/a&gt; are what you&amp;rsquo;re after.</source>
          <target state="translated">종종 부모 클래스를 사용하여 각 자식 모델에 대해 입력하지 않아도되는 정보를 보유하려고합니다. 이 클래스는 단독으로 사용되지 않으므로 &lt;a href=&quot;#abstract-base-classes&quot;&gt;Abstract 기본 클래스&lt;/a&gt; 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b05a5f2fb24b871d13e27678513c61dfb1f55427" translate="yes" xml:space="preserve">
          <source>Oh, and one more thing: making humans edit XML is sadistic!</source>
          <target state="translated">아, 그리고 한 가지 더 : 인간이 XML을 편집하게하는 것은 비참합니다!</target>
        </trans-unit>
        <trans-unit id="eca5f76268f199f0b3cfebb0d68b71bb23c8d38a" translate="yes" xml:space="preserve">
          <source>Older version of Django will eventually no longer receive security updates. (see &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/release-process/#supported-versions-policy&quot;&gt;Supported versions&lt;/a&gt;).</source>
          <target state="translated">이전 버전의 Django는 더 이상 보안 업데이트를받지 않습니다. ( &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/release-process/#supported-versions-policy&quot;&gt;지원되는 버전&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="87b1b047909da2fb1a82bf3394d62da9dc8ee40a" translate="yes" xml:space="preserve">
          <source>Older versions don&amp;rsquo;t display model properties.</source>
          <target state="translated">이전 버전은 모델 속성을 표시하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1236aef81022c4e6ffb10318683fd9a5227e19ab" translate="yes" xml:space="preserve">
          <source>Older versions of Django require the &lt;code&gt;name&lt;/code&gt; argument for all versions of Python.</source>
          <target state="translated">이전 버전의 Django에는 모든 버전의 Python에 대한 &lt;code&gt;name&lt;/code&gt; 인수가 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="10ec9d5b7946a13c106294a63c16870358b0e25b" translate="yes" xml:space="preserve">
          <source>Omits the primary key in the serialized data of this object since it can be calculated during deserialization.</source>
          <target state="translated">역 직렬화 중에 계산할 수 있으므로이 객체의 직렬화 된 데이터에서 기본 키를 생략합니다.</target>
        </trans-unit>
        <trans-unit id="b9826f39dc51cb2574613e0058661470274d2713" translate="yes" xml:space="preserve">
          <source>On Debian/Ubuntu, you are advised to install the following packages which will install, directly or by dependency, the required geospatial libraries:</source>
          <target state="translated">데비안 / 우분투에서는 필요한 지리 공간 라이브러리를 직접 또는 종속적으로 설치하는 다음 패키지를 설치하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="3fd4a5308445d55b19d8fb010b7fb03ba7766bfa" translate="yes" xml:space="preserve">
          <source>On Debian/Ubuntu, you are advised to install the following packages: postgresql-x.x, postgresql-x.x-postgis, postgresql-server-dev-x.x, python-psycopg2 (x.x matching the PostgreSQL version you want to install). Alternately, you can &lt;a href=&quot;https://postgis.net/docs/postgis_installation.html#install_short_version&quot;&gt;build from source&lt;/a&gt;. Consult the platform-specific instructions if you are on &lt;a href=&quot;index#macos&quot;&gt;macOS&lt;/a&gt; or &lt;a href=&quot;index#windows&quot;&gt;Windows&lt;/a&gt;.</source>
          <target state="translated">데비안 / 우분투에서는 postgresql-xx, postgresql-xx-postgis, postgresql-server-dev-xx, python-psycopg2 (xx는 설치하려는 PostgreSQL 버전과 일치) 패키지를 설치하는 것이 좋습니다. 또는 &lt;a href=&quot;https://postgis.net/docs/postgis_installation.html#install_short_version&quot;&gt;source에서 빌드&lt;/a&gt; 할 수 있습니다 . &lt;a href=&quot;index#macos&quot;&gt;macOS&lt;/a&gt; 또는 &lt;a href=&quot;index#windows&quot;&gt;Windows&lt;/a&gt; 에있는 경우 플랫폼 별 지침을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a82dbf3165cbd0a452eb5b7752d0d864094e5ff4" translate="yes" xml:space="preserve">
          <source>On GNU/Linux systems, there is typically a file in &lt;code&gt;/etc/ld.so.conf&lt;/code&gt;, which may include additional paths from files in another directory, such as &lt;code&gt;/etc/ld.so.conf.d&lt;/code&gt;. As the root user, add the custom library path (like &lt;code&gt;/usr/local/lib&lt;/code&gt;) on a new line in &lt;code&gt;ld.so.conf&lt;/code&gt;. This is &lt;em&gt;one&lt;/em&gt; example of how to do so:</source>
          <target state="translated">GNU / Linux 시스템에는 일반적으로 &lt;code&gt;/etc/ld.so.conf&lt;/code&gt; 에 파일이 있으며 , 여기에는 &lt;code&gt;/etc/ld.so.conf.d&lt;/code&gt; 와 같은 다른 디렉토리에있는 파일의 추가 경로가 포함될 수 있습니다 . 루트 사용자로서 &lt;code&gt;ld.so.conf&lt;/code&gt; 의 새 행에 사용자 정의 라이브러리 경로 (예 : &lt;code&gt;/usr/local/lib&lt;/code&gt; )를 추가하십시오 . 이를 수행하는 방법의 &lt;em&gt;한&lt;/em&gt; 예입니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c469cf17feb53e87d1d7993315a9037108c1435c" translate="yes" xml:space="preserve">
          <source>On Lawrence.com, this email has the subject line &amp;ldquo;Thanks for subscribing to lawrence.com alerts.&amp;rdquo; On LJWorld.com, the email has the subject &amp;ldquo;Thanks for subscribing to LJWorld.com alerts.&amp;rdquo; Same goes for the email&amp;rsquo;s message body.</source>
          <target state="translated">Lawrence.com에서이 이메일의 제목은&amp;ldquo;lawrence.com 알림을 보내 주셔서 감사합니다.&amp;rdquo;입니다. LJWorld.com의 이메일에는 &quot;LJWorld.com 알림을 구독 해 주셔서 감사합니다&quot;라는 제목이 있습니다. 이메일의 메시지 본문도 마찬가지입니다.</target>
        </trans-unit>
        <trans-unit id="09825e1bf4715078c02662b5c1463d166eb2bd68" translate="yes" xml:space="preserve">
          <source>On Linux platforms, it may be necessary to run the &lt;code&gt;ldconfig&lt;/code&gt; command after installing each library. For example:</source>
          <target state="translated">Linux 플랫폼에서 각 라이브러리를 설치 한 후 &lt;code&gt;ldconfig&lt;/code&gt; 명령 을 실행해야 할 수도 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="5b7489f228770df5c4f89793fb295c0eb5f80335" translate="yes" xml:space="preserve">
          <source>On MySQL, returns &lt;code&gt;None&lt;/code&gt; for any non-&lt;code&gt;LINESTRING&lt;/code&gt; geometry.</source>
          <target state="translated">MySQL에서는 &lt;code&gt;LINESTRING&lt;/code&gt; 이외의 지오메트리에 대해 &lt;code&gt;None&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="c479465cf9d6eb8433e919653828b13ecb2fedc6" translate="yes" xml:space="preserve">
          <source>On MySQL, returns &lt;code&gt;None&lt;/code&gt; for single geometries.</source>
          <target state="translated">MySQL에서는 단일 지오메트리에 대해 &lt;code&gt;None&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="9423ea6ae9f5742f7782982188883a7624b6df11" translate="yes" xml:space="preserve">
          <source>On PostGIS and SpatiaLite, when the coordinates are geodetic (angular), you can specify if the calculation should be based on a simple sphere (less accurate, less resource-intensive) or on a spheroid (more accurate, more resource-intensive) with the &lt;code&gt;spheroid&lt;/code&gt; keyword argument.</source>
          <target state="translated">PostGIS 및 SpatiaLite에서 좌표가 측지 (각도) 일 때 계산이 간단한 구 (적은 정확도, 적은 자원 집약적) 또는 스페 로이드 (보다 정확하고 더 많은 자원 집중)를 기반으로할지 여부를 지정할 수 있습니다. &lt;code&gt;spheroid&lt;/code&gt; 키워드 인수.</target>
        </trans-unit>
        <trans-unit id="e7bc6aa4387e8af5e72d849e5f9186d63d8f8b76" translate="yes" xml:space="preserve">
          <source>On PostgreSQL only, you can pass positional arguments (&lt;code&gt;*fields&lt;/code&gt;) in order to specify the names of fields to which the &lt;code&gt;DISTINCT&lt;/code&gt; should apply. This translates to a &lt;code&gt;SELECT DISTINCT ON&lt;/code&gt; SQL query. Here&amp;rsquo;s the difference. For a normal &lt;code&gt;distinct()&lt;/code&gt; call, the database compares &lt;em&gt;each&lt;/em&gt; field in each row when determining which rows are distinct. For a &lt;code&gt;distinct()&lt;/code&gt; call with specified field names, the database will only compare the specified field names.</source>
          <target state="translated">PostgreSQL에서만 &lt;code&gt;DISTINCT&lt;/code&gt; 를 적용 할 필드 이름을 지정하기 위해 위치 인수 ( &lt;code&gt;*fields&lt;/code&gt; )를 전달할 수 있습니다. 이는 &lt;code&gt;SELECT DISTINCT ON&lt;/code&gt; SQL 쿼리로 변환됩니다 . 차이점이 있습니다. 정상적인 &lt;code&gt;distinct()&lt;/code&gt; 호출의 경우 데이터베이스는 구별되는 행을 결정할 때 각 행의 &lt;em&gt;각&lt;/em&gt; 필드를 비교합니다 . A에 대한 &lt;code&gt;distinct()&lt;/code&gt; 지정된 필드 이름과 전화, 데이터베이스는 지정된 필드 이름을 비교합니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d3ed2b681cc5211a1b79d3ad34cfeacc6f5daf13" translate="yes" xml:space="preserve">
          <source>On PostgreSQL, &lt;a href=&quot;../../ref/settings#std:setting-USER&quot;&gt;&lt;code&gt;USER&lt;/code&gt;&lt;/a&gt; will also need read access to the built-in &lt;code&gt;postgres&lt;/code&gt; database.</source>
          <target state="translated">PostgreSQL에서 &lt;a href=&quot;../../ref/settings#std:setting-USER&quot;&gt; &lt;code&gt;USER&lt;/code&gt; &lt;/a&gt; 는 내장 &lt;code&gt;postgres&lt;/code&gt; 데이터베이스에 대한 읽기 액세스 권한도 필요 합니다.</target>
        </trans-unit>
        <trans-unit id="e720f29b1479551b262a1c817ee9afc76e69cbd5" translate="yes" xml:space="preserve">
          <source>On PostgreSQL, server-side cursors will only be used when the &lt;a href=&quot;../settings#std:setting-DATABASE-DISABLE_SERVER_SIDE_CURSORS&quot;&gt;&lt;code&gt;DISABLE_SERVER_SIDE_CURSORS&lt;/code&gt;&lt;/a&gt; setting is &lt;code&gt;False&lt;/code&gt;. Read &lt;a href=&quot;../databases#transaction-pooling-server-side-cursors&quot;&gt;Transaction pooling and server-side cursors&lt;/a&gt; if you&amp;rsquo;re using a connection pooler configured in transaction pooling mode. When server-side cursors are disabled, the behavior is the same as databases that don&amp;rsquo;t support server-side cursors.</source>
          <target state="translated">PostgreSQL에서 서버 측 커서는 &lt;a href=&quot;../settings#std:setting-DATABASE-DISABLE_SERVER_SIDE_CURSORS&quot;&gt; &lt;code&gt;DISABLE_SERVER_SIDE_CURSORS&lt;/code&gt; &lt;/a&gt; 설정이 &lt;code&gt;False&lt;/code&gt; 인 경우에만 사용됩니다 . 트랜잭션 풀링 모드에서 구성된 연결 풀러를 사용하는 경우 &lt;a href=&quot;../databases#transaction-pooling-server-side-cursors&quot;&gt;트랜잭션 풀링 및 서버 측 커서를&lt;/a&gt; 읽으십시오 . 서버 측 커서가 비활성화되면 동작은 서버 측 커서를 지원하지 않는 데이터베이스와 동일합니다.</target>
        </trans-unit>
        <trans-unit id="231d27d56a450bb1d7a023aede748b738f5350bc" translate="yes" xml:space="preserve">
          <source>On PostgreSQL, the &lt;code&gt;'spheroid'&lt;/code&gt; option uses &lt;a href=&quot;https://postgis.net/docs/ST_Distance_Spheroid.html&quot;&gt;ST_DistanceSpheroid&lt;/a&gt; instead of &lt;a href=&quot;https://postgis.net/docs/ST_DistanceSphere.html&quot;&gt;ST_DistanceSphere&lt;/a&gt;. The simpler &lt;a href=&quot;https://postgis.net/docs/ST_Distance.html&quot;&gt;ST_Distance&lt;/a&gt; function is used with projected coordinate systems. Rasters are converted to geometries for spheroid based lookups.</source>
          <target state="translated">PostgreSQL의에서 &lt;code&gt;'spheroid'&lt;/code&gt; 옵션 사용은 &lt;a href=&quot;https://postgis.net/docs/ST_Distance_Spheroid.html&quot;&gt;ST_DistanceSpheroid&lt;/a&gt; 대신 &lt;a href=&quot;https://postgis.net/docs/ST_DistanceSphere.html&quot;&gt;ST_DistanceSphere&lt;/a&gt; . 보다 간단한 &lt;a href=&quot;https://postgis.net/docs/ST_Distance.html&quot;&gt;ST_Distance&lt;/a&gt; 함수는 투영 좌표계와 함께 사용됩니다. 래스터는 회전 타원 기반 조회를 위해 형상으로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="feadeca3b502e38c5e7a1bb0d3cdda7e166c150a" translate="yes" xml:space="preserve">
          <source>On PostgreSQL, the SQL &lt;code&gt;CURRENT_TIMESTAMP&lt;/code&gt; returns the time that the current transaction started. Therefore for cross-database compatibility, &lt;code&gt;Now()&lt;/code&gt; uses &lt;code&gt;STATEMENT_TIMESTAMP&lt;/code&gt; instead. If you need the transaction timestamp, use &lt;a href=&quot;../contrib/postgres/functions#django.contrib.postgres.functions.TransactionNow&quot;&gt;&lt;code&gt;django.contrib.postgres.functions.TransactionNow&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">PostgreSQL에서 SQL &lt;code&gt;CURRENT_TIMESTAMP&lt;/code&gt; 는 현재 트랜잭션이 시작된 시간을 리턴합니다. 따라서 데이터베이스 간 호환성을 위해 &lt;code&gt;Now()&lt;/code&gt; 는 대신 &lt;code&gt;STATEMENT_TIMESTAMP&lt;/code&gt; 를 사용합니다. 트랜잭션 타임 스탬프가 필요한 경우 &lt;a href=&quot;../contrib/postgres/functions#django.contrib.postgres.functions.TransactionNow&quot;&gt; &lt;code&gt;django.contrib.postgres.functions.TransactionNow&lt;/code&gt; 를&lt;/a&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="171a834e14bec4fef794bc5172bffac81b861f95" translate="yes" xml:space="preserve">
          <source>On PostgreSQL, the SQL looks like:</source>
          <target state="translated">PostgreSQL에서 SQL은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6d1a678530b7cbd46006434001f4f57bbb5211cd" translate="yes" xml:space="preserve">
          <source>On Unix environments (where &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.tzset&quot;&gt;&lt;code&gt;time.tzset()&lt;/code&gt;&lt;/a&gt; is implemented), Django sets the &lt;code&gt;os.environ['TZ']&lt;/code&gt; variable to the time zone you specify in the &lt;a href=&quot;#std:setting-TIME_ZONE&quot;&gt;&lt;code&gt;TIME_ZONE&lt;/code&gt;&lt;/a&gt; setting. Thus, all your views and models will automatically operate in this time zone. However, Django won&amp;rsquo;t set the &lt;code&gt;TZ&lt;/code&gt; environment variable if you&amp;rsquo;re using the manual configuration option as described in &lt;a href=&quot;../topics/settings#settings-without-django-settings-module&quot;&gt;manually configuring settings&lt;/a&gt;. If Django doesn&amp;rsquo;t set the &lt;code&gt;TZ&lt;/code&gt; environment variable, it&amp;rsquo;s up to you to ensure your processes are running in the correct environment.</source>
          <target state="translated">Unix 환경 ( &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.tzset&quot;&gt; &lt;code&gt;time.tzset()&lt;/code&gt; &lt;/a&gt; 이 구현 된 곳)에서 Django는 &lt;code&gt;os.environ['TZ']&lt;/code&gt; 변수를 &lt;a href=&quot;#std:setting-TIME_ZONE&quot;&gt; &lt;code&gt;TIME_ZONE&lt;/code&gt; &lt;/a&gt; 설정 에서 지정한 시간대로 설정합니다. 따라서 모든 시간대와 뷰가이 시간대에서 자동으로 작동합니다. 그러나 Django는 &lt;a href=&quot;../topics/settings#settings-without-django-settings-module&quot;&gt;수동 구성 설정에&lt;/a&gt; 설명 된대로 수동 구성 옵션을 사용하는 경우 &lt;code&gt;TZ&lt;/code&gt; 환경 변수를 설정하지 않습니다 . Django가 &lt;code&gt;TZ&lt;/code&gt; 환경 변수를 설정하지 않으면 프로세스가 올바른 환경에서 실행되고 있는지 확인해야합니다.</target>
        </trans-unit>
        <trans-unit id="9d87034675bfeb09dc1e05ad5ad92358405b48c9" translate="yes" xml:space="preserve">
          <source>On Windows platforms you can use the pgAdmin III utility to add superuser privileges to your database user.</source>
          <target state="translated">Windows 플랫폼에서 pgAdmin III 유틸리티를 사용하여 데이터베이스 사용자에게 수퍼 유저 권한을 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="54cfe6ffa00bf56c62bc2f9682a4ade18bfc9dbc" translate="yes" xml:space="preserve">
          <source>On Windows, the REPL is output due to implementation limits of &lt;a href=&quot;https://docs.python.org/3/library/select.html#select.select&quot;&gt;&lt;code&gt;select.select()&lt;/code&gt;&lt;/a&gt; on that platform.</source>
          <target state="translated">Windows에서 REPL은 해당 플랫폼에서 &lt;a href=&quot;https://docs.python.org/3/library/select.html#select.select&quot;&gt; &lt;code&gt;select.select()&lt;/code&gt; &lt;/a&gt; 의 구현 한계로 인해 출력 됩니다.</target>
        </trans-unit>
        <trans-unit id="98e35620cab04b96e3ed65990cf570def39684a2" translate="yes" xml:space="preserve">
          <source>On a real Web page, you probably don&amp;rsquo;t want every widget to look the same. You might want a larger input element for the comment, and you might want the &amp;lsquo;name&amp;rsquo; widget to have some special CSS class. It is also possible to specify the &amp;lsquo;type&amp;rsquo; attribute to take advantage of the new HTML5 input types. To do this, you use the &lt;a href=&quot;#django.forms.Widget.attrs&quot;&gt;&lt;code&gt;Widget.attrs&lt;/code&gt;&lt;/a&gt; argument when creating the widget:</source>
          <target state="translated">실제 웹 페이지에서는 모든 위젯이 동일하게 표시되는 것을 원하지 않을 것입니다. 주석에 더 큰 입력 요소를 원할 수 있으며 'name'위젯에 특수 CSS 클래스가 필요합니다. 새로운 HTML5 입력 유형을 이용하기 위해 'type'속성을 지정할 수도 있습니다. 이를 위해 위젯을 작성할 때 &lt;a href=&quot;#django.forms.Widget.attrs&quot;&gt; &lt;code&gt;Widget.attrs&lt;/code&gt; &lt;/a&gt; 인수 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="e383a68178353fa8decc814cdf26f0a58017ac20" translate="yes" xml:space="preserve">
          <source>On a similar note, you might want to customize the look and feel of the Django admin index page.</source>
          <target state="translated">비슷한 메모에서 Django 관리자 색인 페이지의 모양과 느낌을 사용자 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e3513645906e49f967649384ce2aae2d3029c45e" translate="yes" xml:space="preserve">
          <source>On backends that support distance calculation on geodetic coordinates, the proper backend function is automatically chosen depending on the SRID value of the geometries (e.g. &lt;a href=&quot;https://postgis.net/docs/ST_DistanceSphere.html&quot;&gt;ST_DistanceSphere&lt;/a&gt; on PostGIS).</source>
          <target state="translated">측지 좌표에서 거리 계산을 지원하는 백엔드에서 형상의 SRID 값 (예 : PostGIS의 &lt;a href=&quot;https://postgis.net/docs/ST_DistanceSphere.html&quot;&gt;ST_DistanceSphere)&lt;/a&gt; 에 따라 적절한 백엔드 기능이 자동으로 선택됩니다 .</target>
        </trans-unit>
        <trans-unit id="5b43d185bfcf98e3e0ff7e26ab187ce7f129ec1c" translate="yes" xml:space="preserve">
          <source>On databases that do support DDL transactions (SQLite and PostgreSQL), &lt;code&gt;RunPython&lt;/code&gt; operations do not have any transactions automatically added besides the transactions created for each migration. Thus, on PostgreSQL, for example, you should avoid combining schema changes and &lt;code&gt;RunPython&lt;/code&gt; operations in the same migration or you may hit errors like &lt;code&gt;OperationalError: cannot
ALTER TABLE &quot;mytable&quot; because it has pending trigger events&lt;/code&gt;.</source>
          <target state="translated">DDL 트랜잭션 (SQLite 및 PostgreSQL)을 지원하는 데이터베이스에서 &lt;code&gt;RunPython&lt;/code&gt; 작업에는 각 마이그레이션에 대해 생성 된 트랜잭션 외에 트랜잭션이 자동으로 추가되지 않습니다. 따라서 PostgreSQL의 경우 동일한 마이그레이션에서 스키마 변경과 &lt;code&gt;RunPython&lt;/code&gt; 작업을 결합하지 않아야합니다 &lt;code&gt;OperationalError: cannot ALTER TABLE &quot;mytable&quot; because it has pending trigger events&lt;/code&gt; 과 같은 오류가 발생할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="11d4ca34e4865526ed3bab65d895985c1d8c7e06" translate="yes" xml:space="preserve">
          <source>On databases that support DDL transactions (SQLite and PostgreSQL), migrations will run inside a transaction by default. For use cases such as performing data migrations on large tables, you may want to prevent a migration from running in a transaction by setting the &lt;code&gt;atomic&lt;/code&gt; attribute to &lt;code&gt;False&lt;/code&gt;:</source>
          <target state="translated">DDL 트랜잭션 (SQLite 및 PostgreSQL)을 지원하는 데이터베이스에서는 기본적으로 마이그레이션이 트랜잭션 내에서 실행됩니다. 큰 테이블에서 데이터 마이그레이션을 수행하는 것과 같은 사용 사례의 경우 &lt;code&gt;atomic&lt;/code&gt; 속성을 &lt;code&gt;False&lt;/code&gt; 로 설정하여 트랜잭션에서 마이그레이션이 실행되지 않도록 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ca5b4e07c53341abd3017356f8a7dc9ef7ae499a" translate="yes" xml:space="preserve">
          <source>On databases that support it (all but Oracle), setting the &lt;code&gt;ignore_conflicts&lt;/code&gt; parameter to &lt;code&gt;True&lt;/code&gt; tells the database to ignore failure to insert any rows that fail constraints such as duplicate unique values. Enabling this parameter disables setting the primary key on each model instance (if the database normally supports it).</source>
          <target state="translated">이를 지원하는 데이터베이스 (Oracle 제외)에서 &lt;code&gt;ignore_conflicts&lt;/code&gt; 매개 변수를 &lt;code&gt;True&lt;/code&gt; 로 설정하면 중복 고유 값과 같이 제한 조건에 실패한 행을 삽입하지 못하도록 데이터베이스에 지시합니다. 이 매개 변수를 사용하면 각 모델 인스턴스에서 기본 키 설정을 사용할 수 없습니다 (데이터베이스가 일반적으로 지원하는 경우).</target>
        </trans-unit>
        <trans-unit id="df2a46b8e1aeddaad78520b882b9cdecf3e5c347" translate="yes" xml:space="preserve">
          <source>On every distance lookup except &lt;a href=&quot;#std:fieldlookup-dwithin&quot;&gt;&lt;code&gt;dwithin&lt;/code&gt;&lt;/a&gt;, an optional element, &lt;code&gt;'spheroid'&lt;/code&gt;, may be included to use the more accurate spheroid distance calculation functions on fields with a geodetic coordinate system.</source>
          <target state="translated">&lt;a href=&quot;#std:fieldlookup-dwithin&quot;&gt; &lt;code&gt;dwithin&lt;/code&gt; 을&lt;/a&gt; 제외한 모든 거리 조회 에서 측지 좌표계가있는 필드에서 더 정확한 회전 타원 거리 계산 기능을 사용하기 위해 선택적인 요소 &lt;code&gt;'spheroid'&lt;/code&gt; 가 포함될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5c16f183cbe43a1d74cb296d07073bd34180fa90" translate="yes" xml:space="preserve">
          <source>On occasions it may be useful to require or restrict the keys which are valid for a given field. This can be done using the &lt;a href=&quot;validators#django.contrib.postgres.validators.KeysValidator&quot;&gt;&lt;code&gt;KeysValidator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">경우에 따라 주어진 필드에 유효한 키를 요구하거나 제한하는 것이 유용 할 수 있습니다. 이것은 &lt;a href=&quot;validators#django.contrib.postgres.validators.KeysValidator&quot;&gt; &lt;code&gt;KeysValidator&lt;/code&gt; 를&lt;/a&gt; 사용하여 수행 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3135ae21a09a7d5963484b5886ed97c37f9aee36" translate="yes" xml:space="preserve">
          <source>On older databases, adding a field with a default value may cause a full rewrite of the table. This happens even for nullable fields and may have a negative performance impact. To avoid that, the following steps should be taken.</source>
          <target state="translated">이전 데이터베이스에서 기본값으로 필드를 추가하면 테이블을 완전히 다시 작성할 수 있습니다. 이는 널 입력 가능 필드에서도 발생하며 성능에 부정적인 영향을 줄 수 있습니다. 이를 피하려면 다음 단계를 수행해야합니다.</target>
        </trans-unit>
        <trans-unit id="7a602592df2f82b3d4e98221e99e6bdd1a6c483c" translate="yes" xml:space="preserve">
          <source>On other databases, this is emulated using a &lt;code&gt;CASE&lt;/code&gt; statement:</source>
          <target state="translated">다른 데이터베이스에서는 &lt;code&gt;CASE&lt;/code&gt; 문을 사용하여 에뮬레이션됩니다 .</target>
        </trans-unit>
        <trans-unit id="78d0d5f86c0751b63e02578856d36bc3a65a179a" translate="yes" xml:space="preserve">
          <source>On some databases, flags may cause the query to be executed which could have adverse effects on your database. For example, PostgreSQL&amp;rsquo;s &lt;code&gt;ANALYZE&lt;/code&gt; flag could result in changes to data if there are triggers or if a function is called, even for a &lt;code&gt;SELECT&lt;/code&gt; query.</source>
          <target state="translated">일부 데이터베이스에서 플래그를 사용하면 쿼리가 실행되어 데이터베이스에 부정적인 영향을 줄 수 있습니다. 예를 들어, PostgreSQL의 &lt;code&gt;ANALYZE&lt;/code&gt; 플래그는 트리거가 있거나 &lt;code&gt;SELECT&lt;/code&gt; 쿼리의 경우에도 함수가 호출되면 데이터가 변경 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="002dcb5bc58a7582b107d7e7d9659347ad64dcf4" translate="yes" xml:space="preserve">
          <source>On subsequent &lt;code&gt;collectstatic&lt;/code&gt; runs (if &lt;code&gt;STATIC_ROOT&lt;/code&gt; isn&amp;rsquo;t empty), files are copied only if they have a modified timestamp greater than the timestamp of the file in &lt;code&gt;STATIC_ROOT&lt;/code&gt;. Therefore if you remove an application from &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;, it&amp;rsquo;s a good idea to use the &lt;a href=&quot;#cmdoption-collectstatic-clear&quot;&gt;&lt;code&gt;collectstatic
--clear&lt;/code&gt;&lt;/a&gt; option in order to remove stale static files.</source>
          <target state="translated">후속 &lt;code&gt;collectstatic&lt;/code&gt; &lt;code&gt;STATIC_ROOT&lt;/code&gt; 실행 ( STATIC_ROOT 가 비어 있지 않은 경우)에서 파일은 수정 된 시간 소인이 &lt;code&gt;STATIC_ROOT&lt;/code&gt; 에있는 파일의 시간 소인보다 큰 경우에만 복사됩니다 . 따라서 &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 에서 애플리케이션을 제거하는 경우 오래된 정적 파일을 제거하기 위해 &lt;a href=&quot;#cmdoption-collectstatic-clear&quot;&gt; &lt;code&gt;collectstatic --clear&lt;/code&gt; &lt;/a&gt; 옵션 을 사용하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="26454cc1ad8a1430d9c48c7d5cb25125f3c45cef" translate="yes" xml:space="preserve">
          <source>On supported backends (memcached), &lt;code&gt;set_many()&lt;/code&gt; returns a list of keys that failed to be inserted.</source>
          <target state="translated">지원되는 백엔드 (memcached)에서 &lt;code&gt;set_many()&lt;/code&gt; 는 삽입에 실패한 키 목록을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="4b4ebcf96010e5ee4bcc0f23b425a4b14b45545e" translate="yes" xml:space="preserve">
          <source>On the left hand side of the example, &lt;code&gt;rast&lt;/code&gt; is the geographic raster field and &lt;a href=&quot;geoquerysets#std:fieldlookup-gis-contains&quot;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; is the spatial lookup type. On the right hand side, &lt;code&gt;geom&lt;/code&gt; is a geometry input and &lt;code&gt;rst&lt;/code&gt; is a &lt;a href=&quot;gdal#django.contrib.gis.gdal.GDALRaster&quot;&gt;&lt;code&gt;GDALRaster&lt;/code&gt;&lt;/a&gt; object. The band index defaults to &lt;code&gt;0&lt;/code&gt; in the first two queries and is set to &lt;code&gt;1&lt;/code&gt; on the others.</source>
          <target state="translated">예제의 왼쪽에서 &lt;code&gt;rast&lt;/code&gt; 는 지리적 래스터 필드이며 &lt;a href=&quot;geoquerysets#std:fieldlookup-gis-contains&quot;&gt; &lt;code&gt;contains&lt;/code&gt; &lt;/a&gt; 하는 공간 조회 유형입니다. 오른쪽에서 &lt;code&gt;geom&lt;/code&gt; 은 지오메트리 입력이고 &lt;code&gt;rst&lt;/code&gt; 는 &lt;a href=&quot;gdal#django.contrib.gis.gdal.GDALRaster&quot;&gt; &lt;code&gt;GDALRaster&lt;/code&gt; &lt;/a&gt; 객체입니다. 밴드 인덱스 기본값은 &lt;code&gt;0&lt;/code&gt; 처음 두 쿼리와가로 설정 &lt;code&gt;1&lt;/code&gt; 다른 사람에.</target>
        </trans-unit>
        <trans-unit id="da0ebe59862835efe42e9523305ea8c0bd6a5461" translate="yes" xml:space="preserve">
          <source>On the other hand, &lt;a href=&quot;../ref/models/querysets#when-querysets-are-evaluated&quot;&gt;certain operations will force the evaluation of a QuerySet&lt;/a&gt;. Avoiding the premature evaluation of a &lt;code&gt;QuerySet&lt;/code&gt; can save making an expensive and unnecessary trip to the database.</source>
          <target state="translated">반면에 &lt;a href=&quot;../ref/models/querysets#when-querysets-are-evaluated&quot;&gt;특정 작업은 QuerySet 평가를 강제합니다&lt;/a&gt; . &lt;code&gt;QuerySet&lt;/code&gt; 의 조기 평가를 피하면 비싸고 불필요한 데이터베이스 트립을 방지 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3d160b683bea44fcb1e91d7c5b1f06dc5559f378" translate="yes" xml:space="preserve">
          <source>On the other hand, &lt;code&gt;GET&lt;/code&gt; is suitable for things like a web search form, because the URLs that represent a &lt;code&gt;GET&lt;/code&gt; request can easily be bookmarked, shared, or resubmitted.</source>
          <target state="translated">반면에 &lt;code&gt;GET&lt;/code&gt; 은 웹 검색 양식과 같은 것들에 적합합니다. &lt;code&gt;GET&lt;/code&gt; 요청 을 나타내는 URL을 쉽게 북마크, 공유 또는 다시 제출할 수 있기 때문 입니다.</target>
        </trans-unit>
        <trans-unit id="6f7a7c5801c7d1a1d3369cd7df4b42ee61e93288" translate="yes" xml:space="preserve">
          <source>On the other hand, bugs caused by the lack of time zone support are much harder to prevent, diagnose and fix. Anything that involves scheduled tasks or datetime arithmetic is a candidate for subtle bugs that will bite you only once or twice a year.</source>
          <target state="translated">반면 시간대 지원 부족으로 인한 버그는 예방, 진단 및 수정하기가 훨씬 더 어렵습니다. 예약 된 작업 또는 날짜 / 시간 산술과 관련된 것은 일년에 한두 번만 물릴 수있는 미묘한 버그의 후보입니다.</target>
        </trans-unit>
        <trans-unit id="42997296bab7b08f1ceb56e2afd964aad5014fa4" translate="yes" xml:space="preserve">
          <source>On the other hand, by setting the &lt;code&gt;--verbosity&lt;/code&gt; flag to 2, you can get all the directories which were searched:</source>
          <target state="translated">반면 &lt;code&gt;--verbosity&lt;/code&gt; 플래그를 2 로 설정하면 검색된 모든 디렉토리를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="327d8b70bf9dd3f89730d860563313020b6f5624" translate="yes" xml:space="preserve">
          <source>On the other hand, if you are using a plain &lt;code&gt;FormSet&lt;/code&gt;, it&amp;rsquo;s up to you to handle &lt;code&gt;formset.deleted_forms&lt;/code&gt;, perhaps in your formset&amp;rsquo;s &lt;code&gt;save()&lt;/code&gt; method, as there&amp;rsquo;s no general notion of what it means to delete a form.</source>
          <target state="translated">반면에 일반 &lt;code&gt;FormSet&lt;/code&gt; 을 사용하는 경우 양식 삭제의 의미에 대한 일반적인 개념이 없기 때문에 formset의 &lt;code&gt;save()&lt;/code&gt; 메서드 에서 &lt;code&gt;formset.deleted_forms&lt;/code&gt; 를 처리하는 것은 사용자의 몫 입니다.</target>
        </trans-unit>
        <trans-unit id="b4d82efd4f41e1694a1ff4a96d13777aeea9b652" translate="yes" xml:space="preserve">
          <source>On the other hand, proxy models are intended to behave exactly like the model they are proxying for. They are always in sync with the parent model since they directly inherit its fields and managers.</source>
          <target state="translated">반면, 프록시 모델은 프록시 모델과 정확히 동일하게 작동합니다. 필드 및 관리자를 직접 상속하므로 항상 상위 모델과 동기화됩니다.</target>
        </trans-unit>
        <trans-unit id="9d9eb41739d72afbd8898888fd10f2dab6d9d4e3" translate="yes" xml:space="preserve">
          <source>On the other hand, when a savepoint is rolled back (due to an exception being raised), the inner callable will not be called:</source>
          <target state="translated">한편, 세이브 포인트가 롤백되면 (예외가 발생하여) 내부 호출 가능 호출이 호출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2a4daf554ed077861bb378c80a8f4c5b4b8037da" translate="yes" xml:space="preserve">
          <source>On the server (&lt;code&gt;mod_wsgi&lt;/code&gt;)</source>
          <target state="translated">서버에서 ( &lt;code&gt;mod_wsgi&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="cecf61e7e09516497b38938fd37f1bddd24dfa26" translate="yes" xml:space="preserve">
          <source>On the server, run &lt;a href=&quot;../../ref/contrib/staticfiles#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; to copy all the static files into &lt;a href=&quot;../../ref/settings#std:setting-STATIC_ROOT&quot;&gt;&lt;code&gt;STATIC_ROOT&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">서버에서 &lt;a href=&quot;../../ref/contrib/staticfiles#django-admin-collectstatic&quot;&gt; &lt;code&gt;collectstatic&lt;/code&gt; &lt;/a&gt; 을 실행 하여 모든 정적 파일을 &lt;a href=&quot;../../ref/settings#std:setting-STATIC_ROOT&quot;&gt; &lt;code&gt;STATIC_ROOT&lt;/code&gt; &lt;/a&gt; 에 복사하십시오 .</target>
        </trans-unit>
        <trans-unit id="8018b894c78df10ce0e2fab04879f59541601d51" translate="yes" xml:space="preserve">
          <source>On these spatial backends the intersection pattern is a string comprising nine characters, which define intersections between the interior, boundary, and exterior of the geometry field and the lookup geometry. The intersection pattern matrix may only use the following characters: &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, &lt;code&gt;T&lt;/code&gt;, &lt;code&gt;F&lt;/code&gt;, or &lt;code&gt;*&lt;/code&gt;. This lookup type allows users to &amp;ldquo;fine tune&amp;rdquo; a specific geometric relationship consistent with the DE-9IM model. &lt;a href=&quot;#fnde9im&quot; id=&quot;id4&quot;&gt;[1]&lt;/a&gt;</source>
          <target state="translated">이러한 공간적 백엔드에서 교차 패턴은 지오메트리 필드의 내부, 경계 및 외부와 조회 지오메트리 사이의 교차점을 정의하는 9 개의 문자로 구성된 문자열입니다. 교차 패턴 행렬은 &lt;code&gt;1&lt;/code&gt; , &lt;code&gt;2&lt;/code&gt; , &lt;code&gt;T&lt;/code&gt; , &lt;code&gt;F&lt;/code&gt; 또는 &lt;code&gt;*&lt;/code&gt; 문자 만 사용할 수 있습니다 . 이 조회 유형을 사용하면 DE-9IM 모델과 일치하는 특정 형상 관계를 &quot;미세 조정&quot;할 수 있습니다. &lt;a href=&quot;#fnde9im&quot; id=&quot;id4&quot;&gt;[1]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fe2da8c6b3beffe86c43d4ad3b331e4d1ab5aed7" translate="yes" xml:space="preserve">
          <source>On-commit functions for a given transaction are executed in the order they were registered.</source>
          <target state="translated">주어진 트랜잭션에 대한 커밋 기능은 등록 된 순서대로 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="5b56a6bf63627728f31e434c106869807d7bf4d8" translate="yes" xml:space="preserve">
          <source>On-commit functions only work with &lt;a href=&quot;#managing-autocommit&quot;&gt;autocommit mode&lt;/a&gt; and the &lt;a href=&quot;#django.db.transaction.atomic&quot;&gt;&lt;code&gt;atomic()&lt;/code&gt;&lt;/a&gt; (or &lt;a href=&quot;../../ref/settings#std:setting-DATABASE-ATOMIC_REQUESTS&quot;&gt;&lt;code&gt;ATOMIC_REQUESTS&lt;/code&gt;&lt;/a&gt;) transaction API. Calling &lt;a href=&quot;#django.db.transaction.on_commit&quot;&gt;&lt;code&gt;on_commit()&lt;/code&gt;&lt;/a&gt; when autocommit is disabled and you are not within an atomic block will result in an error.</source>
          <target state="translated">커밋 기능은 &lt;a href=&quot;#managing-autocommit&quot;&gt;자동 커밋 모드&lt;/a&gt; 및 &lt;a href=&quot;#django.db.transaction.atomic&quot;&gt; &lt;code&gt;atomic()&lt;/code&gt; &lt;/a&gt; (또는 &lt;a href=&quot;../../ref/settings#std:setting-DATABASE-ATOMIC_REQUESTS&quot;&gt; &lt;code&gt;ATOMIC_REQUESTS&lt;/code&gt; &lt;/a&gt; ) 트랜잭션 API 에서만 작동 합니다. 자동 커밋이 비활성화되고 원자 블록 내에 있지 않은 경우 &lt;a href=&quot;#django.db.transaction.on_commit&quot;&gt; &lt;code&gt;on_commit()&lt;/code&gt; &lt;/a&gt; 호출 하면 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="ea953980477f23ceaa27913413963b194a15f9cb" translate="yes" xml:space="preserve">
          <source>Once &lt;code&gt;LocaleMiddleware&lt;/code&gt; determines the user&amp;rsquo;s preference, it makes this preference available as &lt;code&gt;request.LANGUAGE_CODE&lt;/code&gt; for each &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt;. Feel free to read this value in your view code. Here&amp;rsquo;s an example:</source>
          <target state="translated">일단 &lt;code&gt;LocaleMiddleware&lt;/code&gt; 는 사용자의 선호도를 결정, 그것으로이 설정을 사용할 수 있습니다 &lt;code&gt;request.LANGUAGE_CODE&lt;/code&gt; 각 &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; 에&lt;/a&gt; . 뷰 코드에서이 값을 자유롭게 읽으십시오. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="45bad62da27ce3b983be7a3066691f1ee9b247b1" translate="yes" xml:space="preserve">
          <source>Once a logger has determined that a message needs to be processed, it is passed to a &lt;em&gt;Handler&lt;/em&gt;.</source>
          <target state="translated">로거가 메시지를 처리해야한다고 결정하면 메시지는 &lt;em&gt;Handler&lt;/em&gt; 로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="4892907ad7249904f6f00c6f41012b6dc82795ed" translate="yes" xml:space="preserve">
          <source>Once a node is parsed, its &lt;code&gt;render&lt;/code&gt; method may be called any number of times. Since Django is sometimes run in multi-threaded environments, a single node may be simultaneously rendering with different contexts in response to two separate requests. Therefore, it&amp;rsquo;s important to make sure your template tags are thread safe.</source>
          <target state="translated">노드가 구문 분석되면 해당 &lt;code&gt;render&lt;/code&gt; 메소드를 여러 번 호출 할 수 있습니다. Django는 다중 스레드 환경에서 실행되기 때문에 단일 노드가 두 개의 개별 요청에 대한 응답으로 서로 다른 컨텍스트로 동시에 렌더링 될 수 있습니다. 따라서 템플릿 태그가 스레드에 안전해야합니다.</target>
        </trans-unit>
        <trans-unit id="4b7a48f914d876adbccaa3adc73eedab94ce96c4" translate="yes" xml:space="preserve">
          <source>Once a subclass of &lt;code&gt;File&lt;/code&gt; is created, the new &lt;code&gt;FileField&lt;/code&gt; subclass must be told to use it. To do so, assign the new &lt;code&gt;File&lt;/code&gt; subclass to the special &lt;code&gt;attr_class&lt;/code&gt; attribute of the &lt;code&gt;FileField&lt;/code&gt; subclass.</source>
          <target state="translated">&lt;code&gt;File&lt;/code&gt; 의 서브 클래스 가 작성되면 새 &lt;code&gt;FileField&lt;/code&gt; 서브 클래스가이를 사용하도록 지시해야합니다. 그렇게하려면 새 &lt;code&gt;File&lt;/code&gt; 서브 클래스를 &lt;code&gt;FileField&lt;/code&gt; 서브 클래스 의 특수한 &lt;code&gt;attr_class&lt;/code&gt; 속성에 지정하십시오 .</target>
        </trans-unit>
        <trans-unit id="7fa4afcebb8e9a2e720375d04ee811c5c1d53d5f" translate="yes" xml:space="preserve">
          <source>Once a user has authenticated, Django stores which backend was used to authenticate the user in the user&amp;rsquo;s session, and re-uses the same backend for the duration of that session whenever access to the currently authenticated user is needed. This effectively means that authentication sources are cached on a per-session basis, so if you change &lt;a href=&quot;../../ref/settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt;&lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt;&lt;/a&gt;, you&amp;rsquo;ll need to clear out session data if you need to force users to re-authenticate using different methods. A simple way to do that is to execute &lt;code&gt;Session.objects.all().delete()&lt;/code&gt;.</source>
          <target state="translated">사용자가 인증되면 Django는 사용자 세션에서 사용자를 인증하는 데 사용 된 백엔드를 저장하고 현재 인증 된 사용자에 대한 액세스가 필요할 때마다 해당 세션 기간 동안 동일한 백엔드를 재사용합니다. 이는 효과적으로 인증 소스가 세션별로 캐시되므로 &lt;a href=&quot;../../ref/settings#std:setting-AUTHENTICATION_BACKENDS&quot;&gt; &lt;code&gt;AUTHENTICATION_BACKENDS&lt;/code&gt; &lt;/a&gt; 를 변경하면 하는 경우 다른 방법을 사용하여 사용자를 강제로 다시 인증해야하는 경우 세션 데이터를 지워야합니다. 이를 수행하는 간단한 방법은 &lt;code&gt;Session.objects.all().delete()&lt;/code&gt; 를 실행하는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="47cc039fbcb18a971f6b9e295950ac28d3bbc3d6" translate="yes" xml:space="preserve">
          <source>Once one of the URL patterns matches, Django calls the given view, which is a Python function. Each view gets passed a request object &amp;ndash; which contains request metadata &amp;ndash; and the values captured in the pattern.</source>
          <target state="translated">URL 패턴 중 하나가 일치하면 Django는 주어진 뷰를 호출합니다.이 뷰는 Python 함수입니다. 각 뷰에는 요청 메타 데이터가 포함 된 요청 객체와 패턴에서 캡처 된 값이 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="8afce1673f10a3038aee77d9942248ca3461e349" translate="yes" xml:space="preserve">
          <source>Once one of the URL patterns matches, Django imports and calls the given view, which is a Python function (or a &lt;a href=&quot;../class-based-views/index&quot;&gt;class-based view&lt;/a&gt;). The view gets passed the following arguments:</source>
          <target state="translated">URL 패턴 중 하나가 일치하면 Django는 주어진 뷰를 가져 와서 호출합니다.이 뷰는 Python 함수 (또는 &lt;a href=&quot;../class-based-views/index&quot;&gt;클래스 기반 뷰&lt;/a&gt; )입니다. 뷰에는 다음과 같은 인수가 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="8d3f70853ffe17be01ce6b6b1b1ad3963fb68cb3" translate="yes" xml:space="preserve">
          <source>Once that&amp;rsquo;s done, all you have to do is run &lt;a href=&quot;../../ref/contrib/staticfiles#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; and your static files would be pushed through your storage package up to S3. If you later needed to switch to a different storage provider, you may only have to change your &lt;a href=&quot;../../ref/settings#std:setting-STATICFILES_STORAGE&quot;&gt;&lt;code&gt;STATICFILES_STORAGE&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">완료되면 &lt;a href=&quot;../../ref/contrib/staticfiles#django-admin-collectstatic&quot;&gt; &lt;code&gt;collectstatic&lt;/code&gt; 을&lt;/a&gt; 실행하기 만하면 정적 파일이 스토리지 패키지를 통해 S3까지 푸시됩니다. 나중에 다른 스토리지 제공자로 전환 &lt;a href=&quot;../../ref/settings#std:setting-STATICFILES_STORAGE&quot;&gt; &lt;code&gt;STATICFILES_STORAGE&lt;/code&gt; &lt;/a&gt; 설정 만 변경하면됩니다 .</target>
        </trans-unit>
        <trans-unit id="cfd518f7c02dab56b7fa7099e9ab5f115d40d4af" translate="yes" xml:space="preserve">
          <source>Once that&amp;rsquo;s done, we can run &lt;code&gt;python manage.py migrate&lt;/code&gt; as normal and the data migration will run in place alongside other migrations.</source>
          <target state="translated">완료되면 &lt;code&gt;python manage.py migrate&lt;/code&gt; 를 정상적으로 실행할 수 있으며 데이터 마이그레이션이 다른 마이그레이션과 함께 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="7d80a9630a5667fa5b1bf5e0b53bb9c33fc0955a" translate="yes" xml:space="preserve">
          <source>Once the cache is set up, the simplest way to use caching is to cache your entire site. You&amp;rsquo;ll need to add &lt;code&gt;'django.middleware.cache.UpdateCacheMiddleware'&lt;/code&gt; and &lt;code&gt;'django.middleware.cache.FetchFromCacheMiddleware'&lt;/code&gt; to your &lt;a href=&quot;../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; setting, as in this example:</source>
          <target state="translated">캐시가 설정되면 캐싱을 사용하는 가장 간단한 방법은 전체 사이트를 캐시하는 것입니다. 이 예제와 같이 &lt;code&gt;'django.middleware.cache.UpdateCacheMiddleware'&lt;/code&gt; 및 &lt;code&gt;'django.middleware.cache.FetchFromCacheMiddleware'&lt;/code&gt; 를 &lt;a href=&quot;../ref/settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; &lt;/a&gt; 설정 에 추가해야합니다 .</target>
        </trans-unit>
        <trans-unit id="099066c054cd7e4194c8ae65b8e3741ea951ec11" translate="yes" xml:space="preserve">
          <source>Once the migration is applied, commit the migration and the models change to your version control system as a single commit - that way, when other developers (or your production servers) check out the code, they&amp;rsquo;ll get both the changes to your models and the accompanying migration at the same time.</source>
          <target state="translated">마이그레이션이 적용되면 마이그레이션을 커밋하고 모델이 단일 커밋으로 버전 관리 시스템으로 변경됩니다. 이렇게하면 다른 개발자 (또는 프로덕션 서버)가 코드를 확인할 때 모델에 대한 변경 내용이 모두 표시됩니다. 동시에 수반되는 마이그레이션.</target>
        </trans-unit>
        <trans-unit id="9aac27c3870fec649b441a68d9801e0cfc37bac9" translate="yes" xml:space="preserve">
          <source>Once the operation sequence has been reduced as much as possible - the amount possible depends on how closely intertwined your models are and if you have any &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.RunSQL&quot;&gt;&lt;code&gt;RunSQL&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.RunPython&quot;&gt;&lt;code&gt;RunPython&lt;/code&gt;&lt;/a&gt; operations (which can&amp;rsquo;t be optimized through unless they are marked as &lt;code&gt;elidable&lt;/code&gt;) - Django will then write it back out into a new set of migration files.</source>
          <target state="translated">작업 순서가 최대한 줄어든 경우, 가능한 양은 모델이 얼마나 밀접하게 얽혀 있는지, &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.RunSQL&quot;&gt; &lt;code&gt;RunSQL&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../ref/migration-operations#django.db.migrations.operations.RunPython&quot;&gt; &lt;code&gt;RunPython&lt;/code&gt; &lt;/a&gt; 작업이 있는지 (필요하다고 표시되지 않으면 최적화 할 수 없음) 여부에 따라 &lt;code&gt;elidable&lt;/code&gt; ) - 장고 것이다 그런 다음 새 마이그레이션 파일 세트에 다시 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="ed3b976c0a650bb7fc905a8f0966094dff0cf52a" translate="yes" xml:space="preserve">
          <source>Once the sitemaps application is added to your project, you may also ping Google using the &lt;code&gt;ping_google&lt;/code&gt; management command:</source>
          <target state="translated">사이트 맵 응용 프로그램이 프로젝트에 추가되면 &lt;code&gt;ping_google&lt;/code&gt; 관리 명령을 사용하여 Google에 핑을 보낼 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f6b49e146a7a6f8208bd2db324b466d09add24fd" translate="yes" xml:space="preserve">
          <source>Once the string literals of an application have been tagged for later translation, the translation themselves need to be written (or obtained). Here&amp;rsquo;s how that works.</source>
          <target state="translated">응용 프로그램의 문자열 리터럴에 나중에 번역을 위해 태그가 지정되면 번역 자체를 작성 (또는 획득)해야합니다. 작동 방식은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f206c7b7afb4f63e3142f262b4b4485c255b7031" translate="yes" xml:space="preserve">
          <source>Once the test database has been created, Django will run your tests. If everything goes well, you&amp;rsquo;ll see something like this:</source>
          <target state="translated">테스트 데이터베이스가 생성되면 Django가 테스트를 실행합니다. 모든 것이 잘되면 다음과 같은 것을 보게 될 것입니다.</target>
        </trans-unit>
        <trans-unit id="c49b2de11a260f313eebb5acb8de8bd12ea04b7c" translate="yes" xml:space="preserve">
          <source>Once the tests complete, you should be greeted with a message informing you whether the test suite passed or failed. Since you haven&amp;rsquo;t yet made any changes to Django&amp;rsquo;s code, the entire test suite &lt;strong&gt;should&lt;/strong&gt; pass. If you get failures or errors make sure you&amp;rsquo;ve followed all of the previous steps properly. See &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/writing-code/unit-tests/#running-unit-tests&quot;&gt;Running the unit tests&lt;/a&gt; for more information.</source>
          <target state="translated">테스트가 완료되면 테스트 스위트가 통과했는지 또는 실패했는지를 알려주는 메시지가 표시됩니다. 아직 Django 코드를 변경하지 않았으므로 전체 테스트 스위트 &lt;strong&gt;가&lt;/strong&gt; 통과 &lt;strong&gt;해야합니다&lt;/strong&gt; . 실패 또는 오류가 발생하면 이전 단계를 모두 올바르게 수행했는지 확인하십시오. 자세한 내용 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/writing-code/unit-tests/#running-unit-tests&quot;&gt;은 장치 테스트 실행&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="08bca7ec8b63ac1bbbb86e71cc804f726025bfcc" translate="yes" xml:space="preserve">
          <source>Once this is done, Django takes care of translating Web apps on the fly in each available language, according to users&amp;rsquo; language preferences.</source>
          <target state="translated">이 작업이 완료되면 Django는 사용자의 언어 환경 설정에 따라 사용 가능한 각 언어로 웹 앱을 즉석에서 번역합니다.</target>
        </trans-unit>
        <trans-unit id="beac49f82b1bb9504998712c3c8cf268da1ee652" translate="yes" xml:space="preserve">
          <source>Once this stage completes, APIs that operate on application configurations such as &lt;a href=&quot;#django.apps.apps.get_app_config&quot;&gt;&lt;code&gt;get_app_config()&lt;/code&gt;&lt;/a&gt; become usable.</source>
          <target state="translated">이 단계가 완료되면 &lt;a href=&quot;#django.apps.apps.get_app_config&quot;&gt; &lt;code&gt;get_app_config()&lt;/code&gt; &lt;/a&gt; 와 같은 애플리케이션 구성에서 작동하는 API를 사용할 수있게됩니다.</target>
        </trans-unit>
        <trans-unit id="6d1164058a89f4747e93310f35287594ad610bd0" translate="yes" xml:space="preserve">
          <source>Once this stage completes, APIs that operate on models such as &lt;a href=&quot;#django.apps.apps.get_model&quot;&gt;&lt;code&gt;get_model()&lt;/code&gt;&lt;/a&gt; become usable.</source>
          <target state="translated">이 단계가 완료되면 &lt;a href=&quot;#django.apps.apps.get_model&quot;&gt; &lt;code&gt;get_model()&lt;/code&gt; &lt;/a&gt; 과 같은 모델에서 작동하는 API를 사용할 수있게됩니다.</target>
        </trans-unit>
        <trans-unit id="2953f2561ce177f56af024f2dd92e1f59d25403c" translate="yes" xml:space="preserve">
          <source>Once those steps are complete, you can start browsing the documentation by going to your admin interface and clicking the &amp;ldquo;Documentation&amp;rdquo; link in the upper right of the page.</source>
          <target state="translated">이러한 단계가 완료되면 관리자 인터페이스로 이동하여 페이지 오른쪽 상단의 &quot;문서&quot;링크를 클릭하여 설명서 찾아보기를 시작할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1239ce07e292603a287e3a01f0eb30465810a2ec" translate="yes" xml:space="preserve">
          <source>Once you have &lt;code&gt;MytypeField&lt;/code&gt;, you can use it in any model, just like any other &lt;code&gt;Field&lt;/code&gt; type:</source>
          <target state="translated">당신은 일단 &lt;code&gt;MytypeField&lt;/code&gt; 을 , 당신은 단지 다른 것처럼, 모든 모델에서 사용할 수있는 &lt;code&gt;Field&lt;/code&gt; 유형 :</target>
        </trans-unit>
        <trans-unit id="b3891fc58305b0a5a423532b9868592dc59f7e43" translate="yes" xml:space="preserve">
          <source>Once you have a &lt;code&gt;Client&lt;/code&gt; instance, you can call any of the following methods:</source>
          <target state="translated">당신은 일단 &lt;code&gt;Client&lt;/code&gt; 인스턴스를, 당신은 다음 방법 중 하나를 호출 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="d52a875481cca2d8c66414f94d375f0c665ec6c2" translate="yes" xml:space="preserve">
          <source>Once you have a compiled &lt;a href=&quot;#django.template.Template&quot;&gt;&lt;code&gt;Template&lt;/code&gt;&lt;/a&gt; object, you can render a context with it. You can reuse the same template to render it several times with different contexts.</source>
          <target state="translated">컴파일 된 &lt;a href=&quot;#django.template.Template&quot;&gt; &lt;code&gt;Template&lt;/code&gt; &lt;/a&gt; 객체가 있으면 컨텍스트를 렌더링 할 수 있습니다. 동일한 템플릿을 재사용하여 다른 컨텍스트로 여러 번 렌더링 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3b7c2b14858900752e7f2ec09ad28d32ec131ad8" translate="yes" xml:space="preserve">
          <source>Once you have configured your installation, run &lt;code&gt;manage.py migrate&lt;/code&gt; to install the single database table that stores session data.</source>
          <target state="translated">설치를 구성한 후 &lt;code&gt;manage.py migrate&lt;/code&gt; 를 실행 하여 세션 데이터를 저장하는 단일 데이터베이스 테이블을 설치하십시오.</target>
        </trans-unit>
        <trans-unit id="4e3f8d55fa3db6648c5321fd5704f17bc2706d5f" translate="yes" xml:space="preserve">
          <source>Once you have configured your loggers, handlers, filters and formatters, you need to place logging calls into your code. Using the logging framework works like this:</source>
          <target state="translated">로거, 핸들러, 필터 및 포맷터를 구성한 후에는 로깅 호출을 코드에 배치해야합니다. 로깅 프레임 워크를 사용하면 다음과 같이 작동합니다.</target>
        </trans-unit>
        <trans-unit id="06625db7449c235ed03be7a56ab284c2fd23316a" translate="yes" xml:space="preserve">
          <source>Once you have defined your models, you need to tell Django you&amp;rsquo;re going to &lt;em&gt;use&lt;/em&gt; those models. Do this by editing your settings file and changing the &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting to add the name of the module that contains your &lt;code&gt;models.py&lt;/code&gt;.</source>
          <target state="translated">모델을 정의한 후에는 Django에 해당 모델 을 &lt;em&gt;사용하도록&lt;/em&gt; 지시해야 &lt;em&gt;합니다&lt;/em&gt; . 설정 파일을 편집하고 &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 설정을 변경 하여 &lt;code&gt;models.py&lt;/code&gt; 가 포함 된 모듈의 이름을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="b7449018ba0036e62aa7a8073bea808f1634e08d" translate="yes" xml:space="preserve">
          <source>Once you have established the many-to-many relationships, you can issue queries. Just as with normal many-to-many relationships, you can query using the attributes of the many-to-many-related model:</source>
          <target state="translated">다 대 다 관계를 설정하면 쿼리를 발행 할 수 있습니다. 일반적인 다 대 다 관계와 마찬가지로 다 대 다 관련 모델의 속성을 사용하여 쿼리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="767d3c1c5b235cde245b661bd7ecf4af97258d00" translate="yes" xml:space="preserve">
          <source>Once you have your new migration files, you should apply them to your database to make sure they work as expected:</source>
          <target state="translated">새 마이그레이션 파일이 있으면 데이터베이스에 적용하여 예상대로 작동하는지 확인해야합니다.</target>
        </trans-unit>
        <trans-unit id="31d824ef7fe4e79e96012a6f5d6b173e1c8aa4d9" translate="yes" xml:space="preserve">
          <source>Once you turn autocommit off, you get the default behavior of your database adapter, and Django won&amp;rsquo;t help you. Although that behavior is specified in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0249&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;PEP 249&lt;/strong&gt;&lt;/a&gt;, implementations of adapters aren&amp;rsquo;t always consistent with one another. Review the documentation of the adapter you&amp;rsquo;re using carefully.</source>
          <target state="translated">자동 커밋을 해제하면 데이터베이스 어댑터의 기본 동작이 나타나고 장고는 도움이되지 않습니다. 이 동작은 &lt;a href=&quot;https://www.python.org/dev/peps/pep-0249&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;PEP 249에&lt;/strong&gt;&lt;/a&gt; 지정되어 있지만&lt;strong&gt;&lt;/strong&gt; 어댑터 구현이 항상 서로 일치하는 것은 아닙니다. 사용중인 어댑터의 설명서를주의해서 검토하십시오.</target>
        </trans-unit>
        <trans-unit id="c2aa97694ea5a295cf72f827c19c4c4b345fc129" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;re done with the tutorial, you can look through the rest of &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/index/&quot;&gt;Django&amp;rsquo;s documentation on contributing&lt;/a&gt;. It contains lots of great information and is a must read for anyone who&amp;rsquo;d like to become a regular contributor to Django. If you&amp;rsquo;ve got questions, it&amp;rsquo;s probably got the answers.</source>
          <target state="translated">튜토리얼을 마친 후에는 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/index/&quot;&gt;Django의&lt;/a&gt; 나머지 공헌에 대한 문서를 살펴볼 수 있습니다 . 그것은 많은 훌륭한 정보를 포함하고 있으며 장고에 정기적으로 기여하고 싶은 사람이라면 반드시 읽어야합니다. 궁금한 점이 있으면 아마도 답이있을 것입니다.</target>
        </trans-unit>
        <trans-unit id="94bfb4f8d2f6bac07ddde9a443c7b4ad253d96dc" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;re in a transaction, you can choose either to apply the changes you&amp;rsquo;ve performed until this point with &lt;a href=&quot;#django.db.transaction.commit&quot;&gt;&lt;code&gt;commit()&lt;/code&gt;&lt;/a&gt;, or to cancel them with &lt;a href=&quot;#django.db.transaction.rollback&quot;&gt;&lt;code&gt;rollback()&lt;/code&gt;&lt;/a&gt;. These functions are defined in &lt;a href=&quot;#module-django.db.transaction&quot;&gt;&lt;code&gt;django.db.transaction&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">트랜잭션이 완료되면 &lt;a href=&quot;#django.db.transaction.commit&quot;&gt; &lt;code&gt;commit()&lt;/code&gt; &lt;/a&gt; 으로이 시점까지 수행 한 변경 사항을 적용 하거나 &lt;a href=&quot;#django.db.transaction.rollback&quot;&gt; &lt;code&gt;rollback()&lt;/code&gt; &lt;/a&gt; 으로 취소 하도록 선택할 수 있습니다 . 이 기능은 &lt;a href=&quot;#module-django.db.transaction&quot;&gt; &lt;code&gt;django.db.transaction&lt;/code&gt; &lt;/a&gt; 에 정의되어 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6fc30a8ed1ee54ee2a8ad8fe75695abc03a12eee" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;re in the shell, explore the &lt;a href=&quot;../topics/db/queries&quot;&gt;database API&lt;/a&gt;:</source>
          <target state="translated">쉘에 들어가면 &lt;a href=&quot;../topics/db/queries&quot;&gt;데이터베이스 API를&lt;/a&gt; 탐색하십시오 .</target>
        </trans-unit>
        <trans-unit id="b2d2e5917827940324544b1fdd9370ee3bee88f3" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;re ready, it is time to &lt;a href=&quot;../topics/install&quot;&gt;install the new Django version&lt;/a&gt;. If you are using &lt;a href=&quot;https://virtualenv.pypa.io/&quot;&gt;virtualenv&lt;/a&gt; and it is a major upgrade, you might want to set up a new environment with all the dependencies first.</source>
          <target state="translated">준비가되면 &lt;a href=&quot;../topics/install&quot;&gt;새로운 Django 버전&lt;/a&gt; 을 설치할 차례 입니다. &lt;a href=&quot;https://virtualenv.pypa.io/&quot;&gt;virtualenv&lt;/a&gt; 를 사용 중이고 주요 업그레이드 인 경우 모든 종속성이있는 새 환경을 먼저 설정하려고 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3601b6f980a5ed721dd3f6813d175eff6425690c" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve cleaned up your models, name the file &lt;code&gt;models.py&lt;/code&gt; and put it in the Python package that holds your app. Then add the app to your &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">모델을 정리 한 후에는 &lt;code&gt;models.py&lt;/code&gt; 파일 이름 을 지정하고 앱을 보유한 Python 패키지에 넣으십시오. 그런 다음 &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 설정에 앱을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="dddb377d8f9821df9e564ad3cdd2743cd7bb459c" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve created a &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; instance with a set of data and validated it, you can access the clean data via its &lt;code&gt;cleaned_data&lt;/code&gt; attribute:</source>
          <target state="translated">일련의 데이터 가 포함 된 &lt;a href=&quot;#django.forms.Form&quot;&gt; &lt;code&gt;Form&lt;/code&gt; &lt;/a&gt; 인스턴스를 생성 하고 유효성을 검사 한 후 &lt;code&gt;cleaned_data&lt;/code&gt; 속성을 통해 클린 데이터에 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c7fd70ea6a4e1deee0b3f0def90a2d54bbf639bb" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve created a fixture and placed it in a &lt;code&gt;fixtures&lt;/code&gt; directory in one of your &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;, you can use it in your unit tests by specifying a &lt;code&gt;fixtures&lt;/code&gt; class attribute on your &lt;a href=&quot;#django.test.TestCase&quot;&gt;&lt;code&gt;django.test.TestCase&lt;/code&gt;&lt;/a&gt; subclass:</source>
          <target state="translated">조명기를 생성하고 &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;INSTALLED_APPS&lt;/code&gt; &lt;/a&gt; 중 하나의 &lt;code&gt;fixtures&lt;/code&gt; 디렉토리에 배치하면 &lt;a href=&quot;#django.test.TestCase&quot;&gt; &lt;code&gt;django.test.TestCase&lt;/code&gt; &lt;/a&gt; 서브 클래스 에 &lt;code&gt;fixtures&lt;/code&gt; 클래스 속성을 지정하여 유닛 테스트에서 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b490d3d98321be447b59796b137ee29f847904c0" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve created your &lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; subclass, you might consider overriding a few standard methods, depending on your field&amp;rsquo;s behavior. The list of methods below is in approximately decreasing order of importance, so start from the top.</source>
          <target state="translated">&lt;a href=&quot;../ref/models/fields#django.db.models.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt; 하위 클래스를 만든 후에는 필드의 동작에 따라 몇 가지 표준 메서드를 재정의하는 것이 좋습니다. 아래의 방법 목록은 중요도가 떨어지는 순서이므로 맨 처음부터 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="197b7b0e6149f4e2e6712d214786714045eb3c1f" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve created your &lt;a href=&quot;models&quot;&gt;data models&lt;/a&gt;, Django automatically gives you a database-abstraction API that lets you create, retrieve, update and delete objects. This document explains how to use this API. Refer to the &lt;a href=&quot;../../ref/models/index&quot;&gt;data model reference&lt;/a&gt; for full details of all the various model lookup options.</source>
          <target state="translated">&lt;a href=&quot;models&quot;&gt;데이터 모델을&lt;/a&gt; 생성하면 Django는 자동으로 데이터베이스 생성 API를 제공하여 객체를 생성, 검색, 업데이트 및 삭제할 수 있습니다. 이 문서는이 API를 사용하는 방법을 설명합니다. 모든 다양한 모델 조회 옵션에 대한 자세한 내용은 &lt;a href=&quot;../../ref/models/index&quot;&gt;데이터 모델 참조&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="88aa93333b5daf9d68ee1cfd8a3f1aa27dcc950e" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve created your &lt;code&gt;DataSource&lt;/code&gt;, you can find out how many layers of data it contains by accessing the &lt;a href=&quot;#django.contrib.gis.gdal.DataSource.layer_count&quot;&gt;&lt;code&gt;layer_count&lt;/code&gt;&lt;/a&gt; property, or (equivalently) by using the &lt;code&gt;len()&lt;/code&gt; function. For information on accessing the layers of data themselves, see the next section:</source>
          <target state="translated">&lt;code&gt;DataSource&lt;/code&gt; 를 만든 후에 는 &lt;a href=&quot;#django.contrib.gis.gdal.DataSource.layer_count&quot;&gt; &lt;code&gt;layer_count&lt;/code&gt; &lt;/a&gt; 속성 에 액세스 하거나 &lt;code&gt;len()&lt;/code&gt; 함수를 사용하여 포함 된 데이터 레이어 수를 확인할 수 있습니다 . 데이터 계층 자체에 액세스하는 방법에 대한 자세한 내용은 다음 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="703ec67080b97801ea35faae3735f4dec7ffed77" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve done that, rows will be given &lt;code&gt;&quot;error&quot;&lt;/code&gt; and/or &lt;code&gt;&quot;required&quot;&lt;/code&gt; classes, as needed. The HTML will look something like:</source>
          <target state="translated">이 작업을 수행하면 필요에 따라 행에 &lt;code&gt;&quot;error&quot;&lt;/code&gt; 및 / 또는 &lt;code&gt;&quot;required&quot;&lt;/code&gt; 클래스가 제공됩니다. HTML은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="dff17ab7c2df9ca6a63551eb8b689e7637d33a02" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve done the above, that action will no longer be available site-wide.</source>
          <target state="translated">위의 작업을 수행하면 사이트 전체에서 해당 작업을 더 이상 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="fbbfd787ddca57ffde3e7f85fbc478dfaccd6e48" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve got Django set up, you&amp;rsquo;ll follow this general process to integrate with an existing database.</source>
          <target state="translated">Django가 설정되면이 일반적인 프로세스를 따라 기존 데이터베이스와 통합됩니다.</target>
        </trans-unit>
        <trans-unit id="2f5c9fbb1a2d3eba9e116b1f222d33cd90b8f048" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve got mod_wsgi installed and activated, edit your Apache server&amp;rsquo;s &lt;a href=&quot;https://wiki.apache.org/httpd/DistrosDefaultLayout&quot;&gt;httpd.conf&lt;/a&gt; file and add the following. If you are using a version of Apache older than 2.4, replace &lt;code&gt;Require all granted&lt;/code&gt; with &lt;code&gt;Allow from all&lt;/code&gt; and also add the line &lt;code&gt;Order deny,allow&lt;/code&gt; above it.</source>
          <target state="translated">mod_wsgi를 설치하고 활성화했으면 Apache 서버의 &lt;a href=&quot;https://wiki.apache.org/httpd/DistrosDefaultLayout&quot;&gt;httpd.conf&lt;/a&gt; 파일을 편집 하고 다음을 추가하십시오. 당신은 2.4 이전의 아파치 버전을 사용하는 경우, 대체 &lt;code&gt;Require all granted&lt;/code&gt; 로 &lt;code&gt;Allow from all&lt;/code&gt; 라인 추가도하고 &lt;code&gt;Order deny,allow&lt;/code&gt; 그 위에.</target>
        </trans-unit>
        <trans-unit id="7ea2962dc3da1b2a4e7f20b94682599e9793c872" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve looked through some of that information, you&amp;rsquo;ll be ready to go out and find a ticket of your own to write a patch for. Pay special attention to tickets with the &amp;ldquo;easy pickings&amp;rdquo; criterion. These tickets are often much simpler in nature and are great for first time contributors. Once you&amp;rsquo;re familiar with contributing to Django, you can move on to writing patches for more difficult and complicated tickets.</source>
          <target state="translated">일단 그 정보를 살펴보면, 나가서 패치를 작성할 자신의 티켓을 찾을 수 있습니다. &quot;쉬운 피킹&quot;기준으로 티켓에 특별한주의를 기울이십시오. 이 티켓은 본질적으로 훨씬 단순하며 처음 기고자에게 좋습니다. Django에 공헌하는 것에 익숙해지면 더 어렵고 복잡한 티켓을위한 패치 작성으로 넘어갈 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b1583459c98b69257fec18665dd137de13c329bb" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve prepared your translations &amp;ndash; or, if you want to use the translations that come with Django &amp;ndash; you&amp;rsquo;ll need to activate translation for your app.</source>
          <target state="translated">번역을 준비했거나 Django와 함께 제공되는 번역을 사용하려면 앱의 번역을 활성화해야합니다.</target>
        </trans-unit>
        <trans-unit id="3ad0717e6526c6287ba99f236bd12fe3752678e2" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve set up HTTPS, enable the following settings.</source>
          <target state="translated">HTTPS를 설정 한 후 다음 설정을 활성화하십시오.</target>
        </trans-unit>
        <trans-unit id="433e15e0611bc8ef3ad131e1aaf3db8eb32d5b0a" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve squashed a migration, you should not then re-squash that squashed migration until you have fully transitioned it to a normal migration.</source>
          <target state="translated">마이그레이션을 취소 한 후에는 마이그레이션 된 마이그레이션을 일반 마이그레이션으로 완전히 전환 할 때까지 스쿼시하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="5cdecad320333138fd82d8195736190509b2a0ed" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve squashed your migration, you should then commit it alongside the migrations it replaces and distribute this change to all running instances of your application, making sure that they run &lt;code&gt;migrate&lt;/code&gt; to store the change in their database.</source>
          <target state="translated">마이그레이션을 중단 한 후에는 마이그레이션과 함께 마이그레이션을 커밋하고이 변경 사항을 실행중인 모든 응용 프로그램 인스턴스에 배포하여 &lt;code&gt;migrate&lt;/code&gt; 을 실행 하여 변경 사항을 데이터베이스에 저장해야합니다.</target>
        </trans-unit>
        <trans-unit id="1349fa263311d97d35f37c2c1a842df10861817d" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve verified that your patch and your test are working correctly, it&amp;rsquo;s a good idea to run the entire Django test suite to verify that your change hasn&amp;rsquo;t introduced any bugs into other areas of Django. While successfully passing the entire test suite doesn&amp;rsquo;t guarantee your code is bug free, it does help identify many bugs and regressions that might otherwise go unnoticed.</source>
          <target state="translated">패치와 테스트가 올바르게 작동하는지 확인한 후에는 변경 사항이 Django의 다른 영역에 버그를 도입하지 않았는지 확인하기 위해 전체 Django 테스트 스위트를 실행하는 것이 좋습니다. 전체 테스트 스위트를 성공적으로 통과한다고해서 코드에 버그가없는 것은 아닙니다. 그렇지 않으면 눈에 띄지 않을 수있는 많은 버그와 회귀를 식별하는 데 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="9cfdfebb993364de477eb12a7abb4fc259f77346" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve written tests, run them using the &lt;a href=&quot;../../ref/django-admin#django-admin-test&quot;&gt;&lt;code&gt;test&lt;/code&gt;&lt;/a&gt; command of your project&amp;rsquo;s &lt;code&gt;manage.py&lt;/code&gt; utility:</source>
          <target state="translated">테스트를 작성한 후에는 프로젝트의 &lt;code&gt;manage.py&lt;/code&gt; 유틸리티 의 &lt;a href=&quot;../../ref/django-admin#django-admin-test&quot;&gt; &lt;code&gt;test&lt;/code&gt; &lt;/a&gt; 명령을 사용하여 테스트를 실행하십시오 .</target>
        </trans-unit>
        <trans-unit id="854eafd257c13871740ebcffeae796127fc7faaf" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve written your filter definition, you need to register it with your &lt;code&gt;Library&lt;/code&gt; instance, to make it available to Django&amp;rsquo;s template language:</source>
          <target state="translated">필터 정의를 작성한 후에는 Django의 템플릿 언어에서 사용할 수 있도록 &lt;code&gt;Library&lt;/code&gt; 인스턴스에 필터 정의를 등록해야합니다 .</target>
        </trans-unit>
        <trans-unit id="1dc74ddc71ef956145231d8e56d23a70390692ec" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve written your model admin definitions, they can be registered with any &lt;code&gt;Admin&lt;/code&gt; instance:</source>
          <target state="translated">모델 관리자 정의를 작성하면 모든 &lt;code&gt;Admin&lt;/code&gt; 인스턴스에 등록 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d5f3273b9d64e8fc4a352c674738831de3f6ba4d" translate="yes" xml:space="preserve">
          <source>Once your cache is configured, you&amp;rsquo;ve got two choices for how to store data in the cache:</source>
          <target state="translated">캐시가 구성되면 캐시에 데이터를 저장하는 방법에 대한 두 가지 선택 사항이 있습니다.</target>
        </trans-unit>
        <trans-unit id="1e94ea20a9162ba0f7f32f56c3b82565f3d3e459" translate="yes" xml:space="preserve">
          <source>Once your models are defined, Django can automatically create a professional, production ready &lt;a href=&quot;../ref/contrib/admin/index&quot;&gt;administrative interface&lt;/a&gt; &amp;ndash; a website that lets authenticated users add, change and delete objects. The only step required is to register your model in the admin site:</source>
          <target state="translated">모델이 정의되면 Django는 인증 된 사용자가 개체를 추가, 변경 및 삭제할 수있는 웹 사이트 인 전문적인 프로덕션 준비 &lt;a href=&quot;../ref/contrib/admin/index&quot;&gt;관리 인터페이스를&lt;/a&gt; 자동으로 만들 수 있습니다. 필요한 단계는 관리자 사이트에 모델을 등록하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="5381ea3412869876f5aedc5f6a12e33628d362ab" translate="yes" xml:space="preserve">
          <source>One bookmarklet is available from the &lt;code&gt;admindocs&lt;/code&gt; page:</source>
          <target state="translated">&lt;code&gt;admindocs&lt;/code&gt; 페이지 에서 하나의 책갈피를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3b8655d015723e3ffff545c6f5985e5282ef053b" translate="yes" xml:space="preserve">
          <source>One class of attacks can be prevented by always serving user uploaded content from a distinct top-level or second-level domain. This prevents any exploit blocked by &lt;a href=&quot;https://en.wikipedia.org/wiki/Same-origin_policy&quot;&gt;same-origin policy&lt;/a&gt; protections such as cross site scripting. For example, if your site runs on &lt;code&gt;example.com&lt;/code&gt;, you would want to serve uploaded content (the &lt;a href=&quot;../ref/settings#std:setting-MEDIA_URL&quot;&gt;&lt;code&gt;MEDIA_URL&lt;/code&gt;&lt;/a&gt; setting) from something like &lt;code&gt;usercontent-example.com&lt;/code&gt;. It&amp;rsquo;s &lt;em&gt;not&lt;/em&gt; sufficient to serve content from a subdomain like &lt;code&gt;usercontent.example.com&lt;/code&gt;.</source>
          <target state="translated">별도의 최상위 또는 2 차 도메인에서 사용자가 업로드 한 컨텐츠를 항상 제공함으로써 한 가지 공격 유형을 방지 할 수 있습니다. 이렇게하면 사이트 간 스크립팅과 같은 &lt;a href=&quot;https://en.wikipedia.org/wiki/Same-origin_policy&quot;&gt;동일한 출처 정책&lt;/a&gt; 보호로 인해 악용되는 것을 방지 할 수 있습니다. 예를 들어 사이트가 &lt;code&gt;example.com&lt;/code&gt; 에서 실행되는 경우 &lt;code&gt;usercontent-example.com&lt;/code&gt; 과 같은 콘텐츠에서 업로드 된 콘텐츠 ( &lt;a href=&quot;../ref/settings#std:setting-MEDIA_URL&quot;&gt; &lt;code&gt;MEDIA_URL&lt;/code&gt; &lt;/a&gt; 설정) 를 제공하려고합니다 . 그건 &lt;em&gt;하지&lt;/em&gt; 같은 하위 도메인에서 콘텐츠를 제공하기에 충분 &lt;code&gt;usercontent.example.com&lt;/code&gt; .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d35da2cb46849f2d42b8f4c677498c5a2d6f7139" translate="yes" xml:space="preserve">
          <source>One common reason for overriding these methods is to augment the context data that is provided to the template that renders the view. In the following example, the change view is overridden so that the rendered template is provided some extra mapping data that would not otherwise be available:</source>
          <target state="translated">이러한 메소드를 대체하는 한 가지 일반적인 이유는보기를 렌더링하는 템플리트에 제공되는 컨텍스트 데이터를 보강하기위한 것입니다. 다음 예에서는 렌더링보기에 다른 방법으로는 사용할 수없는 추가 매핑 데이터가 제공되도록 변경보기가 재정의됩니다.</target>
        </trans-unit>
        <trans-unit id="6f73d920aa2ddf0ff594a6ef8ce772d924c15bd9" translate="yes" xml:space="preserve">
          <source>One difference is in the attribute naming: The model that defines the &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; uses the attribute name of that field itself, whereas the &amp;ldquo;reverse&amp;rdquo; model uses the lowercased model name of the original model, plus &lt;code&gt;'_set'&lt;/code&gt; (just like reverse one-to-many relationships).</source>
          <target state="translated">속성 이름 지정의 한 가지 차이점이 있습니다. &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt; &lt;code&gt;ManyToManyField&lt;/code&gt; &lt;/a&gt; 를 정의하는 모델 은 해당 필드 자체의 속성 이름을 사용하는 반면, &quot;역 (reverse)&quot;모델은 원래 모델의 소문자 모델 이름과 &lt;code&gt;'_set'&lt;/code&gt; ( 일대일의 역순)을 사용합니다. -많은 관계).</target>
        </trans-unit>
        <trans-unit id="52fbd495f92e2902784ac9baa74b04fcd17f36e9" translate="yes" xml:space="preserve">
          <source>One difference to note when using &lt;code&gt;prefetch_related&lt;/code&gt; is that objects created by a query can be shared between the different objects that they are related to i.e. a single Python model instance can appear at more than one point in the tree of objects that are returned. This will normally happen with foreign key relationships. Typically this behavior will not be a problem, and will in fact save both memory and CPU time.</source>
          <target state="translated">&lt;code&gt;prefetch_related&lt;/code&gt; 를 사용할 때 유의해야 할 한 가지 차이점 은 쿼리에 의해 생성 된 객체가 관련된 여러 객체간에 공유 될 수 있다는 것입니다. 즉, 단일 Python 모델 인스턴스가 반환 된 객체 트리에서 둘 이상의 지점에 나타날 수 있습니다. 이것은 일반적으로 외래 키 관계에서 발생합니다. 일반적으로이 동작은 문제가되지 않으며 실제로 메모리와 CPU 시간을 모두 절약합니다.</target>
        </trans-unit>
        <trans-unit id="fcc69356192552c22d0ee8a7f4168cdb22150eb7" translate="yes" xml:space="preserve">
          <source>One excellent feature of Memcached is its ability to share a cache over multiple servers. This means you can run Memcached daemons on multiple machines, and the program will treat the group of machines as a &lt;em&gt;single&lt;/em&gt; cache, without the need to duplicate cache values on each machine. To take advantage of this feature, include all server addresses in &lt;a href=&quot;../ref/settings#std:setting-CACHES-LOCATION&quot;&gt;&lt;code&gt;LOCATION&lt;/code&gt;&lt;/a&gt;, either as a semicolon or comma delimited string, or as a list.</source>
          <target state="translated">Memcached의 뛰어난 기능 중 하나는 여러 서버에서 캐시를 공유 할 수 있다는 것입니다. 즉, 여러 시스템에서 Memcached 데몬을 실행할 수 있으며 프로그램은 각 시스템에서 캐시 값을 복제 할 필요없이 시스템 그룹을 &lt;em&gt;단일&lt;/em&gt; 캐시 로 취급합니다 . 이 기능을 이용하려면 모든 서버 주소를 &lt;a href=&quot;../ref/settings#std:setting-CACHES-LOCATION&quot;&gt; &lt;code&gt;LOCATION&lt;/code&gt; &lt;/a&gt; 에 세미콜론 또는 쉼표로 구분 된 문자열 또는 목록으로 포함하십시오.</target>
        </trans-unit>
        <trans-unit id="a0c4a4a0c4be81cbd7b437378f9e85751aa6b578" translate="yes" xml:space="preserve">
          <source>One finder is disabled by default: &lt;code&gt;django.contrib.staticfiles.finders.DefaultStorageFinder&lt;/code&gt;. If added to your &lt;a href=&quot;#std:setting-STATICFILES_FINDERS&quot;&gt;&lt;code&gt;STATICFILES_FINDERS&lt;/code&gt;&lt;/a&gt; setting, it will look for static files in the default file storage as defined by the &lt;a href=&quot;#std:setting-DEFAULT_FILE_STORAGE&quot;&gt;&lt;code&gt;DEFAULT_FILE_STORAGE&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="translated">&lt;code&gt;django.contrib.staticfiles.finders.DefaultStorageFinder&lt;/code&gt; : 하나의 파인더는 기본적으로 사용 불가능합니다 . &lt;a href=&quot;#std:setting-STATICFILES_FINDERS&quot;&gt; &lt;code&gt;STATICFILES_FINDERS&lt;/code&gt; &lt;/a&gt; 설정에 추가 되면 &lt;a href=&quot;#std:setting-DEFAULT_FILE_STORAGE&quot;&gt; &lt;code&gt;DEFAULT_FILE_STORAGE&lt;/code&gt; &lt;/a&gt; 설정에 정의 된대로 기본 파일 스토리지에서 정적 파일을 찾습니다 .</target>
        </trans-unit>
        <trans-unit id="8796608c8ed158d52b85b7539105298913a9d7eb" translate="yes" xml:space="preserve">
          <source>One limitation of custom user models is that installing a custom user model will break any proxy model extending &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt;. Proxy models must be based on a concrete base class; by defining a custom user model, you remove the ability of Django to reliably identify the base class.</source>
          <target state="translated">사용자 정의 사용자 모델의 한 가지 한계는 사용자 정의 사용자 모델을 설치하면 &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt; &lt;code&gt;User&lt;/code&gt; 를&lt;/a&gt; 확장하는 프록시 모델이 중단된다는 것 입니다. 프록시 모델은 구체적인 기본 클래스를 기반으로해야합니다. 사용자 정의 사용자 모델을 정의하면 Django가 기본 클래스를 안정적으로 식별하는 기능이 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="8252f91a0142e0f1f7810c559eb6eeff09a7e40a" translate="yes" xml:space="preserve">
          <source>One of the main features of debug mode is the display of detailed error pages. If your app raises an exception when &lt;a href=&quot;#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;, Django will display a detailed traceback, including a lot of metadata about your environment, such as all the currently defined Django settings (from &lt;code&gt;settings.py&lt;/code&gt;).</source>
          <target state="translated">디버그 모드의 주요 기능 중 하나는 자세한 오류 페이지를 표시하는 것입니다. &lt;a href=&quot;#std:setting-DEBUG&quot;&gt; &lt;code&gt;DEBUG&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;True&lt;/code&gt; 일 때 앱에서 예외가 발생하면 Django는 현재 정의 된 모든 Django 설정 ( &lt;code&gt;settings.py&lt;/code&gt; ) 과 같은 환경에 대한 많은 메타 데이터를 포함하여 자세한 역 추적을 표시합니다 .</target>
        </trans-unit>
        <trans-unit id="a7af099253a75c3b7896229949ed8b4d0dfb3dfb" translate="yes" xml:space="preserve">
          <source>One of the most powerful parts of Django is the automatic admin interface. It reads metadata from your models to provide a quick, model-centric interface where trusted users can manage content on your site. The admin&amp;rsquo;s recommended use is limited to an organization&amp;rsquo;s internal management tool. It&amp;rsquo;s not intended for building your entire front end around.</source>
          <target state="translated">Django의 가장 강력한 부분 중 하나는 자동 관리 인터페이스입니다. 신뢰할 수있는 사용자가 사이트의 콘텐츠를 관리 할 수있는 모델 중심의 빠른 인터페이스를 제공하기 위해 모델에서 메타 데이터를 읽습니다. 관리자의 권장 사용은 조직의 내부 관리 도구로 제한됩니다. 전체 프론트 엔드를 구축하기위한 것이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="325b632f60776937fe0278c6d5b74af921fc4d83" translate="yes" xml:space="preserve">
          <source>One of the topmost, after &lt;code&gt;SessionMiddleware&lt;/code&gt; (uses session data) and &lt;code&gt;UpdateCacheMiddleware&lt;/code&gt; (modifies &lt;code&gt;Vary&lt;/code&gt; header).</source>
          <target state="translated">&lt;code&gt;SessionMiddleware&lt;/code&gt; (세션 데이터 사용) 및 &lt;code&gt;UpdateCacheMiddleware&lt;/code&gt; ( &lt;code&gt;Vary&lt;/code&gt; 헤더 수정 ) 이후 최상위 항목 중 하나입니다 .</target>
        </trans-unit>
        <trans-unit id="2b4130a908f3b1b3021bf422aaa436600226ba47" translate="yes" xml:space="preserve">
          <source>One place Django uses &lt;code&gt;get_absolute_url()&lt;/code&gt; is in the admin app. If an object defines this method, the object-editing page will have a &amp;ldquo;View on site&amp;rdquo; link that will jump you directly to the object&amp;rsquo;s public view, as given by &lt;code&gt;get_absolute_url()&lt;/code&gt;.</source>
          <target state="translated">Django가 &lt;code&gt;get_absolute_url()&lt;/code&gt; 사용하는 한 곳 은 관리 앱에 있습니다. 객체가이 메소드를 정의하는 경우 객체 편집 페이지에는 &quot;사이트에서보기&quot;링크가 &lt;code&gt;get_absolute_url()&lt;/code&gt; 의해 제공된 것처럼 객체의 공개보기로 바로 이동할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3f1cb2de20a0dd60228e6a239c6ba2218e20e8d9" translate="yes" xml:space="preserve">
          <source>One positional argument is required: the class to which the model will be related. This works exactly the same as it does for &lt;a href=&quot;#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;, including all the options regarding &lt;a href=&quot;#recursive-relationships&quot;&gt;recursive&lt;/a&gt; and &lt;a href=&quot;#lazy-relationships&quot;&gt;lazy&lt;/a&gt; relationships.</source>
          <target state="translated">하나의 위치 인수가 필요합니다. 모델이 관련된 클래스입니다. 이것은 &lt;a href=&quot;#recursive-relationships&quot;&gt;재귀&lt;/a&gt; 및 &lt;a href=&quot;#lazy-relationships&quot;&gt;게으른&lt;/a&gt; 관계 에 관한 모든 옵션을 포함하여 &lt;a href=&quot;#django.db.models.ForeignKey&quot;&gt; &lt;code&gt;ForeignKey&lt;/code&gt; &lt;/a&gt; 와 동일하게 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="fc925b117affa0ade4bdd69f5aabf69f1242debe" translate="yes" xml:space="preserve">
          <source>One possible use of &lt;a href=&quot;#django.urls.resolve&quot;&gt;&lt;code&gt;resolve()&lt;/code&gt;&lt;/a&gt; would be to test whether a view would raise a &lt;code&gt;Http404&lt;/code&gt; error before redirecting to it:</source>
          <target state="translated">&lt;a href=&quot;#django.urls.resolve&quot;&gt; &lt;code&gt;resolve()&lt;/code&gt; &lt;/a&gt; 의 한 가지 가능한 사용법은 뷰로 리디렉션하기 전에 &lt;code&gt;Http404&lt;/code&gt; 오류가 발생 하는지 테스트 하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="17affb526021724b56b79a75409ec922fe1ee514" translate="yes" xml:space="preserve">
          <source>One small problem, though. It takes a lot of screen space to display all the fields for entering related &lt;code&gt;Choice&lt;/code&gt; objects. For that reason, Django offers a tabular way of displaying inline related objects. To use it, change the &lt;code&gt;ChoiceInline&lt;/code&gt; declaration to read:</source>
          <target state="translated">그러나 하나의 작은 문제. 관련 &lt;code&gt;Choice&lt;/code&gt; 개체 를 입력하기위한 모든 필드를 표시하려면 많은 화면 공간이 필요 합니다. 이런 이유로 Django는 인라인 관련 객체를 표 형식으로 표시합니다. 사용하려면 &lt;code&gt;ChoiceInline&lt;/code&gt; 선언을 다음과 같이 변경하십시오 .</target>
        </trans-unit>
        <trans-unit id="463e554d2cf1d72ee789f287bd7cfb00f6a89d54" translate="yes" xml:space="preserve">
          <source>One solution is to disable server-side cursors for a connection in &lt;a href=&quot;settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt; by setting &lt;a href=&quot;settings#std:setting-DATABASE-DISABLE_SERVER_SIDE_CURSORS&quot;&gt;&lt;code&gt;DISABLE_SERVER_SIDE_CURSORS&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">한 가지 해결책은 &lt;a href=&quot;settings#std:setting-DATABASES&quot;&gt; &lt;code&gt;DATABASES&lt;/code&gt; &lt;/a&gt; 에서 연결을 위해 서버 측 커서를 비활성화 하여 설정하는 것입니다&lt;a href=&quot;settings#std:setting-DATABASE-DISABLE_SERVER_SIDE_CURSORS&quot;&gt; &lt;code&gt;DISABLE_SERVER_SIDE_CURSORS&lt;/code&gt; &lt;/a&gt; 를 &lt;code&gt;True&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="92c378607313029c98f29e172485bb93294cfa11" translate="yes" xml:space="preserve">
          <source>One thing is left to do. In an RSS feed, each &lt;code&gt;&amp;lt;item&amp;gt;&lt;/code&gt; has a &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;description&amp;gt;&lt;/code&gt;. We need to tell the framework what data to put into those elements.</source>
          <target state="translated">해야 할 일이 남아 있습니다. RSS 피드에서 각 &lt;code&gt;&amp;lt;item&amp;gt;&lt;/code&gt; 에는 &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; 이 있습니다 . &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; 및 &lt;code&gt;&amp;lt;description&amp;gt;&lt;/code&gt; 이 있습니다. 이러한 요소에 어떤 데이터를 넣을 것인지 프레임 워크에 알려야합니다.</target>
        </trans-unit>
        <trans-unit id="64761a4b2513c0fea467c008774b2e8d461a2beb" translate="yes" xml:space="preserve">
          <source>One typical workflow in creating Django apps is to create models and get the admin sites up and running as fast as possible, so your staff (or clients) can start populating data. Then, develop the way data is presented to the public.</source>
          <target state="translated">Django 앱을 만드는 일반적인 워크 플로 중 하나는 모델을 만들고 관리자 사이트를 최대한 빨리 가동하여 직원 (또는 클라이언트)이 데이터를 채우기 시작할 수 있도록하는 것입니다. 그런 다음 데이터가 대중에게 제공되는 방식을 개발하십시오.</target>
        </trans-unit>
        <trans-unit id="62b2c3ff1937b4b7f9fd3bcb172889cfa14560c7" translate="yes" xml:space="preserve">
          <source>One useful way to call &lt;a href=&quot;#django.contrib.sitemaps.ping_google&quot;&gt;&lt;code&gt;ping_google()&lt;/code&gt;&lt;/a&gt; is from a model&amp;rsquo;s &lt;code&gt;save()&lt;/code&gt; method:</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.sitemaps.ping_google&quot;&gt; &lt;code&gt;ping_google()&lt;/code&gt; &lt;/a&gt; 을 호출하는 유용한 방법 는 모델의 &lt;code&gt;save()&lt;/code&gt; 메소드입니다.</target>
        </trans-unit>
        <trans-unit id="17eb63729cb4ca1e9175bfce2cb9b9d88cdf1052" translate="yes" xml:space="preserve">
          <source>One way to do this is to combine &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#ListView&quot;&gt;&lt;code&gt;ListView&lt;/code&gt;&lt;/a&gt; with &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt;&lt;code&gt;SingleObjectMixin&lt;/code&gt;&lt;/a&gt;, so that the queryset for the paginated list of books can hang off the publisher found as the single object. In order to do this, we need to have two different querysets:</source>
          <target state="translated">이를 수행하는 한 가지 방법은 &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#ListView&quot;&gt; &lt;code&gt;ListView&lt;/code&gt; &lt;/a&gt; 와&lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt; &lt;code&gt;SingleObjectMixin&lt;/code&gt; &lt;/a&gt;하여 페이지 매김 된 책 목록에 대한 쿼리 세트 가 단일 오브젝트로 찾은 발행자를 중단시킬 수 있도록하는 것입니다. 이를 위해서는 두 가지 쿼리 세트가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="41f303fa2fa76a8d5b84fa7acb2f90143da403df" translate="yes" xml:space="preserve">
          <source>One, you can make sure to run each untrusted variable through the &lt;a href=&quot;builtins#std:templatefilter-escape&quot;&gt;&lt;code&gt;escape&lt;/code&gt;&lt;/a&gt; filter (documented below), which converts potentially harmful HTML characters to unharmful ones. This was the default solution in Django for its first few years, but the problem is that it puts the onus on &lt;em&gt;you&lt;/em&gt;, the developer / template author, to ensure you&amp;rsquo;re escaping everything. It&amp;rsquo;s easy to forget to escape data.</source>
          <target state="translated">하나는 &lt;a href=&quot;builtins#std:templatefilter-escape&quot;&gt; &lt;code&gt;escape&lt;/code&gt; &lt;/a&gt; 필터 (아래에 설명되어 있음)를 통해 신뢰할 수없는 각 변수를 실행하여 잠재적으로 유해한 HTML 문자를 유해하지 않은 문자로 변환 할 수 있습니다. 이것이 처음 몇 년 동안 Django의 기본 솔루션 이었지만 문제는 그것이 Onus를 켜는 것입니다&lt;em&gt; 당신&lt;/em&gt; 에게있는 거 탈출 모든 것을 보장하기 위하여 개발자 / 템플릿 저자. 데이터 이스케이프를 잊어 버리기 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="5e552a2e648dcc45b50e74d0e4c89fd9b2d22ab3" translate="yes" xml:space="preserve">
          <source>One-to-many relationships</source>
          <target state="translated">일대 다 관계</target>
        </trans-unit>
        <trans-unit id="20ec6acfe79375c3d49a487621b6f11703727d27" translate="yes" xml:space="preserve">
          <source>One-to-one relationships</source>
          <target state="translated">일대일 관계</target>
        </trans-unit>
        <trans-unit id="4b68ab7517c53fd87db0b3a6835784386aa78fb7" translate="yes" xml:space="preserve">
          <source>One-to-one relationships are very similar to many-to-one relationships. If you define a &lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt;&lt;code&gt;OneToOneField&lt;/code&gt;&lt;/a&gt; on your model, instances of that model will have access to the related object via an attribute of the model.</source>
          <target state="translated">일대일 관계는 다 대일 관계와 매우 유사합니다. 당신이 정의하면&lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt; &lt;code&gt;OneToOneField&lt;/code&gt; &lt;/a&gt;모델에서 OneToOneField해당 모델의 인스턴스는 모델의 속성을 통해 관련 개체에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="97b3481d82cdab92ba77fee20f5da98da43ecd1b" translate="yes" xml:space="preserve">
          <source>Only Python modules and packages are included in the package by default. To include additional files, we&amp;rsquo;ll need to create a &lt;code&gt;MANIFEST.in&lt;/code&gt; file. The setuptools docs referred to in the previous step discuss this file in more details. To include the templates, the &lt;code&gt;README.rst&lt;/code&gt; and our &lt;code&gt;LICENSE&lt;/code&gt; file, create a file &lt;code&gt;django-polls/MANIFEST.in&lt;/code&gt; with the following contents:</source>
          <target state="translated">기본적으로 Python 모듈 및 패키지 만 패키지에 포함됩니다. 추가 파일을 포함 시키려면 &lt;code&gt;MANIFEST.in&lt;/code&gt; 파일 을 만들어야 합니다. 이전 단계에서 언급 한 setuptools 문서는이 파일에 대해 자세히 설명합니다. 템플리트, &lt;code&gt;README.rst&lt;/code&gt; 및 &lt;code&gt;LICENSE&lt;/code&gt; 파일 을 포함하려면 &lt;code&gt;django-polls/MANIFEST.in&lt;/code&gt; 파일을 작성하십시오. 다음 컨텐츠로 .</target>
        </trans-unit>
        <trans-unit id="1fce148cd28a6d831801c9e33d3b8a3831a5e379" translate="yes" xml:space="preserve">
          <source>Only a few keys are required in the &lt;code&gt;ds_input&lt;/code&gt; dictionary to create a raster: &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;, and &lt;code&gt;srid&lt;/code&gt;. All other parameters have default values (see the table below). The list of keys that can be passed in the &lt;code&gt;ds_input&lt;/code&gt; dictionary is closely related but not identical to the &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster&quot;&gt;&lt;code&gt;GDALRaster&lt;/code&gt;&lt;/a&gt; properties. Many of the parameters are mapped directly to those properties; the others are described below.</source>
          <target state="translated">&lt;code&gt;ds_input&lt;/code&gt; 딕셔너리에는 &lt;code&gt;width&lt;/code&gt; , &lt;code&gt;height&lt;/code&gt; 및 &lt;code&gt;srid&lt;/code&gt; 와 같은 몇 개의 키만 필요합니다 . 다른 모든 매개 변수에는 기본값이 있습니다 (아래 표 참조). &lt;code&gt;ds_input&lt;/code&gt; 사전에 전달 될 수있는 키 목록 은 밀접하게 관련되어 있지만 &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster&quot;&gt; &lt;code&gt;GDALRaster&lt;/code&gt; &lt;/a&gt; 특성 과 동일하지는 않습니다 . 많은 매개 변수가 해당 특성에 직접 맵핑됩니다. 나머지는 아래에 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="e7d519722edd8f91aa9627c3bc9de76db3f17444" translate="yes" xml:space="preserve">
          <source>Only commutative operators can be used in exclusion constraints.</source>
          <target state="translated">제외 제약 조건에는 정류 연산자 만 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="118c204498e41611d1aa64a9174ae0deab8590fa" translate="yes" xml:space="preserve">
          <source>Only fields of the model are reloaded from the database. Other database-dependent values such as annotations aren&amp;rsquo;t reloaded. Any &lt;a href=&quot;../utils#django.utils.functional.cached_property&quot;&gt;&lt;code&gt;@cached_property&lt;/code&gt;&lt;/a&gt; attributes aren&amp;rsquo;t cleared either.</source>
          <target state="translated">모델의 필드 만 데이터베이스에서 다시로드됩니다. 주석과 같은 다른 데이터베이스 종속 값은 다시로드되지 않습니다. 모든 &lt;a href=&quot;../utils#django.utils.functional.cached_property&quot;&gt; &lt;code&gt;@cached_property&lt;/code&gt; 의&lt;/a&gt; 속성 중 하나를 삭제되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="81f771fd27be6e788932e7308fcda610d615c10d" translate="yes" xml:space="preserve">
          <source>Only languages listed in the &lt;a href=&quot;../../ref/settings#std:setting-LANGUAGES&quot;&gt;&lt;code&gt;LANGUAGES&lt;/code&gt;&lt;/a&gt; setting can be selected. If you want to restrict the language selection to a subset of provided languages (because your application doesn&amp;rsquo;t provide all those languages), set &lt;a href=&quot;../../ref/settings#std:setting-LANGUAGES&quot;&gt;&lt;code&gt;LANGUAGES&lt;/code&gt;&lt;/a&gt; to a list of languages. For example:</source>
          <target state="translated">&lt;a href=&quot;../../ref/settings#std:setting-LANGUAGES&quot;&gt; &lt;code&gt;LANGUAGES&lt;/code&gt; &lt;/a&gt; 설정에 나열된 언어 만 선택할 수 있습니다. 언어 선택을 제공된 언어의 하위 집합으로 제한하려면 (응용 프로그램이 모든 언어를 제공하지 않기 때문에) &lt;a href=&quot;../../ref/settings#std:setting-LANGUAGES&quot;&gt; &lt;code&gt;LANGUAGES&lt;/code&gt; 를&lt;/a&gt; 설정하십시오. 를 언어 목록으로 하십시오. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="598d1d19ae95d2cec14e6d3d02561fe81bd52fae" translate="yes" xml:space="preserve">
          <source>Only one more thing to do: we need to tell the admin that &lt;code&gt;Question&lt;/code&gt; objects have an admin interface. To do this, open the &lt;code&gt;polls/admin.py&lt;/code&gt; file, and edit it to look like this:</source>
          <target state="translated">한 가지 더해야 할 일 : 관리자에게 &lt;code&gt;Question&lt;/code&gt; 객체에 관리자 인터페이스가 있음을 알려야합니다 . 이렇게하려면 &lt;code&gt;polls/admin.py&lt;/code&gt; 를여십시오. 파일을 다음과 같이 편집하십시오.</target>
        </trans-unit>
        <trans-unit id="d187541e5c50bb85bbf53e7de2e2b853a43bb4df" translate="yes" xml:space="preserve">
          <source>Only set it to &lt;code&gt;False&lt;/code&gt; if you&amp;rsquo;re rendering non-HTML templates!</source>
          <target state="translated">&lt;code&gt;False&lt;/code&gt; 로만 설정HTML이 아닌 템플릿을 렌더링하는 경우 !</target>
        </trans-unit>
        <trans-unit id="02223d043024f670b97c33914336f2eb06bc17fd" translate="yes" xml:space="preserve">
          <source>Only space between &lt;em&gt;tags&lt;/em&gt; is removed &amp;ndash; not space between tags and text. In this example, the space around &lt;code&gt;Hello&lt;/code&gt; won&amp;rsquo;t be stripped:</source>
          <target state="translated">태그와 텍스트 사이의 공백이 아니라 &lt;em&gt;태그&lt;/em&gt; 사이의 공백 만 제거됩니다. 이 예에서는 &lt;code&gt;Hello&lt;/code&gt; 주위의 공간 은 제거되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="cf315a07b04a81601a60855f71141828daa89ad4" translate="yes" xml:space="preserve">
          <source>Only support for PostgreSQL is implemented.</source>
          <target state="translated">PostgreSQL 만 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="8a7ec474d6e2d23ebc63b6c63bb988c49dc019ef" translate="yes" xml:space="preserve">
          <source>Only supported for the &lt;code&gt;mysql&lt;/code&gt; backend (see the &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/charset-charsets.html&quot;&gt;MySQL manual&lt;/a&gt; for details).</source>
          <target state="translated">&lt;code&gt;mysql&lt;/code&gt; 백엔드 에서만 지원됩니다 ( &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/charset-charsets.html&quot;&gt;MySQL 설명서&lt;/a&gt; 참조). 참조).</target>
        </trans-unit>
        <trans-unit id="7c0d14d34ab8a7955c088997331af3fa6a9e7049" translate="yes" xml:space="preserve">
          <source>Only used in the definition of ManyToManyFields on self. Consider the following model:</source>
          <target state="translated">자체의 ManyToManyFields 정의에만 사용됩니다. 다음 모델을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="4acf1510b1d98d5e3adcf9076d95b782cf93d327" translate="yes" xml:space="preserve">
          <source>Only used when a custom intermediary model is specified. Django will normally determine which fields of the intermediary model to use in order to establish a many-to-many relationship automatically. However, consider the following models:</source>
          <target state="translated">사용자 정의 중개 모델이 지정된 경우에만 사용됩니다. Django는 일반적으로 다 대다 관계를 자동으로 설정하기 위해 중개 모델의 어떤 필드를 사용할지 결정합니다. 그러나 다음 모델을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="9254969541b35d72fc959e9b7fe870bcb83c672e" translate="yes" xml:space="preserve">
          <source>Open Geospatial Consortium, Inc., &lt;a href=&quot;https://www.opengeospatial.org/standards/sfs&quot;&gt;OpenGIS Simple Feature Specification For SQL&lt;/a&gt;.</source>
          <target state="translated">Open Geospatial Consortium, Inc., &lt;a href=&quot;https://www.opengeospatial.org/standards/sfs&quot;&gt;OpenGIS SQL의 간단한 기능 사양&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="abacb099ec5118e6e55042c66b29d2709c4e6df5" translate="yes" xml:space="preserve">
          <source>Open or reopen the file (which also does &lt;code&gt;File.seek(0)&lt;/code&gt;). The &lt;code&gt;mode&lt;/code&gt; argument allows the same values as Python&amp;rsquo;s built-in &lt;a href=&quot;https://docs.python.org/3/library/functions.html#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">파일을 열거 나 다시여십시오 ( &lt;code&gt;File.seek(0)&lt;/code&gt; 도 수행함 ). &lt;code&gt;mode&lt;/code&gt; 인수와 같은 값을 허용 파이썬의 내장 &lt;a href=&quot;https://docs.python.org/3/library/functions.html#open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3832cd1bf27026789b46ef8c2cbece9d54caa9de" translate="yes" xml:space="preserve">
          <source>Open transactions have a performance cost for your database server. To minimize this overhead, keep your transactions as short as possible. This is especially important if you&amp;rsquo;re using &lt;a href=&quot;#django.db.transaction.atomic&quot;&gt;&lt;code&gt;atomic()&lt;/code&gt;&lt;/a&gt; in long-running processes, outside of Django&amp;rsquo;s request / response cycle.</source>
          <target state="translated">열린 트랜잭션에는 데이터베이스 서버의 성능 비용이 있습니다. 이 오버 헤드를 최소화하려면 트랜잭션을 최대한 짧게 유지하십시오. &lt;a href=&quot;#django.db.transaction.atomic&quot;&gt; &lt;code&gt;atomic()&lt;/code&gt; &lt;/a&gt; 사용하는 경우 특히 중요합니다장고의 요청 / 응답주기를 벗어난 장기 실행 프로세스에서 을 .</target>
        </trans-unit>
        <trans-unit id="32793e991ad0f2475e18136d291c51ab1d339516" translate="yes" xml:space="preserve">
          <source>Open your settings file (&lt;code&gt;mysite/settings.py&lt;/code&gt;, remember) and add a &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-DIRS&quot;&gt;&lt;code&gt;DIRS&lt;/code&gt;&lt;/a&gt; option in the &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt; setting:</source>
          <target state="translated">설정 파일 ( &lt;code&gt;mysite/settings.py&lt;/code&gt; , 기억)을 열고 &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES&quot;&gt; &lt;code&gt;TEMPLATES&lt;/code&gt; &lt;/a&gt; 설정 에서 &lt;a href=&quot;../ref/settings#std:setting-TEMPLATES-DIRS&quot;&gt; &lt;code&gt;DIRS&lt;/code&gt; &lt;/a&gt; 옵션을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="6434fe05c72675fd05c47cdbb933de7e31125e90" translate="yes" xml:space="preserve">
          <source>OpenGIS Consortium, Inc., &lt;a href=&quot;https://www.opengeospatial.org/standards/sfs&quot;&gt;Simple Feature Specification For SQL&lt;/a&gt;.</source>
          <target state="translated">OpenGIS Consortium, Inc., &lt;a href=&quot;https://www.opengeospatial.org/standards/sfs&quot;&gt;SQL의 간단한 기능 사양&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="9badfbd517d8be4261428821d0d24138f988f1ee" translate="yes" xml:space="preserve">
          <source>Opens or reopens the file associated with this instance in the specified &lt;code&gt;mode&lt;/code&gt;. Unlike the standard Python &lt;code&gt;open()&lt;/code&gt; method, it doesn&amp;rsquo;t return a file descriptor.</source>
          <target state="translated">지정된 &lt;code&gt;mode&lt;/code&gt; 에서이 인스턴스와 관련된 파일을 열거 나 다시 엽니 다 . 표준 Python &lt;code&gt;open()&lt;/code&gt; 메소드 와 달리 파일 디스크립터를 리턴하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0323b5e451ddf487ae0f9edb7081ee29301ba290" translate="yes" xml:space="preserve">
          <source>Opens the file given by &lt;code&gt;name&lt;/code&gt;. Note that although the returned file is guaranteed to be a &lt;code&gt;File&lt;/code&gt; object, it might actually be some subclass. In the case of remote file storage this means that reading/writing could be quite slow, so be warned.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 으로 주어진 파일을 엽니 다 . 리턴 된 파일이 &lt;code&gt;File&lt;/code&gt; 오브젝트 임을 보장하지만 실제로는 일부 서브 클래스 일 수도 있습니다. 원격 파일 저장의 경우 읽기 / 쓰기 속도가 매우 느릴 수 있으므로 경고하십시오.</target>
        </trans-unit>
        <trans-unit id="103728613a9cc06c0578fcde7fc71050f537ea45" translate="yes" xml:space="preserve">
          <source>Opera 10.5+</source>
          <target state="translated">오페라 10.5+</target>
        </trans-unit>
        <trans-unit id="a1fdaa6b2a846c8fcf18d414bf8c61db610eda6a" translate="yes" xml:space="preserve">
          <source>Operations</source>
          <target state="translated">Operations</target>
        </trans-unit>
        <trans-unit id="03c6a5370c606a7007cc455f9ad4f55be771bfe8" translate="yes" xml:space="preserve">
          <source>Operations have a relatively simple API, and they&amp;rsquo;re designed so that you can easily write your own to supplement the built-in Django ones. The basic structure of an &lt;code&gt;Operation&lt;/code&gt; looks like this:</source>
          <target state="translated">작업은 비교적 간단한 API를 가지고 있으며 내장 된 장고를 보완하기 위해 자신만의 것을 쉽게 작성할 수 있도록 설계되었습니다. &lt;code&gt;Operation&lt;/code&gt; 의 기본 구조는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0242933f1377922941730d3a9a935c73e4996c91" translate="yes" xml:space="preserve">
          <source>Operators that return new &lt;code&gt;QuerySet&lt;/code&gt;s</source>
          <target state="translated">새 반환 운영자 &lt;code&gt;QuerySet&lt;/code&gt; 들</target>
        </trans-unit>
        <trans-unit id="900a4c57a6781dc8aa8c7a72e161410e12278326" translate="yes" xml:space="preserve">
          <source>Optimizing PostgreSQL&amp;rsquo;s configuration</source>
          <target state="translated">PostgreSQL 구성 최적화</target>
        </trans-unit>
        <trans-unit id="e31d972229de381b461860014dd710856361917a" translate="yes" xml:space="preserve">
          <source>Option</source>
          <target state="translated">Option</target>
        </trans-unit>
        <trans-unit id="475f499a740fe5799b1c67d8e4e26cb243d985a8" translate="yes" xml:space="preserve">
          <source>Optional (&lt;a href=&quot;../models/fields#django.db.models.Field.blank&quot;&gt;&lt;code&gt;blank=True&lt;/code&gt;&lt;/a&gt;). 150 characters or fewer.</source>
          <target state="translated">선택 사항입니다 ( &lt;a href=&quot;../models/fields#django.db.models.Field.blank&quot;&gt; &lt;code&gt;blank=True&lt;/code&gt; &lt;/a&gt; ). 150 자 이하</target>
        </trans-unit>
        <trans-unit id="e66aff119da5b74c8ec06d905b22607e760e1684" translate="yes" xml:space="preserve">
          <source>Optional (&lt;a href=&quot;../models/fields#django.db.models.Field.blank&quot;&gt;&lt;code&gt;blank=True&lt;/code&gt;&lt;/a&gt;). 30 characters or fewer.</source>
          <target state="translated">선택 사항입니다 ( &lt;a href=&quot;../models/fields#django.db.models.Field.blank&quot;&gt; &lt;code&gt;blank=True&lt;/code&gt; &lt;/a&gt; ). 30 자 이하</target>
        </trans-unit>
        <trans-unit id="10e30e11eaa8f36beb627e1a0f319f0e7d46a4e7" translate="yes" xml:space="preserve">
          <source>Optional (&lt;a href=&quot;../models/fields#django.db.models.Field.blank&quot;&gt;&lt;code&gt;blank=True&lt;/code&gt;&lt;/a&gt;). Email address.</source>
          <target state="translated">선택 사항입니다 ( &lt;a href=&quot;../models/fields#django.db.models.Field.blank&quot;&gt; &lt;code&gt;blank=True&lt;/code&gt; &lt;/a&gt; ). 이메일 주소.</target>
        </trans-unit>
        <trans-unit id="f0d8694ad53a2924ebd7f6ff587227e39c0eaa32" translate="yes" xml:space="preserve">
          <source>Optional arguments</source>
          <target state="translated">선택적 인수</target>
        </trans-unit>
        <trans-unit id="9b6ba92e748f3335310f550931483cf88fec0fdb" translate="yes" xml:space="preserve">
          <source>Optional keyword arguments are:</source>
          <target state="translated">선택적 키워드 인수는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="742b85c136c1ca04e82668422d5efca1b119f047" translate="yes" xml:space="preserve">
          <source>Optional methods</source>
          <target state="translated">선택적 방법</target>
        </trans-unit>
        <trans-unit id="08ad86a9f1de732a056ed6b271a3dd4a1a66436a" translate="yes" xml:space="preserve">
          <source>Optional string. A unique identifier for the issue. Identifiers should follow the pattern &lt;code&gt;applabel.X001&lt;/code&gt;, where &lt;code&gt;X&lt;/code&gt; is one of the letters &lt;code&gt;CEWID&lt;/code&gt;, indicating the message severity (&lt;code&gt;C&lt;/code&gt; for criticals, &lt;code&gt;E&lt;/code&gt; for errors and so). The number can be allocated by the application, but should be unique within that application.</source>
          <target state="translated">선택적 문자열. 문제의 고유 식별자입니다. 식별자는 &lt;code&gt;applabel.X001&lt;/code&gt; 패턴을 따라야합니다 . 여기서 &lt;code&gt;X&lt;/code&gt; 는 문자 심각도 (위험에 대한 &lt;code&gt;C&lt;/code&gt; , 오류에 대한 &lt;code&gt;E&lt;/code&gt; 등) 를 나타내는 &lt;code&gt;CEWID&lt;/code&gt; 문자 중 하나입니다 . 번호는 응용 프로그램에서 할당 할 수 있지만 해당 응용 프로그램 내에서 고유해야합니다.</target>
        </trans-unit>
        <trans-unit id="b66038a3c02f9a96da2de4ad83dde3b6fd772cf3" translate="yes" xml:space="preserve">
          <source>Optional. A longer formal identifier for the user such as their full name. If implemented, this appears alongside the username in an object&amp;rsquo;s history in &lt;a href=&quot;../../ref/contrib/admin/index#module-django.contrib.admin&quot;&gt;&lt;code&gt;django.contrib.admin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">선택 과목. 사용자의 이름과 같은 더 긴 공식 식별자입니다. 구현 된 경우 이는 &lt;a href=&quot;../../ref/contrib/admin/index#module-django.contrib.admin&quot;&gt; &lt;code&gt;django.contrib.admin&lt;/code&gt; &lt;/a&gt; 의 오브젝트 히스토리에서 사용자 이름과 함께 나타납니다 .</target>
        </trans-unit>
        <trans-unit id="061866f2e6c0cdfec2a4982a7d90d650093a48e7" translate="yes" xml:space="preserve">
          <source>Optional. A regular expression, as a string, that &lt;a href=&quot;#django.db.models.FilePathField&quot;&gt;&lt;code&gt;FilePathField&lt;/code&gt;&lt;/a&gt; will use to filter filenames. Note that the regex will be applied to the base filename, not the full path. Example: &lt;code&gt;&quot;foo.*\.txt$&quot;&lt;/code&gt;, which will match a file called &lt;code&gt;foo23.txt&lt;/code&gt; but not &lt;code&gt;bar.txt&lt;/code&gt; or &lt;code&gt;foo23.png&lt;/code&gt;.</source>
          <target state="translated">선택 과목. &lt;a href=&quot;#django.db.models.FilePathField&quot;&gt; &lt;code&gt;FilePathField&lt;/code&gt; &lt;/a&gt; 가 파일 이름을 필터링하는 데 사용할 정규 표현식 (문자열)입니다 . 정규식은 전체 경로가 아닌 기본 파일 이름에 적용됩니다. 예 : &lt;code&gt;&quot;foo.*\.txt$&quot;&lt;/code&gt; 는 &lt;code&gt;foo23.txt&lt;/code&gt; 라는 파일과 일치 하지만 &lt;code&gt;bar.txt&lt;/code&gt; 또는 &lt;code&gt;foo23.png&lt;/code&gt; 와는 일치 하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="3e29ee6bb955883371605aef97a8811a60e6c87c" translate="yes" xml:space="preserve">
          <source>Optional. A short, informal identifier for the user such as their first name. If implemented, this replaces the username in the greeting to the user in the header of &lt;a href=&quot;../../ref/contrib/admin/index#module-django.contrib.admin&quot;&gt;&lt;code&gt;django.contrib.admin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">선택 과목. 사용자의 이름과 같은 짧은 비공식 식별자입니다. 구현 된 경우 &lt;a href=&quot;../../ref/contrib/admin/index#module-django.contrib.admin&quot;&gt; &lt;code&gt;django.contrib.admin&lt;/code&gt; &lt;/a&gt; 헤더의 사용자에게 인사말에서 사용자 이름이 바뀝니다 .</target>
        </trans-unit>
        <trans-unit id="51a658020e63dbe321aa155cd99501c0cf557082" translate="yes" xml:space="preserve">
          <source>Optional. An object providing context for the message (for example, the model where the problem was discovered). The object should be a model, field, or manager or any other object that defines a &lt;code&gt;__str__()&lt;/code&gt; method. The method is used while reporting all messages and its result precedes the message.</source>
          <target state="translated">선택 과목. 메시지에 대한 컨텍스트를 제공하는 개체 (예 : 문제가 발견 된 모델) 객체는 모델, 필드 또는 관리자이거나 &lt;code&gt;__str__()&lt;/code&gt; 메서드 를 정의하는 다른 객체 여야 합니다 . 이 방법은 모든 메시지를보고하는 동안 사용되며 결과는 메시지보다 우선합니다.</target>
        </trans-unit>
        <trans-unit id="1936ff6bbb449f848f49c6ae78c3aa3aa37a355e" translate="yes" xml:space="preserve">
          <source>Optional. Either &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;. Default is &lt;code&gt;False&lt;/code&gt;. Specifies whether all subdirectories of &lt;a href=&quot;#django.db.models.FilePathField.path&quot;&gt;&lt;code&gt;path&lt;/code&gt;&lt;/a&gt; should be included</source>
          <target state="translated">선택 과목. 하나 &lt;code&gt;True&lt;/code&gt; 또는 &lt;code&gt;False&lt;/code&gt; . 기본값은 &lt;code&gt;False&lt;/code&gt; 입니다. &lt;a href=&quot;#django.db.models.FilePathField.path&quot;&gt; &lt;code&gt;path&lt;/code&gt; &lt;/a&gt; 모든 하위 디렉토리를 포함 해야하는지 여부를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="c6efc47fa95924bfdc447bff456d7202911619d1" translate="yes" xml:space="preserve">
          <source>Optional. Either &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;. Default is &lt;code&gt;False&lt;/code&gt;. Specifies whether folders in the specified location should be included. Either this or &lt;a href=&quot;#django.db.models.FilePathField.allow_files&quot;&gt;&lt;code&gt;allow_files&lt;/code&gt;&lt;/a&gt; must be &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">선택 과목. 하나 &lt;code&gt;True&lt;/code&gt; 또는 &lt;code&gt;False&lt;/code&gt; . 기본값은 &lt;code&gt;False&lt;/code&gt; 입니다. 지정된 위치의 폴더를 포함할지 여부를 지정합니다. this 또는 &lt;a href=&quot;#django.db.models.FilePathField.allow_files&quot;&gt; &lt;code&gt;allow_files&lt;/code&gt; &lt;/a&gt; 는 &lt;code&gt;True&lt;/code&gt; 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="859a13f143ebceeae06636e103999ba77f0b08f3" translate="yes" xml:space="preserve">
          <source>Optional. Either &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;. Default is &lt;code&gt;False&lt;/code&gt;. Specifies whether folders in the specified location should be included. Either this or &lt;a href=&quot;#django.forms.FilePathField.allow_files&quot;&gt;&lt;code&gt;allow_files&lt;/code&gt;&lt;/a&gt; must be &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">선택 과목. 하나 &lt;code&gt;True&lt;/code&gt; 또는 &lt;code&gt;False&lt;/code&gt; . 기본값은 &lt;code&gt;False&lt;/code&gt; 입니다. 지정된 위치의 폴더를 포함할지 여부를 지정합니다. this 또는 &lt;a href=&quot;#django.forms.FilePathField.allow_files&quot;&gt; &lt;code&gt;allow_files&lt;/code&gt; &lt;/a&gt; 는 &lt;code&gt;True&lt;/code&gt; 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="4c8bf189c542c692617e3001bd9a6dfe770462db" translate="yes" xml:space="preserve">
          <source>Optional. Either &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;. Default is &lt;code&gt;True&lt;/code&gt;. Specifies whether files in the specified location should be included. Either this or &lt;a href=&quot;#django.db.models.FilePathField.allow_folders&quot;&gt;&lt;code&gt;allow_folders&lt;/code&gt;&lt;/a&gt; must be &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">선택 과목. 하나 &lt;code&gt;True&lt;/code&gt; 또는 &lt;code&gt;False&lt;/code&gt; . 기본값은 &lt;code&gt;True&lt;/code&gt; 입니다. 지정된 위치의 파일을 포함할지 여부를 지정합니다. this 또는 &lt;a href=&quot;#django.db.models.FilePathField.allow_folders&quot;&gt; &lt;code&gt;allow_folders&lt;/code&gt; &lt;/a&gt; 는 &lt;code&gt;True&lt;/code&gt; 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="f6a3952c4ecfc5610a215c9e91c6fd5fd72b1ac0" translate="yes" xml:space="preserve">
          <source>Optional. Either &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;. Default is &lt;code&gt;True&lt;/code&gt;. Specifies whether files in the specified location should be included. Either this or &lt;a href=&quot;#django.forms.FilePathField.allow_folders&quot;&gt;&lt;code&gt;allow_folders&lt;/code&gt;&lt;/a&gt; must be &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">선택 과목. 하나 &lt;code&gt;True&lt;/code&gt; 또는 &lt;code&gt;False&lt;/code&gt; . 기본값은 &lt;code&gt;True&lt;/code&gt; 입니다. 지정된 위치의 파일을 포함할지 여부를 지정합니다. this 또는 &lt;a href=&quot;#django.forms.FilePathField.allow_folders&quot;&gt; &lt;code&gt;allow_folders&lt;/code&gt; &lt;/a&gt; 는 &lt;code&gt;True&lt;/code&gt; 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="fb4e88563898cfc6b1e24fe4d3ab342226f2930f" translate="yes" xml:space="preserve">
          <source>Optional. Use this when you don&amp;rsquo;t want to have a last page with very few items. If the last page would normally have a number of items less than or equal to &lt;code&gt;orphans&lt;/code&gt;, then those items will be added to the previous page (which becomes the last page) instead of leaving the items on a page by themselves. For example, with 23 items, &lt;code&gt;per_page=10&lt;/code&gt;, and &lt;code&gt;orphans=3&lt;/code&gt;, there will be two pages; the first page with 10 items and the second (and last) page with 13 items. &lt;code&gt;orphans&lt;/code&gt; defaults to zero, which means pages are never combined and the last page may have one item.</source>
          <target state="translated">선택 과목. 항목이 거의없는 마지막 페이지를 원하지 않는 경우이 옵션을 사용하십시오. 마지막 페이지가 일반적으로 &lt;code&gt;orphans&lt;/code&gt; 이하의 항목 수를 가지면 해당 항목은 페이지에 항목을 그대로 두지 않고 이전 페이지 (마지막 페이지가 됨)에 추가됩니다. 예를 들어, 23 개의 항목 &lt;code&gt;per_page=10&lt;/code&gt; 및 &lt;code&gt;orphans=3&lt;/code&gt; 으로 두 페이지가 있습니다. 10 개의 항목이있는 첫 번째 페이지와 13 개의 항목이있는 두 번째 (및 마지막) 페이지 &lt;code&gt;orphans&lt;/code&gt; 기본값은 0입니다. 즉, 페이지가 결합되지 않으며 마지막 페이지에 하나의 항목이있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="14c1bff36682bc530c11e77aee6ae2707c4b47f6" translate="yes" xml:space="preserve">
          <source>Optional. Whether or not the first page is allowed to be empty. If &lt;code&gt;False&lt;/code&gt; and &lt;code&gt;object_list&lt;/code&gt; is empty, then an &lt;code&gt;EmptyPage&lt;/code&gt; error will be raised.</source>
          <target state="translated">선택 과목. 첫 페이지를 비울 수 있는지 여부 경우 &lt;code&gt;False&lt;/code&gt; 과 &lt;code&gt;object_list&lt;/code&gt; 가 비어, 다음 &lt;code&gt;EmptyPage&lt;/code&gt; 의 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="0f0162cab2f0f669c986db914fb247821cb1ec00" translate="yes" xml:space="preserve">
          <source>Or ask for the average rating of all the books written by author(s) we have on file:</source>
          <target state="translated">또는 파일로 작성한 저자가 작성한 모든 책의 평균 등급을 요청하십시오.</target>
        </trans-unit>
        <trans-unit id="3e165d6eeab75c3a82d3fe0f1d27fa4aa66617e4" translate="yes" xml:space="preserve">
          <source>Or if &lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt;&lt;code&gt;staticfiles&lt;/code&gt;&lt;/a&gt; is configured using the &lt;a href=&quot;../../ref/contrib/staticfiles#django.contrib.staticfiles.storage.ManifestStaticFilesStorage&quot;&gt;&lt;code&gt;ManifestStaticFilesStorage&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">또는 &lt;a href=&quot;../../ref/contrib/staticfiles#django.contrib.staticfiles.storage.ManifestStaticFilesStorage&quot;&gt; &lt;code&gt;ManifestStaticFilesStorage&lt;/code&gt; 를&lt;/a&gt; 사용하여 &lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt; &lt;code&gt;staticfiles&lt;/code&gt; &lt;/a&gt; 을 구성한 경우 :</target>
        </trans-unit>
        <trans-unit id="25621e679324af50dad4ec149022a79ed2b71273" translate="yes" xml:space="preserve">
          <source>Or if only some variables should be escaped, you can use:</source>
          <target state="translated">또는 일부 변수 만 이스케이프해야하는 경우 다음을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c0c61c22e60e27ae3fc6d5b7070d0cf89978aee2" translate="yes" xml:space="preserve">
          <source>Or if the field isn&amp;rsquo;t declared directly on the form (such as model form fields), you can use the &lt;a href=&quot;api#django.forms.Form.fields&quot;&gt;&lt;code&gt;Form.fields&lt;/code&gt;&lt;/a&gt; attribute:</source>
          <target state="translated">또는 필드가 양식에서 직접 선언되지 않은 경우 (예 : 모델 양식 필드) &lt;a href=&quot;api#django.forms.Form.fields&quot;&gt; &lt;code&gt;Form.fields&lt;/code&gt; &lt;/a&gt; 속성을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8a5c20782dc46697c9459b8ca83e94d56d6e36da" translate="yes" xml:space="preserve">
          <source>Or in Python code:</source>
          <target state="translated">또는 파이썬 코드에서 :</target>
        </trans-unit>
        <trans-unit id="51f1927e73396518f1297b2575004e5095f6b52c" translate="yes" xml:space="preserve">
          <source>Or it can be written as a class whose instances are callable, like this:</source>
          <target state="translated">또는 다음과 같이 인스턴스를 호출 할 수있는 클래스로 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="628dfe73ba7840dc380d070dd15676af902666dd" translate="yes" xml:space="preserve">
          <source>Or on a field level:</source>
          <target state="translated">또는 필드 레벨에서 :</target>
        </trans-unit>
        <trans-unit id="a93f0f9fb53a117410c2e9ad2f200b2f307fcf27" translate="yes" xml:space="preserve">
          <source>Or to allow only some active users to log in:</source>
          <target state="translated">또는 일부 활성 사용자 만 로그인 할 수 있도록하려면 :</target>
        </trans-unit>
        <trans-unit id="95e5d3f75703413a8b79b401fe7d0d695c3cda3c" translate="yes" xml:space="preserve">
          <source>Or to call &lt;a href=&quot;#django.db.models.query.QuerySet.select_related&quot;&gt;&lt;code&gt;select_related()&lt;/code&gt;&lt;/a&gt; when applicable to reduce the number of queries even further:</source>
          <target state="translated">또는 적용 가능한 경우 &lt;a href=&quot;#django.db.models.query.QuerySet.select_related&quot;&gt; &lt;code&gt;select_related()&lt;/code&gt; &lt;/a&gt; 를 호출 하여 쿼리 수를 더욱 줄입니다.</target>
        </trans-unit>
        <trans-unit id="96e4c7d2f9d2a2b030616fa913c4e00422de6f1d" translate="yes" xml:space="preserve">
          <source>Or to run fast tests and the core one (even though it&amp;rsquo;s slow):</source>
          <target state="translated">또는 빠른 테스트와 핵심 테스트를 실행하려면 (느리더라도) :</target>
        </trans-unit>
        <trans-unit id="93b807bbd527363221a89cbd863d6640212fda60" translate="yes" xml:space="preserve">
          <source>Or use a common ancestor to hold the &lt;a href=&quot;../../ref/models/fields#django.db.models.AutoField&quot;&gt;&lt;code&gt;AutoField&lt;/code&gt;&lt;/a&gt;. This requires using an explicit &lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt;&lt;code&gt;OneToOneField&lt;/code&gt;&lt;/a&gt; from each parent model to the common ancestor to avoid a clash between the fields that are automatically generated and inherited by the child:</source>
          <target state="translated">또는 공통 조상을 사용하여 &lt;a href=&quot;../../ref/models/fields#django.db.models.AutoField&quot;&gt; &lt;code&gt;AutoField&lt;/code&gt; &lt;/a&gt; 를 유지하십시오 . 자식에 의해 자동으로 생성되고 상속되는 필드 사이의 충돌을 피하기 위해 각 부모 모델에서 공통 조상 으로 명시적인 &lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt; &lt;code&gt;OneToOneField&lt;/code&gt; &lt;/a&gt; 를 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="1b076f6cdc8de07a4839942de5e78d29d923fbf6" translate="yes" xml:space="preserve">
          <source>Or you can construct one from a Python string like this:</source>
          <target state="translated">또는 다음과 같이 파이썬 문자열로 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d2aeed12399e9670e50e9f1d89661b30754da3a5" translate="yes" xml:space="preserve">
          <source>Or you can use &lt;code&gt;no-python-format&lt;/code&gt; so that all percent signs are treated as literals:</source>
          <target state="translated">또는 &lt;code&gt;no-python-format&lt;/code&gt; 하여 모든 백분율 기호를 리터럴로 취급 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="789685f9c51dad66c9d22df1380fb36080ed3822" translate="yes" xml:space="preserve">
          <source>Or you could run it directly on a production or staging deployment to verify that the correct settings are in use (omitting &lt;code&gt;--settings&lt;/code&gt;). You could even make it part of your integration test suite.</source>
          <target state="translated">또는 프로덕션 또는 스테이징 배치에서 직접 실행하여 올바른 설정이 사용 &lt;code&gt;--settings&lt;/code&gt; ( --settings 생략 ) 확인할 수 있습니다. 통합 테스트 스위트의 일부로 만들 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="b617cd1ba98d84e1130d043eaeefe7d8402eb25f" translate="yes" xml:space="preserve">
          <source>Or you may alter the user&amp;rsquo;s role from the SQL shell (assuming this is done from an existing superuser account):</source>
          <target state="translated">또는 SQL 쉘에서 사용자 역할을 변경할 수 있습니다 (기존 수퍼 유저 계정에서 수행 한 경우).</target>
        </trans-unit>
        <trans-unit id="05b1d66bf715e37c24910768d027c42362464ed6" translate="yes" xml:space="preserve">
          <source>Or, if &lt;code&gt;country&lt;/code&gt; is a field with &lt;code&gt;choices&lt;/code&gt;, it will have a &lt;a href=&quot;../models/instances#django.db.models.Model.get_FOO_display&quot;&gt;&lt;code&gt;get_FOO_display()&lt;/code&gt;&lt;/a&gt; method available as an attribute, allowing you to group on the display string rather than the &lt;code&gt;choices&lt;/code&gt; key:</source>
          <target state="translated">경우 또는 &lt;code&gt;country&lt;/code&gt; 와 필드 &lt;code&gt;choices&lt;/code&gt; , 그것은 것입니다 &lt;a href=&quot;../models/instances#django.db.models.Model.get_FOO_display&quot;&gt; &lt;code&gt;get_FOO_display()&lt;/code&gt; &lt;/a&gt; 오히려보다 디스플레이 문자열을 그룹화 할 수 있도록 속성으로 가능한 방법을 &lt;code&gt;choices&lt;/code&gt; 키 :</target>
        </trans-unit>
        <trans-unit id="ce3b6a8261b1b6c88c0c24b29441ab053c10b703" translate="yes" xml:space="preserve">
          <source>Or, more succinctly, you can decorate the class instead and pass the name of the method to be decorated as the keyword argument &lt;code&gt;name&lt;/code&gt;:</source>
          <target state="translated">또는 더 간결하게 클래스를 장식하고 키워드 인수 &lt;code&gt;name&lt;/code&gt; 으로 장식 할 메서드 이름을 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8a1681e612a2025087b703fdf1f8f617e506b053" translate="yes" xml:space="preserve">
          <source>Oracle</source>
          <target state="translated">Oracle</target>
        </trans-unit>
        <trans-unit id="24c906abad94128562e1df0b2509b20fb80ebc90" translate="yes" xml:space="preserve">
          <source>Oracle SQL equivalent:</source>
          <target state="translated">Oracle SQL과 동등한 기능 :</target>
        </trans-unit>
        <trans-unit id="3b4a2c983578c980d5fb7441f41c11a4556cc78d" translate="yes" xml:space="preserve">
          <source>Oracle and &lt;a href=&quot;../databases#postgresql-server-side-cursors&quot;&gt;PostgreSQL&lt;/a&gt; use server-side cursors to stream results from the database without loading the entire result set into memory.</source>
          <target state="translated">Oracle과 &lt;a href=&quot;../databases#postgresql-server-side-cursors&quot;&gt;PostgreSQL&lt;/a&gt; 은 서버 측 커서를 사용하여 전체 결과 세트를 메모리에로드하지 않고 데이터베이스에서 결과를 스트리밍합니다.</target>
        </trans-unit>
        <trans-unit id="b7cec2eeafd5ab234afeacc8d167e821f3308189" translate="yes" xml:space="preserve">
          <source>Oracle does not support partial indexes. Instead, partial indexes can be emulated using functional indexes. Use a &lt;a href=&quot;../../topics/migrations&quot;&gt;migration&lt;/a&gt; to add the index using &lt;a href=&quot;../migration-operations#django.db.migrations.operations.RunSQL&quot;&gt;&lt;code&gt;RunSQL&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Oracle은 부분 인덱스를 지원하지 않습니다. 대신, 기능 인덱스를 사용하여 부분 인덱스를 에뮬레이션 할 수 있습니다. &lt;a href=&quot;../migration-operations#django.db.migrations.operations.RunSQL&quot;&gt; &lt;code&gt;RunSQL&lt;/code&gt; 을&lt;/a&gt; 사용하여 색인을 추가하려면 &lt;a href=&quot;../../topics/migrations&quot;&gt;마이그레이션&lt;/a&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="2bb858c0c3c56c066673baa7ce0106b1b7e5aa94" translate="yes" xml:space="preserve">
          <source>Oracle doesn&amp;rsquo;t support the &lt;code&gt;SHA224&lt;/code&gt; function.</source>
          <target state="translated">Oracle은 &lt;code&gt;SHA224&lt;/code&gt; 기능을 지원하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="560221169f9cab89c0441238ad0defe5bfa95fb8" translate="yes" xml:space="preserve">
          <source>Oracle imposes a name length limit of 30 characters. To accommodate this, the backend truncates database identifiers to fit, replacing the final four characters of the truncated name with a repeatable MD5 hash value. Additionally, the backend turns database identifiers to all-uppercase.</source>
          <target state="translated">Oracle은 이름 길이 제한을 30 자로 제한합니다. 이를 수용하기 위해 백엔드는 잘린 이름의 마지막 네 문자를 반복 가능한 MD5 해시 값으로 대체하여 데이터베이스 식별자를 자릅니다. 또한 백엔드는 데이터베이스 식별자를 모두 대문자로 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="c0d228d153ffc5d5fa61bcb753bb50f0393cd1ea" translate="yes" xml:space="preserve">
          <source>Oracle notes</source>
          <target state="translated">오라클 노트</target>
        </trans-unit>
        <trans-unit id="33a07706252bf9e24da2916db3db3060aab7c186" translate="yes" xml:space="preserve">
          <source>Oracle support was added.</source>
          <target state="translated">오라클 지원이 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="3507f061e1f240a2a4bc257e26a155bc7a8a45a2" translate="yes" xml:space="preserve">
          <source>Oracle users, refer to the &lt;a href=&quot;https://docs.oracle.com/en/database/oracle/oracle-database/18/nlspg/index.html&quot;&gt;Oracle manual&lt;/a&gt; for details on how to set (&lt;a href=&quot;https://docs.oracle.com/en/database/oracle/oracle-database/18/nlspg/choosing-character-set.html&quot;&gt;section 2&lt;/a&gt;) or alter (&lt;a href=&quot;https://docs.oracle.com/en/database/oracle/oracle-database/18/nlspg/character-set-migration.html&quot;&gt;section 11&lt;/a&gt;) the database character set encoding.</source>
          <target state="translated">Oracle 사용자 는 데이터베이스 문자 세트 인코딩 을 설정 ( &lt;a href=&quot;https://docs.oracle.com/en/database/oracle/oracle-database/18/nlspg/choosing-character-set.html&quot;&gt;섹션 2&lt;/a&gt; ) 또는 변경 ( &lt;a href=&quot;https://docs.oracle.com/en/database/oracle/oracle-database/18/nlspg/character-set-migration.html&quot;&gt;섹션 11&lt;/a&gt; )하는 방법에 대한 자세한 내용 은 &lt;a href=&quot;https://docs.oracle.com/en/database/oracle/oracle-database/18/nlspg/index.html&quot;&gt;Oracle 설명서&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="296a5959a53a3acc498b705e649dc5c5ed628ae7" translate="yes" xml:space="preserve">
          <source>Oracle: no requirements (see &lt;a href=&quot;https://docs.oracle.com/en/database/oracle/oracle-database/18/nlspg/datetime-data-types-and-time-zone-support.html#GUID-805AB986-DE12-4FEA-AF56-5AABCD2132DF&quot;&gt;Choosing a Time Zone File&lt;/a&gt;).</source>
          <target state="translated">Oracle : 요구 사항 없음 ( &lt;a href=&quot;https://docs.oracle.com/en/database/oracle/oracle-database/18/nlspg/datetime-data-types-and-time-zone-support.html#GUID-805AB986-DE12-4FEA-AF56-5AABCD2132DF&quot;&gt;시간대 파일 선택&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="30d87136b62cc92241cf688437d6474a9f92bac6" translate="yes" xml:space="preserve">
          <source>Order in which tests are executed</source>
          <target state="translated">테스트가 실행되는 순서</target>
        </trans-unit>
        <trans-unit id="420c74ea5a94142dc2e8ddc45403f850816df75c" translate="yes" xml:space="preserve">
          <source>Order of &lt;code&gt;MIDDLEWARE&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;MIDDLEWARE&lt;/code&gt; 의 순서</target>
        </trans-unit>
        <trans-unit id="55995aea917745e5b9c1538926b64f813438d41b" translate="yes" xml:space="preserve">
          <source>Order of &lt;code&gt;annotate()&lt;/code&gt; and &lt;code&gt;filter()&lt;/code&gt; clauses</source>
          <target state="translated">주문 &lt;code&gt;annotate()&lt;/code&gt; 및 &lt;code&gt;filter()&lt;/code&gt; 절</target>
        </trans-unit>
        <trans-unit id="7d2f7827be2e56452ab9e1eae8df3e8b6144bea7" translate="yes" xml:space="preserve">
          <source>Order of &lt;code&gt;annotate()&lt;/code&gt; and &lt;code&gt;values()&lt;/code&gt; clauses</source>
          <target state="translated">주문 &lt;code&gt;annotate()&lt;/code&gt; 와 &lt;code&gt;values()&lt;/code&gt; 조항</target>
        </trans-unit>
        <trans-unit id="8e3feffbf3af227c58c043b37683f4707ea88216" translate="yes" xml:space="preserve">
          <source>Order of assets</source>
          <target state="translated">자산의 순서</target>
        </trans-unit>
        <trans-unit id="991d0fbf1a20045f117c183786a7bc2bd16ca132" translate="yes" xml:space="preserve">
          <source>Order of execution</source>
          <target state="translated">실행 순서</target>
        </trans-unit>
        <trans-unit id="db6e3d6df8111bad6222030723cf15a80b8e40d6" translate="yes" xml:space="preserve">
          <source>Ordering and pagination of the results are controlled by the related &lt;code&gt;ModelAdmin&lt;/code&gt;&amp;rsquo;s &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_ordering&quot;&gt;&lt;code&gt;get_ordering()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_paginator&quot;&gt;&lt;code&gt;get_paginator()&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">결과의 순서 및 페이지 매김은 관련 &lt;code&gt;ModelAdmin&lt;/code&gt; 의 &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_ordering&quot;&gt; &lt;code&gt;get_ordering()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#django.contrib.admin.ModelAdmin.get_paginator&quot;&gt; &lt;code&gt;get_paginator()&lt;/code&gt; &lt;/a&gt; 메소드에 의해 제어됩니다 .</target>
        </trans-unit>
        <trans-unit id="005de91ef7aac968fb5cac1b25907b93799f647f" translate="yes" xml:space="preserve">
          <source>Ordering is not a free operation. Each field you add to the ordering incurs a cost to your database. Each foreign key you add will implicitly include all of its default orderings as well.</source>
          <target state="translated">주문은 무료 작업이 아닙니다. 주문에 추가 한 각 필드는 데이터베이스 비용이 발생합니다. 추가 한 각 외래 키에는 모든 기본 순서도 암시 적으로 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="8b5102222646eeb276b5e810050c372aa24580a7" translate="yes" xml:space="preserve">
          <source>Ordering is not free; each field to order by is an operation the database must perform. If a model has a default ordering (&lt;a href=&quot;../../ref/models/options#django.db.models.Options.ordering&quot;&gt;&lt;code&gt;Meta.ordering&lt;/code&gt;&lt;/a&gt;) and you don&amp;rsquo;t need it, remove it on a &lt;code&gt;QuerySet&lt;/code&gt; by calling &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.order_by&quot;&gt;&lt;code&gt;order_by()&lt;/code&gt;&lt;/a&gt; with no parameters.</source>
          <target state="translated">주문은 무료가 아닙니다. 주문할 각 필드는 데이터베이스가 수행해야하는 작업입니다. 모델에 기본 순서 ( &lt;a href=&quot;../../ref/models/options#django.db.models.Options.ordering&quot;&gt; &lt;code&gt;Meta.ordering&lt;/code&gt; &lt;/a&gt; )가 있고 필요하지 않은 경우 매개 변수없이 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.order_by&quot;&gt; &lt;code&gt;order_by()&lt;/code&gt; &lt;/a&gt; 를 호출 하여 &lt;code&gt;QuerySet&lt;/code&gt; 에서 모델 을 제거하십시오 .</target>
        </trans-unit>
        <trans-unit id="53af4c39205242aabe13f143571457f5791a2efe" translate="yes" xml:space="preserve">
          <source>Ordering using &lt;a href=&quot;#django.contrib.admin.ModelAdmin.ordering&quot;&gt;&lt;code&gt;ModelAdmin.ordering&lt;/code&gt;&lt;/a&gt; may cause performance problems as sorting on a large queryset will be slow.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.admin.ModelAdmin.ordering&quot;&gt; &lt;code&gt;ModelAdmin.ordering&lt;/code&gt; 을&lt;/a&gt; 사용하여 주문 하면 큰 쿼리 집합에서 정렬이 느려 성능 문제가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="170b53da47c53a430863bf01d78e2bd103f629f3" translate="yes" xml:space="preserve">
          <source>Ordinarily, annotations are generated on a per-object basis - an annotated &lt;code&gt;QuerySet&lt;/code&gt; will return one result for each object in the original &lt;code&gt;QuerySet&lt;/code&gt;. However, when a &lt;code&gt;values()&lt;/code&gt; clause is used to constrain the columns that are returned in the result set, the method for evaluating annotations is slightly different. Instead of returning an annotated result for each result in the original &lt;code&gt;QuerySet&lt;/code&gt;, the original results are grouped according to the unique combinations of the fields specified in the &lt;code&gt;values()&lt;/code&gt; clause. An annotation is then provided for each unique group; the annotation is computed over all members of the group.</source>
          <target state="translated">일반적으로 주석은 객체별로 생성됩니다. 주석이 달린 &lt;code&gt;QuerySet&lt;/code&gt; 은 원래 &lt;code&gt;QuerySet&lt;/code&gt; 의 각 객체에 대해 하나의 결과를 반환합니다 . 그러나 &lt;code&gt;values()&lt;/code&gt; 절을 사용하여 결과 집합에 반환되는 열을 제한하는 경우 주석을 평가하는 방법이 약간 다릅니다. 원래 &lt;code&gt;QuerySet&lt;/code&gt; 의 각 결과에 대해 주석이 달린 결과를 리턴하는 대신 , 원래 결과는 &lt;code&gt;values()&lt;/code&gt; 절에 지정된 필드의 고유 한 조합에 따라 그룹화됩니다 . 그런 다음 각 고유 그룹에 주석이 제공됩니다. 주석은 그룹의 모든 구성원에 대해 계산됩니다.</target>
        </trans-unit>
        <trans-unit id="3f10f78534f7589d00e4f60b98f5edf1e048c4d4" translate="yes" xml:space="preserve">
          <source>Ordinarily, serialized data for &lt;code&gt;Book&lt;/code&gt; would use an integer to refer to the author. For example, in JSON, a Book might be serialized as:</source>
          <target state="translated">일반적으로 &lt;code&gt;Book&lt;/code&gt; 의 직렬화 된 데이터 는 정수를 사용하여 저자를 나타냅니다. 예를 들어 JSON에서 책은 다음과 같이 직렬화 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="16141546793a331563f3f2fdc4d7dcbc40757661" translate="yes" xml:space="preserve">
          <source>Organization of code related to specific HTTP methods (&lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, etc.) can be addressed by separate methods instead of conditional branching.</source>
          <target state="translated">특정 HTTP 메소드 ( &lt;code&gt;GET&lt;/code&gt; , &lt;code&gt;POST&lt;/code&gt; 등) 와 관련된 코드 구성 은 조건부 분기 대신 별도의 메소드로 처리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="6d31d09863416a43257272008777412de3dc0343" translate="yes" xml:space="preserve">
          <source>Organizing models in a package</source>
          <target state="translated">패키지에서 모델 구성</target>
        </trans-unit>
        <trans-unit id="55da83428e96e3bf49eebf44fdc2f8c182ddbf21" translate="yes" xml:space="preserve">
          <source>Organizing templates</source>
          <target state="translated">템플릿 구성</target>
        </trans-unit>
        <trans-unit id="14447665d4c2d8f9f315b725d8b973ebb151e2c5" translate="yes" xml:space="preserve">
          <source>Origin API and 3rd-party integration</source>
          <target state="translated">오리진 API 및 타사 통합</target>
        </trans-unit>
        <trans-unit id="6cf7b1361d8726852a7325f31ec28d0d2e4f7221" translate="yes" xml:space="preserve">
          <source>Origin only: send only the &amp;ldquo;origin&amp;rdquo; in the referrer. The origin consists of the scheme, host and (optionally) port number. For example, if the user is visiting &lt;code&gt;https://example.com/page.html&lt;/code&gt;, the origin would be &lt;code&gt;https://example.com/&lt;/code&gt;.</source>
          <target state="translated">원점 만 : 리퍼러에서 &quot;원점&quot;만 보냅니다. 원본은 구성표, 호스트 및 (선택적) 포트 번호로 구성됩니다. 예를 들어 사용자가 &lt;code&gt;https://example.com/page.html&lt;/code&gt; 을 방문 하는 경우 출처는 &lt;code&gt;https://example.com/&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="f6c8bcec7b648c9760b1a9ea6708ae59737c716c" translate="yes" xml:space="preserve">
          <source>Other &lt;code&gt;QuerySet&lt;/code&gt; methods</source>
          <target state="translated">다른 &lt;code&gt;QuerySet&lt;/code&gt; 메소드</target>
        </trans-unit>
        <trans-unit id="65f29d4c86bb4f978641051185ab0c5b61b9d448" translate="yes" xml:space="preserve">
          <source>Other &lt;code&gt;django.security&lt;/code&gt; loggers not based on &lt;code&gt;SuspiciousOperation&lt;/code&gt; are:</source>
          <target state="translated">&lt;code&gt;SuspiciousOperation&lt;/code&gt; 을 기반으로하지 않는 다른 &lt;code&gt;django.security&lt;/code&gt; 로거 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d1ef4006e149656d7817ee292efc3130a7537e8a" translate="yes" xml:space="preserve">
          <source>Other Helpers</source>
          <target state="translated">다른 도우미</target>
        </trans-unit>
        <trans-unit id="db3716ee8a50c03cd8e126dc59e145dc9267c1af" translate="yes" xml:space="preserve">
          <source>Other Properties &amp;amp; Methods</source>
          <target state="translated">다른 속성 및 방법</target>
        </trans-unit>
        <trans-unit id="6e2191d6b97ca844ba9c5454d6d85c08f1e9f2b8" translate="yes" xml:space="preserve">
          <source>Other add-ons</source>
          <target state="translated">다른 부가 기능</target>
        </trans-unit>
        <trans-unit id="d042bb243a9d93f7d217c6e5a0c1a49c971c43e7" translate="yes" xml:space="preserve">
          <source>Other attributes</source>
          <target state="translated">다른 속성들</target>
        </trans-unit>
        <trans-unit id="8f0808417c4e94d8894a482d97d0418503902abe" translate="yes" xml:space="preserve">
          <source>Other authentication sources</source>
          <target state="translated">다른 인증 소스</target>
        </trans-unit>
        <trans-unit id="ef306d3af22afdd366097a5c56a90706f4ac8bb7" translate="yes" xml:space="preserve">
          <source>Other backends store datetimes without time zone information. If you switch from &lt;code&gt;USE_TZ = False&lt;/code&gt; to &lt;code&gt;USE_TZ = True&lt;/code&gt;, you must convert your data from local time to UTC &amp;ndash; which isn&amp;rsquo;t deterministic if your local time has DST.</source>
          <target state="translated">다른 백엔드는 시간대 정보없이 날짜 시간을 저장합니다. 당신이 전환되면 &lt;code&gt;USE_TZ = False&lt;/code&gt; 에 &lt;code&gt;USE_TZ = True&lt;/code&gt; 현지 시간 DST가있는 경우 결정하지 않습니다 - 당신은 UTC로 지역 시간에서 데이터를 변환해야합니다.</target>
        </trans-unit>
        <trans-unit id="aa6d8caad589ade3266bf1e83ffb4c334fa9991d" translate="yes" xml:space="preserve">
          <source>Other block tags (for example &lt;code&gt;{% for %}&lt;/code&gt; or &lt;code&gt;{% if %}&lt;/code&gt;) are not allowed inside a &lt;code&gt;blocktrans&lt;/code&gt; tag.</source>
          <target state="translated">다른 블록 태그 (예 : &lt;code&gt;{% for %}&lt;/code&gt; 또는 &lt;code&gt;{% if %}&lt;/code&gt; )는 &lt;code&gt;blocktrans&lt;/code&gt; 태그 내에서 허용되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="30f251e729d16aef2e5e61a11c227d160c9e8d9d" translate="yes" xml:space="preserve">
          <source>Other core functionalities</source>
          <target state="translated">다른 핵심 기능</target>
        </trans-unit>
        <trans-unit id="4bed2e8111f71065df59141e43a29a4b8f0bc963" translate="yes" xml:space="preserve">
          <source>Other database-related tips</source>
          <target state="translated">다른 데이터베이스 관련 팁</target>
        </trans-unit>
        <trans-unit id="5cb93deb997e7cfed93f5fb4038b0d930039d6e9" translate="yes" xml:space="preserve">
          <source>Other databases</source>
          <target state="translated">다른 데이터베이스</target>
        </trans-unit>
        <trans-unit id="ad24dd8dd4de3a366dfa2226270e532f5785c056" translate="yes" xml:space="preserve">
          <source>Other formats</source>
          <target state="translated">다른 형식</target>
        </trans-unit>
        <trans-unit id="ea910b17053e23533d815464a56b475af947b4f3" translate="yes" xml:space="preserve">
          <source>Other methods</source>
          <target state="translated">다른 방법</target>
        </trans-unit>
        <trans-unit id="1a080dcddf2ba764e5db781600567fddeadb8e52" translate="yes" xml:space="preserve">
          <source>Other middleware hooks</source>
          <target state="translated">다른 미들웨어 후크</target>
        </trans-unit>
        <trans-unit id="ed57bc8d21ee8cb372b5d9ff1936640dbca10641" translate="yes" xml:space="preserve">
          <source>Other model instance methods</source>
          <target state="translated">다른 모델 인스턴스 메소드</target>
        </trans-unit>
        <trans-unit id="4c15f8b2bc73ab95c0934e87b1a87123a60c7ee2" translate="yes" xml:space="preserve">
          <source>Other object-relational mappers require you to define relationships on both sides. The Django developers believe this is a violation of the DRY (Don&amp;rsquo;t Repeat Yourself) principle, so Django only requires you to define the relationship on one end.</source>
          <target state="translated">다른 객체 관계형 매퍼는 양쪽에 관계를 정의해야합니다. Django 개발자는 이것이 DRY (Do n't Repeat Yourself) 원칙을 위반한다고 생각하므로 Django는 한쪽 관계를 정의하기 만하면됩니다.</target>
        </trans-unit>
        <trans-unit id="74883f3f28ff75cbfd0b1e676bda3af8304d204b" translate="yes" xml:space="preserve">
          <source>Other problems with caching are the privacy of data and the question of where data should be stored in a cascade of caches.</source>
          <target state="translated">캐싱과 관련된 다른 문제는 데이터의 프라이버시와 캐스케이드 캐시에서 데이터를 어디에 저장해야하는지에 대한 문제입니다.</target>
        </trans-unit>
        <trans-unit id="07f0c8a819b057b97bd83b3e8e3832bd6eeea145" translate="yes" xml:space="preserve">
          <source>Other tags</source>
          <target state="translated">다른 태그</target>
        </trans-unit>
        <trans-unit id="30b651a2617dab8f49f0fe838e2180168a76de91" translate="yes" xml:space="preserve">
          <source>Other tags and filters libraries</source>
          <target state="translated">다른 태그 및 필터 라이브러리</target>
        </trans-unit>
        <trans-unit id="4a35752ab9f4b364c50ff15dd9e36c30daa57fc5" translate="yes" xml:space="preserve">
          <source>Other test conditions</source>
          <target state="translated">다른 시험 조건</target>
        </trans-unit>
        <trans-unit id="740307b6495ba5e98cdc9cd0ee6c245866224b54" translate="yes" xml:space="preserve">
          <source>Other text-based formats</source>
          <target state="translated">다른 텍스트 기반 형식</target>
        </trans-unit>
        <trans-unit id="f7a5be2bc9ddbbd8c9fdf6a6ffac21f5ac820287" translate="yes" xml:space="preserve">
          <source>Other than the &lt;code&gt;save()&lt;/code&gt; and &lt;code&gt;save_m2m()&lt;/code&gt; methods, a &lt;code&gt;ModelForm&lt;/code&gt; works exactly the same way as any other &lt;code&gt;forms&lt;/code&gt; form. For example, the &lt;code&gt;is_valid()&lt;/code&gt; method is used to check for validity, the &lt;code&gt;is_multipart()&lt;/code&gt; method is used to determine whether a form requires multipart file upload (and hence whether &lt;code&gt;request.FILES&lt;/code&gt; must be passed to the form), etc. See &lt;a href=&quot;../../ref/forms/api#binding-uploaded-files&quot;&gt;Binding uploaded files to a form&lt;/a&gt; for more information.</source>
          <target state="translated">댄 기타 &lt;code&gt;save()&lt;/code&gt; 와 &lt;code&gt;save_m2m()&lt;/code&gt; 방법은 &lt;code&gt;ModelForm&lt;/code&gt; 는 다른 정확히 같은 방식으로 작동하는 &lt;code&gt;forms&lt;/code&gt; 형성합니다. 예를 들어, &lt;code&gt;is_valid()&lt;/code&gt; 메서드는 유효성을 검사하는 데 사용되고 &lt;code&gt;is_multipart()&lt;/code&gt; 메서드는 폼에 멀티 파트 파일 업로드가 필요한지 여부 (따라서 &lt;code&gt;request.FILES&lt;/code&gt; 를 폼에 전달 해야하는지 여부 등) 를 확인하는 데 사용됩니다 . &lt;a href=&quot;../../ref/forms/api#binding-uploaded-files&quot;&gt;바인딩&lt;/a&gt; 참조 자세한 내용 은 파일을 양식 에 업로드 하십시오.</target>
        </trans-unit>
        <trans-unit id="d7c4b57295a40e5f3e757610ef1f4a955b58ae43" translate="yes" xml:space="preserve">
          <source>Other topics</source>
          <target state="translated">다른 주제</target>
        </trans-unit>
        <trans-unit id="f2253ba92e11ef33d967c8e37bf8f95e5d5af2b1" translate="yes" xml:space="preserve">
          <source>Other uses of lazy in delayed translations</source>
          <target state="translated">지연된 번역에서 게으른 다른 용도</target>
        </trans-unit>
        <trans-unit id="a29b5726b1cc15826ea9d1a05ed4d0ac7b40ef27" translate="yes" xml:space="preserve">
          <source>Otherwise, raise an exception.</source>
          <target state="translated">그렇지 않으면 예외를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="0df0011def0634465c8c760cf06ab96ff5bdcfb7" translate="yes" xml:space="preserve">
          <source>Otherwise, the request will be redirected to the URL specified by the &lt;code&gt;login_url&lt;/code&gt; parameter, with the originally requested path in a query string variable specified by &lt;code&gt;redirect_field_name&lt;/code&gt;. For example: &lt;code&gt;/admin/login/?next=/admin/polls/question/3/&lt;/code&gt;.</source>
          <target state="translated">그렇지 않으면 요청은 redirect_field_name에 의해 지정된 쿼리 문자열 변수에서 원래 요청 된 경로와 함께 &lt;code&gt;login_url&lt;/code&gt; 매개 변수에 의해 지정된 URL로 경로 &lt;code&gt;redirect_field_name&lt;/code&gt; 지정 됩니다 . 예를 들어 &lt;code&gt;/admin/login/?next=/admin/polls/question/3/&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="0050fbc0f9f82e9a5a5b89786cc9c3c5d3f52e45" translate="yes" xml:space="preserve">
          <source>Our &lt;code&gt;HandField&lt;/code&gt; accepts most of the standard field options (see the list below), but we ensure it has a fixed length, since it only needs to hold 52 card values plus their suits; 104 characters in total.</source>
          <target state="translated">우리 &lt;code&gt;HandField&lt;/code&gt; 는 표준 필드 옵션의 대부분 (목록 아래 참조)하지만, 그것은 단지 52 개 카드 값을 더한 자신의 정장을 유지해야하므로 우리가이 고정 된 길이가 보장 받아 들인다; 총 104 자</target>
        </trans-unit>
        <trans-unit id="db06c72d2934d67a03d3f0f3a2a745ee6d03f280" translate="yes" xml:space="preserve">
          <source>Our &lt;code&gt;current_time&lt;/code&gt; function could thus be written like this:</source>
          <target state="translated">우리 &lt;code&gt;current_time&lt;/code&gt; 기능은 따라서 다음과 같이 작성할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="dff6ab8adb93a46ee3c6e3bd3ed49ff4ebd8ab39" translate="yes" xml:space="preserve">
          <source>Our earlier form used a single field, &lt;code&gt;your_name&lt;/code&gt;, a &lt;a href=&quot;../../ref/forms/fields#django.forms.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt;. In this case, our form has four fields: &lt;code&gt;subject&lt;/code&gt;, &lt;code&gt;message&lt;/code&gt;, &lt;code&gt;sender&lt;/code&gt; and &lt;code&gt;cc_myself&lt;/code&gt;. &lt;a href=&quot;../../ref/forms/fields#django.forms.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/forms/fields#django.forms.EmailField&quot;&gt;&lt;code&gt;EmailField&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/forms/fields#django.forms.BooleanField&quot;&gt;&lt;code&gt;BooleanField&lt;/code&gt;&lt;/a&gt; are just three of the available field types; a full list can be found in &lt;a href=&quot;../../ref/forms/fields&quot;&gt;Form fields&lt;/a&gt;.</source>
          <target state="translated">이전 양식은 단일 필드 &lt;code&gt;your_name&lt;/code&gt; , &lt;a href=&quot;../../ref/forms/fields#django.forms.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; 를 사용했습니다&lt;/a&gt; . 이 경우 양식에는 &lt;code&gt;subject&lt;/code&gt; , &lt;code&gt;message&lt;/code&gt; , &lt;code&gt;sender&lt;/code&gt; 및 &lt;code&gt;cc_myself&lt;/code&gt; 의 네 가지 필드가 있습니다 . &lt;a href=&quot;../../ref/forms/fields#django.forms.CharField&quot;&gt; &lt;code&gt;CharField&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../../ref/forms/fields#django.forms.EmailField&quot;&gt; &lt;code&gt;EmailField&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../../ref/forms/fields#django.forms.BooleanField&quot;&gt; &lt;code&gt;BooleanField&lt;/code&gt; &lt;/a&gt; 는 사용 가능한 필드 유형 중 세 가지입니다. 전체 목록은 &lt;a href=&quot;../../ref/forms/fields&quot;&gt;양식 필드&lt;/a&gt; 에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8ffa06db831290132ff3c584882aede3e5800c0f" translate="yes" xml:space="preserve">
          <source>Our example object</source>
          <target state="translated">예제 객체</target>
        </trans-unit>
        <trans-unit id="0627352608ac4e2e19335c97ffa41d6265f59e8d" translate="yes" xml:space="preserve">
          <source>Our new &lt;code&gt;AuthorDetail&lt;/code&gt; looks like this:</source>
          <target state="translated">새로운 &lt;code&gt;AuthorDetail&lt;/code&gt; 은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1f8e1dd2e4de2f81be39a90d9ea2dedca52e113d" translate="yes" xml:space="preserve">
          <source>Our poll application is not very complex and doesn&amp;rsquo;t need custom admin templates. But if it grew more sophisticated and required modification of Django&amp;rsquo;s standard admin templates for some of its functionality, it would be more sensible to modify the &lt;em&gt;application&amp;rsquo;s&lt;/em&gt; templates, rather than those in the &lt;em&gt;project&lt;/em&gt;. That way, you could include the polls application in any new project and be assured that it would find the custom templates it needed.</source>
          <target state="translated">설문 조사 응용 프로그램은 그다지 복잡하지 않으며 사용자 지정 관리자 템플릿이 필요하지 않습니다. 그러나 일부 기능에 대해 Django의 표준 관리 템플릿을보다 정교하게 수정해야하는 경우 &lt;em&gt;프로젝트 &lt;/em&gt;&lt;em&gt;의&lt;/em&gt; 템플릿이 아닌 &lt;em&gt;응용 프로그램의&lt;/em&gt; 템플릿 을 수정하는 것이 더 합리적 입니다. 이렇게하면 새 프로젝트에 설문 조사 응용 프로그램을 포함시킬 수 있으며 필요한 사용자 정의 템플리트를 찾을 수 있습니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="94262ed90ad185998a5f246db31ae553a069776c" translate="yes" xml:space="preserve">
          <source>Our publish-these-articles function won&amp;rsquo;t need the &lt;a href=&quot;index#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt; or the request object, but we will use the queryset:</source>
          <target state="translated">우리의 기사 게시 기능은 &lt;a href=&quot;index#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; &lt;/a&gt; 이나 요청 객체 가 필요하지 않지만 쿼리 셋 을 사용할 것입니다.</target>
        </trans-unit>
        <trans-unit id="8bf7102d00ad0d0a1a4d16b6ef4507a65f16f2b8" translate="yes" xml:space="preserve">
          <source>Outdim Value</source>
          <target state="translated">희미한 가치</target>
        </trans-unit>
        <trans-unit id="4bed336194a9a5c86b6a734f03b3570d2aae1a68" translate="yes" xml:space="preserve">
          <source>Output</source>
          <target state="translated">Output</target>
        </trans-unit>
        <trans-unit id="5ff63679199d65dfb0c6db045e65af9d0751d7e2" translate="yes" xml:space="preserve">
          <source>Output 3D WKB.</source>
          <target state="translated">출력 3D WKB.</target>
        </trans-unit>
        <trans-unit id="43209554279e71a6edbe8bb7ebb6fdeecbe79ba6" translate="yes" xml:space="preserve">
          <source>Output Properties</source>
          <target state="translated">출력 속성</target>
        </trans-unit>
        <trans-unit id="c03f08a8f205e4568e916e3cfaa50c6a48749706" translate="yes" xml:space="preserve">
          <source>Output format</source>
          <target state="translated">출력 형식</target>
        </trans-unit>
        <trans-unit id="bb8145bf62edbc420c2b0cf4c732bd403b67f7e7" translate="yes" xml:space="preserve">
          <source>Output in case of error can be customized with the &lt;code&gt;msg&lt;/code&gt; argument.</source>
          <target state="translated">오류 발생시 출력은 &lt;code&gt;msg&lt;/code&gt; 인수 로 사용자 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c664efd5b3e4b44ce5bc39e691c6e2565216beef" translate="yes" xml:space="preserve">
          <source>Output of the applied datetimes at verbosity 2 and above was added.</source>
          <target state="translated">상세 2 이상의 적용된 날짜 시간 출력이 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="03e1aee184126121c6a71ebdabaa3bfe9cc944a7" translate="yes" xml:space="preserve">
          <source>Output redirection</source>
          <target state="translated">출력 리디렉션</target>
        </trans-unit>
        <trans-unit id="7835db447bc76230b5b0d736b2d78c671d7100a1" translate="yes" xml:space="preserve">
          <source>Outputs</source>
          <target state="translated">Outputs</target>
        </trans-unit>
        <trans-unit id="e10f22272a52d06137d232f9827cac0615b426c9" translate="yes" xml:space="preserve">
          <source>Outputs a &lt;code&gt;&amp;lt;ul class=&quot;errorlist&quot;&amp;gt;&lt;/code&gt; containing any validation errors corresponding to this field. You can customize the presentation of the errors with a &lt;code&gt;{% for error in field.errors %}&lt;/code&gt; loop. In this case, each object in the loop is a string containing the error message.</source>
          <target state="translated">이 필드에 해당하는 유효성 검사 오류가 포함 된 &lt;code&gt;&amp;lt;ul class=&quot;errorlist&quot;&amp;gt;&lt;/code&gt; 를 출력 합니다. &lt;code&gt;{% for error in field.errors %}&lt;/code&gt; 루프 에서 {% for error in field.errors %} 루프로 오류 표시를 사용자 정의 할 수 있습니다 . 이 경우 루프의 각 객체는 오류 메시지가 포함 된 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="7333f4a7bf31ccfdbb5dc18e2179555f50ce400e" translate="yes" xml:space="preserve">
          <source>Outputs a string in the format &lt;code&gt;Wdy, DD Mon YYYY HH:MM:SS GMT&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Wdy, DD Mon YYYY HH:MM:SS GMT&lt;/code&gt; 형식으로 문자열을 출력합니다 .</target>
        </trans-unit>
        <trans-unit id="a6f5e4808bedbab831b1bb9c7c9c21be9a0e5910" translate="yes" xml:space="preserve">
          <source>Outputs a whole load of debugging information, including the current context and imported modules.</source>
          <target state="translated">현재 컨텍스트 및 가져온 모듈을 포함하여 전체 디버깅 정보를 출력합니다.</target>
        </trans-unit>
        <trans-unit id="73525538b3d957fd8f1b877e665683002b2e3665" translate="yes" xml:space="preserve">
          <source>Outputs an empty migration for the specified apps, for manual editing. This is for advanced users and should not be used unless you are familiar with the migration format, migration operations, and the dependencies between your migrations.</source>
          <target state="translated">수동 편집을 위해 지정된 앱에 대해 빈 마이그레이션을 출력합니다. 이는 고급 사용자를위한 것이며 마이그레이션 형식, 마이그레이션 작업 및 마이그레이션 간의 종속성에 익숙하지 않은 경우 사용해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="e13110426e6548f4f6d99430014198a4aff088e3" translate="yes" xml:space="preserve">
          <source>Outputs one of the syntax characters used to compose template tags.</source>
          <target state="translated">템플릿 태그를 작성하는 데 사용되는 구문 문자 중 하나를 출력합니다.</target>
        </trans-unit>
        <trans-unit id="1b0ee9d22ffd2b84beb646b9a42cfb1a6de46213" translate="yes" xml:space="preserve">
          <source>Outputs only the objects specified by a comma separated list of primary keys. This is only available when dumping one model. By default, all the records of the model are output.</source>
          <target state="translated">쉼표로 구분 된 기본 키 목록으로 지정된 객체 만 출력합니다. 하나의 모델을 덤프 할 때만 사용할 수 있습니다. 기본적으로 모델의 모든 레코드가 출력됩니다.</target>
        </trans-unit>
        <trans-unit id="a2fb19bf9e041d6bac4abe0f868835a6e7118c10" translate="yes" xml:space="preserve">
          <source>Outputs the feed in the given encoding to &lt;code&gt;outfile&lt;/code&gt;, which is a file-like object. Subclasses should override this.</source>
          <target state="translated">주어진 인코딩의 피드를 파일과 같은 객체 인 &lt;code&gt;outfile&lt;/code&gt; 로 출력 합니다. 서브 클래스는 이것을 덮어 써야합니다.</target>
        </trans-unit>
        <trans-unit id="b1d86c371b153e0d5a8e04bf4843d2b1c82764bd" translate="yes" xml:space="preserve">
          <source>Outputs the feed in the given encoding to outfile, which is a file-like object.</source>
          <target state="translated">주어진 인코딩의 피드를 파일과 같은 객체 인 outfile로 출력합니다.</target>
        </trans-unit>
        <trans-unit id="3a8df3db84756400ab5f34f1a3a8eeb89a2d6d30" translate="yes" xml:space="preserve">
          <source>Outputs the first argument variable that is not &amp;ldquo;false&amp;rdquo; (i.e. exists, is not empty, is not a false boolean value, and is not a zero numeric value). Outputs nothing if all the passed variables are &amp;ldquo;false&amp;rdquo;.</source>
          <target state="translated">&quot;false&quot;가 아닌 첫 번째 인수 변수를 출력합니다 (즉, 존재하지 않거나 비어 있지 않고 부울 값이 아니며 숫자가 0이 아님). 전달 된 모든 변수가 &quot;false&quot;이면 아무 것도 출력하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5bcad65f84e50e07aa9fc40899f541aa8811c827" translate="yes" xml:space="preserve">
          <source>Outputs to standard output all data in the database associated with the named application(s).</source>
          <target state="translated">명명 된 응용 프로그램과 관련된 데이터베이스의 모든 데이터를 표준 출력으로 출력합니다.</target>
        </trans-unit>
        <trans-unit id="a07c2209b8bfd7ff7088211321dd90df2f4ee620" translate="yes" xml:space="preserve">
          <source>Outputting CSV with Django</source>
          <target state="translated">Django로 CSV 출력</target>
        </trans-unit>
        <trans-unit id="6bdeb471d5cc647c2c535dd532c5a68d71c980eb" translate="yes" xml:space="preserve">
          <source>Outputting PDFs with Django</source>
          <target state="translated">Django로 PDF 출력</target>
        </trans-unit>
        <trans-unit id="bfead61450a1bd4702affa28ce6ae7a44cf9aac3" translate="yes" xml:space="preserve">
          <source>Outputting forms as HTML</source>
          <target state="translated">HTML로 양식 출력</target>
        </trans-unit>
        <trans-unit id="ff49716ffa83140e43327e6b1d6b0a707b986f35" translate="yes" xml:space="preserve">
          <source>Overridden model methods are not called on bulk operations</source>
          <target state="translated">대량 작업에서는 재정의 된 모델 메서드가 호출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="89d709369fdcd6212bf5ccd14fc13db032b3b30a" translate="yes" xml:space="preserve">
          <source>Overridden settings</source>
          <target state="translated">재정의 된 설정</target>
        </trans-unit>
        <trans-unit id="035501ec3a242aa3e857c79b2e79a8403eb1c67a" translate="yes" xml:space="preserve">
          <source>Override &lt;code&gt;get_ordering_widget()&lt;/code&gt; if you need to provide a widget instance for use with &lt;code&gt;can_order&lt;/code&gt;:</source>
          <target state="translated">재정 &lt;code&gt;get_ordering_widget()&lt;/code&gt; 당신이 사용하기 위해 위젯 인스턴스를 제공해야하는 경우 &lt;code&gt;can_order&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="66913097817c449f24ca2f4e0a17beb7a1288aca" translate="yes" xml:space="preserve">
          <source>Override the template used to generate the JavaScript slippy map. Default is &lt;code&gt;'gis/admin/openlayers.html'&lt;/code&gt;.</source>
          <target state="translated">JavaScript 미끄러운 맵을 생성하는 데 사용 된 템플릿을 재정의하십시오. 기본값은 &lt;code&gt;'gis/admin/openlayers.html'&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="37aaab92c3e9edc5da33aa21afe333e610896754" translate="yes" xml:space="preserve">
          <source>Override this class method to add custom arguments accepted by the &lt;a href=&quot;../../ref/django-admin#django-admin-test&quot;&gt;&lt;code&gt;test&lt;/code&gt;&lt;/a&gt; management command. See &lt;a href=&quot;https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_argument&quot;&gt;&lt;code&gt;argparse.ArgumentParser.add_argument()&lt;/code&gt;&lt;/a&gt; for details about adding arguments to a parser.</source>
          <target state="translated">&lt;a href=&quot;../../ref/django-admin#django-admin-test&quot;&gt; &lt;code&gt;test&lt;/code&gt; &lt;/a&gt; 관리 명령이 승인 한 사용자 정의 인수를 추가하려면이 클래스 메소드를 대체하십시오 . 파서에 인수를 추가하는 방법에 대한 자세한 내용은 &lt;a href=&quot;https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_argument&quot;&gt; &lt;code&gt;argparse.ArgumentParser.add_argument()&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d12a4bd05a8c968e3b8465eece0297c044b668fa" translate="yes" xml:space="preserve">
          <source>Override this method in custom widgets that aren&amp;rsquo;t compatible with browser validation. For example, a WSYSIWG text editor widget backed by a hidden &lt;code&gt;textarea&lt;/code&gt; element may want to always return &lt;code&gt;False&lt;/code&gt; to avoid browser validation on the hidden field.</source>
          <target state="translated">브라우저 유효성 검사와 호환되지 않는 사용자 정의 위젯에서이 메소드를 대체하십시오. 예를 들어, 숨겨진 &lt;code&gt;textarea&lt;/code&gt; 요소가 지원하는 WSYSIWG 텍스트 편집기 위젯 은 숨겨진 필드에서 브라우저 유효성 검증을 피하기 위해 항상 &lt;code&gt;False&lt;/code&gt; 를 리턴 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="dc563379c597beff2c355e9c43b5ce5092ed10eb" translate="yes" xml:space="preserve">
          <source>Override this method in order to customize template loading.</source>
          <target state="translated">템플릿로드를 사용자 정의하려면이 방법을 재정의하십시오.</target>
        </trans-unit>
        <trans-unit id="1edb92cd9420ce4f36c8b1147f33da7b34cfcb35" translate="yes" xml:space="preserve">
          <source>Override this method in order to customize the context.</source>
          <target state="translated">컨텍스트를 사용자 정의하기 위해이 메소드를 대체하십시오.</target>
        </trans-unit>
        <trans-unit id="ff8c2e9164239343752ee6d0f93598934f05a1be" translate="yes" xml:space="preserve">
          <source>Override this method to customize the lookups permitted for your &lt;a href=&quot;#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt; subclass.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; &lt;/a&gt; 서브 클래스에 허용되는 검색을 사용자 정의하려면이 메소드를 대체하십시오 .</target>
        </trans-unit>
        <trans-unit id="087100e8f13a40d6b39a5b10f146cf8a7e2290bd" translate="yes" xml:space="preserve">
          <source>Override this method to programmatically determine the maximum number of inline forms. For example, this may be based on the model instance (passed as the keyword argument &lt;code&gt;obj&lt;/code&gt;):</source>
          <target state="translated">프로그래밍 방식으로 최대 인라인 양식 수를 결정하려면이 방법을 재정의하십시오. 예를 들어, 이것은 모델 인스턴스를 기반으로 할 수 있습니다 (키워드 인수 &lt;code&gt;obj&lt;/code&gt; 로 전달됨 ).</target>
        </trans-unit>
        <trans-unit id="843de265883c0b6c28f62f1497d04b114f460694" translate="yes" xml:space="preserve">
          <source>Override this method to programmatically determine the minimum number of inline forms. For example, this may be based on the model instance (passed as the keyword argument &lt;code&gt;obj&lt;/code&gt;).</source>
          <target state="translated">프로그래밍 방식으로 최소 인라인 양식 수를 결정하려면이 방법을 재정의하십시오. 예를 들어, 이것은 모델 인스턴스를 기반으로 할 수 있습니다 (키워드 인수 &lt;code&gt;obj&lt;/code&gt; 로 전달됨 ).</target>
        </trans-unit>
        <trans-unit id="feb44a6cc063864441d2898f84d3a6a1c8e295a0" translate="yes" xml:space="preserve">
          <source>Override this method to programmatically determine the number of extra inline forms. For example, this may be based on the model instance (passed as the keyword argument &lt;code&gt;obj&lt;/code&gt;):</source>
          <target state="translated">추가 인라인 양식의 수를 프로그래밍 방식으로 결정하려면이 방법을 재정의하십시오. 예를 들어, 이것은 모델 인스턴스를 기반으로 할 수 있습니다 (키워드 인수 &lt;code&gt;obj&lt;/code&gt; 로 전달됨 ).</target>
        </trans-unit>
        <trans-unit id="b3bc9b7fa0583dc0d7816f97efe6238a8a7d0bdd" translate="yes" xml:space="preserve">
          <source>Override this method to return a custom session model if you need one.</source>
          <target state="translated">사용자 정의 세션 모델이 필요한 경우이 메소드를 재정의하십시오.</target>
        </trans-unit>
        <trans-unit id="69caf77a19dbf07a315c7cad38827e71389d7d4d" translate="yes" xml:space="preserve">
          <source>Overrides the core &lt;a href=&quot;../django-admin#django-admin-runserver&quot;&gt;&lt;code&gt;runserver&lt;/code&gt;&lt;/a&gt; command if the &lt;code&gt;staticfiles&lt;/code&gt; app is &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;installed&lt;/code&gt;&lt;/a&gt; and adds automatic serving of static files. File serving doesn&amp;rsquo;t run through &lt;a href=&quot;../settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">핵심 오버라이드 (override) &lt;a href=&quot;../django-admin#django-admin-runserver&quot;&gt; &lt;code&gt;runserver&lt;/code&gt; &lt;/a&gt; 명령 경우 &lt;code&gt;staticfiles&lt;/code&gt; 의 응용 프로그램은되어 &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt; &lt;code&gt;installed&lt;/code&gt; &lt;/a&gt; 및 정적 파일을 자동으로 서빙을 추가합니다. 파일 제공이 &lt;a href=&quot;../settings#std:setting-MIDDLEWARE&quot;&gt; &lt;code&gt;MIDDLEWARE&lt;/code&gt; 를&lt;/a&gt; 통해 실행되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="7fd821b1d08d73b122a6705bea6d2acf9f48415c" translate="yes" xml:space="preserve">
          <source>Overriding &lt;code&gt;clean()&lt;/code&gt; on a &lt;code&gt;ModelFormSet&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ModelFormSet&lt;/code&gt; 에서 &lt;code&gt;clean()&lt;/code&gt; 재정의</target>
        </trans-unit>
        <trans-unit id="3dbe275b12e6b131bd5fa586a00fa885792a625f" translate="yes" xml:space="preserve">
          <source>Overriding admin templates</source>
          <target state="translated">관리 템플릿 재정의</target>
        </trans-unit>
        <trans-unit id="9d2c7bf1e34177cfe3761f91d4d3744f7f20c177" translate="yes" xml:space="preserve">
          <source>Overriding built-in widget templates</source>
          <target state="translated">내장 위젯 템플릿 재정의</target>
        </trans-unit>
        <trans-unit id="4b77dbb64d3ddce7b029d8a7f94456a8966798f7" translate="yes" xml:space="preserve">
          <source>Overriding commands</source>
          <target state="translated">명령 재정의</target>
        </trans-unit>
        <trans-unit id="5c0cd00ef62c0bf0fe417d52cbf1fa9ba89a2b50" translate="yes" xml:space="preserve">
          <source>Overriding extra instance methods</source>
          <target state="translated">추가 인스턴스 메소드 재정의</target>
        </trans-unit>
        <trans-unit id="c415121e5c9b1cf52fe819b5e91d79873486b23a" translate="yes" xml:space="preserve">
          <source>Overriding fields in a parent model leads to difficulties in areas such as initializing new instances (specifying which field is being initialized in &lt;code&gt;Model.__init__&lt;/code&gt;) and serialization. These are features which normal Python class inheritance doesn&amp;rsquo;t have to deal with in quite the same way, so the difference between Django model inheritance and Python class inheritance isn&amp;rsquo;t arbitrary.</source>
          <target state="translated">부모 모델에서 필드를 재정의하면 새 인스턴스 초기화 ( &lt;code&gt;Model.__init__&lt;/code&gt; 에서 초기화되는 필드 지정 ) 및 직렬화 와 같은 영역에서 문제가 발생합니다 . 이것들은 일반적인 파이썬 클래스 상속이 똑같은 방식으로 처리 할 필요가없는 기능이므로 Django 모델 상속과 Python 클래스 상속의 차이점은 임의적이지 않습니다.</target>
        </trans-unit>
        <trans-unit id="77d8038605b2fca489407ed088db1ceea011b7c8" translate="yes" xml:space="preserve">
          <source>Overriding from an app&amp;rsquo;s template directory</source>
          <target state="translated">앱의 템플릿 디렉토리에서 재정의</target>
        </trans-unit>
        <trans-unit id="f001aea88bb9e65ee9b4dc4471475534873ba06f" translate="yes" xml:space="preserve">
          <source>Overriding from the project&amp;rsquo;s templates directory</source>
          <target state="translated">프로젝트의 템플릿 디렉토리에서 재정의</target>
        </trans-unit>
        <trans-unit id="3a3805c2ae70eb5cb4212efd0a99dd2d9a9443e4" translate="yes" xml:space="preserve">
          <source>Overriding methods on an &lt;code&gt;InlineFormSet&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;InlineFormSet&lt;/code&gt; 에서 메서드 재정의</target>
        </trans-unit>
        <trans-unit id="9c9c3a166212376bd13fb2b3e01f65a0fc27be26" translate="yes" xml:space="preserve">
          <source>Overriding predefined model methods</source>
          <target state="translated">사전 정의 된 모델 메소드 대체</target>
        </trans-unit>
        <trans-unit id="e10ea40ee84dbb4909b38e93509627b1fa56998f" translate="yes" xml:space="preserve">
          <source>Overriding settings</source>
          <target state="translated">재정의 설정</target>
        </trans-unit>
        <trans-unit id="ed374ca602e69830c442fb16e8fb1a1ae0414a53" translate="yes" xml:space="preserve">
          <source>Overriding templates</source>
          <target state="translated">템플릿 재정의</target>
        </trans-unit>
        <trans-unit id="2397f08bfac55b9388cd6502b4efe24cb9bef22b" translate="yes" xml:space="preserve">
          <source>Overriding the clean() method</source>
          <target state="translated">clean () 메서드 재정의</target>
        </trans-unit>
        <trans-unit id="4441238c478d169181967bbd91e1d68e28320c76" translate="yes" xml:space="preserve">
          <source>Overriding the default admin site</source>
          <target state="translated">기본 관리 사이트 재정의</target>
        </trans-unit>
        <trans-unit id="785ec6b460a9a580366254f7cd31a754f6257d4c" translate="yes" xml:space="preserve">
          <source>Overriding the default fields</source>
          <target state="translated">기본 필드 재정의</target>
        </trans-unit>
        <trans-unit id="1d41bd1399dd356573d969d293bfdbd01fcff8fd" translate="yes" xml:space="preserve">
          <source>Overriding this method allows mixins to setup instance attributes for reuse in child classes. When overriding this method, you must call &lt;code&gt;super()&lt;/code&gt;.</source>
          <target state="translated">이 메소드를 재정의하면 믹스 인이 하위 클래스에서 재사용하기 위해 인스턴스 속성을 설정할 수 있습니다. 이 메소드를 재정의하는 경우 &lt;code&gt;super()&lt;/code&gt; 호출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="e8ce33c66b4853973572b69adb9d506516b80aab" translate="yes" xml:space="preserve">
          <source>Overriding this method provides the ability to modify session model data before it&amp;rsquo;s saved to database.</source>
          <target state="translated">이 방법을 재정의하면 세션 모델 데이터를 데이터베이스에 저장하기 전에 수정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b7b8a25c5d31e6f7580233bf7d54b9ce41735815" translate="yes" xml:space="preserve">
          <source>Overriding vs. replacing an admin template</source>
          <target state="translated">관리 템플릿 대체 및 대체</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">Overview</target>
        </trans-unit>
        <trans-unit id="92cb27d6d1803adc296b9c4279b80fa353e15573" translate="yes" xml:space="preserve">
          <source>Overview and a quick example</source>
          <target state="translated">개요 및 간단한 예</target>
        </trans-unit>
        <trans-unit id="20156e9875f7da34802f85b44394c55cbb9a5f1b" translate="yes" xml:space="preserve">
          <source>PBKDF2 and bcrypt</source>
          <target state="translated">PBKDF2 및 bcrypt</target>
        </trans-unit>
        <trans-unit id="b343828bbf7d960e58d0a4ca891c7d1b51085027" translate="yes" xml:space="preserve">
          <source>PGRaster</source>
          <target state="translated">PGRaster</target>
        </trans-unit>
        <trans-unit id="6eb27d4d79f559d61d621cf0080cfccf437ac896" translate="yes" xml:space="preserve">
          <source>POST with invalid data (typically redisplay form with errors)</source>
          <target state="translated">유효하지 않은 데이터가있는 POST (일반적으로 오류가있는 양식을 다시 표시)</target>
        </trans-unit>
        <trans-unit id="294d17ead46c3e6fc07b57af85f32dcdd8ca9251" translate="yes" xml:space="preserve">
          <source>POST with valid data (process the data and typically redirect)</source>
          <target state="translated">유효한 데이터가있는 POST (데이터를 처리하고 일반적으로 리디렉션)</target>
        </trans-unit>
        <trans-unit id="0963d5c6b9415810b661524f7d28705a56affa59" translate="yes" xml:space="preserve">
          <source>PROJ</source>
          <target state="translated">PROJ</target>
        </trans-unit>
        <trans-unit id="474485b21e48b6e355a5bd7d43b0dcccf85d5fc9" translate="yes" xml:space="preserve">
          <source>PROJ.4</source>
          <target state="translated">PROJ.4</target>
        </trans-unit>
        <trans-unit id="c8598d7514c7ab48be8762685bf2ae515f08ef7f" translate="yes" xml:space="preserve">
          <source>PROJ.4 string</source>
          <target state="translated">PROJ.4 문자열</target>
        </trans-unit>
        <trans-unit id="990257c6f86c20190b34ad65ebbfce57b12ac007" translate="yes" xml:space="preserve">
          <source>Package? App?</source>
          <target state="translated">꾸러미? 앱?</target>
        </trans-unit>
        <trans-unit id="83b51fffd5af70659c944e65a24a3fc7795b640c" translate="yes" xml:space="preserve">
          <source>Packaging your app</source>
          <target state="translated">앱 패키징</target>
        </trans-unit>
        <trans-unit id="fb06270f7c212baabc8749ffc36e49dc8f321548" translate="yes" xml:space="preserve">
          <source>Page</source>
          <target state="translated">Page</target>
        </trans-unit>
        <trans-unit id="7b0468ed348a7d65dd776d4abfc8e3474cc611b5" translate="yes" xml:space="preserve">
          <source>Page not found?</source>
          <target state="translated">페이지를 찾을 수 없습니까?</target>
        </trans-unit>
        <trans-unit id="f9da63ed84d3f9029e123e169b354d8b685d5524" translate="yes" xml:space="preserve">
          <source>Page uses AJAX without any HTML form</source>
          <target state="translated">HTML 형식없이 AJAX를 사용하는 페이지</target>
        </trans-unit>
        <trans-unit id="73be4714f17a88adb73ee8ec0ea70e3fc4fbe59f" translate="yes" xml:space="preserve">
          <source>Paginating a &lt;code&gt;ListView&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ListView&lt;/code&gt; 페이지 매김</target>
        </trans-unit>
        <trans-unit id="100325b8d6de92dc6ff09cd2c078133755bf274f" translate="yes" xml:space="preserve">
          <source>Pagination</source>
          <target state="translated">Pagination</target>
        </trans-unit>
        <trans-unit id="24533236e88c1d36ff37cc521374f5302ab40560" translate="yes" xml:space="preserve">
          <source>Paginator</source>
          <target state="translated">Paginator</target>
        </trans-unit>
        <trans-unit id="a975eea30db9fa05003e3b5097688bd49ec7e01b" translate="yes" xml:space="preserve">
          <source>Parameters</source>
          <target state="translated">Parameters</target>
        </trans-unit>
        <trans-unit id="381c775599d6e4185d4410725809e360928357cd" translate="yes" xml:space="preserve">
          <source>Parameters:</source>
          <target state="translated">Parameters:</target>
        </trans-unit>
        <trans-unit id="38aa618f069cd612474bdf8ae436523f7aac024f" translate="yes" xml:space="preserve">
          <source>Parses a string and returns a &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.date&quot;&gt;&lt;code&gt;datetime.date&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">문자열을 구문 분석하고 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.date&quot;&gt; &lt;code&gt;datetime.date&lt;/code&gt; 를&lt;/a&gt; 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="98c7984221adfb3491e17bb4d79c15079bcd1909" translate="yes" xml:space="preserve">
          <source>Parses a string and returns a &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt;&lt;code&gt;datetime.datetime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">문자열을 구문 분석하고 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt; &lt;code&gt;datetime.datetime&lt;/code&gt; 을&lt;/a&gt; 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="e9c57985d10f102269be4dfc290ec569bb9c2439" translate="yes" xml:space="preserve">
          <source>Parses a string and returns a &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.time&quot;&gt;&lt;code&gt;datetime.time&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">문자열을 구문 분석하고 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.time&quot;&gt; &lt;code&gt;datetime.time&lt;/code&gt; 을&lt;/a&gt; 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="bcfafbf568bd9f3c5acfb3a5945e8adb847df2c2" translate="yes" xml:space="preserve">
          <source>Parses a string and returns a &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.timedelta&quot;&gt;&lt;code&gt;datetime.timedelta&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">문자열을 구문 분석하고 &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.timedelta&quot;&gt; &lt;code&gt;datetime.timedelta&lt;/code&gt; 를&lt;/a&gt; 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="d78e9c7e2e0111470599d2080e66d8472ca42075" translate="yes" xml:space="preserve">
          <source>Parsing until another block tag</source>
          <target state="translated">다른 블록 태그까지 파싱</target>
        </trans-unit>
        <trans-unit id="dd29a98e2f867432ac16b8458dbae0a86ebb6f7d" translate="yes" xml:space="preserve">
          <source>Parsing until another block tag, and saving contents</source>
          <target state="translated">다른 블록 태그까지 파싱 및 내용 저장</target>
        </trans-unit>
        <trans-unit id="edc6c4de665cd0969b267054f0bc15952c64a141" translate="yes" xml:space="preserve">
          <source>Partial indexes in abstract base classes</source>
          <target state="translated">추상 기본 클래스의 부분 인덱스</target>
        </trans-unit>
        <trans-unit id="2e57cb42086ecd22d3778798ec47f16bab4305df" translate="yes" xml:space="preserve">
          <source>Particularly useful is passing 0 (zero) as the argument which will round the float to the nearest integer.</source>
          <target state="translated">부동 소수점을 가장 가까운 정수로 반올림하는 인수로 0을 전달하는 것이 특히 유용합니다.</target>
        </trans-unit>
        <trans-unit id="83106ebfb559316a40d0b624ad764b8f2c4fbdbe" translate="yes" xml:space="preserve">
          <source>Pass &lt;code&gt;commit=False&lt;/code&gt; to return the unsaved model instances:</source>
          <target state="translated">패스 &lt;code&gt;commit=False&lt;/code&gt; 저장되지 않은 모델 인스턴스를 반환 :</target>
        </trans-unit>
        <trans-unit id="a5907b5e14985eae2d17793f5fdff70061f9d381" translate="yes" xml:space="preserve">
          <source>Pass &lt;code&gt;configure()&lt;/code&gt; as many keyword arguments as you&amp;rsquo;d like, with each keyword argument representing a setting and its value. Each argument name should be all uppercase, with the same name as the settings described above. If a particular setting is not passed to &lt;code&gt;configure()&lt;/code&gt; and is needed at some later point, Django will use the default setting value.</source>
          <target state="translated">패스 &lt;code&gt;configure()&lt;/code&gt; 당신이 원하는만큼 설정하고 그 값을 나타내는 각 키워드 인수와 함께, 많은 키워드 인수로합니다. 각 인수 이름은 모두 대문자 여야하며 위에서 설명한 설정과 동일한 이름이어야합니다. 특정 설정이 &lt;code&gt;configure()&lt;/code&gt; 전달되지 않고 나중에 필요할 경우 Django는 기본 설정 값을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="3375ac34bc5b07b3abb647071876612620aa29e7" translate="yes" xml:space="preserve">
          <source>Pass an iterable of model instances (must all be of the same class) and the lookups or &lt;a href=&quot;#django.db.models.Prefetch&quot;&gt;&lt;code&gt;Prefetch&lt;/code&gt;&lt;/a&gt; objects you want to prefetch for. For example:</source>
          <target state="translated">반복 가능한 모델 인스턴스 (모두 동일한 클래스 여야 함)와 &lt;a href=&quot;#django.db.models.Prefetch&quot;&gt; &lt;code&gt;Prefetch&lt;/code&gt; &lt;/a&gt; 하려는 조회 또는 프리 페치 오브젝트를 전달하십시오. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0bc1e5a920414c3a7a617932bfa1cb74ddf33ca8" translate="yes" xml:space="preserve">
          <source>Pass any function (that takes no arguments) to &lt;a href=&quot;#django.db.transaction.on_commit&quot;&gt;&lt;code&gt;on_commit()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;#django.db.transaction.on_commit&quot;&gt; &lt;code&gt;on_commit()&lt;/code&gt; &lt;/a&gt; 없는 함수를 on_commit ()에 전달하십시오 .</target>
        </trans-unit>
        <trans-unit id="dff14d3715358315559de87e93047676754ed230" translate="yes" xml:space="preserve">
          <source>Pass the &lt;code&gt;RunPython.noop&lt;/code&gt; method to &lt;code&gt;code&lt;/code&gt; or &lt;code&gt;reverse_code&lt;/code&gt; when you want the operation not to do anything in the given direction. This is especially useful in making the operation reversible.</source>
          <target state="translated">패스 &lt;code&gt;RunPython.noop&lt;/code&gt; 의 에 방법 &lt;code&gt;code&lt;/code&gt; 또는 &lt;code&gt;reverse_code&lt;/code&gt; 을 당신이 주어진 방향으로 아무것도 할 수 없습니다 작업을 할 때. 이는 작업을 가역적으로 만드는 데 특히 유용합니다.</target>
        </trans-unit>
        <trans-unit id="22714a0e2f564fdc8bb2133e6f31fe4f021d1013" translate="yes" xml:space="preserve">
          <source>Pass the &lt;code&gt;RunSQL.noop&lt;/code&gt; attribute to &lt;code&gt;sql&lt;/code&gt; or &lt;code&gt;reverse_sql&lt;/code&gt; when you want the operation not to do anything in the given direction. This is especially useful in making the operation reversible.</source>
          <target state="translated">패스 &lt;code&gt;RunSQL.noop&lt;/code&gt; 의 에 속성 &lt;code&gt;sql&lt;/code&gt; 또는 &lt;code&gt;reverse_sql&lt;/code&gt; 을 당신이 주어진 방향으로 아무것도 할 수 없습니다 작업을 할 때. 이는 작업을 가역적으로 만드는 데 특히 유용합니다.</target>
        </trans-unit>
        <trans-unit id="cd27a54101bdeb3a00cc6b1e71a3a6c154544800" translate="yes" xml:space="preserve">
          <source>Pass the page number via the &lt;code&gt;page&lt;/code&gt; query-string parameter. For example, a URL would look like this:</source>
          <target state="translated">&lt;code&gt;page&lt;/code&gt; query-string 매개 변수 를 통해 페이지 번호를 전달 하십시오 . 예를 들어 URL은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ebbdcfc4d351bffe1099929547cfbf663c8041d6" translate="yes" xml:space="preserve">
          <source>Passed to the &lt;a href=&quot;#django.contrib.gis.gdal.GDALBand.data&quot;&gt;&lt;code&gt;data()&lt;/code&gt;&lt;/a&gt; method</source>
          <target state="translated">건네받는 &lt;a href=&quot;#django.contrib.gis.gdal.GDALBand.data&quot;&gt; &lt;code&gt;data()&lt;/code&gt; &lt;/a&gt; 메소드</target>
        </trans-unit>
        <trans-unit id="867c510983ef9ee90b94d79234302035e0ceebda" translate="yes" xml:space="preserve">
          <source>Passing &lt;code&gt;Value(None)&lt;/code&gt; to &lt;code&gt;expression1&lt;/code&gt; is prohibited on Oracle since Oracle doesn&amp;rsquo;t accept &lt;code&gt;NULL&lt;/code&gt; as the first argument.</source>
          <target state="translated">전달 &lt;code&gt;Value(None)&lt;/code&gt; 으로 &lt;code&gt;expression1&lt;/code&gt; 허용하지 않습니다 오라클 때문에 오라클 금지 &lt;code&gt;NULL&lt;/code&gt; 을 첫 번째 인수로.</target>
        </trans-unit>
        <trans-unit id="a499daa7841f330b02ab40e38530ebc188948246" translate="yes" xml:space="preserve">
          <source>Passing &lt;code&gt;nowait=True&lt;/code&gt;, &lt;code&gt;skip_locked=True&lt;/code&gt;, or &lt;code&gt;of&lt;/code&gt; to &lt;code&gt;select_for_update()&lt;/code&gt; using database backends that do not support these options, such as MySQL, raises a &lt;a href=&quot;../exceptions#django.db.NotSupportedError&quot;&gt;&lt;code&gt;NotSupportedError&lt;/code&gt;&lt;/a&gt;. This prevents code from unexpectedly blocking.</source>
          <target state="translated">전달 &lt;code&gt;nowait=True&lt;/code&gt; , &lt;code&gt;skip_locked=True&lt;/code&gt; , 또는 &lt;code&gt;of&lt;/code&gt; 에 &lt;code&gt;select_for_update()&lt;/code&gt; MySQL과 같은 옵션을 지원하지 않는 데이터베이스 백엔드하는 제기하여 &lt;a href=&quot;../exceptions#django.db.NotSupportedError&quot;&gt; &lt;code&gt;NotSupportedError&lt;/code&gt; 을&lt;/a&gt; . 이렇게하면 코드가 예기치 않게 차단되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d2adeb387e4441046ff1e9c147e8419b6f1c14e6" translate="yes" xml:space="preserve">
          <source>Passing custom parameters to formset forms</source>
          <target state="translated">양식 매개 변수에 사용자 정의 매개 변수 전달</target>
        </trans-unit>
        <trans-unit id="e4bc883064fdec73117f9dc706643b24af16c727" translate="yes" xml:space="preserve">
          <source>Passing extra options to &lt;code&gt;include()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;include()&lt;/code&gt; 추가 옵션 전달</target>
        </trans-unit>
        <trans-unit id="60efd02f5ed0f44b53a44ad3313f510fedaad832" translate="yes" xml:space="preserve">
          <source>Passing extra options to view functions</source>
          <target state="translated">기능을 볼 수있는 추가 옵션 전달</target>
        </trans-unit>
        <trans-unit id="7bc32ea8b1ae65cd9736e4019f349cc45bac8346" translate="yes" xml:space="preserve">
          <source>Passing iterators</source>
          <target state="translated">반복자 전달</target>
        </trans-unit>
        <trans-unit id="dc11d2c496ab8e7196b236f460f54cc548ef4e7f" translate="yes" xml:space="preserve">
          <source>Passing parameters into &lt;code&gt;raw()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;raw()&lt;/code&gt; 매개 변수 전달</target>
        </trans-unit>
        <trans-unit id="26826b46bf6032bb6290da65c715fbb888d4e9b7" translate="yes" xml:space="preserve">
          <source>Passing strings</source>
          <target state="translated">문자열 전달</target>
        </trans-unit>
        <trans-unit id="42021a29f4d390299499ad18ee376fba89d46f3c" translate="yes" xml:space="preserve">
          <source>Passing template variables to the tag</source>
          <target state="translated">템플릿 변수를 태그에 전달</target>
        </trans-unit>
        <trans-unit id="cb1d265a07df179d0e372c15df3fbfebc633fcb8" translate="yes" xml:space="preserve">
          <source>Password change</source>
          <target state="translated">비밀번호 변경</target>
        </trans-unit>
        <trans-unit id="53d05af070a4f337a22391045ae28e52feb0c7fc" translate="yes" xml:space="preserve">
          <source>Password change done</source>
          <target state="translated">비밀번호 변경 완료</target>
        </trans-unit>
        <trans-unit id="b9af60b418a51c6c11205cb77e92e77ac8901139" translate="yes" xml:space="preserve">
          <source>Password hashing</source>
          <target state="translated">비밀번호 해싱</target>
        </trans-unit>
        <trans-unit id="fdbf90a060dfba26686234af55512f4b78dc775c" translate="yes" xml:space="preserve">
          <source>Password management in Django</source>
          <target state="translated">장고의 비밀번호 관리</target>
        </trans-unit>
        <trans-unit id="97938456acff794b32791967276a916c34ef7479" translate="yes" xml:space="preserve">
          <source>Password management is something that should generally not be reinvented unnecessarily, and Django endeavors to provide a secure and flexible set of tools for managing user passwords. This document describes how Django stores passwords, how the storage hashing can be configured, and some utilities to work with hashed passwords.</source>
          <target state="translated">비밀번호 관리는 일반적으로 불필요하게 재발견되지 않아야하는 사항이며 Django는 사용자 비밀번호 관리를위한 안전하고 유연한 도구 세트를 제공하기 위해 노력합니다. 이 문서에서는 Django가 암호를 저장하는 방법, 저장소 해싱을 구성하는 방법 및 해시 된 암호를 사용하는 일부 유틸리티에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="42747c3134a14a08e853bd9298741b02f392325d" translate="yes" xml:space="preserve">
          <source>Password strength checking</source>
          <target state="translated">비밀번호 강도 확인</target>
        </trans-unit>
        <trans-unit id="72e845c3a0535ba2a4b8b38cd50be31dfab9b536" translate="yes" xml:space="preserve">
          <source>Password to use for the SMTP server defined in &lt;a href=&quot;#std:setting-EMAIL_HOST&quot;&gt;&lt;code&gt;EMAIL_HOST&lt;/code&gt;&lt;/a&gt;. This setting is used in conjunction with &lt;a href=&quot;#std:setting-EMAIL_HOST_USER&quot;&gt;&lt;code&gt;EMAIL_HOST_USER&lt;/code&gt;&lt;/a&gt; when authenticating to the SMTP server. If either of these settings is empty, Django won&amp;rsquo;t attempt authentication.</source>
          <target state="translated">&lt;a href=&quot;#std:setting-EMAIL_HOST&quot;&gt; &lt;code&gt;EMAIL_HOST&lt;/code&gt; 에&lt;/a&gt; 정의 된 SMTP 서버에 사용할 비밀번호 입니다. 이 설정은 SMTP 서버를 인증 할 때 &lt;a href=&quot;#std:setting-EMAIL_HOST_USER&quot;&gt; &lt;code&gt;EMAIL_HOST_USER&lt;/code&gt; &lt;/a&gt; 와 함께 사용됩니다 . 이 설정 중 하나가 비어 있으면 Django는 인증을 시도하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f78b3350a7bcdb589a957e23ff81fad31b3e2773" translate="yes" xml:space="preserve">
          <source>Password upgrading</source>
          <target state="translated">비밀번호 업그레이드</target>
        </trans-unit>
        <trans-unit id="82bfb41a774975db54411718143f0e70ce9a7688" translate="yes" xml:space="preserve">
          <source>Password upgrading without requiring a login</source>
          <target state="translated">로그인없이 비밀번호 업그레이드</target>
        </trans-unit>
        <trans-unit id="cfb75c3a8b84a83f1313ca1c5eb4ad97afb6c789" translate="yes" xml:space="preserve">
          <source>Password validation</source>
          <target state="translated">비밀번호 검증</target>
        </trans-unit>
        <trans-unit id="f63d7362dbbfa3509b73dc229d682d018ee48cc6" translate="yes" xml:space="preserve">
          <source>Password validation can prevent the use of many types of weak passwords. However, the fact that a password passes all the validators doesn&amp;rsquo;t guarantee that it is a strong password. There are many factors that can weaken a password that are not detectable by even the most advanced password validators.</source>
          <target state="translated">암호 유효성 검사는 여러 유형의 취약한 암호를 사용하지 못하게 할 수 있습니다. 그러나 암호가 모든 유효성 검사기를 통과한다는 사실이 강력한 암호임을 보증하지는 않습니다. 최첨단 암호 유효성 검사기에서도 감지 할 수없는 암호를 약화시킬 수있는 많은 요소가 있습니다.</target>
        </trans-unit>
        <trans-unit id="030ddae36a366a4e884ba702f1f24e629d2fafa4" translate="yes" xml:space="preserve">
          <source>Password validation is configured in the &lt;a href=&quot;../../ref/settings#std:setting-AUTH_PASSWORD_VALIDATORS&quot;&gt;&lt;code&gt;AUTH_PASSWORD_VALIDATORS&lt;/code&gt;&lt;/a&gt; setting:</source>
          <target state="translated">비밀번호 유효성 검사는 &lt;a href=&quot;../../ref/settings#std:setting-AUTH_PASSWORD_VALIDATORS&quot;&gt; &lt;code&gt;AUTH_PASSWORD_VALIDATORS&lt;/code&gt; &lt;/a&gt; 설정 에서 구성됩니다 .</target>
        </trans-unit>
        <trans-unit id="3dd8163758541d100df9ffeb599a921e907953ed" translate="yes" xml:space="preserve">
          <source>Path converters</source>
          <target state="translated">경로 변환기</target>
        </trans-unit>
        <trans-unit id="d3f7215820c20d73fb1520647a2cfe9ae2d19c59" translate="yes" xml:space="preserve">
          <source>Path matching was added.</source>
          <target state="translated">경로 일치가 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="1c611af2558850679a78f47f5579ae407fea6cdb" translate="yes" xml:space="preserve">
          <source>Path to a custom template that will be used by the admin site app index view.</source>
          <target state="translated">관리 사이트 앱 인덱스보기에서 사용할 사용자 지정 템플릿의 경로입니다.</target>
        </trans-unit>
        <trans-unit id="a3c17c88e105eb850a5ad023c10109e7c8f035c4" translate="yes" xml:space="preserve">
          <source>Path to a custom template that will be used by the admin site login view.</source>
          <target state="translated">관리 사이트 로그인보기에서 사용될 사용자 정의 템플리트의 경로입니다.</target>
        </trans-unit>
        <trans-unit id="0a6b4a4caccef224659a85c6f9f94574b9f64e63" translate="yes" xml:space="preserve">
          <source>Path to a custom template that will be used by the admin site logout view.</source>
          <target state="translated">관리 사이트 로그 아웃보기에서 사용할 사용자 지정 템플릿의 경로입니다.</target>
        </trans-unit>
        <trans-unit id="af6ee8fc926db110165f33c61aa6ff661bccdf24" translate="yes" xml:space="preserve">
          <source>Path to a custom template that will be used by the admin site main index view.</source>
          <target state="translated">관리 사이트 기본 색인보기에서 사용될 사용자 정의 템플리트의 경로입니다.</target>
        </trans-unit>
        <trans-unit id="b0a61f6a8b7ef4c17116725efb1139996550e882" translate="yes" xml:space="preserve">
          <source>Path to a custom template that will be used by the admin site password change done view.</source>
          <target state="translated">관리 사이트 비밀번호 변경 완료보기에서 사용할 사용자 정의 템플리트의 경로입니다.</target>
        </trans-unit>
        <trans-unit id="f95c10d6eac86f86888cc76f83fcea345c83bd8b" translate="yes" xml:space="preserve">
          <source>Path to a custom template that will be used by the admin site password change view.</source>
          <target state="translated">관리 사이트 비밀번호 변경보기에서 사용될 사용자 정의 템플리트의 경로입니다.</target>
        </trans-unit>
        <trans-unit id="4ecf349cf4d3adf10399fee85596d3bb4c52d469" translate="yes" xml:space="preserve">
          <source>Path to a custom template, used by &lt;a href=&quot;#django.contrib.admin.ModelAdmin.add_view&quot;&gt;&lt;code&gt;add_view()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.admin.ModelAdmin.add_view&quot;&gt; &lt;code&gt;add_view()&lt;/code&gt; &lt;/a&gt; 사용하는 사용자 정의 템플릿의 경로 입니다.</target>
        </trans-unit>
        <trans-unit id="88f3bb0e37e80c6a1bcc036d5e5fdf3dea300ed8" translate="yes" xml:space="preserve">
          <source>Path to a custom template, used by &lt;a href=&quot;#django.contrib.admin.ModelAdmin.change_view&quot;&gt;&lt;code&gt;change_view()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.admin.ModelAdmin.change_view&quot;&gt; &lt;code&gt;change_view()&lt;/code&gt; &lt;/a&gt; 사용하는 사용자 정의 템플릿의 경로 입니다.</target>
        </trans-unit>
        <trans-unit id="2c7220fce158453823a1b66b37aca5acee702105" translate="yes" xml:space="preserve">
          <source>Path to a custom template, used by &lt;a href=&quot;#django.contrib.admin.ModelAdmin.changelist_view&quot;&gt;&lt;code&gt;changelist_view()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.admin.ModelAdmin.changelist_view&quot;&gt; &lt;code&gt;changelist_view()&lt;/code&gt; &lt;/a&gt; 사용하는 사용자 정의 템플리트의 경로 입니다.</target>
        </trans-unit>
        <trans-unit id="5f591d246cfdef823abf87f8a77ea702e1c10bd2" translate="yes" xml:space="preserve">
          <source>Path to a custom template, used by &lt;a href=&quot;#django.contrib.admin.ModelAdmin.delete_view&quot;&gt;&lt;code&gt;delete_view()&lt;/code&gt;&lt;/a&gt; for displaying a confirmation page when deleting one or more objects.</source>
          <target state="translated">하나 이상의 객체를 삭제할 때 확인 페이지를 표시하기 위해 &lt;a href=&quot;#django.contrib.admin.ModelAdmin.delete_view&quot;&gt; &lt;code&gt;delete_view()&lt;/code&gt; &lt;/a&gt; 에서 사용하는 사용자 정의 템플리트의 경로 입니다.</target>
        </trans-unit>
        <trans-unit id="0c2e8f0a12128c3ab584505f6c0757977a466d7d" translate="yes" xml:space="preserve">
          <source>Path to a custom template, used by &lt;a href=&quot;#django.contrib.admin.ModelAdmin.history_view&quot;&gt;&lt;code&gt;history_view()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.admin.ModelAdmin.history_view&quot;&gt; &lt;code&gt;history_view()&lt;/code&gt; &lt;/a&gt; 에서 사용되는 사용자 정의 템플릿의 경로 입니다.</target>
        </trans-unit>
        <trans-unit id="6c63c61822ce8565bbff9ba9c14ec706fad15416" translate="yes" xml:space="preserve">
          <source>Path to a custom template, used by &lt;a href=&quot;#django.contrib.admin.ModelAdmin.response_add&quot;&gt;&lt;code&gt;response_add()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#django.contrib.admin.ModelAdmin.response_change&quot;&gt;&lt;code&gt;response_change()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#django.contrib.admin.ModelAdmin.response_delete&quot;&gt;&lt;code&gt;response_delete()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django.contrib.admin.ModelAdmin.response_add&quot;&gt; &lt;code&gt;response_add()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#django.contrib.admin.ModelAdmin.response_change&quot;&gt; &lt;code&gt;response_change()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#django.contrib.admin.ModelAdmin.response_delete&quot;&gt; &lt;code&gt;response_delete()&lt;/code&gt; &lt;/a&gt; 의해 사용되는 사용자 정의 템플릿의 경로 입니다.</target>
        </trans-unit>
        <trans-unit id="84e2190f2c73e7f762bcc09f1d74e0a065af6f13" translate="yes" xml:space="preserve">
          <source>Path to a custom template, used by the &lt;code&gt;delete_selected&lt;/code&gt; action method for displaying a confirmation page when deleting one or more objects. See the &lt;a href=&quot;actions&quot;&gt;actions documentation&lt;/a&gt;.</source>
          <target state="translated">하나 이상의 객체를 삭제할 때 확인 페이지를 표시하기 위해 &lt;code&gt;delete_selected&lt;/code&gt; 조치 메소드가 사용하는 사용자 정의 템플리트의 경로 입니다. &lt;a href=&quot;actions&quot;&gt;작업 설명서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f95dfae2a5316331007fb6a8e1f5453be2d906e0" translate="yes" xml:space="preserve">
          <source>Paths in asset definitions</source>
          <target state="translated">자산 정의의 경로</target>
        </trans-unit>
        <trans-unit id="53abecb8bf2af146e43fc25704616a8595335af7" translate="yes" xml:space="preserve">
          <source>Paths used to specify assets can be either relative or absolute. If a path starts with &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;http://&lt;/code&gt; or &lt;code&gt;https://&lt;/code&gt;, it will be interpreted as an absolute path, and left as-is. All other paths will be prepended with the value of the appropriate prefix. If the &lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt;&lt;code&gt;django.contrib.staticfiles&lt;/code&gt;&lt;/a&gt; app is installed, it will be used to serve assets.</source>
          <target state="translated">자산을 지정하는 데 사용되는 경로는 상대적이거나 절대적 일 수 있습니다. 경로가 &lt;code&gt;/&lt;/code&gt; , &lt;code&gt;http://&lt;/code&gt; 또는 &lt;code&gt;https://&lt;/code&gt; 로 시작하면 절대 경로로 해석되어 그대로 유지됩니다. 다른 모든 경로 앞에는 적절한 접두사 값이 붙습니다. 는 IF &lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt; &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; 의&lt;/a&gt; 응용 프로그램이 설치되어,이 자산을 제공하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="e2feeb9a8c48b959a84dc56a27e5d342951587fd" translate="yes" xml:space="preserve">
          <source>Patterns don&amp;rsquo;t search GET and POST parameters, or the domain name. For example, in a request to &lt;code&gt;https://www.example.com/myapp/&lt;/code&gt;, the URLconf will look for &lt;code&gt;myapp/&lt;/code&gt;. In a request to &lt;code&gt;https://www.example.com/myapp/?page=3&lt;/code&gt;, the URLconf will also look for &lt;code&gt;myapp/&lt;/code&gt;.</source>
          <target state="translated">패턴은 GET 및 POST 매개 변수 또는 도메인 이름을 검색하지 않습니다. 예를 들어 &lt;code&gt;https://www.example.com/myapp/&lt;/code&gt; 에 대한 요청 에서 URLconf는 &lt;code&gt;myapp/&lt;/code&gt; 찾습니다 . &lt;code&gt;https://www.example.com/myapp/?page=3&lt;/code&gt; 에 대한 요청 에서 URLconf는 &lt;code&gt;myapp/&lt;/code&gt; 도 찾습니다 .</target>
        </trans-unit>
        <trans-unit id="2b78a58c376655ac544fdd20d4725693c93da7d0" translate="yes" xml:space="preserve">
          <source>Pay extra attention if you set new default values for arguments in the &lt;code&gt;Field&lt;/code&gt; superclass; you want to make sure they&amp;rsquo;re always included, rather than disappearing if they take on the old default value.</source>
          <target state="translated">&lt;code&gt;Field&lt;/code&gt; 수퍼 클래스 에서 인수의 새로운 기본값을 설정하는 경우 특히주의하십시오 . 이전 기본값을 사용하면 사라지지 않고 항상 포함되도록해야합니다.</target>
        </trans-unit>
        <trans-unit id="594c442547cc35487cd009181ae20319c80c5a71" translate="yes" xml:space="preserve">
          <source>Pay particular attention to backwards incompatible changes to get a clear idea of what will be needed for a successful upgrade.</source>
          <target state="translated">이전 버전과 호환되지 않는 변경 사항에 특히주의를 기울여 성공적인 업그레이드에 필요한 사항을 명확하게 파악하십시오.</target>
        </trans-unit>
        <trans-unit id="e398f12507cb84c1ebf8a01e1677802a0e657315" translate="yes" xml:space="preserve">
          <source>Per-object summaries can be generated using the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.annotate&quot;&gt;&lt;code&gt;annotate()&lt;/code&gt;&lt;/a&gt; clause. When an &lt;code&gt;annotate()&lt;/code&gt; clause is specified, each object in the &lt;code&gt;QuerySet&lt;/code&gt; will be annotated with the specified values.</source>
          <target state="translated">객체 별 요약은 &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.annotate&quot;&gt; &lt;code&gt;annotate()&lt;/code&gt; &lt;/a&gt; 절을 사용하여 생성 할 수 있습니다 . 경우 &lt;code&gt;annotate()&lt;/code&gt; 구가 지정되면, 각 오브젝트 &lt;code&gt;QuerySet&lt;/code&gt; 지정된 값으로 주석한다.</target>
        </trans-unit>
        <trans-unit id="b8c281fc601c15be7b044f13ee8e38598899e21d" translate="yes" xml:space="preserve">
          <source>Per-request transactions and streaming responses</source>
          <target state="translated">요청 당 트랜잭션 및 스트리밍 응답</target>
        </trans-unit>
        <trans-unit id="67f3db8d0939383b7e5120b105c86c3bd6dbf1be" translate="yes" xml:space="preserve">
          <source>Percent Rank</source>
          <target state="translated">비율 순위</target>
        </trans-unit>
        <trans-unit id="f99f33983bd0aae5f91d07dd7ab8345f193cc3e5" translate="yes" xml:space="preserve">
          <source>Perform the command&amp;rsquo;s actions for &lt;code&gt;app_config&lt;/code&gt;, which will be an &lt;a href=&quot;../ref/applications#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; instance corresponding to an application label given on the command line.</source>
          <target state="translated">&lt;code&gt;app_config&lt;/code&gt; 에 대한 명령의 조치를 수행하십시오 . 이는 명령 행에 제공된 애플리케이션 레이블에 해당 하는 &lt;a href=&quot;../ref/applications#django.apps.AppConfig&quot;&gt; &lt;code&gt;AppConfig&lt;/code&gt; &lt;/a&gt; 인스턴스입니다.</target>
        </trans-unit>
        <trans-unit id="d095abe3a9010ab49f3950b5b1561b6615ba109b" translate="yes" xml:space="preserve">
          <source>Perform the command&amp;rsquo;s actions for &lt;code&gt;label&lt;/code&gt;, which will be the string as given on the command line.</source>
          <target state="translated">&lt;code&gt;label&lt;/code&gt; 에 대한 명령의 조치를 수행하십시오 . 이는 명령 행에 제공된 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="63c904559993935c470f516c8b549ca7f3640dbb" translate="yes" xml:space="preserve">
          <source>Performance</source>
          <target state="translated">Performance</target>
        </trans-unit>
        <trans-unit id="2b80df3bed690b3128861d9e152f675ea8826d81" translate="yes" xml:space="preserve">
          <source>Performance and optimization</source>
          <target state="translated">성능 및 최적화</target>
        </trans-unit>
        <trans-unit id="bcd699a0cdae62872f3edfba9239ab5f07470457" translate="yes" xml:space="preserve">
          <source>Performance and optimization overview</source>
          <target state="translated">성능 및 최적화 개요</target>
        </trans-unit>
        <trans-unit id="87b4f4b3bfcd6886b8193c17c86c824cb40213a8" translate="yes" xml:space="preserve">
          <source>Performance benchmarking</source>
          <target state="translated">성능 벤치마킹</target>
        </trans-unit>
        <trans-unit id="0cb883fc85b1fd84aaebb7319c682c586a065641" translate="yes" xml:space="preserve">
          <source>Performance considerations</source>
          <target state="translated">성능 고려 사항</target>
        </trans-unit>
        <trans-unit id="ae714eedb21d7ab1528a4ae82422cec5289d2845" translate="yes" xml:space="preserve">
          <source>Performance considerations for large datasets</source>
          <target state="translated">대규모 데이터 세트에 대한 성능 고려 사항</target>
        </trans-unit>
        <trans-unit id="8ee3b2dc04e0215d9a974d428a5be7af6d478312" translate="yes" xml:space="preserve">
          <source>Performance considerations with ordering and sorting</source>
          <target state="translated">순서 및 정렬시 성능 고려 사항</target>
        </trans-unit>
        <trans-unit id="57eb76df8c228a52fa0a32fe3f7d805858d345f1" translate="yes" xml:space="preserve">
          <source>Performance issues paginating large &lt;code&gt;QuerySet&lt;/code&gt;s</source>
          <target state="translated">성능 문제 paginating 대형 &lt;code&gt;QuerySet&lt;/code&gt; 의</target>
        </trans-unit>
        <trans-unit id="7ceaba33d5069dbda23239422436b2c95b3fbf96" translate="yes" xml:space="preserve">
          <source>Performance optimizations</source>
          <target state="translated">성능 최적화</target>
        </trans-unit>
        <trans-unit id="5becd8e661b6a97e9458257ed85b17fc0d3e0068" translate="yes" xml:space="preserve">
          <source>Performance optimizations are another category of trade-offs with convenience. For instance, caching is useful in production, less so for local development. Error reporting needs are also widely different.</source>
          <target state="translated">성능 최적화는 편의상 또 다른 범주의 절충입니다. 예를 들어, 캐싱은 프로덕션에 유용하며 로컬 개발에는 그다지 유용하지 않습니다. 오류보고 요구 사항도 크게 다릅니다.</target>
        </trans-unit>
        <trans-unit id="158f80dec0b85939f0f5846ccb6bc0da934a4aff" translate="yes" xml:space="preserve">
          <source>Performing actions after commit</source>
          <target state="translated">커밋 후 작업 수행</target>
        </trans-unit>
        <trans-unit id="cd0fb10828b82b902b570a4024cf081d37128641" translate="yes" xml:space="preserve">
          <source>Performing extra work</source>
          <target state="translated">추가 작업 수행</target>
        </trans-unit>
        <trans-unit id="350310b0607f1d6331a0ddbcedd2fc32ffb465f7" translate="yes" xml:space="preserve">
          <source>Performing global post-test teardown.</source>
          <target state="translated">글로벌 테스트 후 분해 수행</target>
        </trans-unit>
        <trans-unit id="cc61a8f27b7c24e7cb629cf9d4b96984b5a39b6d" translate="yes" xml:space="preserve">
          <source>Performing global pre-test setup.</source>
          <target state="translated">글로벌 사전 테스트 설정 수행</target>
        </trans-unit>
        <trans-unit id="71e37d0adb6adfac736d37bfa52a53ea1e3bf6e1" translate="yes" xml:space="preserve">
          <source>Performing raw SQL queries</source>
          <target state="translated">원시 SQL 쿼리 수행</target>
        </trans-unit>
        <trans-unit id="cad75e52264fcd20385b958231648b076610e84b" translate="yes" xml:space="preserve">
          <source>Performing raw queries</source>
          <target state="translated">원시 쿼리 수행</target>
        </trans-unit>
        <trans-unit id="cc3b1021e9a86a3acfa73ba992dd59266658de10" translate="yes" xml:space="preserve">
          <source>Performs URL rewriting based on the &lt;a href=&quot;settings#std:setting-APPEND_SLASH&quot;&gt;&lt;code&gt;APPEND_SLASH&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;settings#std:setting-PREPEND_WWW&quot;&gt;&lt;code&gt;PREPEND_WWW&lt;/code&gt;&lt;/a&gt; settings.</source>
          <target state="translated">&lt;a href=&quot;settings#std:setting-APPEND_SLASH&quot;&gt; &lt;code&gt;APPEND_SLASH&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;settings#std:setting-PREPEND_WWW&quot;&gt; &lt;code&gt;PREPEND_WWW&lt;/code&gt; &lt;/a&gt; 설정 에 따라 URL 재 작성을 수행 합니다.</target>
        </trans-unit>
        <trans-unit id="d29a15d48c3ff7247ebc6f6ef2b637ea97801d97" translate="yes" xml:space="preserve">
          <source>Performs an SQL delete query on all rows in the &lt;a href=&quot;#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; and returns the number of objects deleted and a dictionary with the number of deletions per object type.</source>
          <target state="translated">&lt;a href=&quot;#django.db.models.query.QuerySet&quot;&gt; &lt;code&gt;QuerySet&lt;/code&gt; 의&lt;/a&gt; 모든 행에서 SQL 삭제 쿼리를 수행하고 삭제 된 개체 수와 개체 유형 당 삭제 수를 가진 사전을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c114706f49d4f5dc002f7814b9df80c8a2ed84f2" translate="yes" xml:space="preserve">
          <source>Performs an SQL update query for the specified fields, and returns the number of rows matched (which may not be equal to the number of rows updated if some rows already have the new value).</source>
          <target state="translated">지정된 필드에 대해 SQL 업데이트 쿼리를 수행하고 일치하는 행 수를 반환합니다 (일부 행에 이미 새 값이있는 경우 업데이트 된 행 수와 같지 않을 수 있음).</target>
        </trans-unit>
        <trans-unit id="b48ee18bc781dc21a08722b397a52297df32eff1" translate="yes" xml:space="preserve">
          <source>Performs any cleaning on the &lt;code&gt;username&lt;/code&gt; (e.g. stripping LDAP DN information) prior to using it to get or create a user object. Returns the cleaned username.</source>
          <target state="translated">사용자 개체를 가져 오거나 만들기 위해 사용자 &lt;code&gt;username&lt;/code&gt; 을 사용하기 전에 사용자 이름을 정리합니다 (예 : LDAP DN 정보 제거). 정리 된 사용자 이름을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="246a818df13cbbbbfc866f12a62fd447eac03353" translate="yes" xml:space="preserve">
          <source>Performs global post-test teardown, such as removing instrumentation from the template system and restoring normal email services.</source>
          <target state="translated">템플릿 시스템에서 계측을 제거하고 일반 이메일 서비스를 복원하는 등의 전체 테스트 후 분류를 수행합니다.</target>
        </trans-unit>
        <trans-unit id="a8b30211935a430f6cdf20f168e2eba4f87d8bb3" translate="yes" xml:space="preserve">
          <source>Performs global pre-test setup, such as installing instrumentation for the template rendering system and setting up the dummy email outbox.</source>
          <target state="translated">템플릿 렌더링 시스템 용 계측기 설치 및 더미 이메일 발신 함 설정과 같은 글로벌 사전 테스트 설정을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="7b4fe6ff4dcae7c6f94c35e727b63487f7fdb00c" translate="yes" xml:space="preserve">
          <source>Perhaps logged-in admin users should be allowed to see unpublished &lt;code&gt;Questions&lt;/code&gt;, but not ordinary visitors. Again: whatever needs to be added to the software to accomplish this should be accompanied by a test, whether you write the test first and then make the code pass the test, or work out the logic in your code first and then write a test to prove it.</source>
          <target state="translated">로그인 한 관리자는 공개되지 않은 &lt;code&gt;Questions&lt;/code&gt; 을 볼 수 있지만 일반 방문자는 볼 수 없습니다. 다시 : 소프트웨어를 추가하기 위해 테스트를 먼저 작성하고 코드를 테스트에 통과 시키거나 코드의 논리를 먼저 연습 한 다음 테스트를 작성해야합니다. 그것을 증명하십시오.</target>
        </trans-unit>
        <trans-unit id="0e9fe7d5a36abc41d023282aff0764ffd9a1e922" translate="yes" xml:space="preserve">
          <source>Perhaps, for instance, your site includes a view whose results depend on several expensive queries, the results of which change at different intervals. In this case, it would not be ideal to use the full-page caching that the per-site or per-view cache strategies offer, because you wouldn&amp;rsquo;t want to cache the entire result (since some of the data changes often), but you&amp;rsquo;d still want to cache the results that rarely change.</source>
          <target state="translated">예를 들어 사이트에 결과가 값 비싼 몇 가지 쿼리에 의존하는 뷰가 포함되어있을 수 있으며 결과는 서로 다른 간격으로 변경됩니다. 이 경우 전체 결과를 캐시하지 않으려는 경우 (일부 데이터 변경 사항이 있기 때문에) 사이트 별 또는보기 당 캐시 전략이 제공하는 전체 페이지 캐싱을 사용하는 것이 이상적이지 않습니다. 그러나 거의 변경되지 않는 결과를 캐시하려고합니다.</target>
        </trans-unit>
        <trans-unit id="8faebcc441548e3c376bd0355caeb12cebb88eba" translate="yes" xml:space="preserve">
          <source>Permission caching</source>
          <target state="translated">권한 캐싱</target>
        </trans-unit>
        <trans-unit id="d06d55570938d12f87db3bf2b48caa9de22d9c67" translate="yes" xml:space="preserve">
          <source>Permissions</source>
          <target state="translated">Permissions</target>
        </trans-unit>
        <trans-unit id="5d919afbd469ebf76a8be7e58815187b8fe8bc59" translate="yes" xml:space="preserve">
          <source>Permissions and Authorization</source>
          <target state="translated">권한 및 권한</target>
        </trans-unit>
        <trans-unit id="a47f3fd0644dda3ff0b65116c2c9135682fd4f23" translate="yes" xml:space="preserve">
          <source>Permissions and authorization</source>
          <target state="translated">권한 및 권한</target>
        </trans-unit>
        <trans-unit id="6042a22bc7d97a7cd78da919ef0f626d92138bbf" translate="yes" xml:space="preserve">
          <source>Permissions can be set not only per type of object, but also per specific object instance. By using the &lt;a href=&quot;../../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.has_view_permission&quot;&gt;&lt;code&gt;has_view_permission()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.has_add_permission&quot;&gt;&lt;code&gt;has_add_permission()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.has_change_permission&quot;&gt;&lt;code&gt;has_change_permission()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.has_delete_permission&quot;&gt;&lt;code&gt;has_delete_permission()&lt;/code&gt;&lt;/a&gt; methods provided by the &lt;a href=&quot;../../ref/contrib/admin/index#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt; class, it is possible to customize permissions for different object instances of the same type.</source>
          <target state="translated">개체 유형뿐만 아니라 특정 개체 인스턴스별로 권한을 설정할 수 있습니다. &lt;a href=&quot;../../ref/contrib/admin/index#django.contrib.admin.ModelAdmin&quot;&gt; &lt;code&gt;ModelAdmin&lt;/code&gt; &lt;/a&gt; 클래스가 제공 하는 &lt;a href=&quot;../../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.has_view_permission&quot;&gt; &lt;code&gt;has_view_permission()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.has_add_permission&quot;&gt; &lt;code&gt;has_add_permission()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.has_change_permission&quot;&gt; &lt;code&gt;has_change_permission()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../../ref/contrib/admin/index#django.contrib.admin.ModelAdmin.has_delete_permission&quot;&gt; &lt;code&gt;has_delete_permission()&lt;/code&gt; &lt;/a&gt; 메소드 를 사용하여 동일한 유형의 다른 오브젝트 인스턴스에 대한 권한을 사용자 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fbff237369de06d317a0b658feaf770230fade6a" translate="yes" xml:space="preserve">
          <source>Permissions: Binary (yes/no) flags designating whether a user may perform a certain task.</source>
          <target state="translated">권한 : 사용자가 특정 작업을 수행 할 수 있는지 여부를 지정하는 이진 (예 / 아니오) 플래그입니다.</target>
        </trans-unit>
        <trans-unit id="7a346cd10ffe699546f235f362a53bac9f81fa99" translate="yes" xml:space="preserve">
          <source>Persistent connections</source>
          <target state="translated">지속적인 연결</target>
        </trans-unit>
        <trans-unit id="5527c702a1226ed849c17bf8545ec1a197d478da" translate="yes" xml:space="preserve">
          <source>Persistent connections avoid the overhead of re-establishing a connection to the database in each request. They&amp;rsquo;re controlled by the &lt;a href=&quot;settings#std:setting-CONN_MAX_AGE&quot;&gt;&lt;code&gt;CONN_MAX_AGE&lt;/code&gt;&lt;/a&gt; parameter which defines the maximum lifetime of a connection. It can be set independently for each database.</source>
          <target state="translated">지속적인 연결은 각 요청에서 데이터베이스에 대한 연결을 다시 설정하는 오버 헤드를 피합니다. 연결의 최대 수명을 정의 하는 &lt;a href=&quot;settings#std:setting-CONN_MAX_AGE&quot;&gt; &lt;code&gt;CONN_MAX_AGE&lt;/code&gt; &lt;/a&gt; 매개 변수에 의해 제어됩니다 . 각 데이터베이스에 대해 독립적으로 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ecc8fd07befe6d71a839208418ee04d9af0cdb35" translate="yes" xml:space="preserve">
          <source>Persistent state</source>
          <target state="translated">지속적인 상태</target>
        </trans-unit>
        <trans-unit id="496e9438ab65557e3360c256d99d6d71460da8a3" translate="yes" xml:space="preserve">
          <source>Philosophy</source>
          <target state="translated">Philosophy</target>
        </trans-unit>
        <trans-unit id="35cc717a3ea48a92f26c8b257f8b5c3c987027a3" translate="yes" xml:space="preserve">
          <source>Pickles of &lt;code&gt;QuerySets&lt;/code&gt; are only valid for the version of Django that was used to generate them. If you generate a pickle using Django version N, there is no guarantee that pickle will be readable with Django version N+1. Pickles should not be used as part of a long-term archival strategy.</source>
          <target state="translated">&lt;code&gt;QuerySets&lt;/code&gt; 피클은 이를 생성하는 데 사용 된 Django 버전에만 유효합니다. Django 버전 N을 사용하여 피클을 생성하면 Django 버전 N + 1에서 피클을 읽을 수 있다고 보장 할 수 없습니다. 피클을 장기 보관 전략의 일부로 사용해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="6d0148232e25209752fd250046d1e1e5365c0bf9" translate="yes" xml:space="preserve">
          <source>Pickles of models are only valid for the version of Django that was used to generate them. If you generate a pickle using Django version N, there is no guarantee that pickle will be readable with Django version N+1. Pickles should not be used as part of a long-term archival strategy.</source>
          <target state="translated">피클 모델은 모델 생성에 사용 된 Django 버전에만 유효합니다. Django 버전 N을 사용하여 피클을 생성하면 Django 버전 N + 1에서 피클을 읽을 수 있다고 보장 할 수 없습니다. 피클을 장기 보관 전략의 일부로 사용해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="e0e5d5560b715f0a73b38d639394514dc7764164" translate="yes" xml:space="preserve">
          <source>Pickling &lt;code&gt;QuerySet&lt;/code&gt;s</source>
          <target state="translated">산세 &lt;code&gt;QuerySet&lt;/code&gt; 의</target>
        </trans-unit>
        <trans-unit id="3e577e5c97a799fa16a538451be3f3460858c9f4" translate="yes" xml:space="preserve">
          <source>Pickling objects</source>
          <target state="translated">산세 대상</target>
        </trans-unit>
        <trans-unit id="c9b609a7a0071985e1b196bfdacc310b8ce76780" translate="yes" xml:space="preserve">
          <source>Pinging Google</source>
          <target state="translated">핑 Google</target>
        </trans-unit>
        <trans-unit id="1aec9f7d616f37a87712e020c021c06578d6d716" translate="yes" xml:space="preserve">
          <source>Pinging Google via &lt;code&gt;manage.py&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;manage.py&lt;/code&gt; 를 통해 Google 핑</target>
        </trans-unit>
        <trans-unit id="2f1d58b998875409d1483ed8145f5535f153c8c0" translate="yes" xml:space="preserve">
          <source>Pixel width and height used for georeferencing the raster, as a point object with &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; members. See &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.geotransform&quot;&gt;&lt;code&gt;geotransform&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 및 &lt;code&gt;y&lt;/code&gt; 멤버가 있는 점 객체로 래스터를 지리 참조하는 데 사용되는 픽셀 너비 및 높이 입니다. 자세한 내용은 &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.geotransform&quot;&gt; &lt;code&gt;geotransform&lt;/code&gt; &lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="bc8a879aac31b9d6eb482c7dc9001a8e5a26ed67" translate="yes" xml:space="preserve">
          <source>Place.objects.all() returns all Places, regardless of whether they have Restaurants:</source>
          <target state="translated">Place.objects.all ()은 음식점이 있는지 여부에 관계없이 모든 장소를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="1472be598dad008e8b7e6176694c3682d869a694" translate="yes" xml:space="preserve">
          <source>Platform-specific instructions</source>
          <target state="translated">플랫폼 별 지침</target>
        </trans-unit>
        <trans-unit id="aff897904900c56f2ce8b62f77e12c92a2ed20e4" translate="yes" xml:space="preserve">
          <source>Playing with &lt;code&gt;Context&lt;/code&gt; objects</source>
          <target state="translated">&lt;code&gt;Context&lt;/code&gt; 객체로 재생</target>
        </trans-unit>
        <trans-unit id="6ac31ef33df4860a5777ea446d2c00537722d098" translate="yes" xml:space="preserve">
          <source>Playing with the API</source>
          <target state="translated">API로 재생</target>
        </trans-unit>
        <trans-unit id="945144904d116a346215bedd2ad08e4f4c3b1716" translate="yes" xml:space="preserve">
          <source>Please also consult platform-specific instructions if you are on &lt;a href=&quot;index#macos&quot;&gt;macOS&lt;/a&gt; or &lt;a href=&quot;index#windows&quot;&gt;Windows&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;index#macos&quot;&gt;macOS&lt;/a&gt; 또는 &lt;a href=&quot;index#windows&quot;&gt;Windows를&lt;/a&gt; 사용하는 경우 플랫폼 별 지침을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a3063da44afe6d9259ba01aec843c1f12d20e110" translate="yes" xml:space="preserve">
          <source>Please also see the &lt;a href=&quot;#render-warning&quot;&gt;rendering warning&lt;/a&gt; as mentioned for &lt;a href=&quot;#django-admin-startapp&quot;&gt;&lt;code&gt;startapp&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#django-admin-startapp&quot;&gt; &lt;code&gt;startapp&lt;/code&gt; 에&lt;/a&gt; 언급 된 &lt;a href=&quot;#render-warning&quot;&gt;렌더링 경고&lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f4b0dee64fbb0daeb99d6f6433dd16d0f3ea7666" translate="yes" xml:space="preserve">
          <source>Please don&amp;rsquo;t do it for this tutorial, but on the next page that displays a preview of the patch, you would click &amp;ldquo;Create pull request&amp;rdquo;.</source>
          <target state="translated">이 튜토리얼에서는하지 말고 패치의 미리보기를 표시하는 다음 페이지에서 &quot;Create pull request&quot;를 클릭하십시오.</target>
        </trans-unit>
        <trans-unit id="dd3c3fcd9d54b9d240b3a7b691e97c29668e1d7d" translate="yes" xml:space="preserve">
          <source>Please note that according to &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/charset-unicode-sets.html&quot;&gt;MySQL Unicode Character Sets&lt;/a&gt;, comparisons for the &lt;code&gt;utf8_general_ci&lt;/code&gt; collation are faster, but slightly less correct, than comparisons for &lt;code&gt;utf8_unicode_ci&lt;/code&gt;. If this is acceptable for your application, you should use &lt;code&gt;utf8_general_ci&lt;/code&gt; because it is faster. If this is not acceptable (for example, if you require German dictionary order), use &lt;code&gt;utf8_unicode_ci&lt;/code&gt; because it is more accurate.</source>
          <target state="translated">에 따라 있습니다 &lt;a href=&quot;https://dev.mysql.com/doc/refman/en/charset-unicode-sets.html&quot;&gt;MySQL의 유니 코드 문자 집합&lt;/a&gt; 의 대한 비교 &lt;code&gt;utf8_general_ci&lt;/code&gt; 의 데이터 정렬에 대한 비교를보다 빠르게,하지만 약간 덜 정확한 &lt;code&gt;utf8_unicode_ci&lt;/code&gt; . 이것이 응용 프로그램에 적합한 경우, 더 빠르기 때문에 &lt;code&gt;utf8_general_ci&lt;/code&gt; 를 사용해야합니다 . 이것이 허용되지 않는 경우 (예 : 독일어 사전 순서가 필요한 경우) 더 정확한 &lt;code&gt;utf8_unicode_ci&lt;/code&gt; 를 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="61c9c7d6201e4421ab2907f232155b7d7af62fbc" translate="yes" xml:space="preserve">
          <source>Please note that the presence of this setting does not imply that Django&amp;rsquo;s CSRF protection is safe from cross-subdomain attacks by default - please see the &lt;a href=&quot;csrf#csrf-limitations&quot;&gt;CSRF limitations&lt;/a&gt; section.</source>
          <target state="translated">이 설정이 존재한다고해서 Django의 CSRF 보호가 기본적으로 교차 서브 도메인 공격으로부터 안전하다는 것을 의미하지는 않습니다 . &lt;a href=&quot;csrf#csrf-limitations&quot;&gt;CSRF 제한&lt;/a&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f555e10e4c64d8e62d16b2b5b7c678648b4ff894" translate="yes" xml:space="preserve">
          <source>Please note the caveats under &lt;a href=&quot;../ref/settings#std:setting-SECURE_PROXY_SSL_HEADER&quot;&gt;&lt;code&gt;SECURE_PROXY_SSL_HEADER&lt;/code&gt;&lt;/a&gt;. For the case of a reverse proxy, it may be easier or more secure to configure the main Web server to do the redirect to HTTPS.</source>
          <target state="translated">&lt;a href=&quot;../ref/settings#std:setting-SECURE_PROXY_SSL_HEADER&quot;&gt; &lt;code&gt;SECURE_PROXY_SSL_HEADER&lt;/code&gt; &lt;/a&gt; 아래의주의 사항에 유의하십시오 . 리버스 프록시의 경우 HTTPS로 리디렉션하도록 기본 웹 서버를 구성하는 것이 더 안전하거나 안전 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b25cb094d1d27b01e27c9afab7e6b1a51bce03d7" translate="yes" xml:space="preserve">
          <source>Please refer to its &lt;a href=&quot;contrib/gis/commands#django-admin-ogrinspect&quot;&gt;&lt;code&gt;description&lt;/code&gt;&lt;/a&gt; in the GeoDjango documentation.</source>
          <target state="translated">GeoDjango 문서 의 &lt;a href=&quot;contrib/gis/commands#django-admin-ogrinspect&quot;&gt; &lt;code&gt;description&lt;/code&gt; &lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d92355eefed916d708a8f8c8821d784a6d817613" translate="yes" xml:space="preserve">
          <source>Please refer to its &lt;a href=&quot;contrib/sitemaps#django-admin-ping_google&quot;&gt;&lt;code&gt;description&lt;/code&gt;&lt;/a&gt; in the Sitemaps documentation.</source>
          <target state="translated">Sitemap 설명서 의 &lt;a href=&quot;contrib/sitemaps#django-admin-ping_google&quot;&gt; &lt;code&gt;description&lt;/code&gt; &lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8f8a4e796321a065679280200da41cb9ae57915f" translate="yes" xml:space="preserve">
          <source>Please refer to its &lt;a href=&quot;contrib/staticfiles#django-admin-collectstatic&quot;&gt;&lt;code&gt;description&lt;/code&gt;&lt;/a&gt; in the &lt;a href=&quot;contrib/staticfiles&quot;&gt;staticfiles&lt;/a&gt; documentation.</source>
          <target state="translated">&lt;a href=&quot;contrib/staticfiles&quot;&gt;정적 파일&lt;/a&gt; 문서 에서 &lt;a href=&quot;contrib/staticfiles#django-admin-collectstatic&quot;&gt; &lt;code&gt;description&lt;/code&gt; &lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="27545fdc451a436172a6796515d9ff68fee772aa" translate="yes" xml:space="preserve">
          <source>Please refer to its &lt;a href=&quot;contrib/staticfiles#django-admin-findstatic&quot;&gt;&lt;code&gt;description&lt;/code&gt;&lt;/a&gt; in the &lt;a href=&quot;contrib/staticfiles&quot;&gt;staticfiles&lt;/a&gt; documentation.</source>
          <target state="translated">&lt;a href=&quot;contrib/staticfiles&quot;&gt;정적 파일&lt;/a&gt; 문서 에서 &lt;a href=&quot;contrib/staticfiles#django-admin-findstatic&quot;&gt; &lt;code&gt;description&lt;/code&gt; &lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="fcc1657655e13b26336a1f918bea2362b8beb8ad" translate="yes" xml:space="preserve">
          <source>Please refer to the &lt;a href=&quot;https://postgis.net/docs/using_postgis_dbmanagement.html#PostGIS_Geography&quot;&gt;PostGIS Geography Type&lt;/a&gt; documentation for more details.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;https://postgis.net/docs/using_postgis_dbmanagement.html#PostGIS_Geography&quot;&gt;PostGIS Geography Type&lt;/a&gt; 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="eee66bf135a104e85862ac181583cbf6e6096e0b" translate="yes" xml:space="preserve">
          <source>Please refer to the notes about &lt;a href=&quot;#historical-models&quot;&gt;Historical models&lt;/a&gt; in migrations to see the implications that come along.</source>
          <target state="translated">이와 관련된 결과를 보려면 마이그레이션의 &lt;a href=&quot;#historical-models&quot;&gt;히스토리 모델&lt;/a&gt; 에 대한 참고 사항 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="7b5132a644191e3e0c1bd4c851f5a29784f9272a" translate="yes" xml:space="preserve">
          <source>Plural form and po files</source>
          <target state="translated">복수형과 po 파일</target>
        </trans-unit>
        <trans-unit id="deece46c22e64f44a14fe2209222289025573b98" translate="yes" xml:space="preserve">
          <source>Pluralization</source>
          <target state="translated">Pluralization</target>
        </trans-unit>
        <trans-unit id="bfb18c81f7d12bc77bce9d95a4e7bbce79d43c94" translate="yes" xml:space="preserve">
          <source>Points to the model the field relates to. For example, &lt;code&gt;Author&lt;/code&gt; in &lt;code&gt;ForeignKey(Author, on_delete=models.CASCADE)&lt;/code&gt;. The &lt;code&gt;related_model&lt;/code&gt; for a &lt;code&gt;GenericForeignKey&lt;/code&gt; is always &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">필드가 관련된 모델을 가리 킵니다. 예를 들어, &lt;code&gt;Author&lt;/code&gt; in &lt;code&gt;ForeignKey(Author, on_delete=models.CASCADE)&lt;/code&gt; 입니다. &lt;code&gt;related_model&lt;/code&gt; A에 대한 &lt;code&gt;GenericForeignKey&lt;/code&gt; 은 항상 없다 &lt;code&gt;None&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="71bb200b0c8a940ce59c402fc6398215220da8df" translate="yes" xml:space="preserve">
          <source>Populate the test database with fixture data from the given fixtures. (For more on fixtures, see the documentation for &lt;a href=&quot;#django-admin-loaddata&quot;&gt;&lt;code&gt;loaddata&lt;/code&gt;&lt;/a&gt; above.)</source>
          <target state="translated">주어진 조명기의 조명기 데이터로 테스트 데이터베이스를 채 웁니다. (픽스처에 대한 자세한 내용은 설명서를 참조 &lt;a href=&quot;#django-admin-loaddata&quot;&gt; &lt;code&gt;loaddata&lt;/code&gt; &lt;/a&gt; 위.)</target>
        </trans-unit>
        <trans-unit id="3a2edcda15f5ffb120fc20f1479582ba5b5f36fb" translate="yes" xml:space="preserve">
          <source>Populated (through &lt;a href=&quot;mixins-simple#django.views.generic.base.ContextMixin&quot;&gt;&lt;code&gt;ContextMixin&lt;/code&gt;&lt;/a&gt;) with the keyword arguments captured from the URL pattern that served the view.</source>
          <target state="translated">뷰를 제공 한 URL 패턴에서 캡처 된 키워드 인수로 &lt;a href=&quot;mixins-simple#django.views.generic.base.ContextMixin&quot;&gt; &lt;code&gt;ContextMixin&lt;/code&gt; 을&lt;/a&gt; 통해 채 웁니다 .</target>
        </trans-unit>
        <trans-unit id="d728346840abef332d96fd01dccf493e5038300e" translate="yes" xml:space="preserve">
          <source>Port 7000 on IP address &lt;code&gt;1.2.3.4&lt;/code&gt;:</source>
          <target state="translated">IP 주소 &lt;code&gt;1.2.3.4&lt;/code&gt; 의 포트 7000 :</target>
        </trans-unit>
        <trans-unit id="607d0c9b35e92f6cc376ca90f2895ba371a84f2b" translate="yes" xml:space="preserve">
          <source>Port 7000 on IP address &lt;code&gt;127.0.0.1&lt;/code&gt;:</source>
          <target state="translated">IP 주소 &lt;code&gt;127.0.0.1&lt;/code&gt; 의 포트 7000 :</target>
        </trans-unit>
        <trans-unit id="b46d886ce6b0db58100d9b5030cbdd743f26cf41" translate="yes" xml:space="preserve">
          <source>Port 7000 on IPv6 address &lt;code&gt;2001:0db8:1234:5678::9&lt;/code&gt;:</source>
          <target state="translated">IPv6 주소 &lt;code&gt;2001:0db8:1234:5678::9&lt;/code&gt; 포트 7000 :</target>
        </trans-unit>
        <trans-unit id="6e9c9cca16d90fd52eacd273a38fa72a12f667fc" translate="yes" xml:space="preserve">
          <source>Port 7000 on IPv6 address &lt;code&gt;::1&lt;/code&gt;:</source>
          <target state="translated">IPv6 주소 &lt;code&gt;::1&lt;/code&gt; 의 포트 7000 :</target>
        </trans-unit>
        <trans-unit id="742e76e604364aedcc1fa967a72420adbbbae2a0" translate="yes" xml:space="preserve">
          <source>Port 8000 on IP address &lt;code&gt;1.2.3.4&lt;/code&gt;:</source>
          <target state="translated">IP 주소 &lt;code&gt;1.2.3.4&lt;/code&gt; 의 포트 8000 :</target>
        </trans-unit>
        <trans-unit id="bc2f03cb30b616fe88f752d7e01d955bfe250071" translate="yes" xml:space="preserve">
          <source>Port 8000 on IP address &lt;code&gt;127.0.0.1&lt;/code&gt;:</source>
          <target state="translated">IP 주소 &lt;code&gt;127.0.0.1&lt;/code&gt; 의 포트 8000 :</target>
        </trans-unit>
        <trans-unit id="4de2c8eb6aa5980c388083ab1f0fafcbfac5918f" translate="yes" xml:space="preserve">
          <source>Port 8000 on IPv4 address of host &lt;code&gt;localhost&lt;/code&gt;:</source>
          <target state="translated">호스트 &lt;code&gt;localhost&lt;/code&gt; 의 IPv4 주소에있는 포트 8000 :</target>
        </trans-unit>
        <trans-unit id="573ccc065de8b4c79dd9da36bc7dcb461a3d1be2" translate="yes" xml:space="preserve">
          <source>Port 8000 on IPv6 address &lt;code&gt;::1&lt;/code&gt;:</source>
          <target state="translated">IPv6 주소 &lt;code&gt;::1&lt;/code&gt; 의 포트 8000 :</target>
        </trans-unit>
        <trans-unit id="4da741a13093553d24e793918995988b42ce5ef5" translate="yes" xml:space="preserve">
          <source>Port 8000 on IPv6 address of host &lt;code&gt;localhost&lt;/code&gt;:</source>
          <target state="translated">호스트 &lt;code&gt;localhost&lt;/code&gt; 의 IPv6 주소에서 포트 8000 :</target>
        </trans-unit>
        <trans-unit id="11572a96cabaee01b8320ac115b9990aee7241f0" translate="yes" xml:space="preserve">
          <source>Port to use for the SMTP server defined in &lt;a href=&quot;#std:setting-EMAIL_HOST&quot;&gt;&lt;code&gt;EMAIL_HOST&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#std:setting-EMAIL_HOST&quot;&gt; &lt;code&gt;EMAIL_HOST&lt;/code&gt; 에&lt;/a&gt; 정의 된 SMTP 서버에 사용할 포트 입니다.</target>
        </trans-unit>
        <trans-unit id="0990635d6e89d26c7cf1ecf413e1a3ce967ed2db" translate="yes" xml:space="preserve">
          <source>Portions of the earth&amp;rsquo;s surface may projected onto a two-dimensional, or Cartesian, plane. Projected coordinate systems are especially convenient for region-specific applications, e.g., if you know that your database will only cover geometries in &lt;a href=&quot;https://www.spatialreference.org/ref/epsg/2796/&quot;&gt;North Kansas&lt;/a&gt;, then you may consider using projection system specific to that region. Moreover, projected coordinate systems are defined in Cartesian units (such as meters or feet), easing distance calculations.</source>
          <target state="translated">지표면의 일부가 2 차원 또는 직교 평면에 투영 될 수 있습니다. 투영 좌표계는 특히 지역별 응용 프로그램에 편리합니다. 예를 들어, 데이터베이스가 &lt;a href=&quot;https://www.spatialreference.org/ref/epsg/2796/&quot;&gt;North Kansas의&lt;/a&gt; 지오메트리 만 다룰 수 있다는 것을 알고 있다면 해당 지역에 맞는 투영 시스템을 사용하는 것이 좋습니다. 또한 투영 좌표계는 직교 단위 (예 : 미터 또는 피트)로 정의되어 거리 계산이 쉬워집니다.</target>
        </trans-unit>
        <trans-unit id="18762e8d6ba5f2c5db546d95048bef0d942060a9" translate="yes" xml:space="preserve">
          <source>Positional arguments can be expressions or Python values. Strings are assumed to be column references and will be wrapped in &lt;code&gt;F()&lt;/code&gt; expressions while other values will be wrapped in &lt;code&gt;Value()&lt;/code&gt; expressions.</source>
          <target state="translated">위치 인수는 표현식 또는 Python 값일 수 있습니다. 문자열은 열 참조 인 것으로 가정하고 &lt;code&gt;F()&lt;/code&gt; 표현식으로 랩핑되고 다른 값은 &lt;code&gt;Value()&lt;/code&gt; 표현식 으로 랩핑됩니다 .</target>
        </trans-unit>
        <trans-unit id="57aa2fd441e9ebdf27ee5187b667b9235ac71fa2" translate="yes" xml:space="preserve">
          <source>Positional interpolation: &lt;code&gt;obj&lt;/code&gt; contains a JavaScript Array object whose elements values are then sequentially interpolated in their corresponding &lt;code&gt;fmt&lt;/code&gt; placeholders in the same order they appear. For example:</source>
          <target state="translated">위치 보간 : &lt;code&gt;obj&lt;/code&gt; 에는 요소 값이 나타나는 순서대로 해당 &lt;code&gt;fmt&lt;/code&gt; 자리 표시 자에서 순차적으로 보간되는 JavaScript Array 객체가 포함 됩니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="681e79c0db6a401f4ddd7a4987052826179fc670" translate="yes" xml:space="preserve">
          <source>Possible values for &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.changefreq&quot;&gt;&lt;code&gt;changefreq&lt;/code&gt;&lt;/a&gt;, whether you use a method or attribute, are:</source>
          <target state="translated">메소드 또는 속성 사용 여부에 관계없이 &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.changefreq&quot;&gt; &lt;code&gt;changefreq&lt;/code&gt; 의&lt;/a&gt; 가능한 값 은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b490ea1c022fa91521273862fbe582512a00d2ba" translate="yes" xml:space="preserve">
          <source>Possible values for the setting are:</source>
          <target state="translated">설정 가능한 값은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="7001a7b3fe9633e217615d8ec116930191433437" translate="yes" xml:space="preserve">
          <source>Post the package on a public repository, such as &lt;a href=&quot;https://pypi.org/&quot;&gt;the Python Package Index (PyPI)&lt;/a&gt;. &lt;a href=&quot;https://packaging.python.org&quot;&gt;packaging.python.org&lt;/a&gt; has &lt;a href=&quot;https://packaging.python.org/tutorials/packaging-projects/#uploading-the-distribution-archives&quot;&gt;a good tutorial&lt;/a&gt; for doing this.</source>
          <target state="translated">&lt;a href=&quot;https://pypi.org/&quot;&gt;Python 패키지 색인 (PyPI)&lt;/a&gt; 과 같은 공용 저장소에 패키지를 게시하십시오 . &lt;a href=&quot;https://packaging.python.org&quot;&gt;packaging.python.org&lt;/a&gt; 에는이를 &lt;a href=&quot;https://packaging.python.org/tutorials/packaging-projects/#uploading-the-distribution-archives&quot;&gt;위한 좋은 튜토리얼&lt;/a&gt; 이 있습니다.</target>
        </trans-unit>
        <trans-unit id="678cbf7009afee05403a9a11e9851a53710762e8" translate="yes" xml:space="preserve">
          <source>Post-installation</source>
          <target state="translated">Post-installation</target>
        </trans-unit>
        <trans-unit id="f075ac1284323276cbb4295a60cdc325f91d79a0" translate="yes" xml:space="preserve">
          <source>Post-render callbacks</source>
          <target state="translated">렌더링 후 콜백</target>
        </trans-unit>
        <trans-unit id="f6b2ee5af0705015c0259810547be11a12a12e56" translate="yes" xml:space="preserve">
          <source>PostGIS</source>
          <target state="translated">PostGIS</target>
        </trans-unit>
        <trans-unit id="2bea93831effd0e3ad7df53d76be03e00ff5b6cd" translate="yes" xml:space="preserve">
          <source>PostGIS &amp;amp; SpatiaLite</source>
          <target state="translated">PostGIS &amp;amp; SpatiaLite</target>
        </trans-unit>
        <trans-unit id="11a4e4e05809d4f14d8be13109be6db393559bcb" translate="yes" xml:space="preserve">
          <source>PostGIS 2 includes an extension for PostgreSQL that&amp;rsquo;s used to enable spatial functionality:</source>
          <target state="translated">PostGIS 2에는 공간 기능을 활성화하는 데 사용되는 PostgreSQL 용 확장이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="73a99390678212628538dd514696cce25b495507" translate="yes" xml:space="preserve">
          <source>PostGIS SQL equivalent:</source>
          <target state="translated">PostGIS SQL과 동등한 기능 :</target>
        </trans-unit>
        <trans-unit id="1d1da10b3da9b356a1f4a1d6e8a8cdfb730bd398" translate="yes" xml:space="preserve">
          <source>PostGIS equivalent:</source>
          <target state="translated">PostGIS 상당 :</target>
        </trans-unit>
        <trans-unit id="196b10bf3f4d00049cab5694548312b77ddc43e2" translate="yes" xml:space="preserve">
          <source>PostGIS is recommended, because it is the most mature and feature-rich open source spatial database.</source>
          <target state="translated">PostGIS는 가장 성숙하고 기능이 풍부한 오픈 소스 공간 데이터베이스이므로 권장됩니다.</target>
        </trans-unit>
        <trans-unit id="24fd6c2d1150de6a47543209150ff4c2a2d3104f" translate="yes" xml:space="preserve">
          <source>PostgreSQL</source>
          <target state="translated">PostgreSQL</target>
        </trans-unit>
        <trans-unit id="bbd25fc89254dfdc1a222d745bb12b7ccc57b2be" translate="yes" xml:space="preserve">
          <source>PostgreSQL (with PostGIS), MySQL (mostly with MyISAM engine), Oracle, and SQLite (with SpatiaLite) are the spatial databases currently supported.</source>
          <target state="translated">PostgreSQL (PostGIS 포함), MySQL (주로 MyISAM 엔진 사용), Oracle 및 SQLite (SpatiaLite 사용)는 현재 지원되는 공간 데이터베이스입니다.</target>
        </trans-unit>
        <trans-unit id="2f5ea5c978e41d98e9cd9501d91ecdc32ecfb799" translate="yes" xml:space="preserve">
          <source>PostgreSQL allows the definition of custom range types. Django&amp;rsquo;s model and form field implementations use base classes below, and psycopg2 provides a &lt;a href=&quot;https://www.psycopg.org/docs/extras.html#psycopg2.extras.register_range&quot;&gt;&lt;code&gt;register_range()&lt;/code&gt;&lt;/a&gt; to allow use of custom range types.</source>
          <target state="translated">PostgreSQL에서는 사용자 정의 범위 유형을 정의 할 수 있습니다. Django의 모델 및 양식 필드 구현은 아래 기본 클래스를 사용하며 psycopg2는 사용자 정의 범위 유형을 사용할 수 있도록 &lt;a href=&quot;https://www.psycopg.org/docs/extras.html#psycopg2.extras.register_range&quot;&gt; &lt;code&gt;register_range()&lt;/code&gt; &lt;/a&gt; 를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="fe4d770eb0d9650370218a8fa878b7a5b483ebc7" translate="yes" xml:space="preserve">
          <source>PostgreSQL and Oracle support tablespaces. SQLite, MariaDB and MySQL don&amp;rsquo;t.</source>
          <target state="translated">PostgreSQL 및 Oracle은 테이블 스페이스를 지원합니다. SQLite, MariaDB 및 MySQL은 그렇지 않습니다.</target>
        </trans-unit>
        <trans-unit id="05f4ec56f55ff923cb4b3d56ae07f61bd20228d1" translate="yes" xml:space="preserve">
          <source>PostgreSQL connection settings</source>
          <target state="translated">PostgreSQL 연결 설정</target>
        </trans-unit>
        <trans-unit id="f412ef2862c42e4812ecbb9665bab0d6019d9370" translate="yes" xml:space="preserve">
          <source>PostgreSQL considerations</source>
          <target state="translated">PostgreSQL 고려 사항</target>
        </trans-unit>
        <trans-unit id="c655c4fb326b838552c931062ac52582724f272b" translate="yes" xml:space="preserve">
          <source>PostgreSQL doesn&amp;rsquo;t support &lt;code&gt;select_for_update()&lt;/code&gt; with &lt;a href=&quot;expressions#django.db.models.expressions.Window&quot;&gt;&lt;code&gt;Window&lt;/code&gt;&lt;/a&gt; expressions.</source>
          <target state="translated">PostgreSQL은 &lt;a href=&quot;expressions#django.db.models.expressions.Window&quot;&gt; &lt;code&gt;Window&lt;/code&gt; &lt;/a&gt; 표현식으로 &lt;code&gt;select_for_update()&lt;/code&gt; 를 지원하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="c867fef8faa5874e85b172667e33557340e635c7" translate="yes" xml:space="preserve">
          <source>PostgreSQL has a number of features which are not shared by the other databases Django supports. This optional module contains model fields and form fields for a number of PostgreSQL specific data types.</source>
          <target state="translated">PostgreSQL에는 Django가 지원하는 다른 데이터베이스와 공유하지 않는 많은 기능이 있습니다. 이 선택적 모듈에는 다양한 PostgreSQL 특정 데이터 유형에 대한 모델 필드와 양식 필드가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="bb7e67fcf426788e20ae1eb3f7197518890ae1e2" translate="yes" xml:space="preserve">
          <source>PostgreSQL has its own full text search implementation built-in. While not as powerful as some other search engines, it has the advantage of being inside your database and so can easily be combined with other relational queries such as categorization.</source>
          <target state="translated">PostgreSQL에는 자체 텍스트 검색 구현이 내장되어 있습니다. 다른 검색 엔진만큼 강력하지는 않지만 데이터베이스 내부에 있다는 이점이 있으므로 분류와 같은 다른 관계형 쿼리와 쉽게 결합 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3ef98aade0e8da7a08e5531509a27a327b441abe" translate="yes" xml:space="preserve">
          <source>PostgreSQL has limited support for &lt;code&gt;ValueRange&lt;/code&gt; and only supports use of the standard start and end points, such as &lt;code&gt;CURRENT ROW&lt;/code&gt; and &lt;code&gt;UNBOUNDED
FOLLOWING&lt;/code&gt;.</source>
          <target state="translated">PostgreSQL은 &lt;code&gt;ValueRange&lt;/code&gt; 에 대한 지원이 제한되어 있으며 &lt;code&gt;CURRENT ROW&lt;/code&gt; 및 &lt;code&gt;UNBOUNDED FOLLOWING&lt;/code&gt; FOLLOWING 과 같은 표준 시작점과 끝점의 사용 만 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="3643545450f0b1060eaf31855775f5e742665810" translate="yes" xml:space="preserve">
          <source>PostgreSQL has some rather esoteric behavior when using indexes and slices on multidimensional arrays. It will always work to use indexes to reach down to the final underlying data, but most other slices behave strangely at the database level and cannot be supported in a logical, consistent fashion by Django.</source>
          <target state="translated">PostgreSQL에는 다차원 배열에서 인덱스와 슬라이스를 사용할 때 다소 난해한 동작이 있습니다. 인덱스를 사용하여 최종 기본 데이터에 도달하는 것이 항상 작동하지만 대부분의 다른 슬라이스는 데이터베이스 수준에서 이상하게 동작하며 Django가 논리적이고 일관된 방식으로 지원할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="168c98d4a0d8ebe6230bc3c052e4fdd2ba25b19e" translate="yes" xml:space="preserve">
          <source>PostgreSQL has two native JSON based data types: &lt;code&gt;json&lt;/code&gt; and &lt;code&gt;jsonb&lt;/code&gt;. The main difference between them is how they are stored and how they can be queried. PostgreSQL&amp;rsquo;s &lt;code&gt;json&lt;/code&gt; field is stored as the original string representation of the JSON and must be decoded on the fly when queried based on keys. The &lt;code&gt;jsonb&lt;/code&gt; field is stored based on the actual structure of the JSON which allows indexing. The trade-off is a small additional cost on writing to the &lt;code&gt;jsonb&lt;/code&gt; field. &lt;code&gt;JSONField&lt;/code&gt; uses &lt;code&gt;jsonb&lt;/code&gt;.</source>
          <target state="translated">PostgreSQL에는 &lt;code&gt;json&lt;/code&gt; 과 &lt;code&gt;jsonb&lt;/code&gt; 의 두 가지 기본 JSON 기반 데이터 유형이 있습니다 . 그들 사이의 주요 차이점은 저장 방법과 쿼리 방법입니다. PostgreSQL의 &lt;code&gt;json&lt;/code&gt; 필드는 JSON 의 원래 문자열 표현으로 저장되며 키를 기반으로 쿼리 할 때 즉시 디코딩해야합니다. &lt;code&gt;jsonb&lt;/code&gt; 의 필드가 인덱싱을 허용 JSON의 실제 구조에 기초하여 저장된다. 트레이드 오프는 &lt;code&gt;jsonb&lt;/code&gt; 필드 에 쓰는 데 약간의 추가 비용이 듭니다 . &lt;code&gt;JSONField&lt;/code&gt; 는 jsonb를 사용 &lt;code&gt;jsonb&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0657db99aab825991981ffd509a6318950c7ef93" translate="yes" xml:space="preserve">
          <source>PostgreSQL is the most capable of all the databases here in terms of schema support.</source>
          <target state="translated">PostgreSQL은 스키마 지원 측면에서 모든 데이터베이스 중 가장 유능한 데이터베이스입니다.</target>
        </trans-unit>
        <trans-unit id="55dd5c922f681934365cca704f104392d442ece2" translate="yes" xml:space="preserve">
          <source>PostgreSQL notes</source>
          <target state="translated">PostgreSQL 노트</target>
        </trans-unit>
        <trans-unit id="cdd6eae37307f69a33d4850f1814d7cc40ca27df" translate="yes" xml:space="preserve">
          <source>PostgreSQL provides a set of SQL operators that can be used together with the range data types (see &lt;a href=&quot;https://www.postgresql.org/docs/current/functions-range.html#RANGE-OPERATORS-TABLE&quot;&gt;the PostgreSQL documentation for the full details of range operators&lt;/a&gt;). This class is meant as a convenient method to avoid typos. The operator names overlap with the names of corresponding lookups.</source>
          <target state="translated">PostgreSQL은 범위 데이터 유형과 함께 사용할 수있는 일련의 SQL 연산자를 제공합니다 ( &lt;a href=&quot;https://www.postgresql.org/docs/current/functions-range.html#RANGE-OPERATORS-TABLE&quot;&gt;범위 연산자에 대한 자세한 내용은 PostgreSQL 설명서&lt;/a&gt; 참조 ). 이 클래스는 오타를 피하는 편리한 방법으로 사용됩니다. 연산자 이름은 해당 조회 이름과 겹칩니다.</target>
        </trans-unit>
        <trans-unit id="1b9fdd15f79f970458f34ca1a3022486efe7c590" translate="yes" xml:space="preserve">
          <source>PostgreSQL requires functions referenced in the condition to be marked as IMMUTABLE. Django doesn&amp;rsquo;t validate this but PostgreSQL will error. This means that functions such as &lt;a href=&quot;database-functions#date-functions&quot;&gt;Date functions&lt;/a&gt; and &lt;a href=&quot;database-functions#django.db.models.functions.Concat&quot;&gt;&lt;code&gt;Concat&lt;/code&gt;&lt;/a&gt; aren&amp;rsquo;t accepted. If you store dates in &lt;a href=&quot;fields#django.db.models.DateTimeField&quot;&gt;&lt;code&gt;DateTimeField&lt;/code&gt;&lt;/a&gt;, comparison to &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; objects may require the &lt;code&gt;tzinfo&lt;/code&gt; argument to be provided because otherwise the comparison could result in a mutable function due to the casting Django does for &lt;a href=&quot;querysets#field-lookups&quot;&gt;lookups&lt;/a&gt;.</source>
          <target state="translated">PostgreSQL에서는 조건에서 참조되는 함수가 IMMUTABLE로 표시되어야합니다. Django는 이것을 확인하지 않지만 PostgreSQL은 오류가 발생합니다. 즉, &lt;a href=&quot;database-functions#date-functions&quot;&gt;날짜 함수&lt;/a&gt; 및 &lt;a href=&quot;database-functions#django.db.models.functions.Concat&quot;&gt; &lt;code&gt;Concat&lt;/code&gt; &lt;/a&gt; 과 같은 함수 는 허용되지 않습니다. &lt;a href=&quot;fields#django.db.models.DateTimeField&quot;&gt; &lt;code&gt;DateTimeField&lt;/code&gt; 에&lt;/a&gt; 날짜를 저장하는 경우 , &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt; 객체 와 비교 하려면 &lt;code&gt;tzinfo&lt;/code&gt; 인수가 제공되어야합니다. 그렇지 않으면 Django가 &lt;a href=&quot;querysets#field-lookups&quot;&gt;검색&lt;/a&gt; 을 위해 캐스팅으로 인해 비교로 인해 변경 가능한 함수가 생성 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a085e76da94d3489a9588f510cd24ea971e32f8b" translate="yes" xml:space="preserve">
          <source>PostgreSQL specific aggregation functions</source>
          <target state="translated">PostgreSQL 관련 집계 함수</target>
        </trans-unit>
        <trans-unit id="17d23c73509ab198a20410e4a6424d0513c56222" translate="yes" xml:space="preserve">
          <source>PostgreSQL specific database constraints</source>
          <target state="translated">PostgreSQL 관련 데이터베이스 제약</target>
        </trans-unit>
        <trans-unit id="821a2053b711fd6c472f917be0d74de35f6e9b4e" translate="yes" xml:space="preserve">
          <source>PostgreSQL specific database functions</source>
          <target state="translated">PostgreSQL 관련 데이터베이스 기능</target>
        </trans-unit>
        <trans-unit id="5309ed46b34a6d7276f1b802d8aa991ba94fedef" translate="yes" xml:space="preserve">
          <source>PostgreSQL specific form fields and widgets</source>
          <target state="translated">PostgreSQL 특정 양식 필드 및 위젯</target>
        </trans-unit>
        <trans-unit id="e93190dcec5536d34ee763e854fad91df855c274" translate="yes" xml:space="preserve">
          <source>PostgreSQL specific lookups</source>
          <target state="translated">PostgreSQL 특정 조회</target>
        </trans-unit>
        <trans-unit id="70834072f4b64529a787c3ea195778e0df214157" translate="yes" xml:space="preserve">
          <source>PostgreSQL specific model fields</source>
          <target state="translated">PostgreSQL 특정 모델 필드</target>
        </trans-unit>
        <trans-unit id="12c585a6756725c70222f1410fdd60f0c5a75626" translate="yes" xml:space="preserve">
          <source>PostgreSQL specific model indexes</source>
          <target state="translated">PostgreSQL 특정 모델 인덱스</target>
        </trans-unit>
        <trans-unit id="f0c4bc5c32a46fb3a181291fa84618678666babd" translate="yes" xml:space="preserve">
          <source>PostgreSQL support</source>
          <target state="translated">PostgreSQL 지원</target>
        </trans-unit>
        <trans-unit id="0eef3b53c86498212ac385626e52ac7c316ecaf6" translate="yes" xml:space="preserve">
          <source>PostgreSQL supports additional data integrity constraints available from the &lt;code&gt;django.contrib.postgres.constraints&lt;/code&gt; module. They are added in the model &lt;a href=&quot;../../models/options#django.db.models.Options.constraints&quot;&gt;&lt;code&gt;Meta.constraints&lt;/code&gt;&lt;/a&gt; option.</source>
          <target state="translated">PostgreSQL은 &lt;code&gt;django.contrib.postgres.constraints&lt;/code&gt; 모듈 에서 사용 가능한 추가 데이터 무결성 제약 조건을 지원 합니다. 모델 &lt;a href=&quot;../../models/options#django.db.models.Options.constraints&quot;&gt; &lt;code&gt;Meta.constraints&lt;/code&gt; &lt;/a&gt; 옵션에 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="25d283cdcf63fd5991436c1209f908667770d60e" translate="yes" xml:space="preserve">
          <source>PostgreSQL supports the &lt;code&gt;CONCURRENTLY&lt;/code&gt; option to &lt;code&gt;CREATE INDEX&lt;/code&gt; and &lt;code&gt;DROP INDEX&lt;/code&gt; statements to add and remove indexes without locking out writes. This option is useful for adding or removing an index in a live production database.</source>
          <target state="translated">PostgreSQL은 쓰기를 잠그지 않고 인덱스를 추가 및 제거하기 위해 &lt;code&gt;CREATE INDEX&lt;/code&gt; 및 &lt;code&gt;DROP INDEX&lt;/code&gt; 문을 작성 하는 &lt;code&gt;CONCURRENTLY&lt;/code&gt; 옵션을 지원합니다 . 이 옵션은 라이브 프로덕션 데이터베이스에서 인덱스를 추가하거나 제거 할 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="6a96fa582734cacd75112dd8c6e708395b968e6d" translate="yes" xml:space="preserve">
          <source>PostgreSQL users, refer to the &lt;a href=&quot;https://www.postgresql.org/docs/current/multibyte.html&quot;&gt;PostgreSQL manual&lt;/a&gt; (section 22.3.2 in PostgreSQL 9) for details on creating databases with the correct encoding.</source>
          <target state="translated">PostgreSQL 사용자 는 올바른 인코딩으로 데이터베이스를 생성하는 방법에 대한 자세한 내용 은 &lt;a href=&quot;https://www.postgresql.org/docs/current/multibyte.html&quot;&gt;PostgreSQL 설명서&lt;/a&gt; (PostgreSQL 9의 섹션 22.3.2)를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="99c3be427ccc82c1f56376a400dc28af2dd57965" translate="yes" xml:space="preserve">
          <source>PostgreSQL uses 1-based indexing for array fields when writing raw SQL. However these indexes and those used in &lt;a href=&quot;#std:fieldlookup-arrayfield.slice&quot;&gt;&lt;code&gt;slices&lt;/code&gt;&lt;/a&gt; use 0-based indexing to be consistent with Python.</source>
          <target state="translated">PostgreSQL은 원시 SQL을 작성할 때 배열 필드에 1 기반 색인을 사용합니다. 그러나 이러한 인덱스와 &lt;a href=&quot;#std:fieldlookup-arrayfield.slice&quot;&gt; &lt;code&gt;slices&lt;/code&gt; &lt;/a&gt; 사용 된 인덱스 는 0 기반 인덱스를 사용하여 Python과 일치합니다.</target>
        </trans-unit>
        <trans-unit id="a4329b4028fdbd21bc77a3aac453280324b61e4c" translate="yes" xml:space="preserve">
          <source>PostgreSQL uses 1-based indexing for array fields when writing raw SQL. However these slices and those used in &lt;a href=&quot;#std:fieldlookup-arrayfield.index&quot;&gt;&lt;code&gt;indexes&lt;/code&gt;&lt;/a&gt; use 0-based indexing to be consistent with Python.</source>
          <target state="translated">PostgreSQL은 원시 SQL을 작성할 때 배열 필드에 1 기반 색인을 사용합니다. 그러나 이러한 슬라이스와 &lt;a href=&quot;#std:fieldlookup-arrayfield.index&quot;&gt; &lt;code&gt;indexes&lt;/code&gt; &lt;/a&gt; 사용 된 슬라이스 는 0 기반 인덱스를 사용하여 Python과 일치합니다.</target>
        </trans-unit>
        <trans-unit id="ed068c3d2667549ee11391e449bacfc1b001022c" translate="yes" xml:space="preserve">
          <source>PostgreSQL: &lt;code&gt;Greatest&lt;/code&gt; will return the largest non-null expression, or &lt;code&gt;null&lt;/code&gt; if all expressions are &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">PostgreSQL은 : &lt;code&gt;Greatest&lt;/code&gt; 최대 규모의 null 이외의 식을 반환하거나됩니다 &lt;code&gt;null&lt;/code&gt; 의 모든 표현 인 경우 &lt;code&gt;null&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9f655593cd1eb913446d7c92b93bcc2a048ac139" translate="yes" xml:space="preserve">
          <source>PostgreSQL: &lt;code&gt;Least&lt;/code&gt; will return the smallest non-null expression, or &lt;code&gt;null&lt;/code&gt; if all expressions are &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">PostgreSQL : &lt;code&gt;Least&lt;/code&gt; 는 null이 아닌 가장 작은 표현식을 반환하거나 모든 표현식이 &lt;code&gt;null&lt;/code&gt; 인 경우 &lt;code&gt;null&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="3e9bddaf93ff070867c9370e73d30d3f1a143b9a" translate="yes" xml:space="preserve">
          <source>PostgreSQL: no requirements (see &lt;a href=&quot;https://www.postgresql.org/docs/current/datatype-datetime.html#DATATYPE-TIMEZONES&quot;&gt;Time Zones&lt;/a&gt;).</source>
          <target state="translated">PostgreSQL : 요구 사항 없음 ( &lt;a href=&quot;https://www.postgresql.org/docs/current/datatype-datetime.html#DATATYPE-TIMEZONES&quot;&gt;시간대&lt;/a&gt; 참조 ).</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
