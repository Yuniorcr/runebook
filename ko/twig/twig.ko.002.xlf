<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="twig">
    <body>
      <group id="twig">
        <trans-unit id="67e42e707e0e0568b95fd864d8efc7fa0982d436" translate="yes" xml:space="preserve">
          <source>When the attribute contains special characters (like &lt;code&gt;-&lt;/code&gt; that would be interpreted as the minus operator), use the &lt;code&gt;attribute&lt;/code&gt; function instead to access the variable attribute:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0813e5c10c5f1c009971ad784eda73a785b69db1" translate="yes" xml:space="preserve">
          <source>When using OPcache with &lt;code&gt;opcache.validate_timestamps&lt;/code&gt; set to &lt;code&gt;0&lt;/code&gt; or APC with &lt;code&gt;apc.stat&lt;/code&gt; set to &lt;code&gt;0&lt;/code&gt; and Twig cache enabled, clearing the template cache won't update the cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="752ab74beaab9317cd15548434043fa98c9d2e1d" translate="yes" xml:space="preserve">
          <source>When using a variable as the escaping strategy, you should disable automatic escaping:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2708246fbc077f8eb2388f50aa89636c00df5471" translate="yes" xml:space="preserve">
          <source>When using automatic escaping, Twig tries to not double-escape a variable when the automatic escaping strategy is the same as the one applied by the escape filter; but that does not work when using a variable as the escaping strategy:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ac34962d9f0ad38b6ebdc99a6b1e9c63868a759" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;Array&lt;/code&gt; loader with a cache mechanism, you should know that a new cache key is generated each time a template content &quot;changes&quot; (the cache key being the source code of the template). If you don't want to see your cache grows out of control, you need to take care of clearing the old cache file by yourself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cda849c54f0b38bf7080d01a2fdfab411f3e7a09" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;default&lt;/code&gt; filter on an expression that uses variables in some method calls, be sure to use the &lt;code&gt;default&lt;/code&gt; filter whenever a variable can be undefined:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19fa26972d88f178e441a8de21417fc9ac8adc94" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;defined&lt;/code&gt; test on an expression that uses variables in some method calls, be sure that they are all defined first:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fa5d75856aefd54283671f167f3e9b8d722a578" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;setPaths()&lt;/code&gt;, &lt;code&gt;addPath()&lt;/code&gt;, and &lt;code&gt;prependPath()&lt;/code&gt; methods, specify the namespace as the second argument (when not specified, these methods act on the &quot;main&quot; namespace):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db5351bfd037ab168b88a735d12ed5587d5b219c" translate="yes" xml:space="preserve">
          <source>When using the whitespace control character, do not put any spaces between it and the delimiter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c60b7ed3fc6247cac50401e3fd4744947d88ad6b" translate="yes" xml:space="preserve">
          <source>When writing Twig templates, we recommend you to follow these official coding standards:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="973964216de0a31861f2d1c1d3895c5ff82b3519" translate="yes" xml:space="preserve">
          <source>When you set the &lt;code&gt;ignore_missing&lt;/code&gt; flag, Twig will return an empty string if the template does not exist:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e88cdb1d85d8ae245d732495a6b5c645b610b3dc" translate="yes" xml:space="preserve">
          <source>When you want to use a macro in another macro from the same file, you need to import it locally:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2028cfcc78f7fd44821aacab16481a32f1dfc70" translate="yes" xml:space="preserve">
          <source>When?</source>
          <target state="translated">When?</target>
        </trans-unit>
        <trans-unit id="8dd37894d1b63b621628f1a41fd39383129c1435" translate="yes" xml:space="preserve">
          <source>Whether automatic escaping is enabled or not, you can mark a section of a template to be escaped or not by using the &lt;a href=&quot;tags/autoescape&quot;&gt;autoescape&lt;/a&gt; tag:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07f5308cc3a8a56183bb8085f502d4928e9d6aa7" translate="yes" xml:space="preserve">
          <source>Whether automatic escaping is enabled or not, you can mark a section of a template to be escaped or not by using the &lt;code&gt;autoescape&lt;/code&gt; tag:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dd3fc91fe8f6c82594a680c7bccd3efc08235e6" translate="yes" xml:space="preserve">
          <source>While other pages (&quot;boom&quot; and &quot;baz&quot;) share a different content structure - two boxes side by side:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e3fb6b9dddf2cf75633e30c42b159d65aafe736" translate="yes" xml:space="preserve">
          <source>Whitespace Control</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecf33dfffe1d472b018bba2411263f34cfaf0df9" translate="yes" xml:space="preserve">
          <source>Will be rendered &quot;&amp;lt;strong&amp;gt;Hello&amp;lt;/strong&amp;gt; &lt;strong&gt;world&lt;/strong&gt;&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0aa810573f73fcb5f1bd47880002f3d77512ca9" translate="yes" xml:space="preserve">
          <source>With such a configuration, Twig will first look for templates in &lt;code&gt;$templateDir1&lt;/code&gt; and if they do not exist, it will fallback to look for them in the &lt;code&gt;$templateDir2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31a261091bc12477bdf201132db7e19681961115" translate="yes" xml:space="preserve">
          <source>With the previous configuration, the security policy will only allow usage of the &lt;code&gt;if&lt;/code&gt; tag, and the &lt;code&gt;upper&lt;/code&gt; filter. Moreover, the templates will only be able to call the &lt;code&gt;getTitle()&lt;/code&gt; and &lt;code&gt;getBody()&lt;/code&gt; methods on &lt;code&gt;Article&lt;/code&gt; objects, and the &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;body&lt;/code&gt; public properties. Everything else won't be allowed and will generate a &lt;code&gt;Twig_Sandbox_SecurityError&lt;/code&gt; exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e3006cae4f5c258364302cbb40c3749f1e0b048" translate="yes" xml:space="preserve">
          <source>Without the &lt;code&gt;embed&lt;/code&gt; tag, you have two ways to design your templates:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc84de10a09d95ec9c9220b502b9d9fb9bbf0755" translate="yes" xml:space="preserve">
          <source>Working with Ajax means that the same content is sometimes displayed as is, and sometimes decorated with a layout. As Twig layout template names can be any valid expression, you can pass a variable that evaluates to &lt;code&gt;true&lt;/code&gt; when the request is made via Ajax and choose the layout accordingly:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da90ccd243d299c65a2697d5ea61cdc25d4bcb15" translate="yes" xml:space="preserve">
          <source>Working with Automatic Escaping</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="426206ad1379d0ba97fdb478fba1088b1e8604e3" translate="yes" xml:space="preserve">
          <source>Working with Manual Escaping</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea2e3ecce537f9ffac3ab9d0847565705767efd0" translate="yes" xml:space="preserve">
          <source>You can add additional variables by passing them after the &lt;code&gt;with&lt;/code&gt; keyword:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29021213a03eb7bb62b7f93809ab6447fa4d6382" translate="yes" xml:space="preserve">
          <source>You can add or prepend paths via the &lt;code&gt;addPath()&lt;/code&gt; and &lt;code&gt;prependPath()&lt;/code&gt; methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d9d64a7c06c89a8728c28dd460685680a194b49" translate="yes" xml:space="preserve">
          <source>You can also access both keys and values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="744055768ba741d0f8a97bc63a4a46519ce07159" translate="yes" xml:space="preserve">
          <source>You can also add loaders via the &lt;code&gt;addLoader()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2c85ef3103f54de82aefc407306b88b27d64421" translate="yes" xml:space="preserve">
          <source>You can also chain filters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ed5b7fff1c4ad3d3c0eb865290606e141f9530c" translate="yes" xml:space="preserve">
          <source>You can also change the escaping mode locally by using the &lt;code&gt;autoescape&lt;/code&gt; tag:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4232664a77febfd864fec44f04a15aa06b2a807" translate="yes" xml:space="preserve">
          <source>You can also check if a string &lt;code&gt;starts with&lt;/code&gt; or &lt;code&gt;ends with&lt;/code&gt; another string:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d655e1c5d2f4233dfb72114871900c8aabc9ee81" translate="yes" xml:space="preserve">
          <source>You can also dump the data in a &lt;a href=&quot;https://blackfire.io/&quot;&gt;Blackfire.io&lt;/a&gt; compatible format:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91dbc986860d74942d4f200cc3e13bbed5036746" translate="yes" xml:space="preserve">
          <source>You can also load and render the template in one fell swoop:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb4878faacdeb475115989a82d7c77566af2c847" translate="yes" xml:space="preserve">
          <source>You can also pass a &lt;code&gt;limit&lt;/code&gt; argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee755ffe35e5f2617bcf948aefa36fab832cabd0" translate="yes" xml:space="preserve">
          <source>You can also provide a list of templates that are checked for existence before inclusion. The first template that exists will be included:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2c4cdc8f33df1ab318ca9558b9b27fd01226dc7" translate="yes" xml:space="preserve">
          <source>You can also provide a list of templates that are checked for existence before inclusion. The first template that exists will be rendered:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5594aabe2a908b695a983e99b8999ad83d83d844" translate="yes" xml:space="preserve">
          <source>You can also provide a list of templates that are checked for existence. The first template that exists will be used as a parent:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6898ebf6346a2760e9226b31f9760ceddba6c4ea" translate="yes" xml:space="preserve">
          <source>You can also provide tags which should not be stripped:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9bc30c9614c2a625e757dc33f34a40ae71ec0bc" translate="yes" xml:space="preserve">
          <source>You can also test if an array is not empty:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f777e8afcd333f96ea24faa3b8a9bfa41f9681c" translate="yes" xml:space="preserve">
          <source>You can also use &lt;code&gt;not&lt;/code&gt; to check for values that evaluate to &lt;code&gt;false&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bddf06289de4e2d3aa497bb7248d5a7adaed995c" translate="yes" xml:space="preserve">
          <source>You can also use both positional and named arguments in one call, in which case positional arguments must always come before named arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08289bc84bb98b8c8cc12e888425eba0c86fc9e8" translate="yes" xml:space="preserve">
          <source>You can assign values to variables inside code blocks. Assignments use the &lt;a href=&quot;tags/set&quot;&gt;set&lt;/a&gt; tag:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b730796f435431ad683b561b7ff6b43fdfc2e89f" translate="yes" xml:space="preserve">
          <source>You can combine multiple expressions with the following operators:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9454e5f5a90acd04f414e8f766e5e1f3a3c514ea" translate="yes" xml:space="preserve">
          <source>You can control the number of decimal places, decimal point, and thousands separator using the additional arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d98f954507f65201281ae89512276fc98247e81e" translate="yes" xml:space="preserve">
          <source>You can create functional tests for extensions simply by creating the following file structure in your test directory:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9ebeee9759534393bcd5a00faecd0e47d610141" translate="yes" xml:space="preserve">
          <source>You can debug several variables by passing them as additional arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ae0b0755f10e915d2b236229a98f7e621e2a24f" translate="yes" xml:space="preserve">
          <source>You can define custom escapers by calling the &lt;code&gt;setEscaper()&lt;/code&gt; method on the &lt;code&gt;core&lt;/code&gt; extension instance. The first argument is the escaper name (to be used in the &lt;code&gt;escape&lt;/code&gt; call) and the second one must be a valid PHP callable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8722fec221f5acb70a892d491c5904c2be6c817a" translate="yes" xml:space="preserve">
          <source>You can disable access to the context by appending the &lt;code&gt;only&lt;/code&gt; keyword:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="653fe6c0e6ed3a6e6cdbe517e89a0b5a4125edf8" translate="yes" xml:space="preserve">
          <source>You can disable access to the context by setting &lt;code&gt;with_context&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ced3b2e2517a5803d7a298565585388b8c4f1f01" translate="yes" xml:space="preserve">
          <source>You can easily decouple the extension definitions from their runtime implementations by registering a &lt;code&gt;Twig_RuntimeLoaderInterface&lt;/code&gt; instance on the environment that knows how to instantiate such runtime classes (runtime classes must be autoload-able):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dea39f294b5df26c2da2cc1bb03aee5828c0cb7" translate="yes" xml:space="preserve">
          <source>You can manually compile a node tree to PHP code with the &lt;code&gt;compile()&lt;/code&gt; method of an environment:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f944556c85a57c16374179e605ecc68390cc44c9" translate="yes" xml:space="preserve">
          <source>You can manually convert a source code into a token stream by calling the &lt;code&gt;tokenize()&lt;/code&gt; method of an environment:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aa929721913a822ae54009478f98e310dc36ca9" translate="yes" xml:space="preserve">
          <source>You can manually convert a token stream into a node tree by calling the &lt;code&gt;parse()&lt;/code&gt; method of an environment:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6614c3d201949247dbf4580db46ae68d4c4e6e76" translate="yes" xml:space="preserve">
          <source>You can mark a filter as being deprecated by setting the &lt;code&gt;deprecated&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt;. You can also give an alternative filter that replaces the deprecated one when that makes sense:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e15776b646d78d53f2fc8c89896bc0c27e632b31" translate="yes" xml:space="preserve">
          <source>You can mark an include with &lt;code&gt;ignore missing&lt;/code&gt; in which case Twig will ignore the statement if the template to be included does not exist. It has to be placed just after the template name. Here some valid examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84c7c4336471ee9e9b18ca6b538983ed5ac43452" translate="yes" xml:space="preserve">
          <source>You can pass a timezone as the second argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a1417762b9eca3a670bc8b4f41658d2fe94c558" translate="yes" xml:space="preserve">
          <source>You can pass the whole context as an argument by using the special &lt;code&gt;_context&lt;/code&gt; variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3d8a72bba54521e2705fbbbed7c3aaecd6910fa" translate="yes" xml:space="preserve">
          <source>You can read constants from object instances as well:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e17b8ab245c674bdb58d8d2d15e7a18bb49c17be" translate="yes" xml:space="preserve">
          <source>You can register an extension by using the &lt;code&gt;addExtension()&lt;/code&gt; method on your main &lt;code&gt;Environment&lt;/code&gt; object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2454154985f03a6a1ab77a807641233526d7a03c" translate="yes" xml:space="preserve">
          <source>You can replace this template by putting a file with the same name in &lt;code&gt;.../templates/mysite&lt;/code&gt;. And if you want to extend the original template, you might be tempted to write the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5af45c7898083fafe96603ad763d000e629744e6" translate="yes" xml:space="preserve">
          <source>You can sandbox all templates by passing &lt;code&gt;true&lt;/code&gt; as the second argument of the extension constructor:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad7685bbda3bc84e65a81b841f252a680150cd52" translate="yes" xml:space="preserve">
          <source>You can set the default timezone globally by calling &lt;code&gt;setTimezone()&lt;/code&gt; on the &lt;code&gt;core&lt;/code&gt; extension instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="143d2994f269bdb8ad0cf03bd2289e63d6745b01" translate="yes" xml:space="preserve">
          <source>You can test constants from object instances as well:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="216b9bf39de3cdc56ce26093f9fb0cc002f0f1a1" translate="yes" xml:space="preserve">
          <source>You can then use the &lt;code&gt;text&lt;/code&gt; variable anywhere in a template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9796bd10ca04ccb136765358fc9eb764b710bd1" translate="yes" xml:space="preserve">
          <source>You can use a &lt;code&gt;lipsum&lt;/code&gt;&lt;em&gt;tag&lt;/em&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b20b9abec33c3f5b71e354fee02a15658749e7a6" translate="yes" xml:space="preserve">
          <source>You can use a dot (&lt;code&gt;.&lt;/code&gt;) to access attributes of a variable (methods or properties of a PHP object, or items of a PHP array), or the so-called &quot;subscript&quot; syntax (&lt;code&gt;[]&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="938d2d8f696bd3bf1a0fca7c9b5d42d664ea99c7" translate="yes" xml:space="preserve">
          <source>You can use any valid expression for both the start and the length:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f0d86dd462199b3f244bb7e0e54fb5f579246e1" translate="yes" xml:space="preserve">
          <source>You can use as many &lt;code&gt;use&lt;/code&gt; statements as you want in any given template. If two imported templates define the same block, the latest one wins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15bcb85ac8e6cb36e0e2b288cd2678e8d0214397" translate="yes" xml:space="preserve">
          <source>You can use this filter to perform a containment test on strings, arrays, or objects implementing the &lt;code&gt;Traversable&lt;/code&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c46dd32ce3f7d767d816f8b044faea4e54b5daa5" translate="yes" xml:space="preserve">
          <source>You can't define multiple &lt;code&gt;block&lt;/code&gt; tags with the same name in the same template. This limitation exists because a block tag works in &quot;both&quot; directions. That is, a block tag doesn't just provide a hole to fill - it also defines the content that fills the hole in the &lt;em&gt;parent&lt;/em&gt;. If there were two similarly-named &lt;code&gt;block&lt;/code&gt; tags in a template, that template's parent wouldn't know which one of the blocks' content to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22cac4f49871943beb67e5c6d3d91f573a484496" translate="yes" xml:space="preserve">
          <source>You might want to iterate over a subset of values. This can be achieved using the &lt;a href=&quot;../filters/slice&quot;&gt;slice&lt;/a&gt; filter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70f9a4cb05a8f4494873842e70c1cfa4fab2fa52" translate="yes" xml:space="preserve">
          <source>a random character from a string;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f5fc54474755a9e8a5b05d2e8d6a284b045c660" translate="yes" xml:space="preserve">
          <source>a random integer between 0 and the integer parameter (inclusive).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e21d83cd12e5129ad7da99a46f8fbab23f50453b" translate="yes" xml:space="preserve">
          <source>a random item from a sequence;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82451b41fd7878180b6aa2b54e369cbec4e8032c" translate="yes" xml:space="preserve">
          <source>abs</source>
          <target state="translated">abs</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="2c317cd0735d9046d7675c475fa1c6dce647953f" translate="yes" xml:space="preserve">
          <source>attribute</source>
          <target state="translated">attribute</target>
        </trans-unit>
        <trans-unit id="177a744414283b05d8b122b94f6f0e8fc54eca42" translate="yes" xml:space="preserve">
          <source>autoescape</source>
          <target state="translated">autoescape</target>
        </trans-unit>
        <trans-unit id="7f01fe787c49e4adbe32533279699f08494c6472" translate="yes" xml:space="preserve">
          <source>batch</source>
          <target state="translated">batch</target>
        </trans-unit>
        <trans-unit id="0214b4b355d11ca8f2ce45a968c264651bdfbf83" translate="yes" xml:space="preserve">
          <source>block</source>
          <target state="translated">block</target>
        </trans-unit>
        <trans-unit id="fc39b18f287d8bbfaceae020f4a4eb32ac5c1e70" translate="yes" xml:space="preserve">
          <source>both</source>
          <target state="translated">both</target>
        </trans-unit>
        <trans-unit id="d01a341706c2a5c67a30eb227bba3d0fd7ace906" translate="yes" xml:space="preserve">
          <source>capitalize</source>
          <target state="translated">capitalize</target>
        </trans-unit>
        <trans-unit id="2cf3010522d927f05c835ad06f16007c84f138dd" translate="yes" xml:space="preserve">
          <source>check if &lt;code&gt;foo&lt;/code&gt; is an array and &lt;code&gt;bar&lt;/code&gt; a valid element;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0a87463a5da3a529959582ae7965dbc217195be" translate="yes" xml:space="preserve">
          <source>class Project_Twig_Extension extends Twig_Extension { }</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ff16b36dc77810e63bda254427a1d6965fa127a" translate="yes" xml:space="preserve">
          <source>complex</source>
          <target state="translated">complex</target>
        </trans-unit>
        <trans-unit id="d810ca965a236c6f46a932efff918a4b3a191918" translate="yes" xml:space="preserve">
          <source>constant</source>
          <target state="translated">constant</target>
        </trans-unit>
        <trans-unit id="1f6b6676540ba69ffa0f1e9f5245486098bc2798" translate="yes" xml:space="preserve">
          <source>convert_encoding</source>
          <target state="translated">convert_encoding</target>
        </trans-unit>
        <trans-unit id="5d2432d4636d257e92c0918095f31735825405c3" translate="yes" xml:space="preserve">
          <source>cycle</source>
          <target state="translated">cycle</target>
        </trans-unit>
        <trans-unit id="e927d0677c77241b707442314346326278051dd6" translate="yes" xml:space="preserve">
          <source>date</source>
          <target state="translated">date</target>
        </trans-unit>
        <trans-unit id="0375b9aa6be553ecd1b87e02fb4bfff2bc3fbe99" translate="yes" xml:space="preserve">
          <source>date_modify</source>
          <target state="translated">date_modify</target>
        </trans-unit>
        <trans-unit id="7505d64a54e061b7acd54ccd58b49dc43500b635" translate="yes" xml:space="preserve">
          <source>default</source>
          <target state="translated">default</target>
        </trans-unit>
        <trans-unit id="9bc79382610417cb19c15d3e65015f8a7d7b36bc" translate="yes" xml:space="preserve">
          <source>defined</source>
          <target state="translated">defined</target>
        </trans-unit>
        <trans-unit id="513b28ad3810ae4846ec6bb58921d48892ceb662" translate="yes" xml:space="preserve">
          <source>deprecated</source>
          <target state="translated">deprecated</target>
        </trans-unit>
        <trans-unit id="3df24216e2026e64b661d856c019ca1a82e0532a" translate="yes" xml:space="preserve">
          <source>divisible by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eadcd9bd2a09c75aef04954e6799e50278ee124a" translate="yes" xml:space="preserve">
          <source>do</source>
          <target state="translated">do</target>
        </trans-unit>
        <trans-unit id="9567d1547e105470e4e53c1568f07a209e82a161" translate="yes" xml:space="preserve">
          <source>dump</source>
          <target state="translated">dump</target>
        </trans-unit>
        <trans-unit id="ae050f5b7fb8d383d62139276081853b47e7a03e" translate="yes" xml:space="preserve">
          <source>else</source>
          <target state="translated">else</target>
        </trans-unit>
        <trans-unit id="cfff27c96089b93150f3553b6ffdd39d0d5d8e78" translate="yes" xml:space="preserve">
          <source>embed</source>
          <target state="translated">embed</target>
        </trans-unit>
        <trans-unit id="ad87109bfff0765f4dd8cf4943b04d16a4070fea" translate="yes" xml:space="preserve">
          <source>empty</source>
          <target state="translated">empty</target>
        </trans-unit>
        <trans-unit id="79cc112e9b671aeea9119eee68c74b3f2fbeaa70" translate="yes" xml:space="preserve">
          <source>empty array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b3f8803e110dc659aa6186ce6aba70d8e52b81a" translate="yes" xml:space="preserve">
          <source>empty string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdecabe1520a398e4e46deff9d55b19bed6d6457" translate="yes" xml:space="preserve">
          <source>escape</source>
          <target state="translated">escape</target>
        </trans-unit>
        <trans-unit id="04b8c80bb78edbc4f2742dedfab5f5bddf895cd1" translate="yes" xml:space="preserve">
          <source>even</source>
          <target state="translated">even</target>
        </trans-unit>
        <trans-unit id="2b781ff8e3327e3e897ec571fa02fec12242e7dd" translate="yes" xml:space="preserve">
          <source>extends</source>
          <target state="translated">extends</target>
        </trans-unit>
        <trans-unit id="7cb6efb98ba5972a9b5090dc2e517fe14d12cb04" translate="yes" xml:space="preserve">
          <source>false</source>
          <target state="translated">false</target>
        </trans-unit>
        <trans-unit id="4bb4ca75941b7bbc5bc6a12be44b22fc9c8d234e" translate="yes" xml:space="preserve">
          <source>filter</source>
          <target state="translated">filter</target>
        </trans-unit>
        <trans-unit id="9f8a9950a99ea4e23f0c97da4201341828eae28b" translate="yes" xml:space="preserve">
          <source>filter should only be used at the end of the filter chain:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0996a37c13d44c3b06074939d43fa3759bd32c1" translate="yes" xml:space="preserve">
          <source>first</source>
          <target state="translated">first</target>
        </trans-unit>
        <trans-unit id="e4706359fc4117d0efea7adb012984601954e2af" translate="yes" xml:space="preserve">
          <source>flush</source>
          <target state="translated">flush</target>
        </trans-unit>
        <trans-unit id="43eef9a62abb8b1e1654f8a890aae054abffa82b" translate="yes" xml:space="preserve">
          <source>for</source>
          <target state="translated">for</target>
        </trans-unit>
        <trans-unit id="785987648f85190cfde9eadc69fc7c46fe8a7433" translate="yes" xml:space="preserve">
          <source>format</source>
          <target state="translated">format</target>
        </trans-unit>
        <trans-unit id="79eb183e04b1523bd17785c4ffa9dc1ee345d968" translate="yes" xml:space="preserve">
          <source>frequent</source>
          <target state="translated">frequent</target>
        </trans-unit>
        <trans-unit id="0b1e95cfd9775191a7224d0a218ae79187e80c1d" translate="yes" xml:space="preserve">
          <source>from</source>
          <target state="translated">from</target>
        </trans-unit>
        <trans-unit id="958f57f57d72a30f329ee5538f21b0257a49a46e" translate="yes" xml:space="preserve">
          <source>if</source>
          <target state="translated">if</target>
        </trans-unit>
        <trans-unit id="4ca36229f1aade3dd1b230aea952384f754bbb8b" translate="yes" xml:space="preserve">
          <source>if not, and if &lt;code&gt;foo&lt;/code&gt; is an object, check that &lt;code&gt;bar&lt;/code&gt; is a valid method (even if &lt;code&gt;bar&lt;/code&gt; is the constructor - use &lt;code&gt;__construct()&lt;/code&gt; instead);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a10ecf2cdab1ff42e7ad747f6e3bde95e855d564" translate="yes" xml:space="preserve">
          <source>if not, and if &lt;code&gt;foo&lt;/code&gt; is an object, check that &lt;code&gt;bar&lt;/code&gt; is a valid property;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6596eed4ae4059448e0853306bef725b034792d8" translate="yes" xml:space="preserve">
          <source>if not, and if &lt;code&gt;foo&lt;/code&gt; is an object, check that &lt;code&gt;getBar&lt;/code&gt; is a valid method;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c498e5f27b0a869081d6fde35321037f7b4c649b" translate="yes" xml:space="preserve">
          <source>if not, and if &lt;code&gt;foo&lt;/code&gt; is an object, check that &lt;code&gt;hasBar&lt;/code&gt; is a valid method;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01a43c200a380cf92db7d2ae1376fa68b98bc943" translate="yes" xml:space="preserve">
          <source>if not, and if &lt;code&gt;foo&lt;/code&gt; is an object, check that &lt;code&gt;isBar&lt;/code&gt; is a valid method;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed17d9ee197b9ce5e4b5c98c8a238b212b43354a" translate="yes" xml:space="preserve">
          <source>if not, return a &lt;code&gt;null&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62fdfbd55d19b2a4671102ad7bca17d875f8207a" translate="yes" xml:space="preserve">
          <source>import</source>
          <target state="translated">import</target>
        </trans-unit>
        <trans-unit id="d3ecb0d890368d7659ee54010045b835dacb8efe" translate="yes" xml:space="preserve">
          <source>include</source>
          <target state="translated">include</target>
        </trans-unit>
        <trans-unit id="a4232aa69e44a8d57375e3eb2456dacd95b18c0d" translate="yes" xml:space="preserve">
          <source>is compiled to something like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dd94c6934186333a00e635592ff461c9140c174" translate="yes" xml:space="preserve">
          <source>iterable</source>
          <target state="translated">iterable</target>
        </trans-unit>
        <trans-unit id="c455b38e076228392d1c751d14fe95da50519334" translate="yes" xml:space="preserve">
          <source>join</source>
          <target state="translated">join</target>
        </trans-unit>
        <trans-unit id="9fcd0bfe0868c9806b0bd00dba22225d3282d85b" translate="yes" xml:space="preserve">
          <source>json_encode</source>
          <target state="translated">json_encode</target>
        </trans-unit>
        <trans-unit id="5944ae25418ceabcf285dca1d721b77888dac89b" translate="yes" xml:space="preserve">
          <source>keys</source>
          <target state="translated">keys</target>
        </trans-unit>
        <trans-unit id="213ed3ea453bf610688ff8041e0a3b7b6abb5e6e" translate="yes" xml:space="preserve">
          <source>last</source>
          <target state="translated">last</target>
        </trans-unit>
        <trans-unit id="12c0f1fbadc4046b5f2bb9e063b227ef8750d9d6" translate="yes" xml:space="preserve">
          <source>left</source>
          <target state="translated">left</target>
        </trans-unit>
        <trans-unit id="3d54973f528b01019a58a52d34d518405a01b891" translate="yes" xml:space="preserve">
          <source>length</source>
          <target state="translated">length</target>
        </trans-unit>
        <trans-unit id="1df823e482339eb6067f4134408b0b8b28411a78" translate="yes" xml:space="preserve">
          <source>loop</source>
          <target state="translated">loop</target>
        </trans-unit>
        <trans-unit id="346e3ee198e98146993894d3de8ecab1a86c3e80" translate="yes" xml:space="preserve">
          <source>lower</source>
          <target state="translated">lower</target>
        </trans-unit>
        <trans-unit id="78f3a3d9d6e4d907a7d12e475d0a751d6b7e256b" translate="yes" xml:space="preserve">
          <source>macro</source>
          <target state="translated">macro</target>
        </trans-unit>
        <trans-unit id="0706025b2bbcec1ed8d64822f4eccd96314938d0" translate="yes" xml:space="preserve">
          <source>max</source>
          <target state="translated">max</target>
        </trans-unit>
        <trans-unit id="14091a9f2461267ee7e02525b4f1f2923f1c9849" translate="yes" xml:space="preserve">
          <source>merge</source>
          <target state="translated">merge</target>
        </trans-unit>
        <trans-unit id="b6c935d4f3c7b220fa038613a1f9c1b56b255a86" translate="yes" xml:space="preserve">
          <source>min</source>
          <target state="translated">min</target>
        </trans-unit>
        <trans-unit id="6834c74997e8995bac010b6d8fa062688b176994" translate="yes" xml:space="preserve">
          <source>nl2br</source>
          <target state="translated">nl2br</target>
        </trans-unit>
        <trans-unit id="db85006aed50f7ba21c540a4033fd7451f321db5" translate="yes" xml:space="preserve">
          <source>non-empty array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2be88ca4242c76e8253ac62474851065032d6833" translate="yes" xml:space="preserve">
          <source>null</source>
          <target state="translated">null</target>
        </trans-unit>
        <trans-unit id="5dd136c52cf302163a05e7cafa3693a7179fe74b" translate="yes" xml:space="preserve">
          <source>number_format</source>
          <target state="translated">number_format</target>
        </trans-unit>
        <trans-unit id="6877adbecf3e276a79f96e540d9d0f418fc64532" translate="yes" xml:space="preserve">
          <source>numeric zero</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1615307cc4523f183e777df67f168c86908e8007" translate="yes" xml:space="preserve">
          <source>object</source>
          <target state="translated">object</target>
        </trans-unit>
        <trans-unit id="60f7a51208a50e4639fc53af2d60b808f4429a1e" translate="yes" xml:space="preserve">
          <source>odd</source>
          <target state="translated">odd</target>
        </trans-unit>
        <trans-unit id="d8fd39d0bbdd2dcf322d8b11390a4c5825b11495" translate="yes" xml:space="preserve">
          <source>parent</source>
          <target state="translated">parent</target>
        </trans-unit>
        <trans-unit id="a415ab5cc17c8c093c015ccdb7e552aee7911aa4" translate="yes" xml:space="preserve">
          <source>random</source>
          <target state="translated">random</target>
        </trans-unit>
        <trans-unit id="4d55af37dbbb6a42088d917caa1ca25428ec42c9" translate="yes" xml:space="preserve">
          <source>range</source>
          <target state="translated">range</target>
        </trans-unit>
        <trans-unit id="d5e62fc1fc3b3a64ea4fc20d640432c8bd216663" translate="yes" xml:space="preserve">
          <source>rare</source>
          <target state="translated">rare</target>
        </trans-unit>
        <trans-unit id="ce15802a8c5e8e9db0ffaf10130ef265296e9ea4" translate="yes" xml:space="preserve">
          <source>raw</source>
          <target state="translated">raw</target>
        </trans-unit>
        <trans-unit id="3cacc7bfac0a382c669a884c953d0401a689785d" translate="yes" xml:space="preserve">
          <source>replace</source>
          <target state="translated">replace</target>
        </trans-unit>
        <trans-unit id="75470a3076d8da06e21a0f542f3a535af3f72e94" translate="yes" xml:space="preserve">
          <source>reverse</source>
          <target state="translated">reverse</target>
        </trans-unit>
        <trans-unit id="d27a1f11771200949714b1af99f048a416f5d6f4" translate="yes" xml:space="preserve">
          <source>right</source>
          <target state="translated">right</target>
        </trans-unit>
        <trans-unit id="f0590a6dd3663be108ff31f58d16b829a1284be6" translate="yes" xml:space="preserve">
          <source>round</source>
          <target state="translated">round</target>
        </trans-unit>
        <trans-unit id="ac3a5e8e42ecd5cec06569abf86321a3c130988b" translate="yes" xml:space="preserve">
          <source>same as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ed037b84943c4caa3a520e48a5540181c46c98c" translate="yes" xml:space="preserve">
          <source>sandbox</source>
          <target state="translated">sandbox</target>
        </trans-unit>
        <trans-unit id="65c10dc3549fe07424148a8a4790a3341ecbc253" translate="yes" xml:space="preserve">
          <source>set</source>
          <target state="translated">set</target>
        </trans-unit>
        <trans-unit id="0a5228e66df38e2f27ca61b901edf86f7ef97fb8" translate="yes" xml:space="preserve">
          <source>slice</source>
          <target state="translated">slice</target>
        </trans-unit>
        <trans-unit id="98c4b8f6e2d770a0f2b54233669d65ff6eddc472" translate="yes" xml:space="preserve">
          <source>sort</source>
          <target state="translated">sort</target>
        </trans-unit>
        <trans-unit id="828d338a9b04221c9cbe286f50cd389f68de4ecf" translate="yes" xml:space="preserve">
          <source>source</source>
          <target state="translated">source</target>
        </trans-unit>
        <trans-unit id="5ecd294ae7c5dfd951350294152cbf1e7e2c4bba" translate="yes" xml:space="preserve">
          <source>spaceless</source>
          <target state="translated">spaceless</target>
        </trans-unit>
        <trans-unit id="94d5cab6f5fe3422a447ab15436e7a672bc0c09a" translate="yes" xml:space="preserve">
          <source>split</source>
          <target state="translated">split</target>
        </trans-unit>
        <trans-unit id="1fa14e850fba8e8028bfa7aae314967903bfd25f" translate="yes" xml:space="preserve">
          <source>string &quot;0&quot; or '0'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab84ef96b894ad194b0eab95e2e28bd9f60a85ad" translate="yes" xml:space="preserve">
          <source>striptags</source>
          <target state="translated">striptags</target>
        </trans-unit>
        <trans-unit id="60bbb09c0cec106baf068ba77f089201972495a9" translate="yes" xml:space="preserve">
          <source>template_from_string</source>
          <target state="translated">template_from_string</target>
        </trans-unit>
        <trans-unit id="3c6de1b7dd91465d437ef415f94f36afc1fbc8a8" translate="yes" xml:space="preserve">
          <source>title</source>
          <target state="translated">title</target>
        </trans-unit>
        <trans-unit id="7ab4b0a80acc6ac1e45dd17da3810e3e8beb829e" translate="yes" xml:space="preserve">
          <source>trim</source>
          <target state="translated">trim</target>
        </trans-unit>
        <trans-unit id="f2fc8123700c95880a53d4a1576282f2ca68c4b0" translate="yes" xml:space="preserve">
          <source>trivial</source>
          <target state="translated">trivial</target>
        </trans-unit>
        <trans-unit id="5ffe533b830f08a0326348a9160afafc8ada44db" translate="yes" xml:space="preserve">
          <source>true</source>
          <target state="translated">true</target>
        </trans-unit>
        <trans-unit id="c538c170bdc6b0f3bb98dce44a016a2e2d45a6e7" translate="yes" xml:space="preserve">
          <source>upper</source>
          <target state="translated">upper</target>
        </trans-unit>
        <trans-unit id="ca4ca6ff0749feaa735a423d62ba79cbfc879aa8" translate="yes" xml:space="preserve">
          <source>url_encode</source>
          <target state="translated">url_encode</target>
        </trans-unit>
        <trans-unit id="04489a12bbaa6aebffb61ed2f524424ba8e1147e" translate="yes" xml:space="preserve">
          <source>use</source>
          <target state="translated">use</target>
        </trans-unit>
        <trans-unit id="b46d0172433dd6895dac7544b9dacbb87b361e9f" translate="yes" xml:space="preserve">
          <source>variable</source>
          <target state="translated">variable</target>
        </trans-unit>
        <trans-unit id="03dbc04c745751f563cb64f734008bc0006b6c9f" translate="yes" xml:space="preserve">
          <source>variable, here is how you can do it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d99a2118f45121587f2aa88f0bbe3e6a0222afec" translate="yes" xml:space="preserve">
          <source>verbatim</source>
          <target state="translated">verbatim</target>
        </trans-unit>
        <trans-unit id="9b3d9037b0bc87627042c509134a61cfec13c10a" translate="yes" xml:space="preserve">
          <source>whitespace-only string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a471d315045b2ea8fbb81be598ec9f27291d9d7d" translate="yes" xml:space="preserve">
          <source>will strip from either the left side or right side only</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fcd25a39d2037183044a8897e9a5333d727fded" translate="yes" xml:space="preserve">
          <source>with</source>
          <target state="translated">with</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
