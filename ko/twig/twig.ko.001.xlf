<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="twig">
    <body>
      <group id="twig">
        <trans-unit id="d406fae92c1d4b9940e88adf8557b9a0aae8883e" translate="yes" xml:space="preserve">
          <source>$template</source>
          <target state="translated">$template</target>
        </trans-unit>
        <trans-unit id="4f7d8bf6e181bd173643fbeb0c2f944da0b5d81e" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2009&amp;ndash;2018 by the Twig Team</source>
          <target state="translated">&amp;copy; 2009&amp;ndash;2018 by the Twig Team</target>
        </trans-unit>
        <trans-unit id="29194482da30c2984a7b43f65ab141ad08108b2e" translate="yes" xml:space="preserve">
          <source>&amp;laquo; odd</source>
          <target state="translated">&amp;laquo; odd</target>
        </trans-unit>
        <trans-unit id="46835bb757c07caedf30fa2b59650348ec06bcc7" translate="yes" xml:space="preserve">
          <source>) sides, but</source>
          <target state="translated">) sides, but</target>
        </trans-unit>
        <trans-unit id="8178170d557825e52786be3523f082cea011707e" translate="yes" xml:space="preserve">
          <source>0 decimal places.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="667dd49d351b0633b5062095bea5c8ff275b5334" translate="yes" xml:space="preserve">
          <source>: &lt;code&gt;{{
data|json_encode(constant('JSON_PRETTY_PRINT') b-or constant('JSON_HEX_QUOT') }}&lt;/code&gt;)</source>
          <target state="translated">: &lt;code&gt;{{
data|json_encode(constant('JSON_PRETTY_PRINT') b-or constant('JSON_HEX_QUOT') }}&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="e8ea619277a26491c58c78e5c784651812fe152b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../functions/block&quot;&gt;block&lt;/a&gt;, &lt;a href=&quot;../functions/parent&quot;&gt;parent&lt;/a&gt;, &lt;a href=&quot;use&quot;&gt;use&lt;/a&gt;, &lt;a href=&quot;extends&quot;&gt;extends&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8b9a2b8bc0465adaf0a8864a48aa171b3843315" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../functions/block&quot;&gt;block&lt;/a&gt;, &lt;a href=&quot;block&quot;&gt;block&lt;/a&gt;, &lt;a href=&quot;../functions/parent&quot;&gt;parent&lt;/a&gt;, &lt;a href=&quot;use&quot;&gt;use&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a53739e5cee7025fa66ae27a433fa6f7d2048d8b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../tags/extends&quot;&gt;extends&lt;/a&gt;, &lt;a href=&quot;block&quot;&gt;block&lt;/a&gt;, &lt;a href=&quot;../tags/block&quot;&gt;block&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a5e38d89ce7b3e929ad0bf70100d7eb996be73b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../tags/extends&quot;&gt;extends&lt;/a&gt;, &lt;a href=&quot;parent&quot;&gt;parent&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2196055e831455bdb5de42125b82dee52c455f8d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;abs&quot;&gt; &amp;laquo; abs &lt;/a&gt;|&lt;a href=&quot;capitalize&quot;&gt; capitalize &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;abs&quot;&gt; &amp;laquo; abs &lt;/a&gt;|&lt;a href=&quot;capitalize&quot;&gt; capitalize &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5ab89f9233442b42d401bcbec1125780a3887e67" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;advanced&quot;&gt; &amp;laquo; Extending Twig &lt;/a&gt;|&lt;a href=&quot;recipes&quot;&gt; Recipes &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;advanced&quot;&gt; &amp;laquo; Extending Twig &lt;/a&gt;|&lt;a href=&quot;recipes&quot;&gt; Recipes &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="07387ab8c02dd794e4acd73eb190d57fe260b8c7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;api&quot;&gt; &amp;laquo; Twig for Developers &lt;/a&gt;|&lt;a href=&quot;internals&quot;&gt; Twig Internals &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;api&quot;&gt; &amp;laquo; Twig for Developers &lt;/a&gt;|&lt;a href=&quot;internals&quot;&gt; Twig Internals &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="97b8b61d8ea5e41f85d9aa72a758e00669f27f92" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;attribute&quot;&gt; &amp;laquo; attribute &lt;/a&gt;|&lt;a href=&quot;constant&quot;&gt; constant &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;attribute&quot;&gt; &amp;laquo; attribute &lt;/a&gt;|&lt;a href=&quot;constant&quot;&gt; constant &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="63c02699d3befd22357284af002e07b177a0f72f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;autoescape&quot;&gt; &amp;laquo; autoescape &lt;/a&gt;|&lt;a href=&quot;do&quot;&gt; do &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;autoescape&quot;&gt; &amp;laquo; autoescape &lt;/a&gt;|&lt;a href=&quot;do&quot;&gt; do &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="48aad7b1c1cfd8113e1eafcd69152911345dc753" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;batch&quot;&gt; &amp;laquo; batch &lt;/a&gt;|&lt;a href=&quot;convert_encoding&quot;&gt; convert_encoding &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;batch&quot;&gt; &amp;laquo; batch &lt;/a&gt;|&lt;a href=&quot;convert_encoding&quot;&gt; convert_encoding &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f6d48227387b105d00b030ae4cc5b402055d5d84" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;block&quot;&gt; &amp;laquo; block &lt;/a&gt;|&lt;a href=&quot;cycle&quot;&gt; cycle &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;block&quot;&gt; &amp;laquo; block &lt;/a&gt;|&lt;a href=&quot;cycle&quot;&gt; cycle &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="93873d292b0f6f5f9eddaa89b081635db2e87c5e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;block&quot;&gt; &amp;laquo; block &lt;/a&gt;|&lt;a href=&quot;embed&quot;&gt; embed &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;block&quot;&gt; &amp;laquo; block &lt;/a&gt;|&lt;a href=&quot;embed&quot;&gt; embed &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cfa1d30b3f2a2332eea6f924513fd5a5658bb8d9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;capitalize&quot;&gt; &amp;laquo; capitalize &lt;/a&gt;|&lt;a href=&quot;date&quot;&gt; date &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;capitalize&quot;&gt; &amp;laquo; capitalize &lt;/a&gt;|&lt;a href=&quot;date&quot;&gt; date &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="34853c0d594e778b8b422493478aae32dadf8d0b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;constant&quot;&gt; &amp;laquo; constant &lt;/a&gt;|&lt;a href=&quot;date&quot;&gt; date &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;constant&quot;&gt; &amp;laquo; constant &lt;/a&gt;|&lt;a href=&quot;date&quot;&gt; date &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="44cb9c77f9121e23464d6a65f90cef0dcf96807d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;constant&quot;&gt; &amp;laquo; constant &lt;/a&gt;|&lt;a href=&quot;divisibleby&quot;&gt; divisible by &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;constant&quot;&gt; &amp;laquo; constant &lt;/a&gt;|&lt;a href=&quot;divisibleby&quot;&gt; divisible by &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9ce20b5c32ace9a7f151b0ceb54106603117de24" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;convert_encoding&quot;&gt; &amp;laquo; convert_encoding &lt;/a&gt;|&lt;a href=&quot;date_modify&quot;&gt; date_modify &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;convert_encoding&quot;&gt; &amp;laquo; convert_encoding &lt;/a&gt;|&lt;a href=&quot;date_modify&quot;&gt; date_modify &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b547841eee856cabbc16d4ecca64b4db0eccc02b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;cycle&quot;&gt; &amp;laquo; cycle &lt;/a&gt;|&lt;a href=&quot;dump&quot;&gt; dump &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;cycle&quot;&gt; &amp;laquo; cycle &lt;/a&gt;|&lt;a href=&quot;dump&quot;&gt; dump &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2dc0fb3e7ff462fc922a6a77a24c155280533409" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;date&quot;&gt; &amp;laquo; date &lt;/a&gt;|&lt;a href=&quot;default&quot;&gt; default &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;date&quot;&gt; &amp;laquo; date &lt;/a&gt;|&lt;a href=&quot;default&quot;&gt; default &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c57cb592ef5db5006924bc0a67ba1157b7eb64fc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;date&quot;&gt; &amp;laquo; date &lt;/a&gt;|&lt;a href=&quot;include&quot;&gt; include &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;date&quot;&gt; &amp;laquo; date &lt;/a&gt;|&lt;a href=&quot;include&quot;&gt; include &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5c6ff317f14b3b103f0cf8f35aa407de9da5cf42" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;date_modify&quot;&gt; &amp;laquo; date_modify &lt;/a&gt;|&lt;a href=&quot;escape&quot;&gt; escape &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;date_modify&quot;&gt; &amp;laquo; date_modify &lt;/a&gt;|&lt;a href=&quot;escape&quot;&gt; escape &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d008ef9bcb1bad643f6c1e9cb4e9ffbf1a10fad5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;default&quot;&gt; &amp;laquo; default &lt;/a&gt;|&lt;a href=&quot;first&quot;&gt; first &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;default&quot;&gt; &amp;laquo; default &lt;/a&gt;|&lt;a href=&quot;first&quot;&gt; first &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="24029a7469a584d78529ae81ff78bfd254700c19" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;defined&quot;&gt; &amp;laquo; defined &lt;/a&gt;|&lt;a href=&quot;empty&quot;&gt; empty &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;defined&quot;&gt; &amp;laquo; defined &lt;/a&gt;|&lt;a href=&quot;empty&quot;&gt; empty &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d319c860e2a9ab3f1e2814a902a02d3e78d477c0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;divisibleby&quot;&gt; &amp;laquo; divisible by &lt;/a&gt;|&lt;a href=&quot;even&quot;&gt; even &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;divisibleby&quot;&gt; &amp;laquo; divisible by &lt;/a&gt;|&lt;a href=&quot;even&quot;&gt; even &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0ca95e7dca88a716f6524ef27db9696d8a5171d7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;do&quot;&gt; &amp;laquo; do &lt;/a&gt;|&lt;a href=&quot;extends&quot;&gt; extends &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;do&quot;&gt; &amp;laquo; do &lt;/a&gt;|&lt;a href=&quot;extends&quot;&gt; extends &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4d9b26b39b8f0eae6a6a31c4ccf526c04ebe31ca" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;dump&quot;&gt; &amp;laquo; dump &lt;/a&gt;|&lt;a href=&quot;max&quot;&gt; max &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;dump&quot;&gt; &amp;laquo; dump &lt;/a&gt;|&lt;a href=&quot;max&quot;&gt; max &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6b74aaac88f872e72b422cab89afab6a9f40f079" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;embed&quot;&gt; &amp;laquo; embed &lt;/a&gt;|&lt;a href=&quot;filter&quot;&gt; filter &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;embed&quot;&gt; &amp;laquo; embed &lt;/a&gt;|&lt;a href=&quot;filter&quot;&gt; filter &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e261747a0edf819e20be37af0eda34d23f3ffea3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;empty&quot;&gt; &amp;laquo; empty &lt;/a&gt;|&lt;a href=&quot;iterable&quot;&gt; iterable &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;empty&quot;&gt; &amp;laquo; empty &lt;/a&gt;|&lt;a href=&quot;iterable&quot;&gt; iterable &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="703b7f99a391bb7361397a85f21666a7dd879393" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;escape&quot;&gt; &amp;laquo; escape &lt;/a&gt;|&lt;a href=&quot;format&quot;&gt; format &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;escape&quot;&gt; &amp;laquo; escape &lt;/a&gt;|&lt;a href=&quot;format&quot;&gt; format &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e0305bff5644f060da5eb6c106486320f4dd9c68" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;even&quot;&gt; &amp;laquo; even &lt;/a&gt;|&lt;a href=&quot;null&quot;&gt; null &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;even&quot;&gt; &amp;laquo; even &lt;/a&gt;|&lt;a href=&quot;null&quot;&gt; null &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="08840c9c6b4e10f567da756e357cb582f6094d34" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;extends&quot;&gt; &amp;laquo; extends &lt;/a&gt;|&lt;a href=&quot;flush&quot;&gt; flush &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;extends&quot;&gt; &amp;laquo; extends &lt;/a&gt;|&lt;a href=&quot;flush&quot;&gt; flush &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8040a7ef5e42567d92deaed919a0e6a740c10fe5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;filter&quot;&gt; &amp;laquo; filter &lt;/a&gt;|&lt;a href=&quot;for&quot;&gt; for &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;filter&quot;&gt; &amp;laquo; filter &lt;/a&gt;|&lt;a href=&quot;for&quot;&gt; for &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="93f588b10d5c9bb280fb8edf2ab8315a7760df01" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;filters/index&quot;&gt;Filters&lt;/a&gt;;</source>
          <target state="translated">&lt;a href=&quot;filters/index&quot;&gt;Filters&lt;/a&gt;;</target>
        </trans-unit>
        <trans-unit id="4667a78915e1374b2bb97c98e345897b4ba8debd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;first&quot;&gt; &amp;laquo; first &lt;/a&gt;|&lt;a href=&quot;join&quot;&gt; join &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;first&quot;&gt; &amp;laquo; first &lt;/a&gt;|&lt;a href=&quot;join&quot;&gt; join &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9c5f8a75fd3d8a19df85a114bf680f36970581a7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;flush&quot;&gt; &amp;laquo; flush &lt;/a&gt;|&lt;a href=&quot;from&quot;&gt; from &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;flush&quot;&gt; &amp;laquo; flush &lt;/a&gt;|&lt;a href=&quot;from&quot;&gt; from &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="517d7a848117bd9bcc400e49bfbc4005c0fc8973" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;for&quot;&gt; &amp;laquo; for &lt;/a&gt;|&lt;a href=&quot;if&quot;&gt; if &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;for&quot;&gt; &amp;laquo; for &lt;/a&gt;|&lt;a href=&quot;if&quot;&gt; if &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0eb9fc8d4fc1ce7eee7847e1f2521579cbff7f6a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;format&quot;&gt; &amp;laquo; format &lt;/a&gt;|&lt;a href=&quot;json_encode&quot;&gt; json_encode &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;format&quot;&gt; &amp;laquo; format &lt;/a&gt;|&lt;a href=&quot;json_encode&quot;&gt; json_encode &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="39ede6c75905fce3b5b7b963f26a10bdeec89d10" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;from&quot;&gt; &amp;laquo; from &lt;/a&gt;|&lt;a href=&quot;import&quot;&gt; import &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;from&quot;&gt; &amp;laquo; from &lt;/a&gt;|&lt;a href=&quot;import&quot;&gt; import &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="23443e2efe45712146937b8a58cc32102f871889" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;from&quot;&gt;from&lt;/a&gt;, &lt;a href=&quot;import&quot;&gt;import&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32a397ccf3f3175bfedfd1ec550aa812a0385663" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;functions/index&quot;&gt;Functions&lt;/a&gt;;</source>
          <target state="translated">&lt;a href=&quot;functions/index&quot;&gt;Functions&lt;/a&gt;;</target>
        </trans-unit>
        <trans-unit id="33fff9e6477ef103248c8f4e20bdc2ff4dc82aef" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;if&quot;&gt; &amp;laquo; if &lt;/a&gt;|&lt;a href=&quot;include&quot;&gt; include &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;if&quot;&gt; &amp;laquo; if &lt;/a&gt;|&lt;a href=&quot;include&quot;&gt; include &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cc91615238c252ee9aa2454af61c2fed69c0cecb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;import&quot;&gt; &amp;laquo; import &lt;/a&gt;|&lt;a href=&quot;macro&quot;&gt; macro &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;import&quot;&gt; &amp;laquo; import &lt;/a&gt;|&lt;a href=&quot;macro&quot;&gt; macro &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1be3b495966e94e350f9255aeeb09c6a8c0cd062" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;include&quot;&gt; &amp;laquo; include &lt;/a&gt;|&lt;a href=&quot;min&quot;&gt; min &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;include&quot;&gt; &amp;laquo; include &lt;/a&gt;|&lt;a href=&quot;min&quot;&gt; min &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="61c8b8b5a901ed68cb5e3c81e4803cda93d66383" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;include&quot;&gt; &amp;laquo; include &lt;/a&gt;|&lt;a href=&quot;sandbox&quot;&gt; sandbox &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;include&quot;&gt; &amp;laquo; include &lt;/a&gt;|&lt;a href=&quot;sandbox&quot;&gt; sandbox &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="29c61d5eb8de3d48d8eefaf393b647f4b9ee78e0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;index&quot;&gt; &amp;laquo; Filters &lt;/a&gt;|&lt;a href=&quot;batch&quot;&gt; batch &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;index&quot;&gt; &amp;laquo; Filters &lt;/a&gt;|&lt;a href=&quot;batch&quot;&gt; batch &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c8688863e41ad997c6bccb8d262ce29e71c7a0e0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;index&quot;&gt; &amp;laquo; Functions &lt;/a&gt;|&lt;a href=&quot;block&quot;&gt; block &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;index&quot;&gt; &amp;laquo; Functions &lt;/a&gt;|&lt;a href=&quot;block&quot;&gt; block &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7686baab9e452a0b7ee3dc21dd6f9eae01ca5fd7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;index&quot;&gt; &amp;laquo; Tags &lt;/a&gt;|&lt;a href=&quot;block&quot;&gt; block &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;index&quot;&gt; &amp;laquo; Tags &lt;/a&gt;|&lt;a href=&quot;block&quot;&gt; block &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0ac5a2a98109a4fa0e136913916c2013a92b6d45" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;index&quot;&gt; &amp;laquo; Tests &lt;/a&gt;|&lt;a href=&quot;defined&quot;&gt; defined &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;index&quot;&gt; &amp;laquo; Tests &lt;/a&gt;|&lt;a href=&quot;defined&quot;&gt; defined &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="deee586ed0bf723843887e34adb9bbd7dd49cd51" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;index&quot;&gt; &amp;laquo; Twig &lt;/a&gt;|&lt;a href=&quot;installation&quot;&gt; Installation &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;index&quot;&gt; &amp;laquo; Twig &lt;/a&gt;|&lt;a href=&quot;installation&quot;&gt; Installation &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="725eee06b01eca5fd0bb57281361bb346d24b945" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;installation&quot;&gt; &amp;laquo; Installation &lt;/a&gt;|&lt;a href=&quot;api&quot;&gt; Twig for Developers &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;installation&quot;&gt; &amp;laquo; Installation &lt;/a&gt;|&lt;a href=&quot;api&quot;&gt; Twig for Developers &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ebb803509ba975e1a7f2c7414a3019ac8ca2d4e6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;internals&quot;&gt; &amp;laquo; Twig Internals &lt;/a&gt;|&lt;a href=&quot;coding_standards&quot;&gt; Coding Standards &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;internals&quot;&gt; &amp;laquo; Twig Internals &lt;/a&gt;|&lt;a href=&quot;coding_standards&quot;&gt; Coding Standards &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3c8ec96b96fd59d0dfdf80692234d73e9296c686" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;intro&quot;&gt; &amp;laquo; Introduction &lt;/a&gt;|&lt;a href=&quot;templates&quot;&gt; Twig for Template Designers &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;intro&quot;&gt; &amp;laquo; Introduction &lt;/a&gt;|&lt;a href=&quot;templates&quot;&gt; Twig for Template Designers &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a7a77a60ee7a72e0b3d9363f63d395362dfd317d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;iterable&quot;&gt; &amp;laquo; iterable &lt;/a&gt;|&lt;a href=&quot;odd&quot;&gt; odd &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;iterable&quot;&gt; &amp;laquo; iterable &lt;/a&gt;|&lt;a href=&quot;odd&quot;&gt; odd &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c9c691d6d9bb157fa724dc7d8251c6127fba5c2a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;join&quot;&gt; &amp;laquo; join &lt;/a&gt;|&lt;a href=&quot;keys&quot;&gt; keys &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;join&quot;&gt; &amp;laquo; join &lt;/a&gt;|&lt;a href=&quot;keys&quot;&gt; keys &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="607a06da59cfad58dd8d5c4afade5497a10fbfc1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;json_encode&quot;&gt; &amp;laquo; json_encode &lt;/a&gt;|&lt;a href=&quot;last&quot;&gt; last &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;json_encode&quot;&gt; &amp;laquo; json_encode &lt;/a&gt;|&lt;a href=&quot;last&quot;&gt; last &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9f8d44f0eaaf0359ee83098044e2eeae1cb0d599" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;keys&quot;&gt; &amp;laquo; keys &lt;/a&gt;|&lt;a href=&quot;length&quot;&gt; length &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;keys&quot;&gt; &amp;laquo; keys &lt;/a&gt;|&lt;a href=&quot;length&quot;&gt; length &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="87bc64ed7b9ae093621e5f1cc14409fdadb74a87" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;last&quot;&gt; &amp;laquo; last &lt;/a&gt;|&lt;a href=&quot;lower&quot;&gt; lower &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;last&quot;&gt; &amp;laquo; last &lt;/a&gt;|&lt;a href=&quot;lower&quot;&gt; lower &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="dfcab2dfc144803b37c2806ed8c24edbce30ccfd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;length&quot;&gt; &amp;laquo; length &lt;/a&gt;|&lt;a href=&quot;merge&quot;&gt; merge &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;length&quot;&gt; &amp;laquo; length &lt;/a&gt;|&lt;a href=&quot;merge&quot;&gt; merge &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="33c4e9d6cd845480d8c6cb277559f7b25cd7bbe2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;lower&quot;&gt; &amp;laquo; lower &lt;/a&gt;|&lt;a href=&quot;nl2br&quot;&gt; nl2br &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;lower&quot;&gt; &amp;laquo; lower &lt;/a&gt;|&lt;a href=&quot;nl2br&quot;&gt; nl2br &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="561a9cf04bbf578a516f0572c428e9175e30500d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;macro&quot;&gt; &amp;laquo; macro &lt;/a&gt;|&lt;a href=&quot;set&quot;&gt; set &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;macro&quot;&gt; &amp;laquo; macro &lt;/a&gt;|&lt;a href=&quot;set&quot;&gt; set &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9f7c5699a484a0db1029b8b81146361aae25fc3f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;macro&quot;&gt;macro&lt;/a&gt;, &lt;a href=&quot;from&quot;&gt;from&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f98962c1a8976f8dbc3e24cf3b59217731f69aa9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;macro&quot;&gt;macro&lt;/a&gt;, &lt;a href=&quot;import&quot;&gt;import&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7550c442b9420153d4791bcd4a8dfcad93955e60" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;max&quot;&gt; &amp;laquo; max &lt;/a&gt;|&lt;a href=&quot;parent&quot;&gt; parent &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;max&quot;&gt; &amp;laquo; max &lt;/a&gt;|&lt;a href=&quot;parent&quot;&gt; parent &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b1f4fb23821f46238459e6e2b7a3453326edbdbc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;merge&quot;&gt; &amp;laquo; merge &lt;/a&gt;|&lt;a href=&quot;number_format&quot;&gt; number_format &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;merge&quot;&gt; &amp;laquo; merge &lt;/a&gt;|&lt;a href=&quot;number_format&quot;&gt; number_format &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1991a51a3124c551e867c95b465c1fbcfa7065c9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;min&quot;&gt; &amp;laquo; min &lt;/a&gt;|&lt;a href=&quot;random&quot;&gt; random &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;min&quot;&gt; &amp;laquo; min &lt;/a&gt;|&lt;a href=&quot;random&quot;&gt; random &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b2d86eeaaa9088130ff6b2c007d72553674c1a41" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;nl2br&quot;&gt; &amp;laquo; nl2br &lt;/a&gt;|&lt;a href=&quot;raw&quot;&gt; raw &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;nl2br&quot;&gt; &amp;laquo; nl2br &lt;/a&gt;|&lt;a href=&quot;raw&quot;&gt; raw &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3ebc14301946cf2ea7ba9461fdf0f74c02ea9378" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;null&quot;&gt; &amp;laquo; null &lt;/a&gt;|&lt;a href=&quot;sameas&quot;&gt; same as &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;null&quot;&gt; &amp;laquo; null &lt;/a&gt;|&lt;a href=&quot;sameas&quot;&gt; same as &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8892cb18569a9ad1d3f77b8d193af5f47849e26b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;number_format&quot;&gt; &amp;laquo; number_format &lt;/a&gt;|&lt;a href=&quot;replace&quot;&gt; replace &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;number_format&quot;&gt; &amp;laquo; number_format &lt;/a&gt;|&lt;a href=&quot;replace&quot;&gt; replace &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="819f486fb3335c2fc9b46d664299821e5fd9359e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;parent&quot;&gt; &amp;laquo; parent &lt;/a&gt;|&lt;a href=&quot;range&quot;&gt; range &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;parent&quot;&gt; &amp;laquo; parent &lt;/a&gt;|&lt;a href=&quot;range&quot;&gt; range &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="36b86310270c429231ea67387c2ffbfe0b2c31e9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;random&quot;&gt; &amp;laquo; random &lt;/a&gt;|&lt;a href=&quot;source&quot;&gt; source &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;random&quot;&gt; &amp;laquo; random &lt;/a&gt;|&lt;a href=&quot;source&quot;&gt; source &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2ab7dbde3653751026d8d7e4a84a03e09d65c43e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;range&quot;&gt; &amp;laquo; range &lt;/a&gt;|&lt;a href=&quot;template_from_string&quot;&gt; template_from_string &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;range&quot;&gt; &amp;laquo; range &lt;/a&gt;|&lt;a href=&quot;template_from_string&quot;&gt; template_from_string &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="88c402254032519e354f6e6f5938583ec1862c10" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;raw&quot;&gt; &amp;laquo; raw &lt;/a&gt;|&lt;a href=&quot;reverse&quot;&gt; reverse &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;raw&quot;&gt; &amp;laquo; raw &lt;/a&gt;|&lt;a href=&quot;reverse&quot;&gt; reverse &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a7908e7407e7c8fedd935bd4c22d850cfb43d263" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;recipes&quot;&gt; &amp;laquo; Recipes &lt;/a&gt;|&lt;a href=&quot;tags/index&quot;&gt; Tags &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;recipes&quot;&gt; &amp;laquo; Recipes &lt;/a&gt;|&lt;a href=&quot;tags/index&quot;&gt; Tags &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="482b30f2e72cc6220bc976f066380002f6a7ca63" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;replace&quot;&gt; &amp;laquo; replace &lt;/a&gt;|&lt;a href=&quot;round&quot;&gt; round &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;replace&quot;&gt; &amp;laquo; replace &lt;/a&gt;|&lt;a href=&quot;round&quot;&gt; round &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ea63a5183106883042f03ce3060be09519915d0d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;reverse&quot;&gt; &amp;laquo; reverse &lt;/a&gt;|&lt;a href=&quot;slice&quot;&gt; slice &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;reverse&quot;&gt; &amp;laquo; reverse &lt;/a&gt;|&lt;a href=&quot;slice&quot;&gt; slice &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="17e10e4c99c240ad2423a6bcff8d1efeb4e51f6c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;round&quot;&gt; &amp;laquo; round &lt;/a&gt;|&lt;a href=&quot;sort&quot;&gt; sort &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;round&quot;&gt; &amp;laquo; round &lt;/a&gt;|&lt;a href=&quot;sort&quot;&gt; sort &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="dc01271584d44812ceec734c223f4c47abb2b7e6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;sandbox&quot;&gt; &amp;laquo; sandbox &lt;/a&gt;|&lt;a href=&quot;spaceless&quot;&gt; spaceless &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;sandbox&quot;&gt; &amp;laquo; sandbox &lt;/a&gt;|&lt;a href=&quot;spaceless&quot;&gt; spaceless &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="773dec3a1dc7d40ec5b3cb0435a541223e719eba" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;set&quot;&gt; &amp;laquo; set &lt;/a&gt;|&lt;a href=&quot;use&quot;&gt; use &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;set&quot;&gt; &amp;laquo; set &lt;/a&gt;|&lt;a href=&quot;use&quot;&gt; use &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ffe60d68232492ff39ac9414bef4b01cc3dcdb43" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;slice&quot;&gt; &amp;laquo; slice &lt;/a&gt;|&lt;a href=&quot;split&quot;&gt; split &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;slice&quot;&gt; &amp;laquo; slice &lt;/a&gt;|&lt;a href=&quot;split&quot;&gt; split &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="204cb8e40607ba0b405f250717e93cb78d7ca66f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;sort&quot;&gt; &amp;laquo; sort &lt;/a&gt;|&lt;a href=&quot;striptags&quot;&gt; striptags &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;sort&quot;&gt; &amp;laquo; sort &lt;/a&gt;|&lt;a href=&quot;striptags&quot;&gt; striptags &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5a396e6ce5612149064645fb880ba048a8ea1e77" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;source&quot;&gt; &amp;laquo; source &lt;/a&gt;|&lt;a href=&quot;../tests/index&quot;&gt; Tests &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;source&quot;&gt; &amp;laquo; source &lt;/a&gt;|&lt;a href=&quot;../tests/index&quot;&gt; Tests &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3cf2ceaa70358c6f979a8bb370c80504ba850d20" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;spaceless&quot;&gt; &amp;laquo; spaceless &lt;/a&gt;|&lt;a href=&quot;verbatim&quot;&gt; verbatim &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;spaceless&quot;&gt; &amp;laquo; spaceless &lt;/a&gt;|&lt;a href=&quot;verbatim&quot;&gt; verbatim &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b14c455be70b803eac26d92b35c20b79c5457bd1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;split&quot;&gt; &amp;laquo; split &lt;/a&gt;|&lt;a href=&quot;title&quot;&gt; title &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;split&quot;&gt; &amp;laquo; split &lt;/a&gt;|&lt;a href=&quot;title&quot;&gt; title &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="50eef075cda312730583c86ef860507a51dafede" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;striptags&quot;&gt; &amp;laquo; striptags &lt;/a&gt;|&lt;a href=&quot;trim&quot;&gt; trim &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;striptags&quot;&gt; &amp;laquo; striptags &lt;/a&gt;|&lt;a href=&quot;trim&quot;&gt; trim &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="693001f35f7d06eaf26035e5d7c26f583e99f1da" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;tags/index&quot;&gt;Tags&lt;/a&gt;;</source>
          <target state="translated">&lt;a href=&quot;tags/index&quot;&gt;Tags&lt;/a&gt;;</target>
        </trans-unit>
        <trans-unit id="65e3dc56aea1f3161625835133603c62634e0cab" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;templates&quot;&gt; &amp;laquo; Twig for Template Designers &lt;/a&gt;|&lt;a href=&quot;advanced&quot;&gt; Extending Twig &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;templates&quot;&gt; &amp;laquo; Twig for Template Designers &lt;/a&gt;|&lt;a href=&quot;advanced&quot;&gt; Extending Twig &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="59e28a50210de21a390fb0df49384503f44f6fab" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;tests/index&quot;&gt;Tests&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;tests/index&quot;&gt;Tests&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="4f052c50ff640e3cdf8bf7f52512b1689d02e403" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;title&quot;&gt; &amp;laquo; title &lt;/a&gt;|&lt;a href=&quot;upper&quot;&gt; upper &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;title&quot;&gt; &amp;laquo; title &lt;/a&gt;|&lt;a href=&quot;upper&quot;&gt; upper &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="61f43b3367cde53e3053e3ad038987d409874cdd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;trim&quot;&gt; &amp;laquo; trim &lt;/a&gt;|&lt;a href=&quot;url_encode&quot;&gt; url_encode &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;trim&quot;&gt; &amp;laquo; trim &lt;/a&gt;|&lt;a href=&quot;url_encode&quot;&gt; url_encode &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c4552103dd6ba41474db2f230d47c30704c9ef4f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;upper&quot;&gt; &amp;laquo; upper &lt;/a&gt;|&lt;a href=&quot;../functions/index&quot;&gt; Functions &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;upper&quot;&gt; &amp;laquo; upper &lt;/a&gt;|&lt;a href=&quot;../functions/index&quot;&gt; Functions &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4ff2ee154ad899316685f10549fb9107218838aa" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;use&quot;&gt; &amp;laquo; use &lt;/a&gt;|&lt;a href=&quot;with&quot;&gt; with &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;use&quot;&gt; &amp;laquo; use &lt;/a&gt;|&lt;a href=&quot;with&quot;&gt; with &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="39b6c8bd920a46198b95f1bbcf2d8af0fc049433" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;verbatim&quot;&gt; &amp;laquo; verbatim &lt;/a&gt;|&lt;a href=&quot;deprecated&quot;&gt; deprecated &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;verbatim&quot;&gt; &amp;laquo; verbatim &lt;/a&gt;|&lt;a href=&quot;deprecated&quot;&gt; deprecated &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="58ff108035350fd2ef7a60023adedbb92cba7203" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;with&quot;&gt; &amp;laquo; with &lt;/a&gt;|&lt;a href=&quot;../filters/index&quot;&gt; Filters &amp;raquo; &lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;with&quot;&gt; &amp;laquo; with &lt;/a&gt;|&lt;a href=&quot;../filters/index&quot;&gt; Filters &amp;raquo; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7eac074b7f27387856b6bc06e8b305943c3b7dd3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;Hello World&quot;&lt;/code&gt;: Everything between two double or single quotes is a string. They are useful whenever you need a string in the template (for example as arguments to function calls, filters or just to extend or include a template). A string can contain a delimiter if it is preceded by a backslash (&lt;code&gt;\&lt;/code&gt;) -- like in &lt;code&gt;'It\'s good'&lt;/code&gt;. If the string contains a backslash (e.g. &lt;code&gt;'c:\Program Files'&lt;/code&gt;) escape it by doubling it (e.g. &lt;code&gt;'c:\\Program Files'&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;&quot;Hello World&quot;&lt;/code&gt;: Everything between two double or single quotes is a string. They are useful whenever you need a string in the template (for example as arguments to function calls, filters or just to extend or include a template). A string can contain a delimiter if it is preceded by a backslash (&lt;code&gt;\&lt;/code&gt;) -- like in &lt;code&gt;'It\'s good'&lt;/code&gt;. If the string contains a backslash (e.g. &lt;code&gt;'c:\Program Files'&lt;/code&gt;) escape it by doubling it (e.g. &lt;code&gt;'c:\\Program Files'&lt;/code&gt;).</target>
        </trans-unit>
        <trans-unit id="67a456b1f2a350ea1e238988637c27343ce07c6c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%&lt;/code&gt;: Calculates the remainder of an integer division. &lt;code&gt;{{ 11 % 7 }}&lt;/code&gt; is &lt;code&gt;4&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;%&lt;/code&gt;: Calculates the remainder of an integer division. &lt;code&gt;{{ 11 % 7 }}&lt;/code&gt; is &lt;code&gt;4&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="76c670387f6227af7f0dcf7bf27215ca6da0bcd6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(expr)&lt;/code&gt;: Groups an expression.</source>
          <target state="translated">&lt;code&gt;(expr)&lt;/code&gt;: Groups an expression.</target>
        </trans-unit>
        <trans-unit id="7dc558dedb5667491fce06b188a847e0761b0dac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;**&lt;/code&gt;: Raises the left operand to the power of the right operand. &lt;code&gt;{{ 2 **
3 }}&lt;/code&gt; would return &lt;code&gt;8&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;**&lt;/code&gt;: Raises the left operand to the power of the right operand. &lt;code&gt;{{ 2 **
3 }}&lt;/code&gt; would return &lt;code&gt;8&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="3d2b5c057603aa687fd041d7579ce453de9aac62" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;*&lt;/code&gt;: Multiplies the left operand with the right one. &lt;code&gt;{{ 2 * 2 }}&lt;/code&gt; would return &lt;code&gt;4&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt;: Multiplies the left operand with the right one. &lt;code&gt;{{ 2 * 2 }}&lt;/code&gt; would return &lt;code&gt;4&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="ac8ad4158f95f089a57f1195c7d1f3c07ddf8439" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;+&lt;/code&gt;: Adds two objects together (the operands are casted to numbers). &lt;code&gt;{{
1 + 1 }}&lt;/code&gt; is &lt;code&gt;2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;+&lt;/code&gt;: Adds two objects together (the operands are casted to numbers). &lt;code&gt;{{
1 + 1 }}&lt;/code&gt; is &lt;code&gt;2&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="69e3f7bc2724a62821823708504885762eeb017e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;,&lt;/code&gt; as the thousands separator.</source>
          <target state="translated">&lt;code&gt;,&lt;/code&gt; as the thousands separator.</target>
        </trans-unit>
        <trans-unit id="9cdee98c00618154e630150e42faa6f8f1fea5a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-&lt;/code&gt;: Subtracts the second number from the first one. &lt;code&gt;{{ 3 - 2 }}&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;-&lt;/code&gt;: Subtracts the second number from the first one. &lt;code&gt;{{ 3 - 2 }}&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="2df9773b056a11c03c36ba467f921a4ce2970497" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;..&lt;/code&gt;: Creates a sequence based on the operand before and after the operator (this is just syntactic sugar for the &lt;a href=&quot;functions/range&quot;&gt;range&lt;/a&gt; function):</source>
          <target state="translated">&lt;code&gt;..&lt;/code&gt;: Creates a sequence based on the operand before and after the operator (this is just syntactic sugar for the &lt;a href=&quot;functions/range&quot;&gt;range&lt;/a&gt; function):</target>
        </trans-unit>
        <trans-unit id="b0e67803b2f4e163d5945afe61ca13c92ddf0918" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.&lt;/code&gt; as the decimal point.</source>
          <target state="translated">&lt;code&gt;.&lt;/code&gt; as the decimal point.</target>
        </trans-unit>
        <trans-unit id="9bd76b5497b4f08507d0266dde593c90e03c8291" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.&lt;/code&gt;, &lt;code&gt;[]&lt;/code&gt;: Gets an attribute of an object.</source>
          <target state="translated">&lt;code&gt;.&lt;/code&gt;, &lt;code&gt;[]&lt;/code&gt;: Gets an attribute of an object.</target>
        </trans-unit>
        <trans-unit id="2bb1e9c1e54014070b5a34acc1d0a9972b0c7fe4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;//&lt;/code&gt;: Divides two numbers and returns the floored integer result. &lt;code&gt;{{ 20
// 7 }}&lt;/code&gt; is &lt;code&gt;2&lt;/code&gt;, &lt;code&gt;{{ -20  // 7 }}&lt;/code&gt; is &lt;code&gt;-3&lt;/code&gt; (this is just syntactic sugar for the &lt;a href=&quot;filters/round&quot;&gt;round&lt;/a&gt; filter).</source>
          <target state="translated">&lt;code&gt;//&lt;/code&gt;: Divides two numbers and returns the floored integer result. &lt;code&gt;{{ 20
// 7 }}&lt;/code&gt; is &lt;code&gt;2&lt;/code&gt;, &lt;code&gt;{{ -20  // 7 }}&lt;/code&gt; is &lt;code&gt;-3&lt;/code&gt; (this is just syntactic sugar for the &lt;a href=&quot;filters/round&quot;&gt;round&lt;/a&gt; filter).</target>
        </trans-unit>
        <trans-unit id="aed343de284b589f6792a7e52da177a9576b0103" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/&lt;/code&gt;: Divides two numbers. The returned value will be a floating point number. &lt;code&gt;{{ 1 / 2 }}&lt;/code&gt; is &lt;code&gt;{{ 0.5 }}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;/&lt;/code&gt;: Divides two numbers. The returned value will be a floating point number. &lt;code&gt;{{ 1 / 2 }}&lt;/code&gt; is &lt;code&gt;{{ 0.5 }}&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="a16e612d99e3ba5ef070ad0f051089dd866ca0fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;42&lt;/code&gt; / &lt;code&gt;42.23&lt;/code&gt;: Integers and floating point numbers are created by just writing the number down. If a dot is present the number is a float, otherwise an integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a706fb53d1324068d838c6b65333c2e9f2d1f743" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;?:&lt;/code&gt;: The ternary operator:</source>
          <target state="translated">&lt;code&gt;?:&lt;/code&gt;: The ternary operator:</target>
        </trans-unit>
        <trans-unit id="8ba3306623e3b66961a95e4131e5ad88e232bddd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;??&lt;/code&gt;: The null-coalescing operator:</source>
          <target state="translated">&lt;code&gt;??&lt;/code&gt;: The null-coalescing operator:</target>
        </trans-unit>
        <trans-unit id="4d4483144829e0b6b36199f640ed97a9c29399f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Twig_Error&lt;/code&gt;: The base exception for all errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5329e77a3ab992075825dcf12ee070759bd9584" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Twig_Error_Loader&lt;/code&gt;: Thrown when an error occurs during template loading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36694247c54ecb7bcb6981010e258818e809c609" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Twig_Error_Runtime&lt;/code&gt;: Thrown when an error occurs at runtime (when a filter does not exist for instance).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc345fba1a0f2c7f400d2021e09ac828024a3103" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Twig_Error_Syntax&lt;/code&gt;: Thrown to tell the user that there is a problem with the template syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d0dab3a45404c190c7aefcca51513a314de16fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Twig_Loader_Array&lt;/code&gt; loads a template from a PHP array. It's passed an array of strings bound to template names:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff398614316619443713414a90c1d5032def14aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Twig_Loader_Chain&lt;/code&gt; accepts any loader that implements &lt;code&gt;Twig_LoaderInterface&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="666ec4037bfc4e9d0de722f89ed5e57debf8af06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Twig_Loader_Chain&lt;/code&gt; delegates the loading of templates to other loaders:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c3ee64136d743b8f0e89a2ec4726fd64776bac1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Twig_Loader_Filesystem&lt;/code&gt; loads templates from the file system. This loader can find templates in folders on the file system and is the preferred way to load them:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a454dd136ddafece86ee659465ec62911af32548" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Twig_Loader_Filesystem&lt;/code&gt; support absolute and relative paths. Using relative paths is preferred as it makes the cache keys independent of the project root directory (for instance, it allows warming the cache from a build server where the directory might be different from the one used on production servers):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78c4b0c7edcf7a1461dd0dc4d78735624de0d07a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Twig_NodeVisitor_Optimizer::OPTIMIZE_ALL&lt;/code&gt;, enables all optimizations (this is the default value).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3d0a8d747bd3c131c8e61c07af925b02a59b75b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Twig_NodeVisitor_Optimizer::OPTIMIZE_FOR&lt;/code&gt;, optimizes the &lt;code&gt;for&lt;/code&gt; tag by removing the &lt;code&gt;loop&lt;/code&gt; variable creation whenever possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28641a8771513abe6ad6fe7d53580f51a7768aee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Twig_NodeVisitor_Optimizer::OPTIMIZE_NONE&lt;/code&gt;, disables all optimizations. This reduces the compilation time, but it can increase the execution time and the consumed memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="258fc19a834127995bc88894ecc124e8ac4491d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Twig_NodeVisitor_Optimizer::OPTIMIZE_RAW_FILTER&lt;/code&gt;, removes the &lt;code&gt;raw&lt;/code&gt; filter whenever possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a5b6814006830125d9b96ad7050999173b90650" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Twig_NodeVisitor_Optimizer::OPTIMIZE_VAR_ACCESS&lt;/code&gt;, simplifies the creation and access of variables in the compiled templates whenever possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b44d50aca7948ae94e7ffd03b194b40212595a23" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Twig_Sandbox_SecurityError&lt;/code&gt;: Thrown when an unallowed tag, filter, or method is called in a sandboxed template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a894de489ee856d15fe9813fe6483af505bcb323" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Twig_Token::BLOCK_START_TYPE&lt;/code&gt;, &lt;code&gt;Twig_Token::BLOCK_END_TYPE&lt;/code&gt;: Delimiters for blocks (&lt;code&gt;{% %}&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaa9e4485b9506a89604f93421f9fcfe8ee16ec5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Twig_Token::EOF_TYPE&lt;/code&gt;: Ends of template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4413028ab1ab87e8665b313adddc72f4e33b7520" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Twig_Token::INTERPOLATION_START_TYPE&lt;/code&gt;, &lt;code&gt;Twig_Token::INTERPOLATION_END_TYPE&lt;/code&gt;: Delimiters for string interpolation;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8878912125baf8b296d1bf0ed09bce05acd6057f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Twig_Token::NAME_TYPE&lt;/code&gt;: A name in an expression;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08bc5658c032d630a943ca14268f7294e670981b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Twig_Token::NUMBER_TYPE&lt;/code&gt;: A number in an expression;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02aaaef5e3efeef8800705089a06f9df39b8ec22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Twig_Token::OPERATOR_TYPE&lt;/code&gt;: An operator;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d19d5aed13db21524ee11fcc3f725c4582eea75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Twig_Token::PUNCTUATION_TYPE&lt;/code&gt;: A punctuation sign;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45ef985ce2fc6144888317f4b2a279c3469c4fdd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Twig_Token::STRING_TYPE&lt;/code&gt;: A string in an expression;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77b6be30730cf1229f510e8bb5952039fc9e0767" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Twig_Token::TEXT_TYPE&lt;/code&gt;: A text outside an expression;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57c92a0dc9a0ae689f9a81e766216a0384ec6663" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Twig_Token::VAR_START_TYPE&lt;/code&gt;, &lt;code&gt;Twig_Token::VAR_END_TYPE&lt;/code&gt;: Delimiters for variables (&lt;code&gt;{{ }}&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5a0b5e32f24fb0afb94083703d155a532b48d4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[&quot;foo&quot;, &quot;bar&quot;]&lt;/code&gt;: Arrays are defined by a sequence of expressions separated by a comma (&lt;code&gt;,&lt;/code&gt;) and wrapped with squared brackets (&lt;code&gt;[]&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;[&quot;foo&quot;, &quot;bar&quot;]&lt;/code&gt;: Arrays are defined by a sequence of expressions separated by a comma (&lt;code&gt;,&lt;/code&gt;) and wrapped with squared brackets (&lt;code&gt;[]&lt;/code&gt;).</target>
        </trans-unit>
        <trans-unit id="82ff0896ed569eff54417827955cd27ff1419362" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;_charset&lt;/code&gt;: references the current charset.</source>
          <target state="translated">&lt;code&gt;_charset&lt;/code&gt;: references the current charset.</target>
        </trans-unit>
        <trans-unit id="0bae122111862402866865d2a39f65dc61c8f197" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;_context&lt;/code&gt;: references the current context;</source>
          <target state="translated">&lt;code&gt;_context&lt;/code&gt;: references the current context;</target>
        </trans-unit>
        <trans-unit id="ddfb239f5a7e9e7b7853ee154946c850f0769a46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;_self&lt;/code&gt;: references the current template name;</source>
          <target state="translated">&lt;code&gt;_self&lt;/code&gt;: references the current template name;</target>
        </trans-unit>
        <trans-unit id="0cdb80018b98d472f9da9f2154968f58f12e6718" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;addDebugInfo()&lt;/code&gt;: Adds the line of the original template file related to the current node as a comment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c388bf33dc55fbcbd46b92b49692b3a633b944a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;allowable_tags&lt;/code&gt;: Tags which should not be stripped</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b32513b3e1ba982c04115190b5b36fcb9fec2b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;and&lt;/code&gt;: Returns true if the left and the right operands are both true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dc2dd2e6096003c1f1d680fe415e3ae59e2beaa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;auto_reload&lt;/code&gt;&lt;em&gt;boolean&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;auto_reload&lt;/code&gt;&lt;em&gt;boolean&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c3f4984fc137167b054aea3a9c96c16e9cf9b47d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;autoescape&lt;/code&gt;&lt;em&gt;string&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;autoescape&lt;/code&gt;&lt;em&gt;string&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2e31cbe727939990a8ad35acd79bb95818f71748" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;base_template_class&lt;/code&gt;&lt;em&gt;string&lt;/em&gt; (defaults to &lt;code&gt;Twig_Template&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db8391d08d16f4911333c096c22dde1077ccd98f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cache&lt;/code&gt;&lt;em&gt;string&lt;/em&gt; or &lt;code&gt;false&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a87db29648044f6c232f9526bdc465d28d4c33c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ceil&lt;/code&gt; always rounds up;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1095fec08a10f31cbdde9b14988d6a87bed6810f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;character_mask&lt;/code&gt;: The characters to strip</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69ab44ba1560263906b112354df2cf2c6f1f441f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;charset&lt;/code&gt;: The string charset</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a51c991e9e9606e43b36455c4c071f9a84521079" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;charset&lt;/code&gt;&lt;em&gt;string&lt;/em&gt; (defaults to &lt;code&gt;utf-8&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3e5bf7a078b36db933fe48662dcbee8cbb11aaa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;common&lt;/code&gt; rounds either up or down (rounds the value up to precision decimal places away from zero, when it is half way there -- making 1.5 into 2 and -1.5 into -2);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="566426416c5a108c1a8d9f59e7f15db1df99d80b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;constant&lt;/code&gt; checks if a variable has the exact same value as a constant. You can use either global constants or class constants:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4145601e18bcd5ff029315fa26bb588bb4569ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;constant&lt;/code&gt; returns the constant value for a given string:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61a8d878bd6cd3e59405d419092714c1da976443" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;context&lt;/code&gt;: The context to dump</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c54502aa343e0f024ddc97f8281b188bec0aca5b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;css&lt;/code&gt;: escapes a string for the &lt;strong&gt;CSS context&lt;/strong&gt;. CSS escaping can be applied to any string being inserted into CSS and escapes everything except alphanumerics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8767c4ab6e6721f031660b6a0f9f9905355080f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;date&lt;/code&gt;: The date</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c494d2aa6d128157f631ceda8c7caab6aaa22736" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;debug&lt;/code&gt;&lt;em&gt;boolean&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;debug&lt;/code&gt;&lt;em&gt;boolean&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="66541ba41ccb48a464e00e7a9303fe4410b72066" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;decimal&lt;/code&gt;: The number of decimal points to display</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc87128f3a6263ee71f0574e751ad0ae9c9222a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;decimal_point&lt;/code&gt;: The character(s) to use for the decimal point</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cba36dc92c50f95df27bec9e03b04c32297f6ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;default&lt;/code&gt;: The default value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a4f3256c45b0cd856d5c156aad10b15b5aeef15" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;defined&lt;/code&gt; checks if a variable is defined in the current context. This is very useful if you use the &lt;code&gt;strict_variables&lt;/code&gt; option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0749fe159afb905c9ce398b9c4958e7aa466c00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;delimiter&lt;/code&gt;: The delimiter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="886a11a718b30519a7667c488d4cd9f56dd882d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;divisible by&lt;/code&gt; checks if a variable is divisible by a number:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7913c0ebe7934d25832b6b7e66d2838fb5ef38a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;empty&lt;/code&gt; checks if a variable is an empty string, an empty array, an empty hash, exactly &lt;code&gt;false&lt;/code&gt;, or exactly &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45efc35657d78a97a25fb3289beaab5bbe01792b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;even&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; if the given number is even:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33d0568fdf8ebda748b0af928c5b2ab770a89834" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;expect($type[, $value[, $message]])&lt;/code&gt;: If the current token isn't of the given type/value a syntax error is thrown. Otherwise, if the type and value are correct, the token is returned and the stream moves to the next token.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c9bbed1584998b5b7946c92751379946601ab76" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fill&lt;/code&gt;: Used to fill in missing items</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd6cd7e192dfb14cad18563b9021d8e78094f6a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;floor&lt;/code&gt; always rounds down.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e680a7325c2fdcd9264d8ab254e809caf9516cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;foo['bar']&lt;/code&gt; on the other hand only works with PHP arrays:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad50ae9d90fbe139bca0db4b2ccb5a86ed47f186" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;format&lt;/code&gt;: The date format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14df8a7afcfe5b3b38ca4dbc4b5c098d25769c95" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;from&lt;/code&gt;: The input charset</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="318ba115cb8fcb535c471f2921c53092b5c53068" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;from&lt;/code&gt;: The placeholder values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dbf15d32f9adfc327c4c78941fa4706cedc73e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getCurrent()&lt;/code&gt;: Gets the current token in the stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5a16990bed9d4d034500247d7205244fe5520c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;glue&lt;/code&gt;: The separator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f17b4834bae8134c398225b1a5317a565e555514" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;high&lt;/code&gt;: The highest possible value of the sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="024cd34a7876559460cb75970daf30ee2fdf862c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;html&lt;/code&gt;: escapes a string for the &lt;strong&gt;HTML body&lt;/strong&gt; context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd17a21cf59880bd904391b9c988a9e098c83a41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;html_attr&lt;/code&gt;: escapes a string for the &lt;strong&gt;HTML attribute&lt;/strong&gt; context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2138a4f8f7ae546c796255dc823332b536e34c49" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ignore_missing&lt;/code&gt;: Whether to ignore missing templates or not</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0deeb58dea94a0394252c87ed2e810b2abbc2b6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;indent()&lt;/code&gt;: Indents the generated code (see &lt;code&gt;Twig_Node_Block&lt;/code&gt; for a usage example).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47dbf7e6a3c6cc7e2aaa59f8411f0bc0b461c450" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;iterable&lt;/code&gt; checks if a variable is an array or a traversable object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9947b00ca5e2271cbef5298df0cf14565320c92a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;js&lt;/code&gt;: escapes a string for the &lt;strong&gt;JavaScript context&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="976099f1bd00288f13f88ad10df595a6f27c7362" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;length&lt;/code&gt;: The size of the slice</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d20188c45a33f90f77b29cb2069091f2aeea0a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;limit&lt;/code&gt;: The limit argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf748397a29b5a0e69e0a12f5d9c1e1c3ad8d51a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lipsum&lt;/code&gt; is not a language construct;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8401d488236b5f087920d45ea3e66f14fdca1e00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;look()&lt;/code&gt;: Looks at the next token without consuming it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcac0ea0a30847871e06f8d39d3ac4facbbcc5ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;low&lt;/code&gt;: The first value of the sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60f0bcdedd88266e42570874bd6aa1fe4cb0db29" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;max&lt;/code&gt; returns the biggest value of a sequence or a set of values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97a2a642932e8fdf2a47322d31a2126f52a49f20" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;method&lt;/code&gt;: The rounding method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b716430d25875adad89db5f9718c85626b5edf72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;min&lt;/code&gt; returns the lowest value of a sequence or a set of values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9668f33703f87cf462a545e6e185c6e9b4a01f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;modifier&lt;/code&gt;: The modifier</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59b981af45de55021acdf2db944741786b00fe9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt;: The name of the template to read</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3ebe6f2fc5666133b5e76b97a4b1277f6c55f87" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;next()&lt;/code&gt;: Moves to the next token in the stream, &lt;em&gt;but returns the old one&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c91c1700fbfe347771e159e0854527646bdf00a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;none&lt;/code&gt; is an alias for &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff22e0418abeb3148ce98bd86e73bc664506ec04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;not&lt;/code&gt;: Negates a statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8118f6ed8d097463ae564e39837ece8121cc1a4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;null&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; if the variable is &lt;code&gt;null&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d3a9a42fa379eafa065ca61642250fd9936952a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;null&lt;/code&gt;: &lt;code&gt;null&lt;/code&gt; represents no specific value. This is the value returned when a variable does not exist. &lt;code&gt;none&lt;/code&gt; is an alias for &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f5572e5b4e3cde6296c7c5ffd921671bb6217e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;odd&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; if the given number is odd:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a779a195cd577b6f99ca8a5b1e58613dcfaa137f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;optimizations&lt;/code&gt;&lt;em&gt;integer&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;optimizations&lt;/code&gt;&lt;em&gt;integer&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c55e52dc34a92db5ce1368475b7d4dc6c9e47389" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options&lt;/code&gt;: A bitmask of &lt;a href=&quot;https://secure.php.net/manual/en/json.constants.php&quot;&gt;json_encode options&lt;/a&gt; (&lt;code&gt;{{
data|json_encode(constant('JSON_PRETTY_PRINT')) }}&lt;/code&gt;. Combine constants using</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7663fabb56015c937a27304b9323b5f845b6241e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;or&lt;/code&gt;: Returns true if the left or the right operand is true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9091e446a2b7c8437c33f7821d74c9708774031" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;outdent()&lt;/code&gt;: Outdents the generated code (see &lt;code&gt;Twig_Node_Block&lt;/code&gt; for a usage example).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="043e6325fed6877d5183ef9e0fe9ed443f2ba067" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;position&lt;/code&gt;: The cycle position</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f738c558af7ebf4755ba6251278bee5d0c082840" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;precision&lt;/code&gt;: The rounding precision</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dfdbea116002e3b27bf032a86b099ac0eed54e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;preserve_keys&lt;/code&gt;: Preserve keys when reversing a mapping or a sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f223d056c85527a62af1c69b2d413aa1a6bc160" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;preserve_keys&lt;/code&gt;: Whether to preserve key or not (when the input is an array)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59bdfdb819c11f331de7a766257dbe9e3e44c699" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;raw()&lt;/code&gt;: Writes the given string as is.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2ab8d9f237d2d421d78d06710b5892da178061e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;repr()&lt;/code&gt;: Writes a PHP representation of a given value (see &lt;code&gt;Twig_Node_For&lt;/code&gt; for a usage example).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5b8e270329f5f0cde165d6b271799244c41e9ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;same as&lt;/code&gt; checks if a variable is the same as another variable. This is the equivalent to &lt;code&gt;===&lt;/code&gt; in PHP:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea3135cfc0a09129f7de9e7416c7f34f0fc52e8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sandboxed&lt;/code&gt;: Whether to sandbox the template or not</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de09be95802be27db6a35bc7dec22cb6762d8867" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;side&lt;/code&gt;: The default is to strip from the left and the right (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="516f8e7949845a4cfa5d780b37928e56fc3b4225" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size&lt;/code&gt;: The size of the batch; fractional numbers will be rounded up</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4139f6c8c9b486ed80a9f635a2f0778c77548045" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;start&lt;/code&gt;: The start of the slice</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5c6d2b32fb0489380db25654cce6f6c4db594b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;step&lt;/code&gt;: The increment between elements of the sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec2c5593f02b756956fdb1970a9cf0934b9f734a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;strategy&lt;/code&gt;: The escaping strategy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4cdbfaf8516cb606530ac913f64cea3c7f63d04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;strict_variables&lt;/code&gt;&lt;em&gt;boolean&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;strict_variables&lt;/code&gt;&lt;em&gt;boolean&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b4d86e19d90afe3884179a0a1eff94b9a5606a64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string()&lt;/code&gt;: Writes a quoted string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8764d50d296bd7ececd557e129973fbb4b253f04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subcompile()&lt;/code&gt;: Compiles a node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93ec4bef2b12f5bb926c475849965b828f46a864" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template&lt;/code&gt;: The template</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b558c680b216b188e7e5a5bf1ef269ccaa4c85d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template&lt;/code&gt;: The template to render</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c786fc61e5f8020adeed0acc786f1517cfd2bf80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;test($type)&lt;/code&gt;, &lt;code&gt;test($value)&lt;/code&gt; or &lt;code&gt;test($type, $value)&lt;/code&gt;: Determines whether the current token is of a particular type or value (or both). The value may be an array of several possible values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53b9d29f8835ab06b72a7036e04be4908b0c22b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;thousand_sep&lt;/code&gt;: The character(s) to use for the thousands separator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18515e1ba715b12a7bb24e68fdb0d5a189c57f02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timezone&lt;/code&gt;: The date timezone</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5943c94470b33dfa8c0b0d78a33b86ef30f9c0f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timezone&lt;/code&gt;: The timezone</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d478daf942d8af4499b6e2f9ee51c74a63ac9a1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;to&lt;/code&gt;: The output charset</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac4f0a6d4adb86cb0d4a9aaf935c307580d6bd43" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; / &lt;code&gt;false&lt;/code&gt;: &lt;code&gt;true&lt;/code&gt; represents the true value, &lt;code&gt;false&lt;/code&gt; represents the false value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1482161f3592aef782c73e696aecc05f4b8abb97" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;url&lt;/code&gt;: escapes a string for the &lt;strong&gt;URI or parameter contexts&lt;/strong&gt;. This should not be used to escape an entire URI; only a subcomponent being inserted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2552d040120cc9de9e1915b8378def7b9a274d6e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;values&lt;/code&gt;: The values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0df52e9ffaa1102fcdf0d07ef788563e1b9b5f8f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;variables&lt;/code&gt;: The variables to pass to the template</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97ca793c8fc8e2b2854d4775a7bd7f2280a3808f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;with_context&lt;/code&gt;: Whether to pass the current context variables or not</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7db83eaa367bbb4c1245ee71d1b4fb382544531a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;write()&lt;/code&gt;: Writes the given string by adding indentation at the beginning of each line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02058c1e6be3cb925f51dc2a4429812422761078" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{&quot;foo&quot;: &quot;bar&quot;}&lt;/code&gt;: Hashes are defined by a list of keys and values separated by a comma (&lt;code&gt;,&lt;/code&gt;) and wrapped with curly braces (&lt;code&gt;{}&lt;/code&gt;):</source>
          <target state="translated">&lt;code&gt;{&quot;foo&quot;: &quot;bar&quot;}&lt;/code&gt;: Hashes are defined by a list of keys and values separated by a comma (&lt;code&gt;,&lt;/code&gt;) and wrapped with curly braces (&lt;code&gt;{}&lt;/code&gt;):</target>
        </trans-unit>
        <trans-unit id="8660ff42c23922bcd05f7c67432b5cac30108497" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{% %}&lt;/code&gt;: used to execute statements.</source>
          <target state="translated">&lt;code&gt;{% %}&lt;/code&gt;: used to execute statements.</target>
        </trans-unit>
        <trans-unit id="09576fdb009b83f86b6380bbcb6a6b5eb469e166" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{{ }}&lt;/code&gt;: used to print the result of an expression evaluation;</source>
          <target state="translated">&lt;code&gt;{{ }}&lt;/code&gt;: used to print the result of an expression evaluation;</target>
        </trans-unit>
        <trans-unit id="7902afc01917933b363ba1cfc39e37ebbf0fe422" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;|&lt;/code&gt;: Applies a filter.</source>
          <target state="translated">&lt;code&gt;|&lt;/code&gt;: Applies a filter.</target>
        </trans-unit>
        <trans-unit id="9e0195ff816065229cd5af85871720f639f1133e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;~&lt;/code&gt;: Converts all operands into strings and concatenates them. &lt;code&gt;{{ &quot;Hello
&quot; ~ name ~ &quot;!&quot; }}&lt;/code&gt; would return (assuming &lt;code&gt;name&lt;/code&gt; is &lt;code&gt;'John'&lt;/code&gt;) &lt;code&gt;Hello
John!&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;~&lt;/code&gt;: Converts all operands into strings and concatenates them. &lt;code&gt;{{ &quot;Hello
&quot; ~ name ~ &quot;!&quot; }}&lt;/code&gt; would return (assuming &lt;code&gt;name&lt;/code&gt; is &lt;code&gt;'John'&lt;/code&gt;) &lt;code&gt;Hello
John!&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="6b2cdbfe0e81737baad6ea986e8bcc97cf4822f7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Atom&lt;/em&gt; via the &lt;a href=&quot;https://github.com/reesef/php-twig&quot;&gt;PHP-twig for atom&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf97b6d4e57317ff083f3db0e3adc5a22dd5984f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Coda 2&lt;/em&gt; via the &lt;a href=&quot;https://github.com/muxx/Twig-HTML.mode&quot;&gt;other Twig syntax mode&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49bbcee0845768e64e06b8d863fec411c7468d7e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Coda&lt;/em&gt; and &lt;em&gt;SubEthaEdit&lt;/em&gt; via the &lt;a href=&quot;https://github.com/bobthecow/Twig-HTML.mode&quot;&gt;Twig syntax mode&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f827e5b2d94b2394b4fa0d37b2e2c120904b9544" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Eclipse&lt;/em&gt; via the &lt;a href=&quot;https://github.com/pulse00/Twig-Eclipse-Plugin&quot;&gt;Twig plugin&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fab718fb5319fe6abc25162a66cb3c0f71bf1207" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Emacs&lt;/em&gt; via &lt;a href=&quot;http://web-mode.org/&quot;&gt;web-mode.el&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9e6790591155671e32becfea54139628bfe0fd9" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Fast&lt;/em&gt;: Twig compiles templates down to plain optimized PHP code. The overhead compared to regular PHP code was reduced to the very minimum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="644bb1f7c511acce4fbaea8f8de8f6a51b4a7370" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Flexible&lt;/em&gt;: Twig is powered by a flexible lexer and parser. This allows the developer to define their own custom tags and filters, and to create their own DSL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f405311eb35e7a44f513b3afd5686103a05cd1cf" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;GtkSourceView&lt;/em&gt; via the &lt;a href=&quot;https://github.com/gabrielcorpse/gedit-twig-template-language&quot;&gt;Twig language definition&lt;/a&gt; (used by gedit and other projects)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8728690ec33fe976a2ace770d51c29cf40ee280a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Inheritance&lt;/em&gt;: A template &lt;em&gt;extends&lt;/em&gt; a parent template and overrides some blocks;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7556e0a803d3677ca5bc0a999797b522a0cbab9" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Komodo&lt;/em&gt; and &lt;em&gt;Komodo Edit&lt;/em&gt; via the Twig highlight/syntax check mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3961e5c148cea9139269865a7e58244993fab084" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Netbeans&lt;/em&gt; via the &lt;a href=&quot;http://plugins.netbeans.org/plugin/37069/php-twig&quot;&gt;Twig syntax plugin&lt;/a&gt; (until 7.1, native as of 7.2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55884811267a49d7c6951020fa989f7c3db8d278" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Notepad++&lt;/em&gt; via the &lt;a href=&quot;https://github.com/Banane9/notepadplusplus-twig&quot;&gt;Notepad++ Twig Highlighter&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c76f83bc050d05584f27eadf8d652cb73e13dcb" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;PhpStorm&lt;/em&gt; (native as of 2.1)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbbe94cdc957a0b31b48e6ed87bf35c3e018973b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Replacement&lt;/em&gt;: If you use the filesystem loader, Twig loads the first template it finds in a list of configured directories; a template found in a directory &lt;em&gt;replaces&lt;/em&gt; another one from a directory further in the list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec78e5fce8b71edccafc26a589bf93555c8819fe" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Secure&lt;/em&gt;: Twig has a sandbox mode to evaluate untrusted template code. This allows Twig to be used as a template language for applications where users may modify the template design.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1005673ab94ac2fbea98dc473a8d47085a5fcbb" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Sublime Text&lt;/em&gt; via the &lt;a href=&quot;https://github.com/Anomareh/PHP-Twig.tmbundle&quot;&gt;Twig bundle&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f23b9bb5b0bd1b30bcb0a1d5b36b12e4914ea90a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Textmate&lt;/em&gt; via the &lt;a href=&quot;https://github.com/Anomareh/PHP-Twig.tmbundle&quot;&gt;Twig bundle&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1789f90c4413949dd88c06a512a5bdf1114ddee2" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Twig_Extension_Core&lt;/em&gt;: Defines all the core features of Twig.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c60a803a2fea943e9a86387d5b09122546167acf" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Twig_Extension_Escaper&lt;/em&gt;: Adds automatic output-escaping and the possibility to escape/unescape blocks of code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd7e78cd8163b213441f40ea03472a195fc94d4d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Twig_Extension_Optimizer&lt;/em&gt;: Optimizes the node tree before compilation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b5f5dd1af92ad7e795b11c9aec9d34b1ebff699" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Twig_Extension_Profiler&lt;/em&gt;: Enabled the built-in Twig profiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4804bb4d301db60a6eb43343f760ef4e95dc39a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Twig_Extension_Sandbox&lt;/em&gt;: Adds a sandbox mode to the default Twig environment, making it safe to evaluate untrusted code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73633566be03cfd027f710e2e4d94d8f25c113ef" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Vim&lt;/em&gt; via the &lt;a href=&quot;http://jinja.pocoo.org/docs/integration/#vim&quot;&gt;Jinja syntax plugin&lt;/a&gt; or the &lt;a href=&quot;https://github.com/lumiliet/vim-twig&quot;&gt;vim-twig plugin&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2495e8d8f72ff104b72172ab638c4e99a456e87b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Visual Studio Code&lt;/em&gt; via the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=bajdzis.vscode-twig-pack&quot;&gt;Twig pack&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f590b48fc69dfcc7c372467da1823ab26198ea35" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;filter&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;filter&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b0316b1e05af2ac8f5c7c2230ab143f027320de1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;function&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;function&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="07ede4f2c5c32b63c52018a687c24a7a9fc9ee43" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;global&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;global&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ed4a26bd2219a669612e9e3c2b7b5c6da73a19c5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;macro&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;macro&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="329fb0be8efc83873031a165e1d6cda8ca39d02d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;operator&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;operator&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fc5dcfd7fa2c24a533fa19007091483ece18fad4" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;tag&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;tag&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a098a7a90c1a066f05f9dc3183cd1cb9a431e679" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;test&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;test&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8ab5624198f715cc64842a1671d08fa559be738e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Evaluate&lt;/strong&gt; the template: It basically means calling the &lt;code&gt;display()&lt;/code&gt; method of the compiled template and passing it the context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f99f11ba680c92e4084e9a67a5b4d13749339cc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Load&lt;/strong&gt; the template: If the template is already compiled, load it and go to the &lt;em&gt;evaluation&lt;/em&gt; step, otherwise:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6ce555ecf27d61dbfcc5bed59611e89e8d4df57" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;closures&lt;/strong&gt;: Simple to implement;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="344997d286afaa5a924693f6e5851174c2d72c07" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;functions/static methods&lt;/strong&gt;: Simple to implement and fast (used by all Twig core extensions); but it is hard for the runtime to depend on external objects;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be44414b42f51920bf9f02b65dabca69cee2f0bc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;object methods&lt;/strong&gt;: More flexible and required if your runtime code depends on external objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a48e3a013982ce86b77d65aee0fb32ce1057112" translate="yes" xml:space="preserve">
          <source>A block provides a way to change how a certain part of a template is rendered but it does not interfere in any way with the logic around it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baab44730efc2515b4d79e67f8f95a25efc365b7" translate="yes" xml:space="preserve">
          <source>A child template might look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41644a15607ad8b577e757ac190d0b799dcb62ff" translate="yes" xml:space="preserve">
          <source>A control structure refers to all those things that control the flow of a program - conditionals (i.e. &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;elseif&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt;), &lt;code&gt;for&lt;/code&gt;-loops, as well as things like blocks. Control structures appear inside &lt;code&gt;{% ... %}&lt;/code&gt; blocks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5222c0a49ab6d5739e705113a8d8ff63f6d0887d" translate="yes" xml:space="preserve">
          <source>A default value can also be defined for macro arguments when not provided in a macro call:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cb528dcb5c9cca74dc84640f672da0999cfb904" translate="yes" xml:space="preserve">
          <source>A dynamic filter can define more than one dynamic parts:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d429c49e354a1006492382a454968762c1a19102" translate="yes" xml:space="preserve">
          <source>A filter name containing the special &lt;code&gt;*&lt;/code&gt; character is a dynamic filter as the &lt;code&gt;*&lt;/code&gt; can be any string:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc09dc74a2d1f6e901912b73f3fa58ff1a90a56e" translate="yes" xml:space="preserve">
          <source>A flag that indicates which optimizations to apply (default to &lt;code&gt;-1&lt;/code&gt; -- all optimizations are enabled; set it to &lt;code&gt;0&lt;/code&gt; to disable).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1ad7760538498bde9477e80ef6573d835e9959e" translate="yes" xml:space="preserve">
          <source>A global variable is like any other template variable, except that it's available in all templates and macros:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22601ce5c8452cc77789f8e28813a74f070b158c" translate="yes" xml:space="preserve">
          <source>A macro is defined via the &lt;a href=&quot;tags/macro&quot;&gt;macro&lt;/a&gt; tag. Here is a small example (subsequently called &lt;code&gt;forms.html&lt;/code&gt;) of a macro that renders a form element:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d22f4bcd2e83bd0c81adc78392fe7bb86165c18d" translate="yes" xml:space="preserve">
          <source>A profile contains information about time and memory consumption for template, block, and macro executions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82abec751382c73ddbe0e414e0b3a1e22095906d" translate="yes" xml:space="preserve">
          <source>A sequence can be either an array or an object implementing the &lt;code&gt;Traversable&lt;/code&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a990fcb3d5f6df58a19b54d69edadbec46d0abea" translate="yes" xml:space="preserve">
          <source>A template can be customized in two different ways:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dfa5740f5e7b1e6c40d4b2a84679a54fe3cbc9e" translate="yes" xml:space="preserve">
          <source>A template contains &lt;strong&gt;variables&lt;/strong&gt; or &lt;strong&gt;expressions&lt;/strong&gt;, which get replaced with values when the template is evaluated, and &lt;strong&gt;tags&lt;/strong&gt;, which control the logic of the template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2675cb78fe461e1ab586685b1f1befd56b5bd810" translate="yes" xml:space="preserve">
          <source>A template is simply a text file. It can generate any text-based format (HTML, XML, CSV, LaTeX, etc.). It doesn't have a specific extension, &lt;code&gt;.html&lt;/code&gt; or &lt;code&gt;.xml&lt;/code&gt; are just fine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4336f319bcccbf29d698330cf0b70953cab170a4" translate="yes" xml:space="preserve">
          <source>Accessing the parent Context in Nested Loops</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1178a2b0d872c0e7863f6975a16a91251f2429c7" translate="yes" xml:space="preserve">
          <source>Adding a condition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fc2836d2d4d8189a9f3229a87bdb63089561344" translate="yes" xml:space="preserve">
          <source>Adding a tag in an extension can be done by overriding the &lt;code&gt;getTokenParsers()&lt;/code&gt; method. This method must return an array of tags to add to the Twig environment:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6f8ce7b80c049316a2bf46357c5117f1b64b2f2" translate="yes" xml:space="preserve">
          <source>Adding a tag is as simple as calling the &lt;code&gt;addTokenParser&lt;/code&gt; method on the &lt;code&gt;Twig_Environment&lt;/code&gt; instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc33c6eb93ffaa6edfdcc52e77411fd547eceab2" translate="yes" xml:space="preserve">
          <source>After the &lt;code&gt;set&lt;/code&gt; call, the &lt;code&gt;foo&lt;/code&gt; variable is available in the template like any other ones:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f1640cf93f375b54ba7491282068bbb93d4e76c" translate="yes" xml:space="preserve">
          <source>Again, it works, but it looks weird. A filter transforms the passed value to something else but here we use the value to indicate the number of words to generate (so, &lt;code&gt;40&lt;/code&gt; is an argument of the filter, not the value we want to transform).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20986f09976c5c0477bfd60ef87d08c14e2225ed" translate="yes" xml:space="preserve">
          <source>All loaders implement the &lt;code&gt;Twig_LoaderInterface&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4337c2273f6cbfb94fdcadf01dadd1f09383982d" translate="yes" xml:space="preserve">
          <source>All template loaders can cache the compiled templates on the filesystem for future reuse. It speeds up Twig a lot as templates are only compiled once; and the performance boost is even larger if you use a PHP accelerator such as APC. See the &lt;code&gt;cache&lt;/code&gt; and &lt;code&gt;auto_reload&lt;/code&gt; options of &lt;code&gt;Twig_Environment&lt;/code&gt; above for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7561288669145954b170876ce2566a454a1f0fd" translate="yes" xml:space="preserve">
          <source>All the &lt;code&gt;block&lt;/code&gt; tag does is to tell the template engine that a child template may override those portions of the template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb23bc4af1271d89329cb1a26b890e3aad74103d" translate="yes" xml:space="preserve">
          <source>Also you can deprecate a block in the following way:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b93c0bc408b319af0a081f79a8c97cd8cf1301f" translate="yes" xml:space="preserve">
          <source>Also, &lt;a href=&quot;https://twigfiddle.com/&quot;&gt;TwigFiddle&lt;/a&gt; is an online service that allows you to execute Twig templates from a browser; it supports all versions of Twig.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d64478597926444af94eb516059d628d0e84afea" translate="yes" xml:space="preserve">
          <source>Alternatively you can import names from the template into the current namespace:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cd3f686536e1a8a5feef73223de57e1de3c3afd" translate="yes" xml:space="preserve">
          <source>Alternatively, you can import individual macro names from a template into the current namespace via the &lt;a href=&quot;tags/from&quot;&gt;from&lt;/a&gt; tag and optionally alias them:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f3e0777d038437080de7fae66ec93e0eeef3783" translate="yes" xml:space="preserve">
          <source>An absolute path where to store the compiled templates, or &lt;code&gt;false&lt;/code&gt; to disable caching (which is the default).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="001e0fa53d02fa64f509bebb272fffb950b32ef3" translate="yes" xml:space="preserve">
          <source>An extension is a class that implements the following interface:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72013e231dc45052f94b813f04210719a13cee6e" translate="yes" xml:space="preserve">
          <source>And here is how to escape variables included in JavaScript code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12e1a982eb58b05927654644fe66fcc880fe66c8" translate="yes" xml:space="preserve">
          <source>And here is how to use it in a template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6fe04587380e5a62ba1555278d47c8e5b944255" translate="yes" xml:space="preserve">
          <source>And here is the code for &lt;code&gt;vertical_boxes_skeleton.twig&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36050e6e23cbafc55c782796b0c0eddf58d22524" translate="yes" xml:space="preserve">
          <source>And if the expression evaluates to a &lt;code&gt;Twig_Template&lt;/code&gt; or a &lt;code&gt;Twig_TemplateWrapper&lt;/code&gt; instance, Twig will use it directly:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6f04d0927c83a82c1eb6e9dc548ad1c2bafda38" translate="yes" xml:space="preserve">
          <source>And the following template to display all messages in all topics:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbb9fa252e60809efa55a7ad83aea5438ef56753" translate="yes" xml:space="preserve">
          <source>Arguments</source>
          <target state="translated">Arguments</target>
        </trans-unit>
        <trans-unit id="040ed443ab4fd79e3d209b36badedb69fbe56f90" translate="yes" xml:space="preserve">
          <source>Arguments of a macro are always optional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e646603e8d8c75f866daa426b7f32a29c6fd65d2" translate="yes" xml:space="preserve">
          <source>Arrays and hashes can be nested:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da43dabafa3e7e1066b2d90210aae00d40fe1590" translate="yes" xml:space="preserve">
          <source>As a matter of fact, the template name can be any valid expression, such as the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60d4af2021444a8d8bae3ca89173b100f5df0603" translate="yes" xml:space="preserve">
          <source>As a rule of thumb, use functions for frequently used features and global objects for everything else.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8faf22ad587b8068fb8c778bd51400f3da8faa2a" translate="yes" xml:space="preserve">
          <source>As embedded templates do not have &quot;names&quot;, auto-escaping strategies based on the template name won't work as expected if you change the context (for instance, if you embed a CSS/JavaScript template into an HTML one). In that case, explicitly set the default auto-escaping strategy with the &lt;code&gt;autoescape&lt;/code&gt; tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a5434b6014c06b012b48905cb05a3574ae61a62" translate="yes" xml:space="preserve">
          <source>As syntactic sugar, you can also use the &lt;code&gt;[]&lt;/code&gt; notation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef2ce8b617c3dabbb7d8ddc1c811cdbfd82ac5cf" translate="yes" xml:space="preserve">
          <source>As templates are generally stored on the filesystem, Twig also comes with a filesystem loader:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b162cb9a3db0568369f30dabc8925b952214aea9" translate="yes" xml:space="preserve">
          <source>As the resolution of functions and filters is done during compilation, there is no overhead when registering these callbacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7b5ef95ea3e664c909e155001a7d5b2e1984f6e" translate="yes" xml:space="preserve">
          <source>As the stream has a &lt;code&gt;__toString()&lt;/code&gt; method, you can have a textual representation of it by echoing the object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5becfbd63fc2fa3adafdfab34d36a25456768fbb" translate="yes" xml:space="preserve">
          <source>As the template name for the parent can be any valid Twig expression, it's possible to make the inheritance mechanism conditional:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29909a85f8900892eb541f027aefa18d0fce0fd9" translate="yes" xml:space="preserve">
          <source>As you can see in the previous recipe, we reference the template in the exact same way as we would have done it with a regular filesystem loader. This is the key to be able to mix and match templates coming from the database, the filesystem, or any other loader for that matter: the template name should be a logical name, and not the path from the filesystem:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cb099f6e8eeb2d93444d80f05c81eb87e9c997b" translate="yes" xml:space="preserve">
          <source>Automatic Escaping</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a39cfeeebe89147faf69eee8adc690a872cab9bf" translate="yes" xml:space="preserve">
          <source>Automatic escaping is not applied if the last filter in the chain is marked safe for the current context (e.g. &lt;code&gt;html&lt;/code&gt; or &lt;code&gt;js&lt;/code&gt;). &lt;code&gt;escape&lt;/code&gt; and &lt;code&gt;escape('html')&lt;/code&gt; are marked safe for HTML, &lt;code&gt;escape('js')&lt;/code&gt; is marked safe for JavaScript, &lt;code&gt;raw&lt;/code&gt; is marked safe for everything.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a95a93dea4bd76ef1b6385cb96f21a4ab35c02b5" translate="yes" xml:space="preserve">
          <source>Basic API Usage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fcebeefad3cdbbf8733aa928160dec7dc90c1a1" translate="yes" xml:space="preserve">
          <source>Basics</source>
          <target state="translated">Basics</target>
        </trans-unit>
        <trans-unit id="8503764862d5fb3f259084f1f1f824ca4e4e5854" translate="yes" xml:space="preserve">
          <source>Be careful when using the &lt;code&gt;raw&lt;/code&gt; filter inside expressions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dd84aabcec3468fc16cf65177ebfe2a4bca2a32" translate="yes" xml:space="preserve">
          <source>Be warned that named arguments passed to a variadic filter cannot be checked for validity as they will automatically end up in the option array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a64d1c3efe0b5136e8e87c51f07117c9455945f2" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;use&lt;/code&gt; statements are resolved independently of the context passed to the template, the template reference cannot be an expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aaaa72d621b178c6d4fea096e2daeace9123651" translate="yes" xml:space="preserve">
          <source>Before extending Twig, you must understand the differences between all the different possible extension points and when to use them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31d567b0c5a13d010b449bf26ab42c9158eaa357" translate="yes" xml:space="preserve">
          <source>Before writing your own extensions, have a look at the Twig official extension repository: &lt;a href=&quot;https://github.com/twigphp/Twig-extensions&quot;&gt;https://github.com/twigphp/Twig-extensions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e828016ac72660eb882fef90ef09bf394557888" translate="yes" xml:space="preserve">
          <source>Below is a minimal template that illustrates a few basics. We will cover further details later on:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0df383d4e0feb1807cf6bfd346518081aef6280" translate="yes" xml:space="preserve">
          <source>Block Nesting and Scope</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="165742734396b0ef5e028adac4baa2a29de7dece" translate="yes" xml:space="preserve">
          <source>Block Shortcuts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2822d237ce1b5d7940a3f7ee29b09a6a59fa5a6a" translate="yes" xml:space="preserve">
          <source>Block names should consist of alphanumeric characters, and underscores. Dashes are not permitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b45c99b7e2e655ae0e097dcc9f67590cc93aa543" translate="yes" xml:space="preserve">
          <source>Blocks are used for inheritance and act as placeholders and replacements at the same time. They are documented in detail in the documentation for the &lt;a href=&quot;extends&quot;&gt;extends&lt;/a&gt; tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c9f0d001be7e94743eaaacf19d3485d02a206f5" translate="yes" xml:space="preserve">
          <source>Blocks can be nested for more complex layouts. Per default, blocks have access to variables from outer scopes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b03a3cc6ded72f2ac8774da6e07b8b0105a62b55" translate="yes" xml:space="preserve">
          <source>Boolean decision</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86b0d6eb95c3db4d81992dedeb5105051f9d0d45" translate="yes" xml:space="preserve">
          <source>Boolean evaluation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f1f1a237f0e89ebaf2f3bd2bf9e31d13d400bb7" translate="yes" xml:space="preserve">
          <source>Built-in Extensions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14f126509f4335c317af4a2a32904aa83d96efc8" translate="yes" xml:space="preserve">
          <source>Built-in Loaders</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="655a1642bfb010336f36b2774be0af4982945073" translate="yes" xml:space="preserve">
          <source>Built-in escapers cannot be overridden mainly they should be considered as the final implementation and also for better performance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fff6688e0887b9682eb8a82f475996d2ee4e7467" translate="yes" xml:space="preserve">
          <source>But as with PHP functions, macros don't have access to the current template variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc4d6faf3ec2dc32b0b39dd5d3516f5f8fa82c4e" translate="yes" xml:space="preserve">
          <source>But how do you combine both: &lt;em&gt;replace&lt;/em&gt; a template that also extends itself (aka a template in a directory further in the list)?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5766260fddc60d59a594927a796ea29ec334c24" translate="yes" xml:space="preserve">
          <source>By default, a loop iterates over the values of the sequence. You can iterate on keys by using the &lt;code&gt;keys&lt;/code&gt; filter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1b7eab0b2a558465a8058aca84695e2f768a032" translate="yes" xml:space="preserve">
          <source>By default, all optimizations are turned on. You can select the ones you want to enable by passing them to the constructor:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="103ffb60439f0bf5fe8eb8a6d89f56640c56147c" translate="yes" xml:space="preserve">
          <source>By default, auto-escaping uses the &lt;code&gt;html&lt;/code&gt; escaping strategy. If you output variables in other contexts, you need to explicitly escape them with the appropriate escaping strategy:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="841ca308886743182de433a36e60161a852ad2a1" translate="yes" xml:space="preserve">
          <source>By default, included templates have access to the same context as the template which includes them. This means that any variable defined in the main template will be available in the included template too:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32f5c247824d4ac3ebcbfb77dca589496bfacd7b" translate="yes" xml:space="preserve">
          <source>By default, it uses the HTML escaping strategy:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e1bdad7b16ce38d760229a970e648a79a17736f" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;escape&lt;/code&gt; filter uses the &lt;code&gt;html&lt;/code&gt; strategy, but depending on the escaping context, you might want to explicitly use any other available strategies:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef411e1f79631b7502b30fc94d6278bc2ddc7d67" translate="yes" xml:space="preserve">
          <source>By default, the date is displayed by applying the default timezone (the one specified in php.ini or declared in Twig -- see below), but you can override it by explicitly specifying a timezone:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71639d8401d82bd72a5b6d33871fd832e2714359" translate="yes" xml:space="preserve">
          <source>By default, the inner scope has access to the outer scope context; you can disable this behavior by appending the &lt;code&gt;only&lt;/code&gt; keyword:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="694abf09f6ba17b93d23bf9a1a76377be0e6f964" translate="yes" xml:space="preserve">
          <source>By default, the sandbox mode is disabled and should be enabled when including untrusted template code by using the &lt;code&gt;sandbox&lt;/code&gt; tag:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55a89527100d7affacb785a535913eceec75eda6" translate="yes" xml:space="preserve">
          <source>Caution</source>
          <target state="translated">Caution</target>
        </trans-unit>
        <trans-unit id="841ebda6544ddbba69554e4189edb9aa9a579ca2" translate="yes" xml:space="preserve">
          <source>Changing the delimiters of one of the template engines (depending on which engine you introduced last):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="996e31f727a5d55f1c2c9ecc6fab3703f07517ac" translate="yes" xml:space="preserve">
          <source>Child Template</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfa26f82d31c6894fd22c56cda343f490718f895" translate="yes" xml:space="preserve">
          <source>Clause</source>
          <target state="translated">Clause</target>
        </trans-unit>
        <trans-unit id="7ddec538289b11324f7535a727852ccc402681c5" translate="yes" xml:space="preserve">
          <source>Coding Standards</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fce06e20e5f7f74aacccab40b59b75a56c8f7305" translate="yes" xml:space="preserve">
          <source>Comments</source>
          <target state="translated">Comments</target>
        </trans-unit>
        <trans-unit id="e46ee00fde40e955c86abe019a61121e06d653c9" translate="yes" xml:space="preserve">
          <source>Comparisons</source>
          <target state="translated">Comparisons</target>
        </trans-unit>
        <trans-unit id="4159f677a3ba4b1e8e5c8d9e5dcb054853dc4d44" translate="yes" xml:space="preserve">
          <source>Compilation Cache</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8620d3f223635ae2fada6a944bdf7791cdafebad" translate="yes" xml:space="preserve">
          <source>Conditional Inheritance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c4d50a3c4388b60540a6bb6a575b4439ccf09cb" translate="yes" xml:space="preserve">
          <source>Containment Operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="631f756e9a696cb4f11333a23eb74502ab2a1bea" translate="yes" xml:space="preserve">
          <source>Content generation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d39259a09853933576ea9ae7680e4c9db3df385" translate="yes" xml:space="preserve">
          <source>Context-aware Filters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb66e040b1eaaa938975b8930e88b461f54966e0" translate="yes" xml:space="preserve">
          <source>Contrary to what you might think, this template does not define a block conditionally; it just makes overridable by a child template the output of what will be rendered when the condition is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc8212cea50053ea6c5082578330fb7fddacde68" translate="yes" xml:space="preserve">
          <source>Control Structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f643dde3c69f6c516a05419a7bee9eb0c1da0f69" translate="yes" xml:space="preserve">
          <source>Converts an argument to a date to allow date comparison:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="373a9d8ff1daf2670e1db5d6c60706fb56834033" translate="yes" xml:space="preserve">
          <source>Core Extension</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="800e0975533c92d4737ab54b41c79ea48c2c7750" translate="yes" xml:space="preserve">
          <source>Create two &quot;intermediate&quot; base templates that extend the master layout template: one with vertically stacked boxes to be used by the &quot;foo&quot; and &quot;bar&quot; pages and another one with side-by-side boxes for the &quot;boom&quot; and &quot;baz&quot; pages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e812c00b1d029e2bd6da31be4387e9458b3795bb" translate="yes" xml:space="preserve">
          <source>Create your own Loader</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abb89ed86cd9ec0681aceb129a3db464abbc00cc" translate="yes" xml:space="preserve">
          <source>Creating a filter is as simple as associating a name with a PHP callable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d98d225179baa96a9aad75f63fa267228aac2cb2" translate="yes" xml:space="preserve">
          <source>Creating an Extension</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d460cf77255e9f6554f633feff229f0554d49c57" translate="yes" xml:space="preserve">
          <source>Custom Escapers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ce90e18ea78746ba849d8b048e61d6fe6de1823" translate="yes" xml:space="preserve">
          <source>Customizing the Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf68faa05c49a245f705073bbff6d8d1e2d5a664" translate="yes" xml:space="preserve">
          <source>DSL language construct</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="743ac9af736554b327df742c7669732bc225f922" translate="yes" xml:space="preserve">
          <source>Default argument values are defined by using the &lt;code&gt;default&lt;/code&gt; filter in the macro body;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df7276ec51477b766f58425f6f6cd985c15ceb0a" translate="yes" xml:space="preserve">
          <source>Defining a Node</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47298c6c4220f18f8351f766579c44084dc606cc" translate="yes" xml:space="preserve">
          <source>Defining a Node class (responsible for converting the parsed code to PHP);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9ac05668b95495418c92ce13a1ee8531536fc5b" translate="yes" xml:space="preserve">
          <source>Defining a Token Parser</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d22ec582ecbb71c1de058c7096c33d9e79d3afb" translate="yes" xml:space="preserve">
          <source>Defining a Token Parser class (responsible for parsing the template code);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="905a63411289386486912504c2882def0978656b" translate="yes" xml:space="preserve">
          <source>Defining undefined Functions and Filters on the Fly</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42431a70f7d6a713149aa76e7833d14debec6945" translate="yes" xml:space="preserve">
          <source>Definition vs Runtime</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c7548801bdb83424b41bc768fefa021c6bfa539" translate="yes" xml:space="preserve">
          <source>Deprecated Filters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfb7e90012ebb9cf373e81f8c8ae797fe4e8bf5b" translate="yes" xml:space="preserve">
          <source>Deprecated features generate deprecation notices (via a call to the &lt;code&gt;trigger_error()&lt;/code&gt; PHP function). By default, they are silenced and never displayed nor logged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="95a04d79c1def5970f9d3ed416baab23f7ca1ba3" translate="yes" xml:space="preserve">
          <source>Displaying Deprecation Notices</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70bdeb4bde64edbddb2c9890467abaa39f9ff863" translate="yes" xml:space="preserve">
          <source>Do not put any spaces after an opening parenthesis and before a closing parenthesis in expressions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b54b07578e66332ed94b1360d985511a91c57498" translate="yes" xml:space="preserve">
          <source>Do not put any spaces before and after string delimiters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad513610c4e1cca7668e0fcbc4fbb412aa032171" translate="yes" xml:space="preserve">
          <source>Do not put any spaces before and after the following operators: &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;..&lt;/code&gt;, &lt;code&gt;[]&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c9a4a876054cecb973a2f5e467a1b18ed3f4f36" translate="yes" xml:space="preserve">
          <source>Do not put any spaces before and after the opening and the closing of arrays and hashes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1148410eb402bec176a0f348c903944c39cd5f7e" translate="yes" xml:space="preserve">
          <source>Do not put any spaces before and after the parenthesis used for filter and function calls:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="859bdc1b54392984bc364ffe503b536cb9710f3e" translate="yes" xml:space="preserve">
          <source>Dynamic Filters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a09e59843e185b728305864a15de2bcd038b41e9" translate="yes" xml:space="preserve">
          <source>Dynamic Inheritance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92642574d257034abe629dc675e85aade352df2c" translate="yes" xml:space="preserve">
          <source>Each function and filter documentation page has a section where the names of all arguments are listed when supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ec3c773b895dade597b0e8ba5f5323cc3c86d20" translate="yes" xml:space="preserve">
          <source>Echoing the node object gives you a nice representation of the tree:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98b5ec53a59036c75459467bcfa063b11065abb6" translate="yes" xml:space="preserve">
          <source>Embed the markup for the top/bottom and left/right boxes into each page template directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95e1752eccc38d5ee799e62cfff0d6c30ca5ac2d" translate="yes" xml:space="preserve">
          <source>Environment Options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4135099ad3e0fd72e4307a01269675a7943c0945" translate="yes" xml:space="preserve">
          <source>Environment-aware Filters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4528d41a236473327873f18599a03820aa54049" translate="yes" xml:space="preserve">
          <source>Escaper Extension</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2779ea444cb47200f1b0085d04662b33c09fc23f" translate="yes" xml:space="preserve">
          <source>Escaping</source>
          <target state="translated">Escaping</target>
        </trans-unit>
        <trans-unit id="2f64df555761fcd513351bd487c6cb34c6170a2e" translate="yes" xml:space="preserve">
          <source>Escaping is applied before printing, after any other filter is applied:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea4c96b7b87934975a46907d0a6763eba0657e46" translate="yes" xml:space="preserve">
          <source>Escaping the AngularJS delimiters by wrapping AngularJS sections with the &lt;code&gt;{% verbatim %}&lt;/code&gt; tag or by escaping each delimiter via &lt;code&gt;{{ '{{' }}&lt;/code&gt; and &lt;code&gt;{{ '}}' }}&lt;/code&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4109704b90ce02d40973a45a504a9806c5827f0a" translate="yes" xml:space="preserve">
          <source>Escaping works by piping the variable through the &lt;a href=&quot;filters/escape&quot;&gt;escape&lt;/a&gt; or &lt;code&gt;e&lt;/code&gt; filter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60697050c60f954e23935fccbfbe6531b3962e98" translate="yes" xml:space="preserve">
          <source>Even if you will probably always use the &lt;code&gt;template_from_string&lt;/code&gt; function with the &lt;code&gt;include&lt;/code&gt; function, you can use it with any tag or function that takes a template as an argument (like the &lt;code&gt;embed&lt;/code&gt; or &lt;code&gt;extends&lt;/code&gt; tags).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7edd162b60dd14999cf4e788e10ae0d17e0f0fb" translate="yes" xml:space="preserve">
          <source>Even when enabled, the &lt;code&gt;dump&lt;/code&gt; function won't display anything if the &lt;code&gt;debug&lt;/code&gt; option on the environment is not enabled (to avoid leaking debug information on a production server).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1399855e39585fbfffca02adb295237939b20ed" translate="yes" xml:space="preserve">
          <source>Eventually, the &lt;em&gt;compiler&lt;/em&gt; transforms the AST into PHP code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd3dfbe79fda3a9d92de67b1bd4f1dc9f60ab723" translate="yes" xml:space="preserve">
          <source>Exceptions</source>
          <target state="translated">Exceptions</target>
        </trans-unit>
        <trans-unit id="ae5fccd8dcd8fc317f8edfc8259af86cd2967a29" translate="yes" xml:space="preserve">
          <source>Expressions</source>
          <target state="translated">Expressions</target>
        </trans-unit>
        <trans-unit id="16940240239ca65d46884627794c5f81839963a3" translate="yes" xml:space="preserve">
          <source>Expressions which the result is always a literal or a variable marked safe are never automatically escaped:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7964234568085623be599dd2d3496aaf2d0acb52" translate="yes" xml:space="preserve">
          <source>Extending Twig</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="656bcfe284e2da39c77d4fdab55b16ad3c654719" translate="yes" xml:space="preserve">
          <source>Extensions</source>
          <target state="translated">Extensions</target>
        </trans-unit>
        <trans-unit id="9ea10b18d2beb6235355dd68071716da6450e30e" translate="yes" xml:space="preserve">
          <source>Filter sections allow you to apply regular Twig filters on a block of template data. Just wrap the code in the special &lt;code&gt;filter&lt;/code&gt; section:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96e578211aa295317cf257310712fa28ccd8f6c6" translate="yes" xml:space="preserve">
          <source>Filters</source>
          <target state="translated">Filters</target>
        </trans-unit>
        <trans-unit id="799374271dcfc303126933d2bada076ea844693f" translate="yes" xml:space="preserve">
          <source>Filters that accept arguments have parentheses around the arguments. This example will join a list by commas:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cd349b356a3bb03dc3bb82904949d1c0f6cb19c" translate="yes" xml:space="preserve">
          <source>Finally, here is an example on how you can use it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4529581f9e01417597653686a60438a8befc4187" translate="yes" xml:space="preserve">
          <source>First, let's create a temporary in-memory SQLite3 database to work with:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee292aefdda70ed92b3e6075b629adfda3afe738" translate="yes" xml:space="preserve">
          <source>First, remember that Twig has two main language constructs:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ff3c8bbfbea6b5841dbe5d64cf994f4003537dd" translate="yes" xml:space="preserve">
          <source>First, the &lt;strong&gt;lexer&lt;/strong&gt; tokenizes the template source code into small pieces for easier processing;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2c0c18e56245083bca0a54db22916649a6e924b" translate="yes" xml:space="preserve">
          <source>Fixtures examples can be found within the Twig repository &lt;a href=&quot;https://github.com/twigphp/Twig/tree/2.x/test/Twig/Tests/Fixtures&quot;&gt;tests/Twig/Fixtures&lt;/a&gt; directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="225a2ef3c417130113dac554a2682a7011fd9350" translate="yes" xml:space="preserve">
          <source>For AngularJS, change the interpolation tags using the &lt;code&gt;interpolateProvider&lt;/code&gt; service, for instance at the module initialization time:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccb5b3fea058adb3aef0ffcd2abc6270115cdab4" translate="yes" xml:space="preserve">
          <source>For Twig, change the delimiters via the &lt;code&gt;tag_variable&lt;/code&gt; Lexer option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b863c75c0f9a9178ae396e17f15f21d3daccc0a9" translate="yes" xml:space="preserve">
          <source>For bigger sections it makes sense to mark a block &lt;a href=&quot;tags/verbatim&quot;&gt;verbatim&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11c38d1ed96e3e89a018e63af5b8cb4ff8b2fd0b" translate="yes" xml:space="preserve">
          <source>For blocks with little content, it's possible to use a shortcut syntax. The following constructs do the same thing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b985650ed7d553e703986182e8d4fdc315209f29" translate="yes" xml:space="preserve">
          <source>For complex string comparisons, the &lt;code&gt;matches&lt;/code&gt; operator allows you to use &lt;a href=&quot;https://secure.php.net/manual/en/pcre.pattern.php&quot;&gt;regular expressions&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ad460cf92922f20a5ee3885b1365dd4e6b40629" translate="yes" xml:space="preserve">
          <source>For convenience's sake &lt;code&gt;foo.bar&lt;/code&gt; does the following things on the PHP layer:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77d39edb7ffbcade3a337ec5fa10e41c0f743866" translate="yes" xml:space="preserve">
          <source>For convenience, the &lt;code&gt;e&lt;/code&gt; filter is defined as an alias:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99f127d620f201056066322b1fd124205a863f25" translate="yes" xml:space="preserve">
          <source>For example, to display a list of users provided in a variable called &lt;code&gt;users&lt;/code&gt;, use the &lt;a href=&quot;tags/for&quot;&gt;for&lt;/a&gt; tag:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a83d7d6b58b115f9865b98a13d833d762f65ac0" translate="yes" xml:space="preserve">
          <source>For filters, register callbacks with &lt;code&gt;registerUndefinedFilterCallback()&lt;/code&gt;. For functions, use &lt;code&gt;registerUndefinedFunctionCallback()&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3a044680fcf002d4c4ca6d485a689a3b93b93e4" translate="yes" xml:space="preserve">
          <source>For hashes, the merging process occurs on the keys: if the key does not already exist, it is added but if the key already exists, its value is overridden.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a0ea4124fb537f4aa32e1a1bb44f6f2e65e163a" translate="yes" xml:space="preserve">
          <source>For instance, the &lt;code&gt;range&lt;/code&gt; function returns a list containing an arithmetic progression of integers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="399f6a17cbccd7f3c3b6129fcd8a9099b916ad94" translate="yes" xml:space="preserve">
          <source>For instance, the following code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4bc1ad9b4c9279d684b83c3f6470896fb1e2108" translate="yes" xml:space="preserve">
          <source>For more information on whitespace control, read the &lt;a href=&quot;../templates#templates-whitespace-control&quot;&gt;dedicated section&lt;/a&gt; of the documentation and learn how you can also use the whitespace control modifier on your tags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42f22176cb9f08b67bb5d715a1ade54c538077b7" translate="yes" xml:space="preserve">
          <source>For multiple branches &lt;code&gt;elseif&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt; can be used like in PHP. You can use more complex &lt;code&gt;expressions&lt;/code&gt; there too:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da88edff7f7011a22060e83a26a200191c86a310" translate="yes" xml:space="preserve">
          <source>For multiple conditions, &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt; can be used:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd02eaa57d14e5cf25af74ec2660a02d47dd4413" translate="yes" xml:space="preserve">
          <source>For objects that implement the &lt;code&gt;Countable&lt;/code&gt; interface, &lt;code&gt;empty&lt;/code&gt; will check the return value of the &lt;code&gt;count()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92c71a41058f9d5ba0a127eee7360701feb144a2" translate="yes" xml:space="preserve">
          <source>For objects that implement the &lt;code&gt;Countable&lt;/code&gt; interface, &lt;code&gt;length&lt;/code&gt; will use the return value of the &lt;code&gt;count()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b532c7ad7e4cde77196b6561d2170cf1ddd8900" translate="yes" xml:space="preserve">
          <source>For objects that implement the &lt;code&gt;IteratorAggregate&lt;/code&gt; interface, &lt;code&gt;length&lt;/code&gt; will use the return value of the &lt;code&gt;iterator_count()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51d4918c314766f8ed9f7379f302728625cd859d" translate="yes" xml:space="preserve">
          <source>For objects that implement the &lt;code&gt;__toString()&lt;/code&gt; magic method (and not &lt;code&gt;Countable&lt;/code&gt;), it will check if an empty string is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6596e8998c16d51669cd74569a4cd3a9863cd0ff" translate="yes" xml:space="preserve">
          <source>For objects that implement the &lt;code&gt;__toString()&lt;/code&gt; magic method (and not &lt;code&gt;Countable&lt;/code&gt;), it will return the length of the string provided by that method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfbc45ea8e894c24a6f0bf04da80c66fde4abc58" translate="yes" xml:space="preserve">
          <source>For sequences and mappings, numeric keys are not preserved. To reverse them as well, pass &lt;code&gt;true&lt;/code&gt; as an argument to the &lt;code&gt;reverse&lt;/code&gt; filter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87f1c90681e23f5246f99ac4fbe5903d80b2a7c5" translate="yes" xml:space="preserve">
          <source>From PHP, it's also possible to load a template stored in a string via &lt;code&gt;Twig_Environment::createTemplate()&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34a48677f4f35ffd8b3e0a61ceee7e3cd351710b" translate="yes" xml:space="preserve">
          <source>From a template, you can easily load a template stored in a string via the &lt;code&gt;template_from_string&lt;/code&gt; function (via the &lt;code&gt;Twig_Extension_StringLoader&lt;/code&gt; extension):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc8cc17fb9092b97f58b24c8584410fc2ce9317e" translate="yes" xml:space="preserve">
          <source>Functional Tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483" translate="yes" xml:space="preserve">
          <source>Functions</source>
          <target state="translated">Functions</target>
        </trans-unit>
        <trans-unit id="099ba5d46d6df85bfe3e60660754781dfa985114" translate="yes" xml:space="preserve">
          <source>Functions are defined in the exact same way as filters, but you need to create an instance of &lt;code&gt;Twig_Function&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0824da2339605ae886359ab9acbfde0844e1a62b" translate="yes" xml:space="preserve">
          <source>Functions can be called to generate content. Functions are called by their name followed by parentheses (&lt;code&gt;()&lt;/code&gt;) and may have arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b31d6aceaf53bed426201a6a7a6b2394f4ab59d1" translate="yes" xml:space="preserve">
          <source>Functions can be registered in an extension via the &lt;code&gt;getFunctions()&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5508f385c620a7d7dd8a7266ee4911fb4a47082d" translate="yes" xml:space="preserve">
          <source>Functions returning template data (like &lt;a href=&quot;macro&quot;&gt;macros&lt;/a&gt; and &lt;a href=&quot;../functions/parent&quot;&gt;parent&lt;/a&gt;) always return safe markup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93a657eb8ec28f46011330cca8182b513c636ba2" translate="yes" xml:space="preserve">
          <source>Functions support the same features as filters, except for the &lt;code&gt;pre_escape&lt;/code&gt; and &lt;code&gt;preserves_safety&lt;/code&gt; options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ff4e53e2b802e1ec127c83da80fa5fc4b5333fa" translate="yes" xml:space="preserve">
          <source>Global Variables</source>
          <target state="translated">글로벌 변수</target>
        </trans-unit>
        <trans-unit id="9d4bc0bc987de9636524d7da4c675ef8f0f47eac" translate="yes" xml:space="preserve">
          <source>Global variables can be registered in an extension via the &lt;code&gt;getGlobals()&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f827c66e7e04723ed3fa1ab0945dff3f10b9b83" translate="yes" xml:space="preserve">
          <source>Globals</source>
          <target state="translated">Globals</target>
        </trans-unit>
        <trans-unit id="b343dc194be203c0bd103ca64fcd845a7a3f16d3" translate="yes" xml:space="preserve">
          <source>Go to the &lt;a href=&quot;filters/index&quot;&gt;filters&lt;/a&gt; page to learn more about built-in filters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccdb52d803e4402b8022dce86e44c59ba6f83b61" translate="yes" xml:space="preserve">
          <source>Go to the &lt;a href=&quot;functions/index&quot;&gt;functions&lt;/a&gt; page to learn more about the built-in functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddc0361a2caee889a00ed6ce5b69051a5c3fde25" translate="yes" xml:space="preserve">
          <source>Go to the &lt;a href=&quot;tags/index&quot;&gt;tags&lt;/a&gt; page to learn more about the built-in tags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bf0a9906249c21eb4884e6ca9233b814356e0fa" translate="yes" xml:space="preserve">
          <source>Go to the &lt;a href=&quot;tests/index&quot;&gt;tests&lt;/a&gt; page to learn more about the built-in tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24612093a73d54eb6853f0fcb0bdb396d8b5d87d" translate="yes" xml:space="preserve">
          <source>HTML Escaping</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c93af1b41ff6e1fdc7f90079941d676aec8009d" translate="yes" xml:space="preserve">
          <source>Helper object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3af2f5f95b4f2b1acf0ff9aaa2dc7755a9f92cbe" translate="yes" xml:space="preserve">
          <source>Here are some configuration example that simulates some other template engines syntax:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fb0b795174a34374ba6774b7f2f95ce57b12302" translate="yes" xml:space="preserve">
          <source>Here is a list of the built-in loaders Twig provides:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14f0acd2f36883130e4f7dc146c85c8bf3e075a2" translate="yes" xml:space="preserve">
          <source>Here is a small example of a macro that renders a form element:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd701e1c823f01c43e6a693a1c3a57ee3e18f8a6" translate="yes" xml:space="preserve">
          <source>Here is how you can assign the &lt;code&gt;bar&lt;/code&gt; value to the &lt;code&gt;foo&lt;/code&gt; variable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69edf9db3f16dbd6ad2d5a4214517d0359383a67" translate="yes" xml:space="preserve">
          <source>Here is the output for the &lt;code&gt;Hello {{ name }}&lt;/code&gt; template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a40885bc69090dd9c2fb3dce0e208a40f9d0dec" translate="yes" xml:space="preserve">
          <source>Here we go. For this specific example, the creation of a function is the extension point to use. And you can use it anywhere an expression is accepted:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75a62b2bbefcbeb9b7dcf549759cd331a77f05b1" translate="yes" xml:space="preserve">
          <source>Here, we have overloaded the built-in &lt;code&gt;date&lt;/code&gt; filter with a custom one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01fcaab35f4daaa17192f10fc17d5113372142e1" translate="yes" xml:space="preserve">
          <source>Horizontal reuse is a way to achieve the same goal as multiple inheritance, but without the associated complexity:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5a8770fc8f04db7b93bc442a4f3439aff4a5086" translate="yes" xml:space="preserve">
          <source>Horizontal reuse is an advanced Twig feature that is hardly ever needed in regular templates. It is mainly used by projects that need to make template blocks reusable without using inheritance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94e91fe754365a152716d74a76da574eb5bcb330" translate="yes" xml:space="preserve">
          <source>How do blocks work?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6709f6a536cf9e9375fd94d5932aa7239cf4f4f" translate="yes" xml:space="preserve">
          <source>How does Twig work?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0856fb43e7a0db78ee578f5a7a193daa428634e0" translate="yes" xml:space="preserve">
          <source>How often?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="495717ac95d280ac3d46685e2cbf6f8246157ddc" translate="yes" xml:space="preserve">
          <source>However, this code won't find all deprecations (like using deprecated some Twig classes). To catch all notices, register a custom error handler like the one below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14621b0619258cfafac55a7426846c43afd25f60" translate="yes" xml:space="preserve">
          <source>IDEs Integration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44f654e04913eaa2a4671483612726fa96e95403" translate="yes" xml:space="preserve">
          <source>INF (Infinity)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02915466d5bc7de8498733d2aef6c0c8d886aae6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ignore missing&lt;/code&gt; is given, it will fall back to rendering nothing if none of the templates exist, otherwise it will throw an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40e1523ee3fc08abda00b4fea6fd3fb7708406b3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ignore_missing&lt;/code&gt; is set, it will fall back to rendering nothing if none of the templates exist, otherwise it will throw an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71d79d8a89b6b40a2f487b338f3d17f6e07513e4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;limit&lt;/code&gt; is negative, all components except the last -limit are returned;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72c96a56a8ea178d0b41772e6e26a5ea94e6c9e4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;limit&lt;/code&gt; is positive, the returned array will contain a maximum of limit elements with the last element containing the rest of string;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f91a9e003b2a6ce571cccdacc41fd8487ee3b45b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;limit&lt;/code&gt; is zero, then this is treated as 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="125458410e3b41bde5d593d4e3f8006456f20dd5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;var&lt;/code&gt; evaluates to &lt;code&gt;index&lt;/code&gt;, the &lt;code&gt;index_foo.html&lt;/code&gt; template will be rendered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83090575960d1a3c44874b605102b8207c5a1f27" translate="yes" xml:space="preserve">
          <source>If a template defines blocks, they can be rendered individually via the &lt;code&gt;renderBlock()&lt;/code&gt; call:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd3ce215ac3aee385cdfb649a61a314bd6bc67e0" translate="yes" xml:space="preserve">
          <source>If a variable or attribute does not exist, you will receive a &lt;code&gt;null&lt;/code&gt; value when the &lt;code&gt;strict_variables&lt;/code&gt; option is set to &lt;code&gt;false&lt;/code&gt;; alternatively, if &lt;code&gt;strict_variables&lt;/code&gt; is set, Twig will throw an error (see &lt;a href=&quot;api#environment-options&quot;&gt;environment options&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c65708b7fe2597cb2e7d3639f90f6352e9734f3" translate="yes" xml:space="preserve">
          <source>If automatic escaping is enabled, the output of the filter may be escaped before printing. If your filter acts as an escaper (or explicitly outputs HTML or JavaScript code), you will want the raw output to be printed. In such a case, set the &lt;code&gt;is_safe&lt;/code&gt; option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3380528f49168c9b0f5336fd0e4b3702939e243" translate="yes" xml:space="preserve">
          <source>If extra positional arguments are passed to a macro call, they end up in the special &lt;code&gt;varargs&lt;/code&gt; variable as a list of values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaef7352ea4ceeef52d446b235cea3cf137d2954" translate="yes" xml:space="preserve">
          <source>If extra positional arguments are passed to a macro, they end up in the special &lt;code&gt;varargs&lt;/code&gt; variable as a list of values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="283b71b89029e7fd1deb1a026df4463d5e9b1ad5" translate="yes" xml:space="preserve">
          <source>If length is given and is positive, then the sequence will have up to that many elements in it. If the variable is shorter than the length, then only the available variable elements will be present. If length is given and is negative then the sequence will stop that many elements from the end of the variable. If it is omitted, then the sequence will have everything from offset up until the end of the variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cadddc30a0145dfb93312d2dddef4941a30b78de" translate="yes" xml:space="preserve">
          <source>If macros are defined and used in the same template, you can use the special &lt;code&gt;_self&lt;/code&gt; variable to import them:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd8b1fccaabf9b52169080a7dd167e0b7dc9fad8" translate="yes" xml:space="preserve">
          <source>If manual escaping is enabled, it is &lt;strong&gt;your&lt;/strong&gt; responsibility to escape variables if needed. What to escape? Any variable you don't trust.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="981dc93ab57bc83fbcffa86164f1a5ed31b06044" translate="yes" xml:space="preserve">
          <source>If no argument is passed, the function returns the current date:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b98716d7d00505a22cb3761673ab8a504b297e7" translate="yes" xml:space="preserve">
          <source>If no format is provided, Twig will use the default one: &lt;code&gt;F j, Y H:i&lt;/code&gt;. This default can be easily changed by calling the &lt;code&gt;setDateFormat()&lt;/code&gt; method on the &lt;code&gt;core&lt;/code&gt; extension instance. The first argument is the default format for dates and the second one is the default format for date intervals:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8b9cac8fa55f45cece3fdcb1c574834a54629ba" translate="yes" xml:space="preserve">
          <source>If no formatting options are provided then Twig will use the default formatting options of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80e616990e4d6d5c2c47f0e9c50eb0f73f812f22" translate="yes" xml:space="preserve">
          <source>If no iteration took place because the sequence was empty, you can render a replacement block by using &lt;code&gt;else&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19f1b448d6eb97106538e78690ce9572389c5528" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;false&lt;/code&gt;, Twig will silently ignore invalid variables (variables and or attributes/methods that do not exist) and replace them with a &lt;code&gt;null&lt;/code&gt; value. When set to &lt;code&gt;true&lt;/code&gt;, Twig throws an exception instead (default to &lt;code&gt;false&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ffc7170c90ce1e21dc444c1052165fe1ac21a18" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;html&lt;/code&gt;, all variables in templates are escaped (using the &lt;code&gt;html&lt;/code&gt; escaping strategy), except those using the &lt;code&gt;raw&lt;/code&gt; filter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc5bd388756b3ec79dbd8dab347bca097a4b243e" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;delimiter&lt;/code&gt; is an empty string, then value will be split by equal chunks. Length is set by the &lt;code&gt;limit&lt;/code&gt; argument (one character by default).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5b43a7fafd96e6c65b23b62316b452bc9d21d81" translate="yes" xml:space="preserve">
          <source>If the callable is not able to return a valid function (or filter), it must return &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f580992476b0f175ded9807c92f6906ac9e232ce" translate="yes" xml:space="preserve">
          <source>If the date is already a DateTime object, and if you want to keep its current timezone, pass &lt;code&gt;false&lt;/code&gt; as the timezone value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="763109bd3ec4e44b7c7a175e4e524ab5ce9cfc8f" translate="yes" xml:space="preserve">
          <source>If the start is non-negative, the sequence will start at that start in the variable. If start is negative, the sequence will start that far from the end of the variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="776bdde32eb152d71b763cd9e8f76e6527bc1922" translate="yes" xml:space="preserve">
          <source>If the value passed to the &lt;code&gt;date&lt;/code&gt; filter is &lt;code&gt;null&lt;/code&gt;, it will return the current date by default. If an empty string is desired instead of the current date, use a ternary operator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6364fb6ad82d380986be6e33eb15612efd9751ba" translate="yes" xml:space="preserve">
          <source>If the variable evaluates to a &lt;code&gt;Twig_Template&lt;/code&gt; or a &lt;code&gt;Twig_TemplateWrapper&lt;/code&gt; instance, Twig will use it as the parent template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acbb3d306eac5cfa23ba5a5452ec55607530a4ce" translate="yes" xml:space="preserve">
          <source>If you are developing a CMS, templates are usually stored in a database. This recipe gives you a simple PDO template loader you can use as a starting point for your own.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe3e0353290e1adfae0c5bf4bcabb224e978038e" translate="yes" xml:space="preserve">
          <source>If you are looking for new tags, filters, or functions, have a look at the Twig official &lt;a href=&quot;https://github.com/twigphp/Twig-extensions&quot;&gt;extension repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f984ac5fece17d54183fea76662f3ed3a2a5db9" translate="yes" xml:space="preserve">
          <source>If you are using the filesystem loader, the templates are looked for in the paths defined by it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3630fac6fac3817c33b4afca4d3e502839b199f1" translate="yes" xml:space="preserve">
          <source>If you do need to iterate over a sequence of numbers, you can use the &lt;code&gt;..&lt;/code&gt; operator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6a9be3cfbd3f5a407c0bebddedaae85e4aba4a8" translate="yes" xml:space="preserve">
          <source>If you do the same on the &lt;code&gt;Twig_Environment&lt;/code&gt; itself, beware that it takes precedence over any other registered extensions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57c87ce604c0227c8b1d1ac8c4b605f8328c3ee8" translate="yes" xml:space="preserve">
          <source>If you don't pass any value, all variables from the current context are dumped:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ea2dd5f3cf1cea30fa8929eaf91cca6f3dda631" translate="yes" xml:space="preserve">
          <source>If you enable automatic output escaping, Twig will only consider the content to be safe when capturing chunks of text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b50172839954bc46cb0d41f334f3dbcb13ef00e" translate="yes" xml:space="preserve">
          <source>If you have any exposure to other text-based template languages, such as Smarty, Django, or Jinja, you should feel right at home with Twig. It's both designer and developer friendly by sticking to PHP's principles and adding functionality useful for templating environments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6e129bd0a50c98dfb9e4295e0775d1c794ae1db" translate="yes" xml:space="preserve">
          <source>If you iterate over a set of files, you can pass the filename to the &lt;code&gt;tokenize()&lt;/code&gt; method to get the filename in the exception message:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="991969d3f5904e056927cfbb875a45c2b7319022" translate="yes" xml:space="preserve">
          <source>If you register more than one callback, Twig will call them in turn until one does not return &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae8f00d028882b92a272a0808d7a8c8b39dfce79" translate="yes" xml:space="preserve">
          <source>If you render this template, the result would be exactly the same with or without the &lt;code&gt;block&lt;/code&gt; tag. The &lt;code&gt;block&lt;/code&gt; inside the &lt;code&gt;for&lt;/code&gt; loop is just a way to make it overridable by a child template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="557ba85de404f2334ddf98824f5343df983772a0" translate="yes" xml:space="preserve">
          <source>If you want the output to be displayed conditionally, use the following instead:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9676e911d28059a2275ef920bfb099a09f780bd" translate="yes" xml:space="preserve">
          <source>If you want to access a dynamic attribute of a variable, use the &lt;a href=&quot;functions/attribute&quot;&gt;attribute&lt;/a&gt; function instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8d5e56c6caad2b5892f1b1571abba40236836b8" translate="yes" xml:space="preserve">
          <source>If you want to access the current context in your filter, set the &lt;code&gt;needs_context&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt;; Twig will pass the current context as the first argument to the filter call (or the second one if &lt;code&gt;needs_environment&lt;/code&gt; is also set to &lt;code&gt;true&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3e2d240ca7cca8e7bbbd8f8afa99eed42699aa2" translate="yes" xml:space="preserve">
          <source>If you want to access the current environment instance in your filter, set the &lt;code&gt;needs_environment&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt;; Twig will pass the current environment as the first argument to the filter call:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="931efc9fe805c7b7cd6d330854e73bae4a99adbe" translate="yes" xml:space="preserve">
          <source>If you want to access the variable, just declare it before the loop:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5349beb244608f52e286eb21d6c71afb6d913019" translate="yes" xml:space="preserve">
          <source>If you want to create a tag that actually removes all extra whitespace in an HTML string, be warned that this is not as easy as it seems to be (think of &lt;code&gt;textarea&lt;/code&gt; or &lt;code&gt;pre&lt;/code&gt; tags for instance). Using a third-party library like Tidy is probably a better idea.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6fdb2da8b3011d5ced6e236d46458928119344e" translate="yes" xml:space="preserve">
          <source>If you want to create your own, read the &lt;a href=&quot;advanced#creating-extensions&quot;&gt;Creating an Extension&lt;/a&gt; chapter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="555b358a8549cca465392fc40d5c9e7b69d117bd" translate="yes" xml:space="preserve">
          <source>If you want to ensure that some values are defined in an array (by given default values), reverse the two elements in the call:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3553e66838301ebc795d5de82ea3059415aeb214" translate="yes" xml:space="preserve">
          <source>If you want to manage the deprecation notices from your PHPUnit tests, have a look at the &lt;a href=&quot;https://github.com/symfony/phpunit-bridge&quot;&gt;symfony/phpunit-bridge&lt;/a&gt; package, which eases the process a lot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61f66ba8e734d3a135979f8a45b22e542f91692c" translate="yes" xml:space="preserve">
          <source>If you want to optimize the size of the generated HTML content, gzip compress the output instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e8bb9402012c3e8b3d101c0a8899738b3e29a1e" translate="yes" xml:space="preserve">
          <source>If you want to pass a variable number of positional or named arguments to the test, set the &lt;code&gt;is_variadic&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt;. Tests support dynamic names (see dynamic filters and functions for the syntax).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6697722e9ccb30c2e3ab2ec2abf4cce9ad7c1037" translate="yes" xml:space="preserve">
          <source>If you want to print a block multiple times you can however use the &lt;code&gt;block&lt;/code&gt; function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="208fd5f4bc9cd77ac6da611e4009c9bd76c7959f" translate="yes" xml:space="preserve">
          <source>If you want to test if the variable is defined, use &lt;code&gt;if users is
defined&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a6c5e917715b3899c6bb9c14576a0655ce4f732" translate="yes" xml:space="preserve">
          <source>If your templates are not stored on the filesystem, use the &lt;code&gt;collect()&lt;/code&gt; method instead. &lt;code&gt;collect()&lt;/code&gt; takes a &lt;code&gt;Traversable&lt;/code&gt; which must return template names as keys and template contents as values (as done by &lt;code&gt;Twig_Util_TemplateDirIterator&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f32be784a9fd750f505617b04b2e4df4592177d3" translate="yes" xml:space="preserve">
          <source>Imagine we have a helper module that renders forms (called &lt;code&gt;forms.html&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8781d615fd77be9578225c40ac67b9471394cced" translate="yes" xml:space="preserve">
          <source>Implementation</source>
          <target state="translated">Implementation</target>
        </trans-unit>
        <trans-unit id="dbe590d57ea316a9ac7c8db3e10089fb2960ef01" translate="yes" xml:space="preserve">
          <source>Implementation difficulty?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6fbc9d2bdd580e18ed0bc5805dc26db323d6f5f" translate="yes" xml:space="preserve">
          <source>Import</source>
          <target state="translated">Import</target>
        </trans-unit>
        <trans-unit id="6a9e625370a9655dd8ee33e68eacc99478a76e91" translate="yes" xml:space="preserve">
          <source>In addition to the spaceless tag you can also control whitespace on a per tag level. By using the whitespace control modifier on your tags, you can trim leading and or trailing whitespace:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd8952829248ab05284ea5168bbb8720baa2e61a" translate="yes" xml:space="preserve">
          <source>In addition, the &lt;code&gt;defined&lt;/code&gt; test can check for the existence of a dynamic attribute:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39bb8e73e6f9e62161bf54076cf5b03a73e3607c" translate="yes" xml:space="preserve">
          <source>In an HTML context, wrap the output with a &lt;code&gt;pre&lt;/code&gt; tag to make it easier to read:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="908d563cd3b942c5017ac5a60932077cd7caf1ce" translate="yes" xml:space="preserve">
          <source>In fact, you rarely need to create tags; and that's good news because tags are the most complex extension point of Twig.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8180188e82ddfd83e0bd99274423483f7ec9856c" translate="yes" xml:space="preserve">
          <source>In such a situation, the &lt;code&gt;embed&lt;/code&gt; tag comes in handy. The common layout code can live in a single base template, and the two different content structures, let's call them &quot;micro layouts&quot; go into separate templates which are embedded as necessary:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36c7d75266040e90099508a1e217df9592fe7b55" translate="yes" xml:space="preserve">
          <source>In the above code, we have added a single new tag, defined by the &lt;code&gt;Project_Set_TokenParser&lt;/code&gt; class. The &lt;code&gt;Project_Set_TokenParser&lt;/code&gt; class is responsible for parsing the tag and compiling it to PHP.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="465899ed2ed898ed5e4c4b17b172e486d88e1edc" translate="yes" xml:space="preserve">
          <source>In the inner loop, the &lt;code&gt;loop.parent&lt;/code&gt; variable is used to access the outer context. So, the index of the current &lt;code&gt;topic&lt;/code&gt; defined in the outer for loop is accessible via the &lt;code&gt;loop.parent.loop.index&lt;/code&gt; variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3af3c7bb4b707246b0979219eaa2c4f59d7d4bf9" translate="yes" xml:space="preserve">
          <source>In the simplest form you can use it to test if an expression evaluates to &lt;code&gt;true&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd1bddc75c0900fe4ac0ccb2bb7c69e250b3c812" translate="yes" xml:space="preserve">
          <source>In this example, &lt;code&gt;parent()&lt;/code&gt; will correctly call the &lt;code&gt;sidebar&lt;/code&gt; block from the &lt;code&gt;blocks.html&lt;/code&gt; template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="981489d50bc34860e72f589bb39d5ad47a56581b" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;a href=&quot;block&quot;&gt;block&lt;/a&gt; tags define four blocks that child templates can fill in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="311b1a5b2f5865ab6be5683acb6f5128bdf320ec" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;a href=&quot;tags/block&quot;&gt;block&lt;/a&gt; tags define four blocks that child templates can fill in. All the &lt;code&gt;block&lt;/code&gt; tag does is to tell the template engine that a child template may override those portions of the template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="159e47262a57705a495ccfdfe44c92b48d0e9289" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;&amp;lt;br/&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;/p&amp;gt;&lt;/code&gt; tags won't be removed from the string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a82a412de8d5a33c62340f8b2684dd02f0af610e" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;use&lt;/code&gt; statement imports the &lt;code&gt;sidebar&lt;/code&gt; block into the main template. The code is mostly equivalent to the following one (the imported blocks are not outputted automatically):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="980bffcd10bd0a042da20bbafc7dd0a698071ffd" translate="yes" xml:space="preserve">
          <source>In this example, the template will extend the &quot;minimum.html&quot; layout template if the &lt;code&gt;standalone&lt;/code&gt; variable evaluates to &lt;code&gt;true&lt;/code&gt;, and &quot;base.html&quot; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c72a0059b780364bca84ccdf4380863974e19a4" translate="yes" xml:space="preserve">
          <source>Included templates have access to the variables of the active context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2da59be8085f79a33e81332a9b539d6207917436" translate="yes" xml:space="preserve">
          <source>Including other Templates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eec07433cd724a3acdf1de54a99a9b54113c7ae9" translate="yes" xml:space="preserve">
          <source>Indent your code inside tags (use the same indentation as the one used for the target language of the rendered template):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8c4738ce44cf9c03eb8235abaaae13ef3ad41bf" translate="yes" xml:space="preserve">
          <source>Inside code blocks you can also assign values to variables. Assignments use the &lt;code&gt;set&lt;/code&gt; tag and can have multiple targets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66367dd2714df124b07f6a60e42daf59a102cb99" translate="yes" xml:space="preserve">
          <source>Inside of a &lt;code&gt;for&lt;/code&gt; loop block you can access some special variables:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d021f32066e1d162d4807369a92e503e42dd9386" translate="yes" xml:space="preserve">
          <source>Install &lt;a href=&quot;https://getcomposer.org/download/&quot;&gt;Composer&lt;/a&gt; and run the following command to get the latest version:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="a1ec4edbd514825eabcf3f42d5dcc9d5bbf903d8" translate="yes" xml:space="preserve">
          <source>Instead of defining variables at the beginning of the scope, you can pass a hash of variables you want to define in the &lt;code&gt;with&lt;/code&gt; tag; the previous example is equivalent to the following one:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13636e65321fd12c3003f0e74463e8dc2e906f6d" translate="yes" xml:space="preserve">
          <source>Internally, &lt;code&gt;escape&lt;/code&gt; uses the PHP native &lt;a href=&quot;https://secure.php.net/htmlspecialchars&quot;&gt;htmlspecialchars&lt;/a&gt; function for the HTML escaping strategy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2839d7517d48ead9abb29e54f179a635d289b471" translate="yes" xml:space="preserve">
          <source>Internally, Twig uses the PHP &lt;a href=&quot;https://secure.php.net/abs&quot;&gt;abs&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="999e1991e74a82497d5a93be16b843bfa74c429d" translate="yes" xml:space="preserve">
          <source>Internally, Twig uses the PHP &lt;a href=&quot;https://secure.php.net/array_merge&quot;&gt;array_merge&lt;/a&gt; function. It supports Traversable objects by transforming those to arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45e217e625bdc2f66adaa6cad5e61a8e79836a19" translate="yes" xml:space="preserve">
          <source>Internally, Twig uses the PHP &lt;a href=&quot;https://secure.php.net/asort&quot;&gt;asort&lt;/a&gt; function to maintain index association. It supports Traversable objects by transforming those to arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f3576cbb1c9a2a4d0626742ef427fbc99e4c2b2" translate="yes" xml:space="preserve">
          <source>Internally, Twig uses the PHP &lt;a href=&quot;https://secure.php.net/explode&quot;&gt;explode&lt;/a&gt; or &lt;a href=&quot;https://secure.php.net/str_split&quot;&gt;str_split&lt;/a&gt; (if delimiter is empty) functions for string splitting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfe95a226368e9873101aae5ad05e6c9e5073778" translate="yes" xml:space="preserve">
          <source>Internally, Twig uses the PHP &lt;a href=&quot;https://secure.php.net/flush&quot;&gt;flush&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a009c0ede20fc40a5c1a0c0321e74fdc0e587fdd" translate="yes" xml:space="preserve">
          <source>Internally, Twig uses the PHP &lt;a href=&quot;https://secure.php.net/json_encode&quot;&gt;json_encode&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32e9b399aebaba99cad3cfd944a3b5c19fa43bb2" translate="yes" xml:space="preserve">
          <source>Internally, Twig uses the PHP &lt;a href=&quot;https://secure.php.net/strip_tags&quot;&gt;strip_tags&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ed2a90a17e16014a5f81eed030947a88e3a5d3d" translate="yes" xml:space="preserve">
          <source>Internally, Twig uses the PHP &lt;a href=&quot;https://secure.php.net/trim&quot;&gt;trim&lt;/a&gt;, &lt;a href=&quot;https://secure.php.net/ltrim&quot;&gt;ltrim&lt;/a&gt;, and &lt;a href=&quot;https://secure.php.net/rtrim&quot;&gt;rtrim&lt;/a&gt; functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="953c0bab70e8b2b160858a258514b4dad8c08041" translate="yes" xml:space="preserve">
          <source>Internally, Twig uses the PHP &lt;a href=&quot;https://secure.php.net/var_dump&quot;&gt;var_dump&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eec0c8bbb39fa158960757b8c9d6cea2ac491f8" translate="yes" xml:space="preserve">
          <source>Internally, Twig uses the PHP &lt;code&gt;rawurlencode&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="035609c9f68c6df67a38534f6f58542179ed547c" translate="yes" xml:space="preserve">
          <source>It also works if the property does not exist but is rather defined dynamically thanks to the magic &lt;code&gt;__get()&lt;/code&gt; method; you just need to also implement the &lt;code&gt;__isset()&lt;/code&gt; magic method like shown in the following snippet of code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c869afe5c305b0aa7fda9513f76282d1d48a4a1" translate="yes" xml:space="preserve">
          <source>It also works with objects implementing the &lt;a href=&quot;https://secure.php.net/Traversable&quot;&gt;Traversable&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4321564546fe93d632d7f92f99e22d71c2aacc5" translate="yes" xml:space="preserve">
          <source>It also works with objects implementing the &lt;a href=&quot;https://secure.php.net/manual/en/class.traversable.php&quot;&gt;Traversable&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29fe677cb865db79eefb4ef834bd6d89da8c06c3" translate="yes" xml:space="preserve">
          <source>It can also look for templates in an array of directories:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dfe5bd84206702e7a1b0f38ba32364c4ec0edda" translate="yes" xml:space="preserve">
          <source>It can be also useful with letters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fb2c0e43b8be4a883eeb2055997be7897172948" translate="yes" xml:space="preserve">
          <source>It is now possible to move the runtime logic to a new &lt;code&gt;Project_Twig_RuntimeExtension&lt;/code&gt; class and use it directly in the extension:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46f741939632241afedefbcd39e83975826b2c68" translate="yes" xml:space="preserve">
          <source>It is sometimes desirable or even necessary to have Twig ignore parts it would otherwise handle as variables or blocks. For example if the default syntax is used and you want to use &lt;code&gt;{{&lt;/code&gt; as raw string in the template and not start a variable you have to use a trick.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39e24ed8ecf68080b57fed7a858fc45b7d87a24b" translate="yes" xml:space="preserve">
          <source>It returns &lt;code&gt;true&lt;/code&gt; if the left operand is contained in the right:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f48f2e4e2d1732d610c58b5c55da874660d68a1" translate="yes" xml:space="preserve">
          <source>It turns out it is possible to get this to work, by adding a directory right at the end of your template directories, which is the parent of all of the other directories: &lt;code&gt;.../templates&lt;/code&gt; in our case. This has the effect of making every template file within our system uniquely addressable. Most of the time you will use the &quot;normal&quot; paths, but in the special case of wanting to extend a template with an overriding version of itself we can reference its parent's full, unambiguous template path in the extends tag:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="465666602f25190ff7e422499feae3ee6e642a5f" translate="yes" xml:space="preserve">
          <source>It's important to know that the curly braces are &lt;em&gt;not&lt;/em&gt; part of the variable but the print statement. When accessing variables inside tags, don't put the braces around them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="564a685e46312016019ba06245ef8f71432def3b" translate="yes" xml:space="preserve">
          <source>It's possible to render the contents of the parent block by using the &lt;a href=&quot;../functions/parent&quot;&gt;parent&lt;/a&gt; function. This gives back the results of the parent block:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6483fc692ab94c7062d29856887e65592971b217" translate="yes" xml:space="preserve">
          <source>It's possible to render the contents of the parent block by using the &lt;a href=&quot;functions/parent&quot;&gt;parent&lt;/a&gt; function. This gives back the results of the parent block:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88aab1f28cfeaf19d17e8481897faebd0b8aa9fc" translate="yes" xml:space="preserve">
          <source>Iterating over Keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30135b5ab79216fdd0cdc73fd61c8627a8d3fda3" translate="yes" xml:space="preserve">
          <source>Iterating over Keys and Values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b4ba7bff30a255adc5921d365a6b18df850e43d" translate="yes" xml:space="preserve">
          <source>Iterating over a Subset</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b67ec30cc37da2df4f99f8f15a0a8b089da1053" translate="yes" xml:space="preserve">
          <source>Keep in mind the following when you want to extend Twig:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1fd171fa90105404ddd994a950730569b172bc3" translate="yes" xml:space="preserve">
          <source>Last but not the least, you can also use a &lt;em&gt;global&lt;/em&gt; object with a method able to generate lorem ipsum text:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9bb4fa3109d50c316f1fd5d20b878185c63c2aa" translate="yes" xml:space="preserve">
          <source>Let's create a simple &lt;code&gt;set&lt;/code&gt; tag that allows the definition of simple variables from within a template. The tag can be used like follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ef9153e1d5be3805903d14442ef1098653d6e1a" translate="yes" xml:space="preserve">
          <source>Let's define a base template, &lt;code&gt;base.html&lt;/code&gt;, which defines a simple HTML skeleton document that you might use for a simple two-column page:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a038a401f3d56f0124ac2cb309512e9fd67163a1" translate="yes" xml:space="preserve">
          <source>Let's define a base template, &lt;code&gt;base.html&lt;/code&gt;, which defines a simple HTML skeleton document:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1faa02b2ee6fc8641109fea8b253e1120c7192bb" translate="yes" xml:space="preserve">
          <source>Let's say that your templates are loaded from both &lt;code&gt;.../templates/mysite&lt;/code&gt; and &lt;code&gt;.../templates/default&lt;/code&gt; in this order. The &lt;code&gt;page.twig&lt;/code&gt; template, stored in &lt;code&gt;.../templates/default&lt;/code&gt; reads as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="333107194d5daf3b519900f208c1a9379e402cd3" translate="yes" xml:space="preserve">
          <source>Let's take another example: a block included within an &lt;code&gt;if&lt;/code&gt; statement:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec98bf38f883c641c8e664139e952d295fc2cb10" translate="yes" xml:space="preserve">
          <source>Let's take the following example to illustrate how a block works and more importantly, how it does not work:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8784441607e9ae1e4a0d363f27f45028b927794" translate="yes" xml:space="preserve">
          <source>Licensed under the three clause BSD license.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa12dc09485c5f2d9273691d047d5a5d083f91cb" translate="yes" xml:space="preserve">
          <source>Like PHP, Twig does not support multiple inheritance. So you can only have one extends tag called per rendering. However, Twig supports horizontal &lt;a href=&quot;use&quot;&gt;reuse&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7ba7dcf662374aafe652b03d75cb8f6024519d9" translate="yes" xml:space="preserve">
          <source>Literals</source>
          <target state="translated">Literals</target>
        </trans-unit>
        <trans-unit id="d3b440ddb3e952021e0417ff7287e7b8bd1d45e8" translate="yes" xml:space="preserve">
          <source>Literals (integers, booleans, arrays, ...) used in the template directly as variables or filter arguments are never automatically escaped:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f514b04ed6b877534da140af8e12cab5016f713" translate="yes" xml:space="preserve">
          <source>Loaders</source>
          <target state="translated">Loaders</target>
        </trans-unit>
        <trans-unit id="48f0cdc3426bfa68eed3cb4d620c27f8e48479b2" translate="yes" xml:space="preserve">
          <source>Loaders are responsible for loading templates from a resource such as the file system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87d6939af2d932b9a52ec9597a5839df8c4d0ecc" translate="yes" xml:space="preserve">
          <source>Loading a Template from a String</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d52a6d8fedcc48a65297c07bf5f7e3e41aab5aa" translate="yes" xml:space="preserve">
          <source>Logic</source>
          <target state="translated">Logic</target>
        </trans-unit>
        <trans-unit id="fee5a14356621b73ac22c3c0edad01021765caac" translate="yes" xml:space="preserve">
          <source>Loop over each item in a sequence. For example, to display a list of users provided in a variable called &lt;code&gt;users&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="899bd694d29ace1be956ab35177075021977560b" translate="yes" xml:space="preserve">
          <source>Macros</source>
          <target state="translated">Macros</target>
        </trans-unit>
        <trans-unit id="002af17d5caf610dc2fe3503ceaccf6cc059a743" translate="yes" xml:space="preserve">
          <source>Macros are comparable with functions in regular programming languages. They are useful to put often used HTML idioms into reusable elements to not repeat yourself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb7fcb852103ed0a63a181a772614b4571a71011" translate="yes" xml:space="preserve">
          <source>Macros are comparable with functions in regular programming languages. They are useful to reuse often used HTML fragments to not repeat yourself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52e0d1ecb820a6b4a6718778558b574290158f29" translate="yes" xml:space="preserve">
          <source>Macros can be defined in any template, and need to be &quot;imported&quot; before being used (see the documentation for the &lt;a href=&quot;import&quot;&gt;import&lt;/a&gt; tag for more information):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f3085e663536adf3e5dbb75d79b0e921e111391" translate="yes" xml:space="preserve">
          <source>Macros can be defined in any template, and need to be &quot;imported&quot; via the &lt;a href=&quot;tags/import&quot;&gt;import&lt;/a&gt; tag before being used:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ef6d6a58054ae9889caea03f0dbfb4a83c2fb2a" translate="yes" xml:space="preserve">
          <source>Macros differ from native PHP functions in a few ways:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="305e5fae1f0f54206b1804a471337b9a97a4e417" translate="yes" xml:space="preserve">
          <source>Making a Layout conditional</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fc17e09652fcc579a87a75286e97481eb20bfc9" translate="yes" xml:space="preserve">
          <source>Making an Include dynamic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af62f3eceb714a029d9896c6bcb26ce781a27a63" translate="yes" xml:space="preserve">
          <source>Many IDEs support syntax highlighting and auto-completion for Twig:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3edf0df49942da6d11a1a217e4d3af4a5a8e64f2" translate="yes" xml:space="preserve">
          <source>Math</source>
          <target state="translated">Math</target>
        </trans-unit>
        <trans-unit id="5f2cbd107037ed23248e5058a7a64cd6bae05468" translate="yes" xml:space="preserve">
          <source>Miscellaneous</source>
          <target state="translated">Miscellaneous</target>
        </trans-unit>
        <trans-unit id="cd70332627f6e0032f42e790234355b73b9a84e5" translate="yes" xml:space="preserve">
          <source>Mixing different template syntaxes in the same file is not a recommended practice as both AngularJS and Twig use the same delimiters in their syntax: &lt;code&gt;{{&lt;/code&gt; and &lt;code&gt;}}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f37760e852ee7ed1460834e80e17486cdd06c339" translate="yes" xml:space="preserve">
          <source>Most applications will create one &lt;code&gt;Twig_Environment&lt;/code&gt; object on application initialization and use that to load templates. In some cases it's however useful to have multiple environments side by side, if different configurations are in use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="328e34d1f3a0c785552d31ae2b230de470afe978" translate="yes" xml:space="preserve">
          <source>Most of the time, it is useful to create a single extension for your project, to host all the specific tags and filters you want to add to Twig.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeb9ce0839ae0c4cad962e6ecb2bcbfe2346e1f2" translate="yes" xml:space="preserve">
          <source>NAN (Not A Number)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80a1546459fb296b75e903b673f8cc0ad0b7638a" translate="yes" xml:space="preserve">
          <source>Named Arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a54f2ccb779f481bea3312bbe38f4dd24beb2f09" translate="yes" xml:space="preserve">
          <source>Named Block End-Tags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e06508babc518d97db27083de76cf1b0e86dcfa8" translate="yes" xml:space="preserve">
          <source>Named Macro End-Tags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="187cef2cee2780f4a1eca642920058ef8eafcfb4" translate="yes" xml:space="preserve">
          <source>Named arguments also allow you to skip some arguments for which you don't want to change the default value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a86840aee549bc01286a0a18b1982b1f76850fdf" translate="yes" xml:space="preserve">
          <source>Namespaced templates can be accessed via the special &lt;code&gt;@namespace_name/template_path&lt;/code&gt; notation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="457ee342743936defa5e5ae0636ab32d2fd99406" translate="yes" xml:space="preserve">
          <source>New in version 1.36: and 2.6 The &lt;code&gt;deprecated&lt;/code&gt; tag was added in Twig 1.36 and 2.6.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8912da4bf3693faeaf8d5d2e36ccc5d265e80238" translate="yes" xml:space="preserve">
          <source>New in version 2.3: Support for the &lt;code&gt;__toString()&lt;/code&gt; magic method has been added in Twig 2.3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1edc0de5f7eb7f187ea75980322df188858822d" translate="yes" xml:space="preserve">
          <source>New in version 2.6: Dynamic tests support was added in Twig 2.6.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69e1fd5edf585130a67594beaafb52be08ebcc44" translate="yes" xml:space="preserve">
          <source>New values are added at the end of the existing ones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bda3d2e0b5297dbbf3c08e9c01e6dcb02e257c0" translate="yes" xml:space="preserve">
          <source>Next, let's use a &lt;code&gt;lipsum&lt;/code&gt;&lt;em&gt;function&lt;/em&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef1e6eaa9a5dc6b5208904520b59cf46cf059cdc" translate="yes" xml:space="preserve">
          <source>Node Tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c924e3088204ee77ba681f72be3444357932fca" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="translated">Note</target>
        </trans-unit>
        <trans-unit id="cfc14d99847b7ea8cf4e92f97b1932faba4f8401" translate="yes" xml:space="preserve">
          <source>Note that autoescaping has some limitations as escaping is applied on expressions after evaluation. For instance, when working with concatenation, &lt;code&gt;{{ foo|raw ~ bar }}&lt;/code&gt; won't give the expected result as escaping is applied on the result of the concatenation, not on the individual variables (so, the &lt;code&gt;raw&lt;/code&gt; filter won't have any effect here).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f12617a50472a5f6f4baa3d9893b0e771bd3b52b" translate="yes" xml:space="preserve">
          <source>Note that by default, the deprecation notices are silenced and never displayed nor logged. See &lt;a href=&quot;../recipes#deprecation-notices&quot;&gt;Displaying Deprecation Notices&lt;/a&gt; to learn how to handle them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b876de0f99fe546d3c259ec56dbbfb1e7e52b1f" translate="yes" xml:space="preserve">
          <source>Note that if the start is greater than the end, &lt;code&gt;range&lt;/code&gt; assumes a step of &lt;code&gt;-1&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62a25da9e469d0a5c9b22e4af6be6a7710897fa3" translate="yes" xml:space="preserve">
          <source>Note that loops are scoped in Twig; therefore a variable declared inside a &lt;code&gt;for&lt;/code&gt; loop is not accessible outside the loop itself:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb49b4359fbfd731f78d70761064fb47970b9ff5" translate="yes" xml:space="preserve">
          <source>Note that most deprecation notices are triggered during &lt;strong&gt;compilation&lt;/strong&gt;, so they won't be generated when templates are already cached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="932a8c7463111ba5585d513406372533fb7c97b8" translate="yes" xml:space="preserve">
          <source>Note that overloading the built-in Twig elements is not recommended as it might be confusing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6db7db7bf54f23f6d10d27a94b93439147686a0d" translate="yes" xml:space="preserve">
          <source>Note that since the child template doesn't define the &lt;code&gt;footer&lt;/code&gt; block, the value from the parent template is used instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c8fc14fd973764907951dac1bf26538235693b5" translate="yes" xml:space="preserve">
          <source>Note that you must use parentheses when combining it with the filter operator due to the &lt;a href=&quot;#twig-expressions&quot;&gt;operator precedence rules&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="269d903abeea808c099c43b2c89f7578f086ca67" translate="yes" xml:space="preserve">
          <source>Notice that the second argument of the environment is an array of options. The &lt;code&gt;cache&lt;/code&gt; option is a compilation cache directory, where Twig caches the compiled templates to avoid the parsing phase for sub-sequent requests. It is very different from the cache you might want to add for the evaluated templates. For such a need, you can use any available PHP cache library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4ad646cbb98a73cb1d04b94c1aa2736693d8c6f" translate="yes" xml:space="preserve">
          <source>Now that the &lt;code&gt;base.twig&lt;/code&gt; templates is defined in an array loader, you can remove it from the database, and everything else will still work as before.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0b0ac82ee4f0b3dad626021e51d61be5bf1b4f8" translate="yes" xml:space="preserve">
          <source>Now, let's define a loader able to use this database:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55944aa75cf0566648ae2016949aa3b6420ae3a6" translate="yes" xml:space="preserve">
          <source>Now, let's see the actual code of this class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3df63f485424893ca145d25bc027c8afb7d92810" translate="yes" xml:space="preserve">
          <source>Now, let's use a &lt;code&gt;lipsum&lt;/code&gt;&lt;em&gt;filter&lt;/em&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee3cf78fa4321b1a656162de09054591df25623f" translate="yes" xml:space="preserve">
          <source>Now, when rendering the child template, the loop is going to use the block defined in the child template instead of the one defined in the base one; the executed template is then equivalent to the following one:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de2aec2c6115b1a0acdf36db9cfc0442cf7ad052" translate="yes" xml:space="preserve">
          <source>Of course, the name after the &lt;code&gt;endblock&lt;/code&gt; word must match the block name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e3d747c3ca751dfdcb72ca28bbd09f99edfd3ef" translate="yes" xml:space="preserve">
          <source>Of course, the name after the &lt;code&gt;endmacro&lt;/code&gt; word must match the macro name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d623c3a29cf15cbf2e3aa6ab3acf410300c43a9" translate="yes" xml:space="preserve">
          <source>Of course, this extension does nothing for now. We will customize it in the next sections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fb55b4c63bbfbc160e8fdaee768a3a1208ad506" translate="yes" xml:space="preserve">
          <source>Of course, this will not work as Twig will always load the template from &lt;code&gt;.../templates/mysite&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85db17d433557911a3bbd98ef14105129a2240b1" translate="yes" xml:space="preserve">
          <source>One of the most exciting features of a template engine like Twig is the possibility to define new language constructs. This is also the most complex feature as you need to understand how Twig's internals work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e90414358dbfff0a68e4eb5d68a16978cf197d5a" translate="yes" xml:space="preserve">
          <source>Operators</source>
          <target state="translated">Operators</target>
        </trans-unit>
        <trans-unit id="b2368527f5ef2990fd1abef077498e8c7aca7b6d" translate="yes" xml:space="preserve">
          <source>Operators are case sensitive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60d5ec08a38e822c97bde535785de0972ad7b2cd" translate="yes" xml:space="preserve">
          <source>Optimizer Extension</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd13b94019000aaafc7f679d1d2b13d8082b8dbf" translate="yes" xml:space="preserve">
          <source>Other Operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb2f163ccc20cb7388203cf1edbc6860b44ea0f0" translate="yes" xml:space="preserve">
          <source>Overloading</source>
          <target state="translated">Overloading</target>
        </trans-unit>
        <trans-unit id="7d042791c6d03b8b65532d86de57a4e45528817d" translate="yes" xml:space="preserve">
          <source>Overriding a Template that also extends itself</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c41fdf87d994d54c4375ddb9f40e24e5f85510a" translate="yes" xml:space="preserve">
          <source>Page template &lt;code&gt;foo.twig&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d1fb6ff4699baace9bc278338c14b908486de9e" translate="yes" xml:space="preserve">
          <source>Parent Blocks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efa9d684a8a8fd8d907340a153d9ff2538136018" translate="yes" xml:space="preserve">
          <source>Parsing expressions is done by calling the &lt;code&gt;parseExpression()&lt;/code&gt; like we did for the &lt;code&gt;set&lt;/code&gt; tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eed036e414a34a0c245858652e6d88f14c3faefb" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">Prerequisites</target>
        </trans-unit>
        <trans-unit id="5e6823369b4670c3ba15d69df7cf750211fabe49" translate="yes" xml:space="preserve">
          <source>Profiler Extension</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6208518abe3f135d3b04f664fbde54fd614e08ee" translate="yes" xml:space="preserve">
          <source>Put one (and only one) space after the &lt;code&gt;:&lt;/code&gt; sign in hashes and &lt;code&gt;,&lt;/code&gt; in arrays and hashes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0a20a0e2ca5dc0d17d7efd8e205ac8ea7b27843" translate="yes" xml:space="preserve">
          <source>Put one (and only one) space after the start of a delimiter (&lt;code&gt;{{&lt;/code&gt;, &lt;code&gt;{%&lt;/code&gt;, and &lt;code&gt;{#&lt;/code&gt;) and before the end of a delimiter (&lt;code&gt;}}&lt;/code&gt;, &lt;code&gt;%}&lt;/code&gt;, and &lt;code&gt;#}&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f807293bb4406551b7f2ad035b45144b7ab5ce17" translate="yes" xml:space="preserve">
          <source>Put one (and only one) space before and after the following operators: comparison operators (&lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;), math operators (&lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;//&lt;/code&gt;, &lt;code&gt;**&lt;/code&gt;), logic operators (&lt;code&gt;not&lt;/code&gt;, &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;), &lt;code&gt;~&lt;/code&gt;, &lt;code&gt;is&lt;/code&gt;, &lt;code&gt;in&lt;/code&gt;, and the ternary operator (&lt;code&gt;?:&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59ec32809687eb79bf3036f216e7894f2f9df7bf" translate="yes" xml:space="preserve">
          <source>Read the chapter about extending Twig to learn how to create your own extensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca8824fd81d472811585a1610376e2407b987863" translate="yes" xml:space="preserve">
          <source>Read the documentation for the &lt;a href=&quot;../tests/defined&quot;&gt;defined&lt;/a&gt; and &lt;a href=&quot;../tests/empty&quot;&gt;empty&lt;/a&gt; tests to learn more about their semantics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c7c6706c310bb3998a273ba1502af82fa2c863d" translate="yes" xml:space="preserve">
          <source>Reading the existing &lt;code&gt;TokenParser&lt;/code&gt; classes is the best way to learn all the nitty-gritty details of the parsing process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fb1092f32d4fcbf9e061ffd718d4ec689c6c95e" translate="yes" xml:space="preserve">
          <source>Recipes</source>
          <target state="translated">Recipes</target>
        </trans-unit>
        <trans-unit id="ad4374049d17600ffcdb2255846a2aa3c856f1a4" translate="yes" xml:space="preserve">
          <source>Refreshing modified Templates when OPcache or APC is enabled</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c671004cb76b6dcc65fd61f71cf6a4c1e279381" translate="yes" xml:space="preserve">
          <source>Registering a new tag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcc06caf9c40c5639bfc12d1e0cb27d22ada6057" translate="yes" xml:space="preserve">
          <source>Registering the tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41ef4ab18edbb01635b4770a7b1392471d9d3578" translate="yes" xml:space="preserve">
          <source>Renaming allows you to simulate inheritance by calling the &quot;parent&quot; block:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99bd1e34cd164e21963997294779599c4962042e" translate="yes" xml:space="preserve">
          <source>Rendering Templates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66598cc6137bf9abd066764c4d7091ecd797ffa8" translate="yes" xml:space="preserve">
          <source>Returns a list containing an arithmetic progression of integers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff1112bb210b5d8b487698b1204697b834e1bb95" translate="yes" xml:space="preserve">
          <source>Reusing a stateful Node Visitor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0482778b8f01990f61e8fd56f3823b346d0a435" translate="yes" xml:space="preserve">
          <source>Sandbox Extension</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7243d5cdb40f327926fed4254ded6a7971a3b95" translate="yes" xml:space="preserve">
          <source>Sets the default auto-escaping strategy (&lt;code&gt;name&lt;/code&gt;, &lt;code&gt;html&lt;/code&gt;, &lt;code&gt;js&lt;/code&gt;, &lt;code&gt;css&lt;/code&gt;, &lt;code&gt;url&lt;/code&gt;, &lt;code&gt;html_attr&lt;/code&gt;, or a PHP callback that takes the template &quot;filename&quot; and returns the escaping strategy to use -- the callback cannot be a function name to avoid collision with built-in escaping strategies); set it to &lt;code&gt;false&lt;/code&gt; to disable auto-escaping. The &lt;code&gt;name&lt;/code&gt; escaping strategy determines the escaping strategy to use for a template based on the template filename extension (this strategy does not incur any overhead at runtime as auto-escaping is done at compilation time.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a07d409a8bca74d5b1cfcdca5970e45d67bb7d8" translate="yes" xml:space="preserve">
          <source>Setting Variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4b928607a437ad5e0d739dcf50be282731834cb" translate="yes" xml:space="preserve">
          <source>Several variables can be assigned in one block:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0877d0fa0c3bb3055b8f88fa55ac5c42526ffe20" translate="yes" xml:space="preserve">
          <source>Since the use case may not be obvious, let's look at a simplified example. Imagine a base template shared by multiple HTML pages, defining a single block named &quot;content&quot;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="076aecdf194c0acbcd569262d67a5c1b5180dcb5" translate="yes" xml:space="preserve">
          <source>Some filters may need to work on input that is already escaped or safe, for example when adding (safe) HTML tags to originally unsafe output. In such a case, set the &lt;code&gt;pre_escape&lt;/code&gt; option to escape the input data before it is run through your filter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27db328c07d26d85d4cfb53732b20f728fea4b58" translate="yes" xml:space="preserve">
          <source>Some pages (&quot;foo&quot; and &quot;bar&quot;) share the same content structure - two vertically stacked boxes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ba99ddb5d740267821ed70cf3314f577b85b653" translate="yes" xml:space="preserve">
          <source>Sometimes, when using nested loops, you need to access the parent context. The parent context is always accessible via the &lt;code&gt;loop.parent&lt;/code&gt; variable. For instance, if you have the following template data:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b94eab177d0450791e2bd87d5293995143f45c6d" translate="yes" xml:space="preserve">
          <source>Sounds complicated but it is very basic. It's easier to understand it by starting with an example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4949c62fb969326b2fde8b8dab0281e60449d966" translate="yes" xml:space="preserve">
          <source>Still, if you want to use AngularJS and Twig in the same template, there are two ways to make it work depending on the amount of AngularJS you need to include in your templates:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcadc5a0cb117211f9dc789c191b1d6c306ecd43" translate="yes" xml:space="preserve">
          <source>String Interpolation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed19c64d1fe7c3fa1574fd852a215a59e822c2fd" translate="yes" xml:space="preserve">
          <source>String interpolation (&lt;code&gt;#{expression}&lt;/code&gt;) allows any valid expression to appear within a &lt;em&gt;double-quoted string&lt;/em&gt;. The result of evaluating that expression is inserted into the string:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36c0630a340d2960affa1c4d2360b0e2c06793fb" translate="yes" xml:space="preserve">
          <source>Synopsis</source>
          <target state="translated">Synopsis</target>
        </trans-unit>
        <trans-unit id="848eed0fbd5429f556b2982dec3ea87136e33e44" translate="yes" xml:space="preserve">
          <source>Tags</source>
          <target state="translated">Tags</target>
        </trans-unit>
        <trans-unit id="d6b6bb3a1a939adefc8ad08e7880baf39f4c9d7b" translate="yes" xml:space="preserve">
          <source>Template Inheritance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dd87e05efd2c362fafa221c98a5b8da06087ae9" translate="yes" xml:space="preserve">
          <source>Template inheritance is one of the most powerful features of Twig but it is limited to single inheritance; a template can only extend one other template. This limitation makes template inheritance simple to understand and easy to debug:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2691b3f1f1c212aa5a3ce650bad359d76371d1b6" translate="yes" xml:space="preserve">
          <source>Test Operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b31ecb33b837cbfc4706edad7573ceba634fad70" translate="yes" xml:space="preserve">
          <source>Test functions should always return true/false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e82098b28b9a25feb0191a7549df268e2da2272" translate="yes" xml:space="preserve">
          <source>Testing an Extension</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c77cef40d68a9d5b02df3c7dfe86cb9171553b82" translate="yes" xml:space="preserve">
          <source>Testing the node visitors can be complex, so extend your test cases from &lt;code&gt;Twig_Test_NodeTestCase&lt;/code&gt;. Examples can be found in the Twig repository &lt;a href=&quot;https://github.com/twigphp/Twig/tree/2.x/test/Twig/Tests/Node&quot;&gt;tests/Twig/Node&lt;/a&gt; directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39fdec1194d94212b871a28b2aa04a73cd40fce1" translate="yes" xml:space="preserve">
          <source>Tests</source>
          <target state="translated">Tests</target>
        </trans-unit>
        <trans-unit id="b591a4ce48960f6657e9b7732cf3fd020bc84733" translate="yes" xml:space="preserve">
          <source>Tests allow you to create custom application specific logic for evaluating boolean conditions. As a simple example, let's create a Twig test that checks if objects are 'red':</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="596bd57151aeb778febfe0c5deffffd75b69ed5a" translate="yes" xml:space="preserve">
          <source>Tests are defined in the exact same way as filters and functions, but you need to create an instance of &lt;code&gt;Twig_Test&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d016962d5b85e27a5c3c03381147db98d63e5bde" translate="yes" xml:space="preserve">
          <source>Tests can accept arguments too:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fd8ac942a7735f28c5b6559de7283feb1d87ac5" translate="yes" xml:space="preserve">
          <source>Tests can be negated by using the &lt;code&gt;is not&lt;/code&gt; operator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc05d9ff1dea43b0d895530a510dde04588d1a01" translate="yes" xml:space="preserve">
          <source>That works, but using a tag for &lt;code&gt;lipsum&lt;/code&gt; is not a good idea for at least three main reasons:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93ef0dd827103681fcee453b78be2ff14e1a261d" translate="yes" xml:space="preserve">
          <source>The</source>
          <target state="translated">The</target>
        </trans-unit>
        <trans-unit id="b9d9b80f14772854d52ed5dec4f0f258aaef1eda" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;functions/include&quot;&gt;include&lt;/a&gt; function is useful to include a template and return the rendered content of that template into the current one:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c517cc2140061caabf6eb26128d8f44b616831b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;tags/extends&quot;&gt;extends&lt;/a&gt; tag is the key here. It tells the template engine that this template &quot;extends&quot; another template. When the template system evaluates this template, first it locates the parent. The extends tag should be the first tag in the template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca4b88e78723cbdc13ccc7c9b6d43a1ad2a2ff62" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;tags/if&quot;&gt;if&lt;/a&gt; tag can be used to test an expression:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d54ebb65540ace4eb941e7f3784ca2f7127ce402" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;..&lt;/code&gt; operator can take any expression at both sides:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d412831cb118a24ce7d7fcddf89d5788006afcd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;//&lt;/code&gt; operator is equivalent to &lt;code&gt;|round(0, 'floor')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f35426526d8abdeee2946e91d481308afc10a8bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IntegrationTest.php&lt;/code&gt; file should look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4912dce360fccc8f06b66623452b245dee8c0800" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Project_Set_Node&lt;/code&gt; class itself is rather simple:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e597681d224ad7a663bb9414aefb1f1c547bc38c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Twig_Filter&lt;/code&gt; class takes an array of options as its last argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cc7367fe154518c207585a0a01ccb6a38cc815b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;abs&lt;/code&gt; filter returns the absolute value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc2aae17b73685ca254c41d189b708101146d739" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attribute&lt;/code&gt; function can be used to access a &quot;dynamic&quot; attribute of a variable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fb5104325e06a74a519a351afca169722d58933" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;autoescape&lt;/code&gt; tag has no effect on included files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="348d6ce7ff8d8ffc7c825ab8e2a405cc69813269" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;batch&lt;/code&gt; filter &quot;batches&quot; items by returning a list of lists with the given number of items. A second parameter can be provided and used to fill in missing items:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0493f95f4ab86e387482bff4024fbcbf3601106" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;block&lt;/code&gt; function can also be used to display one block from another template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fb899cca6fdbc401562019b85a1abc3a8b9f4e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;capitalize&lt;/code&gt; filter capitalizes a value. The first character will be uppercase, all others lowercase:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebaeff82f38de421a073bd9ccaf973cd2c74bbe9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;collectDir()&lt;/code&gt; method compiles all templates found in a directory, catches deprecation notices, and return them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33a62715fae2d62c47ee6de7a2cad3d939529a3c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;convert_encoding&lt;/code&gt; filter converts a string from one encoding to another. The first argument is the expected output charset and the second one is the input charset:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce768f21be3c42687c07df2f1802dc76ff1f2020" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;core&lt;/code&gt; extension defines all the core features of Twig:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd1e20413f0e5c32410d548c8841be407e164367" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cycle&lt;/code&gt; function cycles on an array of values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77eb234d788844ca1f03526d092faaf1a5cab09c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;date&lt;/code&gt; filter accepts strings (it must be in a format supported by the &lt;a href=&quot;https://secure.php.net/strtotime&quot;&gt;strtotime&lt;/a&gt; function), &lt;a href=&quot;https://secure.php.net/DateTime&quot;&gt;DateTime&lt;/a&gt; instances, or &lt;a href=&quot;https://secure.php.net/DateInterval&quot;&gt;DateInterval&lt;/a&gt; instances. For instance, to display the current date, filter the word &quot;now&quot;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7796966e97e4813e1f2e13803584baaed805c901" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;date&lt;/code&gt; filter formats a date to a given format:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75a1b9c27397952f9eb08576ec6b53480c103632" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;date_modify&lt;/code&gt; filter accepts strings (it must be in a format supported by the &lt;a href=&quot;https://secure.php.net/strtotime&quot;&gt;strtotime&lt;/a&gt; function) or &lt;a href=&quot;https://secure.php.net/DateTime&quot;&gt;DateTime&lt;/a&gt; instances. You can easily combine it with the &lt;a href=&quot;date&quot;&gt;date&lt;/a&gt; filter for formatting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c133f2c7161b16391bb7e622b23faee600ae8b62" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;date_modify&lt;/code&gt; filter modifies a date with a given modifier string:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c46107f2fa75538d6f369cb980d446e862b995a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;default&lt;/code&gt; filter returns the passed default value if the value is undefined or empty, otherwise the value of the variable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df01a343602c9310d484d4698a78c13186a546a5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;display()&lt;/code&gt; method is a shortcut to output the template directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="948e3b0df1dec5c2763406af28cb197981dba3d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;do&lt;/code&gt; tag works exactly like the regular variable expression (&lt;code&gt;{{ ...
}}&lt;/code&gt;) just that it doesn't print anything:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c171a70d9a57ca5304be00a542f3215b6e32c2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dump&lt;/code&gt; function dumps information about a template variable. This is mostly useful to debug a template that does not behave as expected by introspecting its variables:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60eac5692d6576266e138dcf1a9ab556960e564e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dump&lt;/code&gt; function is not available by default. You must add the &lt;code&gt;Twig_Extension_Debug&lt;/code&gt; extension explicitly when creating your Twig environment:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef6624dfe9784454b6c556591ff6373a4d0feb76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;embed&lt;/code&gt; tag combines the behaviour of &lt;a href=&quot;include&quot;&gt;include&lt;/a&gt; and &lt;a href=&quot;extends&quot;&gt;extends&lt;/a&gt;. It allows you to include another template's contents, just like &lt;code&gt;include&lt;/code&gt; does. But it also allows you to override any block defined inside the included template, like when extending a template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c39a2c1665a60532d4beca89d0c0ac1d98bf11b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;embed&lt;/code&gt; tag takes the exact same arguments as the &lt;code&gt;include&lt;/code&gt; tag:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e21db1b726db4b05a28f478595fb7adb621dfddb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;embed&lt;/code&gt; tag takes the idea of template inheritance to the level of content fragments. While template inheritance allows for &quot;document skeletons&quot;, which are filled with life by child templates, the &lt;code&gt;embed&lt;/code&gt; tag allows you to create &quot;skeletons&quot; for smaller units of content and re-use and fill them anywhere you like.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="157e33f77b4422d38f7d255c2607c6b805cf5182" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;escape&lt;/code&gt; filter can also be used in other contexts than HTML thanks to an optional argument which defines the escaping strategy to use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b054688f3b6d5e5d45b3d622daf62124750c2ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;escape&lt;/code&gt; filter escapes a string for safe insertion into the final output. It supports different escaping strategies depending on the template context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac5d7328582ac96c6d97cef791b4d7806906c198" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;escape&lt;/code&gt; filter supports the following escaping strategies:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bde417128526d71fede9fb78614f2a447ea32142" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;escaper&lt;/code&gt; extension adds automatic output escaping to Twig. It defines a tag, &lt;code&gt;autoescape&lt;/code&gt;, and a filter, &lt;code&gt;raw&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bffba75408b4ea4103cc0fde4ba7531e9090e1b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extends&lt;/code&gt; tag can be used to extend a template from another one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="817d160418c5d5d0f0b110915bfd12116b87f7a3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extends&lt;/code&gt; tag is the key here. It tells the template engine that this template &quot;extends&quot; another template. When the template system evaluates this template, first it locates the parent. The extends tag should be the first tag in the template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88f5632df3f44be1b9cb73c817fec2a161f90776" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;first&lt;/code&gt; filter returns the first &quot;element&quot; of a sequence, a mapping, or a string:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="361510c9c5bdc43866136662fe460a8219f82b32" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flush&lt;/code&gt; tag tells Twig to flush the output buffer:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3dc5950d236340577fe0c9778a003f1c3084766" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;format&lt;/code&gt; filter formats a given string by replacing the placeholders (placeholders follows the &lt;a href=&quot;https://secure.php.net/sprintf&quot;&gt;sprintf&lt;/a&gt; notation):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbb417d50ceb0df7bcca0fa55a5c0aa697ce98f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;from&lt;/code&gt; tag imports &lt;a href=&quot;macro&quot;&gt;macro&lt;/a&gt; names into the current namespace. The tag is documented in detail in the documentation for the &lt;a href=&quot;import&quot;&gt;import&lt;/a&gt; tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a68801fb748ab295cba3984228f16e6c585c011f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getOperators()&lt;/code&gt; methods lets you add new operators. Here is how to add &lt;code&gt;!&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt;, and &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operators:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="168a76bbaa0bf4b00f9b4ae6503fd3417b7cbf84" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getSourceContext()&lt;/code&gt; method must return an instance of &lt;code&gt;Twig_Source&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac4d775157865531855cbaeed2a36af803a54709" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getTag()&lt;/code&gt; method must return the tag we want to parse, here &lt;code&gt;set&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="661164ace9ec8a163d8ad3363886805db865b969" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getTests()&lt;/code&gt; method lets you add new test functions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2f0fb6d7b36b47835b1e9599edddae47fa30542" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;if&lt;/code&gt; statement in Twig is comparable with the if statements of PHP.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61b1df8387204cf8851a30a6541a8dc4600e4c96" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;in&lt;/code&gt; operator performs containment test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d22f5f290a7b8a1fed18d253ad4143ebaac31e4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;include&lt;/code&gt; function returns the rendered content of a template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d520db4926c547e24c082c125ff4393aaebbe16c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;include&lt;/code&gt; statement includes a template and returns the rendered content of that file into the current namespace:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c00dccd11bc69f2a5a916c034205674c6f1358b8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;is&lt;/code&gt; operator performs tests. Tests can be used to test a variable against a common expression. The right operand is name of the test:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5700677a49b4856951fe1d2ce4a31213a0d614bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;isFresh()&lt;/code&gt; method must return &lt;code&gt;true&lt;/code&gt; if the current cached template is still fresh, given the last modification time, or &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a7e7afd97cb725f93cbf08db598c05fb380f854" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;join&lt;/code&gt; filter returns a string which is the concatenation of the items of a sequence:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac64c5d2ed1087cc55710a50424e31d04536a2a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;json_encode&lt;/code&gt; filter returns the JSON representation of a value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37df48f92877e1a150fda994b1de24710042dd9e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;keys&lt;/code&gt; filter returns the keys of an array. It is useful when you want to iterate over the keys of an array:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="410b6b2171eacc088a408761d4c973c89b3f4ba9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;last&lt;/code&gt; filter returns the last &quot;element&quot; of a sequence, a mapping, or a string:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d49bb3b8bd12457ee5a65655af737d8407cd41f3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;length&lt;/code&gt; filter returns the number of items of a sequence or mapping, or the length of a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d9fa90530366866598478026d28321914ae37c6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;loop.length&lt;/code&gt;, &lt;code&gt;loop.revindex&lt;/code&gt;, &lt;code&gt;loop.revindex0&lt;/code&gt;, and &lt;code&gt;loop.last&lt;/code&gt; variables are only available for PHP arrays, or objects that implement the &lt;code&gt;Countable&lt;/code&gt; interface. They are also not available when looping with a condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af30b7d5c04220a7b0351843917a0618ce56493c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lower&lt;/code&gt; filter converts a value to lowercase:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6164aabc73042acc10266f499c62d5afc3bd0012" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;merge&lt;/code&gt; filter also works on hashes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce5234404419a5c9c04df93914f8d9afd3be17c1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;merge&lt;/code&gt; filter merges an array with another array:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12f2049de90207e2d4a3203b1fac4d18b74a11c9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;nl2br&lt;/code&gt; filter inserts HTML line breaks before all newlines in a string:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbd8572e3e73141f20f341c09b33e9288bb5a5fd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;nl2br&lt;/code&gt; filter pre-escapes the input before applying the transformation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8da1ff778152ee852452db2ee78e5cda54e0c89" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;node&lt;/code&gt; sub-node will contain an expression of &lt;code&gt;my_value&lt;/code&gt;. Node-based tests also have access to the &lt;code&gt;arguments&lt;/code&gt; node. This node will contain the various other arguments that have been provided to your test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f81837a441e58e822553187f0220f2b6c83aa26a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;number_format&lt;/code&gt; filter formats numbers. It is a wrapper around PHP's &lt;a href=&quot;https://secure.php.net/number_format&quot;&gt;number_format&lt;/a&gt; function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfeb5f43cc45c37204ec8585d5e11935374b82af" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;optimizer&lt;/code&gt; extension optimizes the node tree before compilation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95416bcddf7dbb8bce6fbbf66b623d07eab4af1e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parent()&lt;/code&gt; call will return the content of the &lt;code&gt;sidebar&lt;/code&gt; block as defined in the &lt;code&gt;base.html&lt;/code&gt; template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57ddeedd18626f308f64505bbac8ead769095428" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parent()&lt;/code&gt; function automatically determines the correct inheritance tree, so it can be used when overriding a block defined in an imported template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="941dcd9d7e54290385f7acb95f98b200c398b476" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parse()&lt;/code&gt; method is invoked whenever the parser encounters a &lt;code&gt;set&lt;/code&gt; tag. It should return a &lt;code&gt;Twig_Node&lt;/code&gt; instance that represents the node (the &lt;code&gt;Project_Set_Node&lt;/code&gt; calls creating is explained in the next section).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f92cd61d4593f13bb123e2f225dcda2c9ffc1ba5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;profiler&lt;/code&gt; extension enables a profiler for Twig templates; it should only be used on your development machines as it adds some overhead:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c724d762472523da2c71275d9198ed9b88f76d2b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;random&lt;/code&gt; function returns a random value depending on the supplied parameter type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0ff25b1e3325b2af1618c52320802cb0e0caa67" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;range&lt;/code&gt; function works as the native PHP &lt;a href=&quot;https://secure.php.net/range&quot;&gt;range&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b3020ecc8382592217b30aa4ee4d2cdbf681fb9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;raw&lt;/code&gt; filter marks the value as being &quot;safe&quot;, which means that in an environment with automatic escaping enabled this variable will not be escaped if &lt;code&gt;raw&lt;/code&gt; is the last filter applied to it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="002e6c25f1fb886ce85399d06f84ed7db62d819a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;render()&lt;/code&gt; method loads the template passed as a first argument and renders it with the variables passed as a second argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33b18b18c7e998d2b22f6ae7f3f9b06a88dd4811" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;replace&lt;/code&gt; filter formats a given string by replacing the placeholders (placeholders are free-form):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c8b33cdb67049edeed7d2e788399637cd72f3e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reverse&lt;/code&gt; filter reverses a sequence, a mapping, or a string:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceba2e6341ca087afd7ed560d216b7fb2232d6b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;round&lt;/code&gt; filter rounds a number to a given precision:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30b57d8d2f1a7e8a766c55994dbda6df8b66c4da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;round&lt;/code&gt; filter takes two optional arguments; the first one specifies the precision (default is &lt;code&gt;0&lt;/code&gt;) and the second the rounding method (default is &lt;code&gt;common&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="210e8b05c762c417ea9b258603b5f4f419ff0e50" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sandbox&lt;/code&gt; extension can be used to evaluate untrusted code. Access to unsafe attributes and methods is prohibited. The sandbox security is managed by a policy instance. By default, Twig comes with one policy class: &lt;code&gt;Twig_Sandbox_SecurityPolicy&lt;/code&gt;. This class allows you to white-list some tags, filters, properties, and methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb4920ea5c29b5be966292f879030a9762560d1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sandbox&lt;/code&gt; tag can be used to enable the sandboxing mode for an included template, when sandboxing is not enabled globally for the Twig environment:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb517d481dd15e34b020a9ac6ce5715295d2e3bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sandbox&lt;/code&gt; tag can only be used to sandbox an include tag and it cannot be used to sandbox a section of a template. The following example won't work:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87d56e5c630766ca43c12a09991d8fec6cc7ae96" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sandbox&lt;/code&gt; tag is only available when the sandbox extension is enabled (see the &lt;a href=&quot;../api&quot;&gt;Twig for Developers&lt;/a&gt; chapter).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3e756734f4349287443f7deba06e83b4c2d7235" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;set&lt;/code&gt; tag can also be used to 'capture' chunks of text:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="564e12fb8952aa16adba44fd29140d6c57bbddf0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;set&lt;/code&gt; tag is part of the Core extension and as such is always available. The built-in version is slightly more powerful and supports multiple assignments by default (cf. the template designers chapter for more information).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8d038055268623eb1d19ae195f5096858fe1711" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;slice&lt;/code&gt; filter extracts a slice of a sequence, a mapping, or a string:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a21681f738ead2d68b63c3ffc9b79c83c255cfd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;slice&lt;/code&gt; filter works as the &lt;a href=&quot;https://secure.php.net/array_slice&quot;&gt;array_slice&lt;/a&gt; PHP function for arrays and &lt;a href=&quot;https://secure.php.net/mb-substr&quot;&gt;mb_substr&lt;/a&gt; for strings with a fallback to &lt;a href=&quot;https://secure.php.net/substr&quot;&gt;substr&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8eb8880699963f4b7f528dff66dfd967f79df38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sort&lt;/code&gt; filter sorts an array:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a6f98b9c71cee8034cf1a2020ff737bee65cc3b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;source&lt;/code&gt; function returns the content of a template without rendering it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25c42306f4cfeac4b2375f9073a9b4fe7cdc343d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;split&lt;/code&gt; filter splits a string by the given delimiter and returns a list of strings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0221d7c22463f0c39fab986796b3b00150bf70bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;striptags&lt;/code&gt; filter strips SGML/XML tags and replace adjacent whitespace by one space:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d629c45ce826a8e656be118f509c51936f367177" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;template_from_string&lt;/code&gt; function is not available by default. You must add the &lt;code&gt;Twig_Extension_StringLoader&lt;/code&gt; extension explicitly when creating your Twig environment:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcbb569095312224e89ee037de9e4b2116a3f71f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;template_from_string&lt;/code&gt; function loads a template from a string:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81e4be597fd5bd22bd6bfb07c087eda23e318e59" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;title&lt;/code&gt; filter returns a titlecased version of the value. Words will start with uppercase letters, all remaining characters are lowercase:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="895eb83c406f96a86bfcbf154a9737c4ac38e383" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trim&lt;/code&gt; filter strips whitespace (or other characters) from the beginning and end of a string:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0070319a10a5241532916999018023aef08d7429" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;upper&lt;/code&gt; filter converts a value to uppercase:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6413d3c0b9555adf8ef85a36003c89c957f8e091" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;url_encode&lt;/code&gt; filter percent encodes a given string as URL segment or an array as query string:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7936890c536201493543868801518da19d18fac6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;use&lt;/code&gt; statement tells Twig to import the blocks defined in &lt;code&gt;blocks.html&lt;/code&gt; into the current template (it's like macros, but for blocks):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaadc7bc4aabf29fa095c1fd0b1b415a5c0ab9fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;use&lt;/code&gt; tag only imports a template if it does not extend another template, if it does not define macros, and if the body is empty. But it can &lt;em&gt;use&lt;/em&gt; other templates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6d3bfe65fc1f76559b5c728ee42ff72e5b6d25b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;verbatim&lt;/code&gt; tag marks sections as being raw text that should not be parsed. For example to put Twig syntax as example into a template you can use this snippet:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3715b8091ee0166bf63e86dfa81bdf94b5fe55cd" translate="yes" xml:space="preserve">
          <source>The Compiler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2653f51b9af961513d55ee8d6255738294c4bc9" translate="yes" xml:space="preserve">
          <source>The Lexer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01b5106be745c239227fc77fa5ae7d35debe59ca" translate="yes" xml:space="preserve">
          <source>The Parser</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aa531182510623b9eca298e680cd9095de3f1c4" translate="yes" xml:space="preserve">
          <source>The Twig built-in &lt;code&gt;..&lt;/code&gt; operator is just syntactic sugar for the &lt;code&gt;range&lt;/code&gt; function (with a step of &lt;code&gt;1&lt;/code&gt;, or &lt;code&gt;-1&lt;/code&gt; if the start is greater than the end):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee2bef423b1321304ef8bc4277dfe49ba3918560" translate="yes" xml:space="preserve">
          <source>The Twig core extensions are great examples of how extensions work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8d7560db836c961304fd1fc1b510de4c324573f" translate="yes" xml:space="preserve">
          <source>The Twig logo is &amp;copy; 2010&amp;ndash;2018 Symfony</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6910e410325efbaa3a6f01140b886fac5d854aa4" translate="yes" xml:space="preserve">
          <source>The above &lt;code&gt;import&lt;/code&gt; call imports the &quot;forms.html&quot; file (which can contain only macros, or a template and some macros), and import the functions as items of the &lt;code&gt;forms&lt;/code&gt; variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2a7364c525627057337b80e1098dc4d0e6644e2" translate="yes" xml:space="preserve">
          <source>The above example shows how you can create tests that use a node class. The node class has access to one sub-node called 'node'. This sub-node contains the value that is being tested. When the &lt;code&gt;odd&lt;/code&gt; filter is used in code such as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c378881b0e512398e8db2c4814815ef008a9ffc9" translate="yes" xml:space="preserve">
          <source>The above example will be rendered as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc1f748312fb14ba7531d73812530d6f72dd4170" translate="yes" xml:space="preserve">
          <source>The above sample shows the default whitespace control modifier, and how you can use it to remove whitespace around tags. Trimming space will consume all whitespace for that side of the tag. It is possible to use whitespace trimming on one side of a tag:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8c35b5b10b134bd0cd94e3750670f5c9ee5b97c" translate="yes" xml:space="preserve">
          <source>The above snippet of code would print all numbers from 0 to 10.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08428d17cf82e612a5c47958cda8b6ca3d575aaa" translate="yes" xml:space="preserve">
          <source>The advantage is that the special loop variable will count correctly thus not counting the users not iterated over. Keep in mind that properties like &lt;code&gt;loop.last&lt;/code&gt; will not be defined when using loop conditions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4d982256c3cdae4fe94cfe18ac1e970c60e736d" translate="yes" xml:space="preserve">
          <source>The application passes variables to the templates for manipulation in the template. Variables may have attributes or elements you can access, too. The visual representation of a variable depends heavily on the application providing it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d54bfffb112e10817fd1518e43290261ac533d03" translate="yes" xml:space="preserve">
          <source>The argument must be in one of PHP&amp;rsquo;s supported &lt;a href=&quot;https://secure.php.net/manual/en/datetime.formats.php&quot;&gt;date and time formats&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1caf45b85089c639905dd78cd0e8fbbe9f115fa" translate="yes" xml:space="preserve">
          <source>The array can contain any number of values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a93dff14b467666990c56a9cb4fab5610c8a7a8b" translate="yes" xml:space="preserve">
          <source>The assigned value can be any valid &lt;a href=&quot;../templates#twig-expressions&quot;&gt;Twig expressions&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="946773ce8aab10de068321e15269b1bddacf9779" translate="yes" xml:space="preserve">
          <source>The automatic escaping strategy can be configured via the &lt;a href=&quot;api#environment-options&quot;&gt;autoescape&lt;/a&gt; option and defaults to &lt;code&gt;html&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33d8627a43ed2cce4d479c40339634c89efe8989" translate="yes" xml:space="preserve">
          <source>The base template class to use for generated templates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f847d2c722947336e4d6a55582603d95e1e31ac" translate="yes" xml:space="preserve">
          <source>The chapter &lt;a href=&quot;../api&quot;&gt;Twig for Developers&lt;/a&gt; gives more information about when and how automatic escaping is applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94f896c527ca0da05bda1f21cf43aa560cd6af04" translate="yes" xml:space="preserve">
          <source>The charset used by the templates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0683062f4f3db674163014c49b61054695302ba" translate="yes" xml:space="preserve">
          <source>The compiler implements a fluid interface and provides methods that helps the developer generate beautiful and readable PHP code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e485849b9935dbc80376c4fd4020360cdd89d525" translate="yes" xml:space="preserve">
          <source>The context is passed by default to the template but you can also pass additional variables:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8401445a147ae259c702f51dcb47455d24f6ea8" translate="yes" xml:space="preserve">
          <source>The core, escaper, and optimizer extensions do not need to be added to the Twig environment, as they are registered by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b75761bd813f44788ddffff0dbe11c55ec23f29c" translate="yes" xml:space="preserve">
          <source>The current iteration of the loop. (0 indexed)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ae957376dd8bf52f87cded346b35444762a2644" translate="yes" xml:space="preserve">
          <source>The current iteration of the loop. (1 indexed)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae7b5e2210fb962eaed4c6b2c3ce02ff6483fe06" translate="yes" xml:space="preserve">
          <source>The default compiler (&lt;code&gt;Twig_Compiler&lt;/code&gt;) can be changed by calling the &lt;code&gt;setCompiler()&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1337a952abcbae566b8e83ec6f422c97918f1993" translate="yes" xml:space="preserve">
          <source>The default lexer (&lt;code&gt;Twig_Lexer&lt;/code&gt;) can be changed by calling the &lt;code&gt;setLexer()&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bc40acbce05be030b05bcf8f913176956352470" translate="yes" xml:space="preserve">
          <source>The default parser (&lt;code&gt;Twig_TokenParser&lt;/code&gt;) can be changed by calling the &lt;code&gt;setParser()&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1e4faa4acd0a6c2b7bacdf0bf279a1b394101f0" translate="yes" xml:space="preserve">
          <source>The default timezone can also be set globally by calling &lt;code&gt;setTimezone()&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="626342b14315e9f248083458c04ae2b58c149b44" translate="yes" xml:space="preserve">
          <source>The defaults set for &lt;code&gt;number_format&lt;/code&gt; can be over-ridden upon each call using the additional parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efeb65cba867482b5ada38208846cd82dca68aeb" translate="yes" xml:space="preserve">
          <source>The documentation page for the &lt;a href=&quot;tags/extends&quot;&gt;extends&lt;/a&gt; tag describes more advanced features like block nesting, scope, dynamic inheritance, and conditional inheritance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7333baa1058271fcbaa17d5ac64f7ac1678e428" translate="yes" xml:space="preserve">
          <source>The easiest and most flexible is importing the whole module into a variable. That way you can access the attributes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b788ceae4ae9f783bbeb47a7d912da0d56e084b" translate="yes" xml:space="preserve">
          <source>The easiest way is to output the variable delimiter (&lt;code&gt;{{&lt;/code&gt;) by using a variable expression:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a3663987e5f711fc8bba0f3d61ad82ecaffcea1" translate="yes" xml:space="preserve">
          <source>The escaping rules are implemented as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a56689b9c35ebbbcc2772b31e4a4dcb595bdcdd" translate="yes" xml:space="preserve">
          <source>The filesystem loader also supports namespaced templates. This allows to group your templates under different namespaces which have their own template paths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9f6a40483ad9ac1f341a0971ee09d160adc287b" translate="yes" xml:space="preserve">
          <source>The filter will receive all dynamic part values before the normal filter arguments, but after the environment and the context. For instance, a call to &lt;code&gt;'foo'|a_path_b()&lt;/code&gt; will result in the following arguments to be passed to the filter: &lt;code&gt;('a', 'b', 'foo')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0f6b794ddb26e904320ee5020edce6046e5531e" translate="yes" xml:space="preserve">
          <source>The first argument passed to the &lt;code&gt;Twig_Filter&lt;/code&gt; constructor is the name of the filter you will use in templates and the second one is the PHP callable to associate with it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2b14df30f46d92e75dbaa41948d383844c76801" translate="yes" xml:space="preserve">
          <source>The first newline after a template tag is removed automatically (like in PHP.) Whitespace is not further modified by the template engine, so each whitespace (spaces, tabs, newlines etc.) is returned unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a5ac5bb1e5d2d56c45815ca12d1c104b632182f" translate="yes" xml:space="preserve">
          <source>The first section of this chapter describes how to extend Twig easily. If you want to reuse your changes in different projects or if you want to share them with others, you should then create an extension as described in the following section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16567a2a5f2f0181293e258acdb167ab9f0567c1" translate="yes" xml:space="preserve">
          <source>The first solution may indeed work for this simplified example. But imagine we add a sidebar, which may again contain different, recurring structures of content. Now we would need to create intermediate base templates for all occurring combinations of content structure and sidebar structure... and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d08a5f0510c148121acba15829a11ed98a53e38" translate="yes" xml:space="preserve">
          <source>The first ternary statement is not escaped: &lt;code&gt;hello&lt;/code&gt; is marked as being safe and Twig does not escape static values (see &lt;a href=&quot;../tags/autoescape&quot;&gt;escape&lt;/a&gt;). In the second ternary statement, even if &lt;code&gt;hello&lt;/code&gt; is marked as safe, &lt;code&gt;hola&lt;/code&gt; remains unsafe and so is the whole expression. The third ternary statement is marked as safe and the result is not escaped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a92d6691ff4d57bf9000b437e140c0936a7eac0" translate="yes" xml:space="preserve">
          <source>The following comparison operators are supported in any expression: &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, and &lt;code&gt;&amp;lt;=&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8e4157f683171782d1eda1124f6096441356e08" translate="yes" xml:space="preserve">
          <source>The following example removes all HTML tags from the &lt;code&gt;name&lt;/code&gt; and title-cases it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c16b7008a9692110f1fa6e35b3176621a1908aed" translate="yes" xml:space="preserve">
          <source>The following filters will be matched by the above defined dynamic filter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac279778ea8ebc8ca1a2612798290960dbc2872a" translate="yes" xml:space="preserve">
          <source>The following operators don't fit into any of the other categories:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87ad7915cdbf5aabf9ec8f4e6f650717a3e51ad5" translate="yes" xml:space="preserve">
          <source>The following options are available:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6571118dc0ea8666d12be6ef5c03078a6db3b49" translate="yes" xml:space="preserve">
          <source>The following variables are always available in templates:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="773ec5e3fd78e37009d77619523442f212da7c0f" translate="yes" xml:space="preserve">
          <source>The format specifier is the same as supported by &lt;a href=&quot;https://secure.php.net/date&quot;&gt;date&lt;/a&gt;, except when the filtered data is of type &lt;a href=&quot;https://secure.php.net/DateInterval&quot;&gt;DateInterval&lt;/a&gt;, when the format must conform to &lt;a href=&quot;https://secure.php.net/DateInterval.format&quot;&gt;DateInterval::format&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28cfa2cf2683aecfcabe0faf80363cea4f3e45d2" translate="yes" xml:space="preserve">
          <source>The function uses the same template loaders as the ones used to include templates. So, if you are using the filesystem loader, the templates are looked for in the paths defined by it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76f07d6136fe6a0251e0cf40140475c3c70f3874" translate="yes" xml:space="preserve">
          <source>The generated template for a &lt;code&gt;Hello {{ name }}&lt;/code&gt; template reads as follows (the actual output can differ depending on the version of Twig you are using):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68b9b9687e6fadedb57a8e704d9aea7510573ccc" translate="yes" xml:space="preserve">
          <source>The goal of the &lt;code&gt;vertical_boxes_skeleton.twig&lt;/code&gt; template being to factor out the HTML markup for the boxes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3ec7fa62db972a7d113d6329bf7c14361ed082a" translate="yes" xml:space="preserve">
          <source>The included template &lt;code&gt;render_box.html&lt;/code&gt; is able to access the &lt;code&gt;box&lt;/code&gt; variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2142ed5c914046b44b4e6ee51dee1a0740846ff" translate="yes" xml:space="preserve">
          <source>The key-features are...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4350e31bd1bcfca74d1195d7be9ce832e884de3d" translate="yes" xml:space="preserve">
          <source>The last step is done by the compiler. It takes a node tree as an input and generates PHP code usable for runtime execution of the template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e4c8f6e9c1c90fbd784bf935a1323945a0e100c" translate="yes" xml:space="preserve">
          <source>The lexer tokenizes a template source code into a token stream (each token is an instance of &lt;code&gt;Twig_Token&lt;/code&gt;, and the stream is an instance of &lt;code&gt;Twig_TokenStream&lt;/code&gt;). The default lexer recognizes 13 different token types:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b363acbbfa4e5d24f22616535518c19270ac8fd" translate="yes" xml:space="preserve">
          <source>The macro can then be called at will:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0c808dab61aa2c1413b6a9789b8f73fdb1f7113" translate="yes" xml:space="preserve">
          <source>The main motivation for writing an extension is to move often used code into a reusable class like adding support for internationalization. An extension can define tags, filters, tests, operators, global variables, functions, and node visitors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b20ae2ab298f893eea70b6e719d27ca7c00f701" translate="yes" xml:space="preserve">
          <source>The main template can also override any imported block. If the template already defines the &lt;code&gt;sidebar&lt;/code&gt; block, then the one defined in &lt;code&gt;blocks.html&lt;/code&gt; is ignored. To avoid name conflicts, you can rename imported blocks:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57df31c6d47c78e99c3d0e5645e2ae4906c69b8f" translate="yes" xml:space="preserve">
          <source>The most powerful part of Twig is template inheritance. Template inheritance allows you to build a base &quot;skeleton&quot; template that contains all the common elements of your site and defines &lt;strong&gt;blocks&lt;/strong&gt; that child templates can override.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3ae71e03e841e47ac1f9239e08fed4f8f7f1033" translate="yes" xml:space="preserve">
          <source>The name of the template depends on the template loader. For instance, the &lt;code&gt;Twig_Loader_Filesystem&lt;/code&gt; allows you to access other templates by giving the filename. You can access templates in subdirectories with a slash:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="addc305d15e7077a30488beca9ad7fe5dd8d2645" translate="yes" xml:space="preserve">
          <source>The number of items in the sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f55c0141f00d125146e625b42450cdd91a9bd7e1" translate="yes" xml:space="preserve">
          <source>The number of iterations from the end of the loop (0 indexed)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4908293726276d229be0d3d16697517841de110" translate="yes" xml:space="preserve">
          <source>The number of iterations from the end of the loop (1 indexed)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78bc6ac3ffefb69fa5a9d53de83bd329eaec89f9" translate="yes" xml:space="preserve">
          <source>The operator precedence is as follows, with the lowest-precedence operators listed first: &lt;code&gt;b-and&lt;/code&gt;, &lt;code&gt;b-xor&lt;/code&gt;, &lt;code&gt;b-or&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;in&lt;/code&gt;, &lt;code&gt;matches&lt;/code&gt;, &lt;code&gt;starts with&lt;/code&gt;, &lt;code&gt;ends with&lt;/code&gt;, &lt;code&gt;..&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;~&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;//&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;is&lt;/code&gt;, &lt;code&gt;**&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;[]&lt;/code&gt;, and &lt;code&gt;.&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e5f774c81db74dce3749cbfa6c413108a7708fb" translate="yes" xml:space="preserve">
          <source>The output will be similar to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="673abb75de556e0885cff50b28e5a9cae662ebae" translate="yes" xml:space="preserve">
          <source>The parent context</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="612ced3f56e7cfeac2917746ea7fba6d6eab800d" translate="yes" xml:space="preserve">
          <source>The parser converts the token stream into an AST (Abstract Syntax Tree), or a node tree (an instance of &lt;code&gt;Twig_Node_Module&lt;/code&gt;). The core extension defines the basic nodes like: &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;, ... and the expression nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5655ed1ff8aed24268a1afb344a9c125842ef305" translate="yes" xml:space="preserve">
          <source>The parsing process is simplified thanks to a bunch of methods you can call from the token stream (&lt;code&gt;$this-&amp;gt;parser-&amp;gt;getStream()&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3574d65109403c2cb81586702c761af2d0ad345" translate="yes" xml:space="preserve">
          <source>The policy object is the first argument of the sandbox constructor:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="476b1568969ccc06c6d3438260ae7806fade3fe9" translate="yes" xml:space="preserve">
          <source>The recommended way to install Twig is via Composer:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aa8f413f50516f554d66069df8fd0a454a1c75c" translate="yes" xml:space="preserve">
          <source>The rendering of a Twig template can be summarized into four key steps:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0805c8022dee59c0d1d0f8ba4a500510f262ee9b" translate="yes" xml:space="preserve">
          <source>The resolution algorithm is the same as the one used for the &lt;code&gt;.&lt;/code&gt; notation, except that the item can be any valid expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6c5f1e9e032fae94b06416d0874435a647e4649" translate="yes" xml:space="preserve">
          <source>The rules to determine if an expression is &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; are the same as in PHP; here are the edge cases rules:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ed34948a81970e240357513831102e2a671eb87" translate="yes" xml:space="preserve">
          <source>The second solution involves duplication of common code with all its negative consequences: any change involves finding and editing all affected copies of the structure, correctness has to be verified for each copy, copies may go out of sync by careless modifications etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28f59f1aaed7ee9b4d5d01401a14b713526c2294" translate="yes" xml:space="preserve">
          <source>The separator between elements is an empty string per default, but you can define it with the optional first parameter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c26d2b17c16e7bdfb2f6cff610f9b02b3dcb587" translate="yes" xml:space="preserve">
          <source>The simplest form of expressions are literals. Literals are representations for PHP types such as strings, numbers, and arrays. The following literals exist:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bc546a32b1a826afc5723deeed49d9fe549ac18" translate="yes" xml:space="preserve">
          <source>The simplest way to configure Twig to load templates for your application looks roughly like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5950f218b5e82f58b716b595186a9cd89b310099" translate="yes" xml:space="preserve">
          <source>The simplest way to use methods is to define them on the extension itself:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="935a6993e4dbedb42b8a75c15f45ed186cb819a6" translate="yes" xml:space="preserve">
          <source>The tag is not flexible as you cannot use it in an expression:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="570c7975cafae6b1fc10dda241e66146d26a496e" translate="yes" xml:space="preserve">
          <source>The tag outputs something;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb9f43c9283804263a29fbd1d4b14bfba3d67d59" translate="yes" xml:space="preserve">
          <source>The template name can be any valid Twig expression:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9bcd4837a06c852bffe5d7e7bbe04297acc58ed" translate="yes" xml:space="preserve">
          <source>Then, add the filter to your Twig environment:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ddf49563b69a5ffb88c7c6ecffd187bc79ffc70" translate="yes" xml:space="preserve">
          <source>Then, the &lt;strong&gt;parser&lt;/strong&gt; converts the token stream into a meaningful tree of nodes (the Abstract Syntax Tree);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54045c78156842fb4a2d2b71f752119954a2c76a" translate="yes" xml:space="preserve">
          <source>There are two kinds of delimiters: &lt;code&gt;{% ... %}&lt;/code&gt; and &lt;code&gt;{{ ... }}&lt;/code&gt;. The first one is used to execute statements such as for-loops, the latter prints the result of an expression to the template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87d6b5aac9cf1e2f97301f786b8e656e193b37c2" translate="yes" xml:space="preserve">
          <source>There are two ways to import templates. You can import the complete template into a variable or request specific macros from it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06f4085a7a27e0a51ed63ecc74013b50005df7fd" translate="yes" xml:space="preserve">
          <source>These defaults can be easily changed through the core extension:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c98f2a0bf2c292d3c91d370c544ce89ecac34e16" translate="yes" xml:space="preserve">
          <source>These two solutions do not scale well because they each have a major drawback:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23f6955d23835bd73fbc69e62d45469c1ec33446" translate="yes" xml:space="preserve">
          <source>Think of an embedded template as a &quot;micro layout skeleton&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb6a6eec4d428662641f8d3c2820dfb951d81a46" translate="yes" xml:space="preserve">
          <source>This behavior depends on the application embedding Twig.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38683bc182c9b9e9a72b8cf1d5d34761b07fee44" translate="yes" xml:space="preserve">
          <source>This can be easily achieved with the following code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd75a429027769005ca3c431661e9140bda2b034" translate="yes" xml:space="preserve">
          <source>This chapter describes the API to Twig and not the template language. It will be most useful as reference to those implementing the template interface to the application and not those who are creating Twig templates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0dcaa483477b7fec5f6edb94f4eaad2cbf30698" translate="yes" xml:space="preserve">
          <source>This document describes the syntax and semantics of the template engine and will be most useful as reference to those creating Twig templates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ace843964eff2ec15ebad79cc831cd3cf1cb8441" translate="yes" xml:space="preserve">
          <source>This filter relies on the &lt;a href=&quot;https://secure.php.net/iconv&quot;&gt;iconv&lt;/a&gt; extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83d4e7381cf870e644b158bfaa0519c6dbf2e670" translate="yes" xml:space="preserve">
          <source>This is the documentation for Twig, the flexible, fast, and secure template engine for PHP.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a4e79c5da9275c422612b015b496b8e6044ddb6" translate="yes" xml:space="preserve">
          <source>This is very convenient but not recommended as it makes template compilation depend on runtime dependencies even if they are not needed (think for instance as a dependency that connects to a database engine).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea23bac535d13b11eb65c1ae34222ac10317e809" translate="yes" xml:space="preserve">
          <source>This loader is very useful for unit testing. It can also be used for small projects where storing all templates in a single PHP file might make sense.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fa9f2240361a3ee4fb58fc704cdf516a783509a" translate="yes" xml:space="preserve">
          <source>This method won't catch any sandbox policy violations because the policy is enforced during template rendering (as Twig needs the context for some checks like allowed methods on objects).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d987f80afc8f1be0bae0a1b1849b1101459785c6" translate="yes" xml:space="preserve">
          <source>This recipe is the continuation of the previous one. Even if you store the contributed templates in a database, you might want to keep the original/base templates on the filesystem. When templates can be loaded from different sources, you need to use the &lt;code&gt;Twig_Loader_Chain&lt;/code&gt; loader.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e5a70f22e0e3943bf23733efd34809e13affed5" translate="yes" xml:space="preserve">
          <source>This recipe was inspired by the following Django wiki page: &lt;a href=&quot;https://code.djangoproject.com/wiki/ExtendingTemplates&quot;&gt;https://code.djangoproject.com/wiki/ExtendingTemplates&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b9272055aa356bf24d7aa3c56d2da8a6b08cdd6" translate="yes" xml:space="preserve">
          <source>This section describes the features added by the built-in extensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae100f2d3f02efd9269340625f673bbda6624380" translate="yes" xml:space="preserve">
          <source>This section gives you a brief introduction to the PHP API for Twig.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5736e92ed139d7ba64706ce677dfca132f14d10d" translate="yes" xml:space="preserve">
          <source>This tag is not meant to &quot;optimize&quot; the size of the generated HTML content but merely to avoid extra whitespace between HTML tags to avoid browser rendering quirks under some circumstances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06ae559a1a3118598da1ab09690c171423c4f14f" translate="yes" xml:space="preserve">
          <source>This will create a template environment with the default settings and a loader that looks up the templates in the &lt;code&gt;/path/to/templates/&lt;/code&gt; folder. Different loaders are available and you can also write your own if you want to load templates from a database or other resources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eb832eb02fec68d1c91369120b18a5908b9e34a" translate="yes" xml:space="preserve">
          <source>Three steps are needed to define a new tag:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1f7dc891b5e5d1797163b556e805123c9369e4f" translate="yes" xml:space="preserve">
          <source>Timezone</source>
          <target state="translated">Timezone</target>
        </trans-unit>
        <trans-unit id="d19ceca501465c339e3bcf2bc0d8ff02bb697d6c" translate="yes" xml:space="preserve">
          <source>Tip</source>
          <target state="translated">Tip</target>
        </trans-unit>
        <trans-unit id="1c3a3f99b4f351a3a56c5bdac3c697d5452fc289" translate="yes" xml:space="preserve">
          <source>To add a filter to an extension, you need to override the &lt;code&gt;getFilters()&lt;/code&gt; method. This method must return an array of filters to add to the Twig environment:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9838487cbd27f08cc48dea1a0411c383a932b2c8" translate="yes" xml:space="preserve">
          <source>To apply a filter on a section of code, wrap it in the &lt;a href=&quot;tags/filter&quot;&gt;filter&lt;/a&gt; tag:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4c58be64438c26f383a66eb2663df1846bfacfa" translate="yes" xml:space="preserve">
          <source>To change the block delimiters, you need to create your own lexer object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2738ba060aad383469ea8d0b84018026dac0e9d" translate="yes" xml:space="preserve">
          <source>To comment-out part of a line in a template, use the comment syntax &lt;code&gt;{# ...
#}&lt;/code&gt;. This is useful for debugging or to add information for other template designers or yourself:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a733121523112e760a7e8b29885945c210de2ed" translate="yes" xml:space="preserve">
          <source>To easily remove all deprecated feature usages from your templates, write and run a script along the lines of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f36cfc4945a0a2add9986f0f898b2a2812f78da" translate="yes" xml:space="preserve">
          <source>To escape words and characters in the date format use &lt;code&gt;\\&lt;/code&gt; in front of each character:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ef5c2a4e82dd6e65b0e553cfd760b57830b2a95" translate="yes" xml:space="preserve">
          <source>To format negative numbers, wrap the number with parentheses (needed because of Twig's &lt;a href=&quot;../templates#twig-expressions&quot;&gt;precedence of operators&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a255173ad218eef9e3a68f248639c71623fa06b" translate="yes" xml:space="preserve">
          <source>To get around this, force Twig to invalidate the bytecode cache:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cf2ee0ccfeea5c7bdd512b697ea8994f7ee5507" translate="yes" xml:space="preserve">
          <source>To import macros from the current file, use the special &lt;code&gt;_self&lt;/code&gt; variable for the source.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9ab79ef335d639be5bce9016c153dca02225911" translate="yes" xml:space="preserve">
          <source>To keep your extension class clean and lean, inherit from the built-in &lt;code&gt;Twig_Extension&lt;/code&gt; class instead of implementing the interface as it provides empty implementations for all methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b74cd98f71e3ffe850527fbdcd6d2efe7a52be44" translate="yes" xml:space="preserve">
          <source>To learn more about the other installation methods, read the &lt;a href=&quot;installation&quot;&gt;installation&lt;/a&gt; chapter; it also explains how to install the Twig C extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d1cb0a16ca06335afadc2386fc99e9bb9cdbd7a" translate="yes" xml:space="preserve">
          <source>To load a template from a Twig environment, call the &lt;code&gt;load()&lt;/code&gt; method which returns a &lt;code&gt;Twig_TemplateWrapper&lt;/code&gt; instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afb5f8b42eda99730a573de29ee992445a309dcb" translate="yes" xml:space="preserve">
          <source>To overload an already defined filter, test, operator, global variable, or function, re-define it in an extension and register it &lt;strong&gt;as late as possible&lt;/strong&gt; (order matters):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="911dbd69004ee28591d95d7b288601a9d2ab8182" translate="yes" xml:space="preserve">
          <source>To perform a negative test, use the &lt;code&gt;not in&lt;/code&gt; operator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26b501a90a5f2a926fd44a55ef63d7b59c067cf0" translate="yes" xml:space="preserve">
          <source>To render the template with some variables, call the &lt;code&gt;render()&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9f9895d451a4d20595cb005970fb96bb73773c6" translate="yes" xml:space="preserve">
          <source>To understand why Twig exposes so many extension points, let's see how to implement a &lt;em&gt;Lorem ipsum&lt;/em&gt; generator (it needs to know the number of words to generate).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d1582619e7c90204a94f7ffe028afe72341fb11" translate="yes" xml:space="preserve">
          <source>True if first iteration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6aaca4860d1d53183300670b36edc55b429809a" translate="yes" xml:space="preserve">
          <source>True if last iteration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adfe01d64b287e79f43278660cdb5bdf82bd0ed1" translate="yes" xml:space="preserve">
          <source>Twig</source>
          <target state="translated">Twig</target>
        </trans-unit>
        <trans-unit id="ac92d1c41baa1bf0d0db6d3d73e5eea6bc02e2b8" translate="yes" xml:space="preserve">
          <source>Twig Internals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b469ccab7205877c1f839d055ff0bc0d9a6473de" translate="yes" xml:space="preserve">
          <source>Twig allows expressions everywhere. These work very similar to regular PHP and even if you're not working with PHP you should feel comfortable with it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3460799cc39f1a188e2a0c7ac9c6618151563e7d" translate="yes" xml:space="preserve">
          <source>Twig allows some syntax customization for the block delimiters. It's not recommended to use this feature as templates will be tied with your custom syntax. But for specific projects, it can make sense to change the defaults.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c20363039f76d4051e12f2f37af9a9db00a3bd8" translate="yes" xml:space="preserve">
          <source>Twig allows you to calculate with values. This is rarely useful in templates but exists for completeness' sake. The following operators are supported:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03191eefd0493914679a1488834d1c1c7b0a2dce" translate="yes" xml:space="preserve">
          <source>Twig allows you to put the name of the block after the end tag for better readability:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35c03d0b26a90d03143a63ac69fdcb62f5927a79" translate="yes" xml:space="preserve">
          <source>Twig allows you to put the name of the macro after the end tag for better readability:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01bf3b68c727a71e746a731f5298fdfceeeffd1e" translate="yes" xml:space="preserve">
          <source>Twig also support bitwise operators (&lt;code&gt;b-and&lt;/code&gt;, &lt;code&gt;b-xor&lt;/code&gt;, and &lt;code&gt;b-or&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41175d1a7a58715c75dfcd87a79bddcd7cd3a9c0" translate="yes" xml:space="preserve">
          <source>Twig also supports multiple inheritance with the so called horizontal reuse with the help of the &lt;a href=&quot;tags/use&quot;&gt;use&lt;/a&gt; tag. This is an advanced feature hardly ever needed in regular templates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71ec2dc82e34a07e453b5afdb20205a245f4212a" translate="yes" xml:space="preserve">
          <source>Twig can be easily extended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b71f7b5a80f36e4804a2e876c2900b47f2590d9b" translate="yes" xml:space="preserve">
          <source>Twig can be extended in many ways; you can add extra tags, filters, tests, operators, global variables, and functions. You can even extend the parser itself with node visitors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="015e2e2a6b2d148dd643f55fc94c1f90feaf6958" translate="yes" xml:space="preserve">
          <source>Twig can throw exceptions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c172fdd1a94faa174e6af82f652b98ea6867fd19" translate="yes" xml:space="preserve">
          <source>Twig comes bundled with the following extensions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="584e4509c561852513b8a0ff441a21cc5d9ecae9" translate="yes" xml:space="preserve">
          <source>Twig comes with a PSR-11 compatible runtime loader (&lt;code&gt;Twig_ContainerRuntimeLoader&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f93b38faadcc36bf71c8dbbe019a2de3c1268304" translate="yes" xml:space="preserve">
          <source>Twig does not care where you save your extension on the filesystem, as all extensions must be registered explicitly to be available in your templates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f18b75e9b419f4e36105e76ac128cb2ab458d76d" translate="yes" xml:space="preserve">
          <source>Twig does not escape static expressions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6d4453e1c07f63e7f7f7a7639d5781bdc23f05e" translate="yes" xml:space="preserve">
          <source>Twig extensions are packages that add new features to Twig. Using an extension is as simple as using the &lt;code&gt;addExtension()&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8f7e1fda203acba66c3e075f651eccd9a4706fc" translate="yes" xml:space="preserve">
          <source>Twig filters, functions, and tests runtime implementations can be defined as any valid PHP callable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ac699ffed5dc30e9aef04e3f1b4199b5986c1e4" translate="yes" xml:space="preserve">
          <source>Twig for Developers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25e854d014f922d2149249c37f331a1d0c48a31e" translate="yes" xml:space="preserve">
          <source>Twig for Template Designers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d71ee8988717e2a63ab250feb19606bebbc37ae5" translate="yes" xml:space="preserve">
          <source>Twig generates a deprecation notice (via a call to the &lt;code&gt;trigger_error()&lt;/code&gt; PHP function) where the &lt;code&gt;deprecated&lt;/code&gt; tag is used in a template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e919d373ca9bc1c86a0c1150e2ce34cd7a68d8c" translate="yes" xml:space="preserve">
          <source>Twig is smart enough to not escape an already escaped value by the &lt;a href=&quot;../filters/escape&quot;&gt;escape&lt;/a&gt; filter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21cb446a38a34831df32b35bce3699037b5566da" translate="yes" xml:space="preserve">
          <source>Twig is used by many Open-Source projects like Symfony, Drupal8, eZPublish, phpBB, Piwik, OroCRM; and many frameworks have support for it as well like Slim, Yii, Laravel, Codeigniter and Kohana &amp;mdash; just to name a few.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4587cc8860ed1aa1998dcacdba57df03165ec085" translate="yes" xml:space="preserve">
          <source>Twig is very extensible and you can easily hack it. Keep in mind that you should probably try to create an extension before hacking the core, as most features and enhancements can be handled with extensions. This chapter is also useful for people who want to understand how Twig works under the hood.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="743739118f78c9e8b5bbbd535fbf128921ac4de5" translate="yes" xml:space="preserve">
          <source>Twig needs at least &lt;strong&gt;PHP 7.0.0&lt;/strong&gt; to run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="195a95702149919e3680976695bf08526af00348" translate="yes" xml:space="preserve">
          <source>Twig supports both, automatic escaping is enabled by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a21475a969c585df94f2a3eb1362ee4b147be5c5" translate="yes" xml:space="preserve">
          <source>Twig supports dynamic inheritance by using a variable as the base template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2450652f7e62084ab8da4b43bd8c55f7a24b7d5" translate="yes" xml:space="preserve">
          <source>Twig supports putting often used code into &lt;a href=&quot;macro&quot;&gt;macros&lt;/a&gt;. These macros can go into different templates and get imported from there.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edf1d34dad678b09f43d91344a032e1441aac3a0" translate="yes" xml:space="preserve">
          <source>Twig supports the following optimizations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cf43da01704e7bdd07c8957453fd7a773c3d040" translate="yes" xml:space="preserve">
          <source>Twig uses a central object called the &lt;strong&gt;environment&lt;/strong&gt; (of class &lt;code&gt;Twig_Environment&lt;/code&gt;). Instances of this class are used to store the configuration and extensions, and are used to load templates from the file system or other locations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0278d71819b6454e8ee529ca0b1e4dbdca7e0d70" translate="yes" xml:space="preserve">
          <source>Twig uses a loader (&lt;code&gt;Twig_Loader_Array&lt;/code&gt;) to locate templates, and an environment (&lt;code&gt;Twig_Environment&lt;/code&gt;) to store the configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cef831d3600ddb7a5cadf6a78bcb0bea768c022" translate="yes" xml:space="preserve">
          <source>Twig's bitwise operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd09847544b0fce90c8bc8f12aa38c07d451c76b" translate="yes" xml:space="preserve">
          <source>Unlike in PHP, it's not possible to &lt;code&gt;break&lt;/code&gt; or &lt;code&gt;continue&lt;/code&gt; in a loop. You can however filter the sequence during iteration which allows you to skip items. The following example skips all the users which are not active:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f667c863793c22bc59dadb9fc056933bece3c557" translate="yes" xml:space="preserve">
          <source>Upload the profile to visualize it (create a &lt;a href=&quot;https://blackfire.io/signup&quot;&gt;free account&lt;/a&gt; first):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="999b8c7b76a5be29accac3307a3e2b3e9f4fea9d" translate="yes" xml:space="preserve">
          <source>Use lower cased and underscored variable names:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54541ac160ad82d686ccfffb622a60a2cbfe7f04" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;defined&lt;/code&gt; test to check if a block exists in the context of the current template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="185f69fccc3e5e5a792110da641b27534f42a4f3" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;defined&lt;/code&gt; test to check if a constant is defined:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ccff04da6396a6cb9bdc87e32a2e41394a0afc2" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;spaceless&lt;/code&gt; tag to remove whitespace &lt;em&gt;between HTML tags&lt;/em&gt;, not whitespace within HTML tags or whitespace in plain text:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aee37d92efbd59c9807c5afdfea157dc37c28287" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;spaceless&lt;/code&gt; tag to remove whitespace &lt;em&gt;between HTML tags&lt;/em&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8f08a60e60db6e1cafe0bdbfd15c1ffc4e4fcb3" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;with&lt;/code&gt; tag to create a new inner scope. Variables set within this scope are not visible outside of the scope:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa10774d0e271ce1daa32ba7d67741dff0dd4dd8" translate="yes" xml:space="preserve">
          <source>Using Extensions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dfb73d7df2c7ae0665e6da00571e99a1aed9b42" translate="yes" xml:space="preserve">
          <source>Using Twig and AngularJS in the same Templates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5631369b3cafb1ab2618e4fce6b9bb17107628f4" translate="yes" xml:space="preserve">
          <source>Using a &lt;code&gt;pre&lt;/code&gt; tag is not needed when &lt;a href=&quot;https://xdebug.org/docs/display&quot;&gt;XDebug&lt;/a&gt; is enabled and &lt;code&gt;html_errors&lt;/code&gt; is &lt;code&gt;on&lt;/code&gt;; as a bonus, the output is also nicer with XDebug enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f6269cb50e92da95e085556f5a1f67078a12942" translate="yes" xml:space="preserve">
          <source>Using a Database to store Templates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dae32036cadc9f0ad2ca66b6584488e32ca4021b" translate="yes" xml:space="preserve">
          <source>Using different Template Sources</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a83ead92315bfecdc76fd804841dde87b29f4d1" translate="yes" xml:space="preserve">
          <source>Using double-quoted or single-quoted strings has no impact on performance but string interpolation is only supported in double-quoted strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="339be1963c4861b48823da4f869f80c4e4f4716e" translate="yes" xml:space="preserve">
          <source>Using dynamic Object Properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b38f87881208fed16c581c24013b3d36ee3d1d9" translate="yes" xml:space="preserve">
          <source>Using named arguments makes your templates more explicit about the meaning of the values you pass as arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1ed30ab73af00c4d2314335c5ab18cdc3421807" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;loop&lt;/code&gt; variable within the condition is not recommended as it will probably not be doing what you expect it to. For instance, adding a condition like &lt;code&gt;loop.index &amp;gt; 4&lt;/code&gt; won't work as the index is only incremented when the condition is true (so the condition will never match).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="813701b498ea9df393b5878a24b378d3c992a65f" translate="yes" xml:space="preserve">
          <source>Validating the Template Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dce170de238b1feda2ecd9674ea3ca0d068fbcb" translate="yes" xml:space="preserve">
          <source>Value</source>
          <target state="translated">Value</target>
        </trans-unit>
        <trans-unit id="2893d9417f93894e75018f6819e871d5763d35a0" translate="yes" xml:space="preserve">
          <source>Value transformation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1df09f064e1cb457e364d04da1bba4eaf1883b1c" translate="yes" xml:space="preserve">
          <source>Values transformation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19de69cb601f53a4ea7af22a65c71ae63251365c" translate="yes" xml:space="preserve">
          <source>Variable</source>
          <target state="translated">Variable</target>
        </trans-unit>
        <trans-unit id="ac018db1f7b00972061adff843d37497d8ee153c" translate="yes" xml:space="preserve">
          <source>Variables</source>
          <target state="translated">Variables</target>
        </trans-unit>
        <trans-unit id="ee1f96ac809548e8406325e875bc67e8e0a29f8e" translate="yes" xml:space="preserve">
          <source>Variables can be modified by &lt;strong&gt;filters&lt;/strong&gt;. Filters are separated from the variable by a pipe symbol (&lt;code&gt;|&lt;/code&gt;) and may have optional arguments in parentheses. Multiple filters can be chained. The output of one filter is applied to the next.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c5477bb5a9c73aa709fca03cdf7969bda85eb31" translate="yes" xml:space="preserve">
          <source>Variadic Filters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9c45563358e813f157ba81b33143542165ba84e" translate="yes" xml:space="preserve">
          <source>Warning</source>
          <target state="translated">Warning</target>
        </trans-unit>
        <trans-unit id="1a4d39da402271e2b553763e2e54f301da0b88aa" translate="yes" xml:space="preserve">
          <source>We have created a simple &lt;code&gt;templates&lt;/code&gt; table that hosts two templates: &lt;code&gt;base.twig&lt;/code&gt; and &lt;code&gt;index.twig&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be65b9e347375f6ab4dbf58f66fa0a0b73735783" translate="yes" xml:space="preserve">
          <source>What?</source>
          <target state="translated">What?</target>
        </trans-unit>
        <trans-unit id="1e28bea7913ae56c97c990aeb29bb8fd5fc3e40b" translate="yes" xml:space="preserve">
          <source>When Twig encounters a variable like &lt;code&gt;article.title&lt;/code&gt;, it tries to find a &lt;code&gt;title&lt;/code&gt; public property in the &lt;code&gt;article&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c185021af47e3a8eb1d7dae9ad44b34b63e28a42" translate="yes" xml:space="preserve">
          <source>When a filter is deprecated, Twig emits a deprecation notice when compiling a template using it. See &lt;a href=&quot;recipes#deprecation-notices&quot;&gt;Displaying Deprecation Notices&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8040832347234e04d62fcf869ba270e0f73de843" translate="yes" xml:space="preserve">
          <source>When a filter should accept an arbitrary number of arguments, set the &lt;code&gt;is_variadic&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt;; Twig will pass the extra arguments as the last argument to the filter call as an array:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b13bc67d3920b4e94b3daf093ac7d9a5d7f43449" translate="yes" xml:space="preserve">
          <source>When a function (or a filter) is not defined, Twig defaults to throw a &lt;code&gt;Twig_Error_Syntax&lt;/code&gt; exception. However, it can also call a &lt;a href=&quot;https://secure.php.net/manual/en/function.is-callable.php&quot;&gt;callback&lt;/a&gt; (any valid PHP callable) which should return a function (or a filter).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="876bdba9df3ee981a36134302ecbe5fa45aa05cf" translate="yes" xml:space="preserve">
          <source>When a template uses inheritance and if you want to print a block multiple times, use the &lt;code&gt;block&lt;/code&gt; function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5b5c9cf1582b0f15177236c2060bd6f1bdb1d56" translate="yes" xml:space="preserve">
          <source>When a template uses inheritance, it's possible to render the contents of the parent block when overriding a block by using the &lt;code&gt;parent&lt;/code&gt; function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="213fd294c634b58e4fcb5c928941722e4fd7274c" translate="yes" xml:space="preserve">
          <source>When attaching a visitor to a &lt;code&gt;Twig_Environment&lt;/code&gt; instance, Twig uses it to visit &lt;em&gt;all&lt;/em&gt; templates it compiles. If you need to keep some state information around, you probably want to reset it when visiting a new template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a03a1b18f5d4e91cb8389dc0f980f77e2d76915d" translate="yes" xml:space="preserve">
          <source>When automatic escaping is enabled everything is escaped by default except for values explicitly marked as safe. Those can be marked in the template by using the &lt;a href=&quot;../filters/raw&quot;&gt;raw&lt;/a&gt; filter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a14c3207406c248c355b713cfe404d6f1c24cbe6" translate="yes" xml:space="preserve">
          <source>When called by Twig, the PHP callable receives the left side of the filter (before the pipe &lt;code&gt;|&lt;/code&gt;) as the first argument and the extra arguments passed to the filter (within parentheses &lt;code&gt;()&lt;/code&gt;) as extra arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6338a9bbc3e89df3ba162fe30f6271d7034b68fc" translate="yes" xml:space="preserve">
          <source>When called by Twig, the callable receives the Twig environment instance, the string to escape, and the charset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcbb60a30372718ca8a0dd7295b6478ae6d43b57" translate="yes" xml:space="preserve">
          <source>When called with a mapping, max ignores keys and only compares values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b295ae779f6c765908c9cf2cd92a106fd786381" translate="yes" xml:space="preserve">
          <source>When called with a mapping, min ignores keys and only compares values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4430627788e9d9f3c682651983553fd65806d196" translate="yes" xml:space="preserve">
          <source>When creating a new &lt;code&gt;Twig_Environment&lt;/code&gt; instance, you can pass an array of options as the constructor second argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92bc5f7d8c1bc1e711e264e69548c9fc6527c3d3" translate="yes" xml:space="preserve">
          <source>When creating tests you can use the &lt;code&gt;node_class&lt;/code&gt; option to provide custom test compilation. This is useful if your test can be compiled into PHP primitives. This is used by many of the tests built into Twig:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6d6dea0cfb3c10a74028151fd62af41ba99725e" translate="yes" xml:space="preserve">
          <source>When creating the escaper extension, you can switch on or off the global output escaping strategy:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c90742c29d3efa52a9e898846e168bd362bed25f" translate="yes" xml:space="preserve">
          <source>When developing with Twig, it's useful to recompile the template whenever the source code changes. If you don't provide a value for the &lt;code&gt;auto_reload&lt;/code&gt; option, it will be determined automatically based on the &lt;code&gt;debug&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1016ce95a3964b38f34407da6de6c0b83d4513b1" translate="yes" xml:space="preserve">
          <source>When extending Twig without creating an extension, Twig won't be able to recompile your templates when the PHP code is updated. To see your changes in real-time, either disable template caching or package your code into an extension (see the next section of this chapter).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbfbf84506b26665c4b871cdaa357986fdfc6dd7" translate="yes" xml:space="preserve">
          <source>When generating HTML from templates, there's always a risk that a variable will include characters that affect the resulting HTML. There are two approaches: manually escaping each variable or automatically escaping everything by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bb5f62e4c7f9faafc22ee2d0642bf5307757b8b" translate="yes" xml:space="preserve">
          <source>When including a template created by an end user, you should consider sandboxing it. More information in the &lt;a href=&quot;../api&quot;&gt;Twig for Developers&lt;/a&gt; chapter and in the &lt;a href=&quot;sandbox&quot;&gt;sandbox&lt;/a&gt; tag documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46cf04daa0cc353312a64e7dea74a7bef6eee37a" translate="yes" xml:space="preserve">
          <source>When including a template created by an end user, you should consider sandboxing it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="569b9643621919d6a183cf57134ad1c0526c1b1b" translate="yes" xml:space="preserve">
          <source>When including a template, its name does not need to be a string. For instance, the name can depend on the value of a variable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22e08145c5206f662564c94379550125799c600c" translate="yes" xml:space="preserve">
          <source>When looking for a template, Twig will try each loader in turn and it will return as soon as the template is found. When rendering the &lt;code&gt;index.html&lt;/code&gt; template from the above example, Twig will load it with &lt;code&gt;$loader2&lt;/code&gt; but the &lt;code&gt;base.html&lt;/code&gt; template will be loaded from &lt;code&gt;$loader1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d5150536dee0facc6bda84f4f472762d42c4115" translate="yes" xml:space="preserve">
          <source>When not passing the root path as a second argument, Twig uses &lt;code&gt;getcwd()&lt;/code&gt; for relative paths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aad3d86408a5fe77b7cc931344047db39ee94048" translate="yes" xml:space="preserve">
          <source>When packaging your code into an extension, Twig is smart enough to recompile your templates whenever you make a change to it (when &lt;code&gt;auto_reload&lt;/code&gt; is enabled).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="344b231c232ff20731604fe0107747d40a2ce459" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;true&lt;/code&gt;, the generated templates have a &lt;code&gt;__toString()&lt;/code&gt; method that you can use to display the generated nodes (default to &lt;code&gt;false&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d094b4172baac13f4f02bb1a99aff27c14668624" translate="yes" xml:space="preserve">
          <source>When step is given (as the third parameter), it specifies the increment (or decrement for negative values):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4f30798a0ce3f97baa06aafbcb63621a5d4dd63" translate="yes" xml:space="preserve">
          <source>When template code is provided by a third-party (through a web interface for instance), it might be interesting to validate the template syntax before saving it. If the template code is stored in a</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
