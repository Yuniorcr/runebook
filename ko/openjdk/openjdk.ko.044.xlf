<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="openjdk">
    <body>
      <group id="openjdk">
        <trans-unit id="d132531fc669e517a82a3d82919ac097d06f2259" translate="yes" xml:space="preserve">
          <source>If the other &lt;code&gt;StringJoiner&lt;/code&gt; is using a different delimiter, then elements from the other &lt;code&gt;StringJoiner&lt;/code&gt; are concatenated with that delimiter and the result is appended to this &lt;code&gt;StringJoiner&lt;/code&gt; as a single element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="613b81a7888d7292adb45fa99af137ae84272f3b" translate="yes" xml:space="preserve">
          <source>If the output is an &lt;code&gt;ImageOutputStream&lt;/code&gt;, the existing contents of the output prior to the current seek position are flushed, and need not be readable or writable. If the format requires that &lt;code&gt;endWriteSequence&lt;/code&gt; be able to rewind to patch up the header information, such as for a sequence of images in a single TIFF file, then the metadata written by this method must remain in a writable portion of the stream. Other formats may flush the stream after this method and after each image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a54204b2e99d7d060bb6235389e37beb7f049e32" translate="yes" xml:space="preserve">
          <source>If the parse completes without reading the entire length of the text, or a problem occurs during parsing or merging, then an exception is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ed75a33bb4145623122f20c780e9bac95e43865" translate="yes" xml:space="preserve">
          <source>If the path is relative, and if its first segment contains a colon character (&lt;code&gt;':'&lt;/code&gt;), then a &lt;code&gt;&quot;.&quot;&lt;/code&gt; segment is prepended. This prevents a relative URI with a path such as &lt;code&gt;&quot;a:b/c/d&quot;&lt;/code&gt; from later being re-parsed as an opaque URI with a scheme of &lt;code&gt;&quot;a&quot;&lt;/code&gt; and a scheme-specific part of &lt;code&gt;&quot;b/c/d&quot;&lt;/code&gt;. &lt;b&gt;&lt;i&gt;(Deviation from RFC 2396)&lt;/i&gt;&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87a4c8fb790be59120806baf097d003e2948d992" translate="yes" xml:space="preserve">
          <source>If the pending count is nonzero, (atomically) decrements it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e572cb5e5dee791d5b39d6f57ac77915682e21a1" translate="yes" xml:space="preserve">
          <source>If the pending count is nonzero, decrements the count; otherwise invokes &lt;a href=&quot;countedcompleter#onCompletion-java.util.concurrent.CountedCompleter-&quot;&gt;&lt;code&gt;onCompletion(CountedCompleter)&lt;/code&gt;&lt;/a&gt; and then similarly tries to complete this task's completer, if one exists, else marks this task as complete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc17ec5f581dec30fa586e110a04b1eaf5b5b327" translate="yes" xml:space="preserve">
          <source>If the permit is available then it is consumed and the call returns immediately; otherwise the current thread becomes disabled for thread scheduling purposes and lies dormant until one of four things happens:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4223a7d1829a5930922236b794117f0ecfa3ef5" translate="yes" xml:space="preserve">
          <source>If the permit is available then it is consumed and the call returns immediately; otherwise the current thread becomes disabled for thread scheduling purposes and lies dormant until one of three things happens:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c7072c32b05b6fd0de10d7da5998d3dbfa5ec38" translate="yes" xml:space="preserve">
          <source>If the permits are acquired then the value &lt;code&gt;true&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cea382e9b6e94d448d8b5b7931ce98c85d158e1" translate="yes" xml:space="preserve">
          <source>If the persist field of the attribute's descriptor is not null then Persistence policy from the attribute descriptor is used to guide storing the attribute in a persistent store.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f4b331cf13e540556f5aca90f86b4e8ad5c60f9" translate="yes" xml:space="preserve">
          <source>If the plug-in does not handle image metadata, null should be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aab4c0c381c1b7fcd5929e45b451378e4a93f9be" translate="yes" xml:space="preserve">
          <source>If the plug-in does not handle metadata, null should be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bf226ccbe41713d478e11aab7ab361a597353a7" translate="yes" xml:space="preserve">
          <source>If the pool currently has more than corePoolSize threads, excess threads will be terminated if they have been idle for more than the keepAliveTime (see &lt;a href=&quot;threadpoolexecutor#getKeepAliveTime-java.util.concurrent.TimeUnit-&quot;&gt;&lt;code&gt;getKeepAliveTime(TimeUnit)&lt;/code&gt;&lt;/a&gt;). This provides a means of reducing resource consumption when the pool is not being actively used. If the pool becomes more active later, new threads will be constructed. This parameter can also be changed dynamically using method &lt;a href=&quot;threadpoolexecutor#setKeepAliveTime-long-java.util.concurrent.TimeUnit-&quot;&gt;&lt;code&gt;setKeepAliveTime(long,
 TimeUnit)&lt;/code&gt;&lt;/a&gt;. Using a value of &lt;code&gt;Long.MAX_VALUE&lt;/code&gt;&lt;a href=&quot;timeunit#NANOSECONDS&quot;&gt;&lt;code&gt;TimeUnit.NANOSECONDS&lt;/code&gt;&lt;/a&gt; effectively disables idle threads from ever terminating prior to shut down. By default, the keep-alive policy applies only when there are more than corePoolSize threads. But method &lt;a href=&quot;threadpoolexecutor#allowCoreThreadTimeOut-boolean-&quot;&gt;&lt;code&gt;allowCoreThreadTimeOut(boolean)&lt;/code&gt;&lt;/a&gt; can be used to apply this time-out policy to core threads as well, so long as the keepAliveTime value is non-zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a3ff33f4d5e297ea7ec3916317d36251a2ccb95" translate="yes" xml:space="preserve">
          <source>If the prefix is &quot;GMT&quot;, &quot;UTC&quot;, or &quot;UT&quot; a &lt;code&gt;ZoneId&lt;/code&gt; with the prefix and the non-zero offset is returned. If the prefix is empty &lt;code&gt;&quot;&quot;&lt;/code&gt; the &lt;code&gt;ZoneOffset&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2958ef27e71136debb4afdbdf265b117d00e567e" translate="yes" xml:space="preserve">
          <source>If the present length of the file as returned by the &lt;code&gt;length&lt;/code&gt; method is greater than the &lt;code&gt;newLength&lt;/code&gt; argument then the file will be truncated. In this case, if the file offset as returned by the &lt;code&gt;getFilePointer&lt;/code&gt; method is greater than &lt;code&gt;newLength&lt;/code&gt; then after this method returns the offset will be equal to &lt;code&gt;newLength&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cef2b80409c01c0c853b230c56f0ff2824529e5" translate="yes" xml:space="preserve">
          <source>If the present length of the file as returned by the &lt;code&gt;length&lt;/code&gt; method is smaller than the &lt;code&gt;newLength&lt;/code&gt; argument then the file will be extended. In this case, the contents of the extended portion of the file are not defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dec7b0fc3a3fa3565bc2b4d09d4d15db4b1e4a93" translate="yes" xml:space="preserve">
          <source>If the previous step fails to find a protocol handler, then the constructor tries to load from a system default package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6585f9f7ecc69964ba3abd119ebdf439ff37f98d" translate="yes" xml:space="preserve">
          <source>If the previous step has found no resource bundle, proceed to Step 6. If a bundle has been found that is a base bundle (a bundle for &lt;code&gt;Locale(&quot;&quot;)&lt;/code&gt;), and the candidate locale list only contained &lt;code&gt;Locale(&quot;&quot;)&lt;/code&gt;, return the bundle to the caller. If a bundle has been found that is a base bundle, but the candidate locale list contained locales other than Locale(&quot;&quot;), put the bundle on hold and proceed to Step 6. If a bundle has been found that is not a base bundle, proceed to Step 7.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6778bed4bae7f4aceabe96f43a91b258db12e0c7" translate="yes" xml:space="preserve">
          <source>If the print data is a stream, or a print job requests data as a stream, then &lt;code&gt;SimpleDoc&lt;/code&gt; does not monitor if the service properly closes the stream after data transfer completion or job termination. Clients may prefer to use provide their own implementation of doc that adds a listener to monitor job completion and to validate that resources such as streams are freed (ie closed).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88bf35bed53cf1a7b9c25c4c647bfc4d663ad0d2" translate="yes" xml:space="preserve">
          <source>If the processor class is annotated with &lt;a href=&quot;supportedannotationtypes&quot;&gt;&lt;code&gt;SupportedAnnotationTypes&lt;/code&gt;&lt;/a&gt;, return an unmodifiable set with the same set of strings as the annotation. If the class is not so annotated, an empty set is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09f9046e5ee10b9263ce6a07905ea1779eccbaa9" translate="yes" xml:space="preserve">
          <source>If the processor class is annotated with &lt;a href=&quot;supportedoptions&quot;&gt;&lt;code&gt;SupportedOptions&lt;/code&gt;&lt;/a&gt;, return an unmodifiable set with the same set of strings as the annotation. If the class is not so annotated, an empty set is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7003e770420135c1df12e09d555ca6780cff43c6" translate="yes" xml:space="preserve">
          <source>If the processor class is annotated with &lt;a href=&quot;supportedsourceversion&quot;&gt;&lt;code&gt;SupportedSourceVersion&lt;/code&gt;&lt;/a&gt;, return the source version in the annotation. If the class is not so annotated, &lt;a href=&quot;../../lang/model/sourceversion#RELEASE_6&quot;&gt;&lt;code&gt;SourceVersion.RELEASE_6&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b31e3a1fd2087ce273c8b857c1c713db2fbc7119" translate="yes" xml:space="preserve">
          <source>If the program wants to handle this exception in particular, it should catch AuthenticationException explicitly before attempting to catch NamingException. After catching AuthenticationException, the program could reattempt the authentication by updating the resolved context's environment properties with the appropriate appropriate credentials.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f2dc297aa51d5849276a390a4e74ee5aecc6575" translate="yes" xml:space="preserve">
          <source>If the program wants to handle this exception in particular, it should catch AuthenticationNotSupportedException explicitly before attempting to catch NamingException. After catching &lt;code&gt;AuthenticationNotSupportedException&lt;/code&gt;, the program could reattempt the authentication using a different authentication flavor by updating the resolved context's environment properties accordingly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aa89d5f48713a94a294fbe63d3a7465ee70153d" translate="yes" xml:space="preserve">
          <source>If the program wants to handle this exception in particular, it should catch CannotProceedException explicitly before attempting to catch NamingException.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8620b756848fd740f3151a464311aed319d8483" translate="yes" xml:space="preserve">
          <source>If the program wants to handle this exception in particular, it should catch ContextNotEmptyException explicitly before attempting to catch NamingException. For example, after catching ContextNotEmptyException, the program might try to remove the contents of the context before reattempting the destroy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="895af51843785805eb993f6b245e3c37e050b292" translate="yes" xml:space="preserve">
          <source>If the program wants to handle this exception in particular, it should catch NamingSecurityException explicitly before attempting to catch NamingException. A program might want to do this, for example, if it wants to treat security-related exceptions specially from other sorts of naming exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6f5f7560de8700736d8932ba9b65417b272c5ae" translate="yes" xml:space="preserve">
          <source>If the property editor class has a public constructor that takes an Object argument then it will be invoked using the bean parameter as the argument. Otherwise, the default constructor will be invoked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2f66e3274b70113dec5b6e974df0367593c3c3b" translate="yes" xml:space="preserve">
          <source>If the property value begins with the ASCII character &lt;code&gt;0&lt;/code&gt; followed by another character, it is parsed as an octal integer exactly as by the method &lt;a href=&quot;integer#valueOf-java.lang.String-int-&quot;&gt;&lt;code&gt;valueOf(java.lang.String, int)&lt;/code&gt;&lt;/a&gt; with radix 8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d846b960ac8982dfe609a8cc87db59aceb1d4596" translate="yes" xml:space="preserve">
          <source>If the property value begins with the ASCII character &lt;code&gt;0&lt;/code&gt; followed by another character, it is parsed as an octal integer exactly as by the method &lt;a href=&quot;long#valueOf-java.lang.String-int-&quot;&gt;&lt;code&gt;valueOf(java.lang.String, int)&lt;/code&gt;&lt;/a&gt; with radix 8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c2a7d82245ca935ebfab36515f8332c15126b95" translate="yes" xml:space="preserve">
          <source>If the property value begins with the two ASCII characters &lt;code&gt;0x&lt;/code&gt; or the ASCII character &lt;code&gt;#&lt;/code&gt;, not followed by a minus sign, then the rest of it is parsed as a hexadecimal integer exactly as by the method &lt;a href=&quot;integer#valueOf-java.lang.String-int-&quot;&gt;&lt;code&gt;valueOf(java.lang.String, int)&lt;/code&gt;&lt;/a&gt; with radix 16.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9750c4a61406d17de53527d1fc84ece847954d5" translate="yes" xml:space="preserve">
          <source>If the property value begins with the two ASCII characters &lt;code&gt;0x&lt;/code&gt; or the ASCII character &lt;code&gt;#&lt;/code&gt;, not followed by a minus sign, then the rest of it is parsed as a hexadecimal integer exactly as for the method &lt;a href=&quot;long#valueOf-java.lang.String-int-&quot;&gt;&lt;code&gt;valueOf(java.lang.String, int)&lt;/code&gt;&lt;/a&gt; with radix 16.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bfe54e945e0b7d817f4c40688004d1c3e18c1e7" translate="yes" xml:space="preserve">
          <source>If the property value must be one of a set of known tagged values, then this method should return an array of the tag values. This can be used to represent (for example) enum values. If a PropertyEditor supports tags, then it should support the use of setAsText with a tag value as a way of setting the value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef546a8769cb06ecdb14394d21b131483d0cbdbf" translate="yes" xml:space="preserve">
          <source>If the property value must be one of a set of known tagged values, then this method should return an array of the tags. This can be used to represent (for example) enum values. If a PropertyEditor supports tags, then it should support the use of setAsText with a tag value as a way of setting the value and the use of getAsText to identify the current value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d4476facb38f8ef6d3eac0b77402edf9355a984" translate="yes" xml:space="preserve">
          <source>If the protected key is of type &lt;code&gt;java.security.PrivateKey&lt;/code&gt;, it must be accompanied by a certificate chain certifying the corresponding public key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8efe5ceae64e694176e05313f25266d8f3110e7f" translate="yes" xml:space="preserve">
          <source>If the protected key is of type &lt;code&gt;java.security.PrivateKey&lt;/code&gt;, it must be accompanied by a certificate chain certifying the corresponding public key. If the underlying keystore implementation is of type &lt;code&gt;jks&lt;/code&gt;, &lt;code&gt;key&lt;/code&gt; must be encoded as an &lt;code&gt;EncryptedPrivateKeyInfo&lt;/code&gt; as defined in the PKCS #8 standard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e8fade5fe2a933f005d764f4f99cdb58a44ddd5" translate="yes" xml:space="preserve">
          <source>If the protocol is &quot;file&quot; and there is an authority component, then permission to connect to and accept connections from that authority may be granted. If the protocol is &quot;file&quot; and the path specifies a file, then permission to read that file is granted. If protocol is &quot;file&quot; and the path is a directory, permission is granted to read all files and (recursively) all files and subdirectories contained in that directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb5e9c9f7d7d328c23292e6a5e585815516946f8" translate="yes" xml:space="preserve">
          <source>If the protocol is not &quot;file&quot;, then permission to connect to and accept connections from the URL's host is granted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40b1f09001ad2f74e8788b23bbde2accb73745d9" translate="yes" xml:space="preserve">
          <source>If the protocol of this URL is &quot;jar&quot;, then the permission granted is based on the permission that is required by the URL of the Jar file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7aff0ef21850924145fd8d1eef710a0152583e2" translate="yes" xml:space="preserve">
          <source>If the provider class is specified, and it can be successfully retrieved from the installed providers, the list of &lt;code&gt;MidiDevice.Info&lt;/code&gt; objects is retrieved from the provider. Otherwise, or when these devices do not provide a subsequent match, the list is retrieved from &lt;a href=&quot;midisystem#getMidiDeviceInfo--&quot;&gt;&lt;code&gt;getMidiDeviceInfo()&lt;/code&gt;&lt;/a&gt; to contain all available &lt;code&gt;MidiDevice.Info&lt;/code&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e695a51fa3964ae1c7613ee0169a232ee920a9d" translate="yes" xml:space="preserve">
          <source>If the provider class is specified, and it can be successfully retrieved from the installed providers, the list of &lt;code&gt;Mixer.Info&lt;/code&gt; objects is retrieved from the provider. Otherwise, or when these mixers do not provide a subsequent match, the list is retrieved from &lt;a href=&quot;audiosystem#getMixerInfo--&quot;&gt;&lt;code&gt;getMixerInfo()&lt;/code&gt;&lt;/a&gt; to contain all available &lt;code&gt;Mixer.Info&lt;/code&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60186988e7792b549f33f598eb6796ff82e377be" translate="yes" xml:space="preserve">
          <source>If the provider implementation is dynamic, then the flag gives the option of preventing the returned rules from being cached in &lt;a href=&quot;../zoneid&quot;&gt;&lt;code&gt;ZoneId&lt;/code&gt;&lt;/a&gt;. When the flag is true, the provider is permitted to return null, where null will prevent the rules from being cached in &lt;code&gt;ZoneId&lt;/code&gt;. When the flag is false, the provider must return non-null rules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e445a3443a37b81ff119acc67b2ad73cb5fb6432" translate="yes" xml:space="preserve">
          <source>If the provider implementation is not dynamic, then the result of the method must be the non-null set of rules selected by the ID.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17253c90de92aa58bc36b4a773f197b6ca04e1e5" translate="yes" xml:space="preserve">
          <source>If the provider package list exists and is not empty, then for each element &lt;code&gt;&lt;em&gt;pkg&lt;/em&gt;&lt;/code&gt; of the list, the factory will attempt to load the class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d01e7ab79ccc797c94edb821e2001a4b21858cc0" translate="yes" xml:space="preserve">
          <source>If the queue fits in the specified array with room to spare (i.e., the array has more elements than the queue), the element in the array immediately following the end of the collection is set to &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99b3e8d45f37070b6c7a53d21e9f356902e9580a" translate="yes" xml:space="preserve">
          <source>If the radix is less than &lt;code&gt;Character.MIN_RADIX&lt;/code&gt; or greater than &lt;code&gt;Character.MAX_RADIX&lt;/code&gt;, then an &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a648ff4273d99de4e1bc95f12a1486f421ca4054" translate="yes" xml:space="preserve">
          <source>If the radix is not in the range &lt;code&gt;MIN_RADIX&lt;/code&gt; &amp;le; &lt;code&gt;radix&lt;/code&gt; &amp;le; &lt;code&gt;MAX_RADIX&lt;/code&gt; or if the character is not a valid digit in the specified radix, &lt;code&gt;-1&lt;/code&gt; is returned. A character is a valid digit if at least one of the following is true:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4a1e7fa070e5bd8bde88ce903f985156a6f1b0d" translate="yes" xml:space="preserve">
          <source>If the radix is not in the range &lt;code&gt;MIN_RADIX&lt;/code&gt; &amp;le; &lt;code&gt;radix&lt;/code&gt; &amp;le; &lt;code&gt;MAX_RADIX&lt;/code&gt; or if the value of &lt;code&gt;ch&lt;/code&gt; is not a valid digit in the specified radix, &lt;code&gt;-1&lt;/code&gt; is returned. A character is a valid digit if at least one of the following is true:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="671d0d109c8316ebaf1f99c9e9a6b5ad599bcdb9" translate="yes" xml:space="preserve">
          <source>If the radix is smaller than &lt;code&gt;Character.MIN_RADIX&lt;/code&gt; or larger than &lt;code&gt;Character.MAX_RADIX&lt;/code&gt;, then the radix &lt;code&gt;10&lt;/code&gt; is used instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88c548789120cc039a2be678f91a294c4a57446d" translate="yes" xml:space="preserve">
          <source>If the read lock is acquired then the value &lt;code&gt;true&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1de0197561ab1c42739d318716c6da06cb232ac" translate="yes" xml:space="preserve">
          <source>If the reader does not support thumbnails, (&lt;code&gt;readerSupportsThumbnails&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;), an &lt;code&gt;UnsupportedOperationException&lt;/code&gt; will be thrown regardless of whether an input source has been set or whether the indices are in bounds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb2451c0113cb8c1e0775121dff8874d947bd15f" translate="yes" xml:space="preserve">
          <source>If the reader does not support thumbnails, (&lt;code&gt;readerSupportsThumbnails&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;), an &lt;code&gt;UnsupportedOperationException&lt;/code&gt; will be thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00cde4cc70dae1cb495d031cb9acb67bc8abef24" translate="yes" xml:space="preserve">
          <source>If the recognized year number is less than 100, it is interpreted as an abbreviated year relative to a century of which dates are within 80 years before and 19 years after the time when the Date class is initialized. After adjusting the year number, 1900 is subtracted from it. For example, if the current year is 1999 then years in the range 19 to 99 are assumed to mean 1919 to 1999, while years from 0 to 18 are assumed to mean 2000 to 2018. Note that this is slightly different from the interpretation of years less than 100 that is used in &lt;a href=&quot;../text/simpledateformat&quot;&gt;&lt;code&gt;SimpleDateFormat&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57ad84aa4b7a2b33d920b4d445e6eaeb418fc1cc" translate="yes" xml:space="preserve">
          <source>If the region is such that this width is zero, an &lt;code&gt;IllegalStateException&lt;/code&gt; is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c3b8b1f31e8b1eb0578d0596a852433e7405f3a" translate="yes" xml:space="preserve">
          <source>If the relation is represented by an MBean (created by the user and added as a relation in the Relation Service), returns the ObjectName of the MBean.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c90ca0b52fc5c89008817da193bca78cfc36ed6" translate="yes" xml:space="preserve">
          <source>If the remote MBean Server is 1.2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03cc18ab3cabbd8e48236da939259f3b987d3f83" translate="yes" xml:space="preserve">
          <source>If the remote destination to which the socket is connected does not exist, or is otherwise unreachable, and if an ICMP destination unreachable packet has been received for that address, then a subsequent call to send or receive may throw a PortUnreachableException. Note, there is no guarantee that the exception will be thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d89a1cc49adab461bf1f01dc66545d017f8bacb" translate="yes" xml:space="preserve">
          <source>If the requested option is binary, it can be set using this method by a java.lang.Boolean:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38ce1c03b79a7b89afd15d63c7ba902df5495593" translate="yes" xml:space="preserve">
          <source>If the requested permission is allowed, this method returns quietly. If denied, a SecurityException is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c37b9290b4ade460cdf802abd93f12770f8d7f0" translate="yes" xml:space="preserve">
          <source>If the required access and argument checks succeed and the instantiation will proceed, the constructor's declaring class is initialized if it has not already been initialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62e2c41caf4aaf142a44a8c6c165f53c1d68b4be" translate="yes" xml:space="preserve">
          <source>If the result of this method is used to access the event source, for example, to look up the object or get its attributes, then it needs to be locked because implementations of &lt;code&gt;Context&lt;/code&gt; are not guaranteed to be thread-safe (and &lt;code&gt;EventContext&lt;/code&gt; is a subinterface of &lt;code&gt;Context&lt;/code&gt;). See the &lt;a href=&quot;package-summary#THREADING&quot;&gt;package description&lt;/a&gt; for more information on threading issues.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da3549687bea03167816a9b17ffaee344e82b496" translate="yes" xml:space="preserve">
          <source>If the resulting &lt;code&gt;OffsetDateTime&lt;/code&gt; is invalid, an exception is thrown. The time and offset do not affect the calculation and will be the same in the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a3d11d3b73e216be8517618d151d35e100edd64" translate="yes" xml:space="preserve">
          <source>If the resulting date is invalid, an exception is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ca351660a2dc03d4cb71b7bc124559d23a4db29" translate="yes" xml:space="preserve">
          <source>If the resulting date-time is invalid, an exception is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44ca6bebbc9287dfb9c1097c7e056b162daf7bcb" translate="yes" xml:space="preserve">
          <source>If the resulting date-time is invalid, an exception is thrown. The time does not affect the calculation and will be the same in the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f6dc2bf2873abab7867f3b616c93e4b15b446fa" translate="yes" xml:space="preserve">
          <source>If the return type &lt;em&gt;T0&lt;/em&gt; is void and &lt;em&gt;T1&lt;/em&gt; a primitive, a zero value is introduced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f822d109dcf5c55256ad0bbca3b4f4180ce12367" translate="yes" xml:space="preserve">
          <source>If the return type &lt;em&gt;T0&lt;/em&gt; is void and &lt;em&gt;T1&lt;/em&gt; a reference, a null value is introduced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22bfe5b1532d3b1937f6f097fa6b7e18ec35a472" translate="yes" xml:space="preserve">
          <source>If the return type &lt;em&gt;T1&lt;/em&gt; is marked as void, any returned value is discarded</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a413e6168d2b6897adbb71ca65aa2bb806445d1" translate="yes" xml:space="preserve">
          <source>If the return type is a parameterized type, the &lt;code&gt;Type&lt;/code&gt; object returned must accurately reflect the actual type parameters used in the source code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c790d87847b61c0198be1f5880f62ee8cbf59f42" translate="yes" xml:space="preserve">
          <source>If the return type is a type variable or a parameterized type, it is created. Otherwise, it is resolved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29af74f5a09429dcfd9193c144c392b2c8199600" translate="yes" xml:space="preserve">
          <source>If the return type of any of the methods is a primitive type or void, then all of the methods must have that same return type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17d771c49fde9fd06df899fa732fea09b1398c4a" translate="yes" xml:space="preserve">
          <source>If the return value is non-null, all attributes in the returned set are unsupported with this DocFlavor. The returned set does not distinguish attribute categories that are unsupported from unsupported attribute values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d67afcae574c0dadec33d0948d30e110523b788e" translate="yes" xml:space="preserve">
          <source>If the returned method handle is invoked, the constructor's class will be initialized, if it has not already been initialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bba8a24f154f8c33c7318be4afad7cbac85009fd" translate="yes" xml:space="preserve">
          <source>If the returned method handle is invoked, the field's class will be initialized, if it has not already been initialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51fb639a4d11801aea7b926f5d54285fffc4a0fb" translate="yes" xml:space="preserve">
          <source>If the returned method handle is invoked, the method's class will be initialized, if it has not already been initialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="062c7a8a96f0cd16df82fd6a3d7ef90b21f0c525" translate="yes" xml:space="preserve">
          <source>If the returned node did not exist prior to this call, this node and any ancestors that were created by this call are not guaranteed to become permanent until the &lt;code&gt;flush&lt;/code&gt; method is called on the returned node (or one of its ancestors or descendants).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31845fc89c4f6a02a974ef2eb4b2ee1fabe487a0" translate="yes" xml:space="preserve">
          <source>If the returned object represents a &lt;a href=&quot;javafileobject.kind#SOURCE&quot;&gt;source&lt;/a&gt; or &lt;a href=&quot;javafileobject.kind#CLASS&quot;&gt;class&lt;/a&gt; file, it must be an instance of &lt;a href=&quot;javafileobject&quot;&gt;&lt;code&gt;JavaFileObject&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e65e674c2c9738a67b46cbdff85eddf6bd7d6d6" translate="yes" xml:space="preserve">
          <source>If the rule defines a week where the cutover might occur, then this method returns the day-of-week that the month-day will be adjusted to. If the day is positive then the adjustment is later. If the day is negative then the adjustment is earlier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab9f1126ac23de664120eeb0433d59deaee2f7bd" translate="yes" xml:space="preserve">
          <source>If the rule defines a week where the transition might occur, then the day defines either the start of the end of the transition week.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89f95b53b5119c06e7c28d0a4953b38d65679d33" translate="yes" xml:space="preserve">
          <source>If the rule defines a week where the transition might occur, then the month if the month of either the earliest or latest possible date of the cutover.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5876d137cd994c7ad4a664d7beaa1b898954c4d" translate="yes" xml:space="preserve">
          <source>If the rule defines an exact date then the day is the month of that date.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a405331c7ddef3021a3335c00454f67145186ff" translate="yes" xml:space="preserve">
          <source>If the rule defines an exact date then the month is the month of that date.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5034d0b228d4988928265c1d8ac1f628685a4b7f" translate="yes" xml:space="preserve">
          <source>If the rule defines an exact date then this returns null.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f0e91ac8cea622cd628a97cacbf583516eb1203" translate="yes" xml:space="preserve">
          <source>If the same MXBean were registered under two different &lt;code&gt;ObjectName&lt;/code&gt;s, a reference to that MXBean from another MXBean would be ambiguous. Therefore, if an MXBean object is already registered in an MBean Server and an attempt is made to register it in the same MBean Server under another name, the result is an &lt;a href=&quot;instancealreadyexistsexception&quot;&gt;&lt;code&gt;InstanceAlreadyExistsException&lt;/code&gt;&lt;/a&gt;. Registering the same MBean object under more than one name is discouraged in general, notably because it does not work well for MBeans that are &lt;a href=&quot;notificationbroadcaster&quot;&gt;&lt;code&gt;NotificationBroadcaster&lt;/code&gt;&lt;/a&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50eb773388c08998af191260a43e85de5e2d0eab" translate="yes" xml:space="preserve">
          <source>If the same listener is added more than once, it is considered as many times as it was added. It is often useful to add the same listener with different filters or handback objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a530990bfaa8ba340ab7814bcb938600df0674e3" translate="yes" xml:space="preserve">
          <source>If the same listener was added more than once, it will be notified one less time after being removed. If &lt;code&gt;listener&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, or was never added, no exception is thrown and no action is taken.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a2f1faa361a4f239eecfaa4480ce58bb66c8e63" translate="yes" xml:space="preserve">
          <source>If the scale is greater than or equal to zero and the adjusted exponent is greater than or equal to &lt;code&gt;-6&lt;/code&gt;, the number will be converted to a character form without using exponential notation. In this case, if the scale is zero then no decimal point is added and if the scale is positive a decimal point will be inserted with the scale specifying the number of characters to the right of the decimal point. &lt;code&gt;'0'&lt;/code&gt; characters are added to the left of the converted unscaled value as necessary. If no character precedes the decimal point after this insertion then a conventional &lt;code&gt;'0'&lt;/code&gt; character is prefixed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6699480c9af01ef59363f0886670fc80f9f3dd6" translate="yes" xml:space="preserve">
          <source>If the scheme component is defined in the given spec and does not match the scheme of the context, then the new URL is created as an absolute URL based on the spec alone. Otherwise the scheme component is inherited from the context URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ccd5d8778f5d88a5474e8c59978eccee5689a2e" translate="yes" xml:space="preserve">
          <source>If the second argument is 1.0, then the result is the same as the first argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8344687c76c61e184619d725d0545c562c31518" translate="yes" xml:space="preserve">
          <source>If the second argument is NaN, then the result is NaN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83af07e72de969c0ada685452a5155bf504024e7" translate="yes" xml:space="preserve">
          <source>If the second argument is positive or negative zero, then the result is 1.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b941ca67a1b9bc33a6bb0d7bf06f63dc95c2df8" translate="yes" xml:space="preserve">
          <source>If the second-of-minute is not available then jump to the next space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ea372174aa5c23af0c1777c675872adacfad266" translate="yes" xml:space="preserve">
          <source>If the second-of-minute is not available then the format is complete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5653b3f59b63219b61535639dd8eec29f7dad782" translate="yes" xml:space="preserve">
          <source>If the security property is set to the fully qualified name of a &lt;code&gt;CallbackHandler&lt;/code&gt; implementation class, then a &lt;code&gt;LoginContext&lt;/code&gt; will load the specified &lt;code&gt;CallbackHandler&lt;/code&gt; and pass it to the underlying LoginModules. The &lt;code&gt;LoginContext&lt;/code&gt; only loads the default handler if it was not provided one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08dd4228bba4510d42bc79e395b01540dece6a1f" translate="yes" xml:space="preserve">
          <source>If the selector has already been closed then this method returns immediately. Otherwise it marks the selector as closed and then invokes the &lt;a href=&quot;abstractselector#implCloseSelector--&quot;&gt;&lt;code&gt;implCloseSelector&lt;/code&gt;&lt;/a&gt; method in order to complete the close operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7ad935cdc55d4a107502fb1347aaf4da85ef291" translate="yes" xml:space="preserve">
          <source>If the selector itself is closed then the channel will be deregistered, and the key representing its registration will be invalidated, without further delay.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="527b7c6f507b87aa21ddf93053b13e95205bb2c8" translate="yes" xml:space="preserve">
          <source>If the sequence is mutated while the stream is being read, the result is undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96cc80cb5c49589843f4c152dbe187b0d7672c14" translate="yes" xml:space="preserve">
          <source>If the set contains &lt;code&gt;null&lt;/code&gt; or elements that are not of type &lt;code&gt;PosixFilePermission&lt;/code&gt; then these elements are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a2fc5c10d29d945ad7e76e24ac30350f31297ef" translate="yes" xml:space="preserve">
          <source>If the set is modified after the iterator is created, in any way except by invoking the iterator's own &lt;a href=&quot;../../util/iterator#remove--&quot;&gt;&lt;code&gt;remove&lt;/code&gt;&lt;/a&gt; method, then a &lt;a href=&quot;../../util/concurrentmodificationexception&quot;&gt;&lt;code&gt;ConcurrentModificationException&lt;/code&gt;&lt;/a&gt; will be thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6f544e9f4637d730c544f2df049efe3bc2241c9" translate="yes" xml:space="preserve">
          <source>If the signs of arguments are unknown and a positive modulus is needed it can be computed as &lt;code&gt;(floorMod(x, y) + abs(y)) % abs(y)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d63f4df1fec01d153e077a0cd492720daea9604" translate="yes" xml:space="preserve">
          <source>If the signs of the arguments are different, the quotient is negative and &lt;code&gt;floorDiv&lt;/code&gt; returns the integer less than or equal to the quotient and the &lt;code&gt;/&lt;/code&gt; operator returns the integer closest to zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b3eddbc3f191c883b4734fcd232862a579d8785" translate="yes" xml:space="preserve">
          <source>If the signs of the arguments are different, the results differ from the &lt;code&gt;%&lt;/code&gt; operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8893f46ae7c980fbb6e68ff03e7cfa2f4485e10e" translate="yes" xml:space="preserve">
          <source>If the signs of the arguments are the same, the results of &lt;code&gt;floorDiv&lt;/code&gt; and the &lt;code&gt;/&lt;/code&gt; operator are the same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7d5446141374acaa0bf3d68df3adaaf0963a7c6" translate="yes" xml:space="preserve">
          <source>If the signs of the arguments are the same, the results of &lt;code&gt;floorMod&lt;/code&gt; and the &lt;code&gt;%&lt;/code&gt; operator are the same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c0c3191c882ae94e067ec4dbb9ae1efa5c18a6b" translate="yes" xml:space="preserve">
          <source>If the size of the map (the number of key-value mappings) sufficiently exceeds the expected maximum size, the number of buckets is increased. Increasing the number of buckets (&quot;rehashing&quot;) may be fairly expensive, so it pays to create identity hash maps with a sufficiently large expected maximum size. On the other hand, iteration over collection views requires time proportional to the number of buckets in the hash table, so it pays not to set the expected maximum size too high if you are especially concerned with iteration performance or memory usage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ca2d090f17022dd5e73b01197f1d6848c079ffd" translate="yes" xml:space="preserve">
          <source>If the socket was bound prior to being &lt;a href=&quot;datagramsocket#close--&quot;&gt;&lt;code&gt;closed&lt;/code&gt;&lt;/a&gt;, then this method will continue to return &lt;code&gt;true&lt;/code&gt; after the socket is closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59679157176f257978bbe9def3e0740bb5fb205a" translate="yes" xml:space="preserve">
          <source>If the socket was bound prior to being &lt;a href=&quot;serversocket#close--&quot;&gt;&lt;code&gt;closed&lt;/code&gt;&lt;/a&gt;, then this method will continue to return the address of the endpoint after the socket is closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e21984f9cc07335c38e61e8524fe85a27b1d410" translate="yes" xml:space="preserve">
          <source>If the socket was bound prior to being &lt;a href=&quot;serversocket#close--&quot;&gt;&lt;code&gt;closed&lt;/code&gt;&lt;/a&gt;, then this method will continue to return the local address after the socket is closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="763b9cd171c3cff366fd68dad3b49caafc1fe527" translate="yes" xml:space="preserve">
          <source>If the socket was bound prior to being &lt;a href=&quot;serversocket#close--&quot;&gt;&lt;code&gt;closed&lt;/code&gt;&lt;/a&gt;, then this method will continue to return the port number after the socket is closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd6141b5241054244025e22ff3d73a0248d5fc8c" translate="yes" xml:space="preserve">
          <source>If the socket was bound prior to being &lt;a href=&quot;socket#close--&quot;&gt;&lt;code&gt;closed&lt;/code&gt;&lt;/a&gt;, then this method will continue to return the local port number after the socket is closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fc8e1670126679859d5c660bcdcb0e5c4dce29e" translate="yes" xml:space="preserve">
          <source>If the socket was connected prior to being &lt;a href=&quot;datagramsocket#close--&quot;&gt;&lt;code&gt;closed&lt;/code&gt;&lt;/a&gt;, then this method will continue to return &lt;code&gt;true&lt;/code&gt; after the socket is closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eded3cce47a4f9690c31a1eee5141c639e63658a" translate="yes" xml:space="preserve">
          <source>If the socket was connected prior to being &lt;a href=&quot;datagramsocket#close--&quot;&gt;&lt;code&gt;closed&lt;/code&gt;&lt;/a&gt;, then this method will continue to return the connected address after the socket is closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3d182eb3854cd39ce3f790ae76cf8abf4ec7f3e" translate="yes" xml:space="preserve">
          <source>If the socket was connected prior to being &lt;a href=&quot;datagramsocket#close--&quot;&gt;&lt;code&gt;closed&lt;/code&gt;&lt;/a&gt;, then this method will continue to return the connected port number after the socket is closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac6a556c1933db902b091802b19407a613fc41d9" translate="yes" xml:space="preserve">
          <source>If the socket was connected prior to being &lt;a href=&quot;socket#close--&quot;&gt;&lt;code&gt;closed&lt;/code&gt;&lt;/a&gt;, then this method will continue to return the connected address after the socket is closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abfab3eeb26c13c0835e0da8c32c95bf0e46c4ed" translate="yes" xml:space="preserve">
          <source>If the socket was connected prior to being &lt;a href=&quot;socket#close--&quot;&gt;&lt;code&gt;closed&lt;/code&gt;&lt;/a&gt;, then this method will continue to return the connected port number after the socket is closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c74e08fa061f46bcfc74bd1ceb1c899db939f1d9" translate="yes" xml:space="preserve">
          <source>If the source is &lt;a href=&quot;processbuilder.redirect#PIPE&quot;&gt;&lt;code&gt;Redirect.PIPE&lt;/code&gt;&lt;/a&gt; (the initial value), then the standard input of a subprocess can be written to using the output stream returned by &lt;a href=&quot;process#getOutputStream--&quot;&gt;&lt;code&gt;Process.getOutputStream()&lt;/code&gt;&lt;/a&gt;. If the source is set to any other value, then &lt;a href=&quot;process#getOutputStream--&quot;&gt;&lt;code&gt;Process.getOutputStream()&lt;/code&gt;&lt;/a&gt; will return a &lt;a href=&quot;#redirect-input&quot;&gt;null output stream&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="661f6402b0c9208e67543bc3982626f5f2502c0a" translate="yes" xml:space="preserve">
          <source>If the source of the notification is a reference to an MBean object, the MBean server will replace it by that MBean's ObjectName. Otherwise the source is unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc0afb74deac5658d35d1df20daa373ddaf8091c" translate="yes" xml:space="preserve">
          <source>If the spec's path component begins with a slash character &quot;/&quot; then the path is treated as absolute and the spec path replaces the context path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97c03df7f79f779f19dbd94c565abdfcc104d7ca" translate="yes" xml:space="preserve">
          <source>If the specified IP address is bound to multiple network interfaces it is not defined which network interface is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96c68f935629df479cecc1daf2323805432c7c1f" translate="yes" xml:space="preserve">
          <source>If the specified amount is a &lt;code&gt;ChronoPeriod&lt;/code&gt; then it must have the same chronology as this period. Implementations may choose to accept or reject other &lt;code&gt;TemporalAmount&lt;/code&gt; implementations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeb138890341e49f448dcdb19a0436d6eccb12fa" translate="yes" xml:space="preserve">
          <source>If the specified calendar doesn't support week dates, the &lt;a href=&quot;calendar.builder#build--&quot;&gt;&lt;code&gt;build&lt;/code&gt;&lt;/a&gt; method will throw an &lt;a href=&quot;../lang/illegalargumentexception&quot;&gt;&lt;code&gt;IllegalArgumentException&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21d5a2365b7e2ef9cdf719d377a83491e9b996d8" translate="yes" xml:space="preserve">
          <source>If the specified comment is &lt;code&gt;null&lt;/code&gt; then no comment will be stored in the document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c00aef2c14db555263f047e1c32a11c40196454" translate="yes" xml:space="preserve">
          <source>If the specified comparator is &lt;code&gt;null&lt;/code&gt; then all elements in this list must implement the &lt;a href=&quot;../../lang/comparable&quot;&gt;&lt;code&gt;Comparable&lt;/code&gt;&lt;/a&gt; interface and the elements' &lt;a href=&quot;../../lang/comparable&quot;&gt;natural ordering&lt;/a&gt; should be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aefe2d484ac87a9f75945af0a56cb6b62891cb32" translate="yes" xml:space="preserve">
          <source>If the specified comparator is &lt;code&gt;null&lt;/code&gt; then all elements in this list must implement the &lt;a href=&quot;../lang/comparable&quot;&gt;&lt;code&gt;Comparable&lt;/code&gt;&lt;/a&gt; interface and the elements' &lt;a href=&quot;../lang/comparable&quot;&gt;natural ordering&lt;/a&gt; should be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e90b9efbdd73e57fac8cf7dcbd6a9324c80a3a89" translate="yes" xml:space="preserve">
          <source>If the specified date-time has already passed, the job must be a candidate for processing immediately. Thus, one way to make the job immediately become a candidate for processing is to specify a JobHoldUntil attribute constructed like this (denoting a date-time of January 1, 1970, 00:00:00 GMT):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2496623a004f15dd4819ee54aa8493f7e338eba3" translate="yes" xml:space="preserve">
          <source>If the specified host is &lt;code&gt;null&lt;/code&gt; it is the equivalent of specifying the address as &lt;a href=&quot;inetaddress#getByName-java.lang.String-&quot;&gt;&lt;code&gt;InetAddress.getByName&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(null)&lt;/code&gt;. In other words, it is equivalent to specifying an address of the loopback interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="900d04445ca5a80f48077470ed1101681577ef82" translate="yes" xml:space="preserve">
          <source>If the specified key is not already associated with a (non-null) value, associates it with the given value. Otherwise, replaces the value with the results of the given remapping function, or removes if &lt;code&gt;null&lt;/code&gt;. The entire method invocation is performed atomically. Some attempted update operations on this map by other threads may be blocked while computation is in progress, so the computation should be short and simple, and must not attempt to update any other mappings of this Map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="327e72df9ef84db72836c87a15ef8d4fb475f995" translate="yes" xml:space="preserve">
          <source>If the specified key is not already associated with a value (or is mapped to &lt;code&gt;null&lt;/code&gt;) associates it with the given value and returns &lt;code&gt;null&lt;/code&gt;, else returns the current value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b0beef1230b8f936ac0be883b146508d29a805b" translate="yes" xml:space="preserve">
          <source>If the specified key is not already associated with a value (or is mapped to &lt;code&gt;null&lt;/code&gt;), attempts to compute its value using the given mapping function and enters it into this map unless &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50fe8f5b029680a754d045deccf54d554f1ecb50" translate="yes" xml:space="preserve">
          <source>If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value. Otherwise, replaces the associated value with the results of the given remapping function, or removes if the result is &lt;code&gt;null&lt;/code&gt;. This method may be of use when combining multiple mapped values for a key. For example, to either create or append a &lt;code&gt;String msg&lt;/code&gt; to a value mapping:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07aab8862177972b392beb8f0bf5c9cd52e38ac3" translate="yes" xml:space="preserve">
          <source>If the specified key is not already associated with a value or is associated with null, associates it with the given value. Otherwise, replaces the value with the results of the given remapping function, or removes if the result is null. This method may be of use when combining multiple mapped values for a key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4925c79cda2f9aaf0050cbbfb1bd9cb1cde5984" translate="yes" xml:space="preserve">
          <source>If the specified key is not already associated with a value, associate it with the given value. This is equivalent to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df5a13cc298f2e36b4088599af2bf52a36c46112" translate="yes" xml:space="preserve">
          <source>If the specified key is not already associated with a value, associates it with the given value. Otherwise, replaces the value with the results of the given remapping function, or removes if &lt;code&gt;null&lt;/code&gt;. The function is &lt;em&gt;NOT&lt;/em&gt; guaranteed to be applied once atomically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="551c906c1bb44aa217c725bb3e6835b67419ea34" translate="yes" xml:space="preserve">
          <source>If the specified key is not already associated with a value, attempts to compute its value using the given mapping function and enters it into this map unless &lt;code&gt;null&lt;/code&gt;. The entire method invocation is performed atomically, so the function is applied at most once per key. Some attempted update operations on this map by other threads may be blocked while computation is in progress, so the computation should be short and simple, and must not attempt to update any other mappings of this map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="199aa69d5cf4c4d157c5d05ec7094035a1890fc8" translate="yes" xml:space="preserve">
          <source>If the specified key is not already associated with a value, attempts to compute its value using the given mapping function and enters it into this map unless &lt;code&gt;null&lt;/code&gt;. The function is &lt;em&gt;NOT&lt;/em&gt; guaranteed to be applied once atomically only if the value is not present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74ec46a56735923288ea9182f5be9a7235b7c574" translate="yes" xml:space="preserve">
          <source>If the specified language tag contains any ill-formed subtags, the first such subtag and all following subtags are ignored. Compare to &lt;a href=&quot;locale.builder#setLanguageTag-java.lang.String-&quot;&gt;&lt;code&gt;Locale.Builder.setLanguageTag(java.lang.String)&lt;/code&gt;&lt;/a&gt; which throws an exception in this case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29e16cfca3f81f7f2c484ea21572aa935aba3557" translate="yes" xml:space="preserve">
          <source>If the specified list is small or implements the &lt;a href=&quot;randomaccess&quot;&gt;&lt;code&gt;RandomAccess&lt;/code&gt;&lt;/a&gt; interface, this implementation exchanges the first element into the location it should go, and then repeatedly exchanges the displaced element into the location it should go until a displaced element is swapped into the first element. If necessary, the process is repeated on the second and successive elements, until the rotation is complete. If the specified list is large and doesn't implement the &lt;code&gt;RandomAccess&lt;/code&gt; interface, this implementation breaks the list into two sublist views around index &lt;code&gt;-distance mod size&lt;/code&gt;. Then the &lt;a href=&quot;collections#reverse-java.util.List-&quot;&gt;&lt;code&gt;reverse(List)&lt;/code&gt;&lt;/a&gt; method is invoked on each sublist view, and finally it is invoked on the entire list. For a more complete description of both algorithms, see Section 2.3 of Jon Bentley's</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e207478f4c307f8daec04a1eb43edfa1b56c4337" translate="yes" xml:space="preserve">
          <source>If the specified local address is &lt;code&gt;null&lt;/code&gt; it is the equivalent of specifying the address as the AnyLocal address (see &lt;a href=&quot;inetaddress#isAnyLocalAddress--&quot;&gt;&lt;code&gt;InetAddress.isAnyLocalAddress&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bb4277707fb1b363f377904ef8a00ae80162edc" translate="yes" xml:space="preserve">
          <source>If the specified name is already in the list of enabled attribute names, this method has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fdd0b3e89e1f58df16acb73daa9598c19a8c783" translate="yes" xml:space="preserve">
          <source>If the specified name is not in the list of enabled attribute names, this method has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92b923f20f66bacef4d2ff1b575298d2082a6d3b" translate="yes" xml:space="preserve">
          <source>If the specified object is an instance of &lt;code&gt;Throwable&lt;/code&gt;, it becomes the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f07c1a027ba244740b1e94181579aafe6b9799f7" translate="yes" xml:space="preserve">
          <source>If the specified prefix is already in the list of enabled notification types, this method has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35c19bfb0ddf95e53e5300c7d5d437ccd663d657" translate="yes" xml:space="preserve">
          <source>If the specified prefix is not in the list of enabled notification types, this method has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f43c50810daae04d0ace6639274dabc1168944f9" translate="yes" xml:space="preserve">
          <source>If the specified property is not defined for a particular file format, this method returns &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1954d35e1a8126307e2b4392ca7004d2cfa54884" translate="yes" xml:space="preserve">
          <source>If the specified waiting time elapses then &lt;a href=&quot;timeoutexception&quot;&gt;&lt;code&gt;TimeoutException&lt;/code&gt;&lt;/a&gt; is thrown. If the time is less than or equal to zero, the method will not wait at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="310c63f9de70d34cca02c16171cb0b3c368911f0" translate="yes" xml:space="preserve">
          <source>If the specified waiting time elapses then the value &lt;code&gt;false&lt;/code&gt; is returned. If the time is less than or equal to zero, the method will not wait at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="229ff9ac1c41d305f35a7c0608935889e0aaec6b" translate="yes" xml:space="preserve">
          <source>If the specified waiting time elapses then the value &lt;code&gt;false&lt;/code&gt; is returned. If the time is less than or equal to zero, the method will not wait at all. Any permits that were to be assigned to this thread, are instead assigned to other threads trying to acquire permits, as if the permits had been made available by a call to &lt;a href=&quot;semaphore#release--&quot;&gt;&lt;code&gt;release()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dda73785392b01747ad72630377e93ff7ebd123" translate="yes" xml:space="preserve">
          <source>If the stack trace of this &lt;code&gt;Throwable&lt;/code&gt;&lt;a href=&quot;throwable#Throwable-java.lang.String-java.lang.Throwable-boolean-boolean-&quot;&gt;is not writable&lt;/a&gt;, calling this method has no effect other than validating its argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f140d470f07fad292b66fc6ee306ae6d2a54ab2a" translate="yes" xml:space="preserve">
          <source>If the stack trace of this &lt;code&gt;Throwable&lt;/code&gt;&lt;a href=&quot;throwable#Throwable-java.lang.String-java.lang.Throwable-boolean-boolean-&quot;&gt;is not writable&lt;/a&gt;, calling this method has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="077ba9a63c85f3c79b6472adbd6bd273ed829948" translate="yes" xml:space="preserve">
          <source>If the standard error of the subprocess has been redirected using &lt;a href=&quot;processbuilder#redirectError-java.lang.ProcessBuilder.Redirect-&quot;&gt;&lt;code&gt;ProcessBuilder.redirectError&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;processbuilder#redirectErrorStream-boolean-&quot;&gt;&lt;code&gt;ProcessBuilder.redirectErrorStream&lt;/code&gt;&lt;/a&gt; then this method will return a &lt;a href=&quot;processbuilder#redirect-output&quot;&gt;null input stream&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86430b03fbc71403519b5c3b7220021c3f6618a7" translate="yes" xml:space="preserve">
          <source>If the standard input of the subprocess has been redirected using &lt;a href=&quot;processbuilder#redirectInput-java.lang.ProcessBuilder.Redirect-&quot;&gt;&lt;code&gt;ProcessBuilder.redirectInput&lt;/code&gt;&lt;/a&gt; then this method will return a &lt;a href=&quot;processbuilder#redirect-input&quot;&gt;null output stream&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7075f6432f67c8c99f417e3aed9f9abd4674447d" translate="yes" xml:space="preserve">
          <source>If the standard output of the subprocess has been redirected using &lt;a href=&quot;processbuilder#redirectOutput-java.lang.ProcessBuilder.Redirect-&quot;&gt;&lt;code&gt;ProcessBuilder.redirectOutput&lt;/code&gt;&lt;/a&gt; then this method will return a &lt;a href=&quot;processbuilder#redirect-output&quot;&gt;null input stream&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d366f3eb6bf9e4d636eed0b8ad01a318338322f7" translate="yes" xml:space="preserve">
          <source>If the stream argument is &lt;code&gt;true&lt;/code&gt;, this creates a stream socket. If the stream argument is &lt;code&gt;false&lt;/code&gt;, it creates a datagram socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92109724254a6a952d63389232984fc4b39d101f" translate="yes" xml:space="preserve">
          <source>If the stream is parallel, and the &lt;code&gt;Collector&lt;/code&gt; is &lt;a href=&quot;collector.characteristics#CONCURRENT&quot;&gt;&lt;code&gt;concurrent&lt;/code&gt;&lt;/a&gt;, and either the stream is unordered or the collector is &lt;a href=&quot;collector.characteristics#UNORDERED&quot;&gt;&lt;code&gt;unordered&lt;/code&gt;&lt;/a&gt;, then a concurrent reduction will be performed (see &lt;a href=&quot;collector&quot;&gt;&lt;code&gt;Collector&lt;/code&gt;&lt;/a&gt; for details on concurrent reduction.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="649cf82f464f662aa965403c73cf99d556fea581" translate="yes" xml:space="preserve">
          <source>If the subprocess has already terminated then this method returns immediately with the value &lt;code&gt;true&lt;/code&gt;. If the process has not terminated and the timeout value is less than, or equal to, zero, then this method returns immediately with the value &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b0a8ba1234c9978531ae814a7cbb1dae0a3c230" translate="yes" xml:space="preserve">
          <source>If the superclass is a parameterized type, the &lt;code&gt;Type&lt;/code&gt; object returned must accurately reflect the actual type parameters used in the source code. The parameterized type representing the superclass is created if it had not been created before. See the declaration of &lt;a href=&quot;reflect/parameterizedtype&quot;&gt;&lt;code&gt;ParameterizedType&lt;/code&gt;&lt;/a&gt; for the semantics of the creation process for parameterized types. If this &lt;code&gt;Class&lt;/code&gt; represents either the &lt;code&gt;Object&lt;/code&gt; class, an interface, a primitive type, or void, then null is returned. If this object represents an array class then the &lt;code&gt;Class&lt;/code&gt; object representing the &lt;code&gt;Object&lt;/code&gt; class is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="702061aae71a7b0bc29035519b62837f0bf9ee3d" translate="yes" xml:space="preserve">
          <source>If the supplied &lt;code&gt;ImageReadParam&lt;/code&gt; contains optional setting values not supported by this reader (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6062faf5608aab9b4601cbc2c84f0f96e088fa9" translate="yes" xml:space="preserve">
          <source>If the supplied &lt;code&gt;ImageWriteParam&lt;/code&gt; contains optional setting values not supported by this writer (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0ec08c9bcf3ded436efba803a4101d1da6386d3" translate="yes" xml:space="preserve">
          <source>If the supplied &lt;code&gt;ImageWriteParam&lt;/code&gt; contains optional setting values not understood by this writer or transcoder, they will be ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11c8152472d911028fe75c0272d12bdc08e6d5e4" translate="yes" xml:space="preserve">
          <source>If the system does not support environment variables, an empty map is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98fa5298bfbc9c3dc738e30b2cfbc794eda77505" translate="yes" xml:space="preserve">
          <source>If the system property &quot;&lt;code&gt;java.system.class.loader&lt;/code&gt;&quot; is defined when this method is first invoked then the value of that property is taken to be the name of a class that will be returned as the system class loader. The class is loaded using the default system class loader and must define a public constructor that takes a single parameter of type &lt;code&gt;ClassLoader&lt;/code&gt; which is used as the delegation parent. An instance is then created using this constructor with the default system class loader as the parameter. The resulting class loader is defined to be the system class loader.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a82eebeff03c982f8a2c8e7b92fff81f4e06e38" translate="yes" xml:space="preserve">
          <source>If the system property &lt;code&gt;java.nio.channels.spi.AsynchronousChannelProvider&lt;/code&gt; is defined then it is taken to be the fully-qualified name of a concrete provider class. The class is loaded and instantiated; if this process fails then an unspecified error is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52c1afd219c316bf40da492c932d1f909b2e0fe8" translate="yes" xml:space="preserve">
          <source>If the system property &lt;code&gt;java.nio.channels.spi.SelectorProvider&lt;/code&gt; is defined then it is taken to be the fully-qualified name of a concrete provider class. The class is loaded and instantiated; if this process fails then an unspecified error is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3d062ab7060d9b3ee095375a8de4d829bd4225b" translate="yes" xml:space="preserve">
          <source>If the system property &lt;code&gt;java.nio.file.spi.DefaultFileSystemProvider&lt;/code&gt; is defined then it is taken to be a list of one or more fully-qualified names of concrete provider classes identified by the URI scheme &lt;code&gt;&quot;file&quot;&lt;/code&gt;. Where the property is a list of more than one name then the names are separated by a comma. Each class is loaded, using the system class loader, and instantiated by invoking a one argument constructor whose formal parameter type is &lt;code&gt;FileSystemProvider&lt;/code&gt;. The providers are loaded and instantiated in the order they are listed in the property. If this process fails or a provider's scheme is not equal to &lt;code&gt;&quot;file&quot;&lt;/code&gt; then an unspecified error is thrown. URI schemes are normally compared without regard to case but for the default provider, the scheme is required to be &lt;code&gt;&quot;file&quot;&lt;/code&gt;. The first provider class is instantiated by invoking it with a reference to the system-default provider. The second provider class is instantiated by invoking it with a reference to the first provider instance. The third provider class is instantiated by invoking it with a reference to the second instance, and so on. The last provider to be instantiated becomes the default provider; its &lt;code&gt;getFileSystem&lt;/code&gt; method is invoked with the URI &lt;code&gt;&quot;file:///&quot;&lt;/code&gt; to get a reference to the default file system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd24e048fc15e059868d56f4f568438df6b0caf5" translate="yes" xml:space="preserve">
          <source>If the system property &lt;code&gt;java.util.jar.Pack200.Packer&lt;/code&gt; is defined, then the value is taken to be the fully-qualified name of a concrete implementation class, which must implement Packer. This class is loaded and instantiated. If this process fails then an unspecified error is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45a9607a9147c5f0b3360c97b95442bd171c997a" translate="yes" xml:space="preserve">
          <source>If the system property &lt;code&gt;java.util.jar.Pack200.Unpacker&lt;/code&gt; is defined, then the value is taken to be the fully-qualified name of a concrete implementation class, which must implement Unpacker. The class is loaded and instantiated. If this process fails then an unspecified error is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e75189cd7136093b1d6f408091c23d0de22eb446" translate="yes" xml:space="preserve">
          <source>If the system property &lt;code&gt;java.util.prefs.PreferencesFactory&lt;/code&gt; is defined, then it is taken to be the fully-qualified name of a class implementing the &lt;code&gt;PreferencesFactory&lt;/code&gt; interface. The class is loaded and instantiated; if this process fails then an unspecified error is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7e27f744d6efd52e983b8075a0c2febcea34f65" translate="yes" xml:space="preserve">
          <source>If the system property &lt;code&gt;javax.management.builder.initial&lt;/code&gt; is set, the platform &lt;code&gt;MBeanServer&lt;/code&gt; creation will be done by the specified &lt;a href=&quot;../../../javax/management/mbeanserverbuilder&quot;&gt;&lt;code&gt;MBeanServerBuilder&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cde7239c70f83bff85e4440c46d6384691316ad" translate="yes" xml:space="preserve">
          <source>If the system property &lt;code&gt;javax.sound.midi.Receiver&lt;/code&gt; is defined or it is defined in the file &quot;sound.properties&quot;, it is used to identify the device that provides the default receiver. For details, refer to the &lt;a href=&quot;midisystem&quot;&gt;&lt;code&gt;class description&lt;/code&gt;&lt;/a&gt;. If a suitable MIDI port is not available, the Receiver is retrieved from an installed synthesizer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91d3c314661dc26f163d797ffb58967de288f2ac" translate="yes" xml:space="preserve">
          <source>If the system property &lt;code&gt;javax.sound.midi.Sequencer&lt;/code&gt; is defined or it is defined in the file &quot;sound.properties&quot;, it is used to identify the default sequencer. For details, refer to the &lt;a href=&quot;midisystem&quot;&gt;&lt;code&gt;class description&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00dcdd9d0bce1154db11492279afceeca3e08d7a" translate="yes" xml:space="preserve">
          <source>If the system property &lt;code&gt;javax.sound.midi.Synthesizer&lt;/code&gt; is defined or it is defined in the file &quot;sound.properties&quot;, it is used to identify the default synthesizer. For details, refer to the &lt;a href=&quot;midisystem&quot;&gt;&lt;code&gt;class description&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30df19d74bec068b077f43c95c9174eacf908696" translate="yes" xml:space="preserve">
          <source>If the system property &lt;code&gt;javax.sound.midi.Transmitter&lt;/code&gt; is defined or it is defined in the file &quot;sound.properties&quot;, it is used to identify the device that provides the default transmitter. For details, refer to the &lt;a href=&quot;midisystem&quot;&gt;&lt;code&gt;class description&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2db720e9cdab4ebfc9f02a35fbd8f738bb2171b1" translate="yes" xml:space="preserve">
          <source>If the system property &lt;code&gt;javax.sound.sampled.Clip&lt;/code&gt; is defined or it is defined in the file &quot;sound.properties&quot;, it is used to retrieve the default clip. For details, refer to the &lt;a href=&quot;audiosystem&quot;&gt;&lt;code&gt;class description&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="878cc5542428544d5bac13085b41e0430d054903" translate="yes" xml:space="preserve">
          <source>If the system property &lt;code&gt;javax.sound.sampled.SourceDataLine&lt;/code&gt; is defined or it is defined in the file &quot;sound.properties&quot;, it is used to retrieve the default source data line. For details, refer to the &lt;a href=&quot;audiosystem&quot;&gt;&lt;code&gt;class description&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8d607cde38af381ba0dfdab64a53303e271b212" translate="yes" xml:space="preserve">
          <source>If the system property &lt;code&gt;javax.sound.sampled.TargetDataLine&lt;/code&gt; is defined or it is defined in the file &quot;sound.properties&quot;, it is used to retrieve the default target data line. For details, refer to the &lt;a href=&quot;audiosystem&quot;&gt;&lt;code&gt;class description&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6af05deaf58fe154a4b75ce321753672bae18f99" translate="yes" xml:space="preserve">
          <source>If the target file exists, then the target file is replaced if it is not a non-empty directory. If the target file exists and is a symbolic link, then the symbolic link itself, not the target of the link, is replaced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c180e88e82b133d4c219bf7bc995901410956a4" translate="yes" xml:space="preserve">
          <source>If the target method handle consumes no arguments besides than the result (if any) of the filter &lt;code&gt;coll&lt;/code&gt;, then &lt;code&gt;collectArguments(mh, 0, coll)&lt;/code&gt; is equivalent to &lt;code&gt;filterReturnValue(coll, mh)&lt;/code&gt;. If the filter method handle &lt;code&gt;coll&lt;/code&gt; consumes one argument and produces a non-void result, then &lt;code&gt;collectArguments(mh, N, coll)&lt;/code&gt; is equivalent to &lt;code&gt;filterArguments(mh, N, coll)&lt;/code&gt;. Other equivalences are possible but would require argument permutation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a6410dfb8cfd393874164170a840502005c25ad" translate="yes" xml:space="preserve">
          <source>If the target returns a value, the filter must accept that value as its only argument. If the target returns void, the filter must accept no arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60ff5ddff7c5d899dfe402e4472a1b9b2a332d25" translate="yes" xml:space="preserve">
          <source>If the temporal object does not contain a date, but does contain one or more &lt;code&gt;ChronoField&lt;/code&gt; date fields, then a &lt;code&gt;DateTimeException&lt;/code&gt; is thrown. In all other cases, the override chronology is added to the temporal, replacing any previous chronology, but without changing the date/time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd85e14ed75c47c84beea3f122d891fc9308e690" translate="yes" xml:space="preserve">
          <source>If the temporal object does not contain an instant, but does contain an offset then an additional check is made. If the normalized override zone is an offset that differs from the offset of the temporal, then a &lt;code&gt;DateTimeException&lt;/code&gt; is thrown. In all other cases, the override zone is added to the temporal, replacing any previous zone, but without changing the date/time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c09abaae8508d70028ba67cefa61277b54360a6" translate="yes" xml:space="preserve">
          <source>If the thread argument is a system thread (belongs to the thread group with a &lt;code&gt;null&lt;/code&gt; parent) then this method calls &lt;code&gt;checkPermission&lt;/code&gt; with the &lt;code&gt;RuntimePermission(&quot;modifyThread&quot;)&lt;/code&gt; permission. If the thread argument is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="956a4caf473783d2c99b96d529421cc001582508" translate="yes" xml:space="preserve">
          <source>If the thread group argument is the system thread group ( has a &lt;code&gt;null&lt;/code&gt; parent) then this method calls &lt;code&gt;checkPermission&lt;/code&gt; with the &lt;code&gt;RuntimePermission(&quot;modifyThreadGroup&quot;)&lt;/code&gt; permission. If the thread group argument is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2851f30724641ecca099288cb8621aaa00615fd6" translate="yes" xml:space="preserve">
          <source>If the thread is alive but suspended, it is resumed and is permitted to make progress in its execution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8d129983d6e8dc28983c9eb2cd579ed898cf687" translate="yes" xml:space="preserve">
          <source>If the thread is alive, it is suspended and makes no further progress unless and until it is resumed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95f23b0ab1d9ecd54f0d7d1cfdcbc8a705f2c602" translate="yes" xml:space="preserve">
          <source>If the thread of the specified ID is not alive or does not exist, this method returns &lt;code&gt;-1&lt;/code&gt;. If CPU time measurement is disabled, this method returns &lt;code&gt;-1&lt;/code&gt;. A thread is alive if it has been started and has not yet died.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97aef73764a8b235d11df488cc792228726de005" translate="yes" xml:space="preserve">
          <source>If the time '23:59:60' is received, then a simple conversion is applied, replacing the second-of-minute of 60 with 59. This query can be used on the parse result to determine if the leap-second adjustment was made. The query will return &lt;code&gt;true&lt;/code&gt; if it did adjust to remove the leap-second, and &lt;code&gt;false&lt;/code&gt; if not. Note that applying a leap-second smoothing mechanism, such as UTC-SLS, is the responsibility of the application, as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ae6878cfd3b1d0ceb5a94fe0301dc8e364dcc4f" translate="yes" xml:space="preserve">
          <source>If the timeout limit is set to 't' seconds, a session exceeds the timeout limit 't' seconds after its creation time. When the timeout limit is exceeded for a session, the &lt;code&gt;SSLSession&lt;/code&gt; object is invalidated and future connections cannot resume or rejoin the session. A check for sessions exceeding the timeout is made immediately whenever the timeout limit is changed for this &lt;code&gt;SSLSessionContext&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad1adddf8356c433278ef7cd10d12a5f2bd6c761" translate="yes" xml:space="preserve">
          <source>If the timeout limit is set to 't' seconds, a session exceeds the timeout limit 't' seconds after its creation time. When the timeout limit is exceeded for a session, the &lt;code&gt;SSLSession&lt;/code&gt; object is invalidated and future connections cannot resume or rejoin the session. A check for sessions exceeding the timeout limit is made immediately whenever the timeout limit is changed for this &lt;code&gt;SSLSessionContext&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44775d676f01ccf28f57333e6fb89f1c12f0cfd6" translate="yes" xml:space="preserve">
          <source>If the timer notification to be inserted has a date that is before the current date, the method behaves as if the specified date were the current date and the notification is delivered immediately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8056b6ccedf3aca7fb9d63268e271ee88e090cd9" translate="yes" xml:space="preserve">
          <source>If the timer notification to be inserted has a date that is before the current date, the method behaves as if the specified date were the current date.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7ed1fef67b3c31fe3734b8ae38aa892bb880b72" translate="yes" xml:space="preserve">
          <source>If the timer notification to be inserted has a date that is before the current date, the method behaves as if the specified date were the current date. The first notification is delivered immediately and the subsequent ones are spaced as specified by the period parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38b2e2e16267baf4e1e54405bd70137ca888e8ed" translate="yes" xml:space="preserve">
          <source>If the timer's task execution thread terminates unexpectedly, for example, because its &lt;code&gt;stop&lt;/code&gt; method is invoked, any further attempt to schedule a task on the timer will result in an &lt;code&gt;IllegalStateException&lt;/code&gt;, as if the timer's &lt;code&gt;cancel&lt;/code&gt; method had been invoked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac3591693d15d3e4209a0731ba617c073e32bb40" translate="yes" xml:space="preserve">
          <source>If the transformer throws an exception (which it doesn't catch), subsequent transformers will still be called and the load, redefine or retransform will still be attempted. Thus, throwing an exception has the same effect as returning &lt;code&gt;null&lt;/code&gt;. To prevent unexpected behavior when unchecked exceptions are generated in transformer code, a transformer can catch &lt;code&gt;Throwable&lt;/code&gt;. If the transformer believes the &lt;code&gt;classFileBuffer&lt;/code&gt; does not represent a validly formatted class file, it should throw an &lt;code&gt;IllegalClassFormatException&lt;/code&gt;; while this has the same effect as returning null. it facilitates the logging or debugging of format corruptions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cac1823b4d109a58d8c15953a4c53e9282211329" translate="yes" xml:space="preserve">
          <source>If the type is &lt;code&gt;null&lt;/code&gt;, a shared internal persistence delegate is returned that encodes &lt;code&gt;null&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24624d93ce0bd52bd62b61c2d340c4e06907a0dd" translate="yes" xml:space="preserve">
          <source>If the type is a &lt;code&gt;enum&lt;/code&gt; declaration, a shared internal persistence delegate is returned that encodes constants of this enumeration by their names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17c7dfdd306d9dca345cd59fbb286fb56494c02b" translate="yes" xml:space="preserve">
          <source>If the type is a primitive type or the corresponding wrapper, a shared internal persistence delegate is returned that encodes values of the given type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7266e7d4fe52b4f4bd2947e2022cc33489854699" translate="yes" xml:space="preserve">
          <source>If the type is a proxy, a shared internal persistence delegate is returned that encodes a proxy instance by using the &lt;a href=&quot;../lang/reflect/proxy#newProxyInstance-java.lang.ClassLoader-java.lang.Class:A-java.lang.reflect.InvocationHandler-&quot;&gt;&lt;code&gt;Proxy.newProxyInstance(java.lang.ClassLoader, java.lang.Class&amp;lt;?&amp;gt;[], java.lang.reflect.InvocationHandler)&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d791c963ef8e6e2b0fde7ef89bca6d1754b00b4" translate="yes" xml:space="preserve">
          <source>If the type is an array, a shared internal persistence delegate is returned that encodes an array of the appropriate type and length, and each of its elements as if they are properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99f690abde7ac9507cafcabd4eb11b9f675436cc" translate="yes" xml:space="preserve">
          <source>If the type of the underlying field is a type variable or a parameterized type, it is created. Otherwise, it is resolved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66b62dfc82fc14777b26e50687d5b79596a57206" translate="yes" xml:space="preserve">
          <source>If the underlying class is an array class, then its &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;private&lt;/code&gt; and &lt;code&gt;protected&lt;/code&gt; modifiers are the same as those of its component type. If this &lt;code&gt;Class&lt;/code&gt; represents a primitive type or void, its &lt;code&gt;public&lt;/code&gt; modifier is always &lt;code&gt;true&lt;/code&gt;, and its &lt;code&gt;protected&lt;/code&gt; and &lt;code&gt;private&lt;/code&gt; modifiers are always &lt;code&gt;false&lt;/code&gt;. If this object represents an array class, a primitive type or void, then its &lt;code&gt;final&lt;/code&gt; modifier is always &lt;code&gt;true&lt;/code&gt; and its interface modifier is always &lt;code&gt;false&lt;/code&gt;. The values of its other modifiers are not determined by this specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6635d2c90407f220bf7ecba5d59930986096dac" translate="yes" xml:space="preserve">
          <source>If the underlying field is a static field, the &lt;code&gt;obj&lt;/code&gt; argument is ignored; it may be null.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61e60b6593bad05aa260e774035853633abadd33" translate="yes" xml:space="preserve">
          <source>If the underlying field is final, the method throws an &lt;code&gt;IllegalAccessException&lt;/code&gt; unless &lt;code&gt;setAccessible(true)&lt;/code&gt; has succeeded for this &lt;code&gt;Field&lt;/code&gt; object and the field is non-static. Setting a final field in this way is meaningful only during deserialization or reconstruction of instances of classes with blank final fields, before they are made available for access by other parts of a program. Use in any other context may have unpredictable effects, including cases in which other parts of a program continue to use the original value of this field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8ffdb31707c7c6f0d8ea54510f297f85f678ae3" translate="yes" xml:space="preserve">
          <source>If the underlying field is of a primitive type, an unwrapping conversion is attempted to convert the new value to a value of a primitive type. If this attempt fails, the method throws an &lt;code&gt;IllegalArgumentException&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35c398b7568f2f6829527a1ee4e8ad05ab589757" translate="yes" xml:space="preserve">
          <source>If the underlying field is static, the &lt;code&gt;obj&lt;/code&gt; argument is ignored; it may be null.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79473e9ad073a8c2b30d02714d81cdc8e02b2e5d" translate="yes" xml:space="preserve">
          <source>If the underlying field is static, the class that declared the field is initialized if it has not already been initialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c2e8ba35ddb7d491a4530be7e2d58c63b91b804" translate="yes" xml:space="preserve">
          <source>If the underlying method is &lt;a href=&quot;methodhandles.lookup#callsens&quot;&gt;caller sensitive&lt;/a&gt;, the direct method handle will have been &quot;bound&quot; to a particular caller class, the &lt;a href=&quot;methodhandles.lookup#lookupClass--&quot;&gt;lookup class&lt;/a&gt; of the lookup object used to create it. Cracking this method handle with a different lookup class will fail even if the underlying method is public (like &lt;code&gt;Class.forName&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="315e1d5687f0be0717ab38a86bf5bdc38d92fd67" translate="yes" xml:space="preserve">
          <source>If the underlying method is an instance method, it is invoked using dynamic method lookup as documented in The Java Language Specification, Second Edition, section 15.12.4.4; in particular, overriding based on the runtime type of the target object will occur.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fdc5865953923b940ef228e2839e6291e6d1529" translate="yes" xml:space="preserve">
          <source>If the underlying method is static, the class that declared the method is initialized if it has not already been initialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5417f1946175b0c601b43e5b5d82e2dfa1a39a1f" translate="yes" xml:space="preserve">
          <source>If the underlying method is static, then the specified &lt;code&gt;obj&lt;/code&gt; argument is ignored. It may be null.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2221ca8e8e96c757d1acb4e9dea9f2b5398db497" translate="yes" xml:space="preserve">
          <source>If the unit is a &lt;a href=&quot;temporal/chronounit&quot;&gt;&lt;code&gt;ChronoUnit&lt;/code&gt;&lt;/a&gt; then the query is implemented here. The supported units are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd8d281301aa1d20e9a67171d9933765d4124562" translate="yes" xml:space="preserve">
          <source>If the unit is not a &lt;code&gt;ChronoUnit&lt;/code&gt;, then the result of this method is obtained by invoking &lt;code&gt;TemporalUnit.addTo(Temporal, long)&lt;/code&gt; passing &lt;code&gt;this&lt;/code&gt; as the first argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f71bc9db5b6219e1ae283e954d88ba321dd8591" translate="yes" xml:space="preserve">
          <source>If the unit is not a &lt;code&gt;ChronoUnit&lt;/code&gt;, then the result of this method is obtained by invoking &lt;code&gt;TemporalUnit.between(Temporal, Temporal)&lt;/code&gt; passing &lt;code&gt;this&lt;/code&gt; as the first argument and the converted input temporal as the second argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66bc82b1dd235049a5511719d85e81950af05fd7" translate="yes" xml:space="preserve">
          <source>If the unit is not a &lt;code&gt;ChronoUnit&lt;/code&gt;, then the result of this method is obtained by invoking &lt;code&gt;TemporalUnit.isSupportedBy(Temporal)&lt;/code&gt; passing &lt;code&gt;this&lt;/code&gt; as the argument. Whether the unit is supported is determined by the unit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20661569ddc05848e0dfeb41e06e5676e4ccca6a" translate="yes" xml:space="preserve">
          <source>If the unsigned magnitude is zero, it is represented by a single zero character &lt;code&gt;'0'&lt;/code&gt; (&lt;code&gt;'\u0030'&lt;/code&gt;); otherwise, the first character of the representation of the unsigned magnitude will not be the zero character. The characters &lt;code&gt;'0'&lt;/code&gt; (&lt;code&gt;'\u0030'&lt;/code&gt;) and &lt;code&gt;'1'&lt;/code&gt; (&lt;code&gt;'\u0031'&lt;/code&gt;) are used as binary digits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c10c42689b734462a910f9cd90fb2d17103287f1" translate="yes" xml:space="preserve">
          <source>If the unsigned magnitude is zero, it is represented by a single zero character &lt;code&gt;'0'&lt;/code&gt; (&lt;code&gt;'\u0030'&lt;/code&gt;); otherwise, the first character of the representation of the unsigned magnitude will not be the zero character. The following characters are used as hexadecimal digits:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f07ca050a4a81c4b683387f3c53d9089c379035d" translate="yes" xml:space="preserve">
          <source>If the unsigned magnitude is zero, it is represented by a single zero character &lt;code&gt;'0'&lt;/code&gt; (&lt;code&gt;'\u0030'&lt;/code&gt;); otherwise, the first character of the representation of the unsigned magnitude will not be the zero character. The following characters are used as octal digits:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb6714e942d1212dc9686ac25a627707c330ee39" translate="yes" xml:space="preserve">
          <source>If the user cancels the dialog, the returned attributes will not reflect any changes made by the user. A typical basic usage of this method may be :</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a3ff22bd71bfe0f9cb8dffa032e252c7a72a011" translate="yes" xml:space="preserve">
          <source>If the user provides an &lt;code&gt;RMIServerImpl&lt;/code&gt; rather than a &lt;code&gt;JMXServiceURL&lt;/code&gt;, then the generated &lt;code&gt;JMXServiceURL&lt;/code&gt; will have the local host name in its &lt;code&gt;&lt;em&gt;host&lt;/em&gt;&lt;/code&gt; part and no &lt;code&gt;&lt;em&gt;port&lt;/em&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="790177d5a2da0339061b07b0e2796a63d5c7bba4" translate="yes" xml:space="preserve">
          <source>If the user wants to represent more complex relations, involving properties and/or methods, he has to provide his own class implementing the Relation interface. This can be achieved either by inheriting from RelationSupport class, or by implementing the interface (fully or delegation to a RelationSupport object member).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d22c3736384d8f57852c160122995e97ee6f65b" translate="yes" xml:space="preserve">
          <source>If the value cannot be obtained then an exception will be thrown. If the value is negative an exception will be thrown. If the field does not have a fixed set of valid values then an exception will be thrown. If the field value in the date-time to be printed is invalid it cannot be printed and an exception will be thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ee0cd8b8e0f022dac140b1064202354f2993085" translate="yes" xml:space="preserve">
          <source>If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b761882d9981acf5026d5923e5e847a58120eb7" translate="yes" xml:space="preserve">
          <source>If the value for the specified key is present, attempts to compute a new mapping given the key and its current mapped value. The entire method invocation is performed atomically. Some attempted update operations on this map by other threads may be blocked while computation is in progress, so the computation should be short and simple, and must not attempt to update any other mappings of this map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3db5a9e74f7891f194526ea0f347239e63fa2ef" translate="yes" xml:space="preserve">
          <source>If the value for the specified key is present, attempts to compute a new mapping given the key and its current mapped value. The function is &lt;em&gt;NOT&lt;/em&gt; guaranteed to be applied once atomically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76a62dcfb0cff96625fd935bd1e2f63de3a120f6" translate="yes" xml:space="preserve">
          <source>If the value is 0, this means to wait indefinitely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="301076cf0d84829c80ed3ada45bc0a362fb8a4d9" translate="yes" xml:space="preserve">
          <source>If the value is NaN or infinite, the literal strings &quot;NaN&quot; or &quot;Infinity&quot;, respectively, will be output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab06ef8615a9271c661fe8e0122f8b8d95f1110e" translate="yes" xml:space="preserve">
          <source>If the value is NaN or positive infinity the literal strings &quot;NaN&quot; or &quot;Infinity&quot; respectively, will be output. If the value is negative infinity, then the output will be &quot;(Infinity)&quot; if the &lt;code&gt;'('&lt;/code&gt; flag is given otherwise the output will be &quot;-Infinity&quot;. These values are not localized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8386f5e063110a495ec4902ded50dbabab418fe" translate="yes" xml:space="preserve">
          <source>If the value is negative (or floating-point negative zero) and &lt;code&gt;'('&lt;/code&gt; flag is not given, then a &lt;code&gt;'-'&lt;/code&gt; (&lt;code&gt;'\u002d'&lt;/code&gt;) is prepended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f6d817a3f4c5b41b572c9b2e4daf5c4281d9fee" translate="yes" xml:space="preserve">
          <source>If the value is negative and the &lt;code&gt;'('&lt;/code&gt; flag is given, then a &lt;code&gt;'('&lt;/code&gt; (&lt;code&gt;'\u0028'&lt;/code&gt;) is prepended and a &lt;code&gt;')'&lt;/code&gt; (&lt;code&gt;'\u0029'&lt;/code&gt;) is appended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79c5db2353984efc6cb7e1c18940f5eb527e5ef9" translate="yes" xml:space="preserve">
          <source>If the value is negative, then it represents the number of days back from the end of the month where &lt;code&gt;-1&lt;/code&gt; is the last day of the month. In this case, the day identified is the latest possible date that the transition can be.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a89c880bd0c92196eb9e203f110acd320c2580c9" translate="yes" xml:space="preserve">
          <source>If the value is positive, then it represents a normal day-of-month, and is the earliest possible date that the transition can be. The date may refer to 29th February which should be treated as 1st March in non-leap years.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3334ef34b1cd3c138c012c02960e8363c7beb397" translate="yes" xml:space="preserve">
          <source>If the value is set to &lt;code&gt;true&lt;/code&gt;, then:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a25b68c044cd0c1ec4edc8c60c29d6185e1c049" translate="yes" xml:space="preserve">
          <source>If the value of a field is not a String, then the toString() method will be called on it and the returned value, enclosed in parentheses, used as the value for the field in the returned array. If the value of a field is null, then the value of the field in the returned array will be empty. If the descriptor is empty, you will get an empty array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c88da9b0c956884891afc187b29ac9d1d3914af" translate="yes" xml:space="preserve">
          <source>If the value of that system property is not &lt;code&gt;null&lt;/code&gt;, it is interpreted as a list of packages separated by a vertical slash character '&lt;code&gt;|&lt;/code&gt;'. The constructor tries to load the class named:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="189b2a483106b850cb5a3377c0425a501b7adcff" translate="yes" xml:space="preserve">
          <source>If the value of the &lt;code&gt;len&lt;/code&gt; parameter is negative then no characters are written. This is contrary to the specification of this method in the &lt;a href=&quot;writer#write-java.lang.String-int-int-&quot;&gt;superclass&lt;/a&gt;, which requires that an &lt;a href=&quot;../lang/indexoutofboundsexception&quot;&gt;&lt;code&gt;IndexOutOfBoundsException&lt;/code&gt;&lt;/a&gt; be thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3351a4cf5b5a7a09cdd906eb6fad0d706861c179" translate="yes" xml:space="preserve">
          <source>If the value of this attribute specifies a date-time that is in the future, the printer should add the &lt;a href=&quot;jobstatereason&quot;&gt;&lt;code&gt;JobStateReason&lt;/code&gt;&lt;/a&gt; value of JOB_HOLD_UNTIL_SPECIFIED to the job's &lt;a href=&quot;jobstatereasons&quot;&gt;&lt;code&gt;JobStateReasons&lt;/code&gt;&lt;/a&gt; attribute, must move the job to the PENDING_HELD state, and must not schedule the job for printing until the specified date-time arrives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa55bedef91ce7d9c1fec0b52fe91e9615e15668" translate="yes" xml:space="preserve">
          <source>If the value property of this instance is not already set, this method dynamically finds the method with the specified methodName on this target with these arguments and calls it. The result of the method invocation is first copied into the value property of this expression and then returned as the result of &lt;code&gt;getValue&lt;/code&gt;. If the value property was already set, either by a call to &lt;code&gt;setValue&lt;/code&gt; or a previous call to &lt;code&gt;getValue&lt;/code&gt; then the value property is returned without either looking up or calling the method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6f8f305677180b918ee9ef198861d8afd741517" translate="yes" xml:space="preserve">
          <source>If the value returned is not &lt;code&gt;null&lt;/code&gt;, it is a &lt;code&gt;Collection&lt;/code&gt; of names. Each name is a &lt;code&gt;String&lt;/code&gt; or a byte array representing a distinguished name (in RFC 2253 or ASN.1 DER encoded form, respectively). Note that the &lt;code&gt;Collection&lt;/code&gt; returned may contain duplicate names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d32dd70eeac4617e75643e7232c7906050d5b2bd" translate="yes" xml:space="preserve">
          <source>If the value returned is not &lt;code&gt;null&lt;/code&gt;, it is a &lt;code&gt;Collection&lt;/code&gt; with one entry for each name to be included in the pathToNames criterion. Each entry is a &lt;code&gt;List&lt;/code&gt; whose first entry is an &lt;code&gt;Integer&lt;/code&gt; (the name type, 0-8) and whose second entry is a &lt;code&gt;String&lt;/code&gt; or a byte array (the name, in string or ASN.1 DER encoded form, respectively). There can be multiple names of the same type. Note that the &lt;code&gt;Collection&lt;/code&gt; returned may contain duplicate names (same name and name type).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d26bd3763c8755d23c2f1916d343c204ac5aaffe" translate="yes" xml:space="preserve">
          <source>If the value returned is not &lt;code&gt;null&lt;/code&gt;, it is a &lt;code&gt;Collection&lt;/code&gt; with one entry for each name to be included in the subject alternative name criterion. Each entry is a &lt;code&gt;List&lt;/code&gt; whose first entry is an &lt;code&gt;Integer&lt;/code&gt; (the name type, 0-8) and whose second entry is a &lt;code&gt;String&lt;/code&gt; or a byte array (the name, in string or ASN.1 DER encoded form, respectively). There can be multiple names of the same type. Note that the &lt;code&gt;Collection&lt;/code&gt; returned may contain duplicate names (same name and name type).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2adc8f493111a0124aaa2df328143a9d50bda6b" translate="yes" xml:space="preserve">
          <source>If the value returned is not &lt;code&gt;null&lt;/code&gt;, it is a byte array containing a single DER encoded distinguished name, as defined in X.501. The ASN.1 notation for this structure is supplied in the documentation for &lt;a href=&quot;x509certselector#setIssuer-byte:A-&quot;&gt;&lt;code&gt;setIssuer(byte [] issuerDN)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5bfe0070c603a52728ff84ece5362c0b7ddae9b" translate="yes" xml:space="preserve">
          <source>If the value returned is not &lt;code&gt;null&lt;/code&gt;, it is a byte array containing a single DER encoded distinguished name, as defined in X.501. The ASN.1 notation for this structure is supplied in the documentation for &lt;a href=&quot;x509certselector#setSubject-byte:A-&quot;&gt;&lt;code&gt;setSubject(byte [] subjectDN)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce45de7cc21b8ac51cf0ba8fa224985e1d61a9e9" translate="yes" xml:space="preserve">
          <source>If the value returned is not &lt;code&gt;null&lt;/code&gt;, it is a distinguished name, in RFC 2253 format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b8d5b4ce751bcbd27dc2db355066e723ecb44dc" translate="yes" xml:space="preserve">
          <source>If the value returned is not &lt;code&gt;null&lt;/code&gt;, it is a unmodifiable &lt;code&gt;Collection&lt;/code&gt; of &lt;code&gt;X500Principal&lt;/code&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bde030a57b155127406abe290ea916c308394ff9" translate="yes" xml:space="preserve">
          <source>If the voice is not currently processing a MIDI note, it is considered inactive. A voice is inactive when it has been given no note-on commands, or when every note-on command received has been terminated by a corresponding note-off (or by an &quot;all notes off&quot; message). For example, this happens when a synthesizer capable of playing 16 simultaneous notes is told to play a four-note chord; only four voices are active in this case (assuming no earlier notes are still playing). Usually, a voice whose status is reported as active is producing audible sound, but this is not always true; it depends on the details of the instrument (that is, the synthesis algorithm) and how long the note has been going on. For example, a voice may be synthesizing the sound of a single hand-clap. Because this sound dies away so quickly, it may become inaudible before a note-off message is received. In such a situation, the voice is still considered active even though no sound is currently being produced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="653f1f40cfb615ca17661dd80259d388f697bee1" translate="yes" xml:space="preserve">
          <source>If the write lock is acquired by the current thread then the lock hold count is set to one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0805140ae31a0f4050f9a4cfea06b4f470819eca" translate="yes" xml:space="preserve">
          <source>If the write lock is acquired then the value &lt;code&gt;true&lt;/code&gt; is returned and the write lock hold count is set to one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a07048d034065274e4ede5c8a84bad27f47aabea" translate="yes" xml:space="preserve">
          <source>If the write lock is held by another thread then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of three things happens:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74ef7c44b070eb1cc369e6589e8a1122f0468708" translate="yes" xml:space="preserve">
          <source>If the write lock is held by another thread then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of two things happens:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fbef50e47f6976d0537a04edb35c78320ba5006" translate="yes" xml:space="preserve">
          <source>If the write lock is held by another thread then the current thread becomes disabled for thread scheduling purposes and lies dormant until the read lock has been acquired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30ab94fb63654ae631cd1d744ae39fbebb43dde7" translate="yes" xml:space="preserve">
          <source>If the write lock is held by another thread then this method will return immediately with the value &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ef816b7e6153a6a58cc075b78ddfa153cbea13c" translate="yes" xml:space="preserve">
          <source>If the writer only offers a single, mandatory form of compression, it is not necessary to provide any named compression types. Named compression types should only be used where the user is able to make a meaningful choice between different schemes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cb2436b74f4b1b03e972c41f1699a7b257b5b16" translate="yes" xml:space="preserve">
          <source>If the zone ID consists of a single letter, the zone ID is invalid and &lt;code&gt;DateTimeException&lt;/code&gt; is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06d35c94a78d00be0bce80775b09f94dc2815e57" translate="yes" xml:space="preserve">
          <source>If the zone ID equals 'GMT', 'UTC' or 'UT' then the result is a &lt;code&gt;ZoneId&lt;/code&gt; with the same ID and rules equivalent to &lt;code&gt;ZoneOffset.UTC&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7be309d5b31d6d9fd94ee00c0bd12eacb646dab8" translate="yes" xml:space="preserve">
          <source>If the zone ID equals 'Z', the result is &lt;code&gt;ZoneOffset.UTC&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87e6092693d13cc8dfc7ff32db6b3e49ec91630a" translate="yes" xml:space="preserve">
          <source>If the zone ID is a &lt;a href=&quot;zoneoffset&quot;&gt;&lt;code&gt;ZoneOffset&lt;/code&gt;&lt;/a&gt;, then the result always has a time of midnight.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b48da9c9e601217a4f5ae92f654428afda6e1aa" translate="yes" xml:space="preserve">
          <source>If the zone ID is not available or is a &lt;code&gt;ZoneOffset&lt;/code&gt; then the format is complete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87677aa24c82d7da48f53ccb0c5b3d24a805cbe9" translate="yes" xml:space="preserve">
          <source>If the zone ID starts with '+' or '-', the ID is parsed as a &lt;code&gt;ZoneOffset&lt;/code&gt; using &lt;a href=&quot;zoneoffset#of-java.lang.String-&quot;&gt;&lt;code&gt;ZoneOffset.of(String)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1780773eff7ca92ecd4ba03a3e8ea655fd0b8589" translate="yes" xml:space="preserve">
          <source>If the zone ID starts with 'UTC+', 'UTC-', 'GMT+', 'GMT-', 'UT+' or 'UT-' then the ID is a prefixed offset-based ID. The ID is split in two, with a two or three letter prefix and a suffix starting with the sign. The suffix is parsed as a &lt;a href=&quot;zoneoffset#of-java.lang.String-&quot;&gt;&lt;code&gt;ZoneOffset&lt;/code&gt;&lt;/a&gt;. The result will be a &lt;code&gt;ZoneId&lt;/code&gt; with the specified UTC/GMT/UT prefix and the normalized offset ID as per &lt;a href=&quot;zoneoffset#getId--&quot;&gt;&lt;code&gt;ZoneOffset.getId()&lt;/code&gt;&lt;/a&gt;. The rules of the returned &lt;code&gt;ZoneId&lt;/code&gt; will be equivalent to the parsed &lt;code&gt;ZoneOffset&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41b8bc898e51c548630ae4313953f5a0179fbf8d" translate="yes" xml:space="preserve">
          <source>If the zone cannot be parsed then an exception is thrown unless the section of the formatter is optional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="716de69875ef09bdf51d065ceec30a6b7a11919e" translate="yes" xml:space="preserve">
          <source>If the zone defines daylight savings into the future, then the list will normally be of size two and hold information about entering and exiting daylight savings. If the zone does not have daylight savings, or information about future changes is uncertain, then the list will be empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a223a21923ebbbeb7ae1d7b22472f2e489ded7a7" translate="yes" xml:space="preserve">
          <source>If there are any calendar fields whose values haven't been set in the selected field combination, &lt;code&gt;Calendar&lt;/code&gt; uses their default values. The default value of each field may vary by concrete calendar systems. For example, in &lt;code&gt;GregorianCalendar&lt;/code&gt;, the default of a field is the same as that of the start of the Epoch: i.e., &lt;code&gt;YEAR = 1970&lt;/code&gt;, &lt;code&gt;MONTH =
 JANUARY&lt;/code&gt;, &lt;code&gt;DAY_OF_MONTH = 1&lt;/code&gt;, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1f64fb5716e07724c0a7d48c0a02647c58da231" translate="yes" xml:space="preserve">
          <source>If there are conflicts or overlaps between the information provided by different &lt;code&gt;BeanInfo&lt;/code&gt; objects, the current &lt;code&gt;BeanInfo&lt;/code&gt; object takes priority over the additional &lt;code&gt;BeanInfo&lt;/code&gt; objects. Array elements with higher indices take priority over the elements with lower indices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="530a00d062bd6f003dc671b04ddaa979158f274f" translate="yes" xml:space="preserve">
          <source>If there are different resources for different countries, you can make specializations: for example, &quot;MyResources_de_CH&quot; contains objects for the German language (de) in Switzerland (CH). If you want to only modify some of the resources in the specialization, you can do so.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a003779b8a649ef8cb40c3f51dd00ab52590b8c" translate="yes" xml:space="preserve">
          <source>If there are more arguments than format specifiers, the extra arguments are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deb195b2b9fae2539cd1155fb241509f69b8a781" translate="yes" xml:space="preserve">
          <source>If there are multiple compression types but none has been set, an &lt;code&gt;IllegalStateException&lt;/code&gt; is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="768dcb3e70295dbb108fd5dd725293766667ea22" translate="yes" xml:space="preserve">
          <source>If there are multiple runs of text, information about the runs can be accessed by indexing to get the start, limit, and level of a run. The level represents both the direction and the 'nesting level' of a directional run. Odd levels are right-to-left, while even levels are left-to-right. So for example level 0 represents left-to-right text, while level 1 represents right-to-left text, and level 2 represents left-to-right text embedded in a right-to-left run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3fd8782c948e6644afcfe2c7b88c23640ca646b" translate="yes" xml:space="preserve">
          <source>If there are no bytes buffered on the socket, and the socket has not been closed using &lt;a href=&quot;socket#close--&quot;&gt;&lt;code&gt;close&lt;/code&gt;&lt;/a&gt;, then &lt;a href=&quot;../io/inputstream#available--&quot;&gt;&lt;code&gt;available&lt;/code&gt;&lt;/a&gt; will return &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70808ff13ea15a635fe9933aa430b40622465ff0" translate="yes" xml:space="preserve">
          <source>If there are no bytes buffered on the socket, or all buffered bytes have been consumed by &lt;a href=&quot;../io/inputstream#read--&quot;&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt;, then all subsequent calls to &lt;a href=&quot;../io/inputstream#read--&quot;&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt; will throw an &lt;a href=&quot;../io/ioexception&quot;&gt;&lt;code&gt;IOException&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d97fea5e3b07fef354727bb8ea01358071cedc12" translate="yes" xml:space="preserve">
          <source>If there are no fields in the descriptor, then an empty String is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="452463b6bb8122e8d19b3e5165c3baa6dd891166" translate="yes" xml:space="preserve">
          <source>If there are no originating elements, none need to be passed. This information may be used in an incremental environment to determine the need to rerun processors or remove generated files. Non-incremental environments may ignore the originating element information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d1b6e296a2b77ef070997fd74f624d1c0686a93" translate="yes" xml:space="preserve">
          <source>If there are no parameters, no formatter is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="256816c6b5677c8691bdb94b6765ccbc5f24a09f" translate="yes" xml:space="preserve">
          <source>If there are several such threads, the bootstrap method may be invoked in several threads concurrently. Therefore, bootstrap methods which access global application data must take the usual precautions against race conditions. In any case, every &lt;code&gt;invokedynamic&lt;/code&gt; instruction is either unlinked or linked to a unique &lt;code&gt;CallSite&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19df7c3245481a0b870f8b690f97116f667d21a7" translate="yes" xml:space="preserve">
          <source>If there are specialization prefixes for all arguments, the arity prefix may be left out (as in &lt;a href=&quot;objintconsumer&quot;&gt;&lt;code&gt;ObjIntConsumer&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5496a27b9238a94964b622c624cac4a711b3706d" translate="yes" xml:space="preserve">
          <source>If there are two sets of quotes, a specific begin-quote must be matched by its corresponding end-quote.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60fe5e1f14261b51420b2f4800ed45295f2b7b43" translate="yes" xml:space="preserve">
          <source>If there is a &lt;code&gt;Filter&lt;/code&gt;, its &lt;code&gt;isLoggable&lt;/code&gt; method is called to check if the given log record is loggable. If not we return. Otherwise the given record is copied into an internal circular buffer. Then the record's level property is compared with the &lt;code&gt;pushLevel&lt;/code&gt;. If the given level is greater than or equal to the &lt;code&gt;pushLevel&lt;/code&gt; then &lt;code&gt;push&lt;/code&gt; is called to write all buffered records to the target output &lt;code&gt;Handler&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0a6d33db9099e5da02b63b1c08b711314ed1070" translate="yes" xml:space="preserve">
          <source>If there is a current output stream then the &lt;code&gt;Formatter&lt;/code&gt;'s tail string is written and the stream is flushed and closed. Then the output stream is replaced with the new output stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="360eb0e694f70b9c0d8a6d2539b8b95168589f9b" translate="yes" xml:space="preserve">
          <source>If there is a language tag which matches completely to a language range above, the language tag is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fe9d5f4f323a99adea908fdeaf0c559a2234dc4" translate="yes" xml:space="preserve">
          <source>If there is a positive entry that grants a principal a particular permission, and a negative entry that denies the principal the same permission, the result is as though the permission was never granted or denied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d2642219ae6689a90935a889cec5cc47e6b73a4" translate="yes" xml:space="preserve">
          <source>If there is a security manager already installed, this method first calls the security manager's &lt;code&gt;checkPermission&lt;/code&gt; method with a &lt;code&gt;RuntimePermission(&quot;setSecurityManager&quot;)&lt;/code&gt; permission to ensure it's ok to replace the existing security manager. This may result in throwing a &lt;code&gt;SecurityException&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34d939280196d74fc1d1d34c5817d26280f87f75" translate="yes" xml:space="preserve">
          <source>If there is a security manager already installed, this method first calls the security manager's &lt;code&gt;checkPermission&lt;/code&gt; method with the &lt;code&gt;RuntimePermission(&quot;createSecurityManager&quot;)&lt;/code&gt; permission to ensure the calling thread has permission to create a new security manager. This may result in throwing a &lt;code&gt;SecurityException&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5672428ce2d0310db13a3f85f67e993338e8598a" translate="yes" xml:space="preserve">
          <source>If there is a security manager and &lt;code&gt;host&lt;/code&gt; is not null and &lt;code&gt;host.length() &lt;/code&gt; is not equal to zero, the security manager's &lt;code&gt;checkConnect&lt;/code&gt; method is called with the hostname and &lt;code&gt;-1&lt;/code&gt; as its arguments to see if the operation is allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd5ff852f368770ab762748f1c19d1dda73aa1db" translate="yes" xml:space="preserve">
          <source>If there is a security manager installed, it can forbid the lookup on various grounds (&lt;a href=&quot;methodhandles.lookup#secmgr&quot;&gt;see below&lt;/a&gt;). By contrast, the &lt;code&gt;ldc&lt;/code&gt; instruction on a &lt;code&gt;CONSTANT_MethodHandle&lt;/code&gt; constant is not subject to security manager checks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b156cc02a90506f8eb9b81ce87ad4e2f4f5e01f7" translate="yes" xml:space="preserve">
          <source>If there is a security manager installed, its &lt;code&gt;checkAccess&lt;/code&gt; method is called with &lt;code&gt;this&lt;/code&gt; as its argument. This may result in a &lt;code&gt;SecurityException&lt;/code&gt; being raised (in the current thread).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5128105dcb411eeec7bd98eb31dc6c9f32f36396" translate="yes" xml:space="preserve">
          <source>If there is a security manager installed, this method first calls the security manager's &lt;code&gt;checkPermission&lt;/code&gt; method with a &lt;code&gt;SerializablePermission(&quot;enableSubclassImplementation&quot;)&lt;/code&gt; permission to ensure it's ok to enable subclassing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31761f6c70fa775cd9eb51012f53c8d7db6b5b68" translate="yes" xml:space="preserve">
          <source>If there is a security manager installed, this method first calls the security manager's &lt;code&gt;checkPermission&lt;/code&gt; method with the &lt;code&gt;SerializablePermission(&quot;enableSubclassImplementation&quot;)&lt;/code&gt; permission to ensure it's ok to enable subclassing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efeea28b8db5bdbdbe7665022456615ea9a2a02a" translate="yes" xml:space="preserve">
          <source>If there is a security manager set, its &lt;code&gt;checkConnect&lt;/code&gt; method is called with the local address and &lt;code&gt;-1&lt;/code&gt; as its arguments to see if the operation is allowed. If the operation is not allowed, a &lt;code&gt;SocketAddress&lt;/code&gt; representing the &lt;a href=&quot;../../net/inetaddress#getLoopbackAddress--&quot;&gt;&lt;code&gt;loopback&lt;/code&gt;&lt;/a&gt; address and the local port of the channel's socket is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd4504e52760544f5802fe95b384c420e8994a88" translate="yes" xml:space="preserve">
          <source>If there is a security manager set, its &lt;code&gt;checkConnect&lt;/code&gt; method is called with the local address and &lt;code&gt;-1&lt;/code&gt; as its arguments to see if the operation is allowed. If the operation is not allowed, a &lt;code&gt;SocketAddress&lt;/code&gt; representing the &lt;a href=&quot;inetaddress#getLoopbackAddress--&quot;&gt;&lt;code&gt;loopback&lt;/code&gt;&lt;/a&gt; address and the local port to which the socket is bound is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e9d7c04bc4d0c36452207dc47930704ce6c96d6" translate="yes" xml:space="preserve">
          <source>If there is a security manager set, its &lt;code&gt;checkConnect&lt;/code&gt; method is called with the local address and &lt;code&gt;-1&lt;/code&gt; as its arguments to see if the operation is allowed. If the operation is not allowed, a &lt;code&gt;SocketAddress&lt;/code&gt; representing the &lt;a href=&quot;inetaddress#getLoopbackAddress--&quot;&gt;&lt;code&gt;loopback&lt;/code&gt;&lt;/a&gt; address and the local port to which this socket is bound is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2186903b27dd0e412d3c41bc56df02edfa54b96" translate="yes" xml:space="preserve">
          <source>If there is a security manager set, its &lt;code&gt;checkConnect&lt;/code&gt; method is called with the local address and &lt;code&gt;-1&lt;/code&gt; as its arguments to see if the operation is allowed. If the operation is not allowed, an &lt;code&gt;InetAddress&lt;/code&gt; representing the &lt;a href=&quot;inetaddress#getLoopbackAddress--&quot;&gt;&lt;code&gt;loopback&lt;/code&gt;&lt;/a&gt; address is returned as the implementation address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5eea39d0bafa27479de1740d6a3bd033e70cc0a" translate="yes" xml:space="preserve">
          <source>If there is a security manager set, its &lt;code&gt;checkConnect&lt;/code&gt; method is called with the local address and &lt;code&gt;-1&lt;/code&gt; as its arguments to see if the operation is allowed. If the operation is not allowed, the &lt;a href=&quot;inetaddress#getLoopbackAddress--&quot;&gt;&lt;code&gt;loopback&lt;/code&gt;&lt;/a&gt; address is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="501526fb9b9e2e222246e9cd9786ee96d321d66c" translate="yes" xml:space="preserve">
          <source>If there is a security manager, a packet cannot be received if the security manager's &lt;code&gt;checkAccept&lt;/code&gt; method does not allow it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78bc0f4a72c52e6defa54f26456df6b6bfdcd359" translate="yes" xml:space="preserve">
          <source>If there is a security manager, and the socket is not currently connected to a remote address, this method first performs some security checks. First, if &lt;code&gt;p.getAddress().isMulticastAddress()&lt;/code&gt; is true, this method calls the security manager's &lt;code&gt;checkMulticast&lt;/code&gt; method with &lt;code&gt;p.getAddress()&lt;/code&gt; as its argument. If the evaluation of that expression is false, this method instead calls the security manager's &lt;code&gt;checkConnect&lt;/code&gt; method with arguments &lt;code&gt;p.getAddress().getHostAddress()&lt;/code&gt; and &lt;code&gt;p.getPort()&lt;/code&gt;. Each call to a security manager method could result in a SecurityException if the operation is not allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f2dc991bc054662c9aaf92a4f81920cc42b0299" translate="yes" xml:space="preserve">
          <source>If there is a security manager, and this thread is not the current thread, then the security manager's &lt;code&gt;checkPermission&lt;/code&gt; method is called with a &lt;code&gt;RuntimePermission(&quot;getStackTrace&quot;)&lt;/code&gt; permission to see if it's ok to get the stack trace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9414114a34df41ef68dcd065db4f4c005b486dbe" translate="yes" xml:space="preserve">
          <source>If there is a security manager, its &lt;a href=&quot;securitymanager#checkAccess-java.lang.ThreadGroup-&quot;&gt;&lt;code&gt;checkAccess&lt;/code&gt;&lt;/a&gt; method is invoked with the ThreadGroup as its argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3533ff6ee33a3d65c462d1050b52aa5438f30879" translate="yes" xml:space="preserve">
          <source>If there is a security manager, its &lt;a href=&quot;securitymanager#checkCreateClassLoader--&quot;&gt;&lt;code&gt;&lt;code&gt;checkCreateClassLoader&lt;/code&gt;&lt;/code&gt;&lt;/a&gt; method is invoked. This may result in a security exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85a1e97c5d37987df52e3f2db8dd957eb6a2e0a1" translate="yes" xml:space="preserve">
          <source>If there is a security manager, its &lt;a href=&quot;securitymanager#checkExec-java.lang.String-&quot;&gt;&lt;code&gt;checkExec&lt;/code&gt;&lt;/a&gt; method is called with the first component of this object's &lt;code&gt;command&lt;/code&gt; array as its argument. This may result in a &lt;a href=&quot;securityexception&quot;&gt;&lt;code&gt;SecurityException&lt;/code&gt;&lt;/a&gt; being thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c30beb89be73a967106d6bb017cc3341325b7e4" translate="yes" xml:space="preserve">
          <source>If there is a security manager, its &lt;code&gt;checkAccess&lt;/code&gt; method is called with this thread as its argument. This may result in throwing a &lt;code&gt;SecurityException&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="959b09fe0d2c452907b0520da6e28a90c4ae65f9" translate="yes" xml:space="preserve">
          <source>If there is a security manager, its &lt;code&gt;checkAccess&lt;/code&gt; method is called with this thread group as its argument. This may result in throwing a &lt;code&gt;SecurityException&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c17150f3dc1fd1d9a170113f445867d696c2b24" translate="yes" xml:space="preserve">
          <source>If there is a security manager, its &lt;code&gt;checkConnect&lt;/code&gt; method is called for each InetAddress. Only InetAddresses where the &lt;code&gt;checkConnect&lt;/code&gt; doesn't throw a SecurityException will be returned in the Enumeration. However, if the caller has the &lt;a href=&quot;netpermission&quot;&gt;&lt;code&gt;NetPermission&lt;/code&gt;&lt;/a&gt;(&quot;getNetworkInformation&quot;) permission, then all InetAddresses are returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16d27bea720609eee04166dfd76b88b456132798" translate="yes" xml:space="preserve">
          <source>If there is a security manager, its &lt;code&gt;checkConnect&lt;/code&gt; method is called with &lt;code&gt;host.getHostAddress()&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt; as its arguments. This could result in a SecurityException.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43c71e671e00781339f5ba759f2bcd61a8b7a34b" translate="yes" xml:space="preserve">
          <source>If there is a security manager, its &lt;code&gt;checkConnect&lt;/code&gt; method is called with the InetAddress for each InterfaceAddress. Only InterfaceAddresses where the &lt;code&gt;checkConnect&lt;/code&gt; doesn't throw a SecurityException will be returned in the List.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78af07133b038dacb150089b40e78b0ca1d3d753" translate="yes" xml:space="preserve">
          <source>If there is a security manager, its &lt;code&gt;checkConnect&lt;/code&gt; method is called with the host address and &lt;code&gt;port&lt;/code&gt; as its arguments. This could result in a SecurityException.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d2ddb66aff693ec81fe7a3cff9c33e416a967ed" translate="yes" xml:space="preserve">
          <source>If there is a security manager, its &lt;code&gt;checkConnect&lt;/code&gt; method is called with the host name as its argument to check the permission to resolve it. This could result in a SecurityException.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01ae3cd02649f51bc3641c7c81a3016b88a1579b" translate="yes" xml:space="preserve">
          <source>If there is a security manager, its &lt;code&gt;checkConnect&lt;/code&gt; method is called with the local host name and &lt;code&gt;-1&lt;/code&gt; as its arguments to see if the operation is allowed. If the operation is not allowed, an InetAddress representing the loopback address is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d128c55ea8e46338a04c172173181318ab739b7" translate="yes" xml:space="preserve">
          <source>If there is a security manager, its &lt;code&gt;checkConnect&lt;/code&gt; method is called with the proxy host address and port number as its arguments. This could result in a SecurityException.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bca28a5046aedb2445dad871f1870c7cd86fe222" translate="yes" xml:space="preserve">
          <source>If there is a security manager, its &lt;code&gt;checkConnect&lt;/code&gt; method is first called with the host address and &lt;code&gt;-1&lt;/code&gt; as its arguments to see if the operation is allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd69bfacd3a48bd3c84ffe11c3502373bc1b717d" translate="yes" xml:space="preserve">
          <source>If there is a security manager, its &lt;code&gt;checkConnect&lt;/code&gt; method is first called with the hostname and &lt;code&gt;-1&lt;/code&gt; as its arguments to see if the operation is allowed. If the operation is not allowed, it will return the textual representation of the IP address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19b8451790374e638a897d576809e75ff26e4bdc" translate="yes" xml:space="preserve">
          <source>If there is a security manager, its &lt;code&gt;checkExit&lt;/code&gt; method is first called with 0 as its argument to ensure the exit is allowed. This could result in a SecurityException.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ad778e38f7a8fa1a04c66c84bec80348990751b" translate="yes" xml:space="preserve">
          <source>If there is a security manager, its &lt;code&gt;checkListen&lt;/code&gt; method is called with the &lt;code&gt;port&lt;/code&gt; argument as its argument to ensure the operation is allowed. This could result in a SecurityException.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84eacac097d36c19fe75054afbaa3ba99bf8985e" translate="yes" xml:space="preserve">
          <source>If there is a security manager, its &lt;code&gt;checkListen&lt;/code&gt; method is called with the &lt;code&gt;port&lt;/code&gt; argument as its argument to ensure the operation is allowed. This could result in a SecurityException. The &lt;code&gt;backlog&lt;/code&gt; argument is the requested maximum number of pending connections on the socket. Its exact semantics are implementation specific. In particular, an implementation may impose a maximum length or may choose to ignore the parameter altogther. The value provided should be greater than &lt;code&gt;0&lt;/code&gt;. If it is less than or equal to &lt;code&gt;0&lt;/code&gt;, then an implementation specific default will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7696a640bf74fb64021433fe004320c4e69fec7e" translate="yes" xml:space="preserve">
          <source>If there is a security manager, its &lt;code&gt;checkListen&lt;/code&gt; method is first called with 0 as its argument to ensure the operation is allowed. This could result in a SecurityException.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7d8bb6cd4c61d496d648276b50f92f3feba88b5" translate="yes" xml:space="preserve">
          <source>If there is a security manager, its &lt;code&gt;checkListen&lt;/code&gt; method is first called with the &lt;code&gt;port&lt;/code&gt; argument as its argument to ensure the operation is allowed. This could result in a SecurityException.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2550b60768f930b8dee700df520c5f4176ce28d3" translate="yes" xml:space="preserve">
          <source>If there is a security manager, its &lt;code&gt;checkListen&lt;/code&gt; method is first called with the SocketAddress port as its argument to ensure the operation is allowed. This could result in a SecurityException.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a229539b4a28c2f5ec8ded7c3825ecf64243199f" translate="yes" xml:space="preserve">
          <source>If there is a security manager, its &lt;code&gt;checkListen&lt;/code&gt; method is first called with the port from the socket address as its argument to ensure the operation is allowed. This could result in a SecurityException.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1362fabcddab928d786a66dfafce71193c90bbd3" translate="yes" xml:space="preserve">
          <source>If there is a security manager, its &lt;code&gt;checkPermission&lt;/code&gt; method is called with a &lt;code&gt;PropertyPermission(&quot;user.language&quot;, &quot;write&quot;)&lt;/code&gt; permission before the default locale is changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a19d07ab57d6d32ab3bfc3854e57cbabaa6348e" translate="yes" xml:space="preserve">
          <source>If there is a security manager, its &lt;code&gt;checkPermission&lt;/code&gt; method is called with a &lt;code&gt;ReflectPermission(&quot;suppressAccessChecks&quot;)&lt;/code&gt; permission.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b812e22f1f04741048de016813ab27b17900ad4d" translate="yes" xml:space="preserve">
          <source>If there is a security manager, its &lt;code&gt;checkPropertiesAccess&lt;/code&gt; method is called. This could result in a &lt;a href=&quot;../lang/securityexception&quot;&gt;SecurityException&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61ad58a3688694c18343d625b7add7843909f0fc" translate="yes" xml:space="preserve">
          <source>If there is a security manager, its &lt;code&gt;checkRead&lt;/code&gt; method is called with the &lt;code&gt;name&lt;/code&gt; argument as its argument to see if read access to the file is allowed. If the mode allows writing, the security manager's &lt;code&gt;checkWrite&lt;/code&gt; method is also called with the &lt;code&gt;name&lt;/code&gt; argument as its argument to see if write access to the file is allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8440e06fb5641cd0bbb2e4e19fe4021dbf3d258" translate="yes" xml:space="preserve">
          <source>If there is a security manager, its &lt;code&gt;checkRead&lt;/code&gt; method is called with the file descriptor &lt;code&gt;fdObj&lt;/code&gt; as its argument to see if it's ok to read the file descriptor. If read access is denied to the file descriptor a &lt;code&gt;SecurityException&lt;/code&gt; is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07ece2acfb17b36150e2dd4f7e477c94e9f4a76d" translate="yes" xml:space="preserve">
          <source>If there is a security manager, its &lt;code&gt;checkRead&lt;/code&gt; method is called with the pathname of the &lt;code&gt;file&lt;/code&gt; argument as its argument to see if read access to the file is allowed. If the mode allows writing, the security manager's &lt;code&gt;checkWrite&lt;/code&gt; method is also called with the path argument to see if write access to the file is allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31b66585dd5ded5b4cf8149540abcf6d797f5618" translate="yes" xml:space="preserve">
          <source>If there is a security manager, its checkPermission method is called with a PropertyPermission(&quot;user.language&quot;, &quot;write&quot;) permission before the default locale is changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd97e3f8323cfe0de6530417bd6292cf0553996a" translate="yes" xml:space="preserve">
          <source>If there is a security manager, the &lt;a href=&quot;../lang/securitymanager#checkSecurityAccess-java.lang.String-&quot;&gt;&lt;code&gt;SecurityManager.checkSecurityAccess(java.lang.String)&lt;/code&gt;&lt;/a&gt; method is called with the &lt;code&gt;&quot;insertProvider&quot;&lt;/code&gt; permission target name to see if it's ok to add a new provider. If this permission check is denied, &lt;code&gt;checkSecurityAccess&lt;/code&gt; is called again with the &lt;code&gt;&quot;insertProvider.&quot;+provider.getName()&lt;/code&gt; permission target name. If both checks are denied, a &lt;code&gt;SecurityException&lt;/code&gt; is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b31a15f0a361ace0e86d27297cb7544846a2131" translate="yes" xml:space="preserve">
          <source>If there is a security manager, then the security manager's &lt;code&gt;checkPermission&lt;/code&gt; method is called with a &lt;code&gt;RuntimePermission(&quot;getStackTrace&quot;)&lt;/code&gt; permission as well as &lt;code&gt;RuntimePermission(&quot;modifyThreadGroup&quot;)&lt;/code&gt; permission to see if it is ok to get the stack trace of all threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3774f41cca13a332ee025b0313241e9bb0d0309d" translate="yes" xml:space="preserve">
          <source>If there is a security manager, this method calls its &lt;code&gt;checkListen&lt;/code&gt; method with the &lt;code&gt;port&lt;/code&gt; argument as its argument to ensure the operation is allowed. This could result in a SecurityException. The &lt;code&gt;backlog&lt;/code&gt; argument is the requested maximum number of pending connections on the socket. Its exact semantics are implementation specific. In particular, an implementation may impose a maximum length or may choose to ignore the parameter altogther. The value provided should be greater than &lt;code&gt;0&lt;/code&gt;. If it is less than or equal to &lt;code&gt;0&lt;/code&gt;, then an implementation specific default will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c49df9821bd54b67f07151d3efea906c51666fdf" translate="yes" xml:space="preserve">
          <source>If there is a security manager, this method first calls its &lt;code&gt;checkConnect&lt;/code&gt; method with the hostname and &lt;code&gt;-1&lt;/code&gt; as its arguments to see if the calling code is allowed to know the hostname for this IP address, i.e., to connect to the host. If the operation is not allowed, it will return the textual representation of the IP address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="999933e43cb5d7cfb6601989d19930a2a9186ce5" translate="yes" xml:space="preserve">
          <source>If there is a security manager, this method first calls its &lt;code&gt;checkMulticast&lt;/code&gt; method with the &lt;code&gt;mcastaddr&lt;/code&gt; argument as its argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e8e454b01623ff9ba56024fdcbb8a6e018247b0" translate="yes" xml:space="preserve">
          <source>If there is a security manager, this method first calls the security manager's &lt;code&gt;checkCreateClassLoader&lt;/code&gt; method to ensure creation of a class loader is allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="532913bfc0592ca00219b6f161a58e7676757794" translate="yes" xml:space="preserve">
          <source>If there is a security manager, this method first calls the security manager's &lt;code&gt;checkSetFactory&lt;/code&gt; method to ensure the operation is allowed. This could result in a SecurityException.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0319ca077ddde1bcf2e693ddcb559868dc66ee3" translate="yes" xml:space="preserve">
          <source>If there is a security manager, this method first performs some security checks. First, if &lt;code&gt;p.getAddress().isMulticastAddress()&lt;/code&gt; is true, this method calls the security manager's &lt;code&gt;checkMulticast&lt;/code&gt; method with &lt;code&gt;p.getAddress()&lt;/code&gt; and &lt;code&gt;ttl&lt;/code&gt; as its arguments. If the evaluation of that expression is false, this method instead calls the security manager's &lt;code&gt;checkConnect&lt;/code&gt; method with arguments &lt;code&gt;p.getAddress().getHostAddress()&lt;/code&gt; and &lt;code&gt;p.getPort()&lt;/code&gt;. Each call to a security manager method could result in a SecurityException if the operation is not allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f00389ed8595939dc871f12e3fcfe41a5531ae8a" translate="yes" xml:space="preserve">
          <source>If there is a way to convert &lt;em&gt;opendata(J)&lt;/em&gt; back to &lt;em&gt;J&lt;/em&gt; then we say that &lt;em&gt;J&lt;/em&gt; is &lt;em&gt;reconstructible&lt;/em&gt;. All method parameters in an MXBean interface must be reconstructible, because when the MXBean framework is invoking a method it will need to convert those parameters from &lt;em&gt;opendata(J)&lt;/em&gt; to &lt;em&gt;J&lt;/em&gt;. In a proxy generated by &lt;a href=&quot;jmx#newMXBeanProxy-javax.management.MBeanServerConnection-javax.management.ObjectName-java.lang.Class-&quot;&gt;&lt;code&gt;JMX.newMXBeanProxy&lt;/code&gt;&lt;/a&gt;, it is the return values of the methods in the MXBean interface that must be reconstructible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bde7f17c2deabb0575bd222ed2f85f576a5ede8" translate="yes" xml:space="preserve">
          <source>If there is any error (say, I/O error or format error) during the reading process of the KeyTab file, a saved result should be returned. If there is no saved result (say, this is the first time this method is called, or, all previous read attempts failed), an empty array should be returned. This can make sure the result is not drastically changed during the (probably slow) update of the keytab file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2521f70370beeb7a65247f5ecdb6409da533aa1" translate="yes" xml:space="preserve">
          <source>If there is any inherited context, then it has already been copied into the &lt;code&gt;URL&lt;/code&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce492db546ed8f744751a5952cc84069d57cdf28" translate="yes" xml:space="preserve">
          <source>If there is at least one getter and every getter has a convertible type, then &lt;em&gt;opentype(J)&lt;/em&gt; is a &lt;code&gt;CompositeType&lt;/code&gt; with one item for every getter. If the getter is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0a5ce38d1565c12f161531f62c2ed657aa770d3" translate="yes" xml:space="preserve">
          <source>If there is exactly one such interface, or if there is one such interface that is a subinterface of all the others, then the object is an MXBean. The interface in question is the &lt;em&gt;MXBean interface&lt;/em&gt;. In the example above, the MXBean interface is &lt;code&gt;MemoryPoolMXBean&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2719aa3eb5a7fffd1ca38e949931f67f1421af57" translate="yes" xml:space="preserve">
          <source>If there is no &lt;code&gt;serviceURL&lt;/code&gt;, there must be a user-provided &lt;code&gt;RMIServerImpl&lt;/code&gt;. If the &lt;a href=&quot;rmiserverimpl#toStub--&quot;&gt;&lt;code&gt;toStub&lt;/code&gt;&lt;/a&gt; method on this object returns an instance of &lt;a href=&quot;/openjdk~8_web/javax/rmi/corba/stub&quot;&gt;&lt;code&gt;Stub&lt;/code&gt;&lt;/a&gt;, then the connector server will generate a &lt;code&gt;JMXServiceURL&lt;/code&gt; using the &lt;code&gt;iiop&lt;/code&gt; form above. Otherwise, it will generate a &lt;code&gt;JMXServiceURL&lt;/code&gt; using the &lt;code&gt;rmi&lt;/code&gt; form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cc3dec11f4378075a31721786189ded4db361d5" translate="yes" xml:space="preserve">
          <source>If there is no current set of system properties, a set of system properties is first created and initialized in the same manner as for the &lt;code&gt;getProperties&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62385658f9c9d30f2326007c7be1947af3806233" translate="yes" xml:space="preserve">
          <source>If there is no display name for the locale then a suitable default must be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14d757aed623c13896747a1cb10d2fafe0c24ef5" translate="yes" xml:space="preserve">
          <source>If there is no entry for a particular principal, then the principal is considered to have a null (empty) permission set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83cc3943509d49fbbe54f8e7d0348cb9ef645fa2" translate="yes" xml:space="preserve">
          <source>If there is no entry in this Access Control List for the specified principal, an empty permission set is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97ef1aceb0bd9ccbc5a3e085bc385c17a96da05c" translate="yes" xml:space="preserve">
          <source>If there is no index position at which they differ, then the shorter string lexicographically precedes the longer string. In this case, &lt;code&gt;compareTo&lt;/code&gt; returns the difference of the lengths of the strings -- that is, the value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f38d945bc914e61ae40e4aad1f19fc041a605394" translate="yes" xml:space="preserve">
          <source>If there is no match, then either the first or last index is used, depending on whether the number (X) is too low or too high. If the limit array is not in ascending order, the results of formatting will be incorrect. ChoiceFormat also accepts &lt;code&gt;\u221E&lt;/code&gt; as equivalent to infinity(INF).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3d0e4d2da1282aaec455fc4732cff1c598c3d7c" translate="yes" xml:space="preserve">
          <source>If there is no property with the specified name, if the specified name is empty or &lt;code&gt;null&lt;/code&gt;, or if the property does not have the correct numeric format, then &lt;code&gt;null&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebec043b114adf3a66c121103ae990378ebe9b9b" translate="yes" xml:space="preserve">
          <source>If there is no property with the specified name, or if the specified name is empty or null, then &lt;code&gt;false&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62eecfe9a255148d750e0784a244f5d095566c9e" translate="yes" xml:space="preserve">
          <source>If there is one or more timer notifications before the time in the list of notifications, the notification is sent according to the &lt;code&gt;sendPastNotifications&lt;/code&gt; flag and then, updated according to its period and remaining number of occurrences. If the timer notification date remains earlier than the current date, this notification is just removed from the list of notifications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bea1d12841642f06cd5c576dd8ad73a21f49fc5b" translate="yes" xml:space="preserve">
          <source>If this &lt;code&gt;Class&lt;/code&gt; object represents a class or interface whose declaration does not explicitly indicate any annotated superinterfaces, the return value is an array of length 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94f6da01be13858770dcd2fbeb1c8376bf8f27d5" translate="yes" xml:space="preserve">
          <source>If this &lt;code&gt;Class&lt;/code&gt; object represents a class or interface with no declared fields, then this method returns an array of length 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5e526ec67c2b068f6813c00e0742ddec3d6151e" translate="yes" xml:space="preserve">
          <source>If this &lt;code&gt;Class&lt;/code&gt; object represents a class or interface with no declared methods, then the returned array has length 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4ce471ae16ab801b2259a590ff7a0fee5c25fdb" translate="yes" xml:space="preserve">
          <source>If this &lt;code&gt;Class&lt;/code&gt; object represents a class or interface with no no accessible public fields, then this method returns an array of length 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9c0f2616e4b918558184c0ef2f121a34cc9b89a" translate="yes" xml:space="preserve">
          <source>If this &lt;code&gt;Class&lt;/code&gt; object represents a class, the return value is an array containing objects representing the uses of interface types to specify interfaces implemented by the class. The order of the objects in the array corresponds to the order of the interface types used in the 'implements' clause of the declaration of this &lt;code&gt;Class&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ea0225aadb3a9617c32673581f4007aea0f62a1" translate="yes" xml:space="preserve">
          <source>If this &lt;code&gt;Class&lt;/code&gt; object represents a class, then this method returns the public fields of the class and of all its superclasses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42af070ad6a4d3648b309df9a277dd2d8e338352" translate="yes" xml:space="preserve">
          <source>If this &lt;code&gt;Class&lt;/code&gt; object represents a local or anonymous class within a constructor, returns a &lt;a href=&quot;reflect/constructor&quot;&gt;&lt;code&gt;Constructor&lt;/code&gt;&lt;/a&gt; object representing the immediately enclosing constructor of the underlying class. Returns &lt;code&gt;null&lt;/code&gt; otherwise. In particular, this method returns &lt;code&gt;null&lt;/code&gt; if the underlying class is a local or anonymous class immediately enclosed by a type declaration, instance initializer or static initializer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4477ae736ceef4ce368b1839297468a2918b1155" translate="yes" xml:space="preserve">
          <source>If this &lt;code&gt;Class&lt;/code&gt; object represents a local or anonymous class within a method, returns a &lt;a href=&quot;reflect/method&quot;&gt;&lt;code&gt;Method&lt;/code&gt;&lt;/a&gt; object representing the immediately enclosing method of the underlying class. Returns &lt;code&gt;null&lt;/code&gt; otherwise. In particular, this method returns &lt;code&gt;null&lt;/code&gt; if the underlying class is a local or anonymous class immediately enclosed by a type declaration, instance initializer or static initializer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79bd7175460e43940d330fea2bc43e369e031bbb" translate="yes" xml:space="preserve">
          <source>If this &lt;code&gt;Class&lt;/code&gt; object represents a primitive type or void, then the returned array has length 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f02c0ed1f5bae30d0291b5a6aaf11110bd96f07d" translate="yes" xml:space="preserve">
          <source>If this &lt;code&gt;Class&lt;/code&gt; object represents a type that has a class initialization method &lt;code&gt;&amp;lt;clinit&amp;gt;&lt;/code&gt;, then the returned array does &lt;em&gt;not&lt;/em&gt; have a corresponding &lt;code&gt;Method&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4b86687e1e312e67b7460fddd5aed10106e1e53" translate="yes" xml:space="preserve">
          <source>If this &lt;code&gt;Class&lt;/code&gt; object represents a type that has multiple declared methods with the same name and parameter types, but different return types, then the returned array has a &lt;code&gt;Method&lt;/code&gt; object for each such method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a5139658d7d0116078759c8a142a520e5a7e171" translate="yes" xml:space="preserve">
          <source>If this &lt;code&gt;Class&lt;/code&gt; object represents a type that has multiple public methods with the same name and parameter types, but different return types, then the returned array has a &lt;code&gt;Method&lt;/code&gt; object for each such method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9710c2aebb0499fff54a4c1fab48952630f8353" translate="yes" xml:space="preserve">
          <source>If this &lt;code&gt;Class&lt;/code&gt; object represents a type whose declaration does not explicitly indicate an annotated superclass, then the return value is an &lt;code&gt;AnnotatedType&lt;/code&gt; object representing an element with no annotations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abacab4cf9b024f594f0b3f572123f051f06c2c5" translate="yes" xml:space="preserve">
          <source>If this &lt;code&gt;Class&lt;/code&gt; object represents a type with a class initialization method &lt;code&gt;&amp;lt;clinit&amp;gt;&lt;/code&gt;, then the returned array does &lt;em&gt;not&lt;/em&gt; have a corresponding &lt;code&gt;Method&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bebb6eaefac5ae2ce6d923cc8da1eb725883029" translate="yes" xml:space="preserve">
          <source>If this &lt;code&gt;Class&lt;/code&gt; object represents an array type, a primitive type, or void, then the returned array has length 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70b797601062908da356817410150aa204020fc1" translate="yes" xml:space="preserve">
          <source>If this &lt;code&gt;Class&lt;/code&gt; object represents an array type, a primitive type, or void, then this method returns an array of length 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20332c048f55b2154c66a445225edb4bdb3e274e" translate="yes" xml:space="preserve">
          <source>If this &lt;code&gt;Class&lt;/code&gt; object represents an array type, the interfaces &lt;code&gt;Cloneable&lt;/code&gt; and &lt;code&gt;java.io.Serializable&lt;/code&gt; are returned in that order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="348539037139d48e6387c9a62912e6564911c876" translate="yes" xml:space="preserve">
          <source>If this &lt;code&gt;Class&lt;/code&gt; object represents an array type, then the returned array has a &lt;code&gt;Method&lt;/code&gt; object for each of the public methods inherited by the array type from &lt;code&gt;Object&lt;/code&gt;. It does not contain a &lt;code&gt;Method&lt;/code&gt; object for &lt;code&gt;clone()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29e81a940f259cfb7b07c0e245bb52be63c0dd30" translate="yes" xml:space="preserve">
          <source>If this &lt;code&gt;Class&lt;/code&gt; object represents an array type, then this method does not find the &lt;code&gt;clone()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb178a8f1871d07a34cdb3bb2de9a0c1fb20f2b9" translate="yes" xml:space="preserve">
          <source>If this &lt;code&gt;Class&lt;/code&gt; object represents an array type, then this method does not find the &lt;code&gt;length&lt;/code&gt; field of the array type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c4b35440106aa65e3bd6d1155d9e17869493181" translate="yes" xml:space="preserve">
          <source>If this &lt;code&gt;Class&lt;/code&gt; object represents an interface then the returned array does not contain any implicitly declared methods from &lt;code&gt;Object&lt;/code&gt;. Therefore, if no methods are explicitly declared in this interface or any of its superinterfaces then the returned array has length 0. (Note that a &lt;code&gt;Class&lt;/code&gt; object which represents a class always has public methods, inherited from &lt;code&gt;Object&lt;/code&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d2d45c96fc82cd4f5045bb65c083bb3e36fa1de" translate="yes" xml:space="preserve">
          <source>If this &lt;code&gt;Class&lt;/code&gt; object represents an interface, the return value is an array containing objects representing the uses of interface types to specify interfaces directly extended by the interface. The order of the objects in the array corresponds to the order of the interface types used in the 'extends' clause of the declaration of this &lt;code&gt;Class&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f7aab31089775b3540a55de72ec8246707dca71" translate="yes" xml:space="preserve">
          <source>If this &lt;code&gt;Class&lt;/code&gt; object represents an interface, then this method returns the fields of the interface and of all its superinterfaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24fcfbcd558d192b46d9d8daf24bd3361c63931e" translate="yes" xml:space="preserve">
          <source>If this &lt;code&gt;Class&lt;/code&gt; object represents either the &lt;code&gt;Object&lt;/code&gt; class, an array type, a primitive type, or void, the return value is an array of length 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74ef85a38a3ffe3f10aa47e5d033acb048da33fd" translate="yes" xml:space="preserve">
          <source>If this &lt;code&gt;Class&lt;/code&gt; represents either the &lt;code&gt;Object&lt;/code&gt; class, an interface type, an array type, a primitive type, or void, the return value is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c005c11b66aec51de31e87c510532c6a448273e" translate="yes" xml:space="preserve">
          <source>If this &lt;code&gt;Field&lt;/code&gt; object is enforcing Java language access control, and the underlying field is inaccessible, the method throws an &lt;code&gt;IllegalAccessException&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfff6651d72785da15b50a35bc44c7be29e967f4" translate="yes" xml:space="preserve">
          <source>If this &lt;code&gt;Field&lt;/code&gt; object is enforcing Java language access control, and the underlying field is inaccessible, the method throws an &lt;code&gt;IllegalAccessException&lt;/code&gt;. If the underlying field is static, the class that declared the field is initialized if it has not already been initialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8557e1e1be59bc05bf4e2df145cc3c316c6e80c0" translate="yes" xml:space="preserve">
          <source>If this &lt;code&gt;Locale&lt;/code&gt; has a language, country, or variant that does not satisfy the IETF BCP 47 language tag syntax requirements, this method handles these fields as described below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae1424f53f74471f85637ef0b51790d77bcaf639" translate="yes" xml:space="preserve">
          <source>If this &lt;code&gt;SSLEngine&lt;/code&gt; has not yet started its initial handshake, this method will automatically start the handshake.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f94176502144d53f9b47819a2742a061514b473" translate="yes" xml:space="preserve">
          <source>If this &lt;code&gt;String&lt;/code&gt; object represents an empty character sequence, or the first and last characters of character sequence represented by this &lt;code&gt;String&lt;/code&gt; object both have codes greater than &lt;code&gt;'\u0020'&lt;/code&gt; (the space character), then a reference to this &lt;code&gt;String&lt;/code&gt; object is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94372ce6dbad15dca713c930c5806a503901c516" translate="yes" xml:space="preserve">
          <source>If this CodeSource object was created using the &lt;a href=&quot;codesource#CodeSource-java.net.URL-java.security.CodeSigner:A-&quot;&gt;&lt;code&gt;CodeSource(URL url, CodeSigner[] signers)&lt;/code&gt;&lt;/a&gt; constructor then its certificate chains are extracted and used to create an array of Certificate objects. Each signer certificate is followed by its supporting certificate chain (which may be empty). Each signer certificate and its supporting certificate chain is ordered bottom-to-top (i.e., with the signer certificate first and the (root) certificate authority last).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecab603cea1b392a04b99fd74cc5c16fc8600c78" translate="yes" xml:space="preserve">
          <source>If this CodeSource object was created using the &lt;a href=&quot;codesource#CodeSource-java.net.URL-java.security.cert.Certificate:A-&quot;&gt;&lt;code&gt;CodeSource(URL url, java.security.cert.Certificate[] certs)&lt;/code&gt;&lt;/a&gt; constructor then its certificate chains are extracted and used to create an array of CodeSigner objects. Note that only X.509 certificates are examined - all other certificate types are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87212e4e2a7f5242014dd7f84b673fda3009933f" translate="yes" xml:space="preserve">
          <source>If this InetAddress was created with a host name, this host name will be remembered and returned; otherwise, a reverse name lookup will be performed and the result will be returned based on the system configured name lookup service. If a lookup of the name service is required, call &lt;a href=&quot;inetaddress#getCanonicalHostName--&quot;&gt;&lt;code&gt;getCanonicalHostName&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8771b92415dc41144a3e4cc576f34f85f427b6e9" translate="yes" xml:space="preserve">
          <source>If this KeyPairGenerator has not been initialized explicitly, provider-specific defaults will be used for the size and other (algorithm-specific) values of the generated keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd80b9ee095b086c5f82414644de7ec8e7158a07" translate="yes" xml:space="preserve">
          <source>If this LDAP name is lexicographically lesser than obj, a negative number is returned. If this LDAP name is lexicographically greater than obj, a positive number is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6337052f3e086791b9360f545e9101bb5279cf3" translate="yes" xml:space="preserve">
          <source>If this LoginModule's own authentication attempt succeeded (checked by retrieving the private state saved by the &lt;code&gt;login&lt;/code&gt; method), then this method associates relevant Principals and Credentials with the &lt;code&gt;Subject&lt;/code&gt; located in the &lt;code&gt;LoginModule&lt;/code&gt;. If this LoginModule's own authentication attempted failed, then this method removes/destroys any state that was originally saved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b0c6b5c94882ad8131434b0393b17deee36d8cd" translate="yes" xml:space="preserve">
          <source>If this LoginModule's own authentication attempt succeeded (checked by retrieving the private state saved by the &lt;code&gt;login&lt;/code&gt; method), then this method cleans up any state that was originally saved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2e88106c6c744ebfa727aad7f15154d6461aeae" translate="yes" xml:space="preserve">
          <source>If this Spliterator is &lt;a href=&quot;spliterator#ORDERED&quot;&gt;&lt;code&gt;ORDERED&lt;/code&gt;&lt;/a&gt;, the returned Spliterator must cover a strict prefix of the elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb9e47f7f86d1768c1633e48cf94673a67f3b07f" translate="yes" xml:space="preserve">
          <source>If this Spliterator is &lt;a href=&quot;spliterator#ORDERED&quot;&gt;&lt;code&gt;Spliterator.ORDERED&lt;/code&gt;&lt;/a&gt;, the returned Spliterator must cover a strict prefix of the elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc3d02811da7cd52f8f2143d8108066a5174a2bd" translate="yes" xml:space="preserve">
          <source>If this Spliterator is &lt;a href=&quot;spliterator#SIZED&quot;&gt;&lt;code&gt;SIZED&lt;/code&gt;&lt;/a&gt; and has not yet been partially traversed or split, or this Spliterator is &lt;a href=&quot;spliterator#SUBSIZED&quot;&gt;&lt;code&gt;SUBSIZED&lt;/code&gt;&lt;/a&gt; and has not yet been partially traversed, this estimate must be an accurate count of elements that would be encountered by a complete traversal. Otherwise, this estimate may be arbitrarily inaccurate, but must decrease as specified across invocations of &lt;a href=&quot;spliterator#trySplit--&quot;&gt;&lt;code&gt;trySplit()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f10f115293acf7405775035800014677ebc0f036" translate="yes" xml:space="preserve">
          <source>If this Spliterator is &lt;a href=&quot;spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt; and has not yet been partially traversed or split, or this Spliterator is &lt;a href=&quot;spliterator#SUBSIZED&quot;&gt;&lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt;&lt;/a&gt; and has not yet been partially traversed, this estimate must be an accurate count of elements that would be encountered by a complete traversal. Otherwise, this estimate may be arbitrarily inaccurate, but must decrease as specified across invocations of &lt;a href=&quot;spliterator#trySplit--&quot;&gt;&lt;code&gt;Spliterator.trySplit()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f60f6f6cceac6f24471b339df70a79fb087d77de" translate="yes" xml:space="preserve">
          <source>If this Spliterator's source is &lt;a href=&quot;spliterator#SORTED&quot;&gt;&lt;code&gt;SORTED&lt;/code&gt;&lt;/a&gt; by a &lt;a href=&quot;comparator&quot;&gt;&lt;code&gt;Comparator&lt;/code&gt;&lt;/a&gt;, returns that &lt;code&gt;Comparator&lt;/code&gt;. If the source is &lt;code&gt;SORTED&lt;/code&gt; in &lt;a href=&quot;../lang/comparable&quot;&gt;natural order&lt;/a&gt;, returns &lt;code&gt;null&lt;/code&gt;. Otherwise, if the source is not &lt;code&gt;SORTED&lt;/code&gt;, throws &lt;a href=&quot;../lang/illegalstateexception&quot;&gt;&lt;code&gt;IllegalStateException&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d47d9dbaa7d1cd77d733d9036821dd30adccdd2" translate="yes" xml:space="preserve">
          <source>If this URI does not contain any characters in the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="953276a9eb7a662bc1d17295c7e9ca3ca9dc9fe3" translate="yes" xml:space="preserve">
          <source>If this URI is opaque, or if its path is already in normal form, then this URI is returned. Otherwise a new URI is constructed that is identical to this URI except that its path is computed by normalizing this URI's path in a manner consistent with &lt;a href=&quot;http://www.ietf.org/rfc/rfc2396.txt&quot;&gt;RFC 2396&lt;/a&gt;, section 5.2, step 6, sub-steps c through f; that is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef183e3c97a706cf2aab485f3b25ca02123979b8" translate="yes" xml:space="preserve">
          <source>If this URI was created by invoking one of the constructors in this class then a string equivalent to the original input string, or to the string computed from the originally-given components, as appropriate, is returned. Otherwise this URI was created by normalization, resolution, or relativization, and so a string is constructed from this URI's components according to the rules specified in &lt;a href=&quot;http://www.ietf.org/rfc/rfc2396.txt&quot;&gt;RFC 2396&lt;/a&gt;, section 5.2, step 7.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35a608d401f58e4ebbe22c45677516aed01211dc" translate="yes" xml:space="preserve">
          <source>If this URI's authority component has already been recognized as being server-based then it will already have been parsed into user-information, host, and port components. In this case, or if this URI has no authority component, this method simply returns this URI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6747f06730f4f2cd3ccc7aa43e049d9e46fd3b4" translate="yes" xml:space="preserve">
          <source>If this abstract pathname does not denote a directory, then this method returns &lt;code&gt;null&lt;/code&gt;. Otherwise an array of &lt;code&gt;File&lt;/code&gt; objects is returned, one for each file or directory in the directory. Pathnames denoting the directory itself and the directory's parent directory are not included in the result. Each resulting abstract pathname is constructed from this abstract pathname using the &lt;a href=&quot;file#File-java.io.File-java.lang.String-&quot;&gt;&lt;code&gt;File(File,&amp;nbsp;String)&lt;/code&gt;&lt;/a&gt; constructor. Therefore if this pathname is absolute then each resulting pathname is absolute; if this pathname is relative then each resulting pathname will be relative to the same directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a706980eb4f663347a3cb237daa9264b98ba23c" translate="yes" xml:space="preserve">
          <source>If this abstract pathname does not denote a directory, then this method returns &lt;code&gt;null&lt;/code&gt;. Otherwise an array of strings is returned, one for each file or directory in the directory. Names denoting the directory itself and the directory's parent directory are not included in the result. Each string is a file name rather than a complete path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a3be84c548eed0823c8e3139a127143e82621eb" translate="yes" xml:space="preserve">
          <source>If this abstract pathname is already absolute, then the pathname string is simply returned as if by the &lt;code&gt;&lt;a href=&quot;file#getPath--&quot;&gt;&lt;code&gt;getPath()&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; method. If this abstract pathname is the empty abstract pathname then the pathname string of the current user directory, which is named by the system property &lt;code&gt;user.dir&lt;/code&gt;, is returned. Otherwise this pathname is resolved in a system-dependent way. On UNIX systems, a relative pathname is made absolute by resolving it against the current user directory. On Microsoft Windows systems, a relative pathname is made absolute by resolving it against the current directory of the drive named by the pathname, if any; if not, it is resolved against the current user directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01c37402cc1becc5bfd07365fcd08b2dbdad0ad1" translate="yes" xml:space="preserve">
          <source>If this abstract pathname is the empty abstract pathname then this method returns a &lt;code&gt;Path&lt;/code&gt; that may be used to access the current user directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b7f67a5f088a680ac92408fde260047d736423c" translate="yes" xml:space="preserve">
          <source>If this buffer is backed by an array then buffer position</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f89b379a17fce051e1f16277ddcb14ccc4b66b84" translate="yes" xml:space="preserve">
          <source>If this buffer is itself read-only then this method behaves in exactly the same way as the &lt;a href=&quot;bytebuffer#duplicate--&quot;&gt;&lt;code&gt;duplicate&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="156fa6ba3e659d60e072ffc378a13f068ae95a75" translate="yes" xml:space="preserve">
          <source>If this buffer is itself read-only then this method behaves in exactly the same way as the &lt;a href=&quot;charbuffer#duplicate--&quot;&gt;&lt;code&gt;duplicate&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35a75ac82494b6599a9d8bae6f1e022d63bf504f" translate="yes" xml:space="preserve">
          <source>If this buffer is itself read-only then this method behaves in exactly the same way as the &lt;a href=&quot;doublebuffer#duplicate--&quot;&gt;&lt;code&gt;duplicate&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="371c8e2f83e83deb4ece27649db80c4a89e64c63" translate="yes" xml:space="preserve">
          <source>If this buffer is itself read-only then this method behaves in exactly the same way as the &lt;a href=&quot;floatbuffer#duplicate--&quot;&gt;&lt;code&gt;duplicate&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d9ca59cfd7a9df15a63ddbc3c00fb352f1667b5" translate="yes" xml:space="preserve">
          <source>If this buffer is itself read-only then this method behaves in exactly the same way as the &lt;a href=&quot;intbuffer#duplicate--&quot;&gt;&lt;code&gt;duplicate&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eedcd5391de7d0bd92118ac43e586d896f287226" translate="yes" xml:space="preserve">
          <source>If this buffer is itself read-only then this method behaves in exactly the same way as the &lt;a href=&quot;longbuffer#duplicate--&quot;&gt;&lt;code&gt;duplicate&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36c05dd52389e980b2b475c5bf397dcbfe429999" translate="yes" xml:space="preserve">
          <source>If this buffer is itself read-only then this method behaves in exactly the same way as the &lt;a href=&quot;shortbuffer#duplicate--&quot;&gt;&lt;code&gt;duplicate&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5877df09139688bd1d4dd4caded2b54d8b6ef182" translate="yes" xml:space="preserve">
          <source>If this buffer was not mapped in read/write mode (&lt;a href=&quot;channels/filechannel.mapmode#READ_WRITE&quot;&gt;&lt;code&gt;FileChannel.MapMode.READ_WRITE&lt;/code&gt;&lt;/a&gt;) then invoking this method has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a46445cea2b2d0e72d6b122d83869fbc86e4fec2" translate="yes" xml:space="preserve">
          <source>If this canonical name equals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca738f426c40cb3ea3806863cff08f7c8b90ba98" translate="yes" xml:space="preserve">
          <source>If this certificate does not contain a &lt;code&gt;SubjectAltName&lt;/code&gt; extension, &lt;code&gt;null&lt;/code&gt; is returned. Otherwise, a &lt;code&gt;Collection&lt;/code&gt; is returned with an entry representing each &lt;code&gt;GeneralName&lt;/code&gt; included in the extension. Each entry is a &lt;code&gt;List&lt;/code&gt; whose first entry is an &lt;code&gt;Integer&lt;/code&gt; (the name type, 0-8) and whose second entry is a &lt;code&gt;String&lt;/code&gt; or a byte array (the name, in string or ASN.1 DER encoded form, respectively).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21ef757fd34257aff40a963d9fc1a1d93bd09628" translate="yes" xml:space="preserve">
          <source>If this certificate does not contain an &lt;code&gt;IssuerAltName&lt;/code&gt; extension, &lt;code&gt;null&lt;/code&gt; is returned. Otherwise, a &lt;code&gt;Collection&lt;/code&gt; is returned with an entry representing each &lt;code&gt;GeneralName&lt;/code&gt; included in the extension. Each entry is a &lt;code&gt;List&lt;/code&gt; whose first entry is an &lt;code&gt;Integer&lt;/code&gt; (the name type, 0-8) and whose second entry is a &lt;code&gt;String&lt;/code&gt; or a byte array (the name, in string or ASN.1 DER encoded form, respectively). For more details about the formats used for each name type, see the &lt;code&gt;getSubjectAlternativeNames&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb57839b1a1ab664307c336a0abc091c0ec8147d" translate="yes" xml:space="preserve">
          <source>If this channel is already closed then invoking this method has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ab02f31b97ee071939ff874b950f37cd99195cf" translate="yes" xml:space="preserve">
          <source>If this channel is already connected then this method will not block and will immediately return &lt;code&gt;true&lt;/code&gt;. If this channel is in non-blocking mode then this method will return &lt;code&gt;false&lt;/code&gt; if the connection process is not yet complete. If this channel is in blocking mode then this method will block until the connection either completes or fails, and will always either return &lt;code&gt;true&lt;/code&gt; or throw a checked exception describing the failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d7c302dbe2f695025b8640ac34f50a0de64f0c2" translate="yes" xml:space="preserve">
          <source>If this channel is already registered with the given selector then the selection key representing that registration is returned after setting its interest set to the given value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d87bd2f3adfdc3f28325dac54a700242beec8405" translate="yes" xml:space="preserve">
          <source>If this channel is closed by another thread during an invocation of this method then an &lt;a href=&quot;asynchronouscloseexception&quot;&gt;&lt;code&gt;AsynchronousCloseException&lt;/code&gt;&lt;/a&gt; will be thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dbdb52e985c96146985878c92a9ee572c7a87bf" translate="yes" xml:space="preserve">
          <source>If this channel is closed then the value returned by this method is not specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="163dba92f7b27612158435e616665962f5f46564" translate="yes" xml:space="preserve">
          <source>If this channel is closed while this operation is in progress then the key returned by this method will have been cancelled and will therefore be invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="570c45f56fd23551052dac6addc16e9085479d7c" translate="yes" xml:space="preserve">
          <source>If this channel is currently a member of the group on the given interface to receive all datagrams then the membership key, representing that membership, is returned. Otherwise this channel joins the group and the resulting new membership key is returned. The resulting membership key is not &lt;a href=&quot;membershipkey#sourceAddress--&quot;&gt;&lt;code&gt;source-specific&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f801112322d04b871768e0c5d6c19666441d7d93" translate="yes" xml:space="preserve">
          <source>If this channel is currently a member of the group on the given interface to receive datagrams from the given source address then the membership key, representing that membership, is returned. Otherwise this channel joins the group and the resulting new membership key is returned. The resulting membership key is &lt;a href=&quot;membershipkey#sourceAddress--&quot;&gt;&lt;code&gt;source-specific&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10e0307a2763fb964960a3bb207d0318d28aa119" translate="yes" xml:space="preserve">
          <source>If this channel is currently registered with the given selector then the selection key representing that registration is returned. The key's interest set will have been changed to &lt;code&gt;ops&lt;/code&gt;, as if by invoking the &lt;a href=&quot;selectionkey#interestOps-int-&quot;&gt;&lt;code&gt;interestOps(int)&lt;/code&gt;&lt;/a&gt; method. If the &lt;code&gt;att&lt;/code&gt; argument is not &lt;code&gt;null&lt;/code&gt; then the key's attachment will have been set to that value. A &lt;a href=&quot;cancelledkeyexception&quot;&gt;&lt;code&gt;CancelledKeyException&lt;/code&gt;&lt;/a&gt; will be thrown if the key has already been cancelled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="731ff7e16ea304387baccdf40ccf8446f1ff82b2" translate="yes" xml:space="preserve">
          <source>If this channel is in blocking mode then an invocation of this method will block until the connection is established or an I/O error occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4af049551fd4be314d3714c933c67ea1e633195" translate="yes" xml:space="preserve">
          <source>If this channel is in non-blocking mode and there is sufficient room in the underlying output buffer, or if this channel is in blocking mode and sufficient room becomes available, then the remaining bytes in the given buffer are transmitted as a single datagram to the given target address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8abf8e95673d1e00311052153bdf85098ea24d2" translate="yes" xml:space="preserve">
          <source>If this channel is in non-blocking mode then an invocation of this method initiates a non-blocking connection operation. If the connection is established immediately, as can happen with a local connection, then this method returns &lt;code&gt;true&lt;/code&gt;. Otherwise this method returns &lt;code&gt;false&lt;/code&gt; and the connection operation must later be completed by invoking the &lt;a href=&quot;socketchannel#finishConnect--&quot;&gt;&lt;code&gt;finishConnect&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96a8b30b6de24a4c9b0a5b52fe7f2986ad339a52" translate="yes" xml:space="preserve">
          <source>If this channel is in non-blocking mode then this method will immediately return &lt;code&gt;null&lt;/code&gt; if there are no pending connections. Otherwise it will block indefinitely until a new connection is available or an I/O error occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90989044c141384d7c72d3db34ded45944982562" translate="yes" xml:space="preserve">
          <source>If this channel is registered with one or more selectors then an attempt to place it into blocking mode will cause an &lt;a href=&quot;illegalblockingmodeexception&quot;&gt;&lt;code&gt;IllegalBlockingModeException&lt;/code&gt;&lt;/a&gt; to be thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69f3fb5016a511b899c6888623fee283b8c8ccae" translate="yes" xml:space="preserve">
          <source>If this channel's file resides on a local storage device then when this method returns it is guaranteed that all changes made to the file since this channel was created, or since this method was last invoked, will have been written to that device. This is useful for ensuring that critical information is not lost in the event of a system crash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0983d675f212d67b75b1d6a5a184d98509d7348d" translate="yes" xml:space="preserve">
          <source>If this channel's socket is not connected, or if the channel is closed, then invoking this method has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e22345f8e4dbdb6cf9ef6dd7404a94dfa19e4d17" translate="yes" xml:space="preserve">
          <source>If this cipher (including its underlying feedback or padding scheme) requires any random bytes (e.g., for parameter generation), it will get them from &lt;code&gt;random&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df4c7583376380d891b8180fbc799056297727ce" translate="yes" xml:space="preserve">
          <source>If this cipher (including its underlying feedback or padding scheme) requires any random bytes (e.g., for parameter generation), it will get them using the &lt;a href=&quot;../../java/security/securerandom&quot;&gt;&lt;code&gt;SecureRandom&lt;/code&gt;&lt;/a&gt; implementation of the highest-priority installed provider as the source of randomness. (If none of the installed providers supply an implementation of SecureRandom, a system-provided source of randomness will be used.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f014b120b82cdd937f7d72a75fe35be62115d12" translate="yes" xml:space="preserve">
          <source>If this cipher (including its underlying feedback or padding scheme) requires any random bytes (e.g., for parameter generation), it will get them using the &lt;code&gt;SecureRandom&lt;/code&gt; implementation of the highest-priority installed provider as the source of randomness. (If none of the installed providers supply an implementation of SecureRandom, a system-provided source of randomness will be used.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba0b3c8786993d9f760f587fe2264fbe88b5a094" translate="yes" xml:space="preserve">
          <source>If this cipher requires algorithm parameters that cannot be derived from the input parameters, and there are no reasonable provider-specific default values, initialization will necessarily fail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9607337bc0d2c4ac058d5f2be65c25112f2a16a" translate="yes" xml:space="preserve">
          <source>If this cipher requires any algorithm parameters and &lt;code&gt;params&lt;/code&gt; is null, the underlying cipher implementation is supposed to generate the required parameters itself (using provider-specific default or random values) if it is being initialized for encryption or key wrapping, and raise an &lt;code&gt;InvalidAlgorithmParameterException&lt;/code&gt; if it is being initialized for decryption or key unwrapping. The generated parameters can be retrieved using &lt;a href=&quot;cipher#getParameters--&quot;&gt;&lt;code&gt;getParameters&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;cipher#getIV--&quot;&gt;&lt;code&gt;getIV&lt;/code&gt;&lt;/a&gt; (if the parameter is an IV).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9885890d448faaca56b5580f516444c6cfac3586" translate="yes" xml:space="preserve">
          <source>If this cipher requires any algorithm parameters and &lt;code&gt;params&lt;/code&gt; is null, the underlying cipher implementation is supposed to generate the required parameters itself (using provider-specific default or random values) if it is being initialized for encryption or key wrapping, and raise an &lt;code&gt;InvalidAlgorithmParameterException&lt;/code&gt; if it is being initialized for decryption or key unwrapping. The generated parameters can be retrieved using &lt;a href=&quot;cipherspi#engineGetParameters--&quot;&gt;&lt;code&gt;engineGetParameters&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;cipherspi#engineGetIV--&quot;&gt;&lt;code&gt;engineGetIV&lt;/code&gt;&lt;/a&gt; (if the parameter is an IV).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ee2bdd99eb0055747a5b587dd5410737fc50478" translate="yes" xml:space="preserve">
          <source>If this cipher requires any algorithm parameters that cannot be derived from the given &lt;code&gt;key&lt;/code&gt;, the underlying cipher implementation is supposed to generate the required parameters itself (using provider-specific default or random values) if it is being initialized for encryption or key wrapping, and raise an &lt;code&gt;InvalidKeyException&lt;/code&gt; if it is being initialized for decryption or key unwrapping. The generated parameters can be retrieved using &lt;a href=&quot;cipher#getParameters--&quot;&gt;&lt;code&gt;getParameters&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;cipher#getIV--&quot;&gt;&lt;code&gt;getIV&lt;/code&gt;&lt;/a&gt; (if the parameter is an IV).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1a771ba743be01067043fa16cfae7decccc00fb" translate="yes" xml:space="preserve">
          <source>If this cipher requires any algorithm parameters that cannot be derived from the given &lt;code&gt;key&lt;/code&gt;, the underlying cipher implementation is supposed to generate the required parameters itself (using provider-specific default or random values) if it is being initialized for encryption or key wrapping, and raise an &lt;code&gt;InvalidKeyException&lt;/code&gt; if it is being initialized for decryption or key unwrapping. The generated parameters can be retrieved using &lt;a href=&quot;cipherspi#engineGetParameters--&quot;&gt;&lt;code&gt;engineGetParameters&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;cipherspi#engineGetIV--&quot;&gt;&lt;code&gt;engineGetIV&lt;/code&gt;&lt;/a&gt; (if the parameter is an IV).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ad3aae370c5f54c513619cd9029629a3de2dbf8" translate="yes" xml:space="preserve">
          <source>If this cipher requires any algorithm parameters that cannot be derived from the public key in the given &lt;code&gt;certificate&lt;/code&gt;, the underlying cipher implementation is supposed to generate the required parameters itself (using provider-specific default or random values) if it is being initialized for encryption or key wrapping, and raise an &lt;code&gt;InvalidKeyException&lt;/code&gt; if it is being initialized for decryption or key unwrapping. The generated parameters can be retrieved using &lt;a href=&quot;cipher#getParameters--&quot;&gt;&lt;code&gt;getParameters&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;cipher#getIV--&quot;&gt;&lt;code&gt;getIV&lt;/code&gt;&lt;/a&gt; (if the parameter is an IV).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd810e0520a9cbad755c6af505916dd59eb466d1" translate="yes" xml:space="preserve">
          <source>If this cipher requires any algorithm parameters that cannot be derived from the public key in the given certificate, the underlying cipher implementation is supposed to generate the required parameters itself (using provider-specific default or random values) if it is being initialized for encryption or key wrapping, and raise an &lt;code&gt;
 InvalidKeyException&lt;/code&gt; if it is being initialized for decryption or key unwrapping. The generated parameters can be retrieved using &lt;a href=&quot;cipher#getParameters--&quot;&gt;&lt;code&gt;getParameters&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;cipher#getIV--&quot;&gt;&lt;code&gt;getIV&lt;/code&gt;&lt;/a&gt; (if the parameter is an IV).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="624f76b7bbcd95cfb5dce88f3ddce2f2d8116067" translate="yes" xml:space="preserve">
          <source>If this class does not exist, or if the class exists but it is not a subclass of &lt;code&gt;URLStreamHandler&lt;/code&gt;, then a &lt;code&gt;MalformedURLException&lt;/code&gt; is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69d4f238f20070124b52ae9bc4ef867a68c61d0a" translate="yes" xml:space="preserve">
          <source>If this class object represents a class of arrays, then the internal form of the name consists of the name of the element type preceded by one or more '&lt;code&gt;[&lt;/code&gt;' characters representing the depth of the array nesting. The encoding of element type names is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="def3edfc8fbf2a15bf3c8b618faaee89903ad9aa" translate="yes" xml:space="preserve">
          <source>If this class object represents a primitive type or void, then the name returned is a &lt;code&gt;String&lt;/code&gt; equal to the Java language keyword corresponding to the primitive type or void.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3d80b3d6f4447468d30f956a1a77f5832658ebf" translate="yes" xml:space="preserve">
          <source>If this class object represents a reference type that is not an array type then the binary name of the class is returned, as specified by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09a4dc4cb86e1e2f58f6aef9bb6951ac52447ad2" translate="yes" xml:space="preserve">
          <source>If this collection fits in the specified array with room to spare (i.e., the array has more elements than this collection), the element in the array immediately following the end of the collection is set to &lt;code&gt;null&lt;/code&gt;. (This is useful in determining the length of this collection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78d6d731c58007d098ae33f9cb0873fdf5217de6" translate="yes" xml:space="preserve">
          <source>If this collection makes any guarantees as to what order its elements are returned by its iterator, this method must return the elements in the same order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c98bf87256cbfcf308d313fd2f95fc4c59ba56e" translate="yes" xml:space="preserve">
          <source>If this connector is not already associated with an &lt;code&gt;MBeanServer&lt;/code&gt; object, or if the &lt;code&gt;mbsf.setMBeanServer&lt;/code&gt; call just mentioned succeeds, then &lt;code&gt;mbsf&lt;/code&gt; becomes this connector server's &lt;code&gt;MBeanServer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58e96a5a6e2be6622a22adedba3560a6b7eb53b6" translate="yes" xml:space="preserve">
          <source>If this connector server is already associated with an &lt;code&gt;MBeanServer&lt;/code&gt; object, then that object is given to &lt;a href=&quot;../mbeanserverforwarder#setMBeanServer-javax.management.MBeanServer-&quot;&gt;&lt;code&gt;mbsf.setMBeanServer&lt;/code&gt;&lt;/a&gt;. If doing so produces an exception, this method throws the same exception without any other effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e199ab0891f8cfdd3a886ca4d5502a09e0396dc4" translate="yes" xml:space="preserve">
          <source>If this connector server is already associated with an &lt;code&gt;MBeanServer&lt;/code&gt; object, then that object is given to &lt;a href=&quot;mbeanserverforwarder#setMBeanServer-javax.management.MBeanServer-&quot;&gt;&lt;code&gt;mbsf.setMBeanServer&lt;/code&gt;&lt;/a&gt;. If doing so produces an exception, this method throws the same exception without any other effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae5f6cf31f822688ca1f884ee4068dbfa858e7ae" translate="yes" xml:space="preserve">
          <source>If this connector server is already attached to an MBean server, this method has no effect. The MBean server it is attached to is not necessarily the one it is being registered in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="591c70492849834b0b9910ca18bf79e4808ef615" translate="yes" xml:space="preserve">
          <source>If this decoder has already been flushed then invoking this method has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29e1093694eed107a88bf7c07bbd5945249dbbd2" translate="yes" xml:space="preserve">
          <source>If this decoder implements an auto-detecting charset then at a single point during a decoding operation this method may start returning &lt;code&gt;true&lt;/code&gt; to indicate that a specific charset has been detected in the input byte sequence. Once this occurs, the &lt;a href=&quot;charsetdecoder#detectedCharset--&quot;&gt;&lt;code&gt;detectedCharset&lt;/code&gt;&lt;/a&gt; method may be invoked to retrieve the detected charset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94371ead6eeef262635714af7aa3dd537f5b17ff" translate="yes" xml:space="preserve">
          <source>If this decoder implements an auto-detecting charset then this method returns the actual charset once it has been detected. After that point, this method returns the same value for the duration of the current decoding operation. If not enough input bytes have yet been read to determine the actual charset then this method throws an &lt;a href=&quot;../../lang/illegalstateexception&quot;&gt;&lt;code&gt;IllegalStateException&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c64bf88c12ecf5625c8218a6500e6ed616cbae7d" translate="yes" xml:space="preserve">
          <source>If this deque fits in the specified array with room to spare (i.e., the array has more elements than this deque), the element in the array immediately following the end of the deque is set to &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02f57345a6452f5e9026d62211962bbc940e055e" translate="yes" xml:space="preserve">
          <source>If this dictionary already contains an entry for the specified &lt;code&gt;key&lt;/code&gt;, the value already in this dictionary for that &lt;code&gt;key&lt;/code&gt; is returned, after modifying the entry to contain the new element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21cdc0ae4deca45735edd1a8c869ab07f87eadf6" translate="yes" xml:space="preserve">
          <source>If this dictionary does not already have an entry for the specified &lt;code&gt;key&lt;/code&gt;, an entry is created for the specified &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;, and &lt;code&gt;null&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ba6239de0cab448d7826072832e3944f0eff1f3" translate="yes" xml:space="preserve">
          <source>If this duration has greater than millisecond precision, then the conversion will drop any excess precision information as though the amount in nanoseconds was subject to integer division by one million.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="646430d8f0c3cf4b060406c066441d14b415faf2" translate="yes" xml:space="preserve">
          <source>If this duration is too large to fit in a &lt;code&gt;long&lt;/code&gt; milliseconds, then an exception is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eb1910e8a8632050383d1502ff10c5891a131f7" translate="yes" xml:space="preserve">
          <source>If this duration is too large to fit in a &lt;code&gt;long&lt;/code&gt; nanoseconds, then an exception is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a91202676916cac7dee740e5b4030146c55eaee" translate="yes" xml:space="preserve">
          <source>If this element is one whose declaration is lexically enclosed immediately within the declaration of another element, that other element is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f792c4a3d4c584f788e17666a92b9623483ee223" translate="yes" xml:space="preserve">
          <source>If this encoder has already been flushed then invoking this method has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c074959dfda7a1b8ccc45069a9e2c3e535da645" translate="yes" xml:space="preserve">
          <source>If this exemption mechanism requires any algorithm parameters and &lt;code&gt;params&lt;/code&gt; is null, the underlying exemption mechanism implementation is supposed to generate the required parameters itself (using provider-specific default values); in the case that algorithm parameters must be specified by the caller, an &lt;code&gt;InvalidAlgorithmParameterException&lt;/code&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f48b406dc55c7d93d9b734b8f828b98a0c6d2cb0" translate="yes" xml:space="preserve">
          <source>If this exemption mechanism requires any algorithm parameters that cannot be derived from the given &lt;code&gt;key&lt;/code&gt;, the underlying exemption mechanism implementation is supposed to generate the required parameters itself (using provider-specific default values); in the case that algorithm parameters must be specified by the caller, an &lt;code&gt;InvalidKeyException&lt;/code&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50aecb57b570915b3125ed9e4b7405a7c9a0b5c2" translate="yes" xml:space="preserve">
          <source>If this factory cannot create a control using the argument supplied, it should return null. A factory should only throw an exception if it is sure that it is the only intended factory and that no other control factories should be tried. This might happen, for example, if the BER data in the control does not match what is expected of a control with the given OID. Since this method throws &lt;code&gt;NamingException&lt;/code&gt;, any other internally generated exception that should be propagated must be wrapped inside a &lt;code&gt;NamingException&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45e27c4c938fbe66c22c4c86a3ed6d25c1cb9914" translate="yes" xml:space="preserve">
          <source>If this file has an associated channel then the channel is closed as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="635e785cd12b388367b6da4d211b51f42af3dbeb" translate="yes" xml:space="preserve">
          <source>If this implementation supports</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe133eddff804df44bcaf058ea960eef008f4711" translate="yes" xml:space="preserve">
          <source>If this instance was created with the &lt;a href=&quot;inputstreamreader#InputStreamReader-java.io.InputStream-java.lang.String-&quot;&gt;&lt;code&gt;InputStreamReader(InputStream, String)&lt;/code&gt;&lt;/a&gt; constructor then the returned name, being unique for the encoding, may differ from the name passed to the constructor. This method will return &lt;code&gt;null&lt;/code&gt; if the stream has been closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="890b309648dad3759e14d379a74cbd471b520cc0" translate="yes" xml:space="preserve">
          <source>If this instance was created with the &lt;a href=&quot;outputstreamwriter#OutputStreamWriter-java.io.OutputStream-java.lang.String-&quot;&gt;&lt;code&gt;OutputStreamWriter(OutputStream, String)&lt;/code&gt;&lt;/a&gt; constructor then the returned name, being unique for the encoding, may differ from the name passed to the constructor. This method may return &lt;code&gt;null&lt;/code&gt; if the stream has been closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c0c7ed5296853c747df2e52d735327259e31d7a" translate="yes" xml:space="preserve">
          <source>If this instant has greater than millisecond precision, then the conversion will drop any excess precision information as though the amount in nanoseconds was subject to integer division by one million.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af5f9e803caf892e414dbe5489eabcd25bc34fc5" translate="yes" xml:space="preserve">
          <source>If this instant represents a point on the time-line too far in the future or past to fit in a &lt;code&gt;long&lt;/code&gt; milliseconds, then an exception is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51dd5d8c5d533ffbfd6b5e326c493179436819ba" translate="yes" xml:space="preserve">
          <source>If this is a &lt;a href=&quot;packageelement#getEnclosingElement--&quot;&gt;package&lt;/a&gt;, &lt;code&gt;null&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf598f6c1d24fa4deedb239a99d3523a7ece48da" translate="yes" xml:space="preserve">
          <source>If this is a &lt;a href=&quot;typeelement#getEnclosingElement--&quot;&gt;top-level type&lt;/a&gt;, its package is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e96bb4b14e3eba6404c2f781fb3a62e040d52fd" translate="yes" xml:space="preserve">
          <source>If this is a &lt;a href=&quot;typeparameterelement#getEnclosingElement--&quot;&gt;type parameter&lt;/a&gt;, &lt;a href=&quot;typeparameterelement#getGenericElement--&quot;&gt;the generic element&lt;/a&gt; of the type parameter is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78cf6561ffb980740deb1888906856d467f5457b" translate="yes" xml:space="preserve">
          <source>If this is a &lt;a href=&quot;variableelement#getEnclosingElement--&quot;&gt;method or constructor parameter&lt;/a&gt;, &lt;a href=&quot;executableelement&quot;&gt;the executable element&lt;/a&gt; which declares the parameter is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b763c6b818e8148b4556ea7a6bafd024a995a8e8" translate="yes" xml:space="preserve">
          <source>If this is the first &lt;code&gt;LogRecord&lt;/code&gt; to be written to a given &lt;code&gt;OutputStream&lt;/code&gt;, the &lt;code&gt;Formatter&lt;/code&gt;'s &quot;head&quot; string is written to the stream before the &lt;code&gt;LogRecord&lt;/code&gt; is written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c8044ad26a6d20700b19f55ec42869a70d922ea" translate="yes" xml:space="preserve">
          <source>If this is the first URL object being created with the specified protocol, a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50aab0b1a9c70ab29fd7b9c662b5e7a0eca89f64" translate="yes" xml:space="preserve">
          <source>If this key agreement requires any random bytes, it will get them using the &lt;a href=&quot;../../java/security/securerandom&quot;&gt;&lt;code&gt;SecureRandom&lt;/code&gt;&lt;/a&gt; implementation of the highest-priority installed provider as the source of randomness. (If none of the installed providers supply an implementation of SecureRandom, a system-provided source of randomness will be used.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d76c6a8bf2b303cf2221e92b4e42d6ba8afabe8" translate="yes" xml:space="preserve">
          <source>If this key generator requires any random bytes, it will get them using the &lt;a href=&quot;../../java/security/securerandom&quot;&gt;&lt;code&gt;SecureRandom&lt;/code&gt;&lt;/a&gt; implementation of the highest-priority installed provider as the source of randomness. (If none of the installed providers supply an implementation of SecureRandom, a system-provided source of randomness will be used.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bddd254d42eea8986a11358178cffc024f93953" translate="yes" xml:space="preserve">
          <source>If this key has already been cancelled then invoking this method has no effect. Once cancelled, a key remains forever invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83da59ce9539f95ec07aaec1f4842a15915ef06b" translate="yes" xml:space="preserve">
          <source>If this key has not yet been cancelled then it is added to its selector's cancelled-key set while synchronized on that set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f1efc582a6c2c71ff3e5aca522b4daaec159e53" translate="yes" xml:space="preserve">
          <source>If this key's channel does not support read operations then this method always returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="890e145cfc4f3f9520f22ce4fa868c255e45c263" translate="yes" xml:space="preserve">
          <source>If this key's channel does not support socket-accept operations then this method always returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ebd7fa86869fc4b87322f9cf2053e6de7a63c99" translate="yes" xml:space="preserve">
          <source>If this key's channel does not support socket-connect operations then this method always returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4beaec2b79e41b2d36924704bcbb11dc0727f4f" translate="yes" xml:space="preserve">
          <source>If this key's channel does not support write operations then this method always returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="008cdfca03fe48931c96cba5011bb7ee5c689831" translate="yes" xml:space="preserve">
          <source>If this keytab is bound to a specific principal, calling this method on another principal will return an empty array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="000a1bab763399031238aaa35977217bf11683de" translate="yes" xml:space="preserve">
          <source>If this list fits in the specified array with room to spare (i.e., the array has more elements than this list), the element in the array immediately following the end of the list is set to &lt;code&gt;null&lt;/code&gt;. (This is useful in determining the length of this list</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1db15b17eadbce7af9b771b8b76f56db6588ba62" translate="yes" xml:space="preserve">
          <source>If this list has not been explicitly modified, a system-provided default guarantees a minimum quality of service in all enabled cipher suites.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82085a0ded0a26a4ae9cce5749ded99e5178ffdd" translate="yes" xml:space="preserve">
          <source>If this lock is not held when any of the &lt;a href=&quot;condition&quot;&gt;&lt;code&gt;Condition&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;condition#await--&quot;&gt;waiting&lt;/a&gt; or &lt;a href=&quot;condition#signal--&quot;&gt;signalling&lt;/a&gt; methods are called, then an &lt;a href=&quot;../../../lang/illegalmonitorstateexception&quot;&gt;&lt;code&gt;IllegalMonitorStateException&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eee26829fd18b6973e06016bd08f5d58312d50f" translate="yes" xml:space="preserve">
          <source>If this lock object is valid then invoking this method releases the lock and renders the object invalid. If this lock object is invalid then invoking this method has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ced0aadf82c54cdaa29d509af41e23c06fee2d2b" translate="yes" xml:space="preserve">
          <source>If this map permits null values, then a return value of &lt;code&gt;null&lt;/code&gt; does not</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38c84e3f3622968548e8ca88b47186596616c713" translate="yes" xml:space="preserve">
          <source>If this membership key is not source-specific, and the underlying operating system supports source filtering, then this method blocks multicast datagrams from the given source address. If the given source address is already blocked then this method has no effect. After a source address is blocked it may still be possible to receive datagrams from that source. This can arise when datagrams are waiting to be received in the socket's receive buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa3370fa2c521cef5ca42d1f38eef3085fe4df23" translate="yes" xml:space="preserve">
          <source>If this method causes a node to be created, this node is not guaranteed to be persistent until the &lt;code&gt;flush&lt;/code&gt; method is invoked on this node or one of its ancestors (or descendants).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7763898ffe1310d7a9cc8d3b7a661370fcf75bb" translate="yes" xml:space="preserve">
          <source>If this method completes successfully then it returns &lt;a href=&quot;coderresult#UNDERFLOW&quot;&gt;&lt;code&gt;CoderResult.UNDERFLOW&lt;/code&gt;&lt;/a&gt;. If there is insufficient room in the output buffer then it returns &lt;a href=&quot;coderresult#OVERFLOW&quot;&gt;&lt;code&gt;CoderResult.OVERFLOW&lt;/code&gt;&lt;/a&gt;. If this happens then this method must be invoked again, with an output buffer that has more room, in order to complete the current &lt;a href=&quot;#steps&quot;&gt;decoding operation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da3a441ed392e261c85ef52698fd864dc0d74f93" translate="yes" xml:space="preserve">
          <source>If this method completes successfully then it returns &lt;a href=&quot;coderresult#UNDERFLOW&quot;&gt;&lt;code&gt;CoderResult.UNDERFLOW&lt;/code&gt;&lt;/a&gt;. If there is insufficient room in the output buffer then it returns &lt;a href=&quot;coderresult#OVERFLOW&quot;&gt;&lt;code&gt;CoderResult.OVERFLOW&lt;/code&gt;&lt;/a&gt;. If this happens then this method must be invoked again, with an output buffer that has more room, in order to complete the current &lt;a href=&quot;#steps&quot;&gt;encoding operation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f5838e3631d37a22c2762422064d85d5ff87054" translate="yes" xml:space="preserve">
          <source>If this method fails, then it may do so after creating some, but not all, of the parent directories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9c0928502e859e85a0de01a5473b5cf15abaacf" translate="yes" xml:space="preserve">
          <source>If this method has ever been called on a given &lt;code&gt;AttributeList&lt;/code&gt; instance, a subsequent attempt to add an object to that instance which is not an &lt;code&gt;Attribute&lt;/code&gt; will fail with a &lt;code&gt;IllegalArgumentException&lt;/code&gt;. For compatibility reasons, an &lt;code&gt;AttributeList&lt;/code&gt; on which this method has never been called does allow objects other than &lt;code&gt;Attribute&lt;/code&gt;s to be added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="359793ad6432cb9cd5fa8412782ecca71d3df2d7" translate="yes" xml:space="preserve">
          <source>If this method has ever been called on a given &lt;code&gt;RoleList&lt;/code&gt; instance, a subsequent attempt to add an object to that instance which is not a &lt;code&gt;Role&lt;/code&gt; will fail with an &lt;code&gt;IllegalArgumentException&lt;/code&gt;. For compatibility reasons, a &lt;code&gt;RoleList&lt;/code&gt; on which this method has never been called does allow objects other than &lt;code&gt;Role&lt;/code&gt;s to be added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28b83e7c1301d5a763b5d828fb7d5af0319b1267" translate="yes" xml:space="preserve">
          <source>If this method has ever been called on a given &lt;code&gt;RoleUnresolvedList&lt;/code&gt; instance, a subsequent attempt to add an object to that instance which is not a &lt;code&gt;RoleUnresolved&lt;/code&gt; will fail with an &lt;code&gt;IllegalArgumentException&lt;/code&gt;. For compatibility reasons, a &lt;code&gt;RoleUnresolvedList&lt;/code&gt; on which this method has never been called does allow objects other than &lt;code&gt;RoleUnresolved&lt;/code&gt;s to be added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5e28ad1b99be76e057ec854fd96e8b1df9a3fda" translate="yes" xml:space="preserve">
          <source>If this method is called more than once with the same library name, the second and subsequent calls are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fec3f1658c64077416de46608c8e7d21bb8a2d5d" translate="yes" xml:space="preserve">
          <source>If this method is called when it is not an overlap, &lt;code&gt;this&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a895efab6b10c654536ae18029ccdc62da13ad3" translate="yes" xml:space="preserve">
          <source>If this method is invoked after the virtual machine has begun its shutdown sequence then if shutdown hooks are being run this method will block indefinitely. If shutdown hooks have already been run and on-exit finalization has been enabled then this method halts the virtual machine with the given status code if the status is nonzero; otherwise, it blocks indefinitely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41db96f0ae0cfb287399c72e6b99e0ffae187d24" translate="yes" xml:space="preserve">
          <source>If this method is invoked on a node that has been removed with the &lt;a href=&quot;abstractpreferences#removeNode--&quot;&gt;&lt;code&gt;removeNode()&lt;/code&gt;&lt;/a&gt; method, flushSpi() is invoked on this node, but not on others.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cb89a6eb185edcb78db3f7c05fc5b72ac8edd89" translate="yes" xml:space="preserve">
          <source>If this method is invoked on a node that has been removed with the &lt;a href=&quot;preferences#removeNode--&quot;&gt;&lt;code&gt;removeNode()&lt;/code&gt;&lt;/a&gt; method, flushSpi() is invoked on this node, but not on others.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="897ec622f1324a90c92ac76dcd58ecbd59846a3b" translate="yes" xml:space="preserve">
          <source>If this method is invoked while another invocation of this method or of the &lt;a href=&quot;selectablechannel#register-java.nio.channels.Selector-int-&quot;&gt;&lt;code&gt;register&lt;/code&gt;&lt;/a&gt; method is in progress then it will first block until the other operation is complete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9870c4dbe5964f938a44c3304f30bf52d5b60c0" translate="yes" xml:space="preserve">
          <source>If this method is invoked with equal minimum and maximum widths and a sign style of &lt;code&gt;NOT_NEGATIVE&lt;/code&gt; then it delegates to &lt;code&gt;appendValue(TemporalField,int)&lt;/code&gt;. In this scenario, the formatting and parsing behavior described there occur.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad729037675a25baa03f0d24a4acba5ac35b089b" translate="yes" xml:space="preserve">
          <source>If this method is not called, the default &lt;code&gt;HostnameVerifier&lt;/code&gt; assumes the connection should not be permitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0b6b511fb044eb39545567fe94d211a4d867129" translate="yes" xml:space="preserve">
          <source>If this method is overridden, then &lt;code&gt;super.checkAccess&lt;/code&gt; should be called by the first statement in the overridden method, or the equivalent security check should be placed in the overridden method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bba6df9ffc21dac2bfe7a31f9c32e2fce7cb953f" translate="yes" xml:space="preserve">
          <source>If this method is overridden, then &lt;code&gt;super.checkPackageAccess&lt;/code&gt; should be called as the first line in the overridden method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8717d447e57fbb7a357ddb19fca08779dbcd403d" translate="yes" xml:space="preserve">
          <source>If this method is overridden, then &lt;code&gt;super.checkPackageDefinition&lt;/code&gt; should be called as the first line in the overridden method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2716b5886dbb3910a787a5d7351e3a6f9642796" translate="yes" xml:space="preserve">
          <source>If this method is overridden, then a call to &lt;code&gt;super.checkMemberAccess&lt;/code&gt; cannot be made, as the default implementation of &lt;code&gt;checkMemberAccess&lt;/code&gt; relies on the code being checked being at a stack depth of 4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f2fe15a0c80e5590ecfc272b969b250dc9971d7" translate="yes" xml:space="preserve">
          <source>If this method returns &lt;a href=&quot;filevisitresult#CONTINUE&quot;&gt;&lt;code&gt;CONTINUE&lt;/code&gt;&lt;/a&gt;, then entries in the directory are visited. If this method returns &lt;a href=&quot;filevisitresult#SKIP_SUBTREE&quot;&gt;&lt;code&gt;SKIP_SUBTREE&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;filevisitresult#SKIP_SIBLINGS&quot;&gt;&lt;code&gt;SKIP_SIBLINGS&lt;/code&gt;&lt;/a&gt; then entries in the directory (and any descendants) will not be visited.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e39185a4e0c8088f7aade4e05eb53553f43af678" translate="yes" xml:space="preserve">
          <source>If this method returns &lt;code&gt;UNSPECIFIED_OPTION&lt;/code&gt;, then this &lt;code&gt;ConfirmationCallback&lt;/code&gt; was instantiated with &lt;code&gt;options&lt;/code&gt; instead of an &lt;code&gt;optionType&lt;/code&gt;. In this case, invoke the &lt;code&gt;getOptions&lt;/code&gt; method to determine which confirmation options to display.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4f8442da076503f391489329dc072c7aef9f736" translate="yes" xml:space="preserve">
          <source>If this method returns &lt;code&gt;false&lt;/code&gt; for a particular character sequence then more information about why the sequence cannot be encoded may be obtained by performing a full &lt;a href=&quot;#steps&quot;&gt;encoding operation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89741f03e2c12e3f9d0377de8cdbc5a8a096de70" translate="yes" xml:space="preserve">
          <source>If this method returns &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;hasThumbnails&lt;/code&gt; and &lt;code&gt;getNumThumbnails&lt;/code&gt; will return &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt;, respectively, and &lt;code&gt;readThumbnail&lt;/code&gt; will throw an &lt;code&gt;UnsupportedOperationException&lt;/code&gt;, regardless of their arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="583ee50e7f99c02fd6ebcf8333ad462d124187da" translate="yes" xml:space="preserve">
          <source>If this method returns &lt;code&gt;null&lt;/code&gt;, i.e. the libraries were not found in any of the JAR files loaded with this class loader, the VM searches the library along the path specified as the &lt;code&gt;java.library.path&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd48509152a373edcec8f406d8b8e5710f1c1c27" translate="yes" xml:space="preserve">
          <source>If this method returns &lt;code&gt;true&lt;/code&gt; then the &lt;a href=&quot;buffer#array--&quot;&gt;&lt;code&gt;array&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;buffer#arrayOffset--&quot;&gt;&lt;code&gt;arrayOffset&lt;/code&gt;&lt;/a&gt; methods may safely be invoked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbdb6410341007d87b08daec6c7107ce0df914c6" translate="yes" xml:space="preserve">
          <source>If this method returns &lt;code&gt;true&lt;/code&gt; then the &lt;a href=&quot;bytebuffer#array--&quot;&gt;&lt;code&gt;array&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;bytebuffer#arrayOffset--&quot;&gt;&lt;code&gt;arrayOffset&lt;/code&gt;&lt;/a&gt; methods may safely be invoked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a857f7c1ccccfd0ee4edfcfe5dd250a8768e0861" translate="yes" xml:space="preserve">
          <source>If this method returns &lt;code&gt;true&lt;/code&gt; then the &lt;a href=&quot;charbuffer#array--&quot;&gt;&lt;code&gt;array&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;charbuffer#arrayOffset--&quot;&gt;&lt;code&gt;arrayOffset&lt;/code&gt;&lt;/a&gt; methods may safely be invoked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63c55591e8102bdcf445fe25c70543f8c60cb25a" translate="yes" xml:space="preserve">
          <source>If this method returns &lt;code&gt;true&lt;/code&gt; then the &lt;a href=&quot;doublebuffer#array--&quot;&gt;&lt;code&gt;array&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;doublebuffer#arrayOffset--&quot;&gt;&lt;code&gt;arrayOffset&lt;/code&gt;&lt;/a&gt; methods may safely be invoked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaa27e79e71eea321ee777191049d775b73b8810" translate="yes" xml:space="preserve">
          <source>If this method returns &lt;code&gt;true&lt;/code&gt; then the &lt;a href=&quot;floatbuffer#array--&quot;&gt;&lt;code&gt;array&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;floatbuffer#arrayOffset--&quot;&gt;&lt;code&gt;arrayOffset&lt;/code&gt;&lt;/a&gt; methods may safely be invoked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b13dc213a3ee30b61fca492d489a4c0f9eb2f263" translate="yes" xml:space="preserve">
          <source>If this method returns &lt;code&gt;true&lt;/code&gt; then the &lt;a href=&quot;intbuffer#array--&quot;&gt;&lt;code&gt;array&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;intbuffer#arrayOffset--&quot;&gt;&lt;code&gt;arrayOffset&lt;/code&gt;&lt;/a&gt; methods may safely be invoked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17d0fce648cd581a214ad523211f985748ce4de4" translate="yes" xml:space="preserve">
          <source>If this method returns &lt;code&gt;true&lt;/code&gt; then the &lt;a href=&quot;longbuffer#array--&quot;&gt;&lt;code&gt;array&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;longbuffer#arrayOffset--&quot;&gt;&lt;code&gt;arrayOffset&lt;/code&gt;&lt;/a&gt; methods may safely be invoked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2694b014a8ca3bb488a35a3293aadfd6acca88e" translate="yes" xml:space="preserve">
          <source>If this method returns &lt;code&gt;true&lt;/code&gt; then the &lt;a href=&quot;shortbuffer#array--&quot;&gt;&lt;code&gt;array&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;shortbuffer#arrayOffset--&quot;&gt;&lt;code&gt;arrayOffset&lt;/code&gt;&lt;/a&gt; methods may safely be invoked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f30f43a24fc957d3345e50bb02daec3098aff3e0" translate="yes" xml:space="preserve">
          <source>If this method returns successfully, the &lt;a href=&quot;mididevice&quot;&gt;&lt;code&gt;MidiDevice&lt;/code&gt;&lt;/a&gt; the &lt;code&gt;Receiver&lt;/code&gt; belongs to is opened implicitly, if it is not already open. It is possible to close an implicitly opened device by calling &lt;a href=&quot;receiver#close--&quot;&gt;&lt;code&gt;close&lt;/code&gt;&lt;/a&gt; on the returned &lt;code&gt;Receiver&lt;/code&gt;. All open &lt;code&gt;Receiver&lt;/code&gt; instances have to be closed in order to release system resources hold by the &lt;code&gt;MidiDevice&lt;/code&gt;. For a detailed description of open/close behaviour see the class description of &lt;a href=&quot;mididevice&quot;&gt;&lt;code&gt;MidiDevice&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11090b93bbbee91fc5f0393730ae36edec55ac29" translate="yes" xml:space="preserve">
          <source>If this method returns successfully, the &lt;a href=&quot;mididevice&quot;&gt;&lt;code&gt;MidiDevice&lt;/code&gt;&lt;/a&gt; the &lt;code&gt;Transmitter&lt;/code&gt; belongs to is opened implicitly, if it is not already open. It is possible to close an implicitly opened device by calling &lt;a href=&quot;transmitter#close--&quot;&gt;&lt;code&gt;close&lt;/code&gt;&lt;/a&gt; on the returned &lt;code&gt;Transmitter&lt;/code&gt;. All open &lt;code&gt;Transmitter&lt;/code&gt; instances have to be closed in order to release system resources hold by the &lt;code&gt;MidiDevice&lt;/code&gt;. For a detailed description of open/close behaviour see the class description of &lt;a href=&quot;mididevice&quot;&gt;&lt;code&gt;MidiDevice&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="014b30135306d4074b7578319732d53aa9c447fc" translate="yes" xml:space="preserve">
          <source>If this method returns true, and a match was found, then more input could cause the match to be lost. If this method returns false and a match was found, then more input might change the match but the match won't be lost. If a match was not found, then requireEnd has no meaning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb5a99f4d37b88e56a040cef00ac9b0e8bbdb966" translate="yes" xml:space="preserve">
          <source>If this method successfully creates an MBean, a notification is sent as described &lt;a href=&quot;#notif&quot;&gt;above&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0872f63d827bd783c6afa520726b944970b97a1" translate="yes" xml:space="preserve">
          <source>If this method successfully registers an MBean, a notification is sent as described &lt;a href=&quot;#notif&quot;&gt;above&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ae3a101c67d63daa605cb7ec0e8cbf30e62e517" translate="yes" xml:space="preserve">
          <source>If this method successfully unregisters an MBean, a notification is sent as described &lt;a href=&quot;#notif&quot;&gt;above&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19bb00699df718b977df1da7ce02cb1fa1580c55" translate="yes" xml:space="preserve">
          <source>If this method throws an exception, no classes have been redefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d645fdf0c0b5590fb0091579dadbcf7c2685180b" translate="yes" xml:space="preserve">
          <source>If this method throws an exception, no classes have been retransformed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80b175ddef3aedcef9f2574b1f0955c043f5beb5" translate="yes" xml:space="preserve">
          <source>If this method throws an exception, the corresponding call to &lt;code&gt;get&lt;/code&gt; will terminate abnormally with that exception, and no class value will be recorded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31f24edbd9312a49f2c5d55339e1a0c7b714be08" translate="yes" xml:space="preserve">
          <source>If this node (or an ancestor) has already been removed with the &lt;a href=&quot;preferences#removeNode--&quot;&gt;&lt;code&gt;removeNode()&lt;/code&gt;&lt;/a&gt; method, it</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ee7f0b7048c262e543adfeeb22a030246d06650" translate="yes" xml:space="preserve">
          <source>If this node throws a &lt;code&gt;BackingStoreException&lt;/code&gt;, the exception will propagate out beyond the enclosing &lt;a href=&quot;abstractpreferences#childrenNames--&quot;&gt;&lt;code&gt;childrenNames()&lt;/code&gt;&lt;/a&gt; invocation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="559431be004f78cfedf89622122e661e8465d896" translate="yes" xml:space="preserve">
          <source>If this node throws a &lt;code&gt;BackingStoreException&lt;/code&gt;, the exception will propagate out beyond the enclosing &lt;a href=&quot;abstractpreferences#flush--&quot;&gt;&lt;code&gt;flush()&lt;/code&gt;&lt;/a&gt; invocation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92b05339fcd195b8f7ac0393a4c15f2aba767bd7" translate="yes" xml:space="preserve">
          <source>If this node throws a &lt;code&gt;BackingStoreException&lt;/code&gt;, the exception will propagate out beyond the enclosing &lt;a href=&quot;abstractpreferences#keys--&quot;&gt;&lt;code&gt;keys()&lt;/code&gt;&lt;/a&gt; invocation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd45290603e6a182e39c137fb954292209622352" translate="yes" xml:space="preserve">
          <source>If this node throws a &lt;code&gt;BackingStoreException&lt;/code&gt;, the exception will propagate out beyond the enclosing &lt;a href=&quot;abstractpreferences#removeNode--&quot;&gt;&lt;code&gt;removeNode()&lt;/code&gt;&lt;/a&gt; invocation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="146b76b44e28b571c84f2ccde9b8eac9e2e10eb5" translate="yes" xml:space="preserve">
          <source>If this node throws a &lt;code&gt;BackingStoreException&lt;/code&gt;, the exception will propagate out beyond the enclosing &lt;a href=&quot;abstractpreferences#sync--&quot;&gt;&lt;code&gt;sync()&lt;/code&gt;&lt;/a&gt; invocation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9042e3a5360f606a37243806960e35e2291e5980" translate="yes" xml:space="preserve">
          <source>If this object has changed, as indicated by the &lt;code&gt;hasChanged&lt;/code&gt; method, then notify all of its observers and then call the &lt;code&gt;clearChanged&lt;/code&gt; method to indicate that this object has no longer changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f163d00f83379280da474191b92bc7dee7c9f64" translate="yes" xml:space="preserve">
          <source>If this object is a wildcard domain (such as *.sun.com), and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cea4ac3417339627d77e490ba6aa487e04415af" translate="yes" xml:space="preserve">
          <source>If this object represents a class or interface that implements no interfaces, the method returns an array of length 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bbfde3dbccd1b93d90d863f22fea55a2270b449" translate="yes" xml:space="preserve">
          <source>If this object represents a class, the return value is an array containing objects representing all interfaces implemented by the class. The order of the interface objects in the array corresponds to the order of the interface names in the &lt;code&gt;implements&lt;/code&gt; clause of the declaration of the class represented by this object. For example, given the declaration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68a0eb9644f50dfa3365237e48206912657dedee" translate="yes" xml:space="preserve">
          <source>If this object represents a class, the return value is an array containing objects representing all interfaces implemented by the class. The order of the interface objects in the array corresponds to the order of the interface names in the &lt;code&gt;implements&lt;/code&gt; clause of the declaration of the class represented by this object. In the case of an array class, the interfaces &lt;code&gt;Cloneable&lt;/code&gt; and &lt;code&gt;Serializable&lt;/code&gt; are returned in that order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7e1fecec3e1842cf6d0a7c3c48522e500eb7718" translate="yes" xml:space="preserve">
          <source>If this object represents a primitive type or void, null is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="102d58b2bf49f93aca1515c64c4c34bb49821710" translate="yes" xml:space="preserve">
          <source>If this object represents a primitive type or void, the method returns an array of length 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="215f219962b0e236319b5b858d3118667b63b93f" translate="yes" xml:space="preserve">
          <source>If this object represents an interface, the array contains objects representing all interfaces directly extended by the interface. The order of the interface objects in the array corresponds to the order of the interface names in the &lt;code&gt;extends&lt;/code&gt; clause of the declaration of the interface represented by this object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="030be3302e9112b6d0ab9c62370805d7a4c2a90a" translate="yes" xml:space="preserve">
          <source>If this object represents an interface, the array contains objects representing all interfaces extended by the interface. The order of the interface objects in the array corresponds to the order of the interface names in the &lt;code&gt;extends&lt;/code&gt; clause of the declaration of the interface represented by this object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="107c6791019a8d7adff1747d6751033e870c95bb" translate="yes" xml:space="preserve">
          <source>If this object was initialized with a single IP address and one of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c94c2acd246f41a3340bde4e01678205c3f7fa20" translate="yes" xml:space="preserve">
          <source>If this object was not initialized with a single IP address, and one of this object's IP addresses equals one of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c565fa50ed849b3fe574e7e2acaddd76ed6b27d" translate="yes" xml:space="preserve">
          <source>If this object's certificates are not null, then all of this object's certificates must be present in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8a4f359cc185445100b803f449de95a93aa8f07" translate="yes" xml:space="preserve">
          <source>If this object's className is &quot;&lt;code&gt;*&lt;/code&gt;&quot;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a727f9940692bdd710512a875498d902fb56362" translate="yes" xml:space="preserve">
          <source>If this object's file (getLocation().getFile()) doesn't equal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d1575bbfa673d9c98ae1f0a6fbc3c9445cfd46a" translate="yes" xml:space="preserve">
          <source>If this object's host (getLocation().getHost()) is not null, then the SocketPermission constructed with this object's host must imply the SocketPermission constructed with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f93e8a81abaed7c6dfb8d9745b5294f8948ed92f" translate="yes" xml:space="preserve">
          <source>If this object's location (getLocation()) is not null, then the following checks are made against this object's location and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1265a2276f6c2efb4e71acc80c2059bb1488b30c" translate="yes" xml:space="preserve">
          <source>If this object's location equals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="accff77e178dc73cf6d4bfd526487c56cebf9d8d" translate="yes" xml:space="preserve">
          <source>If this object's member is &quot;&lt;code&gt;*&lt;/code&gt;&quot;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72946dcef5d00302973d96c029cfad37ee53b4d4" translate="yes" xml:space="preserve">
          <source>If this object's objectName</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfdbd62eac79913358a6a925e81b8a1c4083d7be" translate="yes" xml:space="preserve">
          <source>If this object's port (getLocation().getPort()) is not equal to -1 (that is, if a port is specified), it must equal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e20be575a118272802cce2851bb247a6c997d8f9" translate="yes" xml:space="preserve">
          <source>If this object's reference (getLocation().getRef()) is not null, it must equal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29a4fac479570251a6b38b322c42aff61644037e" translate="yes" xml:space="preserve">
          <source>If this operation succeeds, the line is marked as open, and an &lt;code&gt;&lt;a href=&quot;lineevent.type#OPEN&quot;&gt;&lt;code&gt;OPEN&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; event is dispatched to the line's listeners.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e693e570c2d3a4cf22cb3f646db70276ee3f3cfe" translate="yes" xml:space="preserve">
          <source>If this option is present then a new file is created, failing if the file already exists or is a symbolic link. When creating a file the check for the existence of the file and the creation of the file if it does not exist is atomic with respect to other file system operations. This option is ignored when the file is opened only for reading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bdcb9ea5fd489f84524729f8084b77cb2a731fb" translate="yes" xml:space="preserve">
          <source>If this option is present then a new file is created, failing if the file already exists. When creating a file the check for the existence of the file and the creation of the file if it does not exist is atomic with respect to other file system operations. This option is ignored when the file is opened only for reading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfedbbbeb7c34fd91e56623eb3a72c083a4274f9" translate="yes" xml:space="preserve">
          <source>If this option is present then an existing file is opened if it exists, otherwise a new file is created. This option is ignored if the &lt;code&gt;CREATE_NEW&lt;/code&gt; option is also present or the file is opened only for reading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65f047e4530eeb8e098678a36747b78cda483f61" translate="yes" xml:space="preserve">
          <source>If this option is present then an existing file is opened if it exists, otherwise a new file is created. When creating a file the check for the existence of the file and the creation of the file if it does not exist is atomic with respect to other file system operations. This option is ignored if the &lt;code&gt;CREATE_NEW&lt;/code&gt; option is also present or the file is opened only for reading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58acc2fa4fe310e68564a49365b12f42e0810bf3" translate="yes" xml:space="preserve">
          <source>If this option is present then the existing file is truncated to a size of 0 bytes. This option is ignored when the file is opened only for reading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7db5f0753fc18eb30790c031e675e1a8c799a37" translate="yes" xml:space="preserve">
          <source>If this option is present then the file is opened for writing and each invocation of the channel's &lt;code&gt;write&lt;/code&gt; method first advances the position to the end of the file and then writes the requested data. Whether the advancement of the position and the writing of the data are done in a single atomic operation is system-dependent and therefore unspecified. This option may not be used in conjunction with the &lt;code&gt;READ&lt;/code&gt; or &lt;code&gt;TRUNCATE_EXISTING&lt;/code&gt; options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fd3aa8f58cf9f02bfcdc80cec86a501a8a7247c" translate="yes" xml:space="preserve">
          <source>If this path has one or more elements, and no root component, then this method is equivalent to evaluating the expression:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30aeff65d6a5437b4b182c4f62c0198083fc0c78" translate="yes" xml:space="preserve">
          <source>If this path is already &lt;a href=&quot;path#isAbsolute--&quot;&gt;&lt;code&gt;absolute&lt;/code&gt;&lt;/a&gt; then this method simply returns this path. Otherwise, this method resolves the path in an implementation dependent manner, typically by resolving the path against a file system default directory. Depending on the implementation, this method may throw an I/O error if the file system is not accessible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c90a56c401bf7a00c5a062ce8dc90f5fbdad860" translate="yes" xml:space="preserve">
          <source>If this path is relative then its absolute path is first obtained, as if by invoking the &lt;a href=&quot;path#toAbsolutePath--&quot;&gt;&lt;code&gt;toAbsolutePath&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cee4ecf521bbf7c48468eb74ea9ed7b0eef09055" translate="yes" xml:space="preserve">
          <source>If this path was created by converting a path string using the &lt;a href=&quot;filesystem#getPath-java.lang.String-java.lang.String...-&quot;&gt;&lt;code&gt;getPath&lt;/code&gt;&lt;/a&gt; method then the path string returned by this method may differ from the original String used to create the path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9f3f316869769c8f30bbf29b48d50988b855cb9" translate="yes" xml:space="preserve">
          <source>If this path was created by invoking the &lt;code&gt;File&lt;/code&gt;&lt;a href=&quot;../../io/file#toPath--&quot;&gt;&lt;code&gt;toPath&lt;/code&gt;&lt;/a&gt; method then there is no guarantee that the &lt;code&gt;File&lt;/code&gt; object returned by this method is &lt;a href=&quot;path#equals-java.lang.Object-&quot;&gt;&lt;code&gt;equal&lt;/code&gt;&lt;/a&gt; to the original &lt;code&gt;File&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2380c1feeac1df8b717ffb6d8b0f464f5c1469c4" translate="yes" xml:space="preserve">
          <source>If this pattern does not match any subsequence of the input then the resulting stream has just one element, namely the input sequence in string form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c129875659d42e8617f0f6fe9f8eeaed922599a" translate="yes" xml:space="preserve">
          <source>If this phaser is a member of a tiered set of phasers, then &lt;code&gt;onAdvance&lt;/code&gt; is invoked only for its root phaser on each advance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25e351e3788079c7fe12a6a6df200389fde78fe7" translate="yes" xml:space="preserve">
          <source>If this plug-in does not allow the rendering size to be set, an &lt;code&gt;UnsupportedOperationException&lt;/code&gt; will be thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59ba1fa4accaead615f724e3c7c028034f29cc41" translate="yes" xml:space="preserve">
          <source>If this property is &lt;code&gt;true&lt;/code&gt;, then any error output generated by subprocesses subsequently started by this object's &lt;a href=&quot;processbuilder#start--&quot;&gt;&lt;code&gt;start()&lt;/code&gt;&lt;/a&gt; method will be merged with the standard output, so that both can be read using the &lt;a href=&quot;process#getInputStream--&quot;&gt;&lt;code&gt;Process.getInputStream()&lt;/code&gt;&lt;/a&gt; method. This makes it easier to correlate error messages with the corresponding output. The initial value is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed9500168343cb56332d4fc88ac168ed027dc4ed" translate="yes" xml:space="preserve">
          <source>If this property is absent, the default size is defined by the mechanism.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06e5e28626bd6eda0b86511efffb808fc70159b4" translate="yes" xml:space="preserve">
          <source>If this property is absent, the default strength is &lt;code&gt;&quot;high,medium,low&quot;&lt;/code&gt;. The value of this constant is &lt;code&gt;&quot;javax.security.sasl.strength&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cc3eda816a77b81a2af6ebc25e493966bcf228c" translate="yes" xml:space="preserve">
          <source>If this property is not specified, the default is determined by the provider.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc49fbf015d08e3eea6e2ecba88f5740773ba2e8" translate="yes" xml:space="preserve">
          <source>If this property is set to &lt;a href=&quot;pack200.packer#TRUE&quot;&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;pack200.packer#FALSE&quot;&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/a&gt;, the packer will set the deflation hint accordingly in the output archive, and will not transmit the individual deflation hints of archive elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d03d5dc13a687142c5929c662ca49d36074a7ded" translate="yes" xml:space="preserve">
          <source>If this property is set to &lt;a href=&quot;pack200.packer#TRUE&quot;&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/a&gt;, the packer will transmit all elements in their original order within the source archive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75f525ec3fc65cfee3f8f241c0b2d719029df8df" translate="yes" xml:space="preserve">
          <source>If this property is set to a single decimal digit, the packer will use the indicated amount of effort in compressing the archive. Level 1 may produce somewhat larger size and faster compression speed, while level 9 will take much longer but may produce better compression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c26004343d49f4de62b441eeb8bc5f6df79863d9" translate="yes" xml:space="preserve">
          <source>If this property is set to the special string &lt;a href=&quot;pack200.packer#KEEP&quot;&gt;&lt;code&gt;KEEP&lt;/code&gt;&lt;/a&gt;, the packer transmits a separate modification time for each input element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7183fc1cd09c99a8f2ef588139d7494408411a2c" translate="yes" xml:space="preserve">
          <source>If this property is set to the special string &lt;a href=&quot;pack200.packer#KEEP&quot;&gt;&lt;code&gt;KEEP&lt;/code&gt;&lt;/a&gt;, the packer will attempt to determine an independent deflation hint for each available element of the input archive, and transmit this hint separately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6707f281e27f03d84f3a7a3c629cdd4096bad1c7" translate="yes" xml:space="preserve">
          <source>If this property is set to the special string &lt;a href=&quot;pack200.packer#LATEST&quot;&gt;&lt;code&gt;LATEST&lt;/code&gt;&lt;/a&gt;, the packer will attempt to determine the latest modification time, among all the available entries in the original archive or the latest modification time of all the available entries in each segment. This single value will be transmitted as part of the segment and applied to all the entries in each segment, &lt;a href=&quot;pack200.packer#SEGMENT_LIMIT&quot;&gt;&lt;code&gt;SEGMENT_LIMIT&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="223580f4429eb5c6ae28663e207c1e32ba4d790d" translate="yes" xml:space="preserve">
          <source>If this provider does not support the creation of such file systems or if the provider does not recognize the file type of the given file then it throws &lt;code&gt;UnsupportedOperationException&lt;/code&gt;. The default implementation of this method throws &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adebdb1d5e5973bafb9cf6145ce5e6e780e19399" translate="yes" xml:space="preserve">
          <source>If this queue fits in the specified array with room to spare (i.e., the array has more elements than this queue), the element in the array immediately following the end of the queue is set to &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cc39709616b45493aeca7f5e8ac69e5cb52f845" translate="yes" xml:space="preserve">
          <source>If this scanner has not yet been closed then if its underlying &lt;a href=&quot;../lang/readable&quot;&gt;readable&lt;/a&gt; also implements the &lt;a href=&quot;../io/closeable&quot;&gt;&lt;code&gt;Closeable&lt;/code&gt;&lt;/a&gt; interface then the readable's &lt;code&gt;close&lt;/code&gt; method will be invoked. If this scanner is already closed then invoking this method will have no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a15e47874a4460c8788d8fab1f7c5d6bc3952dd3" translate="yes" xml:space="preserve">
          <source>If this selector is already closed then invoking this method has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6405daa2c069d6b40d10358e7bb77371faa4a3a2" translate="yes" xml:space="preserve">
          <source>If this set fits in the specified array with room to spare (i.e., the array has more elements than this set), the element in the array immediately following the end of the set is set to &lt;code&gt;null&lt;/code&gt;. (This is useful in determining the length of this set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c80184b3688b04badc083e61b15fdf0059d3f2c1" translate="yes" xml:space="preserve">
          <source>If this set makes any guarantees as to what order its elements are returned by its iterator, this method must return the elements in the same order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94d1259b873602b3b91dfea6d2c8e9566dd609a2" translate="yes" xml:space="preserve">
          <source>If this socket has an associated channel then the channel is closed as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0939c800f0a2312fef33d7c5d500964dbec69f2" translate="yes" xml:space="preserve">
          <source>If this socket has an associated channel then the resulting input stream delegates all of its operations to the channel. If the channel is in non-blocking mode then the input stream's &lt;code&gt;read&lt;/code&gt; operations will throw an &lt;a href=&quot;../nio/channels/illegalblockingmodeexception&quot;&gt;&lt;code&gt;IllegalBlockingModeException&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7ee7bd8c081806387ada503ad7b8c514e5dfac1" translate="yes" xml:space="preserve">
          <source>If this socket has an associated channel then the resulting output stream delegates all of its operations to the channel. If the channel is in non-blocking mode then the output stream's &lt;code&gt;write&lt;/code&gt; operations will throw an &lt;a href=&quot;../nio/channels/illegalblockingmodeexception&quot;&gt;&lt;code&gt;IllegalBlockingModeException&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="693a1800e76c5ac59beead537e01064ff0c4be28" translate="yes" xml:space="preserve">
          <source>If this spliterator can be partitioned, returns a Spliterator covering elements, that will, upon return from this method, not be covered by this Spliterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c735b11df0039877353011e334fc443d166561ca" translate="yes" xml:space="preserve">
          <source>If this stream has an associated channel then the channel is closed as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92d68b98e0019a083095ba0519f2ddd9fb22048a" translate="yes" xml:space="preserve">
          <source>If this stream was created from an enumeration, all remaining elements are requested from the enumeration and closed before the &lt;code&gt;close&lt;/code&gt; method returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d83610308e8ed4feab83660c34b5cc784dbd534" translate="yes" xml:space="preserve">
          <source>If this task does not have a completer, invokes &lt;a href=&quot;forkjointask#quietlyComplete--&quot;&gt;&lt;code&gt;ForkJoinTask.quietlyComplete()&lt;/code&gt;&lt;/a&gt; and returns &lt;code&gt;null&lt;/code&gt;. Or, if the completer's pending count is non-zero, decrements that pending count and returns &lt;code&gt;null&lt;/code&gt;. Otherwise, returns the completer. This method can be used as part of a completion traversal loop for homogeneous task hierarchies:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd12cf42083780739c6a825c0d630d6b5ba9cfcf" translate="yes" xml:space="preserve">
          <source>If this task has not completed, attempts to process at most the given number of other unprocessed tasks for which this task is on the completion path, if any are known to exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="062c4f45b9bcf8888c66111d88b0a6efdd255e64" translate="yes" xml:space="preserve">
          <source>If this task's pending count is zero, returns this task; otherwise decrements its pending count and returns &lt;code&gt;null&lt;/code&gt;. This method is designed to be used with &lt;a href=&quot;countedcompleter#nextComplete--&quot;&gt;&lt;code&gt;nextComplete()&lt;/code&gt;&lt;/a&gt; in completion traversal loops.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37210489834346fdfa0ada349e6c4f85f2e096b6" translate="yes" xml:space="preserve">
          <source>If this thread group has a parent thread group, the &lt;code&gt;uncaughtException&lt;/code&gt; method of that parent is called with the same two arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="136205f825397c64ddc73f65dffe39be30ff4a5a" translate="yes" xml:space="preserve">
          <source>If this thread is blocked in a &lt;a href=&quot;../nio/channels/selector&quot;&gt;&lt;code&gt;Selector&lt;/code&gt;&lt;/a&gt; then the thread's interrupt status will be set and it will return immediately from the selection operation, possibly with a non-zero value, just as if the selector's &lt;a href=&quot;../nio/channels/selector#wakeup--&quot;&gt;&lt;code&gt;wakeup&lt;/code&gt;&lt;/a&gt; method were invoked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de3aec7f5e3ea72da2979ae96ca609512aa7e1ac" translate="yes" xml:space="preserve">
          <source>If this thread is blocked in an I/O operation upon an &lt;a href=&quot;../nio/channels/interruptiblechannel&quot;&gt;&lt;code&gt;InterruptibleChannel&lt;/code&gt;&lt;/a&gt; then the channel will be closed, the thread's interrupt status will be set, and the thread will receive a &lt;a href=&quot;../nio/channels/closedbyinterruptexception&quot;&gt;&lt;code&gt;ClosedByInterruptException&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f7e022d7d703785a470b724182da4d83682bbf3" translate="yes" xml:space="preserve">
          <source>If this thread is blocked in an invocation of the &lt;a href=&quot;object#wait--&quot;&gt;&lt;code&gt;wait()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;object#wait-long-&quot;&gt;&lt;code&gt;wait(long)&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;object#wait-long-int-&quot;&gt;&lt;code&gt;wait(long, int)&lt;/code&gt;&lt;/a&gt; methods of the &lt;a href=&quot;object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt; class, or of the &lt;a href=&quot;thread#join--&quot;&gt;&lt;code&gt;join()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;thread#join-long-&quot;&gt;&lt;code&gt;join(long)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;thread#join-long-int-&quot;&gt;&lt;code&gt;join(long, int)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;thread#sleep-long-&quot;&gt;&lt;code&gt;sleep(long)&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;thread#sleep-long-int-&quot;&gt;&lt;code&gt;sleep(long, int)&lt;/code&gt;&lt;/a&gt;, methods of this class, then its interrupt status will be cleared and it will receive an &lt;a href=&quot;interruptedexception&quot;&gt;&lt;code&gt;InterruptedException&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dee04fe29a564110a8edc14c833afd51b71a8fd" translate="yes" xml:space="preserve">
          <source>If this thread is different from the current thread (that is, the current thread is trying to stop a thread other than itself), the security manager's &lt;code&gt;checkPermission&lt;/code&gt; method (with a &lt;code&gt;RuntimePermission(&quot;stopThread&quot;)&lt;/code&gt; argument) is called in addition. Again, this may result in throwing a &lt;code&gt;SecurityException&lt;/code&gt; (in the current thread).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eb1caff0d211bf12bda29597feac8eecc8df201" translate="yes" xml:space="preserve">
          <source>If this thread was constructed using a separate &lt;code&gt;Runnable&lt;/code&gt; run object, then that &lt;code&gt;Runnable&lt;/code&gt; object's &lt;code&gt;run&lt;/code&gt; method is called; otherwise, this method does nothing and returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1036a7dd624514ec464cb770020aa6e61ea13a75" translate="yes" xml:space="preserve">
          <source>If this type is a top-level type, &lt;code&gt;null&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e08bb6c116e1da83b9d529a037838f86be336252" translate="yes" xml:space="preserve">
          <source>If this type variable was declared with no explicit upper bounds, the result is &lt;code&gt;java.lang.Object&lt;/code&gt;. If it was declared with multiple upper bounds, the result is an &lt;a href=&quot;intersectiontype&quot;&gt;intersection type&lt;/a&gt;; individual bounds can be found by examining the result's &lt;a href=&quot;intersectiontype#getBounds--&quot;&gt;bounds&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acbf944d3989fe8aba9f6f6ea4080273b18cb6ee" translate="yes" xml:space="preserve">
          <source>If this virtual machine has a console then it is represented by a unique instance of this class which can be obtained by invoking the &lt;a href=&quot;../lang/system#console--&quot;&gt;&lt;code&gt;System.console()&lt;/code&gt;&lt;/a&gt; method. If no console device is available then an invocation of that method will return &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfb30c4d00faeeb962ddb4c865ecf63132c1c820" translate="yes" xml:space="preserve">
          <source>If this watch key has already been cancelled then invoking this method has no effect. Once cancelled, a watch key remains forever invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67ae0cc16c031b634fcbfcefd9879a42a332defc" translate="yes" xml:space="preserve">
          <source>If this watch key has been cancelled or this watch key is already in the ready state then invoking this method has no effect. Otherwise if there are pending events for the object then this watch key is immediately re-queued to the watch service. If there are no pending events then the watch key is put into the ready state and will remain in that state until an event is detected or the watch key is cancelled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc96c97802231f3c6be6068b9e85703f581d32c1" translate="yes" xml:space="preserve">
          <source>If this write lock is not held when any &lt;a href=&quot;condition&quot;&gt;&lt;code&gt;Condition&lt;/code&gt;&lt;/a&gt; method is called then an &lt;a href=&quot;../../../lang/illegalmonitorstateexception&quot;&gt;&lt;code&gt;IllegalMonitorStateException&lt;/code&gt;&lt;/a&gt; is thrown. (Read locks are held independently of write locks, so are not checked or affected. However it is essentially always an error to invoke a condition waiting method when the current thread has also acquired read locks, since other threads that could unblock it will not be able to acquire the write lock.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f79e63814e29ed4746eb250848d65b14d8ed57d" translate="yes" xml:space="preserve">
          <source>If timed out while blocked in step 4, return false, else true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac1483298083f3abb8afa0f1aa85d3e5075f14df" translate="yes" xml:space="preserve">
          <source>If true, the proxy is for an MXBean, and appropriate mappings are applied to method parameters and return values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b514e3ca049e844626b929e4397fb69536176a9" translate="yes" xml:space="preserve">
          <source>If two MBeanInfo objects return the same values in one of their arrays but in a different order then they are not equal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3de416a161d2a7eece4b7d623902e09f45d1ac1a" translate="yes" xml:space="preserve">
          <source>If two Permission objects are equal according to the &lt;code&gt;equals&lt;/code&gt; method, then calling the &lt;code&gt;hashCode&lt;/code&gt; method on each of the two Permission objects must produce the same integer result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0a883ac4c9f090a20d5a7c637148cd5c404124c" translate="yes" xml:space="preserve">
          <source>If two instances of &lt;code&gt;Random&lt;/code&gt; are created with the same seed, and the same sequence of method calls is made for each, they will generate and return identical sequences of numbers. In order to guarantee this property, particular algorithms are specified for the class &lt;code&gt;Random&lt;/code&gt;. Java implementations must use all the algorithms shown here for the class &lt;code&gt;Random&lt;/code&gt;, for the sake of absolute portability of Java code. However, subclasses of class &lt;code&gt;Random&lt;/code&gt; are permitted to use other algorithms, so long as they adhere to the general contracts for all the methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0375c976322546dce1a4576dbb74510f34a3ade" translate="yes" xml:space="preserve">
          <source>If two methods produce the same item name (for example, &lt;code&gt;getOwner&lt;/code&gt; and &lt;code&gt;isOwner&lt;/code&gt;, or &lt;code&gt;getOwner&lt;/code&gt; and &lt;code&gt;getowner&lt;/code&gt;) then the type is not convertible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cea1bcc2545da2681608af0aef2a71633ab2ff67" translate="yes" xml:space="preserve">
          <source>If two objects are equal according to the &lt;code&gt;equals(Object)&lt;/code&gt; method, then calling the &lt;code&gt;hashCode&lt;/code&gt; method on each of the two objects must produce the same integer result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70c98c2264176024b5b44e24255d881ddec4b3f0" translate="yes" xml:space="preserve">
          <source>If user information is given then it is appended, followed by a commercial-at character (&lt;code&gt;'@'&lt;/code&gt;). Any character not in the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39dd44621dc4e48c6ce7a185460bfc4a326f4e14" translate="yes" xml:space="preserve">
          <source>If user information, a host, or a port are given then the string &lt;code&gt;&quot;//&quot;&lt;/code&gt; is appended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4992c99e0e1791dc3d662a55a95e751e859f3fe7" translate="yes" xml:space="preserve">
          <source>If we don't find explicit BeanInfo on a class, we use low-level reflection to study the methods of the class and apply standard design patterns to identify property accessors, event sources, or public methods. We then proceed to analyze the class's superclass and add in the information from it (and possibly on up the superclass chain).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="249f1ecd847d4ff837d620f68c34ba098b73ce31" translate="yes" xml:space="preserve">
          <source>If we wanted to create a collector to tabulate the sum of salaries by department, we could reuse the &quot;sum of salaries&quot; logic using &lt;a href=&quot;collectors#groupingBy-java.util.function.Function-java.util.stream.Collector-&quot;&gt;&lt;code&gt;Collectors.groupingBy(Function, Collector)&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26d7e844a9f8459934217a70e48f27af2b1b69c5" translate="yes" xml:space="preserve">
          <source>If we wanted to take a stream of strings and concatenate them into a single long string, we &lt;em&gt;could&lt;/em&gt; achieve this with ordinary reduction:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75d993d59371bab20ce135584545b17525307c4a" translate="yes" xml:space="preserve">
          <source>If week year &lt;code&gt;'Y'&lt;/code&gt; is specified and the &lt;a href=&quot;dateformat#getCalendar--&quot;&gt;calendar&lt;/a&gt; doesn't support any &lt;a href=&quot;../util/gregoriancalendar#week_year&quot;&gt; week years&lt;/a&gt;, the calendar year (&lt;code&gt;'y'&lt;/code&gt;) is used instead. The support of week years can be tested with a call to &lt;a href=&quot;dateformat#getCalendar--&quot;&gt;&lt;code&gt;getCalendar()&lt;/code&gt;&lt;/a&gt;.&lt;a href=&quot;../util/calendar#isWeekDateSupported--&quot;&gt;&lt;code&gt;isWeekDateSupported()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e787fae525d53f984b40c242326308dcc608cfbc" translate="yes" xml:space="preserve">
          <source>If writeObject is used to write an object that has been previously written with writeUnshared, the previous writeUnshared operation is treated as if it were a write of a separate object. In other words, ObjectOutputStream will never generate back-references to object data written by calls to writeUnshared.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33329ee24831b4b830806a0df21b74b91fbe2bdb" translate="yes" xml:space="preserve">
          <source>If you are formatting multiple dates, it is more efficient to get the format and use it multiple times so that the system doesn't have to fetch the information about the local language and country conventions multiple times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd1b56a949a2d40e2ef6096bec1333c2fcd9c70c" translate="yes" xml:space="preserve">
          <source>If you are formatting multiple numbers, it is more efficient to get the format and use it multiple times so that the system doesn't have to fetch the information about the local language and country conventions multiple times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbc79913bd626004719fe8514d3567201aed1ed4" translate="yes" xml:space="preserve">
          <source>If you are interested in the positions of all attributes in the formatted string use the &lt;code&gt;Format&lt;/code&gt; method &lt;code&gt;formatToCharacterIterator&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4facb91de8b32639ccf8a84b652bd430e83444a" translate="yes" xml:space="preserve">
          <source>If you are using a monospaced font with spacing for alignment, you can pass the &lt;code&gt;FieldPosition&lt;/code&gt; in your format call, with &lt;code&gt;field&lt;/code&gt; = &lt;code&gt;INTEGER_FIELD&lt;/code&gt;. On output, &lt;code&gt;getEndIndex&lt;/code&gt; will be set to the offset between the last character of the integer and the decimal. Add (desiredSpaceCount - getEndIndex) spaces at the front of the string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9406e93ec5832fb57d51414b10aab81a761c42ae" translate="yes" xml:space="preserve">
          <source>If you are using proportional fonts, instead of padding with spaces, measure the width of the string in pixels from the start to &lt;code&gt;getEndIndex&lt;/code&gt;. Then move the pen by (desiredPixelWidth - widthToAlignmentPoint) before drawing the text. It also works where there is no decimal, but possibly additional characters at the end, e.g., with parentheses in negative numbers: &quot;(12)&quot; for -12.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f106737aef6a81a4054543d7f78f0e7b7a5e9c4" translate="yes" xml:space="preserve">
          <source>If you decide to create a date-time formatter with a specific format pattern for a specific locale, you can do so with:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a64ac8c1421bcee0c93f8d4f878d8ecbf3d1a551" translate="yes" xml:space="preserve">
          <source>If you have an MBean Server &lt;code&gt;mbs&lt;/code&gt; containing an MBean with &lt;a href=&quot;objectname&quot;&gt;&lt;code&gt;ObjectName&lt;/code&gt;&lt;/a&gt;&lt;code&gt;name&lt;/code&gt;, and if the MBean's management interface is described by the Java interface &lt;code&gt;MyMBean&lt;/code&gt;, you can construct a proxy for the MBean like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88dcf89fa7f0531902cdd760892b5fd0c5d30465" translate="yes" xml:space="preserve">
          <source>If you have an MBean Server &lt;code&gt;mbs&lt;/code&gt; containing an MXBean with &lt;a href=&quot;objectname&quot;&gt;&lt;code&gt;ObjectName&lt;/code&gt;&lt;/a&gt;&lt;code&gt;name&lt;/code&gt;, and if the MXBean's management interface is described by the Java interface &lt;code&gt;MyMXBean&lt;/code&gt;, you can construct a proxy for the MXBean like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeeadc6bd76712b1cf5b57f384a18bfbf8ff9346" translate="yes" xml:space="preserve">
          <source>If you have an MBeanPermission, it allows operations only if all four of the items match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcf357f105ce4230844a06dba35ba909423f4aa5" translate="yes" xml:space="preserve">
          <source>If you have an RMI stub of type &lt;a href=&quot;rmiserver&quot;&gt;&lt;code&gt;RMIServer&lt;/code&gt;&lt;/a&gt;, you can construct an RMI connection directly by using the appropriate constructor of &lt;a href=&quot;rmiconnector&quot;&gt;&lt;code&gt;RMIConnector&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42e51cf36b22f71cae737ff0a604aab0e89fa946" translate="yes" xml:space="preserve">
          <source>If you make an MXBean proxy for a &lt;code&gt;ModuleMXBean&lt;/code&gt; and call its &lt;code&gt;getProduct()&lt;/code&gt; method, the proxy will map the &lt;code&gt;ObjectName&lt;/code&gt; back into a &lt;code&gt;ProductMXBean&lt;/code&gt; by making another MXBean proxy. More formally, when a proxy made with &lt;a href=&quot;jmx#newMXBeanProxy-javax.management.MBeanServerConnection-javax.management.ObjectName-java.lang.Class-&quot;&gt;&lt;code&gt;JMX.newMXBeanProxy(mbeanServerConnection, objectNameX,
      interfaceX)&lt;/code&gt;&lt;/a&gt; needs to map &lt;code&gt;objectNameY&lt;/code&gt; back into &lt;code&gt;interfaceY&lt;/code&gt;, another MXBean interface, it does so with &lt;code&gt;JMX.newMXBeanProxy(mbeanServerConnection, objectNameY,
      interfaceY)&lt;/code&gt;. The implementation may return a proxy that was previously created by a call to &lt;code&gt;JMX.newMXBeanProxy&lt;/code&gt; with the same parameters, or it may create a new proxy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36de616fe3a9de0652b022e0f4521a1bc90414b1" translate="yes" xml:space="preserve">
          <source>If you make an MXBean proxy for a &lt;code&gt;ModuleMXBean&lt;/code&gt; and call its &lt;code&gt;setProduct&lt;/code&gt; method, the proxy will map its &lt;code&gt;ProductMXBean&lt;/code&gt; argument back into an &lt;code&gt;ObjectName&lt;/code&gt;. This will only work if the argument is in fact another proxy, for a &lt;code&gt;ProductMXBean&lt;/code&gt; in the same &lt;code&gt;MBeanServerConnection&lt;/code&gt;. The proxy can have been returned from another proxy (like &lt;code&gt;ModuleMXBean.getProduct()&lt;/code&gt; which returns a proxy for a &lt;code&gt;ProductMXBean&lt;/code&gt;); or it can have been created by &lt;a href=&quot;jmx#newMXBeanProxy-javax.management.MBeanServerConnection-javax.management.ObjectName-java.lang.Class-&quot;&gt;&lt;code&gt;JMX.newMXBeanProxy&lt;/code&gt;&lt;/a&gt;; or it can have been created using &lt;a href=&quot;../../java/lang/reflect/proxy&quot;&gt;&lt;code&gt;Proxy&lt;/code&gt;&lt;/a&gt; with an invocation handler that is &lt;a href=&quot;mbeanserverinvocationhandler&quot;&gt;&lt;code&gt;MBeanServerInvocationHandler&lt;/code&gt;&lt;/a&gt; or a subclass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e2b53ae02293acead2a531e5c995698a3d635fc" translate="yes" xml:space="preserve">
          <source>If you need (or choose) to provide a persistence delegate for a bean, you can do so either by using a &lt;a href=&quot;defaultpersistencedelegate&quot;&gt;&lt;code&gt;DefaultPersistenceDelegate&lt;/code&gt;&lt;/a&gt; instance or by creating your own subclass of &lt;code&gt;PersistenceDelegate&lt;/code&gt;. If the only reason a bean needs a persistence delegate is because you want to invoke the bean's constructor with property values as arguments, you can create the bean's persistence delegate with the one-argument &lt;code&gt;DefaultPersistenceDelegate&lt;/code&gt; constructor. Otherwise, you need to implement your own persistence delegate, for which you're likely to need the following classes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f489d4a0e8c62f4faa7fab289ad65258b11c6f2" translate="yes" xml:space="preserve">
          <source>If you need to return a value, you can do something like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8c2b1b32a99074d0ed797e0b2d27a5393d1b97c" translate="yes" xml:space="preserve">
          <source>If you override this method, then you should make a call to &lt;code&gt;super.checkAccept&lt;/code&gt; at the point the overridden method would normally throw an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32a163e4193ac982fc24cb8d0e24b6ff2e92df6b" translate="yes" xml:space="preserve">
          <source>If you override this method, then you should make a call to &lt;code&gt;super.checkAwtEventQueueAccess&lt;/code&gt; at the point the overridden method would normally throw an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b0bf23ffdb875cb462ac3762bf0b0f61436b578" translate="yes" xml:space="preserve">
          <source>If you override this method, then you should make a call to &lt;code&gt;super.checkConnect&lt;/code&gt; at the point the overridden method would normally throw an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b25c342fd63139aa40f0f94857b7bcc782f9565" translate="yes" xml:space="preserve">
          <source>If you override this method, then you should make a call to &lt;code&gt;super.checkCreateClassLoader&lt;/code&gt; at the point the overridden method would normally throw an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c89616b32751c00600ebd3ccc8535ec049f9fdfa" translate="yes" xml:space="preserve">
          <source>If you override this method, then you should make a call to &lt;code&gt;super.checkDelete&lt;/code&gt; at the point the overridden method would normally throw an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d275b056a9090e158c634d81a08838570939532f" translate="yes" xml:space="preserve">
          <source>If you override this method, then you should make a call to &lt;code&gt;super.checkExec&lt;/code&gt; at the point the overridden method would normally throw an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fad4004790324c59ba0ed5dd06d44da82aaedda" translate="yes" xml:space="preserve">
          <source>If you override this method, then you should make a call to &lt;code&gt;super.checkExit&lt;/code&gt; at the point the overridden method would normally throw an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efcc6f30743e16455930171e5a781be9f204238f" translate="yes" xml:space="preserve">
          <source>If you override this method, then you should make a call to &lt;code&gt;super.checkLink&lt;/code&gt; at the point the overridden method would normally throw an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e6877a896c1d32e57ba90da2c55b2663b1b78ec" translate="yes" xml:space="preserve">
          <source>If you override this method, then you should make a call to &lt;code&gt;super.checkListen&lt;/code&gt; at the point the overridden method would normally throw an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4d26672886acca0d759af04d237b7c1efbe698e" translate="yes" xml:space="preserve">
          <source>If you override this method, then you should make a call to &lt;code&gt;super.checkMulticast&lt;/code&gt; at the point the overridden method would normally throw an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="251fab6eb9acffef8859edc74b706798e78e6e8b" translate="yes" xml:space="preserve">
          <source>If you override this method, then you should make a call to &lt;code&gt;super.checkPrintJobAccess&lt;/code&gt; at the point the overridden method would normally throw an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e10ad25cab0f05b0222d29bd5e36927db4eeb6b2" translate="yes" xml:space="preserve">
          <source>If you override this method, then you should make a call to &lt;code&gt;super.checkPropertiesAccess&lt;/code&gt; at the point the overridden method would normally throw an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a86588c85e4d6399731a04d49863896ed2dc3e28" translate="yes" xml:space="preserve">
          <source>If you override this method, then you should make a call to &lt;code&gt;super.checkPropertyAccess&lt;/code&gt; at the point the overridden method would normally throw an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa5bed7cbc4197994e6709d36a446566db9ba266" translate="yes" xml:space="preserve">
          <source>If you override this method, then you should make a call to &lt;code&gt;super.checkRead&lt;/code&gt; at the point the overridden method would normally throw an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d57848509497be814c85001e6b95b9646bffc2a" translate="yes" xml:space="preserve">
          <source>If you override this method, then you should make a call to &lt;code&gt;super.checkSecurityAccess&lt;/code&gt; at the point the overridden method would normally throw an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eebab1fb31a31734e30e41e1327c09607085023c" translate="yes" xml:space="preserve">
          <source>If you override this method, then you should make a call to &lt;code&gt;super.checkSetFactory&lt;/code&gt; at the point the overridden method would normally throw an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2401855174b74221644d242d6cb2acd443f9052" translate="yes" xml:space="preserve">
          <source>If you override this method, then you should make a call to &lt;code&gt;super.checkSystemClipboardAccess&lt;/code&gt; at the point the overridden method would normally throw an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d59d3d943d86eedf5cde305b53f409a81429ea16" translate="yes" xml:space="preserve">
          <source>If you override this method, then you should make a call to &lt;code&gt;super.checkTopLevelWindow&lt;/code&gt; at the point the overridden method would normally return &lt;code&gt;false&lt;/code&gt;, and the value of &lt;code&gt;super.checkTopLevelWindow&lt;/code&gt; should be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cecc78a2cd42444c250869d1b1fffc199c4eb79" translate="yes" xml:space="preserve">
          <source>If you override this method, then you should make a call to &lt;code&gt;super.checkWrite&lt;/code&gt; at the point the overridden method would normally throw an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b77207df3b1139f3ea68a88d7c6de19a281d70e" translate="yes" xml:space="preserve">
          <source>If you produce one of these errors, a &lt;code&gt;RuleBasedCollator&lt;/code&gt; throws a &lt;code&gt;ParseException&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6f41edec5bd75c329a95672b206803463bfa5e8" translate="yes" xml:space="preserve">
          <source>If you read from a socket input stream after invoking this method on the socket, the stream's &lt;code&gt;available&lt;/code&gt; method will return 0, and its &lt;code&gt;read&lt;/code&gt; methods will return &lt;code&gt;-1&lt;/code&gt; (end of stream).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9adc7053a82a501abb4cad7dc21865d522ec6e09" translate="yes" xml:space="preserve">
          <source>If you simply need to pass a known MIDI byte value as a method parameter, it can be expressed directly as an integer, using (for example) decimal or hexadecimal notation. For instance, to pass the &quot;active sensing&quot; status byte as the first argument to ShortMessage's &lt;a href=&quot;shortmessage#setMessage-int-&quot;&gt;&lt;code&gt;setMessage(int)&lt;/code&gt;&lt;/a&gt; method, you can express it as 254 or 0xFE.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe1b642d6abf000e5a6aebbe484690cdcc9c2881" translate="yes" xml:space="preserve">
          <source>If you would like to immediately block waiting for a task, you can use constructions of the form &lt;code&gt;result = exec.submit(aCallable).get();&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0817bc0b871977b1a8c9e94b1ef78e8841f5ed3c" translate="yes" xml:space="preserve">
          <source>If, after possible unwrapping, the new value cannot be converted to the type of the underlying field by an identity or widening conversion, the method throws an &lt;code&gt;IllegalArgumentException&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24cfa618cbc5961c88abb6321f352d54db94f655" translate="yes" xml:space="preserve">
          <source>If, after processing, the locale would exactly match either ja_JP_JP or th_TH_TH with no extensions, the appropriate extensions are added as though the constructor had been called:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c08f223dd80703077dada0f83d9b60721b452cd" translate="yes" xml:space="preserve">
          <source>If, if the address is &lt;code&gt;null&lt;/code&gt;, creates an unbound socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7a3944583d471c07a700e6fff18fb04ba3825df" translate="yes" xml:space="preserve">
          <source>If, when the adapter is called, the supplied array argument does not have the correct number of elements, the adapter will throw an &lt;a href=&quot;../illegalargumentexception&quot;&gt;&lt;code&gt;IllegalArgumentException&lt;/code&gt;&lt;/a&gt; instead of invoking the target.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50a53d6760e4f33109326a6a1af782ed05797935" translate="yes" xml:space="preserve">
          <source>If:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21847df5c5cb4e7672a041f56f6d078037fceb03" translate="yes" xml:space="preserve">
          <source>IllegalAccessError</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd91bcefa6284f552972a0be97fee45225f084db" translate="yes" xml:space="preserve">
          <source>IllegalAccessException</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07762b664ab5db9b2429f8c1a03a6fdc3ea71fdc" translate="yes" xml:space="preserve">
          <source>IllegalAccessException &amp;mdash; if the member exists but an access check fails</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea0b39c7ffc510626fe28212437d8a57285e5a4c" translate="yes" xml:space="preserve">
          <source>IllegalArgumentException</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cba9941f37a9bb4e09bf14b74224997efa1538b" translate="yes" xml:space="preserve">
          <source>IllegalBlockSizeException</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72bee4f060e1046316b9d9208f43a1e30f093b56" translate="yes" xml:space="preserve">
          <source>IllegalBlockingModeException</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="728ba9e6dd595a3196c4ac4b622b54d1c837df50" translate="yes" xml:space="preserve">
          <source>IllegalChannelGroupException</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08856e863e3820d0924f3ef1be4b809519443035" translate="yes" xml:space="preserve">
          <source>IllegalCharsetNameException</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ee77982e6e3d907bbc5b59a832da5d3e0e28e63" translate="yes" xml:space="preserve">
          <source>IllegalCharsetNameException.getCharsetName()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f2717d0b8f564968056d35a3e99daf87783976b" translate="yes" xml:space="preserve">
          <source>IllegalClassFormatException</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e88f78ae51e3f9d1be0762af4b7ca8e8f11f783" translate="yes" xml:space="preserve">
          <source>IllegalFormatCodePointException</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01e9b728feda93c0804cfc60551e0a73ac67cb23" translate="yes" xml:space="preserve">
          <source>IllegalFormatCodePointException.getCodePoint()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b58e3a3bb89019a4239ddcc347dd9da221bd439c" translate="yes" xml:space="preserve">
          <source>IllegalFormatCodePointException.getMessage()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf694920d369177ecd98f05c63ceccfd014dfb3a" translate="yes" xml:space="preserve">
          <source>IllegalFormatConversionException</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2af42e8201376b34c77bc1352974c64f68a5c82" translate="yes" xml:space="preserve">
          <source>IllegalFormatConversionException.getArgumentClass()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93cfe6fd63a97ee0cb039d0f535c1bec0f8381bb" translate="yes" xml:space="preserve">
          <source>IllegalFormatConversionException.getConversion()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32267ab7467ebe1517e9a90793fb60edfa337c8f" translate="yes" xml:space="preserve">
          <source>IllegalFormatConversionException.getMessage()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fc8f0163cbca539149d1e776e01d43e638d91f1" translate="yes" xml:space="preserve">
          <source>IllegalFormatException</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c860a8ffb590545dad947d6d0a32f4306f0b6669" translate="yes" xml:space="preserve">
          <source>IllegalFormatFlagsException</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d2373c99c0c78d388f5d343129d99c232ecdb83" translate="yes" xml:space="preserve">
          <source>IllegalFormatFlagsException.getFlags()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64c3da34100c4721209bf9cd2b15ee2ec4a71d99" translate="yes" xml:space="preserve">
          <source>IllegalFormatFlagsException.getMessage()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b3fb4fc418e6c049903e5b64d9f8e8768116ade" translate="yes" xml:space="preserve">
          <source>IllegalFormatPrecisionException</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4906b7cf69fa0eca0016b6d9e6fa7ee8fa52cb68" translate="yes" xml:space="preserve">
          <source>IllegalFormatPrecisionException.getMessage()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8b90130a9087589e9ccb2175b557399069a72e1" translate="yes" xml:space="preserve">
          <source>IllegalFormatPrecisionException.getPrecision()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="150579129307b1603edaa8afafecdfc747707a0c" translate="yes" xml:space="preserve">
          <source>IllegalFormatWidthException</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1a5b579faf7cca9bf3f94878c79fb0f475cf233" translate="yes" xml:space="preserve">
          <source>IllegalFormatWidthException.getMessage()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f52f453c1c984aec8936f3217284e6377d96c69" translate="yes" xml:space="preserve">
          <source>IllegalFormatWidthException.getWidth()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32d0389d11053deed8d75849534640e819bb4527" translate="yes" xml:space="preserve">
          <source>IllegalMonitorStateException</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9bfc30e12d08117404111c4265dd4ec5ebc94c4" translate="yes" xml:space="preserve">
          <source>IllegalSelectorException</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63b3abc14a5b2c9db143083b94887cb72910c4de" translate="yes" xml:space="preserve">
          <source>IllegalStateException</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac921dc0ca27355ce8a5b55265b8b7ba05f069f0" translate="yes" xml:space="preserve">
          <source>IllegalThreadStateException</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e967f0136e45172f483f99e3bfebb380a3980435" translate="yes" xml:space="preserve">
          <source>IllformedLocaleException</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d9fd3af220073c500b086cc9fbdcb26786c4326" translate="yes" xml:space="preserve">
          <source>IllformedLocaleException.getErrorIndex()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e221fe5a3e6f4ff124e28b73d70e7afa9ab3f313" translate="yes" xml:space="preserve">
          <source>Image Types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cfa0ee34d7252ba885e40e3d0bae9b6168fffbc" translate="yes" xml:space="preserve">
          <source>ImageIO</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb08904deaf392352762e63593d408f30ad7592f" translate="yes" xml:space="preserve">
          <source>ImageIO provides &lt;code&gt;ImageReader&lt;/code&gt; and &lt;code&gt;ImageWriter&lt;/code&gt; plug-ins for the &lt;a href=&quot;http://www.w3.org/Graphics/GIF/spec-gif89a.txt&quot;&gt; Graphics Interchange Format (GIF)&lt;/a&gt; image format. These are the &quot;standard&quot; GIF plug-ins, meaning those that are included in the JRE, as distinct from those included in standard extensions, or 3rd party plug-ins. The following notes and metadata specification apply to the standard plug-ins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da7c9851db149fedc74fd958b51bbff7e3c3e4cb" translate="yes" xml:space="preserve">
          <source>ImageIO.createImageInputStream()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c95c8213476c7bf7c6e8cd2a4156f6aad06b2ede" translate="yes" xml:space="preserve">
          <source>ImageIO.createImageOutputStream()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09fd3c3ef36b3e3b4e27a58c340ac1498c852811" translate="yes" xml:space="preserve">
          <source>ImageIO.getCacheDirectory()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8d56c96a5e032b322a7dfc9e9dfd4f7d3163210" translate="yes" xml:space="preserve">
          <source>ImageIO.getImageReader()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e76eb241ccb26f43c390618bae46f5d10b95238" translate="yes" xml:space="preserve">
          <source>ImageIO.getImageReaders()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44ef81251a0359e10da539ea0c926738bc079d80" translate="yes" xml:space="preserve">
          <source>ImageIO.getImageReadersByFormatName()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64a0bc918bed1738502afad4783faccab9c2186b" translate="yes" xml:space="preserve">
          <source>ImageIO.getImageReadersByMIMEType()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afa949cd049242f118953cd39b6f5c21cd74bfbe" translate="yes" xml:space="preserve">
          <source>ImageIO.getImageReadersBySuffix()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de6da74d518b0c2784171323506bb5b1ee6d852b" translate="yes" xml:space="preserve">
          <source>ImageIO.getImageTranscoders()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e29940fba4bc557445fc983f308938e46bd224f" translate="yes" xml:space="preserve">
          <source>ImageIO.getImageWriter()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56bc830a97378de25ad150d4e503fc48f66dc3ec" translate="yes" xml:space="preserve">
          <source>ImageIO.getImageWriters()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89db07061cc0732e6ab14d4c068e2d7eceb3e2a9" translate="yes" xml:space="preserve">
          <source>ImageIO.getImageWritersByFormatName()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e750e9b780c2367dccb6426f7d619b865597416c" translate="yes" xml:space="preserve">
          <source>ImageIO.getImageWritersByMIMEType()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce7337d2c90e5649fdf14512d0e005a7d112c6cb" translate="yes" xml:space="preserve">
          <source>ImageIO.getImageWritersBySuffix()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe5c85a5282508405c3f1206d09bed976dd42965" translate="yes" xml:space="preserve">
          <source>ImageIO.getReaderFileSuffixes()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06d8f415a89de32cffca703fc29bbb91572fbc9f" translate="yes" xml:space="preserve">
          <source>ImageIO.getReaderFormatNames()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0645e1589c3071d7502c318da4c3c2b061194cb7" translate="yes" xml:space="preserve">
          <source>ImageIO.getReaderMIMETypes()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07ad9f1d97f6d3e904844a56851b3bcda99b2c43" translate="yes" xml:space="preserve">
          <source>ImageIO.getUseCache()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5169caa39bfd700d76397736d7e285aa33f9c7a7" translate="yes" xml:space="preserve">
          <source>ImageIO.getWriterFileSuffixes()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e7a97a50c9d05a7a40adf51dd33a857053c65da" translate="yes" xml:space="preserve">
          <source>ImageIO.getWriterFormatNames()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01db539be762fbfd821ea09f01177e71fd96fc8c" translate="yes" xml:space="preserve">
          <source>ImageIO.getWriterMIMETypes()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="463d1f56e81833ff31c3d295de1bb6fcfda5275d" translate="yes" xml:space="preserve">
          <source>ImageIO.read()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7d104e02651636725b9f8fe56a25a4d2c570bf1" translate="yes" xml:space="preserve">
          <source>ImageIO.scanForPlugins()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d62714299e20b57d1592d993d43407e41aa2164e" translate="yes" xml:space="preserve">
          <source>ImageIO.setCacheDirectory()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="792babf03cb2c5b21cc1ccff7d0276833b152238" translate="yes" xml:space="preserve">
          <source>ImageIO.setUseCache()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="740030501c0f7240b3fef74e1112008cba5f6479" translate="yes" xml:space="preserve">
          <source>ImageIO.write()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0245e9e67a54a472fc25581d5c9f9f41c5862fe9" translate="yes" xml:space="preserve">
          <source>ImageInputStream</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdb0db46a0549545118bcfab191f5a01bb7b7856" translate="yes" xml:space="preserve">
          <source>ImageInputStream.close()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74e92bb6efaabdb3e1364e44d9201955d9a97ecd" translate="yes" xml:space="preserve">
          <source>ImageInputStream.flush()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2c19a159035aa426a1b4fa9ff8fef450cf20186" translate="yes" xml:space="preserve">
          <source>ImageInputStream.flushBefore()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e3dcc8b7874fe66b112c67eb0131282cf5be45d" translate="yes" xml:space="preserve">
          <source>ImageInputStream.getBitOffset()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed0c413a5cdd9ba2f88e8004941a2b40d5be3aca" translate="yes" xml:space="preserve">
          <source>ImageInputStream.getByteOrder()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9f86dc54492d048236b77adbd714aeca40c9e51" translate="yes" xml:space="preserve">
          <source>ImageInputStream.getFlushedPosition()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fac3b49b57032a0641c75807a3c18076b5da2b5" translate="yes" xml:space="preserve">
          <source>ImageInputStream.getStreamPosition()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1acb72377037719672c98f780c77e950ff820492" translate="yes" xml:space="preserve">
          <source>ImageInputStream.isCached()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f69754bd4d96138a7c22bbedd6aefaabde231a8" translate="yes" xml:space="preserve">
          <source>ImageInputStream.isCachedFile()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c548a7b471d7672ecb6792e54d5bdc21e4d2387" translate="yes" xml:space="preserve">
          <source>ImageInputStream.isCachedMemory()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5261bd544299c757e4b1f336fdefee6de42c7b4c" translate="yes" xml:space="preserve">
          <source>ImageInputStream.length()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfabbc33a2b60af25762be95a557f5de9c1ba8ea" translate="yes" xml:space="preserve">
          <source>ImageInputStream.mark()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07764b9f240c07205fc1c6d6c63a27c1372ff701" translate="yes" xml:space="preserve">
          <source>ImageInputStream.read()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb57b6a837e11c39f6562a7a887b53c7dc1c09f5" translate="yes" xml:space="preserve">
          <source>ImageInputStream.readBit()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0917c6385b2ac3e649e5b9a229ff8852a7e03f14" translate="yes" xml:space="preserve">
          <source>ImageInputStream.readBits()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c8ff8f950621dce17dda1c964b80be167dd2cee" translate="yes" xml:space="preserve">
          <source>ImageInputStream.readBoolean()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a252976aef85f172deca195d4e9d13d7ffeca7b" translate="yes" xml:space="preserve">
          <source>ImageInputStream.readByte()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76a124f0baeafb323fcdeb4600b759c65f8d0176" translate="yes" xml:space="preserve">
          <source>ImageInputStream.readBytes()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2e9a3b48f6aeb1974e857f3d1dc37592e8a6ddc" translate="yes" xml:space="preserve">
          <source>ImageInputStream.readChar()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e06adfc4448348b3acddca93f268a2153ab1a3ee" translate="yes" xml:space="preserve">
          <source>ImageInputStream.readDouble()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="257f1ac56d5e6e98ef9a7c125604a204d17b5d18" translate="yes" xml:space="preserve">
          <source>ImageInputStream.readFloat()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf9313280471b393d59238085e0efa067c010043" translate="yes" xml:space="preserve">
          <source>ImageInputStream.readFully()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cf680fda4d5eb74c626d594fd5817dad1ebb713" translate="yes" xml:space="preserve">
          <source>ImageInputStream.readInt()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af33fd30f73a756d5dabfadf948021b8a508cc2c" translate="yes" xml:space="preserve">
          <source>ImageInputStream.readLine()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c502e57ec334956d872b572bcb59a8d15e976afc" translate="yes" xml:space="preserve">
          <source>ImageInputStream.readLong()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="560d5375c889ea524187a3cf8aca901ebf457cb1" translate="yes" xml:space="preserve">
          <source>ImageInputStream.readShort()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c6880473353874f02e9c2ae4fcba87e85333517" translate="yes" xml:space="preserve">
          <source>ImageInputStream.readUTF()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dab86d8b4038eb19b0b3a15dd627a0d8b836e2c3" translate="yes" xml:space="preserve">
          <source>ImageInputStream.readUnsignedByte()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87eb9f587b973471d74845a3ddc84409ec8adf3b" translate="yes" xml:space="preserve">
          <source>ImageInputStream.readUnsignedInt()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f35074f6242fa76bc133147208ccc387bac999de" translate="yes" xml:space="preserve">
          <source>ImageInputStream.readUnsignedShort()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00a12c946b17c606257256e3e6378b114e2e9c05" translate="yes" xml:space="preserve">
          <source>ImageInputStream.reset()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90be6fbdd0622d26d611dfbaa9e05e7fd752415f" translate="yes" xml:space="preserve">
          <source>ImageInputStream.seek()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85a0afa0fb736f9a6a3be490b62269fb855570a6" translate="yes" xml:space="preserve">
          <source>ImageInputStream.setBitOffset()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e72841dd92c4486f8ecb47461c0ae520978c01fc" translate="yes" xml:space="preserve">
          <source>ImageInputStream.setByteOrder()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdbbc1faf80c7c46e3e14c86efeb22e4d29bd35c" translate="yes" xml:space="preserve">
          <source>ImageInputStream.skipBytes()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8656b12ebd4577f365f30700a4965ac15bc88eb3" translate="yes" xml:space="preserve">
          <source>ImageInputStreamImpl</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0c3696efb1099cc8eed113cd35fe056c319999b" translate="yes" xml:space="preserve">
          <source>ImageInputStreamImpl.checkClosed()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="782595d006aa0abb71963fe9baf1cc70df4da48b" translate="yes" xml:space="preserve">
          <source>ImageInputStreamImpl.close()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a27706961795dad7d8923c0071f3c550dbffe802" translate="yes" xml:space="preserve">
          <source>ImageInputStreamImpl.finalize()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9431ae756c0353adf60204204171a32b3973cc72" translate="yes" xml:space="preserve">
          <source>ImageInputStreamImpl.flush()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="168614a85c503d2d4cc8ce626e217d7f77f8faed" translate="yes" xml:space="preserve">
          <source>ImageInputStreamImpl.flushBefore()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="981a58447ac21e8c657544ed69ffb81fa14d1e22" translate="yes" xml:space="preserve">
          <source>ImageInputStreamImpl.getBitOffset()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba306fe0c0ab7cc5d661d7a915cb0e8fb1a3614e" translate="yes" xml:space="preserve">
          <source>ImageInputStreamImpl.getByteOrder()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e471eeed2837714dd874a503b9a005465e7d9378" translate="yes" xml:space="preserve">
          <source>ImageInputStreamImpl.getFlushedPosition()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31c54856fb3d87a3c4f706059d932317bdb5fd70" translate="yes" xml:space="preserve">
          <source>ImageInputStreamImpl.getStreamPosition()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="594592c73635611de1bb90869376a480b3d175fd" translate="yes" xml:space="preserve">
          <source>ImageInputStreamImpl.isCached()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e815c25865006ecb81b108a964827b1d0f3cece" translate="yes" xml:space="preserve">
          <source>ImageInputStreamImpl.isCachedFile()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3243c5d2ecc0d3399d30bc93ff50a264f67ba333" translate="yes" xml:space="preserve">
          <source>ImageInputStreamImpl.isCachedMemory()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5ac4ec2e26729b99cd28a078d488c8935aba2be" translate="yes" xml:space="preserve">
          <source>ImageInputStreamImpl.length()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bbd52b0fbf58b6798e63d8b0c87497a56df66f6" translate="yes" xml:space="preserve">
          <source>ImageInputStreamImpl.mark()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f55b2cfe2b750f10111c7035e587f1ceb7d09ed" translate="yes" xml:space="preserve">
          <source>ImageInputStreamImpl.read()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aabb5f23baeb84e5f6f3ac1ff541b929760ceb92" translate="yes" xml:space="preserve">
          <source>ImageInputStreamImpl.readBit()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8e0d5cb350a27e01a0e88fcbc5dc0060ae78474" translate="yes" xml:space="preserve">
          <source>ImageInputStreamImpl.readBits()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e68b253d54db897da7d251ca7724e7c3894b0592" translate="yes" xml:space="preserve">
          <source>ImageInputStreamImpl.readBoolean()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79329a0abc951e56dcca4a1789034a361ae747f5" translate="yes" xml:space="preserve">
          <source>ImageInputStreamImpl.readByte()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71cdd7657c8e38c8c63465cad9d8fcb058772a3d" translate="yes" xml:space="preserve">
          <source>ImageInputStreamImpl.readBytes()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96b166e904694f192ebd27a9749b7fab7e1eae91" translate="yes" xml:space="preserve">
          <source>ImageInputStreamImpl.readChar()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42ee4e564f1504e893ac6b1b35e7055913601286" translate="yes" xml:space="preserve">
          <source>ImageInputStreamImpl.readDouble()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f8d752842016666b1aedf8121b8348521d31b30" translate="yes" xml:space="preserve">
          <source>ImageInputStreamImpl.readFloat()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f92136c9a37ae3d989b1909b62111e2e310a8378" translate="yes" xml:space="preserve">
          <source>ImageInputStreamImpl.readFully()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb6805ccf006d0398ca358e9619d5f5eebda940b" translate="yes" xml:space="preserve">
          <source>ImageInputStreamImpl.readInt()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8642b232a3108c5773bc9627c92583405125e05f" translate="yes" xml:space="preserve">
          <source>ImageInputStreamImpl.readLine()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f6f63ca415b0e89f8ae5c30c1a3018e595b6068" translate="yes" xml:space="preserve">
          <source>ImageInputStreamImpl.readLong()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b617d67507eca06216066c571114be11c0751e31" translate="yes" xml:space="preserve">
          <source>ImageInputStreamImpl.readShort()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="698dc14620f50ae23a50d28ab1fe8525bc7b6c9d" translate="yes" xml:space="preserve">
          <source>ImageInputStreamImpl.readUTF()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5f1586569947e262ec3518385bc537415c0e03e" translate="yes" xml:space="preserve">
          <source>ImageInputStreamImpl.readUnsignedByte()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8947b30c253b0c61bc67637afb8d343cc16f7e0" translate="yes" xml:space="preserve">
          <source>ImageInputStreamImpl.readUnsignedInt()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ea1539b573be4ee8f231d4ad18a0d5f1fd114ae" translate="yes" xml:space="preserve">
          <source>ImageInputStreamImpl.readUnsignedShort()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e567969379ca63dc0a8d56046863f56c6269e1b5" translate="yes" xml:space="preserve">
          <source>ImageInputStreamImpl.reset()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb704f2bb8a0ae856f08dff751400fd6014d8230" translate="yes" xml:space="preserve">
          <source>ImageInputStreamImpl.seek()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58977f5c2fcf07fe4e22f6971622098bbb2cf156" translate="yes" xml:space="preserve">
          <source>ImageInputStreamImpl.setBitOffset()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2d11387197b1eb752c26b411519321f23b1e961" translate="yes" xml:space="preserve">
          <source>ImageInputStreamImpl.setByteOrder()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81cbaf9dfa780bf07efce1dbde0370337472ec57" translate="yes" xml:space="preserve">
          <source>ImageInputStreamImpl.skipBytes()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c016edb7393ee78be323cdee64306abc5c33a76" translate="yes" xml:space="preserve">
          <source>ImageInputStreamSpi</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98f3c89642183c2de7b74025c9a94892a10c8290" translate="yes" xml:space="preserve">
          <source>ImageInputStreamSpi.canUseCacheFile()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfc724f334540654cf7bd9bb0273b3b20fb1cab9" translate="yes" xml:space="preserve">
          <source>ImageInputStreamSpi.createInputStreamInstance()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e28bb6fdf2a6fe5a11d08bbd9dabfed557c79dde" translate="yes" xml:space="preserve">
          <source>ImageInputStreamSpi.getInputClass()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bab49208b3442ad088d417fd6882ece7eb22c453" translate="yes" xml:space="preserve">
          <source>ImageInputStreamSpi.needsCacheFile()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83452b3370966adeb8529169778744f6e09ff6af" translate="yes" xml:space="preserve">
          <source>ImageOutputStream</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a7340fd79bf4a3bd17e4efc378a302841865164" translate="yes" xml:space="preserve">
          <source>ImageOutputStream.flushBefore()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96d9f9f0c87a58778def7cb4472f9e30f72c9ed1" translate="yes" xml:space="preserve">
          <source>ImageOutputStream.write()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a749a2ab1d342fdbe254964c94d9dc6e10d6335" translate="yes" xml:space="preserve">
          <source>ImageOutputStream.writeBit()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6bd0332e894f3faebb742ce886bef1b0ca3072b" translate="yes" xml:space="preserve">
          <source>ImageOutputStream.writeBits()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eea4d74a7715f2548485de45d4641de28d84d29" translate="yes" xml:space="preserve">
          <source>ImageOutputStream.writeBoolean()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="340a472f842b04b86af885671257d5256986b53d" translate="yes" xml:space="preserve">
          <source>ImageOutputStream.writeByte()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22db935c085af8d2c472ea2849517b813ad1f3ed" translate="yes" xml:space="preserve">
          <source>ImageOutputStream.writeBytes()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d08d9de75de11b5d66b87c7b7d2d68abb4df88c" translate="yes" xml:space="preserve">
          <source>ImageOutputStream.writeChar()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75afc2031ad65ed5b89bec90a825f5be8fa0d014" translate="yes" xml:space="preserve">
          <source>ImageOutputStream.writeChars()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb2b58ece7b590e768f813dc298c99bf314a3232" translate="yes" xml:space="preserve">
          <source>ImageOutputStream.writeDouble()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b482f3b68f7be8d4a57bdd6647d17e30c247283d" translate="yes" xml:space="preserve">
          <source>ImageOutputStream.writeDoubles()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43acf80f83723f299ebf51426b7fef88628108c7" translate="yes" xml:space="preserve">
          <source>ImageOutputStream.writeFloat()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42313ffd030977d4a3eadc27f5b1a50e373481aa" translate="yes" xml:space="preserve">
          <source>ImageOutputStream.writeFloats()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d86afeab1a6a45ac1f3cede360cec9c35ddfa0e2" translate="yes" xml:space="preserve">
          <source>ImageOutputStream.writeInt()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b75d0d72ffb9a076f3698444a5c3d154adcd2744" translate="yes" xml:space="preserve">
          <source>ImageOutputStream.writeInts()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4292b5040fa930bcf8f0f53bf7f055a1ac9c78a" translate="yes" xml:space="preserve">
          <source>ImageOutputStream.writeLong()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0246e3aa4a07aed1c640740521fc0870e0ff5c0f" translate="yes" xml:space="preserve">
          <source>ImageOutputStream.writeLongs()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f3727fa7152d18143df7ebe1ebb2c9947230c62" translate="yes" xml:space="preserve">
          <source>ImageOutputStream.writeShort()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="491e72b4dcac099107b1db722933b0052128b231" translate="yes" xml:space="preserve">
          <source>ImageOutputStream.writeShorts()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e08fcb28ace3d3e84578214b9b4d4d83bcc71a48" translate="yes" xml:space="preserve">
          <source>ImageOutputStream.writeUTF()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72b99a9a0945d72b23e4c7cd15e0ca4370caa83d" translate="yes" xml:space="preserve">
          <source>ImageOutputStreamImpl</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b94df9c7619840c20a9af8bb6d7976dc537c692d" translate="yes" xml:space="preserve">
          <source>ImageOutputStreamImpl.flushBits()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="730f1cdbd189048de523719e5b0ff1f89fa69f1a" translate="yes" xml:space="preserve">
          <source>ImageOutputStreamImpl.write()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1b3f1b6c632622f8e619e2ac5fbfd01ca7c1ee5" translate="yes" xml:space="preserve">
          <source>ImageOutputStreamImpl.writeBit()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9393ba275c9ea1f015e3d4ab25fdde23e0ac1067" translate="yes" xml:space="preserve">
          <source>ImageOutputStreamImpl.writeBits()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3c067d1d56c1470e93a5bf33fa3280efe069058" translate="yes" xml:space="preserve">
          <source>ImageOutputStreamImpl.writeBoolean()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f15ad350c4b938293d993a25eba797c8db998a3e" translate="yes" xml:space="preserve">
          <source>ImageOutputStreamImpl.writeByte()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="095bb6cefb5354d2f7c4f0a22c12443ef62ac1dc" translate="yes" xml:space="preserve">
          <source>ImageOutputStreamImpl.writeBytes()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="521e6614a439aa71cfcbbacfc51409ff6ad51c36" translate="yes" xml:space="preserve">
          <source>ImageOutputStreamImpl.writeChar()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="334dd26e9aa2141489f61cebfce3d91fd9810de8" translate="yes" xml:space="preserve">
          <source>ImageOutputStreamImpl.writeChars()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c9a5b7a1ec440545f7662de460fbeadfd3d7ece" translate="yes" xml:space="preserve">
          <source>ImageOutputStreamImpl.writeDouble()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1333d7825287cc0f22a19657c00a1a290595890" translate="yes" xml:space="preserve">
          <source>ImageOutputStreamImpl.writeDoubles()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="197e47ac604fffd79dd1b7217f6c18e8d617db02" translate="yes" xml:space="preserve">
          <source>ImageOutputStreamImpl.writeFloat()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94642ce32c1a3ed90a2320a50906426c9bef3109" translate="yes" xml:space="preserve">
          <source>ImageOutputStreamImpl.writeFloats()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf0acbd914d5ff262a81300aa0318afe64266461" translate="yes" xml:space="preserve">
          <source>ImageOutputStreamImpl.writeInt()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3cfd025a02e305b2a2830ae1b5194f4b274eed9" translate="yes" xml:space="preserve">
          <source>ImageOutputStreamImpl.writeInts()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dba6391684abecf926b01dfb902078ced0cfb8ca" translate="yes" xml:space="preserve">
          <source>ImageOutputStreamImpl.writeLong()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e426a86c094e0adb14df7ac3b38f0e9d52c28c2" translate="yes" xml:space="preserve">
          <source>ImageOutputStreamImpl.writeLongs()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cf54f61217e13cdd0f2c560981703c79d6e0231" translate="yes" xml:space="preserve">
          <source>ImageOutputStreamImpl.writeShort()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c025774860a58ffe651c29b29ac3ef8721bbc953" translate="yes" xml:space="preserve">
          <source>ImageOutputStreamImpl.writeShorts()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="147c12a0a914540fbe428bd115e9f1f47a62611f" translate="yes" xml:space="preserve">
          <source>ImageOutputStreamImpl.writeUTF()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b31c596804eae9fe47d2e389a77a1a15db3fcac" translate="yes" xml:space="preserve">
          <source>ImageOutputStreamSpi</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c41355ca3fef446e456f7414fb6307475fd139b1" translate="yes" xml:space="preserve">
          <source>ImageOutputStreamSpi.canUseCacheFile()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6c7fcb65468a4ded2040925c5b97fb20b574f69" translate="yes" xml:space="preserve">
          <source>ImageOutputStreamSpi.createOutputStreamInstance()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67d7de5675588e83404da953f0e8085b1083f41d" translate="yes" xml:space="preserve">
          <source>ImageOutputStreamSpi.getOutputClass()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2058ca306ee8f78dfbd63327e0de312210c1b1c1" translate="yes" xml:space="preserve">
          <source>ImageOutputStreamSpi.needsCacheFile()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd2cd26b1dd4bf4d9188ff3707eaaa081bf1035f" translate="yes" xml:space="preserve">
          <source>ImageReadParam</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1201d8d62bd34eabb029c751e075ad9c3a694230" translate="yes" xml:space="preserve">
          <source>ImageReadParam.canSetSourceRenderSize()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d70a5327a4b03f33e450ac9974dd7150da0cb22" translate="yes" xml:space="preserve">
          <source>ImageReadParam.getDestination()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56b8b8fa4c49d4b3d42080bf6e079d7e7c47736d" translate="yes" xml:space="preserve">
          <source>ImageReadParam.getDestinationBands()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10b87be325ee80f458950abf026570aa1721b8e0" translate="yes" xml:space="preserve">
          <source>ImageReadParam.getSourceMaxProgressivePass()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64baebae8df2c30bdcaa009fa90a8fafaf8374a0" translate="yes" xml:space="preserve">
          <source>ImageReadParam.getSourceMinProgressivePass()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a9e30e7ab09c34d21976c697343b0ddb7fdf4c2" translate="yes" xml:space="preserve">
          <source>ImageReadParam.getSourceNumProgressivePasses()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="979e6351f23c4d15b32fcfc2dd1e2e42c39caf1a" translate="yes" xml:space="preserve">
          <source>ImageReadParam.getSourceRenderSize()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fa94c9268843bf28b601aec3e833b199101d137" translate="yes" xml:space="preserve">
          <source>ImageReadParam.setDestination()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d26f0854d8589f1ab523c1d34c410a49623f03a2" translate="yes" xml:space="preserve">
          <source>ImageReadParam.setDestinationBands()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a5c79c15a0e6dd8aa1340f4967dd5b96b0ea9ce" translate="yes" xml:space="preserve">
          <source>ImageReadParam.setDestinationType()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3b2bae255bfd5a49cdea25971232f60ab5f428b" translate="yes" xml:space="preserve">
          <source>ImageReadParam.setSourceProgressivePasses()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f81a8a635bd5c447a283fcda74554a5cf0e1a36d" translate="yes" xml:space="preserve">
          <source>ImageReadParam.setSourceRenderSize()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f906495681b83a7a65361e49916ce979a0426c83" translate="yes" xml:space="preserve">
          <source>ImageReader</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc96d2a37589b461a1a2f4153e1a69d22416ed5b" translate="yes" xml:space="preserve">
          <source>ImageReader.abort()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83f2ec08c69f7b5fc978c20bd79a32f0b4f2197c" translate="yes" xml:space="preserve">
          <source>ImageReader.abortRequested()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ffcbeadfa0c662e8519d7f22e35f802a4161aeb" translate="yes" xml:space="preserve">
          <source>ImageReader.addIIOReadProgressListener()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55ab4d1ac22f560753cab40ba690b36dc7b0e87d" translate="yes" xml:space="preserve">
          <source>ImageReader.addIIOReadUpdateListener()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00f5ad390becce52c29dd2e5c4c6ffea976f7d75" translate="yes" xml:space="preserve">
          <source>ImageReader.addIIOReadWarningListener()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04557cc6b974931172aa306cd0120d6bdfcb7944" translate="yes" xml:space="preserve">
          <source>ImageReader.canReadRaster()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb47920d771bacef735a7542995c7120f95f227c" translate="yes" xml:space="preserve">
          <source>ImageReader.checkReadParamBandSettings()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c6ce2ff37299628966cfe31bee7c6648fa58294" translate="yes" xml:space="preserve">
          <source>ImageReader.clearAbortRequest()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60e428b87efa48f5947edb064d44a48fefd6dc8c" translate="yes" xml:space="preserve">
          <source>ImageReader.computeRegions()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b02305cba48707110942e47479fd4de96aaba83" translate="yes" xml:space="preserve">
          <source>ImageReader.dispose()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="862f19c5fec013bdca9d3acaa7d1d02fe6e60221" translate="yes" xml:space="preserve">
          <source>ImageReader.getAspectRatio()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f7937f38c6919792f25c0c297d3c2d9560c302a" translate="yes" xml:space="preserve">
          <source>ImageReader.getAvailableLocales()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ef2cfc3e9cee276d76912054d603565ad80e897" translate="yes" xml:space="preserve">
          <source>ImageReader.getDefaultReadParam()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6f7e6bef5ae2e033bf2d0309e37885b20a2a7a4" translate="yes" xml:space="preserve">
          <source>ImageReader.getDestination()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed6f46842d3eb44cf80250063a801e8ee871b0f5" translate="yes" xml:space="preserve">
          <source>ImageReader.getFormatName()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af5e6ef5861bb73f88c830f220e29d57f93ef484" translate="yes" xml:space="preserve">
          <source>ImageReader.getHeight()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67fc0c0f685a171c6be1b5b4630458248a66bb51" translate="yes" xml:space="preserve">
          <source>ImageReader.getImageMetadata()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cd9e56e497f979ded19cd949256048ec05a8908" translate="yes" xml:space="preserve">
          <source>ImageReader.getImageTypes()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89ab2b0df8dec8b194c46f9eed32ea752dcd253a" translate="yes" xml:space="preserve">
          <source>ImageReader.getInput()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7645c286f114ef27413cc9252235a04024cffeba" translate="yes" xml:space="preserve">
          <source>ImageReader.getLocale()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05881ac0d7c50df1fedce4c2265168876a1dd69f" translate="yes" xml:space="preserve">
          <source>ImageReader.getMinIndex()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5fb554919b40b5bf590e52fdf32545a178965ec" translate="yes" xml:space="preserve">
          <source>ImageReader.getNumImages()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dc313e7e6c80c0f80ea20afcf72779aad62f48d" translate="yes" xml:space="preserve">
          <source>ImageReader.getNumThumbnails()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa51cfecd8d98b8edc0ef85e12c99e34375f3980" translate="yes" xml:space="preserve">
          <source>ImageReader.getOriginatingProvider()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dd35ae30620fad4265584b22f6dd0d301b80a31" translate="yes" xml:space="preserve">
          <source>ImageReader.getRawImageType()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="772c3749de9149545c202f7bf846a91eae70bd01" translate="yes" xml:space="preserve">
          <source>ImageReader.getSourceRegion()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21a53fd1b290330b6ee9001e7897cc9124608203" translate="yes" xml:space="preserve">
          <source>ImageReader.getStreamMetadata()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="422bdb64a898763b81ebd4c6c0a49ffa50614262" translate="yes" xml:space="preserve">
          <source>ImageReader.getThumbnailHeight()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2409b2e10d1ca6bc1887e2473a01d6b5ddd88d3a" translate="yes" xml:space="preserve">
          <source>ImageReader.getThumbnailWidth()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6079ff16724edea440c9aef05092dd180ca03e9" translate="yes" xml:space="preserve">
          <source>ImageReader.getTileGridXOffset()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7bed61e0f6b2e832750f5320539d86bcd8f1d73" translate="yes" xml:space="preserve">
          <source>ImageReader.getTileGridYOffset()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9ffe8eebbb18c47f7ab7d45c2860aeba23fe03c" translate="yes" xml:space="preserve">
          <source>ImageReader.getTileHeight()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c598984eea032bfe6a67df6db445eb3c61a9cec7" translate="yes" xml:space="preserve">
          <source>ImageReader.getTileWidth()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="239b57f4d284c9ed81be32877db7ca829d6aad8c" translate="yes" xml:space="preserve">
          <source>ImageReader.getWidth()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95fb5a83ad4728cf0d19d28beb840d0ab015cfc3" translate="yes" xml:space="preserve">
          <source>ImageReader.hasThumbnails()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a535c8397fa10b6b5c78d496c964f2c8684453b" translate="yes" xml:space="preserve">
          <source>ImageReader.isIgnoringMetadata()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd46f791b3df8fda404201934f2e552fdc7786d2" translate="yes" xml:space="preserve">
          <source>ImageReader.isImageTiled()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3b888b29f4f77e432159cab9ac83c2bdeee6f78" translate="yes" xml:space="preserve">
          <source>ImageReader.isRandomAccessEasy()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21cb4aa283e4998ab3cc4eba6b03f638b2206274" translate="yes" xml:space="preserve">
          <source>ImageReader.isSeekForwardOnly()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83405980505714fab061b5e73072682831fd1099" translate="yes" xml:space="preserve">
          <source>ImageReader.processImageComplete()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a825cd399a303adaba67bb2d44903c1156834b5d" translate="yes" xml:space="preserve">
          <source>ImageReader.processImageProgress()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f5606c190b01674cb99b14e8bfbcbb7c7a4962b" translate="yes" xml:space="preserve">
          <source>ImageReader.processImageStarted()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12d63aab61b5bc5958d9dfef431913f87fe28d16" translate="yes" xml:space="preserve">
          <source>ImageReader.processImageUpdate()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfe1c122805842bfe5b3f20a7db22b48cd761796" translate="yes" xml:space="preserve">
          <source>ImageReader.processPassComplete()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4a909463f9e14f96174182c1794c53f7d83a2e4" translate="yes" xml:space="preserve">
          <source>ImageReader.processPassStarted()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ccff571a4dfc2b5085f661fb338eb1acc3e5c92" translate="yes" xml:space="preserve">
          <source>ImageReader.processReadAborted()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5dd31c7a713893ea8ac32e5e37bb4404d8083a7" translate="yes" xml:space="preserve">
          <source>ImageReader.processSequenceComplete()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef653be7cb0793be5d89120339dab603586d9f46" translate="yes" xml:space="preserve">
          <source>ImageReader.processSequenceStarted()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0ec2514327f115f940fac18bbab7e79c4467cb5" translate="yes" xml:space="preserve">
          <source>ImageReader.processThumbnailComplete()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c034d8d050941821b2eeb39dcf96c2097bc552d1" translate="yes" xml:space="preserve">
          <source>ImageReader.processThumbnailPassComplete()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27bd8f1a631567b196e414ce17394485cb3b4a05" translate="yes" xml:space="preserve">
          <source>ImageReader.processThumbnailPassStarted()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47060488d6f55ce0e446c835d52343cebce515e9" translate="yes" xml:space="preserve">
          <source>ImageReader.processThumbnailProgress()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b89cffe604158032bd2f4456be04fcfd1fc7091" translate="yes" xml:space="preserve">
          <source>ImageReader.processThumbnailStarted()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9c9ad260fb38f12182956612b850bbcf23c0ed4" translate="yes" xml:space="preserve">
          <source>ImageReader.processThumbnailUpdate()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b2f86a5e49e056589fa20c70b320b343f82a972" translate="yes" xml:space="preserve">
          <source>ImageReader.processWarningOccurred()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="402b088f594fb72f39498c4a355c4ffed0b74070" translate="yes" xml:space="preserve">
          <source>ImageReader.read()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee5a1f319268437ff8387bb0981f3fe47eb57f8a" translate="yes" xml:space="preserve">
          <source>ImageReader.readAll()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22a5fda3d9b4d4ee2fa0bf74803c2f5115d9ff2d" translate="yes" xml:space="preserve">
          <source>ImageReader.readAsRenderedImage()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae9330919034f80a8c2d87c450e681a2a8053aa3" translate="yes" xml:space="preserve">
          <source>ImageReader.readRaster()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a09688ff6526526ab7a6038bdd4141c6afe8f1f6" translate="yes" xml:space="preserve">
          <source>ImageReader.readThumbnail()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c89f7d36bd8010987131b228345a25d066b76e9" translate="yes" xml:space="preserve">
          <source>ImageReader.readTile()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c813dd87cf577e7d6234c47a677676477d95a8a" translate="yes" xml:space="preserve">
          <source>ImageReader.readTileRaster()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64d3eb2a5d9017a4f0b5f5bbbfdf1c8261f95dbf" translate="yes" xml:space="preserve">
          <source>ImageReader.readerSupportsThumbnails()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="099fd73475427f29d3f49fc033fbe68b5e0622e2" translate="yes" xml:space="preserve">
          <source>ImageReader.removeAllIIOReadProgressListeners()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7df56151d938be64315fcccd83f9d37acf0e82a4" translate="yes" xml:space="preserve">
          <source>ImageReader.removeAllIIOReadUpdateListeners()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b915f705163455fb8a9a23532fec9a43b3d29d5" translate="yes" xml:space="preserve">
          <source>ImageReader.removeAllIIOReadWarningListeners()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07c92fd388eedbf20e32ad9dc36615cd6bbae20f" translate="yes" xml:space="preserve">
          <source>ImageReader.removeIIOReadProgressListener()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9722b3a2f5391a950193f30cd3d54628879aaa6" translate="yes" xml:space="preserve">
          <source>ImageReader.removeIIOReadUpdateListener()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="023ab851da16bf3a07c58ef101014a670cd932b0" translate="yes" xml:space="preserve">
          <source>ImageReader.removeIIOReadWarningListener()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4e83add06a2b48e9526683b506060ae5ed77130" translate="yes" xml:space="preserve">
          <source>ImageReader.reset()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbdc25a3690bbe4534e5dc416172e1d0ea1288a8" translate="yes" xml:space="preserve">
          <source>ImageReader.setInput()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23ceac5a96e27350a57962919a976aeb9bfb567a" translate="yes" xml:space="preserve">
          <source>ImageReader.setLocale()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="376e41ebaa573602896e8d479c0176731174559e" translate="yes" xml:space="preserve">
          <source>ImageReaderSpi</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac7dbd0a753e7ac2ff7335fba8639219adcd8713" translate="yes" xml:space="preserve">
          <source>ImageReaderSpi.canDecodeInput()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c7dcc0f3b62f34c44289be9aad680842dc8c4ed" translate="yes" xml:space="preserve">
          <source>ImageReaderSpi.createReaderInstance()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50806e3d08c420c4abfcbe7facfd3dc09ec03dce" translate="yes" xml:space="preserve">
          <source>ImageReaderSpi.getImageWriterSpiNames()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cefb63caddb366bd1eb1c31f48a0ab71564a4c84" translate="yes" xml:space="preserve">
          <source>ImageReaderSpi.getInputTypes()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3136c51d01b4b0b3b305ef950d1ad5a92943e5a" translate="yes" xml:space="preserve">
          <source>ImageReaderSpi.isOwnReader()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3443fa6fc0a7963d5ead490360966c6f8774c754" translate="yes" xml:space="preserve">
          <source>ImageReaderWriterSpi</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="393233988cc33bb6fba0cc35469857ee9f1a8d7f" translate="yes" xml:space="preserve">
          <source>ImageReaderWriterSpi.getExtraImageMetadataFormatNames()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4fb202455044529cf3c4e4612f21afe062e4963" translate="yes" xml:space="preserve">
          <source>ImageReaderWriterSpi.getExtraStreamMetadataFormatNames()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48b2bf826dd931098ac161cd8ab73455652f7bb1" translate="yes" xml:space="preserve">
          <source>ImageReaderWriterSpi.getFileSuffixes()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="345e065fd098396a0dd7c5ef0358fada7b3afa62" translate="yes" xml:space="preserve">
          <source>ImageReaderWriterSpi.getFormatNames()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df48f7d071dd4a2d7c1049cb61f609462a3abaa4" translate="yes" xml:space="preserve">
          <source>ImageReaderWriterSpi.getImageMetadataFormat()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b85260052834d518879df691ee7bd10990c050c" translate="yes" xml:space="preserve">
          <source>ImageReaderWriterSpi.getMIMETypes()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7c7658657946362cacb3a50d22d77b43b3100bd" translate="yes" xml:space="preserve">
          <source>ImageReaderWriterSpi.getNativeImageMetadataFormatName()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2e2fc9fffc6df64409092179b1f4bad5625f480" translate="yes" xml:space="preserve">
          <source>ImageReaderWriterSpi.getNativeStreamMetadataFormatName()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b328ac0a7c07da6d3ad5bc66a4afd80f7610bd1" translate="yes" xml:space="preserve">
          <source>ImageReaderWriterSpi.getPluginClassName()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3cfa123b91136daa887bb526626487cfaaa1409" translate="yes" xml:space="preserve">
          <source>ImageReaderWriterSpi.getStreamMetadataFormat()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ac0b3089b0a649caccc4374df94fb3e823364b6" translate="yes" xml:space="preserve">
          <source>ImageReaderWriterSpi.isStandardImageMetadataFormatSupported()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7454ccb9648639eac2c96414321e87ec66e98786" translate="yes" xml:space="preserve">
          <source>ImageReaderWriterSpi.isStandardStreamMetadataFormatSupported()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7074989e970140ccbe5497322f7c8cef8fe1663a" translate="yes" xml:space="preserve">
          <source>ImageTranscoder</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b65c3add20132f879aa036db292c79a29d3ca488" translate="yes" xml:space="preserve">
          <source>ImageTranscoder.convertImageMetadata()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="877dcd3940ee4c1f24efb96f1bd64897c4963bce" translate="yes" xml:space="preserve">
          <source>ImageTranscoder.convertStreamMetadata()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34cb2653707bc3d390fb96709f633289b6833ab3" translate="yes" xml:space="preserve">
          <source>ImageTranscoderSpi</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dcf7fb9441e9be7a2d69c7af23e41cb047e93e2" translate="yes" xml:space="preserve">
          <source>ImageTranscoderSpi.createTranscoderInstance()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="397cb3241db131e36b52f8ecc780c8867166595e" translate="yes" xml:space="preserve">
          <source>ImageTranscoderSpi.getReaderServiceProviderName()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34b0abd472106b1013e774590a3046f282e9a71b" translate="yes" xml:space="preserve">
          <source>ImageTranscoderSpi.getWriterServiceProviderName()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf50296a873ae59a7d7778a3ed242c052be43098" translate="yes" xml:space="preserve">
          <source>ImageTypeSpecifier</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8567bfd1b3de238aea08d0617373266b768a64cd" translate="yes" xml:space="preserve">
          <source>ImageTypeSpecifier.createBanded()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a0fae9470c6e2ba3648f004192b22c9a6f30ea6" translate="yes" xml:space="preserve">
          <source>ImageTypeSpecifier.createBufferedImage()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9eea4554eb312780cc7b1c2ae286a32c7fa59e2" translate="yes" xml:space="preserve">
          <source>ImageTypeSpecifier.createFromBufferedImageType()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d711b829e0890002b2a91a880e4e25e63fda3730" translate="yes" xml:space="preserve">
          <source>ImageTypeSpecifier.createFromRenderedImage()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0ea04c2125a810758a9582b6f48810c6c8b8089" translate="yes" xml:space="preserve">
          <source>ImageTypeSpecifier.createGrayscale()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc83b2d72b5153f93778d0864dad26c5e7097c5b" translate="yes" xml:space="preserve">
          <source>ImageTypeSpecifier.createIndexed()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97badba223b73a028a6dd43f25ca5d9071a9fe30" translate="yes" xml:space="preserve">
          <source>ImageTypeSpecifier.createInterleaved()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae499dfc3b95f67fe6d966d7c9687c98ade3face" translate="yes" xml:space="preserve">
          <source>ImageTypeSpecifier.createPacked()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8360d73a22bf926157c8f48eba9af4d29fedac4" translate="yes" xml:space="preserve">
          <source>ImageTypeSpecifier.equals()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7b571daa3f9bb6c2031b7ef1d881e74fdd1d4ff" translate="yes" xml:space="preserve">
          <source>ImageTypeSpecifier.getBitsPerBand()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8c286b8d4bde28e992024df5b5a8ed7f3edefca" translate="yes" xml:space="preserve">
          <source>ImageTypeSpecifier.getBufferedImageType()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a6bf2a63f0739c1077b3e3098e53fcef1ae1ced" translate="yes" xml:space="preserve">
          <source>ImageTypeSpecifier.getColorModel()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e66273a7d655626df06f98d5dd65e6ecdb55ed63" translate="yes" xml:space="preserve">
          <source>ImageTypeSpecifier.getNumBands()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f829597101acf9d5743e4311e6294f51d12d3c46" translate="yes" xml:space="preserve">
          <source>ImageTypeSpecifier.getNumComponents()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40217a206fe4c99da358dbb01869b89d042d7f68" translate="yes" xml:space="preserve">
          <source>ImageTypeSpecifier.getSampleModel()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9476b6b5282eef57fb6d8642e44cd44dc849fdb2" translate="yes" xml:space="preserve">
          <source>ImageTypeSpecifier.hashCode()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07683084bc9eafadf7bb5ab59817c271f28e7ca5" translate="yes" xml:space="preserve">
          <source>ImageWriteParam</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dc3171d7ef8bffe69ca5d3a9f3dab7f36980640" translate="yes" xml:space="preserve">
          <source>ImageWriteParam.canOffsetTiles()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="475e8299763b3f808fea8a780162d768a366114a" translate="yes" xml:space="preserve">
          <source>ImageWriteParam.canWriteCompressed()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd57676b35d6d2d71f22ae6fa059ab875cb75579" translate="yes" xml:space="preserve">
          <source>ImageWriteParam.canWriteProgressive()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99be13b9ee21eb767ed6c1f05abca26887b0d158" translate="yes" xml:space="preserve">
          <source>ImageWriteParam.canWriteTiles()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e9f75633cc6ca3dc8df3258ec1106f8a88042a5" translate="yes" xml:space="preserve">
          <source>ImageWriteParam.getBitRate()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3885e99ad3bdca8a00ac5ba3bb8a9943d565224" translate="yes" xml:space="preserve">
          <source>ImageWriteParam.getCompressionMode()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61121fff18c829b95668813fe016c042a1cc4255" translate="yes" xml:space="preserve">
          <source>ImageWriteParam.getCompressionQuality()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6babb304bcc35a37b4fa5ae725e4416c07d39b8c" translate="yes" xml:space="preserve">
          <source>ImageWriteParam.getCompressionQualityDescriptions()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bc463905c78e183d00029b667c84948a25dcf46" translate="yes" xml:space="preserve">
          <source>ImageWriteParam.getCompressionQualityValues()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bce38049e7b015c9210d033a761c00397269971" translate="yes" xml:space="preserve">
          <source>ImageWriteParam.getCompressionType()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="120fd5386b558bae7b698d70df640560e01387a5" translate="yes" xml:space="preserve">
          <source>ImageWriteParam.getCompressionTypes()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca298a4496ff7f080b2ceb35fef7ebd4f453e6a1" translate="yes" xml:space="preserve">
          <source>ImageWriteParam.getLocale()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c44903cef90cb8b271db6fe029b03bcacde7152" translate="yes" xml:space="preserve">
          <source>ImageWriteParam.getLocalizedCompressionTypeName()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f323ca52d15633b8524d32324c152c53fb27584b" translate="yes" xml:space="preserve">
          <source>ImageWriteParam.getPreferredTileSizes()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="912209f5a4b1d009431bef6c30e73e483a5ea36d" translate="yes" xml:space="preserve">
          <source>ImageWriteParam.getProgressiveMode()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f02a967bd40a471af171d11100a9bf989e6b753b" translate="yes" xml:space="preserve">
          <source>ImageWriteParam.getTileGridXOffset()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b688c968cc015c550840729aef049e208a474759" translate="yes" xml:space="preserve">
          <source>ImageWriteParam.getTileGridYOffset()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="223ba30a3d8d30ac19b4c024ed256ee13f3b5a0b" translate="yes" xml:space="preserve">
          <source>ImageWriteParam.getTileHeight()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8536380edb0accf3360e06ba7d3b95289337625" translate="yes" xml:space="preserve">
          <source>ImageWriteParam.getTileWidth()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="300d303fcb42fea0bab918d263d0cb51f641b271" translate="yes" xml:space="preserve">
          <source>ImageWriteParam.getTilingMode()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4df72fb263a5522f7a874ac051fd5eaff93c839b" translate="yes" xml:space="preserve">
          <source>ImageWriteParam.isCompressionLossless()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fff1e955237d51ee22d2e2afa3e834707d92156" translate="yes" xml:space="preserve">
          <source>ImageWriteParam.setCompressionMode()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8450501a9c81e824c9b19f0ace510839d247289b" translate="yes" xml:space="preserve">
          <source>ImageWriteParam.setCompressionQuality()</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
