<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="rust">
    <body>
      <group id="rust">
        <trans-unit id="5fe1d283480054b36d89be2fc133c0c552a04708" translate="yes" xml:space="preserve">
          <source>Copies a &lt;code&gt;Ref&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e823e4ef9b72e2391dbbc017e09a550fc0e39e41" translate="yes" xml:space="preserve">
          <source>Copies all elements from &lt;code&gt;src&lt;/code&gt; into &lt;code&gt;self&lt;/code&gt;, using a memcpy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bab793017a4ce72417a0e692388f7105906ccfd" translate="yes" xml:space="preserve">
          <source>Copies elements from one part of the slice to another part of itself, using a memmove.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c4978fb851430750424486e9ebc3981097cf460" translate="yes" xml:space="preserve">
          <source>Copies happen implicitly, for example as part of an assignment &lt;code&gt;y = x&lt;/code&gt;. The behavior of &lt;code&gt;Copy&lt;/code&gt; is not overloadable; it is always a simple bit-wise copy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5885bb4cd28ddf63f133a5f46ceb173ffa5b99a" translate="yes" xml:space="preserve">
          <source>Copies the &lt;code&gt;va_list&lt;/code&gt; at the current location.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2f802a9ccedcd1c0b340dd9a1acf8e09f6406cc" translate="yes" xml:space="preserve">
          <source>Copies the contents of one file to another. This function will also copy the permission bits of the original file to the destination file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7de38cf477c242133ab93443342dd1532175e81" translate="yes" xml:space="preserve">
          <source>Copies the elements from &lt;code&gt;src&lt;/code&gt; into &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="645ed71147f14d965419df93c34dec56e9fd78c3" translate="yes" xml:space="preserve">
          <source>Copies the entire contents of a reader into a writer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec098586f4e0377c9b26cd4b40b7980aa5b58116" translate="yes" xml:space="preserve">
          <source>Copies the sign from &lt;code&gt;y&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt; for &lt;code&gt;f32&lt;/code&gt; values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4979d8b9811698a9b4bbdfec123892f23715e948" translate="yes" xml:space="preserve">
          <source>Copies the sign from &lt;code&gt;y&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt; for &lt;code&gt;f64&lt;/code&gt; values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d284985a69d0785a782a448036ac7282de04ffce" translate="yes" xml:space="preserve">
          <source>Copies the slice into an owned &lt;a href=&quot;struct.osstring&quot;&gt;&lt;code&gt;OsString&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af74f7c5362aaee985bf8cda3dd75fc80751ce51" translate="yes" xml:space="preserve">
          <source>Copy</source>
          <target state="translated">Copy</target>
        </trans-unit>
        <trans-unit id="bb282818d5f7396eb52f36d089317ba46d7cd493" translate="yes" xml:space="preserve">
          <source>Copying four bytes within a slice:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b10fc0d032d80345a5382e20a6ec5d569f91ea98" translate="yes" xml:space="preserve">
          <source>Copying two elements from a slice into another:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8ade04c6961543c7e8ea6ad14ff8699a092c520" translate="yes" xml:space="preserve">
          <source>Correct and Efficient Usage of Collections</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c121cdb6db5b0f3119d303cb21f0b7923a440571" translate="yes" xml:space="preserve">
          <source>Correct example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b811419d2ce9497eb9b9d116844a9e63caa5f6e" translate="yes" xml:space="preserve">
          <source>Correct usage of this function: initializing a struct with zero, where all fields of the struct can hold the bit-pattern 0 as a valid value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cc887fdbf52dd0c5f1a92b0237f46cf3098a111" translate="yes" xml:space="preserve">
          <source>Correct usage of this function: initializing an integer with zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9f7a1d79f4720c0b6ee10c4b32bacd7152d5f2c" translate="yes" xml:space="preserve">
          <source>Correct usage of this method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b622fa789802bcb09c9d2f8ea5f065bc04ab985" translate="yes" xml:space="preserve">
          <source>Correctness in our programs is the extent to which our code does what we intend it to do. Rust is designed with a high degree of concern about the correctness of programs, but correctness is complex and not easy to prove. Rust&amp;rsquo;s type system shoulders a huge part of this burden, but the type system cannot catch every kind of incorrectness. As such, Rust includes support for writing automated software tests within the language.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="575d55d0130936e7da6f3fed4e8962dab659f838" translate="yes" xml:space="preserve">
          <source>Correspondingly, however, &lt;em&gt;callers&lt;/em&gt; of this method may not assume any guarantees about how the implementation uses &lt;code&gt;buf&lt;/code&gt;. The trait is safe to implement, before calling &lt;code&gt;read&lt;/code&gt;. Calling &lt;code&gt;read&lt;/code&gt; with an uninitialized &lt;code&gt;buf&lt;/code&gt; (of the kind one obtains via &lt;a href=&quot;../mem/union.maybeuninit&quot;&gt;&lt;code&gt;MaybeUninit&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;) is not safe, and can lead to undefined behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a41bdd85995aee20319dd5020be70218ba7123c" translate="yes" xml:space="preserve">
          <source>Corresponds to LLVM's &lt;a href=&quot;https://llvm.org/docs/Atomics.html#acquire&quot;&gt;&lt;code&gt;Acquire&lt;/code&gt;&lt;/a&gt; ordering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="911a6e4bb70e2ffe1b7ef863d56f27f01c3fc3e9" translate="yes" xml:space="preserve">
          <source>Corresponds to LLVM's &lt;a href=&quot;https://llvm.org/docs/Atomics.html#acquirerelease&quot;&gt;&lt;code&gt;AcquireRelease&lt;/code&gt;&lt;/a&gt; ordering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7859ab1b7f6c440afd9ae4644e912c2d657bf83d" translate="yes" xml:space="preserve">
          <source>Corresponds to LLVM's &lt;a href=&quot;https://llvm.org/docs/Atomics.html#monotonic&quot;&gt;&lt;code&gt;Monotonic&lt;/code&gt;&lt;/a&gt; ordering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc056c09ee8b569718c5590a2a1623d473b331fa" translate="yes" xml:space="preserve">
          <source>Corresponds to LLVM's &lt;a href=&quot;https://llvm.org/docs/Atomics.html#release&quot;&gt;&lt;code&gt;Release&lt;/code&gt;&lt;/a&gt; ordering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0290a32ed2a42eada11789a34bbee1dead05f50" translate="yes" xml:space="preserve">
          <source>Corresponds to LLVM's &lt;a href=&quot;https://llvm.org/docs/Atomics.html#sequentiallyconsistent&quot;&gt;&lt;code&gt;SequentiallyConsistent&lt;/code&gt;&lt;/a&gt; ordering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09ce2e9304ae5b383f1632fbb44a39ef3060234c" translate="yes" xml:space="preserve">
          <source>Cost is O(1) in the worst case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4565dac88acbb7caf8a606f26f1a40ae8ffd1c83" translate="yes" xml:space="preserve">
          <source>Counting the number of times each character in a string occurs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33935f03e2050408f5414a4ce0ae315ea392ec16" translate="yes" xml:space="preserve">
          <source>Cow</source>
          <target state="translated">Cow</target>
        </trans-unit>
        <trans-unit id="693955de587b375013c6570bf823a68dfd67917d" translate="yes" xml:space="preserve">
          <source>Cow::add</source>
          <target state="translated">Cow::add</target>
        </trans-unit>
        <trans-unit id="7cbe8211cbeef402d10ebf93bfa757f6e2139508" translate="yes" xml:space="preserve">
          <source>Cow::add_assign</source>
          <target state="translated">Cow::add_assign</target>
        </trans-unit>
        <trans-unit id="32e5fc6c56d5604169c226a3a944c073c12140c7" translate="yes" xml:space="preserve">
          <source>Cow::as_ref</source>
          <target state="translated">Cow::as_ref</target>
        </trans-unit>
        <trans-unit id="0a5d6acea679c8099a6bbb9a416bd6729a13bc2f" translate="yes" xml:space="preserve">
          <source>Cow::borrow</source>
          <target state="translated">Cow::borrow</target>
        </trans-unit>
        <trans-unit id="796a45dcb867e9830884b0690f9a272e819f5f3a" translate="yes" xml:space="preserve">
          <source>Cow::borrow_mut</source>
          <target state="translated">Cow::borrow_mut</target>
        </trans-unit>
        <trans-unit id="7e39dc06c961703bf1c460cfd6b96092d922bbde" translate="yes" xml:space="preserve">
          <source>Cow::clamp</source>
          <target state="translated">Cow::clamp</target>
        </trans-unit>
        <trans-unit id="7b15f2c3bfdb27a5cabafc7f0ad588221725b072" translate="yes" xml:space="preserve">
          <source>Cow::clone</source>
          <target state="translated">Cow::clone</target>
        </trans-unit>
        <trans-unit id="966aa7081fe4cf6f42dd4acb0bc7fcfd36a6e01f" translate="yes" xml:space="preserve">
          <source>Cow::clone_from</source>
          <target state="translated">Cow::clone_from</target>
        </trans-unit>
        <trans-unit id="33201e2c4f59d80236b56d492f272cb3c2ab346b" translate="yes" xml:space="preserve">
          <source>Cow::clone_into</source>
          <target state="translated">Cow::clone_into</target>
        </trans-unit>
        <trans-unit id="028a59b6cc6ecfb8febc6dc3dd5d3dc356c53c23" translate="yes" xml:space="preserve">
          <source>Cow::cmp</source>
          <target state="translated">Cow::cmp</target>
        </trans-unit>
        <trans-unit id="2e5b7f3004475d1f8e4955e27f33e2152324f652" translate="yes" xml:space="preserve">
          <source>Cow::default</source>
          <target state="translated">Cow::default</target>
        </trans-unit>
        <trans-unit id="b699cecf1f0d7f529a1a6f64b8a4903dcd1001ed" translate="yes" xml:space="preserve">
          <source>Cow::deref</source>
          <target state="translated">Cow::deref</target>
        </trans-unit>
        <trans-unit id="6bc94223417332709b4b63272dcb8b4305db7891" translate="yes" xml:space="preserve">
          <source>Cow::eq</source>
          <target state="translated">Cow::eq</target>
        </trans-unit>
        <trans-unit id="2d104060ce81cbbb3886aeba50d79a35444450ea" translate="yes" xml:space="preserve">
          <source>Cow::extend</source>
          <target state="translated">Cow::extend</target>
        </trans-unit>
        <trans-unit id="fe60e1a7453821175b1a861b940c910975fc4310" translate="yes" xml:space="preserve">
          <source>Cow::fmt</source>
          <target state="translated">Cow::fmt</target>
        </trans-unit>
        <trans-unit id="fca34a50e1bfcf0f247b1169df9b14f1b8428d49" translate="yes" xml:space="preserve">
          <source>Cow::from</source>
          <target state="translated">Cow::from</target>
        </trans-unit>
        <trans-unit id="e367ea07f6e4d63f248c649b12e294dc43303629" translate="yes" xml:space="preserve">
          <source>Cow::from_iter</source>
          <target state="translated">Cow::from_iter</target>
        </trans-unit>
        <trans-unit id="d12d86dc5a7f9ffe202177b8e115ee33875a2d8d" translate="yes" xml:space="preserve">
          <source>Cow::ge</source>
          <target state="translated">Cow::ge</target>
        </trans-unit>
        <trans-unit id="22818597dcded615134fe9a1b6bb8626b033e296" translate="yes" xml:space="preserve">
          <source>Cow::gt</source>
          <target state="translated">Cow::gt</target>
        </trans-unit>
        <trans-unit id="51cf9f48532dc9da964f91b7522b27baaa2d4c0c" translate="yes" xml:space="preserve">
          <source>Cow::hash</source>
          <target state="translated">Cow::hash</target>
        </trans-unit>
        <trans-unit id="d042eb93c4a4d7f640eab07a196cb05fb390b9df" translate="yes" xml:space="preserve">
          <source>Cow::hash_slice</source>
          <target state="translated">Cow::hash_slice</target>
        </trans-unit>
        <trans-unit id="97fb1be95d12f842dcf3c638a87ba0b2b8944b97" translate="yes" xml:space="preserve">
          <source>Cow::into</source>
          <target state="translated">Cow::into</target>
        </trans-unit>
        <trans-unit id="b8e553eaa3186de0fe51ca5f3c0b4841c5ae5c04" translate="yes" xml:space="preserve">
          <source>Cow::into_owned</source>
          <target state="translated">Cow::into_owned</target>
        </trans-unit>
        <trans-unit id="0e1c80a19711560c1f116de54a1f7e719d1bf442" translate="yes" xml:space="preserve">
          <source>Cow::le</source>
          <target state="translated">Cow::le</target>
        </trans-unit>
        <trans-unit id="93a9c0a2628918700020fecd5abf72577d1de50c" translate="yes" xml:space="preserve">
          <source>Cow::lt</source>
          <target state="translated">Cow::lt</target>
        </trans-unit>
        <trans-unit id="56e7afeac7bd6ef65adc6d32143bb8dab6b08222" translate="yes" xml:space="preserve">
          <source>Cow::max</source>
          <target state="translated">Cow::max</target>
        </trans-unit>
        <trans-unit id="4aaaf9d7dbe72651e1b030b2262eb0e8e8cb78b9" translate="yes" xml:space="preserve">
          <source>Cow::min</source>
          <target state="translated">Cow::min</target>
        </trans-unit>
        <trans-unit id="9ab3103ee1509fd6a54106bb7381607716ed0138" translate="yes" xml:space="preserve">
          <source>Cow::ne</source>
          <target state="translated">Cow::ne</target>
        </trans-unit>
        <trans-unit id="f044809d018419aa69f3a820e029c02c164aa551" translate="yes" xml:space="preserve">
          <source>Cow::partial_cmp</source>
          <target state="translated">Cow::partial_cmp</target>
        </trans-unit>
        <trans-unit id="ebeb9986333e97f2bbde42528a31ea5b0c3c685e" translate="yes" xml:space="preserve">
          <source>Cow::to_mut</source>
          <target state="translated">Cow::to_mut</target>
        </trans-unit>
        <trans-unit id="a3edd74dc1b5e1ddc3c8bf77bc0c1300fbe12c7a" translate="yes" xml:space="preserve">
          <source>Cow::to_owned</source>
          <target state="translated">Cow::to_owned</target>
        </trans-unit>
        <trans-unit id="e88592e59ccc38b4d59be087417232c9110d93ee" translate="yes" xml:space="preserve">
          <source>Cow::to_string</source>
          <target state="translated">Cow::to_string</target>
        </trans-unit>
        <trans-unit id="40b9ec03a5cec2936f5d7f046fb627d8e4fbfe33" translate="yes" xml:space="preserve">
          <source>Cow::try_from</source>
          <target state="translated">Cow::try_from</target>
        </trans-unit>
        <trans-unit id="58e7fdeb9b72b29c39d64b56b36d86e410e88fad" translate="yes" xml:space="preserve">
          <source>Cow::try_into</source>
          <target state="translated">Cow::try_into</target>
        </trans-unit>
        <trans-unit id="1fe64d0caae123b8b82e7a38873038a43e5d637b" translate="yes" xml:space="preserve">
          <source>Cow::type_id</source>
          <target state="translated">Cow::type_id</target>
        </trans-unit>
        <trans-unit id="511047aee6ef07c2cf5bfb5bfce8379f7f4ff0d7" translate="yes" xml:space="preserve">
          <source>Crate std</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f11bdf9ce6198dd51c1c5023a46121d1ac9d8b4" translate="yes" xml:space="preserve">
          <source>Crates</source>
          <target state="translated">Crates</target>
        </trans-unit>
        <trans-unit id="54a760409100eb3d0cf2335a44a83249f918ef6c" translate="yes" xml:space="preserve">
          <source>Crates and source files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81846c0ce3d60d6c98fda1ad99d8e815fa36aed3" translate="yes" xml:space="preserve">
          <source>Crates may also learn about how the C runtime is being linked. Code on MSVC, for example, needs to be compiled differently (e.g. with &lt;code&gt;/MT&lt;/code&gt; or &lt;code&gt;/MD&lt;/code&gt;) depending on the runtime being linked. This is exported currently through the &lt;a href=&quot;conditional-compilation#target_feature&quot;&gt;&lt;code&gt;cfg&lt;/code&gt; attribute &lt;code&gt;target_feature&lt;/code&gt; option&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="106010044d4f1f1beaea337fae0e18c89b67b5dc" translate="yes" xml:space="preserve">
          <source>Create a &lt;a href=&quot;vec/struct.vec&quot;&gt;&lt;code&gt;Vec&lt;/code&gt;&lt;/a&gt; containing a given list of elements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08512da9b9631b9ad0299589cfdce97af650a4af" translate="yes" xml:space="preserve">
          <source>Create a &lt;a href=&quot;vec/struct.vec&quot;&gt;&lt;code&gt;Vec&lt;/code&gt;&lt;/a&gt; from a given element and size:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dadc65fc1cc97ba934751fe27ff9c73111665bb6" translate="yes" xml:space="preserve">
          <source>Create a &lt;em&gt;src/lib.rs&lt;/em&gt; that contains the following, which is the simplest definition of a &lt;code&gt;ThreadPool&lt;/code&gt; struct that we can have for now:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5e05951e26f0ac1f3e1782521ac4d97124e1e43" translate="yes" xml:space="preserve">
          <source>Create a new &lt;code&gt;Context&lt;/code&gt; from a &lt;code&gt;&amp;amp;Waker&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc2b95be4b476076ff98a704cd14c423842d1bc0" translate="yes" xml:space="preserve">
          <source>Create a new project called &lt;em&gt;branches&lt;/em&gt; in your &lt;em&gt;projects&lt;/em&gt; directory to explore the &lt;code&gt;if&lt;/code&gt; expression. In the &lt;em&gt;src/main.rs&lt;/em&gt; file, input the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6018c3ae5328bae6985607148a16666db7ade84b" translate="yes" xml:space="preserve">
          <source>Create a proper HTTP response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d439578ea401a7b7b1ed8ba278f389cb961cb29e" translate="yes" xml:space="preserve">
          <source>Create an integer value from its memory representation as a byte array in native endianness.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edadb155e110b7152a3af83ab6dc9bcd41c5f792" translate="yes" xml:space="preserve">
          <source>Create an integer value from its representation as a byte array in big endian.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79d89966c01183ef583d394ab66736d72e5ab2a4" translate="yes" xml:space="preserve">
          <source>Create an integer value from its representation as a byte array in little endian.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25d9f5bbee57eb46f4d71f4619cd2954dab40b6a" translate="yes" xml:space="preserve">
          <source>Create and run a new project using the conventions of Cargo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4022af3050254311f09f639a107112b87a62cf71" translate="yes" xml:space="preserve">
          <source>Created by &lt;a href=&quot;enum.result#method.iter&quot;&gt;&lt;code&gt;Result::iter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af0c83f28db824845c100a582780b8f20508d394" translate="yes" xml:space="preserve">
          <source>Created by &lt;a href=&quot;enum.result#method.iter_mut&quot;&gt;&lt;code&gt;Result::iter_mut&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09811f267c1ebc50f95d66fc983b0d7082c3ae69" translate="yes" xml:space="preserve">
          <source>Created by the &lt;a href=&quot;fn.stdin&quot;&gt;&lt;code&gt;io::stdin&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa4eda3fc81c73b324209a0ed053e3502c7b6d3a" translate="yes" xml:space="preserve">
          <source>Created by the &lt;a href=&quot;fn.stdout&quot;&gt;&lt;code&gt;io::stdout&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4118ac7e788ef0c9786b67fbda36272b1c4996cd" translate="yes" xml:space="preserve">
          <source>Created with the method &lt;a href=&quot;../primitive.str#method.lines_any&quot;&gt;&lt;code&gt;lines_any&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59262292850307c7c68fd149910ff46990cb490b" translate="yes" xml:space="preserve">
          <source>Created with the method &lt;a href=&quot;../primitive.str#method.match_indices&quot;&gt;&lt;code&gt;match_indices&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69007e7b352974d2ed5a0645adfb2a0e511b43d9" translate="yes" xml:space="preserve">
          <source>Created with the method &lt;a href=&quot;../primitive.str#method.matches&quot;&gt;&lt;code&gt;matches&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c07e4ab70e8dd8054e05dc1dda6b7b088cec14a" translate="yes" xml:space="preserve">
          <source>Created with the method &lt;a href=&quot;../primitive.str#method.rmatch_indices&quot;&gt;&lt;code&gt;rmatch_indices&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8f1b36ba4c6f5f7293de7c9293d9136170acffe" translate="yes" xml:space="preserve">
          <source>Created with the method &lt;a href=&quot;../primitive.str#method.rmatches&quot;&gt;&lt;code&gt;rmatches&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eef49ccb04e77a74dfee92c547a3ffe707fa5c65" translate="yes" xml:space="preserve">
          <source>Created with the method &lt;a href=&quot;../primitive.str#method.rsplit&quot;&gt;&lt;code&gt;rsplit&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d94820cdb27352da5110e5e8ca3318ed87798da3" translate="yes" xml:space="preserve">
          <source>Created with the method &lt;a href=&quot;../primitive.str#method.rsplit_terminator&quot;&gt;&lt;code&gt;rsplit_terminator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd48ff5a5ed05db4cd4900ae8bbab6c4468c965c" translate="yes" xml:space="preserve">
          <source>Created with the method &lt;a href=&quot;../primitive.str#method.rsplitn&quot;&gt;&lt;code&gt;rsplitn&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41150054fb3e04a6eb2f60c89a0c622a8b687e9f" translate="yes" xml:space="preserve">
          <source>Created with the method &lt;a href=&quot;../primitive.str#method.split&quot;&gt;&lt;code&gt;split&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="736af07e54c1a03aed92b1a7eb6db1ffdbce9dfc" translate="yes" xml:space="preserve">
          <source>Created with the method &lt;a href=&quot;../primitive.str#method.split_terminator&quot;&gt;&lt;code&gt;split_terminator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34e66b6ac298ec2a03ac33fa2c496d6b931aa7f7" translate="yes" xml:space="preserve">
          <source>Created with the method &lt;a href=&quot;../primitive.str#method.splitn&quot;&gt;&lt;code&gt;splitn&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dd142425da747e12befd4f5b44fb2a02ff2fd2f" translate="yes" xml:space="preserve">
          <source>Creates I/O objects from raw sockets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a278d518f40bfe407b65ae92472554f0ad43b0e9" translate="yes" xml:space="preserve">
          <source>Creates a &quot;by reference&quot; adaptor for this instance of &lt;code&gt;Read&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8c6aace43e5222b1b4a67c3314eb668fa59a95b" translate="yes" xml:space="preserve">
          <source>Creates a &quot;by reference&quot; adaptor for this instance of &lt;code&gt;Read&lt;/code&gt;. &lt;a href=&quot;../../../io/trait.read#method.by_ref&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa1120735f9b617bfcf4c408c364721e2474cfac" translate="yes" xml:space="preserve">
          <source>Creates a &quot;by reference&quot; adaptor for this instance of &lt;code&gt;Read&lt;/code&gt;. &lt;a href=&quot;../io/trait.read#method.by_ref&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c23950f757a3b5a0564d63c695e29d699148b00" translate="yes" xml:space="preserve">
          <source>Creates a &quot;by reference&quot; adaptor for this instance of &lt;code&gt;Read&lt;/code&gt;. &lt;a href=&quot;io/trait.read#method.by_ref&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0dd31fabcecb658aaa6493cf0457334c216005a" translate="yes" xml:space="preserve">
          <source>Creates a &quot;by reference&quot; adaptor for this instance of &lt;code&gt;Read&lt;/code&gt;. &lt;a href=&quot;trait.read#method.by_ref&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5351601dd7e1d6a711ac1b03e723d4cf003ac2c" translate="yes" xml:space="preserve">
          <source>Creates a &quot;by reference&quot; adaptor for this instance of &lt;code&gt;Write&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9988f2100bdf98ad9b37f6f532ce86603b20f78" translate="yes" xml:space="preserve">
          <source>Creates a &quot;by reference&quot; adaptor for this instance of &lt;code&gt;Write&lt;/code&gt;. &lt;a href=&quot;../../../io/trait.write#method.by_ref&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f47d2f8cb902e7b21c7adcb08944a9e00262efbd" translate="yes" xml:space="preserve">
          <source>Creates a &quot;by reference&quot; adaptor for this instance of &lt;code&gt;Write&lt;/code&gt;. &lt;a href=&quot;../io/trait.write#method.by_ref&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c99cb43cbdda30f4ad3392b170e0ff9d377fdbb7" translate="yes" xml:space="preserve">
          <source>Creates a &quot;by reference&quot; adaptor for this instance of &lt;code&gt;Write&lt;/code&gt;. &lt;a href=&quot;io/trait.write#method.by_ref&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a85a9e9d25d9e345d63fefe60877566ee12ee3a5" translate="yes" xml:space="preserve">
          <source>Creates a &quot;by reference&quot; adaptor for this instance of &lt;code&gt;Write&lt;/code&gt;. &lt;a href=&quot;trait.write#method.by_ref&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f219c50ef6b1636aad391feae92a5a6ba5fcaaa9" translate="yes" xml:space="preserve">
          <source>Creates a &lt;a href=&quot;struct.debugstruct&quot;&gt;&lt;code&gt;DebugStruct&lt;/code&gt;&lt;/a&gt; builder designed to assist with creation of &lt;a href=&quot;trait.debug&quot;&gt;&lt;code&gt;fmt::Debug&lt;/code&gt;&lt;/a&gt; implementations for structs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="739fb641f1f016f93a6f73322b4ce14626637551" translate="yes" xml:space="preserve">
          <source>Creates a &lt;a href=&quot;vec/struct.vec&quot;&gt;&lt;code&gt;Vec&lt;/code&gt;&lt;/a&gt; containing the arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20ac12e51666ff19269f656f8ed337ce37aa8f96" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;, with the &lt;code&gt;Default&lt;/code&gt; value for T.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ffffc37f2ecbb6a8bb4083f12327ca3d6f4223a" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;CString&lt;/code&gt;, pass ownership to an &lt;code&gt;extern&lt;/code&gt; function (via raw pointer), then retake ownership with &lt;code&gt;from_raw&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e697eeab2968b2fe6b1eaad6636bc85accf362d3" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt;, with the &lt;code&gt;Default&lt;/code&gt; value for T.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55a80b9868a6c43d379540049d65f50ea1da2ffd" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Condvar&lt;/code&gt; which is ready to be waited on and notified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7eaba70ca9585d52f8873cbf27e20698cc83ca9" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;DebugList&lt;/code&gt; builder designed to assist with creation of &lt;code&gt;fmt::Debug&lt;/code&gt; implementations for list-like structures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78f2b0bf71bda8bfb83fdfb6f61982d96c436b41" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;DebugMap&lt;/code&gt; builder designed to assist with creation of &lt;code&gt;fmt::Debug&lt;/code&gt; implementations for map-like structures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b223e3e99a64a1329ad13395fb3de1305791f79" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;DebugSet&lt;/code&gt; builder designed to assist with creation of &lt;code&gt;fmt::Debug&lt;/code&gt; implementations for set-like structures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a043481d83beb3910de7ff88ad967a32c4cdea8" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;DebugTuple&lt;/code&gt; builder designed to assist with creation of &lt;code&gt;fmt::Debug&lt;/code&gt; implementations for tuple structs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2e945b534e7387a676cdf2092f05ed3ca7e6a0d" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt;, with the &lt;code&gt;Default&lt;/code&gt; value for T.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c0d085c7250037263700b6cfb18ce731e674d4b" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;PoisonError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e0a49f1052dbc1a3b0a1749902359f56811b9e5" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;RawEntryMut&lt;/code&gt; from the given hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de5c5c1cf0d19ac46ba4373288253b2f05653f7c" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;RawEntryMut&lt;/code&gt; from the given key and its hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62c5d99a4d7585b6ed324067726f3b9bcf468406" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;RawEntryMut&lt;/code&gt; from the given key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="783dd143d9e57f2eac1643efca4369484a4560cb" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt;, with the &lt;code&gt;Default&lt;/code&gt; value for T.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fff5893e4b016c790ee41387abc252e0a3dbbc9" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;SipHasher&lt;/code&gt; that is keyed off the provided keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d2164d0001388156d7dc65bb3766604bcd46f23" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;String&lt;/code&gt; using interpolation of runtime expressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="186312d3e8f02c67bef7a02b5d523802c4aa8934" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; directly from the raw components of another vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d9bce70c0580be8c8b97ba5c3bd8fd776ca7cd1" translate="yes" xml:space="preserve">
          <source>Creates a C string wrapper from a byte slice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2760a55dc42de0ca1b9aa402a75cb2cd901bf4c7" translate="yes" xml:space="preserve">
          <source>Creates a C-compatible string by consuming a byte vector, without checking for interior 0 bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f3450537e212e5ded854c29cc430df9d6399fe6" translate="yes" xml:space="preserve">
          <source>Creates a TCP listener bound to &lt;code&gt;127.0.0.1:80&lt;/code&gt;. If that fails, create a TCP listener bound to &lt;code&gt;127.0.0.1:443&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09ead757efb04dcd3b56b97156680495cc215787" translate="yes" xml:space="preserve">
          <source>Creates a TCP listener bound to &lt;code&gt;127.0.0.1:80&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="125547a7cdfd055c791ab9fe907dbb901276dc4e" translate="yes" xml:space="preserve">
          <source>Creates a UDP socket bound to &lt;code&gt;127.0.0.1:3400&lt;/code&gt; and connect the socket to &lt;code&gt;127.0.0.1:8080&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3e6bdcae553ddb22df2dc99d1291e7f6adae2cb" translate="yes" xml:space="preserve">
          <source>Creates a UDP socket bound to &lt;code&gt;127.0.0.1:3400&lt;/code&gt;. If the socket cannot be bound to that address, create a UDP socket bound to &lt;code&gt;127.0.0.1:3401&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="970a978688cc0f0cc3cd91c8aee2643dc529be5e" translate="yes" xml:space="preserve">
          <source>Creates a UDP socket bound to &lt;code&gt;127.0.0.1:3400&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d67e9f4331cb8a94ca8c11e0fa8d4c1d232fb18" translate="yes" xml:space="preserve">
          <source>Creates a UDP socket bound to &lt;code&gt;127.0.0.1:7878&lt;/code&gt; and read bytes in nonblocking mode:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1151249da77e9f2de50f7481ee50add938a7ab4f" translate="yes" xml:space="preserve">
          <source>Creates a UDP socket from the given address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="795fe524ed6f584d4e9afe0e80df1ee90a45cd0b" translate="yes" xml:space="preserve">
          <source>Creates a Unix Datagram socket which is not bound to any address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d924c364ce8b29f794812fd360b1f7778311ab84" translate="yes" xml:space="preserve">
          <source>Creates a Unix datagram socket bound to the given path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c2cfa537cff8be0489b9b009b909857fe251042" translate="yes" xml:space="preserve">
          <source>Creates a blank new set of options ready for configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3d1a6f5d907d5005528a9e611c70f14eac0e563" translate="yes" xml:space="preserve">
          <source>Creates a consuming iterator, that is, one that moves each key-value pair out of the map in arbitrary order. The map cannot be used after calling this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79b001f20ad5ddba645d473cd2eabf2f0b9fab15" translate="yes" xml:space="preserve">
          <source>Creates a consuming iterator, that is, one that moves each value out of the binary heap in arbitrary order. The binary heap cannot be used after calling this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7feed7f78b7ec26ae1634185d6a9758340531778" translate="yes" xml:space="preserve">
          <source>Creates a consuming iterator, that is, one that moves each value out of the set in arbitrary order. The set cannot be used after calling this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21cd148d772cd2056fdb8294260ce5794f1a496f" translate="yes" xml:space="preserve">
          <source>Creates a consuming iterator, that is, one that moves each value out of the vector (from start to end). The vector cannot be used after calling this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e25f6dea08ae4574fa8e540a54d8cc1337d77224" translate="yes" xml:space="preserve">
          <source>Creates a draining iterator that removes the specified range in the &lt;code&gt;String&lt;/code&gt; and yields the removed &lt;code&gt;chars&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7db96b23148a77de869b5eca7a045e98737fe84f" translate="yes" xml:space="preserve">
          <source>Creates a draining iterator that removes the specified range in the &lt;code&gt;VecDeque&lt;/code&gt; and yields the removed items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30705a0e8a834bf60d65b0e913c943e74e2345a0" translate="yes" xml:space="preserve">
          <source>Creates a draining iterator that removes the specified range in the vector and yields the removed items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="436c8bdec76df1112a2f44268113a4f34c8a8a35" translate="yes" xml:space="preserve">
          <source>Creates a layout by rounding the size of this layout up to a multiple of the layout's alignment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50260a92d64c851dba9e3cd2c96fc0f61579a3fa" translate="yes" xml:space="preserve">
          <source>Creates a layout describing the record for &lt;code&gt;n&lt;/code&gt; instances of &lt;code&gt;self&lt;/code&gt;, with a suitable amount of padding between each to ensure that each instance is given its requested size and alignment. On success, returns &lt;code&gt;(k, offs)&lt;/code&gt; where &lt;code&gt;k&lt;/code&gt; is the layout of the array and &lt;code&gt;offs&lt;/code&gt; is the distance between the start of each element in the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="268f12b9c493a33dcef1cd52c4873aea2c4bfee9" translate="yes" xml:space="preserve">
          <source>Creates a layout describing the record for &lt;code&gt;n&lt;/code&gt; instances of &lt;code&gt;self&lt;/code&gt;, with no padding between each instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ef29cf4bd3ff8c9dc61d9840e7fe86d594cf7ea" translate="yes" xml:space="preserve">
          <source>Creates a layout describing the record for &lt;code&gt;self&lt;/code&gt; followed by &lt;code&gt;next&lt;/code&gt; with no additional padding between the two. Since no padding is inserted, the alignment of &lt;code&gt;next&lt;/code&gt; is irrelevant, and is not incorporated &lt;em&gt;at all&lt;/em&gt; into the resulting layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8a339bd6044081931512d7181022dc336e0d927" translate="yes" xml:space="preserve">
          <source>Creates a layout describing the record for &lt;code&gt;self&lt;/code&gt; followed by &lt;code&gt;next&lt;/code&gt;, including any necessary padding to ensure that &lt;code&gt;next&lt;/code&gt; will be properly aligned. Note that the result layout will satisfy the alignment properties of both &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;next&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9eb164e50415b51b0271091ac7a99d5413e2a1e" translate="yes" xml:space="preserve">
          <source>Creates a layout describing the record for a &lt;code&gt;[T; n]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="389dad686e39af29b9b280293b52a42a6430962d" translate="yes" xml:space="preserve">
          <source>Creates a layout describing the record that can hold a value of the same layout as &lt;code&gt;self&lt;/code&gt;, but that also is aligned to alignment &lt;code&gt;align&lt;/code&gt; (measured in bytes).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e588f25c4e6b7ac7ea5caf6c5e06d4755cf5af31" translate="yes" xml:space="preserve">
          <source>Creates a layout, bypassing all checks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2817fb61697399c19b58cca3a8fdd90cbe8f1971" translate="yes" xml:space="preserve">
          <source>Creates a mutable empty slice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9df76e91971de9dcb6fc67a0fae7b04f68b9134" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;a href=&quot;string/struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; by repeating a string &lt;code&gt;n&lt;/code&gt; times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fd7999bf71d6912e1a04411cb9e145cd825dabf" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;a href=&quot;struct.weak&quot;&gt;&lt;code&gt;Weak&lt;/code&gt;&lt;/a&gt; pointer to this value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="807ffb64a9c1d7c6b34cf14a23c5c2110d7f3f31" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt;, with the &lt;code&gt;Default&lt;/code&gt; value for &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99ef26d0672391b7800bf502312643fb4577ee24" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;AtomicBool&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65045a23e7b234e7546b04c58c4a8f40ab5f175b" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;AtomicPtr&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcf38db8656a4ba5c6c6fe72b32bd43098614713" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;BufReader&lt;/code&gt; with a default buffer capacity. The default is currently 8 KB, but may change in the future.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67804ff6b85e90a2d980b3a1c2e871ccde3859fa" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;BufReader&lt;/code&gt; with the specified buffer capacity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="066e33af0aa472fa3e8c8b27730733cce1804b11" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;BufWriter&lt;/code&gt; with a default buffer capacity. The default is currently 8 KB, but may change in the future.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dda444016d344ac62e443818aad1aa9269ea0cd0" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;BufWriter&lt;/code&gt; with the specified buffer capacity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba8ad7d1fcbae32069c8b306593ac23f6cb511e4" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Cell&lt;/code&gt; containing the given value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f304e05ff89799828ae510c8ed9b70a76d3ac86b" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;DefaultHasher&lt;/code&gt; using &lt;code&gt;new&lt;/code&gt;. See its documentation for more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e776f772fa00078a1230fbf70cf606d2f7f7a82b" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;DefaultHasher&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac1919fbbb2fe7072f84e13a4b91b90e6d25fdc4" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Duration&lt;/code&gt; from the specified number of microseconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1c8945480eb390fc4c3cc7d988b2e7b9adcd43a" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Duration&lt;/code&gt; from the specified number of milliseconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fbbf7fd3c6c92a75e1e34b568a1b924fa36a984" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Duration&lt;/code&gt; from the specified number of nanoseconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfa9562be769593a7e87d38990184c91f9589a6e" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Duration&lt;/code&gt; from the specified number of seconds represented as &lt;code&gt;f32&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47028819bc03f40c46ee37ebefa2ecf952787f7c" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Duration&lt;/code&gt; from the specified number of seconds represented as &lt;code&gt;f64&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e738616afd1d02fb1c01ef1c8da746fbd673198" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Duration&lt;/code&gt; from the specified number of whole seconds and additional nanoseconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="587d29ed6b51190b5b14de549d69d716511e4c67" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Duration&lt;/code&gt; from the specified number of whole seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df5ff87acbb972a65afaee2f4544dd49e05923a9" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;ExitStatus&lt;/code&gt; from the raw underlying &lt;code&gt;i32&lt;/code&gt; return value of a process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52fe5caa89c1904f743c20af8d459d8ea0d54f66" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;ExitStatus&lt;/code&gt; from the raw underlying &lt;code&gt;i32&lt;/code&gt; return value of a process. &lt;a href=&quot;../os/unix/process/trait.exitstatusext#tymethod.from_raw&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64d4e497a4325552204be0953e113e9c4996198e" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;ExitStatus&lt;/code&gt; from the raw underlying &lt;code&gt;u32&lt;/code&gt; return value of a process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b16ec7ae2a57c52f9a63e577ed32017e5ea38296" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;ExitStatus&lt;/code&gt; from the raw underlying &lt;code&gt;u32&lt;/code&gt; return value of a process. &lt;a href=&quot;../os/windows/process/trait.exitstatusext#tymethod.from_raw&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c54c6b6e1ac99a29c5886d973030c90ecbe09703" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;File&lt;/code&gt; instance that shares the same underlying file handle as the existing &lt;code&gt;File&lt;/code&gt; instance. Reads, writes, and seeks will affect both &lt;code&gt;File&lt;/code&gt; instances simultaneously.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc40d753662125fab6bff7ec77e45558fad3313e" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;IoSlice&lt;/code&gt; wrapping a byte slice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6262ac945fe4f065843bdc921d137c7ba882edd8" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;IoSliceMut&lt;/code&gt; wrapping a byte slice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdba9bc8b65ba1c91c154d3143d90612e003ad88" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;LineWriter&lt;/code&gt; with a specified capacity for the internal buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0600662edab1bcab51ac0bc096522a5c92ba496" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;LineWriter&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af68ad9875bc8f87d7804de24b784586df687e95" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;MaybeUninit&amp;lt;T&amp;gt;&lt;/code&gt; in an uninitialized state, with the memory being filled with &lt;code&gt;0&lt;/code&gt; bytes. It depends on &lt;code&gt;T&lt;/code&gt; whether that already makes for proper initialization. For example, &lt;code&gt;MaybeUninit&amp;lt;usize&amp;gt;::zeroed()&lt;/code&gt; is initialized, but &lt;code&gt;MaybeUninit&amp;lt;&amp;amp;'static i32&amp;gt;::zeroed()&lt;/code&gt; is not because references must not be null.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="892753767efd9bdc2117ddd3a626fe350155a2f7" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;MaybeUninit&amp;lt;T&amp;gt;&lt;/code&gt; in an uninitialized state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20fe211b21fb0f95cc5631b2c5906351919cf296" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;MaybeUninit&amp;lt;T&amp;gt;&lt;/code&gt; initialized with the given value. It is safe to call &lt;a href=&quot;#method.assume_init&quot;&gt;&lt;code&gt;assume_init&lt;/code&gt;&lt;/a&gt; on the return value of this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b792bb4fa6b2af9606db216f84b9e37a8238e7e9" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;NonNull&lt;/code&gt; if &lt;code&gt;ptr&lt;/code&gt; is non-null.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d95c9c1a436aaa0561205a0afb98c6b8948e877" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;NonNull&lt;/code&gt; that is dangling, but well-aligned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d88819d9f52fd4c66f2d811b6b36f7817fc8811e" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;NonNull&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57d86a84e8f9fc81ee203b6616499b4d2e65244a" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Once&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb7591bd908639c4722b535363e45ec6207c325b" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;OsString&lt;/code&gt; with the given capacity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="919cf27d5e403554cee61d10d7b01fa674a86681" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;PathBuf&lt;/code&gt; with a given capacity used to create the internal &lt;a href=&quot;../ffi/struct.osstring&quot;&gt;&lt;code&gt;OsString&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;../ffi/struct.osstring#method.with_capacity&quot;&gt;&lt;code&gt;with_capacity&lt;/code&gt;&lt;/a&gt; defined on &lt;a href=&quot;../ffi/struct.osstring&quot;&gt;&lt;code&gt;OsString&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4679da04f2e5f846a389076a683398439f2c0e56" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;RawWaker&lt;/code&gt; from the provided &lt;code&gt;data&lt;/code&gt; pointer and &lt;code&gt;vtable&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a801aae93956af0cf79382be3b6ec17384d1028d" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;RawWakerVTable&lt;/code&gt; from the provided &lt;code&gt;clone&lt;/code&gt;, &lt;code&gt;wake&lt;/code&gt;, &lt;code&gt;wake_by_ref&lt;/code&gt;, and &lt;code&gt;drop&lt;/code&gt; functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e1c3db31c2d4985356e904afc90ec7df1984b0d" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt;, with the &lt;code&gt;Default&lt;/code&gt; value for &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dee07ff67ad42b50be68a36af39da71db45883d5" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;RefCell&lt;/code&gt; containing &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47dfe3dbe40a838fcde041e915587b61249f1c8f" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;RwLock&amp;lt;T&amp;gt;&lt;/code&gt;, with the &lt;code&gt;Default&lt;/code&gt; value for T.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fab82ed27b80c732d845b7856fca2db0a142b3a" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;SipHasher&lt;/code&gt; with the two initial keys set to 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f27a93e3bce25398c6aeabaad6c8fbb1d985fd09" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;String&lt;/code&gt; from a length, capacity, and pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0e9a8184f275034e8388bfc2db4ef549f7b1ab9" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;TcpListener&lt;/code&gt; which will be bound to the specified address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21ffd3461c97ddd32b280b1e4bdabddb6aba4c3a" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;UnixListener&lt;/code&gt; bound to the specified socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c37e43132018207bc1c55fc5e89a8df22def41d8" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Waker&lt;/code&gt; from &lt;a href=&quot;struct.rawwaker&quot;&gt;&lt;code&gt;RawWaker&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c3556ff08f7d3933d722496aa3907894d0a4865" translate="yes" xml:space="preserve">
          <source>Creates a new C-compatible string from a container of bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cbea299bfe056f4851f6faaaa5b6f7f01792572" translate="yes" xml:space="preserve">
          <source>Creates a new I/O error from a known kind of error as well as an arbitrary error payload.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e3f58d1058d0a8d5c466171c49802144489d65c" translate="yes" xml:space="preserve">
          <source>Creates a new I/O object from the given raw socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b73dbc9804f1425c71b1bc03294f1ad048bffb01" translate="yes" xml:space="preserve">
          <source>Creates a new I/O object from the given raw socket. &lt;a href=&quot;../os/windows/io/trait.fromrawsocket#tymethod.from_raw_socket&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="220d966c8b9141dbf040a15d6c27fa1da0d0e577" translate="yes" xml:space="preserve">
          <source>Creates a new IPv4 address from four eight-bit octets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d1f2ebbd78b1218eacbcd32b65130482713b5f6" translate="yes" xml:space="preserve">
          <source>Creates a new IPv6 address from eight 16-bit segments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd4a5e1c955c3d29d62b1bf54c30c12af0f33b88" translate="yes" xml:space="preserve">
          <source>Creates a new asynchronous channel, returning the sender/receiver halves. All data sent on the &lt;a href=&quot;struct.sender&quot;&gt;&lt;code&gt;Sender&lt;/code&gt;&lt;/a&gt; will become available on the &lt;a href=&quot;struct.receiver&quot;&gt;&lt;code&gt;Receiver&lt;/code&gt;&lt;/a&gt; in the same order as it was sent, and no &lt;a href=&quot;struct.sender#method.send&quot;&gt;&lt;code&gt;send&lt;/code&gt;&lt;/a&gt; will block the calling thread (this channel has an &quot;infinite buffer&quot;, unlike &lt;a href=&quot;fn.sync_channel&quot;&gt;&lt;code&gt;sync_channel&lt;/code&gt;&lt;/a&gt;, which will block after its buffer limit is reached). &lt;a href=&quot;struct.receiver#method.recv&quot;&gt;&lt;code&gt;recv&lt;/code&gt;&lt;/a&gt; will block until a message is available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03b6a1d2146db5e3bb25371518d63e22c3bcf186" translate="yes" xml:space="preserve">
          <source>Creates a new atomic integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ea4f763ed1c057748bf8280371702fcd8506516" translate="yes" xml:space="preserve">
          <source>Creates a new barrier that can block a given number of threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f556969e861a3ae31fffd9518d6ddb7677807736" translate="yes" xml:space="preserve">
          <source>Creates a new condition variable which is ready to be waited on and notified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e91e4d581643d3fe8e42947d614855380ad9e9c" translate="yes" xml:space="preserve">
          <source>Creates a new cursor wrapping the provided underlying in-memory buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93fc42f3216ef385e8f760e8392d0fd62480a47f" translate="yes" xml:space="preserve">
          <source>Creates a new directory symlink on the filesystem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d54fc28f0bb3c45b0bcb0838df40649a39736256" translate="yes" xml:space="preserve">
          <source>Creates a new empty &lt;code&gt;String&lt;/code&gt; with a particular capacity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee34e5abab2e9e382cad8495fb44b265f0035951" translate="yes" xml:space="preserve">
          <source>Creates a new empty &lt;code&gt;String&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3b38006c9c30bb30f2c0885562c32a6e57e84c2" translate="yes" xml:space="preserve">
          <source>Creates a new empty hash set which will use the given hasher to hash keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a696c653995891396ceff7bdc0cedf665d4d7b8" translate="yes" xml:space="preserve">
          <source>Creates a new file and write bytes to it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e9dedddb8cb32ff135f15d112729467982b870b" translate="yes" xml:space="preserve">
          <source>Creates a new file symbolic link on the filesystem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95b5c84d202b8a1e904466b47cda004bbc6bd3bc" translate="yes" xml:space="preserve">
          <source>Creates a new hard link on the filesystem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6be82de9e5f4d29f635b099d6dd669a2a38cc45" translate="yes" xml:space="preserve">
          <source>Creates a new hasher.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7c9490f7ef201dae9d1f71e819968ed104cfd1e" translate="yes" xml:space="preserve">
          <source>Creates a new hasher. &lt;a href=&quot;../../hash/trait.buildhasher#tymethod.build_hasher&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a98ba64e6434904541a1b801133b20bbfe38ebe" translate="yes" xml:space="preserve">
          <source>Creates a new hasher. &lt;a href=&quot;trait.buildhasher#tymethod.build_hasher&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dfe1094597c49e654261f7f451a7a06110261fc" translate="yes" xml:space="preserve">
          <source>Creates a new inclusive range. Equivalent to writing &lt;code&gt;start..=end&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58821b72e2e51c721b3c6db984b7740ca5dab0d1" translate="yes" xml:space="preserve">
          <source>Creates a new independently owned handle to the underlying socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ae1d7e669b71e799ba5a526c2ef71d7ca7a26e1" translate="yes" xml:space="preserve">
          <source>Creates a new instance of &lt;code&gt;Permissions&lt;/code&gt; from the given set of Unix permission bits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5285aed433dfd994d5e278468b056c8440fdcf1f" translate="yes" xml:space="preserve">
          <source>Creates a new instance of &lt;code&gt;Permissions&lt;/code&gt; from the given set of Unix permission bits. &lt;a href=&quot;../os/unix/fs/trait.permissionsext#tymethod.from_mode&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b7dde0f15dbe2f13852b6e6fe7adfa5a774e541" translate="yes" xml:space="preserve">
          <source>Creates a new instance of an &lt;code&gt;Error&lt;/code&gt; from a particular OS error code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="090ec365f8526c95fee09bbe70cbe5272537662c" translate="yes" xml:space="preserve">
          <source>Creates a new instance of an &lt;code&gt;RwLock&amp;lt;T&amp;gt;&lt;/code&gt; which is unlocked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0934f187052c5838f578d7b8acc86ca34bb0062e" translate="yes" xml:space="preserve">
          <source>Creates a new instance of an &lt;code&gt;RwLock&amp;lt;T&amp;gt;&lt;/code&gt; which is unlocked. This is equivalent to &lt;a href=&quot;../sync/struct.rwlock#method.new&quot;&gt;&lt;code&gt;RwLock::new&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b9c1501e6d1d498c33d95dd7a3190d2bb32ce34" translate="yes" xml:space="preserve">
          <source>Creates a new instance of an &lt;code&gt;RwLock&amp;lt;T&amp;gt;&lt;/code&gt; which is unlocked. This is equivalent to &lt;a href=&quot;struct.rwlock#method.new&quot;&gt;&lt;code&gt;RwLock::new&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98a01a4e76fd4ab98461fa1e8e27858e43860d30" translate="yes" xml:space="preserve">
          <source>Creates a new iterator that endlessly repeats a single element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d2b90314fbe083a9e4473790c7183aaa20791e5" translate="yes" xml:space="preserve">
          <source>Creates a new iterator that repeats elements of type &lt;code&gt;A&lt;/code&gt; endlessly by applying the provided closure, the repeater, &lt;code&gt;F: FnMut() -&amp;gt; A&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2afdd5b900c10a328e99287fde0c5cc079543868" translate="yes" xml:space="preserve">
          <source>Creates a new iterator where each iteration calls the provided closure &lt;code&gt;F: FnMut() -&amp;gt; Option&amp;lt;T&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40f97e135238d44119ad81ac9e7fef55633480eb" translate="yes" xml:space="preserve">
          <source>Creates a new iterator where each successive item is computed based on the preceding one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a4b55ded306ae8c7bdb808a89b4823992e5a21b" translate="yes" xml:space="preserve">
          <source>Creates a new mutex in an unlocked state ready for use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32fe128c930c0a8e00a665887e0b53d682363e65" translate="yes" xml:space="preserve">
          <source>Creates a new mutex in an unlocked state ready for use. This is equivalent to &lt;a href=&quot;../sync/struct.mutex#method.new&quot;&gt;&lt;code&gt;Mutex::new&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="406da34a5c1ad1ee8dc88e61a792d5d86cf63dcf" translate="yes" xml:space="preserve">
          <source>Creates a new mutex in an unlocked state ready for use. This is equivalent to &lt;a href=&quot;struct.mutex#method.new&quot;&gt;&lt;code&gt;Mutex::new&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb2aab23d519b404b4017f03e7d5bfdff9d42377" translate="yes" xml:space="preserve">
          <source>Creates a new set of options with default mode/security settings for all platforms and also non-recursive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a3300a594f2785c511d931a82dd7b8d76fcd7a1" translate="yes" xml:space="preserve">
          <source>Creates a new socket address from an &lt;a href=&quot;enum.ipaddr&quot;&gt;IP address&lt;/a&gt; and a port number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="122f8cd0e13fae2afa078b3d7723c6dca46bcec5" translate="yes" xml:space="preserve">
          <source>Creates a new socket address from an &lt;a href=&quot;struct.ipv4addr&quot;&gt;IPv4 address&lt;/a&gt; and a port number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c06bb4dc3ca07f1c78c2f7867c71b913f71e6d0" translate="yes" xml:space="preserve">
          <source>Creates a new socket address from an &lt;a href=&quot;struct.ipv6addr&quot;&gt;IPv6 address&lt;/a&gt;, a 16-bit port number, and the &lt;code&gt;flowinfo&lt;/code&gt; and &lt;code&gt;scope_id&lt;/code&gt; fields.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f78961c1b14dec5658f6038a06ead656867dfe98" translate="yes" xml:space="preserve">
          <source>Creates a new symbolic link on the filesystem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c9cbe4d5cfacba596243be7d4deb4fbb32acb9a" translate="yes" xml:space="preserve">
          <source>Creates a new synchronous, bounded channel. All data sent on the &lt;a href=&quot;struct.syncsender&quot;&gt;&lt;code&gt;SyncSender&lt;/code&gt;&lt;/a&gt; will become available on the &lt;a href=&quot;struct.receiver&quot;&gt;&lt;code&gt;Receiver&lt;/code&gt;&lt;/a&gt; in the same order as it was sent. Like asynchronous &lt;a href=&quot;fn.channel&quot;&gt;&lt;code&gt;channel&lt;/code&gt;&lt;/a&gt;s, the &lt;a href=&quot;struct.receiver&quot;&gt;&lt;code&gt;Receiver&lt;/code&gt;&lt;/a&gt; will block until a message becomes available. &lt;code&gt;sync_channel&lt;/code&gt; differs greatly in the semantics of the sender, however.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21f6de81451ef0d17f95f7f4106efa09af7b48a7" translate="yes" xml:space="preserve">
          <source>Creates a new, empty directory at the provided path</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="945f3243b2c22d6f4dd9519a5747f22f3750d6e6" translate="yes" xml:space="preserve">
          <source>Creates a non-zero if the given value is not zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fa836ae5c5f92c449d789f1edbf09aa1933a522" translate="yes" xml:space="preserve">
          <source>Creates a non-zero without checking the value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49f6b0f135c5a8c426aae0ce2b21e7bdfc524a21" translate="yes" xml:space="preserve">
          <source>Creates a null &lt;code&gt;AtomicPtr&amp;lt;T&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deca466084a72d05d7972440c285e92d3c2d4c2a" translate="yes" xml:space="preserve">
          <source>Creates a null mutable raw pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0972c921b1754b1fb8e93881db1741de7c8b4f23" translate="yes" xml:space="preserve">
          <source>Creates a null raw pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d6345617a21947f2dd585db53e034aff08666c8" translate="yes" xml:space="preserve">
          <source>Creates a raw entry builder for the HashMap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c2f1cbf1d8c5719266c60d18a8325c2e105eab0" translate="yes" xml:space="preserve">
          <source>Creates a raw immutable entry builder for the HashMap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a31ea57d2a8983589bf14d88133419ec5560b9ec" translate="yes" xml:space="preserve">
          <source>Creates a splicing iterator that replaces the specified range in the vector with the given &lt;code&gt;replace_with&lt;/code&gt; iterator and yields the removed items. &lt;code&gt;replace_with&lt;/code&gt; does not need to be the same length as &lt;code&gt;range&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afcc57804a946c4d33c3d361e9c455c47ae9cb43" translate="yes" xml:space="preserve">
          <source>Creates a string slice from another string slice, bypassing safety checks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3646bd3738d7152ad6c8e17b557c9675d1890f47" translate="yes" xml:space="preserve">
          <source>Creates a string slice from another string slice, bypassing safety checks. This is generally not recommended, use with caution! For a safe alternative see &lt;a href=&quot;primitive.str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;ops/trait.indexmut&quot;&gt;&lt;code&gt;IndexMut&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ffd3724d14d9663dd4dd20bb79f46768128de94" translate="yes" xml:space="preserve">
          <source>Creates a value from an iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86b45d723ada6032ddda61cb4075fe4aa6481503" translate="yes" xml:space="preserve">
          <source>Creates a value from an iterator. &lt;a href=&quot;../../iter/trait.fromiterator#tymethod.from_iter&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b460defa0cfe89fc45b1019f70c0de532f4665e7" translate="yes" xml:space="preserve">
          <source>Creates a value from an iterator. &lt;a href=&quot;../iter/trait.fromiterator#tymethod.from_iter&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68ead759474d50aa9af7cd8a9bb5d6c8b267d451" translate="yes" xml:space="preserve">
          <source>Creates a value from an iterator. &lt;a href=&quot;iter/trait.fromiterator#tymethod.from_iter&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6bf095f2992debd28c7dd9b9615a3e68c8b76bb" translate="yes" xml:space="preserve">
          <source>Creates a value initialized to zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a74aca8e3aab96aec6f571ad85233674581c4e05" translate="yes" xml:space="preserve">
          <source>Creates a value whose bytes are all zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="380f1574904b16455bbeab5eb0b571ad6332ee78" translate="yes" xml:space="preserve">
          <source>Creates a vector by repeating a slice &lt;code&gt;n&lt;/code&gt; times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="275bac338dcc2aef63e43260859dad33e53cca0b" translate="yes" xml:space="preserve">
          <source>Creates an &lt;a href=&quot;../../../ffi/struct.osstr&quot;&gt;&lt;code&gt;OsStr&lt;/code&gt;&lt;/a&gt; from a byte slice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be1b3f7ab07e5ef5645e313a90eae6b95bf029e4" translate="yes" xml:space="preserve">
          <source>Creates an &lt;a href=&quot;../../../ffi/struct.osstring&quot;&gt;&lt;code&gt;OsString&lt;/code&gt;&lt;/a&gt; from a byte vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bd08d7cc02a88eedb45d338293a6be4ac06701d" translate="yes" xml:space="preserve">
          <source>Creates an &lt;code&gt;AtomicBool&lt;/code&gt; initialized to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f4908e8448e32ede6cb4dfbc73dea7c7a9a149a" translate="yes" xml:space="preserve">
          <source>Creates an &lt;code&gt;IpAddr::V4&lt;/code&gt; from a four element byte array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c1a70ac99f4439a3e6c20e5c57811ce46b21371" translate="yes" xml:space="preserve">
          <source>Creates an &lt;code&gt;IpAddr::V6&lt;/code&gt; from a sixteen element byte array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a54657ca21fad91a9d6896f8b9745db4a9a8800d" translate="yes" xml:space="preserve">
          <source>Creates an &lt;code&gt;IpAddr::V6&lt;/code&gt; from an eight element 16-bit array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63a40ca4e488c7f2a99183e03a9cf5b1a5448821" translate="yes" xml:space="preserve">
          <source>Creates an &lt;code&gt;OsString&lt;/code&gt; from a potentially ill-formed UTF-16 slice of 16-bit code units.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86cd6d88f63dff9ff2335ba9c15edfda38d93082" translate="yes" xml:space="preserve">
          <source>Creates an &lt;code&gt;OsString&lt;/code&gt; from a potentially ill-formed UTF-16 slice of 16-bit code units. &lt;a href=&quot;../os/windows/ffi/trait.osstringext#tymethod.from_wide&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c78ffdce16186170dfcd879c0340a5fb5c728160" translate="yes" xml:space="preserve">
          <source>Creates an &lt;code&gt;UnsafeCell&lt;/code&gt;, with the &lt;code&gt;Default&lt;/code&gt; value for T.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3a690446edba9f0d3909eaaea02ff7cfbfd8000" translate="yes" xml:space="preserve">
          <source>Creates an [&lt;code&gt;OsStr&lt;/code&gt;] from a byte slice. &lt;a href=&quot;../os/unix/ffi/trait.osstrext#tymethod.from_bytes&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99abec94729a1f1dba3d0ceed4887b7f19b9fd72" translate="yes" xml:space="preserve">
          <source>Creates an [&lt;code&gt;OsString&lt;/code&gt;] from a byte vector. &lt;a href=&quot;../os/unix/ffi/trait.osstringext#tymethod.from_vec&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d50e595b20fbf8128787a8a9d153893c3a0e105" translate="yes" xml:space="preserve">
          <source>Creates an adaptor which will chain this stream with another.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f8582e419fac49a344e5a552c7942c7ebf7db20" translate="yes" xml:space="preserve">
          <source>Creates an adaptor which will chain this stream with another. &lt;a href=&quot;../../../io/trait.read#method.chain&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80672abb092b9cfaa17064f033cb8c86bc68a5db" translate="yes" xml:space="preserve">
          <source>Creates an adaptor which will chain this stream with another. &lt;a href=&quot;../io/trait.read#method.chain&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8912a7fe0b81ea69c427f6b4432668c67c61f2ff" translate="yes" xml:space="preserve">
          <source>Creates an adaptor which will chain this stream with another. &lt;a href=&quot;io/trait.read#method.chain&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d49e069cc25b66f83683548ee5c27230f94ae3d" translate="yes" xml:space="preserve">
          <source>Creates an adaptor which will chain this stream with another. &lt;a href=&quot;trait.read#method.chain&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8e7b09ba78d3a4187040fa5bdd78cc9268c123d" translate="yes" xml:space="preserve">
          <source>Creates an adaptor which will read at most &lt;code&gt;limit&lt;/code&gt; bytes from it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44239cbc05f793ae1014ef137a8e06c9b960e67e" translate="yes" xml:space="preserve">
          <source>Creates an adaptor which will read at most &lt;code&gt;limit&lt;/code&gt; bytes from it. &lt;a href=&quot;../../../io/trait.read#method.take&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f4ba547b4d83c73219171797f1f46e7439d3d52" translate="yes" xml:space="preserve">
          <source>Creates an adaptor which will read at most &lt;code&gt;limit&lt;/code&gt; bytes from it. &lt;a href=&quot;../io/trait.read#method.take&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7173249f15299f63a5b7a066dc19a7f53f4f3099" translate="yes" xml:space="preserve">
          <source>Creates an adaptor which will read at most &lt;code&gt;limit&lt;/code&gt; bytes from it. &lt;a href=&quot;io/trait.read#method.take&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="542e0983f19cd1c5c3e1c575b4a757f9545cb208" translate="yes" xml:space="preserve">
          <source>Creates an adaptor which will read at most &lt;code&gt;limit&lt;/code&gt; bytes from it. &lt;a href=&quot;trait.read#method.take&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fa5e80b796110bc6ca6cc21739068866e288136" translate="yes" xml:space="preserve">
          <source>Creates an empty &lt;code&gt;BTreeMap&amp;lt;K, V&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5728ef084eb4d9df1c3cbf35a05a96d08607d0fb" translate="yes" xml:space="preserve">
          <source>Creates an empty &lt;code&gt;BinaryHeap&amp;lt;T&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="261dd3ff68938722d66541ffdeba02c75fbc4e03" translate="yes" xml:space="preserve">
          <source>Creates an empty &lt;code&gt;BinaryHeap&lt;/code&gt; as a max-heap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7365f843dbfeecf17e7270c6762b8ef2a9e1cf67" translate="yes" xml:space="preserve">
          <source>Creates an empty &lt;code&gt;BinaryHeap&lt;/code&gt; with a specific capacity. This preallocates enough memory for &lt;code&gt;capacity&lt;/code&gt; elements, so that the &lt;code&gt;BinaryHeap&lt;/code&gt; does not have to be reallocated until it contains at least that many values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc755b21b925553cb116b1325f5f10c93de0ada8" translate="yes" xml:space="preserve">
          <source>Creates an empty &lt;code&gt;CString&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ae6abf6b412a9ee5dd80d0817603de0df46470d" translate="yes" xml:space="preserve">
          <source>Creates an empty &lt;code&gt;HashMap&amp;lt;K, V, S&amp;gt;&lt;/code&gt;, with the &lt;code&gt;Default&lt;/code&gt; value for the hasher.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d50e8dcf216c02291d96c26afe1ccb4b3497cccb" translate="yes" xml:space="preserve">
          <source>Creates an empty &lt;code&gt;HashMap&lt;/code&gt; which will use the given hash builder to hash keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d96674b5613aa40744681fcae64913c07555af5b" translate="yes" xml:space="preserve">
          <source>Creates an empty &lt;code&gt;HashMap&lt;/code&gt; with the specified capacity, using &lt;code&gt;hash_builder&lt;/code&gt; to hash the keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84bb5f481e637e7a0d3c30b5565d9fa58ecf4378" translate="yes" xml:space="preserve">
          <source>Creates an empty &lt;code&gt;HashMap&lt;/code&gt; with the specified capacity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33a902e3dd301b27e3ae1af3b9dbbdebf73aa03a" translate="yes" xml:space="preserve">
          <source>Creates an empty &lt;code&gt;HashMap&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd7abb3484f414de2d9e0899bc14e583b4f71085" translate="yes" xml:space="preserve">
          <source>Creates an empty &lt;code&gt;HashSet&amp;lt;T, S&amp;gt;&lt;/code&gt; with the &lt;code&gt;Default&lt;/code&gt; value for the hasher.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15c23107876c26b04afb1ec8e8c7cc3a1c12da06" translate="yes" xml:space="preserve">
          <source>Creates an empty &lt;code&gt;HashSet&lt;/code&gt; with the specified capacity, using &lt;code&gt;hasher&lt;/code&gt; to hash the keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7b8c1477ec1597759e1735939be2c5e4eb618e8" translate="yes" xml:space="preserve">
          <source>Creates an empty &lt;code&gt;HashSet&lt;/code&gt; with the specified capacity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c706136c38eb4a7a81f135f87cd76d0dc0ff283" translate="yes" xml:space="preserve">
          <source>Creates an empty &lt;code&gt;HashSet&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65fdf9a5df8c011f5a192763a7d1bc4f06f8da92" translate="yes" xml:space="preserve">
          <source>Creates an empty &lt;code&gt;LinkedList&amp;lt;T&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="721f7cb37286ae23c9965a0bafd49f3776edc3de" translate="yes" xml:space="preserve">
          <source>Creates an empty &lt;code&gt;LinkedList&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb6653f921c749ed5a57dfd4d033cefb798302c7" translate="yes" xml:space="preserve">
          <source>Creates an empty &lt;code&gt;OsStr&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c875c188f82cf96799dc90db3571410e9bfa42c" translate="yes" xml:space="preserve">
          <source>Creates an empty &lt;code&gt;String&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de06d15165ef983b354799ed99f0ec0b2630bc1d" translate="yes" xml:space="preserve">
          <source>Creates an empty &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39ad4c24e5f6d3768e9ec89dfb52cce051a87c17" translate="yes" xml:space="preserve">
          <source>Creates an empty &lt;code&gt;VecDeque&amp;lt;T&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90b33af60ebb2746fceb1fad2875d0ac763f2c3a" translate="yes" xml:space="preserve">
          <source>Creates an empty &lt;code&gt;VecDeque&lt;/code&gt; with space for at least &lt;code&gt;capacity&lt;/code&gt; elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a15a30e4696b0eb19de54cd9b608e3905b605173" translate="yes" xml:space="preserve">
          <source>Creates an empty &lt;code&gt;VecDeque&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61db4431137176e0d653a8c7c92dd31a11839b46" translate="yes" xml:space="preserve">
          <source>Creates an empty mutable str</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76ff6cbdf33604612589914ffefc9a334987b5f8" translate="yes" xml:space="preserve">
          <source>Creates an empty slice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="926452cb81fff4032fd679a763d4468c010af3e3" translate="yes" xml:space="preserve">
          <source>Creates an empty str</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbbd7335ee0cae3e7d2c8921dae6ec13eee3098d" translate="yes" xml:space="preserve">
          <source>Creates an instance of a reader that infinitely repeats one byte.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed05fe75dd08d0f09463440c9e260cf143bb5371" translate="yes" xml:space="preserve">
          <source>Creates an instance of a writer which will successfully consume all data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="612ac638dfc6f61171e4ade14a39aee9de3c86e8" translate="yes" xml:space="preserve">
          <source>Creates an iterator from a value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="746df43ae565a001dbd7c52535d12aa3e5bce3b0" translate="yes" xml:space="preserve">
          <source>Creates an iterator from a value. &lt;a href=&quot;../../../iter/trait.intoiterator#tymethod.into_iter&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5369e3d175d5c548aa5e8c2271668c6389bca3ce" translate="yes" xml:space="preserve">
          <source>Creates an iterator from a value. &lt;a href=&quot;../../iter/trait.intoiterator#tymethod.into_iter&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="536714da76d5c3556d82cd82157dbfe4ea42ccaf" translate="yes" xml:space="preserve">
          <source>Creates an iterator from a value. &lt;a href=&quot;../iter/trait.intoiterator#tymethod.into_iter&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f0e3b2a4b4d7341514158da4eccc972bdcc0d7e" translate="yes" xml:space="preserve">
          <source>Creates an iterator from a value. &lt;a href=&quot;iter/trait.intoiterator#tymethod.into_iter&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d75f1b6b7004a22f81618b76b0a4e999397d5e5" translate="yes" xml:space="preserve">
          <source>Creates an iterator from a value. &lt;a href=&quot;trait.intoiterator#tymethod.into_iter&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98a1361ac2f65ab1e66d6530065101b4c213e1d8" translate="yes" xml:space="preserve">
          <source>Creates an iterator over the UTF-16 encoded code points in &lt;code&gt;iter&lt;/code&gt;, returning unpaired surrogates as &lt;code&gt;Err&lt;/code&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d37ca88895d3844b78db329a20f8fac166b3aa4" translate="yes" xml:space="preserve">
          <source>Creates an iterator starting at the same point, but stepping by the given amount at each iteration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f17ef1ee9863db627a338eeefe396fb5cc50f8c5" translate="yes" xml:space="preserve">
          <source>Creates an iterator starting at the same point, but stepping by the given amount at each iteration. &lt;a href=&quot;../../../iter/trait.iterator#method.step_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f589f8d0b54db9b2f92d55b74e7e58b0dcda9ce" translate="yes" xml:space="preserve">
          <source>Creates an iterator starting at the same point, but stepping by the given amount at each iteration. &lt;a href=&quot;../../iter/trait.iterator#method.step_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07feb7eb7a6a35e67d359c9501ab89944e8fd669" translate="yes" xml:space="preserve">
          <source>Creates an iterator starting at the same point, but stepping by the given amount at each iteration. &lt;a href=&quot;../iter/trait.iterator#method.step_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eab9a86c7e75870ef57ae080e97a684f73181222" translate="yes" xml:space="preserve">
          <source>Creates an iterator starting at the same point, but stepping by the given amount at each iteration. &lt;a href=&quot;iter/trait.iterator#method.step_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9498cab2fe705faff6250896d0984200807b7ea2" translate="yes" xml:space="preserve">
          <source>Creates an iterator starting at the same point, but stepping by the given amount at each iteration. &lt;a href=&quot;trait.iterator#method.step_by&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="212a5e49022b35d12b2b52c0624cc5708bfe3320" translate="yes" xml:space="preserve">
          <source>Creates an iterator that &lt;a href=&quot;#method.skip&quot;&gt;&lt;code&gt;skip&lt;/code&gt;&lt;/a&gt;s elements based on a predicate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84ef6ca8c1c61986aa09032d67b0dd510b0a6037" translate="yes" xml:space="preserve">
          <source>Creates an iterator that [&lt;code&gt;skip&lt;/code&gt;]s elements based on a predicate. &lt;a href=&quot;../../../iter/trait.iterator#method.skip_while&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d8a610addd54e7198873c3ebbe296aba0c43751" translate="yes" xml:space="preserve">
          <source>Creates an iterator that [&lt;code&gt;skip&lt;/code&gt;]s elements based on a predicate. &lt;a href=&quot;../../iter/trait.iterator#method.skip_while&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5d2aa3aad94dd80fba1c1bcc236a49962eb3e73" translate="yes" xml:space="preserve">
          <source>Creates an iterator that [&lt;code&gt;skip&lt;/code&gt;]s elements based on a predicate. &lt;a href=&quot;../iter/trait.iterator#method.skip_while&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eebdaeb89f486bbfb7b00483e5f44d76ca2a3dcd" translate="yes" xml:space="preserve">
          <source>Creates an iterator that [&lt;code&gt;skip&lt;/code&gt;]s elements based on a predicate. &lt;a href=&quot;iter/trait.iterator#method.skip_while&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a496e3d6c62a122b26e66cb7f66c74b067a7120d" translate="yes" xml:space="preserve">
          <source>Creates an iterator that [&lt;code&gt;skip&lt;/code&gt;]s elements based on a predicate. &lt;a href=&quot;trait.iterator#method.skip_while&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0489206c165b2312b66b1e40a33b3df30c352b6" translate="yes" xml:space="preserve">
          <source>Creates an iterator that both filters and maps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06492aa1b9d09e8e683b0f58506357ffad969205" translate="yes" xml:space="preserve">
          <source>Creates an iterator that both filters and maps. &lt;a href=&quot;../../../iter/trait.iterator#method.filter_map&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f3679d48d6c69f3b2b276b4b61179b60109e7ad" translate="yes" xml:space="preserve">
          <source>Creates an iterator that both filters and maps. &lt;a href=&quot;../../iter/trait.iterator#method.filter_map&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39aa8dd7a7c630c104252bf7b3644592d5bfc847" translate="yes" xml:space="preserve">
          <source>Creates an iterator that both filters and maps. &lt;a href=&quot;../iter/trait.iterator#method.filter_map&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4942a6b6f64e0b296501d37deb64a77ea33429a" translate="yes" xml:space="preserve">
          <source>Creates an iterator that both filters and maps. &lt;a href=&quot;iter/trait.iterator#method.filter_map&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eba61035ef45ec8e34c6de7c67b5676eec96e49d" translate="yes" xml:space="preserve">
          <source>Creates an iterator that both filters and maps. &lt;a href=&quot;trait.iterator#method.filter_map&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f225657bbf104af01a26cea9c236b21020f326b5" translate="yes" xml:space="preserve">
          <source>Creates an iterator that flattens nested structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03c23602f35638d9ae0af465ee16652e06e702f7" translate="yes" xml:space="preserve">
          <source>Creates an iterator that flattens nested structure. &lt;a href=&quot;../../../iter/trait.iterator#method.flatten&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="176c478c721d7b4c22958591f469995d0afd217e" translate="yes" xml:space="preserve">
          <source>Creates an iterator that flattens nested structure. &lt;a href=&quot;../../iter/trait.iterator#method.flatten&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bd5e639354a0492fd2f1d73938a279795b54cff" translate="yes" xml:space="preserve">
          <source>Creates an iterator that flattens nested structure. &lt;a href=&quot;../iter/trait.iterator#method.flatten&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6358d1beff6d17af778f8e09b120b70e3dd71bda" translate="yes" xml:space="preserve">
          <source>Creates an iterator that flattens nested structure. &lt;a href=&quot;iter/trait.iterator#method.flatten&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cade14ba41a3da4bd71d2091e9ff2d17f6d56f8f" translate="yes" xml:space="preserve">
          <source>Creates an iterator that flattens nested structure. &lt;a href=&quot;trait.iterator#method.flatten&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5065b2759d56578711f5663f0aadc556ea6c12e9" translate="yes" xml:space="preserve">
          <source>Creates an iterator that lazily generates a value exactly once by invoking the provided closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="137f6e475b55a786362f571d7e19a9cbbe495f3a" translate="yes" xml:space="preserve">
          <source>Creates an iterator that skips the first &lt;code&gt;n&lt;/code&gt; elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d0dfde1ccf460c40bd689c43bed61a53d9b1249" translate="yes" xml:space="preserve">
          <source>Creates an iterator that skips the first &lt;code&gt;n&lt;/code&gt; elements. &lt;a href=&quot;../../../iter/trait.iterator#method.skip&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a78622430eaf407fb8010e8367a558363a9f904a" translate="yes" xml:space="preserve">
          <source>Creates an iterator that skips the first &lt;code&gt;n&lt;/code&gt; elements. &lt;a href=&quot;../../iter/trait.iterator#method.skip&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea90fd9ac002b59d6ec82167ec576c6cbff9ad6e" translate="yes" xml:space="preserve">
          <source>Creates an iterator that skips the first &lt;code&gt;n&lt;/code&gt; elements. &lt;a href=&quot;../iter/trait.iterator#method.skip&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3193f1935e1a72d0b2cd3c347b32cee78974f8a0" translate="yes" xml:space="preserve">
          <source>Creates an iterator that skips the first &lt;code&gt;n&lt;/code&gt; elements. &lt;a href=&quot;iter/trait.iterator#method.skip&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c28ff265211a163d4a9545a51c40a99d73676488" translate="yes" xml:space="preserve">
          <source>Creates an iterator that skips the first &lt;code&gt;n&lt;/code&gt; elements. &lt;a href=&quot;trait.iterator#method.skip&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dda645466af67eab6fc1aac43427506d197b8fd" translate="yes" xml:space="preserve">
          <source>Creates an iterator that works like map, but flattens nested structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="388223dc84d5377baf43f4817c30fd58b59d0344" translate="yes" xml:space="preserve">
          <source>Creates an iterator that works like map, but flattens nested structure. &lt;a href=&quot;../../../iter/trait.iterator#method.flat_map&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94cbc2cd8c52dfd69c70bb2750877f99b83ca1a3" translate="yes" xml:space="preserve">
          <source>Creates an iterator that works like map, but flattens nested structure. &lt;a href=&quot;../../iter/trait.iterator#method.flat_map&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc4207452d5e80483557f5fb875de17444c6f447" translate="yes" xml:space="preserve">
          <source>Creates an iterator that works like map, but flattens nested structure. &lt;a href=&quot;../iter/trait.iterator#method.flat_map&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2be42476fdf9b971e829ea11ce8d7bb1fc5881e" translate="yes" xml:space="preserve">
          <source>Creates an iterator that works like map, but flattens nested structure. &lt;a href=&quot;iter/trait.iterator#method.flat_map&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f4dd12bd17c139dd66864290f91ff8c7838e685" translate="yes" xml:space="preserve">
          <source>Creates an iterator that works like map, but flattens nested structure. &lt;a href=&quot;trait.iterator#method.flat_map&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="481df8a265f7c4ab747b7cfa05930432b7765fdc" translate="yes" xml:space="preserve">
          <source>Creates an iterator that yields an element exactly once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67495929d54726a36a1f85df47900c9ad76aa4dd" translate="yes" xml:space="preserve">
          <source>Creates an iterator that yields elements based on a predicate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="defdf8642db7a873bf62755d42d204b3295db3ac" translate="yes" xml:space="preserve">
          <source>Creates an iterator that yields elements based on a predicate. &lt;a href=&quot;../../../iter/trait.iterator#method.take_while&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a8a063d539723e40e04833f416f61856f873583" translate="yes" xml:space="preserve">
          <source>Creates an iterator that yields elements based on a predicate. &lt;a href=&quot;../../iter/trait.iterator#method.take_while&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db2f2b739457e0508cf1d24d6734468b0d3243db" translate="yes" xml:space="preserve">
          <source>Creates an iterator that yields elements based on a predicate. &lt;a href=&quot;../iter/trait.iterator#method.take_while&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3401570a23cc826789ad67dd6c078e36f64fc106" translate="yes" xml:space="preserve">
          <source>Creates an iterator that yields elements based on a predicate. &lt;a href=&quot;iter/trait.iterator#method.take_while&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85e064cef19a761bfe195fe697314f5e34cd5878" translate="yes" xml:space="preserve">
          <source>Creates an iterator that yields elements based on a predicate. &lt;a href=&quot;trait.iterator#method.take_while&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3abd3eb44fc09b94fd3919a99010944508f3869e" translate="yes" xml:space="preserve">
          <source>Creates an iterator that yields its first &lt;code&gt;n&lt;/code&gt; elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="727a4330530572cbe05abfcafba027ed23e39fbb" translate="yes" xml:space="preserve">
          <source>Creates an iterator that yields its first &lt;code&gt;n&lt;/code&gt; elements. &lt;a href=&quot;../../../iter/trait.iterator#method.take&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce6d9e2f07ca59ad7288f807032ac57c774febfe" translate="yes" xml:space="preserve">
          <source>Creates an iterator that yields its first &lt;code&gt;n&lt;/code&gt; elements. &lt;a href=&quot;../../iter/trait.iterator#method.take&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01a6c1d55ee3c08ecd1083fac99d461d4009dd08" translate="yes" xml:space="preserve">
          <source>Creates an iterator that yields its first &lt;code&gt;n&lt;/code&gt; elements. &lt;a href=&quot;../iter/trait.iterator#method.take&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7758fe43ae5eb1c90b40d8cf2cf3bd802e7a40f" translate="yes" xml:space="preserve">
          <source>Creates an iterator that yields its first &lt;code&gt;n&lt;/code&gt; elements. &lt;a href=&quot;iter/trait.iterator#method.take&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa3e3041fb11f828e6981127fb881a4d418183f7" translate="yes" xml:space="preserve">
          <source>Creates an iterator that yields its first &lt;code&gt;n&lt;/code&gt; elements. &lt;a href=&quot;trait.iterator#method.take&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e65fdbcde9c2de367244cdea69f84798872618af" translate="yes" xml:space="preserve">
          <source>Creates an iterator that yields nothing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd40bec1b1d98323abcce05b3546f71b0fe656c8" translate="yes" xml:space="preserve">
          <source>Creates an iterator which &lt;a href=&quot;../clone/trait.clone#tymethod.clone&quot;&gt;&lt;code&gt;clone&lt;/code&gt;&lt;/a&gt;s all of its elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e14aeeb803a57cf9ed73fa566d29a326c81840f9" translate="yes" xml:space="preserve">
          <source>Creates an iterator which [&lt;code&gt;clone&lt;/code&gt;]s all of its elements. &lt;a href=&quot;../../../iter/trait.iterator#method.cloned&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c903d6f30bfd038325abdf793aaea4685a66c583" translate="yes" xml:space="preserve">
          <source>Creates an iterator which [&lt;code&gt;clone&lt;/code&gt;]s all of its elements. &lt;a href=&quot;../../iter/trait.iterator#method.cloned&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60eadf2efce07a8610ea80b7b2128257a935f74d" translate="yes" xml:space="preserve">
          <source>Creates an iterator which [&lt;code&gt;clone&lt;/code&gt;]s all of its elements. &lt;a href=&quot;../iter/trait.iterator#method.cloned&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ecfb075d57c46101ca32423be3f3875a865527a" translate="yes" xml:space="preserve">
          <source>Creates an iterator which [&lt;code&gt;clone&lt;/code&gt;]s all of its elements. &lt;a href=&quot;iter/trait.iterator#method.cloned&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba7ed3ea63dc141c819c724858803e7719ef08a1" translate="yes" xml:space="preserve">
          <source>Creates an iterator which [&lt;code&gt;clone&lt;/code&gt;]s all of its elements. &lt;a href=&quot;trait.iterator#method.cloned&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bcebcc930446d03010dd3c99ca8269fe10f63ee" translate="yes" xml:space="preserve">
          <source>Creates an iterator which can use &lt;code&gt;peek&lt;/code&gt; to look at the next element of the iterator without consuming it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e77c8c5308a9251dbac33ad2501fcd92d5ea2e43" translate="yes" xml:space="preserve">
          <source>Creates an iterator which can use &lt;code&gt;peek&lt;/code&gt; to look at the next element of the iterator without consuming it. &lt;a href=&quot;../../../iter/trait.iterator#method.peekable&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="827658326eed969fcd2b07f339b3f06a3363accd" translate="yes" xml:space="preserve">
          <source>Creates an iterator which can use &lt;code&gt;peek&lt;/code&gt; to look at the next element of the iterator without consuming it. &lt;a href=&quot;../../iter/trait.iterator#method.peekable&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99b6a6dcdff6d8fedc8d00ab2647f70dc162b8c3" translate="yes" xml:space="preserve">
          <source>Creates an iterator which can use &lt;code&gt;peek&lt;/code&gt; to look at the next element of the iterator without consuming it. &lt;a href=&quot;../iter/trait.iterator#method.peekable&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8d594d922785af5cd7bd114969860d4fa300493" translate="yes" xml:space="preserve">
          <source>Creates an iterator which can use &lt;code&gt;peek&lt;/code&gt; to look at the next element of the iterator without consuming it. &lt;a href=&quot;iter/trait.iterator#method.peekable&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6023b7df688365014948465f05370132dbfa3a86" translate="yes" xml:space="preserve">
          <source>Creates an iterator which can use &lt;code&gt;peek&lt;/code&gt; to look at the next element of the iterator without consuming it. &lt;a href=&quot;trait.iterator#method.peekable&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c6ef1828bd1e769e509aac448541e055bb78dce" translate="yes" xml:space="preserve">
          <source>Creates an iterator which copies all of its elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="882d6773fdc39898c05736fb353d6bc86da4aa86" translate="yes" xml:space="preserve">
          <source>Creates an iterator which copies all of its elements. &lt;a href=&quot;../../../iter/trait.iterator#method.copied&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f35f2d9a6f73755bbeafb8494fd1d16dbc378ed" translate="yes" xml:space="preserve">
          <source>Creates an iterator which copies all of its elements. &lt;a href=&quot;../../iter/trait.iterator#method.copied&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88a049897b0850ff1c4d35cc183bcbbd1e25e3ac" translate="yes" xml:space="preserve">
          <source>Creates an iterator which copies all of its elements. &lt;a href=&quot;../iter/trait.iterator#method.copied&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee79d2c1b13c6f7e6bea368f647deef264895c6a" translate="yes" xml:space="preserve">
          <source>Creates an iterator which copies all of its elements. &lt;a href=&quot;iter/trait.iterator#method.copied&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdd99b99a28a313b887146457bfe7663e9ca17fa" translate="yes" xml:space="preserve">
          <source>Creates an iterator which copies all of its elements. &lt;a href=&quot;trait.iterator#method.copied&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2e342ae274abdf1bc72d2e4ae1336161a4b7298" translate="yes" xml:space="preserve">
          <source>Creates an iterator which ends after the first &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32af1e82554414879cea343145cf11fbb6bb9348" translate="yes" xml:space="preserve">
          <source>Creates an iterator which ends after the first [&lt;code&gt;None&lt;/code&gt;]. &lt;a href=&quot;../../../iter/trait.iterator#method.fuse&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91cead2ea0727b6136acc0637707923b84f2793f" translate="yes" xml:space="preserve">
          <source>Creates an iterator which ends after the first [&lt;code&gt;None&lt;/code&gt;]. &lt;a href=&quot;../../iter/trait.iterator#method.fuse&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82a9e286978ee039c291c271f9cf4655cef7d0c4" translate="yes" xml:space="preserve">
          <source>Creates an iterator which ends after the first [&lt;code&gt;None&lt;/code&gt;]. &lt;a href=&quot;../iter/trait.iterator#method.fuse&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45ec241e3bd6d19787705578724836afc440cfe9" translate="yes" xml:space="preserve">
          <source>Creates an iterator which ends after the first [&lt;code&gt;None&lt;/code&gt;]. &lt;a href=&quot;iter/trait.iterator#method.fuse&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="154982a7ad8be4f7b41cad489509e139717f7578" translate="yes" xml:space="preserve">
          <source>Creates an iterator which ends after the first [&lt;code&gt;None&lt;/code&gt;]. &lt;a href=&quot;trait.iterator#method.fuse&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f2236de71559e3a9d022df02e46f12cf977612a" translate="yes" xml:space="preserve">
          <source>Creates an iterator which gives the current iteration count as well as the next value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23705793484295c9aca16dfcd2d7b9c74a573b4f" translate="yes" xml:space="preserve">
          <source>Creates an iterator which gives the current iteration count as well as the next value. &lt;a href=&quot;../../../iter/trait.iterator#method.enumerate&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8abb02ee85539bb708dae2f14648dc0ed7c3cfa4" translate="yes" xml:space="preserve">
          <source>Creates an iterator which gives the current iteration count as well as the next value. &lt;a href=&quot;../../iter/trait.iterator#method.enumerate&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0341e655c9f90442f68630eb0295edadf41cbf5" translate="yes" xml:space="preserve">
          <source>Creates an iterator which gives the current iteration count as well as the next value. &lt;a href=&quot;../iter/trait.iterator#method.enumerate&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f31d824fa8c63b3049639e02cf1923074ba63297" translate="yes" xml:space="preserve">
          <source>Creates an iterator which gives the current iteration count as well as the next value. &lt;a href=&quot;iter/trait.iterator#method.enumerate&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adc24b023bb5c152a4d7777f2b3ea0523efed4a6" translate="yes" xml:space="preserve">
          <source>Creates an iterator which gives the current iteration count as well as the next value. &lt;a href=&quot;trait.iterator#method.enumerate&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4a4ed3912ef35e7fd3f56ce0bf301ef42fe2d9c" translate="yes" xml:space="preserve">
          <source>Creates an iterator which uses a closure to determine if an element should be removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="203b9095060aad409cfc4113681b2e324e84e839" translate="yes" xml:space="preserve">
          <source>Creates an iterator which uses a closure to determine if an element should be yielded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c8a181d41317fccea6ad46eb1d953165f4f0cf2" translate="yes" xml:space="preserve">
          <source>Creates an iterator which uses a closure to determine if an element should be yielded. &lt;a href=&quot;../../../iter/trait.iterator#method.filter&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb2f9aa6b1774a0fa77473e163bdd979085a0e71" translate="yes" xml:space="preserve">
          <source>Creates an iterator which uses a closure to determine if an element should be yielded. &lt;a href=&quot;../../iter/trait.iterator#method.filter&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca412038b14781eb771a1e3ecea5f6d1e01f6702" translate="yes" xml:space="preserve">
          <source>Creates an iterator which uses a closure to determine if an element should be yielded. &lt;a href=&quot;../iter/trait.iterator#method.filter&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c88578ee5c43eda00d7d21b6ab19c4a3152b2c8" translate="yes" xml:space="preserve">
          <source>Creates an iterator which uses a closure to determine if an element should be yielded. &lt;a href=&quot;iter/trait.iterator#method.filter&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b13a5c60bb67b365f21c10a35f3301f63893802d" translate="yes" xml:space="preserve">
          <source>Creates an iterator which uses a closure to determine if an element should be yielded. &lt;a href=&quot;trait.iterator#method.filter&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67685708baedc2d18956e1eb00ef7c7b11def155" translate="yes" xml:space="preserve">
          <source>Creates an owned &lt;a href=&quot;struct.pathbuf&quot;&gt;&lt;code&gt;PathBuf&lt;/code&gt;&lt;/a&gt; like &lt;code&gt;self&lt;/code&gt; but with the given extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7971d0c3df8d58c636b105fe17e1e7dd1a9daa00" translate="yes" xml:space="preserve">
          <source>Creates an owned &lt;a href=&quot;struct.pathbuf&quot;&gt;&lt;code&gt;PathBuf&lt;/code&gt;&lt;/a&gt; like &lt;code&gt;self&lt;/code&gt; but with the given file name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bed146dec3ccae2962c485beb600799bc9d7208f" translate="yes" xml:space="preserve">
          <source>Creates an owned &lt;a href=&quot;struct.pathbuf&quot;&gt;&lt;code&gt;PathBuf&lt;/code&gt;&lt;/a&gt; with &lt;code&gt;path&lt;/code&gt; adjoined to &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ecff3c50af8c7de8755e03a0758cc5dd7873614" translate="yes" xml:space="preserve">
          <source>Creates an owned Cow&amp;lt;'a, B&amp;gt; with the default value for the contained owned value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb32215e552b5bff8cfa082f37b2f0845267e594" translate="yes" xml:space="preserve">
          <source>Creates an uninitialized value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae78ef3c15f5eec7b3034bc6982499bd91d95bef" translate="yes" xml:space="preserve">
          <source>Creates an unnamed pair of connected sockets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="701f9ff53ac213295a5abb276de60038f73b86dc" translate="yes" xml:space="preserve">
          <source>Creates owned data from borrowed data, usually by cloning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddc18af5c8a730bb78c01ef4f06a648ee5dc5db0" translate="yes" xml:space="preserve">
          <source>Creates owned data from borrowed data, usually by cloning. &lt;a href=&quot;../../../borrow/trait.toowned#tymethod.to_owned&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="967bd6ff47348028996371f8f666143c2054af48" translate="yes" xml:space="preserve">
          <source>Creates owned data from borrowed data, usually by cloning. &lt;a href=&quot;../../borrow/trait.toowned#tymethod.to_owned&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ea08e00cafa42eb0c8f84acb27b991bead92079" translate="yes" xml:space="preserve">
          <source>Creates owned data from borrowed data, usually by cloning. &lt;a href=&quot;../borrow/trait.toowned#tymethod.to_owned&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d06902a78a0b3edb98c112c1f936bcab3a931e1f" translate="yes" xml:space="preserve">
          <source>Creates owned data from borrowed data, usually by cloning. &lt;a href=&quot;borrow/trait.toowned#tymethod.to_owned&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bf7b97abae7df3a33aa6a6fe4ccba30dd84b9aa" translate="yes" xml:space="preserve">
          <source>Creates owned data from borrowed data, usually by cloning. &lt;a href=&quot;trait.toowned#tymethod.to_owned&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0378c5ade8abee6a513285c0d68f23d33d9ccc7b" translate="yes" xml:space="preserve">
          <source>Creates the specified directory with the options configured in this builder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d7fa3aa189247d5d2cea12579ebc28587da0842" translate="yes" xml:space="preserve">
          <source>Creates two handles for a file named &lt;code&gt;foo.txt&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b91c967685246a4f9cd2562dd07262930f218939" translate="yes" xml:space="preserve">
          <source>Creating Custom Types for Validation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e58c4dcd32615ae770b17c57ed22daac02b2114e" translate="yes" xml:space="preserve">
          <source>Creating Idiomatic &lt;code id=&quot;creating-idiomatic-use-paths&quot;&gt;use&lt;/code&gt; Paths</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95aef9f7c3c70372bdcc535ee6a6194e2e9e78ef" translate="yes" xml:space="preserve">
          <source>Creating Instances From Other Instances With Struct Update Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="281a2adb2dbc8e4a7b3f6a301d3929a5493a9bfe" translate="yes" xml:space="preserve">
          <source>Creating Multiple Producers by Cloning the Transmitter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9db589a5a3041bd31f08fadc3d5126877f80fc31" translate="yes" xml:space="preserve">
          <source>Creating Our Own Iterators with the &lt;code id=&quot;creating-our-own-iterators-with-the-iterator-trait&quot;&gt;Iterator&lt;/code&gt; Trait</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b590c164f8e65d879f0c7d9b0c7d8a14707256e6" translate="yes" xml:space="preserve">
          <source>Creating Space to Store the Threads</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4698079e161988af5b053b1ab73e152fcfc21759" translate="yes" xml:space="preserve">
          <source>Creating Type Synonyms with Type Aliases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dae49e8113a7260323bd03d57515a21b7cf77cd" translate="yes" xml:space="preserve">
          <source>Creating a &lt;a href=&quot;enum.socketaddr&quot;&gt;&lt;code&gt;SocketAddr&lt;/code&gt;&lt;/a&gt; iterator from a hostname:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3483d4d793af76cc22890817eaa0d84e72c7c9c3" translate="yes" xml:space="preserve">
          <source>Creating a &lt;a href=&quot;enum.socketaddr&quot;&gt;&lt;code&gt;SocketAddr&lt;/code&gt;&lt;/a&gt; iterator that yields multiple items:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59a132e8be749da0cc175444399331dc4575a63d" translate="yes" xml:space="preserve">
          <source>Creating a &lt;a href=&quot;enum.socketaddr&quot;&gt;&lt;code&gt;SocketAddr&lt;/code&gt;&lt;/a&gt; iterator that yields one item:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e164416054aa53741f6ff09d810e80d36b4cfd7b" translate="yes" xml:space="preserve">
          <source>Creating a &lt;code&gt;CStr&lt;/code&gt; with an interior nul byte is an error:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36e1a90c7a5ecd913b7b8db54dc86b44cb68a2dd" translate="yes" xml:space="preserve">
          <source>Creating a &lt;code&gt;CStr&lt;/code&gt; without a trailing nul terminator is an error:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d18514ce56e02fd691951f8261f5e6e4f5369fc5" translate="yes" xml:space="preserve">
          <source>Creating a &lt;code&gt;CString&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd7d519ebcaf64eaa062db8abd6cb7904c07784a" translate="yes" xml:space="preserve">
          <source>Creating a Constructor for &lt;code id=&quot;creating-a-constructor-for-config&quot;&gt;Config&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0c98e95c6955a04f56de2990644268b7fd4115e" translate="yes" xml:space="preserve">
          <source>Creating a New Hash Map</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e315682cf94e87497ea96c14bdee549d9b39e7e" translate="yes" xml:space="preserve">
          <source>Creating a New String</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9189dd8a059e15dd589153c8067adf68af9afba9" translate="yes" xml:space="preserve">
          <source>Creating a New Thread with &lt;code id=&quot;creating-a-new-thread-with-spawn&quot;&gt;spawn&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee11e74a230667594e32ea457143ed8890765ed0" translate="yes" xml:space="preserve">
          <source>Creating a New Vector</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7ccf108289683dd08766b1b02554cc04d23f839" translate="yes" xml:space="preserve">
          <source>Creating a Project Directory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d8c3047434e605f81eabc44a8139356753b302c" translate="yes" xml:space="preserve">
          <source>Creating a Project with Cargo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8fd4fb040699572be6026dbf84fdba10f0e62d4" translate="yes" xml:space="preserve">
          <source>Creating a Reference Cycle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b974704f6ef951ecf8626b598cef77bc0a08c2e3" translate="yes" xml:space="preserve">
          <source>Creating a Safe Abstraction over Unsafe Code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe6de9c15f6bdce27923e7d5ca37285b7c22410b" translate="yes" xml:space="preserve">
          <source>Creating a Similar Interface for a Finite Number of Threads</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fbd9625d5f3e725701f876d10cc13fc4112d9a8" translate="yes" xml:space="preserve">
          <source>Creating a Tree Data Structure: a &lt;code id=&quot;creating-a-tree-data-structure-a-node-with-child-nodes&quot;&gt;Node&lt;/code&gt; with Child Nodes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef16ef6d39d7d0cd11021caf5199b86d3bf34464" translate="yes" xml:space="preserve">
          <source>Creating a Workspace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb43c170478771fd57574f373f4020eae5f6879c" translate="yes" xml:space="preserve">
          <source>Creating a buffer with a buffer of a hundred bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca21c0d301f5d8fbd8d2dca546f4c0cbe7cb1ddf" translate="yes" xml:space="preserve">
          <source>Creating a buffer with ten bytes of capacity:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c69fdf0d5ae468db009b3051da8076128c56f44" translate="yes" xml:space="preserve">
          <source>Creating a default implementation for &lt;code&gt;summarize&lt;/code&gt; doesn&amp;rsquo;t require us to change anything about the implementation of &lt;code&gt;Summary&lt;/code&gt; on &lt;code&gt;Tweet&lt;/code&gt; in Listing 10-13. The reason is that the syntax for overriding a default implementation is the same as the syntax for implementing a trait method that doesn&amp;rsquo;t have a default implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3155248b3340760fb6115eb644e581c5500c61d8" translate="yes" xml:space="preserve">
          <source>Creating a new reference from an existing reference counted pointer is done using the &lt;code&gt;Clone&lt;/code&gt; trait implemented for &lt;a href=&quot;struct.arc&quot;&gt;&lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.weak&quot;&gt;&lt;code&gt;Weak&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bed2471f726fd2aede8564163bf80e06b40873fb" translate="yes" xml:space="preserve">
          <source>Creating a new reference from an existing reference counted pointer is done using the &lt;code&gt;Clone&lt;/code&gt; trait implemented for &lt;a href=&quot;struct.rc&quot;&gt;&lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.weak&quot;&gt;&lt;code&gt;Weak&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8afa237fc65052057478185a51b021d673e4053" translate="yes" xml:space="preserve">
          <source>Creating a pointer does no harm; it&amp;rsquo;s only when we try to access the value that it points at that we might end up dealing with an invalid value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bac4b5cd7d35c8c30e7df74ae098dd899ac6a303" translate="yes" xml:space="preserve">
          <source>Creating a recursive data structure:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="721726d794bbfad2ff15cd91c4dc825f3dab1674" translate="yes" xml:space="preserve">
          <source>Creating a thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85f3ab0d5f8018477a4992240494f023bf8f357e" translate="yes" xml:space="preserve">
          <source>Creating a useful public API structure is more of an art than a science, and you can iterate to find the API that works best for your users. Choosing &lt;code&gt;pub use&lt;/code&gt; gives you flexibility in how you structure your crate internally and decouples that internal structure from what you present to your users. Look at some of the code of crates you&amp;rsquo;ve installed to see if their internal structure differs from their public API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48e00a2c170f31ced029650b5c59266d551bac00" translate="yes" xml:space="preserve">
          <source>Creating a variable and assigning a value to it with the &lt;code&gt;let&lt;/code&gt; keyword is a statement. In Listing 3-1, &lt;code&gt;let y = 6;&lt;/code&gt; is a statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3eb572e9e38354f90eaddb13eba31e4eff64056" translate="yes" xml:space="preserve">
          <source>Creating an &lt;code&gt;OsString&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b26775fa56c32993f352ff34f22a5172bf15ee00" translate="yes" xml:space="preserve">
          <source>Creating an Abstraction of Behavior with Closures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21a15f2984b574f0c8e2238c944b0011d3d87bc5" translate="yes" xml:space="preserve">
          <source>Creating an invalid value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30cf21ff3df48039c65b3e456cb5205e777d558f" translate="yes" xml:space="preserve">
          <source>Creating an iterator of your own involves two steps: creating a &lt;code&gt;struct&lt;/code&gt; to hold the iterator's state, and then &lt;code&gt;impl&lt;/code&gt;ementing &lt;a href=&quot;trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; for that &lt;code&gt;struct&lt;/code&gt;. This is why there are so many &lt;code&gt;struct&lt;/code&gt;s in this module: there is one for each iterator and iterator adapter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db7cb17e1882182f2d09e09c746d876964566c78" translate="yes" xml:space="preserve">
          <source>Creating reference cycles is not easily done, but it&amp;rsquo;s not impossible either. If you have &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; values that contain &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; values or similar nested combinations of types with interior mutability and reference counting, you must ensure that you don&amp;rsquo;t create cycles; you can&amp;rsquo;t rely on Rust to catch them. Creating a reference cycle would be a logic bug in your program that you should use automated tests, code reviews, and other software development practices to minimize.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4711649d8e68850225f9964b813aebe3a34d71ea" translate="yes" xml:space="preserve">
          <source>Creating the &lt;code&gt;leaf&lt;/code&gt; node looks similar to how creating the &lt;code&gt;leaf&lt;/code&gt; node looked in Listing 15-27 with the exception of the &lt;code&gt;parent&lt;/code&gt; field: &lt;code&gt;leaf&lt;/code&gt; starts out without a parent, so we create a new, empty &lt;code&gt;Weak&amp;lt;Node&amp;gt;&lt;/code&gt; reference instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2ac2c4b5c578085e3dfef13721b4933c9478d42" translate="yes" xml:space="preserve">
          <source>Creating the Second Crate in the Workspace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3580e47e8c860d2365136c73cc27802685f34968" translate="yes" xml:space="preserve">
          <source>Creation from &lt;a href=&quot;fn.spawn&quot;&gt;&lt;code&gt;thread::spawn&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="527737aa0cd6cb949e436ad2dd95b61bcbaaafbf" translate="yes" xml:space="preserve">
          <source>Creation from &lt;a href=&quot;struct.builder#method.spawn&quot;&gt;&lt;code&gt;thread::Builder::spawn&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="973c2c12a3762ea198b96014e1e40bfb68f5a78a" translate="yes" xml:space="preserve">
          <source>Cross-platform path manipulation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="026e6ffc6c794c4e295872ca0b6da98b4bff0321" translate="yes" xml:space="preserve">
          <source>Crucially, we have to be able to rely on &lt;code&gt;drop&lt;/code&gt; being called. If an element could be deallocated or otherwise invalidated without calling &lt;code&gt;drop&lt;/code&gt;, the pointers into it from its neighbouring elements would become invalid, which would break the data structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f3896c45fffd6cca2d32bcbab32873cb06fb1e6" translate="yes" xml:space="preserve">
          <source>Curly braces</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac9b5b2108eb76ae977a14bf5492a0eded19d63d" translate="yes" xml:space="preserve">
          <source>Curly brackets typically aren&amp;rsquo;t used if the match arm code is short, as it is in Listing 6-3 where each arm just returns a value. If you want to run multiple lines of code in a match arm, you can use curly brackets. For example, the following code would print &amp;ldquo;Lucky penny!&amp;rdquo; every time the method was called with a &lt;code&gt;Coin::Penny&lt;/code&gt; but would still return the last value of the block, &lt;code&gt;1&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc60fa62ef84205a5c48b2525c6ebe4e4a5be0eb" translate="yes" xml:space="preserve">
          <source>Current directory does not exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecc02508f741caaf0ccb5f53659c2d1bc004753f" translate="yes" xml:space="preserve">
          <source>Current implementation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1425f78e5d844312470cdef9ef9f0acd79f61a97" translate="yes" xml:space="preserve">
          <source>Currently &lt;code&gt;clippy&lt;/code&gt; is the only available lint tool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="085e78464e262321ab71c5bf671ada80e92466bf" translate="yes" xml:space="preserve">
          <source>Currently the default global allocator is unspecified. Libraries, however, like &lt;code&gt;cdylib&lt;/code&gt;s and &lt;code&gt;staticlib&lt;/code&gt;s are guaranteed to use the &lt;a href=&quot;struct.system&quot;&gt;&lt;code&gt;System&lt;/code&gt;&lt;/a&gt; by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba37979aa280e5c385e9c67c41a5fbe28d6d0645" translate="yes" xml:space="preserve">
          <source>Currently you'll need to use &lt;code&gt;#[cfg(target_arch)]&lt;/code&gt; primarily to conditionally compile in code with atomics. There is an unstable &lt;code&gt;#[cfg(target_has_atomic)]&lt;/code&gt; as well which may be stabilized in the future.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceb70531f450e62720cd16030079f112237fdd93" translate="yes" xml:space="preserve">
          <source>Currently, &lt;code&gt;Context&lt;/code&gt; only serves to provide access to a &lt;code&gt;&amp;amp;Waker&lt;/code&gt; which can be used to wake the current task.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cb0cc544477c47ca02baaaf1bd84f94a8d8ba29" translate="yes" xml:space="preserve">
          <source>Currently, our implementation simply performs naive linear search. This provides excellent performance on &lt;em&gt;small&lt;/em&gt; nodes of elements which are cheap to compare. However in the future we would like to further explore choosing the optimal search strategy based on the choice of B, and possibly other factors. Using linear search, searching for a random element is expected to take O(B log&lt;sub&gt;B&lt;/sub&gt;n) comparisons, which is generally worse than a BST. In practice, however, performance is excellent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="872eba23b65316c698b60b9a7908b3d92bce4aa5" translate="yes" xml:space="preserve">
          <source>Currently, our server runs in a single thread, meaning it can only serve one request at a time. Let&amp;rsquo;s examine how that can be a problem by simulating some slow requests. Then we&amp;rsquo;ll fix it so our server can handle multiple requests at once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="411886a6bfbb480733f3d935aba8fe2dfdd4407f" translate="yes" xml:space="preserve">
          <source>Currently, our test is failing because we always return an empty vector. To fix that and implement &lt;code&gt;search&lt;/code&gt;, our program needs to follow these steps:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0a7283142b1045743972bf44193e48b1c8b802d" translate="yes" xml:space="preserve">
          <source>Currently, this isn't ideal, because we simply panic whenever we fail to get a new connection. Instead, we'd like to keep track of this error, like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6b832b5ea5efa8136cddfa94e7ea2108ce7fe30" translate="yes" xml:space="preserve">
          <source>Currently, we&amp;rsquo;re ignoring the request data in &lt;code&gt;buffer&lt;/code&gt; and just sending back the contents of the HTML file unconditionally. That means if you try requesting &lt;em&gt;127.0.0.1:7878/something-else&lt;/em&gt; in your browser, you&amp;rsquo;ll still get back this same HTML response. Our server is very limited and is not what most web servers do. We want to customize our responses depending on the request and only send back the HTML file for a well-formed request to &lt;em&gt;/&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2239943c8d0af354a467e6cc18b9ec9e32f2afcf" translate="yes" xml:space="preserve">
          <source>Cursor</source>
          <target state="translated">Cursor</target>
        </trans-unit>
        <trans-unit id="88b8cb37f3480da1e8b6b3d2c4bfe446be7f2f7b" translate="yes" xml:space="preserve">
          <source>Cursor initial position is &lt;code&gt;0&lt;/code&gt; even if underlying buffer (e.g., &lt;code&gt;Vec&lt;/code&gt;) is not empty. So writing to cursor starts with overwriting &lt;code&gt;Vec&lt;/code&gt; content, not with appending to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c72c14501a1df2fcef7191b94db0c850982ca27" translate="yes" xml:space="preserve">
          <source>Cursor::borrow</source>
          <target state="translated">Cursor::borrow</target>
        </trans-unit>
        <trans-unit id="907c1f8dfe0d8184914230a13a0777dab3bd1741" translate="yes" xml:space="preserve">
          <source>Cursor::borrow_mut</source>
          <target state="translated">Cursor::borrow_mut</target>
        </trans-unit>
        <trans-unit id="3b64b4b0f2f091bfbdcfa06f015006642d7f75b7" translate="yes" xml:space="preserve">
          <source>Cursor::by_ref</source>
          <target state="translated">Cursor::by_ref</target>
        </trans-unit>
        <trans-unit id="da29f5ca9cfedf33d63cfebb7b3a00eea6bde4fc" translate="yes" xml:space="preserve">
          <source>Cursor::bytes</source>
          <target state="translated">Cursor::bytes</target>
        </trans-unit>
        <trans-unit id="945b01efd77c9533067a48ef4d515bb7d1c52ff9" translate="yes" xml:space="preserve">
          <source>Cursor::chain</source>
          <target state="translated">Cursor::chain</target>
        </trans-unit>
        <trans-unit id="7d77f67c902f7ab86b63cd2e632b7d77b42089c5" translate="yes" xml:space="preserve">
          <source>Cursor::clone</source>
          <target state="translated">Cursor::clone</target>
        </trans-unit>
        <trans-unit id="e36ceca000c04d98cd3f614f26e3e2fce464a23d" translate="yes" xml:space="preserve">
          <source>Cursor::clone_from</source>
          <target state="translated">Cursor::clone_from</target>
        </trans-unit>
        <trans-unit id="1a2a754195f4b8678304420caacbe456065dbcf5" translate="yes" xml:space="preserve">
          <source>Cursor::clone_into</source>
          <target state="translated">Cursor::clone_into</target>
        </trans-unit>
        <trans-unit id="e003ea57f882246b75a56c6803026f8e7096b85f" translate="yes" xml:space="preserve">
          <source>Cursor::consume</source>
          <target state="translated">Cursor::consume</target>
        </trans-unit>
        <trans-unit id="70ef7adf113b70228dabbf6f7adad597c6810b3c" translate="yes" xml:space="preserve">
          <source>Cursor::default</source>
          <target state="translated">Cursor::default</target>
        </trans-unit>
        <trans-unit id="3be321b1b22c46db64cc655a523688c5ef4cdb3e" translate="yes" xml:space="preserve">
          <source>Cursor::fill_buf</source>
          <target state="translated">Cursor::fill_buf</target>
        </trans-unit>
        <trans-unit id="3341d6f76116138bc21a473c516bf563ea933e3b" translate="yes" xml:space="preserve">
          <source>Cursor::flush</source>
          <target state="translated">Cursor::flush</target>
        </trans-unit>
        <trans-unit id="d1cabce1c7671c2546809d1db295fad35bbf19bf" translate="yes" xml:space="preserve">
          <source>Cursor::fmt</source>
          <target state="translated">Cursor::fmt</target>
        </trans-unit>
        <trans-unit id="e543516b7fde3437332a8df783b1d8f0722f35e7" translate="yes" xml:space="preserve">
          <source>Cursor::from</source>
          <target state="translated">Cursor::from</target>
        </trans-unit>
        <trans-unit id="912a17fc69304f1ba5cc95df17a2567dd624d44d" translate="yes" xml:space="preserve">
          <source>Cursor::get_mut</source>
          <target state="translated">Cursor::get_mut</target>
        </trans-unit>
        <trans-unit id="b698f37f267fbcf7aea30902f61625884c75252f" translate="yes" xml:space="preserve">
          <source>Cursor::get_ref</source>
          <target state="translated">Cursor::get_ref</target>
        </trans-unit>
        <trans-unit id="2d2db43f76346ec325257c3d7e9c1de13475242b" translate="yes" xml:space="preserve">
          <source>Cursor::initializer</source>
          <target state="translated">Cursor::initializer</target>
        </trans-unit>
        <trans-unit id="90e1594d6274550c5339376c3724a68c5c531055" translate="yes" xml:space="preserve">
          <source>Cursor::into</source>
          <target state="translated">Cursor::into</target>
        </trans-unit>
        <trans-unit id="a48e3250ed339c3aa20fa3b74911e42024cc090a" translate="yes" xml:space="preserve">
          <source>Cursor::into_inner</source>
          <target state="translated">Cursor::into_inner</target>
        </trans-unit>
        <trans-unit id="3ac11b4f20e42879408f2799850345abadfbcf6a" translate="yes" xml:space="preserve">
          <source>Cursor::lines</source>
          <target state="translated">Cursor::lines</target>
        </trans-unit>
        <trans-unit id="cb832ab47ce8dce147c7b2160ad5eeae1446c098" translate="yes" xml:space="preserve">
          <source>Cursor::new</source>
          <target state="translated">Cursor::new</target>
        </trans-unit>
        <trans-unit id="7cf571d850007e7adecf1b9b2e5ec4478d041215" translate="yes" xml:space="preserve">
          <source>Cursor::position</source>
          <target state="translated">Cursor::position</target>
        </trans-unit>
        <trans-unit id="f62560e648db4a9420079ae2d45d74956fd51005" translate="yes" xml:space="preserve">
          <source>Cursor::read</source>
          <target state="translated">Cursor::read</target>
        </trans-unit>
        <trans-unit id="2ac65a7184ee585766d4716553566a36c91ddeff" translate="yes" xml:space="preserve">
          <source>Cursor::read_exact</source>
          <target state="translated">Cursor::read_exact</target>
        </trans-unit>
        <trans-unit id="e25476827943ffc4feb970137a588528d350812e" translate="yes" xml:space="preserve">
          <source>Cursor::read_line</source>
          <target state="translated">Cursor::read_line</target>
        </trans-unit>
        <trans-unit id="f3fdb06b6ca0233f2c1ad94aa87fdeca0f19a2be" translate="yes" xml:space="preserve">
          <source>Cursor::read_to_end</source>
          <target state="translated">Cursor::read_to_end</target>
        </trans-unit>
        <trans-unit id="51d5e5c0bcf7a0325ce8807956a4759f4e09676a" translate="yes" xml:space="preserve">
          <source>Cursor::read_to_string</source>
          <target state="translated">Cursor::read_to_string</target>
        </trans-unit>
        <trans-unit id="fc48a0ed394bee64bfce917085bd0ad63429c948" translate="yes" xml:space="preserve">
          <source>Cursor::read_until</source>
          <target state="translated">Cursor::read_until</target>
        </trans-unit>
        <trans-unit id="394cef5ba19177c10f2900dd503acf159211b80a" translate="yes" xml:space="preserve">
          <source>Cursor::read_vectored</source>
          <target state="translated">Cursor::read_vectored</target>
        </trans-unit>
        <trans-unit id="b49e75bee792bbb44f5c41592069a93fac0483ba" translate="yes" xml:space="preserve">
          <source>Cursor::seek</source>
          <target state="translated">Cursor::seek</target>
        </trans-unit>
        <trans-unit id="005fac12104194c5e27e58dbb5bbec07ec13f13b" translate="yes" xml:space="preserve">
          <source>Cursor::set_position</source>
          <target state="translated">Cursor::set_position</target>
        </trans-unit>
        <trans-unit id="d107f5282ea2e83fee016601b36a6a13d7633128" translate="yes" xml:space="preserve">
          <source>Cursor::split</source>
          <target state="translated">Cursor::split</target>
        </trans-unit>
        <trans-unit id="7ca68f17f4b7edbf48fde4313af634ab7df0cada" translate="yes" xml:space="preserve">
          <source>Cursor::stream_len</source>
          <target state="translated">Cursor::stream_len</target>
        </trans-unit>
        <trans-unit id="f59caa65069705e9045bff8595db47368727ebb1" translate="yes" xml:space="preserve">
          <source>Cursor::stream_position</source>
          <target state="translated">Cursor::stream_position</target>
        </trans-unit>
        <trans-unit id="35995a03d4bffa63d27b7533ce08fea8c68b23bc" translate="yes" xml:space="preserve">
          <source>Cursor::take</source>
          <target state="translated">Cursor::take</target>
        </trans-unit>
        <trans-unit id="fa7736d8b18ae7cb7811d1b67b7b78bee5b77377" translate="yes" xml:space="preserve">
          <source>Cursor::to_owned</source>
          <target state="translated">Cursor::to_owned</target>
        </trans-unit>
        <trans-unit id="d6f5e8c759a8ed99b5109dfe0ab0633445df9559" translate="yes" xml:space="preserve">
          <source>Cursor::try_from</source>
          <target state="translated">Cursor::try_from</target>
        </trans-unit>
        <trans-unit id="73510e0acad76a771d3b229a53ee21eaef7bd133" translate="yes" xml:space="preserve">
          <source>Cursor::try_into</source>
          <target state="translated">Cursor::try_into</target>
        </trans-unit>
        <trans-unit id="1fb419cee239622040e4d9758807459d35039a26" translate="yes" xml:space="preserve">
          <source>Cursor::type_id</source>
          <target state="translated">Cursor::type_id</target>
        </trans-unit>
        <trans-unit id="956fe2405e9fff2a0f33ab2a4ebae3601c5b348f" translate="yes" xml:space="preserve">
          <source>Cursor::write</source>
          <target state="translated">Cursor::write</target>
        </trans-unit>
        <trans-unit id="2a4624aa78096b3df7ca2fcfa3d62576867a0b25" translate="yes" xml:space="preserve">
          <source>Cursor::write_all</source>
          <target state="translated">Cursor::write_all</target>
        </trans-unit>
        <trans-unit id="ceea657f5fee42924ee15702f8e10bd151919d3b" translate="yes" xml:space="preserve">
          <source>Cursor::write_fmt</source>
          <target state="translated">Cursor::write_fmt</target>
        </trans-unit>
        <trans-unit id="0ffcb550a35ea4720a566d1c314a6a5037ec3b57" translate="yes" xml:space="preserve">
          <source>Cursor::write_vectored</source>
          <target state="translated">Cursor::write_vectored</target>
        </trans-unit>
        <trans-unit id="5ebd563ca24af29fc12aa3d357419694eab2c760" translate="yes" xml:space="preserve">
          <source>Custom &lt;code&gt;#[derive]&lt;/code&gt; macros that specify code added with the &lt;code&gt;derive&lt;/code&gt; attribute used on structs and enums</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93ef6593cd5cb962891fd58d39ce47cec83fe200" translate="yes" xml:space="preserve">
          <source>Custom Discriminant Values for Field-Less Enumerations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="083c792994a317119a113e500c40a8c4ff7407bd" translate="yes" xml:space="preserve">
          <source>Custom Messages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9339fbac23198c7ef6e935583d35d57cb25ead4" translate="yes" xml:space="preserve">
          <source>Custom derive macros are defined by a &lt;a href=&quot;visibility-and-privacy&quot;&gt;public&lt;/a&gt;&lt;a href=&quot;items/functions&quot;&gt;function&lt;/a&gt; with the &lt;code&gt;proc_macro_derive&lt;/code&gt; attribute and a signature of &lt;code&gt;(TokenStream) -&amp;gt; TokenStream&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e1388b6eccd83eec06fd4729c57d9b8fcdc75a1" translate="yes" xml:space="preserve">
          <source>Custom flags can only set flags, not remove flags set by Rust's options. This option overwrites any previously set custom flags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="064b3866861c42230aaf060a82605bf950293e1d" translate="yes" xml:space="preserve">
          <source>Custom flags can only set flags, not remove flags set by Rusts options. This options overwrites any previously set custom flags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9f31ba5089238e22588a4428012611878d7ba42" translate="yes" xml:space="preserve">
          <source>Customize your build through release profiles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="174c7ea34445f169060b40e93fccbe2035a5cb30" translate="yes" xml:space="preserve">
          <source>Customizing Builds with Release Profiles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5eda1b11afa0fcfb39f3eb94274b23a7d669749" translate="yes" xml:space="preserve">
          <source>Cycle</source>
          <target state="translated">Cycle</target>
        </trans-unit>
        <trans-unit id="de7f823d9352cd7fb50edb24062d3dff037faa48" translate="yes" xml:space="preserve">
          <source>Cycle::all</source>
          <target state="translated">Cycle::all</target>
        </trans-unit>
        <trans-unit id="9ca5bdae88a3a90c3eae8cba5ca9b7f0fa58a831" translate="yes" xml:space="preserve">
          <source>Cycle::any</source>
          <target state="translated">Cycle::any</target>
        </trans-unit>
        <trans-unit id="2b941448ad16ab8ceaac4cc9e258b3c27f716c1e" translate="yes" xml:space="preserve">
          <source>Cycle::borrow</source>
          <target state="translated">Cycle::borrow</target>
        </trans-unit>
        <trans-unit id="f0df920b023cec286a074b6ec0cf2a9b9a63c0a8" translate="yes" xml:space="preserve">
          <source>Cycle::borrow_mut</source>
          <target state="translated">Cycle::borrow_mut</target>
        </trans-unit>
        <trans-unit id="d3eebe6a29a00a003e103a701a8388214cab88bb" translate="yes" xml:space="preserve">
          <source>Cycle::by_ref</source>
          <target state="translated">Cycle::by_ref</target>
        </trans-unit>
        <trans-unit id="d3fcad207554bf564f28ae3fa619ec4a47cbdff3" translate="yes" xml:space="preserve">
          <source>Cycle::chain</source>
          <target state="translated">Cycle::chain</target>
        </trans-unit>
        <trans-unit id="b0e522f04a6f9858da8134286cbe31ffeffa4323" translate="yes" xml:space="preserve">
          <source>Cycle::clone</source>
          <target state="translated">Cycle::clone</target>
        </trans-unit>
        <trans-unit id="518166812f474892f85f482ad30dec896dd3d95d" translate="yes" xml:space="preserve">
          <source>Cycle::clone_from</source>
          <target state="translated">Cycle::clone_from</target>
        </trans-unit>
        <trans-unit id="e64d59b2131c4ebbf4a82ed2f94e8a42e8974bc8" translate="yes" xml:space="preserve">
          <source>Cycle::clone_into</source>
          <target state="translated">Cycle::clone_into</target>
        </trans-unit>
        <trans-unit id="1bdc71a450dc6a96cad8941d3844d007a4b31002" translate="yes" xml:space="preserve">
          <source>Cycle::cloned</source>
          <target state="translated">Cycle::cloned</target>
        </trans-unit>
        <trans-unit id="989a9f2affebaf3b1a0a2354667953f7e18d5fbe" translate="yes" xml:space="preserve">
          <source>Cycle::cmp</source>
          <target state="translated">Cycle::cmp</target>
        </trans-unit>
        <trans-unit id="10031eb07822113a2eb095ff61fc095c3e5a8b79" translate="yes" xml:space="preserve">
          <source>Cycle::collect</source>
          <target state="translated">Cycle::collect</target>
        </trans-unit>
        <trans-unit id="25bf5bf9bac79f658d71018038cdcfd3e65d9091" translate="yes" xml:space="preserve">
          <source>Cycle::copied</source>
          <target state="translated">Cycle::copied</target>
        </trans-unit>
        <trans-unit id="2b4f997a47c504415b265a63f11fbada520ec943" translate="yes" xml:space="preserve">
          <source>Cycle::count</source>
          <target state="translated">Cycle::count</target>
        </trans-unit>
        <trans-unit id="2e30c7fec970dd384549f3d86a57feba23a3a3c8" translate="yes" xml:space="preserve">
          <source>Cycle::cycle</source>
          <target state="translated">Cycle::cycle</target>
        </trans-unit>
        <trans-unit id="933ce87d03f991223be2123d87380756e127e4ab" translate="yes" xml:space="preserve">
          <source>Cycle::enumerate</source>
          <target state="translated">Cycle::enumerate</target>
        </trans-unit>
        <trans-unit id="310d8b28d596fde063cbaa3945f48bb10fe9175f" translate="yes" xml:space="preserve">
          <source>Cycle::eq</source>
          <target state="translated">Cycle::eq</target>
        </trans-unit>
        <trans-unit id="bcbe7225c9aacc0df8978b532b1c8867cbde6022" translate="yes" xml:space="preserve">
          <source>Cycle::filter</source>
          <target state="translated">Cycle::filter</target>
        </trans-unit>
        <trans-unit id="b8c2b52a2b735564a1fa7a04228fec4a49e5f121" translate="yes" xml:space="preserve">
          <source>Cycle::filter_map</source>
          <target state="translated">Cycle::filter_map</target>
        </trans-unit>
        <trans-unit id="0a5b5ef9993a8d40229f1fe51f872494f23d672a" translate="yes" xml:space="preserve">
          <source>Cycle::find</source>
          <target state="translated">Cycle::find</target>
        </trans-unit>
        <trans-unit id="0fa0dc443bfd48a62fc24f73f915fb44030ee8eb" translate="yes" xml:space="preserve">
          <source>Cycle::find_map</source>
          <target state="translated">Cycle::find_map</target>
        </trans-unit>
        <trans-unit id="74169b784513f48ae5b3a5a337d4d8bbcaab9402" translate="yes" xml:space="preserve">
          <source>Cycle::flat_map</source>
          <target state="translated">Cycle::flat_map</target>
        </trans-unit>
        <trans-unit id="a3c81779908132b68e2be9c3d86fabe0aafe3303" translate="yes" xml:space="preserve">
          <source>Cycle::flatten</source>
          <target state="translated">Cycle::flatten</target>
        </trans-unit>
        <trans-unit id="d1eefd42e95bd692854ff28ab72c5b955a1068c0" translate="yes" xml:space="preserve">
          <source>Cycle::fmt</source>
          <target state="translated">Cycle::fmt</target>
        </trans-unit>
        <trans-unit id="105894b40fe11b10f0e775f610b86dbd42775948" translate="yes" xml:space="preserve">
          <source>Cycle::fold</source>
          <target state="translated">Cycle::fold</target>
        </trans-unit>
        <trans-unit id="4eb890b34e3c1347d9d1c991e0969fc28920ef4e" translate="yes" xml:space="preserve">
          <source>Cycle::for_each</source>
          <target state="translated">Cycle::for_each</target>
        </trans-unit>
        <trans-unit id="b8af6bba1a74b0387a54871e14d6fc7b3e54e5ea" translate="yes" xml:space="preserve">
          <source>Cycle::from</source>
          <target state="translated">Cycle::from</target>
        </trans-unit>
        <trans-unit id="21e898f8b8c60977a076f3cd05a5ac16772fa9ad" translate="yes" xml:space="preserve">
          <source>Cycle::fuse</source>
          <target state="translated">Cycle::fuse</target>
        </trans-unit>
        <trans-unit id="661bf395cfa6213001841dc057f3b845fb6068af" translate="yes" xml:space="preserve">
          <source>Cycle::ge</source>
          <target state="translated">Cycle::ge</target>
        </trans-unit>
        <trans-unit id="705e5cb0ae258d8f05f4c53b9ee3119cdade7f00" translate="yes" xml:space="preserve">
          <source>Cycle::gt</source>
          <target state="translated">Cycle::gt</target>
        </trans-unit>
        <trans-unit id="1cb2042888537955144addaf41b890ef141bd562" translate="yes" xml:space="preserve">
          <source>Cycle::inspect</source>
          <target state="translated">Cycle::inspect</target>
        </trans-unit>
        <trans-unit id="87fc36f02e94ab469335c0d1a4f0557968a76f36" translate="yes" xml:space="preserve">
          <source>Cycle::into</source>
          <target state="translated">Cycle::into</target>
        </trans-unit>
        <trans-unit id="89a4fecbbabd54eef43b946f8cf0f53ecc9d4064" translate="yes" xml:space="preserve">
          <source>Cycle::into_iter</source>
          <target state="translated">Cycle::into_iter</target>
        </trans-unit>
        <trans-unit id="d7bb71a2ae66d38f9af223fe3b35f8904230ed3f" translate="yes" xml:space="preserve">
          <source>Cycle::is_sorted</source>
          <target state="translated">Cycle::is_sorted</target>
        </trans-unit>
        <trans-unit id="6a236c5def5acd50002e8dcc84226fcdbe394bf9" translate="yes" xml:space="preserve">
          <source>Cycle::is_sorted_by</source>
          <target state="translated">Cycle::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="64748a2cbfe191385097ac1af88e47bd618f13fb" translate="yes" xml:space="preserve">
          <source>Cycle::is_sorted_by_key</source>
          <target state="translated">Cycle::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="a1c52de629f2c013a862ad5662a20d3a34b90d7e" translate="yes" xml:space="preserve">
          <source>Cycle::last</source>
          <target state="translated">Cycle::last</target>
        </trans-unit>
        <trans-unit id="2d4d0b68829c25954fa65e8e7a40e63a96fd1556" translate="yes" xml:space="preserve">
          <source>Cycle::le</source>
          <target state="translated">Cycle::le</target>
        </trans-unit>
        <trans-unit id="d7367cd179a221b33c6bacc6846659d5a1606a5a" translate="yes" xml:space="preserve">
          <source>Cycle::lt</source>
          <target state="translated">Cycle::lt</target>
        </trans-unit>
        <trans-unit id="1d7abe7dbcbdff655894d7912844c5422633be80" translate="yes" xml:space="preserve">
          <source>Cycle::map</source>
          <target state="translated">Cycle::map</target>
        </trans-unit>
        <trans-unit id="27618d9ef0c7023c952595549a602fc32dee1443" translate="yes" xml:space="preserve">
          <source>Cycle::max</source>
          <target state="translated">Cycle::max</target>
        </trans-unit>
        <trans-unit id="a3d165c5cbfd7a5a74975eb77a6039ad4013f828" translate="yes" xml:space="preserve">
          <source>Cycle::max_by</source>
          <target state="translated">Cycle::max_by</target>
        </trans-unit>
        <trans-unit id="5c58c34f9c0a12745239f5a2535aa943d119301a" translate="yes" xml:space="preserve">
          <source>Cycle::max_by_key</source>
          <target state="translated">Cycle::max_by_key</target>
        </trans-unit>
        <trans-unit id="70ce07c508f1ef847d310598189e1bda0842fdd0" translate="yes" xml:space="preserve">
          <source>Cycle::min</source>
          <target state="translated">Cycle::min</target>
        </trans-unit>
        <trans-unit id="b99df7594807b3ab75f8989b981b11ef703c807d" translate="yes" xml:space="preserve">
          <source>Cycle::min_by</source>
          <target state="translated">Cycle::min_by</target>
        </trans-unit>
        <trans-unit id="decea16cd79281c35206ecab9bab4061cbfbeabb" translate="yes" xml:space="preserve">
          <source>Cycle::min_by_key</source>
          <target state="translated">Cycle::min_by_key</target>
        </trans-unit>
        <trans-unit id="62fe08dbbc65db452392fdd3f581c768db635b31" translate="yes" xml:space="preserve">
          <source>Cycle::ne</source>
          <target state="translated">Cycle::ne</target>
        </trans-unit>
        <trans-unit id="1b53833a6dc6bd6e44f595e900a7441d2555b554" translate="yes" xml:space="preserve">
          <source>Cycle::next</source>
          <target state="translated">Cycle::next</target>
        </trans-unit>
        <trans-unit id="e28dd22b1e11da2fd650d61c96d4fe6905088eea" translate="yes" xml:space="preserve">
          <source>Cycle::nth</source>
          <target state="translated">Cycle::nth</target>
        </trans-unit>
        <trans-unit id="8c4ac9a410e38e23aed111829ed962b4ebc9ac37" translate="yes" xml:space="preserve">
          <source>Cycle::partial_cmp</source>
          <target state="translated">Cycle::partial_cmp</target>
        </trans-unit>
        <trans-unit id="3a5b9b0e79bf8208a925b7dbb807affc2d3d5390" translate="yes" xml:space="preserve">
          <source>Cycle::partition</source>
          <target state="translated">Cycle::partition</target>
        </trans-unit>
        <trans-unit id="08f304b7e5408c25ac31406e77b983ed98a48630" translate="yes" xml:space="preserve">
          <source>Cycle::peekable</source>
          <target state="translated">Cycle::peekable</target>
        </trans-unit>
        <trans-unit id="eb37395a71586a17922d1130b0756b79b2b63272" translate="yes" xml:space="preserve">
          <source>Cycle::position</source>
          <target state="translated">Cycle::position</target>
        </trans-unit>
        <trans-unit id="eb5a873ba027a2f63a692eaefd2a7ce0f86d6c11" translate="yes" xml:space="preserve">
          <source>Cycle::product</source>
          <target state="translated">Cycle::product</target>
        </trans-unit>
        <trans-unit id="6b71bbc8a81cb99953e96743b456ccf98351ae33" translate="yes" xml:space="preserve">
          <source>Cycle::rev</source>
          <target state="translated">Cycle::rev</target>
        </trans-unit>
        <trans-unit id="658d1d88fa1c7ba170349f9afcc9b8b5d9c73c67" translate="yes" xml:space="preserve">
          <source>Cycle::rposition</source>
          <target state="translated">Cycle::rposition</target>
        </trans-unit>
        <trans-unit id="2bfb648455b28f06114152c647dca1fe88f4b117" translate="yes" xml:space="preserve">
          <source>Cycle::scan</source>
          <target state="translated">Cycle::scan</target>
        </trans-unit>
        <trans-unit id="993d85755431d0cb532c47ccd8fc3d47ab3ce18e" translate="yes" xml:space="preserve">
          <source>Cycle::size_hint</source>
          <target state="translated">Cycle::size_hint</target>
        </trans-unit>
        <trans-unit id="044c62603d5e3d05c3bfc27dc9527236a5a4335d" translate="yes" xml:space="preserve">
          <source>Cycle::skip</source>
          <target state="translated">Cycle::skip</target>
        </trans-unit>
        <trans-unit id="ae08ef429cc5958240018bcad1474c33323b30e3" translate="yes" xml:space="preserve">
          <source>Cycle::skip_while</source>
          <target state="translated">Cycle::skip_while</target>
        </trans-unit>
        <trans-unit id="c3c179121e73ed8fd4af03d2c30275951222cdc6" translate="yes" xml:space="preserve">
          <source>Cycle::step_by</source>
          <target state="translated">Cycle::step_by</target>
        </trans-unit>
        <trans-unit id="7833f1fdef5c7f028e78b519f82ae64e15481764" translate="yes" xml:space="preserve">
          <source>Cycle::sum</source>
          <target state="translated">Cycle::sum</target>
        </trans-unit>
        <trans-unit id="b0e5e37ca6dfd53759e5b3d854f9b4d5553befcd" translate="yes" xml:space="preserve">
          <source>Cycle::take</source>
          <target state="translated">Cycle::take</target>
        </trans-unit>
        <trans-unit id="4d6d558b6d81abf2b55472f4c12c54c452cbcf04" translate="yes" xml:space="preserve">
          <source>Cycle::take_while</source>
          <target state="translated">Cycle::take_while</target>
        </trans-unit>
        <trans-unit id="2bd7b27d7d47199f8b79dc0352645da686c309b3" translate="yes" xml:space="preserve">
          <source>Cycle::to_owned</source>
          <target state="translated">Cycle::to_owned</target>
        </trans-unit>
        <trans-unit id="978dd67e7170b30281e03bc34f9cf5086459b9f8" translate="yes" xml:space="preserve">
          <source>Cycle::try_fold</source>
          <target state="translated">Cycle::try_fold</target>
        </trans-unit>
        <trans-unit id="2f9d5a8ba61139023a4f510c420e6dd1b772c4e7" translate="yes" xml:space="preserve">
          <source>Cycle::try_for_each</source>
          <target state="translated">Cycle::try_for_each</target>
        </trans-unit>
        <trans-unit id="c7abc38cb96c7d7e5e9b6aaac8545b0481576ed9" translate="yes" xml:space="preserve">
          <source>Cycle::try_from</source>
          <target state="translated">Cycle::try_from</target>
        </trans-unit>
        <trans-unit id="5db66d3608f0d6a420d2bf27d6b7ca5c83d81998" translate="yes" xml:space="preserve">
          <source>Cycle::try_into</source>
          <target state="translated">Cycle::try_into</target>
        </trans-unit>
        <trans-unit id="d3ff576be28bae96cc48716bbae90b9ddd35113b" translate="yes" xml:space="preserve">
          <source>Cycle::type_id</source>
          <target state="translated">Cycle::type_id</target>
        </trans-unit>
        <trans-unit id="908ecb64d2a773f9ea32adf64e12b97724bb854d" translate="yes" xml:space="preserve">
          <source>Cycle::unzip</source>
          <target state="translated">Cycle::unzip</target>
        </trans-unit>
        <trans-unit id="db2593fcc11dfd20ecf0252959d0c38e24ad3160" translate="yes" xml:space="preserve">
          <source>Cycle::zip</source>
          <target state="translated">Cycle::zip</target>
        </trans-unit>
        <trans-unit id="6102af1503b688d06337d6d314be78ccc2e04c4f" translate="yes" xml:space="preserve">
          <source>DEC_DIGIT (DEC_DIGIT|&lt;code&gt;_&lt;/code&gt;)&lt;sup&gt;*&lt;/sup&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ea940a067af582a8e8529e1900d0689b6311f51" translate="yes" xml:space="preserve">
          <source>DEC_DIGIT : [&lt;code&gt;0&lt;/code&gt;-&lt;code&gt;9&lt;/code&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="476b54a11815610731cfd91b7a37618bc60385a8" translate="yes" xml:space="preserve">
          <source>DEC_LITERAL :</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29ac1833a0f456913c9ea74abab77eaad12b3a23" translate="yes" xml:space="preserve">
          <source>DEC_LITERAL &lt;code&gt;.&lt;/code&gt;&lt;em&gt;(not immediately followed by &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;_&lt;/code&gt; or an &lt;a href=&quot;identifiers&quot;&gt;identifier&lt;/a&gt;&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4a1470bd9fa9d864b8e2a674844408f43f7ea49" translate="yes" xml:space="preserve">
          <source>DFA</source>
          <target state="translated">DFA</target>
        </trans-unit>
        <trans-unit id="e848d63e53c17d7219dfa67a2cafbb25b2efb309" translate="yes" xml:space="preserve">
          <source>DIGITS</source>
          <target state="translated">DIGITS</target>
        </trans-unit>
        <trans-unit id="ce1e1ba27caba665e66a353797b83b929d7d6f66" translate="yes" xml:space="preserve">
          <source>DLL_EXTENSION</source>
          <target state="translated">DLL_EXTENSION</target>
        </trans-unit>
        <trans-unit id="1e6381a504a256eb43786bb9c20fd4c751c9d5ff" translate="yes" xml:space="preserve">
          <source>DLL_PREFIX</source>
          <target state="translated">DLL_PREFIX</target>
        </trans-unit>
        <trans-unit id="80e07987df166c568a7eb99cc54075db3715c1cf" translate="yes" xml:space="preserve">
          <source>DLL_SUFFIX</source>
          <target state="translated">DLL_SUFFIX</target>
        </trans-unit>
        <trans-unit id="724976782a35aea0ac9d7c4add2be932cd11938c" translate="yes" xml:space="preserve">
          <source>DST</source>
          <target state="translated">DST</target>
        </trans-unit>
        <trans-unit id="9e82704b7f769c6df63d66dac53f834e10b91f38" translate="yes" xml:space="preserve">
          <source>DSTs</source>
          <target state="translated">DSTs</target>
        </trans-unit>
        <trans-unit id="3ae8ffeedb6907fd72a0d0ce3478431fc546c4b1" translate="yes" xml:space="preserve">
          <source>Dangling References</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24f7178851f530861dfcbba6de92b9a2a18a8884" translate="yes" xml:space="preserve">
          <source>Dangling or null references and boxes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c18842877f84be9bb3ae10673c4e60242f22c160" translate="yes" xml:space="preserve">
          <source>Data Types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0c0f41ef8417d4d5d2ec5f0639295d8e3cfbf6a" translate="yes" xml:space="preserve">
          <source>Data is copied to fill each buffer in order, with the final buffer written to possibly being only partially filled. This method must behave as a single call to &lt;code&gt;read&lt;/code&gt; with the buffers concatenated would.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b36150ebf8dd74581d6c69f981e2fe8e40e0787" translate="yes" xml:space="preserve">
          <source>Data is copied to from each buffer in order, with the final buffer read from possibly being only partially consumed. This method must behave as a call to &lt;code&gt;write&lt;/code&gt; with the buffers concatenated would.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d4a367bb6a0e84d2231cd5db2a498cba3238fee" translate="yes" xml:space="preserve">
          <source>Data may be shared by placing it in a reference-counted box or the &lt;a href=&quot;rc/index&quot;&gt;&lt;code&gt;Rc&lt;/code&gt;&lt;/a&gt; type, and if further contained in a &lt;a href=&quot;cell/struct.cell&quot;&gt;&lt;code&gt;Cell&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;cell/struct.refcell&quot;&gt;&lt;code&gt;RefCell&lt;/code&gt;&lt;/a&gt;, may be mutated as well as shared. Likewise, in a concurrent setting it is common to pair an atomically-reference-counted box, &lt;a href=&quot;sync/struct.arc&quot;&gt;&lt;code&gt;Arc&lt;/code&gt;&lt;/a&gt;, with a &lt;a href=&quot;sync/struct.mutex&quot;&gt;&lt;code&gt;Mutex&lt;/code&gt;&lt;/a&gt; to get the same effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28295791c86f3115b889cd7ec2915e8186bc50ed" translate="yes" xml:space="preserve">
          <source>Data not valid for the operation were encountered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caaa4a467eaa32287a4168d5ef4944fb42825483" translate="yes" xml:space="preserve">
          <source>Data races cause undefined behavior and can be difficult to diagnose and fix when you&amp;rsquo;re trying to track them down at runtime; Rust prevents this problem from happening because it won&amp;rsquo;t even compile code with data races!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa03516fcd9411e8d8266af480dc648c27058a2e" translate="yes" xml:space="preserve">
          <source>Data races.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f3958acb7234fe3e10691732285b0dd0917a3f2" translate="yes" xml:space="preserve">
          <source>De-normalized floating point representation (less precise than &lt;code&gt;Normal&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f5cf1c11e68d3f1c518349f633afc29d6e23118" translate="yes" xml:space="preserve">
          <source>Deadlocks</source>
          <target state="translated">Deadlocks</target>
        </trans-unit>
        <trans-unit id="34b23af80772bac584b8b14b4c6d7c4746675c35" translate="yes" xml:space="preserve">
          <source>Deadlocks, where two threads are waiting for each other to finish using a resource the other thread has, preventing both threads from continuing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d94576b7eb60cf1bd0d90b5f4d335da0f3c0cdff" translate="yes" xml:space="preserve">
          <source>Deallocate memory with the global allocator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70002793b47c615d523c65de058268e76678384a" translate="yes" xml:space="preserve">
          <source>Deallocate the block of memory at the given &lt;code&gt;ptr&lt;/code&gt; pointer with the given &lt;code&gt;layout&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="841bbd92cc71925f18003b934ca5775c323421fc" translate="yes" xml:space="preserve">
          <source>Deallocate the block of memory at the given &lt;code&gt;ptr&lt;/code&gt; pointer with the given &lt;code&gt;layout&lt;/code&gt;. &lt;a href=&quot;trait.globalalloc#tymethod.dealloc&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6521f0ab7ee551f2824e33de2c46172646b6af9e" translate="yes" xml:space="preserve">
          <source>Deallocate the memory referenced by &lt;code&gt;ptr&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00e2ad4b768a5d6394b5422c09114b054ac731c7" translate="yes" xml:space="preserve">
          <source>Deallocate the memory referenced by &lt;code&gt;ptr&lt;/code&gt;. &lt;a href=&quot;trait.alloc#tymethod.dealloc&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="098bb5a7f008a74e6e66b63758b617be71d735dd" translate="yes" xml:space="preserve">
          <source>Deallocates a block suitable for holding &lt;code&gt;n&lt;/code&gt; instances of &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e69067c8504c952e8d8c512f055e66cd88ceccc6" translate="yes" xml:space="preserve">
          <source>Deallocates a block suitable for holding &lt;code&gt;n&lt;/code&gt; instances of &lt;code&gt;T&lt;/code&gt;. &lt;a href=&quot;trait.alloc#method.dealloc_array&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db6030c8232842854382777ea39327a4cabb6d31" translate="yes" xml:space="preserve">
          <source>Deallocates a block suitable for holding an instance of &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17cb41f6768dd191f0a261566c1ec49e57f6bd3b" translate="yes" xml:space="preserve">
          <source>Deallocates a block suitable for holding an instance of &lt;code&gt;T&lt;/code&gt;. &lt;a href=&quot;trait.alloc#method.dealloc_one&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd604d99e75e45d38bc7ac8fc714cde0097d901f" translate="yes" xml:space="preserve">
          <source>Debug</source>
          <target state="translated">Debug</target>
        </trans-unit>
        <trans-unit id="81164edb834d0582600df8183d4f2141de3b5a84" translate="yes" xml:space="preserve">
          <source>Debug::fmt</source>
          <target state="translated">Debug::fmt</target>
        </trans-unit>
        <trans-unit id="a60d7a220215e446f14b6e7a44b1a8c1e12db251" translate="yes" xml:space="preserve">
          <source>DebugList</source>
          <target state="translated">DebugList</target>
        </trans-unit>
        <trans-unit id="8e32753212f38e07b45082bd67afbefa9455df23" translate="yes" xml:space="preserve">
          <source>DebugList::borrow</source>
          <target state="translated">DebugList::borrow</target>
        </trans-unit>
        <trans-unit id="6e538f2f34ae7df7422cf04d9b6e72f903bee574" translate="yes" xml:space="preserve">
          <source>DebugList::borrow_mut</source>
          <target state="translated">DebugList::borrow_mut</target>
        </trans-unit>
        <trans-unit id="11ce0b1f059d54fd67d8fbcb55818c1f9e86f6f7" translate="yes" xml:space="preserve">
          <source>DebugList::entries</source>
          <target state="translated">DebugList::entries</target>
        </trans-unit>
        <trans-unit id="9ff5c17cf0e4c21540c9aaa44e46f2485fdec59c" translate="yes" xml:space="preserve">
          <source>DebugList::entry</source>
          <target state="translated">DebugList::entry</target>
        </trans-unit>
        <trans-unit id="c19a162ab01fbe042640fc4c505402b8d710aa72" translate="yes" xml:space="preserve">
          <source>DebugList::finish</source>
          <target state="translated">DebugList::finish</target>
        </trans-unit>
        <trans-unit id="7256f7d6d969cebd9970fa654c9384cceae41331" translate="yes" xml:space="preserve">
          <source>DebugList::from</source>
          <target state="translated">DebugList::from</target>
        </trans-unit>
        <trans-unit id="5c2ec45e4d2932f4446cb6a1afb1d22167903dfb" translate="yes" xml:space="preserve">
          <source>DebugList::into</source>
          <target state="translated">DebugList::into</target>
        </trans-unit>
        <trans-unit id="465231e925b00ba7cc222c32dce7510fd59b2a56" translate="yes" xml:space="preserve">
          <source>DebugList::try_from</source>
          <target state="translated">DebugList::try_from</target>
        </trans-unit>
        <trans-unit id="f0b0b267ea2c86de5c461858e1f17f9e6bc6a872" translate="yes" xml:space="preserve">
          <source>DebugList::try_into</source>
          <target state="translated">DebugList::try_into</target>
        </trans-unit>
        <trans-unit id="e4fe6c78613749267cef784a01421fd37be47c5c" translate="yes" xml:space="preserve">
          <source>DebugList::type_id</source>
          <target state="translated">DebugList::type_id</target>
        </trans-unit>
        <trans-unit id="d65787461745ccdefb29a1ef93d515613ba02864" translate="yes" xml:space="preserve">
          <source>DebugMap</source>
          <target state="translated">DebugMap</target>
        </trans-unit>
        <trans-unit id="1996b3406e1b61233f441b5b7f2647371d4b256b" translate="yes" xml:space="preserve">
          <source>DebugMap::borrow</source>
          <target state="translated">DebugMap::borrow</target>
        </trans-unit>
        <trans-unit id="77271b65d620d9544f75c95a8cd6811a098f3b42" translate="yes" xml:space="preserve">
          <source>DebugMap::borrow_mut</source>
          <target state="translated">DebugMap::borrow_mut</target>
        </trans-unit>
        <trans-unit id="c2c725b63e4b18d010f349c1db9eef911ebaeba7" translate="yes" xml:space="preserve">
          <source>DebugMap::entries</source>
          <target state="translated">DebugMap::entries</target>
        </trans-unit>
        <trans-unit id="85c74badc715b8b566e807b287878d5b84888c27" translate="yes" xml:space="preserve">
          <source>DebugMap::entry</source>
          <target state="translated">DebugMap::entry</target>
        </trans-unit>
        <trans-unit id="8eed89e8c1389f62162e3ab7b94301b53cde4fb2" translate="yes" xml:space="preserve">
          <source>DebugMap::finish</source>
          <target state="translated">DebugMap::finish</target>
        </trans-unit>
        <trans-unit id="b6616b7c4b428fd773525b9832363b87d439b976" translate="yes" xml:space="preserve">
          <source>DebugMap::from</source>
          <target state="translated">DebugMap::from</target>
        </trans-unit>
        <trans-unit id="0d1ac893758c80699e398e4af9ac25747ce47322" translate="yes" xml:space="preserve">
          <source>DebugMap::into</source>
          <target state="translated">DebugMap::into</target>
        </trans-unit>
        <trans-unit id="a6df898952d6600e334a9789c683a0676756e9fb" translate="yes" xml:space="preserve">
          <source>DebugMap::try_from</source>
          <target state="translated">DebugMap::try_from</target>
        </trans-unit>
        <trans-unit id="cba0a69042fde2e8dece557c2b2e95cc14bdbab9" translate="yes" xml:space="preserve">
          <source>DebugMap::try_into</source>
          <target state="translated">DebugMap::try_into</target>
        </trans-unit>
        <trans-unit id="a3a7026fbb6774eba354aadfb42622de28ef1e65" translate="yes" xml:space="preserve">
          <source>DebugMap::type_id</source>
          <target state="translated">DebugMap::type_id</target>
        </trans-unit>
        <trans-unit id="c34a95fb1ea481df36eb0ff78cdcfbee19e6330e" translate="yes" xml:space="preserve">
          <source>DebugSet</source>
          <target state="translated">DebugSet</target>
        </trans-unit>
        <trans-unit id="8e0ca6285a8dc009ab24947b479583e3b565665d" translate="yes" xml:space="preserve">
          <source>DebugSet::borrow</source>
          <target state="translated">DebugSet::borrow</target>
        </trans-unit>
        <trans-unit id="1f56f91582358975a9688e175b36dc01c0f1f478" translate="yes" xml:space="preserve">
          <source>DebugSet::borrow_mut</source>
          <target state="translated">DebugSet::borrow_mut</target>
        </trans-unit>
        <trans-unit id="c711c41c48e718c7ad771c23111ef4e997f2ea48" translate="yes" xml:space="preserve">
          <source>DebugSet::entries</source>
          <target state="translated">DebugSet::entries</target>
        </trans-unit>
        <trans-unit id="397086f95495cd8c06ad52edb6bbcbb017063dd9" translate="yes" xml:space="preserve">
          <source>DebugSet::entry</source>
          <target state="translated">DebugSet::entry</target>
        </trans-unit>
        <trans-unit id="bed6afcb9558fb0816673a6344c2cd0bdcec64ae" translate="yes" xml:space="preserve">
          <source>DebugSet::finish</source>
          <target state="translated">DebugSet::finish</target>
        </trans-unit>
        <trans-unit id="c81f1d75420a4fa3f9c66786b2f75ec41a21f5ee" translate="yes" xml:space="preserve">
          <source>DebugSet::from</source>
          <target state="translated">DebugSet::from</target>
        </trans-unit>
        <trans-unit id="0b167f08c0d49297e5301b7a612f9354c4ecc1be" translate="yes" xml:space="preserve">
          <source>DebugSet::into</source>
          <target state="translated">DebugSet::into</target>
        </trans-unit>
        <trans-unit id="40ba72fe403768332afbbcca4e42acd14e80201d" translate="yes" xml:space="preserve">
          <source>DebugSet::try_from</source>
          <target state="translated">DebugSet::try_from</target>
        </trans-unit>
        <trans-unit id="83c39780ab24417a91d39f0ac512e899cffdb7de" translate="yes" xml:space="preserve">
          <source>DebugSet::try_into</source>
          <target state="translated">DebugSet::try_into</target>
        </trans-unit>
        <trans-unit id="d16121a11a75123841f26b5dbde232385c5fee62" translate="yes" xml:space="preserve">
          <source>DebugSet::type_id</source>
          <target state="translated">DebugSet::type_id</target>
        </trans-unit>
        <trans-unit id="543f197c96218c42d00f3c3611b631c8212553d6" translate="yes" xml:space="preserve">
          <source>DebugStruct</source>
          <target state="translated">DebugStruct</target>
        </trans-unit>
        <trans-unit id="8b4c59f42a21add90383270ca4a52bb86c600fe9" translate="yes" xml:space="preserve">
          <source>DebugStruct::borrow</source>
          <target state="translated">DebugStruct::borrow</target>
        </trans-unit>
        <trans-unit id="6f6f363bd50fd68fc6eba33f1871ca1be1027efa" translate="yes" xml:space="preserve">
          <source>DebugStruct::borrow_mut</source>
          <target state="translated">DebugStruct::borrow_mut</target>
        </trans-unit>
        <trans-unit id="4fd044d6c6466522217e882896e40c73bb8c78bc" translate="yes" xml:space="preserve">
          <source>DebugStruct::field</source>
          <target state="translated">DebugStruct::field</target>
        </trans-unit>
        <trans-unit id="13384f4f2be55007b243b5f88dc97caee0104dfe" translate="yes" xml:space="preserve">
          <source>DebugStruct::finish</source>
          <target state="translated">DebugStruct::finish</target>
        </trans-unit>
        <trans-unit id="eaca2ed00445725cca18995faa13be91a5504727" translate="yes" xml:space="preserve">
          <source>DebugStruct::from</source>
          <target state="translated">DebugStruct::from</target>
        </trans-unit>
        <trans-unit id="55216f9d28cb3b4ff24ed1f1adeba1bee87c89b7" translate="yes" xml:space="preserve">
          <source>DebugStruct::into</source>
          <target state="translated">DebugStruct::into</target>
        </trans-unit>
        <trans-unit id="221fde73b903baccd6b64c8e58365835bc198da9" translate="yes" xml:space="preserve">
          <source>DebugStruct::try_from</source>
          <target state="translated">DebugStruct::try_from</target>
        </trans-unit>
        <trans-unit id="7da40d465656eb737dc43460497f2376d260baf8" translate="yes" xml:space="preserve">
          <source>DebugStruct::try_into</source>
          <target state="translated">DebugStruct::try_into</target>
        </trans-unit>
        <trans-unit id="0eb0a9173b8a55437fd0ec85c6c712f7da69e5be" translate="yes" xml:space="preserve">
          <source>DebugStruct::type_id</source>
          <target state="translated">DebugStruct::type_id</target>
        </trans-unit>
        <trans-unit id="ca16f4625171c71844b8750eb83afa29bd182aaf" translate="yes" xml:space="preserve">
          <source>DebugTuple</source>
          <target state="translated">DebugTuple</target>
        </trans-unit>
        <trans-unit id="82ac20591a60e27a5a17183f0921fbee6ac1e74a" translate="yes" xml:space="preserve">
          <source>DebugTuple::borrow</source>
          <target state="translated">DebugTuple::borrow</target>
        </trans-unit>
        <trans-unit id="e56cc02dd85f36a8c0faf22a05b13facd77fed5a" translate="yes" xml:space="preserve">
          <source>DebugTuple::borrow_mut</source>
          <target state="translated">DebugTuple::borrow_mut</target>
        </trans-unit>
        <trans-unit id="c48d3ddd38f9976a508d216548647eea55e12e50" translate="yes" xml:space="preserve">
          <source>DebugTuple::field</source>
          <target state="translated">DebugTuple::field</target>
        </trans-unit>
        <trans-unit id="f9566df1af4c6264a18f41b5e2dcbbdff9c4ceb4" translate="yes" xml:space="preserve">
          <source>DebugTuple::finish</source>
          <target state="translated">DebugTuple::finish</target>
        </trans-unit>
        <trans-unit id="13bc97fcdaf2fc11c852f2bdfab78811e7df3040" translate="yes" xml:space="preserve">
          <source>DebugTuple::from</source>
          <target state="translated">DebugTuple::from</target>
        </trans-unit>
        <trans-unit id="4bffff5fc2311eec224ce6f3595668c685d971d6" translate="yes" xml:space="preserve">
          <source>DebugTuple::into</source>
          <target state="translated">DebugTuple::into</target>
        </trans-unit>
        <trans-unit id="914aa9f66ceddf11f34b0abc994ace846eb9eac8" translate="yes" xml:space="preserve">
          <source>DebugTuple::try_from</source>
          <target state="translated">DebugTuple::try_from</target>
        </trans-unit>
        <trans-unit id="0121a5bcd33f73295972d50f242021790394310f" translate="yes" xml:space="preserve">
          <source>DebugTuple::try_into</source>
          <target state="translated">DebugTuple::try_into</target>
        </trans-unit>
        <trans-unit id="33304e6a454f2852d0a43d9d56b69ef7a57a9ce5" translate="yes" xml:space="preserve">
          <source>DebugTuple::type_id</source>
          <target state="translated">DebugTuple::type_id</target>
        </trans-unit>
        <trans-unit id="7df80a24c5ca433ebd54a75a88f80219152b5575" translate="yes" xml:space="preserve">
          <source>Deciding whether or not to run some code depending on if a condition is true and deciding to run some code repeatedly while a condition is true are basic building blocks in most programming languages. The most common constructs that let you control the flow of execution of Rust code are &lt;code&gt;if&lt;/code&gt; expressions and loops.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4c3a2d0cc24a4535ef91791064ffe989cbd382a" translate="yes" xml:space="preserve">
          <source>Decimal</source>
          <target state="translated">Decimal</target>
        </trans-unit>
        <trans-unit id="ab5dfb740f9cf7f9df79ba16d24345758db1c965" translate="yes" xml:space="preserve">
          <source>Decimal integer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="267eb363b3f106e3005ab1c50b0101debef66501" translate="yes" xml:space="preserve">
          <source>Declaration statements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8c466a48da20d4783681f65fecd8bcef83753d0" translate="yes" xml:space="preserve">
          <source>Declarative Macros with &lt;code id=&quot;declarative-macros-with-macro_rules-for-general-metaprogramming&quot;&gt;macro_rules!&lt;/code&gt; for General Metaprogramming</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd5c6ebc8bd2bce6c0a6e1be3404d50878875217" translate="yes" xml:space="preserve">
          <source>Declare a new thread local storage key of type &lt;a href=&quot;thread/struct.localkey&quot;&gt;&lt;code&gt;std::thread::LocalKey&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dd53328b7399187bf3122b0f2f58b4adca6d4f4" translate="yes" xml:space="preserve">
          <source>Declaring certain lifetime names in parameters is disallowed. For example, because the &lt;code&gt;'static&lt;/code&gt; lifetime is a special built-in lifetime name denoting the lifetime of the entire program, this is an error:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e85646d3cbbec2f794cafd1f6c0e5a30bdcb1a5e" translate="yes" xml:space="preserve">
          <source>Declaring trait bounds in the angle brackets is functionally identical to using a &lt;code&gt;where&lt;/code&gt; clause. It's up to the programmer to decide which works better in each situation, but &lt;code&gt;where&lt;/code&gt; tends to be better when things get longer than one line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d846b5b62babf0599823ec3f319c60bd484eef4c" translate="yes" xml:space="preserve">
          <source>Decode a UTF-16 encoded slice &lt;code&gt;v&lt;/code&gt; into a &lt;code&gt;String&lt;/code&gt;, replacing invalid data with &lt;a href=&quot;../char/constant.replacement_character&quot;&gt;the replacement character (&lt;code&gt;U+FFFD&lt;/code&gt;)&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21bdb9e0691185467f8cb5a27d35bb07e5eb7923" translate="yes" xml:space="preserve">
          <source>Decode a UTF-16 encoded vector &lt;code&gt;v&lt;/code&gt; into a &lt;code&gt;String&lt;/code&gt;, returning &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; if &lt;code&gt;v&lt;/code&gt; contains any invalid data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fffb92833cd137b0d11eb520711921dbe305c65" translate="yes" xml:space="preserve">
          <source>DecodeUtf16</source>
          <target state="translated">DecodeUtf16</target>
        </trans-unit>
        <trans-unit id="0c483dd3eb1072e079a76cdff25767cef5239b4d" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::all</source>
          <target state="translated">DecodeUtf16::all</target>
        </trans-unit>
        <trans-unit id="72be3e90a471172e13d134ea30de51b34ff02e4a" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::any</source>
          <target state="translated">DecodeUtf16::any</target>
        </trans-unit>
        <trans-unit id="0cd27e5cdd32ad738f9708c765550d72fc4051c4" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::borrow</source>
          <target state="translated">DecodeUtf16::borrow</target>
        </trans-unit>
        <trans-unit id="2bd2a3baff16c454c8c025311bf84e232e23c901" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::borrow_mut</source>
          <target state="translated">DecodeUtf16::borrow_mut</target>
        </trans-unit>
        <trans-unit id="38263ed2c391818e9c87a4c754852ba2347092ec" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::by_ref</source>
          <target state="translated">DecodeUtf16::by_ref</target>
        </trans-unit>
        <trans-unit id="b4738fe8edf872aa55bb32d4a46a722587fb9f3c" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::chain</source>
          <target state="translated">DecodeUtf16::chain</target>
        </trans-unit>
        <trans-unit id="253ae9d3ee778d2346f4b8aae74c5779ab524b7b" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::clone</source>
          <target state="translated">DecodeUtf16::clone</target>
        </trans-unit>
        <trans-unit id="c4f2fa58f83d71be6d9282a5206e725c2b0d11e6" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::clone_from</source>
          <target state="translated">DecodeUtf16::clone_from</target>
        </trans-unit>
        <trans-unit id="ae30f757586afa7346e44d5347d901fa5861ad4d" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::clone_into</source>
          <target state="translated">DecodeUtf16::clone_into</target>
        </trans-unit>
        <trans-unit id="addc90728a51f00c01320c067f7190ac5a948806" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::cloned</source>
          <target state="translated">DecodeUtf16::cloned</target>
        </trans-unit>
        <trans-unit id="9d32f1da8111490a65d664cad786f0def6cfb11c" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::cmp</source>
          <target state="translated">DecodeUtf16::cmp</target>
        </trans-unit>
        <trans-unit id="b90f6797c521cf83e47be443b21d8fbb74f7d83e" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::collect</source>
          <target state="translated">DecodeUtf16::collect</target>
        </trans-unit>
        <trans-unit id="03a5eb4ee8df93f7630975658679f9f5a1b4d37a" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::copied</source>
          <target state="translated">DecodeUtf16::copied</target>
        </trans-unit>
        <trans-unit id="8be2a7b891e2190982d72f3b26846e4961c825ec" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::count</source>
          <target state="translated">DecodeUtf16::count</target>
        </trans-unit>
        <trans-unit id="8c875b692130f6baf66d6ed3b81247d352f87b58" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::cycle</source>
          <target state="translated">DecodeUtf16::cycle</target>
        </trans-unit>
        <trans-unit id="1e584bfedeea2149d93854c5da699e783d287fce" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::enumerate</source>
          <target state="translated">DecodeUtf16::enumerate</target>
        </trans-unit>
        <trans-unit id="b5f80c2c58ed5aac137bd86b727e4eb8204ba72c" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::eq</source>
          <target state="translated">DecodeUtf16::eq</target>
        </trans-unit>
        <trans-unit id="d2faf11b797fb537b8f68557f39cb4f61496fc15" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::filter</source>
          <target state="translated">DecodeUtf16::filter</target>
        </trans-unit>
        <trans-unit id="8b371813c6bed14f9e4b62a6a500cff43b2246b8" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::filter_map</source>
          <target state="translated">DecodeUtf16::filter_map</target>
        </trans-unit>
        <trans-unit id="3a09c33ed942f593ce334e2cc0e4931fb37028c3" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::find</source>
          <target state="translated">DecodeUtf16::find</target>
        </trans-unit>
        <trans-unit id="8207967a7c0b1c60f5f2c77958103b46c2c2c631" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::find_map</source>
          <target state="translated">DecodeUtf16::find_map</target>
        </trans-unit>
        <trans-unit id="53ae08731c8b4e9c9f3bf4450cb3a889f6e67310" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::flat_map</source>
          <target state="translated">DecodeUtf16::flat_map</target>
        </trans-unit>
        <trans-unit id="985c3854ddd66e22f28f9cb3dd0ffaa887cbeb24" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::flatten</source>
          <target state="translated">DecodeUtf16::flatten</target>
        </trans-unit>
        <trans-unit id="a74ce9887720d3c66123ae8487ad2f5f4108f1fc" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::fmt</source>
          <target state="translated">DecodeUtf16::fmt</target>
        </trans-unit>
        <trans-unit id="9138f81507d593a6dd9a94b28230b7f4465c7525" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::fold</source>
          <target state="translated">DecodeUtf16::fold</target>
        </trans-unit>
        <trans-unit id="d567075852c0ffff9943090dbe41c2f045aa7674" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::for_each</source>
          <target state="translated">DecodeUtf16::for_each</target>
        </trans-unit>
        <trans-unit id="c6bcb592254965889502aeec4d58fdb21efabc60" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::from</source>
          <target state="translated">DecodeUtf16::from</target>
        </trans-unit>
        <trans-unit id="337cb61999d9eafa82189ed3cb16765b11e0d1db" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::fuse</source>
          <target state="translated">DecodeUtf16::fuse</target>
        </trans-unit>
        <trans-unit id="b4162866b2927b3ddbe1ee045f3984c1c2bd908c" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::ge</source>
          <target state="translated">DecodeUtf16::ge</target>
        </trans-unit>
        <trans-unit id="30ba08f24cfe0775ac2885dc99addc69712df4ad" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::gt</source>
          <target state="translated">DecodeUtf16::gt</target>
        </trans-unit>
        <trans-unit id="f559c26f562617182e7d26ce5b1062cdfc92e6cf" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::inspect</source>
          <target state="translated">DecodeUtf16::inspect</target>
        </trans-unit>
        <trans-unit id="536a2d081f7521cca991a1015d5ef3202be51ff6" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::into</source>
          <target state="translated">DecodeUtf16::into</target>
        </trans-unit>
        <trans-unit id="4618c1955a2828ec2d835ec134d53f166e579304" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::into_iter</source>
          <target state="translated">DecodeUtf16::into_iter</target>
        </trans-unit>
        <trans-unit id="b5a06fb6e342bf63a01e54cd8d216b9352c9c447" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::is_sorted</source>
          <target state="translated">DecodeUtf16::is_sorted</target>
        </trans-unit>
        <trans-unit id="1caf54191f95cb6a00d350c90a9ab4a23f9f0442" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::is_sorted_by</source>
          <target state="translated">DecodeUtf16::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="b9821a021c1e7b391faf0268cb0591ddb59132fe" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::is_sorted_by_key</source>
          <target state="translated">DecodeUtf16::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="cf18fbbeacb112db644fb8c7c02290fb789dcc2e" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::last</source>
          <target state="translated">DecodeUtf16::last</target>
        </trans-unit>
        <trans-unit id="7a3ceaffbd36446f84baa221182083cc02f52dc9" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::le</source>
          <target state="translated">DecodeUtf16::le</target>
        </trans-unit>
        <trans-unit id="5a764cf30c7856aa95f980e1e74156be03ba90d5" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::lt</source>
          <target state="translated">DecodeUtf16::lt</target>
        </trans-unit>
        <trans-unit id="eaee1242b914b3fdcdfb4e54565e746ff71ab4ff" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::map</source>
          <target state="translated">DecodeUtf16::map</target>
        </trans-unit>
        <trans-unit id="54aee96756a6781187cab26d6acfc2cdc53e25e2" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::max</source>
          <target state="translated">DecodeUtf16::max</target>
        </trans-unit>
        <trans-unit id="e0c186488d3fdf30fdf211b8c45d6d81803bc721" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::max_by</source>
          <target state="translated">DecodeUtf16::max_by</target>
        </trans-unit>
        <trans-unit id="5931ca9a135b6a788c336a8f4f8b2fdc46329ccb" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::max_by_key</source>
          <target state="translated">DecodeUtf16::max_by_key</target>
        </trans-unit>
        <trans-unit id="6dbdf50dba6e5087447ff606cb15cb17757a5560" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::min</source>
          <target state="translated">DecodeUtf16::min</target>
        </trans-unit>
        <trans-unit id="66dddee8a18f3f12d1c55b026d827f31407f2066" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::min_by</source>
          <target state="translated">DecodeUtf16::min_by</target>
        </trans-unit>
        <trans-unit id="c515d70ba6d459e409eb6c889e0bba6724801728" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::min_by_key</source>
          <target state="translated">DecodeUtf16::min_by_key</target>
        </trans-unit>
        <trans-unit id="34035a4bf555e9fbe6e41d9bf364506f7d2986be" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::ne</source>
          <target state="translated">DecodeUtf16::ne</target>
        </trans-unit>
        <trans-unit id="8b3b353f847b6e6f91d4903131bfdcd62d4ab927" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::next</source>
          <target state="translated">DecodeUtf16::next</target>
        </trans-unit>
        <trans-unit id="531aa0dbeddda4e7c96c5f7eee86ad5b91a61d03" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::nth</source>
          <target state="translated">DecodeUtf16::nth</target>
        </trans-unit>
        <trans-unit id="2cf52fad6a455ff6ff67456d67ba5468b4a89980" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::partial_cmp</source>
          <target state="translated">DecodeUtf16::partial_cmp</target>
        </trans-unit>
        <trans-unit id="2a6ad48ca7814ff23afb377483397444bb413923" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::partition</source>
          <target state="translated">DecodeUtf16::partition</target>
        </trans-unit>
        <trans-unit id="38b4de20cbb33f2ba6c27c51497c2d1a3b94aa14" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::peekable</source>
          <target state="translated">DecodeUtf16::peekable</target>
        </trans-unit>
        <trans-unit id="369b0c418b4ef2dd52cb3dc8e53a70dcf06be122" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::position</source>
          <target state="translated">DecodeUtf16::position</target>
        </trans-unit>
        <trans-unit id="e19f77b0844dc27ffc7680ae25a614dae7408f21" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::product</source>
          <target state="translated">DecodeUtf16::product</target>
        </trans-unit>
        <trans-unit id="b27e1d1a4f6199e50fff15f992dc81a556802eb0" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::rev</source>
          <target state="translated">DecodeUtf16::rev</target>
        </trans-unit>
        <trans-unit id="b337e0a96e3ae0cfea374cc4570450c6acc23c2a" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::rposition</source>
          <target state="translated">DecodeUtf16::rposition</target>
        </trans-unit>
        <trans-unit id="d2bbad248fb47c7de8d332910fd18e2adbcdf5c3" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::scan</source>
          <target state="translated">DecodeUtf16::scan</target>
        </trans-unit>
        <trans-unit id="6670d14e656f73bb6fb5e8d5cb8ab6dd177f178f" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::size_hint</source>
          <target state="translated">DecodeUtf16::size_hint</target>
        </trans-unit>
        <trans-unit id="ba138d832cac9967aeb5fe1a0c4fbcafcf682937" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::skip</source>
          <target state="translated">DecodeUtf16::skip</target>
        </trans-unit>
        <trans-unit id="5af6f140a5b23c8d400a7d716056c04a6ddc241c" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::skip_while</source>
          <target state="translated">DecodeUtf16::skip_while</target>
        </trans-unit>
        <trans-unit id="c15d168eed267b3006c92cb96c9350258d1f197d" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::step_by</source>
          <target state="translated">DecodeUtf16::step_by</target>
        </trans-unit>
        <trans-unit id="cc012ffc5e74f7d127dadf5d5fb9b11fee6815dc" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::sum</source>
          <target state="translated">DecodeUtf16::sum</target>
        </trans-unit>
        <trans-unit id="c1c1ccb6a426feb7c91f7864fc7636febb3fc260" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::take</source>
          <target state="translated">DecodeUtf16::take</target>
        </trans-unit>
        <trans-unit id="9912cb564fcb8a822a2ac1be9f282aab47c09c26" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::take_while</source>
          <target state="translated">DecodeUtf16::take_while</target>
        </trans-unit>
        <trans-unit id="a039b97b8dd00fced40a694729b2830de0f25a56" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::to_owned</source>
          <target state="translated">DecodeUtf16::to_owned</target>
        </trans-unit>
        <trans-unit id="69136c5eb962be3512f953eb84d370b035727097" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::try_fold</source>
          <target state="translated">DecodeUtf16::try_fold</target>
        </trans-unit>
        <trans-unit id="3ac2e71ce30c4f915a9c1eaf3198bc5f59cb127a" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::try_for_each</source>
          <target state="translated">DecodeUtf16::try_for_each</target>
        </trans-unit>
        <trans-unit id="2a9c47b594ac2015f671647aa497792ef3858128" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::try_from</source>
          <target state="translated">DecodeUtf16::try_from</target>
        </trans-unit>
        <trans-unit id="17efd7f83047ffec285f30b211ade31c7e165cf1" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::try_into</source>
          <target state="translated">DecodeUtf16::try_into</target>
        </trans-unit>
        <trans-unit id="da7d32811cecfd4f0e11187d5767fb25a5934e35" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::type_id</source>
          <target state="translated">DecodeUtf16::type_id</target>
        </trans-unit>
        <trans-unit id="1a3c6ef2664ad3ec7f830c689039d694538c5552" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::unzip</source>
          <target state="translated">DecodeUtf16::unzip</target>
        </trans-unit>
        <trans-unit id="0d5cc3496c51e4c98b18501bf89248fe8097de80" translate="yes" xml:space="preserve">
          <source>DecodeUtf16::zip</source>
          <target state="translated">DecodeUtf16::zip</target>
        </trans-unit>
        <trans-unit id="1493e3bfcee517e1947863ff248bad61b057dc8f" translate="yes" xml:space="preserve">
          <source>DecodeUtf16Error</source>
          <target state="translated">DecodeUtf16Error</target>
        </trans-unit>
        <trans-unit id="57d673990e35a4afc03d4a5325901f16612ca7c0" translate="yes" xml:space="preserve">
          <source>DecodeUtf16Error::borrow</source>
          <target state="translated">DecodeUtf16Error::borrow</target>
        </trans-unit>
        <trans-unit id="ba4fdd34466b48f2e78032e4cb995680a10543b8" translate="yes" xml:space="preserve">
          <source>DecodeUtf16Error::borrow_mut</source>
          <target state="translated">DecodeUtf16Error::borrow_mut</target>
        </trans-unit>
        <trans-unit id="8f8cdbedf4bdf6e2a5cd6b73c6406bfc4dec374b" translate="yes" xml:space="preserve">
          <source>DecodeUtf16Error::cause</source>
          <target state="translated">DecodeUtf16Error::cause</target>
        </trans-unit>
        <trans-unit id="23ca5ecdecb6b55c7e36d3a51812d8b2e9d21142" translate="yes" xml:space="preserve">
          <source>DecodeUtf16Error::clone</source>
          <target state="translated">DecodeUtf16Error::clone</target>
        </trans-unit>
        <trans-unit id="9a0b49eb80077253e715a265cc25fa4313a0f995" translate="yes" xml:space="preserve">
          <source>DecodeUtf16Error::clone_from</source>
          <target state="translated">DecodeUtf16Error::clone_from</target>
        </trans-unit>
        <trans-unit id="c381a781caa57670926d5830b7d28ba1d6f3df5e" translate="yes" xml:space="preserve">
          <source>DecodeUtf16Error::clone_into</source>
          <target state="translated">DecodeUtf16Error::clone_into</target>
        </trans-unit>
        <trans-unit id="d7a9c7ec25484b4ef208977a6f0b3e3fe2ab2e00" translate="yes" xml:space="preserve">
          <source>DecodeUtf16Error::description</source>
          <target state="translated">DecodeUtf16Error::description</target>
        </trans-unit>
        <trans-unit id="3dc82a83290c3be0a8b477df0d8c8cb694c663b9" translate="yes" xml:space="preserve">
          <source>DecodeUtf16Error::eq</source>
          <target state="translated">DecodeUtf16Error::eq</target>
        </trans-unit>
        <trans-unit id="d21c8ca806ffba59cde7cd87bda438f4359c653a" translate="yes" xml:space="preserve">
          <source>DecodeUtf16Error::fmt</source>
          <target state="translated">DecodeUtf16Error::fmt</target>
        </trans-unit>
        <trans-unit id="20eff1e4e74632c6253f033d1d59bd0c8288f493" translate="yes" xml:space="preserve">
          <source>DecodeUtf16Error::from</source>
          <target state="translated">DecodeUtf16Error::from</target>
        </trans-unit>
        <trans-unit id="dce7a94f6c67b3374cbc66af790d70a0a5ef0c10" translate="yes" xml:space="preserve">
          <source>DecodeUtf16Error::into</source>
          <target state="translated">DecodeUtf16Error::into</target>
        </trans-unit>
        <trans-unit id="73eb10779ff4b762d7c879605f0bec1ed4c3ac00" translate="yes" xml:space="preserve">
          <source>DecodeUtf16Error::ne</source>
          <target state="translated">DecodeUtf16Error::ne</target>
        </trans-unit>
        <trans-unit id="d44452ae0ea242a3f03e20692537a71512a2ff92" translate="yes" xml:space="preserve">
          <source>DecodeUtf16Error::source</source>
          <target state="translated">DecodeUtf16Error::source</target>
        </trans-unit>
        <trans-unit id="24728ca63caef5406a39ca2e0951d14f80d39c58" translate="yes" xml:space="preserve">
          <source>DecodeUtf16Error::to_owned</source>
          <target state="translated">DecodeUtf16Error::to_owned</target>
        </trans-unit>
        <trans-unit id="6501dc36a9e42e98d4ea4d48f53a106920f009ff" translate="yes" xml:space="preserve">
          <source>DecodeUtf16Error::to_string</source>
          <target state="translated">DecodeUtf16Error::to_string</target>
        </trans-unit>
        <trans-unit id="c30ca1046a2aa5c3b9609bbc74f486600c62c3d4" translate="yes" xml:space="preserve">
          <source>DecodeUtf16Error::try_from</source>
          <target state="translated">DecodeUtf16Error::try_from</target>
        </trans-unit>
        <trans-unit id="63d42218f29f0daa71ba960efc9a77c01ae59ece" translate="yes" xml:space="preserve">
          <source>DecodeUtf16Error::try_into</source>
          <target state="translated">DecodeUtf16Error::try_into</target>
        </trans-unit>
        <trans-unit id="24260641e9d9c59969aa63b92f06d8a4fa06c8c8" translate="yes" xml:space="preserve">
          <source>DecodeUtf16Error::type_id</source>
          <target state="translated">DecodeUtf16Error::type_id</target>
        </trans-unit>
        <trans-unit id="203e6e3b423c10122a908bab62008f22e61ee26b" translate="yes" xml:space="preserve">
          <source>DecodeUtf16Error::unpaired_surrogate</source>
          <target state="translated">DecodeUtf16Error::unpaired_surrogate</target>
        </trans-unit>
        <trans-unit id="808d7dca8a74d84af27a2d6602c3d786de45fe1e" translate="yes" xml:space="preserve">
          <source>Default</source>
          <target state="translated">Default</target>
        </trans-unit>
        <trans-unit id="5c54ac6c1966d0171b52316955bd8dca31bf04fb" translate="yes" xml:space="preserve">
          <source>Default Generic Type Parameters and Operator Overloading</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="045ede237d5ffa1dae01340fe0445ba033120980" translate="yes" xml:space="preserve">
          <source>Default Implementations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba343a281c845f069dd40843f785800359d0698b" translate="yes" xml:space="preserve">
          <source>Default implementations can call other methods in the same trait, even if those other methods don&amp;rsquo;t have a default implementation. In this way, a trait can provide a lot of useful functionality and only require implementors to specify a small part of it. For example, we could define the &lt;code&gt;Summary&lt;/code&gt; trait to have a &lt;code&gt;summarize_author&lt;/code&gt; method whose implementation is required, and then define a &lt;code&gt;summarize&lt;/code&gt; method that has a default implementation that calls the &lt;code&gt;summarize_author&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a91483e6360b3646ee54ed4e19077d5119378911" translate="yes" xml:space="preserve">
          <source>Default trait object lifetimes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="505a5b3ea840c811942619a54b13ebc90c1d69ae" translate="yes" xml:space="preserve">
          <source>Default values are often some kind of initial value, identity value, or anything else that may make sense as a default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18cfa29846be5d88a38b8ddf0318e49898df2749" translate="yes" xml:space="preserve">
          <source>Default::default</source>
          <target state="translated">Default::default</target>
        </trans-unit>
        <trans-unit id="fbd377384cd4e537b7e63605d35553f8591fc4a4" translate="yes" xml:space="preserve">
          <source>DefaultHasher</source>
          <target state="translated">DefaultHasher</target>
        </trans-unit>
        <trans-unit id="bf56a037f8eb371f517ddde5edfb82fe9eacf355" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;a href=&quot;struct.stdio#method.inherit&quot;&gt;&lt;code&gt;inherit&lt;/code&gt;&lt;/a&gt; when used with &lt;code&gt;spawn&lt;/code&gt; or &lt;code&gt;status&lt;/code&gt;, and defaults to &lt;a href=&quot;struct.stdio#method.piped&quot;&gt;&lt;code&gt;piped&lt;/code&gt;&lt;/a&gt; when used with &lt;code&gt;output&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e5a1a08bec2102ce07bfdf6a7686dcec5b9788a" translate="yes" xml:space="preserve">
          <source>Deferring the creation of an owned key until it is known to be required</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="432f3a996089c37538481f6f6e1be53656d15922" translate="yes" xml:space="preserve">
          <source>Define a &lt;code&gt;Worker::new&lt;/code&gt; function that takes an &lt;code&gt;id&lt;/code&gt; number and returns a &lt;code&gt;Worker&lt;/code&gt; instance that holds the &lt;code&gt;id&lt;/code&gt; and a thread spawned with an empty closure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc11612553ef39d18cbd236eb8998804f494a503" translate="yes" xml:space="preserve">
          <source>Define a &lt;code&gt;Worker&lt;/code&gt; struct that holds an &lt;code&gt;id&lt;/code&gt; and a &lt;code&gt;JoinHandle&amp;lt;()&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7f9f10ecbab802431e1f3cb8c8b629d032029c0" translate="yes" xml:space="preserve">
          <source>Define an alias for an existing type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f105fc90b8bb22934e565095ee16711acb9ad51" translate="yes" xml:space="preserve">
          <source>Define generic enumeration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e37bd5b6f154c97e17777be5e1831a1cf37080b" translate="yes" xml:space="preserve">
          <source>Define generic function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4211e02d4968a9565789f999b7e43d8911970a8" translate="yes" xml:space="preserve">
          <source>Define generic implementation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc9e8027397016480e7fcff8b962c002dc8b2dbb" translate="yes" xml:space="preserve">
          <source>Define generic structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73e238c301781f7a2d4eb87bc549865d2a4cbc80" translate="yes" xml:space="preserve">
          <source>Defining &lt;code id=&quot;defining-post-and-creating-a-new-instance-in-the-draft-state&quot;&gt;Post&lt;/code&gt; and Creating a New Instance in the Draft State</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2947f0706fff8e7126e6357ddb46ba0dbd29fa6" translate="yes" xml:space="preserve">
          <source>Defining Methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ae232afca081861858b253aaf1f3ffaa74c2e5b" translate="yes" xml:space="preserve">
          <source>Defining Modules to Control Scope and Privacy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="decfed670da0a748ef94b0c2ecdfd377a887ac80" translate="yes" xml:space="preserve">
          <source>Defining Our Own Smart Pointer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d5f6a8837bd721f1a6e00ea61c2eb356fa6f3d4" translate="yes" xml:space="preserve">
          <source>Defining a Trait</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4748a6b7802962b0f2a92e385ca6a18fbc199984" translate="yes" xml:space="preserve">
          <source>Defining a Trait for Common Behavior</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="303e56c9b8421dd66457586e4456217147541a42" translate="yes" xml:space="preserve">
          <source>Defining an Enum</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f14bd0484296981fbff8025b7149a6243b871b4b" translate="yes" xml:space="preserve">
          <source>Defining an enum with variants such as the ones in Listing 6-2 is similar to defining different kinds of struct definitions, except the enum doesn&amp;rsquo;t use the &lt;code&gt;struct&lt;/code&gt; keyword and all the variants are grouped together under the &lt;code&gt;Message&lt;/code&gt; type. The following structs could hold the same data that the preceding enum variants hold:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bac853d52352a8f8bf81a6e64a9dd03bd1420300" translate="yes" xml:space="preserve">
          <source>Defining and Instantiating Structs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53258a5b954779c14ca4da85fc417fc7c059395a" translate="yes" xml:space="preserve">
          <source>Definitions &amp;amp; Conventions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c8165a3b44ef73c95de81723f6c79997c3d9e95" translate="yes" xml:space="preserve">
          <source>Delegates to the &lt;code&gt;&amp;amp;str&lt;/code&gt; impl.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2ff9cc2124191e65f73700c2382d5e16744ab32" translate="yes" xml:space="preserve">
          <source>Delete the offending feature attribute, or add it to the list of allowed features in the &lt;code&gt;-Z allow_features&lt;/code&gt; flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95d2352c127bc9b052b6e577ab0b245caba8d012" translate="yes" xml:space="preserve">
          <source>Delete the offending feature attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46bbf306924eee9652ad5b65b09bb0869a4486d1" translate="yes" xml:space="preserve">
          <source>Delimiters</source>
          <target state="translated">Delimiters</target>
        </trans-unit>
        <trans-unit id="de543ed17540ba31c723171be0d32ce1cf99ef8c" translate="yes" xml:space="preserve">
          <source>Depending on an External Crate in a Workspace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="399ae4be33a57c192711f5ebe5abbb3a51356345" translate="yes" xml:space="preserve">
          <source>Depending on the specified order, a fence prevents the compiler and CPU from reordering certain types of memory operations around it. That creates synchronizes-with relationships between it and atomic operations or fences in other threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cafc6581fa576db44c29a719fde3a20f1179865" translate="yes" xml:space="preserve">
          <source>Depending on your browser, you might get slightly different output. Now that we&amp;rsquo;re printing the request data, we can see why we get multiple connections from one browser request by looking at the path after &lt;code&gt;Request: GET&lt;/code&gt;. If the repeated connections are all requesting &lt;em&gt;/&lt;/em&gt;, we know the browser is trying to fetch &lt;em&gt;/&lt;/em&gt; repeatedly because it&amp;rsquo;s not getting a response from our program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="527600bf0272b6bf3abcb495a99c6ee346bb82b2" translate="yes" xml:space="preserve">
          <source>Deprecated</source>
          <target state="translated">Deprecated</target>
        </trans-unit>
        <trans-unit id="d3100b38d941e8810fdd63040dbe65a4fed5fe64" translate="yes" xml:space="preserve">
          <source>Deprecated since 1.1.0: replaced with std::os::unix::fs::symlink and std::os::windows::fs::{symlink_file, symlink_dir}</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04e3e9a740c3a7b1627949f020282a0e4c2c53e1" translate="yes" xml:space="preserve">
          <source>Deprecated since 1.10.0: you probably meant (self - other).abs(): this operation is (self - other).max(0.0) except that abs_sub also propagates NaNs (also known as fdim in C). If you truly need the positive difference, consider using that expression or the C function fdim, depending on how you wish to handle NaN (please consider filing an issue describing your use-case too).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdfda2e47542033b752ec1e210a9cb623ec20656" translate="yes" xml:space="preserve">
          <source>Deprecated since 1.10.0: you probably meant (self - other).abs(): this operation is (self - other).max(0.0) except that abs_sub also propagates NaNs (also known as fdimf in C). If you truly need the positive difference, consider using that expression or the C function fdimf, depending on how you wish to handle NaN (please consider filing an issue describing your use-case too).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9bd3ceb9b14c654723ab6074e0af783f23b3297" translate="yes" xml:space="preserve">
          <source>Deprecated since 1.13.0: use std::collections::hash_map::DefaultHasher instead</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03173369262f2fdb7458cf65fb7f75c75ad4268e" translate="yes" xml:space="preserve">
          <source>Deprecated since 1.16.0: this option can only be set before the socket is bound</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f0641a3656900d3ae2853f74bf51ff6440b6783" translate="yes" xml:space="preserve">
          <source>Deprecated since 1.2.0: use align_of instead</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32b77ea951168674f6d43de79c9f0a999e563b5e" translate="yes" xml:space="preserve">
          <source>Deprecated since 1.2.0: use align_of_val instead</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07299c7d321fe4dea2f6eda92dd8f012f6c66e46" translate="yes" xml:space="preserve">
          <source>Deprecated since 1.24.0: use the sign_plus, sign_minus, alternate, or sign_aware_zero_pad methods instead</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b632c8182ea1cdb0f9422d4488d0db51bf1eb32" translate="yes" xml:space="preserve">
          <source>Deprecated since 1.26.0: use inherent methods instead</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6a8942f2179e123a6c560b1e9711539414a648b" translate="yes" xml:space="preserve">
          <source>Deprecated since 1.29.0: This function's behavior is unexpected and probably not what you want. Consider using the home_dir function from https://crates.io/crates/dirs instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72ac84a50687e0401e298e2b46b70eef11bb5aa6" translate="yes" xml:space="preserve">
          <source>Deprecated since 1.29.0: use get_unchecked(begin..end) instead</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de58bf0dbb6301eaded5be6db8a98fe0fc1f2746" translate="yes" xml:space="preserve">
          <source>Deprecated since 1.29.0: use get_unchecked_mut(begin..end) instead</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f50f6fdba5262abb5bff838f34da6fbad525af77" translate="yes" xml:space="preserve">
          <source>Deprecated since 1.3.0: renamed to join</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2a81a90b1295245eb25b4a950295a33c2b1cc65" translate="yes" xml:space="preserve">
          <source>Deprecated since 1.33.0: This is moving towards being removed in favor of .resize_with(Default::default). If you disagree, please comment in the tracking issue. 🔬 This is a nightly-only experimental API. (vec_resize_default #41758)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="991ee402a4dd64de0ef38942bc3e087e5e5712ee" translate="yes" xml:space="preserve">
          <source>Deprecated since 1.33.0: replaced by Error::source, which can support downcasting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1f8c7c5d37555e0342ab7878d03d950e3640b08" translate="yes" xml:space="preserve">
          <source>Deprecated since 1.33.0: superseded by trim_end</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fa3befce489fe7767b0e83d4cd9a3d870b8b577" translate="yes" xml:space="preserve">
          <source>Deprecated since 1.33.0: superseded by trim_end_matches</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a896f4649bfcb00d2a0d2f5eca7116e9ec227e8" translate="yes" xml:space="preserve">
          <source>Deprecated since 1.33.0: superseded by trim_start</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6923193d3b837ca885d6472bd1a925179e3a04a9" translate="yes" xml:space="preserve">
          <source>Deprecated since 1.33.0: superseded by trim_start_matches</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d013b9bd63aaff05df9977702df65007fb7f2bd1" translate="yes" xml:space="preserve">
          <source>Deprecated since 1.34.0: the new function is now preferred</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71e046072d9269e076803abaf8eea2524e68292e" translate="yes" xml:space="preserve">
          <source>Deprecated since 1.34.0: the new function is now preferred 🔬 This is a nightly-only experimental API. (integer_atomics #32976)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc7d12cd9e0ea3a360d731ce687b243ea255e17b" translate="yes" xml:space="preserve">
          <source>Deprecated since 1.37.0: should be unsafe, use pre_exec instead This is supported on Unix only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1126bab2fdc9da6f4455daea74586f8b7e7c8f1" translate="yes" xml:space="preserve">
          <source>Deprecated since 1.4.0: use lines() instead now</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24f0d16f0bb8ac8e09ab4952cb73d3db8603b96b" translate="yes" xml:space="preserve">
          <source>Deprecated since 1.4.0: use lines()/Lines instead now</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dbdcb2879eafcc80c1b2bd2ce2156a3196c5d72" translate="yes" xml:space="preserve">
          <source>Deprecated since 1.6.0: replaced by std::sync::Condvar::wait_timeout</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9e1416a6436fd0c288d364af62e339dded9a0ba" translate="yes" xml:space="preserve">
          <source>Deprecated since 1.6.0: replaced by std::thread::park_timeout</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93b7892dee69e271c121e23bdf07c2b278b92830" translate="yes" xml:space="preserve">
          <source>Deprecated since 1.6.0: replaced by std::thread::sleep</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21c91a880783f22cf3b63dfb9e44c16e774e1caa" translate="yes" xml:space="preserve">
          <source>Deprecated since 1.8.0: deprecated in favor of the accessor methods of this trait This is supported on Linux only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f351a92decc47abf83ee83c06fd37a35f0940f6" translate="yes" xml:space="preserve">
          <source>Deprecated since 1.8.0: these type aliases are no longer supported by the standard library, the libc crate on crates.io should be used instead for the correct definitions This is supported on Linux only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6079d8ee4437f19d124cfe55f2dc4b8c2e0ac8f" translate="yes" xml:space="preserve">
          <source>Deprecated since 1.8.0: these type aliases are no longer supported by the standard library, the libc crate on crates.io should be used instead for the correct definitions This is supported on Unix only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0b3d9ba26a7ac57793533a03834e9e8b13d0b50" translate="yes" xml:space="preserve">
          <source>DeprecatedExperimental</source>
          <target state="translated">DeprecatedExperimental</target>
        </trans-unit>
        <trans-unit id="85e323e6fc2ea224f8bc8ea80588b02851113b01" translate="yes" xml:space="preserve">
          <source>DeprecatedLinux</source>
          <target state="translated">DeprecatedLinux</target>
        </trans-unit>
        <trans-unit id="6373548eb10d40ceed447aca6da8f8d220d6fcaf" translate="yes" xml:space="preserve">
          <source>DeprecatedUnix</source>
          <target state="translated">DeprecatedUnix</target>
        </trans-unit>
        <trans-unit id="0c00b4a77106b1db5111a5c2d544c5652fec4d1d" translate="yes" xml:space="preserve">
          <source>Deprecating in 1.38.0: the new function is now preferred</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bd63c8ae67f32ff67fe98566737cbe4e5a155cb" translate="yes" xml:space="preserve">
          <source>Deprecating in 1.38.0: use mem::MaybeUninit instead</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceea5acd50a9fc0f771945e8f1d68f6913a0a4b6" translate="yes" xml:space="preserve">
          <source>Deprecation planned</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df0ad997b0e3d0399c4b21b8dd9e1dd618d5ee7f" translate="yes" xml:space="preserve">
          <source>Deref</source>
          <target state="translated">Deref</target>
        </trans-unit>
        <trans-unit id="2a77420cc7bd8d0a99502b28861fb0ddc341803c" translate="yes" xml:space="preserve">
          <source>Deref coercion was added to Rust so that programmers writing function and method calls don&amp;rsquo;t need to add as many explicit references and dereferences with &lt;code&gt;&amp;amp;&lt;/code&gt; and &lt;code&gt;*&lt;/code&gt;. The deref coercion feature also lets us write more code that can work for either references or smart pointers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df88d8846f547855f2e361454416634d00942ed6" translate="yes" xml:space="preserve">
          <source>Deref::deref</source>
          <target state="translated">Deref::deref</target>
        </trans-unit>
        <trans-unit id="f257586d823871fa0c17506e7daddd7d084f6162" translate="yes" xml:space="preserve">
          <source>DerefMut</source>
          <target state="translated">DerefMut</target>
        </trans-unit>
        <trans-unit id="8cd93380a04240c7f513dd0504b209faa07736cf" translate="yes" xml:space="preserve">
          <source>DerefMut::deref_mut</source>
          <target state="translated">DerefMut::deref_mut</target>
        </trans-unit>
        <trans-unit id="dec3b6d46e827cc481476ff03cd71af78767baf0" translate="yes" xml:space="preserve">
          <source>Dereference</source>
          <target state="translated">Dereference</target>
        </trans-unit>
        <trans-unit id="94225bb55f02cffe2639c566160bdaa4d81b1b56" translate="yes" xml:space="preserve">
          <source>Dereference a raw pointer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fe246d90e1eef88840de84d7186fd3e60a4344d" translate="yes" xml:space="preserve">
          <source>Dereference of a variable, or field of a variable, with type &lt;code&gt;&amp;amp;mut T&lt;/code&gt;. Note: This is an exception to the requirement of the next rule.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf15be28ec067a5f2def2af367cd349bb18c45f4" translate="yes" xml:space="preserve">
          <source>Dereferences of a type that implements &lt;code&gt;DerefMut&lt;/code&gt;, this then requires that the value being dereferenced is evaluated is a mutable place expression context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6285b5705c95fbc3abd29688b60f9c827f1bf1cc" translate="yes" xml:space="preserve">
          <source>Dereferences the content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9e5b9322c89412749e008b4a1629467f5980b1c" translate="yes" xml:space="preserve">
          <source>Dereferences the value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="203e8193ab79d8d8f6a36eff1d88c963c62a48dc" translate="yes" xml:space="preserve">
          <source>Dereferencing a &lt;a href=&quot;types/pointer&quot;&gt;raw pointer&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5e98978b4d566f48f224b70d1a8713fa1b3ed35" translate="yes" xml:space="preserve">
          <source>Dereferencing a Raw Pointer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a8f58415bed3dbbd0827b83d071007a1e2d7639" translate="yes" xml:space="preserve">
          <source>Dereferencing a null or dangling raw pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90581f70e194a01467c59d5dda0f147595ad4bf5" translate="yes" xml:space="preserve">
          <source>Dereferencing raw pointers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db71412b021b204b10e41bd88c713fa09c1a540d" translate="yes" xml:space="preserve">
          <source>Derivable</source>
          <target state="translated">Derivable</target>
        </trans-unit>
        <trans-unit id="66ff36dea57c0d8c7e146b725da4182bfdd4df6f" translate="yes" xml:space="preserve">
          <source>Derive</source>
          <target state="translated">Derive</target>
        </trans-unit>
        <trans-unit id="112338f58ef204d73942d4bc434c2d32ea0864eb" translate="yes" xml:space="preserve">
          <source>Derive macro helper attributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63c61cf5f8f79d1dd28c9e6315f3b4ab389bec22" translate="yes" xml:space="preserve">
          <source>Derive macros</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3deccee1f8aecf14e3765ffc88218d54d777243b" translate="yes" xml:space="preserve">
          <source>Derive macros can add additional &lt;a href=&quot;attributes&quot;&gt;attributes&lt;/a&gt; into the scope of the &lt;a href=&quot;items&quot;&gt;item&lt;/a&gt; they are on. Said attributes are called &lt;em&gt;derive macro helper attributes&lt;/em&gt;. These attributes are &lt;a href=&quot;attributes#active-and-inert-attributes&quot;&gt;inert&lt;/a&gt;, and their only purpose is to be fed into the derive macro that defined them. That said, they can be seen by all macros.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79fdb1532cc89a14d5dbfee71ea023d8e0384403" translate="yes" xml:space="preserve">
          <source>Deriving &lt;code&gt;Clone&lt;/code&gt; implements the &lt;code&gt;clone&lt;/code&gt; method, which when implemented for the whole type, calls &lt;code&gt;clone&lt;/code&gt; on each of the parts of the type. This means all the fields or values in the type must also implement &lt;code&gt;Clone&lt;/code&gt; to derive &lt;code&gt;Clone&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7404ecd6b469aea26dbea987b5684eb0f1cc5b8" translate="yes" xml:space="preserve">
          <source>Deriving &lt;code&gt;PartialEq&lt;/code&gt; implements the &lt;code&gt;eq&lt;/code&gt; method. When &lt;code&gt;PartialEq&lt;/code&gt; is derived on structs, two instances are equal only if &lt;em&gt;all&lt;/em&gt; fields are equal, and the instances are not equal if any fields are not equal. When derived on enums, each variant is equal to itself and not equal to the other variants.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b1c08c04c059f24ba06cdc1004250207714f2cc" translate="yes" xml:space="preserve">
          <source>Deriving &lt;code&gt;PartialOrd&lt;/code&gt; implements the &lt;code&gt;partial_cmp&lt;/code&gt; method, which returns an &lt;code&gt;Option&amp;lt;Ordering&amp;gt;&lt;/code&gt; that will be &lt;code&gt;None&lt;/code&gt; when the values given don&amp;rsquo;t produce an ordering. An example of a value that doesn&amp;rsquo;t produce an ordering, even though most values of that type can be compared, is the not-a-number (&lt;code&gt;NaN&lt;/code&gt;) floating point value. Calling &lt;code&gt;partial_cmp&lt;/code&gt; with any floating point number and the &lt;code&gt;NaN&lt;/code&gt; floating point value will return &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06577bba30756d250846189c651dee1b48d21a88" translate="yes" xml:space="preserve">
          <source>Deriving an implementation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4878c48a1f449ee2005017c65e70554a3fb5ff36" translate="yes" xml:space="preserve">
          <source>Describes the result of a process after it has terminated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90c6fd970980025ae692adb1ab3556011cbb30dc" translate="yes" xml:space="preserve">
          <source>Describes what to do with a standard I/O stream for a child process when passed to the &lt;a href=&quot;struct.command#method.stdin&quot;&gt;&lt;code&gt;stdin&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;struct.command#method.stdout&quot;&gt;&lt;code&gt;stdout&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;struct.command#method.stderr&quot;&gt;&lt;code&gt;stderr&lt;/code&gt;&lt;/a&gt; methods of &lt;a href=&quot;struct.command&quot;&gt;&lt;code&gt;Command&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="8ba00923d537dc9cfd63a7dd5b6ae95851f98649" translate="yes" xml:space="preserve">
          <source>Despite its name, the method does not reset the hasher&amp;rsquo;s internal state. Additional &lt;a href=&quot;#tymethod.write&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt;s will continue from the current value. If you need to start a fresh hash value, you will have to create a new hasher.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcf6c17f9da73e467a073ac5e6e487e5bdc36429" translate="yes" xml:space="preserve">
          <source>Destructors</source>
          <target state="translated">Destructors</target>
        </trans-unit>
        <trans-unit id="69fb1e79d722b855da9c1512910081b8e71ee0b8" translate="yes" xml:space="preserve">
          <source>Destructured arrays, enums, structs, or tuples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="223b06db480ce74a9acfa66f8dc7cbb8442242d5" translate="yes" xml:space="preserve">
          <source>Destructures the &lt;code&gt;RangeInclusive&lt;/code&gt; into (lower bound, upper (inclusive) bound).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="077ef6bb7e9ca7a81dc6c9028d61cccdb0c255dd" translate="yes" xml:space="preserve">
          <source>Destructuring</source>
          <target state="translated">Destructuring</target>
        </trans-unit>
        <trans-unit id="3fc161c96f68d64ff5f6c35bd957154b32f15db9" translate="yes" xml:space="preserve">
          <source>Destructuring Enums</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff6979f0fcf4244d8c4a549d5b9d8a3f19572d3e" translate="yes" xml:space="preserve">
          <source>Destructuring Nested Structs and Enums</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a918a44360d562e1d4a58ded98aaed8b5ca34b36" translate="yes" xml:space="preserve">
          <source>Destructuring Structs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82dfcd57e7c5d96d2c1020d1f98f601ff39c29cd" translate="yes" xml:space="preserve">
          <source>Destructuring Structs and Tuples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7006ec477edd8bb5ac786972439408168f0d6fed" translate="yes" xml:space="preserve">
          <source>Destructuring to Break Apart Values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aebb5e044bff7fc2cdc0594c96dacdf74243b1b" translate="yes" xml:space="preserve">
          <source>Destructuring with patterns is a convenient way to use pieces of values, such as the value from each field in a struct, separately from each other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05ec4bc63b7059a84cd6b8decdaea412c902b4e3" translate="yes" xml:space="preserve">
          <source>Determines if the &lt;code&gt;#&lt;/code&gt; flag was specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eb50813cfd3875314bb7c4291fc0c8f05912409" translate="yes" xml:space="preserve">
          <source>Determines if the &lt;code&gt;+&lt;/code&gt; flag was specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a023b29c16c4ace3f7cc984d3d3d2744cfa5f44d" translate="yes" xml:space="preserve">
          <source>Determines if the &lt;code&gt;-&lt;/code&gt; flag was specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e708c0e02132dd3e30dffd9d7d6a0e4594aaf63" translate="yes" xml:space="preserve">
          <source>Determines if the &lt;code&gt;0&lt;/code&gt; flag was specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f748db6dd51a50de638c681d6737cf1ab4663b89" translate="yes" xml:space="preserve">
          <source>Determines if the elements of this &lt;code&gt;Iterator&lt;/code&gt; are equal to those of another.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37c928a826db9874420166f59eb9cb25b15a0877" translate="yes" xml:space="preserve">
          <source>Determines if the elements of this &lt;code&gt;Iterator&lt;/code&gt; are equal to those of another. &lt;a href=&quot;../../../iter/trait.iterator#method.eq&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59e8628973caa9af246683f21db81497c19363ef" translate="yes" xml:space="preserve">
          <source>Determines if the elements of this &lt;code&gt;Iterator&lt;/code&gt; are equal to those of another. &lt;a href=&quot;../../iter/trait.iterator#method.eq&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64a44acb1b5c4458bbc03de2d361ccf714b73f94" translate="yes" xml:space="preserve">
          <source>Determines if the elements of this &lt;code&gt;Iterator&lt;/code&gt; are equal to those of another. &lt;a href=&quot;../iter/trait.iterator#method.eq&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da1087cea286023fbab5b7fc7b6a1dade6c645df" translate="yes" xml:space="preserve">
          <source>Determines if the elements of this &lt;code&gt;Iterator&lt;/code&gt; are equal to those of another. &lt;a href=&quot;iter/trait.iterator#method.eq&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49ae8851d4cebfd41251a6ef2adde4f866dfa9cf" translate="yes" xml:space="preserve">
          <source>Determines if the elements of this &lt;code&gt;Iterator&lt;/code&gt; are equal to those of another. &lt;a href=&quot;trait.iterator#method.eq&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5234483e1d020993e6f7e2842281d2752425e29b" translate="yes" xml:space="preserve">
          <source>Determines if the elements of this &lt;code&gt;Iterator&lt;/code&gt; are lexicographically greater than or equal to those of another.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35aca19a17e1803ffc980aedecdd425ef4fdcad0" translate="yes" xml:space="preserve">
          <source>Determines if the elements of this &lt;code&gt;Iterator&lt;/code&gt; are lexicographically greater than or equal to those of another. &lt;a href=&quot;../../../iter/trait.iterator#method.ge&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="466ca5cab0dfa7131ac5bc16789fe29e1f083e7a" translate="yes" xml:space="preserve">
          <source>Determines if the elements of this &lt;code&gt;Iterator&lt;/code&gt; are lexicographically greater than or equal to those of another. &lt;a href=&quot;../../iter/trait.iterator#method.ge&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0eb6ccf3a43e5e2c25c033d3e8cbb7d3c1d0c38" translate="yes" xml:space="preserve">
          <source>Determines if the elements of this &lt;code&gt;Iterator&lt;/code&gt; are lexicographically greater than or equal to those of another. &lt;a href=&quot;../iter/trait.iterator#method.ge&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77418654109cf460c01304d8d0e3317e8a7cf85c" translate="yes" xml:space="preserve">
          <source>Determines if the elements of this &lt;code&gt;Iterator&lt;/code&gt; are lexicographically greater than or equal to those of another. &lt;a href=&quot;iter/trait.iterator#method.ge&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0ba74b3328163cb4d6aa50d69aa1ec846ed24f7" translate="yes" xml:space="preserve">
          <source>Determines if the elements of this &lt;code&gt;Iterator&lt;/code&gt; are lexicographically greater than or equal to those of another. &lt;a href=&quot;trait.iterator#method.ge&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c67b6c8d134268c58177b9d114e373a09cdcbaeb" translate="yes" xml:space="preserve">
          <source>Determines if the elements of this &lt;code&gt;Iterator&lt;/code&gt; are lexicographically greater than those of another.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c80ab1a6b9eb03ec551742cd1aef4d26c115bfd2" translate="yes" xml:space="preserve">
          <source>Determines if the elements of this &lt;code&gt;Iterator&lt;/code&gt; are lexicographically greater than those of another. &lt;a href=&quot;../../../iter/trait.iterator#method.gt&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa597962499db45631b517bfe92b8cfc1475aace" translate="yes" xml:space="preserve">
          <source>Determines if the elements of this &lt;code&gt;Iterator&lt;/code&gt; are lexicographically greater than those of another. &lt;a href=&quot;../../iter/trait.iterator#method.gt&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="729874ae885b14e5a9ee978c4eba1d7e0ce724b3" translate="yes" xml:space="preserve">
          <source>Determines if the elements of this &lt;code&gt;Iterator&lt;/code&gt; are lexicographically greater than those of another. &lt;a href=&quot;../iter/trait.iterator#method.gt&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3677340a270d9c5bbd9571dc300993afc3402d25" translate="yes" xml:space="preserve">
          <source>Determines if the elements of this &lt;code&gt;Iterator&lt;/code&gt; are lexicographically greater than those of another. &lt;a href=&quot;iter/trait.iterator#method.gt&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e35323149416bd1aac5f12cf45003423dbf59962" translate="yes" xml:space="preserve">
          <source>Determines if the elements of this &lt;code&gt;Iterator&lt;/code&gt; are lexicographically greater than those of another. &lt;a href=&quot;trait.iterator#method.gt&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d9290ca87e6f313517b2fcf022e5af3a1768656" translate="yes" xml:space="preserve">
          <source>Determines if the elements of this &lt;code&gt;Iterator&lt;/code&gt; are lexicographically less or equal to those of another.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bb328b320a2c6df2ce9580b4d9f39fa8a0867fc" translate="yes" xml:space="preserve">
          <source>Determines if the elements of this &lt;code&gt;Iterator&lt;/code&gt; are lexicographically less or equal to those of another. &lt;a href=&quot;../../../iter/trait.iterator#method.le&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95e5ef35bdfb7332f38b2044404cc8767f62f510" translate="yes" xml:space="preserve">
          <source>Determines if the elements of this &lt;code&gt;Iterator&lt;/code&gt; are lexicographically less or equal to those of another. &lt;a href=&quot;../../iter/trait.iterator#method.le&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc7f33f9767c6a6fdcbd8a22f76c3ff246952ada" translate="yes" xml:space="preserve">
          <source>Determines if the elements of this &lt;code&gt;Iterator&lt;/code&gt; are lexicographically less or equal to those of another. &lt;a href=&quot;../iter/trait.iterator#method.le&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eec263b0c37881017d2d2cd2cb5ea76db836bb61" translate="yes" xml:space="preserve">
          <source>Determines if the elements of this &lt;code&gt;Iterator&lt;/code&gt; are lexicographically less or equal to those of another. &lt;a href=&quot;iter/trait.iterator#method.le&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5729ce4b5a2cb9f380067a42b0e54e84437c164a" translate="yes" xml:space="preserve">
          <source>Determines if the elements of this &lt;code&gt;Iterator&lt;/code&gt; are lexicographically less or equal to those of another. &lt;a href=&quot;trait.iterator#method.le&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59a55559a614eef2e3078715cd78ea2cf54a34d6" translate="yes" xml:space="preserve">
          <source>Determines if the elements of this &lt;code&gt;Iterator&lt;/code&gt; are lexicographically less than those of another.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d712040e0954ed11cc874db810062801d7e2658" translate="yes" xml:space="preserve">
          <source>Determines if the elements of this &lt;code&gt;Iterator&lt;/code&gt; are lexicographically less than those of another. &lt;a href=&quot;../../../iter/trait.iterator#method.lt&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d942146cd6cf27d47beb5d2d90b5c8ab6642356" translate="yes" xml:space="preserve">
          <source>Determines if the elements of this &lt;code&gt;Iterator&lt;/code&gt; are lexicographically less than those of another. &lt;a href=&quot;../../iter/trait.iterator#method.lt&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cfa7124286bbb49935132d6cd58c8dbcaaa2687" translate="yes" xml:space="preserve">
          <source>Determines if the elements of this &lt;code&gt;Iterator&lt;/code&gt; are lexicographically less than those of another. &lt;a href=&quot;../iter/trait.iterator#method.lt&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a38974034abde30288b0ae7a98a31222f3e3e13" translate="yes" xml:space="preserve">
          <source>Determines if the elements of this &lt;code&gt;Iterator&lt;/code&gt; are lexicographically less than those of another. &lt;a href=&quot;iter/trait.iterator#method.lt&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97bb65a8ad448386ce0c02ea17808c259032cd0a" translate="yes" xml:space="preserve">
          <source>Determines if the elements of this &lt;code&gt;Iterator&lt;/code&gt; are lexicographically less than those of another. &lt;a href=&quot;trait.iterator#method.lt&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f0dadd988dd396098041e281214a7fd09942d40" translate="yes" xml:space="preserve">
          <source>Determines if the elements of this &lt;code&gt;Iterator&lt;/code&gt; are unequal to those of another.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36b1e17997032f34f662b2bd8bd2628af7cae5bc" translate="yes" xml:space="preserve">
          <source>Determines if the elements of this &lt;code&gt;Iterator&lt;/code&gt; are unequal to those of another. &lt;a href=&quot;../../../iter/trait.iterator#method.ne&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="addf844d15f0fb6e9810ac8abfffba3ed8f91a43" translate="yes" xml:space="preserve">
          <source>Determines if the elements of this &lt;code&gt;Iterator&lt;/code&gt; are unequal to those of another. &lt;a href=&quot;../../iter/trait.iterator#method.ne&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79dc5f6a69b99432d80c0e4d92fdc91e745033aa" translate="yes" xml:space="preserve">
          <source>Determines if the elements of this &lt;code&gt;Iterator&lt;/code&gt; are unequal to those of another. &lt;a href=&quot;../iter/trait.iterator#method.ne&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55ea37cbe214c20323fb23b820eeefa3397ede85" translate="yes" xml:space="preserve">
          <source>Determines if the elements of this &lt;code&gt;Iterator&lt;/code&gt; are unequal to those of another. &lt;a href=&quot;iter/trait.iterator#method.ne&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10c8b0e47207a58ab392d1cdeeb6c724ea8dcaa5" translate="yes" xml:space="preserve">
          <source>Determines if the elements of this &lt;code&gt;Iterator&lt;/code&gt; are unequal to those of another. &lt;a href=&quot;trait.iterator#method.ne&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ed89c0cdcf12ce64b7fdfd12ce9f673a6325eab" translate="yes" xml:space="preserve">
          <source>Determines if the prefix is verbatim, i.e., begins with &lt;code&gt;\?\&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbeab0dc6a1abb8c8f8bc8511fe95947ad792517" translate="yes" xml:space="preserve">
          <source>Determines if this &lt;code&gt;Read&lt;/code&gt;er can work with buffers of uninitialized memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be37450fbf16fa6c0f9b8ae32f325ecb9c00c20e" translate="yes" xml:space="preserve">
          <source>Determines if this &lt;code&gt;Read&lt;/code&gt;er can work with buffers of uninitialized memory. &lt;a href=&quot;../../../io/trait.read#method.initializer&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1967a5ffdc5b84de696755c585c2b384f14985c" translate="yes" xml:space="preserve">
          <source>Determines if this &lt;code&gt;Read&lt;/code&gt;er can work with buffers of uninitialized memory. &lt;a href=&quot;../io/trait.read#method.initializer&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5843019517dcea2e39bc3fd9c5db60c959dbc3fd" translate="yes" xml:space="preserve">
          <source>Determines if this &lt;code&gt;Read&lt;/code&gt;er can work with buffers of uninitialized memory. &lt;a href=&quot;io/trait.read#method.initializer&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34821a8e59c742d6e0a1a2918573ca7a041c6fe6" translate="yes" xml:space="preserve">
          <source>Determines if this &lt;code&gt;Read&lt;/code&gt;er can work with buffers of uninitialized memory. &lt;a href=&quot;trait.read#method.initializer&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bc3a6f5c850f0438e1d7486ab1e8a7b83017e1c" translate="yes" xml:space="preserve">
          <source>Determines whether &lt;code&gt;base&lt;/code&gt; is a prefix of &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ca2779e94a3579286ed0ae6887ab70b08f212a7" translate="yes" xml:space="preserve">
          <source>Determines whether &lt;code&gt;child&lt;/code&gt; is a suffix of &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="231b3f6195b931ea21d68215955fc147bf6f1c62" translate="yes" xml:space="preserve">
          <source>Determines whether the character is one of the permitted path separators for the current platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aa708b69525e0ac94dfd1146260e4bcf8a1c293" translate="yes" xml:space="preserve">
          <source>Determines whether the current thread is unwinding because of panic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="242c52c158b2330d949a9b7ad2cd63c29bcb11ba" translate="yes" xml:space="preserve">
          <source>Determines whether the lock is poisoned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b422a8d3b9137b04a0eeb7da9750e0fe55c30faf" translate="yes" xml:space="preserve">
          <source>Determines whether the mutex is poisoned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c387555e5d91dd85ef517a5660d7871d47fd0bbf" translate="yes" xml:space="preserve">
          <source>Developing the Library&amp;rsquo;s Functionality with Test-Driven Development</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04b2b6bcf9400193de823e782bca52df6ff06ce5" translate="yes" xml:space="preserve">
          <source>Device namespace prefix, e.g., &lt;code&gt;\.\COM42&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="901d928cc4303124089536622e5422b452abf441" translate="yes" xml:space="preserve">
          <source>Device namespace prefixes consist of &lt;code&gt;\.\&lt;/code&gt; immediately followed by the device name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64eb2943bb25183ce22c162c6a65a9580511eec8" translate="yes" xml:space="preserve">
          <source>Diagnostic attributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3af2279f9e306acd0a4644e2b0f2f48a1e06d8d9" translate="yes" xml:space="preserve">
          <source>Diagnostics</source>
          <target state="translated">Diagnostics</target>
        </trans-unit>
        <trans-unit id="b16f1f66543d3256c7320f66ff9ae94cbd849539" translate="yes" xml:space="preserve">
          <source>Difference</source>
          <target state="translated">Difference</target>
        </trans-unit>
        <trans-unit id="3f932e70a581f33377cbc1e1904634b094962d9e" translate="yes" xml:space="preserve">
          <source>Differences Between Variables and Constants</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc31531269037208a90741eeb5b4ecafd001ad73" translate="yes" xml:space="preserve">
          <source>Differences in the language by which edition the crate is compiled under are in a blockquote that start with the words &quot;Edition Differences:&quot; in &lt;strong&gt;bold&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55fc54f3dbda4e62a20a1c823e812ad1b147e17b" translate="yes" xml:space="preserve">
          <source>Different from references and smart pointers, raw pointers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92af91ead761e3d69ab39a6b275fe38a419b9f85" translate="yes" xml:space="preserve">
          <source>Differs from &lt;a href=&quot;../marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt; in that &lt;a href=&quot;../marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt; is implicit and extremely inexpensive, while &lt;code&gt;Clone&lt;/code&gt; is always explicit and may or may not be expensive. In order to enforce these characteristics, Rust does not allow you to reimplement &lt;a href=&quot;../marker/trait.copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;, but you may reimplement &lt;code&gt;Clone&lt;/code&gt; and run arbitrary code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fc3cf46a7831ae3e0b98fb53801483f67cc9446" translate="yes" xml:space="preserve">
          <source>DirBuilder</source>
          <target state="translated">DirBuilder</target>
        </trans-unit>
        <trans-unit id="7181a810973e2e16ce0a83632e8d73bf35441422" translate="yes" xml:space="preserve">
          <source>DirBuilder::borrow</source>
          <target state="translated">DirBuilder::borrow</target>
        </trans-unit>
        <trans-unit id="c218ae069ae517f11e6cea64d6e78da4c1e5ae17" translate="yes" xml:space="preserve">
          <source>DirBuilder::borrow_mut</source>
          <target state="translated">DirBuilder::borrow_mut</target>
        </trans-unit>
        <trans-unit id="e2341df3df84c63eba0b26b9cec31b6e585e9847" translate="yes" xml:space="preserve">
          <source>DirBuilder::create</source>
          <target state="translated">DirBuilder::create</target>
        </trans-unit>
        <trans-unit id="558c94cd2a9efd98387a886acdad98714a98272c" translate="yes" xml:space="preserve">
          <source>DirBuilder::fmt</source>
          <target state="translated">DirBuilder::fmt</target>
        </trans-unit>
        <trans-unit id="578d865fa7fe0702042709101e2cd5b0ef2d7abe" translate="yes" xml:space="preserve">
          <source>DirBuilder::from</source>
          <target state="translated">DirBuilder::from</target>
        </trans-unit>
        <trans-unit id="d0cc96f134581e5d2dbb31657a827ca6a966d5a2" translate="yes" xml:space="preserve">
          <source>DirBuilder::into</source>
          <target state="translated">DirBuilder::into</target>
        </trans-unit>
        <trans-unit id="a0ca405c42267d62c5366eaf4544ce79b684fafb" translate="yes" xml:space="preserve">
          <source>DirBuilder::mode</source>
          <target state="translated">DirBuilder::mode</target>
        </trans-unit>
        <trans-unit id="f1e90e457510d6d25f30c357a2aa05168a9e7c4e" translate="yes" xml:space="preserve">
          <source>DirBuilder::new</source>
          <target state="translated">DirBuilder::new</target>
        </trans-unit>
        <trans-unit id="ad08c85f41a91a644c931b5cb64165b4db5ea721" translate="yes" xml:space="preserve">
          <source>DirBuilder::recursive</source>
          <target state="translated">DirBuilder::recursive</target>
        </trans-unit>
        <trans-unit id="d9220a09d19066d97d0c03aead9119abd3e9c683" translate="yes" xml:space="preserve">
          <source>DirBuilder::try_from</source>
          <target state="translated">DirBuilder::try_from</target>
        </trans-unit>
        <trans-unit id="452a71432eaf730cd102450f40e2a6e8d653c254" translate="yes" xml:space="preserve">
          <source>DirBuilder::try_into</source>
          <target state="translated">DirBuilder::try_into</target>
        </trans-unit>
        <trans-unit id="f910373efb14e0f9a94a8d5209490b78caa737cc" translate="yes" xml:space="preserve">
          <source>DirBuilder::type_id</source>
          <target state="translated">DirBuilder::type_id</target>
        </trans-unit>
        <trans-unit id="399abad33a38a2821c3a611702f2ba08551c87d2" translate="yes" xml:space="preserve">
          <source>DirBuilderExt</source>
          <target state="translated">DirBuilderExt</target>
        </trans-unit>
        <trans-unit id="5d7044d44a284dd969d434548478520077215750" translate="yes" xml:space="preserve">
          <source>DirEntry</source>
          <target state="translated">DirEntry</target>
        </trans-unit>
        <trans-unit id="cd5b21c9a0365159113ae9df2d400aec59bfcaca" translate="yes" xml:space="preserve">
          <source>DirEntry::borrow</source>
          <target state="translated">DirEntry::borrow</target>
        </trans-unit>
        <trans-unit id="951ab2cf3a03512bf09c21ddeb41a24d5e510a41" translate="yes" xml:space="preserve">
          <source>DirEntry::borrow_mut</source>
          <target state="translated">DirEntry::borrow_mut</target>
        </trans-unit>
        <trans-unit id="8c47a856d713d7686d136f7b7361b26482eb044c" translate="yes" xml:space="preserve">
          <source>DirEntry::file_name</source>
          <target state="translated">DirEntry::file_name</target>
        </trans-unit>
        <trans-unit id="4ce77f74a0969f33180d5c2e46e2266fc58c4a20" translate="yes" xml:space="preserve">
          <source>DirEntry::file_type</source>
          <target state="translated">DirEntry::file_type</target>
        </trans-unit>
        <trans-unit id="a5f6cd54a554952f30bf28cdb27b046d13085a12" translate="yes" xml:space="preserve">
          <source>DirEntry::fmt</source>
          <target state="translated">DirEntry::fmt</target>
        </trans-unit>
        <trans-unit id="b9a5c1a10d7c1c14586735486a1bfce1d98eebb3" translate="yes" xml:space="preserve">
          <source>DirEntry::from</source>
          <target state="translated">DirEntry::from</target>
        </trans-unit>
        <trans-unit id="8ccaee14c56f20592bdcd1134c5bae350b7bd14e" translate="yes" xml:space="preserve">
          <source>DirEntry::ino</source>
          <target state="translated">DirEntry::ino</target>
        </trans-unit>
        <trans-unit id="98ab2abad8c46aff7e3891fb97ffdc6865a529dc" translate="yes" xml:space="preserve">
          <source>DirEntry::into</source>
          <target state="translated">DirEntry::into</target>
        </trans-unit>
        <trans-unit id="10159719b49f84fa7191b424f588ccc32ef5618c" translate="yes" xml:space="preserve">
          <source>DirEntry::metadata</source>
          <target state="translated">DirEntry::metadata</target>
        </trans-unit>
        <trans-unit id="30a20e761f31ac5efd66bb1bd94102e72c193b46" translate="yes" xml:space="preserve">
          <source>DirEntry::path</source>
          <target state="translated">DirEntry::path</target>
        </trans-unit>
        <trans-unit id="1e2f7b0ae76e8c33493391638cb795fd57a40a24" translate="yes" xml:space="preserve">
          <source>DirEntry::try_from</source>
          <target state="translated">DirEntry::try_from</target>
        </trans-unit>
        <trans-unit id="cd51e1371114fc7c5b1a902a3e7f891af68e90bc" translate="yes" xml:space="preserve">
          <source>DirEntry::try_into</source>
          <target state="translated">DirEntry::try_into</target>
        </trans-unit>
        <trans-unit id="9b07691e3b3c0e1b7996a296acf8eb45fb66f6c2" translate="yes" xml:space="preserve">
          <source>DirEntry::type_id</source>
          <target state="translated">DirEntry::type_id</target>
        </trans-unit>
        <trans-unit id="a9fd4709dfefdef69474663794385ba27835eddb" translate="yes" xml:space="preserve">
          <source>DirEntryExt</source>
          <target state="translated">DirEntryExt</target>
        </trans-unit>
        <trans-unit id="92fe12e173fa3dfdbea9a6d8fd45ae6a0e65e6c9" translate="yes" xml:space="preserve">
          <source>Directionality:</source>
          <target state="translated">Directionality:</target>
        </trans-unit>
        <trans-unit id="f4633e6a090de85cd6224df63681c99f5548979a" translate="yes" xml:space="preserve">
          <source>Directly wraps a string slice as a &lt;code&gt;Path&lt;/code&gt; slice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9d47e26b581efd033d77609d97bdd920df31b08" translate="yes" xml:space="preserve">
          <source>Disambiguating Function Calls</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dde552fa73f09aeb1ef1953a94cb4af7af01d64" translate="yes" xml:space="preserve">
          <source>Disambiguating a method call by naming the trait and type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fdd298762579aa815bd2e81f1d5b0d7bd9b7e37" translate="yes" xml:space="preserve">
          <source>Disambiguating a method call by naming the trait that defines it</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c0c467c4a517443326de8481cd68a162036d6a8" translate="yes" xml:space="preserve">
          <source>Disambiguating a method call by naming the type for which it&amp;rsquo;s defined</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="969158832d397f515e9b774d83dec6df7a93b8e6" translate="yes" xml:space="preserve">
          <source>Discards as much additional capacity as possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d847ff1f81a6de06370444e0d9c585fe7890c2dc" translate="yes" xml:space="preserve">
          <source>Discards capacity with a lower bound.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b38da7b708f16cd8e3ea6bb1aa04c77c00f74faf" translate="yes" xml:space="preserve">
          <source>Disconnection</source>
          <target state="translated">Disconnection</target>
        </trans-unit>
        <trans-unit id="e0c53956cb3c2602bfb9c319be5e50770e4b99bb" translate="yes" xml:space="preserve">
          <source>Discriminant</source>
          <target state="translated">Discriminant</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
