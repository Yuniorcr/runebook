<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="rust">
    <body>
      <group id="rust">
        <trans-unit id="2170c54e7e7e211e3d0e2c65e377ae8bcaea7ac1" translate="yes" xml:space="preserve">
          <source>This method will ensure that any current waiters on the condition variable are awoken. Calls to &lt;code&gt;notify_all()&lt;/code&gt; are not buffered in any way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="149968b75a735130b9e849f252f39d4aeeb3370e" translate="yes" xml:space="preserve">
          <source>This method will evaluate the iterator until it returns &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;. While doing so, it keeps track of the current element. After &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; is returned, &lt;code&gt;last()&lt;/code&gt; will then return the last element it saw.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60132e29639954faf0b02a7c1a61ca490fca81f1" translate="yes" xml:space="preserve">
          <source>This method will evaluate the iterator until its &lt;a href=&quot;#tymethod.next&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt; returns &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;. Once &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; is encountered, &lt;code&gt;count()&lt;/code&gt; returns the number of times it called &lt;a href=&quot;#tymethod.next&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="430231e1c82b4b198abc958a7fd105f7b17a6eb0" translate="yes" xml:space="preserve">
          <source>This method will fail if the socket is not connected. The &lt;code&gt;connect&lt;/code&gt; method will connect this socket to a remote address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99d3a71bbe68b832fc3370a5188434c797f36ae5" translate="yes" xml:space="preserve">
          <source>This method will never block the caller in order to wait for data to become available. Instead, this will always return immediately with a possible option of pending data on the channel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbdaac7e9262e1ca34c4fe476a690d8dd791b78c" translate="yes" xml:space="preserve">
          <source>This method will never block the current thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46d2c9fdd8f22af9ddb09186941e568038365eb2" translate="yes" xml:space="preserve">
          <source>This method will panic if result is not finite, negative or overflows &lt;code&gt;Duration&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="361fc3f209ee1e7f236b4d7adeffb54823eee70f" translate="yes" xml:space="preserve">
          <source>This method will take care to not copy the vector, for efficiency's sake.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15bda4a4da4275b96ba5bd1843478dd37908d7e9" translate="yes" xml:space="preserve">
          <source>This module also provides an implementation of thread-local storage for Rust programs. Thread-local storage is a method of storing data into a global variable that each thread in the program will have its own copy of. Threads do not share this data, so accesses do not need to be synchronized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a618e47bcd778e6fbdbebc05ca474e36092d34bf" translate="yes" xml:space="preserve">
          <source>This module contains basic methods to manipulate the contents of the local filesystem. All methods in this module represent cross-platform filesystem operations. Extra platform-specific functionality can be found in the extension traits of &lt;code&gt;std::os::$platform&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="facf45454888eb2d77ede3ccdd2076d5cf487a0e" translate="yes" xml:space="preserve">
          <source>This module contains functions for querying the size and alignment of types, initializing and manipulating memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2408b577206af618721c013114d9c06e429f800a" translate="yes" xml:space="preserve">
          <source>This module contains functions to inspect various aspects such as environment variables, process arguments, the current directory, and various other important directories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="493f5d09dd437f62e48924cee92d925e5c7d2ef1" translate="yes" xml:space="preserve">
          <source>This module contains the &lt;a href=&quot;struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; type, a trait for converting &lt;a href=&quot;trait.tostring&quot;&gt;&lt;code&gt;ToString&lt;/code&gt;&lt;/a&gt;s, and several error types that may result from working with &lt;a href=&quot;struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a15bad5d969fcb97693f6f0bc38018fba7343164" translate="yes" xml:space="preserve">
          <source>This module contains the runtime support for the &lt;a href=&quot;../macro.format&quot;&gt;&lt;code&gt;format!&lt;/code&gt;&lt;/a&gt; syntax extension. This macro is implemented in the compiler to emit calls to this module in order to format arguments at runtime into strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe75678b9da36500f1155d5a63660783d7b96c49" translate="yes" xml:space="preserve">
          <source>This module contains various tools for ordering and comparing values. In summary:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5526cfdf674b75dda2276399dbf95bab9061f815" translate="yes" xml:space="preserve">
          <source>This module defines atomic versions of a select number of primitive types, including &lt;a href=&quot;struct.atomicbool&quot;&gt;&lt;code&gt;AtomicBool&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;struct.atomicisize&quot;&gt;&lt;code&gt;AtomicIsize&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;struct.atomicusize&quot;&gt;&lt;code&gt;AtomicUsize&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;struct.atomici8&quot;&gt;&lt;code&gt;AtomicI8&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;struct.atomicu16&quot;&gt;&lt;code&gt;AtomicU16&lt;/code&gt;&lt;/a&gt;, etc. Atomic types present operations that, when used correctly, synchronize updates between threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69b6d67047755d0189ccf8e0dd69886ba1af9f48" translate="yes" xml:space="preserve">
          <source>This module exists for technical reasons, the primary documentation for &lt;code&gt;char&lt;/code&gt; is directly on &lt;a href=&quot;../primitive.char&quot;&gt;the &lt;code&gt;char&lt;/code&gt; primitive type&lt;/a&gt; itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c05c40f88eef085aa06e135cdea7a637a633c60" translate="yes" xml:space="preserve">
          <source>This module implements the &lt;code&gt;Any&lt;/code&gt; trait, which enables dynamic typing of any &lt;code&gt;'static&lt;/code&gt; type through runtime reflection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2779c978566f8d66cd98dfb5457c45d53a57fb6" translate="yes" xml:space="preserve">
          <source>This module is largely organized by type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5be07f93f33ed08d424575dcac18854b8631d380" translate="yes" xml:space="preserve">
          <source>This module is mostly concerned with spawning and interacting with child processes, but it also provides &lt;a href=&quot;fn.abort&quot;&gt;&lt;code&gt;abort&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;fn.exit&quot;&gt;&lt;code&gt;exit&lt;/code&gt;&lt;/a&gt; for terminating the current process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="288daae4ba933c2cf1c52332e7aec01da8baaf15" translate="yes" xml:space="preserve">
          <source>This module is the home of the iterator implementations for the iterators implemented on &lt;code&gt;char&lt;/code&gt;, as well as some useful constants and conversion functions that convert various types to &lt;code&gt;char&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16223be8f664aa8af7792fdf4f8c15d5b579360d" translate="yes" xml:space="preserve">
          <source>This module only currently provides one bit of information, &lt;a href=&quot;struct.permissions#method.readonly&quot;&gt;&lt;code&gt;readonly&lt;/code&gt;&lt;/a&gt;, which is exposed on all currently supported platforms. Unix-specific functionality, such as mode bits, is available through the &lt;a href=&quot;../os/unix/fs/trait.permissionsext&quot;&gt;&lt;code&gt;PermissionsExt&lt;/code&gt;&lt;/a&gt; trait.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72abc30b878e9efe98c4c560589176b50cfcfb02" translate="yes" xml:space="preserve">
          <source>This module provides a generic way to compute the hash of a value. The simplest way to make a type hashable is to use &lt;code&gt;#[derive(Hash)]&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f6357e74fc7527ed8e55102f82ccb8843f20d51" translate="yes" xml:space="preserve">
          <source>This module provides constants which are specific to the implementation of the &lt;code&gt;f32&lt;/code&gt; floating point data type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87f0d2ad3a049e2ea757e82944e2e6b1d2f310c4" translate="yes" xml:space="preserve">
          <source>This module provides constants which are specific to the implementation of the &lt;code&gt;f64&lt;/code&gt; floating point data type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dd1d432064e6f3e28ac8c1d81caf06446f388ba" translate="yes" xml:space="preserve">
          <source>This module provides message-based communication over channels, concretely defined among three types:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfedf6f4f14d905a894526b273dfe17f7e7c03dc" translate="yes" xml:space="preserve">
          <source>This module provides networking functionality for the Transmission Control and User Datagram Protocols, as well as types for IP and socket addresses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcfa8dfe7aed9682173752b15b6103829ea655a1" translate="yes" xml:space="preserve">
          <source>This module provides some extra types that are useful when doing numerical work. See the individual documentation for each piece for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b42dc453d74574a22f838766ed6a6210b7719f9b" translate="yes" xml:space="preserve">
          <source>This module provides two types, &lt;a href=&quot;struct.pathbuf&quot;&gt;&lt;code&gt;PathBuf&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt; (akin to &lt;a href=&quot;../string/struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../primitive.str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;), for working with paths abstractly. These types are thin wrappers around &lt;a href=&quot;../ffi/struct.osstring&quot;&gt;&lt;code&gt;OsString&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ffi/struct.osstr&quot;&gt;&lt;code&gt;OsStr&lt;/code&gt;&lt;/a&gt; respectively, meaning that they work directly on strings according to the local platform's path syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2fe72f6bcf1faf654e10546253a992773369d18" translate="yes" xml:space="preserve">
          <source>This module provides utilities to handle data across non-Rust interfaces, like other programming languages and the underlying operating system. It is mainly of use for FFI (Foreign Function Interface) bindings and code that needs to exchange C-like strings with other languages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bfbd1c67f1485adce8aa9ca96b08fda6c8d21af" translate="yes" xml:space="preserve">
          <source>This mutex will block threads waiting for the lock to become available. The mutex can also be statically initialized or created via a &lt;a href=&quot;#method.new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; constructor. Each mutex has a type parameter which represents the data that it is protecting. The data can only be accessed through the RAII guards returned from &lt;a href=&quot;#method.lock&quot;&gt;&lt;code&gt;lock&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#method.try_lock&quot;&gt;&lt;code&gt;try_lock&lt;/code&gt;&lt;/a&gt;, which guarantees that the data is only ever accessed when the mutex is locked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56f3b065f3863bd74d78c00a2522270062418669" translate="yes" xml:space="preserve">
          <source>This never needs to re-allocate, but does need to do O(n) data movement if the circular buffer doesn't happen to be at the beginning of the allocation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d28b87d734ed0d5315fcb74f17b2994ec84a38d2" translate="yes" xml:space="preserve">
          <source>This new slice goes from &lt;code&gt;begin&lt;/code&gt; to &lt;code&gt;end&lt;/code&gt;, including &lt;code&gt;begin&lt;/code&gt; but excluding &lt;code&gt;end&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5e5d3eaf75778ffc4640687e8cefa2e10e75497" translate="yes" xml:space="preserve">
          <source>This next example calls a supertrait method on a generic parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f7ad17f03d80b97ecff41fe1815f8dca0918d1f" translate="yes" xml:space="preserve">
          <source>This next example gives &lt;code&gt;radius&lt;/code&gt; a default implementation using the &lt;code&gt;area&lt;/code&gt; function from &lt;code&gt;Shape&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50d4d7072a1ea5b824d1df9626f273fc9c52a75a" translate="yes" xml:space="preserve">
          <source>This number is a lower bound; the &lt;code&gt;HashMap&amp;lt;K, V&amp;gt;&lt;/code&gt; might be able to hold more, but is guaranteed to be able to hold at least this many.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75625b78a6cc53054a38dc48c604ece0622bfe30" translate="yes" xml:space="preserve">
          <source>This number is simply useful for passing to other methods, like &lt;a href=&quot;struct.osstring#method.with_capacity&quot;&gt;&lt;code&gt;OsString::with_capacity&lt;/code&gt;&lt;/a&gt; to avoid reallocations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f022d625542e31d83b61a7cfb496898fc698f8a" translate="yes" xml:space="preserve">
          <source>This only differs from the previous &lt;code&gt;impl&lt;/code&gt; in that the parameters &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;MyType&amp;lt;T&amp;gt;&lt;/code&gt; for &lt;code&gt;ForeignTrait2&lt;/code&gt; have been swapped. This example does &lt;em&gt;not&lt;/em&gt; violate the orphan rule; it is permitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="123296246acbbeb137b9c0c76f971008749a56bb" translate="yes" xml:space="preserve">
          <source>This operation does &lt;strong&gt;not&lt;/strong&gt; modify the filesystem. To modify the filesystem use the &lt;a href=&quot;fn.set_permissions&quot;&gt;&lt;code&gt;fs::set_permissions&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c0bbc4d892938033fbacd4684ea2a287c924f8c" translate="yes" xml:space="preserve">
          <source>This operation is &lt;code&gt;O(1)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fdec81639aa08f036b813714ac253cba45f17ed" translate="yes" xml:space="preserve">
          <source>This operation is sometimes called 'reduce' or 'inject'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2fd1d86e77ef341cc160d32009392653fd89ec1" translate="yes" xml:space="preserve">
          <source>This operation rounds towards zero, truncating any fractional part of the exact result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77029037758bda804fd792f27ba1f29cea457a7e" translate="yes" xml:space="preserve">
          <source>This operation satisfies &lt;code&gt;n % d == n - (n / d) * d&lt;/code&gt;. The result has the same sign as the left operand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48c9bdd59dbbaca42da37bc9d33eec68b2af8961" translate="yes" xml:space="preserve">
          <source>This operation should compute in O(1) time and O(1) memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc7c0f50f52c35ea7e364b7e26d103277ce95b38" translate="yes" xml:space="preserve">
          <source>This operation should compute in O(1) time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a13a41f53da524732e21aa1da4b3958def62f00f" translate="yes" xml:space="preserve">
          <source>This operation should compute in O(n) time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4da5d428cc5f4bb1f1eadb7b45f2669f2c6be87e" translate="yes" xml:space="preserve">
          <source>This operation was interrupted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5b25bf34db3082fbebf881dd2f3b63132ce24a9" translate="yes" xml:space="preserve">
          <source>This operation wraps around on overflow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="513292ffc7d15c4c6459299bf349f4e8ef41bcc6" translate="yes" xml:space="preserve">
          <source>This option defaults to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07732c105324f285891b421be7b1897cf45eb1a8" translate="yes" xml:space="preserve">
          <source>This option indicates whether a new file will be created if the file does not yet already exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ab719a36168121ae6911773d2659e3887ae7b87" translate="yes" xml:space="preserve">
          <source>This option indicates whether a new file will be created. No file is allowed to exist at the target location, also no (dangling) symlink.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1997355865e9c95bba24957f07adb48aa7900b34" translate="yes" xml:space="preserve">
          <source>This option is useful because it is atomic. Otherwise between checking whether a file exists and creating a new one, the file may have been created by another process (a TOCTOU race condition / attack).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d1d1f446736eda75bb94ad6c4911fc032b1110f" translate="yes" xml:space="preserve">
          <source>This option, when true, means that writes will append to a file instead of overwriting previous contents. Note that setting &lt;code&gt;.write(true).append(true)&lt;/code&gt; has the same effect as setting only &lt;code&gt;.append(true)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="279fd5d225ffc9cf4a6694f03d2272dc1973056a" translate="yes" xml:space="preserve">
          <source>This option, when true, will indicate that the file should be &lt;code&gt;read&lt;/code&gt;-able if opened.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aa691cde7b75893eb561d3865c9d79612f73f71" translate="yes" xml:space="preserve">
          <source>This option, when true, will indicate that the file should be &lt;code&gt;write&lt;/code&gt;-able if opened.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42af0ae9cc5372b7ccd519ad313f0abe9e0cfe15" translate="yes" xml:space="preserve">
          <source>This ordering is only applicable for operations that can perform a load.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20a3da5b9e12d0ccdf3e64c2e589466b4721fced" translate="yes" xml:space="preserve">
          <source>This ordering is only applicable for operations that can perform a store.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea76b31c997f4d8a61f17e8560093311b945344f" translate="yes" xml:space="preserve">
          <source>This ordering is only applicable for operations that combine both loads and stores.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a87804f30fcdf78425015d26ec12efca3e1a08c7" translate="yes" xml:space="preserve">
          <source>This output is better: we now have a reasonable error message. However, we also have extraneous information we don&amp;rsquo;t want to give to our users. Perhaps using the technique we used in Listing 9-10 isn&amp;rsquo;t the best to use here: a call to &lt;code&gt;panic!&lt;/code&gt; is more appropriate for a programming problem than a usage problem, &lt;a href=&quot;ch09-03-to-panic-or-not-to-panic#guidelines-for-error-handling&quot;&gt;as discussed in Chapter 9&lt;/a&gt;. Instead, we can use the other technique you learned about in Chapter 9&amp;mdash;&lt;a href=&quot;ch09-02-recoverable-errors-with-result&quot;&gt;returning a &lt;code&gt;Result&lt;/code&gt;&lt;/a&gt; that indicates either success or an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04051f730c7eeba40e7dd9250f9fd3ae55f310b9" translate="yes" xml:space="preserve">
          <source>This output isn&amp;rsquo;t what we wanted. We want to call the &lt;code&gt;baby_name&lt;/code&gt; function that is part of the &lt;code&gt;Animal&lt;/code&gt; trait that we implemented on &lt;code&gt;Dog&lt;/code&gt; so the code prints &lt;code&gt;A baby dog is called a puppy&lt;/code&gt;. The technique of specifying the trait name that we used in Listing 19-18 doesn&amp;rsquo;t help here; if we change &lt;code&gt;main&lt;/code&gt; to the code in Listing 19-20, we&amp;rsquo;ll get a compilation error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66b4788ea5425d4692dd1ffafd058fec8508d60c" translate="yes" xml:space="preserve">
          <source>This output shows &lt;code&gt;cargo test&lt;/code&gt; only ran the tests for the &lt;code&gt;add-one&lt;/code&gt; crate and didn&amp;rsquo;t run the &lt;code&gt;adder&lt;/code&gt; crate tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f91d4073e1806ac4e46d9be9407b7439ade530c5" translate="yes" xml:space="preserve">
          <source>This outputs:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="220a338b4d08066eba2a22fb127e73c40665ebcb" translate="yes" xml:space="preserve">
          <source>This overwrites pinned data, but that is okay: its destructor gets run before being overwritten, so no pinning guarantee is violated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05caefb888af241727a56b286e8ae483a7d9633f" translate="yes" xml:space="preserve">
          <source>This page documents the formal specification of the follow rules for &lt;a href=&quot;macros-by-example&quot;&gt;Macros By Example&lt;/a&gt;. They were originally specified in &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/0550-macro-future-proofing.html&quot;&gt;RFC 550&lt;/a&gt;, from which the bulk of this text is copied, and expanded upon in subsequent RFCs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f87b1d9607de86149c082e3d8de19453e0048df2" translate="yes" xml:space="preserve">
          <source>This pattern has a profound impact on the way Rust code is written. It may seem simple right now, but the behavior of code can be unexpected in more complicated situations when we want to have multiple variables use the data we&amp;rsquo;ve allocated on the heap. Let&amp;rsquo;s explore some of those situations now.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebae1cd81adce77daea1f3e37e663633c554fab5" translate="yes" xml:space="preserve">
          <source>This pattern is about separating concerns: &lt;em&gt;main.rs&lt;/em&gt; handles running the program, and &lt;em&gt;lib.rs&lt;/em&gt; handles all the logic of the task at hand. Because you can&amp;rsquo;t test the &lt;code&gt;main&lt;/code&gt; function directly, this structure lets you test all of your program&amp;rsquo;s logic by moving it into functions in &lt;em&gt;lib.rs&lt;/em&gt;. The only code that remains in &lt;em&gt;main.rs&lt;/em&gt; will be small enough to verify its correctness by reading it. Let&amp;rsquo;s rework our program by following this process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f7fef1aec609824d9a98cbd4986f806fb8112f5" translate="yes" xml:space="preserve">
          <source>This pattern is refutable when one of its subpatterns is refutable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e7824ffc5e192a74a0014b97fd199a69a9bbad1" translate="yes" xml:space="preserve">
          <source>This pattern of propagating errors is so common in Rust that Rust provides the question mark operator &lt;code&gt;?&lt;/code&gt; to make this easier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be8e420bedd2fafb3e2ace598d4c2a4fc61a219a" translate="yes" xml:space="preserve">
          <source>This performs complex unconditional mappings with no tailoring: it maps one Unicode character to its lowercase equivalent according to the &lt;a href=&quot;ftp://ftp.unicode.org/Public/UNIDATA/UnicodeData.txt&quot;&gt;Unicode database&lt;/a&gt; and the additional complex mappings &lt;a href=&quot;ftp://ftp.unicode.org/Public/UNIDATA/SpecialCasing.txt&quot;&gt;&lt;code&gt;SpecialCasing.txt&lt;/code&gt;&lt;/a&gt;. Conditional mappings (based on context or language) are not considered here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bedef26ecd391020afcece167562372d74e3b11" translate="yes" xml:space="preserve">
          <source>This performs complex unconditional mappings with no tailoring: it maps one Unicode character to its uppercase equivalent according to the &lt;a href=&quot;ftp://ftp.unicode.org/Public/UNIDATA/UnicodeData.txt&quot;&gt;Unicode database&lt;/a&gt; and the additional complex mappings &lt;a href=&quot;ftp://ftp.unicode.org/Public/UNIDATA/SpecialCasing.txt&quot;&gt;&lt;code&gt;SpecialCasing.txt&lt;/code&gt;&lt;/a&gt;. Conditional mappings (based on context or language) are not considered here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="367fd59cc7a5ce52d6910a709b90bfcbe81a7ab5" translate="yes" xml:space="preserve">
          <source>This piece of Rust history is relevant because it&amp;rsquo;s possible that more deterministic patterns will emerge and be added to the compiler. In the future, even fewer lifetime annotations might be required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce7cedc5fc51216f120f0eb8fae3379dc963620e" translate="yes" xml:space="preserve">
          <source>This prints output like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff9f7a5e1d4525cd7d8438461ac9c53da48b455e" translate="yes" xml:space="preserve">
          <source>This prints to &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams#Standard_error_(stderr)&quot;&gt;stderr&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c9f3b33a54ec1f8657331a04066cc462bed4e33" translate="yes" xml:space="preserve">
          <source>This problem can be solved by specifying from which trait we want to use the &lt;code&gt;Bar&lt;/code&gt; type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc4e53a566f64cd7b3bd5c8e48b6dab0075560d7" translate="yes" xml:space="preserve">
          <source>This process does not take into account the mutability or lifetime of the receiver, or whether a method is &lt;code&gt;unsafe&lt;/code&gt;. Once a method is looked up, if it can't be called for one (or more) of those reasons, the result is a compiler error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ff3edc7107794fccb9370413ce9f2edb3d33555" translate="yes" xml:space="preserve">
          <source>This process is just one of many ways to write software, but TDD can help drive code design as well. Writing the test before you write the code that makes the test pass helps to maintain high test coverage throughout the process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a5870cc6149419aa4b701948d1d720f8c2eb21c" translate="yes" xml:space="preserve">
          <source>This program compiles without any errors and would also do so if we used &lt;code&gt;word&lt;/code&gt; after calling &lt;code&gt;s.clear()&lt;/code&gt;. Because &lt;code&gt;word&lt;/code&gt; isn&amp;rsquo;t connected to the state of &lt;code&gt;s&lt;/code&gt; at all, &lt;code&gt;word&lt;/code&gt; still contains the value &lt;code&gt;5&lt;/code&gt;. We could use that value &lt;code&gt;5&lt;/code&gt; with the variable &lt;code&gt;s&lt;/code&gt; to try to extract the first word out, but this would be a bug because the contents of &lt;code&gt;s&lt;/code&gt; have changed since we saved &lt;code&gt;5&lt;/code&gt; in &lt;code&gt;word&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1a216c5bb2240db271ccf5242339067640e2983" translate="yes" xml:space="preserve">
          <source>This program creates a tuple, &lt;code&gt;x&lt;/code&gt;, and then makes new variables for each element by using their index. As with most programming languages, the first index in a tuple is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="052f0899e565e8d2644e743be0e56bf26e6e1767" translate="yes" xml:space="preserve">
          <source>This program first binds &lt;code&gt;x&lt;/code&gt; to a value of &lt;code&gt;5&lt;/code&gt;. Then it shadows &lt;code&gt;x&lt;/code&gt; by repeating &lt;code&gt;let x =&lt;/code&gt;, taking the original value and adding &lt;code&gt;1&lt;/code&gt; so the value of &lt;code&gt;x&lt;/code&gt; is then &lt;code&gt;6&lt;/code&gt;. The third &lt;code&gt;let&lt;/code&gt; statement also shadows &lt;code&gt;x&lt;/code&gt;, multiplying the previous value by &lt;code&gt;2&lt;/code&gt; to give &lt;code&gt;x&lt;/code&gt; a final value of &lt;code&gt;12&lt;/code&gt;. When we run this program, it will output the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e37eff19d0df592c13224ef2e32fd74387b55f9e" translate="yes" xml:space="preserve">
          <source>This program first creates a tuple and binds it to the variable &lt;code&gt;tup&lt;/code&gt;. It then uses a pattern with &lt;code&gt;let&lt;/code&gt; to take &lt;code&gt;tup&lt;/code&gt; and turn it into three separate variables, &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, and &lt;code&gt;z&lt;/code&gt;. This is called &lt;em&gt;destructuring&lt;/em&gt;, because it breaks the single tuple into three parts. Finally, the program prints the value of &lt;code&gt;y&lt;/code&gt;, which is &lt;code&gt;6.4&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e68e59981686f4d6d9628e4a0f06c39a18431f20" translate="yes" xml:space="preserve">
          <source>This program has four possible paths it can take. After running it, you should see the following output:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c268368ea9194ea4e99d8e793596c3443d5a9397" translate="yes" xml:space="preserve">
          <source>This project was a hands-on way to introduce you to many new Rust concepts: &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;match&lt;/code&gt;, methods, associated functions, the use of external crates, and more. In the next few chapters, you&amp;rsquo;ll learn about these concepts in more detail. Chapter 3 covers concepts that most programming languages have, such as variables, data types, and functions, and shows how to use them in Rust. Chapter 4 explores ownership, a feature that makes Rust different from other languages. Chapter 5 discusses structs and method syntax, and Chapter 6 explains how enums work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab41f4f49ac9b596f3ff341e670c3c513d2c2a1e" translate="yes" xml:space="preserve">
          <source>This property cannot be checked by the compiler, and therefore &lt;code&gt;Eq&lt;/code&gt; implies &lt;code&gt;PartialEq&lt;/code&gt;, and has no extra methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1608442363fd58986072b46f4e6a650827d3385c" translate="yes" xml:space="preserve">
          <source>This property is defined by &lt;a href=&quot;https://tools.ietf.org/html/rfc1122&quot;&gt;IETF RFC 1122&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25a4736ccf9a4ba3c3e3dac30177800bc1f743c9" translate="yes" xml:space="preserve">
          <source>This property is defined by &lt;a href=&quot;https://tools.ietf.org/html/rfc3927&quot;&gt;IETF RFC 3927&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cdf66b6082611e25a822825249d22e6f28f1917" translate="yes" xml:space="preserve">
          <source>This property is defined by &lt;a href=&quot;https://tools.ietf.org/html/rfc4291&quot;&gt;IETF RFC 4291&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93af0d07e68cafd035375823424d1e725ddb07d1" translate="yes" xml:space="preserve">
          <source>This property is defined in &lt;a href=&quot;https://tools.ietf.org/html/rfc3849&quot;&gt;IETF RFC 3849&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85df454e96ffa6c63ed8ab37d8086b690c9dba86" translate="yes" xml:space="preserve">
          <source>This property is defined in &lt;a href=&quot;https://tools.ietf.org/html/rfc4193&quot;&gt;IETF RFC 4193&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d5a4dec1164aed352e96ad9af690b1a3591dc76" translate="yes" xml:space="preserve">
          <source>This property is defined in &lt;a href=&quot;https://tools.ietf.org/html/rfc4291&quot;&gt;IETF RFC 4291&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c731a3c6e670f4842c76f756fa1e0f4c4f1cfae6" translate="yes" xml:space="preserve">
          <source>This property is defined in &lt;em&gt;UNIX Network Programming, Second Edition&lt;/em&gt;, W. Richard Stevens, p. 891; see also &lt;a href=&quot;http://man7.org/linux/man-pages/man7/ip.7.html&quot;&gt;ip7&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19926d7df32802514fef095810b287a92fa4b874" translate="yes" xml:space="preserve">
          <source>This queue has &lt;code&gt;O(1)&lt;/code&gt; amortized inserts and removals from both ends of the container. It also has &lt;code&gt;O(1)&lt;/code&gt; indexing like a vector. The contained elements are not required to be copyable, and the queue will be sendable if the contained type is sendable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae16a9ff1b9b0bb4dc2773f7faab160bd7347257" translate="yes" xml:space="preserve">
          <source>This reader has reached its &quot;end of file&quot; and will likely no longer be able to produce bytes. Note that this does not mean that the reader will &lt;em&gt;always&lt;/em&gt; no longer be able to produce bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eabbe1cac74b5970cf00777c8a04a9b08b503051" translate="yes" xml:space="preserve">
          <source>This reordering has the additional property that any value at position &lt;code&gt;i &amp;lt; index&lt;/code&gt; will be less than or equal to any value at a position &lt;code&gt;j &amp;gt; index&lt;/code&gt; using the comparator function. Additionally, this reordering is unstable (i.e. any number of equal elements may end up at position &lt;code&gt;index&lt;/code&gt;), in-place (i.e. does not allocate), and &lt;code&gt;O(n)&lt;/code&gt; worst-case. This function is also known as &quot;kth element&quot; in other libraries. It returns a triplet of the following values: all elements less than the one at the given index, the value at the given index, and all elements greater than the one at the given index, using the provided comparator function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58333e6fd2204efb6d059b5e0ebaa3ad2ae11cea" translate="yes" xml:space="preserve">
          <source>This reordering has the additional property that any value at position &lt;code&gt;i &amp;lt; index&lt;/code&gt; will be less than or equal to any value at a position &lt;code&gt;j &amp;gt; index&lt;/code&gt; using the key extraction function. Additionally, this reordering is unstable (i.e. any number of equal elements may end up at position &lt;code&gt;index&lt;/code&gt;), in-place (i.e. does not allocate), and &lt;code&gt;O(n)&lt;/code&gt; worst-case. This function is also known as &quot;kth element&quot; in other libraries. It returns a triplet of the following values: all elements less than the one at the given index, the value at the given index, and all elements greater than the one at the given index, using the provided key extraction function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18b0ecb2451beab6446b7792a5f32ac5b93e64f7" translate="yes" xml:space="preserve">
          <source>This reordering has the additional property that any value at position &lt;code&gt;i &amp;lt; index&lt;/code&gt; will be less than or equal to any value at a position &lt;code&gt;j &amp;gt; index&lt;/code&gt;. Additionally, this reordering is unstable (i.e. any number of equal elements may end up at position &lt;code&gt;index&lt;/code&gt;), in-place (i.e. does not allocate), and &lt;code&gt;O(n)&lt;/code&gt; worst-case. This function is also/ known as &quot;kth element&quot; in other libraries. It returns a triplet of the following values: all elements less than the one at the given index, the value at the given index, and all elements greater than the one at the given index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a44d46360998129b78ed15d687f727979c543e5" translate="yes" xml:space="preserve">
          <source>This representation can be applied to structs, unions, and enums.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54d003da75e5c18c6d78ec752d4c5ea2c1005e03" translate="yes" xml:space="preserve">
          <source>This requires that the data inside this &lt;code&gt;Pin&lt;/code&gt; is &lt;a href=&quot;../marker/trait.unpin&quot;&gt;&lt;code&gt;Unpin&lt;/code&gt;&lt;/a&gt; so that we can ignore the pinning invariants when unwrapping it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84a024e08861a138f89bc49f72665722f5345893" translate="yes" xml:space="preserve">
          <source>This requires that the data inside this &lt;code&gt;Pin&lt;/code&gt; is &lt;code&gt;Unpin&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb8049ba5b3a969809828fb6b20b4c6f803c243a" translate="yes" xml:space="preserve">
          <source>This restriction allows for mutation but in a very controlled fashion. It&amp;rsquo;s something that new Rustaceans struggle with, because most languages let you mutate whenever you&amp;rsquo;d like.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9005ee922bd85c1b8cdd5bf9e647bc71bc7e1d1" translate="yes" xml:space="preserve">
          <source>This restricts us to a &lt;code&gt;Screen&lt;/code&gt; instance that has a list of components all of type &lt;code&gt;Button&lt;/code&gt; or all of type &lt;code&gt;TextField&lt;/code&gt;. If you&amp;rsquo;ll only ever have homogeneous collections, using generics and trait bounds is preferable because the definitions will be monomorphized at compile time to use the concrete types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fef61557094c53c94d8f4b9c87d239c1c4ddf6a3" translate="yes" xml:space="preserve">
          <source>This result just indicates that the assertion failed and which line the assertion is on. A more useful failure message in this case would print the value we got from the &lt;code&gt;greeting&lt;/code&gt; function. Let&amp;rsquo;s change the test function, giving it a custom failure message made from a format string with a placeholder filled in with the actual value we got from the &lt;code&gt;greeting&lt;/code&gt; function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0886cd5bf439fbbc8be3535b3d5401de7c87877b" translate="yes" xml:space="preserve">
          <source>This return type means the call to &lt;code&gt;File::open&lt;/code&gt; might succeed and return a file handle that we can read from or write to. The function call also might fail: for example, the file might not exist, or we might not have permission to access the file. The &lt;code&gt;File::open&lt;/code&gt; function needs to have a way to tell us whether it succeeded or failed and at the same time give us either the file handle or error information. This information is exactly what the &lt;code&gt;Result&lt;/code&gt; enum conveys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="368beec57f1181b8799a91ee73ada8b4184da78e" translate="yes" xml:space="preserve">
          <source>This reuses all the nodes from &lt;code&gt;other&lt;/code&gt; and moves them into &lt;code&gt;self&lt;/code&gt;. After this operation, &lt;code&gt;other&lt;/code&gt; becomes empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7730271090bac7f074841851b1b821f9fc7fca43" translate="yes" xml:space="preserve">
          <source>This rework may seem like overkill for our small program, but we&amp;rsquo;re refactoring in small, incremental steps. After making this change, run the program again to verify that the argument parsing still works. It&amp;rsquo;s good to check your progress often, to help identify the cause of problems when they occur.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c68a9d1019f31cc86d07a97f90c903ea86167b11" translate="yes" xml:space="preserve">
          <source>This rule also applies to type parameters of impl blocks that contain const methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9e400474c407c09b7fb37164368bcd30fbe8830" translate="yes" xml:space="preserve">
          <source>This runs the code in &lt;em&gt;adder/src/main.rs&lt;/em&gt;, which depends on the &lt;code&gt;add-one&lt;/code&gt; crate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6b2224800e73c42ee25267c2896a776ab41e710" translate="yes" xml:space="preserve">
          <source>This section documents features that affect the ABI of the compiled output of a crate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dc2765b02ef149354a7a9ee16a696edf0827240" translate="yes" xml:space="preserve">
          <source>This section documents features that define some aspects of the Rust runtime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7c12226b9e0c0ca24fa6bdd6239b023bf8ef3a4" translate="yes" xml:space="preserve">
          <source>This should only ever be called with a pointer that was earlier obtained by calling &lt;a href=&quot;#method.into_raw&quot;&gt;&lt;code&gt;into_raw&lt;/code&gt;&lt;/a&gt; on a &lt;code&gt;CString&lt;/code&gt;. Other usage (e.g., trying to take ownership of a string that was allocated by foreign code) is likely to lead to undefined behavior or allocator corruption.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6de4781e84fd1ffb8326c915806ff4604cbf7406" translate="yes" xml:space="preserve">
          <source>This shows the source code file with the &lt;em&gt;.rs&lt;/em&gt; extension, the executable file (&lt;em&gt;main.exe&lt;/em&gt; on Windows, but &lt;em&gt;main&lt;/em&gt; on all other platforms), and, when using Windows, a file containing debugging information with the &lt;em&gt;.pdb&lt;/em&gt; extension. From here, you run the &lt;em&gt;main&lt;/em&gt; or &lt;em&gt;main.exe&lt;/em&gt; file, like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9575f8046ce99c60fbe347fdb162c3debc44c697" translate="yes" xml:space="preserve">
          <source>This slice has the type &lt;code&gt;&amp;amp;[i32]&lt;/code&gt;. It works the same way as string slices do, by storing a reference to the first element and a length. You&amp;rsquo;ll use this kind of slice for all sorts of other collections. We&amp;rsquo;ll discuss these collections in detail when we talk about vectors in Chapter 8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3fe498c20a11bda205dc93f4390f850884c310c" translate="yes" xml:space="preserve">
          <source>This sort is stable (i.e., does not reorder equal elements) and &lt;code&gt;O(m n + n log n)&lt;/code&gt; worst-case, where the key function is &lt;code&gt;O(m)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04ff5f9e434224075f07c47221408f586ed69430" translate="yes" xml:space="preserve">
          <source>This sort is stable (i.e., does not reorder equal elements) and &lt;code&gt;O(m n log(m n))&lt;/code&gt; worst-case, where the key function is &lt;code&gt;O(m)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29bb618262e9818d4542507320a836e4faf4b56f" translate="yes" xml:space="preserve">
          <source>This sort is stable (i.e., does not reorder equal elements) and &lt;code&gt;O(n log n)&lt;/code&gt; worst-case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8094b9acbcdfe817a2beca8fbbfd03d36adf019" translate="yes" xml:space="preserve">
          <source>This sort is unstable (i.e., may reorder equal elements), in-place (i.e., does not allocate), and &lt;code&gt;O(m n log(m n))&lt;/code&gt; worst-case, where the key function is &lt;code&gt;O(m)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e852a79da20e649bf213cb6826ee95c589ae984" translate="yes" xml:space="preserve">
          <source>This sort is unstable (i.e., may reorder equal elements), in-place (i.e., does not allocate), and &lt;code&gt;O(n log n)&lt;/code&gt; worst-case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b9136d07194a4e8e43750309da02e688255bd47" translate="yes" xml:space="preserve">
          <source>This sort of behavior has been known to &lt;a href=&quot;https://securityvulns.com/Wdocument183.html&quot;&gt;lead to privilege escalation&lt;/a&gt; when used incorrectly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4609a563600ff8952232a98685a394486b72fb56" translate="yes" xml:space="preserve">
          <source>This state indicates that a generator has been suspended, and typically corresponds to a &lt;code&gt;yield&lt;/code&gt; statement. The value provided in this variant corresponds to the expression passed to &lt;code&gt;yield&lt;/code&gt; and allows generators to provide a value each time they yield.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90c88a5ca708244c3219f050c7309e58bf365755" translate="yes" xml:space="preserve">
          <source>This state indicates that a generator has finished execution with the provided value. Once a generator has returned &lt;code&gt;Complete&lt;/code&gt; it is considered a programmer error to call &lt;code&gt;resume&lt;/code&gt; again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7be578f8354e75e786ae7f8a72194e570efdeae6" translate="yes" xml:space="preserve">
          <source>This stream will be ignored. This is the equivalent of attaching the stream to &lt;code&gt;/dev/null&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="047e86b07f343619951ab342d709e9864cc54c3d" translate="yes" xml:space="preserve">
          <source>This struct has one field, &lt;code&gt;part&lt;/code&gt;, that holds a string slice, which is a reference. As with generic data types, we declare the name of the generic lifetime parameter inside angle brackets after the name of the struct so we can use the lifetime parameter in the body of the struct definition. This annotation means an instance of &lt;code&gt;ImportantExcerpt&lt;/code&gt; can&amp;rsquo;t outlive the reference it holds in its &lt;code&gt;part&lt;/code&gt; field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="035a190c93ffcb98a162f4a1c124850fba76f70b" translate="yes" xml:space="preserve">
          <source>This struct has the same layout as types like &lt;code&gt;&amp;amp;SomeTrait&lt;/code&gt; and &lt;code&gt;Box&amp;lt;dyn AnotherTrait&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="698bb1f1506a6aa8b90b6f64dc7e32c0c5091a12" translate="yes" xml:space="preserve">
          <source>This struct is a helper to be used with functions like &lt;code&gt;Vec::sort_by_key&lt;/code&gt; and can be used to reverse order a part of a key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b94fdb25d3a1999fbb00df483466c3f3ad93974" translate="yes" xml:space="preserve">
          <source>This struct is created by the &lt;a href=&quot;../iter/trait.intoiterator#tymethod.into_iter&quot;&gt;&lt;code&gt;into_iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;enum.result&quot;&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt; (provided by the &lt;a href=&quot;../iter/trait.intoiterator&quot;&gt;&lt;code&gt;IntoIterator&lt;/code&gt;&lt;/a&gt; trait).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dd8330957d499a2a2bc9ec6116864588108859d" translate="yes" xml:space="preserve">
          <source>This struct is created by the &lt;a href=&quot;../primitive.slice#method.chunks&quot;&gt;&lt;code&gt;chunks&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../primitive.slice&quot;&gt;slices&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f546acf131aa1e22a602b9ef3fb82d4387eee8e" translate="yes" xml:space="preserve">
          <source>This struct is created by the &lt;a href=&quot;../primitive.slice#method.chunks_exact&quot;&gt;&lt;code&gt;chunks_exact&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../primitive.slice&quot;&gt;slices&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e45db796c91b4ce48eb20085844caa57f6053703" translate="yes" xml:space="preserve">
          <source>This struct is created by the &lt;a href=&quot;../primitive.slice#method.chunks_exact_mut&quot;&gt;&lt;code&gt;chunks_exact_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../primitive.slice&quot;&gt;slices&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4164f449a467d7ed1b48f5a88a1f8a74fb26a190" translate="yes" xml:space="preserve">
          <source>This struct is created by the &lt;a href=&quot;../primitive.slice#method.chunks_mut&quot;&gt;&lt;code&gt;chunks_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../primitive.slice&quot;&gt;slices&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76b48770dc5ec192ca6962e1d7faa3bd68e942ab" translate="yes" xml:space="preserve">
          <source>This struct is created by the &lt;a href=&quot;../primitive.slice#method.iter&quot;&gt;&lt;code&gt;iter&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../primitive.slice&quot;&gt;slices&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7681a887be4ac8a42d7f0ef28706aee3c6323619" translate="yes" xml:space="preserve">
          <source>This struct is created by the &lt;a href=&quot;../primitive.slice#method.iter_mut&quot;&gt;&lt;code&gt;iter_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../primitive.slice&quot;&gt;slices&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="523facc9e10029a951175d54b1f37f2671749ed6" translate="yes" xml:space="preserve">
          <source>This struct is created by the &lt;a href=&quot;../primitive.slice#method.rchunks&quot;&gt;&lt;code&gt;rchunks&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../primitive.slice&quot;&gt;slices&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7743c6e4ca6fc913a9f4d37b6de12a320056fa8b" translate="yes" xml:space="preserve">
          <source>This struct is created by the &lt;a href=&quot;../primitive.slice#method.rchunks_exact&quot;&gt;&lt;code&gt;rchunks_exact&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../primitive.slice&quot;&gt;slices&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82404af50a38a848751818c48976a9a56b795818" translate="yes" xml:space="preserve">
          <source>This struct is created by the &lt;a href=&quot;../primitive.slice#method.rchunks_exact_mut&quot;&gt;&lt;code&gt;rchunks_exact_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../primitive.slice&quot;&gt;slices&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="711c0f689f1d3a75f7b5a1b1833bc925f8986127" translate="yes" xml:space="preserve">
          <source>This struct is created by the &lt;a href=&quot;../primitive.slice#method.rchunks_mut&quot;&gt;&lt;code&gt;rchunks_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../primitive.slice&quot;&gt;slices&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ffea197c31595a869becf274e9c9ef3509b405a" translate="yes" xml:space="preserve">
          <source>This struct is created by the &lt;a href=&quot;../primitive.slice#method.rsplit&quot;&gt;&lt;code&gt;rsplit&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../primitive.slice&quot;&gt;slices&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a28e12c215b6246a69d2f856da858d720de99619" translate="yes" xml:space="preserve">
          <source>This struct is created by the &lt;a href=&quot;../primitive.slice#method.rsplit_mut&quot;&gt;&lt;code&gt;rsplit_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../primitive.slice&quot;&gt;slices&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1ddb16a3352ab0f837d4fac934c98e22db158e5" translate="yes" xml:space="preserve">
          <source>This struct is created by the &lt;a href=&quot;../primitive.slice#method.rsplitn&quot;&gt;&lt;code&gt;rsplitn&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../primitive.slice&quot;&gt;slices&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2305be064f2e36144fd442bf726fd4dd5a160216" translate="yes" xml:space="preserve">
          <source>This struct is created by the &lt;a href=&quot;../primitive.slice#method.rsplitn_mut&quot;&gt;&lt;code&gt;rsplitn_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../primitive.slice&quot;&gt;slices&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d2c4405dee882e98a94c3681ae8ce615cfcc3f7" translate="yes" xml:space="preserve">
          <source>This struct is created by the &lt;a href=&quot;../primitive.slice#method.split&quot;&gt;&lt;code&gt;split&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../primitive.slice&quot;&gt;slices&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abdc8d3421db5241b7ca4544a7b51d6159d67e49" translate="yes" xml:space="preserve">
          <source>This struct is created by the &lt;a href=&quot;../primitive.slice#method.split_mut&quot;&gt;&lt;code&gt;split_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../primitive.slice&quot;&gt;slices&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b850789ebec6b616db674ca7582ef014921e3e50" translate="yes" xml:space="preserve">
          <source>This struct is created by the &lt;a href=&quot;../primitive.slice#method.splitn&quot;&gt;&lt;code&gt;splitn&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../primitive.slice&quot;&gt;slices&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcbac1aabe82a2c466b31106e57bd4691b6a4588" translate="yes" xml:space="preserve">
          <source>This struct is created by the &lt;a href=&quot;../primitive.slice#method.splitn_mut&quot;&gt;&lt;code&gt;splitn_mut&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../primitive.slice&quot;&gt;slices&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4faa0b9911c89c4588e753ca1891a11cb9aac5c2" translate="yes" xml:space="preserve">
          <source>This struct is created by the &lt;a href=&quot;../primitive.slice#method.windows&quot;&gt;&lt;code&gt;windows&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../primitive.slice&quot;&gt;slices&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="972c0f2531dd3e046ad902a7f6f569ef9de9571e" translate="yes" xml:space="preserve">
          <source>This struct is created by the &lt;a href=&quot;../primitive.str#method.bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../primitive.str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dc716c653425077e3bf50725d3ddc775e25fe94" translate="yes" xml:space="preserve">
          <source>This struct is created by the &lt;a href=&quot;../primitive.str#method.char_indices&quot;&gt;&lt;code&gt;char_indices&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../primitive.str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="607ded9325aedcb5c140c227e32c8ad28d5439d9" translate="yes" xml:space="preserve">
          <source>This struct is created by the &lt;a href=&quot;../primitive.str#method.chars&quot;&gt;&lt;code&gt;chars&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../primitive.str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb31472d0cae7541e173fe527a7087a142820c04" translate="yes" xml:space="preserve">
          <source>This struct is created by the &lt;a href=&quot;../primitive.str#method.encode_utf16&quot;&gt;&lt;code&gt;encode_utf16&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../primitive.str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7c273a10bb61ef5da70d27b34dc57f12929254d" translate="yes" xml:space="preserve">
          <source>This struct is created by the &lt;a href=&quot;../primitive.str#method.split_ascii_whitespace&quot;&gt;&lt;code&gt;split_ascii_whitespace&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../primitive.str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e335f4d066241eacb01d34cbc9797fdfc696dc6b" translate="yes" xml:space="preserve">
          <source>This struct is created by the &lt;a href=&quot;../primitive.str#method.split_whitespace&quot;&gt;&lt;code&gt;split_whitespace&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../primitive.str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9cd50ffb5bf76be59d59fc2f81ddf738ff0464b" translate="yes" xml:space="preserve">
          <source>This struct is created by the &lt;a href=&quot;fn.args&quot;&gt;&lt;code&gt;std::env::args&lt;/code&gt;&lt;/a&gt; function. See its documentation for more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ec39f7b0daa2776e166f7fac0653e5c7c5e4333" translate="yes" xml:space="preserve">
          <source>This struct is created by the &lt;a href=&quot;fn.args_os&quot;&gt;&lt;code&gt;std::env::args_os&lt;/code&gt;&lt;/a&gt; function. See its documentation for more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d49df01529faa1803ee9ac5934efa956bfb59ca5" translate="yes" xml:space="preserve">
          <source>This struct is created by the &lt;a href=&quot;struct.string#method.drain&quot;&gt;&lt;code&gt;drain&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7821d89ece3dc45805333802521c4ece28a6ec77" translate="yes" xml:space="preserve">
          <source>This struct is created by the &lt;a href=&quot;struct.vec#method.splice&quot;&gt;&lt;code&gt;splice()&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.vec&quot;&gt;&lt;code&gt;Vec&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df074a53b5359b4dd926d5ab8c21cb3fdb8391e4" translate="yes" xml:space="preserve">
          <source>This struct is created with the &lt;a href=&quot;../primitive.str#method.lines&quot;&gt;&lt;code&gt;lines&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;../primitive.str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;. See its documentation for more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8df7525ac9b1331bb51b51ca2c5df8a11c0a1c0e" translate="yes" xml:space="preserve">
          <source>This struct is generally created by calling &lt;a href=&quot;fn.empty&quot;&gt;&lt;code&gt;empty&lt;/code&gt;&lt;/a&gt;. Please see the documentation of &lt;a href=&quot;fn.empty&quot;&gt;&lt;code&gt;empty()&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d0cc773f4b725ed1f190beeb33e3f1817949265" translate="yes" xml:space="preserve">
          <source>This struct is generally created by calling &lt;a href=&quot;fn.repeat&quot;&gt;&lt;code&gt;repeat&lt;/code&gt;&lt;/a&gt;. Please see the documentation of &lt;code&gt;repeat()&lt;/code&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc05dce26bdc09f8fc488132c92d5215b0e0bb48" translate="yes" xml:space="preserve">
          <source>This struct is generally created by calling &lt;a href=&quot;fn.sink&quot;&gt;&lt;code&gt;sink&lt;/code&gt;&lt;/a&gt;. Please see the documentation of &lt;code&gt;sink()&lt;/code&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a732d552fb11922cbdd232738709d5ceaab3ab0" translate="yes" xml:space="preserve">
          <source>This struct is generally created by calling &lt;a href=&quot;trait.bufread#method.lines&quot;&gt;&lt;code&gt;lines&lt;/code&gt;&lt;/a&gt; on a &lt;code&gt;BufRead&lt;/code&gt;. Please see the documentation of &lt;code&gt;lines()&lt;/code&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57521da9d072a5a75b7ef81a11e1941632c07769" translate="yes" xml:space="preserve">
          <source>This struct is generally created by calling &lt;a href=&quot;trait.bufread#method.split&quot;&gt;&lt;code&gt;split&lt;/code&gt;&lt;/a&gt; on a &lt;code&gt;BufRead&lt;/code&gt;. Please see the documentation of &lt;code&gt;split()&lt;/code&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1deb8df82a06cf7e25723eca2d9b3c3500c212f" translate="yes" xml:space="preserve">
          <source>This struct is generally created by calling &lt;a href=&quot;trait.read#method.bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; on a reader. Please see the documentation of &lt;a href=&quot;trait.read#method.bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="137e3be8282a7112c63c8d5b6052cbdcefad663e" translate="yes" xml:space="preserve">
          <source>This struct is generally created by calling &lt;a href=&quot;trait.read#method.chain&quot;&gt;&lt;code&gt;chain&lt;/code&gt;&lt;/a&gt; on a reader. Please see the documentation of &lt;a href=&quot;trait.read#method.chain&quot;&gt;&lt;code&gt;chain&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="047a4ebdecfd5e2897b79c73996497448f62e8a9" translate="yes" xml:space="preserve">
          <source>This struct is generally created by calling &lt;a href=&quot;trait.read#method.take&quot;&gt;&lt;code&gt;take&lt;/code&gt;&lt;/a&gt; on a reader. Please see the documentation of &lt;a href=&quot;trait.read#method.take&quot;&gt;&lt;code&gt;take&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7395af01bd4a50c6dfb48da98c0430b70139ec6" translate="yes" xml:space="preserve">
          <source>This struct is used in the &lt;a href=&quot;struct.child#structfield.stderr&quot;&gt;&lt;code&gt;stderr&lt;/code&gt;&lt;/a&gt; field on &lt;a href=&quot;struct.child&quot;&gt;&lt;code&gt;Child&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45d9e2d1a8753395175acd043fb98b742fa0c7b1" translate="yes" xml:space="preserve">
          <source>This struct is used in the &lt;a href=&quot;struct.child#structfield.stdin&quot;&gt;&lt;code&gt;stdin&lt;/code&gt;&lt;/a&gt; field on &lt;a href=&quot;struct.child&quot;&gt;&lt;code&gt;Child&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0e77c1cd6c1d6c1011116ad5fd2720b269732ff" translate="yes" xml:space="preserve">
          <source>This struct is used in the &lt;a href=&quot;struct.child#structfield.stdout&quot;&gt;&lt;code&gt;stdout&lt;/code&gt;&lt;/a&gt; field on &lt;a href=&quot;struct.child&quot;&gt;&lt;code&gt;Child&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c3b3caed2d7f9ef42e3b6090d38c4f7a8f595c9" translate="yes" xml:space="preserve">
          <source>This structure is created by the &lt;a href=&quot;fn.split_paths&quot;&gt;&lt;code&gt;std::env::split_paths&lt;/code&gt;&lt;/a&gt; function. See its documentation for more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="763fd05613c0342afc387ef243d7b2fcab0e70ec" translate="yes" xml:space="preserve">
          <source>This structure is created by the &lt;a href=&quot;fn.vars&quot;&gt;&lt;code&gt;std::env::vars&lt;/code&gt;&lt;/a&gt; function. See its documentation for more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeb9c6eb7e34424ffff3b1a0d353cc1e7da71bbe" translate="yes" xml:space="preserve">
          <source>This structure is created by the &lt;a href=&quot;fn.vars_os&quot;&gt;&lt;code&gt;std::env::vars_os&lt;/code&gt;&lt;/a&gt; function. See its documentation for more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49ca05175d2c16657b8d4f1e47558a6913b20cd1" translate="yes" xml:space="preserve">
          <source>This structure is created by the &lt;a href=&quot;struct.mutex#method.lock&quot;&gt;&lt;code&gt;lock&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.mutex#method.try_lock&quot;&gt;&lt;code&gt;try_lock&lt;/code&gt;&lt;/a&gt; methods on &lt;a href=&quot;struct.mutex&quot;&gt;&lt;code&gt;Mutex&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a6f95cf45a5bcc128684cebfbd05d3880902f8d" translate="yes" xml:space="preserve">
          <source>This structure is created by the &lt;a href=&quot;struct.panicinfo#method.location&quot;&gt;&lt;code&gt;location&lt;/code&gt;&lt;/a&gt; method of &lt;a href=&quot;struct.panicinfo&quot;&gt;&lt;code&gt;PanicInfo&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ba43b358d72c0f70633e8ff8edbb3820ba26ae8" translate="yes" xml:space="preserve">
          <source>This structure is created by the &lt;a href=&quot;struct.rwlock#method.read&quot;&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.rwlock#method.try_read&quot;&gt;&lt;code&gt;try_read&lt;/code&gt;&lt;/a&gt; methods on &lt;a href=&quot;struct.rwlock&quot;&gt;&lt;code&gt;RwLock&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37c48c912f9cb67a5286393a48bcb5981e2a346b" translate="yes" xml:space="preserve">
          <source>This structure is created by the &lt;a href=&quot;struct.rwlock#method.write&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.rwlock#method.try_write&quot;&gt;&lt;code&gt;try_write&lt;/code&gt;&lt;/a&gt; methods on &lt;a href=&quot;struct.rwlock&quot;&gt;&lt;code&gt;RwLock&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1b64e1281a00cf103b0dc5f24e83df69f16eb4c" translate="yes" xml:space="preserve">
          <source>This structure is returned from the &lt;a href=&quot;fn.metadata&quot;&gt;&lt;code&gt;metadata&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;fn.symlink_metadata&quot;&gt;&lt;code&gt;symlink_metadata&lt;/code&gt;&lt;/a&gt; function or method and represents known metadata about a file such as its permissions, size, modification times, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a90c6bba494b412af840afa94f3d4327e4e6ac5c" translate="yes" xml:space="preserve">
          <source>This structure is used to represent and manage child processes. A child process is created via the &lt;a href=&quot;struct.command&quot;&gt;&lt;code&gt;Command&lt;/code&gt;&lt;/a&gt; struct, which configures the spawning process and can itself be constructed using a builder-style interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21f163fe5401a35062783545bd12a7fe23e7c94b" translate="yes" xml:space="preserve">
          <source>This structure represents a safely precompiled version of a format string and its arguments. This cannot be generated at runtime because it cannot safely be done, so no constructors are given and the fields are private to prevent modification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0adc11971ab38c810ebf2248ed011aa51008e125" translate="yes" xml:space="preserve">
          <source>This suffers the same restrictions and reasoning as implementing &lt;a href=&quot;trait.into&quot;&gt;&lt;code&gt;Into&lt;/code&gt;&lt;/a&gt;, see there for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f2d7a21c40fec745cf07aea5a678e00b27d1d6d" translate="yes" xml:space="preserve">
          <source>This sums up every integer in a vector, rejecting the sum if a negative element is encountered:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b38ed7b25f08579fef293fd7b9ae8fd73fe03b3" translate="yes" xml:space="preserve">
          <source>This sums up the position of the character 'a' in a vector of strings, if a word did not have the character 'a' the operation returns &lt;code&gt;None&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7b5e0845ef8959eb8d683ea0316747264243c8d" translate="yes" xml:space="preserve">
          <source>This syntax seems comparable to that of generics. So why not just define the &lt;code&gt;Iterator&lt;/code&gt; trait with generics, as shown in Listing 19-13?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e389d45d6848629d7d0a8141a0d2eefc943d3d3" translate="yes" xml:space="preserve">
          <source>This syntax should look familiar from our discussions on how to define traits in Chapter 10. Next comes some new syntax: Listing 17-4 defines a struct named &lt;code&gt;Screen&lt;/code&gt; that holds a vector named &lt;code&gt;components&lt;/code&gt;. This vector is of type &lt;code&gt;Box&amp;lt;dyn Draw&amp;gt;&lt;/code&gt;, which is a trait object; it&amp;rsquo;s a stand-in for any type inside a &lt;code&gt;Box&lt;/code&gt; that implements the &lt;code&gt;Draw&lt;/code&gt; trait.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="157ddb41dd66b7335f1aa23c99d8dc3500848966" translate="yes" xml:space="preserve">
          <source>This syntax specifies that we want the X type from MyTrait, as made concrete in MyStruct. The reason that we cannot simply use &lt;code&gt;MyStruct::X&lt;/code&gt; is that MyStruct might implement two different traits with identically-named associated types. This syntax allows disambiguation between the two.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6be1eead3ada3953477a6dbe51c912612a272761" translate="yes" xml:space="preserve">
          <source>This technique is just one of many ways to improve the throughput of a web server. Other options you might explore are the fork/join model and the single-threaded async I/O model. If you&amp;rsquo;re interested in this topic, you can read more about other solutions and try to implement them in Rust; with a low-level language like Rust, all of these options are possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="731e8ea356524b34210881afc68de295a0e37bff" translate="yes" xml:space="preserve">
          <source>This technique is pretty neat! By using &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt;, we have an outwardly immutable &lt;code&gt;List&lt;/code&gt; value. But we can use the methods on &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; that provide access to its interior mutability so we can modify our data when we need to. The runtime checks of the borrowing rules protect us from data races, and it&amp;rsquo;s sometimes worth trading a bit of speed for this flexibility in our data structures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9283a8a2efae9e1f40a1d640e7fbf1f6c7025c52" translate="yes" xml:space="preserve">
          <source>This tells us the return type of the &lt;code&gt;File::open&lt;/code&gt; function is a &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt;. The generic parameter &lt;code&gt;T&lt;/code&gt; has been filled in here with the type of the success value, &lt;code&gt;std::fs::File&lt;/code&gt;, which is a file handle. The type of &lt;code&gt;E&lt;/code&gt; used in the error value is &lt;code&gt;std::io::Error&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1369ebc6a80c7328fbe0b2bd897392d17a8945de" translate="yes" xml:space="preserve">
          <source>This test code defines a &lt;code&gt;MockMessenger&lt;/code&gt; struct that has a &lt;code&gt;sent_messages&lt;/code&gt; field with a &lt;code&gt;Vec&lt;/code&gt; of &lt;code&gt;String&lt;/code&gt; values to keep track of the messages it&amp;rsquo;s told to send. We also define an associated function &lt;code&gt;new&lt;/code&gt; to make it convenient to create new &lt;code&gt;MockMessenger&lt;/code&gt; values that start with an empty list of messages. We then implement the &lt;code&gt;Messenger&lt;/code&gt; trait for &lt;code&gt;MockMessenger&lt;/code&gt; so we can give a &lt;code&gt;MockMessenger&lt;/code&gt; to a &lt;code&gt;LimitTracker&lt;/code&gt;. In the definition of the &lt;code&gt;send&lt;/code&gt; method, we take the message passed in as a parameter and store it in the &lt;code&gt;MockMessenger&lt;/code&gt; list of &lt;code&gt;sent_messages&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf7bdfe2c080bcfbd294561ba32984ed7b6655c2" translate="yes" xml:space="preserve">
          <source>This test creates a new &lt;code&gt;Cacher&lt;/code&gt; instance with a closure that returns the value passed into it. We call the &lt;code&gt;value&lt;/code&gt; method on this &lt;code&gt;Cacher&lt;/code&gt; instance with an &lt;code&gt;arg&lt;/code&gt; value of 1 and then an &lt;code&gt;arg&lt;/code&gt; value of 2, and we expect the call to &lt;code&gt;value&lt;/code&gt; with the &lt;code&gt;arg&lt;/code&gt; value of 2 to return 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72299afca54f19e85015cb228f6cdc67fc73f999" translate="yes" xml:space="preserve">
          <source>This test creates a new &lt;code&gt;Counter&lt;/code&gt; instance in the &lt;code&gt;counter&lt;/code&gt; variable and then calls &lt;code&gt;next&lt;/code&gt; repeatedly, verifying that we have implemented the behavior we want this iterator to have: returning the values from 1 to 5.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05dea38628c56d1ac2dee0da9506b8c1998c15fa" translate="yes" xml:space="preserve">
          <source>This test searches for the string &lt;code&gt;&quot;duct&quot;&lt;/code&gt;. The text we&amp;rsquo;re searching is three lines, only one of which contains &lt;code&gt;&quot;duct&quot;&lt;/code&gt;. We assert that the value returned from the &lt;code&gt;search&lt;/code&gt; function contains only the line we expect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddca2fdf5e68d60216a77aaaba507a1415303561" translate="yes" xml:space="preserve">
          <source>This test will pass because the value we put in the &lt;code&gt;should_panic&lt;/code&gt; attribute&amp;rsquo;s &lt;code&gt;expected&lt;/code&gt; parameter is a substring of the message that the &lt;code&gt;Guess::new&lt;/code&gt; function panics with. We could have specified the entire panic message that we expect, which in this case would be &lt;code&gt;Guess value must be less than or equal to 100, got 200.&lt;/code&gt; What you choose to specify in the expected parameter for &lt;code&gt;should_panic&lt;/code&gt; depends on how much of the panic message is unique or dynamic and how precise you want your test to be. In this case, a substring of the panic message is enough to ensure that the code in the test function executes the &lt;code&gt;else if value &amp;gt; 100&lt;/code&gt; case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbe227be9e7db744874fde49a6fb7f9f9cde2ed8" translate="yes" xml:space="preserve">
          <source>This text is available in &lt;a href=&quot;https://nostarch.com/rust&quot;&gt;paperback and ebook format from No Starch Press&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abaa655d972948c0991360be1b3331d77edb5df2" translate="yes" xml:space="preserve">
          <source>This time when we compile the code, we get a different set of errors:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef45f877ddb3c6c79878e62a645c0f1bb5d754ab" translate="yes" xml:space="preserve">
          <source>This time when we run the &lt;code&gt;should_panic&lt;/code&gt; test, it will fail:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="927ffba8c6b861ab1b3ffedb0e60fa4989110409" translate="yes" xml:space="preserve">
          <source>This time, before we create the first spawned thread, we call &lt;code&gt;clone&lt;/code&gt; on the sending end of the channel. This will give us a new sending handle we can pass to the first spawned thread. We pass the original sending end of the channel to a second spawned thread. This gives us two threads, each sending different messages to the receiving end of the channel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03b02e99d0c7b36f56fe77cf1bc6781836989a07" translate="yes" xml:space="preserve">
          <source>This time, the spawned thread has a vector of strings that we want to send to the main thread. We iterate over them, sending each individually, and pause between each by calling the &lt;code&gt;thread::sleep&lt;/code&gt; function with a &lt;code&gt;Duration&lt;/code&gt; value of 1 second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="704e60202fcb30892563c7bc7f66fbb6decda49f" translate="yes" xml:space="preserve">
          <source>This trait allows constructing network objects like &lt;a href=&quot;struct.tcpstream&quot;&gt;&lt;code&gt;TcpStream&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;struct.udpsocket&quot;&gt;&lt;code&gt;UdpSocket&lt;/code&gt;&lt;/a&gt; easily with values of various types for the bind/connection address. It is needed because sometimes one type is more appropriate than the other: for simple uses a string like &lt;code&gt;&quot;localhost:12345&quot;&lt;/code&gt; is much nicer than manual construction of the corresponding &lt;a href=&quot;enum.socketaddr&quot;&gt;&lt;code&gt;SocketAddr&lt;/code&gt;&lt;/a&gt;, but sometimes &lt;a href=&quot;enum.socketaddr&quot;&gt;&lt;code&gt;SocketAddr&lt;/code&gt;&lt;/a&gt; value is &lt;em&gt;the&lt;/em&gt; main source of the address, and converting it to some other type (e.g., a string) just for it to be converted back to &lt;a href=&quot;enum.socketaddr&quot;&gt;&lt;code&gt;SocketAddr&lt;/code&gt;&lt;/a&gt; in constructor methods is pointless.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1802ac1cfe1536c265ef2f2bdbe3a05ea51c03f9" translate="yes" xml:space="preserve">
          <source>This trait allows for partial equality, for types that do not have a full equivalence relation. For example, in floating point numbers &lt;code&gt;NaN != NaN&lt;/code&gt;, so floating point types implement &lt;code&gt;PartialEq&lt;/code&gt; but not &lt;code&gt;Eq&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bebce9a7c84fca1499f5aca86035aeb53d64365" translate="yes" xml:space="preserve">
          <source>This trait can be used to implement other traits on fixed-size arrays without causing much metadata bloat.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5800007da2c584795de3c7fc5ff71b96b272866c" translate="yes" xml:space="preserve">
          <source>This trait can be used with &lt;code&gt;#[derive]&lt;/code&gt; if all fields are &lt;code&gt;Clone&lt;/code&gt;. The &lt;code&gt;derive&lt;/code&gt;d implementation of &lt;a href=&quot;trait.clone#tymethod.clone&quot;&gt;&lt;code&gt;clone&lt;/code&gt;&lt;/a&gt; calls &lt;a href=&quot;trait.clone#tymethod.clone&quot;&gt;&lt;code&gt;clone&lt;/code&gt;&lt;/a&gt; on each field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6a77474d17602cdca329051113afe871aed6794" translate="yes" xml:space="preserve">
          <source>This trait can be used with &lt;code&gt;#[derive]&lt;/code&gt; if all fields implement &lt;code&gt;Debug&lt;/code&gt;. When &lt;code&gt;derive&lt;/code&gt;d for structs, it will use the name of the &lt;code&gt;struct&lt;/code&gt;, then &lt;code&gt;{&lt;/code&gt;, then a comma-separated list of each field's name and &lt;code&gt;Debug&lt;/code&gt; value, then &lt;code&gt;}&lt;/code&gt;. For &lt;code&gt;enum&lt;/code&gt;s, it will use the name of the variant and, if applicable, &lt;code&gt;(&lt;/code&gt;, then the &lt;code&gt;Debug&lt;/code&gt; values of the fields, then &lt;code&gt;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1a45e25757830b253d95a2bc878b147cc25a79e" translate="yes" xml:space="preserve">
          <source>This trait can be used with &lt;code&gt;#[derive]&lt;/code&gt; if all of the type's fields implement &lt;code&gt;Default&lt;/code&gt;. When &lt;code&gt;derive&lt;/code&gt;d, it will use the default value for each field's type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f09d6ff7ae1d14cf4065033999ff08ecaa8a87ff" translate="yes" xml:space="preserve">
          <source>This trait can be used with &lt;code&gt;#[derive]&lt;/code&gt;. When &lt;code&gt;derive&lt;/code&gt;d on structs, it will produce a lexicographic ordering based on the top-to-bottom declaration order of the struct's members. When &lt;code&gt;derive&lt;/code&gt;d on enums, variants are ordered by their top-to-bottom declaration order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86c69254ea90ce1d6926208560c4e9d29d5a8ded" translate="yes" xml:space="preserve">
          <source>This trait can be used with &lt;code&gt;#[derive]&lt;/code&gt;. When &lt;code&gt;derive&lt;/code&gt;d on structs, two instances are equal if all fields are equal, and not equal if any fields are not equal. When &lt;code&gt;derive&lt;/code&gt;d on enums, each variant is equal to itself and not equal to the other variants.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d52b5ae617172e107648185da3f817960014bc61" translate="yes" xml:space="preserve">
          <source>This trait can be used with &lt;code&gt;#[derive]&lt;/code&gt;. When &lt;code&gt;derive&lt;/code&gt;d, because &lt;code&gt;Eq&lt;/code&gt; has no extra methods, it is only informing the compiler that this is an equivalence relation rather than a partial equivalence relation. Note that the &lt;code&gt;derive&lt;/code&gt; strategy requires all fields are &lt;code&gt;Eq&lt;/code&gt;, which isn't always desired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b8679bc430feac142d06128a89f1af63473e460" translate="yes" xml:space="preserve">
          <source>This trait is automatically implemented for almost every type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce8cc586f2666a5f5f3d6650a18ec09e61d24a39" translate="yes" xml:space="preserve">
          <source>This trait is automatically implemented for any type which implements the &lt;a href=&quot;../fmt/trait.display&quot;&gt;&lt;code&gt;Display&lt;/code&gt;&lt;/a&gt; trait. As such, &lt;code&gt;ToString&lt;/code&gt; shouldn't be implemented directly: &lt;a href=&quot;../fmt/trait.display&quot;&gt;&lt;code&gt;Display&lt;/code&gt;&lt;/a&gt; should be implemented instead, and you get the &lt;code&gt;ToString&lt;/code&gt; implementation for free.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e3b32607a26276b7eeb2dc3f257150496699a30" translate="yes" xml:space="preserve">
          <source>This trait is automatically implemented when the compiler determines it's appropriate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="494ae62c6025e3f79bcb3a8e54a1efc9a121264f" translate="yes" xml:space="preserve">
          <source>This trait is implemented by default for many types and behaves similarly in terms of inference of implementation to the &lt;a href=&quot;../marker/trait.send&quot;&gt;&lt;code&gt;Send&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../marker/trait.sync&quot;&gt;&lt;code&gt;Sync&lt;/code&gt;&lt;/a&gt; traits. The purpose of this trait is to encode what types are safe to cross a &lt;a href=&quot;fn.catch_unwind&quot;&gt;&lt;code&gt;catch_unwind&lt;/code&gt;&lt;/a&gt; boundary with no fear of unwind safety.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fb1b7be6434ef1f997fff7cbfd045083e8560fe" translate="yes" xml:space="preserve">
          <source>This trait is namely not implemented by &lt;a href=&quot;../cell/struct.unsafecell&quot;&gt;&lt;code&gt;UnsafeCell&lt;/code&gt;&lt;/a&gt;, the root of all interior mutability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d0c0de184f4ceb6563275bbcba7c14bd0a8edcc" translate="yes" xml:space="preserve">
          <source>This trait is similar to &lt;a href=&quot;trait.asmut&quot;&gt;&lt;code&gt;AsMut&lt;/code&gt;&lt;/a&gt; which is used for converting between mutable references. If you need to do a costly conversion it is better to implement &lt;a href=&quot;trait.from&quot;&gt;&lt;code&gt;From&lt;/code&gt;&lt;/a&gt; with type &lt;code&gt;&amp;amp;T&lt;/code&gt; or write a custom function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72c951714ee4a3342d70f41b91f0921e7e49ebf0" translate="yes" xml:space="preserve">
          <source>This trait is similar to &lt;a href=&quot;trait.asref&quot;&gt;&lt;code&gt;AsRef&lt;/code&gt;&lt;/a&gt; but used for converting between mutable references. If you need to do a costly conversion it is better to implement &lt;a href=&quot;trait.from&quot;&gt;&lt;code&gt;From&lt;/code&gt;&lt;/a&gt; with type &lt;code&gt;&amp;amp;mut T&lt;/code&gt; or write a custom function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a731da3b36000bb0e86dfbd3105e49bf55c952e" translate="yes" xml:space="preserve">
          <source>This trait is the type which this modules requires when formatting information. This is similar to the standard library's &lt;a href=&quot;../io/trait.write&quot;&gt;&lt;code&gt;io::Write&lt;/code&gt;&lt;/a&gt; trait, but it is only intended for use in libcore.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b733d2267c635d65e2675dc57b25279df45e854" translate="yes" xml:space="preserve">
          <source>This trait is used for generic address resolution when constructing network objects. By default it is implemented for the following types:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d670e5f44288c65ae601422a01219d930136f211" translate="yes" xml:space="preserve">
          <source>This trait is used to implement the &lt;a href=&quot;trait.product#tymethod.product&quot;&gt;&lt;code&gt;product&lt;/code&gt;&lt;/a&gt; method on iterators. Types which implement the trait can be generated by the &lt;a href=&quot;trait.product#tymethod.product&quot;&gt;&lt;code&gt;product&lt;/code&gt;&lt;/a&gt; method. Like &lt;a href=&quot;trait.fromiterator&quot;&gt;&lt;code&gt;FromIterator&lt;/code&gt;&lt;/a&gt; this trait should rarely be called directly and instead interacted with through &lt;a href=&quot;trait.iterator#method.product&quot;&gt;&lt;code&gt;Iterator::product&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f91608e2b2b005f5d3b20c487cd2efcf273838ce" translate="yes" xml:space="preserve">
          <source>This trait is used to implement the &lt;a href=&quot;trait.sum#tymethod.sum&quot;&gt;&lt;code&gt;sum&lt;/code&gt;&lt;/a&gt; method on iterators. Types which implement the trait can be generated by the &lt;a href=&quot;trait.sum#tymethod.sum&quot;&gt;&lt;code&gt;sum&lt;/code&gt;&lt;/a&gt; method. Like &lt;a href=&quot;trait.fromiterator&quot;&gt;&lt;code&gt;FromIterator&lt;/code&gt;&lt;/a&gt; this trait should rarely be called directly and instead interacted with through &lt;a href=&quot;trait.iterator#method.sum&quot;&gt;&lt;code&gt;Iterator::sum&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b392534a7b8b5e656825847e787994b0e838f382" translate="yes" xml:space="preserve">
          <source>This trait must only be implemented when the contract is upheld. Consumers of this trait must inspect &lt;a href=&quot;trait.iterator#method.size_hint&quot;&gt;&lt;code&gt;.size_hint&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s upper bound.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92b09db877c076776794822e006bb3f0094cf13d" translate="yes" xml:space="preserve">
          <source>This trait provides methods for searching for non-overlapping matches of a pattern starting from the back (right) of a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="581e031865e09ba379141c2883157c1d8acecf2b" translate="yes" xml:space="preserve">
          <source>This trait provides methods for searching for non-overlapping matches of a pattern starting from the front (left) of a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d02b91849e023371b70419d209ec71d8ae7432d" translate="yes" xml:space="preserve">
          <source>This trait should generally not be implemented by consumers of the standard library. The &lt;a href=&quot;../macro.write&quot;&gt;&lt;code&gt;write!&lt;/code&gt;&lt;/a&gt; macro accepts an instance of &lt;a href=&quot;../io/trait.write&quot;&gt;&lt;code&gt;io::Write&lt;/code&gt;&lt;/a&gt;, and the &lt;a href=&quot;../io/trait.write&quot;&gt;&lt;code&gt;io::Write&lt;/code&gt;&lt;/a&gt; trait is favored over implementing this trait.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6159bc779b64f1381d56daf00e89fd123440f35d" translate="yes" xml:space="preserve">
          <source>This tree shows how some of the modules nest inside one another (for example, &lt;code&gt;hosting&lt;/code&gt; nests inside &lt;code&gt;front_of_house&lt;/code&gt;). The tree also shows that some modules are &lt;em&gt;siblings&lt;/em&gt; to each other, meaning they&amp;rsquo;re defined in the same module (&lt;code&gt;hosting&lt;/code&gt; and &lt;code&gt;serving&lt;/code&gt; are defined within &lt;code&gt;front_of_house&lt;/code&gt;). To continue the family metaphor, if module A is contained inside module B, we say that module A is the &lt;em&gt;child&lt;/em&gt; of module B and that module B is the &lt;em&gt;parent&lt;/em&gt; of module A. Notice that the entire module tree is rooted under the implicit module named &lt;code&gt;crate&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a2a59de8ad5e3abf90b08ea27feb4c5c9564363" translate="yes" xml:space="preserve">
          <source>This trick is very sneaky and complicated. Don&amp;rsquo;t worry if it doesn&amp;rsquo;t make perfect sense; someday, it will be completely unnecessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b151d516c842037f13cd18d29f046aea06e0121e" translate="yes" xml:space="preserve">
          <source>This type cannot have a well-defined size, because it needs to be arbitrarily large (since we would be able to nest &lt;code&gt;ListNode&lt;/code&gt;s to any depth). Specifically,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84f5f45f7092418ba53ffa588ed49cf6c55b3005" translate="yes" xml:space="preserve">
          <source>This type does not support transmission of an error other than that an error occurred. Any extra information must be arranged to be transmitted through some other means.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca06708cb31886f20e9999f83e4a96bd88513b09" translate="yes" xml:space="preserve">
          <source>This type has the same in-memory representation as a &lt;a href=&quot;../../primitive.bool&quot;&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ed5168f106b9ae49d6a5ac8c4fbf062da809a4c" translate="yes" xml:space="preserve">
          <source>This type has the same in-memory representation as a &lt;code&gt;*mut T&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bde0ba16d9d2a17d2da79db3c616fd2db5d4b738" translate="yes" xml:space="preserve">
          <source>This type has the same in-memory representation as the underlying integer type, &lt;a href=&quot;../../primitive.i16&quot;&gt;&lt;code&gt;i16&lt;/code&gt;&lt;/a&gt;. For more about the differences between atomic types and non-atomic types as well as information about the portability of this type, please see the &lt;a href=&quot;index&quot;&gt;module-level documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11fe8d9ef82cc58363e607b1900488902f96b062" translate="yes" xml:space="preserve">
          <source>This type has the same in-memory representation as the underlying integer type, &lt;a href=&quot;../../primitive.i32&quot;&gt;&lt;code&gt;i32&lt;/code&gt;&lt;/a&gt;. For more about the differences between atomic types and non-atomic types as well as information about the portability of this type, please see the &lt;a href=&quot;index&quot;&gt;module-level documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae2c41e53be3c451cd7fe9d715ded32f7f324930" translate="yes" xml:space="preserve">
          <source>This type has the same in-memory representation as the underlying integer type, &lt;a href=&quot;../../primitive.i64&quot;&gt;&lt;code&gt;i64&lt;/code&gt;&lt;/a&gt;. For more about the differences between atomic types and non-atomic types as well as information about the portability of this type, please see the &lt;a href=&quot;index&quot;&gt;module-level documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8709735902527f53136366bbc4da81e059b1cf29" translate="yes" xml:space="preserve">
          <source>This type has the same in-memory representation as the underlying integer type, &lt;a href=&quot;../../primitive.i8&quot;&gt;&lt;code&gt;i8&lt;/code&gt;&lt;/a&gt;. For more about the differences between atomic types and non-atomic types as well as information about the portability of this type, please see the &lt;a href=&quot;index&quot;&gt;module-level documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22a2662795b52aff8d9d5db4f32fbfd5a6eae45b" translate="yes" xml:space="preserve">
          <source>This type has the same in-memory representation as the underlying integer type, &lt;a href=&quot;../../primitive.isize&quot;&gt;&lt;code&gt;isize&lt;/code&gt;&lt;/a&gt;. For more about the differences between atomic types and non-atomic types as well as information about the portability of this type, please see the &lt;a href=&quot;index&quot;&gt;module-level documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0e9d5aecbbcb90f5394cd93afd041c8660e20d3" translate="yes" xml:space="preserve">
          <source>This type has the same in-memory representation as the underlying integer type, &lt;a href=&quot;../../primitive.u16&quot;&gt;&lt;code&gt;u16&lt;/code&gt;&lt;/a&gt;. For more about the differences between atomic types and non-atomic types as well as information about the portability of this type, please see the &lt;a href=&quot;index&quot;&gt;module-level documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2b9ce184354cce38ff31805f5b9e99cf85271c3" translate="yes" xml:space="preserve">
          <source>This type has the same in-memory representation as the underlying integer type, &lt;a href=&quot;../../primitive.u32&quot;&gt;&lt;code&gt;u32&lt;/code&gt;&lt;/a&gt;. For more about the differences between atomic types and non-atomic types as well as information about the portability of this type, please see the &lt;a href=&quot;index&quot;&gt;module-level documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f3b430d11ed80e34dede1d2fe612c5e93a3e75e" translate="yes" xml:space="preserve">
          <source>This type has the same in-memory representation as the underlying integer type, &lt;a href=&quot;../../primitive.u64&quot;&gt;&lt;code&gt;u64&lt;/code&gt;&lt;/a&gt;. For more about the differences between atomic types and non-atomic types as well as information about the portability of this type, please see the &lt;a href=&quot;index&quot;&gt;module-level documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da5885bb51df1018c63942e6cd581107a9d67b99" translate="yes" xml:space="preserve">
          <source>This type has the same in-memory representation as the underlying integer type, &lt;a href=&quot;../../primitive.u8&quot;&gt;&lt;code&gt;u8&lt;/code&gt;&lt;/a&gt;. For more about the differences between atomic types and non-atomic types as well as information about the portability of this type, please see the &lt;a href=&quot;index&quot;&gt;module-level documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1494d8fbdc9903b4f7f4ce3473fbf110556d56ce" translate="yes" xml:space="preserve">
          <source>This type has the same in-memory representation as the underlying integer type, &lt;a href=&quot;../../primitive.usize&quot;&gt;&lt;code&gt;usize&lt;/code&gt;&lt;/a&gt;. For more about the differences between atomic types and non-atomic types as well as information about the portability of this type, please see the &lt;a href=&quot;index&quot;&gt;module-level documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd773ba06290a2ef0eb43046e43b15b9753a1b01" translate="yes" xml:space="preserve">
          <source>This type implements the &lt;a href=&quot;trait.alloc&quot;&gt;&lt;code&gt;Alloc&lt;/code&gt;&lt;/a&gt; trait by forwarding calls to the allocator registered with the &lt;code&gt;#[global_allocator]&lt;/code&gt; attribute if there is one, or the &lt;code&gt;std&lt;/code&gt; crate&amp;rsquo;s default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1acd93eca07f0189a95b444e7590b0d811f50e31" translate="yes" xml:space="preserve">
          <source>This type implements the &lt;code&gt;GlobalAlloc&lt;/code&gt; trait and Rust programs by default work as if they had this definition:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="466a15ddbbbf930acad97c2c30afa51f3b95564c" translate="yes" xml:space="preserve">
          <source>This type is broadly used across &lt;a href=&quot;index&quot;&gt;&lt;code&gt;std::io&lt;/code&gt;&lt;/a&gt; for any operation which may produce an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37345f83ba0c67385672d5daf1593634da8686e6" translate="yes" xml:space="preserve">
          <source>This type is the error type for the &lt;a href=&quot;struct.string#method.from_utf16&quot;&gt;&lt;code&gt;from_utf16&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8498c071c2463be5580b4f49150396661778b8bc" translate="yes" xml:space="preserve">
          <source>This type is the error type for the &lt;a href=&quot;struct.string#method.from_utf8&quot;&gt;&lt;code&gt;from_utf8&lt;/code&gt;&lt;/a&gt; method on &lt;a href=&quot;struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;. It is designed in such a way to carefully avoid reallocations: the &lt;a href=&quot;struct.fromutf8error#method.into_bytes&quot;&gt;&lt;code&gt;into_bytes&lt;/code&gt;&lt;/a&gt; method will give back the byte vector that was used in the conversion attempt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63b84d2000b910b8457b4220e8938add88b701b5" translate="yes" xml:space="preserve">
          <source>This type of lock allows a number of readers or at most one writer at any point in time. The write portion of this lock typically allows modification of the underlying data (exclusive access) and the read portion of this lock typically allows for read-only access (shared access).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6101d6dc5e2fd547d5ca4f8075c490b739700a9" translate="yes" xml:space="preserve">
          <source>This type provides methods like &lt;a href=&quot;struct.pathbuf#method.push&quot;&gt;&lt;code&gt;push&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.pathbuf#method.set_extension&quot;&gt;&lt;code&gt;set_extension&lt;/code&gt;&lt;/a&gt; that mutate the path in place. It also implements &lt;a href=&quot;../ops/trait.deref&quot;&gt;&lt;code&gt;Deref&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;struct.path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt;, meaning that all methods on &lt;a href=&quot;struct.path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt; slices are available on &lt;code&gt;PathBuf&lt;/code&gt; values as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5c0f0dd2b187cb6784df147ee7001123c8936c0" translate="yes" xml:space="preserve">
          <source>This type represents a borrowed reference to a nul-terminated array of bytes. It can be constructed safely from a &lt;code&gt;&amp;amp;[&lt;/code&gt;&lt;a href=&quot;../primitive.u8&quot;&gt;&lt;code&gt;u8&lt;/code&gt;&lt;/a&gt;&lt;code&gt;]&lt;/code&gt; slice, or unsafely from a raw &lt;code&gt;*const c_char&lt;/code&gt;. It can then be converted to a Rust &lt;a href=&quot;../primitive.str&quot;&gt;&lt;code&gt;&amp;amp;str&lt;/code&gt;&lt;/a&gt; by performing UTF-8 validation, or into an owned &lt;a href=&quot;struct.cstring&quot;&gt;&lt;code&gt;CString&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e18df5bb8ad819c600cd4afb1d82afc59b7f998" translate="yes" xml:space="preserve">
          <source>This type represents a borrowed reference to a string in the operating system's preferred representation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b774085d693678b6b309fbc90af8e885fb4742c" translate="yes" xml:space="preserve">
          <source>This type represents the status code a process can return to its parent under normal termination.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b966cfbeebcefe7f0330e7e9f54f7098bf1152f" translate="yes" xml:space="preserve">
          <source>This type serves the purpose of being able to safely generate a C-compatible string from a Rust byte slice or vector. An instance of this type is a static guarantee that the underlying bytes contain no interior 0 bytes (&quot;nul characters&quot;) and that the final byte is 0 (&quot;nul terminator&quot;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d87337ad285058ac7367e471ff8622a41dfdd71" translate="yes" xml:space="preserve">
          <source>This type supports a number of operations for inspecting a path, including breaking the path into its components (separated by &lt;code&gt;/&lt;/code&gt; on Unix and by either &lt;code&gt;/&lt;/code&gt; or  on Windows), extracting the file name, determining whether the path is absolute, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f22ec26e83b1f093f0fa10a8ffd75ef588107911" translate="yes" xml:space="preserve">
          <source>This type will almost always be &lt;a href=&quot;../../primitive.f32&quot;&gt;&lt;code&gt;f32&lt;/code&gt;&lt;/a&gt;, which is guaranteed to be an &lt;a href=&quot;https://en.wikipedia.org/wiki/IEEE_754&quot;&gt;IEEE-754 single-precision float&lt;/a&gt; in Rust. That said, the standard technically only guarantees that it be a floating-point number, and it may have less precision than &lt;code&gt;f32&lt;/code&gt; or not follow the IEEE-754 standard at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b34eb94d33cfcd2b81be054dc12a48e0b5f8dc2f" translate="yes" xml:space="preserve">
          <source>This type will almost always be &lt;a href=&quot;../../primitive.f64&quot;&gt;&lt;code&gt;f64&lt;/code&gt;&lt;/a&gt;, which is guaranteed to be an &lt;a href=&quot;https://en.wikipedia.org/wiki/IEEE_754&quot;&gt;IEEE-754 double-precision float&lt;/a&gt; in Rust. That said, the standard technically only guarantees that it be a floating-point number with at least the precision of a &lt;a href=&quot;type.c_float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt;, and it may be &lt;code&gt;f32&lt;/code&gt; or something entirely different from the IEEE-754 standard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2713919b8810fb3f44c86782b09415ed3b59cda3" translate="yes" xml:space="preserve">
          <source>This type will almost always be &lt;a href=&quot;../../primitive.i16&quot;&gt;&lt;code&gt;i16&lt;/code&gt;&lt;/a&gt;, but may differ on some esoteric systems. The C standard technically only requires that this type be a signed integer with at least 16 bits; some systems may define it as &lt;code&gt;i32&lt;/code&gt;, for example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0d84326d8675408ac530de354cda2d1a8ac7eb3" translate="yes" xml:space="preserve">
          <source>This type will almost always be &lt;a href=&quot;../../primitive.i32&quot;&gt;&lt;code&gt;i32&lt;/code&gt;&lt;/a&gt;, but may differ on some esoteric systems. The C standard technically only requires that this type be a signed integer that is at least the size of a &lt;a href=&quot;type.c_short&quot;&gt;&lt;code&gt;short&lt;/code&gt;&lt;/a&gt;; some systems define it as an &lt;a href=&quot;../../primitive.i16&quot;&gt;&lt;code&gt;i16&lt;/code&gt;&lt;/a&gt;, for example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab581f0ea98e052030c778602ef0ca98c399648d" translate="yes" xml:space="preserve">
          <source>This type will almost always be &lt;a href=&quot;../../primitive.i64&quot;&gt;&lt;code&gt;i64&lt;/code&gt;&lt;/a&gt;, but may differ on some systems. The C standard technically only requires that this type be a signed integer that is at least 64 bits and at least the size of a &lt;a href=&quot;type.c_int&quot;&gt;&lt;code&gt;long&lt;/code&gt;&lt;/a&gt;, although in practice, no system would have a &lt;code&gt;long long&lt;/code&gt; that is not an &lt;code&gt;i64&lt;/code&gt;, as most systems do not have a standardised &lt;a href=&quot;../../primitive.i128&quot;&gt;&lt;code&gt;i128&lt;/code&gt;&lt;/a&gt; type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15b5edcf451c79ce2991144552b8f569664ab769" translate="yes" xml:space="preserve">
          <source>This type will almost always be &lt;a href=&quot;../../primitive.u16&quot;&gt;&lt;code&gt;u16&lt;/code&gt;&lt;/a&gt;, but may differ on some esoteric systems. The C standard technically only requires that this type be an unsigned integer with the same size as a &lt;a href=&quot;type.c_short&quot;&gt;&lt;code&gt;short&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ba1b7005ffb5ad84714cb0adcd9cce8dfd29a44" translate="yes" xml:space="preserve">
          <source>This type will almost always be &lt;a href=&quot;../../primitive.u32&quot;&gt;&lt;code&gt;u32&lt;/code&gt;&lt;/a&gt;, but may differ on some esoteric systems. The C standard technically only requires that this type be an unsigned integer with the same size as an &lt;a href=&quot;type.c_int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt;; some systems define it as a &lt;a href=&quot;../../primitive.u16&quot;&gt;&lt;code&gt;u16&lt;/code&gt;&lt;/a&gt;, for example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10f7763a2c07ba8b71ea9cbe73fe235f098f6f03" translate="yes" xml:space="preserve">
          <source>This type will almost always be &lt;a href=&quot;../../primitive.u64&quot;&gt;&lt;code&gt;u64&lt;/code&gt;&lt;/a&gt;, but may differ on some systems. The C standard technically only requires that this type be an unsigned integer with the size of a &lt;a href=&quot;type.c_longlong&quot;&gt;&lt;code&gt;long long&lt;/code&gt;&lt;/a&gt;, although in practice, no system would have a &lt;code&gt;long long&lt;/code&gt; that is not a &lt;code&gt;u64&lt;/code&gt;, as most systems do not have a standardised &lt;a href=&quot;../../primitive.u128&quot;&gt;&lt;code&gt;u128&lt;/code&gt;&lt;/a&gt; type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf97ad06e74edf68697dac1b4dcee83cfa2a22b5" translate="yes" xml:space="preserve">
          <source>This type will always be &lt;a href=&quot;../../primitive.i32&quot;&gt;&lt;code&gt;i32&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../primitive.i64&quot;&gt;&lt;code&gt;i64&lt;/code&gt;&lt;/a&gt;. Most notably, many Linux-based systems assume an &lt;code&gt;i64&lt;/code&gt;, but Windows assumes &lt;code&gt;i32&lt;/code&gt;. The C standard technically only requires that this type be a signed integer that is at least 32 bits and at least the size of an &lt;a href=&quot;type.c_int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt;, although in practice, no system would have a &lt;code&gt;long&lt;/code&gt; that is neither an &lt;code&gt;i32&lt;/code&gt; nor &lt;code&gt;i64&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7164487891e0a7833d4edf15c16beda44c3572d5" translate="yes" xml:space="preserve">
          <source>This type will always be &lt;a href=&quot;../../primitive.i8&quot;&gt;&lt;code&gt;i8&lt;/code&gt;&lt;/a&gt;, but is included for completeness. It is defined as being a signed integer the same size as a C &lt;a href=&quot;type.c_char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ffb84596c9e59eea63cf919456fbd81bc2d5347" translate="yes" xml:space="preserve">
          <source>This type will always be &lt;a href=&quot;../../primitive.u32&quot;&gt;&lt;code&gt;u32&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../primitive.u64&quot;&gt;&lt;code&gt;u64&lt;/code&gt;&lt;/a&gt;. Most notably, many Linux-based systems assume an &lt;code&gt;u64&lt;/code&gt;, but Windows assumes &lt;code&gt;u32&lt;/code&gt;. The C standard technically only requires that this type be an unsigned integer with the size of a &lt;a href=&quot;type.c_long&quot;&gt;&lt;code&gt;long&lt;/code&gt;&lt;/a&gt;, although in practice, no system would have a &lt;code&gt;ulong&lt;/code&gt; that is neither a &lt;code&gt;u32&lt;/code&gt; nor &lt;code&gt;u64&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="702c3c35c3eb36099eb087128d0090cf4cdc5cb9" translate="yes" xml:space="preserve">
          <source>This type will always be &lt;a href=&quot;../../primitive.u8&quot;&gt;&lt;code&gt;u8&lt;/code&gt;&lt;/a&gt;, but is included for completeness. It is defined as being an unsigned integer the same size as a C &lt;a href=&quot;type.c_char&quot;&gt;&lt;code&gt;char&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4424cbb3fbb90751454ec3bf9577dceb9d9a320d" translate="yes" xml:space="preserve">
          <source>This typedef is generally used to avoid writing out &lt;a href=&quot;struct.error&quot;&gt;&lt;code&gt;io::Error&lt;/code&gt;&lt;/a&gt; directly and is otherwise a direct mapping to &lt;a href=&quot;../result/enum.result&quot;&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9571d5615d4085a615ed7c5ad4cadc1ded956713" translate="yes" xml:space="preserve">
          <source>This typically means that an operation could only succeed if it read a particular number of bytes but only a smaller number of bytes could be read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="692f047748f56fd7b6dd085f2d1ee90a117e619a" translate="yes" xml:space="preserve">
          <source>This typically means that an operation could only succeed if it wrote a particular number of bytes but only a smaller number of bytes could be written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="066666922981580e3c6ec7b57246e05ce6d242d4" translate="yes" xml:space="preserve">
          <source>This usage of &lt;a href=&quot;enum.option&quot;&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/a&gt; to create safe nullable pointers is so common that Rust does special optimizations to make the representation of &lt;a href=&quot;enum.option&quot;&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;a href=&quot;../boxed/struct.box&quot;&gt;&lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; a single pointer. Optional pointers in Rust are stored as efficiently as any other pointer type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3473dac5d293883be110e74db63b95a407d1ea5c" translate="yes" xml:space="preserve">
          <source>This usage of &lt;code&gt;extern&lt;/code&gt; does not require &lt;code&gt;unsafe&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d52ccca3efa09c9ce1760baf0a04fa97e3aed552" translate="yes" xml:space="preserve">
          <source>This use of a &lt;code&gt;where&lt;/code&gt; clause is strange - a more common usage would look something like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ededb49250daf0db79bbb927c06d879d238521da" translate="yes" xml:space="preserve">
          <source>This value sets the time-to-live field that is used in every packet sent from this socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="413d9b4dc5521012c4ffcf2dbef4c140f61e2a52" translate="yes" xml:space="preserve">
          <source>This variant is the most common one, it represents references to files or directories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ad9c1ff17fcdcd8bc09eee76d183971a27c0cfe" translate="yes" xml:space="preserve">
          <source>This variant will be emitted when the parsing string has a value of zero, which would be illegal for non-zero types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0051a5a0c2153685b22e3e481253428438ae9b0d" translate="yes" xml:space="preserve">
          <source>This way, the lifetime of the &lt;code&gt;CString&lt;/code&gt; in &lt;code&gt;hello&lt;/code&gt; encompasses the lifetime of &lt;code&gt;ptr&lt;/code&gt; and the &lt;code&gt;unsafe&lt;/code&gt; block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c87576c37932e7e920719c7c3053295204953101" translate="yes" xml:space="preserve">
          <source>This will always &lt;a href=&quot;macro.panic&quot;&gt;&lt;code&gt;panic!&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c37af121800fff05f23ea7195ec86eae7b112d6" translate="yes" xml:space="preserve">
          <source>This will always &lt;a href=&quot;macro.panic&quot;&gt;panic!&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca9dc67930c6219a678b4690efb3c9a2b4b3cc3e" translate="yes" xml:space="preserve">
          <source>This will be a max-heap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fffbe8e22b797d8b6890d54d873414453d3490a" translate="yes" xml:space="preserve">
          <source>This will cause an error:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b06471f77c7403c58187c73c7a664a50663e032" translate="yes" xml:space="preserve">
          <source>This will commonly, but not always, be a &lt;code&gt;&amp;amp;'static str&lt;/code&gt; or &lt;a href=&quot;../string/struct.string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a8b17614cf7c240a7a1eb116da8eea5f59c7b71" translate="yes" xml:space="preserve">
          <source>This will compile, because it has the constraint on the type parameter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3520fed49c822ab60288ef2f8f669d15b4a41e6f" translate="yes" xml:space="preserve">
          <source>This will compile:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49cc821a81b4f339dbb259efc2d82e6ee470759f" translate="yes" xml:space="preserve">
          <source>This will create a &lt;a href=&quot;../primitive.str&quot;&gt;&lt;code&gt;&amp;amp;str&lt;/code&gt;&lt;/a&gt; from the &lt;code&gt;String&lt;/code&gt; and pass it in. This conversion is very inexpensive, and so generally, functions will accept &lt;a href=&quot;../primitive.str&quot;&gt;&lt;code&gt;&amp;amp;str&lt;/code&gt;&lt;/a&gt;s as arguments unless they need a &lt;code&gt;String&lt;/code&gt; for some specific reason.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b5cc9b9f228f1bae8ee73a71afeed4d549dd793" translate="yes" xml:space="preserve">
          <source>This will create a thread using default parameters of &lt;a href=&quot;struct.builder&quot;&gt;&lt;code&gt;Builder&lt;/code&gt;&lt;/a&gt;, if you want to specify the stack size or the name of the thread, use this API instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e391cc107c46641450ffa0654fcfb8cbca70a73b" translate="yes" xml:space="preserve">
          <source>This will decrement the strong reference count. If the strong reference count reaches zero then the only other references (if any) are &lt;a href=&quot;../rc/struct.weak&quot;&gt;&lt;code&gt;Weak&lt;/code&gt;&lt;/a&gt;, so we &lt;code&gt;drop&lt;/code&gt; the inner value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97b7f84f70f9d3f5d6303968924e2733780bc78b" translate="yes" xml:space="preserve">
          <source>This will decrement the strong reference count. If the strong reference count reaches zero then the only other references (if any) are &lt;a href=&quot;../sync/struct.weak&quot;&gt;&lt;code&gt;Weak&lt;/code&gt;&lt;/a&gt;, so we &lt;code&gt;drop&lt;/code&gt; the inner value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b917396cbcb63b72ec008aadc499d642c7abbf61" translate="yes" xml:space="preserve">
          <source>This will decrement the strong reference count. If the strong reference count reaches zero then the only other references (if any) are &lt;a href=&quot;struct.weak&quot;&gt;&lt;code&gt;Weak&lt;/code&gt;&lt;/a&gt;, so we &lt;code&gt;drop&lt;/code&gt; the inner value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e9819c7b2177172935ef1092ecc4f74eaf1578f" translate="yes" xml:space="preserve">
          <source>This will drop any excess capacity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="354a015dbdb2ab35ae4e0b061d1f50f5025f7cbe" translate="yes" xml:space="preserve">
          <source>This will escape characters with the Rust syntax of the form &lt;code&gt;\u{NNNNNN}&lt;/code&gt; where &lt;code&gt;NNNNNN&lt;/code&gt; is a hexadecimal representation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c51882eef9b6927fb20dc2b079d5f33d822ffcef" translate="yes" xml:space="preserve">
          <source>This will escape the characters similar to the &lt;code&gt;Debug&lt;/code&gt; implementations of &lt;code&gt;str&lt;/code&gt; or &lt;code&gt;char&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7463a3fbad059d7822b7a64865f64ec71f56ca6c" translate="yes" xml:space="preserve">
          <source>This will fail because the compiler does not know which instance of &lt;code&gt;Foo&lt;/code&gt; to call &lt;code&gt;bar&lt;/code&gt; on. Change &lt;code&gt;Foo::bar()&lt;/code&gt; to &lt;code&gt;Foo::&amp;lt;T&amp;gt;::bar()&lt;/code&gt; to resolve the error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b95565727f175f666e1822f4733ae91ef6a1780e" translate="yes" xml:space="preserve">
          <source>This will fail to compile because we cannot implement a trait for a type if both the trait and the type are not defined by the current crate. This is due to Rust's orphaning rules. To bypass this, you can implement &lt;a href=&quot;trait.into&quot;&gt;&lt;code&gt;Into&lt;/code&gt;&lt;/a&gt; directly:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c41f14d1e2c5310aaa0b927129f701a7031c03a" translate="yes" xml:space="preserve">
          <source>This will invoke the &lt;a href=&quot;macro.panic&quot;&gt;&lt;code&gt;panic!&lt;/code&gt;&lt;/a&gt; macro if the provided expression cannot be evaluated to &lt;code&gt;true&lt;/code&gt; at runtime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2deb5f847f234caa59a2e70f4ab65edaeb2fdead" translate="yes" xml:space="preserve">
          <source>This will lazily initialize the value if this thread has not referenced this key yet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2be746d77ee47101c5a961aeebfbec50b6101d49" translate="yes" xml:space="preserve">
          <source>This will lazily initialize the value if this thread has not referenced this key yet. If the key has been destroyed (which may happen if this is called in a destructor), this function will return an &lt;a href=&quot;struct.accesserror&quot;&gt;&lt;code&gt;AccessError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b457d7ac05dde73ffae7dfa5283d452dba90a68" translate="yes" xml:space="preserve">
          <source>This will not print any values, as we only created an iterator, rather than using it. The compiler will warn us about this kind of behavior:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7884f03c74d608aa53fe96a0fe19b6f01fc64a4e" translate="yes" xml:space="preserve">
          <source>This will not work if the new name is on a different mount point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29502fa64160996ff78f02e55cbb4b83b39e3b0d" translate="yes" xml:space="preserve">
          <source>This will not:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5b85ab1e962bdcb10ff35cb96c42d807c436122" translate="yes" xml:space="preserve">
          <source>This will output the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01e646d50274ee113a75cb82fc9f837874518988" translate="yes" xml:space="preserve">
          <source>This will override the &lt;code&gt;read&lt;/code&gt;, &lt;code&gt;write&lt;/code&gt;, and &lt;code&gt;append&lt;/code&gt; flags on the &lt;code&gt;OpenOptions&lt;/code&gt; structure. This method provides fine-grained control over the permissions to read, write and append data, attributes (like hidden and system), and extended attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="475997c398cd5b2921c0cb8cd3f062a1e5e787e7" translate="yes" xml:space="preserve">
          <source>This will print &quot;('a', 1), ('b', 2), ('c', 3)&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a5f8c78def77453ab00074a3cd30ff4dd27218b" translate="yes" xml:space="preserve">
          <source>This will print &lt;code&gt;1&lt;/code&gt; through &lt;code&gt;5&lt;/code&gt;, each on their own line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45cc5d4168a6948db8686b2c0a8d37fbb64175cc" translate="yes" xml:space="preserve">
          <source>This will print &lt;code&gt;Cons(1, Cons(2, Nil))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa3cd6bbcdf4b75c4bbd0f80ed7b9518ac88ecb8" translate="yes" xml:space="preserve">
          <source>This will print the numbers &lt;code&gt;0&lt;/code&gt; through &lt;code&gt;4&lt;/code&gt;, each on their own line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a40fac0ea22a56e98579c9cc97554e4f4a65b5bb" translate="yes" xml:space="preserve">
          <source>This will print the numbers one through five, each on their own line. But you'll notice something here: we never called anything on our vector to produce an iterator. What gives?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e363eb5c9d1e189e7877f05521713cb961f9afe" translate="yes" xml:space="preserve">
          <source>This will print:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3f9d6eebc7d0a9c3006485e1bf2fe9250c18991" translate="yes" xml:space="preserve">
          <source>This will result in &lt;code&gt;read&lt;/code&gt;, &lt;code&gt;write&lt;/code&gt;, &lt;code&gt;recv&lt;/code&gt; and &lt;code&gt;send&lt;/code&gt; operations becoming nonblocking, i.e., immediately returning from their calls. If the IO operation is successful, &lt;code&gt;Ok&lt;/code&gt; is returned and no further action is required. If the IO operation could not be completed and needs to be retried, an error with kind &lt;a href=&quot;../io/enum.errorkind#variant.WouldBlock&quot;&gt;&lt;code&gt;io::ErrorKind::WouldBlock&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b3da21af1f8f50bfb5fb08b425cfbfeb0c3196a" translate="yes" xml:space="preserve">
          <source>This will result in &lt;code&gt;recv&lt;/code&gt;, &lt;code&gt;recv_from&lt;/code&gt;, &lt;code&gt;send&lt;/code&gt;, and &lt;code&gt;send_to&lt;/code&gt; operations becoming nonblocking, i.e., immediately returning from their calls. If the IO operation is successful, &lt;code&gt;Ok&lt;/code&gt; is returned and no further action is required. If the IO operation could not be completed and needs to be retried, an error with kind &lt;a href=&quot;../io/enum.errorkind#variant.WouldBlock&quot;&gt;&lt;code&gt;io::ErrorKind::WouldBlock&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62e7ab507f523fe704d7f615781e7105b958a139" translate="yes" xml:space="preserve">
          <source>This will result in the &lt;code&gt;accept&lt;/code&gt; operation becoming nonblocking, i.e., immediately returning from their calls. If the IO operation is successful, &lt;code&gt;Ok&lt;/code&gt; is returned and no further action is required. If the IO operation could not be completed and needs to be retried, an error with kind &lt;a href=&quot;../io/enum.errorkind#variant.WouldBlock&quot;&gt;&lt;code&gt;io::ErrorKind::WouldBlock&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b55e73be7a2382bca6297d35304f77d90844f6fa" translate="yes" xml:space="preserve">
          <source>This will retrieve the stored error in the underlying socket, clearing the field in the process. This can be useful for checking errors between calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f194e7c7453fbebb97c4d612baa72decde0dd60" translate="yes" xml:space="preserve">
          <source>This will return an error when the IP version of the local socket does not match that returned from &lt;a href=&quot;trait.tosocketaddrs&quot;&gt;&lt;code&gt;ToSocketAddrs&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc0cdcc30572aec7d1df1cbb47d079cf5a14ac66" translate="yes" xml:space="preserve">
          <source>This will succeed even if there are outstanding weak references.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bd1f4c0ae47dc79d8ec8c7bba4ba6b5d8664eba" translate="yes" xml:space="preserve">
          <source>This will use &lt;code&gt;clone&lt;/code&gt; to duplicate an expression, so one should be careful using this with types having a nonstandard &lt;code&gt;Clone&lt;/code&gt; implementation. For example, &lt;code&gt;vec![Rc::new(1); 5]&lt;/code&gt; will create a vector of five references to the same boxed integer value, not five references pointing to independently boxed integers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1af0f8715542d97c1e40ad188906242d9ebb10f7" translate="yes" xml:space="preserve">
          <source>This works because &lt;code&gt;Box&lt;/code&gt; is a pointer, so its size is well-known.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6ae7145b95212826784b081e816d005693796fd" translate="yes" xml:space="preserve">
          <source>This works differently from defining a struct that uses a generic type parameter with trait bounds. A generic type parameter can only be substituted with one concrete type at a time, whereas trait objects allow for multiple concrete types to fill in for the trait object at runtime. For example, we could have defined the &lt;code&gt;Screen&lt;/code&gt; struct using a generic type and a trait bound as in Listing 17-6:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a99f3af5ecd17821d147ce27f764af7ca400396e" translate="yes" xml:space="preserve">
          <source>This works fine, but when the method gains generic parameters, we can have a problem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d71531129bdd4b29a09ed683d862d9540e2e5d1c" translate="yes" xml:space="preserve">
          <source>This works just fine and explicitly produces the behavior shown in Figure 4-3, where the heap data &lt;em&gt;does&lt;/em&gt; get copied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfbfb994099b13008a48f4d00df577d26e30661c" translate="yes" xml:space="preserve">
          <source>This works without any problems. Ownership is moved out, and nothing is deallocated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c438e4eca96ad10f658e6fd464bdd00bbab9e0b" translate="yes" xml:space="preserve">
          <source>This wrapper helps with explicitly documenting the drop order dependencies between fields of the type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77c94458816b78e926120564c533b185a38f9981" translate="yes" xml:space="preserve">
          <source>This wrapper is 0-cost.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8adf6fbbeb84fc23d69997d38f588cc8535a0a6a" translate="yes" xml:space="preserve">
          <source>Though they both have scary names, &lt;code&gt;PhantomData&lt;/code&gt; and 'phantom types' are related, but not identical. A phantom type parameter is simply a type parameter which is never used. In Rust, this often causes the compiler to complain, and the solution is to add a &quot;dummy&quot; use by way of &lt;code&gt;PhantomData&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="394004c26aaecc036ffcf91c8fc18935b18646a0" translate="yes" xml:space="preserve">
          <source>Though this example seems innocuous and easy to solve, the problem becomes clear when it encounters functions which consume the value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68fc8c5fcce31dacdf37236f648493191d2504be" translate="yes" xml:space="preserve">
          <source>Though this method is safe for any two pointers, note that its result will be mostly useless if the two pointers aren't into the same allocated object, for example if they point to two different local variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7863f7503e5377891a3b7452c7d6cc377d443fe7" translate="yes" xml:space="preserve">
          <source>Thread</source>
          <target state="translated">Thread</target>
        </trans-unit>
        <trans-unit id="b66b6cbe04365929e922b75680e179e46127f3a3" translate="yes" xml:space="preserve">
          <source>Thread Safety</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8acbe8abc881f5530528aa5ba52eb0a3d5f4e21c" translate="yes" xml:space="preserve">
          <source>Thread factory, which can be used in order to configure the properties of a new thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f259cba637903dc7da0506c4d921b66c4b2c1d2" translate="yes" xml:space="preserve">
          <source>Thread with a specified name:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccd9cecfbe050ef8f7199536919145c98a9ee01e" translate="yes" xml:space="preserve">
          <source>Thread-local storage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="031ccc205829651d22cb916d91b65f0a8f208375" translate="yes" xml:space="preserve">
          <source>Thread::borrow</source>
          <target state="translated">Thread::borrow</target>
        </trans-unit>
        <trans-unit id="c95c792ba6b184afddca7a8e36aefd1fbf1d6ade" translate="yes" xml:space="preserve">
          <source>Thread::borrow_mut</source>
          <target state="translated">Thread::borrow_mut</target>
        </trans-unit>
        <trans-unit id="dbb6daabaec761c7c46cdca4426de7d2af20b09f" translate="yes" xml:space="preserve">
          <source>Thread::clone</source>
          <target state="translated">Thread::clone</target>
        </trans-unit>
        <trans-unit id="e27a758e7d203684411b93372f7af767f3888a92" translate="yes" xml:space="preserve">
          <source>Thread::clone_from</source>
          <target state="translated">Thread::clone_from</target>
        </trans-unit>
        <trans-unit id="21aa2dd81c0fa05128232b310f0bc9892cddef0b" translate="yes" xml:space="preserve">
          <source>Thread::clone_into</source>
          <target state="translated">Thread::clone_into</target>
        </trans-unit>
        <trans-unit id="070b95410e1e4362fb02748c2208a536c3a47c62" translate="yes" xml:space="preserve">
          <source>Thread::fmt</source>
          <target state="translated">Thread::fmt</target>
        </trans-unit>
        <trans-unit id="15bec62911f03b003cb69d406b3848ca01770f8f" translate="yes" xml:space="preserve">
          <source>Thread::from</source>
          <target state="translated">Thread::from</target>
        </trans-unit>
        <trans-unit id="4a91eeba81f613beaaf6029aae0e32dad80d38b8" translate="yes" xml:space="preserve">
          <source>Thread::id</source>
          <target state="translated">Thread::id</target>
        </trans-unit>
        <trans-unit id="b2a4ffaaac236ade773000faaa7bef3c1f0cc8f6" translate="yes" xml:space="preserve">
          <source>Thread::into</source>
          <target state="translated">Thread::into</target>
        </trans-unit>
        <trans-unit id="344f7d7a1faf3f99cb05399e695391adc35f7d18" translate="yes" xml:space="preserve">
          <source>Thread::name</source>
          <target state="translated">Thread::name</target>
        </trans-unit>
        <trans-unit id="2dcbcae4f337ba144bfa61f602dbf53a215ffbaa" translate="yes" xml:space="preserve">
          <source>Thread::to_owned</source>
          <target state="translated">Thread::to_owned</target>
        </trans-unit>
        <trans-unit id="08e8a562777dded639d27f7f44cfadcf3bf00a5e" translate="yes" xml:space="preserve">
          <source>Thread::try_from</source>
          <target state="translated">Thread::try_from</target>
        </trans-unit>
        <trans-unit id="ea003eda575d811cf577619ef02836592885180a" translate="yes" xml:space="preserve">
          <source>Thread::try_into</source>
          <target state="translated">Thread::try_into</target>
        </trans-unit>
        <trans-unit id="ee3875fc112ad5bc121f3e391fcecb3da4daa377" translate="yes" xml:space="preserve">
          <source>Thread::type_id</source>
          <target state="translated">Thread::type_id</target>
        </trans-unit>
        <trans-unit id="a2b67a0f80271fce8e8b3bd5ec25f2445ebea8c7" translate="yes" xml:space="preserve">
          <source>Thread::unpark</source>
          <target state="translated">Thread::unpark</target>
        </trans-unit>
        <trans-unit id="cd1b87b64abdd5b00fbed5a0cf0c46e8cabde3e0" translate="yes" xml:space="preserve">
          <source>ThreadId</source>
          <target state="translated">ThreadId</target>
        </trans-unit>
        <trans-unit id="e1f6247a7eef6633e4e5d83608be9b3187e0c969" translate="yes" xml:space="preserve">
          <source>ThreadId::borrow</source>
          <target state="translated">ThreadId::borrow</target>
        </trans-unit>
        <trans-unit id="22f5c0c99a3c51f5db8e51f093d172c44439f9bc" translate="yes" xml:space="preserve">
          <source>ThreadId::borrow_mut</source>
          <target state="translated">ThreadId::borrow_mut</target>
        </trans-unit>
        <trans-unit id="f272ac73f50e66007497d727840b4334ee1f128b" translate="yes" xml:space="preserve">
          <source>ThreadId::clone</source>
          <target state="translated">ThreadId::clone</target>
        </trans-unit>
        <trans-unit id="6c35d53945f00e081a8257913c3ad292495b0c89" translate="yes" xml:space="preserve">
          <source>ThreadId::clone_from</source>
          <target state="translated">ThreadId::clone_from</target>
        </trans-unit>
        <trans-unit id="9abe12a7685c82abc8d5bcbb6509a690fccefb0b" translate="yes" xml:space="preserve">
          <source>ThreadId::clone_into</source>
          <target state="translated">ThreadId::clone_into</target>
        </trans-unit>
        <trans-unit id="1fcd1d752fe2d53f1b3acff5f74fcaa56fbea5a4" translate="yes" xml:space="preserve">
          <source>ThreadId::eq</source>
          <target state="translated">ThreadId::eq</target>
        </trans-unit>
        <trans-unit id="02c70e2223708a5777dae53420e0c974498720e0" translate="yes" xml:space="preserve">
          <source>ThreadId::fmt</source>
          <target state="translated">ThreadId::fmt</target>
        </trans-unit>
        <trans-unit id="b838b903c39a24240409358be89ed6329a9df09a" translate="yes" xml:space="preserve">
          <source>ThreadId::from</source>
          <target state="translated">ThreadId::from</target>
        </trans-unit>
        <trans-unit id="ddc023441f52408bece6bf2ff774b50209750066" translate="yes" xml:space="preserve">
          <source>ThreadId::hash</source>
          <target state="translated">ThreadId::hash</target>
        </trans-unit>
        <trans-unit id="8244a05f09ebefd9016fbce0f8394db6f762584b" translate="yes" xml:space="preserve">
          <source>ThreadId::hash_slice</source>
          <target state="translated">ThreadId::hash_slice</target>
        </trans-unit>
        <trans-unit id="fd5bfcfa29d7d00b83774a3201acbc0e51fa4872" translate="yes" xml:space="preserve">
          <source>ThreadId::into</source>
          <target state="translated">ThreadId::into</target>
        </trans-unit>
        <trans-unit id="a87f4470467c3e753de867438c3b5d2edf68e527" translate="yes" xml:space="preserve">
          <source>ThreadId::ne</source>
          <target state="translated">ThreadId::ne</target>
        </trans-unit>
        <trans-unit id="3cd41ae993fc3fddaa9fb843d50a8938bb01dd02" translate="yes" xml:space="preserve">
          <source>ThreadId::to_owned</source>
          <target state="translated">ThreadId::to_owned</target>
        </trans-unit>
        <trans-unit id="c7ce06f7b4875caccd8b2ef7310bb3589387aaa7" translate="yes" xml:space="preserve">
          <source>ThreadId::try_from</source>
          <target state="translated">ThreadId::try_from</target>
        </trans-unit>
        <trans-unit id="1723d15638b0712b0610f447b496de925bf9fce1" translate="yes" xml:space="preserve">
          <source>ThreadId::try_into</source>
          <target state="translated">ThreadId::try_into</target>
        </trans-unit>
        <trans-unit id="586fd641683540c80a212ba3dd698b0a2d8e64c3" translate="yes" xml:space="preserve">
          <source>ThreadId::type_id</source>
          <target state="translated">ThreadId::type_id</target>
        </trans-unit>
        <trans-unit id="c8f829eec28b00e160b939476f6112a322b89854" translate="yes" xml:space="preserve">
          <source>Threads are able to have associated names for identification purposes. By default, spawned threads are unnamed. To specify a name for a thread, build the thread with &lt;a href=&quot;struct.builder&quot;&gt;&lt;code&gt;Builder&lt;/code&gt;&lt;/a&gt; and pass the desired thread name to &lt;a href=&quot;struct.builder#method.name&quot;&gt;&lt;code&gt;Builder::name&lt;/code&gt;&lt;/a&gt;. To retrieve the thread name from within the thread, use &lt;a href=&quot;struct.thread#method.name&quot;&gt;&lt;code&gt;Thread::name&lt;/code&gt;&lt;/a&gt;. A couple examples of where the name of a thread gets used:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fac19ffa706cd7f7c61cd4298da14db7d3225341" translate="yes" xml:space="preserve">
          <source>Threads are represented via the &lt;a href=&quot;struct.thread&quot;&gt;&lt;code&gt;Thread&lt;/code&gt;&lt;/a&gt; type, which you can get in one of two ways:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfac2e4a30b24c7a0b51fc7ce730d2b041ad7fac" translate="yes" xml:space="preserve">
          <source>Threads are represented via the &lt;code&gt;Thread&lt;/code&gt; type, which you can get in one of two ways:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61ca9f4a8a357e814dec07995e4960f9fb1789c1" translate="yes" xml:space="preserve">
          <source>Threads by default have no name specified:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="968a06f03211a8e28589507e83ecbad68bacd321" translate="yes" xml:space="preserve">
          <source>Three examples of &lt;code&gt;extern crate&lt;/code&gt; declarations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adf3f084c350f9e4e1af9b596fea76609465c5c2" translate="yes" xml:space="preserve">
          <source>Throughout the book, you&amp;rsquo;ve seen examples of many kinds of patterns. In this section, we gather all the syntax valid in patterns and discuss why you might want to use each one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60bf7601d61de03ae0783bd8d23bcd9c972360eb" translate="yes" xml:space="preserve">
          <source>Throughout the documentation, we will follow a few conventions. For all operations, the collection's size is denoted by n. If another collection is involved in the operation, it contains m elements. Operations which have an &lt;em&gt;amortized&lt;/em&gt; cost are suffixed with a &lt;code&gt;*&lt;/code&gt;. Operations with an &lt;em&gt;expected&lt;/em&gt; cost are suffixed with a &lt;code&gt;~&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="238f30330684e8f9c133d5faa32478b32bb7092d" translate="yes" xml:space="preserve">
          <source>Throughout this book, we&amp;rsquo;ve used &lt;code&gt;let&lt;/code&gt; like this hundreds of times, and although you might not have realized it, you were using patterns! More formally, a &lt;code&gt;let&lt;/code&gt; statement looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b79edbe5b3429757c6a6c5658f9e500a2a9f5f8" translate="yes" xml:space="preserve">
          <source>Thus the pattern of &lt;code&gt;yield&lt;/code&gt;ing after a failed poll is rather common when implementing low-level shared resources or synchronization primitives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="821dfcf79b1432754988865d9447fbfdba546e04" translate="yes" xml:space="preserve">
          <source>Thus, &lt;code&gt;ref&lt;/code&gt; is not something that is being matched against. Its objective is exclusively to make the matched binding a reference, instead of potentially copying or moving what was matched.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbe716d48d812e780f5d0c025cd7d8e8d137e139" translate="yes" xml:space="preserve">
          <source>Thus:</source>
          <target state="translated">Thus:</target>
        </trans-unit>
        <trans-unit id="667c88e4323d998577ae614b3d0f0d63105deed4" translate="yes" xml:space="preserve">
          <source>Time complexity</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87e54a385b9de69cf35ac4ab359d69ed9aa1950a" translate="yes" xml:space="preserve">
          <source>To &lt;code id=&quot;to-panic-or-not-to-panic&quot;&gt;panic!&lt;/code&gt; or Not to &lt;code&gt;panic!&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c0ba38264d0a297ae9df50179b24027837bbba6" translate="yes" xml:space="preserve">
          <source>To add &lt;code&gt;Millimeters&lt;/code&gt; and &lt;code&gt;Meters&lt;/code&gt;, we specify &lt;code&gt;impl Add&amp;lt;Meters&amp;gt;&lt;/code&gt; to set the value of the &lt;code&gt;RHS&lt;/code&gt; type parameter instead of using the default of &lt;code&gt;Self&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48e27f28761495c993b1d146a55214b33393a503" translate="yes" xml:space="preserve">
          <source>To allow customization in specific cases most users won&amp;rsquo;t need</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1d5c30e2acf4bd68628daf0a08fcdb7d03b4380" translate="yes" xml:space="preserve">
          <source>To assist with proper design, the following scenarios are explicitly declared legal for single-threaded code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ff5f80d30f1f493faf134bdcac7192bc4fe0c89" translate="yes" xml:space="preserve">
          <source>To avoid a memory leak the pointer must be converted back to an &lt;code&gt;Arc&lt;/code&gt; using &lt;a href=&quot;struct.arc#method.from_raw&quot;&gt;&lt;code&gt;Arc::from_raw&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1e40b418899dc58e251a0e3e3662f5034b84fa8" translate="yes" xml:space="preserve">
          <source>To avoid a memory leak the pointer must be converted back to an &lt;code&gt;Rc&lt;/code&gt; using &lt;a href=&quot;struct.rc#method.from_raw&quot;&gt;&lt;code&gt;Rc::from_raw&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a5ee855a608ecd864fa2e7b73853f23dfbb067b" translate="yes" xml:space="preserve">
          <source>To avoid creating &lt;code&gt;&amp;amp;mut [T]&lt;/code&gt; references that alias, the returned slice borrows its lifetime from the iterator the method is applied on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffa0cd99296c4663ce93793ddad7c9407847a5e2" translate="yes" xml:space="preserve">
          <source>To avoid creating &lt;code&gt;&amp;amp;mut&lt;/code&gt; references that alias, this is forced to consume the iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aefc821eaa401be8625ea8100fecfc992fdeed8" translate="yes" xml:space="preserve">
          <source>To avoid having &lt;code&gt;common&lt;/code&gt; appear in the test output, instead of creating &lt;em&gt;tests/common.rs&lt;/em&gt;, we&amp;rsquo;ll create &lt;em&gt;tests/common/mod.rs&lt;/em&gt;. This is an alternate naming convention that Rust also understands. Naming the file this way tells Rust not to treat the &lt;code&gt;common&lt;/code&gt; module as an integration test file. When we move the &lt;code&gt;setup&lt;/code&gt; function code into &lt;em&gt;tests/common/mod.rs&lt;/em&gt; and delete the &lt;em&gt;tests/common.rs&lt;/em&gt; file, the section in the test output will no longer appear. Files in subdirectories of the &lt;em&gt;tests&lt;/em&gt; directory don&amp;rsquo;t get compiled as separate crates or have sections in the test output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97ceede3cc5738536ea015edb67ed85c3d3dcd2e" translate="yes" xml:space="preserve">
          <source>To avoid this error, you have to keep only one of them and remove the others. So let's take our example and fix it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a30b99a191595831b8cb7e0383bc895012a3666a" translate="yes" xml:space="preserve">
          <source>To avoid this kind of error, ensure that at least one local type is referenced by the &lt;code&gt;impl&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a83579bf275c61511e259b0f6a5393712638d88c" translate="yes" xml:space="preserve">
          <source>To avoid those issues, you have to make the types match correctly. So we can fix the previous examples like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cca79e59af2d0e450f9f7893d8b74973a17a0c1" translate="yes" xml:space="preserve">
          <source>To be able to index into a type it needs to implement the &lt;code&gt;std::ops::Index&lt;/code&gt; trait. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0c4569eca23f12e74ce8e43ea0b16ae30221104" translate="yes" xml:space="preserve">
          <source>To be clear: most features will be available on all editions. Developers using any Rust edition will continue to see improvements as new stable releases are made. However, in some cases, mainly when new keywords are added, some new features might only be available in later editions. You will need to switch editions if you want to take advantage of such features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28519d7825ab9ef768276a220fcc5248c6cfd08d" translate="yes" xml:space="preserve">
          <source>To be valid, a matcher must meet the following three invariants. The definitions of FIRST and FOLLOW are described later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d27f02149ea4da378573490ec467ba6b8b5c842f" translate="yes" xml:space="preserve">
          <source>To better understand why we need two separate loops, imagine a scenario with two workers. If we used a single loop to iterate through each worker, on the first iteration a terminate message would be sent down the channel and &lt;code&gt;join&lt;/code&gt; called on the first worker&amp;rsquo;s thread. If that first worker was busy processing a request at that moment, the second worker would pick up the terminate message from the channel and shut down. We would be left waiting on the first worker to shut down, but it never would because the second thread picked up the terminate message. Deadlock!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a92bd1b796549d070a95e516f74d8da028284983" translate="yes" xml:space="preserve">
          <source>To bind the matched value of a pattern to a variable, use the syntax &lt;code&gt;variable @ subpattern&lt;/code&gt;. For example, the following binds the value 2 to &lt;code&gt;e&lt;/code&gt; (not the entire range: the range here is a range subpattern).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b830c9413c38579d4ef7795bcf7bbde269208939" translate="yes" xml:space="preserve">
          <source>To build or modify paths, use &lt;a href=&quot;struct.pathbuf&quot;&gt;&lt;code&gt;PathBuf&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a716f5c06d1b56904d9c9ecdfaef8a89e71a7435" translate="yes" xml:space="preserve">
          <source>To calculate the value of &lt;code&gt;prediction&lt;/code&gt;, this code iterates through each of the 12 values in &lt;code&gt;coefficients&lt;/code&gt; and uses the &lt;code&gt;zip&lt;/code&gt; method to pair the coefficient values with the previous 12 values in &lt;code&gt;buffer&lt;/code&gt;. Then, for each pair, we multiply the values together, sum all the results, and shift the bits in the sum &lt;code&gt;qlp_shift&lt;/code&gt; bits to the right.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1e36c60ac0b0cf3c0b11863470e32d28a059d98" translate="yes" xml:space="preserve">
          <source>To call the &lt;code&gt;fly&lt;/code&gt; methods from either the &lt;code&gt;Pilot&lt;/code&gt; trait or the &lt;code&gt;Wizard&lt;/code&gt; trait, we need to use more explicit syntax to specify which &lt;code&gt;fly&lt;/code&gt; method we mean. Listing 19-18 demonstrates this syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c07c5eaca75954c044b220e0d9378c6ce45b1a4" translate="yes" xml:space="preserve">
          <source>To call this associated function, we use the &lt;code&gt;::&lt;/code&gt; syntax with the struct name; &lt;code&gt;let sq = Rectangle::square(3);&lt;/code&gt; is an example. This function is namespaced by the struct: the &lt;code&gt;::&lt;/code&gt; syntax is used for both associated functions and namespaces created by modules. We&amp;rsquo;ll discuss modules in Chapter 7.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="191c93d8beeacd6897f106d1c47af3f257c7dd5f" translate="yes" xml:space="preserve">
          <source>To call this code with only those types that implement the &lt;code&gt;Copy&lt;/code&gt; trait, we can add &lt;code&gt;Copy&lt;/code&gt; to the trait bounds of &lt;code&gt;T&lt;/code&gt;! Listing 10-15 shows the complete code of a generic &lt;code&gt;largest&lt;/code&gt; function that will compile as long as the types of the values in the slice that we pass into the function implement the &lt;code&gt;PartialOrd&lt;/code&gt;&lt;em&gt;and&lt;/em&gt;&lt;code&gt;Copy&lt;/code&gt; traits, like &lt;code&gt;i32&lt;/code&gt; and &lt;code&gt;char&lt;/code&gt; do.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ae7caef9479d77c77a3d3a0a7f430defd27a454" translate="yes" xml:space="preserve">
          <source>To change the value that the mutable reference refers to, we have to use the dereference operator (&lt;code&gt;*&lt;/code&gt;) to get to the value in &lt;code&gt;i&lt;/code&gt; before we can use the &lt;code&gt;+=&lt;/code&gt; operator. We&amp;rsquo;ll talk more about the dereference operator in the &lt;a href=&quot;ch15-02-deref#following-the-pointer-to-the-value-with-the-dereference-operator&quot;&gt;&amp;ldquo;Following the Pointer to the Value with the Dereference Operator&amp;rdquo;&lt;/a&gt; section of Chapter 15.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff93ea5d521caed491ca6edf931b71effa3ca726" translate="yes" xml:space="preserve">
          <source>To check whether you have Rust installed correctly, open a shell and enter this line:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b81a5a29868dab97f44f48c2bd716ec3edc16d7e" translate="yes" xml:space="preserve">
          <source>To combine &lt;code&gt;repr(transparent)&lt;/code&gt; with type parameters, &lt;code&gt;PhantomData&lt;/code&gt; may be useful:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac3f03b22205947cc54e2019b2f0993969841a80" translate="yes" xml:space="preserve">
          <source>To confuse things further, &lt;a href=&quot;https://encoding.spec.whatwg.org/&quot;&gt;on the Web&lt;/a&gt;&lt;code&gt;ascii&lt;/code&gt;, &lt;code&gt;iso-8859-1&lt;/code&gt;, and &lt;code&gt;windows-1252&lt;/code&gt; are all aliases for a superset of Windows-1252 that fills the remaining blanks with corresponding C0 and C1 control codes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e961e97b1bab5bb4d05da5fe7c2fc74357a8b93" translate="yes" xml:space="preserve">
          <source>To consume the old state, the &lt;code&gt;request_review&lt;/code&gt; method needs to take ownership of the state value. This is where the &lt;code&gt;Option&lt;/code&gt; in the &lt;code&gt;state&lt;/code&gt; field of &lt;code&gt;Post&lt;/code&gt; comes in: we call the &lt;code&gt;take&lt;/code&gt; method to take the &lt;code&gt;Some&lt;/code&gt; value out of the &lt;code&gt;state&lt;/code&gt; field and leave a &lt;code&gt;None&lt;/code&gt; in its place, because Rust doesn&amp;rsquo;t let us have unpopulated fields in structs. This lets us move the &lt;code&gt;state&lt;/code&gt; value out of &lt;code&gt;Post&lt;/code&gt; rather than borrowing it. Then we&amp;rsquo;ll set the post&amp;rsquo;s &lt;code&gt;state&lt;/code&gt; value to the result of this operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f337e083c37a19b6c9f78383e9d486a4274f1380" translate="yes" xml:space="preserve">
          <source>To control whether interfaces can be used across modules, Rust checks each use of an item to see whether it should be allowed or not. This is where privacy warnings are generated, or otherwise &quot;you used a private item of another module and weren't allowed to.&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba21f5abea5c571067a1a7d57de3d3aa5bc54641" translate="yes" xml:space="preserve">
          <source>To convert a single value to a string, use the &lt;a href=&quot;../string/trait.tostring&quot;&gt;&lt;code&gt;to_string&lt;/code&gt;&lt;/a&gt; method. This will use the &lt;a href=&quot;trait.display&quot;&gt;&lt;code&gt;Display&lt;/code&gt;&lt;/a&gt; formatting trait.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cb338cb9ed195af952f18624a8d65c1ca64787f" translate="yes" xml:space="preserve">
          <source>To convert a single value to a string, use the &lt;a href=&quot;string/trait.tostring&quot;&gt;&lt;code&gt;to_string&lt;/code&gt;&lt;/a&gt; method. This will use the &lt;a href=&quot;fmt/trait.display&quot;&gt;&lt;code&gt;Display&lt;/code&gt;&lt;/a&gt; formatting trait.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="015234ea3f6220712aedf5ea26711d734042f76e" translate="yes" xml:space="preserve">
          <source>To create a &lt;code&gt;match&lt;/code&gt; expression that compares the values of the outer &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, rather than introducing a shadowed variable, we would need to use a match guard conditional instead. We&amp;rsquo;ll talk about match guards later in the &lt;a href=&quot;#extra-conditionals-with-match-guards&quot;&gt;&amp;ldquo;Extra Conditionals with Match Guards&amp;rdquo;&lt;/a&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6a361bf034a44065bf4d983adf9bd5159e505a7" translate="yes" xml:space="preserve">
          <source>To create a new thread, we call the &lt;code&gt;thread::spawn&lt;/code&gt; function and pass it a closure (we talked about closures in Chapter 13) containing the code we want to run in the new thread. The example in Listing 16-1 prints some text from a main thread and other text from a new thread:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa89b2295fcdc6f9c080aa3a4a8e8468c77980e1" translate="yes" xml:space="preserve">
          <source>To create a new, empty vector, we can call the &lt;code&gt;Vec::new&lt;/code&gt; function, as shown in Listing 8-1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a88aa76c7ad4f90214c55053637e980f11dd3a9" translate="yes" xml:space="preserve">
          <source>To create a vector and then add elements to it, we can use the &lt;code&gt;push&lt;/code&gt; method, as shown in Listing 8-3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00c0015adacecd8350d6133979871ae1b1edfe94" translate="yes" xml:space="preserve">
          <source>To define a &lt;code&gt;Point&lt;/code&gt; struct where &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are both generics but could have different types, we can use multiple generic type parameters. For example, in Listing 10-8, we can change the definition of &lt;code&gt;Point&lt;/code&gt; to be generic over types &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;U&lt;/code&gt; where &lt;code&gt;x&lt;/code&gt; is of type &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; is of type &lt;code&gt;U&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48e3d6adfbf70e45f3b29de0115bced82f45c8ba" translate="yes" xml:space="preserve">
          <source>To define a macro, you use the &lt;code&gt;macro_rules!&lt;/code&gt; construct. Let&amp;rsquo;s explore how to use &lt;code&gt;macro_rules!&lt;/code&gt; by looking at how the &lt;code&gt;vec!&lt;/code&gt; macro is defined. Chapter 8 covered how we can use the &lt;code&gt;vec!&lt;/code&gt; macro to create a new vector with particular values. For example, the following macro creates a new vector containing three integers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0305c11d131bdcb2f62d25c1e047d31c7b279a29" translate="yes" xml:space="preserve">
          <source>To define a struct, we enter the keyword &lt;code&gt;struct&lt;/code&gt; and name the entire struct. A struct&amp;rsquo;s name should describe the significance of the pieces of data being grouped together. Then, inside curly brackets, we define the names and types of the pieces of data, which we call &lt;em&gt;fields&lt;/em&gt;. For example, Listing 5-1 shows a struct that stores information about a user account.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f9b83d2cc8d6fc88b967504ac913c99c3032360" translate="yes" xml:space="preserve">
          <source>To define a tuple struct, start with the &lt;code&gt;struct&lt;/code&gt; keyword and the struct name followed by the types in the tuple. For example, here are definitions and usages of two tuple structs named &lt;code&gt;Color&lt;/code&gt; and &lt;code&gt;Point&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf22e9ab26d9ba6ee6b2e46fe0b19d5124fc0343" translate="yes" xml:space="preserve">
          <source>To define the function within the context of &lt;code&gt;Rectangle&lt;/code&gt;, we start an &lt;code&gt;impl&lt;/code&gt; (implementation) block. Then we move the &lt;code&gt;area&lt;/code&gt; function within the &lt;code&gt;impl&lt;/code&gt; curly brackets and change the first (and in this case, only) parameter to be &lt;code&gt;self&lt;/code&gt; in the signature and everywhere within the body. In &lt;code&gt;main&lt;/code&gt;, where we called the &lt;code&gt;area&lt;/code&gt; function and passed &lt;code&gt;rect1&lt;/code&gt; as an argument, we can instead use &lt;em&gt;method syntax&lt;/em&gt; to call the &lt;code&gt;area&lt;/code&gt; method on our &lt;code&gt;Rectangle&lt;/code&gt; instance. The method syntax goes after an instance: we add a dot followed by the method name, parentheses, and any arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2de6b544c44b76668f6d2936d8d501f7f9f3abad" translate="yes" xml:space="preserve">
          <source>To demonstrate how to run a subset of tests, we&amp;rsquo;ll create three tests for our &lt;code&gt;add_two&lt;/code&gt; function, as shown in Listing 11-11, and choose which ones to run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e75dc3dfe6b153a0ceea282766b5c4d1615452e1" translate="yes" xml:space="preserve">
          <source>To demonstrate, let&amp;rsquo;s create an iterator that will only ever count from 1 to 5. First, we&amp;rsquo;ll create a struct to hold some values. Then we&amp;rsquo;ll make this struct into an iterator by implementing the &lt;code&gt;Iterator&lt;/code&gt; trait and using the values in that implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6b548838142d67d34f12bfbc64f7cdb12a47cc6" translate="yes" xml:space="preserve">
          <source>To determine how much space to allocate for a &lt;code&gt;Message&lt;/code&gt; value, Rust goes through each of the variants to see which variant needs the most space. Rust sees that &lt;code&gt;Message::Quit&lt;/code&gt; doesn&amp;rsquo;t need any space, &lt;code&gt;Message::Move&lt;/code&gt; needs enough space to store two &lt;code&gt;i32&lt;/code&gt; values, and so forth. Because only one variant will be used, the most space a &lt;code&gt;Message&lt;/code&gt; value will need is the space it would take to store the largest of its variants.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="375df8edff8c14a24952e9e1d54e255a42b357a9" translate="yes" xml:space="preserve">
          <source>To determine if a &lt;code&gt;T&lt;/code&gt; is &lt;code&gt;Foo&lt;/code&gt;, we need to check if &lt;code&gt;Bar&amp;lt;T&amp;gt;&lt;/code&gt; is &lt;code&gt;Foo&lt;/code&gt;. However, to do this check, we need to determine that &lt;code&gt;Bar&amp;lt;Bar&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; is &lt;code&gt;Foo&lt;/code&gt;. To determine this, we check if &lt;code&gt;Bar&amp;lt;Bar&amp;lt;Bar&amp;lt;T&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; is &lt;code&gt;Foo&lt;/code&gt;, and so on. This is clearly a recursive requirement that can't be resolved directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8666f35753eb530d957bee0ef54848c41571aca" translate="yes" xml:space="preserve">
          <source>To determine the total number of seconds represented by the &lt;code&gt;Duration&lt;/code&gt;, use &lt;code&gt;as_secs&lt;/code&gt; in combination with &lt;a href=&quot;#method.subsec_nanos&quot;&gt;&lt;code&gt;subsec_nanos&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c73fc588227a5e5b304d8e85115a9b2d547b13e" translate="yes" xml:space="preserve">
          <source>To determine whether to use loops or iterators, you need to know which version of our &lt;code&gt;search&lt;/code&gt; functions is faster: the version with an explicit &lt;code&gt;for&lt;/code&gt; loop or the version with iterators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="235f6ddc8fb93b9bc27bd450e93516c6f056381f" translate="yes" xml:space="preserve">
          <source>To disambiguate and tell Rust that we want to use the implementation of &lt;code&gt;Animal&lt;/code&gt; for &lt;code&gt;Dog&lt;/code&gt;, we need to use fully qualified syntax. Listing 19-21 demonstrates how to use fully qualified syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6bc5e83e5f978fc7521ec1ad0ec48fc0bc1e6d4" translate="yes" xml:space="preserve">
          <source>To do this in a language with inheritance, we might define a class named &lt;code&gt;Component&lt;/code&gt; that has a method named &lt;code&gt;draw&lt;/code&gt; on it. The other classes, such as &lt;code&gt;Button&lt;/code&gt;, &lt;code&gt;Image&lt;/code&gt;, and &lt;code&gt;SelectBox&lt;/code&gt;, would inherit from &lt;code&gt;Component&lt;/code&gt; and thus inherit the &lt;code&gt;draw&lt;/code&gt; method. They could each override the &lt;code&gt;draw&lt;/code&gt; method to define their custom behavior, but the framework could treat all of the types as if they were &lt;code&gt;Component&lt;/code&gt; instances and call &lt;code&gt;draw&lt;/code&gt; on them. But because Rust doesn&amp;rsquo;t have inheritance, we need another way to structure the &lt;code&gt;gui&lt;/code&gt; library to allow users to extend it with new types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4978131923d35532be220aa91636f57efe0f7f12" translate="yes" xml:space="preserve">
          <source>To easily implement the Clone trait, you can also use &lt;code&gt;#[derive(Clone)]&lt;/code&gt;. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0cd2dd965d6ad9f646e83059dd95c728c0a97cf" translate="yes" xml:space="preserve">
          <source>To eliminate this duplication, we can create an abstraction by defining a function that operates on any list of integers given to it in a parameter. This solution makes our code clearer and lets us express the concept of finding the largest number in a list abstractly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29cf48fa5d156f2e83366c6a4eab852452303d3f" translate="yes" xml:space="preserve">
          <source>To enable &lt;code&gt;minigrep&lt;/code&gt; to read the values of command line arguments we pass to it, we&amp;rsquo;ll need a function provided in Rust&amp;rsquo;s standard library, which is &lt;code&gt;std::env::args&lt;/code&gt;. This function returns an iterator of the command line arguments that were given to &lt;code&gt;minigrep&lt;/code&gt;. We&amp;rsquo;ll cover iterators fully in &lt;a href=&quot;ch13-00-functional-features&quot;&gt;Chapter 13&lt;/a&gt;. For now, you only need to know two details about iterators: iterators produce a series of values, and we can call the &lt;code&gt;collect&lt;/code&gt; method on an iterator to turn it into a collection, such as a vector, containing all the elements the iterator produces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad43deb7c3d4847ed4f9b3c47149e285bd2d149c" translate="yes" xml:space="preserve">
          <source>To enable multiple ownership, Rust has a type called &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt;, which is an abbreviation for &lt;em&gt;reference counting&lt;/em&gt;. The &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; type keeps track of the number of references to a value which determines whether or not a value is still in use. If there are zero references to a value, the value can be cleaned up without any references becoming invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e59e1050701d5494b23014e46f9317fad2eac0b0" translate="yes" xml:space="preserve">
          <source>To enable this feature on a nightly version of rustc, add the &lt;code&gt;const_fn&lt;/code&gt; feature flag:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d24a8c41c8e51812d2f6a3d4df4d4bc30f42fd94" translate="yes" xml:space="preserve">
          <source>To ensure memory safety, there&amp;rsquo;s one more detail to what happens in this situation in Rust. Instead of trying to copy the allocated memory, Rust considers &lt;code&gt;s1&lt;/code&gt; to no longer be valid and, therefore, Rust doesn&amp;rsquo;t need to free anything when &lt;code&gt;s1&lt;/code&gt; goes out of scope. Check out what happens when you try to use &lt;code&gt;s1&lt;/code&gt; after &lt;code&gt;s2&lt;/code&gt; is created; it won&amp;rsquo;t work:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ccd9133d33f00e1b04fd5409b4bd62ab4182d4d" translate="yes" xml:space="preserve">
          <source>To extend a type without breaking existing code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="986aa5a06f6c7eab4fbf8758ab21e34c28998b7b" translate="yes" xml:space="preserve">
          <source>To find the largest number in two different lists of numbers, we can duplicate the code in Listing 10-1 and use the same logic at two different places in the program, as shown in Listing 10-2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05412e512ad05fb982373163c001384a6dc6dc41" translate="yes" xml:space="preserve">
          <source>To fix such code, put them in an extern &quot;C&quot; block:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f641101a15aa5663f425af7eca864860358c2b4" translate="yes" xml:space="preserve">
          <source>To fix the compiler error in Listing 16-3, we can use the error message&amp;rsquo;s advice:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a70249adaf4eb50343b8e3cb8c112aee0c4394d" translate="yes" xml:space="preserve">
          <source>To fix the problem where we have a refutable pattern where an irrefutable pattern is needed, we can change the code that uses the pattern: instead of using &lt;code&gt;let&lt;/code&gt;, we can use &lt;code&gt;if let&lt;/code&gt;. Then if the pattern doesn&amp;rsquo;t match, the code will just skip the code in the curly brackets, giving it a way to continue validly. Listing 18-9 shows how to fix the code in Listing 18-8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d38f12fb6a882b38564fce2f1f7c9cb9d1796dd" translate="yes" xml:space="preserve">
          <source>To fix the problem, either remove the unknown meta item, or rename it if you provided the wrong name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff15ef440d8fd65fc53847fcd7d27134b37684e0" translate="yes" xml:space="preserve">
          <source>To fix the problem, remove all but one of the meta items with the same key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea6969ed4bf2de9ff5e1987bde2a5974361798c0" translate="yes" xml:space="preserve">
          <source>To fix this and consume the iterator, we&amp;rsquo;ll use the &lt;code&gt;collect&lt;/code&gt; method, which we used in Chapter 12 with &lt;code&gt;env::args&lt;/code&gt; in Listing 12-1. This method consumes the iterator and collects the resulting values into a collection data type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14bc23db223a3a7adb6fd2ea01135a7a51e21b23" translate="yes" xml:space="preserve">
          <source>To fix this error, check that you didn't misspell the field's name or that the field actually exists. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec4c03a79b5dd9aa983287afa6ca9be17b72579d" translate="yes" xml:space="preserve">
          <source>To fix this error, don't try to cast directly between thin and fat pointers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cf449e499fd02815621561773f0782493f1f5ff" translate="yes" xml:space="preserve">
          <source>To fix this error, either split into multiple match arms:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59d5e036d18215af29bf5d6026ec79c924cc4630" translate="yes" xml:space="preserve">
          <source>To fix this error, ensure that you don't have any other references to the variable before trying to access it mutably:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c41c6753158354db97000bee3e6d1e71d162a5c2" translate="yes" xml:space="preserve">
          <source>To fix this error, ensure the match arm kind is the same as the expression matched.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e0f8c883662f36aaeadf872304efd94871b85a2" translate="yes" xml:space="preserve">
          <source>To fix this error, just change the binding's name in order to avoid shadowing one of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="547cd595fdb912c2692881e0fc69f7e09c4e06b4" translate="yes" xml:space="preserve">
          <source>To fix this error, just specify the type of the variable. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac9826f4a5f0aca5be2cbd8435bee957e2a23961" translate="yes" xml:space="preserve">
          <source>To fix this error, just use the same mode in both cases. Generally using &lt;code&gt;ref&lt;/code&gt; or &lt;code&gt;ref mut&lt;/code&gt; where not already used will fix this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="130e6cb76ab8ba2e39f9316003d15648f16e824e" translate="yes" xml:space="preserve">
          <source>To fix this error, please check that this type implements this binary operation. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f8bccc6c37b14540562ff31ba77c03a4a691b62" translate="yes" xml:space="preserve">
          <source>To fix this error, please ensure that all the fields of the struct are public, or implement a function for easy instantiation. Examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="342e8c2f7a1ada9b484baabdc9d06d406ca80a54" translate="yes" xml:space="preserve">
          <source>To fix this error, please implement a trait on the type or wrap it in a struct. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="befadb1ed4ec4a8c074944e9002910bb635c2bda" translate="yes" xml:space="preserve">
          <source>To fix this error, please remove the visibility qualifier when it is not required. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd5bba6de2aa5f4e39e98433e92b409c0d3ccac5" translate="yes" xml:space="preserve">
          <source>To fix this error, please replace the value with a constant. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29332719480b2d3d455368380fd1815d30eebf29" translate="yes" xml:space="preserve">
          <source>To fix this error, please verify that the method name wasn't misspelled and verify that you are indeed implementing the correct trait items. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6526d13f1c406efebc4022cedccc7bfc1d5dbc7" translate="yes" xml:space="preserve">
          <source>To fix this error, please verify you didn't misspell the type name, you did declare it or imported it into the scope. Examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6da3993819cb20099d5b634dd66120eb7048a481" translate="yes" xml:space="preserve">
          <source>To fix this error, you can finish using the closure before using the captured variable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d18371bc4c07ba0c41f6206f4861a5d76f0f6e55" translate="yes" xml:space="preserve">
          <source>To fix this error, you need to mark all the parent implementations as default. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf4fd1eefb95ff6d8562a2c0c639ea77e8a69e6e" translate="yes" xml:space="preserve">
          <source>To fix this issue, either use the lifetime in the arguments, or use &lt;code&gt;'static&lt;/code&gt;. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb2e9d61c37258f8ed9cce9fe2929803d6d2313b" translate="yes" xml:space="preserve">
          <source>To fix this issue, either use the lifetime in the inputs, or use &lt;code&gt;'static&lt;/code&gt;. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47d656f4427ec08945a130e9ab24f44d356e73c6" translate="yes" xml:space="preserve">
          <source>To fix this issue, just remove the return keyword or move the expression into a function. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9924221c408a112fe763d167c1b4a29e5c450e04" translate="yes" xml:space="preserve">
          <source>To fix this issue, you have to rename at least one of the two imports. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b92f6f0312b161fc6e42dd1de00eb946169f081" translate="yes" xml:space="preserve">
          <source>To fix this problem, we&amp;rsquo;ll modify the threads so they listen for either a &lt;code&gt;Job&lt;/code&gt; to run or a signal that they should stop listening and exit the infinite loop. Instead of &lt;code&gt;Job&lt;/code&gt; instances, our channel will send one of these two enum variants.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3ddf887a4b5f979d5c4754fbe5d3842c28e8398" translate="yes" xml:space="preserve">
          <source>To fix this problem, you can do either of these things:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1040dc78ad7b42b1b39bcb93179f38486776a0b" translate="yes" xml:space="preserve">
          <source>To fix this problem, you need to create a local variable to store the value in rather than relying on a temporary. For example, you might change the original program to the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="360a9b00506f1addbb3267f917ea23dd8584e790" translate="yes" xml:space="preserve">
          <source>To fix this, add a label specifying which loop is being broken out of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f4f5291163064ff6fda56abd889a7618c40d282" translate="yes" xml:space="preserve">
          <source>To fix this, add an implementation for each default method from the trait:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56a92651d517e6a1850a1ad3d4745e7b392eba21" translate="yes" xml:space="preserve">
          <source>To fix this, edit the &lt;em&gt;Cargo.toml&lt;/em&gt; file for the &lt;code&gt;adder&lt;/code&gt; crate and indicate that &lt;code&gt;rand&lt;/code&gt; is a dependency for that crate as well. Building the &lt;code&gt;adder&lt;/code&gt; crate will add &lt;code&gt;rand&lt;/code&gt; to the list of dependencies for &lt;code&gt;adder&lt;/code&gt; in &lt;em&gt;Cargo.lock&lt;/em&gt;, but no additional copies of &lt;code&gt;rand&lt;/code&gt; will be downloaded. Cargo has ensured that every crate in the workspace using the &lt;code&gt;rand&lt;/code&gt; crate will be using the same version. Using the same version of &lt;code&gt;rand&lt;/code&gt; across the workspace saves space because we won&amp;rsquo;t have multiple copies and ensures that the crates in the workspace will be compatible with each other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dd753bd45e01fa10b5929e59eda068f06c82e05" translate="yes" xml:space="preserve">
          <source>To fix this, either remove the outer reference:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb0074c2565e11e981fa6efe9e6d5af9f075e607" translate="yes" xml:space="preserve">
          <source>To fix this, ensure that any declared variables are initialized before being used. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="437601cd4925a7106ff21615c74bc484d85aef14" translate="yes" xml:space="preserve">
          <source>To fix this, ensure that the name was correctly spelled, and that the correct form of initializer was used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="890f488bd89f18960203be014ab27fb39dfc6d22" translate="yes" xml:space="preserve">
          <source>To fix this, it is suggested to use a &lt;code&gt;where Self: Sized&lt;/code&gt; bound similar to the fix for the sub-error above if you do not intend to call the method with type parameters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7b0cc36b1cf18605167b9e261109b879dd0c485" translate="yes" xml:space="preserve">
          <source>To fix this, please set manually the next enum value or put the enum variant with the maximum value at the end of the enum. Examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa4bb08fcba49cd98aef8848abbf20a6a3f3bfcb" translate="yes" xml:space="preserve">
          <source>To fix this, replace the generic parameter with the specializations that you need:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f9e6f402abcaecb02615cbeb4f9eaf1b18503a7" translate="yes" xml:space="preserve">
          <source>To fix this, the value can be extracted as a const and then used:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34e96f574d6d4b3f0139f4794453e1b644fdb7fa" translate="yes" xml:space="preserve">
          <source>To fix this, we implement &lt;code&gt;Display&lt;/code&gt; on &lt;code&gt;Point&lt;/code&gt; and satisfy the constraint that &lt;code&gt;OutlinePrint&lt;/code&gt; requires, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1afba8b0958bf7d54c00a1e357d6112f94820fbc" translate="yes" xml:space="preserve">
          <source>To fix this, you must reference the lifetime &lt;code&gt;'x&lt;/code&gt; from the return type. For example, changing the return type to &lt;code&gt;impl Trait&amp;lt;'y&amp;gt; + 'x&lt;/code&gt; would work:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2c5b5034aa90905612a009b913793af12d3e3ac" translate="yes" xml:space="preserve">
          <source>To further refine the game&amp;rsquo;s behavior, rather than crashing the program when the user inputs a non-number, let&amp;rsquo;s make the game ignore a non-number so the user can continue guessing. We can do that by altering the line where &lt;code&gt;guess&lt;/code&gt; is converted from a &lt;code&gt;String&lt;/code&gt; to a &lt;code&gt;u32&lt;/code&gt;, as shown in Listing 2-5.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bea9207f63bde7916694d159ff6b4254f0892dc5" translate="yes" xml:space="preserve">
          <source>To get a mutable string slice instead, see the &lt;a href=&quot;#method.slice_mut_unchecked&quot;&gt;&lt;code&gt;slice_mut_unchecked&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0238d96367a691acb632dbf4d73cc5fd2a706ad9" translate="yes" xml:space="preserve">
          <source>To get a pointer to a boxed value, dereference the box:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f1e8a2f8899e777c3546c1b586cd81156849069" translate="yes" xml:space="preserve">
          <source>To get a specific value from a struct, we can use dot notation. If we wanted just this user&amp;rsquo;s email address, we could use &lt;code&gt;user1.email&lt;/code&gt; wherever we wanted to use this value. If the instance is mutable, we can change a value by using the dot notation and assigning into a particular field. Listing 5-3 shows how to change the value in the &lt;code&gt;email&lt;/code&gt; field of a mutable &lt;code&gt;User&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffd19be588eb8df1e329d2bc1905f6d517e8c370" translate="yes" xml:space="preserve">
          <source>To get an immutable string slice instead, see the &lt;a href=&quot;#method.slice_unchecked&quot;&gt;&lt;code&gt;slice_unchecked&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29270bb604499679be31005db9630fdff3a329f3" translate="yes" xml:space="preserve">
          <source>To get immutable string slices instead, see the &lt;a href=&quot;#method.split_at&quot;&gt;&lt;code&gt;split_at&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6bbcb0bb220df37e8c688ef821b8733765b09b5" translate="yes" xml:space="preserve">
          <source>To get mutable string slices instead, see the &lt;a href=&quot;#method.split_at_mut&quot;&gt;&lt;code&gt;split_at_mut&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a0349cd0d37a5287741f4237e8c49df43c4e0c6" translate="yes" xml:space="preserve">
          <source>To get this out of the way: you should probably just use &lt;a href=&quot;../vec/struct.vec&quot;&gt;&lt;code&gt;Vec&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;struct.hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;. These two collections cover most use cases for generic data storage and processing. They are exceptionally good at doing what they do. All the other collections in the standard library have specific use cases where they are the optimal choice, but these cases are borderline &lt;em&gt;niche&lt;/em&gt; in comparison. Even when &lt;code&gt;Vec&lt;/code&gt; and &lt;code&gt;HashMap&lt;/code&gt; are technically suboptimal, they're probably a good enough choice to get started.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18773042303056fd8c79476f3616f355ff443a51" translate="yes" xml:space="preserve">
          <source>To handle the error case and print a user-friendly message, we need to update &lt;code&gt;main&lt;/code&gt; to handle the &lt;code&gt;Result&lt;/code&gt; being returned by &lt;code&gt;Config::new&lt;/code&gt;, as shown in Listing 12-10. We&amp;rsquo;ll also take the responsibility of exiting the command line tool with a nonzero error code from &lt;code&gt;panic!&lt;/code&gt; and implement it by hand. A nonzero exit status is a convention to signal to the process that called our program that the program exited with an error state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="482ebf3be5fe8298225b2e8f09ccc5e7f7c51bf1" translate="yes" xml:space="preserve">
          <source>To help IDE integration, the Rust project distributes the &lt;em&gt;Rust Language Server&lt;/em&gt; (&lt;code&gt;rls&lt;/code&gt;). This tool speaks the &lt;a href=&quot;http://langserver.org/&quot;&gt;Language Server Protocol&lt;/a&gt;, which is a specification for IDEs and programming languages to communicate with each other. Different clients can use the &lt;code&gt;rls&lt;/code&gt;, such as &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=rust-lang.rust&quot;&gt;the Rust plug-in for Visual Studio Code&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20b8f11e3eb504aaf128f283d04500f6915052b5" translate="yes" xml:space="preserve">
          <source>To illustrate situations where closures that can capture their environment are useful as function parameters, let&amp;rsquo;s move on to our next topic: iterators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bb8bf87527987f23e438b1c1bc78391e818826e" translate="yes" xml:space="preserve">
          <source>To illustrate the rules of ownership, we need a data type that is more complex than the ones we covered in the &lt;a href=&quot;ch03-02-data-types#data-types&quot;&gt;&amp;ldquo;Data Types&amp;rdquo;&lt;/a&gt; section of Chapter 3. The types covered previously are all stored on the stack and popped off the stack when their scope is over, but we want to look at data that is stored on the heap and explore how Rust knows when to clean up that data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60712450a97e23097bf6dbe8ed26e2265884e8b7" translate="yes" xml:space="preserve">
          <source>To implement the behavior we want &lt;code&gt;gui&lt;/code&gt; to have, we&amp;rsquo;ll define a trait named &lt;code&gt;Draw&lt;/code&gt; that will have one method named &lt;code&gt;draw&lt;/code&gt;. Then we can define a vector that takes a &lt;em&gt;trait object&lt;/em&gt;. A trait object points to both an instance of a type implementing our specified trait as well as a table used to look up trait methods on that type at runtime. We create a trait object by specifying some sort of pointer, such as a &lt;code&gt;&amp;amp;&lt;/code&gt; reference or a &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; smart pointer, then the &lt;code&gt;dyn&lt;/code&gt; keyword, and then specifying the relevant trait. (We&amp;rsquo;ll talk about the reason trait objects must use a pointer in Chapter 19 in the section &lt;a href=&quot;ch19-04-advanced-types#dynamically-sized-types-and-the-sized-trait&quot;&gt;&amp;ldquo;Dynamically Sized Types and the &lt;code&gt;Sized&lt;/code&gt; Trait.&amp;rdquo;&lt;/a&gt;) We can use trait objects in place of a generic or concrete type. Wherever we use a trait object, Rust&amp;rsquo;s type system will ensure at compile time that any value used in that context will implement the trait object&amp;rsquo;s trait. Consequently, we don&amp;rsquo;t need to know all the possible types at compile time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5e8a5c28a454d1f90112a6c60c0f8aea2b5196d" translate="yes" xml:space="preserve">
          <source>To improve our program, we&amp;rsquo;ll fix four problems that have to do with the program&amp;rsquo;s structure and how it&amp;rsquo;s handling potential errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf9b4462d1a02f4d70e5d13cf8540c79a5e14d1a" translate="yes" xml:space="preserve">
          <source>To incorporate the &lt;code&gt;Message&lt;/code&gt; enum, we need to change &lt;code&gt;Job&lt;/code&gt; to &lt;code&gt;Message&lt;/code&gt; in two places: the definition of &lt;code&gt;ThreadPool&lt;/code&gt; and the signature of &lt;code&gt;Worker::new&lt;/code&gt;. The &lt;code&gt;execute&lt;/code&gt; method of &lt;code&gt;ThreadPool&lt;/code&gt; needs to send jobs wrapped in the &lt;code&gt;Message::NewJob&lt;/code&gt; variant. Then, in &lt;code&gt;Worker::new&lt;/code&gt; where a &lt;code&gt;Message&lt;/code&gt; is received from the channel, the job will be processed if the &lt;code&gt;NewJob&lt;/code&gt; variant is received, and the thread will break out of the loop if the &lt;code&gt;Terminate&lt;/code&gt; variant is received.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f9206704ddf29e2ebea715304ccfd9e3f3ba5f3" translate="yes" xml:space="preserve">
          <source>To install &lt;code&gt;rustfmt&lt;/code&gt;, enter the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35fe5fa9574aed79cc4c533785f5e0d142e0e320" translate="yes" xml:space="preserve">
          <source>To install Clippy, enter the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44d584ca391c2045c83ab8a58e67b2e401ab33be" translate="yes" xml:space="preserve">
          <source>To install the &lt;code&gt;rls&lt;/code&gt;, enter the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71a54c2518d0f86ead8ba016e32755cf1ca226ed" translate="yes" xml:space="preserve">
          <source>To interact with a &lt;code&gt;Formatter&lt;/code&gt;, you'll call various methods to change the various options related to formatting. For examples, please see the documentation of the methods defined on &lt;code&gt;Formatter&lt;/code&gt; below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b498caa788bb95865cf7ae29f319574a69dd854b" translate="yes" xml:space="preserve">
          <source>To isolate unsafe code as much as possible, it&amp;rsquo;s best to enclose unsafe code within a safe abstraction and provide a safe API, which we&amp;rsquo;ll discuss later in the chapter when we examine unsafe functions and methods. Parts of the standard library are implemented as safe abstractions over unsafe code that has been audited. Wrapping unsafe code in a safe abstraction prevents uses of &lt;code&gt;unsafe&lt;/code&gt; from leaking out into all the places that you or your users might want to use the functionality implemented with &lt;code&gt;unsafe&lt;/code&gt; code, because using a safe abstraction is safe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6753382b748af96b119a035edd05c7a836b948d" translate="yes" xml:space="preserve">
          <source>To learn about the other kinds of collections provided by the standard library, see &lt;a href=&quot;../std/collections/index&quot;&gt;the documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2736d1e6ef2a3faad24038e53f6bde645f76d87" translate="yes" xml:space="preserve">
          <source>To lowercase ASCII characters in addition to non-ASCII characters, use &lt;a href=&quot;#method.to_lowercase&quot;&gt;&lt;code&gt;to_lowercase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e94e0d4cfd63a504442f11c93df0afa614a2f0d4" translate="yes" xml:space="preserve">
          <source>To lowercase ASCII characters in addition to non-ASCII characters, use &lt;a href=&quot;../primitive.str#method.to_lowercase&quot;&gt;&lt;code&gt;str::to_lowercase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ab2513e3de2d60d109900818fb2429fd91b99d2" translate="yes" xml:space="preserve">
          <source>To lowercase the value in-place, use &lt;a href=&quot;#method.make_ascii_lowercase&quot;&gt;&lt;code&gt;make_ascii_lowercase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef146744579c27e21ed699daf39b3a3250767c77" translate="yes" xml:space="preserve">
          <source>To lowercase the value in-place, use &lt;a href=&quot;#tymethod.make_ascii_lowercase&quot;&gt;&lt;code&gt;make_ascii_lowercase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21e4a3f169edf0cfb32c3841ee2bea7479d1a5e1" translate="yes" xml:space="preserve">
          <source>To make a struct that holds a closure, we need to specify the type of the closure, because a struct definition needs to know the types of each of its fields. Each closure instance has its own unique anonymous type: that is, even if two closures have the same signature, their types are still considered different. To define structs, enums, or function parameters that use closures, we use generics and trait bounds, as we discussed in Chapter 10.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f551bbd5751f05a17c69a727dd31a7a20561b4f8" translate="yes" xml:space="preserve">
          <source>To make it valid, write the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11b284dcb2ba4ceac9f02b253f7b17b9698ddf3b" translate="yes" xml:space="preserve">
          <source>To make struct &lt;code&gt;Bar&lt;/code&gt; only visible in module &lt;code&gt;foo&lt;/code&gt; the &lt;code&gt;in&lt;/code&gt; keyword should be used:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc2021393a94974377e271f291f7d97ada3aa985" translate="yes" xml:space="preserve">
          <source>To make the child node aware of its parent, we need to add a &lt;code&gt;parent&lt;/code&gt; field to our &lt;code&gt;Node&lt;/code&gt; struct definition. The trouble is in deciding what the type of &lt;code&gt;parent&lt;/code&gt; should be. We know it can&amp;rsquo;t contain an &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt;, because that would create a reference cycle with &lt;code&gt;leaf.parent&lt;/code&gt; pointing to &lt;code&gt;branch&lt;/code&gt; and &lt;code&gt;branch.children&lt;/code&gt; pointing to &lt;code&gt;leaf&lt;/code&gt;, which would cause their &lt;code&gt;strong_count&lt;/code&gt; values to never be 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7b483d37995579653b3a66a999867efa81ab8f9" translate="yes" xml:space="preserve">
          <source>To make this work, every element has pointers to its predecessor and successor in the list. Elements can only be added when they are pinned, because moving the elements around would invalidate the pointers. Moreover, the &lt;code&gt;Drop&lt;/code&gt; implementation of a linked list element will patch the pointers of its predecessor and successor to remove itself from the list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="addd7b5a3eab2bcc498269d4b5030ddd2652429e" translate="yes" xml:space="preserve">
          <source>To many people, polymorphism is synonymous with inheritance. But it&amp;rsquo;s actually a more general concept that refers to code that can work with data of multiple types. For inheritance, those types are generally subclasses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1808ba5fbc9308fb8282df842ce731348ff5abf" translate="yes" xml:space="preserve">
          <source>To model pointers to opaque types in FFI, until &lt;code&gt;extern type&lt;/code&gt; is stabilized, it is recommended to use a newtype wrapper around an empty byte array. See the &lt;a href=&quot;https://doc.rust-lang.org/nomicon/ffi.html#representing-opaque-structs&quot;&gt;Nomicon&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92f1c0826630a6e44e7c7249d92c4a26d91785e3" translate="yes" xml:space="preserve">
          <source>To obtain error description as a string, use &lt;code&gt;to_string()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0354419a51c55b7a4f425ab3291d7b635b1d30c9" translate="yes" xml:space="preserve">
          <source>To parameterize the types in the new function we&amp;rsquo;ll define, we need to name the type parameter, just as we do for the value parameters to a function. You can use any identifier as a type parameter name. But we&amp;rsquo;ll use &lt;code&gt;T&lt;/code&gt; because, by convention, parameter names in Rust are short, often just a letter, and Rust&amp;rsquo;s type-naming convention is CamelCase. Short for &amp;ldquo;type,&amp;rdquo; &lt;code&gt;T&lt;/code&gt; is the default choice of most Rust programmers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="075fa626d389c13dd84df398e2b600267ba414fd" translate="yes" xml:space="preserve">
          <source>To parse a path, you can create a &lt;a href=&quot;struct.path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt; slice from a &lt;a href=&quot;../primitive.str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; slice and start asking questions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7f45d830d337ce8a4f493ea8b6014f97c0fb6eb" translate="yes" xml:space="preserve">
          <source>To pass a single argument see &lt;a href=&quot;#method.arg&quot;&gt;&lt;code&gt;arg&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f3d970a69fb7cac0396fffe3d7483eb856d59e9" translate="yes" xml:space="preserve">
          <source>To pass multiple arguments see &lt;a href=&quot;#method.args&quot;&gt;&lt;code&gt;args&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af6d76d570505ba666bcda7baecd5871dcf2d3a2" translate="yes" xml:space="preserve">
          <source>To prevent this scenario, we first put all of our &lt;code&gt;Terminate&lt;/code&gt; messages on the channel in one loop; then we join on all the threads in another loop. Each worker will stop receiving requests on the channel once it gets a terminate message. So, we can be sure that if we send the same number of terminate messages as there are workers, each worker will receive a terminate message before &lt;code&gt;join&lt;/code&gt; is called on its thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="add5b6cf5a307a5e6af227f8cc2b7b101db763e7" translate="yes" xml:space="preserve">
          <source>To protect your program from this sort of vulnerability, if you try to read an element at an index that doesn&amp;rsquo;t exist, Rust will stop execution and refuse to continue. Let&amp;rsquo;s try it and see:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb3ab9d085bae205d404a7ba202d1b27f55784c2" translate="yes" xml:space="preserve">
          <source>To recover from a poisoned mutex:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0f842e4093b64f03623cd49c1c17718cfbe95dc" translate="yes" xml:space="preserve">
          <source>To remove the internal organization from the public API, we can modify the &lt;code&gt;art&lt;/code&gt; crate code in Listing 14-3 to add &lt;code&gt;pub use&lt;/code&gt; statements to re-export the items at the top level, as shown in Listing 14-5:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b0280b8819ec3479f9646e558c6310c8632f058" translate="yes" xml:space="preserve">
          <source>To resolve the ambiguity, the programmer may refer to their desired method or function using more specific paths, types, or traits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40806bdac66961c97f14caf3bdb5bd4161107da4" translate="yes" xml:space="preserve">
          <source>To resolve this error use the concrete type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bba50911f39e97c448e79f8065cbe76ff37d962c" translate="yes" xml:space="preserve">
          <source>To resolve this error, use a concrete type for the intermediate expression:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="336222d4e74857a65248fce76ba73fa02fe1c00a" translate="yes" xml:space="preserve">
          <source>To return a new lowercased value without modifying the existing one, use &lt;a href=&quot;#method.to_ascii_lowercase&quot;&gt;&lt;code&gt;to_ascii_lowercase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6eff45b987ef30ba84b5033a569d4671d667c28" translate="yes" xml:space="preserve">
          <source>To return a new lowercased value without modifying the existing one, use &lt;a href=&quot;#tymethod.to_ascii_lowercase&quot;&gt;&lt;code&gt;to_ascii_lowercase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fc2431e450771dead21af33dda64aadfaf2de37" translate="yes" xml:space="preserve">
          <source>To return a new uppercased value without modifying the existing one, use &lt;a href=&quot;#method.to_ascii_uppercase&quot;&gt;&lt;code&gt;to_ascii_uppercase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f98861983753d9167b54a4036b6c14ee7465a79" translate="yes" xml:space="preserve">
          <source>To return a new uppercased value without modifying the existing one, use &lt;a href=&quot;#tymethod.to_ascii_uppercase&quot;&gt;&lt;code&gt;to_ascii_uppercase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3eb99467dbfaa372dd0858f79acae31153782c2" translate="yes" xml:space="preserve">
          <source>To round out this project, we&amp;rsquo;ll briefly demonstrate how to work with environment variables and how to print to standard error, both of which are useful when you&amp;rsquo;re writing command line programs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d354bd55577a0ae6fc2f95a62753d1f62548897" translate="yes" xml:space="preserve">
          <source>To run Clippy&amp;rsquo;s lints on any Cargo project, enter the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d744134b2344eca07ba0f4cf9819619cc570948e" translate="yes" xml:space="preserve">
          <source>To run the binary crate from the &lt;em&gt;add&lt;/em&gt; directory, we need to specify which package in the workspace we want to use by using the &lt;code&gt;-p&lt;/code&gt; argument and the package name with &lt;code&gt;cargo run&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bc4f6782a835ae358ae31b6f96421e46fc704f9" translate="yes" xml:space="preserve">
          <source>To see deref coercion in action, let&amp;rsquo;s use the &lt;code&gt;MyBox&amp;lt;T&amp;gt;&lt;/code&gt; type we defined in Listing 15-8 as well as the implementation of &lt;code&gt;Deref&lt;/code&gt; that we added in Listing 15-10. Listing 15-11 shows the definition of a function that has a string slice parameter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46d871d99b751923bfc8199196805ccdb06df1da" translate="yes" xml:space="preserve">
          <source>To see the pattern matching aspect of &lt;code&gt;let&lt;/code&gt; more clearly, consider Listing 18-4, which uses a pattern with &lt;code&gt;let&lt;/code&gt; to destructure a tuple.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be7f1edd4187697ed5c2e4f6dc220a6d712ca92f" translate="yes" xml:space="preserve">
          <source>To see this code in action, let&amp;rsquo;s modify &lt;code&gt;main&lt;/code&gt; to accept only two requests before gracefully shutting down the server, as shown in Listing 20-26.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7940de3192aef0247f83e244b60b2d3b6e58939" translate="yes" xml:space="preserve">
          <source>To see what happens when a &lt;code&gt;should_panic&lt;/code&gt; test with an &lt;code&gt;expected&lt;/code&gt; message fails, let&amp;rsquo;s again introduce a bug into our code by swapping the bodies of the &lt;code&gt;if value &amp;lt; 1&lt;/code&gt; and the &lt;code&gt;else if value &amp;gt; 100&lt;/code&gt; blocks:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8576f35029f2c29efb15d99933a9de10a34dcb7b" translate="yes" xml:space="preserve">
          <source>To see why that last example was allowed, you need to understand the general rule. Unfortunately this rule is a bit tricky to state. Consider an &lt;code&gt;impl&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a14fdfe6208af1cb452de86927ad706e8201fb30" translate="yes" xml:space="preserve">
          <source>To seek without discarding the internal buffer, use &lt;a href=&quot;struct.bufreader#method.seek_relative&quot;&gt;&lt;code&gt;BufReader::seek_relative&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d7ebdd071ebe03ef9670cc1129fd6804ce04dfa" translate="yes" xml:space="preserve">
          <source>To service better ergonomics, patterns operate in different &lt;em&gt;binding modes&lt;/em&gt; in order to make it easier to bind references to values. When a reference value is matched by a non-reference pattern, it will be automatically treated as a &lt;code&gt;ref&lt;/code&gt; or &lt;code&gt;ref mut&lt;/code&gt; binding. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3d0badb6b5b316657f5cb3fda3963d136213146" translate="yes" xml:space="preserve">
          <source>To set up a new project, go to the &lt;em&gt;projects&lt;/em&gt; directory that you created in Chapter 1 and make a new project using Cargo, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58b49ff05dd6fb8ece812d318c3efc42db98cdbb" translate="yes" xml:space="preserve">
          <source>To show Rust where to find an item in a module tree, we use a path in the same way we use a path when navigating a filesystem. If we want to call a function, we need to know its path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da1e1e9f2dd7b1c40ddec9ecef1f4d928ddb4f25" translate="yes" xml:space="preserve">
          <source>To silence this warning, edit your code to use an explicit bound. Most of the time, this means that you will want to change the signature of a function that you are calling. For example, if the error is reported on a call like &lt;code&gt;foo(x)&lt;/code&gt;, and &lt;code&gt;foo&lt;/code&gt; is defined as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ae8db76a02a996f64985b9fc49d037c6c1ea0c5" translate="yes" xml:space="preserve">
          <source>To solve this error you can use conditional compilation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="384aa431a554e0c72ecb63fe411f4d1d9ac5425c" translate="yes" xml:space="preserve">
          <source>To solve this error, please ensure that the trait is also public. The trait can be made inaccessible if necessary by placing it into a private inner module, but it still has to be marked with &lt;code&gt;pub&lt;/code&gt;. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8fd0f72a971d26cc1bbb2830412854500357f79" translate="yes" xml:space="preserve">
          <source>To solve this error, please ensure that the type is also public. The type can be made inaccessible if necessary by placing it into a private inner module, but it still has to be marked with &lt;code&gt;pub&lt;/code&gt;. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cffb477b8b527a4ad5d6a5090b9a2b24adc51f1" translate="yes" xml:space="preserve">
          <source>To solve this error, please move the type bindings in the type parameter declaration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a77dd198bd76ba335ad5b87d56789f39f1b6b5e" translate="yes" xml:space="preserve">
          <source>To solve this error, the best solution is generally to keep the path before the item when using it. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8595d9620d15e23dd7e60f0c946808adb0c94b9" translate="yes" xml:space="preserve">
          <source>To split by Unicode &lt;code&gt;Whitespace&lt;/code&gt; instead, use &lt;a href=&quot;#method.split_whitespace&quot;&gt;&lt;code&gt;split_whitespace&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39efc8d301c98f5b54ae3dfd338106520f5157d1" translate="yes" xml:space="preserve">
          <source>To start defining the procedural macro, place the code in Listing 19-31 into your &lt;em&gt;src/lib.rs&lt;/em&gt; file for the &lt;code&gt;hello_macro_derive&lt;/code&gt; crate. Note that this code won&amp;rsquo;t compile until we add a definition for the &lt;code&gt;impl_hello_macro&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cd7a51fb6e1263e5fbdd69b060072fe94d9dc2f" translate="yes" xml:space="preserve">
          <source>To start, we&amp;rsquo;ll build a tree with nodes that know about their child nodes. We&amp;rsquo;ll create a struct named &lt;code&gt;Node&lt;/code&gt; that holds its own &lt;code&gt;i32&lt;/code&gt; value as well as references to its children &lt;code&gt;Node&lt;/code&gt; values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e88b248a81f262510bb36c205a0d4dc2d7d064a2" translate="yes" xml:space="preserve">
          <source>To structure our crate in the same way that a real restaurant works, we can organize the functions into nested modules. Create a new library named &lt;code&gt;restaurant&lt;/code&gt; by running &lt;code&gt;cargo new --lib restaurant&lt;/code&gt;; then put the code in Listing 7-1 into &lt;em&gt;src/lib.rs&lt;/em&gt; to define some modules and function signatures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f66b79eaf886d6c72a892191c1e18c1c1df90d3" translate="yes" xml:space="preserve">
          <source>To summarize, strings are complicated. Different programming languages make different choices about how to present this complexity to the programmer. Rust has chosen to make the correct handling of &lt;code&gt;String&lt;/code&gt; data the default behavior for all Rust programs, which means programmers have to put more thought into handling UTF-8 data upfront. This trade-off exposes more of the complexity of strings than is apparent in other programming languages, but it prevents you from having to handle errors involving non-ASCII characters later in your development life cycle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de7e750f454d2e6ac7a8ffdfb7a0160a0d2868ee" translate="yes" xml:space="preserve">
          <source>To summarize, the &lt;code&gt;let mut guess = String::new();&lt;/code&gt; line has created a mutable variable that is currently bound to a new, empty instance of a &lt;code&gt;String&lt;/code&gt;. Whew!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f43e14ce7587570f1bef4bdb30b6cbaa4b75f17f" translate="yes" xml:space="preserve">
          <source>To switch to unsafe Rust, use the &lt;code&gt;unsafe&lt;/code&gt; keyword and then start a new block that holds the unsafe code. You can take four actions in unsafe Rust, called &lt;em&gt;unsafe superpowers&lt;/em&gt;, that you can&amp;rsquo;t in safe Rust. Those superpowers include the ability to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31217910df272b1f25ece09faa304c39aefdc3a5" translate="yes" xml:space="preserve">
          <source>To this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="057adfa85ddef458f115bd296031094452f5b4a0" translate="yes" xml:space="preserve">
          <source>To understand better how closures work in Rust, read: https://doc.rust-lang.org/book/ch13-01-closures.html</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c87f629cfb96af20696ef3d804bdc670ac7c36a2" translate="yes" xml:space="preserve">
          <source>To understand when we might want to use structs, let&amp;rsquo;s write a program that calculates the area of a rectangle. We&amp;rsquo;ll start with single variables, and then refactor the program until we&amp;rsquo;re using structs instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3887dc1ab813c2423acfe9d57d029c4502fb78e" translate="yes" xml:space="preserve">
          <source>To uninstall Rust and &lt;code&gt;rustup&lt;/code&gt;, run the following uninstall script from your shell:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="662f41af8eb574e21b57913c6f9a0bd1516cbc7a" translate="yes" xml:space="preserve">
          <source>To uppercase ASCII characters in addition to non-ASCII characters, use &lt;a href=&quot;#method.to_uppercase&quot;&gt;&lt;code&gt;to_uppercase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bae7e9e1be3baf0aecb5ead601705215f7341743" translate="yes" xml:space="preserve">
          <source>To uppercase ASCII characters in addition to non-ASCII characters, use &lt;a href=&quot;../primitive.str#method.to_uppercase&quot;&gt;&lt;code&gt;str::to_uppercase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00c3dbee0cfe96289d27fa6bc805ddc167d97ef8" translate="yes" xml:space="preserve">
          <source>To uppercase the value in-place, use &lt;a href=&quot;#method.make_ascii_uppercase&quot;&gt;&lt;code&gt;make_ascii_uppercase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0fee41197e5788cb8d5e92ad9fa5f070d016314" translate="yes" xml:space="preserve">
          <source>To uppercase the value in-place, use &lt;a href=&quot;#tymethod.make_ascii_uppercase&quot;&gt;&lt;code&gt;make_ascii_uppercase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a0a581c19fda5f34a2ecc353cab28485839d3f8" translate="yes" xml:space="preserve">
          <source>To use a default implementation to summarize instances of &lt;code&gt;NewsArticle&lt;/code&gt; instead of defining a custom implementation, we specify an empty &lt;code&gt;impl&lt;/code&gt; block with &lt;code&gt;impl Summary for NewsArticle {}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adbf67a283306a6366d793a3b3158fdc68b8ad73" translate="yes" xml:space="preserve">
          <source>To use a namespace itself in addition to some of its members, &lt;code&gt;self&lt;/code&gt; may appear as part of a brace-enclosed list of imports:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b03ec43b2895de636748b67704c685a1fa98427" translate="yes" xml:space="preserve">
          <source>To use a pattern, we compare it to some value. If the pattern matches the value, we use the value parts in our code. Recall the &lt;code&gt;match&lt;/code&gt; expressions in Chapter 6 that used patterns, such as the coin-sorting machine example. If the value fits the shape of the pattern, we can use the named pieces. If it doesn&amp;rsquo;t, the code associated with the pattern won&amp;rsquo;t run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cd526c3f5cdfb3e49b95a57c88c2fc1245de535" translate="yes" xml:space="preserve">
          <source>To use a slice type it generally has to be used behind a pointer for example as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d9510373e7fd3a8d97cc9744e3544cf1ebe365c" translate="yes" xml:space="preserve">
          <source>To use a struct after we&amp;rsquo;ve defined it, we create an &lt;em&gt;instance&lt;/em&gt; of that struct by specifying concrete values for each of the fields. We create an instance by stating the name of the struct and then add curly brackets containing &lt;code&gt;key: value&lt;/code&gt; pairs, where the keys are the names of the fields and the values are the data we want to store in those fields. We don&amp;rsquo;t have to specify the fields in the same order in which we declared them in the struct. In other words, the struct definition is like a general template for the type, and instances fill in that template with particular data to create values of the type. For example, we can declare a particular user as shown in Listing 5-2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27989b6610882b719a5ea410b5f71f23c1e34efa" translate="yes" xml:space="preserve">
          <source>To use this feature locally, you typically will use the &lt;code&gt;RUSTFLAGS&lt;/code&gt; environment variable to specify flags to the compiler through Cargo. For example to compile a statically linked binary on MSVC you would execute:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa8b8effb94e7abcaae16085a72643f10b8227aa" translate="yes" xml:space="preserve">
          <source>To use this version of &lt;code&gt;Summary&lt;/code&gt;, we only need to define &lt;code&gt;summarize_author&lt;/code&gt; when we implement the trait on a type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc4c76af44cf81aae5a3bedd1a4fabcaf591ba2f" translate="yes" xml:space="preserve">
          <source>To wake up all threads, see &lt;a href=&quot;#method.notify_all&quot;&gt;&lt;code&gt;notify_all&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43d932c297a4d2b73e1f772e97d55db4b8e0dc93" translate="yes" xml:space="preserve">
          <source>To wake up only one thread, see &lt;a href=&quot;#method.notify_one&quot;&gt;&lt;code&gt;notify_one&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c88cf3ca8e9feae5d3beb7bbd55b97e74623d342" translate="yes" xml:space="preserve">
          <source>To work around this restriction, consider &quot;hiding&quot; the value behind a reference: either &lt;code&gt;&amp;amp;x&lt;/code&gt; or &lt;code&gt;&amp;amp;mut x&lt;/code&gt;. Since a reference has a fixed size, this lets you move it around as usual. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6500c202f483ded49d90dd12d80754b82fdf0dff" translate="yes" xml:space="preserve">
          <source>To work around this, it can be covered with a local type, &lt;code&gt;MyType&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36dd8bd129ed7bbb15977196b4ec891eb2cbcdbb" translate="yes" xml:space="preserve">
          <source>To work around this, we can use &lt;a href=&quot;#method.split_at_mut&quot;&gt;&lt;code&gt;split_at_mut&lt;/code&gt;&lt;/a&gt; to create two distinct mutable sub-slices from a slice:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24f7e027af97b0bcea482e03195ef7fce8ba5648" translate="yes" xml:space="preserve">
          <source>To work around this, we can use &lt;a href=&quot;#method.split_at_mut&quot;&gt;&lt;code&gt;split_at_mut&lt;/code&gt;&lt;/a&gt; to create two distinct sub-slices from a slice:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88426551199f60d0c53bc995bbba2a8ae94e26e1" translate="yes" xml:space="preserve">
          <source>To work with DSTs, Rust has a particular trait called the &lt;code&gt;Sized&lt;/code&gt; trait to determine whether or not a type&amp;rsquo;s size is known at compile time. This trait is automatically implemented for everything whose size is known at compile time. In addition, Rust implicitly adds a bound on &lt;code&gt;Sized&lt;/code&gt; to every generic function. That is, a generic function definition like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb14220cb77cbb7e4cc1fc269b18360bfeb61f7b" translate="yes" xml:space="preserve">
          <source>To yank a version of a crate, run &lt;code&gt;cargo yank&lt;/code&gt; and specify which version you want to yank:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="358ef599a863a7317d7b73949a61a65e9c8b5929" translate="yes" xml:space="preserve">
          <source>ToLowercase</source>
          <target state="translated">ToLowercase</target>
        </trans-unit>
        <trans-unit id="df38106c5dbe8437c114ca2d685149a2779acb46" translate="yes" xml:space="preserve">
          <source>ToLowercase::all</source>
          <target state="translated">ToLowercase::all</target>
        </trans-unit>
        <trans-unit id="bbeaa264c1c37f2bac007b1544ec3f5ad9fa247a" translate="yes" xml:space="preserve">
          <source>ToLowercase::any</source>
          <target state="translated">ToLowercase::any</target>
        </trans-unit>
        <trans-unit id="0a141811b0b02a8a6bc1f88e69b931b80579b5c2" translate="yes" xml:space="preserve">
          <source>ToLowercase::borrow</source>
          <target state="translated">ToLowercase::borrow</target>
        </trans-unit>
        <trans-unit id="cdeca1abdbe65f3026e21a79b8f904e797c979d8" translate="yes" xml:space="preserve">
          <source>ToLowercase::borrow_mut</source>
          <target state="translated">ToLowercase::borrow_mut</target>
        </trans-unit>
        <trans-unit id="04089a7fe4a382bdeab885ef9891fb5765277adf" translate="yes" xml:space="preserve">
          <source>ToLowercase::by_ref</source>
          <target state="translated">ToLowercase::by_ref</target>
        </trans-unit>
        <trans-unit id="a079ce9b966f7512985cc3db6325af88008cc5f5" translate="yes" xml:space="preserve">
          <source>ToLowercase::chain</source>
          <target state="translated">ToLowercase::chain</target>
        </trans-unit>
        <trans-unit id="34f89547554d65a0175fa66474bd90120ecce7b1" translate="yes" xml:space="preserve">
          <source>ToLowercase::clone</source>
          <target state="translated">ToLowercase::clone</target>
        </trans-unit>
        <trans-unit id="0a39078458104a1579ea1ffbefc1eff627ca4db9" translate="yes" xml:space="preserve">
          <source>ToLowercase::clone_from</source>
          <target state="translated">ToLowercase::clone_from</target>
        </trans-unit>
        <trans-unit id="69987693fa5c572002cf4a8687ae06044830821a" translate="yes" xml:space="preserve">
          <source>ToLowercase::clone_into</source>
          <target state="translated">ToLowercase::clone_into</target>
        </trans-unit>
        <trans-unit id="121cb5982b6d466308c6295488de685c5924188f" translate="yes" xml:space="preserve">
          <source>ToLowercase::cloned</source>
          <target state="translated">ToLowercase::cloned</target>
        </trans-unit>
        <trans-unit id="2a56c21b2935dd999e82afb8be288b273e7d2e4e" translate="yes" xml:space="preserve">
          <source>ToLowercase::cmp</source>
          <target state="translated">ToLowercase::cmp</target>
        </trans-unit>
        <trans-unit id="9a83c4a51b2449ab4001a1ea57020189f34eb86e" translate="yes" xml:space="preserve">
          <source>ToLowercase::collect</source>
          <target state="translated">ToLowercase::collect</target>
        </trans-unit>
        <trans-unit id="fc76b0e4ac6af8ee61de5ea6000b4e90b61281f6" translate="yes" xml:space="preserve">
          <source>ToLowercase::copied</source>
          <target state="translated">ToLowercase::copied</target>
        </trans-unit>
        <trans-unit id="ebd8500418acdbe357cc1847a2d0349da2ad6802" translate="yes" xml:space="preserve">
          <source>ToLowercase::count</source>
          <target state="translated">ToLowercase::count</target>
        </trans-unit>
        <trans-unit id="46c2bfc1c56cb3945b434e3354e83dfe8b8c506d" translate="yes" xml:space="preserve">
          <source>ToLowercase::cycle</source>
          <target state="translated">ToLowercase::cycle</target>
        </trans-unit>
        <trans-unit id="17c64b13d578e62f4865fa3a426a453511fad16f" translate="yes" xml:space="preserve">
          <source>ToLowercase::enumerate</source>
          <target state="translated">ToLowercase::enumerate</target>
        </trans-unit>
        <trans-unit id="22c6e7593fef2063b7782e7156f48b60a1a13824" translate="yes" xml:space="preserve">
          <source>ToLowercase::eq</source>
          <target state="translated">ToLowercase::eq</target>
        </trans-unit>
        <trans-unit id="a97a62afe9c15bee17e74d16036987e2c4a3f22a" translate="yes" xml:space="preserve">
          <source>ToLowercase::filter</source>
          <target state="translated">ToLowercase::filter</target>
        </trans-unit>
        <trans-unit id="282e7712aa0755dc3cee721bbb60ae3056ffd1b8" translate="yes" xml:space="preserve">
          <source>ToLowercase::filter_map</source>
          <target state="translated">ToLowercase::filter_map</target>
        </trans-unit>
        <trans-unit id="5e623530b92901b135346a206054ea74de34c74b" translate="yes" xml:space="preserve">
          <source>ToLowercase::find</source>
          <target state="translated">ToLowercase::find</target>
        </trans-unit>
        <trans-unit id="8199273d20714ffb35f8bf63fc8de1aeeb62aaaf" translate="yes" xml:space="preserve">
          <source>ToLowercase::find_map</source>
          <target state="translated">ToLowercase::find_map</target>
        </trans-unit>
        <trans-unit id="4ed7f75d1d13393082ea7b8eeecf7e820cecc331" translate="yes" xml:space="preserve">
          <source>ToLowercase::flat_map</source>
          <target state="translated">ToLowercase::flat_map</target>
        </trans-unit>
        <trans-unit id="8faef9a1d718b76295200253966c7806e7cdc59c" translate="yes" xml:space="preserve">
          <source>ToLowercase::flatten</source>
          <target state="translated">ToLowercase::flatten</target>
        </trans-unit>
        <trans-unit id="d060a84d6f235fd2215550273860f38eeab5eccf" translate="yes" xml:space="preserve">
          <source>ToLowercase::fmt</source>
          <target state="translated">ToLowercase::fmt</target>
        </trans-unit>
        <trans-unit id="8131b5a5bcf84d17a43fb10e483ba9ff1d8d359c" translate="yes" xml:space="preserve">
          <source>ToLowercase::fold</source>
          <target state="translated">ToLowercase::fold</target>
        </trans-unit>
        <trans-unit id="327b78b92e355c99705bbf603c2bb143fa92d2e9" translate="yes" xml:space="preserve">
          <source>ToLowercase::for_each</source>
          <target state="translated">ToLowercase::for_each</target>
        </trans-unit>
        <trans-unit id="c1d00ad3539f24458681e04a1741cd54badd39cf" translate="yes" xml:space="preserve">
          <source>ToLowercase::from</source>
          <target state="translated">ToLowercase::from</target>
        </trans-unit>
        <trans-unit id="7d595874443f42a9e344ead1449f7c72a2522b74" translate="yes" xml:space="preserve">
          <source>ToLowercase::fuse</source>
          <target state="translated">ToLowercase::fuse</target>
        </trans-unit>
        <trans-unit id="5f012ebb8814c9cf77a450ef55b693640b7421e7" translate="yes" xml:space="preserve">
          <source>ToLowercase::ge</source>
          <target state="translated">ToLowercase::ge</target>
        </trans-unit>
        <trans-unit id="a451e0c1969a73439fef2468147038b278d489fd" translate="yes" xml:space="preserve">
          <source>ToLowercase::gt</source>
          <target state="translated">ToLowercase::gt</target>
        </trans-unit>
        <trans-unit id="642b22a76015cab4922545ce0b1b8fce9e09e5ed" translate="yes" xml:space="preserve">
          <source>ToLowercase::inspect</source>
          <target state="translated">ToLowercase::inspect</target>
        </trans-unit>
        <trans-unit id="7ca3893f4299d51675bc4e51e48ab78b6e95e7ae" translate="yes" xml:space="preserve">
          <source>ToLowercase::into</source>
          <target state="translated">ToLowercase::into</target>
        </trans-unit>
        <trans-unit id="9baa58c23f7e0d689b278ecfab3e39c8efae52c3" translate="yes" xml:space="preserve">
          <source>ToLowercase::into_iter</source>
          <target state="translated">ToLowercase::into_iter</target>
        </trans-unit>
        <trans-unit id="41740e63b2346c1e13490d8bb5f5d3524774e936" translate="yes" xml:space="preserve">
          <source>ToLowercase::is_empty</source>
          <target state="translated">ToLowercase::is_empty</target>
        </trans-unit>
        <trans-unit id="0a3555fc3fa048af9c1a10c2d056047061c3acad" translate="yes" xml:space="preserve">
          <source>ToLowercase::is_sorted</source>
          <target state="translated">ToLowercase::is_sorted</target>
        </trans-unit>
        <trans-unit id="d1e0425d483ec70bb6984df2a767d8b9e4f434c4" translate="yes" xml:space="preserve">
          <source>ToLowercase::is_sorted_by</source>
          <target state="translated">ToLowercase::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="a66c5bf8964eab56ac90671d7ee744d61569a85f" translate="yes" xml:space="preserve">
          <source>ToLowercase::is_sorted_by_key</source>
          <target state="translated">ToLowercase::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="f9ef704f171d5f967ad9a902b9e6c885aa657d95" translate="yes" xml:space="preserve">
          <source>ToLowercase::last</source>
          <target state="translated">ToLowercase::last</target>
        </trans-unit>
        <trans-unit id="d3f98dd839d26ad724880104a40c7e70d33d18c3" translate="yes" xml:space="preserve">
          <source>ToLowercase::le</source>
          <target state="translated">ToLowercase::le</target>
        </trans-unit>
        <trans-unit id="e1ba36fd3934ba511b5d0af5c6f135a35664771b" translate="yes" xml:space="preserve">
          <source>ToLowercase::len</source>
          <target state="translated">ToLowercase::len</target>
        </trans-unit>
        <trans-unit id="2eed1cdf88b1cb0a9fa1233f81e8f43967248498" translate="yes" xml:space="preserve">
          <source>ToLowercase::lt</source>
          <target state="translated">ToLowercase::lt</target>
        </trans-unit>
        <trans-unit id="e43226c948078b9cc9aebaa496f80af6656f0917" translate="yes" xml:space="preserve">
          <source>ToLowercase::map</source>
          <target state="translated">ToLowercase::map</target>
        </trans-unit>
        <trans-unit id="e0c53789432635e282bac9afc1520196b7c560e8" translate="yes" xml:space="preserve">
          <source>ToLowercase::max</source>
          <target state="translated">ToLowercase::max</target>
        </trans-unit>
        <trans-unit id="903a830f2d66f982a4644a703e0e8e4957273461" translate="yes" xml:space="preserve">
          <source>ToLowercase::max_by</source>
          <target state="translated">ToLowercase::max_by</target>
        </trans-unit>
        <trans-unit id="18bae373fc9373515a693f2601a3ad81cbde3459" translate="yes" xml:space="preserve">
          <source>ToLowercase::max_by_key</source>
          <target state="translated">ToLowercase::max_by_key</target>
        </trans-unit>
        <trans-unit id="bb9afa7050228536bbc7504f5c5dfc47a13e78c0" translate="yes" xml:space="preserve">
          <source>ToLowercase::min</source>
          <target state="translated">ToLowercase::min</target>
        </trans-unit>
        <trans-unit id="77c4813b999aa04010a0f28c8553bcc6214e1616" translate="yes" xml:space="preserve">
          <source>ToLowercase::min_by</source>
          <target state="translated">ToLowercase::min_by</target>
        </trans-unit>
        <trans-unit id="423a7c3614737a7cb7033368fb85813297ba5915" translate="yes" xml:space="preserve">
          <source>ToLowercase::min_by_key</source>
          <target state="translated">ToLowercase::min_by_key</target>
        </trans-unit>
        <trans-unit id="45cf81c6356fb6305106b81d4e38e7f435f86cc1" translate="yes" xml:space="preserve">
          <source>ToLowercase::ne</source>
          <target state="translated">ToLowercase::ne</target>
        </trans-unit>
        <trans-unit id="a71fc3ee26e013ac8645c417796e09cd264a122e" translate="yes" xml:space="preserve">
          <source>ToLowercase::next</source>
          <target state="translated">ToLowercase::next</target>
        </trans-unit>
        <trans-unit id="1911198040fb257baaa909fbd9e0ff4bd63738b2" translate="yes" xml:space="preserve">
          <source>ToLowercase::nth</source>
          <target state="translated">ToLowercase::nth</target>
        </trans-unit>
        <trans-unit id="8e0ec3fa9f7c6b4e02f5cdbcceafdedd84b428e3" translate="yes" xml:space="preserve">
          <source>ToLowercase::partial_cmp</source>
          <target state="translated">ToLowercase::partial_cmp</target>
        </trans-unit>
        <trans-unit id="47c77ae9e15794fc333d6ed8815d4414bb103610" translate="yes" xml:space="preserve">
          <source>ToLowercase::partition</source>
          <target state="translated">ToLowercase::partition</target>
        </trans-unit>
        <trans-unit id="75ec1c2334a1ca3250b6d8818285245c4e4389b7" translate="yes" xml:space="preserve">
          <source>ToLowercase::peekable</source>
          <target state="translated">ToLowercase::peekable</target>
        </trans-unit>
        <trans-unit id="5bd4eb545154844db83963b7bf6e24d4160c4184" translate="yes" xml:space="preserve">
          <source>ToLowercase::position</source>
          <target state="translated">ToLowercase::position</target>
        </trans-unit>
        <trans-unit id="da1c2a6ce254ef365fc893f21ebcfb9884ec4d92" translate="yes" xml:space="preserve">
          <source>ToLowercase::product</source>
          <target state="translated">ToLowercase::product</target>
        </trans-unit>
        <trans-unit id="7513906fb803029e9d762eb5a94c745eb5662524" translate="yes" xml:space="preserve">
          <source>ToLowercase::rev</source>
          <target state="translated">ToLowercase::rev</target>
        </trans-unit>
        <trans-unit id="418774bd5cf3162562c6090441d234e9d61a03d7" translate="yes" xml:space="preserve">
          <source>ToLowercase::rposition</source>
          <target state="translated">ToLowercase::rposition</target>
        </trans-unit>
        <trans-unit id="9b317c9f2c5a4d58ea3427624437ce70f6752c98" translate="yes" xml:space="preserve">
          <source>ToLowercase::scan</source>
          <target state="translated">ToLowercase::scan</target>
        </trans-unit>
        <trans-unit id="2347172afd0d4f896ed7b4c55d0f9d8e2916251b" translate="yes" xml:space="preserve">
          <source>ToLowercase::size_hint</source>
          <target state="translated">ToLowercase::size_hint</target>
        </trans-unit>
        <trans-unit id="418c2ea2c35afdc50dcf9a90930d3ce62e8f3999" translate="yes" xml:space="preserve">
          <source>ToLowercase::skip</source>
          <target state="translated">ToLowercase::skip</target>
        </trans-unit>
        <trans-unit id="95df49075bec9d23f70a04c44f6a727846e429e6" translate="yes" xml:space="preserve">
          <source>ToLowercase::skip_while</source>
          <target state="translated">ToLowercase::skip_while</target>
        </trans-unit>
        <trans-unit id="b9d44057d9ed2703572ffed49f6eca5288b3d100" translate="yes" xml:space="preserve">
          <source>ToLowercase::step_by</source>
          <target state="translated">ToLowercase::step_by</target>
        </trans-unit>
        <trans-unit id="12fc6d57d9454f947a272a38199873e4fabe30e6" translate="yes" xml:space="preserve">
          <source>ToLowercase::sum</source>
          <target state="translated">ToLowercase::sum</target>
        </trans-unit>
        <trans-unit id="0f151b1e0bb55576903eeeb5a1d3d1df40fa455c" translate="yes" xml:space="preserve">
          <source>ToLowercase::take</source>
          <target state="translated">ToLowercase::take</target>
        </trans-unit>
        <trans-unit id="bb7ec83ca1b296882f68aab3b80d313fe4becdda" translate="yes" xml:space="preserve">
          <source>ToLowercase::take_while</source>
          <target state="translated">ToLowercase::take_while</target>
        </trans-unit>
        <trans-unit id="4ee080cf3eb36fa9ffb413ea40781d5206121d04" translate="yes" xml:space="preserve">
          <source>ToLowercase::to_owned</source>
          <target state="translated">ToLowercase::to_owned</target>
        </trans-unit>
        <trans-unit id="89719f79b975bafdc49f6c2bf1b53c77dd82479f" translate="yes" xml:space="preserve">
          <source>ToLowercase::to_string</source>
          <target state="translated">ToLowercase::to_string</target>
        </trans-unit>
        <trans-unit id="02fb5f5e1e24ebbf9a57d55d395e203de6f1bb79" translate="yes" xml:space="preserve">
          <source>ToLowercase::try_fold</source>
          <target state="translated">ToLowercase::try_fold</target>
        </trans-unit>
        <trans-unit id="24adb2676fd932bafa66d72575c91291c6415cb3" translate="yes" xml:space="preserve">
          <source>ToLowercase::try_for_each</source>
          <target state="translated">ToLowercase::try_for_each</target>
        </trans-unit>
        <trans-unit id="ca18cfcbad0e84fa95fbec8b5bfb913cdebdfd50" translate="yes" xml:space="preserve">
          <source>ToLowercase::try_from</source>
          <target state="translated">ToLowercase::try_from</target>
        </trans-unit>
        <trans-unit id="e06d04b43ebaa98937e8ae299a145ab53f8f8401" translate="yes" xml:space="preserve">
          <source>ToLowercase::try_into</source>
          <target state="translated">ToLowercase::try_into</target>
        </trans-unit>
        <trans-unit id="37b6363c64db2b818bf5770928eeb9cb5799b27c" translate="yes" xml:space="preserve">
          <source>ToLowercase::type_id</source>
          <target state="translated">ToLowercase::type_id</target>
        </trans-unit>
        <trans-unit id="5dab7a97b855d1005e423aac5a301136ccbfbda8" translate="yes" xml:space="preserve">
          <source>ToLowercase::unzip</source>
          <target state="translated">ToLowercase::unzip</target>
        </trans-unit>
        <trans-unit id="8c6300316ee7d9e235cf97abcd7ffe7ee60f526a" translate="yes" xml:space="preserve">
          <source>ToLowercase::zip</source>
          <target state="translated">ToLowercase::zip</target>
        </trans-unit>
        <trans-unit id="6a954abfe9e5f07fb766f0356ed1234d8f9b2362" translate="yes" xml:space="preserve">
          <source>ToOwned</source>
          <target state="translated">ToOwned</target>
        </trans-unit>
        <trans-unit id="88395f188f7e1627b5813c10232224a853eb2ce1" translate="yes" xml:space="preserve">
          <source>ToOwned::clone_into</source>
          <target state="translated">ToOwned::clone_into</target>
        </trans-unit>
        <trans-unit id="b54aeb29a238430e61c4864d679de09e146fc8bd" translate="yes" xml:space="preserve">
          <source>ToOwned::to_owned</source>
          <target state="translated">ToOwned::to_owned</target>
        </trans-unit>
        <trans-unit id="db76836dc2d12f75bc694c079718628342759cd3" translate="yes" xml:space="preserve">
          <source>ToSocketAddrs</source>
          <target state="translated">ToSocketAddrs</target>
        </trans-unit>
        <trans-unit id="0fed83f8d392d8ac77157990f089f9649d9b7750" translate="yes" xml:space="preserve">
          <source>ToSocketAddrs::to_socket_addrs</source>
          <target state="translated">ToSocketAddrs::to_socket_addrs</target>
        </trans-unit>
        <trans-unit id="1dbc7385badbfda548fb27e2160a33cf32c0f545" translate="yes" xml:space="preserve">
          <source>ToString</source>
          <target state="translated">ToString</target>
        </trans-unit>
        <trans-unit id="44b9808561fdc5221237b58497f052b0ab411690" translate="yes" xml:space="preserve">
          <source>ToString::to_string</source>
          <target state="translated">ToString::to_string</target>
        </trans-unit>
        <trans-unit id="0e33b561569f62cb10ee567c1f64d4f901389c05" translate="yes" xml:space="preserve">
          <source>ToUppercase</source>
          <target state="translated">ToUppercase</target>
        </trans-unit>
        <trans-unit id="9ff9a36e95ac5564578763dcb0e10b5a089787be" translate="yes" xml:space="preserve">
          <source>ToUppercase::all</source>
          <target state="translated">ToUppercase::all</target>
        </trans-unit>
        <trans-unit id="65730a9e88411b06193ba55e82da8ee1907a8064" translate="yes" xml:space="preserve">
          <source>ToUppercase::any</source>
          <target state="translated">ToUppercase::any</target>
        </trans-unit>
        <trans-unit id="7bbc3824337aaeab2c429030633a1af5ed905e80" translate="yes" xml:space="preserve">
          <source>ToUppercase::borrow</source>
          <target state="translated">ToUppercase::borrow</target>
        </trans-unit>
        <trans-unit id="054e212cd833cb188e6198592b3d47a12224a8d7" translate="yes" xml:space="preserve">
          <source>ToUppercase::borrow_mut</source>
          <target state="translated">ToUppercase::borrow_mut</target>
        </trans-unit>
        <trans-unit id="6cb0a8be2d9bacab3bc53f929148bf74eddc427a" translate="yes" xml:space="preserve">
          <source>ToUppercase::by_ref</source>
          <target state="translated">ToUppercase::by_ref</target>
        </trans-unit>
        <trans-unit id="f6523db9347a61697b6b9197bca2d6fba8a42d3c" translate="yes" xml:space="preserve">
          <source>ToUppercase::chain</source>
          <target state="translated">ToUppercase::chain</target>
        </trans-unit>
        <trans-unit id="c0aca2868b888310176cab83baeec3b2d775557f" translate="yes" xml:space="preserve">
          <source>ToUppercase::clone</source>
          <target state="translated">ToUppercase::clone</target>
        </trans-unit>
        <trans-unit id="67fd93e201a873e97c66908ead7ceae8bc1e8a92" translate="yes" xml:space="preserve">
          <source>ToUppercase::clone_from</source>
          <target state="translated">ToUppercase::clone_from</target>
        </trans-unit>
        <trans-unit id="b84ef7303ff66cf2803f532b77195b1cf5d457a1" translate="yes" xml:space="preserve">
          <source>ToUppercase::clone_into</source>
          <target state="translated">ToUppercase::clone_into</target>
        </trans-unit>
        <trans-unit id="5ccbf12c4818e31f1595aa777831465b36f69a51" translate="yes" xml:space="preserve">
          <source>ToUppercase::cloned</source>
          <target state="translated">ToUppercase::cloned</target>
        </trans-unit>
        <trans-unit id="a8f2e905cd5750074d352d368e76df6b39f96427" translate="yes" xml:space="preserve">
          <source>ToUppercase::cmp</source>
          <target state="translated">ToUppercase::cmp</target>
        </trans-unit>
        <trans-unit id="1dc5a2f9004fb521903e5e5a3fd364dc11757205" translate="yes" xml:space="preserve">
          <source>ToUppercase::collect</source>
          <target state="translated">ToUppercase::collect</target>
        </trans-unit>
        <trans-unit id="af8f9ceea80fc5e950363e9318dd158d01a4d040" translate="yes" xml:space="preserve">
          <source>ToUppercase::copied</source>
          <target state="translated">ToUppercase::copied</target>
        </trans-unit>
        <trans-unit id="1366fc011a472ff5d53cde6f1ac86461228351e7" translate="yes" xml:space="preserve">
          <source>ToUppercase::count</source>
          <target state="translated">ToUppercase::count</target>
        </trans-unit>
        <trans-unit id="1184c3c693dff48405ca7548cca0ed458ff29830" translate="yes" xml:space="preserve">
          <source>ToUppercase::cycle</source>
          <target state="translated">ToUppercase::cycle</target>
        </trans-unit>
        <trans-unit id="4e91911466f6b5af4078b70e11c4d24775fe742f" translate="yes" xml:space="preserve">
          <source>ToUppercase::enumerate</source>
          <target state="translated">ToUppercase::enumerate</target>
        </trans-unit>
        <trans-unit id="7840d75ecceac6bb8014df3896750d9d72c6c4f4" translate="yes" xml:space="preserve">
          <source>ToUppercase::eq</source>
          <target state="translated">ToUppercase::eq</target>
        </trans-unit>
        <trans-unit id="2a9bfa9a45635d09ff4f0e7dbad7c78cf4865a99" translate="yes" xml:space="preserve">
          <source>ToUppercase::filter</source>
          <target state="translated">ToUppercase::filter</target>
        </trans-unit>
        <trans-unit id="a2ce94b0c7944e165ba6c67b1e1d6438853b3133" translate="yes" xml:space="preserve">
          <source>ToUppercase::filter_map</source>
          <target state="translated">ToUppercase::filter_map</target>
        </trans-unit>
        <trans-unit id="33b7908aaa91c2cca1edd3fbd1eb5ed2b7161ab8" translate="yes" xml:space="preserve">
          <source>ToUppercase::find</source>
          <target state="translated">ToUppercase::find</target>
        </trans-unit>
        <trans-unit id="26582c132713274fb6090fc39fe168d493ee012a" translate="yes" xml:space="preserve">
          <source>ToUppercase::find_map</source>
          <target state="translated">ToUppercase::find_map</target>
        </trans-unit>
        <trans-unit id="d2233ee6bb72d979bc01f41100247c5902cf0607" translate="yes" xml:space="preserve">
          <source>ToUppercase::flat_map</source>
          <target state="translated">ToUppercase::flat_map</target>
        </trans-unit>
        <trans-unit id="bc467f30c7752c24841765febf75cc9fdc574574" translate="yes" xml:space="preserve">
          <source>ToUppercase::flatten</source>
          <target state="translated">ToUppercase::flatten</target>
        </trans-unit>
        <trans-unit id="da04bbd5685fac2d5a4df3c9db6cca8ac3ddfa78" translate="yes" xml:space="preserve">
          <source>ToUppercase::fmt</source>
          <target state="translated">ToUppercase::fmt</target>
        </trans-unit>
        <trans-unit id="dab772b50aae344c74f698ba5170622c5f015ee3" translate="yes" xml:space="preserve">
          <source>ToUppercase::fold</source>
          <target state="translated">ToUppercase::fold</target>
        </trans-unit>
        <trans-unit id="771853b6cd0b3a3d225b473ef9703bb5e4303729" translate="yes" xml:space="preserve">
          <source>ToUppercase::for_each</source>
          <target state="translated">ToUppercase::for_each</target>
        </trans-unit>
        <trans-unit id="8ce8c4bb893f0605c572e1569c0a3c898fc706ea" translate="yes" xml:space="preserve">
          <source>ToUppercase::from</source>
          <target state="translated">ToUppercase::from</target>
        </trans-unit>
        <trans-unit id="e5bc2c74a5fd665c9a82c2a33e80270730f97b12" translate="yes" xml:space="preserve">
          <source>ToUppercase::fuse</source>
          <target state="translated">ToUppercase::fuse</target>
        </trans-unit>
        <trans-unit id="20067e8f8574346c33f6af0deb21cc95edf75430" translate="yes" xml:space="preserve">
          <source>ToUppercase::ge</source>
          <target state="translated">ToUppercase::ge</target>
        </trans-unit>
        <trans-unit id="d691aa9e30d434c7acd37842ea89626858043c5a" translate="yes" xml:space="preserve">
          <source>ToUppercase::gt</source>
          <target state="translated">ToUppercase::gt</target>
        </trans-unit>
        <trans-unit id="2c07bcd9aa88f2987da2c05609b8b051fbd0bd49" translate="yes" xml:space="preserve">
          <source>ToUppercase::inspect</source>
          <target state="translated">ToUppercase::inspect</target>
        </trans-unit>
        <trans-unit id="fdebac9771e781ff415a919dcfc0e2e2f813f95f" translate="yes" xml:space="preserve">
          <source>ToUppercase::into</source>
          <target state="translated">ToUppercase::into</target>
        </trans-unit>
        <trans-unit id="28c925e3769d53d774548da83c53adf049d9614e" translate="yes" xml:space="preserve">
          <source>ToUppercase::into_iter</source>
          <target state="translated">ToUppercase::into_iter</target>
        </trans-unit>
        <trans-unit id="bf3856a1c7cdbe8a6b0b5d5447d4f1dda66c5b87" translate="yes" xml:space="preserve">
          <source>ToUppercase::is_empty</source>
          <target state="translated">ToUppercase::is_empty</target>
        </trans-unit>
        <trans-unit id="e56ebe838b86d90990ba23ebb8e7d7b475bfba70" translate="yes" xml:space="preserve">
          <source>ToUppercase::is_sorted</source>
          <target state="translated">ToUppercase::is_sorted</target>
        </trans-unit>
        <trans-unit id="e213f890c3567bf89ebbd96dd28396c3c8369989" translate="yes" xml:space="preserve">
          <source>ToUppercase::is_sorted_by</source>
          <target state="translated">ToUppercase::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="4214e06077f37c115583c69ea8457f9ca4ca03c8" translate="yes" xml:space="preserve">
          <source>ToUppercase::is_sorted_by_key</source>
          <target state="translated">ToUppercase::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="43c20634324c1e57c53610dd095c7b85f97be6a8" translate="yes" xml:space="preserve">
          <source>ToUppercase::last</source>
          <target state="translated">ToUppercase::last</target>
        </trans-unit>
        <trans-unit id="e15b9289846aa62aa7c399eec130546dddf92570" translate="yes" xml:space="preserve">
          <source>ToUppercase::le</source>
          <target state="translated">ToUppercase::le</target>
        </trans-unit>
        <trans-unit id="bf4ae1725f8c939f34b0f3698672e2eca8d46e36" translate="yes" xml:space="preserve">
          <source>ToUppercase::len</source>
          <target state="translated">ToUppercase::len</target>
        </trans-unit>
        <trans-unit id="6ef86484cb6e83aca67edc255bfe91855fddeaee" translate="yes" xml:space="preserve">
          <source>ToUppercase::lt</source>
          <target state="translated">ToUppercase::lt</target>
        </trans-unit>
        <trans-unit id="36fb30f84e7d12187cc3a5d20674f0ffa2e7e434" translate="yes" xml:space="preserve">
          <source>ToUppercase::map</source>
          <target state="translated">ToUppercase::map</target>
        </trans-unit>
        <trans-unit id="a5794f06c8f621ebfd36483cb2bdfba69962a46b" translate="yes" xml:space="preserve">
          <source>ToUppercase::max</source>
          <target state="translated">ToUppercase::max</target>
        </trans-unit>
        <trans-unit id="54ed5ffb42b174875a2cfcdf299aa03324e7d8e8" translate="yes" xml:space="preserve">
          <source>ToUppercase::max_by</source>
          <target state="translated">ToUppercase::max_by</target>
        </trans-unit>
        <trans-unit id="82140a942c03457466b33d70a38f8b426ee443a8" translate="yes" xml:space="preserve">
          <source>ToUppercase::max_by_key</source>
          <target state="translated">ToUppercase::max_by_key</target>
        </trans-unit>
        <trans-unit id="8c46ff457e70dbefd5377da1fe14a1d716feed69" translate="yes" xml:space="preserve">
          <source>ToUppercase::min</source>
          <target state="translated">ToUppercase::min</target>
        </trans-unit>
        <trans-unit id="1f4f06fa647a15bfd6777e3ad80989539da952c2" translate="yes" xml:space="preserve">
          <source>ToUppercase::min_by</source>
          <target state="translated">ToUppercase::min_by</target>
        </trans-unit>
        <trans-unit id="d2ca7b43662db6e83751c9781321c5f447b69b54" translate="yes" xml:space="preserve">
          <source>ToUppercase::min_by_key</source>
          <target state="translated">ToUppercase::min_by_key</target>
        </trans-unit>
        <trans-unit id="a2c10d642735dd01dd2230f6eb42d2d15de01ca4" translate="yes" xml:space="preserve">
          <source>ToUppercase::ne</source>
          <target state="translated">ToUppercase::ne</target>
        </trans-unit>
        <trans-unit id="bdcf8b574275972312b79411fc90c298fec5c707" translate="yes" xml:space="preserve">
          <source>ToUppercase::next</source>
          <target state="translated">ToUppercase::next</target>
        </trans-unit>
        <trans-unit id="d3b98223ff39c0cf8bc6901176a913dbb5af5a3f" translate="yes" xml:space="preserve">
          <source>ToUppercase::nth</source>
          <target state="translated">ToUppercase::nth</target>
        </trans-unit>
        <trans-unit id="ac55c59ffb3d1b90b5281f1cdb8221031a9f3d86" translate="yes" xml:space="preserve">
          <source>ToUppercase::partial_cmp</source>
          <target state="translated">ToUppercase::partial_cmp</target>
        </trans-unit>
        <trans-unit id="43ba4010531c56c76a71cac5c7783bb9326c06ff" translate="yes" xml:space="preserve">
          <source>ToUppercase::partition</source>
          <target state="translated">ToUppercase::partition</target>
        </trans-unit>
        <trans-unit id="8a67cd96d9e9df3939b7f6b2d037a84acda5915a" translate="yes" xml:space="preserve">
          <source>ToUppercase::peekable</source>
          <target state="translated">ToUppercase::peekable</target>
        </trans-unit>
        <trans-unit id="c5de4cd05b5eea91f6372ea13496d89698a886d9" translate="yes" xml:space="preserve">
          <source>ToUppercase::position</source>
          <target state="translated">ToUppercase::position</target>
        </trans-unit>
        <trans-unit id="3276e7acdf8a52ca46452466df5445f95d4c42ce" translate="yes" xml:space="preserve">
          <source>ToUppercase::product</source>
          <target state="translated">ToUppercase::product</target>
        </trans-unit>
        <trans-unit id="2ec3aca6fa0998e131a8dbb7e0429f53b8e20e3a" translate="yes" xml:space="preserve">
          <source>ToUppercase::rev</source>
          <target state="translated">ToUppercase::rev</target>
        </trans-unit>
        <trans-unit id="1f5b04931231d64a89f93330632ae0491d9a8306" translate="yes" xml:space="preserve">
          <source>ToUppercase::rposition</source>
          <target state="translated">ToUppercase::rposition</target>
        </trans-unit>
        <trans-unit id="bd0bd16a7f62be84e2b4f57e866e556615bf5f51" translate="yes" xml:space="preserve">
          <source>ToUppercase::scan</source>
          <target state="translated">ToUppercase::scan</target>
        </trans-unit>
        <trans-unit id="c12a079f9acc9eb022d00c3c9e691984df24e3dd" translate="yes" xml:space="preserve">
          <source>ToUppercase::size_hint</source>
          <target state="translated">ToUppercase::size_hint</target>
        </trans-unit>
        <trans-unit id="36cc8342ae3ebfcc66e29de8713ad4b5d25ed1ec" translate="yes" xml:space="preserve">
          <source>ToUppercase::skip</source>
          <target state="translated">ToUppercase::skip</target>
        </trans-unit>
        <trans-unit id="bc763b46d6ffe3cde30022e6b310b987fb4690fc" translate="yes" xml:space="preserve">
          <source>ToUppercase::skip_while</source>
          <target state="translated">ToUppercase::skip_while</target>
        </trans-unit>
        <trans-unit id="bdd73144830ccf5acc66a08a0eb4055b58dd100c" translate="yes" xml:space="preserve">
          <source>ToUppercase::step_by</source>
          <target state="translated">ToUppercase::step_by</target>
        </trans-unit>
        <trans-unit id="355510b3a2c94feee0516eb6236e6b26c520c86f" translate="yes" xml:space="preserve">
          <source>ToUppercase::sum</source>
          <target state="translated">ToUppercase::sum</target>
        </trans-unit>
        <trans-unit id="5f1bfaa41ae891ff2a87080b765b405813dfaf1e" translate="yes" xml:space="preserve">
          <source>ToUppercase::take</source>
          <target state="translated">ToUppercase::take</target>
        </trans-unit>
        <trans-unit id="ace4eaaac22836c883eb26f26b69083a1e81c44a" translate="yes" xml:space="preserve">
          <source>ToUppercase::take_while</source>
          <target state="translated">ToUppercase::take_while</target>
        </trans-unit>
        <trans-unit id="aeac81822411ec59962d593c1135903013fb64dd" translate="yes" xml:space="preserve">
          <source>ToUppercase::to_owned</source>
          <target state="translated">ToUppercase::to_owned</target>
        </trans-unit>
        <trans-unit id="c254c93eabb3947af47ca116107ff60db0f65f9f" translate="yes" xml:space="preserve">
          <source>ToUppercase::to_string</source>
          <target state="translated">ToUppercase::to_string</target>
        </trans-unit>
        <trans-unit id="9586835b3ffa68bc81bff272ded62df7bfd896a5" translate="yes" xml:space="preserve">
          <source>ToUppercase::try_fold</source>
          <target state="translated">ToUppercase::try_fold</target>
        </trans-unit>
        <trans-unit id="3285dc30d7466785bb24e349a2a90f48ee1105df" translate="yes" xml:space="preserve">
          <source>ToUppercase::try_for_each</source>
          <target state="translated">ToUppercase::try_for_each</target>
        </trans-unit>
        <trans-unit id="f78675d80da0fb2dc076781338842ee7388e6bbb" translate="yes" xml:space="preserve">
          <source>ToUppercase::try_from</source>
          <target state="translated">ToUppercase::try_from</target>
        </trans-unit>
        <trans-unit id="bbc85f420c55ff506706c343e3d016f559155d33" translate="yes" xml:space="preserve">
          <source>ToUppercase::try_into</source>
          <target state="translated">ToUppercase::try_into</target>
        </trans-unit>
        <trans-unit id="67c5523cb2fdea348c069bcedcae5b194e0fa100" translate="yes" xml:space="preserve">
          <source>ToUppercase::type_id</source>
          <target state="translated">ToUppercase::type_id</target>
        </trans-unit>
        <trans-unit id="59512192fd21e6e15883e4c5f16fa785a7ae4b9e" translate="yes" xml:space="preserve">
          <source>ToUppercase::unzip</source>
          <target state="translated">ToUppercase::unzip</target>
        </trans-unit>
        <trans-unit id="71c5320853e9bf97d3c8e47e587d200e6ab7e991" translate="yes" xml:space="preserve">
          <source>ToUppercase::zip</source>
          <target state="translated">ToUppercase::zip</target>
        </trans-unit>
        <trans-unit id="c38c6c1f3a2743f8626703abb302e403d20ff81c" translate="yes" xml:space="preserve">
          <source>Tokens</source>
          <target state="translated">Tokens</target>
        </trans-unit>
        <trans-unit id="23b07a92f99f26864b1d4cab09dbe7e6ffc01402" translate="yes" xml:space="preserve">
          <source>Tokens are primitive productions in the grammar defined by regular (non-recursive) languages. Rust source input can be broken down into the following kinds of tokens:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3997b5b9595479642fa6a353b8f62de4c85bdb4" translate="yes" xml:space="preserve">
          <source>Too few type arguments were supplied for a function. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b64cc80b4d048074e951f53af2266c9b980ecc1d" translate="yes" xml:space="preserve">
          <source>Too many type arguments were supplied for a function. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3becdad8640a8a7664cb1587373bbed530e9eaef" translate="yes" xml:space="preserve">
          <source>Tool attributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="298b5435880f729f28b40fb8cb4d6d358f7d7bda" translate="yes" xml:space="preserve">
          <source>Tool attributes are not available if the &lt;a href=&quot;items/modules#prelude-items&quot;&gt;&lt;code&gt;no_implicit_prelude&lt;/code&gt;&lt;/a&gt; attribute is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04ecf72079460c624f56de2aec19167e9b592e5f" translate="yes" xml:space="preserve">
          <source>Tool lint attributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e4ff695f8d7f54d10234c8c693febf11bceeb0a" translate="yes" xml:space="preserve">
          <source>Tool lints allows using scoped lints, to &lt;code&gt;allow&lt;/code&gt;, &lt;code&gt;warn&lt;/code&gt;, &lt;code&gt;deny&lt;/code&gt; or &lt;code&gt;forbid&lt;/code&gt; lints of certain tools.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0cfacecf587078db6db43488caa6d580978c4bb" translate="yes" xml:space="preserve">
          <source>Tool lints only get checked when the associated tool is active. If a lint attribute, such as &lt;code&gt;allow&lt;/code&gt;, references a nonexistent tool lint, the compiler will not warn about the nonexistent lint until you use the tool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b3bf7074f1000742128073f003a13e0d75375fa" translate="yes" xml:space="preserve">
          <source>Tracking the inebriation of customers at a bar</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a6c5b14d85fb7777855348d57172119a05a9066" translate="yes" xml:space="preserve">
          <source>Trade-offs of the State Pattern</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b36366d44b437b0f859e29f4614b0107cecfe355" translate="yes" xml:space="preserve">
          <source>Trait</source>
          <target state="translated">Trait</target>
        </trans-unit>
        <trans-unit id="7418cda1dddd9f707baf2b1acabeb7297ddae8f4" translate="yes" xml:space="preserve">
          <source>Trait Bound Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79d040a039f209d4b088e4414045e49f19a318f9" translate="yes" xml:space="preserve">
          <source>Trait Implementation Coherence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26b898f7f42ac0607067211907cfe144baef2099" translate="yes" xml:space="preserve">
          <source>Trait Implementations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29c33623e3eecc134b62bfbdf8421daa25449235" translate="yes" xml:space="preserve">
          <source>Trait Object Layout</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d17f32f109df2cae8776e118c0cd08d010484eb" translate="yes" xml:space="preserve">
          <source>Trait Object Lifetime Bounds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f2fa6f9f52d26ee86cd56ce4895853eea3665a6" translate="yes" xml:space="preserve">
          <source>Trait Objects Perform Dynamic Dispatch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a75e14ab76ff0ab816d5d3c2937abd862e423b2f" translate="yes" xml:space="preserve">
          <source>Trait and lifetime bounds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41af368f93d8a39d7122b161977ffe16f6a12e35" translate="yes" xml:space="preserve">
          <source>Trait and lifetime bounds are also used to name &lt;a href=&quot;types/trait-object&quot;&gt;trait objects&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="941497474640686e1a5e201b7a0add49b752830f" translate="yes" xml:space="preserve">
          <source>Trait bounds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fcf62d60d13dd717001ca9dd0618f2bf25f60fb" translate="yes" xml:space="preserve">
          <source>Trait for equality comparisons which are &lt;a href=&quot;http://en.wikipedia.org/wiki/Partial_equivalence_relation&quot;&gt;partial equivalence relations&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef0a7e79d3d4953fe69d9a8d5ee6294c86326bfd" translate="yes" xml:space="preserve">
          <source>Trait for equality comparisons which are &lt;a href=&quot;https://en.wikipedia.org/wiki/Equivalence_relation&quot;&gt;equivalence relations&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cec9bd7b654341aff1af9f8d64c24f966f7b024" translate="yes" xml:space="preserve">
          <source>Trait for types that form a &lt;a href=&quot;https://en.wikipedia.org/wiki/Total_order&quot;&gt;total order&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eda5d9fc229c855a2ef6aa3c2bfb5731468bf0cc" translate="yes" xml:space="preserve">
          <source>Trait for values that can be compared for a sort-order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64186133cfc350eebda0888af60b096eb938c6a7" translate="yes" xml:space="preserve">
          <source>Trait implementations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a2ed29df58a98467df7b65482664c061f2e57d4" translate="yes" xml:space="preserve">
          <source>Trait implementations can only implement associated constants that are members of the trait in question. This error indicates that you attempted to implement an associated constant whose name does not match the name of any associated constant in the trait.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc82d5ecd28dae290ae968b51be9ef3018535288" translate="yes" xml:space="preserve">
          <source>Trait implementations can only implement associated types that are members of the trait in question. This error indicates that you attempted to implement an associated type whose name does not match the name of any associated type in the trait.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93dc7d0661c7c1cf56a871254e1715d367179182" translate="yes" xml:space="preserve">
          <source>Trait methods cannot be declared &lt;code&gt;const&lt;/code&gt; by design. For more information, see &lt;a href=&quot;https://github.com/rust-lang/rfcs/pull/911&quot;&gt;RFC 911&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a51226ce6186ef57bc4f8d39074c6398e097981" translate="yes" xml:space="preserve">
          <source>Trait methods currently cannot take patterns as arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2484ce752e551a673766cb07f53076cdd0470999" translate="yes" xml:space="preserve">
          <source>Trait objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0ff67bb0a0ee2576fc48fed596bc8092c7aa725" translate="yes" xml:space="preserve">
          <source>Trait objects are a form of dynamic dispatch and use a dynamically sized type for the inner type. So, for a given trait &lt;code&gt;Trait&lt;/code&gt;, when &lt;code&gt;Trait&lt;/code&gt; is treated as a type, as in &lt;code&gt;Box&amp;lt;Trait&amp;gt;&lt;/code&gt;, the inner type is 'unsized'. In such cases the boxed pointer is a 'fat pointer' that contains an extra pointer to a table of methods (among other things) for dynamic dispatch. This design mandates some restrictions on the types of traits that are allowed to be used in trait objects, which are collectively termed as 'object safety' rules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ea53f21fe7d48d8c36beccecda99fd8c1606afe" translate="yes" xml:space="preserve">
          <source>Trait objects are written as the optional keyword &lt;code&gt;dyn&lt;/code&gt; followed by a set of trait bounds, but with the following restrictions on the trait bounds. All traits except the first trait must be auto traits, there may not be more than one lifetime, and opt-out bounds (e.g. &lt;code&gt;?Sized&lt;/code&gt;) are not allowed. Furthermore, paths to traits may be parenthesized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59817a6fb01d811236061d6945ce61c60bbb6a8e" translate="yes" xml:space="preserve">
          <source>Trait objects have the same layout as the value the trait object is of.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bbbb43369cd1da1e54ccdae8b4bbe0c9a735c31" translate="yes" xml:space="preserve">
          <source>Trait objects implement the base trait, its auto traits, and any &lt;a href=&quot;../items/traits#supertraits&quot;&gt;supertraits&lt;/a&gt; of the base trait.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4f37b1632bc74808bbd4522d9d582acfc5a118f" translate="yes" xml:space="preserve">
          <source>Trait objects like &lt;code&gt;Box&amp;lt;Trait&amp;gt;&lt;/code&gt; can only be constructed when certain requirements are satisfied by the trait in question.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="046dc44c748313b6f776a3acf8abdd3d74f9acc5" translate="yes" xml:space="preserve">
          <source>Trait objects need to have all associated types specified. Erroneous code example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad068a7a9dcf8a835215d9d2bd6df82d37ea9f8e" translate="yes" xml:space="preserve">
          <source>Trait std::alloc::Alloc</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="863608218cf19a899841e79768deb9add49e00f3" translate="yes" xml:space="preserve">
          <source>Trait std::alloc::GlobalAlloc</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="392d8121c387b6100e7dca67e7c52d32a16a3def" translate="yes" xml:space="preserve">
          <source>Trait std::any::Any</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bdbfe0deda36628eacc51abdb83fdbfcea6cc11" translate="yes" xml:space="preserve">
          <source>Trait std::array::FixedSizeArray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eb8a5154ce5a680a452312a74723021b34c3aaa" translate="yes" xml:space="preserve">
          <source>Trait std::ascii::AsciiExt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5de77502b5980be7c3473a72d6105527f1215243" translate="yes" xml:space="preserve">
          <source>Trait std::borrow::Borrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70f054dd274fb96a8db0596d418507c91adce6b6" translate="yes" xml:space="preserve">
          <source>Trait std::borrow::BorrowMut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbcce0cbc4cb2a4bf5264b04d903d25c0a192013" translate="yes" xml:space="preserve">
          <source>Trait std::borrow::ToOwned</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2b9f8276056ca658e39ee7a72fdcb03a7c37efb" translate="yes" xml:space="preserve">
          <source>Trait std::clone::Clone</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cd5d0fd30409561bc6e76fd837e1f62470836a8" translate="yes" xml:space="preserve">
          <source>Trait std::cmp::Eq</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="246cf166657201c68115fb66fd9221b8ffeb9ec4" translate="yes" xml:space="preserve">
          <source>Trait std::cmp::Ord</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72ff4c9778d08578e0f03c27d9d6272685274d91" translate="yes" xml:space="preserve">
          <source>Trait std::cmp::PartialEq</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fde07025ebb4afc05e6897ef74b43fe5347e982" translate="yes" xml:space="preserve">
          <source>Trait std::cmp::PartialOrd</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d870aa7cb7664d7c10835889d14c6b391cb4500e" translate="yes" xml:space="preserve">
          <source>Trait std::convert::AsMut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d445d52fad68586ece567104043e8c242d2c7a73" translate="yes" xml:space="preserve">
          <source>Trait std::convert::AsRef</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1da7f8aa53cf47c39294631d860061958af42da6" translate="yes" xml:space="preserve">
          <source>Trait std::convert::From</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6ffd418e0a0b6d0cb5548ea09febb34aa5a1ba4" translate="yes" xml:space="preserve">
          <source>Trait std::convert::Into</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d1380373e375c0e4553b789733d1a89b1fb0101" translate="yes" xml:space="preserve">
          <source>Trait std::convert::TryFrom</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="052f060bad402d8a2cd358057bd4871783c01ba4" translate="yes" xml:space="preserve">
          <source>Trait std::convert::TryInto</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36871446454b625eddb2f384614252a30a76670d" translate="yes" xml:space="preserve">
          <source>Trait std::default::Default</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adf0d0f8b00918a2c28aba66b14f04f6c4e0fded" translate="yes" xml:space="preserve">
          <source>Trait std::error::Error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2d288fe88fdd80f7dd81a3a1f2aeef5dc8ba7dc" translate="yes" xml:space="preserve">
          <source>Trait std::fmt::Binary</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33f44cc3a6de7dd1507041a00c8faf2775c0c8df" translate="yes" xml:space="preserve">
          <source>Trait std::fmt::Debug</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="245d17885bbc5448412416b59b0f51c9d9b68eac" translate="yes" xml:space="preserve">
          <source>Trait std::fmt::Display</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8de6a747580fa084cc85d42225e02c2e93e67d5" translate="yes" xml:space="preserve">
          <source>Trait std::fmt::LowerExp</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e725d6041bd9bc4d83fca5b07971b62d421e6e64" translate="yes" xml:space="preserve">
          <source>Trait std::fmt::LowerHex</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="194006985569f163bb35c90c3abcdbc7deec0e4a" translate="yes" xml:space="preserve">
          <source>Trait std::fmt::Octal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a32cd848a50f19a4618eac36d5bd1b3a315cf4d" translate="yes" xml:space="preserve">
          <source>Trait std::fmt::Pointer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8718228edc98337e120714c5797ad6fa1124ce31" translate="yes" xml:space="preserve">
          <source>Trait std::fmt::UpperExp</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26a977a1233b688edd74d1ce605bed2138e89350" translate="yes" xml:space="preserve">
          <source>Trait std::fmt::UpperHex</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e6b8aa3448ea0d1e3124dcc61d87f01fb6bfd66" translate="yes" xml:space="preserve">
          <source>Trait std::fmt::Write</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8d3634caaf52ad6c8639c87d834bc299c37f7d5" translate="yes" xml:space="preserve">
          <source>Trait std::future::Future</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9cb7ef33fdeeee2adf1be409e245554e4935f7b" translate="yes" xml:space="preserve">
          <source>Trait std::hash::BuildHasher</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7747499a3fe2fcc70735dec924c847206626023" translate="yes" xml:space="preserve">
          <source>Trait std::hash::Hash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2254c3bc605b18ffc7e9aa4bd6f57a17e5b13944" translate="yes" xml:space="preserve">
          <source>Trait std::hash::Hasher</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd3fa6f5ef1435b1cb913f92dfb4fe0a0ac0248a" translate="yes" xml:space="preserve">
          <source>Trait std::io::BufRead</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c4e965bc67dd33a7c09b8db70c86024088aa45b" translate="yes" xml:space="preserve">
          <source>Trait std::io::Read</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d0aac0ef2620914932ce91ac2b555eba9c75b6a" translate="yes" xml:space="preserve">
          <source>Trait std::io::Seek</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23c37542e0343a876f9566d6681875d507142219" translate="yes" xml:space="preserve">
          <source>Trait std::io::Write</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="557d86b90451662a5be206878fb6037c4adc186c" translate="yes" xml:space="preserve">
          <source>Trait std::iter::DoubleEndedIterator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1b39cf8be9a057d9577992deaebe45e596b1a85" translate="yes" xml:space="preserve">
          <source>Trait std::iter::ExactSizeIterator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="993ad040e2e34adc2956488f0eb4db104a067cbf" translate="yes" xml:space="preserve">
          <source>Trait std::iter::Extend</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d994406c4beb394a68ed1206fddfd385bea8323" translate="yes" xml:space="preserve">
          <source>Trait std::iter::FromIterator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fce9eb181dd3ce47112a06174082d5e79cf74c2" translate="yes" xml:space="preserve">
          <source>Trait std::iter::FusedIterator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e86b71b89c47a871b78ca20df617b375a62e7185" translate="yes" xml:space="preserve">
          <source>Trait std::iter::IntoIterator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2da3e674c34b9eab7bfc5aeebb0e4f54178e88c3" translate="yes" xml:space="preserve">
          <source>Trait std::iter::Iterator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28c48f7585e0c72c08462070ebcfc21850b855dd" translate="yes" xml:space="preserve">
          <source>Trait std::iter::Product</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cd139b55d183603c0136ea95dadb637efaf38a2" translate="yes" xml:space="preserve">
          <source>Trait std::iter::Step</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5db41fec6d94d07ed5a8c95c380992ba4e70704b" translate="yes" xml:space="preserve">
          <source>Trait std::iter::Sum</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2c14fdb677cf9e40834e0c15272aef7a318414f" translate="yes" xml:space="preserve">
          <source>Trait std::iter::TrustedLen</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97864c14469b7b4a0942294bc953528cb554eb45" translate="yes" xml:space="preserve">
          <source>Trait std::marker::Copy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7b568be22b28c92ca0e71ed060c7b03cf03fb4f" translate="yes" xml:space="preserve">
          <source>Trait std::marker::Send</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00852f537576ef249f511a14cf0e0d88604a985c" translate="yes" xml:space="preserve">
          <source>Trait std::marker::Sized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="259bdec063434c0a27f0691a2488a4567088a5e0" translate="yes" xml:space="preserve">
          <source>Trait std::marker::Sync</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f94365e96f98d2913bb838b56a6cb437e2a3543" translate="yes" xml:space="preserve">
          <source>Trait std::marker::Unpin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="311396699adc0c66b758dcec6485921335dcacf8" translate="yes" xml:space="preserve">
          <source>Trait std::marker::Unsize</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56b1f3f0f786678bf876540fb69232e234007e31" translate="yes" xml:space="preserve">
          <source>Trait std::net::ToSocketAddrs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37966fc5ec2acafba273f997b504b3bf34ed922b" translate="yes" xml:space="preserve">
          <source>Trait std::ops::Add</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb2302d36fa57d1adc4a45dc1d240d27866b69da" translate="yes" xml:space="preserve">
          <source>Trait std::ops::AddAssign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5f5f47beac59c26ee424be54e3b7e3d95164b94" translate="yes" xml:space="preserve">
          <source>Trait std::ops::BitAnd</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb181e8cea7de0ad56c4c91c6a0777e1d53fd765" translate="yes" xml:space="preserve">
          <source>Trait std::ops::BitAndAssign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b888f514c1fa78a8e8fe84b58a6fbc1d25aaf2c1" translate="yes" xml:space="preserve">
          <source>Trait std::ops::BitOr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca3ae8400b524007a326d21b18e44fb657bdb697" translate="yes" xml:space="preserve">
          <source>Trait std::ops::BitOrAssign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d18eaa27370f1eb1f6ce036dc60c1aa5493c417" translate="yes" xml:space="preserve">
          <source>Trait std::ops::BitXor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5961f53888aa07cd5cd15ed30fa1971a719c8b25" translate="yes" xml:space="preserve">
          <source>Trait std::ops::BitXorAssign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e9158651355d13bfdd0cc23ab8ae22e93570742" translate="yes" xml:space="preserve">
          <source>Trait std::ops::CoerceUnsized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2225eef9926066643795abab6cb04cea79ce68b" translate="yes" xml:space="preserve">
          <source>Trait std::ops::Deref</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8071035f23a5d586519a8248517d2e29e7adcb51" translate="yes" xml:space="preserve">
          <source>Trait std::ops::DerefMut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bdb82d5309eaed70f5481f05b19a4d41b5808d7" translate="yes" xml:space="preserve">
          <source>Trait std::ops::DispatchFromDyn</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9119f5359ef3817ec9f0b7e45b3f1ecbc08a66ae" translate="yes" xml:space="preserve">
          <source>Trait std::ops::Div</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f65e4311dbd340efad891a4945558b2592826b48" translate="yes" xml:space="preserve">
          <source>Trait std::ops::DivAssign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ead9d9ba97193a4d1ac24f05c905c8b13350ed9c" translate="yes" xml:space="preserve">
          <source>Trait std::ops::Drop</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="516e4c37897e1d20a60743aea36782c56e8156a9" translate="yes" xml:space="preserve">
          <source>Trait std::ops::Fn</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77005c859f62996c3f249d5673d1b2c4d6da6a8e" translate="yes" xml:space="preserve">
          <source>Trait std::ops::FnMut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b435f6c3c75102c4c8177872a25a996a1ff95c72" translate="yes" xml:space="preserve">
          <source>Trait std::ops::FnOnce</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aa827be880a5bea9bb3024a041653fb3a60ff06" translate="yes" xml:space="preserve">
          <source>Trait std::ops::Generator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59811c59bb31cbb96886cf966994463b72ad700c" translate="yes" xml:space="preserve">
          <source>Trait std::ops::Index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b08e9090daf7ede77089f8107e6507872bde2ab" translate="yes" xml:space="preserve">
          <source>Trait std::ops::IndexMut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10babff383e103d1471a771d922a28289586b73a" translate="yes" xml:space="preserve">
          <source>Trait std::ops::Mul</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b32e6664a7b4d68e303b33188cda08fc977bd7b7" translate="yes" xml:space="preserve">
          <source>Trait std::ops::MulAssign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7244a7be2c4624654c9b462b1947447297e505fd" translate="yes" xml:space="preserve">
          <source>Trait std::ops::Neg</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="598dee8649518d42201f87386801464e34102c60" translate="yes" xml:space="preserve">
          <source>Trait std::ops::Not</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc51ccaddf33118323d7fc1d905d959ce650d2fc" translate="yes" xml:space="preserve">
          <source>Trait std::ops::RangeBounds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ee55841b26a89cf9d805e3a28fb34dc38ab767a" translate="yes" xml:space="preserve">
          <source>Trait std::ops::Rem</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0e35ffe757b24704f0ad197b4f1a2195f4a4f69" translate="yes" xml:space="preserve">
          <source>Trait std::ops::RemAssign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5922247946e4630b62a74e89d87c15ed9dbf8321" translate="yes" xml:space="preserve">
          <source>Trait std::ops::Shl</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f84eeb046dfef53ab5217181c0fe9161eb7133b2" translate="yes" xml:space="preserve">
          <source>Trait std::ops::ShlAssign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55d865e44b6599da1d5b41d269ec7455a02e4d75" translate="yes" xml:space="preserve">
          <source>Trait std::ops::Shr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7c92d6f8a50e1ae3b29a226a8335aff1fecf601" translate="yes" xml:space="preserve">
          <source>Trait std::ops::ShrAssign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbaeb43954d65c4471777365a4ccdaf3b98314da" translate="yes" xml:space="preserve">
          <source>Trait std::ops::Sub</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60e6a61f8c88f9e6239b7053de7f86d23a70926d" translate="yes" xml:space="preserve">
          <source>Trait std::ops::SubAssign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e84214c3e8570e12d3f9ef3b558be6c152516f7" translate="yes" xml:space="preserve">
          <source>Trait std::ops::Try</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aee85e47c1ef28a026ccdb2b42dd67004cf6d92b" translate="yes" xml:space="preserve">
          <source>Trait std::os::linux::fs::MetadataExt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce6f693798415e4676d8d1ff10beb4360e2b88ea" translate="yes" xml:space="preserve">
          <source>Trait std::os::unix::ffi::OsStrExt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccee631397fcdd7aa7a9f0bce0da5d850063085b" translate="yes" xml:space="preserve">
          <source>Trait std::os::unix::ffi::OsStringExt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e621c9f13dd9d62e26bc7432de51e95d4d92457d" translate="yes" xml:space="preserve">
          <source>Trait std::os::unix::fs::DirBuilderExt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0709fdc0b13d2f0cb5f5c17d0f41b133a5719e30" translate="yes" xml:space="preserve">
          <source>Trait std::os::unix::fs::DirEntryExt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="030f7ec1f295cca2c02129cf381f726caf5a30ca" translate="yes" xml:space="preserve">
          <source>Trait std::os::unix::fs::FileExt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f955ea7fe9356c94c24f7600e345d8c1f23ecc81" translate="yes" xml:space="preserve">
          <source>Trait std::os::unix::fs::FileTypeExt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="062f7bd7816b0a1187ddcd41fdc03811ea335026" translate="yes" xml:space="preserve">
          <source>Trait std::os::unix::fs::MetadataExt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cc7126ad859e04f63e6bf507db0f3f32c1e3609" translate="yes" xml:space="preserve">
          <source>Trait std::os::unix::fs::OpenOptionsExt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b61dfb2986a0864a907b937d464ff43d30cc28a" translate="yes" xml:space="preserve">
          <source>Trait std::os::unix::fs::PermissionsExt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="029585bd86a69a9cb4ab7c864e7dc9b2373a14b3" translate="yes" xml:space="preserve">
          <source>Trait std::os::unix::io::AsRawFd</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4e4a27468811544480dddf3c4047ee3d4694a0c" translate="yes" xml:space="preserve">
          <source>Trait std::os::unix::io::FromRawFd</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad731bff461d938e10c799939e10ae14e837a1d4" translate="yes" xml:space="preserve">
          <source>Trait std::os::unix::io::IntoRawFd</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0e834bab744daaedf71c0c8937cc0857c11c815" translate="yes" xml:space="preserve">
          <source>Trait std::os::unix::process::CommandExt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fdb072f5381c741536b73b80e58115bb5f3dc4d" translate="yes" xml:space="preserve">
          <source>Trait std::os::unix::process::ExitStatusExt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="398944c7337c4aa8b95b799fcb3bb79124d70d16" translate="yes" xml:space="preserve">
          <source>Trait std::os::unix::thread::JoinHandleExt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="775a7a0c3bd36d7ff6360e6cd0ef765ee978cd67" translate="yes" xml:space="preserve">
          <source>Trait std::os::windows::ffi::OsStrExt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fef545ee7fe66334043f38cfbfbf352be492c487" translate="yes" xml:space="preserve">
          <source>Trait std::os::windows::ffi::OsStringExt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecb052e97ecce0a67db913c47f009bfcbacc3af0" translate="yes" xml:space="preserve">
          <source>Trait std::os::windows::fs::FileExt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91c8fb448f57a608a43c2c6a50e10bec34d5ab25" translate="yes" xml:space="preserve">
          <source>Trait std::os::windows::fs::FileTypeExt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48eaa197d2777c5eb543ac927807cb3bcfa429bf" translate="yes" xml:space="preserve">
          <source>Trait std::os::windows::fs::MetadataExt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adfee6aa3be6cbe6237011186a8914e73584ae0c" translate="yes" xml:space="preserve">
          <source>Trait std::os::windows::fs::OpenOptionsExt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cdd2fa8158633908c8d054d4d1297a0e8730a45" translate="yes" xml:space="preserve">
          <source>Trait std::os::windows::io::AsRawHandle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d00fd25b06cb924c3fdd7f42d54ec1498a98e1b" translate="yes" xml:space="preserve">
          <source>Trait std::os::windows::io::AsRawSocket</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61063f360cb8b5295929ae6072d8fe4c6d6e69db" translate="yes" xml:space="preserve">
          <source>Trait std::os::windows::io::FromRawHandle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7942dc2954f8548cc31aadda78e4bf28314f92d8" translate="yes" xml:space="preserve">
          <source>Trait std::os::windows::io::FromRawSocket</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb1fb08e33748cf05582377cef8603a0b7d61ea6" translate="yes" xml:space="preserve">
          <source>Trait std::os::windows::io::IntoRawHandle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fe8126ee24f29a74bcdb4233344f05c1aaeb804" translate="yes" xml:space="preserve">
          <source>Trait std::os::windows::io::IntoRawSocket</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03f13d9ed2758f8306f48846a3b40b6e4ee6fb67" translate="yes" xml:space="preserve">
          <source>Trait std::os::windows::process::CommandExt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5474211db770299d01cd13e53280d9a32e0a6eb8" translate="yes" xml:space="preserve">
          <source>Trait std::os::windows::process::ExitStatusExt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f12279b49645006e0e35a65e657e45472c813936" translate="yes" xml:space="preserve">
          <source>Trait std::panic::RefUnwindSafe</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94584086fc586a7b81f5ac90f21ac1115c03a3ce" translate="yes" xml:space="preserve">
          <source>Trait std::panic::UnwindSafe</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adb81f6851cec81b5352770932f85397129ab8a4" translate="yes" xml:space="preserve">
          <source>Trait std::process::Termination</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7640946c865124bdea836774595f3568b91b7998" translate="yes" xml:space="preserve">
          <source>Trait std::slice::SliceConcatExt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f46e5f5628a346f08367c4e254d503cf40a8e630" translate="yes" xml:space="preserve">
          <source>Trait std::slice::SliceIndex</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="376de5fab14024883dddc8825294275d1ab087fe" translate="yes" xml:space="preserve">
          <source>Trait std::str::FromStr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44dfa41c6566ca84e623c4ad35fe85e2a3871106" translate="yes" xml:space="preserve">
          <source>Trait std::str::pattern::DoubleEndedSearcher</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60d7ae5ae877268eee71ef1b870695c55f5799dd" translate="yes" xml:space="preserve">
          <source>Trait std::str::pattern::Pattern</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57c9157b22b76a9e5814b9b5b2e9d0438b5d56c6" translate="yes" xml:space="preserve">
          <source>Trait std::str::pattern::ReverseSearcher</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c47b1d5d24f300a29158b5903ba66de94f2261c7" translate="yes" xml:space="preserve">
          <source>Trait std::str::pattern::Searcher</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44bc0cc22a45fc90a102d47cbd5cd3c88d279925" translate="yes" xml:space="preserve">
          <source>Trait std::string::ToString</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="902e019f3fc71a92236203a22158a6e688676cd4" translate="yes" xml:space="preserve">
          <source>Trait that indicates that this is a pointer or a wrapper for one, where unsizing can be performed on the pointee.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="914213ad374b434003e30cd9d7bcaca26d295c77" translate="yes" xml:space="preserve">
          <source>Trait to represent types that can be created by multiplying elements of an iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="badf961de53295edcdb207c7619b3c8c3ea8ab3f" translate="yes" xml:space="preserve">
          <source>Trait to represent types that can be created by summing up an iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d881d840fb21638a45b7fe784d4a5eb2d495d58e" translate="yes" xml:space="preserve">
          <source>Trait types:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="602d794344a5274058fe843b2cdf8ec0429dd8a0" translate="yes" xml:space="preserve">
          <source>Trait types: &lt;a href=&quot;types/trait-object&quot;&gt;Trait objects&lt;/a&gt; and &lt;a href=&quot;types/impl-trait&quot;&gt;impl trait&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bb3c78c542b9f8ec90ade6e9ec8d9a3209bf67e" translate="yes" xml:space="preserve">
          <source>TraitObject</source>
          <target state="translated">TraitObject</target>
        </trans-unit>
        <trans-unit id="6dafbe61d09e60652f6bbad6957562daf88836c1" translate="yes" xml:space="preserve">
          <source>TraitObject::borrow</source>
          <target state="translated">TraitObject::borrow</target>
        </trans-unit>
        <trans-unit id="d4a155778d83f0c6e0941f69c58ed350bc406da6" translate="yes" xml:space="preserve">
          <source>TraitObject::borrow_mut</source>
          <target state="translated">TraitObject::borrow_mut</target>
        </trans-unit>
        <trans-unit id="1ad27b39ed4c34288ce66526e3c4d0c6cfa27a49" translate="yes" xml:space="preserve">
          <source>TraitObject::clone</source>
          <target state="translated">TraitObject::clone</target>
        </trans-unit>
        <trans-unit id="f7e5bbc88cb023be138b61515a8a95359d090a5c" translate="yes" xml:space="preserve">
          <source>TraitObject::clone_from</source>
          <target state="translated">TraitObject::clone_from</target>
        </trans-unit>
        <trans-unit id="fdf0c70ef2387158d4df2cba6555b292ed39d46d" translate="yes" xml:space="preserve">
          <source>TraitObject::clone_into</source>
          <target state="translated">TraitObject::clone_into</target>
        </trans-unit>
        <trans-unit id="743885aa5243b74deebe5c3d51ac4806100e3c4f" translate="yes" xml:space="preserve">
          <source>TraitObject::from</source>
          <target state="translated">TraitObject::from</target>
        </trans-unit>
        <trans-unit id="83e65850a79cb15fc900dff422e0637ecd287f18" translate="yes" xml:space="preserve">
          <source>TraitObject::into</source>
          <target state="translated">TraitObject::into</target>
        </trans-unit>
        <trans-unit id="4d10ca4ab3471cdb18500652e2706f1af91011a7" translate="yes" xml:space="preserve">
          <source>TraitObject::to_owned</source>
          <target state="translated">TraitObject::to_owned</target>
        </trans-unit>
        <trans-unit id="cb08794c131e1ac1a49313ec36f386568341f2c9" translate="yes" xml:space="preserve">
          <source>TraitObject::try_from</source>
          <target state="translated">TraitObject::try_from</target>
        </trans-unit>
        <trans-unit id="368b837c4e44612f1f89ff1a01dc94c771822d93" translate="yes" xml:space="preserve">
          <source>TraitObject::try_into</source>
          <target state="translated">TraitObject::try_into</target>
        </trans-unit>
        <trans-unit id="74e84d6c289e114766c37bd05fe2729da4981e80" translate="yes" xml:space="preserve">
          <source>TraitObject::type_id</source>
          <target state="translated">TraitObject::type_id</target>
        </trans-unit>
        <trans-unit id="d1a616085a1a99a58e14bafaa350abc6783a3160" translate="yes" xml:space="preserve">
          <source>Traits</source>
          <target state="translated">Traits</target>
        </trans-unit>
        <trans-unit id="9c97df5331a0dd1cf9d7e4754c7f28e534496f46" translate="yes" xml:space="preserve">
          <source>Traits and trait bounds let us write code that uses generic type parameters to reduce duplication but also specify to the compiler that we want the generic type to have particular behavior. The compiler can then use the trait bound information to check that all the concrete types used with our code provide the correct behavior. In dynamically typed languages, we would get an error at runtime if we called a method on a type that the type didn&amp;rsquo;t implement. But Rust moves these errors to compile time so we&amp;rsquo;re forced to fix the problems before our code is even able to run. Additionally, we don&amp;rsquo;t have to write code that checks for behavior at runtime because we&amp;rsquo;ve already checked at compile time. Doing so improves performance without having to give up the flexibility of generics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30d92be1538d577b3a476ce5c89b01f7242bf547" translate="yes" xml:space="preserve">
          <source>Traits are also compared by their implementation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66685be42641df1c5c014df0db7fb2681f6517c0" translate="yes" xml:space="preserve">
          <source>Traits are implemented for specific types through separate &lt;a href=&quot;implementations&quot;&gt;implementations&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68c3dbb43f5798e7691ebd93a6d889062ce5c80e" translate="yes" xml:space="preserve">
          <source>Traits as Parameters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1779dfd4e53a302206ca9f432ac589991148919" translate="yes" xml:space="preserve">
          <source>Traits for conversions between types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5129fe11a670c9d54f51f82654cb88d2c5359dd3" translate="yes" xml:space="preserve">
          <source>Traits for working with Errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e714d1e850bbb5cbfe4cbf81d9f96ff676eaae8d" translate="yes" xml:space="preserve">
          <source>Traits items that begin with the &lt;code&gt;unsafe&lt;/code&gt; keyword indicate that &lt;em&gt;implementing&lt;/em&gt; the trait may be &lt;a href=&quot;../unsafety&quot;&gt;unsafe&lt;/a&gt;. It is safe to use a correctly implemented unsafe trait. The &lt;a href=&quot;implementations#trait-implementations&quot;&gt;trait implementation&lt;/a&gt; must also begin with the &lt;code&gt;unsafe&lt;/code&gt; keyword.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b45c49a33c4022855bfa5d2a686751214a7126a" translate="yes" xml:space="preserve">
          <source>Traits may be implemented for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="986fcbb6a73e7cc26d2d8b2b6164011d8bab7460" translate="yes" xml:space="preserve">
          <source>Traits, helpers, and type definitions for core I/O functionality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aa77953b92e4e6c565758326d541910014cfd21" translate="yes" xml:space="preserve">
          <source>Traits: Defining Shared Behavior</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8a8f61d9f0fd714531d17d414abcb212572f131" translate="yes" xml:space="preserve">
          <source>Transcribing</source>
          <target state="translated">Transcribing</target>
        </trans-unit>
        <trans-unit id="2df1d93dea4e259eb26edde2c26eb9c20992b104" translate="yes" xml:space="preserve">
          <source>Transforms an iterator into a collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81c1484a18bb69461dc41663b8ca61aba770c66a" translate="yes" xml:space="preserve">
          <source>Transforms an iterator into a collection. &lt;a href=&quot;../../../iter/trait.iterator#method.collect&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fe9703c09ae5aff473aa850cc9ea84e177f2a25" translate="yes" xml:space="preserve">
          <source>Transforms an iterator into a collection. &lt;a href=&quot;../../iter/trait.iterator#method.collect&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d95c53779cc93ec00cbab50bc8d1d781ee0140b9" translate="yes" xml:space="preserve">
          <source>Transforms an iterator into a collection. &lt;a href=&quot;../iter/trait.iterator#method.collect&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f6c7d5e9d128d42f6100c26dc454bf0231e3a05" translate="yes" xml:space="preserve">
          <source>Transforms an iterator into a collection. &lt;a href=&quot;iter/trait.iterator#method.collect&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f3c54bd44a2ac346c25bc4bf8dc990a7215290b" translate="yes" xml:space="preserve">
          <source>Transforms an iterator into a collection. &lt;a href=&quot;trait.iterator#method.collect&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d04afdfe20a5d1e30c5697c258379dba1dfdd82" translate="yes" xml:space="preserve">
          <source>Transforms the &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; into a &lt;a href=&quot;../result/enum.result&quot;&gt;&lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt;&lt;/a&gt;, mapping &lt;a href=&quot;#variant.Some&quot;&gt;&lt;code&gt;Some(v)&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok(v)&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err(err())&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a32b0b090c9474f23fede28872bd2f862d58ca7" translate="yes" xml:space="preserve">
          <source>Transforms the &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; into a &lt;a href=&quot;../result/enum.result&quot;&gt;&lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt;&lt;/a&gt;, mapping &lt;a href=&quot;#variant.Some&quot;&gt;&lt;code&gt;Some(v)&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok(v)&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err(err)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4eb95563ead3e77457aefa3ae80b465ed16f04e" translate="yes" xml:space="preserve">
          <source>Transforms this &lt;code&gt;Read&lt;/code&gt; instance to an &lt;a href=&quot;../iter/trait.iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; over its bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03c96526be3584d2d000005b6f01d7d3341c8987" translate="yes" xml:space="preserve">
          <source>Transforms this &lt;code&gt;Read&lt;/code&gt; instance to an [&lt;code&gt;Iterator&lt;/code&gt;] over its bytes. &lt;a href=&quot;../../../io/trait.read#method.bytes&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12fec74288b63220271ad545369927ef8290a081" translate="yes" xml:space="preserve">
          <source>Transforms this &lt;code&gt;Read&lt;/code&gt; instance to an [&lt;code&gt;Iterator&lt;/code&gt;] over its bytes. &lt;a href=&quot;../io/trait.read#method.bytes&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caf9cf05351d52e3be9282ae06933a14488056d3" translate="yes" xml:space="preserve">
          <source>Transforms this &lt;code&gt;Read&lt;/code&gt; instance to an [&lt;code&gt;Iterator&lt;/code&gt;] over its bytes. &lt;a href=&quot;io/trait.read#method.bytes&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="971992e8ed9d30a3c4193fa3cfd51e0926ac6cae" translate="yes" xml:space="preserve">
          <source>Transforms this &lt;code&gt;Read&lt;/code&gt; instance to an [&lt;code&gt;Iterator&lt;/code&gt;] over its bytes. &lt;a href=&quot;trait.read#method.bytes&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a3526b9261f151b08efa12a2cb227e4ab668a50" translate="yes" xml:space="preserve">
          <source>Transmute the slice to a slice of another type, ensuring alignment of the types is maintained.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f952303e87a91f8044520d869ced49cf3453271e" translate="yes" xml:space="preserve">
          <source>Transmute with two differently sized types was attempted. Erroneous code example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4634eab766a7c67f4a788882ed6708930ac7723" translate="yes" xml:space="preserve">
          <source>Transposes a &lt;code&gt;Result&lt;/code&gt; of an &lt;code&gt;Option&lt;/code&gt; into an &lt;code&gt;Option&lt;/code&gt; of a &lt;code&gt;Result&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86f3938f31467da551894d5bc312a73ba5dfa379" translate="yes" xml:space="preserve">
          <source>Transposes an &lt;code&gt;Option&lt;/code&gt; of a &lt;code&gt;Result&lt;/code&gt; into a &lt;code&gt;Result&lt;/code&gt; of an &lt;code&gt;Option&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9ccf92c436ad92e69f629d1e0488d9928d7d7e6" translate="yes" xml:space="preserve">
          <source>Treating Smart Pointers Like Regular References with the &lt;code id=&quot;treating-smart-pointers-like-regular-references-with-the-deref-trait&quot;&gt;Deref&lt;/code&gt; Trait</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="453a0f8e23093d2d468470224b84f666ef425b17" translate="yes" xml:space="preserve">
          <source>Treating a Type Like a Reference by Implementing the &lt;code id=&quot;treating-a-type-like-a-reference-by-implementing-the-deref-trait&quot;&gt;Deref&lt;/code&gt; Trait</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc5f05aecd7821404c68147034c8c8b762c94716" translate="yes" xml:space="preserve">
          <source>Treating each integration test file as its own crate is useful to create separate scopes that are more like the way end users will be using your crate. However, this means files in the &lt;em&gt;tests&lt;/em&gt; directory don&amp;rsquo;t share the same behavior as files in &lt;em&gt;src&lt;/em&gt; do, as you learned in Chapter 7 regarding how to separate code into modules and files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7569cb1679e0c3aa7540702f13a5f8dd4a1739a0" translate="yes" xml:space="preserve">
          <source>Tries to reserve capacity for at least &lt;code&gt;additional&lt;/code&gt; more elements to be inserted in the given &lt;code&gt;HashMap&amp;lt;K,V&amp;gt;&lt;/code&gt;. The collection may reserve more space to avoid frequent reallocations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44298809e4f1f115c9f5ba28f46ae5a8d609bfc3" translate="yes" xml:space="preserve">
          <source>Tries to reserve capacity for at least &lt;code&gt;additional&lt;/code&gt; more elements to be inserted in the given &lt;code&gt;HashSet&amp;lt;K,V&amp;gt;&lt;/code&gt;. The collection may reserve more space to avoid frequent reallocations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57b7ed7bcbd15d35b279a1bce9bfd658efd71b2a" translate="yes" xml:space="preserve">
          <source>Tries to reserve capacity for at least &lt;code&gt;additional&lt;/code&gt; more elements to be inserted in the given &lt;code&gt;String&lt;/code&gt;. The collection may reserve more space to avoid frequent reallocations. After calling &lt;code&gt;reserve&lt;/code&gt;, capacity will be greater than or equal to &lt;code&gt;self.len() + additional&lt;/code&gt;. Does nothing if capacity is already sufficient.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cd7b987cbc0791bfb1324cfd6464263751dd7d3" translate="yes" xml:space="preserve">
          <source>Tries to reserve capacity for at least &lt;code&gt;additional&lt;/code&gt; more elements to be inserted in the given &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;. The collection may reserve more space to avoid frequent reallocations. After calling &lt;code&gt;reserve&lt;/code&gt;, capacity will be greater than or equal to &lt;code&gt;self.len() + additional&lt;/code&gt;. Does nothing if capacity is already sufficient.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ddb2f7e963d7384fcd84f59781aafbcb1eefd0c" translate="yes" xml:space="preserve">
          <source>Tries to reserve capacity for at least &lt;code&gt;additional&lt;/code&gt; more elements to be inserted in the given &lt;code&gt;VecDeque&amp;lt;T&amp;gt;&lt;/code&gt;. The collection may reserve more space to avoid frequent reallocations. After calling &lt;code&gt;reserve&lt;/code&gt;, capacity will be greater than or equal to &lt;code&gt;self.len() + additional&lt;/code&gt;. Does nothing if capacity is already sufficient.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea826f973c60e61f52c1a1545b1dfe84c909b71b" translate="yes" xml:space="preserve">
          <source>Tries to reserves the minimum capacity for exactly &lt;code&gt;additional&lt;/code&gt; more elements to be inserted in the given &lt;code&gt;String&lt;/code&gt;. After calling &lt;code&gt;reserve_exact&lt;/code&gt;, capacity will be greater than or equal to &lt;code&gt;self.len() + additional&lt;/code&gt;. Does nothing if the capacity is already sufficient.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6bd5db90f8cb9540fd3f35c2883f8b8a881d37a" translate="yes" xml:space="preserve">
          <source>Tries to reserves the minimum capacity for exactly &lt;code&gt;additional&lt;/code&gt; more elements to be inserted in the given &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;. After calling &lt;code&gt;reserve_exact&lt;/code&gt;, capacity will be greater than or equal to &lt;code&gt;self.len() + additional&lt;/code&gt;. Does nothing if the capacity is already sufficient.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90bd1ab7f76bd67110646c064057b5e26a376cef" translate="yes" xml:space="preserve">
          <source>Tries to reserves the minimum capacity for exactly &lt;code&gt;additional&lt;/code&gt; more elements to be inserted in the given &lt;code&gt;VecDeque&amp;lt;T&amp;gt;&lt;/code&gt;. After calling &lt;code&gt;reserve_exact&lt;/code&gt;, capacity will be greater than or equal to &lt;code&gt;self.len() + additional&lt;/code&gt;. Does nothing if the capacity is already sufficient.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6547ac01541509cbac431ef7568ec956f10079ba" translate="yes" xml:space="preserve">
          <source>Triggers a panic without invoking the panic hook.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="285ec850c11d78bac10f6bfa31b69a37f1b257c9" translate="yes" xml:space="preserve">
          <source>Troubleshooting</source>
          <target state="translated">Troubleshooting</target>
        </trans-unit>
        <trans-unit id="adb95599ef56aa13caaac1499a3644565e8b6049" translate="yes" xml:space="preserve">
          <source>Truncates &lt;code&gt;self&lt;/code&gt; to &lt;a href=&quot;struct.pathbuf#method.parent&quot;&gt;&lt;code&gt;self.parent&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5927f0d5ac8801b4254d8379327d991a701a80da" translate="yes" xml:space="preserve">
          <source>Truncates or extends the underlying file, updating the size of this file to become &lt;code&gt;size&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2702cfbf0e58f8f82fb23e8d650e499d7cc927c5" translate="yes" xml:space="preserve">
          <source>Truncates the &lt;code&gt;OsString&lt;/code&gt; to zero length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed28d8bdecc758ddcef76eed8b86ffa1d4ea3181" translate="yes" xml:space="preserve">
          <source>Truncates this &lt;code&gt;String&lt;/code&gt;, removing all contents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5474aa5946c713a1f6e7a033ad591db623edd6d3" translate="yes" xml:space="preserve">
          <source>Truncating a five element vector to two elements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="743f01c9ef69fe480785553858265deba678132e" translate="yes" xml:space="preserve">
          <source>Truncating when &lt;code&gt;len == 0&lt;/code&gt; is equivalent to calling the &lt;a href=&quot;#method.clear&quot;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63908c3dcfc457f07a333b89f52c763024b846da" translate="yes" xml:space="preserve">
          <source>TrustedLen</source>
          <target state="translated">TrustedLen</target>
        </trans-unit>
        <trans-unit id="72677028b4d0d41af475041fdbe030f7c7146d2c" translate="yes" xml:space="preserve">
          <source>Try</source>
          <target state="translated">Try</target>
        </trans-unit>
        <trans-unit id="93cacc9f6a162523f52bc4401526c741faac95a0" translate="yes" xml:space="preserve">
          <source>Try designing more experiments that vary the values and lifetimes of the references passed in to the &lt;code&gt;longest&lt;/code&gt; function and how the returned reference is used. Make hypotheses about whether or not your experiments will pass the borrow checker before you compile; then check to see if you&amp;rsquo;re right!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b25651affa48a09fef804a246293a9441327deef" translate="yes" xml:space="preserve">
          <source>Try making a request from a different browser or asking for a different address, such as &lt;em&gt;127.0.0.1:7878/test&lt;/em&gt;, to see how the request data changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cdedf03df7f2d7ff7f62a3fe4c0233e49c2605a" translate="yes" xml:space="preserve">
          <source>Try modifying &lt;code&gt;Cacher&lt;/code&gt; to hold a hash map rather than a single value. The keys of the hash map will be the &lt;code&gt;arg&lt;/code&gt; values that are passed in, and the values of the hash map will be the result of calling the closure on that key. Instead of looking at whether &lt;code&gt;self.value&lt;/code&gt; directly has a &lt;code&gt;Some&lt;/code&gt; or a &lt;code&gt;None&lt;/code&gt; value, the &lt;code&gt;value&lt;/code&gt; function will look up the &lt;code&gt;arg&lt;/code&gt; in the hash map and return the value if it&amp;rsquo;s present. If it&amp;rsquo;s not present, the &lt;code&gt;Cacher&lt;/code&gt; will call the closure and save the resulting value in the hash map associated with its &lt;code&gt;arg&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="746db25e46725d2a25a5be38541b8fd90c0e318e" translate="yes" xml:space="preserve">
          <source>Try running the program a few times:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40db21ca976b20c4f1a37614a766d7e0fedff356" translate="yes" xml:space="preserve">
          <source>Try running this code; you should see the following output:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c704dff8c8947b24bdb19d42ed1933021fa9b51" translate="yes" xml:space="preserve">
          <source>Try running this program with the &lt;code&gt;main&lt;/code&gt; function from Listing 13-2. Change the values in the &lt;code&gt;simulated_user_specified_value&lt;/code&gt; and &lt;code&gt;simulated_random_number&lt;/code&gt; variables to verify that in all the cases in the various &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt; blocks, &lt;code&gt;calculating slowly...&lt;/code&gt; appears only once and only when needed. The &lt;code&gt;Cacher&lt;/code&gt; takes care of the logic necessary to ensure we aren&amp;rsquo;t calling the expensive calculation more than we need to so &lt;code&gt;generate_workout&lt;/code&gt; can focus on the business logic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f64954535b22680cee23c59284f0821d313912c5" translate="yes" xml:space="preserve">
          <source>Try running this program; you should get the following output:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e2f79e768da3d333677b7768aba6698b9473abe" translate="yes" xml:space="preserve">
          <source>Try the tasks suggested for additional requirements that we mentioned at the start of this section on the &lt;code&gt;blog&lt;/code&gt; crate as it is after Listing 17-20 to see what you think about the design of this version of the code. Note that some of the tasks might be completed already in this design.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bea7aa5241bc934fb93d73fbe72c3c92fd9cb391" translate="yes" xml:space="preserve">
          <source>Try this instead:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf4dffd1f17e87d4131fe9dbd6ed3566366e3295" translate="yes" xml:space="preserve">
          <source>Try to avoid moving the variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="708f496ce718cad5f2bfb9c2203cb73e375d06e0" translate="yes" xml:space="preserve">
          <source>Try to create the target number type from a source number type. This returns an error if the source value is outside of the range of the target type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7bb54d91c5813615d6b6445e2ebf488e82cdc0c" translate="yes" xml:space="preserve">
          <source>Try using &lt;code&gt;{}&lt;/code&gt; instead:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8a1eb6a4114d62537aa281f5d03abf55ba6e9e3" translate="yes" xml:space="preserve">
          <source>Try using type inference instead. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea0079401a89dd04fe8291c0c734d4aa5a8c7177" translate="yes" xml:space="preserve">
          <source>Try::from_error</source>
          <target state="translated">Try::from_error</target>
        </trans-unit>
        <trans-unit id="bde6f44b7e04bd6491a07ffb037c4fa48b882a33" translate="yes" xml:space="preserve">
          <source>Try::from_ok</source>
          <target state="translated">Try::from_ok</target>
        </trans-unit>
        <trans-unit id="809111dd75695d75905fa1c8b4bad5d14691a30e" translate="yes" xml:space="preserve">
          <source>Try::into_result</source>
          <target state="translated">Try::into_result</target>
        </trans-unit>
        <trans-unit id="18e77d4b44ff639060d9a2fa2960f190781f7859" translate="yes" xml:space="preserve">
          <source>TryFrom</source>
          <target state="translated">TryFrom</target>
        </trans-unit>
        <trans-unit id="4acc1ac1c58ab4ae6724001d461baf2c8b8dbc3a" translate="yes" xml:space="preserve">
          <source>TryFrom::try_from</source>
          <target state="translated">TryFrom::try_from</target>
        </trans-unit>
        <trans-unit id="ad96c601815ad5f050e0b6351dd0b189e48a31a9" translate="yes" xml:space="preserve">
          <source>TryFromIntError</source>
          <target state="translated">TryFromIntError</target>
        </trans-unit>
        <trans-unit id="f81061adcf59a4b18f6432dc500e16b9a793d0e6" translate="yes" xml:space="preserve">
          <source>TryFromIntError::borrow</source>
          <target state="translated">TryFromIntError::borrow</target>
        </trans-unit>
        <trans-unit id="4d5e6ded3e6e6a7b69de27e74b52df8d33085625" translate="yes" xml:space="preserve">
          <source>TryFromIntError::borrow_mut</source>
          <target state="translated">TryFromIntError::borrow_mut</target>
        </trans-unit>
        <trans-unit id="8c6ac7bc7b08a0164c28c84e181d07ac7264caa1" translate="yes" xml:space="preserve">
          <source>TryFromIntError::cause</source>
          <target state="translated">TryFromIntError::cause</target>
        </trans-unit>
        <trans-unit id="f0da83cb703ff9ab478400076f17fb3b6df58453" translate="yes" xml:space="preserve">
          <source>TryFromIntError::clone</source>
          <target state="translated">TryFromIntError::clone</target>
        </trans-unit>
        <trans-unit id="21c991dfc7c9f46d0f223e9ada6bbb1b3ddc0419" translate="yes" xml:space="preserve">
          <source>TryFromIntError::clone_from</source>
          <target state="translated">TryFromIntError::clone_from</target>
        </trans-unit>
        <trans-unit id="611f56282230f313fea840ae9d1b4022b318faec" translate="yes" xml:space="preserve">
          <source>TryFromIntError::clone_into</source>
          <target state="translated">TryFromIntError::clone_into</target>
        </trans-unit>
        <trans-unit id="05df18eb5e5e51ad418c603a8c9e45f939b7afa0" translate="yes" xml:space="preserve">
          <source>TryFromIntError::description</source>
          <target state="translated">TryFromIntError::description</target>
        </trans-unit>
        <trans-unit id="cffa72c79f028d8b2b67ac3b5a88fa8e893445f1" translate="yes" xml:space="preserve">
          <source>TryFromIntError::eq</source>
          <target state="translated">TryFromIntError::eq</target>
        </trans-unit>
        <trans-unit id="7ec29ac29b26af4ad4e22c908d20f04e34123009" translate="yes" xml:space="preserve">
          <source>TryFromIntError::fmt</source>
          <target state="translated">TryFromIntError::fmt</target>
        </trans-unit>
        <trans-unit id="27af3cbe1fc043a4ba2263a1ddb04f43ed3341d8" translate="yes" xml:space="preserve">
          <source>TryFromIntError::from</source>
          <target state="translated">TryFromIntError::from</target>
        </trans-unit>
        <trans-unit id="88b0ca4bd6e97295df88042c17da3bc4ad1d1e49" translate="yes" xml:space="preserve">
          <source>TryFromIntError::into</source>
          <target state="translated">TryFromIntError::into</target>
        </trans-unit>
        <trans-unit id="b590493dab8454ef91bc8263edc4d90474ae7585" translate="yes" xml:space="preserve">
          <source>TryFromIntError::ne</source>
          <target state="translated">TryFromIntError::ne</target>
        </trans-unit>
        <trans-unit id="34bc40cbf452f309c77160c0bc046a559d512c4c" translate="yes" xml:space="preserve">
          <source>TryFromIntError::source</source>
          <target state="translated">TryFromIntError::source</target>
        </trans-unit>
        <trans-unit id="4650111711913011245aed1cfd4e401bf80b92bd" translate="yes" xml:space="preserve">
          <source>TryFromIntError::to_owned</source>
          <target state="translated">TryFromIntError::to_owned</target>
        </trans-unit>
        <trans-unit id="145d38c6294ea7b0b18a9beaf5c2ba62d71c6d31" translate="yes" xml:space="preserve">
          <source>TryFromIntError::to_string</source>
          <target state="translated">TryFromIntError::to_string</target>
        </trans-unit>
        <trans-unit id="3bd074fd7b824eb16d5c009603fefee21d967354" translate="yes" xml:space="preserve">
          <source>TryFromIntError::try_from</source>
          <target state="translated">TryFromIntError::try_from</target>
        </trans-unit>
        <trans-unit id="2a66975e8a4a9df97b01eea79b97edba1ce4fc13" translate="yes" xml:space="preserve">
          <source>TryFromIntError::try_into</source>
          <target state="translated">TryFromIntError::try_into</target>
        </trans-unit>
        <trans-unit id="853b95e029b9b10b04426ea41bce22a33cadfde3" translate="yes" xml:space="preserve">
          <source>TryFromIntError::type_id</source>
          <target state="translated">TryFromIntError::type_id</target>
        </trans-unit>
        <trans-unit id="f7ae979f3e3e5c6883cf562acec4a3d8911ff6b7" translate="yes" xml:space="preserve">
          <source>TryFromSliceError</source>
          <target state="translated">TryFromSliceError</target>
        </trans-unit>
        <trans-unit id="08abda7dda4132c13ad2de215a8116ad1c512693" translate="yes" xml:space="preserve">
          <source>TryFromSliceError::borrow</source>
          <target state="translated">TryFromSliceError::borrow</target>
        </trans-unit>
        <trans-unit id="a42a16b656b3e78ad3c1fba788c25cca8562aa04" translate="yes" xml:space="preserve">
          <source>TryFromSliceError::borrow_mut</source>
          <target state="translated">TryFromSliceError::borrow_mut</target>
        </trans-unit>
        <trans-unit id="6b154dc43d23a695abe3c26c810c9600a10bbfc7" translate="yes" xml:space="preserve">
          <source>TryFromSliceError::cause</source>
          <target state="translated">TryFromSliceError::cause</target>
        </trans-unit>
        <trans-unit id="06c3cdee5b115341587a81b7640e380fd15333ea" translate="yes" xml:space="preserve">
          <source>TryFromSliceError::clone</source>
          <target state="translated">TryFromSliceError::clone</target>
        </trans-unit>
        <trans-unit id="a4d48a9b9f7dd5e07e2bb398d2d1029a5b1eb76b" translate="yes" xml:space="preserve">
          <source>TryFromSliceError::clone_from</source>
          <target state="translated">TryFromSliceError::clone_from</target>
        </trans-unit>
        <trans-unit id="faf3d5f757e37a47d1e58275eb48efaa726218ad" translate="yes" xml:space="preserve">
          <source>TryFromSliceError::clone_into</source>
          <target state="translated">TryFromSliceError::clone_into</target>
        </trans-unit>
        <trans-unit id="49619f8bf5df143f7d9e552904f6a84fca8093ea" translate="yes" xml:space="preserve">
          <source>TryFromSliceError::description</source>
          <target state="translated">TryFromSliceError::description</target>
        </trans-unit>
        <trans-unit id="fc484006f6aa38bffa40eb517d8b4b32091a5671" translate="yes" xml:space="preserve">
          <source>TryFromSliceError::fmt</source>
          <target state="translated">TryFromSliceError::fmt</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
