<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="meteor">
    <body>
      <group id="meteor">
        <trans-unit id="2d873733389b731ccb6810f037b7574fe7350931" translate="yes" xml:space="preserve">
          <source>AccountsClient#logout()</source>
          <target state="translated">AccountsClient#logout()</target>
        </trans-unit>
        <trans-unit id="c6d36ea75d01bd0feb9a54654a78dfdefdff935a" translate="yes" xml:space="preserve">
          <source>AccountsClient#logoutOtherClients()</source>
          <target state="translated">AccountsClient#logoutOtherClients()</target>
        </trans-unit>
        <trans-unit id="1540993f501a89e34837847a656eb099f4cfe546" translate="yes" xml:space="preserve">
          <source>AccountsClient()</source>
          <target state="translated">AccountsClient()</target>
        </trans-unit>
        <trans-unit id="64d35ce0d75364de62b4e75eb9a48ef04d5827a9" translate="yes" xml:space="preserve">
          <source>AccountsCommon#config()</source>
          <target state="translated">AccountsCommon#config()</target>
        </trans-unit>
        <trans-unit id="d13e8bf51ba293e16f284e56f026336ed6fc5d7c" translate="yes" xml:space="preserve">
          <source>AccountsCommon#onLogin()</source>
          <target state="translated">AccountsCommon#onLogin()</target>
        </trans-unit>
        <trans-unit id="29d1a61992a980f4b4a9f2d5dbdab4cfbb7d8372" translate="yes" xml:space="preserve">
          <source>AccountsCommon#onLoginFailure()</source>
          <target state="translated">AccountsCommon#onLoginFailure()</target>
        </trans-unit>
        <trans-unit id="17fde8fb86c818cbfbce1fafd7353d77e51566c9" translate="yes" xml:space="preserve">
          <source>AccountsCommon#onLogout()</source>
          <target state="translated">AccountsCommon#onLogout()</target>
        </trans-unit>
        <trans-unit id="435e10616965a58d7b686c1eca8ce03c343fc71a" translate="yes" xml:space="preserve">
          <source>AccountsCommon#user()</source>
          <target state="translated">AccountsCommon#user()</target>
        </trans-unit>
        <trans-unit id="b8866b82d476f1d8dece76aa668336930e8479eb" translate="yes" xml:space="preserve">
          <source>AccountsCommon#userId()</source>
          <target state="translated">AccountsCommon#userId()</target>
        </trans-unit>
        <trans-unit id="92b2b7d6ab1935e2258a8aaaeebf4cbff62264e5" translate="yes" xml:space="preserve">
          <source>AccountsCommon()</source>
          <target state="translated">AccountsCommon()</target>
        </trans-unit>
        <trans-unit id="7c0928d46425660f76f3f12c8e5211d6a20a2f90" translate="yes" xml:space="preserve">
          <source>AccountsServer#onCreateUser()</source>
          <target state="translated">AccountsServer#onCreateUser()</target>
        </trans-unit>
        <trans-unit id="02a325378242e0565a24b87d9b3ece573ed4fd81" translate="yes" xml:space="preserve">
          <source>AccountsServer#validateLoginAttempt()</source>
          <target state="translated">AccountsServer#validateLoginAttempt()</target>
        </trans-unit>
        <trans-unit id="71aaba816be4fe80032c8e291cd8ec524467785a" translate="yes" xml:space="preserve">
          <source>AccountsServer#validateNewUser()</source>
          <target state="translated">AccountsServer#validateNewUser()</target>
        </trans-unit>
        <trans-unit id="49a13f3a5de809ead09bba2bca8c799552d93578" translate="yes" xml:space="preserve">
          <source>AccountsServer()</source>
          <target state="translated">AccountsServer()</target>
        </trans-unit>
        <trans-unit id="011c9788d6e0be0ea332791b0acefb3c0e817f6f" translate="yes" xml:space="preserve">
          <source>Across Meteor applications, there are some common patterns of data loading and management on the client side that are worth knowing. We&amp;rsquo;ll go into more detail about some of these in the &lt;a href=&quot;ui-ux&quot;&gt;UI/UX Article&lt;/a&gt;.</source>
          <target state="translated">Meteor 응용 프로그램 전체에 걸쳐 클라이언트 측에서 알아야 할 일반적인 데이터로드 및 관리 패턴이 있습니다. &lt;a href=&quot;ui-ux&quot;&gt;UI / UX Article&lt;/a&gt; 에서 이들 중 일부에 대해 더 자세히 설명 할 것입니다 .</target>
        </trans-unit>
        <trans-unit id="aa77549e9e718390ad59a70bcb9f8ce07f6acc29" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;$ANDROID_HOME/tools&lt;/code&gt;, and &lt;code&gt;$ANDROID_HOME/platform-tools&lt;/code&gt; to your &lt;code&gt;PATH&lt;/code&gt;</source>
          <target state="translated">추가 &lt;code&gt;$ANDROID_HOME/tools&lt;/code&gt; 및 &lt;code&gt;$ANDROID_HOME/platform-tools&lt;/code&gt; 당신에 &lt;code&gt;PATH&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b30293095796dd25179a0b165702884dacb01284" translate="yes" xml:space="preserve">
          <source>Add a custom datatype to EJSON.</source>
          <target state="translated">EJSON에 사용자 정의 데이터 유형을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="7a9876a95776ae24503e37be6497a8549c2750e6" translate="yes" xml:space="preserve">
          <source>Add a document to the collection. A document is just an object, and its fields can contain any combination of EJSON-compatible datatypes (arrays, objects, numbers, strings, &lt;code&gt;null&lt;/code&gt;, true, and false).</source>
          <target state="translated">컬렉션에 문서를 추가하십시오. 문서는 단지 객체 일 뿐이며 해당 필드에는 EJSON 호환 데이터 유형 (배열, 객체, 숫자, 문자열, &lt;code&gt;null&lt;/code&gt; , true 및 false)의 모든 조합이 포함될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="362f23c3893b39183ed59714e372f15f7fc6317e" translate="yes" xml:space="preserve">
          <source>Add a preference for your build as described in the &lt;a href=&quot;http://cordova.apache.org/docs/en/5.1.1/config_ref_index.md.html#The%20config.xml%20File_global_preferences&quot;&gt;Cordova documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://cordova.apache.org/docs/en/5.1.1/config_ref_index.md.html#The%20config.xml%20File_global_preferences&quot;&gt;Cordova 문서에&lt;/a&gt; 설명 된대로 빌드 환경 설정을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="a23cdf254dbd7a10b8883eec86d6146b48165821" translate="yes" xml:space="preserve">
          <source>Add a rule that matches against a stream of events describing method or subscription attempts. Each event is an object with the following properties:</source>
          <target state="translated">메소드 또는 구독 시도를 설명하는 이벤트 스트림과 일치하는 규칙을 추가하십시오. 각 이벤트는 다음과 같은 속성을 가진 객체입니다.</target>
        </trans-unit>
        <trans-unit id="e2dab10a73fe6cfb3e34ad0bafd8901d568cb909" translate="yes" xml:space="preserve">
          <source>Add an email address for a user. Use this instead of directly updating the database. The operation will fail if there is a different user with an email only differing in case. If the specified user has an existing email only differing in case however, we replace it.</source>
          <target state="translated">사용자의 이메일 주소를 추가하십시오. 데이터베이스를 직접 업데이트하는 대신 이것을 사용하십시오. 이메일 만 다른 사용자가 다른 경우에만 작업이 실패합니다. 그러나 지정된 사용자에게 기존 이메일 만있는 경우가 다르면이를 교체합니다.</target>
        </trans-unit>
        <trans-unit id="3d7db431b9155e6d75c4fbbcd640b667f2a8c9ea" translate="yes" xml:space="preserve">
          <source>Add button</source>
          <target state="translated">추가 버튼</target>
        </trans-unit>
        <trans-unit id="9d6a5d02b3ad734d502fa1851246c8de28e70006" translate="yes" xml:space="preserve">
          <source>Add packages to your Meteor project. By convention, names of community packages include the name of the maintainer. For example: &lt;code&gt;meteor add iron:router&lt;/code&gt;. You can add multiple packages with one command.</source>
          <target state="translated">Meteor 프로젝트에 패키지를 추가하십시오. 일반적으로 커뮤니티 패키지의 이름에는 관리자의 이름이 포함됩니다. 예를 들어 &lt;code&gt;meteor add iron:router&lt;/code&gt; 입니다. 하나의 명령으로 여러 패키지를 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3920f6d0b00d2751a5ea3733ff82e0270a4a960a" translate="yes" xml:space="preserve">
          <source>Add top-level fields onto the user document</source>
          <target state="translated">사용자 문서에 최상위 필드 추가</target>
        </trans-unit>
        <trans-unit id="df0650afac1d054969ef58c6351adcf0a428807c" translate="yes" xml:space="preserve">
          <source>Adding CSS</source>
          <target state="translated">CSS 추가</target>
        </trans-unit>
        <trans-unit id="64747959a1e2f4cdcc191c7686aa129e36e36792" translate="yes" xml:space="preserve">
          <source>Adding Cordova platforms</source>
          <target state="translated">Cordova 플랫폼 추가</target>
        </trans-unit>
        <trans-unit id="388f1da366d64049acbe13b239d2d31dbd4d8856" translate="yes" xml:space="preserve">
          <source>Adding JavaScript</source>
          <target state="translated">자바 스크립트 추가</target>
        </trans-unit>
        <trans-unit id="5f5e54ebc13cbf10855d194409446e2aef511baf" translate="yes" xml:space="preserve">
          <source>Adding Sass, Less, or Stylus mixins/variables</source>
          <target state="translated">Sass, Less 또는 Stylus 믹스 인 / 변수 추가</target>
        </trans-unit>
        <trans-unit id="114997acdf8a6a0d1ae4b97ece4c85485198b588" translate="yes" xml:space="preserve">
          <source>Adding and using the package is straightforward:</source>
          <target state="translated">패키지 추가 및 사용은 간단합니다.</target>
        </trans-unit>
        <trans-unit id="b3a033b09d8548343def60883be8ca053af2d743" translate="yes" xml:space="preserve">
          <source>Adding fields on user registration</source>
          <target state="translated">사용자 등록시 필드 추가</target>
        </trans-unit>
        <trans-unit id="3dcf7dac1471438719bdd8017ba88f48d68076b0" translate="yes" xml:space="preserve">
          <source>Adding files and assets</source>
          <target state="translated">파일 및 자산 추가</target>
        </trans-unit>
        <trans-unit id="0bbbb60ef568f1a1cf6b30da1fd5363aa39c2200" translate="yes" xml:space="preserve">
          <source>Adding other assets</source>
          <target state="translated">다른 자산 추가</target>
        </trans-unit>
        <trans-unit id="3671e86de175ad1079e42e821c4583315f71e916" translate="yes" xml:space="preserve">
          <source>Adding types will make your code more readable and less prone to runtime errors.</source>
          <target state="translated">유형을 추가하면 코드를 더 읽기 쉽고 런타임 오류가 덜 발생합니다.</target>
        </trans-unit>
        <trans-unit id="a94eb94b9f2637bb630167bcd28d6708ac844625" translate="yes" xml:space="preserve">
          <source>Additional parameters can be passed in the same way as the &lt;code&gt;node&lt;/code&gt; command, and the &lt;a href=&quot;https://nodejs.org/dist/latest-v4.x/docs/api/cli.html&quot;&gt;Node.js documentation&lt;/a&gt; should be consulted for the full list of commands and for a better understanding of their usage.</source>
          <target state="translated">추가 매개 변수는 &lt;code&gt;node&lt;/code&gt; 명령과 동일한 방식으로 전달 될 수 있으며 , 전체 명령 목록과 사용법을 더 잘 이해 하려면 &lt;a href=&quot;https://nodejs.org/dist/latest-v4.x/docs/api/cli.html&quot;&gt;Node.js 문서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="c61759d64b2898cfdf46cf87c8b9324871181fa3" translate="yes" xml:space="preserve">
          <source>Additional parameters can be passed in the same way as the &lt;code&gt;npm&lt;/code&gt; command (e.g. &lt;code&gt;meteor npm rebuild&lt;/code&gt;, &lt;code&gt;meteor npm ls&lt;/code&gt;, etc.) and the &lt;a href=&quot;https://docs.npmjs.com/&quot;&gt;npm documentation&lt;/a&gt; should be consulted for the full list of commands and for a better understanding of their usage.</source>
          <target state="translated">추가 매개 변수는 &lt;code&gt;npm&lt;/code&gt; 명령 과 같은 방식으로 전달 될 수 있으며 (예 : &lt;code&gt;meteor npm rebuild&lt;/code&gt; , &lt;code&gt;meteor npm ls&lt;/code&gt; 등) 명령의 전체 목록과 사용법을 더 잘 이해 하려면 &lt;a href=&quot;https://docs.npmjs.com/&quot;&gt;npm 설명서&lt;/a&gt; 를 참조해야합니다.</target>
        </trans-unit>
        <trans-unit id="19bd855e6f1778a7f8fc5ece5a25da1f035bdf66" translate="yes" xml:space="preserve">
          <source>Additionally we can see an example of a &lt;em&gt;template helper&lt;/em&gt;&amp;mdash;&lt;code&gt;{{checkedClass todo}}&lt;/code&gt; calls out to a &lt;code&gt;checkedClass&lt;/code&gt; helper defined in a separate JavaScript file. The HTML template and JavaScript file together define the &lt;code&gt;Todos_item&lt;/code&gt; component:</source>
          <target state="translated">또한 우리는의 예를 볼 수 있습니다 &lt;em&gt;템플릿 헬퍼&lt;/em&gt; - &lt;code&gt;{{checkedClass todo}}&lt;/code&gt; A를 부른다 &lt;code&gt;checkedClass&lt;/code&gt; 의 별도의 자바 스크립트 파일에 정의 도우미. HTML 템플리트와 JavaScript 파일은 &lt;code&gt;Todos_item&lt;/code&gt; 구성 요소를 함께 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="f8ce3ccec6bd3c5fd49a861dea388545b217a16c" translate="yes" xml:space="preserve">
          <source>Additionally, Meteor offers a &amp;ldquo;full application&amp;rdquo; test mode. You can run this with &lt;code&gt;meteor test --full-app&lt;/code&gt;.</source>
          <target state="translated">또한 Meteor는 &quot;전체 응용 프로그램&quot;테스트 모드를 제공합니다. &lt;code&gt;meteor test --full-app&lt;/code&gt; 로 이것을 실행할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="420379ef392349852612b66fd47cd79ac31dea37" translate="yes" xml:space="preserve">
          <source>Additionally, a helper will re-run if any &lt;em&gt;reactive data source&lt;/em&gt; accessed from within &lt;em&gt;that specific helper&lt;/em&gt; changes.</source>
          <target state="translated">또한 &lt;em&gt;특정 도우미&lt;/em&gt; 내에서 액세스 하는 &lt;em&gt;반응 형 데이터 소스가&lt;/em&gt; 변경 되면 도우미가 다시 실행됩니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8ee22dec3b0b7b44ee60e2022b662bed3831d7a0" translate="yes" xml:space="preserve">
          <source>Additionally, each external service has its own login provider package and login function. For example, to support GitHub login, run the following in your terminal:</source>
          <target state="translated">또한 각 외부 서비스에는 고유 한 로그인 공급자 패키지 및 로그인 기능이 있습니다. 예를 들어, GitHub 로그인을 지원하려면 터미널에서 다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="c534e06e39d6d2525f18d3c145b1c0626a75e06d" translate="yes" xml:space="preserve">
          <source>Additionally, for better clarity, always explicitly provide a data context to an inclusion rather than letting it inherit the context of the template where it was rendered:</source>
          <target state="translated">또한 명확성을 높이기 위해 렌더링 된 템플릿의 컨텍스트를 상속하지 않고 항상 포함에 데이터 컨텍스트를 명시 적으로 제공합니다.</target>
        </trans-unit>
        <trans-unit id="4c8372b30ff5a06321c7ece8a486493759c3ce1d" translate="yes" xml:space="preserve">
          <source>Additionally, the URL could contain an HTTP &lt;a href=&quot;https://en.wikipedia.org/wiki/Query_string&quot;&gt;&lt;em&gt;query string&lt;/em&gt;&lt;/a&gt; (the part after an optional &lt;code&gt;?&lt;/code&gt;). If so, Flow Router will also split it up into named parameters, which it calls &lt;code&gt;queryParams&lt;/code&gt;.</source>
          <target state="translated">또한 URL에는 HTTP &lt;a href=&quot;https://en.wikipedia.org/wiki/Query_string&quot;&gt;&lt;em&gt;쿼리 문자열&lt;/em&gt;&lt;/a&gt; (선택적 &lt;code&gt;?&lt;/code&gt; 뒤에 오는 부분) 이 포함될 수 있습니다 . 그렇다면 Flow Router는이를 이름 지정된 매개 변수로 나누고이를 &lt;code&gt;queryParams&lt;/code&gt; 라고합니다 .</target>
        </trans-unit>
        <trans-unit id="bd4c77cdf53eb262ea5f0015e70eeaf743c9287d" translate="yes" xml:space="preserve">
          <source>Additionally, this access to the npm that comes with Meteor avoids the need to download and install npm separately.</source>
          <target state="translated">또한 Meteor와 함께 제공되는 npm에 액세스하면 npm을 별도로 다운로드하여 설치할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="27c02d14b165a76b6d1d97af30a8ac67b770a868" translate="yes" xml:space="preserve">
          <source>Adds platforms to your Meteor project. You can add multiple platforms with one command. Once a platform has been added, you can use &amp;lsquo;meteor run</source>
          <target state="translated">Meteor 프로젝트에 플랫폼을 추가합니다. 하나의 명령으로 여러 플랫폼을 추가 할 수 있습니다. 플랫폼이 추가되면 'meteor run'을 사용할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="780dad50ba3d311b65d5ebf34f62aa966358bec7" translate="yes" xml:space="preserve">
          <source>Adds support for binary and octal numeric literals. For example, &lt;code&gt;0b111110111 === 503&lt;/code&gt; and &lt;code&gt;0o767 === 503&lt;/code&gt;.</source>
          <target state="translated">이진 및 8 진 숫자 리터럴에 대한 지원을 추가합니다. 예를 들어, &lt;code&gt;0b111110111 === 503&lt;/code&gt; 및 &lt;code&gt;0o767 === 503&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="9c800c5082fa959d407b42b07c7d1b7b481b2b63" translate="yes" xml:space="preserve">
          <source>Advanced Method boilerplate</source>
          <target state="translated">고급 분석법 상용구</target>
        </trans-unit>
        <trans-unit id="0f498dc21b43c27ac7511b2b18666d5a5f39db07" translate="yes" xml:space="preserve">
          <source>Advanced Methods with mdg:validated-method</source>
          <target state="translated">mdg : validated-method를 사용한 고급 방법</target>
        </trans-unit>
        <trans-unit id="823e688534c2f6bc344b4fa9d106758978e7cc6f" translate="yes" xml:space="preserve">
          <source>Advanced Routing</source>
          <target state="translated">고급 라우팅</target>
        </trans-unit>
        <trans-unit id="c21b7ed2ffa893e99aa0f79d44fc9538365b40a9" translate="yes" xml:space="preserve">
          <source>Advanced build customization</source>
          <target state="translated">고급 빌드 사용자 정의</target>
        </trans-unit>
        <trans-unit id="6dad2bf50708ff78286227db8839b9e68c752c7c" translate="yes" xml:space="preserve">
          <source>Advanced concepts</source>
          <target state="translated">고급 개념</target>
        </trans-unit>
        <trans-unit id="8d357a9bd35794ea1054490c87d0401db6aec907" translate="yes" xml:space="preserve">
          <source>Advanced publications</source>
          <target state="translated">고급 간행물</target>
        </trans-unit>
        <trans-unit id="0e19bf3c9595e917e97cddeb24c3719336161b84" translate="yes" xml:space="preserve">
          <source>After doing the above, you&amp;rsquo;ll need to ensure you &lt;code&gt;npm install&lt;/code&gt; and restart the &lt;code&gt;meteor&lt;/code&gt; process running your app to make sure the PostCSS system has had a chance to set itself up.</source>
          <target state="translated">위의 작업을 수행 한 후에는 &lt;code&gt;npm install&lt;/code&gt; 하고 앱을 실행 하는 &lt;code&gt;meteor&lt;/code&gt; 프로세스를 다시 시작 하여 PostCSS 시스템에 자체 설정 기회가 있는지 확인해야합니다.</target>
        </trans-unit>
        <trans-unit id="de0707d98bb40f8516804642b2cf49d9c7baef75" translate="yes" xml:space="preserve">
          <source>After either method, edit the &lt;code&gt;dependencies&lt;/code&gt; attribute of &lt;code&gt;my-app/package.json&lt;/code&gt;, adding &lt;code&gt;&quot;my-package&quot;: &quot;1.0.0&quot;&lt;/code&gt; (use the same version number you chose during &lt;code&gt;meteor npm init&lt;/code&gt;).</source>
          <target state="translated">두 방법 중 하나를 수행 한 후 &lt;code&gt;&quot;my-package&quot;: &quot;1.0.0&quot;&lt;/code&gt; 추가하여 &lt;code&gt;my-app/package.json&lt;/code&gt; 의 &lt;code&gt;dependencies&lt;/code&gt; 속성을 편집하십시오 ( &lt;code&gt;meteor npm init&lt;/code&gt; 중에 선택한 동일한 버전 번호 사용 ).</target>
        </trans-unit>
        <trans-unit id="33a8ab90275b0d97dbfc88bef89d7288eb8dd6f2" translate="yes" xml:space="preserve">
          <source>After it has downloaded, launch the installer, and complete the installation steps</source>
          <target state="translated">다운로드가 완료되면 설치 관리자를 시작하고 설치 단계를 완료하십시오.</target>
        </trans-unit>
        <trans-unit id="70adcc2f24d10940cb49cca0c84adfa1b0d09c55" translate="yes" xml:space="preserve">
          <source>After reading this article, you&amp;rsquo;ll know:</source>
          <target state="translated">이 기사를 읽은 후에는 다음을 알게됩니다.</target>
        </trans-unit>
        <trans-unit id="943f92adb8ca1f9f8d14daab023925fef5f8338c" translate="yes" xml:space="preserve">
          <source>After reading this guide, you&amp;rsquo;ll know:</source>
          <target state="translated">이 안내서를 읽은 후에는 다음을 알게됩니다.</target>
        </trans-unit>
        <trans-unit id="005eb5bd81f15573922dd54d30039203a9a6c898" translate="yes" xml:space="preserve">
          <source>After running &lt;code&gt;meteor build&lt;/code&gt; the generated APK will be copied from the &lt;code&gt;&amp;lt;build-output-directory&amp;gt;/android/project/build/outputs/apk&lt;/code&gt; directory to &lt;code&gt;&amp;lt;build-output-directory&amp;gt;/android/release-unsigned.apk&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;meteor build&lt;/code&gt; 를 실행 하면 생성 된 APK가 &lt;code&gt;&amp;lt;build-output-directory&amp;gt;/android/project/build/outputs/apk&lt;/code&gt; 디렉토리에서 &lt;code&gt;&amp;lt;build-output-directory&amp;gt;/android/release-unsigned.apk&lt;/code&gt; 로 복사 됩니다.</target>
        </trans-unit>
        <trans-unit id="74b88dbbf986dcebc1fcc206d648cecb38a2bdfa" translate="yes" xml:space="preserve">
          <source>After running &lt;code&gt;meteor build&lt;/code&gt; you can open the generated Xcode project in Xcode:</source>
          <target state="translated">&lt;code&gt;meteor build&lt;/code&gt; 를 실행 한 후 생성 된 Xcode 프로젝트를 Xcode에서 열 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dc0c82926387fe8179d7ef85b7e225af7559f304" translate="yes" xml:space="preserve">
          <source>After the download and installation completes, you will need to accept the license agreement. If you start Xcode for the first time, a dialog will pop up where you can read the license agreement and accept it. You can close Xcode directly afterwards.</source>
          <target state="translated">다운로드 및 설치가 완료되면 라이센스 계약에 동의해야합니다. Xcode를 처음 시작하면 라이센스 계약을 읽고 동의 할 수있는 대화 상자가 나타납니다. 나중에 직접 Xcode를 닫을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="37174beccd1fb462ac9c5d818f04785570a1b698" translate="yes" xml:space="preserve">
          <source>After the relevant data updates have been sent to the correct client, the server sends back the last message in the Method life cycle - the DDP &lt;code&gt;updated&lt;/code&gt; message with the relevant Method ID. The client rolls back any changes to client side data made in the Method simulation in step 1, and replaces them with the actual changes sent from the server in step 5.</source>
          <target state="translated">관련 데이터 업데이트가 올바른 클라이언트로 전송 된 후 서버는 분석법 수명주기의 마지막 메시지 ( 관련 분석법 ID가 포함 &lt;code&gt;updated&lt;/code&gt; DDP 업데이트 메시지 )를 다시 보냅니다 . 클라이언트는 1 단계의 방법 시뮬레이션에서 작성된 클라이언트 측 데이터에 대한 변경 사항을 롤백하고 5 단계에서 서버에서 전송 된 실제 변경 사항으로 대체합니다.</target>
        </trans-unit>
        <trans-unit id="6045767e885a139875b55851d1f12f99f9ecb722" translate="yes" xml:space="preserve">
          <source>After you have called one of the two functions above or the user has cancelled the process, call the &lt;code&gt;done&lt;/code&gt; function you got in the link callback. This will tell Meteor to get out of the special state it enters when you&amp;rsquo;re doing one of the email account flows.</source>
          <target state="translated">위의 두 함수 중 하나를 호출했거나 사용자가 프로세스를 취소 한 후 링크 콜백에서 얻은 &lt;code&gt;done&lt;/code&gt; 함수를 호출하십시오 . 이렇게하면 이메일 계정 흐름 중 하나를 수행 할 때 Meteor가 입력 한 특수 상태에서 벗어날 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="13f2d652f70945cb85fc5562fc3600a535ffb359" translate="yes" xml:space="preserve">
          <source>After:</source>
          <target state="translated">After:</target>
        </trans-unit>
        <trans-unit id="90a2684dcb2f4fa25ba6119784d55dc08cc30349" translate="yes" xml:space="preserve">
          <source>Again, generally speaking, this applies to applications whose &lt;code&gt;MAIL_URL&lt;/code&gt; already includes &lt;code&gt;:465&lt;/code&gt;. If an application&amp;rsquo;s mail provider supports &lt;code&gt;STARTTLS&lt;/code&gt; (i.e. if the &lt;code&gt;MAIL_URL&lt;/code&gt; uses &lt;code&gt;:587&lt;/code&gt; and &lt;em&gt;sometimes&lt;/em&gt;&lt;code&gt;:25&lt;/code&gt;), the application can continue to use &lt;code&gt;smtp://&lt;/code&gt; (without the &lt;code&gt;s&lt;/code&gt;) and the TLS/SSL upgrade will be made by the mail server, if supported.</source>
          <target state="translated">다시 말하지만, 이것은 일반적으로 &lt;code&gt;MAIL_URL&lt;/code&gt; 에 이미 &lt;code&gt;:465&lt;/code&gt; 가 포함 된 애플리케이션에 적용됩니다 . 애플리케이션의 메일 제공 업체가 &lt;code&gt;STARTTLS&lt;/code&gt; 를 지원하는 경우 (즉, &lt;code&gt;MAIL_URL&lt;/code&gt; 이 &lt;code&gt;:587&lt;/code&gt; 을 사용 하고 &lt;em&gt;때로는 &lt;/em&gt; &lt;code&gt;:25&lt;/code&gt; 를 사용하는 경우) 애플리케이션은 &lt;code&gt;smtp://&lt;/code&gt; 를 계속 사용할 수 있고 ( &lt;code&gt;s&lt;/code&gt; 없이 ) TLS / SSL 업그레이드는 메일 서버에서 수행됩니다. 지원되는 경우.</target>
        </trans-unit>
        <trans-unit id="871a26ff2335d08b2c118de393b550bd331fa89e" translate="yes" xml:space="preserve">
          <source>Alias for &lt;code&gt;template.view.autorun&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;template.view.autorun&lt;/code&gt; 의 별명 .</target>
        </trans-unit>
        <trans-unit id="9d2f89083c0856e21e6a8a489f9f54eb4005e901" translate="yes" xml:space="preserve">
          <source>All EJSON serializations are also valid JSON. For example an object with a date and a binary buffer would be serialized in EJSON as:</source>
          <target state="translated">모든 EJSON 직렬화도 유효한 JSON입니다. 예를 들어 날짜와 이진 버퍼가있는 객체는 EJSON에서 다음과 같이 직렬화됩니다.</target>
        </trans-unit>
        <trans-unit id="c9e603ce0abb2007db07db4ccab534d73d3a9df2" translate="yes" xml:space="preserve">
          <source>All JavaScript files outside special directories are loaded on both the client and the server. Meteor provides the variables &lt;a href=&quot;http://docs.meteor.com/#/full/meteor_isserver&quot;&gt;&lt;code&gt;Meteor.isClient&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://docs.meteor.com/#/full/meteor_isserver&quot;&gt;&lt;code&gt;Meteor.isServer&lt;/code&gt;&lt;/a&gt; so that your code can alter its behavior depending on whether it&amp;rsquo;s running on the client or the server.</source>
          <target state="translated">특수 디렉토리 외부의 모든 JavaScript 파일은 클라이언트와 서버 모두에로드됩니다. Meteor는 변수가 &lt;a href=&quot;http://docs.meteor.com/#/full/meteor_isserver&quot;&gt; &lt;code&gt;Meteor.isClient&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;http://docs.meteor.com/#/full/meteor_isserver&quot;&gt; &lt;code&gt;Meteor.isServer&lt;/code&gt; &lt;/a&gt; 변수를 제공 하므로 코드가 클라이언트에서 실행되는지 서버에서 실행되는지에 따라 동작이 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9e8b0b6c02b0ad9e7952b034de5ba33e9fce9112" translate="yes" xml:space="preserve">
          <source>All code written in CoffeeScript compiles to JavaScript under the hood, and is completely compatible with any code in other packages that is written in JS or ES2015.</source>
          <target state="translated">CoffeeScript로 작성된 모든 코드는 기본적으로 JavaScript로 컴파일되며 JS 또는 ES2015로 작성된 다른 패키지의 모든 코드와 완벽하게 호환됩니다.</target>
        </trans-unit>
        <trans-unit id="a0a020dbb6fef8eb548e295eef6601c35c3e144e" translate="yes" xml:space="preserve">
          <source>All documents tracked by this subscription are removed from the mergebox, which may or may not mean they are also removed from the client.</source>
          <target state="translated">이 구독으로 추적 된 모든 문서는 병합 상자에서 제거되며 이는 클라이언트에서도 제거되었음을 의미 할 수도 있고 그렇지 않을 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="c0bb857a7d1900721d806817b5c50f8454ffb7f6" translate="yes" xml:space="preserve">
          <source>All files inside a top-level directory called &lt;code&gt;private/&lt;/code&gt; are only accessible from server code and can be loaded via the &lt;a href=&quot;http://docs.meteor.com/#/full/assets_getText&quot;&gt;&lt;code&gt;Assets&lt;/code&gt;&lt;/a&gt; API. This can be used for private data files and any files that are in your project directory that you don&amp;rsquo;t want to be accessible from the outside.</source>
          <target state="translated">&lt;code&gt;private/&lt;/code&gt; 이라는 최상위 디렉토리 내의 모든 파일 은 서버 코드에서만 액세스 할 수 있으며 &lt;a href=&quot;http://docs.meteor.com/#/full/assets_getText&quot;&gt; &lt;code&gt;Assets&lt;/code&gt; &lt;/a&gt; API 를 통해로드 할 수 있습니다 . 개인 데이터 파일 및 외부에서 액세스하지 않으려는 프로젝트 디렉토리에있는 파일에 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a32c8f4b73b8e5a3f17029d7910cd9aac3badebc" translate="yes" xml:space="preserve">
          <source>All files inside a top-level directory called &lt;code&gt;public/&lt;/code&gt; are served as-is to the client. When referencing these assets, do not include &lt;code&gt;public/&lt;/code&gt; in the URL, write the URL as if they were all in the top level. For example, reference &lt;code&gt;public/bg.png&lt;/code&gt; as &lt;code&gt;&amp;lt;img src='/bg.png' /&amp;gt;&lt;/code&gt;. This is the best place for &lt;code&gt;favicon.ico&lt;/code&gt;, &lt;code&gt;robots.txt&lt;/code&gt;, and similar files.</source>
          <target state="translated">&lt;code&gt;public/&lt;/code&gt; 이라는 최상위 디렉토리 내의 모든 파일 은 그대로 클라이언트에 제공됩니다. 이러한 자산을 참조 할 때는 URL에 &lt;code&gt;public/&lt;/code&gt; 을 포함하지 말고 모두 최상위 레벨에있는 것처럼 URL을 작성하십시오. 예를 들어 &lt;code&gt;public/bg.png&lt;/code&gt; 를 &lt;code&gt;&amp;lt;img src='/bg.png' /&amp;gt;&lt;/code&gt; . &lt;code&gt;favicon.ico&lt;/code&gt; , &lt;code&gt;robots.txt&lt;/code&gt; 및 유사한 파일에 가장 적합한 위치입니다 .</target>
        </trans-unit>
        <trans-unit id="4465f10cd7c7f36f8e4cd583842cd4c0d102e0ec" translate="yes" xml:space="preserve">
          <source>All of the code samples in this guide and future Meteor tutorials will use all of the new ES2015 features. You can also read more about ES2015 and how to get started with it on the Meteor Blog:</source>
          <target state="translated">이 가이드 및 향후 Meteor 자습서의 모든 코드 샘플은 새로운 ES2015 기능을 모두 사용합니다. ES2015 및 Meteor 블로그에서 시작하는 방법에 대한 자세한 내용을 확인할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="723990a6f27fcab98f5a415ad83cd5c5ca4de9df" translate="yes" xml:space="preserve">
          <source>All of the points above about Methods apply to publications as well:</source>
          <target state="translated">방법에 관한 위의 모든 사항은 출판물에도 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="c5dae541cb7c9996014e3bef615a095c1468510b" translate="yes" xml:space="preserve">
          <source>All of the suggestions about reusable components apply to smart components. In addition:</source>
          <target state="translated">재사용 가능한 구성 요소에 대한 모든 제안은 스마트 구성 요소에 적용됩니다. 게다가:</target>
        </trans-unit>
        <trans-unit id="0eacaaa162cea7b01acedefcab5315e3e763b005" translate="yes" xml:space="preserve">
          <source>All of these exports are &lt;em&gt;named&lt;/em&gt;, which means other modules can import them using those names:</source>
          <target state="translated">이러한 모든 내보내기 &lt;em&gt;이름은&lt;/em&gt; 이므로 다른 모듈이 해당 이름을 사용하여 가져올 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="74e1e2eeba53ef9b9a82116509de699a95ae92b5" translate="yes" xml:space="preserve">
          <source>All of these will be addressed in a future release. For full Minimongo release notes, see packages/minimongo/NOTES in the repository.</source>
          <target state="translated">이 모든 것은 향후 릴리스에서 해결 될 것입니다. 전체 Minimongo 릴리스 정보는 저장소의 패키지 / minimongo / NOTES를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="38a6beeafe7d8544bb14228c41a3c2cc2a67647b" translate="yes" xml:space="preserve">
          <source>All registered validate login callbacks are called, even if one of the callbacks aborts the login. The later callbacks will see the &lt;code&gt;allowed&lt;/code&gt; field set to &lt;code&gt;false&lt;/code&gt; since the login will now not be successful. This allows later callbacks to override an error from a previous callback; for example, you could override the &amp;ldquo;Incorrect password&amp;rdquo; error with a different message.</source>
          <target state="translated">콜백 중 하나가 로그인을 중단하더라도 등록 된 모든 확인 로그인 콜백이 호출됩니다. 이후 콜백 에서는 로그인에 성공하지 못하므로 &lt;code&gt;allowed&lt;/code&gt; 필드가 &lt;code&gt;false&lt;/code&gt; 로 설정되어 있습니다. 이렇게하면 나중에 콜백이 이전 콜백의 오류를 무시할 수 있습니다. 예를 들어, 다른 메시지로 &quot;잘못된 비밀번호&quot;오류를 무시할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c3e0d535e821e4718e83f067f6a962f5cedc4b54" translate="yes" xml:space="preserve">
          <source>All three libraries work fine in a Cordova web view, and you can use mobile CSS libraries like Ionic&amp;rsquo;s CSS with any view library.</source>
          <target state="translated">세 개의 라이브러리는 모두 Cordova 웹보기에서 제대로 작동하며 Ionic의 CSS와 같은 모바일 CSS 라이브러리를 모든보기 라이브러리와 함께 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a1f359a9de9a612bd891d2405ea65242c381cd28" translate="yes" xml:space="preserve">
          <source>All you need to do to use CoffeeScript is add the right Meteor package:</source>
          <target state="translated">CoffeeScript를 사용하려면 올바른 Meteor 패키지를 추가하기 만하면됩니다.</target>
        </trans-unit>
        <trans-unit id="c899e169988b39e5bfb7a2b5eca11c66629d598d" translate="yes" xml:space="preserve">
          <source>All your CSS style files will processed using Meteor&amp;rsquo;s default file load order rules along with any import statements and concatenated, and in a production build also minified. However, it&amp;rsquo;s no secret that writing plain CSS can often be a hassle as there&amp;rsquo;s no way to share common CSS code between different selectors or have a consistent color scheme between different elements. CSS compilers, or pre-processors, solve these issues by adding extra features on top of the CSS language like variables, mixins, math, and more, and in some cases also significantly change the syntax of CSS to be easier to read and write.</source>
          <target state="translated">모든 CSS 스타일 파일은 가져 오기 문과 함께 Meteor의 기본 파일로드 순서 규칙을 사용하여 처리되고 연결되며 프로덕션 빌드에서도 축소됩니다. 그러나 일반 CSS를 작성하는 것이 번거로울 수 있다는 것은 비밀이 아닙니다. 다른 선택기간에 공통 CSS 코드를 공유하거나 다른 요소간에 일관된 색 구성표를 가질 수있는 방법이 없기 때문입니다. CSS 컴파일러 또는 전처리 기는 변수, 믹스 인, 수학 등과 같은 CSS 언어 위에 추가 기능을 추가하여 이러한 문제를 해결하고 경우에 따라 CSS 구문을 크게 읽고 쉽게 읽을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="67f60d18dabe03b43d5832e7009a144529c64c2d" translate="yes" xml:space="preserve">
          <source>Allocate a new buffer of binary data that EJSON can serialize.</source>
          <target state="translated">EJSON이 직렬화 할 수있는 새로운 이진 데이터 버퍼를 할당하십시오.</target>
        </trans-unit>
        <trans-unit id="f6805e3fbbbc9311f980952c72e2727b8a8ec241" translate="yes" xml:space="preserve">
          <source>Allow users to write directly to this collection from client code, subject to limitations you define.</source>
          <target state="translated">사용자가 정의한 제한에 따라 사용자가 클라이언트 코드에서이 컬렉션에 직접 쓸 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="a4137b3979288f95612df052084b414f8bfab28d" translate="yes" xml:space="preserve">
          <source>Allows an array of arguments to be interpolated into a list of arguments to a function call, &lt;code&gt;new&lt;/code&gt; expression, or array literal, without using &lt;code&gt;Function.prototype.apply&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;Function.prototype.apply&lt;/code&gt; 를 사용하지 않고 인수 배열을 함수 호출, &lt;code&gt;new&lt;/code&gt; 표현식 또는 배열 리터럴 에 대한 인수 목록으로 보간 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b1b7c032026344be8c04fa53e07fb1a8351c7599" translate="yes" xml:space="preserve">
          <source>Allows defining block-scoped variables that are not allowed to be redefined:</source>
          <target state="translated">재정의가 허용되지 않는 블록 범위 변수를 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8a261e223e52fee3df2107de49be409a69ab9633" translate="yes" xml:space="preserve">
          <source>Allows object literal properties with dynamically computed keys:</source>
          <target state="translated">동적으로 계산 된 키를 사용하여 객체 리터럴 속성을 허용합니다.</target>
        </trans-unit>
        <trans-unit id="1b0be52626d91c97baf41417def44f9ca7adced5" translate="yes" xml:space="preserve">
          <source>Allows omitting the value of an object literal property when the desired value is held by a variable that has the same name as the property key. For example, instead of writing &lt;code&gt;{ x: x, y: y, z: &quot;asdf&quot; }&lt;/code&gt; you can just write &lt;code&gt;{ x, y, z: &quot;asdf&quot; }&lt;/code&gt;. Methods can also be written without the &lt;code&gt;: function&lt;/code&gt; property syntax:</source>
          <target state="translated">원하는 값이 속성 키와 이름이 같은 변수에 의해 유지 될 때 객체 리터럴 속성의 값을 생략 할 수 있습니다. 예를 들어, &lt;code&gt;{ x: x, y: y, z: &quot;asdf&quot; }&lt;/code&gt; 을 쓰는 대신 &lt;code&gt;{ x, y, z: &quot;asdf&quot; }&lt;/code&gt; 쓸 수 있습니다 . &lt;code&gt;: function&lt;/code&gt; 속성 구문 없이 메소드를 작성할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e468a91e79f1a71cef4325535b91f7bcaa6ae065" translate="yes" xml:space="preserve">
          <source>Allows the final parameter of a function to be followed by a comma, provided that parameter is not a &lt;code&gt;...rest&lt;/code&gt; parameter.</source>
          <target state="translated">매개 변수가 &lt;code&gt;...rest&lt;/code&gt; 매개 변수가 아닌 경우 함수의 최종 매개 변수 다음에 쉼표를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0e8b92fe2e287a1482da35d25fbf3d6a5ee85e46" translate="yes" xml:space="preserve">
          <source>Also &lt;code&gt;Plugin&lt;/code&gt; provides helper functions &lt;code&gt;convertToStandardPath&lt;/code&gt; and &lt;code&gt;convertToOSPath&lt;/code&gt; to convert to a Unix path or to the path expected by the node libraries regardless of the path origin.</source>
          <target state="translated">또한 &lt;code&gt;Plugin&lt;/code&gt; 은 경로 원점에 관계없이 유닉스 경로 또는 노드 라이브러리에 의해 예상되는 경로로 변환하기위한 도우미 함수 &lt;code&gt;convertToStandardPath&lt;/code&gt; 및 &lt;code&gt;convertToOSPath&lt;/code&gt; 를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="244a66bdd7d0ffd24563df38667d5769e773bfbd" translate="yes" xml:space="preserve">
          <source>Also enables &lt;code&gt;...spread&lt;/code&gt; properties in object literal expressions:</source>
          <target state="translated">또한 객체 리터럴 표현식에서 &lt;code&gt;...spread&lt;/code&gt; 속성을 활성화 합니다.</target>
        </trans-unit>
        <trans-unit id="d6ed0d6829c8ffc0c2fa56e75bd0ac24c0a1b548" translate="yes" xml:space="preserve">
          <source>Also of note is the way we use a second DDP connection to the server in order to send these test &amp;ldquo;control&amp;rdquo; method calls.</source>
          <target state="translated">또한 이러한 테스트 &quot;제어&quot;메소드 호출을 전송하기 위해 서버에 두 번째 DDP 연결을 사용하는 방법도 중요합니다.</target>
        </trans-unit>
        <trans-unit id="6e56f41a3e64c441efa51df70d6389c3f69aad00" translate="yes" xml:space="preserve">
          <source>Also, when changing between subscriptions, there is a brief period where both subscriptions are loaded (see &lt;a href=&quot;#publication-behavior-with-arguments&quot;&gt;Publication behavior when changing arguments&lt;/a&gt; below), so when doing things like pagination, it&amp;rsquo;s exceedingly likely that this will be the case.</source>
          <target state="translated">또한 구독간에 변경하는 경우 두 구독이 모두로드되는 짧은 기간이 있습니다 ( &lt;a href=&quot;#publication-behavior-with-arguments&quot;&gt;인수 변경시 게시 동작&lt;/a&gt; 참조). 아래의 참조) 페이지 매김과 같은 작업을 수행 할 때 이러한 상황이 발생할 가능성이 매우 높습니다.</target>
        </trans-unit>
        <trans-unit id="bf86eedab7176ccc3c27cb2878ac49cb5f750ae9" translate="yes" xml:space="preserve">
          <source>Alternatively, a publish function can directly control its published record set by calling the functions &lt;a href=&quot;#publish_added&quot;&gt;&lt;code&gt;added&lt;/code&gt;&lt;/a&gt; (to add a new document to the published record set), &lt;a href=&quot;#publish_changed&quot;&gt;&lt;code&gt;changed&lt;/code&gt;&lt;/a&gt; (to change or clear some fields on a document already in the published record set), and &lt;a href=&quot;#publish_removed&quot;&gt;&lt;code&gt;removed&lt;/code&gt;&lt;/a&gt; (to remove documents from the published record set). These methods are provided by &lt;code&gt;this&lt;/code&gt; in your publish function.</source>
          <target state="translated">또는 게시 기능은 &lt;a href=&quot;#publish_added&quot;&gt; &lt;code&gt;added&lt;/code&gt; &lt;/a&gt; ( 게시 된 레코드 세트에 새 문서를 추가하기 위해), &lt;a href=&quot;#publish_changed&quot;&gt; &lt;code&gt;changed&lt;/code&gt; &lt;/a&gt; (게시 된 레코드 세트에 이미있는 문서의 일부 필드를 변경하거나 지우는 기능)을 호출하여 게시 된 레코드 세트를 직접 제어 할 수 있습니다. &lt;a href=&quot;#publish_removed&quot;&gt; &lt;code&gt;removed&lt;/code&gt; &lt;/a&gt; (게시 된 레코드 세트에서 문서를 제거하기 위해). 이 방법에 의해 제공되는 &lt;code&gt;this&lt;/code&gt; 당신의 게시 기능에.</target>
        </trans-unit>
        <trans-unit id="efd2d6a35b41ba75c464f4d1936e08a05391f70c" translate="yes" xml:space="preserve">
          <source>Alternatively, if unreleased changes have been made to a plugin you&amp;rsquo;d like to use, you can also have Cordova download plugin code from a Git repository. Note that this will clone the plugin repository on every rebuild however, so this can be rather slow and should be avoided where possible. In contrast to default Cordova, Meteor requires you to specify the exact SHA hash for a commit, rather than allow you to refer to a branch or tag. This is done to guarantee repeatable builds and also avoids unnecessary reinstallation of all plugins because as long as the SHA is the same we know nothing has changed.</source>
          <target state="translated">또는 사용하려는 플러그인이 릴리스되지 않은 상태로 변경된 경우 Cordova가 Git 저장소에서 플러그인 코드를 다운로드하도록 할 수도 있습니다. 그러나 이것은 모든 재 구축마다 플러그인 저장소를 복제하므로 다소 느려질 수 있으며 가능한 경우 피해야합니다. 기본 Cordova와 달리 Meteor에서는 분기 또는 태그를 참조 할 수 있도록하지 않고 커밋에 대한 정확한 SHA 해시를 지정해야합니다. 이것은 반복 가능한 빌드를 보장하기 위해 수행되며 SHA가 동일하면 변경 사항이 없다는 것을 알기 때문에 모든 플러그인의 불필요한 재설치를 피합니다.</target>
        </trans-unit>
        <trans-unit id="5e23787dd5e40cdd89907e51dd0f07e2a44d82db" translate="yes" xml:space="preserve">
          <source>Alternatively, with a GitHub URL:</source>
          <target state="translated">또는 GitHub URL을 사용하여 :</target>
        </trans-unit>
        <trans-unit id="f5e5ed452a22b3e4b24f4bcc94906278f87cccaa" translate="yes" xml:space="preserve">
          <source>Alternatively, you can also use tools like &lt;a href=&quot;http://sinonjs.org&quot;&gt;Sinon&lt;/a&gt; to stub things directly, as we&amp;rsquo;ll see for example in our &lt;a href=&quot;#simple-integration-test&quot;&gt;simple integration test&lt;/a&gt;.</source>
          <target state="translated">또는 &lt;a href=&quot;#simple-integration-test&quot;&gt;간단한 통합 테스트&lt;/a&gt; 에서 볼 수 있듯이 &lt;a href=&quot;http://sinonjs.org&quot;&gt;Sinon&lt;/a&gt; 과 같은 도구를 사용 하여 직접 스텁 할 수도 있습니다. .</target>
        </trans-unit>
        <trans-unit id="0e4572186fef61684a06ab8b00c674b05c07e12f" translate="yes" xml:space="preserve">
          <source>Although Blaze is a very intuitive rendering system, it does have some quirks and complexities that are worth knowing about when you are trying to do complex things.</source>
          <target state="translated">Blaze는 매우 직관적 인 렌더링 시스템이지만 복잡한 작업을 수행 할 때 알아야 할 몇 가지 단점과 복잡성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="25cad36d229f3e7c7d7f8a0c74d4fd1a5c1c4a32" translate="yes" xml:space="preserve">
          <source>Although Blaze&amp;rsquo;s simple API doesn&amp;rsquo;t necessarily encourage a componentized approach, you can use the &lt;em&gt;template instance&lt;/em&gt; as a convenient place to store internal functionality and state. The template instance can be accessed via &lt;code&gt;this&lt;/code&gt; inside Blaze&amp;rsquo;s lifecycle callbacks and as &lt;code&gt;Template.instance()&lt;/code&gt; in event handlers and helpers. It&amp;rsquo;s also passed as the second argument to event handlers.</source>
          <target state="translated">Blaze의 간단한 API가 반드시 구성 요소 화 된 접근 방식을 권장하지는 않지만 &lt;em&gt;템플릿 인스턴스&lt;/em&gt; 를 내부 기능 및 상태를 저장하기 편리한 위치로 사용할 수 있습니다 . 템플릿 인스턴스는 Blaze의 수명주기 콜백 내에서 그리고 이벤트 핸들러 및 헬퍼에서 &lt;code&gt;Template.instance()&lt;/code&gt; &lt;code&gt;this&lt;/code&gt; 를 통해 액세스 할 수 있습니다 . 또한 이벤트 처리기에 두 번째 인수로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="d22e9c63e3c21279e3e42409e520c12c353a593e" translate="yes" xml:space="preserve">
          <source>Although Blaze, which is a simple template-based rendering engine, doesn&amp;rsquo;t enforce a lot of these principles (unlike other frameworks like React and Angular) you can enjoy most of the same benefits by following some conventions when writing your Blaze components. This section will outline some of these &amp;ldquo;best practices&amp;rdquo; for writing reusable Blaze components.</source>
          <target state="translated">단순한 템플릿 기반 렌더링 엔진 인 Blaze는 이러한 원칙을 많이 적용하지 않지만 (React 및 Angular와 같은 다른 프레임 워크와 달리) Blaze 구성 요소를 작성할 때 몇 가지 규칙을 따르면 동일한 이점을 대부분 누릴 수 있습니다. 이 섹션에서는 재사용 가능한 Blaze 구성 요소를 작성하기위한 이러한 &quot;모범 사례&quot;중 일부를 간략하게 설명합니다.</target>
        </trans-unit>
        <trans-unit id="635a9fd5a93310f71de411255fe35abe8045eca8" translate="yes" xml:space="preserve">
          <source>Although Flow Router can be used to render React components more or less as we&amp;rsquo;ve described above for Blaze, at the time of this writing Flow Router&amp;rsquo;s support for SSR is &lt;a href=&quot;https://kadira.io/blog/meteor/meteor-ssr-support-using-flow-router-and-react&quot;&gt;still experimental&lt;/a&gt;. However, it&amp;rsquo;s probably the best approach right now if you want to use SSR for Meteor.</source>
          <target state="translated">Flow Router를 사용하여 위에서 설명한 Blaze에 대해 React 구성 요소를 어느 정도 렌더링 할 수 있지만이 글을 쓰는 시점에서 SSR에 대한 Flow Router의 지원은 &lt;a href=&quot;https://kadira.io/blog/meteor/meteor-ssr-support-using-flow-router-and-react&quot;&gt;여전히 실험적&lt;/a&gt; 입니다. 그러나 Meteor에 SSR을 사용하려는 경우 아마도 가장 좋은 방법 일 것입니다.</target>
        </trans-unit>
        <trans-unit id="ee92655a563a27ab39f889772a5a30117b788eb8" translate="yes" xml:space="preserve">
          <source>Although Flow Router doesn&amp;rsquo;t take a done callback, we can use &lt;code&gt;Tracker.afterFlush&lt;/code&gt; to wait for all its reactive consequences to occur.</source>
          <target state="translated">Flow Router는 콜백을 수행하지 않지만 &lt;code&gt;Tracker.afterFlush&lt;/code&gt; 를 사용 하여 모든 반응 결과가 발생할 때까지 기다릴 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="47aab11c85307f6b36496adfd4cd8d785a28dd2e" translate="yes" xml:space="preserve">
          <source>Although Meteor allows you to &lt;a href=&quot;http://docs.meteor.com/#/full/webapp&quot;&gt;write low-level connect handlers&lt;/a&gt; to create any kind of API you like on the server-side, if all you want to do is create a RESTful version of your Methods and Publications, you can often use the &lt;a href=&quot;http://atmospherejs.com/simple/rest&quot;&gt;&lt;code&gt;simple:rest&lt;/code&gt;&lt;/a&gt; package to do this easily. See the &lt;a href=&quot;data-loading#publications-as-rest&quot;&gt;Data Loading&lt;/a&gt; and &lt;a href=&quot;methods&quot;&gt;Methods&lt;/a&gt; articles for more information.</source>
          <target state="translated">Meteor를 사용하면 서버 측에서 원하는 종류의 API를 만들기 위해 &lt;a href=&quot;http://docs.meteor.com/#/full/webapp&quot;&gt;저수준 연결 처리기&lt;/a&gt; 를 작성할 수 있지만 RESTful 버전의 Methods and Publications를 만드는 &lt;a href=&quot;http://atmospherejs.com/simple/rest&quot;&gt; &lt;code&gt;simple:rest&lt;/code&gt; &lt;/a&gt; 사용할 수 있습니다 . 패키지를 쉽게 만들 수 있습니다. 자세한 내용은 &lt;a href=&quot;data-loading#publications-as-rest&quot;&gt;데이터로드&lt;/a&gt; 및 &lt;a href=&quot;methods&quot;&gt;방법&lt;/a&gt; 기사를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="75c597556558c3dec1c29366758ff7d0f9b95387" translate="yes" xml:space="preserve">
          <source>Although Meteor includes a standard set of app icons and launch screens, you&amp;rsquo;ll most likely want to configure your own images.</source>
          <target state="translated">Meteor에는 표준 앱 아이콘과 시작 화면이 포함되어 있지만, 자신의 이미지를 구성하고 싶을 것입니다.</target>
        </trans-unit>
        <trans-unit id="12456b8a1d08c20fc0ed154b40610ed03d056d01" translate="yes" xml:space="preserve">
          <source>Although MongoDB is a schema-less database, which allows maximum flexibility in data structuring, it is generally good practice to use a schema to constrain the contents of your collection to conform to a known format. If you don&amp;rsquo;t, then you tend to end up needing to write defensive code to check and confirm the structure of your data as it &lt;em&gt;comes out&lt;/em&gt; of the database, instead of when it &lt;em&gt;goes into&lt;/em&gt; the database. As in most things, you tend to &lt;em&gt;read data more often than you write it&lt;/em&gt;, and so it&amp;rsquo;s usually easier, and less buggy to use a schema when writing.</source>
          <target state="translated">MongoDB는 스키마가없는 데이터베이스이지만 데이터 구조화에 최대 유연성을 허용하지만 일반적으로 스키마를 사용하여 컬렉션의 내용을 알려진 형식에 맞게 제한하는 것이 좋습니다. 그렇지 않으면 데이터베이스에 &lt;em&gt;들어갈&lt;/em&gt; 때가 아니라 데이터베이스에서 &lt;em&gt;나오는&lt;/em&gt; 데이터의 구조를 확인하고 확인하기 위해 방어 코드를 작성해야하는 경향 이 있습니다. 대부분의 경우와 마찬가지로 &lt;em&gt;데이터를 쓰는 것보다 자주 읽는&lt;/em&gt; 경향이 있으므로 쓰기 작업에서 스키마를 사용하는 것이 더 쉽고 버그가 적습니다.&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a57f88682acb9b68264003f0c2e86fe9a442616b" translate="yes" xml:space="preserve">
          <source>Although a host of tools exist to monitor the performance of HTTP, request-response based applications, the insights they give aren&amp;rsquo;t necessarily useful for a connected client system like a Meteor application. Although it&amp;rsquo;s true that slow HTTP response times would be a problem for your app, and so using a tool like &lt;a href=&quot;https://www.pingdom.com&quot;&gt;Pingdom&lt;/a&gt; can serve a purpose, there are many kinds of issues with your app that won&amp;rsquo;t be surfaced by such tools.</source>
          <target state="translated">HTTP, 요청-응답 기반 응용 프로그램의 성능을 모니터링하기위한 많은 도구가 있지만, 이들이 제공하는 통찰력이 Meteor 응용 프로그램과 같은 연결된 클라이언트 시스템에 반드시 유용한 것은 아닙니다. HTTP 응답 시간이 느리면 앱에서 문제가 될 수 있으므로 &lt;a href=&quot;https://www.pingdom.com&quot;&gt;Pingdom&lt;/a&gt; 과 같은 도구를 사용하는 것이 사실입니다. 하면 목적에 도움이 될 수 있지만 앱에는 이러한 도구에 의해 표시되지 않는 많은 종류의 문제가 있습니다.</target>
        </trans-unit>
        <trans-unit id="816e3a71f46dd88bccaf7db749b2b51725f41ce6" translate="yes" xml:space="preserve">
          <source>Although by default a mustache tag will escape HTML tags to avoid &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-site_scripting&quot;&gt;XSS&lt;/a&gt;, you can render raw HTML with the triple-mustache: &lt;code&gt;{{{ }}}&lt;/code&gt;.</source>
          <target state="translated">기본적으로 콧수염 태그는 &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-site_scripting&quot;&gt;XSS&lt;/a&gt; 를 피하기 위해 HTML 태그를 이스케이프하지만 삼중 콧수염을 사용하여 원시 HTML을 렌더링 할 수 있습니다. &lt;code&gt;{{{ }}}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="11fbdf05d6f81bfb2563790780a590cdd860509e" translate="yes" xml:space="preserve">
          <source>Although client-side state is often best contained as state of an individual template (and passed down the template hierarchy as arguments where necessary), sometimes you have a need for &amp;ldquo;global&amp;rdquo; state that is shared between unrelated sections of the template hierarchy.</source>
          <target state="translated">클라이언트 쪽 상태는 종종 개별 템플릿의 상태로 포함되는 것이 가장 좋으며 (필요한 경우 템플릿 계층 구조를 인수로 전달), 때로는 템플릿 계층의 관련되지 않은 섹션간에 공유되는 &quot;전역&quot;상태가 필요할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2f848759a83ec177cf6e81aa9f9fba003f196c56" translate="yes" xml:space="preserve">
          <source>Although conceptually different to unit tests, such tests typically do not need to be run any differently to unit tests and can use the same &lt;a href=&quot;#running-unit-tests&quot;&gt;&lt;code&gt;meteor test&lt;/code&gt; mode&lt;/a&gt; and &lt;a href=&quot;#isolation-techniques&quot;&gt;isolation techniques&lt;/a&gt; as we use for unit tests.</source>
          <target state="translated">단위 테스트와 개념적으로는 다르지만 일반적으로 이러한 테스트는 단위 테스트와 다르게 실행될 필요가 없으며 단위 테스트에 사용하는 것과 동일한 &lt;a href=&quot;#running-unit-tests&quot;&gt; &lt;code&gt;meteor test&lt;/code&gt; 모드&lt;/a&gt; 및 &lt;a href=&quot;#isolation-techniques&quot;&gt;격리 기술&lt;/a&gt; 을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8b3c8e6eb7114c7f69c371ed26378e67af59e5ad" translate="yes" xml:space="preserve">
          <source>Although having client-side logs in the terminal can be useful, in most cases remote debugging is a much better option. This allows you to use the debugging tools built into Safari (for iOS apps) or Chrome (for Android apps) to investigate an app running on a remote device or a simulator/emulator. Here, you can not only view the logs, but also interact with running JavaScript code and the DOM, monitor network access, etc.</source>
          <target state="translated">터미널에 클라이언트 쪽 로그를 사용하는 것이 유용 할 수 있지만 대부분의 경우 원격 디버깅이 훨씬 더 나은 옵션입니다. 이를 통해 Safari (iOS 앱용) 또는 Chrome (Android 앱용)에 내장 된 디버깅 도구를 사용하여 원격 장치 또는 시뮬레이터 / 에뮬레이터에서 실행되는 앱을 조사 할 수 있습니다. 여기에서 로그를 볼 수있을뿐만 아니라 실행중인 JavaScript 코드 및 DOM과 상호 작용하고 네트워크 액세스를 모니터링 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="72731dbfb51a131b019a3873aaf11db2744a36a1" translate="yes" xml:space="preserve">
          <source>Although it&amp;rsquo;s much easier to deploy a web application than release most other types of software, that doesn&amp;rsquo;t mean you should be cavalier with your deployment. It&amp;rsquo;s important to properly QA and test your releases before you push them live, to ensure that users don&amp;rsquo;t have a bad experience, or even worse, data get corrupted.</source>
          <target state="translated">대부분의 다른 유형의 소프트웨어를 출시하는 것보다 웹 응용 프로그램을 배포하는 것이 훨씬 쉽지만 배포에 무심해야한다는 의미는 아닙니다. 릴리스를 시작하기 전에 제대로 QA하고 릴리스를 테스트하여 사용자에게 나쁜 경험이 없거나 데이터가 더 손상되지 않도록하는 것이 중요합니다.</target>
        </trans-unit>
        <trans-unit id="5087ad6f3bfaa0067d4829982ae5aa028789a430" translate="yes" xml:space="preserve">
          <source>Although the Tracker system means you often don&amp;rsquo;t &lt;em&gt;need&lt;/em&gt; to think too much about this in building your apps, usually if you want to get the user experience right, you&amp;rsquo;ll need to know when the data is ready.</source>
          <target state="translated">트래커 시스템 수단이지만 당신은 자주하지 않습니다 &lt;em&gt;필요&lt;/em&gt; 앱을 빌드 할 때 이에 대해 너무 많이 생각할 일반적으로 사용자 경험을 올바르게 얻으려면 데이터가 준비된 시점을 알아야합니다.</target>
        </trans-unit>
        <trans-unit id="e04bd7cc9a88f2c65a243e94369e5857aa946cba" translate="yes" xml:space="preserve">
          <source>Although there are a number of different variations of &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt; syntax, this section describes the essential forms that everyone should know.</source>
          <target state="translated">&lt;code&gt;import&lt;/code&gt; 및 &lt;code&gt;export&lt;/code&gt; 구문 에는 여러 가지 변형이 있지만 이 섹션에서는 모든 사람이 알아야하는 필수 양식에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="eeaaf3d0d3e25db56af7c914bf7e0f44b390e568" translate="yes" xml:space="preserve">
          <source>Although there are a variety of ways that you can run data through a Simple Schema before sending it to your collection (for instance you could check a schema in every method call), the simplest and most reliable is to use the &lt;a href=&quot;https://atmospherejs.com/aldeed/collection2&quot;&gt;&lt;code&gt;aldeed:collection2&lt;/code&gt;&lt;/a&gt; package to run every mutator (&lt;code&gt;insert/update/upsert&lt;/code&gt; call) through the schema.</source>
          <target state="translated">컬렉션에 데이터를 보내기 전에 단순 스키마를 통해 데이터를 실행할 수있는 다양한 방법이 있지만 (예 : 모든 메서드 호출에서 스키마를 확인할 수 있음) 가장 단순하고 안정적인 방법은 &lt;a href=&quot;https://atmospherejs.com/aldeed/collection2&quot;&gt; &lt;code&gt;aldeed:collection2&lt;/code&gt; &lt;/a&gt; 패키지를 사용하는 것입니다. 스키마를 통해 모든 뮤 테이터 ( &lt;code&gt;insert/update/upsert&lt;/code&gt; 호출)를 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="f2c5e2c0dabd55a432e2a69dcb16b0f0611342bb" translate="yes" xml:space="preserve">
          <source>Although these examples have all involved React, the &lt;code&gt;onPageLoad&lt;/code&gt; API is designed to be generically useful for any kind of server-side rendering.</source>
          <target state="translated">이 예제에는 모두 React가 포함되어 있지만 &lt;code&gt;onPageLoad&lt;/code&gt; API는 모든 종류의 서버 측 렌더링에 일반적으로 유용하도록 설계되었습니다.</target>
        </trans-unit>
        <trans-unit id="a98d751c99750a97e0d90228217615e64356e110" translate="yes" xml:space="preserve">
          <source>Although this &lt;code&gt;ListPageContainer&lt;/code&gt; container is intended to be instantiated by the React Router (which passes in the props automatically), if we did ever want to create one manually, we would need to pass in the props to the container component (which then get passed into our data function above):</source>
          <target state="translated">이 &lt;code&gt;ListPageContainer&lt;/code&gt; 컨테이너는 자동으로 소품을 전달하는 React Router에 의해 인스턴스화되지만, 수동으로 생성하려면 컨테이너를 컨테이너 구성 요소에 전달해야합니다. 위의 데이터 기능) :</target>
        </trans-unit>
        <trans-unit id="57a2a554819e200e6472a12bbba84116b2255302" translate="yes" xml:space="preserve">
          <source>Although we can run the acceptance test against our &amp;ldquo;pure&amp;rdquo; Meteor app, as we&amp;rsquo;ve done above, it often makes sense to start our meteor server with a special test driver, &lt;code&gt;tmeasday:acceptance-test-driver&lt;/code&gt;. (You&amp;rsquo;ll need to &lt;code&gt;meteor add&lt;/code&gt; it to your app):</source>
          <target state="translated">위에서 언급 한 것처럼 &quot;순수한&quot;Meteor 앱에 대해 승인 테스트를 실행할 수 있지만 특수 테스트 드라이버 &lt;code&gt;tmeasday:acceptance-test-driver&lt;/code&gt; 로 유성 서버를 시작하는 것이 좋습니다 . ( &lt;code&gt;meteor add&lt;/code&gt; 앱에 추가 해야합니다) :</target>
        </trans-unit>
        <trans-unit id="cbe3e3881cf9d3a29b02541ba0c56605c0424458" translate="yes" xml:space="preserve">
          <source>Although you can use publications and subscriptions in Meteor via an intuitive understanding, sometimes it&amp;rsquo;s useful to know exactly what happens under the hood when you subscribe to data.</source>
          <target state="translated">직관적 인 이해를 통해 Meteor에서 발행물과 구독을 사용할 수 있지만 때로는 데이터를 구독 할 때 어떤 일이 발생하는지 정확히 아는 것이 유용합니다.</target>
        </trans-unit>
        <trans-unit id="60243bd30eed074113093259d5db7f0ed4cc362b" translate="yes" xml:space="preserve">
          <source>Always restrict fields</source>
          <target state="translated">항상 필드를 제한</target>
        </trans-unit>
        <trans-unit id="6e55dd4e72e3ccefcd5b8b8ceaf6dc4d5ff0bf41" translate="yes" xml:space="preserve">
          <source>Always use specific queries to fetch data</source>
          <target state="translated">항상 특정 쿼리를 사용하여 데이터를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="40da5ba1b12dabdb8a661305aaaf4d1bf0be14c0" translate="yes" xml:space="preserve">
          <source>An &amp;ldquo;else&amp;rdquo; section may be provided, which is used (with no new data context) if there are zero items in the sequence at any time.</source>
          <target state="translated">&quot;else&quot;섹션이 제공 될 수 있으며,이 시퀀스는 언제라도 시퀀스에 0 개의 항목이있는 경우 새 데이터 컨텍스트없이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="7b69ef6dc1aa3027ada407c4c65c6d1d1c505c71" translate="yes" xml:space="preserve">
          <source>An &amp;ldquo;import&amp;rdquo; file is evaluated only if imported from some other file and can be used to share common mixins and variables between different CSS files in your app.</source>
          <target state="translated">&quot;가져 오기&quot;파일은 다른 파일에서 가져온 경우에만 평가되며 앱의 다른 CSS 파일간에 공통 믹스 인 및 변수를 공유하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c1f3be26c217a4b2e96528059e6d171577f3fa88" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;#each&lt;/code&gt; template tag takes a sequence argument and inserts its content for each item in the sequence, setting the data context to the value of that item:</source>
          <target state="translated">&lt;code&gt;#each&lt;/code&gt; 의 템플릿 태그 시퀀스 인자를 그 항목의 값을 데이터 컨텍스트를 설정 시퀀스에서 각 항목에 대한 내용을 삽입한다 :</target>
        </trans-unit>
        <trans-unit id="57e356d3f63e006f6def6a6a02e45aec1d58cec7" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;#if&lt;/code&gt; template tag renders either its main content or its &amp;ldquo;else&amp;rdquo; content, depending on the value of its data argument. Any falsy JavaScript value (including &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;&quot;&quot;&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt;) is considered false, as well as the empty array, while any other value is considered true.</source>
          <target state="translated">&lt;code&gt;#if&lt;/code&gt; 템플릿 태그는 데이터 인수의 값에 따라, 하나의 주요 내용 또는 &quot;다른&quot;내용을 렌더링합니다. 잘못된 JavaScript 값 ( &lt;code&gt;null&lt;/code&gt; , &lt;code&gt;undefined&lt;/code&gt; 포함) , &lt;code&gt;0&lt;/code&gt; , &lt;code&gt;&quot;&quot;&lt;/code&gt; 및 &lt;code&gt;false&lt;/code&gt; 포함 )은 빈 배열뿐만 아니라 false로 간주되며 다른 값은 true로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="60807195df5a09eb17a1a3822f5378974da4c514" translate="yes" xml:space="preserve">
          <source>An API for registering new login handlers, which is used by all of the other accounts packages to integrate with the accounts system. There isn&amp;rsquo;t any official documentation for this API, but you can &lt;a href=&quot;https://web.archive.org/web/20160913210817/https://meteorhacks.com/extending-meteor-accounts&quot;&gt;read more about it on the MeteorHacks blog&lt;/a&gt;.</source>
          <target state="translated">다른 모든 계정 패키지에서 계정 시스템과 통합하는 데 사용되는 새 로그인 핸들러를 등록하기위한 API입니다. 이 API에 대한 공식 문서는 없지만 &lt;a href=&quot;https://web.archive.org/web/20160913210817/https://meteorhacks.com/extending-meteor-accounts&quot;&gt;MeteorHacks 블로그에서 이에 대한 자세한 내용을 읽을&lt;/a&gt; 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9c82caa99effa4eda8502e42bc84f0ecef61c6be" translate="yes" xml:space="preserve">
          <source>An Object where the keys are different devices and screen sizes, and values are image paths relative to the project root directory.</source>
          <target state="translated">키가 다른 장치 및 화면 크기이고 값이 프로젝트 루트 디렉토리에 상대적인 이미지 경로 인 Object입니다.</target>
        </trans-unit>
        <trans-unit id="4624ccc518eb1cbf20aee2a5fb3bbc122b1849a6" translate="yes" xml:space="preserve">
          <source>An alternative method is maintaining a separate repository for the package and changing the &lt;code&gt;package.json&lt;/code&gt; version number &lt;a href=&quot;http://debuggable.com/posts/how-to-fork-patch-npm-modules:4e2eb9f3-e584-44be-b1a9-3db7cbdd56cb&quot;&gt;to a git URL or tarball&lt;/a&gt;, but every time you edit the separate repo, you&amp;rsquo;ll need to commit, push, and &lt;code&gt;npm update left-pad&lt;/code&gt;.</source>
          <target state="translated">다른 방법은 패키지에 대한 별도의 저장소를 유지하고, 변화 &lt;code&gt;package.json&lt;/code&gt; 의 버전 번호를&lt;a href=&quot;http://debuggable.com/posts/how-to-fork-patch-npm-modules:4e2eb9f3-e584-44be-b1a9-3db7cbdd56cb&quot;&gt; 를 git URL 또는 tarball로&lt;/a&gt; . 그러나 별도의 저장소를 편집 할 때마다 &lt;code&gt;npm update left-pad&lt;/code&gt; 를 커밋, 푸시 및 npm 업데이트 해야합니다. .</target>
        </trans-unit>
        <trans-unit id="b9ee32b0aa3a5fc5cc578644a58357383c50ea5d" translate="yes" xml:space="preserve">
          <source>An application, especially a web application, is rarely finished, and it&amp;rsquo;s useful to consider potential future changes when designing your data schema. As in most things, it&amp;rsquo;s rarely a good idea to add fields before you actually need them (often what you anticipate doesn&amp;rsquo;t actually end up happening, after all).</source>
          <target state="translated">응용 프로그램, 특히 웹 응용 프로그램은 거의 완성되지 않으며 데이터 스키마를 설계 할 때 잠재적으로 미래의 변경 사항을 고려하는 것이 유용합니다. 대부분의 경우와 같이 실제로 필드를 필요로하기 전에 필드를 추가하는 것은 좋은 생각이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="c21639d57ab81ac3ed87193a8bc708b7c6454c06" translate="yes" xml:space="preserve">
          <source>An argument to a helper can be any path or identifier, or a string, boolean, or number literal, or null.</source>
          <target state="translated">도우미에 대한 인수는 경로 또는 식별자이거나 문자열, 부울 또는 숫자 리터럴 또는 null 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ef8f757269fdb7b1876d70c1c37c25280c0a432c" translate="yes" xml:space="preserve">
          <source>An array of the arguments passed to the login method.</source>
          <target state="translated">login 메소드에 전달 된 인수 배열입니다.</target>
        </trans-unit>
        <trans-unit id="1564c3525dd8092b11e527a382b767e7640263a7" translate="yes" xml:space="preserve">
          <source>An associative key-value data structure where the keys can be any JavaScript value (not just strings). Lookup and insertion take constant time.</source>
          <target state="translated">키가 문자열이 아닌 JavaScript 값이 될 수있는 연관 키-값 데이터 구조. 조회 및 삽입에는 일정한 시간이 걸립니다.</target>
        </trans-unit>
        <trans-unit id="ee9ac968ca76052ac9c49e478951fa0321be9d8c" translate="yes" xml:space="preserve">
          <source>An attribute value that consists entirely of template tags that return &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, or &lt;code&gt;false&lt;/code&gt; is considered absent; otherwise, the attribute is considered present, even if its value is empty.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; , &lt;code&gt;undefined&lt;/code&gt; 또는 &lt;code&gt;false&lt;/code&gt; 를 반환하는 템플릿 태그로만 구성된 속성 값 은없는 것으로 간주됩니다. 그렇지 않으면 값이 비어 있어도 속성이 존재하는 것으로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="c0233f3693abbb07f263af82b43adc249b8da0d4" translate="yes" xml:space="preserve">
          <source>An automatic flush occurs whenever the system is idle which performs exactly the same work as &lt;code&gt;Tracker.flush&lt;/code&gt;. The flushing process consists of rerunning any invalidated computations. If additional invalidations happen while flushing, they are processed as part of the same flush until there is no more work to be done. Callbacks registered with &lt;a href=&quot;#tracker_afterflush&quot;&gt;&lt;code&gt;Tracker.afterFlush&lt;/code&gt;&lt;/a&gt; are called after processing outstanding invalidations.</source>
          <target state="translated">시스템이 유휴 상태 일 때마다 &lt;code&gt;Tracker.flush&lt;/code&gt; 와 정확히 동일한 작업을 수행하는 자동 플러시가 발생합니다 . 플러싱 프로세스는 무효화 된 계산을 다시 실행하는 것으로 구성됩니다. 플러시 중 추가 무효화가 발생하면 더 이상 수행 할 작업이 없을 때까지 동일한 플러시의 일부로 처리됩니다. &lt;a href=&quot;#tracker_afterflush&quot;&gt; &lt;code&gt;Tracker.afterFlush&lt;/code&gt; 에&lt;/a&gt; 등록 된 콜백 은 처리되지 않은 무효화를 처리 한 후에 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="efe098602b753737813a8d517be30c228478e692" translate="yes" xml:space="preserve">
          <source>An email address that the external service will use to pre-fill the login prompt. Currently only supported with Meteor developer accounts and Google accounts. If used with Google, the Google User ID can also be passed.</source>
          <target state="translated">외부 서비스가 로그인 프롬프트를 미리 채우는 데 사용할 이메일 주소입니다. 현재 Meteor 개발자 계정 및 Google 계정에서만 지원됩니다. Google과 함께 사용하면 Google 사용자 ID도 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="53c5641e85e960206e7a66dfc0d3f25931ac36dd" translate="yes" xml:space="preserve">
          <source>An event map is an object where the properties specify a set of events to handle, and the values are the handlers for those events. The property can be in one of several forms:</source>
          <target state="translated">이벤트 맵은 특성이 처리 할 이벤트 세트를 지정하는 오브젝트이며 값은 해당 이벤트의 핸들러입니다. 이 속성은 여러 가지 형식 중 하나 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f9ab1a2784611cd47401201ce3ebd4475ad0a247" translate="yes" xml:space="preserve">
          <source>An example of refactoring from JavaScript to ES2015</source>
          <target state="translated">JavaScript에서 ES2015로 리팩토링하는 예</target>
        </trans-unit>
        <trans-unit id="f798739801d9d9f4af7698ee9285363cbb093b4a" translate="yes" xml:space="preserve">
          <source>An implementation of the global &lt;a href=&quot;http://www.2ality.com/2014/12/es6-symbols.html&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt;s namespace that enables a number of other ES2015 features, such as &lt;code&gt;for&lt;/code&gt;-&lt;code&gt;of&lt;/code&gt; loops and &lt;code&gt;Symbol.iterator&lt;/code&gt; methods: &lt;code&gt;[1,2,3][Symbol.iterator]()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;for&lt;/code&gt; - &lt;code&gt;of&lt;/code&gt; - loops 및 &lt;code&gt;Symbol.iterator&lt;/code&gt; 메소드 와 같은 다른 여러 ES2015 기능 을 지원하는 전역 &lt;a href=&quot;http://www.2ality.com/2014/12/es6-symbols.html&quot;&gt; &lt;code&gt;Symbol&lt;/code&gt; &lt;/a&gt; 네임 스페이스 구현 : &lt;code&gt;[1,2,3][Symbol.iterator]()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b4b4407844f4a4dc759581d6064eca76528a967d" translate="yes" xml:space="preserve">
          <source>An important benefit of this is that while downloading may be slow over mobile connections, this is done in the background, and we won&amp;rsquo;t attempt to reload the app until all assets have been downloaded to the device.</source>
          <target state="translated">이것의 중요한 이점은 모바일 연결에서 다운로드 속도가 느려질 수 있지만 백그라운드에서 이루어지며 모든 자산이 장치로 다운로드 될 때까지 앱을 다시로드하려고 시도하지 않는다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="bb146ac321e4c6bcea177d984200acd59b006687" translate="yes" xml:space="preserve">
          <source>An important feature shared by all of the available CSS pre-processors is the ability to import files. This lets you split your CSS into smaller pieces, and provides a lot of the same benefits that you get from JavaScript modules:</source>
          <target state="translated">사용 가능한 모든 CSS 프리 프로세서가 공유하는 중요한 기능은 파일을 가져 오는 기능입니다. 이를 통해 CSS를 더 작은 조각으로 나눌 수 있으며 JavaScript 모듈에서 얻을 수있는 것과 동일한 많은 이점을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="2d7a8447f55c6513fafbefb339d3cfafcaeff8dd" translate="yes" xml:space="preserve">
          <source>An important function of the guide is to &lt;strong&gt;shape future development&lt;/strong&gt; in the Meteor platform. By documenting best practices, the guide shines a spotlight on areas of the platform that could be better, easier, or more performant, and thus will be used to focus a lot of future platform choices.</source>
          <target state="translated">이 안내서의 중요한 기능은 Meteor 플랫폼에서 &lt;strong&gt;향후 개발&lt;/strong&gt; 을 &lt;strong&gt;구체화하는 것&lt;/strong&gt; 입니다. 모범 사례를 문서화함으로써이 가이드는 더 좋고, 더 쉬우 며, 더 성능이 좋을 수있는 플랫폼 영역에 대한 스포트라이트를 비추어 미래의 많은 플랫폼 선택에 초점을 맞출 것입니다.</target>
        </trans-unit>
        <trans-unit id="a0b7c184ba35ece6bffa56bde2068598168be452" translate="yes" xml:space="preserve">
          <source>An important property of ReactiveVars &amp;mdash; which is sometimes a reason for using one &amp;mdash; is that setting the value to the same value as before has no effect; it does not trigger any invalidations. So if one autorun sets a ReactiveVar, and another autorun gets the ReactiveVar, a re-run of the first autorun won&amp;rsquo;t necessarily trigger the second. By default, only primitive values are compared this way, while calling &lt;code&gt;set&lt;/code&gt; on an argument that is an &lt;em&gt;object&lt;/em&gt; (not a primitive) always counts as a change. You can configure this behavior using the &lt;code&gt;equalsFunc&lt;/code&gt; argument.</source>
          <target state="translated">ReactiveVars의 중요한 속성은 때때로 하나를 사용하는 이유이므로 값을 이전과 동일한 값으로 설정해도 아무런 효과가 없습니다. 무효화를 트리거하지 않습니다. 따라서 한 자동 실행이 ReactiveVar를 설정하고 다른 자동 실행이 ReactiveVar를 가져 오면 첫 번째 자동 실행을 다시 실행해도 반드시 두 번째가 실행되는 것은 아닙니다. 기본적으로 프리미티브 값만이 방식으로 비교되는 반면 , 프리미티브 가 아닌 &lt;em&gt;객체&lt;/em&gt; 인 인수에 대한 &lt;code&gt;set&lt;/code&gt; 호출 은 항상 변경으로 계산됩니다. &lt;code&gt;equalsFunc&lt;/code&gt; 인수를 사용하여이 동작을 구성 할 수 있습니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f416fec1003a0bcbc7389e3596de024838c0a629" translate="yes" xml:space="preserve">
          <source>An inclusion tag inserts an instantiation of the given template at the current location. If there is an argument, it becomes the data context, much as if the following code were used:</source>
          <target state="translated">포함 태그는 현재 위치에서 주어진 템플릿의 인스턴스를 삽입합니다. 인수가 있으면 다음 코드가 사용 된 것처럼 데이터 컨텍스트가됩니다.</target>
        </trans-unit>
        <trans-unit id="2de52e1004e5b1b4b43a03b939b9ec67cf9f960e" translate="yes" xml:space="preserve">
          <source>An inclusion tag takes the form &lt;code&gt;{{&amp;gt; templateName}}&lt;/code&gt; or &lt;code&gt;{{&amp;gt; templateName
dataObj}}&lt;/code&gt;. Other argument forms are syntactic sugar for constructing a data object (see Inclusion and Block Arguments).</source>
          <target state="translated">포함 태그는 &lt;code&gt;{{&amp;gt; templateName}}&lt;/code&gt; 또는 &lt;code&gt;{{&amp;gt; templateName dataObj}}&lt;/code&gt; 입니다. 다른 인수 형식은 데이터 객체를 구성하기위한 구문 설탕입니다 (포함 및 블록 인수 참조).</target>
        </trans-unit>
        <trans-unit id="2b5c186e705e28f3f9215652fa5ec2217809e19e" translate="yes" xml:space="preserve">
          <source>An integration test is a test that crosses module boundaries. In the simplest case, this simply means something very similar to a unit test, where you perform your isolation around multiple modules, creating a non-singular &amp;ldquo;system under test&amp;rdquo;.</source>
          <target state="translated">통합 테스트는 모듈 경계를 넘는 테스트입니다. 가장 간단한 경우, 이는 단순히 단일 모듈 테스트와 매우 유사한 것을 의미하며, 여기서 여러 모듈을 대상으로 격리를 수행하여 비단 일 &quot;테스트 대상 시스템&quot;을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="cc3471c2da65468e3c2464e0ada84cc740a10735" translate="yes" xml:space="preserve">
          <source>An interesting UX challenge in a realtime system like Meteor involves how to bring new information (like changing data in a list) to the user&amp;rsquo;s attention. As &lt;a href=&quot;http://blog.percolatestudio.com/design/design-for-realtime/&quot;&gt;Dominic&lt;/a&gt; points out, it&amp;rsquo;s not always a good idea to simply update the contents of a list as quickly as possible, as it&amp;rsquo;s easy to miss changes or get confused about what&amp;rsquo;s happened.</source>
          <target state="translated">Meteor와 같은 실시간 시스템에서 흥미로운 UX 문제는 목록에서 데이터 변경과 같은 새로운 정보를 사용자의주의를 끌 수있는 방법과 관련이 있습니다. 같이&lt;a href=&quot;http://blog.percolatestudio.com/design/design-for-realtime/&quot;&gt; 도미닉는&lt;/a&gt; 지적이 미스 변화에 쉽게 또는 일어난 일에 대해 혼란을 얻을, 그것은 항상 단순히 가능한 한 빨리으로 목록의 내용을 업데이트하는 좋은 생각이 아니다.</target>
        </trans-unit>
        <trans-unit id="3eaa5e7bb94bc068800ae4a147a75b3351df6c7d" translate="yes" xml:space="preserve">
          <source>An inverted &lt;a href=&quot;#Blaze-If&quot;&gt;&lt;code&gt;Blaze.If&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">거꾸로 된 &lt;a href=&quot;#Blaze-If&quot;&gt; &lt;code&gt;Blaze.If&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="939b63e7cbbea497e2b1e6a9008066115b2bd7e0" translate="yes" xml:space="preserve">
          <source>An object to use as the data context, or a function returning such an object. If a function is provided, it will be reactively re-run.</source>
          <target state="translated">데이터 컨텍스트로 사용할 객체 또는 이러한 객체를 반환하는 함수 기능이 제공되면 사후에 재실행됩니다.</target>
        </trans-unit>
        <trans-unit id="434c556f4c70bf2be0ddd49e6466955c1a738a9d" translate="yes" xml:space="preserve">
          <source>An object where the keys are NPM package names, and the values are the version numbers of required NPM packages, just like in &lt;a href=&quot;#Npm-depends&quot;&gt;Npm.depends&lt;/a&gt;.</source>
          <target state="translated">키가 NPM 패키지 이름이고 값이 &lt;a href=&quot;#Npm-depends&quot;&gt;Npm&lt;/a&gt; 에서와 같이 필요한 NPM 패키지의 버전 번호 인 객체입니다. 입니다.</target>
        </trans-unit>
        <trans-unit id="2ddc8c2f8c8e4417f5a3606059179534670eafff" translate="yes" xml:space="preserve">
          <source>An object where the keys are package names and the values are one of:</source>
          <target state="translated">키가 패키지 이름이고 값이 다음 중 하나 인 객체 :</target>
        </trans-unit>
        <trans-unit id="79785ffa5c429166c70188beff22fd316c295172" translate="yes" xml:space="preserve">
          <source>An object where the keys are plugin names and the values are version numbers or GitHub tarball URLs in string form. Example:</source>
          <target state="translated">키가 플러그인 이름이고 값이 문자열 형식의 버전 번호 또는 GitHub tarball URL 인 객체입니다. 예:</target>
        </trans-unit>
        <trans-unit id="7b2c7ac909dcb09c335c9bced0b8eccb30aec3b4" translate="yes" xml:space="preserve">
          <source>An object which will be the value of &lt;code&gt;this&lt;/code&gt; inside &lt;code&gt;callback&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; 내부 &lt;code&gt;callback&lt;/code&gt; 값이 될 객체입니다 .</target>
        </trans-unit>
        <trans-unit id="a0d7bef6545170610b98222ab80587927b525861" translate="yes" xml:space="preserve">
          <source>An object with two fields: '_variable' and '_sequence'. Each iterates over '_sequence', it may be a Cursor, an array, null, or undefined. Inside the Each body you will be able to get the current item from the sequence using the name specified in the '_variable' field.</source>
          <target state="translated">'_variable'및 '_sequence'라는 두 개의 필드가있는 개체입니다. 각각은 '_sequence'를 반복하며 커서, 배열, 널 또는 정의되지 않을 수 있습니다. 각 본문 내에서 '_variable'필드에 지정된 이름을 사용하여 시퀀스에서 현재 항목을 가져올 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8a7b61ebb065b9b10d0b68f0f03a2a450ddd054c" translate="yes" xml:space="preserve">
          <source>An option in this case is to call out that there are changes to the data the user is looking at without actually making UI updates. In a system like Meteor which is reactive by default, it isn&amp;rsquo;t necessarily easy to stop such changes from happening!</source>
          <target state="translated">이 경우 옵션은 실제로 UI 업데이트를 수행하지 않고 사용자가보고있는 데이터에 변경 사항이 있음을 나타냅니다. 기본적으로 반응하는 Meteor와 같은 시스템에서 이러한 변경이 발생하는 것을 막는 것은 쉽지 않습니다!</target>
        </trans-unit>
        <trans-unit id="63a8d8663ae7dd69a7d7fcccf37257cc02056a32" translate="yes" xml:space="preserve">
          <source>An optional computation declared to depend on &lt;code&gt;dependency&lt;/code&gt; instead of the current computation.</source>
          <target state="translated">&lt;code&gt;dependency&lt;/code&gt; 에 의존 하도록 선언 된 선택적 계산현재 계산 대신 계산입니다.</target>
        </trans-unit>
        <trans-unit id="44ae3ec55c149b5c7809f399272d4c11c9cf49c5" translate="yes" xml:space="preserve">
          <source>An optional transformation function. Documents will be passed through this function before being returned from &lt;code&gt;fetch&lt;/code&gt; or &lt;code&gt;findOne&lt;/code&gt;, and before being passed to callbacks of &lt;code&gt;observe&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;forEach&lt;/code&gt;, &lt;code&gt;allow&lt;/code&gt;, and &lt;code&gt;deny&lt;/code&gt;. Transforms are &lt;em&gt;not&lt;/em&gt; applied for the callbacks of &lt;code&gt;observeChanges&lt;/code&gt; or to cursors returned from publish functions.</source>
          <target state="translated">선택적 변환 기능. 문서는 &lt;code&gt;fetch&lt;/code&gt; 또는 &lt;code&gt;findOne&lt;/code&gt; 에서 리턴 되기 전에 및 &lt;code&gt;observe&lt;/code&gt; , &lt;code&gt;map&lt;/code&gt; , &lt;code&gt;forEach&lt;/code&gt; , &lt;code&gt;allow&lt;/code&gt; 및 &lt;code&gt;deny&lt;/code&gt; 의 콜백으로 전달되기 전에이 함수를 통해 전달됩니다 . &lt;code&gt;observeChanges&lt;/code&gt; 의 콜백 이나 게시 함수에서 반환 된 커서 에는 변환이 적용 &lt;em&gt;되지 않습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="b824ce9adc77dd0be4ee1b2f760183225e5caea5" translate="yes" xml:space="preserve">
          <source>An unrendered &lt;a href=&quot;blaze#Blaze-View&quot;&gt;View&lt;/a&gt; object, like the return value of &lt;code&gt;Blaze.With&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Blaze.With&lt;/code&gt; 의 반환 값과 같은 렌더링되지 않은 &lt;a href=&quot;blaze#Blaze-View&quot;&gt;View&lt;/a&gt; 객체</target>
        </trans-unit>
        <trans-unit id="25bc96295797b5371aa0625196d597ef03a952de" translate="yes" xml:space="preserve">
          <source>Analytics</source>
          <target state="translated">Analytics</target>
        </trans-unit>
        <trans-unit id="3374ddce183976efff01a7c5115eba95b4a40fb0" translate="yes" xml:space="preserve">
          <source>And finally you use Ubuntu Make to install Android Studio and all dependencies:</source>
          <target state="translated">마지막으로 Ubuntu Make를 사용하여 Android Studio 및 모든 종속성을 설치하십시오.</target>
        </trans-unit>
        <trans-unit id="d758744d30f93206235fb47dd876aa25751bc550" translate="yes" xml:space="preserve">
          <source>And then for example with Cloudfront, you would:</source>
          <target state="translated">그런 다음 Cloudfront를 사용하면 다음을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="87b77cf3fa6cc00250d9eafc287576a9b5bf0501" translate="yes" xml:space="preserve">
          <source>And then we use that state to determine what to render in the reusable component (&lt;code&gt;listShow&lt;/code&gt;):</source>
          <target state="translated">그런 다음 해당 상태를 사용하여 재사용 가능한 컴포넌트 ( &lt;code&gt;listShow&lt;/code&gt; ) 에 렌더링 할 대상을 결정합니다 .</target>
        </trans-unit>
        <trans-unit id="1928f95c598b9e69462fcb512625cf8e28923044" translate="yes" xml:space="preserve">
          <source>Android</source>
          <target state="translated">Android</target>
        </trans-unit>
        <trans-unit id="721ce6e6721623c2b3679f1a497bdb5e9fc18886" translate="yes" xml:space="preserve">
          <source>Android 5.0 also comes with a web view based on Chromium known as the &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.google.android.webview&amp;amp;hl=en&quot;&gt;Android System Web View&lt;/a&gt;, but a big improvement is that it can be automatically updated through the Play Store. This means updates to the web view happen more regularly and are independent of OS updates.</source>
          <target state="translated">Android 5.0에는 &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.google.android.webview&amp;amp;hl=en&quot;&gt;Android 시스템 웹보기&lt;/a&gt; 라고하는 Chromium 기반의 웹보기 가 제공되지만 Play 스토어를 통해 자동으로 업데이트 할 수 있다는 점이 크게 개선되었습니다. 이는 웹보기에 대한 업데이트가 정기적으로 발생하며 OS 업데이트와 무관하다는 것을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="abad22263875eb6ee0d3e2addf237a243dafe2e0" translate="yes" xml:space="preserve">
          <source>Android Play Store</source>
          <target state="translated">안드로이드 플레이 스토어</target>
        </trans-unit>
        <trans-unit id="8e09000e5c2a6bef346596ec2e0dec0fbf7495a6" translate="yes" xml:space="preserve">
          <source>Angular</source>
          <target state="translated">Angular</target>
        </trans-unit>
        <trans-unit id="a43723b38f21e024754c187fecadae213b9629c6" translate="yes" xml:space="preserve">
          <source>Angular and React have had more performance optimization work put into them than Blaze and in general will perform better. However, there are some cases when Blaze does better (for instance an &lt;code&gt;{{#each}}&lt;/code&gt; over a changing cursor).</source>
          <target state="translated">Angular와 React는 Blaze보다 더 많은 성능 최적화 작업을 수행했으며 일반적으로 더 나은 성능을 제공합니다. 그러나 Blaze가 더 나은 경우가 있습니다 (예 : 커서 변경으로 &lt;code&gt;{{#each}}&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="0e4a5ab22e741abebab09ca99335854ad9c0bf12" translate="yes" xml:space="preserve">
          <source>Angular has 12k stars on Github and 4k npm libraries.</source>
          <target state="translated">Angular는 Github 및 4k npm 라이브러리에 12k 개의 별이 있습니다.</target>
        </trans-unit>
        <trans-unit id="d00a167e9bc949dd872e53179e60625a5c4ddedc" translate="yes" xml:space="preserve">
          <source>Angular is a frontend rendering library that is officially supported by Meteor. The best place to read about how to use both Angular 1 and Angular 2 in Meteor is the &lt;a href=&quot;http://www.angular-meteor.com&quot;&gt;Angular-Meteor&lt;/a&gt; site.</source>
          <target state="translated">Angular는 Meteor가 공식적으로 지원하는 프론트 엔드 렌더링 라이브러리입니다. Meteor에서 Angular 1과 Angular 2를 모두 사용하는 방법에 대해 읽을 수있는 가장 좋은 곳은 &lt;a href=&quot;http://www.angular-meteor.com&quot;&gt;Angular-Meteor입니다.&lt;/a&gt; 사이트입니다.</target>
        </trans-unit>
        <trans-unit id="d386e5af782ff9d0f20d504af94511ef38ed1b6e" translate="yes" xml:space="preserve">
          <source>Angular templates</source>
          <target state="translated">각도 템플릿</target>
        </trans-unit>
        <trans-unit id="f4738ab5bc5ed3304cbb6cdc02b822657b885d14" translate="yes" xml:space="preserve">
          <source>Angular uses HTML with &lt;a href=&quot;https://angular.io/docs/ts/latest/guide/cheatsheet.html&quot;&gt;special attribute syntax&lt;/a&gt; for logic and events. Template helpers are written in the accompanying JavaScript file along with events, which are called by name from inside HTML attributes.</source>
          <target state="translated">Angular는 HTML을 &lt;a href=&quot;https://angular.io/docs/ts/latest/guide/cheatsheet.html&quot;&gt;&lt;/a&gt; 논리 및 이벤트에 특수 속성 구문이있는 합니다. 템플릿 도우미는 HTML 속성 내부에서 이름으로 호출되는 이벤트와 함께 제공되는 JavaScript 파일로 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="87e2b69592048ff9af58feabfc5fa2431afde4d0" translate="yes" xml:space="preserve">
          <source>Animating changes in visiblity</source>
          <target state="translated">가시성 변화 애니메이션</target>
        </trans-unit>
        <trans-unit id="62b2ca1ca82dfed15272dd7126d0b0dfb6a088d8" translate="yes" xml:space="preserve">
          <source>Animating changes to attributes</source>
          <target state="translated">속성 변경 애니메이션</target>
        </trans-unit>
        <trans-unit id="f70394e94c6014a61ca469dcf37e120f2bf7d949" translate="yes" xml:space="preserve">
          <source>Animating page changes</source>
          <target state="translated">페이지 변경 애니메이션</target>
        </trans-unit>
        <trans-unit id="62afd21e88769f01ba1c9330803baad57564d6e9" translate="yes" xml:space="preserve">
          <source>Animation</source>
          <target state="translated">Animation</target>
        </trans-unit>
        <trans-unit id="960960bd10c2c00046e9f7b8439f5832a60919ed" translate="yes" xml:space="preserve">
          <source>Animation is the process of indicating changes in the UI smoothly &lt;em&gt;over time&lt;/em&gt; rather than &lt;em&gt;instantly&lt;/em&gt;. Although animation is often seen as &amp;ldquo;window dressing&amp;rdquo; or purely aesthetic, in fact it serves a very important purpose, highlighted by the example of the changing list above. In a connected-client world where changes in the UI aren&amp;rsquo;t always initiated by user action (i.e. sometimes they happen as a result of the server pushing changes made by other users), instant changes can result in a user experience where it&amp;rsquo;s difficult to understand what is happening.</source>
          <target state="translated">애니메이션은 &lt;em&gt;즉각적인&lt;/em&gt; 것이 아니라 &lt;em&gt;시간&lt;/em&gt; 이 &lt;em&gt;지남&lt;/em&gt; 에 따라 UI의 변화를 부드럽게 나타내는 프로세스입니다&lt;em&gt;&lt;/em&gt; . 애니메이션은 종종 &quot;윈도우 드레싱&quot;또는 순수한 미학으로 여겨지지만 실제로는 위의 변경 목록의 예에 의해 강조된 매우 중요한 목적을 제공합니다. UI의 변경이 항상 사용자 작업으로 시작되지 않는 연결된 클라이언트 환경에서 (예 : 서버가 다른 사용자가 변경 한 내용을 푸시 한 결과로 발생하는 경우가 있음) 즉각적인 변경으로 인해 사용자 환경이 어려울 수 있습니다. 무슨 일이 일어나고 있는지 이해하십시오.</target>
        </trans-unit>
        <trans-unit id="0a742cf454fa6ee03e580e0e78d51baf9a72035d" translate="yes" xml:space="preserve">
          <source>Another common type of animation is when an attribute of an element changes. For instance, a button may change color when you click on it. These type of animations are most easily achieved with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions&quot;&gt;CSS transitions&lt;/a&gt;. For example, we use a CSS transition for the hover state of links in the Todos example app:</source>
          <target state="translated">또 다른 일반적인 애니메이션 유형은 요소의 속성이 변경되는 경우입니다. 예를 들어, 버튼을 클릭하면 버튼의 색상이 변경 될 수 있습니다. 이러한 유형의 애니메이션은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions&quot;&gt;CSS 전환을&lt;/a&gt; 통해 가장 쉽게 달성됩니다 . 예를 들어, Todos 예제 앱에서 링크의 호버 상태에 CSS 전환을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="9a914b00f992589999aaf0beed2576d01e7ac2ba" translate="yes" xml:space="preserve">
          <source>Another complicated topic in Blaze is name lookups. In what order does Blaze look when you write &lt;code&gt;{{something}}&lt;/code&gt;? It runs in the following order:</source>
          <target state="translated">Blaze의 또 다른 복잡한 주제는 이름 조회입니다. &lt;code&gt;{{something}}&lt;/code&gt; 을 쓸 때 Blaze는 어떤 순서로 나타 납니까? 다음 순서로 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="1d2c061dfc319fe50f49b2b9783e5e810351e214" translate="yes" xml:space="preserve">
          <source>Another denormalization that this architecture sometimes requires can be from the parent document onto sub-documents. For instance, in Todos, as we enforce privacy of the todo lists via the &lt;code&gt;list.userId&lt;/code&gt; attribute, but we publish the todos separately, it might make sense to denormalize &lt;code&gt;todo.userId&lt;/code&gt; also. To do this, we&amp;rsquo;d need to be careful to take the &lt;code&gt;userId&lt;/code&gt; from the list when creating the todo, and updating all relevant todos whenever a list&amp;rsquo;s &lt;code&gt;userId&lt;/code&gt; changed.</source>
          <target state="translated">이 아키텍쳐가 때때로 요구하는 또 다른 비정규 화는 부모 문서에서 하위 문서로 이루어질 수 있습니다. 예를 들어, Todos에서는 &lt;code&gt;list.userId&lt;/code&gt; 속성을 통해 할 일 목록의 프라이버시를 시행 하지만 할 일을 개별적으로 게시하므로 &lt;code&gt;todo.userId&lt;/code&gt; 도 비정규 화하는 것이 좋습니다 . 이렇게하려면 할 일을 만들 때 목록 에서 &lt;code&gt;userId&lt;/code&gt; 를 가져 와서 목록의 &lt;code&gt;userId&lt;/code&gt; 가 변경 될 때마다 관련된 모든 할 일을 업데이트해야 합니다.</target>
        </trans-unit>
        <trans-unit id="d80d645e11c3bb0ca14f386e1a48fff00ea3614a" translate="yes" xml:space="preserve">
          <source>Another example where the subscription depends on the data context:</source>
          <target state="translated">구독이 데이터 컨텍스트에 의존하는 또 다른 예 :</target>
        </trans-unit>
        <trans-unit id="b7190df4442987645cbae048526d2927021378c0" translate="yes" xml:space="preserve">
          <source>Another example where you want to initialize a plugin when the subscription is done:</source>
          <target state="translated">구독이 완료되면 플러그인을 초기화하려는 또 다른 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="73cb9ba627e270e4a63c114afaf5cb58e3b4e641" translate="yes" xml:space="preserve">
          <source>Another good option is &lt;a href=&quot;https://onsen.io/v2/&quot;&gt;Onsen UI&lt;/a&gt;, which includes a &lt;a href=&quot;https://onsen.io/v2/docs/guide/react/&quot;&gt;React version&lt;/a&gt;.</source>
          <target state="translated">또 다른 좋은 옵션은 &lt;a href=&quot;https://onsen.io/v2/docs/guide/react/&quot;&gt;Resen 버전&lt;/a&gt; 을 포함하는 &lt;a href=&quot;https://onsen.io/v2/&quot;&gt;Onsen UI&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="df5062c1204643ad4500de34b513728a30ae7a7e" translate="yes" xml:space="preserve">
          <source>Another important consideration is how you&amp;rsquo;ll share the data between your different applications.</source>
          <target state="translated">다른 중요한 고려 사항은 다른 응용 프로그램간에 데이터를 공유하는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="c8e3539abbac579f768de65b1c5569e567fbbe6a" translate="yes" xml:space="preserve">
          <source>Another important feature of the Meteor build tool is that it automatically concatenates and minifies all of your files in production mode. This is enabled by the &lt;a href=&quot;https://atmospherejs.com/meteor/standard-minifiers-js&quot;&gt;&lt;code&gt;standard-minifier-js&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://atmospherejs.com/meteor/standard-minifiers-css&quot;&gt;&lt;code&gt;standard-minifier-css&lt;/code&gt;&lt;/a&gt; packages, which are in all Meteor apps by default. If you need different minification behavior, you can replace these packages. Below, we&amp;rsquo;ll talk about how to &lt;a href=&quot;#postcss&quot;&gt;switch out a minifier to add PostCSS to your build process&lt;/a&gt;.</source>
          <target state="translated">Meteor 빌드 도구의 또 다른 중요한 기능은 프로덕션 모드에서 모든 파일을 자동으로 연결하고 최소화한다는 것입니다. 이것은 기본적으로 모든 Meteor 앱에 있는 &lt;a href=&quot;https://atmospherejs.com/meteor/standard-minifiers-js&quot;&gt; &lt;code&gt;standard-minifier-js&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;https://atmospherejs.com/meteor/standard-minifiers-css&quot;&gt; &lt;code&gt;standard-minifier-css&lt;/code&gt; &lt;/a&gt; 패키지에 의해 활성화됩니다 . 다른 축소 동작이 필요한 경우 이러한 패키지를 교체 할 수 있습니다. 아래에서는 &lt;a href=&quot;#postcss&quot;&gt;빌드 프로세스에 PostCSS를 추가하기 위해 축소기를 끄는&lt;/a&gt; 방법에 대해 설명합니다 .</target>
        </trans-unit>
        <trans-unit id="4727184c2d70bd74761d6b6a25c523cec880c3ac" translate="yes" xml:space="preserve">
          <source>Another object to compare this to.</source>
          <target state="translated">이것을 비교할 다른 객체.</target>
        </trans-unit>
        <trans-unit id="fddbd6753e5fb24ece516dea5de5bbbbb8ae51e3" translate="yes" xml:space="preserve">
          <source>Another option is using the &lt;code&gt;METEOR_CORDOVA_COMPAT_VERSION_EXCLUDE&lt;/code&gt; environment variable. If you were to do this:</source>
          <target state="translated">다른 옵션은 &lt;code&gt;METEOR_CORDOVA_COMPAT_VERSION_EXCLUDE&lt;/code&gt; 환경 변수를 사용하는 것 입니다. 이 작업을 수행 한 경우 :</target>
        </trans-unit>
        <trans-unit id="05634f216c70da01031ec61bce6c33e9cbc80751" translate="yes" xml:space="preserve">
          <source>Another thing to be aware of, especially with such multi-stage deploys, is that being prepared to rollback is important! For this reason, the migrations package allows you to specify a &lt;code&gt;down()&lt;/code&gt; function and call &lt;code&gt;Migrations.migrateTo(x)&lt;/code&gt; to migrate &lt;em&gt;back&lt;/em&gt; to version &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">특히 다단계 배포에서 알아야 할 또 다른 사항은 롤백 준비가 중요하다는 것입니다. 이러한 이유로 마이그레이션 패키지를 통해 &lt;code&gt;down()&lt;/code&gt; 함수 를 지정하고 &lt;code&gt;Migrations.migrateTo(x)&lt;/code&gt; 를 호출 하여 버전 &lt;code&gt;x&lt;/code&gt; 로 &lt;em&gt;다시&lt;/em&gt; 마이그레이션 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1759ce61ab461b729e0a2764d639e83ebd6b24c8" translate="yes" xml:space="preserve">
          <source>Another very common use case is splitting a worker process away from your main application so that expensive jobs do not impact the user experience of your visitors by locking up a single web server.</source>
          <target state="translated">매우 일반적인 또 다른 유스 케이스는 작업자 프로세스를 기본 애플리케이션에서 분리하여 값 비싼 작업이 단일 웹 서버를 잠 가서 방문자의 사용자 경험에 영향을 미치지 않도록하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="bd6aa352a2f2253598dfd319587ee66909080a47" translate="yes" xml:space="preserve">
          <source>Another way to share commonly used view code is a global Spacebars helper. You can define these with the &lt;code&gt;Template.registerHelper()&lt;/code&gt; function. Typically you register helpers to do simple things (like rendering dates in a given format) which don&amp;rsquo;t justify a separate sub-component. For instance, you could do:</source>
          <target state="translated">일반적으로 사용되는 뷰 코드를 공유하는 다른 방법은 글로벌 스페이스 바 도우미입니다. 이를 &lt;code&gt;Template.registerHelper()&lt;/code&gt; 함수로 정의 할 수 있습니다 . 일반적으로 별도의 하위 구성 요소를 정당화하지 않는 간단한 형식 (예 : 지정된 형식의 렌더링 날짜)을 수행하도록 도우미를 등록합니다. 예를 들어 다음을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9713ac8cc2ea7950bc76e6441c6fe2173b97540e" translate="yes" xml:space="preserve">
          <source>Any &lt;code&gt;this.onStop()&lt;/code&gt; callbacks setup by the publish handler run. In this case, it is a single automatic callback setup when returning a cursor from the handler, which stops the query observer and cleans it up if necessary.</source>
          <target state="translated">모든 &lt;code&gt;this.onStop()&lt;/code&gt; 게시 핸들러를 실행하여 설정을 콜백. 이 경우 핸들러에서 커서를 반환 할 때 단일 자동 콜백 설정으로, 쿼리 관찰자를 중지하고 필요한 경우 정리합니다.</target>
        </trans-unit>
        <trans-unit id="7de84040ef0ad73ddef7fe2d3fd2f1813c0bd57b" translate="yes" xml:space="preserve">
          <source>Any constructor function (eg, &lt;code&gt;Date&lt;/code&gt;)</source>
          <target state="translated">모든 생성자 함수 (예 : &lt;code&gt;Date&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="7cb7c93b5c17be7935d8a4f0c2236afb2f25290d" translate="yes" xml:space="preserve">
          <source>Any directory named &lt;code&gt;client/&lt;/code&gt; is not loaded on the server. Similar to wrapping your code in &lt;code&gt;if (Meteor.isClient) { ... }&lt;/code&gt;. All files loaded on the client are automatically concatenated and minified when in production mode. In development mode, JavaScript and CSS files are not minified, to make debugging easier. CSS files are still combined into a single file for consistency between production and development, because changing the CSS file&amp;rsquo;s URL affects how URLs in it are processed.</source>
          <target state="translated">&lt;code&gt;client/&lt;/code&gt; 라는 이름의 디렉토리 가 서버에로드되지 않았습니다. &lt;code&gt;if (Meteor.isClient) { ... }&lt;/code&gt; 코드를 감싸는 것과 비슷합니다 . 클라이언트에로드 된 모든 파일은 프로덕션 모드에있을 때 자동으로 연결되고 축소됩니다. 개발 모드에서는 디버깅을 쉽게하기 위해 JavaScript 및 CSS 파일이 축소되지 않습니다. CSS 파일의 URL을 변경하면 파일의 URL이 처리되는 방식에 영향을주기 때문에 CSS 파일은 여전히 ​​프로덕션과 개발 간의 일관성을 위해 단일 파일로 결합됩니다.</target>
        </trans-unit>
        <trans-unit id="f170e8ec787b5654380e74c4fba619bf8321e74b" translate="yes" xml:space="preserve">
          <source>Any directory named &lt;code&gt;imports/&lt;/code&gt; is not loaded anywhere and files must be imported using &lt;code&gt;import&lt;/code&gt;.</source>
          <target state="translated">이름이 &lt;code&gt;imports/&lt;/code&gt; 인 디렉토리 는 어디에도로드되지 않으며 import를 사용하여 파일을 &lt;code&gt;import&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="08121405e1baf04344048427e1e9a54f9970d8a4" translate="yes" xml:space="preserve">
          <source>Any directory named &lt;code&gt;node_modules/&lt;/code&gt; is not loaded anywhere. node.js packages installed into &lt;code&gt;node_modules&lt;/code&gt; directories must be imported using &lt;code&gt;import&lt;/code&gt; or by using &lt;code&gt;Npm.depends&lt;/code&gt; in &lt;code&gt;package.js&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;node_modules/&lt;/code&gt; 라는 디렉토리는 어디에도 로드되지 않습니다. &lt;code&gt;node_modules&lt;/code&gt; 디렉토리에 설치된 node.js 패키지 는 &lt;code&gt;import&lt;/code&gt; 또는 &lt;code&gt;package.js&lt;/code&gt; 의 &lt;code&gt;Npm.depends&lt;/code&gt; 를 사용하여 가져와야 합니다 .</target>
        </trans-unit>
        <trans-unit id="54f80e0a9c33b160a1bc6d17edf0694c587670e1" translate="yes" xml:space="preserve">
          <source>Any directory named &lt;code&gt;server/&lt;/code&gt; is not loaded on the client. Similar to wrapping your code in &lt;code&gt;if (Meteor.isServer) { ... }&lt;/code&gt;, except the client never even receives the code. Any sensitive code that you don&amp;rsquo;t want served to the client, such as code containing passwords or authentication mechanisms, should be kept in the &lt;code&gt;server/&lt;/code&gt; directory.</source>
          <target state="translated">&lt;code&gt;server/&lt;/code&gt; 라는 디렉토리 는 클라이언트에로드되지 않습니다. 클라이언트가 코드를 수신하지 않는다는 점을 제외하고 &lt;code&gt;if (Meteor.isServer) { ... }&lt;/code&gt; 코드를 래핑하는 것과 유사합니다 . 비밀번호 나 인증 메커니즘이 포함 된 코드와 같이 클라이언트에 제공하지 않으려는 민감한 코드는 &lt;code&gt;server/&lt;/code&gt; 디렉토리에 보관해야합니다 .</target>
        </trans-unit>
        <trans-unit id="1b97d4457bf03c6cd81fc9a0fc55c12c59cb1ebd" translate="yes" xml:space="preserve">
          <source>Any directory named &lt;code&gt;tests/&lt;/code&gt; is not loaded anywhere. Use this for any test code you want to run using a test runner outside of &lt;a href=&quot;testing&quot;&gt;Meteor&amp;rsquo;s built-in test tools&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;tests/&lt;/code&gt; 라는 디렉토리 는 어디에도로드되지 않습니다. &lt;a href=&quot;testing&quot;&gt;Meteor의 내장 테스트 툴&lt;/a&gt; 외부에서 테스트 러너를 사용하여 실행하려는 테스트 코드에이 코드를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="1eed9d8611cb9874f94e60db799b799fe0d637bb" translate="yes" xml:space="preserve">
          <source>Any other client-side data stores (read more in the &lt;a href=&quot;data-loading#stores&quot;&gt;Data Loading article&lt;/a&gt;)</source>
          <target state="translated">다른 클라이언트 측 데이터 저장소 ( &lt;a href=&quot;data-loading#stores&quot;&gt;데이터로드 기사&lt;/a&gt; 에서 자세히 읽어보십시오 )</target>
        </trans-unit>
        <trans-unit id="cdf9bbefc76982e17471539cdea1217f5e1e0119" translate="yes" xml:space="preserve">
          <source>Anywhere</source>
          <target state="translated">Anywhere</target>
        </trans-unit>
        <trans-unit id="d718cfc91ca01459abd8b75acc03c2fa3dfe9eeb" translate="yes" xml:space="preserve">
          <source>Anywhere but publish functions</source>
          <target state="translated">어디서나 게시 기능</target>
        </trans-unit>
        <trans-unit id="e65e1cad7b403af55429566231a6c49f52e14b6d" translate="yes" xml:space="preserve">
          <source>Apart from simple interpolation, mustache tags can be used for control flow in the template. For instance, in the &lt;code&gt;Lists_show&lt;/code&gt; template, we render a list of todos like this:</source>
          <target state="translated">간단한 보간 외에도 콧수염 태그를 사용하여 템플릿의 제어 흐름을 수행 할 수 있습니다. 예를 들어 &lt;code&gt;Lists_show&lt;/code&gt; 템플릿 에서 다음 과 같이 할 일 목록을 렌더링합니다.</target>
        </trans-unit>
        <trans-unit id="edcd5233f64822c2dd83d29085963d888872f414" translate="yes" xml:space="preserve">
          <source>App icons and launch screens</source>
          <target state="translated">앱 아이콘 및 시작 화면</target>
        </trans-unit>
        <trans-unit id="b16fe693a06028b9e11a8ad6b5984deabcc6f688" translate="yes" xml:space="preserve">
          <source>App.accessRule()</source>
          <target state="translated">App.accessRule()</target>
        </trans-unit>
        <trans-unit id="0a8ab8cdf975a3b9af79a0333a84a5ee7c842f5d" translate="yes" xml:space="preserve">
          <source>App.appendToConfig()</source>
          <target state="translated">App.appendToConfig()</target>
        </trans-unit>
        <trans-unit id="381f452164ada1d95c1dd9cd159af317bdf4cdac" translate="yes" xml:space="preserve">
          <source>App.configurePlugin()</source>
          <target state="translated">App.configurePlugin()</target>
        </trans-unit>
        <trans-unit id="28e0932e637b7f01d5b8ab4d663b3680cbf1285a" translate="yes" xml:space="preserve">
          <source>App.icons()</source>
          <target state="translated">App.icons()</target>
        </trans-unit>
        <trans-unit id="432165fc533188f8ac176bc3a0ff9b9b719a27a4" translate="yes" xml:space="preserve">
          <source>App.info()</source>
          <target state="translated">App.info()</target>
        </trans-unit>
        <trans-unit id="f1f94af4dfae2958052b8baf00d310dafc581262" translate="yes" xml:space="preserve">
          <source>App.launchScreens()</source>
          <target state="translated">App.launchScreens()</target>
        </trans-unit>
        <trans-unit id="1f65431545c034ffa0f3fa7ed051509cc756b9e4" translate="yes" xml:space="preserve">
          <source>App.setPreference()</source>
          <target state="translated">App.setPreference()</target>
        </trans-unit>
        <trans-unit id="e417325ee605b017aab3bc55e94e47c9a41976dc" translate="yes" xml:space="preserve">
          <source>Append custom tags into config's widget element.</source>
          <target state="translated">구성의 widget 요소에 사용자 정의 태그를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="d71de8152541f4a1b7fda48b87f3fe315656e14c" translate="yes" xml:space="preserve">
          <source>Application Structure</source>
          <target state="translated">응용 프로그램 구조</target>
        </trans-unit>
        <trans-unit id="b6c273f7d56767507a649668833a7373a09fc5b4" translate="yes" xml:space="preserve">
          <source>Applications will find &lt;a href=&quot;#tracker_autorun&quot;&gt;&lt;code&gt;Tracker.autorun&lt;/code&gt;&lt;/a&gt; useful, while more advanced facilities such as &lt;code&gt;Tracker.Dependency&lt;/code&gt; and &lt;code&gt;onInvalidate&lt;/code&gt; callbacks are intended primarily for package authors implementing new reactive data sources.</source>
          <target state="translated">응용 프로그램은 &lt;a href=&quot;#tracker_autorun&quot;&gt; &lt;code&gt;Tracker.autorun&lt;/code&gt; 이&lt;/a&gt; 유용하지만 &lt;code&gt;Tracker.Dependency&lt;/code&gt; 및 &lt;code&gt;onInvalidate&lt;/code&gt; 콜백 과 같은 고급 기능 은 주로 새로운 반응 형 데이터 소스를 구현하는 패키지 작성자를위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="cbb9fa252e60809efa55a7ad83aea5438ef56753" translate="yes" xml:space="preserve">
          <source>Arguments</source>
          <target state="translated">Arguments</target>
        </trans-unit>
        <trans-unit id="01213ceef0a147d194e6cf6fddd447dc4ccd443c" translate="yes" xml:space="preserve">
          <source>Array (or space-separated string) of Message-IDs to refer to</source>
          <target state="translated">참조 할 Message-ID의 배열 (또는 공백으로 구분 된 문자열)</target>
        </trans-unit>
        <trans-unit id="81ec532957dc01094b9d45d03698fc46c25b0573" translate="yes" xml:space="preserve">
          <source>Array of attachment objects, as described in the &lt;a href=&quot;https://github.com/nodemailer/mailcomposer/blob/v4.0.1/README.md#attachments&quot;&gt;mailcomposer documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/nodemailer/mailcomposer/blob/v4.0.1/README.md#attachments&quot;&gt;mailcomposer 문서에&lt;/a&gt; 설명 된 첨부 파일 객체의 배열입니다 .</target>
        </trans-unit>
        <trans-unit id="d55f3361dc0c2f0bda8e847c22a466e4ca9b6659" translate="yes" xml:space="preserve">
          <source>Array or string to choose from</source>
          <target state="translated">선택할 배열 또는 문자열</target>
        </trans-unit>
        <trans-unit id="8aec69482f7ae347caa06235b2e3144e97b0f493" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;Factory.create&lt;/code&gt; directly inserts documents into the collection that&amp;rsquo;s passed into the &lt;code&gt;Factory.define&lt;/code&gt; function, it can be a problem to use it on the client. However there&amp;rsquo;s a neat isolation trick that you can do to replace the server-backed &lt;code&gt;Todos&lt;/code&gt;&lt;a href=&quot;collections#client-collections&quot;&gt;client collection&lt;/a&gt; with a mocked out &lt;a href=&quot;#collections.html#local-collections&quot;&gt;local collection&lt;/a&gt;, that&amp;rsquo;s encoded in the &lt;a href=&quot;https://atmospherejs.com/hwillson/stub-collections&quot;&gt;&lt;code&gt;hwillson:stub-collections&lt;/code&gt;&lt;/a&gt; package.</source>
          <target state="translated">으로 &lt;code&gt;Factory.create&lt;/code&gt; 이 직접으로 전달되는 콜렉션에 문서를 삽입 &lt;code&gt;Factory.define&lt;/code&gt; 의 기능은 클라이언트에서 사용하기에 문제가 될 수 있습니다. 그러나 서버 지원 &lt;code&gt;Todos&lt;/code&gt; &lt;a href=&quot;collections#client-collections&quot;&gt;클라이언트 콜렉션&lt;/a&gt; 을 모의 &lt;a href=&quot;#collections.html#local-collections&quot;&gt;로컬 콜렉션&lt;/a&gt; 으로 대체 할 수있는 깔끔한 분리 트릭이 있습니다.&lt;a href=&quot;https://atmospherejs.com/hwillson/stub-collections&quot;&gt; &lt;code&gt;hwillson:stub-collections&lt;/code&gt; &lt;/a&gt; . 이는 hwillson : stub-collections 패키지에 인코딩되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="c78d428199036618175ed9ae303b1e5e7dbd8494" translate="yes" xml:space="preserve">
          <source>As a concrete example of using the &lt;a href=&quot;#custom-publication&quot;&gt;low-level API&lt;/a&gt;, consider the situation where you have some 3rd party REST endpoint which provides a changing set of data that&amp;rsquo;s valuable to your users. How do you make that data available?</source>
          <target state="translated">사용의 구체적인 예로서 &lt;a href=&quot;#custom-publication&quot;&gt;저수준 API&lt;/a&gt; , 사용자에게 중요한 변화하는 데이터 세트를 제공하는 타사 REST 엔드 포인트가있는 상황을 고려하십시오. 해당 데이터를 어떻게 사용할 수 있습니까?</target>
        </trans-unit>
        <trans-unit id="114eee85654e96417eb15e7b89423441d53a9398" translate="yes" xml:space="preserve">
          <source>As a safety measure, if &lt;code&gt;selector&lt;/code&gt; is omitted (or is &lt;code&gt;undefined&lt;/code&gt;), no documents will be removed. Set &lt;code&gt;selector&lt;/code&gt; to &lt;code&gt;{}&lt;/code&gt; if you really want to remove all documents from your collection.</source>
          <target state="translated">안전 조치로 &lt;code&gt;selector&lt;/code&gt; 가 생략되거나 &lt;code&gt;undefined&lt;/code&gt; 경우 문서가 제거되지 않습니다. 컬렉션에서 모든 문서를 정말로 제거하려면 &lt;code&gt;selector&lt;/code&gt; 를 &lt;code&gt;{}&lt;/code&gt; 로 설정 하십시오.</target>
        </trans-unit>
        <trans-unit id="7ab4f3b3c06af5c43287dc0645a7a96a1d3c2280" translate="yes" xml:space="preserve">
          <source>As a template helper. The identifier &lt;code&gt;foo&lt;/code&gt; refers to a helper function (or constant value) that is accessible from the current template.</source>
          <target state="translated">템플릿 도우미로. 식별자 &lt;code&gt;foo&lt;/code&gt; 는 현재 템플릿에서 액세스 할 수있는 도우미 함수 (또는 상수 값)를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="8fe943a860a61843f10a1f4ff793245c3f64ffce" translate="yes" xml:space="preserve">
          <source>As a web app, Cordova apps are subject to various security mechanisms designed to protect the integrity of your code and to avoid certain types of attacks. Which security mechanisms are in use may depend on the type and version of the web view your app runs in. In addition, Cordova itself, and in some cases the OS, adds different levels of access control that may also affect what content can and cannot be loaded. All this can make it fairly confusing to understand why something is not working, and even harder to understand the security implications of the various ways of configuring these mechanisms.</source>
          <target state="translated">웹 앱인 Cordova 앱은 코드의 무결성을 보호하고 특정 유형의 공격을 피하도록 설계된 다양한 보안 메커니즘의 적용을받습니다. 사용중인 보안 메커니즘은 앱이 실행되는 웹보기의 유형과 버전에 따라 달라질 수 있습니다. 또한 Cordova 자체 및 경우에 따라 OS에 다양한 수준의 액세스 제어를 추가하여 컨텐츠에 따라 달라질 수있는 컨텐츠에 영향을 줄 수 있습니다. 로드됩니다. 이 모든 것이 왜 작동하지 않는 이유를 이해하는 것은 상당히 혼란스럽고 이러한 메커니즘을 구성하는 다양한 방법의 보안 영향을 이해하기가 더 어려울 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5c654c84aad085e7d355c8e102451761c4e45af4" translate="yes" xml:space="preserve">
          <source>As acceptance tests test the behavior of the application in a full browser context in a generic way, there are a range of tools that you can use to specify and run such tests. In this guide we&amp;rsquo;ll demonstrate using &lt;a href=&quot;https://chimp.readme.io&quot;&gt;Chimp&lt;/a&gt;, an acceptance testing tool with a few neat Meteor-specific features that makes it easy to use.</source>
          <target state="translated">승인 테스트는 일반적인 방식으로 전체 브라우저 컨텍스트에서 응용 프로그램 동작을 테스트 할 때 이러한 테스트를 지정하고 실행하는 데 사용할 수있는 다양한 도구가 있습니다. 이 가이드에서는 사용 하기 쉬운 몇 가지 깔끔한 Meteor 관련 기능이 포함 된 승인 테스트 도구 인 &lt;a href=&quot;https://chimp.readme.io&quot;&gt;Chimp를&lt;/a&gt; 사용하여 시연 합니다.</target>
        </trans-unit>
        <trans-unit id="103ce336a265824f32134a79b7e425646c5bd8df" translate="yes" xml:space="preserve">
          <source>As an alternative to publishing your package on Atmosphere, if you want to keep your package private, you can place it in your Meteor app in the &lt;code&gt;packages/&lt;/code&gt; directory, for instance &lt;code&gt;packages/foo/&lt;/code&gt;, and then add it to your app with &lt;code&gt;meteor add foo&lt;/code&gt;.</source>
          <target state="translated">Atmosphere에 패키지를 게시하는 대신 패키지를 비공개로 유지하려면 &lt;code&gt;packages/&lt;/code&gt; 디렉토리 (예 : &lt;code&gt;packages/foo/&lt;/code&gt; ) 의 Meteor 앱에 배치 한 다음 &lt;code&gt;meteor add foo&lt;/code&gt; 를 사용하여 앱에 추가 할 수 있습니다 foo .</target>
        </trans-unit>
        <trans-unit id="b52994f3c80b4b7be57d20445a36c68c62648598" translate="yes" xml:space="preserve">
          <source>As an example, consider the &lt;code&gt;Todos_item&lt;/code&gt; template from the Todos example app:</source>
          <target state="translated">예를 들어, Todos 예제 앱 의 &lt;code&gt;Todos_item&lt;/code&gt; 템플리트를 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="bfe4b0bfdc388675965d04e9e1ecae11a95df54d" translate="yes" xml:space="preserve">
          <source>As described in the &lt;a href=&quot;https://guide.meteor.com/ui-ux.html#smart-components&quot;&gt;UI/UX article&lt;/a&gt;, you should fetch data in the same component where you subscribed to that data. In a Blaze smart component, it&amp;rsquo;s usually simplest to fetch the data in a helper, which you can then use to pass data into a reusable child component. For example, in the &lt;code&gt;Lists_show_page&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://guide.meteor.com/ui-ux.html#smart-components&quot;&gt;UI / UX 기사에&lt;/a&gt; 설명 된대로 해당 데이터를 구독 한 동일한 구성 요소에서 데이터를 가져와야합니다. Blaze 스마트 구성 요소에서는 일반적으로 도우미에서 데이터를 가져 오는 것이 가장 간단합니다. 그런 다음 재사용 가능한 하위 구성 요소에 데이터를 전달하는 데 사용할 수 있습니다. 예를 들어 &lt;code&gt;Lists_show_page&lt;/code&gt; 에서 :</target>
        </trans-unit>
        <trans-unit id="52e320659b89e20f6729b1fa8ded350e2de1b6bd" translate="yes" xml:space="preserve">
          <source>As illustrated by the above example, there are four major types of template tags:</source>
          <target state="translated">위의 예에서 볼 수 있듯이 템플릿 태그에는 네 가지 주요 유형이 있습니다.</target>
        </trans-unit>
        <trans-unit id="2b84d8a0b5be7c9ca71a32925e9499a131948ea4" translate="yes" xml:space="preserve">
          <source>As mentioned before, mobile apps need to be able to &lt;a href=&quot;#connecting-to-the-server&quot;&gt;connect to a server&lt;/a&gt; to support hot code push. In production, you will need to specify which server to connect to &lt;a href=&quot;#building-for-production&quot;&gt;when building the app&lt;/a&gt; using the &lt;code&gt;--server&lt;/code&gt; option. The specified server address is used to set &lt;code&gt;ROOT_URL&lt;/code&gt; in &lt;code&gt;__meteor_runtime_config__&lt;/code&gt;, which is defined as part of the generated &lt;code&gt;index.html&lt;/code&gt; in the app bundle.</source>
          <target state="translated">앞에서 언급했듯이 핫 코드 푸시를 지원 &lt;a href=&quot;#connecting-to-the-server&quot;&gt;하려면&lt;/a&gt; 모바일 앱 을 서버 에 연결할 수 있어야합니다 . 프로덕션에서는 &lt;code&gt;--server&lt;/code&gt; 옵션을 사용하여 &lt;a href=&quot;#building-for-production&quot;&gt;앱&lt;/a&gt; 을 빌드 할 때 연결할 서버를 지정해야합니다 . 지정된 서버 주소는 &lt;code&gt;ROOT_URL&lt;/code&gt; 에서 &lt;code&gt;__meteor_runtime_config__&lt;/code&gt; 을 설정하는 데 사용되며 , 이는 앱 번들에서 생성 된 &lt;code&gt;index.html&lt;/code&gt; 의 일부로 정의됩니다 .</target>
        </trans-unit>
        <trans-unit id="aad495ab9533614019a4d6f3c2cd9b1b8315401e" translate="yes" xml:space="preserve">
          <source>As mentioned in &lt;a href=&quot;#Blaze-render&quot;&gt;&lt;code&gt;Blaze.render&lt;/code&gt;&lt;/a&gt;, it is important to &amp;ldquo;remove&amp;rdquo; all content rendered via &lt;code&gt;Blaze.render&lt;/code&gt; using &lt;code&gt;Blaze.remove&lt;/code&gt;, unless the parent node of &lt;code&gt;renderedView&lt;/code&gt; is removed by a Meteor reactive update or with jQuery.</source>
          <target state="translated">에서 언급 한 바와 같이 &lt;a href=&quot;#Blaze-render&quot;&gt; &lt;code&gt;Blaze.render&lt;/code&gt; &lt;/a&gt; , 그것은을 통해 렌더링 모든 컨텐츠 &quot;제거&quot;하는 것이 중요합니다 &lt;code&gt;Blaze.render&lt;/code&gt; 사용 &lt;code&gt;Blaze.remove&lt;/code&gt; 을 의 부모 노드하지 않는 한, &lt;code&gt;renderedView&lt;/code&gt; 는 유성 반응 업데이트로 또는 jQuery를 함께 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="c1ac7655bc68adb19d6c72bb4621ed39d6200d48" translate="yes" xml:space="preserve">
          <source>As mentioned in the &lt;a href=&quot;https://guide.meteor.com/build-tool.html#blaze&quot;&gt;build system article&lt;/a&gt;, the &lt;a href=&quot;https://atmospherejs.com/meteor/blaze-html-templates&quot;&gt;&lt;code&gt;blaze-html-templates&lt;/code&gt;&lt;/a&gt; package scans your source code for &lt;code&gt;.html&lt;/code&gt; files, picks out &lt;code&gt;&amp;lt;template name=&quot;templateName&quot;&amp;gt;&lt;/code&gt; tags, and compiles them into a JavaScript file that defines a function that implements the component in code, attached to the &lt;code&gt;Template.templateName&lt;/code&gt; symbol.</source>
          <target state="translated">에서 언급 한 바와 같이 &lt;a href=&quot;https://guide.meteor.com/build-tool.html#blaze&quot;&gt;빌드 시스템 기사&lt;/a&gt; 의 &lt;a href=&quot;https://atmospherejs.com/meteor/blaze-html-templates&quot;&gt; &lt;code&gt;blaze-html-templates&lt;/code&gt; &lt;/a&gt; 패키지에 대한 소스 코드를 스캔 &lt;code&gt;.html&lt;/code&gt; 중에서 파일을 밖으로 집어 &lt;code&gt;&amp;lt;template name=&quot;templateName&quot;&amp;gt;&lt;/code&gt; 자바 스크립트 파일에 태그 및 컴파일 그들이 정의하는 기능을하는 구현 &lt;code&gt;Template.templateName&lt;/code&gt; 기호에 첨부 된 코드의 구성 요소 .</target>
        </trans-unit>
        <trans-unit id="efa2d8159f5af0638eb43e0603517d750e43ac65" translate="yes" xml:space="preserve">
          <source>As of &lt;a href=&quot;https://cordova.apache.org/announcements/2016/10/24/ios-release.html&quot;&gt;Cordova iOS 4.3.0&lt;/a&gt; you may also need to &lt;code&gt;sudo gem install cocoapods&lt;/code&gt; to resolve a dependency with &lt;a href=&quot;https://github.com/phonegap/phonegap-plugin-push/blob/master/docs/INSTALLATION.md&quot;&gt;PhoneGap Push Plugin&lt;/a&gt;.</source>
          <target state="translated">현재 &lt;a href=&quot;https://cordova.apache.org/announcements/2016/10/24/ios-release.html&quot;&gt;코르도바 아이폰 OS 4.3.0&lt;/a&gt; 당신은 또한해야 할 수 있습니다 &lt;code&gt;sudo gem install cocoapods&lt;/code&gt; 가진 의존성 해결하기 위해 &lt;a href=&quot;https://github.com/phonegap/phonegap-plugin-push/blob/master/docs/INSTALLATION.md&quot;&gt;폰갭 푸시 플러그인&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="34fbe4922687e2d3d8dfa7887952e9bc52d93b6d" translate="yes" xml:space="preserve">
          <source>As of Android Marshmallow, certain system features (e.g. camera, microphone, etc.) require additional permissions in order to access them. These must be listed in the manifest and &lt;strong&gt;also requested at runtime&lt;/strong&gt;.</source>
          <target state="translated">Android Marshmallow부터 특정 시스템 기능 (예 : 카메라, 마이크 등)에 액세스하려면 추가 권한이 필요합니다. 이것은 매니페스트에 나열되어야하며 &lt;strong&gt;런타임시 요청&lt;/strong&gt; 되어야합니다 .</target>
        </trans-unit>
        <trans-unit id="ae4403abb2e45dce33caa068f7690f83eeb19c2c" translate="yes" xml:space="preserve">
          <source>As of CoffeeScript 1.11.0, &lt;a href=&quot;http://coffeescript.org/#modules&quot;&gt;CoffeeScript supports &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt; statements natively&lt;/a&gt;. Make sure you are using the latest version of the &lt;a href=&quot;https://atmospherejs.com/meteor/coffeescript&quot;&gt;CoffeeScript package&lt;/a&gt; in your project to get this support. New projects created today will get this version with &lt;code&gt;meteor add coffeescript&lt;/code&gt;. Make sure you don&amp;rsquo;t forget to include the &lt;code&gt;ecmascript&lt;/code&gt; and &lt;code&gt;modules&lt;/code&gt; packages: &lt;code&gt;meteor add ecmascript&lt;/code&gt;. (The &lt;code&gt;modules&lt;/code&gt; package is implied by &lt;code&gt;ecmascript&lt;/code&gt;.)</source>
          <target state="translated">CoffeeScript 1.11.0부터 &lt;a href=&quot;http://coffeescript.org/#modules&quot;&gt;CoffeeScript는 기본적으로 &lt;code&gt;import&lt;/code&gt; 및 &lt;code&gt;export&lt;/code&gt; 문을 지원합니다&lt;/a&gt; . 이 지원을 받으려면 프로젝트에서 최신 버전의 &lt;a href=&quot;https://atmospherejs.com/meteor/coffeescript&quot;&gt;CoffeeScript 패키지&lt;/a&gt; 를 사용하고 있는지 확인하십시오 . 오늘 생성 된 새로운 프로젝트는 &lt;code&gt;meteor add coffeescript&lt;/code&gt; 와 함께이 버전을 사용할 것 입니다. &lt;code&gt;ecmascript&lt;/code&gt; 및 &lt;code&gt;modules&lt;/code&gt; 패키지 를 포함하는 것을 잊지 마십시오 : &lt;code&gt;meteor add ecmascript&lt;/code&gt; . ( &lt;code&gt;modules&lt;/code&gt; 패키지는 &lt;code&gt;ecmascript&lt;/code&gt; 로 암시됩니다 .)</target>
        </trans-unit>
        <trans-unit id="fa8095e4d4b71816465789a6513a5e09fdb84eba" translate="yes" xml:space="preserve">
          <source>As of Meteor 1.4, you must ensure you set the &lt;code&gt;replicaSet&lt;/code&gt; parameter on your &lt;code&gt;METEOR_OPLOG_URL&lt;/code&gt;</source>
          <target state="translated">유성 1.4, 당신은 당신이 설정 확인해야합니다 &lt;code&gt;replicaSet&lt;/code&gt; 의 당신에 매개 변수를 &lt;code&gt;METEOR_OPLOG_URL&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7cb3055259d36f92b5aef9fc40bc5fae0c2d0dec" translate="yes" xml:space="preserve">
          <source>As of version 1.3, Meteor ships with full support for &lt;a href=&quot;https://developer.mozilla.org/en/docs/web/javascript/reference/statements/import&quot;&gt;ES2015 modules&lt;/a&gt;. The ES2015 module standard is the replacement for &lt;a href=&quot;http://requirejs.org/docs/commonjs.html&quot;&gt;CommonJS&lt;/a&gt; and &lt;a href=&quot;https://github.com/amdjs/amdjs-api&quot;&gt;AMD&lt;/a&gt;, which are commonly used JavaScript module format and loading systems.</source>
          <target state="translated">1.3 버전부터 Meteor는 &lt;a href=&quot;https://developer.mozilla.org/en/docs/web/javascript/reference/statements/import&quot;&gt;ES2015 모듈&lt;/a&gt; 을 완벽하게 지원 합니다 . ES2015 모듈 표준은 일반적으로 사용되는 JavaScript 모듈 형식 및 로딩 시스템 인 &lt;a href=&quot;http://requirejs.org/docs/commonjs.html&quot;&gt;CommonJS&lt;/a&gt; 및 &lt;a href=&quot;https://github.com/amdjs/amdjs-api&quot;&gt;AMD를&lt;/a&gt; 대체 합니다.</target>
        </trans-unit>
        <trans-unit id="d0b8dff057ecedf521d295257ba65fd190b5ad6f" translate="yes" xml:space="preserve">
          <source>As the system under test in our integration test has a larger surface area, we need to stub out a few more points of integration with the rest of the stack. Of particular interest here is our use of the &lt;a href=&quot;#mocking-the-database&quot;&gt;&lt;code&gt;hwillson:stub-collections&lt;/code&gt;&lt;/a&gt; package and of &lt;a href=&quot;http://sinonjs.org&quot;&gt;Sinon&lt;/a&gt; to stub out Flow Router and our Subscription.</source>
          <target state="translated">통합 테스트에서 테스트중인 시스템의 표면적이 더 크므로 나머지 스택과 통합 할 지점을 몇 개 더 늘려야합니다. 플로우 라우터와 서브 스크립 션을 제거하기 위해 &lt;a href=&quot;#mocking-the-database&quot;&gt; &lt;code&gt;hwillson:stub-collections&lt;/code&gt; &lt;/a&gt; 패키지와 &lt;a href=&quot;http://sinonjs.org&quot;&gt;Sinon&lt;/a&gt; 을 사용하는 것이 특히 중요합니다 .</target>
        </trans-unit>
        <trans-unit id="1f7a269aaebbc7f0ce8c7d35b82e234647c16365" translate="yes" xml:space="preserve">
          <source>As we discussed above, trying to predict all future requirements of your data schema ahead of time is impossible. Inevitably, as a project matures, there will come a time when you need to change the schema of the database. You need to be careful about how you make the migration to the new schema to make sure your app works smoothly during and after the migration.</source>
          <target state="translated">위에서 논의한 바와 같이, 데이터 스키마의 미래의 모든 요구 사항을 미리 예측하는 것은 불가능합니다. 프로젝트가 성숙함에 따라 데이터베이스의 스키마를 변경해야 할 때가 올 것입니다. 마이그레이션 도중 및 이후에 앱이 원활하게 작동하도록 새 스키마로 마이그레이션하는 방법에주의해야합니다.</target>
        </trans-unit>
        <trans-unit id="1b1f7c76e19eca5f25f2b075af9eda38eecebfb7" translate="yes" xml:space="preserve">
          <source>As we discussed earlier, it&amp;rsquo;s very common in Meteor applications to have associations between documents in different collections. Consequently, it&amp;rsquo;s also very common to need to write queries fetching related documents once you have a document you are interested in (for instance all the todos that are in a single list).</source>
          <target state="translated">앞에서 설명한 것처럼 Meteor 응용 프로그램에서는 서로 다른 컬렉션의 문서를 연결하는 것이 매우 일반적입니다. 따라서 관심있는 문서가 있으면 (예 : 단일 목록에있는 모든 작업 관리) 관련 문서를 가져 오는 쿼리를 작성하는 것이 매우 일반적입니다.</target>
        </trans-unit>
        <trans-unit id="29dd93acb63f26c4e1a8932e4ae252ba0cf75a13" translate="yes" xml:space="preserve">
          <source>As we discussed in the introduction, the URL is really just a serialization of some part of the client-side state the user is looking at. Although parameters can only be strings, it&amp;rsquo;s possible to convert any type of data to a string by serializing it.</source>
          <target state="translated">소개에서 설명한 것처럼 URL은 실제로 사용자가보고있는 클라이언트 쪽 상태의 일부를 직렬화 한 것입니다. 매개 변수는 문자열 만 가능하지만 직렬화하여 모든 유형의 데이터를 문자열로 변환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5912be28372dade889ca2a9346b7831bdb0f5555" translate="yes" xml:space="preserve">
          <source>As we mentioned above, the &lt;code&gt;onRendered()&lt;/code&gt; callback is typically the right spot to call out to third party libraries that expect a pre-rendered DOM (such as jQuery plugins). The &lt;code&gt;onRendered()&lt;/code&gt; callback is triggered &lt;em&gt;once&lt;/em&gt; after the component has rendered and attached to the DOM for the first time.</source>
          <target state="translated">위에서 언급했듯이 &lt;code&gt;onRendered()&lt;/code&gt; 콜백은 일반적으로 사전 렌더링 된 DOM (예 : jQuery 플러그인)을 기대하는 타사 라이브러리를 호출하기에 적합한 지점입니다. &lt;code&gt;onRendered()&lt;/code&gt; 콜백이 트리거 &lt;em&gt;되면&lt;/em&gt; 컴포넌트가 렌더링 처음 DOM 부착 후에.</target>
        </trans-unit>
        <trans-unit id="38dba416ec96765d98f7f5025e2e45f47def2d9b" translate="yes" xml:space="preserve">
          <source>As we&amp;rsquo;ll run this test in the same way that we did our unit test, we need to &lt;code&gt;import&lt;/code&gt; the relevant modules under test in the same way that we &lt;a href=&quot;#simple-integration-test-importing&quot;&gt;did in the unit test&lt;/a&gt;.</source>
          <target state="translated">우리는 우리가 우리의 단위 테스트를했던 것과 같은 방법으로이 테스트를 실행할 수 있습니다, 우리는 할 필요가 &lt;code&gt;import&lt;/code&gt; 우리가하는 것과 같은 방식으로 테스트중인 관련 모듈을 &lt;a href=&quot;#simple-integration-test-importing&quot;&gt;단위 테스트했다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3753cc8e3fca3fda6c4f0ab3f3fde280a86f5718" translate="yes" xml:space="preserve">
          <source>As we&amp;rsquo;ve defined a test file (&lt;code&gt;imports/todos/todos.tests.js&lt;/code&gt;), what this means is that the file above will be eagerly loaded, adding the &lt;code&gt;'builds correctly from factory'&lt;/code&gt; test to the Mocha registry.</source>
          <target state="translated">테스트 파일 ( &lt;code&gt;imports/todos/todos.tests.js&lt;/code&gt; )을 정의 했으므로 이는 &lt;code&gt;'builds correctly from factory'&lt;/code&gt; 테스트를 Mocha 레지스트리에 추가하여 위의 파일을 열심히로드한다는 의미입니다 .</target>
        </trans-unit>
        <trans-unit id="d407b8c96e5d55bc035c664b3c3baf3e22079b31" translate="yes" xml:space="preserve">
          <source>As we&amp;rsquo;ve discussed, Meteor is a framework for client rendered applications, but this doesn&amp;rsquo;t always remove the requirement for server rendered routes. There are two main use cases for server-side routing.</source>
          <target state="translated">앞에서 언급했듯이 Meteor는 클라이언트 렌더링 응용 프로그램을위한 프레임 워크이지만 서버 렌더링 경로에 대한 요구 사항이 항상 제거되는 것은 아닙니다. 서버 측 라우팅에는 두 가지 주요 사용 사례가 있습니다.</target>
        </trans-unit>
        <trans-unit id="a1abd6160865d36ebc2c342028e604f5cbce3c0b" translate="yes" xml:space="preserve">
          <source>As we&amp;rsquo;ve placed the code above in a test file, it &lt;em&gt;will not&lt;/em&gt; load in normal development or production mode (which would be an incredibly bad thing!). If you create a Atmosphere package with a similar feature, you should mark it as &lt;code&gt;testOnly&lt;/code&gt; and it will similarly only load in test mode.</source>
          <target state="translated">위의 코드를 테스트 파일에 배치 했으므로 일반 개발 또는 프로덕션 모드에서로드 &lt;em&gt;되지 않습니다&lt;/em&gt; (매우 나쁠 것입니다). 유사한 기능으로 분위기 패키지를 생성하는 경우 &lt;code&gt;testOnly&lt;/code&gt; 로 표시해야 하며 테스트 모드에서만 유사하게로드됩니다.</target>
        </trans-unit>
        <trans-unit id="14b6a09f95218d20c78df0dee62f9f211210953d" translate="yes" xml:space="preserve">
          <source>As with CommonJS &lt;code&gt;module.exports&lt;/code&gt;, it is possible to define a single &lt;em&gt;default&lt;/em&gt; export:</source>
          <target state="translated">CommonJS &lt;code&gt;module.exports&lt;/code&gt; 와 마찬가지로 단일 &lt;em&gt;기본&lt;/em&gt; 내보내기 를 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="97ffdfa3b12f57325a3c035199b86637c190c07c" translate="yes" xml:space="preserve">
          <source>As you can see, there is a fair amount of boilerplate to handle errors nicely in a form, but most of it can be easily abstracted by an off-the-shelf form framework or a simple application-specific wrapper of your own design.</source>
          <target state="translated">보시다시피, 양식에서 오류를 훌륭하게 처리 할 수있는 보일러 플레이트가 상당히 많지만 대부분은 상용 양식 프레임 워크 또는 자체 디자인의 간단한 응용 프로그램 별 래퍼로 쉽게 추상화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="276f78d237188d5bcb8c8b1bea29f989f1f9cac9" translate="yes" xml:space="preserve">
          <source>As you can see, this approach to calling Methods results in a better development workflow - you can more easily deal with the different parts of the Method separately and test your code more easily without having to deal with Meteor internals. But this approach requires you to write a lot of boilerplate on the Method definition side.</source>
          <target state="translated">보시다시피, Methods 호출에 대한 이러한 접근 방식은보다 나은 개발 워크 플로를 제공합니다. Meteor 내부를 다루지 않고도 Method의 다른 부분을보다 쉽게 ​​처리하고 코드를보다 쉽게 ​​테스트 할 수 있습니다. 그러나이 방법을 사용하려면 분석법 정의 측면에 많은 상용구를 작성해야합니다.</target>
        </trans-unit>
        <trans-unit id="7452434ad18755926a22354b3770b97dd25d1e2e" translate="yes" xml:space="preserve">
          <source>As you can see, we can use the ES2015 template string functionality to generate a multi-line string that includes the password reset URL. We can also set a custom &lt;code&gt;from&lt;/code&gt; address and email subject.</source>
          <target state="translated">보시다시피 ES2015 템플릿 문자열 기능을 사용하여 비밀번호 재설정 URL이 포함 된 여러 줄 문자열을 생성 할 수 있습니다. 주소 및 이메일 제목 &lt;code&gt;from&lt;/code&gt; 사용자 정의 를 설정할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2ef56ebc5fe97485bb2f45faeab4552e5f8e9030" translate="yes" xml:space="preserve">
          <source>As you write more code and come up against the recommended style rules, you can take that as an opportunity to learn more about your programming language and how different people prefer to use it.</source>
          <target state="translated">더 많은 코드를 작성하고 권장 스타일 규칙을 따르면 프로그래밍 언어와 다른 사람들이 사용하는 방법에 대해 더 많이 배울 수있는 기회로 활용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="95af8ee4216607403b1f122ae8b837dd1818b5a3" translate="yes" xml:space="preserve">
          <source>As your app gets more complex, you will invariably need to store some data about individual users, and the most natural place to put that data is in additional fields on the &lt;code&gt;Meteor.users&lt;/code&gt; collection described above. In a more normalized data situation it would be a good idea to keep Meteor&amp;rsquo;s user data and yours in two separate tables, but since MongoDB doesn&amp;rsquo;t deal well with data associations it makes sense to just use one collection.</source>
          <target state="translated">앱이 복잡 해짐에 따라 개별 사용자에 대한 일부 데이터를 저장해야하며, 해당 데이터를 넣는 가장 자연스러운 장소 는 위에서 설명한 &lt;code&gt;Meteor.users&lt;/code&gt; 컬렉션의 추가 필드에 있습니다. 보다 표준화 된 데이터 상황에서는 Meteor의 사용자 데이터와 사용자 데이터를 두 개의 별도 테이블에 보관하는 것이 좋지만 MongoDB는 데이터 연결을 잘 처리하지 못하므로 하나의 컬렉션 만 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="20e338624cee29d0effead85b0dd0e70de783b4c" translate="yes" xml:space="preserve">
          <source>Assets</source>
          <target state="translated">Assets</target>
        </trans-unit>
        <trans-unit id="781d1600ad51aa1df0cf08bfc8fb61e796143a0e" translate="yes" xml:space="preserve">
          <source>Assigning default values based on the &lt;code&gt;defaultValue&lt;/code&gt; in the schema definition</source>
          <target state="translated">스키마 정의에서 &lt;code&gt;defaultValue&lt;/code&gt; 를 기반으로 기본값 지정</target>
        </trans-unit>
        <trans-unit id="8980c681d3221afc3da7a612479cd2084b6fc673" translate="yes" xml:space="preserve">
          <source>Association helpers</source>
          <target state="translated">협회 도우미</target>
        </trans-unit>
        <trans-unit id="d5862606c3b8b113c42053fb851227f05e6d074d" translate="yes" xml:space="preserve">
          <source>Associations between collections</source>
          <target state="translated">컬렉션 간 연관</target>
        </trans-unit>
        <trans-unit id="da27fe7480745304c55a665924b3df23d9181996" translate="yes" xml:space="preserve">
          <source>Asyncronous Callbacks</source>
          <target state="translated">비동기 콜백</target>
        </trans-unit>
        <trans-unit id="90bb0f85a1a6bd065a34114333256e188a111001" translate="yes" xml:space="preserve">
          <source>At element level (i.e. anywhere an HTML tag could go)</source>
          <target state="translated">요소 수준 (예 : HTML 태그가 갈 수있는 곳)</target>
        </trans-unit>
        <trans-unit id="50ed59c154d8c81b337b669516be66c08b3c9402" translate="yes" xml:space="preserve">
          <source>At its core, a Method is an API endpoint for your server; you can define a Method on the server and its counterpart on the client, then call it with some data, write to the database, and get the return value in a callback. Meteor Methods are also tightly integrated with the pub/sub and data loading systems of Meteor to allow for &lt;a href=&quot;http://info.meteor.com/blog/optimistic-ui-with-meteor-latency-compensation&quot;&gt;Optimistic UI&lt;/a&gt;&amp;mdash;the ability to simulate server-side actions on the client to make your app feel faster than it actually is.</source>
          <target state="translated">기본적으로 Method는 서버의 API 엔드 포인트입니다. 서버에서 메소드를 정의하고 클라이언트에서 해당 메소드를 정의한 후 일부 데이터로 메소드를 호출하고 데이터베이스에 쓰고 콜백에서 리턴 값을 얻을 수 있습니다. Meteor Methods는 또한 Meteor의 pub / sub 및 데이터 로딩 시스템과 긴밀하게 통합되어 &lt;a href=&quot;http://info.meteor.com/blog/optimistic-ui-with-meteor-latency-compensation&quot;&gt;낙관적 UI (&lt;/a&gt; 클라이언트에서 서버 쪽 동작을 시뮬레이션하여 앱이 실제보다 빠르게 느껴지도록하는 기능)를 허용합니다 .</target>
        </trans-unit>
        <trans-unit id="096d20c5494d3c9eaea902d4a95e722c5380d56b" translate="yes" xml:space="preserve">
          <source>At its core, a web application offers its users a view into, and a way to modify, a persistent set of data. Whether managing a list of todos, or ordering a car to pick you up, you are interacting with a permanent but constantly changing data layer.</source>
          <target state="translated">기본적으로 웹 응용 프로그램은 사용자에게 지속적인 데이터 집합을보고 수정하는 방법을 제공합니다. 할 일 목록을 관리하든, 차량을 픽업하라고 지시하든, 영구적이지만 끊임없이 변화하는 데이터 계층과 상호 작용하고 있습니다.</target>
        </trans-unit>
        <trans-unit id="42d76533272268f0e403a25f4279c6bf7e7ef47e" translate="yes" xml:space="preserve">
          <source>At most one of &lt;code&gt;options.connection&lt;/code&gt; and &lt;code&gt;options.ddpUrl&lt;/code&gt; should be provided in any instantiation of &lt;code&gt;AccountsClient&lt;/code&gt;. If neither is provided, &lt;code&gt;Meteor.connection&lt;/code&gt; will be used as the &lt;code&gt;.connection&lt;/code&gt; property of the &lt;code&gt;AccountsClient&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;AccountsClient&lt;/code&gt; 의 인스턴스화시 &lt;code&gt;options.connection&lt;/code&gt; 및 &lt;code&gt;options.ddpUrl&lt;/code&gt; 중 하나만 제공해야합니다 . 어느 쪽이 제공되는 경우, &lt;code&gt;Meteor.connection&lt;/code&gt; 는 로 사용됩니다 &lt;code&gt;.connection&lt;/code&gt; 의 의 특성 &lt;code&gt;AccountsClient&lt;/code&gt; 의 인스턴스입니다.</target>
        </trans-unit>
        <trans-unit id="a0f0dcbdd68beab03ea707f6b14cc2fecbf3f7f4" translate="yes" xml:space="preserve">
          <source>At the end of the flush cycle (i.e. after the computation is done re-running), the old subscription checks to see if it was re-used, and if not, sends a message to the server to tell the server to shut it down.</source>
          <target state="translated">플러시주기가 끝날 때 (예 : 계산이 다시 실행 된 후) 이전 구독은 재사용 여부를 확인하고, 그렇지 않은 경우 서버에 메시지를 보내 서버를 종료하도록합니다. .</target>
        </trans-unit>
        <trans-unit id="fa0ea99350074de42d36efe5a00b6e8073f89f33" translate="yes" xml:space="preserve">
          <source>At the heart of a View is an &lt;a href=&quot;https://docs.meteor.com/api/tracker.html#Tracker-autorun&quot;&gt;autorun&lt;/a&gt; that calls the View&amp;rsquo;s &lt;code&gt;renderFunction&lt;/code&gt;, uses the result to create DOM nodes, and replaces the contents of the View with these new DOM nodes. A View&amp;rsquo;s content may consist of any number of consecutive DOM nodes (though if it is zero, a placeholder node such as a comment or an empty text node is automatically supplied). Any reactive dependency established by &lt;code&gt;renderFunction&lt;/code&gt; causes a full recalculation of the View&amp;rsquo;s contents when the dependency is invalidated. Templates, however, are compiled in such a way that they do not have top-level dependencies and so will only ever render once, while their parts may re-render many times.</source>
          <target state="translated">뷰의 마음에서이다 &lt;a href=&quot;https://docs.meteor.com/api/tracker.html#Tracker-autorun&quot;&gt;자동 실행&lt;/a&gt; 보기의 호출 &lt;code&gt;renderFunction&lt;/code&gt; 를 , DOM 노드를 생성하는 결과를 사용하고, 새로운 DOM 노드와보기의 내용을 대체합니다. 뷰의 내용은 연속 된 여러 DOM 노드로 구성 될 수 있습니다 (0 인 경우 주석 또는 빈 텍스트 노드와 같은 자리 표시 자 노드가 자동으로 제공됨). &lt;code&gt;renderFunction&lt;/code&gt; 에 의해 설정된 모든 반응성 종속성 은 종속성이 무효화 될 때 View의 내용을 완전히 다시 계산합니다. 그러나 템플리트는 최상위 레벨 종속성이 없어서 한 번만 렌더링되는 방식으로 컴파일되며 파트는 여러 번 다시 렌더링 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b7d85c774b67e2afde5ed2f8faaa123cf3c4562a" translate="yes" xml:space="preserve">
          <source>Atmosphere dependencies</source>
          <target state="translated">분위기 의존성</target>
        </trans-unit>
        <trans-unit id="890930cc3418ec9e8beb72cd3c8b0987e5e99220" translate="yes" xml:space="preserve">
          <source>Atmosphere package namespacing</source>
          <target state="translated">분위기 패키지 이름 공간</target>
        </trans-unit>
        <trans-unit id="ca3efe41d393e7d27f7b43433ba3d5fd5dabd91d" translate="yes" xml:space="preserve">
          <source>Atmosphere packages are packages written specifically for Meteor and have several advantages over npm when used with Meteor. In particular, Atmosphere packages can:</source>
          <target state="translated">분위기 패키지는 Meteor 전용으로 작성된 패키지이며 Meteor와 함께 사용하면 npm보다 몇 가지 장점이 있습니다. 특히 Atmosphere 패키지는 다음을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="22276f2c629370e2c0cefe00383deefd62e8014a" translate="yes" xml:space="preserve">
          <source>Atmosphere packages can include &lt;a href=&quot;http://cordova.apache.org/plugins/&quot;&gt;Cordova plugins&lt;/a&gt; to ship native code for the Meteor mobile app container. This way, you can interact with the native camera interface, use the gyroscope, save files locally, and more.</source>
          <target state="translated">분위기 패키지에는 Meteor 모바일 앱 컨테이너의 기본 코드를 제공하는 &lt;a href=&quot;http://cordova.apache.org/plugins/&quot;&gt;Cordova 플러그인&lt;/a&gt; 이 포함될 수 있습니다 . 이렇게하면 기본 카메라 인터페이스와 상호 작용하고 자이로 스코프를 사용하고 로컬로 파일을 저장할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="469c347ee22dac48ab36e39577fd891ca12fc435" translate="yes" xml:space="preserve">
          <source>Atmosphere packages can ship with contained &lt;a href=&quot;https://guide.meteor.com/writing-packages.html#npm-dependencies&quot;&gt;npm dependencies&lt;/a&gt;, in which case you don&amp;rsquo;t need to do anything to make them work. However, some Atmosphere packages will expect that you have installed certain &amp;ldquo;peer&amp;rdquo; npm dependencies in your application.</source>
          <target state="translated">Atmosphere 패키지는 포함 된 &lt;a href=&quot;https://guide.meteor.com/writing-packages.html#npm-dependencies&quot;&gt;npm 종속성&lt;/a&gt; 과 함께 제공 될 수 있으며 ,이 경우 작동하도록 별도의 작업을 수행 할 필요가 없습니다. 그러나 일부 Atmosphere 패키지는 애플리케이션에 특정 &quot;피어&quot;npm 종속성을 설치했을 것으로 예상합니다.</target>
        </trans-unit>
        <trans-unit id="676295e8feb718dee7e03a8aab36db86db0fa2f0" translate="yes" xml:space="preserve">
          <source>Atmosphere vs. npm</source>
          <target state="translated">분위기 대 npm</target>
        </trans-unit>
        <trans-unit id="41dded417052424bdcf3c39f6c8664147fae6806" translate="yes" xml:space="preserve">
          <source>Atom</source>
          <target state="translated">Atom</target>
        </trans-unit>
        <trans-unit id="6bdf00d93745093129a4b32124e7ba749db63f8a" translate="yes" xml:space="preserve">
          <source>Attach functions to the instance</source>
          <target state="translated">인스턴스에 함수 첨부</target>
        </trans-unit>
        <trans-unit id="a3a2bf9c9266df67002e20b8feaf98a735e52c0b" translate="yes" xml:space="preserve">
          <source>Attempts to bring you to the latest version of Meteor, and then to upgrade your packages to their latest versions. By default, update will not break compatibility.</source>
          <target state="translated">최신 버전의 Meteor로 이동 한 다음 패키지를 최신 버전으로 업그레이드하려고합니다. 기본적으로 업데이트는 호환성을 손상시키지 않습니다.</target>
        </trans-unit>
        <trans-unit id="28d4a3eea8bfa5c23fba97140601bdacecdac47a" translate="yes" xml:space="preserve">
          <source>Attribute Helpers</source>
          <target state="translated">속성 헬퍼</target>
        </trans-unit>
        <trans-unit id="ffa507f2e416879e4f6b70d1e5d9df3ae74dab15" translate="yes" xml:space="preserve">
          <source>Attribute helpers</source>
          <target state="translated">속성 헬퍼</target>
        </trans-unit>
        <trans-unit id="219c5ddac0f9f308a33459aa0065d03b0745b4d0" translate="yes" xml:space="preserve">
          <source>Attributes from dynamic attribute tags are combined from left to right, after normal attributes, with later attribute values overwriting previous ones. Multiple values for the same attribute are not merged in any way, so if &lt;code&gt;attrs1&lt;/code&gt; specifies a value for the &lt;code&gt;class&lt;/code&gt; attribute, it will overwrite &lt;code&gt;{{myClass}}&lt;/code&gt;. As always, Spacebars takes care of recalculating the element&amp;rsquo;s attributes if any of &lt;code&gt;myClass&lt;/code&gt;, &lt;code&gt;attrs1&lt;/code&gt;, or &lt;code&gt;attrs2&lt;/code&gt; changes reactively.</source>
          <target state="translated">동적 속성 태그의 속성은 일반 속성 다음에 왼쪽에서 오른쪽으로 결합되며 이후의 속성 값은 이전 속성을 덮어 씁니다. 동일한 속성의 여러 값은 어떤 방식으로도 병합되지 않으므로 &lt;code&gt;attrs1&lt;/code&gt; 이 &lt;code&gt;class&lt;/code&gt; 속성 의 값을 지정하면 &lt;code&gt;{{myClass}}&lt;/code&gt; 를 겹쳐 씁니다 . 항상 그렇듯이 스페이스 바는 &lt;code&gt;myClass&lt;/code&gt; , &lt;code&gt;attrs1&lt;/code&gt; 또는 &lt;code&gt;attrs2&lt;/code&gt; 중 하나 가 반응 적으로 변경 되면 요소의 속성을 다시 계산합니다 .</target>
        </trans-unit>
        <trans-unit id="13d954cdceae57b14d2e483f121bdc910ef82e18" translate="yes" xml:space="preserve">
          <source>Automated testing is critical because it allows you to run a far greater set of tests much more often than you could manually, allowing you to catch regression errors immediately.</source>
          <target state="translated">자동 테스트는 수동보다 훨씬 더 많은 테스트를 자주 실행할 수 있으므로 회귀 오류를 즉시 포착 할 수 있기 때문에 중요합니다.</target>
        </trans-unit>
        <trans-unit id="273fea8ed91e271c435ba5e66231c17f1682055d" translate="yes" xml:space="preserve">
          <source>Automatic error checking</source>
          <target state="translated">자동 오류 점검</target>
        </trans-unit>
        <trans-unit id="9770213201ed0b51211dffa83da5db9d26147eb2" translate="yes" xml:space="preserve">
          <source>Available functions are:</source>
          <target state="translated">사용 가능한 기능은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8efa8e08e608693674a8f108ff557784e8515381" translate="yes" xml:space="preserve">
          <source>Avoid allow/deny</source>
          <target state="translated">허용 / 거부</target>
        </trans-unit>
        <trans-unit id="a792fa4821933ee58fa6ced67a2035e27e2bae7e" translate="yes" xml:space="preserve">
          <source>Avoid calling the server-side Method if the client-side validation failed, so we don&amp;rsquo;t waste server resources.</source>
          <target state="translated">클라이언트 측 유효성 검사에 실패한 경우 서버 측 메서드를 호출하지 마십시오. 따라서 서버 리소스를 낭비하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e154105509ed638e4be964b02c34afb8c19ffb4f" translate="yes" xml:space="preserve">
          <source>BIND_IP</source>
          <target state="translated">BIND_IP</target>
        </trans-unit>
        <trans-unit id="0b0bdb3ac128781c08d52532a584c524abde585f" translate="yes" xml:space="preserve">
          <source>Babel (for syntax highlighting &amp;ndash; &lt;a href=&quot;https://github.com/babel/babel-sublime#installation&quot;&gt;full instructions&lt;/a&gt;)</source>
          <target state="translated">바벨 (구문 강조 표시 &amp;ndash; &lt;a href=&quot;https://github.com/babel/babel-sublime#installation&quot;&gt;전체 지침&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="d2e6fb31e2e71948571239e1b59de6545826cc54" translate="yes" xml:space="preserve">
          <source>Basic Method</source>
          <target state="translated">기본 방법</target>
        </trans-unit>
        <trans-unit id="953657b3d60232a538f74887fa8b6a3c3c1d63ab" translate="yes" xml:space="preserve">
          <source>Basic syntax</source>
          <target state="translated">기본 문법</target>
        </trans-unit>
        <trans-unit id="df59c37567d452b3df15811a05347add631d792a" translate="yes" xml:space="preserve">
          <source>Be warned however, that although the core plugins are generally well maintained and up to date with the rest of Cordova, the quality of third-party plugins can be a bit of a gamble. You also have to make sure the plugin you want to use is &lt;a href=&quot;#plugin-compatibility&quot;&gt;compatible with the Cordova platform versions Meteor bundles&lt;/a&gt;.</source>
          <target state="translated">그러나 핵심 플러그인이 일반적으로 잘 유지되고 나머지 Cordova의 최신 버전이지만 타사 플러그인의 품질은 약간의 도박 일 수 있습니다. 또한 사용하려는 플러그인이 &lt;a href=&quot;#plugin-compatibility&quot;&gt;Cordova 플랫폼 버전 Meteor 번들과 호환&lt;/a&gt; 되는지 확인해야합니다 .</target>
        </trans-unit>
        <trans-unit id="5e198485ffc7f5bfc7055abf084c85ae24b58c35" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;Blaze.toHTML&lt;/code&gt; returns a string, it is not able to update the DOM in response to reactive data changes. Instead, any reactive data changes will invalidate the current Computation if there is one (for example, an autorun that is the caller of &lt;code&gt;Blaze.toHTML&lt;/code&gt;).</source>
          <target state="translated">때문에 &lt;code&gt;Blaze.toHTML&lt;/code&gt; 는 문자열을 반환, 반응 데이터 변경에 대한 응답으로 DOM을 업데이트 할 수 없습니다. 대신 반응 형 데이터 변경 사항이 있으면 현재 계산이 무효화됩니다 (예 : &lt;code&gt;Blaze.toHTML&lt;/code&gt; 호출자 인 자동 실행 ).</target>
        </trans-unit>
        <trans-unit id="a7c6ea44ced8c0c508edbdc8866cbfe8fa6848c0" translate="yes" xml:space="preserve">
          <source>Because Crosswalk bundles native code for Chromium, you will end up with APKs for both ARM and x86. You can find the generated APKs in the &lt;code&gt;&amp;lt;build-output-directory&amp;gt;/android/project/build/outputs/apk&lt;/code&gt; directory.</source>
          <target state="translated">Crosswalk는 Chromium 용 기본 코드를 번들로 제공하므로 ARM 및 x86 모두에 대한 APK가 제공됩니다. 생성 된 APK는 &lt;code&gt;&amp;lt;build-output-directory&amp;gt;/android/project/build/outputs/apk&lt;/code&gt; 디렉토리 에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="36597a39894449bf87dbf058f6bb39ff8e7c0002" translate="yes" xml:space="preserve">
          <source>Because a Cordova app is a web app, this means you use standard web elements to create your user interface instead of relying on platform-specific native UI components. Creating a good mobile user experience is an art in itself, but is fortunately helped by the availability of various frameworks and libraries.</source>
          <target state="translated">Cordova 앱은 웹 앱이므로 플랫폼 별 기본 UI 구성 요소에 의존하는 대신 표준 웹 요소를 사용하여 사용자 인터페이스를 만듭니다. 좋은 모바일 사용자 경험을 만드는 것은 그 자체로 예술이지만 다양한 프레임 워크와 라이브러리의 가용성으로 인해 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="16cb9372dbe0844bb6bf0a2dde71796b86b427da" translate="yes" xml:space="preserve">
          <source>Because installing plugins into a Cordova project already containing plugins can lead to indeterminate results, Meteor will remove and add back all plugins whenever a change to any of the plugins in your project is made.</source>
          <target state="translated">이미 플러그인이 포함 된 Cordova 프로젝트에 플러그인을 설치하면 결과가 불확실해질 수 있으므로 Meteor는 프로젝트의 플러그인을 변경할 때마다 모든 플러그인을 제거하고 다시 추가합니다.</target>
        </trans-unit>
        <trans-unit id="89a8287ce319e143911e1cf92a80ca9c2c261aaa" translate="yes" xml:space="preserve">
          <source>Because it&amp;rsquo;s a &lt;code&gt;Promise&lt;/code&gt;, there are a couple methods developers can use to dictate what will happen upon the availability of the dynamically loaded module:</source>
          <target state="translated">&lt;code&gt;Promise&lt;/code&gt; 이므로 개발자가 동적으로로드 된 모듈의 가용성에 어떤 일이 발생하는지 지시하는 데 사용할 수있는 몇 가지 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="af16a1c9c98456117d167a6f78040ea697541f04" translate="yes" xml:space="preserve">
          <source>Because the Cordova integration in Meteor does not serve your app from &lt;code&gt;file://&lt;/code&gt; URLs, access to local files through &lt;code&gt;file://&lt;/code&gt; URLs is not allowed either due to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy&quot;&gt;same-origin policy&lt;/a&gt;.</source>
          <target state="translated">Meteor의 Cordova 통합은 &lt;code&gt;file://&lt;/code&gt; URL 에서 앱을 제공하지 않기 때문에 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy&quot;&gt;동일한 출처 정책&lt;/a&gt; 으로 인해 &lt;code&gt;file://&lt;/code&gt; URL을 통한 로컬 파일 액세스가 허용되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="82d18fb9dfba6e82874786da637c709e06ccbc1b" translate="yes" xml:space="preserve">
          <source>Because there is a tight coupling between plugin versions and Cordova platform versions, you may encounter build time or runtime errors as a result of incompatible plugins. If this happens, you will have to install a different plugin version, or it may turn out a plugin is not (yet) compatible with the Cordova platform versions we bundle.</source>
          <target state="translated">플러그인 버전과 Cordova 플랫폼 버전간에 긴밀한 연결이 있으므로 호환되지 않는 플러그인으로 인해 빌드 시간 또는 런타임 오류가 발생할 수 있습니다. 이 경우 다른 플러그인 버전을 설치해야합니다. 그렇지 않으면 플러그인이 번들로 제공되는 Cordova 플랫폼 버전과 호환되지 않을 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="ab223a96e8304110f1a95d3feacd8f61319a39fd" translate="yes" xml:space="preserve">
          <source>Because you can only connect to your app after it has started up, you sometimes miss startup warnings and errors. You can invoke &lt;code&gt;location.reload()&lt;/code&gt; in the DevTools console to reload a running app, this time with the remote debugger connected.</source>
          <target state="translated">앱이 시작된 후에 만 ​​앱에 연결할 수 있으므로 시작 경고 및 오류가 누락되는 경우가 있습니다. DevTools 콘솔에서 &lt;code&gt;location.reload()&lt;/code&gt; 를 호출 하여 이번에는 원격 디버거가 연결된 상태에서 실행중인 앱을 다시로드 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="19d16d53495cd58544f6153ebdbd306568c1f121" translate="yes" xml:space="preserve">
          <source>Because you can only connect to your app after it has started up, you sometimes miss startup warnings and errors. You can invoke &lt;code&gt;location.reload()&lt;/code&gt; in the Web Inspector console to reload a running app, this time with the remote debugger connected.</source>
          <target state="translated">앱이 시작된 후에 만 ​​앱에 연결할 수 있으므로 시작 경고 및 오류가 누락되는 경우가 있습니다. Web Inspector 콘솔에서 &lt;code&gt;location.reload()&lt;/code&gt; 를 호출 하여 이번에는 원격 디버거가 연결된 상태에서 실행중인 앱을 다시로드 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0c6113b07d3d4eef759604eebb84fceb3d30ec31" translate="yes" xml:space="preserve">
          <source>Because your template has been rendered, you can use functions like &lt;a href=&quot;templates#Blaze-TemplateInstance-findAll&quot;&gt;&lt;code&gt;this.findAll&lt;/code&gt;&lt;/a&gt; which look at its DOM nodes.</source>
          <target state="translated">템플릿이 렌더링 &lt;a href=&quot;templates#Blaze-TemplateInstance-findAll&quot;&gt; &lt;code&gt;this.findAll&lt;/code&gt; &lt;/a&gt; DOM 노드를 보는 this.findAll 과 같은 함수를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5abec997d982467c6b36892bc76dde8b3a33a8f6" translate="yes" xml:space="preserve">
          <source>Before &lt;code&gt;observe&lt;/code&gt; returns, &lt;code&gt;added&lt;/code&gt; (or &lt;code&gt;addedAt&lt;/code&gt;) will be called zero or more times to deliver the initial results of the query.</source>
          <target state="translated">리턴을 &lt;code&gt;observe&lt;/code&gt; 하기 전에 , 쿼리의 초기 결과를 전달하기 위해 &lt;code&gt;added&lt;/code&gt; (또는 &lt;code&gt;addedAt&lt;/code&gt; )가 0 번 이상 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="a8d01123c94f4137460f621537cca27b552394ab" translate="yes" xml:space="preserve">
          <source>Before &lt;code&gt;observeChanges&lt;/code&gt; returns, &lt;code&gt;added&lt;/code&gt; (or &lt;code&gt;addedBefore&lt;/code&gt;) will be called zero or more times to deliver the initial results of the query.</source>
          <target state="translated">&lt;code&gt;observeChanges&lt;/code&gt; 가 리턴 하기 전에 , 쿼리의 초기 결과를 전달하기 위해 &lt;code&gt;added&lt;/code&gt; (또는 &lt;code&gt;addedBefore&lt;/code&gt; )가 0 번 이상 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="ea83a0240e17a73c7243dc5297ea57c2a0625086" translate="yes" xml:space="preserve">
          <source>Before Meteor 1.2, all email addresses and usernames in the database were considered to be case-sensitive. This meant that if you registered an account as &lt;code&gt;AdaLovelace@example.com&lt;/code&gt;, and then tried to log in with &lt;code&gt;adalovelace@example.com&lt;/code&gt;, you&amp;rsquo;d see an error indicating that no user with that email exists. Of course, this can be quite confusing, so we decided to improve things in Meteor 1.2. But the situation was not as simple as it seemed; since MongoDB doesn&amp;rsquo;t have a concept of case-insensitive indexes, it was impossible to guarantee unique emails at the database level. For this reason, we have some special APIs for querying and updating users which manage the case-sensitivity problem at the application level.</source>
          <target state="translated">Meteor 1.2 이전에는 데이터베이스의 모든 이메일 주소와 사용자 이름이 대소 문자를 구분하는 것으로 간주되었습니다. 이것은 당신이 같은 계정이 등록 된 경우 의미 &lt;code&gt;AdaLovelace@example.com&lt;/code&gt; 을 한 다음에 로그인을 시도 &lt;code&gt;adalovelace@example.com&lt;/code&gt; , 당신은 이메일 않고 사용자가 존재하지 않음을 나타내는 오류를 볼 것입니다. 물론 이것은 매우 혼란 스러울 수 있으므로 Meteor 1.2의 기능을 개선하기로 결정했습니다. 그러나 상황은 생각만큼 간단하지 않았다. MongoDB에는 대소 문자를 구분하지 않는 인덱스 개념이 없으므로 데이터베이스 수준에서 고유 한 이메일을 보장 할 수 없었습니다. 이러한 이유로 애플리케이션 수준에서 대소 문자 구분 문제를 관리하는 사용자를 쿼리하고 업데이트하기위한 특수 API가 있습니다.</target>
        </trans-unit>
        <trans-unit id="4b97e2efdb777988d22042bb6ba0cf3928ee1d81" translate="yes" xml:space="preserve">
          <source>Before Meteor 1.3, the contents of &lt;code&gt;node_modules&lt;/code&gt; directories in Meteor application code were completely ignored. When you enable &lt;code&gt;modules&lt;/code&gt;, those useless &lt;code&gt;node_modules&lt;/code&gt; directories suddenly become infinitely more useful:</source>
          <target state="translated">Meteor 1.3 이전 에는 Meteor 애플리케이션 코드에서 &lt;code&gt;node_modules&lt;/code&gt; 디렉토리 의 내용 이 완전히 무시되었습니다. &lt;code&gt;modules&lt;/code&gt; 을 활성화하면 쓸모없는 &lt;code&gt;node_modules&lt;/code&gt; 디렉토리가 갑자기 더 유용 해집니다.</target>
        </trans-unit>
        <trans-unit id="6740be49888ca023a2351923b69ddf19230c4e0d" translate="yes" xml:space="preserve">
          <source>Before Meteor 1.3, the order in which application files were evaluated was dictated by a set of rules described in the &lt;a href=&quot;http://guide.meteor.com/structure.html#load-order&quot;&gt;Application Structure - Default file load order&lt;/a&gt; section of the Meteor Guide. These rules could become frustrating when one file depended on a variable defined by another file, particularly when the first file was evaluated after the second file.</source>
          <target state="translated">Meteor 1.3 이전 에는 Meteor 안내서 의 &lt;a href=&quot;http://guide.meteor.com/structure.html#load-order&quot;&gt;응용 프로그램 구조-기본 파일로드 순서&lt;/a&gt; 섹션에 설명 된 규칙 세트에 따라 응용 프로그램 파일의 평가 순서가 결정되었습니다 . 한 파일이 다른 파일에 의해 정의 된 변수에 종속 될 때, 특히 첫 번째 파일이 두 번째 파일 이후에 평가 될 때 이러한 규칙은 실망 스러울 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fac9afefab23391468c447eb56ca2d2e2bfd0d21" translate="yes" xml:space="preserve">
          <source>Before running, each test sets up the data it needs using the &lt;code&gt;generateData&lt;/code&gt; helper (see &lt;a href=&quot;#creating-integration-test-data&quot;&gt;the section on creating integration test data&lt;/a&gt; for more detail) then goes to the homepage.</source>
          <target state="translated">실행하기 전에 각 테스트는 &lt;code&gt;generateData&lt;/code&gt; 헬퍼를 사용하여 필요한 데이터를 설정 한 다음 (자세한 내용 &lt;a href=&quot;#creating-integration-test-data&quot;&gt;은 통합 테스트 데이터 작성 섹션&lt;/a&gt; 참조 ) 홈페이지로 이동하십시오.</target>
        </trans-unit>
        <trans-unit id="75bd7ba492a966d7825a4e04a738e986549b97ca" translate="yes" xml:space="preserve">
          <source>Before submitting the APK(s) to the Play Store, you will need to sign the APK and run &lt;a href=&quot;http://developer.android.com/tools/help/zipalign.html&quot;&gt;&lt;code&gt;zipalign&lt;/code&gt;&lt;/a&gt; on it to optimize the archive.</source>
          <target state="translated">APK를 Play 스토어에 제출하기 전에 APK를 서명하고 &lt;a href=&quot;http://developer.android.com/tools/help/zipalign.html&quot;&gt; &lt;code&gt;zipalign&lt;/code&gt; &lt;/a&gt; 을 실행 하여 아카이브를 최적화해야합니다.</target>
        </trans-unit>
        <trans-unit id="58e76639e21d86a7cf0977025b282b4a338136b7" translate="yes" xml:space="preserve">
          <source>Before the release of Meteor 1.3, the only way to share values between files in an application was to assign them to global variables or communicate through shared variables like &lt;code&gt;Session&lt;/code&gt; (variables which, while not technically global, sure do feel syntactically identical to global variables). With the introduction of modules, one module can refer precisely to the exports of any other specific module, so global variables are no longer necessary.</source>
          <target state="translated">Meteor 1.3이 출시되기 전에 응용 프로그램에서 파일간에 값을 공유하는 유일한 방법은 전역 변수에 파일을 할당하거나 &lt;code&gt;Session&lt;/code&gt; 과 같은 공유 변수를 통해 통신 하는 것이 었습니다 (기술적으로 전역 적이지는 않지만 전역 변수와 구문 상 동일하게 느껴지는 변수). . 모듈을 도입하면 한 모듈이 다른 특정 모듈의 내보내기를 정확하게 참조 할 수 있으므로 전역 변수가 더 이상 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9cbad5e621b33b0133b0cff0287c9b2124625e64" translate="yes" xml:space="preserve">
          <source>Before we get into all of the different user-facing accounts functionality you can add with Meteor, let&amp;rsquo;s go over some of the features built into the Meteor DDP protocol and &lt;code&gt;accounts-base&lt;/code&gt; package. These are the parts of Meteor that you&amp;rsquo;ll definitely need to be aware of if you have any user accounts in your app; most of everything else is optional and added/removed via packages.</source>
          <target state="translated">Meteor로 추가 할 수있는 다양한 사용자 관련 계정 기능을 모두 사용하기 전에 Meteor DDP 프로토콜 및 &lt;code&gt;accounts-base&lt;/code&gt; 패키지에 내장 된 기능 중 일부를 살펴 보겠습니다 . 앱에 사용자 계정이있는 경우 반드시 알아야 할 Meteor의 일부입니다. 다른 모든 것들은 옵션이며 패키지를 통해 추가 / 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="842beb51ca9c5417a27f472386d0e0d52dcc074f" translate="yes" xml:space="preserve">
          <source>Before:</source>
          <target state="translated">Before:</target>
        </trans-unit>
        <trans-unit id="6ac7498757b80872595b31eee7c338943a0e13e5" translate="yes" xml:space="preserve">
          <source>Behaves like &lt;code&gt;Match.Maybe&lt;/code&gt; except it doesn&amp;rsquo;t accept &lt;code&gt;null&lt;/code&gt;. If used in an object, the behavior is identical to &lt;code&gt;Match.Maybe&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; 을 받아들이지 않는 것을 제외하고는 &lt;code&gt;Match.Maybe&lt;/code&gt; 처럼 동작합니다 . 객체에 사용 된 경우 동작은 &lt;code&gt;Match.Maybe&lt;/code&gt; 와 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="50a87cb1bb65133222bac100054495f307293e4d" translate="yes" xml:space="preserve">
          <source>Behavior tab</source>
          <target state="translated">동작 탭</target>
        </trans-unit>
        <trans-unit id="c621d5c41837954f6ad92f1eba8d0a32fee19d86" translate="yes" xml:space="preserve">
          <source>Behind every template or part of a template &amp;mdash; a template tag, say, like &lt;code&gt;{{foo}}&lt;/code&gt; or &lt;code&gt;{{#if}}&lt;/code&gt; &amp;mdash; is a View object, which is a reactively updating region of DOM.</source>
          <target state="translated">&lt;code&gt;{{foo}}&lt;/code&gt; 또는 &lt;code&gt;{{#if}}&lt;/code&gt; 와 같은 템플릿 태그 나 템플릿의 모든 템플릿 뒤에는 DOM의 반응 형 업데이트 영역 인 View 객체가 있습니다.</target>
        </trans-unit>
        <trans-unit id="7e22e62a2eb772a5a2dfa91a54daad5db9e5738d" translate="yes" xml:space="preserve">
          <source>Below, you can find directions for setting up automatic linting at many different stages of development. In general, you want to run the linter as often as possible, because it&amp;rsquo;s the fastest and easiest way to identify typos and small errors.</source>
          <target state="translated">아래에는 다양한 개발 단계에서 자동 보푸라기를 설정하는 방법이 나와 있습니다. 일반적으로 오타와 작은 오류를 식별하는 가장 빠르고 쉬운 방법이기 때문에 가능한 한 자주 린터를 실행하려고합니다.</target>
        </trans-unit>
        <trans-unit id="bef15881080061463a963904c9625933eea9ae5e" translate="yes" xml:space="preserve">
          <source>Benefits of Methods over REST</source>
          <target state="translated">REST보다 메소드의 이점</target>
        </trans-unit>
        <trans-unit id="3f8b8a37ae1c5b93ff031cc3135ac145e3d98c68" translate="yes" xml:space="preserve">
          <source>Benefits of consistent style</source>
          <target state="translated">일관된 스타일의 장점</target>
        </trans-unit>
        <trans-unit id="b992d752d113a14ecca7614618e053bfb0a9bba6" translate="yes" xml:space="preserve">
          <source>Besides the common input files&amp;rsquo; methods, these methods are available:</source>
          <target state="translated">일반적인 입력 파일 방법 외에도 다음 방법을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d86abe20dfc3d1589f94ab5935e4ac22c7d1f0bc" translate="yes" xml:space="preserve">
          <source>Besides the common methods available on the input files&amp;rsquo; class, the following methods are available:</source>
          <target state="translated">입력 파일 클래스에서 사용 가능한 공통 메소드 외에도 다음 메소드를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a443309dd65eff130e13fefdbbdb66f69b7ac9ba" translate="yes" xml:space="preserve">
          <source>Best practices for defining and calling Methods.</source>
          <target state="translated">메소드 정의 및 호출에 대한 우수 사례.</target>
        </trans-unit>
        <trans-unit id="60634b609eb279ed2091d0de9c92c92308e838ab" translate="yes" xml:space="preserve">
          <source>Best practices for writing reusable components in Blaze.</source>
          <target state="translated">Blaze에서 재사용 가능한 구성 요소를 작성하는 모범 사례.</target>
        </trans-unit>
        <trans-unit id="b1c0d0de6145c780477570f98babdd639892b221" translate="yes" xml:space="preserve">
          <source>Bind the application server to a specific network interface by IP address, for example: &lt;code&gt;BIND_IP=192.168.0.2&lt;/code&gt;.</source>
          <target state="translated">IP 주소를 사용하여 애플리케이션 서버를 특정 네트워크 인터페이스에 바인드하십시오 (예 : &lt;code&gt;BIND_IP=192.168.0.2&lt;/code&gt; ) .</target>
        </trans-unit>
        <trans-unit id="4795dfe49b46fcfdaeaaf8f45bb7b00dd86a774d" translate="yes" xml:space="preserve">
          <source>Binding (eg. from &lt;code&gt;{{#let}}&lt;/code&gt; or &lt;code&gt;{{#each in}}&lt;/code&gt;) in current scope</source>
          <target state="translated">현재 범위에서 바인딩 (예 : &lt;code&gt;{{#let}}&lt;/code&gt; 또는 &lt;code&gt;{{#each in}}&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="7ff440de8d23dfe665747a8cf3c9d62a3d1cf5ab" translate="yes" xml:space="preserve">
          <source>Blaze</source>
          <target state="translated">Blaze</target>
        </trans-unit>
        <trans-unit id="d45cb94b6e10b7908a86cad81aab3d11d5d94c8d" translate="yes" xml:space="preserve">
          <source>Blaze HTML templates</source>
          <target state="translated">Blaze HTML 템플릿</target>
        </trans-unit>
        <trans-unit id="91fdcf3e85ce36e991ac7da0bcc8282a2aa578ee" translate="yes" xml:space="preserve">
          <source>Blaze Jade templates</source>
          <target state="translated">Blaze Jade 템플릿</target>
        </trans-unit>
        <trans-unit id="1bb5b9cd15840a68e734293e214589091dfde2b7" translate="yes" xml:space="preserve">
          <source>Blaze Templates in React</source>
          <target state="translated">React의 Blaze 템플릿</target>
        </trans-unit>
        <trans-unit id="60ff3e4031329adb453c91bc106abe22c9c1ecae" translate="yes" xml:space="preserve">
          <source>Blaze and the build system</source>
          <target state="translated">블레이즈와 빌드 시스템</target>
        </trans-unit>
        <trans-unit id="ecfdf742a5c6737d05e274475b3257c1dbc7236a" translate="yes" xml:space="preserve">
          <source>Blaze has many full-stack Meteor packages on Atmosphere, such as &lt;a href=&quot;https://atmospherejs.com/useraccounts/core&quot;&gt;&lt;code&gt;useraccounts:core&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://atmospherejs.com/aldeed/autoform&quot;&gt;&lt;code&gt;aldeed:autoform&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Blaze는 &lt;a href=&quot;https://atmospherejs.com/useraccounts/core&quot;&gt; &lt;code&gt;useraccounts:core&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;https://atmospherejs.com/aldeed/autoform&quot;&gt; &lt;code&gt;aldeed:autoform&lt;/code&gt; &lt;/a&gt; 과 같은 여러 스택 형 Meteor 패키지를 Atmosphere에 있습니다.</target>
        </trans-unit>
        <trans-unit id="5756ad34518cb601adcdad483dbfc0fff1231b19" translate="yes" xml:space="preserve">
          <source>Blaze is Meteor&amp;rsquo;s built-in reactive rendering library. Usually, templates are written in &lt;a href=&quot;spacebars&quot;&gt;Spacebars&lt;/a&gt;, a variant of &lt;a href=&quot;http://handlebarsjs.com&quot;&gt;Handlebars&lt;/a&gt; designed to take advantage of &lt;a href=&quot;https://github.com/meteor/meteor/tree/devel/packages/tracker&quot;&gt;Tracker&lt;/a&gt;, Meteor&amp;rsquo;s reactivity system. These templates are compiled into JavaScript UI components that are rendered by the Blaze library.</source>
          <target state="translated">Blaze는 Meteor의 기본 제공 반응성 렌더링 라이브러리입니다. 일반적으로 템플릿은 Meteor의 반응성 시스템 인 &lt;a href=&quot;https://github.com/meteor/meteor/tree/devel/packages/tracker&quot;&gt;Tracker를&lt;/a&gt; 활용하도록 설계된 &lt;a href=&quot;http://handlebarsjs.com&quot;&gt;핸들 바&lt;/a&gt; 의 변형 인 &lt;a href=&quot;spacebars&quot;&gt;스페이스 바로&lt;/a&gt; 작성됩니다 . 이러한 템플릿은 Blaze 라이브러리에서 렌더링되는 JavaScript UI 구성 요소로 컴파일됩니다.</target>
        </trans-unit>
        <trans-unit id="cd77dff1adda67c3fe762d044cae8bad64e91482" translate="yes" xml:space="preserve">
          <source>Blaze is intentionally opaque about re-rendering. Tracker and Blaze are designed as &amp;ldquo;eventual consistency&amp;rdquo; systems that end up fully reflecting any data change eventually, but may take a few re-runs or re-renders in getting there, depending on how they are used. This can be frustrating if you are trying to carefully control when your component is re-rendered.</source>
          <target state="translated">Blaze는 다시 렌더링에 대해 의도적으로 불투명합니다. 트래커와 Blaze는 결국 데이터 변경 사항을 완전히 반영하는 &quot;최종 일관성&quot;시스템으로 설계되었지만 사용 방식에 따라 다시 실행하거나 다시 렌더링해야 할 수도 있습니다. 구성 요소를 다시 렌더링 할 때 신중하게 제어하려고하면 실망 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bd1fbe544f389fd851009ea10afc846cd309ac2d" translate="yes" xml:space="preserve">
          <source>Blaze is not required to build applications in Meteor&amp;mdash;you can also easily use &lt;a href=&quot;http://react-in-meteor.readthedocs.org/en/latest/&quot;&gt;React&lt;/a&gt; or &lt;a href=&quot;http://www.angular-meteor.com&quot;&gt;Angular&lt;/a&gt; to develop your UI. However, this particular article will take you through best practices in building an application in Blaze, which is used as the UI engine in all of the other articles.</source>
          <target state="translated">Meteor에서 응용 프로그램을 빌드하는 데 Blaze가 필요하지 않습니다. &lt;a href=&quot;http://react-in-meteor.readthedocs.org/en/latest/&quot;&gt;React&lt;/a&gt; 또는 &lt;a href=&quot;http://www.angular-meteor.com&quot;&gt;Angular&lt;/a&gt; 를 사용 하여 UI를 쉽게 개발할 수도 있습니다 . 그러나이 기사에서는 다른 모든 기사에서 UI 엔진으로 사용되는 Blaze에서 응용 프로그램을 빌드하는 모범 사례를 안내합니다.</target>
        </trans-unit>
        <trans-unit id="425ec09b6bb552a4fb67503d6cdf308dfeb201b7" translate="yes" xml:space="preserve">
          <source>Blaze is the package that makes reactive templates possible. You can use the Blaze API directly in order to render templates programmatically and manipulate &amp;ldquo;Views,&amp;rdquo; the building blocks of reactive templates.</source>
          <target state="translated">Blaze는 반응 형 템플릿을 가능하게하는 패키지입니다. Blaze API를 직접 사용하여 템플릿을 프로그래밍 방식으로 렌더링하고 반응 형 템플릿의 빌딩 블록 인 &quot;보기&quot;를 조작 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="97dee0caaeaf40c573bdb780ef00c8c61f9bf754" translate="yes" xml:space="preserve">
          <source>Blaze uses an easy-to-learn &lt;a href=&quot;http://handlebarsjs.com&quot;&gt;Handlebars&lt;/a&gt;-like template syntax, with logic like &lt;code&gt;{{#if}}&lt;/code&gt; and &lt;code&gt;{{#each}}&lt;/code&gt; interspersed in your HTML files. Template functions and CSS-selector events maps are written in JavaScript files.</source>
          <target state="translated">Blaze는 HTML 파일에 &lt;code&gt;{{#if}}&lt;/code&gt; 및 &lt;code&gt;{{#each}}&lt;/code&gt; 와 같은 논리 를 사용하여 배우기 쉬운 &lt;a href=&quot;http://handlebarsjs.com&quot;&gt;핸들&lt;/a&gt; 과 같은 템플릿 구문을 사용 합니다. 템플릿 함수 및 CSS 선택기 이벤트 맵은 JavaScript 파일로 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="838c68fde027c2f83949feb6ee52f859a5357c3b" translate="yes" xml:space="preserve">
          <source>Blaze.If()</source>
          <target state="translated">Blaze.If()</target>
        </trans-unit>
        <trans-unit id="625246c9abb3577aa0320a1da3a26bf812b04659" translate="yes" xml:space="preserve">
          <source>Blaze.TemplateInstance#$()</source>
          <target state="translated">Blaze.TemplateInstance#$()</target>
        </trans-unit>
        <trans-unit id="9364d700207f76c2b155f4f49cc6ee0434a15582" translate="yes" xml:space="preserve">
          <source>Blaze.TemplateInstance#autorun()</source>
          <target state="translated">Blaze.TemplateInstance#autorun()</target>
        </trans-unit>
        <trans-unit id="a53379fdf05039a364c4fa3f0841e67a5e3d386a" translate="yes" xml:space="preserve">
          <source>Blaze.TemplateInstance#data</source>
          <target state="translated">Blaze.TemplateInstance#data</target>
        </trans-unit>
        <trans-unit id="0a3a728401d7f78a35c1cb49428b842e99e735ea" translate="yes" xml:space="preserve">
          <source>Blaze.TemplateInstance#find()</source>
          <target state="translated">Blaze.TemplateInstance#find()</target>
        </trans-unit>
        <trans-unit id="779b5dc42b1a220a370335de2ab7bff411b5e9ea" translate="yes" xml:space="preserve">
          <source>Blaze.TemplateInstance#findAll()</source>
          <target state="translated">Blaze.TemplateInstance#findAll()</target>
        </trans-unit>
        <trans-unit id="a0873b99f95aa7cfa8d38cbf81496c7bde0bdeb5" translate="yes" xml:space="preserve">
          <source>Blaze.TemplateInstance#firstNode</source>
          <target state="translated">Blaze.TemplateInstance#firstNode</target>
        </trans-unit>
        <trans-unit id="e3ddbd680d8deb80510e226f056a08d37d806229" translate="yes" xml:space="preserve">
          <source>Blaze.TemplateInstance#lastNode</source>
          <target state="translated">Blaze.TemplateInstance#lastNode</target>
        </trans-unit>
        <trans-unit id="6b52a4652e81831bff752c94b5ce73846d0512a0" translate="yes" xml:space="preserve">
          <source>Blaze.TemplateInstance#subscribe()</source>
          <target state="translated">Blaze.TemplateInstance#subscribe()</target>
        </trans-unit>
        <trans-unit id="f1cfed4b381d93e9d50af7a276f64d329720c2a8" translate="yes" xml:space="preserve">
          <source>Blaze.TemplateInstance#view</source>
          <target state="translated">Blaze.TemplateInstance#view</target>
        </trans-unit>
        <trans-unit id="b8f3d75f343c38c102bfdb5a199a3f4b2dfc9be8" translate="yes" xml:space="preserve">
          <source>Block Helpers</source>
          <target state="translated">도우미 차단</target>
        </trans-unit>
        <trans-unit id="70af3238de42da66beb5f354425347f373dca837" translate="yes" xml:space="preserve">
          <source>Block Tags</source>
          <target state="translated">블록 태그</target>
        </trans-unit>
        <trans-unit id="d64197f2851ce58a8d3d271f23ed7fa0f9466463" translate="yes" xml:space="preserve">
          <source>Block tags can be used inside attribute values:</source>
          <target state="translated">블록 태그는 속성 값 내에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d2624e889e729d76da8196451c8457674f429ff2" translate="yes" xml:space="preserve">
          <source>Block tags invoke built-in directives or custom block helpers, passing a block of template content that may be instantiated once, more than once, or not at all by the directive or helper.</source>
          <target state="translated">블록 태그는 기본 지시문 또는 사용자 정의 블록 도우미를 호출하여 지시문 또는 도우미에 의해 한 번 또는 여러 번 인스턴스화되거나 전혀 인스턴스화되지 않을 수있는 템플릿 콘텐츠 블록을 전달합니다.</target>
        </trans-unit>
        <trans-unit id="0143f6c4f551090c3f8f3db84502f90effd159e0" translate="yes" xml:space="preserve">
          <source>Block tags may also specify &amp;ldquo;else&amp;rdquo; content, separated from the main content by the special template tag &lt;code&gt;{{else}}&lt;/code&gt;.</source>
          <target state="translated">블록 태그는 특수 템플릿 태그 &lt;code&gt;{{else}}&lt;/code&gt; 로 메인 컨텐츠와 분리 된 &quot;else&quot;컨텐츠를 지정할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e780c333333005f7389437be49392c0cdb34a2e3" translate="yes" xml:space="preserve">
          <source>Boolean variable. True if running in a Cordova mobile environment.</source>
          <target state="translated">부울 변수. Cordova 모바일 환경에서 실행중인 경우 true입니다.</target>
        </trans-unit>
        <trans-unit id="08524f87797312c593a230239177996812c0c3ae" translate="yes" xml:space="preserve">
          <source>Boolean variable. True if running in client environment.</source>
          <target state="translated">부울 변수. 클라이언트 환경에서 실행 중이면 참입니다.</target>
        </trans-unit>
        <trans-unit id="f27c1114c79b3aa9b4c780ac15975f3e7ad25cd3" translate="yes" xml:space="preserve">
          <source>Boolean variable. True if running in development environment.</source>
          <target state="translated">부울 변수. 개발 환경에서 실행중인 경우에 해당됩니다.</target>
        </trans-unit>
        <trans-unit id="274de0dcff958e1db418ac191608bf7783aa5a38" translate="yes" xml:space="preserve">
          <source>Boolean variable. True if running in production environment.</source>
          <target state="translated">부울 변수. 프로덕션 환경에서 실행중인 경우 true입니다.</target>
        </trans-unit>
        <trans-unit id="1999bda52cc1b0b140d5a576e2ca2531154b7a86" translate="yes" xml:space="preserve">
          <source>Boolean variable. True if running in server environment.</source>
          <target state="translated">부울 변수. 서버 환경에서 실행 중이면 참입니다.</target>
        </trans-unit>
        <trans-unit id="ffcac2828e683c1e9a794d34b30015b27ff273bb" translate="yes" xml:space="preserve">
          <source>Borrowing from the &lt;code&gt;tap:i18n&lt;/code&gt; example &lt;a href=&quot;#tap-i18n-js&quot;&gt;above&lt;/a&gt;, in &lt;code&gt;universe:i18n&lt;/code&gt; our &lt;code&gt;displayError&lt;/code&gt; function now looks like this:</source>
          <target state="translated">으로부터 차입 &lt;code&gt;tap:i18n&lt;/code&gt; 예를 들어 &lt;a href=&quot;#tap-i18n-js&quot;&gt;위의&lt;/a&gt; 에 &lt;code&gt;universe:i18n&lt;/code&gt; 우리 &lt;code&gt;displayError&lt;/code&gt; 의 기능은 이제 다음과 같습니다 :</target>
        </trans-unit>
        <trans-unit id="4d8b7b12b2d7fe17b26b912b94bccb9195122df1" translate="yes" xml:space="preserve">
          <source>Both HTTP and HTTPS protocols are supported. The &lt;code&gt;url&lt;/code&gt; argument must be an absolute URL including protocol and host name on the server, but may be relative to the current host on the client. The &lt;code&gt;query&lt;/code&gt; option replaces the query string of &lt;code&gt;url&lt;/code&gt;. Parameters specified in &lt;code&gt;params&lt;/code&gt; that are put in the URL are appended to any query string. For example, with a &lt;code&gt;url&lt;/code&gt; of &lt;code&gt;'/path?query'&lt;/code&gt; and &lt;code&gt;params&lt;/code&gt; of &lt;code&gt;{ foo: 'bar' }&lt;/code&gt;, the final URL will be &lt;code&gt;'/path?query&amp;amp;foo=bar'&lt;/code&gt;.</source>
          <target state="translated">HTTP 및 HTTPS 프로토콜이 모두 지원됩니다. &lt;code&gt;url&lt;/code&gt; 인수는 서버에서 프로토콜과 호스트 이름을 포함한 절대 URL해야하지만 클라이언트의 현재 호스트를 기준으로 할 수있다. &lt;code&gt;query&lt;/code&gt; 옵션의 쿼리 문자열 대체 &lt;code&gt;url&lt;/code&gt; . 에 지정된 매개 변수 &lt;code&gt;params&lt;/code&gt; URL에 넣어되는 모든 쿼리 문자열에 추가됩니다. 예를 들어 &lt;code&gt;url&lt;/code&gt; 이 &lt;code&gt;'/path?query'&lt;/code&gt; 이고 &lt;code&gt;params&lt;/code&gt; 가 &lt;code&gt;{ foo: 'bar' }&lt;/code&gt; 인 경우 최종 URL은 &lt;code&gt;'/path?query&amp;amp;foo=bar'&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="d3ef5f6a05ef42c44b65fa5c1b57d16ea6181323" translate="yes" xml:space="preserve">
          <source>Breaking schema changes</source>
          <target state="translated">주요 스키마 변경</target>
        </trans-unit>
        <trans-unit id="0d0417953fb6057cba10cb30f8314f4da0225229" translate="yes" xml:space="preserve">
          <source>Breakpoints can be set using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger&quot;&gt;&lt;code&gt;debugger&lt;/code&gt; keyword&lt;/a&gt;, or through the web UI of Node Inspector (&amp;ldquo;Sources&amp;rdquo; tab).</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger&quot;&gt; &lt;code&gt;debugger&lt;/code&gt; 키워드&lt;/a&gt; 를 사용하거나 Node Inspector의 웹 UI ( &quot;소스&quot;탭)를 통해 중단 점을 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7c6fc962f4fe9b56d99663612ad913e750bf7f04" translate="yes" xml:space="preserve">
          <source>Browsers limit the amount of data they will put in the application cache, which can vary due to factors such as how much disk space is free. Unfortunately if your application goes over the limit rather than disabling the application cache altogether and running the application online, the browser will instead fail that particular &lt;em&gt;update&lt;/em&gt; of the cache, leaving your users running old code.</source>
          <target state="translated">브라우저는 사용 가능한 디스크 공간과 같은 요인으로 인해 응용 프로그램 캐시에 넣을 데이터의 양을 제한합니다. 불행히도 응용 프로그램이 응용 프로그램 캐시를 모두 비활성화하고 응용 프로그램을 온라인으로 실행하지 않고 제한을 초과하면 브라우저가 캐시의 특정 &lt;em&gt;업데이트&lt;/em&gt; 에 실패 하여 사용자가 이전 코드를 실행하게합니다.</target>
        </trans-unit>
        <trans-unit id="4b0a504295dd4c0437c340122fc3cd55baede437" translate="yes" xml:space="preserve">
          <source>Buffers of binary data are represented by &lt;code&gt;Uint8Array&lt;/code&gt; instances on JavaScript platforms that support them. On implementations of JavaScript that do not support &lt;code&gt;Uint8Array&lt;/code&gt;, binary data buffers are represented by standard arrays containing numbers ranging from 0 to 255, and the &lt;code&gt;$Uint8ArrayPolyfill&lt;/code&gt; key set to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">이진 데이터의 버퍼는이 를 지원하는 JavaScript 플랫폼에서 &lt;code&gt;Uint8Array&lt;/code&gt; 인스턴스 로 표시됩니다 . &lt;code&gt;Uint8Array&lt;/code&gt; 를 지원하지 않는 JavaScript 구현 에서 2 진 데이터 버퍼는 0-255 범위의 숫자를 포함하는 표준 배열로 표시되며 &lt;code&gt;$Uint8ArrayPolyfill&lt;/code&gt; 키는 &lt;code&gt;true&lt;/code&gt; 로 설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="44aba47e1f8464da650aeb1c01be7d61818f7318" translate="yes" xml:space="preserve">
          <source>Build Plugin</source>
          <target state="translated">플러그인 빌드</target>
        </trans-unit>
        <trans-unit id="a3974624af347a31732593250527936c169a498d" translate="yes" xml:space="preserve">
          <source>Build Plugins API</source>
          <target state="translated">플러그인 API 빌드</target>
        </trans-unit>
        <trans-unit id="9f1ab2cb9af208e7f4ac2e0bbaeacdef61f17c98" translate="yes" xml:space="preserve">
          <source>Build System</source>
          <target state="translated">시스템 구축</target>
        </trans-unit>
        <trans-unit id="a3b684eb5589f8c2caadd59b2a2b8f57c78ba143" translate="yes" xml:space="preserve">
          <source>Build plugins</source>
          <target state="translated">플러그인 빌드</target>
        </trans-unit>
        <trans-unit id="3e9d7391bbcb1097ddb0ded32499e35c5adc1007" translate="yes" xml:space="preserve">
          <source>Build plugins are created with &lt;a href=&quot;#PackageNamespace-registerBuildPlugin&quot;&gt;&lt;code&gt;Package.registerBuildPlugin&lt;/code&gt;&lt;/a&gt;. See the coffeescript package for an example. Build plugins are fully-fledged Meteor programs in their own right and have their own namespace, package dependencies, source files and npm requirements.</source>
          <target state="translated">빌드 플러그인은 &lt;a href=&quot;#PackageNamespace-registerBuildPlugin&quot;&gt; &lt;code&gt;Package.registerBuildPlugin&lt;/code&gt; &lt;/a&gt; 으로 작성됩니다 . 예제는 coffeescript 패키지를 참조하십시오. 빌드 플러그인은 본격적인 Meteor 프로그램이며 자체 네임 스페이스, 패키지 종속성, 소스 파일 및 npm 요구 사항이 있습니다.</target>
        </trans-unit>
        <trans-unit id="9506a16b8fce2b1339fe0958fa2aac00e0777cc2" translate="yes" xml:space="preserve">
          <source>Build plugins fill the phases 2, 3 and 5.</source>
          <target state="translated">빌드 플러그인은 2, 3, 5 단계를 채 웁니다.</target>
        </trans-unit>
        <trans-unit id="5d2c2c9f4c5c25dcaff9e2050a29eabb1ebe8b57" translate="yes" xml:space="preserve">
          <source>Building an application completely from scratch is a tall order. This is one of the main reasons you might consider using Meteor in the first place - you can focus on writing the code that is specific to your app, instead of reinventing wheels like user login and data synchronization. To streamline your workflow even further, it makes sense to use community packages from &lt;a href=&quot;https://www.npmjs.com&quot;&gt;npm&lt;/a&gt; and &lt;a href=&quot;https://atmospherejs.com&quot;&gt;Atmosphere&lt;/a&gt;. Many of these packages are recommended in the guide, and you can find more in the online directories.</source>
          <target state="translated">처음부터 완전히 응용 프로그램을 작성하는 것은 어려운 일입니다. 이것이 처음에 Meteor를 사용하는 것을 고려할 수있는 주요 이유 중 하나입니다. 사용자 로그인 및 데이터 동기화와 같은 휠을 재창조하는 대신 앱 고유의 코드를 작성하는 데 집중할 수 있습니다. 워크 플로우를 더욱 간소화하려면 &lt;a href=&quot;https://www.npmjs.com&quot;&gt;npm&lt;/a&gt; 및 &lt;a href=&quot;https://atmospherejs.com&quot;&gt;Atmosphere의&lt;/a&gt; 커뮤니티 패키지를 사용하는 것이 좋습니다 . 이 패키지 중 다수는 안내서에서 권장되며 온라인 디렉토리에서 더 많은 것을 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7bfd6775ecfe873ad1d226b3eee9234c45eb9da4" translate="yes" xml:space="preserve">
          <source>Building for production</source>
          <target state="translated">생산을위한 건물</target>
        </trans-unit>
        <trans-unit id="a7aff2b12618ba350dd16857d4d8f4798a31963f" translate="yes" xml:space="preserve">
          <source>Built-in Block Helpers</source>
          <target state="translated">내장형 블록 헬퍼</target>
        </trans-unit>
        <trans-unit id="cd57ee36fd454b49e6a5d678ccac4189458b8c25" translate="yes" xml:space="preserve">
          <source>Bulk changes</source>
          <target state="translated">대량 변경</target>
        </trans-unit>
        <trans-unit id="36b8eb373cc4fa0e422e225c9b9076022a1243ac" translate="yes" xml:space="preserve">
          <source>Business logic an attacker could analyze to find weak points.</source>
          <target state="translated">공격자가 약점을 찾기 위해 분석 할 수있는 비즈니스 로직.</target>
        </trans-unit>
        <trans-unit id="fc0a52b8dd7d0ca53738b962731f18b0226287db" translate="yes" xml:space="preserve">
          <source>But if a modifier doesn&amp;rsquo;t contain any $-operators, then it is instead interpreted as a literal document, and completely replaces whatever was previously in the database. (Literal document modifiers are not currently supported by &lt;a href=&quot;#allow&quot;&gt;validated updates&lt;/a&gt;.)</source>
          <target state="translated">그러나 수정 자에 $ 연산자가 포함되어 있지 않으면 리터럴 문서로 해석되어 이전에 데이터베이스에 있던 것을 완전히 대체합니다. 현재 문서 &lt;a href=&quot;#allow&quot;&gt;업데이트&lt;/a&gt; 는 유효한 업데이트 에서 지원되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="9c8d728494cf932cb5426cefff8e9db24f416504" translate="yes" xml:space="preserve">
          <source>But if you do this, then you open yourself up to problems if another subscription pushes data into the same collection, since the data returned by &lt;code&gt;Lists.find()&lt;/code&gt; might not be what you expected anymore. In an actively developed application, it&amp;rsquo;s often hard to anticipate what may change in the future and this can be a source of hard to understand bugs.</source>
          <target state="translated">그러나이 작업을 수행하면 &lt;code&gt;Lists.find()&lt;/code&gt; 의해 반환 된 데이터 가 더 이상 예상하지 않을 수 있으므로 다른 구독이 동일한 컬렉션으로 데이터를 푸시하면 문제에 직면하게 됩니다. 활발하게 개발 된 응용 프로그램에서는 미래에 무엇이 변경 될지 예측하기가 어려우며 이는 이해하기 어려운 버그의 원천이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d47844f01b96f72704f852ec37dd4e806a3fafac" translate="yes" xml:space="preserve">
          <source>But they can also contain more complicated tests:</source>
          <target state="translated">그러나 더 복잡한 테스트도 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fb4779ea6afb0215db3cc86f51452b6a202125d0" translate="yes" xml:space="preserve">
          <source>By &lt;code&gt;await&lt;/code&gt;-ing in an asynchronous function</source>
          <target state="translated">저자 &lt;code&gt;await&lt;/code&gt; 비동기 함수 -ing</target>
        </trans-unit>
        <trans-unit id="b966e4091c177fb1a16f5e65983d989ea0763d16" translate="yes" xml:space="preserve">
          <source>By default the &lt;code&gt;profile&lt;/code&gt; option is added directly to the new user document. To override this behavior, use &lt;a href=&quot;#accounts_oncreateuser&quot;&gt;&lt;code&gt;Accounts.onCreateUser&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">기본적으로 &lt;code&gt;profile&lt;/code&gt; 옵션은 새 사용자 문서에 직접 추가됩니다. 이 동작을 무시하려면 &lt;a href=&quot;#accounts_oncreateuser&quot;&gt; &lt;code&gt;Accounts.onCreateUser&lt;/code&gt; 를&lt;/a&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="5106bb5601c7f77dcd68b2115e5fccd3081f7c8a" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;DDPRateLimiter&lt;/code&gt; is configured with a single rule. This rule limits login attempts, new user creation, and password resets to 5 attempts every 10 seconds per connection. It can be removed by calling &lt;code&gt;Accounts.removeDefaultRateLimit()&lt;/code&gt;.</source>
          <target state="translated">기본적으로 &lt;code&gt;DDPRateLimiter&lt;/code&gt; 는 단일 규칙으로 구성됩니다. 이 규칙은 로그인 시도, 새 사용자 작성 및 비밀번호 재설정을 연결 당 10 초마다 5 회로 제한합니다. &lt;code&gt;Accounts.removeDefaultRateLimit()&lt;/code&gt; 를 호출하여 제거 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="87062e92b3fc008f434d03091165f21d4522c4af" translate="yes" xml:space="preserve">
          <source>By default, Cordova apps in Meteor are only allowed access to &lt;code&gt;localhost&lt;/code&gt; (the device itself, to serve the app from) and the server your app connects to for data loading and hot code push (either an automatically detected IP address an explicitly configured mobile server domain). These restrictions also apply to loading files in iframes and to opening files in other apps (including the mobile browser).</source>
          <target state="translated">기본적으로 Meteor의 Cordova 앱은 &lt;code&gt;localhost&lt;/code&gt; (기기 자체, 앱을 제공하기위한) 및 데이터로드 및 핫 코드 푸시 (명확하게 구성된 모바일 서버에서 자동으로 감지 된 IP 주소)를 위해 앱에 연결하는 서버 에만 액세스 할 수 있습니다. 도메인). 이 제한 사항은 iframe에 파일을로드하고 다른 앱 (모바일 브라우저 포함)에서 파일을 여는 데에도 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="5e46c33dc0ea0ecfd499ad9b5c462c9517fda103" translate="yes" xml:space="preserve">
          <source>By default, Meteor automatically publishes every document in your collection to each connected client. To turn this behavior off, remove the &lt;code&gt;autopublish&lt;/code&gt; package, in your terminal:</source>
          <target state="translated">기본적으로 Meteor는 컬렉션의 모든 문서를 연결된 각 클라이언트에 자동으로 게시합니다. 이 동작을 끄 려면 터미널에서 &lt;code&gt;autopublish&lt;/code&gt; 패키지를 제거하십시오 .</target>
        </trans-unit>
        <trans-unit id="5156d8cbd47bd058acbc1ef9598c271ddc97b533" translate="yes" xml:space="preserve">
          <source>By default, an email address is added with &lt;code&gt;{ verified: false }&lt;/code&gt;. Use &lt;a href=&quot;#Accounts-sendVerificationEmail&quot;&gt;&lt;code&gt;Accounts.sendVerificationEmail&lt;/code&gt;&lt;/a&gt; to send an email with a link the user can use to verify their email address.</source>
          <target state="translated">기본적으로 이메일 주소는 &lt;code&gt;{ verified: false }&lt;/code&gt; 추가됩니다 . &lt;a href=&quot;#Accounts-sendVerificationEmail&quot;&gt; &lt;code&gt;Accounts.sendVerificationEmail&lt;/code&gt; &lt;/a&gt; 을 사용 하여 사용자가 이메일 주소를 확인하는 데 사용할 수있는 링크가 포함 된 이메일을 보내십시오.</target>
        </trans-unit>
        <trans-unit id="b8b727160fcc01ed3d353d41d60d4be0a6623d23" translate="yes" xml:space="preserve">
          <source>By default, any JavaScript files in your Meteor application folder are bundled and loaded on both the client and the server. However, the names of the files and directories inside your project can affect their load order, where they are loaded, and some other characteristics. Here is a list of file and directory names that are treated specially by Meteor:</source>
          <target state="translated">기본적으로 Meteor 응용 프로그램 폴더의 모든 JavaScript 파일은 클라이언트와 서버 모두에 번들로 제공됩니다. 그러나 프로젝트 내의 파일 및 디렉토리 이름은로드 순서,로드 위치 및 기타 특성에 영향을 줄 수 있습니다. 다음은 Meteor가 특별히 취급하는 파일 및 디렉토리 이름 목록입니다.</target>
        </trans-unit>
        <trans-unit id="b621f5caf8a282360327ccc1c28ad527353d7225" translate="yes" xml:space="preserve">
          <source>By default, clients open a connection to the server from which they&amp;rsquo;re loaded. When you call &lt;code&gt;Meteor.subscribe&lt;/code&gt;, &lt;code&gt;Meteor.status&lt;/code&gt;, &lt;code&gt;Meteor.call&lt;/code&gt;, and &lt;code&gt;Meteor.apply&lt;/code&gt;, you are using a connection back to that default server.</source>
          <target state="translated">기본적으로 클라이언트는로드 된 서버에 대한 연결을 엽니 다. &lt;code&gt;Meteor.subscribe&lt;/code&gt; , &lt;code&gt;Meteor.status&lt;/code&gt; , &lt;code&gt;Meteor.call&lt;/code&gt; 및 &lt;code&gt;Meteor.apply&lt;/code&gt; 를 호출하면 해당 기본 서버에 대한 연결을 다시 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="27262ec360298bde33308d96b74738296c7cf136" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;Accounts.createUser&lt;/code&gt; function provided by &lt;code&gt;accounts-password&lt;/code&gt; allows you to create an account with a username, email, or both. Most apps expect a specific combination of the two, so you will certainly want to validate the new user creation:</source>
          <target state="translated">기본적 으로 &lt;code&gt;accounts-password&lt;/code&gt; 에서 제공 하는 &lt;code&gt;Accounts.createUser&lt;/code&gt; 기능 을 사용하면 사용자 이름, 이메일 또는 둘 다를 사용하여 계정을 작성할 수 있습니다. 대부분의 앱은이 둘의 특정 조합을 기대하므로 새 사용자 생성을 확인해야합니다.</target>
        </trans-unit>
        <trans-unit id="4e8c12de07e1eb69d18782b4cba4294e4011b8af" translate="yes" xml:space="preserve">
          <source>By default, the current user&amp;rsquo;s &lt;code&gt;username&lt;/code&gt;, &lt;code&gt;emails&lt;/code&gt; and &lt;code&gt;profile&lt;/code&gt; are published to the client. You can publish additional fields for the current user with:</source>
          <target state="translated">기본적으로 현재 사용자의 &lt;code&gt;username&lt;/code&gt; , &lt;code&gt;emails&lt;/code&gt; 및 &lt;code&gt;profile&lt;/code&gt; 이 클라이언트에 게시됩니다. 다음을 사용하여 현재 사용자에 대한 추가 필드를 게시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9da1c3fcb172badf20168094172f32903f2dc169" translate="yes" xml:space="preserve">
          <source>By default, the startup timeout is set to 20 seconds. If your app needs more time to startup (or considerably less), you can use &lt;a href=&quot;http://docs.meteor.com/api/mobile-config.html#App-setPreference&quot;&gt;&lt;code&gt;App.setPreference&lt;/code&gt;&lt;/a&gt; to set &lt;code&gt;WebAppStartupTimeout&lt;/code&gt; to another value.</source>
          <target state="translated">기본적으로 시작 시간 제한은 20 초로 설정되어 있습니다. 앱을 시작하는 데 더 많은 시간이 필요하거나 더 적은 시간이 필요한 경우 &lt;a href=&quot;http://docs.meteor.com/api/mobile-config.html#App-setPreference&quot;&gt; &lt;code&gt;App.setPreference&lt;/code&gt; &lt;/a&gt; 를 사용 하여 &lt;code&gt;WebAppStartupTimeout&lt;/code&gt; 을 다른 값 으로 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a881f32d40d22ea6979b31588aaff1ed703a94d7" translate="yes" xml:space="preserve">
          <source>By default, there are rules added to the &lt;a href=&quot;#ddpratelimiter&quot;&gt;&lt;code&gt;DDPRateLimiter&lt;/code&gt;&lt;/a&gt; that rate limit logins, new user registration and password reset calls to a limit of 5 requests per 10 seconds per session. These are a basic solution to dictionary attacks where a malicious user attempts to guess the passwords of legitimate users by attempting all possible passwords.</source>
          <target state="translated">기본적으로 &lt;a href=&quot;#ddpratelimiter&quot;&gt; &lt;code&gt;DDPRateLimiter&lt;/code&gt; &lt;/a&gt; 에 제한 로그인, 새 사용자 등록 및 비밀번호 재설정 호출을 세션 당 10 초당 5 개의 요청으로 제한하는 규칙이 추가되었습니다 . 악의적 인 사용자가 가능한 모든 암호를 시도하여 합법적 인 사용자의 암호를 추측하려고하는 사전 공격에 대한 기본 솔루션입니다.</target>
        </trans-unit>
        <trans-unit id="22b59bf355dc1bd168a7b33b391cedbd3bb83850" translate="yes" xml:space="preserve">
          <source>By default, your application is bundled for your current architecture. This may cause difficulties if your app contains binary code due to, for example, npm packages. You can try to override that behavior with the &lt;code&gt;--architecture&lt;/code&gt; flag.</source>
          <target state="translated">기본적으로 응용 프로그램은 현재 아키텍처에 번들로 제공됩니다. 예를 들어 npm 패키지로 인해 앱에 이진 코드가 포함되어 있으면 문제가 발생할 수 있습니다. &lt;code&gt;--architecture&lt;/code&gt; 플래그를 사용하여 해당 동작을 무시할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="04c74d034cf76dbfcb12250c3adbde7b95758e51" translate="yes" xml:space="preserve">
          <source>By isolating a module and simply testing its internal functionality, we can write tests that are &lt;em&gt;fast&lt;/em&gt; and &lt;em&gt;accurate&lt;/em&gt;&amp;mdash;they can quickly tell you where a problem in your application lies. Note however that incomplete unit tests can often hide bugs because of the way they stub out dependencies. For that reason it&amp;rsquo;s useful to combine unit tests with slower (and perhaps less commonly run) integration and acceptance tests.</source>
          <target state="translated">모듈을 분리하고 단순히 내부 기능을 테스트함으로써, 우리는 시험을 쓸 수 있습니다 &lt;em&gt;신속&lt;/em&gt; 하고 &lt;em&gt;정확한&lt;/em&gt; 곳 - 그들은 신속하게 말할 수를 응용 프로그램 거짓말의 문제. 그러나 불완전한 단위 테스트는 종종 의존성을 제거하는 방식으로 인해 버그를 숨길 수 있습니다. 따라서 단위 테스트를 느리게 (아마도 덜 실행되는) 통합 및 승인 테스트와 결합하는 것이 유용합니다.</target>
        </trans-unit>
        <trans-unit id="efb1e9885db336e87ea04cd396d89752cf2fe3ec" translate="yes" xml:space="preserve">
          <source>By making the &lt;code&gt;blurringInput&lt;/code&gt; flexible and reusable, we can avoid re-implementing functionality in the &lt;code&gt;autocompleteInput&lt;/code&gt;.</source>
          <target state="translated">제작함으로써 &lt;code&gt;blurringInput&lt;/code&gt; 는 유연하고 재사용 우리는 재 시행 기능을 피할 수 &lt;code&gt;autocompleteInput&lt;/code&gt; 를 .</target>
        </trans-unit>
        <trans-unit id="67b6c4b8addee6f0bec9b64fdc066f75fd594e81" translate="yes" xml:space="preserve">
          <source>CDN</source>
          <target state="translated">CDN</target>
        </trans-unit>
        <trans-unit id="08dec90928cb6bd591cb3743478e47ca32878d94" translate="yes" xml:space="preserve">
          <source>CDNs and webfonts</source>
          <target state="translated">CDN 및 웹 폰트</target>
        </trans-unit>
        <trans-unit id="a84966ffb4bf321a67812b58d0d41b826341b6bd" translate="yes" xml:space="preserve">
          <source>CSS and CSS pre-processors</source>
          <target state="translated">CSS 및 CSS 전 처리기</target>
        </trans-unit>
        <trans-unit id="a6015c9189309fa31b429cde6c038394adde1ae0" translate="yes" xml:space="preserve">
          <source>CSS and HTML files outside special directories are loaded on the client only and cannot be used from server code.</source>
          <target state="translated">특수 디렉토리 외부의 CSS 및 HTML 파일은 클라이언트에만로드되며 서버 코드에서 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="f7f4b8938c6cd3068d488a0d2281b2f77830982d" translate="yes" xml:space="preserve">
          <source>CSS files in an Atmosphere package are declared with &lt;a href=&quot;http://docs.meteor.com/#/full/pack_addFiles&quot;&gt;&lt;code&gt;api.addFiles&lt;/code&gt;&lt;/a&gt;, and therefore will be eagerly evaluated, and automatically bundled with all the other CSS in your app.</source>
          <target state="translated">Atmosphere 패키지의 CSS 파일은 &lt;a href=&quot;http://docs.meteor.com/#/full/pack_addFiles&quot;&gt; &lt;code&gt;api.addFiles&lt;/code&gt; &lt;/a&gt; 로 선언 되므로 열심히 평가하여 앱의 다른 모든 CSS와 자동으로 번들됩니다.</target>
        </trans-unit>
        <trans-unit id="17f6734a316a66f8187de488fbfc9203ab910c5f" translate="yes" xml:space="preserve">
          <source>CSS files in an Atmosphere package are declared with &lt;code&gt;api.addFiles&lt;/code&gt;, and therefore will be eagerly evaluated by default, and then bundled with all the other CSS in your app.</source>
          <target state="translated">Atmosphere 패키지의 CSS 파일은 &lt;code&gt;api.addFiles&lt;/code&gt; 로 선언 되므로 기본적으로 열심히 평가 한 다음 앱의 다른 모든 CSS와 번들로 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="93a146322f97a68a65a24dcd8f21183ede60da28" translate="yes" xml:space="preserve">
          <source>CSS framework compatibility should be a primary concern when picking a pre-processor, because a framework written with Less won&amp;rsquo;t be compatible with one written in Sass.</source>
          <target state="translated">Less로 작성된 프레임 워크는 Sass로 작성된 프레임 워크와 호환되지 않으므로 전처리기를 선택할 때 CSS 프레임 워크 호환성이 주요 관심사입니다.</target>
        </trans-unit>
        <trans-unit id="6d81c0235995b1524b5cac530b8248e41da04144" translate="yes" xml:space="preserve">
          <source>Cache format</source>
          <target state="translated">캐시 형식</target>
        </trans-unit>
        <trans-unit id="60790f7c84170a8b87051d7e857118ffeb0465ee" translate="yes" xml:space="preserve">
          <source>Caching</source>
          <target state="translated">Caching</target>
        </trans-unit>
        <trans-unit id="d5841e55fa6cbcaedf3ecba8404a4141eb29f483" translate="yes" xml:space="preserve">
          <source>Caching Compiler</source>
          <target state="translated">캐싱 컴파일러</target>
        </trans-unit>
        <trans-unit id="6ac7c9b172e4fad468f51db89193f2766927b1fe" translate="yes" xml:space="preserve">
          <source>Call &lt;a href=&quot;#meteor_reconnect&quot;&gt;Meteor.reconnect&lt;/a&gt; to reestablish the connection and resume data transfer.</source>
          <target state="translated">연결을 다시 설정하고 데이터 전송을 재개하려면 &lt;a href=&quot;#meteor_reconnect&quot;&gt;Meteor.reconnect&lt;/a&gt; 를 호출 하십시오 .</target>
        </trans-unit>
        <trans-unit id="44b70be3d804410b46c10782fa34d2d69a18a35b" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;callback&lt;/code&gt; once for each matching document, sequentially and synchronously.</source>
          <target state="translated">일치하는 각 문서마다 순차적으로 동 기적으로 &lt;code&gt;callback&lt;/code&gt; 호출하십시오 .</target>
        </trans-unit>
        <trans-unit id="70f2f15eca33d5cb205b9f28af977d10386809ee" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;validateLoginAttempt&lt;/code&gt; with a callback to be called on login attempts. It returns an object with a single method, &lt;code&gt;stop&lt;/code&gt;. Calling &lt;code&gt;stop()&lt;/code&gt; unregisters the callback.</source>
          <target state="translated">로그인 시도시 콜백을 호출하여 &lt;code&gt;validateLoginAttempt&lt;/code&gt; 를 호출하십시오 . 단일 메소드 인 &lt;code&gt;stop&lt;/code&gt; 을 사용 하여 객체를 반환합니다 . &lt;code&gt;stop()&lt;/code&gt; 호출 하면 콜백이 등록 취소됩니다.</target>
        </trans-unit>
        <trans-unit id="2d356ef2157924e5a40b869f8da5dcc7358601cf" translate="yes" xml:space="preserve">
          <source>Call a function in the future after waiting for a specified delay.</source>
          <target state="translated">지정된 지연 시간을 기다린 후 나중에 함수를 호출하십시오.</target>
        </trans-unit>
        <trans-unit id="3618413f78cab70c8a558023725b9af1308160c4" translate="yes" xml:space="preserve">
          <source>Call a function repeatedly, with a time delay between calls.</source>
          <target state="translated">호출 사이의 시간 지연과 함께 함수를 반복해서 호출하십시오.</target>
        </trans-unit>
        <trans-unit id="ea4ea2432aa2799da7e13acb8eeb552e4935386f" translate="yes" xml:space="preserve">
          <source>Call inside a method invocation. Allow subsequent method from this client to begin running in a new fiber.</source>
          <target state="translated">메소드 호출 내부에서 호출하십시오. 이 클라이언트의 후속 메소드가 새 파이버에서 실행되도록 허용하십시오.</target>
        </trans-unit>
        <trans-unit id="a751a5aece1fabc787773badfe4851e8fd86fa43" translate="yes" xml:space="preserve">
          <source>Call inside the publish function. Informs the subscriber that a document has been added to the record set.</source>
          <target state="translated">게시 함수 내부를 호출하십시오. 가입자에게 문서가 레코드 세트에 추가되었음을 알립니다.</target>
        </trans-unit>
        <trans-unit id="8bcbbb115dddefdd02117fc94b644bace6315f13" translate="yes" xml:space="preserve">
          <source>Call inside the publish function. Informs the subscriber that a document has been removed from the record set.</source>
          <target state="translated">게시 함수 내부를 호출하십시오. 가입자에게 문서가 레코드 세트에서 제거되었음을 알립니다.</target>
        </trans-unit>
        <trans-unit id="25117b3073c4c95d44263d31e4d856a816ffee14" translate="yes" xml:space="preserve">
          <source>Call inside the publish function. Informs the subscriber that a document in the record set has been modified.</source>
          <target state="translated">게시 함수 내부를 호출하십시오. 레코드 세트의 문서가 수정되었음을 구독자에게 알립니다.</target>
        </trans-unit>
        <trans-unit id="8fbb8bb97c30e4dd5ae6a6689c01d5fcc6f5ad5a" translate="yes" xml:space="preserve">
          <source>Call inside the publish function. Informs the subscriber that an initial, complete snapshot of the record set has been sent. This will trigger a call on the client to the &lt;code&gt;onReady&lt;/code&gt; callback passed to &lt;a href=&quot;#meteor_subscribe&quot;&gt;&lt;code&gt;Meteor.subscribe&lt;/code&gt;&lt;/a&gt;, if any.</source>
          <target state="translated">게시 함수 내부를 호출하십시오. 레코드 세트의 초기 완전한 스냅 샷이 전송되었음을 가입자에게 알립니다. 그러면 클라이언트 에서 &lt;a href=&quot;#meteor_subscribe&quot;&gt; &lt;code&gt;Meteor.subscribe&lt;/code&gt; 로&lt;/a&gt; 전달 된 &lt;code&gt;onReady&lt;/code&gt; 콜백 에 대한 호출이 트리거됩니다 (있는 경우).</target>
        </trans-unit>
        <trans-unit id="0f236a1cac04cf0a5650c7f738b423c336faece3" translate="yes" xml:space="preserve">
          <source>Call inside the publish function. Registers a callback function to run when the subscription is stopped.</source>
          <target state="translated">게시 함수 내부를 호출하십시오. 구독이 중지 될 때 실행할 콜백 함수를 등록합니다.</target>
        </trans-unit>
        <trans-unit id="dbb7197d57a94b7dbcbe416bc253788ef05ef322" translate="yes" xml:space="preserve">
          <source>Call inside the publish function. Stops this client's subscription and invokes the client's &lt;code&gt;onStop&lt;/code&gt; callback with no error.</source>
          <target state="translated">게시 함수 내부를 호출하십시오. 이 클라이언트의 가입을 중지하고 오류없이 클라이언트의 &lt;code&gt;onStop&lt;/code&gt; 콜백을 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="06de9b9ebc48ead72b16c0923df843875315b3f7" translate="yes" xml:space="preserve">
          <source>Call inside the publish function. Stops this client's subscription, triggering a call on the client to the &lt;code&gt;onStop&lt;/code&gt; callback passed to &lt;a href=&quot;#meteor_subscribe&quot;&gt;&lt;code&gt;Meteor.subscribe&lt;/code&gt;&lt;/a&gt;, if any. If &lt;code&gt;error&lt;/code&gt; is not a &lt;a href=&quot;#meteor_error&quot;&gt;&lt;code&gt;Meteor.Error&lt;/code&gt;&lt;/a&gt;, it will be &lt;a href=&quot;#meteor_error&quot;&gt;sanitized&lt;/a&gt;.</source>
          <target state="translated">게시 함수 내부를 호출하십시오. 이 클라이언트의 구독을 중지하고 클라이언트에서 &lt;a href=&quot;#meteor_subscribe&quot;&gt; &lt;code&gt;Meteor.subscribe&lt;/code&gt; 로&lt;/a&gt; 전달 된 &lt;code&gt;onStop&lt;/code&gt; 콜백 에 대한 호출을 트리거합니다 (있는 경우). 경우 &lt;code&gt;error&lt;/code&gt; 하지 않은 것입니다 &lt;a href=&quot;#meteor_error&quot;&gt; &lt;code&gt;Meteor.Error&lt;/code&gt; &lt;/a&gt; , 그것은됩니다 &lt;a href=&quot;#meteor_error&quot;&gt;살균&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="01b8b2707adbfeaa0ac7d08a129c209852669afe" translate="yes" xml:space="preserve">
          <source>Call this function to change the currently logged-in user on the connection that made this method call. This simply sets the value of &lt;code&gt;userId&lt;/code&gt; for future method calls received on this connection. Pass &lt;code&gt;null&lt;/code&gt; to log out the connection.</source>
          <target state="translated">이 메소드를 호출 한 연결에서 현재 로그인 한 사용자를 변경하려면이 기능을 호출하십시오. 이것은 단순히이 연결에서 수신 된 향후 메소드 호출에 대한 &lt;code&gt;userId&lt;/code&gt; 값을 설정합니다 . 패스 &lt;code&gt;null&lt;/code&gt; 연결을 로그 아웃 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0f897e3f75f9fb5dff3acae332556e5367cb279e" translate="yes" xml:space="preserve">
          <source>Call this method to disconnect from the server and stop all live data updates. While the client is disconnected it will not receive updates to collections, method calls will be queued until the connection is reestablished, and hot code push will be disabled.</source>
          <target state="translated">이 메소드를 호출하여 서버와의 연결을 끊고 모든 라이브 데이터 업데이트를 중지하십시오. 클라이언트 연결이 끊어지면 컬렉션에 대한 업데이트가 수신되지 않고 연결이 다시 설정 될 때까지 메서드 호출이 대기하고 핫 코드 푸시가 비활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="44093a4da42021f66f73beea67ad68ecbee70690" translate="yes" xml:space="preserve">
          <source>Callback that is called when the request is completed. Required on the client.</source>
          <target state="translated">요청이 완료 될 때 호출되는 콜백입니다. 클라이언트에 필요합니다.</target>
        </trans-unit>
        <trans-unit id="b00d2aac358446214b673079d45e7c92745c588a" translate="yes" xml:space="preserve">
          <source>Callbacks added with this method are called before your template&amp;rsquo;s logic is evaluated for the first time. Inside a callback, &lt;code&gt;this&lt;/code&gt; is the new &lt;a href=&quot;#Template-instances&quot;&gt;template instance&lt;/a&gt; object. Properties you set on this object will be visible from the callbacks added with &lt;code&gt;onRendered&lt;/code&gt; and &lt;code&gt;onDestroyed&lt;/code&gt; methods and from event handlers.</source>
          <target state="translated">이 메소드로 추가 된 콜백은 템플릿의 논리가 처음으로 평가되기 전에 호출됩니다. 콜백 내에서 &lt;code&gt;this&lt;/code&gt; 새로운 &lt;a href=&quot;#Template-instances&quot;&gt;템플릿 인스턴스&lt;/a&gt; 객체입니다. 이 객체에 설정 한 속성은 &lt;code&gt;onRendered&lt;/code&gt; 및 &lt;code&gt;onDestroyed&lt;/code&gt; 메소드로 추가 된 콜백 과 이벤트 핸들러에서 볼 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6413b92f3589db16b7d7e81c831188c52c8a3859" translate="yes" xml:space="preserve">
          <source>Callbacks added with this method are called once when an instance of Template.&lt;em&gt;myTemplate&lt;/em&gt; is rendered into DOM nodes and put into the document for the first time.</source>
          <target state="translated">이 메소드로 추가 된 콜백은 템플릿 인스턴스 일 때 한 번 호출됩니다. &lt;em&gt;myTemplate&lt;/em&gt; 은 DOM 노드로 렌더링되어 처음으로 문서에 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="b8fda9c0aa14edaa3c99b485f25e2faccfc9fc11" translate="yes" xml:space="preserve">
          <source>Called whenever a login is attempted (either successful or unsuccessful). A login can be aborted by returning a falsy value or throwing an exception.</source>
          <target state="translated">로그인이 시도 될 때마다 (성공 또는 실패) 호출됩니다. 잘못된 값을 반환하거나 예외를 발생시켜 로그인을 중단 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="759f49acb2d8dc2eb20ca80bc123aff10abc01de" translate="yes" xml:space="preserve">
          <source>Called whenever a new user is created. Return the new user object, or throw an &lt;code&gt;Error&lt;/code&gt; to abort the creation.</source>
          <target state="translated">새로운 사용자가 생성 될 때마다 호출됩니다. 새 사용자 객체를 반환하거나 &lt;code&gt;Error&lt;/code&gt; 를 발생시켜 생성을 중단합니다.</target>
        </trans-unit>
        <trans-unit id="2c599ecf111ed4b6b085548d556e7965a946a2e9" translate="yes" xml:space="preserve">
          <source>Called whenever a new user is created. Takes the new user object, and returns true to allow the creation or false to abort.</source>
          <target state="translated">새로운 사용자가 생성 될 때마다 호출됩니다. 새로운 사용자 객체를 가져 와서 생성을 허용하려면 true를, 중단하려면 false를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="91f63fb778fbf778d23c69d5a31e985a9cacf308" translate="yes" xml:space="preserve">
          <source>Calling</source>
          <target state="translated">Calling</target>
        </trans-unit>
        <trans-unit id="a25dcc07948539fb7b93f4e64e93be7386595773" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;methods&lt;/code&gt; on the client defines &lt;em&gt;stub&lt;/em&gt; functions associated with server methods of the same name. You don&amp;rsquo;t have to define a stub for your method if you don&amp;rsquo;t want to. In that case, method calls are just like remote procedure calls in other systems, and you&amp;rsquo;ll have to wait for the results from the server.</source>
          <target state="translated">클라이언트에서 &lt;code&gt;methods&lt;/code&gt; 를 호출 하면 동일한 이름의 서버 메소드와 연관된 &lt;em&gt;스텁&lt;/em&gt; 함수가 정의 됩니다. 원하지 않는 경우 메소드에 대한 스텁을 정의 할 필요가 없습니다. 이 경우 메소드 호출은 다른 시스템의 원격 프로 시저 호출과 동일하므로 서버의 결과를 기다려야합니다.</target>
        </trans-unit>
        <trans-unit id="3e895dceee9c3ebf1e7fa5384228335a0cf20583" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;methods&lt;/code&gt; on the server defines functions that can be called remotely by clients. They should return an &lt;a href=&quot;#ejson&quot;&gt;EJSON&lt;/a&gt;-able value or throw an exception. Inside your method invocation, &lt;code&gt;this&lt;/code&gt; is bound to a method invocation object, which provides the following:</source>
          <target state="translated">서버에서 호출 &lt;code&gt;methods&lt;/code&gt; 는 클라이언트가 원격으로 호출 할 수있는 기능을 정의합니다. &lt;a href=&quot;#ejson&quot;&gt;EJSON 가능&lt;/a&gt; 값을 반환 하거나 예외를 발생 시켜야합니다 . 당신의 메소드 호출 내부, &lt;code&gt;this&lt;/code&gt; 다음을 제공하는 메소드 호출 객체에 바인딩 :</target>
        </trans-unit>
        <trans-unit id="83c163df00abba064e7630eb42d7c4f10fc0b258" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;this.autorun&lt;/code&gt; sets up a reactive context which will re-initialize the subscription whenever the reactive function &lt;code&gt;this.getListId()&lt;/code&gt; changes.</source>
          <target state="translated">&lt;code&gt;this.autorun&lt;/code&gt; 을 호출 하면 반응 함수 &lt;code&gt;this.getListId()&lt;/code&gt; 변경 될 때마다 구독을 다시 초기화하는 반응 컨텍스트가 설정 됩니다.</target>
        </trans-unit>
        <trans-unit id="3713bac8141dfd0326737b87fd03bf0aabf988b3" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;this.subscribe()&lt;/code&gt; (rather than &lt;code&gt;Meteor.subscribe&lt;/code&gt;), which attaches a special &lt;code&gt;subscriptionsReady()&lt;/code&gt; function to the template instance, which is true when all subscriptions made inside this template are ready.</source>
          <target state="translated">특별한 &lt;code&gt;subscriptionsReady()&lt;/code&gt; 함수를 템플리트 인스턴스에 첨부하는 &lt;code&gt;Meteor.subscribe&lt;/code&gt; &lt;code&gt;this.subscribe()&lt;/code&gt; ( Meteor.subscribe 대신 )를 호출 하면이 템플리트 내에서 작성된 모든 구독이 준비되면 참입니다.</target>
        </trans-unit>
        <trans-unit id="4a5d23d1c6d6168cec4f993ccda666e97b753723" translate="yes" xml:space="preserve">
          <source>Calling a Method from a form</source>
          <target state="translated">폼에서 메소드 호출</target>
        </trans-unit>
        <trans-unit id="d186f85b7ced45c2eecfb4eba041f2fe11cef341" translate="yes" xml:space="preserve">
          <source>Calling a Method from another Method</source>
          <target state="translated">다른 메소드에서 메소드 호출</target>
        </trans-unit>
        <trans-unit id="52cf538500f3c008630940db197aa2c752d37ef1" translate="yes" xml:space="preserve">
          <source>Calling helpers with arguments</source>
          <target state="translated">인수로 헬퍼 호출</target>
        </trans-unit>
        <trans-unit id="32ca778a91e8f62b4bf620335a3462423e1fb6de" translate="yes" xml:space="preserve">
          <source>Calling service API for more data</source>
          <target state="translated">더 많은 데이터를위한 서비스 API 호출</target>
        </trans-unit>
        <trans-unit id="e3b8fa9ab8692f0835d4fc0518df606254fa697a" translate="yes" xml:space="preserve">
          <source>Calling this function is analogous to declaring a model in a traditional ORM (Object-Relation Mapper)-centric framework. It sets up a &lt;em&gt;collection&lt;/em&gt; (a storage space for records, or &amp;ldquo;documents&amp;rdquo;) that can be used to store a particular type of information, like users, posts, scores, todo items, or whatever matters to your application. Each document is a EJSON object. It includes an &lt;code&gt;_id&lt;/code&gt; property whose value is unique in the collection, which Meteor will set when you first create the document.</source>
          <target state="translated">이 함수를 호출하는 것은 전통적인 ORM (Object-Relation Mapper) 중심 프레임 워크에서 모델을 선언하는 것과 유사합니다. 사용자, 게시물, 점수, 할 일 항목 또는 응용 프로그램에 중요한 정보와 같은 특정 유형의 정보를 저장하는 데 사용할 수 있는 &lt;em&gt;컬렉션&lt;/em&gt; (레코드 저장 공간 또는 &quot;문서&quot;)을 설정합니다. 각 문서는 EJSON 객체입니다. 컬렉션에서 값이 고유 한 &lt;code&gt;_id&lt;/code&gt; 속성을 포함하며 , 처음으로 문서를 만들 때 Meteor가 설정합니다.</target>
        </trans-unit>
        <trans-unit id="e4ce4c47cf8c05a56cf27c5033c8f5f0701dfdce" translate="yes" xml:space="preserve">
          <source>Calls &lt;a href=&quot;#meteor_loggingin&quot;&gt;Meteor.loggingIn()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#meteor_loggingin&quot;&gt;Meteor.loggingIn ()을&lt;/a&gt; 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="a41053254050022a97f5f8f91de5898fcf3f7b34" translate="yes" xml:space="preserve">
          <source>Calls &lt;a href=&quot;#meteor_user&quot;&gt;Meteor.user()&lt;/a&gt;. Use &lt;code&gt;{{#if currentUser}}&lt;/code&gt; to check whether the user is logged in.</source>
          <target state="translated">&lt;a href=&quot;#meteor_user&quot;&gt;Meteor.user ()를&lt;/a&gt; 호출합니다 . &lt;code&gt;{{#if currentUser}}&lt;/code&gt; 를 사용 하여 사용자가 로그인했는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="972868233a1c8e1a158b6026d72d6cc974406452" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;func&lt;/code&gt; when the View is rendered and inserted into the DOM, after waiting for the end of &lt;a href=&quot;https://docs.meteor.com/api/tracker.html#Tracker-afterFlush&quot;&gt;flush time&lt;/a&gt;. Does not fire if the View is destroyed at any point before it would fire. May fire multiple times (if the View re-renders). In &lt;code&gt;func&lt;/code&gt;, the View is bound to &lt;code&gt;this&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.meteor.com/api/tracker.html#Tracker-afterFlush&quot;&gt;플러시 시간&lt;/a&gt; 이 끝나기를 기다린 후 뷰가 렌더링되어 DOM에 삽입 될 때 &lt;code&gt;func&lt;/code&gt; 을 호출 합니다 . 뷰가 발사되기 전에 어느 시점에서라도 파괴되면 발사하지 않습니다. View가 다시 렌더링되는 경우 여러 번 발생할 수 있습니다. 에서 &lt;code&gt;func&lt;/code&gt; ,보기는에 바인딩 &lt;code&gt;this&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="355fc1521ea85087af5c15dfac01018a72ed857c" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;func&lt;/code&gt; with &lt;code&gt;Tracker.currentComputation&lt;/code&gt; temporarily set to &lt;code&gt;null&lt;/code&gt; and returns &lt;code&gt;func&lt;/code&gt;&amp;lsquo;s own return value. If &lt;code&gt;func&lt;/code&gt; accesses reactive data sources, these data sources will never cause a rerun of the enclosing computation.</source>
          <target state="translated">통화 &lt;code&gt;func&lt;/code&gt; 와 &lt;code&gt;Tracker.currentComputation&lt;/code&gt; 이 일시적으로 설정 &lt;code&gt;null&lt;/code&gt; 을 반환 &lt;code&gt;func&lt;/code&gt; 의 자신의 반환 값. &lt;code&gt;func&lt;/code&gt; 가 반응 형 데이터 소스에 액세스하는 경우 이러한 데이터 소스는 엔 클로징 계산을 다시 실행하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d7b33507b3618986e960f9d7f0e06f73996bb712" translate="yes" xml:space="preserve">
          <source>Calls the function &lt;em&gt;condition&lt;/em&gt; with the value as the argument. If &lt;em&gt;condition&lt;/em&gt; returns true, this matches. If &lt;em&gt;condition&lt;/em&gt; throws a &lt;code&gt;Match.Error&lt;/code&gt; or returns false, this fails. If &lt;em&gt;condition&lt;/em&gt; throws any other error, that error is thrown from the call to &lt;code&gt;check&lt;/code&gt; or &lt;code&gt;Match.test&lt;/code&gt;. Examples:</source>
          <target state="translated">값을 인수로 사용 하여 함수 &lt;em&gt;조건&lt;/em&gt; 을 호출합니다 . 경우 &lt;em&gt;조건이&lt;/em&gt; true를 반환이 일치. 경우 &lt;em&gt;조건이&lt;/em&gt; 발생 &lt;code&gt;Match.Error&lt;/code&gt; 또는 false를 반환을이 실패합니다. 경우 &lt;em&gt;조건이&lt;/em&gt; 다른 오류가 발생, 그 오류에 대한 호출에서 발생합니다 &lt;code&gt;check&lt;/code&gt; 또는 &lt;code&gt;Match.test&lt;/code&gt; . 예 :</target>
        </trans-unit>
        <trans-unit id="ebd33d67f25a75ad881749de04d2694337a74d14" translate="yes" xml:space="preserve">
          <source>Calls to &lt;a href=&quot;#accounts_createuser&quot;&gt;&lt;code&gt;createUser&lt;/code&gt;&lt;/a&gt; from the client will be rejected. In addition, if you are using &lt;a href=&quot;#accountsui&quot;&gt;accounts-ui&lt;/a&gt;, the &quot;Create account&quot; link will not be available.</source>
          <target state="translated">클라이언트에서 &lt;a href=&quot;#accounts_createuser&quot;&gt; &lt;code&gt;createUser&lt;/code&gt; &lt;/a&gt; 호출 은 거부됩니다. 또한 &lt;a href=&quot;#accountsui&quot;&gt;accounts-ui&lt;/a&gt; 를 사용하는 경우 &quot;계정 만들기&quot;링크를 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="72e22acae50ef25ddfe821608c4c176721bb4db5" translate="yes" xml:space="preserve">
          <source>Cancel a function call scheduled by &lt;code&gt;Meteor.setTimeout&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Meteor.setTimeout&lt;/code&gt; 으로 예약 된 함수 호출을 취소하십시오 .</target>
        </trans-unit>
        <trans-unit id="58c69ae93ab866a458cd5ecf58546ec317d4250d" translate="yes" xml:space="preserve">
          <source>Cancel a repeating function call scheduled by &lt;code&gt;Meteor.setInterval&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Meteor.setInterval&lt;/code&gt; 에 의해 예약 된 반복 함수 호출을 취소하십시오 .</target>
        </trans-unit>
        <trans-unit id="139ad8a41b0016097d15b025d9946f802a32532b" translate="yes" xml:space="preserve">
          <source>Cancel the subscription. This will typically result in the server directing the client to remove the subscription&amp;rsquo;s data from the client&amp;rsquo;s cache.</source>
          <target state="translated">구독을 취소하십시오. 이는 일반적으로 서버가 클라이언트에게 클라이언트의 캐시에서 구독 데이터를 제거하도록 지시합니다.</target>
        </trans-unit>
        <trans-unit id="d722e7f88f6d500fe392942026205c1c29fa8a06" translate="yes" xml:space="preserve">
          <source>Carefully Designed Client Side Router for Meteor.</source>
          <target state="translated">Meteor를 위해 신중하게 설계된 클라이언트 측 라우터.</target>
        </trans-unit>
        <trans-unit id="18e12fa75235bc54c83809e88cc2cdcd32cccd82" translate="yes" xml:space="preserve">
          <source>Carefully extended flow-router with waitOn and template context</source>
          <target state="translated">waitOn 및 템플릿 컨텍스트를 사용하여 신중하게 확장 된 흐름 라우터</target>
        </trans-unit>
        <trans-unit id="a5c2f31f12329b480874d41c2cb0a6bf9acc6f3c" translate="yes" xml:space="preserve">
          <source>Case sensitivity</source>
          <target state="translated">대소 문자 구분</target>
        </trans-unit>
        <trans-unit id="bd09a2aa3120e2567583f8bcfacaafd76be5024f" translate="yes" xml:space="preserve">
          <source>Catch-all for miscellaneous commands that require authorization to use.</source>
          <target state="translated">사용 권한이 필요한 기타 명령을 모두 포착하십시오.</target>
        </trans-unit>
        <trans-unit id="bcaa33a7ae44bd5042c37a9cdbea7f843b1cf7c8" translate="yes" xml:space="preserve">
          <source>Caveats</source>
          <target state="translated">Caveats</target>
        </trans-unit>
        <trans-unit id="651e78b7f0c78415e57ff7cd15c08d2dd23bd313" translate="yes" xml:space="preserve">
          <source>Chaining of Block Helpers</source>
          <target state="translated">블록 헬퍼의 체인</target>
        </trans-unit>
        <trans-unit id="856203aa2f27ce181319a9bba34f0864a2dab53b" translate="yes" xml:space="preserve">
          <source>Challenges of testing in Meteor</source>
          <target state="translated">Meteor에서의 테스트 과제</target>
        </trans-unit>
        <trans-unit id="202fece7ff7fb4f9be6423fd01ea00730cafe838" translate="yes" xml:space="preserve">
          <source>Chances are you also want to set &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; tags and other &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; content to make your site appear nicer in search results. The best way to do so is to use the &lt;a href=&quot;https://atmospherejs.com/kadira/dochead&quot;&gt;&lt;code&gt;kadira:dochead&lt;/code&gt;&lt;/a&gt; package. The sensible place to call out to &lt;code&gt;DocHead&lt;/code&gt; is from the &lt;code&gt;onCreated&lt;/code&gt; callbacks of your page-level components.</source>
          <target state="translated">기회는 당신도 설정할 수 있습니다 &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; 태그 및 기타 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 귀하의 사이트가 검색 결과에 더 좋은 것처럼 보이게하는 내용. 가장 좋은 방법은 &lt;a href=&quot;https://atmospherejs.com/kadira/dochead&quot;&gt; &lt;code&gt;kadira:dochead&lt;/code&gt; &lt;/a&gt; 패키지 를 사용하는 것 입니다. &lt;code&gt;DocHead&lt;/code&gt; 를 호출하는 적절한 장소 는 페이지 수준 구성 요소 의 &lt;code&gt;onCreated&lt;/code&gt; 콜백입니다.</target>
        </trans-unit>
        <trans-unit id="002745cee5b6b89e4e329c7c744b206048147993" translate="yes" xml:space="preserve">
          <source>Chances are your package will want to make use of other packages. To ensure they are available, you can declare dependencies. Atmosphere packages can depend both on other Atmosphere packages, as well as packages from npm.</source>
          <target state="translated">패키지가 다른 패키지를 사용하려고 할 가능성이 있습니다. 이들이 사용 가능하도록하기 위해 종속성을 선언 할 수 있습니다. Atmosphere 패키지는 npm의 패키지뿐만 아니라 다른 Atmosphere 패키지에 종속 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1a0247877d7c93e76babd10d5bd67176c1744989" translate="yes" xml:space="preserve">
          <source>Change a user's username. Use this instead of updating the database directly. The operation will fail if there is an existing user with a username only differing in case.</source>
          <target state="translated">사용자의 사용자 이름을 변경하십시오. 데이터베이스를 직접 업데이트하는 대신 이것을 사용하십시오. 경우에 따라 사용자 이름이 다른 기존 사용자가 있으면 작업이 실패합니다.</target>
        </trans-unit>
        <trans-unit id="221120c71aeae043cd7b893fdf0d11a5dc1fe548" translate="yes" xml:space="preserve">
          <source>Change the current user's password. Must be logged in.</source>
          <target state="translated">현재 사용자의 비밀번호를 변경하십시오. 로그인해야합니다.</target>
        </trans-unit>
        <trans-unit id="f4612cb3512308efd2f355bd5e6efa67fb45ebd6" translate="yes" xml:space="preserve">
          <source>Change tracking for Optimistic UI</source>
          <target state="translated">낙관적 UI에 대한 변경 내용 추적</target>
        </trans-unit>
        <trans-unit id="fe388c573f18530e9ce9618d14b573774074746e" translate="yes" xml:space="preserve">
          <source>Changing Routes</source>
          <target state="translated">노선 변경</target>
        </trans-unit>
        <trans-unit id="b5094078776e636a876b346418b0c7c1e5768565" translate="yes" xml:space="preserve">
          <source>Changing language</source>
          <target state="translated">언어 변경</target>
        </trans-unit>
        <trans-unit id="78500489dc7290053233cfe03b9b4a2b2430ca22" translate="yes" xml:space="preserve">
          <source>Changing page when logged out</source>
          <target state="translated">로그 아웃 할 때 페이지 변경</target>
        </trans-unit>
        <trans-unit id="4b5e84be0e45d1f4cc38276a4ec0e7fdea116bcf" translate="yes" xml:space="preserve">
          <source>Check</source>
          <target state="translated">Check</target>
        </trans-unit>
        <trans-unit id="be2e6073619118a4fb5dcb6c62f346f7872159ad" translate="yes" xml:space="preserve">
          <source>Check that a value matches a &lt;a href=&quot;#matchpatterns&quot;&gt;pattern&lt;/a&gt;. If the value does not match the pattern, throw a &lt;code&gt;Match.Error&lt;/code&gt;.</source>
          <target state="translated">값이 &lt;a href=&quot;#matchpatterns&quot;&gt;패턴&lt;/a&gt; 과 일치하는지 확인하십시오 . 값이 패턴과 일치하지 않으면 &lt;code&gt;Match.Error&lt;/code&gt; 를 발생시킵니다 .</target>
        </trans-unit>
        <trans-unit id="136b8f4333d780aa7946829ce5d3cfa82c75d660" translate="yes" xml:space="preserve">
          <source>Check the box to accept the license agreement, and select the correct download for your platform</source>
          <target state="translated">라이센스 계약에 동의하려면 상자를 선택하고 플랫폼에 맞는 올바른 다운로드를 선택하십시오.</target>
        </trans-unit>
        <trans-unit id="b65e0c2f78a008bff05193c57feb1f2e4916c78d" translate="yes" xml:space="preserve">
          <source>Check your code with ESLint</source>
          <target state="translated">ESLint로 코드 확인</target>
        </trans-unit>
        <trans-unit id="f487fdd5931e5d4b5b28de0bdefb3877f59894e1" translate="yes" xml:space="preserve">
          <source>Chimp has a variety of options for setting it up, but we can add some npm scripts which will run the currently tests we define in Chimp&amp;rsquo;s two main modes. We can add them to our &lt;code&gt;package.json&lt;/code&gt;:</source>
          <target state="translated">Chimp에는 설정을위한 다양한 옵션이 있지만, npm 스크립트를 추가하여 Chimp의 두 가지 주요 모드에서 정의한 현재 테스트를 실행할 수 있습니다. &lt;code&gt;package.json&lt;/code&gt; 에 추가 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="d4321a28a93f863267d3eed82d6e5c8af0ff1cae" translate="yes" xml:space="preserve">
          <source>Chimp requires node version 4 or 5. You can check your node version by running:</source>
          <target state="translated">Chimp에는 노드 버전 4 또는 5가 필요합니다. 다음을 실행하여 노드 버전을 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="721cfa87b207181ba93b1b2ddd979fd880ae52e8" translate="yes" xml:space="preserve">
          <source>Chimp will now look in the &lt;code&gt;tests/&lt;/code&gt; directory (otherwise ignored by the Meteor tool) for files in which you define acceptance tests. In the &lt;a href=&quot;https://github.com/meteor/todos&quot;&gt;Todos&lt;/a&gt; example app, we define a simple test that ensures we can click the &amp;ldquo;create list&amp;rdquo; button.</source>
          <target state="translated">Chimp는 이제 &lt;code&gt;tests/&lt;/code&gt; 디렉토리 (Meteor 도구에서 무시 됨)에서 승인 테스트를 정의한 파일을 찾습니다. 에서 &lt;a href=&quot;https://github.com/meteor/todos&quot;&gt;왜 그렇게&lt;/a&gt; 예제 응용 프로그램, 우리는 우리가 &quot;목록을 생성&quot;버튼을 클릭 할 것을 보장 간단한 테스트를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="7f7d551d7d137224943bb1abd04be81cace59b4f" translate="yes" xml:space="preserve">
          <source>Choose a template to include dynamically, by name.</source>
          <target state="translated">이름별로 동적으로 포함 할 템플릿을 선택하십시오.</target>
        </trans-unit>
        <trans-unit id="743a2d5609a7296d3d734c6e0b1f6d37a8c23170" translate="yes" xml:space="preserve">
          <source>CircleCI</source>
          <target state="translated">CircleCI</target>
        </trans-unit>
        <trans-unit id="ca168f4290290c81d67e372b10384764ad5f46f4" translate="yes" xml:space="preserve">
          <source>Click the Run button:</source>
          <target state="translated">실행 버튼을 클릭하십시오.</target>
        </trans-unit>
        <trans-unit id="1bdd79b12628d8c4ec4226ff4207341dcb869ab8" translate="yes" xml:space="preserve">
          <source>Client</source>
          <target state="translated">Client</target>
        </trans-unit>
        <trans-unit id="c03f071761a17bdd40e7eaa461f2bbf24b1a0883" translate="yes" xml:space="preserve">
          <source>Client example:</source>
          <target state="translated">클라이언트 예 :</target>
        </trans-unit>
        <trans-unit id="1e667dfcdaa0595e93cc7db4b91f2495a38212dc" translate="yes" xml:space="preserve">
          <source>Client only, optional callback. Called with no arguments on success, or with a single &lt;code&gt;Error&lt;/code&gt; argument on failure.</source>
          <target state="translated">클라이언트 전용, 선택적 콜백 성공시 인수가 없거나 실패시 단일 &lt;code&gt;Error&lt;/code&gt; 인수로 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="dcfa9e8a1bee95fd9dfdd56e3c0da9c0b6c8aafe" translate="yes" xml:space="preserve">
          <source>Client-side Routing</source>
          <target state="translated">클라이언트 측 라우팅</target>
        </trans-unit>
        <trans-unit id="bd78eaea1b1f7ab435a4f79ca9f14176130ea4c0" translate="yes" xml:space="preserve">
          <source>Client-side collections</source>
          <target state="translated">클라이언트 측 컬렉션</target>
        </trans-unit>
        <trans-unit id="8d9d9e8ccba5d4e1b7794bbdd7bbdfd0fb41bb8f" translate="yes" xml:space="preserve">
          <source>Client-side data with reactive stores</source>
          <target state="translated">반응 저장소가있는 클라이언트 측 데이터</target>
        </trans-unit>
        <trans-unit id="94b3cb40881ce0f8ebb90e991297d4c7e5802a7b" translate="yes" xml:space="preserve">
          <source>Close this DDP connection. The client is free to reconnect, but will receive a different connection with a new &lt;code&gt;id&lt;/code&gt; if it does.</source>
          <target state="translated">이 DDP 연결을 닫습니다. 클라이언트는 자유롭게 다시 연결할 수 있지만 새 &lt;code&gt;id&lt;/code&gt; 있으면 다른 연결을받습니다 .</target>
        </trans-unit>
        <trans-unit id="376da7a254a7a6761e7ef611190aaefe2dd0591a" translate="yes" xml:space="preserve">
          <source>Code Style</source>
          <target state="translated">코드 스타일</target>
        </trans-unit>
        <trans-unit id="33b97cca9aa797594543b570058a30710afec75b" translate="yes" xml:space="preserve">
          <source>Code that runs on the server can be trusted.</source>
          <target state="translated">서버에서 실행되는 코드를 신뢰할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="720c86d8765e68b79396c81bdec768d713ef9f0b" translate="yes" xml:space="preserve">
          <source>Coercing types - converting strings to numbers</source>
          <target state="translated">강제 유형-문자열을 숫자로 변환</target>
        </trans-unit>
        <trans-unit id="082a42c3704ee38739d3dd41511c5b78ea5ca8f3" translate="yes" xml:space="preserve">
          <source>CoffeeScript</source>
          <target state="translated">CoffeeScript</target>
        </trans-unit>
        <trans-unit id="d4f61f01e90103f4ac46961a3d961b8f3700da22" translate="yes" xml:space="preserve">
          <source>CoffeeScript &lt;code&gt;import&lt;/code&gt; syntax is nearly identical to the ES2015 syntax you see above:</source>
          <target state="translated">CoffeeScript &lt;code&gt;import&lt;/code&gt; 구문은 위에서 본 ES2015 구문과 거의 동일합니다.</target>
        </trans-unit>
        <trans-unit id="67faeae921099df3fac1045569dfca67adc63eff" translate="yes" xml:space="preserve">
          <source>CoffeeScript has been a first-class supported language since Meteor&amp;rsquo;s early days. Even though today we recommend ES2015, we still intend to support CoffeeScript fully.</source>
          <target state="translated">CoffeeScript는 Meteor 초기부터 최고의 지원 언어였습니다. 오늘날 ES2015를 권장하지만 CoffeeScript를 완전히 지원할 계획입니다.</target>
        </trans-unit>
        <trans-unit id="72f56bc09e4e34590b54d5534f2d1a90269bff7a" translate="yes" xml:space="preserve">
          <source>CoffeeScript is supported on both the client and the server. Files ending with &lt;code&gt;.coffee&lt;/code&gt;, &lt;code&gt;.litcoffee&lt;/code&gt;, or &lt;code&gt;.coffee.md&lt;/code&gt; are automatically compiled to JavaScript.</source>
          <target state="translated">CoffeeScript는 클라이언트와 서버 모두에서 지원됩니다. &lt;code&gt;.coffee&lt;/code&gt; , &lt;code&gt;.litcoffee&lt;/code&gt; 또는 &lt;code&gt;.coffee.md&lt;/code&gt; 로 끝나는 파일 은 자동으로 JavaScript로 컴파일됩니다.</target>
        </trans-unit>
        <trans-unit id="ceb29c36da17e32b17e7b474786bca251e5f3836" translate="yes" xml:space="preserve">
          <source>Collect route information,</source>
          <target state="translated">노선 정보 수집</target>
        </trans-unit>
        <trans-unit id="669a6ad9f45266e612efa73c7935002fa8c4bb1c" translate="yes" xml:space="preserve">
          <source>Collection cursors are not query snapshots. If the database changes between calling &lt;code&gt;Collection.find&lt;/code&gt; and fetching the results of the cursor, or while fetching results from the cursor, those changes may or may not appear in the result set.</source>
          <target state="translated">컬렉션 커서는 쿼리 스냅 샷이 아닙니다. 데이터베이스가 &lt;code&gt;Collection.find&lt;/code&gt; 호출 과 커서 결과 페치 사이에서 변경 되거나 커서에서 결과를 페치하는 동안 변경 사항이 결과 세트에 표시되거나 표시되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ff250a568e1cbcf039fe7459a475468f3a89a3cd" translate="yes" xml:space="preserve">
          <source>Collection helpers</source>
          <target state="translated">수집 도우미</target>
        </trans-unit>
        <trans-unit id="4bbb632f02fd69807705c0179999c17d35c93b0f" translate="yes" xml:space="preserve">
          <source>Collections</source>
          <target state="translated">Collections</target>
        </trans-unit>
        <trans-unit id="dcfa8c6114f9361a6ecc704fcb6744eda1344b27" translate="yes" xml:space="preserve">
          <source>Collections and Schemas</source>
          <target state="translated">컬렉션과 스키마</target>
        </trans-unit>
        <trans-unit id="e402a86f4dd53fc59cceef27abfe2185068af3bf" translate="yes" xml:space="preserve">
          <source>Collections are a very convenient way of storing data on the client side. If you&amp;rsquo;re fetching data using something other than subscriptions, you can put it in a collection manually. Let&amp;rsquo;s look at an example where we have a complex algorithm for calculating average scores from a series of games for a number of players. We don&amp;rsquo;t want to use a publication to load this data because we want to control exactly when it runs, and don&amp;rsquo;t want the data to be cached automatically.</source>
          <target state="translated">컬렉션은 클라이언트쪽에 데이터를 저장하는 매우 편리한 방법입니다. 구독 이외의 것을 사용하여 데이터를 가져 오는 경우 수동으로 컬렉션에 넣을 수 있습니다. 여러 플레이어의 일련의 게임에서 평균 점수를 계산하기위한 복잡한 알고리즘이있는 예를 살펴 보겠습니다. 게시를 사용하여이 데이터를로드하는 것을 원하지 않습니다. 데이터가 실행될 때 정확히 제어하고 데이터가 자동으로 캐시되기를 원하지 않기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="75e9fd0879d20f5ea28ac9f6339f4edf160041cb" translate="yes" xml:space="preserve">
          <source>Collections should be named as a plural noun, in &lt;a href=&quot;https://en.wikipedia.org/wiki/PascalCase&quot;&gt;PascalCase&lt;/a&gt;. The name of the collection in the database (the first argument to the collection constructor) should be the same as the name of the JavaScript symbol.</source>
          <target state="translated">컬렉션은 &lt;a href=&quot;https://en.wikipedia.org/wiki/PascalCase&quot;&gt;PascalCase&lt;/a&gt; 에서 복수 명사로 명명되어야합니다 . 데이터베이스의 컬렉션 이름 (컬렉션 생성자에 대한 첫 번째 인수)은 JavaScript 심볼의 이름과 같아야합니다.</target>
        </trans-unit>
        <trans-unit id="1a6fb552c34ef6fa0d21739ee49d60806e344400" translate="yes" xml:space="preserve">
          <source>Colon-delimited list of local package directories to look in, outside your normal application structure, for example: &lt;code&gt;METEOR_PACKAGE_DIRS=&quot;/usr/local/my_packages/&quot;&lt;/code&gt;. Note that this used to be &lt;code&gt;PACKAGE_DIRS&lt;/code&gt; but was changed in Meteor 1.4.2.</source>
          <target state="translated">콜론으로 구분 된 일반 패키지 구조의 일반 애플리케이션 구조 외부에서 찾아야합니다 (예 : &lt;code&gt;METEOR_PACKAGE_DIRS=&quot;/usr/local/my_packages/&quot;&lt;/code&gt; . 예전에는 &lt;code&gt;PACKAGE_DIRS&lt;/code&gt; 였습니다. 였지만 Meteor 1.4.2에서 변경되었습니다.</target>
        </trans-unit>
        <trans-unit id="e351f98a592773ff09e281b3929f0ae3541cf152" translate="yes" xml:space="preserve">
          <source>Combines and minifies code</source>
          <target state="translated">코드 결합 및 축소</target>
        </trans-unit>
        <trans-unit id="59b0754344014d9d6347724f39bcacbaf47c2e7d" translate="yes" xml:space="preserve">
          <source>Command Line</source>
          <target state="translated">커맨드 라인</target>
        </trans-unit>
        <trans-unit id="f6fe35e209171bf42b301a97ecb399ad5a56cfaf" translate="yes" xml:space="preserve">
          <source>Command line</source>
          <target state="translated">커맨드 라인</target>
        </trans-unit>
        <trans-unit id="7a487a50a02c2aa3d82c78f98550fda48f40266d" translate="yes" xml:space="preserve">
          <source>Comment Tags</source>
          <target state="translated">댓글 태그</target>
        </trans-unit>
        <trans-unit id="4200b2af4f0154fc8da839c571749eabc6066cc6" translate="yes" xml:space="preserve">
          <source>Comment tags also come in a &amp;ldquo;block comment&amp;rdquo; form. Block comments may contain &lt;code&gt;{{&lt;/code&gt; and &lt;code&gt;}}&lt;/code&gt;:</source>
          <target state="translated">주석 태그는&amp;ldquo;블록 주석&amp;rdquo;형식으로도 제공됩니다. 블록 주석에는 &lt;code&gt;{{&lt;/code&gt; and &lt;code&gt;}}&lt;/code&gt; 가 포함될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7e37a090cbb51b23da54506f2c1a48ad24a0b9f5" translate="yes" xml:space="preserve">
          <source>Comment tags can be used wherever other template tags are allowed.</source>
          <target state="translated">다른 템플릿 태그가 허용되는 모든 위치에 주석 태그를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e802a089bf4853d1bd8b5725522ae5540c063949" translate="yes" xml:space="preserve">
          <source>Comment template tags begin with &lt;code&gt;{{!&lt;/code&gt; and can contain any characters except for &lt;code&gt;}}&lt;/code&gt;. Comments are removed upon compilation and never appear in the compiled template code or the generated HTML.</source>
          <target state="translated">주석 템플릿 태그는 &lt;code&gt;{{!&lt;/code&gt; &lt;code&gt;}}&lt;/code&gt; 을 제외한 모든 문자를 포함 할 수 있습니다 . 컴파일시 주석은 제거되며 컴파일 된 템플릿 코드 나 생성 된 HTML에는 나타나지 않습니다.</target>
        </trans-unit>
        <trans-unit id="377dd01e05316c6519d98a0022d6976f8e76be87" translate="yes" xml:space="preserve">
          <source>CommonJS</source>
          <target state="translated">CommonJS</target>
        </trans-unit>
        <trans-unit id="bfd58ee3a270f3a931009900e1008d549bbd7453" translate="yes" xml:space="preserve">
          <source>Community</source>
          <target state="translated">Community</target>
        </trans-unit>
        <trans-unit id="b34f90d76d96af2b2b4db7bb6ef129745a0ff3e8" translate="yes" xml:space="preserve">
          <source>Compare in key sensitive order, if supported by the JavaScript implementation. For example, &lt;code&gt;{a: 1, b: 2}&lt;/code&gt; is equal to &lt;code&gt;{b: 2, a: 1}&lt;/code&gt; only when &lt;code&gt;keyOrderSensitive&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;. The default is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">JavaScript 구현에서 지원되는 경우 키 구분 순서로 비교하십시오. 예를 들어, &lt;code&gt;keyOrderSensitive&lt;/code&gt; 가 &lt;code&gt;false&lt;/code&gt; 인 경우에만 &lt;code&gt;{a: 1, b: 2}&lt;/code&gt; 는 &lt;code&gt;{b: 2, a: 1}&lt;/code&gt; . 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다 입니다.</target>
        </trans-unit>
        <trans-unit id="080dcc14da806989156d3e164aba8f8435dee785" translate="yes" xml:space="preserve">
          <source>Compile the source files like CoffeeScript, ES2015, Less, or Templates to plain JavaScript and CSS.</source>
          <target state="translated">CoffeeScript, ES2015, Less 또는 Templates와 같은 소스 파일을 일반 JavaScript 및 CSS로 컴파일하십시오.</target>
        </trans-unit>
        <trans-unit id="c19d0256345d495a833e23f84597484c6e661449" translate="yes" xml:space="preserve">
          <source>Compiler plugin - compiles source files (LESS, CoffeeScript) into built output (JS, CSS, asset files, and HTML). Only one compiler plugin can handle a single file extension.</source>
          <target state="translated">컴파일러 플러그인-소스 파일 (LESS, CoffeeScript)을 빌드 된 출력 (JS, CSS, 자산 파일 및 HTML)으로 컴파일합니다. 하나의 컴파일러 플러그인 만 단일 파일 확장자를 처리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="e1be83a7756a5bb6c9b11d838efbdc2b010f2edd" translate="yes" xml:space="preserve">
          <source>Compilers</source>
          <target state="translated">Compilers</target>
        </trans-unit>
        <trans-unit id="749bc4320b93e86694979983f2b481543f85524a" translate="yes" xml:space="preserve">
          <source>Compilers are programs that take the source files and output JavaScript or CSS. They also can output parts of HTML that is added to the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag and static assets. Examples for the compiler plugins are: CoffeeScript, Babel.js, JSX compilers, Pug templating compiler and others.</source>
          <target state="translated">컴파일러는 소스 파일을 가져와 JavaScript 또는 CSS를 출력하는 프로그램입니다. 또한 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 태그 및 정적 자산에 추가 된 HTML 부분을 출력 할 수 있습니다. 컴파일러 플러그인의 예는 CoffeeScript, Babel.js, JSX 컴파일러, 퍼그 템플릿 컴파일러 및 기타입니다.</target>
        </trans-unit>
        <trans-unit id="2e2bec0051d11e5f8de6705735e078406d61e630" translate="yes" xml:space="preserve">
          <source>Compiles files with build plugins</source>
          <target state="translated">빌드 플러그인으로 파일 컴파일</target>
        </trans-unit>
        <trans-unit id="1145eb181bb02197b728270b846cee0cf26795af" translate="yes" xml:space="preserve">
          <source>Complete reference &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;여기에&lt;/a&gt; 완전한 참조 .</target>
        </trans-unit>
        <trans-unit id="c448f985269e6f3f38c575a546e99e4cf214aa99" translate="yes" xml:space="preserve">
          <source>Complete reference &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object&quot;&gt;여기에&lt;/a&gt; 완전한 참조 .</target>
        </trans-unit>
        <trans-unit id="024fc4d8e9d46298cd8abcca533cb670fa8b6ea8" translate="yes" xml:space="preserve">
          <source>Complete reference &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;여기에&lt;/a&gt; 완전한 참조 .</target>
        </trans-unit>
        <trans-unit id="2557ea94ebac824a62ade4c0fad08100bdbec090" translate="yes" xml:space="preserve">
          <source>Complex authorization</source>
          <target state="translated">복잡한 승인</target>
        </trans-unit>
        <trans-unit id="46bd0f418152fae5aabb6c96c32c47c40cbbf4f4" translate="yes" xml:space="preserve">
          <source>Components as pages</source>
          <target state="translated">페이지로 구성 요소</target>
        </trans-unit>
        <trans-unit id="47da6f0838f083d3a01f384d483b468a305c5a2c" translate="yes" xml:space="preserve">
          <source>Compose</source>
          <target state="translated">Compose</target>
        </trans-unit>
        <trans-unit id="ca5e00120498b815c12de59fd45e93f8086a8bfc" translate="yes" xml:space="preserve">
          <source>Composition</source>
          <target state="translated">Composition</target>
        </trans-unit>
        <trans-unit id="32f94bf424b44d11abb2ab4e0c9a7d67282df197" translate="yes" xml:space="preserve">
          <source>Concept: Attack surface</source>
          <target state="translated">개념 : 공격 표면</target>
        </trans-unit>
        <trans-unit id="4aba27fee30095472b5c8c06e3efeb1a366ab3e7" translate="yes" xml:space="preserve">
          <source>Conceptually, the only two things a Dependency can do are gain a dependent and change.</source>
          <target state="translated">개념적으로 의존성이 할 수있는 두 가지 일은 의존성과 변화를 얻는 것입니다.</target>
        </trans-unit>
        <trans-unit id="e00f7bc970cb26d42ebab8cd7c98f35560bf1ea7" translate="yes" xml:space="preserve">
          <source>Conditional imports</source>
          <target state="translated">조건부 수입</target>
        </trans-unit>
        <trans-unit id="233efd1cd2b8d3909db019b55e7e59a6ea22da70" translate="yes" xml:space="preserve">
          <source>Configure the behavior of &lt;a href=&quot;#accountsui&quot;&gt;&lt;code&gt;{{&amp;gt; loginButtons}}&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#accountsui&quot;&gt; &lt;code&gt;{{&amp;gt; loginButtons}}&lt;/code&gt; &lt;/a&gt; 의 동작을 구성하십시오 .</target>
        </trans-unit>
        <trans-unit id="0b6e15c47080ba1ee2dbc7666572d547bfc76ecf" translate="yes" xml:space="preserve">
          <source>Configuring OAuth</source>
          <target state="translated">OAuth 구성</target>
        </trans-unit>
        <trans-unit id="e5b848f4712c6d649b46f9256556ff0c3ccacf2b" translate="yes" xml:space="preserve">
          <source>Configuring Services</source>
          <target state="translated">서비스 구성</target>
        </trans-unit>
        <trans-unit id="79280c12e85c304f34d277a9cc3847683b24e0c1" translate="yes" xml:space="preserve">
          <source>Configuring your app</source>
          <target state="translated">앱 구성</target>
        </trans-unit>
        <trans-unit id="2b3b46e5c13b40325d3159d260105d6985927ec6" translate="yes" xml:space="preserve">
          <source>Configuring your server</source>
          <target state="translated">서버 구성</target>
        </trans-unit>
        <trans-unit id="a1efb4b38691a090e9c3ca81267ee3d839cd1f6b" translate="yes" xml:space="preserve">
          <source>Connect the device to a WiFi network that allows for communication with the server.</source>
          <target state="translated">서버와 통신 할 수있는 WiFi 네트워크에 장치를 연결하십시오.</target>
        </trans-unit>
        <trans-unit id="dad8ba68ace075637cb0c56dbafbd192ae4d34a4" translate="yes" xml:space="preserve">
          <source>Connect to the server of a different Meteor application to subscribe to its document sets and invoke its remote methods.</source>
          <target state="translated">다른 Meteor 애플리케이션의 서버에 연결하여 문서 세트를 구독하고 원격 메소드를 호출하십시오.</target>
        </trans-unit>
        <trans-unit id="9353137e70aea60618fd49f0efe74491a65dfc91" translate="yes" xml:space="preserve">
          <source>Connecting to the server</source>
          <target state="translated">서버에 연결</target>
        </trans-unit>
        <trans-unit id="8e1045d54948e1647de4048b971035cf144563d7" translate="yes" xml:space="preserve">
          <source>Connecting to your database</source>
          <target state="translated">데이터베이스에 연결</target>
        </trans-unit>
        <trans-unit id="723aeb02add5abef11633a71ed793b36afe4705c" translate="yes" xml:space="preserve">
          <source>Consider that if you are writing unit tests for your Methods, you would need to test all possible kinds of input to the Method; validating the arguments restricts the space of inputs you need to unit test, reducing the amount of code you need to write overall. It also has the extra bonus of being self-documenting; someone else can come along and read the code to find out what kinds of parameters a Method is looking for.</source>
          <target state="translated">분석법에 대한 단위 테스트를 작성하는 경우 분석법에 가능한 모든 유형의 입력을 테스트해야합니다. 인수를 검증하면 단위 테스트에 필요한 입력 공간이 제한되어 전체적으로 작성해야하는 코드의 양이 줄어 듭니다. 또한 자체 문서화의 추가 보너스가 있습니다. 다른 누군가가 와서 코드를 읽고 메소드가 찾고있는 매개 변수의 종류를 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5a6edaeb3a6e28578de4bb2a1a23f33afc4ceb58" translate="yes" xml:space="preserve">
          <source>Consider the following URL pattern, used in the code snippet above:</source>
          <target state="translated">위의 코드 스 니펫에 사용 된 다음 URL 패턴을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="f10b6b5bcc62a46b74592f4344b965f5216274f3" translate="yes" xml:space="preserve">
          <source>Consistent ID generation and optimistic UI</source>
          <target state="translated">일관된 ID 생성 및 낙관적 UI</target>
        </trans-unit>
        <trans-unit id="932d8ac803823978fbdcd35e534e47363328931c" translate="yes" xml:space="preserve">
          <source>Constructor for a Collection</source>
          <target state="translated">컬렉션의 생성자</target>
        </trans-unit>
        <trans-unit id="52ee66c4e6476dbd5b57d37ac0fef86ed0f87c66" translate="yes" xml:space="preserve">
          <source>Constructor for a ReactiveVar, which represents a single reactive variable.</source>
          <target state="translated">단일 반응성 변수를 나타내는 ReactiveVar의 생성자입니다.</target>
        </trans-unit>
        <trans-unit id="00d979369c8ac4537b2512a87cbfc8e3e29cd660" translate="yes" xml:space="preserve">
          <source>Constructor for a Template, which is used to construct Views with particular name and content.</source>
          <target state="translated">특정 이름과 내용으로 뷰를 구성하는 데 사용되는 템플릿의 생성자입니다.</target>
        </trans-unit>
        <trans-unit id="377e18ece59cc9d2321ce8b8616dde036b5e12dd" translate="yes" xml:space="preserve">
          <source>Constructor for a View, which represents a reactive region of DOM.</source>
          <target state="translated">DOM의 반응 영역을 나타내는 뷰의 생성자입니다.</target>
        </trans-unit>
        <trans-unit id="d0f917910ece6b40ffcc0ffcc847ac3775195c43" translate="yes" xml:space="preserve">
          <source>Constructor for the &lt;code&gt;Accounts&lt;/code&gt; namespace on the server.</source>
          <target state="translated">서버 에서 &lt;code&gt;Accounts&lt;/code&gt; 네임 스페이스의 생성자</target>
        </trans-unit>
        <trans-unit id="a9d4a1525d591e95e8386f7176a28b174bb99765" translate="yes" xml:space="preserve">
          <source>Constructor for the &lt;code&gt;Accounts&lt;/code&gt; object on the client.</source>
          <target state="translated">클라이언트 에서 &lt;code&gt;Accounts&lt;/code&gt; 객체의 생성자</target>
        </trans-unit>
        <trans-unit id="fd796b6d2dc6a6a4c51763548afa8b332d8368a7" translate="yes" xml:space="preserve">
          <source>Constructs a View that renders &lt;code&gt;contentFunc&lt;/code&gt; for each item in a sequence.</source>
          <target state="translated">각 항목에 대해 &lt;code&gt;contentFunc&lt;/code&gt; 를 시퀀스로 렌더링하는 View를 구성합니다 .</target>
        </trans-unit>
        <trans-unit id="3dd64ffaaad3baeef8a955726c62e26c0081faec" translate="yes" xml:space="preserve">
          <source>Constructs a View that renders content conditionally.</source>
          <target state="translated">콘텐츠를 조건부로 렌더링하는 View를 구성합니다.</target>
        </trans-unit>
        <trans-unit id="ad781402a6327e1c97d08ca7759b4b84a6e8fe6b" translate="yes" xml:space="preserve">
          <source>Constructs a View that renders content with a data context.</source>
          <target state="translated">데이터 컨텍스트로 컨텐츠를 렌더링하는 View를 구성합니다.</target>
        </trans-unit>
        <trans-unit id="2a65f8a297c79d7215f14b7b9156a139ce045f53" translate="yes" xml:space="preserve">
          <source>Constructs and returns an unrendered View object. This method is invoked by Meteor whenever the template is used, such as by &lt;code&gt;Blaze.render&lt;/code&gt; or by &lt;code&gt;{{&amp;gt; foo}}&lt;/code&gt; where &lt;code&gt;foo&lt;/code&gt; resolves to a Template object.</source>
          <target state="translated">렌더링되지 않은 View 객체를 구성하고 반환합니다. 이 방법은 템플릿 등으로 같이 사용될 때마다 유성에 의해 호출 &lt;code&gt;Blaze.render&lt;/code&gt; 또는하여 &lt;code&gt;{{&amp;gt; foo}}&lt;/code&gt; 여기서 &lt;code&gt;foo&lt;/code&gt; 는 템플릿 개체에 해결합니다.</target>
        </trans-unit>
        <trans-unit id="1f0b9e7737dbe888e3c4a34fd9fec25e884beb80" translate="yes" xml:space="preserve">
          <source>Content Security Policy (CSP)</source>
          <target state="translated">콘텐츠 보안 정책 (CSP)</target>
        </trans-unit>
        <trans-unit id="7698d008d36e29b0f5525fef4134876a16472bfc" translate="yes" xml:space="preserve">
          <source>Contents of the result object:</source>
          <target state="translated">결과 객체의 내용 :</target>
        </trans-unit>
        <trans-unit id="7a302c3f9cf2b3cec42c41ee9b6ddfb04d9516a9" translate="yes" xml:space="preserve">
          <source>Continuous Integration</source>
          <target state="translated">지속적인 통합</target>
        </trans-unit>
        <trans-unit id="3f3ad4e436b78ea19b3bfb0e48de0c98fff0f0f5" translate="yes" xml:space="preserve">
          <source>Continuous backups &amp;amp; Automated snapshots</source>
          <target state="translated">연속 백업 및 자동 스냅 샷</target>
        </trans-unit>
        <trans-unit id="9b3761a81e7f50b5a743fdcfcdec481a981d43df" translate="yes" xml:space="preserve">
          <source>Continuous deployment</source>
          <target state="translated">지속적인 배포</target>
        </trans-unit>
        <trans-unit id="256036652dc86f036ffa56a2d5ed9e82cf0bbf80" translate="yes" xml:space="preserve">
          <source>Continuous deployment refers to the process of deploying an application via a continuous integration tool, usually when some condition is reached (such as a git push to the &lt;code&gt;master&lt;/code&gt; branch). You can use CD to deploy to Galaxy, as Nate Strauser explains in a &lt;a href=&quot;https://medium.com/@natestrauser/migrating-meteor-apps-from-modulus-to-galaxy-with-continuous-deployment-from-codeship-aed2044cabd9#.lvio4sh4a&quot;&gt;blog post on the subject&lt;/a&gt;.</source>
          <target state="translated">연속 배포는 일반적으로 일부 조건 (예 : &lt;code&gt;master&lt;/code&gt; 분기 로의 git push)에 도달 할 때 연속 통합 도구를 통해 응용 프로그램을 배포하는 프로세스를 말합니다 . Nate Strauser &lt;a href=&quot;https://medium.com/@natestrauser/migrating-meteor-apps-from-modulus-to-galaxy-with-continuous-deployment-from-codeship-aed2044cabd9#.lvio4sh4a&quot;&gt;가 주제&lt;/a&gt; 에 대한 블로그 게시물에서 설명하는 것처럼 CD를 사용하여 Galaxy에 배포 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="235203771850590c4a28b67872d3aa9e6e0ce46f" translate="yes" xml:space="preserve">
          <source>Continuous integration testing is the process of running tests on every commit of your project.</source>
          <target state="translated">지속적인 통합 테스트는 모든 프로젝트 커밋에서 테스트를 실행하는 프로세스입니다.</target>
        </trans-unit>
        <trans-unit id="2d82a4b27a4b305690d5ac612046a955778a9fa5" translate="yes" xml:space="preserve">
          <source>Contributing</source>
          <target state="translated">Contributing</target>
        </trans-unit>
        <trans-unit id="cde2421ad27043d8c65b4ec14d2b94886b718d5e" translate="yes" xml:space="preserve">
          <source>Controlling compatibility version</source>
          <target state="translated">호환성 버전 제어</target>
        </trans-unit>
        <trans-unit id="f4d0105e4bbeab74af84f0611a50613227f104d7" translate="yes" xml:space="preserve">
          <source>Controlling re-rendering</source>
          <target state="translated">재 렌더링 제어</target>
        </trans-unit>
        <trans-unit id="c5c62e142141ae1622b3503cc45566779bedff3c" translate="yes" xml:space="preserve">
          <source>Cookies are deliberately excluded from the headers as they are a security risk for this transport. For details and alternatives, see the &lt;a href=&quot;https://github.com/sockjs/sockjs-node#authorisation&quot;&gt;SockJS documentation&lt;/a&gt;.</source>
          <target state="translated">쿠키는이 전송의 보안 위험이므로 의도적으로 헤더에서 제외됩니다. 자세한 내용과 대안은 &lt;a href=&quot;https://github.com/sockjs/sockjs-node#authorisation&quot;&gt;SockJS 설명서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e1fc898f5208ffd6783bee8eced80f3820e5d38e" translate="yes" xml:space="preserve">
          <source>Cordova also opens up access to certain native device features through a &lt;a href=&quot;#cordova-plugins&quot;&gt;plugin architecture&lt;/a&gt;. Plugins allow you to use features not usually available to web apps, such as accessing the device camera or the local file system, interact with barcode or NFC readers, etc.</source>
          <target state="translated">또한 Cordova는 &lt;a href=&quot;#cordova-plugins&quot;&gt;플러그인 아키텍처를&lt;/a&gt; 통해 특정 기본 장치 기능에 액세스 할 수 있도록합니다 . 플러그인을 사용하면 장치 카메라 또는 로컬 파일 시스템에 액세스하거나 바코드 또는 NFC 리더와 상호 작용하는 등 웹 앱에서 일반적으로 사용할 수없는 기능을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="95520004e9dd48b2111df66ddc2d6032167626db" translate="yes" xml:space="preserve">
          <source>Cordova apps don&amp;rsquo;t load web content over the network, but rely on locally stored HTML, CSS, JavaScript code and other assets. While Cordova by default uses &lt;code&gt;file://&lt;/code&gt; URLs to load the app, Meteor includes an integrated file serving mechanism on the device to support both bundling the initial assets and incrementally updating your app through &lt;a href=&quot;#hot-code-push&quot;&gt;hot code push&lt;/a&gt;. This means your app will be served from &lt;code&gt;http://localhost:&amp;lt;port&amp;gt;&lt;/code&gt;, which also has the benefit that web views consider it a &lt;a href=&quot;https://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features&quot;&gt;secure origin&lt;/a&gt; and won&amp;rsquo;t block any sensitive features (which they increasingly do for &lt;code&gt;file://&lt;/code&gt; URLs).</source>
          <target state="translated">Cordova 앱은 네트워크를 통해 웹 컨텐츠를로드하지 않지만 로컬에 저장된 HTML, CSS, JavaScript 코드 및 기타 자산에 의존합니다. Cordova는 기본적으로 &lt;code&gt;file://&lt;/code&gt; URL을 사용하여 앱을로드하지만, Meteor는 장치에 통합 된 파일 제공 메커니즘을 포함하여 초기 자산 번들링과 &lt;a href=&quot;#hot-code-push&quot;&gt;핫 코드 푸시를&lt;/a&gt; 통해 점진적으로 앱 업데이트를 지원합니다 . 이는 귀하의 앱이 &lt;code&gt;http://localhost:&amp;lt;port&amp;gt;&lt;/code&gt; 에서 제공됨을 의미하며 , 이는 웹보기가 &lt;a href=&quot;https://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features&quot;&gt;안전한 출처로&lt;/a&gt; 간주하고 민감한 기능 ( &lt;code&gt;file://&lt;/code&gt; URL에 점점 더 많이 사용됨)을 차단하지 않는 이점도 있습니다 ).</target>
        </trans-unit>
        <trans-unit id="8ed2d7952fa99d7583dcfd380cc5892f3b1f2107" translate="yes" xml:space="preserve">
          <source>Cordova apps run in a web view. A web view is basically a browser without the browser UI. Browser engines differ in their underlying implementation and in what web standards they support. As a result, what web view your app runs on can have a huge impact on your app&amp;rsquo;s performance and on the features you get to use. (If you want to know what features are supported on what browsers and versions, &lt;a href=&quot;http://caniuse.com&quot;&gt;caniuse.com&lt;/a&gt; is a great resource.)</source>
          <target state="translated">Cordova 앱은 웹보기에서 실행됩니다. 웹보기는 기본적으로 브라우저 UI가없는 브라우저입니다. 브라우저 엔진은 기본 구현과 지원하는 웹 표준이 다릅니다. 결과적으로 앱이 실행되는 웹 뷰는 앱 성능과 사용하는 기능에 큰 영향을 줄 수 있습니다. (어떤 브라우저 및 버전에서 어떤 기능이 지원되는지 알고 싶다면 &lt;a href=&quot;http://caniuse.com&quot;&gt;caniuse.com&lt;/a&gt; 이 훌륭한 리소스입니다.)</target>
        </trans-unit>
        <trans-unit id="5ac4ab8855e413302ae905ef8bd65a7a027cfc45" translate="yes" xml:space="preserve">
          <source>Cordova comes with a plugin architecture that opens up access to features not usually available to web apps. Plugins are installable add-ons that contain both JavaScript and native code, which allows them to translate calls from your web app to platform-specific APIs.</source>
          <target state="translated">Cordova에는 일반적으로 웹 앱에서 사용할 수없는 기능에 액세스 할 수있는 플러그인 아키텍처가 제공됩니다. 플러그인은 JavaScript와 기본 코드를 모두 포함하는 설치 가능한 애드온으로, 웹 앱에서 호출을 플랫폼 별 API로 변환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="422acefacba2bd041f45e0552baf9b671173637c" translate="yes" xml:space="preserve">
          <source>Cordova controls access to external domains through a whitelisting mechanism, which is implemented as &lt;a href=&quot;https://github.com/apache/cordova-plugin-whitelist&quot;&gt;&lt;code&gt;cordova-plugin-whitelist&lt;/code&gt;&lt;/a&gt; in the version of Cordova we bundle.</source>
          <target state="translated">Cordova는 번들링하는 Cordova 버전에서 &lt;a href=&quot;https://github.com/apache/cordova-plugin-whitelist&quot;&gt; &lt;code&gt;cordova-plugin-whitelist&lt;/code&gt; &lt;/a&gt; 로 구현되는 화이트리스트 메커니즘을 통해 외부 도메인에 대한 액세스를 제어 합니다.</target>
        </trans-unit>
        <trans-unit id="a7c20d67a4f53238b39d03f8b5fbc53501b981f3" translate="yes" xml:space="preserve">
          <source>Cordova downloads plugins from npm, and caches them (in &lt;code&gt;~/.cordova/lib/npm_cache&lt;/code&gt;) so they don&amp;rsquo;t have to be downloaded repeatedly if you rebuild or use them again in another project.</source>
          <target state="translated">Cordova는 npm에서 플러그인을 다운로드하고이를 &lt;code&gt;~/.cordova/lib/npm_cache&lt;/code&gt; 에 캐시하여 다른 프로젝트에서 다시 빌드하거나 다시 사용할 경우 반복적으로 다운로드 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="e61fd23044183aebdb54006c598abafc9b32b925" translate="yes" xml:space="preserve">
          <source>Cordova plugins</source>
          <target state="translated">코르도바 플러그인</target>
        </trans-unit>
        <trans-unit id="d8a6d036fb15ce328b75158eab2ca3ea694d8683" translate="yes" xml:space="preserve">
          <source>Cordova will detect an Android SDK installed in various standard locations automatically, but in order to use tools like &lt;code&gt;android&lt;/code&gt; or &lt;code&gt;adb&lt;/code&gt; from the terminal, you will have to make some changes to your environment.</source>
          <target state="translated">Cordova는 다양한 표준 위치에 설치된 Android SDK를 자동으로 감지하지만 터미널에서 &lt;code&gt;android&lt;/code&gt; 또는 &lt;code&gt;adb&lt;/code&gt; 와 같은 도구를 사용하려면 환경을 약간 변경해야합니다.</target>
        </trans-unit>
        <trans-unit id="574d21fb216d6ce88c083cde827eb853ea6888c5" translate="yes" xml:space="preserve">
          <source>Cordova.depends()</source>
          <target state="translated">Cordova.depends()</target>
        </trans-unit>
        <trans-unit id="68836c550ee20fae0e06b2994e76a40348d2fc30" translate="yes" xml:space="preserve">
          <source>Core</source>
          <target state="translated">Core</target>
        </trans-unit>
        <trans-unit id="064de31158d289e52c24ffef7f7f7541cb6b5a0b" translate="yes" xml:space="preserve">
          <source>Cost and pricing granularity</source>
          <target state="translated">비용 및 가격 세분성</target>
        </trans-unit>
        <trans-unit id="3c3a10a35511350e46910c5afa535839f36b5be8" translate="yes" xml:space="preserve">
          <source>Countless hours have been spent by developers throughout the years arguing over single vs. double quotes, where to put brackets, how many spaces to type, and all kinds of other cosmetic code style questions. These are all questions that have at best a tangential relationship to code quality, but are very easy to have opinions about because they are so visual.</source>
          <target state="translated">수년 동안 개발자들은 작은 따옴표와 큰 따옴표, 괄호를 넣을 위치, 입력 할 공간의 수 및 기타 모든 종류의 화장품 코드 스타일 질문에 대해 논쟁하면서 수많은 시간을 보냈습니다. 이것들은 모두 코드 품질과 접선 관계가 있지만 질문에 대한 의견이 매우 시각적 인 질문입니다.</target>
        </trans-unit>
        <trans-unit id="fb2b40a4fad0e799200e07b261e6b08141df8b46" translate="yes" xml:space="preserve">
          <source>Create a Mongo-style &lt;code&gt;ObjectID&lt;/code&gt;. If you don't specify a &lt;code&gt;hexString&lt;/code&gt;, the &lt;code&gt;ObjectID&lt;/code&gt; will generated randomly (not using MongoDB's ID construction rules).</source>
          <target state="translated">Mongo 스타일 &lt;code&gt;ObjectID&lt;/code&gt; 를 작성하십시오 . 당신은 지정하지 않으면 &lt;code&gt;hexString&lt;/code&gt; 을 의 &lt;code&gt;ObjectID&lt;/code&gt; (MongoDB의의 ID 건설 규칙을 사용하지 않고) 무작위로 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="413850b1601d8fde96300f7d85b1df2c32964765" translate="yes" xml:space="preserve">
          <source>Create a new Meteor project. By default, makes a subdirectory named &lt;em&gt;name&lt;/em&gt; and copies in the template app. You can pass an absolute or relative path.</source>
          <target state="translated">새로운 Meteor 프로젝트를 만듭니다. 기본적으로 &lt;em&gt;name&lt;/em&gt; 이라는 서브 디렉토리 를 작성하고 템플리트 앱에서 복사하십시오. 절대 또는 상대 경로를 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0a44e6689991edf775b211e7f8aa0eb59d5bbf24" translate="yes" xml:space="preserve">
          <source>Create a new user.</source>
          <target state="translated">새 사용자를 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="be32b728b587a4f841d77b6ffcb140c394d5e35d" translate="yes" xml:space="preserve">
          <source>Create an HTTPS URL.</source>
          <target state="translated">HTTPS URL을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="f7ab8c59f46eee0540937e72a280eeacce495f82" translate="yes" xml:space="preserve">
          <source>Creates a basic, empty project.</source>
          <target state="translated">비어있는 기본 프로젝트를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="426c1dd3586c661c60d0c7a74deb18de14ca45f1" translate="yes" xml:space="preserve">
          <source>Creates a more complete, imports-based project which closely matches the &lt;a href=&quot;https://guide.meteor.com/structure.html#javascript-structure&quot;&gt;file structure&lt;/a&gt; recommended by the &lt;a href=&quot;https://guide.meteor.com/&quot;&gt;Meteor Guide&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://guide.meteor.com/&quot;&gt;Meteor Guide에서&lt;/a&gt; 권장 하는 &lt;a href=&quot;https://guide.meteor.com/structure.html#javascript-structure&quot;&gt;파일 구조&lt;/a&gt; 와 거의 일치하는보다 완전한 수입 기반 프로젝트를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="f7e1d6907791554cd7fe1ccb0fafed241e2e59cc" translate="yes" xml:space="preserve">
          <source>Creates a new package. If used in an existing app, this command will create a package in the packages directory.</source>
          <target state="translated">새 패키지를 만듭니다. 기존 앱에서 사용되는 경우이 명령은 패키지 디렉토리에 패키지를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="9863659c723fd50f285a94d52e69c6bba3941019" translate="yes" xml:space="preserve">
          <source>Creating data</source>
          <target state="translated">데이터 생성</target>
        </trans-unit>
        <trans-unit id="18fc2f97599c6123f77e230a7df453afa9545e6c" translate="yes" xml:space="preserve">
          <source>Cross-Origin Resource Sharing (CORS)</source>
          <target state="translated">CORS (Cross-Origin Resource Sharing)</target>
        </trans-unit>
        <trans-unit id="cd15659ed388bc59afe708d85ce4286643a25f54" translate="yes" xml:space="preserve">
          <source>Current route information</source>
          <target state="translated">현재 노선 정보</target>
        </trans-unit>
        <trans-unit id="0ddad5326875afa568f2706cd94d772f83824eb5" translate="yes" xml:space="preserve">
          <source>Currently logged in user</source>
          <target state="translated">현재 로그인 한 사용자</target>
        </trans-unit>
        <trans-unit id="de1bf6bc03fd7a6e1f3166ff0a91ba5585318ae0" translate="yes" xml:space="preserve">
          <source>Currently when a client reconnects to the server (such as after temporarily losing its Internet connection), it will get a new connection each time. The &lt;code&gt;onConnection&lt;/code&gt; callbacks will be called again, and the new connection will have a new connection &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">현재 클라이언트가 서버에 다시 연결하면 (예 : 인터넷 연결이 일시적으로 끊어진 후) 매번 새 연결이 생성됩니다. &lt;code&gt;onConnection&lt;/code&gt; 콜백이 다시 호출 될 것이고, 새로운 연결은 새 연결해야합니다 &lt;code&gt;id&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="146d68e37b24bdd082c9dcd651baabac3be8b5ce" translate="yes" xml:space="preserve">
          <source>Currently, Meteor doesn&amp;rsquo;t have a separate build step for post-processing CSS, so the only way to integrate it is to build it into the minifier. Thankfully, there is a community package that has integrated PostCSS with plugin support into a replacement for Meteor&amp;rsquo;s standard minification package.</source>
          <target state="translated">현재 Meteor에는 CSS 후 처리를위한 별도의 빌드 단계가 없으므로이를 통합 할 수있는 유일한 방법은 축소판에 빌드하는 것입니다. 고맙게도 플러그인 지원으로 PostCSS를 통합하여 Meteor의 표준 축소 패키지를 대체하는 커뮤니티 패키지가 있습니다.</target>
        </trans-unit>
        <trans-unit id="097240b1aed59d7c6e3e5679866b8cf0765949a3" translate="yes" xml:space="preserve">
          <source>Currently, it is not possible to import &lt;code&gt;Assets&lt;/code&gt; as an ES6 module. Any of the &lt;code&gt;Assets&lt;/code&gt; methods below can simply be called directly in any Meteor server code.</source>
          <target state="translated">현재 &lt;code&gt;Assets&lt;/code&gt; 을 ES6 모듈로 가져올 수 없습니다 . 아래 의 모든 &lt;code&gt;Assets&lt;/code&gt; 메소드는 Meteor 서버 코드에서 직접 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bf10b0a1ff741c4a70ff7a91f0f39a3806d0d622" translate="yes" xml:space="preserve">
          <source>Currently, the supported architectures for Meteor are 32-bit Linux, 64-bit Linux and Mac OS. Galaxy&amp;rsquo;s servers run 64-bit Linux.</source>
          <target state="translated">현재 Meteor에 지원되는 아키텍처는 32 비트 Linux, 64 비트 Linux 및 Mac OS입니다. Galaxy의 서버는 64 비트 Linux를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="b18879aa1570baa217fccf76c26b1a6cea058db3" translate="yes" xml:space="preserve">
          <source>Currently, underscore is included in all projects, as the Meteor core depends on it. _ is available in the global namespace on both the client and the server even if you do not include this package. However if you do use underscore in your application, you should still add the package as we will remove the default underscore in the future.</source>
          <target state="translated">현재 Meteor 코어가 의존하기 때문에 모든 프로젝트에 밑줄이 포함되어 있습니다. _는이 패키지를 포함하지 않아도 클라이언트와 서버의 전역 네임 스페이스에서 사용할 수 있습니다. 그러나 응용 프로그램에서 밑줄을 사용하는 경우 나중에 기본 밑줄을 제거하므로 패키지를 추가해야합니다.</target>
        </trans-unit>
        <trans-unit id="351f29317ee6ca678183d6b909e465205a303f2a" translate="yes" xml:space="preserve">
          <source>Currently, using Meteor Up with Meteor 1.4 requires &lt;code&gt;kadirahq/mup&lt;/code&gt; (still in development) and a special docker image with the correct Node version.</source>
          <target state="translated">현재 Meteor 1.4와 함께 Meteor Up을 사용하려면 &lt;code&gt;kadirahq/mup&lt;/code&gt; (아직 개발 중) 및 올바른 노드 버전의 특수 도커 이미지가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="403e58ac648f09170c7590415b63b480ea0460cb" translate="yes" xml:space="preserve">
          <source>Currently, when multiple subscriptions publish the same document &lt;em&gt;only the top level fields&lt;/em&gt; are compared during the merge. This means that if the documents include different sub-fields of the same top level field, not all of them will be available on the client. We hope to lift this restriction in a future release.</source>
          <target state="translated">현재 여러 구독이 동일한 문서를 게시 하면 병합하는 동안 &lt;em&gt;최상위 필드&lt;/em&gt; 만 비교됩니다. 즉, 문서에 동일한 최상위 필드의 다른 하위 필드가 포함 된 경우 클라이언트에서 모든 하위 필드를 사용할 수있는 것은 아닙니다. 향후 릴리스에서이 제한을 해제 할 수 있도록 노력하겠습니다.</target>
        </trans-unit>
        <trans-unit id="f4d2f91040c93130ddcca14955ef2593c9e0caed" translate="yes" xml:space="preserve">
          <source>Cursors</source>
          <target state="translated">Cursors</target>
        </trans-unit>
        <trans-unit id="7e1c26c6b50d9031944321dd0a9d33930759744e" translate="yes" xml:space="preserve">
          <source>Cursors are a reactive data source. On the client, the first time you retrieve a cursor&amp;rsquo;s documents with &lt;code&gt;fetch&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, or &lt;code&gt;forEach&lt;/code&gt; inside a reactive computation (eg, a template or &lt;a href=&quot;#tracker_autorun&quot;&gt;&lt;code&gt;autorun&lt;/code&gt;&lt;/a&gt;), Meteor will register a dependency on the underlying data. Any change to the collection that changes the documents in a cursor will trigger a recomputation. To disable this behavior, pass &lt;code&gt;{reactive: false}&lt;/code&gt; as an option to &lt;code&gt;find&lt;/code&gt;.</source>
          <target state="translated">커서는 반응적인 데이터 소스입니다. 클라이언트에서 반응 계산 (예 : 템플릿 또는 &lt;a href=&quot;#tracker_autorun&quot;&gt; &lt;code&gt;autorun&lt;/code&gt; &lt;/a&gt; ) 내에서 &lt;code&gt;fetch&lt;/code&gt; , &lt;code&gt;map&lt;/code&gt; 또는 &lt;code&gt;forEach&lt;/code&gt; 가 있는 커서 문서를 처음 검색하면 Meteor가 기본 데이터에 대한 종속성을 등록합니다. 커서에서 문서를 변경하는 컬렉션을 변경하면 재 계산이 트리거됩니다. 이 동작을 비활성화하려면 &lt;code&gt;find&lt;/code&gt; 옵션으로 &lt;code&gt;{reactive: false}&lt;/code&gt; 를 전달하십시오 .</target>
        </trans-unit>
        <trans-unit id="bd89b0ccb68aab58b1cc7a82d27a01f4c0aefff7" translate="yes" xml:space="preserve">
          <source>Custom Block Helpers</source>
          <target state="translated">커스텀 블록 헬퍼</target>
        </trans-unit>
        <trans-unit id="86c01e0d4a261299067911c1e74281f149aeae99" translate="yes" xml:space="preserve">
          <source>Custom data about users</source>
          <target state="translated">사용자에 대한 사용자 정의 데이터</target>
        </trans-unit>
        <trans-unit id="750e15faeddc60df053265f4c826df2467c0e5d1" translate="yes" xml:space="preserve">
          <source>Custom deployment</source>
          <target state="translated">커스텀 배포</target>
        </trans-unit>
        <trans-unit id="78f0fa9ee3d077f63cf46d96a2d4077bc5e4ba51" translate="yes" xml:space="preserve">
          <source>Custom publications with the low level API</source>
          <target state="translated">저수준 API를 사용한 맞춤형 출판물</target>
        </trans-unit>
        <trans-unit id="bfec51f1d3204ddda9faaf09b58dfbc316772f95" translate="yes" xml:space="preserve">
          <source>Custom rules can be added by calling &lt;code&gt;DDPRateLimiter.addRule&lt;/code&gt;. The rate limiter is called on every method and subscription invocation.</source>
          <target state="translated">&lt;code&gt;DDPRateLimiter.addRule&lt;/code&gt; 을 호출하여 사용자 정의 규칙을 추가 할 수 있습니다 . 속도 제한 기는 모든 메소드 및 구독 호출에서 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="dc0817b6fa19e833be021b11bd08b6f37f2c5341" translate="yes" xml:space="preserve">
          <source>Customizable UI: useraccounts</source>
          <target state="translated">사용자 정의 가능한 UI : 사용자 계정</target>
        </trans-unit>
        <trans-unit id="9cff9630ae90cefccf3161716f1f70f3dc102ff1" translate="yes" xml:space="preserve">
          <source>Customize new user creation.</source>
          <target state="translated">새로운 사용자 작성을 사용자 정의하십시오.</target>
        </trans-unit>
        <trans-unit id="88dadb07022c2ddeaf066afc9c9bb9e16320f6e2" translate="yes" xml:space="preserve">
          <source>Customize rate limiting for methods and subscriptions.</source>
          <target state="translated">메소드 및 구독에 대한 비율 제한을 사용자 정의하십시오.</target>
        </trans-unit>
        <trans-unit id="794441e451f4b7c8657e4e9b68827fdb86ab53e3" translate="yes" xml:space="preserve">
          <source>Customizing accounts emails</source>
          <target state="translated">계정 이메일 사용자 정의</target>
        </trans-unit>
        <trans-unit id="a0f0b55c7bd24cde94bca6e55f2601ae0dea6cb9" translate="yes" xml:space="preserve">
          <source>Customizing routes</source>
          <target state="translated">경로 사용자 정의</target>
        </trans-unit>
        <trans-unit id="753b9bccb6917794c867e05e0b86549759598475" translate="yes" xml:space="preserve">
          <source>Customizing templates</source>
          <target state="translated">템플릿 사용자 정의</target>
        </trans-unit>
        <trans-unit id="0d2ca62af3bb6abbbef1f0b7a04c04714b93574b" translate="yes" xml:space="preserve">
          <source>DDP is Meteor&amp;rsquo;s built-in pub/sub and RPC protocol. You can read about how to use it in the &lt;a href=&quot;data-loading&quot;&gt;Data Loading&lt;/a&gt; and &lt;a href=&quot;methods&quot;&gt;Methods&lt;/a&gt; articles. In addition to the concepts of data loading and method calls, DDP has one more feature built in - the idea of a &lt;code&gt;userId&lt;/code&gt; field on a connection. This is the place where login state is tracked, regardless of which accounts UI package or login service you are using.</source>
          <target state="translated">DDP는 Meteor의 내장 pub / sub 및 RPC 프로토콜입니다. &lt;a href=&quot;data-loading&quot;&gt;데이터로드&lt;/a&gt; 및 &lt;a href=&quot;methods&quot;&gt;메소드&lt;/a&gt; 기사 에서이를 사용하는 방법에 대해 읽을 수 있습니다 . DDP에는 데이터로드 및 메서드 호출의 개념 외에도 연결 의 &lt;code&gt;userId&lt;/code&gt; 필드 라는 개념이 내장되어 있습니다. 사용중인 UI 패키지 또는 로그인 서비스 계정에 관계없이 로그인 상태를 추적하는 위치입니다.</target>
        </trans-unit>
        <trans-unit id="67fea6a93d69d9b8f23ccf69b16ac6b2d1dedb19" translate="yes" xml:space="preserve">
          <source>DDP uses three main messages to communicate changes in the data for a publication: the &lt;code&gt;added&lt;/code&gt;, &lt;code&gt;changed&lt;/code&gt; and &lt;code&gt;removed&lt;/code&gt; messages. So, we can similarly do the same for a publication:</source>
          <target state="translated">DDP는 3 가지 주요 메시지를 사용하여 게시 데이터의 변경 사항을 전달 합니다. &lt;code&gt;added&lt;/code&gt; , &lt;code&gt;changed&lt;/code&gt; 및 &lt;code&gt;removed&lt;/code&gt; 메시지. 따라서 우리는 출판물에 대해서도 마찬가지로 똑같이 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e6cc860523e90ae377ba02191ae831ce6e476a02" translate="yes" xml:space="preserve">
          <source>DDP, Meteor&amp;rsquo;s data publication protocol, only knows how to resolve conflicts in top-level fields. This means that you can&amp;rsquo;t have one publication send &lt;code&gt;services.facebook.first_name&lt;/code&gt; and another send &lt;code&gt;services.facebook.locale&lt;/code&gt; - one of them will win, and only one of the fields will actually be available on the client. The best way to fix this is to denormalize the data you want onto custom top-level fields, as described in the section about &lt;a href=&quot;#custom-user-data&quot;&gt;custom user data&lt;/a&gt;.</source>
          <target state="translated">Meteor의 데이터 게시 프로토콜 인 DDP는 최상위 필드의 충돌을 해결하는 방법 만 알고 있습니다. 즉, 하나의 발행물 send &lt;code&gt;services.facebook.first_name&lt;/code&gt; 과 다른 send &lt;code&gt;services.facebook.locale&lt;/code&gt; 을 가질 수 없습니다. 그 중 하나 가 이기고 필드 중 하나만 실제로 클라이언트에서 사용 가능합니다. 이 문제를 해결하는 가장 좋은 방법은 &lt;a href=&quot;#custom-user-data&quot;&gt;사용자 정의 사용자 데이터&lt;/a&gt; 섹션에 설명 된대로 원하는 데이터를 사용자 정의 최상위 레벨 필드에 비정규 화하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="635c7e23cabe8f1eb413d4bd4f3a608f21c7784f" translate="yes" xml:space="preserve">
          <source>DDP.connect()</source>
          <target state="translated">DDP.connect()</target>
        </trans-unit>
        <trans-unit id="9ad5b2b7037988b6aaa513d5e407ff741ac3ce32" translate="yes" xml:space="preserve">
          <source>DDP.onReconnect()</source>
          <target state="translated">DDP.onReconnect()</target>
        </trans-unit>
        <trans-unit id="8d2b707ca4de4180c159e6162d5fafa2c8ecf46b" translate="yes" xml:space="preserve">
          <source>DDPRateLimiter</source>
          <target state="translated">DDPRateLimiter</target>
        </trans-unit>
        <trans-unit id="e5a875174a8fe0707ceda1e17b505c96cfe84cba" translate="yes" xml:space="preserve">
          <source>DDPRateLimiter.addRule()</source>
          <target state="translated">DDPRateLimiter.addRule()</target>
        </trans-unit>
        <trans-unit id="26ae78c99346a2e0b6b2edefc9368832b89ca0af" translate="yes" xml:space="preserve">
          <source>DDPRateLimiter.removeRule()</source>
          <target state="translated">DDPRateLimiter.removeRule()</target>
        </trans-unit>
        <trans-unit id="49c8b8226ea88d212444cf00d1a41c86c6f054d8" translate="yes" xml:space="preserve">
          <source>DDPRateLimiter.setErrorMessage()</source>
          <target state="translated">DDPRateLimiter.setErrorMessage()</target>
        </trans-unit>
        <trans-unit id="8b7361d01d2829770d9129ddd535662ecf4b11d9" translate="yes" xml:space="preserve">
          <source>DISABLE_WEBSOCKETS</source>
          <target state="translated">DISABLE_WEBSOCKETS</target>
        </trans-unit>
        <trans-unit id="ed74c822dfb7410b7863a3a5063ccce3b81f4268" translate="yes" xml:space="preserve">
          <source>Data contexts and lookup</source>
          <target state="translated">데이터 컨텍스트 및 조회</target>
        </trans-unit>
        <trans-unit id="1302cd909a4e57a99fc3e661f171864aac0addda" translate="yes" xml:space="preserve">
          <source>Dealing with every possible MongoDB operator is difficult to get right, as MongoDB has a rich modifier language. Instead we focus on just dealing with the modifiers we know we&amp;rsquo;ll see in our app. If this gets too tricky, then moving the hooks for the logic into the Methods that actually make the relevant modifications could be sensible (although you need to be diligent to ensure you do it in &lt;em&gt;all&lt;/em&gt; the relevant places, both now and as the app changes in the future).</source>
          <target state="translated">MongoDB에는 풍부한 수정 자 언어가 있으므로 가능한 모든 MongoDB 연산자를 다루는 것은 쉽지 않습니다. 대신 앱에서 볼 수있는 수정자를 다루는 데 집중합니다. 이것이 너무 까다로워지면 논리의 후크를 실제로 관련 수정을 수행하는 메소드로 옮기는 것이 합리적 일 수 있습니다 ( 현재와 ​​응용 프로그램이 변경 될 때 &lt;em&gt;모든&lt;/em&gt; 관련 장소 에서 수행하도록 부지런해야하지만) 앞으로).</target>
        </trans-unit>
        <trans-unit id="7d09616ed87ed67609e87fa066491e0ab7795cb1" translate="yes" xml:space="preserve">
          <source>Debugging on Android with Chrome</source>
          <target state="translated">Chrome을 사용하여 Android에서 디버깅</target>
        </trans-unit>
        <trans-unit id="8aa746c3b9fc4592c5dd7d5ce3adda61f7923c59" translate="yes" xml:space="preserve">
          <source>Debugging on iOS with Safari</source>
          <target state="translated">Safari를 사용하여 iOS에서 디버깅</target>
        </trans-unit>
        <trans-unit id="3d13469e63908f89f7ba57d74624b2fa61521522" translate="yes" xml:space="preserve">
          <source>Declare event handlers for instances of this template. Multiple calls add new event handlers in addition to the existing ones.</source>
          <target state="translated">이 템플릿의 인스턴스에 대한 이벤트 핸들러를 선언하십시오. 여러 개의 호출은 기존의 것 외에도 새로운 이벤트 처리기를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="f839cdf1f83ccf5189a093a29c5f5713ec903849" translate="yes" xml:space="preserve">
          <source>Declares that the current computation (or &lt;code&gt;fromComputation&lt;/code&gt; if given) depends on &lt;code&gt;dependency&lt;/code&gt;. The computation will be invalidated the next time &lt;code&gt;dependency&lt;/code&gt; changes.</source>
          <target state="translated">현재 계산 (또는 주어진 경우 &lt;code&gt;fromComputation&lt;/code&gt; )은 &lt;code&gt;dependency&lt;/code&gt; 에 의존 한다는 것을 선언합니다 . 다음에 &lt;code&gt;dependency&lt;/code&gt; 변경 되면 계산이 무효화 됩니다.</target>
        </trans-unit>
        <trans-unit id="d58720c1f33dca7d82fe3bb498933b6c872b7767" translate="yes" xml:space="preserve">
          <source>Deeper understanding</source>
          <target state="translated">더 깊은 이해</target>
        </trans-unit>
        <trans-unit id="808d7dca8a74d84af27a2d6602c3d786de45fe1e" translate="yes" xml:space="preserve">
          <source>Default</source>
          <target state="translated">Default</target>
        </trans-unit>
        <trans-unit id="9ec2dbc02e3afe106f88afa542e227751f325648" translate="yes" xml:space="preserve">
          <source>Default access rules:</source>
          <target state="translated">기본 액세스 규칙 :</target>
        </trans-unit>
        <trans-unit id="6cefd9290f19790af8092d4b454039dd4ef72591" translate="yes" xml:space="preserve">
          <source>Default expressions for function parameters, evaluated whenever the parameter is &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;...rest&lt;/code&gt; parameters for capturing remaining arguments without using the &lt;code&gt;arguments&lt;/code&gt; object:</source>
          <target state="translated">함수 매개 변수에 대한 기본 표현, 매개 변수가 될 때마다 평가 &lt;code&gt;undefined&lt;/code&gt; , &lt;code&gt;...rest&lt;/code&gt; 사용하지 않고 나머지 인수를 캡처 매개 변수 &lt;code&gt;arguments&lt;/code&gt; 대상 :</target>
        </trans-unit>
        <trans-unit id="7c62290ec5c6ac3fa261bb041bde3c7a74ec70cd" translate="yes" xml:space="preserve">
          <source>Default file load order</source>
          <target state="translated">기본 파일로드 순서</target>
        </trans-unit>
        <trans-unit id="8dbd2b478a954ccf6dd32b287f8d7ebfa35af361" translate="yes" xml:space="preserve">
          <source>Defer execution of a function to run asynchronously in the background (similar to &lt;code&gt;Meteor.setTimeout(func, 0)&lt;/code&gt;.</source>
          <target state="translated">백그라운드에서 비동기식으로 실행되도록 함수 실행을 연기합니다 ( &lt;code&gt;Meteor.setTimeout(func, 0)&lt;/code&gt; 과 유사 ) .</target>
        </trans-unit>
        <trans-unit id="2db566acd17f4b97305fc21a284527b145995921" translate="yes" xml:space="preserve">
          <source>Define a build plugin. A build plugin extends the build process for apps and packages that use this package. For example, the &lt;code&gt;coffeescript&lt;/code&gt; package uses a build plugin to compile CoffeeScript source files into JavaScript.</source>
          <target state="translated">빌드 플러그인을 정의하십시오. 빌드 플러그인은이 패키지를 사용하는 앱 및 패키지의 빌드 프로세스를 확장합니다. 예를 들어 &lt;code&gt;coffeescript&lt;/code&gt; 패키지는 빌드 플러그인을 사용하여 CoffeeScript 소스 파일을 JavaScript로 컴파일합니다.</target>
        </trans-unit>
        <trans-unit id="18200ccbab673ee883d9350bce6b9dce8b1ad9dd" translate="yes" xml:space="preserve">
          <source>Define dependencies and expose package methods for unit tests.</source>
          <target state="translated">단위 테스트를 위해 종속성을 정의하고 패키지 방법을 노출하십시오.</target>
        </trans-unit>
        <trans-unit id="6905cf18490570aa1bbbd736f7b9a5b353cc8f4e" translate="yes" xml:space="preserve">
          <source>Define dependencies and expose package methods with the &lt;code&gt;Package.onUse&lt;/code&gt; handler. This section lets you define what packages your package depends on, what packages are implied by your package, and what object your package is exported to.</source>
          <target state="translated">&lt;code&gt;Package.onUse&lt;/code&gt; 핸들러를 사용하여 종속성을 정의하고 패키지 메소드를 노출하십시오 . 이 섹션에서는 패키지가 의존하는 패키지, 패키지에 포함 된 패키지 및 패키지를 내보낼 객체를 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c02ba958731a56c7329f44bca2584e6df388b718" translate="yes" xml:space="preserve">
          <source>Define package dependencies and expose package methods.</source>
          <target state="translated">패키지 종속성을 정의하고 패키지 메소드를 노출하십시오.</target>
        </trans-unit>
        <trans-unit id="896f45c70cbd4046b9ddb902e58f3e7ae5798395" translate="yes" xml:space="preserve">
          <source>Defines a &lt;a href=&quot;#Template-helpers&quot;&gt;helper function&lt;/a&gt; which can be used from all templates.</source>
          <target state="translated">모든 템플릿에서 사용할 수 있는 &lt;a href=&quot;#Template-helpers&quot;&gt;도우미 기능&lt;/a&gt; 을 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="84181a30ac9667feef69f3cb20d04274d0170088" translate="yes" xml:space="preserve">
          <source>Defines functions that can be invoked over the network by clients.</source>
          <target state="translated">클라이언트가 네트워크를 통해 호출 할 수있는 기능을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="72394697c73910e9331b4e63b3b6046bbb3ef139" translate="yes" xml:space="preserve">
          <source>Defining</source>
          <target state="translated">Defining</target>
        </trans-unit>
        <trans-unit id="2c07ae274de1dab3ca83185c5ceebea913bd524e" translate="yes" xml:space="preserve">
          <source>Defining a publication</source>
          <target state="translated">발행물 정의</target>
        </trans-unit>
        <trans-unit id="5a621df3e85c731e4c689bfbeb133f06876b0f58" translate="yes" xml:space="preserve">
          <source>Defining a schema</source>
          <target state="translated">스키마 정의</target>
        </trans-unit>
        <trans-unit id="1ca5d090ef3f64fa477b0e8e51db80141b258846" translate="yes" xml:space="preserve">
          <source>Defining a simple route</source>
          <target state="translated">간단한 경로 정의</target>
        </trans-unit>
        <trans-unit id="35c7f3772aa3d121c9c96fe8f48f4f9a711cd1f7" translate="yes" xml:space="preserve">
          <source>Defining and calling Methods</source>
          <target state="translated">메소드 정의 및 호출</target>
        </trans-unit>
        <trans-unit id="37fef3f61269d82b74fe8944fb62aa3a33a39bff" translate="yes" xml:space="preserve">
          <source>Denormalization and multiple collections</source>
          <target state="translated">비정규 화 및 여러 컬렉션</target>
        </trans-unit>
        <trans-unit id="0551d015bef5a9e8ffc939459c9547834f4dea27" translate="yes" xml:space="preserve">
          <source>Denormalization may need to happen on various mutators of several collections. Therefore, it&amp;rsquo;s sensible to define the denormalization logic in one place, and hook it into each mutator with one line of code. The advantage of this approach is that the denormalization logic is one place rather than spread over many files, but you can still examine the code for each collection and fully understand what happens on each update.</source>
          <target state="translated">비정규 화는 여러 콜렉션의 다양한 뮤 테이터에서 발생할 수 있습니다. 따라서 한 곳에서 비정규 화 논리를 정의하고 한 줄의 코드로 각 뮤 테이터에 연결하는 것이 합리적입니다. 이 방법의 장점은 비정규 화 논리가 많은 파일에 분산되는 것이 아니라 한 곳이지만 여전히 각 컬렉션의 코드를 검사하고 각 업데이트에서 발생하는 사항을 완전히 이해할 수 있다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="17efdd103398906737648a1d60c431fb5433cc8e" translate="yes" xml:space="preserve">
          <source>Deny writes to the &lt;code&gt;profile&lt;/code&gt; field on user documents.</source>
          <target state="translated">거부는 사용자 문서 의 &lt;code&gt;profile&lt;/code&gt; 필드에 씁니다 .</target>
        </trans-unit>
        <trans-unit id="73329a708b96198fa1dde11d635a69e8c1a5ba64" translate="yes" xml:space="preserve">
          <source>Depend on core Meteor packages, such as &lt;code&gt;ddp&lt;/code&gt; and &lt;code&gt;blaze&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ddp&lt;/code&gt; 및 &lt;code&gt;blaze&lt;/code&gt; 와 같은 핵심 Meteor 패키지에 따라 다름</target>
        </trans-unit>
        <trans-unit id="b4f8b36f761ce206c375eea56464bacee17d3dfd" translate="yes" xml:space="preserve">
          <source>Depend on package &lt;code&gt;packagename&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;packagename&lt;/code&gt; 패키지에 따라 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="0562f32dc56f5c702810cbe010068ddd38dbd69a" translate="yes" xml:space="preserve">
          <source>Dependencies</source>
          <target state="translated">Dependencies</target>
        </trans-unit>
        <trans-unit id="75bc28dae67a3580f0c5196334d23701daf6cc22" translate="yes" xml:space="preserve">
          <source>Dependencies don&amp;rsquo;t store data, they just track the set of computations to invalidate if something changes. Typically, a data value will be accompanied by a Dependency object that tracks the computations that depend on it, as in this example:</source>
          <target state="translated">종속성은 데이터를 저장하지 않으며, 변경 사항이있을 경우 무효화하기 위해 일련의 계산을 추적합니다. 일반적으로 데이터 값에는 다음 예제와 같이 데이터에 종속 된 계산을 추적하는 종속성 개체가 수반됩니다.</target>
        </trans-unit>
        <trans-unit id="412a747a785d8dc91d62592bd0fdede87946a3ec" translate="yes" xml:space="preserve">
          <source>Depending on Meteor version</source>
          <target state="translated">Meteor 버전에 따라</target>
        </trans-unit>
        <trans-unit id="8c0f9befc47151d268f3ef20c8ceae4ffb840d1e" translate="yes" xml:space="preserve">
          <source>Depending on the version of Meteor you are using, you should install the proper version of &lt;code&gt;node&lt;/code&gt; using the appropriate installation process for your platform.</source>
          <target state="translated">사용중인 Meteor 버전에 따라 플랫폼에 적합한 설치 프로세스를 사용하여 적절한 버전의 &lt;code&gt;node&lt;/code&gt; 를 설치해야합니다.</target>
        </trans-unit>
        <trans-unit id="0cd22a7e0092ed41a5b4eba55f9ea6f645d380be" translate="yes" xml:space="preserve">
          <source>Deploy a version of your application that can handle both the old and the new schema. In our case, it&amp;rsquo;d be code that doesn&amp;rsquo;t expect the &lt;code&gt;todoCount&lt;/code&gt; to be there, but which correctly updates it when new todos are created.</source>
          <target state="translated">기존 스키마와 새 스키마를 모두 처리 할 수있는 애플리케이션 버전을 배포하십시오. 우리의 경우 &lt;code&gt;todoCount&lt;/code&gt; 가있을 것으로 예상하지 않지만 새로운 할 일이 만들어 질 때 올바르게 업데이트하는 코드 일 것 입니다.</target>
        </trans-unit>
        <trans-unit id="6c89b4b05993e80eccba9abd31b850f6f47e3b62" translate="yes" xml:space="preserve">
          <source>Deploy the new code that relies on the new schema and no longer knows how to deal with the old schema. Now we are safe to rely on &lt;code&gt;list.todoCount&lt;/code&gt; in our UI.</source>
          <target state="translated">새 스키마에 의존하고 더 이상 이전 스키마를 처리하는 방법을 모르는 새 코드를 배포하십시오. 이제 UI 에서 &lt;code&gt;list.todoCount&lt;/code&gt; 를 사용하는 것이 안전합니다 .</target>
        </trans-unit>
        <trans-unit id="39ee7111418081ce1ec55e2fc0ff4976177317be" translate="yes" xml:space="preserve">
          <source>Deploy the new version of the application to your staging server.</source>
          <target state="translated">스테이징 서버에 새 버전의 애플리케이션을 배치하십시오.</target>
        </trans-unit>
        <trans-unit id="ef23cda8b1f3b541a15db8ac778285fb1b9e28e5" translate="yes" xml:space="preserve">
          <source>Deploy the project in your current directory to &lt;a href=&quot;https://www.meteor.com/galaxy&quot;&gt;Galaxy&lt;/a&gt;.</source>
          <target state="translated">현재 디렉토리의 프로젝트를 &lt;a href=&quot;https://www.meteor.com/galaxy&quot;&gt;Galaxy&lt;/a&gt; 에 배포하십시오 .</target>
        </trans-unit>
        <trans-unit id="850eed96beca0b0250d7bf8cb68dceb8d321dac1" translate="yes" xml:space="preserve">
          <source>Deploying Meteor Applications</source>
          <target state="translated">유성 응용 프로그램 배포</target>
        </trans-unit>
        <trans-unit id="941a21aaed844f8c4ddd37c9f6d77a67a8623655" translate="yes" xml:space="preserve">
          <source>Deploying a special &amp;ldquo;migration application&amp;rdquo; to the same hardware as your real application is probably the best way to solve the above issues. It&amp;rsquo;d be amazing if such an application kept track of which migrations ran when, with logs and provided a UI to examine and run them. Perhaps a boilerplate application to do so could be built (if you do so, please let us know and we&amp;rsquo;ll link to it here!).</source>
          <target state="translated">실제 응용 프로그램과 동일한 하드웨어에 특별한&amp;ldquo;마이그레이션 응용 프로그램&amp;rdquo;을 배포하는 것이 위의 문제를 해결하는 가장 좋은 방법 일 것입니다. 이러한 애플리케이션이 언제 어떤 마이그레이션이 언제 실행되었는지 추적하고 로그와 함께이를 검토하고 실행할 수있는 UI를 제공 한 것은 놀라운 일입니다. 아마도 상용구 응용 프로그램을 빌드 할 수 있습니다 (그렇다면 알려 주시면 여기에 링크하겠습니다!).</target>
        </trans-unit>
        <trans-unit id="8a127a207cab7c7e892f216010ce1460e2f7515c" translate="yes" xml:space="preserve">
          <source>Deploying a web application is fundamentally different to releasing most other kinds of software, in that you can deploy as often as you&amp;rsquo;d like to. You don&amp;rsquo;t need to wait for users to do something to get the new version of your software because the server will push it right at them.</source>
          <target state="translated">웹 응용 프로그램 배포는 원하는만큼 자주 배포 할 수 있다는 점에서 대부분의 다른 종류의 소프트웨어를 배포하는 것과 근본적으로 다릅니다. 서버가 소프트웨어를 직접 푸시하므로 사용자가 새 버전의 소프트웨어를 얻기 위해 사용자가 무언가를 수행 할 때까지 기다릴 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="fc47b0019f17d5d1fb71866651d9cc30a1126984" translate="yes" xml:space="preserve">
          <source>Deploying to production</source>
          <target state="translated">프로덕션에 배포</target>
        </trans-unit>
        <trans-unit id="6d1ab959f77e870ad9dc85538a72b0a72d2a88b5" translate="yes" xml:space="preserve">
          <source>Deployment and Monitoring</source>
          <target state="translated">배포 및 모니터링</target>
        </trans-unit>
        <trans-unit id="9494ae5cac16bf136f925a990303724fd1f2e66b" translate="yes" xml:space="preserve">
          <source>Deployment environments</source>
          <target state="translated">배포 환경</target>
        </trans-unit>
        <trans-unit id="cf4aeafe8cc2773e0b3c19c806bd782d567d67ce" translate="yes" xml:space="preserve">
          <source>Deployment options</source>
          <target state="translated">배포 옵션</target>
        </trans-unit>
        <trans-unit id="dc3a04df91d8b86e6c9bd296581aefcc95d6fd3b" translate="yes" xml:space="preserve">
          <source>Deployment process</source>
          <target state="translated">배포 프로세스</target>
        </trans-unit>
        <trans-unit id="2526927f71addd4ab97cf0e0bf0c6f1688642583" translate="yes" xml:space="preserve">
          <source>Describes the current reconnection status. The possible values are &lt;code&gt;connected&lt;/code&gt; (the connection is up and running), &lt;code&gt;connecting&lt;/code&gt; (disconnected and trying to open a new connection), &lt;code&gt;failed&lt;/code&gt; (permanently failed to connect; e.g., the client and server support different versions of DDP), &lt;code&gt;waiting&lt;/code&gt; (failed to connect and waiting to try to reconnect) and &lt;code&gt;offline&lt;/code&gt; (user has disconnected the connection).</source>
          <target state="translated">현재 재 연결 상태를 설명합니다. 가능한 값이 &lt;code&gt;connected&lt;/code&gt; (연결이 시작되어 실행 중), &lt;code&gt;connecting&lt;/code&gt; (연결이 끊어지고 새 연결을 열려고 시도), &lt;code&gt;failed&lt;/code&gt; (영구적으로 연결하지 못했습니다. 예 : 클라이언트와 서버가 다른 버전의 DDP를 지원함), &lt;code&gt;waiting&lt;/code&gt; (실패) 연결하고 다시 연결하려고 대기 중) 및 &lt;code&gt;offline&lt;/code&gt; (사용자가 연결을 끊었습니다).</target>
        </trans-unit>
        <trans-unit id="486b1f571c7731b3d8a92cb14e8477390247ca84" translate="yes" xml:space="preserve">
          <source>Deserialize an EJSON value from its plain JSON representation.</source>
          <target state="translated">일반 JSON 표현에서 EJSON 값을 직렬화 해제하십시오.</target>
        </trans-unit>
        <trans-unit id="a3df263d953f018ade51278383ecd0d2259639e4" translate="yes" xml:space="preserve">
          <source>Designing for the future</source>
          <target state="translated">미래를위한 설계</target>
        </trans-unit>
        <trans-unit id="a37408ccce5e69b61c6cf62c10cd02b4c3fef878" translate="yes" xml:space="preserve">
          <source>Designing your data schema</source>
          <target state="translated">데이터 스키마 설계</target>
        </trans-unit>
        <trans-unit id="46c7ee96bf68fe1982330441b091aaea00a6af6e" translate="yes" xml:space="preserve">
          <source>Destructuring is the technique of using an array or object pattern on the left-hand side of an assignment or declaration, in place of the usual variable or parameter, so that certain sub-properties of the value on the right-hand side will be bound to identifiers that appear within the pattern. Perhaps the simplest example is swapping two variables without using a temporary variable:</source>
          <target state="translated">Destructuring은 일반적인 변수 또는 매개 변수 대신 할당 또는 선언의 왼쪽에 배열 또는 객체 패턴을 사용하여 오른쪽 값의 하위 속성이 바인딩되는 기술입니다. 패턴 내에 나타나는 식별자에. 아마도 가장 간단한 예는 임시 변수를 사용하지 않고 두 변수를 바꾸는 것입니다.</target>
        </trans-unit>
        <trans-unit id="c2a75ba599f1de06def2282390cfed4ffb6d9145" translate="yes" xml:space="preserve">
          <source>Detecting Cordova in your JavaScript code</source>
          <target state="translated">JavaScript 코드에서 Cordova 감지</target>
        </trans-unit>
        <trans-unit id="768f24738bf47f5e3f75de2453eb1d4913e12596" translate="yes" xml:space="preserve">
          <source>Developing on a device</source>
          <target state="translated">장치에서 개발</target>
        </trans-unit>
        <trans-unit id="8dde5061719882cd34c931d8ebbff299d8e84752" translate="yes" xml:space="preserve">
          <source>Development vs. production</source>
          <target state="translated">개발 대 생산</target>
        </trans-unit>
        <trans-unit id="c157d3c38b8e40eb86adafca6ae2c439b67e635b" translate="yes" xml:space="preserve">
          <source>Dictionary of custom headers</source>
          <target state="translated">맞춤 헤더 사전</target>
        </trans-unit>
        <trans-unit id="72a191c8509675bbcd36ad29c37fddf94526a3fc" translate="yes" xml:space="preserve">
          <source>Dictionary of fields to return or exclude.</source>
          <target state="translated">반환하거나 제외 할 필드 사전입니다.</target>
        </trans-unit>
        <trans-unit id="8e122afaa2260b77924e5f0bc161852721f91b7f" translate="yes" xml:space="preserve">
          <source>Dictionary of helper functions by name.</source>
          <target state="translated">이름 별 헬퍼 함수 사전.</target>
        </trans-unit>
        <trans-unit id="024d013e953f3256c3ecedc703b75685f526b47e" translate="yes" xml:space="preserve">
          <source>Dictionary of request parameters to be encoded and placed in the URL (for GETs) or request body (for POSTs). If &lt;code&gt;content&lt;/code&gt; or &lt;code&gt;data&lt;/code&gt; is specified, &lt;code&gt;params&lt;/code&gt; will always be placed in the URL.</source>
          <target state="translated">인코딩되어 URL (GET) 또는 요청 본문 (POST)에 배치 될 요청 매개 변수 사전입니다. 경우 &lt;code&gt;content&lt;/code&gt; 나 &lt;code&gt;data&lt;/code&gt; 지정, &lt;code&gt;params&lt;/code&gt; 항상 URL에 배치됩니다.</target>
        </trans-unit>
        <trans-unit id="d0f4dd379ae8373d39829b52cf98859fc5ee5186" translate="yes" xml:space="preserve">
          <source>Dictionary of strings, headers to add to the HTTP request.</source>
          <target state="translated">HTTP 요청에 추가 할 문자열 사전, 헤더</target>
        </trans-unit>
        <trans-unit id="a89ba32baaa032279329156ef677c25c8b00a129" translate="yes" xml:space="preserve">
          <source>Dictionary whose keys are method names and values are functions.</source>
          <target state="translated">키가 메소드 이름 및 값인 사전은 함수입니다.</target>
        </trans-unit>
        <trans-unit id="fdb859eb8d0207451604e95a445699eca4737ac9" translate="yes" xml:space="preserve">
          <source>Different types of logs</source>
          <target state="translated">다른 유형의 로그</target>
        </trans-unit>
        <trans-unit id="03bf0a54b86fdf600ed47b76df6625dec956b028" translate="yes" xml:space="preserve">
          <source>Disabling</source>
          <target state="translated">Disabling</target>
        </trans-unit>
        <trans-unit id="26c3d7f89c8152c891c76ec5ff1d8bbd29bc30af" translate="yes" xml:space="preserve">
          <source>Disconnect the client from the server.</source>
          <target state="translated">서버에서 클라이언트를 분리하십시오.</target>
        </trans-unit>
        <trans-unit id="c85ae0a48468ace002eeed5c3177ca7eba3ab152" translate="yes" xml:space="preserve">
          <source>Displaying an appropriate UI and completing the process</source>
          <target state="translated">적절한 UI 표시 및 프로세스 완료</target>
        </trans-unit>
        <trans-unit id="9f1141549f7c054b71516937d3febc77d991d59b" translate="yes" xml:space="preserve">
          <source>Docker</source>
          <target state="translated">Docker</target>
        </trans-unit>
        <trans-unit id="ea38dab1ce3be9087e4e441d07022ae29be297e9" translate="yes" xml:space="preserve">
          <source>Documentation for CompileStep is available &lt;a href=&quot;https://github.com/meteor/meteor/wiki/CompileStep-API-for-Build-Plugin-Source-Handlers&quot;&gt;on the GitHub Wiki&lt;/a&gt;.</source>
          <target state="translated">CompileStep에 대한 문서 &lt;a href=&quot;https://github.com/meteor/meteor/wiki/CompileStep-API-for-Build-Plugin-Source-Handlers&quot;&gt;는 GitHub Wiki에서&lt;/a&gt; 구할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="acfde81c2e1c66a031bac2f868ce9f598ecbe625" translate="yes" xml:space="preserve">
          <source>Documentation of EJSON, Meteor's JSON extension.</source>
          <target state="translated">Meteor의 JSON 확장 인 EJSON의 문서</target>
        </trans-unit>
        <trans-unit id="834d2b15392b6536da9cdfac63e33d45755927e6" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's Cordova configuration API.</source>
          <target state="translated">Meteor의 Cordova 구성 API 설명서.</target>
        </trans-unit>
        <trans-unit id="a60c0931de297040af1ba4e4b5bf8b7d30267f47" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's HTTP API.</source>
          <target state="translated">Meteor의 HTTP API 문서.</target>
        </trans-unit>
        <trans-unit id="e7316a26df54a5af397bb5d1e5d8014b309e7890" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's Method (Remote Procedure Call) API.</source>
          <target state="translated">Meteor 's Method (원격 프로 시저 호출) API 문서.</target>
        </trans-unit>
        <trans-unit id="db47034b174dc50220a1a8dd49117d3337a09005" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's `accounts-ui` package.</source>
          <target state="translated">Meteor의 accounts-ui 패키지에 대한 문서.</target>
        </trans-unit>
        <trans-unit id="589fffcead074f032206dcc119ba2c8fd6527135" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's `apollo` package.</source>
          <target state="translated">Meteor의 아폴로 패키지에 대한 문서.</target>
        </trans-unit>
        <trans-unit id="6405306b2e7b60271c2feaf9255ab8fb183935c8" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's `appcache` package.</source>
          <target state="translated">Meteor의 'appcache'패키지 문서.</target>
        </trans-unit>
        <trans-unit id="0644ff85382ecfe92f8caca81723552e379422f9" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's `audit-argument-checks` package.</source>
          <target state="translated">Meteor의 'audit-argument-checks'패키지 문서.</target>
        </trans-unit>
        <trans-unit id="ce08bbe3ad809b10a0c6a28ff0736165e1b424fe" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's `bundle-visualizer` package.</source>
          <target state="translated">Meteor의 '번들-비주얼 라이저'패키지 문서.</target>
        </trans-unit>
        <trans-unit id="7c29b2970e1199a1dc8cf99c36fd871aa8170ef8" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's `coffeescript` package.</source>
          <target state="translated">Meteor의 '커피 스크립트'패키지 문서.</target>
        </trans-unit>
        <trans-unit id="30146bfaa63584bff0b1ca35ff903e0ea04e20ed" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's `dynamic-import` package.</source>
          <target state="translated">Meteor의 'dynamic-import'패키지 문서.</target>
        </trans-unit>
        <trans-unit id="ffa966eff9d1ed18b83b0588602477d607840a9f" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's `ecmascript` package.</source>
          <target state="translated">Meteor의 'ecmascript'패키지 문서.</target>
        </trans-unit>
        <trans-unit id="3c188a1260c075b519ed3040cb3364127e3e5edd" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's `jquery` package.</source>
          <target state="translated">Meteor의`jquery` 패키지 문서.</target>
        </trans-unit>
        <trans-unit id="b3fde644f8e7a1877fbf194fa56ce0268367a35a" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's `less` package.</source>
          <target state="translated">Meteor의`less` 패키지에 대한 문서.</target>
        </trans-unit>
        <trans-unit id="3f7a98a81cca58e4c9d7950dbfd7470d5a1fcf28" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's `markdown` package.</source>
          <target state="translated">Meteor의`markdown` 패키지 문서.</target>
        </trans-unit>
        <trans-unit id="a685b078cd280447fbb874a167b51dfc3a9295ff" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's `modules` package.</source>
          <target state="translated">Meteor의 '모듈'패키지 문서.</target>
        </trans-unit>
        <trans-unit id="c4f5aeb625a0fe5bb662c97f4ac42ebc02c8ab33" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's `oauth-encryption` package.</source>
          <target state="translated">Meteor의 oauth-encryption 패키지에 대한 문서.</target>
        </trans-unit>
        <trans-unit id="7789eb3783ba5b678dfae5eabff7560e4929fb57" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's `random` package.</source>
          <target state="translated">Meteor의 '무작위'패키지 문서.</target>
        </trans-unit>
        <trans-unit id="961025181b1d558653db03f49b82242d93b79cbb" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's `server-render` package.</source>
          <target state="translated">Meteor의`server-render` 패키지 문서.</target>
        </trans-unit>
        <trans-unit id="fa47a7f9ba5ec10a7143fbeb2cc37978df174906" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's `spacebars` package.</source>
          <target state="translated">Meteor의 스페이스 바 패키지 문서.</target>
        </trans-unit>
        <trans-unit id="843ffaf84788d5ba9400193998c8cc8638aa5a8d" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's `underscore` package.</source>
          <target state="translated">Meteor의 '밑줄'패키지 문서.</target>
        </trans-unit>
        <trans-unit id="b2de49727af30850ba45052643a90bc0f62cfbb2" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's `webapp` package.</source>
          <target state="translated">Meteor의`webapp` 패키지 문서.</target>
        </trans-unit>
        <trans-unit id="aae3069a2e14eee4ba8c64aa7cd7c76360a7dabf" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's client-side session API.</source>
          <target state="translated">Meteor의 클라이언트 측 세션 API 문서.</target>
        </trans-unit>
        <trans-unit id="ef05c9731ab7a8c05505d0ae09fd1853b759404c" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's email API.</source>
          <target state="translated">Meteor의 이메일 API 문서.</target>
        </trans-unit>
        <trans-unit id="597db727bc7bfeda337fbbcc262158b5c69a2e71" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's package API.</source>
          <target state="translated">Meteor 패키지 API 문서.</target>
        </trans-unit>
        <trans-unit id="a896b2c4ae0899643dafe49a403cf8dbbcbe5660" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's password-based accounts API.</source>
          <target state="translated">Meteor의 비밀번호 기반 계정 API 문서.</target>
        </trans-unit>
        <trans-unit id="edf3e67c4a3952b1a95dd2b01e1f01ef49707c85" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's publication and subscription API.</source>
          <target state="translated">Meteor의 발행 및 구독 API 문서.</target>
        </trans-unit>
        <trans-unit id="fab9fed53e4b5e4db128b02d6c38a4e81fec4d9a" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's template API.</source>
          <target state="translated">Meteor의 템플릿 API 문서.</target>
        </trans-unit>
        <trans-unit id="004bae12179b0892dc869bf241973bd449fc2291" translate="yes" xml:space="preserve">
          <source>Documentation of Meteor's timeout APIs.</source>
          <target state="translated">Meteor의 타임 아웃 API 문서.</target>
        </trans-unit>
        <trans-unit id="1d3c71fb18be236b0c3b216c72da22bbf171d060" translate="yes" xml:space="preserve">
          <source>Documentation of ReactiveVar, a simple reactive variable package.</source>
          <target state="translated">간단한 반응성 변수 패키지 인 ReactiveVar의 문서</target>
        </trans-unit>
        <trans-unit id="0df4b595c92c66d0f770696762f15e74b2c6ab42" translate="yes" xml:space="preserve">
          <source>Documentation of Tracker, Meteor's reactive system.</source>
          <target state="translated">Meteor의 리 액티브 시스템 인 Tracker의 문서.</target>
        </trans-unit>
        <trans-unit id="38f5252626829c090c4f8ca6a480c6b6987850d5" translate="yes" xml:space="preserve">
          <source>Documentation of core Meteor functions.</source>
          <target state="translated">핵심 Meteor 기능에 대한 문서.</target>
        </trans-unit>
        <trans-unit id="fb97574ce2ab25649f5c5af7c32102f48207852e" translate="yes" xml:space="preserve">
          <source>Documentation of how to use Blaze, Meteor's reactive rendering engine.</source>
          <target state="translated">Meteor의 리 액티브 렌더링 엔진 인 Blaze 사용 방법에 대한 문서.</target>
        </trans-unit>
        <trans-unit id="0cef6e1d9fa5136421bc6a17497a48470b566da7" translate="yes" xml:space="preserve">
          <source>Documentation of how to use Meteor's accounts functionality.</source>
          <target state="translated">Meteor의 계정 기능을 사용하는 방법에 대한 설명서.</target>
        </trans-unit>
        <trans-unit id="2d5c65c167004b16396603646d8f1bb0b1f95363" translate="yes" xml:space="preserve">
          <source>Documentation of how to use assets in Meteor.</source>
          <target state="translated">Meteor에서 자산을 사용하는 방법에 대한 문서.</target>
        </trans-unit>
        <trans-unit id="1897204012d1dabd9d7fdf53819ac6f9d1431c8e" translate="yes" xml:space="preserve">
          <source>Documentation of how to use the Accounts client to connect to other servers.</source>
          <target state="translated">계정 클라이언트를 사용하여 다른 서버에 연결하는 방법에 대한 설명서</target>
        </trans-unit>
        <trans-unit id="cf6e5a5057bbb42ecf16d9b451dac31e77f78753" translate="yes" xml:space="preserve">
          <source>Documentation of the various command line options of the Meteor tool.</source>
          <target state="translated">Meteor 도구의 다양한 명령 행 옵션에 대한 문서.</target>
        </trans-unit>
        <trans-unit id="138ec9a198bd238e50c4908a73a9a7a43931bad4" translate="yes" xml:space="preserve">
          <source>Documentation on how to use Meteor's client-server connection.</source>
          <target state="translated">Meteor의 클라이언트-서버 연결 사용 방법에 대한 설명서.</target>
        </trans-unit>
        <trans-unit id="7873ddcb27b8d0257b13d55086bda5eef7f23809" translate="yes" xml:space="preserve">
          <source>Documentation on how to use Meteor's database collections.</source>
          <target state="translated">Meteor의 데이터베이스 컬렉션을 사용하는 방법에 대한 설명서.</target>
        </trans-unit>
        <trans-unit id="79f88a9bb9f4ec699c8ec64acf057a2ef9a2bf7c" translate="yes" xml:space="preserve">
          <source>Domain name</source>
          <target state="translated">도메인 이름</target>
        </trans-unit>
        <trans-unit id="646276576f2593ff66cf8d39941838c74b0d780f" translate="yes" xml:space="preserve">
          <source>Domain whitelisting</source>
          <target state="translated">도메인 화이트리스트</target>
        </trans-unit>
        <trans-unit id="3f7ad4422df3c6392fffc57c27b60800ac5568a6" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t forget to run &lt;a href=&quot;http://docs.meteor.com/#/full/meteoradd&quot;&gt;&lt;code&gt;meteor add [my-package]&lt;/code&gt;&lt;/a&gt; once you have finished developing your package in order to use it; this applies if the package is a local package for internal use only or if you have published the package to Atmosphere.</source>
          <target state="translated">패키지를 사용하기 위해 패키지 개발을 마치면 &lt;a href=&quot;http://docs.meteor.com/#/full/meteoradd&quot;&gt; &lt;code&gt;meteor add [my-package]&lt;/code&gt; &lt;/a&gt; 를 실행하는 것을 잊지 마십시오 . 이는 패키지가 내부 전용 로컬 패키지이거나 Atmosphere에 패키지를 게시 한 경우에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="add8cb5f58427a4d09b86fa7aa711b53ee4f8654" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t leak any secret information to the client.</source>
          <target state="translated">비밀 정보를 클라이언트에게 유출하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="2753c6d864f1a309b95ba1e0139a98ccad207465" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t pass userId from the client</source>
          <target state="translated">클라이언트에서 userId를 전달하지 마십시오</target>
        </trans-unit>
        <trans-unit id="487dea8c1e47a8a71d8493c3009ee0431663a4fa" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t take generic arguments; make sure you know exactly what your publication is getting from the client.</source>
          <target state="translated">일반적인 주장을하지 마십시오. 고객이 발행 한 자료를 정확히 알고 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="c0b12a907a18131618d7729f953fe0efd183bd94" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t use &lt;a href=&quot;http://blazejs.org/guide/spacebars.html#Rendering-raw-HTML&quot;&gt;raw HTML inclusion in Blaze&lt;/a&gt; unless you really know what you are doing.</source>
          <target state="translated">실제로 수행중인 작업을 모르는 경우 &lt;a href=&quot;http://blazejs.org/guide/spacebars.html#Rendering-raw-HTML&quot;&gt;Blaze에 원시 HTML 포함을&lt;/a&gt; 사용하지 마십시오 .</target>
        </trans-unit>
        <trans-unit id="eb98ab531156c15fe6a38e2e382a86313252da87" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t use profile</source>
          <target state="translated">프로필을 사용하지 마십시오</target>
        </trans-unit>
        <trans-unit id="03970f297b18e936293bd5b43bf940a9cde80bf7" translate="yes" xml:space="preserve">
          <source>Double-braced Tags</source>
          <target state="translated">이중 괄호 태그</target>
        </trans-unit>
        <trans-unit id="7ed55e6fff6dc92d172c281fb92089d0de7daf66" translate="yes" xml:space="preserve">
          <source>Double-braced and triple-braced template tags take any number of positional and keyword arguments:</source>
          <target state="translated">이중 괄호 및 삼중 괄호 템플릿 태그는 여러 위치 및 키워드 인수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="e653b40b746a45b58c2b5f59e8007c2e5bcf9bc5" translate="yes" xml:space="preserve">
          <source>Double-click.</source>
          <target state="translated">Double-click.</target>
        </trans-unit>
        <trans-unit id="d44f6ace885aab2af027419f3d96b7f0a4b2ed4b" translate="yes" xml:space="preserve">
          <source>Download the version that you need from the above links</source>
          <target state="translated">위 링크에서 필요한 버전을 다운로드하십시오.</target>
        </trans-unit>
        <trans-unit id="25db32e4f925e860c7db5abc9252a9671f0f6941" translate="yes" xml:space="preserve">
          <source>Downloading updates is done incrementally, so we only download assets that have actually changed (based on a content hash). In addition, if we haven&amp;rsquo;t been able to download all changed assets in one go, because of a network failure or because the app was closed before we finished, we will reuse the ones that have already completed downloading the next time the app starts up or the network connection is restored.</source>
          <target state="translated">업데이트 다운로드는 점진적으로 이루어 지므로 실제로 콘텐츠 해시를 기반으로 변경된 자산 만 다운로드합니다. 또한 네트워크 장애 또는 종료 전에 앱이 종료되어 변경된 자산을 모두 한 번에 다운로드 할 수없는 경우 다음에 앱을 시작할 때 이미 다운로드를 완료 한 자산을 재사용합니다 또는 네트워크 연결이 복원되었습니다.</target>
        </trans-unit>
        <trans-unit id="5ac3cd9e565d2af660d6c302ac7812e098f47e74" translate="yes" xml:space="preserve">
          <source>Driver packages</source>
          <target state="translated">드라이버 패키지</target>
        </trans-unit>
        <trans-unit id="bf76ee5b9a5d42a5a6d8038e304829a3ccd1db8e" translate="yes" xml:space="preserve">
          <source>Drop-in UI without routing</source>
          <target state="translated">라우팅없는 드롭 인 UI</target>
        </trans-unit>
        <trans-unit id="8c5ec4ec4f5abbd6dd9295c1fc970cfc52e23ad3" translate="yes" xml:space="preserve">
          <source>Due to an upgrade in the underlying dependency for the &lt;a href=&quot;http://docs.meteor.com/api/email.html&quot;&gt;&lt;code&gt;email&lt;/code&gt; package&lt;/a&gt;, it is necessary to check that your &lt;code&gt;MAIL_URL&lt;/code&gt; is using the correct scheme (e.g. &lt;code&gt;smtps://&lt;/code&gt; or &lt;code&gt;smtp://&lt;/code&gt;).</source>
          <target state="translated">&lt;a href=&quot;http://docs.meteor.com/api/email.html&quot;&gt; &lt;code&gt;email&lt;/code&gt; 패키지&lt;/a&gt; 의 기본 종속성이 업그레이드 &lt;code&gt;MAIL_URL&lt;/code&gt; 이 올바른 체계 (예 : &lt;code&gt;smtps://&lt;/code&gt; 또는 &lt;code&gt;smtp://&lt;/code&gt; )를 사용하고 있는지 확인해야합니다 .</target>
        </trans-unit>
        <trans-unit id="0b83d2f17807f5a0249d5d723222fa45d535f5b9" translate="yes" xml:space="preserve">
          <source>During development, the Meteor &lt;a href=&quot;build-tool&quot;&gt;build tool&lt;/a&gt; detects any relevant file changes, recompiles the necessary files, and notifies all connected clients a new version is available. Clients can then automatically reload the app, switching over to the new version of the code. This is referred to as &lt;em&gt;hot code push&lt;/em&gt;.</source>
          <target state="translated">개발 중에 Meteor &lt;a href=&quot;build-tool&quot;&gt;빌드 도구&lt;/a&gt; 는 관련 파일 변경 사항을 감지하고 필요한 파일을 다시 컴파일하며 연결된 모든 클라이언트에게 새 버전을 사용할 수 있음을 알립니다. 그런 다음 클라이언트는 자동으로 앱을 다시로드하여 새 버전의 코드로 전환 할 수 있습니다. 이를 &lt;em&gt;핫 코드 푸시&lt;/em&gt; 라고합니다 .</target>
        </trans-unit>
        <trans-unit id="96c366ad65caaa5e16bd7412d1c7573b0d692229" translate="yes" xml:space="preserve">
          <source>During development, the Meteor &lt;a href=&quot;build-tool&quot;&gt;build tool&lt;/a&gt; integrates with Cordova to run your app on a physical device or the iOS Simulator/Android emulator. In addition to starting a development server and MongoDB instance as usual, &lt;code&gt;meteor run&lt;/code&gt; accepts arguments to run the app on one or more mobile targets:</source>
          <target state="translated">개발 중에 Meteor &lt;a href=&quot;build-tool&quot;&gt;빌드 도구&lt;/a&gt; 는 Cordova와 통합되어 물리적 장치 또는 iOS 시뮬레이터 / Android 에뮬레이터에서 앱을 실행합니다. &lt;code&gt;meteor run&lt;/code&gt; 은 평소와 같이 개발 서버 및 MongoDB 인스턴스를 시작하는 것 외에도 하나 이상의 모바일 대상에서 앱을 실행하는 인수를 허용합니다.</target>
        </trans-unit>
        <trans-unit id="f7072ab162fa0bd2d88ce0eb2a5e45c09b0125d0" translate="yes" xml:space="preserve">
          <source>Dynamic Attributes</source>
          <target state="translated">동적 속성</target>
        </trans-unit>
        <trans-unit id="64e8d2d9158f3e8c12250f3182864f19f2273c87" translate="yes" xml:space="preserve">
          <source>ECMAScript, the language standard on which every browser&amp;rsquo;s JavaScript implementation is based, has moved to yearly standards releases. The newest complete standard is ES2015, which includes some long-awaited and very significant improvements to the JavaScript language. Meteor&amp;rsquo;s &lt;code&gt;ecmascript&lt;/code&gt; package compiles this standard down to regular JavaScript that all browsers can understand using the &lt;a href=&quot;https://babeljs.io/&quot;&gt;popular Babel compiler&lt;/a&gt;. It&amp;rsquo;s fully backwards compatible to &amp;ldquo;regular&amp;rdquo; JavaScript, so you don&amp;rsquo;t have to use any new features if you don&amp;rsquo;t want to. We&amp;rsquo;ve put a lot of effort into making advanced browser features like source maps work great with this package, so that you can debug your code using your favorite developer tools without having to see any of the compiled output.</source>
          <target state="translated">모든 브라우저의 JavaScript 구현이 기반으로하는 언어 표준 인 ECMAScript는 매년 표준 릴리스로 이동했습니다. 가장 최신의 완전한 표준은 ES2015이며, JavaScript 언어에 대한 대망의 개선 사항이 포함되어 있습니다. Meteor의 &lt;code&gt;ecmascript&lt;/code&gt; 패키지는이 표준을 일반적인 JavaScript로 컴파일하여 모든 브라우저에서 &lt;a href=&quot;https://babeljs.io/&quot;&gt;널리&lt;/a&gt; 사용 되는 Babel 컴파일러를 사용하여 이해할 수 있습니다 . &quot;일반적인&quot;JavaScript와 완벽하게 호환되므로 원하지 않는 경우 새로운 기능을 사용할 필요가 없습니다. 소스 맵과 같은 고급 브라우저 기능이이 패키지에서 잘 작동하도록 많은 노력을 기울여 컴파일 된 출력을 보지 않고도 자주 사용하는 개발자 도구를 사용하여 코드를 디버깅 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a28c94d14495fde8cec538c695bcea0434b0479f" translate="yes" xml:space="preserve">
          <source>EJSON</source>
          <target state="translated">EJSON</target>
        </trans-unit>
        <trans-unit id="9c8572b82261f4cde650fd2f7a1bdf4750a04f18" translate="yes" xml:space="preserve">
          <source>EJSON is an extension of JSON to support more types. It supports all JSON-safe types, as well as:</source>
          <target state="translated">EJSON은 더 많은 유형을 지원하기위한 JSON 확장입니다. 모든 JSON 안전 유형과 다음을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="cd11323c6081a82a630bd062e7d2a0c115725cec" translate="yes" xml:space="preserve">
          <source>ERROR, string is not an attribute name</source>
          <target state="translated">ERROR, 문자열은 속성 이름이 아닙니다</target>
        </trans-unit>
        <trans-unit id="5be8585e8dda5d16a9d3e66f70a40dc596a018af" translate="yes" xml:space="preserve">
          <source>ES2015</source>
          <target state="translated">ES2015</target>
        </trans-unit>
        <trans-unit id="947430ab34f34ae6f2058bd6c3894399afc389b4" translate="yes" xml:space="preserve">
          <source>ES2015 &lt;code&gt;export&lt;/code&gt; statements like these:</source>
          <target state="translated">다음과 같은 ES2015 &lt;code&gt;export&lt;/code&gt; 명세서 :</target>
        </trans-unit>
        <trans-unit id="e558deafa5488e545da2990dd430704575be606c" translate="yes" xml:space="preserve">
          <source>ES2015 &lt;code&gt;import&lt;/code&gt; lines like these:</source>
          <target state="translated">다음과 같은 ES2015 &lt;code&gt;import&lt;/code&gt; 라인 :</target>
        </trans-unit>
        <trans-unit id="06786b63c50ff431fbc07d64196f57c0f6d82721" translate="yes" xml:space="preserve">
          <source>ES2015 modules</source>
          <target state="translated">ES2015 모듈</target>
        </trans-unit>
        <trans-unit id="9a3ca754d4b3cab9f7f14c519febd9ac7d43dc58" translate="yes" xml:space="preserve">
          <source>ES2015+ (recommended)</source>
          <target state="translated">ES2015 + (권장)</target>
        </trans-unit>
        <trans-unit id="3633746b067241666bc462dcfe7a24ff23a8db68" translate="yes" xml:space="preserve">
          <source>Each</source>
          <target state="translated">Each</target>
        </trans-unit>
        <trans-unit id="b95ba0ae036f0f29e6cad291a35b891ca4b78fa5" translate="yes" xml:space="preserve">
          <source>Each Atmosphere package that you use in your app exists in its own separate namespace, meaning that it sees only its own global variables and any variables provided by the packages that it specifically uses. When a top-level variable is defined in a package, it is either declared with local scope or package scope.</source>
          <target state="translated">앱에서 사용하는 각 Atmosphere 패키지는 별도의 네임 스페이스에 존재합니다. 즉, 고유 한 전역 변수와 패키지에서 제공하는 모든 변수 만 볼 수 있습니다. 최상위 변수가 패키지에 정의되면 로컬 범위 또는 패키지 범위로 선언됩니다.</target>
        </trans-unit>
        <trans-unit id="dfa7034e1d3f569958b955bba2409f3d8c9bb463" translate="yes" xml:space="preserve">
          <source>Each Meteor Method invocation shares a random generator seed with the client that called the Method, so any IDs generated by the client and server Methods are guaranteed to be the same. This means you can safely use the IDs generated on the client to do things while the Method is being sent to the server, and be confident that the IDs will be the same when the Method finishes. One case where this is particularly useful is if you want to create a new document in the database, then immediately redirect to a URL that contains that new document&amp;rsquo;s ID.</source>
          <target state="translated">각 Meteor Method 호출은 Method를 호출 한 클라이언트와 랜덤 생성기 시드를 공유하므로 클라이언트와 서버 Method가 생성 한 모든 ID는 동일해야합니다. 즉, 메소드가 서버로 전송되는 동안 클라이언트에서 생성 된 ID를 안전하게 사용하여 메소드를 완료 할 때 ID가 동일 함을 확신 할 수 있습니다. 데이터베이스에서 새 문서를 작성하려는 경우 새 문서의 ID가 포함 된 URL로 즉시 리디렉션하는 것이 특히 유용한 경우입니다.</target>
        </trans-unit>
        <trans-unit id="533c3a0190649ec10759c8923533d157059db4cb" translate="yes" xml:space="preserve">
          <source>Each and With</source>
          <target state="translated">각각과</target>
        </trans-unit>
        <trans-unit id="e836e62ecfea337b06c631d3a534614caf5b3e7a" translate="yes" xml:space="preserve">
          <source>Each file in the list is an object that has all the methods provided by all build plugins, described above.</source>
          <target state="translated">목록의 각 파일은 위에서 설명한 모든 빌드 플러그인에서 제공하는 모든 메소드가있는 오브젝트입니다.</target>
        </trans-unit>
        <trans-unit id="582993d8b7d6d1beae087f53647245de1bb5e141" translate="yes" xml:space="preserve">
          <source>Each file in your app should represent one logical module. Avoid having catch-all utility modules that export a variety of unrelated functions and symbols. Often, this can mean that it&amp;rsquo;s good to have one class, UI component, or collection per file, but there are cases where it is OK to make an exception, for example if you have a UI component with a small sub-component that isn&amp;rsquo;t used outside of that file.</source>
          <target state="translated">앱의 각 파일은 하나의 논리 모듈을 나타내야합니다. 다양한 관련없는 기능 및 기호를 내보내는 범용 유틸리티 모듈을 사용하지 마십시오. 종종 이는 파일 당 하나의 클래스, UI 구성 요소 또는 콜렉션을 갖는 것이 좋지만, 예를 들어 작은 하위 구성 요소가있는 UI 구성 요소가있는 경우 예외를 작성해도 괜찮은 경우가 있습니다. 해당 파일 외부에서 사용되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="51f4f09922f6991d8a2cf5f6a7e6b68c5529c2fc" translate="yes" xml:space="preserve">
          <source>Each of the options correspond to a key in the app's core configuration as described in the &lt;a href=&quot;http://cordova.apache.org/docs/en/5.1.1/config_ref_index.md.html#The%20config.xml%20File_core_configuration_elements&quot;&gt;Cordova documentation&lt;/a&gt;.</source>
          <target state="translated">각 옵션은 &lt;a href=&quot;http://cordova.apache.org/docs/en/5.1.1/config_ref_index.md.html#The%20config.xml%20File_core_configuration_elements&quot;&gt;Cordova 설명서에&lt;/a&gt; 설명 된대로 앱 핵심 구성의 키에 해당합니다 .</target>
        </trans-unit>
        <trans-unit id="b7b3e36e928eae42b236ef880ae1a1410e708e15" translate="yes" xml:space="preserve">
          <source>Each of these points will have their own section below.</source>
          <target state="translated">이러한 각 포인트는 아래에 자체 섹션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="066fa621ea0e0f7cc2fdd52de3fac86a2a813741" translate="yes" xml:space="preserve">
          <source>Each template has a local dictionary of helpers that are made available to it, and this call specifies helpers to add to the template&amp;rsquo;s dictionary.</source>
          <target state="translated">각 템플릿에는 사용할 수있는 도우미의 로컬 사전이 있으며이 호출은 템플릿의 사전에 추가 할 도우미를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="b192ab33cb35cc84f829fe0dc7ffbade8d4e7f25" translate="yes" xml:space="preserve">
          <source>Each template tag&amp;rsquo;s DOM is updated automatically when it evaluates to a new value, while avoiding unnecessary re-rendering as much as possible. For example, a double-braced tag replace its text node when its text value changes. An &lt;code&gt;#if&lt;/code&gt; re-renders its contents only when the condition changes from truthy to falsy or vice versa.</source>
          <target state="translated">각 템플릿 태그의 DOM은 새로운 값으로 평가 될 때 자동으로 업데이트되며, 불필요한 재 렌더링을 최대한 많이 피합니다. 예를 들어, 이중 괄호 태그는 텍스트 값이 변경 될 때 텍스트 노드를 대체합니다. &lt;code&gt;#if&lt;/code&gt; 조건이 성립 falsy 또는 그 truthy로의 변경만을 그 내용을 다시 - 렌더링한다.</target>
        </trans-unit>
        <trans-unit id="4461a43e600cdf5efa1eff9d8eea135b9ba936bc" translate="yes" xml:space="preserve">
          <source>Each time a computation runs, it may access various reactive data sources that serve as inputs to the computation, which are called its dependencies. At some future time, one of these dependencies may trigger the computation to be rerun by invalidating it. When this happens, the dependencies are cleared, and the computation is scheduled to be rerun at flush time.</source>
          <target state="translated">계산이 실행될 때마다 계산에 대한 입력으로 사용되는 다양한 반응 형 데이터 소스에 액세스 할 수 있으며이를 종속이라고합니다. 나중에 이러한 종속성 중 하나가 계산을 무효화하여 다시 실행되도록 트리거 할 수 있습니다. 이 경우 종속성이 지워지고 플러시시 계산이 다시 실행되도록 예약됩니다.</target>
        </trans-unit>
        <trans-unit id="62008429c8dd1d3652c7ed3660c0635b6f1bbc12" translate="yes" xml:space="preserve">
          <source>Each-in</source>
          <target state="translated">Each-in</target>
        </trans-unit>
        <trans-unit id="1626bf53584539804234548386732c0103e38a63" translate="yes" xml:space="preserve">
          <source>Easily call the Method with a custom user ID, especially in tests (as recommended by the &lt;a href=&quot;https://www.discovermeteor.com/blog/meteor-pattern-two-tiered-methods/&quot;&gt;Discover Meteor two-tiered methods pattern&lt;/a&gt;).</source>
          <target state="translated">특히 테스트 ( &lt;a href=&quot;https://www.discovermeteor.com/blog/meteor-pattern-two-tiered-methods/&quot;&gt;Discover Meteor 2 계층 방법 패턴에서&lt;/a&gt; 권장)에서 사용자 정의 사용자 ID로 메소드를 쉽게 호출하십시오 .</target>
        </trans-unit>
        <trans-unit id="7432e47af5fe13154ca38cc8cbed143518940e8c" translate="yes" xml:space="preserve">
          <source>Easily override the Method for testing.</source>
          <target state="translated">테스트 방법을 쉽게 재정의합니다.</target>
        </trans-unit>
        <trans-unit id="443dfa68497446993338ef19371adfe7de8fd239" translate="yes" xml:space="preserve">
          <source>Easy to read code</source>
          <target state="translated">읽기 쉬운 코드</target>
        </trans-unit>
        <trans-unit id="177d47837a0b840025675413838d81f5e804ebfe" translate="yes" xml:space="preserve">
          <source>Edit button</source>
          <target state="translated">편집 버튼</target>
        </trans-unit>
        <trans-unit id="4a0d256ac1f7d5b2fbe2786ad72aceb5a36c1945" translate="yes" xml:space="preserve">
          <source>Either a string interpreted as a username or an email; or an object with a single key: &lt;code&gt;email&lt;/code&gt;, &lt;code&gt;username&lt;/code&gt; or &lt;code&gt;id&lt;/code&gt;. Username or email match in a case insensitive manner.</source>
          <target state="translated">사용자 이름 또는 이메일로 해석되는 문자열입니다. 또는 &lt;code&gt;email&lt;/code&gt; , &lt;code&gt;username&lt;/code&gt; 또는 &lt;code&gt;id&lt;/code&gt; 단일 키를 가진 객체 . 대소 문자를 구분하지 않고 사용자 이름 또는 이메일이 일치합니다.</target>
        </trans-unit>
        <trans-unit id="bd7f01b2756313501a3cac451fc5658f893b3805" translate="yes" xml:space="preserve">
          <source>Either the &lt;code&gt;onLogin&lt;/code&gt; or the &lt;code&gt;onLoginFailure&lt;/code&gt; callbacks will be called for each login attempt. The &lt;code&gt;onLogin&lt;/code&gt; callbacks are called after the user has been successfully logged in. The &lt;code&gt;onLoginFailure&lt;/code&gt; callbacks are called after a login attempt is denied.</source>
          <target state="translated">어느 &lt;code&gt;onLogin&lt;/code&gt; 또는 &lt;code&gt;onLoginFailure&lt;/code&gt; 의 콜백은 각 로그인 시도에 호출됩니다. &lt;code&gt;onLogin&lt;/code&gt; 사용자가 성공적으로 로그인 한 후 콜백이 호출됩니다. &lt;code&gt;onLoginFailure&lt;/code&gt; 의 로그인 시도가 거부 된 후 콜백이 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="84add5b2952787581cb9a8851eef63d1ec75d22b" translate="yes" xml:space="preserve">
          <source>Email</source>
          <target state="translated">Email</target>
        </trans-unit>
        <trans-unit id="d9810544672e482b9c0025bd93656d66a8227379" translate="yes" xml:space="preserve">
          <source>Email flows</source>
          <target state="translated">이메일 흐름</target>
        </trans-unit>
        <trans-unit id="51278b6eba2be0b22672652bcc5c10e5de75a003" translate="yes" xml:space="preserve">
          <source>Email works out of the box with accounts UI packages</source>
          <target state="translated">이메일은 계정 UI 패키지와 함께 즉시 작동합니다</target>
        </trans-unit>
        <trans-unit id="492a42a58c56429f2ceed9469c63b20f75dd78ab" translate="yes" xml:space="preserve">
          <source>Enables &lt;code&gt;class&lt;/code&gt; syntax:</source>
          <target state="translated">사용 가능 &lt;code&gt;class&lt;/code&gt; 구문 :</target>
        </trans-unit>
        <trans-unit id="1bc70e3d745a9fd593f1cca2126119e8c844da25" translate="yes" xml:space="preserve">
          <source>Enables multi-line strings delimited by backticks instead of quotation marks, with variable interpolation:</source>
          <target state="translated">변수 보간을 사용하여 따옴표 대신 백틱으로 구분 된 여러 줄 문자열을 활성화합니다.</target>
        </trans-unit>
        <trans-unit id="50d0b59c60affb6fcc34731807f626458d423349" translate="yes" xml:space="preserve">
          <source>Enables the &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; keywords as alternatives to &lt;code&gt;var&lt;/code&gt;. The key difference is that variables defined using &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt; are visible only within the block where they are declared, rather than being visible anywhere in the enclosing function. For example:</source>
          <target state="translated">수 있도록 &lt;code&gt;let&lt;/code&gt; 및 &lt;code&gt;const&lt;/code&gt; 를 대안으로 키워드 &lt;code&gt;var&lt;/code&gt; . 주요 차이점은 &lt;code&gt;let&lt;/code&gt; 또는 &lt;code&gt;const&lt;/code&gt; 를 사용하여 정의 된 변수 는 선언 된 블록 내에서만 표시되며 둘러싸는 함수의 어느 곳에 나 표시되지 않습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ab6c4d9a6009e703e713b51ae1e148dbd59d9898" translate="yes" xml:space="preserve">
          <source>Enabling</source>
          <target state="translated">Enabling</target>
        </trans-unit>
        <trans-unit id="edcd21d929a7fcb6f80ae83013a137599ac3407b" translate="yes" xml:space="preserve">
          <source>Enabling SEO</source>
          <target state="translated">SEO 활성화</target>
        </trans-unit>
        <trans-unit id="1e83b0c6a54d0f7fd927f49892653c00be248568" translate="yes" xml:space="preserve">
          <source>Enabling modules</source>
          <target state="translated">모듈 활성화</target>
        </trans-unit>
        <trans-unit id="0ccf4930da45311cdc3e388583c8742399b9ccc7" translate="yes" xml:space="preserve">
          <source>Encryption of data in-flight and at-rest</source>
          <target state="translated">기내 및 유휴 데이터 암호화</target>
        </trans-unit>
        <trans-unit id="ac4bbc3dc7765a7722e80ab3f3494d5b6a305392" translate="yes" xml:space="preserve">
          <source>Encrypts sensitive login secrets stored in the database such as a login service&amp;rsquo;s application secret key and users&amp;rsquo; access tokens.</source>
          <target state="translated">로그인 서비스의 애플리케이션 비밀 키 및 사용자 액세스 토큰과 같이 데이터베이스에 저장된 민감한 로그인 비밀을 암호화합니다.</target>
        </trans-unit>
        <trans-unit id="9db7b3bb07b4e0990a33d7e2756791eb6b029b3c" translate="yes" xml:space="preserve">
          <source>Enforce exact version dependencies between packages using Meteor&amp;rsquo;s &lt;a href=&quot;writing-atmosphere-packages.md#version-constraints&quot;&gt;constraint resolver&lt;/a&gt;</source>
          <target state="translated">Meteor를 사용하여 패키지간에 정확한 버전 종속성을 적용하십시오. &lt;a href=&quot;writing-atmosphere-packages.md#version-constraints&quot;&gt; Constraints Resolver를&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="44c833bc2f9dbe0b7bc23634f3014760a8bee23f" translate="yes" xml:space="preserve">
          <source>Ensure that your &lt;a href=&quot;#meteor_absoluteurl&quot;&gt;&lt;code&gt;$ROOT_URL&lt;/code&gt;&lt;/a&gt; matches the authorized domain and callback URL that you configure with the external service (for instance, if you are running Meteor behind a proxy server, &lt;code&gt;$ROOT_URL&lt;/code&gt; should be the externally-accessible URL, not the URL inside your proxy).</source>
          <target state="translated">&lt;a href=&quot;#meteor_absoluteurl&quot;&gt; &lt;code&gt;$ROOT_URL&lt;/code&gt; &lt;/a&gt; 이 외부 서비스로 구성한 인증 된 도메인 및 콜백 URL과 일치 하는지 확인하십시오 (예 : 프록시 서버 뒤에서 Meteor를 실행중인 경우 &lt;code&gt;$ROOT_URL&lt;/code&gt; 은 프록시 내부의 URL이 아닌 외부 액세스 가능한 URL이어야 함) .</target>
        </trans-unit>
        <trans-unit id="3631390663783b1262378940294087c8d90ab021" translate="yes" xml:space="preserve">
          <source>Entire books have been written on the subject of testing, so we will simply touch on some basics of testing here. The important thing to consider when writing a test is what part of the application you are trying to test, and how you are verifying the behavior works.</source>
          <target state="translated">전체 책은 테스트 주제에 대해 작성되었으므로 여기서는 테스트의 기본 사항에 대해 간단히 설명합니다. 테스트를 작성할 때 고려해야 할 중요한 사항은 테스트하려는 응용 프로그램의 일부와 동작 확인 방법입니다.</target>
        </trans-unit>
        <trans-unit id="ec072bba7befaa68af710fe3549eb0491d7badd1" translate="yes" xml:space="preserve">
          <source>Environment Variables</source>
          <target state="translated">환경 변수</target>
        </trans-unit>
        <trans-unit id="72e75d7e5d445bc15e0b9ea52b7baf3c7167b0ca" translate="yes" xml:space="preserve">
          <source>Environment variables and settings</source>
          <target state="translated">환경 변수 및 설정</target>
        </trans-unit>
        <trans-unit id="65d09ae9f782d6f65a7ec72d18a1732d6c0a7de2" translate="yes" xml:space="preserve">
          <source>Environment variables are used to set process specific things, which could conceivably change for different instances of your application&amp;rsquo;s processes. For instance, you can set a different &lt;code&gt;KADIRA_OPTIONS_HOSTNAME&lt;/code&gt; for each process to ensure that &lt;a href=&quot;#kadira&quot;&gt;kadira&lt;/a&gt; logs timings with useful hostnames.</source>
          <target state="translated">환경 변수는 프로세스 특정 사항을 설정하는 데 사용되며 응용 프로그램 프로세스의 다른 인스턴스에 따라 변경 될 수 있습니다. 예를 들어 &lt;a href=&quot;#kadira&quot;&gt;kadira&lt;/a&gt; 가 유용한 호스트 이름으로 타이밍을 기록 하도록 각 프로세스마다 다른 &lt;code&gt;KADIRA_OPTIONS_HOSTNAME&lt;/code&gt; 을 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="21d9b1edec202248799973eb0e9d2c3df65a5d20" translate="yes" xml:space="preserve">
          <source>Equivalent HTML</source>
          <target state="translated">동등한 HTML</target>
        </trans-unit>
        <trans-unit id="05f4a8bb9bf12e58a28eaaeac29c9741467c50e9" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;a href=&quot;#find&quot;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(selector, options).&lt;/code&gt;&lt;a href=&quot;#fetch&quot;&gt;&lt;code&gt;fetch&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()[0]&lt;/code&gt; with &lt;code&gt;options.limit = 1&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#find&quot;&gt; &lt;code&gt;find&lt;/code&gt; &lt;/a&gt; 와 동일합니다 &lt;code&gt;(selector, options).&lt;/code&gt; &lt;a href=&quot;#fetch&quot;&gt; &lt;code&gt;fetch&lt;/code&gt; &lt;/a&gt; &lt;code&gt;()[0]&lt;/code&gt; 과 &lt;code&gt;options.limit = 1&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f1065972287388dec34226ca1d5430712d6a7b62" translate="yes" xml:space="preserve">
          <source>Error case</source>
          <target state="translated">오류 사례</target>
        </trans-unit>
        <trans-unit id="73631d7f0356fdbdeaa36f8e5dbad89c6aa15dc4" translate="yes" xml:space="preserve">
          <source>Error handling</source>
          <target state="translated">오류 처리</target>
        </trans-unit>
        <trans-unit id="a41f6a98e341464efb67644fa3497c82f78450fb" translate="yes" xml:space="preserve">
          <source>Errors in Method simulation</source>
          <target state="translated">분석법 시뮬레이션의 오류</target>
        </trans-unit>
        <trans-unit id="2779ea444cb47200f1b0085d04662b33c09fc23f" translate="yes" xml:space="preserve">
          <source>Escaping</source>
          <target state="translated">Escaping</target>
        </trans-unit>
        <trans-unit id="e8e5567de1ab1f259c25ebfc614570a27330977c" translate="yes" xml:space="preserve">
          <source>Escaping Curly Braces</source>
          <target state="translated">중괄호 탈출</target>
        </trans-unit>
        <trans-unit id="af960cbec0a4a069531ee449bcb8978a06f0d33a" translate="yes" xml:space="preserve">
          <source>Essentially it copies a tarball of the contents of each of your npm dependencies into your application source repository. This is essentially a more robust version of the &lt;code&gt;npm-shrinkwrap.json&lt;/code&gt; file that shrinkwrap creates, because it means your application&amp;rsquo;s npm dependencies can be assembled without the need or reliance on the npm servers being available or reliable. This is good for repeatable builds especially when deploying.</source>
          <target state="translated">기본적으로 각 npm 종속성의 내용에 대한 tarball을 응용 프로그램 소스 리포지토리에 복사합니다. 이것은 기본적으로 &lt;code&gt;npm-shrinkwrap.json&lt;/code&gt; 의보다 강력한 버전입니다. shrinkwrap이 작성 파일 이는 npm 서버가 사용 가능하거나 안정적이지 않아도 응용 프로그램의 npm 종속성을 어셈블 할 수 있기 때문입니다. 이는 특히 배포 할 때 반복 가능한 빌드에 좋습니다.</target>
        </trans-unit>
        <trans-unit id="20fbf1356baec1ddc0e72057db7491e002803955" translate="yes" xml:space="preserve">
          <source>Establish a weak dependency on a package. If package A has a weak dependency on package B, it means that including A in an app does not force B to be included too &amp;mdash; but, if B is included or by another package, then B will load before A. You can use this to make packages that optionally integrate with or enhance other packages if those packages are present. When you weakly depend on a package you don't see its exports. You can detect if the possibly-present weakly-depended-on package is there by seeing if &lt;code&gt;Package.foo&lt;/code&gt; exists, and get its exports from the same place.</source>
          <target state="translated">패키지에 대한 약한 종속성을 설정하십시오. 패키지 A가 패키지 B에 대한 종속성이 약한 경우 앱에 A를 포함해도 B도 포함되지는 않지만 B가 포함되거나 다른 패키지에 의해 B가로드되면 A보다 먼저로드됩니다. 다른 패키지와 선택적으로 통합되거나 향상되는 패키지를 만드는 경우 패키지에 약하게 의존하면 내보내기가 보이지 않습니다. &lt;code&gt;Package.foo&lt;/code&gt; 가 있는지 확인하고 같은 위치에서 내보내기를 가져 와서 약한 의존성 패키지가 존재하는지 감지 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4c15409fb36b4813807ebc18ea1006cafcd1e3c6" translate="yes" xml:space="preserve">
          <source>Establishes a &lt;em&gt;live query&lt;/em&gt; that invokes callbacks when the result of the query changes. In contrast to &lt;a href=&quot;#observe&quot;&gt;&lt;code&gt;observe&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;observeChanges&lt;/code&gt; provides only the difference between the old and new result set, not the entire contents of the document that changed.</source>
          <target state="translated">&lt;em&gt;쿼리&lt;/em&gt; 결과가 변경 될 때 콜백을 호출 하는 &lt;em&gt;라이브 쿼리&lt;/em&gt; 를 설정합니다. &lt;a href=&quot;#observe&quot;&gt; &lt;code&gt;observe&lt;/code&gt; &lt;/a&gt; 와 대조적으로 &lt;code&gt;observeChanges&lt;/code&gt; 는 변경 한 문서의 전체 내용이 아니라 기존 결과 세트와 새로운 결과 세트의 차이 만 제공합니다.</target>
        </trans-unit>
        <trans-unit id="6067d57253940be2ab171eb9cc19c4fdff18af7f" translate="yes" xml:space="preserve">
          <source>Establishes a &lt;em&gt;live query&lt;/em&gt; that invokes callbacks when the result of the query changes. The callbacks receive the entire contents of the document that was affected, as well as its old contents, if applicable. If you only need to receive the fields that changed, see &lt;a href=&quot;#observe_changes&quot;&gt;&lt;code&gt;observeChanges&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;쿼리&lt;/em&gt; 결과가 변경 될 때 콜백을 호출 하는 &lt;em&gt;라이브 쿼리&lt;/em&gt; 를 설정합니다. 콜백은 영향을받은 문서의 전체 내용과 해당되는 경우 이전 내용을받습니다. 변경된 필드 만 수신해야하는 경우 &lt;a href=&quot;#observe_changes&quot;&gt; &lt;code&gt;observeChanges&lt;/code&gt; 를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8d147450a036bcd649afff9f1b3e74089dd56753" translate="yes" xml:space="preserve">
          <source>Establishes a reactive dependency on the result.</source>
          <target state="translated">결과에 반응성 의존성을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="9ed0d5b75247f900e487ce6a25e41a118c087a4b" translate="yes" xml:space="preserve">
          <source>Even if you aren&amp;rsquo;t saving data over the wire to the database on every user input, sometimes you still may wish to update in-memory data stores on every user change. If updating that data store triggers a lot of UI changes, you can see poor performance and missed keystrokes when you update it too often. In such cases you can limit re-rendering by throttling in a similar way how we throttled the method call above. You could also use &lt;code&gt;.debounce()&lt;/code&gt; to ensure the changes happen only after the user has stopped typing.</source>
          <target state="translated">모든 사용자 입력에서 와이어를 통해 데이터베이스에 데이터를 저장하지 않더라도 모든 사용자가 변경 될 때마다 메모리 내 데이터 저장소를 업데이트하려는 경우가 있습니다. 해당 데이터 저장소를 업데이트하면 많은 UI 변경이 발생하면 너무 자주 업데이트 할 때 성능이 저하되고 키 입력이 누락 된 것을 볼 수 있습니다. 이러한 경우 위의 메소드 호출을 조절하는 방식과 비슷한 방식으로 조절하여 다시 렌더링을 제한 할 수 있습니다. 또한 &lt;code&gt;.debounce()&lt;/code&gt; 을 사용하여 사용자가 입력을 중지 한 후에 만 ​​변경이 이루어 지도록 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5204bdf6c201719651bc9bf61b87907bf2fa6722" translate="yes" xml:space="preserve">
          <source>Even ignoring the security implications of &lt;code&gt;profile&lt;/code&gt;, it isn&amp;rsquo;t a good idea to put all of your app&amp;rsquo;s custom data onto one field. As discussed in the &lt;a href=&quot;collections#schema-design&quot;&gt;Collections article&lt;/a&gt;, Meteor&amp;rsquo;s data transfer protocol doesn&amp;rsquo;t do deeply nested diffing of fields, so it&amp;rsquo;s a good idea to flatten out your objects into many top-level fields on the document.</source>
          <target state="translated">&lt;code&gt;profile&lt;/code&gt; 의 보안 영향을 무시하더라도 모든 앱의 맞춤 데이터를 한 필드에 배치하는 것은 좋지 않습니다. &lt;a href=&quot;collections#schema-design&quot;&gt;Collections 기사&lt;/a&gt; 에서 설명했듯이 Meteor의 데이터 전송 프로토콜은 중첩 된 필드 diffing을 수행하지 않으므로 개체를 문서의 여러 최상위 필드로 병합하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="3529e10b4f8dfafd4a034a44c92fc289cad4906a" translate="yes" xml:space="preserve">
          <source>Even though it is recommended that you write your application to use ES2015 modules and the &lt;code&gt;imports/&lt;/code&gt; directory, Meteor 1.3 continues to support eager loading of files, using these default load order rules, to provide backwards compatibility with applications written for Meteor 1.2 and earlier. You may combine both eager loading and lazy loading using &lt;code&gt;import&lt;/code&gt; in a single app. Any import statements are evaluated in the order they are listed in a file when that file is loaded and evaluated using these rules.</source>
          <target state="translated">ES2015 모듈 및 &lt;code&gt;imports/&lt;/code&gt; 디렉토리 를 사용하도록 애플리케이션을 작성하는 것이 권장되지만 Meteor 1.3은 이러한 기본로드 순서 규칙을 사용하여 Meteor 1.2 및 이전 버전 용으로 작성된 애플리케이션과의 하위 호환성을 제공하기 위해 파일로드를 계속 지원합니다. 단일 앱에서 &lt;code&gt;import&lt;/code&gt; 를 사용하여 열성적인 로딩과 지연 로딩을 모두 결합 할 수 있습니다 . 모든 가져 오기 명령문은 해당 규칙을 사용하여 파일을로드하고 평가할 때 파일에 나열된 순서대로 평가됩니다.</target>
        </trans-unit>
        <trans-unit id="e80c56065c7b654260bd65218422bb9e7d3d03cd" translate="yes" xml:space="preserve">
          <source>Event Maps</source>
          <target state="translated">이벤트 맵</target>
        </trans-unit>
        <trans-unit id="36a67f567bf2ec3510801d617c4d76a61448c053" translate="yes" xml:space="preserve">
          <source>Event handlers to associate with this template.</source>
          <target state="translated">이 템플리트와 연관시킬 이벤트 핸들러.</target>
        </trans-unit>
        <trans-unit id="eabc790d00812b33da77b202701e348d39479228" translate="yes" xml:space="preserve">
          <source>Event handling</source>
          <target state="translated">이벤트 처리</target>
        </trans-unit>
        <trans-unit id="51bd03a46735470cb8e5a85fbabadc9ef7c0e093" translate="yes" xml:space="preserve">
          <source>Event types and their uses include:</source>
          <target state="translated">이벤트 유형 및 용도는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="01f4091aee7775e55b424276eac7ddd89786ebe6" translate="yes" xml:space="preserve">
          <source>Every Meteor app comes with production minification by default with the &lt;code&gt;standard-minifier-js&lt;/code&gt; and &lt;code&gt;standard-minifier-css&lt;/code&gt; packages. These minifiers go to some extra effort to do a good job - for example, Meteor automatically splits up your files if they get too big to maintain support for older versions of Internet Explorer which had a limit on the number of CSS rules per file.</source>
          <target state="translated">모든 Meteor 앱은 기본적으로 &lt;code&gt;standard-minifier-js&lt;/code&gt; 및 &lt;code&gt;standard-minifier-css&lt;/code&gt; 패키지 와 함께 프로덕션 축소 기능을 제공 합니다. 예를 들어, Meteor는 파일 당 CSS 규칙 수에 제한이있는 이전 버전의 Internet Explorer를 지원하기에 파일이 너무 커지면 자동으로 파일을 분할합니다.</target>
        </trans-unit>
        <trans-unit id="af6f2fe9271813f9c06c5e6475ac49eac4f1b070" translate="yes" xml:space="preserve">
          <source>Every Meteor project targets a set of platforms. Platforms can be added to a Meteor project with &lt;code&gt;meteor add-platform&lt;/code&gt;.</source>
          <target state="translated">모든 Meteor 프로젝트는 일련의 플랫폼을 대상으로합니다. &lt;code&gt;meteor add-platform&lt;/code&gt; 을 사용하여 플랫폼을 Meteor 프로젝트에 추가 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fdbc7c354c5c0405925c85fedf2997b60d26233a" translate="yes" xml:space="preserve">
          <source>Every app will have some secret API keys or passwords:</source>
          <target state="translated">모든 앱에는 비밀 API 키 또는 비밀번호가 있습니다.</target>
        </trans-unit>
        <trans-unit id="eedc2ea46adfe6da022b6831ee232ed74648c989" translate="yes" xml:space="preserve">
          <source>Every new Meteor app includes Blaze, Meteor&amp;rsquo;s default templating system, by default. If you are not planning on &lt;a href=&quot;#using-with-blaze&quot;&gt;using React and Blaze together&lt;/a&gt;, you can remove Blaze from your project by running:</source>
          <target state="translated">모든 새로운 Meteor 앱에는 기본적으로 Meteor의 기본 템플릿 시스템 인 Blaze가 포함되어 있습니다. &lt;a href=&quot;#using-with-blaze&quot;&gt;React와 Blaze를 함께 사용&lt;/a&gt; 하지 않으려는 경우 다음 을 실행하여 프로젝트에서 Blaze를 제거 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2e9c40c26ed50471311c3109d77b8e06f9a98112" translate="yes" xml:space="preserve">
          <source>Every other argument is passed as a prop to the component when it is rendered.</source>
          <target state="translated">다른 모든 인수는 렌더링 될 때 구성 요소에 대한 소품으로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="4d989e2df56c605dfc6c6ea04b0cd8aec51c9c0f" translate="yes" xml:space="preserve">
          <source>Every project is pinned to a specific release of Meteor. You can temporarily try using your package with another release by passing the &lt;code&gt;--release&lt;/code&gt; option to any command; &lt;code&gt;meteor update&lt;/code&gt; changes the pinned release.</source>
          <target state="translated">모든 프로젝트는 Meteor의 특정 릴리스에 고정되어 있습니다. &lt;code&gt;--release&lt;/code&gt; 옵션을 명령 에 전달하여 패키지를 다른 릴리스와 함께 일시적으로 사용할 수 있습니다 . &lt;code&gt;meteor update&lt;/code&gt; 는 고정 릴리스를 변경합니다.</target>
        </trans-unit>
        <trans-unit id="6113a91befef754507a909414b09535262331ba5" translate="yes" xml:space="preserve">
          <source>Every publication takes two types of parameters:</source>
          <target state="translated">모든 출판물에는 두 가지 유형의 매개 변수가 있습니다.</target>
        </trans-unit>
        <trans-unit id="3abe736de10b160fdad52b58c3f87bb13197627e" translate="yes" xml:space="preserve">
          <source>Everything else: code that runs on the client, data sent through Method and publication arguments, etc, can&amp;rsquo;t be trusted.</source>
          <target state="translated">그 밖의 모든 것 : 클라이언트에서 실행되는 코드, Method를 통해 전송 된 데이터 및 게시 인수 등은 신뢰할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="48918d21cb8427b9c0a3d99d41d627c47877adb9" translate="yes" xml:space="preserve">
          <source>Example (client):</source>
          <target state="translated">예 (클라이언트) :</target>
        </trans-unit>
        <trans-unit id="72bb1e626ae8ddf9d0be812f06ca11cfee969530" translate="yes" xml:space="preserve">
          <source>Example (server):</source>
          <target state="translated">예 (서버) :</target>
        </trans-unit>
        <trans-unit id="8f97bcc0e17b1dbc74957bd0380cdda95449c8dc" translate="yes" xml:space="preserve">
          <source>Example app</source>
          <target state="translated">앱 예</target>
        </trans-unit>
        <trans-unit id="e8fbc63282146097bdb5d214a2275dc1f625ef0f" translate="yes" xml:space="preserve">
          <source>Example asynchronous HTTP call:</source>
          <target state="translated">비동기 HTTP 호출 예 :</target>
        </trans-unit>
        <trans-unit id="f54b424db1f494644832d310ac00845732403bea" translate="yes" xml:space="preserve">
          <source>Example directory layout</source>
          <target state="translated">디렉토리 레이아웃 예</target>
        </trans-unit>
        <trans-unit id="4d05ce1ffbb205c93297cb855637fcd8f224c5b6" translate="yes" xml:space="preserve">
          <source>Example server method:</source>
          <target state="translated">서버 방법 예 :</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="4375e210d7c1b74f25ad4ca4b750e6c8b34217fb" translate="yes" xml:space="preserve">
          <source>Examples below will reference the &lt;code&gt;Lists_show&lt;/code&gt; component from the Todos example app.</source>
          <target state="translated">아래 예제 는 Todos 예제 앱 의 &lt;code&gt;Lists_show&lt;/code&gt; 컴포넌트를 참조합니다 .</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="8bc8848fa11928b655560703cb0f89e1bb28fd73" translate="yes" xml:space="preserve">
          <source>Executing &lt;code&gt;meteor node -e &quot;console.log(process.versions)&quot;&lt;/code&gt; would run &lt;code&gt;console.log(process.versions)&lt;/code&gt; in the version of &lt;code&gt;node&lt;/code&gt; bundled with Meteor.</source>
          <target state="translated">실행 &lt;code&gt;meteor node -e &quot;console.log(process.versions)&quot;&lt;/code&gt; 실행됩니다 &lt;code&gt;console.log(process.versions)&lt;/code&gt; 버전에서 &lt;code&gt;node&lt;/code&gt; 유성와 함께 번들로.</target>
        </trans-unit>
        <trans-unit id="8c56e464ee0ee637718966cb38fae37b4d7d430b" translate="yes" xml:space="preserve">
          <source>Exiting the shell does not terminate the server. If the server restarts because a change was made in server code, or a fatal exception was encountered, the shell will restart along with the server. This behavior can be simulated by typing &lt;code&gt;.reload&lt;/code&gt; in the shell.</source>
          <target state="translated">쉘을 종료해도 서버는 종료되지 않습니다. 서버 코드가 변경되어 치명적인 예외가 발생하여 서버가 다시 시작되면 셸이 서버와 함께 다시 시작됩니다. 이 동작은 쉘에 &lt;code&gt;.reload&lt;/code&gt; 를 입력하여 시뮬레이션 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="42a57fa75f4019d60defcf09b4a90412cfff9e84" translate="yes" xml:space="preserve">
          <source>Explicitly include non-javascript files including CSS, Less, Sass, Stylus and static assets</source>
          <target state="translated">CSS, Less, Sass, Stylus 및 정적 자산을 포함한 비 Javascript 파일을 명시 적으로 포함</target>
        </trans-unit>
        <trans-unit id="6f35141d6315a42b30171c5af76dda7a26aca820" translate="yes" xml:space="preserve">
          <source>Export package-level variables in your package. The specified variables (declared without &lt;code&gt;var&lt;/code&gt; in the source code) will be available to packages that use your package. If your package sets the &lt;code&gt;debugOnly&lt;/code&gt;, &lt;code&gt;prodOnly&lt;/code&gt; or &lt;code&gt;testOnly&lt;/code&gt; options to &lt;code&gt;true&lt;/code&gt; when it calls &lt;code&gt;Package.describe()&lt;/code&gt;, then packages that use your package will need to use &lt;code&gt;Package[&quot;package-name&quot;].ExportedVariableName&lt;/code&gt; to access the value of an exported variable.</source>
          <target state="translated">패키지에서 패키지 수준 변수를 내 보냅니다. 패키지를 사용하는 패키지는 지정된 변수 ( 소스 코드에서 &lt;code&gt;var&lt;/code&gt; 없이 선언 )를 사용할 수 있습니다. 패키지 가 &lt;code&gt;Package.describe()&lt;/code&gt; 호출 할 때 &lt;code&gt;debugOnly&lt;/code&gt; , &lt;code&gt;prodOnly&lt;/code&gt; 또는 &lt;code&gt;testOnly&lt;/code&gt; 옵션을 &lt;code&gt;true&lt;/code&gt; 로 설정 한 경우 패키지를 사용하는 패키지는 &lt;code&gt;Package[&quot;package-name&quot;].ExportedVariableName&lt;/code&gt; 을 사용하여 내 보낸 변수의 값에 액세스해야합니다 . .</target>
        </trans-unit>
        <trans-unit id="c37343fbc2a734ed5d2673a49ae41a53a7d7f024" translate="yes" xml:space="preserve">
          <source>Exporting</source>
          <target state="translated">Exporting</target>
        </trans-unit>
        <trans-unit id="41fc97a4300a245cdbff58066d70ad724c58fadc" translate="yes" xml:space="preserve">
          <source>External login services typically require registering and configuring your application before use. The easiest way to do this is with the &lt;a href=&quot;#accountsui&quot;&gt;&lt;code&gt;accounts-ui&lt;/code&gt; package&lt;/a&gt; which presents a step-by-step guide to configuring each service. However, the data can be also be entered manually in the &lt;code&gt;ServiceConfiguration.configurations&lt;/code&gt; collection, which is exported by the &lt;code&gt;service-configuration&lt;/code&gt; package.</source>
          <target state="translated">외부 로그인 서비스는 일반적으로 사용하기 전에 응용 프로그램을 등록하고 구성해야합니다. 가장 쉬운 방법은 각 서비스 구성에 대한 단계별 안내서를 제공하는 &lt;a href=&quot;#accountsui&quot;&gt; &lt;code&gt;accounts-ui&lt;/code&gt; 패키지&lt;/a&gt; 를 사용하는 것입니다. 그러나 &lt;code&gt;service-configuration&lt;/code&gt; 패키지로 내보내는 &lt;code&gt;ServiceConfiguration.configurations&lt;/code&gt; 컬렉션 에서 데이터를 수동으로 입력 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0b9ce072e27032f45534f5801d0f467d6bd396ee" translate="yes" xml:space="preserve">
          <source>Extracting a specific property from an object:</source>
          <target state="translated">객체에서 특정 속성 추출하기 :</target>
        </trans-unit>
        <trans-unit id="82da67b211249624f24f3c7db5642a5112c9446f" translate="yes" xml:space="preserve">
          <source>Facebook</source>
          <target state="translated">Facebook</target>
        </trans-unit>
        <trans-unit id="305d767720c94f8ec60ac0e8e05d1ec05d6cd057" translate="yes" xml:space="preserve">
          <source>Facebook with &lt;code&gt;accounts-facebook&lt;/code&gt;</source>
          <target state="translated">페이스 북 &lt;code&gt;accounts-facebook&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ccd3256378a259f745b106874acb8eb5d3586370" translate="yes" xml:space="preserve">
          <source>Facebook, Google, and more</source>
          <target state="translated">페이스 북, 구글 등</target>
        </trans-unit>
        <trans-unit id="4b85b0a9c33d40b2e3908fc120f8cdcf3613d3de" translate="yes" xml:space="preserve">
          <source>Facebook: &lt;a href=&quot;http://developers.facebook.com/docs/authentication/permissions/&quot;&gt;http://developers.facebook.com/docs/authentication/permissions/&lt;/a&gt;</source>
          <target state="translated">페이스 북 : &lt;a href=&quot;http://developers.facebook.com/docs/authentication/permissions/&quot;&gt;http://developers.facebook.com/docs/authentication/permissions/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fb659df6b3ddd6d889d61a58767e837e74291b57" translate="yes" xml:space="preserve">
          <source>Fast prototyping with &lt;code&gt;accounts-ui&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;accounts-ui&lt;/code&gt; 를 사용한 빠른 프로토 타이핑</target>
        </trans-unit>
        <trans-unit id="f3f09da6f23802b8d775f313cbe8c78977793ea8" translate="yes" xml:space="preserve">
          <source>Features in core Meteor</source>
          <target state="translated">핵심 Meteor의 특징</target>
        </trans-unit>
        <trans-unit id="b01ee8c8228364d240c04f0b37d721c88909865f" translate="yes" xml:space="preserve">
          <source>Fetch data from those subscriptions</source>
          <target state="translated">해당 구독에서 데이터를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="f72e37fef6235224d97b3a255c42b2336a5bfcaf" translate="yes" xml:space="preserve">
          <source>Fetch global client-side state from stores such as the Router, Accounts, and your own stores</source>
          <target state="translated">라우터, 계정 및 자체 상점과 같은 상점에서 글로벌 클라이언트 측 상태를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="f1c833fa6c8cd83f72dafb2f2c3a5387a60235c9" translate="yes" xml:space="preserve">
          <source>Fetch in helpers</source>
          <target state="translated">헬퍼에서 가져 오기</target>
        </trans-unit>
        <trans-unit id="8aa30b46fc32377780fbb913a85b1a9de35e8fa0" translate="yes" xml:space="preserve">
          <source>Fetch the data from those subscriptions, and</source>
          <target state="translated">해당 구독에서 데이터를 가져오고</target>
        </trans-unit>
        <trans-unit id="7f010ba4cf279b8bbbfc559cedc8cccd600380b0" translate="yes" xml:space="preserve">
          <source>Fetch the data nearby where you subscribed to it</source>
          <target state="translated">구독 한 곳 근처의 데이터를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="f841e4fe625e158df6b305e59b366460773baead" translate="yes" xml:space="preserve">
          <source>Fetching data</source>
          <target state="translated">데이터를 가져 오는 중</target>
        </trans-unit>
        <trans-unit id="f98ec139e428ca27cfbb1e77f6f876426f1ca919" translate="yes" xml:space="preserve">
          <source>Field Specifiers</source>
          <target state="translated">필드 지정자</target>
        </trans-unit>
        <trans-unit id="18a19bb1f12b36ee797501cc072d5a887c9ed9eb" translate="yes" xml:space="preserve">
          <source>Field on the current data context</source>
          <target state="translated">현재 데이터 컨텍스트의 필드</target>
        </trans-unit>
        <trans-unit id="c268ca0e772d0f085a5b3e084c5154431864450a" translate="yes" xml:space="preserve">
          <source>Fields in the database should be camelCased just like your JavaScript variable names.</source>
          <target state="translated">데이터베이스의 필드는 JavaScript 변수 이름과 마찬가지로 camelCased이어야합니다.</target>
        </trans-unit>
        <trans-unit id="c75a31a175cab9aaaf9e0b59c42ce51db38fe210" translate="yes" xml:space="preserve">
          <source>File load order</source>
          <target state="translated">파일로드 순서</target>
        </trans-unit>
        <trans-unit id="9aab41c369b66a38c7edcdbad5d791f674f181d9" translate="yes" xml:space="preserve">
          <source>File structure</source>
          <target state="translated">파일 구조</target>
        </trans-unit>
        <trans-unit id="e22accc8e24dc418cec87bb510c82a4b6a5f90a4" translate="yes" xml:space="preserve">
          <source>Files are then loaded in alphabetical order of the entire path</source>
          <target state="translated">그런 다음 파일은 전체 경로의 알파벳 순서로로드됩니다.</target>
        </trans-unit>
        <trans-unit id="b55b695b8f688fedabc08846e224512342117564" translate="yes" xml:space="preserve">
          <source>Files beginning with &lt;code&gt;main.&lt;/code&gt; are loaded &lt;strong&gt;last&lt;/strong&gt;</source>
          <target state="translated">&lt;code&gt;main.&lt;/code&gt; 시작하는 파일 . &lt;strong&gt;마지막&lt;/strong&gt; 으로로드&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4211a3e5987e1e9171faab6397528898f4bea488" translate="yes" xml:space="preserve">
          <source>Files inside &lt;strong&gt;any&lt;/strong&gt;&lt;code&gt;lib/&lt;/code&gt; directory are loaded next</source>
          <target state="translated">내부 파일 &lt;strong&gt;어떤 &lt;/strong&gt; &lt;code&gt;lib/&lt;/code&gt; 디렉토리는 다음로드</target>
        </trans-unit>
        <trans-unit id="4930b392fc70ed7e0a9ff38302e0da516e082c3f" translate="yes" xml:space="preserve">
          <source>Files outside special directories</source>
          <target state="translated">특수 디렉토리 외부의 파일</target>
        </trans-unit>
        <trans-unit id="8a38f4447e9af696a57509a046dea0f070ea99d3" translate="yes" xml:space="preserve">
          <source>Files with deeper paths are loaded next</source>
          <target state="translated">더 깊은 경로를 가진 파일이 다음에로드됩니다.</target>
        </trans-unit>
        <trans-unit id="9531b74bba56bcd9b0e032ee6d89149f8ce89bd7" translate="yes" xml:space="preserve">
          <source>Files, exports, and packages</source>
          <target state="translated">파일, 내보내기 및 패키지</target>
        </trans-unit>
        <trans-unit id="4fc1ab2e66cdced32fb377d38c449802917fde57" translate="yes" xml:space="preserve">
          <source>Files/directories whose names start with a dot, like &lt;code&gt;.meteor&lt;/code&gt; and &lt;code&gt;.git&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;.meteor&lt;/code&gt; 및 &lt;code&gt;.git&lt;/code&gt; 와 같이 이름이 점으로 시작하는 파일 / 디렉토리</target>
        </trans-unit>
        <trans-unit id="72300adf4985b12eaddb7bd400893dc7763e02e7" translate="yes" xml:space="preserve">
          <source>Finally, especially if you&amp;rsquo;re developing your own plugin, installing it from the local filesystem can be a convenient way to keep up with changes you make to plugin code. The downside of this is that Meteor will reinstall all plugins on every build however, so this could really slow things down. We do add local plugins with the &lt;code&gt;--link&lt;/code&gt; option however, so Cordova will try to install the plugin&amp;rsquo;s files using symlinks instead of copying them, which means changes to files will be reflected in the generated native project (e.g. an Xcode project) and may not require a rebuild.</source>
          <target state="translated">마지막으로, 특히 자체 플러그인을 개발하는 경우 로컬 파일 시스템에서 플러그인을 설치하면 플러그인 코드 변경 사항을 쉽게 처리 할 수 ​​있습니다. 단점은 Meteor가 모든 빌드에서 모든 플러그인을 다시 설치하므로 실제로 속도가 느려질 수 있다는 것입니다. &lt;code&gt;--link&lt;/code&gt; 옵션을 사용하여 로컬 플러그인을 추가 하므로 Cordova는 복사하는 대신 symlink를 사용하여 플러그인 파일을 설치하려고 시도합니다. 이는 파일 변경 사항이 생성 된 기본 프로젝트 (예 : Xcode 프로젝트)에 반영되어 재 구축이 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="00179a9a5b3a1f7b853c1eb78e9b69d7b5dde683" translate="yes" xml:space="preserve">
          <source>Finally, if you are inside a stub on the client and call another method, the other method is not executed (no RPC is generated, nothing &amp;ldquo;real&amp;rdquo; happens). If that other method has a stub, that stub stands in for the method and is executed. The method call&amp;rsquo;s return value is the return value of the stub function. The client has no problem executing a stub synchronously, and that is why it&amp;rsquo;s okay for the client to use the synchronous &lt;code&gt;Meteor.call&lt;/code&gt; form from inside a method body, as described earlier.</source>
          <target state="translated">마지막으로, 클라이언트의 스텁 내부에 있고 다른 메소드를 호출하면 다른 메소드가 실행되지 않습니다 (RPC가 생성되지 않고 &quot;실제&quot;는 발생하지 않음). 다른 방법에 스텁이있는 경우 해당 스텁은 해당 메소드를 나타내며 실행됩니다. 메소드 호출의 리턴 값은 스텁 함수의 리턴 값입니다. 클라이언트는 스텁을 동기식으로 실행하는 데 문제가 없으므로 클라이언트가 앞에서 설명한대로 메소드 본문 내부에서 동기 &lt;code&gt;Meteor.call&lt;/code&gt; 양식 을 사용하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="dde21c894270fc06d06b51b5fa3147002c70f08a" translate="yes" xml:space="preserve">
          <source>Finally, it&amp;rsquo;s common to animate when the user switches between routes of the application. Especially on mobile, this adds a sense of navigation to the app via positioning pages relative to each other. This can be done in a similar way to animating things appearing and disappearing (after all one page is appearing and other is disappearing), but there are some tricks that are worth being aware of.</source>
          <target state="translated">마지막으로 사용자가 응용 프로그램 경로간에 전환 할 때 애니메이션을 만드는 것이 일반적입니다. 특히 모바일에서는 서로에 대한 페이지를 배치하여 앱 탐색 기능을 추가합니다. 이것은 한 페이지가 나타나고 다른 페이지가 사라진 후에 나타나고 사라지는 것을 애니메이션하는 것과 비슷한 방식으로 수행 할 수 있지만 알아 두어야 할 몇 가지 트릭이 있습니다.</target>
        </trans-unit>
        <trans-unit id="cff30e672f43bcc69f81119977805b5aa032acff" translate="yes" xml:space="preserve">
          <source>Finally, since this package is using the new &lt;code&gt;modules&lt;/code&gt; package, and the package &lt;code&gt;Npm.depends&lt;/code&gt; on the &amp;ldquo;moment&amp;rdquo; npm package, modules within the package can &lt;code&gt;import moment from 'moment'&lt;/code&gt; on both the client and the server. This is great news, because previous versions of Meteor allowed npm imports only on the server, via &lt;code&gt;Npm.require&lt;/code&gt;.</source>
          <target state="translated">마지막으로이 패키지는 새 &lt;code&gt;modules&lt;/code&gt; 패키지를 사용하고 패키지 &lt;code&gt;Npm.depends&lt;/code&gt; .은&amp;ldquo;moment&amp;rdquo;npm 패키지에 따라 패키지 내의 모듈 은 클라이언트와 서버 모두 &lt;code&gt;import moment from 'moment'&lt;/code&gt; 에서 순간을 가져올 수 있습니다 . 이전 버전의 Meteor는 &lt;code&gt;Npm.require&lt;/code&gt; 를 통해 서버에서만 npm 가져 오기를 허용했기 때문에 좋은 소식 입니다.</target>
        </trans-unit>
        <trans-unit id="b57d061dc84919c05eade237b3b28715b566baa5" translate="yes" xml:space="preserve">
          <source>Find all elements matching &lt;code&gt;selector&lt;/code&gt; in this template instance, and return them as a JQuery object.</source>
          <target state="translated">이 템플릿 인스턴스에서 &lt;code&gt;selector&lt;/code&gt; 와 일치하는 모든 요소를 ​​찾아 JQuery 객체로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="729ee83ff8d20957280f00fc30c989afe4117f1d" translate="yes" xml:space="preserve">
          <source>Find all elements matching &lt;code&gt;selector&lt;/code&gt; in this template instance.</source>
          <target state="translated">이 템플릿 인스턴스에서 &lt;code&gt;selector&lt;/code&gt; 와 일치하는 모든 요소를 ​​찾습니다 .</target>
        </trans-unit>
        <trans-unit id="bce4a04e3715f5eb99f2ace98649dab754465ac2" translate="yes" xml:space="preserve">
          <source>Find all of the documents that match &lt;code&gt;selector&lt;/code&gt; and delete them from the collection.</source>
          <target state="translated">&lt;code&gt;selector&lt;/code&gt; 와 일치하는 모든 문서를 찾아 컬렉션에서 삭제하십시오.</target>
        </trans-unit>
        <trans-unit id="818c7d9a04f185a2012b831a2a7b8532a39a8286" translate="yes" xml:space="preserve">
          <source>Find one element matching &lt;code&gt;selector&lt;/code&gt; in this template instance.</source>
          <target state="translated">이 템플릿 인스턴스에서 하나의 요소 일치 &lt;code&gt;selector&lt;/code&gt; 를 찾습니다 .</target>
        </trans-unit>
        <trans-unit id="b1213749216cb52d4a2b88eeaaa015418dc1c0ca" translate="yes" xml:space="preserve">
          <source>Find the documents in a collection that match the selector.</source>
          <target state="translated">컬렉션에서 선택기와 일치하는 문서를 찾으십시오.</target>
        </trans-unit>
        <trans-unit id="aa76ad935c466ebfdbc18a706039bfb7536913f9" translate="yes" xml:space="preserve">
          <source>Finds the first document that matches the selector, as ordered by sort and skip options. Returns &lt;code&gt;undefined&lt;/code&gt; if no matching document is found.</source>
          <target state="translated">정렬 및 건너 뛰기 옵션에 따라 순서대로 선택기와 일치하는 첫 번째 문서를 찾습니다. 일치하는 문서가 없으면 &lt;code&gt;undefined&lt;/code&gt; 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="65b9aeba6d9832b7ad62bd1e6f9697461fca5f9f" translate="yes" xml:space="preserve">
          <source>Finds the user with the specified email. First tries to match email case sensitively; if that fails, it tries case insensitively; but if more than one user matches the case insensitive search, it returns null.</source>
          <target state="translated">지정된 이메일을 가진 사용자를 찾습니다. 먼저 전자 메일 대소 문자를 구분합니다. 실패하면 대소 문자를 구분하지 않습니다. 그러나 둘 이상의 사용자가 대소 문자를 구분하지 않는 검색과 일치하면 널을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="8d512f2eed7cd9d2283b97b779c29bfaee4591b7" translate="yes" xml:space="preserve">
          <source>Finds the user with the specified username. First tries to match username case sensitively; if that fails, it tries case insensitively; but if more than one user matches the case insensitive search, it returns null.</source>
          <target state="translated">지정된 사용자 이름을 가진 사용자를 찾습니다. 먼저 사용자 이름을 대소 문자를 구분하여 검색합니다. 실패하면 대소 문자를 구분하지 않습니다. 그러나 둘 이상의 사용자가 대소 문자를 구분하지 않는 검색과 일치하면 널을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="e58530e68ffe338c0e469a9a86011febec0c90ca" translate="yes" xml:space="preserve">
          <source>First, add the &lt;code&gt;service-configuration&lt;/code&gt; package:</source>
          <target state="translated">먼저 &lt;code&gt;service-configuration&lt;/code&gt; 패키지를 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="25c27844ac3b9eaa4e6f8967d18f4d311537a823" translate="yes" xml:space="preserve">
          <source>First, add the service configuration package:</source>
          <target state="translated">먼저 서비스 구성 패키지를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="dfa1860bf8f5f99d6eb337acf640f11cf20a86fc" translate="yes" xml:space="preserve">
          <source>First, figure out which template you want to replace by looking at the source code of the package. For example, in the &lt;code&gt;useraccounts:unstyled&lt;/code&gt; package, the templates are listed &lt;a href=&quot;https://github.com/meteor-useraccounts/unstyled/tree/master/lib&quot;&gt;in this directory on GitHub&lt;/a&gt;. By squinting at the file names and looking for some of the HTML strings, we can figure out that we might be interested in replacing the &lt;code&gt;atPwdFormBtn&lt;/code&gt; template. Let&amp;rsquo;s take a look at the original template:</source>
          <target state="translated">먼저 패키지의 소스 코드를보고 대체 할 템플릿을 찾으십시오. 예를 들어 &lt;code&gt;useraccounts:unstyled&lt;/code&gt; 패키지에서 템플릿은 &lt;a href=&quot;https://github.com/meteor-useraccounts/unstyled/tree/master/lib&quot;&gt;이 디렉토리의 GitHub에&lt;/a&gt; 나열 됩니다 . 파일 이름을 훑어보고 일부 HTML 문자열을 &lt;code&gt;atPwdFormBtn&lt;/code&gt; 템플리트 를 바꾸는 데 관심이 있다는 것을 알 수 있습니다 . 원본 템플릿을 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="782c6f0c6fc5c09720bad4a4119c4a995a4d47bc" translate="yes" xml:space="preserve">
          <source>First, we need to configure the layout we want to use when rendering the accounts templates:</source>
          <target state="translated">먼저 계정 템플릿을 렌더링 할 때 사용할 레이아웃을 구성해야합니다.</target>
        </trans-unit>
        <trans-unit id="e5b61b65b9e4cbf23b57be970df77724c1af53a2" translate="yes" xml:space="preserve">
          <source>First, you can &lt;code&gt;export&lt;/code&gt; any named declaration on the same line where it was declared:</source>
          <target state="translated">먼저 이름이 지정된 선언을 선언 된 동일한 줄에 &lt;code&gt;export&lt;/code&gt; 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="eef31c8fb3cd90a9aab1d23453021b737b806a81" translate="yes" xml:space="preserve">
          <source>First, you need to create a &lt;em&gt;local collection&lt;/em&gt; - this is a collection that exists only on the client side and is not tied to a database collection on the server. Read more in the &lt;a href=&quot;http://guide.meteor.com/collections.html#local-collections&quot;&gt;Collections article&lt;/a&gt;.</source>
          <target state="translated">먼저 &lt;em&gt;로컬 컬렉션&lt;/em&gt; 을 만들어야합니다. 이 컬렉션은 클라이언트쪽에 만 존재하며 서버의 데이터베이스 컬렉션에 연결되지 않은 컬렉션입니다. &lt;a href=&quot;http://guide.meteor.com/collections.html#local-collections&quot;&gt;컬렉션 기사&lt;/a&gt; 에서 자세한 내용을 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="b0b89bea06c06c8de821418889983af218d5b7be" translate="yes" xml:space="preserve">
          <source>First, you&amp;rsquo;ll need to request the relevant permissions when logging in the user. See the &lt;a href=&quot;#oauth-configuration&quot;&gt;section above&lt;/a&gt; for how to pass those options.</source>
          <target state="translated">먼저, 사용자 로그인시 관련 권한을 요청해야합니다. 해당 옵션을 전달하는 방법은 &lt;a href=&quot;#oauth-configuration&quot;&gt;위 섹션을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b003b5beb77c5a51911b890c1a37d2bca99905e4" translate="yes" xml:space="preserve">
          <source>Fix any bugs found in step 2. and repeat.</source>
          <target state="translated">2 단계에서 찾은 모든 버그를 수정하고 반복하십시오.</target>
        </trans-unit>
        <trans-unit id="400ca378a2cc34610e19295643d049d1b97a10a1" translate="yes" xml:space="preserve">
          <source>Flow Router</source>
          <target state="translated">흐름 라우터</target>
        </trans-unit>
        <trans-unit id="f7d0b0a63adac13483308d142df49c44aea5f3b5" translate="yes" xml:space="preserve">
          <source>Flow Router Extra</source>
          <target state="translated">흐름 라우터 추가</target>
        </trans-unit>
        <trans-unit id="4d809cb7e8e32ca86df6f2ccab008dd8bce5235c" translate="yes" xml:space="preserve">
          <source>Flow Router is a community routing package for Meteor.</source>
          <target state="translated">Flow Router는 Meteor를위한 커뮤니티 라우팅 패키지입니다.</target>
        </trans-unit>
        <trans-unit id="9e962a78f26ba2cf49ccee370d69fa6dc08a25e1" translate="yes" xml:space="preserve">
          <source>Follow a JavaScript style guide</source>
          <target state="translated">JavaScript 스타일 가이드를 따르십시오</target>
        </trans-unit>
        <trans-unit id="2667cd7d059d2631b0f7ae3865916c80b3a515cb" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;https://guide.meteor.com/using-packages.html&quot;&gt;Atmosphere packages&lt;/a&gt;, as the older pre-1.3 &lt;code&gt;api.export&lt;/code&gt; syntax allowed more than one export per package, you&amp;rsquo;ll tend to see non-default exports used for symbols. For instance:</source>
          <target state="translated">들어 &lt;a href=&quot;https://guide.meteor.com/using-packages.html&quot;&gt;분위기 패키지&lt;/a&gt; 이전 전 1.3로, &lt;code&gt;api.export&lt;/code&gt; 의 구문은 패키지 당 하나 개 이상의 수출을 허용, 당신은 문자에 사용되는 기본이 아닌 수출을 참조하는 경향이 있습니다. 예를 들어 :</target>
        </trans-unit>
        <trans-unit id="b35aa049fcc915835fd6aeeb29b631fb3bed7168" translate="yes" xml:space="preserve">
          <source>For Android, launch screen images should be special &quot;Nine-patch&quot; image files that specify how they should be stretched. See the &lt;a href=&quot;https://developer.android.com/guide/topics/graphics/2d-graphics.html#nine-patch&quot;&gt;Android docs&lt;/a&gt;.</source>
          <target state="translated">Android의 경우 시작 화면 이미지는 늘려야하는 방법을 지정하는 특수 &quot;9 패치&quot;이미지 파일이어야합니다. &lt;a href=&quot;https://developer.android.com/guide/topics/graphics/2d-graphics.html#nine-patch&quot;&gt;Android 문서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6e3e13018b30997708a71b1a620d710323a4ae08" translate="yes" xml:space="preserve">
          <source>For Meteor, we recommend using a CDN with &amp;ldquo;origin&amp;rdquo; support (like &lt;a href=&quot;http://joshowens.me/using-a-cdn-with-your-production-meteor-app/&quot;&gt;CloudFront&lt;/a&gt;), which means that instead of uploading your files in advance, the CDN automatically fetches them from your server. You put your files in &lt;code&gt;public/&lt;/code&gt; (in this case &lt;code&gt;public/cats.gif&lt;/code&gt;), and when your Australian user asks the CDN for &lt;code&gt;http://mycdn.com/cats.gif&lt;/code&gt;, the CDN, behind the scenes, fetches &lt;code&gt;http://myapp.com/cats.gif&lt;/code&gt; and then delivers it to the user. While this is slightly slower than getting &lt;code&gt;http://myapp.com/cats.gif&lt;/code&gt; directly, it only happens one time, because the CDN saves the file, and all subsequent Australians who ask for the file get it quickly.</source>
          <target state="translated">Meteor의 경우, &quot;원본&quot;지원 ( &lt;a href=&quot;http://joshowens.me/using-a-cdn-with-your-production-meteor-app/&quot;&gt;CloudFront&lt;/a&gt; 와 같은 )을 지원하는 CDN을 사용하는 것이 좋습니다. 즉, 파일을 미리 업로드하는 대신 CDN이 서버에서 자동으로 가져옵니다. 파일을 &lt;code&gt;public/&lt;/code&gt; (이 경우 &lt;code&gt;public/cats.gif&lt;/code&gt; )에 넣고 호주 사용자가 CDN에 &lt;code&gt;http://mycdn.com/cats.gif&lt;/code&gt; 를 요청하면 CDN 이 장면 뒤에서 &lt;code&gt;http://myapp.com/cats.gif&lt;/code&gt; 가져옵니다 . /myapp.com/cats.gif 그런 다음 사용자에게 전달합니다. 이것은 &lt;code&gt;http://myapp.com/cats.gif&lt;/code&gt; 를 직접 얻는 것보다 약간 느리지 만 CDN이 파일을 저장하고 파일을 요청하는 모든 후속 호주인이 파일을 빨리 가져 오기 때문에 한 번만 발생합니다.</target>
        </trans-unit>
        <trans-unit id="6ba9007be8c5e94046dcbd42244c759a90eb82b7" translate="yes" xml:space="preserve">
          <source>For React-based apps, the &lt;a href=&quot;https://atmospherejs.com/universe/i18n&quot;&gt;&lt;code&gt;universe:18n&lt;/code&gt; package&lt;/a&gt; presents an alternative solution to &lt;code&gt;tap:i18n&lt;/code&gt;. &lt;code&gt;universe:i18n&lt;/code&gt; adopts similar conventions to &lt;code&gt;tap:i18n&lt;/code&gt;, but also includes a convenient drop-in React component and omits &lt;code&gt;tap:i18n's&lt;/code&gt; dependencies on Meteor&amp;rsquo;s &lt;code&gt;templating&lt;/code&gt; and &lt;code&gt;jquery&lt;/code&gt; packages. &lt;code&gt;universe:i18n&lt;/code&gt; was intended for Meteor React applications using &lt;code&gt;ES2015&lt;/code&gt; modules, but it can be used without React or modules.</source>
          <target state="translated">React 기반 앱의 경우 &lt;a href=&quot;https://atmospherejs.com/universe/i18n&quot;&gt; &lt;code&gt;universe:18n&lt;/code&gt; 패키지&lt;/a&gt; 는 &lt;code&gt;tap:i18n&lt;/code&gt; 대체 솔루션을 제공합니다 . &lt;code&gt;universe:i18n&lt;/code&gt; 은 &lt;code&gt;tap:i18n&lt;/code&gt; 과 유사한 규칙을 채택 하지만 편리한 드롭 인 React 구성 요소도 포함하며 Meteor의 &lt;code&gt;templating&lt;/code&gt; 및 &lt;code&gt;jquery&lt;/code&gt; 패키지 에 대한 &lt;code&gt;tap:i18n's&lt;/code&gt; 종속성을 생략 합니다. &lt;code&gt;universe:i18n&lt;/code&gt; 은 &lt;code&gt;ES2015&lt;/code&gt; 모듈을 사용하는 Meteor React 응용 프로그램을위한 것이지만 React 또는 모듈없이 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="45b297efb8a20bbe269b6486daea5c1cc0f1f3c0" translate="yes" xml:space="preserve">
          <source>For Views created by invoking templates, returns the &lt;a href=&quot;templates#Template-instances&quot;&gt;template instance&lt;/a&gt; object for this particular View. For example, in a &lt;a href=&quot;templates#Template-onCreated&quot;&gt;&lt;code&gt;created&lt;/code&gt;&lt;/a&gt; callback, &lt;code&gt;this.view.templateInstance() === this&lt;/code&gt;.</source>
          <target state="translated">템플릿을 호출하여 생성 된 뷰의 경우이 특정 뷰에 대한 &lt;a href=&quot;templates#Template-instances&quot;&gt;템플릿 인스턴스&lt;/a&gt; 객체를 반환합니다 . 예를 들어, A의 &lt;a href=&quot;templates#Template-onCreated&quot;&gt; &lt;code&gt;created&lt;/code&gt; &lt;/a&gt; 콜백 &lt;code&gt;this.view.templateInstance() === this&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3b9602ab0f2eed549af6ce92bb50a31dfad68229" translate="yes" xml:space="preserve">
          <source>For Views created by invoking templates, the original Template object. For example, &lt;code&gt;Blaze.render(Template.foo).template === Template.foo&lt;/code&gt;.</source>
          <target state="translated">템플릿을 호출하여 만든 뷰의 경우 원래 템플릿 개체입니다. 예를 들어, &lt;code&gt;Blaze.render(Template.foo).template === Template.foo&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="5b39025aef99aad05f2736347165bcf5032e3a91" translate="yes" xml:space="preserve">
          <source>For all your files in &lt;code&gt;public/&lt;/code&gt;, change their URLs to point at the CDN. You can use a helper like &lt;code&gt;assetUrl&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;public/&lt;/code&gt; 모든 파일에 대해 CDN을 가리 키도록 URL을 변경하십시오. &lt;code&gt;assetUrl&lt;/code&gt; 과 같은 도우미를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b8452546992174d3c1bfc7307b3febe9a6cf8999" translate="yes" xml:space="preserve">
          <source>For apps, this is as easy as &lt;code&gt;meteor add modules&lt;/code&gt;, or (even better) &lt;code&gt;meteor add ecmascript&lt;/code&gt;, since the &lt;code&gt;ecmascript&lt;/code&gt; package &lt;em&gt;implies&lt;/em&gt; the &lt;code&gt;modules&lt;/code&gt; package.</source>
          <target state="translated">앱의 경우 &lt;code&gt;ecmascript&lt;/code&gt; 패키지 가 &lt;code&gt;modules&lt;/code&gt; 패키지를 &lt;em&gt;암시&lt;/em&gt; 하기 때문에 &lt;code&gt;meteor add modules&lt;/code&gt; 또는 더 나은 &lt;code&gt;meteor add ecmascript&lt;/code&gt; 만큼 쉽습니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0455a3b3e41b1c093be793af12deae4408af6c90" translate="yes" xml:space="preserve">
          <source>For backwards compatibility Meteor 1.3 still provides Meteor&amp;rsquo;s global namespacing for the Meteor core package as well as for other Meteor packages you include in your application. You can also still directly call functions such as &lt;a href=&quot;http://docs.meteor.com/#/full/meteor_publish&quot;&gt;&lt;code&gt;Meteor.publish&lt;/code&gt;&lt;/a&gt;, as in previous versions of Meteor, without first importing them. However, it is recommended best practice that you first load all the Meteor &amp;ldquo;pseudo-globals&amp;rdquo; using the &lt;code&gt;import { Name } from 'meteor/package'&lt;/code&gt; syntax before using them. For instance:</source>
          <target state="translated">이전 버전과의 호환성을 위해 Meteor 1.3은 여전히 ​​Meteor 핵심 패키지와 응용 프로그램에 포함하는 다른 Meteor 패키지에 대한 Meteor의 글로벌 네임 스페이스를 제공합니다. 이전 버전의 Meteor에서 와 같이 &lt;a href=&quot;http://docs.meteor.com/#/full/meteor_publish&quot;&gt; &lt;code&gt;Meteor.publish&lt;/code&gt; &lt;/a&gt; 와 같은 함수 를 먼저 가져 오지 않고도 직접 직접 호출 할 수도 있습니다. 그러나 사용 하기 전에 &lt;code&gt;import { Name } from 'meteor/package'&lt;/code&gt; 구문 에서 {Name} 가져 오기를 사용하여 모든 Meteor &quot;의사-글로벌&quot;을 먼저로드하는 것이 가장 좋습니다 . 예를 들어 :</target>
        </trans-unit>
        <trans-unit id="0c19096759c939c2deb59c4543acfc1ddfaa6521" translate="yes" xml:space="preserve">
          <source>For backwards compatibility with Meteor 1.2 and early releases, Meteor by default makes available directly to your app all symbols referenced in &lt;code&gt;api.export&lt;/code&gt; in any packages you have installed. However, it is recommended that you import these symbols first before using them.</source>
          <target state="translated">Meteor 1.2 및 초기 릴리스와의 하위 호환성을 위해 Meteor는 기본적으로 설치 한 모든 패키지 에서 &lt;code&gt;api.export&lt;/code&gt; 에서 참조되는 모든 기호를 앱에서 직접 사용할 수 있도록합니다 . 그러나이 심볼을 사용하기 전에 먼저 가져 오는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="b5efa68bab8287fb1652bd06f0ec969985d6c7cc" translate="yes" xml:space="preserve">
          <source>For certain applications, for example pagination, you&amp;rsquo;ll want to pass options into the publication to control things like how many documents should be sent to the client. There are some extra considerations to keep in mind for this particular case.</source>
          <target state="translated">페이지 매김과 같은 특정 응용 프로그램의 경우 클라이언트에 전송해야하는 문서 수와 같은 항목을 제어하기 위해 옵션을 게시에 전달하려고합니다. 이 특별한 경우를 명심해야 할 몇 가지 추가 고려 사항이 있습니다.</target>
        </trans-unit>
        <trans-unit id="fd1f0a999e8851f6dd247302510ac5f7acc2f7b2" translate="yes" xml:space="preserve">
          <source>For code that runs on the client, the global &lt;code&gt;Meteor.userId()&lt;/code&gt; reactive function will give you the ID of the currently logged in user.</source>
          <target state="translated">클라이언트에서 실행되는 코드의 경우 전역 &lt;code&gt;Meteor.userId()&lt;/code&gt; 반응 함수는 현재 로그인 한 사용자의 ID를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="e8941c82fe7784348b0df1ef942bf02807f9865b" translate="yes" xml:space="preserve">
          <source>For detailed information about all of the features Flow Router Extra has to offer, refer to the &lt;a href=&quot;https://github.com/VeliovGroup/flow-router#flowrouter-extra&quot;&gt;Flow Router Extra Documentation&lt;/a&gt;.</source>
          <target state="translated">Flow Router Extra가 제공해야하는 모든 기능에 대한 자세한 내용은 &lt;a href=&quot;https://github.com/VeliovGroup/flow-router#flowrouter-extra&quot;&gt;Flow Router Extra Documentation을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="05da61fff1234ddd48184a281bf97f7dafdfe3fe" translate="yes" xml:space="preserve">
          <source>For detailed information about all of the features Flow Router has to offer, refer to the &lt;a href=&quot;https://kadira.io/academy/meteor-routing-guide&quot;&gt;Kadira Meteor routing guide&lt;/a&gt;.</source>
          <target state="translated">Flow Router가 제공하는 모든 기능에 대한 자세한 내용은 &lt;a href=&quot;https://kadira.io/academy/meteor-routing-guide&quot;&gt;Kadira Meteor 라우팅 안내서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ca5a0d6ac3719d1483547ba26235567c8f6cf689" translate="yes" xml:space="preserve">
          <source>For detailed information about all of the features Iron Router has to offer, refer to the &lt;a href=&quot;https://iron-meteor.github.io/iron-router/&quot;&gt;Iron Router Guide&lt;/a&gt;</source>
          <target state="translated">Iron Router가 제공하는 모든 기능에 대한 자세한 내용은 &lt;a href=&quot;https://iron-meteor.github.io/iron-router/&quot;&gt;Iron Router Guide를&lt;/a&gt; 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="48c669636c4bc4c437e7e40d53dc912f4797d4f7" translate="yes" xml:space="preserve">
          <source>For each module defined above, it makes sense to co-locate the various auxiliary files with the base JavaScript file. For instance, a Blaze UI component should have its template HTML, JavaScript logic, and CSS rules in the same directory. A JavaScript module with some business logic should be co-located with the unit tests for that module.</source>
          <target state="translated">위에서 정의한 각 모듈에 대해 다양한 보조 파일을 기본 JavaScript 파일과 함께 배치하는 것이 좋습니다. 예를 들어, Blaze UI 구성 요소의 템플릿 HTML, JavaScript 논리 및 CSS 규칙은 동일한 디렉토리에 있어야합니다. 비즈니스 로직이있는 JavaScript 모듈은 해당 모듈의 단위 테스트와 함께 배치해야합니다.</target>
        </trans-unit>
        <trans-unit id="b0136e3434ebe2b4441e7e72b6fcef31a6a55e8b" translate="yes" xml:space="preserve">
          <source>For example in &lt;code&gt;app-not-found.html&lt;/code&gt;:</source>
          <target state="translated">예를 들어 &lt;code&gt;app-not-found.html&lt;/code&gt; 에서 :</target>
        </trans-unit>
        <trans-unit id="3d799858ea313a6fb12f6f4a730014fa1744fcb4" translate="yes" xml:space="preserve">
          <source>For example this Cordova whitelist syntax:</source>
          <target state="translated">예를 들어이 Cordova 화이트리스트 구문은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9fd0d45557850239a1954273258a5128e8a2a4b5" translate="yes" xml:space="preserve">
          <source>For example, &lt;a href=&quot;#accountsui&quot;&gt;the &lt;code&gt;accounts-ui&lt;/code&gt; package&lt;/a&gt; uses this to display an animation while the login request is being processed.</source>
          <target state="translated">예를 들어, &lt;a href=&quot;#accountsui&quot;&gt; &lt;code&gt;accounts-ui&lt;/code&gt; &lt;/a&gt; 패키지 로그인 요청이 처리되는 동안 애니메이션을 표시 이것을 이용한다.</target>
        </trans-unit>
        <trans-unit id="e87873f2da987898fc0ffeef06ad69f2df128cd5" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;Template.parentData(0)&lt;/code&gt; is equivalent to &lt;code&gt;Template.currentData()&lt;/code&gt;. &lt;code&gt;Template.parentData(2)&lt;/code&gt; is equivalent to &lt;code&gt;{{../..}}&lt;/code&gt; in a template.</source>
          <target state="translated">예를 들어 &lt;code&gt;Template.parentData(0)&lt;/code&gt; 은 &lt;code&gt;Template.currentData()&lt;/code&gt; 와 같습니다 . &lt;code&gt;Template.parentData(2)&lt;/code&gt; 는 템플릿의 &lt;code&gt;{{../..}}&lt;/code&gt; 와 같습니다 .</target>
        </trans-unit>
        <trans-unit id="8640c408975d4966324d1f32b8f59e23a781fc35" translate="yes" xml:space="preserve">
          <source>For example, executing &lt;code&gt;meteor node&lt;/code&gt; will enter the Node.js &lt;a href=&quot;https://nodejs.org/dist/latest-v4.x/docs/api/repl.html&quot;&gt;Read-Eval-Print-Loop (REPL)&lt;/a&gt; interface and allow you to interactively run JavaScript and see the results.</source>
          <target state="translated">예를 들어 &lt;code&gt;meteor node&lt;/code&gt; 를 실행 하면 Node.js &lt;a href=&quot;https://nodejs.org/dist/latest-v4.x/docs/api/repl.html&quot;&gt;REPL (Read-Eval-Print-Loop)&lt;/a&gt; 인터페이스로 들어가 대화식으로 JavaScript를 실행하고 결과를 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="566dc7e4713926cae90867a37306dc5eacff8228" translate="yes" xml:space="preserve">
          <source>For example, executing &lt;code&gt;meteor npm install lodash --save&lt;/code&gt; would install &lt;code&gt;lodash&lt;/code&gt; from npm to your &lt;code&gt;node_modules&lt;/code&gt; directory and save its usage in your &lt;a href=&quot;https://docs.npmjs.com/files/package.json&quot;&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/a&gt; file.</source>
          <target state="translated">예를 들어 &lt;code&gt;meteor npm install lodash --save&lt;/code&gt; 를 실행 하면 &lt;code&gt;lodash&lt;/code&gt; 을 npm에서 &lt;code&gt;node_modules&lt;/code&gt; 디렉토리에 설치 하고 사용법을 &lt;a href=&quot;https://docs.npmjs.com/files/package.json&quot;&gt; &lt;code&gt;package.json&lt;/code&gt; &lt;/a&gt; 파일 에 저장 합니다.</target>
        </trans-unit>
        <trans-unit id="9fa29970e497049df665d7fa4ef565c0f68a2476" translate="yes" xml:space="preserve">
          <source>For example, here we prepare our Android and iOS hardware permissions for a WebRTC session.</source>
          <target state="translated">예를 들어 WebRTC 세션에 대한 Android 및 iOS 하드웨어 권한을 준비합니다.</target>
        </trans-unit>
        <trans-unit id="b86ffe152961696e9821eee492ea8cec835596cf" translate="yes" xml:space="preserve">
          <source>For example, if a component requires a lot of complicated &lt;a href=&quot;http://d3js.org&quot;&gt;D3&lt;/a&gt; code for drawing graphs, it&amp;rsquo;s likely that that code itself could live in a separate module that&amp;rsquo;s called by the component. That makes it easier to abstract the code later and share it between various components that need to all draw graphs.</source>
          <target state="translated">예를 들어, 구성 요소에 그래프를 그리기 위해 복잡한 &lt;a href=&quot;http://d3js.org&quot;&gt;D3&lt;/a&gt; 코드 가 많이 필요한 경우 해당 코드 자체가 구성 요소가 호출하는 별도의 모듈에있을 수 있습니다. 따라서 나중에 코드를 추상화하고 그래프를 그리는 데 필요한 다양한 구성 요소간에 코드를 쉽게 공유 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a77adffe34fcc02bce31edfd361bac24fa81f5f5" translate="yes" xml:space="preserve">
          <source>For example, if there is a template named &amp;ldquo;foo&amp;rdquo;, &lt;code&gt;{{&amp;gt; Template.dynamic
template=&quot;foo&quot;}}&lt;/code&gt; is equivalent to &lt;code&gt;{{&amp;gt; foo}}&lt;/code&gt; and &lt;code&gt;{{#Template.dynamic template=&quot;foo&quot;}} ... {{/Template.dynamic}}&lt;/code&gt; is equivalent to &lt;code&gt;{{#foo}} ... {{/foo}}&lt;/code&gt;.</source>
          <target state="translated">예를 들어 이름이 &quot;foo&quot;인 템플릿이 있으면 &lt;code&gt;{{&amp;gt; Template.dynamic template=&quot;foo&quot;}}&lt;/code&gt; 는 &lt;code&gt;{{&amp;gt; foo}}&lt;/code&gt; 및 &lt;code&gt;{{#Template.dynamic template=&quot;foo&quot;}} ... {{/Template.dynamic}}&lt;/code&gt; 은 &lt;code&gt;{{#foo}} ... {{/foo}}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="86cf62ff62bc1d631a9379c79b98bc20c22267e7" translate="yes" xml:space="preserve">
          <source>For example, in Galaxy, while you wait for your app&amp;rsquo;s log to load, you see a loading state indicating what you might see:</source>
          <target state="translated">예를 들어 Galaxy에서는 앱의 로그가로드 될 때까지 기다리는 동안 표시되는 내용을 나타내는 로딩 상태가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="3cb93cc9fbc0bc78a05e8172f5fd6a76ee0217c6" translate="yes" xml:space="preserve">
          <source>For example, in the Todos example app, we have a &lt;code&gt;ListPage&lt;/code&gt; component, which renders list metadata and the tasks in the list. In order to do so, it needs to &lt;a href=&quot;data-loading#subscriptions&quot;&gt;subscribe&lt;/a&gt; to the &lt;code&gt;todos.inList&lt;/code&gt; publication, check that subscription&amp;rsquo;s readiness, then fetch the list of todos from the &lt;code&gt;Todos&lt;/code&gt; collection.</source>
          <target state="translated">예를 들어, Todos 예제 앱에는 목록 메타 데이터 및 목록의 태스크를 렌더링 하는 &lt;code&gt;ListPage&lt;/code&gt; 컴포넌트 가 있습니다 . 이를 위해, 그것은 필요가 &lt;a href=&quot;data-loading#subscriptions&quot;&gt;가입&lt;/a&gt; 받는 &lt;code&gt;todos.inList&lt;/code&gt; 의 다음에서 수행 할 작업 목록 가져 오기, 게시 그 가입의 준비 상태를 확인 &lt;code&gt;Todos&lt;/code&gt; 수집.</target>
        </trans-unit>
        <trans-unit id="eef59f3ea5c85e68491a742c6d4c70537b40a9de" translate="yes" xml:space="preserve">
          <source>For example, let&amp;rsquo;s say packages A and B both depend on version 1.1.0 of package X. If a new version of A depends on X@2.0.0, but there is no new version of package B, running &lt;code&gt;meteor update&lt;/code&gt; will not update A, because doing so will break package B.</source>
          <target state="translated">예를 들어 패키지 A와 B가 모두 패키지 X의 버전 1.1.0에 의존한다고 가정합니다. A의 새 버전이 X@2.0.0에 의존하지만 패키지 B의 새 버전이없는 경우 &lt;code&gt;meteor update&lt;/code&gt; 를 실행 해도 업데이트되지 않습니다 A : 패키지 B가 손상되기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="5ee1889df2b5586f8f2338c6e8a85c7f8b4855bb" translate="yes" xml:space="preserve">
          <source>For example, let&amp;rsquo;s say you published name:cool-binary-blob from a Mac. If you want people to be able to use cool-binary-blob from Linux, you should log into a Linux machine and then run &lt;code&gt;meteor publish-for-arch name:cool-binary-blob@version&lt;/code&gt;. It will notice that you are on a linux machine, and that there is no Linux-compatible build for your package and publish one.</source>
          <target state="translated">예를 들어 Mac에서 name : cool-binary-blob을 게시했다고 가정합니다. 사람들이 Linux에서 cool-binary-blob를 사용할 수있게하려면 Linux 시스템에 로그인 한 후 &lt;code&gt;meteor publish-for-arch name:cool-binary-blob@version&lt;/code&gt; 합니다. Linux 시스템에 있고 패키지를위한 Linux 호환 빌드가없고 게시 할 수 있음을 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="62a5b111a9dfaff38a5ba5283dc2e59ec51fad50" translate="yes" xml:space="preserve">
          <source>For example, the &lt;code&gt;toJSONValue&lt;/code&gt; method for &lt;a href=&quot;#mongo_object_id&quot;&gt;&lt;code&gt;Mongo.ObjectID&lt;/code&gt;&lt;/a&gt; could be:</source>
          <target state="translated">예를 들어, &lt;code&gt;toJSONValue&lt;/code&gt; 에 대한 방법 &lt;a href=&quot;#mongo_object_id&quot;&gt; &lt;code&gt;Mongo.ObjectID&lt;/code&gt; 이&lt;/a&gt; 될 수있다 :</target>
        </trans-unit>
        <trans-unit id="c10ae88355a18b76c1551618fb9cf80d78810409" translate="yes" xml:space="preserve">
          <source>For example, the files above are arranged in the correct load order. &lt;code&gt;main.html&lt;/code&gt; is loaded second because HTML templates are always loaded first, even if it begins with &lt;code&gt;main.&lt;/code&gt;, since rule 1 has priority over rule 2. However, it will be loaded after &lt;code&gt;nav.html&lt;/code&gt; because rule 2 has priority over rule 5.</source>
          <target state="translated">예를 들어, 위의 파일은 올바른로드 순서로 정렬됩니다. &lt;code&gt;main.&lt;/code&gt; 시작하더라도 HTML 템플리트가 항상 먼저로드되므로 &lt;code&gt;main.html&lt;/code&gt; 이 두 번째로로드됩니다 . 규칙 1이 규칙 2보다 우선하므로 규칙 2가 규칙 5보다 우선하므로 &lt;code&gt;nav.html&lt;/code&gt; 이후에로드됩니다 .</target>
        </trans-unit>
        <trans-unit id="e4dd27f05c4753c540bb1f7d7ef347987bb67fdb" translate="yes" xml:space="preserve">
          <source>For example, to use the excellent &lt;a href=&quot;http://griddlegriddle.github.io/Griddle/&quot;&gt;Griddle&lt;/a&gt; React package for making tables, you could run</source>
          <target state="translated">예를 들어, 테이블을 만들기 위해 훌륭한 &lt;a href=&quot;http://griddlegriddle.github.io/Griddle/&quot;&gt;Griddle&lt;/a&gt; React 패키지 를 사용하려면</target>
        </trans-unit>
        <trans-unit id="6d635e55db8455e0b072cb8bc6954e7477d2016d" translate="yes" xml:space="preserve">
          <source>For example, when called in a user&amp;rsquo;s browser, connections in that browser remain logged in, but any other browsers or DDP clients logged in as that user will be logged out.</source>
          <target state="translated">예를 들어, 사용자 브라우저에서 호출 된 경우 해당 브라우저의 연결은 로그인 상태를 유지하지만 해당 사용자로 로그인 한 다른 브라우저 또는 DDP 클라이언트는 로그 아웃됩니다.</target>
        </trans-unit>
        <trans-unit id="3805566eeb73c4d01f62aefc9f499b8715f3648e" translate="yes" xml:space="preserve">
          <source>For example, you can monitor a cursor (which is a reactive data source) and aggregate it into a session variable:</source>
          <target state="translated">예를 들어 커서 (반응 형 데이터 소스)를 모니터링하고이를 세션 변수로 집계 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="080a2498acd408c847cae567c97b97c7238bb2d4" translate="yes" xml:space="preserve">
          <source>For example, you could write a publication, then later add a secret field to the published collection. Now, the publication would be sending that secret to the client. If you filter the fields on every publication when you first write it, then adding another field won&amp;rsquo;t automatically publish it.</source>
          <target state="translated">예를 들어 게시를 작성한 다음 게시 된 컬렉션에 비밀 필드를 추가 할 수 있습니다. 이제 출판물은 그 비밀을 클라이언트에게 보내고 있습니다. 처음 쓸 때 모든 발행물에서 필드를 필터링하면 다른 필드를 추가해도 자동으로 발행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="85a17a9ab408b80980f23d1cc6e06e21d531d614" translate="yes" xml:space="preserve">
          <source>For example: &lt;code&gt;meteor run --port 4000&lt;/code&gt; will run the development server on &lt;code&gt;http://localhost:4000&lt;/code&gt; and the development MongoDB instance on &lt;code&gt;mongodb://localhost:4001&lt;/code&gt;.</source>
          <target state="translated">예를 들어 &lt;code&gt;meteor run --port 4000&lt;/code&gt; 은 &lt;code&gt;http://localhost:4000&lt;/code&gt; 에서 개발 서버를 , &lt;code&gt;mongodb://localhost:4001&lt;/code&gt; 에서 개발 MongoDB 인스턴스를 실행 합니다.</target>
        </trans-unit>
        <trans-unit id="78e6fd4a067693e270265f9ad03e373bb4f449a1" translate="yes" xml:space="preserve">
          <source>For further assistance, consult the documentation for the option you select.</source>
          <target state="translated">추가 지원이 필요하면 선택한 옵션에 대한 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="48807e2ffbc6e66cb853587acc8401737dab4f55" translate="yes" xml:space="preserve">
          <source>For iOS, you can also refer to the &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/IconMatrix.html&quot;&gt;Icon and image sizes&lt;/a&gt; in the iOS Human Interface Guidelines for more information about the way these different sizes are used.</source>
          <target state="translated">iOS의 경우 이러한 다른 크기가 사용되는 방식에 대한 자세한 내용은 iOS 휴먼 인터페이스 지침에서 &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/IconMatrix.html&quot;&gt;아이콘 및 이미지 크기&lt;/a&gt; 를 참조 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1edee26abee8ad003e87c6f335a9c78a08e364b8" translate="yes" xml:space="preserve">
          <source>For instance for errors in the Todos example app, we create an &lt;code&gt;errors&lt;/code&gt; module that allows us to easily alert a translated error for all of the errors that we can potentially throw from methods:</source>
          <target state="translated">예를 들어 Todos 예제 앱의 오류에 대해, 메소드에서 발생할 수있는 모든 오류에 대해 번역 된 오류를 쉽게 경고 할 수 있는 &lt;code&gt;errors&lt;/code&gt; 모듈을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="b5fa351a6359e6e17aeb97e6aeed03106869143d" translate="yes" xml:space="preserve">
          <source>For instance, if you are writing a React package, you should not directly depend on &lt;a href=&quot;https://www.npmjs.com/package/react&quot;&gt;&lt;code&gt;react&lt;/code&gt;&lt;/a&gt;, but instead use &lt;code&gt;check-npm-versions&lt;/code&gt; to check the user has installed it:</source>
          <target state="translated">예를 들어 React 패키지를 작성하는 경우 &lt;a href=&quot;https://www.npmjs.com/package/react&quot;&gt; &lt;code&gt;react&lt;/code&gt; 에&lt;/a&gt; 직접 의존하지 말고 &lt;code&gt;check-npm-versions&lt;/code&gt; 를 사용하여 사용자가 설치 했는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="0a88a6384a3e1454ae3e62fb6e41d53f1dbb7ba8" translate="yes" xml:space="preserve">
          <source>For instance, in &amp;ldquo;pure&amp;rdquo; MongoDB you might design the schema so that each list document had a field called &lt;code&gt;todos&lt;/code&gt; which was an array of todo items:</source>
          <target state="translated">예를 들어, &quot;순수한&quot;MongoDB에서는 각 목록 문서에 &lt;code&gt;todos&lt;/code&gt; 일 항목의 배열 인 todos 라는 필드가 있도록 스키마를 설계 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ccd52b90405eb61b7579e3e76116bcfffacbbd7c" translate="yes" xml:space="preserve">
          <source>For instance, in Galaxy, we use a component explorer called Chromatic to render each component one specification at a time or with all specifications at once.</source>
          <target state="translated">예를 들어 Galaxy에서는 Chromatic이라는 구성 요소 탐색기를 사용하여 각 구성 요소를 한 번에 하나씩 또는 모든 사양으로 한 번에 렌더링합니다.</target>
        </trans-unit>
        <trans-unit id="922c719ef9c60481220e51992dfa7bca5a0ef389" translate="yes" xml:space="preserve">
          <source>For instance, in the Todos example app, when creating a new list, the list creation will basically always succeed, so we write:</source>
          <target state="translated">예를 들어, Todos 예제 앱에서 새 목록을 작성할 때 목록 작성은 기본적으로 항상 성공하므로 다음과 같이 작성합니다.</target>
        </trans-unit>
        <trans-unit id="a7255240ff1e7f09fe6219115c2180ff3242ca98" translate="yes" xml:space="preserve">
          <source>For instance, in the case of the &lt;code&gt;Todos_item&lt;/code&gt; sub-component, we need to provide two extra arguments to control the editing state of the item, which would have been a hassle to add if the item was used with a single &lt;code&gt;todo&lt;/code&gt; argument.</source>
          <target state="translated">예를 들어 &lt;code&gt;Todos_item&lt;/code&gt; 하위 구성 요소의 경우 항목의 편집 상태를 제어하기 위해 두 개의 추가 인수를 제공해야합니다. 항목이 단일 &lt;code&gt;todo&lt;/code&gt; 인수 와 함께 사용 된 경우 추가하기가 번거로 웠습니다 .</target>
        </trans-unit>
        <trans-unit id="b1f2b7b8dfce76c741fe14ec2be61e8666c8af53" translate="yes" xml:space="preserve">
          <source>For instance, only one todo item can be in the editing state at a time, so the &lt;code&gt;Lists_show&lt;/code&gt; component manages the state of which is edited. When you focus on an item, that item needs to tell the list&amp;rsquo;s component to make it the &amp;ldquo;edited&amp;rdquo; one. To do that, we pass a callback into the &lt;code&gt;Todos_item&lt;/code&gt; component, and the child calls it whenever the state needs to be updated in the parent:</source>
          <target state="translated">예를 들어 한 번에 하나의 할 일 항목 만 편집 상태에있을 수 있으므로 &lt;code&gt;Lists_show&lt;/code&gt; 구성 요소는 편집 된 상태를 관리합니다. 항목에 초점을 맞출 때 해당 항목은 목록의 구성 요소에&amp;ldquo;편집 된&amp;rdquo;항목이되도록 지시해야합니다. 이를 위해 우리는 콜백을 &lt;code&gt;Todos_item&lt;/code&gt; 컴포넌트 로 전달 하고 자식은 상태를 부모에서 업데이트해야 할 때마다 콜백을 호출합니다.</target>
        </trans-unit>
        <trans-unit id="f81f18b253fa8cb4f09571d0bd339604f5b81ee3" translate="yes" xml:space="preserve">
          <source>For instance, suppose you have many places in your application where you need an input to blur itself when you click the &amp;ldquo;esc&amp;rdquo; key. If you were building an autocomplete widget that also wanted this functionality, you could compose a &lt;code&gt;blurringInput&lt;/code&gt; inside your &lt;code&gt;autocompleteInput&lt;/code&gt;:</source>
          <target state="translated">예를 들어, &quot;esc&quot;키를 클릭 할 때 입력을 흐리게하기 위해 입력이 필요한 응용 프로그램에 많은 장소가 있다고 가정합니다. 이 기능을 원하는 자동 완성 위젯을 작성하는 경우 &lt;code&gt;autocompleteInput&lt;/code&gt; 내부 에 &lt;code&gt;blurringInput&lt;/code&gt; 을 작성할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="111f242bece144a1b83b659bf3ca03b252908cb8" translate="yes" xml:space="preserve">
          <source>For legacy reasons, some built-in Meteor functions such as &lt;code&gt;check&lt;/code&gt; throw errors with a number in this field.</source>
          <target state="translated">레거시 이유로 인해이 필드에 숫자가 포함 된 &lt;code&gt;check&lt;/code&gt; 발생 오류와 같은 일부 내장 Meteor 기능 이 있습니다.</target>
        </trans-unit>
        <trans-unit id="d5ebb8a6452aaffb1d5be31776a4af5cf4256f24" translate="yes" xml:space="preserve">
          <source>For local collections you can pass a comparator function which receives two document objects, and returns -1 if the first document comes first in order, 1 if the second document comes first, or 0 if neither document comes before the other. This is a Minimongo extension to MongoDB.</source>
          <target state="translated">로컬 컬렉션의 경우 두 개의 문서 객체를 수신하고 첫 번째 문서가 먼저 오면 -1을 반환하고 두 번째 문서가 먼저 오면 1을 반환하고 문서가 다른 문서보다 먼저 오면 0을 반환하는 비교기 함수를 전달할 수 있습니다. 이것은 MongoDB에 대한 Minimongo 확장입니다.</target>
        </trans-unit>
        <trans-unit id="2c1968972ad567249cd3a475220952773e19e79d" translate="yes" xml:space="preserve">
          <source>For more details about the data stored in the user database, read the section below about accessing user data.</source>
          <target state="translated">사용자 데이터베이스에 저장된 데이터에 대한 자세한 내용은 사용자 데이터 액세스에 대한 아래 섹션을 읽으십시오.</target>
        </trans-unit>
        <trans-unit id="904a5faf5ea7e5f5e6010a90c693a822d1409c4c" translate="yes" xml:space="preserve">
          <source>For more details using &lt;code&gt;imports&lt;/code&gt; with packages see &lt;a href=&quot;https://guide.meteor.com/using-packages.html&quot;&gt;Using Packages&lt;/a&gt; in the Meteor Guide.</source>
          <target state="translated">패키지와 함께 &lt;code&gt;imports&lt;/code&gt; 를 사용하는 자세한 내용 은 Meteor 안내서의 &lt;a href=&quot;https://guide.meteor.com/using-packages.html&quot;&gt;패키지 사용을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0b43c25265faefdf94be8052443941685348d3ec" translate="yes" xml:space="preserve">
          <source>For more details, read the &lt;a href=&quot;http://eslint.org/docs/user-guide/getting-started&quot;&gt;Getting Started&lt;/a&gt; directions from the ESLint website.</source>
          <target state="translated">자세한 내용 은 ESLint 웹 사이트에서 &lt;a href=&quot;http://eslint.org/docs/user-guide/getting-started&quot;&gt;시작&lt;/a&gt; 지침을 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="ab3731f71191bf3f8b17f15af1c7db6d9645da41" translate="yes" xml:space="preserve">
          <source>For more examples and details on importing styles and using &lt;code&gt;@imports&lt;/code&gt; with packages see the &lt;a href=&quot;https://guide.meteor.com/using-packages.html#npm-styles&quot;&gt;Using Packages&lt;/a&gt; article.</source>
          <target state="translated">스타일 가져 오기 및 패키지와 함께 &lt;code&gt;@imports&lt;/code&gt; 사용에 대한 예제 및 세부 사항은 패키지 &lt;a href=&quot;https://guide.meteor.com/using-packages.html#npm-styles&quot;&gt;사용&lt;/a&gt; 기사를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="46c4e192939b2e56d0db0d6784e9de1a6631c8bd" translate="yes" xml:space="preserve">
          <source>For more information about &lt;code&gt;npm install&lt;/code&gt;, check out the &lt;a href=&quot;https://docs.npmjs.com/getting-started/installing-npm-packages-locally&quot;&gt;official documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;npm install&lt;/code&gt; 에 대한 자세한 내용은 &lt;a href=&quot;https://docs.npmjs.com/getting-started/installing-npm-packages-locally&quot;&gt;공식 설명서를&lt;/a&gt; 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="a8639b763dbebaf146bc810497bc0d4f75d0754e" translate="yes" xml:space="preserve">
          <source>For more information about how Meteor interacts with the application cache, see the &lt;a href=&quot;https://github.com/meteor/meteor/wiki/AppCache&quot;&gt;AppCache page&lt;/a&gt; in the Meteor wiki.</source>
          <target state="translated">Meteor가 응용 프로그램 캐시와 상호 작용하는 방법에 대한 자세한 내용은 Meteor Wiki 의 &lt;a href=&quot;https://github.com/meteor/meteor/wiki/AppCache&quot;&gt;AppCache 페이지&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="63674f40877f723f0dccce03be5204d7c2e5d291" translate="yes" xml:space="preserve">
          <source>For more ways to import styles, see the &lt;a href=&quot;build-tool#css-importing&quot;&gt;Build System&lt;/a&gt; article.</source>
          <target state="translated">스타일을 가져 오는 다른 방법은 &lt;a href=&quot;build-tool#css-importing&quot;&gt;시스템 빌드&lt;/a&gt; 기사를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="92fa2e426b695443e27efec8114f18b9996ccf0a" translate="yes" xml:space="preserve">
          <source>For mouse events, the number of the mouse button (1=left, 2=middle, 3=right). For key events, a character or key code.</source>
          <target state="translated">마우스 이벤트의 경우 마우스 버튼 수 (1 = 왼쪽, 2 = 중간, 3 = 오른쪽). 키 이벤트의 경우 문자 또는 키 코드</target>
        </trans-unit>
        <trans-unit id="1c9ae35f62e5a912e691433e0631b9770410af09" translate="yes" xml:space="preserve">
          <source>For now, you can not run this while a development server is running. Quit all running meteor applications before running this.</source>
          <target state="translated">현재는 개발 서버가 실행 중일 때는이 기능을 실행할 수 없습니다. 이것을 실행하기 전에 실행중인 유성 응용 프로그램을 모두 종료하십시오.</target>
        </trans-unit>
        <trans-unit id="31b62f37743481ae4492eec4b009460411828f37" translate="yes" xml:space="preserve">
          <source>For now, you must already have your application running locally with &lt;code&gt;meteor run&lt;/code&gt;. This will be easier in the future.</source>
          <target state="translated">지금은 &lt;code&gt;meteor run&lt;/code&gt; 으로 애플리케이션을 로컬에서 실행해야합니다 . 앞으로 더 쉬워 질 것입니다.</target>
        </trans-unit>
        <trans-unit id="a3652dfb8488c0d56351ed1adf1a16f71d675c45" translate="yes" xml:space="preserve">
          <source>For numbers or strings, use their value as the identification key.</source>
          <target state="translated">숫자 나 문자열의 경우 값을 식별 키로 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="925725292b1e71c5f7cdc9bb79036284a38dfef5" translate="yes" xml:space="preserve">
          <source>For object and array session values, you cannot use &lt;code&gt;Session.equals&lt;/code&gt;; instead, you need to use the &lt;code&gt;underscore&lt;/code&gt; package and write &lt;code&gt;_.isEqual(Session.get(key), value)&lt;/code&gt;.</source>
          <target state="translated">객체 및 배열 세션 값의 경우 &lt;code&gt;Session.equals&lt;/code&gt; 를 사용할 수 없습니다 . 대신 &lt;code&gt;underscore&lt;/code&gt; 패키지 를 사용하고 &lt;code&gt;_.isEqual(Session.get(key), value)&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="ef941d7fed6b8e4b8d9464578fd82b4485d6c9c9" translate="yes" xml:space="preserve">
          <source>For objects with an &lt;code&gt;_id&lt;/code&gt; field, use that field as the identification key</source>
          <target state="translated">&lt;code&gt;_id&lt;/code&gt; 필드 가있는 개체의 경우 해당 필드를 식별 키로 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="0aba4e822cbd347e0b93f9cfed0443c04b8cc033" translate="yes" xml:space="preserve">
          <source>For objects with no &lt;code&gt;_id&lt;/code&gt; field, use the array index as the identification key. In this case, appends are fast but prepends are slower.</source>
          <target state="translated">&lt;code&gt;_id&lt;/code&gt; 필드 가없는 객체의 경우 배열 인덱스를 식별 키로 사용하십시오. 이 경우 추가는 빠르지 만 접두사는 느립니다.</target>
        </trans-unit>
        <trans-unit id="01bd8d95de37d1835084d2030406dca2654c3195" translate="yes" xml:space="preserve">
          <source>For packages, you can enable &lt;code&gt;modules&lt;/code&gt; by adding &lt;code&gt;api.use('modules')&lt;/code&gt; to the &lt;code&gt;Package.onUse&lt;/code&gt; or &lt;code&gt;Package.onTest&lt;/code&gt; sections of your &lt;code&gt;package.js&lt;/code&gt; file.</source>
          <target state="translated">패키지의 경우, &lt;code&gt;package.js&lt;/code&gt; 파일 의 &lt;code&gt;Package.onUse&lt;/code&gt; 또는 &lt;code&gt;Package.onTest&lt;/code&gt; 섹션에 &lt;code&gt;api.use('modules')&lt;/code&gt; 를 추가 하여 &lt;code&gt;modules&lt;/code&gt; 을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7c05b5c6768dc923c7b8f8397d6194df77a22108" translate="yes" xml:space="preserve">
          <source>For reactive data sources that create many internal Dependencies, this function is useful to determine whether a particular Dependency is still tracking any dependency relationships or if it can be cleaned up to save memory.</source>
          <target state="translated">많은 내부 종속성을 생성하는 반응 형 데이터 소스의 경우이 기능은 특정 종속성이 여전히 종속성 관계를 추적하는지 또는 메모리를 절약하기 위해 정리할 수 있는지 여부를 판별하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="e4d0179ed7d8797a8095d6663f2f196d9b51bb61" translate="yes" xml:space="preserve">
          <source>For similar reasons to the above, it&amp;rsquo;s better to use &lt;code&gt;{{#each todo in todos}}&lt;/code&gt; rather than the older &lt;code&gt;{{#each todos}}&lt;/code&gt;. The second sets the entire data context of its children to a single &lt;code&gt;todo&lt;/code&gt; object, and makes it difficult to access any context from outside of the block.</source>
          <target state="translated">위와 비슷한 이유로 이전 &lt;code&gt;{{#each todos}}&lt;/code&gt; 보다 &lt;code&gt;{{#each todo in todos}}&lt;/code&gt; 하는 것이 좋습니다 . 두 번째는 자식의 전체 데이터 컨텍스트를 단일 할 &lt;code&gt;todo&lt;/code&gt; 객체로 설정하고 블록 외부에서 모든 컨텍스트에 액세스하기 어렵게 만듭니다.</target>
        </trans-unit>
        <trans-unit id="692287c894f343be47ecfb90daf9465a6ee9f891" translate="yes" xml:space="preserve">
          <source>For some apps, the off-the-shelf login templates provided by the various &lt;code&gt;useraccounts&lt;/code&gt; UI packages will work as-is, but most apps will want to customize some of the presentation. There&amp;rsquo;s a simple way to do that using the template replacement functionality of the &lt;code&gt;aldeed:template-extension&lt;/code&gt; package.</source>
          <target state="translated">일부 앱의 다양한에서 제공하는 기성 로그인 템플릿 &lt;code&gt;useraccounts&lt;/code&gt; 은 그대로 패키지가 작동 UI 있지만, 대부분의 애플리케이션은 프리젠 테이션의 일부를 사용자 정의 할 수 있습니다. &lt;code&gt;aldeed:template-extension&lt;/code&gt; 패키지 의 템플리트 대체 기능을 사용하여이를 수행하는 간단한 방법이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7184d81fb0dd16fea395b7b9f656a76d78250e72" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;accounts-facebook&lt;/code&gt; package to pick up these keys, you need to add them to the service configuration collection in the database. Here&amp;rsquo;s how you do that:</source>
          <target state="translated">를 들어 &lt;code&gt;accounts-facebook&lt;/code&gt; 패키지는 이러한 키를 데리러, 당신은 데이터베이스의 서비스 구성 컬렉션에 추가해야합니다. 그렇게하는 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9bba1a1f464744305cd2c6b64e5b016d4506a268" translate="yes" xml:space="preserve">
          <source>For the fast rebuilds between the Isobuild process runs, plugins can implement on-disk caching. If a plugin implements the &lt;code&gt;setDiskCacheDirectory&lt;/code&gt; method, it will be called from time to time with a new path on disk where the plugin can write its offline cache. The folder is correctly reset when the plugin is rebuilt or cache should be invalidated for any reason (for example, picked package versions set has changed).</source>
          <target state="translated">Isobuild 프로세스 실행 사이의 빠른 재 구축을 위해 플러그인은 온 디스크 캐싱을 구현할 수 있습니다. 플러그인이 &lt;code&gt;setDiskCacheDirectory&lt;/code&gt; 메소드를 구현하는 경우, 플러그인 이 오프라인 캐시를 작성할 수있는 디스크의 새 경로로 때때로 호출됩니다. 플러그인이 재 빌드 될 때 폴더가 올바르게 재설정되거나 어떤 이유로 든 캐시가 무효화되어야합니다 (예 : 선택된 패키지 버전 세트가 변경됨).</target>
        </trans-unit>
        <trans-unit id="de206915a2c5c624f4cee75931ba411b67345bde" translate="yes" xml:space="preserve">
          <source>For this reason, developers tend to try and get staging as close as possible to production. This means that all the steps we outline below about production deployment, should, if possible, also be followed for your staging server.</source>
          <target state="translated">이러한 이유로 개발자는 가능한 한 프로덕션에 가깝게 준비를 시도하는 경향이 있습니다. 이는 가능한 경우 스테이징 서버에 대해 프로덕션 배치에 대해 아래에 설명 된 모든 단계를 따라야 함을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="0388c6b514f53ff5daf6df4b67cfa29d434d521f" translate="yes" xml:space="preserve">
          <source>Force an immediate reconnection attempt if the client is not connected to the server.</source>
          <target state="translated">클라이언트가 서버에 연결되지 않은 경우 즉시 다시 연결을 시도하십시오.</target>
        </trans-unit>
        <trans-unit id="038614e3c37183d93a56aebe7bd19632bd773735" translate="yes" xml:space="preserve">
          <source>Forcibly change the password for a user.</source>
          <target state="translated">사용자의 비밀번호를 강제로 변경하십시오.</target>
        </trans-unit>
        <trans-unit id="08c7933553087fc033b0817ef0326a7f136d138b" translate="yes" xml:space="preserve">
          <source>Forcing SSL</source>
          <target state="translated">SSL 강제</target>
        </trans-unit>
        <trans-unit id="c6018a326bef2f0001fc5a6513c61ed5af6e990b" translate="yes" xml:space="preserve">
          <source>From that entrypoint, you can &lt;code&gt;import&lt;/code&gt; other files within your package, &lt;a href=&quot;structure&quot;&gt;just as you would in an application&lt;/a&gt;.</source>
          <target state="translated">해당 진입 점 &lt;a href=&quot;structure&quot;&gt;에서 응용 프로그램에서와 마찬가지로&lt;/a&gt; 패키지 내의 다른 파일을 &lt;code&gt;import&lt;/code&gt; 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="35d198578ebab50ddb10a6e0607499cd045917ab" translate="yes" xml:space="preserve">
          <source>From the client&amp;rsquo;s perspective, data published like this doesn&amp;rsquo;t look any different&amp;mdash;there&amp;rsquo;s actually no way for the client to know the difference as the DDP messages are the same. So even if you are connecting to, and mirroring, some esoteric data source, on the client it&amp;rsquo;ll appear like any other Mongo collection.</source>
          <target state="translated">클라이언트의 관점에서 볼 때 이와 같이 게시 된 데이터는 다르지 않습니다. 실제로 DDP 메시지가 동일한 클라이언트가 차이를 알 수있는 방법은 없습니다. 따라서 클라이언트에서 일부 난해한 데이터 소스에 연결하고 미러링하더라도 다른 몽고 컬렉션처럼 나타납니다.</target>
        </trans-unit>
        <trans-unit id="4664d5f9f0bcd9bde2772988dec0026e8a3f529b" translate="yes" xml:space="preserve">
          <source>From this point on, the process for building the app archive and submitting it to the App Store is the same as it would be for any other iOS app. Please refer to &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/SubmittingYourApp/SubmittingYourApp.html&quot;&gt;Apple&amp;rsquo;s documentation&lt;/a&gt; for further details.</source>
          <target state="translated">이 시점부터 앱 아카이브를 빌드하고 App Store에 제출하는 프로세스는 다른 iOS 앱과 동일합니다. 자세한 내용은 &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/SubmittingYourApp/SubmittingYourApp.html&quot;&gt;Apple 설명서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="32062cdab1018d3389efff35af89eafa35fd0a11" translate="yes" xml:space="preserve">
          <source>From this point on, the process for submitting the app to the Play Store is the same as it would be for any other Android app. &lt;code&gt;&amp;lt;your-app-name&amp;gt;.apk&lt;/code&gt; is the APK to upload to the store. Learn more by visiting &lt;a href=&quot;https://play.google.com/apps/publish&quot;&gt;https://play.google.com/apps/publish&lt;/a&gt;.</source>
          <target state="translated">이 시점부터 앱을 Play 스토어에 제출하는 과정은 다른 Android 앱과 동일합니다. &lt;code&gt;&amp;lt;your-app-name&amp;gt;.apk&lt;/code&gt; 는 상점에 업로드 할 APK입니다. &lt;a href=&quot;https://play.google.com/apps/publish&quot;&gt;https://play.google.com/apps/publish&lt;/a&gt; 를 방문하여 자세히 알아보세요 .</target>
        </trans-unit>
        <trans-unit id="0fe3752e01186e544e6f977a182c0156112153b2" translate="yes" xml:space="preserve">
          <source>From within your test entry point, you can import other files as you would in the package proper.</source>
          <target state="translated">테스트 진입 점에서 패키지에있는 것처럼 다른 파일을 가져올 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9b7feb2c711fd05c31bc63ffc267c4b2069c8fa8" translate="yes" xml:space="preserve">
          <source>Full-app integration test</source>
          <target state="translated">전체 앱 통합 테스트</target>
        </trans-unit>
        <trans-unit id="69c40f62f30db857db5eaab1aa564e3b1174aa70" translate="yes" xml:space="preserve">
          <source>Function Returning a Template</source>
          <target state="translated">템플릿을 반환하는 함수</target>
        </trans-unit>
        <trans-unit id="e991c5df2a66b6d1f35524f20dc6ca51c2ef02d9" translate="yes" xml:space="preserve">
          <source>Function called on the server each time a client subscribes. Inside the function, &lt;code&gt;this&lt;/code&gt; is the publish handler object, described below. If the client passed arguments to &lt;code&gt;subscribe&lt;/code&gt;, the function is called with the same arguments.</source>
          <target state="translated">클라이언트가 구독 할 때마다 서버에서 호출되는 함수입니다. 함수 내에서 &lt;code&gt;this&lt;/code&gt; 아래에 설명 된 공개 핸들러 오브젝트입니다. 클라이언트가 &lt;code&gt;subscribe&lt;/code&gt; 에 인수를 전달한 경우 함수는 동일한 인수로 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="ab30367062ed38b819b6bd1301fab2dab601fb15" translate="yes" xml:space="preserve">
          <source>Function to be called on invalidation. Receives one argument, the computation that was invalidated.</source>
          <target state="translated">무효화시에 호출되는 함수입니다. 무효화 된 계산 하나의 인수를받습니다.</target>
        </trans-unit>
        <trans-unit id="f75f7b175aeae18fab78229982832b49ec813ef4" translate="yes" xml:space="preserve">
          <source>Function to be called on stop. Receives one argument, the computation that was stopped.</source>
          <target state="translated">정지시 호출되는 기능. 계산이 중지 된 하나의 인수를받습니다.</target>
        </trans-unit>
        <trans-unit id="9eecea60a57a913127e41f958771d29bb8370567" translate="yes" xml:space="preserve">
          <source>Function to call. It will be called with three arguments: the document, a 0-based index, and &lt;em&gt;cursor&lt;/em&gt; itself.</source>
          <target state="translated">호출하는 기능. 문서, 0 기반 색인 및 &lt;em&gt;커서&lt;/em&gt; 자체의 세 가지 인수로 호출 됩니다.</target>
        </trans-unit>
        <trans-unit id="1f01a35ef81a85bbaf12fb2bdb81b4424b156a30" translate="yes" xml:space="preserve">
          <source>Functions are passed in an object with a &lt;code&gt;timeToReset&lt;/code&gt; field that specifies the number of milliseconds until the next method or subscription is allowed to run. The function must return a string of the error message.</source>
          <target state="translated">함수는 다음 메소드 또는 구독이 실행될 때까지 밀리 초 수를 지정 하는 &lt;code&gt;timeToReset&lt;/code&gt; 필드 와 함께 오브젝트에 전달됩니다 . 함수는 오류 메시지의 문자열을 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="7101fa2236726e5ffedbc9bd088c9d67d592afa7" translate="yes" xml:space="preserve">
          <source>Functions scheduled by multiple calls to &lt;code&gt;afterFlush&lt;/code&gt; are guaranteed to run in the order that &lt;code&gt;afterFlush&lt;/code&gt; was called. Functions are guaranteed to be called at a time when there are no invalidated computations that need rerunning. This means that if an &lt;code&gt;afterFlush&lt;/code&gt; function invalidates a computation, that computation will be rerun before any other &lt;code&gt;afterFlush&lt;/code&gt; functions are called.</source>
          <target state="translated">&lt;code&gt;afterFlush&lt;/code&gt; 를 여러 번 호출하여 예약 된 기능 은 &lt;code&gt;afterFlush&lt;/code&gt; 가 호출 된 순서대로 실행됩니다 . 재실행이 필요한 무효화 된 계산이 없을 때 함수가 호출되도록 보장합니다. 즉, &lt;code&gt;afterFlush&lt;/code&gt; 함수가 계산을 무효화하면 다른 &lt;code&gt;afterFlush&lt;/code&gt; 함수가 호출 되기 전에 해당 계산이 다시 실행됩니다 .</target>
        </trans-unit>
        <trans-unit id="a3ed1756955e8fb700c8ad1cd3c2099e6c8356f2" translate="yes" xml:space="preserve">
          <source>Functions that look at a proposed modification to the database and return true if it should be allowed.</source>
          <target state="translated">데이터베이스에 제안 된 수정을보고 허용되어야하는 경우 true를 리턴하는 함수입니다.</target>
        </trans-unit>
        <trans-unit id="1601343ed0c0908b54f8d593c4fab5d49b5d7ded" translate="yes" xml:space="preserve">
          <source>Functions that look at a proposed modification to the database and return true if it should be denied, even if an &lt;a href=&quot;#allow&quot;&gt;allow&lt;/a&gt; rule says otherwise.</source>
          <target state="translated">&lt;a href=&quot;#allow&quot;&gt;허용&lt;/a&gt; 규칙에 달리 명시되어 있더라도 데이터베이스에 제안 된 수정을보고 거부해야하는 경우 true를 반환하는 함수입니다 .</target>
        </trans-unit>
        <trans-unit id="1369aef754a288504cae91fdf0e4546b28a1eab9" translate="yes" xml:space="preserve">
          <source>Functions to call to deliver the result set as it changes</source>
          <target state="translated">결과 세트가 변경됨에 따라 전달하기 위해 호출하는 함수</target>
        </trans-unit>
        <trans-unit id="d1540a59de4e97bee463ad0bcbe7f3426d0647c8" translate="yes" xml:space="preserve">
          <source>Further customization</source>
          <target state="translated">추가 사용자 정의</target>
        </trans-unit>
        <trans-unit id="74f668f937db12449aed292d11ada61b07df8e23" translate="yes" xml:space="preserve">
          <source>Galaxy (recommended)</source>
          <target state="translated">갤럭시 (권장)</target>
        </trans-unit>
        <trans-unit id="4aaa1aebdd09f54b7e519ca9699b2fe6b94288f5" translate="yes" xml:space="preserve">
          <source>Galaxy is a distributed system that runs on Amazon AWS. If you understand what it takes to run Meteor apps correctly and just how Galaxy works, you&amp;rsquo;ll come to appreciate Galaxy&amp;rsquo;s value, and that it will save you a lot of time and trouble. Most large Meteor apps run on Galaxy today, and many of them have switched from custom solutions they used prior to Galaxy&amp;rsquo;s launch.</source>
          <target state="translated">Galaxy는 Amazon AWS에서 실행되는 분산 시스템입니다. Meteor 앱을 올바르게 실행하는 데 필요한 것과 Galaxy의 작동 방식을 이해하면 Galaxy의 가치를 높이 평가할 수 있으며 많은 시간과 문제를 줄일 수 있습니다. 오늘날 대부분의 대형 Meteor 앱은 Galaxy에서 실행되며, 대부분은 Galaxy 출시 전에 사용한 맞춤형 솔루션에서 전환되었습니다.</target>
        </trans-unit>
        <trans-unit id="68842ecf882f2e0d638cab0ddd492168313e28d8" translate="yes" xml:space="preserve">
          <source>Galaxy&amp;rsquo;s UI provides a detailed logging system, which can be invaluable to determine which action it is causing that extra load, or to generally debug other application issues:</source>
          <target state="translated">Galaxy의 UI는 자세한 로깅 시스템을 제공하여 추가로드를 유발하는 작업을 결정하거나 일반적으로 다른 응용 프로그램 문제를 디버깅하는 데 매우 중요합니다.</target>
        </trans-unit>
        <trans-unit id="7fa1b2a120eaad1ebe4d23bd85a924f19536ace3" translate="yes" xml:space="preserve">
          <source>Gather source files from the app folder or read &lt;code&gt;package.js&lt;/code&gt; file for a package.</source>
          <target state="translated">앱 폴더에서 소스 파일을 수집하거나 &lt;code&gt;package.js&lt;/code&gt; 파일을 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="6a8732106f0d73883a3181c9b6c803738428b3d6" translate="yes" xml:space="preserve">
          <source>General tips for structuring your UI code, independent of your view rendering technology.</source>
          <target state="translated">뷰 렌더링 기술과 무관하게 UI 코드를 구성하기위한 일반적인 팁.</target>
        </trans-unit>
        <trans-unit id="5afcb319e4d49bb0e1598f6a7a21ef1756d02202" translate="yes" xml:space="preserve">
          <source>Generally speaking, all production HTTP requests should go over HTTPS, and all WebSocket data should be sent over WSS.</source>
          <target state="translated">일반적으로 모든 프로덕션 HTTP 요청은 HTTPS를 거쳐야하며 모든 WebSocket 데이터는 WSS를 통해 전송되어야합니다.</target>
        </trans-unit>
        <trans-unit id="a2ab98638d4c956db4c074c04577335fcaae24a8" translate="yes" xml:space="preserve">
          <source>Generally, you&amp;rsquo;ll assign &lt;code&gt;Mongo.Collection&lt;/code&gt; objects in your app to global variables. You can only create one &lt;code&gt;Mongo.Collection&lt;/code&gt; object for each underlying Mongo collection.</source>
          <target state="translated">일반적으로 앱의 &lt;code&gt;Mongo.Collection&lt;/code&gt; 객체를 전역 변수에 할당 합니다. 각 기본 Mongo 컬렉션에 대해 하나의 &lt;code&gt;Mongo.Collection&lt;/code&gt; 객체 만 만들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="54178574f84730820557ce9ee88682719f9c3cf7" translate="yes" xml:space="preserve">
          <source>Generate an absolute URL pointing to the application. The server reads from the &lt;code&gt;ROOT_URL&lt;/code&gt; environment variable to determine where it is running. This is taken care of automatically for apps deployed to Galaxy, but must be provided when using &lt;code&gt;meteor build&lt;/code&gt;.</source>
          <target state="translated">응용 프로그램을 가리키는 절대 URL을 생성하십시오. 서버는 &lt;code&gt;ROOT_URL&lt;/code&gt; 환경 변수를 읽어 실행 위치를 판별합니다. Galaxy에 배포 된 앱의 경우 자동으로 처리되지만 &lt;code&gt;meteor build&lt;/code&gt; 사용시 제공해야합니다 .</target>
        </trans-unit>
        <trans-unit id="5ece031934a20729660e43bc70730a99ea96243b" translate="yes" xml:space="preserve">
          <source>Generating a Key</source>
          <target state="translated">키 생성</target>
        </trans-unit>
        <trans-unit id="a86496ffd04d2c8a216966f5a9a7efec2426ff7d" translate="yes" xml:space="preserve">
          <source>Generating test data</source>
          <target state="translated">테스트 데이터 생성</target>
        </trans-unit>
        <trans-unit id="ee817fcbc3f2895afc5a622f6a4df46b1897da34" translate="yes" xml:space="preserve">
          <source>Get direct access to Meteor&amp;rsquo;s &lt;a href=&quot;using-atmosphere-packages.md#package-namespacing&quot;&gt;package namespacing&lt;/a&gt; and package global exports without having to explicitly use ES2015 &lt;code&gt;import&lt;/code&gt;</source>
          <target state="translated">ES2015 &lt;code&gt;import&lt;/code&gt; 를 명시 적으로 사용하지 않고도 Meteor의 &lt;a href=&quot;using-atmosphere-packages.md#package-namespacing&quot;&gt;패키지 네임 스페이스&lt;/a&gt; 및 패키지 글로벌 내보내기에 직접 액세스</target>
        </trans-unit>
        <trans-unit id="4eba3bedb8c432d3a9b4bd31acf49de30834821c" translate="yes" xml:space="preserve">
          <source>Get help on meteor command line usage. Running &lt;code&gt;meteor help&lt;/code&gt; by itself will list the common meteor commands. Running &lt;code&gt;meteor help &lt;i&gt;command&lt;/i&gt;&lt;/code&gt; will print detailed help about the command.</source>
          <target state="translated">유성 명령 줄 사용법에 대한 도움을 받으십시오. &lt;code&gt;meteor help&lt;/code&gt; 자체를 실행 하면 일반적인 유성 명령이 나열됩니다. &lt;code&gt;meteor help &lt;i&gt;command&lt;/i&gt;&lt;/code&gt; 을 실행 하면 명령에 대한 자세한 도움말이 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="33d591acc7d54734b210564428ddd36923ebde32" translate="yes" xml:space="preserve">
          <source>Get the Method simulation return value to get IDs of inserted documents.</source>
          <target state="translated">삽입 된 문서의 ID를 얻으려면 방법 시뮬레이션 리턴 값을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="a1da5be72547f3ebc151c68e80decde636f96c9c" translate="yes" xml:space="preserve">
          <source>Get the absolute path to the static server asset. Note that assets are read-only.</source>
          <target state="translated">정적 서버 자산의 절대 경로를 가져옵니다. 자산은 읽기 전용입니다.</target>
        </trans-unit>
        <trans-unit id="c725aaa6a7c0084f3c65575e152395c8912723bb" translate="yes" xml:space="preserve">
          <source>Get the current connection status. A reactive data source.</source>
          <target state="translated">현재 연결 상태를 확인하십시오. 반응적인 데이터 소스.</target>
        </trans-unit>
        <trans-unit id="c056162fb881100ef25c56973f53bb701d61d157" translate="yes" xml:space="preserve">
          <source>Get the current user id, or &lt;code&gt;null&lt;/code&gt; if no user is logged in. A reactive data source.</source>
          <target state="translated">현재 사용자 ID를 가져 오거나 사용자가 로그인하지 않은 경우 &lt;code&gt;null&lt;/code&gt; 을 가져 옵니다. 반응 형 데이터 소스.</target>
        </trans-unit>
        <trans-unit id="00d9d5bcd0ef575f22e97283ecf8578bcb2e7432" translate="yes" xml:space="preserve">
          <source>Get the current user record, or &lt;code&gt;null&lt;/code&gt; if no user is logged in. A reactive data source.</source>
          <target state="translated">현재 사용자 레코드를 가져 오거나 사용자가 로그인하지 않은 경우 &lt;code&gt;null&lt;/code&gt; 을 가져 옵니다. 반응 형 데이터 소스.</target>
        </trans-unit>
        <trans-unit id="fe8bcf55cb673b5e7b34d041caeca8b9eef86563" translate="yes" xml:space="preserve">
          <source>Get the value of a session variable. If inside a &lt;a href=&quot;#reactivity&quot;&gt;reactive computation&lt;/a&gt;, invalidate the computation the next time the value of the variable is changed by &lt;a href=&quot;#session_set&quot;&gt;&lt;code&gt;Session.set&lt;/code&gt;&lt;/a&gt;. This returns a clone of the session value, so if it's an object or an array, mutating the returned value has no effect on the value stored in the session.</source>
          <target state="translated">세션 변수의 값을 가져옵니다. &lt;a href=&quot;#reactivity&quot;&gt;반응 형 계산&lt;/a&gt; 내부에있는 경우 다음에 변수 값이 &lt;a href=&quot;#session_set&quot;&gt; &lt;code&gt;Session.set&lt;/code&gt; 에&lt;/a&gt; 의해 변경 될 때 계산 을 무효화합니다 . 세션 값의 복제본을 반환하므로 객체 또는 배열 인 경우 반환 된 값을 변경해도 세션에 저장된 값에는 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="748c2b5d743834fa86c8dfa6205ff4bf992cda40" translate="yes" xml:space="preserve">
          <source>Gets either the current View, or the View enclosing the given DOM element.</source>
          <target state="translated">현재 View 또는 주어진 DOM 요소를 묶는 View를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="010b85ad56b34c34c7c2a3b2436c740e30428ed5" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="translated">시작하기</target>
        </trans-unit>
        <trans-unit id="526e8ca8f2f57c6895a91f4a1ae8e5f7f1bfc4a2" translate="yes" xml:space="preserve">
          <source>Getting started with ES2015 and Meteor</source>
          <target state="translated">ES2015 및 Meteor 시작하기</target>
        </trans-unit>
        <trans-unit id="2ddc65a794f9ed08b4a5130bee6e870b9da4e8e2" translate="yes" xml:space="preserve">
          <source>Git URL example:</source>
          <target state="translated">힘내 URL 예제 :</target>
        </trans-unit>
        <trans-unit id="ca731d392068a4788b6152238bea22545dc559d1" translate="yes" xml:space="preserve">
          <source>Git URLs in the format described &lt;a href=&quot;https://docs.npmjs.com/files/package.json#git-urls-as-dependencies&quot;&gt;here&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://docs.npmjs.com/files/package.json#git-urls-as-dependencies&quot;&gt;여기에&lt;/a&gt; 설명 된 형식의 Git URL</target>
        </trans-unit>
        <trans-unit id="50c954fa653eb0f34f315db4b9a538a7e16e09cb" translate="yes" xml:space="preserve">
          <source>GitHub with &lt;code&gt;accounts-github&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;accounts-github&lt;/code&gt; GitHub ( github)</target>
        </trans-unit>
        <trans-unit id="109c4560b23e63ac5efdc5cf5b7f029b10988531" translate="yes" xml:space="preserve">
          <source>GitHub: &lt;a href=&quot;http://developer.github.com/v3/oauth/#scopes&quot;&gt;http://developer.github.com/v3/oauth/#scopes&lt;/a&gt;</source>
          <target state="translated">GitHub : &lt;a href=&quot;http://developer.github.com/v3/oauth/#scopes&quot;&gt;http://developer.github.com/v3/oauth/#scopes&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="76d5449aa231a1c58ff379c9aa66902d542abe94" translate="yes" xml:space="preserve">
          <source>Github, Google, Meetup, Meteor Developer Accounts, Weibo</source>
          <target state="translated">Github, Google, Meetup, Meteor 개발자 계정, Weibo</target>
        </trans-unit>
        <trans-unit id="0e3b723a4f4f8a8ae76be0aef4e0d6a47aca0196" translate="yes" xml:space="preserve">
          <source>Give users of this package access to another package (by passing in the string &lt;code&gt;packagename&lt;/code&gt;) or a collection of packages (by passing in an array of strings [&lt;code&gt;packagename1&lt;/code&gt;, &lt;code&gt;packagename2&lt;/code&gt;]</source>
          <target state="translated">이 패키지의 사용자에게 다른 패키지 (문자열 &lt;code&gt;packagename&lt;/code&gt; 전달 ) 또는 패키지 모음 (문자열 배열 [ &lt;code&gt;packagename1&lt;/code&gt; , &lt;code&gt;packagename2&lt;/code&gt; ] 전달)을 제공하십시오.</target>
        </trans-unit>
        <trans-unit id="694d853e7d8eb1b64075e36d3a2f39bf2a48a33b" translate="yes" xml:space="preserve">
          <source>Given that the user ID of the current user is available through this context, you should never pass the ID of the current user as an argument to a Method. This would allow any client of your app to pass any user ID they want. Let&amp;rsquo;s look at an example:</source>
          <target state="translated">현재 사용자의 사용자 ID가이 컨텍스트를 통해 사용 가능하다는 점을 감안하면 현재 사용자의 ID를 메소드의 인수로 전달해서는 안됩니다. 이를 통해 앱의 모든 클라이언트가 원하는 사용자 ID를 전달할 수 있습니다. 예를 보자.</target>
        </trans-unit>
        <trans-unit id="12001bc02193503211b9e261e3be87dac5148428" translate="yes" xml:space="preserve">
          <source>Given the points above, we recommend that all Meteor apps should use Methods to accept data input from the client, and restrict the arguments accepted by each Method as tightly as possible.</source>
          <target state="translated">위의 사항을 감안할 때 모든 Meteor 앱은 메소드를 사용하여 클라이언트의 데이터 입력을 허용하고 각 메소드에서 허용되는 인수를 최대한 엄격하게 제한하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="70b73089949bacaa4a01ae997fe44ebf7f931e70" translate="yes" xml:space="preserve">
          <source>Global Helpers</source>
          <target state="translated">글로벌 헬퍼</target>
        </trans-unit>
        <trans-unit id="a29091fcf08acaedc8eb769d5813722e6471a77e" translate="yes" xml:space="preserve">
          <source>Global data stores</source>
          <target state="translated">글로벌 데이터 저장소</target>
        </trans-unit>
        <trans-unit id="de222792693a691ff0c5bfab1ec28d45cc9fc400" translate="yes" xml:space="preserve">
          <source>Global helper</source>
          <target state="translated">글로벌 도우미</target>
        </trans-unit>
        <trans-unit id="9f34cf7bcf6e94a7d0ab119e9dab8affc29d35b3" translate="yes" xml:space="preserve">
          <source>Global subscriptions</source>
          <target state="translated">글로벌 구독</target>
        </trans-unit>
        <trans-unit id="fe15f4a3b9eb372fea69e780297a686c1ab51ebe" translate="yes" xml:space="preserve">
          <source>Goals of the project</source>
          <target state="translated">프로젝트의 목표</target>
        </trans-unit>
        <trans-unit id="bacc0d69b4322bc6fe1e8add41ac213ce371c6d7" translate="yes" xml:space="preserve">
          <source>Google with &lt;code&gt;accounts-google&lt;/code&gt;</source>
          <target state="translated">와 구글 &lt;code&gt;accounts-google&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="14ee815bc4884cc91079e1e64a53da46eecd65a6" translate="yes" xml:space="preserve">
          <source>Google: &lt;a href=&quot;https://developers.google.com/identity/protocols/googlescopes&quot;&gt;https://developers.google.com/identity/protocols/googlescopes&lt;/a&gt;</source>
          <target state="translated">Google : &lt;a href=&quot;https://developers.google.com/identity/protocols/googlescopes&quot;&gt;https://developers.google.com/identity/protocols/googlescopes&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bf073fae640ded81eeb7a4cee70faff4a623c16c" translate="yes" xml:space="preserve">
          <source>Guide</source>
          <target state="translated">Guide</target>
        </trans-unit>
        <trans-unit id="ea88e95b9f94f091499bf80b93dd2375fa565ff0" translate="yes" xml:space="preserve">
          <source>Guide development</source>
          <target state="translated">가이드 개발</target>
        </trans-unit>
        <trans-unit id="6bfde79d3b52bed3855da6aee794325bdd0103c1" translate="yes" xml:space="preserve">
          <source>Guide: Blaze</source>
          <target state="translated">가이드 : 블레이즈</target>
        </trans-unit>
        <trans-unit id="ff1308bf21ec56b2b427d3871e8296a2c61e5b1f" translate="yes" xml:space="preserve">
          <source>Guide: Build</source>
          <target state="translated">가이드 : 빌드</target>
        </trans-unit>
        <trans-unit id="f165a201fd01f78717b61c39cf577967d531ded8" translate="yes" xml:space="preserve">
          <source>Guide: Data</source>
          <target state="translated">가이드 : 데이터</target>
        </trans-unit>
        <trans-unit id="435664d8dd73d42849ca51b0d4c40f7afe7c56e6" translate="yes" xml:space="preserve">
          <source>Guide: Production</source>
          <target state="translated">가이드 : 생산</target>
        </trans-unit>
        <trans-unit id="c01c0d896c8717f790b67f155627d28d648b678f" translate="yes" xml:space="preserve">
          <source>Guide: View</source>
          <target state="translated">가이드 :보기</target>
        </trans-unit>
        <trans-unit id="b37d1e80768ce8bfccd845f2e99adbf5e58796f9" translate="yes" xml:space="preserve">
          <source>HTML Dialect</source>
          <target state="translated">HTML 방언</target>
        </trans-unit>
        <trans-unit id="5085f2ba2063e38550d15d143693d941bb545fe0" translate="yes" xml:space="preserve">
          <source>HTML emails</source>
          <target state="translated">HTML 이메일</target>
        </trans-unit>
        <trans-unit id="392e8b9619d1399ed592dbda0aa0bdb81ff6856d" translate="yes" xml:space="preserve">
          <source>HTML files in a Meteor application are treated quite a bit differently from a server-side framework. Meteor scans all the HTML files in your directory for three top-level elements: &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;. The head and body sections are separately concatenated into a single head and body, which are transmitted to the client on initial page load.</source>
          <target state="translated">Meteor 애플리케이션의 HTML 파일은 서버 측 프레임 워크와는 약간 다르게 취급됩니다. Meteor는 디렉토리의 모든 HTML 파일에서 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; 및 &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; 의 최상위 요소 3 개를 검색합니다 . 헤드 및 바디 섹션은 개별적으로 단일 헤드 및 바디로 연결되며 초기 페이지로드시 클라이언트로 전송됩니다.</target>
        </trans-unit>
        <trans-unit id="72a57c5112915d68e540b3e73548298eea2674a6" translate="yes" xml:space="preserve">
          <source>HTML template files are &lt;strong&gt;always&lt;/strong&gt; loaded before everything else</source>
          <target state="translated">HTML 템플릿 파일은 &lt;strong&gt;항상&lt;/strong&gt; 다른 것보다 먼저로드됩니다.</target>
        </trans-unit>
        <trans-unit id="f40b27d6b8b9a4fc3827264c1da16a04ecf4d094" translate="yes" xml:space="preserve">
          <source>HTTP</source>
          <target state="translated">HTTP</target>
        </trans-unit>
        <trans-unit id="1f0c185e250a94b7afe62438a34e9a8919c319f9" translate="yes" xml:space="preserve">
          <source>HTTP basic authentication string of the form &lt;code&gt;&quot;username:password&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&quot;username:password&quot;&lt;/code&gt; 형식의 HTTP 기본 인증 문자열</target>
        </trans-unit>
        <trans-unit id="6d6e54155b83da6ea29e714ec3d6a67ddda031df" translate="yes" xml:space="preserve">
          <source>HTTP_FORWARDED_COUNT</source>
          <target state="translated">HTTP_FORWARDED_COUNT</target>
        </trans-unit>
        <trans-unit id="0ff95a68349ac5719cbe822be8e2a9ba9e81d9c0" translate="yes" xml:space="preserve">
          <source>Handling errors</source>
          <target state="translated">오류 처리</target>
        </trans-unit>
        <trans-unit id="584cf27b699d9457620179a5387d801f7ba8351f" translate="yes" xml:space="preserve">
          <source>Have a well defined way to ship different code for client and server, enabling different behavior in each context</source>
          <target state="translated">클라이언트와 서버에 다른 코드를 제공하는 잘 정의 된 방법을 사용하여 각 상황에서 다른 동작을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="f0a263faf09c6928162c621d01daa6ddea956746" translate="yes" xml:space="preserve">
          <source>Having a consistent style means that it&amp;rsquo;s easier to adopt standard tools for error checking. For example, if you adopt a convention that you must always use &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt; instead of &lt;code&gt;var&lt;/code&gt;, you can now use a tool to ensure all of your variables are scoped the way you expect. That means you can avoid bugs where variables act in unexpected ways. Also, by enforcing that all variables are declared before use, you can easily catch typos before even running any code!</source>
          <target state="translated">일관된 스타일을 갖는 것은 오류 검사를 위해 표준 도구를 채택하는 것이 더 쉽다는 것을 의미합니다. 예를 들어, &lt;code&gt;var&lt;/code&gt; 대신 항상 &lt;code&gt;let&lt;/code&gt; 또는 &lt;code&gt;const&lt;/code&gt; 를 사용해야하는 규칙을 채택하는 경우 이제 도구를 사용하여 모든 변수의 범위가 원하는 방식으로 지정되도록 할 수 있습니다. 즉, 변수가 예기치 않은 방식으로 작동하는 버그를 피할 수 있습니다. 또한 사용하기 전에 모든 변수를 선언하여 코드를 실행하기 전에 오타를 쉽게 잡을 수 있습니다!</target>
        </trans-unit>
        <trans-unit id="a1a2b3f35ab00ab3fb3a832a80b83cdaf0592d87" translate="yes" xml:space="preserve">
          <source>Heavy CoffeeScript users, please let us know how this arrangement works for you, whether &lt;code&gt;share&lt;/code&gt; is helpful for you, and anything else you&amp;rsquo;d like to see changed.</source>
          <target state="translated">CoffeeScript 사용자는이 배열이 어떻게 작동하는지, &lt;code&gt;share&lt;/code&gt; 가 도움이 되는지 여부 및 기타 변경 사항을 알려주십시오 .</target>
        </trans-unit>
        <trans-unit id="71bfa60b06c751b549dfa608bed89dce9177c4af" translate="yes" xml:space="preserve">
          <source>Helper Arguments</source>
          <target state="translated">도우미 인수</target>
        </trans-unit>
        <trans-unit id="dc1f49c10715971e9d013ce60e7f82d216122794" translate="yes" xml:space="preserve">
          <source>Helper defined on the current component</source>
          <target state="translated">현재 구성 요소에 정의 된 헬퍼</target>
        </trans-unit>
        <trans-unit id="66705d703f7a2f4cfa2768aba4c5d97e0a610903" translate="yes" xml:space="preserve">
          <source>Helpers can accept positional and keyword arguments:</source>
          <target state="translated">도우미는 위치 및 키워드 인수를 허용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f606af98d3fda823ee4e02606188ad04bfc3336f" translate="yes" xml:space="preserve">
          <source>Helpers on &lt;code&gt;Template.body&lt;/code&gt; are only available in the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tags of your app. To register a global helper, use &lt;a href=&quot;templates#Template-registerHelper&quot;&gt;Template.registerHelper&lt;/a&gt;. Event maps on &lt;code&gt;Template.body&lt;/code&gt; don&amp;rsquo;t apply to elements added to the body via &lt;code&gt;Blaze.render&lt;/code&gt;, jQuery, or the DOM API, or to the body element itself. To handle events on the body, window, or document, use jQuery or the DOM API.</source>
          <target state="translated">&lt;code&gt;Template.body&lt;/code&gt; 의 도우미 는 앱 의 &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; 태그 에서만 사용할 수 있습니다. 전역 도우미를 등록하려면 &lt;a href=&quot;templates#Template-registerHelper&quot;&gt;Template.registerHelper를&lt;/a&gt; 사용하십시오 . &lt;code&gt;Template.body&lt;/code&gt; 의 이벤트 맵은 &lt;code&gt;Blaze.render&lt;/code&gt; , jQuery 또는 DOM API를 통해 본문에 추가 된 요소 또는 본문 요소 자체 에는 적용되지 않습니다 . 본문, 창 또는 문서에서 이벤트를 처리하려면 jQuery 또는 DOM API를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="e5246cd17978b86288a03ea9a792c469ffec54e6" translate="yes" xml:space="preserve">
          <source>Here are a couple of screenshots of &lt;code&gt;accounts-ui&lt;/code&gt; so you know what to expect:</source>
          <target state="translated">다음은 &lt;code&gt;accounts-ui&lt;/code&gt; 스크린 샷입니다 .</target>
        </trans-unit>
        <trans-unit id="f48e2388b980916b8ed5a1115d6f5dab642002be" translate="yes" xml:space="preserve">
          <source>Here are a few of those methods:</source>
          <target state="translated">다음은 그러한 방법 중 일부입니다.</target>
        </trans-unit>
        <trans-unit id="122f48652eb654604aa8f40dbd193ba3643fafb4" translate="yes" xml:space="preserve">
          <source>Here are some example URLs and the resulting &lt;code&gt;params&lt;/code&gt; and &lt;code&gt;queryParams&lt;/code&gt;:</source>
          <target state="translated">다음은 몇 가지 예제 URL과 그에 따른 &lt;code&gt;params&lt;/code&gt; 및 &lt;code&gt;queryParams&lt;/code&gt; 입니다 .</target>
        </trans-unit>
        <trans-unit id="8089ef0ac1ba3a3d90910291c8064cadc6cade07" translate="yes" xml:space="preserve">
          <source>Here are some patterns that are useful to keep in mind when building the user interface of your Meteor application.</source>
          <target state="translated">다음은 Meteor 응용 프로그램의 사용자 인터페이스를 구축 할 때 유념해야 할 몇 가지 패턴입니다.</target>
        </trans-unit>
        <trans-unit id="2dcebaa7ae6f51f37f9ffdb4f73c5b848d80a690" translate="yes" xml:space="preserve">
          <source>Here at Meteor, we strongly believe that JavaScript is the best language to build web applications, for a variety of reasons. JavaScript is constantly improving, and the standards around ES2015 have really brought together the JavaScript community. Here are our recommendations about how to use ES2015 JavaScript in your app today.</source>
          <target state="translated">여기서 Meteor는 다양한 이유로 JavaScript가 웹 애플리케이션을 빌드하는 데 가장 적합한 언어라고 믿습니다. JavaScript는 지속적으로 개선되고 있으며 ES2015 관련 표준은 실제로 JavaScript 커뮤니티를 통합했습니다. 오늘 앱에서 ES2015 JavaScript를 사용하는 방법에 대한 권장 사항은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f71402dbd1216ae9cf759713e28e73c0e95baeec" translate="yes" xml:space="preserve">
          <source>Here is a basic example of &lt;code&gt;onPageLoad&lt;/code&gt; usage on the server:</source>
          <target state="translated">서버에서 &lt;code&gt;onPageLoad&lt;/code&gt; 사용법 의 기본 예는 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="65537fb9cd918f037957e1954de8cf28f515877d" translate="yes" xml:space="preserve">
          <source>Here is a list of the Babel transformers that are currently enabled:</source>
          <target state="translated">다음은 현재 활성화 된 Babel 변압기 목록입니다.</target>
        </trans-unit>
        <trans-unit id="ce9747381012c031c940584519e19bcf1ce3b6e6" translate="yes" xml:space="preserve">
          <source>Here is a more complicated example of &lt;code&gt;onPageLoad&lt;/code&gt; usage on the server, involving the &lt;a href=&quot;https://www.styled-components.com/docs/advanced#server-side-rendering&quot;&gt;&lt;code&gt;styled-components&lt;/code&gt;&lt;/a&gt; npm package:</source>
          <target state="translated">다음은 &lt;a href=&quot;https://www.styled-components.com/docs/advanced#server-side-rendering&quot;&gt; &lt;code&gt;styled-components&lt;/code&gt; &lt;/a&gt; npm 패키지를 포함하는 서버에서 의 &lt;code&gt;onPageLoad&lt;/code&gt; 사용법에 대한보다 복잡한 예입니다 .</target>
        </trans-unit>
        <trans-unit id="509e3b432dc6e032e4fe33905cf2847a7758f7a9" translate="yes" xml:space="preserve">
          <source>Here is a simple block helper that wraps its content in a div:</source>
          <target state="translated">다음은 div의 내용을 래핑하는 간단한 블록 도우미입니다.</target>
        </trans-unit>
        <trans-unit id="b5cc21ccac7e95544ffe6831f0bb2aa87867a0cd" translate="yes" xml:space="preserve">
          <source>Here is an example of implementing &lt;code&gt;#unless&lt;/code&gt; in terms of &lt;code&gt;#if&lt;/code&gt; (ignoring for the moment that &lt;code&gt;unless&lt;/code&gt; is a built-in directive):</source>
          <target state="translated">다음은 &lt;code&gt;#if&lt;/code&gt; 와 관련하여 &lt;code&gt;#unless&lt;/code&gt; 를 구현하는 예입니다 ( 내장 지시어가 &lt;code&gt;unless&lt;/code&gt; 순간은 무시 ).</target>
        </trans-unit>
        <trans-unit id="99b57bf1c2eb8500e43bf390896c3d292a46ad27" translate="yes" xml:space="preserve">
          <source>Here the &lt;code&gt;todo&lt;/code&gt; is passed as argument to the &lt;code&gt;todoArgs&lt;/code&gt; helper, then the output is passed into the &lt;code&gt;Todos_item&lt;/code&gt; template.</source>
          <target state="translated">여기서 &lt;code&gt;todo&lt;/code&gt; 는 &lt;code&gt;todoArgs&lt;/code&gt; 헬퍼에 인수로 전달 된 다음 출력이 &lt;code&gt;Todos_item&lt;/code&gt; 템플리트 로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="71564680d4662152ecd029a6af15b1de99dd3a59" translate="yes" xml:space="preserve">
          <source>Here we wrote a little utility (which could be abstracted into a general package) to wait for all the subscriptions which are created by the route change (the &lt;code&gt;todos.inList&lt;/code&gt; subscription in this case) to become ready before checking their data.</source>
          <target state="translated">여기 에서 데이터를 확인하기 전에 경로 변경 ( 이 경우 &lt;code&gt;todos.inList&lt;/code&gt; 가입)에 의해 생성 된 모든 가입 이 준비 될 때까지 기다리는 작은 유틸리티 (일반 패키지로 추상화 할 수 있음)를 작성했습니다 .</target>
        </trans-unit>
        <trans-unit id="5e28fa6148e604c17f82fb6c77eaea161163e7f0" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a code snippet to add to your server code which disables client-side updates on a collection. This will make sure no other part of your app can use &lt;code&gt;allow&lt;/code&gt;:</source>
          <target state="translated">다음은 컬렉션에서 클라이언트 쪽 업데이트를 비활성화하는 서버 코드에 추가 할 코드 스 니펫입니다. 이렇게하면 앱의 다른 부분에서 &lt;code&gt;allow&lt;/code&gt; 를 사용할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="54e66c5d3e6fd46629bc99740b47035d52d22a43" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a complete list of login providers for which Meteor actively maintains core packages:</source>
          <target state="translated">Meteor가 적극적으로 핵심 패키지를 유지 관리하는 전체 로그인 공급자 목록은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ec268f472c952354bc36644807f1d8595b86f53e" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a list of the environment variables you can provide to your application.</source>
          <target state="translated">다음은 응용 프로그램에 제공 할 수있는 환경 변수 목록입니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
