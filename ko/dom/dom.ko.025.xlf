<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="dom">
    <body>
      <group id="dom">
        <trans-unit id="daa4fc2f6ec2e8efaa357d9fe6ef892fb1ef2656" translate="yes" xml:space="preserve">
          <source>Next, we get all the p elements that are descendants of the body via</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a9c65e7ff8048b47da90f26b8521576ae065548" translate="yes" xml:space="preserve">
          <source>Next, we grab the time domain data and copy it into our array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e7631ba5452bada6470c003d4c7104f8e0d9eba" translate="yes" xml:space="preserve">
          <source>Next, we have a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas&quot;&gt;&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;&lt;/a&gt; element into which the captured frames are stored, potentially manipulated in some way, and then converted into an output image file. This canvas is kept hidden by styling the canvas with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/display&quot;&gt;&lt;code&gt;display&lt;/code&gt;&lt;/a&gt;&lt;code&gt;:none&lt;/code&gt;, to avoid cluttering up the screen &amp;mdash; the user does not need to see this intermediate stage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6be172da8c1609d4acdf9874ce1be8677b71bdfa" translate="yes" xml:space="preserve">
          <source>Next, we have two form inputs that allow you to set the &lt;code&gt;anchorOffset&lt;/code&gt; and &lt;code&gt;focusOffset&lt;/code&gt; &amp;mdash; they both have a default value of 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecca01ebe6dab5f3323dd7f506d2bb015199bab5" translate="yes" xml:space="preserve">
          <source>Next, we iterate over each octave in the note frequencies table. For each octave, we use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries&quot;&gt;&lt;code&gt;Object.entries()&lt;/code&gt;&lt;/a&gt; to get a list of the notes in that octave.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6490ca82bee760f5052fab476b5aaf8295fb4f18" translate="yes" xml:space="preserve">
          <source>Next, we need to establish our event handlers to change the text content of the box when the transition begins and ends.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="269cd51adc6ea2febe94cd3acf08975ab9484690" translate="yes" xml:space="preserve">
          <source>Next, we need to figure out which voice to use. We use the &lt;a href=&quot;../htmlselectelement&quot;&gt;&lt;code&gt;HTMLSelectElement&lt;/code&gt;&lt;/a&gt;&lt;code&gt;selectedOptions&lt;/code&gt; property to return the currently selected &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option&quot;&gt;&lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt;&lt;/a&gt; element. We then use this element's &lt;code&gt;data-name&lt;/code&gt; attribute, finding the &lt;a href=&quot;../speechsynthesisvoice&quot;&gt;&lt;code&gt;SpeechSynthesisVoice&lt;/code&gt;&lt;/a&gt; object whose name matches this attribute's value. We set the matching voice object to be the value of the &lt;a href=&quot;../speechsynthesisutterance/voice&quot;&gt;&lt;code&gt;SpeechSynthesisUtterance.voice&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d98eb595e82c684878575f6b4c3b4d93219cee54" translate="yes" xml:space="preserve">
          <source>Next, we post a confirmation message back to the main page via the message channel by calling &lt;a href=&quot;../messageport/postmessage&quot;&gt;&lt;code&gt;MessagePort.postMessage&lt;/code&gt;&lt;/a&gt; on &lt;a href=&quot;../messagechannel/port2&quot;&gt;&lt;code&gt;MessageChannel.port2&lt;/code&gt;&lt;/a&gt; that was initially transfered to the IFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68238331ebf452615a2c0997aa721c40943b5530" translate="yes" xml:space="preserve">
          <source>Next, we set up an event listener for the &quot;Apply Constraints&quot; button. If it's clicked and there's not already media in use, we call &lt;code&gt;startVideo()&lt;/code&gt;, and let that function handle starting the stream with the specified settings in place. Otherwise, we follow these steps to apply the updated constraints to the already-active stream:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eedd0b3ba97a8dce1818cfca0c070bc41b69d19" translate="yes" xml:space="preserve">
          <source>Next, we set up the &lt;em&gt;cone&lt;/em&gt; of our spatialised sound, determining the area in which it can be heard:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a0c35d9d0fbf3c003ff12caec80db704d075dcf" translate="yes" xml:space="preserve">
          <source>Next, we start our &lt;code&gt;draw()&lt;/code&gt; function off, again setting up a loop with &lt;code&gt;requestAnimationFrame()&lt;/code&gt; so that the displayed data keeps updating, and clearing the display with each animation frame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1f89bf81db4c83eff1de1f1e7c15671ed95c295" translate="yes" xml:space="preserve">
          <source>Next, we start the process of actually rendering the scene onto the canvas, by setting the canvas to fill the entire browser viewport, and running the rendering loop (&lt;code&gt;drawScene()&lt;/code&gt;) for the first time. This is the non-WebVR &amp;mdash; normal &amp;mdash; rendering loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ac88d6896835c972c0115344210cc1b8cb865e5" translate="yes" xml:space="preserve">
          <source>Next, we style the Information screen (wrapped in an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/aside&quot;&gt;&lt;code&gt;&amp;lt;aside&amp;gt;&lt;/code&gt;&lt;/a&gt; element) how we want it, give it fixed position so that it doesn't appear in the layout flow and affect the main UI, transform it to the position we want it to sit in by default, and give it a transition for smooth showing/hiding:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9714b4deec4157c1a7ab8c71f10e9c8f18d9715c" translate="yes" xml:space="preserve">
          <source>Next, we update the progress and status information if any tasks have been enqueued.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5edd9d6cad8e2bed3a2147ae5ce06c4e69facdb3" translate="yes" xml:space="preserve">
          <source>Next, we use the &lt;a href=&quot;../serviceworkercontainer/register&quot;&gt;&lt;code&gt;ServiceWorkerContainer.register()&lt;/code&gt;&lt;/a&gt; function to register the service worker for this site, which is just a JavaScript file residing inside our app (note this is the file's URL relative to the origin, not the JS file that references it.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2993e43003f784ed1888d2143a22aa5ffce8f65d" translate="yes" xml:space="preserve">
          <source>Next, we used a loop to create the &amp;lt;tr&amp;gt; elements, which are children of the &amp;lt;tbody&amp;gt; element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbe8ab922158af5d769bde62988b4bbc479f1822" translate="yes" xml:space="preserve">
          <source>Nightly build</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="816c52fd2bdd94a63cd0944823a6c0aa9384c103" translate="yes" xml:space="preserve">
          <source>No</source>
          <target state="translated">No</target>
        </trans-unit>
        <trans-unit id="359cbbcf56d1f689df880d1a3266127cf68f5394" translate="yes" xml:space="preserve">
          <source>No HTMLMediaElement src found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79459b24586add0bc687b56479972b9e5a4f8c87" translate="yes" xml:space="preserve">
          <source>No Status Recvd</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f152d1885c24bd00e0d28c9c67000e6e8054b96e" translate="yes" xml:space="preserve">
          <source>No appropriate voice was available for the language set in &lt;a href=&quot;../speechsynthesisutterance/lang&quot;&gt;&lt;code&gt;SpeechSynthesisUtterance.lang&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13d597968227e44e899401343e6efada6b242f63" translate="yes" xml:space="preserve">
          <source>No button pressed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05ac29d91c63835b7c7eec966a597cb1bf7277e3" translate="yes" xml:space="preserve">
          <source>No certificate or set of certificates was provided for securing the connection, and &lt;code&gt;createOffer()&lt;/code&gt; was unable to create a new one. Since all WebRTC connections are required to be secured, that results in an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95ec05297c8cafc96feb998f4af109f4728d5530" translate="yes" xml:space="preserve">
          <source>No change</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeb7d1a262a612359e77456371b100c03a288cc3" translate="yes" xml:space="preserve">
          <source>No change (was for a long time removed from it).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b18ecd7568d446b1cf3d80ac3e758883a840d8ae" translate="yes" xml:space="preserve">
          <source>No change from &lt;a href=&quot;https://www.w3.org/TR/DOM-Level-2-Core/&quot;&gt;Document Object Model (DOM) Level 2 Core Specification&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="510c5519af97169f93ffe312c59ae3d682632396" translate="yes" xml:space="preserve">
          <source>No change from &lt;a href=&quot;https://www.w3.org/TR/DOM-Level-2-Core/&quot;&gt;Document Object Model (DOM) Level 2 Core Specification&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1de99fd81fd4ed234a7ebf2dfede343f12a27e0e" translate="yes" xml:space="preserve">
          <source>No change from &lt;a href=&quot;https://www.w3.org/TR/DOM-Level-2-Events/events.html&quot;&gt;Document Object Model (DOM) Level 2 Events Specification&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="419df90dbb274ce9bd166c381210e71dc527a9ed" translate="yes" xml:space="preserve">
          <source>No change from &lt;a href=&quot;https://www.w3.org/TR/DOM-Level-2-HTML/&quot;&gt;Document Object Model (DOM) Level 2 HTML Specification&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b2e6490b74980cb0672b229d88af8155582398f" translate="yes" xml:space="preserve">
          <source>No change from &lt;a href=&quot;https://www.w3.org/TR/DOM-Level-2-HTML/&quot;&gt;Document Object Model (DOM) Level 2 HTML Specification&lt;/a&gt;, though &lt;code&gt;align&lt;/code&gt; was formerly obsoleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="178884658cdb2501959340d0ffae5633555a0677" translate="yes" xml:space="preserve">
          <source>No change from &lt;a href=&quot;https://www.w3.org/TR/DOM-Level-2-HTML/&quot;&gt;Document Object Model (DOM) Level 2 HTML Specification&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7507487c77625be3f337a70ebe26fe99aa5bc347" translate="yes" xml:space="preserve">
          <source>No change from &lt;a href=&quot;https://www.w3.org/TR/DOM-Level-2-Style/&quot;&gt;Document Object Model (DOM) Level 2 Style Specification&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4135106e228c3a8a94dba115d770ea76b72328e8" translate="yes" xml:space="preserve">
          <source>No change from &lt;a href=&quot;https://www.w3.org/TR/DOM-Level-2-Traversal-Range/&quot;&gt;Document Object Model (DOM) Level 2 Traversal and Range Specification&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e783bd5b11bd7883fc3581e1891801fb0ab0a3e7" translate="yes" xml:space="preserve">
          <source>No change from &lt;a href=&quot;https://www.w3.org/TR/DOM-Level-2-Traversal-Range/&quot;&gt;Document Object Model (DOM) Level 2 Traversal and Range Specification&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b53192e47af5412da5a7831c9028eaa9ed5750fa" translate="yes" xml:space="preserve">
          <source>No change from &lt;a href=&quot;https://www.w3.org/TR/DOM-Level-3-Core/&quot;&gt;Document Object Model (DOM) Level 3 Core Specification&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3562be31c04f956201c73be3cf5919e2b3e449c8" translate="yes" xml:space="preserve">
          <source>No change from &lt;a href=&quot;https://www.w3.org/TR/DOM-Level-3-Core/&quot;&gt;Document Object Model (DOM) Level 3 Core Specification&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1eb841837ce6e90e6c93b78957a0f2bc65c2d06" translate="yes" xml:space="preserve">
          <source>No change from &lt;a href=&quot;https://www.w3.org/TR/REC-DOM-Level-1/&quot;&gt;Document Object Model (DOM) Level 1 Specification&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0f8ac05e982b57737286f8ee5667f593fb8a086" translate="yes" xml:space="preserve">
          <source>No change from &lt;a href=&quot;https://www.w3.org/TR/REC-DOM-Level-1/&quot;&gt;Document Object Model (DOM) Level 1 Specification&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b73067510dc7fb70923bc5e8c1d18ad76e03e62" translate="yes" xml:space="preserve">
          <source>No change from &lt;a href=&quot;https://www.w3.org/TR/html50/&quot;&gt;HTML5&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0802db9c3e378c6d734002be1c4ce5d1b754a0b6" translate="yes" xml:space="preserve">
          <source>No change from &lt;a href=&quot;https://www.w3.org/TR/html50/&quot;&gt;HTML5&lt;/a&gt;, the latest snapshot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="478d58d40405ee418c17fc4e6a95c645a691bb38" translate="yes" xml:space="preserve">
          <source>No change from &lt;a href=&quot;https://www.w3.org/TR/html50/&quot;&gt;HTML5&lt;/a&gt;, the latest snaspshot of the WHATWG specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a6e45f5b5fd0bdcd9e1c83cc4975530d0b47c32" translate="yes" xml:space="preserve">
          <source>No change from &lt;a href=&quot;https://www.w3.org/TR/html50/&quot;&gt;HTML5&lt;/a&gt;, though the new &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CanvasProxy&quot;&gt;&lt;code&gt;CanvasProxy&lt;/code&gt;&lt;/a&gt; does implement &lt;code&gt;Transferable&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8522539142f797f9d7d8a7326479700d9f5c828" translate="yes" xml:space="preserve">
          <source>No change from &lt;a href=&quot;https://www.w3.org/TR/html50/&quot;&gt;HTML5&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8422b665e020de190c921e1836a3e12c3658719e" translate="yes" xml:space="preserve">
          <source>No change from &lt;a href=&quot;https://www.w3.org/TR/html51/&quot;&gt;HTML 5.1&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ba5a74ee25f3f95a9602d3df2ee7cf2fabd504d" translate="yes" xml:space="preserve">
          <source>No change from &lt;a href=&quot;https://www.w3.org/TR/selectors-api/&quot;&gt;Selectors API Level 1&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5c424fcadcf98bc205585f1117bbf290e579e0a" translate="yes" xml:space="preserve">
          <source>No change from &lt;a&gt;Unknown&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fea9112d5487e0b92326c0c8b2c44593dfcf734" translate="yes" xml:space="preserve">
          <source>No change from initial definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6db76b282021ce30688c1f26bbe9f4845fd0d169" translate="yes" xml:space="preserve">
          <source>No change from last version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e46886799325e9aef389a7fb5d46e7e2a87b0b8" translate="yes" xml:space="preserve">
          <source>No change from latest snapshot, &lt;a href=&quot;https://www.w3.org/TR/html51/&quot;&gt;HTML 5.1&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="137a421f98bf06044ad3e57850c7df82d8ce9801" translate="yes" xml:space="preserve">
          <source>No change from the latest snapshot, &lt;a href=&quot;https://www.w3.org/TR/html50/&quot;&gt;HTML5&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40da2c499c9e247117a012cd60084987f90c2e22" translate="yes" xml:space="preserve">
          <source>No change from the previous snapshot &lt;a href=&quot;https://www.w3.org/TR/html50/&quot;&gt;HTML5&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec1ad2bb94efc74f701472e91ca8f608b251db7c" translate="yes" xml:space="preserve">
          <source>No change from the previous version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf36d126db302a921470178637b1c6026ca27b3c" translate="yes" xml:space="preserve">
          <source>No change since the last snapshot</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3931e186d84f1996c4ae0141a780d05bb81622e6" translate="yes" xml:space="preserve">
          <source>No change since the last snapshot, &lt;a href=&quot;https://www.w3.org/TR/html50/&quot;&gt;HTML5&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81ceac125ee3635a9e3dbee4c6647a539552004f" translate="yes" xml:space="preserve">
          <source>No change since the latest snapshot, &lt;a href=&quot;https://www.w3.org/TR/html50/&quot;&gt;HTML5&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdcd16ad3fb3825f27ecc7838ea6c1f80afe3719" translate="yes" xml:space="preserve">
          <source>No change since the latest snapshot, &lt;a href=&quot;https://www.w3.org/TR/html50/&quot;&gt;HTML5&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b67e5680b3289991b4c3e9028d510a5486a6b54" translate="yes" xml:space="preserve">
          <source>No change since the latest snapshot, &lt;a href=&quot;https://www.w3.org/TR/html51/&quot;&gt;HTML 5.1&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ad379cf5a05a8b50aadbf8a263a08d212a86465" translate="yes" xml:space="preserve">
          <source>No change vs. DOM4</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deebfd13dec0bbd62f136b7131cbdf7b31c77703" translate="yes" xml:space="preserve">
          <source>No change, supersedes the previous one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea00acbd49f88aab365d53c50e9542039bde2547" translate="yes" xml:space="preserve">
          <source>No change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24a6191f274fcd49cdf9f49bfae922264acf6c2a" translate="yes" xml:space="preserve">
          <source>No changes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a147f3bfb275d7b0b7b86c00516af3247b3cca52" translate="yes" xml:space="preserve">
          <source>No changes from &lt;a href=&quot;https://www.w3.org/TR/DOM-Level-2-Style/&quot;&gt;Document Object Model (DOM) Level 2 Style Specification&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32dc8f1e2ddf86f194a2e3f4df45f4de837bd36e" translate="yes" xml:space="preserve">
          <source>No changes since last version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b1fcbda693f085c4d6d33acbf333e420ba23fca" translate="yes" xml:space="preserve">
          <source>No changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1db0397748c80dc31ce4e402dd32cd54444995f" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.AddressErrors&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1790a3c0c4c91d1be05ad5a9f218e7ed74d7a33" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.AddressErrors.addressLine&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="491fb2441cbccfd3d04129b86fde8844643ff095" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.AddressErrors.city&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72af3185463408f79a88ef9c060f01c650fde548" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.AddressErrors.country&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ddd63e450404f2ea23966ec7be1b1cd0e442f27" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.AddressErrors.dependentLocality&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88ac1e3f22b33cdc4462caaadea8a00fa3804812" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.AddressErrors.organization&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="392830b2326ea8690467adb50947410177e3680c" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.AddressErrors.phone&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1335ce49ae2389f32ce475a0d9d1de9cc44b712c" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.AddressErrors.postalCode&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49cf6bbe936dd136dde9ab6e42f05c4ba692f77c" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.AddressErrors.recipient&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ca9cb61ef72f5fe009ab4829a54845fc1031845" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.AddressErrors.region&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b278b64d7ffec08cdc6978ba880b300cbdd7a380" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.AddressErrors.regionCode&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41d1c2553fa03de6218073b21f2f7de3ec35b413" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.AddressErrors.sortingCode&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afe1aecfe54df2132d07326fa4424455d141a58c" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.AudioConfiguration&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="870f06dd743983f3615873ab9a21070344fe0705" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.Document.hasStorageAccess&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9417d8c897294bec573520a86563b87cf280117a" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.Document.requestStorageAccess&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3516aa6b512e126e41014e18efe1a286f4e6ba4" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.Element.hasPointerCapture&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6c3e30ad5e8adcf73be43b4598903bb8bf66ad9" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.Element.scroll&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e271d8469d0e4ad0ac97c1be7242d28f77b61d21" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.Element.scrollBy&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b4e4a0c97b1b578fe6c5c1db946cef472205628" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.Element.scrollTo&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="342fcac86b07f7f0235f53d94302444c56431a6a" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.HTMLElement.innerText&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40f71b5f821d40cb6af4e5f55076c1059540845e" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.HTMLInputElement.select&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce8acef9d5b45cd11df7d2528d4c851d8c712a7b" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.Keyboard.unlock()&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5fd2f3eb1801ca9a870e70332e3bdb74bfbf4cf" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.MediaCapabilitiesInfo&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05cf1cf314a44d6cb6452495dc196b5427fae298" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.MediaConfiguration&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34972dcb03308f3db69358e954d5c4cf088054a9" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.MediaDecodingConfiguration&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17b5fbd37a0cecc2b10cf4919538a0fd3cbc5511" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.MediaEncodingConfiguration&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dc17fd806a6283133aa197214617d71cca6848d" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.MerchantValidationEvent&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea181503cb6ae3bd4a71e8cd2460a87ac095351b" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.MerchantValidationEvent.MerchantValidationEvent&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01f21bd2eb83d18f499ed36d28cee58ec407126d" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.MerchantValidationEvent.PaymentMethodChangeEvent&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90cf476c46dfe64af79717ec3dcdff7b40995d57" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.MerchantValidationEvent.complete&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e933c311f9b6453c4e7a5d2e4cb9eb661344b70" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.MerchantValidationEvent.methodName&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e2fec03982dd9d15b9f2c9700d5f6f871be1461" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.MerchantValidationEvent.validationURL&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f465b8f770fc047944a47c8550edc5a2484dff9" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.ParentNode.querySelector&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9b808768173b1340d403e9c741250e974cfaca7" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.PayerErrors&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00126b2787758865373117dc6bb9cdc75f878e81" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.PaymentAddress.regionCode&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7a0bdda217a7c677a784dfe0a28a1d660afc1ba" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.PaymentCurrencyAmount&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4753830eba89ed903bd17b8eb9f39392f88113fc" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.PaymentCurrencySystem.currency&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a57d646884219d4166aa7dab07edb708ceb05b8f" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.PaymentCurrencySystem.currencySystem&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="947c26c35b192b3147fe01c178a7a82367e7fb6d" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.PaymentCurrencySystem.value&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c72561633682e148712ff3f2285f124d60069a4" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.PaymentRequest.onmerchantvalidation&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58d91c11c9e9c633ba30cc197827fe9918a0b858" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.PaymentRequest.retry&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e81df73c2a4d8e2535b7150b79cc4e5451e4cce" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.PaymentRequest.shippingAddress&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="308df92205541968fac60a58a6f6be60bfce5035" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.PaymentRequestEvent.openWith&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="383eb20a479d4b67d2b3c7276b9a36f7d59c2f3c" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.PaymentRequestEvent.topLevelOrigin&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="169d12889679b6e5c222a79336cbf5fa5bb96685" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.PaymentResponse.onpayerdetailchange&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84b652669475f4e138524ed1289f30f6f048af92" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.PaymentValidationErrors&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1416c57aa5d9a31384a381636b491c759de5db4" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.RTCIceCandidatePair&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a28b56cec0f625b938f116bfafaefd14396b352" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.RTCIceCandidatePair.local&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bce4c84949c600c6d94b47a28b6b4d019c9922da" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.RTCIceCandidatePair.remote&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b43d9d124268b78c83ad5ed512ce2e8e2cc9916" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.RTCIceCandidateType&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a7a78a1b611963dffeed62e3fab67bea2f99451" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.RTCIceGathererState&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="049ff11a05de35f9c1038a1caf258e0b34bc678e" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.RTCIceParameters&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7120f9907314777be8aa42f72ef252aa9f401df" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.RTCIceParameters.password&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70ea7b2d5ceca2f750fac09fd80247be3fc505e6" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.RTCIceParameters.usernameFragment&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a34c5a5c437411328f7f05de3aa47c53f1bf2dd" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.RTCIceProtocol&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71cc00ce985ba2a59576947c7edea0a56a2542f8" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.RTCIceRole&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b666b70e1a9b6502b1e5924acc5ed8d3d1331605" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.RTCIceTcpCandidateType&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfe9f6dae46c933abc295f26b6bbac9c4e827a11" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.RTCIceTransportState&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c0dcc2b69afb14d6b5a59cbf4dc86a5c22290d2" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.RTCPeerConnection.getStats&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dc3f5508e37830539b84986e936cb5c47badeec" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.RTCRtpSender.setParameters()&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b818dac8ff97165fb96d8aeefe64f0e096f27381" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.RTCRtpStreamStats.trackId&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7404783649d303cbeb9d6e1c2d923e643509e7f" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.RTCStats&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03db61796c6fa541eaf5c4aa35651fc4188f579f" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.RTCStats.id&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cf0610b3525dd8965494de20264179f370f6ed6" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.RTCStats.timestamp&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ada6b2ee9b4dd30b6d129bbca53975b5f62b5b4" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.RTCStats.type&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5c49ad294dcefd4b6fa61e0265b401c63ed9b25" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.RTCStatsType&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abd000f3c8f2f190d8ae5f30b467c19780336411" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.RTCTrackEvent.RTCTrackEvent&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31e2327b3fc0d68d8ae2412e657f4915f56bfeca" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.ScrollToOptions.behavior&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f4cb569e70fb2538a589e2dc5b3fb7bdc0db0d2" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.SubtleCrypto.sign.algorithm-ecdsaparams&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a56f13eb8d10e0bf1db13a15eab0ff59dfcc42ac" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.SubtleCrypto.sign.algorithm-rsapss&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e08cc2f5aa8b4624e218ceb7c4b89d1f01d474ab" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.TrackEvent&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab3eab86bf2627ce7c4144750da78a04cc7d2e9d" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.TrackEvent.TrackEvent&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f775543a48d88b3d7ce7bbdafd2f9edb93e0ea7" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.TrackEvent.track&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2913d4ed03ea900566e152d3a3480310484da47d" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.USBDevice.productID&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3f04626b0714233bbae41f3e6505a19c7b4afce" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.USBDevice.vendorID&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="940ef4394a1043e284d4d728eab4d2f13788a86d" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.VTTRegion&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90b5696e5b302fa73f71342ee3ff0da37d731728" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.VideoConfiguration&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8aa2845dd0f2e16fbd848307db4420d0dd2e60da" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.Window.screenLeft&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6d590f48c1164c9434bb4920b2f8c1de13e2f4c" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.Window.screenTop&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd8392189fc89b2dcf7d2d55aa191d2a8c60a9f0" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.WorkerNavigator.locks&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cac83272d4c32d10512c66f849d26b06d9569a6" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.XMLHttpRequestResponseType&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a38171e812be5dd36e8908fe1fa62845b2c81323" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api.navigator.keyboard&quot; (depth: 1) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b668de539db639fa64d45144d3ab09bf562db96" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api/WebGL2RenderingContext&quot; (depth: WebGL2RenderingContext.drawBuffers) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50af2b07d6a359b95a196e6be80942b8ce03974f" translate="yes" xml:space="preserve">
          <source>No compatibility data found. Please contribute data for &quot;api/WebGLRenderingContext&quot; (depth: WebGLRenderingContext.isEnabled) to the &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;MDN compatibility data repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f895d134d92b8c7ecf4db46eed462372f3b8615f" translate="yes" xml:space="preserve">
          <source>No data has been loaded yet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4f26bdeea577636cefe1e9a7575edbcabf7800f" translate="yes" xml:space="preserve">
          <source>No difference from the &lt;a href=&quot;https://www.w3.org/TR/html50/&quot;&gt;HTML5&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92eea8b9f2cfa5d0080a70ab2ac4b662d08ac1e6" translate="yes" xml:space="preserve">
          <source>No difference from the latest snapshot &lt;a href=&quot;https://www.w3.org/TR/html51/&quot;&gt;HTML 5.1&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e52960b461d1c305cfa9fbb4b96c5acaec127163" translate="yes" xml:space="preserve">
          <source>No error has been recorded. The value of this constant is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8e21efe8fda70bcaa9d1cafa2a18cb86b046923" translate="yes" xml:space="preserve">
          <source>No event is being processed at this time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d394149a8ff76933566164dd28a993bdd47121c3" translate="yes" xml:space="preserve">
          <source>No filter is applied. Initial value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73cafcc071d9896c8df7deb8a3e730c497c2a8f6" translate="yes" xml:space="preserve">
          <source>No information icon</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a45cf4d781ae8f881d2127010f96d18463473b68" translate="yes" xml:space="preserve">
          <source>No information is available about the media resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7b54b9b9e6d3a25a63a821c4d29dc701d442138" translate="yes" xml:space="preserve">
          <source>No longer accepts &lt;code&gt;MediaStream&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="831b07bc4ef72e4248aff35a580c4ac6ce2a5fda" translate="yes" xml:space="preserve">
          <source>No longer part of any specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e36e45dc2b99624213b91b556198bd2af867d990" translate="yes" xml:space="preserve">
          <source>No longer part of any specification. This property was part of earlier drafts of the &lt;a href=&quot;https://www.w3.org/TR/mediacapture-streams&quot;&gt;Media Capture and Streams specification&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7932004596ad8718c645ccf6f42c70abc0bb084b" translate="yes" xml:space="preserve">
          <source>No longer part of the specification</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="668013b75882cb93e2922de255225f6619a01b61" translate="yes" xml:space="preserve">
          <source>No media tracks of the type specified were found that satisfy the given constraints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="788de898e0a164a1bbae24b0986426d02c8b541b" translate="yes" xml:space="preserve">
          <source>No notable changes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e51eacd7da121e345390ad7b101f8cd42fe942b7" translate="yes" xml:space="preserve">
          <source>No other elements are included in the list returned by &lt;code&gt;elements&lt;/code&gt;, which makes it an excellent way to get at the elements most important when processing forms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eafb42387868d31f8c8f7364657a65f8add171f2" translate="yes" xml:space="preserve">
          <source>No permission to use the requested device</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18af5606e53cce26775e5dbf9475abbfdfa0f3ff" translate="yes" xml:space="preserve">
          <source>No significant change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da88dffd62e10d69466aecff13052b42cf8e2268" translate="yes" xml:space="preserve">
          <source>No specific errors are returned, but if the supplied index is great than or equal to &lt;a href=&quot;length&quot;&gt;&lt;code&gt;SourceBufferList.length&lt;/code&gt;&lt;/a&gt;, the operation will return &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fc9d1d273cc7bdecba0755c9a064ccc01957d6c" translate="yes" xml:space="preserve">
          <source>No specific errors are returned, but if the supplied index is great than or equal to &lt;a href=&quot;length&quot;&gt;&lt;code&gt;TrackDefaultList.length&lt;/code&gt;&lt;/a&gt;, the operation will return &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13ddcabdcdb46fc9b3e9bcc060ed9bbc4aa10a23" translate="yes" xml:space="preserve">
          <source>No speech was detected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c704f55810a6ad973e37b69efce86574c725c9c" translate="yes" xml:space="preserve">
          <source>No support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e413a4d8bfc7c82896ef74025f845c38bf535ffb" translate="yes" xml:space="preserve">
          <source>No support 6.1&lt;sup&gt;[4]&lt;/sup&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="563668ea1c7e4150eaaf14e2b56930e79d480e56" translate="yes" xml:space="preserve">
          <source>No support See &lt;a href=&quot;https://code.google.com/p/chromium/issues/detail?id=31666&quot;&gt;crbug.com/31666&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58ffa16e443b23440c1f94585857be93349bf78d" translate="yes" xml:space="preserve">
          <source>No support for &lt;code&gt;inline&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58f1e9748fd9271619788e1fb5f918e36aafa021" translate="yes" xml:space="preserve">
          <source>No support for &lt;code&gt;smooth&lt;/code&gt; behavior or &lt;code&gt;center&lt;/code&gt; options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf64882fe13b343af0942fd9f3cd639ad73a9c42" translate="yes" xml:space="preserve">
          <source>No support for &lt;code&gt;smooth&lt;/code&gt; behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75eb75f4254c2b2b0020214d4dda2c6c45026e6c" translate="yes" xml:space="preserve">
          <source>No support for selection events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02fbe7e037d28d197ce497b85039ef5e2f5737bb" translate="yes" xml:space="preserve">
          <source>No support for selection start.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e9aa410026ed0a0426b0f1451c7db35973201a6" translate="yes" xml:space="preserve">
          <source>No unit type was provided (i.e., a unitless value was specified), which indicates a value in user units.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="260f7a8cd4f6938b3cc185a619847cb83d670219" translate="yes" xml:space="preserve">
          <source>Node</source>
          <target state="translated">Node</target>
        </trans-unit>
        <trans-unit id="7cf9e06a96296c4c3e51fedb6e220650be744556" translate="yes" xml:space="preserve">
          <source>Node type constants</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="185a6a2dfaefd70c4e0e7da875e7c337b2bbdd38" translate="yes" xml:space="preserve">
          <source>Node.appendChild</source>
          <target state="translated">Node.appendChild</target>
        </trans-unit>
        <trans-unit id="a21a4efebbadd9b3c8d0d8d8e9da5efbd618df99" translate="yes" xml:space="preserve">
          <source>Node.baseURI</source>
          <target state="translated">Node.baseURI</target>
        </trans-unit>
        <trans-unit id="b43182284471d970987c62473c2e120fba37b333" translate="yes" xml:space="preserve">
          <source>Node.channelCount</source>
          <target state="translated">Node.channelCount</target>
        </trans-unit>
        <trans-unit id="a75047a110d5efb715cdabcc71176f1fb03eaa76" translate="yes" xml:space="preserve">
          <source>Node.channelCountMode</source>
          <target state="translated">Node.channelCountMode</target>
        </trans-unit>
        <trans-unit id="f3483306a93e74b2181a1fd0c929cfc01f7eaca3" translate="yes" xml:space="preserve">
          <source>Node.channelInterpretation</source>
          <target state="translated">Node.channelInterpretation</target>
        </trans-unit>
        <trans-unit id="9c13c4a041b14dc7616df500f6c4cfbd31bccb8f" translate="yes" xml:space="preserve">
          <source>Node.childNodes</source>
          <target state="translated">Node.childNodes</target>
        </trans-unit>
        <trans-unit id="067dbe2c2ba42b7e36f465bc147ecf96638c40b7" translate="yes" xml:space="preserve">
          <source>Node.cloneNode</source>
          <target state="translated">Node.cloneNode</target>
        </trans-unit>
        <trans-unit id="d46c5bd93e8d700c85e7cb95af2b1a71c6568e0e" translate="yes" xml:space="preserve">
          <source>Node.compareDocumentPosition</source>
          <target state="translated">Node.compareDocumentPosition</target>
        </trans-unit>
        <trans-unit id="7b1f246996a22458f8b08e8627633f39dcca797b" translate="yes" xml:space="preserve">
          <source>Node.connect</source>
          <target state="translated">Node.connect</target>
        </trans-unit>
        <trans-unit id="5f959489b33bbca90b5e86adf41fc55e3feccb2e" translate="yes" xml:space="preserve">
          <source>Node.contains</source>
          <target state="translated">Node.contains</target>
        </trans-unit>
        <trans-unit id="86ee306144509a3e57d101873d294572e82e6e08" translate="yes" xml:space="preserve">
          <source>Node.context</source>
          <target state="translated">Node.context</target>
        </trans-unit>
        <trans-unit id="e56ac454938bcd66cb0b4661b15ddaabc61c1433" translate="yes" xml:space="preserve">
          <source>Node.disconnect</source>
          <target state="translated">Node.disconnect</target>
        </trans-unit>
        <trans-unit id="40922dc25306ac0828ad9bf392e0ccc64188b5b4" translate="yes" xml:space="preserve">
          <source>Node.firstChild</source>
          <target state="translated">Node.firstChild</target>
        </trans-unit>
        <trans-unit id="5a2f92706fd762070ab24cba5b5cbf8b4868bddc" translate="yes" xml:space="preserve">
          <source>Node.getRootNode</source>
          <target state="translated">Node.getRootNode</target>
        </trans-unit>
        <trans-unit id="b7823bfda3d6300e86c8fb5f3cb77b34cd556fe4" translate="yes" xml:space="preserve">
          <source>Node.hasChildNodes</source>
          <target state="translated">Node.hasChildNodes</target>
        </trans-unit>
        <trans-unit id="2908cabf03ec24641f878ce34062366773fc7bb4" translate="yes" xml:space="preserve">
          <source>Node.insertBefore</source>
          <target state="translated">Node.insertBefore</target>
        </trans-unit>
        <trans-unit id="6983e2fc5d3f03c7a3b50850caf50477830e39a0" translate="yes" xml:space="preserve">
          <source>Node.isConnected</source>
          <target state="translated">Node.isConnected</target>
        </trans-unit>
        <trans-unit id="012fe5c8146726837305ca775608b7229203da51" translate="yes" xml:space="preserve">
          <source>Node.isDefaultNamespace</source>
          <target state="translated">Node.isDefaultNamespace</target>
        </trans-unit>
        <trans-unit id="92e6e673f8a5515d9d8f468238c373e822d66b0d" translate="yes" xml:space="preserve">
          <source>Node.isEqualNode</source>
          <target state="translated">Node.isEqualNode</target>
        </trans-unit>
        <trans-unit id="7a02aa1d2db6c8c1669e69988bf4e52a1466fd83" translate="yes" xml:space="preserve">
          <source>Node.isSameNode</source>
          <target state="translated">Node.isSameNode</target>
        </trans-unit>
        <trans-unit id="6d0c7d8eecb5246f82ce2aa480c0a98125bc3a34" translate="yes" xml:space="preserve">
          <source>Node.isSupported</source>
          <target state="translated">Node.isSupported</target>
        </trans-unit>
        <trans-unit id="1d2fd7f5ac313e29f84237f51b182c0d71f07c40" translate="yes" xml:space="preserve">
          <source>Node.lastChild</source>
          <target state="translated">Node.lastChild</target>
        </trans-unit>
        <trans-unit id="07e41fc1e7995e131de675523f9ce19e9cd14bc2" translate="yes" xml:space="preserve">
          <source>Node.localName</source>
          <target state="translated">Node.localName</target>
        </trans-unit>
        <trans-unit id="59f48c627fb6fbc0b51a0ac373508909d4646964" translate="yes" xml:space="preserve">
          <source>Node.lookupNamespaceURI</source>
          <target state="translated">Node.lookupNamespaceURI</target>
        </trans-unit>
        <trans-unit id="96e6ee745f564ecebe0cd1953d77749f5c312e66" translate="yes" xml:space="preserve">
          <source>Node.lookupPrefix</source>
          <target state="translated">Node.lookupPrefix</target>
        </trans-unit>
        <trans-unit id="1fbb5bfe67578e770c4c455b195e8fc716b52840" translate="yes" xml:space="preserve">
          <source>Node.namespaceURI</source>
          <target state="translated">Node.namespaceURI</target>
        </trans-unit>
        <trans-unit id="afed735dcadf7a53cbcd6903a85a8f458fd1e752" translate="yes" xml:space="preserve">
          <source>Node.nextSibling</source>
          <target state="translated">Node.nextSibling</target>
        </trans-unit>
        <trans-unit id="09320e80556b290ceb3f404b1ab7753bd8654e30" translate="yes" xml:space="preserve">
          <source>Node.nodeName</source>
          <target state="translated">Node.nodeName</target>
        </trans-unit>
        <trans-unit id="0dbcf7fe307557e885ffd50b3b4e853b4e50f07c" translate="yes" xml:space="preserve">
          <source>Node.nodeType</source>
          <target state="translated">Node.nodeType</target>
        </trans-unit>
        <trans-unit id="7e3704da0abe0c2604354014d88daaa8049a8fbf" translate="yes" xml:space="preserve">
          <source>Node.nodeValue</source>
          <target state="translated">Node.nodeValue</target>
        </trans-unit>
        <trans-unit id="5f33da48199d93a94209b46bc0693bebaff8b41f" translate="yes" xml:space="preserve">
          <source>Node.normalize</source>
          <target state="translated">Node.normalize</target>
        </trans-unit>
        <trans-unit id="b30a3273f2548474147f3ecac5695fea32be7d22" translate="yes" xml:space="preserve">
          <source>Node.numberOfInputs</source>
          <target state="translated">Node.numberOfInputs</target>
        </trans-unit>
        <trans-unit id="3fe59770f88329a3ab1b8c42fd66e4f6f18c078b" translate="yes" xml:space="preserve">
          <source>Node.numberOfOutputs</source>
          <target state="translated">Node.numberOfOutputs</target>
        </trans-unit>
        <trans-unit id="e656a46791bff216ab716c2e0d20e7ddd2c42eeb" translate="yes" xml:space="preserve">
          <source>Node.outerText</source>
          <target state="translated">Node.outerText</target>
        </trans-unit>
        <trans-unit id="81063bab304b1aeb897fbfb103eeaeee19e5dae9" translate="yes" xml:space="preserve">
          <source>Node.ownerDocument</source>
          <target state="translated">Node.ownerDocument</target>
        </trans-unit>
        <trans-unit id="fd9410afd78e8a7e82c4a1001832b5e6c30b0701" translate="yes" xml:space="preserve">
          <source>Node.parentElement</source>
          <target state="translated">Node.parentElement</target>
        </trans-unit>
        <trans-unit id="d6eb7ecad2075ec993720f97b05eecfb71cc5452" translate="yes" xml:space="preserve">
          <source>Node.parentNode</source>
          <target state="translated">Node.parentNode</target>
        </trans-unit>
        <trans-unit id="57563d1a7bb5c9005f81eb58f58b161116b7f46b" translate="yes" xml:space="preserve">
          <source>Node.prefix</source>
          <target state="translated">Node.prefix</target>
        </trans-unit>
        <trans-unit id="ba03e41e4cf7deaa93b284f8a029ac01d329d4be" translate="yes" xml:space="preserve">
          <source>Node.previousSibling</source>
          <target state="translated">Node.previousSibling</target>
        </trans-unit>
        <trans-unit id="b9b9e51620850363a17000730bf5dbb94325e47c" translate="yes" xml:space="preserve">
          <source>Node.removeChild</source>
          <target state="translated">Node.removeChild</target>
        </trans-unit>
        <trans-unit id="e14c6d63ce378578c061c0464cee089fb6ce1724" translate="yes" xml:space="preserve">
          <source>Node.replaceChild</source>
          <target state="translated">Node.replaceChild</target>
        </trans-unit>
        <trans-unit id="ce180979822b5c469cab2e6086d54aebf409f7b2" translate="yes" xml:space="preserve">
          <source>Node.rootNode</source>
          <target state="translated">Node.rootNode</target>
        </trans-unit>
        <trans-unit id="78cddfad02489b0bf13594f00b90688b904f3b4b" translate="yes" xml:space="preserve">
          <source>Node.textContent</source>
          <target state="translated">Node.textContent</target>
        </trans-unit>
        <trans-unit id="6d1452836a5e358d27de613d82985d8f206e4345" translate="yes" xml:space="preserve">
          <source>NodeFilter</source>
          <target state="translated">NodeFilter</target>
        </trans-unit>
        <trans-unit id="22c98514bc39f71c4973bfc88d50738172bf331b" translate="yes" xml:space="preserve">
          <source>NodeFilter.acceptNode</source>
          <target state="translated">NodeFilter.acceptNode</target>
        </trans-unit>
        <trans-unit id="749f705e68c34826a7cc3dffa5cbbe3e73f820de" translate="yes" xml:space="preserve">
          <source>NodeIterator</source>
          <target state="translated">NodeIterator</target>
        </trans-unit>
        <trans-unit id="a274e4fec50947578d7c72c12a4004e96f5c13a4" translate="yes" xml:space="preserve">
          <source>NodeIterator.detach</source>
          <target state="translated">NodeIterator.detach</target>
        </trans-unit>
        <trans-unit id="e5fdc1ed713af9a69375ad8a33782c1d6ff058c3" translate="yes" xml:space="preserve">
          <source>NodeIterator.filter</source>
          <target state="translated">NodeIterator.filter</target>
        </trans-unit>
        <trans-unit id="d08dd56d7907fa5d0bbc409a2cc5a18158daee3b" translate="yes" xml:space="preserve">
          <source>NodeIterator.nextNode</source>
          <target state="translated">NodeIterator.nextNode</target>
        </trans-unit>
        <trans-unit id="790bca3b23898aca42880fcf1c74c719b65d39d0" translate="yes" xml:space="preserve">
          <source>NodeIterator.pointerBeforeReferenceNode</source>
          <target state="translated">NodeIterator.pointerBeforeReferenceNode</target>
        </trans-unit>
        <trans-unit id="8f0c212032752dcee28318413bbcf6efe1f50f9e" translate="yes" xml:space="preserve">
          <source>NodeIterator.previousNode</source>
          <target state="translated">NodeIterator.previousNode</target>
        </trans-unit>
        <trans-unit id="301f27384a64caa6117516d5a8caa194f9cf86a8" translate="yes" xml:space="preserve">
          <source>NodeIterator.referenceNode</source>
          <target state="translated">NodeIterator.referenceNode</target>
        </trans-unit>
        <trans-unit id="fd8eac8eb6cb9e92d83163b33b5c4d2d822c3c8e" translate="yes" xml:space="preserve">
          <source>NodeIterator.root</source>
          <target state="translated">NodeIterator.root</target>
        </trans-unit>
        <trans-unit id="3fb7323a1992842c9df8139ee84355d961b493bb" translate="yes" xml:space="preserve">
          <source>NodeIterator.whatToShow</source>
          <target state="translated">NodeIterator.whatToShow</target>
        </trans-unit>
        <trans-unit id="61c04a0531c5d0d0df780249e794d7b234033614" translate="yes" xml:space="preserve">
          <source>NodeJS: Console API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05a2a8746fe10231011b4d6850be527a41c1c732" translate="yes" xml:space="preserve">
          <source>NodeList</source>
          <target state="translated">NodeList</target>
        </trans-unit>
        <trans-unit id="9688822f66dc07b33981a06a9ab006fe00843874" translate="yes" xml:space="preserve">
          <source>NodeList.entries</source>
          <target state="translated">NodeList.entries</target>
        </trans-unit>
        <trans-unit id="915add19f13dfdc316f0e959e7bcb8a5fc523fb7" translate="yes" xml:space="preserve">
          <source>NodeList.forEach</source>
          <target state="translated">NodeList.forEach</target>
        </trans-unit>
        <trans-unit id="eed2083980557d06ae8edff245144237a5f36bef" translate="yes" xml:space="preserve">
          <source>NodeList.item</source>
          <target state="translated">NodeList.item</target>
        </trans-unit>
        <trans-unit id="3bf831502a621ee73e85216d4eec472718695ab0" translate="yes" xml:space="preserve">
          <source>NodeList.keys</source>
          <target state="translated">NodeList.keys</target>
        </trans-unit>
        <trans-unit id="703d93e6e90f221c8e58e56af9dd7d259f611902" translate="yes" xml:space="preserve">
          <source>NodeList.length</source>
          <target state="translated">NodeList.length</target>
        </trans-unit>
        <trans-unit id="c1013133d0684b584d4617b792a4880a02558389" translate="yes" xml:space="preserve">
          <source>NodeList.values</source>
          <target state="translated">NodeList.values</target>
        </trans-unit>
        <trans-unit id="3c7156e8b388e489ecbd5922edf646da8c061299" translate="yes" xml:space="preserve">
          <source>NodeOptions</source>
          <target state="translated">NodeOptions</target>
        </trans-unit>
        <trans-unit id="9e325452c6548fc2449564842660d75ef3b1eb73" translate="yes" xml:space="preserve">
          <source>Nodes</source>
          <target state="translated">Nodes</target>
        </trans-unit>
        <trans-unit id="e2ed3e1b3ca9467e0f1b3e29fca8dbe5e5ff1c52" translate="yes" xml:space="preserve">
          <source>Nodes and elements in a document may be dragged using the &lt;code&gt;application/x-moz-node&lt;/code&gt; type. The data for the type should be a DOM node. This allows the drop target to receive the actual node where the drag was started from. Note that callers from a different domain will not be able to access the node even when it has been dropped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="056b4ebe29c969ff2ae0094ef61db598fb26c79b" translate="yes" xml:space="preserve">
          <source>Nodes can be removed. The following code removes text node &lt;code&gt;myTextNode&lt;/code&gt; (containing the word &quot;world&quot;) from the second &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element, &lt;code&gt;myP&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="587820bae464c8265cc8552b32d6f3e42a3ee6e1" translate="yes" xml:space="preserve">
          <source>Nodes from external documents should be cloned using &lt;a href=&quot;importnode&quot;&gt;&lt;code&gt;document.importNode()&lt;/code&gt;&lt;/a&gt; (or adopted using &lt;a href=&quot;adoptnode&quot;&gt;&lt;code&gt;document.adoptNode()&lt;/code&gt;&lt;/a&gt;) before they can be inserted into the current document. For more on the &lt;a href=&quot;../node/ownerdocument&quot;&gt;&lt;code&gt;Node.ownerDocument&lt;/code&gt;&lt;/a&gt; issues, see the &lt;a href=&quot;http://www.w3.org/DOM/faq.html#ownerdoc&quot;&gt;W3C DOM FAQ&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73e23b655479f3e103c4d807e2a1f57b32934ac2" translate="yes" xml:space="preserve">
          <source>Noise suppression automatically filters the audio to remove background noise, hum caused by equipment, and the like from the sound before delivering it to your code. This feature is typically used on microphones, although it is technically possible it could be provided by other input sources as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73df8a18dc7b8c36b40ffac96b55c5e81015b21c" translate="yes" xml:space="preserve">
          <source>Noise suppression is typically provided by microphones, although it can be provided by other input sources as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="650842abac855b16e0a49ed1c759167e5c08a6cb" translate="yes" xml:space="preserve">
          <source>Noise user controls</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2bcd72b46f4701a431727ea4d7ded249c651144" translate="yes" xml:space="preserve">
          <source>Non-breaking space</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bef4b70602280e69b2d91a0a55e127297362342a" translate="yes" xml:space="preserve">
          <source>Non-gecko browsers' legacy mouse wheel event object: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MouseWheelEvent&quot;&gt;&lt;code&gt;MouseWheelEvent&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2536b3b99a7b570ef10eaf7db464e4126e7126cb" translate="yes" xml:space="preserve">
          <source>Non-printable keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="559825b35206ae4a1dc65031cbd666a9ca065a8a" translate="yes" xml:space="preserve">
          <source>Non-stable version</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cb7cb2e7a631229222c10ea25d476ca4aa5ab1d" translate="yes" xml:space="preserve">
          <source>Non-stable version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2223c0ade777c36488a74f857a3e7b54b2b18343" translate="yes" xml:space="preserve">
          <source>Non-standard</source>
          <target state="translated">Non-standard</target>
        </trans-unit>
        <trans-unit id="e89f17d3edfe1a3c74ef5b52bef8ae671c115d87" translate="yes" xml:space="preserve">
          <source>Non-standard APIs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b3fa8adae3e8d05fecf77f354b5438c7570c735" translate="yes" xml:space="preserve">
          <source>Non-standard Firefox syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bf9b41f39ce7357cc3aee0a3ed0afbdb65007ec" translate="yes" xml:space="preserve">
          <source>Non-standard channel layouts are handled as if &lt;code&gt;channelInterpretation&lt;/code&gt; is set to &lt;code&gt;discrete&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee1c9b75af4a08544a8512624eb1100ba4b9f2f6" translate="yes" xml:space="preserve">
          <source>Non-standard exceptions in Chrome</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7d77effa094e7682a216b54dee2cca296759acf" translate="yes" xml:space="preserve">
          <source>Non-standard extensions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fff742f8c43947184acfc2b50ee0f775ee944c91" translate="yes" xml:space="preserve">
          <source>Non-standard implementation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="760562066eedf952ab6f9cf9ef55138a559e3a74" translate="yes" xml:space="preserve">
          <source>Non-standard implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60110e80f96d5d6e86b4aadfe8ecb02873c07b02" translate="yes" xml:space="preserve">
          <source>Non-standard methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6742540e1ad84477e18235be55830713f0398508" translate="yes" xml:space="preserve">
          <source>Non-standard properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef8b5f20aa8ffd692d01288bb231531c1f3b6bac" translate="yes" xml:space="preserve">
          <source>Non-standard, Gecko-specific workers: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ChromeWorker&quot;&gt;&lt;code&gt;ChromeWorker&lt;/code&gt;&lt;/a&gt;, used by extensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85c6003506cbcc9183ed132d16b2d85f8caf8ed1" translate="yes" xml:space="preserve">
          <source>Non-standard. Returns the value of &lt;a href=&quot;event/defaultprevented&quot;&gt;&lt;code&gt;Event.defaultPrevented&lt;/code&gt;&lt;/a&gt;. Use &lt;a href=&quot;event/defaultprevented&quot;&gt;&lt;code&gt;Event.defaultPrevented&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="806c74a6dd444e7b581fe8d0651c3b583f7e4a35" translate="yes" xml:space="preserve">
          <source>NonDocumentTypeChildNode</source>
          <target state="translated">NonDocumentTypeChildNode</target>
        </trans-unit>
        <trans-unit id="cee17f5a4777a6f802597e07c6f940002e63ca1d" translate="yes" xml:space="preserve">
          <source>NonDocumentTypeChildNode.nextElementSibling</source>
          <target state="translated">NonDocumentTypeChildNode.nextElementSibling</target>
        </trans-unit>
        <trans-unit id="ca7881ea863fd4a9e328f5bfc219f65c910fe619" translate="yes" xml:space="preserve">
          <source>NonDocumentTypeChildNode.previousElementSibling</source>
          <target state="translated">NonDocumentTypeChildNode.previousElementSibling</target>
        </trans-unit>
        <trans-unit id="6eef6648406c333a4035cd5e60d0bf2ecf2606d7" translate="yes" xml:space="preserve">
          <source>None</source>
          <target state="translated">None</target>
        </trans-unit>
        <trans-unit id="9a9707be07da6862114abd49d2570046d4810ca5" translate="yes" xml:space="preserve">
          <source>None.</source>
          <target state="translated">None.</target>
        </trans-unit>
        <trans-unit id="4a8cf4fff0532a5356597b98d6f3667f65c056bf" translate="yes" xml:space="preserve">
          <source>Normal Closure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59f3849ee04737aa461e7216ee2240d83e89a8a1" translate="yes" xml:space="preserve">
          <source>Normal closure; the connection successfully completed whatever purpose for which it was created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1a35df80fe891fea1ad0d426e7ef27961bb25d3" translate="yes" xml:space="preserve">
          <source>Normally, scripts on different pages are allowed to access each other if and only if the pages they originate from share the same protocol, port number, and host (also known as the &quot;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy&quot;&gt;same-origin policy&lt;/a&gt;&quot;). &lt;code&gt;window.postMessage()&lt;/code&gt; provides a controlled mechanism to securely circumvent this restriction (if used properly).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e703753be55039f88f142c9e1c4ee932b590561" translate="yes" xml:space="preserve">
          <source>Normative document</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b7477e3454c57fa3d3a9ce1a36aac4c1abd7acf" translate="yes" xml:space="preserve">
          <source>Not all &lt;a href=&quot;../performance&quot;&gt;&lt;code&gt;Performance&lt;/code&gt;&lt;/a&gt; properties and methods are available to Web workers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2144b682b3c9964ae16ad2b641efa87c1892a471" translate="yes" xml:space="preserve">
          <source>Not all combinations are valid: &lt;code&gt;u&lt;/code&gt; cannot be combined with &lt;code&gt;f&lt;/code&gt;. See the syntax table below. Equivalent Regex: &lt;code&gt;uniform[1234](u?i|f)v?&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d6be10ef536b1d8ad6128bf0c95514b77a5132c" translate="yes" xml:space="preserve">
          <source>Not all constraints are numbers. For example, on mobile devices, the following will prefer the front camera (if one is available) over the rear one:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0041a901d7f30c1d390278b70504bdfeed8979c0" translate="yes" xml:space="preserve">
          <source>Not all track replacements require renegotiation. In fact, even changes that seem huge can be done without requiring negotation. Here are the changes that can trigger negotiaton:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0368927d47ad9cf101f2f05cb6fe0d6373f09fc" translate="yes" xml:space="preserve">
          <source>Not currently part of any specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5ceb4fb2eba36b0d54bdd015209486900d0653a" translate="yes" xml:space="preserve">
          <source>Not enough memory is left to execute the command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="607a5ce37b0c88a8facf7a64b2e95a0eb2dcf683" translate="yes" xml:space="preserve">
          <source>Not included in W3C HTML5 Recommendation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e75bccfa8a7b9fbe6e010b74740af2c7bf35708d" translate="yes" xml:space="preserve">
          <source>Not namespace-aware, most commonly used methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4812ca0ebad5b10f9513f9f3a619b10d131ec91" translate="yes" xml:space="preserve">
          <source>Not only do these techniques represent poor coding patterns, some of them are unreliable and all of them result in the perception of poor page load performance for the next navigation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="483592060ec5a9480ca4dfb7a9892cb503038d54" translate="yes" xml:space="preserve">
          <source>Not only do these techniques represent poor coding patterns, some of them are unreliable and result in the perception of poor page load performance for the next navigation. The Beacon API provides a standard way to address these issues.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="392886ecaeb8dc69f4d1e7e34a5639e66734df1b" translate="yes" xml:space="preserve">
          <source>Not part of any public standard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4de1afe5413225e5f1765ec1032b7844a5f2454" translate="yes" xml:space="preserve">
          <source>Not part of any specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00213b1cf4bc9c807e4e688d2822d4a30804c803" translate="yes" xml:space="preserve">
          <source>Not part of any specification. This API was removed from the Touch Events v2 draft specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d2807759e0017883ec13ba5757855bc0bea5eeb" translate="yes" xml:space="preserve">
          <source>Not part of any specification. This interface was previously part of &lt;a href=&quot;https://w3c.github.io/mediacapture-main/&quot;&gt;Media Capture and Streams&lt;/a&gt; but was removed in 2013.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d241e35247d994ef7dd88295c0a4c44ba350558" translate="yes" xml:space="preserve">
          <source>Not part of specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1e7beeaae7a13407b78425309614ce48198c396" translate="yes" xml:space="preserve">
          <source>Not supported by Internet Explorer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcdc3612219ab3d540a021388d0a9df7c6f1f9cd" translate="yes" xml:space="preserve">
          <source>Not supported for MacBook with Touch Bar and Windows 7 (see &lt;a href=&quot;https://bugzil.la/754199&quot;&gt;bug 754199&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4515a8811147f84ed81455b6fd53285e1b5466a2" translate="yes" xml:space="preserve">
          <source>Not supported for SVG elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8942c17d69e1e378d53a2808e475a3000375c101" translate="yes" xml:space="preserve">
          <source>Not supported for button elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1597f79dc334f716e4d21831971c970fe8ace50f" translate="yes" xml:space="preserve">
          <source>Not supported on Windows 7.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9a318264b5a9ad212bca1d6397bec412e8662f9" translate="yes" xml:space="preserve">
          <source>Not supported: AES-CTR, HKDF, PBKDF2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec97f1c95fc2aabc9e5cf6ea95cf08534b88b7fc" translate="yes" xml:space="preserve">
          <source>Not supported: AES-CTR.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26fc06d60876982bb02881f4bad551204ef76f1a" translate="yes" xml:space="preserve">
          <source>Not supported: ECDH.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91ddacb7b30899c4b1d826afcc1bd34fcedc2453" translate="yes" xml:space="preserve">
          <source>Not supported: HKDF, PBKDF2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30d478be45f6c428b225b0624d13ceb03eec366a" translate="yes" xml:space="preserve">
          <source>Not supported: RSA-PSS, ECDSA, ECDH.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a229d2c850aa5049e7776f7861549468baa6989" translate="yes" xml:space="preserve">
          <source>Not supported: RSA-PSS, ECDSA.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f6e17d42bd3c2dfb1a95149c36dffa2e4213d6b" translate="yes" xml:space="preserve">
          <source>Not supported: SHA-1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eba8ba4a654e4efdfe595d042a2377b964d9ef35" translate="yes" xml:space="preserve">
          <source>Not to be confused with element-style &lt;a href=&quot;../cssstyledeclaration/csstext&quot;&gt;&lt;code&gt;CSSStyleDeclaration.cssText&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b430905fa6032fbf0b40ad8fc8efb29c8c0b86e8" translate="yes" xml:space="preserve">
          <source>Not to be confused with stylesheet style-rule &lt;a href=&quot;../cssrule/csstext&quot;&gt;&lt;code&gt;CSSRule.cssText&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3185780bb91ad2b9ccbfbfea3269001e5a06c1df" translate="yes" xml:space="preserve">
          <source>Not usable with compressedTexSubImage2D/copyTexSubImage2D.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15cab30eaf944df0996ffb6c4debb5d32cea5abf" translate="yes" xml:space="preserve">
          <source>Not yet enabled by default. See &lt;a href=&quot;https://bugzil.la/1389628&quot;&gt;bug 1389628&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f3163ffda0d3418a1866865fdb1ef76cb2dbf4b" translate="yes" xml:space="preserve">
          <source>Notation</source>
          <target state="translated">Notation</target>
        </trans-unit>
        <trans-unit id="bd4d9d45b30a8af5e003bba956f1869f9e1ca496" translate="yes" xml:space="preserve">
          <source>Note also that only start and final endpoints of a path are affected: if a path is closed with &lt;code&gt;closePath()&lt;/code&gt;, there's no start and final endpoint; instead, all endpoints in the path are connected to their attached previous and next segment using the current setting of the &lt;code&gt;lineJoin&lt;/code&gt; style, whose default value is &lt;code&gt;miter&lt;/code&gt;, with the effect of automatically extending the outer borders of the connected segments to their intersection point, so that the rendered stroke will exactly cover full pixels centered at each endpoint if those connected segments are horizontal and/or vertical). See the next two sections for demonstrations of these additional line styles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="226474f57563e8df58cd1941b919d5faa29cd5d9" translate="yes" xml:space="preserve">
          <source>Note also, that various browsers ignore the result of the event and do not ask the user for confirmation at all. The document will always be unloaded automatically. Firefox has a switch named &lt;code&gt;dom.disable_beforeunload&lt;/code&gt; in &lt;a&gt;about:config&lt;/a&gt; to enable this behaviour.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1304187e9132da038e9c702d13b587b4bd1dd55" translate="yes" xml:space="preserve">
          <source>Note each handler calls &lt;a href=&quot;event/preventdefault&quot;&gt;&lt;code&gt;preventDefault()&lt;/code&gt;&lt;/a&gt; to prevent additional event processing for this event (such as touch events or pointer events).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c70b67849398fdc72260c4128f0848184f6b57cc" translate="yes" xml:space="preserve">
          <source>Note how we have used some feature detection to either give the browser the newer property values (like &lt;a href=&quot;../audiolistener/forwardx&quot;&gt;&lt;code&gt;AudioListener.forwardX&lt;/code&gt;&lt;/a&gt;) for setting position, etc. if it supports those, or older methods (like &lt;a href=&quot;../audiolistener/setorientation&quot;&gt;&lt;code&gt;AudioListener.setOrientation()&lt;/code&gt;&lt;/a&gt;) if it still supports those but not the new properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="585bbe6c2b8ce23c767eefc338f1ff85011505b0" translate="yes" xml:space="preserve">
          <source>Note how we have used some feature detection to either give the browser the newer property values (like &lt;a href=&quot;audiolistener/forwardx&quot;&gt;&lt;code&gt;AudioListener.forwardX&lt;/code&gt;&lt;/a&gt;) for setting position, etc. if it supports those, or older methods (like &lt;a href=&quot;audiolistener/setorientation&quot;&gt;&lt;code&gt;AudioListener.setOrientation()&lt;/code&gt;&lt;/a&gt;) if it still supports those but not the new properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5abf81f8edf220d31e15f079149fffb1e18ec218" translate="yes" xml:space="preserve">
          <source>Note how we have used some feature detection to either give the browser the newer property values (like &lt;a href=&quot;forwardx&quot;&gt;&lt;code&gt;AudioListener.forwardX&lt;/code&gt;&lt;/a&gt;) for setting position, etc. if it supports those, or older methods (like &lt;a href=&quot;setorientation&quot;&gt;&lt;code&gt;AudioListener.setOrientation()&lt;/code&gt;&lt;/a&gt;) if it still supports those but not the new properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6714dcb3fb0540cb6d8f611c0892a77b95937f0f" translate="yes" xml:space="preserve">
          <source>Note on fullscreen</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e34ccb2ddd199f403bb9c4fb78628b06136c6479" translate="yes" xml:space="preserve">
          <source>Note on outerHeight versus height</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="206da56f010b50f2fe6be486d81b70f4d287cc51" translate="yes" xml:space="preserve">
          <source>Note on outerHeight versus height (or innerHeight)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c5d33413b3a1ae49f00ad69afa8a97d979fc62d" translate="yes" xml:space="preserve">
          <source>Note on position and dimension error correction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7511ee5b5a1b4ce7e10a4935903c6fc601ad5c7b" translate="yes" xml:space="preserve">
          <source>Note on precedence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2b1c30881925292586a0b1f07bd16b12239c2b6" translate="yes" xml:space="preserve">
          <source>Note on refreshing vs. opening a new window/tab</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de0650bbf9e803599bb6a6c43a2c2090279a5fa6" translate="yes" xml:space="preserve">
          <source>Note on scrollbars</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63c52a10ea10e11c118736ce31574a285a443a1d" translate="yes" xml:space="preserve">
          <source>Note on security issues of the status bar presence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0195c8792fad0c613c0d96620387b188a835a12" translate="yes" xml:space="preserve">
          <source>Note on status bar</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe17ee80aab34858a10fa42f305c664e2baff199" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;&lt;a href=&quot;../element/tagname&quot;&gt;tagName&lt;/a&gt;&lt;/code&gt; property could have been used instead, since &lt;code&gt;nodeName&lt;/code&gt; has the same value as &lt;code&gt;tagName&lt;/code&gt; for an element. Bear in mind, however, that &lt;code&gt;nodeName&lt;/code&gt; will return &lt;code&gt;#text&lt;/code&gt; for text nodes while &lt;code&gt;tagName&lt;/code&gt; will return &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a88797c351fae0c80907b10ea17735f120a6bdd0" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;continuous&lt;/code&gt; currently isn't implemented on Gecko, and you just single results with each recognition. For now, you can roughly emulate continuous results by just running &lt;a href=&quot;start&quot;&gt;&lt;code&gt;SpeechRecognition.start()&lt;/code&gt;&lt;/a&gt; each time a result is detected, like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6b4c0b8a0ef356df94b15e761649738ae844a05" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;dragstart&lt;/code&gt; and &lt;code&gt;dragend&lt;/code&gt; events are not fired when dragging a file into the browser from the OS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c1d60ae87f0ee35eafd8953830266e02fc32959" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;insertCell&lt;/code&gt; inserts the cell directly into the table and returns a reference to the new cell. The cell does not need to be appended separately as would be the case if &lt;code&gt;&lt;a href=&quot;../document/createelement&quot;&gt;document.createElement()&lt;/a&gt;&lt;/code&gt; had been used to create the new TD element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b405648e9a215e8b9913108bf950f445c494074" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;insertRow&lt;/code&gt; inserts the row directly into the table and returns a reference to the new row. The row does not need to be appended separately as would be the case if &lt;code&gt;&lt;a href=&quot;../document/createelement&quot;&gt;document.createElement()&lt;/a&gt;&lt;/code&gt; had been used to create the new TR element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe18ba15add5840d5da6aeb5dc7aaaa9f2f0e420" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;pushState()&lt;/code&gt; never causes a &lt;code&gt;hashchange&lt;/code&gt; event to be fired, even if the new URL differs from the old URL only in its hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20b9f242f17a764eaf597ea4b62efea3a47418be" translate="yes" xml:space="preserve">
          <source>Note that CDATA sections should not be used within HTML; they only work in XML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c37efac7c7c33dae07d60312382087d05cd40b7f" translate="yes" xml:space="preserve">
          <source>Note that WebGL makes no functionality available to compress or decompress textures: they must already be in a compressed format and can then be directly uploaded to video memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca01703fafcfd4a7f6a2b5a1d519777d530b4457" translate="yes" xml:space="preserve">
          <source>Note that X has too many keys and some of them are not testable with usual keyboard. So, following table is created from source code which maps from scancode to code value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f5c1740a45c892b881a88bcba0b791561363603" translate="yes" xml:space="preserve">
          <source>Note that a &lt;a href=&quot;../readablestreamdefaultcontroller&quot;&gt;&lt;code&gt;ReadableStreamDefaultController&lt;/code&gt;&lt;/a&gt; object is provided as the parameter of the &lt;code&gt;start()&lt;/code&gt; and &lt;code&gt;pull()&lt;/code&gt; functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdeda255905e2c5d9163e9e107dac0f32d34acac" translate="yes" xml:space="preserve">
          <source>Note that a &lt;a href=&quot;readablestreamdefaultcontroller&quot;&gt;&lt;code&gt;ReadableStreamDefaultController&lt;/code&gt;&lt;/a&gt; object is provided as the parameter of the &lt;code&gt;start()&lt;/code&gt; and &lt;code&gt;pull()&lt;/code&gt; functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="714ace3ea40ca2b8be8d16396615d19c3962acf2" translate="yes" xml:space="preserve">
          <source>Note that access requests are automatically denied unless the embedded content is currently processing a user gesture such as a tap or click &amp;mdash; so this code needs to be run inside some kind of user gesture-based event handler, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b1d100f36e2fd8f929bce6fef94cf97d659e3b2" translate="yes" xml:space="preserve">
          <source>Note that as a string, &lt;code&gt;lastModified&lt;/code&gt; cannot &lt;em&gt;easily&lt;/em&gt; be used for comparisons between the modified dates of documents. Here is a possible example of how to show an alert message when the page changes (see also: &lt;a href=&quot;cookie&quot;&gt;JavaScript cookies API&lt;/a&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae7f5bfb2008a14cd317c160de7bb8c72bb8bc06" translate="yes" xml:space="preserve">
          <source>Note that as of Firefox 40, IndexedDB transactions have relaxed durability guarantees to increase performance (see &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1112702&quot;&gt;bug 1112702&lt;/a&gt;.) Previously in a &lt;code&gt;readwrite&lt;/code&gt; transaction &lt;a href=&quot;idbtransaction/oncomplete&quot;&gt;&lt;code&gt;IDBTransaction.oncomplete&lt;/code&gt;&lt;/a&gt; was fired only when all data was guaranteed to have been flushed to disk. In Firefox 40+ the &lt;code&gt;complete&lt;/code&gt; event is fired after the OS has been told to write the data but potentially before that data has actually been flushed to disk. The &lt;code&gt;complete&lt;/code&gt; event may thus be delivered quicker than before, however, there exists a small chance that the entire transaction will be lost if the OS crashes or there is a loss of system power before the data is flushed to disk. Since such catastrophic events are rare most consumers should not need to concern themselves further.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a280e7dc1f16421c6c622c8280a0ee79363ecc35" translate="yes" xml:space="preserve">
          <source>Note that at the top of the &lt;code&gt;fetch()&lt;/code&gt; block we log the response &lt;code&gt;URL&lt;/code&gt; to the console.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4564bc2ebcc84909448aa75a563263f6356d820" translate="yes" xml:space="preserve">
          <source>Note that at the top of the &lt;code&gt;fetch()&lt;/code&gt; block we log the response &lt;code&gt;headers&lt;/code&gt; value to the console.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0984f777847b574a7fb7ea38220c1273c45ae21c" translate="yes" xml:space="preserve">
          <source>Note that at the top of the &lt;code&gt;fetch()&lt;/code&gt; block we log the response &lt;code&gt;status&lt;/code&gt; value to the console.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82e41d4507b8340c3a936dda8b9c2f05bcf3d18a" translate="yes" xml:space="preserve">
          <source>Note that at the top of the &lt;code&gt;fetch()&lt;/code&gt; block we log the response &lt;code&gt;statusText&lt;/code&gt; value to the console.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38682bf9656248c95c881c18bd89b5eca5d9cc1e" translate="yes" xml:space="preserve">
          <source>Note that at the top of the &lt;code&gt;fetch()&lt;/code&gt; block we log the response &lt;code&gt;type&lt;/code&gt; to the console.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78acbd0680e8414548b06504ea3d711dc2dc831d" translate="yes" xml:space="preserve">
          <source>Note that being &lt;em&gt;indirect-modify&lt;/em&gt; (&lt;a href=&quot;https://www.w3.org/TR/cssom/#cssstylesheet&quot;&gt;changeable&lt;/a&gt; but &lt;a href=&quot;https://www.w3.org/TR/cssom/#cssrulelist&quot;&gt;only having&lt;/a&gt; read-methods), rules are &lt;strong&gt;NOT&lt;/strong&gt; added or removed from the list directly, but instead here, only via its parent stylesheet. In fact, &lt;a href=&quot;cssstylesheet/insertrule&quot;&gt;&lt;code&gt;.insertRule()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;cssstylesheet/deleterule&quot;&gt;&lt;code&gt;.deleteRule()&lt;/code&gt;&lt;/a&gt; are not even methods of CSSRuleList, but only of &lt;a href=&quot;cssstylesheet&quot;&gt;&lt;code&gt;CSSStyleSheet&lt;/code&gt;&lt;/a&gt;. If however, for some reason the list does need to be modified but has no parent stylesheet (perhaps being a &lt;em&gt;&lt;a href=&quot;https://www.w3.org/TR/cssom/#cssstylesheet&quot;&gt;livecopy&lt;/a&gt;&lt;/em&gt; of a list that does), it cannot just be assigned one (as it has &lt;a href=&quot;https://www.w3.org/TR/cssom/#cssrulelist&quot;&gt;no such property&lt;/a&gt;), and neither can it be assigned to one (as stylesheet.css&lt;code&gt;Rules &lt;/code&gt;is &lt;a href=&quot;https://www.w3.org/TR/cssom/#cssstylesheet&quot;&gt;read-only&lt;/a&gt;), but it must unfortunately be &lt;strong&gt;inserted&lt;/strong&gt; into one, rule by rule, and unless combining lists, after any existing list therein is deleted, rule by rule.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12b0651b42a04f0bde21a2ea1e9bb598cf95875d" translate="yes" xml:space="preserve">
          <source>Note that both the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DragDrop/Recommended_Drag_Types#link&quot;&gt;text/uri-list&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DragDrop/Recommended_Drag_Types#text&quot;&gt;text/plain&lt;/a&gt; contain the same data in this example. This will often be true, but doesn't need to be the case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eccc337e82a3950a28a9f5b2d2873489dc07128e" translate="yes" xml:space="preserve">
          <source>Note that browsers determine which screen to report as current by detecting which screen has the center of the browser window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b2d8dc5243d388923aa7385a2dfba998c515850" translate="yes" xml:space="preserve">
          <source>Note that currently only the speech synthesis part is available in Firefox Desktop &amp;mdash; the speech recognition part will be available soon, once the required internal permissions are sorted out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef5d1e0a7b8be0d0b2427628ea27e8002a2869cc" translate="yes" xml:space="preserve">
          <source>Note that even though the original history entry (for &lt;code&gt;&lt;var&gt;http://example.com/example.html&lt;/var&gt;&lt;/code&gt;) has no state object associated with it, a &lt;code&gt;popstate&lt;/code&gt; event is still fired when we activate that entry after the second call to &lt;code&gt;history.back()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daa3f3e5e4a31db658697392916805ea160a667c" translate="yes" xml:space="preserve">
          <source>Note that even though the original history entry (for &lt;code&gt;&lt;var&gt;http://example.com/example.html&lt;/var&gt;&lt;/code&gt;) has no state object associated with it, a &lt;code&gt;popstate&lt;/code&gt; event is still fired, when we activate that entry after the second call to &lt;code&gt;history.back()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4f7d8b5d7eb8554f34d0533c2df30c558b015b6" translate="yes" xml:space="preserve">
          <source>Note that every object store has its own separate auto increment counter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2f4be84538b77f34660930ffc3c6dc74d8b4af8" translate="yes" xml:space="preserve">
          <source>Note that for this to work as expected, &lt;code&gt;attributeOldValue&lt;/code&gt; or &lt;code&gt;characterDataOldValue&lt;/code&gt; must be set to &lt;code&gt;true&lt;/code&gt; in the corresponding &lt;a href=&quot;mutationobserverinit&quot;&gt;MutationObserverInit&lt;/a&gt; parameter of the &lt;code&gt;MutationObserver&lt;/code&gt;&lt;a href=&quot;mutationobserver/observe&quot;&gt;observe&lt;/a&gt; method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a66d76804fd422f0a2e845162542e11bbf70230" translate="yes" xml:space="preserve">
          <source>Note that here we're creating a PNG image; if you add a second parameter to the &lt;code&gt;toBlob()&lt;/code&gt; call, you can specify the image type. For example, to get the image in JPEG format:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98ece010b18c05895f248ee6ac8ea939ba0aad98" translate="yes" xml:space="preserve">
          <source>Note that if the array contains objects, then the columns are labeled with the property name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54bdd35d730bd3d160d69a90700a422888ff48ec" translate="yes" xml:space="preserve">
          <source>Note that if the element's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/direction&quot;&gt;&lt;code&gt;direction&lt;/code&gt;&lt;/a&gt; of the element is &lt;code&gt;rtl&lt;/code&gt; (right-to-left) then &lt;code&gt;scrollLeft&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt; when the scrollbar is at its rightmost position (at start of the scrolled content) and then increasingly negative as you scroll towards the end of the content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d38337d73df2f1ea630fea985ecb339d6eb814f4" translate="yes" xml:space="preserve">
          <source>Note that if the parsing process fails, the &lt;code&gt;DOMParser&lt;/code&gt; does not throw an exception, but instead returns an error document:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9d81868a9575e1b517dd64cf909c78818d586b7" translate="yes" xml:space="preserve">
          <source>Note that in Google Chrome, &lt;code&gt;console.clear()&lt;/code&gt; has no effect if the user has selected &quot;Preserve log upon navigation&quot; in the &lt;a href=&quot;https://developer.chrome.com/devtools/docs/settings#preserve-log%20upon%20navigation&quot;&gt;settings&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cafc23ee43ddebce67a8f2d9498297f823362ea0" translate="yes" xml:space="preserve">
          <source>Note that in Safari on macOS and iOS prior to 10.2, the country code returned is lowercase: &quot;en-us&quot;, &quot;fr-fr&quot; etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67aa96b8d7a4e57f09c37b3cd1c7f869b551c6aa" translate="yes" xml:space="preserve">
          <source>Note that in each iteration of the loop, you can grab data from the current record under the cursor object using &lt;code&gt;cursor.value.foo&lt;/code&gt;. For a complete working example, see our &lt;a href=&quot;https://github.com/mdn/indexeddb-examples/tree/master/idbcursor&quot;&gt;IDBCursor example&lt;/a&gt; (&lt;a href=&quot;https://mdn.github.io/indexeddb-examples/idbcursor/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01f0621024714c06c1f67f3e1075282b645c9a35" translate="yes" xml:space="preserve">
          <source>Note that in this case, the &lt;code&gt;handleFiles()&lt;/code&gt; function itself is the event handler, unlike previous examples where it was called by an event handler which passed it a parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e592566ccb7296db3de3dc69970339a6d2184847" translate="yes" xml:space="preserve">
          <source>Note that in this example, any drag item that is not a file is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53d004bcd505edc5eb7954177ab2c54f7c0f94dd" translate="yes" xml:space="preserve">
          <source>Note that multiple suspendRedraw calls can be used at once and that each such method call is treated independently of the other suspendRedraw method calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5410cf3729d2a21fd91304fb55e0d2ebf16885dc" translate="yes" xml:space="preserve">
          <source>Note that navigation requests for &lt;a href=&quot;../window&quot;&gt;&lt;code&gt;Windows&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../htmliframeelement&quot;&gt;&lt;code&gt;iframes&lt;/code&gt;&lt;/a&gt; do NOT use the final URL. The way the HTML specification handles redirects for navigations ends up using the request URL for the resulting &lt;a href=&quot;../window/location&quot;&gt;&lt;code&gt;Window.location&lt;/code&gt;&lt;/a&gt;. This means sites can still provide an &quot;alternate&quot; view of a web page when offline without changing the user-visible URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd9b247cb28724cf7ab8076bc7b4132bc6ef2901" translate="yes" xml:space="preserve">
          <source>Note that not all of the height given by this property may be available to the window itself. Widgets such as taskbars or other special application windows that integrate with the OS (e.g., the Spinner player minimized to act like an additional toolbar on windows) may reduce the amount of space available to browser windows and other applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2b06decd373e40670819324fc902e6dd7c7aa5b" translate="yes" xml:space="preserve">
          <source>Note that not all of the width given by this property may be available to the window itself. When other widgets occupy space that cannot be used by the &lt;code&gt;window&lt;/code&gt; object, there is a difference in &lt;code&gt;window.screen.width&lt;/code&gt; and &lt;code&gt;window.screen.availWidth&lt;/code&gt;. See also &lt;a href=&quot;height&quot;&gt;&lt;code&gt;screen.height&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d83d9c3d6d53aa3632474191c53b7f1d29e8296" translate="yes" xml:space="preserve">
          <source>Note that popups can only access the window that opened them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="653de3154edaef52f34a90a476f6afe84556489c" translate="yes" xml:space="preserve">
          <source>Note that properties which are objects (e.g.,. for overriding the prototype of built-in elements) are listed in a separate section below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a604a432511b2eb7b6b9df77c74c90f1e169ca8" translate="yes" xml:space="preserve">
          <source>Note that remote URLs won't load immediately. When &lt;code&gt;window.open()&lt;/code&gt; returns, the window always contains &lt;code&gt;about:blank&lt;/code&gt;. The actual fetching of the URL is deferred and starts after the current script block finishes executing. The window creation and the loading of the referenced resource are done asynchronously.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42224e63555b9292720a3be707eb424fef5480be" translate="yes" xml:space="preserve">
          <source>Note that some hardware may only support positive values in the range 0 to 1. For hardware that does not support tangential pressure, the value will be 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e08544604f924fb9189cf1a8c839a0f98d1067d6" translate="yes" xml:space="preserve">
          <source>Note that some speech recognition services may support built-in grammars that can be specified by URI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f3b9c971cbfb14ae21fccc6b3ff251b3c21f557" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;methodDetails&lt;/code&gt; property is being used by the &lt;code&gt;calculateDiscount()&lt;/code&gt; function to compute any payment discount, then &lt;a href=&quot;../paymentrequestupdateevent/updatewith&quot;&gt;&lt;code&gt;updateWith()&lt;/code&gt;&lt;/a&gt; is called to update the event with the computed update.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c96db6682ede3752278469df83586bc80246d0e" translate="yes" xml:space="preserve">
          <source>Note that the JavaScript function that paints the client rects is connected to the markup via css class &quot;withClientRectsOverlay&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8d4235458a8f268878677bd28cba7681e5c9326" translate="yes" xml:space="preserve">
          <source>Note that the MASK bit is set in our message. This means that the next four bytes (61, 84, 35, and 6) are the mask bytes used to decode the message. These bytes change with every message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a87612975ea5ef03ef8e04516eafe289dc58d559" translate="yes" xml:space="preserve">
          <source>Note that the call to console.counterReset() resets the value of the default counter to zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="736a9a96939859fe830aa462bcf9a72947bf586e" translate="yes" xml:space="preserve">
          <source>Note that the latest spec now dictates that &lt;a href=&quot;../datatransfer/types&quot;&gt;&lt;code&gt;DataTransfer.types&lt;/code&gt;&lt;/a&gt; should return a frozen array of &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt;s rather than a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/DOMStringList&quot;&gt;&lt;code&gt;DOMStringList&lt;/code&gt;&lt;/a&gt; (this is supported in Firefox 52 and above).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a35acf991a94fc9bccc9c6f8d30ccea9707b70d" translate="yes" xml:space="preserve">
          <source>Note that the maximum precision of suspension is the size of the render quantum and the specified suspension time will be rounded down to the nearest render quantum boundary. For this reason, it is not allowed to schedule multiple suspends at the same quantized frame. Also scheduling should be done while the context is not running to ensure the precise suspension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1532fd6e2fda91eab123eb8b7c894e1b0252417a" translate="yes" xml:space="preserve">
          <source>Note that the recording may also stop naturally if the media stream ends (e.g. if you were grabbing a song track and the track ended, or the user stopped sharing their microphone).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40dbe063d135554e2df5e690ecc9b8ddd7054a8d" translate="yes" xml:space="preserve">
          <source>Note that there are many other strategies for writing and accessing shader source code strings. These example are for illustration purposes only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="666206ba8c80bf3989ee6d526fd5b75bf8fb8447" translate="yes" xml:space="preserve">
          <source>Note that there are two different types of readable stream. As well as the conventional readable stream there is a type called a byte stream &amp;mdash; this is an extended version of a conventional stream for reading underlying byte sources (otherwise known as BYOB, or &amp;ldquo;bring your own buffer&amp;rdquo;) sources. These allow streams to be read straight into a buffer supplied by the developer, minimizing the copying required. Which underlying stream (and by extension, reader and controller) your code will use depends on how the stream was created in the first place (see the &lt;a href=&quot;../readablestream/readablestream&quot;&gt;&lt;code&gt;ReadableStream.ReadableStream()&lt;/code&gt;&lt;/a&gt; constructor page).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b48e4a4fe8d55b71c57970236e6f425e58930d9e" translate="yes" xml:space="preserve">
          <source>Note that these option flags currently don't have any useful meaning when used in the scope of Web content, where security precautions prevent the creation of new files or the replacement of existing ones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33cc0084680defd658812b3a50ea2aace160139e" translate="yes" xml:space="preserve">
          <source>Note that these values must be used exactly as listed above. For example, setting the &lt;a href=&quot;../datatransfer/effectallowed&quot;&gt;&lt;code&gt;effectAllowed&lt;/code&gt;&lt;/a&gt; property to &lt;code&gt;copyMove&lt;/code&gt; allows a copy or move operation but prevents the user from performing a link operation. If you don't change the &lt;a href=&quot;../datatransfer/effectallowed&quot;&gt;&lt;code&gt;effectAllowed&lt;/code&gt;&lt;/a&gt; property, then any operation is allowed, just like with the 'all' value. So you don't need to adjust this property unless you want to exclude specific types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f17d21ca8526fa365e79dfa9eca15d34b216df9" translate="yes" xml:space="preserve">
          <source>Note that this algorithm doesn't carry any information about the person owning the data, nor its unicity: the mere knowledge of the key is enough to alter the data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a859dc91fc9807e9833444c51263538857cfa88" translate="yes" xml:space="preserve">
          <source>Note that this method must be called only from a &lt;code&gt;VersionChange&lt;/code&gt; transaction mode callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5bf7303a907a1ff0abde6bc648c856c41f33e16" translate="yes" xml:space="preserve">
          <source>Note that this method must be called only from a &lt;code&gt;VersionChange&lt;/code&gt; transaction mode callback. Note that this method synchronously modifies the &lt;a href=&quot;indexnames&quot;&gt;&lt;code&gt;IDBObjectStore.indexNames&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82ffb73af125ffe88ac04fce4d7790e7ee7bdab2" translate="yes" xml:space="preserve">
          <source>Note that this method was once removed from the File API specification, but re-introduced for backward compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a112b30e11564643e5e348a9092978ced1d2156" translate="yes" xml:space="preserve">
          <source>Note that this sample checks to be sure &lt;a href=&quot;../htmlmediaelement/audiotracks&quot;&gt;&lt;code&gt;HTMLMediaElement.audioTracks&lt;/code&gt;&lt;/a&gt; is defined, to avoid failing on browsers without support for &lt;a href=&quot;../audiotrack&quot;&gt;&lt;code&gt;AudioTrack&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08a3fb9aeb88ec8360e836b7bdc601853d0a4e5f" translate="yes" xml:space="preserve">
          <source>Note that this sample checks to be sure &lt;a href=&quot;../htmlmediaelement/videotracks&quot;&gt;&lt;code&gt;HTMLMediaElement.videoTracks&lt;/code&gt;&lt;/a&gt; is defined, to avoid failing on browsers without support for &lt;a href=&quot;../videotrack&quot;&gt;&lt;code&gt;VideoTrack&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8934edad304c038c166787a12f756cbf00ea16f" translate="yes" xml:space="preserve">
          <source>Note that this version of &lt;code&gt;namedItem()&lt;/code&gt; hides the one inherited from &lt;a href=&quot;../htmlcollection&quot;&gt;&lt;code&gt;HTMLCollection&lt;/code&gt;&lt;/a&gt;. Like that one, in JavaScript, using the array bracket syntax with a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;, like &lt;code&gt;&lt;em&gt;collection&lt;/em&gt;[&quot;value&quot;]&lt;/code&gt; is equivalent to &lt;code&gt;&lt;em&gt;collection&lt;/em&gt;.namedItem(&quot;value&quot;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a80886fde36864159d0a4b1104ddd2689223ed57" translate="yes" xml:space="preserve">
          <source>Note that transactions are started when the transaction is created, not when the first request is placed; for example consider this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="158dd9a80b58762032c9ae3180a1b190c28969a4" translate="yes" xml:space="preserve">
          <source>Note that using a selection object as the argument to &lt;code&gt;window.alert&lt;/code&gt; will call the object's &lt;code&gt;toString&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cfdde20cb9081bd81ce78b1becdf737ff1a5df9" translate="yes" xml:space="preserve">
          <source>Note that we also gave each list item containing controller information a class name of &lt;code&gt;gamepad&lt;/code&gt;. We'll explain what this is for later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f14a6b003b636f196243d1a672e9718312eabca" translate="yes" xml:space="preserve">
          <source>Note that when &lt;code&gt;noopener&lt;/code&gt; is used, nonempty target names other than &lt;code&gt;_top&lt;/code&gt;, &lt;code&gt;_self&lt;/code&gt;, and &lt;code&gt;_parent&lt;/code&gt; are all treated like &lt;code&gt;_blank&lt;/code&gt; in terms of deciding whether to open a new window/tab.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8d87367526dbed410ff6daf2cd3c3faef993a5a" translate="yes" xml:space="preserve">
          <source>Note that when &lt;code&gt;statechange&lt;/code&gt; fires, the service worker's references may have changed. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24ba2cdca37d993c68ed3ed629c09001c803f668" translate="yes" xml:space="preserve">
          <source>Note that when an element is made draggable, text or other elements within it can no longer be selected in the normal way by clicking and dragging with the mouse. Instead, the user must hold down the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="934541ee18e78bf29c42f602b408b7265fdf02de" translate="yes" xml:space="preserve">
          <source>Note that when the VR display is not presenting, &lt;a href=&quot;../vrdisplay/requestanimationframe&quot;&gt;&lt;code&gt;VRDisplay.requestAnimationFrame&lt;/code&gt;&lt;/a&gt; runs identically to &lt;a href=&quot;../window/requestanimationframe&quot;&gt;&lt;code&gt;Window.requestAnimationFrame&lt;/code&gt;&lt;/a&gt;, so if you wanted, you could just use a single rendering loop, rather than the two we are using in our app. We have used two because we wanted to do slightly different things depending on whether the VR display is presenting or not, and keep things separated for ease of comprehension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bffa6b048d6e270f6d23d747f2d223e2ec31f53" translate="yes" xml:space="preserve">
          <source>Note that you can also change style of an element by getting a reference to it and then use its &lt;code&gt;&lt;a href=&quot;../element/setattribute&quot;&gt;setAttribute&lt;/a&gt;&lt;/code&gt; method to specify the CSS property and its value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="053c24bde5ccec71ddfb4dcdf7208283ca8628ae" translate="yes" xml:space="preserve">
          <source>Note that you can speed up data access by limiting the scope and mode in the transaction. Here are a couple of tips:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b5769b04ec057e4bbacff71a9e478f784dd4966" translate="yes" xml:space="preserve">
          <source>Note that you can't attach a shadow root to every type of element. There are some that can't have a shadow DOM for security reasons (for example &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a&quot;&gt;&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;&lt;/a&gt;), and more besides. The following is a list of elements you &lt;code&gt;can&lt;/code&gt; attach a shadow root to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f11aacdcb91bfc4e220d105bea0fa0b5bd549c3" translate="yes" xml:space="preserve">
          <source>Note that you cannot change primary keys using &lt;code&gt;cursor.update()&lt;/code&gt;, hence us not changing the album title; this would ruin the integrity of the data. In such a situation, you would have to delete the record altogether and then add a new one using &lt;a href=&quot;../idbobjectstore/add&quot;&gt;&lt;code&gt;IDBObjectStore.add&lt;/code&gt;&lt;/a&gt;. Note also that you can't directly put &lt;code&gt;cursor.value&lt;/code&gt; into an update call, hence the below example using an intermediary &lt;code&gt;updateData&lt;/code&gt; variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c795024f38efb32cc4339e6f7f95d89f655263b" translate="yes" xml:space="preserve">
          <source>Note that you could also pass the init object in with the &lt;code&gt;Request&lt;/code&gt; constructor to get the same effect, e.g.:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dc8e4f9c59887bc0a07481f288e540ec99def05" translate="yes" xml:space="preserve">
          <source>Note that you could also pass the init object into the &lt;code&gt;fetch&lt;/code&gt; call to get the same effect, e.g.:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e52308f3bf28b64e8ad683b7e5c4aa2f4ff7f67" translate="yes" xml:space="preserve">
          <source>Note that, vendor prefix have been discouraged more and more and thus most browser implement experimental extensions behind a feature flag rather than vendor prefix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="355babcbab609316b681bfbfeb82716399bc8e1c" translate="yes" xml:space="preserve">
          <source>Note that, while a string containing a substitution string works as a parameter for &lt;code&gt;console.log&lt;/code&gt; in Node and many, if not most, browsers...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0b90f262a182b96e6ed42ab0d477e74f2f8f85e" translate="yes" xml:space="preserve">
          <source>Note the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/mozGetDataAt&quot;&gt;&lt;code&gt;mozGetDataAt()&lt;/code&gt;&lt;/a&gt; method is used for non-text data. As some contexts may only include some of these types, it is important to check which type is made available when receiving dropped images.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1309f7a5d80a9de0f3936b5e81d65477e9fcf3d" translate="yes" xml:space="preserve">
          <source>Note the final line of log output: the separate call to &lt;code&gt;count()&lt;/code&gt; at line 11 is treated as an independent event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acd2d1fdbf6f9306a9c92051f7bf5dcc1e5899cc" translate="yes" xml:space="preserve">
          <source>Note the minus value on our z orientation &amp;mdash; this sets the boombox to face us. A positive value would set the sound source facing away from us.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83450008e458cbc33859e22b1ffcd7ac9d505ec1" translate="yes" xml:space="preserve">
          <source>Note the order in which we created the elements and the text node:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50392d25ee5e027a9fc5fe44cd0a47530e3fcdbd" translate="yes" xml:space="preserve">
          <source>Note the presence of the value &quot;bold&quot; for font-weight in the computed style and the absence of it in the element's style property</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb4657a503cc417730003f39b21ca3fb82c6b701" translate="yes" xml:space="preserve">
          <source>Note the retro cassette deck with a play button, and vol and pan sliders to allow you to alter the volume and stereo panning. We could make this a lot more complex, but this is ideal for simple learning at this stage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1120f0abbbdcb647619cf1685acc4a7c313bc221" translate="yes" xml:space="preserve">
          <source>Note the use of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord/oldValue&quot;&gt;&lt;code&gt;MutationRecord.oldValue&lt;/code&gt;&lt;/a&gt; to get the previous value of the &lt;code&gt;&quot;username&quot;&lt;/code&gt; property so we have that information when doing lookups in our local array of users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5e12bed112d63efca125674913feda92a29709c" translate="yes" xml:space="preserve">
          <source>Note there is no way to be certain, from the information received by the &lt;code&gt;loadend&lt;/code&gt; event, as to which condition caused the operation to terminate; however, you can use this to handle tasks that need to be performed in all end-of-transfer scenarios.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="146917e62798f7e509e465039ce30081165b8f23" translate="yes" xml:space="preserve">
          <source>Note, in the above example, a more verbose XPath is preferred over common shortcuts such as &lt;code&gt;//h2&lt;/code&gt;. Generally, more specific XPath selectors as in the above example usually gives a significant performance improvement, especially on very large documents. This is because the evaluation of the query spends does not waste time visiting unnecessary nodes. Using // is generally slow as it visits &lt;em&gt;every&lt;/em&gt; node from the root and all subnodes looking for possible matches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b9a83783c62543c36d3976746444b99843e1e41" translate="yes" xml:space="preserve">
          <source>Note: &lt;a href=&quot;../html_drag_and_drop_api&quot;&gt;&lt;code&gt;HTML drag and drop&lt;/code&gt;&lt;/a&gt; defines two different APIs to support dragging and dropping files. One API is the &lt;a href=&quot;../datatransfer&quot;&gt;&lt;code&gt;DataTransfer&lt;/code&gt;&lt;/a&gt; interface and the second API is the &lt;a href=&quot;../datatransferitem&quot;&gt;&lt;code&gt;DataTransferItem&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../datatransferitemlist&quot;&gt;&lt;code&gt;DataTransferItemList&lt;/code&gt;&lt;/a&gt; interfaces. This example illustrates the use of both APIs (and does not use any Gecko specific interfaces).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00b15d4b96db282bb08e15a2d8812959e208634d" translate="yes" xml:space="preserve">
          <source>Note: &lt;em&gt;&lt;code&gt;value&lt;/code&gt;&lt;/em&gt; must not contain &lt;code&gt;&quot;!important&quot;&lt;/code&gt; -- that should be set using the &lt;em&gt;&lt;code&gt;priority&lt;/code&gt;&lt;/em&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e96e97ff72d0d527ebc7bb83458b4ce8a27f40e2" translate="yes" xml:space="preserve">
          <source>Note: Because there are no native tools to convert between Uint8Array, Unicode, hex, and base64, you'll probably want to use something like &lt;a href=&quot;https://github.com/coolaj86/unibabel-js&quot;&gt;Unibabel&lt;/a&gt; or &lt;a href=&quot;https://github.com/feross/buffer&quot;&gt;Buffer&lt;/a&gt; to convert between them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3daaae13bc50d3d54f37f99865157062d90425a0" translate="yes" xml:space="preserve">
          <source>Note: Can no longer be set directly, as &lt;a href=&quot;https://www.w3.org/TR/cssom-1/#changes-from-5-december-2013&quot;&gt;now specified&lt;/a&gt; to be &lt;em&gt;functionally&lt;/em&gt; modify-only -- and *&lt;strong&gt;silently&lt;/strong&gt;* so -- meaning that attempting to set it does absolutely *&lt;strong&gt;nothing*&lt;/strong&gt; -- not even warn or error. Further, it has no settable sub-properties. Therefore, to modify, use the stylesheet's &lt;a href=&quot;../cssrulelist&quot;&gt;&lt;code&gt;cssRules&lt;/code&gt;&lt;/a&gt;[&lt;em&gt;index&lt;/em&gt;] properties &lt;a href=&quot;../cssstylerule/selectortext&quot;&gt;&lt;code&gt;.selectorText&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../cssstylerule/style&quot;&gt;&lt;code&gt;.style&lt;/code&gt;&lt;/a&gt; (or its sub-properties). See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/Using_dynamic_styling_information&quot;&gt;Using dynamic styling information&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4972aa1cf6210f1f87a3bbdf2bd460fe20b7925f" translate="yes" xml:space="preserve">
          <source>Note: If the &lt;code&gt;SVGNumber&lt;/code&gt; is read-only, a &lt;a href=&quot;domexception&quot;&gt;&lt;code&gt;DOMException&lt;/code&gt;&lt;/a&gt; with the code NO_MODIFICATION_ALLOWED_ERR is raised on an attempt to change the value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc5d14365761c559a5feb2d172f0a9b6140436a7" translate="yes" xml:space="preserve">
          <source>Note: In Internet Explorer contenteditable cannot be applied to the TABLE, COL, COLGROUP, TBODY, TD, TFOOT, TH, THEAD, and TR elements directly. A content editable SPAN, or DIV element can be placed inside the individual table cells.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8f2ec93a72a0ad938882a95d324be4b94d0586a" translate="yes" xml:space="preserve">
          <source>Note: Internet Explorer 6-8 didn't support this method, offering a similar &lt;a href=&quot;../eventtarget/addeventlistener&quot;&gt;&lt;code&gt;EventTarget.attachEvent&lt;/code&gt;&lt;/a&gt; API instead. For cross-browser compatibility use one of the many JavaScript libraries available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="735e795085c9cdc78070bb2f0f26862508fd315e" translate="yes" xml:space="preserve">
          <source>Note: Returns the query string without the question mark. This is different from &lt;a href=&quot;../htmlhyperlinkelementutils/search&quot;&gt;window.location.search&lt;/a&gt; which includes it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05bc2f8e8c54436ede085b24334fe306ec9fda5c" translate="yes" xml:space="preserve">
          <source>Note: The &lt;code&gt;StereoPannerNode&lt;/code&gt; is for simple cases in which you just want stereo panning from left to right. There is also a &lt;a href=&quot;../pannernode&quot;&gt;&lt;code&gt;PannerNode&lt;/code&gt;&lt;/a&gt;, which allows for a great deal of control over 3D space, or sound &lt;em&gt;spatialisation&lt;/em&gt;, for creating more complex effects. This is used in games and 3D apps to create birds flying overhead, or sound coming from behind the user for instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39e9321841c8efc74e29ed1e60778a45703e5ab8" translate="yes" xml:space="preserve">
          <source>Note: The CustomElementRegistry is available through the &lt;a href=&quot;window/customelements&quot;&gt;&lt;code&gt;Window.customElements&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16845f9d066bdd617cdcf28c6f7d01a1e91fc973" translate="yes" xml:space="preserve">
          <source>Note: The identifiers &quot;&lt;code&gt;experimental-webgl&lt;/code&gt;&quot; or &quot;&lt;code&gt;experimental-webgl2&lt;/code&gt;&quot; are also used in implementations of WebGL. These implementation have not reached test suite conformance or the graphic drivers situation on the platform is not yet stable. The &lt;a href=&quot;https://www.khronos.org/&quot;&gt;Khronos Group&lt;/a&gt; certifies WebGL implementations under certain &lt;a href=&quot;https://www.khronos.org/registry/webgl/sdk/tests/CONFORMANCE_RULES.txt&quot;&gt;conformance rules&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a548205b2d5e65b5db987a6b6d6a2aafd344c678" translate="yes" xml:space="preserve">
          <source>Note: This definition describes the &lt;a href=&quot;http://dvcs.w3.org/hg/IndexedDB/raw-file/tip/Overview.html&quot;&gt;most recent specification&lt;/a&gt;, which is only implemented in up-to-date browsers. Old browsers implemented the now deprecated and removed &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/IndexedDB/IDBDatabase#setVersion()&quot;&gt;&lt;code&gt;IDBDatabase.setVersion()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce8670ecef5cf9473e4dd233a1b2d791dc351aa4" translate="yes" xml:space="preserve">
          <source>Note: all these modes are now defined in standards, so the older &quot;standards&quot; and &quot;almost standards&quot; names are nonsensical and no longer used in standards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1fbd79bbccb78f8fce4b446f7be31d59537b975" translate="yes" xml:space="preserve">
          <source>Note: as a security feature, any WebAuthn calls (i.e. - create() or get() ) will be cancelled if the browser window loses focus while the call is pending.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ca653b74c96e5cdd9198a2a0a70f5a52ca083c1" translate="yes" xml:space="preserve">
          <source>Note: if the performance entry has an &lt;a href=&quot;entrytype&quot;&gt;&lt;code&gt;entryType&lt;/code&gt;&lt;/a&gt; of &quot;&lt;code&gt;resource&lt;/code&gt;&quot; (i.e. the entry is a &lt;a href=&quot;../performanceresourcetiming&quot;&gt;&lt;code&gt;PerformanceResourceTiming&lt;/code&gt;&lt;/a&gt; object), this property returns the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/fetchStart&quot;&gt;&lt;code&gt;PerformanceEntry.fetchStart&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../domhighrestimestamp&quot;&gt;&lt;code&gt;timestamp&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d4f2235de820ba64b8d214116ab311afcaf8375" translate="yes" xml:space="preserve">
          <source>Note: if the performance entry has an &lt;a href=&quot;entrytype&quot;&gt;&lt;code&gt;entryType&lt;/code&gt;&lt;/a&gt; of &quot;&lt;code&gt;resource&lt;/code&gt;&quot; (i.e. the entry is a &lt;a href=&quot;../performanceresourcetiming&quot;&gt;&lt;code&gt;PerformanceResourceTiming&lt;/code&gt;&lt;/a&gt; object), this property returns the difference between the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/responseEnd&quot;&gt;&lt;code&gt;PerformanceEntry.responseEnd&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;starttime&quot;&gt;&lt;code&gt;PerformanceEntry.startTime&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../domhighrestimestamp&quot;&gt;&lt;code&gt;timestamps&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd7c413da54588171655f0dfa8f902197f882ef6" translate="yes" xml:space="preserve">
          <source>Note: in older code, you may also encounter the &lt;code&gt;text/unicode&lt;/code&gt; or the &lt;code&gt;Text&lt;/code&gt; types. These are both equivalent to &lt;code&gt;text/plain&lt;/code&gt; and will store and retrieve the plain text data instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c2f061c7a2219a9a04ec374ae639b0f23df3d51" translate="yes" xml:space="preserve">
          <source>Note: the &lt;a href=&quot;dragevent&quot;&gt;&lt;code&gt;DragEvent&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;datatransfer&quot;&gt;&lt;code&gt;DataTransfer&lt;/code&gt;&lt;/a&gt; interfaces are broadly interoperable with desktop browsers. However, the &lt;a href=&quot;datatransferitem&quot;&gt;&lt;code&gt;DataTransferItem&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;datatransferitemlist&quot;&gt;&lt;code&gt;DataTransferItemList&lt;/code&gt;&lt;/a&gt; interfaces have limited browser support. See &lt;a href=&quot;#Interoperability&quot;&gt;Interoperability&lt;/a&gt; for more information about drag and drop interoperability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fa061aef6a3072f739a21d9d1f65d4bc381a7b2" translate="yes" xml:space="preserve">
          <source>Note: the URL type is &lt;code&gt;ur&lt;strong&gt;i&lt;/strong&gt;-list&lt;/code&gt; with an 'I', not with an 'L'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bfd808c530270de0757aabc2ec2f3372cb17434" translate="yes" xml:space="preserve">
          <source>Note: this interface is exposed to &lt;a href=&quot;window&quot;&gt;&lt;code&gt;Window&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70440046a3dc2e079f23ee1c57dfa76669b732aa" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="translated">Notes</target>
        </trans-unit>
        <trans-unit id="96ee6e72dabd70e063c79b3bffd6a100b600db28" translate="yes" xml:space="preserve">
          <source>Notes and example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4447fe92ea7950fdc52d99177c8b20d92e060fa" translate="yes" xml:space="preserve">
          <source>Notes on the resulting XML</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89f86994ebe0f991afd5d357bf8a29968fd7a7c9" translate="yes" xml:space="preserve">
          <source>Nothing special here, the ball is actually a simple circle and gets drawn with the help of the &lt;a href=&quot;../../canvasrenderingcontext2d/arc&quot;&gt;&lt;code&gt;arc()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e0d46931beb26da5de28f108256673eff6d88a7" translate="yes" xml:space="preserve">
          <source>Notice how in the main script, &lt;code&gt;onmessage&lt;/code&gt; has to be called on &lt;code&gt;myWorker&lt;/code&gt;, whereas inside the worker script you just need &lt;code&gt;onmessage&lt;/code&gt; because the worker is effectively the global scope (&lt;a href=&quot;../dedicatedworkerglobalscope&quot;&gt;&lt;code&gt;DedicatedWorkerGlobalScope&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d53cde9be511674e89b5f820b038735d6fc6ee0" translate="yes" xml:space="preserve">
          <source>Notice how in the main script, &lt;code&gt;onmessage&lt;/code&gt; has to be called on &lt;code&gt;myWorker&lt;/code&gt;, whereas inside the worker script you just need &lt;code&gt;onmessage&lt;/code&gt; because the worker is effectively the global scope (the &lt;a href=&quot;../dedicatedworkerglobalscope&quot;&gt;&lt;code&gt;DedicatedWorkerGlobalScope&lt;/code&gt;&lt;/a&gt;, in this case).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="979498b8cf011e9a63549b96fec6e4313d9ab6c9" translate="yes" xml:space="preserve">
          <source>Notice how the &lt;code&gt;&quot;div span&quot;&lt;/code&gt; selector still successfully matches the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span&quot;&gt;&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;&lt;/a&gt; element, even though the &lt;code&gt;baseElement&lt;/code&gt;'s child nodes do not include the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Div&quot;&gt;&lt;code&gt;div&lt;/code&gt;&lt;/a&gt; element (it is still part of the specified selector).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5919eb5c64a17fc6cac595e1df67e34d91dc98d0" translate="yes" xml:space="preserve">
          <source>Notice how the matrix and points line up:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f02c4e90ddfd675c7451d4ba0ba8783f0945591" translate="yes" xml:space="preserve">
          <source>Notice in the above &lt;code&gt;document.body&lt;/code&gt; has been used as the context instead of &lt;code&gt;document&lt;/code&gt; so the XPath starts from the body element. (In this example, the &lt;code&gt;&quot;.&quot;&lt;/code&gt; is important to indicate that the querying should start from the context node, document.body. If the &quot;.&quot; was left out (leaving &lt;code&gt;//h2&lt;/code&gt;) the query would start from the root node (&lt;code&gt;html&lt;/code&gt;) which would be more wasteful.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="716daa428173cbc3c57d103b5b4c9a01cf9ee633" translate="yes" xml:space="preserve">
          <source>Notice that both functions use a lock called &lt;code&gt;my_resource&lt;/code&gt;. The &lt;code&gt;do_read()&lt;/code&gt; requests a lock in &lt;code&gt;'shared'&lt;/code&gt; mode meaning that multiple calls may occur simultaneously across different event handlers, tabs, or workers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e36eff9ee54f860dfa2bd1737f01e936fe84579" translate="yes" xml:space="preserve">
          <source>Notice that only the &lt;code&gt;urls&lt;/code&gt; property is provided; the STUN server doesn't require authentication, so this is all that's needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f982a9e4fb1b9f5e21bd77306995a79b42a07141" translate="yes" xml:space="preserve">
          <source>Notice that the background moves, Alice spins, and her color changes at an offset from her spinning. We&amp;rsquo;re going to focus on just Alice for this tutorial. Here&amp;rsquo;s the simplified CSS that controls Alice&amp;rsquo;s animation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4ff6c9e09d16bebdfa5ff3d26f5fbc715b5b231" translate="yes" xml:space="preserve">
          <source>Notice that the listener is an anonymous function that encapsulates code that is then, in turn, able to send parameters to the &lt;code&gt;modifyText()&lt;/code&gt; function, which is responsible for actually responding to the event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ec0e1dc19072dc66b54dc658cab90547bcb125b" translate="yes" xml:space="preserve">
          <source>Notice that the timer's name is displayed both when the timer is started and when it's stopped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21859f671ca4276d2868835c9ce3d7152853a28e" translate="yes" xml:space="preserve">
          <source>Notice that the timer's name is displayed when the timer value is logged using &lt;code&gt;timeLog()&lt;/code&gt; and again when it's stopped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7109038e08709ed60f30be922d1dbf7bbe168ab8" translate="yes" xml:space="preserve">
          <source>Notice that we log &lt;code&gt;response.bodyUsed&lt;/code&gt; to the console once before the &lt;code&gt;response.blob()&lt;/code&gt; call and once after. This returns &lt;code&gt;false&lt;/code&gt; before and &lt;code&gt;true&lt;/code&gt; afterwards, as at that point the body has been read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92148f80968f48c98444af620396b939ecd977f5" translate="yes" xml:space="preserve">
          <source>Notice the addition of code to handle the &quot;timeout&quot; event by setting the &lt;code&gt;ontimeout&lt;/code&gt; handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8534d6bdca397dc5c3b939e3b5c3f62bca95e06" translate="yes" xml:space="preserve">
          <source>Notice the difference between &lt;em&gt;selection&lt;/em&gt; and &lt;em&gt;focus&lt;/em&gt;. &lt;a href=&quot;../documentorshadowroot/activeelement&quot;&gt;&lt;code&gt;Document.activeElement&lt;/code&gt;&lt;/a&gt; returns the focused element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd4fef5bda50d87dcc453401a37d7219fe38c626" translate="yes" xml:space="preserve">
          <source>Notice the difference between &lt;em&gt;selection&lt;/em&gt; and &lt;em&gt;focus&lt;/em&gt;. &lt;a href=&quot;activeelement&quot;&gt;&lt;code&gt;Document.activeElement&lt;/code&gt;&lt;/a&gt; returns the focused element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28d1118d527e74e934cdb34a0f0e0906244a4c05" translate="yes" xml:space="preserve">
          <source>Notice the first frame contains an entire message (has &lt;code&gt;FIN=1&lt;/code&gt; and &lt;code&gt;opcode!=0x0&lt;/code&gt;), so the server can process or respond as it sees fit. The second frame sent by the client has a text payload (&lt;code&gt;opcode=0x1&lt;/code&gt;), but the entire message has not arrived yet (&lt;code&gt;FIN=0&lt;/code&gt;). All remaining parts of that message are sent with continuation frames (&lt;code&gt;opcode=0x0&lt;/code&gt;), and the final frame of the message is marked by &lt;code&gt;FIN=1&lt;/code&gt;. &lt;a href=&quot;http://tools.ietf.org/html/rfc6455#section-5.4&quot;&gt;Section 5.4 of the spec&lt;/a&gt; describes message fragmentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcfc5d22f129ec8d36bcc77a226461c53ccc858f" translate="yes" xml:space="preserve">
          <source>Notice what happens when you hover your mouse cursor over the box, then move it away.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="217f272cad3c55ef98ec676c0f4002e701cd8c6a" translate="yes" xml:space="preserve">
          <source>Notice:</source>
          <target state="translated">Notice:</target>
        </trans-unit>
        <trans-unit id="c18f8f255ab9c208f23d0340eb9dff5a84efe311" translate="yes" xml:space="preserve">
          <source>Notification</source>
          <target state="translated">Notification</target>
        </trans-unit>
        <trans-unit id="4ffe728f5eb9bfccc18738f7f85e30a3dd03e1bf" translate="yes" xml:space="preserve">
          <source>Notification data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2124ff5da5053607eb3f091e6d1537d829fa924b" translate="yes" xml:space="preserve">
          <source>Notification events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="416b217ee84378631f596e42c2d7002c46a17ede" translate="yes" xml:space="preserve">
          <source>Notification.actions</source>
          <target state="translated">Notification.actions</target>
        </trans-unit>
        <trans-unit id="de3d33c2e6a1d9d5bdb37bcb948d998eb916a243" translate="yes" xml:space="preserve">
          <source>Notification.badge</source>
          <target state="translated">Notification.badge</target>
        </trans-unit>
        <trans-unit id="b912b337b0a1d4907886bd985e0b61b2a804bed1" translate="yes" xml:space="preserve">
          <source>Notification.body</source>
          <target state="translated">Notification.body</target>
        </trans-unit>
        <trans-unit id="a24d80ce946b42b6be40bd96ce7034dda4291296" translate="yes" xml:space="preserve">
          <source>Notification.close</source>
          <target state="translated">Notification.close</target>
        </trans-unit>
        <trans-unit id="e9eba895ec1b8f8739001472f74acfa002bd663b" translate="yes" xml:space="preserve">
          <source>Notification.constructor</source>
          <target state="translated">Notification.constructor</target>
        </trans-unit>
        <trans-unit id="ee0beeda9cdf6795ed44b956e91c1cdb62e6c44c" translate="yes" xml:space="preserve">
          <source>Notification.data</source>
          <target state="translated">Notification.data</target>
        </trans-unit>
        <trans-unit id="112f2022415b41a0455ff390dc7beb803539467e" translate="yes" xml:space="preserve">
          <source>Notification.dir</source>
          <target state="translated">Notification.dir</target>
        </trans-unit>
        <trans-unit id="90d7cbf1b35a6188c3f54c7e74ba0409c462f2d8" translate="yes" xml:space="preserve">
          <source>Notification.icon</source>
          <target state="translated">Notification.icon</target>
        </trans-unit>
        <trans-unit id="5ed1e2072ef4e6845fe332e0e55d80e4a6b1ae98" translate="yes" xml:space="preserve">
          <source>Notification.image</source>
          <target state="translated">Notification.image</target>
        </trans-unit>
        <trans-unit id="76858d6ab5fa2bc8a0ae5423b0aa99486cfe0d1c" translate="yes" xml:space="preserve">
          <source>Notification.lang</source>
          <target state="translated">Notification.lang</target>
        </trans-unit>
        <trans-unit id="93be4dea3f49d5f626689e764b9b127e9e8de3e5" translate="yes" xml:space="preserve">
          <source>Notification.onclick</source>
          <target state="translated">Notification.onclick</target>
        </trans-unit>
        <trans-unit id="5995b9d06502c15d14863af6d61e1e64fdb6e7db" translate="yes" xml:space="preserve">
          <source>Notification.onclose</source>
          <target state="translated">Notification.onclose</target>
        </trans-unit>
        <trans-unit id="507252282bff152d69179f35146230cd1cecbf4a" translate="yes" xml:space="preserve">
          <source>Notification.onerror</source>
          <target state="translated">Notification.onerror</target>
        </trans-unit>
        <trans-unit id="4d17df4cf14232c2cbacb0739db2e3db71c9b64a" translate="yes" xml:space="preserve">
          <source>Notification.onshow</source>
          <target state="translated">Notification.onshow</target>
        </trans-unit>
        <trans-unit id="5f3c3896e0f2db60a58ca287b53ab5b1507f39ea" translate="yes" xml:space="preserve">
          <source>Notification.permission</source>
          <target state="translated">Notification.permission</target>
        </trans-unit>
        <trans-unit id="26ce8fdea6d7222098864ef1ad3a81f182fc658b" translate="yes" xml:space="preserve">
          <source>Notification.renotify</source>
          <target state="translated">Notification.renotify</target>
        </trans-unit>
        <trans-unit id="b7f44fe699999fb99062749f99e905ba7c540b61" translate="yes" xml:space="preserve">
          <source>Notification.requestPermission</source>
          <target state="translated">Notification.requestPermission</target>
        </trans-unit>
        <trans-unit id="705638f4f99bfe262e0c1183b4d05bfc65793625" translate="yes" xml:space="preserve">
          <source>Notification.requireInteraction</source>
          <target state="translated">Notification.requireInteraction</target>
        </trans-unit>
        <trans-unit id="fc883c7a9eb266ea1c90520e54e82d7fd4522c98" translate="yes" xml:space="preserve">
          <source>Notification.silent</source>
          <target state="translated">Notification.silent</target>
        </trans-unit>
        <trans-unit id="bfa81658a27e884b0dcea6109785374d60fe5aa5" translate="yes" xml:space="preserve">
          <source>Notification.tag</source>
          <target state="translated">Notification.tag</target>
        </trans-unit>
        <trans-unit id="856026ce015952b62e9b7be3382847009ff9a7b5" translate="yes" xml:space="preserve">
          <source>Notification.timestamp</source>
          <target state="translated">Notification.timestamp</target>
        </trans-unit>
        <trans-unit id="459b3e0ae44bc41b0837c13fc4f81c506516d992" translate="yes" xml:space="preserve">
          <source>Notification.title</source>
          <target state="translated">Notification.title</target>
        </trans-unit>
        <trans-unit id="cfcea37748b97d167c115d0462dc201a242573f2" translate="yes" xml:space="preserve">
          <source>Notification.vibrate</source>
          <target state="translated">Notification.vibrate</target>
        </trans-unit>
        <trans-unit id="108a255d1ece653938ea6394be08d152fec8fe91" translate="yes" xml:space="preserve">
          <source>NotificationEvent</source>
          <target state="translated">NotificationEvent</target>
        </trans-unit>
        <trans-unit id="216385ca82705392b1af9ca6b51069fad0053a5d" translate="yes" xml:space="preserve">
          <source>NotificationEvent.action</source>
          <target state="translated">NotificationEvent.action</target>
        </trans-unit>
        <trans-unit id="ce5b6eb76d9eb8f2d341e6e1f1ffa23f8ac7e0a9" translate="yes" xml:space="preserve">
          <source>NotificationEvent.constructor</source>
          <target state="translated">NotificationEvent.constructor</target>
        </trans-unit>
        <trans-unit id="7292499e216616ad11ea3737d980970f0e864857" translate="yes" xml:space="preserve">
          <source>NotificationEvent.notification</source>
          <target state="translated">NotificationEvent.notification</target>
        </trans-unit>
        <trans-unit id="7b26f8df4ad2070a67a797406cddc10d6c8412c5" translate="yes" xml:space="preserve">
          <source>NotificationEventInit Optional</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f57e7904756fcc1fb24a7ff51cdbeda0b1ee8024" translate="yes" xml:space="preserve">
          <source>Notifications API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ab9dd4e2b854bc2cce9173bed13e9d4cce95a1b" translate="yes" xml:space="preserve">
          <source>Notifications API: Using the Notifications API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2e804c50fe67b46edea9fb587f21b3496e5fe47" translate="yes" xml:space="preserve">
          <source>Notifications API&lt;br/&gt;&lt;small&gt;The definition of 'Notification()' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c07ae6263def13f8fb7c6ef8950bc0229b3bf748" translate="yes" xml:space="preserve">
          <source>Notifications API&lt;br/&gt;&lt;small&gt;The definition of 'NotificationEvent' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2dc4cd73c2080dc569d56dfa436ebf0c1b15106" translate="yes" xml:space="preserve">
          <source>Notifications API&lt;br/&gt;&lt;small&gt;The definition of 'NotificationEvent()' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af54d7ab757451c4206707fa3f8227c9ec27b581" translate="yes" xml:space="preserve">
          <source>Notifications API&lt;br/&gt;&lt;small&gt;The definition of 'ServiceWorkerRegistration.getNotifications()' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4285cf9448426329b5366d4cf805a4799270ff8" translate="yes" xml:space="preserve">
          <source>Notifications API&lt;br/&gt;&lt;small&gt;The definition of 'action' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91983829c86832d6d5421dc6a3ec95ea8d9ffc66" translate="yes" xml:space="preserve">
          <source>Notifications API&lt;br/&gt;&lt;small&gt;The definition of 'actions' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="007bba37e35727b72b597a4c4d2cc42289a25bbe" translate="yes" xml:space="preserve">
          <source>Notifications API&lt;br/&gt;&lt;small&gt;The definition of 'badge' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e70b8d59981af28273eb7a5e40a9478817f779c" translate="yes" xml:space="preserve">
          <source>Notifications API&lt;br/&gt;&lt;small&gt;The definition of 'body' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f4bb7e7bd70c106b26d5582f36fe0033d1c48b2" translate="yes" xml:space="preserve">
          <source>Notifications API&lt;br/&gt;&lt;small&gt;The definition of 'data' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a88083759de29a6384476eeb608721c2b20c7f68" translate="yes" xml:space="preserve">
          <source>Notifications API&lt;br/&gt;&lt;small&gt;The definition of 'dir' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc5832f35a1e9fcfe5bed449523ca2d6c3e177c4" translate="yes" xml:space="preserve">
          <source>Notifications API&lt;br/&gt;&lt;small&gt;The definition of 'icon' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0a19ae898b823e17e50824d0a90a2dc2f555bff" translate="yes" xml:space="preserve">
          <source>Notifications API&lt;br/&gt;&lt;small&gt;The definition of 'image' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1ee6a529a9bb74d6cac16d0ba395b5040e40835" translate="yes" xml:space="preserve">
          <source>Notifications API&lt;br/&gt;&lt;small&gt;The definition of 'lang' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f3a0c183d3d050fba98464607f0d6faf9eb955d" translate="yes" xml:space="preserve">
          <source>Notifications API&lt;br/&gt;&lt;small&gt;The definition of 'notification' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7922539a9e08e59dcc9ca7466b874b355456801" translate="yes" xml:space="preserve">
          <source>Notifications API&lt;br/&gt;&lt;small&gt;The definition of 'onclick' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f553ce753719377c34e271dcb08fc00cb2f94e8" translate="yes" xml:space="preserve">
          <source>Notifications API&lt;br/&gt;&lt;small&gt;The definition of 'onerror' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea84453103f3b0b4c6952cf3b60af7961bb81d43" translate="yes" xml:space="preserve">
          <source>Notifications API&lt;br/&gt;&lt;small&gt;The definition of 'onnotificationclick' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="580c0af7f30aebd05ef3662e1d3a0297dc948cdc" translate="yes" xml:space="preserve">
          <source>Notifications API&lt;br/&gt;&lt;small&gt;The definition of 'permission' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a788e99a5a66b93c5eebb125b1b33acdb742d042" translate="yes" xml:space="preserve">
          <source>Notifications API&lt;br/&gt;&lt;small&gt;The definition of 'renotify' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0633e18b9584b95fb60e5d0d532f7952a78c5bb5" translate="yes" xml:space="preserve">
          <source>Notifications API&lt;br/&gt;&lt;small&gt;The definition of 'requireInteraction' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6b002fec0da6aedf858a71a59121a9321100b65" translate="yes" xml:space="preserve">
          <source>Notifications API&lt;br/&gt;&lt;small&gt;The definition of 'showNotification()' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c93bfd8139faae89386bad20283f202edaa39561" translate="yes" xml:space="preserve">
          <source>Notifications API&lt;br/&gt;&lt;small&gt;The definition of 'silent' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="778aabc7138e218f7cae2d7bafcc9f8157fc80e0" translate="yes" xml:space="preserve">
          <source>Notifications API&lt;br/&gt;&lt;small&gt;The definition of 'tag' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e76187e56ad876680e5401d29f133e2f2bc97b99" translate="yes" xml:space="preserve">
          <source>Notifications API&lt;br/&gt;&lt;small&gt;The definition of 'timestamp' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b7e66e26093429537cf93a89048f8fe9243dad5" translate="yes" xml:space="preserve">
          <source>Notifications API&lt;br/&gt;&lt;small&gt;The definition of 'title' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a8da6521f8779a050094d08bacd7535b426621e" translate="yes" xml:space="preserve">
          <source>Notifications API&lt;br/&gt;&lt;small&gt;The definition of 'vibrate' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c579673c5af9e4126d0c1578ad9d1bfb345a0a71" translate="yes" xml:space="preserve">
          <source>Notifications created on the main thread or in workers which aren't service workers using the &lt;a href=&quot;../notification/notification&quot;&gt;&lt;code&gt;Notification()&lt;/code&gt;&lt;/a&gt; constructor will instead receive a &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/click&quot;&gt;click&lt;/a&gt;&lt;/code&gt; event on the &lt;code&gt;Notification&lt;/code&gt; object itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93226921514c0a68c3543cf7f8335f48c8d7d8d6" translate="yes" xml:space="preserve">
          <source>Notifications created on the main thread or in workers which aren't service workers using the &lt;a href=&quot;../notification/notification&quot;&gt;&lt;code&gt;Notification()&lt;/code&gt;&lt;/a&gt; constructor will instead receive a &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; event on the &lt;code&gt;Notification&lt;/code&gt; object itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0ec621cfa8d0e3cd799be0e0f8ab07adbeed24a" translate="yes" xml:space="preserve">
          <source>Notifications interfaces</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a705463478c0740a22e3451464ec8a4ef224af2" translate="yes" xml:space="preserve">
          <source>Notifies the user agent that the user interaction is over. This causes any remaining user interface to be closed. This method should only be called after the Promise returned by the &lt;a href=&quot;paymentrequest/show&quot;&gt;&lt;code&gt;PaymentRequest.show()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f93942ee5e5802859cf005a80cf422cf952ec6b" translate="yes" xml:space="preserve">
          <source>Notifying users via the Notification and Vibration APIs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e124dceb35567aa92ad3806ce0570ff37ee8136a" translate="yes" xml:space="preserve">
          <source>Now all that's left to do is make sure we've loaded the sample before we are able to &lt;em&gt;play&lt;/em&gt; the instrument. We'll add a loading screen that disappears when the file has been fetched and decoded, then we can allow the scheduler to start using the play button click event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ce338fa7c64199d8f3faf64c4c4523c3f1fd6b7" translate="yes" xml:space="preserve">
          <source>Now all three animations are linked to just one duration, which we can change easily from one place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a95d2c24b85a76b6c78fa40ca512771dbbe3b2b" translate="yes" xml:space="preserve">
          <source>Now consider each of these two calls to &lt;code&gt;removeEventListener()&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14cc3c438cd111b5edbdb79ca344b3bcec2e585b" translate="yes" xml:space="preserve">
          <source>Now consider this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37e1ae46ff3e65b591fc02b21400a02f501e0705" translate="yes" xml:space="preserve">
          <source>Now for a real example &amp;mdash; what if we wanted to load images dynamically, but we wanted to make sure the images were loaded before we tried to display them? This is a standard thing to want to do, but it can be a bit of a pain. We can use &lt;code&gt;.onload&lt;/code&gt; to only display the image after it&amp;rsquo;s loaded, but what about events that start happening before we start listening to them? We could try to work around this using &lt;code&gt;.complete&lt;/code&gt;, but it&amp;rsquo;s still not foolproof, and what about multiple images? And, ummm, it&amp;rsquo;s still synchronous, so blocks the main thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e070ca8fea0b16aa1fbf17253aa9f6206c7b48ed" translate="yes" xml:space="preserve">
          <source>Now for the dedicated pointer lock event listener: &lt;code&gt;pointerlockchange&lt;/code&gt;. When this occurs, we run a function called &lt;code&gt;lockChangeAlert()&lt;/code&gt; to handle the change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f753f7432b27358e78e88891bdfdbcb996f33c1" translate="yes" xml:space="preserve">
          <source>Now it&amp;rsquo;s time to bring them both together with the &lt;a href=&quot;../element/animate&quot;&gt;&lt;code&gt;Element.animate()&lt;/code&gt;&lt;/a&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa5b08c870433db28836ddca13f23614323cbd50" translate="yes" xml:space="preserve">
          <source>Now it's time to start building the list. First, the list is emptied by setting &lt;a href=&quot;../element/innerhtml&quot;&gt;&lt;code&gt;listing.innerHTML&lt;/code&gt;&lt;/a&gt; to be empty. That leaves us with an empty &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Ul&quot;&gt;&lt;code&gt;ul&lt;/code&gt;&lt;/a&gt; to begin inserting directory entries into.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="224505220a3fd2f4a2740a035caf1f7fe65d59fb" translate="yes" xml:space="preserve">
          <source>Now let&amp;rsquo;s get on to service workers!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acde941f6f152b9f83ee28a13b2ba20ee893c077" translate="yes" xml:space="preserve">
          <source>Now let&amp;rsquo;s return to our original problem. What we want is to be able to &lt;em&gt;replace&lt;/em&gt; the whole text with new text. That&amp;rsquo;s where &lt;a href=&quot;replacewholetext&quot;&gt;&lt;code&gt;replaceWholeText()&lt;/code&gt;&lt;/a&gt; comes in:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4be675f8c03d3b3030c3dd5b547bfde53ec0d97e" translate="yes" xml:space="preserve">
          <source>Now let&amp;rsquo;s try creating the same animation with the Web Animations API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="512d0e5b3f20f583d84205ef3fbbefa797beb8dd" translate="yes" xml:space="preserve">
          <source>Now let's check out the JavaScript. First we'll define the two objects that describe the keyframes and the timing configuration to use, then we'll actually see the code that triggers and runs the animation when the &lt;code&gt;&quot;animateButton&quot;&lt;/code&gt; button is clicked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c70c22593d7a77b9b64cb1cdfeaef40726839f1" translate="yes" xml:space="preserve">
          <source>Now let's get our response data:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23200c33b0df626f790b9d5643a2ad25f80074c3" translate="yes" xml:space="preserve">
          <source>Now let's have a look at the JavaScript code; this is where the majority of the action happens, after all!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68ca03a1c40879c6c852a0dc978b0bfdc8081f02" translate="yes" xml:space="preserve">
          <source>Now let's look at a more complex &lt;code&gt;createBuffer()&lt;/code&gt; example, in which we create a two second buffer, fill it with white noise, and then play it via an &lt;a href=&quot;../audiobuffersourcenode&quot;&gt;&lt;code&gt;AudioBufferSourceNode&lt;/code&gt;&lt;/a&gt;. The comment should clearly explain what is going on. You can also &lt;a href=&quot;https://mdn.github.io/webaudio-examples/audio-buffer/&quot;&gt;run the code live&lt;/a&gt;, or &lt;a href=&quot;https://github.com/mdn/webaudio-examples/blob/master/audio-buffer/index.html&quot;&gt;view the source&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e895ee78af1570ebe1c33dfa9a28f9f580cff436" translate="yes" xml:space="preserve">
          <source>Now let's look at a similar example that uses a set of constraints based on the &lt;a href=&quot;../mediatrackconstraints&quot;&gt;&lt;code&gt;MediaTrackConstraints&lt;/code&gt;&lt;/a&gt; dictionary:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30210c732cf9eb229fb69e9b6d5c8429d06b57d9" translate="yes" xml:space="preserve">
          <source>Now let's look at creating an IndexedDB to store our data:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1f0b0682c9f227c7a11b20c412068f2b499aa51" translate="yes" xml:space="preserve">
          <source>Now let's look at the &lt;code&gt;setup()&lt;/code&gt; function, which is our handler for the window's &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/load&quot;&gt;load&lt;/a&gt;&lt;/code&gt; event; it handles all the initialization tasks that require the DOM to be in place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d21e400e12372c6ee9668a6315f0c12be49f4cab" translate="yes" xml:space="preserve">
          <source>Now let's look at the Gamepad API being used inside a real WebVR demo. You can find this demo at &lt;a href=&quot;https://github.com/mdn/webvr-tests/tree/master/raw-webgl-controller-example&quot;&gt;raw-webgl-controller-example&lt;/a&gt; (&lt;a href=&quot;https://mdn.github.io/webvr-tests/raw-webgl-controller-example/&quot;&gt;see it live here also&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94e42c28a8390be2ec6f4a8340d4590e1a148974" translate="yes" xml:space="preserve">
          <source>Now let's look at the most intricate piece of code in this example: our event handler for clicks on the start button:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5fb4421f1cf6fe30c5b252dbcd2ebe0acf12d85" translate="yes" xml:space="preserve">
          <source>Now let's take a look at &lt;code&gt;updateDeviceList()&lt;/code&gt; itself. This method is called any time we want to fetch the current list of media devices and then update the displayed lists of audo and video devices using that information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daca9c081e9c76ee7ba537215b33d3095e84fba0" translate="yes" xml:space="preserve">
          <source>Now let's take a look at the &lt;a href=&quot;https://github.com/mdn/samples-server/tree/master/s/webrtc-capturestill/capture.js&quot;&gt;JavaScript code&lt;/a&gt;. We'll break it up into a few bite-sized pieces to make it easier to explain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5da17007089a222caac8f04d3102162e2bde0a49" translate="yes" xml:space="preserve">
          <source>Now let's take a look at the JavaScript code, a piece at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3239b7dc478426752b5d83cd30ef283bec71cf30" translate="yes" xml:space="preserve">
          <source>Now look at each of these calls to &lt;code&gt;removeEventListener()&lt;/code&gt; in turn. Any of them in which &lt;code&gt;capture&lt;/code&gt; or &lt;code&gt;useCapture&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; fail; all others succeed. Only the &lt;code&gt;capture&lt;/code&gt; setting matters to &lt;code&gt;removeEventListener()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f145bbed1e543c717409e1b0ed9c8cb174539d86" translate="yes" xml:space="preserve">
          <source>Now messages can be sent to the worker as before, but the &lt;code&gt;postMessage()&lt;/code&gt; method has to be invoked through the port object (again, you'll see similar constructs in both &lt;a href=&quot;https://github.com/mdn/simple-shared-worker/blob/gh-pages/multiply.js&quot;&gt;multiply.js&lt;/a&gt; and &lt;a href=&quot;https://github.com/mdn/simple-shared-worker/blob/gh-pages/square.js&quot;&gt;square.js&lt;/a&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d96c190d74882ea799039c4e5c1f2ccdf3913fe" translate="yes" xml:space="preserve">
          <source>Now on to the code executed inside the embedded document. Since it does not know whether it currently has access to storage, it should first call &lt;a href=&quot;../document/hasstorageaccess&quot;&gt;&lt;code&gt;Document.hasStorageAccess()&lt;/code&gt;&lt;/a&gt;. If that call returns &lt;code&gt;false&lt;/code&gt;, we can then call &lt;a href=&quot;../document/requeststorageaccess&quot;&gt;&lt;code&gt;Document.requestStorageAccess()&lt;/code&gt;&lt;/a&gt;, returning the result so that then we can chain it onto the previous promise call. In the final &lt;code&gt;then&lt;/code&gt;, we'll have first-party storage access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77d682f50bc4b1aeb2a39c21f99a0777c204a913" translate="yes" xml:space="preserve">
          <source>Now onto our first WebVR-specific code. First of all, we check to see if &lt;a href=&quot;../navigator/getvrdisplays&quot;&gt;&lt;code&gt;Navigator.getVRDisplays&lt;/code&gt;&lt;/a&gt; exists &amp;mdash; this is the entry point into the API, and therefore good basic feature detection for WebVR. You'll see at the end of the block (inside the &lt;code&gt;else&lt;/code&gt; clause) that if this doesn't exist, we log a message to indicate that WebVR 1.1 isn't supported by the browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1088119f65bd78820eb0c7a237aec3d48ee2747a" translate="yes" xml:space="preserve">
          <source>Now onto some code. Let's look first at the basics of how we get access to VR controllers with the Gamepad API. There are a few strange nuances to bear in mind here, so it is worth taking a look.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc48e7b377791e30ab49379ec3a30659b6452d8c" translate="yes" xml:space="preserve">
          <source>Now onto the worker. First we need to have the methods to handle the two simple operations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dab24fa9c13da8ee1982b770e7613e878c7387bc" translate="yes" xml:space="preserve">
          <source>Now removed from spec!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e470d18763d0608124fcf7975eb41ddf5d1cc79" translate="yes" xml:space="preserve">
          <source>Now that all the data the shaders need is available to them, we need to update the code in the shaders themselves.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61d970e574f0b2de6cff18adbbc81f9876a766cc" translate="yes" xml:space="preserve">
          <source>Now that our sample program has a rotating 3D cube, let's map a texture onto it instead of having its faces be solid colors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a9b13a66bdd1bbd16e9b8a1a75b8eac7e497eb5" translate="yes" xml:space="preserve">
          <source>Now that that's all out of the way, we can set up the vertex buffer and draw our shape, first, the buffer of vertexes that will be used to draw the triangles of the shape is set by calling &lt;a href=&quot;../webglrenderingcontext/bindbuffer&quot;&gt;&lt;code&gt;bindBuffer()&lt;/code&gt;&lt;/a&gt;. Then the vertex position attribute's index is obtained from the shader program by calling &lt;a href=&quot;../webglrenderingcontext/getattriblocation&quot;&gt;&lt;code&gt;getAttribLocation()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97b43e5d3536edc3b9f5caf1b163afcbb989a9be" translate="yes" xml:space="preserve">
          <source>Now that the database has some info in it, you can retrieve it in several ways. First, the simple &lt;code&gt;get()&lt;/code&gt;. You need to provide the key to retrieve the value, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adc3b63cea47122b82c7181de17f7e54de8a76b3" translate="yes" xml:space="preserve">
          <source>Now that the document structure is defined, construct the JavaScript code that will do the work. The goal: to be able to add requests to call functions to a queue, with an idle callback that runs those functions whenever the system is idle for long enough a time to make progress.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bba3b1541d81d822c4be64dfb4b9bc3f92c07139" translate="yes" xml:space="preserve">
          <source>Now that we have a ball, we are ready to add a basic animation like we have learned in the &lt;a href=&quot;basic_animations&quot;&gt;last chapter&lt;/a&gt; of this tutorial. Again, &lt;a href=&quot;../../window/requestanimationframe&quot;&gt;&lt;code&gt;window.requestAnimationFrame()&lt;/code&gt;&lt;/a&gt; helps us to control the animation. The ball gets moving by adding a velocity vector to the position. For each frame, we also &lt;a href=&quot;../../canvasrenderingcontext2d/clearrect&quot;&gt;clear&lt;/a&gt; the canvas to remove old circles from prior frames.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="028a2c9dc22e4b3a1a62c40807f0c9763be1d7a9" translate="yes" xml:space="preserve">
          <source>Now that we have set up our &lt;a href=&quot;basic_usage&quot;&gt;canvas environment&lt;/a&gt;, we can get into the details of how to draw on the canvas. By the end of this article, you will have learned how to draw rectangles, triangles, lines, arcs and curves, providing familiarity with some of the basic shapes. Working with paths is essential when drawing objects onto the canvas and we will see how that can be done.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd8bc330276755171ba7b406f2da7055cb25c79c" translate="yes" xml:space="preserve">
          <source>Now that we've built a mechanism for exchanging messages, we need a protocol defining how those messages will look. This can be done in a number of ways; what's demonstrated here is just one possible way to structure signaling messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dce9d4082284fb620004e917ad3402e96a7b82b5" translate="yes" xml:space="preserve">
          <source>Now that we've created a video decoding configuration we can pass it as a paramater of the &lt;a href=&quot;../mediacapabilities/decodinginfo&quot;&gt;&lt;code&gt;MediaCapabilities.decodingInfo()&lt;/code&gt;&lt;/a&gt; method to determine if a video matching this configuration would be decodable and if the playback would be smooth and power efficient.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2dae7c64207fe5097af3901218e8c31a304d382" translate="yes" xml:space="preserve">
          <source>Now that we've defined the two shaders we need to pass them to WebGL, compile them, and link them together. The code below creates the two shaders by calling &lt;code&gt;loadShader()&lt;/code&gt;, passing the type and source for the shader. It then creates a program, attaches the shaders and links them together. If compiling or linking fails the code displays an alert.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17be8d81192ca9274ac0e548e02e1351745521e8" translate="yes" xml:space="preserve">
          <source>Now that we've got the task management and display maintenance code done, we can actually start setting up code to run tasks that get work done.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6286b9eed5f87f6d69539754c7ebaa8569c67b3" translate="yes" xml:space="preserve">
          <source>Now that we've started negotiation with the other peer and have transmitted an offer, let's look at what happens on the callee's side of the connection for a while. The callee receives the offer and calls &lt;code&gt;handleVideoOfferMsg()&lt;/code&gt; function to process it. Let's see how the callee handles the &lt;code&gt;&quot;video-offer&quot;&lt;/code&gt; message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbd97e1afbb0812658183627b26665c3eb50e7f8" translate="yes" xml:space="preserve">
          <source>Now that you are familiar with the basic concepts of the DOM, there is a document explaining the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Traversing_an_HTML_table_with_JavaScript_and_DOM_Interfaces&quot;&gt;DOM Level 1 fundamental methods&lt;/a&gt;. It is the follow-up to this document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ad5f390f48c1bd6c9e5ebc92b7945103d3a28df" translate="yes" xml:space="preserve">
          <source>Now that you have a transaction you need to understand its lifetime. Transactions are tied very closely to the event loop. If you make a transaction and return to the event loop without using it then the transaction will become inactive. The only way to keep the transaction active is to make a request on it. When the request is finished you'll get a DOM event and, assuming that the request succeeded, you'll have another opportunity to extend the transaction during that callback. If you return to the event loop without extending the transaction then it will become inactive, and so on. As long as there are pending requests the transaction remains active. Transaction lifetimes are really very simple but it might take a little time to get used to. A few more examples will help, too. If you start seeing &lt;code&gt;TRANSACTION_INACTIVE_ERR&lt;/code&gt; error codes then you've messed something up.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3f7a92f66c275cbda62204a720cf978c72d0508" translate="yes" xml:space="preserve">
          <source>Now that you have a transaction, you'll need to get the object store from it. Transactions only let you have an object store that you specified when creating the transaction. Then you can add all the data you need.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bd5cb5f8628dade72cad9c17afe2d3c0e754bd4" translate="yes" xml:space="preserve">
          <source>Now the JavaScript:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed1e1a8375a35464a25ebdc2fb42dc181bb3af0e" translate="yes" xml:space="preserve">
          <source>Now the alert will show 'SPAN'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ee3bc0b68941bedcf403952c77b648781b93374" translate="yes" xml:space="preserve">
          <source>Now the coffee can't actually be drank with only a translation matrix because the cup cannot be tilted. In a later section, a new matrix will be discussed that will be able to handle that task.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58cadd4c36d313b470ef4efe5f435e06c0e0b66d" translate="yes" xml:space="preserve">
          <source>Now the output variable &lt;code&gt;gl_FragDepthEXT&lt;/code&gt; is available to set a depth value of a fragment from within the fragment shader:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="910f26b02160c902f422e129971f7c9d3781647c" translate="yes" xml:space="preserve">
          <source>Now the server must pick one of the protocols that the client suggested and it supports. If there are more than one, send the first one the client sent. Imagine our server can use both &lt;code&gt;soap&lt;/code&gt; and &lt;code&gt;wamp&lt;/code&gt;. Then, in the response handshake, it'll send:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03721f3e5d414b747ae3c05995c7147c307d74c8" translate="yes" xml:space="preserve">
          <source>Now to structure the database. IndexedDB uses object stores rather than tables, and a single database can contain any number of object stores. Whenever a value is stored in an object store, it is associated with a key. There are several different ways that a key can be supplied depending on whether the object store uses a &lt;a href=&quot;https://developer.mozilla.org/en/IndexedDB/Basic_Concepts_Behind_IndexedDB#gloss_keypath&quot;&gt;key path&lt;/a&gt; or a &lt;a href=&quot;https://developer.mozilla.org/en/IndexedDB/Basic_Concepts_Behind_IndexedDB#gloss_keygenerator&quot;&gt;key generator&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb435a363eefb1285bdc2247b1061d96d67abc18" translate="yes" xml:space="preserve">
          <source>Now using the function above we can multiply a point by the matrix. Using the identity matrix it should return the exact same value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9177074871ddc0eaca438c7e8205c7611a071473" translate="yes" xml:space="preserve">
          <source>Now we can add the play and pause functionality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24498567c6c35f0a98bd7e58d3a3dc063eb9834f" translate="yes" xml:space="preserve">
          <source>Now we can create an &lt;a href=&quot;../oscillatornode&quot;&gt;&lt;code&gt;OscillatorNode&lt;/code&gt;&lt;/a&gt; and set its wave to the one we've created:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90c68d2a8f354f20d0b27852af6590030a3b887c" translate="yes" xml:space="preserve">
          <source>Now we can create our &lt;a href=&quot;../audiocontext&quot;&gt;&lt;code&gt;AudioContext&lt;/code&gt;&lt;/a&gt;, an oscillator and a &lt;a href=&quot;../pannernode&quot;&gt;&lt;code&gt;PannerNode&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c274748385a7aabdcccff6ba4b66085a9c7a69ac" translate="yes" xml:space="preserve">
          <source>Now we can create some variables over in JavaScript and have them change when the input values are updated:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cdbfab88d405a0085aed1841d1d93a8531822f1" translate="yes" xml:space="preserve">
          <source>Now we can expand our &lt;code&gt;playSweep()&lt;/code&gt; function. We need to add a &lt;a href=&quot;../gainnode&quot;&gt;&lt;code&gt;GainNode&lt;/code&gt;&lt;/a&gt; and connect that through our audio graph to actually apply amplitude variations to our sound. The gain node has one property: &lt;code&gt;gain&lt;/code&gt;, which is of type &lt;a href=&quot;../audioparam&quot;&gt;&lt;code&gt;AudioParam&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7ea89d15b64464dcf9133ae4c5d9ab297fc64ca" translate="yes" xml:space="preserve">
          <source>Now we can fill it with random numbers between -1 and 1:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baecd9858b06a4206749769dc69cd86a70a7833a" translate="yes" xml:space="preserve">
          <source>Now we can start setting our position and orientation of our boombox. This is a lot like how we did it with our listener. These are also the parameters we're going to change when the controls on our interface are used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa61fe6b582e8461c8c4927e612d1a1c0857fbb7" translate="yes" xml:space="preserve">
          <source>Now we have a &lt;a href=&quot;../vrdisplay&quot;&gt;&lt;code&gt;VRDisplay&lt;/code&gt;&lt;/a&gt; object, we can use it do a number of things. The next thing we want to do is wire up functionality to start and stop presentation of the WebGL content to the display.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bf42ed318071eeeabc24f6776a954d498b6c2f4" translate="yes" xml:space="preserve">
          <source>Now we have the audio buffer and have filled it with data, we need a node to add to our graph that can use the buffer as a source. We'll create a &lt;a href=&quot;../audiobuffersourcenode&quot;&gt;&lt;code&gt;AudioBufferSourceNode&lt;/code&gt;&lt;/a&gt; for this, and pass in the data we've created:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b38b452fe59da62f7cf871068142aa2226973a9" translate="yes" xml:space="preserve">
          <source>Now we have to update our audio graph from before, so the input is connected to the gain, then the gain node is connected to the destination:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39e158a71ddd4ccca3e057645996192d04254d40" translate="yes" xml:space="preserve">
          <source>Now we need to make some noise! All modems have noise. Noise is just random numbers when it comes to audio data, so is, therefore, a relatively straightforward thing to create with code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ada3de5f96d90e1da360eba3180b53ae042105f1" translate="yes" xml:space="preserve">
          <source>Now we need to update the &lt;code&gt;drawScene()&lt;/code&gt; function to apply the current rotation to the square when drawing it. After translating to the initial drawing position for the square, we apply the rotation like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70c64d219bd8a80a78baad0eaa90ce4fb7c3f148" translate="yes" xml:space="preserve">
          <source>Now we retrieve the current &lt;a href=&quot;../vrpose&quot;&gt;&lt;code&gt;VRPose&lt;/code&gt;&lt;/a&gt; from the &lt;a href=&quot;../vrframedata/pose&quot;&gt;&lt;code&gt;VRFrameData.pose&lt;/code&gt;&lt;/a&gt; property, store the position and orientation for use later on, and send the current pose to the pose stats box for display, if the &lt;code&gt;poseStatsDisplayed&lt;/code&gt; variable is set to true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7704d2ca916ec0cbb07dc3db5edc66eba61b96ef" translate="yes" xml:space="preserve">
          <source>Now we run through a loop, defining the position of a small segment of the wave for each point in the buffer at a certain height based on the data point value form the array, then moving the line across to the place where the next wave segment should be drawn:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17b9a22c31096ee6e3d93bf07117c4a37279815e" translate="yes" xml:space="preserve">
          <source>Now we set our &lt;code&gt;barWidth&lt;/code&gt; to be equal to the canvas width divided by the number of bars (the buffer length). However, we are also multiplying that width by 2.5, because most of the frequencies will come back as having no audio in them, as most of the sounds we hear every day are in a certain lower frequency range. We don't want to display loads of empty bars, therefore we simply shift the ones that will display regularly at a noticeable height across so they fill the canvas display.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d53f6be6b5c1d6470872bb7b61e59c3e9d7457e0" translate="yes" xml:space="preserve">
          <source>Now we set up an event listener to run the &lt;code&gt;requestPointerLock()&lt;/code&gt; method on the canvas when it is clicked, which initiates pointer lock.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c8585f8ee663fbd386d4168f0b468a5413529af" translate="yes" xml:space="preserve">
          <source>Now we&amp;rsquo;ve got our streaming body, reading the stream requires attaching a reader to it. This is done using the &lt;a href=&quot;../readablestream/getreader&quot;&gt;&lt;code&gt;ReadableStream.getReader()&lt;/code&gt;&lt;/a&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aebe5143626a29f3b5fd30fedee4ce466375d25d" translate="yes" xml:space="preserve">
          <source>Now we'll create a method to draw a box on the screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="584562d1f820843971f79c73506cf2260429acca" translate="yes" xml:space="preserve">
          <source>Now we're going to create a &lt;a href=&quot;../gainnode&quot;&gt;&lt;code&gt;GainNode&lt;/code&gt;&lt;/a&gt;, as it's the &lt;code&gt;gain&lt;/code&gt; value that we will oscillate with our second, low frequency oscillator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="796d2923576654eda355fc0cec7462d9405ca631" translate="yes" xml:space="preserve">
          <source>Now we're going to move our boombox around our 'room'. We've got some controls set up to do this. We can move it left and right, up and down, and back and forth; we can also rotate it. The sound direction is coming from the boombox speaker at the front, so when we rotate it, we can alter the sound's direction &amp;mdash; i.e. make it project to the back when the boombox is rotated 180 degrees and facing away from us.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ef6a89b0d82e93f44af74be91648b02f32d6088" translate="yes" xml:space="preserve">
          <source>Now we've retrieved some data, updating it and inserting it back into the IndexedDB is pretty simple. Let's update the previous example somewhat:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83df4f92334b34d5de3430c7f20eafaf39c17930" translate="yes" xml:space="preserve">
          <source>Now you can figure out what &lt;strong&gt;DECODED&lt;/strong&gt; means depending on your application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d124cefb74ffea4cc5f9d06a7c673efac0d94766" translate="yes" xml:space="preserve">
          <source>Now you have the &lt;a href=&quot;../canvasrenderingcontext2d&quot;&gt;2D rendering context&lt;/a&gt; for a canvas and you can draw within it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63743b6e9f5b0911fa8f10fa2541efd6a4a0da10" translate="yes" xml:space="preserve">
          <source>Now you&amp;rsquo;ve got your reader attached, you can read data chunks out of the stream using the &lt;a href=&quot;../readablestreamdefaultreader/read&quot;&gt;&lt;code&gt;ReadableStreamDefaultReader.read()&lt;/code&gt;&lt;/a&gt; method. This reads one chunk out of the stream, which you can then do anything you like with. For example, our Simple stream pump example goes on to enqueue each chunk in a new, custom &lt;code&gt;ReadableStream&lt;/code&gt; (we will find more about this in the next section), then create a new &lt;a href=&quot;../response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; out of it, consume it as a &lt;a href=&quot;../blob&quot;&gt;&lt;code&gt;Blob&lt;/code&gt;&lt;/a&gt;, create an object URL out of that blob using &lt;a href=&quot;../url/createobjecturl&quot;&gt;&lt;code&gt;URL.createObjectURL()&lt;/code&gt;&lt;/a&gt;, and then display it on screen in an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&lt;/a&gt; element, effectively creating a copy of the image we originally fetched.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="851fb809456a35d4d46ad2c206f7c10411e7a8bc" translate="yes" xml:space="preserve">
          <source>Now you&amp;rsquo;ve got your site assets cached, you need to tell service workers to do something with the cached content. This is easily done with the &lt;code&gt;fetch&lt;/code&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4693db27cbd435935f0ed5d062c64ce3397c862" translate="yes" xml:space="preserve">
          <source>Now your code will work even on browsers that don't support the Background Tasks API, albeit not as efficiently.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7c2e0a0d182017700d433287e27d45270475435" translate="yes" xml:space="preserve">
          <source>Now, assuming that the user allowed your request to create a database, and you've received a success event to trigger the success callback; What's next? The request here was generated with a call to &lt;code&gt;indexedDB.open()&lt;/code&gt;, so &lt;code&gt;request.result&lt;/code&gt; is an instance of &lt;code&gt;IDBDatabase&lt;/code&gt;, and you definitely want to save that for later. Your code might look something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1054ac145612f66af9c939ab667d4d787c09f9d0" translate="yes" xml:space="preserve">
          <source>Now, consider the submission of a form containing only two fields, named &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;baz&lt;/code&gt;. If you are using the &lt;code&gt;POST&lt;/code&gt; method the server will receive a string similar to one of the following three examples, depending on the encoding type you are using:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b178329c19fbdab341a2f8ab64fde7c0c8f53c8" translate="yes" xml:space="preserve">
          <source>Now, on to the worker. There is a bit more complexity here as well (&lt;a href=&quot;https://github.com/mdn/simple-shared-worker/blob/gh-pages/worker.js&quot;&gt;worker.js&lt;/a&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1a652511ca80ff718617f77950216c59880cf7b" translate="yes" xml:space="preserve">
          <source>Now, the audio context we've created needs some sound to play through it. There are a few ways to do this with the API. Let's begin with a simple method &amp;mdash; as we have a boombox, we most likely want to play a full song track. Also, for accessibility, it's nice to expose that track in the DOM. We'll expose the song on the page using an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio&quot;&gt;&lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt;&lt;/a&gt; element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaf57fa7b7fdf9211f5ca4b067d9ce4c6a55c9d2" translate="yes" xml:space="preserve">
          <source>Now, we draw a green box up top, but shrink it by setting the w component to 1.1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5d956ace61c670b7c0c3a36df3f01f1710d90f5" translate="yes" xml:space="preserve">
          <source>Now, whenever the value of &lt;a href=&quot;constantsourcenode/offset&quot;&gt;&lt;code&gt;constantNode.offset&lt;/code&gt;&lt;/a&gt; changes, the gain on both &lt;code&gt;gainNode2&lt;/code&gt; and &lt;code&gt;gainNode3&lt;/code&gt; will change to have that same value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3206013eaf782ccac7d096b2c597f263053d0a22" translate="yes" xml:space="preserve">
          <source>Nth-child(n): e.g. p:nth-child(2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffcfc0374bb6bb25ea335f6b96e0a1d4bd6ace6e" translate="yes" xml:space="preserve">
          <source>Nth-last-child: e.g. p:nth-last-child(2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f65544433adbb8e35e2a82c0ddc14ec0fc3c001" translate="yes" xml:space="preserve">
          <source>Num Lock</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dd7ab4d5fd21447676ad2c345fb057dd9f9a964" translate="yes" xml:space="preserve">
          <source>NumLock</source>
          <target state="translated">NumLock</target>
        </trans-unit>
        <trans-unit id="b7baa1d40c4ea29afc9098732bffee2a861a6c44" translate="yes" xml:space="preserve">
          <source>Number</source>
          <target state="translated">Number</target>
        </trans-unit>
        <trans-unit id="779843ed6b5391d926f8da2478e4b0620d1ffea5" translate="yes" xml:space="preserve">
          <source>Number of inputs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6524e43a4aed52b634df47cb97eb5fe937c763dc" translate="yes" xml:space="preserve">
          <source>Number of outputs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29136473b36bc3c3c4056cefb1040feee03c8e8a" translate="yes" xml:space="preserve">
          <source>Number of pixel images skipped before the first pixel is read from memory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a62b159754c0879f814468fd3211c1027cd6eb8" translate="yes" xml:space="preserve">
          <source>Number of pixel locations skipped before the first pixel is written into memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f17e94f044dfd051f39f2a20a08c1d453a1e8a2" translate="yes" xml:space="preserve">
          <source>Number of pixels in a row.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9394f206947d40db75fb0d0bf2d0c7a98594d8d" translate="yes" xml:space="preserve">
          <source>Number of rows of pixel locations skipped before the first pixel is read from memory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47e7b495c53660848533b10e6df45a2fd2e12366" translate="yes" xml:space="preserve">
          <source>Number of rows of pixel locations skipped before the first pixel is written into memory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccf08dc45a8f5cd5a71a20c72e9790d7a88a6b90" translate="yes" xml:space="preserve">
          <source>NumberList</source>
          <target state="translated">NumberList</target>
        </trans-unit>
        <trans-unit id="83e41d471d2c996004ba104a4e78f7eaec561a63" translate="yes" xml:space="preserve">
          <source>Numerical indexing is useful for going through all of an element's attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faba4615c90fc101f724a8a999d573e1f0809090" translate="yes" xml:space="preserve">
          <source>Numerical value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08a914cde05039694ef0194d9ee79ff9a79dde33" translate="yes" xml:space="preserve">
          <source>O</source>
          <target state="translated">O</target>
        </trans-unit>
        <trans-unit id="2fb576c2a039eda7ef70a16a242b88197c29a85c" translate="yes" xml:space="preserve">
          <source>OES element index uint</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96f340dc6f7be2ea59957d3364ed50b7358cdb47" translate="yes" xml:space="preserve">
          <source>OES standard derivatives</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4ff3467d1752e2ff159017f75602fdfe7d2cc4a" translate="yes" xml:space="preserve">
          <source>OES texture float linear</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d011189a778d2d2f89546cc9904367eca5b51049" translate="yes" xml:space="preserve">
          <source>OES texture half float</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42710e5487e4f64425f9ca628f91fb087ad0f747" translate="yes" xml:space="preserve">
          <source>OES texture half float linear</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3bfc9df582e86a50dcbbfdb790472639e6cde98" translate="yes" xml:space="preserve">
          <source>OES vertex array object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1b1a73e71d56f18cfd74fe8d1242d9c2fb6462b" translate="yes" xml:space="preserve">
          <source>OES_: Extensions that mirror functionality from OpenGL ES or OpenGL API extensions approved by the respective architecture review boards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80d2bf406f3e24fa8b88a1d2192674da29d17bab" translate="yes" xml:space="preserve">
          <source>OES_element_index_uint&lt;br/&gt;&lt;small&gt;The definition of 'OES_element_index_uint' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5806ad061af9b0bcefed26a065e655e475dab96" translate="yes" xml:space="preserve">
          <source>OES_standard_derivatives&lt;br/&gt;&lt;small&gt;The definition of 'OES_standard_derivatives' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="461c2fe254aa8c3bb0ebf6c5cd4256af0eff95f6" translate="yes" xml:space="preserve">
          <source>OES_texture_float_linear&lt;br/&gt;&lt;small&gt;The definition of 'OES_texture_float_linear' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a71973f6c70e94f7231e48886c8b5ab55423c386" translate="yes" xml:space="preserve">
          <source>OES_texture_half_float&lt;br/&gt;&lt;small&gt;The definition of 'OES_texture_half_float' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90268cf585fae2fb985bb5c3a17541912f2fd870" translate="yes" xml:space="preserve">
          <source>OES_texture_half_float_linear&lt;br/&gt;&lt;small&gt;The definition of 'OES_texture_half_float_linear' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1264170d2eac2bf529b2571d7c6671d9c2b6af7" translate="yes" xml:space="preserve">
          <source>OES_vertex_array_object&lt;br/&gt;&lt;small&gt;The definition of 'OES_vertex_array_object' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ea1e2a9bc04b72baf244970328a0fa6f3226540" translate="yes" xml:space="preserve">
          <source>OMString</source>
          <target state="translated">OMString</target>
        </trans-unit>
        <trans-unit id="696cb53327b81eae5bb70c4ed15cdd66b40ba1d0" translate="yes" xml:space="preserve">
          <source>OPENED</source>
          <target state="translated">OPENED</target>
        </trans-unit>
        <trans-unit id="f579c523960af1aec824c6fdc57af6d4abd76a1f" translate="yes" xml:space="preserve">
          <source>OR</source>
          <target state="translated">OR</target>
        </trans-unit>
        <trans-unit id="49f5479219ce3d4b44c672d19081b527acbff3f8" translate="yes" xml:space="preserve">
          <source>OS/2</source>
          <target state="translated">OS/2</target>
        </trans-unit>
        <trans-unit id="080e3c2fcfbdb8b1a748e0c7f24151c866d30332" translate="yes" xml:space="preserve">
          <source>OS/2 Warp x (either 3, 4 or 4.5)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2883f191bc5ebfdc16c0813eff659b35363ea69b" translate="yes" xml:space="preserve">
          <source>Object</source>
          <target state="translated">Object</target>
        </trans-unit>
        <trans-unit id="9acd850a30238a54eae733b2ef6db2b68124fe1e" translate="yes" xml:space="preserve">
          <source>Object Model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ab5faf69c96c2650f3dc0e02517b3af4264919e" translate="yes" xml:space="preserve">
          <source>Object URLs can be used for other things than just images! They can be used to display embedded PDF files or any other resources that can be displayed by the browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afa085a92a58a7dbcc7adf6cf988373b53bb1ddc" translate="yes" xml:space="preserve">
          <source>Object stores are created with a single call to &lt;code&gt;createObjectStore()&lt;/code&gt;. The method takes a name of the store, and a parameter object. Even though the parameter object is optional, it is very important, because it lets you define important optional properties and refine the type of object store you want to create. In our case, we've asked for an object store named &quot;customers&quot; and defined a &lt;code&gt;keyPath&lt;/code&gt;, which is the property that makes an individual object in the store unique. That property in this example is &quot;ssn&quot; since a social security number is guaranteed to be unique. &quot;ssn&quot; must be present on every object that is stored in the &lt;code&gt;objectStore&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20a6ef707d84cd976634d281daf1c5f9c7a1cb2a" translate="yes" xml:space="preserve">
          <source>Object that controls how the element is defined. One option is currently supported:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b19ba494424db5d03f9b04a665da9b49104e5bcd" translate="yes" xml:space="preserve">
          <source>Object type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c3add4ed5004382c2690e11470d2ecb1cc0b845" translate="yes" xml:space="preserve">
          <source>Object types implementing this interface: &lt;a href=&quot;../document&quot;&gt;&lt;code&gt;Document&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../element&quot;&gt;&lt;code&gt;Element&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../documentfragment&quot;&gt;&lt;code&gt;DocumentFragment&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eaba55ddd80a040becf3a04c588e9462179c911" translate="yes" xml:space="preserve">
          <source>Object types implementing this mixin: &lt;a href=&quot;document&quot;&gt;&lt;code&gt;Document&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;element&quot;&gt;&lt;code&gt;Element&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;documentfragment&quot;&gt;&lt;code&gt;DocumentFragment&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3df9485e1761ed43b50a107c18b7a98cb0ed92ad" translate="yes" xml:space="preserve">
          <source>Object types implementing this pure interface: &lt;a href=&quot;../document&quot;&gt;&lt;code&gt;Document&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../element&quot;&gt;&lt;code&gt;Element&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../documentfragment&quot;&gt;&lt;code&gt;DocumentFragment&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3f12586a4586a6e682d6224aa080aeaa1dc9044" translate="yes" xml:space="preserve">
          <source>Object types implementing this pure interface: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CharacterData&quot;&gt;&lt;code&gt;CharacterData&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../element&quot;&gt;&lt;code&gt;Element&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../documenttype&quot;&gt;&lt;code&gt;DocumentType&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0882ead49bee6d43556df3bba92481195ac44fb" translate="yes" xml:space="preserve">
          <source>Object types implementing this pure interface: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CharacterData&quot;&gt;&lt;code&gt;CharacterData&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;element&quot;&gt;&lt;code&gt;Element&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;documenttype&quot;&gt;&lt;code&gt;DocumentType&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df9edf669b0add96733004a5253cd7a348c0a86b" translate="yes" xml:space="preserve">
          <source>Object types implementing this pure interface: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CharacterData&quot;&gt;&lt;code&gt;CharacterData&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../element&quot;&gt;&lt;code&gt;Element&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f1902006412e14b3b206240ebcbb43226d52e98" translate="yes" xml:space="preserve">
          <source>Object types implementing this pure interface: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CharacterData&quot;&gt;&lt;code&gt;CharacterData&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;element&quot;&gt;&lt;code&gt;Element&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15ec2540483669ea1af8b34edd4fc506d77c5ebc" translate="yes" xml:space="preserve">
          <source>Objects deriving from it :</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4701bb8adeedf302b1841b623879276389226822" translate="yes" xml:space="preserve">
          <source>Objects in the &lt;code&gt;CanvasRenderingContext2D&lt;/code&gt; rendering context have a current transformation matrix and methods to manipulate it. The transformation matrix is applied when creating the current default path, painting text, shapes and &lt;a href=&quot;path2d&quot;&gt;&lt;code&gt;Path2D&lt;/code&gt;&lt;/a&gt; objects. The methods listed below remain for historical and compatibility reasons as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix&quot;&gt;&lt;code&gt;SVGMatrix&lt;/code&gt;&lt;/a&gt; objects are used in most parts of the API nowadays and will be used in the future instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="720dc74c05127856814f189d33aec65554904a57" translate="yes" xml:space="preserve">
          <source>Objects of these types are designed to hold small audio snippets, typically less than 45 s. For longer sounds, objects implementing the &lt;a href=&quot;mediaelementaudiosourcenode&quot;&gt;&lt;code&gt;MediaElementAudioSourceNode&lt;/code&gt;&lt;/a&gt; are more suitable. The buffer contains data in the following format: non-interleaved IEEE754 32-bit linear PCM with a nominal range between &lt;code&gt;-1&lt;/code&gt; and &lt;code&gt;+1&lt;/code&gt;, that is, 32bits floating point buffer, with each samples between -1.0 and 1.0. If the &lt;a href=&quot;audiobuffer&quot;&gt;&lt;code&gt;AudioBuffer&lt;/code&gt;&lt;/a&gt; has multiple channels, they are stored in separate buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e13659728b64bfd5f0e6c3eebf5895924ae02ce7" translate="yes" xml:space="preserve">
          <source>Observation follows nodes when disconnected</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab7e64c97fc5b12d3a53c3eaa9ee4e2f13560916" translate="yes" xml:space="preserve">
          <source>Observer</source>
          <target state="translated">Observer</target>
        </trans-unit>
        <trans-unit id="fcc0dc13e50f7fecd16a257d6ddbe8591d7dbd96" translate="yes" xml:space="preserve">
          <source>Observer.constructor</source>
          <target state="translated">Observer.constructor</target>
        </trans-unit>
        <trans-unit id="b84ec3645cd8ba40aee293135c34459053390488" translate="yes" xml:space="preserve">
          <source>Observer.disconnect</source>
          <target state="translated">Observer.disconnect</target>
        </trans-unit>
        <trans-unit id="0ea1181a8a1093f26222c87dfbda364f15b201f4" translate="yes" xml:space="preserve">
          <source>Observer.observe</source>
          <target state="translated">Observer.observe</target>
        </trans-unit>
        <trans-unit id="7d9513f8e1cf23d71c4c8607d3302d441aaeb264" translate="yes" xml:space="preserve">
          <source>Observer.takeRecords</source>
          <target state="translated">Observer.takeRecords</target>
        </trans-unit>
        <trans-unit id="101449b258f8fc80eefc9012ec19f64ea102f1a2" translate="yes" xml:space="preserve">
          <source>ObserverEntryList</source>
          <target state="translated">ObserverEntryList</target>
        </trans-unit>
        <trans-unit id="2d28a2551251fd399b8ff49675b568475bc343bc" translate="yes" xml:space="preserve">
          <source>ObserverEntryList.getEntries</source>
          <target state="translated">ObserverEntryList.getEntries</target>
        </trans-unit>
        <trans-unit id="a39eff40d60293aa13ef9258a210fed6cc466ffb" translate="yes" xml:space="preserve">
          <source>ObserverEntryList.getEntriesByName</source>
          <target state="translated">ObserverEntryList.getEntriesByName</target>
        </trans-unit>
        <trans-unit id="cd97b91aeb0f35a59d11230aaa1eb1dd35908054" translate="yes" xml:space="preserve">
          <source>ObserverEntryList.getEntriesByType</source>
          <target state="translated">ObserverEntryList.getEntriesByType</target>
        </trans-unit>
        <trans-unit id="4e7d8c7849f1648c77052055f32051f9581d8bc7" translate="yes" xml:space="preserve">
          <source>Obsolete</source>
          <target state="translated">Obsolete</target>
        </trans-unit>
        <trans-unit id="d0e579de2200b17f6334795c52888e92b3a2fd34" translate="yes" xml:space="preserve">
          <source>Obsolete CSSOM interfaces</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60452b6780176eb99929b0ac488d7604a20acae8" translate="yes" xml:space="preserve">
          <source>Obsolete attributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="959717cd9f681a493849de2337d1a733010c2566" translate="yes" xml:space="preserve">
          <source>Obsolete event handlers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="764583ced8262886e6f748cd13405acaede664e7" translate="yes" xml:space="preserve">
          <source>Obsolete fields</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5e667b55cbd190b72f27d0a9657430e22b4adc4" translate="yes" xml:space="preserve">
          <source>Obsolete interfaces</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c54c5d6e86a066a52f91e4de92dc5c81329cbfa6" translate="yes" xml:space="preserve">
          <source>Obsolete method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db10264494fc6061ee6b028b81c6ad4ed2e4aad8" translate="yes" xml:space="preserve">
          <source>Obsolete methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38517473280b2de2f04663ffd3278507a070b2a5" translate="yes" xml:space="preserve">
          <source>Obsolete or non-standard HTML elements implementing this interface: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bgsound&quot;&gt;&lt;code&gt;&amp;lt;bgsound&amp;gt;&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blink&quot;&gt;&lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/isindex&quot;&gt;&lt;code&gt;&amp;lt;isindex&amp;gt;&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/multicol&quot;&gt;&lt;code&gt;&amp;lt;multicol&amp;gt;&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nextid&quot;&gt;&lt;code&gt;&amp;lt;nextid&amp;gt;&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rb&quot;&gt;&lt;code&gt;&amp;lt;rb&amp;gt;&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/spacer&quot;&gt;&lt;code&gt;&amp;lt;spacer&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d002105e8d8da8c2560e2996eed65c2a7da391d" translate="yes" xml:space="preserve">
          <source>Obsolete properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c40e2d67555b3788032807647ae7210975af7c1e" translate="yes" xml:space="preserve">
          <source>Obsolete synonym of personalbar. In IE, it rendered the Links bar. Supported in Gecko up to 1.9.2 and in IE up to 6.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="244195c850bc390e3552dfc473b4afed3484bcf8" translate="yes" xml:space="preserve">
          <source>Obsolete, use &lt;a href=&quot;event/stoppropagation&quot;&gt;&lt;code&gt;event.stopPropagation&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="159a3ea0b2829ddd0f2206a28f1528a630d865bd" translate="yes" xml:space="preserve">
          <source>Obsoleted values &lt;code&gt;CHARSET_RULE&lt;/code&gt; and &lt;code&gt;UNKNOWN_RULE&lt;/code&gt;. Added value &lt;code&gt;NAMESPACE_RULE&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d2f0860f2404fa973656323587d77682fd651ed" translate="yes" xml:space="preserve">
          <source>Obtain the value of &lt;em&gt;Sec-WebSocket-Key&lt;/em&gt; request header without any leading and trailing whitespace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3b3c8f7f6fe3bd6e26a17a6d1511b4d73a8fd41" translate="yes" xml:space="preserve">
          <source>Obtain the value of the &quot;Sec-WebSocket-Key&quot; request header without any leading or trailing whitespace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b6ea9b4b57eef948e9844996d70a0ac7c734b1d" translate="yes" xml:space="preserve">
          <source>Obtaining a form element object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f8ae29db8468d832f977adb587c8a29adae9423" translate="yes" xml:space="preserve">
          <source>Obtaining a list of matches</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="807288cdf6eacdc0c97d6c72614a55611ac2558c" translate="yes" xml:space="preserve">
          <source>Obtaining crisp lines requires understanding how paths are stroked. In the images below, the grid represents the canvas coordinate grid. The squares between gridlines are actual on-screen pixels. In the first grid image below, a rectangle from (2,1) to (5,5) is filled. The entire area between them (light red) falls on pixel boundaries, so the resulting filled rectangle will have crisp edges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49dad8058fcaca35b7ff0aafddac6df578624323" translate="yes" xml:space="preserve">
          <source>Obtains an array of information about the media input and output devices available on the system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58e326659464cbf25b2055194b6133940b7b84de" translate="yes" xml:space="preserve">
          <source>Obviously, browsers do not want to allow some advertising network or malicious website to pollute your computer, so browsers used to prompt the user the first time any given web app attempts to open an IndexedDB for storage. The user could choose to allow or deny access. Also, IndexedDB storage in browsers' privacy modes only lasts in-memory until the incognito session is closed (Private Browsing mode for Firefox and Incognito mode for Chrome, but in Firefox this is &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=781982&quot;&gt;not implemented yet&lt;/a&gt; as of Nov 2015 so you can't use IndexedDB in Firefox Private Browsing at all).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a4c45b37dd93d6930d28546d1cc0e4df6e86b87" translate="yes" xml:space="preserve">
          <source>Obviously, this is a simple example, implementing basic per-vertex lighting. For more advanced graphics, you'll want to implement per-pixel lighting, but this will get you headed in the right direction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10c8e0d92acc12255fe2588c56e25425f204226e" translate="yes" xml:space="preserve">
          <source>Obviously, this is somewhat contrived, since we know that the file's full path is &lt;code&gt;&quot;/data.json&quot;&lt;/code&gt;, having just looked it up ourselves, but the concept holds up for scenarios in which you don't know it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74748c997735de32996abd539aa257591da30ff5" translate="yes" xml:space="preserve">
          <source>Occurs if a request is made on a source database that doesn't exist (e.g. has been deleted or removed.) In Firefox previous to version 41, an &lt;code&gt;InvalidStateError&lt;/code&gt; was raised in this case as well, which was misleading; this has now been fixed (see &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1176165&quot;&gt;bug 1176165&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="442c28f00455c970a1663adf9dbb3734d03f50c8" translate="yes" xml:space="preserve">
          <source>Occurs if an index with the same name already exists in the database. Index names are case-sensitive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2587fa156e0957bb09c15cb10b751a011908dae8" translate="yes" xml:space="preserve">
          <source>Occurs if either:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af98c6d0dba12d2bc8f774d4763457f7f4f1ea9e" translate="yes" xml:space="preserve">
          <source>Occurs if the method was not called from a &lt;code&gt;versionchange&lt;/code&gt; transaction callback. For older WebKit browsers, you must call  first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aefd2ce9059546a8f1a7d0d847a73b0d781c466f" translate="yes" xml:space="preserve">
          <source>Occurs if the method was not called from a &lt;code&gt;versionchange&lt;/code&gt; transaction mode callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="208eab26abeada55ec3288d6c3d42bb186f34274" translate="yes" xml:space="preserve">
          <source>Occurs if the provided &lt;code&gt;keyPath&lt;/code&gt; is not a &lt;a href=&quot;https://www.w3.org/TR/IndexedDB/#dfn-valid-key-path&quot;&gt;valid key path&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="975ff913ba56534986448fdfff879d9eedc13076" translate="yes" xml:space="preserve">
          <source>Occurs if the provided key path is a sequence, and &lt;code&gt;multiEntry&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt; in the &lt;code&gt;objectParameters&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67ae1f5220f616fdbf9054bc6957972e46634c6c" translate="yes" xml:space="preserve">
          <source>Occurs if the transaction this &lt;a href=&quot;../idbobjectstore&quot;&gt;&lt;code&gt;IDBObjectStore&lt;/code&gt;&lt;/a&gt; belongs to is not active (e.g. has been deleted or removed.) In Firefox previous to version 41, an &lt;code&gt;InvalidStateError&lt;/code&gt; was raised in this case as well, which was misleading; this has now been fixed (see &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1176165&quot;&gt;bug 1176165&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="518642fef6aa01908628f80de089cd25a04b3744" translate="yes" xml:space="preserve">
          <source>Occurs if there is no index with the given name (case-sensitive) in the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03d39741f63fbae86ada823c042645b13a926439" translate="yes" xml:space="preserve">
          <source>Occurs when a document is removed from a window or frame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3d040f86058be758de264ec10d2b1269295d7cf" translate="yes" xml:space="preserve">
          <source>Occurs when a document view is being moved along the x-axis, y-axis, or both axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e344ee5072a67d1d96336041b16752f3a64cf790" translate="yes" xml:space="preserve">
          <source>Occurs when an element does not load properly or a script runs incorrectly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc2ab2c50be9a46f614af07c5e766ec964355e87" translate="yes" xml:space="preserve">
          <source>Occurs when page loading is stopped before an element is loaded completely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c42d9e56d3eb4b5e86a3976a019261b3427f3e6" translate="yes" xml:space="preserve">
          <source>Occurs when the browser has fully parsed the element and all of its descendants.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="167b19189eb287d60bac629761970319f2c863e9" translate="yes" xml:space="preserve">
          <source>Occurs when the document view is being resized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3405c093b1da208cff9cfca83066de0ad16161b7" translate="yes" xml:space="preserve">
          <source>Occurs when the document zoom level or &lt;strong&gt;currentScale&lt;/strong&gt; property changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="103165a25eab02f49a4433a5673b29e0c77532f2" translate="yes" xml:space="preserve">
          <source>Octave</source>
          <target state="translated">Octave</target>
        </trans-unit>
        <trans-unit id="eb1d9b9617a56680a98ca2a99607c06dcb19947e" translate="yes" xml:space="preserve">
          <source>Of course the snippet above doesn't take into account the array method of vibration; persistent array-based vibration will require calculating the sum of the array items and creating an interval based on that number (with an additional delay, probably).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22b1e7693db0b42f01717e2ece15a097fb2ad4e8" translate="yes" xml:space="preserve">
          <source>Of course, &quot;disconnected&quot; and &quot;closed&quot; don't necessarily indicate errors; these can be the result of normal ICE negotiation, so be sure to handle these properly (if at all).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fc10c70533f74f79413639d76bbe4debb64358c" translate="yes" xml:space="preserve">
          <source>Of course, if &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transforms&quot;&gt;transforms&lt;/a&gt; have been applied, the axes may have changed orientation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cb430b296de9e78a60006ce58ccca6fac87cd79" translate="yes" xml:space="preserve">
          <source>Of course, there may be non-standard properties in this list, in which case you probably will find that the documentation link doesn't help much.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b601d62a5873a05e072722ad8b96466eea0c3b95" translate="yes" xml:space="preserve">
          <source>Of course, you wouldn't use someone's social security number as the primary key to a customer table because not everyone has a social security number, and you would store their birth date instead of their age, but let's ignore those unfortunate choices for the sake of convenience and move along.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aacf3edc2091ed7fbd01a2afa70fa7b37af4f37" translate="yes" xml:space="preserve">
          <source>Of equal importance are the rules around notification. Browsers are required to display an indicator that shows that a camera or microphone is in use, above and beyond any hardware indicator that may exist. They must also show an indicator that permission has been granted to use a device for input, even if the device is not actively recording at the moment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="670532e7a2f7f17ebfcd923fbacb2d7462e0f7c8" translate="yes" xml:space="preserve">
          <source>OffScreenCanvas.transferToImageBitmap</source>
          <target state="translated">OffScreenCanvas.transferToImageBitmap</target>
        </trans-unit>
        <trans-unit id="2c62f173d6712d3063c7cd111f407717ceae07cb" translate="yes" xml:space="preserve">
          <source>Offer to open a link in a new window, using these guidelines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba8f3de33de6efa602cb34670756002acb81dd07" translate="yes" xml:space="preserve">
          <source>Offers to receive RTP data, and does so if the other peer accepts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acc77ce31cf85b3de1a5859dd2b96041671399a7" translate="yes" xml:space="preserve">
          <source>Offers to receive RTP data, and will do so if the other peer offers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c309c011456a1becd7cb95d0b340cdbdfbb64f4b" translate="yes" xml:space="preserve">
          <source>Offers to send &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/RTP&quot;&gt;RTP&lt;/a&gt; data, and will do so if the other peer accepts the connection and at least one of the sender's encodings is active&lt;sup&gt;1&lt;/sup&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d51263c33a3d907e9d1452619ca80c254ff45e75" translate="yes" xml:space="preserve">
          <source>Offers to send RTP data, and will do so if the other peer accepts the connection and at least one of the sender's encodings is active&lt;sup&gt;1&lt;/sup&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fa77ba492c1bd14bb4e9898e50889bc5d9c4c65" translate="yes" xml:space="preserve">
          <source>Offline/background audio processing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6f184898c4fbb359ed28e5bcc964b492b20b952" translate="yes" xml:space="preserve">
          <source>OfflineAudioCompletionEvent</source>
          <target state="translated">OfflineAudioCompletionEvent</target>
        </trans-unit>
        <trans-unit id="ab053ab0d276313a661c95ea345ac221f8bf2e44" translate="yes" xml:space="preserve">
          <source>OfflineAudioCompletionEvent.constructor</source>
          <target state="translated">OfflineAudioCompletionEvent.constructor</target>
        </trans-unit>
        <trans-unit id="b12111ee5fdd8df085f46b8b05d395096bb439f5" translate="yes" xml:space="preserve">
          <source>OfflineAudioCompletionEvent.renderedBuffer</source>
          <target state="translated">OfflineAudioCompletionEvent.renderedBuffer</target>
        </trans-unit>
        <trans-unit id="dea5ba9a89781842beac44b87ae207ab6325d832" translate="yes" xml:space="preserve">
          <source>OfflineAudioContext</source>
          <target state="translated">OfflineAudioContext</target>
        </trans-unit>
        <trans-unit id="727edfe4c365f7064b6da9a4a56b15c7307c6970" translate="yes" xml:space="preserve">
          <source>OfflineAudioContext.constructor</source>
          <target state="translated">OfflineAudioContext.constructor</target>
        </trans-unit>
        <trans-unit id="aaaad9687a072645c167549ba25910a365cd6acc" translate="yes" xml:space="preserve">
          <source>OfflineAudioContext.length</source>
          <target state="translated">OfflineAudioContext.length</target>
        </trans-unit>
        <trans-unit id="73a7c34ec4084c38b4438a3bd239d1ef3f65d7e5" translate="yes" xml:space="preserve">
          <source>OfflineAudioContext.oncomplete</source>
          <target state="translated">OfflineAudioContext.oncomplete</target>
        </trans-unit>
        <trans-unit id="891bbed83af5a00c619b1b35c45d546de9e26064" translate="yes" xml:space="preserve">
          <source>OfflineAudioContext.resume</source>
          <target state="translated">OfflineAudioContext.resume</target>
        </trans-unit>
        <trans-unit id="95c3bc69e81791e46648cbe9f3caf1cb33df87f4" translate="yes" xml:space="preserve">
          <source>OfflineAudioContext.startRendering</source>
          <target state="translated">OfflineAudioContext.startRendering</target>
        </trans-unit>
        <trans-unit id="5c99290ee95030913569732d3b2a37f12754c71c" translate="yes" xml:space="preserve">
          <source>OfflineAudioContext.suspend</source>
          <target state="translated">OfflineAudioContext.suspend</target>
        </trans-unit>
        <trans-unit id="9bad367107327dad4c497abc4fb11fbca29c0a96" translate="yes" xml:space="preserve">
          <source>Offscreen canvas</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fc7d5d90de1ac47f25ea73a2946b69fc6186440" translate="yes" xml:space="preserve">
          <source>OffscreenCanvas</source>
          <target state="translated">OffscreenCanvas</target>
        </trans-unit>
        <trans-unit id="156b589350e116e521fda6cc52093f4c1004f4a3" translate="yes" xml:space="preserve">
          <source>OffscreenCanvas.constructor</source>
          <target state="translated">OffscreenCanvas.constructor</target>
        </trans-unit>
        <trans-unit id="efde8d0901e39e3536523c956355415fea8aa2cc" translate="yes" xml:space="preserve">
          <source>OffscreenCanvas.getContext</source>
          <target state="translated">OffscreenCanvas.getContext</target>
        </trans-unit>
        <trans-unit id="de27704c6a7e1fd15e366185b9bc1e4b912fc501" translate="yes" xml:space="preserve">
          <source>OffscreenCanvas.height</source>
          <target state="translated">OffscreenCanvas.height</target>
        </trans-unit>
        <trans-unit id="d8c4367a54337efe2dc2a9e9f16dbdc6c9ee7f5c" translate="yes" xml:space="preserve">
          <source>OffscreenCanvas.toBlob</source>
          <target state="translated">OffscreenCanvas.toBlob</target>
        </trans-unit>
        <trans-unit id="f0833aa2f77b3ef2933eb7935aaa6896134ec178" translate="yes" xml:space="preserve">
          <source>OffscreenCanvas.width</source>
          <target state="translated">OffscreenCanvas.width</target>
        </trans-unit>
        <trans-unit id="83ff1422e228880822c86ba748938f94b95a2647" translate="yes" xml:space="preserve">
          <source>Offset for the alignment character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcccd880a64211f7a441bf426e83c5af516691a7" translate="yes" xml:space="preserve">
          <source>Offset. Defaults to 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a65db1251e03c7e66df501a7f30c01863d3c49b" translate="yes" xml:space="preserve">
          <source>Offsets for each keyframe can be specified by providing an &lt;code&gt;offset&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eb5e6f94c5cc9a05475447c292eef2c001544b1" translate="yes" xml:space="preserve">
          <source>Often &lt;code&gt;activeElement&lt;/code&gt; will return an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input&quot;&gt;&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea&quot;&gt;&lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;&lt;/a&gt; object if it has the text selection at the time. If so, you can get more detail by using the element's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/document/selectionStart&quot;&gt;&lt;code&gt;selectionStart&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/document/selectionEnd&quot;&gt;&lt;code&gt;selectionEnd&lt;/code&gt;&lt;/a&gt; properties. Other times the focused element might be a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select&quot;&gt;&lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;&lt;/a&gt; element (menu) or an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input&quot;&gt;&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;&lt;/a&gt; element, of &lt;code&gt;type&lt;/code&gt;&lt;code&gt;&quot;button&quot;&lt;/code&gt;, &lt;code&gt;&quot;checkbox&quot;&lt;/code&gt;, or &lt;code&gt;&quot;radio&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fcd4774491ae26e7f9aa8ce53f0b78812705124" translate="yes" xml:space="preserve">
          <source>Often, you will just want to &lt;a href=&quot;../windoworworkerglobalscope/fetch&quot;&gt;&lt;code&gt;fetch()&lt;/code&gt;&lt;/a&gt; one or more requests, then add the result straight to your cache. In such cases you are better off using &lt;a href=&quot;add&quot;&gt;&lt;code&gt;Cache.add()&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;addall&quot;&gt;&lt;code&gt;Cache.addAll()&lt;/code&gt;&lt;/a&gt;, as they are shorthand functions for one or more of these operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40ee02d8f70e1c20fc70bea55f7e7a148c7a8e77" translate="yes" xml:space="preserve">
          <source>Older callback syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca2ed3b887be02deb6fcfc9e1b10dd0b46bc440e" translate="yes" xml:space="preserve">
          <source>Older callback syntax:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="427329cc3f83b21d344fafdec4a255d09add0510" translate="yes" xml:space="preserve">
          <source>Older versions of Chrome implement &lt;code&gt;navigator.webkitGetUserMedia&lt;/code&gt;, a prefixed form of the legacy &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/Navigator/getUserMedia&quot;&gt;&lt;code&gt;navigator.getUserMedia&lt;/code&gt;&lt;/a&gt; API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ada565a60a77699360451408decb2c95bad49b46" translate="yes" xml:space="preserve">
          <source>Older versions of Firefox implement &lt;code&gt;navigator.mozGetUserMedia&lt;/code&gt;, a prefixed form of the legacy &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/Navigator/getUserMedia&quot;&gt;&lt;code&gt;navigator.getUserMedia&lt;/code&gt;&lt;/a&gt; API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af02c3a8020d36db6e962484ceac50ae569cb445" translate="yes" xml:space="preserve">
          <source>Older versions of IE supported an equivalent, proprietary &lt;code&gt;EventTarget.attachEvent()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b176e73f9e3e0479eb90efcf1a74eb01a9e31014" translate="yes" xml:space="preserve">
          <source>Older versions of IE supported an equivalent, proprietary &lt;code&gt;EventTarget.detachEvent()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c3351d1f2bbdf306dbb43f4037dce8c2700cdda" translate="yes" xml:space="preserve">
          <source>Older versions of IE supported an equivalent, proprietary &lt;code&gt;EventTarget.fireEvent()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="624a4e1e0620385e6628ff01c09e3d7049adfef2" translate="yes" xml:space="preserve">
          <source>Older versions of Opera implement &lt;code&gt;navigator.webkitGetUserMedia&lt;/code&gt;, a prefixed form of the legacy &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/Navigator/getUserMedia&quot;&gt;&lt;code&gt;navigator.getUserMedia&lt;/code&gt;&lt;/a&gt; API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39a8ed138987425fe872726ec9c4f23e2594cec8" translate="yes" xml:space="preserve">
          <source>Older versions of the Media Source specification required using &lt;a href=&quot;../url/createobjecturl&quot;&gt;&lt;code&gt;createObjectURL()&lt;/code&gt;&lt;/a&gt; to create an object URL then setting &lt;a href=&quot;src&quot;&gt;&lt;code&gt;src&lt;/code&gt;&lt;/a&gt; to that URL. Now you can just set &lt;code&gt;srcObject&lt;/code&gt; to the &lt;a href=&quot;../mediastream&quot;&gt;&lt;code&gt;MediaStream&lt;/code&gt;&lt;/a&gt; directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa7ec04b62bfa30e221ca8bf379b4a20172e0968" translate="yes" xml:space="preserve">
          <source>Older versions of the WebRTC specification included an &lt;code&gt;url&lt;/code&gt; property instead of &lt;code&gt;urls&lt;/code&gt;; this was changed in order to let you specify multiple addresses for each server in the list, as shown in the example below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0842b5b896f933ca533206f578c7cdbad322e4b8" translate="yes" xml:space="preserve">
          <source>Older versions of the specification used &lt;code&gt;SecurityError&lt;/code&gt; for this instead; &lt;code&gt;SecurityError&lt;/code&gt; has taken on a new meaning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17dcc4f62ddca64550895ece1b2509f7f2f1b2f3" translate="yes" xml:space="preserve">
          <source>Older versions of this specification used &lt;code&gt;createObjectURL()&lt;/code&gt; for &lt;a href=&quot;../mediastream&quot;&gt;&lt;code&gt;MediaStream&lt;/code&gt;&lt;/a&gt; objects; this is no longer supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc3090ad92836667005e9b3fc08948cc3bdd977f" translate="yes" xml:space="preserve">
          <source>Older way to register event listeners</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22a726065059758d7814683c2cb6db43e037c943" translate="yes" xml:space="preserve">
          <source>On &lt;code&gt;mousemove&lt;/code&gt; events, the &lt;code&gt;which&lt;/code&gt; property is incorrectly always set to &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="066bf4e8e6cde9c3b6fc6977835eb5d510e264a2" translate="yes" xml:space="preserve">
          <source>On Apple Safari and Google Chrome this property always returns &lt;code&gt;20030107&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d462a75ee0b75bf6760ac061a566c59d5cf4e58" translate="yes" xml:space="preserve">
          <source>On BUNDLE-aware connections, the ICE agent should gather candidates for all of the media types in use (audio, video, and data). Otherwise, the ICE agent should only negotiate one audio and video track on separate transports.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ab4bf25c7593d91ee451e6e92f27e0fc8e703cf" translate="yes" xml:space="preserve">
          <source>On Event Handler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39b2420a500e4f911d2597dd0dd3a4b418825fca" translate="yes" xml:space="preserve">
          <source>On Firefox, the &lt;code&gt;general.platform.override&lt;/code&gt; preference can be used to override the value that would otherwise be returned by this property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="217e845219c2796314882522b5454da3e8df984b" translate="yes" xml:space="preserve">
          <source>On Firefox, the event handler property corresponding to the &lt;code&gt;change&lt;/code&gt; event is &lt;code&gt;ontypechange&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="024d6cf71bcbfc29ac116a37460fb6cc96c11548" translate="yes" xml:space="preserve">
          <source>On IE 6-8 the event model is different. Event listeners are attached with the non-standard &lt;a href=&quot;../eventtarget/addeventlistener&quot;&gt;&lt;code&gt;EventTarget.attachEvent&lt;/code&gt;&lt;/a&gt; method. In this model, the event object has a &lt;a href=&quot;srcelement&quot;&gt;&lt;code&gt;Event.srcElement&lt;/code&gt;&lt;/a&gt; property, instead of the &lt;code&gt;target&lt;/code&gt; property, and it has the same semantics as &lt;code&gt;event.target&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec62b84fc63334dc1e0b4fb65e27f2ac3422c300" translate="yes" xml:space="preserve">
          <source>On IE, this property returns undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fef0ea9991a66989022e4d1c866e2b13aa0b133c" translate="yes" xml:space="preserve">
          <source>On Internet Explorer 6 through 8, the event model is different. Event listeners are attached with the non-standard &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/EventTarget/attachEvent&quot;&gt;&lt;code&gt;EventTarget.attachEvent&lt;/code&gt;&lt;/a&gt; method. In this model, there is no equivalent to &lt;code&gt;event.currentTarget&lt;/code&gt; and &lt;code&gt;this&lt;/code&gt; is the global object. One solution to emulate the &lt;code&gt;event.currentTarget&lt;/code&gt; feature is to wrap your handler in a function calling the handler using &lt;code&gt;Function.prototype.call&lt;/code&gt; with the element as a first argument. This way, &lt;code&gt;this&lt;/code&gt; will be the expected value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1875c4e6789db9b589aeef7330c8db62312feec9" translate="yes" xml:space="preserve">
          <source>On Linux (GTK), the 4th button and the 5th button are not supported. In addition, a mouseup event always has the releasing button information in this attribute value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4f798224e4efeb57764617e58237c93974472f0" translate="yes" xml:space="preserve">
          <source>On Linux, Firefox 12 and earlier also dispatched the &lt;code&gt;keypress&lt;/code&gt; event for these keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae78774b0786aff7ba6dae17f6eba2b70187b391" translate="yes" xml:space="preserve">
          <source>On Mac OS X 10.5, the buttons attribute always returns 0 because there is no platform API for implementing this feature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a0753377afe1ccba2d0234b3f0aa0e0fe5b2c26" translate="yes" xml:space="preserve">
          <source>On Mac OS X, it's hard to get scancode or something which can distinguish a physical key from a key event. Therefore, Gecko always maps &lt;code&gt;code&lt;/code&gt; value from the virtual keycode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0bb41d97914788ffb577fd0362164910ef7dec8" translate="yes" xml:space="preserve">
          <source>On a Windows system, this would function similarly, by opening the window and sizing it vertically so it uses all available vertical space, leaving room for the taskbar and any other interface elements that reserve space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb9c1ccd75a6c10aec732b05a2c87098e5ea7822" translate="yes" xml:space="preserve">
          <source>On a more fundamental level, the returned value is the value of &lt;a href=&quot;pendinglocaldescription&quot;&gt;&lt;code&gt;RTCPeerConnection.pendingLocalDescription&lt;/code&gt;&lt;/a&gt; if that property isn't &lt;code&gt;null&lt;/code&gt;; otherwise, the value of &lt;a href=&quot;currentlocaldescription&quot;&gt;&lt;code&gt;RTCPeerConnection.currentLocalDescription&lt;/code&gt;&lt;/a&gt; is returned. See &lt;a href=&quot;../webrtc_api/connectivity#Pending_and_current_descriptions&quot;&gt;Pending and current descriptions&lt;/a&gt; in &lt;a href=&quot;../webrtc_api/connectivity&quot;&gt;WebRTC connectivity&lt;/a&gt; for details on this algorithm and why it's used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cbf8fe24df786185f11ac84106589c6af04b7e8" translate="yes" xml:space="preserve">
          <source>On a more fundamental level, the returned value is the value of &lt;a href=&quot;pendingremotedescription&quot;&gt;&lt;code&gt;RTCPeerConnection.pendingRemoteDescription&lt;/code&gt;&lt;/a&gt; if that property isn't &lt;code&gt;null&lt;/code&gt;; otherwise, the value of &lt;a href=&quot;currentremotedescription&quot;&gt;&lt;code&gt;RTCPeerConnection.currentRemoteDescription&lt;/code&gt;&lt;/a&gt; is returned. See &lt;a href=&quot;../webrtc_api/connectivity#Pending_and_current_descriptions&quot;&gt;Pending and current descriptions&lt;/a&gt; in &lt;a href=&quot;../webrtc_api/connectivity&quot;&gt;WebRTC connectivity&lt;/a&gt; for details on this algorithm and why it's used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01727e4083b85f503b21e5a9bc120186f80e21d5" translate="yes" xml:space="preserve">
          <source>On an editable document, executes a formating command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec20e8627b3f61c54b055576d4ea454b39ba0645" translate="yes" xml:space="preserve">
          <source>On an outermost &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Element/svg&quot;&gt;&lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;&lt;/a&gt; element, this float attribute indicates the current scale factor relative to the initial view to take into account user magnification and panning operations. DOM attributes &lt;code&gt;currentScale&lt;/code&gt; and &lt;code&gt;currentTranslate&lt;/code&gt; are equivalent to the 2x3 matrix &lt;code&gt;[a b c d e f] = [currentScale 0 0 currentScale currentTranslate.x currentTranslate.y]&lt;/code&gt;. If &quot;magnification&quot; is enabled (i.e., &lt;code&gt;zoomAndPan=&quot;magnify&quot;&lt;/code&gt;), then the effect is as if an extra transformation were placed at the outermost level on the SVG document fragment (i.e., outside the outermost &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Element/svg&quot;&gt;&lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;&lt;/a&gt; element).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8da6bbdf401095b3073e625f2cfe628558db220c" translate="yes" xml:space="preserve">
          <source>On mobile phones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb8233962f59cfeb43f422c297d220e84b9a9f42" translate="yes" xml:space="preserve">
          <source>On older browsers that don't support the &lt;code&gt;options&lt;/code&gt; parameter to &lt;code&gt;addEventListener()&lt;/code&gt;, attempting to use it prevents the use of the &lt;code&gt;useCapture&lt;/code&gt; argument without proper use of &lt;a href=&quot;#Safely_detecting_option_support&quot;&gt;feature detection&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c6ccee30cd8d18ea7bd07105cd48a3b0c89c764" translate="yes" xml:space="preserve">
          <source>On return, &lt;code&gt;charging&lt;/code&gt; indicates whether or not the &lt;code&gt;&lt;em&gt;battery&lt;/em&gt;&lt;/code&gt;, which is a &lt;a href=&quot;../batterymanager&quot;&gt;&lt;code&gt;BatteryManager&lt;/code&gt;&lt;/a&gt; object, is currently being charged; if the battery is charging, this value is &lt;code&gt;true&lt;/code&gt;. Otherwise, the value is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff463e5f4e365386036aea1457d4666cea62fd04" translate="yes" xml:space="preserve">
          <source>On return, &lt;code&gt;currentStyleSheetSet&lt;/code&gt; indicates the name of the style sheet set currently in use. You can also set the current style sheet set using this property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff9db2e89bb457c59d04f361549abdec17720392" translate="yes" xml:space="preserve">
          <source>On return, &lt;code&gt;exampleSocket.readyState&lt;/code&gt; is &lt;code&gt;CONNECTING&lt;/code&gt;. The &lt;code&gt;readyState&lt;/code&gt; will become &lt;code&gt;OPEN&lt;/code&gt; once the connection is ready to transfer data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40a92fd864f59edbceab19f52be54c4bcec55d77" translate="yes" xml:space="preserve">
          <source>On return, &lt;code&gt;intViewportHeight&lt;/code&gt; is the height of the browser window's viewport.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e600f39aa499b80a3660fe7ae11e42e4936846fe" translate="yes" xml:space="preserve">
          <source>On return, &lt;code&gt;lastStyleSheetSet&lt;/code&gt; indicates the style sheet set that was most recently set. If the current style sheet set has not been changed by setting &lt;a href=&quot;selectedstylesheetset&quot;&gt;&lt;code&gt;document.selectedStyleSheetSet&lt;/code&gt;&lt;/a&gt;, the returned value is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="657ed8d2fae14b93e376c46863242d8e0ed43778" translate="yes" xml:space="preserve">
          <source>On return, &lt;code&gt;level&lt;/code&gt; is a number representing the system's battery charge level scaled to a value between 0.0 and 1.0. A value of 0 means the &lt;code&gt;&lt;em&gt;battery&lt;/em&gt;&lt;/code&gt;, which is a &lt;a href=&quot;../batterymanager&quot;&gt;&lt;code&gt;BatteryManager&lt;/code&gt;&lt;/a&gt; object, is empty and the system is about to be suspended. A value of 1.0 means the battery is full. A value of 1.0 is also returned if the implementation isn't able to determine the battery charge level or if the system is not battery-powered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="830875451bb8d828b1f855f177e59dc15a4771e9" translate="yes" xml:space="preserve">
          <source>On return, &lt;code&gt;outWindowHeight&lt;/code&gt; contains the height of the outside of the window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a671b9879b314eb937ddd0cc14bd194b5f7cb3d" translate="yes" xml:space="preserve">
          <source>On return, &lt;code&gt;outWindowWidth&lt;/code&gt; is the width of the outside of the window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58ba502684f8c7112b9510cc46bc7c07cc76de0c" translate="yes" xml:space="preserve">
          <source>On return, &lt;code&gt;preferredStyleSheetSet&lt;/code&gt; indicates the author's preferred style sheet set. This is determined from the order of style sheet declarations and the &lt;code&gt;Default-Style&lt;/code&gt; HTTP header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15ad415a0014b48f7f3ad51038e4a29e0b950c28" translate="yes" xml:space="preserve">
          <source>On return, &lt;code&gt;sets&lt;/code&gt; is a list of style sheet sets that are available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b66df698b0be7d23341bcf3bbf615af242ee374" translate="yes" xml:space="preserve">
          <source>On return, &lt;code&gt;time&lt;/code&gt; is the remaining time in seconds until the &lt;code&gt;&lt;em&gt;battery&lt;/em&gt;&lt;/code&gt;, which is a &lt;a href=&quot;../batterymanager&quot;&gt;&lt;code&gt;BatteryManager&lt;/code&gt;&lt;/a&gt; object, is fully charged, or 0 if the battery is already fully charged. If the battery is currently discharging, this value is &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Infinity&quot;&gt;Infinity&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d735c6a0c45710fdc07a414d65801c0a3763704d" translate="yes" xml:space="preserve">
          <source>On return, &lt;code&gt;time&lt;/code&gt; is the remaining time in seconds until the &lt;code&gt;&lt;em&gt;battery&lt;/em&gt;&lt;/code&gt;, which is a &lt;a href=&quot;../batterymanager&quot;&gt;&lt;code&gt;BatteryManager&lt;/code&gt;&lt;/a&gt; object, is fully discharged and the system will suspend. This value is &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Infinity&quot;&gt;Infinity&lt;/a&gt;&lt;/code&gt; if the battery is currently charging rather than discharging, or if the system is unable to report the remaining discharging time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32f4fdc86cfdf658e4f4a2e4f79e66adcc0a3892" translate="yes" xml:space="preserve">
          <source>On return, &lt;em&gt;&lt;code&gt;absolute&lt;/code&gt;&lt;/em&gt; is &lt;code&gt;true&lt;/code&gt; if the orientation data in &lt;code&gt;instanceOfDeviceOrientationEvent&lt;/code&gt; is provided as the difference between the Earth's coordinate frame and the device's coordinate frame, or &lt;code&gt;false&lt;/code&gt; if the orientation data is being provided in reference to some arbitrary, device-determined coordinate frame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="076a3049e7156092e3cde1bd2c4214a63063c72d" translate="yes" xml:space="preserve">
          <source>On some browsers, the &lt;code&gt;parentElement&lt;/code&gt; property is only defined on nodes that are themselves an &lt;a href=&quot;../element&quot;&gt;&lt;code&gt;Element&lt;/code&gt;&lt;/a&gt;. In particular, it is not defined on text nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79d896dac983f6a0fd53b0dfabcd250a45a081bc" translate="yes" xml:space="preserve">
          <source>On supported platforms, showing a system notification generally involves two things. First, the user needs to grant the current origin permission to display system notifications, which is generally done when the app or site initialises, using the &lt;a href=&quot;notification/requestpermission&quot;&gt;&lt;code&gt;Notification.requestPermission()&lt;/code&gt;&lt;/a&gt; method. This will spawn a request dialog, along the following lines:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18a6632929f0bd7b1a69961244d06256e8feb7ea" translate="yes" xml:space="preserve">
          <source>On systems using display scaling, &lt;code&gt;scrollLeft&lt;/code&gt; may give you a decimal value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="453649c9db64a85649b22e99100529ffd5de25a3" translate="yes" xml:space="preserve">
          <source>On systems using display scaling, &lt;code&gt;scrollTop&lt;/code&gt; may give you a decimal value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe7b10d6f27eee24ae0be078c8347328628ba63c" translate="yes" xml:space="preserve">
          <source>On the UI we'll expose the noise duration and the frequency we want to band, allowing the user to adjust them via range inputs and event handlers just like in previous sections:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8bb5847ec108733f05d630258862289a72beaa5" translate="yes" xml:space="preserve">
          <source>On the events page (see &lt;a href=&quot;https://github.com/mdn/dom-examples/blob/master/web-storage/event.js&quot;&gt;events.js&lt;/a&gt;) the only JavaScript is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fcb38b0a93020f70655401f3eaf5acc3bad2dcb" translate="yes" xml:space="preserve">
          <source>On the next line you can write the caption for this cue which will run from 1 sec to 5&lt;sup&gt;th&lt;/sup&gt; sec.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fdf9b02bb522107b45395a413d1c667aca9feb5" translate="yes" xml:space="preserve">
          <source>On the other hand, if the tone buffer is empty, our example is designed to disconnect the call. This is done by stopping each stream on both the caller and the receiver by iterating over each &lt;code&gt;RTCPeerConnection&lt;/code&gt;'s track list (as returned by its &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/getTracks&quot;&gt;&lt;code&gt;getTracks()&lt;/code&gt;&lt;/a&gt; method) and calling each track's &lt;a href=&quot;../mediastreamtrack/stop&quot;&gt;&lt;code&gt;stop()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="942b93a188c8fef67ef313e6ffdf9637fd1502f8" translate="yes" xml:space="preserve">
          <source>On the other hand, if you're trying to emulate WebKit's behavior on Gecko, you need to place the element you want to present inside another element, which you'll make fullscreen instead, and use CSS rules to adjust the inner element to match the appearance you want.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90b7b50b0660cb9ab3daa00eac8f9fd61cd59081" translate="yes" xml:space="preserve">
          <source>On the other platforms, &quot;Alt&quot;, &quot;Control&quot; and &quot;Shift&quot; may be supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="807b52a686d930ca00b85eb098e151f8a37e3660" translate="yes" xml:space="preserve">
          <source>On the remote peer, when we receive an SDP offer with the directionality set to &lt;code&gt;&quot;sendonly&quot;&lt;/code&gt;, we handle it using the &lt;code&gt;holdRequested()&lt;/code&gt; method, which accepts as input an SDP offer string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46ede745d73f06100fc6c1da029fb2cccc1b4f7e" translate="yes" xml:space="preserve">
          <source>On the right side of the settings bar, we place a label and a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select&quot;&gt;&lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;&lt;/a&gt; element named &lt;code&gt;&quot;waveform&quot;&lt;/code&gt; whose options correspond to the available waveforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7777b1a3ba2118977f4d9160f2b21034cac1d185" translate="yes" xml:space="preserve">
          <source>On the right we see a stop button and the &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; element which will be used to play back the recorded video. Notice that the playback panel doesn't have autoplay set (so the playback doesn't start as soon as media arrives), and it has &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-controls&quot;&gt;controls&lt;/a&gt;&lt;/code&gt; set, which tells it to show the user controls to play, pause, and so forth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97ee75378bdd6ebd971a97ab9394a9cd0fad9eca" translate="yes" xml:space="preserve">
          <source>On the same line, we then have a string of &lt;code&gt;--&amp;gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9603af5f83f90a9635b7394c7a652585b5138ff2" translate="yes" xml:space="preserve">
          <source>On the software side, Valve has created &lt;a href=&quot;http://store.steampowered.com/universe/vr&quot;&gt;SteamVR&lt;/a&gt; software, which is compatible with the VIVE and other solutions, and serves to provide access to software, such as a usable VR UI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bff2b544db15906a5ac0c1eaff709942e3fa986e" translate="yes" xml:space="preserve">
          <source>On to the end of the function call, we chain the promise &lt;code&gt;then()&lt;/code&gt; method, which contains two functions &amp;mdash; the first one is executed when the promise successfully resolves, and the second is called when the promise is rejected. In the resolved case, we display the image inside &lt;code&gt;myImage&lt;/code&gt; and append it to the body (it&amp;rsquo;s argument is the &lt;code&gt;request.response&lt;/code&gt; contained inside the promise&amp;rsquo;s &lt;code&gt;resolve&lt;/code&gt; method); in the rejected case we return an error to the console.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26839ca2c37222b54d3cae48838ce848cbb8db08" translate="yes" xml:space="preserve">
          <source>Once &lt;code&gt;getData()&lt;/code&gt; has finished running, we start the audio source playing with &lt;code&gt;start(0)&lt;/code&gt;, then disable the play button so it can't be clicked again when it is already playing (this would cause an error.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31ba9960d333767cadcfb9a7d551f4a938cfdd7f" translate="yes" xml:space="preserve">
          <source>Once &lt;code&gt;getUserMedia&lt;/code&gt; has created a media stream successfully, you create a new Media Recorder instance with the &lt;code&gt;MediaRecorder()&lt;/code&gt; constructor and pass it the stream directly. This is your entry point into using the MediaRecorder API &amp;mdash; the stream is now ready to be captured into a &lt;a href=&quot;../blob&quot;&gt;&lt;code&gt;Blob&lt;/code&gt;&lt;/a&gt;, in the default encoding format of your browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a56212c72e29273392556c6a5e62bc45a14eebe" translate="yes" xml:space="preserve">
          <source>Once &lt;code&gt;options&lt;/code&gt; is ready, we create the new observer, calling the &lt;a href=&quot;intersectionobserver/intersectionobserver&quot;&gt;&lt;code&gt;IntersectionObserver()&lt;/code&gt;&lt;/a&gt; constructor, specifying a function to be called when intersection crosses one of our thresholds, &lt;code&gt;handleIntersect()&lt;/code&gt;, and our set of options. We then call &lt;a href=&quot;intersectionobserver/observe&quot;&gt;&lt;code&gt;observe()&lt;/code&gt;&lt;/a&gt; on the returned observer, passing into it the desired target element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="847634d38d9a65c172003832a2ea8b40e0aeef28" translate="yes" xml:space="preserve">
          <source>Once &lt;code&gt;setLocalDescription()&lt;/code&gt;'s fulfillment handler has run, the ICE agent begins sending &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/icecandidate&quot;&gt;icecandidate&lt;/a&gt;&lt;/code&gt; events to the &lt;a href=&quot;../rtcpeerconnection&quot;&gt;&lt;code&gt;RTCPeerConnection&lt;/code&gt;&lt;/a&gt;, one for each potential configuration it discovers. Our handler for the &lt;code&gt;icecandidate&lt;/code&gt; event is responsible for transmitting the candidates to the other peer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fac54617c6570c508c55f0ba842b2e2561947063" translate="yes" xml:space="preserve">
          <source>Once a &lt;a href=&quot;response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; is retrieved, there are a number of methods available to define what the body content is and how it should be handled (see &lt;a href=&quot;body&quot;&gt;&lt;code&gt;Body&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3937cc0c4743a3885b091e4db563d680dce10c7c" translate="yes" xml:space="preserve">
          <source>Once a &lt;code&gt;Range&lt;/code&gt; is created, you need to set its boundary points before you can make use of most of its methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45035e2bcd605571b5cfc3c9485987afbb085e6a" translate="yes" xml:space="preserve">
          <source>Once a WebGL extension is enabled, you are able to use the methods, properties or constants that this extension object provides.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3576e9315a58036306a636b38a9c2d7a78a5b5ca" translate="yes" xml:space="preserve">
          <source>Once a timer's code has finished running, the duration of time it took to execute is subtracted from its window's timeout budget.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f385fe949119038f58be21926147f0310274b87" translate="yes" xml:space="preserve">
          <source>Once all of the shaders are compiled, the program is linked using &lt;a href=&quot;../webglrenderingcontext/linkprogram&quot;&gt;&lt;code&gt;gl.linkProgram()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5e05ab28ad4a3f7b6e91027318655ad3784c500" translate="yes" xml:space="preserve">
          <source>Once all of the transactions have completed, the database connection is closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="316e82b63441beb45f9c011c53eb5b5dfb032fb4" translate="yes" xml:space="preserve">
          <source>Once all the gain nodes are created, we create the &lt;a href=&quot;../constantsourcenode&quot;&gt;&lt;code&gt;ConstantSourceNode&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;constantNode&lt;/code&gt;. We connect its output to the &lt;code&gt;gain&lt;/code&gt;&lt;a href=&quot;../audioparam&quot;&gt;&lt;code&gt;AudioParam&lt;/code&gt;&lt;/a&gt; on both &lt;code&gt;gainNode2&lt;/code&gt; and &lt;code&gt;gainNode3&lt;/code&gt;, and we start the constant node running by calling its &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ConstantSourceNode/start&quot;&gt;&lt;code&gt;start()&lt;/code&gt;&lt;/a&gt; method; now it's sending the value 0.5 to the two gain nodes' values, and any change to &lt;a href=&quot;../constantsourcenode/offset&quot;&gt;&lt;code&gt;constantNode.offset&lt;/code&gt;&lt;/a&gt; will automatically set the gain of both &lt;code&gt;gainNode2&lt;/code&gt; and &lt;code&gt;gainNode3&lt;/code&gt; (affecting their audio inputs as expected).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b821572160656d16d9dbab41df175be9aae8d6a8" translate="yes" xml:space="preserve">
          <source>Once all three oscillators have been created, they're started by calling each one's &lt;a href=&quot;../audioscheduledsourcenode/start&quot;&gt;&lt;code&gt;ConstantSourceNode.start()&lt;/code&gt;&lt;/a&gt; method in turn, and &lt;code&gt;playing&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt; to track that the tones are playing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03f0e5c97f1b63d578272d3cb978c4f2d8205666" translate="yes" xml:space="preserve">
          <source>Once applied, the number of samples is reduced to its initial numbers. This leads to better results by avoiding some aliasing, but comes at the expense of a lower precision shaping curve.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca88123f72e4f509e0c46fb12f389ad5d73d2c4b" translate="yes" xml:space="preserve">
          <source>Once both the caller's and the receiver's media tracks are all stopped, we pause the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio&quot;&gt;&lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt;&lt;/a&gt; element and set its &lt;a href=&quot;../htmlmediaelement/srcobject&quot;&gt;&lt;code&gt;srcObject&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;null&lt;/code&gt;. This detaches the audio stream from the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio&quot;&gt;&lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt;&lt;/a&gt; element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4851f80ec55861b72f3a020342cf6b3279155ee3" translate="yes" xml:space="preserve">
          <source>Once captured, the event object gives access to different kinds of information:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b84e3be4883262c742d6aa89892ac9a346ffb72" translate="yes" xml:space="preserve">
          <source>Once captured, the event object gives access to the light intensity expressed in &lt;a href=&quot;https://en.wikipedia.org/wiki/lux&quot;&gt;lux&lt;/a&gt; through the &lt;a href=&quot;devicelightevent/value&quot;&gt;&lt;code&gt;DeviceLightEvent.value&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3dac86eb97d11ac597ac336ba5fb460541a07b3" translate="yes" xml:space="preserve">
          <source>Once media has been selected and loading is ready to begin, the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/loadstart&quot;&gt;loadstart&lt;/a&gt;&lt;/code&gt; event is delivered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c29e75a47fd06e58a7b2ed0ccb6abbd1e092b3d" translate="yes" xml:space="preserve">
          <source>Once mouse capture is released, mouse events will no longer all be directed to the element on which capture is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e84494df933402b9ee311337f6e13862ea3b05ad" translate="yes" xml:space="preserve">
          <source>Once per pass through the browser's event loop, each &lt;a href=&quot;../intersectionobserver&quot;&gt;&lt;code&gt;IntersectionObserver&lt;/code&gt;&lt;/a&gt; checks to see if any of its target elements have passed through any of the observer's intersection ratio thresholds. For each observer, a list of targets that have done so is compiled, and sent to the observer's callback as an array of &lt;a href=&quot;../intersectionobserverentry&quot;&gt;&lt;code&gt;IntersectionObserverEntry&lt;/code&gt;&lt;/a&gt; objects. Our callback, &lt;code&gt;intersectionCallback()&lt;/code&gt;, looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97aad57370d7a7ae33c3e795bd98303d123f0568" translate="yes" xml:space="preserve">
          <source>Once successfully registered, a service worker can and will be terminated when idle to conserve memory and processor power. An active service worker is automatically restarted to respond to events, such as &lt;a href=&quot;serviceworkerglobalscope/onfetch&quot;&gt;&lt;code&gt;ServiceWorkerGlobalScope.onfetch&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;serviceworkerglobalscope/onmessage&quot;&gt;&lt;code&gt;ServiceWorkerGlobalScope.onmessage&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11e337b979f2b9b28e0f43e98b8d8f70188cceef" translate="yes" xml:space="preserve">
          <source>Once that succeeds, the answer is sent to the signaling server using whatever protocol you see fit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f671214c1183ac872538f767587800146db7e63d" translate="yes" xml:space="preserve">
          <source>Once that's done, &lt;code&gt;applyConstraints()&lt;/code&gt; is called on the audio track (if there is one) to apply the new audio constraints. If this succeeds, the contents of the audio track's current settings box are updated based on the result of calling its &lt;a href=&quot;../mediastreamtrack/getsettings&quot;&gt;&lt;code&gt;getSettings()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52c3333737ab74be2857de272484983cc356b9b2" translate="yes" xml:space="preserve">
          <source>Once that's done, &lt;code&gt;insertAdjacentHTML()&lt;/code&gt; is used to insert the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element into the DOM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d3fe11d4dd3df4b89a9d03d33e34ce8ba20434c" translate="yes" xml:space="preserve">
          <source>Once that's done, we create a JavaScript array containing the position for each vertex of the square plane. This is then converted into an array of floats and passed into the &lt;code&gt;gl&lt;/code&gt; object's &lt;a href=&quot;../../webglrenderingcontext/bufferdata&quot;&gt;&lt;code&gt;bufferData()&lt;/code&gt;&lt;/a&gt; method to establish the vertex positions for the object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71b9273df664ba0f57b24fab23072a7477335be8" translate="yes" xml:space="preserve">
          <source>Once the &lt;a href=&quot;../nodelist&quot;&gt;&lt;code&gt;NodeList&lt;/code&gt;&lt;/a&gt; of matching elements is returned, you can examine it just like any array. If the array is empty (that is, its &lt;code&gt;length&lt;/code&gt; property is 0), then no matches were found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81a8c6aeac0fc060bc2a150aee96a69d58ae2a29" translate="yes" xml:space="preserve">
          <source>Once the &lt;a href=&quot;../rtcpeerconnection&quot;&gt;&lt;code&gt;RTCPeerConnection&lt;/code&gt;&lt;/a&gt; is open, the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/datachannel&quot;&gt;datachannel&lt;/a&gt;&lt;/code&gt; event is sent to the remote to complete the process of opening the data channel; this invokes our &lt;code&gt;receiveChannelCallback()&lt;/code&gt; method, which looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9327f32c3163ae8f0107847fa8b4a5671b73cb8" translate="yes" xml:space="preserve">
          <source>Once the &lt;code&gt;PaymentRequest&lt;/code&gt; object has been created, you call the &lt;a href=&quot;../paymentrequest/show&quot;&gt;&lt;code&gt;PaymentRequest.show()&lt;/code&gt;&lt;/a&gt; method on it to initiate the payment request. This returns a promise that fulfills with a &lt;a href=&quot;../paymentresponse&quot;&gt;&lt;code&gt;PaymentResponse&lt;/code&gt;&lt;/a&gt; object if the payment is successful:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9d360ea949949f21bd809743bbe4f00e592cce1" translate="yes" xml:space="preserve">
          <source>Once the &lt;code&gt;RTCPeerConnection&lt;/code&gt; has been created, we request access to the user's camera and microphone by calling &lt;a href=&quot;../mediadevices/getusermedia&quot;&gt;&lt;code&gt;MediaDevices.getUserMedia()&lt;/code&gt;&lt;/a&gt;, which is exposed to us through the &lt;a href=&quot;../mediadevices/getusermedia&quot;&gt;&lt;code&gt;Navigator.mediaDevices.getUserMedia&lt;/code&gt;&lt;/a&gt; property. When this succeeds, fulfilling the returned promise, our &lt;code&gt;then&lt;/code&gt; handler is executed. It receives, as input, a &lt;a href=&quot;../mediastream&quot;&gt;&lt;code&gt;MediaStream&lt;/code&gt;&lt;/a&gt; object representing the stream with audio from the user's microphone and video from their webcam.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96d73c913d55de5f6698397b36c59ad57019876d" translate="yes" xml:space="preserve">
          <source>Once the HTML for the report is generated, it is injected into the element whose class is &lt;code&gt;&quot;stats-box&quot;&lt;/code&gt; by setting its &lt;a href=&quot;../element/innerhtml&quot;&gt;&lt;code&gt;innerHTML&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b22f949231ae2076f6f2a3f1138fbc9ce5fa872" translate="yes" xml:space="preserve">
          <source>Once the ICE session is complete, the configuration that's currently in effect is the final one, unless an ICE reset occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="315f5796318789423b7e83b1e0ee4320b54ce74f" translate="yes" xml:space="preserve">
          <source>Once the amount of directional lighting is computed, we can generate the lighting value by taking the ambient light and adding in the product of the directional light's color and the amount of directional lighting to provide. As a result, we now have an RGB value that will be used by the fragment shader to adjust the color of each pixel we render.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="387693810eb091da5bd8d79ac6eaaf8cdcb64522" translate="yes" xml:space="preserve">
          <source>Once the answer has been created using &lt;a href=&quot;../rtcpeerconnection/createanswer&quot;&gt;&lt;code&gt;myPeerConnection.createAnswer()&lt;/code&gt;&lt;/a&gt;, the description of the local end of the connection is set to the answer's SDP by calling &lt;a href=&quot;../rtcpeerconnection/setlocaldescription&quot;&gt;&lt;code&gt;myPeerConnection.setLocalDescription()&lt;/code&gt;&lt;/a&gt;, then the answer is transmitted through the signaling server to the caller to let them know what the answer is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c7caf62a76e00190f4b577b6dc631175160559e" translate="yes" xml:space="preserve">
          <source>Once the answer has been created, it's passed into the remoteConnection by calling &lt;a href=&quot;../rtcpeerconnection/setlocaldescription&quot;&gt;&lt;code&gt;RTCPeerConnection.setLocalDescription()&lt;/code&gt;&lt;/a&gt;. That establishes the remote's end of the connection (which, to the remote peer, is its local end. This stuff can be confusing, but you get used to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe87f822e97a0903a19198bf7a293e35795538d5" translate="yes" xml:space="preserve">
          <source>Once the caller has created its &lt;a href=&quot;../rtcpeerconnection&quot;&gt;&lt;code&gt;RTCPeerConnection&lt;/code&gt;&lt;/a&gt;, created a media stream, and added its tracks to the connection as shown in &lt;a href=&quot;#Starting_a_call&quot;&gt;Starting a call&lt;/a&gt;, the browser will deliver a &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/negotiationneeded&quot;&gt;negotiationneeded&lt;/a&gt;&lt;/code&gt; event to the &lt;a href=&quot;../rtcpeerconnection&quot;&gt;&lt;code&gt;RTCPeerConnection&lt;/code&gt;&lt;/a&gt; to indicate that it's ready to begin negotiation with the other peer. Here's our code for handling the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/negotiationneeded&quot;&gt;negotiationneeded&lt;/a&gt;&lt;/code&gt; event:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c0e5da7584b9b24d32f7053e0c80fb3dbf2cfa4" translate="yes" xml:space="preserve">
          <source>Once the canvas contains the captured image, we convert it to PNG format by calling &lt;a href=&quot;../htmlcanvaselement/todataurl&quot;&gt;&lt;code&gt;HTMLCanvasElement.toDataURL()&lt;/code&gt;&lt;/a&gt; on it; finally, we call &lt;a href=&quot;../element/setattribute&quot;&gt;&lt;code&gt;photo.setAttribute()&lt;/code&gt;&lt;/a&gt; to make our captured still box display the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6440a53c85a0aac80aedb2944f577743b5ebdb7e" translate="yes" xml:space="preserve">
          <source>Once the configuration object has been created, it is passed into the &lt;a href=&quot;rtcpeerconnection/rtcpeerconnection&quot;&gt;&lt;code&gt;RTCPeerConnection()&lt;/code&gt;&lt;/a&gt; constructor to use it as the configuration for the new peer connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9616fb8518112307ed20e1aaffefc7372dbd847" translate="yes" xml:space="preserve">
          <source>Once the connection is established (that is, &lt;code&gt;readyState&lt;/code&gt; is &lt;code&gt;OPEN&lt;/code&gt;), &lt;code&gt;exampleSocket.protocol&lt;/code&gt; will tell you which protocol the server selected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a82f7fe8b25329f3b3a2707eb3479abbc9ba57a" translate="yes" xml:space="preserve">
          <source>Once the connection is opened, incoming messages from the server are delivered to your code in the form of &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/message&quot;&gt;message&lt;/a&gt;&lt;/code&gt; events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0223ef8b56487833b47ae350e8d3f464cb57a500" translate="yes" xml:space="preserve">
          <source>Once the current item is in the list, the item's &lt;a href=&quot;../filesystementry/isdirectory&quot;&gt;&lt;code&gt;isDirectory&lt;/code&gt;&lt;/a&gt; property is checked. If the item is a directory, we need to recurse into that directory. The first step is to create a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryReader&quot;&gt;&lt;code&gt;FileSystemDirectoryReader&lt;/code&gt;&lt;/a&gt; to handle fetching the directory's contents. That's done by calling the item's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/createReader&quot;&gt;&lt;code&gt;createReader()&lt;/code&gt;&lt;/a&gt; method. Then a new &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul&quot;&gt;&lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;&lt;/a&gt; is created and appended to the parent list; this will contain the directory's contents in the next level down in the list's hierarchy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="777e255c75b61cdad8d5667e2275bec78ee02b66" translate="yes" xml:space="preserve">
          <source>Once the drag is complete, a &lt;code&gt;&lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/dragend&quot;&gt;dragend&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; event is fired at the source of the drag (the same element that received the &lt;code&gt;&lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/dragstart&quot;&gt;dragstart&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; event). This event will fire if the drag was successful[1] or if it was cancelled. However, you can use the &lt;a href=&quot;../datatransfer/dropeffect&quot;&gt;&lt;code&gt;dropEffect&lt;/code&gt;&lt;/a&gt; property to determine what drop operation occurred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce2dd5adec0b21d29886fa3e4aaaadc673c48344" translate="yes" xml:space="preserve">
          <source>Once the keyboard has been constructed, we scroll the note &quot;B&quot; in octave 5 into view; this has the effect of ensuring that middle-C is visible along with its surrounding keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e60ed0b45432bc4da0515cd12196be05a63092f2" translate="yes" xml:space="preserve">
          <source>Once the new cue is created, it needs to be added to a &lt;a href=&quot;texttrack&quot;&gt;&lt;code&gt;TextTrack&lt;/code&gt;&lt;/a&gt;. Once added, this cue will be drawn from seconds 2 to 3 and will show the text &lt;code&gt;Cool text to be displayed&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f4c1728fd9ab3eee9dcb5b4ced366f4bd003719" translate="yes" xml:space="preserve">
          <source>Once the node has been created, you can't change its coefficients.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="413c2958d95404e7b9ec98bbcec34d53f29ad249" translate="yes" xml:space="preserve">
          <source>Once the path has been created, you can stroke or fill the path to render it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07c3fba85e6ecb1b50957b5df54c3a6abc28ce90" translate="yes" xml:space="preserve">
          <source>Once the payment flow has been triggered using &lt;a href=&quot;../paymentrequest/show&quot;&gt;&lt;code&gt;PaymentRequest.show()&lt;/code&gt;&lt;/a&gt; and the promise resolves successfully, the &lt;a href=&quot;../paymentresponse&quot;&gt;&lt;code&gt;PaymentResponse&lt;/code&gt;&lt;/a&gt; object available inside the fulfilled promise (&lt;code&gt;instrumentResponse&lt;/code&gt; above) will have a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Details&quot;&gt;&lt;code&gt;PaymentResponse.details&lt;/code&gt;&lt;/a&gt; property that will contain response details. This has to conform to the structure defined by the &lt;code&gt;BasicCardResponse&lt;/code&gt; dictionary, and may look something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8997fa911f9bb7cbc7fa8ba98d599e7893179e0" translate="yes" xml:space="preserve">
          <source>Once the payment flow has been triggered using &lt;a href=&quot;paymentrequest/show&quot;&gt;&lt;code&gt;PaymentRequest.show()&lt;/code&gt;&lt;/a&gt; and the promise resolves successfully, the &lt;a href=&quot;paymentresponse&quot;&gt;&lt;code&gt;PaymentResponse&lt;/code&gt;&lt;/a&gt; object available inside the fulfilled promise (&lt;code&gt;instrumentResponse&lt;/code&gt; above) will have a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Details&quot;&gt;&lt;code&gt;PaymentResponse.details&lt;/code&gt;&lt;/a&gt; property that will contain response details. This has to conform to the structure defined by the &lt;a href=&quot;basiccardresponse&quot;&gt;&lt;code&gt;BasicCardResponse&lt;/code&gt;&lt;/a&gt; dictionary, and may look something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86843ee81100c73011750e9441e0d430c9c68fff" translate="yes" xml:space="preserve">
          <source>Once the payment flow has been triggered using &lt;a href=&quot;paymentrequest/show&quot;&gt;&lt;code&gt;PaymentRequest.show()&lt;/code&gt;&lt;/a&gt; and the promise resolves successfully, the &lt;a href=&quot;paymentresponse&quot;&gt;&lt;code&gt;PaymentResponse&lt;/code&gt;&lt;/a&gt; object available inside the fulfilled promise (&lt;code&gt;instrumentResponse&lt;/code&gt; above) will have a &lt;a href=&quot;paymentresponse/details&quot;&gt;&lt;code&gt;PaymentResponse.details&lt;/code&gt;&lt;/a&gt; property that will contain response details. This has to conform to the structure defined by the &lt;code&gt;BasicCardResponse&lt;/code&gt; dictionary, and may look something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e4791975b8e58a720da0c09f72fb5c8fbb1e368" translate="yes" xml:space="preserve">
          <source>Once the position of the vertex is computed, and we pass the coordinates of the texel corresponding to the vertex to the fragment shader, we can work on computing the shading for the vertex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b91393aa5f75e2dcc1009a5ec3a71372fc6ee10a" translate="yes" xml:space="preserve">
          <source>Once the presentation starts, you'll be able to see the stereoscopic view displayed in the browser:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5dbd923b49715a89785ac0e302e3541138d8e0a" translate="yes" xml:space="preserve">
          <source>Once the script knows whether the property or properties it wishes to use are supported, it can then check the &lt;strong&gt;capabilities&lt;/strong&gt; of the API and its implementation by examining the object returned by the track's &lt;code&gt;getCapabilities()&lt;/code&gt; method; this object lists each supported constraint and the values or range of values which are supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a658f0c738ec67e3c4bd89f8e16cf4029ad57766" translate="yes" xml:space="preserve">
          <source>Once the shader has the source code, it's compiled using &lt;a href=&quot;../../webglrenderingcontext/compileshader&quot;&gt;&lt;code&gt;gl.compileShader()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64d18d6a35848567432b744ccbf0cd65706414eb" translate="yes" xml:space="preserve">
          <source>Once the shader program is built, we compute the aspect ratio of our context by dividing its width by its height. Then we set the current rotation vector for the animation to &lt;code&gt;[0,&amp;nbsp;1]&lt;/code&gt;, and the scaling vector to &lt;code&gt;[1.0,&amp;nbsp;aspectRatio]&lt;/code&gt;. The scaling vector, as we saw in the vertex shader, is used to scale the coordinates to fit the -1.0 to 1.0 range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80271754a34b07a274354e073e2a1eb505f1797a" translate="yes" xml:space="preserve">
          <source>Once the shaders are established, the locations are looked up, and the square plane's vertex positions put in a buffer, we can actually render the scene. Since we're not animating anything in this example, our &lt;code&gt;drawScene()&lt;/code&gt; function is very simple. It uses a few utility routines we'll cover shortly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1e8e25f98e84a611a02c3f75c615d80849c4485" translate="yes" xml:space="preserve">
          <source>Once the source media is playing and you've reached the point where you're ready to record video, call &lt;a href=&quot;mediarecorder/start&quot;&gt;&lt;code&gt;MediaRecorder.start()&lt;/code&gt;&lt;/a&gt; to begin recording.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="722cc704ab462f864c364c04771c64bee1564653" translate="yes" xml:space="preserve">
          <source>Once the speech recognition is started, there are many event handlers that can be used to retrieve results, and other pieces of surrounding information (see the &lt;a href=&quot;../speechrecognition#Event_handlers&quot;&gt;&lt;code&gt;SpeechRecognition&lt;/code&gt; event handlers list&lt;/a&gt;.) The most common one you'll probably use is &lt;a href=&quot;../speechrecognition/onresult&quot;&gt;&lt;code&gt;SpeechRecognition.onresult&lt;/code&gt;&lt;/a&gt;, which is fired once a successful result is received:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e64afd77fb323221567b1cd79971a6ff26c27fa" translate="yes" xml:space="preserve">
          <source>Once the stream is linked to the &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; element, we start it playing by calling &lt;code&gt;&lt;a href=&quot;../htmlmediaelement#play&quot;&gt;HTMLMediaElement.play()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e87375edf519fd39d5065db1654bfadd42025b5" translate="yes" xml:space="preserve">
          <source>Once the string is assembled, containing the device's name in bold and the direction in parentheses, it's appended to the appropriate list by calling &lt;a href=&quot;../node/appendchild&quot;&gt;&lt;code&gt;appendChild()&lt;/code&gt;&lt;/a&gt; on either &lt;code&gt;audioList&lt;/code&gt; or &lt;code&gt;videoList&lt;/code&gt;, as appropriate based on the device type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd1bbf9bcdf8e3bc89c069a77a36fe787807d997" translate="yes" xml:space="preserve">
          <source>Once the track is selected, you can obtain from its &lt;code&gt;RTCRtpSender&lt;/code&gt; the &lt;a href=&quot;../rtcdtmfsender&quot;&gt;&lt;code&gt;RTCDTMFSender&lt;/code&gt;&lt;/a&gt; object you'll use for sending DTMF. From there, you can simply call &lt;a href=&quot;../rtcdtmfsender/insertdtmf&quot;&gt;&lt;code&gt;RTCDTMFSender.insertDTMF()&lt;/code&gt;&lt;/a&gt; to enqueue DTMF signals to be sent on the track to the other peer. The &lt;code&gt;RTCRtpSender&lt;/code&gt; will then send the tones to the other peer as packets alongside the track's audio data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f4c37072be23ea74457edc535ca85d356dbd197" translate="yes" xml:space="preserve">
          <source>Once the two peers agree upon a mutually-compatible candidate, that candidate's SDP is used by each peer to construct and open a connection, through which media then begins to flow. If they later agree on a better (usually higher-performance) candidate, the stream may change formats as needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="509610e4f7189736f2a5ede95a97a32317d75d76" translate="yes" xml:space="preserve">
          <source>Once the user clicks the &quot;OK&quot; button in the welcome panel, the JavaScript code swaps the two panels by changing their respective values for &lt;code&gt;hidden&lt;/code&gt;. The follow-up panel looks like this in HTML:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e636712e4d98039f8ba9bfee68bc112716f28372" translate="yes" xml:space="preserve">
          <source>Once the vertex array has been created, we create a new GL buffer to contain them by calling &lt;a href=&quot;../webglrenderingcontext/createbuffer&quot;&gt;&lt;code&gt;gl.createBuffer()&lt;/code&gt;&lt;/a&gt;. We bind the standard WebGL array buffer reference to that by calling &lt;a href=&quot;../webglrenderingcontext/bindbuffer&quot;&gt;&lt;code&gt;gl.bindBuffer()&lt;/code&gt;&lt;/a&gt; and then copy the vertex data into the buffer using &lt;a href=&quot;../webglrenderingcontext/bufferdata&quot;&gt;&lt;code&gt;gl.bufferData()&lt;/code&gt;&lt;/a&gt;. The usage hint &lt;code&gt;gl.STATIC_DRAW&lt;/code&gt; is specified, telling WebGL that the data will be set only one time and never modified, but will be used repeatedly. This lets WebGL consider any optimizations it can apply that may improve performance based on that information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cf9c03f887cfbd59f71592542a35cda8c6667f6" translate="yes" xml:space="preserve">
          <source>Once the vertex arrays are generated, we need to build the element array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6b5c23a56bdbf206698c6f5e1084f93ed33b8bd" translate="yes" xml:space="preserve">
          <source>Once this code has completed, finally the video being sent by the other peer is displayed in the local browser window!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9f3ccffe5fad0a9d7aa1147c511b6f9515c4918" translate="yes" xml:space="preserve">
          <source>Once this is done, you can, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bcaca66c8ad43f81cc2e0ae2fe8a511affd41ef" translate="yes" xml:space="preserve">
          <source>Once this method returns, the signaling state as returned by &lt;a href=&quot;signalingstate&quot;&gt;&lt;code&gt;RTCPeerConnection.signalingState&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;closed&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44e4bc0a2dcb20a2036b163c594cfa6f0042072f" translate="yes" xml:space="preserve">
          <source>Once transmission of the tones is complete, the connection is closed. You can click &quot;Dial&quot; again to reconnect and send the tones again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e96c8282f422a581e46b6432e62319c7dde7f80e" translate="yes" xml:space="preserve">
          <source>Once we have a reference to our source image object we can use the &lt;code&gt;drawImage()&lt;/code&gt; method to render it to the canvas. As we will see later the &lt;code&gt;drawImage()&lt;/code&gt; method is overloaded and has several variants. In its most basic form it looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f53289c7c0b3a02fc3e27c88e8964144b9ff7df" translate="yes" xml:space="preserve">
          <source>Once we have created the &amp;lt;table&amp;gt;, &amp;lt;tbody&amp;gt;, &amp;lt;tr&amp;gt;, and &amp;lt;td&amp;gt; elements and then the text node, we then append each object to its parent in the opposite order:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18f33453e9085ce0b340b5015d5ff8aac42eca42" translate="yes" xml:space="preserve">
          <source>Once we have some common styles we can start defining a special case for the orientation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5be5be2b789a6323002a0e7bd336574340fca202" translate="yes" xml:space="preserve">
          <source>Once we have the canvas, we try to get a &lt;a href=&quot;../../webglrenderingcontext&quot;&gt;WebGLRenderingContext&lt;/a&gt; for it by calling &lt;a href=&quot;../../htmlcanvaselement/getcontext&quot;&gt;getContext&lt;/a&gt; and passing it the string &lt;code&gt;&quot;webgl&quot;&lt;/code&gt;. If the browser does not support webgl &lt;code&gt;getContext&lt;/code&gt; will return &lt;code&gt;null&lt;/code&gt; in which case we will display a message to the user and exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3452249848aa40c76c7311c8a19549b60798e17f" translate="yes" xml:space="preserve">
          <source>Once we've created a &lt;code&gt;CanvasGradient&lt;/code&gt; object we can assign colors to it by using the &lt;code&gt;addColorStop()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e87ea6c40cae94e3e6e1b0fbb435e8b2ddf5462" translate="yes" xml:space="preserve">
          <source>Once we've set up the texture mapping array, we pass the array into the buffer, so that WebGL has that data ready for its use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d15e4a566965b82eaa4d78faf38df446f257d4a0" translate="yes" xml:space="preserve">
          <source>Once you are done processing your audio, these interfaces define where to output it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acd7518cc3b869500a4b49952d104aeb516ba852" translate="yes" xml:space="preserve">
          <source>Once you drop out the concept of point sources and specular lighting, there are two pieces of information we'll need in order to implement our directional lighting:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14207d389232b56a15b62d77e02e44dcbd67f770" translate="yes" xml:space="preserve">
          <source>Once you have created a parser object, you can parse XML from a string using the &lt;code&gt;parseFromString()&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b2d9926622495ae14b58c55953ced62e9277b8a" translate="yes" xml:space="preserve">
          <source>Once you have created the observer, you need to give it a target element to watch:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8094e76e144fc03d800637e96854c67b740aedad" translate="yes" xml:space="preserve">
          <source>Once you have drawn content into a canvas, you can convert it into a file of any supported image format. The code snippet below, for example, takes the image in the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas&quot;&gt;&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;&lt;/a&gt; element whose ID is &quot;canvas&quot;, obtains a copy of it as a PNG image, then appends a new &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&lt;/a&gt; element to the document, whose source image is the one created using the canvas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e6ddc1d82d95bfe9647dca44fdcae6e5ea983c2" translate="yes" xml:space="preserve">
          <source>Once you have everything assembled, you can test to see whether your setup works with WebVR by going to our &lt;a href=&quot;https://mdn.github.io/webvr-tests/aframe-demo/&quot;&gt;simple A-Frame demo&lt;/a&gt;, and seeing whether the scene renders and whether you can enter VR display mode by pressing the button at the bottom right.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b130b744c882ffd2290d3bf03743293c07c3b54" translate="yes" xml:space="preserve">
          <source>Once you have generated a data URI from you canvas, you are able to use it as the source of any &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/image&quot;&gt;&lt;code&gt;&amp;lt;image&amp;gt;&lt;/code&gt;&lt;/a&gt; or put it into a hyper link with a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-download&quot;&gt;download attribute&lt;/a&gt; to save it to disc, for example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b5ce68ee5474cbe729e885a38d67901bd6d11e5" translate="yes" xml:space="preserve">
          <source>Once you have gotten the DOM object for an HTML element, you can set its properties. For example, if you want to set the style background color property, you just add:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="060424e276794548b1bcad25055ba62dd5d51593" translate="yes" xml:space="preserve">
          <source>Once you have the 2D rendering context for a canvas, you can draw within it. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5a52398f227e3b82b021766e7c7781b3a881e0e" translate="yes" xml:space="preserve">
          <source>Once you have the object in your JavaScript variable, you can set style properties directly. The following code is a modified version of sample1.html in which each cell of the second column is hidden and each cell of the first column is changed to have a red background. Note that the style property was set directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61f8e80e1bdac146c2d37896a91761cc7939eed9" translate="yes" xml:space="preserve">
          <source>Once you have the uniform's location, you can access the uniform itself using one of the other uniform access methods, passing in the uniform location as one of the inputs:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84e9e9d3a7eb1aed211679def79a1e75e397db9a" translate="yes" xml:space="preserve">
          <source>Once you know what the browser's capabilities are, your script can use &lt;a href=&quot;applyconstraints&quot;&gt;&lt;code&gt;applyConstraints()&lt;/code&gt;&lt;/a&gt; to ask for the track to be configured to match ideal or acceptable settings. See &lt;a href=&quot;../media_streams_api#Capabilities_and_constraints&quot;&gt;Capabilities and constraints&lt;/a&gt; in &lt;a href=&quot;../media_streams_api&quot;&gt;Media Capture and Streams API (Media Stream)&lt;/a&gt; for details on how to work with constrainable properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90af9ce12c03ce2f2f970d22e1808edc70497c38" translate="yes" xml:space="preserve">
          <source>Once you've established a WebRTC peer connection using the &lt;a href=&quot;../rtcpeerconnection&quot;&gt;&lt;code&gt;RTCPeerConnection&lt;/code&gt;&lt;/a&gt; interface, you're able to send and receive media data between the two peers on the connection. But there's a lot more you can do with WebRTC. In this guide, we'll examine how to add a data channel to a peer connection, which can then be used to securely exchange arbitrary data; that is, any kind of data we wish, in any format we choose.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79fd449c8f172732e221551bc8999713f2a5ff90" translate="yes" xml:space="preserve">
          <source>Once you've instantiated your event source, you can begin listening for messages from the server by listening for the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/message&quot;&gt;message&lt;/a&gt;&lt;/code&gt; event:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19bcecfd45266789c9903a3e34c8496a7c2a8c03" translate="yes" xml:space="preserve">
          <source>Once you've opened your connection, you can begin transmitting data to the server. To do this, simply call the &lt;code&gt;WebSocket&lt;/code&gt; object's &lt;a href=&quot;https://developer.mozilla.org/en/WebSockets/WebSockets_reference/WebSocket#send()&quot;&gt;&lt;code&gt;send()&lt;/code&gt;&lt;/a&gt; method for each message you want to send:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a2ccf9caa7ffcdce1277f4ffd3a00fca578a133" translate="yes" xml:space="preserve">
          <source>Once you've successfully &lt;a href=&quot;getting_started_with_webgl&quot;&gt;created a WebGL context&lt;/a&gt;, you can start rendering into it. A simple thing we can do is draw a simple square untextured plane, so let's start there, by building code to draw a square plane.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1b4f7c0dba0d956e93c053a57d22d457d969688" translate="yes" xml:space="preserve">
          <source>Once your selection is in a variable, you perform a variety of operations on it, for example copying the selection to a text string using &lt;a href=&quot;selection/tostring&quot;&gt;&lt;code&gt;Selection.toString()&lt;/code&gt;&lt;/a&gt;, adding a range (as represented by a standard &lt;a href=&quot;range&quot;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt; object) to the selection (or removing one) with &lt;a href=&quot;selection/addrange&quot;&gt;&lt;code&gt;Selection.addRange()&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;selection/removerange&quot;&gt;&lt;code&gt;Selection.removeRange()&lt;/code&gt;&lt;/a&gt;, or changing the selection to be the entire contents of a DOM node using &lt;a href=&quot;selection/selectallchildren&quot;&gt;&lt;code&gt;Selection.selectAllChildren()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39ec7a1e92eebfe7a8e8d9094b50c8f91d6108d6" translate="yes" xml:space="preserve">
          <source>One advantage of data URLs is that the resulting image is available immediately without another round trip to the server. Another potential advantage is that it is also possible to encapsulate in one file all of your &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS&quot;&gt;CSS&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript&quot;&gt;JavaScript&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML&quot;&gt;HTML&lt;/a&gt;, and images, making it more portable to other locations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35fc12c119d76281508db18b1012fb2e71cba430" translate="yes" xml:space="preserve">
          <source>One argument version:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="415ee8665fb1950850d930fd2e64e9a5f0d4f4d9" translate="yes" xml:space="preserve">
          <source>One big difference is that with a shared worker you have to communicate via a &lt;code&gt;port&lt;/code&gt; object &amp;mdash; an explicit port is opened that the scripts can use to communicate with the worker (this is done implicitly in the case of dedicated workers).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf27da6d3617ba4f779a0610f4ad6b4142cd7269" translate="yes" xml:space="preserve">
          <source>One can also detect all three load-ending conditions (&lt;code&gt;abort&lt;/code&gt;, &lt;code&gt;load&lt;/code&gt;, or &lt;code&gt;error&lt;/code&gt;) using the &lt;code&gt;loadend&lt;/code&gt; event:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86f97ff671818dbf1ece76c009050fe0647841d1" translate="yes" xml:space="preserve">
          <source>One common pattern with cursors is to retrieve all objects in an object store and add them to an array, like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcc21dc634cf7ffbf834beb4fa67a434a54346fa" translate="yes" xml:space="preserve">
          <source>One handy thing you can do is use &lt;a href=&quot;https://developer.mozilla.org/en/JSON&quot;&gt;JSON&lt;/a&gt; to send reasonably complex data to the server. For example, a chat program can interact with a server using a protocol implemented using packets of JSON-encapsulated data:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb813db7af6092871a070fd6354530b5024e8cba" translate="yes" xml:space="preserve">
          <source>One important thing to note about the perspective matrix used below is that it flips the z axis. In clip space the z+ goes away from the viewer, while with this matrix it comes towards the viewer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="493a55485030a4bc3c33d2a44058717daf524e04" translate="yes" xml:space="preserve">
          <source>One last thing &amp;mdash; we need to update the CSS and keep a reference of the last move for the mouse event. Here's the final &lt;code&gt;moveBoombox&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a26faa9cd7466dae7ccc5e4351266499a96c67b" translate="yes" xml:space="preserve">
          <source>One may format their code as shown below to work around the problem:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ac8ba69d7d7c3e1aa245c2f8dec42de398dd583" translate="yes" xml:space="preserve">
          <source>One of &quot;low&quot;, &quot;medium&quot;, or &quot;high&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1774b783eed906bbc6c5573850050ab219113953" translate="yes" xml:space="preserve">
          <source>One of &lt;code&gt;&quot;auto&quot;&lt;/code&gt;, &lt;code&gt;&quot;instant&quot;&lt;/code&gt;, or &lt;code&gt;&quot;smooth&quot;&lt;/code&gt;. Defaults to &lt;code&gt;&quot;auto&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fb5877f042222b013aab1555e9f1893ca95cfef" translate="yes" xml:space="preserve">
          <source>One of &lt;code&gt;&quot;exclusive&quot;&lt;/code&gt; or &lt;code&gt;&quot;shared&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb266cbd24636c45bd4e8765bcc2548833e3f097" translate="yes" xml:space="preserve">
          <source>One of &lt;code&gt;&quot;none&quot;&lt;/code&gt;, &lt;code&gt;&quot;paused&quot;&lt;/code&gt;, or &lt;code&gt;&quot;playing&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05bfcf3cfea0a9a83d54bf448dd8a9229413ca31" translate="yes" xml:space="preserve">
          <source>One of &lt;code&gt;&quot;shipping&quot;&lt;/code&gt;, &lt;code&gt;&quot;delivery&quot;&lt;/code&gt;, &lt;code&gt;&quot;pickup&quot;&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2351f82559b43c17753867ab81c26e020ced4084" translate="yes" xml:space="preserve">
          <source>One of &lt;code&gt;&quot;start&quot;&lt;/code&gt;, &lt;code&gt;&quot;center&quot;&lt;/code&gt;, &lt;code&gt;&quot;end&quot;&lt;/code&gt;, or &lt;code&gt;&quot;nearest&quot;&lt;/code&gt;. Defaults to &lt;code&gt;&quot;center&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c80a221f9e2146587ea64d7d73e96df1b7ac9fa4" translate="yes" xml:space="preserve">
          <source>One of &lt;code&gt;&quot;start&quot;&lt;/code&gt;, &lt;code&gt;&quot;center&quot;&lt;/code&gt;, &lt;code&gt;&quot;end&quot;&lt;/code&gt;, or &lt;code&gt;&quot;nearest&quot;&lt;/code&gt;. Defaults to &lt;code&gt;&quot;nearest&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e255a86b9f285d06dc5b7c981cbe6f3ae3f377d" translate="yes" xml:space="preserve">
          <source>One of a &lt;a href=&quot;../formdata&quot;&gt;&lt;code&gt;FormData&lt;/code&gt;&lt;/a&gt; instance, a &lt;a href=&quot;../urlsearchparams&quot;&gt;&lt;code&gt;URLSearchParams&lt;/code&gt;&lt;/a&gt; instance, or null.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97edfd44f901f7201162d412a8181f7e99c04b0d" translate="yes" xml:space="preserve">
          <source>One of a &lt;a href=&quot;formdata&quot;&gt;&lt;code&gt;FormData&lt;/code&gt;&lt;/a&gt; instance, a &lt;a href=&quot;urlsearchparams&quot;&gt;&lt;code&gt;URLSearchParams&lt;/code&gt;&lt;/a&gt; instance, or null. The data in the objects will be added to the &lt;a href=&quot;request&quot;&gt;&lt;code&gt;request&lt;/code&gt;&lt;/a&gt; body and sent to the remote endpoint with the credentials.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7a321a5c98349661c3f76d2118ac2c94c07f125" translate="yes" xml:space="preserve">
          <source>One of the &lt;a href=&quot;#Type_constants&quot;&gt;Type constants&lt;/a&gt; indicating the type of CSS rule.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f98f7bdc8e2d5e24de4760f48f9fab3147ed7168" translate="yes" xml:space="preserve">
          <source>One of the common possible errors when opening a database is &lt;code&gt;VER_ERR&lt;/code&gt;. It indicates that the version of the database stored on the disk is &lt;em&gt;greater&lt;/em&gt; than the version that you are trying to open. This is an error case that must always be handled by the error handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9377bda1fa60001a2b68f85dbc995f721d772a2e" translate="yes" xml:space="preserve">
          <source>One of the few cases in which a synchronous request does not usually block execution is the use of &lt;code&gt;XMLHttpRequest&lt;/code&gt; within a &lt;code&gt;&lt;a href=&quot;../worker&quot;&gt;Worker&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e143776e30a54b3003df8b102a26de143aca803d" translate="yes" xml:space="preserve">
          <source>One of the following &lt;code&gt;unsigned short&lt;/code&gt; values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0aeae17501f781101fafef20f153aeacf57f828" translate="yes" xml:space="preserve">
          <source>One of the following objects can be used as a pixel source for the texture:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ad933a913af6680d1f0a204429bb84134d86079" translate="yes" xml:space="preserve">
          <source>One of the input parameters has a value that is outside the accepted range:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d8a5add3d984da68fdad5e84156fb0bfdcb6069" translate="yes" xml:space="preserve">
          <source>One of the major functions inside our code is &lt;code&gt;start()&lt;/code&gt; &amp;mdash; we run this function when the body has finished loading:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c6de736585408411780d2e0ac905f6ed2fdfa5d" translate="yes" xml:space="preserve">
          <source>One of the more familiar ways to approach learning the Web Animations API is to start with something most web developers have played with before: CSS Animations. CSS Animations have a familiar syntax that breaks down nicely for demonstration purposes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad3f8e3832302cad84f53c38e4206cf36aef32e1" translate="yes" xml:space="preserve">
          <source>One of the more practical uses of this would be to use a second canvas element as a thumbnail view of the other larger canvas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca9da109cb2840af6e745b6bfdf73f0905ff20aa" translate="yes" xml:space="preserve">
          <source>One of the most common cases for orientation changes is when you want to revise the layout of your content based on the orientation of the device. For example, perhaps you want a button bar to stretch along the longest dimension of the device's display. By using a media query, you can do this easily and automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44b0bbe032268416f399930f8d3b218b21f1fd82" translate="yes" xml:space="preserve">
          <source>One of the most difficult tasks is to maintain a constant and high framerate value, so we must optimize our code to make it as efficient as possible. It is preferable to have a decent framerate that doesn't constantly or suddenly change; for this you need to as few necessary objects moving into the scene as possible and (in the case of WebGL) try to reduce draw calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e76f6c8a42cfa528e32d1cd9bab116a700848d3" translate="yes" xml:space="preserve">
          <source>One of the most interesting features of the Web Audio API is the ability to extract frequency, waveform, and other data from your audio source, which can then be used to create visualizations. This article explains how, and provides a couple of basic use cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a35adc923dda03b7964f3026d0ad7d9d84ba398" translate="yes" xml:space="preserve">
          <source>One of the most obvious use cases for web notifications is a web-based mail or IRC application that needs to notify the user when a new message is received, even if the user is doing something else with another application. Many real examples of this now exist, such as &lt;a href=&quot;https://slack.com/&quot;&gt;Slack&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd514aa2af324993049617cca98e2c720cad8a18" translate="yes" xml:space="preserve">
          <source>One of the supplied keys was not a valid key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1a80c61999a00fe6ec9694b05d6d202c736d90a" translate="yes" xml:space="preserve">
          <source>One of three properties that declare the USB protocol version supported by the device. The other two properties are &lt;code&gt;USBDevice.usbVersionMajor&lt;/code&gt; and &lt;code&gt;USBDevice.usbVersionMinor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="776e00575869d7c417a72d11dda1d24d078feaa6" translate="yes" xml:space="preserve">
          <source>One of three properties that declare the USB protocol version supported by the device. The other two properties are &lt;code&gt;USBDevice.usbVersionMajor&lt;/code&gt; and &lt;code&gt;USBDevice.usbVersionSubminor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c573d339909d0613018f5c843b821ca45d1596b8" translate="yes" xml:space="preserve">
          <source>One of three properties that declare the USB protocol version supported by the device. The other two properties are &lt;code&gt;USBDevice.usbVersionMinor&lt;/code&gt; and &lt;code&gt;USBDevice.usbVersionSubminor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5df5cb34e6f728f555462f304a98d05a87f8809a" translate="yes" xml:space="preserve">
          <source>One of three properties that identify USB devices for the purpose of loading a USB driver that will work with that device. The other two properties are &lt;code&gt;USBDevice.deviceClass&lt;/code&gt; and &lt;code&gt;USBDevice.deviceProtocol&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84a1c025b8bd921555a385fa9da9874f683868b9" translate="yes" xml:space="preserve">
          <source>One of three properties that identify USB devices for the purpose of loading a USB driver that will work with that device. The other two properties are &lt;code&gt;USBDevice.deviceClass&lt;/code&gt; and &lt;code&gt;USBDevice.deviceSubclass&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56387ed46912f0af9d2ff7640eb351f7e05f0a6b" translate="yes" xml:space="preserve">
          <source>One of three properties that identify USB devices for the purpose of loading a USB driver that will work with that device. The other two properties are &lt;code&gt;USBDevice.deviceSubclass&lt;/code&gt; and &lt;code&gt;USBDevice.deviceprotocol&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3468a22dbbcfd9c69cd6b12436632aea092dad9" translate="yes" xml:space="preserve">
          <source>One option is to escape any extended characters so that the string you actually encode is an ASCII representation of the original. Consider this example, noted by &lt;a href=&quot;http://ecmanaut.blogspot.com/2006/07/encoding-decoding-utf8-in-javascript.html&quot;&gt;Johan Sundstr&amp;ouml;m&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c2a61f92aa8466da1bf92d120af6cb946a61dbe" translate="yes" xml:space="preserve">
          <source>One or both of the input arrays exceeds 20 members.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86e9c40f2458ed6b14a0b897f5876f674f6d47f9" translate="yes" xml:space="preserve">
          <source>One or more &lt;a href=&quot;../mediastream&quot;&gt;&lt;code&gt;MediaStream&lt;/code&gt;&lt;/a&gt; objects in which the specified track are to be contained.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a510ca76a2a0f3a3a61956427aecc98cd8bc14c" translate="yes" xml:space="preserve">
          <source>One or more newlines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebc9b93fcc42577e262917dc0657cd28ebc46691" translate="yes" xml:space="preserve">
          <source>One or more nodes to insert before the first child node currently in the &lt;code&gt;ParentNode&lt;/code&gt;. Each node can be specified as either a &lt;a href=&quot;../node&quot;&gt;&lt;code&gt;Node&lt;/code&gt;&lt;/a&gt; object or as a string; strings are inserted as new &lt;a href=&quot;../text&quot;&gt;&lt;code&gt;Text&lt;/code&gt;&lt;/a&gt; nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e52ca88ad03e7a458134ffabbb2c7fa11765c92e" translate="yes" xml:space="preserve">
          <source>One or more of the &lt;a href=&quot;../sourcebuffer&quot;&gt;&lt;code&gt;SourceBuffer&lt;/code&gt;&lt;/a&gt; objects in &lt;a href=&quot;../mediasource/sourcebuffers&quot;&gt;&lt;code&gt;MediaSource.sourceBuffers&lt;/code&gt;&lt;/a&gt; are being updated (i.e. their &lt;a href=&quot;updating&quot;&gt;&lt;code&gt;SourceBuffer.updating&lt;/code&gt;&lt;/a&gt; property is currently &lt;code&gt;true&lt;/code&gt;), a media segment inside the &lt;code&gt;SourceBuffer&lt;/code&gt; is currently being parsed, or this &lt;code&gt;SourceBuffer&lt;/code&gt; has been removed from the &lt;a href=&quot;../mediasource&quot;&gt;&lt;code&gt;MediaSource&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eebca4923527a4938a556e047772c4d8c5f3ee86" translate="yes" xml:space="preserve">
          <source>One or more of the &lt;a href=&quot;../sourcebuffer&quot;&gt;&lt;code&gt;SourceBuffer&lt;/code&gt;&lt;/a&gt; objects in &lt;a href=&quot;../mediasource/sourcebuffers&quot;&gt;&lt;code&gt;MediaSource.sourceBuffers&lt;/code&gt;&lt;/a&gt; are being updated (i.e. their &lt;a href=&quot;updating&quot;&gt;&lt;code&gt;SourceBuffer.updating&lt;/code&gt;&lt;/a&gt; property is currently &lt;code&gt;true&lt;/code&gt;), or this &lt;code&gt;SourceBuffer&lt;/code&gt; has been removed from the &lt;a href=&quot;../mediasource&quot;&gt;&lt;code&gt;MediaSource&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95af6915cb1387e25f832b0182e9bf05e3d299f8" translate="yes" xml:space="preserve">
          <source>One or more of the ICE transports are currently in the process of establishing a connection; that is, their &lt;code&gt;RTCIceConnectionState&lt;/code&gt; is either &lt;code&gt;&quot;checking&quot;&lt;/code&gt; or &lt;code&gt;&quot;connected&quot;&lt;/code&gt;, and no transports are in the &lt;code&gt;&quot;failed&quot;&lt;/code&gt; state. &lt;strong&gt;&amp;lt;&amp;lt;&amp;lt; Make this a link once I know where that will be documented&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="742fe13688404849629eabe14ddbae51dfbc57b4" translate="yes" xml:space="preserve">
          <source>One or more of the ICE transports on the connection is in the &lt;code&gt;&quot;failed&quot;&lt;/code&gt; state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="577a1cd6f353c0f7375722f23b4129d43b7de253" translate="yes" xml:space="preserve">
          <source>One or more of the URLs provided in the &lt;code&gt;configuration.iceServers&lt;/code&gt; list is invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b6abdf63113ccc92be65586f1382e8ccae3c6b1" translate="yes" xml:space="preserve">
          <source>One or more of the URLs specified in &lt;code&gt;configuration.iceServers&lt;/code&gt; is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/TURN&quot;&gt;TURN&lt;/a&gt; server, but complete login information is not provided (that is, either the &lt;a href=&quot;../rtciceserver/username&quot;&gt;&lt;code&gt;RTCIceServer.username&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer/credentials&quot;&gt;&lt;code&gt;RTCIceServer.credentials&lt;/code&gt;&lt;/a&gt; is missing). This prevents successful login to the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30c5839e6f60fcb153fc534b3453bf6fec64d8a8" translate="yes" xml:space="preserve">
          <source>One or more of the characters in &lt;code&gt;tones&lt;/code&gt; is not valid DTMF.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f546d90007931db65b8dbdd9d8f1603a5b028c75" translate="yes" xml:space="preserve">
          <source>One or more of the frames were not of the correct type of object, the keyframes were not &lt;a href=&quot;https://w3c.github.io/web-animations/#loosely-sorted-by-offset&quot;&gt;loosely sorted by offset&lt;/a&gt;, or a keyframe existed with an offset of less than 0 or more than 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dffd03f4ac4deee07a4b755cc2c77ad7652e6785" translate="yes" xml:space="preserve">
          <source>One or more of the options are negative or otherwise has an invalid value (such as &lt;code&gt;numberOfChannels&lt;/code&gt; being higher than supported, or a &lt;code&gt;sampleRate&lt;/code&gt; outside the nominal range).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e8238f9edd568d1d2b78ac8183c58141b7a9171" translate="yes" xml:space="preserve">
          <source>One or more of the values in &lt;code&gt;threshold&lt;/code&gt; is outside the range 0.0 to 1.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d44cdd2aa628b404a7a7def1cd4836f1033f816" translate="yes" xml:space="preserve">
          <source>One or more of the values in the &lt;a href=&quot;../rtcicecandidate&quot;&gt;&lt;code&gt;candidate&lt;/code&gt;&lt;/a&gt; string are invalid or could not be parsed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0f67165f2d82fe3a5c71be93b2c52ce8a2a760b" translate="yes" xml:space="preserve">
          <source>One or more of the values in the &lt;code&gt;values&lt;/code&gt; array is non-finite. Non-finite values are &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;Infinity&lt;/code&gt;, and &lt;code&gt;-Infinity&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d38f19e249efd1329b765f1eec08abafe9edd8d8" translate="yes" xml:space="preserve">
          <source>One overriding problem that web users have suffered with for years is loss of connectivity. The best web app in the world will provide a terrible user experience if you can&amp;rsquo;t download it. There have been various attempts to create technologies to solve this problem, as our &lt;a href=&quot;https://developer.mozilla.org/en-US/Apps/Build/Offline&quot;&gt;Offline&lt;/a&gt; page shows, and some of the issues have been solved. But the overriding problem is that there still isn&amp;rsquo;t a good overall control mechanism for asset caching and custom network requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e61603c81f5fffa1a803ba0fcdc87d3c5135a429" translate="yes" xml:space="preserve">
          <source>One scenario in which this is helpful is to support adapting the media source to changing bandwidth availability, by transitioning from one codec to another as resource constraints change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccdab99cc9609549d75a9d7b0d8f1945a528e389" translate="yes" xml:space="preserve">
          <source>One technique for preventing things like &lt;code&gt;pinchZoom&lt;/code&gt; on a page is to call &lt;code&gt;preventDefault()&lt;/code&gt; on the second touch in a series. This behavior is not well defined in the touch events spec, and results in different behavior for different browsers (i.e., iOS will prevent zooming but still allow panning with both fingers; Android will allow zooming but not panning; Opera and Firefox currently prevent all panning and zooming.) Currently, it's not recommended to depend on any particular behavior in this case, but rather to depend on meta viewport to prevent zooming.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="356b6adf1cf2ee58e2cc1e2b7921caa23f26bed8" translate="yes" xml:space="preserve">
          <source>One thing that may not be clear in this example is the use of the &lt;code&gt;pendingUpdate&lt;/code&gt; flag and the call to &lt;code&gt;requestAnimationFrame()&lt;/code&gt;. The &lt;code&gt;pendingUpdate&lt;/code&gt; flag serves to prevent multiple invocations of the transfrom that can occur when &lt;code&gt;onresize&lt;/code&gt; and &lt;code&gt;onscroll&lt;/code&gt; fire at the same time. Using &lt;code&gt;requestAnimationFrame()&lt;/code&gt; ensures that the transform ocurrs before the next render.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3696be4fefc76d54eb3eed0992e546d3ab3194ba" translate="yes" xml:space="preserve">
          <source>One thing the Intersection Observer API can't tell you: the exact number of pixels that overlap or specifically which ones they are; however, it covers the much more common use case of &quot;If they intersect by somewhere around &lt;em&gt;N&lt;/em&gt;%, I need to do something.&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5d8af271547e3bccd09a5eac3c91631bc675169" translate="yes" xml:space="preserve">
          <source>One thing we want to be able to do is update our document with log output and progress information. However, you can't safely change the DOM from within an idle callback. Instead, we'll use &lt;a href=&quot;window/requestanimationframe&quot;&gt;&lt;code&gt;requestAnimationFrame()&lt;/code&gt;&lt;/a&gt; to ask the browser to call us when it's safe to update the display.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8931d511a020e7f469c37a6fe41addc12160db1e" translate="yes" xml:space="preserve">
          <source>One useful technique to employ is customizing the payment request button depending on whether users can make payments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a148762ab037ac96db4159bf4730f59fa2e8378e" translate="yes" xml:space="preserve">
          <source>One very experimental feature of streams is the ability to pipe streams into one another (called a &lt;a href=&quot;concepts#Pipe_chains&quot;&gt;pipe chain&lt;/a&gt;). This involves two methods &amp;mdash; &lt;a href=&quot;../readablestream/pipethrough&quot;&gt;&lt;code&gt;ReadableStream.pipeThrough()&lt;/code&gt;&lt;/a&gt;, which pipes a readable stream through a writer/reader pair to transform one data format into another, and &lt;a href=&quot;../readablestream/pipeto&quot;&gt;&lt;code&gt;ReadableStream.pipeTo()&lt;/code&gt;&lt;/a&gt;, which pipes a readable stream to a writer acting as an end point for the pipe chain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82f511ee1dec4bca4fd1c4cad14819f180da981c" translate="yes" xml:space="preserve">
          <source>One very useful function, which doesn't actually draw anything but becomes part of the path list described above, is the &lt;code&gt;moveTo()&lt;/code&gt; function. You can probably best think of this as lifting a pen or pencil from one spot on a piece of paper and placing it on the next.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0a9d32858cc58dde17183eeb56a820a821f30b9" translate="yes" xml:space="preserve">
          <source>One way to think about &lt;code&gt;arcTo()&lt;/code&gt; is to imagine two straight segments: one from the starting point to a first control point, and another from there to a second control point. Without &lt;code&gt;arcTo()&lt;/code&gt;, these two segments would form a sharp corner: &lt;code&gt;arcTo()&lt;/code&gt; creates a circular arc that fits this corner and smooths is out. In other words, the arc is tangential to both segments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e10b99c713b7a5f0f1db77a5e064418d787ebeb6" translate="yes" xml:space="preserve">
          <source>One way to use the &lt;code&gt;OffscreenCanvas&lt;/code&gt; API, is to use a &lt;a href=&quot;renderingcontext&quot;&gt;&lt;code&gt;RenderingContext&lt;/code&gt;&lt;/a&gt; that has been obtained from an &lt;code&gt;OffscreenCanvas&lt;/code&gt; object to generate new frames. Once a new frame has finished rendering in this context, the &lt;a href=&quot;offscreencanvas/transfertoimagebitmap&quot;&gt;&lt;code&gt;transferToImageBitmap()&lt;/code&gt;&lt;/a&gt; method can be called to save the most recent rendered image. This method returns an &lt;a href=&quot;imagebitmap&quot;&gt;&lt;code&gt;ImageBitmap&lt;/code&gt;&lt;/a&gt; object, which can be used in a variety of Web APIs and also in a second canvas without creating a transfer copy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a579857f803e08b3b450d5a865821337a78eee5" translate="yes" xml:space="preserve">
          <source>One-channel (red) signed format compression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d58e408b3c51c3a9234171a3746f90a445fdde91" translate="yes" xml:space="preserve">
          <source>One-channel (red) unsigned format compression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25170dfaa9cd624d9e3c38b11c193d24fdda1eec" translate="yes" xml:space="preserve">
          <source>Online and offline events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1979761b8f60cf76d6ff53f88c0bc7b72e5662b" translate="yes" xml:space="preserve">
          <source>Online and offline events [en-US]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28174ad84e94f88b672dcd430587e799aedf96d0" translate="yes" xml:space="preserve">
          <source>Only &lt;a href=&quot;../messageport&quot;&gt;&lt;code&gt;MessagePort&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ArrayBuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; objects can be transferred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35b78c12029bd0b585d409357a3cce940f25101b" translate="yes" xml:space="preserve">
          <source>Only &lt;a href=&quot;audiobuffersourcenode&quot;&gt;&lt;code&gt;AudioBufferSourceNode&lt;/code&gt;&lt;/a&gt;s were pitched up or down, not other source nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec3efd8d434bba6b0fd1a9ea474980ba4006bb62" translate="yes" xml:space="preserve">
          <source>Only &lt;code&gt;scrollBy(x-coord, y-coord)&lt;/code&gt; is supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cccc7123a2601805a9bf16cd7382ffd67f8607f3" translate="yes" xml:space="preserve">
          <source>Only ICE candidates whose IP addresses are being relayed, such as those being passed through a TURN server, will be considered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfe4d570884398cfdc0fc352ed8a708c3a7a4443" translate="yes" xml:space="preserve">
          <source>Only ICE candidates with public IP addresses will be considered. &lt;em&gt;Removed from the specification's May 13, 2016 working draft.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="558a8a5600bf022283fab1c010f00c0326969971" translate="yes" xml:space="preserve">
          <source>Only Windows and macOS support is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73a8e19d5baa9786050043e1589dd1342e918cf1" translate="yes" xml:space="preserve">
          <source>Only Windows support is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="504406f31ffcf0852d70a9bf1e342f4da189ca89" translate="yes" xml:space="preserve">
          <source>Only audio tracks can support DTMF, and typically only one audio track per &lt;code&gt;RTCPeerConnection&lt;/code&gt; will have an associated &lt;a href=&quot;../rtcdtmfsender&quot;&gt;&lt;code&gt;RTCDTMFSender&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6498db9e04a2d7ccafaf3d81c70ce7567388f582" translate="yes" xml:space="preserve">
          <source>Only available in workers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dcd878cdd124ea42d87b9a40d054916039e81cf" translate="yes" xml:space="preserve">
          <source>Only functions when developer tools are opened. Otherwise, the 'console' object is undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37aa94ae6141846e88d78ed4b88754662f784aed" translate="yes" xml:space="preserve">
          <source>Only implements the SVG 1.1 specification of the interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8811562085709644957993f53b08d7d150c4d9bc" translate="yes" xml:space="preserve">
          <source>Only in Firefox OS internal (certified) applications, since v1.0.1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90d683e31f0ebb30df1b8f4127a19055d095f2b2" translate="yes" xml:space="preserve">
          <source>Only once signaling has been successfully completed can the true process of opening the WebRTC peer connection begin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ed79a34e5f52bde3e1ec3beec49cc3bee3c895c" translate="yes" xml:space="preserve">
          <source>Only one &lt;code&gt;click&lt;/code&gt; handler can be assigned to an object at a time with this property. You may be inclined to use the &lt;a href=&quot;../eventtarget/addeventlistener&quot;&gt;&lt;code&gt;EventTarget.addEventListener()&lt;/code&gt;&lt;/a&gt; method instead, since it is more flexible and part of the DOM Events specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b1982760020c0efedabbf3cdb51f6f1ebf4e939" translate="yes" xml:space="preserve">
          <source>Only one form-associated element in a document can have this attribute specified. If there are several, the first element with the attribute set inserted, usually the first such element on the page, get the initial focus.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d70324606efe1217c486a476135d4c5bd035733c" translate="yes" xml:space="preserve">
          <source>Only one payment request can be in the process of being handled at once, across all documents. Once one &lt;code&gt;PaymentRequest&lt;/code&gt;'s &lt;code&gt;show()&lt;/code&gt; method has been called, any other call to &lt;code&gt;show()&lt;/code&gt; will by rejected with an &lt;code&gt;AbortError&lt;/code&gt; until the returned promise has been concluded, either by being fulfilled with a &lt;a href=&quot;../paymentresponse&quot;&gt;&lt;code&gt;PaymentResponse&lt;/code&gt;&lt;/a&gt; indicating the results of the payment request, or by being rejected with an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0921f858050435a913becffc7d1469ea7af6573e" translate="yes" xml:space="preserve">
          <source>Only one reader can read a stream at a time; when a reader is created and starts reading a stream (an &lt;strong&gt;active reader&lt;/strong&gt;), we say it is &lt;strong&gt;locked&lt;/strong&gt; to it. If you want another reader to start reading your stream, you typically need to cancel the first reader before you do anything else (although you can &lt;strong&gt;tee&lt;/strong&gt; streams, see the Teeing section below)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d31a1dec1e17969805128b236f4a0bb97cbb5a1" translate="yes" xml:space="preserve">
          <source>Only one target can be bound to a given &lt;a href=&quot;../webglbuffer&quot;&gt;&lt;code&gt;WebGLBuffer&lt;/code&gt;&lt;/a&gt;. An attempt to bind the buffer to another target will throw an &lt;code&gt;INVALID_OPERATION&lt;/code&gt; error and the current buffer binding will remain the same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1400ab8f1e19a1921ae0872d77e3868afde10de" translate="yes" xml:space="preserve">
          <source>Only parameter of type &lt;code&gt;ArrayBuffer&lt;/code&gt; and &lt;code&gt;String&lt;/code&gt; supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1645bf5a5e94fdd8ce375ace254c6dcf4486e92c" translate="yes" xml:space="preserve">
          <source>Only parameter of type &lt;code&gt;String&lt;/code&gt; supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="120e35bcab5ac511cc8fcb1af7fe0405db81962a" translate="yes" xml:space="preserve">
          <source>Only parameter of type &lt;code&gt;String&lt;/code&gt; supported. Returns &lt;code&gt;boolean&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f582b2a08ab7fdcf8b6d3f30da6dcac3ba93e4c4" translate="yes" xml:space="preserve">
          <source>Only returns a result if called on the result of &lt;code&gt;getComputedStyle()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="849aa8e7d21447f6d999f103ea3f76a31533355d" translate="yes" xml:space="preserve">
          <source>Only specify a &lt;code&gt;readwrite&lt;/code&gt; transaction mode when necessary. You can concurrently run multiple &lt;code&gt;readonly&lt;/code&gt; transactions with overlapping scopes, but you can have only one &lt;code&gt;readwrite&lt;/code&gt; transaction for an object store. To learn more, see the definition for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cc66264743f8e32e30f69386f27ccdc3e236074" translate="yes" xml:space="preserve">
          <source>Only specify a readwrite transaction mode when necessary. You can concurrently run multiple readonly transactions with overlapping scopes, but you can have only one readwrite transaction for an object store. To learn more, see the definition for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/IndexedDB/Basic_Concepts_Behind_IndexedDB#gloss_transaction&quot;&gt;transactions in the Basic Concepts article&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac189738c289c727f7a480517a5ae0c08e1bbbbe" translate="yes" xml:space="preserve">
          <source>Only support USB U2F tokens</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b9b26d40af8d62d7a975b233b039545433bcd0c" translate="yes" xml:space="preserve">
          <source>Only supported on &lt;code&gt;Element&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eafc09b9691a8060f38a14f5e9259e7a14ad93fb" translate="yes" xml:space="preserve">
          <source>Only supported via getComputedStyle in Firefox. Returns the property value as a &lt;a href=&quot;cssprimitivevalue&quot;&gt;&lt;code&gt;CSSPrimitiveValue&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;null&lt;/code&gt; for &lt;a href=&quot;https://developer.mozilla.org/en/CSS/Shorthand_properties&quot;&gt;shorthand properties&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34911bc9637a0f3edc339381e0509c6a1797f9a5" translate="yes" xml:space="preserve">
          <source>Only supports 'complete'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="821e4b000bde74fedebee66ba8c1298bda5548e4" translate="yes" xml:space="preserve">
          <source>Only supports &lt;code&gt;contains&lt;/code&gt; for HTML elements and not for SVG elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b2ebef30889628ab4f5d4c24d64235dbb7e87a8" translate="yes" xml:space="preserve">
          <source>Only supports &lt;code&gt;contains&lt;/code&gt; for elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63dc17c1555bc02f2c003e0c6bf22d474f3e79c2" translate="yes" xml:space="preserve">
          <source>Only the relevant parts of the code are displayed; you can &lt;a href=&quot;https://github.com/mdn/dom-examples/blob/master/media/mediaerror/&quot;&gt;see the complete source code here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="398968c6e1411df771be9ac53585b99beaf62e84" translate="yes" xml:space="preserve">
          <source>Only used for &lt;code&gt;RTCRtpSender&lt;/code&gt;, this property indicates whether or not to use discontinuous transmission (a feature by which a phone is turned off or the microphone muted automatically in the absence of voice activity). Defaults to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94b254f8dc08aee17950240612d3e4241979863b" translate="yes" xml:space="preserve">
          <source>Only used for senders whose track's &lt;a href=&quot;mediastreamtrack/kind&quot;&gt;&lt;code&gt;kind&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;&quot;video&quot;&lt;/code&gt;, this is a double-precision floating-point value specifying a scaling factor to apply while encoding the video. The default value, 1.0, means that the sent video's size will be the same as the original. A value of 2.0 scales the video frames down by a factor of 2 in each dimension, resulting in a video 1/4 the size of the original. The value must not be less than 1.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5abd4aafa471956418b31fc897162c2b17950f16" translate="yes" xml:space="preserve">
          <source>Only works in an &lt;a href=&quot;https://webvr.info/get-chrome/&quot;&gt;experimental version of Chrome&lt;/a&gt;. (Other builds won't return any devices when &lt;code&gt;Navigator.getVRDisplays()&lt;/code&gt; is invoked.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ee06e0345c647dd82a81b4b0254a0937eb80b69" translate="yes" xml:space="preserve">
          <source>Only works on Windows 8+.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74d23243f911dfb26f7142c0a3c3910d6d1436bc" translate="yes" xml:space="preserve">
          <source>Opcode</source>
          <target state="translated">Opcode</target>
        </trans-unit>
        <trans-unit id="f81f2b57514d4042dd1e8ecc52d5209dfecf7875" translate="yes" xml:space="preserve">
          <source>Opcode (Bit 4:7)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="507d8b76abc60fcecc3d58eeeefd5b683d70615c" translate="yes" xml:space="preserve">
          <source>Opcode &lt;em&gt;0x1&lt;/em&gt; means this is a text. &lt;a href=&quot;http://tools.ietf.org/html/rfc6455#section-5.2&quot;&gt;Full list of Opcodes&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09e8445175fdb72a01b51d56aa32e3d024195432" translate="yes" xml:space="preserve">
          <source>Opcode: These bits describe the type of message received. Opcode 0x1 means this is a text message. &lt;a href=&quot;http://tools.ietf.org/html/rfc6455#section-5.2&quot;&gt;Full list of Opcodes&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ecef4df9d1f7af824b9b465b39a22f53cd3bf60" translate="yes" xml:space="preserve">
          <source>Open a database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ae64197fef4bfb6a64651014642ff33a0814d4f" translate="yes" xml:space="preserve">
          <source>Open a notepad.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6b16305478945309c0fb5867d1c20742504dbd3" translate="yes" xml:space="preserve">
          <source>OpenGL ES 2.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbfbd5c0cd354e7719b3f914e8b276751733b09e" translate="yes" xml:space="preserve">
          <source>OpenGL ES 2.0&lt;br/&gt;&lt;small&gt;The definition of 'glActiveTexture' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da62db26e4047cebf763b35af470129068777074" translate="yes" xml:space="preserve">
          <source>OpenGL ES 2.0&lt;br/&gt;&lt;small&gt;The definition of 'glAttachShader' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4908f850aee6d615dc332898f4c123f56cb665bd" translate="yes" xml:space="preserve">
          <source>OpenGL ES 2.0&lt;br/&gt;&lt;small&gt;The definition of 'glBindAttribLocation' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f2c186a3370c138a1068b408e7053f70314fe7c" translate="yes" xml:space="preserve">
          <source>OpenGL ES 2.0&lt;br/&gt;&lt;small&gt;The definition of 'glBindBuffer' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
