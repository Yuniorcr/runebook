<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="javascript">
    <body>
      <group id="javascript">
        <trans-unit id="95dc172965791e059f6fdf61cfca3b8552eb577f" translate="yes" xml:space="preserve">
          <source>An array of the given object's own enumerable property &lt;code&gt;[key, value]&lt;/code&gt; pairs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96149a7cfd499334d51399dbd236c11d242d951e" translate="yes" xml:space="preserve">
          <source>An array-like object specifying the arguments with which &lt;code&gt;target&lt;/code&gt; should be called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a91c45330077c858d10f57c59493882d5804c68" translate="yes" xml:space="preserve">
          <source>An array-like object specifying the arguments with which &lt;em&gt;&lt;code&gt;target&lt;/code&gt;&lt;/em&gt; should be called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ea85a520a76e8b6050148f34da2b543b6c31c03" translate="yes" xml:space="preserve">
          <source>An array-like or iterable object to convert to a typed array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa9c92f2822babf9db63226c903eadbff9d44c70" translate="yes" xml:space="preserve">
          <source>An array-like or iterable object to convert to an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="420291fda6a2df1379755dfd0f020d225443c84b" translate="yes" xml:space="preserve">
          <source>An arrow function cannot contain a line break between its parameters and its arrow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30f3b9d9b9373d50159a57406f2ffef27133479a" translate="yes" xml:space="preserve">
          <source>An arrow function does not have its own &lt;code&gt;this;&lt;/code&gt; the &lt;code&gt;this&lt;/code&gt; value of the enclosing lexical context is used i.e. Arrow functions follow the normal variable lookup rules. So while searching for &lt;code&gt;this&lt;/code&gt; which is not present in current scope they end up finding &lt;code&gt;this&lt;/code&gt; from its enclosing scope . Thus, in the following code, the &lt;code&gt;this&lt;/code&gt; within the function that is passed to &lt;code&gt;setInterval&lt;/code&gt; has the same value as &lt;code&gt;this&lt;/code&gt; in the lexically enclosing function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2903f4c76b6a87245b422e2b51c264e5b423df7a" translate="yes" xml:space="preserve">
          <source>An arrow function expression has a shorter syntax and lexically binds its &lt;code&gt;this&lt;/code&gt; value (see &lt;a href=&quot;functions/arrow_functions&quot;&gt;arrow functions&lt;/a&gt; for details):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71f86c59a91631ee3cae0ebff0097fde924961e4" translate="yes" xml:space="preserve">
          <source>An assignment operator assigns a value to its left operand based on the value of its right operand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a07a0b90f394a5ae03e3e7fc5cb3ba0b9b17e65f" translate="yes" xml:space="preserve">
          <source>An easy way to understand array comprehension syntax, is to compare it with the Array &lt;a href=&quot;../global_objects/array/map&quot;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../global_objects/array/filter&quot;&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/a&gt; methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe7a92abe9d32ff8c428c25cb1f273210959e120" translate="yes" xml:space="preserve">
          <source>An empty iterable causes the returned promise to be forever pending:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5bebd2c7d7a5684a19483fa34674022fb01ee9d" translate="yes" xml:space="preserve">
          <source>An empty object with no properties can be created like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b06616016d285a37f2dcd931812ca40b58e483f7" translate="yes" xml:space="preserve">
          <source>An empty statement is used to provide no statement, although the JavaScript syntax would expect one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ca461869e539ecb37f26c5baeae262972b6ec88" translate="yes" xml:space="preserve">
          <source>An empty string &lt;var&gt;searchValue&lt;/var&gt; will match at any index between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;str.length&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71431f94615d62f369cba3d7202b3350d88fcd31" translate="yes" xml:space="preserve">
          <source>An encoded component of a Uniform Resource Identifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a1706e59c3de8fdea8b2a592f30d78f262a80bc" translate="yes" xml:space="preserve">
          <source>An existing &lt;a href=&quot;arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;sharedarraybuffer&quot;&gt;&lt;code&gt;SharedArrayBuffer&lt;/code&gt;&lt;/a&gt;  to use as the storage backing the new &lt;code&gt;DataView&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ef7aef358560ebdb0055bca9a1bae446c97504f" translate="yes" xml:space="preserve">
          <source>An existing symbol with the given key if found; otherwise, a new symbol is created and returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dac3affe4df2a3ef9b4685334a7f50105251705" translate="yes" xml:space="preserve">
          <source>An explanation of why the name &quot;&lt;strong&gt;let&lt;/strong&gt;&quot; was chosen can be found &lt;a href=&quot;https://stackoverflow.com/questions/37916940/why-was-the-name-let-chosen-for-block-scoped-variable-declarations-in-javascri&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="563b165e57203ba22b381e63a88f80ffaf862cb4" translate="yes" xml:space="preserve">
          <source>An expression (including assignment expressions) or variable declaration. Typically used to initialize a counter variable. This expression may optionally declare new variables with &lt;code&gt;var&lt;/code&gt; or let keywords. Variables declared with &lt;code&gt;var&lt;/code&gt; are not local to the loop, i.e. they are in the same scope the &lt;code&gt;for&lt;/code&gt; loop is in. Variables declared with let are local to the statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fbd88784f3cf214b9daf916b8f03307c6f230f6" translate="yes" xml:space="preserve">
          <source>An expression comparing Objects is only true if the operands reference the same Object.</source>
          <target state="translated">피연산자가 동일한 객체를 참조하는 경우에만 객체를 비교하는 표현식이 참입니다.</target>
        </trans-unit>
        <trans-unit id="d96fbf68c0b8026b43dbb2becb94876cf06f5c77" translate="yes" xml:space="preserve">
          <source>An expression evaluated after each pass through the loop. If &lt;code&gt;condition&lt;/code&gt; evaluates to true, the &lt;code&gt;statement&lt;/code&gt; is re-executed. When &lt;code&gt;condition&lt;/code&gt; evaluates to false, control passes to the statement following the &lt;code&gt;do...while&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4694def79a9e78b30c8c4a5a47247c0399309b4" translate="yes" xml:space="preserve">
          <source>An expression evaluated before each pass through the loop. If this condition evaluates to true, &lt;code&gt;statement&lt;/code&gt; is executed. When condition evaluates to false, execution continues with the statement after the &lt;code&gt;while&lt;/code&gt; loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d77c0bc243558a100ea011b2ee0d834472948bf" translate="yes" xml:space="preserve">
          <source>An expression to be evaluated at the end of each loop iteration. This occurs before the next evaluation of &lt;code&gt;condition&lt;/code&gt;. Generally used to update or increment the counter variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6c6980cf583ad644d4313f43c90fa74393d4f55" translate="yes" xml:space="preserve">
          <source>An expression to be evaluated before each loop iteration. If this expression evaluates to true, &lt;code&gt;statement&lt;/code&gt; is executed. This conditional test is optional. If omitted, the condition always evaluates to true. If the expression evaluates to false, execution skips to the first expression following the &lt;code&gt;for&lt;/code&gt; construct.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="096f81052c204301bb39461a515e3a197f8ba0a9" translate="yes" xml:space="preserve">
          <source>An expression whose result is matched against each case clause.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5cf0224face5193db610e7ed4df9111dbb244de" translate="yes" xml:space="preserve">
          <source>An expression whose value is used as a condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce72caeca8acacc91dc374028b95f508257f68d6" translate="yes" xml:space="preserve">
          <source>An identifier to hold an exception object for the associated &lt;code&gt;catch&lt;/code&gt; clause.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49041670d07ea7557ebf2d3541054989a1d8c947" translate="yes" xml:space="preserve">
          <source>An implementation dependent string representation of the timezone, which might be an abbreviation or full name (there is no standard for names or abbreviations of timezones), e.g. &quot;Line Islands Time&quot; or &quot;LINT&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bddcb716532f5813789510c630398489b6f527aa" translate="yes" xml:space="preserve">
          <source>An important difference between &lt;strong&gt;function declarations&lt;/strong&gt; and &lt;strong&gt;class declarations&lt;/strong&gt; is that function declarations are &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Hoisting&quot;&gt;hoisted&lt;/a&gt; and class declarations are not. You first need to declare your class and then access it, otherwise code like the following will throw a &lt;a href=&quot;global_objects/referenceerror&quot;&gt;&lt;code&gt;ReferenceError&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03cf9802975b2140faf4b1e02522092a10522a90" translate="yes" xml:space="preserve">
          <source>An index in the array if an element passes the test; otherwise, &lt;strong&gt;-1&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45068698e9e35e33334c7424a76962254dd1cef2" translate="yes" xml:space="preserve">
          <source>An infinite iterator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6549ca8166686b21d0cc0acb269a9dee4d5211f" translate="yes" xml:space="preserve">
          <source>An integer between 0 and +&amp;infin;: [0, +&amp;infin;), indicating the number of times to repeat the string in the newly-created string that is to be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c371a876965041f9229c3513e6ca693cd937b671" translate="yes" xml:space="preserve">
          <source>An integer between 0 and 1-less-than the length of the string. If no index is provided, the default is 0, so the first character in the string is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="106b9efaffaff775ad822a58e16c5ef2bf962e75" translate="yes" xml:space="preserve">
          <source>An integer between 0 and 11 representing the month.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0340f4b68be3264af2a2b8b4b46f968a655877fa" translate="yes" xml:space="preserve">
          <source>An integer between 0 and 11, representing the months January through December.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c307e319633b22dc9f4154c242880723be84dfbf" translate="yes" xml:space="preserve">
          <source>An integer between 0 and 23, representing the hour.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d8603477473538026a144a65d91cf5cfbe173c1" translate="yes" xml:space="preserve">
          <source>An integer between 0 and 59, representing the minutes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cd81723e643cac2becb26e41b4e0d2ec22b36f6" translate="yes" xml:space="preserve">
          <source>An integer between 0 and 59, representing the seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3877ba4370f4d8fc75db580b793f879f937eef5f" translate="yes" xml:space="preserve">
          <source>An integer between 1 and 7, a string representing a signed integer between 1 and 7.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08822b1556747f82a5e4057749ea2d5932291a56" translate="yes" xml:space="preserve">
          <source>An integer between 2 and 36 that represents the &lt;var&gt;radix&lt;/var&gt; (the base in mathematical numeral systems) of the above mentioned string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="052febdc911896d49cc022792c614d939102b8be" translate="yes" xml:space="preserve">
          <source>An integer from 1 to 31, representing the day of the month.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da1ff9a222f12671689bb808ba1d5a230e68ce18" translate="yes" xml:space="preserve">
          <source>An integer greater than or equal to 0 and less than the length of the string; if it is not a number, it defaults to 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23933916916af0d0a3a44b6ae90cbc769c6eedc8" translate="yes" xml:space="preserve">
          <source>An integer indicating the number of old array elements to remove.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b33fad11117904307c5cbf907a0aa9d62fff1be" translate="yes" xml:space="preserve">
          <source>An integer number corresponding to the day of the week for the given date, according to local time: 0 for Sunday, 1 for Monday, 2 for Tuesday, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35fba568ed1f420669a64b07f09439a349e74cb8" translate="yes" xml:space="preserve">
          <source>An integer number corresponding to the day of the week for the given date, according to universal time: 0 for Sunday, 1 for Monday, 2 for Tuesday, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36496561c417a8ee96420e2a90e6e6dca58c7829" translate="yes" xml:space="preserve">
          <source>An integer number parsed from the given string. If the first character cannot be converted to a number, &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="754f84fe6eda6fbcfd66a5c2dd8aaf4e612c3728" translate="yes" xml:space="preserve">
          <source>An integer number parsed from the given string. If the first character cannot be converted to a number, &lt;a href=&quot;nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7b92fee5e3d728be9bd92c3fb91adbf123124fa" translate="yes" xml:space="preserve">
          <source>An integer number, between 0 and 11, corresponding to the month of the given date according to universal time. 0 for January, 1 for February, 2 for March, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdf2d721e24be76b4cd146e44c2452bba742c120" translate="yes" xml:space="preserve">
          <source>An integer number, between 0 and 11, representing the month in the given date according to local time. 0 corresponds to January, 1 to February, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a983a5c51a13d3fd93ae6a301548ecf77e2a434d" translate="yes" xml:space="preserve">
          <source>An integer number, between 0 and 23, representing the hour for the given date according to local time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1325856017b7684f529e31d370b53200f228761" translate="yes" xml:space="preserve">
          <source>An integer number, between 0 and 23, representing the hours in the given date according to universal time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c70225ce44d32316849eb9b0a8f260dc07b6d33f" translate="yes" xml:space="preserve">
          <source>An integer number, between 0 and 59, representing the minutes in the given date according to local time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1de535437e5b03a40105100e65959b20cf5746c1" translate="yes" xml:space="preserve">
          <source>An integer number, between 0 and 59, representing the minutes in the given date according to universal time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8f4e1a7a43f1bbe013ac8cf5bf6a20bd20529e1" translate="yes" xml:space="preserve">
          <source>An integer number, between 0 and 59, representing the seconds in the given date according to local time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04050712c56a2a403dfbf471a090ea88b43e9813" translate="yes" xml:space="preserve">
          <source>An integer number, between 0 and 59, representing the seconds in the given date according to universal time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a5d3e71c52e9c6c55bf879a8f3240b43592ef22" translate="yes" xml:space="preserve">
          <source>An integer number, between 0 and 999, representing the milliseconds in the given date according to universal time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b365bdcc543e89595531fa9a1b8aa86a13679615" translate="yes" xml:space="preserve">
          <source>An integer number, between 1 and 31, representing the day of the month for the given date according to local time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f08d00e1b173f560b35429c221a4caaf7baac5f" translate="yes" xml:space="preserve">
          <source>An integer number, between 1 and 31, representing the day of the month in the given date according to universal time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17ddd4175df2c1bb6050443d893c9febc839b102" translate="yes" xml:space="preserve">
          <source>An integer representing the day of the month.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f35f4daf059f1c306117b1bfaa6ea2c0b629f0f3" translate="yes" xml:space="preserve">
          <source>An integer representing the index at which to start the search; the default value is &lt;code&gt;0&lt;/code&gt;. For &lt;code&gt;fromIndex&lt;/code&gt; values lower than &lt;code&gt;0&lt;/code&gt; or greater than &lt;code&gt;str.length&lt;/code&gt;, the search starts at index &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;str.length&lt;/code&gt; respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="209a9c0e9cc009c55d6958232eb29f3e5a9d99d7" translate="yes" xml:space="preserve">
          <source>An integer representing the number of milliseconds since 1 January 1970, 00:00:00 UTC.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcd6dd9cd13569033c0915a39e4d5a0f9941080f" translate="yes" xml:space="preserve">
          <source>An integer specifying the numeric value of the year, for example, 1995.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc997dad4494439606eb480415acf8f1c0c6b05c" translate="yes" xml:space="preserve">
          <source>An invalid array length might appear in these situations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="072ebc4cb51d3e0446dbaaf95877eb99fb472cf5" translate="yes" xml:space="preserve">
          <source>An iterable object, such as an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/iterable&quot;&gt;iterable&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f149abfff83b66c7ebbfb81fbb14f51ec0ef4ce9" translate="yes" xml:space="preserve">
          <source>An iterable such as &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; or other objects implementing the &lt;a href=&quot;../../iteration_protocols#The_iterable_protocol&quot;&gt;iterable protocol&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f2ede100cbd0f6ec44df1183f037c33e90c448d" translate="yes" xml:space="preserve">
          <source>An object containing all own property descriptors of an object. Might be an empty object, if there are no properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bec7bd7024bb97b0837a10deb648b4045bc8dac" translate="yes" xml:space="preserve">
          <source>An object containing the values to be imported into the newly-created &lt;code&gt;Instance&lt;/code&gt;, such as functions or &lt;a href=&quot;memory&quot;&gt;&lt;code&gt;WebAssembly.Memory&lt;/code&gt;&lt;/a&gt; objects. There must be one matching property for each declared import of &lt;code&gt;module&lt;/code&gt; or else a &lt;a href=&quot;linkerror&quot;&gt;WebAssembly.LinkError&lt;/a&gt; is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66b1d73c63f41dfe35f11e6718cabf1dcc6a7ea7" translate="yes" xml:space="preserve">
          <source>An object containing the values to be imported into the newly-created &lt;code&gt;Instance&lt;/code&gt;, such as functions or &lt;a href=&quot;memory&quot;&gt;&lt;code&gt;WebAssembly.Memory&lt;/code&gt;&lt;/a&gt; objects. There must be one matching property for each declared import of the compiled module or else a &lt;a href=&quot;linkerror&quot;&gt;WebAssembly.LinkError&lt;/a&gt; is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed4554d3a9bfe10fc9274f6580e3a99041e44b73" translate="yes" xml:space="preserve">
          <source>An object copy function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69c8c102247f74c4759a203869bb7774da7adb9b" translate="yes" xml:space="preserve">
          <source>An object initializer is an expression that describes the initialization of an &lt;a href=&quot;../global_objects/object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;. Objects consist of &lt;em&gt;properties&lt;/em&gt;, which are used to describe an object. Values of object properties can either contain &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/primitive&quot;&gt;primitive&lt;/a&gt; data types or other objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99a621d988e485ace47a397128dc8e8d287136fd" translate="yes" xml:space="preserve">
          <source>An object is an iterator when it implements a &lt;code&gt;&lt;strong&gt;next()&lt;/strong&gt;&lt;/code&gt; method with the following semantics:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f11c3f8e12b5acf0a8a11cbec820f5fa06996f30" translate="yes" xml:space="preserve">
          <source>An object is expected somewhere and wasn't provided. &lt;a href=&quot;../global_objects/null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; is not an object and won't work. You must provide a proper object in the given situation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4436066d53f46a0d1753452787cf7af4d3ecb195" translate="yes" xml:space="preserve">
          <source>An object is extensible if new properties can be added to it. &lt;code&gt;Object.preventExtensions()&lt;/code&gt; marks an object as no longer extensible, so that it will never have properties beyond the ones it had at the time it was marked as non-extensible. Note that the properties of a non-extensible object, in general, may still be &lt;em&gt;deleted&lt;/em&gt;. Attempting to add new properties to a non-extensible object will fail, either silently or by throwing a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; (most commonly, but not exclusively, when in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;strict mode&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf3070f43e03d203dcef8fb9469bdfb447fa49f1" translate="yes" xml:space="preserve">
          <source>An object is frozen if and only if it is not &lt;a href=&quot;isextensible&quot;&gt;extensible&lt;/a&gt;, all its properties are non-configurable, and all its data properties (that is, properties which are not accessor properties with getter or setter components) are non-writable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6df81df7baba66915feda74646cf84534079038b" translate="yes" xml:space="preserve">
          <source>An object that can contain the following members:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f02100f32e5bcd97721742e5813decce92bc3c34" translate="yes" xml:space="preserve">
          <source>An object value of whose own and inherited property names are excluded from the &lt;code&gt;&lt;a href=&quot;../statements/with&quot;&gt;with&lt;/a&gt;&lt;/code&gt; environment bindings of the associated object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="820a8026ea9b80267138c0a0b12726227ac4c231" translate="yes" xml:space="preserve">
          <source>An object whose own enumerable properties constitute descriptors for the properties to be defined or modified. Property descriptors present in objects come in two main flavors: data descriptors and accessor descriptors (see &lt;a href=&quot;defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt; for more details). Descriptors have the following keys:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a03bc5e160e766a9ed1913bb0e172b19eaac291" translate="yes" xml:space="preserve">
          <source>An object whose properties are functions which define the behavior of the proxy when an operation is performed on it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ef63f5b81d4a82352600a7b952ee57872f7bdd2" translate="yes" xml:space="preserve">
          <source>An object with configuration properties, for numbers see &lt;a href=&quot;../number/tolocalestring&quot;&gt;&lt;code&gt;Number.prototype.toLocaleString()&lt;/code&gt;&lt;/a&gt;, and for dates see &lt;a href=&quot;../date/tolocalestring&quot;&gt;&lt;code&gt;Date.prototype.toLocaleString()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c49c8fdfe03520a4f22227a3dace23aa8bffea7" translate="yes" xml:space="preserve">
          <source>An object's &lt;code&gt;valueOf&lt;/code&gt; method is usually invoked by JavaScript, but you can invoke it yourself as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3a29c22a80dd52034e9d0a6bb8b02f51cbeb8da" translate="yes" xml:space="preserve">
          <source>An optimization primitive that can be used to determine whether to use locks or atomic operations. Returns &lt;code&gt;true&lt;/code&gt;, if an atomic operation on arrays of the given element size will be implemented using a hardware atomic operation (as opposed to a lock). Experts only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d99abf3c44aeed951d4777d64be8fdd61de202ff" translate="yes" xml:space="preserve">
          <source>An optional &lt;a href=&quot;label&quot;&gt;&lt;code&gt;label&lt;/code&gt;&lt;/a&gt; for visual identification or as a target for &lt;a href=&quot;break&quot;&gt;&lt;code&gt;break&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f70d39f14cbc68c1cd5c4b7aa65ac0f905c0522" translate="yes" xml:space="preserve">
          <source>An optional statement that is executed as long as the condition evaluates to true. To execute multiple statements within the loop, use a &lt;a href=&quot;block&quot;&gt;block&lt;/a&gt; statement (&lt;code&gt;{ ... }&lt;/code&gt;) to group those statements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24819c5ddedcfe55fcfd455595e135fef10eea7f" translate="yes" xml:space="preserve">
          <source>An unsigned 16-bit integer number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce504bc3d402213305047f30718c8aa5119f3d78" translate="yes" xml:space="preserve">
          <source>An unsigned 32-bit integer number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4c36bd8b8247e9a2a43a0269db5cfa41e5b9762" translate="yes" xml:space="preserve">
          <source>An unsigned 8-bit integer number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e31e6e045f0d9d021bd59af5b2b59d92a760712" translate="yes" xml:space="preserve">
          <source>Anchored sticky flag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9078d8fbf9d47370364306bfc30567e70f7b2f5" translate="yes" xml:space="preserve">
          <source>Anchored sticky flag behavior per ES2015</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b108963d124df70a2f67339c2de1882421596e6a" translate="yes" xml:space="preserve">
          <source>Anchors created with the &lt;code&gt;anchor()&lt;/code&gt; method become elements in the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/anchors&quot;&gt;&lt;code&gt;document.anchors&lt;/code&gt;&lt;/a&gt; array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7480d2aeec56676be28d36508a4c39dd4fe7bdb" translate="yes" xml:space="preserve">
          <source>And if you were to provide an &lt;code&gt;initialValue&lt;/code&gt;, the result would look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cf4b1ce40c89b2855c5fbfaf193e6fc17095989" translate="yes" xml:space="preserve">
          <source>And now, let's re-throw the error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e40ca491b5dc7bb4160c2cc168b1951a8bcd2fb" translate="yes" xml:space="preserve">
          <source>And then instantiate two new &lt;code&gt;person&lt;/code&gt; objects as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5b93109d2910f83b46a8f8b84565a2b90f04e8f" translate="yes" xml:space="preserve">
          <source>Android webview</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d9e238257091e7b815453db1e7f955856aac944" translate="yes" xml:space="preserve">
          <source>Another Example: An &lt;a href=&quot;if...else&quot;&gt;&lt;code&gt;if...else&lt;/code&gt;&lt;/a&gt; statement without curly braces (&lt;code&gt;{}&lt;/code&gt;). If &lt;code&gt;three&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, nothing will happen, &lt;code&gt;four&lt;/code&gt; does not matter, and also the &lt;code&gt;launchRocket()&lt;/code&gt; function in the &lt;code&gt;else&lt;/code&gt; case will not be executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e1638d3363efdfbe5466eef1db2d2342c31fe3e" translate="yes" xml:space="preserve">
          <source>Another example</source>
          <target state="translated">또 다른 예</target>
        </trans-unit>
        <trans-unit id="38aefb666b7ab2db7e6b6eb0f628cc7c37e33e6e" translate="yes" xml:space="preserve">
          <source>Another example of temporal dead zone combined with lexical scoping</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ab1c822e9b3b96cbfa2bd5e2a0b2913a89156c6" translate="yes" xml:space="preserve">
          <source>Another example of throwing an object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db2f210ea05881fd5ef1b241094fcad01c62cbe2" translate="yes" xml:space="preserve">
          <source>Another example that one could make with comma operator is processing before returning. As stated, only the last element will be returned but all others are going to be evaluated as well. So, one could do:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29729dc342f0f212d34bf555bf46a096e78104b3" translate="yes" xml:space="preserve">
          <source>Another feature that was deprecated was &lt;code&gt;arguments.callee.caller&lt;/code&gt;, or more specifically &lt;code&gt;Function.caller&lt;/code&gt;. Why is this? Well, at any point in time you can find the deepest caller of any function on the stack, and as I said above looking at the call stack has one single major effect: it makes a large number of optimizations impossible, or much much more difficult. For example, if you cannot guarantee that a function &lt;code&gt;f&lt;/code&gt; will not call an unknown function, it is not possible to inline &lt;code&gt;f&lt;/code&gt;. Basically it means that any call site that may have been trivially inlinable accumulates a large number of guards:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76fc00cfc08f8f3c2a4610681b74ef7a539ad447" translate="yes" xml:space="preserve">
          <source>Another option for this use case might be to use a &lt;a href=&quot;../global_objects/map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="659dd4787a10ee95228f3a766583c861c4376858" translate="yes" xml:space="preserve">
          <source>Another possibility is to use &lt;a href=&quot;../template_literals&quot;&gt;template literals&lt;/a&gt;, which are supported in ECMAScript 2015 environments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="678fdef9c1a3fde8a191396e515b2108c7749a62" translate="yes" xml:space="preserve">
          <source>Another simple example using &lt;code&gt;Promise&lt;/code&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest&quot;&gt;&lt;code&gt;XMLHttpRequest&lt;/code&gt;&lt;/a&gt; to load an image is available at the MDN GitHub &lt;a href=&quot;https://github.com/mdn/js-examples/tree/master/promises-test&quot;&gt;js-examples&lt;/a&gt; repository. You can also &lt;a href=&quot;https://mdn.github.io/js-examples/promises-test/&quot;&gt;see it in action&lt;/a&gt;. Each step is commented and allows you to follow the Promise and XHR architecture closely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a181e40979db43208338191d57acf6b1b4ca1ece" translate="yes" xml:space="preserve">
          <source>Another way would be two to handle the empty case, either before calling &lt;code&gt;reduce&lt;/code&gt;, or in the callback after adding an unexpected dummy initial value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65dbba8190c1c78cee3f235dda797321e96cf16c" translate="yes" xml:space="preserve">
          <source>Anurag Majumdar - Super &amp;amp; Extends in JavaScript</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fe5105a977c4769f1bd28eaa84cc7507432091d" translate="yes" xml:space="preserve">
          <source>Any JavaScript identifier that is not a reserved word.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="120ebc47eb19aed84fe0fa9335c2121c4d28cc38" translate="yes" xml:space="preserve">
          <source>Any argument in the argument list can use spread syntax and it can be used multiple times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d8022bc7c6ecc3f95235e0126a70f61a8dc946a" translate="yes" xml:space="preserve">
          <source>Any argument value that is less than 0 or greater than &lt;code&gt;stringName.length&lt;/code&gt; is treated as if it were 0 and &lt;code&gt;stringName.length&lt;/code&gt; respectively. Any argument value that is &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; is treated as if it were 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="462f06d1e073cd86185bb9aaf55b870129c25321" translate="yes" xml:space="preserve">
          <source>Any code points may appear in the form of an escape sequence. String literals evaluate to ECMAScript String values. When generating these String values Unicode code points are UTF-16 encoded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0172cb97961cdda062ca7ce8fac8d0a39efa7ea" translate="yes" xml:space="preserve">
          <source>Any expressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1df0363b66ad832b2d5de41b91505b4cfbc96ff0" translate="yes" xml:space="preserve">
          <source>Any given exception will be caught only once by the nearest enclosing catch-block unless it is re-thrown. Of course, any new exceptions raised in the &quot;inner&quot; block (because the code in catch-block may do something that throws), will be caught by the &quot;outer&quot; block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c57c6045ba537d4f4071760d6b3efdb563da7e55" translate="yes" xml:space="preserve">
          <source>Any literal strings or whitespace in the formatted number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd90c15ad5e32e40f3250e0b9c1cf1a64b4485f1" translate="yes" xml:space="preserve">
          <source>Any negative number divided by &lt;code&gt;POSITIVE_INFINITY&lt;/code&gt; is negative Zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4f9a99f13863877ce756b248ebeab1f32f415e6" translate="yes" xml:space="preserve">
          <source>Any negative value divided by &lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt; is positive zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69d70aab2b2c68be24f0e61566d853801ee81d21" translate="yes" xml:space="preserve">
          <source>Any negative value, including &lt;a href=&quot;negative_infinity&quot;&gt;&lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt;&lt;/a&gt;, multiplied by &lt;code&gt;POSITIVE_INFINITY&lt;/code&gt; is &lt;a href=&quot;negative_infinity&quot;&gt;&lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93ed4a42f1477dc2202345409410952854ed731b" translate="yes" xml:space="preserve">
          <source>Any negative value, including &lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt;, multiplied by &lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt; is &lt;a href=&quot;positive_infinity&quot;&gt;&lt;code&gt;POSITIVE_INFINITY&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02c4a209de2c2fadc72815c6a463bb88e0037e90" translate="yes" xml:space="preserve">
          <source>Any newline characters inserted in the source are part of the template literal. Using normal strings, you would have to use the following syntax in order to get multi-line strings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e783679a6e6d3b22ceca2b95d8f69e073f1687ca" translate="yes" xml:space="preserve">
          <source>Any object of which the value is not &lt;a href=&quot;undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;, including a &lt;code&gt;Boolean&lt;/code&gt; object whose value is &lt;code&gt;false&lt;/code&gt;, evaluates to &lt;code&gt;true&lt;/code&gt; when passed to a conditional statement. For example, the condition in the following &lt;a href=&quot;../statements/if...else&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; statement evaluates to &lt;code&gt;true&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baae159e1bc05db0ccfaa73f09024f70815a9c63" translate="yes" xml:space="preserve">
          <source>Any other object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d870d35221986484377d8371800209cb672221c" translate="yes" xml:space="preserve">
          <source>Any positive number divided by &lt;code&gt;POSITIVE_INFINITY&lt;/code&gt; is positive Zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f2ef7716332780d4cbeb4b02ca293197d780a28" translate="yes" xml:space="preserve">
          <source>Any positive value divided by &lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt; is negativezero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71c63b188472aeb3bb2c19b931773ffeb14e9541" translate="yes" xml:space="preserve">
          <source>Any positive value, including &lt;a href=&quot;positive_infinity&quot;&gt;&lt;code&gt;POSITIVE_INFINITY&lt;/code&gt;&lt;/a&gt;, multiplied by &lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt; is &lt;code&gt;NEGATIVE_INFINITY&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40663bd051e9eb26e11a76943aa7901805b6a7f7" translate="yes" xml:space="preserve">
          <source>Any positive value, including &lt;code&gt;POSITIVE_INFINITY&lt;/code&gt;, multiplied by &lt;code&gt;POSITIVE_INFINITY&lt;/code&gt; is &lt;code&gt;POSITIVE_INFINITY&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f36b58843a66d33558d0519080bc582d8b84843" translate="yes" xml:space="preserve">
          <source>Any property declared with &lt;a href=&quot;../statements/let&quot;&gt;&lt;code&gt;let&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../statements/const&quot;&gt;&lt;code&gt;const&lt;/code&gt;&lt;/a&gt; cannot be deleted from the scope within which they were defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d250a3d163c089daaf861c1b6281450a1214fbee" translate="yes" xml:space="preserve">
          <source>Any property declared with &lt;a href=&quot;../statements/var&quot;&gt;&lt;code&gt;var&lt;/code&gt;&lt;/a&gt; cannot be deleted from the global scope or from a function's scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe1b3703f73f75fe58f81e1ed59799544c6a1b63" translate="yes" xml:space="preserve">
          <source>Any statement. To execute multiple statements, use a &lt;a href=&quot;block&quot;&gt;block&lt;/a&gt; statement ({ ... }) to group those statements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ce2652c4b040238e06008189496237a246ca32b" translate="yes" xml:space="preserve">
          <source>Any string that specifies the &lt;code&gt;href&lt;/code&gt; attribute of the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag; it should be a valid URL (relative or absolute), with any &lt;code&gt;&amp;amp;&lt;/code&gt; characters escaped as &lt;code&gt;&amp;amp;amp;&lt;/code&gt;, and any &lt;code&gt;&quot;&lt;/code&gt; characters escaped as &lt;code&gt;&amp;amp;quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8a80c1d8b906a18596a29b844aca28794484214" translate="yes" xml:space="preserve">
          <source>Any value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79e875b09fd179b1df32cb6b33825331f219f1bd" translate="yes" xml:space="preserve">
          <source>Any variable defined with &lt;code&gt;var&lt;/code&gt; is marked as non-configurable. In the following example, &lt;code&gt;salary&lt;/code&gt; is non-configurable and cannot be deleted. In non-strict mode, the &lt;code&gt;delete&lt;/code&gt; operation will return &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a84a609481880e442128a873df9896371e4a486" translate="yes" xml:space="preserve">
          <source>Anything to be converted to a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="236c6d96d1396da47fb718c1c70cbd3dd681a57d" translate="yes" xml:space="preserve">
          <source>Appending Prototype Chains</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e665300e918d74332b2742b941327096ebc4e41d" translate="yes" xml:space="preserve">
          <source>Appends a handler to the promise, and returns a new promise which is resolved when the original promise is resolved. The handler is called when the promise is settled, whether fulfilled or rejected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1410ae34999bd4955a8e78f8882063187d204fd" translate="yes" xml:space="preserve">
          <source>Appends a new element with the given value to the &lt;code&gt;Set&lt;/code&gt; object. Returns the &lt;code&gt;Set&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a38b2c6702934be92b08ef81b626db7ffc599942" translate="yes" xml:space="preserve">
          <source>Appends a new object with the given value to the &lt;code&gt;WeakSet&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1766991edca7f510f676e6a40b7fe16f16608e46" translate="yes" xml:space="preserve">
          <source>Appends a rejection handler callback to the promise, and returns a new promise resolving to the return value of the callback if it is called, or to its original fulfillment value if the promise is instead fulfilled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70a96367ea67f94fc6b60925b6c44c0cdf87e534" translate="yes" xml:space="preserve">
          <source>Appends fulfillment and rejection handlers to the promise, and returns a new promise resolving to the return value of the called handler, or to its original settled value if the promise was not handled (i.e. if the relevant handler &lt;code&gt;onFulfilled&lt;/code&gt; or &lt;code&gt;onRejected&lt;/code&gt; is not a function).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eeacb1c816d22849b1be1fe7f2e84686087551d" translate="yes" xml:space="preserve">
          <source>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2154cdb14e22c7ce545ad07a11a7b90e5dc570c0" translate="yes" xml:space="preserve">
          <source>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value. See also &lt;a href=&quot;../array/reduce&quot;&gt;&lt;code&gt;Array.prototype.reduce()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="099b64b5de77495c7e47f56cd30d2f07ec8b4595" translate="yes" xml:space="preserve">
          <source>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value. See also &lt;a href=&quot;array/reduce&quot;&gt;&lt;code&gt;Array.prototype.reduce()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27387529f0930425db4f86da78ab484c122b8fc4" translate="yes" xml:space="preserve">
          <source>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="298c3527001d4e1d738cbe7b386014991537faad" translate="yes" xml:space="preserve">
          <source>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value. See also &lt;a href=&quot;../array/reduceright&quot;&gt;&lt;code&gt;Array.prototype.reduceRight()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14db5180710bd1da842052aa2f9ebdacf810244c" translate="yes" xml:space="preserve">
          <source>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value. See also &lt;a href=&quot;array/reduceright&quot;&gt;&lt;code&gt;Array.prototype.reduceRight()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adfb2ef8d1613f689214f2f3c938cdd74c395d2b" translate="yes" xml:space="preserve">
          <source>Apply for new</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="219458337756538964c610a180311ef64788987f" translate="yes" xml:space="preserve">
          <source>Argument to be resolved by this &lt;code&gt;Promise&lt;/code&gt;. Can also be a &lt;code&gt;Promise&lt;/code&gt; or a thenable to resolve.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8372bf4b683d80ce379677415160200a3acb0226" translate="yes" xml:space="preserve">
          <source>Arguments object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9c170746708bafd69661d37a9e52f81b9c365da" translate="yes" xml:space="preserve">
          <source>Arguments to prepend to arguments provided to the bound function when invoking the target function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6104f39ed22a2cd32e98536a3447a01c4b9f4781" translate="yes" xml:space="preserve">
          <source>Arithmetic Operators</source>
          <target state="translated">산술 연산자</target>
        </trans-unit>
        <trans-unit id="d077356b7b5076ff62409f2fbd19527762e29c71" translate="yes" xml:space="preserve">
          <source>Arithmetic operators</source>
          <target state="translated">산술 연산자</target>
        </trans-unit>
        <trans-unit id="ad2101986bf079834f5e97462d8a86b84df9d757" translate="yes" xml:space="preserve">
          <source>Arithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="107004472b7ba4e5e31f3082ee1fb5a1239eec61" translate="yes" xml:space="preserve">
          <source>Array</source>
          <target state="translated">Array</target>
        </trans-unit>
        <trans-unit id="5e24458d846b2cac571b6dad13f86f103be1e9ea" translate="yes" xml:space="preserve">
          <source>Array comprehension was previously proposed to be standardized in ECMAScript 2016, it provide a useful shortcut for constructing a new array based on the contents of another. Comprehensions can often be used in place of calls to &lt;a href=&quot;../global_objects/array/map&quot;&gt;&lt;code&gt;map()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../global_objects/array/filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt;, or as a way of combining the two.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56e943b579120bf89542182a985318248ca1cdc7" translate="yes" xml:space="preserve">
          <source>Array comprehensions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec92be30c7075d7cbaf977412d5f7c60c6ba5ab0" translate="yes" xml:space="preserve">
          <source>Array comprehensions compared to &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9bd19cb1530ba2b98635d89f6578c4e48630f1d" translate="yes" xml:space="preserve">
          <source>Array comprehensions with if statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="842b581677d7bbf424ba11a565664f3dd7ca2c6f" translate="yes" xml:space="preserve">
          <source>Array comprehensions with two arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c165216e453ed98c3aef7f84dc7c701408f4b8e8" translate="yes" xml:space="preserve">
          <source>Array comprehensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b19a51e973f07fb33a1f0b3290dd21625155468" translate="yes" xml:space="preserve">
          <source>Array destructuring</source>
          <target state="translated">배열 파괴</target>
        </trans-unit>
        <trans-unit id="33944814a24fadb9f412474be11953dc9ae05219" translate="yes" xml:space="preserve">
          <source>Array elements are object properties in the same way that &lt;code&gt;toString&lt;/code&gt; is a property, but trying to access an element of an array as follows throws a syntax error because the property name is not valid:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a40bd58f6e852afaa3de5912db101f1c7a6e3647" translate="yes" xml:space="preserve">
          <source>Array from a &lt;code&gt;Map&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b311cad8218d80babeada604a6cfc0dceac040a" translate="yes" xml:space="preserve">
          <source>Array from a &lt;code&gt;Set&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c37271e2e7ebbd1be8f375e1ccbe1037bef4e172" translate="yes" xml:space="preserve">
          <source>Array from a &lt;code&gt;String&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8e55e94bdd15b33dc5e89e076dda9c9a54dbdcf" translate="yes" xml:space="preserve">
          <source>Array from an Array-like object (arguments)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dcb2d95c8fe2c2782c9cecd792d3969e8a95c47" translate="yes" xml:space="preserve">
          <source>Array indexes are just enumerable properties with integer names and are otherwise identical to general object properties. There is no guarantee that &lt;code&gt;for...in&lt;/code&gt; will return the indexes in any particular order. The &lt;code&gt;for...in&lt;/code&gt; loop statement will return all enumerable properties, including those with non&amp;ndash;integer names and those that are inherited.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dce53e0a0975947c956658914379abbbb9bb300" translate="yes" xml:space="preserve">
          <source>Array initializer/literal syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ff3d11bd339374764a52e87cc9cd404db976cee" translate="yes" xml:space="preserve">
          <source>Array iteration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70b6af200f3cd9da5e8eedc08862c1d1e9e582ad" translate="yes" xml:space="preserve">
          <source>Array iteration and for...in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="051f0d6bd098df06454138ddf1bfe22d07625d2a" translate="yes" xml:space="preserve">
          <source>Array literals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d400b46a131622426486cc164c53df3470099bd7" translate="yes" xml:space="preserve">
          <source>Array literals (&lt;code&gt;[1, 2, 3]&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a6c98dce72395c00ba5120f10385bf1cdf1c586" translate="yes" xml:space="preserve">
          <source>Array sort argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="048806b25e664d5f25b564c6d8dadfa08d426f7c" translate="yes" xml:space="preserve">
          <source>Array subclassing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb626b6aa22fe542a1defb09c31049c352ca0566" translate="yes" xml:space="preserve">
          <source>Array-like objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f11c41c31481af345045cf968702b9aaeedbdbe4" translate="yes" xml:space="preserve">
          <source>Array.@@species</source>
          <target state="translated">Array.@@species</target>
        </trans-unit>
        <trans-unit id="679ef0f69b71ffcfffd14154349f3a662a2bf231" translate="yes" xml:space="preserve">
          <source>Array.from</source>
          <target state="translated">Array.from</target>
        </trans-unit>
        <trans-unit id="e441a7e4503c40df54307ae7673c8302a82898f2" translate="yes" xml:space="preserve">
          <source>Array.isArray</source>
          <target state="translated">Array.isArray</target>
        </trans-unit>
        <trans-unit id="fb5ce6e940582647f2fa3ae56246c93e000d7601" translate="yes" xml:space="preserve">
          <source>Array.length</source>
          <target state="translated">Array.length</target>
        </trans-unit>
        <trans-unit id="7c95f9796809d5949a3a953877aa14c969a75aa9" translate="yes" xml:space="preserve">
          <source>Array.of</source>
          <target state="translated">Array.of</target>
        </trans-unit>
        <trans-unit id="9db637ab084a17ac81478a045a51d8242d7e6da5" translate="yes" xml:space="preserve">
          <source>Array.prototype</source>
          <target state="translated">Array.prototype</target>
        </trans-unit>
        <trans-unit id="95971ea269213b08d09c9553e6421bde178a5ca7" translate="yes" xml:space="preserve">
          <source>ArrayBuffer</source>
          <target state="translated">ArrayBuffer</target>
        </trans-unit>
        <trans-unit id="0759b3dac7ff4e7674f2a2c8f44a224ff636d7ea" translate="yes" xml:space="preserve">
          <source>ArrayBuffer.@@species</source>
          <target state="translated">ArrayBuffer.@@species</target>
        </trans-unit>
        <trans-unit id="ae7d638de1e11b639e68239572ac648b21255da8" translate="yes" xml:space="preserve">
          <source>ArrayBuffer.isView</source>
          <target state="translated">ArrayBuffer.isView</target>
        </trans-unit>
        <trans-unit id="f9865f3e07c8d91cb9ff94628a52a2470b489e09" translate="yes" xml:space="preserve">
          <source>ArrayBuffer.prototype</source>
          <target state="translated">ArrayBuffer.prototype</target>
        </trans-unit>
        <trans-unit id="95303c90ba12f2bf9d4a1daadf6aa1ea9000c060" translate="yes" xml:space="preserve">
          <source>ArrayBuffer.prototype.constructor</source>
          <target state="translated">ArrayBuffer.prototype.constructor</target>
        </trans-unit>
        <trans-unit id="b90cc9bfd23567a2ff5ba1f00e7c63ca6da8755e" translate="yes" xml:space="preserve">
          <source>Arrays</source>
          <target state="translated">Arrays</target>
        </trans-unit>
        <trans-unit id="5b5440253bf0400a58ae4dba7c2ffaea43b107b9" translate="yes" xml:space="preserve">
          <source>Arrays and/or values to concatenate into a new array. If &lt;code&gt;value&lt;em&gt;N&lt;/em&gt;&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;concat&lt;/code&gt; returns a shallow copy of the existing array on which it is called. See the description below for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d451c76312f844d3627616e3e376a66e8aeea81d" translate="yes" xml:space="preserve">
          <source>Arrays are list-like objects whose prototype has methods to perform traversal and mutation operations. Neither the length of a JavaScript array nor the types of its elements are fixed. Since an array's length can change at any time, and data can be stored at non-contiguous locations in the array, JavaScript arrays are not guaranteed to be dense; this depends on how the programmer chooses to use them. In general, these are convenient characteristics; but if these features are not desirable for your particular use, you might consider using typed arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6012be3ed9adcc6640c51a8dcfc660bb766ea888" translate="yes" xml:space="preserve">
          <source>Arrays cannot use strings as element indexes (as in an &lt;a href=&quot;https://en.wikipedia.org/wiki/Associative_array&quot;&gt;associative array&lt;/a&gt;) but must use integers. Setting or accessing via non-integers using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects#Objects_and_properties&quot;&gt;bracket notation&lt;/a&gt; (or &lt;a href=&quot;../operators/property_accessors&quot;&gt;dot notation&lt;/a&gt;) will not set or retrieve an element from the array list itself, but will set or access a variable associated with that array's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Properties&quot;&gt;object property collection&lt;/a&gt;. The array's object properties and list of array elements are separate, and the array's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#Array_methods&quot;&gt;traversal and mutation operations&lt;/a&gt; cannot be applied to these named properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e8a3c32c7e9b4c8f886e1bbebcdc7df95965d0d" translate="yes" xml:space="preserve">
          <source>Arrow function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc6d0b4a3431a2895e9d69a29dd7c9026e676f98" translate="yes" xml:space="preserve">
          <source>Arrow functions</source>
          <target state="translated">화살표 기능</target>
        </trans-unit>
        <trans-unit id="d503a4473544d47a97ef7776556a3f29e4c47c0a" translate="yes" xml:space="preserve">
          <source>Arrow functions can have either a &quot;concise body&quot; or the usual &quot;block body&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71b9a8dee12aacd502cecf7ed7a0ba5a0b89bc89" translate="yes" xml:space="preserve">
          <source>Arrow functions cannot be used as constructors and will throw an error when used with &lt;code&gt;new&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a7e7eee4b710ae724e5cf53d2cb03fcc499ec71" translate="yes" xml:space="preserve">
          <source>Arrow functions do not have a &lt;code&gt;prototype&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88efb2e48554f7f22c48e051b67d6b53b28be6a6" translate="yes" xml:space="preserve">
          <source>Arrow functions do not have their own &lt;a href=&quot;arguments&quot;&gt;&lt;code&gt;arguments&lt;/code&gt; object&lt;/a&gt;. Thus, in this example, &lt;code&gt;arguments&lt;/code&gt; is simply a reference to the arguments of the enclosing scope:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c57dbaecef381f062a942d4d6e763bd851543042" translate="yes" xml:space="preserve">
          <source>Arrow functions do not have their own &lt;code&gt;this&lt;/code&gt;. Another example involving &lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df85bc5997113f0441758b4fdcf56fbbd456a41a" translate="yes" xml:space="preserve">
          <source>Arrow functions introduce a short-hand braceless syntax that returns an expression. This can cause unintended side effects by returning the result of a function call that previously returned nothing. To be safe, when the return value of a function is not intended to be used, it can be passed to the void operator to ensure that (for example) changing APIs do not cause arrow functions' behaviors to change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9375a1b9855e61c8027f0cf7732afbaa29837a39" translate="yes" xml:space="preserve">
          <source>Arrow functions used as methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d45babcae94938a3c75f01f70e934447e795901a" translate="yes" xml:space="preserve">
          <source>As a DOM event handler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="429a16b965fd947d5a1e23ea21fc9c7acb81cf44" translate="yes" xml:space="preserve">
          <source>As a constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f7cda1e552cc8fbbcb34407a14ed1f6d2513b06" translate="yes" xml:space="preserve">
          <source>As a quick and dirty hack the expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85317fe7f561e137bf6a3057ad71f87e70b5f0e5" translate="yes" xml:space="preserve">
          <source>As all objects have no own symbol properties initially, &lt;code&gt;Object.getOwnPropertySymbols()&lt;/code&gt; returns an empty array unless you have set symbol properties on your object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aef2ce6a60ba776240379210716384a2e73586e4" translate="yes" xml:space="preserve">
          <source>As all other objects, &lt;a href=&quot;global_objects/function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt; objects can be created using the &lt;code&gt;new&lt;/code&gt; operator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a16ab5a2287e3f880e1444c946f5f1cf3c609f54" translate="yes" xml:space="preserve">
          <source>As all other objects, &lt;a href=&quot;global_objects/generatorfunction&quot;&gt;&lt;code&gt;GeneratorFunction&lt;/code&gt;&lt;/a&gt; objects can be created using the &lt;code&gt;new&lt;/code&gt; operator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="316d4ebbc7f55319e26f659bc6183c143a6e7095" translate="yes" xml:space="preserve">
          <source>As an example, &lt;code&gt;str.slice(2, -1)&lt;/code&gt; extracts the third character through the second to last character in the string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3604afbf4a4aac3adb46d11b657fd186dbeaec0" translate="yes" xml:space="preserve">
          <source>As an object method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a3f20c0b7149e2a5b69aca6a85dbd88e7bfa06c" translate="yes" xml:space="preserve">
          <source>As defined by the ECMAScript 5 specification, &lt;code&gt;Infinity&lt;/code&gt; is read-only (implemented in JavaScript 1.8.5 / Firefox 4).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27266e7938b0cc73a7255c19c6a79a6c2e4e030b" translate="yes" xml:space="preserve">
          <source>As logical expressions are evaluated left to right, it is always possible to remove parentheses from a complex expression following some rules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de89faab92512d4843c7e08807f95f16cb8c3a6c" translate="yes" xml:space="preserve">
          <source>As logical expressions are evaluated left to right, they are tested for possible &quot;short-circuit&quot; evaluation using the following rules:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e5845a76203089fc9b6ffd2ba3e1d1f05c9b349" translate="yes" xml:space="preserve">
          <source>As mentioned above, &lt;code&gt;\w&lt;/code&gt; or &lt;code&gt;\W&lt;/code&gt; only matches ASCII based characters; for example, &quot;a&quot; to &quot;z&quot;, &quot;A&quot; to &quot;Z&quot;, &quot;0&quot; to &quot;9&quot; and &quot;_&quot;. To match characters from other languages such as Cyrillic or Hebrew, use &lt;code&gt;\uhhhh&lt;/code&gt;, where &quot;hhhh&quot; is the character's Unicode value in hexadecimal. This example demonstrates how one can separate out Unicode characters from a word.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b89ad20db407fbc1dbcf949ff2ea73d3e7739cc" translate="yes" xml:space="preserve">
          <source>As mentioned above, &lt;code&gt;push&lt;/code&gt; is intentionally generic, and we can use that to our advantage. &lt;code&gt;Array.prototype.push&lt;/code&gt; can work on an object just fine, as this example shows. Note that we don't create an array to store a collection of objects. Instead, we store the collection on the object itself and use &lt;code&gt;call&lt;/code&gt; on &lt;code&gt;Array.prototype.push&lt;/code&gt; to trick the method into thinking we are dealing with an array, and it just works, thanks to the way JavaScript allows us to establish the execution context however we please.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdaa8b62f43dc63e0ad47d864f7b58399b69902c" translate="yes" xml:space="preserve">
          <source>As of ECMAScript 2016, tagged templates conform to the rules of the following escape sequences:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86e7074b192dda8a1ea062acc4b52554bbdf7bf1" translate="yes" xml:space="preserve">
          <source>As of ES2015, you can also use &lt;a href=&quot;../functions/arrow_functions&quot;&gt;arrow functions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c921421fe81703c8f087d8c7268acc1471abd2a8" translate="yes" xml:space="preserve">
          <source>As said, these differences can make debugging even simple-seeming problems quickly go astray. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7968e2796cc6687a5f4953a8ad7fa7b732d73941" translate="yes" xml:space="preserve">
          <source>As seen above, the fields can be declared with or without a default value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46c6c7f8bfb6ac149c26748e945c00f905895f02" translate="yes" xml:space="preserve">
          <source>As seen in the example, trying to write into the non-writable property doesn't change it but doesn't throw an error either.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21d2a264c9fde6e01cdf2ed05d84f01da72050fc" translate="yes" xml:space="preserve">
          <source>As shown above, all seems normal so far. However, when attempting to actually use these objects, their differences quickly become apparent:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73c0dbacbcb3a76bc1ffa8c313fdd8b9265aed3c" translate="yes" xml:space="preserve">
          <source>As shown, objects modified this way now look very much like ordinary objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aa22bacbb90ee485c142e8d6f87aa78c9b48fd9" translate="yes" xml:space="preserve">
          <source>As stated previously, arrow function expressions are best suited for non-method functions. Let's see what happens when we try to use them as methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cbfbd88cd6fe7b112788dcbd77c64a11bc25a9d" translate="yes" xml:space="preserve">
          <source>As stated, if you do not specify a constructor method a default constructor is used. For base classes the default constructor is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01141694d25e0ba11fdfedb99ad78dedf9123324" translate="yes" xml:space="preserve">
          <source>As such, &lt;code&gt;delete&lt;/code&gt; cannot delete any functions in the global scope (whether this is part from a function definition or a function expression).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43de276e02fb5cae067a91bb1ffdd5afad4051d8" translate="yes" xml:space="preserve">
          <source>As the 4th example shows, the function name can be different from the variable the function is assigned to. They have no relation to each other. A function declaration also creates a variable with the same name as the function name. Thus, unlike those defined by function expressions, functions defined by function declarations can be accessed by their name in the scope they were defined in:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf55a33661f108fbde9b2bb54f72e0af2bb68fd8" translate="yes" xml:space="preserve">
          <source>As the &lt;code&gt;&lt;a href=&quot;promise/then&quot;&gt;&lt;code&gt;Promise.prototype.then()&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;promise/catch&quot;&gt;&lt;code&gt;Promise.prototype.catch()&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; methods return promises, they can be chained.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04b9cb9920dc356539a8a67ecac564d8697a4b53" translate="yes" xml:space="preserve">
          <source>As the &lt;code&gt;then&lt;/code&gt; and &lt;a href=&quot;catch&quot;&gt;&lt;code&gt;Promise.prototype.catch()&lt;/code&gt;&lt;/a&gt; methods return promises, they can be chained &amp;mdash; an operation called &lt;em&gt;composition&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04c18933c5032f4ca8d5f4ea92b287dae00fb65e" translate="yes" xml:space="preserve">
          <source>As we can see, both examples do not start with the &lt;code&gt;function&lt;/code&gt; keyword. Statements involving functions which do not start with &lt;code&gt;function&lt;/code&gt; are function expressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfea5df33fceeb3e5a45b870d696433556ac14ce" translate="yes" xml:space="preserve">
          <source>As with most of the built-in objects in JavaScript, the &lt;code&gt;Math&lt;/code&gt; object can be extended with custom properties and methods. To extend the &lt;code&gt;Math&lt;/code&gt; object, you do not use &lt;code&gt;prototype&lt;/code&gt;. Instead, you directly extend &lt;code&gt;Math&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94774134762debfbbc3a38c381068610d4609520" translate="yes" xml:space="preserve">
          <source>As you can do with any Array-like object, you can use ES2015's &lt;a href=&quot;../global_objects/array/from&quot;&gt;&lt;code&gt;Array.from()&lt;/code&gt;&lt;/a&gt; method or &lt;a href=&quot;../operators/spread_syntax&quot;&gt;spread operator&lt;/a&gt; to convert &lt;code&gt;arguments&lt;/code&gt; to a real Array:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49bf55dc112eb3597726ba8ecf785a4fae4cbce0" translate="yes" xml:space="preserve">
          <source>Assertions</source>
          <target state="translated">Assertions</target>
        </trans-unit>
        <trans-unit id="19ee3ef8fecaf357009c4e42e1758b79bd67b243" translate="yes" xml:space="preserve">
          <source>Assigning a value to an undeclared variable implicitly creates it as a global variable (it becomes a property of the global object) when the assignment is executed. The differences between declared and undeclared variables are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a328cf23950a4c2dd7cf0d84df9d0f0b55887b06" translate="yes" xml:space="preserve">
          <source>Assigning a value to the same constant name in the same block-scope will throw.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77d7cec53736acd03c12949621fbb4f0fef2b3f8" translate="yes" xml:space="preserve">
          <source>Assigning the rest of an array to a variable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc89d73de1e7985333c94758dd3f77af4489b824" translate="yes" xml:space="preserve">
          <source>Assigning to length</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dab86c2f68dc9210ef0bdb54850781f15563ef0c" translate="yes" xml:space="preserve">
          <source>Assigning to new variable names</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3a2f1aa05c3769666a3869dfe2488d80afcf977" translate="yes" xml:space="preserve">
          <source>Assigning to new variables names and providing default values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd1bfc09c8e5fbdfec303db25c21f0f19458bebf" translate="yes" xml:space="preserve">
          <source>Assigning two variables with single string value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e55df441e8955746182110c3946288f381520e83" translate="yes" xml:space="preserve">
          <source>Assignment</source>
          <target state="translated">Assignment</target>
        </trans-unit>
        <trans-unit id="5f1106667a3ffe6b7d174acec14d782a9c3ea70e" translate="yes" xml:space="preserve">
          <source>Assignment (&lt;code&gt;x = y&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bec00ae67953bf63f8b1b3f8ddf8f9255f79d82" translate="yes" xml:space="preserve">
          <source>Assignment Operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87c55c9d7cf3600d0c45a8fa56b1b4cc7c337e78" translate="yes" xml:space="preserve">
          <source>Assignment operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa098245c1ec6b3b4a9cec4ec49f68bc2b3dc905" translate="yes" xml:space="preserve">
          <source>Assignment operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="831e549cdc8903a28dcd904d46eb9b62d0711db3" translate="yes" xml:space="preserve">
          <source>Assignment separate from declaration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99708553016c28b2ad5d67c421a22ae856a7943d" translate="yes" xml:space="preserve">
          <source>Assignment within conditional expressions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="159e1ce04e2cd5322d4cb306182e2709c3b28d64" translate="yes" xml:space="preserve">
          <source>Assignment within the conditional expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a37acb2e24f30a5a26e984dd635a4ee536e546f" translate="yes" xml:space="preserve">
          <source>Assignment without declaration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18c67934740cd2dda50cc308a7af44a2cbc3ff0b" translate="yes" xml:space="preserve">
          <source>Associates a function with a property that, when accessed, executes that function and returns its return value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fb3991ea7907d72606d3a58259eeab463111ab2" translate="yes" xml:space="preserve">
          <source>Associates a function with a property that, when set, executes that function which modifies the property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d20b5a26a1cdf631954b50a5206246dff93d9c8a" translate="yes" xml:space="preserve">
          <source>Associativity</source>
          <target state="translated">Associativity</target>
        </trans-unit>
        <trans-unit id="7e8c8e8756c3e2a099abe557013eea7ecf8ac4e8" translate="yes" xml:space="preserve">
          <source>Associativity determines the way in which operators of the same precedence are parsed. For example, consider an expression:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40a30fc881d26c18d47a972f2de5340d0bddd541" translate="yes" xml:space="preserve">
          <source>Assuming a pristine execution environment with all names and properties referring to their initial values, &lt;code&gt;Object.defineProperties&lt;/code&gt; is almost completely equivalent (note the comment in &lt;code&gt;isCallable&lt;/code&gt;) to the following reimplementation in JavaScript:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6287d405a76408031a1b4e4ab2ff51598b84909" translate="yes" xml:space="preserve">
          <source>Assuming a runtime that supports Indonesian and German but not Balinese in collation, &lt;code&gt;supportedLocalesOf&lt;/code&gt; returns the Indonesian and German language tags unchanged, even though pinyin collation is not used with Indonesian and a specialized German for Indonesia is unlikely to be supported. Note the specification of the &lt;code&gt;&quot;lookup&quot;&lt;/code&gt; algorithm here &amp;mdash; a &lt;code&gt;&quot;best fit&quot;&lt;/code&gt; matcher might decide that Indonesian is an adequate match for Balinese since most Balinese speakers also understand Indonesian, and therefore return the Balinese language tag as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20cfbcee80b679f703032bf9fd2069c9ca834319" translate="yes" xml:space="preserve">
          <source>Assuming a runtime that supports Indonesian and German but not Balinese in date and time formatting, &lt;code&gt;supportedLocalesOf&lt;/code&gt; returns the Indonesian and German language tags unchanged, even though pinyin collation is neither relevant to date and time formatting nor used with Indonesian, and a specialized German for Indonesia is unlikely to be supported. Note the specification of the &lt;code&gt;&quot;lookup&quot;&lt;/code&gt; algorithm here &amp;mdash; a &lt;code&gt;&quot;best fit&quot;&lt;/code&gt; matcher might decide that Indonesian is an adequate match for Balinese since most Balinese speakers also understand Indonesian, and therefore return the Balinese language tag as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b74a342ee44ef6af7964c6966d0846ba4b275b6" translate="yes" xml:space="preserve">
          <source>Assuming a runtime that supports Indonesian and German but not Balinese in number formatting, &lt;code&gt;supportedLocalesOf&lt;/code&gt; returns the Indonesian and German language tags unchanged, even though &lt;code&gt;pinyin&lt;/code&gt; collation is neither relevant to number formatting nor used with Indonesian, and a specialized German for Indonesia is unlikely to be supported. Note the specification of the &lt;code&gt;&quot;lookup&quot;&lt;/code&gt; algorithm here &amp;mdash; a &lt;code&gt;&quot;best fit&quot;&lt;/code&gt; matcher might decide that Indonesian is an adequate match for Balinese since most Balinese speakers also understand Indonesian, and therefore return the Balinese language tag as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="139cd6b0d8a3c6ef09755401116cf1edc4fd2f7b" translate="yes" xml:space="preserve">
          <source>Assuming a runtime that supports Indonesian and German but not Balinese in plural formatting, &lt;code&gt;supportedLocalesOf&lt;/code&gt; returns the Indonesian and German language tags unchanged, even though &lt;code&gt;pinyin&lt;/code&gt; collation is neither relevant to plural formatting nor used with Indonesian, and a specialized German for Indonesia is unlikely to be supported. Note the specification of the &lt;code&gt;&quot;lookup&quot;&lt;/code&gt; algorithm here &amp;mdash; a &lt;code&gt;&quot;best fit&quot;&lt;/code&gt; matcher might decide that Indonesian is an adequate match for Balinese since most Balinese speakers also understand Indonesian, and therefore return the Balinese language tag as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1de478364d359d80003f50ac6c23dfbb8ec17b9" translate="yes" xml:space="preserve">
          <source>Async generator methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eff9960bccab37df30db91c6d36347885aa7dad8" translate="yes" xml:space="preserve">
          <source>Async methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72461dccf2067d5111358217c4577db8984d2f42" translate="yes" xml:space="preserve">
          <source>AsyncFunction</source>
          <target state="translated">AsyncFunction</target>
        </trans-unit>
        <trans-unit id="675d9dafc3dde5f6f1f3e1b07267f9831dd78bc7" translate="yes" xml:space="preserve">
          <source>AsyncFunction.prototype</source>
          <target state="translated">AsyncFunction.prototype</target>
        </trans-unit>
        <trans-unit id="84383a8f0f36526e51c1d4e8d7d5425bfd96b2ca" translate="yes" xml:space="preserve">
          <source>Asynchronicity of &lt;code&gt;Promise.race&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02d60b958686cb1f594032ede8ba5c532cc8eb38" translate="yes" xml:space="preserve">
          <source>Asynchronicity or synchronicity of &lt;code&gt;Promise.all&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caf455145317822f90dd7493431b1576d0e6536d" translate="yes" xml:space="preserve">
          <source>At present, there is no &lt;code&gt;Math.clon&lt;/code&gt; for &quot;Count Leading Ones&quot; (named &quot;clon&quot;, not &quot;clo&quot;, because &quot;clo&quot; and &quot;clz&quot; are too similar especially for non-english-speaking people). However, a CLON function can easily be created by inversing the bits of a number and passing the result to `Math.clz` which will work because the inverse of 1 is 0 and vice-versa. Thus, inversing the bits will inverse the measured quanity 0 (of Math.clz), thereby making Math.clz count the number of ones instead of the number of zeros.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21647d40658d5c2bb791c8dd38ca360a2deedaab" translate="yes" xml:space="preserve">
          <source>At the top level of programs and functions, &lt;code&gt;let&lt;/code&gt;, unlike &lt;code&gt;var&lt;/code&gt;, does not create a property on the global object. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb34ad6782840b3609292d56d50524837de11852" translate="yes" xml:space="preserve">
          <source>Atomic operations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22cd0cbd81dee9dcd227285a4fb456261af24ea4" translate="yes" xml:space="preserve">
          <source>Atomics</source>
          <target state="translated">Atomics</target>
        </trans-unit>
        <trans-unit id="f85f7410ec8be229ef5b91b1cd3f92c61f353f5a" translate="yes" xml:space="preserve">
          <source>Atomics.add</source>
          <target state="translated">Atomics.add</target>
        </trans-unit>
        <trans-unit id="e00a0386c1e6b2b0638039f05bc4001df4969ab8" translate="yes" xml:space="preserve">
          <source>Atomics.and</source>
          <target state="translated">Atomics.and</target>
        </trans-unit>
        <trans-unit id="ad2717348dd0b78b3ee3b1d52eedf3294cae060a" translate="yes" xml:space="preserve">
          <source>Atomics.compareExchange</source>
          <target state="translated">Atomics.compareExchange</target>
        </trans-unit>
        <trans-unit id="badd0d0872059c86c2354b2522695f9e9b64e841" translate="yes" xml:space="preserve">
          <source>Atomics.exchange</source>
          <target state="translated">Atomics.exchange</target>
        </trans-unit>
        <trans-unit id="9a2ef3ec645728e3192050492ca789f56bd331ef" translate="yes" xml:space="preserve">
          <source>Atomics.isLockFree</source>
          <target state="translated">Atomics.isLockFree</target>
        </trans-unit>
        <trans-unit id="1fb98a238867f9795a0ca47509ccc73a1f3804e1" translate="yes" xml:space="preserve">
          <source>Atomics.load</source>
          <target state="translated">Atomics.load</target>
        </trans-unit>
        <trans-unit id="8f33001e9afb9970703f3e069d77cd387440522c" translate="yes" xml:space="preserve">
          <source>Atomics.notify</source>
          <target state="translated">Atomics.notify</target>
        </trans-unit>
        <trans-unit id="4b59069ef282276419e62366e7890757fc613351" translate="yes" xml:space="preserve">
          <source>Atomics.or</source>
          <target state="translated">Atomics.or</target>
        </trans-unit>
        <trans-unit id="7a3aec76fe1cacc70b5c6d279f1176edd778085b" translate="yes" xml:space="preserve">
          <source>Atomics.store</source>
          <target state="translated">Atomics.store</target>
        </trans-unit>
        <trans-unit id="b2be5619f1b779bdbcc894c4b051895bb2cf5398" translate="yes" xml:space="preserve">
          <source>Atomics.sub</source>
          <target state="translated">Atomics.sub</target>
        </trans-unit>
        <trans-unit id="6b37ac0d3d457722e8601f3c8e946f5f5bf02162" translate="yes" xml:space="preserve">
          <source>Atomics.wait</source>
          <target state="translated">Atomics.wait</target>
        </trans-unit>
        <trans-unit id="a82e5513b087ae217336da68fa152fea0c82446d" translate="yes" xml:space="preserve">
          <source>Atomics.xor</source>
          <target state="translated">Atomics.xor</target>
        </trans-unit>
        <trans-unit id="2b33afd0e78ae876c55d72cc152397ba1385a00e" translate="yes" xml:space="preserve">
          <source>Attempting to declare a class twice</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72d46d7d3d242c212209a1fadee72567b294d7d2" translate="yes" xml:space="preserve">
          <source>Attempting to delete a plain variable, doesn't work in JavaScript and it throws an error in strict mode:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db5152f6fbed10d8441cb928a545cd73f0aaed25" translate="yes" xml:space="preserve">
          <source>Attention: If an empty string (&quot;&quot;) is used as the separator, the string is &lt;strong&gt;not&lt;/strong&gt; split between each &lt;em&gt;user-perceived character&lt;/em&gt; (&lt;a href=&quot;https://unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries&quot;&gt;grapheme cluster&lt;/a&gt;) or between each unicode character (codepoint) but between each UTF-16 codeunit. This destroys &lt;a href=&quot;http://unicode.org/faq/utf_bom.html#utf16-2&quot;&gt;surrogate pairs&lt;/a&gt;. See also &lt;a href=&quot;https://stackoverflow.com/a/34717402&quot;&gt;How do you get a string to a character array in JavaScript?&lt;/a&gt; on stackoverflow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9198038145c380df9f218dd05386e8b57cbcae3" translate="yes" xml:space="preserve">
          <source>Autoboxing will not happen in strict mode, the &lt;em&gt;this&lt;/em&gt; value remains as passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f1bd0e4bb77a22b6b44b6989aabd07d1ca2d4a8" translate="yes" xml:space="preserve">
          <source>Automate Mask Creation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef03d415de3b288ce45c39fae71498f3e9051f49" translate="yes" xml:space="preserve">
          <source>Automatic Semicolon Insertion</source>
          <target state="translated">자동 세미콜론 삽입</target>
        </trans-unit>
        <trans-unit id="872127103480de5d4b855a7eef875473dc644f22" translate="yes" xml:space="preserve">
          <source>Automatic semicolon insertion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea2f6197435b14aebe5f46e481ed29407de6b116" translate="yes" xml:space="preserve">
          <source>Automatic semicolon insertion (ASI)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dbde6894a574267e8a91c3cb9bcd71799f17575" translate="yes" xml:space="preserve">
          <source>Available in Firefox Nightly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3de44dc233fdc574da2ac9dba3876a893c9af95f" translate="yes" xml:space="preserve">
          <source>Avoiding &lt;code&gt;eval()&lt;/code&gt; here could be done by splitting the property path and looping through the different properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f18a12ebb8823e606a287182279c3b7bf13c914" translate="yes" xml:space="preserve">
          <source>Axel Rauschmayer's book: &quot;Exploring JS: Modules&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6a4665f91bc71a6040ede9f0b9a35ce77ce0584" translate="yes" xml:space="preserve">
          <source>BCP 47 also allows for extensions. JavaScript internationalization functions use the &lt;code&gt;&quot;u&quot;&lt;/code&gt; (Unicode) extension, which can be used to request additional customization of &lt;a href=&quot;collator&quot;&gt;&lt;code&gt;Collator&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;numberformat&quot;&gt;&lt;code&gt;NumberFormat&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;datetimeformat&quot;&gt;&lt;code&gt;DateTimeFormat&lt;/code&gt;&lt;/a&gt; objects. Examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14f79f39f0a63aa933f5da5de18563f76130fdb0" translate="yes" xml:space="preserve">
          <source>Babel can handle Custom Error Class methods, but only when they are declared with &lt;a href=&quot;object/defineproperty&quot;&gt;Object.defineProperty()&lt;/a&gt;. Otherwise, Babel and other transpilers will not correctly handle the following code without &lt;a href=&quot;https://github.com/loganfsmyth/babel-plugin-transform-builtin-extend&quot;&gt;additional configuration&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c1d2b7474b3062f0921e1c8062aee5ea36a9a24" translate="yes" xml:space="preserve">
          <source>Backward compatibility: In historic versions (like JavaScript 1.2) the &lt;code&gt;charCodeAt()&lt;/code&gt; method returns a number indicating the ISO-Latin-1 codeset value of the character at the given index. The ISO-Latin-1 codeset ranges from 0 to 255. The first 0 to 127 are a direct match of the ASCII character set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4503df1131ba4201009636d74c2ac16a6cb58b3a" translate="yes" xml:space="preserve">
          <source>Bad code with eval:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ddbaaa28a35cb31e8f654cd17ff8f5babeaec2b" translate="yes" xml:space="preserve">
          <source>Bad keywords</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb778240eb1a8d5a5b8d65d21154595b3c8f0201" translate="yes" xml:space="preserve">
          <source>Bad octal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3938ec2fcbf136263fe632f93c19fa52f055a88" translate="yes" xml:space="preserve">
          <source>Bad radix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52ef861c5150691f8f54cf9fda204d94d1f25438" translate="yes" xml:space="preserve">
          <source>Bad regexp flag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56c45ab05316e25c53faf5dfe1d3443f60ccab8a" translate="yes" xml:space="preserve">
          <source>Bad return or yield</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a598b79d487db8f6e5350ab4e06367a72ce91665" translate="yes" xml:space="preserve">
          <source>Base 10 logarithm of E, approximately 0.434.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90d513cda2433f2c16588aab1e2d0e868d46a7e3" translate="yes" xml:space="preserve">
          <source>Base 2 logarithm of E, approximately 1.443.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec7bef0e28378298bb0f60a8456b619c42be767e" translate="yes" xml:space="preserve">
          <source>Base62x</source>
          <target state="translated">Base62x</target>
        </trans-unit>
        <trans-unit id="dac6b24f78471a132bc9a7ec7774530351b54fb0" translate="yes" xml:space="preserve">
          <source>Basic Example</source>
          <target state="translated">기본 예</target>
        </trans-unit>
        <trans-unit id="d3171daff0fd5c1a55e8e273e630be925b5dab7f" translate="yes" xml:space="preserve">
          <source>Basic assignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20b19d89ef0aed3f2d4f1afed1d3f801c6b85aa5" translate="yes" xml:space="preserve">
          <source>Basic example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="603a17103ca6f4689a7f39d7753cccdc316ac985" translate="yes" xml:space="preserve">
          <source>Basic keywords and general expressions in JavaScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48e2b3aff207a2929af920ad2047a4854ec8d687" translate="yes" xml:space="preserve">
          <source>Basic support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="953657b3d60232a538f74887fa8b6a3c3c1d63ab" translate="yes" xml:space="preserve">
          <source>Basic syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb3a8802da5b3164771a468d78ff7995a249f08a" translate="yes" xml:space="preserve">
          <source>Basic usage</source>
          <target state="translated">기본 사용법</target>
        </trans-unit>
        <trans-unit id="d0cb1bfda35a10398f80e9a6a90f2d5ba29df508" translate="yes" xml:space="preserve">
          <source>Basic variable assignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97c266c8bd468b1c3cd55d582d8503a21e064806" translate="yes" xml:space="preserve">
          <source>Be aware that a &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; will be thrown if a trailing comma is used on the left-hand side with a rest element:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc9bbd3411cedcf90a22d35246e2dd08020ba70c" translate="yes" xml:space="preserve">
          <source>Be careful when using the &lt;code&gt;in&lt;/code&gt; operator to search in &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; objects. The &lt;code&gt;in&lt;/code&gt; operator checks the index number, not the value at that index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04bf3c3bb0512624aeb7e2950aaef79621519c1b" translate="yes" xml:space="preserve">
          <source>Be mindful of the order:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48d4529f5c08d6e05c06f2a846ce44f96dd10e1b" translate="yes" xml:space="preserve">
          <source>Bear in mind that these attributes are not necessarily the descriptor's own properties. Inherited properties will be considered as well. In order to ensure these defaults are preserved, you might freeze the &lt;a href=&quot;prototype&quot;&gt;&lt;code&gt;Object.prototype&lt;/code&gt;&lt;/a&gt; upfront, specify all options explicitly, or point to &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; with &lt;a href=&quot;create&quot;&gt;&lt;code&gt;Object.create(null)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9c00375e350157c8ada33eaad97c26905f63efc" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;E&lt;/code&gt; is a static property of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.E&lt;/code&gt;, rather than as a property of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b82237b8ca287548c8c9d966231902587413854" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;LN10&lt;/code&gt; is a static property of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.LN10&lt;/code&gt;, rather than as a property of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74c299425352e96db9b847db61898b8bd8a3bbb7" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;LN2&lt;/code&gt; is a static property of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.LN2&lt;/code&gt;, rather than as a property of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b21307b05117fad93dfb591d1dc7fbf9248e5e7d" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;LOG10E&lt;/code&gt; is a static property of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.LOG10E&lt;/code&gt;, rather than as a property of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35a8bdd1c3ebf5931310584099a45bdb95dc7a00" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;LOG2E&lt;/code&gt; is a static property of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.LOG2E&lt;/code&gt;, rather than as a property of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28da257f917dc14a7461c78d28327d34af66855c" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;MAX_SAFE_INTEGER&lt;/code&gt; is a static property of &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt;, you always use it as &lt;code&gt;Number.MAX_SAFE_INTEGER&lt;/code&gt;, rather than as a property of a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; object you created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0bd2fe13bef8111056df1f25f32475d70d3dd46" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;MAX_VALUE&lt;/code&gt; is a static property of &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt;, you always use it as &lt;code&gt;Number.MAX_VALUE&lt;/code&gt;, rather than as a property of a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; object you created. Calling it on the object you created(rather than &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; itself), will result in &lt;strong&gt;undefined&lt;/strong&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7668233da44d6b3d40245d7d5498724e4e43aab" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;MIN_SAFE_INTEGER&lt;/code&gt; is a static property of &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt;, you always use it as &lt;code&gt;Number.MIN_SAFE_INTEGER&lt;/code&gt;, rather than as a property of a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; object you created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddc83264c5614617d7120921ebe62621ba077b15" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;MIN_VALUE&lt;/code&gt; is a static property of &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt;, you always use it as &lt;code&gt;Number.MIN_VALUE&lt;/code&gt;, rather than as a property of a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; object you created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc6003a808eb6b1e37755f0a59d5c4579d5512c5" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;PI&lt;/code&gt; is a static property of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.PI&lt;/code&gt;, rather than as a property of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce3db7decf4d8bb989733ad671d3d4a23d7d324f" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;SQRT1_2&lt;/code&gt; is a static property of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.SQRT1_2&lt;/code&gt;, rather than as a property of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eadbe8117d2da8fddf518944fb3798a13a205fc" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;SQRT2&lt;/code&gt; is a static property of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.SQRT2&lt;/code&gt;, rather than as a property of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da0573ddff08ba142b239d6699ca38a32055fb53" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;abs()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.abs()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37e61cbad7672ad9ad2a476a1d4818ce03c60692" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;acos()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.acos()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e20ec90111527afee6c1b5758ff6c8166867c76d" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;acosh()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.acosh()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is no constructor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c42515ecc3b7607915622996be58b945e58008c5" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;asin()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.asin()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ad7904f3ecae86089f72ff0a3814609d377719a" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;asinh()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.asinh()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e875c549d11bc970b0f1afdcf76ded5ef1eac90" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;atan()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.atan()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b8b9b1909763a487ac98201cce52fefdc1934b5" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;atan2()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.atan2()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4edbcd2c6fdb404e5be6e4271ec17592b8ea3453" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;atanh()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.atanh()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c39bc6d4aaea62511e5e16c760ed8a7cd2057282" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;cbrt()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.cbrt()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7536b1cc9a985c4bb5f8409e31dcaf4731519d46" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;ceil()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.ceil()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5199a2af06df91de5b4bcfdf9fbd3a86fe3452f" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;cos()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.cos()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae64a33697739a9c10e13dcd75bd1d4c6f28d9d9" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;cosh()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.cosh()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60fe84081b0a915785751f48959e6fc0527d23da" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;exp()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.exp()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="492133ebabf3cb8131ecd1375ae5a01bc20e3ba9" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;expm1()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.expm1()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e762507e1c13ded9a98083683b7484be5bb493e4" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;floor()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.floor()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d44790cd68c5a20a416530969112fe05b3fed5a0" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;fromCharCode()&lt;/code&gt; is a static method of &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;, you always use it as &lt;code&gt;String.fromCharCode()&lt;/code&gt;, rather than as a method of a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; object you created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d013ee9d50f6892ef3976a970b60a910ebe9b4c4" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;fromCodePoint()&lt;/code&gt; is a static method of &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;, you always use it as &lt;code&gt;String.fromCodePoint()&lt;/code&gt;, rather than as a method of a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; object you created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad160d0aa4d77d60deec7ba899aff53d3317dbc8" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;fround()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.fround()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53268151587d2de8c8d329793e7fa99990cf27ce" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;hypot()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.hypot()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca090e636d85d8126929e1be48b1bedb97a25f21" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;log()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.log()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06ff84d1cfb60efb814067d964a1badf08b59ca8" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;log10()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.log10()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4504da10c3b187be135cf0b93ebfb704290c6dd" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;log1p()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.log1p()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1c683e74b27b4bb60facc44c92d320f9cacd257" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;log2()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.log2()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11fbf5fcd5f937dc77c18cf2f7ab47a9611d3751" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;max()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.max()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a8071e18e448e739f60e98d44548d36040ed2f9" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;min()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.min()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e9a349771578ae630f5b9ceca8e29d7d1f4ca26" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;now()&lt;/code&gt; is a static method of &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;, you always use it as &lt;code&gt;Date.now()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b49ed67cd88286bc6e1698ad754539ba1a1a87c" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;parse()&lt;/code&gt; is a static method of &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;, it is called as &lt;code&gt;Date.parse()&lt;/code&gt; rather than as a method of a &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a80d77f1956af42d7d1e58a2096c01b4786f98a" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;pow()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.pow()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; has no constructor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de9f67058c4fe9ab68863945bdf1f1f9fd637f13" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;round()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.round()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; has no constructor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17c60362cae5bfd6dcbd5b5c30746edb43c3f633" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;sign()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.sign()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a98e1606f6da2fede2d7644872da386e2f311bbb" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;sin()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.sin()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d397c84b8315649a9cf478375d3f01829dad94d0" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;sinh()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.sinh()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="372e97a5361f71355eab20c306344aad5abea7fb" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;sqrt()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.sqrt()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2bffdc67853a6649c3a6b0f0e3fba320e583173" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;tan()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.tan()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30244635651b5dba22a6f60b570c933ced1b0c92" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;tanh()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.tanh()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3eef51281b9d3788e8242b114a41ca29e195be9" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;trunc()&lt;/code&gt; is a static method of &lt;code&gt;Math&lt;/code&gt;, you always use it as &lt;code&gt;Math.trunc()&lt;/code&gt;, rather than as a method of a &lt;code&gt;Math&lt;/code&gt; object you created (&lt;code&gt;Math&lt;/code&gt; is not a constructor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5ce40564816fc1649df79ceab1927c7ff224088" translate="yes" xml:space="preserve">
          <source>Because JavaScript does not currently include standard support for 64-bit integer values, &lt;code&gt;DataView&lt;/code&gt; does not offer native 64-bit operations. As a workaround, you could implement your own getUint64() method to obtain a value with precision up to &lt;a href=&quot;number/max_safe_integer&quot;&gt;&lt;code&gt;Number.MAX_SAFE_INTEGER&lt;/code&gt;&lt;/a&gt;, which could suffice for certain cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c20a9cfdd69df242b88e730600c7db46b22fe86f" translate="yes" xml:space="preserve">
          <source>Because each value in the Set has to be unique, the value equality will be checked. In an earlier version of ECMAScript specification, this was not based on the same algorithm as the one used in the === operator. Specifically, for &lt;code&gt;Set&lt;/code&gt;s, &lt;code&gt;+0&lt;/code&gt; (which is strictly equal to &lt;code&gt;-0&lt;/code&gt;) and &lt;code&gt;-0&lt;/code&gt; were different values. However, this was changed in the ECMAScript 2015 specification. See &quot;Value equality for -0 and 0&quot; in the &lt;a href=&quot;#Browser_compatibility&quot;&gt;browser compatibility&lt;/a&gt; table for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1fded9ba75595ca39290a957e0bae450c1108c6" translate="yes" xml:space="preserve">
          <source>Because of references being weak, &lt;code&gt;WeakMap&lt;/code&gt; keys are not enumerable (i.e. there is no method giving you a list of the keys). If they were, the list would depend on the state of garbage collection, introducing non-determinism. If you want to have a list of keys, you should use a &lt;a href=&quot;map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb652a847f513489449cba9cb7f59972b1464b30" translate="yes" xml:space="preserve">
          <source>Because of the variances in parsing of date strings, it is recommended to always manually parse strings as results are inconsistent, especially across different ECMAScript implementations where strings like &lt;code&gt;&quot;2015-10-12 12:00:00&quot;&lt;/code&gt; may be parsed to as &lt;code&gt;NaN&lt;/code&gt;, UTC or local timezone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db1f1a95df83f9cfc159023a1630ca2b35b2c638" translate="yes" xml:space="preserve">
          <source>Because of these three differences, failure to declare variables will very likely lead to unexpected results. Thus &lt;strong&gt;it is recommended to always declare variables, regardless of whether they are in a function or global scope.&lt;/strong&gt; And in ECMAScript 5 &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;, assigning to an undeclared variable throws an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bb7ef7b8fd64ccc09bf1a82f2ef249678defa0d" translate="yes" xml:space="preserve">
          <source>Because some numbers include the &lt;code&gt;e&lt;/code&gt; character in their string representation (e.g. &lt;code&gt;6.022e23&lt;/code&gt;), using &lt;code&gt;parseInt&lt;/code&gt; to truncate numeric values will produce unexpected results when used on very large or very small numbers. &lt;code&gt;parseInt&lt;/code&gt; should not be used as a substitute for &lt;a href=&quot;math/floor&quot;&gt;&lt;code&gt;Math.floor()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d20de304942bae9b22b7814302f926fb3ecafa2" translate="yes" xml:space="preserve">
          <source>Because the &lt;code&gt;Math.tan()&lt;/code&gt; function accepts radians, but it is often easier to work with degrees, the following function accepts a value in degrees, converts it to radians and returns the tangent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d2baf8a9799699735ddc9e7f897328da1c9244e" translate="yes" xml:space="preserve">
          <source>Because the order of iteration is implementation-dependent, iterating over an array may not visit elements in a consistent order. Therefore, it is better to use a &lt;a href=&quot;for&quot;&gt;&lt;code&gt;for&lt;/code&gt;&lt;/a&gt; loop with a numeric index (or &lt;a href=&quot;../global_objects/array/foreach&quot;&gt;&lt;code&gt;Array.prototype.forEach()&lt;/code&gt;&lt;/a&gt; or the &lt;a href=&quot;for...of&quot;&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/a&gt; loop) when iterating over arrays where the order of access is important.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4281d9845fae6b6d0dce14f1297972fc4b1d4319" translate="yes" xml:space="preserve">
          <source>Because there is no &quot;+&quot; operator to concatenate the string, JavaScript expects the argument for the &lt;code&gt;log&lt;/code&gt; function to be just &lt;code&gt;&quot;PI: &quot;&lt;/code&gt;. In that case, it should be terminated by a closing parenthesis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc95003644b4ff30716b50875dcd9e7875b16289" translate="yes" xml:space="preserve">
          <source>Because variable declarations (and declarations in general) are processed before any code is executed, declaring a variable anywhere in the code is equivalent to declaring it at the top. This also means that a variable can appear to be used before it's declared. This behavior is called &quot;hoisting&quot;, as it appears that the variable declaration is moved to the top of the function or global code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2abcf792e9e27d8dafb82479f92f8a86c66adb6f" translate="yes" xml:space="preserve">
          <source>Because we want to further transform the &lt;em&gt;result&lt;/em&gt; of the match before the final substitution is made, we must use a function. This forces the evaluation of the match prior to the &lt;a href=&quot;tolowercase&quot;&gt;&lt;code&gt;toLowerCase()&lt;/code&gt;&lt;/a&gt; method. If we had tried to do this using the match without a function, the &lt;a href=&quot;tolowercase&quot;&gt;&lt;code&gt;toLowerCase()&lt;/code&gt;&lt;/a&gt; would have no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6ae924cc0de1fac266b0475d2bc8a29c06258cf" translate="yes" xml:space="preserve">
          <source>Been formally correct it suffers from a number of issues related to floating point computations. Accurate result requires special handling of positive/negative, small/large arguments as it done e.g. in &lt;a href=&quot;https://sourceware.org/git/?p=glibc.git;a=blob;f=sysdeps/ieee754/dbl-64/s_asinh.c&quot;&gt;glibc&lt;/a&gt; or &lt;a href=&quot;http://git.savannah.gnu.org/cgit/gsl.git/tree/sys/invhyp.c&quot;&gt;GNU Scientific Library&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="159644552db2acc7dd9b689cc5dc2eaa6ac55f74" translate="yes" xml:space="preserve">
          <source>Before ECMAScript 2015, &lt;code&gt;typeof&lt;/code&gt; was always guaranteed to return a string for any operand it was supplied with. Even with undeclared identifiers, &lt;code&gt;typeof&lt;/code&gt; will return &lt;code&gt;'undefined'&lt;/code&gt;. Using &lt;code&gt;typeof&lt;/code&gt; could never generate an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d75a7b56c05bb5521d3f28fbe0024c97cf4e0458" translate="yes" xml:space="preserve">
          <source>Behavior of &lt;code&gt;Math.abs()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51f92d6f7fd65c8ad04ba8889f67557332d328c6" translate="yes" xml:space="preserve">
          <source>Below is an example of how to use &lt;code&gt;Object.create()&lt;/code&gt; to achieve classical inheritance. This is for single inheritance, which is all that JavaScript supports.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c41b032a35727b00a30611f89e3948a0493d74fe" translate="yes" xml:space="preserve">
          <source>Below, you'll find a list of errors which are thrown by JavaScript. These errors can be a helpful debugging aid, but the reported problem isn't always immediately clear. The pages below will provide additional details about these errors. Each error is an object based upon the &lt;a href=&quot;global_objects/error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; object, and has a &lt;code&gt;name&lt;/code&gt; and a &lt;code&gt;message&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf8202e0fab4410750ecb314be24a983994b26bd" translate="yes" xml:space="preserve">
          <source>Below... even though there is just one value, the last argument still gets put into an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="261185687d86dcc2558ac603bc22ba3f33059610" translate="yes" xml:space="preserve">
          <source>Below... the third argument wasn't provided, yet &quot;manyMoreArgs&quot; is still an array (although empty).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20cd995d35d428b0741c03ebed037a0ac338a5c0" translate="yes" xml:space="preserve">
          <source>Besides &lt;code&gt;false&lt;/code&gt;, possible falsy expressions are: &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/code&gt;, &lt;code&gt;&lt;code&gt;&lt;code&gt;0&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;, the empty string (&lt;code&gt;&lt;code&gt;&lt;code&gt;&lt;code&gt;&quot;&quot;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;), and &lt;code&gt;&lt;code&gt;&lt;code&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/code&gt;. If &lt;code&gt;condition&lt;/code&gt; is any of these, the result of the conditional expression will be &lt;code&gt;exprF&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dd9d33fbffbae845ccc0b4876c531ee46de4cdc" translate="yes" xml:space="preserve">
          <source>Besides generator objects, &lt;code&gt;yield*&lt;/code&gt; can also &lt;code&gt;yield&lt;/code&gt; other kinds of iterables, e.g. arrays, strings or arguments objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e6eafdf023657a3fd3a8b11636254d4fad58147" translate="yes" xml:space="preserve">
          <source>Besides regular, printable characters, special characters can be encoded using escape notation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7c2e151a3cc5d7777c01be8bc72c029402798cc" translate="yes" xml:space="preserve">
          <source>Besides the generic &lt;code&gt;Error&lt;/code&gt; constructor, there are seven other core error constructors in JavaScript. For client-side exceptions, see &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Statements#Exception_handling_statements&quot;&gt;Exception handling statements&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77d11c5ac571ff07519a187888bdf11074258b69" translate="yes" xml:space="preserve">
          <source>Better code without eval:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9d539cd76ae701f0f3708222006d5c1b01546b8" translate="yes" xml:space="preserve">
          <source>Between the generator's code path, its &lt;code&gt;yield&lt;/code&gt; operators, and the ability to specify a new starting value by passing it to &lt;a href=&quot;../global_objects/generator/next&quot;&gt;&lt;code&gt;Generator.prototype.next()&lt;/code&gt;&lt;/a&gt;, generators offer enormous power and control.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66639f7d455dd71faa9147f5d69e5ce885d8bebd" translate="yes" xml:space="preserve">
          <source>Binary</source>
          <target state="translated">Binary</target>
        </trans-unit>
        <trans-unit id="a6ae5e739bb51d1efcd9ab02e0c4453257e53d13" translate="yes" xml:space="preserve">
          <source>Binary bitwise operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8756d89e35f765492208b16956608e9c330132ec" translate="yes" xml:space="preserve">
          <source>Binary logical operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2874efcc76cef8287eda56aabf4377e410abf486" translate="yes" xml:space="preserve">
          <source>Binary number syntax uses a leading zero followed by a lowercase or uppercase Latin letter &quot;B&quot; (&lt;code&gt;0b&lt;/code&gt; or &lt;code&gt;0B&lt;/code&gt;). Because this syntax is new in ECMAScript 2015, see the browser compatibility table, below. If the digits after the &lt;code&gt;0b&lt;/code&gt; are not 0 or 1, the following &lt;code&gt;&lt;a href=&quot;global_objects/syntaxerror&quot;&gt;SyntaxError&lt;/a&gt;&lt;/code&gt; is thrown: &quot;Missing binary digits after 0b&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a017cd979dca481c1cc4d0dba522bb792b6ec74" translate="yes" xml:space="preserve">
          <source>Binary numeric literals (&lt;code&gt;0b&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bdf2505c1f9ea6cd90d41762fb41d00a51b1117" translate="yes" xml:space="preserve">
          <source>Binary strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76de4944f8b748c8a0e7daa5916ebaebf0eb3452" translate="yes" xml:space="preserve">
          <source>Binding can be done with the .&lt;code&gt;call&lt;/code&gt; function of &lt;a href=&quot;../function/prototype&quot;&gt;&lt;code&gt;Function.prototype&lt;/code&gt;&lt;/a&gt; and it can also be reduced using &lt;code&gt;[].slice.call(arguments)&lt;/code&gt; instead of &lt;code&gt;Array.prototype.slice.call&lt;/code&gt;. Anyway, it can be simplified using &lt;a href=&quot;../function/bind&quot;&gt;&lt;code&gt;bind&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="286ca3119c2dddb2961e31f60e4a3e163da17eae" translate="yes" xml:space="preserve">
          <source>Binds an object property to a function that will be called when that property is looked up.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e3a56716d36edae26cdf7ba11e2b0a7f1f03c0e" translate="yes" xml:space="preserve">
          <source>Binds an object property to a function to be called when there is an attempt to set that property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17e80e5f71e9b85954b350f117d4dfeb3c5cf70a" translate="yes" xml:space="preserve">
          <source>Bitwise AND</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="904b0e8a139eb9ff00c6255a632105837af7ed24" translate="yes" xml:space="preserve">
          <source>Bitwise AND (&lt;code&gt;a &amp;amp; b&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19157360058c50bbf65aa36c06fcf24282a48b35" translate="yes" xml:space="preserve">
          <source>Bitwise AND assignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="207c0ede4c9f854f279319be8d54c1851a4c68e6" translate="yes" xml:space="preserve">
          <source>Bitwise AND assignment (&lt;code&gt;x &amp;amp;= y&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b83b40bc737146a9d8ff05e395bc13b4f754647f" translate="yes" xml:space="preserve">
          <source>Bitwise AND assignment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffba6db82603dad8914301fabc35b8806c66bd9d" translate="yes" xml:space="preserve">
          <source>Bitwise AND.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="228f1254537780a1665d7d6053bc84359b75bc83" translate="yes" xml:space="preserve">
          <source>Bitwise ANDing any number &lt;code&gt;x&lt;/code&gt; with &lt;code&gt;0&lt;/code&gt; yields &lt;code&gt;0&lt;/code&gt;. Bitwise ANDing any number &lt;code&gt;x&lt;/code&gt; with &lt;code&gt;-1&lt;/code&gt; yields &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1106c19e63f1ecb8c7e66bf9006a1aeb1bfdb0e8" translate="yes" xml:space="preserve">
          <source>Bitwise Left Shift</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="136c3a93310929e09124297eaf66ab9f3782d009" translate="yes" xml:space="preserve">
          <source>Bitwise NOT</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b85f0285386bcc121aa981e9285153a238ab302c" translate="yes" xml:space="preserve">
          <source>Bitwise NOT (&lt;code&gt;~a&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea10ea62f6783893a49bcccf186e0af033c9f677" translate="yes" xml:space="preserve">
          <source>Bitwise NOT operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9eca6b3f86ef4b57c63a63799bfc18d87f7ade5" translate="yes" xml:space="preserve">
          <source>Bitwise NOTing any number &lt;code&gt;x&lt;/code&gt; yields &lt;code&gt;-(x + 1)&lt;/code&gt;. For example, &lt;code&gt;~-5&lt;/code&gt; yields &lt;code&gt;4&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4be0adcfa81c37e1e7bbf2e23630f30974d164f" translate="yes" xml:space="preserve">
          <source>Bitwise OR</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78a461b3681192de29c2632b67cf5c033faafe18" translate="yes" xml:space="preserve">
          <source>Bitwise OR (&lt;code&gt;a | b&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7d8fd299d5c1bafd6ababe24987384c94c58173" translate="yes" xml:space="preserve">
          <source>Bitwise OR assignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf6f335e17a5850b36eca82a39c1fb3b9497c5cf" translate="yes" xml:space="preserve">
          <source>Bitwise OR assignment (&lt;code&gt;x |= y&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02d812fc3cec8b81c5535cd3018fc4f06ade94e9" translate="yes" xml:space="preserve">
          <source>Bitwise OR assignment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6cce76615b422f50d91d4d2e6ab10761c70e02d" translate="yes" xml:space="preserve">
          <source>Bitwise OR.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76ed4e1870847d788b5165f69f2a25c0d1bdf96f" translate="yes" xml:space="preserve">
          <source>Bitwise ORing any number &lt;code&gt;x&lt;/code&gt; with &lt;code&gt;0&lt;/code&gt; yields &lt;code&gt;x&lt;/code&gt;. Bitwise ORing any number &lt;code&gt;x&lt;/code&gt; with &lt;code&gt;-1&lt;/code&gt; yields &lt;code&gt;-1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f06f824cef5caab026aebdaccc85d665d4b620db" translate="yes" xml:space="preserve">
          <source>Bitwise Operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13d1bf85f6108733cd5763f383227ae586d1706d" translate="yes" xml:space="preserve">
          <source>Bitwise Right Shift</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d105663d9d701d23ae726ff9dc6d8ecf8192aa61" translate="yes" xml:space="preserve">
          <source>Bitwise Unsigned Right Shift</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74269e9a4eb117ac43a93ed74bc3c8cd96fd4ff4" translate="yes" xml:space="preserve">
          <source>Bitwise XOR</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51306fe75b76bd49cbe3e00e768e9b55bf4ae5f7" translate="yes" xml:space="preserve">
          <source>Bitwise XOR (&lt;code&gt;a ^ b&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3e1709ce290a67ec5f21e03a6b6317c9f304436" translate="yes" xml:space="preserve">
          <source>Bitwise XOR assignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5528a7a5704835b370988fe2d816030aee967dc6" translate="yes" xml:space="preserve">
          <source>Bitwise XOR assignment (&lt;code&gt;x ^= y&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2e6f0879c56242b4b6e0dfcdd52258af33ed61f" translate="yes" xml:space="preserve">
          <source>Bitwise XOR assignment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="208853b1399b38924467bde1a53c6b31b3f0d077" translate="yes" xml:space="preserve">
          <source>Bitwise XOR.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8496e18e62495844702902d344bb9aee1d53dca8" translate="yes" xml:space="preserve">
          <source>Bitwise XORing any number &lt;code&gt;x&lt;/code&gt; with &lt;code&gt;0&lt;/code&gt; yields x. Bitwise XORing any number &lt;code&gt;x&lt;/code&gt; with &lt;code&gt;-1&lt;/code&gt; yields &lt;code&gt;~x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49799e0ede49c819113d20d6cebe854b9eb4b468" translate="yes" xml:space="preserve">
          <source>Bitwise left shift (&lt;code&gt;a &amp;lt;&amp;lt; b&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6cd89765f9f07982713f6158dd811fb58407b4c" translate="yes" xml:space="preserve">
          <source>Bitwise left shift operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b43dfc8d2e6ac1a2f9d917e7bf1ee01506c3ea48" translate="yes" xml:space="preserve">
          <source>Bitwise logical operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dc97888788cc1b09dac9d2412a98d54e24f8b1e" translate="yes" xml:space="preserve">
          <source>Bitwise operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf36d30aed7538bcf7a534272f9f63ef2c05b3d7" translate="yes" xml:space="preserve">
          <source>Bitwise operators treat their operands as a set of 32 bits (zeros and ones) and return standard JavaScript numerical values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21e3d2983421ad31e10303ddd77128c1f7ec8861" translate="yes" xml:space="preserve">
          <source>Bitwise right shift (&lt;code&gt;a &amp;gt;&amp;gt; b&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed5a09a9d7f5e8fb884bd222a4d9226d68817eec" translate="yes" xml:space="preserve">
          <source>Bitwise right shift operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d49fb1543c1cf037be882f516f8283e8411c03af" translate="yes" xml:space="preserve">
          <source>Bitwise shift operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b55b921b4ab4b2a4aa94c854dd6f474fd101c31b" translate="yes" xml:space="preserve">
          <source>Bitwise shifting any number &lt;code&gt;x&lt;/code&gt; to the left by &lt;code&gt;y&lt;/code&gt; bits yields &lt;code&gt;x * 2&amp;nbsp;** y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c4cfc404dc07a4c79c7f13da23a3d2f9325c509" translate="yes" xml:space="preserve">
          <source>Bitwise unsigned right shift (&lt;code&gt;a &amp;gt;&amp;gt;&amp;gt; b&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="295c9191efffb3bb34f27f69cfe56325dce052a0" translate="yes" xml:space="preserve">
          <source>Bitwise unsigned right shift operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bbca20f48097a12932f951b2540fe1cef457e75" translate="yes" xml:space="preserve">
          <source>Block Scoping Rules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44f23b923d4c118ace9751471e8a32d3ddca275e" translate="yes" xml:space="preserve">
          <source>Block Statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="969ef7f93e174f019c94a1a2b4d8cb9962752777" translate="yes" xml:space="preserve">
          <source>Block-level functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a4dc39931e8b4f58b52224be0ab5913ab714b6f" translate="yes" xml:space="preserve">
          <source>Block-level functions in non-strict code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90000c3ff777303da5ba95029671caaecb1a0646" translate="yes" xml:space="preserve">
          <source>Blog post: &quot;ES6 In Depth: Classes&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b4be1c4511e65eb0f5a72d1caf15f5b4c50d45d" translate="yes" xml:space="preserve">
          <source>Bonding arrays contained in an array of objects using the spread operator and initialValue</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b76ff4906f33c2dd97ddd929b9662ba8cac6174c" translate="yes" xml:space="preserve">
          <source>Boolean</source>
          <target state="translated">Boolean</target>
        </trans-unit>
        <trans-unit id="e7bd2781af4b67186aeca61c0314545e3d8f6ee2" translate="yes" xml:space="preserve">
          <source>Boolean data type (Wikipedia)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eaf8a6b9a4be72c9ec43f36ab75dc481def2fef" translate="yes" xml:space="preserve">
          <source>Boolean literal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebd49e494985f6506a4c46505a8445efd7b5d37e" translate="yes" xml:space="preserve">
          <source>Boolean literals (&lt;code&gt;true&lt;/code&gt;/&lt;code&gt;false&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f102602ed247c6b12a26812e81bca2ba1dd4627" translate="yes" xml:space="preserve">
          <source>Boolean.prototype</source>
          <target state="translated">Boolean.prototype</target>
        </trans-unit>
        <trans-unit id="8330bbb5ea1b3cd628f51340a64838a6c79182c8" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt; properties are copied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16d710b26d846dc5dfd857489d4c042180867059" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;for...in&lt;/code&gt; and &lt;code&gt;for...of&lt;/code&gt; statements iterate over something. The main difference between them is in what they iterate over.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b4e9beeb224225cc3fb98b04f8fe30d72ea557d" translate="yes" xml:space="preserve">
          <source>Both data and accessor descriptors are objects. They share the following optional keys:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c75fb4d493afe560bfc951ac11a9f2a488aa359" translate="yes" xml:space="preserve">
          <source>Both lines will throw a SyntaxError:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a336ea754922474e5193fc394f3b779e9feeda5" translate="yes" xml:space="preserve">
          <source>Both of these result in identical strings being created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5a7d65234a859b8fc71598d624cf812f967748d" translate="yes" xml:space="preserve">
          <source>Both, &lt;a href=&quot;../global_objects/null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, have no properties you could access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33b3636f5258d6a496a704ec54c29db5b253a832" translate="yes" xml:space="preserve">
          <source>Bound function names</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bae8c99681fcb5bed93319c3a8e784ff8f36832c" translate="yes" xml:space="preserve">
          <source>Bound functions are automatically suitable for use with the &lt;a href=&quot;../../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; operator to construct new instances created by the target function. When a bound function is used to construct a value, the provided &lt;code&gt;this&lt;/code&gt; is ignored. However, provided arguments are still prepended to the constructor call:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b16480759bbc4d89ce784dfdc68a435b33834d1e" translate="yes" xml:space="preserve">
          <source>Bound functions used as constructors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="676167cbb2c97275c4be4d6c7fc8fcffc08b6517" translate="yes" xml:space="preserve">
          <source>Boundaries</source>
          <target state="translated">Boundaries</target>
        </trans-unit>
        <trans-unit id="a4b116a0b5493666bad04b28569b9c9f04d07eed" translate="yes" xml:space="preserve">
          <source>Boxing with prototype and static methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00a4a57c91f2fdc5c903c80c715cfd51d25d159c" translate="yes" xml:space="preserve">
          <source>Bracket notation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c437544a2fdc41e6c287d1fca5e9492cc91a589" translate="yes" xml:space="preserve">
          <source>Breaking changes in &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; in Firefox 44</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b99b91e559917941bb0e259fb1c7151b747a651d" translate="yes" xml:space="preserve">
          <source>Browser compatibility</source>
          <target state="translated">브라우저 호환성</target>
        </trans-unit>
        <trans-unit id="b9596fac5cc2ce26e02f68794e8302c229989e32" translate="yes" xml:space="preserve">
          <source>Browser compatibility&lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;Update compatibility data on GitHub&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad735f3a90b4762d4bc98ff90a8d1ea0c7f3598c" translate="yes" xml:space="preserve">
          <source>Built-in APIs accepting iterables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="581abb698c99c4b1120288f3de3a9b64c9286720" translate="yes" xml:space="preserve">
          <source>Built-in iterables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92721da1822273850afdb94edb4d22e3303367c0" translate="yes" xml:space="preserve">
          <source>But a default export can be imported with any name for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f2a03247dac989b4bafc6987ec5a3c8d8668c6a" translate="yes" xml:space="preserve">
          <source>But beware: in using &lt;code&gt;apply&lt;/code&gt; this way, you run the risk of exceeding the JavaScript engine's argument length limit. The consequences of applying a function with too many arguments (think more than tens of thousands of arguments) vary across engines (JavaScriptCore has hard-coded &lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=80797&quot;&gt;argument limit of 65536&lt;/a&gt;), because the limit (indeed even the nature of any excessively-large-stack behavior) is unspecified. Some engines will throw an exception. More perniciously, others will arbitrarily limit the number of arguments actually passed to the applied function. To illustrate this latter case: if such an engine had a limit of four arguments (actual limits are of course significantly higher), it would be as if the arguments &lt;code&gt;5, 6, 2, 3&lt;/code&gt; had been passed to &lt;code&gt;apply&lt;/code&gt; in the examples above, rather than the full array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acab0ffeb0e96c00b7547d458b0d5582e549bad5" translate="yes" xml:space="preserve">
          <source>But when do we need to perform last line here? Unfortunately the answer is - it depends.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2386b0cb8bc197488708768792aa4518bd775961" translate="yes" xml:space="preserve">
          <source>But with the addition of non-hoisted, block-scoped &lt;code&gt;&lt;a href=&quot;../statements/let&quot;&gt;let&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../statements/const&quot;&gt;const&lt;/a&gt;&lt;/code&gt;, using &lt;code&gt;typeof&lt;/code&gt; on &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; variables (or using &lt;code&gt;typeof&lt;/code&gt; on a &lt;code&gt;class)&lt;/code&gt; in a block before they are declared will throw a &lt;code&gt;&lt;a href=&quot;../global_objects/referenceerror&quot;&gt;ReferenceError&lt;/a&gt;&lt;/code&gt;. Block scoped variables are in a &quot;&lt;a href=&quot;../statements/let#Temporal_Dead_Zone_and_errors_with_let&quot;&gt;temporal dead zone&lt;/a&gt;&quot; from the start of the block until the initialization is processed, during which, it will throw an error if accessed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a7cc2b2cbe895d93ecd7208ead5d9a31b5ce6a7" translate="yes" xml:space="preserve">
          <source>But you can mutate the properties in a variable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df4f3610603e26f63d0b839316556ad1b13bcdf1" translate="yes" xml:space="preserve">
          <source>But, &lt;code&gt;Promise.all&lt;/code&gt; resolves synchronously &lt;strong&gt;if and only if&lt;/strong&gt; the &lt;var&gt;iterable&lt;/var&gt; passed is empty:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e395f352635c44cff809d07317daf64f2921e510" translate="yes" xml:space="preserve">
          <source>But, the &lt;code&gt;length&lt;/code&gt; property does not necessarily indicate the number of defined values in the array. See also &lt;a href=&quot;../array#Relationship_between_length_and_numerical_properties&quot;&gt;Relationship between &lt;code&gt;length&lt;/code&gt; and numerical properties&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33195d68474668ca9b4fbeb87084df1cb01c7086" translate="yes" xml:space="preserve">
          <source>By contrast, identifiers declared with &lt;a href=&quot;let&quot;&gt;&lt;code&gt;let&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;const&quot;&gt;&lt;code&gt;const&lt;/code&gt;&lt;/a&gt;&lt;strong&gt;do have &lt;/strong&gt;block scope:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07d7055e7599fed5e77ac1117d25535cd8b0ebb9" translate="yes" xml:space="preserve">
          <source>By contrast, native WeakMaps hold &quot;weak&quot; references to key objects, which means that they do not prevent garbage collection in case there would be no other reference to the key object. This also avoids preventing garbage collection of values in the map. Native WeakMaps can be particularly useful constructs when mapping keys to information about the key that is valuable only if the key has not been garbage collected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19a482c4520a9ba92e09ec0677ce2851220b93a6" translate="yes" xml:space="preserve">
          <source>By declaring fields up-front, class definitions become more self-documenting, and the fields are always present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7c5a64edfd385ed53a10245ea0f514af1e6d3b0" translate="yes" xml:space="preserve">
          <source>By default within &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout&quot;&gt;&lt;code&gt;window.setTimeout()&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;this&lt;/code&gt; keyword will be set to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window&quot;&gt;&lt;code&gt;window&lt;/code&gt;&lt;/a&gt; (or &lt;code&gt;global&lt;/code&gt;) object. When working with class methods that require &lt;code&gt;this&lt;/code&gt; to refer to class instances, you may explicitly bind &lt;code&gt;this&lt;/code&gt; to the callback function, in order to maintain the instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10e28890ee038393999a1380b4faf5a01bb1578a" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;../array/concat&quot;&gt;&lt;code&gt;Array.prototype.concat()&lt;/code&gt;&lt;/a&gt; spreads (flattens) arrays into its result:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62d6641e0d6b851c30bd6b7fd4c1a2ddbb3d2e80" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;../error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; instances are given the name &quot;Error&quot;. The &lt;code&gt;name&lt;/code&gt; property, in addition to the &lt;a href=&quot;message&quot;&gt;&lt;code&gt;message&lt;/code&gt;&lt;/a&gt; property, is used by the &lt;a href=&quot;tostring&quot;&gt;&lt;code&gt;Error.prototype.toString()&lt;/code&gt;&lt;/a&gt; method to create a string representation of the error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8f721be42732dfaaa8dc900a44483d0c45cf0fd" translate="yes" xml:space="preserve">
          <source>By default, functions return &lt;code&gt;undefined&lt;/code&gt;. To return any other value, the function must have a &lt;a href=&quot;return&quot;&gt;&lt;code&gt;return&lt;/code&gt;&lt;/a&gt; statement that specifies the value to return.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3121504be0e2cb862120db5715233b6181f79215" translate="yes" xml:space="preserve">
          <source>By default, objects are &lt;a href=&quot;isextensible&quot;&gt;extensible&lt;/a&gt; (new properties can be added to them). Sealing an object prevents new properties from being added and marks all existing properties as non-configurable. This has the effect of making the set of properties on the object fixed and immutable. Making all properties non-configurable also prevents them from being converted from data properties to accessor properties and vice versa, but it does not prevent the values of data properties from being changed. Attempting to delete or add properties to a sealed object, or to convert a data property to accessor or vice versa, will fail, either silently or by throwing a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; (most commonly, although not exclusively, when in &lt;a href=&quot;../../strict_mode&quot;&gt;strict mode&lt;/a&gt; code).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22bf756fbb55c71ec9b2b9351542a91bee798090" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;message&lt;/code&gt; property is an empty string, but this behavior can be overridden for an instance by specifying a message as the first argument to the &lt;a href=&quot;../error&quot;&gt;&lt;code&gt;Error constructor&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8785fd69786fee35f445f4dccf23f2fe0e41ac32" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;valueOf&lt;/code&gt; method is inherited by every object descended from &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;. Every built-in core object overrides this method to return an appropriate value. If an object has no primitive value, &lt;code&gt;valueOf&lt;/code&gt; returns the object itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7873be2b91374dc17c7f6a426afcf13220ec712f" translate="yes" xml:space="preserve">
          <source>By default, this method is inherited by every object descended from &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5969a259516b46e9263305388faf90ad0f94edb5" translate="yes" xml:space="preserve">
          <source>Byte index before which to end slicing. If end is unspecified, the new &lt;code&gt;ArrayBuffer&lt;/code&gt; contains all bytes from begin to the end of this &lt;code&gt;ArrayBuffer&lt;/code&gt;. The range specified by the begin and end values is clamped to the valid index range for the current array. If the computed length of the new &lt;code&gt;ArrayBuffer&lt;/code&gt; would be negative, it is clamped to zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65c69de6b60d275943eb0b345c38a4da863d03c4" translate="yes" xml:space="preserve">
          <source>Byte order mark</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="421b23d45757122556d21f325621aca603974ed8" translate="yes" xml:space="preserve">
          <source>C developers have the &lt;code&gt;strcmp()&lt;/code&gt; function for comparing strings. In JavaScript, you just use the &lt;a href=&quot;../operators/comparison_operators&quot;&gt;less-than and greater-than operators&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c8b28082cf2210fb50e12c5b438c7c48e487269" translate="yes" xml:space="preserve">
          <source>Calculating elapsed time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cd3c40d7e3c9323d20f88c3334e1f59d6a5bd56" translate="yes" xml:space="preserve">
          <source>Calculating the hypotenuse of a right triangle, or the magnitude of a complex number, uses the formula &lt;code&gt;Math.sqrt(v1*v1 + v2*v2)&lt;/code&gt; where v1 and v2 are either the sides of the triangle, or the real and complex values. For calculating distance in 2 or more dimensions, simply add in more squares inside the square root sign, like &lt;code&gt;Math.sqrt(v1*v1 + v2*v2 + v3*v3&amp;nbsp;+ v4*v4)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b5c53c059f496e27e1159f1dc69b90da7746174" translate="yes" xml:space="preserve">
          <source>Calendar. Possible values include: &lt;code&gt;&quot;buddhist&quot;&lt;/code&gt;, &lt;code&gt;&quot;chinese&quot;&lt;/code&gt;, &lt;code&gt;&quot;coptic&quot;&lt;/code&gt;, &lt;code&gt;&quot;ethioaa&quot;&lt;/code&gt;, &lt;code&gt;&quot;ethiopic&quot;&lt;/code&gt;, &lt;code&gt;&quot;gregory&quot;&lt;/code&gt;, &lt;code&gt;&quot;hebrew&quot;&lt;/code&gt;, &lt;code&gt;&quot;indian&quot;&lt;/code&gt;, &lt;code&gt;&quot;islamic&quot;&lt;/code&gt;, &lt;code&gt;&quot;islamicc&quot;&lt;/code&gt;, &lt;code&gt;&quot;iso8601&quot;&lt;/code&gt;, &lt;code&gt;&quot;japanese&quot;&lt;/code&gt;, &lt;code&gt;&quot;persian&quot;&lt;/code&gt;, &lt;code&gt;&quot;roc&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fbce4777ecf7e4fc72ebe54c4e04060cedde117" translate="yes" xml:space="preserve">
          <source>Call on &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; returns &lt;code&gt;[object &lt;em&gt;Null&lt;/em&gt;]&lt;/code&gt;, and &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; returns &lt;code&gt;[object &lt;em&gt;Undefined&lt;/em&gt;]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e186b3d8ff5821b46c8f7369ddda98fc1e0ffed" translate="yes" xml:space="preserve">
          <source>Callable regular expressions were a non-standard addition in some browsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5157eb03ac0f1193906f8c156634761b124dd4b" translate="yes" xml:space="preserve">
          <source>Callback syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e460981c486df13f5d0cd1868eb0746a20c9cf2" translate="yes" xml:space="preserve">
          <source>Called on incompatible type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="889f0e32311aeca12d2e298ab0f2f76248da8fb8" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;unwatch()&lt;/code&gt; on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document&quot;&gt;&lt;code&gt;Document&lt;/code&gt;&lt;/a&gt; object throws a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; since Firefox 23 (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=903332&quot;&gt;bug 903332&lt;/a&gt;). This regression has been fixed with Firefox 27.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6575e91d0422fff5661a7b9b7443646d92438f7b" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;watch()&lt;/code&gt; on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document&quot;&gt;&lt;code&gt;Document&lt;/code&gt;&lt;/a&gt; object throws a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; since Firefox 23 (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=903332&quot;&gt;bug 903332&lt;/a&gt;). This regression has been fixed with Firefox 27.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f42ab521cde0170d0efb7b998bdc09448e1809ac" translate="yes" xml:space="preserve">
          <source>Calling a generator function does not execute its body immediately; an &lt;a href=&quot;../iteration_protocols#iterator&quot;&gt;iterator&lt;/a&gt; object for the function is returned instead. When the iterator's &lt;code&gt;next()&lt;/code&gt; method is called, the generator function's body is executed until the first &lt;a href=&quot;../operators/yield&quot;&gt;&lt;code&gt;yield&lt;/code&gt;&lt;/a&gt; expression, which specifies the value to be returned from the iterator or, with &lt;a href=&quot;../operators/yield*&quot;&gt;&lt;code&gt;yield*&lt;/code&gt;&lt;/a&gt;, delegates to another generator function. The &lt;code&gt;next()&lt;/code&gt; method returns an object with a &lt;code&gt;value&lt;/code&gt; property containing the yielded value and a &lt;code&gt;done&lt;/code&gt; property which indicates whether the generator has yielded its last value as a boolean. Calling the &lt;code&gt;next()&lt;/code&gt; method with an argument will resume the generator function execution, replacing the &lt;code&gt;yield&lt;/code&gt; expression where execution was paused with the argument from &lt;code&gt;next()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e901561b4a22e5f9eacea38ce285943904d42ddf" translate="yes" xml:space="preserve">
          <source>Calling on &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1261188c334d4f578f6c32e2f64fa810ffc2511" translate="yes" xml:space="preserve">
          <source>Calling static methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4af1b3ced70e5598a015a0ed094936bcafe046a5" translate="yes" xml:space="preserve">
          <source>Calls (executes) a function and sets its &lt;em&gt;this&lt;/em&gt; to the provided value, arguments can be passed as they are.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2cdf79658501a4a681dd5a5557f58c8403077ee" translate="yes" xml:space="preserve">
          <source>Calls &lt;a href=&quot;object/tostring&quot;&gt;&lt;code&gt;toString()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8abcebb38f72b783a3dbe8dcf4f949c70b525c8f" translate="yes" xml:space="preserve">
          <source>Calls &lt;a href=&quot;tostring&quot;&gt;&lt;code&gt;toString()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43fa8d127c1ffbb91af039b977d206cfbf6ac83b" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;callbackFn&lt;/code&gt; once for each value present in the &lt;code&gt;Set&lt;/code&gt; object, in insertion order. If a &lt;code&gt;thisArg&lt;/code&gt; parameter is provided to &lt;code&gt;forEach&lt;/code&gt;, it will be used as the &lt;code&gt;this&lt;/code&gt; value for each callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36f7549cf84d65e8e7769e045872eccc8294d6e4" translate="yes" xml:space="preserve">
          <source>Calls a function and sets its &lt;em&gt;this&lt;/em&gt; to the provided value, arguments can be passed as an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b09d006bb82d5a4c264605f63a1bd10e28dc317" translate="yes" xml:space="preserve">
          <source>Calls a function and sets its &lt;em&gt;this&lt;/em&gt; to the provided value, arguments can be passed as an &lt;a href=&quot;array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0e0146189882ee8e04fff56d3944d2d03acdb88" translate="yes" xml:space="preserve">
          <source>Calls a function for each element in the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4e174aca340d974eda375094f3873ba6f49a1de" translate="yes" xml:space="preserve">
          <source>Calls a function for each element in the array. See also &lt;a href=&quot;../array/foreach&quot;&gt;&lt;code&gt;Array.prototype.forEach()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fca1c9d7e964ddedab04d30530ab836310a60c9e" translate="yes" xml:space="preserve">
          <source>Calls a function for each element in the array. See also &lt;a href=&quot;array/foreach&quot;&gt;&lt;code&gt;Array.prototype.forEach()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="212f094d04a22c9ac2e2bbf28e3e6aa87dd373e3" translate="yes" xml:space="preserve">
          <source>Calls a target function with arguments as specified by the &lt;code&gt;args&lt;/code&gt; parameter. See also &lt;a href=&quot;function/apply&quot;&gt;&lt;code&gt;Function.prototype.apply()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96510284b9c7d34dfc5d4219cb5ed3647d47d48b" translate="yes" xml:space="preserve">
          <source>Calls callbackFn once for each key-value pair present in the &lt;code&gt;Map&lt;/code&gt; object, in insertion order. If a thisArg parameter is provided to forEach, it will be used as the this value for each callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="193f9932fdf9edf2457858d4680968cd3cdbdc42" translate="yes" xml:space="preserve">
          <source>Can I put a default between cases?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69ec9025ffcb602ac7cb3c0b98a529f094fa30eb" translate="yes" xml:space="preserve">
          <source>Can be converted to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="857d5f648425a0efc56254b89efdbfc0c12bb65f" translate="yes" xml:space="preserve">
          <source>Candidate (3)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7f5e4b809d5399b107f212ff2236558b40af3f2" translate="yes" xml:space="preserve">
          <source>Cannot change the value of a property to be different from the value of the corresponding target object property if the corresponding target object property is a non-writable, non-configurable data property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5227cc47318ced556addb0fb0570438b92aa0b4d" translate="yes" xml:space="preserve">
          <source>Cannot set the value of a property if the corresponding target object property is a non-configurable accessor property that has &lt;code&gt;undefined&lt;/code&gt; as its [[Set]] attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8db520a3f09f2b998ddd13d07e46b10c70323685" translate="yes" xml:space="preserve">
          <source>Cant access lexical declaration before init</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceb052af6694338d4ca7f970e15c5e474e927257" translate="yes" xml:space="preserve">
          <source>Cant access property</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cddf0ea095f935a5dfdfa4a63cb8bc6c2683704" translate="yes" xml:space="preserve">
          <source>Cant define property object not extensible</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64d8bae6685aa9295032aec1eb9e7127a8dffd66" translate="yes" xml:space="preserve">
          <source>Cant delete</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53fda823e63c79adb65308d70cd1e546ca255fa1" translate="yes" xml:space="preserve">
          <source>Cant redefine property</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="968a449286e7dba99d61444f2f3c3b4ce94286e4" translate="yes" xml:space="preserve">
          <source>Capturing groups have a performance penalty. If you don't need the matched substring to be recalled, prefer non-capturing parentheses (see below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="159392d633c2cffbc6a491daf2bedda249a234bf" translate="yes" xml:space="preserve">
          <source>Carriage Return</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37160635d7fcea80b889e50c530839adfee56375" translate="yes" xml:space="preserve">
          <source>Case folding is implemented in version 13</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d40586098bcb31c0615249ab2992b8cddbf26177" translate="yes" xml:space="preserve">
          <source>Case-insensitive search.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42a4f5b1edd00e96ccdcd395b8d7ad27fdb67d58" translate="yes" xml:space="preserve">
          <source>Case-sensitivity</source>
          <target state="translated">Case-sensitivity</target>
        </trans-unit>
        <trans-unit id="fc1abe74bd4ac1d8b2552132bda2e7eda851c06c" translate="yes" xml:space="preserve">
          <source>Catching a &lt;code&gt;ReferenceError&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae22123a234e448c41ac11520930d854ff6f6c53" translate="yes" xml:space="preserve">
          <source>Catching a &lt;code&gt;SyntaxError&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a67f726138638a207f598c0a8d70a3a5cd069f26" translate="yes" xml:space="preserve">
          <source>Catching a &lt;code&gt;TypeError&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66b684e76a6cbe5d74c7bf8d68a3d7ce0fbf9a7b" translate="yes" xml:space="preserve">
          <source>Catching an &lt;code&gt;URIError&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9417ed24965e3b15bb78730b447c82b48c97f1e0" translate="yes" xml:space="preserve">
          <source>Catching errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="480bd17189258d07915ad129dccf24a948c44df7" translate="yes" xml:space="preserve">
          <source>Chaining</source>
          <target state="translated">Chaining</target>
        </trans-unit>
        <trans-unit id="afb6cfa111e784e9b1307fa3011033d8673fb57c" translate="yes" xml:space="preserve">
          <source>Chaining function calls</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83805dad481f8eda906be98799a52ec52fd9332a" translate="yes" xml:space="preserve">
          <source>Change to &lt;code&gt;eval&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bae4c84ac55b0db3e5795375e15e78d0ec525e5" translate="yes" xml:space="preserve">
          <source>Changed that generator methods should also not have a [[Construct]] trap and will throw when used with &lt;code&gt;new&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="479e48122230cd898c40b37870004b3ac000fde5" translate="yes" xml:space="preserve">
          <source>Changed that generators should not have [[Construct]] trap and will throw when used with &lt;code&gt;new&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bb3f9f06e25e53e48e9b120b80f043fa26acda1" translate="yes" xml:space="preserve">
          <source>Changes in strict mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e92beb6824637c63ce2f1c3b59d875dc39b4b038" translate="yes" xml:space="preserve">
          <source>Changes to the &lt;code&gt;Object&lt;/code&gt; prototype object are seen by &lt;strong&gt;all&lt;/strong&gt; objects through prototype chaining, unless the properties and methods subject to those changes are overridden further along the prototype chain. This provides a very powerful although potentially dangerous mechanism to override or extend object behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dc0b26d4bf7240f67754c1adcd01a4c7445afc2" translate="yes" xml:space="preserve">
          <source>Changing the constructor of a function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0cf536bc57d40a4f5a94263457fbe66091624f5" translate="yes" xml:space="preserve">
          <source>Changing the constructor of an object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb6cc576576581f057ef011656a91eaaca063dbf" translate="yes" xml:space="preserve">
          <source>Chapter about JavaScript classes introduced in ECMAScript 2015.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63c9a66eb6c66063b1b10fe8596c803c58cbd60d" translate="yes" xml:space="preserve">
          <source>Chapter about JavaScript functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60668b1994544deb729e910abf30842b6407c838" translate="yes" xml:space="preserve">
          <source>Chapter about JavaScript version history.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="423fe430ed25af9d3fa6a149b31770b5ad11826d" translate="yes" xml:space="preserve">
          <source>Chapter about specific errors, exceptions and warnings thrown by JavaScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee9946c82d4a077c5be79e3015a3d2479d9fcaf2" translate="yes" xml:space="preserve">
          <source>Character</source>
          <target state="translated">Character</target>
        </trans-unit>
        <trans-unit id="89a0d26064c88761be4481b9b52065531e5e024c" translate="yes" xml:space="preserve">
          <source>Character Classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e7c11d7a7200a36005057b0e953e12aae6033f0" translate="yes" xml:space="preserve">
          <source>Character Sets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45c55510b8e6ddea96a28172e7f341683b02bdc7" translate="yes" xml:space="preserve">
          <source>Character access</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="536f0f1015299e73ab8379e221c9a9f5233e3f04" translate="yes" xml:space="preserve">
          <source>Character tabulation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67b1bbfc35c89d4dcc994be3e6c61f07a3fd9429" translate="yes" xml:space="preserve">
          <source>Characters in a string are indexed from left to right. The index of the first character is 0, and the index of the last character in a string called &lt;code&gt;stringName&lt;/code&gt; is &lt;code&gt;stringName.length - 1&lt;/code&gt;. If the &lt;code&gt;index&lt;/code&gt; you supply is out of this range, JavaScript returns an empty string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3a430bf0019fde9e5035e898a80f9a9a264979e" translate="yes" xml:space="preserve">
          <source>Characters in a string are indexed from left to right. The index of the first character is 0, and the index of the last character is &lt;code&gt;str.length - 1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35117224c0b2f55971d08a800cf983c9401503a4" translate="yes" xml:space="preserve">
          <source>Characters in a string are indexed from left to right. The index of the first character is 0, and the index of the last character of a string called &lt;code&gt;stringName&lt;/code&gt; is &lt;code&gt;stringName.length - 1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0170a1fee39ff37af419f1b3ee3ae3fea96051d3" translate="yes" xml:space="preserve">
          <source>Check browser support for extended arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25068dcc83b92a8b7e8ef58133df57f8ff115074" translate="yes" xml:space="preserve">
          <source>Check if you are in the correct scope. Should this constant appear in this scope or was it meant to appear in a function, for example?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01525f626a795bc22815e04a455bae77bfb137c2" translate="yes" xml:space="preserve">
          <source>Check the &lt;a href=&quot;#Browser_Compatibility&quot;&gt;Browser compatibility&lt;/a&gt; section to see which browsers support the &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments, and &lt;a href=&quot;#Checking_for_support_for_locales_and_options_arguments&quot;&gt;Checking for support for &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments&lt;/a&gt; for feature detection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7a65cc5d2df77be22c6b275f9c4817bb0a5efc7" translate="yes" xml:space="preserve">
          <source>Check the &lt;a href=&quot;#Browser_Compatibility&quot;&gt;Browser compatibility&lt;/a&gt; section to see which browsers support the &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments, and the &lt;a href=&quot;#Example:_Checking_for_support_for_locales_and_options_arguments&quot;&gt;Example: Checking for support for &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments&lt;/a&gt; for feature detection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="245374780def29c61ce1165c1fdbe13bc3583f38" translate="yes" xml:space="preserve">
          <source>Check the &lt;a href=&quot;#Browser_compatibility&quot;&gt;Browser compatibility table&lt;/a&gt; carefully before using this in production.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48cf3564e854e04d30104437ef4e3e4d44f37cb2" translate="yes" xml:space="preserve">
          <source>Check the &lt;a href=&quot;#Browser_compatibility&quot;&gt;Browser compatibility&lt;/a&gt; section to see which browsers support the &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments, and &lt;a href=&quot;#Check_browser_support_for_extended_arguments&quot;&gt;Check browser support for extended arguments&lt;/a&gt; for feature detection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f80c9d0733b71fdc9860c7dbe39fec2c83bba5d7" translate="yes" xml:space="preserve">
          <source>Check the &lt;a href=&quot;#Browser_compatibility&quot;&gt;Browser compatibility&lt;/a&gt; section to see which browsers support the &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments, and the &lt;a href=&quot;#Checking_for_support_for_locales_and_options_arguments&quot;&gt;Example: Checking for support for &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments&lt;/a&gt; for feature detection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0429fb6eeb4e98571016558b14e9f2c0b1253bc9" translate="yes" xml:space="preserve">
          <source>Check the &lt;a href=&quot;#Browser_compatibility&quot;&gt;Browser compatibility&lt;/a&gt; section to see which browsers support the &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments, and the Example: &lt;a href=&quot;#Checking_for_support_for_locales_and_options_arguments&quot;&gt;Checking for support for locales and options arguments&lt;/a&gt; for feature detection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad7d828d07110519d233bc6d31f6990d2639286b" translate="yes" xml:space="preserve">
          <source>Checking for support for &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c9a5804172e6be2b4b01d8ac43b740c1002d8b3" translate="yes" xml:space="preserve">
          <source>Checking if an object is dead</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8c65930befa58265ea2e6b8c3ed29591458c85f" translate="yes" xml:space="preserve">
          <source>Checking if property definition has been successful</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70029cb4f538112f0598c035cff6dcd78d29f471" translate="yes" xml:space="preserve">
          <source>Checking occurrences</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d784f9079d0b1ed3546113c218b2b80cdd4b5940" translate="yes" xml:space="preserve">
          <source>Checking whether a value exists in an array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="742e78f3e91fee3483ddd25bf992577b5ea16c43" translate="yes" xml:space="preserve">
          <source>Checking whether a value exists using an arrow function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="218e75c7a912404b048fff0747e40108873b6334" translate="yes" xml:space="preserve">
          <source>Chrome</source>
          <target state="translated">Chrome</target>
        </trans-unit>
        <trans-unit id="1bc76fcce779da9b7294b7917bea607eed2865c4" translate="yes" xml:space="preserve">
          <source>Chrome disabled &lt;code&gt;SharedArrayBuffer&lt;/code&gt; on January 5, 2018 to help reduce the efficacy of &lt;a href=&quot;https://www.chromium.org/Home/chromium-security/ssca&quot;&gt;speculative side-channel attacks&lt;/a&gt;. This is intended as a temporary measure until other mitigations are in place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f46551e1ef3a452fa46817707b191c83ac38094f" translate="yes" xml:space="preserve">
          <source>Chrome disabled &lt;code&gt;SharedArrayBuffer&lt;/code&gt; on January 5, 2018 to help reduce the efficacy of &lt;a href=&quot;https://www.chromium.org/Home/chromium-security/ssca&quot;&gt;speculative side-channel attacks&lt;/a&gt;. This was a temporary removal while mitigations were put in place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ce37c3b8bf3a38ca7fcfbb76e8e28879d0100bb" translate="yes" xml:space="preserve">
          <source>Chrome disabled SharedArrayBuffer on January 5, 2018 to help reduce the efficacy of &lt;a href=&quot;https://www.chromium.org/Home/chromium-security/ssca&quot;&gt;speculative side-channel attacks&lt;/a&gt;. This is intended as a temporary measure until other mitigations are in place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a98d66902acd22fd0965bfed20780ce505de06f9" translate="yes" xml:space="preserve">
          <source>Chrome disabled SharedArrayBuffer on January 5, 2018 to help reduce the efficacy of &lt;a href=&quot;https://www.chromium.org/Home/chromium-security/ssca&quot;&gt;speculative side-channel attacks&lt;/a&gt;. This was a temporary removal while mitigations were put in place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d099f88b010d4398cebebe8e633ffe4874c4aa01" translate="yes" xml:space="preserve">
          <source>Chrome for Android</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ad6eacf907a8e577b51ed2386597a7f6f70f9d7" translate="yes" xml:space="preserve">
          <source>Chrome, Opera (V8)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec03a926866f57741f7a227b4d38f9ebb70d4c1f" translate="yes" xml:space="preserve">
          <source>Class body and method definitions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92812dbecd62945462d6707495446285d5a7ed58" translate="yes" xml:space="preserve">
          <source>Class declarations</source>
          <target state="translated">클래스 선언</target>
        </trans-unit>
        <trans-unit id="cadac57d671500e625355754fa346cbd8408f86f" translate="yes" xml:space="preserve">
          <source>Class declarations are not &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Hoisting&quot;&gt;hoisted&lt;/a&gt; (unlike &lt;a href=&quot;function&quot;&gt;function declarations&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17339556e7ad7709847a75274febd591296e07e1" translate="yes" xml:space="preserve">
          <source>Class expressions</source>
          <target state="translated">클래스 표현</target>
        </trans-unit>
        <trans-unit id="ed1846afee3be21521286932b99e2aeae9e6414a" translate="yes" xml:space="preserve">
          <source>Classes</source>
          <target state="translated">Classes</target>
        </trans-unit>
        <trans-unit id="68a62711f21d061784f6184121613d134009b236" translate="yes" xml:space="preserve">
          <source>Classes are in fact &quot;special &lt;a href=&quot;functions&quot;&gt;functions&lt;/a&gt;&quot;, and just as you can define &lt;a href=&quot;operators/function&quot;&gt;function expressions&lt;/a&gt; and &lt;a href=&quot;statements/function&quot;&gt;function declarations&lt;/a&gt;, the class syntax has two components: &lt;a href=&quot;operators/class&quot;&gt;class expressions&lt;/a&gt; and &lt;a href=&quot;statements/class&quot;&gt;class declarations&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c240d1a5911ec065cfa8c1fc7e652b8cf7de4399" translate="yes" xml:space="preserve">
          <source>Classical inheritance with &lt;code&gt;Object.create()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="159186d16cd85cfe1f0fd8c0967a81a8ce57d61e" translate="yes" xml:space="preserve">
          <source>Clever usage of &lt;code&gt;apply&lt;/code&gt; allows you to use built-in functions for some tasks, that otherwise probably would have been written by looping over the array values. As an example here we are going to use &lt;code&gt;Math.max&lt;/code&gt;/&lt;code&gt;Math.min&lt;/code&gt;, to find out the maximum/minimum value in an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adff11da65e94ea55758937a5d0bd27584629a58" translate="yes" xml:space="preserve">
          <source>Clipping a value with &lt;code&gt;Math.min()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85fb0940516348e1a72a1f878103be3346084dda" translate="yes" xml:space="preserve">
          <source>Cloning an object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71427f396f56dccc094a99ad628b77b1002050dc" translate="yes" xml:space="preserve">
          <source>Cloning and merging &lt;code&gt;Maps&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2cdd87c13a55b67b7a7053ea83d9f10ad1f2a19" translate="yes" xml:space="preserve">
          <source>Closes the generator, so that when calling &lt;code&gt;next()&lt;/code&gt; an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/StopIteration&quot;&gt;&lt;code&gt;StopIteration&lt;/code&gt;&lt;/a&gt; error will be thrown. This corresponds to the &lt;code&gt;return()&lt;/code&gt; method in the ES2015 generator object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d736b1b3337c4a1e865bb10334f9e4f5bd3f7cf0" translate="yes" xml:space="preserve">
          <source>Closing iterators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16b1546bfaf51b2730baa3cec8823ad69c6d520a" translate="yes" xml:space="preserve">
          <source>Closures</source>
          <target state="translated">Closures</target>
        </trans-unit>
        <trans-unit id="adac69379a626c2436948a4ef1792c7d719ef929" translate="yes" xml:space="preserve">
          <source>Code</source>
          <target state="translated">Code</target>
        </trans-unit>
        <trans-unit id="f60f36f4db67f21e71a72761d315435a9c529b04" translate="yes" xml:space="preserve">
          <source>Code point</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76e2f93a7b66626151662333f42b2be7287b5233" translate="yes" xml:space="preserve">
          <source>Colons vs. equal signs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbf092f09b76a6f2453e282ef8f2b8bf433d9bb1" translate="yes" xml:space="preserve">
          <source>Column number in line that raised this error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce2a9d862f97ecd682f9df7d2276f484b17c5a62" translate="yes" xml:space="preserve">
          <source>Column number in line that raised this error. Inherited from &lt;a href=&quot;../error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45367426a5d0996e0279386d310f3aa188f6457c" translate="yes" xml:space="preserve">
          <source>Column number in line that raised this error. Inherited from &lt;a href=&quot;error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="105b6ea34c923a2a3d6b66b9fe741254a5e89b96" translate="yes" xml:space="preserve">
          <source>Combines the text of two strings and returns a new string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d625ea326feb65d6f24b54ebdef0a0bd95ae57ea" translate="yes" xml:space="preserve">
          <source>Comma / Sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32bae387055126d95306c7bb6532b73268f5a2d5" translate="yes" xml:space="preserve">
          <source>Comma Operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b506b24efb6525b0ee356cf0162e2de834afe47c" translate="yes" xml:space="preserve">
          <source>Comma operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="153d7a58b3a3e898fcbdd04c462af308414bd09d" translate="yes" xml:space="preserve">
          <source>Comment</source>
          <target state="translated">Comment</target>
        </trans-unit>
        <trans-unit id="fce06e20e5f7f74aacccab40b59b75a56c8f7305" translate="yes" xml:space="preserve">
          <source>Comments</source>
          <target state="translated">Comments</target>
        </trans-unit>
        <trans-unit id="9a5e486ba0184d4b42fd4dcc0768b5f7d7ffa822" translate="yes" xml:space="preserve">
          <source>Comments are used to add hints, notes, suggestions, or warnings to JavaScript code. This can make it easier to read and understand. They can also be used to disable code to prevent it from being executed; this can be a valuable debugging tool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e89188eb5b49b1238ddabeafbc3597fb0a0565e1" translate="yes" xml:space="preserve">
          <source>Common causes of memory leaks in extensions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0318a73036a46f0f8a141499cd73521dd9c49b95" translate="yes" xml:space="preserve">
          <source>Compare the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d7f628e8dcc4103d238aec5e6ea87d14dfb9dc3" translate="yes" xml:space="preserve">
          <source>Compared to &lt;code&gt;Object.getPrototypeOf()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86214e3cdb8ec5301da0371f4da85bfd01cfe478" translate="yes" xml:space="preserve">
          <source>Compares if two values are the same value. Equates all NaN values (which differs from both Abstract Equality Comparison and Strict Equality Comparison).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56636862149ba9455cfa10dcf654e98196d3820b" translate="yes" xml:space="preserve">
          <source>Comparing strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="491af6e089de075cb1cddc844a85aed35b1303e3" translate="yes" xml:space="preserve">
          <source>Comparing the two code snippets above, the two code snippets might seem to work the same way, but think again: the eval one is a huge amount slower. Notice &lt;code&gt;c: new Date()&lt;/code&gt; in the evaluated object. In the function without the eval, the object is being evaluated in the global scope, so it is safe for the browser to assume that &lt;code&gt;Date&lt;/code&gt; refers to &lt;code&gt;window.Date&lt;/code&gt; instead of a local variable called Date. But, in the code using &lt;code&gt;eval()&lt;/code&gt;, the browser cannot assume this since what if your code looked like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25acda77b0bc6b058bd349dd6f4a271e2a967bfe" translate="yes" xml:space="preserve">
          <source>Comparison Operators</source>
          <target state="translated">비교 연산자</target>
        </trans-unit>
        <trans-unit id="9461d4c9f916ad7df5538225ed552fb6e7e3284b" translate="yes" xml:space="preserve">
          <source>Comparison operators</source>
          <target state="translated">비교 연산자</target>
        </trans-unit>
        <trans-unit id="f7cf7733ad31698cd2948e3b5515768590fe965e" translate="yes" xml:space="preserve">
          <source>Comparison to &lt;code&gt;Object.freeze()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="863058f0e63c30ee906e3bbce288176602ad060e" translate="yes" xml:space="preserve">
          <source>Comparison to &lt;code&gt;Object.seal()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d60c7dd62fdcf4abcc61a6a7d335b7117968b4d" translate="yes" xml:space="preserve">
          <source>Compatibility</source>
          <target state="translated">Compatibility</target>
        </trans-unit>
        <trans-unit id="7d648a6dff363974f754bb78876c2b10dadd8183" translate="yes" xml:space="preserve">
          <source>Compatibility notes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ee93b8114a847627da05b6864a97e8c2edfb449" translate="yes" xml:space="preserve">
          <source>Compatibility: Initializer expressions in strict mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4edadadf34b13469bb7c5181d670c391f586c659" translate="yes" xml:space="preserve">
          <source>Compiles a &lt;a href=&quot;webassembly/module&quot;&gt;&lt;code&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; from WebAssembly binary code, leaving instantiation as a separate step.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="664249a8a03a06b5d1b4502bc94ced0e7866d5fe" translate="yes" xml:space="preserve">
          <source>Compiles and instantiates a WebAssembly module directly from a streamed underlying source, returning both a &lt;code&gt;Module&lt;/code&gt; and its first &lt;code&gt;Instance&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="911f7f5eac3ba8273725ec1d3db387cda14f141f" translate="yes" xml:space="preserve">
          <source>Components.utils</source>
          <target state="translated">Components.utils</target>
        </trans-unit>
        <trans-unit id="cc1963966568b35f1dfb97c50835920d057cd441" translate="yes" xml:space="preserve">
          <source>Comprehensions can also be used to select items that match a particular expression. Here is a comprehension which selects only even numbers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19c189a24c5620703893f1954702f4ee4ec17619" translate="yes" xml:space="preserve">
          <source>Computed index is less than 0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e484a46433a25d96bc35a93363a29fc54d1bbffe" translate="yes" xml:space="preserve">
          <source>Computed object property names and destructuring</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38e65524c92dd7a22334161d17dd8cd47bc733c7" translate="yes" xml:space="preserve">
          <source>Computed properties</source>
          <target state="translated">계산 된 속성</target>
        </trans-unit>
        <trans-unit id="7af694c5daedbb7faa534e8cca9aa8e3c5f55491" translate="yes" xml:space="preserve">
          <source>Computed property names</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="307662157329fcb91d6b28f35c93f41b749231f3" translate="yes" xml:space="preserve">
          <source>Computed property names, like on &lt;a href=&quot;object_initializer#Computed_property_names&quot;&gt;object literals&lt;/a&gt;, can be used with destructuring.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="617c1a87a356bb5fd1c8fea6579173c0cd30f204" translate="yes" xml:space="preserve">
          <source>Computes a bitwise AND on the value at the specified index of the array with the provided value. Returns the old value at that index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54377381913d8f2011457eabfd73d70a6e09ed4b" translate="yes" xml:space="preserve">
          <source>Computes a bitwise OR on the value at the specified index of the array with the provided value. Returns the old value at that index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b1b0d880953605062c8257d6e6ec184de58f10f" translate="yes" xml:space="preserve">
          <source>Computes a bitwise XOR on the value at the specified index of the array with the provided value. Returns the old value at that index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f0cfa9ad99c05952864e47bc476176b7107b2bf" translate="yes" xml:space="preserve">
          <source>Concatenating nested arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac2767d0f7e7f0cb86fa006eb29854e1f7763a04" translate="yes" xml:space="preserve">
          <source>Concatenating three arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c1f439cb831a1b986807dae1744e64d35932f75" translate="yes" xml:space="preserve">
          <source>Concatenating two arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f009b8655992624919bd06809038edd788850228" translate="yes" xml:space="preserve">
          <source>Concatenating values to an array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65a3223edfe78b44881480bd3b13315475cbb809" translate="yes" xml:space="preserve">
          <source>Conceptually, the bitwise logical operators work as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3accb895f001e39bb983a80902ba897c94294bd" translate="yes" xml:space="preserve">
          <source>Conditional</source>
          <target state="translated">Conditional</target>
        </trans-unit>
        <trans-unit id="b93d34fb0613df29c9293f6aa39fcf1c37c312ef" translate="yes" xml:space="preserve">
          <source>Conditional (ternary) operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ef90b907268ba1801bb0b4e2788eac85ca72225" translate="yes" xml:space="preserve">
          <source>Conditional &lt;code&gt;catch&lt;/code&gt; clauses</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dbde46110575d19c57e331505cceacbb06fd5c7" translate="yes" xml:space="preserve">
          <source>Conditional Operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2326591cc0831be359f112e0c91dfe72ac4eb96e" translate="yes" xml:space="preserve">
          <source>Conditional chains</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fa0e910d9d4f121492321dddf5292440d790aa9" translate="yes" xml:space="preserve">
          <source>Conditional clauses</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5de626f2d03cb6ae24ef8cd5ca11f0802aaaef50" translate="yes" xml:space="preserve">
          <source>Conditionally created functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4e77fa02ee4d7eef4123bbae308e1f9df3f6b90" translate="yes" xml:space="preserve">
          <source>Configurable</source>
          <target state="translated">Configurable</target>
        </trans-unit>
        <trans-unit id="fa1d2f966a0fd10317835f09c191de009929c07e" translate="yes" xml:space="preserve">
          <source>Configurable attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf82819d030635f3616d335af38db53b4ca782bb" translate="yes" xml:space="preserve">
          <source>Configurable: true</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6740e54be4bf7bebfb054bc3f7ea4a73033a8bb" translate="yes" xml:space="preserve">
          <source>Confusing special-case behavior</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afff3902c0485f69a9239be70cc2fe2f7ab30190" translate="yes" xml:space="preserve">
          <source>Consequently, this means that if we move the call to &lt;code&gt;foo&lt;/code&gt; below the block statement that there will be no error:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7f69e049d11cfea430a186ac01ffac1bca0cfc8" translate="yes" xml:space="preserve">
          <source>Consider the following example:</source>
          <target state="translated">다음 예제를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="05e8c69b3c94e09c38e4eb32292a78ec8abd4873" translate="yes" xml:space="preserve">
          <source>Consider the following sequence of statements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f879afb7d17477909333f6cc1384764175572ad8" translate="yes" xml:space="preserve">
          <source>Consider this example where &lt;a href=&quot;json/parse&quot;&gt;&lt;code&gt;JSON.parse()&lt;/code&gt;&lt;/a&gt; parses the string as JSON and &lt;code&gt;&lt;a href=&quot;eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; executes the string as JavaScript:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86ed688e045547761d8c2063419d36d27f127261" translate="yes" xml:space="preserve">
          <source>Constants are block-scoped, much like variables defined using the &lt;code&gt;&lt;a href=&quot;let&quot;&gt;let&lt;/a&gt;&lt;/code&gt; statement. The value of a constant cannot change through reassignment, and it can't be redeclared.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89ae0dbddf1a08de084d0fb3ffe518f5eab25f1c" translate="yes" xml:space="preserve">
          <source>Constants in the JavaScript Guide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dae821f8c9f730ab579a625f25871f1d8d15c48d" translate="yes" xml:space="preserve">
          <source>Constructing a date object with the identical time value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65381e1b5992ca2033fe30b317bcf4389b5e6159" translate="yes" xml:space="preserve">
          <source>Constructing is required with &lt;code&gt;new&lt;/code&gt; operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edb7861f190be64ab7c7a39786a00727bb16847d" translate="yes" xml:space="preserve">
          <source>Constructor</source>
          <target state="translated">Constructor</target>
        </trans-unit>
        <trans-unit id="d2f527d8322b39105846cc404cb56869bbc8c4be" translate="yes" xml:space="preserve">
          <source>Constructor Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1897132e23e336279ec91c173022580777e63c66" translate="yes" xml:space="preserve">
          <source>Constructor for collators, objects that enable language sensitive string comparison.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e61d5b56d0afdcb3e6fec9e57b739aa825b4b65" translate="yes" xml:space="preserve">
          <source>Constructor for objects that enable language sensitive date and time formatting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b14db8342396212e059351367bede85af4ead8a8" translate="yes" xml:space="preserve">
          <source>Constructor for objects that enable language sensitive number formatting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="043054f68b5d4e3b1085a1572bdd068040395a87" translate="yes" xml:space="preserve">
          <source>Constructor for objects that enable plural sensitive formatting and plural language langue rules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7ce74cb455f0901da4885d605a5b6f17fffdb20" translate="yes" xml:space="preserve">
          <source>Constructor requires a new operator since version 10.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37933effc1117711c03ecb6f80a571ad8f0b390e" translate="yes" xml:space="preserve">
          <source>Constructor requires a new operator since version 37.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="212078369040fc1d537f6cc8d97d0b63efd2a978" translate="yes" xml:space="preserve">
          <source>Constructor requires a new operator since version 4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f1ed2d54976488fe4ef079be47acc05ae15139a" translate="yes" xml:space="preserve">
          <source>Constructor vs. declaration vs. expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cd8b6f2455839a6d2b1443eb15d2d5eee90a71f" translate="yes" xml:space="preserve">
          <source>Constructor without arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60a5c966a71a24034f9238685790a526710ef75d" translate="yes" xml:space="preserve">
          <source>Constructors</source>
          <target state="translated">Constructors</target>
        </trans-unit>
        <trans-unit id="c68254a1efeff2db1be8e4f2758d5de2f876c083" translate="yes" xml:space="preserve">
          <source>Contains substitution values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c490f4aa158169ff3496a920c23c4f2fcd534bf5" translate="yes" xml:space="preserve">
          <source>Control abstraction objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bce115b0c925643288d6d66089149032ada8c603" translate="yes" xml:space="preserve">
          <source>Control characters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28450f2d804b03ca3a7497595971f90daf89c3df" translate="yes" xml:space="preserve">
          <source>Control characters have no visual representation but are used to control the interpretation of the text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac3c5834f77ae59c902947ccef1074dc7ca1801a" translate="yes" xml:space="preserve">
          <source>Control flow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="173b730d07ec8c9487ab59b5e69862e800554ed4" translate="yes" xml:space="preserve">
          <source>Conversion getter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="507a525b644a210c5c2f605d85621c2ba794d522" translate="yes" xml:space="preserve">
          <source>Conversion of non-string &lt;code&gt;this&lt;/code&gt; values to strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40688a3526daf34d410e9d22388b4c3f0484f208" translate="yes" xml:space="preserve">
          <source>Conversion rules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ffc593858c48f50a019451dc234c42cc05def9b" translate="yes" xml:space="preserve">
          <source>Conversion snippets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="795478e47a014acdc6b9ee9f10bbed775918fe91" translate="yes" xml:space="preserve">
          <source>Convert a binary &lt;code&gt;&lt;a href=&quot;../global_objects/string&quot;&gt;String&lt;/a&gt;&lt;/code&gt; to a decimal &lt;code&gt;&lt;a href=&quot;../global_objects/number&quot;&gt;Number&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93a598cb172d2b6c3a543f2d42c8b6c16990b060" translate="yes" xml:space="preserve">
          <source>Convert a decimal &lt;code&gt;&lt;a href=&quot;../global_objects/number&quot;&gt;Number&lt;/a&gt;&lt;/code&gt; to a binary &lt;code&gt;&lt;a href=&quot;../global_objects/string&quot;&gt;String&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5816fd7b3697b554f74c75057df0d1207cbda118" translate="yes" xml:space="preserve">
          <source>Convert numeric strings and null to numbers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="837c133f3ab1873a0b6776263f3f725b999960ff" translate="yes" xml:space="preserve">
          <source>Converting AND to OR</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7e0b12e97c954dd8540210783fa08c280176f83" translate="yes" xml:space="preserve">
          <source>Converting OR to AND</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79608c284f91b92fd379b63af561c1f1bfa3d8bb" translate="yes" xml:space="preserve">
          <source>Converting a &lt;code&gt;Map&lt;/code&gt; to an &lt;code&gt;Object&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53c2a776c42b3a62c1d54285c73faf49c4015684" translate="yes" xml:space="preserve">
          <source>Converting a for loop to forEach</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b6bc8ace21f55c9258d364bd869282b56459dd2" translate="yes" xml:space="preserve">
          <source>Converting an &lt;code&gt;Array&lt;/code&gt; to an &lt;code&gt;Object&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3c1837a10cc7c015b7c35d11dac590cac9b4d72" translate="yes" xml:space="preserve">
          <source>Converting an &lt;code&gt;Object&lt;/code&gt; to a &lt;code&gt;Map&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04345082cdfa7038aca287a5e8077c13a91d7df0" translate="yes" xml:space="preserve">
          <source>Converting any value to Boolean</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6676a31469b2564687dd959c923f24f440a05c37" translate="yes" xml:space="preserve">
          <source>Converting between NOTs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b10717e8199e836157d7aab0acfff3e090cef53" translate="yes" xml:space="preserve">
          <source>Converting mistakes into errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aab91da7aa5bdf43cd2b54e19d26edc8f12393d" translate="yes" xml:space="preserve">
          <source>Converts a date to a string following the ISO 8601 Extended Format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fdff4e0b6a988434fc80ab921cd1afcb98f4519" translate="yes" xml:space="preserve">
          <source>Converts a date to a string using the UTC timezone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="750e100fd87f304c0046c08d00b10c7fd0426c25" translate="yes" xml:space="preserve">
          <source>Converts a date to a string, using a format string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18fdbd089e46818b1d02bd4b21adbf6fb0a4eebb" translate="yes" xml:space="preserve">
          <source>Copies a sequence of array elements within the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f417a6bd36b5c8658523960930fb85e281406413" translate="yes" xml:space="preserve">
          <source>Copies a sequence of array elements within the array. See also &lt;a href=&quot;../array/copywithin&quot;&gt;&lt;code&gt;Array.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="142cae919d0d766d6046821d79ee5486884856dd" translate="yes" xml:space="preserve">
          <source>Copies a sequence of array elements within the array. See also &lt;a href=&quot;array/copywithin&quot;&gt;&lt;code&gt;Array.prototype.copyWithin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a84683ae6af33dad395d41c65d6204338adb5436" translate="yes" xml:space="preserve">
          <source>Copies the values of all enumerable own properties from one or more source objects to a target object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d54e08737fc653815b707fc7b8d550c81b5201a6" translate="yes" xml:space="preserve">
          <source>Copy an array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca8b260639bf072caa2c72c42c244dd5ba209bfa" translate="yes" xml:space="preserve">
          <source>Copying accessors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f022736b79fbf76dfb1ce0fdde466bd18da3c29" translate="yes" xml:space="preserve">
          <source>Copying an &lt;code&gt;ArrayBuffer&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8119f9022387042567006169274636876cd3da2" translate="yes" xml:space="preserve">
          <source>Copying symbol-typed properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3644cecd9f5b422e6771ce0a64e64d8eb469c58d" translate="yes" xml:space="preserve">
          <source>Correct would be omitting the comma or adding another expression:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96108c9e5bc70662e9b9303c4f7daaca9d181373" translate="yes" xml:space="preserve">
          <source>Correct would be to use a colon, or to use square brackets to assign a new property after the object has been created already.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9290701046ed031583dfd9127fa4a2a1ef4524db" translate="yes" xml:space="preserve">
          <source>Correct would be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="612ba4d7671f3469429b3ac344b1c55c80161553" translate="yes" xml:space="preserve">
          <source>Count Leading Ones And Beyond</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abf221340a681287f0a1d457ca8c5267b60467c5" translate="yes" xml:space="preserve">
          <source>Counting instances of values in an object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e958b975c2e13f2cc4c0add06edb53707543f9f6" translate="yes" xml:space="preserve">
          <source>Create an instance of the object with &lt;code&gt;new&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="353fa068d46bdb9de8b742822558d90bf10cc0f6" translate="yes" xml:space="preserve">
          <source>Creates a JavaScript &lt;code&gt;Date&lt;/code&gt; instance that represents a single moment in time. &lt;code&gt;Date&lt;/code&gt; objects are based on a time value that is the number of milliseconds since 1 January 1970 UTC.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="207211e8ba684b833c551564aea6152cae067bdd" translate="yes" xml:space="preserve">
          <source>Creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement executed in the loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbd66f61ce6c00d086463edd656ea2ebafbbf9e6" translate="yes" xml:space="preserve">
          <source>Creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b40b036233214e772da768731c6e4bde5ab5af7" translate="yes" xml:space="preserve">
          <source>Creates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09d703394259ecefab336fb4e519d188268cc39e" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Array&lt;/code&gt; instance from an array-like or iterable object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13e8198a7ae6f84efa45146c4cca3d8d96a400ba" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Array&lt;/code&gt; instance with a variable number of arguments, regardless of number or type of the arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="448b0e0531feee96116bad268410445a880c9f0a" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Float32Array&lt;/code&gt; from an array-like or iterable object. See also &lt;a href=&quot;array/from&quot;&gt;&lt;code&gt;Array.from()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="563c0594ee539c91d44d82c92c857118f1bf4473" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Float32Array&lt;/code&gt; with a variable number of arguments. See also &lt;a href=&quot;array/of&quot;&gt;&lt;code&gt;Array.of()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0130b1c223e94cf04986b96e248bd57641d86323" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Float64Array&lt;/code&gt; from an array-like or iterable object. See also &lt;a href=&quot;array/from&quot;&gt;&lt;code&gt;Array.from()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8110fc070a36c5578144cbc2d11a3bd48bf9430" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Float64Array&lt;/code&gt; with a variable number of arguments. See also &lt;a href=&quot;array/of&quot;&gt;&lt;code&gt;Array.of()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c1c68ecb3eb72727c3d4c726f5a770c3c651f5a" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Int16Array&lt;/code&gt; from an array-like or iterable object. See also &lt;a href=&quot;array/from&quot;&gt;&lt;code&gt;Array.from()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c729fef8b23dec4ed110cbb976b62f651fa7f76" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Int16Array&lt;/code&gt; with a variable number of arguments. See also &lt;a href=&quot;array/of&quot;&gt;&lt;code&gt;Array.of()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a74166cf5fdb5868f55fabbc597db10c7c4ecc8" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Int32Array&lt;/code&gt; from an array-like or iterable object. See also &lt;a href=&quot;array/from&quot;&gt;&lt;code&gt;Array.from()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a781ab5ff918365a523020d3f7e9d41f3ef8d875" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Int32Array&lt;/code&gt; with a variable number of arguments. See also &lt;a href=&quot;array/of&quot;&gt;&lt;code&gt;Array.of()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e022cb3b1ef3d7b6a298b9e7454b443b7cc2b5e3" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Int8Array&lt;/code&gt; from an array-like or iterable object. See also &lt;a href=&quot;array/from&quot;&gt;&lt;code&gt;Array.from()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07f687dc3b0c07267f851495b92b76a2054cb8d9" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Int8Array&lt;/code&gt; with a variable number of arguments. See also &lt;a href=&quot;array/of&quot;&gt;&lt;code&gt;Array.of()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bf78511b4ed5e45f25ea6a8de807280c7250447" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Uint16Array&lt;/code&gt; from an array-like or iterable object. See also &lt;a href=&quot;array/from&quot;&gt;&lt;code&gt;Array.from()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8dd695aa327d0492e47dc9b375ac7a6573a68d8" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Uint16Array&lt;/code&gt; with a variable number of arguments. See also &lt;a href=&quot;array/of&quot;&gt;&lt;code&gt;Array.of()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="405c581b78e0a32ad59f0539dd141ba9996695e1" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Uint32Array&lt;/code&gt; from an array-like or iterable object. See also &lt;a href=&quot;array/from&quot;&gt;&lt;code&gt;Array.from()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c64c8515edb6fb4256b4524d73a13829a4367922" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Uint32Array&lt;/code&gt; with a variable number of arguments. See also &lt;a href=&quot;array/of&quot;&gt;&lt;code&gt;Array.of()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6de9130229df04494784c040222acd595982855" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Uint8Array&lt;/code&gt; from an array-like or iterable object. See also &lt;a href=&quot;array/from&quot;&gt;&lt;code&gt;Array.from()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4e7326267804716b0aab12594b3f531b7d24e2a" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Uint8Array&lt;/code&gt; with a variable number of arguments. See also &lt;a href=&quot;array/of&quot;&gt;&lt;code&gt;Array.of()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4415344c6bfe11948ff6fd62652456c8aec827d" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Uint8ClampedArray&lt;/code&gt; from an array-like or iterable object. See also &lt;a href=&quot;array/from&quot;&gt;&lt;code&gt;Array.from()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9359c89a212eaeed25dd85e84690caafe4911a88" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Uint8ClampedArray&lt;/code&gt; with a variable number of arguments. See also &lt;a href=&quot;array/of&quot;&gt;&lt;code&gt;Array.of()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b5ffb25bdd631efefcf52ab4c8801d96096e319" translate="yes" xml:space="preserve">
          <source>Creates a new WebAssembly &lt;code&gt;CompileError&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa866faeaf85131bd36a278d3942ed28957b7b1c" translate="yes" xml:space="preserve">
          <source>Creates a new WebAssembly &lt;code&gt;Global&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb7b6d9e6f1ab9bedf5cb3bdf9a6a9af29c3fc84" translate="yes" xml:space="preserve">
          <source>Creates a new WebAssembly &lt;code&gt;Instance&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="278b1060516f2914eff8428000d1acb22bb63da6" translate="yes" xml:space="preserve">
          <source>Creates a new WebAssembly &lt;code&gt;LinkError&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b012eda4fcaf994516dc566b62d54f7acc14a9d5" translate="yes" xml:space="preserve">
          <source>Creates a new WebAssembly &lt;code&gt;Memory&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7a789eda8f021813cb015ee78a3aa68da75f4d3" translate="yes" xml:space="preserve">
          <source>Creates a new WebAssembly &lt;code&gt;Module&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="822468251b89d8150ff32d819f92ebca68baa244" translate="yes" xml:space="preserve">
          <source>Creates a new WebAssembly &lt;code&gt;RuntimeError&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0875d16187758993eddbb02cfb74efb49f6f9226" translate="yes" xml:space="preserve">
          <source>Creates a new WebAssembly &lt;code&gt;Table&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99d73f7491da263a5c202296612fc3ef8f026983" translate="yes" xml:space="preserve">
          <source>Creates a new array with all of the elements of this array for which the provided filtering function returns true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26aa34913b6651a7497c3c73551e90d324be35fb" translate="yes" xml:space="preserve">
          <source>Creates a new array with all of the elements of this array for which the provided filtering function returns true. See also &lt;a href=&quot;../array/filter&quot;&gt;&lt;code&gt;Array.prototype.filter()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4e83d917013dbade409cab2ad85cb5794918356" translate="yes" xml:space="preserve">
          <source>Creates a new array with all of the elements of this array for which the provided filtering function returns true. See also &lt;a href=&quot;array/filter&quot;&gt;&lt;code&gt;Array.prototype.filter()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0948ac0407df327263346c7f3f02ddc0926f2a52" translate="yes" xml:space="preserve">
          <source>Creates a new array with the results of calling a provided function on every element in this array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5d4be038a6a693c59a2c224fc8a6f6b07612f0b" translate="yes" xml:space="preserve">
          <source>Creates a new array with the results of calling a provided function on every element in this array. See also &lt;a href=&quot;../array/map&quot;&gt;&lt;code&gt;Array.prototype.map()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44b80c352aeb1a3c2208d5c444c0e233346f5e3b" translate="yes" xml:space="preserve">
          <source>Creates a new array with the results of calling a provided function on every element in this array. See also &lt;a href=&quot;array/map&quot;&gt;&lt;code&gt;Array.prototype.map()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c968c88e3d2f29972bd5829699b951ae9724794" translate="yes" xml:space="preserve">
          <source>Creates a new function which, when called, has its &lt;em&gt;this&lt;/em&gt; set to the provided value, with a given sequence of arguments preceding any provided when the new function was called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac103331a329dbcb9dee9f73b36b77f2698e9530" translate="yes" xml:space="preserve">
          <source>Creates a new object with the specified prototype object and properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9819ba3316a395be8705acd1a83b16e96dedc4a0" translate="yes" xml:space="preserve">
          <source>Creates a new typed array from an array-like or iterable object. See also &lt;a href=&quot;array/from&quot;&gt;&lt;code&gt;Array.from()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2808c228a8b2ad6640b92f39852a5768ff0b3b5b" translate="yes" xml:space="preserve">
          <source>Creates a new typed array with a variable number of arguments. See also &lt;a href=&quot;array/of&quot;&gt;&lt;code&gt;Array.of()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59caca672113daa896e33a4955ae61d1fefb8ebb" translate="yes" xml:space="preserve">
          <source>Creates a revocable &lt;code&gt;Proxy&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab26b67829775551e5aee31a5301e2ad728556ef" translate="yes" xml:space="preserve">
          <source>Creates an instance representing a syntax error that occurs while parsing code in &lt;a href=&quot;eval&quot;&gt;&lt;code&gt;eval()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01f41c374d2b61c664410680feba4927c5b02d44" translate="yes" xml:space="preserve">
          <source>Creates an instance representing an error that occurs regarding the global function &lt;a href=&quot;eval&quot;&gt;&lt;code&gt;eval()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67b7641bff2782e117cdc0f1d2c40c7aa58a1e2c" translate="yes" xml:space="preserve">
          <source>Creates an instance representing an error that occurs when &lt;a href=&quot;encodeuri&quot;&gt;&lt;code&gt;encodeURI()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;decodeuri&quot;&gt;&lt;code&gt;decodeURI()&lt;/code&gt;&lt;/a&gt; are passed invalid parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="195b4999c0e893046aa42ceedd5cf85f3d47d360" translate="yes" xml:space="preserve">
          <source>Creates an instance representing an error that occurs when a numeric variable or parameter is outside of its valid range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="653ee6f5147d5792120d3b733f27aadace26a3eb" translate="yes" xml:space="preserve">
          <source>Creates an instance representing an error that occurs when a variable or parameter is not of a valid type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7775c220d7ea55132098eb381cd1b38f7fcf56c" translate="yes" xml:space="preserve">
          <source>Creates an instance representing an error that occurs when an internal error in the JavaScript engine is thrown. E.g. &quot;too much recursion&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f4d1f6ef80a8ccaffe0205de09f2c81d8d429e6" translate="yes" xml:space="preserve">
          <source>Creates an instance representing an error that occurs when de-referencing an invalid reference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd3d6c84743a0c04547e4c1da77025abddee96c9" translate="yes" xml:space="preserve">
          <source>Creating &lt;code&gt;Boolean&lt;/code&gt; objects with an initial value of &lt;code&gt;false&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a75bffdb6856335bf585859f9595aabab1f5595c" translate="yes" xml:space="preserve">
          <source>Creating &lt;code&gt;Boolean&lt;/code&gt; objects with an initial value of &lt;code&gt;true&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96429defd895025ffbd7a4fa83321c24f5ea92a7" translate="yes" xml:space="preserve">
          <source>Creating a &lt;code&gt;ReferenceError&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41179e566eb6abd6a50b7ad6fa363bcfd9098b38" translate="yes" xml:space="preserve">
          <source>Creating a &lt;code&gt;SyntaxError&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e45504a8fb4abb96896c33157ac154413873d3e" translate="yes" xml:space="preserve">
          <source>Creating a &lt;code&gt;TypeError&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8e357577c79ed07f6632a71273674d077663eb2" translate="yes" xml:space="preserve">
          <source>Creating a Promise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64db8ecdfb044ac4d84f77c63dcfb06f695d2cef" translate="yes" xml:space="preserve">
          <source>Creating a bound function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4202b85441eae07edb8e4df6354acf22fec80344" translate="yes" xml:space="preserve">
          <source>Creating a generator function from a &lt;code&gt;GeneratorFunction&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f71ec0b012384c98027e3969e3e123b2e62eaa7a" translate="yes" xml:space="preserve">
          <source>Creating a property</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e7e7a6401476a8a83b43ac1c27874fab800983f" translate="yes" xml:space="preserve">
          <source>Creating a shallow clone</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1616b64477fad525ba99c05ad2ad09d63e318e5a" translate="yes" xml:space="preserve">
          <source>Creating a subclass</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5c2c8fc909c79e5035f68391fb925251bfa4e1e" translate="yes" xml:space="preserve">
          <source>Creating a two-dimensional array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75de7b1eba703deebe0ac4f24e5b5a1c3087c710" translate="yes" xml:space="preserve">
          <source>Creating a user-defined object requires two steps:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e00d30db065c31a45c62cd0912916e4fe977bb0" translate="yes" xml:space="preserve">
          <source>Creating an &lt;code&gt;URIError&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cd63011de21cb71f1ab176a0e23f987a62590f6" translate="yes" xml:space="preserve">
          <source>Creating an EvalError</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bf971c425a6836f80070c394a91af539bc3bf65" translate="yes" xml:space="preserve">
          <source>Creating an array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fba2483c7b4185df1dc146f3bdbc51c00872337" translate="yes" xml:space="preserve">
          <source>Creating an array using the result of a match</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90a73c25fc4f34ed78f832ed4ea978fe6c379054" translate="yes" xml:space="preserve">
          <source>Creating an async function from an &lt;code&gt;AsyncFunction&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4083765d230d4e8e6a48e6cdc76e1fa8365b8909" translate="yes" xml:space="preserve">
          <source>Creating new memory and table instances via the &lt;a href=&quot;webassembly/memory&quot;&gt;&lt;code&gt;WebAssembly.Memory()&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;webassembly/table&quot;&gt;&lt;code&gt;WebAssembly.Table()&lt;/code&gt;&lt;/a&gt; constructors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8dd4d67f3136087378e105e7c5e653955a5db29" translate="yes" xml:space="preserve">
          <source>Creating objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="729c3ef2ff29241cb95dc60be589c457eee79b24" translate="yes" xml:space="preserve">
          <source>Creating shortcuts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e19c516d1146bde3aefa8e260ed503645aa5a0b1" translate="yes" xml:space="preserve">
          <source>Creating, displaying, and sorting an array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb3850b7f53182376e6ca1d58a5a2a5b19ca637e" translate="yes" xml:space="preserve">
          <source>Cross-browser notes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8f7c126aae9a16be0ec64812f345248bb46e4c6" translate="yes" xml:space="preserve">
          <source>Current Index (idx)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7857baa405012b33b4e7ec10cae2d79508d3aa75" translate="yes" xml:space="preserve">
          <source>Current Locale</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91e290d65d07a3ee9845b96a33526a2ccb44190c" translate="yes" xml:space="preserve">
          <source>Current Value (cur)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a07d7a6eb63401121db3faf992827fda0f0642a" translate="yes" xml:space="preserve">
          <source>Custom Error Types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac888906b3322dfbc9a77ddf6acf09e4929eec69" translate="yes" xml:space="preserve">
          <source>Custom Setters and Getters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db81fb863d70b1982d9c9ee9d0fa321da613e6da" translate="yes" xml:space="preserve">
          <source>Custom and Null objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6585bd54b66ab70d9ba219be3541ec80c7ab0ba1" translate="yes" xml:space="preserve">
          <source>Custom sections</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22146508bee8ca93336b11551f970a527ba7dc8b" translate="yes" xml:space="preserve">
          <source>Cyclic object value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4e33264a4e9b2dd177076a424e765dffdc72722" translate="yes" xml:space="preserve">
          <source>Data property of the &lt;code&gt;Function&lt;/code&gt; constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b18ec27e01d225aee8875064a322ad5531b0ef8" translate="yes" xml:space="preserve">
          <source>Data types and data structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f61b2275608fd670dd2a256a88981e3cb36ffed3" translate="yes" xml:space="preserve">
          <source>Data types such as strings, numbers and booleans (not &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; objects): &lt;code&gt;concat&lt;/code&gt; copies the values of strings and numbers into the new array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16dcedc9e32ace9d82832081fe934341dd1cd877" translate="yes" xml:space="preserve">
          <source>DataView</source>
          <target state="translated">DataView</target>
        </trans-unit>
        <trans-unit id="af4cf47b0776ca34c76ab1f0a7eeb11a91d18abb" translate="yes" xml:space="preserve">
          <source>DataView.prototype</source>
          <target state="translated">DataView.prototype</target>
        </trans-unit>
        <trans-unit id="eb9a4bc1c0c153e4e4b042a79113b815b7e3021d" translate="yes" xml:space="preserve">
          <source>Date</source>
          <target state="translated">Date</target>
        </trans-unit>
        <trans-unit id="17aeb43f1a9719a41558037bd1b702074092d248" translate="yes" xml:space="preserve">
          <source>Date.UTC</source>
          <target state="translated">Date.UTC</target>
        </trans-unit>
        <trans-unit id="b9484f971bcf9c5e45fa04b38731a47acacc2e30" translate="yes" xml:space="preserve">
          <source>Date.now</source>
          <target state="translated">Date.now</target>
        </trans-unit>
        <trans-unit id="88288325bb1780a9a064bffaa6e61413a8d11f99" translate="yes" xml:space="preserve">
          <source>Date.parse</source>
          <target state="translated">Date.parse</target>
        </trans-unit>
        <trans-unit id="26621c1d28b3b6286ddb9cd4e79a883aa11c04be" translate="yes" xml:space="preserve">
          <source>Date.prototype</source>
          <target state="translated">Date.prototype</target>
        </trans-unit>
        <trans-unit id="b23b93ccfb29529ffd6e4cbe4eb008d40126c38b" translate="yes" xml:space="preserve">
          <source>Date.prototype Methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7df70406ffbe29d666c5c889c294fb45047ffdd2" translate="yes" xml:space="preserve">
          <source>Date: 2 digit day in month, e.g. &quot;01&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78506828583538147b1eafcfb833fee95b4281a6" translate="yes" xml:space="preserve">
          <source>Dead object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="292f3a50be1f743a1a34d6e95f1b89af03ca7559" translate="yes" xml:space="preserve">
          <source>Debugging JavaScript</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4c3a2d0cc24a4535ef91791064ffe989cbd382a" translate="yes" xml:space="preserve">
          <source>Decimal</source>
          <target state="translated">Decimal</target>
        </trans-unit>
        <trans-unit id="04585d27452c9c00b7d2ec726de07b2ab7469fa7" translate="yes" xml:space="preserve">
          <source>Decimal adjustment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4f12c8351d59108eb63e6cfeabaa0293ee919f6" translate="yes" xml:space="preserve">
          <source>Decimal literals can start with a zero (&lt;code&gt;0&lt;/code&gt;) followed by another decimal digit, but If all digits after the leading &lt;code&gt;0&lt;/code&gt; are smaller than 8, the number is interpreted as an octal number. Because this is not the case with &lt;code&gt;08&lt;/code&gt; and &lt;code&gt;09&lt;/code&gt;, JavaScript warns about it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="101849b49489e7190ef4f4952340a3f6d69176df" translate="yes" xml:space="preserve">
          <source>Decimal numeric literals (&lt;code&gt;1234567890&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9b846963186dedc9a34aab11fab9a0a092e2d1b" translate="yes" xml:space="preserve">
          <source>Declarations</source>
          <target state="translated">Declarations</target>
        </trans-unit>
        <trans-unit id="89b2503accebe08e1ce4cccda135a27c467745e3" translate="yes" xml:space="preserve">
          <source>Declared variables are a non-configurable property of their execution context (function or global). Undeclared variables are configurable (e.g. can be deleted).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e231d91c450652977122218becc8240ac93fd20a" translate="yes" xml:space="preserve">
          <source>Declared variables are constrained in the execution context in which they are declared. Undeclared variables are always global.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d202cb312297448d951d9462340ef0ad2b7b5e51" translate="yes" xml:space="preserve">
          <source>Declared variables are created before any code is executed. Undeclared variables do not exist until the code assigning to them is executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="913a3d9a44ab3f2193c073473bf40ec3113de401" translate="yes" xml:space="preserve">
          <source>Declares a block scope local variable, optionally initializing it to a value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55dd7e94cdb35a8efea09c4a013b621f0815242f" translate="yes" xml:space="preserve">
          <source>Declares a class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d11b1b32114a9d225ec4c70408cb118dc0c73dfd" translate="yes" xml:space="preserve">
          <source>Declares a function with the specified parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea799c4582672ba72076254244cb5e51b6ef8f50" translate="yes" xml:space="preserve">
          <source>Declares a read-only named constant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11696ba8db438d098916104a09dbc514e0e2044d" translate="yes" xml:space="preserve">
          <source>Declares a variable, optionally initializing it to a value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31e19cf54ede291a69e69e4ffb8aa5039d3c5bda" translate="yes" xml:space="preserve">
          <source>Declares an async function with the specified parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1839377be9b02c22c258e29b5b0a52dee652a3fd" translate="yes" xml:space="preserve">
          <source>Declaring and initializing two variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c70b1c6380973161ef60b56252d130b0a9d7ee9" translate="yes" xml:space="preserve">
          <source>Declaring function in blocks &lt;code&gt;if (a &amp;lt; b) { function f() {} }&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb56509ff212e4e32d33c9a021c1d7d5d5a1f729" translate="yes" xml:space="preserve">
          <source>Declaring multiple variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96b6182d5e47a561111cb4fd57d6288892bc9553" translate="yes" xml:space="preserve">
          <source>Declaring properties with var</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18d924bfd8ac141a0033ab4c9d80cb3616972567" translate="yes" xml:space="preserve">
          <source>Declaring twice the same name for a property name in an object literal &lt;code&gt;{a: 1, b: 3, a: 7}&lt;/code&gt; This is no longer the case in ECMAScript 2015 (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1041128&quot;&gt;bug 1041128&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a98aa50abe1811e9c8a9a135887c6c2b362ec3e" translate="yes" xml:space="preserve">
          <source>Declaring two function parameters with the same name &lt;code&gt;function f(a, b, b) {}&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fe7fdcd4a344a13eb8efa5bce14165a51ec863a" translate="yes" xml:space="preserve">
          <source>Declaring variables in the JavaScript Guide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b9d36d83c06e37782d740af6424903230486d88" translate="yes" xml:space="preserve">
          <source>Decoding</source>
          <target state="translated">Decoding</target>
        </trans-unit>
        <trans-unit id="a2644a9fe5339b4e3fa18a836ae66d6324621a59" translate="yes" xml:space="preserve">
          <source>Decoding a Cyrillic URL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b11b816ef2fe8e2b8df5e7b24dd220b2e9206e18" translate="yes" xml:space="preserve">
          <source>Decoding a Cyrillic URL component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="775274f7a214337d1df8c6c1f84db58ee1130e3b" translate="yes" xml:space="preserve">
          <source>Decoding replaces each escape sequence in the encoded URI component with the character that it represents. If there isn't such a character, an error will be thrown:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a80ede259425afac73997306cbbdb8b556c9522" translate="yes" xml:space="preserve">
          <source>Decreasing the &lt;a href=&quot;array/length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; property does, however, delete elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eac4938470d245c2c11c6bab1a6dd390d8ae1011" translate="yes" xml:space="preserve">
          <source>Decrement (--)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="202ad1ad07c2a2408e88c05481a0f16aac7ee1e0" translate="yes" xml:space="preserve">
          <source>Decrement (&lt;code&gt;--&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f40ff32236c5b97eee71a7291eea7f2cf15cd7a" translate="yes" xml:space="preserve">
          <source>Default constructors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89ba39d50f3b702bb5d6ece8e317ca5c20b4bb65" translate="yes" xml:space="preserve">
          <source>Default exports (class):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54d742c08cbe8684d03b92c7d780e04875609ada" translate="yes" xml:space="preserve">
          <source>Default exports (function):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="635d89e064f8c0a520a07f0ee2acdd210adbf996" translate="yes" xml:space="preserve">
          <source>Default function parameters allow formal parameters to be initialized with default values if no value or &lt;code&gt;undefined&lt;/code&gt; is passed. For more details, see&lt;a href=&quot;functions/default_parameters&quot;&gt; default parameters&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9000eb05897147ae92de90fbc771b0e33766037" translate="yes" xml:space="preserve">
          <source>Default parameters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c550c7cc57013f36fa40b31a06225c93ab300d8" translate="yes" xml:space="preserve">
          <source>Default parameters are available to later default parameters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e034cbbe2b8762f796d4892d08bbfed1145d3ef8" translate="yes" xml:space="preserve">
          <source>Default values</source>
          <target state="translated">기본값</target>
        </trans-unit>
        <trans-unit id="6d7d6ed07ee5e21d035c66fc13a569dcceb2dc63" translate="yes" xml:space="preserve">
          <source>Define the object type by writing a function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4f04ed477aaf8206908f44f0bb95b7718648813" translate="yes" xml:space="preserve">
          <source>Defined as &lt;code&gt;&lt;em&gt;NativeError&lt;/em&gt;.prototype&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8135c055383efbc8d34d7abd1f852beab2509a47" translate="yes" xml:space="preserve">
          <source>Defined as &lt;code&gt;TypedArray&lt;/code&gt; and &lt;code&gt;ArrayBufferView&lt;/code&gt; interface with typed array view types. Superseded by ECMAScript 2015.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3284e4eca66ca802bfe816260c1b06e2bbab189" translate="yes" xml:space="preserve">
          <source>Defined in &lt;a href=&quot;http://www.ecma-international.org/ecma-262/9.0/#sec-object-initializer&quot;&gt;Object Initializer&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a50331dee3a148f385474bdfa09f947c2196de2" translate="yes" xml:space="preserve">
          <source>Defined in several section of the specification: &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-template-literals&quot;&gt;Template Literals&lt;/a&gt;, &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-tagged-templates&quot;&gt;Tagged Templates&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba369cb1d831962f57ddaf0ab85e930212eaf90a" translate="yes" xml:space="preserve">
          <source>Defined in several sections of the specification: &lt;a href=&quot;http://tc39.github.io/ecma262/#sec-bitwise-not-operator&quot;&gt;Bitwise NOT operator&lt;/a&gt;, &lt;a href=&quot;http://tc39.github.io/ecma262/#sec-bitwise-shift-operators&quot;&gt;Bitwise shift operators&lt;/a&gt;, &lt;a href=&quot;http://tc39.github.io/ecma262/#sec-binary-bitwise-operators&quot;&gt;Binary bitwise operators&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e30f9cc4f7408e076e62f67630ff14c2e540624" translate="yes" xml:space="preserve">
          <source>Defined in several sections of the specification: &lt;a href=&quot;http://tc39.github.io/ecma262/#sec-logical-not-operator&quot;&gt;Logical NOT Operator&lt;/a&gt;, &lt;a href=&quot;http://tc39.github.io/ecma262/#sec-binary-logical-operators&quot;&gt;Binary Logical Operators&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e803ea055c200a094696e39f109ccb5cfc84df8a" translate="yes" xml:space="preserve">
          <source>Defined in several sections of the specification: &lt;a href=&quot;http://tc39.github.io/ecma262/#sec-relational-operators&quot;&gt;Relational Operators&lt;/a&gt;, &lt;a href=&quot;http://tc39.github.io/ecma262/#sec-equality-operators&quot;&gt;Equality Operators&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a922f0dafd60000915f3b53e5b7d741996eba7d2" translate="yes" xml:space="preserve">
          <source>Defined in several sections of the specification: &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.4.8&quot;&gt;Bitwise NOT operator&lt;/a&gt;, &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.7&quot;&gt;Bitwise shift operators&lt;/a&gt;, &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.10&quot;&gt;Binary bitwise operators&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31c360f8cf977b1c8b79b5612e912e41cfe9beb2" translate="yes" xml:space="preserve">
          <source>Defined in several sections of the specification: &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.4.9&quot;&gt;Logical NOT Operator&lt;/a&gt;, &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.11&quot;&gt;Binary Logical Operators&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dba1798a2f21c1f83942e67f96b513a391849f6" translate="yes" xml:space="preserve">
          <source>Defined in several sections of the specification: &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.6&quot;&gt;Additive operators&lt;/a&gt;, &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.5&quot;&gt;Multiplicative operators&lt;/a&gt;, &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.3&quot;&gt;Postfix expressions&lt;/a&gt;, &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.4&quot;&gt;Unary operators&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84b1f13a754d92874b858a5bc746a28230943e7a" translate="yes" xml:space="preserve">
          <source>Defined in several sections of the specification: &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.8&quot;&gt;Relational Operators&lt;/a&gt;, &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.9&quot;&gt;Equality Operators&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a54debf7451a06b9283efe078744afabc774484b" translate="yes" xml:space="preserve">
          <source>Defined in several sections of the specification: &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-additive-operators&quot;&gt;Additive operators&lt;/a&gt;, &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-multiplicative-operators&quot;&gt;Multiplicative operators&lt;/a&gt;, &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-postfix-expressions&quot;&gt;Postfix expressions&lt;/a&gt;, &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-unary-operators&quot;&gt;Unary operators&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90263793a58d0a7d5f66c3cae0e947275b379c1f" translate="yes" xml:space="preserve">
          <source>Defined in several sections of the specification: &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-array-initializer&quot;&gt;Array Initializer&lt;/a&gt;, &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-argument-lists&quot;&gt;Argument Lists&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b84a68de1a59daf33789e4df758725512ca501b7" translate="yes" xml:space="preserve">
          <source>Defined in several sections of the specification: &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-bitwise-not-operator&quot;&gt;Bitwise NOT operator&lt;/a&gt;, &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-bitwise-shift-operators&quot;&gt;Bitwise shift operators&lt;/a&gt;, &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-binary-bitwise-operators&quot;&gt;Binary bitwise operators&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4819bc95f9b3e8724fd7c9c6bc83f8869605f32" translate="yes" xml:space="preserve">
          <source>Defined in several sections of the specification: &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-logical-not-operator&quot;&gt;Logical NOT Operator&lt;/a&gt;, &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-binary-logical-operators&quot;&gt;Binary Logical Operators&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f62ce1bf99fdbf9f53f8540e34490de8042fbd20" translate="yes" xml:space="preserve">
          <source>Defined in several sections of the specification: &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-relational-operators&quot;&gt;Relational Operators&lt;/a&gt;, &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-equality-operators&quot;&gt;Equality Operators&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e56abc5166d19e38fb40d8b6ec113b3532ae1a1" translate="yes" xml:space="preserve">
          <source>Defined in the (informative) Compatibility Annex B</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75a750a94adea24f176dca15a3f421404ac09263" translate="yes" xml:space="preserve">
          <source>Defined in the (informative) Compatibility Annex B. Implemented in JavaScript 1.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a1314bd1b27f5eef24dc26544e1e41d6c692206" translate="yes" xml:space="preserve">
          <source>Defined in the (normative) Annex B for Additional ECMAScript Features for Web Browsers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16872b91c99cec7396e1a80a1ba0e2dbee1be100" translate="yes" xml:space="preserve">
          <source>Defined in the (normative) Annex B for Additional ECMAScript Features for Web Browsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d2dbce72daf00164b733da92413d3d5bedcf7c4" translate="yes" xml:space="preserve">
          <source>Defines &lt;code&gt;import.meta&lt;/code&gt; properties in HTML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a35d2a82f796df6ee53e547ed5547b91b3b33c63" translate="yes" xml:space="preserve">
          <source>Defines &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04407b319c71159b7fc42fab883b60c97bb47745" translate="yes" xml:space="preserve">
          <source>Defines the value to return from the generator function via &lt;a href=&quot;../iteration_protocols#The_iterator_protocol&quot;&gt;the iterator protocol&lt;/a&gt;. If omitted, &lt;code&gt;undefined&lt;/code&gt; is returned instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c412241b9cb12e63161a381cd16e4915bd9ea1e0" translate="yes" xml:space="preserve">
          <source>Defining a function that concatenates several strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="017269085e8890b1e02d119051dd1dde7fd7a984" translate="yes" xml:space="preserve">
          <source>Defining a function that creates HTML lists</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="595f07d1851f45ab5c785ab710fb203a5e4fdb52" translate="yes" xml:space="preserve">
          <source>Defining a getter on existing objects using &lt;code&gt;defineProperty&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3347722b98e3a814cb6822e72fd390e9c3039953" translate="yes" xml:space="preserve">
          <source>Defining a getter on new objects in object initializers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="176e8cdb008b876e74f5a88cd824a8a0450048ef" translate="yes" xml:space="preserve">
          <source>Defining a setter on existing objects using &lt;code&gt;defineProperty&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dec8e5851ad694ce9b262fd070c0e48755994245" translate="yes" xml:space="preserve">
          <source>Defining a setter on new objects in object initializers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad404abf9005b96a574c6751aca83f08894a5e12" translate="yes" xml:space="preserve">
          <source>Defining classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaf85480139ce8b3345d7674369f7104c63e0e8b" translate="yes" xml:space="preserve">
          <source>Defining functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3ccd64b1a0f2051b51a2971e602bf71c6bad0f2" translate="yes" xml:space="preserve">
          <source>Defining method functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="716e0fc82d1d1b08befa01dd966c2eb687569452" translate="yes" xml:space="preserve">
          <source>Defining the regular expression in &lt;code&gt;replace()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61ae41ecf28e4b4981234c9f76d54bb7098afd6b" translate="yes" xml:space="preserve">
          <source>Definition of standard NativeError types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa506f86b63fff8c27d49086eeaf6484556b747e" translate="yes" xml:space="preserve">
          <source>Delegate to another generator function or iterable object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31e5116c578ec5e94c0dea2adf5e61cbe396108d" translate="yes" xml:space="preserve">
          <source>Delegating to another generator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="628c4a642b4be6176c17f7563455c7d3dcf849f5" translate="yes" xml:space="preserve">
          <source>Delete in strict mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ce7ea7e4def6bc5af959be9b52bdf9fbc3b18f6" translate="yes" xml:space="preserve">
          <source>Deleted, added, or modified properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10dd8bcc9131956e133c556a0ba8d13335a6633d" translate="yes" xml:space="preserve">
          <source>Deleting a getter using the &lt;code&gt;delete&lt;/code&gt; operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="625e16581fac60495b60a8dc301a8cee812391c4" translate="yes" xml:space="preserve">
          <source>Deleting a property from an object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2e570c48706fe038190d4cd27996ab85fc78863" translate="yes" xml:space="preserve">
          <source>Deleting super properties will throw an error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e595bb1c40b0284afcaac58afea136e6e4de0a2" translate="yes" xml:space="preserve">
          <source>Demonstrating that &lt;code&gt;String&lt;/code&gt; and &lt;code&gt;Date&lt;/code&gt; are of type &lt;code&gt;Object&lt;/code&gt; and exceptional cases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f82b1da9b121c819af69d31c41bd823b842a942a" translate="yes" xml:space="preserve">
          <source>Demonstrating that &lt;code&gt;mycar&lt;/code&gt; is of type &lt;code&gt;Car&lt;/code&gt; and type &lt;code&gt;Object&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c991911ee30bd01be7f0e586813e3c47af050b5" translate="yes" xml:space="preserve">
          <source>Deprecated &lt;code&gt;function.caller&lt;/code&gt; or &lt;code&gt;arguments.callee.caller&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c17acc4d0ccab61fe50b958d45639453f8b4ab6c" translate="yes" xml:space="preserve">
          <source>Deprecated String generics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e87f48ebb5b497ac8e1d27f77dd38b714241f41c" translate="yes" xml:space="preserve">
          <source>Deprecated and obsolete features</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ded16a1530d4af45ec3739ec76a43d50675d3266" translate="yes" xml:space="preserve">
          <source>Deprecated caller or arguments usage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6521341c51bd368e5621994b8048ee999290fbd4" translate="yes" xml:space="preserve">
          <source>Deprecated expression closures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35ee1fa50278c527aa6abc0d9e07608c509c3bdd" translate="yes" xml:space="preserve">
          <source>Deprecated features</source>
          <target state="translated">더 이상 사용되지 않는 기능</target>
        </trans-unit>
        <trans-unit id="c8d4fcb5ea553d5dc95a46a756ced52ffca6dbae" translate="yes" xml:space="preserve">
          <source>Deprecated octal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22a9e55f6981bbe22c75093ce889f92fc7a46ad3" translate="yes" xml:space="preserve">
          <source>Deprecated source map pragma</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d5d7c369011b6ab2c43daa0364c73baddb57355" translate="yes" xml:space="preserve">
          <source>Deprecated syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea882a28af45cb7a5185ec02d2b547612dd6bb2b" translate="yes" xml:space="preserve">
          <source>Deprecated toLocaleFormat</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="532c67fe1b5afae15d2d08fba7a78de0f63cc4b5" translate="yes" xml:space="preserve">
          <source>Desktop</source>
          <target state="translated">Desktop</target>
        </trans-unit>
        <trans-unit id="552cc447475597933e004d38bb2f085a02396642" translate="yes" xml:space="preserve">
          <source>Destructured parameter with default value assignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5a09cb2f1e09842b931372280afa8887a996f6d" translate="yes" xml:space="preserve">
          <source>Destructuring assignment</source>
          <target state="translated">할당 해체</target>
        </trans-unit>
        <trans-unit id="64ef31da94ffe2606781c710d73df0e035cafe90" translate="yes" xml:space="preserve">
          <source>Destructuring assignment allows you to assign the properties of an array or object to variables using syntax that looks similar to array or object literals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0226157f7453f6ce040646c7d3affd73dcdca6a8" translate="yes" xml:space="preserve">
          <source>Destructuring can be used with property names that are not valid JavaScript &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Identifier&quot;&gt;identifiers&lt;/a&gt; by providing an alternative identifer that is valid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="884d1d1e74872cf675e1c3666c856c18941a8ec6" translate="yes" xml:space="preserve">
          <source>Destructuring parameters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87660a2eddd1afbd382dd912f8143f9f3be4fa8e" translate="yes" xml:space="preserve">
          <source>Destructuring rest parameters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="707c318b458180fd2482508a5c94a0add96d39f0" translate="yes" xml:space="preserve">
          <source>Determine whether the passed value is NaN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b293d92b5187b0c78ab6b4cc73db4344e9a63a3" translate="yes" xml:space="preserve">
          <source>Determine whether the passed value is a finite number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a65cc129610dce6ea41254c2329b46fdcfcd107" translate="yes" xml:space="preserve">
          <source>Determine whether the passed value is a safe integer (number between &lt;code&gt;-(2&lt;sup&gt;53&lt;/sup&gt; - 1)&lt;/code&gt; and &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt; - 1&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d186c818ea6c0dde4c0cf4cf59b0640c628a4d54" translate="yes" xml:space="preserve">
          <source>Determine whether the passed value is an integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd031459594d9f07a301b574894c601c6cc90b70" translate="yes" xml:space="preserve">
          <source>Determines if an object is sealed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b7fe22bd6f16d0779d926b4d727581c75edd812" translate="yes" xml:space="preserve">
          <source>Determines if an object was frozen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d693778243661b56360c1b4d99b079a25b55d35" translate="yes" xml:space="preserve">
          <source>Determines if extending of an object is allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c26daf2dfefe5e1aaf1d4458316b053345d7d8a1" translate="yes" xml:space="preserve">
          <source>Determines whether a string begins with the characters of another string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5df69c75886f720f6298f07087347936292b32f" translate="yes" xml:space="preserve">
          <source>Determines whether a string ends with the characters of another string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6b6b3cd45911b270de8ce9aa652d57dceb24855" translate="yes" xml:space="preserve">
          <source>Determines whether a typed array includes a certain element, returning &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; as appropriate. See also &lt;a href=&quot;../array/includes&quot;&gt;&lt;code&gt;Array.prototype.includes()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1873ad3fa70a156d184a2b0432553c3e966fee06" translate="yes" xml:space="preserve">
          <source>Determines whether a typed array includes a certain element, returning &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; as appropriate. See also &lt;a href=&quot;array/includes&quot;&gt;&lt;code&gt;Array.prototype.includes()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0597a6181692f9aff426c3948f4fff8e10001f8a" translate="yes" xml:space="preserve">
          <source>Determines whether an array contains a certain element, returning &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; as appropriate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f370c8d147251a63eebaff84417c68464b2ca597" translate="yes" xml:space="preserve">
          <source>Determines whether one string may be found within another string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="524a92fc4664ef31cfb35f75861065f6bb8bbff4" translate="yes" xml:space="preserve">
          <source>Determining whether a function exists</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="215c7e8cc7a837e01b5c2e1aa86e661c56faab3e" translate="yes" xml:space="preserve">
          <source>Did you intend to create a regular expression? An expression containing two slashes is interpreted as a regular expression literal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7be97d5e4b7b1648f4a8e2cf797c0e7ccc36e3e5" translate="yes" xml:space="preserve">
          <source>Difference between &lt;code&gt;for...of&lt;/code&gt; and &lt;code&gt;for...in&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="577cc8b0d25b9d1385e475710fb998bb30dcc5c7" translate="yes" xml:space="preserve">
          <source>Difference between &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6181b04b5afc7c022fe569c3a5e6e9993a80c9d" translate="yes" xml:space="preserve">
          <source>Difference between &lt;code&gt;substring()&lt;/code&gt; and &lt;code&gt;substr()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeb0a2c858f6cbfe1fc2d5649913ca96afc26725" translate="yes" xml:space="preserve">
          <source>Difference between Function constructor and function declaration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fdd7ab62c199ef7024d4c113fed373bd7284234" translate="yes" xml:space="preserve">
          <source>Difference between rest parameters and the &lt;code&gt;arguments&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef78dec9b4171be04e23011d4ff47b47f46f7641" translate="yes" xml:space="preserve">
          <source>Difference to &lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6621652512dc62cec7de137129d14ed78aef90f0" translate="yes" xml:space="preserve">
          <source>Difference to &lt;code&gt;Object.isExtensible()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e947065668a7b2df1c20e58cf3a52134d8749b07" translate="yes" xml:space="preserve">
          <source>Difference to &lt;code&gt;Object.preventExtensions()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af858e1241391fd569b50d644bb00507f74f4034" translate="yes" xml:space="preserve">
          <source>Differences</source>
          <target state="translated">Differences</target>
        </trans-unit>
        <trans-unit id="5595e88a056fa937adf7878e6b5f7c04804e6634" translate="yes" xml:space="preserve">
          <source>Differences from non-strict to strict</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eafbc1f1380a3699ba1b9a250655328915f1757e" translate="yes" xml:space="preserve">
          <source>Differences in assumed time zone</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54bb9e631e29e4f58724c6854405ccbacc0838d5" translate="yes" xml:space="preserve">
          <source>Differences to the older JS1.7/JS1.8 comprehensions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0ed8766e396b2abaf4e53a24da4d72d10ce798b" translate="yes" xml:space="preserve">
          <source>Differences:</source>
          <target state="translated">Differences:</target>
        </trans-unit>
        <trans-unit id="3e3c4865ec1282594e1e4322023f801a49add08e" translate="yes" xml:space="preserve">
          <source>Different scopes have different execution environments. This means that they have different built-ins (different global object, different constructors, etc.). This may result in unexpected results. For instance, &lt;code&gt;[] instanceof window.frames[0].Array&lt;/code&gt; will return &lt;code&gt;false&lt;/code&gt;, because &lt;code&gt;Array.prototype !== &lt;/code&gt;&lt;code&gt;window.frames[0].Array&lt;/code&gt; and arrays inherit from the former.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da78a8c3c386af145784ad763ad2679f78925c7c" translate="yes" xml:space="preserve">
          <source>Different ways to create a &lt;code&gt;Float32Array&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9fdc487967d5f4d09fa2c47b947bbd4b7a54f39" translate="yes" xml:space="preserve">
          <source>Different ways to create a &lt;code&gt;Float64Array&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b7b281555558161d91ee78dec7664284213a714" translate="yes" xml:space="preserve">
          <source>Different ways to create a &lt;code&gt;Uint16Array&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4d315ad49050a1a697e418ba371ebd6e6d00f67" translate="yes" xml:space="preserve">
          <source>Different ways to create a &lt;code&gt;Uint32Array&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb6c834992fe8dc511e19f3de8c9e38d91d8e50b" translate="yes" xml:space="preserve">
          <source>Different ways to create a &lt;code&gt;Uint8Array&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="592a5a69d9f6d0629eb3ec74e7773d1e000880bb" translate="yes" xml:space="preserve">
          <source>Different ways to create a &lt;code&gt;Uint8ClampedArray&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf0921d31da635052854420e9b70c0d9404ed415" translate="yes" xml:space="preserve">
          <source>Different ways to create a valid &lt;a href=&quot;../global_objects/uint8array&quot;&gt;&lt;code&gt;Uint8Array&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5db11617f9938f124c20fa3926c45099643a13a7" translate="yes" xml:space="preserve">
          <source>Different ways to create an &lt;code&gt;Int16Array&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3ad0e950ee4c9b5435f9dd59a1ac4c1bfc6c108" translate="yes" xml:space="preserve">
          <source>Different ways to create an &lt;code&gt;Int32Array&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55831014650f814eb30c59af61a1a0a526795d9b" translate="yes" xml:space="preserve">
          <source>Different ways to create an &lt;code&gt;Int8Array&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31e858b0c793e530284ac5b3187ebabde392ce42" translate="yes" xml:space="preserve">
          <source>Direct call</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d647c19b72390085ea3527a937fcd76620097e39" translate="yes" xml:space="preserve">
          <source>Direct call:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3f0a02c286ad4aa60edf4054617de76e016efce" translate="yes" xml:space="preserve">
          <source>Direct vs. inherited properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4f4473df8cb59f0a369aebee3d1509adc0151c6" translate="yes" xml:space="preserve">
          <source>Disabled</source>
          <target state="translated">Disabled</target>
        </trans-unit>
        <trans-unit id="2dac7a4cc6256237cd1c18056d62f022235f87aa" translate="yes" xml:space="preserve">
          <source>Disabled From version 0.10: this feature is behind the &lt;code&gt;--harmony&lt;/code&gt; runtime flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3662c0ed15ab579315f5e27ac49b56655cb1fb2" translate="yes" xml:space="preserve">
          <source>Disabled From version 0.12: this feature is behind the &lt;code&gt;--harmony&lt;/code&gt; runtime flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5e7ee56cb7c81e43d854a3346c7af7f1b824f17" translate="yes" xml:space="preserve">
          <source>Disabled From version 14: this feature is behind the &lt;code&gt;Enable experimental Javascript features&lt;/code&gt; preference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b815ca7f66c28ac9c8468f41fce4b4bc2567bf3c" translate="yes" xml:space="preserve">
          <source>Disabled From version 15: this feature is behind the &lt;code&gt;Experimental JavaScript Features&lt;/code&gt; preference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8670ff26525db01bcd99f4a579a6896a89c1d67" translate="yes" xml:space="preserve">
          <source>Disabled From version 4.0.0: this feature is behind the &lt;code&gt;--harmony&lt;/code&gt; runtime flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="301528a6fe1241a7844176f3bb412fb9dbf5f475" translate="yes" xml:space="preserve">
          <source>Disabled From version 4.0.0: this feature is behind the &lt;code&gt;--use_strict&lt;/code&gt; runtime flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6510c865e27d501664238c9564b8f54b461523cb" translate="yes" xml:space="preserve">
          <source>Disabled From version 46 until version 48 (exclusive): this feature is behind the &lt;code&gt;javascript.options.shared_memory&lt;/code&gt; preference (needs to be set to &lt;code&gt;true&lt;/code&gt;). To change preferences in Firefox, visit about:config.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92b4caddbe58f2c011c0321d5819fafa2daf7300" translate="yes" xml:space="preserve">
          <source>Disabled From version 46 until version 55 (exclusive): this feature is behind the &lt;code&gt;javascript.options.shared_memory&lt;/code&gt; preference (needs to be set to &lt;code&gt;true&lt;/code&gt;). To change preferences in Firefox, visit about:config.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48c39097af53015de32ae1b0d351f4923409205c" translate="yes" xml:space="preserve">
          <source>Disabled From version 48 until version 49 (exclusive): this feature is behind the &lt;code&gt;Enable Experimental JavaScript Features&lt;/code&gt; preference. To change preferences in Chrome, visit chrome://flags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19ffc2e0f5c1e7d95619214a3b5550813a5288d2" translate="yes" xml:space="preserve">
          <source>Disabled From version 48 until version 55 (exclusive): this feature is behind the &lt;code&gt;javascript.options.shared_memory&lt;/code&gt; preference (needs to be set to &lt;code&gt;true&lt;/code&gt;). To change preferences in Firefox, visit about:config.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d3402e549127a21a3872eb5a24373ae96fde2a7" translate="yes" xml:space="preserve">
          <source>Disabled From version 5.0.0: this feature is behind the &lt;code&gt;--harmony&lt;/code&gt; runtime flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d452d1758a861ff3fa85f847f834731797c415c1" translate="yes" xml:space="preserve">
          <source>Disabled From version 54 until version 60 (exclusive): this feature is behind the &lt;code&gt;dom.moduleScripts.enabled&lt;/code&gt; preference. To change preferences in Firefox, visit about:config.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e658b6a9da345f2edd3273d992a571404c6ecfbf" translate="yes" xml:space="preserve">
          <source>Disabled From version 55 until version 60 (exclusive): this feature is behind the &lt;code&gt;--datetime-format-to-parts&lt;/code&gt; runtime flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e824b0358e17fc087eb3647724837cb12a31b01c" translate="yes" xml:space="preserve">
          <source>Disabled From version 57: this feature is behind the &lt;code&gt;javascript.options.shared_memory&lt;/code&gt; preference (needs to be set to &lt;code&gt;true&lt;/code&gt;). To change preferences in Firefox, visit about:config.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a59ea3331db30ad9abcfed423277afc71e3c473" translate="yes" xml:space="preserve">
          <source>Disabled From version 58: this feature is behind the &lt;code&gt;--enable-pipeline-operator&lt;/code&gt; compile flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65a83d4f1ae67799202eadbb290933e7a1f38d34" translate="yes" xml:space="preserve">
          <source>Disabled From version 6.0.0: this feature is behind the &lt;code&gt;--harmony&lt;/code&gt; runtime flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d9e403c3fb7c060a8a897e47045195565982716" translate="yes" xml:space="preserve">
          <source>Disabled From version 6.5.0: this feature is behind the &lt;code&gt;--harmony-array-prototype-values&lt;/code&gt; runtime flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff76ab76bada35139de3ef1b5778c05f681f398f" translate="yes" xml:space="preserve">
          <source>Disabled From version 6.5.0: this feature is behind the &lt;code&gt;--harmony&lt;/code&gt; runtime flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e02b3238b6c132adf3c5b42d2a911cb638d2fc7" translate="yes" xml:space="preserve">
          <source>Disabled From version 63: this feature is behind the &lt;code&gt;harmony-number-format-to-parts&lt;/code&gt; runtime flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6398ae165a0d2bf072fe0323674bd8cae21cb5d1" translate="yes" xml:space="preserve">
          <source>Disabled From version 63: this feature is behind the &lt;code&gt;javascript.options.shared_memory&lt;/code&gt; preference (needs to be set to &lt;code&gt;true&lt;/code&gt;). To change preferences in Firefox, visit about:config.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35ea85054d7511bb15e95a059f4f15d5aa31334d" translate="yes" xml:space="preserve">
          <source>Disabled From version 7.0.0: this feature is behind the &lt;code&gt;--harmony&lt;/code&gt; runtime flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da8e57efa8b72346838645de8ccb9c8bc619522c" translate="yes" xml:space="preserve">
          <source>Disabled From version 8.0.0: this feature is behind the &lt;code&gt;--harmony&lt;/code&gt; runtime flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="266ebbe9f1423c008f67db57f39a03c591d87992" translate="yes" xml:space="preserve">
          <source>Disabled From version 8.10.0: this feature is behind the &lt;code&gt;--harmony&lt;/code&gt; runtime flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a82d615b0491c54c8b8030abffdef704b6ea61e1" translate="yes" xml:space="preserve">
          <source>Disabled From version 8.5.0: this feature is behind the &lt;code&gt;--experimental-modules&lt;/code&gt; runtime flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81c70e16e7626e254be198a9df6f32821563f9e4" translate="yes" xml:space="preserve">
          <source>Disabled This feature is behind the &lt;code&gt;Experimental JavaScript Features&lt;/code&gt; preference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fb3b20aeda59f335d7db58755ef2bee4d469dac" translate="yes" xml:space="preserve">
          <source>Disabled in the Firefox 52 Extended Support Release (ESR).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bac1f4e01fa43e1585a29b0440d93e8e078f510a" translate="yes" xml:space="preserve">
          <source>Disabling the &lt;code&gt;isRegExp&lt;/code&gt; check</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c46ffb2a421098da301c9f449e6ef3ff478f6dae" translate="yes" xml:space="preserve">
          <source>Displaying characters at different locations in a string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18d68473c9c32b89615dd6938a2c2349fee23af6" translate="yes" xml:space="preserve">
          <source>Displaying the constructor of an object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2fdb25f38d07f4b87c846e83327eba5d0962bd2" translate="yes" xml:space="preserve">
          <source>Distinction between string primitives and &lt;code&gt;String&lt;/code&gt; objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbbec44416269797757a1579d0b1247911acd066" translate="yes" xml:space="preserve">
          <source>Division</source>
          <target state="translated">Division</target>
        </trans-unit>
        <trans-unit id="5ad008aa1d544b334c1a44ecc5acf2ca3abbee02" translate="yes" xml:space="preserve">
          <source>Division (/)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e957d4d3de07ec7f90f8432b2e8127cc3dbd02a2" translate="yes" xml:space="preserve">
          <source>Division (&lt;code&gt;/&lt;/code&gt;)</source>
          <target state="translated">구분 ( &lt;code&gt;/&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="62fa6410cf0c0e8f380d86ad2c0bb41f6b49e18d" translate="yes" xml:space="preserve">
          <source>Division assignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="979c98121cf432ed952b3e9bb7b09a9b3eac93a2" translate="yes" xml:space="preserve">
          <source>Division assignment (&lt;code&gt;x /= y&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a08b0c21f852a0e9426e69ffcd2612c8453fb27d" translate="yes" xml:space="preserve">
          <source>Division assignment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc9543a8bb3d698bcc82fd48156571f2a82cecee" translate="yes" xml:space="preserve">
          <source>Division operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec8ab07095c4a52290fee9dfdd464cd0d31f1ac2" translate="yes" xml:space="preserve">
          <source>Do &lt;em&gt;not&lt;/em&gt; use this method if the second array (&lt;code&gt;moreVegs&lt;/code&gt; in the example) is very large, because the maximum number of parameters that one function can take is limited in practice. See &lt;a href=&quot;../function/apply&quot;&gt;&lt;code&gt;apply()&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd9989b1526bdd47a8a4ee2f4e483a70214159ae" translate="yes" xml:space="preserve">
          <source>Do not confuse &lt;code&gt;await&lt;/code&gt; for &lt;code&gt;Promise#then&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a45de9b6ac7aa733f4f698e72610150de63d0b0" translate="yes" xml:space="preserve">
          <source>Do not confuse the primitive &lt;code&gt;Boolean&lt;/code&gt; values &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; with the &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; values of the &lt;code&gt;Boolean&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69acdebfb83c722f464f742efa8a6bd1cab6b9f4" translate="yes" xml:space="preserve">
          <source>Do not confuse the primitive boolean values &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; with truthiness or falsiness of the &lt;a href=&quot;../global_objects/boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; object. Any value that is not &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;NaN&lt;/code&gt;, or the empty string (&lt;code&gt;&quot;&quot;&lt;/code&gt;), and any object, including a Boolean object whose value is false, is considered &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/truthy&quot;&gt;truthy&lt;/a&gt; when used as the condition. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33304b17c160b58b1f6f94cbcbf3b851db0df51a" translate="yes" xml:space="preserve">
          <source>Do not ever use &lt;code&gt;eval&lt;/code&gt;!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="580491655e7b1685ad2d8f7ecd040bdfd4d7eb5d" translate="yes" xml:space="preserve">
          <source>Do not reuse generators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c99cae1cf195fab7710e2c8d9915f1d1210123ac" translate="yes" xml:space="preserve">
          <source>Do not use &lt;code&gt;const&lt;/code&gt; if you weren't meaning to declare a constant. Maybe you meant to declare a block-scoped variable with &lt;code&gt;&lt;a href=&quot;../statements/let&quot;&gt;let&lt;/a&gt;&lt;/code&gt; or global variable with &lt;code&gt;&lt;a href=&quot;../statements/var&quot;&gt;var&lt;/a&gt;&lt;/code&gt;. Both don't require an initial value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6048560dc8167e507ffc4f6615cbe55495b5ce36" translate="yes" xml:space="preserve">
          <source>Do not use a &lt;code&gt;Boolean&lt;/code&gt; object in place of a &lt;code&gt;Boolean&lt;/code&gt; primitive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77f38c157657330ffe58d60be57bf5587700a80a" translate="yes" xml:space="preserve">
          <source>Do not use a &lt;code&gt;Boolean&lt;/code&gt; object to convert a non-boolean value to a boolean value. Instead, use &lt;code&gt;Boolean&lt;/code&gt; as a function to perform this task:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29db7a860ed1da8b56447d77106734d1c904603f" translate="yes" xml:space="preserve">
          <source>Do not use const if you weren't meaning to declare a constant. Maybe you meant to declare a block-scoped variable with &lt;code&gt;&lt;a href=&quot;../statements/let&quot;&gt;let&lt;/a&gt;&lt;/code&gt; or global variable with &lt;code&gt;&lt;a href=&quot;../statements/var&quot;&gt;var&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d71e1f795ddd8b746a72cae93d5a4c0777f9766c" translate="yes" xml:space="preserve">
          <source>Does not encode characters that have special meaning (reserved characters) for a URI. The following example shows all the parts that a URI &quot;scheme&quot; can possibly contain. Note how certain characters are used to signify special meaning:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98bff9801f7d0c45a8b5d5e962cf22c86c1a0d99" translate="yes" xml:space="preserve">
          <source>Domenic Denicola: Callbacks, Promises, and Coroutines &amp;ndash; Asynchronous Programming Patterns in JavaScript</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9133c01e46de03f60d622aaf9c83b8f5d4ca390" translate="yes" xml:space="preserve">
          <source>Dot notation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23d33e22acfcb9ecddb4a85f10607dc4ff49e23c" translate="yes" xml:space="preserve">
          <source>Draft</source>
          <target state="translated">Draft</target>
        </trans-unit>
        <trans-unit id="c834c4c7693d1ab9698bdabd7a7216f346390a17" translate="yes" xml:space="preserve">
          <source>Due to both equality operators, &lt;a href=&quot;../../operators/comparison_operators#Equality&quot;&gt;&lt;code&gt;==&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../operators/comparison_operators#Identity&quot;&gt;&lt;code&gt;===&lt;/code&gt;&lt;/a&gt;, evaluating to &lt;code&gt;false&lt;/code&gt; when checking if &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;&lt;em&gt;is&lt;/em&gt;&lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;, the function &lt;code&gt;Number.isNaN()&lt;/code&gt; has become necessary. This situation is unlike all other possible value comparisons in JavaScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4749c90166e2b7cb214a7698794808eaf14386d1" translate="yes" xml:space="preserve">
          <source>Due to lexical scoping, the identifier&lt;strong&gt; &quot;foo&quot;&lt;/strong&gt; inside the expression &lt;code&gt;(foo + 55)&lt;/code&gt; evaluates to the &lt;u&gt;if block's foo&lt;/u&gt;, and &lt;strong&gt;not&lt;/strong&gt; the &lt;u&gt;overlying variable foo&lt;/u&gt; with the value of 33.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d843a6e90ca692720232c6481e031d8630ca6ad" translate="yes" xml:space="preserve">
          <source>Due to the algorithm defined in the specification if the array which map was called upon is sparse, resulting array will also be sparse keeping same indices blank.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b062a3524ca686200d35d47120d43d479133377" translate="yes" xml:space="preserve">
          <source>Due to the differing lengths of days (due to daylight saving changeover), months and years, expressing elapsed time in units greater than hours, minutes and seconds requires addressing a number of issues and should be thoroughly researched before being attempted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f8b13451914f96412651dd50fdbe85546615199" translate="yes" xml:space="preserve">
          <source>Duplicate property names</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5c132c3c9227de82f604e9d6fd67f385d815c46" translate="yes" xml:space="preserve">
          <source>Dynamic Import</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b67b7c79b252dee598276f6bea12deb60bbdff4e" translate="yes" xml:space="preserve">
          <source>Dynamic Imports</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08d1b6b4bf759cf1dbfeaead79ca73afa42e1fa9" translate="yes" xml:space="preserve">
          <source>Dynamic import</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8934c9117cb6cf5651a8327d56755ef4483ade35" translate="yes" xml:space="preserve">
          <source>Dynamic import is useful in situations where you wish to load a module conditionally, or on demand. The static form is preferable for loading initial dependencies, and can benefit more readily from static analysis tools and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking&quot;&gt;tree shaking&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5d985c9686d81e6a04bfb682f01f12c6483f671" translate="yes" xml:space="preserve">
          <source>E.g. &quot;Sat Sep 01 2018 14:53:26 GMT+1400 (LINT)&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2dbe9e84df2a9dac83dbdbc339951cbe04eee58" translate="yes" xml:space="preserve">
          <source>ECMA-262-5 in detail. Chapter 2. Strict Mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="708c1fd42c29511d5344ab63735e57741922fa93" translate="yes" xml:space="preserve">
          <source>ECMASCript 2016 (ed. 7) established a maximum length of &lt;code&gt;2^53 - 1&lt;/code&gt; elements. Previously, no maximum length was specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a43af4aa582dec8f99a298ce6b77435c2adec3a" translate="yes" xml:space="preserve">
          <source>ECMAScript 1st Edition (ECMA-262)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a1ba7d148a16cbb3178ad1848d6875838f557f6" translate="yes" xml:space="preserve">
          <source>ECMAScript 1st Edition (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Assignment operators' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47dc71c103bfafd5c6dd79138fc6a0544d718e9d" translate="yes" xml:space="preserve">
          <source>ECMAScript 1st Edition (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Block statement' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f6dabd769ea1226c5330266eb162a3c6bdee1a8" translate="yes" xml:space="preserve">
          <source>ECMAScript 1st Edition (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Comma operator' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e876eb640f4061e87349d9be9a79ac9e60ff2ee" translate="yes" xml:space="preserve">
          <source>ECMAScript 1st Edition (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Debugger statement' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3f117d75343378b4d377014b2fb971431a05d0b" translate="yes" xml:space="preserve">
          <source>ECMAScript 1st Edition (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Empty statement' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf0e6aa5ce85ca789fd69e00fd8e0d70f1a7453a" translate="yes" xml:space="preserve">
          <source>ECMAScript 1st Edition (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Function definition' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e2ba03d36035f17fc01714c8e1cd555b40dc7b3" translate="yes" xml:space="preserve">
          <source>ECMAScript 1st Edition (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'Property Accessors' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c85ce5103ad0ebee243b6bfc353ec0ddd4b8058e" translate="yes" xml:space="preserve">
          <source>ECMAScript 1st Edition (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'The Grouping Operator' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c632a2d56343e10c20e5be2e5b54420ef775f1cd" translate="yes" xml:space="preserve">
          <source>ECMAScript 1st Edition (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'The conditional operator' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dd7c4c80f5148bb048fc2cc51d427b1eb85c23e" translate="yes" xml:space="preserve">
          <source>ECMAScript 1st Edition (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'The delete Operator' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bc65432efec0452d9c460314360f7b974ff987d" translate="yes" xml:space="preserve">
          <source>ECMAScript 1st Edition (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'The new Operator' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65a3f7162983cb28825f5c07a276beb2612293f4" translate="yes" xml:space="preserve">
          <source>ECMAScript 1st Edition (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'The this keyword' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dea57e3d48609a2d2502d0c417513a57ac6c237c" translate="yes" xml:space="preserve">
          <source>ECMAScript 1st Edition (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'The typeof Operator' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4ba08f23e8c70d2cfce4be8138c1d2fb7b84c26" translate="yes" xml:space="preserve">
          <source>ECMAScript 1st Edition (ECMA-262)&lt;br/&gt;&lt;small&gt;The definition of 'The void Operator' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
