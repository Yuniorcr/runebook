<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="javascript">
    <body>
      <group id="javascript">
        <trans-unit id="0fc7738752a9280dc91c4574c698736df1bc6ba7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;get()&lt;/strong&gt;&lt;/code&gt; method returns a specified element from a &lt;code&gt;Map&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;get()&lt;/strong&gt;&lt;/code&gt; 메소드는에서 지정된 요소를 반환 &lt;code&gt;Map&lt;/code&gt; 개체를.</target>
        </trans-unit>
        <trans-unit id="335acba5423d5b8363cfc0e4aa72f3f46f1955ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;get()&lt;/strong&gt;&lt;/code&gt; method returns a specified element from a &lt;code&gt;WeakMap&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;get()&lt;/strong&gt;&lt;/code&gt; 메소드는에서 지정된 요소를 반환 &lt;code&gt;WeakMap&lt;/code&gt; 의 개체를.</target>
        </trans-unit>
        <trans-unit id="1a850a6febb572a384a24c7df8e0457cc8614143" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;get()&lt;/strong&gt;&lt;/code&gt; prototype method of the &lt;a href=&quot;../table&quot;&gt;&lt;code&gt;WebAssembly.Table()&lt;/code&gt;&lt;/a&gt; object retrieves a function reference stored at a given index.</source>
          <target state="translated">&lt;a href=&quot;../table&quot;&gt; &lt;code&gt;WebAssembly.Table()&lt;/code&gt; &lt;/a&gt; 객체 의 &lt;code&gt;&lt;strong&gt;get()&lt;/strong&gt;&lt;/code&gt; 프로토 타입 메서드 는 지정된 인덱스에 저장된 함수 참조를 검색합니다.</target>
        </trans-unit>
        <trans-unit id="b4dde45797ad98c48dade2728b6c12eb8ce92911" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;grow()&lt;/strong&gt;&lt;/code&gt; prototype method of the &lt;a href=&quot;../table&quot;&gt;&lt;code&gt;WebAssembly.Table&lt;/code&gt;&lt;/a&gt; object increases the size of the Table instance by a specified number of elements.</source>
          <target state="translated">&lt;a href=&quot;../table&quot;&gt; &lt;code&gt;WebAssembly.Table&lt;/code&gt; &lt;/a&gt; 객체 의 &lt;code&gt;&lt;strong&gt;grow()&lt;/strong&gt;&lt;/code&gt; 프로토 타입 메서드 는 지정된 수의 요소만큼 Table 인스턴스의 크기를 증가시킵니다.</target>
        </trans-unit>
        <trans-unit id="a6060c6c51098ef6c190fef62001acc66cdb61bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;handler.apply&lt;/strong&gt;&lt;/code&gt; method is a trap for a function call.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;handler.apply&lt;/strong&gt;&lt;/code&gt; 방법은 함수를 호출하기위한 트랩이다.</target>
        </trans-unit>
        <trans-unit id="ebeba589d24753e676940b4f5b81bb60a417fc4c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;handler.construct()&lt;/strong&gt;&lt;/code&gt; method is a trap for the &lt;a href=&quot;../../../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; operator.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;handler.construct()&lt;/strong&gt;&lt;/code&gt; 메소드는 대한 트랩 인 &lt;a href=&quot;../../../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt; 오퍼레이터.</target>
        </trans-unit>
        <trans-unit id="041ce7b126e2eb7202c39c6d0b3f33189835e50c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;handler.construct()&lt;/strong&gt;&lt;/code&gt; method is a trap for the &lt;a href=&quot;../../../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; operator. In order for the new operation to be valid on the resulting Proxy object, the target used to initialize the proxy must itself have a &lt;code&gt;[[Construct]]&lt;/code&gt; internal method (i.e. &lt;code&gt;new target&lt;/code&gt; must be valid).</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;handler.construct()&lt;/strong&gt;&lt;/code&gt; 메소드는 대한 트랩 인 &lt;a href=&quot;../../../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt; 오퍼레이터. 결과 Proxy 객체에서 새 작업이 유효하려면 프록시를 초기화하는 데 사용 된 대상 자체에 &lt;code&gt;[[Construct]]&lt;/code&gt; 내부 메소드가 있어야합니다 (즉, &lt;code&gt;new target&lt;/code&gt; 이 유효해야 함).</target>
        </trans-unit>
        <trans-unit id="3015fd2a9dbf9e98fd839a73112ceb5bfcc5b7d2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;handler.defineProperty()&lt;/strong&gt;&lt;/code&gt; method is a trap for &lt;a href=&quot;../../object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;handler.defineProperty()&lt;/strong&gt;&lt;/code&gt; 메소드에 대한 트랩 인 &lt;a href=&quot;../../object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="4cbf129d9dac36ff391a03a0f966618e51d99e51" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;handler.deleteProperty()&lt;/strong&gt;&lt;/code&gt; method is a trap for the &lt;a href=&quot;../../../operators/delete&quot;&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt; operator.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;handler.deleteProperty()&lt;/strong&gt;&lt;/code&gt; 메소드는 대한 트랩 인 &lt;a href=&quot;../../../operators/delete&quot;&gt; &lt;code&gt;delete&lt;/code&gt; &lt;/a&gt; 연산자.</target>
        </trans-unit>
        <trans-unit id="0abd7c5d4ea92feb3c2b484121d4264aa2c11105" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;handler.get&lt;/strong&gt;&lt;/code&gt; method is a trap for getting a property value.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;handler.get&lt;/strong&gt;&lt;/code&gt; 의 방법은 속성 값을 가져 오는 함정이다.</target>
        </trans-unit>
        <trans-unit id="59730d676349632026c5dc7ef0f38e06c3002e72" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;handler.getOwnPropertyDescriptor()&lt;/strong&gt;&lt;/code&gt; method is a trap for &lt;a href=&quot;../../object/getownpropertydescriptor&quot;&gt;&lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;handler.getOwnPropertyDescriptor()&lt;/strong&gt;&lt;/code&gt; 메소드에 대한 트랩 인 &lt;a href=&quot;../../object/getownpropertydescriptor&quot;&gt; &lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="086a09b79cd37f0435c1774d7bfe36c00f745b79" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;handler.has&lt;/strong&gt;&lt;/code&gt; method is a trap for the &lt;a href=&quot;../../../operators/in&quot;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; operator.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;handler.has&lt;/strong&gt;&lt;/code&gt; 의 방법은하기위한 함정 &lt;a href=&quot;../../../operators/in&quot;&gt; &lt;code&gt;in&lt;/code&gt; &lt;/a&gt; 오퍼레이터.</target>
        </trans-unit>
        <trans-unit id="a3cfd683d96a3e006c62de08bb3e8ec5e57e718a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;handler.isExtensible()&lt;/strong&gt;&lt;/code&gt; method is a trap for &lt;a href=&quot;../../object/isextensible&quot;&gt;&lt;code&gt;Object.isExtensible()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;handler.isExtensible()&lt;/strong&gt;&lt;/code&gt; 메소드에 대한 트랩 인 &lt;a href=&quot;../../object/isextensible&quot;&gt; &lt;code&gt;Object.isExtensible()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c5931aef486dd853658845ce2aba9bdfdfdbc229" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;handler.ownKeys()&lt;/strong&gt;&lt;/code&gt; method is a trap for &lt;a href=&quot;../../reflect/ownkeys&quot;&gt;&lt;code&gt;Reflect.ownKeys()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;handler.ownKeys()&lt;/strong&gt;&lt;/code&gt; 메소드에 대한 트랩 인 &lt;a href=&quot;../../reflect/ownkeys&quot;&gt; &lt;code&gt;Reflect.ownKeys()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d70ff38470c4a982db89266f128fe65328a719fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;handler.preventExtensions()&lt;/strong&gt;&lt;/code&gt; method is a trap for &lt;a href=&quot;../../object/preventextensions&quot;&gt;&lt;code&gt;Object.preventExtensions()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;handler.preventExtensions()&lt;/strong&gt;&lt;/code&gt; 메소드에 대한 트랩 인 &lt;a href=&quot;../../object/preventextensions&quot;&gt; &lt;code&gt;Object.preventExtensions()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="17de101f0f93ac7e750b7baf3762c51a200ff581" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;handler.set()&lt;/strong&gt;&lt;/code&gt; method is a trap for setting a property value.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;handler.set()&lt;/strong&gt;&lt;/code&gt; 메소드는 속성 값을 설정하는 트랩이다.</target>
        </trans-unit>
        <trans-unit id="8f5642471ca7f980d4ea68a1666fcd226e0fb5d5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;handler.set&lt;/strong&gt;&lt;/code&gt; method is a trap for setting property value.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;handler.set&lt;/strong&gt;&lt;/code&gt; 의 방법은 속성 값을 설정하는 트랩이다.</target>
        </trans-unit>
        <trans-unit id="bf9458764a8481b8a0b61026ed10df0c6f1f5f21" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;handler.setPrototypeOf&lt;/strong&gt;&lt;/code&gt; method is a trap for &lt;a href=&quot;../../object/setprototypeof&quot;&gt;&lt;code&gt;Object.setPrototypeOf()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;handler.setPrototypeOf&lt;/strong&gt;&lt;/code&gt; 의 방법에 대한 트랩 인 &lt;a href=&quot;../../object/setprototypeof&quot;&gt; &lt;code&gt;Object.setPrototypeOf()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5a578a8c370f8fc817eaca6611c1b03d11a3e391" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;has()&lt;/strong&gt;&lt;/code&gt; method returns a boolean indicating whether an element with the specified key exists in the &lt;code&gt;WeakMap&lt;/code&gt; object or not.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;has()&lt;/strong&gt;&lt;/code&gt; 메소드는, 특정 키 요소가 존재하는지 여부를 나타내는 부울 반환 &lt;code&gt;WeakMap&lt;/code&gt; 의 물체의 유무.</target>
        </trans-unit>
        <trans-unit id="f9c19455950535277cbe042b5abeab5be486d60a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;has()&lt;/strong&gt;&lt;/code&gt; method returns a boolean indicating whether an element with the specified key exists or not.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;has()&lt;/strong&gt;&lt;/code&gt; 메소드가 복귀 부울 지정된 키 요소가 존재하는지 여부를 나타낸다.</target>
        </trans-unit>
        <trans-unit id="bf4ee0492be4bf2ce00eecf3e84378a5d4ab8581" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;has()&lt;/strong&gt;&lt;/code&gt; method returns a boolean indicating whether an element with the specified value exists in a &lt;code&gt;Set&lt;/code&gt; object or not.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;has()&lt;/strong&gt;&lt;/code&gt; 부울 지정된 값을 가지는 요소가 존재하는지 여부를 나타내는 방법 복귀 &lt;code&gt;Set&lt;/code&gt; 오브젝트 여부.</target>
        </trans-unit>
        <trans-unit id="28dfec19ee609ef661e6aa5747bfddf893d3ff44" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;has()&lt;/strong&gt;&lt;/code&gt; method returns a boolean indicating whether an object exists in a &lt;code&gt;WeakSet&lt;/code&gt; or not.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;has()&lt;/strong&gt;&lt;/code&gt; 메소드가 복귀 부울 개체가 존재하는지 여부를 나타내는 &lt;code&gt;WeakSet&lt;/code&gt; 여부.</target>
        </trans-unit>
        <trans-unit id="d7197f999777ef023242bba71e8f3dd708e89e15" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;hasOwnProperty()&lt;/strong&gt;&lt;/code&gt; method returns a boolean indicating whether the object has the specified property as its own property (as opposed to inheriting it).</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;hasOwnProperty()&lt;/strong&gt;&lt;/code&gt; 메소드가 반환 부울는 (그것을 상속 반대) 객체가 자신의 속성으로 지정된 속성이 있는지 여부를 나타내는.</target>
        </trans-unit>
        <trans-unit id="7726c9f5fd4376043b25b1884a2d1ede79735ece" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;includes()&lt;/strong&gt;&lt;/code&gt; method determines whether a typed array includes a certain element, returning &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; as appropriate. This method has the same algorithm as &lt;a href=&quot;../array/includes&quot;&gt;&lt;code&gt;Array.prototype.includes()&lt;/code&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;em&gt;TypedArray&lt;/em&gt; is one of the &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;typed array types&lt;/a&gt; here.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;includes()&lt;/strong&gt;&lt;/code&gt; 메소드는, 입력 된 어레이가 반환 특정 요소를 포함하는지 여부를 판정 &lt;code&gt;true&lt;/code&gt; 또는 &lt;code&gt;false&lt;/code&gt; 적절. 이 메소드는 &lt;a href=&quot;../array/includes&quot;&gt; &lt;code&gt;Array.prototype.includes()&lt;/code&gt; &lt;/a&gt; 와 동일한 알고리즘을 갖습니다 &lt;em&gt;. &lt;/em&gt;&lt;em&gt;TypedArray&lt;/em&gt; 는 여기에서 &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;유형&lt;/a&gt; 이 지정된 배열 유형 중 하나입니다 .</target>
        </trans-unit>
        <trans-unit id="b653c9e14a9e2e753822079edd73d5fee226066c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;includes()&lt;/strong&gt;&lt;/code&gt; method determines whether an array includes a certain element, returning &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; as appropriate.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;includes()&lt;/strong&gt;&lt;/code&gt; 메소드는 배열 반환 특정 요소를 포함하는지 여부를 판정 &lt;code&gt;true&lt;/code&gt; 또는 &lt;code&gt;false&lt;/code&gt; 적절.</target>
        </trans-unit>
        <trans-unit id="646c7e2b71ac8fde9d550f86accc5ba525a2b6d0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;indexOf()&lt;/strong&gt;&lt;/code&gt; method returns the first index at which a given element can be found in the array, or -1 if it is not present.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;indexOf()&lt;/strong&gt;&lt;/code&gt; 메소드는 소정의 소자가 배열에서 발견 될 수있는 또는 -1이 존재하지 않는 경우 최초의 인덱스를 반환한다.</target>
        </trans-unit>
        <trans-unit id="a3eea6400a846378f17241be6f13fd2cb91aeb1d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;indexOf()&lt;/strong&gt;&lt;/code&gt; method returns the first index at which a given element can be found in the typed array, or -1 if it is not present. This method has the same algorithm as &lt;a href=&quot;../array/indexof&quot;&gt;&lt;code&gt;Array.prototype.indexOf()&lt;/code&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;em&gt;TypedArray&lt;/em&gt; is one of the &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;typed array types&lt;/a&gt; here.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;indexOf()&lt;/strong&gt;&lt;/code&gt; 메소드는 소정의 소자가 형식화 된 배열에서 발견 될 수있는 또는 -1이 존재하지 않는 경우 최초의 인덱스를 반환한다. 이 메소드는 &lt;a href=&quot;../array/indexof&quot;&gt; &lt;code&gt;Array.prototype.indexOf()&lt;/code&gt; &lt;/a&gt; 와 동일한 알고리즘을 갖습니다 &lt;em&gt;. &lt;/em&gt;&lt;em&gt;TypedArray&lt;/em&gt; 는 여기에서 &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;유형&lt;/a&gt; 이 지정된 배열 유형 중 하나입니다 .</target>
        </trans-unit>
        <trans-unit id="1309d2331fb1e69c62dda54ace47f79d74d38ab7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;isNaN()&lt;/strong&gt;&lt;/code&gt; function determines whether a value is &lt;a href=&quot;nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; or not. Note: coercion inside the &lt;code&gt;isNaN&lt;/code&gt; function has &lt;a href=&quot;#Description&quot;&gt;interesting&lt;/a&gt; rules; you may alternatively want to use &lt;a href=&quot;number/isnan&quot;&gt;&lt;code&gt;Number.isNaN()&lt;/code&gt;&lt;/a&gt;, as defined in ECMAScript 2015.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;isNaN()&lt;/strong&gt;&lt;/code&gt; 함수의 값인지 여부를 확인 &lt;a href=&quot;nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; 의&lt;/a&gt; 여부. 참고 : &lt;code&gt;isNaN&lt;/code&gt; 함수 내부의 강제 에는 &lt;a href=&quot;#Description&quot;&gt;흥미로운&lt;/a&gt; 규칙이 있습니다. ECMAScript 2015에 정의 된대로 &lt;a href=&quot;number/isnan&quot;&gt; &lt;code&gt;Number.isNaN()&lt;/code&gt; &lt;/a&gt; 을 사용할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c16094e78a9c4d4dd4c3193df98071909c221758" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;isPrototypeOf()&lt;/strong&gt;&lt;/code&gt; method checks if an object exists in another object's prototype chain.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;isPrototypeOf()&lt;/strong&gt;&lt;/code&gt; 메소드를 검사 물체가 다른 물체의 프로토 타입 체인에있는 경우.</target>
        </trans-unit>
        <trans-unit id="c84931dfa3aedb1e375bec4968382252b89985d0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;join()&lt;/strong&gt;&lt;/code&gt; method creates and returns a new string by concatenating all of the elements in an array (or an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#Working_with_array-like_objects&quot;&gt;array-like object&lt;/a&gt;), separated by commas or a specified separator string.</source>
          <target state="translated">는 &lt;code&gt;&lt;strong&gt;join()&lt;/strong&gt;&lt;/code&gt; 메소드를 생성하고 반환 배열의 요소를 모두 연결하여 새로운 문자열 (또는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#Working_with_array-like_objects&quot;&gt;어레이 형상 물체&lt;/a&gt; ) 콤마 분리 지정된 문자열로 분리.</target>
        </trans-unit>
        <trans-unit id="e89ed642d493aa56fa98b2de88ff611ae7b3de06" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;join()&lt;/strong&gt;&lt;/code&gt; method joins all elements of an array into a string. This method has the same algorithm as &lt;a href=&quot;../array/join&quot;&gt;&lt;code&gt;Array.prototype.join()&lt;/code&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;em&gt;TypedArray&lt;/em&gt; is one of the &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;typed array types&lt;/a&gt; here.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;join()&lt;/strong&gt;&lt;/code&gt; 메소드는 문자열로 어레이의 모든 요소를 결합한다. 이 메소드에는 &lt;a href=&quot;../array/join&quot;&gt; &lt;code&gt;Array.prototype.join()&lt;/code&gt; &lt;/a&gt; 과 동일한 알고리즘이 &lt;em&gt;있습니다. &lt;/em&gt;&lt;em&gt;TypedArray&lt;/em&gt; 는 여기에서 &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;유형&lt;/a&gt; 이 지정된 배열 유형 중 하나입니다 .</target>
        </trans-unit>
        <trans-unit id="9a26f632b30ce857bf418ecdc5f8c983697f974a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;keys()&lt;/strong&gt;&lt;/code&gt; method returns a new &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators&quot;&gt;Iterator&lt;/a&gt;&lt;/code&gt; object that contains the keys for each element in the &lt;code&gt;Map&lt;/code&gt; object in insertion order.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;keys()&lt;/strong&gt;&lt;/code&gt; 메소드가 복귀 새로운 &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators&quot;&gt;Iterator&lt;/a&gt;&lt;/code&gt; 의 각 요소에 대한 키를 포함 오브젝트 &lt;code&gt;Map&lt;/code&gt; 신청서의 개체.</target>
        </trans-unit>
        <trans-unit id="76bb159eb6b9791e097386dc324574864b1432bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;keys()&lt;/strong&gt;&lt;/code&gt; method returns a new &lt;code&gt;&lt;strong&gt;Array Iterator&lt;/strong&gt;&lt;/code&gt; object that contains the keys for each index in the array.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;keys()&lt;/strong&gt;&lt;/code&gt; 메소드가 복귀 새로운 &lt;code&gt;&lt;strong&gt;Array Iterator&lt;/strong&gt;&lt;/code&gt; 배열의 각 인덱스에 대한 키를 포함 개체.</target>
        </trans-unit>
        <trans-unit id="6c612445ee05f073466d078f3ce15332e66c2bd1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;lastIndexOf()&lt;/strong&gt;&lt;/code&gt; method returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards, starting at &lt;code&gt;fromIndex&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;lastIndexOf()&lt;/strong&gt;&lt;/code&gt; 메소드는 소정의 소자가 배열에서 발견 될 수있는 또는 -1이 없으면 마지막 인덱스를 반환한다. 배열은 &lt;code&gt;fromIndex&lt;/code&gt; 에서 시작하여 뒤로 검색 됩니다.</target>
        </trans-unit>
        <trans-unit id="aea8805086569e0d38da2523961661819a548ac9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;lastIndexOf()&lt;/strong&gt;&lt;/code&gt; method returns the last index at which a given element can be found in the typed array, or -1 if it is not present. The typed array is searched backwards, starting at &lt;code&gt;fromIndex&lt;/code&gt;. This method has the same algorithm as &lt;a href=&quot;../array/lastindexof&quot;&gt;&lt;code&gt;Array.prototype.lastIndexOf()&lt;/code&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;em&gt;TypedArray&lt;/em&gt; is one of the &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;typed array types&lt;/a&gt; here.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;lastIndexOf()&lt;/strong&gt;&lt;/code&gt; 메소드는 소정의 소자가 형식화 된 배열에서 발견 될 수있는 또는 -1이 없으면 마지막 인덱스를 반환한다. 형식화 된 배열은 &lt;code&gt;fromIndex&lt;/code&gt; 에서 시작하여 뒤로 검색 됩니다. 이 메소드에는 &lt;a href=&quot;../array/lastindexof&quot;&gt; &lt;code&gt;Array.prototype.lastIndexOf()&lt;/code&gt; &lt;/a&gt; 와 동일한 알고리즘이 &lt;em&gt;있습니다. &lt;/em&gt;&lt;em&gt;TypedArray&lt;/em&gt; 는 여기에서 &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;유형&lt;/a&gt; 이 지정된 배열 유형 중 하나입니다 .</target>
        </trans-unit>
        <trans-unit id="7f5e8c3de9785ec846493bfb4607e68760653c61" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;length&lt;/strong&gt;&lt;/code&gt; property indicates the number of Parameters expected by the function.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;length&lt;/strong&gt;&lt;/code&gt; 속성은 함수가 예상 매개 변수의 수를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="5e614ccc31e70daa3fef6a16bf753ec57010d8d0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;length&lt;/strong&gt;&lt;/code&gt; property of an object which is an instance of type &lt;code&gt;Array&lt;/code&gt; sets or returns the number of elements in that array. The value is an unsigned, 32-bit integer that is always numerically greater than the highest index in the array.</source>
          <target state="translated">&lt;code&gt;Array&lt;/code&gt; 유형의 인스턴스 인 객체 의 &lt;code&gt;&lt;strong&gt;length&lt;/strong&gt;&lt;/code&gt; 속성은 해당 배열의 요소 수를 설정하거나 반환합니다. 값은 부호가없는 32 비트 정수이며 항상 배열에서 가장 높은 인덱스보다 숫자가 더 큽니다.</target>
        </trans-unit>
        <trans-unit id="e016f1881f16e6920b357efdcbe478a254dc61c8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;length&lt;/strong&gt;&lt;/code&gt; prototype property of the &lt;a href=&quot;../table&quot;&gt;&lt;code&gt;WebAssembly.Table&lt;/code&gt;&lt;/a&gt; object returns the length of the table, i.e. the number of elements in the table.</source>
          <target state="translated">&lt;a href=&quot;../table&quot;&gt; &lt;code&gt;WebAssembly.Table&lt;/code&gt; &lt;/a&gt; 객체 의 &lt;code&gt;&lt;strong&gt;length&lt;/strong&gt;&lt;/code&gt; 프로토 타입 속성은 테이블의 길이, 즉 테이블의 요소 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="eb9668d69effc5305fd7aab7ea6517a13800409a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;map()&lt;/strong&gt;&lt;/code&gt; method creates a new array with the results of calling a provided function on every element in the calling array.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;map()&lt;/strong&gt;&lt;/code&gt; 메소드 호출 어레이의 모든 요소에 대해 제공되는 함수 호출의 결과로 새로운 배열을 생성한다.</target>
        </trans-unit>
        <trans-unit id="614bd51d4e9c7402f88af18d7b6e21940a9250b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;map()&lt;/strong&gt;&lt;/code&gt; method creates a new typed array with the results of calling a provided function on every element in this typed array. This method has the same algorithm as &lt;a href=&quot;../array/map&quot;&gt;&lt;code&gt;Array.prototype.map()&lt;/code&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;em&gt;TypedArray&lt;/em&gt; is one of the &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;typed array types&lt;/a&gt; here.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;map()&lt;/strong&gt;&lt;/code&gt; 메소드는이 입력 된 어레이의 모든 요소에 대해 제공되는 함수 호출의 결과로 새로운 형식화 된 배열을 생성한다. 이 메소드는 &lt;a href=&quot;../array/map&quot;&gt; &lt;code&gt;Array.prototype.map()&lt;/code&gt; &lt;/a&gt; 과 동일한 알고리즘을 갖습니다 &lt;em&gt;. &lt;/em&gt;&lt;em&gt;TypedArray&lt;/em&gt; 는 여기에서 &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;유형&lt;/a&gt; 이 지정된 배열 유형 중 하나입니다 .</target>
        </trans-unit>
        <trans-unit id="18a4b2bf257ace2f33834f2cc8b05b61604a44f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;message&lt;/strong&gt;&lt;/code&gt; property is a human-readable description of the error.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;message&lt;/strong&gt;&lt;/code&gt; 속성은 오류의 사람이 읽을 수있는 설명입니다.</target>
        </trans-unit>
        <trans-unit id="0ad72babece34d72a19caabe0e4a753ecf029c1f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;name&lt;/strong&gt;&lt;/code&gt; property represents a name for the type of error. The initial value is &quot;Error&quot;.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;name&lt;/strong&gt;&lt;/code&gt; 속성은 오류의 유형에 대한 이름을 나타냅니다. 초기 값은 &quot;오류&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="ce94cb770544dfa60920742d4f5dac77d505498f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;next&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;()&lt;/code&gt; method returns an object with two properties &lt;code&gt;done&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;. You can also provide a parameter to the &lt;code&gt;next&lt;/code&gt; method to send a value to the generator.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;next&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;()&lt;/code&gt; 메소드는 두 가지 속성을 가진 객체를 반환 &lt;code&gt;done&lt;/code&gt; 하고 &lt;code&gt;value&lt;/code&gt; . &lt;code&gt;next&lt;/code&gt; 메소드에 매개 변수를 제공 하여 생성기에 값을 보낼 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="21999aa5050544f95a6e76a702a3f445bf0f43af" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;parseFloat()&lt;/strong&gt;&lt;/code&gt; function parses an argument and returns a floating point number.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;parseFloat()&lt;/strong&gt;&lt;/code&gt; 함수는 인수를 구문 분석하고 부동 소수점 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3dfd6913e9b4442f40861ed9599bb5d91ebf4080" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;parseInt()&lt;/strong&gt;&lt;/code&gt; function parses a string argument and returns an integer of the specified radix (the base in mathematical numeral systems).</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;parseInt()&lt;/strong&gt;&lt;/code&gt; 함수는 문자열 인수를 구문 분석하고 지정된 기수 (수학적 숫자 시스템베이스)의 정수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c90d1c205bf439b189bbf3642a6a17b570f4f81e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;pop()&lt;/strong&gt;&lt;/code&gt; method removes the &lt;strong&gt;last&lt;/strong&gt; element from an array and returns that element. This method changes the length of the array.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;pop()&lt;/strong&gt;&lt;/code&gt; 메소드는 제거 &lt;strong&gt;마지막&lt;/strong&gt; 어레이 소자로부터 반환 소자. 이 방법은 배열의 길이를 변경합니다.</target>
        </trans-unit>
        <trans-unit id="6e1c6dc676b89297060531361010c44a7f2dec4f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;propertyIsEnumerable()&lt;/strong&gt;&lt;/code&gt; method returns a Boolean indicating whether the specified property is enumerable.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;propertyIsEnumerable()&lt;/strong&gt;&lt;/code&gt; 메소드가 반환 부울 지정된 속성을 열거 가능한지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="f23900d5c68bc22503398f9c178ca4960a1a1092" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;push()&lt;/strong&gt;&lt;/code&gt; method adds one or more elements to the end of an array and returns the new length of the array.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;push()&lt;/strong&gt;&lt;/code&gt; 메소드는 배열의 마지막 하나 개 이상의 요소를 추가하고 배열의 새로운 길이를 반환한다.</target>
        </trans-unit>
        <trans-unit id="476cae893735b439422b4179cf3399831bed3f65" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;reduce()&lt;/strong&gt;&lt;/code&gt; method applies a function against an accumulator and each value of the typed array (from left-to-right) has to reduce it to a single value. This method has the same algorithm as &lt;a href=&quot;../array/reduce&quot;&gt;&lt;code&gt;Array.prototype.reduce()&lt;/code&gt;&lt;/a&gt;. &lt;em&gt;TypedArray&lt;/em&gt; is one of the &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;typed array types&lt;/a&gt; here.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;reduce()&lt;/strong&gt;&lt;/code&gt; 메소드는 어큐뮬레이터에 대해 기능 및 하나의 값으로 감소한다 (왼쪽에서 오른쪽)에 입력 된 어레이의 각 값을 적용한다. 이 메소드에는 &lt;a href=&quot;../array/reduce&quot;&gt; &lt;code&gt;Array.prototype.reduce()&lt;/code&gt; &lt;/a&gt; 와 동일한 알고리즘이 있습니다. &lt;em&gt;TypedArray&lt;/em&gt; 는 여기에서 &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;유형&lt;/a&gt; 이 지정된 배열 유형 중 하나입니다 .</target>
        </trans-unit>
        <trans-unit id="034f4b7413c524fd0d47e690c5d412bccf3ddaf8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;reduce()&lt;/strong&gt;&lt;/code&gt; method executes a &lt;strong&gt;reducer&lt;/strong&gt; function (that you provide) on each member of the array resulting in a single output value.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;reduce()&lt;/strong&gt;&lt;/code&gt; 메소드가 실행 &lt;strong&gt;감속기&lt;/strong&gt; 단일 출력 값을 생성 된 어레이의 각 구성원의 기능 (만약 제공하는).</target>
        </trans-unit>
        <trans-unit id="5229cb6830ae1ec04570147dbf431d6a0cff0861" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;reduceRight()&lt;/strong&gt;&lt;/code&gt; method applies a function against an accumulator and each value of the array (from right-to-left) to reduce it to a single value.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;reduceRight()&lt;/strong&gt;&lt;/code&gt; 메소드는 어큐뮬레이터에 대해 기능 및 배열의 각각의 값에 적용되는 (행을 오른쪽에서 왼쪽으로) 하나의 값으로 감소시킨다.</target>
        </trans-unit>
        <trans-unit id="9ea7d2d504b07bbb124916fce9aa44e2ec6dedb4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;reduceRight()&lt;/strong&gt;&lt;/code&gt; method applies a function against an accumulator and each value of the typed array (from right-to-left) has to reduce it to a single value. This method has the same algorithm as &lt;a href=&quot;../array/reduceright&quot;&gt;&lt;code&gt;Array.prototype.reduceRight()&lt;/code&gt;&lt;/a&gt;. &lt;em&gt;TypedArray&lt;/em&gt; is one of the &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;typed array types&lt;/a&gt; here.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;reduceRight()&lt;/strong&gt;&lt;/code&gt; 메소드는 어큐뮬레이터에 대해 기능 및 하나의 값으로 감소한다 (오른쪽에서 왼쪽으로)에 입력 된 어레이의 각 값을 적용한다. 이 메소드에는 &lt;a href=&quot;../array/reduceright&quot;&gt; &lt;code&gt;Array.prototype.reduceRight()&lt;/code&gt; &lt;/a&gt; 와 동일한 알고리즘이 있습니다. &lt;em&gt;TypedArray&lt;/em&gt; 는 여기에서 &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;유형&lt;/a&gt; 이 지정된 배열 유형 중 하나입니다 .</target>
        </trans-unit>
        <trans-unit id="a790ac6e1294383154bc7b2978538f5eb94d6274" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;return()&lt;/strong&gt;&lt;/code&gt; method returns the given value and finishes the generator.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;return()&lt;/strong&gt;&lt;/code&gt; 메소드는 소정의 값을 리턴하고, 발전기를 종료한다.</target>
        </trans-unit>
        <trans-unit id="3c536cd88c53a52914f16d8cfa3831411cf0210d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;reverse()&lt;/strong&gt;&lt;/code&gt; method reverses a typed array in place. The first typed array element becomes the last and the last becomes the first. This method has the same algorithm as &lt;a href=&quot;../array/reverse&quot;&gt;&lt;code&gt;Array.prototype.reverse()&lt;/code&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;em&gt;TypedArray&lt;/em&gt; is one of the &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;typed array types&lt;/a&gt; here.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;reverse()&lt;/strong&gt;&lt;/code&gt; 메소드는 대신에 형식화 된 배열을 반대로. 첫 번째로 입력 된 배열 요소가 마지막이되고 마지막이 첫 번째가됩니다. 이 메소드에는 &lt;a href=&quot;../array/reverse&quot;&gt; &lt;code&gt;Array.prototype.reverse()&lt;/code&gt; &lt;/a&gt; 와 동일한 알고리즘이 &lt;em&gt;있습니다. &lt;/em&gt;&lt;em&gt;TypedArray&lt;/em&gt; 는 여기에서 &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;유형&lt;/a&gt; 이 지정된 배열 유형 중 하나입니다 .</target>
        </trans-unit>
        <trans-unit id="a1e9a75dd821f1661fdaa1d44865d4df67bf3184" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;reverse()&lt;/strong&gt;&lt;/code&gt; method reverses an array &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/In-place_algorithm&quot;&gt;in place&lt;/a&gt;&lt;/em&gt;. The first array element becomes the last, and the last array element becomes the first.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;reverse()&lt;/strong&gt;&lt;/code&gt; 메서드는 배열 &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/In-place_algorithm&quot;&gt;을&lt;/a&gt;&lt;/em&gt; 원래 &lt;em&gt;위치로&lt;/em&gt; 되돌립니다 . 첫 번째 배열 요소가 마지막이되고 마지막 배열 요소가 첫 번째가됩니다.</target>
        </trans-unit>
        <trans-unit id="c5867b40bdd16a340cfc615fb40e0bbd1a484ded" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;set()&lt;/strong&gt;&lt;/code&gt; method adds a new element with a specified &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; to a &lt;code&gt;WeakMap&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;set()&lt;/strong&gt;&lt;/code&gt; 메소드로 지정된 새로운 요소에 추가 &lt;code&gt;key&lt;/code&gt; 와 &lt;code&gt;value&lt;/code&gt; A와 &lt;code&gt;WeakMap&lt;/code&gt; 의 개체.</target>
        </trans-unit>
        <trans-unit id="9f3a35790c7d2a8ee211d6d1ce612f997e937471" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;set()&lt;/strong&gt;&lt;/code&gt; method adds or updates an element with a specified &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; to a &lt;code&gt;Map&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;set()&lt;/strong&gt;&lt;/code&gt; 메소드는 추가 또는 지정된 소자와 갱신 &lt;code&gt;key&lt;/code&gt; 와 &lt;code&gt;value&lt;/code&gt; (A)에 &lt;code&gt;Map&lt;/code&gt; 오브젝트.</target>
        </trans-unit>
        <trans-unit id="ea2e9a9480a1e9deaae663450236dfc2267ef78e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;set()&lt;/strong&gt;&lt;/code&gt; prototype method of the &lt;a href=&quot;../table&quot;&gt;&lt;code&gt;WebAssembly.Table&lt;/code&gt;&lt;/a&gt; object mutates a reference stored at a given index to a different value.</source>
          <target state="translated">&lt;a href=&quot;../table&quot;&gt; &lt;code&gt;WebAssembly.Table&lt;/code&gt; &lt;/a&gt; 객체 의 &lt;code&gt;&lt;strong&gt;set()&lt;/strong&gt;&lt;/code&gt; 프로토 타입 메서드 는 지정된 인덱스에 저장된 참조를 다른 값으로 변경합니다.</target>
        </trans-unit>
        <trans-unit id="229299e7a3f94fb998193be6f7ee48453e822fd7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;shift()&lt;/strong&gt;&lt;/code&gt; method removes the &lt;strong&gt;first&lt;/strong&gt; element from an array and returns that removed element. This method changes the length of the array.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;shift()&lt;/strong&gt;&lt;/code&gt; 메소드는 삭제 &lt;strong&gt;제&lt;/strong&gt; 배열 복귀 제거 소자로부터 소자. 이 방법은 배열의 길이를 변경합니다.</target>
        </trans-unit>
        <trans-unit id="313011d9b2b52af018ebe510e386c7823ed7c020" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;size&lt;/strong&gt;&lt;/code&gt; accessor property returns the number of elements in a &lt;a href=&quot;../map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;size&lt;/strong&gt;&lt;/code&gt; 프로퍼티 접근은 요소 수를 반환 &lt;a href=&quot;../map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt; 오브젝트를.</target>
        </trans-unit>
        <trans-unit id="0385cfa03ce049ee131132676b239e05083bd039" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;size&lt;/strong&gt;&lt;/code&gt; accessor property returns the number of elements in a &lt;a href=&quot;../set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;size&lt;/strong&gt;&lt;/code&gt; 접근 자 속성을 반환 A의 원소의 개수 &lt;a href=&quot;../set&quot;&gt; &lt;code&gt;Set&lt;/code&gt; &lt;/a&gt; 객체입니다.</target>
        </trans-unit>
        <trans-unit id="2ef31edf22c840448a59a649b73d48c84f89ef3e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;slice()&lt;/strong&gt;&lt;/code&gt; method returns a new &lt;code&gt;ArrayBuffer&lt;/code&gt; whose contents are a copy of this &lt;code&gt;ArrayBuffer&lt;/code&gt;'s bytes from &lt;code&gt;begin&lt;/code&gt;, inclusive, up to &lt;code&gt;end&lt;/code&gt;, exclusive.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;slice()&lt;/strong&gt;&lt;/code&gt; 메소드는 새로운 반환 &lt;code&gt;ArrayBuffer&lt;/code&gt; 그 내용이 사본입니다 &lt;code&gt;ArrayBuffer&lt;/code&gt; 에서의 바이트 &lt;code&gt;begin&lt;/code&gt; 까지 포함, &lt;code&gt;end&lt;/code&gt; 독점.</target>
        </trans-unit>
        <trans-unit id="2e7095197fe13f285adf5209123fd1abb0c9fa52" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;slice()&lt;/strong&gt;&lt;/code&gt; method returns a shallow copy of a portion of a typed array into a new typed array object. This method has the same algorithm as &lt;a href=&quot;../array/slice&quot;&gt;&lt;code&gt;Array.prototype.slice()&lt;/code&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;em&gt;TypedArray&lt;/em&gt; is one of the &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;typed array types&lt;/a&gt; here.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;slice()&lt;/strong&gt;&lt;/code&gt; 메소드는 새로운 형식화 된 배열 객체로 형식화 된 배열의 일부분의 얕은 사본을 돌려 준다. 이 메소드에는 &lt;a href=&quot;../array/slice&quot;&gt; &lt;code&gt;Array.prototype.slice()&lt;/code&gt; &lt;/a&gt; 와 동일한 알고리즘이 &lt;em&gt;있습니다. &lt;/em&gt;&lt;em&gt;TypedArray&lt;/em&gt; 는 여기에서 &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;유형&lt;/a&gt; 이 지정된 배열 유형 중 하나입니다 .</target>
        </trans-unit>
        <trans-unit id="43cc073d057693a01ec495da4dbef5af38eea0e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;slice()&lt;/strong&gt;&lt;/code&gt; method returns a shallow copy of a portion of an array into a new array object selected from &lt;code&gt;begin&lt;/code&gt; to &lt;code&gt;end&lt;/code&gt; (&lt;code&gt;end&lt;/code&gt; not included). The original array will not be modified.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;slice()&lt;/strong&gt;&lt;/code&gt; 메소드로부터 선택된 새로운 어레이 오브젝트에 배열 부분의 얕은 사본을 돌려 &lt;code&gt;begin&lt;/code&gt; 에 &lt;code&gt;end&lt;/code&gt; ( &lt;code&gt;end&lt;/code&gt; 포함하지 않음). 원래 배열은 수정되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e826557cdea9d5add121c371e2c870aa1194038b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;some()&lt;/strong&gt;&lt;/code&gt; method tests whether at least one element in the array passes the test implemented by the provided function.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;some()&lt;/strong&gt;&lt;/code&gt; 어레이의 적어도 하나 개의 원소 제공된 기능에 의해 구현되는 테스트를 통과 여부 검사 방법.</target>
        </trans-unit>
        <trans-unit id="6a14810ab931e34a4371074da58f2bae48868a03" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;some()&lt;/strong&gt;&lt;/code&gt; method tests whether some element in the typed array passes the test implemented by the provided function. This method has the same algorithm as &lt;a href=&quot;../array/some&quot;&gt;&lt;code&gt;Array.prototype.some()&lt;/code&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;em&gt;TypedArray&lt;/em&gt; is one of the &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;typed array types&lt;/a&gt; here.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;some()&lt;/strong&gt;&lt;/code&gt; 타이핑 어레이의 일부 요소가 제공되는 기능에 의해 구현되는 테스트를 통과 여부 검사 방법. 이 메소드에는 &lt;a href=&quot;../array/some&quot;&gt; &lt;code&gt;Array.prototype.some()&lt;/code&gt; &lt;/a&gt; 과 동일한 알고리즘이 &lt;em&gt;있습니다. &lt;/em&gt;&lt;em&gt;TypedArray&lt;/em&gt; 는 여기에서 &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;유형&lt;/a&gt; 이 지정된 배열 유형 중 하나입니다 .</target>
        </trans-unit>
        <trans-unit id="401523bcf7fcc84881c476c7d9734caaf27b63b1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;sort()&lt;/strong&gt;&lt;/code&gt; method sorts the elements of a typed array numerically &lt;em&gt;in place&lt;/em&gt; and returns the typed array. This method has the same algorithm as &lt;a href=&quot;../array/sort&quot;&gt;&lt;code&gt;Array.prototype.sort()&lt;/code&gt;&lt;/a&gt;, except that sorts the values numerically instead of as strings&lt;em&gt;.&lt;/em&gt;&lt;em&gt;TypedArray&lt;/em&gt; is one of the &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;typed array types&lt;/a&gt; here.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;sort()&lt;/strong&gt;&lt;/code&gt; 메소드는 수치 적으로 형식화 된 배열의 요소 정렬 &lt;em&gt;장소를&lt;/em&gt; 하고 형식화 된 배열을 반환합니다. 이 메소드는 &lt;a href=&quot;../array/sort&quot;&gt; &lt;code&gt;Array.prototype.sort()&lt;/code&gt; &lt;/a&gt; 와 동일한 알고리즘을 갖지만, 문자열 대신 숫자를 사용하여 값을 정렬합니다 &lt;em&gt;. &lt;/em&gt;&lt;em&gt;TypedArray&lt;/em&gt; 는 여기에서 &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;유형&lt;/a&gt; 이 지정된 배열 유형 중 하나입니다 .</target>
        </trans-unit>
        <trans-unit id="d056cc137d408763936ae0e6e9c71d0fa1728ac2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;sort()&lt;/strong&gt;&lt;/code&gt; method sorts the elements of an array &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/In-place_algorithm&quot;&gt;in place&lt;/a&gt;&lt;/em&gt; and returns the array. The default sort order is built upon converting the elements into strings, then comparing their sequences of UTF-16 code units values.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;sort()&lt;/strong&gt;&lt;/code&gt; 메소드는 배열 요소 정렬 &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/In-place_algorithm&quot;&gt;대신하여&lt;/a&gt;&lt;/em&gt; 어레이를 리턴한다. 기본 정렬 순서는 요소를 문자열로 변환 한 다음 UTF-16 코드 단위 값 시퀀스를 비교할 때 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="de56aea8fa54670e386932ea709cfe1cf1e1798d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;static&lt;/strong&gt;&lt;/code&gt; keyword defines a static method for a class. Static methods aren't called on instances of the class. Instead, they're called on the class itself. These are often utility functions, such as functions to create or clone objects.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;static&lt;/strong&gt;&lt;/code&gt; 키워드는 클래스의 정적 메서드를 정의합니다. 정적 메소드는 클래스의 인스턴스에서 호출되지 않습니다. 대신, 그들은 수업 자체에 부름을 받았습니다. 이들은 종종 객체를 생성하거나 복제하는 기능과 같은 유틸리티 기능입니다.</target>
        </trans-unit>
        <trans-unit id="97131a8fde25db2419457b98595cec0e63b8e38a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;then()&lt;/strong&gt;&lt;/code&gt; method returns a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt;. It takes up to two arguments: callback functions for the success and failure cases of the &lt;code&gt;Promise&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;then()&lt;/strong&gt;&lt;/code&gt; 메소드는 반환 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Promise&quot;&gt; &lt;code&gt;Promise&lt;/code&gt; &lt;/a&gt; . &lt;code&gt;Promise&lt;/code&gt; 의 성공 및 실패 사례에 대한 콜백 함수에는 최대 두 개의 인수가 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="32b163d7592cd21a3cef3e0bbec84026237c2cbd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;throw()&lt;/strong&gt;&lt;/code&gt; method resumes the execution of a generator by throwing an error into it and returns an object with two properties &lt;code&gt;done&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;throw()&lt;/strong&gt;&lt;/code&gt; 메소드는 그것에 에러를 발생시켜 발전기의 실행을 재개 두 특성을 갖는 객체를 반환 &lt;code&gt;done&lt;/code&gt; 및 &lt;code&gt;value&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a27864056b05cb6d65d10b6fd4fc69ea0bfb69d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;toLocaleString()&lt;/strong&gt;&lt;/code&gt; method returns a string representing the elements of the array. The elements are converted to Strings using their &lt;code&gt;toLocaleString&lt;/code&gt; methods and these Strings are separated by a locale-specific String (such as a comma &amp;ldquo;,&amp;rdquo;).</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;toLocaleString()&lt;/strong&gt;&lt;/code&gt; 에있어서, 상기 배열의 요소를 나타내는 문자열을 반환한다. 요소는 &lt;code&gt;toLocaleString&lt;/code&gt; 메소드를 사용하여 문자열로 변환 되며 이러한 문자열은 로케일 특정 문자열 (예 : 쉼표 &quot;,&quot;)로 구분됩니다.</target>
        </trans-unit>
        <trans-unit id="b605bc8e35e3f59ed456cdbc1085ec83b2b02f6f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;toLocaleString()&lt;/strong&gt;&lt;/code&gt; method returns a string representing the elements of the typed array. The elements are converted to strings and are separated by a locale-specific string (such as a comma &amp;ldquo;,&amp;rdquo;). This method has the same algorithm as &lt;a href=&quot;../array/tolocalestring&quot;&gt;&lt;code&gt;Array.prototype.toLocaleString()&lt;/code&gt;&lt;/a&gt; and, as the typed array elements are numbers, the same algorithm as &lt;a href=&quot;../number/tolocalestring&quot;&gt;&lt;code&gt;Number.prototype.toLocaleString()&lt;/code&gt;&lt;/a&gt; applies for each element. &lt;em&gt;TypedArray&lt;/em&gt; is one of the &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;typed array types&lt;/a&gt; here.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;toLocaleString()&lt;/strong&gt;&lt;/code&gt; 메소드는, 입력 된 배열의 요소를 나타내는 문자열을 반환한다. 요소는 문자열로 변환되고 로케일 특정 문자열 (예 : 쉼표&amp;ldquo;,&amp;rdquo;)로 구분됩니다. 이 메서드는 &lt;a href=&quot;../array/tolocalestring&quot;&gt; &lt;code&gt;Array.prototype.toLocaleString()&lt;/code&gt; &lt;/a&gt; 과 동일한 알고리즘을 &lt;a href=&quot;../number/tolocalestring&quot;&gt; &lt;code&gt;Number.prototype.toLocaleString()&lt;/code&gt; &lt;/a&gt; 형식화 된 배열 요소가 숫자이므로 각 요소에 Number.prototype.toLocaleString () 과 동일한 알고리즘이 적용됩니다. &lt;em&gt;TypedArray&lt;/em&gt; 는 여기에서 &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;유형&lt;/a&gt; 이 지정된 배열 유형 중 하나입니다 .</target>
        </trans-unit>
        <trans-unit id="7dfd5ee925b0c99d73ec512ba8fa1ebd89f29c09" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;toLocaleString()&lt;/strong&gt;&lt;/code&gt; method returns a string representing the object. This method is meant to be overridden by derived objects for locale-specific purposes.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;toLocaleString()&lt;/strong&gt;&lt;/code&gt; 메서드는 개체를 나타내는 문자열을 반환합니다. 이 메서드는 로캘 별 목적으로 파생 된 개체로 재정의됩니다.</target>
        </trans-unit>
        <trans-unit id="91b928eb50588710e2a4597c5783c62b17ddd758" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;toString()&lt;/strong&gt;&lt;/code&gt; method returns a string representing the object.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;toString()&lt;/strong&gt;&lt;/code&gt; 메서드는 개체를 나타내는 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6e85c2a1af60ac5b65d1d94bc0fe001f9d669432" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;toString()&lt;/strong&gt;&lt;/code&gt; method returns a string representing the source code of the function.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;toString()&lt;/strong&gt;&lt;/code&gt; 메소드는 함수의 소스 코드를 나타내는 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="022795b56bb8cf198957356a9dac9f4f2481d4bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;toString()&lt;/strong&gt;&lt;/code&gt; method returns a string representing the specified &lt;a href=&quot;../error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;toString()&lt;/strong&gt;&lt;/code&gt; 메소드는 지정된 나타내는 문자열 반환 &lt;a href=&quot;../error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt; 개체를.</target>
        </trans-unit>
        <trans-unit id="7911e7b2a10371eaf4073ef2535ba2537d07e540" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;toString()&lt;/strong&gt;&lt;/code&gt; method returns a string representing the specified &lt;a href=&quot;../symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;toString()&lt;/strong&gt;&lt;/code&gt; 메소드는 지정된 나타내는 문자열 반환 &lt;a href=&quot;../symbol&quot;&gt; &lt;code&gt;Symbol&lt;/code&gt; &lt;/a&gt; 개체를.</target>
        </trans-unit>
        <trans-unit id="7b8623479f106befa5e18eb45cb1059e5f32bcb1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;toString()&lt;/strong&gt;&lt;/code&gt; method returns a string representing the specified Boolean object.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;toString()&lt;/strong&gt;&lt;/code&gt; 메서드는 지정된 Boolean 객체를 나타내는 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="5a04aaef31f20bb3cf4bdfb78b3cfe2b84ce61e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;toString()&lt;/strong&gt;&lt;/code&gt; method returns a string representing the specified array and its elements.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;toString()&lt;/strong&gt;&lt;/code&gt; 메소드는 지정된 배열의 요소를 나타내는 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="192703e31b3b7b413086f3a38c9cc3705e7c710a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;toString()&lt;/strong&gt;&lt;/code&gt; method returns a string representing the specified array and its elements. This method has the same algorithm as &lt;a href=&quot;../array/tostring&quot;&gt;&lt;code&gt;Array.prototype.toString()&lt;/code&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;em&gt;TypedArray&lt;/em&gt; is one of the &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;typed array types&lt;/a&gt; here.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;toString()&lt;/strong&gt;&lt;/code&gt; 메소드는 지정된 배열의 요소를 나타내는 문자열을 반환합니다. 이 메소드는 &lt;a href=&quot;../array/tostring&quot;&gt; &lt;code&gt;Array.prototype.toString()&lt;/code&gt; &lt;/a&gt; 과 동일한 알고리즘을 갖습니다 &lt;em&gt;. &lt;/em&gt;&lt;em&gt;TypedArray&lt;/em&gt; 는 여기에서 &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;유형&lt;/a&gt; 이 지정된 배열 유형 중 하나입니다 .</target>
        </trans-unit>
        <trans-unit id="d267261388589c501414274d6e9126947d38aba2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;uneval()&lt;/strong&gt;&lt;/code&gt; function creates a string representation of the source code of an Object.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;uneval()&lt;/strong&gt;&lt;/code&gt; 함수는 객체의 소스 코드의 스트링 표현을 생성한다.</target>
        </trans-unit>
        <trans-unit id="b926e52c01652669c02278301d217c157917d6e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;unshift()&lt;/strong&gt;&lt;/code&gt; method adds one or more elements to the beginning of an array and returns the new length of the array.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;unshift()&lt;/strong&gt;&lt;/code&gt; 메소드는 배열의 선두 요소를 추가하고 배열의 새로운 길이를 반환한다.</target>
        </trans-unit>
        <trans-unit id="499de83f7f41f334be396bc8f3ea1dfea79d7d14" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;unwatch()&lt;/strong&gt;&lt;/code&gt; method removes a watchpoint set with the &lt;a href=&quot;watch&quot;&gt;&lt;code&gt;watch()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;unwatch()&lt;/strong&gt;&lt;/code&gt; 메소드와 감시 점 세트 제거 &lt;a href=&quot;watch&quot;&gt; &lt;code&gt;watch()&lt;/code&gt; &lt;/a&gt; 메소드를.</target>
        </trans-unit>
        <trans-unit id="7e217ffdbfd7b09bd5b6b41d867eb4de145af8f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;valueOf()&lt;/strong&gt;&lt;/code&gt; method returns the primitive value of a &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;valueOf()&lt;/strong&gt;&lt;/code&gt; 메소드는 프리미티브의 반환 값 &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; 개체.</target>
        </trans-unit>
        <trans-unit id="ad7e757caa0d53a4a93724609133ec5424859830" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;valueOf()&lt;/strong&gt;&lt;/code&gt; method returns the primitive value of a Symbol object.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;valueOf()&lt;/strong&gt;&lt;/code&gt; 메소드는 심볼 객체의 프리미티브 값을 반환한다.</target>
        </trans-unit>
        <trans-unit id="c7ac2ff9d04658e4dfa1c74a21f139c1399cac29" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;values()&lt;/strong&gt;&lt;/code&gt; method returns a new &lt;code&gt;Iterator&lt;/code&gt; object that contains the values for each element in the &lt;code&gt;Set&lt;/code&gt; object in insertion order.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;values()&lt;/strong&gt;&lt;/code&gt; 메소드가 복귀 새로운 &lt;code&gt;Iterator&lt;/code&gt; 각 요소의 값을 포함하는 오브젝트 &lt;code&gt;Set&lt;/code&gt; 신청서의 개체.</target>
        </trans-unit>
        <trans-unit id="920978b0337a6e007b81c3f6fce745458e110e65" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;values()&lt;/strong&gt;&lt;/code&gt; method returns a new &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators&quot;&gt;Iterator&lt;/a&gt;&lt;/strong&gt; object that contains the values for each element in the &lt;code&gt;Map&lt;/code&gt; object in insertion order.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;values()&lt;/strong&gt;&lt;/code&gt; 메소드가 복귀 새로운 &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators&quot;&gt;반복자&lt;/a&gt;&lt;/strong&gt; 각 요소의 값을 포함하는 오브젝트 &lt;code&gt;Map&lt;/code&gt; 신청서의 개체.</target>
        </trans-unit>
        <trans-unit id="6ea39c43c18a974ed813a6094426dc4acb932dc3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;strong&gt;watch()&lt;/strong&gt;&lt;/code&gt; method watches for a property to be assigned a value and runs a function when that occurs.</source>
          <target state="translated">&lt;code&gt;&lt;strong&gt;watch()&lt;/strong&gt;&lt;/code&gt; 속성에 대한 방법 시계는 값이 할당하고가 발생하면 함수를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="283c12603649b3462865df7f0024166c551ecdb5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@@isConcatSpreadable&lt;/code&gt; symbol (&lt;code&gt;Symbol.isConcatSpreadable&lt;/code&gt;) can be defined as an own or inherited property and its value is a boolean. It can control behavior for arrays and array-like objects:</source>
          <target state="translated">&lt;code&gt;@@isConcatSpreadable&lt;/code&gt; 기호 ( &lt;code&gt;Symbol.isConcatSpreadable&lt;/code&gt; 은 )는 자신 또는 상속 속성으로 정의 할 수 있고, 그 값은 부울 값이다. 배열 및 배열 유사 객체의 동작을 제어 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bc65c6de076d42ba499770b56887d3eb47ca601c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@@unscopables&lt;/code&gt; symbol (&lt;code&gt;Symbol.unscopables&lt;/code&gt;) can be defined on any object to exclude property names from being exposed as lexical variables in with &lt;code&gt;&lt;a href=&quot;../../statements/with&quot;&gt;with&lt;/a&gt;&lt;/code&gt; environment bindings. Note that if using &lt;a href=&quot;../../strict_mode&quot;&gt;Strict mode&lt;/a&gt;, &lt;code&gt;with&lt;/code&gt; statements are not available and will likely also not need this symbol.</source>
          <target state="translated">&lt;code&gt;@@unscopables&lt;/code&gt; 심볼 ( &lt;code&gt;Symbol.unscopables&lt;/code&gt; 는 )와 사전에 변수로 노출되는 속성 명을 제외하는 모든 오브젝트에 대해 정의 될 수 &lt;code&gt;&lt;a href=&quot;../../statements/with&quot;&gt;with&lt;/a&gt;&lt;/code&gt; 환경 바인딩. 사용하는 경우 참고 &lt;a href=&quot;../../strict_mode&quot;&gt;엄격한 모드&lt;/a&gt; , &lt;code&gt;with&lt;/code&gt; 문을 사용할 수 없습니다 또한이 기호를 필요로하지 전망이다.</target>
        </trans-unit>
        <trans-unit id="d440604706f8d64b5747fd6b1564ef1153563ad6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Array&lt;/code&gt; constructor's length property whose value is 1.</source>
          <target state="translated">&lt;code&gt;Array&lt;/code&gt; 값이 생성자의 길이 속성은 1입니다.</target>
        </trans-unit>
        <trans-unit id="f0b8901e6f9fc11f606262ccc7196ea062692d5e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ArrayBuffer.prototype&lt;/code&gt; property represents the prototype for the &lt;a href=&quot;../arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;ArrayBuffer.prototype&lt;/code&gt; 의 속성에 대한 프로토 타입을 나타내는 &lt;a href=&quot;../arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; 의&lt;/a&gt; 개체를.</target>
        </trans-unit>
        <trans-unit id="16e25d8346c656e25fff7c636bb66557bf0a41ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ArrayBuffer.transfer()&lt;/code&gt; method allows you to grow and detach &lt;code&gt;ArrayBuffer&lt;/code&gt; objects. The ability to grow an &lt;code&gt;ArrayBuffer&lt;/code&gt; without copying has the advantage of being much faster for large buffers (similar to realloc). The ability to detach an &lt;code&gt;ArrayBuffer&lt;/code&gt; gives the developer explicit control over when the underlying memory is released. This avoids having to drop all references and wait for garbage collection.</source>
          <target state="translated">&lt;code&gt;ArrayBuffer.transfer()&lt;/code&gt; 메서드를 사용하면 확장 할 수 있으며 분리 &lt;code&gt;ArrayBuffer&lt;/code&gt; 는 객체. 복사하지 않고 &lt;code&gt;ArrayBuffer&lt;/code&gt; 를 확장하는 기능 은 큰 버퍼 (realloc과 유사)의 경우 훨씬 더 빠르다는 장점이 있습니다. &lt;code&gt;ArrayBuffer&lt;/code&gt; 를 분리하는 기능 은 개발자에게 기본 메모리가 해제되는 시점을 명시 적으로 제어 할 수있게합니다. 이렇게하면 모든 참조를 삭제하고 가비지 콜렉션을 기다릴 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="c7798863e6e21e4386b76ed95ddae500d73c0f05" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ArrayBuffer&lt;/code&gt; constructor creates a new &lt;code&gt;ArrayBuffer&lt;/code&gt; of the given length in bytes.</source>
          <target state="translated">&lt;code&gt;ArrayBuffer&lt;/code&gt; 의 생성자는 새로운 생성 &lt;code&gt;ArrayBuffer&lt;/code&gt; 바이트의 주어진 길이를.</target>
        </trans-unit>
        <trans-unit id="7ef2a45ac041790c4ea1d3aefd4331e7987f9343" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ArrayBuffer&lt;/code&gt; constructor's length property whose value is 1.</source>
          <target state="translated">&lt;code&gt;ArrayBuffer&lt;/code&gt; 의 값이 생성자의 길이 속성은 1입니다.</target>
        </trans-unit>
        <trans-unit id="6b1774c4b4c02e44b8e0aac74afed99897b9b23a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ArrayBuffer&lt;/code&gt; object is used to represent a generic, fixed-length raw binary data buffer. You cannot directly manipulate the contents of an &lt;code&gt;ArrayBuffer&lt;/code&gt;; instead, you create one of the &lt;a href=&quot;typedarray&quot;&gt;typed array objects&lt;/a&gt; or a &lt;a href=&quot;dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt; object which represents the buffer in a specific format, and use that to read and write the contents of the buffer.</source>
          <target state="translated">&lt;code&gt;ArrayBuffer&lt;/code&gt; 의 목적은 일반 고정 길이 원시 이진 데이터 버퍼를 나타내는 데 사용된다. &lt;code&gt;ArrayBuffer&lt;/code&gt; 의 내용을 직접 조작 할 수는 없습니다 . 대신, &lt;a href=&quot;typedarray&quot;&gt;형식&lt;/a&gt; 이 지정된 배열 객체 중 하나 또는 특정 형식으로 버퍼를 나타내는 &lt;a href=&quot;dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; &lt;/a&gt; 객체를 만들고이를 사용하여 버퍼의 내용을 읽고 씁니다.</target>
        </trans-unit>
        <trans-unit id="dd55341d100e7a3a053ee01170efee3a7d53d666" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AsyncFunction&lt;/code&gt; constructor's length property whose value is 1.</source>
          <target state="translated">&lt;code&gt;AsyncFunction&lt;/code&gt; 의 값이 생성자의 길이 속성은 1입니다.</target>
        </trans-unit>
        <trans-unit id="fa46dc694c81367a99ea8f930dd75cbd6894fcbe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Atomics&lt;/code&gt; object provides atomic operations as static methods. They are used with &lt;a href=&quot;sharedarraybuffer&quot;&gt;&lt;code&gt;SharedArrayBuffer&lt;/code&gt;&lt;/a&gt; objects.</source>
          <target state="translated">&lt;code&gt;Atomics&lt;/code&gt; 목적은 정적 방법으로 원자 연산을 제공한다. &lt;a href=&quot;sharedarraybuffer&quot;&gt; &lt;code&gt;SharedArrayBuffer&lt;/code&gt; &lt;/a&gt; 객체 와 함께 사용 됩니다.</target>
        </trans-unit>
        <trans-unit id="a7e596b718f486754c0b60ce4ad8e194715210d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Boolean.prototype&lt;/code&gt; property represents the prototype for the &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">&lt;code&gt;Boolean.prototype&lt;/code&gt; 의 속성에 대한 프로토 타입을 나타내는 &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; 생성자를.</target>
        </trans-unit>
        <trans-unit id="f808eb0c2990139c56c9c9646eb837d890e99678" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Boolean&lt;/code&gt; object is an object wrapper for a boolean value.</source>
          <target state="translated">&lt;code&gt;Boolean&lt;/code&gt; 목적은 부울 값 객체 래퍼이다.</target>
        </trans-unit>
        <trans-unit id="eb4fe7936e991cf8cac6bfe1ff9a3583f860269a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DataView&lt;/code&gt; view provides a low-level interface for reading and writing multiple number types in a binary &lt;a href=&quot;arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt;, without having to care about the platform's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Endianness&quot;&gt;endianness&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;DataView&lt;/code&gt; 를의 보기는 읽기와 바이너리에 여러 개의 번호 유형을 작성하기위한 낮은 수준의 인터페이스를 제공 &lt;a href=&quot;arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; 을&lt;/a&gt; 플랫폼의 걱정하지 않고, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Endianness&quot;&gt;엔디 언&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ff166af089f3634c010f854cade55b13339404e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Date.UTC()&lt;/code&gt; method accepts the same parameters as the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; constructor, but treats them as UTC. It returns the number of milliseconds since January 1, 1970, 00:00:00 UTC.</source>
          <target state="translated">&lt;code&gt;Date.UTC()&lt;/code&gt; 메소드는 동일한 같은 매개 변수를 받아들이는 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; UTC로 생성자 만 취급을. 1970 년 1 월 1 일 00:00:00 UTC 이후의 밀리 초 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="94ea236eb60b2a87910dba439ce76e913ed81428" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Date.now()&lt;/code&gt; method returns the number of milliseconds elapsed since January 1, 1970 00:00:00 UTC.</source>
          <target state="translated">&lt;code&gt;Date.now()&lt;/code&gt; 메소드가 반환 (밀리 초) 1970 년 1 월 1 일 0시 0 분 0 초 (UTC)부터 경과.</target>
        </trans-unit>
        <trans-unit id="2fd70be910414d05682135739f98ad747175718f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Date.parse()&lt;/code&gt; method parses a string representation of a date, and returns the number of milliseconds since January 1, 1970, 00:00:00 UTC or &lt;code&gt;NaN&lt;/code&gt; if the string is unrecognized or, in some cases, contains illegal date values (e.g. 2015-02-31).</source>
          <target state="translated">&lt;code&gt;Date.parse()&lt;/code&gt; 메서드는 날짜의 문자열 표현을 구문 분석하고, 1970 년 1 월 1 일 이후의 밀리 초 수를 반환 00:00:00 UTC로 &lt;code&gt;NaN&lt;/code&gt; 의 문자열이 인식 할 수없는 경우, 또는, 어떤 경우에는, 불법 날짜 값을 포함 (예 : 2015-02-31).</target>
        </trans-unit>
        <trans-unit id="64bc06f8e96147763877ef296f66c5ad039e983e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Date.prototype&lt;/code&gt; property represents the prototype for the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">&lt;code&gt;Date.prototype&lt;/code&gt; 하기의 속성에 대한 프로토 타입을 나타내는 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 생성자를.</target>
        </trans-unit>
        <trans-unit id="ef55f178e7909f6ce70b17d6b7c9f73f26fc56c1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EPSILON&lt;/code&gt; property has a value of approximately &lt;code&gt;2.2204460492503130808472633361816E-16&lt;/code&gt;, or &lt;code&gt;2&lt;sup&gt;-52&lt;/sup&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;EPSILON&lt;/code&gt; 의 속성 약 값 갖는다 &lt;code&gt;2.2204460492503130808472633361816E-16&lt;/code&gt; , 또는 &lt;code&gt;2&lt;sup&gt;-52&lt;/sup&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7931f45154020c0f6a612370bd2020e49a7038ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Error&lt;/code&gt; constructor creates an error object. Instances of &lt;code&gt;Error&lt;/code&gt; objects are thrown when runtime errors occur. The &lt;code&gt;Error&lt;/code&gt; object can also be used as a base object for user-defined exceptions. See below for standard built-in error types.</source>
          <target state="translated">&lt;code&gt;Error&lt;/code&gt; 생성자는 오류 개체를 만듭니다. 런타임 오류가 발생하면 &lt;code&gt;Error&lt;/code&gt; 객체의 인스턴스 가 발생합니다. &lt;code&gt;Error&lt;/code&gt; 객체는 사용자 정의 예외에 대한 기본 객체로 사용할 수 있습니다. 표준 내장 오류 유형은 아래를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="af6eaa4eee0613c64cc6fc28b3637cc80c1af151" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EvalError&lt;/code&gt; object indicates an error regarding the global &lt;a href=&quot;eval&quot;&gt;&lt;code&gt;eval()&lt;/code&gt;&lt;/a&gt; function. This exception is not thrown by JavaScript anymore, however the &lt;code&gt;EvalError&lt;/code&gt; object remains for compatibility.</source>
          <target state="translated">&lt;code&gt;EvalError&lt;/code&gt; 의 목적은 전역 대한 오류를 나타내는 &lt;a href=&quot;eval&quot;&gt; &lt;code&gt;eval()&lt;/code&gt; &lt;/a&gt; 함수. 이 예외는 더 이상 JavaScript에서 발생하지 않지만 &lt;code&gt;EvalError&lt;/code&gt; 객체는 호환성을 위해 남아 있습니다.</target>
        </trans-unit>
        <trans-unit id="ed981ea7fa087278317dd34d4188d2ef63c76871" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Float32Array&lt;/code&gt; typed array represents an array of 32-bit floating point numbers (corresponding to the C &lt;code&gt;float&lt;/code&gt; data type) in the platform byte order. If control over byte order is needed, use &lt;a href=&quot;dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt; instead. The contents are initialized to &lt;code&gt;0&lt;/code&gt;. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</source>
          <target state="translated">&lt;code&gt;Float32Array&lt;/code&gt; 는 어레이 (는 C에 대응하는 32 비트 부동 소수점 수의 어레이 나타내는 입력 &lt;code&gt;float&lt;/code&gt; 플랫폼 바이트 순서 데이터 형식). 바이트 순서를 제어해야하는 경우 &lt;a href=&quot;dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; 를&lt;/a&gt; 대신 사용하십시오. 내용은 &lt;code&gt;0&lt;/code&gt; 으로 초기화됩니다 . 일단 설정되면 객체의 메서드를 사용하거나 표준 배열 인덱스 구문을 사용하여 (즉, 대괄호 표기법을 사용하여) 배열의 요소를 참조 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d6af88321151d21a75dde1d9456dd53c65f47509" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Float64Array&lt;/code&gt; typed array represents an array of 64-bit floating point numbers (corresponding to the C &lt;code&gt;double&lt;/code&gt; data type) in the platform byte order. If control over byte order is needed, use &lt;a href=&quot;dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt; instead. The contents are initialized to &lt;code&gt;0&lt;/code&gt;. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</source>
          <target state="translated">&lt;code&gt;Float64Array&lt;/code&gt; 는 어레이 64 비트 부동 소수점 수의 어레이 (는 C에 대응하는 입력 나타내는 &lt;code&gt;double&lt;/code&gt; 플랫폼 바이트 순서 데이터 형식). 바이트 순서를 제어해야하는 경우 &lt;a href=&quot;dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; 를&lt;/a&gt; 대신 사용하십시오. 내용은 &lt;code&gt;0&lt;/code&gt; 으로 초기화됩니다 . 일단 설정되면 객체의 메서드를 사용하거나 표준 배열 인덱스 구문을 사용하여 (즉, 대괄호 표기법을 사용하여) 배열의 요소를 참조 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2e2a9b42d0d50788b48d5fa46232bbfae15ea093" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Function&lt;/code&gt; constructor</source>
          <target state="translated">&lt;code&gt;Function&lt;/code&gt; 생성자</target>
        </trans-unit>
        <trans-unit id="7c44cf1deb778cfc6fb4fb3c2c8717c2a3303fef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Function&lt;/code&gt; creates a new &lt;code&gt;Function&lt;/code&gt; object. Calling the constructor directly can create functions dynamically, but suffers from security and similar (but far less significant) performance issues to &lt;a href=&quot;eval&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt;. However, unlike eval, the Function constructor creates functions which execute in the global scope only.</source>
          <target state="translated">&lt;code&gt;Function&lt;/code&gt; 새로운 생성 &lt;code&gt;Function&lt;/code&gt; 개체를. 생성자를 직접 호출하면 함수가 동적으로 생성 될 수 있지만 보안 및 &lt;a href=&quot;eval&quot;&gt; &lt;code&gt;eval&lt;/code&gt; &lt;/a&gt; 과 유사한 (그러나 훨씬 덜 중요한) 성능 문제가 발생합니다 . 그러나 eval과 달리 Function 생성자는 전역 범위에서만 실행되는 함수를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="32ec1baff187da5dbe10927d09b669f9f1adfa1c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GeneratorFunction&lt;/code&gt; constructor</source>
          <target state="translated">&lt;code&gt;GeneratorFunction&lt;/code&gt; 의 생성자</target>
        </trans-unit>
        <trans-unit id="59abf0f6e298917eba3d8ef1a0bff1e34e283128" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GeneratorFunction&lt;/code&gt; constructor's length property whose value is 1.</source>
          <target state="translated">&lt;code&gt;GeneratorFunction&lt;/code&gt; 의 값이 생성자의 길이 속성은 1입니다.</target>
        </trans-unit>
        <trans-unit id="87a8e025058f3fe8d553a9626cd39169afab5b31" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GeneratorFunction&lt;/code&gt; creates a new &lt;a href=&quot;../statements/function*&quot;&gt;&lt;code&gt;generator function&lt;/code&gt;&lt;/a&gt; object. In JavaScript every generator function is actually a &lt;code&gt;GeneratorFunction&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;GeneratorFunction&lt;/code&gt; 는 새로운 생성 &lt;a href=&quot;../statements/function*&quot;&gt; &lt;code&gt;generator function&lt;/code&gt; &lt;/a&gt; 개체. JavaScript에서 모든 생성기 함수는 실제로 &lt;code&gt;GeneratorFunction&lt;/code&gt; 객체입니다.</target>
        </trans-unit>
        <trans-unit id="28ae646bea19e4d833aab812af7d3f0537a33cb0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Int16Array&lt;/code&gt; typed array represents an array of twos-complement 16-bit signed integers in the platform byte order. If control over byte order is needed, use &lt;a href=&quot;dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt; instead. The contents are initialized to &lt;code&gt;0&lt;/code&gt;. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</source>
          <target state="translated">&lt;code&gt;Int16Array&lt;/code&gt; 는 배열 플랫폼 바이트 순서의 보수 16 비트 부호있는 정수의 배열을 나타냅니다 입력했습니다. 바이트 순서를 제어해야하는 경우 &lt;a href=&quot;dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; 를&lt;/a&gt; 대신 사용하십시오. 내용은 &lt;code&gt;0&lt;/code&gt; 으로 초기화됩니다 . 일단 설정되면 객체의 메서드를 사용하거나 표준 배열 인덱스 구문을 사용하여 (즉, 대괄호 표기법을 사용하여) 배열의 요소를 참조 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="325065478761dec46c8e43c1bb706efac29c0299" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Int32Array&lt;/code&gt; typed array represents an array of twos-complement 32-bit signed integers in the platform byte order. If control over byte order is needed, use &lt;a href=&quot;dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt; instead. The contents are initialized to &lt;code&gt;0&lt;/code&gt;. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</source>
          <target state="translated">&lt;code&gt;Int32Array&lt;/code&gt; 는 어레이 플랫폼 바이트 순서의 보수 32 비트 부호있는 정수 배열을 나타내는 입력. 바이트 순서를 제어해야하는 경우 &lt;a href=&quot;dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; 를&lt;/a&gt; 대신 사용하십시오. 내용은 &lt;code&gt;0&lt;/code&gt; 으로 초기화됩니다 . 일단 설정되면 객체의 메서드를 사용하거나 표준 배열 인덱스 구문을 사용하여 (즉, 대괄호 표기법을 사용하여) 배열의 요소를 참조 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="891fa823bae7aa088eb1194224b013cf774a6a47" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Int8Array&lt;/code&gt; typed array represents an array of twos-complement 8-bit signed integers. The contents are initialized to &lt;code&gt;0&lt;/code&gt;. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</source>
          <target state="translated">&lt;code&gt;Int8Array&lt;/code&gt; 는 배열의 보수 8 비트 부호있는 정수의 배열을 나타냅니다 입력했습니다. 내용은 &lt;code&gt;0&lt;/code&gt; 으로 초기화됩니다 . 일단 설정되면 객체의 메서드를 사용하거나 표준 배열 인덱스 구문을 사용하여 (즉, 대괄호 표기법을 사용하여) 배열의 요소를 참조 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="af81d2d38d363ace398fbc1e421544179af912eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.Collator.prototype.compare&lt;/code&gt; property returns a function that compares two strings according to the sort order of this &lt;a href=&quot;../collator&quot;&gt;&lt;code&gt;Collator&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;Intl.Collator.prototype.compare&lt;/code&gt; 의 속성이 정렬 순서에 따른 두 문자열을 비교하는 함수 반환 &lt;a href=&quot;../collator&quot;&gt; &lt;code&gt;Collator&lt;/code&gt; &lt;/a&gt; 개체.</target>
        </trans-unit>
        <trans-unit id="272a6c3a7d60877b1c869914ecf7c277bb5a3af7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.Collator.prototype.resolvedOptions()&lt;/code&gt; method returns a new object with properties reflecting the locale and collation options computed during initialization of this &lt;a href=&quot;../collator&quot;&gt;&lt;code&gt;Collator&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;Intl.Collator.prototype.resolvedOptions()&lt;/code&gt; 메서드가 반환이 초기화시 계산 된 로케일 및 정렬 옵션을 반영하는 특성을 가진 새로운 객체 &lt;a href=&quot;../collator&quot;&gt; &lt;code&gt;Collator&lt;/code&gt; &lt;/a&gt; 객체를.</target>
        </trans-unit>
        <trans-unit id="ffd097940ae82397c8bf3f2f5237f8e029da868c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.Collator.prototype&lt;/code&gt; property represents the prototype object for the &lt;a href=&quot;../collator&quot;&gt;&lt;code&gt;Intl.Collator&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">&lt;code&gt;Intl.Collator.prototype&lt;/code&gt; 의 속성에 대한 프로토 타입 객체 나타내는 &lt;a href=&quot;../collator&quot;&gt; &lt;code&gt;Intl.Collator&lt;/code&gt; 의&lt;/a&gt; 생성자를.</target>
        </trans-unit>
        <trans-unit id="819a653bd9f195fc3bcc00a8e0b90359c1639beb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.Collator.supportedLocalesOf()&lt;/code&gt; method returns an array containing those of the provided locales that are supported in collation without having to fall back to the runtime's default locale.</source>
          <target state="translated">&lt;code&gt;Intl.Collator.supportedLocalesOf()&lt;/code&gt; 메소드는 런타임의 기본 로케일로 후퇴하지 않고 조합에서 지원되는 제공된 로케일의 사람들을 포함하는 배열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="af6623b71c624d05792333d55bb545b7d54f9830" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.Collator&lt;/code&gt; object has the following properties and methods:</source>
          <target state="translated">&lt;code&gt;Intl.Collator&lt;/code&gt; 의 객체에는 다음과 같은 속성과 메소드가 있습니다</target>
        </trans-unit>
        <trans-unit id="80111b8a70cd58e3c8afeff0e4043d4fff18da6f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.Collator&lt;/code&gt; object is a constructor for collators, objects that enable language sensitive string comparison.</source>
          <target state="translated">&lt;code&gt;Intl.Collator&lt;/code&gt; 의 목적은 코레 이타 언어 인식 문자열 비교를 가능 객체의 생성자입니다.</target>
        </trans-unit>
        <trans-unit id="3d4e6137125f5916ae76205d08a1ab73a524c339" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.DateTimeFormat.prototype.format&lt;/code&gt; property returns a getter function that formats a date according to the locale and formatting options of this &lt;a href=&quot;../datetimeformat&quot;&gt;&lt;code&gt;Intl.DateTimeFormat&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;Intl.DateTimeFormat.prototype.format&lt;/code&gt; 의 속성은 로케일이의 서식 옵션에 따라 날짜를 포맷하는 getter 함수 반환 &lt;a href=&quot;../datetimeformat&quot;&gt; &lt;code&gt;Intl.DateTimeFormat&lt;/code&gt; 의&lt;/a&gt; 개체를.</target>
        </trans-unit>
        <trans-unit id="827b13c5aa9c4dec3eab430890de485d22a04892" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.DateTimeFormat.prototype.formatToParts()&lt;/code&gt; method allows locale-aware formatting of strings produced by &lt;code&gt;DateTimeFormat&lt;/code&gt; formatters.</source>
          <target state="translated">&lt;code&gt;Intl.DateTimeFormat.prototype.formatToParts()&lt;/code&gt; 방법에 의해 생성 된 문자열 로케일 인식 포맷 허용 &lt;code&gt;DateTimeFormat&lt;/code&gt; 의 포맷터.</target>
        </trans-unit>
        <trans-unit id="b66b9447f5c9239d68ec7f4ac962b72f2a9766fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.DateTimeFormat.prototype.resolvedOptions()&lt;/code&gt; method returns a new object with properties reflecting the locale and date and time formatting options computed during initialization of this &lt;a href=&quot;../datetimeformat&quot;&gt;&lt;code&gt;DateTimeFormat&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;Intl.DateTimeFormat.prototype.resolvedOptions()&lt;/code&gt; 메서드가 반환이 초기화시 계산 옵션 서식 로케일 및 날짜와 시간을 반영하는 특성을 가진 새로운 객체 &lt;a href=&quot;../datetimeformat&quot;&gt; &lt;code&gt;DateTimeFormat&lt;/code&gt; 의&lt;/a&gt; 개체를.</target>
        </trans-unit>
        <trans-unit id="ce32b4be32d6b141f0a059bea36eaf6cb30b27de" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.DateTimeFormat.prototype&lt;/code&gt; property represents the prototype object for the &lt;a href=&quot;../datetimeformat&quot;&gt;&lt;code&gt;Intl.DateTimeFormat&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">&lt;code&gt;Intl.DateTimeFormat.prototype&lt;/code&gt; 의 속성에 대한 프로토 타입 객체 나타내는 &lt;a href=&quot;../datetimeformat&quot;&gt; &lt;code&gt;Intl.DateTimeFormat&lt;/code&gt; 의&lt;/a&gt; 생성자를.</target>
        </trans-unit>
        <trans-unit id="45f08d1a87a417d8a3d5b0c4ec978877b18473ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.DateTimeFormat.supportedLocalesOf()&lt;/code&gt; method returns an array containing those of the provided locales that are supported in date and time formatting without having to fall back to the runtime's default locale.</source>
          <target state="translated">&lt;code&gt;Intl.DateTimeFormat.supportedLocalesOf()&lt;/code&gt; 메소드가 반환하지 않고 날짜와 포맷 시간에서 지원되는 제공된 로케일의 사람들을 포함하는 배열은 런타임의 기본 로케일로 다시 가을.</target>
        </trans-unit>
        <trans-unit id="f66ae3a8ee78181e3f3a1efcf6577955630e42a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.DateTimeFormat&lt;/code&gt; object is a constructor for objects that enable language-sensitive date and time formatting.</source>
          <target state="translated">&lt;code&gt;Intl.DateTimeFormat&lt;/code&gt; 의 목적은 언어에 민감한 날짜와 시간 포맷을 가능 객체의 생성자입니다.</target>
        </trans-unit>
        <trans-unit id="5afc45e19c4e91c235fc91239ceb165d6d29dbf4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.NumberFormat.prototype.format&lt;/code&gt; property returns a getter function that formats a number according to the locale and formatting options of this &lt;a href=&quot;../numberformat&quot;&gt;&lt;code&gt;NumberFormat&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;Intl.NumberFormat.prototype.format&lt;/code&gt; 의 속성은 로케일이의 서식 옵션에 따라 숫자를 포맷하는 getter 함수를 반환 &lt;a href=&quot;../numberformat&quot;&gt; &lt;code&gt;NumberFormat&lt;/code&gt; &lt;/a&gt; 객체를.</target>
        </trans-unit>
        <trans-unit id="e49d7b85f01ac1ff877966dad32b47f71e8591df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.NumberFormat.prototype.resolvedOptions()&lt;/code&gt; method returns a new object with properties reflecting the locale and number formatting options computed during initialization of this &lt;a href=&quot;../numberformat&quot;&gt;&lt;code&gt;NumberFormat&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;Intl.NumberFormat.prototype.resolvedOptions()&lt;/code&gt; 메소드가 복귀 로케일 반사 특성이 초기화시 계산 된 수 포맷 옵션 새로운 객체 &lt;a href=&quot;../numberformat&quot;&gt; &lt;code&gt;NumberFormat&lt;/code&gt; &lt;/a&gt; 개체.</target>
        </trans-unit>
        <trans-unit id="ec31c442949adbd76df6c61725256709aa923321" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.NumberFormat.prototype&lt;/code&gt; property represents the prototype object for the &lt;a href=&quot;../numberformat&quot;&gt;&lt;code&gt;Intl.NumberFormat&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">&lt;code&gt;Intl.NumberFormat.prototype&lt;/code&gt; 의 속성에 대한 프로토 타입 객체 나타내는 &lt;a href=&quot;../numberformat&quot;&gt; &lt;code&gt;Intl.NumberFormat&lt;/code&gt; 의&lt;/a&gt; 생성자를.</target>
        </trans-unit>
        <trans-unit id="f751d24db3a576bc70d1c2a8c92ca22cbf0ab486" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.NumberFormat.supportedLocalesOf()&lt;/code&gt; method returns an array containing those of the provided locales that are supported in number formatting without having to fall back to the runtime's default locale.</source>
          <target state="translated">&lt;code&gt;Intl.NumberFormat.supportedLocalesOf()&lt;/code&gt; 메소드가 반환하지 않고 서식 숫자에서 지원되는 제공된 로케일의 사람들을 포함하는 배열은 런타임의 기본 로케일로 다시 가을.</target>
        </trans-unit>
        <trans-unit id="557fde9f4a9efb876f4eac88cf3301ed491abed9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.NumberFormat&lt;/code&gt; object is a constructor for objects that enable language sensitive number formatting.</source>
          <target state="translated">&lt;code&gt;Intl.NumberFormat&lt;/code&gt; 의 객체는 언어 인식 숫자 서식을 가능 객체의 생성자입니다.</target>
        </trans-unit>
        <trans-unit id="fbf01e65cc876868c83e46a1fc778c101bb65165" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.Numberformat.prototype.formatToParts()&lt;/code&gt; method allows locale-aware formatting of strings produced by &lt;code&gt;NumberTimeFormat&lt;/code&gt; formatters.</source>
          <target state="translated">&lt;code&gt;Intl.Numberformat.prototype.formatToParts()&lt;/code&gt; 메소드에 의해 생성 된 문자열 로케일 인식 포맷 허용 &lt;code&gt;NumberTimeFormat&lt;/code&gt; 의 포맷터.</target>
        </trans-unit>
        <trans-unit id="150cf40025fc4f735dfaaac10b628060aa4c4195" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.PluralRules.prototype.resolvedOptions()&lt;/code&gt; method returns a new object with properties reflecting the locale and plural formatting options computed during initialization of this &lt;a href=&quot;../pluralrules&quot;&gt;&lt;code&gt;PluralRules&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;Intl.PluralRules.prototype.resolvedOptions()&lt;/code&gt; 메소드가 복귀 로케일 반사 특성을 갖는 새로운 객체 복수이 초기화시 계산 옵션 포맷 &lt;a href=&quot;../pluralrules&quot;&gt; &lt;code&gt;PluralRules&lt;/code&gt; 의&lt;/a&gt; 개체.</target>
        </trans-unit>
        <trans-unit id="f841b3bcc9465a5f44c5f253a0e7d0f81550121f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.PluralRules.prototype.select&lt;/code&gt; method returns a String indicating which plural rule to use for locale-aware formatting.</source>
          <target state="translated">&lt;code&gt;Intl.PluralRules.prototype.select&lt;/code&gt; 의 방법은 문자열 로케일 인식 형식에 사용할 복수의 규칙을 나타내는 반환합니다.</target>
        </trans-unit>
        <trans-unit id="83257ff29ba302a990881c5f4e65242dd823bf9c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.PluralRules.prototype&lt;/code&gt; property represents the prototype object for the &lt;a href=&quot;../pluralrules&quot;&gt;&lt;code&gt;Intl.PluralRules&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">&lt;code&gt;Intl.PluralRules.prototype&lt;/code&gt; 의 속성에 대한 프로토 타입 객체 나타내는 &lt;a href=&quot;../pluralrules&quot;&gt; &lt;code&gt;Intl.PluralRules&lt;/code&gt; 의&lt;/a&gt; 생성자를.</target>
        </trans-unit>
        <trans-unit id="f7d51efcb1f98ad73709b9a4f50ddcd7b465e033" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.PluralRules.supportedLocalesOf()&lt;/code&gt; method returns an array containing those of the provided locales that are supported in plural formatting without having to fall back to the runtime's default locale.</source>
          <target state="translated">&lt;code&gt;Intl.PluralRules.supportedLocalesOf()&lt;/code&gt; 메소드가 반환하지 않고 복수의 형식에서 지원되는 제공된 로케일의 사람들을 포함하는 배열은 런타임의 기본 로케일로 다시 가을.</target>
        </trans-unit>
        <trans-unit id="de59eaa070333ae43b6eb54897dd9ddfc59086a7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.PluralRules&lt;/code&gt; object is a constructor for objects that enable plural sensitive formatting and plural language rules.</source>
          <target state="translated">&lt;code&gt;Intl.PluralRules&lt;/code&gt; 의 목적은 복수의 민감한 서식 및 복수의 언어 규칙을 사용하도록 객체의 생성자입니다.</target>
        </trans-unit>
        <trans-unit id="3882d167c04f285a222b74818008c457eaf560eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl.getCanonicalLocales()&lt;/code&gt; method returns an array containing the canonical locale names. Duplicates will be omitted and elements will be validated as structurally valid language tags.</source>
          <target state="translated">&lt;code&gt;Intl.getCanonicalLocales()&lt;/code&gt; 메소드는 표준 장소 이름을 포함하는 배열을 반환한다. 중복은 생략되고 요소는 구조적으로 유효한 언어 태그로 확인됩니다.</target>
        </trans-unit>
        <trans-unit id="9883dc65c62c7940615fb93418b9103125f683b1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Intl&lt;/code&gt; object is the namespace for the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, and date and time formatting. The constructors for &lt;a href=&quot;collator&quot;&gt;&lt;code&gt;Collator&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;numberformat&quot;&gt;&lt;code&gt;NumberFormat&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;datetimeformat&quot;&gt;&lt;code&gt;DateTimeFormat&lt;/code&gt;&lt;/a&gt; objects are properties of the &lt;code&gt;Intl&lt;/code&gt; object. This page documents these properties as well as functionality common to the internationalization constructors and other language sensitive functions.</source>
          <target state="translated">&lt;code&gt;Intl&lt;/code&gt; 객체는 ECMAScript를 국제화 번호가 서식 언어 인식 문자열 비교를 제공하는 API, 그리고 날짜와 시간 포맷에 대한 네임 스페이스입니다. &lt;a href=&quot;collator&quot;&gt; &lt;code&gt;Collator&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;numberformat&quot;&gt; &lt;code&gt;NumberFormat&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;datetimeformat&quot;&gt; &lt;code&gt;DateTimeFormat&lt;/code&gt; &lt;/a&gt; 객체 의 생성자 는 &lt;code&gt;Intl&lt;/code&gt; 객체의 속성입니다 . 이 페이지에는 이러한 속성과 국제화 생성자 및 기타 언어 구분 함수에 공통적 인 기능이 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="89afb46cfc82dfbbdb5c7ec457655306ed4715c0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JSON.parse()&lt;/code&gt; method parses a JSON string, constructing the JavaScript value or object described by the string. An optional &lt;strong&gt;reviver&lt;/strong&gt; function can be provided to perform a transformation on the resulting object before it is returned.</source>
          <target state="translated">&lt;code&gt;JSON.parse()&lt;/code&gt; 메소드는 JSON 문자열, 문자열로 기술 된 스크립트 값 또는 개체를 구성를 파싱한다. 결과 객체가 반환되기 전에 변환을 수행하기 위해 선택적 &lt;strong&gt;reviver&lt;/strong&gt; 함수를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b48f840a4d5a62a5f6b73ac28487ab68c361cab1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JSON.stringify()&lt;/code&gt; method converts a JavaScript object or value to a JSON string, optionally replacing values if a replacer function is specified or optionally including only the specified properties if a replacer array is specified.</source>
          <target state="translated">&lt;code&gt;JSON.stringify()&lt;/code&gt; 메소드는 대체물 함수가 지정된 경우 임의의 값을 교체하거나 대체물 어레이가 지정된 경우에만 임의로 지정된 특성을 포함한 JSON 열을 자바 스크립트 객체 또는 값을 변환한다.</target>
        </trans-unit>
        <trans-unit id="282dab3b27dcf6633f10d03d043d31cb8ce13e25" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JSON&lt;/code&gt; object contains methods for parsing &lt;a href=&quot;https://json.org/&quot;&gt;JavaScript Object Notation&lt;/a&gt; (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/JSON&quot;&gt;JSON&lt;/a&gt;) and converting values to JSON. It can't be called or constructed, and aside from its two method properties, it has no interesting functionality of its own.</source>
          <target state="translated">&lt;code&gt;JSON&lt;/code&gt; 의 목적은 분석 방법이 포함 &lt;a href=&quot;https://json.org/&quot;&gt;JavaScript 객체 노테이션&lt;/a&gt; ( &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/JSON&quot;&gt;JSON을&lt;/a&gt; ) 및 JSON 값을 변환한다. 호출하거나 구성 할 수 없으며 두 가지 메서드 속성 외에는 고유 한 기능이 없습니다.</target>
        </trans-unit>
        <trans-unit id="2e129086723a303edc098859842bdfa440c65192" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MAX_SAFE_INTEGER&lt;/code&gt; constant has a value of &lt;code&gt;9007199254740991&lt;/code&gt; (9,007,199,254,740,991 or ~9 quadrillion). The reasoning behind that number is that JavaScript uses &lt;a href=&quot;http://en.wikipedia.org/wiki/Double_precision_floating-point_format&quot;&gt;double-precision floating-point format numbers&lt;/a&gt; as specified in &lt;a href=&quot;http://en.wikipedia.org/wiki/IEEE_floating_point&quot;&gt;IEEE 754&lt;/a&gt; and can only safely represent numbers between &lt;code&gt;-(2&lt;sup&gt;53&lt;/sup&gt; - 1)&lt;/code&gt; and &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt; - 1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MAX_SAFE_INTEGER&lt;/code&gt; 의 상수 값 갖는다 &lt;code&gt;9007199254740991&lt;/code&gt; (9,007,199,254,740,991 또는 천조 ~ 9 참조). 그 숫자 뒤에 이유는 자바 스크립트를 사용한다는 것입니다 &lt;a href=&quot;http://en.wikipedia.org/wiki/Double_precision_floating-point_format&quot;&gt;배정 밀도 부동 소수점 형식 번호&lt;/a&gt; 에 지정된 &lt;a href=&quot;http://en.wikipedia.org/wiki/IEEE_floating_point&quot;&gt;IEEE 754&lt;/a&gt; 만 안전하게 사이의 숫자를 나타낼 수 &lt;code&gt;-(2&lt;sup&gt;53&lt;/sup&gt; - 1)&lt;/code&gt; 및 &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt; - 1&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fadc95ce85c2b565bfdeaf904c61b94fca77acf2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MAX_VALUE&lt;/code&gt; property has a value of approximately &lt;code&gt;1.79E+308&lt;/code&gt;, or 2&lt;sup&gt;1024&lt;/sup&gt;. Values larger than &lt;code&gt;MAX_VALUE&lt;/code&gt; are represented as &quot;&lt;code&gt;Infinity&lt;/code&gt;&quot;.</source>
          <target state="translated">&lt;code&gt;MAX_VALUE&lt;/code&gt; 의 속성 약 값 갖는다 &lt;code&gt;1.79E+308&lt;/code&gt; , 또는 (2) &lt;sup&gt;(1024)&lt;/sup&gt; . &lt;code&gt;MAX_VALUE&lt;/code&gt; 보다 큰 값 은 &quot; &lt;code&gt;Infinity&lt;/code&gt; &quot; 로 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="51138e87dd8afa0c248cf646ff6fba440aa07574" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MIN_SAFE_INTEGER&lt;/code&gt; constant has a value of &lt;code&gt;-9007199254740991&lt;/code&gt; (-9,007,199,254,740,991 or about -9 quadrillion). The reasoning behind that number is that JavaScript uses &lt;a href=&quot;http://en.wikipedia.org/wiki/Double_precision_floating-point_format&quot;&gt;double-precision floating-point format numbers&lt;/a&gt; as specified in &lt;a href=&quot;http://en.wikipedia.org/wiki/IEEE_floating_point&quot;&gt;IEEE 754&lt;/a&gt; and can only safely represent numbers between &lt;code&gt;-(2&lt;sup&gt;53&lt;/sup&gt; - 1)&lt;/code&gt; and &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt; - 1&lt;/code&gt;. See &lt;a href=&quot;issafeinteger&quot;&gt;&lt;code&gt;Number.isSafeInteger()&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;MIN_SAFE_INTEGER&lt;/code&gt; 의 상수 값 갖는다 &lt;code&gt;-9007199254740991&lt;/code&gt; (-9,007,199,254,740,991 또는 대해 -13 천조 참조). 그 숫자 뒤에 이유는 자바 스크립트를 사용한다는 것입니다 &lt;a href=&quot;http://en.wikipedia.org/wiki/Double_precision_floating-point_format&quot;&gt;배정 밀도 부동 소수점 형식 번호&lt;/a&gt; 에 지정된 &lt;a href=&quot;http://en.wikipedia.org/wiki/IEEE_floating_point&quot;&gt;IEEE 754&lt;/a&gt; 만 안전하게 사이의 숫자를 나타낼 수 &lt;code&gt;-(2&lt;sup&gt;53&lt;/sup&gt; - 1)&lt;/code&gt; 및 &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt; - 1&lt;/code&gt; . 자세한 내용은 &lt;a href=&quot;issafeinteger&quot;&gt; &lt;code&gt;Number.isSafeInteger()&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="2edd7ede8c6ff2cb8e59eff68ecbdb126e29569e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MIN_VALUE&lt;/code&gt; property is the number closest to 0, not the most negative number, that JavaScript can represent.</source>
          <target state="translated">&lt;code&gt;MIN_VALUE&lt;/code&gt; 의 속성은 자바 스크립트를 나타낼 수 있음을, 0이 아닌 가장 부정적인 번호에 가장 가까운 수입니다.</target>
        </trans-unit>
        <trans-unit id="d0c964aed5ec320d75e2a45199d447ce687d7cda" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Map&lt;/code&gt; object holds key-value pairs and remembers the original insertion order of the keys. Any value (both objects and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Primitive&quot;&gt;primitive values&lt;/a&gt;) may be used as either a key or a value.</source>
          <target state="translated">&lt;code&gt;Map&lt;/code&gt; 오브젝트는 키 - 값 쌍을 보유하고있는 키의 원래의 삽입 순서를 기억한다. 임의의 값 (객체 및 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Primitive&quot;&gt;프리미티브 값&lt;/a&gt; 모두 )을 키 또는 값으로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="88182ac6e810e4db29e4f4ca99dd5f46cbb85788" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Map&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;Map&lt;/code&gt; 객체입니다.</target>
        </trans-unit>
        <trans-unit id="e1bc1fc4fdbe497780e3d4e463f6104aa51a7aed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Map[@@toStringTag]&lt;/code&gt; property has an initial value of &quot;Map&quot;.</source>
          <target state="translated">&lt;code&gt;Map[@@toStringTag]&lt;/code&gt; 속성은 &quot;맵&quot;의 초기 값을 갖는다.</target>
        </trans-unit>
        <trans-unit id="3bbde0f7b7ef75ccc2709ef492ef3e5714515a85" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.E&lt;/code&gt; property represents the base of natural logarithms, e, approximately 2.718.</source>
          <target state="translated">&lt;code&gt;Math.E&lt;/code&gt; 를의 특성은 자연 대수, 즉, 약 2.718의베이스를 나타낸다.</target>
        </trans-unit>
        <trans-unit id="0e9d214144756719d648c3dc2c1301f19276447c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.LN10&lt;/code&gt; property represents the natural logarithm of 10, approximately 2.302:</source>
          <target state="translated">&lt;code&gt;Math.LN10&lt;/code&gt; 의 속성 (10)의 자연 로그, 약 2.302을 나타냅니다 :</target>
        </trans-unit>
        <trans-unit id="8db0f1faf59a2ac2c578484cf3b24e6f4c214ed3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.LN2&lt;/code&gt; property represents the natural logarithm of 2, approximately 0.693:</source>
          <target state="translated">&lt;code&gt;Math.LN2&lt;/code&gt; 의 속성은 2의 자연 로그, 약 0.693을 나타냅니다 :</target>
        </trans-unit>
        <trans-unit id="cdf7f2ecf0017b27e7a6141dc1ed457384dd58e1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.LOG10E&lt;/code&gt; property represents the base 10 logarithm of e, approximately 0.434:</source>
          <target state="translated">&lt;code&gt;Math.LOG10E&lt;/code&gt; 속성은 전자의 기본 10 대수를 나타내는 약 0.434 :</target>
        </trans-unit>
        <trans-unit id="d5c9e3c0689448a1a9df15e39f7d754a2992a927" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.LOG2E&lt;/code&gt; property represents the base 2 logarithm of e, approximately 1.442:</source>
          <target state="translated">&lt;code&gt;Math.LOG2E&lt;/code&gt; 의 속성은 전자의 기본이 로그를 나타내며, 약 1.442 :</target>
        </trans-unit>
        <trans-unit id="63cd40ab11d7a3a27a7c89ce217a526e42186596" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.PI&lt;/code&gt; property represents the ratio of the circumference of a circle to its diameter, approximately 3.14159:</source>
          <target state="translated">&lt;code&gt;Math.PI&lt;/code&gt; 로의 특성이 원주와 그 직경의 비를 나타내고, 약 3.14159 :</target>
        </trans-unit>
        <trans-unit id="2e8337ecf94f86624ee273c9827f2a26f251ff2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.SQRT1_2&lt;/code&gt; property represents the square root of 1/2 which is approximately 0.707:</source>
          <target state="translated">&lt;code&gt;Math.SQRT1_2&lt;/code&gt; 의 속성은 약 0.707이다 1/2의 제곱근을 나타냅니다 :</target>
        </trans-unit>
        <trans-unit id="a26902a9e42f526f3ae90dbfb5a8226a1c70fb8d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.SQRT2&lt;/code&gt; property represents the square root of 2, approximately 1.414:</source>
          <target state="translated">&lt;code&gt;Math.SQRT2&lt;/code&gt; 의 속성은 2의 제곱근, 약 1.414을 나타냅니다 :</target>
        </trans-unit>
        <trans-unit id="eae6f5b844e3d6d91260924e40ec029c879a9923" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.abs()&lt;/code&gt; function returns the absolute value of a number, that is</source>
          <target state="translated">&lt;code&gt;Math.abs()&lt;/code&gt; 함수가 반환 번호의 절대 값이며</target>
        </trans-unit>
        <trans-unit id="f1f2a5f19a3e5516861af947471fe4ec8a980466" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.acos()&lt;/code&gt; function returns the arccosine (in radians) of a number, that is</source>
          <target state="translated">&lt;code&gt;Math.acos()&lt;/code&gt; 함수는 숫자 (라디안) 코사인을 반환한다</target>
        </trans-unit>
        <trans-unit id="23e53e5610b8e2bffb508c5cb59181c802697a1f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.acos()&lt;/code&gt; method returns a numeric value between 0 and &amp;pi; radians for &lt;code&gt;x&lt;/code&gt; between -1 and 1. If the value of &lt;code&gt;x&lt;/code&gt; is outside this range, it returns &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Math.acos()&lt;/code&gt; 메소드가 복귀 0 라디안과 &amp;pi; 사이의 수치 값 &lt;code&gt;x&lt;/code&gt; 의 값 사이의 경우 -1과 1 &lt;code&gt;x&lt;/code&gt; 는 외부의 범위이고, 그 반환 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; 이이&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7f1359f0c5180f313c713a239ff7586a8b6ed071" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.acosh()&lt;/code&gt; function returns the hyperbolic arc-cosine of a number, that is</source>
          <target state="translated">&lt;code&gt;Math.acosh()&lt;/code&gt; 함수, 즉 다수의 쌍곡선 아크 코사인을 반환</target>
        </trans-unit>
        <trans-unit id="77ea6d905eac5b576ffa3e8e68dd6623c41fd8de" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.asin()&lt;/code&gt; function returns the arcsine (in radians) of a number, that is</source>
          <target state="translated">&lt;code&gt;Math.asin()&lt;/code&gt; 함수, 즉 다수의 (라디안) 아크 사인을 돌려</target>
        </trans-unit>
        <trans-unit id="1201f0735d6c0d6605da2162314daa4a1383fe06" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.asin()&lt;/code&gt; method returns a numeric value between</source>
          <target state="translated">&lt;code&gt;Math.asin()&lt;/code&gt; 메소드 사이의 수치 값을 반환</target>
        </trans-unit>
        <trans-unit id="4f24cc302535514a7789482772fb7228bbe3c1b1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.asinh()&lt;/code&gt; function returns the hyperbolic arcsine of a number, that is</source>
          <target state="translated">&lt;code&gt;Math.asinh()&lt;/code&gt; 함수는 즉, 숫자의 쌍곡선 아크 사인을 반환</target>
        </trans-unit>
        <trans-unit id="274e9068ecd50879d6acc911f659025f3fc40267" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.atan()&lt;/code&gt; function returns the arctangent (in radians) of a number, that is</source>
          <target state="translated">&lt;code&gt;Math.atan()&lt;/code&gt; 함수, 즉 다수의 (라디안) 아크 탄젠트를 반환</target>
        </trans-unit>
        <trans-unit id="19e0ae310ffca0a95d08a532386a65fa4b83741a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.atan()&lt;/code&gt; method returns a numeric value between</source>
          <target state="translated">&lt;code&gt;Math.atan()&lt;/code&gt; 메소드 사이의 수치 값을 반환</target>
        </trans-unit>
        <trans-unit id="1efa67754ea28c885fc086cb93e6069cc3a67fe6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.atan2()&lt;/code&gt; function returns the angle in the plane (in radians) between the positive x-axis and the ray from (0,0) to the point (x,y), for &lt;code&gt;Math.atan2(y,x)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Math.atan2()&lt;/code&gt; 함수는 차례로 양의 X 축과 (0,0) 사이의 선 (라디안) 평면의 각을 (X, Y)에 대한 &lt;code&gt;Math.atan2(y,x)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="77c207e19c5f9f4f46bab9f5091528b80eb08a44" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.atan2()&lt;/code&gt; method returns a numeric value between -&amp;pi; and &amp;pi; representing the angle theta of an &lt;code&gt;(x,&amp;nbsp;y)&lt;/code&gt; point. This is the counterclockwise angle, measured in radians, between the positive X axis, and the point &lt;code&gt;(x,&amp;nbsp;y)&lt;/code&gt;. Note that the arguments to this function pass the y-coordinate first and the x-coordinate second.</source>
          <target state="translated">&lt;code&gt;Math.atan2()&lt;/code&gt; 메소드는 -&amp;pi; 사이 및 각도 세타 &amp;pi; 나타내는 수치 반환 &lt;code&gt;(x,&amp;nbsp;y)&lt;/code&gt; 포인트. 양의 X 축과 점 &lt;code&gt;(x,&amp;nbsp;y)&lt;/code&gt; 사이의 라디안 단위로 측정되는 반 시계 방향 각도 입니다. 이 함수의 인수는 y 좌표를 먼저, x 좌표를 두 번째로 전달합니다.</target>
        </trans-unit>
        <trans-unit id="401089a6230e9c0e59b469731579b2c037b6d9d0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.atanh()&lt;/code&gt; function returns the hyperbolic arctangent of a number, that is</source>
          <target state="translated">&lt;code&gt;Math.atanh()&lt;/code&gt; 함수는 즉, 숫자의 쌍곡선 아크 탄젠트를 반환</target>
        </trans-unit>
        <trans-unit id="2d1450b678d6cdc0ae70a87335e790c92ef781be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.cbrt()&lt;/code&gt; function returns the cube root of a number, that is</source>
          <target state="translated">&lt;code&gt;Math.cbrt()&lt;/code&gt; 함수는 즉, 숫자의 큐브 루트를 반환</target>
        </trans-unit>
        <trans-unit id="e853adf2395dd36708d65c7b793868c0402ab685" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.ceil()&lt;/code&gt; function returns the smallest integer greater than or equal to a given number.</source>
          <target state="translated">&lt;code&gt;Math.ceil()&lt;/code&gt; 함수가 리턴 소정 개수 작은 정수 이상인.</target>
        </trans-unit>
        <trans-unit id="1f46b5999ff7482155c968a0bfe7d2ac290cd792" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.clz32()&lt;/code&gt; function returns the number of leading zero bits in the 32-bit binary representation of a number.</source>
          <target state="translated">&lt;code&gt;Math.clz32()&lt;/code&gt; 함수는 숫자의 32 비트 이진 표현의 리딩 제로 비트들의 수를 리턴한다.</target>
        </trans-unit>
        <trans-unit id="f34d1fcee66df36e2155cbe5c0adec85c2bcec1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.cos()&lt;/code&gt; method returns a numeric value between -1 and 1, which represents the cosine of the angle.</source>
          <target state="translated">&lt;code&gt;Math.cos()&lt;/code&gt; 메소드는 각도의 코사인 값을 나타내는 수치와 -1과 1을 반환한다.</target>
        </trans-unit>
        <trans-unit id="1982921bfd23b352614e4487bb825af16d5cac08" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.cos()&lt;/code&gt; static function returns the &lt;a href=&quot;https://en.wikipedia.org/wiki/cosine&quot;&gt;cosine&lt;/a&gt; of the specified angle, which must be specified in &lt;a href=&quot;https://en.wikipedia.org/wiki/radians&quot;&gt;radians&lt;/a&gt;. This value is</source>
          <target state="translated">&lt;code&gt;Math.cos()&lt;/code&gt; 정적 함수 복귀 &lt;a href=&quot;https://en.wikipedia.org/wiki/cosine&quot;&gt;코사인&lt;/a&gt; 으로 지정해야 지정된 각도, &lt;a href=&quot;https://en.wikipedia.org/wiki/radians&quot;&gt;라디안&lt;/a&gt; . 이 값은</target>
        </trans-unit>
        <trans-unit id="a555d20b1f19ec5103b77931d479fb6e8b4dbb3d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.cosh()&lt;/code&gt; function returns the hyperbolic cosine of a number, that can be expressed using the &lt;a href=&quot;e&quot;&gt;constant e&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;Math.cosh()&lt;/code&gt; 함수를 사용하여 표현 될 수있는 다수의 쌍곡선 코사인 리턴 &lt;a href=&quot;e&quot;&gt;상수를 전자&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="2bfea75be247f3daec71554eaad766c96c0db251" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.exp()&lt;/code&gt; function returns &lt;code&gt;e&lt;sup&gt;x&lt;/sup&gt;&lt;/code&gt;, where &lt;code&gt;x&lt;/code&gt; is the argument, and &lt;code&gt;e&lt;/code&gt; is &lt;a href=&quot;e&quot;&gt;Euler's number (also known as Napier's constant)&lt;/a&gt;, the base of the natural logarithms.</source>
          <target state="translated">&lt;code&gt;Math.exp()&lt;/code&gt; 함수가 리턴 &lt;code&gt;e&lt;sup&gt;x&lt;/sup&gt;&lt;/code&gt; , 여기서 &lt;code&gt;x&lt;/code&gt; 인수이고, &lt;code&gt;e&lt;/code&gt; 있다 &lt;a href=&quot;e&quot;&gt;(또한, 네이피어 상수라고도 함) 오일러의 수&lt;/a&gt; , 자연 로그의 밑수.</target>
        </trans-unit>
        <trans-unit id="18eee299904532f2ffd28d81c9ac6c8227771f9e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.expm1()&lt;/code&gt; function returns &lt;code&gt;e&lt;sup&gt;x&lt;/sup&gt; - 1&lt;/code&gt;, where &lt;code&gt;x&lt;/code&gt; is the argument, and &lt;a href=&quot;e&quot;&gt;e&lt;/a&gt; the base of the natural logarithms.</source>
          <target state="translated">&lt;code&gt;Math.expm1()&lt;/code&gt; 함수 반환 &lt;code&gt;e&lt;sup&gt;x&lt;/sup&gt; - 1&lt;/code&gt; , &lt;code&gt;x&lt;/code&gt; 는 인수이고, &lt;a href=&quot;e&quot;&gt;전자&lt;/a&gt; 자연 대수의 바닥을.</target>
        </trans-unit>
        <trans-unit id="e8824a7825bf37b6f9c96fb23ed3ac4b27945d51" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.floor()&lt;/code&gt; function returns the largest integer less than or equal to a given number.</source>
          <target state="translated">&lt;code&gt;Math.floor()&lt;/code&gt; 함수는보다 작은 최대의 정수를 반환하거나 소정의 수와 동일.</target>
        </trans-unit>
        <trans-unit id="e73fd876183d4897911545affeaa2f0c199ea36d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.fround()&lt;/code&gt; function returns the nearest &lt;a href=&quot;https://en.wikipedia.org/wiki/Single-precision_floating-point_format&quot;&gt;32-bit single precision&lt;/a&gt; float representation of a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Math.fround()&lt;/code&gt; 함수가 반환 가장 가까운 &lt;a href=&quot;https://en.wikipedia.org/wiki/Single-precision_floating-point_format&quot;&gt;32 비트 단 정밀도&lt;/a&gt; (A)의 부동 소수점 표현 &lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3acae50845ea68e690e7b7727178f6ef8b66df64" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.hypot()&lt;/code&gt; function returns the square root of the sum of squares of its arguments, that is</source>
          <target state="translated">&lt;code&gt;Math.hypot()&lt;/code&gt; 함수는 인수의 제곱의 합의 제곱근을 반환, 즉</target>
        </trans-unit>
        <trans-unit id="1783d7acae54f32c226e638343bf0fad7c634c55" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.imul()&lt;/code&gt; function returns the result of the C-like 32-bit multiplication of the two parameters.</source>
          <target state="translated">&lt;code&gt;Math.imul()&lt;/code&gt; 함수는 두 개의 파라미터들의 32 비트 C 형 곱의 결과를 반환한다.</target>
        </trans-unit>
        <trans-unit id="0fbb4c724848b0a53ecbfacba61326cab66e211b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.log()&lt;/code&gt; function returns the natural logarithm (base &lt;a href=&quot;e&quot;&gt;&lt;code&gt;e&lt;/code&gt;&lt;/a&gt;) of a number, that is</source>
          <target state="translated">&lt;code&gt;Math.log()&lt;/code&gt; 함수는 자연 로그 (베이스 반환 &lt;a href=&quot;e&quot;&gt; &lt;code&gt;e&lt;/code&gt; &lt;/a&gt; 즉, 번호)를</target>
        </trans-unit>
        <trans-unit id="4936dafff05a90c9d111b4b30e42a197099af9dc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.log10()&lt;/code&gt; function returns the base 10 logarithm of a number, that is</source>
          <target state="translated">&lt;code&gt;Math.log10()&lt;/code&gt; 함수, 즉 다수의 기지국 (10) 로그를 반환</target>
        </trans-unit>
        <trans-unit id="b09f211d660ff7375eef3abee35fe3455dd2f781" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.log1p()&lt;/code&gt; function returns the natural logarithm (base &lt;a href=&quot;e&quot;&gt;&lt;code&gt;e&lt;/code&gt;&lt;/a&gt;) of 1 + a number, that is</source>
          <target state="translated">&lt;code&gt;Math.log1p()&lt;/code&gt; 함수는 자연 로그 (베이스 반환 &lt;a href=&quot;e&quot;&gt; &lt;code&gt;e&lt;/code&gt; &lt;/a&gt; 1 +의 개수를), 즉</target>
        </trans-unit>
        <trans-unit id="9de4bd7bfcecd8d7baebf0daf3b3529ba48f3549" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.log2()&lt;/code&gt; function returns the base 2 logarithm of a number, that is</source>
          <target state="translated">&lt;code&gt;Math.log2()&lt;/code&gt; 함수 즉, 다수의베이스 2 로그를 반환</target>
        </trans-unit>
        <trans-unit id="b33a199cd22e3ee41631af09205653506adc3bdc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.max()&lt;/code&gt; function returns the largest of zero or more numbers.</source>
          <target state="translated">&lt;code&gt;Math.max()&lt;/code&gt; 함수는 0 개 이상의 숫자의 가장 큰 반환합니다.</target>
        </trans-unit>
        <trans-unit id="62674bee19df406bc1fdbd14f622d63ce4c011e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.pow()&lt;/code&gt; function returns the &lt;code&gt;base&lt;/code&gt; to the &lt;code&gt;exponent&lt;/code&gt; power, that is, &lt;code&gt;base&lt;sup&gt;exponent&lt;/sup&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Math.pow()&lt;/code&gt; 함수는 수익 &lt;code&gt;base&lt;/code&gt; 받는 &lt;code&gt;exponent&lt;/code&gt; 인 파워, &lt;code&gt;base&lt;sup&gt;exponent&lt;/sup&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d936ed23a8c7935bde0bf4037eb8c8f483a83a7c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.random()&lt;/code&gt; function returns a floating-point, pseudo-random number in the range 0&amp;ndash;1 (inclusive of 0, but not 1) with approximately uniform distribution over that range &amp;mdash; which you can then scale to your desired range. The implementation selects the initial seed to the random number generation algorithm; it cannot be chosen or reset by the user.</source>
          <target state="translated">&lt;code&gt;Math.random()&lt;/code&gt; 함수가 반환하는 범위에서 거의 균일 한 분포로 부동 소수점, 의사 난수의 범위 0-1의 번호 (0 포함, 그러나 1) - 당신이 다음 원하는 범위를 확장 할 수 있습니다. 구현은 초기 시드를 난수 생성 알고리즘으로 선택합니다. 사용자가 선택하거나 재설정 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="af02360b60e878aed2709cd3f773108e1aa2625a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.round()&lt;/code&gt; function returns the value of a number rounded to the nearest integer.</source>
          <target state="translated">&lt;code&gt;Math.round()&lt;/code&gt; 함수 복귀 숫자의 값에 가장 가까운 정수로 반올림.</target>
        </trans-unit>
        <trans-unit id="da8b8ae5b73735a996356de7c47d8dacefce3df1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.sign()&lt;/code&gt; function returns the sign of a number, indicating whether the number is positive, negative or zero.</source>
          <target state="translated">&lt;code&gt;Math.sign()&lt;/code&gt; 함수는 양수, 음수거나 제로인지의 여부를 나타내는 다수의 표시를 리턴한다.</target>
        </trans-unit>
        <trans-unit id="dde4deb7799dcc763f16a0179238397eb20e4b9b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.sin()&lt;/code&gt; function returns the sine of a number.</source>
          <target state="translated">&lt;code&gt;Math.sin()&lt;/code&gt; 함수는 수의 사인을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="76d76cf0a5feac65ad2cb021f11849024f28eeb4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.sin()&lt;/code&gt; method returns a numeric value between -1 and 1, which represents the sine of the angle given in radians.</source>
          <target state="translated">&lt;code&gt;Math.sin()&lt;/code&gt; 메소드는 라디안으로 소정 각도의 사인 값을 나타내는 수치와 -1과 1을 반환한다.</target>
        </trans-unit>
        <trans-unit id="564f79a1eff02a3d9293260681dc7c21beb64171" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.sinh()&lt;/code&gt; function returns the hyperbolic sine of a number, that can be expressed using the &lt;a href=&quot;e&quot;&gt;constant e&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;Math.sinh()&lt;/code&gt; 함수를 사용하여 표현 될 수있는 다수의 쌍곡선 사인 리턴 &lt;a href=&quot;e&quot;&gt;상수를 전자&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="106bcb416cbdd429ad7933d6dc31d26364d03dad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.sqrt()&lt;/code&gt; function returns the square root of a number, that is</source>
          <target state="translated">&lt;code&gt;Math.sqrt()&lt;/code&gt; 함수를 즉, 숫자의 제곱근을 반환</target>
        </trans-unit>
        <trans-unit id="fdc14b01c600a83941368feb4762d6c7ab8c3902" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.tan()&lt;/code&gt; function returns the tangent of a number.</source>
          <target state="translated">&lt;code&gt;Math.tan()&lt;/code&gt; 함수는 숫자의 탄젠트를 반환한다.</target>
        </trans-unit>
        <trans-unit id="d6a42ec70f0ea0607606e14849e66ec68b4c61ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.tan()&lt;/code&gt; method returns a numeric value that represents the tangent of the angle.</source>
          <target state="translated">&lt;code&gt;Math.tan()&lt;/code&gt; 에있어서, 상기 각도의 탄젠트를 나타내는 숫자 값을 반환한다.</target>
        </trans-unit>
        <trans-unit id="02ff2998fa9285454da319330dee3f30e6cd32c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.tanh()&lt;/code&gt; function returns the hyperbolic tangent of a number, that is</source>
          <target state="translated">&lt;code&gt;Math.tanh()&lt;/code&gt; 함수, 즉 다수의 쌍곡선 탄젠트를 반환</target>
        </trans-unit>
        <trans-unit id="f27db3f3a41ec46f179c587df8a34363b782a28c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Math.trunc()&lt;/code&gt; function returns the integer part of a number by removing any fractional digits.</source>
          <target state="translated">&lt;code&gt;Math.trunc()&lt;/code&gt; 함수는 소수점 이하를 제거하여 다수의 정수 부분을 반환한다.</target>
        </trans-unit>
        <trans-unit id="4fa18c0132666e17849d60724c9ad3039600e31b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Number.EPSILON&lt;/code&gt; property represents the difference between 1 and the smallest floating point number greater than 1.</source>
          <target state="translated">&lt;code&gt;Number.EPSILON&lt;/code&gt; 의 속성은 1 내지 1보다 작은 부동 소수점 수의 큰 차이를 나타낸다.</target>
        </trans-unit>
        <trans-unit id="05ff1ee697d3c5c3e0b67d8245da7a9116b43c49" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Number.MAX_SAFE_INTEGER&lt;/code&gt; constant represents the maximum safe integer in JavaScript (&lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt; - 1&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;Number.MAX_SAFE_INTEGER&lt;/code&gt; 의 상수는 자바 스크립트의 최대 안전 정수 (나타내는 &lt;code&gt;2&lt;sup&gt;53&lt;/sup&gt; - 1&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="4ca43227a25c5f381fd5c0e2898671ab9a49919b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Number.MAX_VALUE&lt;/code&gt; property represents the maximum numeric value representable in JavaScript.</source>
          <target state="translated">&lt;code&gt;Number.MAX_VALUE&lt;/code&gt; 속성은 자바 스크립트의 최대 수치 표현할 수를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="bf526ed1de12696fb61cc3e08aab8fcda9ea33ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Number.MIN_SAFE_INTEGER&lt;/code&gt; constant represents the minimum safe integer in JavaScript (&lt;code&gt;-(2&lt;sup&gt;53&lt;/sup&gt; - 1)&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;Number.MIN_SAFE_INTEGER&lt;/code&gt; 의 상수는 자바 스크립트의 최소 안전 정수 나타낸다 ( &lt;code&gt;-(2&lt;sup&gt;53&lt;/sup&gt; - 1)&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="f7381448634e0f31bd5201bcea50a9d1e174d800" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Number.MIN_VALUE&lt;/code&gt; property represents the smallest positive numeric value representable in JavaScript.</source>
          <target state="translated">&lt;code&gt;Number.MIN_VALUE&lt;/code&gt; 의 속성은 자바 스크립트에서 가장 작은 양의 숫자 값을 표현할 수를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="5aec2d9b31c88e5aa46d62d6093ad29565e0dd29" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Number.NEGATIVE_INFINITY&lt;/code&gt; property represents the negative Infinity value.</source>
          <target state="translated">&lt;code&gt;Number.NEGATIVE_INFINITY&lt;/code&gt; 와의 특성은 음의 무한대 값을 나타낸다.</target>
        </trans-unit>
        <trans-unit id="c9ae0e314f4a7ce76ee0711a747131d463602ac9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Number.NaN&lt;/code&gt; property represents Not-A-Number. Equivalent of &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Number.NaN&lt;/code&gt; 의 속성은 숫자가 아닌 값을 나타냅니다. &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; 과&lt;/a&gt; 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="d0a8de008582132cc9e6cc742bf738dcafc19037" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Number.POSITIVE_INFINITY&lt;/code&gt; property represents the positive Infinity value.</source>
          <target state="translated">&lt;code&gt;Number.POSITIVE_INFINITY&lt;/code&gt; 와의 속성은 무한대 값을 나타낸다.</target>
        </trans-unit>
        <trans-unit id="30fd7b6f3053abaff3bf2a0464c281e23ec072c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Number.isFinite()&lt;/code&gt; method determines whether the passed value is a finite number.</source>
          <target state="translated">&lt;code&gt;Number.isFinite()&lt;/code&gt; 메소드는 전달 된 값이 유한 수 있는지 여부를 판정한다.</target>
        </trans-unit>
        <trans-unit id="6702ce32a97290f8e908e26ff226fd16b8db7bc3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Number.isInteger()&lt;/code&gt; method determines whether the passed value is an integer.</source>
          <target state="translated">&lt;code&gt;Number.isInteger()&lt;/code&gt; 메소드는 전달 된 값이 정수인지를 판단한다.</target>
        </trans-unit>
        <trans-unit id="5e9f4d261b9a45b076a155c11abbd5aac9e031d7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Number.isNaN()&lt;/code&gt; method determines whether the passed value is &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; and its type is &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt;. It is a more robust version of the original, global &lt;a href=&quot;../isnan&quot;&gt;&lt;code&gt;isNaN()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Number.isNaN()&lt;/code&gt; 메소드는 전달 된 값인지를 결정 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; 이&lt;/a&gt; 그 타입이 &lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt; . 원래의 글로벌 &lt;a href=&quot;../isnan&quot;&gt; &lt;code&gt;isNaN()&lt;/code&gt; &lt;/a&gt; 보다 강력한 버전입니다 .</target>
        </trans-unit>
        <trans-unit id="9914bbce6f34a5629b45e57a04521135a21f3d24" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Number.isSafeInteger()&lt;/code&gt; method determines whether the provided value is a number that is a</source>
          <target state="translated">&lt;code&gt;Number.isSafeInteger()&lt;/code&gt; 메소드는 제공된 값이 인 번호인지를 판정한다</target>
        </trans-unit>
        <trans-unit id="f9aa47102986c689ecc518ad79ea95d634627d70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Number.parseFloat()&lt;/code&gt; method parses a string argument and returns a floating point number. This method behaves identically to the global function &lt;a href=&quot;../parsefloat&quot;&gt;&lt;code&gt;parseFloat()&lt;/code&gt;&lt;/a&gt; and is part of ECMAScript 2015 (its purpose is modularization of globals).</source>
          <target state="translated">&lt;code&gt;Number.parseFloat()&lt;/code&gt; 메서드는 문자열 인수를 구문 분석하고 부동 소수점 수를 반환합니다. 이 메소드는 전역 함수 &lt;a href=&quot;../parsefloat&quot;&gt; &lt;code&gt;parseFloat()&lt;/code&gt; &lt;/a&gt; 와 동일하게 작동하며 ECMAScript 2015의 일부입니다 (그 목적은 전역 모듈화입니다).</target>
        </trans-unit>
        <trans-unit id="53ff239b6aba38919ddab96f4de82953204c8139" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Number.parseInt()&lt;/code&gt; method parses a string argument and returns an integer of the specified radix or base.</source>
          <target state="translated">&lt;code&gt;Number.parseInt()&lt;/code&gt; 메서드는 문자열 인수 반환 지정된 기수 또는 기본의 정수를 구문 분석합니다.</target>
        </trans-unit>
        <trans-unit id="df593d41968f688ad83a119c51c4284dfcfd496e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Number.prototype&lt;/code&gt; property represents the prototype for the &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">&lt;code&gt;Number.prototype&lt;/code&gt; 의 속성에 대한 프로토 타입을 나타내는 &lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt; 생성자를.</target>
        </trans-unit>
        <trans-unit id="00ade8ef2452f453af0fa56020df4de938b0c743" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Number&lt;/code&gt; JavaScript object is a wrapper object allowing you to work with numerical values. A &lt;code&gt;Number&lt;/code&gt; object is created using the &lt;code&gt;Number()&lt;/code&gt; constructor.</source>
          <target state="translated">&lt;code&gt;Number&lt;/code&gt; 자바 스크립트 객체를 사용하면 숫자 값으로 작업 할 수 있도록 래퍼 객체입니다. &lt;code&gt;Number&lt;/code&gt; 개체가 사용하여 생성되는 &lt;code&gt;Number()&lt;/code&gt; 생성자를.</target>
        </trans-unit>
        <trans-unit id="33e9c7709d72fc16e777d20479de2eee0376b010" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Object.assign()&lt;/code&gt; method is used to copy the values of all enumerable own properties from one or more source objects to a target object. It will return the target object.</source>
          <target state="translated">&lt;code&gt;Object.assign()&lt;/code&gt; 메소드는 대상체에 하나 이상의 소스 개체로부터 자신의 모든 열거 속성 값을 복사하는 데 사용된다. 대상 객체를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="0507ba624ef552980aa74cae51b4f564b83468d9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Object.assign()&lt;/code&gt; method only copies &lt;em&gt;enumerable&lt;/em&gt; and &lt;em&gt;own&lt;/em&gt; properties from a source object to a target object. It uses &lt;code&gt;[[Get]]&lt;/code&gt; on the source and &lt;code&gt;[[Set]]&lt;/code&gt; on the target, so it will invoke getters and setters. Therefore it &lt;em&gt;assigns&lt;/em&gt; properties versus just copying or defining new properties. This may make it unsuitable for merging new properties into a prototype if the merge sources contain getters. For copying property definitions, including their enumerability, into prototypes &lt;a href=&quot;getownpropertydescriptor&quot;&gt;&lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt; should be used instead.</source>
          <target state="translated">&lt;code&gt;Object.assign()&lt;/code&gt; 메소드는 복사 &lt;em&gt;열거&lt;/em&gt; 하고 &lt;em&gt;자신의&lt;/em&gt; 대상체에 소스 객체 속성. 소스에서 &lt;code&gt;[[Get]]&lt;/code&gt; 을 사용 하고 대상에서 &lt;code&gt;[[Set]]&lt;/code&gt; 를 사용하므로 getter 및 setter를 호출합니다. 따라서 새 속성을 복사하거나 정의하는 것보다 속성 을 &lt;em&gt;할당&lt;/em&gt; 합니다. 병합 소스에 게터가 포함되어 있으면 새 속성을 프로토 타입에 병합하는 데 적합하지 않을 수 있습니다. 열거 형을 포함하여 속성 정의를 프로토 타입으로 복사하려면 대신 &lt;a href=&quot;getownpropertydescriptor&quot;&gt; &lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt; 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="e14de3855af35d97b2ebf25374631842bd03f5bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Object.fromEntries()&lt;/code&gt; method takes a list of key-value pairs and returns a new object whose properties are given by those entries. The &lt;var&gt;iterable&lt;/var&gt; argument is expected to be an object that implements an &lt;code&gt;@@iterator&lt;/code&gt; method, that returns an iterator object, that produces a two element array-like object, whose first element is a value that will be used as a property key, and whose second element is the value to associate with that property key.</source>
          <target state="translated">&lt;code&gt;Object.fromEntries()&lt;/code&gt; 메소드는 키 - 값 쌍들의리스트를 취하고, 그 사람들 특성 항목에서 주어진 새로운 객체를 반환한다. &lt;var&gt;iterable&lt;/var&gt; 인수 대상이되는 것으로 예상된다 구현하는 &lt;code&gt;@@iterator&lt;/code&gt; 있어서, 그 복귀 두 요소를 생성하는 반복기 객체 어레이 형상 모국어 소자 특성 키로서 사용되는 값이며, 그 개체 두 번째 요소는 해당 속성 키와 관련된 값입니다.</target>
        </trans-unit>
        <trans-unit id="83c886659af8759625cee34b1b5a144964eeb5f7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt; method returns an array of all properties (including &lt;em&gt;non-&lt;/em&gt;enumerable properties except for those which use Symbol) found directly upon a given object.</source>
          <target state="translated">&lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt; 메소드가 복귀 (비롯한 모든 특성의 배열 &lt;em&gt;이 아닌&lt;/em&gt; 기호를 사용하는 것을 제외 열거 특성) 지정된 객체에 직접 알았다.</target>
        </trans-unit>
        <trans-unit id="d7806b442903437f717194b67dd57fdab9f58a7f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Object.isExtensible()&lt;/code&gt; method determines if an object is extensible (whether it can have new properties added to it).</source>
          <target state="translated">&lt;code&gt;Object.isExtensible()&lt;/code&gt; 객체 (그것이 첨가 새로운 특성을 가질 수 있는지 여부) 확장의 경우에있어서 판정한다.</target>
        </trans-unit>
        <trans-unit id="9f6b67810c2518bd202a149b5865b7c11bb99c60" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Object&lt;/code&gt; constructor creates an object wrapper for the given value. If the value is &lt;a href=&quot;null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, it will create and return an empty object, otherwise, it will return an object of a Type that corresponds to the given value. If the value is an object already, it will return the value.</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt; 생성자는 지정된 값의 오브젝트 래퍼를 작성합니다. 값이 &lt;a href=&quot;null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 인 경우 빈 객체를 만들어 반환하고, 그렇지 않으면 주어진 값에 해당하는 Type 객체를 반환합니다. 값이 이미 개체 인 경우 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="0ecd1d83517590405260a28595c7ce53cb4fe8be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Promise.all(&lt;var&gt;iterable&lt;/var&gt;)&lt;/code&gt; method returns a single &lt;a href=&quot;../promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt; that resolves when all of the promises in the &lt;var&gt;iterable&lt;/var&gt; argument have resolved or when the &lt;var&gt;iterable&lt;/var&gt; argument contains no promises. It rejects with the reason of the first promise that rejects.</source>
          <target state="translated">&lt;code&gt;Promise.all(&lt;var&gt;iterable&lt;/var&gt;)&lt;/code&gt; 방법은 하나의 반환 &lt;a href=&quot;../promise&quot;&gt; &lt;code&gt;Promise&lt;/code&gt; &lt;/a&gt; 결의가있는 약속의 모든 때 &lt;var&gt;iterable&lt;/var&gt; 인수는 해결 한거나 할 때 &lt;var&gt;iterable&lt;/var&gt; 인수가 어떤 약속을 포함하지 않는다. 그것은 거절 한 첫 번째 약속의 이유로 거절합니다.</target>
        </trans-unit>
        <trans-unit id="39c2c4a2b5c12a456ec7e8862269d084744f1772" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Promise&lt;/code&gt; object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value.</source>
          <target state="translated">&lt;code&gt;Promise&lt;/code&gt; 목적은 최종 완성 (또는 실패) 비동기 동작하고, 그 결과 값을 나타낸다.</target>
        </trans-unit>
        <trans-unit id="318ea5baaf062d85eb4545793a6a066d3fc803d0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Reflect.&lt;/code&gt;getOwnPropertyDescriptor method returns a property descriptor of the given property if it exists on the object, &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; otherwise. The only difference to &lt;a href=&quot;../object/getownpropertydescriptor&quot;&gt;&lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt;&lt;/a&gt; is how non-object targets are handled.</source>
          <target state="translated">은 &lt;code&gt;Reflect.&lt;/code&gt; getOwnPropertyDescriptor 메소드는 주어진 특성의 특성 디스크립터가 오브젝트에 존재하는 경우이를 리턴하고 그렇지 않으면 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 않습니다. &lt;a href=&quot;../object/getownpropertydescriptor&quot;&gt; &lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt; &lt;/a&gt; 유일한 차이점 은 객체가 아닌 대상을 처리하는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="a33bbe15250b58ff2ee2b3186da5ace119ecefbe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Reflect.defineProperty&lt;/code&gt; method allows precise addition to or modification of a property on an object. For more details see the &lt;a href=&quot;../object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty&lt;/code&gt;&lt;/a&gt; which is similar. &lt;code&gt;Object.defineProperty&lt;/code&gt; returns the object or throws a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; if the property has not been successfully defined. &lt;code&gt;Reflect.defineProperty&lt;/code&gt;, however, simply returns a &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether or not the property was successfully defined.</source>
          <target state="translated">&lt;code&gt;Reflect.defineProperty&lt;/code&gt; 의 방법은 객체의 속성 외에 정확한 또는 변형 할 수있다. 자세한 내용 은 비슷한 &lt;a href=&quot;../object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 . &lt;code&gt;Object.defineProperty&lt;/code&gt; 는 객체를 반환하거나 속성이 성공적으로 정의되지 않은 경우 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; 를&lt;/a&gt; 발생시킵니다. 그러나 &lt;code&gt;Reflect.defineProperty&lt;/code&gt; 는 단순히 속성이 성공적으로 정의되었는지 여부를 나타내는 &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="6ff84b74ad3cfee0a4a3dcba8f32def3b8e5293a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Reflect.deleteProperty&lt;/code&gt; method allows you to delete a property on an object. It returns a &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether or not the property was successfully deleted. It is almost identical to the non-strict &lt;a href=&quot;../../operators/delete&quot;&gt;&lt;code&gt;delete&lt;/code&gt; operator&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Reflect.deleteProperty&lt;/code&gt; 의 방법을 사용하면 객체에 속성을 삭제할 수 있습니다. 속성이 성공적으로 삭제되었는지 여부를 나타내는 &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; 반환합니다 . 엄격하지 않은 &lt;a href=&quot;../../operators/delete&quot;&gt; &lt;code&gt;delete&lt;/code&gt; 연산자&lt;/a&gt; 와 거의 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="dc745270437f9326849c6d9b5e5b62f40bfa51e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Reflect.get&lt;/code&gt; method allows you to get a property on an object. It is like the &lt;a href=&quot;../../operators/property_accessors&quot;&gt;property accessor&lt;/a&gt; syntax as a function.</source>
          <target state="translated">&lt;code&gt;Reflect.get&lt;/code&gt; 의 방법을 사용하면 객체에 속성을 얻을 수 있습니다. 그것은 같다 &lt;a href=&quot;../../operators/property_accessors&quot;&gt;속성 액세서&lt;/a&gt; 함수로서 구.</target>
        </trans-unit>
        <trans-unit id="e6d720aac72b2b70bad97973f531686e62380121" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Reflect.getPrototypeOf&lt;/code&gt; method returns the prototype (i.e. the value of the internal &lt;code&gt;[[Prototype]]&lt;/code&gt; property) of the specified object.</source>
          <target state="translated">&lt;code&gt;Reflect.getPrototypeOf&lt;/code&gt; 에 있어서 되돌아 원형 (즉, 내부의 값 &lt;code&gt;[[Prototype]]&lt;/code&gt; 지정된 객체의 속성).</target>
        </trans-unit>
        <trans-unit id="6bd85fe113e748e1f2e229506163759fcafb2d1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Reflect.has&lt;/code&gt; method allows you to check if a property is in an object. It works like the &lt;a href=&quot;../../operators/in&quot;&gt;&lt;code&gt;in&lt;/code&gt; operator&lt;/a&gt; as a function.</source>
          <target state="translated">&lt;code&gt;Reflect.has&lt;/code&gt; 방법은 속성이 객체에 있는지 확인할 수 있습니다. &lt;a href=&quot;../../operators/in&quot;&gt; &lt;code&gt;in&lt;/code&gt; 연산자&lt;/a&gt; 처럼 작동 합니다.</target>
        </trans-unit>
        <trans-unit id="06008423ce51bcc45055fb5e581199b41a3ba3f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Reflect.isExtensible&lt;/code&gt; method allows you determine if an object is extensible (whether it can have new properties added to it). It is the same method as &lt;a href=&quot;../object/isextensible&quot;&gt;&lt;code&gt;Object.isExtensible()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Reflect.isExtensible&lt;/code&gt; 방법은 객체 (그것에 추가 된 새 속성을 가질 수 있는지 여부를) 확장 할 수 있는지 확인할 수 있습니다. &lt;a href=&quot;../object/isextensible&quot;&gt; &lt;code&gt;Object.isExtensible()&lt;/code&gt; &lt;/a&gt; 과 같은 방법 입니다.</target>
        </trans-unit>
        <trans-unit id="8c4e704125f2bd3945bb47344c139beffed30016" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Reflect.ownKeys&lt;/code&gt; method returns an array of the &lt;code&gt;target&lt;/code&gt; object's own property keys. Its return value is equivalent to &lt;code&gt;&lt;a href=&quot;../object/getownpropertynames&quot;&gt;&lt;code&gt;Object.getOwnPropertyNames&lt;/code&gt;&lt;/a&gt;(target).concat(&lt;a href=&quot;../object/getownpropertysymbols&quot;&gt;&lt;code&gt;Object.getOwnPropertySymbols&lt;/code&gt;&lt;/a&gt;(target))&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Reflect.ownKeys&lt;/code&gt; 의 방법은 배열 반환 &lt;code&gt;target&lt;/code&gt; 객체 자신의 프로퍼티 키를. 반환 값은 &lt;code&gt;&lt;a href=&quot;../object/getownpropertynames&quot;&gt;&lt;code&gt;Object.getOwnPropertyNames&lt;/code&gt;&lt;/a&gt;(target).concat(&lt;a href=&quot;../object/getownpropertysymbols&quot;&gt;&lt;code&gt;Object.getOwnPropertySymbols&lt;/code&gt;&lt;/a&gt;(target))&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1d0090758332458ff4b1b71b18d3d9db1d3029bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Reflect.preventExtensions&lt;/code&gt; method allows you to prevent new properties from ever being added to an object (i.e. prevents future extensions to the object). It is the same method as &lt;a href=&quot;../object/preventextensions&quot;&gt;&lt;code&gt;Object.preventExtensions()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Reflect.preventExtensions&lt;/code&gt; 의 방법은 당신이 이제까지 (객체에 대한 예를 방지 향후 확장) 객체에 추가되는 새 속성을 방지 할 수 있습니다. &lt;a href=&quot;../object/preventextensions&quot;&gt; &lt;code&gt;Object.preventExtensions()&lt;/code&gt; &lt;/a&gt; 와 같은 방법 입니다.</target>
        </trans-unit>
        <trans-unit id="941c3446a3199bbb99c92b8d422a069acbe089ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Reflect.set&lt;/code&gt; method allows you to set a property on an object. It does property assignment and is like the &lt;a href=&quot;../../operators/property_accessors&quot;&gt;property accessor&lt;/a&gt; syntax as a function.</source>
          <target state="translated">&lt;code&gt;Reflect.set&lt;/code&gt; 의 방법을 사용하면 객체에 속성을 설정할 수 있습니다. 속성 할당을 수행하며 함수로서 &lt;a href=&quot;../../operators/property_accessors&quot;&gt;속성 접근 자&lt;/a&gt; 구문과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b304e4df14207b021ae9f7976187625bee6b192e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Reflect.setPrototypeOf&lt;/code&gt; method changes the prototype (i.e. the value of the internal &lt;code&gt;[[Prototype]]&lt;/code&gt; property) of the specified object.</source>
          <target state="translated">&lt;code&gt;Reflect.setPrototypeOf&lt;/code&gt; 에 있어서, 상기 프로토 타입 (즉, 내부의 값 변경 &lt;code&gt;[[Prototype]]&lt;/code&gt; 지정된 객체의 속성).</target>
        </trans-unit>
        <trans-unit id="28768566b9ebbc5b1f7805df7f78edafa41f4934" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Reflect&lt;/code&gt; object provides the following static functions which have the same names as the &lt;a href=&quot;proxy/handler&quot;&gt;proxy handler methods&lt;/a&gt;. Some of these methods are the same as corresponding methods on &lt;a href=&quot;object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">은 &lt;code&gt;Reflect&lt;/code&gt; 물체가 동일한 이름이 다음 정적 기능 제공 &lt;a href=&quot;proxy/handler&quot;&gt;프록시 처리기 방법&lt;/a&gt; . 이러한 메소드 중 일부는 &lt;a href=&quot;object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; 의&lt;/a&gt; 해당 메소드와 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="2ee5beb66ffe8f09c8a228966b2f72b5e2e48241" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RegExp.prototype&lt;/code&gt; property represents the prototype object for the &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">&lt;code&gt;RegExp.prototype&lt;/code&gt; 의 속성에 대한 프로토 타입 객체 나타내는 &lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt; 생성자를.</target>
        </trans-unit>
        <trans-unit id="570d3e4c661a27c8a8ead271959b5f089f9878f3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RegExp&lt;/code&gt; constructor creates a regular expression object for matching text with a pattern.</source>
          <target state="translated">&lt;code&gt;RegExp&lt;/code&gt; 생성자 패턴 텍스트와 일치하는 정규 표현 오브젝트를 생성한다.</target>
        </trans-unit>
        <trans-unit id="60b96d37624533a85e7433edd6782b3fbb87a5b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RegExp&lt;/code&gt; constructor no longer throws when the first argument is a &lt;code&gt;RegExp&lt;/code&gt; and the second argument is present. Introduces Unicode and sticky flags.</source>
          <target state="translated">&lt;code&gt;RegExp&lt;/code&gt; 첫번째 인수가되면 생성자가 더 이상 발생하지 &lt;code&gt;RegExp&lt;/code&gt; 과 두 번째 인자가 존재한다. 유니 코드 및 스티커 플래그를 소개합니다.</target>
        </trans-unit>
        <trans-unit id="5e2198ec631b23c3a344779780debe7b84c5223b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ResultObject&lt;/code&gt;'s instance member is then accessed, and the contained exported function invoked.</source>
          <target state="translated">그런 다음 &lt;code&gt;ResultObject&lt;/code&gt; 의 인스턴스 멤버에 액세스하고 포함 된 내 보낸 함수를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="4ea8be37a07ffe14772a2854fd53fa75fb450212" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Set&lt;/code&gt; object lets you store unique values of any type, whether &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Primitive&quot;&gt;primitive values&lt;/a&gt; or object references.</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; 객체는 모든 유형의 고유 한 값이든 저장할 수 있습니다 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Primitive&quot;&gt;원시 값&lt;/a&gt; 또는 객체 참조.</target>
        </trans-unit>
        <trans-unit id="34880c0508906d43d019cb591c6da56579f52f0e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Set&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; 객체입니다.</target>
        </trans-unit>
        <trans-unit id="a598c08aaa8ecf5c7c480e2837e96572304b6cef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Set&lt;/code&gt;&lt;strong&gt;iterator&lt;/strong&gt; function, which is the &lt;a href=&quot;values&quot;&gt;&lt;code&gt;values()&lt;/code&gt;&lt;/a&gt; function by default.</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; &lt;strong&gt;반복자&lt;/strong&gt; 는 IS 함수 &lt;a href=&quot;values&quot;&gt; &lt;code&gt;values()&lt;/code&gt; &lt;/a&gt; 기본적으로 기능.</target>
        </trans-unit>
        <trans-unit id="0c71fb0fbfa27a6157213819367f7b11882997d0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SharedArrayBuffer.prototype&lt;/code&gt; property represents the prototype for the &lt;a href=&quot;../sharedarraybuffer&quot;&gt;&lt;code&gt;SharedArrayBuffer&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;SharedArrayBuffer.prototype&lt;/code&gt; 의 속성에 대한 프로토 타입을 나타내는 &lt;a href=&quot;../sharedarraybuffer&quot;&gt; &lt;code&gt;SharedArrayBuffer&lt;/code&gt; 의&lt;/a&gt; 개체를.</target>
        </trans-unit>
        <trans-unit id="ea06a3e12d4141d776d10f098513731c0cdd10c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SharedArrayBuffer&lt;/code&gt; constructor's length property whose value is 1.</source>
          <target state="translated">&lt;code&gt;SharedArrayBuffer&lt;/code&gt; 의 값이 생성자의 길이 속성은 1입니다.</target>
        </trans-unit>
        <trans-unit id="672f134bc8206393caf4630923f5c2950d97f1fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SharedArrayBuffer&lt;/code&gt; object is used to represent a generic, fixed-length raw binary data buffer, similar to the &lt;a href=&quot;arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; object, but in a way that they can be used to create views on shared memory. Unlike an &lt;code&gt;ArrayBuffer&lt;/code&gt;, a &lt;code&gt;SharedArrayBuffer&lt;/code&gt; cannot become detached.</source>
          <target state="translated">&lt;code&gt;SharedArrayBuffer&lt;/code&gt; 의 목적은 유사한 일반적인 고정 길이 원시 이진 데이터 버퍼 나타내는데 사용 &lt;a href=&quot;arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; 의&lt;/a&gt; 객체 있지만 공유 메모리 뷰를 생성하는 데 사용될 수있는 방법이다. 달리 &lt;code&gt;ArrayBuffer&lt;/code&gt; 하는 &lt;code&gt;SharedArrayBuffer&lt;/code&gt; 은 분리 될 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="88ef77a0e9fb197ba353ecea29e41bbe0a4b15c3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;String.fromCodePoint&lt;/code&gt; method has been added to ECMAScript 2015 and may not be supported in all web browsers or environments yet. Use the code below for a polyfill:</source>
          <target state="translated">&lt;code&gt;String.fromCodePoint&lt;/code&gt; 의 방법은 ECMAScript를 2015에 추가되었습니다 아직 모든 웹 브라우저 나 환경에서 지원되지 않을 수 있습니다. 폴리 필에 아래 코드를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="ba63f93ea5376f91b5fd6a2f50242a83a2779f6d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;String.prototype&lt;/code&gt; property represents the &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; prototype object.</source>
          <target state="translated">&lt;code&gt;String.prototype&lt;/code&gt; 의 속성은 나타내는 &lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 프로토 타입 객체를.</target>
        </trans-unit>
        <trans-unit id="5e7d31df8e58e56f31f727605912a01954afb65e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;String&lt;/code&gt; global object is a constructor for strings or a sequence of characters.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; 전역 객체는 문자열 생성자 또는 일련의 문자입니다.</target>
        </trans-unit>
        <trans-unit id="4ab9d2be63079545f5c322e7a163da5705fd8972" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;String&lt;/code&gt; instance methods are also available in Firefox as of JavaScript 1.6 (&lt;strong&gt;not&lt;/strong&gt; part of the ECMAScript standard) on the &lt;code&gt;String&lt;/code&gt; object for applying &lt;code&gt;String&lt;/code&gt; methods to any object:</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; 인스턴스 메소드는 자바 스크립트 1.6 (의 파이어 폭스에서도 사용할 수 &lt;strong&gt;없습니다&lt;/strong&gt; 온 ECMA 스크립트 표준의 일부) &lt;code&gt;String&lt;/code&gt; 적용 대상 &lt;code&gt;String&lt;/code&gt; 개체에 방법 :</target>
        </trans-unit>
        <trans-unit id="9dbc42b5210da7f1b1f51151e4fb3f0d147cb43a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Symbol()&lt;/code&gt; function returns a value of type &lt;strong&gt;symbol&lt;/strong&gt;, has static properties that expose several members of built-in objects, has static methods that expose the global symbol registry, and resembles a built-in object class but is incomplete as a constructor because it does not support the syntax &quot;&lt;code&gt;new Symbol()&lt;/code&gt;&quot;.</source>
          <target state="translated">&lt;code&gt;Symbol()&lt;/code&gt; 함수는 형의 값 반환 &lt;strong&gt;기호를&lt;/strong&gt; 객체에 내장 된 글로벌 기호 레지스트리를 노출 정적 메서드가 여러 멤버를 노출 정적 속성을 가지고 있으며,이 개체 클래스 내장하지만 생성자 때문으로 불완전 유사 &quot; &lt;code&gt;new Symbol()&lt;/code&gt; &quot; 구문을 지원하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="2eeb1bb20ef431cf563f2cbfb734b8f4577eedef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Symbol.hasInstance&lt;/code&gt; well-known symbol is used to determine if a constructor object recognizes an object as its instance. The &lt;a href=&quot;../../operators/instanceof&quot;&gt;&lt;code&gt;instanceof&lt;/code&gt;&lt;/a&gt; operator's behavior can be customized by this symbol.</source>
          <target state="translated">&lt;code&gt;Symbol.hasInstance&lt;/code&gt; 잘 알려진 기호는 생성자 객체가 인스턴스와 객체를 인식하는지 확인하는 데 사용됩니다. &lt;a href=&quot;../../operators/instanceof&quot;&gt; &lt;code&gt;instanceof&lt;/code&gt; &lt;/a&gt; 연산자의 행동이 기호로 사용자 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b60212268a8a6dfd5a6005f758a9d98574b86f91" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Symbol.isConcatSpreadable&lt;/code&gt; well-known symbol is used to configure if an object should be flattened to its array elements when using the &lt;a href=&quot;../array/concat&quot;&gt;&lt;code&gt;Array.prototype.concat()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;Symbol.isConcatSpreadable&lt;/code&gt; 은 USING 때 오브젝트의 배열 요소 평탄화되어야 하는지를 잘 알려진 기호 구성하는 데 사용된다 &lt;a href=&quot;../array/concat&quot;&gt; &lt;code&gt;Array.prototype.concat()&lt;/code&gt; &lt;/a&gt; 방법.</target>
        </trans-unit>
        <trans-unit id="2fdffdb2718df5708641e8ddf4fc5c7a72a9011e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Symbol.toStringTag&lt;/code&gt; well-known symbol is a string valued property that is used in the creation of the default string description of an object. It is accessed internally by the &lt;a href=&quot;../object/tostring&quot;&gt;&lt;code&gt;Object.prototype.toString()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;Symbol.toStringTag&lt;/code&gt; 잘 알려진 심볼은 객체의 기본 문자열 설명의 생성에 사용되는 문자열 값의 속성입니다. &lt;a href=&quot;../object/tostring&quot;&gt; &lt;code&gt;Object.prototype.toString()&lt;/code&gt; &lt;/a&gt; 메소드에 의해 내부적으로 액세스됩니다 .</target>
        </trans-unit>
        <trans-unit id="17673a228ad0e13eb800ae35d1753fe2069b9f68" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Symbol.unscopables&lt;/code&gt; well-known symbol is used to specify an object value of whose own and inherited property names are excluded from the &lt;code&gt;&lt;a href=&quot;../../statements/with&quot;&gt;with&lt;/a&gt;&lt;/code&gt; environment bindings of the associated object.</source>
          <target state="translated">&lt;code&gt;Symbol.unscopables&lt;/code&gt; 잘 알려진 기호는 그 자신의 상속 재산의 이름에서 제외의 대상 값을 지정하는 데 사용됩니다 &lt;code&gt;&lt;a href=&quot;../../statements/with&quot;&gt;with&lt;/a&gt;&lt;/code&gt; 관련된 개체의 환경 바인딩.</target>
        </trans-unit>
        <trans-unit id="cc62c15ca64f49d9999d62a4fd880330e76b59d2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UTC()&lt;/code&gt; method differs from the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; constructor in two ways.</source>
          <target state="translated">&lt;code&gt;UTC()&lt;/code&gt; 로부터 방법 다릅니다 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 두 가지 방법으로 생성자입니다.</target>
        </trans-unit>
        <trans-unit id="f501e8c0da96de248d7c2768914219561bac1f65" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Uint16Array&lt;/code&gt; typed array represents an array of 16-bit unsigned integers in the platform byte order. If control over byte order is needed, use &lt;a href=&quot;dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt; instead. The contents are initialized to &lt;code&gt;0&lt;/code&gt;. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</source>
          <target state="translated">&lt;code&gt;Uint16Array&lt;/code&gt; 는 어레이 플랫폼 바이트 순서로 부호없는 16 비트 정수 배열을 나타내는 입력. 바이트 순서를 제어해야하는 경우 &lt;a href=&quot;dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; 를&lt;/a&gt; 대신 사용하십시오. 내용은 &lt;code&gt;0&lt;/code&gt; 으로 초기화됩니다 . 일단 설정되면 객체의 메서드를 사용하거나 표준 배열 인덱스 구문을 사용하여 (즉, 대괄호 표기법을 사용하여) 배열의 요소를 참조 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4a55ce5fe99c56fdceacc73b4b134514a93c3d78" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Uint32Array&lt;/code&gt; typed array represents an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use &lt;a href=&quot;dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt; instead. The contents are initialized to &lt;code&gt;0&lt;/code&gt;. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</source>
          <target state="translated">&lt;code&gt;Uint32Array&lt;/code&gt; 는 어레이 플랫폼 바이트 순서로 부호없는 32 비트 정수 배열을 나타내는 입력. 바이트 순서를 제어해야하는 경우 &lt;a href=&quot;dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; 를&lt;/a&gt; 대신 사용하십시오. 내용은 &lt;code&gt;0&lt;/code&gt; 으로 초기화됩니다 . 일단 설정되면 객체의 메서드를 사용하거나 표준 배열 인덱스 구문을 사용하여 (즉, 대괄호 표기법을 사용하여) 배열의 요소를 참조 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6758579c79dd87294c5dc236825268d167d8b7b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Uint8Array&lt;/code&gt; typed array represents an array of 8-bit unsigned integers. The contents are initialized to &lt;code&gt;0&lt;/code&gt;. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</source>
          <target state="translated">&lt;code&gt;Uint8Array&lt;/code&gt; 는 어레이 8 비트 부호없는 정수의 배열을 나타내는 입력. 내용은 &lt;code&gt;0&lt;/code&gt; 으로 초기화됩니다 . 일단 설정되면 객체의 메서드를 사용하거나 표준 배열 인덱스 구문을 사용하여 (즉, 대괄호 표기법을 사용하여) 배열의 요소를 참조 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="becefe67b2c4fe9672fcfd14c35de7d3fc5a570d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Uint8ClampedArray&lt;/code&gt; typed array represents an array of 8-bit unsigned integers clamped to 0-255; if you specified a value that is out of the range of [0,255], 0 or 255 will be set instead; if you specify a non-integer, the nearest integer will be set. The contents are initialized to &lt;code&gt;0&lt;/code&gt;. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</source>
          <target state="translated">&lt;code&gt;Uint8ClampedArray&lt;/code&gt; 는 어레이 0-255 클램핑 8 비트 부호없는 정수의 배열을 나타내는 입력; [0,255] 범위를 벗어난 값을 지정하면 0 또는 255가 대신 설정됩니다. 정수가 아닌 값을 지정하면 가장 가까운 정수가 설정됩니다. 내용은 &lt;code&gt;0&lt;/code&gt; 으로 초기화됩니다 . 일단 설정되면 객체의 메서드를 사용하거나 표준 배열 인덱스 구문을 사용하여 (즉, 대괄호 표기법을 사용하여) 배열의 요소를 참조 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="df457713e029746440c719b5ccfea9d29d4cb9ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WeakMap&lt;/code&gt; object is a collection of key/value pairs in which the keys are weakly referenced. The keys must be objects and the values can be arbitrary values.</source>
          <target state="translated">&lt;code&gt;WeakMap&lt;/code&gt; 의 목적은 키가 약하게 참조되는 키 / 값 쌍의 컬렉션이다. 키는 객체 여야하며 값은 임의의 값일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9d06504624ab1755b379a233018475c52e069789" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WeakMap&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;WeakMap&lt;/code&gt; 의 객체입니다.</target>
        </trans-unit>
        <trans-unit id="5c11f82ca68af9ed6ac53fcd220f3d8dbaaaf72d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WeakSet&lt;/code&gt; is &lt;em&gt;weak&lt;/em&gt;: References to objects in the collection are held weakly. If there is no other reference to an object stored in the &lt;code&gt;WeakSet&lt;/code&gt;, they can be garbage collected. That also means that there is no list of current objects stored in the collection. &lt;code&gt;WeakSets&lt;/code&gt; are not enumerable.</source>
          <target state="translated">&lt;code&gt;WeakSet&lt;/code&gt; 는 이다 &lt;em&gt;약한&lt;/em&gt; : 컬렉션의 개체에 대한 참조가 약하게 개최됩니다. &lt;code&gt;WeakSet&lt;/code&gt; 에 저장된 객체에 대한 다른 참조가 없으면 가비지 수집 될 수 있습니다. 또한 컬렉션에 저장된 현재 객체 목록이 없음을 의미합니다. &lt;code&gt;WeakSets&lt;/code&gt; 은 열거 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="d5058fc0aed6629cbc33fced5d309e3ee1f7316d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WeakSet&lt;/code&gt; object lets you store weakly held &lt;em&gt;objects&lt;/em&gt; in a collection.</source>
          <target state="translated">&lt;code&gt;WeakSet&lt;/code&gt; 의 객체는 약하게 개최 저장할 수 있습니다 &lt;em&gt;개체를&lt;/em&gt; 컬렉션의.</target>
        </trans-unit>
        <trans-unit id="01d56084580640fa957fcf6427c5232652a130db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WeakSet&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;WeakSet&lt;/code&gt; 의 객체입니다.</target>
        </trans-unit>
        <trans-unit id="a8c89dc484707bb11be96fc5d01e0a0063acb5ac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WebAssembly.Instance()&lt;/code&gt; constructor function can be called to synchronously instantiate a given &lt;a href=&quot;module&quot;&gt;&lt;code&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; object. However, the primary way to get an &lt;code&gt;Instance&lt;/code&gt; is through the asynchronous &lt;a href=&quot;instantiatestreaming&quot;&gt;&lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">&lt;code&gt;WebAssembly.Instance()&lt;/code&gt; 생성자 함수는 동기 소정의 인스턴스를 호출 할 수 &lt;a href=&quot;module&quot;&gt; &lt;code&gt;WebAssembly.Module&lt;/code&gt; 의&lt;/a&gt; 개체. 그러나 &lt;code&gt;Instance&lt;/code&gt; 를 얻는 기본 방법 은 비동기 &lt;a href=&quot;instantiatestreaming&quot;&gt; &lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt; &lt;/a&gt; 함수를 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="431715582373fc3771aab674c546503fbe9712d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WebAssembly.compile()&lt;/code&gt; function compiles a &lt;a href=&quot;module&quot;&gt;&lt;code&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; from WebAssembly binary code. This function is useful if it is necessary to a compile a module before it can be instantiated (otherwise, the &lt;a href=&quot;instantiate&quot;&gt;&lt;code&gt;WebAssembly.instantiate()&lt;/code&gt;&lt;/a&gt; function should be used).</source>
          <target state="translated">&lt;code&gt;WebAssembly.compile()&lt;/code&gt; 함수는 컴파일 &lt;a href=&quot;module&quot;&gt; &lt;code&gt;WebAssembly.Module&lt;/code&gt; &lt;/a&gt; WebAssembly 바이너리 코드에서합니다. 이 함수는 모듈을 인스턴스화하기 전에 모듈을 컴파일 &lt;a href=&quot;instantiate&quot;&gt; &lt;code&gt;WebAssembly.instantiate()&lt;/code&gt; &lt;/a&gt; 경우에 유용합니다 (그렇지 않으면 WebAssembly.instantiate () 함수를 사용해야 함).</target>
        </trans-unit>
        <trans-unit id="88cbd7022f0dc142a0272f425d6433132bf50d15" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WebAssembly.compileStreaming()&lt;/code&gt; function compiles a &lt;a href=&quot;module&quot;&gt;&lt;code&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; directly from a streamed underlying source. This function is useful if it is necessary to a compile a module before it can be instantiated (otherwise, the &lt;a href=&quot;instantiatestreaming&quot;&gt;&lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt;&lt;/a&gt; function should be used).</source>
          <target state="translated">&lt;code&gt;WebAssembly.compileStreaming()&lt;/code&gt; 함수는 컴파일 &lt;a href=&quot;module&quot;&gt; &lt;code&gt;WebAssembly.Module&lt;/code&gt; &lt;/a&gt; A는 기본 소스를 스트리밍에서 직접합니다. 이 함수는 모듈을 인스턴스화하기 전에 모듈을 컴파일 &lt;a href=&quot;instantiatestreaming&quot;&gt; &lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt; &lt;/a&gt; 경우에 유용합니다 (그렇지 않으면 WebAssembly.instantiateStreaming () 함수를 사용해야 함).</target>
        </trans-unit>
        <trans-unit id="08567726bd617fa9035a47d055a4d3216e2c81e4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WebAssembly.customSections()&lt;/code&gt; function returns a copy of the contents of all custom sections in the given module with the given string name.</source>
          <target state="translated">&lt;code&gt;WebAssembly.customSections()&lt;/code&gt; 함수는 주어진 문자열 이름으로 주어진 모듈에서 모든 사용자 정의 섹션의 내용의 카피를 돌려줍니다.</target>
        </trans-unit>
        <trans-unit id="e0625c0520f6ee2a799a7c133d2cafd74185c195" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WebAssembly.exports()&lt;/code&gt; function returns an array containing descriptions of all the declared exports of the given &lt;code&gt;Module&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;WebAssembly.exports()&lt;/code&gt; 함수는 주어진 모든 선언 수출에 대한 설명이 포함 된 배열을 반환 &lt;code&gt;Module&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="160b1badc18cb49f8201fc4bef67fddd7d3b9e66" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WebAssembly.imports()&lt;/code&gt; function returns an array containing descriptions of all the declared imports of the given &lt;code&gt;Module&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;WebAssembly.imports()&lt;/code&gt; 함수는 소정의 선언 된 모든 수입품의 설명 포함한 배열 반환 &lt;code&gt;Module&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1e6f8615f0734b1d5bb89170d09bfbbcd77c103b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WebAssembly.instantiate()&lt;/code&gt; function allows you to compile and instantiate WebAssembly code. This function has two overloads:</source>
          <target state="translated">&lt;code&gt;WebAssembly.instantiate()&lt;/code&gt; 함수를 사용하고 인스턴스화 WebAssembly 코드를 컴파일 할 수 있습니다. 이 기능에는 두 가지 과부하가 있습니다.</target>
        </trans-unit>
        <trans-unit id="f11662796a3c2b4d0cc4297914cb2e15741dc2ed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt; function compiles and instantiates a WebAssembly module directly from a streamed underlying source. This is the most efficient, optimized way to load wasm code.</source>
          <target state="translated">&lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt; 함수를 컴파일하고,이 기본 스트리밍 소스로부터 직접 WebAssembly 모듈을 인스턴스화. 이것은 wasm 코드를로드하는 가장 효율적이고 최적화 된 방법입니다.</target>
        </trans-unit>
        <trans-unit id="513a4a761419c3c18faafd5f4a429e08153aa790" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WebAssembly.validate()&lt;/code&gt; function validates a given &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;typed array&lt;/a&gt; of WebAssembly binary code, returning whether the bytes form a valid wasm module (&lt;code&gt;true&lt;/code&gt;) or not (&lt;code&gt;false&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;WebAssembly.validate()&lt;/code&gt; 함수는 주어진 유효화 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;입력 어레이&lt;/a&gt; 바이트가 유효한 wasm 모듈 (형성 여부 복귀 WebAssembly 이진 코드가 &lt;code&gt;true&lt;/code&gt; ) 아닌지 ( &lt;code&gt;false&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="b7b528dd62767beb2683a49d53c7b5236878ea86" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WebAssembly&lt;/code&gt; JavaScript object acts as the namespace for all &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly&quot;&gt;WebAssembly&lt;/a&gt;-related functionality.</source>
          <target state="translated">&lt;code&gt;WebAssembly&lt;/code&gt; 자바 스크립트 객체는 모든 네임 스페이스 역할을 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly&quot;&gt;WebAssembly&lt;/a&gt; - 관련 기능을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="5f7a8cc3a9371437a23053a36f921a1730e516bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;[@@iterator]()&lt;/code&gt; method returns a new &lt;code&gt;Iterator&lt;/code&gt; object that iterates over the code points of a String value, returning each code point as a String value.</source>
          <target state="translated">&lt;code&gt;[@@iterator]()&lt;/code&gt; 메소드가 복귀 새로운 &lt;code&gt;Iterator&lt;/code&gt; 문자열 값의 코드 점을 반복은 문자열 값으로 각 코드 포인트를 반환한다는 목적.</target>
        </trans-unit>
        <trans-unit id="d7edbb6e8ed718ecee2482e335fb5718a48701f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;[@@match]()&lt;/code&gt; method retrieves the matches when matching a &lt;em&gt;string&lt;/em&gt; against a &lt;em&gt;regular expression&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;[@@match]()&lt;/code&gt; 일치하는 경우에있어서, 상기 일치하는 검색 &lt;em&gt;문자열&lt;/em&gt; 대하여 &lt;em&gt;정규 표현&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="5803ecea92c3c2ee4eed4f00d6d6c5bc4cd46f5d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;[@@replace]()&lt;/code&gt; method replaces some or all matches of a &lt;code&gt;this&lt;/code&gt; pattern in a string by a &lt;code&gt;replacement&lt;/code&gt;, and returns the result of the replacement as a new string. The &lt;code&gt;replacement&lt;/code&gt; can be a string or a function to be called for each match.</source>
          <target state="translated">&lt;code&gt;[@@replace]()&lt;/code&gt; 메소드는 일부 또는 전부 일치 대체 &lt;code&gt;this&lt;/code&gt; a로 문자열 패턴을 &lt;code&gt;replacement&lt;/code&gt; 하고, 새로운 캐릭터로 여분의 결과를 반환한다. &lt;code&gt;replacement&lt;/code&gt; 문자열이나 함수가 각각 경기를 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="702debe49ebbe75d5bd74b0679e78ca35620a7da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;[@@search]()&lt;/code&gt; method executes a search for a match between a &lt;code&gt;this&lt;/code&gt; regular expression and a string.</source>
          <target state="translated">&lt;code&gt;[@@search]()&lt;/code&gt; 메소드는가 일치하는 검색 실행 &lt;code&gt;this&lt;/code&gt; 정규 표현식, 문자열.</target>
        </trans-unit>
        <trans-unit id="6b8c4cfaddc77f1249280ab915686e7bb63bc284" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;[@@split]()&lt;/code&gt; method splits a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; object into an array of strings by separating the string into substrings.</source>
          <target state="translated">&lt;code&gt;[@@split]()&lt;/code&gt; 메소드는 분할 &lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 문자열에 문자열을 분리하여 문자열 배열로 개체.</target>
        </trans-unit>
        <trans-unit id="1a9e1a3950618acc993f18874eb3cd0cc985d8f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; method of &lt;a href=&quot;../symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt; returns the primitive value of a Symbol object as a Symbol data type. The &lt;code&gt;hint&lt;/code&gt; argument is not used.</source>
          <target state="translated">&lt;a href=&quot;../symbol&quot;&gt; &lt;code&gt;Symbol&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; 메서드 는 Symbol 객체의 프리미티브 값을 Symbol 데이터 형식으로 반환합니다. &lt;code&gt;hint&lt;/code&gt; 인수는 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ad1db902e858dd1bcd93073c9aef8c9165d1cf55" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; method of the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object returns a primitive value, that is either of type number or of type string.</source>
          <target state="translated">&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체 의 &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; 메서드는 숫자 유형 또는 문자열 유형의 기본 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ae55b862b874f5aa4c190fb07cb31113ac34fd4a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;__defineGetter__&lt;/code&gt; allows a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/get&quot;&gt;getter&lt;/a&gt; to be defined on a pre-existing object.</source>
          <target state="translated">&lt;code&gt;__defineGetter__&lt;/code&gt; 는 수 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/get&quot;&gt;게터는&lt;/a&gt; 기존의 객체를 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="df282761b2e5875f7eb96f9bb6d34ddc61ba61d9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;__defineSetter__&lt;/code&gt; method allows a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/set&quot;&gt;setter&lt;/a&gt; to be defined on a pre-existing object.</source>
          <target state="translated">&lt;code&gt;__defineSetter__&lt;/code&gt; 의 방법은 허용 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/set&quot;&gt;세터&lt;/a&gt; 기존 객체에 정의된다.</target>
        </trans-unit>
        <trans-unit id="88656395b7a7a6c591f6a0068a0e8a228ecb8c3f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;__proto__&lt;/code&gt; getter function exposes the value of the internal &lt;code&gt;[[Prototype]]&lt;/code&gt; of an object. For objects created using an object literal, this value is &lt;a href=&quot;prototype&quot;&gt;&lt;code&gt;Object.prototype&lt;/code&gt;&lt;/a&gt;. For objects created using array literals, this value is &lt;a href=&quot;../array/prototype&quot;&gt;&lt;code&gt;Array.prototype&lt;/code&gt;&lt;/a&gt;. For functions, this value is &lt;a href=&quot;../function/prototype&quot;&gt;&lt;code&gt;Function.prototype&lt;/code&gt;&lt;/a&gt;. For objects created using &lt;code&gt;new fun&lt;/code&gt;, where &lt;code&gt;fun&lt;/code&gt; is one of the built-in constructor functions provided by JavaScript (&lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;, and so on &amp;mdash; including new constructors added as JavaScript evolves), this value is always &lt;code&gt;fun.prototype&lt;/code&gt;. For objects created using &lt;code&gt;new fun&lt;/code&gt;, where &lt;code&gt;fun&lt;/code&gt; is a function defined in a script, this value is the value of &lt;code&gt;fun.prototype&lt;/code&gt;. (That is, if the constructor didn't return an other object explicitly, or the &lt;code&gt;fun.prototype&lt;/code&gt; has been reassigned since the instance was created).</source>
          <target state="translated">&lt;code&gt;__proto__&lt;/code&gt; 의 게터 기능은 내부의 노출 값 &lt;code&gt;[[Prototype]]&lt;/code&gt; 물체한다. 객체 리터럴을 사용하여 만든 객체의 경우이 값은 &lt;a href=&quot;prototype&quot;&gt; &lt;code&gt;Object.prototype&lt;/code&gt; &lt;/a&gt; 입니다. 배열 리터럴을 사용하여 생성 된 객체의 경우이 값은 &lt;a href=&quot;../array/prototype&quot;&gt; &lt;code&gt;Array.prototype&lt;/code&gt; &lt;/a&gt; 입니다. 함수의 경우이 값은 &lt;a href=&quot;../function/prototype&quot;&gt; &lt;code&gt;Function.prototype&lt;/code&gt; &lt;/a&gt; 입니다. &lt;code&gt;new fun&lt;/code&gt; 사용하여 만든 객체의 경우 &lt;code&gt;fun&lt;/code&gt; 은 JavaScript에서 제공하는 내장 생성자 함수 중 하나입니다 ( &lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;JavaScript가 발전함에 따라 추가 된 새로운 생성자를 포함하여)이 값은 항상 &lt;code&gt;fun.prototype&lt;/code&gt; 입니다. 사용하여 생성 된 객체의 &lt;code&gt;new fun&lt;/code&gt; , &lt;code&gt;fun&lt;/code&gt; 스크립트에서 정의 된 함수입니다,이 값은의 값입니다 &lt;code&gt;fun.prototype&lt;/code&gt; 은 . 즉, 생성자가 다른 객체를 명시 적으로 반환하지 않았거나 인스턴스가 생성 된 후 &lt;code&gt;fun.prototype&lt;/code&gt; 이 다시 할당 된 경우입니다.</target>
        </trans-unit>
        <trans-unit id="9a4587848d9799cdf3cf0840f3aad39f67d2da66" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;__proto__&lt;/code&gt; property can also be used in an object literal definition to set the object &lt;code&gt;[[Prototype]]&lt;/code&gt; on creation, as an alternative to &lt;a href=&quot;create&quot;&gt;&lt;code&gt;Object.create()&lt;/code&gt;&lt;/a&gt;. See: &lt;a href=&quot;../../operators/object_initializer&quot;&gt;object initializer / literal syntax&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;__proto__&lt;/code&gt; 속성은 또한 개체를 설정하는 것을 목적으로 문자 정의에 사용될 수있다 &lt;code&gt;[[Prototype]]&lt;/code&gt; 생성에 대한 대안으로서 &lt;a href=&quot;create&quot;&gt; &lt;code&gt;Object.create()&lt;/code&gt; &lt;/a&gt; . &lt;a href=&quot;../../operators/object_initializer&quot;&gt;객체 이니셜 라이저 / 리터럴 구문을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d227e2d5482783082d004650b511f91313f8e959" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;__proto__&lt;/code&gt; property is a simple accessor property on &lt;a href=&quot;prototype&quot;&gt;&lt;code&gt;Object.prototype&lt;/code&gt;&lt;/a&gt; consisting of a getter and setter function. A property access for &lt;code&gt;__proto__&lt;/code&gt; that eventually consults &lt;a href=&quot;prototype&quot;&gt;&lt;code&gt;Object.prototype&lt;/code&gt;&lt;/a&gt; will find this property, but an access that does not consult &lt;a href=&quot;prototype&quot;&gt;&lt;code&gt;Object.prototype&lt;/code&gt;&lt;/a&gt; will not find it. If some other &lt;code&gt;__proto__&lt;/code&gt; property is found before &lt;a href=&quot;prototype&quot;&gt;&lt;code&gt;Object.prototype&lt;/code&gt;&lt;/a&gt; is consulted, that property will hide the one found on &lt;a href=&quot;prototype&quot;&gt;&lt;code&gt;Object.prototype&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;__proto__&lt;/code&gt; 속성에 간단한 접근 속성이다 &lt;a href=&quot;prototype&quot;&gt; &lt;code&gt;Object.prototype&lt;/code&gt; 에&lt;/a&gt; 게터와 세터 기능 이루어지는. 결국 &lt;a href=&quot;prototype&quot;&gt; &lt;code&gt;Object.prototype&lt;/code&gt; &lt;/a&gt; 을 참조하는 &lt;code&gt;__proto__&lt;/code&gt; 에 대한 속성 액세스 는 이 속성을 찾지 만 &lt;a href=&quot;prototype&quot;&gt; &lt;code&gt;Object.prototype&lt;/code&gt; &lt;/a&gt; 을 참조하지 않는 액세스는 찾을 수 없습니다. &lt;a href=&quot;prototype&quot;&gt; &lt;code&gt;Object.prototype&lt;/code&gt; &lt;/a&gt; 을 참조 하기 전에 다른 &lt;code&gt;__proto__&lt;/code&gt; 속성을 찾은 경우 해당 속성은 &lt;a href=&quot;prototype&quot;&gt; &lt;code&gt;Object.prototype&lt;/code&gt; &lt;/a&gt; 에서 찾은 속성을 숨 깁니다 .</target>
        </trans-unit>
        <trans-unit id="79b845be957203ffd43b7971d99febd2b76a1f2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;__proto__&lt;/code&gt; property of &lt;a href=&quot;prototype&quot;&gt;&lt;code&gt;Object.prototype&lt;/code&gt;&lt;/a&gt; is an accessor property (a getter function and a setter function) that exposes the internal &lt;code&gt;[[Prototype]]&lt;/code&gt; (either an object or &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;) of the object through which it is accessed.</source>
          <target state="translated">&lt;a href=&quot;prototype&quot;&gt; &lt;code&gt;Object.prototype&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;__proto__&lt;/code&gt; 속성은 접근하는 객체 의 내부 &lt;code&gt;[[Prototype]]&lt;/code&gt; (객체 또는 &lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt; ) 을 노출하는 접근 자 속성 (게터 함수 및 세터 함수)입니다 .</target>
        </trans-unit>
        <trans-unit id="073f9279702f70da18b8d56744e49fc289cd7b00" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;__proto__&lt;/code&gt; setter allows the &lt;code&gt;[[Prototype]]&lt;/code&gt; of an object to be mutated. The object must be extensible according to &lt;a href=&quot;isextensible&quot;&gt;&lt;code&gt;Object.isExtensible()&lt;/code&gt;&lt;/a&gt;: if it is not, a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is thrown. The value provided must be an object or &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;. Providing any other value will do nothing.</source>
          <target state="translated">&lt;code&gt;__proto__&lt;/code&gt; 세터는 허용 &lt;code&gt;[[Prototype]]&lt;/code&gt; 물체의 변이한다. &lt;a href=&quot;isextensible&quot;&gt; &lt;code&gt;Object.isExtensible()&lt;/code&gt; &lt;/a&gt; 에 따라 객체를 확장 할 수 있어야합니다 . 그렇지 않은 경우 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 가 발생합니다. 제공된 값은 객체이거나 &lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt; 이어야합니다 . 다른 가치를 제공하는 것은 아무 것도하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="bcffaf9d58caee22bc68a42b2ea1dc4874960802" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;anchor()&lt;/code&gt; method creates an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a&quot;&gt;&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML anchor element that is used as a hypertext target.</source>
          <target state="translated">&lt;code&gt;anchor()&lt;/code&gt; 메소드는 생성 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a&quot;&gt; &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; &lt;/a&gt; 하이퍼 대상으로 사용되는 HTML 앵커 요소.</target>
        </trans-unit>
        <trans-unit id="301e17caff65a70e4a97e5350f7b3f0e8277e90f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;apply&lt;/code&gt; method can return any value.</source>
          <target state="translated">&lt;code&gt;apply&lt;/code&gt; 방법은 값을 반환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="651ec3657f151b026dde895f6eebe20fcc7c3a26" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;arguments.callee&lt;/code&gt; property contains the currently executing function.</source>
          <target state="translated">&lt;code&gt;arguments.callee&lt;/code&gt; 를 속성은 현재 실행중인 기능이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="c1aa534c48a7543729c424e8c8ec09cadd669f68" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;arguments.length&lt;/code&gt; property contains the number of arguments passed to the function.</source>
          <target state="translated">&lt;code&gt;arguments.length&lt;/code&gt; 속성은 함수에 전달 된 인수의 수를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="59bbb7f7119de36cfcf32641ad6d77b38553ba5a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;arguments&lt;/code&gt; object</source>
          <target state="translated">&lt;code&gt;arguments&lt;/code&gt; 객체</target>
        </trans-unit>
        <trans-unit id="cddfc2bc8a7e8c4c52b64a81d0fc5361db444af6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;arguments&lt;/code&gt; object can be used in conjunction with &lt;a href=&quot;rest_parameters&quot;&gt;rest&lt;/a&gt;, &lt;a href=&quot;default_parameters&quot;&gt;default&lt;/a&gt;, and &lt;a href=&quot;../operators/destructuring_assignment&quot;&gt;destructured&lt;/a&gt; parameters.</source>
          <target state="translated">&lt;code&gt;arguments&lt;/code&gt; 객체와 함께 사용할 수 있습니다 &lt;a href=&quot;rest_parameters&quot;&gt;나머지&lt;/a&gt; , &lt;a href=&quot;default_parameters&quot;&gt;기본&lt;/a&gt; 및 &lt;a href=&quot;../operators/destructuring_assignment&quot;&gt;탈구&lt;/a&gt; 매개 변수를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="a141af77cbe04a88a45af296fd49cc1fdd744329" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;arguments&lt;/code&gt; object is a local variable available within all non-&lt;a href=&quot;arrow_functions&quot;&gt;arrow&lt;/a&gt; functions. You can refer to a function's arguments inside that function by using its &lt;code&gt;arguments&lt;/code&gt; object. It has entries for each argument the function was called with, with the first entry's index at 0.</source>
          <target state="translated">&lt;code&gt;arguments&lt;/code&gt; 목적은 모든 가능한 비 내의 로컬 변수 &lt;a href=&quot;arrow_functions&quot;&gt;화살표&lt;/a&gt; 기능한다. &lt;code&gt;arguments&lt;/code&gt; 객체 를 사용하여 해당 함수 내에서 함수의 인수를 참조 할 수 있습니다 . 함수가 호출 된 각 인수에 대한 항목이 있으며 첫 번째 항목의 색인은 0입니다.</target>
        </trans-unit>
        <trans-unit id="60575e89f78ff2e0d50e081c0acd7b31a68e8313" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;arguments&lt;/code&gt; object is not an &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;. It is similar, but does not have any &lt;code&gt;Array&lt;/code&gt; properties except &lt;code&gt;&lt;a href=&quot;arguments/length&quot;&gt;length&lt;/a&gt;&lt;/code&gt;. For example, it does not have the &lt;code&gt;&lt;a href=&quot;../global_objects/array/pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt; method. However, it can be converted to a real &lt;code&gt;Array&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;arguments&lt;/code&gt; 객체가 아닌 &lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; . 비슷하지만 &lt;code&gt;&lt;a href=&quot;arguments/length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; 이외의 &lt;code&gt;Array&lt;/code&gt; 속성 은 없습니다 . 예를 들어, &lt;code&gt;&lt;a href=&quot;../global_objects/array/pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt; 메소드 가 없습니다 . 그러나 실제 &lt;code&gt;Array&lt;/code&gt; 로 변환 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3dd0f883876fb508ee5f1ca7705e886193257634" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;arguments&lt;/code&gt; object is useful for functions called with more arguments than they are formally declared to accept. This technique is useful for functions that can be passed a variable number of arguments, such as &lt;code&gt;&lt;a href=&quot;../global_objects/math/min&quot;&gt;Math.min()&lt;/a&gt;&lt;/code&gt;. This example function accepts any number of string arguments and returns the longest one:</source>
          <target state="translated">&lt;code&gt;arguments&lt;/code&gt; 목적은 공식적으로 받아 들일 선언보다 더 많은 인수로 호출되는 함수에 유용합니다. 이 기술은 &lt;code&gt;&lt;a href=&quot;../global_objects/math/min&quot;&gt;Math.min()&lt;/a&gt;&lt;/code&gt; 과 같이 다양한 개수의 인수를 전달할 수있는 함수에 유용합니다 . 이 예제 함수는 많은 수의 문자열 인수를 허용하고 가장 긴 인수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="50f2fe5d7c6bfb8cfe3c7ec7d417908818ff38e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;async function&lt;/code&gt; defines an async function expression.</source>
          <target state="translated">&lt;code&gt;async function&lt;/code&gt; 비동기 함수 표현식을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="e4765d37e0ea2da1075b6c56191e186797071e82" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;async function&lt;/code&gt; keyword can be used to define &lt;code&gt;async&lt;/code&gt; functions inside expressions.</source>
          <target state="translated">&lt;code&gt;async function&lt;/code&gt; 키워드는 정의 할 수 있습니다 &lt;code&gt;async&lt;/code&gt; 식의 내부 기능을.</target>
        </trans-unit>
        <trans-unit id="41545b3d9faec85b5211c3d912f75615a0f76938" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;await&lt;/code&gt; expression causes &lt;code&gt;async&lt;/code&gt; function execution to pause until a &lt;code&gt;Promise&lt;/code&gt; is resolved, that is fulfilled or rejected, and to resume execution of the &lt;code&gt;async&lt;/code&gt; function after fulfillment. When resumed, the value of the &lt;code&gt;await&lt;/code&gt; expression is that of the fulfilled &lt;code&gt;Promise&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;await&lt;/code&gt; 를 표현 원인 &lt;code&gt;async&lt;/code&gt; 때까지 함수 실행을 일시 중지 &lt;code&gt;Promise&lt;/code&gt; 성취 또는 거부하고, 실행 다시 시작되는, 해결 &lt;code&gt;async&lt;/code&gt; 이행 후 기능. 재개되면 &lt;code&gt;await&lt;/code&gt; 식 의 값은 이행 된 &lt;code&gt;Promise&lt;/code&gt; 의 값입니다 .</target>
        </trans-unit>
        <trans-unit id="3c1fc437d45803033cc9f40384b0bba97c9f9319" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;await&lt;/code&gt; operator is used to wait for a &lt;a href=&quot;../global_objects/promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt;. It can only be used inside an &lt;a href=&quot;../statements/async_function&quot;&gt;&lt;code&gt;async function&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;await&lt;/code&gt; 운전자는 기다리는 데 사용되는 &lt;a href=&quot;../global_objects/promise&quot;&gt; &lt;code&gt;Promise&lt;/code&gt; &lt;/a&gt; . &lt;a href=&quot;../statements/async_function&quot;&gt; &lt;code&gt;async function&lt;/code&gt; &lt;/a&gt; 내에서만 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3b476f578e38d80f45dbe153e1487f74e1f2f140" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;big()&lt;/code&gt; method creates a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/big&quot;&gt;&lt;code&gt;&amp;lt;big&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML element that causes a string to be displayed in a big font.</source>
          <target state="translated">&lt;code&gt;big()&lt;/code&gt; 메소드는 생성 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/big&quot;&gt; &lt;code&gt;&amp;lt;big&amp;gt;&lt;/code&gt; &lt;/a&gt; 큰 폰트에 표시되는 문자열을 일으키는 HTML 요소.</target>
        </trans-unit>
        <trans-unit id="3af4ea81fb69059eb53ae61ff126bfcb192cbde2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;big()&lt;/code&gt; method embeds a string in a &lt;code&gt;&amp;lt;big&amp;gt;&lt;/code&gt; tag: &lt;code&gt;&quot;&amp;lt;big&amp;gt;str&amp;lt;/big&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;big()&lt;/code&gt; 메소드는 문자열 내장 &lt;code&gt;&amp;lt;big&amp;gt;&lt;/code&gt; 태그를 : &lt;code&gt;&quot;&amp;lt;big&amp;gt;str&amp;lt;/big&amp;gt;&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2a8e00a25499e30efadb3dddfe9a14410a06bc7f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;bind&lt;/code&gt; method</source>
          <target state="translated">&lt;code&gt;bind&lt;/code&gt; 방법</target>
        </trans-unit>
        <trans-unit id="8132b3a6967af37f37dd3ef765aab50d8c11c583" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;blink()&lt;/code&gt; method creates a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blink&quot;&gt;&lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML element that causes a string to blink.</source>
          <target state="translated">&lt;code&gt;blink()&lt;/code&gt; 메소드는 생성 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blink&quot;&gt; &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; &lt;/a&gt; 깜박 문자열을 일으키는 HTML 요소.</target>
        </trans-unit>
        <trans-unit id="3cd0f81d248508c433f8fce895a74aa073df7ead" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;blink()&lt;/code&gt; method embeds a string in a &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tag: &lt;code&gt;&quot;&amp;lt;blink&amp;gt;str&amp;lt;/blink&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;blink()&lt;/code&gt; 메소드는 문자열 매립 &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; 태그 : &lt;code&gt;&quot;&amp;lt;blink&amp;gt;str&amp;lt;/blink&amp;gt;&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4d21b9bdcf585076eb4f96378bf162b67dd2602a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;bold()&lt;/code&gt; method creates a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/b&quot;&gt;&lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML element that causes a string to be displayed as bold.</source>
          <target state="translated">&lt;code&gt;bold()&lt;/code&gt; 메소드는 생성 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/b&quot;&gt; &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; &lt;/a&gt; 굵게 표시 문자열을 일으키는 HTML 요소.</target>
        </trans-unit>
        <trans-unit id="711ba8bfc713db15b64fe905729caa25c32b4e76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;bold()&lt;/code&gt; method embeds a string in a &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; tag: &lt;code&gt;&quot;&amp;lt;b&amp;gt;str&amp;lt;/b&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;bold()&lt;/code&gt; 메소드는 문자열 매립 &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; 태그 : &lt;code&gt;&quot;&amp;lt;b&amp;gt;str&amp;lt;/b&amp;gt;&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7441f09fd242afe09a0870fa34657501f6b21c35" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;break&lt;/code&gt; statement includes an optional label that allows the program to break out of a labeled statement. The &lt;code&gt;break&lt;/code&gt; statement needs to be nested within the referenced label. The labeled statement can be any &lt;a href=&quot;block&quot;&gt;&lt;code&gt;block&lt;/code&gt;&lt;/a&gt; statement; it does not have to be preceded by a loop statement.</source>
          <target state="translated">&lt;code&gt;break&lt;/code&gt; 문은 프로그램이 표시된 문으로 탈출 할 수있는 옵션 라벨이 포함되어 있습니다. &lt;code&gt;break&lt;/code&gt; 문은 참조 라벨 내에 중첩 될 필요가있다. 레이블이 지정된 명령문은 모든 &lt;a href=&quot;block&quot;&gt; &lt;code&gt;block&lt;/code&gt; &lt;/a&gt; 명령문 일 수 있습니다 . 루프 문 앞에 올 필요는 없습니다.</target>
        </trans-unit>
        <trans-unit id="206dae9becb9d9cba3f7116dc25d9ec0b751721a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; accessor property represents the &lt;a href=&quot;../arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../sharedarraybuffer&quot;&gt;&lt;code&gt;SharedArrayBuffer&lt;/code&gt;&lt;/a&gt; referenced by the &lt;code&gt;DataView&lt;/code&gt; at construction time.</source>
          <target state="translated">&lt;code&gt;buffer&lt;/code&gt; 접근 속성을 나타내는 &lt;a href=&quot;../arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../sharedarraybuffer&quot;&gt; &lt;code&gt;SharedArrayBuffer&lt;/code&gt; 가&lt;/a&gt; 의해 참조 &lt;code&gt;DataView&lt;/code&gt; 를 시공시.</target>
        </trans-unit>
        <trans-unit id="77529542568f7acca92b139773062db33079b177" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; accessor property represents the &lt;a href=&quot;../arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; referenced by a &lt;em&gt;TypedArray&lt;/em&gt; at construction time.</source>
          <target state="translated">&lt;code&gt;buffer&lt;/code&gt; 접근 속성을 나타내는 &lt;a href=&quot;../arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt; a로 언급 &lt;em&gt;하는 TypedArray&lt;/em&gt; 시공시한다.</target>
        </trans-unit>
        <trans-unit id="dd4770c8b1ba9535e191c0571cc7297624275087" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; property is an accessor property whose set accessor function is &lt;code&gt;undefined&lt;/code&gt;, meaning that you can only read this property. The value is established when the &lt;code&gt;DataView&lt;/code&gt; is constructed and cannot be changed.</source>
          <target state="translated">&lt;code&gt;buffer&lt;/code&gt; 속성은 그 설정 액세서 함수 접근 속성 인 &lt;code&gt;undefined&lt;/code&gt; 만이 등록 정보를 읽을 수있는 것을 의미한다. 이 값은 &lt;code&gt;DataView&lt;/code&gt; 가 구성 될 때 설정 되며 변경할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="f46fe19984b1ea8a0fee47a449a7734c0f702ff4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; property is an accessor property whose set accessor function is &lt;code&gt;undefined&lt;/code&gt;, meaning that you can only read this property. The value is established when the &lt;em&gt;TypedArray&lt;/em&gt; is constructed and cannot be changed. &lt;em&gt;TypedArray&lt;/em&gt; is one of the &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;TypedArray objects&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;buffer&lt;/code&gt; 속성은 그 설정 액세서 함수 접근 속성 인 &lt;code&gt;undefined&lt;/code&gt; 만이 등록 정보를 읽을 수있는 것을 의미한다. 이 값은 &lt;em&gt;TypedArray&lt;/em&gt; 가 구성 될 때 설정 되며 변경할 수 없습니다. &lt;em&gt;TypedArray&lt;/em&gt; 는 &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;TypedArray 객체&lt;/a&gt; 중 하나입니다 .</target>
        </trans-unit>
        <trans-unit id="bc8aa27ef1110bedfc53d88715e356c0dad6c6ac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; prototype property of the &lt;code&gt;&lt;a href=&quot;../memory&quot;&gt;Memory&lt;/a&gt;&lt;/code&gt; object returns the buffer contained in the memory.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../memory&quot;&gt;Memory&lt;/a&gt;&lt;/code&gt; 객체 의 &lt;code&gt;buffer&lt;/code&gt; prototype 속성은 메모리에 포함 된 버퍼를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="2b3644bd31d44382ba2f6d01348490277a56018e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;byteLength&lt;/code&gt; accessor property represents the length (in bytes) of a typed array.</source>
          <target state="translated">&lt;code&gt;byteLength&lt;/code&gt; 속성 접근은 형식화 된 배열의 바이트 단위의 길이를 나타낸다.</target>
        </trans-unit>
        <trans-unit id="6460908b1dcbbf48b93d019df7de155e9901924c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;byteLength&lt;/code&gt; accessor property represents the length (in bytes) of this view from the start of its &lt;a href=&quot;../arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../sharedarraybuffer&quot;&gt;&lt;code&gt;SharedArrayBuffer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;byteLength&lt;/code&gt; 속성 접근은 개시로부터이 뷰 (바이트) 길이를 나타낸다 &lt;a href=&quot;../arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../sharedarraybuffer&quot;&gt; &lt;code&gt;SharedArrayBuffer&lt;/code&gt; 를&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2d892f875b973935b0c6f518125a00e538ba61fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;byteLength&lt;/code&gt; property is an accessor property whose set accessor function is &lt;code&gt;undefined&lt;/code&gt;, meaning that you can only read this property. The value is established when a &lt;em&gt;TypedArray&lt;/em&gt; is constructed and cannot be changed. If the &lt;em&gt;TypedArray&lt;/em&gt; is not specifying an &lt;code&gt;byteOffset&lt;/code&gt; or a &lt;code&gt;length&lt;/code&gt;, the &lt;code&gt;length&lt;/code&gt; of the referenced &lt;code&gt;ArrayBuffer&lt;/code&gt; will be returned. &lt;em&gt;TypedArray&lt;/em&gt; is one of the &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;TypedArray objects&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;byteLength&lt;/code&gt; 속성은 그 설정 접근 기능을하는 접근 자 속성입니다 &lt;code&gt;undefined&lt;/code&gt; 경우에만이 속성을 읽을 수 있다는 것을 의미한다. 이 값은 &lt;em&gt;TypedArray&lt;/em&gt; 가 생성되고 변경 될 수 없을 때 설정됩니다 . 는 IF &lt;em&gt;하는 TypedArray가&lt;/em&gt; 지정되지 &lt;code&gt;byteOffset&lt;/code&gt; 또는 &lt;code&gt;length&lt;/code&gt; 의 &lt;code&gt;length&lt;/code&gt; 참조의 &lt;code&gt;ArrayBuffer&lt;/code&gt; 이 반환됩니다. &lt;em&gt;TypedArray&lt;/em&gt; 는 &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;TypedArray 객체&lt;/a&gt; 중 하나입니다 .</target>
        </trans-unit>
        <trans-unit id="32d789cb64c689b28b5b83a993c479ec1cc29f74" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;byteLength&lt;/code&gt; property is an accessor property whose set accessor function is &lt;code&gt;undefined&lt;/code&gt;, meaning that you can only read this property. The value is established when an &lt;code&gt;DataView&lt;/code&gt; is constructed and cannot be changed. If the &lt;code&gt;DataView&lt;/code&gt; is not specifying an offset or a &lt;code&gt;byteLength&lt;/code&gt;, the &lt;code&gt;byteLength&lt;/code&gt; of the referenced &lt;code&gt;ArrayBuffer&lt;/code&gt; or &lt;code&gt;SharedArrayBuffer&lt;/code&gt; will be returned.</source>
          <target state="translated">&lt;code&gt;byteLength&lt;/code&gt; 속성은 그 설정 접근 기능을하는 접근 자 속성입니다 &lt;code&gt;undefined&lt;/code&gt; 경우에만이 속성을 읽을 수 있다는 것을 의미한다. 이 값은 &lt;code&gt;DataView&lt;/code&gt; 가 구성 될 때 설정 되며 변경할 수 없습니다. 는 IF &lt;code&gt;DataView&lt;/code&gt; 를가 오프셋 또는 지정되지 &lt;code&gt;byteLength&lt;/code&gt; 의 &lt;code&gt;byteLength&lt;/code&gt; 참조의 &lt;code&gt;ArrayBuffer&lt;/code&gt; 또는 &lt;code&gt;SharedArrayBuffer&lt;/code&gt; 가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="f1e3f9e18e74ee4d925dabffe6ff8099c025b2c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;byteLength&lt;/code&gt; property is an accessor property whose set accessor function is &lt;code&gt;undefined&lt;/code&gt;, meaning that you can only read this property. The value is established when the array is constructed and cannot be changed. This property returns 0 if this &lt;code&gt;ArrayBuffer&lt;/code&gt; has been detached.</source>
          <target state="translated">&lt;code&gt;byteLength&lt;/code&gt; 속성은 그 설정 접근 기능을하는 접근 자 속성입니다 &lt;code&gt;undefined&lt;/code&gt; 경우에만이 속성을 읽을 수 있다는 것을 의미한다. 값은 배열이 구성 될 때 설정되며 변경할 수 없습니다. 이 &lt;code&gt;ArrayBuffer&lt;/code&gt; 가 분리 된 경우이 속성은 0을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="a60b2d52d1d421a0ddac5ec533cb34b372b79c3e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;byteLength&lt;/code&gt; property is an accessor property whose set accessor function is &lt;code&gt;undefined&lt;/code&gt;, meaning that you can only read this property. The value is established when the shared array is constructed and cannot be changed.</source>
          <target state="translated">&lt;code&gt;byteLength&lt;/code&gt; 속성은 그 설정 접근 기능을하는 접근 자 속성입니다 &lt;code&gt;undefined&lt;/code&gt; 경우에만이 속성을 읽을 수 있다는 것을 의미한다. 이 값은 공유 배열이 구성되어 있으며 변경할 수 없을 때 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="b9fd260a7fdf1f5db1cc7053ed22822cdd5c08a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;byteOffset&lt;/code&gt; accessor property represents the offset (in bytes) of a typed array from the start of its &lt;a href=&quot;../arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;byteOffset&lt;/code&gt; 의 접근 속성은 그것의 개시로부터 입력 된 어레이 (바이트) 오프셋을 나타낸다 &lt;a href=&quot;../arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="01cb971b3e065fee20d5145cfdcd4f713fe96188" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;byteOffset&lt;/code&gt; accessor property represents the offset (in bytes) of this view from the start of its &lt;a href=&quot;../arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../sharedarraybuffer&quot;&gt;&lt;code&gt;SharedArrayBuffer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;byteOffset&lt;/code&gt; 의 접근 속성은 그것의 시작으로부터 본 도면 (바이트) 오프셋을 나타내는 &lt;a href=&quot;../arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../sharedarraybuffer&quot;&gt; &lt;code&gt;SharedArrayBuffer&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f0f989a6f1df903483f4b9431daa5f4336e5b6b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;byteOffset&lt;/code&gt; property is an accessor property whose set accessor function is &lt;code&gt;undefined&lt;/code&gt;, meaning that you can only read this property. The value is established when a &lt;em&gt;TypedArray&lt;/em&gt; is constructed and cannot be changed.&lt;em&gt; TypedArray&lt;/em&gt; is one of the &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;TypedArray objects&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;byteOffset&lt;/code&gt; 의 속성은 그 설정 접근 기능을하는 접근 자 속성입니다 &lt;code&gt;undefined&lt;/code&gt; 경우에만이 속성을 읽을 수 있다는 것을 의미한다. 이 값은 &lt;em&gt;TypedArray&lt;/em&gt; 가 구성되어 있으며 변경할 수 없을 때 설정됩니다 . &lt;em&gt;TypedArray&lt;/em&gt; 는 &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;TypedArray 객체&lt;/a&gt; 중 하나입니다 .</target>
        </trans-unit>
        <trans-unit id="8ed209723f3feab21d710369cd62044e2b939437" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;byteOffset&lt;/code&gt; property is an accessor property whose set accessor function is &lt;code&gt;undefined&lt;/code&gt;, meaning that you can only read this property. The value is established when an &lt;code&gt;DataView&lt;/code&gt; is constructed and cannot be changed.</source>
          <target state="translated">&lt;code&gt;byteOffset&lt;/code&gt; 의 속성은 그 설정 접근 기능을하는 접근 자 속성입니다 &lt;code&gt;undefined&lt;/code&gt; 경우에만이 속성을 읽을 수 있다는 것을 의미한다. 이 값은 &lt;code&gt;DataView&lt;/code&gt; 가 구성 될 때 설정 되며 변경할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="8161aa547f93cb84296896d4e7446939d30f0ca5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;call()&lt;/code&gt; allows for a function/method belonging to one object to be assigned and called for a different object.</source>
          <target state="translated">&lt;code&gt;call()&lt;/code&gt; 다른 목적을 위해 할당되고 호출 할 하나의 객체에 속하는 기능 / 방법을 허용한다.</target>
        </trans-unit>
        <trans-unit id="43da70a23074296619f70d5b37415327e2012b90" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;catch&lt;/code&gt; block specifies an identifier (&lt;code&gt;e&lt;/code&gt; in the example above) that holds the value specified by the &lt;code&gt;throw&lt;/code&gt; statement. The &lt;code&gt;catch&lt;/code&gt; block is unique in that JavaScript creates this identifier when the &lt;code&gt;catch&lt;/code&gt; block is entered and it adds it to the current scope; the identifier lasts only for the duration of the &lt;code&gt;catch&lt;/code&gt; block; after the &lt;code&gt;catch&lt;/code&gt; block finishes executing, the identifier is no longer available.</source>
          <target state="translated">&lt;code&gt;catch&lt;/code&gt; 블록 식별자 (지정 &lt;code&gt;e&lt;/code&gt; 에 의해 지정된 값을 가지고 위의 예에서) &lt;code&gt;throw&lt;/code&gt; 문. &lt;code&gt;catch&lt;/code&gt; 때 블록은 자바 스크립트이 식별자를 생성하는 고유의 &lt;code&gt;catch&lt;/code&gt; 블록이 입력되고 현재의 범위에 추가; 식별자는 &lt;code&gt;catch&lt;/code&gt; 블록 기간 동안 만 지속된다 ; 애프터 &lt;code&gt;catch&lt;/code&gt; 실행 블록 완료, 식별자는 더 이상 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="544645a4f8e160c0d4fe0eb4fec710546ee40c34" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;catch&lt;/code&gt; method can be useful for error handling in your promise composition.</source>
          <target state="translated">&lt;code&gt;catch&lt;/code&gt; 방법은 약속 조성 오류 처리하는 데 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1b097bed40408ec71f2a18fa311697e6832b1b0f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;charCodeAt()&lt;/code&gt; method returns an integer between 0 and 65535 representing the UTF-16 code unit at the given index.</source>
          <target state="translated">&lt;code&gt;charCodeAt()&lt;/code&gt; 메소드는 소정의 인덱스에서 UTF-16 코드 단위를 나타내는 0과 65,535 사이의 정수를 반환한다.</target>
        </trans-unit>
        <trans-unit id="0eeb5286b919a18fcb89a20219f0d1f136b62b5e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;class&lt;/code&gt; keyword defines a class expression.</source>
          <target state="translated">&lt;code&gt;class&lt;/code&gt; 키워드는 클래스 표현을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="95985bdbf42d6b4738085044d60000c9b3583fe0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;codePointAt()&lt;/code&gt; method returns a non-negative integer that is the Unicode code point value.</source>
          <target state="translated">&lt;code&gt;codePointAt()&lt;/code&gt; 메소드는 유니 코드 코드 포인트 값 인 음이 아닌 정수를 반환한다.</target>
        </trans-unit>
        <trans-unit id="9f095881f298e599ebed8633ac85c15b6650d5c3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;compareFunction&lt;/code&gt; can be invoked multiple times per element within the array. Depending on the &lt;code&gt;compareFunction&lt;/code&gt;'s nature, this may yield a high overhead. The more work a &lt;code&gt;compareFunction&lt;/code&gt; does and the more elements there are to sort, the wiser it may be to consider using a &lt;a href=&quot;map&quot;&gt;map&lt;/a&gt; for sorting. The idea is to traverse the array once to extract the actual values used for sorting into a temporary array, sort the temporary array and then traverse the temporary array to achieve the right order.</source>
          <target state="translated">&lt;code&gt;compareFunction&lt;/code&gt; 배열 내의 요소마다 여러 번 호출 할 수 있습니다. &lt;code&gt;compareFunction&lt;/code&gt; 의 특성 에 따라 오버 헤드가 높아질 수 있습니다. &lt;code&gt;compareFunction&lt;/code&gt; 이 수행하는 작업이 많고 정렬 할 요소가 많을수록 정렬에 &lt;a href=&quot;map&quot;&gt;맵&lt;/a&gt; 을 사용하는 것이 더 현명 할 수 있습니다 . 아이디어는 배열을 한 번 순회하여 임시 배열로 정렬하는 데 사용 된 실제 값을 추출하고 임시 배열을 정렬 한 다음 임시 배열을 순회하여 올바른 순서를 달성하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="cf4d7fdca68be4460dc0d605575caa1e51184ec2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;compile&lt;/code&gt; method is deprecated. You can just use the &lt;code&gt;RegExp&lt;/code&gt; constructor to achieve the same effect.</source>
          <target state="translated">&lt;code&gt;compile&lt;/code&gt; 방법은 사용되지 않습니다. &lt;code&gt;RegExp&lt;/code&gt; 생성자를 사용 하여 동일한 효과를 얻을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d59dd5e2aefdc347b412f036231fce35bb1e6ab1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;concat()&lt;/code&gt; function concatenates the string arguments to the calling string and returns a new string. Changes to the original string or the returned string don't affect the other. If the arguments are not of the type string, they are converted to string values before concatenating.</source>
          <target state="translated">&lt;code&gt;concat()&lt;/code&gt; 함수가 호출 문자열로 문자열 인수를 연결하여 새 문자열을 반환합니다. 원래 문자열이나 반환 된 문자열을 변경해도 다른 문자열에는 영향을 미치지 않습니다. 인수가 문자열 유형이 아닌 경우 연결하기 전에 문자열 값으로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="261563fef63b3d1ff27f440311aef252e6157691" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;concat()&lt;/code&gt; method concatenates the string arguments to the calling string and returns a new string.</source>
          <target state="translated">&lt;code&gt;concat()&lt;/code&gt; 메소드는 호출 문자열로 문자열 인수를 연결하여 새 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8565512ca78d2e185bde3d8a44e3082d5f9dcf70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;concat&lt;/code&gt; method creates a new array consisting of the elements in the object on which it is called, followed in order by, for each argument, the elements of that argument (if the argument is an array) or the argument itself (if the argument is not an array). It does not recurse into nested array arguments.</source>
          <target state="translated">&lt;code&gt;concat&lt;/code&gt; 방법은 각각 인수 순서로 다음에 호출되는 객체의 원소로 이루어진 새로운 배열, 즉 인수의 요소 (배열 인자 인 경우) 또는 인자 자체 (인수 경우 작성 배열이 아닙니다). 중첩 배열 인수로 되풀이되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d162ddc220f1ea4dd29d37ec734816bb9aecd40e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;concat&lt;/code&gt; method does not alter &lt;code&gt;this&lt;/code&gt; or any of the arrays provided as arguments but instead returns a shallow copy that contains copies of the same elements combined from the original arrays. Elements of the original arrays are copied into the new array as follows:</source>
          <target state="translated">&lt;code&gt;concat&lt;/code&gt; 방법은 변경하지 않습니다 &lt;code&gt;this&lt;/code&gt; 또는 인수로 제공되는 배열 중 하나를 대신 원래의 배열에서 결합 같은 요소의 사본을 포함하는 얕은 복사본을 반환합니다. 원래 배열의 요소는 다음과 같이 새 배열로 복사됩니다.</target>
        </trans-unit>
        <trans-unit id="d8988f26c17a8216d8f55ba340fae86fc60ab716" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;configurable&lt;/code&gt; attribute controls at the same time whether the property can be deleted from the object and whether its attributes (other than &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;writable&lt;/code&gt;) can be changed.</source>
          <target state="translated">&lt;code&gt;configurable&lt;/code&gt; 속성은 (그 이외의 속성 객체로부터 삭제 될 수 있는지 여부를 동시에 제어 속성 &lt;code&gt;value&lt;/code&gt; 과 &lt;code&gt;writable&lt;/code&gt; )로 변경 될 수있다.</target>
        </trans-unit>
        <trans-unit id="fb22a15f343741bfd47f5d5f28aba62a3655278a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;configurable&lt;/code&gt; attribute controls whether the property can be deleted from the object and whether its attributes (other than &lt;code&gt;writable&lt;/code&gt;) can be changed.</source>
          <target state="translated">&lt;code&gt;configurable&lt;/code&gt; 속성이 (이외의 속성 객체에서 여부 삭제 될 수 있는지 여부를 속성 컨트롤을 &lt;code&gt;writable&lt;/code&gt; ) 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bc29c78e83267e7702095c83fcdd3aeb6a054197" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;configurable&lt;/code&gt; attribute of this property is now &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">이 프로퍼티 의 &lt;code&gt;configurable&lt;/code&gt; 속성은 이제 &lt;code&gt;true&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="7b996e34fbe9ae41a70f1d418fb5bd2ed2ed2d98" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;const&lt;/code&gt; declaration creates a read-only reference to a value. It does &lt;strong&gt;not&lt;/strong&gt; mean the value it holds is immutable, just that the variable identifier cannot be reassigned. For instance, in case the content is an object, this means the object itself can still be altered. This means that you can't mutate the value stored in a variable:</source>
          <target state="translated">&lt;code&gt;const&lt;/code&gt; 선언 값을 읽기 전용 기준을 생성한다. 변수 식별자를 재 할당 할 수 없다는 것만으로 보유한 값이 변경 불가능하다는 의미 는 &lt;strong&gt;아닙니다&lt;/strong&gt; . 예를 들어 내용이 객체 인 경우 객체 자체를 계속 변경할 수 있습니다. 이는 변수에 저장된 값을 변경할 수 없음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="4c8eefc6ebfd279fcb1745f81c375b6511d887ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;construct&lt;/code&gt; method must return an object.</source>
          <target state="translated">&lt;code&gt;construct&lt;/code&gt; 방법은 객체를 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="ff6581a6663ce2d74d4d31e6e537b38321d0c910" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;constructor&lt;/code&gt; method is a special method for creating and initializing an object created within a &lt;code&gt;&lt;a href=&quot;../statements/class&quot;&gt;class&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;constructor&lt;/code&gt; 방법은 생성하고 내에서 생성 된 객체 초기화를위한 특별한 방법으로 &lt;code&gt;&lt;a href=&quot;../statements/class&quot;&gt;class&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e503dd29e531e8ca49601627a2d04a566f54a02a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;constructor&lt;/code&gt; property returns a reference to the &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt; constructor function that created the instance object. Note that the value of this property is a reference to the function itself, not a string containing the function's name. The value is only read-only for primitive values such as &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;&quot;test&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;constructor&lt;/code&gt; 속성에 대한 참조를 반환 &lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt; 인스턴스 객체를 생성 생성자 함수를. 이 속성의 값은 함수 이름을 포함하는 문자열이 아니라 함수 자체에 대한 참조입니다. 이 값은 &lt;code&gt;1&lt;/code&gt; , &lt;code&gt;true&lt;/code&gt; 및 &lt;code&gt;&quot;test&quot;&lt;/code&gt; 와 같은 기본 값에 대해서만 읽기 전용입니다 .</target>
        </trans-unit>
        <trans-unit id="e0686ce826b772555a78940c3dad4d0af25e6214" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;continue&lt;/code&gt; statement can include an optional label that allows the program to jump to the next iteration of a labeled loop statement instead of the current loop. In this case, the &lt;code&gt;continue&lt;/code&gt; statement needs to be nested within this labeled statement.</source>
          <target state="translated">&lt;code&gt;continue&lt;/code&gt; 문은 프로그램이 표시 루프 문 대신 전류 루프의 다음 반복으로 이동할 수있는 옵션 라벨을 포함 할 수 있습니다. 이 경우 &lt;code&gt;continue&lt;/code&gt; 문은이 레이블이 지정된 명령문 내에 중첩되어야합니다.</target>
        </trans-unit>
        <trans-unit id="01fb7109701916242ce2205e739220de803bdf91" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;copyWithin&lt;/code&gt; function is intentionally &lt;em&gt;generic&lt;/em&gt;, it does not require that its &lt;code&gt;this&lt;/code&gt; value be an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;copyWithin&lt;/code&gt; 의 기능은 의도적으로 &lt;em&gt;제네릭&lt;/em&gt; , 그것의 필요가 없습니다 &lt;code&gt;this&lt;/code&gt; 값이 될 &lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; 객체입니다.</target>
        </trans-unit>
        <trans-unit id="9e1e66df1bad7208bb9b957a4907ea02459e4247" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;copyWithin&lt;/code&gt; method is a mutable method. It does not alter the length of &lt;code&gt;this&lt;/code&gt;, but will change its content and create new properties if necessary.</source>
          <target state="translated">&lt;code&gt;copyWithin&lt;/code&gt; 에 있어서 변경 가능한 방법이다. 그것은의 길이를 변경하지 않습니다 &lt;code&gt;this&lt;/code&gt; 있지만, 그 내용을 변경하고 필요한 경우 새 속성을 만들 것입니다.</target>
        </trans-unit>
        <trans-unit id="0d4e4a2f5912a9e57cc607207bc577c011f3c5ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;copyWithin&lt;/code&gt; works like C and C++'s &lt;code&gt;memmove&lt;/code&gt;, and is a high-performance method to shift the data of an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;. This especially applies to the &lt;a href=&quot;../typedarray/copywithin&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt; method of the same name. The sequence is copied and pasted as one operation; pasted sequence will have the copied values even when the copy and paste region overlap.</source>
          <target state="translated">&lt;code&gt;copyWithin&lt;/code&gt; 은 C 및 C ++의처럼 작동 &lt;code&gt;memmove&lt;/code&gt; 를 , 및 데이터의 시프트 고성능 방법 &lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; . 이것은 특히 같은 이름 의 &lt;a href=&quot;../typedarray/copywithin&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt; 메서드에 적용됩니다 . 시퀀스는 하나의 작업으로 복사 및 붙여 넣기됩니다. 붙여 넣은 시퀀스는 복사 및 붙여 넣기 영역이 겹치는 경우에도 복사 된 값을 갖습니다.</target>
        </trans-unit>
        <trans-unit id="b1ad2da2466bc7c65b1d4fdb1ca297753e580c92" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;count&lt;/code&gt; parameter defaults to &lt;code&gt;0&lt;/code&gt; instead of the later-specified &lt;code&gt;+Infinity&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;count&lt;/code&gt; 에 매개 변수의 기본값은 &lt;code&gt;0&lt;/code&gt; 대신 나중에 지정의 &lt;code&gt;+Infinity&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6459290abb22692aeaf643f0b0875963a2637158" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;count&lt;/code&gt; parameter of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/wake&quot;&gt;&lt;code&gt;Atomics.wake()&lt;/code&gt;&lt;/a&gt; method has been changed: it now defaults to &lt;code&gt;+Infinity&lt;/code&gt;, not &lt;code&gt;0&lt;/code&gt; (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1253350&quot;&gt;bug 1253350&lt;/a&gt;).</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/wake&quot;&gt; &lt;code&gt;Atomics.wake()&lt;/code&gt; &lt;/a&gt; 메서드 의 &lt;code&gt;count&lt;/code&gt; 매개 변수 가 변경되었습니다. 이제 기본값은 &lt;code&gt;0&lt;/code&gt; 이 아닌 &lt;code&gt;+Infinity&lt;/code&gt; 로 설정되었습니다 ( &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1253350&quot;&gt;버그 1253350&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="579abc478417cce04b67170481387cc4f0379da4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;defineProperty&lt;/code&gt; method must return a &lt;a href=&quot;../../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether or not the property has been successfully defined.</source>
          <target state="translated">&lt;code&gt;defineProperty&lt;/code&gt; 의 방법은 반환해야 &lt;a href=&quot;../../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; 속성이 성공적으로 정의되어 있는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="d51c50dc1f17fb2d3d9a387e4984d9886950112d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;delete&lt;/code&gt; operator can only delete properties on an object. Object properties are &quot;qualified&quot; if they are configurable.</source>
          <target state="translated">&lt;code&gt;delete&lt;/code&gt; 연산자는 객체의 속성을 삭제할 수 있습니다. 구성 가능한 개체 속성은 &quot;자격을 갖춘&quot;것입니다.</target>
        </trans-unit>
        <trans-unit id="eaff799ffb5f4c865de5bbeb223a7f16c1c96408" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;delete&lt;/code&gt; operator deletes a property from an object.</source>
          <target state="translated">&lt;code&gt;delete&lt;/code&gt; 연산자는 객체의 속성을 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="448e313ceb8a1786b1ec9c45f3df2f4ae6950a88" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;deleteProperty&lt;/code&gt; method must return a &lt;a href=&quot;../../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; indicating whether or not the property has been successfully deleted.</source>
          <target state="translated">&lt;code&gt;deleteProperty&lt;/code&gt; 의 방법은 반환해야 &lt;a href=&quot;../../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; 속성이 성공적으로 삭제되었는지 여부를 나타내는.</target>
        </trans-unit>
        <trans-unit id="fcd2de562ed07e7f7a0f74cee6c831e37c07da25" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;do...while&lt;/code&gt; creates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.</source>
          <target state="translated">는 &lt;code&gt;do...while&lt;/code&gt; false로 테스트 조건들을 평가까지 지정된 문을 실행 루프를 만듭니다. 명령문을 실행 한 후 조건이 평가되어 지정된 명령문이 한 번 이상 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="9b037595b9a4b32697b21b81f6d685a6b7b0cc69" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;endsWith()&lt;/code&gt; method determines whether a string ends with the characters of a specified string, returning &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; as appropriate.</source>
          <target state="translated">&lt;code&gt;endsWith()&lt;/code&gt; 메소드가 복귀 여부를 결정 지정된 문자열의 문자 스트링 단부 &lt;code&gt;true&lt;/code&gt; 또는 &lt;code&gt;false&lt;/code&gt; 적절.</target>
        </trans-unit>
        <trans-unit id="6b9e346adfa1b501f7258a884c4f52ebb1fce163" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;entries()&lt;/code&gt; method returns a new &lt;code&gt;Array Iterator&lt;/code&gt; object that contains the key/value pairs for each index in the array.</source>
          <target state="translated">&lt;code&gt;entries()&lt;/code&gt; 메소드가 복귀 새로운 &lt;code&gt;Array Iterator&lt;/code&gt; 배열의 각 지수의 키 / 값 쌍을 포함 개체.</target>
        </trans-unit>
        <trans-unit id="769b265003faa6091f017d7147f12f3732022a92" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;enum&lt;/code&gt; identifier is generally reserved.</source>
          <target state="translated">&lt;code&gt;enum&lt;/code&gt; 식별자는 일반적으로 예약된다.</target>
        </trans-unit>
        <trans-unit id="248a7d9a5873cc3f556301fa757159e374622ac2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;enumerable&lt;/code&gt; property attribute defines whether the property is picked by &lt;a href=&quot;assign&quot;&gt;&lt;code&gt;Object.assign()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../operators/spread_syntax&quot;&gt;spread &lt;/a&gt;operator. For non-&lt;a href=&quot;../symbol&quot;&gt;&lt;code&gt;Symbols&lt;/code&gt;&lt;/a&gt; properties it also defines whether it shows up in a &lt;a href=&quot;../../statements/for...in&quot;&gt;&lt;code&gt;for...in&lt;/code&gt;&lt;/a&gt; loop and &lt;a href=&quot;keys&quot;&gt;&lt;code&gt;Object.keys()&lt;/code&gt;&lt;/a&gt; or not.</source>
          <target state="translated">&lt;code&gt;enumerable&lt;/code&gt; 속성 특성은 재산권에 의해 촬상되는지 여부를 정의 &lt;a href=&quot;assign&quot;&gt; &lt;code&gt;Object.assign()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../../operators/spread_syntax&quot;&gt;확산&lt;/a&gt; 연산자. &lt;a href=&quot;../symbol&quot;&gt; &lt;code&gt;Symbols&lt;/code&gt; &lt;/a&gt; 아닌 속성의 경우 &lt;a href=&quot;../../statements/for...in&quot;&gt; &lt;code&gt;for...in&lt;/code&gt; &lt;/a&gt; 루프 및 &lt;a href=&quot;keys&quot;&gt; &lt;code&gt;Object.keys()&lt;/code&gt; &lt;/a&gt;에 표시되는지 여부도 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="262f6845d838ab7895857d8dab6ec4e384ed3f75" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;enumerate&lt;/code&gt; handler has been removed.</source>
          <target state="translated">&lt;code&gt;enumerate&lt;/code&gt; 핸들러가 제거되었습니다.</target>
        </trans-unit>
        <trans-unit id="60cda406b7503937cb4bcba89ffc4774b591579c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;every&lt;/code&gt; method executes the provided &lt;code&gt;callback&lt;/code&gt; function once for each element present in the array until it finds one where &lt;code&gt;callback&lt;/code&gt; returns a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/falsy&quot;&gt;falsy&lt;/a&gt; value. If such an element is found, the &lt;code&gt;every&lt;/code&gt; method immediately returns &lt;code&gt;false&lt;/code&gt;. Otherwise, if &lt;code&gt;callback&lt;/code&gt; returns a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/truthy&quot;&gt;truthy&lt;/a&gt; value for all elements, &lt;code&gt;every&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;. &lt;code&gt;callback&lt;/code&gt; is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.</source>
          <target state="translated">&lt;code&gt;every&lt;/code&gt; 방법은 제공된 실행 &lt;code&gt;callback&lt;/code&gt; 은 하나가 발견 될 때까지, 상기 어레이의 각 요소에 대한 본 번 함수 &lt;code&gt;callback&lt;/code&gt; 반환 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/falsy&quot;&gt;falsy&lt;/a&gt; 값. 이러한 요소가 발견되면 &lt;code&gt;every&lt;/code&gt; 메소드는 즉시 &lt;code&gt;false&lt;/code&gt; 를 리턴합니다 . 그렇지 않으면, 경우 &lt;code&gt;callback&lt;/code&gt; 반환 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/truthy&quot;&gt;truthy의&lt;/a&gt; 모든 요소에 대한 값을 &lt;code&gt;every&lt;/code&gt; 반환 &lt;code&gt;true&lt;/code&gt; . &lt;code&gt;callback&lt;/code&gt; 은 값이 할당 된 배열의 인덱스에 대해서만 호출됩니다. 삭제되었거나 값이 할당되지 않은 인덱스에 대해서는 호출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="fe726a22b9fe9e4b71733bdecdeba4c970f7e0e1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;every&lt;/code&gt; method executes the provided &lt;code&gt;callback&lt;/code&gt; function once for each element present in the typed array until it finds one where &lt;code&gt;callback&lt;/code&gt; returns a &lt;em&gt;falsy&lt;/em&gt; value (a value that becomes false when converted to a Boolean). If such an element is found, the &lt;code&gt;every&lt;/code&gt; method immediately returns &lt;code&gt;false&lt;/code&gt;. Otherwise, if &lt;code&gt;callback&lt;/code&gt; returned a true value for all elements, &lt;code&gt;every&lt;/code&gt; will return &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;every&lt;/code&gt; 방법은 제공된 실행 &lt;code&gt;callback&lt;/code&gt; 은 하나 찾을 때까지 입력 된 배열의 각 요소 본 한번씩 함수 &lt;code&gt;callback&lt;/code&gt; 반환 &lt;em&gt;falsy&lt;/em&gt; 값 (부울로 변환 할 때 거짓이되는 값). 이러한 요소가 발견되면 &lt;code&gt;every&lt;/code&gt; 메소드는 즉시 &lt;code&gt;false&lt;/code&gt; 를 리턴합니다 . 그렇지 않은 경우, &lt;code&gt;callback&lt;/code&gt; 모든 요소에 대한 진정한 가치를 반환, &lt;code&gt;every&lt;/code&gt; 반환됩니다 &lt;code&gt;true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5502d324148be748c13c8b24bf2ff1dfda3fd2ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;exec()&lt;/code&gt; method executes a search for a match in a specified string. Returns a result array, or &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;exec()&lt;/code&gt; 메소드는 지정된 문자열에서 일치 검색을 실행합니다. 결과 배열을 반환하거나 &lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="9da67b0a2bf1e2e56acd5e6a00e10cd0f9ba6fad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;export&lt;/code&gt; statement is used when creating JavaScript modules to export functions, objects, or primitive values from the module so they can be used by other programs with the &lt;a href=&quot;import&quot;&gt;&lt;code&gt;import&lt;/code&gt;&lt;/a&gt; statement.</source>
          <target state="translated">&lt;code&gt;export&lt;/code&gt; 그들이 다른 프로그램에서 사용할 수 있도록 모듈에서 기능, 객체 또는 원시 값을 내보낼 자바 스크립트 모듈을 만들 때 문이 사용되는 &lt;a href=&quot;import&quot;&gt; &lt;code&gt;import&lt;/code&gt; &lt;/a&gt; 문.</target>
        </trans-unit>
        <trans-unit id="1d121d7c83043915b62c3d026d20e9eb9ce0263a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;exports&lt;/code&gt; readonly property of the &lt;a href=&quot;../instance&quot;&gt;&lt;code&gt;WebAssembly.Instance&lt;/code&gt;&lt;/a&gt; object prototype returns an object containing as its members all the functions exported from the WebAssembly module instance, to allow them to be accessed and used by JavaScript.</source>
          <target state="translated">&lt;a href=&quot;../instance&quot;&gt; &lt;code&gt;WebAssembly.Instance&lt;/code&gt; &lt;/a&gt; 객체 프로토 타입 의 &lt;code&gt;exports&lt;/code&gt; 읽기 전용 속성은 WebAssembly 모듈 인스턴스에서 내 보낸 모든 함수를 멤버로 포함하는 객체를 반환하여 JavaScript에서 액세스하고 사용할 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="398bb44428230207be4b29663c2d907af05f08fd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;exports[0]&lt;/code&gt; output looks like this:</source>
          <target state="translated">&lt;code&gt;exports[0]&lt;/code&gt; 이 같은 출력 같다 :</target>
        </trans-unit>
        <trans-unit id="1248c8ee5b9877f2e85da9ce2ebd273eed344846" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extends&lt;/code&gt; keyword can be used to subclass custom classes as well as built-in objects.</source>
          <target state="translated">는 &lt;code&gt;extends&lt;/code&gt; 뿐만 아니라 내장 된 물체 키워드가 서브 클래스 사용자 정의 클래스에 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8be240467cc255fa80e8a5d40e5248d61e3121d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extends&lt;/code&gt; keyword is used in &lt;a href=&quot;../statements/class&quot;&gt;class declarations&lt;/a&gt; or &lt;a href=&quot;../operators/class&quot;&gt;class expressions&lt;/a&gt; to create a class which is a child of another class.</source>
          <target state="translated">는 &lt;code&gt;extends&lt;/code&gt; 키워드에 사용되는 &lt;a href=&quot;../statements/class&quot;&gt;클래스 선언&lt;/a&gt; 또는 &lt;a href=&quot;../operators/class&quot;&gt;클래스 식&lt;/a&gt; 다른 클래스의 하위 클래스를 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e9c6fff34eb2957d22e20e462d2759e3b630de74" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fill&lt;/code&gt; method takes up to three arguments &lt;code&gt;value&lt;/code&gt;, &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt;. The &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; arguments are optional with default values of &lt;code&gt;0&lt;/code&gt; and the &lt;code&gt;length&lt;/code&gt; of the &lt;code&gt;this&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;fill&lt;/code&gt; 방법은 세 가지 인수에 소요 &lt;code&gt;value&lt;/code&gt; , &lt;code&gt;start&lt;/code&gt; 과 &lt;code&gt;end&lt;/code&gt; . &lt;code&gt;start&lt;/code&gt; 과 &lt;code&gt;end&lt;/code&gt; 인수는 디폴트의 값을 선택적 &lt;code&gt;0&lt;/code&gt; 과 &lt;code&gt;length&lt;/code&gt; 의 &lt;code&gt;this&lt;/code&gt; 객체.</target>
        </trans-unit>
        <trans-unit id="0e3b582ede252bcf25aebee36e7e68677d22aa38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;filter()&lt;/code&gt; method calls a provided &lt;code&gt;callback&lt;/code&gt; function once for each element in a typed array, and constructs a new typed array of all the values for which &lt;code&gt;callback&lt;/code&gt; returns a true value. &lt;code&gt;callback&lt;/code&gt; is invoked only for indexes of the typed array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values. Typed array elements which do not pass the &lt;code&gt;callback&lt;/code&gt; test are simply skipped, and are not included in the new typed array.</source>
          <target state="translated">&lt;code&gt;filter()&lt;/code&gt; 메소드는 제공된 호출 &lt;code&gt;callback&lt;/code&gt; 형식화 어레이의 각 요소의 기능을 한번하고있는 값보다도 새로운 형식화 된 배열 구축 &lt;code&gt;callback&lt;/code&gt; 되돌 진정한 값. &lt;code&gt;callback&lt;/code&gt; 은 값이 할당 된 형식화 된 배열의 인덱스에 대해서만 호출됩니다. 삭제되었거나 값이 할당되지 않은 인덱스에 대해서는 호출되지 않습니다. &lt;code&gt;callback&lt;/code&gt; 테스트를 통과하지 않은 형식화 된 배열 요소 는 간단히 건너 뛰고 새로운 형식화 된 배열에는 포함되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b5f309c0b5856c39cb9b939d27f25e1d4dbdaffc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finally()&lt;/code&gt; method can be useful if you want to do some processing or cleanup once the promise is settled, regardless of its outcome.</source>
          <target state="translated">&lt;code&gt;finally()&lt;/code&gt; 에 관계없이 그 결과의 약속이 정착되면 일부 처리 또는 정리 작업을 수행하려는 경우 방법이 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ca2b8cacac1a430149bebcb16b2ae7b2f9d5b2df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finally()&lt;/code&gt; method is very similar to calling &lt;code&gt;.then(onFinally, onFinally)&lt;/code&gt; however there are couple of differences:</source>
          <target state="translated">&lt;code&gt;finally()&lt;/code&gt; 메소드 호출과 매우 유사하다 &lt;code&gt;.then(onFinally, onFinally)&lt;/code&gt; 그러나 차이의 커플이 있습니다 :</target>
        </trans-unit>
        <trans-unit id="afb8460fbc1a6af0566d608676e595d2980214bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finally&lt;/code&gt; clause</source>
          <target state="translated">&lt;code&gt;finally&lt;/code&gt; 절</target>
        </trans-unit>
        <trans-unit id="493a6b259c76f8e49c9fb9f85cb6a55f07cd517c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finally&lt;/code&gt; clause contains statements to execute after the &lt;code&gt;try&lt;/code&gt; block and &lt;code&gt;catch&lt;/code&gt; clause(s) execute, but before the statements following the &lt;code&gt;try..catch..finally&lt;/code&gt; block. Note that the &lt;code&gt;finally&lt;/code&gt; clause executes regardless of whether an exception is thrown. Also, if an exception is thrown, the statements in the &lt;code&gt;finally&lt;/code&gt; clause execute even if no &lt;code&gt;catch&lt;/code&gt; clause handles the exception.</source>
          <target state="translated">&lt;code&gt;finally&lt;/code&gt; 절은 후 실행 문이 포함되어 &lt;code&gt;try&lt;/code&gt; 블록과 &lt;code&gt;catch&lt;/code&gt; 절 (들)을 실행을하지만, 문 전은 다음 &lt;code&gt;try..catch..finally&lt;/code&gt; 를 차단합니다. 있습니다 &lt;code&gt;finally&lt;/code&gt; 절은 예외 발생과 상관없이 실행합니다. 또한 예외가 발생 하면 &lt;code&gt;catch&lt;/code&gt; 절이 예외를 처리 하지 않아도 &lt;code&gt;finally&lt;/code&gt; 절의 문이 실행됩니다 .</target>
        </trans-unit>
        <trans-unit id="ae0af582c79ba9fdaa1e4be03ccddb06832fa849" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finally&lt;/code&gt; clause executes after the &lt;code&gt;try&lt;/code&gt; block and &lt;code&gt;catch&lt;/code&gt; clause(s) execute but before the statements following the &lt;code&gt;try&lt;/code&gt; statement. It always executes, regardless of whether an exception was thrown or caught.</source>
          <target state="translated">&lt;code&gt;finally&lt;/code&gt; 애프터 조항이 실행 &lt;code&gt;try&lt;/code&gt; 블록과 &lt;code&gt;catch&lt;/code&gt; 절 (들)을 실행하지만, 문 앞에 다음과 같은 &lt;code&gt;try&lt;/code&gt; 문을. 예외 발생 여부에 관계없이 항상 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="ebb9ff3b4d2328dc13d0f5dbf5fefaf6cb770084" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;find&lt;/code&gt; method executes the &lt;code&gt;callback&lt;/code&gt; function once for each element present in the typed array until it finds one where &lt;code&gt;callback&lt;/code&gt; returns a true value. If such an element is found, &lt;code&gt;find&lt;/code&gt; immediately returns the value of that element. Otherwise, &lt;code&gt;find&lt;/code&gt; returns &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;callback&lt;/code&gt; is invoked only for indexes of the typed array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.</source>
          <target state="translated">&lt;code&gt;find&lt;/code&gt; 방법은 실행 &lt;code&gt;callback&lt;/code&gt; 은 하나 찾을 때까지 입력 된 배열의 각 요소 본 한번씩 함수 &lt;code&gt;callback&lt;/code&gt; 참 값을 리턴한다. 이러한 요소를 찾으면 &lt;code&gt;find&lt;/code&gt; 는 해당 요소의 값을 즉시 리턴합니다. 그렇지 않으면 &lt;code&gt;find&lt;/code&gt; 는 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; 를&lt;/a&gt; 반환합니다 . &lt;code&gt;callback&lt;/code&gt; 은 값이 할당 된 형식화 된 배열의 인덱스에 대해서만 호출됩니다. 삭제되었거나 값이 할당되지 않은 인덱스에 대해서는 호출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a2f6dbc0e7d561f4adb48c5a0084b12e047f565d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;find&lt;/code&gt; method executes the &lt;code&gt;callback&lt;/code&gt; function once for each index of the array until it finds one where &lt;code&gt;callback&lt;/code&gt; returns a true value. If such an element is found, &lt;code&gt;find&lt;/code&gt; immediately returns the value of that element. Otherwise, &lt;code&gt;find&lt;/code&gt; returns &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;callback&lt;/code&gt; is invoked for every index of the array from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;length - 1&lt;/code&gt; and is invoked for all indexes, not just those that have been assigned values. This may mean that it's less efficient for sparse arrays than other methods that only visit indexes that have been assigned a value.</source>
          <target state="translated">&lt;code&gt;find&lt;/code&gt; 방법은 실행 &lt;code&gt;callback&lt;/code&gt; 은 하나가 발견 될 때까지, 상기 어레이의 각 인덱스에 대해 한 번 함수 &lt;code&gt;callback&lt;/code&gt; 참 값을 리턴한다. 이러한 요소를 찾으면 &lt;code&gt;find&lt;/code&gt; 는 해당 요소의 값을 즉시 리턴합니다. 그렇지 않으면 &lt;code&gt;find&lt;/code&gt; 는 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; 를&lt;/a&gt; 반환합니다 . &lt;code&gt;callback&lt;/code&gt; 은 배열의 모든 인덱스에 대해 &lt;code&gt;0&lt;/code&gt; 에서 &lt;code&gt;length - 1&lt;/code&gt; 까지 호출되며 값이 할당 된 인덱스뿐만 아니라 모든 인덱스에 대해 호출됩니다. 이는 값이 할당 된 인덱스 만 방문하는 다른 방법보다 희소 배열의 효율성이 낮음을 의미 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7a8b983e2f4829e511b41212dc899b30c721853a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;findIndex&lt;/code&gt; method executes the &lt;code&gt;callback&lt;/code&gt; function once for each element present in the typed array until it finds one where &lt;code&gt;callback&lt;/code&gt; returns a true value. If such an element is found, &lt;code&gt;findIndex&lt;/code&gt; immediately returns the index of that element. Otherwise, &lt;code&gt;findIndex&lt;/code&gt; returns -1. &lt;code&gt;callback&lt;/code&gt; is invoked only for indexes of the typed array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.</source>
          <target state="translated">&lt;code&gt;findIndex&lt;/code&gt; 의 방법은 실행 &lt;code&gt;callback&lt;/code&gt; 은 하나 찾을 때까지 입력 된 배열의 각 요소 본 한번씩 함수 &lt;code&gt;callback&lt;/code&gt; 참 값을 리턴한다. 이러한 요소가 발견되면 &lt;code&gt;findIndex&lt;/code&gt; 는 즉시 해당 요소의 색인을 리턴합니다. 그렇지 않으면 &lt;code&gt;findIndex&lt;/code&gt; 는 -1을 반환합니다. &lt;code&gt;callback&lt;/code&gt; 은 값이 할당 된 형식화 된 배열의 인덱스에 대해서만 호출됩니다. 삭제되었거나 값이 할당되지 않은 인덱스에 대해서는 호출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e184dccaa01d8c1336c503c32e412ef6fedc68a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;findIndex&lt;/code&gt; method executes the &lt;code&gt;callback&lt;/code&gt; function once for every array index &lt;code&gt;0..length-1&lt;/code&gt; (inclusive) in the array until it finds one where &lt;code&gt;callback&lt;/code&gt; returns a truthy value (a value that &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Type_Conversion&quot;&gt;coerces&lt;/a&gt; to &lt;code&gt;true&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;findIndex&lt;/code&gt; 의 방법은 실행 &lt;code&gt;callback&lt;/code&gt; 마다 배열 인덱스에 대해 한 번 함수 &lt;code&gt;0..length-1&lt;/code&gt; 은 하나의 위치를 찾을 때까지 배열 (포함) &lt;code&gt;callback&lt;/code&gt; 리턴 truthy 값 (값이 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Type_Conversion&quot;&gt;강제 변환&lt;/a&gt; 에 &lt;code&gt;true&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="ddb6a4717e869f31b8dfea822bc35fc297019a9f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fixed()&lt;/code&gt; method creates a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tt&quot;&gt;&lt;code&gt;&amp;lt;tt&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML element that causes a string to be displayed in fixed-pitch font.</source>
          <target state="translated">&lt;code&gt;fixed()&lt;/code&gt; 메소드는 생성 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tt&quot;&gt; &lt;code&gt;&amp;lt;tt&amp;gt;&lt;/code&gt; &lt;/a&gt; 고정 피치 폰트로 표시되는 문자열을 일으키는 HTML 요소.</target>
        </trans-unit>
        <trans-unit id="c48c22c4579ce5d02046766c641cc1ca194ff818" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fixed()&lt;/code&gt; method embeds a string in a &lt;code&gt;&amp;lt;tt&amp;gt;&lt;/code&gt; tag: &lt;code&gt;&quot;&amp;lt;tt&amp;gt;str&amp;lt;/tt&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fixed()&lt;/code&gt; 메소드는 문자열 매립 &lt;code&gt;&amp;lt;tt&amp;gt;&lt;/code&gt; 태그 : &lt;code&gt;&quot;&amp;lt;tt&amp;gt;str&amp;lt;/tt&amp;gt;&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a1f38db68a6bd39288ff7c228bab4de71e507f4d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flags&lt;/code&gt; property returns a string consisting of the flags of the current regular expression object.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; 속성은 현재 정규 표현식 객체의 플래그 구성된 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="fe01e45b472a17933803d2bb3045c805fc95c57b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fontcolor()&lt;/code&gt; method creates a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/font&quot;&gt;&lt;code&gt;&amp;lt;font&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML element that causes a string to be displayed in the specified font color.</source>
          <target state="translated">&lt;code&gt;fontcolor()&lt;/code&gt; 메소드는 생성 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/font&quot;&gt; &lt;code&gt;&amp;lt;font&amp;gt;&lt;/code&gt; &lt;/a&gt; 문자열 지정된 폰트 색상으로 표시되도록 HTML 요소.</target>
        </trans-unit>
        <trans-unit id="e049850efda23e9baaf754634772c96f3d0e907b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fontsize()&lt;/code&gt; method creates a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/font&quot;&gt;&lt;code&gt;&amp;lt;font&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML element that causes a string to be displayed in the specified font size.</source>
          <target state="translated">&lt;code&gt;fontsize()&lt;/code&gt; 메소드는 생성 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/font&quot;&gt; &lt;code&gt;&amp;lt;font&amp;gt;&lt;/code&gt; &lt;/a&gt; 문자열 지정된 폰트 크기로 표시되도록 HTML 요소.</target>
        </trans-unit>
        <trans-unit id="07795950e389f56d946a676fa471420cef5f0fe3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;for await...of&lt;/code&gt;creates a loop iterating over async iterable objects as well as on sync iterables, including: built-in &lt;a href=&quot;../global_objects/string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;Array&lt;/code&gt;-like objects (e.g., &lt;a href=&quot;../functions/arguments&quot;&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/NodeList&quot;&gt;&lt;code&gt;NodeList&lt;/code&gt;&lt;/a&gt;), &lt;a href=&quot;../global_objects/typedarray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt;, and user-defined async/sync iterables. It invokes a custom iteration hook with statements to be executed for the value of each distinct property of the object.</source>
          <target state="translated">는 &lt;code&gt;for await...of&lt;/code&gt; 반복 가능한 비동기 반복하는 루프가 포함 동기화 반복 가능 객체에뿐만 아니라 객체 생성 : 내장 &lt;a href=&quot;../global_objects/string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;Array&lt;/code&gt; 객체 (예를 들어, -like &lt;a href=&quot;../functions/arguments&quot;&gt; &lt;code&gt;arguments&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/NodeList&quot;&gt; &lt;code&gt;NodeList&lt;/code&gt; 를&lt;/a&gt; ) &lt;a href=&quot;../global_objects/typedarray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../global_objects/map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../global_objects/set&quot;&gt; &lt;code&gt;Set&lt;/code&gt; &lt;/a&gt; 하고, 사용자 정의 비동기 / 동기화 이터 러블. 객체의 각 고유 속성 값에 대해 실행될 명령문으로 사용자 정의 반복 후크를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="92018a29351b2499a5caaa78a8fec107cbde8ac4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;for each...in&lt;/code&gt; statement is deprecated as the part of ECMA-357 (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Archive/Web/E4X&quot;&gt;E4X&lt;/a&gt;) standard. E4X support has been removed. Consider using &lt;a href=&quot;for...of&quot;&gt;for...of&lt;/a&gt; instead.</source>
          <target state="translated">&lt;code&gt;for each...in&lt;/code&gt; 문은 ECMA-357 (의 일부로 사용되지 않습니다 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Archive/Web/E4X&quot;&gt;E4X&lt;/a&gt; ) 표준입니다. E4X 지원이 제거되었습니다. 사용을 고려 &lt;a href=&quot;for...of&quot;&gt;의 ...을 위해&lt;/a&gt; 대신.</target>
        </trans-unit>
        <trans-unit id="eb90258c1a74d909c7a02e4a5cd78322b013bc9b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;for...in&lt;/code&gt; iterates over all non-&lt;a href=&quot;../global_objects/symbol&quot;&gt;Symbol&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties&quot;&gt;enumerable properties&lt;/a&gt; of an object.</source>
          <target state="translated">&lt;code&gt;for...in&lt;/code&gt; 모든 비을 반복 &lt;a href=&quot;../global_objects/symbol&quot;&gt;기호&lt;/a&gt; , &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties&quot;&gt;열거 속성&lt;/a&gt; 객체의.</target>
        </trans-unit>
        <trans-unit id="29406bf57a33a30a4b6f597e7fe2d7356f5eca8d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;for...in&lt;/code&gt; loop below iterates over all of the object's enumerable, non-Symbol properties and logs a string of the property names and their values.</source>
          <target state="translated">아래 의 &lt;code&gt;for...in&lt;/code&gt; 루프는 열거 할 수있는 심볼이 아닌 모든 속성을 반복하고 속성 이름과 해당 값의 문자열을 기록합니다.</target>
        </trans-unit>
        <trans-unit id="f712afa8e9cb3754589a55d82fe83b933ad6717c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;for...of&lt;/code&gt; statement iterates over data that &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Iterables&quot;&gt;iterable object&lt;/a&gt; defines to be iterated over.</source>
          <target state="translated">는 &lt;code&gt;for...of&lt;/code&gt; 문이 데이터를 통해 반복 할 것을 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Iterables&quot;&gt;반복 가능한 객체&lt;/a&gt; 를 정의는 이상 반복한다.</target>
        </trans-unit>
        <trans-unit id="c497a43bf18e1ae3f58f4b70fa1313f082991044" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;for...of&lt;/code&gt;creates a loop iterating over &lt;a href=&quot;../iteration_protocols#The_iterable_protocol&quot;&gt;iterable objects&lt;/a&gt;, including: built-in &lt;a href=&quot;../global_objects/string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;Array&lt;/code&gt;-like objects (e.g., &lt;a href=&quot;../functions/arguments&quot;&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/NodeList&quot;&gt;&lt;code&gt;NodeList&lt;/code&gt;&lt;/a&gt;), &lt;a href=&quot;../global_objects/typedarray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt;, and user-defined iterables. It invokes a custom iteration hook with statements to be executed for the value of each distinct property of the object.</source>
          <target state="translated">&lt;code&gt;for...of&lt;/code&gt; 를 통해 루프 반복하는을 만들어 &lt;a href=&quot;../iteration_protocols#The_iterable_protocol&quot;&gt;반복 가능한 객체를&lt;/a&gt; 포함 : 내장 &lt;a href=&quot;../global_objects/string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;Array&lt;/code&gt; 객체 -like (예를 들면, &lt;a href=&quot;../functions/arguments&quot;&gt; &lt;code&gt;arguments&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/NodeList&quot;&gt; &lt;code&gt;NodeList&lt;/code&gt; 를&lt;/a&gt; ) &lt;a href=&quot;../global_objects/typedarray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../global_objects/map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../global_objects/set&quot;&gt; &lt;code&gt;Set&lt;/code&gt; &lt;/a&gt; 및 사용자 정의 반복 가능 객체. 객체의 각 고유 속성 값에 대해 실행될 명령문으로 사용자 정의 반복 후크를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="6da8bd4887945e1df08e947192a941ac0562f0b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forEach()&lt;/code&gt; method executes the provided &lt;code&gt;callback&lt;/code&gt; once for each element present in the typed array in ascending order. It is not invoked for indexes that have been deleted or elided. However, it is executed for elements that are present and have the value &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;forEach()&lt;/code&gt; 메소드가 실행 제공 &lt;code&gt;callback&lt;/code&gt; 오름차순으로 형식화 된 배열 내의 각 요소를 본 한번씩. 삭제되거나 제거 된 인덱스에 대해서는 호출되지 않습니다. 그러나 존재하고 값이 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; 인&lt;/a&gt; 요소에 대해 실행됩니다 .</target>
        </trans-unit>
        <trans-unit id="db182815806ced5ebb493f02e1d099d07a63467b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forEach()&lt;/code&gt; method executes the provided &lt;code&gt;callback&lt;/code&gt; once for each value which actually exists in the &lt;code&gt;Set&lt;/code&gt; object. It is not invoked for values which have been deleted. However, it is executed for values which are present but have the value &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;forEach()&lt;/code&gt; 메소드가 실행 제공 &lt;code&gt;callback&lt;/code&gt; 실제로 존재하는 각 값에 대해 한 번 &lt;code&gt;Set&lt;/code&gt; 오브젝트. 삭제 된 값에 대해서는 호출되지 않습니다. 그러나 존재하지만 값이 &lt;code&gt;undefined&lt;/code&gt; 인 값에 대해 실행됩니다 .</target>
        </trans-unit>
        <trans-unit id="f9f7e05c5fd62de0070b06e49a72a216e6f80b94" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forEach&lt;/code&gt; method executes the provided &lt;code&gt;callback&lt;/code&gt; once for each key of the map which actually exist. It is not invoked for keys which have been deleted. However, it is executed for values which are present but have the value &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;forEach&lt;/code&gt; 방법 제공된 실행 &lt;code&gt;callback&lt;/code&gt; 실제로 존재 맵의 각 키를 한번. 삭제 된 키에 대해서는 호출되지 않습니다. 그러나 존재하지만 값이 &lt;code&gt;undefined&lt;/code&gt; 인 값에 대해 실행됩니다 .</target>
        </trans-unit>
        <trans-unit id="0ca7c3b42e910613bcd59048c92585787ffc8fa4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;formatToParts()&lt;/code&gt; method is useful for custom formatting of date strings. It returns an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; of objects containing the locale-specific tokens from which it possible to build custom strings while preserving the locale-specific parts. The structure the &lt;code&gt;formatToParts()&lt;/code&gt; method returns, looks like this:</source>
          <target state="translated">&lt;code&gt;formatToParts()&lt;/code&gt; 메서드는 날짜 문자열의 형식을 정의하는 데 유용합니다. 로케일 특정 부분을 보존하면서 사용자 정의 문자열을 빌드 할 수있는 로케일 특정 토큰이 포함 된 오브젝트 의 &lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; 을 리턴합니다 . &lt;code&gt;formatToParts()&lt;/code&gt; 메소드가 리턴 하는 구조는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="fab0d98a022cfcafdbadc12bf113a20afcc1d6b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;formatToParts()&lt;/code&gt; method is useful for custom formatting of number strings. It returns an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; of objects containing the locale-specific tokens from which it possible to build custom strings while preserving the locale-specific parts. The structure the &lt;code&gt;formatToParts()&lt;/code&gt; method returns, looks like this:</source>
          <target state="translated">&lt;code&gt;formatToParts()&lt;/code&gt; 메소드 번호 문자열 포맷을 정의하는데 유용하다. 로케일 특정 부분을 보존하면서 사용자 정의 문자열을 빌드 할 수있는 로케일 특정 토큰이 포함 된 오브젝트 의 &lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; 을 리턴합니다 . &lt;code&gt;formatToParts()&lt;/code&gt; 메소드가 리턴 하는 구조는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="fd423370e6c4bf20906012c05a38d24688897b5d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;function*&lt;/code&gt; keyword can be used to define a generator function inside an expression.</source>
          <target state="translated">&lt;code&gt;function*&lt;/code&gt; 키워드는 내부 식 발전기 함수를 정의 할 수있다.</target>
        </trans-unit>
        <trans-unit id="8f156c2704eb928c282ec963343ae475c9d3b08e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;function*&lt;/code&gt; keyword defines a generator function expression.</source>
          <target state="translated">&lt;code&gt;function*&lt;/code&gt; 키워드는 발전기 함수 표현식을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="33e827b4ed74885f2170b0ea61a127c1413e0b08" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;function&lt;/code&gt; keyword can be used to define a function inside an expression.</source>
          <target state="translated">&lt;code&gt;function&lt;/code&gt; 키워드 식 내부 함수를 정의 할 수있다.</target>
        </trans-unit>
        <trans-unit id="134d18d1ded106547a7ac40a53ef2d07abd2638f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;function&lt;/code&gt; keyword can be used to define a legacy generator function inside an expression. To make the function a legacy generator, the function body should contains at least one &lt;a href=&quot;operators/yield&quot;&gt;&lt;code&gt;yield&lt;/code&gt;&lt;/a&gt; expression.</source>
          <target state="translated">&lt;code&gt;function&lt;/code&gt; 키워드 식 내부 레거시 생성 함수를 정의 할 수있다. 함수를 레거시 생성기 (legacy generator)로 만들려면 함수 본문에 적어도 하나의 &lt;a href=&quot;operators/yield&quot;&gt; &lt;code&gt;yield&lt;/code&gt; &lt;/a&gt; 표현식이 있어야 합니다.</target>
        </trans-unit>
        <trans-unit id="1376db3f2218216b073ab1cc640028ca29c50085" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;function&lt;/code&gt; keyword defines a function expression.</source>
          <target state="translated">&lt;code&gt;function&lt;/code&gt; 키워드는 함수 표현식을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="22e2627431db302a628ff6fee1b32925f73fabfb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get&lt;/code&gt; method can return any value.</source>
          <target state="translated">&lt;code&gt;get&lt;/code&gt; 메소드는 값을 반환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="13f27328229caf8369980cf45d2a8c6bb39118ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get&lt;/code&gt; syntax binds an object property to a function that will be called when that property is looked up.</source>
          <target state="translated">&lt;code&gt;get&lt;/code&gt; 구문은 그 속성이 조회 될 때 호출되는 함수에 객체 속성을 결합한다.</target>
        </trans-unit>
        <trans-unit id="d05dd55ae668fc9f4dadca6fcd731e01110ff5cc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getDate()&lt;/code&gt; method returns the day of the month for the specified date according to local time.</source>
          <target state="translated">&lt;code&gt;getDate()&lt;/code&gt; 메소드는 현지 시간에 따라 지정된 날짜의 월의 일을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e04f3a360c18901fbc4ea2940bf454193ab3666c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getDay()&lt;/code&gt; method returns the day of the week for the specified date according to local time, where 0 represents Sunday. For the day of the month see &lt;a href=&quot;getdate&quot;&gt;getDate()&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;getDay()&lt;/code&gt; 메서드는 0 일요일을 나타냅니다 현지 시간에 따라 지정된 날짜의 요일을 반환합니다. 해당 월의 일에 대해서는 &lt;a href=&quot;getdate&quot;&gt;getDate ()를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6a9f9f676c0cc78ad67df96facf8f3f38aa56a43" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getFloat32()&lt;/code&gt; method gets a signed 32-bit float (float) at the specified byte offset from the start of the &lt;a href=&quot;../dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;getFloat32()&lt;/code&gt; 메소드는 개시 오프셋 지정된 바이트의 부호 32 비트 플로우트 (플로트) 도착 &lt;a href=&quot;../dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; 를이&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="fa36571f206932e93411e982c87c578947461a0a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getFloat64()&lt;/code&gt; method gets a signed 64-bit float (double) at the specified byte offset from the start of the &lt;a href=&quot;../dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;getFloat64()&lt;/code&gt; 메소드는 개시 오프셋 지정된 바이트의 부호 64 비트 플로우트 (더블) 도착 &lt;a href=&quot;../dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; 를이&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d9d146589515af1bb3daa9cd983a4603940525ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getFullYear()&lt;/code&gt; method returns the year of the specified date according to local time.</source>
          <target state="translated">&lt;code&gt;getFullYear()&lt;/code&gt; 메소드는 현지 시간에 따라 지정된 날짜의 연도를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="2847e189000182b336da2124e9513f819d01930f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getHours()&lt;/code&gt; method returns the hour for the specified date, according to local time.</source>
          <target state="translated">&lt;code&gt;getHours()&lt;/code&gt; 메소드는 로컬 시간에 지정된 기간에 대한 시간을 반환한다.</target>
        </trans-unit>
        <trans-unit id="52e82be3f6a954249303eaef82b3b7c60c752028" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getInt16()&lt;/code&gt; method gets a signed 16-bit integer (short) at the specified byte offset from the start of the &lt;a href=&quot;../dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;getInt16()&lt;/code&gt; 메소드는 개시 오프셋 지정된 바이트의 부호없는 16 비트 정수 (짧은) 도착 &lt;a href=&quot;../dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; 를이&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="962649f728dba72ec76eb3806281dd1d21b5e028" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getInt32()&lt;/code&gt; method gets a signed 32-bit integer (long) at the specified byte offset from the start of the &lt;a href=&quot;../dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;getInt32()&lt;/code&gt; 메소드는 개시 오프셋 지정된 바이트의 부호없는 32 비트 정수 (long)를 얻는다 &lt;a href=&quot;../dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; 를이&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="980cdc01daf7be300e5b8c69d8215b0716f5b04a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getInt8()&lt;/code&gt; method gets a signed 8-bit integer (byte) at the specified byte offset from the start of the &lt;a href=&quot;../dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;getInt8()&lt;/code&gt; 메소드는 개시 오프셋 지정된 바이트의 부호 8 비트 정수 (바이트) 도착 &lt;a href=&quot;../dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; 를이&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="36afd52250cf4065f352d5f83fdccdd94e509185" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getMilliseconds()&lt;/code&gt; method returns the milliseconds in the specified date according to local time.</source>
          <target state="translated">&lt;code&gt;getMilliseconds()&lt;/code&gt; 메소드가 복귀 로컬 시간에 지정된 날짜의 밀리.</target>
        </trans-unit>
        <trans-unit id="e6bfe75388540e76a5084b891c3fdcbe40323576" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getMinutes()&lt;/code&gt; method returns the minutes in the specified date according to local time.</source>
          <target state="translated">&lt;code&gt;getMinutes()&lt;/code&gt; 메소드가 복귀 로컬 시간에 지정된 날짜의 분.</target>
        </trans-unit>
        <trans-unit id="403b1a9a59018c87ead2fc41704995448cbf8f1e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getMonth()&lt;/code&gt; method returns the month in the specified date according to local time, as a zero-based value (where zero indicates the first month of the year).</source>
          <target state="translated">&lt;code&gt;getMonth()&lt;/code&gt; 메소드 (영 해의 첫 달 나타냄)는 제로 값으로, 로컬 시간에 지정된 날짜에 달을 반환한다.</target>
        </trans-unit>
        <trans-unit id="ea41ec984f65501c21f45f656c294aaab666ad64" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getOwnPropertyDescriptor&lt;/code&gt; method must return an object or &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;getOwnPropertyDescriptor&lt;/code&gt; 의 방법은 개체 또는 반환해야합니다 &lt;code&gt;undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a8f23c761f1daf7cf770d343be0e8a0b70d781d9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getPrototypeOf&lt;/code&gt; method must return an object or &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;getPrototypeOf&lt;/code&gt; 의 방법은 개체 또는 반환해야 &lt;code&gt;null&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f1106dd2a14afc0d3fc0d455fd9ea6f20293b1ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getSeconds()&lt;/code&gt; method returns the seconds in the specified date according to local time.</source>
          <target state="translated">&lt;code&gt;getSeconds()&lt;/code&gt; 메소드가 복귀 로컬 시간에 지정된 날짜의 초.</target>
        </trans-unit>
        <trans-unit id="4c4b0f5f01e52cdd348a4a4f41c9c6c66a9163f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getTime()&lt;/code&gt; method returns the numeric value corresponding to the time for the specified date according to universal time.</source>
          <target state="translated">&lt;code&gt;getTime()&lt;/code&gt; 메소드 표준시에 따라 지정된 날짜의 시간에 대응하는 숫자 값을 반환한다.</target>
        </trans-unit>
        <trans-unit id="0cf6cd047165df1fea08b2a65982c5365eef255e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getTimezoneOffset()&lt;/code&gt; method returns the time zone difference, in minutes, from current locale (host system settings) to UTC.</source>
          <target state="translated">&lt;code&gt;getTimezoneOffset()&lt;/code&gt; 메서드는 UTC에 현재 로케일 (호스트 시스템 설정)에서 분 시간대 차이를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="02ca508407a71cfecf575e3fd69c13c522024d79" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getUTCDate()&lt;/code&gt; method returns the day (date) of the month in the specified date according to universal time.</source>
          <target state="translated">&lt;code&gt;getUTCDate()&lt;/code&gt; 메소드는 표준시에 따라 지정된 날짜에 그 달의 날짜 (날짜)를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6c5141384fd8dbcf7314b85412ffb1186ac3eb0a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getUTCDay()&lt;/code&gt; method returns the day of the week in the specified date according to universal time, where 0 represents Sunday.</source>
          <target state="translated">&lt;code&gt;getUTCDay()&lt;/code&gt; 메서드는 0 일요일을 나타냅니다 표준시에 따라 지정된 날짜에 요일을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="485ae8904d445cb931eaf57bc2f6fc5a75c956f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getUTCFullYear()&lt;/code&gt; method returns the year in the specified date according to universal time.</source>
          <target state="translated">&lt;code&gt;getUTCFullYear()&lt;/code&gt; 메서드는 표준시에 따라 지정된 날짜에서 연도를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6e0f2c7e6cdce96b470e00d6dae64071d42f2714" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getUTCHours()&lt;/code&gt; method returns the hours in the specified date according to universal time.</source>
          <target state="translated">&lt;code&gt;getUTCHours()&lt;/code&gt; 메소드가 반환 표준시에 따라 지정된 날짜의 시간.</target>
        </trans-unit>
        <trans-unit id="792ad172d83482315cfaade158ab4b56a8070d29" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getUTCMilliseconds()&lt;/code&gt; method returns the milliseconds in the specified date according to universal time.</source>
          <target state="translated">&lt;code&gt;getUTCMilliseconds()&lt;/code&gt; 메소드가 반환 표준시에 따라 지정된 날짜의 밀리 초.</target>
        </trans-unit>
        <trans-unit id="4d6dc3e7a23a53a4431d50d20b4314fbf51e3b4e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getUTCMinutes()&lt;/code&gt; method returns the minutes in the specified date according to universal time.</source>
          <target state="translated">&lt;code&gt;getUTCMinutes()&lt;/code&gt; 메소드가 반환 표준시에 따라 지정된 날짜의 분.</target>
        </trans-unit>
        <trans-unit id="a8e2240d70cd6c006b32d6d66bd2dc4e25e784b6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getUTCMonth()&lt;/code&gt; returns the month of the specified date according to universal time, as a zero-based value (where zero indicates the first month of the year).</source>
          <target state="translated">&lt;code&gt;getUTCMonth()&lt;/code&gt; (영 해의 첫 달을 나타냅니다) 0부터 시작하는 값으로, 표준시에 따라 지정된 날짜의 월을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="4994a1c81f9b0ead2db9194632edcb867919d3e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getUTCSeconds()&lt;/code&gt; method returns the seconds in the specified date according to universal time.</source>
          <target state="translated">&lt;code&gt;getUTCSeconds()&lt;/code&gt; 메소드가 반환 표준시에 따라 지정된 날짜에 초.</target>
        </trans-unit>
        <trans-unit id="b4cb9d2442b33b0752c362a8b69a2e4787f4d186" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getUint16()&lt;/code&gt; method gets an unsigned 16-bit integer (unsigned short) at the specified byte offset from the start of the &lt;a href=&quot;../dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;getUint16()&lt;/code&gt; 메소드는 개시 오프셋 지정된 바이트의 부호없는 16 비트 정수 (부호 짧은) 도착 &lt;a href=&quot;../dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; 를이&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="31b4253c3ebb280c0d1c463c1ff695239fb52130" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getUint32()&lt;/code&gt; method gets an unsigned 32-bit integer (unsigned long) at the specified byte offset from the start of the &lt;a href=&quot;../dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;getUint32()&lt;/code&gt; 메소드는 개시 오프셋 지정된 바이트의 부호없는 32 비트 정수 (unsigned long을) 도착 &lt;a href=&quot;../dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; 를이&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c90ef7ca51d5a8571747710d9a0c566e95bd223d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getUint8()&lt;/code&gt; method gets an unsigned 8-bit integer (unsigned byte) at the specified byte offset from the start of the &lt;a href=&quot;../dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;getUint8()&lt;/code&gt; 메소드는 개시 오프셋 지정된 바이트의 부호없는 8 비트 정수 (부호 바이트) 도착 &lt;a href=&quot;../dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; 를이&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ddeeb1a8c80dd55d495f18e4339394cdfaee1be6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;global&lt;/code&gt; property indicates whether or not the &quot;&lt;code&gt;g&lt;/code&gt;&quot; flag is used with the regular expression. &lt;code&gt;global&lt;/code&gt; is a read-only property of an individual regular expression instance.</source>
          <target state="translated">&lt;code&gt;global&lt;/code&gt; 속성은 &quot;여부를 나타냅니다 &lt;code&gt;g&lt;/code&gt; &quot;플래그가 정규 표현식 사용됩니다. &lt;code&gt;global&lt;/code&gt; 은 개별 정규식 인스턴스의 읽기 전용 속성입니다.</target>
        </trans-unit>
        <trans-unit id="9c4ae749dfc02b57fa2a602ea8209b5a5af4898f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;grow()&lt;/code&gt; protoype method of the &lt;code&gt;&lt;a href=&quot;../memory&quot;&gt;Memory&lt;/a&gt;&lt;/code&gt; object increases the size of the memory instance by a specified number of WebAssembly pages.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../memory&quot;&gt;Memory&lt;/a&gt;&lt;/code&gt; 객체 의 &lt;code&gt;grow()&lt;/code&gt; protoype 메서드 는 지정된 수의 WebAssembly 페이지만큼 메모리 인스턴스의 크기를 증가시킵니다.</target>
        </trans-unit>
        <trans-unit id="d9d2f55a6442ec009dff9f8791025ae6d16936c9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;handler.apply()&lt;/code&gt; method is a trap for a function call.</source>
          <target state="translated">&lt;code&gt;handler.apply()&lt;/code&gt; 메소드는 함수 호출에 대한 트랩이다.</target>
        </trans-unit>
        <trans-unit id="da11e5195e97ea8a85450a5c62373ae9b040b9cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;handler.defineProperty()&lt;/code&gt; method is a trap for &lt;a href=&quot;../../object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;handler.defineProperty()&lt;/code&gt; 메소드에 대한 트랩 인 &lt;a href=&quot;../../object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="34e98c61053dec6731b28a1be2fcdf4dea2fcc94" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;handler.deleteProperty()&lt;/code&gt; method is a trap for the &lt;a href=&quot;../../../operators/delete&quot;&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt; operator.</source>
          <target state="translated">&lt;code&gt;handler.deleteProperty()&lt;/code&gt; 메소드는 대한 트랩 인 &lt;a href=&quot;../../../operators/delete&quot;&gt; &lt;code&gt;delete&lt;/code&gt; &lt;/a&gt; 연산자.</target>
        </trans-unit>
        <trans-unit id="7e5ab0de815a367d114d029c9082ded5622f891b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;handler.get()&lt;/code&gt; method is a trap for getting a property value.</source>
          <target state="translated">&lt;code&gt;handler.get()&lt;/code&gt; 메소드는 속성 값을 가져 오는 함정이다.</target>
        </trans-unit>
        <trans-unit id="aa8b37133034564088222a099ba7d4fe7bbb28ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;handler.getOwnPropertyDescriptor()&lt;/code&gt; method is a trap for &lt;a href=&quot;../../object/getownpropertydescriptor&quot;&gt;&lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;handler.getOwnPropertyDescriptor()&lt;/code&gt; 메소드에 대한 트랩 인 &lt;a href=&quot;../../object/getownpropertydescriptor&quot;&gt; &lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d144a88e59d6732706042d1b8eb2f35df5a2fd2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;handler.getPrototypeOf()&lt;/code&gt; method is a trap for the&lt;code&gt; [[GetPrototypeOf]]&lt;/code&gt; internal method.</source>
          <target state="translated">&lt;code&gt;handler.getPrototypeOf()&lt;/code&gt; 메소드는 대한 트랩 인 &lt;code&gt; [[GetPrototypeOf]]&lt;/code&gt; 내부 방법.</target>
        </trans-unit>
        <trans-unit id="a5b4c65dd0b7a110d6c1535f91f335edae32cdce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;handler.has()&lt;/code&gt; method is a trap for the &lt;a href=&quot;../../../operators/in&quot;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; operator.</source>
          <target state="translated">&lt;code&gt;handler.has()&lt;/code&gt; 메소드는 인위한 트랩 &lt;a href=&quot;../../../operators/in&quot;&gt; &lt;code&gt;in&lt;/code&gt; &lt;/a&gt; 오퍼레이터.</target>
        </trans-unit>
        <trans-unit id="c6c293f67d7c5e7952172040332bf0247fedefa6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;handler.isExtensible()&lt;/code&gt; method is a trap for &lt;a href=&quot;../../object/isextensible&quot;&gt;&lt;code&gt;Object.isExtensible()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;handler.isExtensible()&lt;/code&gt; 메소드에 대한 트랩 인 &lt;a href=&quot;../../object/isextensible&quot;&gt; &lt;code&gt;Object.isExtensible()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2cad75bca6dd2dae5242f0905ebba96efb71161d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;handler.ownKeys()&lt;/code&gt; method is a trap for &lt;a href=&quot;../../reflect/ownkeys&quot;&gt;&lt;code&gt;Reflect.ownKeys()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;handler.ownKeys()&lt;/code&gt; 메소드에 대한 트랩 인 &lt;a href=&quot;../../reflect/ownkeys&quot;&gt; &lt;code&gt;Reflect.ownKeys()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e03465bf0925a432e723c9df7faaf10db9089082" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;handler.preventExtensions()&lt;/code&gt; method is a trap for &lt;a href=&quot;../../object/preventextensions&quot;&gt;&lt;code&gt;Object.preventExtensions()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;handler.preventExtensions()&lt;/code&gt; 메소드에 대한 트랩 인 &lt;a href=&quot;../../object/preventextensions&quot;&gt; &lt;code&gt;Object.preventExtensions()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b34c42feebcd0b8745a3409c30a53b81a69f04a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;handler.setPrototypeOf()&lt;/code&gt; method is a trap for &lt;a href=&quot;../../object/setprototypeof&quot;&gt;&lt;code&gt;Object.setPrototypeOf()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;handler.setPrototypeOf()&lt;/code&gt; 메소드에 대한 트랩 인 &lt;a href=&quot;../../object/setprototypeof&quot;&gt; &lt;code&gt;Object.setPrototypeOf()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="fdfcd91dc8f4435cbfb2e13d27046695b20cb020" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;has&lt;/code&gt; method must return a boolean value.</source>
          <target state="translated">&lt;code&gt;has&lt;/code&gt; 방법은 부울 값을 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="e7e2ffad18433efedfa98f68a218e08732672865" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ignoreCase&lt;/code&gt; property indicates whether or not the &quot;&lt;code&gt;i&lt;/code&gt;&quot; flag is used with the regular expression. &lt;code&gt;ignoreCase&lt;/code&gt; is a read-only property of an individual regular expression instance.</source>
          <target state="translated">&lt;code&gt;ignoreCase&lt;/code&gt; 속성은 &quot;여부를 나타냅니다 &lt;code&gt;i&lt;/code&gt; &quot;플래그가 정규 표현식 사용됩니다. &lt;code&gt;ignoreCase&lt;/code&gt; 는 개별 정규식 인스턴스의 읽기 전용 속성입니다.</target>
        </trans-unit>
        <trans-unit id="a02b27715b2fe21499d61100129116507cecde04" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;import.meta&lt;/code&gt; object consists of the keyword &lt;a href=&quot;import&quot;&gt;&lt;code&gt;import&lt;/code&gt;&lt;/a&gt;, a dot, and a property name &lt;code&gt;meta&lt;/code&gt;. Normally &lt;code&gt;import.&lt;/code&gt; serves as the context for a property access, but here &lt;code&gt;import.&lt;/code&gt; is not really an object.</source>
          <target state="translated">&lt;code&gt;import.meta&lt;/code&gt; 객체는 키워드로 구성되어 &lt;a href=&quot;import&quot;&gt; &lt;code&gt;import&lt;/code&gt; &lt;/a&gt; , 점 및 속성 이름의 &lt;code&gt;meta&lt;/code&gt; . 일반적으로 &lt;code&gt;import.&lt;/code&gt; 속성 액세스의 컨텍스트로 사용되지만 여기서는 &lt;code&gt;import.&lt;/code&gt; 실제로는 대상이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="bd4535c25176da8e60dbc4d09c2cfbb6d7252947" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;import.meta&lt;/code&gt; object is created by the ECMAScript implementation, with a &lt;a href=&quot;../global_objects/null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; prototype. The object is extensible, and its properties are writable, configurable, and enumerable.</source>
          <target state="translated">&lt;code&gt;import.meta&lt;/code&gt; 객체는 더불어, ECMAScript를 구현하여 만든 &lt;a href=&quot;../global_objects/null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt; 프로토 타입. 개체는 확장 가능하며 속성은 쓰기 가능하고 구성 가능하며 열거 가능합니다.</target>
        </trans-unit>
        <trans-unit id="137b89f6f10ee4ca89dff87eedc511ac09b31e96" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;import&lt;/code&gt; keyword may be called as a function to dynamically import a module. When used this way, it returns a promise.</source>
          <target state="translated">&lt;code&gt;import&lt;/code&gt; 키워드는 동적 모듈을 가져올 수있는 함수로 호출 할 수있다. 이 방법을 사용하면 약속을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="cd958d3d8612c968975765e609ccc04caf5a63c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;in&lt;/code&gt; operator always expects an object.</source>
          <target state="translated">&lt;code&gt;in&lt;/code&gt; 연산자는 항상 객체를 기대하고있다.</target>
        </trans-unit>
        <trans-unit id="70177b29eb0e4bfc6a23b96b657fc326b3f6a005" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;in&lt;/code&gt; operator determines whether an object has a given property.</source>
          <target state="translated">&lt;code&gt;in&lt;/code&gt; 오퍼레이터는 객체가 특정 속성을 가지고 있는지 판단한다.</target>
        </trans-unit>
        <trans-unit id="2af3817320c5d2c460c7e767b6bbeb13970040f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;in&lt;/code&gt; operator returns &lt;code&gt;true&lt;/code&gt; for properties in the prototype chain.</source>
          <target state="translated">&lt;code&gt;in&lt;/code&gt; 연산자는 반환 &lt;code&gt;true&lt;/code&gt; 프로토 타입 체인에서 속성.</target>
        </trans-unit>
        <trans-unit id="b6fa64d07582785dd2131600f615794034736d53" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;in&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; if the specified property is in the specified object or its prototype chain.</source>
          <target state="translated">&lt;code&gt;in&lt;/code&gt; 반환 &lt;code&gt;true&lt;/code&gt; 지정된 속성이 지정된 개체 또는 프로토 타입 체인에있는 경우.</target>
        </trans-unit>
        <trans-unit id="8ea9fa669bb545ce5f8669d897d233f52c2bd048" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;includes()&lt;/code&gt; method determines whether one string may be found within another string, returning &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; as appropriate.</source>
          <target state="translated">&lt;code&gt;includes()&lt;/code&gt; 방법은 하나의 문자열을 반환 다른 문자열 내에서 발견 될 수 있는지를 판정 &lt;code&gt;true&lt;/code&gt; 또는 &lt;code&gt;false&lt;/code&gt; 적절.</target>
        </trans-unit>
        <trans-unit id="57a47f7d9e0fe49d6c50e9dab172f8b6fc789ef2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;includes()&lt;/code&gt; method is case sensitive. For example, the following expression returns false:</source>
          <target state="translated">&lt;code&gt;includes()&lt;/code&gt; 메소드는 대소 문자를 구분한다. 예를 들어 다음 표현식은 false를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="da25ad1444fb168b26f9af841d880d06222f7db2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;indexOf()&lt;/code&gt; method is case sensitive. For example, the following expression returns -1:</source>
          <target state="translated">&lt;code&gt;indexOf()&lt;/code&gt; 메소드는 대소 문자를 구분한다. 예를 들어 다음 표현식은 -1을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="88275165e94dfa73163214733a74215098b67408" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;indexOf()&lt;/code&gt; method returns the index within the calling &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; object of the first occurrence of the specified value, starting the search at &lt;code&gt;fromIndex&lt;/code&gt;. Returns -1 if the value is not found.</source>
          <target state="translated">&lt;code&gt;indexOf()&lt;/code&gt; 메소드 호출 색인을 반환 &lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 의 검색 시작, 지정된 값의 처음 나타나는 객체 &lt;code&gt;fromIndex&lt;/code&gt; 의이 . 값을 찾지 못하면 -1을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="1131810937b6ceba699e277ff01edd9ab93e559b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;instanceof&lt;/code&gt; operator determines whether an object is an instance of another object.</source>
          <target state="translated">&lt;code&gt;instanceof&lt;/code&gt; 는 운영자 개체에서 다른 개체의 인스턴스인지의 여부를 판정한다.</target>
        </trans-unit>
        <trans-unit id="db5f10dc6f232cd9e6844d01ffbc76f124d2050a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;instanceof&lt;/code&gt; operator tests the presence of &lt;code&gt;constructor.prototype&lt;/code&gt; in &lt;code&gt;object&lt;/code&gt;'s prototype chain.</source>
          <target state="translated">&lt;code&gt;instanceof&lt;/code&gt; 연산자의 존재 테스트 &lt;code&gt;constructor.prototype&lt;/code&gt; 에서 &lt;code&gt;object&lt;/code&gt; 의 프로토 타입 체인.</target>
        </trans-unit>
        <trans-unit id="05eb0faee90a55ba0e606a263c4af994fcd1c9e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;instanceof&lt;/code&gt; tests whether the &lt;code&gt;prototype&lt;/code&gt; property of a constructor appears anywhere in the prototype chain of an object.</source>
          <target state="translated">&lt;code&gt;instanceof&lt;/code&gt; 를 테스트 여부를 &lt;code&gt;prototype&lt;/code&gt; 생성자의 속성은 객체의 프로토 타입 체인에 어디 나타납니다.</target>
        </trans-unit>
        <trans-unit id="db62a1f4bb9f66603917c1a79ebcc8a346d4e545" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;isExtensible&lt;/code&gt; method must return a boolean value.</source>
          <target state="translated">&lt;code&gt;isExtensible&lt;/code&gt; 의 방법은 부울 값을 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="85e3a1f11e7e8776b457b403545f6b2ffc357c60" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;isPrototypeOf()&lt;/code&gt; method allows you to check whether or not an object exists within another object's prototype chain.</source>
          <target state="translated">&lt;code&gt;isPrototypeOf()&lt;/code&gt; 메서드를 사용하면 객체가 다른 객체의 프로토 타입 체인 내에 존재하는지 여부를 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="22c6c3a68a3f263cb8242bb52bcd85136093befc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;italics()&lt;/code&gt; method creates an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/i&quot;&gt;&lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML element that causes a string to be italic.</source>
          <target state="translated">&lt;code&gt;italics()&lt;/code&gt; 메소드가 생성 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/i&quot;&gt; &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; &lt;/a&gt; 이탤릭체 될 문자열을 일으키는 HTML 요소.</target>
        </trans-unit>
        <trans-unit id="b11dee7a5962a98be4ee10fd5794342f2e33d45d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;italics()&lt;/code&gt; method embeds a string in an &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; tag: &lt;code&gt;&quot;&amp;lt;i&amp;gt;str&amp;lt;/i&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;italics()&lt;/code&gt; 방법은 문자열을 매립 &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; 태그 : &lt;code&gt;&quot;&amp;lt;i&amp;gt;str&amp;lt;/i&amp;gt;&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e74dd16f9858676902cde2900dd4949803073594" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;keys()&lt;/code&gt; method is an alias for this method (for similarity with &lt;a href=&quot;../map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; objects); it behaves exactly the same and returns &lt;strong&gt;values&lt;/strong&gt; of &lt;code&gt;Set&lt;/code&gt; elements.</source>
          <target state="translated">&lt;code&gt;keys()&lt;/code&gt; 메소드 (과 유사성이 방법의 별칭 &lt;a href=&quot;../map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt; 오브젝트); 정확히 동일하게 작동하며 &lt;code&gt;Set&lt;/code&gt; 요소의 &lt;strong&gt;값&lt;/strong&gt; 을 반환 &lt;strong&gt;합니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="183d7350179b9311f6ab0cc773e01fa02ad51905" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;keys()&lt;/code&gt; method returns a new &lt;code&gt;Array Iterator&lt;/code&gt; object that contains the keys for each index in the array.</source>
          <target state="translated">&lt;code&gt;keys()&lt;/code&gt; 메소드가 복귀 새로운 &lt;code&gt;Array Iterator&lt;/code&gt; 배열의 각 인덱스에 대한 키를 포함 개체.</target>
        </trans-unit>
        <trans-unit id="f138711db135dc77545d537efaa0371b48630b42" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lastIndex&lt;/code&gt; is a read/write integer property of regular expression instances that specifies the index at which to start the next match.</source>
          <target state="translated">&lt;code&gt;lastIndex&lt;/code&gt; 다음 경기를 시작하는 시점의 인덱스를 지정 정규 표현식 인스턴스의 읽기 / 쓰기 정수 속성입니다.</target>
        </trans-unit>
        <trans-unit id="23d7ea72aede6afa9bf6337e59208b0df9cc6a61" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lastIndexOf()&lt;/code&gt; method is case sensitive. For example, the following expression returns -1:</source>
          <target state="translated">&lt;code&gt;lastIndexOf()&lt;/code&gt; 메소드는 대소 문자를 구분한다. 예를 들어 다음 표현식은 -1을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="7aeaa3725e44aeaaab6aa2ed98bb6cb13ae6961c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lastIndexOf()&lt;/code&gt; method returns the index within the calling &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; object of the last occurrence of the specified value, searching backwards from &lt;code&gt;fromIndex&lt;/code&gt;. Returns -1 if the value is not found.</source>
          <target state="translated">&lt;code&gt;lastIndexOf()&lt;/code&gt; 메소드가 반환 호출 내의 인덱스 &lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 지정된 값의 마지막에 나타나는 객체에서 뒤로 검색 &lt;code&gt;fromIndex&lt;/code&gt; 의 . 값을 찾지 못하면 -1을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="113510bfe2eab0d5b0a61ea4c42047ebb99f5885" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;length&lt;/code&gt; accessor property represents the length (in elements) of a typed array.</source>
          <target state="translated">&lt;code&gt;length&lt;/code&gt; 속성 접근은 형식화 된 배열 (요소)의 길이를 나타낸다.</target>
        </trans-unit>
        <trans-unit id="c8dd28c3bf8fd7c77f8d27e10373d279d0f83b72" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;length&lt;/code&gt; property is an accessor property whose set accessor function is &lt;code&gt;undefined&lt;/code&gt;, meaning that you can only read this property. The value is established when a &lt;em&gt;TypedArray&lt;/em&gt; is constructed and cannot be changed. If the &lt;em&gt;TypedArray&lt;/em&gt; is not specifying an &lt;code&gt;byteOffset&lt;/code&gt; or a &lt;code&gt;length&lt;/code&gt;, the length of the referenced &lt;a href=&quot;../arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; will be returned. &lt;em&gt;TypedArray&lt;/em&gt; is one of the &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;TypedArray objects&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;length&lt;/code&gt; 속성은 그 설정 접근 기능을하는 접근 자 속성입니다 &lt;code&gt;undefined&lt;/code&gt; 경우에만이 속성을 읽을 수 있다는 것을 의미한다. 이 값은 &lt;em&gt;TypedArray&lt;/em&gt; 가 구성되어 있으며 변경할 수 없을 때 설정됩니다 . 는 IF &lt;em&gt;하는 TypedArray가&lt;/em&gt; 지정되지 &lt;code&gt;byteOffset&lt;/code&gt; 또는 &lt;code&gt;length&lt;/code&gt; , 참조의 길이 &lt;a href=&quot;../arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; 가&lt;/a&gt; 반환됩니다. &lt;em&gt;TypedArray&lt;/em&gt; 는 &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;TypedArray 객체&lt;/a&gt; 중 하나입니다 .</target>
        </trans-unit>
        <trans-unit id="17eb6c72a74d84b4b63d4970c73653ebdce9ee57" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;length&lt;/code&gt; property of a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; object indicates the length of a string, in UTF-16 code units.</source>
          <target state="translated">&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 객체 의 &lt;code&gt;length&lt;/code&gt; 속성은 문자열 길이를 UTF-16 코드 단위로 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="cb11bdfd638aa86f8289baf1a1d8a061b583b03c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;length&lt;/code&gt; property of the &lt;code&gt;from()&lt;/code&gt; method is 1.</source>
          <target state="translated">&lt;code&gt;from()&lt;/code&gt; 메소드 의 &lt;code&gt;length&lt;/code&gt; 특성 은 1입니다.</target>
        </trans-unit>
        <trans-unit id="09c5fb288f65bc91b4b3473ba47a47fb653facb9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;let&lt;/code&gt; statement declares a block scope local variable, optionally initializing it to a value.</source>
          <target state="translated">&lt;code&gt;let&lt;/code&gt; 문은 선택적 값으로 초기화 블록 범위 지역 변수를 선언합니다.</target>
        </trans-unit>
        <trans-unit id="0313466e501e9d2ee779cff6b6907eb58890ff94" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;link()&lt;/code&gt; method creates a string representing the code for an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a&quot;&gt;&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML element to be used as a hypertext link to another URL.</source>
          <target state="translated">&lt;code&gt;link()&lt;/code&gt; 메소드는 대한 코드 나타내는 캐릭터 생성 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a&quot;&gt; &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 를&lt;/a&gt; 다른 URL에 하이퍼 링크로 사용되는 HTML 요소를.</target>
        </trans-unit>
        <trans-unit id="2c8a94c9b1f0a43763fc71db81d01f21c354f32a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;locale&lt;/code&gt; parameter indicates the locale to be used to convert to lower case according to any locale-specific case mappings. If multiple locales are given in an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&quot;https://tc39.github.io/ecma402/#sec-bestavailablelocale&quot;&gt;best available locale&lt;/a&gt; is used. The default locale is the host environment&amp;rsquo;s current locale.</source>
          <target state="translated">&lt;code&gt;locale&lt;/code&gt; 파라미터 로케일 로케일 특정 경우에 따라 맵핑 소문자로 변환하는 데 사용되는 나타낸다. 여러 로케일이 &lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; 에 제공되면 &lt;a href=&quot;https://tc39.github.io/ecma402/#sec-bestavailablelocale&quot;&gt;사용 가능한 최상의 로케일&lt;/a&gt; 이 사용됩니다. 기본 로캘은 호스트 환경의 현재 로캘입니다.</target>
        </trans-unit>
        <trans-unit id="87a61fc61be3cb2fa6992be6f5681a169ebfa637" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;locale&lt;/code&gt; parameter indicates the locale to be used to convert to upper case according to any locale-specific case mappings. If multiple locales are given in an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&quot;https://tc39.github.io/ecma402/#sec-bestavailablelocale&quot;&gt;best available locale&lt;/a&gt; is used. The default locale is the host environment&amp;rsquo;s current locale.</source>
          <target state="translated">&lt;code&gt;locale&lt;/code&gt; 파라미터 로케일 로케일 특정 경우 맵핑에 따라 대문자로 변환하는 데 사용되는 나타낸다. 여러 로케일이 &lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; 에 제공되면 &lt;a href=&quot;https://tc39.github.io/ecma402/#sec-bestavailablelocale&quot;&gt;사용 가능한 최상의 로케일&lt;/a&gt; 이 사용됩니다. 기본 로캘은 호스트 환경의 현재 로캘입니다.</target>
        </trans-unit>
        <trans-unit id="fe7114676e5794e2c52c5f0428da500dcc35a1ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;localeCompare()&lt;/code&gt; method returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order.</source>
          <target state="translated">&lt;code&gt;localeCompare()&lt;/code&gt; 메소드가 반환 참조 문자열이 이전 또는 이후에 오는 또는 정렬 순서의 지정된 문자열과 동일 여부를 나타내는 숫자입니다.</target>
        </trans-unit>
        <trans-unit id="883114d59602c7b3b87638f37eefba80d5f928a7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments are not supported in all browsers yet. To check for support in ES5.1 and later implementations, the requirement that illegal language tags are rejected with a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; exception can be used:</source>
          <target state="translated">&lt;code&gt;locales&lt;/code&gt; 및 &lt;code&gt;options&lt;/code&gt; 인수는 아직 모든 브라우저에서 지원되지 않습니다. ES5.1 이상의 구현에서 지원 여부를 확인하기 위해 &lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt; 예외 와 함께 잘못된 언어 태그를 거부해야하는 요구 사항을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ea464ebe7443bcc1cbc7c7ecc9c241c36251a148" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments are not supported in all browsers yet. To check whether an implementation supports them already, you can use the requirement that illegal language tags are rejected with a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; exception:</source>
          <target state="translated">&lt;code&gt;locales&lt;/code&gt; 및 &lt;code&gt;options&lt;/code&gt; 인수는 아직 모든 브라우저에서 지원되지 않습니다. 구현에서 이미 지원하는지 확인하려면 &lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt; 예외 와 함께 잘못된 언어 태그를 거부해야한다는 요구 사항을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f572b1180fdbc7170369c39d485a6e7766dc9db9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments are not supported in all browsers yet. To check whether an implementation supports them, use the &quot;i&quot; argument (a requirement that illegal language tags are rejected) and look for a &lt;a href=&quot;../rangeerror&quot;&gt;&lt;code&gt;RangeError&lt;/code&gt;&lt;/a&gt; exception:</source>
          <target state="translated">&lt;code&gt;locales&lt;/code&gt; 및 &lt;code&gt;options&lt;/code&gt; 인수는 아직 모든 브라우저에서 지원되지 않습니다. 구현이이를 지원하는지 확인하려면 &quot;i&quot;인수 (잘못된 언어 태그를 거부해야 함)를 사용하고 &lt;a href=&quot;../rangeerror&quot;&gt; &lt;code&gt;RangeError&lt;/code&gt; &lt;/a&gt; 예외를 찾으십시오 .</target>
        </trans-unit>
        <trans-unit id="e3949bb7189796b1cf1238b59f777179eda6e077" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;locales&lt;/code&gt; argument must be either a string holding a &lt;a href=&quot;http://tools.ietf.org/html/rfc5646&quot;&gt;BCP 47 language tag&lt;/a&gt;, or an array of such language tags. If the &lt;code&gt;locales&lt;/code&gt; argument is not provided or is undefined, the runtime's default locale is used.</source>
          <target state="translated">&lt;code&gt;locales&lt;/code&gt; 인수는 들고 문자열이어야합니다 &lt;a href=&quot;http://tools.ietf.org/html/rfc5646&quot;&gt;BCP 47 언어 태그를&lt;/a&gt; , 또는 언어 태그의 배열. 는 IF &lt;code&gt;locales&lt;/code&gt; 인수가 제공되지 않거나 정의되지 런타임의 기본 로케일이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="7086a2f95f0fc388bf0358b543f97d1674a54c6c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;locales&lt;/code&gt; argument, after stripping off all Unicode extensions, is interpreted as a prioritized request from the application. The runtime compares it against the locales it has available and picks the best one available. Two matching algorithms exist: the &lt;code&gt;&quot;lookup&quot;&lt;/code&gt; matcher follows the Lookup algorithm specified in &lt;a href=&quot;http://tools.ietf.org/html/rfc4647#section-3.4&quot;&gt;BCP 47&lt;/a&gt;; the &lt;code&gt;&quot;best fit&quot;&lt;/code&gt; matcher lets the runtime provide a locale that's at least, but possibly more, suited for the request than the result of the Lookup algorithm. If the application doesn't provide a &lt;code&gt;locales&lt;/code&gt; argument, or the runtime doesn't have a locale that matches the request, then the runtime's default locale is used. The matcher can be selected using a property of the &lt;code&gt;options&lt;/code&gt; argument (see below).</source>
          <target state="translated">&lt;code&gt;locales&lt;/code&gt; 인수는, 모든 유니 코드 확장을 제거 한 후, 응용 프로그램에서 우선 순위 요청으로 해석됩니다. 런타임은 사용 가능한 로케일과 비교하여 사용 가능한 최상의 로케일을 선택합니다. 두 개의 일치 알고리즘이 존재합니다. &lt;code&gt;&quot;lookup&quot;&lt;/code&gt; 매처는 &lt;a href=&quot;http://tools.ietf.org/html/rfc4647#section-3.4&quot;&gt;BCP 47에&lt;/a&gt; 지정된 조회 알고리즘을 따릅니다 . &lt;code&gt;&quot;best fit&quot;&lt;/code&gt; 정규 런타임이 조회 알고리즘의 결과보다 요구에 적합한 로케일 가능성이 더 그 최소한의, 그러나를 제공 할 수 있습니다. 응용 프로그램이 &lt;code&gt;locales&lt;/code&gt; 인수를 제공하지 않거나 런타임에 요청과 일치하는 로케일이없는 경우 런타임의 기본 로케일이 사용됩니다. &lt;code&gt;options&lt;/code&gt; 인수 (아래 참조).</target>
        </trans-unit>
        <trans-unit id="b08d877e6bf413fc13c3d37199506f7d0a1e0e66" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;map&lt;/code&gt; method calls a provided &lt;code&gt;callback&lt;/code&gt; function once for each element in a typed array, in order, and constructs a new typed array from the results. &lt;code&gt;callback&lt;/code&gt; is invoked only for indexes of the typed array which have assigned values; it is not invoked for indexes that are undefined, those which have been deleted or which have never been assigned values.</source>
          <target state="translated">&lt;code&gt;map&lt;/code&gt; 방법이 제공 호출 &lt;code&gt;callback&lt;/code&gt; 위해 형식화 된 어레이의 각 요소에 대해 한번 기능을하고, 그 결과로부터 새로운 형식화 된 배열을 구성한다. &lt;code&gt;callback&lt;/code&gt; 은 값이 할당 된 형식화 된 배열의 인덱스에 대해서만 호출됩니다. 정의되지 않은 인덱스, 삭제되었거나 값이 할당되지 않은 인덱스에 대해서는 호출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="bfae77744f16583101bc9d1e6d139a5d625553f9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;match()&lt;/code&gt; method retrieves the matches when matching a &lt;em&gt;string&lt;/em&gt; against a &lt;em&gt;regular expression&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;match()&lt;/code&gt; 일치하는 경우 방법은 일치를 검색 &lt;em&gt;문자열&lt;/em&gt; 에 대한 &lt;em&gt;정규 표현식을&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="1cd36e9e374ad9091fa6699ae6fe45d18730e8eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;multiline&lt;/code&gt; property indicates whether or not the &quot;&lt;code&gt;m&lt;/code&gt;&quot; flag is used with the regular expression. &lt;code&gt;multiline&lt;/code&gt; is a read-only property of an individual regular expression instance.</source>
          <target state="translated">&lt;code&gt;multiline&lt;/code&gt; 속성 &quot;여부를 나타내는 &lt;code&gt;m&lt;/code&gt; &quot;플래그는 일반 식으로 사용된다. &lt;code&gt;multiline&lt;/code&gt; 개별 정규 표현식 인스턴스의 읽기 전용 속성입니다.</target>
        </trans-unit>
        <trans-unit id="558f554fcdc8ea52cd4b8fe404a0f920fe941d72" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt; parameter is the name of the &quot;module object&quot; which will be used as a kind of namespace to refer to the exports. The &lt;code&gt;export&lt;/code&gt; parameters specify individual named exports, while the &lt;code&gt;import * as name&lt;/code&gt; syntax imports all of them. Below are examples to clarify the syntax.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 매개 변수는 수출을 참조하는 네임 스페이스의 일종으로 사용되는 &quot;모듈 객체&quot;의 이름입니다. &lt;code&gt;export&lt;/code&gt; 매개 변수는 개별라는 이름의 수출을 지정하는 동안 &lt;code&gt;import * as name&lt;/code&gt; 그들 모두의 구문 가져옵니다. 다음은 구문을 명확하게하는 예입니다.</target>
        </trans-unit>
        <trans-unit id="c2fd4b993fc5004622c5bb00bf202352054f7967" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt; property returns the name of a function statement.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 속성은 함수 명령문의 이름을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="2283ba7d359450bc81731af9b0a2b87f569352d1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new.target&lt;/code&gt; property is a meta property that is available to all functions. In &lt;a href=&quot;../functions/arrow_functions&quot;&gt;arrow functions&lt;/a&gt;, &lt;code&gt;new.target&lt;/code&gt; refers to the &lt;code&gt;new.target&lt;/code&gt; of the surrounding function.</source>
          <target state="translated">&lt;code&gt;new.target&lt;/code&gt; 속성은 모든 기능을 사용할 수있는 메타 속성입니다. 에서는 &lt;a href=&quot;../functions/arrow_functions&quot;&gt;화살표 기능&lt;/a&gt; , &lt;code&gt;new.target&lt;/code&gt; 가 받는 지칭 &lt;code&gt;new.target&lt;/code&gt; 주변 기능.</target>
        </trans-unit>
        <trans-unit id="7ce76926b68cdc3a461eccb5b461dabd528f74bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new.target&lt;/code&gt; syntax consists of the keyword &lt;code&gt;&quot;new&lt;/code&gt;&quot;, a dot, and a property name &lt;code&gt;&quot;target&quot;&lt;/code&gt;. Normally &quot;&lt;code&gt;new.&quot;&lt;/code&gt; serves as the context for a property access, but here &lt;code&gt;&quot;new.&quot;&lt;/code&gt; is not really an object. In constructor calls, however, &lt;code&gt;new.target&lt;/code&gt; refers to the constructor invoked by &lt;code&gt;new&lt;/code&gt; and so &quot;&lt;code&gt;new.&lt;/code&gt;&quot; becomes a virtual context.</source>
          <target state="translated">&lt;code&gt;new.target&lt;/code&gt; 구문 키워드로 구성되어 &lt;code&gt;&quot;new&lt;/code&gt; &quot;, 점 및 속성 이름 &lt;code&gt;&quot;target&quot;&lt;/code&gt; . 일반적으로 &quot; &lt;code&gt;new.&quot;&lt;/code&gt; 속성 액세스에 대한 컨텍스트 역할을하지만 여기서는 &lt;code&gt;&quot;new.&quot;&lt;/code&gt; 실제로는 대상이 아닙니다. 그러나 생성자 호출에서 &lt;code&gt;new.target&lt;/code&gt; 은 &lt;code&gt;new&lt;/code&gt; 에 의해 호출 된 생성자를 참조 하므로 &quot; &lt;code&gt;new.&lt;/code&gt; &quot;는 가상 컨텍스트가됩니다.</target>
        </trans-unit>
        <trans-unit id="9cd6623e561ade5b01d90352a992281d58b6ac45" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new&lt;/code&gt; operator creates an instance of a constructor.</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; 오퍼레이터 생성자의 인스턴스를 생성한다.</target>
        </trans-unit>
        <trans-unit id="e21521d991c151367409a72b02a44ae78a0be060" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;next&lt;/code&gt; method always has to return an object with appropriate properties including &lt;code&gt;done&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;. If a non-object value gets returned (such as &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;), a &lt;a href=&quot;global_objects/typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; (&quot;iterator.next() returned a non-object value&quot;) will be thrown.</source>
          <target state="translated">&lt;code&gt;next&lt;/code&gt; 메소드는 항상 적절한 속성을 포함한 객체를 반환해야 &lt;code&gt;done&lt;/code&gt; 및 &lt;code&gt;value&lt;/code&gt; . 객체가 아닌 값이 반환되면 (예 : &lt;code&gt;false&lt;/code&gt; 또는 &lt;code&gt;undefined&lt;/code&gt; ) &lt;a href=&quot;global_objects/typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; ( &quot;iterator.next ()가 객체가 아닌 값을 반환 함&quot;)가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="f174fb73ba3588cb8caa57f832fa3eb95986aa78" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;normalize()&lt;/code&gt; method returns the Unicode Normalization Form of a given string (if the value isn't a string, it will be converted to one first).</source>
          <target state="translated">&lt;code&gt;normalize()&lt;/code&gt; 메소드가 복귀 주어진 문자열의 유니 코드 표준화 양식 (값이 문자열이 아닌 경우,이 첫번째로 변환한다).</target>
        </trans-unit>
        <trans-unit id="4aff30fdae8f257c106e47a8bb7dd1011781b3a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;normalize()&lt;/code&gt; method returns the specified Unicode Normalization Form of the string. It does not affect the value of the string itself.</source>
          <target state="translated">&lt;code&gt;normalize()&lt;/code&gt; 메서드가 반환하는 문자열의 지정된 유니 코드 표준화 양식. 문자열 자체의 값에는 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8970c03025d4ded0d662a33a3f3917b925ab0b14" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; argument must be an object with properties that vary between constructors and functions. If the &lt;code&gt;options&lt;/code&gt; argument is not provided or is undefined, default values are used for all properties.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 인수는 생성자와 기능 사이에서 변화하는 속성이있는 객체 여야합니다. 경우 &lt;code&gt;options&lt;/code&gt; 인수가 제공되지 않거나 정의되지, 기본 값은 모든 속성에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="755c639a04dde41cfac04b322a645ce06eb3162a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ownKeys&lt;/code&gt; method must return an enumerable object.</source>
          <target state="translated">&lt;code&gt;ownKeys&lt;/code&gt; 의 방법은 열거 객체를 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="ecbfd2872cecfb72bb48dc7cf45ebe8a9cf8640f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;padEnd()&lt;/code&gt; method pads the current string with a given string (repeated, if needed) so that the resulting string reaches a given length. The padding is applied from the end (right) of the current string.</source>
          <target state="translated">&lt;code&gt;padEnd()&lt;/code&gt; 메소드 패드 주어진 문자열 (필요한 경우) 반복하여 현재 문자열되도록 결과 스트링은 주어진 길이에 도달한다. 패딩은 현재 문자열의 끝 (오른쪽)부터 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="18cee9d88b83b975af2ab16ea8f8315d121feff9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;padStart()&lt;/code&gt; method pads the current string with another string (multiple times, if needed) until the resulting string reaches the given length. The padding is applied from the start (left) of the current string.</source>
          <target state="translated">&lt;code&gt;padStart()&lt;/code&gt; 생성 된 문자열 도달 주어진 길이까지있어서 패드 (필요하다면 여러 번)을 다른 문자열로 현재 스트링. 패딩은 현재 문자열의 시작 (왼쪽)부터 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="ff782796e7914cb522d339da2ed9982858565d69" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parse()&lt;/code&gt; method takes a date string (such as &lt;code&gt;&quot;Dec 25, 1995&quot;&lt;/code&gt;) and returns the number of milliseconds since January 1, 1970, 00:00:00 UTC. This function is useful for setting date values based on string values, for example in conjunction with the &lt;a href=&quot;settime&quot;&gt;&lt;code&gt;setTime()&lt;/code&gt;&lt;/a&gt; method and the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;parse()&lt;/code&gt; 메소드 (예 : 날짜 문자열한다 &lt;code&gt;&quot;Dec 25, 1995&quot;&lt;/code&gt; )와 1970 년 1 월 1 일, 00:00:00 (UTC)부터 (밀리 초)을 반환합니다. 이 함수는 문자열 값을 기준으로 날짜 값을 설정하는 데 유용합니다 (예 : &lt;a href=&quot;settime&quot;&gt; &lt;code&gt;setTime()&lt;/code&gt; &lt;/a&gt; 메서드 및 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체 와 함께 사용 ) .</target>
        </trans-unit>
        <trans-unit id="aefa58dbac2b38e433d64f17d1a342609b458b98" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parseInt&lt;/code&gt; function converts its first argument to a string, parses it, and returns an integer or &lt;code&gt;NaN&lt;/code&gt;. If not &lt;code&gt;NaN&lt;/code&gt;, the returned value will be the integer that is the first argument taken as a number in the specified &lt;var&gt;radix&lt;/var&gt; (base). For example, a &lt;var&gt;radix&lt;/var&gt; of 10 indicates to convert from a decimal number, 8 octal, 16 hexadecimal, and so on. For radices above &lt;code&gt;10&lt;/code&gt;, the letters of the alphabet indicate numerals greater than &lt;code&gt;9&lt;/code&gt;. For example, for hexadecimal numbers (base 16), &lt;code&gt;A&lt;/code&gt; through &lt;code&gt;F&lt;/code&gt; are used.</source>
          <target state="translated">&lt;code&gt;parseInt&lt;/code&gt; 기능은 문자열의 첫 번째 인수로 변환을 구문 분석, 반환 정수 또는 &lt;code&gt;NaN&lt;/code&gt; 가 . &lt;code&gt;NaN&lt;/code&gt; 이 아닌 경우 반환되는 값은 지정된 &lt;var&gt;radix&lt;/var&gt; (기본) 에서 숫자로 취해진 첫 번째 인수 인 정수입니다 . 예를 들어 &lt;var&gt;radix&lt;/var&gt; 10은 10 진수, 8 진수 8 진수, 16 진수 16 진수 등으로 변환됨을 나타냅니다. &lt;code&gt;10&lt;/code&gt; 보다 큰 복사 의 경우 알파벳 문자는 &lt;code&gt;9&lt;/code&gt; 보다 큰 숫자를 나타냅니다 . 예를 들어, 16 진수 (기수 16)의 경우 &lt;code&gt;A&lt;/code&gt; - &lt;code&gt;F&lt;/code&gt; 가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="62e0bb0ab90ea771feccdb11142c9389f76ef1c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parseInt&lt;/code&gt; function produces an integer value dictated by interpretation of the contents of the string argument according to the specified radix. Leading white space in string is ignored. If radix is undefined or &lt;code&gt;0&lt;/code&gt;, it is assumed to be &lt;code&gt;10&lt;/code&gt; except when the number begins with the character pairs &lt;code&gt;0x&lt;/code&gt; or &lt;code&gt;0X&lt;/code&gt;, in which case a radix of 16 is assumed.</source>
          <target state="translated">&lt;code&gt;parseInt&lt;/code&gt; 기능은 지정된 기수에 따른 문자열 인자의 내용을 해석에 의해 결정하는 정수 값을 생성한다. 문자열에서 선행 공백은 무시됩니다. 기수가 정의되지 않거나 &lt;code&gt;0&lt;/code&gt; 인 경우 숫자가 문자 쌍 &lt;code&gt;0x&lt;/code&gt; 또는 &lt;code&gt;0X&lt;/code&gt; 로 시작하는 경우를 제외하고 &lt;code&gt;10&lt;/code&gt; 으로 가정되며 ,이 경우 기수가 16으로 가정됩니다.</target>
        </trans-unit>
        <trans-unit id="c60f04904ead449c08e1e81c8531e7adcc2b41fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pop&lt;/code&gt; method removes the last element from an array and returns that value to the caller.</source>
          <target state="translated">&lt;code&gt;pop&lt;/code&gt; 있어서 마지막 배열 요소로부터 돌아 호출자에게 그 값을 제거한다.</target>
        </trans-unit>
        <trans-unit id="9ab16e0fc0db89306a6784360841c26c4479a73b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;preventExtensions&lt;/code&gt; method must return a boolean value.</source>
          <target state="translated">&lt;code&gt;preventExtensions&lt;/code&gt; 의 방법은 부울 값을 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="8f32a090ceccd68383b7ba5f870e5dd9561a6baf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;products&lt;/code&gt; proxy object evaluates the passed value and converts it to an array if needed. The object also supports an extra property called &lt;code&gt;latestBrowser&lt;/code&gt; both as a getter and a setter.</source>
          <target state="translated">&lt;code&gt;products&lt;/code&gt; 필요한 경우 프록시 객체 배열로 전달 및 변환 값을 평가한다. 또한 객체는 getter 및 setter로 &lt;code&gt;latestBrowser&lt;/code&gt; 라는 추가 속성을 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="34d55bbc82b47848857e3ac616ac13cf5700cad2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;push&lt;/code&gt; method appends values to an array.</source>
          <target state="translated">&lt;code&gt;push&lt;/code&gt; 방법은 배열에 값을 추가한다.</target>
        </trans-unit>
        <trans-unit id="633d24f997230b8d766489544feb01d87ea952bf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;race&lt;/code&gt; function returns a &lt;code&gt;Promise&lt;/code&gt; that is settled the same way (and takes the same value) as the first promise that settles amongst the promises of the iterable passed as argument.</source>
          <target state="translated">&lt;code&gt;race&lt;/code&gt; 함수는 반환 &lt;code&gt;Promise&lt;/code&gt; 같은 방법으로 해결됩니다 (같은 값을 취)이 반복자의 약속 사이에 안정 될이 인수로 전달하는 첫 번째 약속으로.</target>
        </trans-unit>
        <trans-unit id="33aa038fc6863abbea6e118da1e8c10abf78154f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reduce&lt;/code&gt; method executes the &lt;code&gt;callback&lt;/code&gt; function once for each element present in the typed array, excluding holes in the typed array, receiving four arguments: the initial value (or value from the previous &lt;code&gt;callback&lt;/code&gt; call), the value of the current element, the current index, and the typed array over which iteration is occurring.</source>
          <target state="translated">&lt;code&gt;reduce&lt;/code&gt; 방법은 실행 &lt;code&gt;callback&lt;/code&gt; (이전의 또는 값이 초기 값 네 인자 수용 형식화 된 배열 구멍을 제외한 입력 된 어레이의 각 요소의 존재에 대해 한번 함수 &lt;code&gt;callback&lt;/code&gt; 전화), 현재의 구성 요소의 값, 전류 색인 및 반복이 발생하는 유형이 지정된 배열입니다.</target>
        </trans-unit>
        <trans-unit id="20ffacb4e44ab32601d9f4fb5d99c50d57cecf13" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reduceRight&lt;/code&gt; method executes the callback function once for each element present in the typed array, excluding holes in the typed array, receiving four arguments: the initial value (or value from the previous callback call), the value of the current element, the current index, and the typed array over which iteration is occurring.</source>
          <target state="translated">&lt;code&gt;reduceRight&lt;/code&gt; 의 (이전 콜백 전화 나 값)의 초기 값, 현재의 구성 요소의 값을, 현재 : 방법은 네 개의 인자 수용 형식화 배열 구멍을 제외한 입력 된 어레이의 각 요소의 존재에 대해 한번 콜백 함수를 실행 색인 및 반복이 발생하는 유형이 지정된 배열입니다.</target>
        </trans-unit>
        <trans-unit id="7f9e1929ca6391ece612b3add43641e3689412f4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;repeat()&lt;/code&gt; method constructs and returns a new string which contains the specified number of copies of the string on which it was called, concatenated together.</source>
          <target state="translated">&lt;code&gt;repeat()&lt;/code&gt; 메소드의 구조 및 수익률 함께 연결된이 불렀다 된 문자열의 사본의 특정 번호를 포함하는 새로운 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="30b629a773a8dd7d41ea9e8b169140d5bf21911d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;replace()&lt;/code&gt; method returns a new string with some or all matches of a &lt;code&gt;pattern&lt;/code&gt; replaced by a &lt;code&gt;replacement&lt;/code&gt;. The &lt;code&gt;pattern&lt;/code&gt; can be a string or a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt;, and the &lt;code&gt;replacement&lt;/code&gt; can be a string or a function to be called for each match. If &lt;code&gt;pattern&lt;/code&gt; is a string, only the first occurrence will be replaced.</source>
          <target state="translated">&lt;code&gt;replace()&lt;/code&gt; 메소드는 일부 또는 모든 일치와 새 문자열 반환 &lt;code&gt;pattern&lt;/code&gt; a로 교체 &lt;code&gt;replacement&lt;/code&gt; . &lt;code&gt;pattern&lt;/code&gt; 문자열이나 될 수 &lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt; 과 &lt;code&gt;replacement&lt;/code&gt; 문자열이나 함수가 각각 경기를 호출 할 수 있습니다. 경우 &lt;code&gt;pattern&lt;/code&gt; 문자열입니다 만 첫 번째 항목이 대체됩니다.</target>
        </trans-unit>
        <trans-unit id="341f412d5f7d5aab08aaa95acf74d7f837961b69" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;replacer&lt;/code&gt; parameter</source>
          <target state="translated">&lt;code&gt;replacer&lt;/code&gt; 매개 변수</target>
        </trans-unit>
        <trans-unit id="0d734f45eeb768c565804623ec5ec86381be24ac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;replacer&lt;/code&gt; parameter can be either a function or an array.</source>
          <target state="translated">&lt;code&gt;replacer&lt;/code&gt; 파라미터 함수 또는 배열 일 수있다.</target>
        </trans-unit>
        <trans-unit id="78aa7130e5e55b9662aeb44be141261920014bfa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;return&lt;/code&gt; ends function execution and specifies a value to be returned to the function caller.</source>
          <target state="translated">&lt;code&gt;return&lt;/code&gt; 단부 기능 실행하고 지정하는 값은 함수 호출자에게 반환한다.</target>
        </trans-unit>
        <trans-unit id="1825c33bdb119cbc94fc38f165d172979bab1bb4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;return&lt;/code&gt; statement is affected by &lt;a href=&quot;../lexical_grammar#Automatic_semicolon_insertion&quot;&gt;automatic semicolon insertion (ASI)&lt;/a&gt;. No line terminator is allowed between the &lt;code&gt;return&lt;/code&gt; keyword and the expression.</source>
          <target state="translated">&lt;code&gt;return&lt;/code&gt; 문에 의해 영향을받는 &lt;a href=&quot;../lexical_grammar#Automatic_semicolon_insertion&quot;&gt;자동 세미콜론 삽입 (ASI)&lt;/a&gt; . &lt;code&gt;return&lt;/code&gt; 키워드와 표현식 사이에는 줄 종결자가 허용되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="94001dce7d6c0277531fc208a30177bf512bc983" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reverse&lt;/code&gt; method transposes the elements of the calling array object in place, mutating the array, and returning a reference to the array.</source>
          <target state="translated">&lt;code&gt;reverse&lt;/code&gt; 방법 어레이 돌연변이 및 배열에 대한 참조를 반환 대신에 호출 배열 객체의 요소를 이항.</target>
        </trans-unit>
        <trans-unit id="73fda5f3ce4df46d6bd3cfa77cfdb40d794c10ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;search()&lt;/code&gt; method executes a search for a match between a regular expression and this &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;search()&lt;/code&gt; 메소드는 정규식이 사이의 일치에 대한 검색 실행 &lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 오브젝트.</target>
        </trans-unit>
        <trans-unit id="91b89c8ef1b28ba3db99fa2d5a508436f955931e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;set()&lt;/code&gt; method stores multiple values in the typed array, reading input values from a specified array.</source>
          <target state="translated">&lt;code&gt;set()&lt;/code&gt; 소정의 배열로부터 입력 값을 판독 입력 된 배열에있어서의 저장 값을 여러.</target>
        </trans-unit>
        <trans-unit id="afa3d342e4bc64667929dfba353c2c5c385f97f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;set&lt;/code&gt; method should return a boolean value. Return &lt;code&gt;true&lt;/code&gt; to indicate that assignment succeeded. If the &lt;code&gt;set&lt;/code&gt; method returns &lt;code&gt;false&lt;/code&gt;, and the assignment happened in strict-mode code, a &lt;code&gt;TypeError&lt;/code&gt; will be thrown.</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; 방법은 부울 값을 반환한다. 할당이 성공했음을 나타내려면 &lt;code&gt;true&lt;/code&gt; 를 리턴하십시오 . 경우 &lt;code&gt;set&lt;/code&gt; 방법은 반환 &lt;code&gt;false&lt;/code&gt; , 그리고 할당이 엄격한 모드 코드에서 발생하는 &lt;code&gt;TypeError&lt;/code&gt; 발생합니다.</target>
        </trans-unit>
        <trans-unit id="01518a20f1590edf2677afb2701eab97cf0432cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;set&lt;/code&gt; syntax binds an object property to a function to be called when there is an attempt to set that property.</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; 구문은 그 속성을 설정하려는 시도가있을 때 함수에 객체 속성이 호출되도록 결합한다.</target>
        </trans-unit>
        <trans-unit id="45224e723f1721f9d3c13524ff9d20d789929030" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setDate()&lt;/code&gt; method sets the day of the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object relative to the beginning of the currently set month.</source>
          <target state="translated">&lt;code&gt;setDate()&lt;/code&gt; 메소드의 날 설정 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 현재 설정된 달 초에 해 오브젝트를.</target>
        </trans-unit>
        <trans-unit id="0d9d1bae85d41120a53a7340c0bdd89b7a51db51" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setFloat32()&lt;/code&gt; method stores a signed 32-bit float (float) value at the specified byte offset from the start of the &lt;a href=&quot;../dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;setFloat32()&lt;/code&gt; 에있어서의 저장 개시로부터 오프셋 지정된 바이트의 부호 32 비트 플로우트 (플로트) 값 &lt;a href=&quot;../dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; 를&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="45a036c27a787e007cc4eccd674e04938f8975b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setFloat64()&lt;/code&gt; method stores a signed 64-bit float (double) value at the specified byte offset from the start of the &lt;a href=&quot;../dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;setFloat64()&lt;/code&gt; 에있어서의 저장 개시로부터 오프셋 지정된 바이트의 부호 64 비트 플로우트 (더블) 값 &lt;a href=&quot;../dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; 를&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="75853f0bea9dcc76f1f09901ffb1b2a24eb42803" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setFullYear()&lt;/code&gt; method sets the full year for a specified date according to local time. Returns new timestamp.</source>
          <target state="translated">&lt;code&gt;setFullYear()&lt;/code&gt; 메소드는 로컬 시간에 지정된 날짜 년 전체를 설정한다. 새로운 타임 스탬프를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="23428a9e37d33ce840e55033fafbd7c8676488da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setHours()&lt;/code&gt; method sets the hours for a specified date according to local time, and returns the number of milliseconds since January 1, 1970 00:00:00 UTC until the time represented by the updated &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">&lt;code&gt;setHours()&lt;/code&gt; 방법은 현지 시간에 따라 지정된 날짜의 시간을 설정하고, 반환 시간 (밀리 초)을 1970 년 1 월 1 일 이후의 시간까지 0시 0 분 0 초 UTC는 업데이트가 나타내는 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 인스턴스입니다.</target>
        </trans-unit>
        <trans-unit id="73882f81fd5a0702c5c489eb2978efe759f4fd70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setInt16()&lt;/code&gt; method stores a signed 16-bit integer (short) value at the specified byte offset from the start of the &lt;a href=&quot;../dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;setInt16()&lt;/code&gt; 에있어서의 저장 개시로부터 오프셋 지정된 바이트의 부호없는 16 비트 정수 (짧은) 값 &lt;a href=&quot;../dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; 를&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d77d742cec0a6991749751071a2eee256c6ef115" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setInt32()&lt;/code&gt; method stores a signed 32-bit integer (long) value at the specified byte offset from the start of the &lt;a href=&quot;../dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;setInt32()&lt;/code&gt; 에있어서의 저장 개시로부터 오프셋 지정된 바이트의 부호없는 32 비트 정수 (길이) 값 &lt;a href=&quot;../dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; 를&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="49306e42c516b8e8fbb2eb954a0b4f9f94de178b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setInt8()&lt;/code&gt; method stores a signed 8-bit integer (byte) value at the specified byte offset from the start of the &lt;a href=&quot;../dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;setInt8()&lt;/code&gt; 에있어서의 저장 개시로부터 오프셋 지정된 바이트의 부호 8 비트 정수 (바이트) 값 &lt;a href=&quot;../dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; 를&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e6ce03c23c2628b4f043524d96a70c7ec69036c9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setMilliseconds()&lt;/code&gt; method sets the milliseconds for a specified date according to local time.</source>
          <target state="translated">&lt;code&gt;setMilliseconds()&lt;/code&gt; 있어서 로컬 시간에 지정된 날짜에 대해 밀리 초를 설정한다.</target>
        </trans-unit>
        <trans-unit id="3af72fc29cdb4e1a5fde6585640fdae002c1fe46" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setMinutes()&lt;/code&gt; method sets the minutes for a specified date according to local time.</source>
          <target state="translated">&lt;code&gt;setMinutes()&lt;/code&gt; 있어서 로컬 시간에 지정된 날짜 분을 설정한다.</target>
        </trans-unit>
        <trans-unit id="403f0919425de2bcf88cd0a132b42f328c196b20" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setMonth()&lt;/code&gt; method sets the month for a specified date according to the currently set year.</source>
          <target state="translated">&lt;code&gt;setMonth()&lt;/code&gt; 메소드는 현재 세트 연도 별 지정된 날짜의 달을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="36506ea61e5bef89a285379403a21ba86c6d6375" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setPrototypeOf&lt;/code&gt; method returns &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;[[Prototype]]&lt;/code&gt; was successfully changed, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;setPrototypeOf&lt;/code&gt; 의 방법은 반환 &lt;code&gt;true&lt;/code&gt; 경우 생성 &lt;code&gt;[[Prototype]]&lt;/code&gt; 성공적으로 변경되었습니다 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a48af94ec3f2b112ce922a1a295738d4f6e7e17d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setSeconds()&lt;/code&gt; method sets the seconds for a specified date according to local time.</source>
          <target state="translated">&lt;code&gt;setSeconds()&lt;/code&gt; 있어서 로컬 시간에 지정된 날짜 초를 설정한다.</target>
        </trans-unit>
        <trans-unit id="a096b9c2df07dc8063e8649cb0c5c1ab00cc6384" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setTime()&lt;/code&gt; method sets the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC.</source>
          <target state="translated">&lt;code&gt;setTime()&lt;/code&gt; 메소드 세트 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 시간에 객체가, 1970 년 1 월 1 일 00:00:00 (UTC)부터 밀리 세컨드로 표현.</target>
        </trans-unit>
        <trans-unit id="de572d36f314857b2ce259d68a05e3bce5b61d39" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setUTCDate()&lt;/code&gt; method sets the day of the month for a specified date according to universal time.</source>
          <target state="translated">&lt;code&gt;setUTCDate()&lt;/code&gt; 메소드를 표준시에 따라 지정된 날짜의 달의 날짜를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="7f38365ea2d59a1194bf5f4f42e70c72249a6323" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setUTCFullYear()&lt;/code&gt; method sets the full year for a specified date according to universal time.</source>
          <target state="translated">&lt;code&gt;setUTCFullYear()&lt;/code&gt; 메소드를 표준시에 따라 지정된 날짜의 전체 연도를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="a0d7e0df49c1d646e3a239a8081d192908f2580f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setUTCHours()&lt;/code&gt; method sets the hour for a specified date according to universal time, and returns the number of milliseconds since January 1, 1970 00:00:00 UTC until the time represented by the updated &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">&lt;code&gt;setUTCHours()&lt;/code&gt; 메서드를 표준시에 따라 지정된 날짜의 시간을 설정하고, 반환 1970 년 1 월 1 일 (밀리 초) 0시 0 분 0 초 UTC 업데이트가 나타낼 때까지 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 인스턴스입니다.</target>
        </trans-unit>
        <trans-unit id="7880b6e9871ab35907d380c2581378730b097670" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setUTCMilliseconds()&lt;/code&gt; method sets the milliseconds for a specified date according to universal time.</source>
          <target state="translated">&lt;code&gt;setUTCMilliseconds()&lt;/code&gt; 방법 표준시에있어서 지정된 일자를 위해 밀리 세컨드를 설정한다.</target>
        </trans-unit>
        <trans-unit id="3296b4db04455b2c6710477aa8a2735e0ac06e75" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setUTCMinutes()&lt;/code&gt; method sets the minutes for a specified date according to universal time.</source>
          <target state="translated">&lt;code&gt;setUTCMinutes()&lt;/code&gt; 방법 표준시에 따라 지정된 날짜 분을 설정한다.</target>
        </trans-unit>
        <trans-unit id="cb9bc5f6461e116f0f810368ed4497cf904f8baa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setUTCMonth()&lt;/code&gt; method sets the month for a specified date according to universal time.</source>
          <target state="translated">&lt;code&gt;setUTCMonth()&lt;/code&gt; 메소드를 표준시에 따라 지정된 날짜의 달을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="c1bd3a2f0adacb7676183d4f486b7a314e7ebc56" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setUTCSeconds()&lt;/code&gt; method sets the seconds for a specified date according to universal time.</source>
          <target state="translated">&lt;code&gt;setUTCSeconds()&lt;/code&gt; 방법 표준시에 따라 지정된 날짜 초를 설정한다.</target>
        </trans-unit>
        <trans-unit id="6403066c197b602947ff39362877ae8674531421" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setUint16()&lt;/code&gt; method stores an unsigned 16-bit integer (unsigned short) value at the specified byte offset from the start of the &lt;a href=&quot;../dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;setUint16()&lt;/code&gt; 에있어서의 저장 개시로부터 오프셋 지정된 바이트의 부호없는 16 비트 정수 (부호 짧은) 값 &lt;a href=&quot;../dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; 를&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="cf0a945544e186d0b49c0f2b8a68511e4bd62e26" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setUint32()&lt;/code&gt; method stores an unsigned 32-bit integer (unsigned long) value at the specified byte offset from the start of the &lt;a href=&quot;../dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;setUint32()&lt;/code&gt; 에있어서의 저장 개시로부터 오프셋 지정된 바이트의 부호없는 32 비트 정수 (unsigned long을) 값 &lt;a href=&quot;../dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; 를&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c56402f6420e37b73178dc9c773cb8a7d5f73d33" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setUint8()&lt;/code&gt; method stores an unsigned 8-bit integer (byte) value at the specified byte offset from the start of the &lt;a href=&quot;../dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;setUint8()&lt;/code&gt; 에있어서의 저장 개시로부터 오프셋 지정된 바이트의 부호없는 8 비트 정수 (바이트) 값 &lt;a href=&quot;../dataview&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; 를&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="75f9ec0c3f813d1eedecab4ed7911277e6aabe77" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;shift&lt;/code&gt; method removes the element at the zeroeth index and shifts the values at consecutive indexes down, then returns the removed value. If the &lt;a href=&quot;length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; property is 0, &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">&lt;code&gt;shift&lt;/code&gt; 메소드는 삭제 된 값을 반환 제로 번째 인덱스에있는 요소를 제거하고 아래로 연속 인덱스에 값을 이동합니다. 경우 &lt;a href=&quot;length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt; 속성은 0, &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="8c0cff95e4409ed92bc4573e6783a353a2a717a5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;slice()&lt;/code&gt; method extracts a section of a string and returns it as a new string, without modifying the original string.</source>
          <target state="translated">&lt;code&gt;slice()&lt;/code&gt; 메소드는 원래 문자열을 수정하지 않고, 문자열, 새로운 문자열로 반환을의 섹션을 추출합니다.</target>
        </trans-unit>
        <trans-unit id="93b4aadf41d545ddf2d902b3c09b49283d21b559" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;slice&lt;/code&gt; method copies up to, but not including, the byte indicated by the &lt;code&gt;end&lt;/code&gt; parameter. If either &lt;code&gt;begin&lt;/code&gt; or &lt;code&gt;end&lt;/code&gt; is negative, it refers to an index from the end of the array, as opposed to from the beginning.</source>
          <target state="translated">&lt;code&gt;slice&lt;/code&gt; 있어서 복사되지만 제외 최대 바이트는로 나타낸 &lt;code&gt;end&lt;/code&gt; 파라미터. 어느 경우 &lt;code&gt;begin&lt;/code&gt; 또는 &lt;code&gt;end&lt;/code&gt; 음수 처음부터 대조적으로, 그것은 상기 어레이의 단부에서의 인덱스를 의미한다.</target>
        </trans-unit>
        <trans-unit id="bc6796e69b48f93eec07acfe185d9d15372affbe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;slice&lt;/code&gt; method does not alter. It returns a shallow copy of elements from the original typed array.</source>
          <target state="translated">&lt;code&gt;slice&lt;/code&gt; 방법은 변경하지 않습니다. 원본 형식의 배열에서 요소의 얕은 복사본을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="aaf2807ffd405cc84ac738196cd3f881d6868234" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;small()&lt;/code&gt; method creates a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small&quot;&gt;&lt;code&gt;&amp;lt;small&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML element that causes a string to be displayed in a small font.</source>
          <target state="translated">&lt;code&gt;small()&lt;/code&gt; 메소드는 생성 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small&quot;&gt; &lt;code&gt;&amp;lt;small&amp;gt;&lt;/code&gt; &lt;/a&gt; 작은 폰트로 표시되는 문자열을 일으키는 HTML 요소.</target>
        </trans-unit>
        <trans-unit id="829a872efd080f7954a56045279afd8ebbac1c5c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;small()&lt;/code&gt; method embeds a string in a &lt;code&gt;&amp;lt;small&amp;gt;&lt;/code&gt; tag: &lt;code&gt;&quot;&amp;lt;small&amp;gt;str&amp;lt;/small&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;small()&lt;/code&gt; 메소드는 문자열 매립 &lt;code&gt;&amp;lt;small&amp;gt;&lt;/code&gt; 태그 : &lt;code&gt;&quot;&amp;lt;small&amp;gt;str&amp;lt;/small&amp;gt;&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ca6f400142a2c25332b87f4b99a76332641e98ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;some&lt;/code&gt; method executes the &lt;code&gt;callback&lt;/code&gt; function once for each element present in the typed array until it finds one where &lt;code&gt;callback&lt;/code&gt; returns a true value. If such an element is found, &lt;code&gt;some&lt;/code&gt; immediately returns &lt;code&gt;true&lt;/code&gt;. Otherwise, &lt;code&gt;some&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;some&lt;/code&gt; 방법은 실행 &lt;code&gt;callback&lt;/code&gt; 은 하나 찾을 때까지 입력 된 배열의 각 요소 본 한번씩 함수 &lt;code&gt;callback&lt;/code&gt; 참 값을 리턴한다. 그러한 요소가 발견되면 &lt;code&gt;some&lt;/code&gt; 즉시 &lt;code&gt;true&lt;/code&gt; 를 반환 합니다 . 그렇지 않으면 &lt;code&gt;some&lt;/code&gt; 는 &lt;code&gt;false&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="9100d3ba6e1e86b77eb0b07a7f274f3e7f393fb2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sort&lt;/code&gt; method can be conveniently used with &lt;a href=&quot;../../operators/function&quot;&gt;function expressions&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;sort&lt;/code&gt; 방법을 편리하게 사용할 수 있습니다 &lt;a href=&quot;../../operators/function&quot;&gt;기능 식&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="499e2b3f7324baaf767d11bc108fa7744d9289e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;source&lt;/code&gt; property for empty regular expressions now returns &quot;(?:)&quot; instead of an empty string. A definition for the escaping behavior has been added.</source>
          <target state="translated">빈 정규 표현식 의 &lt;code&gt;source&lt;/code&gt; 속성은 이제 빈 문자열 대신 &quot;(? :)&quot;을 반환합니다. 탈출 행동에 대한 정의가 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="21afb7889039c2ca365865732cb59eee7cee8f9d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;source&lt;/code&gt; property returns a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; containing the source text of the regexp object, and it doesn't contain the two forward slashes on both sides and any flags.</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; 속성은 반환 &lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 정규 표현식 객체의 소스 텍스트를 포함을하고, 양쪽 및 플래그에있는 두 개의 슬래시가 포함되어 있지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f081fd2fcaf00b6f4603d7f666a650d220572341" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;space&lt;/code&gt; argument</source>
          <target state="translated">&lt;code&gt;space&lt;/code&gt; 인수</target>
        </trans-unit>
        <trans-unit id="8ccba351da674181850d390944a0dc58c3521ad3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;space&lt;/code&gt; argument may be used to control spacing in the final string.</source>
          <target state="translated">&lt;code&gt;space&lt;/code&gt; 인수는 최종 문자열에 간격을 제어 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6a233153b50fe557fdd0379de0cbec9b71c9dcc9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;species&lt;/code&gt; accessor property returns the default constructor for &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;typed array&lt;/a&gt; objects. Subclass constructors may over-ride it to change the constructor assignment.</source>
          <target state="translated">&lt;code&gt;species&lt;/code&gt; 재산 반환 접근의 기본 생성자 &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;입력 배열&lt;/a&gt; 객체. 생성자 할당을 변경하기 위해 서브 클래스 생성자가이를 오버라이드 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e2d25b4299acbc398c6b62130c59f60822dfe859" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;species&lt;/code&gt; accessor property returns the default constructor for &lt;code&gt;Array&lt;/code&gt; objects. Subclass constructors may override it to change the constructor assignment.</source>
          <target state="translated">&lt;code&gt;species&lt;/code&gt; 에 대한 재산 반환 접근은 기본 생성자 &lt;code&gt;Array&lt;/code&gt; 객체. 생성자 할당을 변경하기 위해 서브 클래스 생성자가이를 대체 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="601b2478148eb6bd5202d1429c4e933267b52c58" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;species&lt;/code&gt; accessor property returns the default constructor for &lt;code&gt;RegExp&lt;/code&gt; objects. Subclass constructors may over-ride it to change the constructor assignment.</source>
          <target state="translated">&lt;code&gt;species&lt;/code&gt; 재산 반환 접근의 기본 생성자 &lt;code&gt;RegExp&lt;/code&gt; 객체. 생성자 할당을 변경하기 위해 서브 클래스 생성자가이를 오버라이드 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b363d88f771a62702012ce4aba514c3171275947" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;species&lt;/code&gt; property returns the default constructor function, which is one of the typed array constructors for a given &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;typed array&lt;/a&gt; object:</source>
          <target state="translated">&lt;code&gt;species&lt;/code&gt; 속성은 주어진에 대한 형식화 된 배열 생성자 중 하나 인 디폴트 생성자 함수 반환 &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;입력 배열&lt;/a&gt; 개체를 :</target>
        </trans-unit>
        <trans-unit id="24e49f373d7e20e5dc5e2d161d8979912f797d82" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;species&lt;/code&gt; property returns the default constructor function, which is the &lt;code&gt;Array&lt;/code&gt; constructor for &lt;code&gt;Array&lt;/code&gt; objects:</source>
          <target state="translated">&lt;code&gt;species&lt;/code&gt; 속성은 인 디폴트 생성자 함수, 반환 &lt;code&gt;Array&lt;/code&gt; 생성자 &lt;code&gt;Array&lt;/code&gt; 객체를 :</target>
        </trans-unit>
        <trans-unit id="9eae346a6740d7f6886b64231691dc06c17d04e9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;species&lt;/code&gt; property returns the default constructor function, which is the &lt;code&gt;RegExp&lt;/code&gt; constructor for &lt;code&gt;RegExp&lt;/code&gt; objects:</source>
          <target state="translated">&lt;code&gt;species&lt;/code&gt; 속성은 인 디폴트 생성자 함수, 반환 &lt;code&gt;RegExp&lt;/code&gt; 에 대한 생성자 &lt;code&gt;RegExp&lt;/code&gt; 객체를 :</target>
        </trans-unit>
        <trans-unit id="db31fc87b43f5f60c0d2eb6a1b89573b2dbd8aba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;splice()&lt;/code&gt; method changes the contents of an array by removing existing elements and/or adding new elements.</source>
          <target state="translated">&lt;code&gt;splice()&lt;/code&gt; 메소드는 기존의 요소를 제거 및 / 또는 새로운 구성 요소를 추가하여 배열의 내용을 변경한다.</target>
        </trans-unit>
        <trans-unit id="e95c7a0c76d1545fdde91a9fb98f9e8135ae9cff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;split()&lt;/code&gt; method splits a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; object into an array of strings by separating the string into substrings, using a specified separator string to determine where to make each split.</source>
          <target state="translated">&lt;code&gt;split()&lt;/code&gt; 메소드는 분할 &lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 여기서 각각의 분할을하는 결정하기 위해 지정된 분리 문자열을 사용하여, 문자열에 문자열을 분리하여 문자열 배열로 개체.</target>
        </trans-unit>
        <trans-unit id="e29d8c4d782d1b004f826d77b14b3418f2814509" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;startsWith()&lt;/code&gt; method determines whether a string begins with the characters of a specified string, returning &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; as appropriate.</source>
          <target state="translated">&lt;code&gt;startsWith()&lt;/code&gt; 메소드는 문자열이 반환 지정된 문자열의 문자로 시작 여부를 결정합니다 &lt;code&gt;true&lt;/code&gt; 또는 &lt;code&gt;false&lt;/code&gt; 적절하게.</target>
        </trans-unit>
        <trans-unit id="77d3afa15edcb61a8dd51d9fae468c30feda07d7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sticky&lt;/code&gt; property reflects whether or not the search is sticky (searches in strings only from the index indicated by the &lt;a href=&quot;lastindex&quot;&gt;&lt;code&gt;lastIndex&lt;/code&gt;&lt;/a&gt; property of this regular expression). &lt;code&gt;sticky&lt;/code&gt; is a read-only property of an individual regular expression object.</source>
          <target state="translated">&lt;code&gt;sticky&lt;/code&gt; 속성은 검색 접착 (인덱스에 의해 지시 된 단지에서 문자열의 검색 여부를 반영 &lt;a href=&quot;lastindex&quot;&gt; &lt;code&gt;lastIndex&lt;/code&gt; &lt;/a&gt; 이 정규 표현식의 속성). &lt;code&gt;sticky&lt;/code&gt; 는 개별 정규식 객체의 읽기 전용 속성입니다.</target>
        </trans-unit>
        <trans-unit id="99043c5a32d0365d88f7489c6a8f1df22ee9d725" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;strike()&lt;/code&gt; method creates a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strike&quot;&gt;&lt;code&gt;&amp;lt;strike&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML element that causes a string to be displayed as struck-out text.</source>
          <target state="translated">&lt;code&gt;strike()&lt;/code&gt; 메소드는 생성 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strike&quot;&gt; &lt;code&gt;&amp;lt;strike&amp;gt;&lt;/code&gt; &lt;/a&gt; 삼진 아웃 텍스트로 표시되는 문자열의 원인 HTML 요소를.</target>
        </trans-unit>
        <trans-unit id="31a05bd2a1780dc31b42319ce054ece0665f1e16" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;strike()&lt;/code&gt; method embeds a string in a &lt;code&gt;&amp;lt;strike&amp;gt;&lt;/code&gt; tag: &lt;code&gt;&quot;&amp;lt;strike&amp;gt;str&amp;lt;/strike&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;strike()&lt;/code&gt; 메소드는 문자열 내장 &lt;code&gt;&amp;lt;strike&amp;gt;&lt;/code&gt; 태그를 : &lt;code&gt;&quot;&amp;lt;strike&amp;gt;str&amp;lt;/strike&amp;gt;&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="507fbf2cabe8cc4c38162953645bf7c1f619ac17" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sub()&lt;/code&gt; method creates a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sub&quot;&gt;&lt;code&gt;&amp;lt;sub&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML element that causes a string to be displayed as subscript.</source>
          <target state="translated">&lt;code&gt;sub()&lt;/code&gt; 메소드는 생성 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sub&quot;&gt; &lt;code&gt;&amp;lt;sub&amp;gt;&lt;/code&gt; &lt;/a&gt; 첨자로 표시되는 문자열을 일으키는 HTML 요소.</target>
        </trans-unit>
        <trans-unit id="2bdb3a13b34e25938fe41425b72524f0bf1cc3be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sub()&lt;/code&gt; method embeds a string in a &lt;code&gt;&amp;lt;sub&amp;gt;&lt;/code&gt; tag: &lt;code&gt;&quot;&amp;lt;sub&amp;gt;str&amp;lt;/sub&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sub()&lt;/code&gt; 메소드는 문자열 매립 &lt;code&gt;&amp;lt;sub&amp;gt;&lt;/code&gt; 태그 : &lt;code&gt;&quot;&amp;lt;sub&amp;gt;str&amp;lt;/sub&amp;gt;&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9993ed926361be11052212435757aafd0d039ba5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;subarray()&lt;/code&gt; method returns a new &lt;em&gt;TypedArray&lt;/em&gt; on the same &lt;a href=&quot;../arraybuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; store and with the same element types as for this &lt;em&gt;TypedArray&lt;/em&gt; object. The &lt;code&gt;begin&lt;/code&gt; offset is &lt;strong&gt;inclusive&lt;/strong&gt; and the &lt;code&gt;end&lt;/code&gt; offset is &lt;strong&gt;exclusive&lt;/strong&gt;. &lt;em&gt;TypedArray&lt;/em&gt; is one of the &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;typed array types&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;subarray()&lt;/code&gt; 메소드는 새로운 반환 &lt;em&gt;하는 TypedArray&lt;/em&gt; 동일한에서 &lt;a href=&quot;../arraybuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; 에&lt;/a&gt; 저장하고 이에 대한 동일한 요소 유형 &lt;em&gt;하는 TypedArray의&lt;/em&gt; 개체. &lt;code&gt;begin&lt;/code&gt; 오프셋은 &lt;strong&gt;포함&lt;/strong&gt; 과 &lt;code&gt;end&lt;/code&gt; 오프셋입니다 &lt;strong&gt;독점&lt;/strong&gt; . &lt;em&gt;TypedArray&lt;/em&gt; 는 &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;유형&lt;/a&gt; 이 지정된 배열 유형 중 하나입니다 .</target>
        </trans-unit>
        <trans-unit id="2aa58fac1e632511279bc461e0096abef9f7ba06" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;substr()&lt;/code&gt; method returns a portion of the string, starting at the specified index and extending for a given number of characters afterward.</source>
          <target state="translated">&lt;code&gt;substr()&lt;/code&gt; 메소드는 지정된 인덱스에서 시작하고 이후의 문자 소정 개수 연장되는 문자열의 일부를 반환한다.</target>
        </trans-unit>
        <trans-unit id="be167c8175a7d6f8833d2941a5e2fdcd944be2d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;substring()&lt;/code&gt; method returns the part of the &lt;code&gt;string&lt;/code&gt; between the start and end indexes, or to the end of the string.</source>
          <target state="translated">&lt;code&gt;substring()&lt;/code&gt; 메소드의 일부를 반환 &lt;code&gt;string&lt;/code&gt; 시작과 끝 인덱스 사이, 또는 문자열의 끝.</target>
        </trans-unit>
        <trans-unit id="003c13ccdfd8b1a57c113ea1d6bc0e52ea29e631" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sup()&lt;/code&gt; method creates a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sup&quot;&gt;&lt;code&gt;&amp;lt;sup&amp;gt;&lt;/code&gt;&lt;/a&gt; HTML element that causes a string to be displayed as superscript.</source>
          <target state="translated">&lt;code&gt;sup()&lt;/code&gt; 메소드는 생성 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sup&quot;&gt; &lt;code&gt;&amp;lt;sup&amp;gt;&lt;/code&gt; &lt;/a&gt; 첨자로 표시되는 문자열을 일으키는 HTML 요소.</target>
        </trans-unit>
        <trans-unit id="6ff29a71a32065c70b52973a18ab04a6c17f1dff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sup()&lt;/code&gt; method embeds a string in a &lt;code&gt;&amp;lt;sup&amp;gt;&lt;/code&gt; tag: &lt;code&gt;&quot;&amp;lt;sup&amp;gt;str&amp;lt;/sup&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sup()&lt;/code&gt; 메소드는 문자열 매립 &lt;code&gt;&amp;lt;sup&amp;gt;&lt;/code&gt; 태그 : &lt;code&gt;&quot;&amp;lt;sup&amp;gt;str&amp;lt;/sup&amp;gt;&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4e46078bb0ba472d9375caf8339dff1c52c38414" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;super.prop&lt;/code&gt; and &lt;code&gt;super[expr]&lt;/code&gt; expressions are valid in any &lt;a href=&quot;../functions/method_definitions&quot;&gt;method definition&lt;/a&gt; in both &lt;a href=&quot;../classes&quot;&gt;classes&lt;/a&gt; and &lt;a href=&quot;object_initializer&quot;&gt;object literals&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;super.prop&lt;/code&gt; 및 &lt;code&gt;super[expr]&lt;/code&gt; 표현은 어느 유효 &lt;a href=&quot;../functions/method_definitions&quot;&gt;메소드 정의&lt;/a&gt; 모두 &lt;a href=&quot;../classes&quot;&gt;클래스&lt;/a&gt; 및 &lt;a href=&quot;object_initializer&quot;&gt;객체 리터럴&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="58c5b386594d5e64ef24ee818cae836b2122508b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;super&lt;/code&gt; keyword calls the parent constructor.</source>
          <target state="translated">&lt;code&gt;super&lt;/code&gt; 키워드는 부모 생성자를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="91de460ec7fcf2753b77f48df09d0c84f211e499" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;switch&lt;/code&gt; evaluates an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators&quot;&gt;expression&lt;/a&gt;, matching the expression's value to a &lt;code&gt;case&lt;/code&gt; clause, and executes &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements&quot;&gt;statements&lt;/a&gt; associated with that case, as well as statements in cases that follow the matching case.</source>
          <target state="translated">&lt;code&gt;switch&lt;/code&gt; 평가되는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators&quot;&gt;식&lt;/a&gt; A와 식의 값이 일치하는 &lt;code&gt;case&lt;/code&gt; 절 및 실행 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements&quot;&gt;문&lt;/a&gt; 매칭 케이스를 따라 경우이 경우뿐만 아니라 문장과 관련있다.</target>
        </trans-unit>
        <trans-unit id="3e53ba41760666996f98eae5a199f411ab236a83" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;target&lt;/code&gt; must be a callable itself. That is, it must be a function object.</source>
          <target state="translated">&lt;code&gt;target&lt;/code&gt; 자체가 호출을해야합니다. 즉, 함수 객체 여야합니다.</target>
        </trans-unit>
        <trans-unit id="118b70346f478cde348ec89edbef454b86b02683" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;test()&lt;/code&gt; method executes a search for a match between a regular expression and a specified string. Returns &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;test()&lt;/code&gt; 메소드는 정규식과 특정 문자열 사이의 일치에 대한 검색을 수행한다. &lt;code&gt;true&lt;/code&gt; 또는 &lt;code&gt;false&lt;/code&gt; 를 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="a26026e74ab32dbe930f6fe9c0eb33b2bb573b08" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;then&lt;/code&gt; method returns a &lt;code&gt;Promise&lt;/code&gt; which allows for method chaining.</source>
          <target state="translated">&lt;code&gt;then&lt;/code&gt; 방법은 반환 &lt;code&gt;Promise&lt;/code&gt; 방법 체인 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9e82a86dbb3410327d5092a53deea5d6ea2eb81d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;this&lt;/code&gt; keyword refers to a special property of an execution context.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; 키워드는 실행 컨텍스트의 특별한 특성을 의미한다.</target>
        </trans-unit>
        <trans-unit id="00fd0b0cc8d2f6cd4678dd2f83f96ee25c5edd2b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;throw&lt;/code&gt; throws a user-defined exception. Execution of the current function will stop (the statements after &lt;code&gt;throw&lt;/code&gt; won't be executed), and control will be passed to the first &lt;a href=&quot;try...catch&quot;&gt;&lt;code&gt;catch&lt;/code&gt;&lt;/a&gt; block in the call stack. If no &lt;code&gt;catch&lt;/code&gt; block exists among caller functions, the program will terminate.</source>
          <target state="translated">&lt;code&gt;throw&lt;/code&gt; 사용자 정의 예외가 발생합니다. 현재 함수의 실행이 중지되고 ( &lt;code&gt;throw&lt;/code&gt; 후 명령문 이 실행되지 않음) 호출 스택 의 첫 번째 &lt;a href=&quot;try...catch&quot;&gt; &lt;code&gt;catch&lt;/code&gt; &lt;/a&gt; 블록으로 제어가 전달됩니다 . 호출자 함수 사이에 &lt;code&gt;catch&lt;/code&gt; 블록이 없으면 프로그램이 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="412cad314e9e2ce3182ddcf5c41f4f9b131718f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toDateString()&lt;/code&gt; method is especially useful because compliant engines implementing &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/ECMAScript&quot;&gt;ECMA-262&lt;/a&gt; may differ in the string obtained from &lt;a href=&quot;tostring&quot;&gt;&lt;code&gt;toString()&lt;/code&gt;&lt;/a&gt; for &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; objects, as the format is implementation-dependent and simple string slicing approaches may not produce consistent results across multiple engines.</source>
          <target state="translated">&lt;code&gt;toDateString()&lt;/code&gt; 구현을 준수 엔진 때문에 방법은 특히 유용 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/ECMAScript&quot;&gt;ECMA-262&lt;/a&gt; 에서 얻은 문자열과 다를 수 있습니다 &lt;a href=&quot;tostring&quot;&gt; &lt;code&gt;toString()&lt;/code&gt; &lt;/a&gt; 에 대한 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 형식은 구현에 의존하고 간단한 문자열 슬라이스와 같이 여러 엔진에 일관된 결과를 얻지 못할 수도 있습니다 접근, 객체.</target>
        </trans-unit>
        <trans-unit id="cbdc60f0324fcd00ec12f6699e2bce8320cb7592" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toDateString()&lt;/code&gt; method returns the date portion of a &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object in human readable form in American English.</source>
          <target state="translated">&lt;code&gt;toDateString()&lt;/code&gt; 메소드는의 날짜 부분 반환 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 미국 영어에서 사람이 읽을 수있는 형태로 개체를.</target>
        </trans-unit>
        <trans-unit id="5f989bfca9e5f06fffcc793cf31d7367de0dde7c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toExponential()&lt;/code&gt; method returns a string representing the Number object in exponential notation.</source>
          <target state="translated">&lt;code&gt;toExponential()&lt;/code&gt; 메서드는 숫자를 지수 표기법으로 개체를 나타내는 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="53d8b1c4bd3dbc794cbda4ebd5abe95d88e21507" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toFixed()&lt;/code&gt; method formats a number using fixed-point notation.</source>
          <target state="translated">&lt;code&gt;toFixed()&lt;/code&gt; 메소드는 고정 소수점 표현을 이용하여 다수의 포맷.</target>
        </trans-unit>
        <trans-unit id="6f32bb884a567e3a395878b1be4722efa1cadfea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toISOString()&lt;/code&gt; method returns a string in &lt;em&gt;simplified&lt;/em&gt; extended ISO format (&lt;a href=&quot;http://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ISO 8601&lt;/a&gt;), which is always 24 or 27 characters long (&lt;code&gt;YYYY-MM-DDTHH:mm:ss.sssZ&lt;/code&gt; or &lt;code&gt;&amp;plusmn;YYYYYY-MM-DDTHH:mm:ss.sssZ&lt;/code&gt;, respectively). The timezone is always zero UTC offset, as denoted by the suffix &quot;&lt;code&gt;Z&lt;/code&gt;&quot;.</source>
          <target state="translated">&lt;code&gt;toISOString()&lt;/code&gt; 메서드는 문자열 반환 &lt;em&gt;단순화&lt;/em&gt; 확장 ISO 포맷 ( &lt;a href=&quot;http://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ISO 8601&lt;/a&gt; 항상 24 또는 27 자 (인), &lt;code&gt;YYYY-MM-DDTHH:mm:ss.sssZ&lt;/code&gt; 또는 &lt;code&gt;&amp;plusmn;YYYYYY-MM-DDTHH:mm:ss.sssZ&lt;/code&gt; ). 시간대는 접미사 &quot; &lt;code&gt;Z&lt;/code&gt; &quot; 로 표시되는대로 항상 0 UTC 오프셋 입니다.</target>
        </trans-unit>
        <trans-unit id="f85df78873b6cf40bbfcdeb161d8c38d9baf44c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toJSON()&lt;/code&gt; method returns a string representation of the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;toJSON()&lt;/code&gt; 메소드의 캐릭터 라인 표현 반환 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 개체를.</target>
        </trans-unit>
        <trans-unit id="6de692ce5d4ffa4c2464aca0c7356c940514d2ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toLocaleDateString()&lt;/code&gt; method returns a string with a language sensitive representation of the date portion of this date. The new &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments let applications specify the language whose formatting conventions should be used and allow to customize the behavior of the function. In older implementations, which ignore the &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments, the locale used and the form of the string returned are entirely implementation dependent.</source>
          <target state="translated">&lt;code&gt;toLocaleDateString()&lt;/code&gt; 메소드는 날짜 일 부분의 언어 표현 구분 된 문자열을 반환한다. 새로운 &lt;code&gt;locales&lt;/code&gt; 및 &lt;code&gt;options&lt;/code&gt; 인수를 사용하면 응용 프로그램에서 형식화 규칙을 사용해야하는 언어를 지정하고 함수의 동작을 사용자 정의 할 수 있습니다. &lt;code&gt;locales&lt;/code&gt; 및 &lt;code&gt;options&lt;/code&gt; 인수 를 무시하는 이전 구현에서는 사용 된 로케일 및 리턴 된 문자열 형식이 전적으로 구현에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="cdc0297f0eb65109fdc9b01fc5f3443358fd86a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toLocaleLowerCase()&lt;/code&gt; method returns the calling string value converted to lower case, according to any locale-specific case mappings.</source>
          <target state="translated">&lt;code&gt;toLocaleLowerCase()&lt;/code&gt; 메소드 리턴 발신 문자열 값은 로케일 특정 경우 맵핑에있어서, 소문자로 변환된다.</target>
        </trans-unit>
        <trans-unit id="443b75095ca82d21f5ba0fd745809d9eba99b8bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toLocaleLowerCase()&lt;/code&gt; method returns the value of the string converted to lower case according to any locale-specific case mappings. &lt;code&gt;toLocaleLowerCase()&lt;/code&gt; does not affect the value of the string itself. In most cases, this will produce the same result as &lt;a href=&quot;tolowercase&quot;&gt;&lt;code&gt;toLowerCase()&lt;/code&gt;&lt;/a&gt;, but for some locales, such as Turkish, whose case mappings do not follow the default case mappings in Unicode, there may be a different result.</source>
          <target state="translated">&lt;code&gt;toLocaleLowerCase()&lt;/code&gt; 문자열 값 변환 방법 복귀 로케일 특정 경우에 따라 매핑을 소문자. &lt;code&gt;toLocaleLowerCase()&lt;/code&gt; 는 문자열 자체의 값에 영향을 미치지 않습니다. 대부분의 경우 &lt;a href=&quot;tolowercase&quot;&gt; &lt;code&gt;toLowerCase()&lt;/code&gt; &lt;/a&gt; 와 동일한 결과가 생성 되지만 터키어와 같은 일부 로케일의 경우, 케이스 맵핑이 기본 케이스 맵핑을 유니 코드로 따르지 않는 경우 다른 결과가있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9a5bc98b93806d7328dfd23d0e2f20fe79d9d58b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toLocaleString()&lt;/code&gt; method returns a string with a language sensitive representation of this date. The new &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments let applications specify the language whose formatting conventions should be used and customize the behavior of the function. In older implementations, which ignore the &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments, the locale used and the form of the string returned are entirely implementation dependent.</source>
          <target state="translated">&lt;code&gt;toLocaleString()&lt;/code&gt; 메소드는이 날짜의 언어에 민감한 표현 문자열을 반환합니다. 새로운 &lt;code&gt;locales&lt;/code&gt; 및 &lt;code&gt;options&lt;/code&gt; 인수를 사용하면 응용 프로그램에서 형식화 규칙을 사용해야하는 언어를 지정하고 함수의 동작을 사용자 정의 할 수 있습니다. &lt;code&gt;locales&lt;/code&gt; 및 &lt;code&gt;options&lt;/code&gt; 인수 를 무시하는 이전 구현에서는 사용 된 로케일 및 리턴 된 문자열 형식이 전적으로 구현에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="4c181a78790a95d522c7d634f8dcba90d04ce862" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toLocaleString()&lt;/code&gt; method returns a string with a language-sensitive representation of this number.</source>
          <target state="translated">&lt;code&gt;toLocaleString()&lt;/code&gt; 메소드는이 숫자의 언어에 맞는 표현 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ce71ded9fb47fafdc0a5c1f2bfd5f0791c1ea986" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toLocaleTimeString()&lt;/code&gt; method returns a string with a language sensitive representation of the time portion of this date. The new &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments let applications specify the language whose formatting conventions should be used and customize the behavior of the function. In older implementations, which ignore the &lt;code&gt;locales&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; arguments, the locale used and the form of the string returned are entirely implementation dependent.</source>
          <target state="translated">&lt;code&gt;toLocaleTimeString()&lt;/code&gt; 메소드는이 기간의 시간 부분의 언어 표현 구분 된 문자열을 반환한다. 새로운 &lt;code&gt;locales&lt;/code&gt; 및 &lt;code&gt;options&lt;/code&gt; 인수를 사용하면 응용 프로그램에서 형식화 규칙을 사용해야하는 언어를 지정하고 함수의 동작을 사용자 정의 할 수 있습니다. &lt;code&gt;locales&lt;/code&gt; 및 &lt;code&gt;options&lt;/code&gt; 인수 를 무시하는 이전 구현에서는 사용 된 로케일 및 리턴 된 문자열 형식이 전적으로 구현에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="4dddededdeaa266d4f6b4e36f1016e6d56f2759f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toLocaleUpperCase()&lt;/code&gt; method returns the calling string value converted to upper case, according to any locale-specific case mappings.</source>
          <target state="translated">&lt;code&gt;toLocaleUpperCase()&lt;/code&gt; 메소드 리턴 발신 문자열 값은 로케일 특정 경우 맵핑에있어서, 상부 케이스로 변환된다.</target>
        </trans-unit>
        <trans-unit id="edab54eb7430a87e4e2c56f40c88fe4692fd8d48" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toLocaleUpperCase()&lt;/code&gt; method returns the value of the string converted to upper case according to any locale-specific case mappings. &lt;code&gt;toLocaleUpperCase()&lt;/code&gt; does not affect the value of the string itself. In most cases, this will produce the same result as &lt;a href=&quot;touppercase&quot;&gt;&lt;code&gt;toUpperCase()&lt;/code&gt;&lt;/a&gt;, but for some locales, such as Turkish, whose case mappings do not follow the default case mappings in Unicode, there may be a different result.</source>
          <target state="translated">&lt;code&gt;toLocaleUpperCase()&lt;/code&gt; 메소드가 복귀 문자열의 값은 로케일 특정 경우 맵핑에 따라 대문자로 변환된다. &lt;code&gt;toLocaleUpperCase()&lt;/code&gt; 는 문자열 자체의 값에 영향을 미치지 않습니다. 대부분의 경우 &lt;a href=&quot;touppercase&quot;&gt; &lt;code&gt;toUpperCase()&lt;/code&gt; &lt;/a&gt; 와 동일한 결과가 생성 되지만 터키어와 같은 일부 로케일의 경우, 케이스 맵핑이 기본 케이스 맵핑을 유니 코드로 따르지 않는 경우 다른 결과가있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0cb3154ea52bee934a4a9af4298d2277e26aa187" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toLowerCase()&lt;/code&gt; method returns the calling string value converted to lower case.</source>
          <target state="translated">&lt;code&gt;toLowerCase()&lt;/code&gt; 메소드가 반환 호출 문자열 값은 소문자로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="1d4fc82c4ee80a96e1bdeeea889258ac210eac67" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toLowerCase()&lt;/code&gt; method returns the value of the string converted to lower case. &lt;code&gt;toLowerCase()&lt;/code&gt; does not affect the value of the string &lt;code&gt;str&lt;/code&gt; itself.</source>
          <target state="translated">&lt;code&gt;toLowerCase()&lt;/code&gt; 메소드가 반환 문자열의 값은 소문자로 변환됩니다. &lt;code&gt;toLowerCase()&lt;/code&gt; 는 문자열 &lt;code&gt;str&lt;/code&gt; 자체 의 값에 영향을 미치지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="1dceab665270eb0d894532b40e2a43d79af258c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toPrecision()&lt;/code&gt; method returns a string representing the &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; object to the specified precision.</source>
          <target state="translated">&lt;code&gt;toPrecision()&lt;/code&gt; 메소드의 반환 나타내는 캐릭터 라인 &lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt; 지정된 정밀도 개체를.</target>
        </trans-unit>
        <trans-unit id="3593487d782bc9e25b68ad4e96adfb00fc0890a3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toString()&lt;/code&gt; method is automatically called when a date is to be represented as a text value, e.g. &lt;code&gt;console.log(new Date())&lt;/code&gt;, or when a date is used in a string concatenation, such as &lt;code&gt;var today&amp;nbsp;= 'Today is ' + new Date()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;toString()&lt;/code&gt; 메소드가 자동으로 날짜가 텍스트 값으로 표현 될 때 호출되는, 예를 들면 &lt;code&gt;console.log(new Date())&lt;/code&gt; 날짜가 같은 문자열 연결에 사용되는 경우, 또는 &lt;code&gt;var today&amp;nbsp;= 'Today is ' + new Date()&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="c8cb91bb2a4fa972bac6025c69afe74adbc9c959" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toString()&lt;/code&gt; method parses its first argument, and attempts to return a string representation in the specified radix (base). For radixes above 10, the letters of the alphabet indicate numerals greater than 9. For example, for hexadecimal numbers (base 16), &lt;code&gt;a&lt;/code&gt; through &lt;code&gt;f&lt;/code&gt; are used.</source>
          <target state="translated">&lt;code&gt;toString()&lt;/code&gt; 메소드는 첫 번째 인수를 구문 분석하고, 지정된 기수 (베이스)의 문자열 표현을 반환하려고 시도합니다. 10보다 큰 기수의 경우 알파벳 문자는 9보다 큰 숫자를 나타냅니다. 예를 들어 16 진수 (기수 16)의 경우 &lt;code&gt;a&lt;/code&gt; ~ &lt;code&gt;f&lt;/code&gt; 가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="aef48c3db750fafbc9e23694d9a289d86ef5365f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toString()&lt;/code&gt; method returns a string representing the regular expression.</source>
          <target state="translated">&lt;code&gt;toString()&lt;/code&gt; 메소드는 정규 표현식을 나타내는 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3a6e291ea9eb17a7ed3124b0e25d51227f3fbaef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toString()&lt;/code&gt; method returns a string representing the specified &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;toString()&lt;/code&gt; 메소드는 지정된 나타내는 문자열 반환 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 개체를.</target>
        </trans-unit>
        <trans-unit id="108226db1a2ff86483cf2870fd73d0b2b13efb5b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toString()&lt;/code&gt; method returns a string representing the specified &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;toString()&lt;/code&gt; 메소드는 지정된 나타내는 문자열 반환 &lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt; 개체를.</target>
        </trans-unit>
        <trans-unit id="6b4c6fa3d38cb17e4f6b59c566d1c25ba3830d2b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toString()&lt;/code&gt; method returns a string representing the specified object.</source>
          <target state="translated">&lt;code&gt;toString()&lt;/code&gt; 메서드는 지정된 개체를 나타내는 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="97243005725f08a5812c6aa4c5b25fe95d939f4b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toString()&lt;/code&gt; method will throw a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; exception (&quot;Function.prototype.toString called on incompatible object&quot;), if its &lt;code&gt;this&lt;/code&gt; value object is not a &lt;code&gt;Function&lt;/code&gt; object. It will also throw for &lt;a href=&quot;../proxy&quot;&gt;&lt;code&gt;Proxy&lt;/code&gt;&lt;/a&gt; objects, for example.</source>
          <target state="translated">&lt;code&gt;toString()&lt;/code&gt; 메소드는 발생합니다 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 해당하는 경우 ( &quot;호환되지 않는 개체에서 호출 Function.prototype.toString&quot;) 예외를 &lt;code&gt;this&lt;/code&gt; 값 객체가 아닌 &lt;code&gt;Function&lt;/code&gt; 객체입니다. 예를 들어 &lt;a href=&quot;../proxy&quot;&gt; &lt;code&gt;Proxy&lt;/code&gt; &lt;/a&gt; 객체 도 처리 합니다.</target>
        </trans-unit>
        <trans-unit id="50872c2d5a0223153996743472e6bfd2cc8e42f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toTimeString()&lt;/code&gt; method is especially useful because compliant engines implementing &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/ECMAScript&quot;&gt;ECMA-262&lt;/a&gt; may differ in the string obtained from &lt;a href=&quot;tostring&quot;&gt;&lt;code&gt;toString()&lt;/code&gt;&lt;/a&gt; for &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; objects, as the format is implementation-dependent; simple string slicing approaches may not produce consistent results across multiple engines.</source>
          <target state="translated">&lt;code&gt;toTimeString()&lt;/code&gt; 실행 엔진을 호환 방식 때문에 특히 유용 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/ECMAScript&quot;&gt;ECMA-262&lt;/a&gt; 에 의한 문자열 다를 수 &lt;a href=&quot;tostring&quot;&gt; &lt;code&gt;toString()&lt;/code&gt; &lt;/a&gt; 에 대한 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 형식은 구현 의존적이기 때문에, 객체; 간단한 문자열 슬라이싱 방식은 여러 엔진에서 일관된 결과를 생성하지 못할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9eedbbd929be16bb6a08efc9eee825f499e9beab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toTimeString()&lt;/code&gt; method returns the time portion of a &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object in human readable form in American English.</source>
          <target state="translated">&lt;code&gt;toTimeString()&lt;/code&gt; 메소드는의 시간 부분 반환 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 미국 영어에서 사람이 읽을 수있는 형태로 개체를.</target>
        </trans-unit>
        <trans-unit id="5c831507f30af5e55f57b81c961372d23720a569" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toUTCString()&lt;/code&gt; method converts a date to a string, using the UTC time zone.</source>
          <target state="translated">&lt;code&gt;toUTCString()&lt;/code&gt; 메소드는 UTC 시간대를 사용하여 문자열로 날짜를 변환한다.</target>
        </trans-unit>
        <trans-unit id="aae475104e93c5906b6da885303c159f6bd726b1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toUpperCase()&lt;/code&gt; method returns the calling string value converted to uppercase (the value will be converted to a string if it isn't one).</source>
          <target state="translated">&lt;code&gt;toUpperCase()&lt;/code&gt; 호출 문자열 값이 대문자로 변환 메소드가 리턴이 (가 아닌 경우 값은 문자열로 변환됩니다).</target>
        </trans-unit>
        <trans-unit id="91e9cc5eaa6597510653d6ea202a3d6fc4562f87" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toUpperCase()&lt;/code&gt; method returns the value of the string converted to uppercase. This method does not affect the value of the string itself since JavaScript strings are immutable.</source>
          <target state="translated">&lt;code&gt;toUpperCase()&lt;/code&gt; 문자열의 값이 변환 방법을 반환 대문자로. JavaScript 문자열은 변경할 수 없으므로이 방법은 문자열 자체의 값에 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f3ac0a8da3e9e204f8f84192c5f916cf4feeaf6c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trim()&lt;/code&gt; method removes whitespace from both ends of a string. Whitespace in this context is all the whitespace characters (space, tab, no-break space, etc.) and all the line terminator characters (LF, CR, etc.).</source>
          <target state="translated">&lt;code&gt;trim()&lt;/code&gt; 메소드들을 제거 문자열의 양단으로부터 공백. 이 문맥에서 공백은 모든 공백 문자 (공백, 탭, 공백 없음 등)와 모든 줄 종결 자 문자 (LF, CR 등)입니다.</target>
        </trans-unit>
        <trans-unit id="a77d84b3b80fca92ad2f2c44608b4f1ce7547f76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trim()&lt;/code&gt; method returns the string stripped of whitespace from both ends. &lt;code&gt;trim()&lt;/code&gt; does not affect the value of the string itself.</source>
          <target state="translated">&lt;code&gt;trim()&lt;/code&gt; 메소드는 양쪽 끝에서 공백을 박탈 문자열을 반환합니다. &lt;code&gt;trim()&lt;/code&gt; 은 문자열 자체의 값에 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e8326ead88e4cd9c2599706946cb0d4f772330fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trimEnd()&lt;/code&gt; / &lt;code&gt;trimRight()&lt;/code&gt; methods return the string stripped of whitespace from its right end. &lt;code&gt;trimEnd()&lt;/code&gt; or &lt;code&gt;trimRight()&lt;/code&gt; do not affect the value of the string itself.</source>
          <target state="translated">&lt;code&gt;trimEnd()&lt;/code&gt; / &lt;code&gt;trimRight()&lt;/code&gt; 메소드는 우단으로부터 공백을 박탈 문자열을 반환한다. &lt;code&gt;trimEnd()&lt;/code&gt; 또는 &lt;code&gt;trimRight()&lt;/code&gt; 는 문자열 자체의 값에 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d0c42df8ea8425f6289055b0685f49215590cd01" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trimEnd()&lt;/code&gt; method removes whitespace from the end of a string. &lt;code&gt;trimRight()&lt;/code&gt; is an alias of this method.</source>
          <target state="translated">&lt;code&gt;trimEnd()&lt;/code&gt; 메소드들을 제거 스트링의 끝에서 공백. &lt;code&gt;trimRight()&lt;/code&gt; 는이 메소드의 별명입니다.</target>
        </trans-unit>
        <trans-unit id="84d6affa61054b04ac320da53491af0255f69a38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trimStart()&lt;/code&gt; / &lt;code&gt;trimLeft()&lt;/code&gt; methods return the string stripped of whitespace from its left end. &lt;code&gt;trimLeft()&lt;/code&gt; or &lt;code&gt;trimStart()&lt;/code&gt; do not affect the value of the string itself.</source>
          <target state="translated">&lt;code&gt;trimStart()&lt;/code&gt; / &lt;code&gt;trimLeft()&lt;/code&gt; 메소드는 좌측 단부로부터 벗겨 공백 문자열을 반환한다. &lt;code&gt;trimLeft()&lt;/code&gt; 또는 &lt;code&gt;trimStart()&lt;/code&gt; 는 문자열 자체의 값에 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a273caafe0e3f21a7d29b468ea165a0f70d1e4ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trimStart()&lt;/code&gt; method removes whitespace from the beginning of a string. &lt;code&gt;trimLeft()&lt;/code&gt; is an alias of this method.</source>
          <target state="translated">&lt;code&gt;trimStart()&lt;/code&gt; 메소드 제거합니다 문자열의 시작 부분에서 공백. &lt;code&gt;trimLeft()&lt;/code&gt; 는이 메소드의 별명입니다.</target>
        </trans-unit>
        <trans-unit id="8e8dbdfa9a4dbb033289cdec8edd0c90b52dd4dc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;try...catch&lt;/code&gt; statement marks a block of statements to try, and specifies a response, should an exception be thrown.</source>
          <target state="translated">&lt;code&gt;try...catch&lt;/code&gt; 문 은 시도 할 명령문 블록을 표시하고 예외가 발생하는 경우 응답을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="769e08ea4cd1c8b66874471821aed2443abfa2a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;try&lt;/code&gt; statement consists of a &lt;code&gt;try&lt;/code&gt; block, which contains one or more statements. &lt;code&gt;{}&lt;/code&gt; must always be used, also for single statements. At least one &lt;code&gt;catch&lt;/code&gt; clause, or a &lt;code&gt;finally&lt;/code&gt; clause, must be present. This gives us three forms for the &lt;code&gt;try&lt;/code&gt; statement:</source>
          <target state="translated">&lt;code&gt;try&lt;/code&gt; 문은 구성 &lt;code&gt;try&lt;/code&gt; 하나 이상의 문이 포함 블록. 단일 명령문에도 항상 &lt;code&gt;{}&lt;/code&gt; 을 사용해야합니다. 적어도 하나의 &lt;code&gt;catch&lt;/code&gt; 절 또는 &lt;code&gt;finally&lt;/code&gt; 절이 있어야합니다. 이렇게하면 &lt;code&gt;try&lt;/code&gt; 문에 대한 세 가지 형태가 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="4bec62c61738f40c660dbbd07be4d2a3f373053d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;typeof&lt;/code&gt; operator determines the type of a given object.</source>
          <target state="translated">&lt;code&gt;typeof&lt;/code&gt; 연산자는 주어진 객체의 유형을 결정한다.</target>
        </trans-unit>
        <trans-unit id="c55560a650a9b123b737ee66a03b700f6fe1cd62" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;typeof&lt;/code&gt; operator is followed by its operand:</source>
          <target state="translated">&lt;code&gt;typeof&lt;/code&gt; 연산자를 피연산자 따른다 :</target>
        </trans-unit>
        <trans-unit id="1a23f4a9cde5079c1f99d663faf09b3511568087" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;typeof&lt;/code&gt; operator returns a string indicating the type of the unevaluated operand.</source>
          <target state="translated">&lt;code&gt;typeof&lt;/code&gt; 연산자는 평가되지 않은 피연산자의 유형을 나타내는 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f610c77b8f248a18fe0dc12f1ff1e1a5a0afa79c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;unicode&lt;/code&gt; property indicates whether or not the &quot;&lt;code&gt;u&lt;/code&gt;&quot; flag is used with a regular expression. &lt;code&gt;unicode&lt;/code&gt; is a read-only property of an individual regular expression instance.</source>
          <target state="translated">&lt;code&gt;unicode&lt;/code&gt; 속성은 &quot;여부를 나타내는 &lt;code&gt;u&lt;/code&gt; &quot;플래그는 일반 식으로 사용된다. &lt;code&gt;unicode&lt;/code&gt; 는 개별 정규식 인스턴스의 읽기 전용 속성입니다.</target>
        </trans-unit>
        <trans-unit id="ebe281bf94ee2b4c66c24905c0dbe8e1af906423" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;unshift&lt;/code&gt; method inserts the given values to the beginning of an array-like object.</source>
          <target state="translated">&lt;code&gt;unshift&lt;/code&gt; 방법은 배열 형 객체의 처음으로 주어진 값을 삽입한다.</target>
        </trans-unit>
        <trans-unit id="8cad25838721f6b6affa0e29e3484611dc0437b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;valueOf()&lt;/code&gt; method of &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; returns the primitive value of a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; object as a string data type. This value is equivalent to &lt;a href=&quot;tostring&quot;&gt;&lt;code&gt;String.prototype.toString()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;valueOf()&lt;/code&gt; 메소드 는 &lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 오브젝트 의 프리미티브 값을 문자열 데이터 유형으로 리턴합니다 . 이 값은 &lt;a href=&quot;tostring&quot;&gt; &lt;code&gt;String.prototype.toString()&lt;/code&gt; &lt;/a&gt; 과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="a2b73ecde1dfc53d92441f91129b9e133efc59fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;valueOf()&lt;/code&gt; method returns the primitive value of a &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object as a number data type, the number of milliseconds since midnight 01 January, 1970 UTC.</source>
          <target state="translated">&lt;code&gt;valueOf()&lt;/code&gt; 메서드는의 프리미티브 값 반환 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 숫자 데이터 형식, 자정 01 월부터 밀리 초 단위로 1970 UTC와 같은 개체를.</target>
        </trans-unit>
        <trans-unit id="da22d1c9f68730f5c70c46b9c54ce3ad651cea55" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;valueOf()&lt;/code&gt; method returns the primitive value of a &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;valueOf()&lt;/code&gt; 메소드는 프리미티브 값의 반환 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 오브젝트.</target>
        </trans-unit>
        <trans-unit id="c14657e05277c3ae2629d97db6e277ae1e2ddf97" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;valueOf()&lt;/code&gt; method returns the primitive value of a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;valueOf()&lt;/code&gt; 메소드는 프리미티브 값의 반환 &lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 오브젝트.</target>
        </trans-unit>
        <trans-unit id="838b5313047bbb34666f3e61531649c3d13eb091" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;valueOf()&lt;/code&gt; method returns the primitive value of the specified object.</source>
          <target state="translated">&lt;code&gt;valueOf()&lt;/code&gt; 메소드는, 지정된 객체의 프리미티브 값을 반환한다.</target>
        </trans-unit>
        <trans-unit id="92f2a0b3c5433cf03e1339120e414cfefce5a576" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;valueOf()&lt;/code&gt; method returns the wrapped primitive value of a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;valueOf()&lt;/code&gt; 메소드는 랩의 프리미티브 값을 반환 &lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt; 개체.</target>
        </trans-unit>
        <trans-unit id="38dcfa335912989ce16f78d3ad1c5e19e069e1ed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;valueOf&lt;/code&gt; method of &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; returns the primitive value of a &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; object or literal &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; as a Boolean data type.</source>
          <target state="translated">&lt;code&gt;valueOf&lt;/code&gt; 방법 &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; (A)의 기본 값을 반환 &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; 객체 또는 문자 &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; 부울 데이터 형식을.</target>
        </trans-unit>
        <trans-unit id="535be2559b3b7f2298770f875f760c417c3946ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;valueOf&lt;/code&gt; method of &lt;a href=&quot;../symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt; returns the primitive value of a Symbol object as a Symbol data type.</source>
          <target state="translated">&lt;a href=&quot;../symbol&quot;&gt; &lt;code&gt;Symbol&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;valueOf&lt;/code&gt; 메서드는 Symbol 객체의 프리미티브 값을 Symbol 데이터 형식으로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="55fa1d436ded0f7743550d3d4a3a96be51625c12" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;values()&lt;/code&gt; method returns a new &lt;code&gt;Array Iterator&lt;/code&gt; object that contains the values for each index in the array.</source>
          <target state="translated">&lt;code&gt;values()&lt;/code&gt; 메소드가 복귀 새로운 &lt;code&gt;Array Iterator&lt;/code&gt; 배열의 각 인덱스에 대한 값을 포함하는 개체.</target>
        </trans-unit>
        <trans-unit id="6d7e5202574c3bb684ad4cc90ea7079a312c949a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;var&lt;/code&gt; declares a variable, optionally initializing it to a value.</source>
          <target state="translated">&lt;code&gt;var&lt;/code&gt; 선택적 값으로 초기화, 변수를 선언합니다.</target>
        </trans-unit>
        <trans-unit id="897af01fbc7a1aeaf9f2be520c8cb53a174fd03e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;void&lt;/code&gt; evaluates the given &lt;code&gt;&lt;em&gt;expression&lt;/em&gt;&lt;/code&gt; and then returns &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;void&lt;/code&gt; 평가하여 주어진 &lt;code&gt;&lt;em&gt;expression&lt;/em&gt;&lt;/code&gt; 한 후 반환 &lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="82acc2ba21ba03475bc6c3532a1ee15ad0f92f7e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;void&lt;/code&gt; operator discards an expression's return value.</source>
          <target state="translated">&lt;code&gt;void&lt;/code&gt; 연산자는 식의 반환 값을 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="e5db750a3354d5b639f19156e00ff8b9a3dc4cbb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;void&lt;/code&gt; operator is often used merely to obtain the &lt;code&gt;undefined&lt;/code&gt; primitive value, usually using &quot;&lt;code&gt;void(0)&lt;/code&gt;&quot; (which is equivalent to &quot;&lt;code&gt;void 0&lt;/code&gt;&quot;). In these cases, the global variable &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; can be used instead (assuming it has not been assigned to a non-default value).</source>
          <target state="translated">&lt;code&gt;void&lt;/code&gt; 운영자는 종종 획득하기 위해 단순히 사용되는 &lt;code&gt;undefined&lt;/code&gt; 보통 사용 프리미티브 값을 &quot; &lt;code&gt;void(0)&lt;/code&gt; &quot;( &quot;동등 &lt;code&gt;void 0&lt;/code&gt; &quot;). 이 경우, 기본값이 아닌 값으로 지정 &lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 경우 undefined 전역 변수를 대신 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b3d13e2a5ad5de3f04bc4a1d15b6fb13b7da1253" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;wait()&lt;/code&gt; and &lt;code&gt;notify()&lt;/code&gt; methods are modeled on Linux futexes (&quot;fast user-space mutex&quot;) and provide ways for waiting until a certain condition becomes true and are typically used as blocking constructs.</source>
          <target state="translated">&lt;code&gt;wait()&lt;/code&gt; 및 &lt;code&gt;notify()&lt;/code&gt; 특정 조건이 참이 일반적 구조를 블록으로 사용 될 때까지 방법은 리눅스 futexes에 모델로되어있다 ( &quot;빠른 사용자 공간 뮤텍스&quot;) 및 대기에 대한 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="c40665399093e4817a0248d3b80c6b99f91366d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;x = 2&lt;/code&gt; is limited in scope to the block in which it was defined.</source>
          <target state="translated">&lt;code&gt;x = 2&lt;/code&gt; 가 정의 된 블록에 범위가 제한된다.</target>
        </trans-unit>
        <trans-unit id="ceb06a046a90f1a77d67b9b150bf36b1e7029262" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;yield*&lt;/code&gt; expression iterates over the operand and yields each value returned by it.</source>
          <target state="translated">&lt;code&gt;yield*&lt;/code&gt; 발현 피연산자를 반복 실행하고 그것에 의해 반환 된 각각의 값을 산출한다.</target>
        </trans-unit>
        <trans-unit id="ecfbc752dbf10bd278aee60426270db4ee3e7593" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;yield*&lt;/code&gt; is used to delegate to another &lt;a href=&quot;../statements/function*&quot;&gt;&lt;code&gt;generator&lt;/code&gt;&lt;/a&gt; or iterable object.</source>
          <target state="translated">&lt;code&gt;yield*&lt;/code&gt; 다른 위임하는 데 사용되는 &lt;a href=&quot;../statements/function*&quot;&gt; &lt;code&gt;generator&lt;/code&gt; &lt;/a&gt; 또는 반복 가능한 개체.</target>
        </trans-unit>
        <trans-unit id="26fb3b11fb166e5aa3634e574db12005808db70d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;yield&lt;/code&gt; keyword actually returns an &lt;code&gt;IteratorResult&lt;/code&gt; object with two properties, &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;done&lt;/code&gt;. The &lt;code&gt;value&lt;/code&gt; property is the result of evaluating the &lt;code&gt;yield&lt;/code&gt; expression, and &lt;code&gt;done&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, indicating that the generator function has not fully completed.</source>
          <target state="translated">&lt;code&gt;yield&lt;/code&gt; 키워드는 실제로 반환 &lt;code&gt;IteratorResult&lt;/code&gt; 의 두 가지 속성을 가진 객체 &lt;code&gt;value&lt;/code&gt; 과 &lt;code&gt;done&lt;/code&gt; . &lt;code&gt;value&lt;/code&gt; 속성은 평가 결과 &lt;code&gt;yield&lt;/code&gt; 발현 및 &lt;code&gt;done&lt;/code&gt; 인 &lt;code&gt;false&lt;/code&gt; 발생기 기능은 완전히 완료되지 않은 것을 나타낸다.</target>
        </trans-unit>
        <trans-unit id="9df48637246cf3fa0fd6096242e9cd90e47acc90" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;yield&lt;/code&gt; keyword is used to pause and resume a generator function (&lt;a href=&quot;../statements/function*&quot;&gt;&lt;code&gt;function*&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Legacy_generator_function&quot;&gt;legacy generator function&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;yield&lt;/code&gt; 키워드 중지 및 발전기 함수 (재시작하는 데 사용되는 &lt;a href=&quot;../statements/function*&quot;&gt; &lt;code&gt;function*&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Legacy_generator_function&quot;&gt;레거시 생성 기능&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="9ae86ee006331319767ea8ea1e7b47a6d042f723" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;yield&lt;/code&gt; keyword pauses generator function execution and the value of the expression following the &lt;code&gt;yield&lt;/code&gt; keyword is returned to the generator's caller. It can be thought of as a generator-based version of the &lt;code&gt;return&lt;/code&gt; keyword.</source>
          <target state="translated">&lt;code&gt;yield&lt;/code&gt; 키워드 멈춤 생성기 기능 실행하고 다음 식의 값 &lt;code&gt;yield&lt;/code&gt; 키워드 발전기의 호출자에게 반환된다. &lt;code&gt;return&lt;/code&gt; 키워드 의 생성기 기반 버전으로 생각할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="065463d049b36377da14331481f7dd33b125cfc1" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;n&lt;/em&gt;th string found by a parenthesized capture group, provided the first argument to &lt;code&gt;replace()&lt;/code&gt; was a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object. (Corresponds to &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt;, etc. above.) For example, if &lt;code&gt;/(\a+)(\b+)/&lt;/code&gt;, was given, &lt;code&gt;p1&lt;/code&gt; is the match for &lt;code&gt;\a+&lt;/code&gt;, and &lt;code&gt;p2&lt;/code&gt; for &lt;code&gt;\b+&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;N&lt;/em&gt; 의 첫번째 인자를 제공 괄호 포착기에 의해 발견 번째 문자열 &lt;code&gt;replace()&lt;/code&gt; 이었다 &lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt; 개체. ( 위의 &lt;code&gt;$1&lt;/code&gt; , &lt;code&gt;$2&lt;/code&gt; 등에 해당합니다 .) 예를 들어, &lt;code&gt;/(\a+)(\b+)/&lt;/code&gt; 가 지정된 경우 &lt;code&gt;p1&lt;/code&gt; 은 &lt;code&gt;\a+&lt;/code&gt; 와 일치 하고 &lt;code&gt;p2&lt;/code&gt; 는 &lt;code&gt;\b+&lt;/code&gt; 와 일치합니다 .</target>
        </trans-unit>
        <trans-unit id="afc59143cc18af9cdc27570c778510a67d50d1e6" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Proxy&lt;/strong&gt; object is used to define custom behavior for fundamental operations (e.g. property lookup, assignment, enumeration, function invocation, etc).</source>
          <target state="translated">&lt;strong&gt;프록시&lt;/strong&gt; 객체는 기본 동작 (예를 들면 등록, 조회 할당 열거 함수 호출 등)에 대한 사용자 지정 동작을 정의하기 위해 사용된다.</target>
        </trans-unit>
        <trans-unit id="c5ef3d98d86d821ee86cd80487256c6f9f09f04a" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;array comprehension&lt;/strong&gt; syntax was a JavaScript expression which allowed you to quickly assemble a new array based on an existing one. However, it has been removed from the standard and the Firefox implementation. Do not use it!</source>
          <target state="translated">&lt;strong&gt;배열 이해&lt;/strong&gt; 구문은 신속하게 기존에 기초한 새로운 배열을 조립 할 수 자바 스크립트 표현했다. 그러나 표준 및 Firefox 구현에서 제거되었습니다. 사용하지 마십시오!</target>
        </trans-unit>
        <trans-unit id="d8f59a014ecb1a14707700e8eac92c0e0d267805" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;bind()&lt;/strong&gt; function creates a new &lt;strong&gt;bound function&lt;/strong&gt;&lt;strong&gt;(BF)&lt;/strong&gt;. A &lt;strong&gt;BF&lt;/strong&gt; is an &lt;strong&gt;exotic function object&lt;/strong&gt; (a term from &lt;strong&gt;ECMAScript 2015&lt;/strong&gt;) that wraps the original function object. Calling a &lt;strong&gt;BF&lt;/strong&gt; generally results in the execution of its &lt;strong&gt;wrapped function&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;바인드 ()&lt;/strong&gt; 함수는 새로운 생성 &lt;strong&gt;바인딩 기능 &lt;/strong&gt;&lt;strong&gt;(BF)를&lt;/strong&gt; . &lt;strong&gt;BF는&lt;/strong&gt; 인 &lt;strong&gt;외래 객체 함수&lt;/strong&gt; (상기 용어 &lt;strong&gt;ECMAScript를 2,015&lt;/strong&gt; 원 함수 객체를 포함). &lt;strong&gt;BF를&lt;/strong&gt; 호출하면 일반적으로 &lt;strong&gt;랩핑 된 함수&lt;/strong&gt; 가 실행 &lt;strong&gt;됩니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="1d733e1153af7fad236cbcb528b0288e3e22d5e4" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;break statement&lt;/strong&gt; terminates the current loop, &lt;a href=&quot;switch&quot;&gt;&lt;code&gt;switch&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;label&quot;&gt;&lt;code&gt;label&lt;/code&gt;&lt;/a&gt; statement and transfers program control to the statement following the terminated statement.</source>
          <target state="translated">&lt;strong&gt;break 문은&lt;/strong&gt; 현재 루프, 종료 &lt;a href=&quot;switch&quot;&gt; &lt;code&gt;switch&lt;/code&gt; &lt;/a&gt; , 또는 &lt;a href=&quot;label&quot;&gt; &lt;code&gt;label&lt;/code&gt; &lt;/a&gt; 종료 된 문 다음의 문으로 전송합니다 프로그램 제어합니다.</target>
        </trans-unit>
        <trans-unit id="94714384460d5950f3307e7c533970bce49359f6" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;catch()&lt;/strong&gt; method returns a &lt;code&gt;Promise&lt;/code&gt; and deals with rejected cases only. It behaves the same as calling &lt;a href=&quot;then&quot;&gt;&lt;code&gt;Promise.prototype.then(undefined, onRejected)&lt;/code&gt;&lt;/a&gt; (in fact, calling &lt;code&gt;obj.catch(onRejected)&lt;/code&gt; internally calls &lt;code&gt;obj.then(undefined, onRejected)&lt;/code&gt;). This means, that you have to provide &lt;code&gt;onRejected&lt;/code&gt; function even if you want to fallback to &lt;code&gt;undefined&lt;/code&gt; result value - for example &lt;code&gt;obj.catch(() =&amp;gt; {})&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;캐치 ()&lt;/strong&gt; 메소드는 반환 &lt;code&gt;Promise&lt;/code&gt; 만 거부의 경우와 거래를. &lt;a href=&quot;then&quot;&gt; &lt;code&gt;Promise.prototype.then(undefined, onRejected)&lt;/code&gt; &lt;/a&gt; 호출과 동일하게 작동합니다 (실제로 &lt;code&gt;obj.catch(onRejected)&lt;/code&gt; 호출은 내부적으로 &lt;code&gt;obj.then(undefined, onRejected)&lt;/code&gt; 호출 ). 즉, &lt;code&gt;undefined&lt;/code&gt; 결과 값 으로 폴백하려는 경우에도 &lt;code&gt;onRejected&lt;/code&gt; 함수 를 제공 해야 합니다 &lt;code&gt;obj.catch(() =&amp;gt; {})&lt;/code&gt; 예 : obj.catch (() =&amp;gt; {})) .</target>
        </trans-unit>
        <trans-unit id="99ace5b02df9e8b779d43f17fe783c684b201a52" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;class declaration&lt;/strong&gt; creates a new class with a given name using prototype-based inheritance.</source>
          <target state="translated">&lt;strong&gt;클래스 선언은&lt;/strong&gt; 프로토 타입 기반 상속을 사용하여 지정된 이름을 가지는 새로운 클래스를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="8fe53faa937fc7cde1f3dbdb6693fd9e43484178" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;class expression&lt;/strong&gt; is one way to define a class in ECMAScript 2015. Similar to &lt;a href=&quot;function&quot;&gt;function expressions&lt;/a&gt;, class expressions can be named or unnamed. If named, the name of the class is local to the class body only. JavaScript classes use prototype-based inheritance.</source>
          <target state="translated">&lt;strong&gt;클래스 표현은&lt;/strong&gt; 하나 ECMAScript를 비슷한 2015의 클래스를 정의하는 방법은 &lt;a href=&quot;function&quot;&gt;함수 표현식&lt;/a&gt; , 클래스 표현이 이름을 지정할 수 있습니다 또는 이름. 이름이 지정된 경우 클래스 이름은 클래스 본문에만 해당됩니다. JavaScript 클래스는 프로토 타입 기반 상속을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="73225444d7e8533026618e451637c545dd6c871c" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;conditional (ternary) operator&lt;/strong&gt; is the only JavaScript operator that takes three operands. This operator is frequently used as a shortcut for the &lt;a href=&quot;../statements/if...else&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; statement.</source>
          <target state="translated">&lt;strong&gt;조건 (원) 연산자&lt;/strong&gt; 세 피연산자를 유일한 스크립트 연산자이다. 이 연산자는 &lt;a href=&quot;../statements/if...else&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt; 문의 바로 가기로 자주 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="a9330c73465ea3e6ff22f7d537d670942af5fe2a" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;continue statement&lt;/strong&gt; terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration.</source>
          <target state="translated">은 &lt;strong&gt;문을 계속&lt;/strong&gt; 현재 또는 라벨 루프의 현재 반복의 문 종료 실행하고 다음 반복으로 루프의 실행을 계속합니다.</target>
        </trans-unit>
        <trans-unit id="37a8ee20020657a18f3bca33142a67351ee49ca6" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;debugger statement&lt;/strong&gt; invokes any available debugging functionality, such as setting a breakpoint. If no debugging functionality is available, this statement has no effect.</source>
          <target state="translated">&lt;strong&gt;디버거 문은&lt;/strong&gt; 이러한 중단 점을 설정하는 등, 가능한 디버깅 기능을 호출합니다. 디버깅 기능을 사용할 수 없으면이 명령문은 적용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f1f8b1715d765f723a3d6b24a097ae8fc219b0e8" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;default keyword &lt;/strong&gt;can be used in two situations in JavaScript: within a &lt;a href=&quot;switch&quot;&gt;&lt;code&gt;switch&lt;/code&gt;&lt;/a&gt; statement, or with an &lt;a href=&quot;export&quot;&gt;&lt;code&gt;export&lt;/code&gt;&lt;/a&gt; statement.</source>
          <target state="translated">&lt;strong&gt;기본 키워드는&lt;/strong&gt; 자바 스크립트에서이 상황에서 사용할 수하십시오 내 &lt;a href=&quot;switch&quot;&gt; &lt;code&gt;switch&lt;/code&gt; &lt;/a&gt; 문, 또는으로 &lt;a href=&quot;export&quot;&gt; &lt;code&gt;export&lt;/code&gt; &lt;/a&gt; 문.</target>
        </trans-unit>
        <trans-unit id="27335960563bef2cdec1223d71b74b09bdcf3633" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;destructuring assignment&lt;/strong&gt; syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.</source>
          <target state="translated">&lt;strong&gt;destructuring 할당&lt;/strong&gt; 구문은 별개의 변수로, 오브젝트에서 압축 풀기 배열의 값, 또는 속성을 가능하게하는 자바 스크립트의 표현이다.</target>
        </trans-unit>
        <trans-unit id="db24014295ccb881f02ef10b67d2e5dcf0fe8bce" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;for statement&lt;/strong&gt; creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement (usually a &lt;a href=&quot;block&quot;&gt;block statement&lt;/a&gt;) to be executed in the loop.</source>
          <target state="translated">&lt;strong&gt;문은&lt;/strong&gt; 문 (일반적으로 다음 세 가지 선택 식 호로 세미콜론으로 분리 구성 루프 생성 &lt;a href=&quot;block&quot;&gt;블록 문&lt;/a&gt; 루프에서 실행될 참조).</target>
        </trans-unit>
        <trans-unit id="dbaba40e57db93ab21dee53da06becedbf4d1aa4" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;function declaration&lt;/strong&gt; (function statement) defines a function with the specified parameters.</source>
          <target state="translated">&lt;strong&gt;함수 선언&lt;/strong&gt; (function 문) 지정된 매개 변수로 함수를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="5246b915eb7c85d0437344cef9ea86765b90ccb2" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;if statement&lt;/strong&gt; executes a statement if a specified condition is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/truthy&quot;&gt;truthy&lt;/a&gt;. If the condition is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/falsy&quot;&gt;falsy&lt;/a&gt;, another statement can be executed.</source>
          <target state="translated">&lt;strong&gt;if 문은&lt;/strong&gt; 지정된 조건이 인 경우 문을 실행 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/truthy&quot;&gt;truthy&lt;/a&gt; . 조건이 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/falsy&quot;&gt;거짓&lt;/a&gt; 이면 다른 명령문을 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e17438ef55a4e09a7dbcf723659c6679b84bf06f" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;iterable&lt;/strong&gt; protocol allows JavaScript objects to define or customize their iteration behavior, such as what values are looped over in a &lt;a href=&quot;statements/for...of&quot;&gt;&lt;code&gt;for..of&lt;/code&gt;&lt;/a&gt; construct. Some built-in types are &lt;a href=&quot;#Built-in_iterables&quot;&gt;built-in iterables&lt;/a&gt; with a default iteration behavior, such as &lt;a href=&quot;global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;global_objects/map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt;, while other types (such as &lt;a href=&quot;global_objects/object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;) are not.</source>
          <target state="translated">&lt;strong&gt;반복 가능한&lt;/strong&gt; 프로토콜은 자바 스크립트를 정의하거나 값이에 걸쳐 반복하는 등의 내용과 자신의 반복 동작, 사용자 정의 개체 수 &lt;a href=&quot;statements/for...of&quot;&gt; &lt;code&gt;for..of&lt;/code&gt; &lt;/a&gt; 구조를. 일부 내장 유형은 &lt;a href=&quot;global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;global_objects/map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt; 과 같은 기본 반복 동작 이있는 &lt;a href=&quot;#Built-in_iterables&quot;&gt;내장&lt;/a&gt; 이터 러블 유형이지만 다른 유형 (예 : &lt;a href=&quot;global_objects/object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt; )은 그렇지 않습니다.</target>
        </trans-unit>
        <trans-unit id="256bf006dce59aa8632fcb126bf4510bc31e4563" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;iterator&lt;/strong&gt; protocol defines a standard way to produce a sequence of values (either finite or infinite), and potentially a return value when all values have been generated.</source>
          <target state="translated">&lt;strong&gt;반복자&lt;/strong&gt; 프로토콜 (어느 유한 또는 무한) 값들의 시퀀스 및 모든 값이 생성 된 잠재적으로 리턴 값을 생성하는 표준 방법을 정의한다.</target>
        </trans-unit>
        <trans-unit id="1dc9001af6987d19bbd223d74b3ee5b04eac7a1e" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;labeled statement&lt;/strong&gt; can be used with &lt;a href=&quot;break&quot;&gt;&lt;code&gt;break&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;continue&quot;&gt;&lt;code&gt;continue&lt;/code&gt;&lt;/a&gt; statements. It is prefixing a statement with an identifier which you can refer to.</source>
          <target state="translated">&lt;strong&gt;라벨 문은&lt;/strong&gt; 함께 사용할 수있는 &lt;a href=&quot;break&quot;&gt; &lt;code&gt;break&lt;/code&gt; &lt;/a&gt; 이나 &lt;a href=&quot;continue&quot;&gt; &lt;code&gt;continue&lt;/code&gt; &lt;/a&gt; 문을. 참조 할 수있는 식별자로 문장 앞에 접두사를 붙입니다.</target>
        </trans-unit>
        <trans-unit id="a5afe6c326deb45bb1c28c14ba0b8f1e9c6e7f08" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;reducer&lt;/strong&gt; function is fed four parameters:</source>
          <target state="translated">&lt;strong&gt;감속기&lt;/strong&gt; 함수는 네 개의 매개 변수를 공급한다 :</target>
        </trans-unit>
        <trans-unit id="4a91b7f158fd8ddfc727835a7d5c6d3fe0e61fa6" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;rest parameter&lt;/strong&gt; syntax allows us to represent an indefinite number of arguments as an array.</source>
          <target state="translated">&lt;strong&gt;나머지 매개 변수의&lt;/strong&gt; 구문은 우리가 배열 인수의 무한 수를 나타냅니다 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="38cf1e83c03988b5e1319e2f037c50f8bc3c82c5" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;super&lt;/strong&gt; keyword is used to access and call functions on an object's parent.</source>
          <target state="translated">&lt;strong&gt;슈퍼&lt;/strong&gt; 키워드는 객체의 부모에 액세스 및 전화 기능에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="8d9b434bf4770e269f3ed85648191f4b9db54c86" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;value&lt;/strong&gt; of the &lt;strong&gt;first element&lt;/strong&gt; in the array that satisfies the provided testing function; otherwise, &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">&lt;strong&gt;값&lt;/strong&gt; 의 &lt;strong&gt;첫 번째 요소&lt;/strong&gt; 어레이 만족 제공된 테스트 함수; 그렇지 않으면 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="02842c94116a9c6809ef6eee7ec3c23722a1feab" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;while statement&lt;/strong&gt; creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement.</source>
          <target state="translated">&lt;strong&gt;동안 문은&lt;/strong&gt; 긴 true로 테스트 조건 평가할로 지정된 문을 실행 루프를 만듭니다. 명령문을 실행하기 전에 조건이 평가됩니다.</target>
        </trans-unit>
        <trans-unit id="fd60c91aefb449ecfe0c5d63d04422740e88d367" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;with statement&lt;/strong&gt; extends the scope chain for a statement.</source>
          <target state="translated">&lt;strong&gt;문은&lt;/strong&gt; 문장의 범위 체인을 확장합니다.</target>
        </trans-unit>
        <trans-unit id="bd4b7d3e8a9687f79e6ec51636e21057aed22d25" translate="yes" xml:space="preserve">
          <source>The Array object being traversed</source>
          <target state="translated">순회되는 Array 객체</target>
        </trans-unit>
        <trans-unit id="124954ca57725d5f3aa87356bc8cd739a5f724f9" translate="yes" xml:space="preserve">
          <source>The Atomic operations are installed on an &lt;code&gt;Atomics&lt;/code&gt; module. Unlike the other global objects, &lt;code&gt;Atomics&lt;/code&gt; is not a constructor. You cannot use it with a &lt;a href=&quot;../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt; operator&lt;/a&gt; or invoke the &lt;code&gt;Atomics&lt;/code&gt; object as a function. All properties and methods of &lt;code&gt;Atomics&lt;/code&gt; are static (as is the case with the &lt;a href=&quot;math&quot;&gt;&lt;code&gt;Math&lt;/code&gt;&lt;/a&gt; object, for example).</source>
          <target state="translated">원자 작업은 &lt;code&gt;Atomics&lt;/code&gt; 모듈 에 설치됩니다 . 다른 전역 객체와 달리 &lt;code&gt;Atomics&lt;/code&gt; 는 생성자가 아닙니다. &lt;a href=&quot;../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; 연산자&lt;/a&gt; 와 함께 사용 하거나 &lt;code&gt;Atomics&lt;/code&gt; 객체를 함수로 호출 할 수 없습니다 . &lt;code&gt;Atomics&lt;/code&gt; 의 모든 속성과 메서드 는 정적입니다 ( 예 : &lt;a href=&quot;math&quot;&gt; &lt;code&gt;Math&lt;/code&gt; &lt;/a&gt; 객체 의 경우와 동일 ).</target>
        </trans-unit>
        <trans-unit id="c9360b8cf41eb0b67799088a47ba963c3ed2252b" translate="yes" xml:space="preserve">
          <source>The BCP 47 language tag for the locale actually used. If any Unicode extension values were requested in the input BCP 47 language tag that led to this locale, the key-value pairs that were requested and are supported for this locale are included in &lt;code&gt;locale&lt;/code&gt;.</source>
          <target state="translated">실제로 사용 된 로캘의 BCP 47 언어 태그입니다. 이 로케일로 이어지는 입력 BCP 47 언어 태그에서 유니 코드 확장 값이 요청 된 경우이 로케일에 대해 요청되고 지원되는 키-값 쌍이 로케일에 포함 &lt;code&gt;locale&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bf28f8279826d3b43c23b8e24d4d008e353709bf" translate="yes" xml:space="preserve">
          <source>The Debugger in the Firefox Developer Tools</source>
          <target state="translated">Firefox 개발자 도구의 디버거</target>
        </trans-unit>
        <trans-unit id="999324758919789edc66930d918929098458f194" translate="yes" xml:space="preserve">
          <source>The ECMA-402 (ECMAScript Intl API) standard specifies standard objects and methods that enable language sensitive date and time formatting (available in Chrome 24+, Firefox 29+, IE11+, Safari10+).</source>
          <target state="translated">ECMA-402 (ECMAScript Intl API) 표준은 언어에 민감한 날짜 및 시간 형식 (Chrome 24+, Firefox 29+, IE11 +, Safari10 +에서 사용 가능)을 가능하게하는 표준 객체 및 방법을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="8e137fb633ed9a984aae87f772a0fc0ed4a1c417" translate="yes" xml:space="preserve">
          <source>The ECMAScript 5 specification of the function &lt;code&gt;parseInt&lt;/code&gt; no longer allows implementations to treat Strings beginning with a &lt;code&gt;0&lt;/code&gt; character as octal values. ECMAScript 5 states:</source>
          <target state="translated">&lt;code&gt;parseInt&lt;/code&gt; 함수의 ECMAScript 5 스펙은 더 이상 구현에서 &lt;code&gt;0&lt;/code&gt; 문자로 시작하는 문자열 을 8 진 값 으로 취급 할 수 없습니다 . ECMAScript 5 상태 :</target>
        </trans-unit>
        <trans-unit id="b3216945e8685ea4af8a3c93dd0029a0b22151b1" translate="yes" xml:space="preserve">
          <source>The ECMAScript specification mentions&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-rules-of-automatic-semicolon-insertion&quot;&gt; three rules of semicolon insertion&lt;/a&gt;.</source>
          <target state="translated">ECMAScript 사양에는 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-rules-of-automatic-semicolon-insertion&quot;&gt;세 가지 세미콜론 삽입 규칙이&lt;/a&gt; 언급되어 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8208825fde42cabcd8bbb76cd476940ce51a4654" translate="yes" xml:space="preserve">
          <source>The ECMAScript specification states: If the String does not conform to the standard format the function may fall back to any implementation&amp;ndash;specific heuristics or implementation&amp;ndash;specific parsing algorithm. Unrecognizable strings or dates containing illegal element values in ISO formatted strings shall cause &lt;code&gt;Date.parse()&lt;/code&gt; to return &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ECMAScript 사양에는 다음과 같이 명시되어 있습니다. 문자열이 표준 형식을 준수하지 않으면 함수는 구현 별 휴리스틱 또는 구현 별 구문 분석 알고리즘으로 대체 될 수 있습니다. 인식 할 수없는 문자열 또는 ISO 형식 문자열에 잘못된 요소 값이 포함 된 날짜는 &lt;code&gt;Date.parse()&lt;/code&gt; 가 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; 을 반환하도록 합니다.</target>
        </trans-unit>
        <trans-unit id="5ab764a8c99b12a3a98198c6866656e7cedcca17" translate="yes" xml:space="preserve">
          <source>The Iterator protocol</source>
          <target state="translated">반복자 프로토콜</target>
        </trans-unit>
        <trans-unit id="6becbd4e850d3a8a0a7babdb926cca557de3dc9c" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;code&gt;Array&lt;/code&gt; object is a global object that is used in the construction of arrays; which are high-level, list-like objects.</source>
          <target state="translated">JavaScript &lt;code&gt;Array&lt;/code&gt; 객체는 배열 구성에 사용되는 전역 객체입니다. 높은 수준의 목록 같은 객체입니다.</target>
        </trans-unit>
        <trans-unit id="d93195924299629cef4916635b4b1e0990c4dbde" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;code&gt;Date&lt;/code&gt; object provides uniform behavior across platforms. The time value can be passed between systems to create a date that represents the same moment in time.</source>
          <target state="translated">JavaScript &lt;code&gt;Date&lt;/code&gt; 객체는 여러 플랫폼에서 균일 한 동작을 제공합니다. 시스템간에 시간 값을 전달하여 동일한 순간을 나타내는 날짜를 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bafdbb63aeaa1f07ea2da5fed805a6b7854d004c" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;code&gt;Date&lt;/code&gt; object supports a number of UTC (universal) methods, as well as local time methods. UTC, also known as Greenwich Mean Time (GMT), refers to the time as set by the World Time Standard. The local time is the time known to the computer where JavaScript is executed.</source>
          <target state="translated">JavaScript &lt;code&gt;Date&lt;/code&gt; 객체는 현지 시간 방법뿐만 아니라 여러 UTC (범용) 방법을 지원합니다. 그리니치 표준시 (GMT)라고도하는 UTC는 세계 시간 표준에 의해 설정된 시간을 나타냅니다. 현지 시간은 JavaScript가 실행되는 컴퓨터에 알려진 시간입니다.</target>
        </trans-unit>
        <trans-unit id="156d00682b0b8947f00a38049180c99849ecf542" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;code&gt;Math.log()&lt;/code&gt;function is equivalent to &lt;em&gt;ln(x)&lt;/em&gt; in mathematics.</source>
          <target state="translated">JavaScript &lt;code&gt;Math.log()&lt;/code&gt; 함수는 수학에서 &lt;em&gt;ln (x)&lt;/em&gt; 와 같습니다 .</target>
        </trans-unit>
        <trans-unit id="dde583114572ab3af5b6024979e219b534fa142d" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;code&gt;delete&lt;/code&gt; removes a property from an object; if no more references to the same property are held, it is eventually released automatically.</source>
          <target state="translated">JavaScript &lt;code&gt;delete&lt;/code&gt; 는 객체에서 속성을 제거합니다. 동일한 속성에 대한 참조가 더 이상 유지되지 않으면 결국 자동으로 해제됩니다.</target>
        </trans-unit>
        <trans-unit id="feacf6d164087c84342adcbacb255f2b0ba72579" translate="yes" xml:space="preserve">
          <source>The JavaScript date is based on a time value that is milliseconds since midnight January 1, 1970, UTC. A day holds 86,400,000 milliseconds. The JavaScript &lt;code&gt;Date&lt;/code&gt; object range is -100,000,000 days to 100,000,000 days relative to January 1, 1970 UTC.</source>
          <target state="translated">JavaScript 날짜는 1970 년 1 월 1 일 자정 (UTC) 이후의 시간 값 (밀리 초)을 기준으로합니다. 하루는 86,400,000 밀리 초입니다. JavaScript &lt;code&gt;Date&lt;/code&gt; 객체 범위는 1970 년 1 월 1 일 UTC 기준으로 -100,000,000 일에서 100,000,000 일입니다.</target>
        </trans-unit>
        <trans-unit id="b9de9c5fa9fea058719adf889a9d0bba2b33c317" translate="yes" xml:space="preserve">
          <source>The JavaScript debugger has functionality similar to that provided by this method, as well as other debugging options. For information on the debugger, see &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Venkman&quot;&gt;Venkman&lt;/a&gt;.</source>
          <target state="translated">JavaScript 디버거에는이 방법에서 제공하는 기능과 유사한 기능 및 기타 디버깅 옵션이 있습니다. 디버거에 대한 정보는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Venkman&quot;&gt;Venkman을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0d28aae23ee954321752888e11c516cf9eed364d" translate="yes" xml:space="preserve">
          <source>The JavaScript language is intended to be used within some larger environment, be it a browser, server-side scripts, or similar. For the most part, this reference attempts to be environment-agnostic and does not target a web browser environment.</source>
          <target state="translated">JavaScript 언어는 브라우저, 서버 측 스크립트 등의 일부 더 큰 환경에서 사용하기위한 것입니다. 대부분의 경우이 참조는 환경에 구애받지 않고 웹 브라우저 환경을 대상으로하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="69baf2e55fa7ceef3be5f6200851de4d7761bde2" translate="yes" xml:space="preserve">
          <source>The JavaScript reference serves as a repository of facts about the JavaScript language. The entire language is described here in detail. As you write JavaScript code, you'll refer to these pages often (thus the title &quot;JavaScript reference&quot;). If you're learning JavaScript, or need help understanding some of its capabilities or features, check out the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide&quot;&gt;JavaScript guide&lt;/a&gt;.</source>
          <target state="translated">JavaScript 참조는 JavaScript 언어에 대한 사실의 저장소 역할을합니다. 여기에 전체 언어가 자세히 설명되어 있습니다. JavaScript 코드를 작성할 때 이러한 페이지를 자주 참조하게됩니다 (따라서 &quot;JavaScript 참조&quot;라는 제목). JavaScript를 배우거나 일부 기능을 이해하는 데 도움이 필요한 경우 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide&quot;&gt;JavaScript 안내서를&lt;/a&gt; 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="d4f84834e7660ed505621093e0e5d6c89de8cc1e" translate="yes" xml:space="preserve">
          <source>The Promise returned by &lt;code&gt;catch()&lt;/code&gt; is rejected if &lt;code&gt;onRejected&lt;/code&gt; throws an error or returns a Promise which is itself rejected; otherwise, it is resolved.</source>
          <target state="translated">에 의해 반환 약속 &lt;code&gt;catch()&lt;/code&gt; 경우 거부 &lt;code&gt;onRejected&lt;/code&gt; 는 에러가 발생하거나 자체가 거부되는 약속을 반환 그렇지 않으면 해결됩니다.</target>
        </trans-unit>
        <trans-unit id="95b5af8e1532fe52df042769f7bec798553a35f2" translate="yes" xml:space="preserve">
          <source>The Set object that's being traversed.</source>
          <target state="translated">통과하고있는 Set 객체입니다.</target>
        </trans-unit>
        <trans-unit id="49e044a65fd508c1e1bf68ae413fba5886e5cb81" translate="yes" xml:space="preserve">
          <source>The UTF-16 code unit matches the Unicode code point for code points that can be represented in a single UTF-16 code unit. If the Unicode code point cannot be represented in a single UTF-16 code unit (because its value is greater than 0x10000) then the code unit returned will be the first part of a surrogate pair for the code point. If you want the entire code point value, use &lt;code&gt;codePointAt&lt;/code&gt;().</source>
          <target state="translated">UTF-16 코드 단위는 단일 UTF-16 코드 단위로 표시 될 수있는 코드 포인트의 유니 코드 코드 포인트와 일치합니다. 유니 코드 코드 포인트를 단일 UTF-16 코드 단위로 표시 할 수없는 경우 (값이 0x10000보다 크기 때문에) 리턴 된 코드 단위는 코드 포인트에 대한 대리 쌍의 첫 부분이됩니다. 전체 코드 포인트 값을 원하면 &lt;code&gt;codePointAt&lt;/code&gt; ()를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="614f666e60229c8931cfcf35c7c7b7b8405c66c9" translate="yes" xml:space="preserve">
          <source>The above alert shows &lt;code&gt;button&lt;/code&gt;. Note however that only the outer code has its &lt;code&gt;this&lt;/code&gt; set this way:</source>
          <target state="translated">위의 경고는 &lt;code&gt;button&lt;/code&gt; 보여줍니다 . 그러나 외부 코드만 &lt;code&gt;this&lt;/code&gt; 다음 과 같이 설정되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="48db29ca2070a265910895b83347db970012efd5" translate="yes" xml:space="preserve">
          <source>The above code creates three new symbols. Note that &lt;code&gt;Symbol(&quot;foo&quot;)&lt;/code&gt; does not coerce the string &quot;foo&quot; into a symbol. It creates a new symbol each time:</source>
          <target state="translated">위의 코드는 세 개의 새로운 심볼을 만듭니다. 참고 &lt;code&gt;Symbol(&quot;foo&quot;)&lt;/code&gt; 기호에 문자열 &quot;foo는&quot;강요하지 않습니다. 매번 새 심볼을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="ebc968b0e572c0c6ecd0d9dde19f65705aeb7e07" translate="yes" xml:space="preserve">
          <source>The above example uses parsing of a non&amp;ndash;standard string value that may not be correctly parsed in non&amp;ndash;Mozilla browsers.</source>
          <target state="translated">위의 예는 비 Mozilla 브라우저에서 올바르게 구문 분석되지 않을 수있는 비표준 문자열 값의 구문 분석을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="779a22b41e4e4f93cde5fd366230052879eb4ac2" translate="yes" xml:space="preserve">
          <source>The above syntax using the &lt;code&gt;Symbol()&lt;/code&gt; function will not create a global symbol that is available in your whole codebase. To create symbols available across files and even across realms (each of which has its own global scope), use the methods &lt;a href=&quot;symbol/for&quot;&gt;&lt;code&gt;Symbol.for()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;symbol/keyfor&quot;&gt;&lt;code&gt;Symbol.keyFor()&lt;/code&gt;&lt;/a&gt; to set and retrieve symbols from the global symbol registry.</source>
          <target state="translated">&lt;code&gt;Symbol()&lt;/code&gt; 함수를 사용하는 위의 구문 은 전체 코드베이스에서 사용 가능한 전역 심볼을 만들지 않습니다. 파일과 영역 (각각 고유 한 전역 범위를 &lt;a href=&quot;symbol/for&quot;&gt; &lt;code&gt;Symbol.for()&lt;/code&gt; &lt;/a&gt; )에서 사용 가능한 기호를 만들려면 Symbol.for () 및 &lt;a href=&quot;symbol/keyfor&quot;&gt; &lt;code&gt;Symbol.keyFor()&lt;/code&gt; &lt;/a&gt; 메서드를 사용 하여 전역 기호 레지스트리에서 기호를 설정하고 검색합니다.</target>
        </trans-unit>
        <trans-unit id="76c147cd9cdc395d76c4a7f61bcaf2a60decddaa" translate="yes" xml:space="preserve">
          <source>The absolute value of the given number.</source>
          <target state="translated">주어진 숫자의 절대 값.</target>
        </trans-unit>
        <trans-unit id="6eade57e467c41464ec5d8b8513d318ab94fe744" translate="yes" xml:space="preserve">
          <source>The accumulator accumulates the callback's return values; it is the accumulated value previously returned in the last invocation of the callback, or &lt;code&gt;initialValue&lt;/code&gt;, if supplied (see below).</source>
          <target state="translated">누산기는 콜백의 반환 값을 누적합니다. 콜백의 마지막 호출에서 이전에 반환 된 누적 값이거나 제공된 경우 &lt;code&gt;initialValue&lt;/code&gt; 입니다 (아래 참조).</target>
        </trans-unit>
        <trans-unit id="c0cb05ceed2902ab0776f2e0d4d042358e7f0a6a" translate="yes" xml:space="preserve">
          <source>The addition assignment operator &lt;strong&gt;adds&lt;/strong&gt; the value of the right operand to a variable and assigns the result to the variable. The types of the two operands determine the behavior of the addition assignment operator. Addition or concatenation is possible. See the &lt;a href=&quot;arithmetic_operators#Addition&quot;&gt;addition operator&lt;/a&gt; for more details.</source>
          <target state="translated">더하기 대입 연산자 &lt;strong&gt;는&lt;/strong&gt; 오른쪽 피연산자의 값을 변수에 추가하고 결과를 변수에 지정합니다. 두 피연산자의 유형에 따라 더하기 대입 연산자의 동작이 결정됩니다. 추가 또는 연결이 가능합니다. 자세한 내용은 &lt;a href=&quot;arithmetic_operators#Addition&quot;&gt;더하기 연산자&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="4a9e70d115ebee62e12d028c95344707ba539dff" translate="yes" xml:space="preserve">
          <source>The addition operator produces the sum of numeric operands or string concatenation.</source>
          <target state="translated">더하기 연산자는 숫자 피연산자 또는 문자열 연결의 합계를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="45fd46de73e09649bf34e6b28fed934df6b6ff74" translate="yes" xml:space="preserve">
          <source>The allowed range for these methods is usually between 0 and 20 (or 21). However, the ECMAScript specification allows to extend this range.</source>
          <target state="translated">이러한 방법의 허용 범위는 일반적으로 0에서 20 (또는 21) 사이입니다. 그러나 ECMAScript 사양에서는이 범위를 확장 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f2e4f23675a348a666a6bfafd7a4699120b37ced" translate="yes" xml:space="preserve">
          <source>The angle in radians (in</source>
          <target state="translated">라디안 각도 (in</target>
        </trans-unit>
        <trans-unit id="2634c0a019d5cd1eb149d39cd1e280b4a526aa36" translate="yes" xml:space="preserve">
          <source>The angle in radians for which to return the cosine.</source>
          <target state="translated">코사인을 반환 할 라디안 단위의 각도입니다.</target>
        </trans-unit>
        <trans-unit id="4e34c6cf0ffab0f10f4b4f8b32a6d6fee2d0835d" translate="yes" xml:space="preserve">
          <source>The arccosine (in radians) of the given number if it's between &lt;strong&gt;-1&lt;/strong&gt; and &lt;strong&gt;1&lt;/strong&gt;; otherwise, &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">주어진 수의 아크 코사인 (라디안)이 &lt;strong&gt;-1&lt;/strong&gt; 과 &lt;strong&gt;1&lt;/strong&gt; 사이 인 경우 ; 그렇지 않으면 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="ddc680f871363f6e0485b6e299a25e7590efcab6" translate="yes" xml:space="preserve">
          <source>The arcsine (in radians) of the given number if it's between &lt;strong&gt;-1&lt;/strong&gt; and &lt;strong&gt;1&lt;/strong&gt;; otherwise, &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">주어진 숫자의 아크 사인 (라디안)이 &lt;strong&gt;-1&lt;/strong&gt; 과 &lt;strong&gt;1&lt;/strong&gt; 사이 인 경우 ; 그렇지 않으면 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="85ae76861326155a029dcf8b30f59372b5b5bdd8" translate="yes" xml:space="preserve">
          <source>The arctangent (in radians) of the given number.</source>
          <target state="translated">주어진 수의 아크 탄젠트 (라디안)입니다.</target>
        </trans-unit>
        <trans-unit id="8a7944803c62f9bf2952575c8a72fd7e52711bcc" translate="yes" xml:space="preserve">
          <source>The argument list is invalid somehow. Perhaps you accidentally picked a keyword like &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;var&lt;/code&gt; as an argument name, or perhaps there's some stray punctuation in your argument list. Or maybe you accidentally passed an invalid value, like a number or object.</source>
          <target state="translated">인수 목록이 어떻게 든 유효하지 않습니다. 어쩌면 실수로 인수 이름으로 &lt;code&gt;if&lt;/code&gt; 또는 &lt;code&gt;var&lt;/code&gt; 와 같은 키워드를 선택 했거나 인수 목록에 약간의 구두점이 있습니다. 또는 실수로 숫자 나 객체와 같은 잘못된 값을 전달했을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7cad76dfde920321524d3fa684e08460364eae69" translate="yes" xml:space="preserve">
          <source>The argument of &lt;a href=&quot;../global_objects/array/sort&quot;&gt;&lt;code&gt;Array.prototype.sort()&lt;/code&gt;&lt;/a&gt; is expected to be either &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; or a function which compares its operands.</source>
          <target state="translated">&lt;a href=&quot;../global_objects/array/sort&quot;&gt; &lt;code&gt;Array.prototype.sort()&lt;/code&gt; &lt;/a&gt; 의 인수는 &lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 거나 피연산자를 비교하는 함수일 것으로 예상됩니다 .</target>
        </trans-unit>
        <trans-unit id="6f2610db3899781e47b828d98a30ce2343116de0" translate="yes" xml:space="preserve">
          <source>The argument of the &lt;code&gt;eval()&lt;/code&gt; function is a string. If the string represents an expression, &lt;code&gt;eval()&lt;/code&gt; evaluates the expression. If the argument represents one or more JavaScript statements, &lt;code&gt;eval()&lt;/code&gt; evaluates the statements. Do not call &lt;code&gt;eval()&lt;/code&gt; to evaluate an arithmetic expression; JavaScript evaluates arithmetic expressions automatically.</source>
          <target state="translated">&lt;code&gt;eval()&lt;/code&gt; 함수 의 인수 는 문자열입니다. 문자열이 표현식을 나타내는 경우 &lt;code&gt;eval()&lt;/code&gt; 은 표현식을 평가합니다. 인수가 하나 이상의 JavaScript 명령문을 나타내는 경우 &lt;code&gt;eval()&lt;/code&gt; 이 명령문을 평가합니다. 산술 표현식을 평가하기 위해 &lt;code&gt;eval()&lt;/code&gt; 을 호출하지 마십시오 . JavaScript는 산술 표현식을 자동으로 평가합니다.</target>
        </trans-unit>
        <trans-unit id="86421c1a1ea2fb7e300781ab95602ea6e5e9b867" translate="yes" xml:space="preserve">
          <source>The argument passed to this function will be converted to &lt;code&gt;number&lt;/code&gt; type implicitly.</source>
          <target state="translated">이 함수에 전달 된 인수는 암시 적 으로 &lt;code&gt;number&lt;/code&gt; 유형 으로 변환됩니다 .</target>
        </trans-unit>
        <trans-unit id="2642b281b11a45379b1899c8bfdfa20fded62cac" translate="yes" xml:space="preserve">
          <source>The argument passed to this method will be converted to number type implicitly.</source>
          <target state="translated">이 메소드에 전달 된 인수는 암시 적으로 숫자 유형으로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="ad8b914095fbf6c1921676be0fbe503c75e3bc36" translate="yes" xml:space="preserve">
          <source>The argument to be checked.</source>
          <target state="translated">확인할 인수입니다.</target>
        </trans-unit>
        <trans-unit id="568b31681a37df3f00fb42424598962a14f30d09" translate="yes" xml:space="preserve">
          <source>The arguments &quot;&lt;code&gt;a&lt;/code&gt;&quot; and &quot;&lt;code&gt;b&lt;/code&gt;&quot; are formal argument names that are used in the function body, &quot;&lt;code&gt;return a + b&lt;/code&gt;&quot;.</source>
          <target state="translated">인수 &quot; &lt;code&gt;a&lt;/code&gt; &quot;및 &quot; &lt;code&gt;b&lt;/code&gt; &quot;는 함수 본문에서 사용되는 형식 인수 이름이며 &quot; &lt;code&gt;return a + b&lt;/code&gt; &quot;입니다.</target>
        </trans-unit>
        <trans-unit id="d01f440c1503d60bc2f15078825ee9b7b4dd13f7" translate="yes" xml:space="preserve">
          <source>The arguments of &lt;code&gt;substring()&lt;/code&gt; represent the starting and ending indexes, while the arguments of &lt;code&gt;substr()&lt;/code&gt; represent the starting index and the length of characters to include in the returned string.</source>
          <target state="translated">&lt;code&gt;substring()&lt;/code&gt; 의 인수는 시작 및 종료 색인을 나타내는 반면, &lt;code&gt;substr()&lt;/code&gt; 의 인수 는 시작 색인 및 리턴 된 문자열에 포함 할 문자 길이를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="1c05bc8168ca994804516a468e85cd019d331fe5" translate="yes" xml:space="preserve">
          <source>The arguments to the function are as follows:</source>
          <target state="translated">함수에 대한 인수는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ce50c2eb1731e30f651e83e65a160b7d9cb292ed" translate="yes" xml:space="preserve">
          <source>The arguments.length property provides the number of arguments actually passed to a function. This can be more or less than the defined parameter's count (see &lt;a href=&quot;../../global_objects/function/length&quot;&gt;&lt;code&gt;Function.length&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">arguments.length 속성은 실제로 함수에 전달 된 인수 수를 제공합니다. 정의 된 매개 변수의 수보다 많거나 적을 수 있습니다 ( &lt;a href=&quot;../../global_objects/function/length&quot;&gt; &lt;code&gt;Function.length&lt;/code&gt; &lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="d6ace2dacc3116721ac085e0aa2ff5a3b5910fd8" translate="yes" xml:space="preserve">
          <source>The array &lt;code&gt;every&lt;/code&gt; was called upon.</source>
          <target state="translated">&lt;code&gt;every&lt;/code&gt; 배열 이 호출되었습니다.</target>
        </trans-unit>
        <trans-unit id="b0a5990c1febd7c0456b1d95c2919dd12ea41ed9" translate="yes" xml:space="preserve">
          <source>The array &lt;code&gt;filter&lt;/code&gt; was called upon.</source>
          <target state="translated">배열 &lt;code&gt;filter&lt;/code&gt; 가 호출되었습니다.</target>
        </trans-unit>
        <trans-unit id="739231e797b44686b6cb1d90214cc6c87045d6c4" translate="yes" xml:space="preserve">
          <source>The array &lt;code&gt;find&lt;/code&gt; was called upon.</source>
          <target state="translated">배열 &lt;code&gt;find&lt;/code&gt; 가 호출되었습니다.</target>
        </trans-unit>
        <trans-unit id="fd246a8490071c05ff637a363cae6c8e36958f15" translate="yes" xml:space="preserve">
          <source>The array &lt;code&gt;findIndex&lt;/code&gt; was called upon.</source>
          <target state="translated">&lt;code&gt;findIndex&lt;/code&gt; 배열 이 호출되었습니다.</target>
        </trans-unit>
        <trans-unit id="ab72b62dc5410c1069e9b77f96e6c04c204b365d" translate="yes" xml:space="preserve">
          <source>The array &lt;code&gt;forEach()&lt;/code&gt; was called upon.</source>
          <target state="translated">&lt;code&gt;forEach()&lt;/code&gt; 배열 이 호출되었습니다.</target>
        </trans-unit>
        <trans-unit id="d3186a1a627eaeb3ebe86c8859078581c3a2241f" translate="yes" xml:space="preserve">
          <source>The array &lt;code&gt;map&lt;/code&gt; was called upon.</source>
          <target state="translated">배열 &lt;code&gt;map&lt;/code&gt; 이 호출되었습니다.</target>
        </trans-unit>
        <trans-unit id="d8556e513816f3230a6e95e0d7cca63a630bf152" translate="yes" xml:space="preserve">
          <source>The array &lt;code&gt;reduce()&lt;/code&gt; was called upon.</source>
          <target state="translated">배열 &lt;code&gt;reduce()&lt;/code&gt; 가 호출되었습니다.</target>
        </trans-unit>
        <trans-unit id="e4bc918402b106b22d0715b5db9cbc982610a958" translate="yes" xml:space="preserve">
          <source>The array &lt;code&gt;reduce&lt;/code&gt; was called upon.</source>
          <target state="translated">어레이 &lt;code&gt;reduce&lt;/code&gt; 가 호출되었습니다.</target>
        </trans-unit>
        <trans-unit id="52ab5cf3467b3f84dd374afb2b77922d7f6dba9d" translate="yes" xml:space="preserve">
          <source>The array &lt;code&gt;some()&lt;/code&gt; was called upon.</source>
          <target state="translated">&lt;code&gt;some()&lt;/code&gt; 배열 이 호출되었습니다.</target>
        </trans-unit>
        <trans-unit id="6dad5186f2394322d0d048218bd4971959e5c71d" translate="yes" xml:space="preserve">
          <source>The array &lt;strong&gt;iterator&lt;/strong&gt; function, which is the &lt;a href=&quot;values&quot;&gt;&lt;code&gt;values()&lt;/code&gt;&lt;/a&gt; function by default.</source>
          <target state="translated">배열 &lt;strong&gt;iterator&lt;/strong&gt; 함수는 기본적으로 &lt;a href=&quot;values&quot;&gt; &lt;code&gt;values()&lt;/code&gt; &lt;/a&gt; 함수입니다.</target>
        </trans-unit>
        <trans-unit id="baf0ca63b09065862fb6a8e2d7fe2f07e5b3e61c" translate="yes" xml:space="preserve">
          <source>The array comprehensions syntax is non-standard and removed starting with Firefox 58. For future-facing usages, consider using &lt;a href=&quot;../global_objects/array/map&quot;&gt;&lt;code&gt;Array.prototype.map&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../global_objects/array/filter&quot;&gt;&lt;code&gt;Array.prototype.filter&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../functions/arrow_functions&quot;&gt;arrow functions&lt;/a&gt;, and &lt;a href=&quot;spread_syntax&quot;&gt;spread syntax&lt;/a&gt;.</source>
          <target state="translated">배열 이해 구문은 비표준이며 Firefox 58부터 제거됩니다. 향후 사용을 위해 &lt;a href=&quot;../global_objects/array/map&quot;&gt; &lt;code&gt;Array.prototype.map&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../global_objects/array/filter&quot;&gt; &lt;code&gt;Array.prototype.filter&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../functions/arrow_functions&quot;&gt;화살표 함수&lt;/a&gt; 및 &lt;a href=&quot;spread_syntax&quot;&gt;확산 구문&lt;/a&gt; 사용을 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="574cf9211229dd7de993204fbc819629088b32dd" translate="yes" xml:space="preserve">
          <source>The array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown.</source>
          <target state="translated">값을 복사 할 배열입니다. 소스 배열의 길이에 오프셋을 더한 값이 대상 배열의 길이를 초과하지 않는 한, 소스 배열의 모든 값은 대상 배열에 복사됩니다.이 경우 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="5d3ea3e65da8f7c4b65c1da2a62251e8c8e8b334" translate="yes" xml:space="preserve">
          <source>The array that &lt;code&gt;forEach()&lt;/code&gt; is being applied to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="518a56af12e1c2665fe6da5982dd5a9e68f5bc6c" translate="yes" xml:space="preserve">
          <source>The arrow function expression (=&amp;gt;)</source>
          <target state="translated">화살표 함수 표현식 (=&amp;gt;)</target>
        </trans-unit>
        <trans-unit id="59183250f0677ed86b491a4145e3847b2edb3225" translate="yes" xml:space="preserve">
          <source>The attributes for the property being defined or modified.</source>
          <target state="translated">정의 또는 수정중인 속성의 속성</target>
        </trans-unit>
        <trans-unit id="f79e2a6915396dcde507e68f69aa0bcc1ad9f2b1" translate="yes" xml:space="preserve">
          <source>The base 10 logarithm of the given number. If the number is negative, &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">주어진 숫자의 밑이 10 인 로그. 숫자가 음수이면 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; 이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="19f44bd8b33b87013e304114f54f4d54ffa56d4d" translate="yes" xml:space="preserve">
          <source>The base 2 logarithm of the given number. If the number is negative, &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">주어진 숫자의 밑이 2 인 로그. 숫자가 음수이면 &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; 이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="598eb94105d30e9010db45a9322f00161e0043ff" translate="yes" xml:space="preserve">
          <source>The base number.</source>
          <target state="translated">기본 번호입니다.</target>
        </trans-unit>
        <trans-unit id="9138e5420219b68a65111246e358ee019b383637" translate="yes" xml:space="preserve">
          <source>The basic assignment operator is equal (&lt;code&gt;=&lt;/code&gt;), which assigns the value of its right operand to its left operand. That is, &lt;code&gt;x = y&lt;/code&gt; assigns the value of &lt;code&gt;y&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt;. The other assignment operators are usually shorthand for standard operations, as shown in the following definitions and examples.</source>
          <target state="translated">기본 대입 연산자는 같고 ( &lt;code&gt;=&lt;/code&gt; ), 오른쪽 피연산자의 값을 왼쪽 피연산자에 할당합니다. 즉, &lt;code&gt;x = y&lt;/code&gt; 는 &lt;code&gt;y&lt;/code&gt; 값 을 &lt;code&gt;x&lt;/code&gt; 에 대입합니다 . 다른 할당 연산자는 일반적으로 다음 정의 및 예에 표시된 것처럼 표준 작업의 약어입니다.</target>
        </trans-unit>
        <trans-unit id="064d3957a78ce04301d5080c985ea903ba7311e2" translate="yes" xml:space="preserve">
          <source>The bitwise AND assignment operator uses the binary representation of both operands, does a bitwise AND operation on them and assigns the result to the variable. See the &lt;a href=&quot;bitwise_operators#Bitwise_AND&quot;&gt;bitwise AND operator&lt;/a&gt; for more details.</source>
          <target state="translated">비트 AND 대입 연산자는 두 피연산자의 이진 표현을 사용하고 비트 AND 연산을 수행하고 결과를 변수에 할당합니다. 자세한 내용은 &lt;a href=&quot;bitwise_operators#Bitwise_AND&quot;&gt;비트 AND 연산자&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="740026f0cc3692131272c79998e3dd563a72e7a0" translate="yes" xml:space="preserve">
          <source>The bitwise AND operation only yields 1, if both &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are 1. The truth table for the AND operation is:</source>
          <target state="translated">비트 AND 연산은 &lt;code&gt;a&lt;/code&gt; 와 &lt;code&gt;b&lt;/code&gt; 가 모두 1 인 경우에만 1을 산출 합니다. AND 연산의 진리표는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d2f6914a63e091d61d1a3d787cf628bb0b651f2b" translate="yes" xml:space="preserve">
          <source>The bitwise OR assignment operator uses the binary representation of both operands, does a bitwise OR operation on them and assigns the result to the variable. See the &lt;a href=&quot;bitwise_operators#Bitwise_OR&quot;&gt;bitwise OR operator&lt;/a&gt; for more details.</source>
          <target state="translated">비트 OR 대입 연산자는 두 피연산자의 이진 표현을 사용하고 비트 OR 연산을 수행하고 결과를 변수에 할당합니다. 자세한 내용은 &lt;a href=&quot;bitwise_operators#Bitwise_OR&quot;&gt;비트 OR 연산자&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="e346339363a3470fe9e3b74cc1f4d1f99862ea69" translate="yes" xml:space="preserve">
          <source>The bitwise OR operation yields 1, if either &lt;code&gt;a&lt;/code&gt; or &lt;code&gt;b&lt;/code&gt; are 1. The truth table for the OR operation is:</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; 또는 &lt;code&gt;b&lt;/code&gt; 가 1 인 경우 비트 단위 OR 연산은 1을 생성 합니다. OR 연산에 대한 진리표는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="867db60d4f73f82b6e6d70b093e9389fd0ce51de" translate="yes" xml:space="preserve">
          <source>The bitwise XOR assignment operator uses the binary representation of both operands, does a bitwise XOR operation on them and assigns the result to the variable. See the &lt;a href=&quot;bitwise_operators#Bitwise_XOR&quot;&gt;bitwise XOR operator&lt;/a&gt; for more details.</source>
          <target state="translated">비트 XOR 대입 연산자는 두 피연산자의 이진 표현을 사용하고 비트 XOR 연산을 수행하고 결과를 변수에 지정합니다. 자세한 내용은 &lt;a href=&quot;bitwise_operators#Bitwise_XOR&quot;&gt;비트 XOR 연산자&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f2136d7ce96d0b55459d54b5b473e1285c2c9cfa" translate="yes" xml:space="preserve">
          <source>The bitwise XOR operation yields 1, if &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are different. The truth table for the XOR operation is:</source>
          <target state="translated">비트 XOR 연산은 &lt;code&gt;a&lt;/code&gt; 와 &lt;code&gt;b&lt;/code&gt; 가 다른 경우 1을 산출 합니다. XOR 조작의 진리표는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9c276658178589b2b39f0ac029ac097652b8b966" translate="yes" xml:space="preserve">
          <source>The bitwise logical operators are often used to create, manipulate, and read sequences of &lt;em&gt;flags&lt;/em&gt;, which are like binary variables. Variables could be used instead of these sequences, but binary flags take much less memory (by a factor of 32).</source>
          <target state="translated">비트 논리 연산자는 종종 이진 변수와 같은 &lt;em&gt;플래그&lt;/em&gt; 시퀀스를 생성, 조작 및 읽는 데 사용됩니다 . 이 시퀀스 대신 변수를 사용할 수 있지만 이진 플래그는 훨씬 적은 메모리를 사용합니다 (32 배).</target>
        </trans-unit>
        <trans-unit id="48f10e0cc5e63026f354f72ce42f1b440b6efc91" translate="yes" xml:space="preserve">
          <source>The bitwise shift operators take two operands: the first is a quantity to be shifted, and the second specifies the number of bit positions by which the first operand is to be shifted. The direction of the shift operation is controlled by the operator used.</source>
          <target state="translated">비트 단위 시프트 연산자는 두 개의 피연산자를 사용합니다. 첫 번째는 시프트 할 수량이고 두 번째는 첫 번째 피연산자가 시프트되는 비트 위치 수를 지정합니다. 변속 작동 방향은 사용 된 운전자에 의해 제어됩니다.</target>
        </trans-unit>
        <trans-unit id="175ebbaf313d101be1d46496e89b9a5e9de11c06" translate="yes" xml:space="preserve">
          <source>The block statement is often called &lt;strong&gt;compound statement&lt;/strong&gt; in other languages. It allows you to use multiple statements where JavaScript expects only one statement. Combining statements into blocks is a common practice in JavaScript. The opposite behavior is possible using an &lt;a href=&quot;empty&quot;&gt;empty statement&lt;/a&gt;, where you provide no statement, although one is required.</source>
          <target state="translated">블록 문은 종종 다른 언어 에서는 &lt;strong&gt;복합 문&lt;/strong&gt; 이라고 합니다. JavaScript가 하나의 명령문 만 필요한 여러 명령문을 사용할 수 있습니다. 자바 스크립트에서는 문장을 블록으로 결합하는 것이 일반적입니다. &lt;a href=&quot;empty&quot;&gt;빈 명령문을&lt;/a&gt; 사용하면 반대의 동작이 가능합니다. 빈 명령문 은 필요하지만 명령문을 제공하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7477e48593995ef9da932d151626c02fe6996b24" translate="yes" xml:space="preserve">
          <source>The body of a class is executed in &lt;a href=&quot;strict_mode&quot;&gt;strict mode&lt;/a&gt;, i.e., code written here is subject to stricter syntax for increased performance, some otherwise silent errors will be thrown, and certain keywords are reserved for future versions of ECMAScript.</source>
          <target state="translated">클래스의 본문은 &lt;a href=&quot;strict_mode&quot;&gt;엄격 모드&lt;/a&gt; 에서 실행 됩니다 . 즉, 여기에 작성된 코드는 성능 향상을 위해 더 엄격한 구문의 적용을받으며, 그렇지 않으면 일부 자동 오류가 발생하며 특정 키워드는 향후 버전의 ECMAScript 용으로 예약됩니다.</target>
        </trans-unit>
        <trans-unit id="4bca9151f6cc6d585fadc8a648f58c470c08c10c" translate="yes" xml:space="preserve">
          <source>The body of a class is the part that is in curly brackets &lt;code&gt;{}&lt;/code&gt;. This is where you define class members, such as methods or constructor.</source>
          <target state="translated">클래스의 본문은 중괄호 &lt;code&gt;{}&lt;/code&gt; 안에있는 부분입니다 . 여기에서 메소드 또는 생성자와 같은 클래스 멤버를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="ebf69735072234ebcbd50f368e02a05de91363f5" translate="yes" xml:space="preserve">
          <source>The brackets may look correct at first, but note how the &lt;code&gt;||&lt;/code&gt; is outside the brackets. Correct would be putting brackets around the &lt;code&gt;||&lt;/code&gt;:</source>
          <target state="translated">대괄호는 처음에는 올바르게 보일 수 있지만 &lt;code&gt;||&lt;/code&gt; 괄호 밖에 있습니다. 올바른 것은 &lt;code&gt;||&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="a60abbe84992cc75d4e2129371f5adf4277c742a" translate="yes" xml:space="preserve">
          <source>The byte length of the new &lt;code&gt;ArrayBuffer&lt;/code&gt; object.</source>
          <target state="translated">새로운 &lt;code&gt;ArrayBuffer&lt;/code&gt; 객체 의 바이트 길이</target>
        </trans-unit>
        <trans-unit id="c21c288ef2e0b85c532a0aaaba3bb8ac28da056c" translate="yes" xml:space="preserve">
          <source>The call to the &lt;code&gt;reduceRight&lt;/code&gt; callback would look something like this:</source>
          <target state="translated">&lt;code&gt;reduceRight&lt;/code&gt; 콜백 에 대한 호출은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="96f6077747036c2b9f4ce1ca2d356c8f847aea6d" translate="yes" xml:space="preserve">
          <source>The call to the reduceRight &lt;code&gt;callback&lt;/code&gt; would look something like this:</source>
          <target state="translated">reduceRight &lt;code&gt;callback&lt;/code&gt; 에 대한 호출 은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="61dd799b0f0b49b745fa73d43d16c56e02fb34fc" translate="yes" xml:space="preserve">
          <source>The callback would be invoked four times, with the arguments and return values in each call being as follows:</source>
          <target state="translated">콜백은 4 번 호출되며 각 호출의 인수 및 반환 값은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="529358e5ae65198672839644ebda30bb0834f61a" translate="yes" xml:space="preserve">
          <source>The capturing groups are numbered according to the order of left parentheses of capturing groups, starting from 1. The matched substring can be recalled from the resulting array's elements &lt;code&gt;[1], ..., [n]&lt;/code&gt; or from the predefined &lt;code&gt;RegExp&lt;/code&gt; object's properties &lt;code&gt;$1, ..., $9&lt;/code&gt;.</source>
          <target state="translated">캡처 그룹은 1부터 시작하여 캡처 그룹의 왼쪽 괄호 순서에 따라 번호가 매겨집니다. 일치하는 부분 문자열은 결과 배열의 요소 &lt;code&gt;[1], ..., [n]&lt;/code&gt; 또는 사전 정의 된 &lt;code&gt;RegExp&lt;/code&gt; 객체의 속성 &lt;code&gt;$1, ..., $9&lt;/code&gt; 에서 불러올 수 있습니다. , ..., $ 9 .</target>
        </trans-unit>
        <trans-unit id="eea4a7d34afcf6a20ca9f68e6a0423534999cad7" translate="yes" xml:space="preserve">
          <source>The characters to be searched for at the end of this string.</source>
          <target state="translated">이 문자열의 끝에서 검색 할 문자입니다.</target>
        </trans-unit>
        <trans-unit id="ea4040c6f18cef23c2d1fe587d1104e905e7f6ab" translate="yes" xml:space="preserve">
          <source>The characters to be searched for at the start of this string.</source>
          <target state="translated">이 문자열의 시작 부분에서 검색 할 문자입니다.</target>
        </trans-unit>
        <trans-unit id="b47a75f9e191f52f785a5588c08b45fa6d1cf028" translate="yes" xml:space="preserve">
          <source>The characters within a string are converted to lower case while respecting the current locale. For most languages, this will return the same as &lt;a href=&quot;string/tolowercase&quot;&gt;&lt;code&gt;toLowerCase()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">문자열 내 문자는 현재 로케일을 존중하면서 소문자로 변환됩니다. 대부분의 언어에서 &lt;a href=&quot;string/tolowercase&quot;&gt; &lt;code&gt;toLowerCase()&lt;/code&gt; &lt;/a&gt; 와 동일하게 반환됩니다 .</target>
        </trans-unit>
        <trans-unit id="02a4044b5eff1ebaa85a95b61d51842f7688126c" translate="yes" xml:space="preserve">
          <source>The characters within a string are converted to lower case while respecting the current locale. For most languages, this will return the same as &lt;a href=&quot;tolowercase&quot;&gt;&lt;code&gt;toLowerCase()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">문자열 내 문자는 현재 로케일을 존중하면서 소문자로 변환됩니다. 대부분의 언어에서 &lt;a href=&quot;tolowercase&quot;&gt; &lt;code&gt;toLowerCase()&lt;/code&gt; &lt;/a&gt; 와 동일하게 반환됩니다 .</target>
        </trans-unit>
        <trans-unit id="bb9149f43ab1f76f894c71b38c8bcdfb7b581734" translate="yes" xml:space="preserve">
          <source>The characters within a string are converted to upper case while respecting the current locale. For most languages, this will return the same as &lt;a href=&quot;string/touppercase&quot;&gt;&lt;code&gt;toUpperCase()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">문자열 내 문자는 현재 로케일을 존중하면서 대문자로 변환됩니다. 대부분의 언어에서 &lt;a href=&quot;string/touppercase&quot;&gt; &lt;code&gt;toUpperCase()&lt;/code&gt; &lt;/a&gt; 와 동일하게 반환됩니다 .</target>
        </trans-unit>
        <trans-unit id="efa62672806348552a404536b413669fee7e627a" translate="yes" xml:space="preserve">
          <source>The characters within a string are converted to upper case while respecting the current locale. For most languages, this will return the same as &lt;a href=&quot;touppercase&quot;&gt;&lt;code&gt;toUpperCase()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">문자열 내 문자는 현재 로케일을 존중하면서 대문자로 변환됩니다. 대부분의 언어에서 &lt;a href=&quot;touppercase&quot;&gt; &lt;code&gt;toUpperCase()&lt;/code&gt; &lt;/a&gt; 와 동일하게 반환됩니다 .</target>
        </trans-unit>
        <trans-unit id="4c1ed43d7a20e3b448e88650183e95808a68a1b7" translate="yes" xml:space="preserve">
          <source>The class body of a class declaration is executed in &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;. The constructor property is optional.</source>
          <target state="translated">클래스 선언의 클래스 본문은 &lt;a href=&quot;../strict_mode&quot;&gt;엄격 모드&lt;/a&gt; 에서 실행 됩니다 . 생성자 속성은 선택 사항입니다.</target>
        </trans-unit>
        <trans-unit id="04bd176ecf0b4c0d2e361fed92486d9bb741b211" translate="yes" xml:space="preserve">
          <source>The code above may seem inefficiently slow because of the triple nested function, but let's analyse the benefits of the above efficient method:</source>
          <target state="translated">위의 코드는 3 중 중첩 함수로 인해 비효율적으로 느릴 수 있지만 위의 효율적인 방법의 이점을 분석해 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="27b06f1e2d79ed3ea44e8951423a811c3379ede8" translate="yes" xml:space="preserve">
          <source>The code above serves as an example for substring operations. If you need to replace substrings, most of the time you will want to use &lt;a href=&quot;replace&quot;&gt;&lt;code&gt;String.prototype.replace()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">위의 코드는 하위 문자열 작업의 예입니다. 부분 문자열을 교체해야하는 경우 대부분 &lt;a href=&quot;replace&quot;&gt; &lt;code&gt;String.prototype.replace()&lt;/code&gt; &lt;/a&gt; 를 사용하려고합니다 .</target>
        </trans-unit>
        <trans-unit id="29efbb3fdcfaf150956a6e65df3297511df904b2" translate="yes" xml:space="preserve">
          <source>The code below shows how to import from a secondary module to assist in processing an AJAX JSON request.</source>
          <target state="translated">아래 코드는 AJAX JSON 요청 처리를 돕기 위해 보조 모듈에서 가져 오는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="f84b0cd589932cf33c346a00c77f36d47f4be22a" translate="yes" xml:space="preserve">
          <source>The comma operator allows multiple expressions to be evaluated in a single statement and returns the result of the last expression.</source>
          <target state="translated">쉼표 연산자를 사용하면 단일 표현식에서 여러 표현식을 평가할 수 있으며 마지막 표현식의 결과를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="1250480c705913bbdc22c071498ae62f28af5d1a" translate="yes" xml:space="preserve">
          <source>The comma operator is fully different from the comma within arrays, objects, and function arguments and parameters.</source>
          <target state="translated">쉼표 연산자는 배열, 객체 및 함수 인수 및 매개 변수 내에서 쉼표와 완전히 다릅니다.</target>
        </trans-unit>
        <trans-unit id="7fab18439a7793e4c9d265e0a1eb2b9a108df7ab" translate="yes" xml:space="preserve">
          <source>The completion value of evaluating the given code. If the completion value is empty, &lt;a href=&quot;undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">주어진 코드 평가의 완료 값입니다. 완료 값이 비어 있으면 &lt;a href=&quot;undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="0621346efbf3c869cb91624fd5861f953bb9a30a" translate="yes" xml:space="preserve">
          <source>The conditional operator returns one of two values based on the logical value of the condition.</source>
          <target state="translated">조건부 연산자는 조건의 논리 값을 기반으로 두 값 중 하나를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="fba8e0ecfce285b4bc6ff7ab720824ece9546a9f" translate="yes" xml:space="preserve">
          <source>The console will warn &quot;unreachable code after return statement&quot;.</source>
          <target state="translated">콘솔은 &quot;return statement 후에 연결할 수없는 코드&quot;를 경고합니다.</target>
        </trans-unit>
        <trans-unit id="6e123d397cc379ed5365e7a4deebd0d4e9c23f0d" translate="yes" xml:space="preserve">
          <source>The constant's name, which can be any legal &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/identifier&quot;&gt;identifier&lt;/a&gt;.</source>
          <target state="translated">상수의 이름으로, 유효한 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/identifier&quot;&gt;식별자&lt;/a&gt; 가 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0da19f405b29faa24595e62c88e9d6fc4e1d0aa7" translate="yes" xml:space="preserve">
          <source>The constant's value; this can be any legal &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions&quot;&gt;expression&lt;/a&gt;, including a function expression.</source>
          <target state="translated">상수 값; 이것은 함수 표현식을 포함한 모든 법적 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions&quot;&gt;표현식&lt;/a&gt; 이 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fb6c865a9918ebbc467c3613c73d166c77549f56" translate="yes" xml:space="preserve">
          <source>The constructor function &lt;em&gt;&lt;code&gt;Foo&lt;/code&gt;&lt;/em&gt; is called with the specified arguments, and with &lt;code&gt;&lt;a href=&quot;this&quot;&gt;this&lt;/a&gt;&lt;/code&gt; bound to the newly created object. &lt;code&gt;new &lt;em&gt;Foo&lt;/em&gt;&lt;/code&gt; is equivalent to &lt;code&gt;new &lt;/code&gt;&lt;em&gt;&lt;code&gt;Foo&lt;/code&gt;&lt;/em&gt;&lt;code&gt;()&lt;/code&gt;, i.e. if no argument list is specified, &lt;em&gt;&lt;code&gt;Foo&lt;/code&gt;&lt;/em&gt; is called without arguments.</source>
          <target state="translated">생성자 함수의 &lt;em&gt; &lt;code&gt;Foo&lt;/code&gt; &lt;/em&gt; 지정된 인수로 불러 함께 &lt;code&gt;&lt;a href=&quot;this&quot;&gt;this&lt;/a&gt;&lt;/code&gt; 새로 생성 된 개체에 바인딩. &lt;code&gt;new &lt;em&gt;Foo&lt;/em&gt;&lt;/code&gt; 는 &lt;code&gt;new &lt;/code&gt; &lt;em&gt; &lt;code&gt;Foo&lt;/code&gt; &lt;/em&gt; &lt;code&gt;()&lt;/code&gt; 와 동일합니다 . 즉, 인수 목록이 지정되지 않은 경우 &lt;em&gt; &lt;code&gt;Foo&lt;/code&gt; &lt;/em&gt; 는 인수없이 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="8a169aedbb3ba1ad7d6dfd37dd0fae85249dc777" translate="yes" xml:space="preserve">
          <source>The constructor function that is used to create derived objects.</source>
          <target state="translated">파생 객체를 만드는 데 사용되는 생성자 함수입니다.</target>
        </trans-unit>
        <trans-unit id="982b985b74049b6033e81bffd9464c5eb31a7a91" translate="yes" xml:space="preserve">
          <source>The constructor of the regular expression object, for example, &lt;code&gt;new RegExp('ab+c')&lt;/code&gt;, provides runtime compilation of the regular expression. Use the constructor function when you know the regular expression pattern will be changing, or you don't know the pattern and are getting it from another source, such as user input.</source>
          <target state="translated">정규식 객체의 생성자 &lt;code&gt;new RegExp('ab+c')&lt;/code&gt; 예 : new RegExp ( 'ab + c')) 는 정규식의 런타임 컴파일을 제공합니다. 정규식 패턴이 변경 될 것임을 알거나 패턴을 모르고 사용자 입력과 같은 다른 소스에서 가져 오는 경우 생성자 함수를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="416fbf4bb9cd00c0ca84cc3b37fc7b52c1bbf60f" translate="yes" xml:space="preserve">
          <source>The constructor that was originally called, &lt;code&gt;p&lt;/code&gt; above.</source>
          <target state="translated">원래 호출 된 생성자, 위의 &lt;code&gt;p&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5f0c8a18e529cda55e6b202394037a0f7a759263" translate="yes" xml:space="preserve">
          <source>The constructor whose prototype should be used. See also the &lt;code&gt;&lt;a href=&quot;../../operators/new.target&quot;&gt;new.target&lt;/a&gt;&lt;/code&gt; operator. If &lt;code&gt;newTarget&lt;/code&gt; is not present, it is &lt;code&gt;target&lt;/code&gt;.</source>
          <target state="translated">프로토 타입을 사용해야하는 생성자입니다. &lt;code&gt;&lt;a href=&quot;../../operators/new.target&quot;&gt;new.target&lt;/a&gt;&lt;/code&gt; 연산자 도 참조하십시오 . 경우 &lt;code&gt;newTarget&lt;/code&gt; 존재하지 않는, 그것은이다 &lt;code&gt;target&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="013d2f56a045b9e0a7a2b73d84c720cef68dd7ca" translate="yes" xml:space="preserve">
          <source>The correct function name is &lt;code&gt;getElementByI&lt;strong&gt;d&lt;/strong&gt;&lt;/code&gt;:</source>
          <target state="translated">올바른 함수 이름은 &lt;code&gt;getElementByI&lt;strong&gt;d&lt;/strong&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7de3945364d45317b571a832343df34f694f7d73" translate="yes" xml:space="preserve">
          <source>The cosine of the given number.</source>
          <target state="translated">주어진 숫자의 코사인.</target>
        </trans-unit>
        <trans-unit id="1c930f93fb8868cc6815569cb4309a14122dc34d" translate="yes" xml:space="preserve">
          <source>The cube root of the given number.</source>
          <target state="translated">주어진 숫자의 제곱근.</target>
        </trans-unit>
        <trans-unit id="c114c8f5d2e6f7f010683b95d33e20f9c1b64386" translate="yes" xml:space="preserve">
          <source>The curly brackets look correct at a first glance, but this code snippet is missing a &lt;code&gt;{&lt;/code&gt; after the first &lt;code&gt;if&lt;/code&gt; statement. Correct would be:</source>
          <target state="translated">중괄호는 언뜻보기에는 정확하지만이 코드 스 니펫 에는 첫 번째 &lt;code&gt;if&lt;/code&gt; 문 다음 에 &lt;code&gt;{&lt;/code&gt; 가 없습니다 . 올바른 것입니다 :</target>
        </trans-unit>
        <trans-unit id="5f5245cf8dfef36fe67c21f6ce9d68b1136ece88" translate="yes" xml:space="preserve">
          <source>The currency string, such as the symbols &quot;$&quot; and &quot;&amp;euro;&quot; or the name &quot;Dollar&quot;, &quot;Euro&quot; depending on how &lt;code&gt;currencyDisplay&lt;/code&gt; is specified.</source>
          <target state="translated">&lt;code&gt;currencyDisplay&lt;/code&gt; 가 지정 되는 방법에 따라 &quot;$&quot;및 &quot;&amp;euro;&quot;기호 또는 &quot;Dollar&quot;, &quot;Euro&quot;이름과 같은 통화 문자열 입니다.</target>
        </trans-unit>
        <trans-unit id="b19ba0bd00ac262399d753d908b7d49bd67d4d73" translate="yes" xml:space="preserve">
          <source>The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as &lt;code&gt;&quot;USD&quot;&lt;/code&gt; for the US dollar, &lt;code&gt;&quot;EUR&quot;&lt;/code&gt; for the euro, or &lt;code&gt;&quot;CNY&quot;&lt;/code&gt; for the Chinese RMB &amp;mdash; see the &lt;a href=&quot;http://www.currency-iso.org/en/home/tables/table-a1.html&quot;&gt;Current currency &amp;amp; funds code list&lt;/a&gt;. There is no default value; if the &lt;code&gt;style&lt;/code&gt; is &lt;code&gt;&quot;currency&quot;&lt;/code&gt;, the &lt;code&gt;currency&lt;/code&gt; property must be provided.</source>
          <target state="translated">통화 형식에 사용할 통화입니다. 가능한 값은 ISO 4217 통화 코드입니다 (예 : 미국 달러의 &lt;code&gt;&quot;USD&quot;&lt;/code&gt; , 유로의 경우 &lt;code&gt;&quot;EUR&quot;&lt;/code&gt; 또는 중국 인민폐의 경우 &lt;code&gt;&quot;CNY&quot;&lt;/code&gt; - &lt;a href=&quot;http://www.currency-iso.org/en/home/tables/table-a1.html&quot;&gt;현재 통화 및 자금 코드 목록 참조)&lt;/a&gt; . 기본값은 없습니다. 경우 &lt;code&gt;style&lt;/code&gt; 이다 &lt;code&gt;&quot;currency&quot;&lt;/code&gt; 의 &lt;code&gt;currency&lt;/code&gt; 속성을 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="5dc9e50d81823798a643f009d726e60aa602bf91" translate="yes" xml:space="preserve">
          <source>The current day of month will have an impact on the behaviour of this method. Conceptually it will add the number of days given by the current day of the month to the 1st day of the new month specified as the parameter, to return the new date. For example, if the current value is 31st August 2016, calling setMonth with a value of 1 will return 2nd March 2016. This is because in 2016 February had 29 days.</source>
          <target state="translated">현재 월은이 방법의 동작에 영향을 미칩니다. 개념적으로 현재 날짜로 지정된 일 수를 매개 변수로 지정된 새 달의 첫 번째 날에 더하여 새 날짜를 반환합니다. 예를 들어, 현재 값이 2016 년 8 월 31 일인 경우 값이 1 인 setMonth를 호출하면 2016 년 3 월 2 일이 반환됩니다. 이는 2016 년 2 월에 29 일이 있었기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="70d81a6aba37ff18bd5d8c2ff73ec50a431f3bde" translate="yes" xml:space="preserve">
          <source>The current element being processed in the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="524f1003256858d5c9cdfa90bf0c2de1c7abe3e7" translate="yes" xml:space="preserve">
          <source>The current element being processed in the typed array.</source>
          <target state="translated">형식화 된 배열에서 처리중인 현재 요소</target>
        </trans-unit>
        <trans-unit id="c60f4c692eb4dfbdfed4ca0839000a6e47bd0087" translate="yes" xml:space="preserve">
          <source>The data type &lt;strong&gt;symbol&lt;/strong&gt; is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Primitive&quot;&gt;primitive data type&lt;/a&gt;.</source>
          <target state="translated">데이터 유형 &lt;strong&gt;기호&lt;/strong&gt; 는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Primitive&quot;&gt;기본 데이터 유형&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="aa4fccd524441cf00caefa27a863039b3cf91544" translate="yes" xml:space="preserve">
          <source>The date and time formats can be customized using the &lt;code&gt;options&lt;/code&gt; argument:</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 인수를 사용하여 날짜 및 시간 형식을 사용자 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="666a0d44dc5f74d5cba4609d254e995f1bf62311" translate="yes" xml:space="preserve">
          <source>The date time string may be in a simplified &lt;a href=&quot;http://www.w3.org/TR/NOTE-datetime&quot;&gt;ISO 8601&lt;/a&gt; format. For example, &lt;code&gt;&quot;2011-10-10&quot;&lt;/code&gt; (just date) or &lt;code&gt;&quot;2011-10-10T14:48:00&quot;&lt;/code&gt; (date and time) can be passed and parsed. Where the string is ISO 8601 date only, the UTC time zone is used to interpret arguments. If the string is date and time in &lt;a href=&quot;http://www.w3.org/TR/NOTE-datetime&quot;&gt;ISO 8601&lt;/a&gt; format, it will be treated as local.</source>
          <target state="translated">날짜 시간 문자열은 단순화 된 &lt;a href=&quot;http://www.w3.org/TR/NOTE-datetime&quot;&gt;ISO 8601&lt;/a&gt; 형식 일 수 있습니다. 예를 들어 &lt;code&gt;&quot;2011-10-10&quot;&lt;/code&gt; (일자 만) 또는 &lt;code&gt;&quot;2011-10-10T14:48:00&quot;&lt;/code&gt; (날짜와 시간)를 전달하고 구문 분석 할 수 있습니다. 문자열이 ISO 8601 날짜 인 경우 UTC 시간대는 인수를 해석하는 데 사용됩니다. 문자열이 &lt;a href=&quot;http://www.w3.org/TR/NOTE-datetime&quot;&gt;ISO 8601&lt;/a&gt; 형식의 날짜 및 시간 인 경우 로컬로 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="d130d221e393af90c0ed6eeecc502bde90336a08" translate="yes" xml:space="preserve">
          <source>The date to format.</source>
          <target state="translated">형식화 할 날짜입니다.</target>
        </trans-unit>
        <trans-unit id="f108ef11ec4436baa6c0f00ae9e1b84307280093" translate="yes" xml:space="preserve">
          <source>The decimal separator string (&quot;.&quot;).</source>
          <target state="translated">소수점 구분자 문자열 ( &quot;.&quot;)입니다.</target>
        </trans-unit>
        <trans-unit id="910c3fbe938cfd9b387a32e9bc34f0a45b870d47" translate="yes" xml:space="preserve">
          <source>The decrement operator decrements (subtracts one from) its operand and returns a value.</source>
          <target state="translated">감소 연산자는 피연산자를 감소 (감소)하고 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="490855b400d057b93a21637883df08ab89c24f3f" translate="yes" xml:space="preserve">
          <source>The default argument is evaluated at call time, so unlike e.g. Python, a new object is created each time the function is called.</source>
          <target state="translated">기본 인수는 호출시 평가되므로 Python과 달리 함수가 호출 될 때마다 새 객체가 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="60352eea3410e84a3191b72431afaa8b6d3183fe" translate="yes" xml:space="preserve">
          <source>The default array properties that are excluded from &lt;code&gt;with&lt;/code&gt; bindings are: copyWithin, entries, fill, find, findIndex, includes, keys, and values.</source>
          <target state="translated">바인딩 &lt;code&gt;with&lt;/code&gt; 제외되는 기본 배열 속성은 copyWithin, 항목, 채우기, 찾기, findIndex, 포함, 키 및 값입니다.</target>
        </trans-unit>
        <trans-unit id="5d2e5c202585ddc67e01c8a15ad6c14853b1024b" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;&quot;variant&quot;&lt;/code&gt; for usage &lt;code&gt;&quot;sort&quot;&lt;/code&gt;; it's locale dependent for usage &lt;code&gt;&quot;search&quot;&lt;/code&gt;.</source>
          <target state="translated">기본값은 사용법 &lt;code&gt;&quot;sort&quot;&lt;/code&gt; 의 &lt;code&gt;&quot;variant&quot;&lt;/code&gt; 입니다 . &lt;code&gt;&quot;search&quot;&lt;/code&gt; 사용법에 따라 로케일이 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="575ea9e4c460d8bcd17e3b3e10695e0d5c392b70" translate="yes" xml:space="preserve">
          <source>The default line ending varies depending on the platform (Unix, Windows, etc.). The line splitting provided in this example works on all platforms.</source>
          <target state="translated">기본 줄 끝은 플랫폼 (Unix, Windows 등)에 따라 다릅니다. 이 예제에서 제공되는 회선 분할은 모든 플랫폼에서 작동합니다.</target>
        </trans-unit>
        <trans-unit id="51d5bc9828c9f3e697bdef77251371c861406400" translate="yes" xml:space="preserve">
          <source>The default value for each date-time component property is &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, but if the &lt;code&gt;hour&lt;/code&gt;, &lt;code&gt;minute&lt;/code&gt;, &lt;code&gt;second&lt;/code&gt; properties are all &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, then &lt;code&gt;hour&lt;/code&gt;, &lt;code&gt;minute&lt;/code&gt;, and &lt;code&gt;second&lt;/code&gt; are assumed to be &lt;code&gt;&quot;numeric&quot;&lt;/code&gt;.</source>
          <target state="translated">각 날짜-시간 구성 요소 속성의 기본값은 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 이지만 &lt;code&gt;hour&lt;/code&gt; , &lt;code&gt;minute&lt;/code&gt; , &lt;code&gt;second&lt;/code&gt; 속성이 모두 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 인 경우 &lt;code&gt;hour&lt;/code&gt; , &lt;code&gt;minute&lt;/code&gt; 및 &lt;code&gt;second&lt;/code&gt; 는 &lt;code&gt;&quot;numeric&quot;&lt;/code&gt; 로 간주됩니다 .</target>
        </trans-unit>
        <trans-unit id="4ddf17b02e4292879e3db354784c90cfc09a8e02" translate="yes" xml:space="preserve">
          <source>The default value for each date-time component property is &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, but if the &lt;code&gt;weekday&lt;/code&gt;, &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, &lt;code&gt;day&lt;/code&gt; properties are all &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, then &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, and &lt;code&gt;day&lt;/code&gt; are assumed to be &lt;code&gt;&quot;numeric&quot;&lt;/code&gt;.</source>
          <target state="translated">각 날짜-시간 구성 요소 속성의 기본값은 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 이지만 &lt;code&gt;weekday&lt;/code&gt; , &lt;code&gt;year&lt;/code&gt; , &lt;code&gt;month&lt;/code&gt; , &lt;code&gt;day&lt;/code&gt; 속성이 모두 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 경우 &lt;code&gt;year&lt;/code&gt; , &lt;code&gt;month&lt;/code&gt; 및 &lt;code&gt;day&lt;/code&gt; 은 &lt;code&gt;&quot;numeric&quot;&lt;/code&gt; 로 간주됩니다 .</target>
        </trans-unit>
        <trans-unit id="50ec5acd3f905b8f0cc746b02ed2067efd52b285" translate="yes" xml:space="preserve">
          <source>The default value for each date-time component property is &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, but if the &lt;code&gt;weekday&lt;/code&gt;, &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, &lt;code&gt;day&lt;/code&gt;, &lt;code&gt;hour&lt;/code&gt;, &lt;code&gt;minute&lt;/code&gt;, &lt;code&gt;second&lt;/code&gt; properties are all &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, then &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, &lt;code&gt;day&lt;/code&gt;, &lt;code&gt;hour&lt;/code&gt;, &lt;code&gt;minute&lt;/code&gt;, and &lt;code&gt;second&lt;/code&gt; are assumed to be &lt;code&gt;&quot;numeric&quot;&lt;/code&gt;.</source>
          <target state="translated">각 날짜-시간 구성 요소 특성의 기본값은 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 이지만 &lt;code&gt;weekday&lt;/code&gt; , &lt;code&gt;year&lt;/code&gt; , &lt;code&gt;month&lt;/code&gt; , &lt;code&gt;day&lt;/code&gt; , &lt;code&gt;hour&lt;/code&gt; , &lt;code&gt;minute&lt;/code&gt; , &lt;code&gt;second&lt;/code&gt; 특성이 모두 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 경우 &lt;code&gt;year&lt;/code&gt; , &lt;code&gt;month&lt;/code&gt; , &lt;code&gt;day&lt;/code&gt; , &lt;code&gt;hour&lt;/code&gt; , &lt;code&gt;minute&lt;/code&gt; 및 &lt;code&gt;second&lt;/code&gt; 는 &lt;code&gt;&quot;numeric&quot;&lt;/code&gt; 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="df60473a24d4fcd4ef04c265bb72340d1de6ef6c" translate="yes" xml:space="preserve">
          <source>The default value for each date-time component property is &lt;a href=&quot;undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, but if all component properties are &lt;a href=&quot;undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, then &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, and &lt;code&gt;day&lt;/code&gt; are assumed to be &lt;code&gt;&quot;numeric&quot;&lt;/code&gt;.</source>
          <target state="translated">각 날짜-시간 구성 요소 속성의 기본값은 &lt;a href=&quot;undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 않지만 모든 구성 요소 속성이 &lt;a href=&quot;undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 경우 &lt;code&gt;year&lt;/code&gt; , &lt;code&gt;month&lt;/code&gt; 및 &lt;code&gt;day&lt;/code&gt; &lt;code&gt;&quot;numeric&quot;&lt;/code&gt; 로 간주됩니다 .</target>
        </trans-unit>
        <trans-unit id="2b0122a05c7a89cab56eaaa6e72bda4166aef309" translate="yes" xml:space="preserve">
          <source>The deprecated &lt;code&gt;&lt;strong&gt;compile&lt;/strong&gt;&lt;/code&gt;&lt;code&gt;()&lt;/code&gt; method is used to (re-)compile a regular expression during execution of a script. It is basically the same as the &lt;code&gt;RegExp&lt;/code&gt; constructor.</source>
          <target state="translated">더 이상 사용되지 않는 &lt;code&gt;&lt;strong&gt;compile&lt;/strong&gt;&lt;/code&gt; &lt;code&gt;()&lt;/code&gt; 메소드는 스크립트를 실행하는 동안 정규 표현식을 (다시) 컴파일하는 데 사용됩니다. 기본적으로 &lt;code&gt;RegExp&lt;/code&gt; 생성자 와 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="1a6e3caec01441368ab687b0ffe79769141bf583" translate="yes" xml:space="preserve">
          <source>The depth level specifying how deep a nested array structure should be flattened. Defaults to 1.</source>
          <target state="translated">중첩 배열 구조가 얼마나 평평해야하는지 지정하는 심도 레벨입니다. 기본값은 1입니다.</target>
        </trans-unit>
        <trans-unit id="6a1ffc0dfd620e5610e05b3f9fb111a07803fd2a" translate="yes" xml:space="preserve">
          <source>The descriptor for the property being defined or modified.</source>
          <target state="translated">정의되거나 수정되는 속성에 대한 설명자입니다.</target>
        </trans-unit>
        <trans-unit id="d8912c766c52dc003027b1c9513ec42e96773a76" translate="yes" xml:space="preserve">
          <source>The destructuring assignment uses similar syntax, but on the left-hand side of the assignment to define what values to unpack from the sourced variable.</source>
          <target state="translated">소멸 할당은 유사한 구문을 사용하지만 할당의 왼쪽에서 소스 변수에서 압축을 풀 값을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="aa3175f58177aea6864d139aca99112779859078" translate="yes" xml:space="preserve">
          <source>The difference between &lt;code&gt;&lt;strong&gt;Array.of()&lt;/strong&gt;&lt;/code&gt; and the &lt;code&gt;&lt;strong&gt;Array&lt;/strong&gt;&lt;/code&gt; constructor is in the handling of integer arguments: &lt;code&gt;&lt;strong&gt;Array.of(7)&lt;/strong&gt;&lt;/code&gt; creates an array with a single element, &lt;code&gt;7&lt;/code&gt;, whereas &lt;code&gt;&lt;strong&gt;Array(7)&lt;/strong&gt;&lt;/code&gt; creates an empty array with a &lt;code&gt;length&lt;/code&gt; property of 7 (&lt;strong&gt;Note:&lt;/strong&gt; this implies an array of &lt;code&gt;7&lt;/code&gt; empty slots, not slots with actual &lt;code&gt;undefined&lt;/code&gt; values).</source>
          <target state="translated">차이 &lt;code&gt;&lt;strong&gt;Array.of()&lt;/strong&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;strong&gt;Array&lt;/strong&gt;&lt;/code&gt; 생성자 정수 인수를 처리이다 &lt;code&gt;&lt;strong&gt;Array.of(7)&lt;/strong&gt;&lt;/code&gt; 단일 소자로 배열 생성 &lt;code&gt;7&lt;/code&gt; 반면에, &lt;code&gt;&lt;strong&gt;Array(7)&lt;/strong&gt;&lt;/code&gt; A의 빈 배열 생성 &lt;code&gt;length&lt;/code&gt; 의 속성 7 ( &lt;strong&gt;참고 :&lt;/strong&gt; 이는 실제 &lt;code&gt;undefined&lt;/code&gt; 값이 있는 슬롯이 아닌 &lt;code&gt;7&lt;/code&gt; 개의 빈 슬롯 배열을 의미 합니다).</target>
        </trans-unit>
        <trans-unit id="3480a79be927bbb5f14ae973492e695c7b92b89e" translate="yes" xml:space="preserve">
          <source>The display name of the function.</source>
          <target state="translated">함수의 표시 이름입니다.</target>
        </trans-unit>
        <trans-unit id="bceca5f189abd8f44b0e66132ffed15f1fbbb42b" translate="yes" xml:space="preserve">
          <source>The division assignment operator &lt;strong&gt;divides&lt;/strong&gt; a variable by the value of the right operand and assigns the result to the variable. See the &lt;a href=&quot;arithmetic_operators#Division&quot;&gt;division operator&lt;/a&gt; for more details.</source>
          <target state="translated">나누기 할당 연산자 &lt;strong&gt;는&lt;/strong&gt; 변수를 오른쪽 피연산자 값으로 &lt;strong&gt;나누고&lt;/strong&gt; 결과를 변수에 할당합니다. 자세한 내용은 &lt;a href=&quot;arithmetic_operators#Division&quot;&gt;나누기 연산자&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="9f7cc1394d79a2c585ebb42aab308a2519ba5bda" translate="yes" xml:space="preserve">
          <source>The division operator produces the quotient of its operands where the left operand is the dividend and the right operand is the divisor.</source>
          <target state="translated">나누기 연산자는 왼쪽 피연산자가 피제수이고 오른쪽 피연산자가 제수 인 피연산자의 몫을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="702e5e606f58d4f03d2c9bb6f52b7860f6794ad9" translate="yes" xml:space="preserve">
          <source>The dot operator (&lt;code&gt;.&lt;/code&gt;) is used for &lt;a href=&quot;../operators/property_accessors&quot;&gt;property access&lt;/a&gt;. You will have to specify the name of the property that you want to access. For computed property access, you might need to change your property access from using a dot to using square brackets. These will allow you to compute an expression. Maybe you intended to do concatenation instead? A plus operator (&lt;code&gt;+&lt;/code&gt;) is needed in that case. Please see the examples below.</source>
          <target state="translated">도트 연산자 ( &lt;code&gt;.&lt;/code&gt; )는 &lt;a href=&quot;../operators/property_accessors&quot;&gt;속성 액세스에&lt;/a&gt; 사용됩니다 . 액세스하려는 속성의 이름을 지정해야합니다. 계산 된 속성 액세스의 경우 점을 사용하는 대괄호를 사용하여 속성 액세스를 변경해야 할 수 있습니다. 이를 통해 표현식을 계산할 수 있습니다. 어쩌면 당신은 대신 연결하려고 했습니까? 이 경우 더하기 연산자 ( &lt;code&gt;+&lt;/code&gt; )가 필요합니다. 아래 예를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="b463ff929e9917b779b4e606caf8f57bb7992205" translate="yes" xml:space="preserve">
          <source>The element associated with the specified key in the &lt;code&gt;WeakMap&lt;/code&gt; object. If the key can't be found, &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">&lt;code&gt;WeakMap&lt;/code&gt; 오브젝트 에서 지정된 키와 연관된 요소 입니다. 키를 찾을 수 없으면 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="c984bdef63710214dd443ae7be9a3a7a954b51b3" translate="yes" xml:space="preserve">
          <source>The element to search for.</source>
          <target state="translated">검색 할 요소입니다.</target>
        </trans-unit>
        <trans-unit id="61dfe96ca0e23c5dcafb50b3016bc202759318e2" translate="yes" xml:space="preserve">
          <source>The elements interval to fill is [&lt;code&gt;start&lt;/code&gt;, &lt;code&gt;end&lt;/code&gt;).</source>
          <target state="translated">채울 요소 간격은 [ &lt;code&gt;start&lt;/code&gt; , &lt;code&gt;end&lt;/code&gt; )입니다.</target>
        </trans-unit>
        <trans-unit id="6b2f71b15736679a743df6338568998902eadb28" translate="yes" xml:space="preserve">
          <source>The elements of the array are converted to strings using their &lt;code&gt;toLocaleString&lt;/code&gt; methods.</source>
          <target state="translated">배열의 요소는 &lt;code&gt;toLocaleString&lt;/code&gt; 메소드를 사용하여 문자열로 변환됩니다 .</target>
        </trans-unit>
        <trans-unit id="976857b63ffa0fa8b49868356a30331d1c7ead7f" translate="yes" xml:space="preserve">
          <source>The elements to add to the array, beginning at the &lt;code&gt;start&lt;/code&gt; index. If you don't specify any elements, &lt;code&gt;splice()&lt;/code&gt; will only remove elements from the array.</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; 색인 에서 시작하여 배열에 추가 할 요소 입니다. 요소를 지정하지 않으면 &lt;code&gt;splice()&lt;/code&gt; 는 배열에서 요소 만 제거합니다.</target>
        </trans-unit>
        <trans-unit id="1e3edd07e7b05dfcea108ea0bcdc3aa9e974a7a9" translate="yes" xml:space="preserve">
          <source>The elements to add to the end of the array.</source>
          <target state="translated">배열 끝에 추가 할 요소입니다.</target>
        </trans-unit>
        <trans-unit id="08d8d77140911a1a18dc3282b0bb04677e86f944" translate="yes" xml:space="preserve">
          <source>The elements to add to the front of the array.</source>
          <target state="translated">배열의 앞에 추가 할 요소입니다.</target>
        </trans-unit>
        <trans-unit id="964309413cb886b8ad9a40d1f14f5d85eb64b4e5" translate="yes" xml:space="preserve">
          <source>The empty statement is a semicolon (;) indicating that no statement will be executed, even if JavaScript syntax requires one. The opposite behavior, where you want multiple statements, but JavaScript only allows a single one, is possible using a&lt;a href=&quot;block&quot;&gt; block statement&lt;/a&gt;; it combines several statements into a single one.</source>
          <target state="translated">빈 명령문은 세미콜론 (;)이며 JavaScript 구문에서 요구하더라도 명령문이 실행되지 않음을 나타냅니다. 여러 명령문을 원하지만 JavaScript는 단일 명령문 만 허용하는 반대 동작은 &lt;a href=&quot;block&quot;&gt;블록 명령문을&lt;/a&gt; 사용하여 가능 합니다 . 여러 문장을 하나의 문장으로 결합합니다.</target>
        </trans-unit>
        <trans-unit id="1e66a9d24a75b87f328012bbcd3828a1b25f0042" translate="yes" xml:space="preserve">
          <source>The empty statement is sometimes used with loop statements. See the following example with an empty loop body:</source>
          <target state="translated">빈 명령문은 때때로 루프 명령문과 함께 사용됩니다. 빈 루프 본문이있는 다음 예를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="a5e729cba7ea56759d3b8069fa2efa9020b6cc62" translate="yes" xml:space="preserve">
          <source>The end of the generator function is reached; in this case, execution of the generator ends and an &lt;code&gt;IteratorResult&lt;/code&gt; is returned to the caller in which the &lt;code&gt;value&lt;/code&gt; is &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;done&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">발전기 기능의 끝에 도달했습니다. 이 경우, 발전기 단부의 실행 및 &lt;code&gt;IteratorResult&lt;/code&gt; 는 되는 호출자에게 리턴되는 &lt;code&gt;value&lt;/code&gt; 된다 &lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; 및 &lt;code&gt;done&lt;/code&gt; 인 &lt;code&gt;true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1fbca4f8f7dbe7cb1b69857d4c5fefd4afb8e501" translate="yes" xml:space="preserve">
          <source>The equality operator converts the operands if they are &lt;strong&gt;not of the same type&lt;/strong&gt;, then applies strict comparison. If &lt;strong&gt;both operands are objects&lt;/strong&gt;, then JavaScript compares internal references which are equal when operands refer to the same object in memory.</source>
          <target state="translated">항등 연산자는 피연산자 &lt;strong&gt;가 동일한 유형&lt;/strong&gt; 이 &lt;strong&gt;아닌&lt;/strong&gt; 경우 피연산자를 변환 한 다음 엄격한 비교를 적용합니다. 경우 &lt;strong&gt;피연산자가 모두 객체&lt;/strong&gt; 다음 스크립트 피연산자 메모리에 동일한 오브젝트를 참조 할 때 동일한 내부 참조를 비교한다.</target>
        </trans-unit>
        <trans-unit id="9e78bc7c4d863ae5f10706cc11d89d0d5f18cb90" translate="yes" xml:space="preserve">
          <source>The example below shows how to implement a self-archiving object. When &lt;code&gt;temperature&lt;/code&gt; property is set, the &lt;code&gt;archive&lt;/code&gt; array gets a log entry.</source>
          <target state="translated">아래 예는 자체 보관 객체를 구현하는 방법을 보여줍니다. 때 &lt;code&gt;temperature&lt;/code&gt; 속성이 설정되면, &lt;code&gt;archive&lt;/code&gt; 배열은 로그 항목을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="2faf576348d1b75c7c5750450ed07e4e5aa37c08" translate="yes" xml:space="preserve">
          <source>The example below shows how to set getter for a property. It doesn't specify a &lt;a href=&quot;../functions/set&quot;&gt;setter&lt;/a&gt;, so a &lt;code&gt;TypeError&lt;/code&gt; will be thrown upon trying to set the &lt;code&gt;temperature&lt;/code&gt; property to &lt;code&gt;30&lt;/code&gt;. For more details see also the &lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt; page.</source>
          <target state="translated">아래 예제는 속성에 대한 getter를 설정하는 방법을 보여줍니다. &lt;a href=&quot;../functions/set&quot;&gt;setter를&lt;/a&gt; 지정하지 않으므로 &lt;code&gt;temperature&lt;/code&gt; 속성을 &lt;code&gt;30&lt;/code&gt; 으로 설정하려고 하면 &lt;code&gt;TypeError&lt;/code&gt; 가 발생합니다 . 자세한 내용은 &lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt; 페이지도 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="a543c742aa81833c02ea279d11b67484a1b79a93" translate="yes" xml:space="preserve">
          <source>The examples below are throwing strings. This is considered bad practice. Always throw an instance of &lt;a href=&quot;../error&quot;&gt;Error&lt;/a&gt;. Otherwise the part doing the catching would have to make checks to see if the argument was a string or an error, and you might lose valuable information like stack traces</source>
          <target state="translated">아래 예제는 문자열을 던지는 것입니다. 이것은 나쁜 습관으로 간주됩니다. 항상 &lt;a href=&quot;../error&quot;&gt;Error&lt;/a&gt; 인스턴스를 던지십시오 . 그렇지 않으면 catch를 수행하는 부분이 인수가 문자열인지 오류인지 확인해야하며 스택 추적과 같은 중요한 정보가 손실 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bb1bcdbffff91b9c3ff449f3a1db34d1c49b45ab" translate="yes" xml:space="preserve">
          <source>The exception identifier</source>
          <target state="translated">예외 식별자</target>
        </trans-unit>
        <trans-unit id="ce80bced1d577c0ec07cff7172c9496c59661560" translate="yes" xml:space="preserve">
          <source>The exception to throw. For debugging purposes, it is useful to make it an &lt;code&gt;instanceof&lt;/code&gt;&lt;a href=&quot;../error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">던질 예외입니다. 디버깅을 위해 &lt;code&gt;instanceof&lt;/code&gt; &lt;a href=&quot;../error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; of&lt;/a&gt; 로 만드는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="54ac630246e15feb3e415b9e4a0af2998597121e" translate="yes" xml:space="preserve">
          <source>The expected value to test .</source>
          <target state="translated">테스트 할 예상 값입니다.</target>
        </trans-unit>
        <trans-unit id="2746092c21a3490e05af5310de9a2a714ec48b94" translate="yes" xml:space="preserve">
          <source>The experimental pipeline operator &lt;code&gt;|&amp;gt;&lt;/code&gt; (currently at stage 1) allows the creation of chained function calls in a readable manner. Basically, the pipeline operator provides syntactic sugar on a function call with a single argument allowing you to write</source>
          <target state="translated">실험적인 파이프 라인 연산자 &lt;code&gt;|&amp;gt;&lt;/code&gt; (현재 1 단계)는 읽을 수있는 방식으로 체인 함수 호출을 작성할 수 있습니다. 기본적으로 파이프 라인 연산자는 함수 호출에서 구문 인수를 제공하여 단일 인수로 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8f1e08828c1c1c64a2e274d4ee8e4d2a3195e57a" translate="yes" xml:space="preserve">
          <source>The exponent used to raise the &lt;code&gt;base&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;base&lt;/code&gt; 을 올리는 데 사용 된 지수 .</target>
        </trans-unit>
        <trans-unit id="ec4a21ddf5867a520cbd03423b51cdda85a33100" translate="yes" xml:space="preserve">
          <source>The exponentiation assignment operator evaluates to the result of raising first operand to the &lt;strong&gt;power&lt;/strong&gt; second operand. See the &lt;a href=&quot;arithmetic_operators#Exponentiation&quot;&gt;exponentiation operator&lt;/a&gt; for more details.</source>
          <target state="translated">받는 제 피연산자를 상승시키는 결과로 멱승 할당 연산자 평가하여 &lt;strong&gt;전력&lt;/strong&gt; 번째 오퍼랜드. 자세한 내용은 &lt;a href=&quot;arithmetic_operators#Exponentiation&quot;&gt;지수 연산자&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="a4176a32312ff185a693c46e64c016529338241a" translate="yes" xml:space="preserve">
          <source>The exponentiation operator returns the result of raising first operand to the power second operand. that is, &lt;code&gt;var1&lt;/code&gt;&lt;sup&gt;&lt;code&gt;var2&lt;/code&gt;&lt;/sup&gt;, in the preceding statement, where &lt;code&gt;var1&lt;/code&gt; and &lt;code&gt;var2&lt;/code&gt; are variables. Exponentiation operator is right associative. &lt;code&gt;a ** b ** c&lt;/code&gt; is equal to &lt;code&gt;a ** (b ** c)&lt;/code&gt;.</source>
          <target state="translated">지수 연산자는 첫 번째 피연산자를 power second 피연산자로 올린 결과를 반환합니다. 즉, &lt;code&gt;var1&lt;/code&gt; &lt;sup&gt; &lt;code&gt;var2&lt;/code&gt; &lt;/sup&gt; , 앞의 문에서 &lt;code&gt;var1&lt;/code&gt; 및 &lt;code&gt;var2&lt;/code&gt; 변수입니다. 지수 연산자는 올바른 연관입니다. &lt;code&gt;a ** b ** c&lt;/code&gt; 는 &lt;code&gt;a ** (b ** c)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d0ff10bc03a45ce0e9291e3e6951c8f6cb0e9efe" translate="yes" xml:space="preserve">
          <source>The expression after the &lt;code&gt;yield&lt;/code&gt; keyword is optional and omitting it no longer throws a &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt;: &lt;code&gt;function* countAppleSales() { yield; }&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;yield&lt;/code&gt; 키워드 뒤의 표현식 은 선택 사항이며 생략하면 더 이상 &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt; 가 발생하지 않습니다 . &lt;code&gt;function* countAppleSales() { yield; }&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6688448e60de73657152c36c5e46b89ebe52ab99" translate="yes" xml:space="preserve">
          <source>The expression closure syntax is a shorthand for writing simple function.</source>
          <target state="translated">표현식 클로저 구문은 간단한 함수를 작성하기위한 축약 형입니다.</target>
        </trans-unit>
        <trans-unit id="96688ce440f140a42b107e921ec490d12daf7cab" translate="yes" xml:space="preserve">
          <source>The expression to throw.</source>
          <target state="translated">던질 표현.</target>
        </trans-unit>
        <trans-unit id="520c80691ea2d4a4e974359ab8a8851d7f401d54" translate="yes" xml:space="preserve">
          <source>The expression which returns an iterable object.</source>
          <target state="translated">반복 가능한 객체를 반환하는 표현식입니다.</target>
        </trans-unit>
        <trans-unit id="a8bb2c9604319c8bb786e0cb1b99192e83f0a82e" translate="yes" xml:space="preserve">
          <source>The expression whose value is to be returned. If omitted, &lt;code&gt;undefined&lt;/code&gt; is returned instead.</source>
          <target state="translated">값을 반환 할 식입니다. 생략하면 &lt;code&gt;undefined&lt;/code&gt; 가 대신 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="6faf3645812e98e818a8b880cea16c9a0cd2b180" translate="yes" xml:space="preserve">
          <source>The first example creates a class called &lt;code&gt;Square&lt;/code&gt; from a class called &lt;code&gt;Polygon&lt;/code&gt;. This example is extracted from this &lt;a href=&quot;https://googlechrome.github.io/samples/classes-es6/index.html&quot;&gt;live demo&lt;/a&gt;&lt;a href=&quot;https://github.com/GoogleChrome/samples/blob/gh-pages/classes-es6/index.html&quot;&gt;(source)&lt;/a&gt;.</source>
          <target state="translated">첫 번째 예 는 &lt;code&gt;Polygon&lt;/code&gt; 이라는 클래스에서 &lt;code&gt;Square&lt;/code&gt; 라는 클래스를 만듭니다 . 이 예제는이 &lt;a href=&quot;https://googlechrome.github.io/samples/classes-es6/index.html&quot;&gt;라이브 데모 &lt;/a&gt;&lt;a href=&quot;https://github.com/GoogleChrome/samples/blob/gh-pages/classes-es6/index.html&quot;&gt;(source)&lt;/a&gt; 에서 추출되었습니다 .</target>
        </trans-unit>
        <trans-unit id="6023d482470ad1c2cdb57b2bfef6b50e5f030b1f" translate="yes" xml:space="preserve">
          <source>The first index of the element in the array; &lt;strong&gt;-1&lt;/strong&gt; if not found.</source>
          <target state="translated">배열에서 요소의 첫 번째 색인. 찾을 수 없으면 &lt;strong&gt;-1&lt;/strong&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="5f839bd6e11cf838ef3faf30d60b9b58c1b93524" translate="yes" xml:space="preserve">
          <source>The first time the callback is called, &lt;code&gt;accumulator&lt;/code&gt; and &lt;code&gt;currentValue&lt;/code&gt; can be one of two values. If &lt;code&gt;initialValue&lt;/code&gt; is provided in the call to &lt;code&gt;reduce()&lt;/code&gt;, then &lt;code&gt;accumulator&lt;/code&gt; will be equal to &lt;code&gt;initialValue&lt;/code&gt;, and &lt;code&gt;currentValue&lt;/code&gt; will be equal to the first value in the array. If no &lt;code&gt;initialValue&lt;/code&gt; is provided, then &lt;code&gt;accumulator&lt;/code&gt; will be equal to the first value in the array, and &lt;code&gt;currentValue&lt;/code&gt; will be equal to the second.</source>
          <target state="translated">콜백이 처음 호출 될 때 &lt;code&gt;accumulator&lt;/code&gt; 와 &lt;code&gt;currentValue&lt;/code&gt; 는 두 값 중 하나 일 수 있습니다. 경우 &lt;code&gt;initialValue&lt;/code&gt; 위해 호에 제공된다 &lt;code&gt;reduce()&lt;/code&gt; 하고 &lt;code&gt;accumulator&lt;/code&gt; 동일 할 것이다 &lt;code&gt;initialValue&lt;/code&gt; 및 &lt;code&gt;currentValue&lt;/code&gt; 배열에서 첫 번째 값과 동일 할 것이다. &lt;code&gt;initialValue&lt;/code&gt; 가 제공 되지 않으면 &lt;code&gt;accumulator&lt;/code&gt; &lt;code&gt;currentValue&lt;/code&gt; 배열의 첫 번째 값 과 같고 currentValue 는 두 번째와 같습니다.</target>
        </trans-unit>
        <trans-unit id="b780c1625556bb97e02bb2df7f774177e170222b" translate="yes" xml:space="preserve">
          <source>The first time the callback is called, &lt;code&gt;previousValue&lt;/code&gt; and &lt;code&gt;currentValue&lt;/code&gt; can be one of two values. If &lt;code&gt;initialValue&lt;/code&gt; is provided in the call to &lt;code&gt;reduce&lt;/code&gt;, then &lt;code&gt;previousValue&lt;/code&gt; will be equal to &lt;code&gt;initialValue&lt;/code&gt; and &lt;code&gt;currentValue&lt;/code&gt; will be equal to the first value in the typed array. If no &lt;code&gt;initialValue&lt;/code&gt; was provided, then &lt;code&gt;previousValue&lt;/code&gt; will be equal to the first value in the typed array and &lt;code&gt;currentValue&lt;/code&gt; will be equal to the second.</source>
          <target state="translated">콜백이 처음 호출 될 때 &lt;code&gt;previousValue&lt;/code&gt; 및 &lt;code&gt;currentValue&lt;/code&gt; 는 두 값 중 하나 일 수 있습니다. 경우 &lt;code&gt;initialValue&lt;/code&gt; 에 대한 호출 구비 &lt;code&gt;reduce&lt;/code&gt; 하고 &lt;code&gt;previousValue&lt;/code&gt; 동일 할 것이다 &lt;code&gt;initialValue&lt;/code&gt; 및 &lt;code&gt;currentValue&lt;/code&gt; 입력 된 배열에서 첫 번째 값과 동일 할 것이다. &lt;code&gt;initialValue&lt;/code&gt; 가 제공 되지 않은 경우 &lt;code&gt;previousValue&lt;/code&gt; 는 유형이 지정된 배열의 첫 번째 값 과 같고 &lt;code&gt;currentValue&lt;/code&gt; 는 두 번째와 같습니다.</target>
        </trans-unit>
        <trans-unit id="70ea80c0a2f8772cd47bde2d54d604e56483dbc4" translate="yes" xml:space="preserve">
          <source>The first time the function is called, the &lt;code&gt;accumulator&lt;/code&gt; and &lt;code&gt;currentValue&lt;/code&gt; can be one of two values. If an &lt;code&gt;initialValue&lt;/code&gt; was provided in the call to &lt;code&gt;reduceRight&lt;/code&gt;, then &lt;code&gt;accumulator&lt;/code&gt; will be equal to &lt;code&gt;initialValue&lt;/code&gt; and &lt;code&gt;currentValue&lt;/code&gt; will be equal to the last value in the array. If no &lt;code&gt;initialValue&lt;/code&gt; was provided, then &lt;code&gt;accumulator&lt;/code&gt; will be equal to the last value in the array and &lt;code&gt;currentValue&lt;/code&gt; will be equal to the second-to-last value.</source>
          <target state="translated">함수가 처음 호출 될 때 &lt;code&gt;accumulator&lt;/code&gt; 와 &lt;code&gt;currentValue&lt;/code&gt; 는 두 값 중 하나 일 수 있습니다. 는 IF &lt;code&gt;initialValue&lt;/code&gt; 호출에 제공된 &lt;code&gt;reduceRight&lt;/code&gt; 다음 &lt;code&gt;accumulator&lt;/code&gt; 와 동일 할 것이다 &lt;code&gt;initialValue&lt;/code&gt; 및 &lt;code&gt;currentValue&lt;/code&gt; 배열의 마지막 값과 동일 할 것이다. &lt;code&gt;initialValue&lt;/code&gt; 가 제공 되지 않은 경우 &lt;code&gt;accumulator&lt;/code&gt; 는 배열의 마지막 값 과 같고 &lt;code&gt;currentValue&lt;/code&gt; 는 두 번째에서 마지막 값과 같습니다.</target>
        </trans-unit>
        <trans-unit id="fcd4413a46ca7b4a40f9a396ef6da68bf067bd4c" translate="yes" xml:space="preserve">
          <source>The first time the function is called, the &lt;code&gt;previousValue&lt;/code&gt; and &lt;code&gt;currentValue&lt;/code&gt; can be one of two values. If an &lt;code&gt;initialValue&lt;/code&gt; was provided in the call to &lt;code&gt;reduceRight&lt;/code&gt;, then &lt;code&gt;previousValue&lt;/code&gt; will be equal to &lt;code&gt;initialValue&lt;/code&gt; and &lt;code&gt;currentValue&lt;/code&gt; will be equal to the last value in the typed array. If no &lt;code&gt;initialValue&lt;/code&gt; was provided, then &lt;code&gt;previousValue&lt;/code&gt; will be equal to the last value in the typed array and &lt;code&gt;currentValue&lt;/code&gt; will be equal to the second-to-last value.</source>
          <target state="translated">함수가 처음 호출 될 때 &lt;code&gt;previousValue&lt;/code&gt; 및 &lt;code&gt;currentValue&lt;/code&gt; 는 두 값 중 하나 일 수 있습니다. 는 IF &lt;code&gt;initialValue&lt;/code&gt; 호출에 제공된 &lt;code&gt;reduceRight&lt;/code&gt; 다음 &lt;code&gt;previousValue&lt;/code&gt; 동일 할 것이다 &lt;code&gt;initialValue&lt;/code&gt; 및 &lt;code&gt;currentValue&lt;/code&gt; 입력 된 배열의 마지막 값과 동일 할 것이다. &lt;code&gt;initialValue&lt;/code&gt; 가 제공 되지 않은 경우 &lt;code&gt;previousValue&lt;/code&gt; 는 유형이 지정된 배열의 마지막 값 과 같고 &lt;code&gt;currentValue&lt;/code&gt; 는 두 번째에서 마지막 값과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e3e25923e75e57fe4c8cd666578c83d081cde684" translate="yes" xml:space="preserve">
          <source>The first value to compare.</source>
          <target state="translated">비교할 첫 번째 값입니다.</target>
        </trans-unit>
        <trans-unit id="9b15ba4c6a8fb0f073e1bccafbc57018dbc9e83f" translate="yes" xml:space="preserve">
          <source>The first way is the &lt;code&gt;//&lt;/code&gt; comment; this makes all text following it on the same line into a comment. For example:</source>
          <target state="translated">첫 번째 방법은 &lt;code&gt;//&lt;/code&gt; 주석입니다. 이것은 같은 줄에있는 모든 텍스트를 주석으로 만듭니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9eb49b60e3be5a52747d92e8a22a6d16279f2fe8" translate="yes" xml:space="preserve">
          <source>The fixed version:</source>
          <target state="translated">고정 버전 :</target>
        </trans-unit>
        <trans-unit id="c8c39436f5730eb348e872deaf1fa667ab721807" translate="yes" xml:space="preserve">
          <source>The flat method removes empty slots in arrays:</source>
          <target state="translated">flat 메소드는 배열에서 빈 슬롯을 제거합니다.</target>
        </trans-unit>
        <trans-unit id="6b0d4d52f56cccbfbab6df299402dd57a39fb92c" translate="yes" xml:space="preserve">
          <source>The following (contrived) example updates an object's properties from each entry in the array:</source>
          <target state="translated">다음 (고려 된) 예제는 배열의 각 항목에서 객체의 속성을 업데이트합니다.</target>
        </trans-unit>
        <trans-unit id="637b63e14680d42936462840375bb75b4e4b3acf" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;for&lt;/code&gt; cycle calculates the offset position of a node in the &lt;em&gt;[final-expression]&lt;/em&gt; section, and therefore it does not require the use of a &lt;code&gt;statement&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;block&quot;&gt;block&lt;/a&gt; statement&lt;/code&gt; section, a semicolon is used instead.</source>
          <target state="translated">다음 &lt;code&gt;for&lt;/code&gt; 사이클은의 노드의 오프셋 위치를 산출 &lt;em&gt;[최종 식]&lt;/em&gt; 부, 따라서 그것은 사용이 필요하지 않으며 &lt;code&gt;statement&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;block&quot;&gt;block&lt;/a&gt; statement&lt;/code&gt; 세미콜론 대신 사용되는 섹션.</target>
        </trans-unit>
        <trans-unit id="60d614556ee4f8fb1680ea3ab2ac38d5027c5e26" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;for&lt;/code&gt; statement starts by declaring the variable &lt;code&gt;i&lt;/code&gt; and initializing it to &lt;code&gt;0&lt;/code&gt;. It checks that &lt;code&gt;i&lt;/code&gt; is less than nine, performs the two succeeding statements, and increments &lt;code&gt;i&lt;/code&gt; by 1 after each pass through the loop.</source>
          <target state="translated">다음 &lt;code&gt;for&lt;/code&gt; 문은 변수 &lt;code&gt;i&lt;/code&gt; 를 선언하고 &lt;code&gt;0&lt;/code&gt; 으로 초기화 하여 시작합니다 . &lt;code&gt;i&lt;/code&gt; 가 9보다 작은 지 확인 하고 두 개의 후속 명령문을 수행 하며 루프를 통과 할 때마다 &lt;code&gt;i&lt;/code&gt; 를 1 씩 증가시킵니다 .</target>
        </trans-unit>
        <trans-unit id="c13b20cee0f661617bd8015d0c1f583881d10e96" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;while&lt;/code&gt; loop iterates as long as &lt;code&gt;n&lt;/code&gt; is less than three.</source>
          <target state="translated">다음 &lt;code&gt;while&lt;/code&gt; 루프는 &lt;code&gt;n&lt;/code&gt; 이 3보다 작 으면 반복됩니다 .</target>
        </trans-unit>
        <trans-unit id="bd682eef69193f4fdb44336fd479f91bb7ada667" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;with&lt;/code&gt; statement specifies that the &lt;a href=&quot;../global_objects/math&quot;&gt;&lt;code&gt;Math&lt;/code&gt;&lt;/a&gt; object is the default object. The statements following the &lt;code&gt;with&lt;/code&gt; statement refer to the &lt;a href=&quot;../global_objects/math/pi&quot;&gt;&lt;code&gt;PI&lt;/code&gt;&lt;/a&gt; property and the &lt;a href=&quot;../global_objects/math/cos&quot;&gt;&lt;code&gt;cos&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../global_objects/math/sin&quot;&gt;&lt;code&gt;sin&lt;/code&gt;&lt;/a&gt; methods, without specifying an object. JavaScript assumes the &lt;code&gt;Math&lt;/code&gt; object for these references.</source>
          <target state="translated">다음 &lt;code&gt;with&lt;/code&gt; 문은 &lt;a href=&quot;../global_objects/math&quot;&gt; &lt;code&gt;Math&lt;/code&gt; &lt;/a&gt; 객체가 기본 객체 임을 지정 합니다. &lt;code&gt;with&lt;/code&gt; 문 다음에 나오는 문은 개체를 지정하지 않고 &lt;a href=&quot;../global_objects/math/pi&quot;&gt; &lt;code&gt;PI&lt;/code&gt; &lt;/a&gt; 속성과 &lt;a href=&quot;../global_objects/math/cos&quot;&gt; &lt;code&gt;cos&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../global_objects/math/sin&quot;&gt; &lt;code&gt;sin&lt;/code&gt; &lt;/a&gt; 메서드를 나타냅니다. JavaScript는 이러한 참조에 대해 &lt;code&gt;Math&lt;/code&gt; 객체를 가정합니다 .</target>
        </trans-unit>
        <trans-unit id="5b9e90596ec38fff87485beade9e5f8deb49143a" translate="yes" xml:space="preserve">
          <source>The following are only reserved when they are found in module code:</source>
          <target state="translated">다음은 모듈 코드에서 발견 될 때만 예약됩니다.</target>
        </trans-unit>
        <trans-unit id="c0c352e275f96b24c86f4d19b3dc013b58dfed6e" translate="yes" xml:space="preserve">
          <source>The following are only reserved when they are found in strict mode code:</source>
          <target state="translated">다음은 엄격 모드 코드에서 발견 된 경우에만 예약됩니다.</target>
        </trans-unit>
        <trans-unit id="94a1f4c078dadf907ee9c9a9ba75dd45389036ba" translate="yes" xml:space="preserve">
          <source>The following are reserved as future keywords by older ECMAScript specifications (ECMAScript 1 till 3).</source>
          <target state="translated">다음은 이전 ECMAScript 사양 (ECMAScript 1 ~ 3)에서 향후 키워드로 예약되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="14042eda201db9dbf94f4c7e43f79039471fa58d" translate="yes" xml:space="preserve">
          <source>The following are reserved as future keywords by the ECMAScript specification. They have no special functionality at present, but they might at some future time, so they cannot be used as identifiers.</source>
          <target state="translated">다음은 ECMAScript 사양에서 향후 키워드로 예약되어 있습니다. 현재 특수한 기능은 없지만 나중에는 기능이 없어서 식별자로 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="a4e1da54087efaf8adb80147425713d13e38e3f4" translate="yes" xml:space="preserve">
          <source>The following assigns the &lt;code&gt;toString()&lt;/code&gt; value of a &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object to &lt;code&gt;myVar&lt;/code&gt;:</source>
          <target state="translated">다음 은 &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체 의 &lt;code&gt;toString()&lt;/code&gt; 값 을 &lt;code&gt;myVar&lt;/code&gt; 에 할당합니다 .</target>
        </trans-unit>
        <trans-unit id="c08ac54043b648876203b3e3803e638644ac0bbc" translate="yes" xml:space="preserve">
          <source>The following code also uses &lt;code&gt;break&lt;/code&gt; statements with labeled blocks but generates a Syntax Error because its &lt;code&gt;break&lt;/code&gt; statement is within &lt;code&gt;block_1&lt;/code&gt; but references &lt;code&gt;block_2&lt;/code&gt;. A &lt;code&gt;break&lt;/code&gt; statement must always be nested within any label it references.</source>
          <target state="translated">다음 코드는 레이블이 지정된 블록이있는 &lt;code&gt;break&lt;/code&gt; 문도 사용 하지만 &lt;code&gt;break&lt;/code&gt; 문이 &lt;code&gt;block_1&lt;/code&gt; 내에 있지만 &lt;code&gt;block_2&lt;/code&gt; 를 참조 하므로 구문 오류가 발생합니다 . &lt;code&gt;break&lt;/code&gt; 문은 항상 참조하는 라벨 중첩해야합니다.</target>
        </trans-unit>
        <trans-unit id="bc61c85b553d7e6d7463201fbcc2c38c73015b80" translate="yes" xml:space="preserve">
          <source>The following code concatenates nested arrays and demonstrates retention of references:</source>
          <target state="translated">다음 코드는 중첩 배열을 연결하고 참조 보존을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="721189f7a2b285c23287b114247606fc04335c83" translate="yes" xml:space="preserve">
          <source>The following code concatenates three arrays:</source>
          <target state="translated">다음 코드는 3 개의 배열을 연결합니다.</target>
        </trans-unit>
        <trans-unit id="88e4d6b9479b0ed44364219826710b43fc799fde" translate="yes" xml:space="preserve">
          <source>The following code concatenates three values to an array:</source>
          <target state="translated">다음 코드는 세 개의 값을 배열로 연결합니다.</target>
        </trans-unit>
        <trans-unit id="d88678328d1fce2a8f610a73f6b66390f32726cb" translate="yes" xml:space="preserve">
          <source>The following code concatenates two arrays:</source>
          <target state="translated">다음 코드는 두 배열을 연결합니다.</target>
        </trans-unit>
        <trans-unit id="110cf46adcf71aba1fd2a9d72394b04b71419aa9" translate="yes" xml:space="preserve">
          <source>The following code creates a &lt;code&gt;Function&lt;/code&gt; object that takes two arguments.</source>
          <target state="translated">다음 코드 는 두 개의 인수를 취하는 &lt;code&gt;Function&lt;/code&gt; 객체를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="a9849a78b721a404fa7122bbef9cb4e417ecb54b" translate="yes" xml:space="preserve">
          <source>The following code creates a copy of a given object. There are different ways to create a copy of an object; the following is just one way and is presented to explain how &lt;code&gt;Array.prototype.forEach()&lt;/code&gt; works by using ECMAScript 5 &lt;code&gt;Object.*&lt;/code&gt; meta property functions.</source>
          <target state="translated">다음 코드는 주어진 객체의 복사본을 만듭니다. 객체의 복사본을 만드는 방법은 여러 가지가 있습니다. 다음은 한 가지 방법 일 뿐이며 ECMAScript 5 &lt;code&gt;Object.*&lt;/code&gt; 메타 속성 함수 를 사용하여 &lt;code&gt;Array.prototype.forEach()&lt;/code&gt; 작동 방식을 설명하기 위해 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="71484bb1315e7ead24501719aa5731a2deb6cc7d" translate="yes" xml:space="preserve">
          <source>The following code creates an object type &lt;code&gt;Car&lt;/code&gt; and an instance of that object type, &lt;code&gt;mycar&lt;/code&gt;. The &lt;code&gt;instanceof&lt;/code&gt; operator demonstrates that the &lt;code&gt;mycar&lt;/code&gt; object is of type &lt;code&gt;Car&lt;/code&gt; and of type &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="translated">다음 코드는 객체 유형 &lt;code&gt;Car&lt;/code&gt; 및 해당 객체 유형의 인스턴스 &lt;code&gt;mycar&lt;/code&gt; 를 만듭니다. &lt;code&gt;instanceof&lt;/code&gt; 를 연산자는 것을 보여줍니다 &lt;code&gt;mycar&lt;/code&gt; 객체 타입 인 &lt;code&gt;Car&lt;/code&gt; 와 유형의 &lt;code&gt;Object&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="22f1f0dc224fbf380d776e34e3dd118d0155b6b5" translate="yes" xml:space="preserve">
          <source>The following code creates and assigns &lt;code&gt;dogToString()&lt;/code&gt; to override the default &lt;code&gt;toString()&lt;/code&gt; method. This function generates a string containing the name, breed, color, and sex of the object, in the form &quot;&lt;code&gt;property = value;&lt;/code&gt;&quot;.</source>
          <target state="translated">다음 코드는 &lt;code&gt;dogToString()&lt;/code&gt; 을 만들고 할당 하여 기본 &lt;code&gt;toString()&lt;/code&gt; 메서드 를 재정의합니다 . 이 함수는 객체의 이름, 유형, 색상 및 성별을 포함하는 문자열을 &quot; &lt;code&gt;property = value;&lt;/code&gt; &quot;형식으로 생성합니다.</target>
        </trans-unit>
        <trans-unit id="f9ae4575b00eb655fe2bc58c8c2ed78bc0bf00a2" translate="yes" xml:space="preserve">
          <source>The following code creates the &lt;code&gt;myFish&lt;/code&gt; array containing four elements, then removes its last element.</source>
          <target state="translated">다음 코드는 4 개의 요소를 포함 하는 &lt;code&gt;myFish&lt;/code&gt; 배열을 만든 다음 마지막 요소를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="8ee25846ad2f6848444fd67100bb8495aeb28612" translate="yes" xml:space="preserve">
          <source>The following code creates the &lt;code&gt;sports&lt;/code&gt; array containing two elements, then appends two elements to it. The &lt;code&gt;total&lt;/code&gt; variable contains the new length of the array.</source>
          <target state="translated">다음 코드 는 두 개의 요소를 포함 하는 &lt;code&gt;sports&lt;/code&gt; 배열을 만든 다음 두 개의 요소를 추가합니다. &lt;code&gt;total&lt;/code&gt; 변수 어레이의 새로운 길이를 포함한다.</target>
        </trans-unit>
        <trans-unit id="5413c9f47f7525067295e645eb7a51acc99bc3ba" translate="yes" xml:space="preserve">
          <source>The following code declares a function that returns the total amount of sales, when given the number of units sold of products &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, and &lt;code&gt;c&lt;/code&gt;.</source>
          <target state="translated">다음 코드는 제품 &lt;code&gt;a&lt;/code&gt; , &lt;code&gt;b&lt;/code&gt; 및 &lt;code&gt;c&lt;/code&gt; 의 판매 단위 수를 고려할 때 총 판매량을 반환하는 함수를 선언합니다 .</target>
        </trans-unit>
        <trans-unit id="6ac5f417776932fa98a727d7e5e02064aafd61d7" translate="yes" xml:space="preserve">
          <source>The following code defines the &lt;code&gt;Dog&lt;/code&gt; object type and creates &lt;code&gt;theDog&lt;/code&gt;, an object of type &lt;code&gt;Dog&lt;/code&gt;:</source>
          <target state="translated">다음 코드는 정의 &lt;code&gt;Dog&lt;/code&gt; 개체 유형과 생성 &lt;code&gt;theDog&lt;/code&gt; , 형식의 개체 &lt;code&gt;Dog&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="bfb04ee46c737543b1cf531796942fcab6e602ea" translate="yes" xml:space="preserve">
          <source>The following code displays the &lt;code&gt;myFish&lt;/code&gt; array before and after removing its first element. It also displays the removed element:</source>
          <target state="translated">다음 코드는 첫 번째 요소를 제거하기 전후에 &lt;code&gt;myFish&lt;/code&gt; 배열을 표시합니다 . 또한 제거 된 요소를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="ffdac7d52063387499a1184a4731dd0d49cf9966" translate="yes" xml:space="preserve">
          <source>The following code divides two numeric values. If the result is greater than or equal to &lt;code&gt;MIN_VALUE&lt;/code&gt;, the &lt;code&gt;func1&lt;/code&gt; function is called; otherwise, the &lt;code&gt;func2&lt;/code&gt; function is called.</source>
          <target state="translated">다음 코드는 두 숫자 값을 나눕니다. 결과보다 크거나 같으면 &lt;code&gt;MIN_VALUE&lt;/code&gt; 상기 &lt;code&gt;func1&lt;/code&gt; 함수가 호출되고; 그렇지 않으면 &lt;code&gt;func2&lt;/code&gt; 함수가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="4aebfbac775644f52742648c8188228c29aec3c2" translate="yes" xml:space="preserve">
          <source>The following code improperly initializes the proxy. The &lt;code&gt;target&lt;/code&gt; in Proxy initialization must itself be a valid constructor for the &lt;code&gt;new&lt;/code&gt; operator.</source>
          <target state="translated">다음 코드는 프록시를 잘못 초기화합니다. 프록시 초기화 의 &lt;code&gt;target&lt;/code&gt; 자체는 &lt;code&gt;new&lt;/code&gt; 연산자 의 유효한 생성자 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="ac713b40525625199d7a101c2127f6d4f76c80da" translate="yes" xml:space="preserve">
          <source>The following code is the declaration of an example generator function.</source>
          <target state="translated">다음 코드는 예제 생성기 함수의 선언입니다.</target>
        </trans-unit>
        <trans-unit id="1b2d53d50b851e948adb1e6d5da2847f3cf5987b" translate="yes" xml:space="preserve">
          <source>The following code logs a line for each element in a &lt;code&gt;Set&lt;/code&gt; object:</source>
          <target state="translated">다음 코드는 &lt;code&gt;Set&lt;/code&gt; 객체의 각 요소에 대한 줄을 기록 합니다.</target>
        </trans-unit>
        <trans-unit id="0cbf9e164e68b93693f30543959a7f06e0dec2e9" translate="yes" xml:space="preserve">
          <source>The following code logs a line for each element in a typed array:</source>
          <target state="translated">다음 코드는 유형이 지정된 배열의 각 요소에 대한 행을 기록합니다.</target>
        </trans-unit>
        <trans-unit id="9572c259a051431f4f450301d23fc521a93a28a7" translate="yes" xml:space="preserve">
          <source>The following code logs a line for each element in an &lt;code&gt;Map&lt;/code&gt; object:</source>
          <target state="translated">다음 코드는 &lt;code&gt;Map&lt;/code&gt; 객체의 각 요소에 대한 줄을 기록 합니다.</target>
        </trans-unit>
        <trans-unit id="05e676495dcfad5f9d42d6c2de9e3bca1f4630c4" translate="yes" xml:space="preserve">
          <source>The following code logs a line for each element in an array:</source>
          <target state="translated">다음 코드는 배열의 각 요소에 대한 행을 기록합니다.</target>
        </trans-unit>
        <trans-unit id="555c0c32448becb397f810790a2420788ccadd71" translate="yes" xml:space="preserve">
          <source>The following code multiplies two numeric values. If the result is less than or equal to &lt;code&gt;MAX_VALUE&lt;/code&gt;, the &lt;code&gt;func1&lt;/code&gt; function is called; otherwise, the &lt;code&gt;func2&lt;/code&gt; function is called.</source>
          <target state="translated">다음 코드는 두 개의 숫자 값을 곱합니다. 결과가보다 작거나 같으면 &lt;code&gt;MAX_VALUE&lt;/code&gt; 상기 &lt;code&gt;func1&lt;/code&gt; 함수가 호출되고; 그렇지 않으면 &lt;code&gt;func2&lt;/code&gt; 함수가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="1dad9ae9491ee1eb3386f8bbf689412c9a122c35" translate="yes" xml:space="preserve">
          <source>The following code prints the values of the diagonal elements in the array:</source>
          <target state="translated">다음 코드는 배열의 대각선 요소 값을 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="446e09962f6db0b1d8da76d9107b976aea69c91f" translate="yes" xml:space="preserve">
          <source>The following code shows examples of the &lt;code&gt;!&lt;/code&gt; (logical NOT) operator.</source>
          <target state="translated">다음 코드는 &lt;code&gt;!&lt;/code&gt; (논리적 NOT) 연산자.</target>
        </trans-unit>
        <trans-unit id="657425e8ce502911d7f0c1f47f8e38c9591acb40" translate="yes" xml:space="preserve">
          <source>The following code shows examples of the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; (logical AND) operator.</source>
          <target state="translated">다음 코드는 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; (논리 AND) 연산자의 예를 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="087b529d19673cc07b3d2ea0403068125326b88d" translate="yes" xml:space="preserve">
          <source>The following code shows examples of the &lt;code&gt;||&lt;/code&gt; (logical OR) operator.</source>
          <target state="translated">다음 코드는 &lt;code&gt;||&lt;/code&gt; (논리적 OR) 연산자.</target>
        </trans-unit>
        <trans-unit id="6128024108440d20cd751bb31df0569a7704752f" translate="yes" xml:space="preserve">
          <source>The following code shows how map works when a function requiring one argument is used with it. The argument will automatically be assigned from each element of the array as map loops through the original array.</source>
          <target state="translated">다음 코드는 하나의 인수가 필요한 함수를 사용할 때 맵이 작동하는 방식을 보여줍니다. 인수는 원래 배열을 통해 맵 루프로 배열의 각 요소에서 자동으로 지정됩니다.</target>
        </trans-unit>
        <trans-unit id="93cbd7a9b13ccbb2681320f45c12dc3e14c7a3b6" translate="yes" xml:space="preserve">
          <source>The following code shows how map works when a function requiring one argument is used with it. The argument will automatically be assigned to each element of the typed array as map loops through the original typed array.</source>
          <target state="translated">다음 코드는 하나의 인수가 필요한 함수를 사용할 때 맵이 작동하는 방식을 보여줍니다. 인수는 원래 형식화 된 배열을 통해 맵 루프로 형식화 된 배열의 각 요소에 자동으로 할당됩니다.</target>
        </trans-unit>
        <trans-unit id="23544ad4adcdcbd6a5e3021ebfaf4350ede55f3a" translate="yes" xml:space="preserve">
          <source>The following code takes a typed array and creates a new typed array containing the square roots of the numbers in the first typed array.</source>
          <target state="translated">다음 코드는 형식화 된 배열을 사용하여 첫 번째 형식화 된 배열에있는 숫자의 제곱근을 포함하는 새로운 형식의 배열을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="91dfb78c282609f0ca90e823f00a7c1bcabc053d" translate="yes" xml:space="preserve">
          <source>The following code takes an array of numbers and creates a new array containing the square roots of the numbers in the first array.</source>
          <target state="translated">다음 코드는 숫자 배열을 사용하여 첫 번째 배열에있는 숫자의 제곱근을 포함하는 새 배열을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="990fbd2a82909cc731cb6de1db1e4e7e5988d7ca" translate="yes" xml:space="preserve">
          <source>The following code takes an array of objects and creates a new array containing the newly reformatted objects.</source>
          <target state="translated">다음 코드는 객체 배열을 가져 와서 새로 포맷 된 객체를 포함하는 새 배열을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="b6a73ccf50bc94f930d475afad31b662aad507c8" translate="yes" xml:space="preserve">
          <source>The following code traps &lt;a href=&quot;../../object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">다음 코드는 &lt;a href=&quot;../../object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt; 트랩합니다 .</target>
        </trans-unit>
        <trans-unit id="a4ae609986c2bf700187679a0155e67f383001d4" translate="yes" xml:space="preserve">
          <source>The following code traps &lt;a href=&quot;../../object/getownpropertydescriptor&quot;&gt;&lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">다음 코드는 &lt;a href=&quot;../../object/getownpropertydescriptor&quot;&gt; &lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt; &lt;/a&gt; 트랩합니다 .</target>
        </trans-unit>
        <trans-unit id="d7fbdba357c15d5ef4893b679bc519284fa94e89" translate="yes" xml:space="preserve">
          <source>The following code traps &lt;a href=&quot;../../object/getownpropertynames&quot;&gt;&lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">다음 코드는 &lt;a href=&quot;../../object/getownpropertynames&quot;&gt; &lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt; &lt;/a&gt; 트랩합니다 .</target>
        </trans-unit>
        <trans-unit id="2316ce910c2a16a8f31a8d35f44ce184b5d5110b" translate="yes" xml:space="preserve">
          <source>The following code traps &lt;a href=&quot;../../object/isextensible&quot;&gt;&lt;code&gt;Object.isExtensible()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">다음 코드는 &lt;a href=&quot;../../object/isextensible&quot;&gt; &lt;code&gt;Object.isExtensible()&lt;/code&gt; &lt;/a&gt; 트랩합니다 .</target>
        </trans-unit>
        <trans-unit id="f43f449540c9caa7886889ce45d41a2cbc1b2b1d" translate="yes" xml:space="preserve">
          <source>The following code traps &lt;a href=&quot;../../object/preventextensions&quot;&gt;&lt;code&gt;Object.preventExtensions()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">다음 코드는 &lt;a href=&quot;../../object/preventextensions&quot;&gt; &lt;code&gt;Object.preventExtensions()&lt;/code&gt; &lt;/a&gt; 트랩합니다 .</target>
        </trans-unit>
        <trans-unit id="36b83b244b13ce0e00fbb489c5813644ab6b0abf" translate="yes" xml:space="preserve">
          <source>The following code traps a function call.</source>
          <target state="translated">다음 코드는 함수 호출을 트랩합니다.</target>
        </trans-unit>
        <trans-unit id="4ee4a393b6cbc0d511ffdc59d8483abe6e9b1be3" translate="yes" xml:space="preserve">
          <source>The following code traps getting a property value.</source>
          <target state="translated">다음 코드는 속성 값을 가져 오는 트랩입니다.</target>
        </trans-unit>
        <trans-unit id="ab8ce6ea525ee3a1bd25238d16dafa8cfd2ab091" translate="yes" xml:space="preserve">
          <source>The following code traps setting a property value.</source>
          <target state="translated">다음 코드는 속성 값 설정을 트랩합니다.</target>
        </trans-unit>
        <trans-unit id="4a3d5a01f344846da6a7dad4757ca86f93853d89" translate="yes" xml:space="preserve">
          <source>The following code traps the &lt;a href=&quot;../../../operators/delete&quot;&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt; operator.</source>
          <target state="translated">다음 코드는 &lt;a href=&quot;../../../operators/delete&quot;&gt; &lt;code&gt;delete&lt;/code&gt; &lt;/a&gt; 연산자를 트랩합니다 .</target>
        </trans-unit>
        <trans-unit id="e483290e7f76f08d2648b23c16bc2204b6ff38ba" translate="yes" xml:space="preserve">
          <source>The following code traps the &lt;a href=&quot;../../../operators/in&quot;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; operator.</source>
          <target state="translated">다음 코드는 &lt;a href=&quot;../../../operators/in&quot;&gt; &lt;code&gt;in&lt;/code&gt; &lt;/a&gt; 연산자를 트랩합니다 .</target>
        </trans-unit>
        <trans-unit id="25504055279ad082d3562335a453315f18588211" translate="yes" xml:space="preserve">
          <source>The following code traps the &lt;a href=&quot;../../../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; operator.</source>
          <target state="translated">다음 코드는 &lt;a href=&quot;../../../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt; 연산자를 트랩합니다 .</target>
        </trans-unit>
        <trans-unit id="79f411fcb5d68a6edc77d42c81be12111b8fbca2" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;break&lt;/code&gt; statements with labeled blocks. A &lt;code&gt;break&lt;/code&gt; statement must be nested within any label it references. Notice that &lt;code&gt;inner_block&lt;/code&gt; is nested within &lt;code&gt;outer_block&lt;/code&gt;.</source>
          <target state="translated">다음 코드는 레이블이 지정된 블록이있는 &lt;code&gt;break&lt;/code&gt; 문을 사용합니다 . &lt;code&gt;break&lt;/code&gt; 문이 참조하는 라벨 중첩해야합니다. 공지 사항이 &lt;code&gt;inner_block&lt;/code&gt; 이 중첩되어 &lt;code&gt;outer_block&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7a5972c72258c23f426a231b566e63137af62bd5" translate="yes" xml:space="preserve">
          <source>The following code uses &lt;code&gt;instanceof&lt;/code&gt; to demonstrate that &lt;code&gt;String&lt;/code&gt; and &lt;code&gt;Date&lt;/code&gt; objects are also of type &lt;code&gt;Object&lt;/code&gt; (they are derived from &lt;code&gt;Object&lt;/code&gt;).</source>
          <target state="translated">다음 코드 사용은 &lt;code&gt;instanceof&lt;/code&gt; 를 입증하기 위해 &lt;code&gt;String&lt;/code&gt; 및 &lt;code&gt;Date&lt;/code&gt; 개체 유형의 또한 &lt;code&gt;Object&lt;/code&gt; (그들은에서 파생 된 &lt;code&gt;Object&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="ef022a2af0822c75bf6d97a3907794c965929c70" translate="yes" xml:space="preserve">
          <source>The following code violates an invariant.</source>
          <target state="translated">다음 코드는 불변을 위반합니다.</target>
        </trans-unit>
        <trans-unit id="2cccfb58d874a9ff644e87a991d031d323732fb2" translate="yes" xml:space="preserve">
          <source>The following code violates the invariant.</source>
          <target state="translated">다음 코드는 불변을 위반합니다.</target>
        </trans-unit>
        <trans-unit id="be65d173a4ebcaa7bda004853274c64fd29e4be8" translate="yes" xml:space="preserve">
          <source>The following code was used to check the value of &lt;code&gt;arguments.caller&lt;/code&gt; in a function, but doesn't work anymore.</source>
          <target state="translated">다음 코드는 함수에서 &lt;code&gt;arguments.caller&lt;/code&gt; 의 값을 확인하는 데 사용 되었지만 더 이상 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f66a2585b75f449626494103e61d755dfb30114c" translate="yes" xml:space="preserve">
          <source>The following code will throw a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">다음 코드는 &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; 를 발생시킵니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7814b38c4660f2f789f848f5e4d62c2ad7b2f22d" translate="yes" xml:space="preserve">
          <source>The following code works fine in ES5 and below. However, in ECMAScript 2015 and later, the &lt;a href=&quot;../array/keys&quot;&gt;&lt;code&gt;Array.prototype.keys()&lt;/code&gt;&lt;/a&gt; method was introduced. That means that inside &lt;code&gt;with&lt;/code&gt; environment &quot;keys&quot; would now be the method and not the variable. That's when the &lt;code&gt;unscopable&lt;/code&gt;s symbol was introduced. A built-in &lt;code&gt;unscopables&lt;/code&gt; setting is implemented as &lt;a href=&quot;../array/@@unscopables&quot;&gt;&lt;code&gt;Array.prototype[@@unscopables]&lt;/code&gt;&lt;/a&gt; to prevent that some of the Array methods are being scoped into the &lt;code&gt;with&lt;/code&gt; statement.</source>
          <target state="translated">다음 코드는 ES5 이하에서 잘 작동합니다. 그러나 ECMAScript 2015 이상에서는 &lt;a href=&quot;../array/keys&quot;&gt; &lt;code&gt;Array.prototype.keys()&lt;/code&gt; &lt;/a&gt; 메서드가 도입되었습니다. 즉 &lt;code&gt;with&lt;/code&gt; 환경 &quot;키&quot;가 있는 내부 는 이제 변수가 아닌 방법이됩니다. 그 때 &lt;code&gt;unscopable&lt;/code&gt; s 기호가 소개되었습니다. 내장 &lt;code&gt;unscopables&lt;/code&gt; 설정은 &lt;a href=&quot;../array/@@unscopables&quot;&gt; &lt;code&gt;Array.prototype[@@unscopables]&lt;/code&gt; &lt;/a&gt; 으로 구현되어 일부 Array 메서드가 &lt;code&gt;with&lt;/code&gt; 문 으로 범위가 지정되는 것을 방지합니다 .</target>
        </trans-unit>
        <trans-unit id="65ed457c8a763018d44cf10f276cc37398e395c2" translate="yes" xml:space="preserve">
          <source>The following code works fine in ES5 and below. However, in ECMAScript 2015 and later, the &lt;a href=&quot;keys&quot;&gt;&lt;code&gt;Array.prototype.keys()&lt;/code&gt;&lt;/a&gt; method was introduced. That means that inside &lt;code&gt;with&lt;/code&gt; environments, &quot;keys&quot; would now be the method and not the variable. This is where now the built-in &lt;code&gt;@@unscopables&lt;/code&gt;&lt;code&gt;Array.prototype[@@unscopables]&lt;/code&gt; symbol property comes into play and prevents that some of the Array methods are being scoped into the &lt;code&gt;with&lt;/code&gt; statement.</source>
          <target state="translated">다음 코드는 ES5 이하에서 잘 작동합니다. 그러나 ECMAScript 2015 이상에서는 &lt;a href=&quot;keys&quot;&gt; &lt;code&gt;Array.prototype.keys()&lt;/code&gt; &lt;/a&gt; 메서드가 도입되었습니다. 그 말은 내 것이 &lt;code&gt;with&lt;/code&gt; 환경은 &quot;키는&quot;지금은 방법이 아니라 변수가 될 것입니다. 여기에 내장 &lt;code&gt;@@unscopables&lt;/code&gt; &lt;code&gt;Array.prototype[@@unscopables]&lt;/code&gt; 기호 속성이 적용되고 일부 Array 메서드가 &lt;code&gt;with&lt;/code&gt; 문 으로 범위가 지정되는 것을 방지합니다 .</target>
        </trans-unit>
        <trans-unit id="cb142fc147e63e6c8e71931fb3e4597a4a15e0f3" translate="yes" xml:space="preserve">
          <source>The following composite operation involving Booleans:</source>
          <target state="translated">부울과 관련된 다음과 같은 복합 연산 :</target>
        </trans-unit>
        <trans-unit id="f56868c1c01d0df57c3b0204e374f8e3a30a51f9" translate="yes" xml:space="preserve">
          <source>The following comprehension takes an array of numbers and creates a new array of the double of each of those numbers.</source>
          <target state="translated">다음의 이해는 숫자의 배열을 취하여 각 숫자의 두 배의 새로운 배열을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="8c8184ab9029406f0c35972bd8af1634a5c88cd5" translate="yes" xml:space="preserve">
          <source>The following creates a chess board as a two-dimensional array of strings. The first move is made by copying the 'p' in (6,4) to (4,4). The old position (6,4) is made blank.</source>
          <target state="translated">다음은 2 차원 문자열 배열로 체스 판을 만듭니다. 첫 번째 이동은 (6,4)의 'p'를 (4,4)에 복사하여 수행됩니다. 이전 위치 (6,4)는 비워집니다.</target>
        </trans-unit>
        <trans-unit id="22448211d9daeba006917d76dca51732108327f5" translate="yes" xml:space="preserve">
          <source>The following encodes &lt;code&gt;~314&lt;/code&gt;, i.e. the ones' complement of &lt;code&gt;314&lt;/code&gt;:</source>
          <target state="translated">다음 인코딩 &lt;code&gt;~314&lt;/code&gt; 의 즉 1의 보수 &lt;code&gt;314&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="17470c9f776b2250318b28cf1d1ffc7e6f3a5e08" translate="yes" xml:space="preserve">
          <source>The following example (see &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/memory.html&quot;&gt;memory.html&lt;/a&gt; on GitHub, and &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/memory.html&quot;&gt;view it live also&lt;/a&gt;) fetches and instantiates the loaded memory.wasm byte code using the &lt;a href=&quot;../instantiatestreaming&quot;&gt;&lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt;&lt;/a&gt; method, while importing the memory created in the line above. It then stores some values in that memory, then exports a function and uses it to sum some values.</source>
          <target state="translated">다음 예제 ( GitHub의 &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/memory.html&quot;&gt;memory.html&lt;/a&gt; 참조 및 &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/memory.html&quot;&gt;라이브보기&lt;/a&gt; )는 &lt;a href=&quot;../instantiatestreaming&quot;&gt; &lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt; &lt;/a&gt; 메서드를 사용하여로드 된 memory.wasm 바이트 코드를 가져 와서 인스턴스화하며 위 줄에 생성 된 메모리를 가져옵니다. 그런 다음 해당 메모리에 일부 값을 저장 한 다음 함수를 내보내고이를 사용하여 일부 값을 합칩니다.</target>
        </trans-unit>
        <trans-unit id="981dbbb700347ec94c9580cfc5638be5b3b0be36" translate="yes" xml:space="preserve">
          <source>The following example (see &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/table.html&quot;&gt;table.html&lt;/a&gt; on GitHub, and &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/table.html&quot;&gt;view it live&lt;/a&gt; also) compiles and instantiates the loaded table.wasm byte code using the &lt;a href=&quot;../instantiatestreaming&quot;&gt;&lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt;&lt;/a&gt; method. It then retrieves the references stored in the exported table.</source>
          <target state="translated">다음 예제 ( GitHub의 &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/table.html&quot;&gt;table.html&lt;/a&gt; 참조 및 &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/table.html&quot;&gt;라이브보기&lt;/a&gt; )는 &lt;a href=&quot;../instantiatestreaming&quot;&gt; &lt;code&gt;WebAssembly.instantiateStreaming()&lt;/code&gt; &lt;/a&gt; 메서드를 사용하여로드 된 table.wasm 바이트 코드를 컴파일하고 인스턴스화합니다 . 그런 다음 내 보낸 테이블에 저장된 참조를 검색합니다.</target>
        </trans-unit>
        <trans-unit id="7f7270c5a457873286226e276262e42332f056a3" translate="yes" xml:space="preserve">
          <source>The following example (see imports.html &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/imports.html&quot;&gt;source code&lt;/a&gt;; &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/imports.html&quot;&gt;see it live also&lt;/a&gt;) compiles the loaded simple.wasm module. This module is then queried for its imports.</source>
          <target state="translated">다음 예제 (imports.html &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/imports.html&quot;&gt;소스 코드 &lt;/a&gt;&lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/imports.html&quot;&gt;참조&lt;/a&gt; ; 실시간 참조 )는로드 된 simple.wasm 모듈을 컴파일합니다. 그런 다음이 모듈에서 가져 오기를 요청합니다.</target>
        </trans-unit>
        <trans-unit id="8be40e21a9e877159efe0525f36b240712dbcbd2" translate="yes" xml:space="preserve">
          <source>The following example (see our &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/compile-streaming.html&quot;&gt;compile-streaming.html&lt;/a&gt; demo on GitHub, and &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/compile-streaming.html&quot;&gt;view it live&lt;/a&gt; also) directly streams a .wasm module from an underlying source then compiles it to a &lt;a href=&quot;module&quot;&gt;&lt;code&gt;WebAssembly.Module&lt;/code&gt;&lt;/a&gt; object. Because the &lt;code&gt;compileStreaming()&lt;/code&gt; function accepts a promise for a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; object, you can directly pass it a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch&quot;&gt;&lt;code&gt;WindowOrWorkerGlobalScope.fetch()&lt;/code&gt;&lt;/a&gt; call, and it will pass the response into the function when it fulfills.</source>
          <target state="translated">다음 예제 ( GitHub에서 &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/compile-streaming.html&quot;&gt;compile-streaming.html&lt;/a&gt; 데모를 &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/compile-streaming.html&quot;&gt;보고 실시간으로보기&lt;/a&gt; )는 기본 소스에서 .wasm 모듈을 직접 스트리밍 한 다음 &lt;a href=&quot;module&quot;&gt; &lt;code&gt;WebAssembly.Module&lt;/code&gt; &lt;/a&gt; 객체 로 컴파일 합니다. 때문에 &lt;code&gt;compileStreaming()&lt;/code&gt; 함수는 대한 약속을 받아 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Response&quot;&gt; &lt;code&gt;Response&lt;/code&gt; &lt;/a&gt; 객체를 직접 그것을 전달할 수 있습니다 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch&quot;&gt; &lt;code&gt;WindowOrWorkerGlobalScope.fetch()&lt;/code&gt; &lt;/a&gt; 호출을하고 충족 할 때 함수에 응답을 전달합니다.</target>
        </trans-unit>
        <trans-unit id="8fbc142b33431162d5fa601429ab3ef586de33d3" translate="yes" xml:space="preserve">
          <source>The following example (see our &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/index-compile.html&quot;&gt;index-compile.html&lt;/a&gt; demo on GitHub, and &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/index-compile.html&quot;&gt;view it live&lt;/a&gt; also) compiles the loaded simple.wasm byte code using the &lt;a href=&quot;../compilestreaming&quot;&gt;&lt;code&gt;WebAssembly.compileStreaming()&lt;/code&gt;&lt;/a&gt; method and then sends it to a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API&quot;&gt;worker&lt;/a&gt; using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;postMessage()&lt;/a&gt;.</source>
          <target state="translated">다음 예제 ( GitHub 의 &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/index-compile.html&quot;&gt;index-compile.html&lt;/a&gt; 데모를 &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/index-compile.html&quot;&gt;보고 실시간으로보기&lt;/a&gt; )는 &lt;a href=&quot;../compilestreaming&quot;&gt; &lt;code&gt;WebAssembly.compileStreaming()&lt;/code&gt; &lt;/a&gt; 메서드를 사용하여로드 된 simple.wasm 바이트 코드를 컴파일 한 다음 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;postMessage ()를&lt;/a&gt; 사용하여 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API&quot;&gt;작업자&lt;/a&gt; 에게 보냅니다 .</target>
        </trans-unit>
        <trans-unit id="a4be8e69110269721fd01b14c26ce7095dc1f463" translate="yes" xml:space="preserve">
          <source>The following example (see our &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/index-compile.html&quot;&gt;index-compile.html&lt;/a&gt; demo on GitHub, and &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/index-compile.html&quot;&gt;view it live&lt;/a&gt; also) compiles the loaded simple.wasm byte code using the &lt;a href=&quot;compilestreaming&quot;&gt;&lt;code&gt;WebAssembly.compileStreaming()&lt;/code&gt;&lt;/a&gt; method and then sends it to a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API&quot;&gt;worker&lt;/a&gt; using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;postMessage()&lt;/a&gt;.</source>
          <target state="translated">다음 예제 ( GitHub 의 &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/index-compile.html&quot;&gt;index-compile.html&lt;/a&gt; 데모를 &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/index-compile.html&quot;&gt;보고 실시간으로보기&lt;/a&gt; )는 &lt;a href=&quot;compilestreaming&quot;&gt; &lt;code&gt;WebAssembly.compileStreaming()&lt;/code&gt; &lt;/a&gt; 메서드를 사용하여로드 된 simple.wasm 바이트 코드를 컴파일 한 다음 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;postMessage ()를&lt;/a&gt; 사용하여 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API&quot;&gt;작업자&lt;/a&gt; 에게 보냅니다 .</target>
        </trans-unit>
        <trans-unit id="55ed400983182592d2bee361ee8810fd4e6d4f77" translate="yes" xml:space="preserve">
          <source>The following example (see our &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/instantiate-streaming.html&quot;&gt;instantiate-streaming.html&lt;/a&gt; demo on GitHub, and &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/instantiate-streaming.html&quot;&gt;view it live&lt;/a&gt; also) directly streams a .wasm module from an underlying source then compiles and instantiates it, the promise fulfilling with a &lt;code&gt;ResultObject&lt;/code&gt;. Because the &lt;code&gt;instantiateStreaming()&lt;/code&gt; function accepts a promise for a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; object, you can directly pass it a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch&quot;&gt;&lt;code&gt;WindowOrWorkerGlobalScope.fetch()&lt;/code&gt;&lt;/a&gt; call, and it will pass the response into the function when it fulfills.</source>
          <target state="translated">다음의 예는 (우리의 참조 &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/instantiate-streaming.html&quot;&gt;인스턴스화-streaming.html&lt;/a&gt; GitHub의에서 데모를하고 &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/instantiate-streaming.html&quot;&gt;는 라이브 뷰&lt;/a&gt; 를 직접하는과 이행 약속 컴파일 후 기본 소스에서 .wasm 모듈을 스트림하고 인스턴스화도) &lt;code&gt;ResultObject&lt;/code&gt; 을 . 때문에 &lt;code&gt;instantiateStreaming()&lt;/code&gt; 함수는 대한 약속을 받아 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Response&quot;&gt; &lt;code&gt;Response&lt;/code&gt; &lt;/a&gt; 객체를 직접 그것을 전달할 수 있습니다 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch&quot;&gt; &lt;code&gt;WindowOrWorkerGlobalScope.fetch()&lt;/code&gt; &lt;/a&gt; 호출을하고 충족 할 때 함수에 응답을 전달합니다.</target>
        </trans-unit>
        <trans-unit id="074b310b066d2912c353138074d2c4298ef9da96" translate="yes" xml:space="preserve">
          <source>The following example (see table2.html &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/table2.html&quot;&gt;source code&lt;/a&gt; and &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/table2.html&quot;&gt;live version&lt;/a&gt;) creates a new WebAssembly Table instance with an initial size of 2 elements. We then print out the table length and contents of the two indexes (retrieved via &lt;a href=&quot;table/get&quot;&gt;&lt;code&gt;Table.prototype.get()&lt;/code&gt;&lt;/a&gt; to show that the length is two and both elements are &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">다음 예제 (table2.html &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/table2.html&quot;&gt;소스 코드&lt;/a&gt; 및 &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/table2.html&quot;&gt;라이브 버전 참조&lt;/a&gt; )는 초기 크기가 2 개의 요소 인 새 웹 어셈블리 테이블 인스턴스를 작성합니다. 그런 다음 &lt;a href=&quot;table/get&quot;&gt; &lt;code&gt;Table.prototype.get()&lt;/code&gt; &lt;/a&gt; 을 통해 검색된 두 인덱스의 테이블 길이와 내용을 인쇄 하여 길이가 2이고 두 요소가 모두 &lt;a href=&quot;../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; 임을 표시&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="51d5684213f352c1a7b4119e2be51a68e2b42266" translate="yes" xml:space="preserve">
          <source>The following example (see table2.html &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/table2.html&quot;&gt;source code&lt;/a&gt; and &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/table2.html&quot;&gt;live version&lt;/a&gt;) creates a new WebAssembly Table instance with an initial size of 2 references. We then print out the table length and contents of the two indexes (retrieved via &lt;a href=&quot;get&quot;&gt;&lt;code&gt;Table.prototype.get()&lt;/code&gt;&lt;/a&gt;) to show that the length is two, and the indexes currently contain no function references (they currently return &lt;a href=&quot;../../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">다음 예제 (table2.html &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/table2.html&quot;&gt;소스 코드&lt;/a&gt; 및 &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/table2.html&quot;&gt;라이브 버전 참조&lt;/a&gt; )는 초기 크기가 2 인 새 웹 어셈블리 테이블 인스턴스를 작성합니다. 그런 다음 &lt;a href=&quot;get&quot;&gt; &lt;code&gt;Table.prototype.get()&lt;/code&gt; &lt;/a&gt; 통해 검색된 두 인덱스의 테이블 길이와 내용을 인쇄 하여 길이가 2이고 인덱스에 현재 함수 참조가 없음을 표시합니다 (현재 &lt;a href=&quot;../../null&quot;&gt; &lt;code&gt;null&lt;/code&gt; 을&lt;/a&gt; 반환 함 ).</target>
        </trans-unit>
        <trans-unit id="e90898c64d263a3ab47f788727fb41a2af7847f1" translate="yes" xml:space="preserve">
          <source>The following example (see the custom-section.html &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/other-examples/custom-section.html&quot;&gt;source&lt;/a&gt; and &lt;a href=&quot;https://mdn.github.io/webassembly-examples/other-examples/custom-section.html&quot;&gt;live example&lt;/a&gt;) compiles the loaded simple-name-section.wasm byte code.</source>
          <target state="translated">다음 예제 (custom-section.html &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/other-examples/custom-section.html&quot;&gt;소스&lt;/a&gt; 및 &lt;a href=&quot;https://mdn.github.io/webassembly-examples/other-examples/custom-section.html&quot;&gt;라이브 예제 참조&lt;/a&gt; )는로드 된 simple-name-section.wasm 바이트 코드를 컴파일합니다.</target>
        </trans-unit>
        <trans-unit id="8925708cf4fd51b195340d4fd06ff264de3c4d2c" translate="yes" xml:space="preserve">
          <source>The following example (see the validate.html &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/validate.html&quot;&gt;source code&lt;/a&gt;, and &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/validate.html&quot;&gt;see it live too&lt;/a&gt;) fetches a .wasm module and converts it into a typed array. The &lt;code&gt;validate()&lt;/code&gt; method is then used to check whether the module is valid.</source>
          <target state="translated">다음 예제 (validate.html &lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/validate.html&quot;&gt;소스 코드&lt;/a&gt; 및 &lt;a href=&quot;https://mdn.github.io/webassembly-examples/js-api-examples/validate.html&quot;&gt;라이브보기 참조&lt;/a&gt; )는 .wasm 모듈을 가져 와서 형식화 된 배열로 변환합니다. 그런 다음 &lt;code&gt;validate()&lt;/code&gt; 메소드를 사용하여 모듈이 유효한지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="67dcad8447c089842b32b6c84f713c3990f8a460" translate="yes" xml:space="preserve">
          <source>The following example assigns the day portion of the current date to the variable &lt;code&gt;day&lt;/code&gt;.</source>
          <target state="translated">다음 예제는 현재 날짜의 요일 부분을 변수 &lt;code&gt;day&lt;/code&gt; 에 지정 합니다.</target>
        </trans-unit>
        <trans-unit id="329ba32469ae5d1cee5124ac53f13a8d2e5ee8c4" translate="yes" xml:space="preserve">
          <source>The following example assigns the four-digit value of the current year to the variable &lt;code&gt;year&lt;/code&gt;.</source>
          <target state="translated">다음 예제는 현재 연도의 네 자리 값을 변수 &lt;code&gt;year&lt;/code&gt; 에 지정 합니다.</target>
        </trans-unit>
        <trans-unit id="42327da23d2132b0665c321f6e511d64099c2105" translate="yes" xml:space="preserve">
          <source>The following example assigns the hours portion of the current time to the variable &lt;code&gt;hours&lt;/code&gt;.</source>
          <target state="translated">다음 예제는 현재 시간의 시간 부분을 변수 &lt;code&gt;hours&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="f5cf3c20aaeef2c685c52ccdf2761f9b637b94e2" translate="yes" xml:space="preserve">
          <source>The following example assigns the milliseconds portion of the current time to the variable &lt;code&gt;milliseconds&lt;/code&gt;.</source>
          <target state="translated">다음 예제에서는 현재 시간의 밀리 초 부분을 변수 &lt;code&gt;milliseconds&lt;/code&gt; 할당합니다 .</target>
        </trans-unit>
        <trans-unit id="93f95efff30459ece8c91e6f0e8eea1145c0f574" translate="yes" xml:space="preserve">
          <source>The following example assigns the milliseconds portion of the current time to the variable &lt;code&gt;milliseconds&lt;/code&gt;:</source>
          <target state="translated">다음 예제는 현재 시간의 밀리 초 부분을 변수 &lt;code&gt;milliseconds&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="078d56fd7b9b4ca87d573476a1b430aaf18cc0df" translate="yes" xml:space="preserve">
          <source>The following example assigns the minutes portion of the current time to the variable &lt;code&gt;minutes&lt;/code&gt;.</source>
          <target state="translated">다음 예제는 현재 시간의 분 부분을 변수 &lt;code&gt;minutes&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="3fade3624fc5f764985a36f92a2d97d640c27075" translate="yes" xml:space="preserve">
          <source>The following example assigns the month portion of the current date to the variable &lt;code&gt;month&lt;/code&gt;.</source>
          <target state="translated">다음 예제에서는 현재 날짜의 월 부분을 변수 &lt;code&gt;month&lt;/code&gt; 에 할당합니다 .</target>
        </trans-unit>
        <trans-unit id="ac4df3ac8ffa391b3525c78b9876dbb78d6bd995" translate="yes" xml:space="preserve">
          <source>The following example assigns the seconds portion of the current time to the variable &lt;code&gt;seconds&lt;/code&gt;.</source>
          <target state="translated">다음 예제는 현재 시간의 초 부분을 변수 &lt;code&gt;seconds&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="343545b7b29be8cda1dcf0cbd75601808cd0809f" translate="yes" xml:space="preserve">
          <source>The following example assigns the weekday portion of the current date to the variable &lt;code&gt;weekday&lt;/code&gt;.</source>
          <target state="translated">다음 예제는 현재 날짜의 요일 부분을 변수 &lt;code&gt;weekday&lt;/code&gt; 에 지정 합니다.</target>
        </trans-unit>
        <trans-unit id="767d60c06ca1ff299270f38eff52362c32dbcb7c" translate="yes" xml:space="preserve">
          <source>The following example combines strings into a new string.</source>
          <target state="translated">다음 예제는 문자열을 새 문자열로 결합합니다.</target>
        </trans-unit>
        <trans-unit id="ce1f80f7ce973aac6a68718ef1d5ef4c0a63d97a" translate="yes" xml:space="preserve">
          <source>The following example compiles the loaded simple.wasm byte code using the &lt;code&gt;compile()&lt;/code&gt; function and then sends it to a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API&quot;&gt;worker&lt;/a&gt; using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;postMessage()&lt;/a&gt;.</source>
          <target state="translated">다음 예제는 &lt;code&gt;compile()&lt;/code&gt; 함수를 사용하여로드 된 simple.wasm 바이트 코드를 컴파일 한 후 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage&quot;&gt;postMessage ()를&lt;/a&gt; 사용하여 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API&quot;&gt;작업자&lt;/a&gt; 에게 보냅니다 .</target>
        </trans-unit>
        <trans-unit id="46c1aae55651ebc7d95593ee71eb5a2d80993538" translate="yes" xml:space="preserve">
          <source>The following example converts the &lt;a href=&quot;date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object to a numerical value using &lt;code&gt;Number&lt;/code&gt; as a function:</source>
          <target state="translated">다음 예제에서는 &lt;code&gt;Number&lt;/code&gt; 를 함수로 사용하여 &lt;a href=&quot;date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; 객체를 숫자 값으로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="f3d3d920082d0c9559583ab75e2b0ed8ba94a88c" translate="yes" xml:space="preserve">
          <source>The following example creates a new WebAssembly Memory instance with an initial size of 1 page (64KiB), and a maximum size of 10 pages (640KiB).</source>
          <target state="translated">다음 예제는 초기 크기가 1 페이지 (64KiB)이고 최대 크기가 10 페이지 (640KiB) 인 새 웹 어셈블리 메모리 인스턴스를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="40392ebf224f08b9413114ec5e26a7d27a004ce6" translate="yes" xml:space="preserve">
          <source>The following example creates a new WebAssembly Table instance with an initial size of 2 and a maximum size of 10.</source>
          <target state="translated">다음 예제는 초기 크기가 2이고 최대 크기가 10 인 새 WebAssembly 테이블 인스턴스를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="987625d9a34f6b1500f4c39852a2fcd13e8078e4" translate="yes" xml:space="preserve">
          <source>The following example creates a prototype, &lt;code&gt;Tree&lt;/code&gt;, and an object of that type, &lt;code&gt;theTree&lt;/code&gt;. The example then displays the &lt;code&gt;constructor&lt;/code&gt; property for the object &lt;code&gt;theTree&lt;/code&gt;.</source>
          <target state="translated">다음 예제는 프로토 타입 &lt;code&gt;Tree&lt;/code&gt; 및 해당 유형의 오브젝트 &lt;code&gt;theTree&lt;/code&gt; 를 작성 합니다. 그런 다음 예제는 &lt;code&gt;theTree&lt;/code&gt; 객체 의 &lt;code&gt;constructor&lt;/code&gt; 속성을 표시합니다 .</target>
        </trans-unit>
        <trans-unit id="3e024257f78c408de5dbe3924322f58fda0791ae" translate="yes" xml:space="preserve">
          <source>The following example creates an array &lt;code&gt;a&lt;/code&gt;, containing three elements, then reverses the array. The call to &lt;code&gt;reverse()&lt;/code&gt; returns a reference to the reversed array &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">다음 예제에서는 세 개의 요소를 포함 하는 배열 &lt;code&gt;a&lt;/code&gt; 를 만든 다음 배열 을 반대로합니다. &lt;code&gt;reverse()&lt;/code&gt; 호출하면 역 배열 &lt;code&gt;a&lt;/code&gt; 에 대한 참조가 반환 됩니다.</target>
        </trans-unit>
        <trans-unit id="8e7ccf2c333889f3e25b5af825d678cedd99f53b" translate="yes" xml:space="preserve">
          <source>The following example creates an array, &lt;code&gt;a&lt;/code&gt;, with three elements, then joins the array four times: using the default separator, then a comma and a space, then a plus and an empty string.</source>
          <target state="translated">다음의 예에서는, 배열 생성 &lt;code&gt;a&lt;/code&gt; 세 가지 요소, 그 배열 네 번 조인 기본 세퍼레이터를 사용하고 쉼표 공백 후 플러스 빈 문자열.</target>
        </trans-unit>
        <trans-unit id="94ed75046a42e69d01d296a24ea2163f50def55f" translate="yes" xml:space="preserve">
          <source>The following example creates an array, &lt;code&gt;msgArray&lt;/code&gt;, with a length of 0, then assigns values to &lt;code&gt;msgArray[0]&lt;/code&gt; and &lt;code&gt;msgArray[99]&lt;/code&gt;, changing the length of the array to 100.</source>
          <target state="translated">다음 예제 는 길이가 0 인 &lt;code&gt;msgArray&lt;/code&gt; 배열을 작성한 다음 &lt;code&gt;msgArray[0]&lt;/code&gt; 및 &lt;code&gt;msgArray[99]&lt;/code&gt; 값을 지정 하여 배열의 길이를 100으로 변경합니다.</target>
        </trans-unit>
        <trans-unit id="acec17eec6a860d29cc75e011e0974ef6eecfdad" translate="yes" xml:space="preserve">
          <source>The following example creates four arrays and displays the original array, then the sorted arrays. The numeric arrays are sorted without, then with, a compare function.</source>
          <target state="translated">다음 예제는 네 개의 배열을 만들고 원래 배열을 표시 한 다음 정렬 된 배열을 표시합니다. 숫자 형 배열은 비교 기능없이 정렬 된 다음 비교 기능으로 정렬됩니다.</target>
        </trans-unit>
        <trans-unit id="6ac6d9979086fed726d30810239f0df73d45c5df" translate="yes" xml:space="preserve">
          <source>The following example defines a function that splits a string into an array of strings using the specified separator. After splitting the string, the function logs messages indicating the original string (before the split), the separator used, the number of elements in the array, and the individual array elements.</source>
          <target state="translated">다음 예제는 지정된 구분 기호를 사용하여 문자열을 문자열 배열로 분할하는 함수를 정의합니다. 문자열을 분할 한 후 함수는 원래 문자열 (분할 전), 사용 된 구분 기호, 배열의 요소 수 및 개별 배열 요소를 나타내는 메시지를 기록합니다.</target>
        </trans-unit>
        <trans-unit id="92b53dacb75ae1e45d107fe4e0d1af48934e0a9c" translate="yes" xml:space="preserve">
          <source>The following example defines a function, which, in turn, defines and returns a factorial function. This example isn't very practical, and there are nearly no cases where the same result cannot be achieved with &lt;a href=&quot;../../operators/function&quot;&gt;named function expressions&lt;/a&gt;.</source>
          <target state="translated">다음 예제는 함수를 정의하고 차례로 계승 함수를 정의하고 리턴합니다. 이 예제는 실용적이지 않으며 &lt;a href=&quot;../../operators/function&quot;&gt;이름이 지정된 함수 expression로&lt;/a&gt; 동일한 결과를 얻을 수없는 경우는 거의 없습니다 .</target>
        </trans-unit>
        <trans-unit id="ab0f8b17dc95108d00ead468122ed886ad0787e7" translate="yes" xml:space="preserve">
          <source>The following example defines an unnamed function and assigns it to &lt;code&gt;x&lt;/code&gt;. The function returns the square of its argument:</source>
          <target state="translated">다음 예제는 명명되지 않은 함수를 정의하여 &lt;code&gt;x&lt;/code&gt; 에 할당합니다 . 이 함수는 인수의 제곱을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="4f8ffa34b31c533441565020a3902f90686081d1" translate="yes" xml:space="preserve">
          <source>The following example defines an unnamed generator function and assigns it to &lt;code&gt;x&lt;/code&gt;. The function yields the square of its argument:</source>
          <target state="translated">다음 예제는 명명되지 않은 생성기 함수를 정의하고이를 &lt;code&gt;x&lt;/code&gt; 에 할당합니다 . 이 함수는 인수의 제곱을 산출합니다.</target>
        </trans-unit>
        <trans-unit id="7ca6fb2df23581f1f3ea75626e31d34e85d25092" translate="yes" xml:space="preserve">
          <source>The following example defines two string variables. The variables contain the same string except that the second string contains uppercase letters. The first &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Console/log&quot;&gt;&lt;code&gt;console.log()&lt;/code&gt;&lt;/a&gt; method displays 19. But because the &lt;code&gt;indexOf()&lt;/code&gt; method is case sensitive, the string &lt;code&gt;&quot;cheddar&quot;&lt;/code&gt; is not found in &lt;code&gt;myCapString&lt;/code&gt;, so the second &lt;code&gt;console.log()&lt;/code&gt; method displays -1.</source>
          <target state="translated">다음 예제는 두 개의 문자열 변수를 정의합니다. 변수에는 두 번째 문자열에 대문자가 포함 된 것을 제외하고 동일한 문자열이 포함됩니다. 첫 번째 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Console/log&quot;&gt; &lt;code&gt;console.log()&lt;/code&gt; &lt;/a&gt; 메소드는 19를 표시합니다. 그러나 &lt;code&gt;indexOf()&lt;/code&gt; 메소드는 대소 문자를 구분 하므로 &lt;code&gt;myCapString&lt;/code&gt; 에서 &lt;code&gt;&quot;cheddar&quot;&lt;/code&gt; 문자열을 찾을 수 없으므로 두 번째 &lt;code&gt;console.log()&lt;/code&gt; 메소드는 -1을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="547d34e148fee3b5c81ff45fb75c1ba9349a6db8" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how constants behave. Try this in your browser console.</source>
          <target state="translated">다음 예제는 상수의 작동 방식을 보여줍니다. 브라우저 콘솔에서 시도하십시오.</target>
        </trans-unit>
        <trans-unit id="98ff2a6ba484f518866c30fcdddf29c37ad2fdc0" translate="yes" xml:space="preserve">
          <source>The following example demonstrates several things:</source>
          <target state="translated">다음 예제는 몇 가지를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="4acb5dc736da7509eb051a3f3fb33a2adf5a1511" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the different potential results for a string occurring before, after, or at the same level as another:</source>
          <target state="translated">다음 예제는 문자열이 다른 문자열의 앞, 뒤 또는 같은 수준에서 발생하는 다른 잠재적 결과를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="76991b080a89f297062fcd2b209588b4476dff9d" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the enumerability of user-defined vs. built-in properties:</source>
          <target state="translated">다음 예제는 사용자 정의 속성과 내장 속성의 열거 가능성을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="535735172236e9bfa62c1b8539c90dbbb7bcde3f" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of the global and ignore case flags with &lt;code&gt;match()&lt;/code&gt;. All letters A through E and a through e are returned, each its own element in the array.</source>
          <target state="translated">다음 예제는 &lt;code&gt;match()&lt;/code&gt; 와 함께 전역 및 무시 사례 플래그를 사용하는 방법을 보여줍니다 . 배열에서 각각의 고유 한 요소 인 모든 문자 A부터 E 및 a부터 e까지가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="cabe28f20b2239beb68252e8521440dc3608037d" translate="yes" xml:space="preserve">
          <source>The following example demonstrates this behaviour:</source>
          <target state="translated">다음 예제는이 동작을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="f1a20b08e6b9a8caed404a5a3d2e883966a78b3f" translate="yes" xml:space="preserve">
          <source>The following example determines whether the &lt;code&gt;o&lt;/code&gt; object contains a property named &lt;code&gt;prop&lt;/code&gt;:</source>
          <target state="translated">다음 예제는 &lt;code&gt;o&lt;/code&gt; 객체에 &lt;code&gt;prop&lt;/code&gt; 라는 속성이 포함되어 있는지 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="b86a1dde5df429b8d830bc2153042ec3baf37734" translate="yes" xml:space="preserve">
          <source>The following example differentiates between direct properties and properties inherited through the prototype chain:</source>
          <target state="translated">다음 예제는 직접 속성과 프로토 타입 체인을 통해 상속 된 속성을 구분합니다.</target>
        </trans-unit>
        <trans-unit id="e28904a6f35eeb800c143e3dee50dcff00bd1737" translate="yes" xml:space="preserve">
          <source>The following example displays characters at different locations in the string &lt;code&gt;&quot;Brave new world&quot;&lt;/code&gt;:</source>
          <target state="translated">다음 예제는 &lt;code&gt;&quot;Brave new world&quot;&lt;/code&gt; 문자열의 다른 위치에있는 문자를 표시합니다 .</target>
        </trans-unit>
        <trans-unit id="a5458354badab7ff4adbcb6d487cdf785f3f80ce" translate="yes" xml:space="preserve">
          <source>The following example displays the lowercase string &lt;code&gt;' foo'&lt;/code&gt;:</source>
          <target state="translated">다음 예제는 소문자 문자열 &lt;code&gt;' foo'&lt;/code&gt; 를 표시합니다 .</target>
        </trans-unit>
        <trans-unit id="0bfcf6eed9257eea6ea96db09db7d70185bcca9b" translate="yes" xml:space="preserve">
          <source>The following example displays the lowercase string &lt;code&gt;'foo '&lt;/code&gt;:</source>
          <target state="translated">다음 예제는 소문자 문자열 &lt;code&gt;'foo '&lt;/code&gt; 를 표시합니다 .</target>
        </trans-unit>
        <trans-unit id="5f7e0cd9f847bc1e944b777e688a83943d4b275d" translate="yes" xml:space="preserve">
          <source>The following example displays the lowercase string &lt;code&gt;'foo'&lt;/code&gt;:</source>
          <target state="translated">다음 예제는 소문자 문자열 &lt;code&gt;'foo'&lt;/code&gt; 를 표시합니다 .</target>
        </trans-unit>
        <trans-unit id="3de0baed5bb079a0ffbb4bf89fc9d1cfda35e9f0" translate="yes" xml:space="preserve">
          <source>The following example displays the string value of a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object:</source>
          <target state="translated">다음 예제는 &lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt; 객체 의 문자열 값을 표시 합니다.</target>
        </trans-unit>
        <trans-unit id="b52750760089a6c0542b8391fd7147e5b5454c38" translate="yes" xml:space="preserve">
          <source>The following example displays the string value of a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; object:</source>
          <target state="translated">다음 예제는 &lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; 객체 의 문자열 값을 표시 합니다.</target>
        </trans-unit>
        <trans-unit id="18561723849ba2c212dfe8fbd1d0094dd72468e7" translate="yes" xml:space="preserve">
          <source>The following example displays the word &quot;MDN&quot; as a hypertext link that returns the user to the Mozilla Developer Network.</source>
          <target state="translated">다음 예는 &quot;MDN&quot;이라는 단어를 사용자를 Mozilla 개발자 네트워크로 리턴하는 하이퍼 텍스트 링크로 표시합니다.</target>
        </trans-unit>
        <trans-unit id="36f1186c333290c25b528c1d31b9417d9e9b895a" translate="yes" xml:space="preserve">
          <source>The following example finds an element in the array that is a prime number (or returns &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; if there is no prime number).</source>
          <target state="translated">다음 예제는 배열에서 소수 인 요소를 찾습니다 (또는 소수가없는 경우 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; 를&lt;/a&gt; 반환 함 ).</target>
        </trans-unit>
        <trans-unit id="a71e655d2f693b29caaacf6e44d06930198e94b3" translate="yes" xml:space="preserve">
          <source>The following example finds an element in the typed array that is a prime number (or returns &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; if there is no prime number).</source>
          <target state="translated">다음 예제는 유형이 지정된 배열에서 소수 인 요소를 찾습니다 (또는 소수가없는 경우 &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; 를&lt;/a&gt; 반환 함 ).</target>
        </trans-unit>
        <trans-unit id="123a7cc3c410ee8833d83619d1741b726a071c58" translate="yes" xml:space="preserve">
          <source>The following example finds the index of a fruit using an arrow function:</source>
          <target state="translated">다음 예제는 화살표 함수를 사용하여 과일의 인덱스를 찾습니다.</target>
        </trans-unit>
        <trans-unit id="c3043c7e35e655f7354b6f1b8d8089ebb3dcfa97" translate="yes" xml:space="preserve">
          <source>The following example finds the index of an element in the typed array that is a prime number (or returns -1 if there is no prime number).</source>
          <target state="translated">다음 예제는 유형이 지정된 배열에서 소수 인 요소의 색인을 찾습니다 (또는 소수가없는 경우 -1을 리턴 함).</target>
        </trans-unit>
        <trans-unit id="9921b6dcf2965ab71a7bbbf0b7bd58d30abfff93" translate="yes" xml:space="preserve">
          <source>The following example joins array-like object (&lt;code&gt;&lt;a href=&quot;../../functions/arguments&quot;&gt;arguments&lt;/a&gt;&lt;/code&gt;), by calling &lt;a href=&quot;../function/call&quot;&gt;&lt;code&gt;Function.prototype.call&lt;/code&gt;&lt;/a&gt; on &lt;code&gt;Array.prototype.join&lt;/code&gt;.</source>
          <target state="translated">다음 예제는 &lt;code&gt;Array.prototype.join&lt;/code&gt; 에서&lt;a href=&quot;../function/call&quot;&gt; &lt;code&gt;Function.prototype.call&lt;/code&gt; &lt;/a&gt; 을 호출 하여 배열과 유사한 객체 ( &lt;code&gt;&lt;a href=&quot;../../functions/arguments&quot;&gt;arguments&lt;/a&gt;&lt;/code&gt; ) 를 조인합니다 .</target>
        </trans-unit>
        <trans-unit id="e4a6eb7e50a75d3ce30d69979c6deb4427e65027" translate="yes" xml:space="preserve">
          <source>The following example logs &quot;one&quot;, &quot;two&quot;, &quot;four&quot;. When the entry containing the value &quot;two&quot; is reached, the first entry of the whole array is shifted off, which results in all remaining entries moving up one position. Because element &quot;four&quot; is now at an earlier position in the array, &quot;three&quot; will be skipped. &lt;code&gt;forEach()&lt;/code&gt; does not make a copy of the array before iterating.</source>
          <target state="translated">다음 예제는 &quot;one&quot;, &quot;two&quot;, &quot;four&quot;를 기록합니다. &quot;two&quot;값을 포함하는 항목에 도달하면 전체 배열의 첫 번째 항목이 이동되어 나머지 모든 항목이 한 위치 위로 이동합니다. &quot;four&quot;요소가 배열에서 이전 위치에 있으므로 &quot;three&quot;는 건너 뜁니다. &lt;code&gt;forEach()&lt;/code&gt; 는 반복하기 전에 배열의 복사본을 만들지 않습니다.</target>
        </trans-unit>
        <trans-unit id="40e228d899d08f05aeecc38dce80833d2bd90269" translate="yes" xml:space="preserve">
          <source>The following example logs a message which depends on the success of the test:</source>
          <target state="translated">다음 예제는 테스트 성공 여부에 따라 메시지를 기록합니다.</target>
        </trans-unit>
        <trans-unit id="1d7aef234432711a2e9c30b19e8ad50d7434e224" translate="yes" xml:space="preserve">
          <source>The following example opens a file and then executes statements that use the file (server-side JavaScript allows you to access files). If an exception is thrown while the file is open, the &lt;code&gt;finally&lt;/code&gt; clause closes the file before the script fails. The code in &lt;code&gt;finally&lt;/code&gt; also executes upon explicitly returning from &lt;code&gt;try&lt;/code&gt; or &lt;code&gt;catch&lt;/code&gt; block.</source>
          <target state="translated">다음 예제는 파일을 연 다음 파일을 사용하는 명령문을 실행합니다 (서버 측 JavaScript로 파일에 액세스 할 수 있음). 파일이 열려있는 동안 예외가 발생하면 &lt;code&gt;finally&lt;/code&gt; 절은 스크립트가 실패하기 전에 파일을 닫습니다. &lt;code&gt;finally&lt;/code&gt; 코드는 &lt;code&gt;try&lt;/code&gt; 또는 &lt;code&gt;catch&lt;/code&gt; 블록 에서 명시 적으로 반환 될 때도 실행됩니다 .</target>
        </trans-unit>
        <trans-unit id="0b446e3f60ff448f09a2a16a2121c515e355b2ea" translate="yes" xml:space="preserve">
          <source>The following example provides the special encoding required within UTF-8 &lt;code&gt;Content-Disposition&lt;/code&gt; and &lt;code&gt;Link&lt;/code&gt; server response header parameters (e.g., UTF-8 filenames):</source>
          <target state="translated">다음 예제는 UTF-8 &lt;code&gt;Content-Disposition&lt;/code&gt; 및 &lt;code&gt;Link&lt;/code&gt; 서버 응답 헤더 매개 변수 (예 : UTF-8 파일 이름) 내에 필요한 특수 인코딩을 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="8f6d94ed30d3e9137ae631064c77221c72decf99" translate="yes" xml:space="preserve">
          <source>The following example replaces a Fahrenheit degree with its equivalent Celsius degree. The Fahrenheit degree should be a number ending with F. The function returns the Celsius number ending with C. For example, if the input number is 212F, the function returns 100C. If the number is 0F, the function returns -17.77777777777778C.</source>
          <target state="translated">다음 예제는 화씨 학위를 동등한 섭씨 도로 바꿉니다. 화씨도는 F로 끝나는 숫자 여야합니다.이 함수는 C로 끝나는 섭씨 숫자를 반환합니다. 예를 들어 입력 숫자가 212F이면 함수는 100C를 반환합니다. 숫자가 0F이면 함수는 -17.77777777777778C를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="933f02ade97f0adfd5b355b0f382856566007dbf" translate="yes" xml:space="preserve">
          <source>The following example replaces a substring within a string. It will replace both individual characters and substrings. The function call at the end of the example changes the string &lt;code&gt;'Brave New World'&lt;/code&gt; to &lt;code&gt;'Brave New Web'&lt;/code&gt;.</source>
          <target state="translated">다음 예제는 문자열 내의 하위 문자열을 대체합니다. 개별 문자와 하위 문자열을 모두 대체합니다. 예제의 끝에서 함수 호출은 문자열 &lt;code&gt;'Brave New World'&lt;/code&gt; 를 &lt;code&gt;'Brave New Web'&lt;/code&gt; 로 변경 합니다.</target>
        </trans-unit>
        <trans-unit id="93f8e958f94323ef8dc0f42259773df78c457ee2" translate="yes" xml:space="preserve">
          <source>The following example returns 65, the Unicode value for A.</source>
          <target state="translated">다음 예제는 A의 유니 코드 값인 65를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="90c5cda0c96e649f69caa007d659268d33f22c88" translate="yes" xml:space="preserve">
          <source>The following example returns &lt;code&gt;224&lt;/code&gt;:</source>
          <target state="translated">다음 예제는 &lt;code&gt;224&lt;/code&gt; 를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="24de5fa4059fba34b62190fb50374f94f80ed5c0" translate="yes" xml:space="preserve">
          <source>The following example returns &lt;code&gt;NaN&lt;/code&gt;</source>
          <target state="translated">다음 예제는 &lt;code&gt;NaN&lt;/code&gt; 을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="eb4b71ecc767d2d15324f41767df1acba8db96b8" translate="yes" xml:space="preserve">
          <source>The following example returns the index of an element in the array that is a prime number, or -1 if there is no prime number.</source>
          <target state="translated">다음 예제는 배열에서 소수 인 요소의 인덱스를 리턴하거나 소수가없는 경우 -1을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="083a6a8c3e4bb9a9632eb9fe92d73307b122fa08" translate="yes" xml:space="preserve">
          <source>The following example returns the string &quot;ABC&quot;.</source>
          <target state="translated">다음 예제는 문자열 &quot;ABC&quot;를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="82cdc405f088054aabe6122997be993169860e4c" translate="yes" xml:space="preserve">
          <source>The following example searches a string with 2 different regex objects to show a successful search (positive value) vs. an unsuccessful search (-1)</source>
          <target state="translated">다음 예제는 2 개의 서로 다른 정규식 객체로 문자열을 검색하여 성공적인 검색 (양수)과 실패한 검색 (-1)을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="8d7630dc749db4775b009b43ad2cba5bd2e12024" translate="yes" xml:space="preserve">
          <source>The following example sets &lt;code&gt;count&lt;/code&gt; to the number of occurrences of the letter &lt;code&gt;e&lt;/code&gt; in the string &lt;code&gt;str&lt;/code&gt;:</source>
          <target state="translated">다음 예제는 문자열 &lt;code&gt;str&lt;/code&gt; 에서 문자 &lt;code&gt;e&lt;/code&gt; 의 발생 &lt;code&gt;count&lt;/code&gt; 로 count 를 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="11e92c9c5fada2aa828677183258974748dd4cfa" translate="yes" xml:space="preserve">
          <source>The following example shortens the array &lt;code&gt;numbers&lt;/code&gt; to a length of 3 if the current length is greater than 3.</source>
          <target state="translated">다음 예제 는 현재 길이가 3보다 큰 경우 배열 &lt;code&gt;numbers&lt;/code&gt; 를 3의 길이로 줄입니다.</target>
        </trans-unit>
        <trans-unit id="716fdf3d5254acc41f4ed6f3a01cae908d494b0b" translate="yes" xml:space="preserve">
          <source>The following example shows a &lt;a href=&quot;while&quot;&gt;&lt;code&gt;while&lt;/code&gt;&lt;/a&gt; loop that has a &lt;code&gt;continue&lt;/code&gt; statement that executes when the value of &lt;code&gt;i&lt;/code&gt; is 3. Thus, &lt;code&gt;n&lt;/code&gt; takes on the values 1, 3, 7, and 12.</source>
          <target state="translated">다음 예제는 &lt;code&gt;i&lt;/code&gt; 값 이 3 일 때 실행 되는 &lt;code&gt;continue&lt;/code&gt; 문 이 있는 &lt;a href=&quot;while&quot;&gt; &lt;code&gt;while&lt;/code&gt; &lt;/a&gt; 루프를 보여줍니다. 따라서 &lt;code&gt;n&lt;/code&gt; 은 1, 3, 7 및 12 값을 갖습니다.</target>
        </trans-unit>
        <trans-unit id="2005d00ce0209b5fceaa8ac912192339ee89a7e4" translate="yes" xml:space="preserve">
          <source>The following example shows a new global instance being created using the &lt;code&gt;WebAssembly.Global()&lt;/code&gt; constructor. It is being defined as a mutable &lt;code&gt;i32&lt;/code&gt; type, with a value of 0.</source>
          <target state="translated">다음 예제는 &lt;code&gt;WebAssembly.Global()&lt;/code&gt; 생성자를 사용하여 작성되는 새 글로벌 인스턴스를 보여줍니다 . 값이 0 인 변경 가능한 &lt;code&gt;i32&lt;/code&gt; 유형 으로 정의되고 있습니다.</target>
        </trans-unit>
        <trans-unit id="0c7266a2391590ed65c478f38c97fa18c57a2cf6" translate="yes" xml:space="preserve">
          <source>The following example shows a simple generator and an error that is thrown using the &lt;code&gt;throw&lt;/code&gt; method. An error can be caught by a &lt;code&gt;&lt;a href=&quot;../../statements/try...catch&quot;&gt;try...catch&lt;/a&gt;&lt;/code&gt; block as usual.</source>
          <target state="translated">다음 예제는 간단한 생성기와 &lt;code&gt;throw&lt;/code&gt; 메소드를 사용하여 발생한 오류를 보여줍니다 . &lt;code&gt;&lt;a href=&quot;../../statements/try...catch&quot;&gt;try...catch&lt;/a&gt;&lt;/code&gt; 블록이 평소와 같이 오류를 발견 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1f7f361180b31b6042d618b49166807c6f929d75" translate="yes" xml:space="preserve">
          <source>The following example shows a simple generator and the &lt;code&gt;return&lt;/code&gt; method.</source>
          <target state="translated">다음 예제는 간단한 생성기 및 &lt;code&gt;return&lt;/code&gt; 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="b72df2105ef3ff7ff1bfba2b4454bda5b2038cff" translate="yes" xml:space="preserve">
          <source>The following example shows a simple generator and the object that the &lt;code&gt;next&lt;/code&gt; method returns:</source>
          <target state="translated">다음 예제는 간단한 생성기와 &lt;code&gt;next&lt;/code&gt; 메소드가 리턴 하는 오브젝트를 보여 줍니다.</target>
        </trans-unit>
        <trans-unit id="ecc6be9816c449546ff2ea6de11e640bab27e489" translate="yes" xml:space="preserve">
          <source>The following example shows code where a debugger statement has been inserted, to invoke a debugger (if one exists) when the function is called.</source>
          <target state="translated">다음 예제는 함수가 호출 될 때 디버거 문 (있는 경우)을 호출하기 위해 디버거 문이 삽입 된 코드를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="38d40650a327908143a9507b756e781dad6e3669" translate="yes" xml:space="preserve">
          <source>The following example shows example usage of &lt;code&gt;Math.ceil()&lt;/code&gt;.</source>
          <target state="translated">다음은 &lt;code&gt;Math.ceil()&lt;/code&gt; 사용법의 예 입니다.</target>
        </trans-unit>
        <trans-unit id="6aef66a7fd07b717af62aec60881c68c4a467ffc" translate="yes" xml:space="preserve">
          <source>The following example shows how to iterate over the properties of an object without executing on inherited properties. Note that the &lt;a href=&quot;../../statements/for...in&quot;&gt;&lt;code&gt;for...in&lt;/code&gt;&lt;/a&gt; loop is already only iterating enumerable items, so one should not assume based on the lack of non-enumerable properties shown in the loop that &lt;code&gt;hasOwnProperty&lt;/code&gt; itself is confined strictly to enumerable items (as with &lt;a href=&quot;getownpropertynames&quot;&gt;&lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">다음 예제는 상속 된 속성에서 실행하지 않고 객체의 속성을 반복하는 방법을 보여줍니다. 참고 그 &lt;a href=&quot;../../statements/for...in&quot;&gt; &lt;code&gt;for...in&lt;/code&gt; &lt;/a&gt; 하나가되는 루프에 표시되지 않은 열거 속성의 부족에 따라 가정하지해야하므로 루프 이미 만 열거 항목을 반복한다 &lt;code&gt;hasOwnProperty&lt;/code&gt; 자체로로 (열거 항목을 엄격하게 제한됩니다 &lt;a href=&quot;getownpropertynames&quot;&gt; &lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt; &lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="05588cf5df11a1b0b917f7765e24afc5d0c27049" translate="yes" xml:space="preserve">
          <source>The following example shows how to modify constructor value of generic objects. Only &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;&quot;test&quot;&lt;/code&gt; will not be affected as they have read-only native constructors. This example shows that it is not always safe to rely on the &lt;code&gt;constructor&lt;/code&gt; property of an object.</source>
          <target state="translated">다음 예제는 일반 객체의 생성자 값을 수정하는 방법을 보여줍니다. 읽기 전용 기본 생성자가 있으므로 &lt;code&gt;true&lt;/code&gt; , &lt;code&gt;1&lt;/code&gt; 및 &lt;code&gt;&quot;test&quot;&lt;/code&gt; 만 영향을받지 않습니다. 이 예제는 객체 의 &lt;code&gt;constructor&lt;/code&gt; 속성에 의존하는 것이 항상 안전하지는 않음을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="512794980e61d7b8e7fce733381b52be22b2f50f" translate="yes" xml:space="preserve">
          <source>The following example shows how to recompile a regular expression with a new pattern and a new flag.</source>
          <target state="translated">다음 예제는 새로운 패턴과 새로운 플래그로 정규 표현식을 재 컴파일하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="16a9e7677db754327f388f87c25488c6eafb7c04" translate="yes" xml:space="preserve">
          <source>The following example shows the difference between a &lt;code&gt;for...of&lt;/code&gt; loop and a &lt;code&gt;for...in&lt;/code&gt; loop when used with an &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">다음 예제는 &lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt; 와 함께 사용될 때 &lt;code&gt;for...of&lt;/code&gt; 루프와 &lt;code&gt;for...in&lt;/code&gt; 루프 의 차이점을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="cb030f0bc0c064aa49218c4bc53dbe7177787ab2" translate="yes" xml:space="preserve">
          <source>The following example shows the minimum and maximum integer values that can be represented as &lt;code&gt;Number&lt;/code&gt; object (for details, refer to ECMAScript standard, chapter &lt;em&gt;&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type&quot;&gt;6.1.6 The Number Type&lt;/a&gt;&lt;/em&gt;):</source>
          <target state="translated">다음 예제는 &lt;code&gt;Number&lt;/code&gt; 객체 로 표현할 수있는 최소 및 최대 정수 값을 보여줍니다 (자세한 내용은 ECMAScript 표준, &lt;em&gt;&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type&quot;&gt;6.1.6&lt;/a&gt;&lt;/em&gt; 장 &lt;em&gt;Number 유형 참조&lt;/em&gt; ).</target>
        </trans-unit>
        <trans-unit id="8b668e0e307c5ee65cb2f062aacbf2cbff673850" translate="yes" xml:space="preserve">
          <source>The following example shows the use of &lt;code&gt;propertyIsEnumerable&lt;/code&gt; on objects and arrays:</source>
          <target state="translated">다음 예제는 객체와 배열 에서 &lt;code&gt;propertyIsEnumerable&lt;/code&gt; 을 사용하는 것을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="f585c8845f1eff70fb70f7c28ef793920b1cf083" translate="yes" xml:space="preserve">
          <source>The following example takes a string pattern and converts it into an array of objects.</source>
          <target state="translated">다음 예제는 문자열 패턴을 가져 와서 객체 배열로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="526ac138e4fc7f1b7bcc8fdaa130fb0ea5e63515" translate="yes" xml:space="preserve">
          <source>The following example tests an input string for a U.S. zip code. If the zip code uses an invalid format, the throw statement throws an exception by creating an object of type &lt;code&gt;ZipCodeFormatException&lt;/code&gt;.</source>
          <target state="translated">다음 예는 미국 우편 번호에 대한 입력 문자열을 테스트합니다. 우편 번호가 유효하지 않은 형식을 사용하는 경우 throw 문은 &lt;code&gt;ZipCodeFormatException&lt;/code&gt; 유형의 객체를 작성하여 예외를 발생 시킵니다 .</target>
        </trans-unit>
        <trans-unit id="4dc1382682a3dc481d70442f3a24f55d37812838" translate="yes" xml:space="preserve">
          <source>The following example tests whether all elements in the array are bigger than 10.</source>
          <target state="translated">다음 예제에서는 배열의 모든 요소가 10보다 큰지 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="013658f9ea00d8fe11ae283ad06c24b51bcc9655" translate="yes" xml:space="preserve">
          <source>The following example tests whether all elements in the typed array are bigger than 10.</source>
          <target state="translated">다음 예제에서는 형식화 된 배열의 모든 요소가 10보다 큰지 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="810860b8f4faa61dd02c1765fe41a001722d2b62" translate="yes" xml:space="preserve">
          <source>The following example tests whether any element in the array is bigger than 10.</source>
          <target state="translated">다음 예제에서는 배열의 요소가 10보다 큰지 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="5b1e373ef2933c1c4d588de3f2529dcb712e28b7" translate="yes" xml:space="preserve">
          <source>The following example tests whether any element in the typed array is bigger than 10.</source>
          <target state="translated">다음 예제에서는 형식화 된 배열의 요소가 10보다 큰지 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="44133647ac3e03eff2080839e68c70a985445297" translate="yes" xml:space="preserve">
          <source>The following example uses &lt;a href=&quot;indexof&quot;&gt;&lt;code&gt;indexOf()&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;lastIndexOf()&lt;/code&gt; to locate values in the string &lt;code&gt;&quot;Brave new world&quot;&lt;/code&gt;.</source>
          <target state="translated">다음 예제에서는 &lt;a href=&quot;indexof&quot;&gt; &lt;code&gt;indexOf()&lt;/code&gt; &lt;/a&gt; 및 &lt;code&gt;lastIndexOf()&lt;/code&gt; 를 사용하여 &lt;code&gt;&quot;Brave new world&quot;&lt;/code&gt; 문자열에서 값을 찾습니다 .</target>
        </trans-unit>
        <trans-unit id="8706b2456fc38fbc87d8e44f1573948714487850" translate="yes" xml:space="preserve">
          <source>The following example uses &lt;code&gt;eval()&lt;/code&gt; to evaluate the string &lt;code&gt;str&lt;/code&gt;. This string consists of JavaScript statements that open an alert dialog box and assign &lt;code&gt;z&lt;/code&gt; a value of 42 if &lt;code&gt;x&lt;/code&gt; is five, and assigns 0 to &lt;code&gt;z&lt;/code&gt; otherwise. When the second statement is executed, &lt;code&gt;eval()&lt;/code&gt; will cause these statements to be performed, and it will also evaluate the set of statements and return the value that is assigned to &lt;code&gt;z&lt;/code&gt;.</source>
          <target state="translated">다음 예제는 &lt;code&gt;eval()&lt;/code&gt; 을 사용 하여 문자열 &lt;code&gt;str&lt;/code&gt; 을 평가합니다 . 이 문자열은 경고 대화 상자를 열고 &lt;code&gt;x&lt;/code&gt; 가 5 이면 &lt;code&gt;z&lt;/code&gt; 에 42를 할당하고 그렇지 않으면 0에 &lt;code&gt;z&lt;/code&gt; 를 할당 하는 JavaScript 문으로 구성됩니다 . 두 번째 명령문이 실행될 때 &lt;code&gt;eval()&lt;/code&gt; 은 이러한 명령문이 수행되도록하며 명령문 세트를 평가하고 &lt;code&gt;z&lt;/code&gt; 에 지정된 값을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="83750d81b6626f0f19b9c906f35d785ebdddf04c" translate="yes" xml:space="preserve">
          <source>The following example uses &lt;code&gt;filter()&lt;/code&gt; to create a filtered array that has all elements with values less than 10 removed.</source>
          <target state="translated">다음 예제에서는 &lt;code&gt;filter()&lt;/code&gt; 를 사용하여 값이 10보다 작은 모든 요소가 제거 된 필터링 된 배열을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="eca07736cd4beef1170a4d86fc01b7db4d3548e8" translate="yes" xml:space="preserve">
          <source>The following example uses &lt;code&gt;filter()&lt;/code&gt; to create a filtered json of all elements with non-zero, numeric &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">다음의 예에서 사용 된 &lt;code&gt;filter()&lt;/code&gt; 0이 아닌 모든 원소 숫자의 필터링 JSON 생성하는 &lt;code&gt;id&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c51b4796506339dc0c87c3cab6544c7dba551328" translate="yes" xml:space="preserve">
          <source>The following example uses &lt;code&gt;filter()&lt;/code&gt; to create a filtered typed array that has all elements with values less than 10 removed.</source>
          <target state="translated">다음 예제에서는 &lt;code&gt;filter()&lt;/code&gt; 를 사용하여 값이 10보다 작은 모든 요소가 제거 된 필터링 된 형식화 된 배열을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="d105cc6b7d41842946081721deaa55136ba97875" translate="yes" xml:space="preserve">
          <source>The following example uses &lt;code&gt;indexOf()&lt;/code&gt; to locate values in an array.</source>
          <target state="translated">다음 예제는 &lt;code&gt;indexOf()&lt;/code&gt; 를 사용 하여 배열에서 값을 찾습니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
