<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="php">
    <body>
      <group id="php">
        <trans-unit id="4f496c49fc48ac58a6465818165fdbe954dad476" translate="yes" xml:space="preserve">
          <source>As this function sorts the returned values on the client side it is possible that you might not get the expected results in case you reach the &lt;code&gt;sizelimit&lt;/code&gt; either of the server or defined within &lt;a href=&quot;function.ldap-search&quot;&gt;ldap_search()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79e56cfe26f27e39615c5352d949b56d66f872da" translate="yes" xml:space="preserve">
          <source>As with &lt;a href=&quot;function.curl-setopt&quot;&gt;curl_setopt()&lt;/a&gt;, passing an array to &lt;strong&gt;&lt;code&gt;CURLOPT_POST&lt;/code&gt;&lt;/strong&gt; will encode the data as &lt;em&gt;multipart/form-data&lt;/em&gt;, while passing a URL-encoded string will encode the data as &lt;em&gt;application/x-www-form-urlencoded&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d13997fcfe7c0f1efd14eb10e7943dcc0d2d7873" translate="yes" xml:space="preserve">
          <source>As with all classes that implement the &lt;a href=&quot;class.arrayaccess&quot;&gt;ArrayAccess&lt;/a&gt; interface, &lt;strong&gt;Phar::offsetGet()&lt;/strong&gt; is automatically called when using the &lt;em&gt;[]&lt;/em&gt; angle bracket operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09bcbb027939832d5da0536111efbc1d21929fb2" translate="yes" xml:space="preserve">
          <source>As with all internal PHP functions as of 5.3.0, &lt;strong&gt;array_search()&lt;/strong&gt; returns &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; if invalid parameters are passed to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2754f5cb2efc68df43ef21e96df9aed0e29a677f" translate="yes" xml:space="preserve">
          <source>As with anything that outputs its result directly to the browser, the &lt;a href=&quot;https://secure.php.net/manual/en/book.outcontrol.php&quot;&gt;output-control functions&lt;/a&gt; can be used to capture the output of this function, and save it in a &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt; (for example).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afdc770b27552bdbfc1d5e96ff256244e5c1c631" translate="yes" xml:space="preserve">
          <source>As with normal exceptions, these &lt;a href=&quot;class.error&quot;&gt;Error&lt;/a&gt; exceptions will bubble up until they reach the first matching &lt;a href=&quot;language.exceptions#language.exceptions.catch&quot;&gt;&lt;em&gt;catch&lt;/em&gt;&lt;/a&gt; block. If there are no matching blocks, then any default exception handler installed with &lt;a href=&quot;function.set-exception-handler&quot;&gt;set_exception_handler()&lt;/a&gt; will be called, and if there is no default exception handler, then the exception will be converted to a fatal error and will be handled like a traditional error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b550c3ac1e42f23a262b44df4347d67db42bae49" translate="yes" xml:space="preserve">
          <source>As with the simple value yields shown earlier, yielding a key/value pair in an expression context requires the yield statement to be parenthesised:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49f22e6a92ee439bc6f3bee91d46cfb6a8a092ca" translate="yes" xml:space="preserve">
          <source>As with timers, the callback is guaranteed to be invoked only when the point in time where it is supposed to trigger has passed. If multiple timers become ready during the same loop iteration then the ones with earlier time-out values are invoked before ones with later time-out values (but this is no longer true when a callback calls &lt;a href=&quot;evloop.run&quot;&gt;EvLoop::run()&lt;/a&gt; recursively).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a55e180254feddc7051291fa44fffe5250c7f193" translate="yes" xml:space="preserve">
          <source>As you can see the last value &lt;em&gt;&quot;d&quot;&lt;/em&gt; was assigned the key &lt;em&gt;7&lt;/em&gt;. This is because the largest integer key before that was &lt;em&gt;6&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a173e725607d0f98c78ebac0b31138d8d136aa84" translate="yes" xml:space="preserve">
          <source>Asia</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a2e1326cdf7280fae9246438545acb80c113182" translate="yes" xml:space="preserve">
          <source>Asia time zones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b486b14ba35128f7d93a1ababac7427a61b35c0" translate="yes" xml:space="preserve">
          <source>Ask the multi handle if there are any messages or information from the individual transfers. Messages may include information such as an error code from the transfer or just the fact that a transfer is completed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae40253ef527434fa7ad991157d295b5459561ae" translate="yes" xml:space="preserve">
          <source>Assemble a url.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8beae02d3fb5c0677ad1bcbaf1643e335192928b" translate="yes" xml:space="preserve">
          <source>Assertion subpatterns are not capturing subpatterns, and may not be repeated, because it makes no sense to assert the same thing several times. If any kind of assertion contains capturing subpatterns within it, these are counted for the purposes of numbering the capturing subpatterns in the whole pattern. However, substring capturing is carried out only for positive assertions, because it does not make sense for negative assertions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3292c12a856a02722a46d87471ff4e6faefa104" translate="yes" xml:space="preserve">
          <source>AssertionError</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5061cebcb33e24b0b2cbfc16366a8edfa6d92c7e" translate="yes" xml:space="preserve">
          <source>AssertionError &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49bf55dc112eb3597726ba8ecf785a4fae4cbce0" translate="yes" xml:space="preserve">
          <source>Assertions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d20104ab8cafeb2e9adc34db570adec53186f0a5" translate="yes" xml:space="preserve">
          <source>Assertions &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cca3af175147a1e2ced06a09dcdbcfa5589c1e7" translate="yes" xml:space="preserve">
          <source>Assertions can be nested in any combination. For example, &lt;em&gt;(?&amp;lt;=(?&amp;lt;!foo)bar)baz&lt;/em&gt; matches an occurrence of &quot;baz&quot; that is preceded by &quot;bar&quot; which in turn is not preceded by &quot;foo&quot;, while &lt;em&gt;(?&amp;lt;=\d{3}...(?&amp;lt;!999))foo&lt;/em&gt; is another pattern which matches &quot;foo&quot; preceded by three digits and any three characters that are not &quot;999&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b804f4a6ab5e2c167fd317138b99dc6366096e68" translate="yes" xml:space="preserve">
          <source>Assertions count towards the maximum of 200 parenthesized subpatterns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b9a809e908781ed11ffadd5bebf5f3a87ba4cad" translate="yes" xml:space="preserve">
          <source>Assertions should be used as a debugging feature only. You may use them for sanity-checks that test for conditions that should always be &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; and that indicate some programming errors if not or to check for the presence of certain features like extension functions or certain system limits and features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6248b428b39b066def39b2e5939bf5a11c38888b" translate="yes" xml:space="preserve">
          <source>Assertions should not be used for normal runtime operations like input parameter checks. As a rule of thumb your code should always be able to work correctly if assertion checking is not activated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d67a13ffa859bea51d61bead619ff75b205f57e3" translate="yes" xml:space="preserve">
          <source>Assigan values to View engine, then the value can access directly by name in template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43a5914cb54169a132f368602d585b3591a64c2e" translate="yes" xml:space="preserve">
          <source>Assign By Reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e1338237507c7388e7d9e6ec98854728b4ccadc" translate="yes" xml:space="preserve">
          <source>Assign a priority to a bufferevent</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2933b45c5b7d8813f7e25ba4ee811087ef92cdfc" translate="yes" xml:space="preserve">
          <source>Assign a priority to the &lt;code&gt;bevent&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fba89c9ce1d594bf39c58422b4377b05d2075aea" translate="yes" xml:space="preserve">
          <source>Assign a priority to the &lt;code&gt;event&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f295ce28f9cbc17aea0f0a8a47be7aea940db86" translate="yes" xml:space="preserve">
          <source>Assign the specified &lt;code&gt;bevent&lt;/code&gt; to the &lt;code&gt;event_base&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa1903eca18ae92e9ccec9552cb537e97ef0bb80" translate="yes" xml:space="preserve">
          <source>Assigning another value to &lt;code&gt;handle&lt;/code&gt; argument in subsequent code will release the lock.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bec00ae67953bf63f8b1b3f8ddf8f9255f79d82" translate="yes" xml:space="preserve">
          <source>Assignment Operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb6d2508064b7f34a684c58cc5638ae8ef631ba2" translate="yes" xml:space="preserve">
          <source>Assignment Operators &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6606fee6331c4bf43802ca0b5860b36d427bd3a" translate="yes" xml:space="preserve">
          <source>Assignment by Reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18074dc5203632c6d67fd9f3e446f952068f75b1" translate="yes" xml:space="preserve">
          <source>Assignment by reference is also supported, using the &quot;$var = &amp;amp;$othervar;&quot; syntax. Assignment by reference means that both variables end up pointing at the same data, and nothing is copied anywhere.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a4d1e9b1f92e8358f67ebe0d07dd9be86ee5dd8" translate="yes" xml:space="preserve">
          <source>Assigns a value to the specified offset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bd14e94cfa66f2a989979afbdcb1b1617634303" translate="yes" xml:space="preserve">
          <source>Assigns read, write and event(status) callbacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="339cd85eb93aa3433fd2f5c1ca2ce016c9c0e06a" translate="yes" xml:space="preserve">
          <source>Assigns the worker an identifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a3c6a876faf9eebf78adc58f7f63329fdbe70f6" translate="yes" xml:space="preserve">
          <source>Assocates the previous image in an image list with the Imagick object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaedce342dbac2ea574b1f9507f683f16a32aa67" translate="yes" xml:space="preserve">
          <source>Associate data to an &lt;a href=&quot;language.types.object&quot;&gt;object&lt;/a&gt; in the storage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30eddbbad08eee6756fcfd86ff9fbd66fe153bac" translate="yes" xml:space="preserve">
          <source>Associated event base</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa576c78e63e88239909b14c7528b5a4310d6406" translate="yes" xml:space="preserve">
          <source>Associated event base.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="374444a94f64db04ab46e6f36b35b3af9d56122b" translate="yes" xml:space="preserve">
          <source>Associates a &lt;code&gt;key&lt;/code&gt; with a &lt;code&gt;value&lt;/code&gt;, overwriting a previous association if one exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0d9f64c47ea42d90f316abd2a595de0ef60e1b2" translate="yes" xml:space="preserve">
          <source>Associates a named clipping path with the image. Only the areas drawn on by the clipping path will be modified as long as it remains in effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="344ee9b67fa905db38fe4ff6485782100f3dda78" translate="yes" xml:space="preserve">
          <source>Associates all key-value &lt;code&gt;pairs&lt;/code&gt; of a &lt;a href=&quot;class.traversable&quot;&gt;traversable&lt;/a&gt; object or &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b99ca8450f7a962b387d42777891f64550857030" translate="yes" xml:space="preserve">
          <source>Associates an artifact with the image. The difference between image properties and image artifacts is that properties are public and artifacts are private. This method is available if Imagick has been compiled against ImageMagick version 6.5.7 or newer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c9828549a33b72870b3c7b81b5502607e0f1dca" translate="yes" xml:space="preserve">
          <source>Associates data, or info, with the object currently pointed to by the iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="166b16292091fbc46d27cd1c99cbf6c9d27e47c3" translate="yes" xml:space="preserve">
          <source>Associates one or more options with the wand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45c5cfcba913a3dd1dff2e72bee92bc76fc85d35" translate="yes" xml:space="preserve">
          <source>Associates the &lt;code&gt;event_base&lt;/code&gt; with the &lt;code&gt;event&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="495b52a9efbff1015cd0c7a51d193f78a706cb1c" translate="yes" xml:space="preserve">
          <source>Associates the next image in the image list with an Gmagick object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd78f087801c46f3ef7808c1f0a3ca56b6b6cab2" translate="yes" xml:space="preserve">
          <source>Associates the next image in the image list with an Imagick object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="887488be6bb33503047c83872f6ebef7678fc9ff" translate="yes" xml:space="preserve">
          <source>Associates the previous image in an image list with the Gmagick object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7d696bef2889daa816d6df6678040a467b6cfa9" translate="yes" xml:space="preserve">
          <source>Associative</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3e16c3f4f1b987fe2bc37e17653560d1b7cbb2f" translate="yes" xml:space="preserve">
          <source>Associative (&lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt;) keys will be maintained, but numeric keys will be re-indexed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20cdb4a455dea5441e25389d055f579e80c22873" translate="yes" xml:space="preserve">
          <source>Associative &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; containing the keyword-value pairs for this locale</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e755f1688a5fe496e11b0913d50e3a697ffb2674" translate="yes" xml:space="preserve">
          <source>Associative array containing crypt, compression, and message authentication code (MAC) method preferences for messages sent from client to server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b265115ee2ba17f5807f52bbca9567f7118017c9" translate="yes" xml:space="preserve">
          <source>Associative array containing crypt, compression, and message authentication code (MAC) method preferences for messages sent from server to client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ddce46b2b7d7aed75776330ed00fe1af7197903" translate="yes" xml:space="preserve">
          <source>Associative array containing document IDs as keys and array of attribute values as values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="650a04b079dc614141cde117feb62b02307a8641" translate="yes" xml:space="preserve">
          <source>Associative array of SSL context options One of &lt;a href=&quot;class.eventsslcontext#eventsslcontext.constants&quot;&gt; &lt;em&gt;EventSslContext::OPT_*&lt;/em&gt; constants&lt;/a&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3f253a48cf86eda7f4ab77f2ba7e62ec82c0a82" translate="yes" xml:space="preserve">
          <source>Associative array of additional highlighting options (see below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a2ffbb0c59b84e0d345c3705bc9e017d0e6c2cd" translate="yes" xml:space="preserve">
          <source>Associative array of attributes to assign to this public key. Refer to ietf-secsh-publickey-subsystem for a list of supported attributes. To mark an attribute as mandatory, precede its name with an asterisk. If the server is unable to support an attribute marked mandatory, it will abort the add process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e3ff038cf5ca18f5bf45f764c86d882bd1de42e" translate="yes" xml:space="preserve">
          <source>Associative array of field names and field weights.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0b06b05ea2c77e138a5cff31e48bbf6a2347485" translate="yes" xml:space="preserve">
          <source>Associative array of options or bitwise disjunction of flags. If filter accepts options, flags can be provided in &quot;flags&quot; field of array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16e1732c8b48fc6127882d97d3439bf7f0caff1b" translate="yes" xml:space="preserve">
          <source>Associative array of options or bitwise disjunction of flags. If filter accepts options, flags can be provided in &quot;flags&quot; field of array. For the &quot;callback&quot; filter, &lt;a href=&quot;language.types.callable&quot;&gt;callable&lt;/a&gt; type should be passed. The callback must accept one argument, the value to be filtered, and return the value after filtering/sanitizing it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d20b5a26a1cdf631954b50a5206246dff93d9c8a" translate="yes" xml:space="preserve">
          <source>Associativity</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b920a434538bc9c1f45fd5e9671af66304e4a95e" translate="yes" xml:space="preserve">
          <source>Assuming &quot;bjori&quot; executes this script</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c00588eae0cc6fb3d1d0b4cd8ff91f43b81ce043" translate="yes" xml:space="preserve">
          <source>Assuming that this phar is at &lt;em&gt;/path/to/myphar.phar&lt;/em&gt; and it contains &lt;em&gt;file.php&lt;/em&gt; and &lt;em&gt;file2.txt&lt;/em&gt;, if &lt;em&gt;file.php&lt;/em&gt; contains this code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18888678f2309c4c00a32f371aaf24204fe393d2" translate="yes" xml:space="preserve">
          <source>Assuming the &quot;name&quot; cookie has been set earlier</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c8f1e97f337dba0abeee2b93c0488862d4f95b9" translate="yes" xml:space="preserve">
          <source>Assuming the following local name space registerd:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34bb5f9941efaed9812f24864dd87283b044a047" translate="yes" xml:space="preserve">
          <source>Assuming the user POSTed name=Hannes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c40c7a8bf1954b166116c004c46267ad4140054c" translate="yes" xml:space="preserve">
          <source>Assuming the user entered http://example.com/?name=Hannes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="143edc5274f5627d36f1b6a13b28edd1b19bb717" translate="yes" xml:space="preserve">
          <source>Assuming there are no argument errors, returns &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; iif the calendars are equivalent except possibly for their set time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa6ae2bf9ed71d5ad8762d8a0cc336cd2cd0238d" translate="yes" xml:space="preserve">
          <source>Assuming there are no argument errors, returns &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; iif the field is set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6d2c550c3e756043f358b2da04f22716bbd32b9" translate="yes" xml:space="preserve">
          <source>Assuming you're familiar with the concept of functions (if you're not, take a look at the chapter about &lt;a href=&quot;https://secure.php.net/manual/en/language.functions.php&quot;&gt;functions&lt;/a&gt;), you'd assume that typing &lt;em&gt;$c = foo()&lt;/em&gt; is essentially just like writing &lt;em&gt;$c = 5&lt;/em&gt;, and you're right. Functions are expressions with the value of their return value. Since &lt;em&gt;foo()&lt;/em&gt; returns 5, the value of the expression '&lt;em&gt;foo()&lt;/em&gt;' is 5. Usually functions don't just return a static value but compute something.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eafacaa14b2ffe9b23cc2937d25f083e9b900145" translate="yes" xml:space="preserve">
          <source>Astronomical twilight: the point at which the sun ends being the source of any illumination.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d70c0a8e973643d84fd0d9f54cf17f31c06ff136" translate="yes" xml:space="preserve">
          <source>Astronomical twilight: the point at which the sun starts being the source of any illumination.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b77dd5a9f3c934defb277cc8f53da1e9c229158" translate="yes" xml:space="preserve">
          <source>At most 15 events allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="436f3de5697e06e31d116f566ae7c286e1137b7f" translate="yes" xml:space="preserve">
          <source>At some point in the future, the PHP team might want to add another constant or keyword, or a constant in other code may interfere. For example, it is already wrong to use the words &lt;em&gt;empty&lt;/em&gt; and &lt;em&gt;default&lt;/em&gt; this way, since they are &lt;a href=&quot;https://secure.php.net/manual/en/reserved.php&quot;&gt;reserved keywords&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de0f6e04ec514294fb5b12d0191c48a49e66efd8" translate="yes" xml:space="preserve">
          <source>At startup, PHP tries to enable the VT100 feature of the &lt;strong&gt;&lt;code&gt;STDOUT&lt;/code&gt;&lt;/strong&gt;/&lt;strong&gt;&lt;code&gt;STDERR&lt;/code&gt;&lt;/strong&gt; streams. By the way, if those streams are redirected to a file, the VT100 features may not be enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e107debea9e38ad0a9777b105f6b753e662e2604" translate="yes" xml:space="preserve">
          <source>At the end of each iteration, &lt;var&gt;&lt;var&gt;expr3&lt;/var&gt;&lt;/var&gt; is evaluated (executed).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcf4ce4d9e00a712abc2d80ed1d23c53a1934f5d" translate="yes" xml:space="preserve">
          <source>At this point two variables have been defined and stored in the PHP symbol tree: &lt;var&gt;&lt;var&gt;$a&lt;/var&gt;&lt;/var&gt; with contents &quot;hello&quot; and &lt;var&gt;&lt;var&gt;$hello&lt;/var&gt;&lt;/var&gt; with contents &quot;world&quot;. Therefore, this statement:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f288826e428603628ebffc048a34b71b5b766ea" translate="yes" xml:space="preserve">
          <source>At this point, you can go about using &lt;em&gt;$xml-&amp;gt;body&lt;/em&gt; and such.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72458d0c7cd7205f3f43497e70e935e1b28b1964" translate="yes" xml:space="preserve">
          <source>At this point, you can go about using &lt;em&gt;$xml-&amp;gt;title&lt;/em&gt; and any other elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70b23ebbacd174b20469189cfd436dab3063e959" translate="yes" xml:space="preserve">
          <source>Atlantic time zones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="813d6410e499ccb0aa4a815f4f1783c27fa97cf5" translate="yes" xml:space="preserve">
          <source>Atom (example: 2005-08-15T15:52:01+00:00)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b490cfdfc99a22abc8d8266e7b1c52f163d48d75" translate="yes" xml:space="preserve">
          <source>Atomically attempts to find &lt;code&gt;key&lt;/code&gt; in the cache, if it cannot be found &lt;code&gt;generator&lt;/code&gt; is called, passing &lt;code&gt;key&lt;/code&gt; as the only argument. The return value of the call is then cached with the optionally specified &lt;code&gt;ttl&lt;/code&gt;, and returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0935213897cecd3d9fe9e54f3f000267c60c6aec" translate="yes" xml:space="preserve">
          <source>Attach another kernel to this kernel to allow them to both be applied in a single morphology or filter function. Returns the new combined kernel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fbfe2b6c124f064fd233e4e07a0de4eb050dbff" translate="yes" xml:space="preserve">
          <source>Attaches an &lt;a href=&quot;class.splobserver&quot;&gt;SplObserver&lt;/a&gt; so that it can be notified of updates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ccfd832dc7bf5ee4b07d422f485b82b5de484b3" translate="yes" xml:space="preserve">
          <source>Attaches iterator information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e8e3c76bf0d46aba99b78dd650c0961aa92530d" translate="yes" xml:space="preserve">
          <source>Attempt &quot;none&quot; authentication which usually will (and should) fail. As part of the failure, this function will return an array of accepted authentication methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af67642cea8ae5b622274c593f3624d8e7ebcc53" translate="yes" xml:space="preserve">
          <source>Attempt to lock the Mutex for the caller without blocking if the Mutex is owned (locked) by another Thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84dc0d21b125883b387d6feb938ff6d32c2d4bbe" translate="yes" xml:space="preserve">
          <source>Attempt to lock the Mutex for the caller.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d15c2b37a1ebb3d4bae95ccc4fcd3a0e642ae597" translate="yes" xml:space="preserve">
          <source>Attempt to resize destination to fit distorted source</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edb304d70a6f6e80283372f12a4a77f66d8ba7c1" translate="yes" xml:space="preserve">
          <source>Attempting to access an array key which has not been defined is the same as accessing any other undefined variable: an &lt;strong&gt;&lt;code&gt;E_NOTICE&lt;/code&gt;&lt;/strong&gt;-level error message will be issued, and the result will be &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ebe2946da0893474c14cd019b774d198d5bddda" translate="yes" xml:space="preserve">
          <source>Attempting to throw an exception from a destructor (called in the time of script termination) causes a fatal error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6d980e12bfc515a10f012b05210198a13995f27" translate="yes" xml:space="preserve">
          <source>Attempting to use a combination of the string and width specifiers with character sets that require more than one byte per character may result in unexpected results</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52bb7be9f9dc86d586b31f436b3a20b38b5e0bf0" translate="yes" xml:space="preserve">
          <source>Attempting to use a position specifier greater than &lt;strong&gt;&lt;code&gt;PHP_INT_MAX&lt;/code&gt;&lt;/strong&gt; will result in &lt;strong&gt;sprintf()&lt;/strong&gt; generating warnings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad60f0b93ad2394c3b513c383829e8586f796d11" translate="yes" xml:space="preserve">
          <source>Attempts to change the group of the file &lt;code&gt;filename&lt;/code&gt; to &lt;code&gt;group&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="152a9d5ff1225e2dba36d59e297dd1664693dbd4" translate="yes" xml:space="preserve">
          <source>Attempts to change the group of the symlink &lt;code&gt;filename&lt;/code&gt; to &lt;code&gt;group&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb41c3804834b890b9b26d2c67b0a0c73fabb207" translate="yes" xml:space="preserve">
          <source>Attempts to change the mode of the specified file to that given in &lt;code&gt;mode&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e93accf04479ace620d6feeb3749fa71221d36b0" translate="yes" xml:space="preserve">
          <source>Attempts to change the owner of the file &lt;code&gt;filename&lt;/code&gt; to user &lt;code&gt;user&lt;/code&gt;. Only the superuser may change the owner of a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24a1ab7fbdbd5fba4a02eb24d26892808dd9f64e" translate="yes" xml:space="preserve">
          <source>Attempts to change the owner of the symlink &lt;code&gt;filename&lt;/code&gt; to user &lt;code&gt;user&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f819255c5f838392963857bbacf32523411f6d6d" translate="yes" xml:space="preserve">
          <source>Attempts to create the directory specified by pathname.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f39f01c25e72aa10e4728220d12a186e6acebff7" translate="yes" xml:space="preserve">
          <source>Attempts to determine the capabilities of the user's browser, by looking up the browser's information in the &lt;var&gt;browscap.ini&lt;/var&gt; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6611434b90ad0e910db83dbe66f2a24d7ab1b0f9" translate="yes" xml:space="preserve">
          <source>Attempts to load an SQLite extension library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cf6cb2ca0c64aad243585b3bc95d1f57dc93a95" translate="yes" xml:space="preserve">
          <source>Attempts to remove the directory named by &lt;code&gt;dirname&lt;/code&gt;. The directory must be empty, and the relevant permissions must permit this. A &lt;strong&gt;&lt;code&gt;E_WARNING&lt;/code&gt;&lt;/strong&gt; level error will be generated on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32b65ab8b687cf4f256c4f2313be53b7062442e6" translate="yes" xml:space="preserve">
          <source>Attempts to rename &lt;code&gt;oldname&lt;/code&gt; to &lt;code&gt;newname&lt;/code&gt;, moving it between directories if necessary. If renaming a file and &lt;code&gt;newname&lt;/code&gt; exists, it will be overwritten. If renaming a directory and &lt;code&gt;newname&lt;/code&gt; exists, this function will emit a warning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a370a9db8bfd27e7498aa38b20e2c61176befed6" translate="yes" xml:space="preserve">
          <source>Attempts to set the access and modification times of the file named in the &lt;code&gt;filename&lt;/code&gt; parameter to the value given in &lt;code&gt;time&lt;/code&gt;. Note that the access time is always modified, regardless of the number of parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab5d56cbc1918ca9cc127007073f195ba495aae3" translate="yes" xml:space="preserve">
          <source>Attempts to unlock the Mutex for the caller, optionally destroying the Mutex handle. The calling thread should own the Mutex at the time of the call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf3c5f7af63e40195cf9f1d07d9fcef3b59c3156" translate="yes" xml:space="preserve">
          <source>Attempts to use &lt;strong&gt;&lt;code&gt;IMG_CROP_TRANSPARENT&lt;/code&gt;&lt;/strong&gt; and if it fails it falls back to &lt;strong&gt;&lt;code&gt;IMG_CROP_SIDES&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a086d942884a301b827479029ba19c2746237425" translate="yes" xml:space="preserve">
          <source>Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b57a0d8e805c7057a2b772a838f522edba13e4d2" translate="yes" xml:space="preserve">
          <source>Attribute node</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e6ee50064162c5da001c6a27a80e9b23826dd3e" translate="yes" xml:space="preserve">
          <source>Attribute specifier - one of the &lt;a href=&quot;class.numberformatter#intl.numberformatter-constants.unumberformatattribute&quot;&gt; numeric attribute&lt;/a&gt; constants.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2abd977715e56fda330ce05c89f96bca23422008" translate="yes" xml:space="preserve">
          <source>Attribute specifier - one of the &lt;a href=&quot;class.numberformatter#intl.numberformatter-constants.unumberformattextattribute&quot;&gt; text attribute&lt;/a&gt; constants.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d90294694005f04e4c81b25f5482566ead146965" translate="yes" xml:space="preserve">
          <source>Attribute specifier - one of the &lt;a href=&quot;class.numberformatter#intl.numberformatter-constants.unumberformattextattribute&quot;&gt;text attribute&lt;/a&gt; constants.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b9037d6c7ae81e4ddae316b5e746b6a6e5e1ef8" translate="yes" xml:space="preserve">
          <source>Attribute to get value for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd2ca195d49a4957fe0ce6f33a5dfb912fb16cba" translate="yes" xml:space="preserve">
          <source>Attribute value, or &lt;a href=&quot;language.types.boolean&quot;&gt;boolean&lt;/a&gt;&lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45ab686a26a9c623c53a098d31d25c06b4808f79" translate="yes" xml:space="preserve">
          <source>Attribute value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dfca9318870e4107f87a42b70e4f03066cf7d03" translate="yes" xml:space="preserve">
          <source>Attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53408828b63036e05d2307f9c2a4b15d7a641d1c" translate="yes" xml:space="preserve">
          <source>Attributes assigned to this publickey. The most common attribute, and the only one supported by publickey version 1 servers, is &lt;em&gt;comment&lt;/em&gt;, which may be any freeform string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6496e2aaf3f769a2151a819d4be2eceb0f832796" translate="yes" xml:space="preserve">
          <source>Australia time zones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4819dcf5400ce23c8f897e9ae80d954608b53e2e" translate="yes" xml:space="preserve">
          <source>Authenticate over SSH using a plain password. Since version 0.12 this function also supports keyboard_interactive method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f9da85b2d1f3eba9fdbb17f23bcb35509f2d685" translate="yes" xml:space="preserve">
          <source>Authenticate over SSH using the ssh agent</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5e6ee8978ac7f68446a6614351e61f073f3631d" translate="yes" xml:space="preserve">
          <source>Authenticate using a public hostkey read from a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58888fc66b5a7001c65d2845e13f71c17d1cce57" translate="yes" xml:space="preserve">
          <source>Authenticate using a public key read from a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="126d5ccc325ecfbd8ea9a48b0aa87eaf06482c36" translate="yes" xml:space="preserve">
          <source>Authorization session handle, this parameter does not have any citation in the core OAuth 1.0 specification but may be implemented by large providers. &lt;a href=&quot;http://oauth.pbwiki.com/ScalableOAuth/&quot;&gt;&amp;raquo; See ScalableOAuth&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ac9ec42893f6088008e71f9db80456485d08762" translate="yes" xml:space="preserve">
          <source>Autoloading Classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0b983767078f35119d8414efb46ac46e52d2dd8" translate="yes" xml:space="preserve">
          <source>Autoloading Classes &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00e9a0dd7333291b5d6984d075fcc312de17f038" translate="yes" xml:space="preserve">
          <source>Autoloading is not available if using PHP in CLI &lt;a href=&quot;https://secure.php.net/manual/en/features.commandline.php&quot;&gt;interactive mode&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8c4d362dde3aacd21a07e3030b9507f68c20847" translate="yes" xml:space="preserve">
          <source>Automatically allocate locks for the bufferevent, so that it&amp;rsquo;s safe to use from multiple threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e0aed2aaa54bde76bd1465afdd3f3836fc4eae9" translate="yes" xml:space="preserve">
          <source>Automatically crops an image according to the given &lt;code&gt;mode&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eea250442b01a58d1ed57279d935f1e0745e2f85" translate="yes" xml:space="preserve">
          <source>Automatically frees allocated memory when its size drops low enough.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="681b5b5ae10b994e61d9fc53cf8a95498ff0df39" translate="yes" xml:space="preserve">
          <source>Availability</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55c5a78ba49f84f67dc7f17e9b623eb20d315c70" translate="yes" xml:space="preserve">
          <source>Available only with &lt;a href=&quot;https://secure.php.net/manual/en/book.mysqlnd.php&quot;&gt;mysqlnd&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6ae51c3678ef18644df124a6fe333a95f37deb1" translate="yes" xml:space="preserve">
          <source>Available since</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b42ed6c2fef212d2d6b2a775a1b777e155c4f3d" translate="yes" xml:space="preserve">
          <source>Available since &lt;em&gt;libevent 2.1.0-alpha&lt;/em&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07fd7abc482f90de334d7d03349b7f67dae289eb" translate="yes" xml:space="preserve">
          <source>Available since PHP 5.1.3. The &lt;strong&gt;&lt;code&gt;CURLINFO_&lt;/code&gt;&lt;/strong&gt; prefix is intentional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cf030a1cebb13fd4cc4af484a74a155ec6d32ae" translate="yes" xml:space="preserve">
          <source>Available since PHP 5.2.1 for versions compiled with libcurl 7.11.2 or greater.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d63a3694d32f240f8cd11874f949cfc782eb976f" translate="yes" xml:space="preserve">
          <source>Available with ImageMagick library version 6.2.9 and higher.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbba7c2c42739d6c380fb1fcf68913813c87ac63" translate="yes" xml:space="preserve">
          <source>Average a set of images.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd0a1d206e4f93831dda20f5c96ef7e58caab5d5" translate="yes" xml:space="preserve">
          <source>Avoid relative paths</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60b23abf98e1576ad82a3cbc5fe67c83dbbac137" translate="yes" xml:space="preserve">
          <source>Avoid using this function in multithreaded webservers. It is better to change the file permissions with &lt;a href=&quot;function.chmod&quot;&gt;chmod()&lt;/a&gt; after creating the file. Using &lt;strong&gt;umask()&lt;/strong&gt; can lead to unexpected behavior of concurrently running scripts and the webserver itself because they all use the same umask.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae4f281df5a5d0ff3cad6371f76d5c29b6d953ec" translate="yes" xml:space="preserve">
          <source>B</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1e106769129d490628d379adc9944dc1a97899f" translate="yes" xml:space="preserve">
          <source>BCC &quot;string&quot; - match messages with &quot;string&quot; in the Bcc: field</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="296c881b22081ac7fc1bd5ac34a0f2b351238547" translate="yes" xml:space="preserve">
          <source>BCMath Arbitrary Precision Mathematics Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2596acf467ed24508271b8a69c5449a174f62e8" translate="yes" xml:space="preserve">
          <source>BEFORE &quot;date&quot; - match messages with Date: before &quot;date&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2aaac94f4a3acf6f39c58f2090ab106f3d4930f" translate="yes" xml:space="preserve">
          <source>BIG5</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c5be79e324f6dc6bfc3c27f72ec6b392480af62" translate="yes" xml:space="preserve">
          <source>BIG5-HKSCS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8306a543f91f1fd548cb382031a57ef6cd3bdffb" translate="yes" xml:space="preserve">
          <source>BMP</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dd60f86ebc6b695624d88ab45938de2c53f3378" translate="yes" xml:space="preserve">
          <source>BODY &quot;string&quot; - match messages with &quot;string&quot; in the body of the message</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ba208c7a57215fe25a2dc8edeb1eed6d80c323c" translate="yes" xml:space="preserve">
          <source>Back references</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdaf8c85240d0c5e1f06e716f861619cd56fe644" translate="yes" xml:space="preserve">
          <source>Back references &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="551beddb795532e5a92ad3cdcefa22095436b45e" translate="yes" xml:space="preserve">
          <source>Back references to the named subpatterns can be achieved by &lt;em&gt;(?P=name)&lt;/em&gt; or, since PHP 5.2.2, also by &lt;em&gt;\k&amp;lt;name&amp;gt;&lt;/em&gt; or &lt;em&gt;\k'name'&lt;/em&gt;. Additionally PHP 5.2.4 added support for &lt;em&gt;\k{name}&lt;/em&gt; and &lt;em&gt;\g{name}&lt;/em&gt;, and PHP 5.2.7 for &lt;em&gt;\g&amp;lt;name&amp;gt;&lt;/em&gt; and &lt;em&gt;\g'name'&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9347d8d598c4cb2d8566155d72f7c4d2046ce40" translate="yes" xml:space="preserve">
          <source>Back up one byte</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="875175e5d5500187d86d4f1da049a869af2b2fd2" translate="yes" xml:space="preserve">
          <source>Backend flags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2827dbf3ea8db45fd7cdaef9b5df9187fed640b" translate="yes" xml:space="preserve">
          <source>Backend flags:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e74510e6bfcd1b9aa9d70798e995080c6b829007" translate="yes" xml:space="preserve">
          <source>BadFunctionCallException (class)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e90c44bcb213a22384f05256f109c3d680db2f1d" translate="yes" xml:space="preserve">
          <source>BadMethodCallException &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28eda76447b813f1cd57954f1da801c624b08267" translate="yes" xml:space="preserve">
          <source>BadMethodCallException (class)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="273a15e99059abbcd1bcf640600a53e8689827b3" translate="yes" xml:space="preserve">
          <source>Base (class)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="895c330ff6166a7f13701f8d9b78f313787269c8" translate="yes" xml:space="preserve">
          <source>Base64</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a0d8a28fa755a5d7beb92cd2e604e489367d043" translate="yes" xml:space="preserve">
          <source>Base64-encoded data takes about 33% more space than the original data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dff0ab3670b8ed7dc2fbe6895ebbf63d5a51884" translate="yes" xml:space="preserve">
          <source>Base::__construct</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f667add283072c6592f2fe16315e52024273d1fe" translate="yes" xml:space="preserve">
          <source>Base::dispatch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a0a3ca2a31205fe51e1ef7b7e643f47ef70a348" translate="yes" xml:space="preserve">
          <source>Base::exit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbd023cb71312498ad371d7e90825f85428a1de7" translate="yes" xml:space="preserve">
          <source>Base::free</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08134d401d298e86bc5d916bdc4ac9616f91eaa9" translate="yes" xml:space="preserve">
          <source>Base::getFeatures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21319f80c4fb160851e587d7914fc820fc0d3cae" translate="yes" xml:space="preserve">
          <source>Base::getMethod</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85750375ece2b77256aa0f550276f2c814127db7" translate="yes" xml:space="preserve">
          <source>Base::getTimeOfDayCached</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ac1e9e9cc6e8232367ef3f6862b52f16603b2a2" translate="yes" xml:space="preserve">
          <source>Base::gotExit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93b66af7cda409543432fb82db28433754607b05" translate="yes" xml:space="preserve">
          <source>Base::gotStop</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05647dabf8966585ca9a82d1f1cba924e2a5e9cd" translate="yes" xml:space="preserve">
          <source>Base::loop</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cae474b96182ad2ab60986840ecd230fd694c98" translate="yes" xml:space="preserve">
          <source>Base::priorityInit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f8589b274d0435f596866753e68f956fc81ed4c" translate="yes" xml:space="preserve">
          <source>Base::reInit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d10b9ea28f1f6ae4b91587cedc5fb075301821d6" translate="yes" xml:space="preserve">
          <source>Base::stop</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcf768d4c33d8fd693efe7af7489ca6e9887ccfc" translate="yes" xml:space="preserve">
          <source>Basic SimpleXML usage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6fe4bdc5ad8be76b6a3ed3beb2156dddec7661c" translate="yes" xml:space="preserve">
          <source>Basic class definitions begin with the keyword &lt;em&gt;class&lt;/em&gt;, followed by a class name, followed by a pair of curly braces which enclose the definitions of the properties and methods belonging to the class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e026311ce3258038a04fbbcfba23d9314d86cc3" translate="yes" xml:space="preserve">
          <source>Basic usage example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b21b330c6c75359b011dfb4f587aaa281e8b660" translate="yes" xml:space="preserve">
          <source>Basic usage example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fcebeefad3cdbbf8733aa928160dec7dc90c1a1" translate="yes" xml:space="preserve">
          <source>Basics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b1d0932e690050294720df747abd11ac3bab048" translate="yes" xml:space="preserve">
          <source>Basics &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2fc66c4a563efb1afeaad5db6089bc8a639c940" translate="yes" xml:space="preserve">
          <source>Be aware that some socket implementations need to be handled very carefully. A few basic rules:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e653b4f1962c8efed3ff3a9eca5e7e481020823" translate="yes" xml:space="preserve">
          <source>Be careful about variables that may match HTML entities. Things like &amp;amp;amp, &amp;amp;copy and &amp;amp;pound are parsed by the browser and the actual entity is used instead of the desired variable name. This is an obvious hassle that the W3C has been telling people about for years. The reference is here: &lt;a href=&quot;http://www.w3.org/TR/html4/appendix/notes.html#h-B.2.2&quot;&gt;&amp;raquo; http://www.w3.org/TR/html4/appendix/notes.html#h-B.2.2&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae7528b981e33be5c015d406b1a692b7da734594" translate="yes" xml:space="preserve">
          <source>Be careful if you choose to escape characters 0, a, b, f, n, r, t and v. They will be converted to \0, \a, \b, \f, \n, \r, \t and \v, all of which are predefined escape sequences in C. Many of these sequences are also defined in other C-derived languages, including PHP, meaning that you may not get the desired result if you use the output of &lt;strong&gt;addcslashes()&lt;/strong&gt; to generate code in those languages with these characters defined in &lt;code&gt;charlist&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3053108a510ba1b77afd958defe49cd56024489f" translate="yes" xml:space="preserve">
          <source>Be careful when passing arguments with mixed types values because &lt;strong&gt;max()&lt;/strong&gt; can produce unpredictable results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3976d394fd8fd11aa1cc2a0da243feed43adac69" translate="yes" xml:space="preserve">
          <source>Be careful when passing arguments with mixed types values because &lt;strong&gt;min()&lt;/strong&gt; can produce unpredictable results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8f215b8c73243b357ec431c2af438b63393fc49" translate="yes" xml:space="preserve">
          <source>Be careful when sorting arrays with mixed types values because &lt;strong&gt;sort()&lt;/strong&gt; can produce unpredictable results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c50239c15e50e1fe1f80c40107413ed269d4e593" translate="yes" xml:space="preserve">
          <source>Be careful when using array syntax. Scalar keys will be coerced to integers by the engine. For example, &lt;code&gt;$map[&quot;1&quot;]&lt;/code&gt; will attempt to access &lt;code&gt;int(1)&lt;/code&gt;, while &lt;code&gt;$map-&amp;gt;get(&quot;1&quot;)&lt;/code&gt; will correctly look up the string key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02f8db2a41ecfb2ce014807a46b6be164c87a1d7" translate="yes" xml:space="preserve">
          <source>Be sure to read the &lt;a href=&quot;language.namespaces.faq#language.namespaces.faq.quote&quot;&gt;note about escaping namespace names in strings&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4078f231d0fd900e9af9c2e6b297b6fe68fed58b" translate="yes" xml:space="preserve">
          <source>Be sure to use the &lt;em&gt;===&lt;/em&gt; operator when checking for an error. Since the &lt;strong&gt;socket_select()&lt;/strong&gt; may return 0 the comparison with &lt;em&gt;==&lt;/em&gt; would evaluate to &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6d6284dc32d581c16d5f36f187c53b33c102ccb" translate="yes" xml:space="preserve">
          <source>Be sure to use the &lt;em&gt;===&lt;/em&gt; operator when checking for an error. Since the &lt;strong&gt;stream_select()&lt;/strong&gt; may return 0 the comparison with &lt;em&gt;==&lt;/em&gt; would evaluate to &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce6cdaf0cfdb1d5593b2fa773636195b753ad3ae" translate="yes" xml:space="preserve">
          <source>Became available when using Apache 1, or the PHP Apache 2 &lt;em&gt;filter&lt;/em&gt; API. Before this time, it was only available when using the Apache 2 &lt;em&gt;handler&lt;/em&gt; API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="027cb4ebb31964647b892890a464e9f71c4d523f" translate="yes" xml:space="preserve">
          <source>Because &lt;a href=&quot;function.pg-query&quot;&gt;pg_query()&lt;/a&gt; and &lt;a href=&quot;function.pg-query-params&quot;&gt;pg_query_params()&lt;/a&gt; return &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; if the query fails, you must use &lt;a href=&quot;function.pg-send-query&quot;&gt;pg_send_query()&lt;/a&gt; and &lt;a href=&quot;function.pg-get-result&quot;&gt;pg_get_result()&lt;/a&gt; to get the result handle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d8e9f9d5727aacc38922ff70b788e4d436605a3" translate="yes" xml:space="preserve">
          <source>Because &lt;a href=&quot;function.pg-query&quot;&gt;pg_query()&lt;/a&gt; returns &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; if the query fails, you must use &lt;a href=&quot;function.pg-send-query&quot;&gt;pg_send_query()&lt;/a&gt; and &lt;a href=&quot;function.pg-get-result&quot;&gt;pg_get_result()&lt;/a&gt; to get the result handle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5120dccb79efabf5d3147b0b200e55fbd248b15" translate="yes" xml:space="preserve">
          <source>Because &lt;a href=&quot;language.variables.variable&quot;&gt;variable variables&lt;/a&gt; may not be used with PHP's &lt;a href=&quot;language.variables.superglobals&quot;&gt;Superglobal arrays&lt;/a&gt; within functions, the Superglobal arrays may not be passed into &lt;strong&gt;compact()&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43c0679fcf1d6bf845895686d83b7db80dc57e53" translate="yes" xml:space="preserve">
          <source>Because &lt;em&gt;include&lt;/em&gt; is a special language construct, parentheses are not needed around its argument. Take care when comparing return value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e9a18aac7f0175716b5c6f7f505c54e2978d687" translate="yes" xml:space="preserve">
          <source>Because &lt;strong&gt;&lt;code&gt;NAN&lt;/code&gt;&lt;/strong&gt; represents any number of different values, &lt;strong&gt;&lt;code&gt;NAN&lt;/code&gt;&lt;/strong&gt; should not be compared to other values, including itself, and instead should be checked for using &lt;a href=&quot;function.is-nan&quot;&gt;is_nan()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="742f63224d1d9d85f5fabbd407cd1910cf9bf7d1" translate="yes" xml:space="preserve">
          <source>Because &lt;strong&gt;flock()&lt;/strong&gt; requires a file pointer, you may have to use a special lock file to protect access to a file that you intend to truncate by opening it in write mode (with a &quot;w&quot; or &quot;w+&quot; argument to &lt;a href=&quot;function.fopen&quot;&gt;fopen()&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffe83cce56f87d2269de20db1e518c1cbde72dee" translate="yes" xml:space="preserve">
          <source>Because &lt;strong&gt;str_ireplace()&lt;/strong&gt; replaces left to right, it might replace a previously inserted value when doing multiple replacements. Example #2 in the &lt;a href=&quot;function.str-replace&quot;&gt;str_replace()&lt;/a&gt; documentation demonstrates how this may affect you in practice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="601d4991fce2daf08791e8b557ade7c881872cf9" translate="yes" xml:space="preserve">
          <source>Because &lt;strong&gt;str_replace()&lt;/strong&gt; replaces left to right, it might replace a previously inserted value when doing multiple replacements. See also the examples in this document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a52be145bfc844459a274ff8346f997d63677d3b" translate="yes" xml:space="preserve">
          <source>Because &lt;strong&gt;strip_tags()&lt;/strong&gt; does not actually validate the HTML, partial or broken tags can result in the removal of more text/data than expected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89ea17c60834c6ec5f4416ee8e82c2a0cafe4caf" translate="yes" xml:space="preserve">
          <source>Because &lt;strong&gt;trim()&lt;/strong&gt; trims characters from the beginning and end of a &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt;, it may be confusing when characters are (or are not) removed from the middle. &lt;em&gt;trim('abc', 'bad')&lt;/em&gt; removes both 'a' and 'b' because it trims 'a' thus moving 'b' to the beginning to also be trimmed. So, this is why it &quot;works&quot; whereas &lt;em&gt;trim('abc', 'b')&lt;/em&gt; seemingly does not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ff6c8dcd728af9b42a4513d2b2ed01403471f4d" translate="yes" xml:space="preserve">
          <source>Because PHP determines the types of variables and converts them (generally) as needed, it is not always obvious what type a given variable is at any one time. PHP includes several functions which find out what type a variable is, such as: &lt;a href=&quot;function.gettype&quot;&gt;gettype()&lt;/a&gt;, &lt;a href=&quot;function.is-array&quot;&gt;is_array()&lt;/a&gt;, &lt;a href=&quot;function.is-float&quot;&gt;is_float()&lt;/a&gt;, &lt;a href=&quot;function.is-int&quot;&gt;is_int()&lt;/a&gt;, &lt;a href=&quot;function.is-object&quot;&gt;is_object()&lt;/a&gt;, and &lt;a href=&quot;function.is-string&quot;&gt;is_string()&lt;/a&gt;. See also the chapter on &lt;a href=&quot;https://secure.php.net/manual/en/language.types.php&quot;&gt;Types&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b92cda521a70c5a78c5cea8c208937866a5d133" translate="yes" xml:space="preserve">
          <source>Because PHP's &lt;a href=&quot;language.types.integer&quot;&gt;integer&lt;/a&gt; type is signed, and many IP addresses will result in negative integers on 32-bit architectures, you need to use the &quot;%u&quot; formatter of &lt;a href=&quot;function.sprintf&quot;&gt;sprintf()&lt;/a&gt; or &lt;a href=&quot;function.printf&quot;&gt;printf()&lt;/a&gt; to get the string representation of the unsigned IP address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9b14713cb8d30151df19327a73df314083c44f3" translate="yes" xml:space="preserve">
          <source>Because PHP's integer type is signed many crc32 checksums will result in negative integers on 32bit platforms. On 64bit installations all &lt;strong&gt;crc32()&lt;/strong&gt; results will be positive integers though.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b35f550177e1513f2591c2057c0eaa8c209ae060" translate="yes" xml:space="preserve">
          <source>Because assigning an array to another variable resets the original array's pointer, our example above would cause an endless loop had we assigned &lt;var&gt;&lt;var&gt;$fruit&lt;/var&gt;&lt;/var&gt; to another variable inside the loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42fbfd636633285fa330d6691aa389758b00d9e3" translate="yes" xml:space="preserve">
          <source>Because every system is setup differently, &lt;strong&gt;phpinfo()&lt;/strong&gt; is commonly used to check &lt;a href=&quot;https://secure.php.net/manual/en/configuration.php&quot;&gt;configuration settings&lt;/a&gt; and for available &lt;a href=&quot;language.variables.predefined&quot;&gt;predefined variables&lt;/a&gt; on a given system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="217f649fbba901b97556d64564224606c0cc7d37" translate="yes" xml:space="preserve">
          <source>Because of eccentricities in the performance of libresolv between platforms, &lt;strong&gt;&lt;code&gt;DNS_ANY&lt;/code&gt;&lt;/strong&gt; will not always return every record, the slower &lt;strong&gt;&lt;code&gt;DNS_ALL&lt;/code&gt;&lt;/strong&gt; will collect all records more reliably.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="911305148cc73c28fbb531f6591a7ddb6eed0b55" translate="yes" xml:space="preserve">
          <source>Because of the way &lt;a href=&quot;language.types.float&quot;&gt;float&lt;/a&gt;s are represented internally, you should not test two &lt;a href=&quot;language.types.float&quot;&gt;float&lt;/a&gt;s for equality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e2140f28ef482edb6906f2ffa9ab21aba29bce8" translate="yes" xml:space="preserve">
          <source>Because setting a cookie with a value of &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; will try to delete the cookie, you should not use boolean values. Instead, use &lt;em&gt;0&lt;/em&gt; for &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; and &lt;em&gt;1&lt;/em&gt; for &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a8e48a3bfc93a9a70219fcffda2fc4f64c90a93" translate="yes" xml:space="preserve">
          <source>Because static methods are callable without an instance of the object created, the pseudo-variable &lt;var&gt;&lt;var&gt;$this&lt;/var&gt;&lt;/var&gt; is not available inside the method declared as static.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e82ceeddeebe2487481ffc2480c9013ef5873411" translate="yes" xml:space="preserve">
          <source>Because the &lt;strong&gt;SessionHandler&lt;/strong&gt; wraps the current internal save handler methods, the above example of encryption can be applied to any internal save handler without having to know the internals of the handlers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e213c6bd57cae2bea79f07fe13195bbebd479202" translate="yes" xml:space="preserve">
          <source>Because the effects may vary depending on the ODBC driver, use of this function in scripts to be made publicly available is strongly discouraged. Also, some ODBC options are not available to this function because they must be set before the connection is established or the query is prepared. However, if on a particular job it can make PHP work so your boss doesn't tell you to use a commercial product, that's all that really matters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37904d2e4f8679067efe067a14482bc70d2b1533" translate="yes" xml:space="preserve">
          <source>Because the value of an &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; can be anything, it can also be another &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt;. This enables the creation of recursive and multi-dimensional &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7600e311083b907d09d32fc5aa79f89e788419fc" translate="yes" xml:space="preserve">
          <source>Because there are so many methods, here is a handy list of methods, somewhat reduced to their general purpose:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44f1dbda51e44db8cdd5ab6b41daf995d5fdd0ae" translate="yes" xml:space="preserve">
          <source>Because this function depends on the current scope to determine parameter details, it cannot be used as a function parameter in versions prior to 5.3.0. If this value must be passed, the results should be assigned to a variable, and that variable should be passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61b1f70c4aee7fe9b93217818cc16d2125d2548a" translate="yes" xml:space="preserve">
          <source>Because this method uses the modulus operation, numbers which are not positive integers may give unexpected results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fc01d72c49409313e152894c7abb5f87c011025" translate="yes" xml:space="preserve">
          <source>Because variables in PHP can't have dots and spaces in their names, those are converted to underscores. Same applies to naming of respective key names in case of using this function with &lt;code&gt;result&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca01b1c09bf5d855a028d6e0ee64dc156b0d9e7a" translate="yes" xml:space="preserve">
          <source>Before 5.3.6, the only values recognized are &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt;, which are the same as setting or not setting the &lt;strong&gt;&lt;code&gt;DEBUG_BACKTRACE_PROVIDE_OBJECT&lt;/code&gt;&lt;/strong&gt; option respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e5d80f3812d2931324bb9f0c6f55b47963a5319" translate="yes" xml:space="preserve">
          <source>Before PHP 5.1.0, negative timestamps were not supported under any known version of Windows and some other systems as well. Therefore the range of valid years was limited to 1970 through 2038.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f17ced3ef8abb6d18ca80a5e343e53522756984c" translate="yes" xml:space="preserve">
          <source>Before PHP 5.1.0, this function returned &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; when &lt;code&gt;text&lt;/code&gt; was an empty string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffe6e051f6ef47bce95796f19518997c457552b4" translate="yes" xml:space="preserve">
          <source>Before PHP 5.3.4, on Windows, &lt;strong&gt;sleep()&lt;/strong&gt; always returns &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; when sleep has occurred, regardless of whether the sleep was interrupted or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1bfed4a6b9231dcc874a27d99a85c9060365b4c" translate="yes" xml:space="preserve">
          <source>Before PHP 5.4, referenced variables in &lt;code&gt;param_arr&lt;/code&gt; are passed to the function by reference, regardless of whether the function expects the respective parameter to be passed by reference. This form of call-time pass by reference does not emit a deprecation notice, but it is nonetheless deprecated, and has been removed in PHP 5.4. Furthermore, this does not apply to internal functions, for which the function signature is honored. Passing by value when the function expects a parameter by reference results in a warning and having &lt;a href=&quot;function.call-user-func&quot;&gt;call_user_func()&lt;/a&gt; return &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; (there is, however, an exception for passed values with reference count = 1, such as in literals, as these can be turned into references without ill effects &amp;mdash; but also without writes to that value having any effect &amp;mdash;; do not rely in this behavior, though, as the reference count is an implementation detail and the soundness of this behavior is questionable).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="510fd6e833a9aac4303574941451c687288f37c7" translate="yes" xml:space="preserve">
          <source>Before PHP 5.4.20/5.5.4 instead of &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; you will receive -99999 upon accessing the property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be43398b62b0b32337b176ab32227c952f58c12f" translate="yes" xml:space="preserve">
          <source>Before PHP 5.4.42 and 5.5.27, repectively, &lt;code&gt;additional_headers&lt;/code&gt; did not have mail header injection protection. Therefore, users must make sure specified headers are safe and contains headers only. i.e. Never start mail body by putting multiple newlines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e59c4ecdbb1feedbbc002bb207c9d11b29754678" translate="yes" xml:space="preserve">
          <source>Before PHP 5.5.0, referencing &lt;em&gt;$value&lt;/em&gt; is only possible if the iterated array can be referenced (i.e. if it is a variable). The following code works only as of PHP 5.5.0:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92600367e7e9130bdb17942278729aa77c98aed0" translate="yes" xml:space="preserve">
          <source>Before PHP 5.5.0, this function is only available if PHP is compiled with the bundled version of the GD library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="815c0b744ffd33bbff0ec709407ba2c3b802fa94" translate="yes" xml:space="preserve">
          <source>Before PHP 5.6 neither functions nor constants can be imported via the &lt;em&gt;use&lt;/em&gt; statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66a06e73e512895f01253fc9f996f1a9949eb62c" translate="yes" xml:space="preserve">
          <source>Before PHP 5.6 the only elements that are affected by &lt;em&gt;use&lt;/em&gt; statements are namespaces and class names. In order to shorten a long constant or function, import its containing namespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6126181ebef6a388513462befc67a17421cb707" translate="yes" xml:space="preserve">
          <source>Before PHP 7, &lt;strong&gt;Exception&lt;/strong&gt; did not implement the &lt;a href=&quot;class.throwable&quot;&gt;Throwable&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4921bd6888421cc59367b27d1350f2e32009145e" translate="yes" xml:space="preserve">
          <source>Before PHP 7.1.0, &lt;strong&gt;list()&lt;/strong&gt; only worked on numerical arrays and assumes the numerical indices start at 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c386aa444d2af85b7f3ddf09660ebdb15e7ce89" translate="yes" xml:space="preserve">
          <source>Before PHP 7.1.0, rewrite vars set by &lt;a href=&quot;function.output-add-rewrite-var&quot;&gt;output_add_rewrite_var()&lt;/a&gt; use the same Session module trans sid output buffer. Since PHP 7.1.0, dedicated output buffer is used and &lt;strong&gt;output_reset_rewrite_vars()&lt;/strong&gt; only removes rewrite vars defined by &lt;a href=&quot;function.output-add-rewrite-var&quot;&gt;output_add_rewrite_var()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="630bdb3ba2cc6dc0b0bd50ec241d00529ccb0fb8" translate="yes" xml:space="preserve">
          <source>Before PHP 7.1.0, rewrite vars set by &lt;strong&gt;output_add_rewrite_var()&lt;/strong&gt; use the same Session module trans sid output buffer. Since PHP 7.1.0, dedicated output buffer is used, &lt;a href=&quot;https://secure.php.net/manual/en/outcontrol.configuration.php#ini.url-rewriter.tags&quot;&gt; url_rewriter.tags&lt;/a&gt; is used solely for output functions, &lt;a href=&quot;https://secure.php.net/manual/en/outcontrol.configuration.php#ini.url-rewriter.tags&quot;&gt;url_rewriter.hosts&lt;/a&gt; is added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c01d465c5c2fbfadc4ae15aaf091cc68adaa4450" translate="yes" xml:space="preserve">
          <source>Before PHP 7.2.0 the only means to get a list of supported hash algorithms has been to call &lt;a href=&quot;function.hash-algos&quot;&gt;hash_algos()&lt;/a&gt; which also returns hash algorithms that are not suitable for &lt;a href=&quot;function.hash-hmac&quot;&gt;hash_hmac()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d9caf436270651a87ebf4561be6925341a4bc2c" translate="yes" xml:space="preserve">
          <source>Before PHP 7.3, any strings that are not set will silently be skipped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29eb1713f56cee95f0551e5b9c435a58142b4fd8" translate="yes" xml:space="preserve">
          <source>Before PHP 7.3.0 &lt;strong&gt;bcmul()&lt;/strong&gt; may return a result with fewer digits after the decimal point than the &lt;code&gt;scale&lt;/code&gt; parameter would indicate. This only occurs when the result doesn't require all of the precision allowed by the &lt;code&gt;scale&lt;/code&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2ab771fbab9ca5a9adda658971433f699554dab" translate="yes" xml:space="preserve">
          <source>Before PHP 7.3.0 &lt;strong&gt;bcpow()&lt;/strong&gt; may return a result with fewer digits after the decimal point than the &lt;code&gt;scale&lt;/code&gt; parameter would indicate. This only occurs when the result doesn't require all of the precision allowed by the &lt;code&gt;scale&lt;/code&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c32ee470457a0e760bfbeaf8f3481d8b3464da7f" translate="yes" xml:space="preserve">
          <source>Before discussing the use of namespaces, it is important to understand how PHP knows which namespaced element your code is requesting. A simple analogy can be made between PHP namespaces and a filesystem. There are three ways to access a file in a file system:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="000db2515e4fd764dd52a845e6cc8dba17f269cf" translate="yes" xml:space="preserve">
          <source>Before this version values of some magic constants were always lowercased. All of them are case-sensitive now (contain names as they were declared).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73641e4b29ba69dadae706aa698b22be9a3639e1" translate="yes" xml:space="preserve">
          <source>Before v3.0 a second argument &lt;code&gt;&amp;amp;cas_tokens&lt;/code&gt; was in use. It was filled with the CAS token values for the found items. The &lt;code&gt;&amp;amp;cas_tokens&lt;/code&gt; parameter was removed in v3.0 of the extension. It was replaced with a new flag &lt;strong&gt;&lt;code&gt;Memcached::GET_EXTENDED&lt;/code&gt;&lt;/strong&gt; that needs is to be used as the value for &lt;code&gt;flags&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5758180c140fa745756a5d79fd33e34fc099239" translate="yes" xml:space="preserve">
          <source>Begin checking for events and calling callbacks &lt;em&gt;for the default loop&lt;/em&gt; . Returns when a callback calls &lt;a href=&quot;ev.stop&quot;&gt;Ev::stop()&lt;/a&gt; method, or the flags are nonzero(in which case the return value is true) or when there are no active watchers which reference the loop( &lt;a href=&quot;evwatcher.keepalive&quot;&gt;EvWatcher::keepalive()&lt;/a&gt; is &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt;), in which case the return value will be &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt;. The return value can generally be interpreted as &lt;em&gt;if &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt;, there is more work left to do&lt;/em&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d5355699cf9574c92e98c8827deb60f45030e5e" translate="yes" xml:space="preserve">
          <source>Begin checking for events and calling callbacks for the current event loop. Returns when a callback calls &lt;a href=&quot;ev.stop&quot;&gt;Ev::stop()&lt;/a&gt; method, or the flags are nonzero(in which case the return value is true) or when there are no active watchers which reference the loop( &lt;a href=&quot;evwatcher.keepalive&quot;&gt;EvWatcher::keepalive()&lt;/a&gt; is &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt;), in which case the return value will be &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt;. The return value can generally be interpreted as &lt;em&gt;if &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt;, there is more work left to do&lt;/em&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36506190c2135ae8c2b4ea546bfa2116942eadf4" translate="yes" xml:space="preserve">
          <source>Begin timestamp.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cf0b865ce0821948992d3642584fcb7e901151e" translate="yes" xml:space="preserve">
          <source>Begins a transaction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b49640a6a748f0c175fc20884ad162b23dcd53b7" translate="yes" xml:space="preserve">
          <source>Begins a transaction. Requires the InnoDB engine (it is enabled by default). For additional details about how MySQL transactions work, see &lt;a href=&quot;http://dev.mysql.com/doc/mysql/en/commit.html&quot;&gt;&amp;raquo; http://dev.mysql.com/doc/mysql/en/commit.html&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02a9520cb229a3e806630a863ce3214ff40756e3" translate="yes" xml:space="preserve">
          <source>Behaves as &lt;a href=&quot;eventbuffer.addbuffer&quot;&gt;EventBuffer::addBuffer()&lt;/a&gt; , except that it moves data to the front of the buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4f566c4d7e2c407ddb3e3f84d6b251c7a0b35ab" translate="yes" xml:space="preserve">
          <source>Behaves as &lt;a href=&quot;eventbuffer.read&quot;&gt;EventBuffer::read()&lt;/a&gt; , except that it does not copy the data: it just removes it from the front of the buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7159080e86b86a14d2c3911c77707da6fa4fddb4" translate="yes" xml:space="preserve">
          <source>Behaves just like &lt;a href=&quot;eventbuffer.read&quot;&gt;EventBuffer::read()&lt;/a&gt; , but does not drain any data from the buffer. I.e. it copies the first &lt;code&gt;max_bytes&lt;/code&gt; bytes from the front of the buffer into &lt;code&gt;data&lt;/code&gt; . If there are fewer than &lt;code&gt;max_bytes&lt;/code&gt; bytes available, the function copies all the bytes there are.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26f2456afbfcb0cca11ac1bb8f13fb701750b72c" translate="yes" xml:space="preserve">
          <source>Behaves the same as &lt;a href=&quot;function.strftime&quot;&gt;strftime()&lt;/a&gt; except that the time returned is Greenwich Mean Time (GMT). For example, when run in Eastern Standard Time (GMT -0500), the first line below prints &quot;Dec 31 1998 20:00:00&quot;, while the second prints &quot;Jan 01 1999 01:00:00&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7d7e94e88ff40615fc8af92c1f6c7dfe2cbed2a" translate="yes" xml:space="preserve">
          <source>Below is an example that illustrates the internal structure of the arrays being generated by the function. We use a simple &lt;em&gt;note&lt;/em&gt; tag embedded inside a &lt;em&gt;para&lt;/em&gt; tag, and then we parse this and print out the structures generated:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4627504e2611879fb6411719ba154382da2522b" translate="yes" xml:space="preserve">
          <source>Below normal priority</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="414dc71e6c63f0887b0ec9b16099170828799d75" translate="yes" xml:space="preserve">
          <source>Besides the methods listed here, this class also has an &lt;em&gt;__invoke&lt;/em&gt; method. This is for consistency with other classes that implement &lt;a href=&quot;language.oop5.magic#language.oop5.magic.invoke&quot;&gt;calling magic&lt;/a&gt;, as this method is not used for calling the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41821313c26ad3752532088e0a30b10127e31cba" translate="yes" xml:space="preserve">
          <source>Beware of patterns that contain nested indefinite repeats. These can take a long time to run when applied to a string that does not match. Consider the pattern fragment &lt;em&gt;(a+)*&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a7d116573e9636192a34f0e5848882a5a8729a1" translate="yes" xml:space="preserve">
          <source>Beyond the above advice, note that you can also hook into the serialization and unserialization events on an object using the &lt;a href=&quot;language.oop5.magic#object.sleep&quot;&gt;__sleep()&lt;/a&gt; and &lt;a href=&quot;language.oop5.magic#object.wakeup&quot;&gt;__wakeup()&lt;/a&gt; methods. Using &lt;a href=&quot;language.oop5.magic#object.sleep&quot;&gt;__sleep()&lt;/a&gt; also allows you to only serialize a subset of the object's properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2514d12d8068c8b402b7adac2bc9b12b1d380d7d" translate="yes" xml:space="preserve">
          <source>Big5 with Hong Kong extensions, Traditional Chinese.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66639f7d455dd71faa9147f5d69e5ce885d8bebd" translate="yes" xml:space="preserve">
          <source>Binary</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7205f20354da7736920d9b84a6e30124b9e24a96" translate="yes" xml:space="preserve">
          <source>Binary &lt;a href=&quot;language.types.integer&quot;&gt;integer&lt;/a&gt; literals are available since PHP 5.4.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1954bfbe4523cd5011686c373b6e17de91f0855" translate="yes" xml:space="preserve">
          <source>Binary safe case-insensitive string comparison.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29829bc8db48714274cb2e445a2c46ff09faeb1f" translate="yes" xml:space="preserve">
          <source>Binary string representation of &lt;code&gt;number&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b175735ed3073daec491aedf910138426164a01" translate="yes" xml:space="preserve">
          <source>Bind variables for the parameter markers in the SQL statement that was passed to &lt;a href=&quot;mysqli.prepare&quot;&gt;mysqli_prepare()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7c97cd0d229f7ba63e5e98a2c456af2b6d4539e" translate="yes" xml:space="preserve">
          <source>Binding columns in the result set to PHP variables is an effective way to make the data contained in each row immediately available to your application. The following example demonstrates how PDO allows you to bind and retrieve columns with a variety of options and with intelligent defaults.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45fc3f5d66badbb2ea7467997f8da6369c2d2e23" translate="yes" xml:space="preserve">
          <source>Binding more values than specified is not possible; if more keys exist in &lt;code&gt;input_parameters&lt;/code&gt; than in the SQL specified in the &lt;a href=&quot;pdo.prepare&quot;&gt;PDO::prepare()&lt;/a&gt;, then the statement will fail and an error is emitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a5ae95af964abb301b00f502dd17c440aff2801" translate="yes" xml:space="preserve">
          <source>Binds a PHP variable to a corresponding named or question mark placeholder in the SQL statement that was used to prepare the statement. Unlike &lt;a href=&quot;pdostatement.bindvalue&quot;&gt;PDOStatement::bindValue()&lt;/a&gt;, the variable is bound as a reference and will only be evaluated at the time that &lt;a href=&quot;pdostatement.execute&quot;&gt;PDOStatement::execute()&lt;/a&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fd90a10de3a02c1d4a7651f87c90316aa4b42e3" translate="yes" xml:space="preserve">
          <source>Binds a parameter to a statement variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8b38586af1ee4b44e9fe60bfd74805629a2a4ee" translate="yes" xml:space="preserve">
          <source>Binds a value to a corresponding named or question mark placeholder in the SQL statement that was used to prepare the statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd6741172297eaebe838098922865a7902259c0d" translate="yes" xml:space="preserve">
          <source>Binds an HTTP server on the specified address and port.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="342502ffa532fb522624f8b96afa245a3ac904fb" translate="yes" xml:space="preserve">
          <source>Binds columns in the result set to variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83a7a3ad889ad4da86f116b68b23fbdf206ef95f" translate="yes" xml:space="preserve">
          <source>Binds per-field weights by name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b024d4c8d01cc81c2e9665796e520eb890bc6f55" translate="yes" xml:space="preserve">
          <source>Binds the name given in &lt;code&gt;address&lt;/code&gt; to the socket described by &lt;code&gt;socket&lt;/code&gt;. This has to be done before a connection is be established using &lt;a href=&quot;function.socket-connect&quot;&gt;socket_connect()&lt;/a&gt; or &lt;a href=&quot;function.socket-listen&quot;&gt;socket_listen()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b7f20bf936b6e7d18605e3f30eb6d0e139a907c" translate="yes" xml:space="preserve">
          <source>Binds the value of a parameter to a statement variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9780b9e1c12559abd6016ff564b7223f035300cd" translate="yes" xml:space="preserve">
          <source>Binds to the LDAP directory with specified RDN and password.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="376f4955d4928d0c1c325d76a4122ffa20cc994d" translate="yes" xml:space="preserve">
          <source>Bit mask of &lt;em&gt;EventListener::OPT_*&lt;/em&gt; constants. See &lt;a href=&quot;class.eventlistener#eventlistener.constants&quot;&gt;EventListener constants&lt;/a&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2b84e580259b4bb3421a5aa5860694ab700746f" translate="yes" xml:space="preserve">
          <source>Bit mask of the flags to set. See &lt;a href=&quot;class.splfileobject#splfileobject.constants&quot;&gt;SplFileObject constants&lt;/a&gt; for the available flags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bf86ff4d0c973ecae90926c21de45322c20ac6a" translate="yes" xml:space="preserve">
          <source>Bit mask of watcher &lt;a href=&quot;class.ev#ev.constants.watcher-revents&quot;&gt;received events&lt;/a&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="465ce1a345e8a92de5920141ab5cfb869f2d1bbb" translate="yes" xml:space="preserve">
          <source>Bit masks of (received) events:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d04a675c5c6294079f55e51c9996bd70e53ada14" translate="yes" xml:space="preserve">
          <source>Bit shifting in PHP is arithmetic. Bits shifted off either end are discarded. Left shifts have zeros shifted in on the right while the sign bit is shifted out on the left, meaning the sign of an operand is not preserved. Right shifts have copies of the sign bit shifted in on the left, meaning the sign of an operand is preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53a5d7a0ecaf6e070861a98456610f923f5f72e1" translate="yes" xml:space="preserve">
          <source>Bitfield of the modifiers to get.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d5bbd3678c09548204d1d8fa27df4d3a635aea0" translate="yes" xml:space="preserve">
          <source>Bitmask consisting of &lt;strong&gt;&lt;code&gt;JSON_HEX_QUOT&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;JSON_HEX_TAG&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;JSON_HEX_AMP&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;JSON_HEX_APOS&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;JSON_NUMERIC_CHECK&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;JSON_PRETTY_PRINT&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;JSON_UNESCAPED_SLASHES&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;JSON_FORCE_OBJECT&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;JSON_PRESERVE_ZERO_FRACTION&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;JSON_UNESCAPED_UNICODE&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;JSON_PARTIAL_OUTPUT_ON_ERROR&lt;/code&gt;&lt;/strong&gt;. The behaviour of these constants is described on the &lt;a href=&quot;https://secure.php.net/manual/en/json.constants.php&quot;&gt;JSON constants&lt;/a&gt; page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0f6fa82d9aa08f28480f20ed3a0b94768c86762" translate="yes" xml:space="preserve">
          <source>Bitmask field which may be set to any combination of connection flags. Currently the select of connection flags is limited to &lt;strong&gt;&lt;code&gt;STREAM_CLIENT_CONNECT&lt;/code&gt;&lt;/strong&gt; (default), &lt;strong&gt;&lt;code&gt;STREAM_CLIENT_ASYNC_CONNECT&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;STREAM_CLIENT_PERSISTENT&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f5e68cb9e77eab0d45d44c1122fa9cc7541dee9" translate="yes" xml:space="preserve">
          <source>Bitmask of &lt;strong&gt;&lt;code&gt;CURLPROTO_*&lt;/code&gt;&lt;/strong&gt; values. If used, this bitmask limits what protocols libcurl may use in a transfer that it follows to in a redirect when &lt;strong&gt;&lt;code&gt;CURLOPT_FOLLOWLOCATION&lt;/code&gt;&lt;/strong&gt; is enabled. This allows you to limit specific transfers to only be allowed to use a subset of protocols in redirections. By default libcurl will allow all protocols except for FILE and SCP. This is a difference compared to pre-7.19.4 versions which unconditionally would follow to all protocols supported. See also &lt;strong&gt;&lt;code&gt;CURLOPT_PROTOCOLS&lt;/code&gt;&lt;/strong&gt; for protocol constant values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3e85a97faf368f1ec6dd750d4dafdcd5161da54" translate="yes" xml:space="preserve">
          <source>Bitmask of &lt;strong&gt;&lt;code&gt;CURLPROTO_*&lt;/code&gt;&lt;/strong&gt; values. If used, this bitmask limits what protocols libcurl may use in the transfer. This allows you to have a libcurl built to support a wide range of protocols but still limit specific transfers to only be allowed to use a subset of them. By default libcurl will accept all protocols it supports. See also &lt;strong&gt;&lt;code&gt;CURLOPT_REDIR_PROTOCOLS&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb0f55235110490c705393491bc2143c003a3bf8" translate="yes" xml:space="preserve">
          <source>Bitmask of &lt;strong&gt;&lt;code&gt;Event::READ&lt;/code&gt;&lt;/strong&gt; , &lt;strong&gt;&lt;code&gt;Event::WRITE&lt;/code&gt;&lt;/strong&gt; , or both.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfed8cddc7f30e823296e3aa0d5ba8b34778b2fa" translate="yes" xml:space="preserve">
          <source>Bitmask of &lt;strong&gt;&lt;code&gt;PHP_OUTPUT_HANDLER_*&lt;/code&gt;&lt;/strong&gt; constants.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d41be63640dd140c5997c3f35ebafa787271f37f" translate="yes" xml:space="preserve">
          <source>Bitmask of JSON decode options. Currently there are two supported options. The first is &lt;strong&gt;&lt;code&gt;JSON_BIGINT_AS_STRING&lt;/code&gt;&lt;/strong&gt; that allows casting big integers to string instead of floats which is the default. The second option is &lt;strong&gt;&lt;code&gt;JSON_OBJECT_AS_ARRAY&lt;/code&gt;&lt;/strong&gt; that has the same effect as setting &lt;code&gt;assoc&lt;/code&gt; to &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcde88a827a312a8146d4870b13dba0f0fe03980" translate="yes" xml:space="preserve">
          <source>Bitmask of flags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e72a5ec76976e9ec665f70875a442b9317f423b4" translate="yes" xml:space="preserve">
          <source>Bitmask of required features. See &lt;a href=&quot;class.eventconfig#eventconfig.constants&quot;&gt; &lt;em&gt;EventConfig::FEATURE_*&lt;/em&gt; constants&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bfd9f1474b921bceb8ee4a42fc8b5850a4a2f43" translate="yes" xml:space="preserve">
          <source>Bitmask of the flags to set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d1d989a1902c2b90386c0ff0bffb941fc5df9c9" translate="yes" xml:space="preserve">
          <source>Bits that are set in &lt;var&gt;&lt;var&gt;$a&lt;/var&gt;&lt;/var&gt; are not set, and vice versa.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ca4636e90f871d56d49278846817d4b25798edf" translate="yes" xml:space="preserve">
          <source>Bits that are set in &lt;var&gt;&lt;var&gt;$a&lt;/var&gt;&lt;/var&gt; or &lt;var&gt;&lt;var&gt;$b&lt;/var&gt;&lt;/var&gt; but not both are set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8d94b3afb117f66a82b2f4134e85ccd6584028b" translate="yes" xml:space="preserve">
          <source>Bits that are set in both &lt;var&gt;&lt;var&gt;$a&lt;/var&gt;&lt;/var&gt; and &lt;var&gt;&lt;var&gt;$b&lt;/var&gt;&lt;/var&gt; are set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b0ea6e7bed56101b1bf22d52f268c2159eb010a" translate="yes" xml:space="preserve">
          <source>Bits that are set in either &lt;var&gt;&lt;var&gt;$a&lt;/var&gt;&lt;/var&gt; or &lt;var&gt;&lt;var&gt;$b&lt;/var&gt;&lt;/var&gt; are set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c2405ca81fd65c0322042b11819b72aaf432508" translate="yes" xml:space="preserve">
          <source>Bitwise OR of the &lt;a href=&quot;https://secure.php.net/manual/en/runkit.constants.php&quot;&gt;&lt;em&gt;RUNKIT_IMPORT_*&lt;/em&gt; family of constants&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f06f824cef5caab026aebdaccc85d665d4b620db" translate="yes" xml:space="preserve">
          <source>Bitwise Operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e1e72417f6d1d5bb871a3d9c377c1ced9cb59b2" translate="yes" xml:space="preserve">
          <source>Bitwise Operators &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7a6974fecf3c787a78bec79ec9eb88cfe0205c2" translate="yes" xml:space="preserve">
          <source>Bitwise operators allow evaluation and manipulation of specific bits within an integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5e2ee6051b4bf4131d3f97441f880feec7b4508" translate="yes" xml:space="preserve">
          <source>Blends the fill color with each pixel in the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46e1d39d7877c858ec188aa048154587a129261f" translate="yes" xml:space="preserve">
          <source>Block at most one(wait, but don't loop)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5500713d4da12f5a4da15115ea222c32cfb07c62" translate="yes" xml:space="preserve">
          <source>Block the process for the given number of seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a637713db8ef9042d5487dc4abb649d9a9da695" translate="yes" xml:space="preserve">
          <source>Block until a new searcher is opened and registered as the main query searcher, making the changes visible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03e4760f8e9a9baa4718c848933cf1784961831b" translate="yes" xml:space="preserve">
          <source>Block until at least &lt;code&gt;len&lt;/code&gt; are received. However, if a signal is caught or the remote host disconnects, the function may return less data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ecb643710e2492ef5bb16f408ad6e1bed65b5ac" translate="yes" xml:space="preserve">
          <source>Blocks packets arriving from a specific source to a specific multicast group, which must have been previously joined. (added in PHP 5.4)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f8382ec47eb8c09ed09a4bb72874a406c393c0f" translate="yes" xml:space="preserve">
          <source>Blocks until there is activity on any of the curl_multi connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aa08fdaf2db1541666fbf7ffbc49f8713d92894" translate="yes" xml:space="preserve">
          <source>Blur an image, then display to the browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79688542adfa2ae35ecdb7fac4e0b9776a6bf449" translate="yes" xml:space="preserve">
          <source>Blur radius</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7807285d454c5eef5d53a68b62068df2fce7f59" translate="yes" xml:space="preserve">
          <source>Blurs an image. We convolve the image with a Gaussian operator of the given radius and standard deviation (sigma). For reasonable results, the radius should be larger than sigma. Use a radius of 0 and selects a suitable radius for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89a17bc86bdbf48525c60a44aba28803628ee7e4" translate="yes" xml:space="preserve">
          <source>Body transfer encoding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c6ec93fb49ff02d92cff3563fb57223953172fe" translate="yes" xml:space="preserve">
          <source>Bool flag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b76ff4906f33c2dd97ddd929b9662ba8cac6174c" translate="yes" xml:space="preserve">
          <source>Boolean</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eba5b1e2218c2218573b77c1bccefe60fabea2bc" translate="yes" xml:space="preserve">
          <source>Boolean is returned as &quot;t&quot; or &quot;f&quot;. All other types, including arrays are returned as strings formatted in the same default PostgreSQL manner that you would see in the &lt;strong&gt;psql&lt;/strong&gt; program. Database &lt;em&gt;NULL&lt;/em&gt; values are returned as &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0786cdff946e6084c50bb7df6cacd8ed965599fa" translate="yes" xml:space="preserve">
          <source>Booleans</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5168c0e8edad4a7175363d16e1be9abd28a846cb" translate="yes" xml:space="preserve">
          <source>Booleans &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4acaedf5d7eec7fd32e95d56c72311b17a769d5" translate="yes" xml:space="preserve">
          <source>Boost value. Boosts documents with matching terms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7893c77d507bcbbf77975ce0f6b30a2f2cf373c0" translate="yes" xml:space="preserve">
          <source>Bootstrap is a mechanism used to do some intial config before a Application run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f208ff04980c91ad5d5b79edf01f26e5a704e573" translate="yes" xml:space="preserve">
          <source>Border height</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eccc4059e13fc7e1fce985c7deaab3ca407191f9" translate="yes" xml:space="preserve">
          <source>Border width</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14f10d51bc18c29e2c307fe416bb95c845e0dd11" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;functions.arguments#functions.variable-arg-list&quot;&gt;variable number of arguments&lt;/a&gt; and &lt;a href=&quot;functions.arguments#functions.arguments.default&quot;&gt;default arguments&lt;/a&gt; are supported in functions. See also the function references for &lt;a href=&quot;function.func-num-args&quot;&gt;func_num_args()&lt;/a&gt;, &lt;a href=&quot;function.func-get-arg&quot;&gt;func_get_arg()&lt;/a&gt;, and &lt;a href=&quot;function.func-get-args&quot;&gt;func_get_args()&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52086faa34380c792cff47e63c67d87596c31b76" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;source&lt;/code&gt; and &lt;code&gt;dest&lt;/code&gt; may now be URLs if the &quot;fopen wrappers&quot; have been enabled. See &lt;a href=&quot;function.fopen&quot;&gt;fopen()&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="047dda88cece1a79c34d2017973e651282fc5a1d" translate="yes" xml:space="preserve">
          <source>Both &lt;strong&gt;&lt;code&gt;SORT_STRING&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;SORT_REGULAR&lt;/code&gt;&lt;/strong&gt; are case sensitive, strings starting with a capital letter will come before strings starting with a lowercase letter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17b793a11772af76deea9e8818870f1ad6635eda" translate="yes" xml:space="preserve">
          <source>Both arguments must be of the same length to be compared successfully. When arguments of differing length are supplied, &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; is returned immediately and the length of the known string may be leaked in case of a timing attack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="465a2fb93ebf06813e906fb6b9f0a200e7691d08" translate="yes" xml:space="preserve">
          <source>Both operands and the result for the &lt;em&gt;&amp;lt;&amp;lt;&lt;/em&gt; and &lt;em&gt;&amp;gt;&amp;gt;&lt;/em&gt; operators are always treated as integers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d172067189f7539a928ee45cf7ac67f8bf26054" translate="yes" xml:space="preserve">
          <source>Both square brackets and curly braces can be used interchangeably for accessing array elements (e.g. &lt;em&gt;$array[42]&lt;/em&gt; and &lt;em&gt;$array{42}&lt;/em&gt; will both do the same thing in the example above).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cde617e452bcf70453ceb228fbdfd8ae820962a" translate="yes" xml:space="preserve">
          <source>Bottom right x coordinate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f57d57586cefac38eb286dc1f19e78c5cc329053" translate="yes" xml:space="preserve">
          <source>Bottom right y coordinate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="327cb3f57887d974b9e84e7ad6cd3f1cb560b545" translate="yes" xml:space="preserve">
          <source>Bracket style delimiters do not need to be escaped when they are used as meta characters within the pattern, but as with other delimiters they must be escaped when they are used as literal characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18b4dce48094c7dd485e28f03e6b95be5421ef4e" translate="yes" xml:space="preserve">
          <source>Breaks this node into two nodes at the specified &lt;code&gt;offset&lt;/code&gt;, keeping both in the tree as siblings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8b19c1c9e8e112a2863254cb6122a231d27444d" translate="yes" xml:space="preserve">
          <source>Broadcast to all Threads blocking on a call to &lt;a href=&quot;cond.wait&quot;&gt;Cond::wait()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fe2b2d795f3f2f777c42a2cf0b7926852276d30" translate="yes" xml:space="preserve">
          <source>Buffer (class)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e629f4bce0e11cebfc66d3ee51c9da3272876a9" translate="yes" xml:space="preserve">
          <source>Buffer::__construct</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8a432d4b3074b504525ed57c1bbb7c3adf831ac" translate="yes" xml:space="preserve">
          <source>Buffer::add</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb88467614c3b6c171e82d4529eadd21f9bfb672" translate="yes" xml:space="preserve">
          <source>Buffer::addBuffer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9874c412003c7050572e7c9374da6a7edf5e000" translate="yes" xml:space="preserve">
          <source>Buffer::appendFrom</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39f401378e1124847461455ed3e3ff2945ab235b" translate="yes" xml:space="preserve">
          <source>Buffer::copyout</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce74dbc09caffe5e978f225c7eec69a3e278ebd0" translate="yes" xml:space="preserve">
          <source>Buffer::drain</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84a1ae103ad93980bda63cc8beb01d6476d653d5" translate="yes" xml:space="preserve">
          <source>Buffer::enableLocking</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="902d3649bd383026d3f4934940e00981dd0e2a1f" translate="yes" xml:space="preserve">
          <source>Buffer::expand</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fef38a0fe25cda33f51bfc01aa9b27ed06078fc9" translate="yes" xml:space="preserve">
          <source>Buffer::freeze</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01d12ac127c1b9e5838d07d8af3d1cc1fc49a344" translate="yes" xml:space="preserve">
          <source>Buffer::lock</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1201a7fc7af48631c51b8ef869a7386a1d20ad4f" translate="yes" xml:space="preserve">
          <source>Buffer::prepend</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1b6411719b2406d8706c150f1dcceed1b54ac63" translate="yes" xml:space="preserve">
          <source>Buffer::prependBuffer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10f43cf704916736a171ed955fc1c78928aba766" translate="yes" xml:space="preserve">
          <source>Buffer::pullup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2aea6a1264bce311f27bf8d72948db3608b28e7" translate="yes" xml:space="preserve">
          <source>Buffer::read</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12d7997ec44348192f9e1838f175acb5c50db847" translate="yes" xml:space="preserve">
          <source>Buffer::readFrom</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b982aaa6731d373b7cdc7c5466218121d29cd26" translate="yes" xml:space="preserve">
          <source>Buffer::readLine</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60508826b1f7ab07646bf8452d2d6790ef1bc267" translate="yes" xml:space="preserve">
          <source>Buffer::search</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8885d0a558826a03adebf74e988faf7275e0bdf4" translate="yes" xml:space="preserve">
          <source>Buffer::searchEol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b49c61ae608de70ab0a5f80c0b79f1683600c83f" translate="yes" xml:space="preserve">
          <source>Buffer::substr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a4f7fd079314a696c3312d2ba167ab5c14cb2dc" translate="yes" xml:space="preserve">
          <source>Buffer::unfreeze</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dbfa27b637ca0150a1c8f0d3b1a504c3ac1d07e" translate="yes" xml:space="preserve">
          <source>Buffer::unlock</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e03b1a932d08a910e8a90352c02e22f9b6010c2" translate="yes" xml:space="preserve">
          <source>Buffer::write</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfaab1edd9241718ee8f86ec3b9f76096a2b7ebc" translate="yes" xml:space="preserve">
          <source>BufferEvent (class)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53e076b45488eb25900080acdb1757f38b1ff7cd" translate="yes" xml:space="preserve">
          <source>BufferEvent::__construct</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54af84cc4011fbf2d46babe64e21c93a437fbe2a" translate="yes" xml:space="preserve">
          <source>BufferEvent::close</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d407a064f7a4665aae1684c15ba79c51867216b" translate="yes" xml:space="preserve">
          <source>BufferEvent::connect</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cb6a96aac6f89c6bf33348ff81588e68887f40f" translate="yes" xml:space="preserve">
          <source>BufferEvent::connectHost</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16227608923cc8dfe380bf1ddf147512f6d811ec" translate="yes" xml:space="preserve">
          <source>BufferEvent::createPair</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ca9d530aefbf817a4ae6563eb3fa8cef3e73323" translate="yes" xml:space="preserve">
          <source>BufferEvent::disable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f98e763f5d195315ef66aee008e7cd650adfced1" translate="yes" xml:space="preserve">
          <source>BufferEvent::enable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="100df7856667d55b0c6abd565420ccb44f8c125b" translate="yes" xml:space="preserve">
          <source>BufferEvent::free</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33965ad0318c5983cf5c38e6552eb42b7244162e" translate="yes" xml:space="preserve">
          <source>BufferEvent::getDnsErrorString</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d5eeb33c2048b25979a8a9e478194e98614cbff" translate="yes" xml:space="preserve">
          <source>BufferEvent::getEnabled</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9292e7e6cc9b811fc12d327d8a796ed2b99d67bf" translate="yes" xml:space="preserve">
          <source>BufferEvent::getInput</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0da43abff752b597420e7359e635d8f29e48e15b" translate="yes" xml:space="preserve">
          <source>BufferEvent::getOutput</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e58d005c61dc1219c4acbea1ea7ced0b68d29366" translate="yes" xml:space="preserve">
          <source>BufferEvent::read</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11e2f4a028be69e15e59e643aee343012d7e1e2f" translate="yes" xml:space="preserve">
          <source>BufferEvent::readBuffer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6fcd7e4c71c388d071f6f2dfab40263f4d97349" translate="yes" xml:space="preserve">
          <source>BufferEvent::setCallbacks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0484a0ca930acf73425206bac1cedbf4c6da95dc" translate="yes" xml:space="preserve">
          <source>BufferEvent::setPriority</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15d0e69bf341960381fdeab4c9d3dfda6a8aa9da" translate="yes" xml:space="preserve">
          <source>BufferEvent::setTimeouts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba99e4555eb960cc1bde3ca3c3caca96c375decd" translate="yes" xml:space="preserve">
          <source>BufferEvent::setWatermark</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8becd9ef0f5ab43ef96b71eedbb8d91112636002" translate="yes" xml:space="preserve">
          <source>BufferEvent::sslError</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="568597fdc5d51f1f98c4c26fd10a991fbfce4366" translate="yes" xml:space="preserve">
          <source>BufferEvent::sslFilter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aac5a90db7214dbcdefa4cfeae50c4e2fbf3e5c" translate="yes" xml:space="preserve">
          <source>BufferEvent::sslGetCipherInfo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12e8d84fe2113b2678169b95791eeb37bcc22242" translate="yes" xml:space="preserve">
          <source>BufferEvent::sslGetCipherName</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6538cbfa54bc5652c3e4557b1923a4238c54d073" translate="yes" xml:space="preserve">
          <source>BufferEvent::sslGetCipherVersion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88df75a1bad0d915db02197ec4b85d6d45c79da5" translate="yes" xml:space="preserve">
          <source>BufferEvent::sslGetProtocol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52b9926185b61608086bbccb4057d10122f62e05" translate="yes" xml:space="preserve">
          <source>BufferEvent::sslRenegotiate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9331183dec857b364e8fa33fa923f049cb00f5e6" translate="yes" xml:space="preserve">
          <source>BufferEvent::sslSocket</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56703e0253a6626f3db31e049d09ca0e080e7457" translate="yes" xml:space="preserve">
          <source>BufferEvent::write</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad838193ac6d141aebfb4886ff07fa04650ab632" translate="yes" xml:space="preserve">
          <source>BufferEvent::writeBuffer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d49f3175dcd17eeccbee03f32b7c9a134f811104" translate="yes" xml:space="preserve">
          <source>Built-in classes can define its own comparison, different classes are uncomparable, same class see &lt;a href=&quot;language.oop5.object-comparison&quot;&gt;Object Comparison&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4204fec258be60d235a79a85844bedd99808c0f1" translate="yes" xml:space="preserve">
          <source>But perhaps the most common use for of lambda-style (anonymous) functions is to create callback functions, for example when using &lt;a href=&quot;function.array-walk&quot;&gt;array_walk()&lt;/a&gt; or &lt;a href=&quot;function.usort&quot;&gt;usort()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42d82d64135c7c7eed0f8b3f9d575221a5a1108b" translate="yes" xml:space="preserve">
          <source>But there do is some usage need such feature, like unit testing. thus Yaf can be built with --enable-yaf-debug, which will allow Yaf read the value user set via script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c10a84ef665e2b028403dac66b7cda84d80803b" translate="yes" xml:space="preserve">
          <source>But this is not, and will result in a parse error in PHP 5:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c62f81e4da8b5c73825197e5c2450619314c8618" translate="yes" xml:space="preserve">
          <source>By contrast to &lt;a href=&quot;function.strtolower&quot;&gt;strtolower()&lt;/a&gt;, 'alphabetic' is determined by the Unicode character properties. Thus the behaviour of this function is not affected by locale settings and it can convert any characters that have 'alphabetic' property, such as A-umlaut (&amp;Auml;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d675aa298427a255b86c1c1b913eeb917f6d4be4" translate="yes" xml:space="preserve">
          <source>By contrast to &lt;a href=&quot;function.strtoupper&quot;&gt;strtoupper()&lt;/a&gt;, 'alphabetic' is determined by the Unicode character properties. Thus the behaviour of this function is not affected by locale settings and it can convert any characters that have 'alphabetic' property, such as a-umlaut (&amp;auml;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d28fdae93cfe8c9acab3238f946a85b87a64740b" translate="yes" xml:space="preserve">
          <source>By contrast to the standard case folding functions such as &lt;a href=&quot;function.strtolower&quot;&gt;strtolower()&lt;/a&gt; and &lt;a href=&quot;function.strtoupper&quot;&gt;strtoupper()&lt;/a&gt;, case folding is performed on the basis of the Unicode character properties. Thus the behaviour of this function is not affected by locale settings and it can convert any characters that have 'alphabetic' property, such as A-umlaut (&amp;Auml;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f04b5f931d27087eb2765c54b98dae10ca9ea3bd" translate="yes" xml:space="preserve">
          <source>By default Libevent turns underlying file descriptors, or sockets, to non-blocking mode. This flag tells Libevent to leave them in blocking mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2e72178624c9ca39858e1c67daba59e002cec13" translate="yes" xml:space="preserve">
          <source>By default all events are scheduled with the same priority (&lt;code&gt;npriorities&lt;/code&gt;/2). Using &lt;strong&gt;event_base_priority_init()&lt;/strong&gt; you can change the number of event priority levels and then set a desired priority for each event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26de7b5324d20794622ce77df60d00ae0df480de" translate="yes" xml:space="preserve">
          <source>By default an &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; is returned. If &lt;code&gt;return_float&lt;/code&gt; is set, then a &lt;a href=&quot;language.types.float&quot;&gt;float&lt;/a&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1daefe7a11c77b758344272257b9986471de07d4" translate="yes" xml:space="preserve">
          <source>By default it checks all include paths to contain filenames built up by the lowercase class name appended by the filename extensions .inc and .php.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cad97d4772a513a14119703844006573ad0fce8" translate="yes" xml:space="preserve">
          <source>By default on some platforms, once a listener socket is closed, no other socket can bind to the same port until a while has passed. Setting this option makes Libevent mark the socket as reusable, so that once it is closed, another socket can be opened to listen on the same port.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="550dc8ff894807a5e0db5a9bf093b0144810af9f" translate="yes" xml:space="preserve">
          <source>By default target must match a particular pixel color exactly. However, in many cases two colors may differ by a small amount. The fuzz member of image defines how much tolerance is acceptable to consider two colors as the same. This parameter represents the variation on the quantum range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b19d1383ea2ae74b773ac098a07b778efa0af21" translate="yes" xml:space="preserve">
          <source>By default the Memcached instances are destroyed at the end of the request. To create an instance that persists between requests, use &lt;code&gt;persistent_id&lt;/code&gt; to specify a unique ID for the instance. All instances created with the same &lt;code&gt;persistent_id&lt;/code&gt; will share the same connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1222d4e4aafb65f5393a6ee1633532ea3bac5f86" translate="yes" xml:space="preserve">
          <source>By default the tables name that field belongs to is returned but if &lt;code&gt;oid_only&lt;/code&gt; is set to &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt;, then the oid will instead be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b2f59a620e268d62cce13da491cf0ddd8a126a2" translate="yes" xml:space="preserve">
          <source>By default this includes the following methods: &lt;em&gt;GET&lt;/em&gt; , &lt;em&gt;POST&lt;/em&gt; , &lt;em&gt;HEAD&lt;/em&gt; , &lt;em&gt;PUT&lt;/em&gt; , &lt;em&gt;DELETE&lt;/em&gt; . See &lt;em&gt;EventHttpRequest::CMD_*&lt;/em&gt; constants.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="169b6cce2bc13e3f8648d9d4b2f1c45882e22cc1" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;data_is_url&lt;/code&gt; is &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt;. Use &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; to specify that &lt;code&gt;data&lt;/code&gt; is a path or URL to an XML document instead of &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt; data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3d4ddcbaf6d2438f5a65fe421703c2af85ab111" translate="yes" xml:space="preserve">
          <source>By default, &lt;strong&gt;&lt;code&gt;PHP_QUERY_RFC1738&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37c4ab97d3e4e3626921a7113fd72058b457da88" translate="yes" xml:space="preserve">
          <source>By default, &lt;strong&gt;&lt;code&gt;STDOUT&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;STDERR&lt;/code&gt;&lt;/strong&gt; have the VT100 feature enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b95d6bc6291745ead5afe09978038d77f2800daf" translate="yes" xml:space="preserve">
          <source>By default, &lt;strong&gt;Yaf_Loader&lt;/strong&gt; assume all library (class defined script) store in the &lt;a href=&quot;https://secure.php.net/manual/en/yaf.configuration.php#ini.yaf.library&quot;&gt;global library directory&lt;/a&gt;, which is defined in the php.ini(yaf.library).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12c0cc42a4af9bc911ba463c4d6f7b135fd07906" translate="yes" xml:space="preserve">
          <source>By default, &lt;strong&gt;dns_get_record()&lt;/strong&gt; will search for any resource records associated with &lt;code&gt;hostname&lt;/code&gt;. To limit the query, specify the optional &lt;code&gt;type&lt;/code&gt; parameter. May be any one of the following: &lt;strong&gt;&lt;code&gt;DNS_A&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;DNS_CNAME&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;DNS_HINFO&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;DNS_CAA&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;DNS_MX&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;DNS_NS&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;DNS_PTR&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;DNS_SOA&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;DNS_TXT&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;DNS_AAAA&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;DNS_SRV&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;DNS_NAPTR&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;DNS_A6&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;DNS_ALL&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code&gt;DNS_ANY&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d45026123fdb97b1d69e56ca3ec14c4406135a00" translate="yes" xml:space="preserve">
          <source>By default, &lt;strong&gt;microtime()&lt;/strong&gt; returns a &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt; in the form &quot;msec sec&quot;, where &lt;em&gt;sec&lt;/em&gt; is the number of seconds since the Unix epoch (0:00:00 January 1,1970 GMT), and &lt;em&gt;msec&lt;/em&gt; measures microseconds that have elapsed since &lt;em&gt;sec&lt;/em&gt; and is also expressed in seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d62244b8ee003c572b59e276aac94da7d3d70d4" translate="yes" xml:space="preserve">
          <source>By default, &lt;strong&gt;querySingle()&lt;/strong&gt; returns the value of the first column returned by the query. If &lt;code&gt;entire_row&lt;/code&gt; is &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt;, then it returns an array of the entire first row.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39f012ccf27bcf6ac35d4b701eda654a6ee0d247" translate="yes" xml:space="preserve">
          <source>By default, &lt;strong&gt;stream_filter_append()&lt;/strong&gt; will attach the filter to the &lt;em&gt;read filter chain&lt;/em&gt; if the file was opened for reading (i.e. File Mode: &lt;em&gt;r&lt;/em&gt;, and/or &lt;em&gt;+&lt;/em&gt;). The filter will also be attached to the &lt;em&gt;write filter chain&lt;/em&gt; if the file was opened for writing (i.e. File Mode: &lt;em&gt;w&lt;/em&gt;, &lt;em&gt;a&lt;/em&gt;, and/or &lt;em&gt;+&lt;/em&gt;). &lt;strong&gt;&lt;code&gt;STREAM_FILTER_READ&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;STREAM_FILTER_WRITE&lt;/code&gt;&lt;/strong&gt;, and/or &lt;strong&gt;&lt;code&gt;STREAM_FILTER_ALL&lt;/code&gt;&lt;/strong&gt; can also be passed to the &lt;code&gt;read_write&lt;/code&gt; parameter to override this behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c54c916e8dc9476ea8374319aae895028e037969" translate="yes" xml:space="preserve">
          <source>By default, &lt;strong&gt;stream_filter_prepend()&lt;/strong&gt; will attach the filter to the &lt;em&gt;read filter chain&lt;/em&gt; if the file was opened for reading (i.e. File Mode: &lt;em&gt;r&lt;/em&gt;, and/or &lt;em&gt;+&lt;/em&gt;). The filter will also be attached to the &lt;em&gt;write filter chain&lt;/em&gt; if the file was opened for writing (i.e. File Mode: &lt;em&gt;w&lt;/em&gt;, &lt;em&gt;a&lt;/em&gt;, and/or &lt;em&gt;+&lt;/em&gt;). &lt;strong&gt;&lt;code&gt;STREAM_FILTER_READ&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;STREAM_FILTER_WRITE&lt;/code&gt;&lt;/strong&gt;, and/or &lt;strong&gt;&lt;code&gt;STREAM_FILTER_ALL&lt;/code&gt;&lt;/strong&gt; can also be passed to the &lt;code&gt;read_write&lt;/code&gt; parameter to override this behavior. See &lt;a href=&quot;function.stream-filter-append&quot;&gt;stream_filter_append()&lt;/a&gt; for an example of using this parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67d2a45dc61ddf638922ba03b999977682dc2971" translate="yes" xml:space="preserve">
          <source>By default, &lt;strong&gt;version_compare()&lt;/strong&gt; returns &lt;em&gt;-1&lt;/em&gt; if the first version is lower than the second, &lt;em&gt;0&lt;/em&gt; if they are equal, and &lt;em&gt;1&lt;/em&gt; if the second is lower.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27460a8095a98ca40ced156b1791796b14c59245" translate="yes" xml:space="preserve">
          <source>By default, PCRE treats the subject string as consisting of a single &quot;line&quot; of characters (even if it actually contains several newlines). The &quot;start of line&quot; metacharacter (^) matches only at the start of the string, while the &quot;end of line&quot; metacharacter ($) matches only at the end of the string, or before a terminating newline (unless &lt;em&gt;D&lt;/em&gt; modifier is set). This is the same as Perl.  When this modifier is set, the &quot;start of line&quot; and &quot;end of line&quot; constructs match immediately following or immediately before any newline in the subject string, respectively, as well as at the very start and end. This is equivalent to Perl's /m modifier. If there are no &quot;\n&quot; characters in a subject string, or no occurrences of ^ or $ in a pattern, setting this modifier has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d0196c5a2bb6cf278769248a1a2d040c7e89ffe" translate="yes" xml:space="preserve">
          <source>By default, PHP will coerce values of the wrong type into the expected scalar type if possible. For example, a function that is given an &lt;a href=&quot;language.types.integer&quot;&gt;integer&lt;/a&gt; for a parameter that expects a &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt; will get a variable of type &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b17d452802e1da8437b76a937ab04a4b3cd415f6" translate="yes" xml:space="preserve">
          <source>By default, a whitespace character is any character that the C library function isspace() recognizes, though it is possible to compile PCRE with alternative character type tables. Normally isspace() matches space, formfeed, newline, carriage return, horizontal tab, and vertical tab. Perl 5 no longer includes vertical tab in its set of whitespace characters. The \v escape that was in the Perl documentation for a long time was never in fact recognized. However, the character itself was treated as whitespace at least up to 5.002. In 5.004 and 5.005 it does not match \s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60428d9473190a6b74698ee79dd88db0cbef4e7c" translate="yes" xml:space="preserve">
          <source>By default, all of the superglobals are available but there are directives that affect this availability. For further information, refer to the documentation for &lt;a href=&quot;https://secure.php.net/manual/en/ini.core.php#ini.variables-order&quot;&gt;variables_order&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebc9b50aa43ff8d8fd03f2219bf2b47983e6e3b1" translate="yes" xml:space="preserve">
          <source>By default, auto-commit is on for a connection. Disabling auto-commit is equivalent with starting a transaction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5706e160755895eb76a2ad3360399b5df2f770c1" translate="yes" xml:space="preserve">
          <source>By default, function arguments are passed by value (so that if the value of the argument within the function is changed, it does not get changed outside of the function). To allow a function to modify its arguments, they must be passed by reference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f95bbeb6560da109d08aafe4961c4f7959810269" translate="yes" xml:space="preserve">
          <source>By default, the &lt;strong&gt;sqlsrv_connect()&lt;/strong&gt; uses connection pooling to improve connection performance. To turn off connection pooling (i.e. force a new connection on each call), set the &quot;ConnectionPooling&quot; option in the $connectionOptions array to 0 (or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt;). For more information, see &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc644930.aspx&quot;&gt;&amp;raquo; SQLSRV Connection Pooling&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c436d820c4d07e4e4452f070f12bfae1a0cf0c8" translate="yes" xml:space="preserve">
          <source>By default, the extension is &lt;em&gt;.phar.gz&lt;/em&gt; or &lt;em&gt;.phar.bz2&lt;/em&gt; for compressing phar archives, and &lt;em&gt;.phar.tar.gz&lt;/em&gt; or &lt;em&gt;.phar.tar.bz2&lt;/em&gt; for compressing tar archives. For decompressing, the default file extensions are &lt;em&gt;.phar&lt;/em&gt; and &lt;em&gt;.phar.tar&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="881e27504748548a3b143275ba26c9d9daa94112" translate="yes" xml:space="preserve">
          <source>By default, the extension is &lt;em&gt;.tar.gz&lt;/em&gt; or &lt;em&gt;.tar.bz2&lt;/em&gt; for compressing a tar, and &lt;em&gt;.tar&lt;/em&gt; for decompressing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="354acb239ec7de9885c76eadccf52a476dd4c0a7" translate="yes" xml:space="preserve">
          <source>By default, the information in your system &lt;em&gt;openssl.conf&lt;/em&gt; is used to initialize the request; you can specify a configuration file section by setting the &lt;em&gt;config_section_section&lt;/em&gt; key of &lt;code&gt;configargs&lt;/code&gt;. You can also specify an alternative openssl configuration file by setting the value of the &lt;em&gt;config&lt;/em&gt; key to the path of the file you want to use. The following keys, if present in &lt;code&gt;configargs&lt;/code&gt; behave as their equivalents in the &lt;em&gt;openssl.conf&lt;/em&gt;, as listed in the table below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fed13d9e89961b09ef3a861c5c5a9dd4ef9847f" translate="yes" xml:space="preserve">
          <source>By default, the quantifiers are &quot;greedy&quot;, that is, they match as much as possible (up to the maximum number of permitted times), without causing the rest of the pattern to fail. The classic example of where this gives problems is in trying to match comments in C programs. These appear between the sequences /* and */ and within the sequence, individual * and / characters may appear. An attempt to match C comments by applying the pattern &lt;em&gt;/\*.*\*/&lt;/em&gt; to the string &lt;em&gt;/* first comment */ not comment /* second comment */&lt;/em&gt; fails, because it matches the entire string due to the greediness of the .* item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c1c89eb87f69044ed0749a01a118ed08d6e2ec8" translate="yes" xml:space="preserve">
          <source>By default, the serialization method used is internal to PHP, and is not the same as &lt;a href=&quot;function.serialize&quot;&gt;serialize()&lt;/a&gt;. The serialization method can be set using &lt;a href=&quot;https://secure.php.net/manual/en/session.configuration.php#ini.session.serialize-handler&quot;&gt;session.serialize_handler&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dfd35a1f6edd6c08fafb99b66a7d899094c50fd" translate="yes" xml:space="preserve">
          <source>By default, the sorted order is alphabetical in ascending order. If the optional &lt;code&gt;sorting_order&lt;/code&gt; is set to &lt;strong&gt;&lt;code&gt;SCANDIR_SORT_DESCENDING&lt;/code&gt;&lt;/strong&gt;, then the sort order is alphabetical in descending order. If it is set to &lt;strong&gt;&lt;code&gt;SCANDIR_SORT_NONE&lt;/code&gt;&lt;/strong&gt; then the result is unsorted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="123d816dfad7d78e08a342e2a0afd439f947f987" translate="yes" xml:space="preserve">
          <source>By default, the unserialization method used is internal to PHP, and is not the same as &lt;a href=&quot;function.unserialize&quot;&gt;unserialize()&lt;/a&gt;. The serialization method can be set using &lt;a href=&quot;https://secure.php.net/manual/en/session.configuration.php#ini.session.serialize-handler&quot;&gt;session.serialize_handler&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbeb0b0e5ff899dd882bb10c5dbd61f5cf78d14c" translate="yes" xml:space="preserve">
          <source>By default, this value is &lt;a href=&quot;https://secure.php.net/manual/en/yaf.appconfig.php#configuration.yaf.directory&quot;&gt;application.directory&lt;/a&gt; . &quot;/library&quot;, you can change this either in the application.ini(application.library) or call to &lt;a href=&quot;yaf-loader.setlibrarypath&quot;&gt;Yaf_Loader::setLibraryPath()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e9d09812a7b4d1a752b6afb6cd5db416898af22" translate="yes" xml:space="preserve">
          <source>By default, variables are always assigned by value. That is to say, when you assign an expression to a variable, the entire value of the original expression is copied into the destination variable. This means, for instance, that after assigning one variable's value to another, changing one of those variables will have no effect on the other. For more information on this kind of assignment, see the chapter on &lt;a href=&quot;language.expressions&quot;&gt;Expressions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97159a7367ef9a7bbe42f04079cc94f3f0b86322" translate="yes" xml:space="preserve">
          <source>By default, warnings generated on a call to any SQLSRV function are treated as errors. This means that if a warning occurs on a call to a SQLSRV function, the function returns &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt;. However, warnings that correspond to SQLSTATE values 01000, 01001, 01003, and 01S02 are never treated as errors. For information about changing this behavior, see &lt;a href=&quot;function.sqlsrv-configure&quot;&gt;sqlsrv_configure()&lt;/a&gt; and the WarningsReturnAsErrors setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cca2fe8efb6e186bd40a2b4885864223bcaa295a" translate="yes" xml:space="preserve">
          <source>By default, when the bufferevent is set up to be threadsafe, the buffer event&amp;rsquo;s locks are held whenever the any user-provided callback is invoked. Setting this option makes Libevent release the buffer event&amp;rsquo;s lock when it&amp;rsquo;s invoking the callbacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2e0a8f8ce40d8f751ee7d7daa87096df9c88c36" translate="yes" xml:space="preserve">
          <source>By invoking the methods provided by the NumberFormatter class, you can format numbers, currencies, and percentages according to the specified or default locale. NumberFormatter is locale-sensitive so you need to create a new NumberFormatter for each locale. NumberFormatter methods format primitive-type numbers, such as double and output the number as a locale-specific string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdd0c7a7cfcd59853bd9e5de00c7b05ca28ae352" translate="yes" xml:space="preserve">
          <source>By ksorting patterns and replacements, we should get what we wanted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3b1c2413fa3e0180121d5801a0397dc4f8b86c4" translate="yes" xml:space="preserve">
          <source>By passing a reference as third argument, &lt;strong&gt;similar_text()&lt;/strong&gt; will calculate the similarity in percent, by dividing the result of &lt;strong&gt;similar_text()&lt;/strong&gt; by the average of the lengths of the given strings times &lt;em&gt;100&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4c5bd9ef8fb63dc461a8baa1333de65e2c5d6a3" translate="yes" xml:space="preserve">
          <source>By setting the &lt;code&gt;process_sections&lt;/code&gt; parameter to &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt;, you get a multidimensional array, with the section names and settings included. The default for &lt;code&gt;process_sections&lt;/code&gt; is &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4588ef4c228d3c47deef3a8abad7c36006ed05e" translate="yes" xml:space="preserve">
          <source>By the way, if a stream is redirected, the VT100 feature will not be enabled:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6dffbde0c88d676502311483d714de59be39193" translate="yes" xml:space="preserve">
          <source>By using the &lt;strong&gt;&lt;code&gt;MYSQLI_ASSOC&lt;/code&gt;&lt;/strong&gt; constant this function will behave identically to the &lt;a href=&quot;mysqli-result.fetch-assoc&quot;&gt;mysqli_fetch_assoc()&lt;/a&gt;, while &lt;strong&gt;&lt;code&gt;MYSQLI_NUM&lt;/code&gt;&lt;/strong&gt; will behave identically to the &lt;a href=&quot;mysqli-result.fetch-row&quot;&gt;mysqli_fetch_row()&lt;/a&gt; function. The final option &lt;strong&gt;&lt;code&gt;MYSQLI_BOTH&lt;/code&gt;&lt;/strong&gt; will create a single array with the attributes of both.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a55430aa0b32e8cc27151634b18595c30329ca1" translate="yes" xml:space="preserve">
          <source>Bypass routing, use direct interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd54fbc5c8f77eb130d2eae8194a1dc534e440db" translate="yes" xml:space="preserve">
          <source>Byte 0 of $str has value 240</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da11d3d90bf91771d1b63049b2c58c7ca00b1733" translate="yes" xml:space="preserve">
          <source>Byte 1 of $str has value 159</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bda09c9d53f983fb7cd80a5a69a71b7aec623e22" translate="yes" xml:space="preserve">
          <source>Byte 2 of $str has value 144</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3214bca431fab1d4994adf74b8714baf1b73957" translate="yes" xml:space="preserve">
          <source>Byte 3 of $str has value 152</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7b73a0fcfac4f07b981313e9814cffe00d453af" translate="yes" xml:space="preserve">
          <source>Byte position of the data start can be determined by the &lt;strong&gt;&lt;code&gt;__COMPILER_HALT_OFFSET__&lt;/code&gt;&lt;/strong&gt; constant which is defined only if there is a &lt;strong&gt;__halt_compiler()&lt;/strong&gt; presented in the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32096c2e0eff33d844ee6d675407ace18289357d" translate="yes" xml:space="preserve">
          <source>C</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e26bbff46c39164d1523db69d78abdd87d6a20d8" translate="yes" xml:space="preserve">
          <source>C data type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15ae5b0651101bb95bb711349c1d9aa89053ef3d" translate="yes" xml:space="preserve">
          <source>C=U &quot;China&quot; &amp;lt; &quot;china&quot; &amp;lt; &quot;Denmark&quot; &amp;lt; &quot;denmark&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ec0b0fa6c797bae61453a7c41a6ceea1ef8d192" translate="yes" xml:space="preserve">
          <source>C=X or C=L &quot;china&quot; &amp;lt; &quot;China&quot; &amp;lt; &quot;denmark&quot; &amp;lt; &quot;Denmark&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09acbb7d1da8aa3daff4c1ec8076713606974c64" translate="yes" xml:space="preserve">
          <source>CA</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3deed788c8f1989da9a741179035e844c08a5380" translate="yes" xml:space="preserve">
          <source>CARDINALITY</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f018a87205caa741d195a0b69d3d55cd5c878a3" translate="yes" xml:space="preserve">
          <source>CASE_SENSITIVE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f241490635bc4573269cad619298161d0dc3417" translate="yes" xml:space="preserve">
          <source>CC &quot;string&quot; - match messages with &quot;string&quot; in the Cc: field</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="473de9c20200b441d8e9ff3291cbe3ac40cf848d" translate="yes" xml:space="preserve">
          <source>CDATA node</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef51a56a228c22c4d9eedb0635e47a3b4105a503" translate="yes" xml:space="preserve">
          <source>CDF</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="422f720e7d72716b7017e69268406be073cfc7c1" translate="yes" xml:space="preserve">
          <source>CGI</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae864c87730cd7628c03fc5248bfe290589af6c7" translate="yes" xml:space="preserve">
          <source>COLLATION</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62f94c337a62422091eec8af220557bc9d2a0f7d" translate="yes" xml:space="preserve">
          <source>COLUMN_NAME</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85bf293fa7977bf9a2fceb81d5ff23d16a3d8535" translate="yes" xml:space="preserve">
          <source>COLUMN_TYPE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1a13fadf51ef7eece7dea40c4b6e6e8042822d2" translate="yes" xml:space="preserve">
          <source>COMMENT</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c52b56dab38211c04eda3b5b35db68636802626a" translate="yes" xml:space="preserve">
          <source>COMPUTED</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2a19a8833b7f0a8aff34f17de8769715bcd1497" translate="yes" xml:space="preserve">
          <source>CONNECT method(command)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59809cd2f8cfc6eb5b75df42ac5f352194035f76" translate="yes" xml:space="preserve">
          <source>CREATE_PARAMS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9930779c5261c7ed2145635a1a6903e209530cc" translate="yes" xml:space="preserve">
          <source>CREDITS_ALL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a4e2a592e757a94e0cd16ee926be58e79597d40" translate="yes" xml:space="preserve">
          <source>CREDITS_DOCS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1386334ecc1c3a3bc278c4f28789336cc6b5c918" translate="yes" xml:space="preserve">
          <source>CREDITS_FULLPAGE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81f4c06c5c7a9bd5e1c29570c4f90a58b2ecf8bb" translate="yes" xml:space="preserve">
          <source>CREDITS_GENERAL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="621324d2a5d85f404e4783a442a8dcb5a84935cc" translate="yes" xml:space="preserve">
          <source>CREDITS_GROUP</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9dccca18efe5e92dbe43a6adb9cfb9bac53ab0a" translate="yes" xml:space="preserve">
          <source>CREDITS_MODULES</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74fc6685733696fb8d40efa2246d72f22d6c23b5" translate="yes" xml:space="preserve">
          <source>CREDITS_SAPI</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="735ffe35e5c4accf5861ee1426147bc32137a32a" translate="yes" xml:space="preserve">
          <source>CSPRNG</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3281188351b89c8e2db28d6da7af4992d415de90" translate="yes" xml:space="preserve">
          <source>CSV</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f059787bf5f61c5d938038dd4915a554f79a962e" translate="yes" xml:space="preserve">
          <source>CURLFile &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba333b17e24817f8dc282c25fd53e4c848498108" translate="yes" xml:space="preserve">
          <source>CURLFile (class)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98a27a13bcde4e03d98cc9c221637f3b27c2ead1" translate="yes" xml:space="preserve">
          <source>CURLFile is not serializable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45f8b70b47294599f142975f164f5d77fee0e235" translate="yes" xml:space="preserve">
          <source>CURLFile::__construct</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7648519a3583c3aaeb8d53e8c4600831cad30760" translate="yes" xml:space="preserve">
          <source>CURLFile::__construct &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2dfa7ccfde471c4b670e833f4ef676008cf24e1" translate="yes" xml:space="preserve">
          <source>CURLFile::__construct -- curl_file_create &amp;mdash; Create a CURLFile object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc673b31f02d1c11e6ba8e60b0c24ff90f743084" translate="yes" xml:space="preserve">
          <source>CURLFile::__wakeup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24f5902f9be51285ca851d02216786d6af7e9c66" translate="yes" xml:space="preserve">
          <source>CURLFile::__wakeup &amp;mdash; Unserialization handler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca6363cbeb575d1b5d1a9601e5a4ab67de496ca2" translate="yes" xml:space="preserve">
          <source>CURLFile::__wakeup &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5834c4975c8b77a6734fba0d91363173b616deeb" translate="yes" xml:space="preserve">
          <source>CURLFile::getFilename</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c012bec63cb31257fe51fb1341c6be1ac888e5a" translate="yes" xml:space="preserve">
          <source>CURLFile::getFilename &amp;mdash; Get file name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c4e385a2a0f9531c81c192c522aa8bf83d98e6e" translate="yes" xml:space="preserve">
          <source>CURLFile::getFilename &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2919558990f9c00c38c7f47a298ea632e3a649ff" translate="yes" xml:space="preserve">
          <source>CURLFile::getMimeType</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28b88c2147a1e6369077102aac847d8753bc51b4" translate="yes" xml:space="preserve">
          <source>CURLFile::getMimeType &amp;mdash; Get MIME type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0dbaf5ceda39320684079b630dcbde4f9bf2ec9" translate="yes" xml:space="preserve">
          <source>CURLFile::getMimeType &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="350a81f16168aa37a7d855462e10b9995b5ec9bf" translate="yes" xml:space="preserve">
          <source>CURLFile::getPostFilename</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba14cf21da1e09d01461decd08fb10a1ac885f33" translate="yes" xml:space="preserve">
          <source>CURLFile::getPostFilename &amp;mdash; Get file name for POST</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d7570efb5ad07af510e08082adfd00cbe5d3d36" translate="yes" xml:space="preserve">
          <source>CURLFile::getPostFilename &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5518317e24c89dca581026ede6d146c2acc26e0a" translate="yes" xml:space="preserve">
          <source>CURLFile::setMimeType</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdccd06d60447c7cad016475ed639f9984f667ff" translate="yes" xml:space="preserve">
          <source>CURLFile::setMimeType &amp;mdash; Set MIME type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1db1938986d6d7d26bda0e618de75eee4787de4" translate="yes" xml:space="preserve">
          <source>CURLFile::setMimeType &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be27b5ccf337148d32ff14ae81560e54868a7bc5" translate="yes" xml:space="preserve">
          <source>CURLFile::setPostFilename</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ef9fa380ccb2db402986abba5705ea8dc78d460" translate="yes" xml:space="preserve">
          <source>CURLFile::setPostFilename &amp;mdash; Set file name for POST</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9eb35b9da1fdde489c80e719d095dd753024487" translate="yes" xml:space="preserve">
          <source>CURLFile::setPostFilename &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="024c3a9dd02f230fb337ab36b557c3ab0df9b816" translate="yes" xml:space="preserve">
          <source>Cable/DSL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="094fade00937a6db88ef6a3d1262541c78a4a7a7" translate="yes" xml:space="preserve">
          <source>Cache a variable in the data store.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e81ac9735274dc624a6be14ccdb734d19d5896f" translate="yes" xml:space="preserve">
          <source>Cache all read data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="756a4331e0795831ea8db0b1acbb3501fed8f24b" translate="yes" xml:space="preserve">
          <source>Caches a variable in the data store, only if it's not already stored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ade4cff91053886046f1e38f076854af746d6d12" translate="yes" xml:space="preserve">
          <source>CachingIterator &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c450dcc84dc1899daebe92289b4b8ecea25e863" translate="yes" xml:space="preserve">
          <source>CachingIterator (class)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c03a28afa389d23f894a55c96c1eac67951fda4" translate="yes" xml:space="preserve">
          <source>CachingIterator::__construct</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54b895c6da33cbd0eab4e6e581949877ae5ecfe5" translate="yes" xml:space="preserve">
          <source>CachingIterator::__construct &amp;mdash; Construct a new CachingIterator object for the iterator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46606028e14313549f1919dfa48806232a1e56a4" translate="yes" xml:space="preserve">
          <source>CachingIterator::__construct &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7482c273358c3f0b74a24ed11af28fe264b8cbd2" translate="yes" xml:space="preserve">
          <source>CachingIterator::__toString</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ed25c23c89913b8f228d6c34d2c8a3882dc7aa9" translate="yes" xml:space="preserve">
          <source>CachingIterator::__toString &amp;mdash; Return the string representation of the current element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83b7c57c14a396f8237dc8f018872026778ef348" translate="yes" xml:space="preserve">
          <source>CachingIterator::__toString &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a72bcfa6550e2d5f3e60710c74500b2447f8d734" translate="yes" xml:space="preserve">
          <source>CachingIterator::count</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a25625120ca421cc5e64fbbb0e422b5298449771" translate="yes" xml:space="preserve">
          <source>CachingIterator::count &amp;mdash; The number of elements in the iterator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="424cca5987f69a31b0753c203cbb35bc47bc6ce3" translate="yes" xml:space="preserve">
          <source>CachingIterator::count &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c04f8b8b53de277cee638a8ed4f034c584a124b9" translate="yes" xml:space="preserve">
          <source>CachingIterator::current</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8593b286f7c43376f34a8869b3febd3beee5ed82" translate="yes" xml:space="preserve">
          <source>CachingIterator::current &amp;mdash; Return the current element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d0af1c7e01de2eb9afe887ed3e36f6fb166ee54" translate="yes" xml:space="preserve">
          <source>CachingIterator::current &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9de255da15aa10118599464659996f2304ce899b" translate="yes" xml:space="preserve">
          <source>CachingIterator::getCache</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca6b3b35a52fa1c88d4942a426a05f1dbf77479b" translate="yes" xml:space="preserve">
          <source>CachingIterator::getCache &amp;mdash; Retrieve the contents of the cache</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a80e5c61897ca7885315591591591b8946cb0eb8" translate="yes" xml:space="preserve">
          <source>CachingIterator::getCache &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f099c987a5ae944dc561b873e5afdcfd8da3235" translate="yes" xml:space="preserve">
          <source>CachingIterator::getFlags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdc40414f58ed6cab7c9e24539fccb92f48a0b5c" translate="yes" xml:space="preserve">
          <source>CachingIterator::getFlags &amp;mdash; Get flags used</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc0fe41f8107a26a6e4713d6e42228bdc7714be0" translate="yes" xml:space="preserve">
          <source>CachingIterator::getFlags &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ca46144947eb32387d7b8ab9bd6839b5ce1a2ae" translate="yes" xml:space="preserve">
          <source>CachingIterator::getInnerIterator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db7ee3f9e8cd244f8e7adbe4b4ae8957a05873ec" translate="yes" xml:space="preserve">
          <source>CachingIterator::getInnerIterator &amp;mdash; Returns the inner iterator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b63a3c716527ad1f625d19921d79d4f981c30931" translate="yes" xml:space="preserve">
          <source>CachingIterator::getInnerIterator &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4b3c0711367162e599449cecc002c653d69d9ee" translate="yes" xml:space="preserve">
          <source>CachingIterator::hasNext</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9146f4c72051e8e3834d9bd667317844888b6670" translate="yes" xml:space="preserve">
          <source>CachingIterator::hasNext &amp;mdash; Check whether the inner iterator has a valid next element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="348097748ff3cb7df74b30bc4b8e0ed22e959493" translate="yes" xml:space="preserve">
          <source>CachingIterator::hasNext &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beae405e63804d62ddc6a59cf41bbc71bdbf3ab8" translate="yes" xml:space="preserve">
          <source>CachingIterator::key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18e04c9e028770a1bf156a1ad8fe2df7d55c079c" translate="yes" xml:space="preserve">
          <source>CachingIterator::key &amp;mdash; Return the key for the current element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11a88afac7c27656013b0790e676cb3c5fd58b88" translate="yes" xml:space="preserve">
          <source>CachingIterator::key &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8aa20aeab4cf0c7c36fb6e2e1ee4c1288022fb03" translate="yes" xml:space="preserve">
          <source>CachingIterator::next</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ec6c78b6877d5c6d6069f4fcff8dece1bfee4d6" translate="yes" xml:space="preserve">
          <source>CachingIterator::next &amp;mdash; Move the iterator forward</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd4a7d2fa0688e7639e58dddb7094e7f693b1bd1" translate="yes" xml:space="preserve">
          <source>CachingIterator::next &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac72926db1ab75eee508beea0574f51cc4049787" translate="yes" xml:space="preserve">
          <source>CachingIterator::offsetExists</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28ae4bc65bb94f03100c0eb19aaeaceaca6d534f" translate="yes" xml:space="preserve">
          <source>CachingIterator::offsetExists &amp;mdash; The offsetExists purpose</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="202673d2b18c6b3d160c85622b1d9b652d82f12c" translate="yes" xml:space="preserve">
          <source>CachingIterator::offsetExists &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a9166ceadfc350ef1d9910bc204decd92ca59ba" translate="yes" xml:space="preserve">
          <source>CachingIterator::offsetGet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbbc1bac237df6ad02acf6d768bce7a59d0cd0b0" translate="yes" xml:space="preserve">
          <source>CachingIterator::offsetGet &amp;mdash; The offsetGet purpose</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aeb1ce3fdc5bf8c3beef468c4727b22cfbecfb9" translate="yes" xml:space="preserve">
          <source>CachingIterator::offsetGet &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1a8ff282adf4520ee604a4cef79cbeeb63cadea" translate="yes" xml:space="preserve">
          <source>CachingIterator::offsetSet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb418b4c230c251a2c41a393a7856c0311a792d1" translate="yes" xml:space="preserve">
          <source>CachingIterator::offsetSet &amp;mdash; The offsetSet purpose</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d7d37075e389ffbf810a339874e63165ee7dc21" translate="yes" xml:space="preserve">
          <source>CachingIterator::offsetSet &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a18219fb5ab967834c2c936d17d24c0ea26e2c6" translate="yes" xml:space="preserve">
          <source>CachingIterator::offsetUnset</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecee3a60c9fddcdcd46b191e82a947cce8840f7d" translate="yes" xml:space="preserve">
          <source>CachingIterator::offsetUnset &amp;mdash; The offsetUnset purpose</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4da9d939630f8cda503738ecc71c5cca8d5f0eba" translate="yes" xml:space="preserve">
          <source>CachingIterator::offsetUnset &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2bf6117007a07cf1f8196af8d5fc2ea6bd3b6d7" translate="yes" xml:space="preserve">
          <source>CachingIterator::rewind</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b13a1549c8371550d73dd43a53c47936d1faf576" translate="yes" xml:space="preserve">
          <source>CachingIterator::rewind &amp;mdash; Rewind the iterator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="041603b7968c012dd6729b6521fcef164984efa8" translate="yes" xml:space="preserve">
          <source>CachingIterator::rewind &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2741074e370ee687d88cc2f84543ff82198104d4" translate="yes" xml:space="preserve">
          <source>CachingIterator::setFlags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5bd8823b43992ff719e677caad57c07382ca6ae" translate="yes" xml:space="preserve">
          <source>CachingIterator::setFlags &amp;mdash; The setFlags purpose</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d96e6f59acf937afad2a364a98b6102eacf81a37" translate="yes" xml:space="preserve">
          <source>CachingIterator::setFlags &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eb3606d4f1d77a7228181bddab51ca07bb5dcbc" translate="yes" xml:space="preserve">
          <source>CachingIterator::valid</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b49a1af3d785721d1ae98bd022812f9a1676e6a0" translate="yes" xml:space="preserve">
          <source>CachingIterator::valid &amp;mdash; Check whether the current element is valid</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63b8be066133330e7b39d4f4b78be68cc722f1c0" translate="yes" xml:space="preserve">
          <source>CachingIterator::valid &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a96aae34ffee9c858e43e9820bbbdb9242a459b" translate="yes" xml:space="preserve">
          <source>Calculate (&lt;code&gt;base&lt;/code&gt; raised into power &lt;code&gt;exp&lt;/code&gt;) modulo &lt;code&gt;mod&lt;/code&gt;. If &lt;code&gt;exp&lt;/code&gt; is negative, result is undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0121f09ee5aa3588fdce09c70caac46d18a71d52" translate="yes" xml:space="preserve">
          <source>Calculate greatest common divisor of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;. The result is always positive even if either of, or both, input operands are negative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d65eeff0d7d17d82607ded2ffb4137f5a209f766" translate="yes" xml:space="preserve">
          <source>Calculate the square root of a number, with remainder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f38c48d5b30cf18c75bd6fc53a9541b99b7ba6a1" translate="yes" xml:space="preserve">
          <source>Calculated length of the hypotenuse</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2ee997a35893717f636eb096178d5408603704b" translate="yes" xml:space="preserve">
          <source>Calculates &lt;code&gt;n&lt;/code&gt; modulo &lt;code&gt;d&lt;/code&gt;. The result is always non-negative, the sign of &lt;code&gt;d&lt;/code&gt; is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c88d1bdecaef4e258f2d327403282db2616adc0" translate="yes" xml:space="preserve">
          <source>Calculates bitwise AND of two GMP numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90b63546ff87a6bc6e2dd01a4ca8a89658e7d1d3" translate="yes" xml:space="preserve">
          <source>Calculates bitwise exclusive OR (XOR) of two GMP numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19c679c69deef614118add607774bf8b333da5f4" translate="yes" xml:space="preserve">
          <source>Calculates bitwise inclusive OR of two GMP numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19c507230dd9728f567273a9bcdb7c28aa68120b" translate="yes" xml:space="preserve">
          <source>Calculates factorial (&lt;em&gt;a!&lt;/em&gt;) of &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="224bd35cbfa7883264c4dbd1f570d8d36b0a5205" translate="yes" xml:space="preserve">
          <source>Calculates g, s, and t, such that &lt;em&gt;a*s + b*t = g = gcd(a,b)&lt;/em&gt;, where gcd is the greatest common divisor. Returns an array with respective elements g, s and t.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65aee4c203d130d849e3a92c9444e4cb21feb0bd" translate="yes" xml:space="preserve">
          <source>Calculates remainder of the integer division of &lt;code&gt;n&lt;/code&gt; by &lt;code&gt;d&lt;/code&gt;. The remainder has the sign of the &lt;code&gt;n&lt;/code&gt; argument, if not zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2070431392608e59984c516f311538d1000f345f" translate="yes" xml:space="preserve">
          <source>Calculates square root of &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efb7fa366cb845fb81c79935f0bb754f606944bb" translate="yes" xml:space="preserve">
          <source>Calculates the MD5 hash of &lt;code&gt;str&lt;/code&gt; using the &lt;a href=&quot;http://www.faqs.org/rfcs/rfc1321&quot;&gt;&amp;raquo; RSA Data Security, Inc. MD5 Message-Digest Algorithm&lt;/a&gt;, and returns that hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcaad6c8b6f422457f2f13f26e0bc3796bd81d9f" translate="yes" xml:space="preserve">
          <source>Calculates the MD5 hash of the file specified by the &lt;code&gt;filename&lt;/code&gt; parameter using the &lt;a href=&quot;http://www.faqs.org/rfcs/rfc1321&quot;&gt;&amp;raquo; RSA Data Security, Inc. MD5 Message-Digest Algorithm&lt;/a&gt;, and returns that hash. The hash is a 32-character hexadecimal number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fad9e60170ec155ad8b1aad267bd014ed118742" translate="yes" xml:space="preserve">
          <source>Calculates the group access list for the user specified in name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b4e6e830f430c608eae7cb8ac2f1ccc0fd8df8a" translate="yes" xml:space="preserve">
          <source>Calculates the metaphone key of &lt;code&gt;str&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbe4722499e48135a44a6bb73c5e213c129dae88" translate="yes" xml:space="preserve">
          <source>Calculates the sha1 hash of &lt;code&gt;str&lt;/code&gt; using the &lt;a href=&quot;http://www.faqs.org/rfcs/rfc3174&quot;&gt;&amp;raquo; US Secure Hash Algorithm 1&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59f511b31b012d361a57546110bb8d3df1c1bb67" translate="yes" xml:space="preserve">
          <source>Calculates the sha1 hash of the file specified by &lt;code&gt;filename&lt;/code&gt; using the &lt;a href=&quot;http://www.faqs.org/rfcs/rfc3174&quot;&gt;&amp;raquo; US Secure Hash Algorithm 1&lt;/a&gt;, and returns that hash. The hash is a 40-character hexadecimal number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f9aa200ef1d155967ff69bff6235ddcbe24268e" translate="yes" xml:space="preserve">
          <source>Calculates the size of the buffer that should be allocated for receiving the ancillary data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10ca3884756801a74e779f35cfe95e75fa1bbc93" translate="yes" xml:space="preserve">
          <source>Calculates the soundex key of &lt;code&gt;str&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="570eba77e2e18176ceeb006b2466cc9ed17fbb38" translate="yes" xml:space="preserve">
          <source>Calendar field encompassing the information in &lt;strong&gt;&lt;code&gt;IntlCalendar::FIELD_HOUR_OF_DAY&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;IntlCalendar::FIELD_MINUTE&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;IntlCalendar::FIELD_SECOND&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;IntlCalendar::FIELD_MILLISECOND&lt;/code&gt;&lt;/strong&gt;. Range is from the &lt;em&gt;0&lt;/em&gt; to &lt;em&gt;24 * 3600 * 1000 - 1&lt;/em&gt;. It is not the amount of milliseconds ellapsed in the day since on DST transitions it will have discontinuities analog to those of the wall time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d5ff4f9281120abd5ddb3a728f48d047e1f7453" translate="yes" xml:space="preserve">
          <source>Calendar field for a modified Julian day number. It is different from a conventional Julian day number in that its transitions occur at local zone midnight rather than at noon UTC. It uniquely identifies a date.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06000850680e9205c5a4671bddf395a32950ed56" translate="yes" xml:space="preserve">
          <source>Calendar field for a year number representation that is continuous across eras. For the Gregorian calendar, the value of this field matches that of &lt;strong&gt;&lt;code&gt;IntlCalendar::FIELD_YEAR&lt;/code&gt;&lt;/strong&gt; for AD years; a BC year &lt;em&gt;y&lt;/em&gt; is represented by &lt;em&gt;-y + 1&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44732e1997214a3741d6b6d7fff47d4b0212cde4" translate="yes" xml:space="preserve">
          <source>Calendar field for the day of the month. The same as &lt;strong&gt;&lt;code&gt;IntlCalendar::FIELD_DAY_OF_MONTH&lt;/code&gt;&lt;/strong&gt;, which has a clearer name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95d6b28417024538d8958cce7e3a875ade822a19" translate="yes" xml:space="preserve">
          <source>Calendar field for the day of the week. Its values start with &lt;em&gt;1&lt;/em&gt; (Sunday, see &lt;a href=&quot;class.intlcalendar#intlcalendar.constants.dow-sunday&quot;&gt;&lt;strong&gt;&lt;code&gt;IntlCalendar::DOW_SUNDAY&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; and subsequent constants) and the last valid value is 7 (Saturday).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7504097f3ae2ffad453e10b354a32fc3da790b5" translate="yes" xml:space="preserve">
          <source>Calendar field for the day of the year. For the Gregorian calendar, starts with &lt;strong&gt;&lt;code&gt;1&lt;/code&gt;&lt;/strong&gt; and ends with &lt;strong&gt;&lt;code&gt;365&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code&gt;366&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44295e750e18c99c2dc9a2dc198acdfb114d4a0f" translate="yes" xml:space="preserve">
          <source>Calendar field for the daylight saving time offset of the calendarʼs timezone, in milliseconds, if active for calendarʼs time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a184ce5d6e36c07bf278481f0b46b49d3089db5f" translate="yes" xml:space="preserve">
          <source>Calendar field for the full (24h) hour of the day. Valid values are &lt;em&gt;0&lt;/em&gt; to &lt;em&gt;23&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ee745e06b093410965bce3e79f049a223d2c49d" translate="yes" xml:space="preserve">
          <source>Calendar field for the hour, without specifying whether itʼs in the morning or in the afternoon. Valid values are &lt;em&gt;0&lt;/em&gt; to &lt;em&gt;11&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f5bc689756f035161dd7fdd75a72978a00a68a2" translate="yes" xml:space="preserve">
          <source>Calendar field for the localized day of the week. This is a value betwen &lt;em&gt;1&lt;/em&gt; and &lt;em&gt;7&lt;/em&gt;, &lt;em&gt;1&lt;/em&gt; being used for the day of the week that matches the value returned by &lt;a href=&quot;intlcalendar.getfirstdayofweek&quot;&gt;IntlCalendar::getFirstDayOfWeek()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d87ed1cc3ca4d66bd317fdc9e8ae2a56c533de0" translate="yes" xml:space="preserve">
          <source>Calendar field for the minutes component of the time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c3a43a7df1bb0ad9eca3c40657b4435e79d743e" translate="yes" xml:space="preserve">
          <source>Calendar field for the month. The month sequence is zero-based, so Janurary (here used to signify the first month of the calendar; this may be called another name, such as Muharram in the Islamic calendar) is represented by &lt;em&gt;0&lt;/em&gt;, February by &lt;em&gt;1&lt;/em&gt;, &amp;hellip;, December by &lt;em&gt;11&lt;/em&gt; and, for calendars that have it, the 13th or leap month by &lt;em&gt;12&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c85f2eedb5532c16006977d07db2ebb58dcaedf" translate="yes" xml:space="preserve">
          <source>Calendar field for the number of the week of the month. This depends on which day of the week is &lt;a href=&quot;intlcalendar.getfirstdayofweek&quot;&gt;deemed to start the week&lt;/a&gt; and the &lt;a href=&quot;intlcalendar.getminimaldaysinfirstweek&quot;&gt;minimal number of days in a week&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4b3a869d12956d59cff6d417db1d5f7d8ddeb0e" translate="yes" xml:space="preserve">
          <source>Calendar field for the number of the week of the year. This depends on which day of the week is &lt;a href=&quot;intlcalendar.getfirstdayofweek&quot;&gt;deemed to start the week&lt;/a&gt; and the &lt;a href=&quot;intlcalendar.getminimaldaysinfirstweek&quot;&gt;minimal number of days in a week&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0008b38dd850bae0f4039cbf13614b9d3838624e" translate="yes" xml:space="preserve">
          <source>Calendar field for the seconds component of the time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93a4670e4ced3130c11585e9e3be7653cc918186" translate="yes" xml:space="preserve">
          <source>Calendar field for the year. This is not unique across eras. If the calendar type has more than one era, generally the minimum value for this field will be &lt;em&gt;1&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40eae8d3829eac2aa73d8c5ae136b3b4bd6857f7" translate="yes" xml:space="preserve">
          <source>Calendar field indicating the raw offset of the timezone, in milliseconds. The raw offset is the timezone offset, excluding any offset due to daylight saving time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d6ed0c7c4e48b9fd32fb5769aec92dd9a4ceb7e" translate="yes" xml:space="preserve">
          <source>Calendar field indicating whether a time is before noon (value &lt;em&gt;0&lt;/em&gt;, AM) or after (&lt;em&gt;1&lt;/em&gt;). Midnight is AM, noon is PM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c979229348e55fb3d2c54ab4fb921f9a80cbbc70" translate="yes" xml:space="preserve">
          <source>Calendar field numerically representing an era, for instance &lt;em&gt;1&lt;/em&gt; for AD and &lt;em&gt;0&lt;/em&gt; for BC in the Gregorian/Julian calendars and &lt;em&gt;235&lt;/em&gt; for the Heisei (平成) era in the Japanese calendar. Not all calendars have more than one era.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5455ca8de2e38aae8df557e72e90f3d68727b6c" translate="yes" xml:space="preserve">
          <source>Calendar field representing the year for &lt;a href=&quot;class.intlcalendar#intlcalendar.constants.field-week-of-year&quot;&gt;week of year&lt;/a&gt; purposes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf27dadeb22d8efee1fc0c42b4327599635f7770" translate="yes" xml:space="preserve">
          <source>Calendar field the milliseconds component of the time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c455bb32880debeed90b87c6a2f9792eaab6fdd" translate="yes" xml:space="preserve">
          <source>Calendar field whose value is &lt;em&gt;1&lt;/em&gt; for indicating a leap month and &lt;em&gt;0&lt;/em&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6519d7ad99915185629eae1aa267f8a1d25f0a56" translate="yes" xml:space="preserve">
          <source>Calendar information is returned as an array containing the elements &lt;em&gt;calname&lt;/em&gt;, &lt;em&gt;calsymbol&lt;/em&gt;, &lt;em&gt;month&lt;/em&gt;, &lt;em&gt;abbrevmonth&lt;/em&gt; and &lt;em&gt;maxdaysinmonth&lt;/em&gt;. The names of the different calendars which can be used as &lt;code&gt;calendar&lt;/code&gt; are as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc86c9ccbc724dc67d7c40490c95dab7ff68758f" translate="yes" xml:space="preserve">
          <source>Calendar to convert from, one of &lt;strong&gt;&lt;code&gt;CAL_GREGORIAN&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;CAL_JULIAN&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;CAL_JEWISH&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code&gt;CAL_FRENCH&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94fbfe8c5ddada193f1846967fbb469cf3ba77f8" translate="yes" xml:space="preserve">
          <source>Calendar to convert to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b15e1ed07dc2888cca159f2320334bb546383513" translate="yes" xml:space="preserve">
          <source>Calendar to return information for. If no calendar is specified information about all calendars is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7ac200fcd124fbfbc6b6efe4ac5596fc60fb6e2" translate="yes" xml:space="preserve">
          <source>Calendar to use for calculation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c32b5e8f76e88392937c2058ae77dfc2e81a119" translate="yes" xml:space="preserve">
          <source>Calendar to use for formatting or parsing. The default value is &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt;, which corresponds to &lt;strong&gt;&lt;code&gt;IntlDateFormatter::GREGORIAN&lt;/code&gt;&lt;/strong&gt;. This can either be one of the &lt;a href=&quot;class.intldateformatter#intl.intldateformatter-constants.calendartypes&quot;&gt;IntlDateFormatter calendar constants&lt;/a&gt; or an &lt;a href=&quot;class.intlcalendar&quot;&gt;IntlCalendar&lt;/a&gt;. Any &lt;a href=&quot;class.intlcalendar&quot;&gt;IntlCalendar&lt;/a&gt; object passed will be clone; it will not be changed by the &lt;a href=&quot;class.intldateformatter&quot;&gt;IntlDateFormatter&lt;/a&gt;. This will determine the calendar type used (gregorian, islamic, persian, etc.) and, if &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; is given for the &lt;code&gt;timezone&lt;/code&gt; parameter, also the timezone used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2301af79daf9f3781f11285d3174ad37e300db4" translate="yes" xml:space="preserve">
          <source>Call &lt;a href=&quot;intlcalendar.createinstance&quot;&gt;IntlCalendar::createInstance()&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b37dde5019d3cfbc7597a108ea7babc95e554bb0" translate="yes" xml:space="preserve">
          <source>Call the callback when a status change for process ID &lt;code&gt;pid&lt;/code&gt; (or any &lt;em&gt;PID&lt;/em&gt; if &lt;code&gt;pid&lt;/code&gt; is &lt;strong&gt;&lt;code&gt;0&lt;/code&gt;&lt;/strong&gt; ) has been received(a status change happens when the process terminates or is killed, or, when &lt;code&gt;trace&lt;/code&gt; is &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt;, additionally when it is stopped or continued). In other words, when the process receives a &lt;strong&gt;&lt;code&gt;SIGCHLD&lt;/code&gt;&lt;/strong&gt; , &lt;em&gt;Ev&lt;/em&gt; will fetch the outstanding exit/wait status for all changed/zombie children and call the callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb2315c9ee18707da1c14381c39436e1fa9c790b" translate="yes" xml:space="preserve">
          <source>Call to return a result set from a prepared statement query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42fb639b7313463881ed7d9bae34cc709237f03b" translate="yes" xml:space="preserve">
          <source>Callback</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5213073cc2b18043297c4d9333404b525da6bcf9" translate="yes" xml:space="preserve">
          <source>Callback function for &lt;a href=&quot;function.ob-start&quot;&gt;ob_start()&lt;/a&gt; to repair the buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="983334d400d4482f2d75d45f2d631665e88f9ba0" translate="yes" xml:space="preserve">
          <source>Callback function to be called when the matching event occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f17e030ca3f3cdf0960c0aa313109b2d7926e63b" translate="yes" xml:space="preserve">
          <source>Callback function to run for each element in each array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e398d4b72208aaafdc3b8dcec40d1a2daac6467e" translate="yes" xml:space="preserve">
          <source>Callback to call on failed assertions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fb58e60206430b52eda835054d7481c5b3c1212" translate="yes" xml:space="preserve">
          <source>Callback to invoke where the descriptor is ready for writing, or &lt;a href=&quot;language.types.null&quot;&gt;NULL&lt;/a&gt; if no callback is desired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5265a2844fad70a205f6b3c18dabc2ae947c45e" translate="yes" xml:space="preserve">
          <source>Callback to invoke where there is an error on the descriptor, cannot be &lt;a href=&quot;language.types.null&quot;&gt;NULL&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8485a461f9109d6e52d6a5ffae59a72a75054945" translate="yes" xml:space="preserve">
          <source>Callback to invoke where there is data to read, or &lt;a href=&quot;language.types.null&quot;&gt;NULL&lt;/a&gt; if no callback is desired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b46c7345be1e8cbff4b0b8fb788d597af9bf9f8" translate="yes" xml:space="preserve">
          <source>Callback which is called when connection is closed. Should match the following prototype:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f76df01ea2ecca152b3684e0fb295fd59be8d4d3" translate="yes" xml:space="preserve">
          <source>CallbackFilterIterator &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58ac6ec5eaa24c99a3bdcb46725a867792041e8b" translate="yes" xml:space="preserve">
          <source>CallbackFilterIterator (class)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2249cecc3e54caca5103f70c55445aa4b285423" translate="yes" xml:space="preserve">
          <source>CallbackFilterIterator Examples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98aa958a877b81f7dc2867c005fb11d771d86713" translate="yes" xml:space="preserve">
          <source>CallbackFilterIterator::__construct</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0deeb83c751d0fa0e888f212c23bce0702f51296" translate="yes" xml:space="preserve">
          <source>CallbackFilterIterator::__construct &amp;mdash; Create a filtered iterator from another iterator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="959a759f1cbada714f1c4611f0a8e76e9053feab" translate="yes" xml:space="preserve">
          <source>CallbackFilterIterator::__construct &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e428fbf7fd2f38b9779f1162de4a382e41775553" translate="yes" xml:space="preserve">
          <source>CallbackFilterIterator::accept</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83cb194fd1202a762b0a54bc490a28389031adf4" translate="yes" xml:space="preserve">
          <source>CallbackFilterIterator::accept &amp;mdash; Calls the callback with the current value, the current key and the inner iterator as arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cdbc7f8e0fb48caca8039adc84f7776e87c22a6" translate="yes" xml:space="preserve">
          <source>CallbackFilterIterator::accept &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82b65bf38b7df906188061acd9e0db1c91639fdc" translate="yes" xml:space="preserve">
          <source>Callbacks / Callables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="680afe89b82421dcb038b4c6844f93c9a9003485" translate="yes" xml:space="preserve">
          <source>Callbacks / Callables &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b707d5e60c2dc41b46cee4a8a06ef03bd2614f62" translate="yes" xml:space="preserve">
          <source>Callbacks can be denoted by &lt;a href=&quot;language.types.callable&quot;&gt;callable&lt;/a&gt; type hint as of PHP 5.4. This documentation used &lt;a href=&quot;language.pseudo-types#language.types.callback&quot;&gt;callback&lt;/a&gt; type information for the same purpose.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fd18e5adcbd9c9dc01541f348f1083d0af92e59" translate="yes" xml:space="preserve">
          <source>Callbacks registered with functions such as &lt;a href=&quot;function.call-user-func&quot;&gt;call_user_func()&lt;/a&gt; and &lt;a href=&quot;function.call-user-func-array&quot;&gt;call_user_func_array()&lt;/a&gt; will not be called if there is an uncaught exception thrown in a previous callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ea4a93e7c842d67eb954bf43f946f8587986f36" translate="yes" xml:space="preserve">
          <source>Callbacks registered with functions such as &lt;a href=&quot;function.call-user-func&quot;&gt;call_user_func()&lt;/a&gt; and &lt;strong&gt;call_user_func_array()&lt;/strong&gt; will not be called if there is an uncaught exception thrown in a previous callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11a577714969c98f931229e12d5e55a460a32241" translate="yes" xml:space="preserve">
          <source>Callbacks registered with functions such as &lt;strong&gt;call_user_func()&lt;/strong&gt; and &lt;a href=&quot;function.call-user-func-array&quot;&gt;call_user_func_array()&lt;/a&gt; will not be called if there is an uncaught exception thrown in a previous callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77d68f3b9e65d06187237e949674ba2922f7f990" translate="yes" xml:space="preserve">
          <source>Called during unserialization of the object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9af6c24d317d3d46b43714eca68b60fcb4cd742" translate="yes" xml:space="preserve">
          <source>Called for each element to test whether it has children.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2eaef5337f89b7eac957fff80b0be7b57e6d1c2" translate="yes" xml:space="preserve">
          <source>Called when closing the stream wrapper, right before &lt;a href=&quot;streamwrapper.stream-flush&quot;&gt;streamWrapper::stream_flush()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29ec03fdf689cb3bcfc0e10c1e9c2d6597d98bc5" translate="yes" xml:space="preserve">
          <source>Called when end recursing one level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b04de700a6d6fd2718d3b12d4d15ac9fd1d0c6f7" translate="yes" xml:space="preserve">
          <source>Called when iteration begins (after the first &lt;a href=&quot;recursiveiteratoriterator.rewind&quot;&gt;RecursiveIteratorIterator::rewind()&lt;/a&gt; call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32f4b03792fb7ea4e9f61866a8553133f38bbbe2" translate="yes" xml:space="preserve">
          <source>Called when iteration begins (after the first &lt;a href=&quot;recursivetreeiterator.rewind&quot;&gt;RecursiveTreeIterator::rewind()&lt;/a&gt; call).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7996b5680cb4f5c096089f2543f8ef3121a4090d" translate="yes" xml:space="preserve">
          <source>Called when opening the stream wrapper, right before &lt;a href=&quot;streamwrapper.stream-open&quot;&gt;streamWrapper::stream_open()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd1227ab0f3eb8679257007ee3a36aa89711c678" translate="yes" xml:space="preserve">
          <source>Called when recursing one level down.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9cc207c29028fc8b540c3d8d13712534492de37" translate="yes" xml:space="preserve">
          <source>Called when the iteration ends (when &lt;a href=&quot;recursiveiteratoriterator.valid&quot;&gt;RecursiveIteratorIterator::valid()&lt;/a&gt; first returns &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b01fab9ef1d983d75172ad73193f6eba815f986f" translate="yes" xml:space="preserve">
          <source>Called when the iteration ends (when &lt;a href=&quot;recursivetreeiterator.valid&quot;&gt;RecursiveTreeIterator::valid()&lt;/a&gt; first returns &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17c283e15036bb8c592ca35c9ca1f2aea28fccb8" translate="yes" xml:space="preserve">
          <source>Called when the next element is available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab32c42f1d66ea317baef11d5a4588b911834385" translate="yes" xml:space="preserve">
          <source>Calling &lt;a href=&quot;function.exit&quot;&gt;exit()&lt;/a&gt; after &lt;strong&gt;php_check_syntax()&lt;/strong&gt; resulted in a Segfault.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31b05b4568c93420c44c1aacd62c27db3572e04a" translate="yes" xml:space="preserve">
          <source>Calling &lt;em&gt;suspend&lt;/em&gt; / &lt;em&gt;resume&lt;/em&gt; has the side effect of updating the event loop time(see &lt;a href=&quot;ev.nowupdate&quot;&gt;Ev::nowUpdate()&lt;/a&gt; ).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40c44f00f904e589f7dab8e89329ab297388a393" translate="yes" xml:space="preserve">
          <source>Calling &lt;strong&gt;EventBuffer::pullup()&lt;/strong&gt; with a large size can be quite slow, since it potentially needs to copy the entire buffer's contents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fb039765bcdb016a05bf20b25d7c29dd5d02e68" translate="yes" xml:space="preserve">
          <source>Calling &lt;strong&gt;Generator::next()&lt;/strong&gt; is equivalent to calling &lt;a href=&quot;generator.send&quot;&gt;Generator::send()&lt;/a&gt; with &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; as argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c737409bf69b084bdb30b38c796cd718916236b" translate="yes" xml:space="preserve">
          <source>Calling &lt;strong&gt;PDO::prepare()&lt;/strong&gt; and &lt;a href=&quot;pdostatement.execute&quot;&gt;PDOStatement::execute()&lt;/a&gt; for statements that will be issued multiple times with different parameter values optimizes the performance of your application by allowing the driver to negotiate client and/or server side caching of the query plan and meta information, and helps to prevent SQL injection attacks by eliminating the need to manually quote the parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05ff2ba13e67341c5e73b4be90d1d3288f3ac12e" translate="yes" xml:space="preserve">
          <source>Calling &lt;strong&gt;get_class_vars()&lt;/strong&gt; will expose all properties, as when converting an object to a class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8bcde338fd8d33491cd2ace2ae6d92f9d4c98c1" translate="yes" xml:space="preserve">
          <source>Calling &lt;strong&gt;get_class_vars()&lt;/strong&gt; will now expose all the properties as an array, unlike previous behaviour where protected and private properties were prefixed with nul bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae035c4993916b6c9bbe2fb57dfb82692c0fb7b5" translate="yes" xml:space="preserve">
          <source>Calling PHP Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a21e72fb4a55243db8a068d2bde6886bbead7c7a" translate="yes" xml:space="preserve">
          <source>Calling the Parent's Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b280b0a529128109b5b765bed01672f26561afab" translate="yes" xml:space="preserve">
          <source>Calling the constructor with no parameters is the same as calling &lt;a href=&quot;mysqli.init&quot;&gt;mysqli_init()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b92591841f15703a8a777ea77f145540e2620c2f" translate="yes" xml:space="preserve">
          <source>Calling this function tells the SSL to renegotiate, and the buffer event to invoke appropriate callbacks. This is an advanced topic; this should be generally avoided unless one really knows what he/she does, especially since many SSL versions have had known security issues related to renegotiation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bebbad33abf1b2641b42c3bd8f3d9c659131c6c7" translate="yes" xml:space="preserve">
          <source>Calling this method directly is deprecated. Usually, SOAP functions can be called as methods of the &lt;a href=&quot;class.soapclient&quot;&gt;SoapClient&lt;/a&gt; object; in situations where this is not possible or additional options are needed, use &lt;a href=&quot;soapclient.soapcall&quot;&gt;SoapClient::__soapCall()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d56a9e386fca9fb201cbc1d455fc8598f8f0c35e" translate="yes" xml:space="preserve">
          <source>Calling this method from &lt;a href=&quot;control-structures.foreach&quot;&gt;foreach&lt;/a&gt; triggers warning &quot;Illegal type returned&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04d16434482ed8fc9295295ccde3613d81bc18d2" translate="yes" xml:space="preserve">
          <source>Calling this method is optional. The SoapClient uses the endpoint from the WSDL file by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d50b3cbf854dda751a607c597294e7dd25f3d43" translate="yes" xml:space="preserve">
          <source>Calling this method will affect all following calls to &lt;a href=&quot;class.soapclient&quot;&gt;SoapClient&lt;/a&gt; methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16ccca45bdcd25b1db8774063166a6b5dc2c1bea" translate="yes" xml:space="preserve">
          <source>Calling this method will replace any previous values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3a94ad71db9ce53001b7a78174067dc8a443f1a" translate="yes" xml:space="preserve">
          <source>Calls a function for every element in an iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="425dbcd2e2d7e881cfb87f50cb07c2ff2f197a63" translate="yes" xml:space="preserve">
          <source>Calls a user defined function or method given by the &lt;code&gt;function&lt;/code&gt; parameter, with the following arguments. This function must be called within a method context, it can't be used outside a class. It uses the &lt;a href=&quot;language.oop5.late-static-bindings&quot;&gt;late static binding&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="040ad091a4310e3d3f2bbedc1cfb71f9e436a962" translate="yes" xml:space="preserve">
          <source>Calls a user defined function or method given by the &lt;code&gt;function&lt;/code&gt; parameter. This function must be called within a method context, it can't be used outside a class. It uses the &lt;a href=&quot;language.oop5.late-static-bindings&quot;&gt;late static binding&lt;/a&gt;. All arguments of the forwarded method are passed as values, and as an array, similarly to &lt;a href=&quot;function.call-user-func-array&quot;&gt;call_user_func_array()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf20d7c52260dd80951ed899d0df47b6ef3df919" translate="yes" xml:space="preserve">
          <source>Calls the &lt;code&gt;callback&lt;/code&gt; given by the first parameter and passes the remaining parameters as arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cc10d946b780c421c14f86877c63c1b2037b6f7" translate="yes" xml:space="preserve">
          <source>Calls the &lt;code&gt;callback&lt;/code&gt; given by the first parameter with the parameters in &lt;code&gt;param_arr&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fafc604856a80710a0e55b923427a45c5dbc21ac" translate="yes" xml:space="preserve">
          <source>Calls the registered consumer handler callback function, which is set with &lt;a href=&quot;oauthprovider.consumerhandler&quot;&gt;OAuthProvider::consumerHandler()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5efcf22b5ee5c2916cb8d15990eea1abe8da9a20" translate="yes" xml:space="preserve">
          <source>Calls the registered timestamp handler callback function, which is set with &lt;a href=&quot;oauthprovider.timestampnoncehandler&quot;&gt;OAuthProvider::timestampNonceHandler()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7d9f090317b0eea28be4babbc41952e8e8579af" translate="yes" xml:space="preserve">
          <source>Calls the registered token handler callback function, which is set with &lt;a href=&quot;oauthprovider.tokenhandler&quot;&gt;OAuthProvider::tokenHandler()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b40169dd4031a5b25a82dce940d5232870976b8" translate="yes" xml:space="preserve">
          <source>Calls to &lt;strong&gt;stream_socket_recvfrom()&lt;/strong&gt; on socket-based streams, after calls to buffer-based stream functions (like &lt;a href=&quot;function.fread&quot;&gt;fread()&lt;/a&gt; or &lt;a href=&quot;function.stream-get-line&quot;&gt;stream_get_line()&lt;/a&gt;) read data directly from the socket and bypass the stream buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="562eb432ea66dcf3a7c72a1bd055bb818a91cd9b" translate="yes" xml:space="preserve">
          <source>Can also be determined later using &lt;a href=&quot;function.stream-socket-get-name&quot;&gt;stream_socket_get_name()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3fcc478e060afc3e6954f432505e0e652889627" translate="yes" xml:space="preserve">
          <source>Can be 1, 2, 3, 4, 5 for built-in fonts in latin2 encoding (where higher numbers corresponding to larger fonts) or any of your own font identifiers registered with &lt;a href=&quot;function.imageloadfont&quot;&gt;imageloadfont()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="267c87207fa4e22b8a584ab54ab27dec8dae9db3" translate="yes" xml:space="preserve">
          <source>Can be &lt;strong&gt;&lt;code&gt;STREAM_CAST_FOR_SELECT&lt;/code&gt;&lt;/strong&gt; when &lt;a href=&quot;function.stream-select&quot;&gt;stream_select()&lt;/a&gt; is calling &lt;strong&gt;stream_cast()&lt;/strong&gt; or &lt;strong&gt;&lt;code&gt;STREAM_CAST_AS_STREAM&lt;/code&gt;&lt;/strong&gt; when &lt;strong&gt;stream_cast()&lt;/strong&gt; is called for other uses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7d44e05f73c2bbef8235a847f974206de10b279" translate="yes" xml:space="preserve">
          <source>Can be a combination of the following flags (note that it doesn't make sense to use &lt;strong&gt;&lt;code&gt;PREG_PATTERN_ORDER&lt;/code&gt;&lt;/strong&gt; together with &lt;strong&gt;&lt;code&gt;PREG_SET_ORDER&lt;/code&gt;&lt;/strong&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f79e3f8b058d4046be6d67a06089920d6753039f" translate="yes" xml:space="preserve">
          <source>Can be a file name or a valid stream resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2573af0cff8687def8a9f9eb738439f19917aca" translate="yes" xml:space="preserve">
          <source>Can be a stream opened with &lt;a href=&quot;function.fopen&quot;&gt;fopen()&lt;/a&gt; or similar functions, numeric file descriptor, or socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28a327dfb12bb384645e9864a354a57b9b51f9bb" translate="yes" xml:space="preserve">
          <source>Can be called in &lt;a href=&quot;pool.collect&quot;&gt;Pool::collect()&lt;/a&gt; to determine if this object is garbage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dceabbdca45b59d782a65d6ed6e34882f4420120" translate="yes" xml:space="preserve">
          <source>Can be called multiple times to accept connections on different sockets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2b4968b7f9ebe18b0973e23431340abf20d8d0a" translate="yes" xml:space="preserve">
          <source>Can be called multiple times to bind the same HTTP server to multiple different ports.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba9f0cd0493b4544df4e0c63810aa7c53c51c1a1" translate="yes" xml:space="preserve">
          <source>Can be either &quot;r&quot; for read-only, &quot;w&quot; for write only or &quot;rw&quot; for read and write.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b28c6147adaa4ab2df7678dd87c14d81ec6178ab" translate="yes" xml:space="preserve">
          <source>Can be either a host name or an IP address. Passing the &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; value or the string &quot;localhost&quot; to this parameter, the local host is assumed. When possible, pipes will be used instead of the TCP/IP protocol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dfb4934ee5b9f7513225b30da8177473e318ac0" translate="yes" xml:space="preserve">
          <source>Can be set to &lt;strong&gt;&lt;code&gt;DatePeriod::EXCLUDE_START_DATE&lt;/code&gt;&lt;/strong&gt; to exclude the start date from the set of recurring dates within the period.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb42a418d8d56d646f45cea2f5c2187366adfeda" translate="yes" xml:space="preserve">
          <source>Can be used during SOAP header handling to report an error in the response header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31f58011d9a54dcdcd64bdd6a6c92cab42589a8b" translate="yes" xml:space="preserve">
          <source>Can be used to iterate through recursive iterators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13fbd976866d8161d37057bb0028b282351d52c0" translate="yes" xml:space="preserve">
          <source>Can be used to mask the triggering of the &lt;code&gt;error_handler&lt;/code&gt; function just like the &lt;a href=&quot;https://secure.php.net/manual/en/errorfunc.configuration.php#ini.error-reporting&quot;&gt;error_reporting&lt;/a&gt; ini setting controls which errors are shown. Without this mask set the &lt;code&gt;error_handler&lt;/code&gt; will be called for every error regardless to the setting of the &lt;a href=&quot;https://secure.php.net/manual/en/errorfunc.configuration.php#ini.error-reporting&quot;&gt;error_reporting&lt;/a&gt; setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d066ec9a8ac9ec1af958a45769cad7d69c3f938e" translate="yes" xml:space="preserve">
          <source>Can be used to select the proper fault encoding from WSDL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c81e27b8f3a37996a0963275cbe5bead3abd533b" translate="yes" xml:space="preserve">
          <source>Can be used to set protocol specific login options, such as the preferred authentication mechanism via &quot;AUTH=NTLM&quot; or &quot;AUTH=*&quot;, and should be used in conjunction with the &lt;strong&gt;&lt;code&gt;CURLOPT_USERNAME&lt;/code&gt;&lt;/strong&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d116d1e9047b1372c149f17fb04eb8353dd8867e" translate="yes" xml:space="preserve">
          <source>Can be used to split a string into smaller chunks which is useful for e.g. converting &lt;a href=&quot;function.base64-encode&quot;&gt;base64_encode()&lt;/a&gt; output to match RFC 2045 semantics. It inserts &lt;code&gt;end&lt;/code&gt; every &lt;code&gt;chunklen&lt;/code&gt; characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdd6db61dcb3b1c28cd6114fada64f944ca1aae7" translate="yes" xml:space="preserve">
          <source>Can be used with other directory functions such as &lt;a href=&quot;function.readdir&quot;&gt;readdir()&lt;/a&gt;, &lt;a href=&quot;function.rewinddir&quot;&gt;rewinddir()&lt;/a&gt; and &lt;a href=&quot;function.closedir&quot;&gt;closedir()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9302e145dfc8b8e02fddd582d27a74ca2bfe8f7" translate="yes" xml:space="preserve">
          <source>Can be useful, for instance, if you generate identifiers simultaneously on several hosts that might happen to generate the identifier at the same microsecond.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9d4673a93977192ae106b7ceb27c0ddf2e8b810" translate="yes" xml:space="preserve">
          <source>Can either be &lt;strong&gt;&lt;code&gt;INI_SCANNER_NORMAL&lt;/code&gt;&lt;/strong&gt; (default) or &lt;strong&gt;&lt;code&gt;INI_SCANNER_RAW&lt;/code&gt;&lt;/strong&gt;. If &lt;strong&gt;&lt;code&gt;INI_SCANNER_RAW&lt;/code&gt;&lt;/strong&gt; is supplied, then option values will not be parsed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80e8ffafcafae643f259a0895870f650bbf63405" translate="yes" xml:space="preserve">
          <source>Can read all embedded</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b28d7d853ac2ed1f14e4908cc74d8a8f61386d0f" translate="yes" xml:space="preserve">
          <source>Can return all value types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be3e9ec6d881c3e9ca5c4a5fd75ecb788bb907fe" translate="yes" xml:space="preserve">
          <source>Can return any type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="510ef59c836a264c7d0b899f0ebdff1f2c9bd865" translate="yes" xml:space="preserve">
          <source>Can the cert be used for Any/All purposes?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f73afa89a66f53a9f27ddb367d34841cd18d86db" translate="yes" xml:space="preserve">
          <source>Can the cert be used for Netscape SSL server?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26f9e3f7cd060c187ea66f87dc3b74e5ca735392" translate="yes" xml:space="preserve">
          <source>Can the cert be used to encrypt S/MIME email?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1df7f9add4f3fc765ab2f390dd5efa0d280c44b3" translate="yes" xml:space="preserve">
          <source>Can the cert be used to sign S/MIME email?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67524322f6f932327dda463b88a4f4b152a714a1" translate="yes" xml:space="preserve">
          <source>Can the cert be used to sign a certificate revocation list (CRL)?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0283b1efd4b0fee6d44fc95055d6ed63f0f3c355" translate="yes" xml:space="preserve">
          <source>Can the certificate be used for the client side of an SSL connection?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cf6b16db748929c591188efdb7a49a1476f66cf" translate="yes" xml:space="preserve">
          <source>Can the certificate be used for the server side of an SSL connection?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e31c370be18f122fd275ee3bd84adf3d434f78b9" translate="yes" xml:space="preserve">
          <source>Can&amp;rsquo;t be converted to an array when objects are used as keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e7bf275cd18a6e4879b261b0409cefd9a6d1ad8" translate="yes" xml:space="preserve">
          <source>Can't open file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0d541b8554b84dd31ba01ed086766cf37c64064" translate="yes" xml:space="preserve">
          <source>Cancel the break operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c839c3928613fd87f64ac065cf002519a734eb57" translate="yes" xml:space="preserve">
          <source>Cancels a pending HTTP request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d364e109562a23a3e79a327556fc4e243f6d626c" translate="yes" xml:space="preserve">
          <source>Cancels a statement. Any results associated with the statement that have not been consumed are deleted. After &lt;strong&gt;sqlsrv_cancel()&lt;/strong&gt; has been called, the specified statement can be re-executed if it was created with &lt;a href=&quot;function.sqlsrv-prepare&quot;&gt;sqlsrv_prepare()&lt;/a&gt;. Calling &lt;strong&gt;sqlsrv_cancel()&lt;/strong&gt; is not necessary if all the results associated with the statement have been consumed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03f98ffe944c09e91f7b2a802264d3107d2cb5b5" translate="yes" xml:space="preserve">
          <source>Cancels an ongoing HTTP request. The callback associated with this request is not executed and the request object is freed. If the request is currently being processed, e.g. it is ongoing, the corresponding &lt;a href=&quot;class.eventhttpconnection&quot;&gt;EventHttpConnection&lt;/a&gt; object is going to get reset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f2dc713d0c333916eb254ea8df1b42ae711ac60" translate="yes" xml:space="preserve">
          <source>Cancels the &lt;code&gt;event&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9144dffd82f786b9d4b01d11eda24d1668976691" translate="yes" xml:space="preserve">
          <source>Cannot override special constants NULL, TRUE, FALSE, ZEND_THREAD_SAFE or ZEND_DEBUG_BUILD</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95a722110b1eb6ddc86e92c055f4fe4d79ba00ae" translate="yes" xml:space="preserve">
          <source>Canonicalize nodes to a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60ddfeaa66cf20ee8a4ef17d4f688e312ffbd0ac" translate="yes" xml:space="preserve">
          <source>Canonicalize nodes to a string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91a22bedc34b6fa6c2cec408a318dfcd1e10b14a" translate="yes" xml:space="preserve">
          <source>Capacity does not have to be a power of 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7726a069855c2665e4ac52e5dbcca2a7d87444ef" translate="yes" xml:space="preserve">
          <source>Capacity must be a power of 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e87979c4be633e8fa851bca63d9d89e8b10ebc1e" translate="yes" xml:space="preserve">
          <source>Capacity will always be rounded up to the nearest power of 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02d35838400adc1cef187230960adc49e8a250f5" translate="yes" xml:space="preserve">
          <source>Capacity will stay the same if this value is less than or equal to the current capacity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f8142a706979cd4f55735206a77981557df0f33" translate="yes" xml:space="preserve">
          <source>Capture a window (IE for example)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="939862de092c24520fdc036d581b663f8cbe9d51" translate="yes" xml:space="preserve">
          <source>Capture a window (IE for example) but with its content</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89c3ad58648623a8830f22e3f6fa281cc24bfe2e" translate="yes" xml:space="preserve">
          <source>Capturing subpatterns that occur inside negative lookahead assertions are counted, but their entries in the offsets vector are never set. Perl sets its numerical variables from any such patterns that are matched before the assertion fails to match something (thereby succeeding), but only if the negative lookahead assertion contains just one branch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e15f60bca6175740b4eaf6baa0273c992b91cdb3" translate="yes" xml:space="preserve">
          <source>Care must be taken when using &lt;strong&gt;mysqli_stmt_bind_param()&lt;/strong&gt; in conjunction with &lt;a href=&quot;function.call-user-func-array&quot;&gt;call_user_func_array()&lt;/a&gt;. Note that &lt;strong&gt;mysqli_stmt_bind_param()&lt;/strong&gt; requires parameters to be passed by reference, whereas &lt;a href=&quot;function.call-user-func-array&quot;&gt;call_user_func_array()&lt;/a&gt; can accept as a parameter a list of variables that can represent references or values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c58cdb0deb66b8a5abeb2dfbc4a6cd09806c6926" translate="yes" xml:space="preserve">
          <source>Care should be taken when using the &lt;strong&gt;highlight_file()&lt;/strong&gt; function to make sure that you do not inadvertently reveal sensitive information such as passwords or any other type of information that might create a potential security risk.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a4d89fb9046d3ff9d137ef430febe85ad8b5810" translate="yes" xml:space="preserve">
          <source>Case insensitive regular expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba69fec648f7334926afaf500b2d740d53f9ce89" translate="yes" xml:space="preserve">
          <source>Case sensitive regular expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2d2c8237d5f96d72a96ff8db8856b062003f1eb" translate="yes" xml:space="preserve">
          <source>Case-insensitive constants are stored as lower-case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ad05fa653db6e3f66049be41b0e871a77d75979" translate="yes" xml:space="preserve">
          <source>Caseless match. Part of the GNU extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90ee05556830aae7146ab0dec3984995aaba6db9" translate="yes" xml:space="preserve">
          <source>Casting a variable to &lt;a href=&quot;language.types.null&quot;&gt;null&lt;/a&gt; using &lt;em&gt;(unset) $var&lt;/em&gt; will &lt;em&gt;not&lt;/em&gt; remove the variable or unset its value. It will only return a &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59d4061f16374bd7728c787989a8853cd4147db5" translate="yes" xml:space="preserve">
          <source>Casting literal &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt;s and variables to binary &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt;s:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab1f4a6c85581bb34201b8ab3481f464ecde50c9" translate="yes" xml:space="preserve">
          <source>Casting to &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5255ee8acd2539834e63eab04e115ca7c72acf9f" translate="yes" xml:space="preserve">
          <source>Casting to an &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; is not supported yet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60ce91ce6622ce716c849e7f0b1095a9aa3a1e77" translate="yes" xml:space="preserve">
          <source>Causes a store to add the specified &lt;code&gt;flag&lt;/code&gt; to the flags set for the messages in the specified &lt;code&gt;sequence&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="957ac68f008e3a9b4bad4605e7cbb640aae45629" translate="yes" xml:space="preserve">
          <source>Causes the calling context to wait for the referenced Thread to finish executing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a8198931f1172ca53233ed0a8642a79b5c1c2db" translate="yes" xml:space="preserve">
          <source>Causes the worker to wait for activity from one of the Gearman job servers when operating in non-blocking I/O mode. On failure, issues a &lt;strong&gt;&lt;code&gt;E_WARNING&lt;/code&gt;&lt;/strong&gt; with the last Gearman error encountered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e9c05e9dc54af2d59b97790596002f1446bd045" translate="yes" xml:space="preserve">
          <source>Causing this function to return a multi-dimensional array with categories in the keys of the first dimension and constants and their values in the second dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4e2e1ffb3ed14234d78a0838a19f944b1af32e2" translate="yes" xml:space="preserve">
          <source>Cellular</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01ae9c45a25282a2726ede970881df179f8d29df" translate="yes" xml:space="preserve">
          <source>Certain characters have special significance in HTML, and should be represented by HTML entities if they are to preserve their meanings. This function returns a string with these conversions made. If you require all input substrings that have associated named entities to be translated, use &lt;a href=&quot;function.htmlentities&quot;&gt;htmlentities()&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="549b7edc4b70fed57fe116c401d42e18f9b914b8" translate="yes" xml:space="preserve">
          <source>Certain items that may appear in patterns are more efficient than others. It is more efficient to use a character class like [aeiou] than a set of alternatives such as (a|e|i|o|u). In general, the simplest construction that provides the required behaviour is usually the most efficient. Jeffrey Friedl's book contains a lot of discussion about optimizing regular expressions for efficient performance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="484b3a3e8b22e716b150e248e75dab06b5ab8034" translate="yes" xml:space="preserve">
          <source>Certain parameter values are reported by the server automatically at connection startup or whenever their values change. &lt;strong&gt;pg_parameter_status()&lt;/strong&gt; can be used to interrogate these settings. It returns the current value of a parameter if known, or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; if the parameter is not known.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbdbc01444cf7fa4567a4aedf30e0a87e802d5de" translate="yes" xml:space="preserve">
          <source>Change the brightness and/or contrast of an image. It converts the brightness and contrast parameters into slope and intercept and calls a polynomical function to apply to the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a771ad79f243df379e68719c0015c29858e28e77" translate="yes" xml:space="preserve">
          <source>Change the size of an array to the new size of &lt;code&gt;size&lt;/code&gt;. If &lt;code&gt;size&lt;/code&gt; is less than the current array size, any values after the new size will be discarded. If &lt;code&gt;size&lt;/code&gt; is greater than the current array size, the array will be padded with &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1e4f273ec3f526196b17101de057b776173fbba" translate="yes" xml:space="preserve">
          <source>Change this target color to specified opacity value within the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="565774501a4f790b48089809f5997d052210cb77" translate="yes" xml:space="preserve">
          <source>Change this target color to the fill color within the image. An ImagickPixel object or a string representing the target color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a7125c3b36852cc06cde56105405183195731d2" translate="yes" xml:space="preserve">
          <source>Changed &lt;code&gt;initial&lt;/code&gt; to allow &lt;a href=&quot;language.pseudo-types#language.types.mixed&quot;&gt;mixed&lt;/a&gt;, previously &lt;a href=&quot;language.types.integer&quot;&gt;integer&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe621b3b097a12b7da41530d4e62b06ba2696414" translate="yes" xml:space="preserve">
          <source>Changed the &lt;code&gt;context&lt;/code&gt; parameter to actually have an effect. Previously, any &lt;code&gt;context&lt;/code&gt; was ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1216c33a6cf51e4fa8f04e9a062a01431bdfdc3" translate="yes" xml:space="preserve">
          <source>Changed the default value of &lt;code&gt;sort_flags&lt;/code&gt; back to &lt;strong&gt;&lt;code&gt;SORT_STRING&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17a4b2c94a0a11547f1a4d570afbb30c33d4bfea" translate="yes" xml:space="preserve">
          <source>Changed the function to use the streams API. It means that you can use it with wrappers, like &lt;em&gt;md5_file('http://example.com/..')&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f71fe07a26f4087c69d78f4a5897985669bdc5d6" translate="yes" xml:space="preserve">
          <source>Changed the function to use the streams API. It means that you can use it with wrappers, like &lt;em&gt;sha1_file('http://example.com/..')&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9be23e634fb4b627b0f6f8182a82c3be0c869ec6" translate="yes" xml:space="preserve">
          <source>Changed the return value on success from &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; to &lt;a href=&quot;class.datetime&quot;&gt;DateTime&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b9b5fd99e49a9c42d961cfa9168e5d3547c8d91" translate="yes" xml:space="preserve">
          <source>Changed: An &lt;strong&gt;&lt;code&gt;E_WARNING&lt;/code&gt;&lt;/strong&gt; level error is issued if the magic &lt;a href=&quot;language.oop5.overloading&quot;&gt;overloading&lt;/a&gt; methods are declared &lt;a href=&quot;language.oop5.static&quot;&gt;static&lt;/a&gt;. It also enforces the public visibility requirement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e6226cbbb4131d8a7e99613544e77577cb9c9b5" translate="yes" xml:space="preserve">
          <source>Changed: Classes that implement interfaces with methods that have default values in the prototype are no longer required to match the interface's default value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49b50e16779e19ac13d8ddd6daf76711ce39f42c" translate="yes" xml:space="preserve">
          <source>Changed: If an &lt;a href=&quot;language.oop5.abstract&quot;&gt;abstract&lt;/a&gt; class defines a signature for the constructor it will now be enforced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59700806c769e93e9868dffa44fe9bed8194e9a5" translate="yes" xml:space="preserve">
          <source>Changed: In previous versions of PHP 5, the use of &lt;em&gt;var&lt;/em&gt; was considered deprecated and would issue an &lt;strong&gt;&lt;code&gt;E_STRICT&lt;/code&gt;&lt;/strong&gt; level error. It's no longer deprecated, therefore does not emit the error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e651239a02eb72d2d194b6c7b763534bb91d5382" translate="yes" xml:space="preserve">
          <source>Changed: It's now possible to reference the class using a variable (e.g., &lt;em&gt;echo $classname::constant;&lt;/em&gt;). The variable's value can not be a keyword (e.g., &lt;em&gt;self&lt;/em&gt;, &lt;em&gt;parent&lt;/em&gt; or &lt;em&gt;static&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d69fdee238b4a61d09b89cc2a858334288b289b" translate="yes" xml:space="preserve">
          <source>Changed: Methods with the same name as the last element of a &lt;a href=&quot;https://secure.php.net/manual/en/language.namespaces.php&quot;&gt;namespaced&lt;/a&gt; class name will no longer be treated as &lt;a href=&quot;language.oop5.decon&quot;&gt;constructor&lt;/a&gt;. This change doesn't affect non-namespaced classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b187a33705c9cdea984fbe9e523b4978ffe53812" translate="yes" xml:space="preserve">
          <source>Changed: Prior to 5.3.0, exceptions thrown in the &lt;a href=&quot;function.autoload&quot;&gt;__autoload()&lt;/a&gt; function could not be caught in the &lt;a href=&quot;language.exceptions&quot;&gt;catch&lt;/a&gt; block, and would result in a fatal error. Exceptions now thrown in the __autoload function can be caught in the &lt;a href=&quot;language.exceptions&quot;&gt;catch&lt;/a&gt; block, with one provison. If throwing a custom exception, then the custom exception class must be available. The __autoload function may be used recursively to autoload the custom exception class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd4fbafec62d236fcf8d36358fa92d615dce4a27" translate="yes" xml:space="preserve">
          <source>Changed: The &lt;a href=&quot;language.oop5.magic#object.set-state&quot;&gt;__set_state()&lt;/a&gt; static method is now called for classes exported by &lt;a href=&quot;function.var-export&quot;&gt;var_export()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5500f83937e11f05262b313ec2dc5d9216a3d89c" translate="yes" xml:space="preserve">
          <source>Changed: The &lt;a href=&quot;language.oop5.magic#object.tostring&quot;&gt;__toString()&lt;/a&gt; method was only called when it was directly combined with &lt;a href=&quot;function.echo&quot;&gt;echo&lt;/a&gt; or &lt;a href=&quot;function.print&quot;&gt;print&lt;/a&gt;. But now, it is called in any string context (e.g. in &lt;a href=&quot;function.printf&quot;&gt;printf()&lt;/a&gt; with &lt;em&gt;%s&lt;/em&gt; modifier) but not in other types contexts (e.g. with &lt;em&gt;%d&lt;/em&gt; modifier). Since PHP 5.2.0, converting objects without a &lt;em&gt;__toString&lt;/em&gt; method to string emits a &lt;strong&gt;&lt;code&gt;E_RECOVERABLE_ERROR&lt;/code&gt;&lt;/strong&gt; level error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="164b3d4809f98d0458414f1bf9cf3c9dcba16bb5" translate="yes" xml:space="preserve">
          <source>Changelog</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="221b3aae0a8f71bac27555a4910a484a14e614ca" translate="yes" xml:space="preserve">
          <source>Changelog &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2245f7b79f45ed4bc3f63e4a999b6dbd4aba3e7d" translate="yes" xml:space="preserve">
          <source>Changes PHP's current directory to &lt;code&gt;directory&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aad7b18f58ecaf616397a22cb585ac533a34a03b" translate="yes" xml:space="preserve">
          <source>Changes any pixel that matches color with the color defined by fill.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33b0e877a5a68daa827b8ecbfcfc36dbd22f3391" translate="yes" xml:space="preserve">
          <source>Changes any pixel that matches color with the color defined by fill. This method is available if Imagick has been compiled against ImageMagick version 6.3.8 or newer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3ad9ab828f0e604ae29cddd57eb07b21fe8bc64" translate="yes" xml:space="preserve">
          <source>Changes file, or directory permissions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaca8d3a13b18b8991f34a88a65438c0ac406cf0" translate="yes" xml:space="preserve">
          <source>Changes the color value of any pixel that matches target and is an immediate neighbor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf232318789517a6cf83f2eb1d3c0dd614ecb1fe" translate="yes" xml:space="preserve">
          <source>Changes the color value of any pixel that matches target and is an immediate neighbor. As of ImageMagick 6.3.8 this method has been deprecated and &lt;a href=&quot;imagick.floodfillpaintimage&quot;&gt;Imagick::floodfillPaintImage()&lt;/a&gt; should be used instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4094769f857f4007692ca323b9226912ea700fd" translate="yes" xml:space="preserve">
          <source>Changes the color value of any pixel that matches target and is an immediate neighbor. This method is a replacement for deprecated &lt;a href=&quot;imagick.paintfloodfillimage&quot;&gt;Imagick::paintFloodFillImage()&lt;/a&gt;. This method is available if Imagick has been compiled against ImageMagick version 6.3.8 or newer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eec1f99348c00a6241d4b7b2b045e9b34efdce55" translate="yes" xml:space="preserve">
          <source>Changes the current directory to the specified one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e213780a032815f48bfcbd519d9022a9db4a2aaa" translate="yes" xml:space="preserve">
          <source>Changes the default external entity loader.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97ffcc419f4cc139b24bc7720a272c2a5fce9509" translate="yes" xml:space="preserve">
          <source>Changes the driver error handling and logging configurations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="033e04666590a71720b9391e8cff57a6956fa997" translate="yes" xml:space="preserve">
          <source>Changes the file descriptor on which the buffered event operates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f835aaec1e6abbcd91c87831f5f5a921afab34b2" translate="yes" xml:space="preserve">
          <source>Changes the root directory of the current process to &lt;code&gt;directory&lt;/code&gt;, and changes the current working directory to &quot;/&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ffc2bea1567db5399d04be318385ad0cb89019c" translate="yes" xml:space="preserve">
          <source>Changes the size of an image to the given dimensions and removes any associated profiles. The goal is to produce small low cost thumbnail images suited for display on the Web. If TRUE is given as a third parameter then columns and rows parameters are used as maximums for each side. Both sides will be scaled down until the match or are smaller than the parameter given for the side.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a45ee2ebc92943db53db032acaa5788bb4e22776" translate="yes" xml:space="preserve">
          <source>Changes the size of an image to the given dimensions and removes any associated profiles. The goal is to produce small, low cost thumbnail images suited for display on the Web. If &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; is given as a third parameter then columns and rows parameters are used as maximums for each side. Both sides will be scaled down until they match or are smaller than the parameter given for the side.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f9c20bc33517c3c415c28cc8e32988a58f69d69" translate="yes" xml:space="preserve">
          <source>Changes the specified servlet type to a new value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cca4123de876d4c2ef2ce4b31af9814eba6610e" translate="yes" xml:space="preserve">
          <source>Changes the timeout in seconds used for all network related functions. &lt;code&gt;value&lt;/code&gt; must be an integer that is greater than 0. The default timeout is 90 seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2043433d5e57a83a9568a8b993a69f510c21286" translate="yes" xml:space="preserve">
          <source>Changes the transparency value of any pixel that matches target and is an immediate neighbor. If the method &lt;strong&gt;&lt;code&gt;FillToBorderMethod&lt;/code&gt;&lt;/strong&gt; is specified, the transparency value is changed for any neighbor pixel that does not match the bordercolor member of image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa4ddf7cdc87e7a74091ae17c9e7a1288ff65d41" translate="yes" xml:space="preserve">
          <source>Changes the user of the specified database connection and sets the current database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6aec88534c67f71901c4cb63d16d8be9e025baa" translate="yes" xml:space="preserve">
          <source>Changes the value of individual pixels based on the intensity of each pixel compared to threshold. The result is a high-contrast, two color image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9e99e4f0aa07dd5df5c6f9d557338fd96503c28" translate="yes" xml:space="preserve">
          <source>Changes the value of individual pixels based on the intensity of each pixel compared to threshold. The result is a high-contrast, two color image. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a576a7a234b0502c567083e79bb3dcdc7c4d136" translate="yes" xml:space="preserve">
          <source>Changes the value of the internal configuration variable specified by &lt;code&gt;type&lt;/code&gt; to &lt;code&gt;charset&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8b64e63fc85413ba2792dbbb7da686c18e670c8" translate="yes" xml:space="preserve">
          <source>Changes to the PHP 5 OOP model are logged here. Descriptions and other notes regarding these features are documented within the OOP 5 documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65a7f1ae65d7b422f9ee7c6694233280151dd562" translate="yes" xml:space="preserve">
          <source>Changes to the parent directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9750570b86d4c79dc2c2cdd0f90ee3c321f1de9" translate="yes" xml:space="preserve">
          <source>Changes were made to bring this function into line with Perl:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10bc8cdbf0657cf0f50514d32547661d5b18e7e5" translate="yes" xml:space="preserve">
          <source>Changing Method Visibility</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99218d648225e19bb44c8828dbf753bd2455c472" translate="yes" xml:space="preserve">
          <source>Changing Sandbox Settings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f460dadea528354731454a9d93e4eb432aad59c3" translate="yes" xml:space="preserve">
          <source>Changing the data structure will require that PHP be running as the same user that created the queue, owns the queue (as determined by the existing msg_perm.xxx fields), or be running with root privileges. root privileges are required to raise the msg_qbytes values above the system defined limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f766ed0a0309e86d7faf43e72950a81da7106bc2" translate="yes" xml:space="preserve">
          <source>Changing the interpolation method affects the following functions when rendering:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15daad1a434f587bf23acd8e16f86e643cf178e1" translate="yes" xml:space="preserve">
          <source>Changing the reporting mode is now be per-request, rather than per-process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ee9a618de8647ddcc6248ceb082c3098b6f8ba5" translate="yes" xml:space="preserve">
          <source>Changing the values of the &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; directly is possible by passing them by reference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="685f8bf0f20519c1595d8675740d4f6e4ab98c6f" translate="yes" xml:space="preserve">
          <source>Chapter 9.3 of Applied Cryptography by Schneier (ISBN 0-471-11709-9)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee9946c82d4a077c5be79e3015a3d2479d9fcaf2" translate="yes" xml:space="preserve">
          <source>Character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b0fccd7912024f8e7faaf2de205ad571e0d54fa" translate="yes" xml:space="preserve">
          <source>Character (class)es</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf238be65bb5e7ebb05fdca2c63f71cc0a076a1a" translate="yes" xml:space="preserve">
          <source>Character classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="420d8ea0224b3183e545b1f3d610c0f0bae2c311" translate="yes" xml:space="preserve">
          <source>Character classes &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a957a85791e15e334ec635968e8b96c22c9919cf" translate="yes" xml:space="preserve">
          <source>Character data handler is called for every piece of a text in the XML document. It can be called multiple times inside each fragment (e.g. for non-ASCII strings).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a76df4973312c36227104658aa1870a645e4055" translate="yes" xml:space="preserve">
          <source>Character encoding name to use. If it is omitted, internal character encoding is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08db14fe8aada6d236f274a8e523ab6a0ad06d17" translate="yes" xml:space="preserve">
          <source>Character representing a digit in the pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53574c33d0df905a3dff3d09e8461d806c02a865" translate="yes" xml:space="preserve">
          <source>Character sequence values are limited to a length of one. If a length greater than one is entered, only the first character is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30e9d37f8810b593710f081d4f841fbff6bdfcb9" translate="yes" xml:space="preserve">
          <source>Character set name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1762947ab70554a2fe49eb5036055836041db7bb" translate="yes" xml:space="preserve">
          <source>Character set status (?)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6cf14120888c6904e3c860cbb913b1af0d382e1" translate="yes" xml:space="preserve">
          <source>Character string specifying text encoding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b9630fe3a2f91f46538d00c3f2a365f3bb880a0" translate="yes" xml:space="preserve">
          <source>Characters encoded are &lt;em&gt;NUL (ASCII 0), \n, \r, \, ', &quot;, and Control-Z&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd32fb6a40f700b334caf2cde53e39595abc9bc5" translate="yes" xml:space="preserve">
          <source>Characters followed by a colon (parameter requires value)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64cd64497e5b90a1510b23ba826b333f4afbf65d" translate="yes" xml:space="preserve">
          <source>Characters followed by two colons (optional value)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4535003f4197f450a0c449d17f48f1f048c5ccc5" translate="yes" xml:space="preserve">
          <source>Characters to ignore when escaping.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca739ebcfa4270b1dc840540a0bd2f2057f143bb" translate="yes" xml:space="preserve">
          <source>Characters within &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt;s may be accessed and modified by specifying the zero-based offset of the desired character after the &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt; using square &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; brackets, as in &lt;var&gt;&lt;var&gt;$str[42]&lt;/var&gt;&lt;/var&gt;. Think of a &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt; as an &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; of characters for this purpose. The functions &lt;a href=&quot;function.substr&quot;&gt;substr()&lt;/a&gt; and &lt;a href=&quot;function.substr-replace&quot;&gt;substr_replace()&lt;/a&gt; can be used when you want to extract or replace more than 1 character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="805b8364dd741b70184f3241017dba0068056c09" translate="yes" xml:space="preserve">
          <source>Charset</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eb495dcaa3cab5e988c5785109614edc5af1f7f" translate="yes" xml:space="preserve">
          <source>Charset that was used by Mac OS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f2db9dff102c0e6c941cd0f3cb314ce6100892c" translate="yes" xml:space="preserve">
          <source>Check &lt;a href=&quot;http://tidy.sourceforge.net/docs/quickref.html&quot;&gt;&amp;raquo; http://tidy.sourceforge.net/docs/quickref.html&lt;/a&gt; for an explanation about each option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5737f92df812ea9d51b9a20ee1bb663b9bee2e5a" translate="yes" xml:space="preserve">
          <source>Check http://tidy.sourceforge.net/docs/quickref.html for an explanation about each option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb98f71b068eb82421ede3a637555f8a4e007040" translate="yes" xml:space="preserve">
          <source>Check if a &lt;var&gt;php.ini&lt;/var&gt; file is loaded, and retrieve its path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c6af997fb277ba0d59a2595d2023c95cfb84726" translate="yes" xml:space="preserve">
          <source>Check if a code point has the Alphabetic Unicode property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad47924164bf60bfcb04298c37dae3f4974f0173" translate="yes" xml:space="preserve">
          <source>Check if a code point has the Lowercase Unicode property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f860d9cd59ce25379eb7a201863e64d1d167459" translate="yes" xml:space="preserve">
          <source>Check if a code point has the Uppercase Unicode property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c478d9699ae97aa0b715c532d2d86ad9dac2d42f" translate="yes" xml:space="preserve">
          <source>Check if a code point has the White_Space Unicode property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5f93107f26f6edc0d23725bdcedfc55da0e8ab8" translate="yes" xml:space="preserve">
          <source>Check if a number is a perfect square.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="913b70d0c042c58061f00d2de8cf83d5613a540b" translate="yes" xml:space="preserve">
          <source>Check if the file is readable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f3694328f933a8d76d9d117b4528c22e05297b7" translate="yes" xml:space="preserve">
          <source>Check if the parser is strict or lenient in interpreting inputs that do not match the pattern exactly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ed52f959552a8a4a4a9646af0ea7644b94be392" translate="yes" xml:space="preserve">
          <source>Check the request whether it is a Ajax Request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cf34147024131938bac0b3d54fcc093b89b043d" translate="yes" xml:space="preserve">
          <source>Check whether EOF has been reached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21fbb7538f92f13712022d935c61d5495e234060" translate="yes" xml:space="preserve">
          <source>Check whether an item exists</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b4619d9234493ffa2f936099d20307020fe8bbc" translate="yes" xml:space="preserve">
          <source>Check whether current &lt;a href=&quot;class.directoryiterator&quot;&gt;DirectoryIterator&lt;/a&gt; position is a valid file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a85c1e7c6051b1d8d7c7fa56f354b157c9ea9dd" translate="yes" xml:space="preserve">
          <source>Check whether the current element is valid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c044dde611e8ceabad3836652992a60970cdab5b" translate="yes" xml:space="preserve">
          <source>Check whether the current position is valid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d0acd387e596dc9f56cdb7b444962842d034b6d" translate="yes" xml:space="preserve">
          <source>Check whether the inner iterator's current element has children.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff41c53d806bb24f3addf28b47f72640fd536da6" translate="yes" xml:space="preserve">
          <source>Checking non-numeric offsets of strings now returns &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="135d79c0e175fe51b17b23ffd10eb6bc806d0941" translate="yes" xml:space="preserve">
          <source>Checking non-numeric offsets of strings returns &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="221fc88d6214747954efd404b3cac6995de3fa4e" translate="yes" xml:space="preserve">
          <source>Checks a binary Unicode property for a code point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b54858c27c01c5790b0ccc79a833c3273528cace" translate="yes" xml:space="preserve">
          <source>Checks an OAuth request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae1d3285924a78b70684bbcd936a3b85185ba105" translate="yes" xml:space="preserve">
          <source>Checks each key to see whether it has a valid variable name. It also checks for collisions with existing variables in the symbol table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8f5e6ff76e414f3028249aec68d1a94d90335ed" translate="yes" xml:space="preserve">
          <source>Checks if a $langtag filter matches with $locale according to RFC 4647's basic filtering algorithm</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06fe4313ecf10083e1f1d779531154a575b35c1d" translate="yes" xml:space="preserve">
          <source>Checks if a class is an anonymous class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e45f30eee5a7dc412f3d4b0923f55e7887c43e6b" translate="yes" xml:space="preserve">
          <source>Checks if a class is final.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4469626d8cd9bbc805792001a40ac098dff3552" translate="yes" xml:space="preserve">
          <source>Checks if a default value for the parameter is available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47323b7c9f3b14db0aae031a04f3b7c74a31b2ef" translate="yes" xml:space="preserve">
          <source>Checks if a field exists</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b86a3f5a6fe53ecd5e146b264d9795bbcf0916c9" translate="yes" xml:space="preserve">
          <source>Checks if a particular field exists. This is used when the object is treated as an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="306063054c019193d6fc3b6309baa408b1087833" translate="yes" xml:space="preserve">
          <source>Checks if a stream, or a URL, is a local one or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ffb02d290add09f50ac9cf0344523da30f78f2f" translate="yes" xml:space="preserve">
          <source>Checks if a transaction is currently active within the driver. This method only works for database drivers that support transactions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70c32224509c3146e916019846902175a21d8be7" translate="yes" xml:space="preserve">
          <source>Checks if all of the characters in the provided &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt;, &lt;code&gt;text&lt;/code&gt;, are alphabetic. In the standard &lt;em&gt;C&lt;/em&gt; locale letters are just &lt;em&gt;[A-Za-z]&lt;/em&gt; and &lt;strong&gt;ctype_alpha()&lt;/strong&gt; is equivalent to &lt;em&gt;(ctype_upper($text) || ctype_lower($text))&lt;/em&gt; if $text is just a single character, but other languages have letters that are considered neither upper nor lower case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cd69b26e9c9effa6307b7609332c3a4844f6bc4" translate="yes" xml:space="preserve">
          <source>Checks if all of the characters in the provided &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt;, &lt;code&gt;text&lt;/code&gt;, are alphanumeric.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ca2012f3f61018020d57a9225bda883c6138b3e" translate="yes" xml:space="preserve">
          <source>Checks if all of the characters in the provided &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt;, &lt;code&gt;text&lt;/code&gt;, are control characters. Control characters are e.g. line feed, tab, escape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5a9a798aefacb9d1aea5d1f7e345c8e5e68c5da" translate="yes" xml:space="preserve">
          <source>Checks if all of the characters in the provided &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt;, &lt;code&gt;text&lt;/code&gt;, are hexadecimal 'digits'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="794395ee5fc0c23dcdfab9cc3501f6398289934b" translate="yes" xml:space="preserve">
          <source>Checks if all of the characters in the provided &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt;, &lt;code&gt;text&lt;/code&gt;, are lowercase letters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce4d9a8bbe6af10bcc85b90c549856e3ef16e95c" translate="yes" xml:space="preserve">
          <source>Checks if all of the characters in the provided &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt;, &lt;code&gt;text&lt;/code&gt;, are numerical.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9903500e701ad12c56c603842679bdabcca45672" translate="yes" xml:space="preserve">
          <source>Checks if all of the characters in the provided &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt;, &lt;code&gt;text&lt;/code&gt;, are printable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30dc1e8df015b2418033ffb1144c5696f80acd23" translate="yes" xml:space="preserve">
          <source>Checks if all of the characters in the provided &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt;, &lt;code&gt;text&lt;/code&gt;, are punctuation character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b8004051b72f937d7865e990a3ee154af97a34f" translate="yes" xml:space="preserve">
          <source>Checks if all of the characters in the provided &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt;, &lt;code&gt;text&lt;/code&gt;, are uppercase characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a78f8f4aa86fe593f398e59cd5578a3a76c22e92" translate="yes" xml:space="preserve">
          <source>Checks if all of the characters in the provided &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt;, &lt;code&gt;text&lt;/code&gt;, creates visible output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef34c14e1e4a2502bfbeab8392db52bfa84e37b5" translate="yes" xml:space="preserve">
          <source>Checks if all of the characters in the provided &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt;, &lt;code&gt;text&lt;/code&gt;, creates whitespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f8c6c85d815bcbf87a8f99bea1d85a02340f4e9" translate="yes" xml:space="preserve">
          <source>Checks if an iterator is attached or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b8d2ef9684cafbdbe3102197e088d4dfbda9507" translate="yes" xml:space="preserve">
          <source>Checks if an object is an instance of a class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bd4b9b0edd57c8e2ed082119f9c9394b8790881" translate="yes" xml:space="preserve">
          <source>Checks if given string contains any suspicious characters like letters which are almost identical visually, but are Unicode characters from different sets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="928cd999bc9d0473c95700efbf67c234d9fae0fe" translate="yes" xml:space="preserve">
          <source>Checks if one or more APC keys exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="536886be2f355ed54a85a7259ba8e52b5f5bdcf8" translate="yes" xml:space="preserve">
          <source>Checks if one or more APCu entries exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f460f0f4466016f4530380db09e72483b596b57b" translate="yes" xml:space="preserve">
          <source>Checks if or where headers have been sent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d83c7f49d6315a62749d58e22532632c5b788ab" translate="yes" xml:space="preserve">
          <source>Checks if the &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; contains any more entries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfac49822235065d12cd51c0be2e9ea24617f48e" translate="yes" xml:space="preserve">
          <source>Checks if the Solr server is still alive. Sends a HEAD request to the Apache Solr server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f68e3a744217cb23e5344d930cc15ac54a14d783" translate="yes" xml:space="preserve">
          <source>Checks if the array contains any more elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cac7928a1081a91cb7091703313307be1765abc3" translate="yes" xml:space="preserve">
          <source>Checks if the asked &lt;code&gt;feature&lt;/code&gt; is supported for the specified &lt;code&gt;version&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5206b9e3d6bf2cd5f8f21656f0eaded18d8e0bff" translate="yes" xml:space="preserve">
          <source>Checks if the class constant is private.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f469bc6dfabb8b4ef722e0c7b73a334118d6055" translate="yes" xml:space="preserve">
          <source>Checks if the class constant is protected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e679c659db8bfcc5b11c82a620e76bcdaa2c7849" translate="yes" xml:space="preserve">
          <source>Checks if the class constant is public.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d628457cc75eb81dd74e4f17f9273eae330d0d8" translate="yes" xml:space="preserve">
          <source>Checks if the class is a subclass of a specified class or implements a specified interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="364ce7ceda685643659e86f4d431d570333c3bef" translate="yes" xml:space="preserve">
          <source>Checks if the class is abstract.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d63f27ea7ab4a3c06c769b1ab3087cf23dd5af45" translate="yes" xml:space="preserve">
          <source>Checks if the class is defined internally by an extension, or the core, as opposed to user-defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cf8e55ea886aa7493907e357e327c0258279f87" translate="yes" xml:space="preserve">
          <source>Checks if the class is instantiable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5554de93af270b477b1de7d1da39732de431a28" translate="yes" xml:space="preserve">
          <source>Checks if the class method exists in the given &lt;code&gt;object&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aa3ed32abc23502d73b2b8790b1983cd9cac442" translate="yes" xml:space="preserve">
          <source>Checks if the current entry is writable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5de13f471368bbd2f25d968ded925f86d9b762ce" translate="yes" xml:space="preserve">
          <source>Checks if the current item is valid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed3490486486bd7918e18b6229f743723b65f4d7" translate="yes" xml:space="preserve">
          <source>Checks if the current iterator position is valid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2aa0f937087dd75599b78f0b9185294b4e24753" translate="yes" xml:space="preserve">
          <source>Checks if the current position internally is still valid. It is used during foreach operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68bb96dfbc2a07c19d3db572bab91410b13842af" translate="yes" xml:space="preserve">
          <source>Checks if the doubly linked list contains any more nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eb61a60a30d7f2b12a966c15cce4437cb9dc3a9" translate="yes" xml:space="preserve">
          <source>Checks if the event loop was told to exit by &lt;a href=&quot;eventbase.exit&quot;&gt;EventBase::exit()&lt;/a&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f44f847ad19ef67cf698a318a613848faeeb27a5" translate="yes" xml:space="preserve">
          <source>Checks if the event loop was told to exit by &lt;a href=&quot;eventbase.stop&quot;&gt;EventBase::stop()&lt;/a&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c68a722421a963acda3c269a1b88c94bff55baf" translate="yes" xml:space="preserve">
          <source>Checks if the file is executable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="176f6019121fb4c189e214ce2bc586d751796af9" translate="yes" xml:space="preserve">
          <source>Checks if the file referenced by this SplFileInfo object exists and is a regular file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8d35a0568093619dd634c0c18acd12d6a660823" translate="yes" xml:space="preserve">
          <source>Checks if the function is &lt;a href=&quot;functions.arguments#functions.variable-arg-list.new&quot;&gt;variadic&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31e227803bf792ac772c47163e13bf849782a926" translate="yes" xml:space="preserve">
          <source>Checks if the function is disabled, via the &lt;a href=&quot;https://secure.php.net/manual/en/ini.core.php#ini.disable-functions&quot;&gt;disable_functions&lt;/a&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07fbdc04de3ec460e7cfab71515c6cfd4bd17f81" translate="yes" xml:space="preserve">
          <source>Checks if the given &lt;code&gt;object&lt;/code&gt; has the class &lt;code&gt;class_name&lt;/code&gt; as one of its parents or implements it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6fbd19b49c25e019a5e2fb8d4f864aaa8574266" translate="yes" xml:space="preserve">
          <source>Checks if the given &lt;code&gt;object&lt;/code&gt; is of this class or has this class as one of its parents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="533bf192b51cae1d9c5568205171baf628a90c3a" translate="yes" xml:space="preserve">
          <source>Checks if the given interface has been defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29afa77839f3d1128f095b0135af4076585c98ab" translate="yes" xml:space="preserve">
          <source>Checks if the heap contains any more nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a64abad15ed9f51552e1ff6b2012fe5e7c468ad" translate="yes" xml:space="preserve">
          <source>Checks if the iterator is valid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcbe2c27890bf6cf059624688e0543ae28f0483f" translate="yes" xml:space="preserve">
          <source>Checks if the method is a constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d578158d227d22163582931c2b6716fd44bb4d76" translate="yes" xml:space="preserve">
          <source>Checks if the method is a destructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfe4e8cded7bffef876907da4c7e570bae0dd19b" translate="yes" xml:space="preserve">
          <source>Checks if the method is abstract.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c1d288ed16644ec40fcd57a9c28fdac522e805c" translate="yes" xml:space="preserve">
          <source>Checks if the method is final.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93d4962f19b744b4f2d6bad068ffe8942931a48a" translate="yes" xml:space="preserve">
          <source>Checks if the method is private.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="255443988a281ef3db063df3f7a6cc237a12bc76" translate="yes" xml:space="preserve">
          <source>Checks if the method is protected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f214a0407a8c631f0f55d557dac2385ed4f2ec6" translate="yes" xml:space="preserve">
          <source>Checks if the method is public.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0d7a11ebac81c9de08cfe1b88302b2a3dbc3306" translate="yes" xml:space="preserve">
          <source>Checks if the method is static.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a0450e7a1f82bcd869a23a526adc36d51c6c53a" translate="yes" xml:space="preserve">
          <source>Checks if the offset exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fe44d8f930da5562cfbc8c3ee7944deaef7b144" translate="yes" xml:space="preserve">
          <source>Checks if the parameter expects an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="693577a340b76d3a590df9fa8b1274ee2f5c20eb" translate="yes" xml:space="preserve">
          <source>Checks if the parameter has a type associated with it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30a9e85b6f7ecb42e363ee96f132bf9669c4109f" translate="yes" xml:space="preserve">
          <source>Checks if the parameter is optional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba693adb9a4e590339b2b6fd78aee67596b54051" translate="yes" xml:space="preserve">
          <source>Checks if the parameter is passed in by reference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c2861c48c2d1bfc24cb531632907421c4860a59" translate="yes" xml:space="preserve">
          <source>Checks if the parameter was declared as a &lt;a href=&quot;functions.arguments#functions.variable-arg-list.new&quot;&gt;variadic parameter&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="933363ab094f9bd4938506f31800fe26a9845c7f" translate="yes" xml:space="preserve">
          <source>Checks if the property exists. This is used when the object is treated as an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a265e7b6e0e283da136586bb50d6977be29c96e" translate="yes" xml:space="preserve">
          <source>Checks if the provided string is already in the specified normalization form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a70da599289dd260433ebf0ff675c38eb29e97f" translate="yes" xml:space="preserve">
          <source>Checks if the queue contains any more nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b7e82d01ae4af228169fecf17a6ce9204a2e995" translate="yes" xml:space="preserve">
          <source>Checks if the requested field as a valid fieldname in the document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="305ea4cade14deaee75f98965459881aaf0c6d61" translate="yes" xml:space="preserve">
          <source>Checks if the specified byte stream is valid for the specified encoding. It is useful to prevent so-called &quot;Invalid Encoding Attack&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c7e29445c36e03153849b7a468ec57fdeac8459" translate="yes" xml:space="preserve">
          <source>Checks if the storage contains the &lt;a href=&quot;language.types.object&quot;&gt;object&lt;/a&gt; provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dae2c648ced5bc2322cd506b3d4be2822f85e6a" translate="yes" xml:space="preserve">
          <source>Checks if the type is a built-in type in PHP.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5657805fa987405e5cfd51d75fc608fe82f8bf5c" translate="yes" xml:space="preserve">
          <source>Checks if there are more query results from a multiple query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1324ab93ed5c8a33b8e9d889aca39e1347a7dc41" translate="yes" xml:space="preserve">
          <source>Checks if there are more result sets available as well as allowing access to the next result set via &lt;a href=&quot;function.odbc-fetch-array&quot;&gt;odbc_fetch_array()&lt;/a&gt;, &lt;a href=&quot;function.odbc-fetch-row&quot;&gt;odbc_fetch_row()&lt;/a&gt;, &lt;a href=&quot;function.odbc-result&quot;&gt;odbc_result()&lt;/a&gt;, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="717798bb4d91c8a3b03ce91d69415a2f6ba93e14" translate="yes" xml:space="preserve">
          <source>Checks if this class is defined in a namespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3444e3b4c227f1a11b7f194c7b0bbda4cd3df2e" translate="yes" xml:space="preserve">
          <source>Checks information about the current mailbox.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90f17768940a5eaad40b13ec067169f6082cefcd" translate="yes" xml:space="preserve">
          <source>Checks the current mailbox status on the server. It is similar to &lt;a href=&quot;function.imap-status&quot;&gt;imap_status()&lt;/a&gt;, but will additionally sum up the size of all messages in the mailbox, which will take some additional time to execute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32689f3a6f1e7ce871b0a7f3c14770a78911e52b" translate="yes" xml:space="preserve">
          <source>Checks the distance between the color described by this ImagickPixel object and that of the provided object, by plotting their RGB values on the color cube. If the distance between the two points is less than the fuzz value given, the colors are similar. Deprecated in favour of &lt;a href=&quot;imagickpixel.ispixelsimilar&quot;&gt;ImagickPixel::isPixelSimilar()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa87425e3d1f6eccfeb1e44f4c4c0bcdf1794c70" translate="yes" xml:space="preserve">
          <source>Checks the distance between the color described by this ImagickPixel object and that of the provided object, by plotting their RGB values on the color cube. If the distance between the two points is less than the fuzz value given, the colors are similar. This method replaces &lt;a href=&quot;imagickpixel.issimilar&quot;&gt;ImagickPixel::isSimilar()&lt;/a&gt; and correctly normalises the fuzz value to ImageMagick QuantumRange.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8cdd171e15f7bd81fb3404d55b88afec7ee21c1" translate="yes" xml:space="preserve">
          <source>Checks the list of defined functions, both built-in (internal) and user-defined, for &lt;code&gt;function_name&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87c68aa9097bb70f767980afc04b7c38c4d11a3f" translate="yes" xml:space="preserve">
          <source>Checks the sign of a number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8138e2c3b25a73a1f7b4267a7abf2c35808746ba" translate="yes" xml:space="preserve">
          <source>Checks the threads status</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbd21fbbd8de8ef74c207f49858899aae0d1d501" translate="yes" xml:space="preserve">
          <source>Checks the validity of sub iterators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49747ee04c810d21b16913c9820d3bc9eee20692" translate="yes" xml:space="preserve">
          <source>Checks the validity of the date formed by the arguments. A date is considered valid if each parameter is properly defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77ede11589df9dced9996d22fe89b53cb5bda764" translate="yes" xml:space="preserve">
          <source>Checks validity of the current element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7faf382c2433f66340dcdf69b99de9a4eaaa9f56" translate="yes" xml:space="preserve">
          <source>Checks whether &lt;code&gt;val&lt;/code&gt; is 'not a number', like the result of &lt;em&gt;acos(1.01)&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a16598d449c1e8bc4587bdf06ccbba7d66531e94" translate="yes" xml:space="preserve">
          <source>Checks whether &lt;code&gt;val&lt;/code&gt; is a legal finite on this platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9e01e36c47fbe87e6a9ab094d5e21016ee2568c" translate="yes" xml:space="preserve">
          <source>Checks whether a file or directory exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebb62e89c1c152048cf7495c4a679f4d34f234b3" translate="yes" xml:space="preserve">
          <source>Checks whether a function is defined in a namespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="514a0c9f6ccc41045d1f69a50485de7473bf700b" translate="yes" xml:space="preserve">
          <source>Checks whether a specific key exists inside a shared memory segment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2812ab60f766540a794b45ccac83083363d1e40c" translate="yes" xml:space="preserve">
          <source>Checks whether a specific method is defined in a class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c44532b51187f93d824a7ca4bb0540d31a8bce24" translate="yes" xml:space="preserve">
          <source>Checks whether a string is tainted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edac0d6fffde007aaf44c8abab570facb05d649b" translate="yes" xml:space="preserve">
          <source>Checks whether an &lt;a href=&quot;language.types.object&quot;&gt;object&lt;/a&gt; exists in the storage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba628e797e4e634b7fd25dd1873216ad398ff8c1" translate="yes" xml:space="preserve">
          <source>Checks whether it implements an interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6686a4c79c45e1c3c011738d68377466ac1ff8a0" translate="yes" xml:space="preserve">
          <source>Checks whether the child process exited because of a signal which was not caught.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3487919430e88e3fe5155ddde5cd38816062e346" translate="yes" xml:space="preserve">
          <source>Checks whether the child process which caused the return is currently stopped; this is only possible if the call to &lt;a href=&quot;function.pcntl-waitpid&quot;&gt;pcntl_waitpid()&lt;/a&gt; was done using the option &lt;em&gt;WUNTRACED&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01a27a5eb9ee35373ef43b4d1386d9681dd31395" translate="yes" xml:space="preserve">
          <source>Checks whether the child status code represents a normal exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fa215effbea05f816306f31ae67bb7c71dfa654" translate="yes" xml:space="preserve">
          <source>Checks whether the class has a specific constant defined or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a42a585a9c8065b3ae0ff4c37a07edb4e71e55e7" translate="yes" xml:space="preserve">
          <source>Checks whether the class is an interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c62cc8ea0b6bc871a2110d2ca4e27b10e314ca7c" translate="yes" xml:space="preserve">
          <source>Checks whether the class is iterateable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9377b05061777fd4db1d831267f28c4b6dc52fe" translate="yes" xml:space="preserve">
          <source>Checks whether the class is user-defined, as opposed to internal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a7eae49487d9b8821c672a1221fefaa948c2ec6" translate="yes" xml:space="preserve">
          <source>Checks whether the client disconnected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffd528a4d9091937ae06799ad7288fa7d35d7a58" translate="yes" xml:space="preserve">
          <source>Checks whether the connection to the server is working. If it has gone down and global option &lt;a href=&quot;https://secure.php.net/manual/en/mysqli.configuration.php#ini.mysqli.reconnect&quot;&gt;mysqli.reconnect&lt;/a&gt; is enabled, an automatic reconnection is attempted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90b75c16b271000b486392327d1fbe3a707c9f86" translate="yes" xml:space="preserve">
          <source>Checks whether the current element is valid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b7329315150b89f2e52dc5ce02b5f18a5211575" translate="yes" xml:space="preserve">
          <source>Checks whether the document has any child documents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad010a007d9c807cada5d7f5a4377ea7b8d96ce5" translate="yes" xml:space="preserve">
          <source>Checks whether the function is deprecated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88d192caac49ae6093330219549d280b50485112" translate="yes" xml:space="preserve">
          <source>Checks whether the function is internal, as opposed to user-defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a110406adf814e9ec5b224627de60152fa07f4d3" translate="yes" xml:space="preserve">
          <source>Checks whether the function is user-defined, as opposed to internal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07ed86a4d110fb3f1b810b98cfb8d4fe72ce314d" translate="yes" xml:space="preserve">
          <source>Checks whether the function returns a reference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb33fda100c67b7d07000cf502570352536dacf2" translate="yes" xml:space="preserve">
          <source>Checks whether the given &lt;code&gt;key&lt;/code&gt; is the private key that corresponds to &lt;code&gt;cert&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6121b83412615dd527d16440f637b723db6f451" translate="yes" xml:space="preserve">
          <source>Checks whether the given constant exists and is defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce27a4b76779691bc45a0f7d1424b66be7e770a6" translate="yes" xml:space="preserve">
          <source>Checks whether the iterator is valid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="753570c4a090f0d98cf166782336c1fd6b31f057" translate="yes" xml:space="preserve">
          <source>Checks whether the message queue &lt;code&gt;key&lt;/code&gt; exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e4845d319e21f2944606058a07700ebcd6d9e27" translate="yes" xml:space="preserve">
          <source>Checks whether the object referenced still exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fce0266b241c00d1726d02d7e469cb404b1ef50" translate="yes" xml:space="preserve">
          <source>Checks whether the parameter allows &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b814f7cfb34221ac17fe6580f6a5b2f55f198cba" translate="yes" xml:space="preserve">
          <source>Checks whether the passed object is referenced in the map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c74d17782731cd5894efdeb907be737a58ff794" translate="yes" xml:space="preserve">
          <source>Checks whether the property is private.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="749a3314578b6266b5dce9c2b19abc1ed521209a" translate="yes" xml:space="preserve">
          <source>Checks whether the property is protected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9de966f9de05c9509db587102eae75832802b4f8" translate="yes" xml:space="preserve">
          <source>Checks whether the property is public.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d04d4bd8767a95ee48ed3872d75491c282bfc8ae" translate="yes" xml:space="preserve">
          <source>Checks whether the property is static.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1a1f10bb771cde4a79fce521e475478148ad55b" translate="yes" xml:space="preserve">
          <source>Checks whether the property was declared at compile-time, or whether the property was dynamically declared at run-time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a07492acaa208bf18a50d6502e50fd8f74920193" translate="yes" xml:space="preserve">
          <source>Checks whether the reflected function has a return type specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ce45440ebd179e51e41c450787164c29abab7fc" translate="yes" xml:space="preserve">
          <source>Checks whether the reflected function is a &lt;a href=&quot;class.closure&quot;&gt;Closure&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90750777414032ce3b2eef2b67329bfa1747bdad" translate="yes" xml:space="preserve">
          <source>Checks whether the requested index &lt;code&gt;index&lt;/code&gt; exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03ac56f2b10516156b2a2a7cbc7fe5e10f655419" translate="yes" xml:space="preserve">
          <source>Checks whether the specified property is defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="153028e43e2ad43dcdf2c4b1ba761226d8b6b987" translate="yes" xml:space="preserve">
          <source>Checks whether two given strings can easily be mistaken.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6f0ba41c1489c55c918dd055130376ca06614a2" translate="yes" xml:space="preserve">
          <source>Children of this class are passed to &lt;a href=&quot;function.stream-filter-register&quot;&gt;stream_filter_register()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba53d8e9e704b92fb732e2cd2fa94286846ffe55" translate="yes" xml:space="preserve">
          <source>Choose a random pixel in a neighborhood of this extent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7bdc530f55395d2d7275cedcef430a6b82b9a51" translate="yes" xml:space="preserve">
          <source>Chunk of data to parse. A document may be parsed piece-wise by calling &lt;strong&gt;xml_parse()&lt;/strong&gt; several times with new data, as long as the &lt;code&gt;is_final&lt;/code&gt; parameter is set and &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; when the last data is parsed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3f62de0d5ebffcb7e2125a33adf0083a6543b5f" translate="yes" xml:space="preserve">
          <source>Chunk size as set by &lt;a href=&quot;function.ob-start&quot;&gt;ob_start()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a68966cbd67d9c4547c2a236016960163e866a2a" translate="yes" xml:space="preserve">
          <source>Chunk size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a3a480cb4537175a5c56d98b50cfaa97991358a" translate="yes" xml:space="preserve">
          <source>Chunks an array into arrays with &lt;code&gt;size&lt;/code&gt; elements. The last chunk may contain less than &lt;code&gt;size&lt;/code&gt; elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0736ea9349e0d646c3853559b0569a357d004ab" translate="yes" xml:space="preserve">
          <source>Circumflex (&lt;em&gt;^&lt;/em&gt;) need not be the first character of the pattern if a number of alternatives are involved, but it should be the first thing in each alternative in which it appears if the pattern is ever to match that branch. If all possible alternatives start with a circumflex (&lt;em&gt;^&lt;/em&gt;), that is, if the pattern is constrained to match only at the start of the subject, it is said to be an &quot;anchored&quot; pattern. (There are also other constructs that can cause a pattern to be anchored.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="991405d2755eeda73901c9c5be58a409297660c5" translate="yes" xml:space="preserve">
          <source>Civil twilight: conventionally used to signify the end of dusk.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a83856f34dd729a595690fb61a678d0ab82c8df" translate="yes" xml:space="preserve">
          <source>Civil twilight: conventionally used to signify the start of dawn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1034e5e8375f364b5f1672dec12dcabd772b3df5" translate="yes" xml:space="preserve">
          <source>Class (class)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b4269d593e4470d6919eb9d28b30677146138d8" translate="yes" xml:space="preserve">
          <source>Class Abstraction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00da30c8d725653ccdf75f92c7a1bb2add85bb53" translate="yes" xml:space="preserve">
          <source>Class Abstraction &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4145d866ec3cb1bb76fac5d2a4f1cb87607ec6c" translate="yes" xml:space="preserve">
          <source>Class Constants</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8040baf1e7bacd23bf9587cdb07290184f77ee83" translate="yes" xml:space="preserve">
          <source>Class Constants &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d9f77136533c6ff7b7e86c9e68a8e0e99ad867e" translate="yes" xml:space="preserve">
          <source>Class Methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63095577d62a9b775a9b4b7c695614a3b9696f38" translate="yes" xml:space="preserve">
          <source>Class constructor initializes the object and sets the q parameter if passed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4238125f17a1bfcd1c0e0de73a9e900c4ce74102" translate="yes" xml:space="preserve">
          <source>Class member variables are called &quot;properties&quot;. You may also see them referred to using other terms such as &quot;attributes&quot; or &quot;fields&quot;, but for the purposes of this reference we will use &quot;properties&quot;. They are defined by using one of the keywords &lt;em&gt;public&lt;/em&gt;, &lt;em&gt;protected&lt;/em&gt;, or &lt;em&gt;private&lt;/em&gt;, followed by a normal variable declaration. This declaration may include an initialization, but this initialization must be a constant value--that is, it must be able to be evaluated at compile time and must not depend on run-time information in order to be evaluated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbfec351f8af6a053f3786c35a62d1b7fced22de" translate="yes" xml:space="preserve">
          <source>Class methods may be defined as public, private, or protected. Methods declared without any explicit visibility keyword are defined as public.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59d7bbe00f3d0f8c6eec9c63d6f7af07ad8f2d1a" translate="yes" xml:space="preserve">
          <source>Class name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4100b5883e82a7bfc19990f5c2efdfb2a9e8983b" translate="yes" xml:space="preserve">
          <source>Class name and method name delimited by &lt;em&gt;::&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e915865f6fe8ba4a051d2015aec6a43cbed7aeae" translate="yes" xml:space="preserve">
          <source>Class name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce5c8ac44f6c88b5be9914ddf9aa6372c8770328" translate="yes" xml:space="preserve">
          <source>Class names that do not contain a backslash like &lt;em&gt;name&lt;/em&gt; can be resolved in 2 different ways.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cde04f3e5530eff41ad13426ba963632c8dab13" translate="yes" xml:space="preserve">
          <source>Class properties and methods live in separate &quot;namespaces&quot;, so it is possible to have a property and a method with the same name. Referring to both a property and a method has the same notation, and whether a property will be accessed or a method will be called, solely depends on the context, i.e. whether the usage is a variable access or a function call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="839cfe67abd319e66ea04698eb882516eaa7ee05" translate="yes" xml:space="preserve">
          <source>Class properties may also be accessed using variable property names. The variable property name will be resolved within the scope from which the call is made. For instance, if you have an expression such as &lt;var&gt;&lt;var&gt;$foo-&amp;gt;$bar&lt;/var&gt;&lt;/var&gt;, then the local scope will be examined for &lt;var&gt;&lt;var&gt;$bar&lt;/var&gt;&lt;/var&gt; and its value will be used as the name of the property of &lt;var&gt;&lt;var&gt;$foo&lt;/var&gt;&lt;/var&gt;. This is also true if &lt;var&gt;&lt;var&gt;$bar&lt;/var&gt;&lt;/var&gt; is an array access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca3109b12e8c720433c1e6dd3b216ee51bc97380" translate="yes" xml:space="preserve">
          <source>Class properties must be defined as public, private, or protected. If declared using &lt;em&gt;var&lt;/em&gt;, the property will be defined as public.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae1f10a98a9b551279b85344d5b7d7cb98638e9a" translate="yes" xml:space="preserve">
          <source>Class property data types are ignored when applying a field value to a property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8974c8ae3cb79e14ba7f7a2102519ce98283c859" translate="yes" xml:space="preserve">
          <source>Class synopsis</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3766056de04941cdba8832bd037aa24080da5ca5" translate="yes" xml:space="preserve">
          <source>Class used to represent &lt;a href=&quot;functions.anonymous&quot;&gt;anonymous functions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aaf33ef6178c374cf8c5f7214fea5aabb2803b0" translate="yes" xml:space="preserve">
          <source>Class/interface name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8636938935c4e42997a1072c974ffbb7e004c5c" translate="yes" xml:space="preserve">
          <source>Class::__construct</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34446a3037689831aab617faffa9f8ec0417d651" translate="yes" xml:space="preserve">
          <source>Class::__toString</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1065f972ca10b9dcaa79f11ece54dc94b9c13788" translate="yes" xml:space="preserve">
          <source>Class::export</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a688425b019265f47c0aa936785c7ee93bef26b" translate="yes" xml:space="preserve">
          <source>Class::getConstant</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89dd4df87674b0c82f4473e89ea967411732eb58" translate="yes" xml:space="preserve">
          <source>Class::getConstants</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0a9e6deb6ecf7c07dc70da54b1d73f24b757c60" translate="yes" xml:space="preserve">
          <source>Class::getConstructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fef56b8ff54bd34ff6f5aaf2fa6e847271498e12" translate="yes" xml:space="preserve">
          <source>Class::getDefaultProperties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98c97b89fe85a2532ad9fc7be9a978c1d7dd151a" translate="yes" xml:space="preserve">
          <source>Class::getDocComment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd59e91551b7924271a9645c440a9bac72242c3b" translate="yes" xml:space="preserve">
          <source>Class::getEndLine</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ed00e9ede127520f6a1c9cf54a56d1994e8d100" translate="yes" xml:space="preserve">
          <source>Class::getExtension</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c255483d5af490c58c4b158e1fbc98858ad8e29" translate="yes" xml:space="preserve">
          <source>Class::getExtensionName</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f9f5878be2d6c5fbd721e347a1b7547b9813281" translate="yes" xml:space="preserve">
          <source>Class::getFileName</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02a0fbe823d29b6873e625a0f236e1d5373a500c" translate="yes" xml:space="preserve">
          <source>Class::getInterfaceNames</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7848357f12bf0d3288495c15341223b211a61a07" translate="yes" xml:space="preserve">
          <source>Class::getInterfaces</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8edfb3b6f775656a2a0ef7f6d51c91977aefad11" translate="yes" xml:space="preserve">
          <source>Class::getMethod</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8401dbfeb5bef3a756ebb627f52dfd9c82a82923" translate="yes" xml:space="preserve">
          <source>Class::getMethods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baec0369c8d553d5bce008ccf612fa88766fc1a8" translate="yes" xml:space="preserve">
          <source>Class::getModifiers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d49abdf797f46d2d604f5f603683182d174a9d85" translate="yes" xml:space="preserve">
          <source>Class::getName</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d939df1be338450970bce1fbfa2154e574b3fba" translate="yes" xml:space="preserve">
          <source>Class::getNamespaceName</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ff9f428610f810a65ef45fa7453986c44240406" translate="yes" xml:space="preserve">
          <source>Class::getParentClass</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a8acca997281ffc655a629dc1d0b4bb5cd164f9" translate="yes" xml:space="preserve">
          <source>Class::getProperties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="101dfe30b735bfad61cc2f2f815124e9b7bd4d4d" translate="yes" xml:space="preserve">
          <source>Class::getProperty</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1fbf181e8a8006a59ba2aaaa76a4d92024c9160" translate="yes" xml:space="preserve">
          <source>Class::getReflectionConstant</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a508a481a941ebd55202dccd2fd928cac0c1e4e6" translate="yes" xml:space="preserve">
          <source>Class::getReflectionConstants</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f860fecf27f3ef0fa7ada71c98765a6d7e35c1e" translate="yes" xml:space="preserve">
          <source>Class::getShortName</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac082d3e955b2dbb8509311613bc4f31bd0ed636" translate="yes" xml:space="preserve">
          <source>Class::getStartLine</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee4b66c9f7e14341aceebd9a2b8f2745b5717af1" translate="yes" xml:space="preserve">
          <source>Class::getStaticProperties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2da269fc12cffaf3fdbf581964376e757b9d6a8" translate="yes" xml:space="preserve">
          <source>Class::getStaticPropertyValue</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac8072c2589408adc842f0c78349fbbca9b40e29" translate="yes" xml:space="preserve">
          <source>Class::getTraitAliases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="137d5a7e80ddc00fe19b77e2316d5094e4eac557" translate="yes" xml:space="preserve">
          <source>Class::getTraitNames</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cfb77c0c3d74f880717b7aeac3e5a9573b48dd5" translate="yes" xml:space="preserve">
          <source>Class::getTraits</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="090b194a6590c1afdeb35d60ca9cde9831c77e24" translate="yes" xml:space="preserve">
          <source>Class::hasConstant</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e09e31019bd61e3188632658ac20410d751edce" translate="yes" xml:space="preserve">
          <source>Class::hasMethod</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c3cc875de059db606f550b6a2dc83a381c7f87d" translate="yes" xml:space="preserve">
          <source>Class::hasProperty</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
