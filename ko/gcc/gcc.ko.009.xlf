<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="gcc">
    <body>
      <group id="gcc">
        <trans-unit id="50d3726425717c2c21e872422eba9b6e01ec20e3" translate="yes" xml:space="preserve">
          <source>In GNU C, but not GNU C++, you may also declare the type of a variable as &lt;code&gt;__auto_type&lt;/code&gt;. In that case, the declaration must declare only one variable, whose declarator must just be an identifier, the declaration must be initialized, and the type of the variable is determined by the initializer; the name of the variable is not in scope until after the initializer. (In C++, you should use C++11 &lt;code&gt;auto&lt;/code&gt; for this purpose.) Using &lt;code&gt;__auto_type&lt;/code&gt;, the &amp;ldquo;maximum&amp;rdquo; macro above could be written as:</source>
          <target state="translated">GNU C ++가 아닌 GNU C에서는 변수의 유형을 &lt;code&gt;__auto_type&lt;/code&gt; 으로 선언 할 수도 있습니다 . 이 경우 선언은 하나의 변수 만 선언해야하며 선언자는 식별자 일 뿐이고 선언을 초기화해야하며 변수의 유형은 초기화 프로그램에 의해 결정됩니다. 변수 이름은 이니셜 라이저가 끝날 때까지 범위 내에 있지 않습니다. C ++에서는 이 목적으로 C ++ 11 &lt;code&gt;auto&lt;/code&gt; 를 사용해야합니다 . &lt;code&gt;__auto_type&lt;/code&gt; 을 사용하면 위의 &quot;최대&quot;매크로를 다음과 같이 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="161e108f588ab6d10ef611d46f160cd49c4d5897" translate="yes" xml:space="preserve">
          <source>In GNU C, pointers to arrays with qualifiers work similar to pointers to other qualified types. For example, a value of type &lt;code&gt;int (*)[5]&lt;/code&gt; can be used to initialize a variable of type &lt;code&gt;const int (*)[5]&lt;/code&gt;. These types are incompatible in ISO C because the &lt;code&gt;const&lt;/code&gt; qualifier is formally attached to the element type of the array and not the array itself.</source>
          <target state="translated">GNU C에서 한정자가있는 배열에 대한 포인터는 다른 정규화 된 형식에 대한 포인터와 유사하게 작동합니다. 예를 들어, &lt;code&gt;int (*)[5]&lt;/code&gt; 유형의 값을 사용하여 &lt;code&gt;const int (*)[5]&lt;/code&gt; 유형의 변수를 초기화 할 수 있습니다 . &lt;code&gt;const&lt;/code&gt; 한정자가 배열 자체가 아닌 배열의 요소 유형에 공식적으로 첨부되어 있기 때문에 이러한 유형은 ISO C에서 호환되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="30928a7827c13008efbc31a4cd47ef8c080ec55d" translate="yes" xml:space="preserve">
          <source>In GNU C, you may normally use dollar signs in identifier names. This is because many traditional C implementations allow such identifiers. However, dollar signs in identifiers are not supported on a few target machines, typically because the target assembler does not allow them.</source>
          <target state="translated">GNU C에서는 일반적으로 식별자 이름에 달러 기호를 사용할 수 있습니다. 많은 전통적인 C 구현이 이러한 식별자를 허용하기 때문입니다. 그러나 일부 대상 컴퓨터에서는 식별자의 달러 기호가 지원되지 않습니다. 일반적으로 대상 어셈블러에서 허용하지 않기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="42c17a04ef25e4ac6774717de0dc2e63f588b7db" translate="yes" xml:space="preserve">
          <source>In GNU C, you may use C++ style comments, which start with &amp;lsquo;</source>
          <target state="translated">GNU C에서는 C ++ 스타일 주석을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2f24585b9162dc03bf874f7e503f710293aefabe" translate="yes" xml:space="preserve">
          <source>In ISO C and ISO C++, two identifiers are different if they are different sequences of characters. However, sometimes when characters outside the basic ASCII character set are used, you can have two different character sequences that look the same. To avoid confusion, the ISO 10646 standard sets out some &lt;em&gt;normalization rules&lt;/em&gt; which when applied ensure that two sequences that look the same are turned into the same sequence. GCC can warn you if you are using identifiers that have not been normalized; this option controls that warning.</source>
          <target state="translated">ISO C 및 ISO C ++에서 두 식별자는 문자 시퀀스가 ​​다른 경우 서로 다릅니다. 그러나 때로는 기본 ASCII 문자 집합 이외의 문자를 사용하는 경우 동일한 두 개의 다른 문자 시퀀스를 가질 수 있습니다. 혼동을 피하기 위해 ISO 10646 표준은 적용 할 때 동일한 두 시퀀스가 ​​동일한 시퀀스로 바뀌도록하는 일부 &lt;em&gt;정규화 규칙&lt;/em&gt; 을 설정합니다 . 정규화되지 않은 식별자를 사용하는 경우 GCC에서 경고 할 수 있습니다. 이 옵션은 해당 경고를 제어합니다.</target>
        </trans-unit>
        <trans-unit id="ae9542423c752a021f2d6e4fc0443b96ae1d5030" translate="yes" xml:space="preserve">
          <source>In ISO C, this is not allowed: &lt;code&gt;long&lt;/code&gt; and other type modifiers require an explicit &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="translated">ISO C에서는 허용되지 않습니다. &lt;code&gt;long&lt;/code&gt; 및 기타 유형 수정 자에는 명시적인 &lt;code&gt;int&lt;/code&gt; 가 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="a83c2089c56e85f19efece977b66d33d39dca615" translate="yes" xml:space="preserve">
          <source>In ISO C99 you can give the elements in any order, specifying the array indices or structure field names they apply to, and GNU C allows this as an extension in C90 mode as well. This extension is not implemented in GNU C++.</source>
          <target state="translated">ISO C99에서는 요소에 적용 할 배열 인덱스 또는 구조 필드 이름을 지정하여 요소를 임의의 순서로 제공 할 수 있으며 GNU C는이를 C90 모드의 확장으로 허용합니다. 이 확장은 GNU C ++에서 구현되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="ee146e8637f31533cbc25f2e770067e2245618cc" translate="yes" xml:space="preserve">
          <source>In ISO C99, arrays that are not lvalues still decay to pointers, and may be subscripted, although they may not be modified or used after the next sequence point and the unary &amp;lsquo;</source>
          <target state="translated">ISO C99에서 lvalue가 아닌 배열은 여전히 ​​포인터로 붕괴되며 다음 시퀀스 포인트와 단항 '후에 수정되거나 사용될 수는 없지만 첨자 화 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8675eb52335a427e8b8fe6e8d5660e8a4778f71b" translate="yes" xml:space="preserve">
          <source>In Standard C++, objects defined at namespace scope are guaranteed to be initialized in an order in strict accordance with that of their definitions &lt;em&gt;in a given translation unit&lt;/em&gt;. No guarantee is made for initializations across translation units. However, GNU C++ allows users to control the order of initialization of objects defined at namespace scope with the &lt;code&gt;init_priority&lt;/code&gt; attribute by specifying a relative &lt;var&gt;priority&lt;/var&gt;, a constant integral expression currently bounded between 101 and 65535 inclusive. Lower numbers indicate a higher priority.</source>
          <target state="translated">표준 C ++에서 네임 스페이스 범위에 정의 된 객체 &lt;em&gt;는 지정된 번역 단위에&lt;/em&gt; 정의 된 객체의 순서에 따라 순서대로 초기화됩니다 . 번역 단위에서 초기화가 보장되지는 않습니다. 그러나 GNU C ++에서는 사용자가 현재 101에서 65535 사이의 경계를 유지하는 상수 적분 식인 relative &lt;var&gt;priority&lt;/var&gt; 를 지정 하여 &lt;code&gt;init_priority&lt;/code&gt; 속성으로 네임 스페이스 범위에 정의 된 객체의 초기화 순서를 제어 할 수 있습니다 . 숫자가 작을수록 우선 순위가 높습니다.</target>
        </trans-unit>
        <trans-unit id="7083740b732c482c66c0773b79daf9926d12ffe7" translate="yes" xml:space="preserve">
          <source>In Thumb State the core registers &lt;code&gt;r0&lt;/code&gt;-&lt;code&gt;r7&lt;/code&gt;. In ARM state this is an alias for the &lt;code&gt;r&lt;/code&gt; constraint.</source>
          <target state="translated">Thumb 상태에서 코어 레지스터 &lt;code&gt;r0&lt;/code&gt; - &lt;code&gt;r7&lt;/code&gt; . ARM 상태에서는 &lt;code&gt;r&lt;/code&gt; 제약 조건 의 별칭입니다 .</target>
        </trans-unit>
        <trans-unit id="d1d4e1edbad74d306db2f222651915a6d0f5858a" translate="yes" xml:space="preserve">
          <source>In Thumb state, the core registers &lt;code&gt;r8&lt;/code&gt;-&lt;code&gt;r15&lt;/code&gt;.</source>
          <target state="translated">Thumb 상태에서 코어 레지스터는 &lt;code&gt;r8&lt;/code&gt; - &lt;code&gt;r15&lt;/code&gt; 를 .</target>
        </trans-unit>
        <trans-unit id="6352795921f416092911448041e5d77f4ed5cab2" translate="yes" xml:space="preserve">
          <source>In a statement expression, any temporaries created within a statement are destroyed at that statement&amp;rsquo;s end. This makes statement expressions inside macros slightly different from function calls. In the latter case temporaries introduced during argument evaluation are destroyed at the end of the statement that includes the function call. In the statement expression case they are destroyed during the statement expression. For instance,</source>
          <target state="translated">명령문 표현식에서 명령문 내에서 작성된 임시는 해당 명령문의 끝에서 파괴됩니다. 이렇게하면 매크로 내부의 명령문 표현식이 함수 호출과 약간 다릅니다. 후자의 경우 인수 평가 중에 도입 된 임시 함수는 함수 호출을 포함하는 명령문의 끝에 소멸됩니다. 명령문 표현식의 경우 명령문 표현식 중에 소멸됩니다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="5ba9aa0570b135c995bc38a76f20798c8cb8905c" translate="yes" xml:space="preserve">
          <source>In a structure initializer, specify the name of a field to initialize with &amp;lsquo;</source>
          <target state="translated">구조 이니셜 라이저에서 '로 초기화 할 필드 이름을 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="b60fb2c19e13e2004512b51ba3ef992aebaa1e2a" translate="yes" xml:space="preserve">
          <source>In a typical forwarding implementation, the &lt;code&gt;__objc_msg_forward2&lt;/code&gt; hook function determines the argument and return type of the method that is being looked up, and then creates a function that takes these arguments and has that return type, and returns it to the caller. Creating this function is non-trivial and is typically performed using a dedicated library such as &lt;code&gt;libffi&lt;/code&gt;.</source>
          <target state="translated">일반적인 전달 구현에서 &lt;code&gt;__objc_msg_forward2&lt;/code&gt; 후크 함수 는 찾고 있는 메소드의 인수 및 리턴 유형을 판별 한 후 이러한 인수를 가져오고 해당 리턴 유형을 갖는 함수를 작성하여 호출자에게 리턴합니다. 이 함수를 작성하는 것은 간단하지 않으며 일반적으로 &lt;code&gt;libffi&lt;/code&gt; 와 같은 전용 라이브러리를 사용하여 수행됩니다 .</target>
        </trans-unit>
        <trans-unit id="54dd00baa71ef2667fe6e28112deacb360520410" translate="yes" xml:space="preserve">
          <source>In addition a C preprocessor macro is defined, based upon the setting of this option. Possible values are: &lt;code&gt;__RL78_G10__&lt;/code&gt;, &lt;code&gt;__RL78_G13__&lt;/code&gt; or &lt;code&gt;__RL78_G14__&lt;/code&gt;.</source>
          <target state="translated">또한이 옵션의 설정에 따라 C 전 처리기 매크로가 정의됩니다. 가능한 값은 &lt;code&gt;__RL78_G10__&lt;/code&gt; , &lt;code&gt;__RL78_G13__&lt;/code&gt; 또는 &lt;code&gt;__RL78_G14__&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="ea9e02775fab3d62ec695ffb7a117d5587d95e84" translate="yes" xml:space="preserve">
          <source>In addition a C preprocessor macro is defined, based upon the setting of this option. Possible values are: &lt;code&gt;__RL78_MUL_NONE__&lt;/code&gt;, &lt;code&gt;__RL78_MUL_G13__&lt;/code&gt; or &lt;code&gt;__RL78_MUL_G14__&lt;/code&gt;.</source>
          <target state="translated">또한이 옵션의 설정에 따라 C 전 처리기 매크로가 정의됩니다. 가능한 값은 &lt;code&gt;__RL78_MUL_NONE__&lt;/code&gt; , &lt;code&gt;__RL78_MUL_G13__&lt;/code&gt; 또는 &lt;code&gt;__RL78_MUL_G14__&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="8837c405f2a2c41529e9b5f823973ab02322956f" translate="yes" xml:space="preserve">
          <source>In addition an MCU-specific linker script is added to the linker command line. The script&amp;rsquo;s name is the name of the MCU with</source>
          <target state="translated">또한 MCU 관련 링커 스크립트가 링커 명령 줄에 추가됩니다. 스크립트 이름은 다음과 같은 MCU의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="62b95995af660527c1e8f21b9d4ad0c066623058" translate="yes" xml:space="preserve">
          <source>In addition to &lt;code&gt;__builtin_tbegin&lt;/code&gt; a loop for transient failures is generated. If tbegin returns a condition code of 2 the transaction will be retried as often as specified in the second argument. The perform processor assist instruction is used to tell the CPU about the number of fails so far.</source>
          <target state="translated">&lt;code&gt;__builtin_tbegin&lt;/code&gt; 외에도 일시적인 오류에 대한 루프가 생성됩니다. tbegin이 조건 코드 2를 리턴하면 두 번째 인수에 지정된 횟수만큼 트랜잭션이 재 시도됩니다. 프로세서 지원 수행 명령은 지금까지 실패 횟수를 CPU에 알리는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="eced644e577e40c96cd49fe30f0f7fd6120dd908" translate="yes" xml:space="preserve">
          <source>In addition to all the flags that</source>
          <target state="translated">모든 플래그 외에도</target>
        </trans-unit>
        <trans-unit id="565a2d203f5b02e7460006ace0af95f26a347995" translate="yes" xml:space="preserve">
          <source>In addition to allowing restricted pointers, you can specify restricted references, which indicate that the reference is not aliased in the local context.</source>
          <target state="translated">제한된 포인터를 허용하는 것 외에도 제한된 참조를 지정할 수 있으며, 이는 참조가 로컬 컨텍스트에서 별명 지정되지 않음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="b4b514e38fd4621ee545768450d76575b94e288e" translate="yes" xml:space="preserve">
          <source>In addition to forward declaration of explicit instantiations (with &lt;code&gt;extern&lt;/code&gt;), G++ has extended the template instantiation syntax to support instantiation of the compiler support data for a template class (i.e. the vtable) without instantiating any of its members (with &lt;code&gt;inline&lt;/code&gt;), and instantiation of only the static data members of a template class, without the support data or member functions (with &lt;code&gt;static&lt;/code&gt;):</source>
          <target state="translated">명시 적 인스턴스화 전방 선언 (와뿐만 아니라 &lt;code&gt;extern&lt;/code&gt; ), G ++는 (와 회원의 인스턴스화하지 않고 템플릿 클래스에 대한 컴파일러 지원 데이터의 지원 인스턴스 (즉, VTABLE)에 템플릿 인스턴스화 구문을 확장했다 &lt;code&gt;inline&lt;/code&gt; ), 및 인스턴스화 지원 데이터 또는 멤버 함수가없는 템플리트 클래스의 정적 데이터 멤버 만 ( &lt;code&gt;static&lt;/code&gt; ) :</target>
        </trans-unit>
        <trans-unit id="6439cc01a9774bbc0ce4a99e0995283f7780b83f" translate="yes" xml:space="preserve">
          <source>In addition to reordering basic blocks in the compiled function, in order to reduce number of taken branches, partitions hot and cold basic blocks into separate sections of the assembly and</source>
          <target state="translated">컴파일 된 함수에서 기본 블록을 재정렬하는 것 외에도 취해진 분기 수를 줄이기 위해 핫 및 콜드 기본 블록을 어셈블리의 별도 섹션으로 분할하고</target>
        </trans-unit>
        <trans-unit id="b8e7d51ee0ff5509475a8b0b3cef903395f3e89e" translate="yes" xml:space="preserve">
          <source>In addition to that, the NeXT runtime uses a different encoding for bitfields. It encodes them as &lt;code&gt;b&lt;/code&gt; followed by the size, without a bit offset or the underlying field type.</source>
          <target state="translated">또한 NeXT 런타임은 비트 필드에 다른 인코딩을 사용합니다. 비트 오프셋이나 기본 필드 유형없이 &lt;code&gt;b&lt;/code&gt; 다음에 크기 로 인코딩합니다 .</target>
        </trans-unit>
        <trans-unit id="f8c503d521df2902eea004c571a88a7aaf261eea" translate="yes" xml:space="preserve">
          <source>In addition to the above HTM built-ins, we have added built-ins for some common extended mnemonics of the HTM instructions:</source>
          <target state="translated">위의 HTM 내장 외에도 HTM 명령어의 일반적인 확장 니모닉을위한 내장 기능이 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="084c327f43e99f5eed11f3cfccf089fdeb010185" translate="yes" xml:space="preserve">
          <source>In addition to the attributes documented here, GCC plugins may provide their own attributes.</source>
          <target state="translated">여기에 설명 된 속성 외에도 GCC 플러그인은 자체 속성을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="59aaa6ec676f5bdbed99a7053eff5202675d0852" translate="yes" xml:space="preserve">
          <source>In addition to the full set of format archetypes (attribute format style arguments such as &lt;code&gt;printf&lt;/code&gt;, &lt;code&gt;scanf&lt;/code&gt;, &lt;code&gt;strftime&lt;/code&gt;, and &lt;code&gt;strfmon&lt;/code&gt;), Darwin targets also support the &lt;code&gt;CFString&lt;/code&gt; (or &lt;code&gt;__CFString__&lt;/code&gt;) archetype in the &lt;code&gt;format&lt;/code&gt; attribute. Declarations with this archetype are parsed for correct syntax and argument types. However, parsing of the format string itself and validating arguments against it in calls to such functions is currently not performed.</source>
          <target state="translated">Darwin 대상 은 전체 형식 아키 타입 ( &lt;code&gt;printf&lt;/code&gt; , &lt;code&gt;scanf&lt;/code&gt; , &lt;code&gt;strftime&lt;/code&gt; 및 &lt;code&gt;strfmon&lt;/code&gt; 과 같은 속성 형식 스타일 인수 ) 외에도 &lt;code&gt;format&lt;/code&gt; 속성 에서 &lt;code&gt;CFString&lt;/code&gt; (또는 &lt;code&gt;__CFString__&lt;/code&gt; ) 아키타 입을 지원 합니다. 이 아키타 입을 사용한 선언은 올바른 구문 및 인수 유형을 위해 구문 분석됩니다. 그러나 형식 문자열 자체를 구문 분석하고 이러한 함수를 호출 할 때 형식 문자열에 대한 인수 유효성 검증은 현재 수행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5bd7b4c6a1206aaa445d7deaac33eb27ef613d77" translate="yes" xml:space="preserve">
          <source>In addition to the options listed here, there are a number of options to control search paths for include files documented in &lt;a href=&quot;directory-options#Directory-Options&quot;&gt;Directory Options&lt;/a&gt;. Options to control preprocessor diagnostics are listed in &lt;a href=&quot;warning-options#Warning-Options&quot;&gt;Warning Options&lt;/a&gt;.</source>
          <target state="translated">여기에 나열된 옵션 외에도 &lt;a href=&quot;directory-options#Directory-Options&quot;&gt;디렉토리 옵션에&lt;/a&gt; 설명 된 포함 파일의 검색 경로를 제어하는 ​​여러 옵션이 있습니다. 전 처리기 진단을 제어하는 ​​옵션은 &lt;a href=&quot;warning-options#Warning-Options&quot;&gt;경고 옵션에&lt;/a&gt; 나열되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="71f7076b5c36e97c5be103bbb5410f7a8e3b889f" translate="yes" xml:space="preserve">
          <source>In addition to the side effects of the</source>
          <target state="translated">부작용 외에</target>
        </trans-unit>
        <trans-unit id="3678577a99df8db4bb55d5c4af98383773644309" translate="yes" xml:space="preserve">
          <source>In addition to the tokens described by the input, output, and goto operands, these tokens have special meanings in the assembler template:</source>
          <target state="translated">입력, 출력 및 goto 피연산자가 설명하는 토큰 외에도 이러한 토큰은 어셈블러 템플릿에서 특별한 의미를 갖습니다.</target>
        </trans-unit>
        <trans-unit id="4906f7c8d95701a33b767af39ebc70e032dc64d0" translate="yes" xml:space="preserve">
          <source>In addition to the traps enabled by &amp;lsquo;</source>
          <target state="translated">'에 의해 활성화 된 트랩 외에도</target>
        </trans-unit>
        <trans-unit id="8e62f62dfa434b0bbfd42f77c43f2e3f4b28a77e" translate="yes" xml:space="preserve">
          <source>In addition to the types the compiler also encodes the type specifiers. The table below describes the encoding of the current Objective-C type specifiers:</source>
          <target state="translated">컴파일러는 형식 외에도 형식 지정자를 인코딩합니다. 아래 표는 현재 Objective-C 유형 지정자의 인코딩에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="07e2b4620d71805ca7178b4ed737fff6b9e3c7bc" translate="yes" xml:space="preserve">
          <source>In addition to this, there are checking built-in functions &lt;code&gt;__builtin___printf_chk&lt;/code&gt;, &lt;code&gt;__builtin___vprintf_chk&lt;/code&gt;, &lt;code&gt;__builtin___fprintf_chk&lt;/code&gt; and &lt;code&gt;__builtin___vfprintf_chk&lt;/code&gt;. These have just one additional argument, &lt;var&gt;flag&lt;/var&gt;, right before format string &lt;var&gt;fmt&lt;/var&gt;. If the compiler is able to optimize them to &lt;code&gt;fputc&lt;/code&gt; etc. functions, it does, otherwise the checking function is called and the &lt;var&gt;flag&lt;/var&gt; argument passed to it.</source>
          <target state="translated">이 외에도 내장 함수 &lt;code&gt;__builtin___printf_chk&lt;/code&gt; , &lt;code&gt;__builtin___vprintf_chk&lt;/code&gt; , &lt;code&gt;__builtin___fprintf_chk&lt;/code&gt; 및 &lt;code&gt;__builtin___vfprintf_chk&lt;/code&gt; 확인이 있습니다. 여기에는 형식 문자열 &lt;var&gt;fmt&lt;/var&gt; 바로 앞에 하나의 추가 인수 &lt;var&gt;flag&lt;/var&gt; 가 있습니다. 컴파일러가 함수 를 &lt;code&gt;fputc&lt;/code&gt; 등의 함수 로 최적화 할 수 있으면 검사 함수가 호출되고 &lt;var&gt;flag&lt;/var&gt; 인수가 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="af9d69a85de071c5503c968b6878570e7a051f81" translate="yes" xml:space="preserve">
          <source>In addition,</source>
          <target state="translated">게다가,</target>
        </trans-unit>
        <trans-unit id="ac54bbc55b4419b170b9ec36b5935081a1cdb3e2" translate="yes" xml:space="preserve">
          <source>In addition, alignment of loops and of code after barriers are dropped.</source>
          <target state="translated">또한 장벽을 제거한 후 루프와 코드를 정렬합니다.</target>
        </trans-unit>
        <trans-unit id="3781d09a3dc831734b5b02916076ee6266e64979" translate="yes" xml:space="preserve">
          <source>In addition, all of the following transfer instructions for internal registers X and Y must be provided to use any of the double-precision floating-point instructions. Custom instructions taking two double-precision source operands expect the first operand in the 64-bit register X. The other operand (or only operand of a unary operation) is given to the custom arithmetic instruction with the least significant half in source register &lt;var&gt;src1&lt;/var&gt; and the most significant half in &lt;var&gt;src2&lt;/var&gt;. A custom instruction that returns a double-precision result returns the most significant 32 bits in the destination register and the other half in 32-bit register Y. GCC automatically generates the necessary code sequences to write register X and/or read register Y when double-precision floating-point instructions are used.</source>
          <target state="translated">또한 배정 밀도 부동 소수점 명령어를 사용하려면 내부 레지스터 X 및 Y에 대한 다음의 모든 전송 명령어를 제공해야합니다. 두 배정도 소스 피연산자를 사용하는 사용자 정의 명령어는 64 비트 레지스터 X의 첫 번째 피연산자를 예상합니다. 다른 피연산자 (또는 단항 연산의 피연산자 만)는 소스 레지스터 &lt;var&gt;src1&lt;/var&gt; 및 &lt;var&gt;src2&lt;/var&gt; 에서 가장 중요한 절반. 배정 밀도 결과를 반환하는 사용자 지정 명령어는 대상 레지스터에서 최상위 32 비트를, 32 비트 레지스터 Y에서 나머지 절반을 반환합니다. GCC는 자동으로 레지스터 X 및 / 또는 레지스터 Y를 읽는 데 필요한 코드 시퀀스를 생성합니다. -정밀도 부동 소수점 명령어가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="fef0ea4de76cead18315e4916cf4d5b385d79842" translate="yes" xml:space="preserve">
          <source>In addition, many header files are written to provide prototypes in ISO C but not in traditional C. Many of these header files can work without change in C++ provided &lt;code&gt;__STDC__&lt;/code&gt; is defined. If &lt;code&gt;__STDC__&lt;/code&gt; is not defined, they will all fail, and will all need to be changed to test explicitly for C++ as well.</source>
          <target state="translated">또한 많은 헤더 파일이 ISO C에서는 프로토 타입을 제공하도록 작성되었지만 기존 C에서는 제공되지 않습니다. 이러한 헤더 파일 중 다수는 &lt;code&gt;__STDC__&lt;/code&gt; 가 정의 된 경우 C ++의 변경없이 작동 할 수 있습니다 . 경우 &lt;code&gt;__STDC__&lt;/code&gt; 가 정의되지 않은, 그들은 모두 실패하고 모든 필요가 C에 대한 ++뿐만 아니라 명시 적으로 테스트하도록 변경됩니다.</target>
        </trans-unit>
        <trans-unit id="69f2b7c74d79a65e34a188c54ca6206079621349" translate="yes" xml:space="preserve">
          <source>In addition, optional data alignment is dropped, and the option</source>
          <target state="translated">또한 선택적 데이터 정렬이 삭제되고 옵션이</target>
        </trans-unit>
        <trans-unit id="f5228c4c2186ef6ab55d19754c2564a752819979" translate="yes" xml:space="preserve">
          <source>In addition, seriously incorrect code results if you call a function with too many arguments. (Normally, extra arguments are harmlessly ignored.)</source>
          <target state="translated">또한 너무 많은 인수를 가진 함수를 호출하면 심각하게 잘못된 코드가 생성됩니다. 일반적으로 추가 인수는 무해하게 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="e473178ce28eda4321e03738b81ae5d066682365" translate="yes" xml:space="preserve">
          <source>In addition, the application binary interface implemented by a C++ compiler affects code generation and runtime support for:</source>
          <target state="translated">또한 C ++ 컴파일러로 구현 된 응용 프로그램 바이너리 인터페이스는 다음에 대한 코드 생성 및 런타임 지원에 영향을줍니다.</target>
        </trans-unit>
        <trans-unit id="f27cb290fe4b9fbefe17d7b31e3d8d9c930761f0" translate="yes" xml:space="preserve">
          <source>In addition, the prefix is used in an unusual way in finding the directories to search for header files. For each of the standard directories whose name normally begins with &amp;lsquo;</source>
          <target state="translated">또한 접두사는 헤더 파일을 검색 할 디렉토리를 찾는 데 특이한 방식으로 사용됩니다. 이름이 일반적으로 '로 시작하는 각 표준 디렉토리에 대해</target>
        </trans-unit>
        <trans-unit id="5527ccace27f3e086df478c816bee689b9fc66e3" translate="yes" xml:space="preserve">
          <source>In addition, these optimization, warning, and code generation options have meanings only for C++ programs:</source>
          <target state="translated">또한 이러한 최적화, 경고 및 코드 생성 옵션은 C ++ 프로그램에만 의미가 있습니다.</target>
        </trans-unit>
        <trans-unit id="9ebc6f9e6bacdd5dfc6bdf2f0b70b8aa1ddf9898" translate="yes" xml:space="preserve">
          <source>In all these variables, an empty element instructs the compiler to search its current working directory. Empty elements can appear at the beginning or end of a path. For instance, if the value of &lt;code&gt;CPATH&lt;/code&gt; is &lt;code&gt;:/special/include&lt;/code&gt;, that has the same effect as &amp;lsquo;</source>
          <target state="translated">이러한 모든 변수에서 빈 요소는 컴파일러에게 현재 작업 디렉토리를 검색하도록 지시합니다. 경로의 시작 또는 끝에 빈 요소가 나타날 수 있습니다. 예를 들어, &lt;code&gt;CPATH&lt;/code&gt; 값 이 &lt;code&gt;:/special/include&lt;/code&gt; 인 경우 '</target>
        </trans-unit>
        <trans-unit id="c45a725203acab43d85b1db22ebc2d67b4410490" translate="yes" xml:space="preserve">
          <source>In an application, for a function being called once, this attribute saves at least 8 bytes of code; and if other successive calls are being made to the same function, it saves 2 bytes of code per each of these calls.</source>
          <target state="translated">응용 프로그램에서 한 번만 호출되는 함수의 경우이 속성은 최소 8 바이트의 코드를 저장합니다. 동일한 함수에 대해 다른 연속적인 호출이 수행되면 각 호출마다 2 바이트의 코드가 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="112621cd575ed0f9bd039d93d7933cb0a5997ed6" translate="yes" xml:space="preserve">
          <source>In both of these common cases, the program behaves the same as if you had not used the &lt;code&gt;inline&lt;/code&gt; keyword, except for its speed.</source>
          <target state="translated">이 두 경우 모두 프로그램은 속도를 제외하고 는 &lt;code&gt;inline&lt;/code&gt; 키워드를 사용하지 않은 것처럼 동일하게 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="45ec19e142c4b27b0fe325e46bb4808fe673f706" translate="yes" xml:space="preserve">
          <source>In calls to a function declared with more than one &lt;code&gt;format_arg&lt;/code&gt; attribute, each with a distinct argument value, the corresponding actual function arguments are checked against all format strings designated by the attributes. This capability is designed to support the GNU &lt;code&gt;ngettext&lt;/code&gt; family of functions.</source>
          <target state="translated">각각 고유 한 인수 값을 갖는 둘 이상의 &lt;code&gt;format_arg&lt;/code&gt; 속성으로 선언 된 함수를 호출 할 때 해당 실제 함수 인수는 속성으로 지정된 모든 형식 문자열에 대해 검사됩니다. 이 기능은 GNU &lt;code&gt;ngettext&lt;/code&gt; 함수 계열 을 지원하도록 설계되었습니다 .</target>
        </trans-unit>
        <trans-unit id="02aea3bf160a5791ea88be98400d993055dab8e4" translate="yes" xml:space="preserve">
          <source>In case the target&amp;rsquo;s text segment can be made writable at run time by any means, padding the function entry with a number of NOPs can be used to provide a universal tool for instrumentation.</source>
          <target state="translated">대상의 텍스트 세그먼트를 런타임에 임의의 방법으로 쓰기 가능하게 만들 수있는 경우, 기능 항목에 여러 NOP를 채우면 범용 계측 도구를 제공하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9874bbe3a17ce137014e4f267a820e02a459cd83" translate="yes" xml:space="preserve">
          <source>In common subexpression elimination (CSE), scan through jump instructions when the target of the jump is not reached by any other path. For example, when CSE encounters an &lt;code&gt;if&lt;/code&gt; statement with an &lt;code&gt;else&lt;/code&gt; clause, CSE follows the jump when the condition tested is false.</source>
          <target state="translated">CSE (Common Subexpression Elimination)에서 점프 대상이 다른 경로에 도달하지 않으면 점프 명령을 통해 스캔합니다. 예를 들어, CSE가 &lt;code&gt;else&lt;/code&gt; 절 과 함께 &lt;code&gt;if&lt;/code&gt; 문을 발견하면 테스트 조건이 거짓 일 때 CSE가 점프를 따릅니다.</target>
        </trans-unit>
        <trans-unit id="0d002f9e5ac95dd6140d2236721894e943a8d321" translate="yes" xml:space="preserve">
          <source>In common with many processors, the R10K tries to predict the outcome of a conditional branch and speculatively executes instructions from the &amp;ldquo;taken&amp;rdquo; branch. It later aborts these instructions if the predicted outcome is wrong. However, on the R10K, even aborted instructions can have side effects.</source>
          <target state="translated">많은 프로세서와 마찬가지로 R10K는 조건부 분기의 결과를 예측하려고 시도하고 &quot;취득 된&quot;분기에서 명령을 추측 적으로 실행합니다. 예측 된 결과가 잘못되면 나중에이 지침을 중단합니다. 그러나 R10K에서는 중단 된 명령이라도 부작용이있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="efdf71d142bfbc79dd5b3bcc72b386e56b413dad" translate="yes" xml:space="preserve">
          <source>In conjunction with</source>
          <target state="translated">와 함께</target>
        </trans-unit>
        <trans-unit id="55aaa1ae89f88214a90bc2fc53bf852861a0ee3c" translate="yes" xml:space="preserve">
          <source>In conjunction with an option such as</source>
          <target state="translated">다음과 같은 옵션과 함께</target>
        </trans-unit>
        <trans-unit id="133d5d5b4d70459f3ec35b8411d0a144d606b9d7" translate="yes" xml:space="preserve">
          <source>In contrast to the use of GP-relative addressing for small data, zero-based addressing is never generated by default and there are no conventional section names used in standard linker scripts for sections in the low or high areas of memory.</source>
          <target state="translated">작은 데이터에 GP 기준 주소 지정을 사용하는 것과 달리 기본적으로 0 기반 주소 지정은 생성되지 않으며 표준 링커 스크립트에서 메모리가 부족하거나 높은 영역의 섹션에 사용되는 일반적인 섹션 이름이 없습니다.</target>
        </trans-unit>
        <trans-unit id="6c721c449943a687c21935f7f759a9b08f371a66" translate="yes" xml:space="preserve">
          <source>In each case, the &lt;var&gt;value&lt;/var&gt; is an integer. The allowable choices for &lt;var&gt;name&lt;/var&gt; are:</source>
          <target state="translated">각각의 경우 &lt;var&gt;value&lt;/var&gt; 은 정수입니다. 허용되는 &lt;var&gt;name&lt;/var&gt; 은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b8fca13e59c9eabf00cc2843d8091a8272a3dfca" translate="yes" xml:space="preserve">
          <source>In extremely rare cases involving some very large functions you may receive errors from the AIX Assembler complaining about a displacement that is too large. If you should run into it, you can work around by making your function smaller.</source>
          <target state="translated">매우 큰 기능이 포함 된 매우 드문 경우에는 AIX 어셈블러에서 너무 큰 변위에 대해 불평하는 오류가 표시 될 수 있습니다. 문제가 발생하면 기능을 더 작게 만들어서 해결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2aed0db0e41463dc20e3d5ead025ac9ef7859b51" translate="yes" xml:space="preserve">
          <source>In extremely rare cases involving some very large functions you may receive errors from the HP linker complaining about an out of bounds unconditional branch offset. This used to occur more often in previous versions of GCC, but is now exceptionally rare. If you should run into it, you can work around by making your function smaller.</source>
          <target state="translated">매우 큰 기능을 수행하는 매우 드문 경우에 HP 링커에서 범위를 벗어난 무조건 분기 오프셋에 대해 불평하는 오류가 발생할 수 있습니다. 이것은 이전 버전의 GCC에서 더 자주 발생했지만 이제는 예외입니다. 문제가 발생하면 기능을 더 작게 만들어서 해결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="00a48cd8543b2af5e751023419b48f45c985af5f" translate="yes" xml:space="preserve">
          <source>In general, code compiled with</source>
          <target state="translated">일반적으로 코드 컴파일</target>
        </trans-unit>
        <trans-unit id="8355c0879f482055d04fc677fc9eeb1be4e895fa" translate="yes" xml:space="preserve">
          <source>In most cases, these built-in functions are considered a &lt;em&gt;full barrier&lt;/em&gt;. That is, no memory operand is moved across the operation, either forward or backward. Further, instructions are issued as necessary to prevent the processor from speculating loads across the operation and from queuing stores after the operation.</source>
          <target state="translated">대부분의 경우 이러한 내장 기능은 &lt;em&gt;완전한 장벽&lt;/em&gt; 으로 간주됩니다 . 즉, 메모리 피연산자가 작업을 통해 앞뒤로 이동하지 않습니다. 또한, 프로세서가 작업을 통해 부하를 추측하지 못하고 작업 후 저장소를 큐에 넣는 것을 방지하기 위해 필요에 따라 명령이 발행됩니다.</target>
        </trans-unit>
        <trans-unit id="8dfbf43c73d9e540dd9c54a0b6d437a60ee32ec6" translate="yes" xml:space="preserve">
          <source>In new code it is better to use</source>
          <target state="translated">새로운 코드에서는 사용하는 것이 좋습니다</target>
        </trans-unit>
        <trans-unit id="62929241db8cf48751f4d6a5beb9e5db94e0fcf8" translate="yes" xml:space="preserve">
          <source>In order to facilitate indirect jump on devices with more than 128 Ki bytes of program memory space, there is a special function register called &lt;code&gt;EIND&lt;/code&gt; that serves as most significant part of the target address when &lt;code&gt;EICALL&lt;/code&gt; or &lt;code&gt;EIJMP&lt;/code&gt; instructions are used.</source>
          <target state="translated">128KB 이상의 프로그램 메모리 공간이있는 장치에서 간접 점프를 용이하게하기 위해 &lt;code&gt;EICALL&lt;/code&gt; 또는 &lt;code&gt;EIJMP&lt;/code&gt; 명령이 사용될 때 대상 주소의 가장 중요한 부분으로 사용되는 &lt;code&gt;EIND&lt;/code&gt; 라는 특수 기능 레지스터 가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="142019152633ff8b7d8e1d63884c100e78b27ae7" translate="yes" xml:space="preserve">
          <source>In order to get a warning about an unused function parameter, you must either specify</source>
          <target state="translated">사용하지 않는 함수 매개 변수에 대한 경고를 받으려면 다음 중 하나를 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="c494a40c1966ba85c60ab283de3d77a3dbd352eb" translate="yes" xml:space="preserve">
          <source>In order to get minimal, maximal and default value of a parameter, one can use</source>
          <target state="translated">매개 변수의 최소, 최대 및 기본값을 얻으려면 다음을 사용할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="aac1d3e632375c3d26f5a99a3c3744709b4cc7cf" translate="yes" xml:space="preserve">
          <source>In order to make it clear that you want the member of the base class, you need to defer lookup until instantiation time, at which the base class is known. For this, you need to access &lt;code&gt;i&lt;/code&gt; in a dependent context, by either using &lt;code&gt;this-&amp;gt;i&lt;/code&gt; (remember that &lt;code&gt;this&lt;/code&gt; is of type &lt;code&gt;Derived&amp;lt;T&amp;gt;*&lt;/code&gt;, so is obviously dependent), or using &lt;code&gt;Base&amp;lt;T&amp;gt;::i&lt;/code&gt;. Alternatively, &lt;code&gt;Base&amp;lt;T&amp;gt;::i&lt;/code&gt; might be brought into scope by a &lt;code&gt;using&lt;/code&gt;-declaration.</source>
          <target state="translated">기본 클래스의 멤버를 원한다는 것을 분명히하려면 기본 클래스가 알려진 인스턴스화 시간까지 조회를 연기해야합니다. 이를 위해서는 &lt;code&gt;this-&amp;gt;i&lt;/code&gt; ( &lt;code&gt;this&lt;/code&gt; 유형은 &lt;code&gt;Derived&amp;lt;T&amp;gt;*&lt;/code&gt; 유형 이므로 분명히 종속적 임)를 사용하거나 &lt;code&gt;Base&amp;lt;T&amp;gt;::i&lt;/code&gt; 를 사용하여 종속 컨텍스트에서 &lt;code&gt;i&lt;/code&gt; 에 액세스해야합니다 . 또는 &lt;code&gt;Base&amp;lt;T&amp;gt;::i&lt;/code&gt; &lt;code&gt;using&lt;/code&gt; -declaration을 사용하여 범위를 가져올 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8d32cad4da98f43c6d843c991432c09408caaf0e" translate="yes" xml:space="preserve">
          <source>In order to preserve backtraces, GCC will never turn calls to &lt;code&gt;noreturn&lt;/code&gt; functions into tail calls.</source>
          <target state="translated">역 추적을 유지하기 위해 GCC는 &lt;code&gt;noreturn&lt;/code&gt; 기능에 대한 호출을 테일 호출로 전환하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="8051ea04a019f5cadfa6ef75e3e8fdfb4199ab11" translate="yes" xml:space="preserve">
          <source>In order to use &lt;code&gt;_Float128&lt;/code&gt;, &lt;code&gt;__float128&lt;/code&gt;, and &lt;code&gt;__ibm128&lt;/code&gt; on PowerPC Linux systems, you must use the</source>
          <target state="translated">사용하기 위해서는 &lt;code&gt;_Float128&lt;/code&gt; , &lt;code&gt;__float128&lt;/code&gt; 및 &lt;code&gt;__ibm128&lt;/code&gt; 를 파워 리눅스 시스템에서, 당신은을 사용해야합니다</target>
        </trans-unit>
        <trans-unit id="0b53b26d6553c2df239324a926065719ab4a8ddb" translate="yes" xml:space="preserve">
          <source>In other words, this environment variable is equivalent to combining the options</source>
          <target state="translated">즉,이 환경 변수는 옵션을 결합하는 것과 같습니다.</target>
        </trans-unit>
        <trans-unit id="60319e85faea62862eceee65393b98d81d541246" translate="yes" xml:space="preserve">
          <source>In particular, a caller function can inline a callee function only if the architectural features available to the callee are a subset of the features available to the caller. For example: A function &lt;code&gt;foo&lt;/code&gt; compiled with</source>
          <target state="translated">특히, 호출자 기능은 수신자가 이용할 수있는 구조적 특징이 호출자가 이용할 수있는 특징의 부분 집합 인 경우에만 수신자 기능을 인라인 할 수있다. 예를 들어 : 함수 &lt;code&gt;foo&lt;/code&gt; 컴파일</target>
        </trans-unit>
        <trans-unit id="dfcf3dce47ea75abfa11b8f210c50bb328c92b22" translate="yes" xml:space="preserve">
          <source>In particular, in GNU C &amp;lsquo;</source>
          <target state="translated">특히 GNU C에서는</target>
        </trans-unit>
        <trans-unit id="752fbae7c4ca268deafc3b5be65444a5caccc6bb" translate="yes" xml:space="preserve">
          <source>In particular, the following things, even if they can work in a particular case, are not guaranteed:</source>
          <target state="translated">특히 다음과 같은 경우에는 특정한 경우에 작동 할 수 있지만 보장되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="fc7e4e23d46d87fd7427f9d533a75885300d9f17" translate="yes" xml:space="preserve">
          <source>In position-dependent code, a few targets also convert calls to functions that are marked to not use the PLT to use the GOT instead.</source>
          <target state="translated">위치 종속 코드에서 일부 대상은 PLT를 사용하지 않고 GOT를 대신 사용하도록 표시된 함수로 호출을 변환합니다.</target>
        </trans-unit>
        <trans-unit id="689474804d315625babc4fa837c13bb94860852e" translate="yes" xml:space="preserve">
          <source>In processor names, a final &amp;lsquo;</source>
          <target state="translated">프로세서 이름에서 최종 '</target>
        </trans-unit>
        <trans-unit id="a2387332e373acd28cba30f5a2036e7dd3dc49b3" translate="yes" xml:space="preserve">
          <source>In situations where a character array is intended to store a sequence of bytes with no terminating &lt;code&gt;NUL&lt;/code&gt; such an array may be annotated with attribute &lt;code&gt;nonstring&lt;/code&gt; to avoid this warning. Such arrays, however, are not suitable arguments to functions that expect &lt;code&gt;NUL&lt;/code&gt;-terminated strings. To help detect accidental misuses of such arrays GCC issues warnings unless it can prove that the use is safe. See &lt;a href=&quot;common-variable-attributes#Common-Variable-Attributes&quot;&gt;Common Variable Attributes&lt;/a&gt;.</source>
          <target state="translated">문자 배열이 &lt;code&gt;NUL&lt;/code&gt; 을 종료하지 않고 일련의 바이트를 저장하려고하는 상황에서 이러한 배열은 이 경고를 피하기 위해 속성 &lt;code&gt;nonstring&lt;/code&gt; 으로 주석을 달 수 있습니다 . 그러나 이러한 배열은 &lt;code&gt;NUL&lt;/code&gt; 종료 문자열 을 예상하는 함수에 적합한 인수가 아닙니다 . 이러한 어레이의 우발적 인 오용을 감지하기 위해 GCC는 사용이 안전하다는 것을 증명할 수없는 경우 경고를 발행합니다. &lt;a href=&quot;common-variable-attributes#Common-Variable-Attributes&quot;&gt;공통 변수 속성을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ecfec26cb0ac5a0a1c1e85b523feb3ed95ffb03b" translate="yes" xml:space="preserve">
          <source>In some cases, such as when the &lt;code&gt;packed&lt;/code&gt; attribute is applied to a structure field, it may not be possible to access the field with a single read or write that is correctly aligned for the target machine. In this case GCC falls back to generating multiple accesses rather than code that will fault or truncate the result at run time.</source>
          <target state="translated">&lt;code&gt;packed&lt;/code&gt; 속성이 구조 필드에 적용되는 경우와 같은 일부 경우 대상 시스템에 올바르게 정렬 된 단일 읽기 또는 쓰기로 필드에 액세스하지 못할 수 있습니다. 이 경우 GCC는 런타임에 오류를 일으키거나 결과를 자르는 코드가 아닌 다중 액세스를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="6658650e6720d9733c30a8ad0be8becc792aaec5" translate="yes" xml:space="preserve">
          <source>In some other C compilers, an &lt;code&gt;extern&lt;/code&gt; declaration affects all the rest of the file even if it happens within a block.</source>
          <target state="translated">일부 다른 C 컴파일러에서 &lt;code&gt;extern&lt;/code&gt; 선언은 파일이 블록 내에서 발생하더라도 나머지 파일에 모두 영향을줍니다.</target>
        </trans-unit>
        <trans-unit id="c8c50a3ca24a6c45c0c4b47ae136e3f0a0a01c74" translate="yes" xml:space="preserve">
          <source>In some places, GCC uses various constants to control the amount of optimization that is done. For example, GCC does not inline functions that contain more than a certain number of instructions. You can control some of these constants on the command line using the</source>
          <target state="translated">어떤 곳에서는 GCC가 다양한 상수를 사용하여 수행되는 최적화 양을 제어합니다. 예를 들어 GCC는 특정 개수 이상의 명령이 포함 된 함수를 인라인하지 않습니다. 명령 행에서이 상수 중 일부를 제어 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f69acb29f3e047877fe023942587da5b98d97826" translate="yes" xml:space="preserve">
          <source>In standard C, you are not allowed to leave the variable argument out entirely; but you are allowed to pass an empty argument. For example, this invocation is invalid in ISO C, because there is no comma after the string:</source>
          <target state="translated">표준 C에서는 변수 인수를 완전히 배제 할 수 없습니다. 그러나 빈 인수를 전달할 수 있습니다. 예를 들어,이 호출은 문자열 뒤에 쉼표가 없기 때문에 ISO C에서 유효하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="58989f3f4b9eea02c0ec4c1059a86cfbe8cdb94e" translate="yes" xml:space="preserve">
          <source>In the Alpha architecture, floating-point traps are imprecise. This means without software assistance it is impossible to recover from a floating trap and program execution normally needs to be terminated. GCC can generate code that can assist operating system trap handlers in determining the exact location that caused a floating-point trap. Depending on the requirements of an application, different levels of precisions can be selected:</source>
          <target state="translated">알파 아키텍처에서는 부동 소수점 트랩이 정확하지 않습니다. 즉, 소프트웨어 지원이 없으면 플로팅 트랩에서 복구 할 수 없으며 일반적으로 프로그램 실행을 종료해야합니다. GCC는 운영 체제 트랩 처리기가 부동 소수점 트랩을 발생시킨 정확한 위치를 결정하는 데 도움이되는 코드를 생성 할 수 있습니다. 응용 분야의 요구 사항에 따라 다른 수준의 정밀도를 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6bf5f3b4f4b7b32e9468d2fe59cdb7f94586ed94" translate="yes" xml:space="preserve">
          <source>In the C++ frontend, when printing diagnostics showing mismatching template types, such as:</source>
          <target state="translated">C ++ 프론트 엔드에서 다음과 같이 일치하지 않는 템플리트 유형을 표시하는 진단을 인쇄 할 때 :</target>
        </trans-unit>
        <trans-unit id="30e98524998c5d7c58be11e9d977beb07b3f8a4e" translate="yes" xml:space="preserve">
          <source>In the ISO C standard of 1999, a macro can be declared to accept a variable number of arguments much as a function can. The syntax for defining the macro is similar to that of a function. Here is an example:</source>
          <target state="translated">1999 년 ISO C 표준에서 매크로는 함수가 할 수있는만큼 많은 수의 인수를 허용하도록 선언 될 수 있습니다. 매크로를 정의하는 구문은 함수의 구문과 유사합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d2c1baab4661a523e3364f174cd970aa12806955" translate="yes" xml:space="preserve">
          <source>In the above example, &lt;var&gt;n&lt;/var&gt; could be negative, causing a larger than expected argument to be implicitly cast into the &lt;code&gt;alloca&lt;/code&gt; call.</source>
          <target state="translated">위의 예에서, &lt;var&gt;n&lt;/var&gt; 은 음수 일 수 있으며, 예상보다 큰 인수가 암시 적으로 &lt;code&gt;alloca&lt;/code&gt; 호출에 캐스트됩니다 .</target>
        </trans-unit>
        <trans-unit id="23d4340feaa11dd8e5b284a54d802e8107a80100" translate="yes" xml:space="preserve">
          <source>In the above example, four versions of function foo are created. The first version of foo with the target attribute &quot;default&quot; is the default version. This version gets executed when no other target specific version qualifies for execution on a particular platform. A new version of foo is created by using the same function signature but with a different target string. Function foo is called or a pointer to it is taken just like a regular function. GCC takes care of doing the dispatching to call the right version at runtime. Refer to the &lt;a href=&quot;http://gcc.gnu.org/wiki/FunctionMultiVersioning&quot;&gt;GCC wiki on Function Multiversioning&lt;/a&gt; for more details.</source>
          <target state="translated">위의 예제에서 4 가지 버전의 함수 foo가 작성되었습니다. 대상 속성이 &quot;default&quot;인 foo의 첫 번째 버전이 기본 버전입니다. 이 버전은 다른 대상 특정 버전이 특정 플랫폼에서 실행할 수있는 자격이 없을 때 실행됩니다. 동일한 기능 서명을 사용하지만 다른 대상 문자열을 사용하여 새 버전의 foo가 작성됩니다. 함수 foo가 호출되거나 이에 대한 포인터가 일반 함수처럼 사용됩니다. GCC는 디스패치를 ​​수행하여 런타임에 올바른 버전을 호출합니다. 자세한 내용은 &lt;a href=&quot;http://gcc.gnu.org/wiki/FunctionMultiVersioning&quot;&gt;GCC 위키&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="a1bff041cccec6e7eb7b11056100ded2af52d7c9" translate="yes" xml:space="preserve">
          <source>In the above example, passing &lt;code&gt;-Walloca-larger-than=1000&lt;/code&gt; would not issue a warning because the call to &lt;code&gt;alloca&lt;/code&gt; is known to be at most 1000 bytes. However, if &lt;code&gt;-Walloca-larger-than=500&lt;/code&gt; were passed, the compiler would emit a warning.</source>
          <target state="translated">위의 예에서 &lt;code&gt;alloca&lt;/code&gt; 에 대한 호출이 최대 1000 바이트 인 것으로 알려져 있기 때문에 &lt;code&gt;-Walloca-larger-than=1000&lt;/code&gt; 을 전달 하면 경고가 발생하지 않습니다 . 그러나 &lt;code&gt;-Walloca-larger-than=500&lt;/code&gt; 을 전달하면 컴파일러에서 경고를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="332968dc71142314e45ea6ca9e33a5109f2af711" translate="yes" xml:space="preserve">
          <source>In the absence of the zero-length array extension, in ISO C90 the &lt;code&gt;contents&lt;/code&gt; array in the example above would typically be declared to have a single element. Unlike a zero-length array which only contributes to the size of the enclosing structure for the purposes of alignment, a one-element array always occupies at least as much space as a single object of the type. Although using one-element arrays this way is discouraged, GCC handles accesses to trailing one-element array members analogously to zero-length arrays.</source>
          <target state="translated">길이가 0 인 배열 확장이 없으면 ISO C90에서 위 예제 의 &lt;code&gt;contents&lt;/code&gt; 배열은 일반적으로 단일 요소를 갖도록 선언됩니다. 정렬 목적으로 만 둘러싸는 구조의 크기에만 기여하는 길이가 0 인 배열과 달리 한 요소 배열은 항상 유형의 단일 개체만큼 많은 공간을 차지합니다. 이 방법으로 단일 요소 배열을 사용하지 않는 것이 좋지만 GCC는 길이가 0 인 배열과 마찬가지로 단일 요소 배열 구성원에 대한 액세스를 처리합니다.</target>
        </trans-unit>
        <trans-unit id="c5606a80dd3681d695be85b469a76a47b51736f5" translate="yes" xml:space="preserve">
          <source>In the body of &lt;code&gt;fn&lt;/code&gt;, &lt;var&gt;rptr&lt;/var&gt; points to an unaliased integer and &lt;var&gt;rref&lt;/var&gt; refers to a (different) unaliased integer.</source>
          <target state="translated">본문에서 &lt;code&gt;fn&lt;/code&gt; , &lt;var&gt;rptr&lt;/var&gt; unaliased 정수 포인트 &lt;var&gt;rref&lt;/var&gt; A (다른) unaliased 정수를 의미한다.</target>
        </trans-unit>
        <trans-unit id="72adaffc52e227090554b141dc851c2ba2acd228" translate="yes" xml:space="preserve">
          <source>In the call to &lt;code&gt;f1&lt;/code&gt; inside &lt;code&gt;f2&lt;/code&gt;, the pointer &lt;code&gt;p&lt;/code&gt; is converted into a pointer to the anonymous field.</source>
          <target state="translated">&lt;code&gt;f2&lt;/code&gt; 내의 &lt;code&gt;f1&lt;/code&gt; 에 대한 호출 에서 포인터 &lt;code&gt;p&lt;/code&gt; 는 익명 필드에 대한 포인터로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="0a8054866654e30e64690afd790ea604bf91b2c2" translate="yes" xml:space="preserve">
          <source>In the case of mixed tabs and spaces, the warning uses the</source>
          <target state="translated">탭과 공백이 혼합 된 경우 경고는</target>
        </trans-unit>
        <trans-unit id="668ede8f3b6b3725bfdad3d893282dd8102b4a7b" translate="yes" xml:space="preserve">
          <source>In the example above, if the size of each &lt;code&gt;short&lt;/code&gt; is 2 bytes, then the size of the entire &lt;code&gt;struct S&lt;/code&gt; type is 6 bytes. The smallest power of two that is greater than or equal to that is 8, so the compiler sets the alignment for the entire &lt;code&gt;struct S&lt;/code&gt; type to 8 bytes.</source>
          <target state="translated">위의 예에서 각 &lt;code&gt;short&lt;/code&gt; 의 크기 가 2 바이트 인 경우 전체 &lt;code&gt;struct S&lt;/code&gt; 유형 의 크기 는 6 바이트입니다. 그보다 크거나 같은 2의 최소 제곱은 8이므로 컴파일러는 전체 &lt;code&gt;struct S&lt;/code&gt; 유형 의 정렬 을 8 바이트로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="d611872451077c2adcf065d60aa97d23e192a616" translate="yes" xml:space="preserve">
          <source>In the example above, the format string (&lt;code&gt;my_format&lt;/code&gt;) is the second argument of the function &lt;code&gt;my_print&lt;/code&gt;, and the arguments to check start with the third argument, so the correct parameters for the format attribute are 2 and 3.</source>
          <target state="translated">위의 예에서 형식 문자열 ( &lt;code&gt;my_format&lt;/code&gt; )은 &lt;code&gt;my_print&lt;/code&gt; 함수의 두 번째 인수이고 검사 할 인수는 세 번째 인수로 시작하므로 형식 속성의 올바른 매개 변수는 2와 3입니다.</target>
        </trans-unit>
        <trans-unit id="c81e2f387793e8f74907d44b15263e2ac578ba9c" translate="yes" xml:space="preserve">
          <source>In the following example 2 bytes are saved for each call to function &lt;code&gt;foo&lt;/code&gt;.</source>
          <target state="translated">다음 예제에서 &lt;code&gt;foo&lt;/code&gt; 함수를 호출 할 때마다 2 바이트가 저장됩니다 .</target>
        </trans-unit>
        <trans-unit id="f2582be090e1c1dbe5968b20143ec726da1f7d9e" translate="yes" xml:space="preserve">
          <source>In the following example &lt;code&gt;struct my_packed_struct&lt;/code&gt;&amp;rsquo;s members are packed closely together, but the internal layout of its &lt;code&gt;s&lt;/code&gt; member is not packed&amp;mdash;to do that, &lt;code&gt;struct my_unpacked_struct&lt;/code&gt; needs to be packed too.</source>
          <target state="translated">다음 예제에서는 &lt;code&gt;struct my_packed_struct&lt;/code&gt; 의 구성원이 서로 긴밀하게 포장되어 있지만 내부 레이아웃 &lt;code&gt;s&lt;/code&gt; 구성원이되지 포장-하기 위해 그렇게, &lt;code&gt;struct my_unpacked_struct&lt;/code&gt; 요구도 포장한다.</target>
        </trans-unit>
        <trans-unit id="2ad9bba785d38d1a703efec0ed08be1c07a3d9c1" translate="yes" xml:space="preserve">
          <source>In the following example, &lt;code&gt;A&lt;/code&gt; would normally be created before &lt;code&gt;B&lt;/code&gt;, but the &lt;code&gt;init_priority&lt;/code&gt; attribute reverses that order:</source>
          <target state="translated">다음 예제에서 &lt;code&gt;A&lt;/code&gt; 는 일반적으로 &lt;code&gt;B&lt;/code&gt; 보다 먼저 작성 되지만 &lt;code&gt;init_priority&lt;/code&gt; 속성은 그 순서를 반대로합니다.</target>
        </trans-unit>
        <trans-unit id="eab6b57c27507ae55bdb9c6e5a0691baa5974d49" translate="yes" xml:space="preserve">
          <source>In the following example, the call to &amp;ldquo;bar&amp;rdquo; is misleadingly indented as if it were guarded by the &amp;ldquo;if&amp;rdquo; conditional.</source>
          <target state="translated">다음 예에서 &quot;bar&quot;에 대한 호출은 &quot;if&quot;조건에 의해 보호 된 것처럼 잘못 들여 쓰기됩니다.</target>
        </trans-unit>
        <trans-unit id="5d55b7c384eed91ea4e21f8b8e99933dea2beab9" translate="yes" xml:space="preserve">
          <source>In the following example, the call to &lt;code&gt;strncat&lt;/code&gt; specifies a bound that is less than the length of the source string. As a result, the copy of the source will be truncated and so the call is diagnosed. To avoid the warning use &lt;code&gt;bufsize - strlen (buf) - 1)&lt;/code&gt; as the bound.</source>
          <target state="translated">다음 예제에서 &lt;code&gt;strncat&lt;/code&gt; 에 대한 호출 은 소스 문자열의 길이보다 작은 범위를 지정합니다. 결과적으로 소스의 사본이 잘리고 호출이 진단됩니다. 경고를 피하려면 &lt;code&gt;bufsize - strlen (buf) - 1)&lt;/code&gt; 을 경계로 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="99023364872044963c7ac2454f86695e7bf39529" translate="yes" xml:space="preserve">
          <source>In the following example, the call to &lt;code&gt;strncpy&lt;/code&gt; specifies the size of the destination buffer as the bound. If the length of the source string is equal to or greater than this size the result of the copy will not be NUL-terminated. Therefore, the call is also diagnosed. To avoid the warning, specify &lt;code&gt;sizeof buf - 1&lt;/code&gt; as the bound and set the last element of the buffer to &lt;code&gt;NUL&lt;/code&gt;.</source>
          <target state="translated">다음 예제에서 &lt;code&gt;strncpy&lt;/code&gt; 를 호출 하면 대상 버퍼의 크기가 바운드로 지정됩니다. 소스 문자열의 길이가이 크기 이상이면 복사 결과가 NUL로 종료되지 않습니다. 따라서 통화도 진단됩니다. 경고를 피하려면 &lt;code&gt;sizeof buf - 1&lt;/code&gt; 을 바운드로 지정 하고 버퍼의 마지막 요소를 &lt;code&gt;NUL&lt;/code&gt; 로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="b2205cf9915c94cb78e3ab81cd7cb0eabf600a0e" translate="yes" xml:space="preserve">
          <source>In the following example, the optimization info is output to</source>
          <target state="translated">다음 예에서 최적화 정보는</target>
        </trans-unit>
        <trans-unit id="090624bc5f542a6200f2b5db31c7a96042440439" translate="yes" xml:space="preserve">
          <source>In the future, GCC may ignore all longcall specifications when the linker is known to generate glue.</source>
          <target state="translated">향후 링커가 글루를 생성하는 것으로 알려진 경우 GCC는 모든 롱콜 사양을 무시할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9b65ba979b01328e9229388df23c21da9df9f6b9" translate="yes" xml:space="preserve">
          <source>In the past, the GNU C++ compiler was extended to experiment with new features, at a time when the C++ language was still evolving. Now that the C++ standard is complete, some of those features are superseded by superior alternatives. Using the old features might cause a warning in some cases that the feature will be dropped in the future. In other cases, the feature might be gone already.</source>
          <target state="translated">과거에는 C ++ 언어가 계속 발전 할 때 GNU C ++ 컴파일러가 새로운 기능을 실험하도록 확장되었습니다. C ++ 표준이 완성되었으므로 이러한 기능 중 일부는 우수한 대안으로 대체되었습니다. 이전 기능을 사용하면 경우에 따라 기능이 삭제 될 것이라는 경고가 발생할 수 있습니다. 다른 경우에는 기능이 이미 사라 졌을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2ec007d1b8fb8c7647c245995b76441efba1c6d6" translate="yes" xml:space="preserve">
          <source>In the situation where no matching handler is found, it is implementation-defined whether or not the stack is unwound before std::terminate() is called (C++98 15.5.1).</source>
          <target state="translated">일치하는 핸들러가없는 경우 std :: terminate ()가 호출되기 전에 스택이 풀 렸는지 여부가 구현 정의됩니다 (C ++ 98 15.5.1).</target>
        </trans-unit>
        <trans-unit id="2b3b9b011b7a600b4b0a236d7a6052525d44af3c" translate="yes" xml:space="preserve">
          <source>In the x86-64 compiler,</source>
          <target state="translated">x86-64 컴파일러에서</target>
        </trans-unit>
        <trans-unit id="69fa1e0803241118d47ffd49449baa41bc17a296" translate="yes" xml:space="preserve">
          <source>In this case, &lt;code&gt;PRId64&lt;/code&gt; is treated as a separate preprocessing token.</source>
          <target state="translated">이 경우 &lt;code&gt;PRId64&lt;/code&gt; 는 별도의 전처리 토큰으로 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="5e608c39601145b6331e6e0d1f6c70cd4fe12595" translate="yes" xml:space="preserve">
          <source>In this code, &lt;code&gt;C::C&lt;/code&gt; is exported from the current DLL, but the virtual table for &lt;code&gt;C&lt;/code&gt; is not exported. (You can use &lt;code&gt;__attribute__&lt;/code&gt; instead of &lt;code&gt;__declspec&lt;/code&gt; if you prefer, but most Symbian OS code uses &lt;code&gt;__declspec&lt;/code&gt;.)</source>
          <target state="translated">이 코드에서 &lt;code&gt;C::C&lt;/code&gt; 는 현재 DLL에서 내보내 지지만 &lt;code&gt;C&lt;/code&gt; 의 가상 테이블 은 내보내지지 않습니다. (원하는 경우 &lt;code&gt;__declspec&lt;/code&gt; 대신 &lt;code&gt;__attribute__&lt;/code&gt; 를 사용할 수 있지만 대부분의 Symbian OS 코드는 &lt;code&gt;__declspec&lt;/code&gt; 을 사용합니다 .)</target>
        </trans-unit>
        <trans-unit id="cf74d98117e616fffd8931f1489225a69f862b46" translate="yes" xml:space="preserve">
          <source>In this example &lt;code&gt;target(&quot;+crc+nocrypto&quot;)&lt;/code&gt; enables the &lt;code&gt;crc&lt;/code&gt; extension and disables the &lt;code&gt;crypto&lt;/code&gt; extension for the function &lt;code&gt;foo&lt;/code&gt; without modifying an existing</source>
          <target state="translated">이 예에서 &lt;code&gt;target(&quot;+crc+nocrypto&quot;)&lt;/code&gt; 은 &lt;code&gt;crc&lt;/code&gt; 확장을 활성화하고 기존의 수정없이 &lt;code&gt;foo&lt;/code&gt; 함수에 대한 &lt;code&gt;crypto&lt;/code&gt; 확장을 비활성화합니다.</target>
        </trans-unit>
        <trans-unit id="58a4adc7d0429a642a388d8bfe0b7fe702edd6d4" translate="yes" xml:space="preserve">
          <source>In this example using the fictitious &lt;code&gt;combine&lt;/code&gt; instruction, the constraint &lt;code&gt;&quot;0&quot;&lt;/code&gt; for input operand 1 says that it must occupy the same location as output operand 0. Only input operands may use numbers in constraints, and they must each refer to an output operand. Only a number (or the symbolic assembler name) in the constraint can guarantee that one operand is in the same place as another. The mere fact that &lt;code&gt;foo&lt;/code&gt; is the value of both operands is not enough to guarantee that they are in the same place in the generated assembler code.</source>
          <target state="translated">가상의 &lt;code&gt;combine&lt;/code&gt; 명령어 를 사용하는이 예에서 , 입력 피연산자 1에 대한 제한 조건 &lt;code&gt;&quot;0&quot;&lt;/code&gt; 은 출력 피연산자 0과 동일한 위치를 점유해야한다는 것을 나타냅니다. 입력 피연산자 만 제한 조건에 숫자를 사용할 수 있으며 각각 출력 피연산자를 참조해야합니다. 제한 조건의 숫자 (또는 기호 어셈블러 이름)만이 한 피연산자가 다른 피연산자와 동일한 위치에 있음을 보장 할 수 있습니다. &lt;code&gt;foo&lt;/code&gt; 가 두 피연산자의 값 이라는 사실만으로도 생성 된 어셈블러 코드에서 동일한 위치에 있다고 보장 할 수는 없습니다.</target>
        </trans-unit>
        <trans-unit id="520980bd6ea541d3639c3a33ef889a8d9a6daa19" translate="yes" xml:space="preserve">
          <source>In this example,</source>
          <target state="translated">이 예에서는</target>
        </trans-unit>
        <trans-unit id="319dc8c090a6daef3a9c5df24c2d9cdc65374743" translate="yes" xml:space="preserve">
          <source>In this example, copy elision isn&amp;rsquo;t applicable because the type of the expression being returned and the function return type differ, yet G++ treats the return value as if it were designated by an rvalue.</source>
          <target state="translated">이 예에서는 반환되는 표현식의 유형과 함수 반환 유형이 다르기 때문에 복사 제거가 적용되지 않지만 G ++는 반환 값을 rvalue로 지정된 것처럼 처리합니다.</target>
        </trans-unit>
        <trans-unit id="4e8bd971ddd095859a278a42bd750e7f78bf378c" translate="yes" xml:space="preserve">
          <source>In this example, only</source>
          <target state="translated">이 예에서는</target>
        </trans-unit>
        <trans-unit id="9d08184dfe71cd797666be2ee4c2240b6d577d4d" translate="yes" xml:space="preserve">
          <source>In this example, the definition of X as 1 is saved by &lt;code&gt;#pragma
push_macro&lt;/code&gt; and restored by &lt;code&gt;#pragma pop_macro&lt;/code&gt;.</source>
          <target state="translated">이 예에서 X로 정의 된 1은 &lt;code&gt;#pragma push_macro&lt;/code&gt; 의해 저장 되고 &lt;code&gt;#pragma pop_macro&lt;/code&gt; 에 의해 복원됩니다 .</target>
        </trans-unit>
        <trans-unit id="21ecdc81f33fba4861729ef952b0d8145291cd18" translate="yes" xml:space="preserve">
          <source>In this example, the initialization of &lt;code&gt;Stdin&lt;/code&gt;, &lt;code&gt;Stdout&lt;/code&gt; and &lt;code&gt;Stderr&lt;/code&gt; in &lt;code&gt;+initialize&lt;/code&gt; occurs too late. The programmer can send a message to one of these objects before the variables are actually initialized, thus sending messages to the &lt;code&gt;nil&lt;/code&gt; object. The &lt;code&gt;+initialize&lt;/code&gt; method which actually initializes the global variables is not invoked until the first message is sent to the class object. The solution would require these variables to be initialized just before entering &lt;code&gt;main&lt;/code&gt;.</source>
          <target state="translated">이 예 에서 &lt;code&gt;+initialize&lt;/code&gt; 에서 &lt;code&gt;Stdin&lt;/code&gt; , &lt;code&gt;Stdout&lt;/code&gt; 및 &lt;code&gt;Stderr&lt;/code&gt; 의초기화 가 너무 늦습니다. 프로그래머는 변수가 실제로 초기화되기 전에 이러한 객체 중 하나에 메시지를 보내서 &lt;code&gt;nil&lt;/code&gt; 객체에 메시지를 보낼 수 있습니다. &lt;code&gt;+initialize&lt;/code&gt; 첫 번째 메시지가 클래스 객체로 전송 될 때까지 실제로 전역 변수를 초기화하는 방법은 호출되지 않습니다. 솔루션은 &lt;code&gt;main&lt;/code&gt; 에 들어가기 직전에 이러한 변수를 초기화해야 합니다.</target>
        </trans-unit>
        <trans-unit id="9aaba03579077debce898734e55c1aab4715c942" translate="yes" xml:space="preserve">
          <source>In this example, using the &lt;code&gt;restrict&lt;/code&gt; qualifier had the same effect. In the following example, that would not be possible. Assume &lt;em&gt;k &amp;lt; -m&lt;/em&gt; or &lt;em&gt;k &amp;gt;= m&lt;/em&gt;. Only with the pragma, the compiler knows that it can unconditionally vectorize the following loop:</source>
          <target state="translated">이 예에서 &lt;code&gt;restrict&lt;/code&gt; 한정자를 사용하면 동일한 효과가 나타납니다. 다음 예에서는 불가능합니다. &lt;em&gt;k &amp;lt;-m&lt;/em&gt; 또는 &lt;em&gt;k&amp;gt; = m&lt;/em&gt; 이라고 가정하십시오 . pragma를 통해서만 컴파일러는 다음 루프를 무조건 벡터화 할 수 있음을 알고 있습니다.</target>
        </trans-unit>
        <trans-unit id="faacd98f76b275362fdf70ef063e37d5684ab5f2" translate="yes" xml:space="preserve">
          <source>In this example, you are able to access members of the unnamed union with code like &amp;lsquo;</source>
          <target state="translated">이 예에서는 '와 같은 코드를 사용하여 명명되지 않은 공용체 멤버에 액세스 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="11ec4b5f708bff6df3841d797062db8a50e96ffa" translate="yes" xml:space="preserve">
          <source>In this i386 example, &lt;code&gt;old&lt;/code&gt; (referred to in the template string as &lt;code&gt;%0&lt;/code&gt;) and &lt;code&gt;*Base&lt;/code&gt; (as &lt;code&gt;%1&lt;/code&gt;) are outputs and &lt;code&gt;Offset&lt;/code&gt; (&lt;code&gt;%2&lt;/code&gt;) is an input:</source>
          <target state="translated">이 i386 예제에서 &lt;code&gt;old&lt;/code&gt; (템플리트 문자열에서 &lt;code&gt;%0&lt;/code&gt; 이라고 함 ) 및 &lt;code&gt;*Base&lt;/code&gt; ( &lt;code&gt;%1&lt;/code&gt; )가 출력되고 &lt;code&gt;Offset&lt;/code&gt; ( &lt;code&gt;%2&lt;/code&gt; )이 입력입니다.</target>
        </trans-unit>
        <trans-unit id="baf1ef107e11e79f68ce627953735497e89d197f" translate="yes" xml:space="preserve">
          <source>In this mode, each basic block is only shown on one line &amp;ndash; the last line of the block. A multi-line block will only contribute to the execution count of that last line, and other lines will not be shown to contain code, unless previous blocks end on those lines. The total execution count of a line is shown and subsequent lines show the execution counts for individual blocks that end on that line. After each block, the branch and call counts of the block will be shown, if the</source>
          <target state="translated">이 모드에서 각 기본 블록은 한 줄, 즉 블록의 마지막 줄에만 표시됩니다. 여러 줄 블록은 마지막 줄의 실행 횟수에만 영향을 미치며 이전 줄이 해당 줄에서 끝나지 않는 한 다른 줄에는 코드가 포함되지 않습니다. 라인의 총 실행 횟수가 표시되고 후속 라인에는 해당 라인에서 끝나는 개별 블록의 실행 횟수가 표시됩니다. 각 블록 뒤에는 블록의 분기 및 호출 수가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="f98f506a6c9d396979e78ddb03cc339a44caf644" translate="yes" xml:space="preserve">
          <source>In this simple case, the ability to omit the middle operand is not especially useful. When it becomes useful is when the first operand does, or may (if it is a macro argument), contain a side effect. Then repeating the operand in the middle would perform the side effect twice. Omitting the middle operand uses the value already computed without the undesirable effects of recomputing it.</source>
          <target state="translated">이 간단한 경우, 중간 피연산자를 생략하는 기능은 특히 유용하지 않습니다. 그것이 유용하게 될 때 첫 번째 피연산자가 할 때 또는 (매크로 인수 인 경우) 부작용을 포함 할 수 있습니다. 그런 다음 중간에 피연산자를 반복하면 부작용이 두 번 수행됩니다. 중간 피연산자를 생략하면 재 계산의 바람직하지 않은 영향없이 이미 계산 된 값이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="30850ac01d9d951fde54525545edac5180129639" translate="yes" xml:space="preserve">
          <source>In this situation, it may seem reasonable to save a pointer to the C string returned by the &lt;code&gt;c_str&lt;/code&gt; member function and use that rather than call &lt;code&gt;c_str&lt;/code&gt; repeatedly. However, the temporary string created by the call to &lt;code&gt;strfunc&lt;/code&gt; is destroyed after &lt;code&gt;p&lt;/code&gt; is initialized, at which point &lt;code&gt;p&lt;/code&gt; is left pointing to freed memory.</source>
          <target state="translated">이 상황에서는 &lt;code&gt;c_str&lt;/code&gt; 멤버 함수가 반환 한 C 문자열에 대한 포인터를 저장하고 &lt;code&gt;c_str&lt;/code&gt; 을 반복적으로 호출하는 대신이를 사용하는 것이 합리적으로 보일 수 있습니다 . 그러나 &lt;code&gt;strfunc&lt;/code&gt; 호출에 의해 생성 된 임시 문자열 은 &lt;code&gt;p&lt;/code&gt; 가 초기화 된 후에 소멸 되며,이 시점에서 &lt;code&gt;p&lt;/code&gt; 는 해제 된 메모리를 가리 킵니다.</target>
        </trans-unit>
        <trans-unit id="9c79c74c33310ccb6338d0595028b7084d9d04e6" translate="yes" xml:space="preserve">
          <source>In traditional C, some preprocessor directives did not exist. Traditional preprocessors only considered a line to be a directive if the &amp;lsquo;</source>
          <target state="translated">기존 C에서는 일부 전 처리기 지시문이 존재하지 않았습니다. 기존의 전처리 기는 '</target>
        </trans-unit>
        <trans-unit id="af6d48f148638b92ad84fcdf9e5cab97ac9e3711" translate="yes" xml:space="preserve">
          <source>In traditional C, you can combine &lt;code&gt;long&lt;/code&gt;, etc., with a typedef name, as shown here:</source>
          <target state="translated">전통적인 C에서는 다음과 같이 &lt;code&gt;long&lt;/code&gt; 등을 typedef 이름과 결합 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ba953d2d262b9f5a9a993ae297fa4814ea4c549d" translate="yes" xml:space="preserve">
          <source>Increase the minimum alignment of each &lt;var&gt;variable&lt;/var&gt; to &lt;var&gt;alignment&lt;/var&gt;. This is the same as GCC&amp;rsquo;s &lt;code&gt;aligned&lt;/code&gt; attribute see &lt;a href=&quot;variable-attributes#Variable-Attributes&quot;&gt;Variable Attributes&lt;/a&gt;). Macro expansion occurs on the arguments to this pragma when compiling C and Objective-C. It does not currently occur when compiling C++, but this is a bug which may be fixed in a future release.</source>
          <target state="translated">각각의 최소 정렬 증가 &lt;var&gt;variable&lt;/var&gt; 에 &lt;var&gt;alignment&lt;/var&gt; . 이것은 GCC의 &lt;code&gt;aligned&lt;/code&gt; 속성 과 동일 합니다. &lt;a href=&quot;variable-attributes#Variable-Attributes&quot;&gt;변수&lt;/a&gt; 속성 참조 ). C와 Objective-C를 컴파일 할 때이 pragma에 대한 인수에서 매크로 확장이 발생합니다. 현재 C ++를 컴파일 할 때는 발생하지 않지만 향후 릴리스에서 수정 될 수있는 버그입니다.</target>
        </trans-unit>
        <trans-unit id="3a36ae001267163487813c67072e72529ac1fc44" translate="yes" xml:space="preserve">
          <source>Increment the current shadow stack pointer by the size specified by the function argument. The argument is masked to a byte value for security reasons, so to increment by more than 255 bytes you must call the function multiple times.</source>
          <target state="translated">현재 섀도 스택 포인터를 함수 인수로 지정된 크기만큼 증가시킵니다. 보안상의 이유로 인수는 바이트 값으로 마스킹되므로 255 바이트 이상 증가하려면 함수를 여러 번 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="a77ff871b762622ee18fb03c8d6e4821448c4ba7" translate="yes" xml:space="preserve">
          <source>Index of concepts and symbol names.</source>
          <target state="translated">개념 및 기호 이름의 색인.</target>
        </trans-unit>
        <trans-unit id="fc043d0a8b4563d771d031e44dbc955b74387769" translate="yes" xml:space="preserve">
          <source>Index to command line options.</source>
          <target state="translated">명령 행 옵션 색인.</target>
        </trans-unit>
        <trans-unit id="420ef9e906b8f54c4b93394265974a605cf160bb" translate="yes" xml:space="preserve">
          <source>Indicate target register priority for r0..r3 / r12..r15.</source>
          <target state="translated">r0..r3 / r12..r15의 대상 레지스터 우선 순위를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="d7462beabb9f4e989c2289174fc3246820893fad" translate="yes" xml:space="preserve">
          <source>Indicate to the linker that it should perform a relaxation optimization pass to shorten branches, calls and absolute memory addresses. This option only has an effect when used on the command line for the final link step.</source>
          <target state="translated">분기, 호출 및 절대 메모리 주소를 줄이려면 완화 최적화 패스를 수행해야한다는 것을 링커에 표시하십시오. 이 옵션은 최종 링크 단계의 명령 행에서 사용될 때만 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="6fbdf91a468c725e57cb1a980eb023240915fbde" translate="yes" xml:space="preserve">
          <source>Indicate to the preprocessor that the input file has already been preprocessed. This suppresses things like macro expansion, trigraph conversion, escaped newline splicing, and processing of most directives. The preprocessor still recognizes and removes comments, so that you can pass a file preprocessed with</source>
          <target state="translated">입력 파일이 이미 사전 처리되었음을 전처리기에 표시하십시오. 이것은 매크로 확장, trigraph 변환, 이스케이프 된 개행 접속 및 대부분의 지시문 처리와 같은 것을 억제합니다. 전처리 기는 여전히 주석을 인식하고 제거하므로 사전 처리 된 파일을 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="68073a6ddfa5de56b268fec01a6e6dd0d5ff13eb" translate="yes" xml:space="preserve">
          <source>Indicate whether GCC should generate code to use the optional BWX, CIX, FIX and MAX instruction sets. The default is to use the instruction sets supported by the CPU type specified via</source>
          <target state="translated">GCC가 옵션 BWX, CIX, FIX 및 MAX 명령어 세트를 사용하기 위해 코드를 생성해야하는지 여부를 나타냅니다. 기본값은 다음을 통해 지정된 CPU 유형이 지원하는 명령어 세트를 사용하는 것입니다</target>
        </trans-unit>
        <trans-unit id="be40fe5ecac7625ba1093b2709ac8dc3be8fddd9" translate="yes" xml:space="preserve">
          <source>Indicates that code should be generated for a particular code model for this function. The behavior and permissible arguments are the same as for the command line option</source>
          <target state="translated">이 함수의 특정 코드 모델에 대해 코드를 생성해야 함을 나타냅니다. 동작 및 허용 가능한 인수는 명령 행 옵션과 동일합니다.</target>
        </trans-unit>
        <trans-unit id="b7d51ac61701200efc681b006d913292e4425e50" translate="yes" xml:space="preserve">
          <source>Indicates that no floating-point or Advanced SIMD registers should be used when generating code for this function. If the function explicitly uses floating-point code, then the compiler gives an error. This is the same behavior as that of the command-line option</source>
          <target state="translated">이 함수의 코드를 생성 할 때 부동 소수점 또는 고급 SIMD 레지스터를 사용하지 않아야 함을 나타냅니다. 함수가 명시 적으로 부동 소수점 코드를 사용하는 경우 컴파일러에서 오류가 발생합니다. 이것은 명령 행 옵션의 동작과 동일합니다.</target>
        </trans-unit>
        <trans-unit id="96da1f4a760883d4e09985b3e134953d179eb7dd" translate="yes" xml:space="preserve">
          <source>Indicates that the frame pointer should be omitted for a leaf function call. To keep the frame pointer, the inverse attribute &lt;code&gt;no-omit-leaf-frame-pointer&lt;/code&gt; can be specified. These attributes have the same behavior as the command-line options</source>
          <target state="translated">리프 함수 호출에 대해 프레임 포인터를 생략해야 함을 나타냅니다. 프레임 포인터를 유지하기 위해 역 속성 &lt;code&gt;no-omit-leaf-frame-pointer&lt;/code&gt; 를 지정할 수 있습니다. 이러한 속성은 명령 행 옵션과 동일한 동작을 갖습니다.</target>
        </trans-unit>
        <trans-unit id="fee4cd3e78cab50081b4e8f5d0006d9ed8234377" translate="yes" xml:space="preserve">
          <source>Indicates that the workaround for the Cortex-A53 erratum 835769 should be applied to this function. To explicitly disable the workaround for this function specify the negated form: &lt;code&gt;no-fix-cortex-a53-835769&lt;/code&gt;. This corresponds to the behavior of the command line options</source>
          <target state="translated">Cortex-A53 erratum 835769에 대한 대안이이 기능에 적용되어야 함을 나타냅니다. 이 기능에 대한 대안을 명시 적으로 비활성화하려면 부정 형식을 지정하십시오 : &lt;code&gt;no-fix-cortex-a53-835769&lt;/code&gt; . 이것은 명령 행 옵션의 동작에 해당합니다.</target>
        </trans-unit>
        <trans-unit id="aeccc2135e57d183072ddb1eb0451783b85ba84e" translate="yes" xml:space="preserve">
          <source>Indicates that there is no OS function for flushing the cache.</source>
          <target state="translated">캐시 플러시를위한 OS 기능이 없음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="3b9239fee5592f778e9dc693d4e38e7027710f85" translate="yes" xml:space="preserve">
          <source>Indirect functions cannot be weak. Binutils version 2.20.1 or higher and GNU C Library version 2.11.1 are required to use this feature.</source>
          <target state="translated">간접 기능은 약할 수 없습니다. 이 기능을 사용하려면 Binutils 버전 2.20.1 이상과 GNU C 라이브러리 버전 2.11.1이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="0a81ae1d4de3c814c6c4d2e18a5c858ca409fcdb" translate="yes" xml:space="preserve">
          <source>Indirect jumps and calls on these devices are handled as follows by the compiler and are subject to some limitations:</source>
          <target state="translated">이러한 장치의 간접 점프 및 호출은 컴파일러에서 다음과 같이 처리하며 몇 가지 제한이 있습니다.</target>
        </trans-unit>
        <trans-unit id="9f398b6aa8bfe6a67d6b37c29d0d17a413b5679b" translate="yes" xml:space="preserve">
          <source>Inefficiency: because of both the modified allocation strategy and the generic implementation, code performance is hampered.</source>
          <target state="translated">비 효율성 : 수정 된 할당 전략과 일반적인 구현으로 인해 코드 성능이 저하됩니다.</target>
        </trans-unit>
        <trans-unit id="102a9633450074424f655c619be378c7b15f449d" translate="yes" xml:space="preserve">
          <source>Inform the compiler that the assembler supports &lt;code&gt;.loc&lt;/code&gt; directives. It may then use them for the assembler to generate DWARF2+ line number tables.</source>
          <target state="translated">컴파일러에게 어셈블러가 &lt;code&gt;.loc&lt;/code&gt; 지시문을 지원한다고 알립니다 . 그런 다음 어셈블러에서 DWARF2 + 행 번호 테이블을 생성하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="25aeb41e0e10d4686e4fd03645c7ee0ccf628c50" translate="yes" xml:space="preserve">
          <source>Inform the compiler that the assembler supports &lt;code&gt;view&lt;/code&gt; assignment and reset assertion checking in &lt;code&gt;.loc&lt;/code&gt; directives.</source>
          <target state="translated">컴파일러에 어셈블러가 &lt;code&gt;.loc&lt;/code&gt; 지시문 에서 &lt;code&gt;view&lt;/code&gt; 할당 및 재설정 어설 션 검사를 지원한다고 알립니다 .</target>
        </trans-unit>
        <trans-unit id="b50c3134100dc83deb9c57710a2383b61f03ab15" translate="yes" xml:space="preserve">
          <source>Inhibit all warning messages.</source>
          <target state="translated">모든 경고 메시지를 금지하십시오.</target>
        </trans-unit>
        <trans-unit id="080f1e9a6e2cab41869cd5a7281f008e51e71667" translate="yes" xml:space="preserve">
          <source>Inhibit generation of linemarkers in the output from the preprocessor. This might be useful when running the preprocessor on something that is not C code, and will be sent to a program which might be confused by the linemarkers.</source>
          <target state="translated">전 처리기의 출력에서 ​​라인 마커 생성을 금지합니다. 이것은 C 코드가 아닌 무언가에서 전처리기를 실행할 때 유용 할 수 있으며 라인 마커에 의해 혼동 될 수있는 프로그램으로 전송됩니다.</target>
        </trans-unit>
        <trans-unit id="fa7703731fa04f07d423f5b7d1cd54384f1143c1" translate="yes" xml:space="preserve">
          <source>Initialization of automatic aggregates.</source>
          <target state="translated">자동 집계 초기화</target>
        </trans-unit>
        <trans-unit id="11b16505aae7a8cef6f4bca8519967cba1c19746" translate="yes" xml:space="preserve">
          <source>Initialization of unions. If the initializer is zero, the warning is omitted. This is done under the assumption that the zero initializer in user code appears conditioned on e.g. &lt;code&gt;__STDC__&lt;/code&gt; to avoid missing initializer warnings and relies on default initialization to zero in the traditional C case.</source>
          <target state="translated">노동 조합의 초기화. 이니셜 라이저가 0이면 경고가 생략됩니다. 이는 사용자 코드의 0 이니셜 라이저가 &lt;code&gt;__STDC__&lt;/code&gt; 에 조건이 표시되어 이니셜 라이저 경고 누락을 피하고 기존 C의 경우 기본 초기화를 0으로 가정한다는 가정하에 수행됩니다 .</target>
        </trans-unit>
        <trans-unit id="b60019f47df04ae92897fa912c6748a6013313fa" translate="yes" xml:space="preserve">
          <source>Inline Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20eedc8fe9e9a35e534ae1ecdbec914e536d314f" translate="yes" xml:space="preserve">
          <source>Inline all block moves (such as calls to &lt;code&gt;memcpy&lt;/code&gt; or structure copies) less than or equal to &lt;var&gt;num&lt;/var&gt; bytes. The minimum value for &lt;var&gt;num&lt;/var&gt; is 32 bytes on 32-bit targets and 64 bytes on 64-bit targets. The default value is target-specific.</source>
          <target state="translated">&lt;var&gt;num&lt;/var&gt; 바이트 이하의 모든 블록 이동 (예 : &lt;code&gt;memcpy&lt;/code&gt; 또는 구조 사본 호출)을 인라인하십시오 . &lt;var&gt;num&lt;/var&gt; 의 최소값 은 32 비트 대상에서 32 바이트이고 64 비트 대상에서 64 바이트입니다. 기본값은 대상에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="19b0a018d37cfb0b1d0545d49bb366c506acf3ce" translate="yes" xml:space="preserve">
          <source>Inline also indirect calls that are discovered to be known at compile time thanks to previous inlining. This option has any effect only when inlining itself is turned on by the</source>
          <target state="translated">또한 인라인은 이전 인라인 덕분에 컴파일 타임에 알려진 것으로 알려진 간접 호출입니다. 이 옵션은 인라인 자체가 켜져있을 때만 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="fafe5cb70796ac6434a1aca1419cbd95d727be6c" translate="yes" xml:space="preserve">
          <source>Inline assembler with operands.</source>
          <target state="translated">피연산자가있는 인라인 어셈블러</target>
        </trans-unit>
        <trans-unit id="14e6ac3d090072cf48a1a85932e7b4359138b15c" translate="yes" xml:space="preserve">
          <source>Inline assembler without operands.</source>
          <target state="translated">피연산자가없는 인라인 어셈블러</target>
        </trans-unit>
        <trans-unit id="894882df2e980808e76bd468c0679a5b444a90d9" translate="yes" xml:space="preserve">
          <source>Inline code to invalidate instruction cache entries after setting up nested function trampolines. This option has no effect if</source>
          <target state="translated">중첩 함수 트램폴린을 설정 한 후 명령 캐시 항목을 무효화하는 인라인 코드. 이 옵션은 다음과 같은 경우에는 효과가 없습니다.</target>
        </trans-unit>
        <trans-unit id="f4aac95ae4ed684541a98bc144426b8b8c5823e2" translate="yes" xml:space="preserve">
          <source>Inline constants into the code stream if it can be done in two instructions or less.</source>
          <target state="translated">두 개의 명령 이하로 수행 될 수있는 경우 코드 스트림에 인라인 상수.</target>
        </trans-unit>
        <trans-unit id="116dec339b590ba4e7b045ac4254203eac5168bf" translate="yes" xml:space="preserve">
          <source>Inline functions are typically defined in a header file which can be included in many different compilations. Hopefully they can usually be inlined, but sometimes an out-of-line copy is necessary, if the address of the function is taken or if inlining fails. In general, we emit an out-of-line copy in all translation units where one is needed. As an exception, we only emit inline virtual functions with the vtable, since it always requires a copy.</source>
          <target state="translated">인라인 함수는 일반적으로 여러 다른 컴파일에 포함될 수있는 헤더 파일에 정의됩니다. 바라건대 그들은 일반적으로 인라인 될 수 있지만 때로는 함수의 주소가 취해 지거나 인라인이 실패하는 경우 아웃 라인 사본이 필요할 수 있습니다. 일반적으로, 필요한 모든 번역 단위에서 라인 외부 사본을 내 보냅니다. 예외적으로, 우리는 항상 사본이 필요하기 때문에 vtable을 사용하여 인라인 가상 함수 만 방출합니다.</target>
        </trans-unit>
        <trans-unit id="91795d77f30dd9a95fe0227642128a77b706a436" translate="yes" xml:space="preserve">
          <source>Inline functions marked by &lt;code&gt;always_inline&lt;/code&gt; and functions whose body seems smaller than the function call overhead early before doing</source>
          <target state="translated">&lt;code&gt;always_inline&lt;/code&gt; 으로 표시된 인라인 함수 및 수행하기 전에 함수 호출 오버 헤드보다 본문이 작은 함수</target>
        </trans-unit>
        <trans-unit id="873b9f05fa871d467703c76988bb2508081a72a8" translate="yes" xml:space="preserve">
          <source>Inline parts of functions. This option has any effect only when inlining itself is turned on by the</source>
          <target state="translated">함수의 인라인 부분. 이 옵션은 인라인 자체가 켜져있을 때만 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="6695d9e4d931f3bbf61149758e9dd6a876eef21a" translate="yes" xml:space="preserve">
          <source>Inlineable functions can create unexpected line counts. Line counts are shown for the source code of the inlineable function, but what is shown depends on where the function is inlined, or if it is not inlined at all.</source>
          <target state="translated">인라인 가능한 함수는 예기치 않은 라인 수를 생성 할 수 있습니다. 행 수는 인라인 가능한 함수의 소스 코드에 대해 표시되지만 표시되는 내용은 함수가 인라인 된 위치 또는 전혀 인라인되지 않은 경우에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="d9ba93d99f300a33841b732c50e4886ea39ea97f" translate="yes" xml:space="preserve">
          <source>Inlining is actually controlled by a number of parameters, which may be specified individually by using</source>
          <target state="translated">인라이닝은 실제로 여러 매개 변수에 의해 제어되며,이를 사용하여 개별적으로 지정할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="5482ac6acd5628aa80debf07d0b113dce510f9a8" translate="yes" xml:space="preserve">
          <source>Input constraint strings may not begin with either &amp;lsquo;</source>
          <target state="translated">입력 제약 조건 문자열은 '</target>
        </trans-unit>
        <trans-unit id="b80748d19a1a87bf6f0f8e345598d0900573298f" translate="yes" xml:space="preserve">
          <source>Input constraints can also be digits (for example, &lt;code&gt;&quot;0&quot;&lt;/code&gt;). This indicates that the specified input must be in the same place as the output constraint at the (zero-based) index in the output constraint list. When using &lt;var&gt;asmSymbolicName&lt;/var&gt; syntax for the output operands, you may use these names (enclosed in brackets &amp;lsquo;</source>
          <target state="translated">입력 제한 조건은 숫자 일 수도 있습니다 (예 : &lt;code&gt;&quot;0&quot;&lt;/code&gt; ). 이는 지정된 입력이 출력 제한 조건 목록의 (0부터 시작) 인덱스의 출력 제한 조건과 동일한 위치에 있어야 함을 나타냅니다. 사용하는 경우 &lt;var&gt;asmSymbolicName&lt;/var&gt; 의 출력 피연산자에 대한 구문을, 당신은 '괄호 안에이 이름 (사용할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="dab23b44a9c445e4c1ef121f24288981557e7ceb" translate="yes" xml:space="preserve">
          <source>Input files that don&amp;rsquo;t require compilation are ignored.</source>
          <target state="translated">컴파일이 필요없는 입력 파일은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="9cfdbdf047fb129da10e8b15031d32fae6737df1" translate="yes" xml:space="preserve">
          <source>Input files that don&amp;rsquo;t require preprocessing are ignored.</source>
          <target state="translated">전처리가 필요없는 입력 파일은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="0a9931474c689da17fc13937907d59216f561db0" translate="yes" xml:space="preserve">
          <source>Input operands make values from C variables and expressions available to the assembly code.</source>
          <target state="translated">입력 피연산자는 C 변수 및 표현식의 값을 어셈블리 코드에서 사용할 수있게합니다.</target>
        </trans-unit>
        <trans-unit id="1e2fe59177e98538b3f70c61c4f5e289c840eb88" translate="yes" xml:space="preserve">
          <source>Insert &lt;var&gt;count&lt;/var&gt;&lt;code&gt;NOP&lt;/code&gt; instructions. The number of instructions must be a compile-time integer constant.</source>
          <target state="translated">&lt;var&gt;count&lt;/var&gt; &lt;code&gt;NOP&lt;/code&gt; 명령을 삽입하십시오 . 명령어 수는 컴파일 타임 정수 상수 여야합니다.</target>
        </trans-unit>
        <trans-unit id="80ef9bd4f5c2793b85eb597a6f564354bfd5ad04" translate="yes" xml:space="preserve">
          <source>Insert ENDBR instruction at function entry only via the &lt;code&gt;cf_check&lt;/code&gt; function attribute. This is useful when used with the option</source>
          <target state="translated">&lt;code&gt;cf_check&lt;/code&gt; 함수 속성을 통해서만 함수 입력에 ENDBR 명령어를 삽입하십시오 . 옵션과 함께 사용할 때 유용합니다</target>
        </trans-unit>
        <trans-unit id="7e304b0a6f8c78bdb7728a0243dd358487c2e9b4" translate="yes" xml:space="preserve">
          <source>Insert NOPs to force costly dependent insns into separate groups. Insert &lt;var&gt;number&lt;/var&gt; NOPs to force an insn to a new group.</source>
          <target state="translated">NOP를 삽입하여 비용이 많이 드는 종속 기능을 별도의 그룹으로 만듭니다. &lt;var&gt;number&lt;/var&gt; NOP를 삽입 하여 새 그룹에 대한 정보를 제공하십시오.</target>
        </trans-unit>
        <trans-unit id="5093204ba172ea889ff043021567428c590f67d7" translate="yes" xml:space="preserve">
          <source>Insert NOPs to force costly dependent insns into separate groups. Insert exactly as many NOPs as needed to force an insn to a new group, according to the estimated processor grouping.</source>
          <target state="translated">NOP를 삽입하여 비용이 많이 드는 종속 기능을 별도의 그룹으로 만듭니다. 예상 프로세서 그룹화에 따라 필요한만큼 정확하게 NOP를 삽입하여 새로운 그룹에 대한 정보를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="da911af1e2c13a9407a1ba5438f240e7adaf4534" translate="yes" xml:space="preserve">
          <source>Insert a &amp;lsquo;</source>
          <target state="translated">'</target>
        </trans-unit>
        <trans-unit id="f7312b3d8cfcdef6b49830b93ffae1a5aa1b9a7e" translate="yes" xml:space="preserve">
          <source>Insert a cache barrier before a load or store that might be speculatively executed and that might have side effects even if aborted.</source>
          <target state="translated">추론 적으로 실행될 수 있고 중단 된 경우에도 부작용이있을 수있는로드 또는 저장소 앞에 캐시 장벽을 삽입하십시오.</target>
        </trans-unit>
        <trans-unit id="0d1ec5c206dd0a56248bac70a97eb7b49297f48d" translate="yes" xml:space="preserve">
          <source>Insert a cache barrier before a store that might be speculatively executed and that might have side effects even if aborted.</source>
          <target state="translated">추측 적으로 실행될 수 있고 중단 된 경우에도 부작용이있을 수있는 저장소 앞에 캐시 장벽을 삽입하십시오.</target>
        </trans-unit>
        <trans-unit id="613b69ab72c3cdbf33646040c8aaf33daa5e69f7" translate="yes" xml:space="preserve">
          <source>Insert an ISB instruction into the instruction stream.</source>
          <target state="translated">ISB 명령을 명령 스트림에 삽입하십시오.</target>
        </trans-unit>
        <trans-unit id="698e6e70baffc9a9c2b3857106b77a97d6d36fc3" translate="yes" xml:space="preserve">
          <source>Insert an ISYNC instruction into the instruction stream where &lt;var&gt;addr&lt;/var&gt; is an instruction address for serialization.</source>
          <target state="translated">&lt;var&gt;addr&lt;/var&gt; 이 직렬화를위한 명령어 주소 인 ISYNC 명령어를 명령어 스트림에 삽입하십시오 .</target>
        </trans-unit>
        <trans-unit id="ae82250f19f4a7ef9b7f40de2bc48433366c0b9a" translate="yes" xml:space="preserve">
          <source>Insert bits from &lt;var&gt;bits&lt;/var&gt; into &lt;var&gt;val&lt;/var&gt; and return the resulting value. The nibbles of &lt;var&gt;map&lt;/var&gt; determine how the insertion is performed: Let &lt;var&gt;X&lt;/var&gt; be the &lt;var&gt;n&lt;/var&gt;-th nibble of &lt;var&gt;map&lt;/var&gt;</source>
          <target state="translated">비트의 &lt;var&gt;bits&lt;/var&gt; 를 &lt;var&gt;val&lt;/var&gt; 에 삽입 하고 결과 값을 반환합니다. &lt;var&gt;map&lt;/var&gt; 의 니블에 따라 삽입 수행 방법이 결정 됩니다 . &lt;var&gt;X&lt;/var&gt; 를 &lt;var&gt;map&lt;/var&gt; 의 &lt;var&gt;n&lt;/var&gt; 번째 니블로 설정 합니다.</target>
        </trans-unit>
        <trans-unit id="1b3701c0f8e0fee3d402f64923ea901bb1d7943e" translate="yes" xml:space="preserve">
          <source>Installing GCC automatically creates and installs the fixed header files, by running a program called &lt;code&gt;fixincludes&lt;/code&gt;. Normally, you don&amp;rsquo;t need to pay attention to this. But there are cases where it doesn&amp;rsquo;t do the right thing automatically.</source>
          <target state="translated">GCC를 설치하면 &lt;code&gt;fixincludes&lt;/code&gt; 라는 프로그램을 실행하여 고정 헤더 파일을 자동으로 작성하고 설치합니다 . 일반적으로주의를 기울일 필요는 없습니다. 그러나 올바른 일을 자동으로 수행하지 않는 경우가 있습니다.</target>
        </trans-unit>
        <trans-unit id="e4d7156bb86c9e4e2a11b97b329fef2be7147327" translate="yes" xml:space="preserve">
          <source>Instead of emitting debugging information for a C++ class in only one object file, emit it in all object files using the class. This option should be used only with debuggers that are unable to handle the way GCC normally emits debugging information for classes because using this option increases the size of debugging information by as much as a factor of two.</source>
          <target state="translated">하나의 오브젝트 파일에서만 C ++ 클래스에 대한 디버깅 정보를 내보내는 대신 클래스를 사용하여 모든 오브젝트 파일에서이를 방출하십시오. 이 옵션을 사용하면 디버깅 정보의 크기가 2 배만큼 증가하기 때문에 GCC가 클래스에 대한 디버깅 정보를 정상적으로 내보내는 방식을 처리 할 수없는 디버거에만이 옵션을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="be3fc5710abd7790f590b73876140d19f165f83e" translate="yes" xml:space="preserve">
          <source>Instead of outputting the result of preprocessing, output a rule suitable for &lt;code&gt;make&lt;/code&gt; describing the dependencies of the main source file. The preprocessor outputs one &lt;code&gt;make&lt;/code&gt; rule containing the object file name for that source file, a colon, and the names of all the included files, including those coming from</source>
          <target state="translated">대신 적합한 규칙 전처리 출력 결과 출력 &lt;code&gt;make&lt;/code&gt; 주요 소스 파일의 종속성을 묘사한다. 프리 프로세서 는 해당 소스 파일의 오브젝트 파일 이름, 콜론 및 포함 된 모든 파일의 이름 (포함 된 파일 포함)을 포함하는 하나의 &lt;code&gt;make&lt;/code&gt; 규칙을 출력 합니다.</target>
        </trans-unit>
        <trans-unit id="77341899c1b278a6893d86a8271c991e7d1d0365" translate="yes" xml:space="preserve">
          <source>Instead of the normal output, generate a list of &amp;lsquo;</source>
          <target state="translated">일반 출력 대신 '</target>
        </trans-unit>
        <trans-unit id="a34650e9f39910beff75fbecd84557b57d4a5454" translate="yes" xml:space="preserve">
          <source>Instead, a stub has to be set up, i.e. the function has to be called through a symbol (&lt;code&gt;func_4&lt;/code&gt; in the example):</source>
          <target state="translated">대신 스텁을 설정해야합니다. 예를 들어 함수를 심볼을 통해 호출해야합니다 ( 예 : &lt;code&gt;func_4&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="c7ff7b3be05374bf926227d5a6cce16675add1a0" translate="yes" xml:space="preserve">
          <source>Instruction precision. The trap handler can determine the exact instruction that caused a floating-point exception.</source>
          <target state="translated">명령 정밀도. 트랩 처리기는 부동 소수점 예외를 발생시킨 정확한 명령어를 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6b7ec2b988946f38d8fde29ac1dc412bf003f9ab" translate="yes" xml:space="preserve">
          <source>Instructions and corresponding built-ins may have additional restrictions and/or input/output values manipulated:</source>
          <target state="translated">명령어 및 해당 내장 기능에는 다음과 같은 추가 제한 및 / 또는 입력 / 출력 값이있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="60de57ec73ea7d3697a15749f6ec729f6774747c" translate="yes" xml:space="preserve">
          <source>Instructions and extensions for interfacing C with assembler.</source>
          <target state="translated">C를 어셈블러와 인터페이스하기위한 지침 및 확장.</target>
        </trans-unit>
        <trans-unit id="00371913daeb498043597ab2a3f06503732e4834" translate="yes" xml:space="preserve">
          <source>Instructions may freely access executable sections. This is the default setting.</source>
          <target state="translated">명령은 실행 가능한 섹션에 자유롭게 액세스 할 수 있습니다. 이것이 기본 설정입니다.</target>
        </trans-unit>
        <trans-unit id="728907072b85d2aba92847d49d68ef5c24bb45d9" translate="yes" xml:space="preserve">
          <source>Instructions must not access executable sections. This option can be useful on targets that are configured to have a dual instruction/data SRAM interface but that (unlike the M4K) do not automatically redirect PC-relative loads to the instruction RAM.</source>
          <target state="translated">지침은 실행 가능 섹션에 액세스하면 안됩니다. 이 옵션은 이중 명령어 / 데이터 SRAM 인터페이스를 갖도록 구성되었지만 M4K와 달리 PC 기준로드를 명령어 RAM으로 자동 리디렉션하지 않는 대상에서 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="77c99e564d8632f1532735d88bcf4dbafa41656e" translate="yes" xml:space="preserve">
          <source>Instructions that can address I/O special function registers directly like &lt;code&gt;IN&lt;/code&gt;, &lt;code&gt;OUT&lt;/code&gt;, &lt;code&gt;SBI&lt;/code&gt;, etc. may use a different address as if addressed by an instruction to access RAM like &lt;code&gt;LD&lt;/code&gt; or &lt;code&gt;STS&lt;/code&gt;. This offset depends on the device architecture and has to be subtracted from the RAM address in order to get the respective I/O address.</source>
          <target state="translated">&lt;code&gt;IN&lt;/code&gt; , &lt;code&gt;OUT&lt;/code&gt; , &lt;code&gt;SBI&lt;/code&gt; 등과 같은 I / O 특수 기능 레지스터를 직접 지정할 수있는 명령어는 &lt;code&gt;LD&lt;/code&gt; 또는 &lt;code&gt;STS&lt;/code&gt; 와 같은 RAM에 액세스하기위한 명령어로 주소가 지정된 것처럼 다른 주소를 사용할 수 있습니다 . 이 오프셋은 장치 아키텍처에 따라 다르며 각 I / O 주소를 얻으려면 RAM 주소에서 빼야합니다.</target>
        </trans-unit>
        <trans-unit id="cfee5983fd7c9714339e56871463e3d57aa0eec5" translate="yes" xml:space="preserve">
          <source>Instructions that initiate or test completion of DMA must not be reordered with respect to loads and stores of the memory that is being accessed. With</source>
          <target state="translated">DMA 완료를 시작 또는 테스트하는 명령은 액세스중인 메모리의로드 및 저장과 관련하여 순서를 다시 지정해서는 안됩니다. 와</target>
        </trans-unit>
        <trans-unit id="1ce9914ad99ce6285279f0d2872eb791125e8521" translate="yes" xml:space="preserve">
          <source>Instrument comparison operation (&amp;lt;, &amp;lt;=, &amp;gt;, &amp;gt;=) with pointer operands. The option must be combined with either</source>
          <target state="translated">포인터 피연산자를 사용한 계측기 비교 작업 (&amp;lt;, &amp;lt;=,&amp;gt;,&amp;gt; =). 옵션은 다음 중 하나와 결합되어야합니다</target>
        </trans-unit>
        <trans-unit id="f9387cf45ec340cf769d2b6bfd22820dfe0ee0f4" translate="yes" xml:space="preserve">
          <source>Instrument function exit in -pg -mfentry instrumented functions with call to specified function. This only instruments true returns ending with ret, but not sibling calls ending with jump. Valid types are &lt;var&gt;none&lt;/var&gt; to not instrument, &lt;var&gt;call&lt;/var&gt; to generate a call to __return__, or &lt;var&gt;nop5&lt;/var&gt; to generate a 5 byte nop.</source>
          <target state="translated">지정된 기능을 호출하여 -pg -mfentry 인스트루먼트 된 기능에서 계측기 기능 종료 이것은 ret로 끝나는 true 반환 만 계측하지만 jump로 끝나는 형제 호출은 아닙니다. 유효한 유형이없는 &lt;var&gt;none&lt;/var&gt; 하지 악기, &lt;var&gt;call&lt;/var&gt; __return__에 통화 또는 생성하는 &lt;var&gt;nop5&lt;/var&gt; 5 바이트 NOP를 생성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c422d699b98760b3dc7f3d9f1edcf402a69024bc" translate="yes" xml:space="preserve">
          <source>Instrument only functions from files where names do not match all the regular expressions (separated by a semi-colon).</source>
          <target state="translated">계측기는 이름이 모든 정규식과 일치하지 않는 파일 (세미콜론으로 구분)에서만 작동합니다.</target>
        </trans-unit>
        <trans-unit id="65fc966a722098cb273080c59ea2c31dc9cc3d92" translate="yes" xml:space="preserve">
          <source>Instrument only functions from files where names match any regular expression (separated by a semi-colon).</source>
          <target state="translated">계측기는 이름이 정규식과 일치하는 파일 (세미콜론으로 구분)에서만 작동합니다.</target>
        </trans-unit>
        <trans-unit id="55915d652d64c067aae4ac13787cd5f4e2697a1d" translate="yes" xml:space="preserve">
          <source>Instrument subtraction with pointer operands. The option must be combined with either</source>
          <target state="translated">포인터 피연산자가있는 계측기 빼기. 옵션은 다음 중 하나와 결합되어야합니다</target>
        </trans-unit>
        <trans-unit id="f97527e405387e5a9385fec8790b4168dd1d8deb" translate="yes" xml:space="preserve">
          <source>Int constant that is the element number of the 64-bit scalar in a vector.</source>
          <target state="translated">Int 상수로, 벡터에서 64 비트 스칼라의 요소 번호입니다.</target>
        </trans-unit>
        <trans-unit id="2c6ce795cf7dec61b5fb3d9cd78c430001b2fa7a" translate="yes" xml:space="preserve">
          <source>Int constant that is the element number that the MFVSRLD instruction. targets.</source>
          <target state="translated">Int 상수는 MFVSRLD 명령의 요소 번호입니다. 목표.</target>
        </trans-unit>
        <trans-unit id="da3ed23012cb8789d59d48ce6671ae83734c67c3" translate="yes" xml:space="preserve">
          <source>Integer constant -1</source>
          <target state="translated">정수 상수 -1</target>
        </trans-unit>
        <trans-unit id="4c803cf324e7329fee610f61a0c7d3b490694d57" translate="yes" xml:space="preserve">
          <source>Integer constant -1^20..1^19.</source>
          <target state="translated">정수 상수 -1 ^ 20..1 ^ 19.</target>
        </trans-unit>
        <trans-unit id="2d5c0333af76728cebb79e955757484473872b82" translate="yes" xml:space="preserve">
          <source>Integer constant 0</source>
          <target state="translated">정수 상수 0</target>
        </trans-unit>
        <trans-unit id="ec0deff2b158ad4cb0e8bfb80bf58b629d319506" translate="yes" xml:space="preserve">
          <source>Integer constant 1-4.</source>
          <target state="translated">정수 상수 1-4.</target>
        </trans-unit>
        <trans-unit id="f8ce91b7924266e877123b863072a4c805b14605" translate="yes" xml:space="preserve">
          <source>Integer constant 1.</source>
          <target state="translated">정수 상수</target>
        </trans-unit>
        <trans-unit id="1c45cb8e2489b4f0de7b30a15f87854cc65bcd1c" translate="yes" xml:space="preserve">
          <source>Integer constant 31</source>
          <target state="translated">정수 상수 31</target>
        </trans-unit>
        <trans-unit id="8a25d342105560c6220c4d21018dbd66f4909ac2" translate="yes" xml:space="preserve">
          <source>Integer constant 32</source>
          <target state="translated">정수 상수 32</target>
        </trans-unit>
        <trans-unit id="0886d513058a9038f440a00ef02c6efc4d8b2b92" translate="yes" xml:space="preserve">
          <source>Integer constant 63</source>
          <target state="translated">정수 상수 63</target>
        </trans-unit>
        <trans-unit id="e5d7234c4cec0b69e9a17de13e13f7813e3fe736" translate="yes" xml:space="preserve">
          <source>Integer constant in the range -16 &amp;hellip; 15.</source>
          <target state="translated">-16&amp;hellip; 15 범위의 정수 상수.</target>
        </trans-unit>
        <trans-unit id="1565cd95bbecf4f27341ea540e96d5e245a3ed87" translate="yes" xml:space="preserve">
          <source>Integer constant in the range -31 &amp;hellip; 0.</source>
          <target state="translated">-31&amp;hellip; 0 범위의 정수 상수.</target>
        </trans-unit>
        <trans-unit id="61fb232c331445cfab1e14db8fe240ad44ae23ee" translate="yes" xml:space="preserve">
          <source>Integer constant in the range -32768 &amp;hellip; 32767.</source>
          <target state="translated">-32768&amp;hellip; 32767 범위의 정수 상수.</target>
        </trans-unit>
        <trans-unit id="41e8e6f2af1c63e52d1b0b7e46462d22a537cb51" translate="yes" xml:space="preserve">
          <source>Integer constant in the range -65535 .. -1 (16-bit negative immediate)</source>
          <target state="translated">-65535 .. -1 범위의 정수 상수 (16 비트 음수 즉시)</target>
        </trans-unit>
        <trans-unit id="61d203086fb27478ca235c1af13878c2c9eb4b69" translate="yes" xml:space="preserve">
          <source>Integer constant in the range 0 &amp;hellip; 15.</source>
          <target state="translated">0&amp;hellip; 15 범위의 정수입니다.</target>
        </trans-unit>
        <trans-unit id="23ba3688657355d36ab63c4cf135962636a98aed" translate="yes" xml:space="preserve">
          <source>Integer constant in the range 0 &amp;hellip; 31, for 32-bit shifts.</source>
          <target state="translated">32 비트 시프트의 경우 0 ~ 31 범위의 정수입니다.</target>
        </trans-unit>
        <trans-unit id="8a5ce6a50ce7c04ba5c11f9521a26c518ec2f5a9" translate="yes" xml:space="preserve">
          <source>Integer constant in the range 0 &amp;hellip; 31.</source>
          <target state="translated">0&amp;hellip; 31 범위의 정수입니다.</target>
        </trans-unit>
        <trans-unit id="139ee936a79aaecfdde7d9044eb41363a8396bbf" translate="yes" xml:space="preserve">
          <source>Integer constant in the range 0 &amp;hellip; 63, for 64-bit shifts.</source>
          <target state="translated">64 비트 시프트의 경우 0 ~ 63 범위의 정수입니다.</target>
        </trans-unit>
        <trans-unit id="dbc4a22dc2be34fbbf4cb0f86cc5f6d5bed6c2db" translate="yes" xml:space="preserve">
          <source>Integer constant in the range 0 &amp;hellip; 65535.</source>
          <target state="translated">0&amp;hellip; 65535 범위의 정수입니다.</target>
        </trans-unit>
        <trans-unit id="c3baf5f98ff3b5c0b48fedbf2ab36c7ce3d9b574" translate="yes" xml:space="preserve">
          <source>Integer constant in the range 0 .. 65535 (16-bit immediate)</source>
          <target state="translated">0 .. 65535 범위의 정수 상수 (16 비트 즉시)</target>
        </trans-unit>
        <trans-unit id="2eb542fcd23b06c609f45ce695bf858099197e4a" translate="yes" xml:space="preserve">
          <source>Integer constant in the range 1 .. 31 (5-bit immediate)</source>
          <target state="translated">1.31 범위의 정수 상수 (5 비트 즉시)</target>
        </trans-unit>
        <trans-unit id="3a4a963907c182d517ccab65869d0178be683b92" translate="yes" xml:space="preserve">
          <source>Integer constant in the range 1 to 4 for &lt;code&gt;shladd&lt;/code&gt; instruction</source>
          <target state="translated">&lt;code&gt;shladd&lt;/code&gt; 명령어의 경우 1 ~ 4 범위의 정수</target>
        </trans-unit>
        <trans-unit id="ed5ad237aa0c579aead190a4dde0d33acad46194" translate="yes" xml:space="preserve">
          <source>Integer constant in the range &lt;em&gt;-2^{20}&lt;/em&gt; &amp;hellip; &lt;em&gt;2^{20} - 1&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;-2 ^ {20}&lt;/em&gt; &amp;hellip; &lt;em&gt;2 ^ {20} &lt;/em&gt;&lt;em&gt;-1&lt;/em&gt; 범위의 정수 입니다.</target>
        </trans-unit>
        <trans-unit id="39cf676267018369b0349969938433de83ddfa88" translate="yes" xml:space="preserve">
          <source>Integer constant that can be deposited with a &lt;code&gt;zdepi&lt;/code&gt; instruction</source>
          <target state="translated">&lt;code&gt;zdepi&lt;/code&gt; 명령어 로 저장 될 수있는 정수 상수</target>
        </trans-unit>
        <trans-unit id="583d118a63d65e988fe09c84c0b83aa8b38f16dd" translate="yes" xml:space="preserve">
          <source>Integer constant that can be loaded with a &lt;code&gt;ldil&lt;/code&gt; instruction</source>
          <target state="translated">&lt;code&gt;ldil&lt;/code&gt; 명령어 로로드 할 수있는 정수 상수</target>
        </trans-unit>
        <trans-unit id="d48f93a4a200fa761b79e46b5d40a57efc3b0da5" translate="yes" xml:space="preserve">
          <source>Integer constant that can be the operand of an ADDA or a SUBA insn.</source>
          <target state="translated">ADDA 또는 SUBA insn의 피연산자가 될 수있는 정수 상수.</target>
        </trans-unit>
        <trans-unit id="4a8ae929e4e263dbb7f6fd66766fe30d1987a3a1" translate="yes" xml:space="preserve">
          <source>Integer constant that can be used for &lt;code&gt;and&lt;/code&gt; operations in &lt;code&gt;depi&lt;/code&gt; and &lt;code&gt;extru&lt;/code&gt; instructions</source>
          <target state="translated">에 사용할 수있는 정수 상수 &lt;code&gt;and&lt;/code&gt; 의 작업 &lt;code&gt;depi&lt;/code&gt; 및 &lt;code&gt;extru&lt;/code&gt; 지침</target>
        </trans-unit>
        <trans-unit id="2dba2c70cd49d15853d2fcbcd40ffda61228a146" translate="yes" xml:space="preserve">
          <source>Integer constant that can be used with a 32-bit logical instruction</source>
          <target state="translated">32 비트 논리 명령어와 함께 사용할 수있는 정수 상수</target>
        </trans-unit>
        <trans-unit id="8b060ea2730a272f1b73ae50c5eba4cb144cbe70" translate="yes" xml:space="preserve">
          <source>Integer constant that can be used with a 64-bit logical instruction</source>
          <target state="translated">64 비트 논리 명령어와 함께 사용할 수있는 정수 상수</target>
        </trans-unit>
        <trans-unit id="b5725eeea2176684ac75dce07a938b4978d11776" translate="yes" xml:space="preserve">
          <source>Integer constant that fits in one signed byte when incremented (-129 &amp;hellip; 126), but excluding -1.</source>
          <target state="translated">증분 될 때 부호있는 1 바이트 (-129&amp;hellip; 126)이지만 -1을 제외한 정수입니다.</target>
        </trans-unit>
        <trans-unit id="3b5d9aff7d40b143bd6daff2c6a766259ab8b1fb" translate="yes" xml:space="preserve">
          <source>Integer constant that fits in one signed byte when incremented by one (-129 &amp;hellip; 126).</source>
          <target state="translated">1 씩 증가 할 때 하나의 부호있는 바이트에 맞는 정수 상수 (-129&amp;hellip; 126).</target>
        </trans-unit>
        <trans-unit id="51f11e6766d50aacca9af72d19a2ad4ee44d8420" translate="yes" xml:space="preserve">
          <source>Integer constant that has all 1 bits consecutive and starting at bit 0.</source>
          <target state="translated">1 비트가 모두 연속적이고 비트 0에서 시작하는 정수 상수.</target>
        </trans-unit>
        <trans-unit id="5b3c28e6f072c668f6a58d9fd92384f1db7f2163" translate="yes" xml:space="preserve">
          <source>Integer constant that is a byte tiled out eight times.</source>
          <target state="translated">8 번 타일 된 바이트 인 정수 상수.</target>
        </trans-unit>
        <trans-unit id="b7536bc6ddcc73d7874ea428acf5799f76f79b75" translate="yes" xml:space="preserve">
          <source>Integer constant that is a byte tiled out four times.</source>
          <target state="translated">4 번 타일 된 바이트 인 정수 상수.</target>
        </trans-unit>
        <trans-unit id="9097601fede0f9d62a8556f7fb948f72c7e42669" translate="yes" xml:space="preserve">
          <source>Integer constant that is a sign-extended byte tiled out as four shorts.</source>
          <target state="translated">4 개의 short로 바둑판 식으로 배열 된 부호 확장 바이트 인 정수 상수.</target>
        </trans-unit>
        <trans-unit id="a1aafaaeb369802b9c5b5f7500539f8ecf40fe8f" translate="yes" xml:space="preserve">
          <source>Integer constant that is a sign-extended byte tiled out as two shorts.</source>
          <target state="translated">부호 확장 된 바이트 인 정수 상수는 두 개의 short로 바둑판 식으로 배열됩니다.</target>
        </trans-unit>
        <trans-unit id="f7398c389ada177deaf12a34ecfa3423b7af8637" translate="yes" xml:space="preserve">
          <source>Integer constant that is a valid mask for the clr instruction.</source>
          <target state="translated">clr 명령에 유효한 마스크 인 정수 상수입니다.</target>
        </trans-unit>
        <trans-unit id="b75d0ad68a107d1647765566cd4e4331ec877550" translate="yes" xml:space="preserve">
          <source>Integer constant that is a valid mask for the set instruction.</source>
          <target state="translated">설정 명령에 유효한 마스크 인 정수 상수.</target>
        </trans-unit>
        <trans-unit id="6deb8c44627243fffa30bdcea50916656d673936" translate="yes" xml:space="preserve">
          <source>Integer constant that is valid as an immediate operand in a 32-bit &lt;code&gt;MOV&lt;/code&gt; pseudo instruction. The &lt;code&gt;MOV&lt;/code&gt; may be assembled to one of several different machine instructions depending on the value</source>
          <target state="translated">32 비트 &lt;code&gt;MOV&lt;/code&gt; 의사 명령어 에서 즉시 피연산자로 유효한 정수입니다 . &lt;code&gt;MOV&lt;/code&gt; 은 값에 따라 여러 가지 기계 명령어 중 하나에 조립 될 수있다</target>
        </trans-unit>
        <trans-unit id="4a87d8c398f8df47aa819b51612d3b210718b178" translate="yes" xml:space="preserve">
          <source>Integer constant that is valid as an immediate operand in a 64-bit &lt;code&gt;MOV&lt;/code&gt; pseudo instruction</source>
          <target state="translated">64 비트 &lt;code&gt;MOV&lt;/code&gt; 의사 명령어 에서 즉시 피연산자로 유효한 정수 상수</target>
        </trans-unit>
        <trans-unit id="835371f7edd442337ddaf558ccf33428685fd64a" translate="yes" xml:space="preserve">
          <source>Integer constant that is valid as an immediate operand in a &lt;code&gt;SUB&lt;/code&gt; instruction (once negated)</source>
          <target state="translated">&lt;code&gt;SUB&lt;/code&gt; 명령어 에서 즉시 피연산자로 유효한 정수 상수 (한 번 부정)</target>
        </trans-unit>
        <trans-unit id="b60b6a4c6d01417f64595177f963b401572f1d12" translate="yes" xml:space="preserve">
          <source>Integer constant that is valid as an immediate operand in an &lt;code&gt;ADD&lt;/code&gt; instruction</source>
          <target state="translated">&lt;code&gt;ADD&lt;/code&gt; 명령어 에서 즉시 피연산자로 유효한 정수 상수</target>
        </trans-unit>
        <trans-unit id="87c79859b391fe886f4983ce7831a89b4adb68fe" translate="yes" xml:space="preserve">
          <source>Integer constant valid for BccI instructions</source>
          <target state="translated">BccI 명령어에 유효한 정수 상수</target>
        </trans-unit>
        <trans-unit id="85ce5abeb1e3fd38a5870ac5e6ed6f9d365a68ef" translate="yes" xml:space="preserve">
          <source>Integer constant whose value plus one is a power of 2</source>
          <target state="translated">값에 1을 더한 2의 정수 상수</target>
        </trans-unit>
        <trans-unit id="a5c600b3e3e20d77f480eccf6ab83a9d32d44088" translate="yes" xml:space="preserve">
          <source>Integer constant zero</source>
          <target state="translated">정수 상수 영</target>
        </trans-unit>
        <trans-unit id="dbf06f652fea58e9dd29649e240ec804969a5dd2" translate="yes" xml:space="preserve">
          <source>Integer constants 0 through 3; shifts by these amounts are handled as multiple single-bit shifts rather than a single variable-length shift.</source>
          <target state="translated">정수 상수 0-3; 이러한 양의 시프트는 단일 가변 길이 시프트가 아닌 다중 단일 비트 시프트로 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="8ac2f4ad59dbab77a56696249eb809853e9615f0" translate="yes" xml:space="preserve">
          <source>Integer constants can be written as binary constants, consisting of a sequence of &amp;lsquo;</source>
          <target state="translated">정수 상수는 '의 순서로 구성된 이진 상수로 쓸 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f41a13c6db375bed842d479bfe5b3e0010d33bf8" translate="yes" xml:space="preserve">
          <source>Integer in the range -4095 to 4095</source>
          <target state="translated">-4095 ~ 4095 범위의 정수</target>
        </trans-unit>
        <trans-unit id="c3fa9d65e6a7c1536f875f2bf419adf966cd23e9" translate="yes" xml:space="preserve">
          <source>Integer in the range -8 to -1</source>
          <target state="translated">-8에서 -1 범위의 정수</target>
        </trans-unit>
        <trans-unit id="3328ae7578dc6597eb774fb278c9e73ac29b9573" translate="yes" xml:space="preserve">
          <source>Integer in the range 0 to 32</source>
          <target state="translated">0에서 32 사이의 정수</target>
        </trans-unit>
        <trans-unit id="e2a38f8fa6e98406bcdf4c312d8238e5cfaf61be" translate="yes" xml:space="preserve">
          <source>Integer in the range 1 to 8</source>
          <target state="translated">1에서 8 사이의 정수</target>
        </trans-unit>
        <trans-unit id="a9929ab1a333ba5cc9ace240e37dbafefb59c7f4" translate="yes" xml:space="preserve">
          <source>Integer sized structures and unions are returned in register &lt;code&gt;r10&lt;/code&gt;.</source>
          <target state="translated">정수 크기의 구조 및 공용체는 레지스터 &lt;code&gt;r10&lt;/code&gt; 에 반환됩니다 .</target>
        </trans-unit>
        <trans-unit id="aeae103003a2aa38881e355310bf8ec9d365ac20" translate="yes" xml:space="preserve">
          <source>Integer sized structures and unions are returned via a memory pointer rather than a register.</source>
          <target state="translated">정수 크기 구조 및 공용체는 레지스터가 아닌 메모리 포인터를 통해 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="ec38048bade6f626a61ac1474e93bfb38c7df1c6" translate="yes" xml:space="preserve">
          <source>Integer that is valid as an immediate operand for a custom instruction opcode. Range 0 to 255.</source>
          <target state="translated">사용자 정의 명령어 opcode의 즉각적인 피연산자로 유효한 정수입니다. 범위는 0 ~ 255입니다.</target>
        </trans-unit>
        <trans-unit id="fe9f5b3e08a16acbb4c74692fda365cc43d2472f" translate="yes" xml:space="preserve">
          <source>Integer that is valid as an immediate operand for a shift instruction. Range 0 to 31.</source>
          <target state="translated">시프트 명령에 대한 즉각적인 피연산자로 유효한 정수입니다. 범위는 0 ~ 31입니다.</target>
        </trans-unit>
        <trans-unit id="890df9207d827aca96b399580bd0f8412e42f7e4" translate="yes" xml:space="preserve">
          <source>Integer that is valid as an immediate operand for only the value 0. Can be used in conjunction with the format modifier &lt;code&gt;z&lt;/code&gt; to use &lt;code&gt;r0&lt;/code&gt; instead of &lt;code&gt;0&lt;/code&gt; in the assembly output.</source>
          <target state="translated">값 0에 대해서만 즉각적인 피연산자로 유효한 정수 . 어셈블리 출력에서 &lt;code&gt;0&lt;/code&gt; 대신 &lt;code&gt;r0&lt;/code&gt; 을 사용하기 위해 형식 수정 자 &lt;code&gt;z&lt;/code&gt; 와 함께 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="96f19b7b3636f22386cbe0a9f69dade2dd82e04c" translate="yes" xml:space="preserve">
          <source>Integer that is valid as an immediate operand in a data processing instruction. That is, an integer in the range 0 to 255 rotated by a multiple of 2</source>
          <target state="translated">데이터 처리 명령에서 즉시 피연산자로 유효한 정수입니다. 즉, 0에서 255 사이의 정수는 2의 배수로 회전합니다.</target>
        </trans-unit>
        <trans-unit id="ac46ec6d366341fdb4af14310403ae3145f3b15e" translate="yes" xml:space="preserve">
          <source>Integer that is valid as an immediate operand in an instruction taking a signed 16-bit number. Range -32768 to 32767.</source>
          <target state="translated">부호있는 16 비트 숫자를받는 명령에서 즉시 피연산자로 유효한 정수입니다. 범위는 -32768 ~ 32767입니다.</target>
        </trans-unit>
        <trans-unit id="498c2e8d0733c4db6411b6bc3ce46dadd5e77698" translate="yes" xml:space="preserve">
          <source>Integer that is valid as an immediate operand in an instruction taking an unsigned 16-bit number. Range 0 to 65535.</source>
          <target state="translated">부호없는 16 비트 숫자를받는 명령에서 즉시 피연산자로 유효한 정수입니다. 범위는 0-65535입니다.</target>
        </trans-unit>
        <trans-unit id="e29f49d17b7fc198ce0fa7cb4201b18268e8d536" translate="yes" xml:space="preserve">
          <source>Integer that is valid as an immediate operand in an instruction taking only the upper 16-bits of a 32-bit number. Range 32-bit numbers with the lower 16-bits being 0.</source>
          <target state="translated">32 비트 숫자의 상위 16 비트 만 사용하는 명령에서 즉시 피연산자로 유효한 정수입니다. 하위 16 비트가 0 인 32 비트 숫자의 범위입니다.</target>
        </trans-unit>
        <trans-unit id="ef774527e73685dd482562595abea32f82ae8d26" translate="yes" xml:space="preserve">
          <source>Integer that satisfies constraint &amp;lsquo;</source>
          <target state="translated">제한 조건을 만족하는 정수 '</target>
        </trans-unit>
        <trans-unit id="cd276dc30e78674723811469b75093e4347a5ec8" translate="yes" xml:space="preserve">
          <source>Integer zero.</source>
          <target state="translated">정수 0.</target>
        </trans-unit>
        <trans-unit id="02a8d3d0cb0f8a8a1f06403c05ed166f02853b82" translate="yes" xml:space="preserve">
          <source>Integer/Floating point constant that can be loaded into a register using three instructions</source>
          <target state="translated">세 개의 명령어를 사용하여 레지스터에로드 할 수있는 정수 / 부동 소수점 상수</target>
        </trans-unit>
        <trans-unit id="96638e8b977a410fa8a46154d5e4a6ec900c666f" translate="yes" xml:space="preserve">
          <source>Integers valid for a moveq followed by a swap</source>
          <target state="translated">moveq에 유효한 정수와 스왑</target>
        </trans-unit>
        <trans-unit id="d5c9a136f34c3dd6a7b63f408e1d675a9e1d38b5" translate="yes" xml:space="preserve">
          <source>Integers valid for mvq</source>
          <target state="translated">mvq에 유효한 정수</target>
        </trans-unit>
        <trans-unit id="62e557d83b66a9b174581d03e3369a916272f333" translate="yes" xml:space="preserve">
          <source>Integers valid for mvs</source>
          <target state="translated">mvs에 유효한 정수</target>
        </trans-unit>
        <trans-unit id="f4c85b8fad56b772bc4edffa020d9ee37f46fcc9" translate="yes" xml:space="preserve">
          <source>Integers valid for mvz</source>
          <target state="translated">mvz에 유효한 정수</target>
        </trans-unit>
        <trans-unit id="813e6a224069c7c2d70896d18ba42a603d4d9749" translate="yes" xml:space="preserve">
          <source>Integrate functions into their callers when their body is smaller than expected function call code (so overall size of program gets smaller). The compiler heuristically decides which functions are simple enough to be worth integrating in this way. This inlining applies to all functions, even those not declared inline.</source>
          <target state="translated">본문이 예상 함수 호출 코드보다 작을 때 호출자에게 함수를 통합하십시오 (따라서 프로그램의 전체 크기가 작아짐). 컴파일러는 이러한 방식으로 통합 할 가치가있는 기능을 간결하게 결정합니다. 이 인라인은 모든 함수에 적용되며 인라인으로 선언되지 않은 함수에도 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="e91f1a6f03354a5b4184e1f82704c900a6e46315" translate="yes" xml:space="preserve">
          <source>Intel Atom Bonnell CPU.</source>
          <target state="translated">인텔 아톰 보넬 CPU.</target>
        </trans-unit>
        <trans-unit id="e74ed473994f92acf9d6f6cf74055640eea6c5fe" translate="yes" xml:space="preserve">
          <source>Intel Atom CPU.</source>
          <target state="translated">인텔 아톰 CPU.</target>
        </trans-unit>
        <trans-unit id="98be980f2e14c7ddb3a22e21977f5c70a3b827ac" translate="yes" xml:space="preserve">
          <source>Intel Atom Goldmont CPU.</source>
          <target state="translated">인텔 아톰 골드 몬트 CPU.</target>
        </trans-unit>
        <trans-unit id="8826cac9bbaea239ec6b025d2e96062e97854111" translate="yes" xml:space="preserve">
          <source>Intel Atom Goldmont Plus CPU.</source>
          <target state="translated">인텔 아톰 골드 몬트 플러스 CPU.</target>
        </trans-unit>
        <trans-unit id="a870596d824025354ebffc8dc4c34386d2eeee36" translate="yes" xml:space="preserve">
          <source>Intel Atom Silvermont CPU.</source>
          <target state="translated">인텔 아톰 실버 몬트 CPU.</target>
        </trans-unit>
        <trans-unit id="19971c3133f23a6216254229cc2f489858e4b628" translate="yes" xml:space="preserve">
          <source>Intel Atom Tremont CPU.</source>
          <target state="translated">인텔 아톰 트레 몬트 CPU.</target>
        </trans-unit>
        <trans-unit id="753d5fc029292ebb3d94e473e03912bd930c9f2d" translate="yes" xml:space="preserve">
          <source>Intel Bonnell CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3 and SSSE3 instruction set support.</source>
          <target state="translated">64 비트 확장, MOVBE, MMX, SSE, SSE2, SSE3 및 SSSE3 명령어 세트를 지원하는 Intel Bonnell CPU.</target>
        </trans-unit>
        <trans-unit id="7edbccc518975fa2abcfd847cddd45d3bdf2e5eb" translate="yes" xml:space="preserve">
          <source>Intel Broadwell CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA, BMI, BMI2, F16C, RDSEED, ADCX and PREFETCHW instruction set support.</source>
          <target state="translated">64 비트 확장 기능이있는 Intel Broadwell CPU, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA, BMI, BMI2, F16C , RDSEED, ADCX 및 PREFETCHW 명령 세트 지원.</target>
        </trans-unit>
        <trans-unit id="2c6d2ee594a13260b5d6fa3f46182be446bfcf73" translate="yes" xml:space="preserve">
          <source>Intel CPU.</source>
          <target state="translated">인텔 CPU.</target>
        </trans-unit>
        <trans-unit id="b3c18e4c2ec250a1137d5aca17aa4c1bc104e36c" translate="yes" xml:space="preserve">
          <source>Intel Cannonlake Server CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, PKU, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA, BMI, BMI2, F16C, RDSEED, ADCX, PREFETCHW, CLFLUSHOPT, XSAVEC, XSAVES, AVX512F, AVX512VL, AVX512BW, AVX512DQ, AVX512CD, AVX512VBMI, AVX512IFMA, SHA and UMIP instruction set support.</source>
          <target state="translated">64 비트 확장, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, PKU, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA, BMI, Intel Cannonlake 서버 CPU BMI2, F16C, RDSEED, ADCX, PREFETCHW, CLFLUSHOPT, XSAVEC, XSAVES, AVX512F, AVX512VL, AVX512BW, AVX512DQ, AVX512CD, AVX512VBMI, AVX512IFMA, SHA 및 UMIP 명령 세트 지원.</target>
        </trans-unit>
        <trans-unit id="d0663fbf8e5631514b2db57500466ab8f139387f" translate="yes" xml:space="preserve">
          <source>Intel Cascadelake CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, PKU, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA, BMI, BMI2, F16C, RDSEED, ADCX, PREFETCHW, CLFLUSHOPT, XSAVEC, XSAVES, AVX512F, CLWB, AVX512VL, AVX512BW, AVX512DQ, AVX512CD and AVX512VNNI instruction set support.</source>
          <target state="translated">64 비트 확장 기능이있는 Intel Cascadelake CPU, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, PKU, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA, BMI, BMI2 , F16C, RDSEED, ADCX, PREFETCHW, CLFLUSHOPT, XSAVEC, XSAVES, AVX512F, CLWB, AVX512VL, AVX512BW, AVX512DQ, AVX512CD 및 AVX512VNNI 명령 세트 지원.</target>
        </trans-unit>
        <trans-unit id="9e3cc9cc4cb7f234d7785740a07261c4e8d9725a" translate="yes" xml:space="preserve">
          <source>Intel Core 2 CPU with 64-bit extensions, MMX, SSE, SSE2, SSE3 and SSSE3 instruction set support.</source>
          <target state="translated">64 비트 확장, MMX, SSE, SSE2, SSE3 및 SSSE3 명령어 세트 지원 인텔 코어 2 CPU.</target>
        </trans-unit>
        <trans-unit id="b2638689948cd6d31eb928296bcce10234faa67e" translate="yes" xml:space="preserve">
          <source>Intel Core 2 CPU.</source>
          <target state="translated">인텔 코어 2 CPU.</target>
        </trans-unit>
        <trans-unit id="38efa0dcd9f562f810c407371ffbbef6853b6616" translate="yes" xml:space="preserve">
          <source>Intel Core i7 Broadwell CPU.</source>
          <target state="translated">인텔 코어 i7 브로드 웰 CPU.</target>
        </trans-unit>
        <trans-unit id="4f5c6a80eb767f97a639af9b2720c1cc86c9275f" translate="yes" xml:space="preserve">
          <source>Intel Core i7 CPU.</source>
          <target state="translated">인텔 코어 i7 CPU.</target>
        </trans-unit>
        <trans-unit id="c55caad40af35ad68ecaee11878542f389c89a74" translate="yes" xml:space="preserve">
          <source>Intel Core i7 Cannon Lake CPU.</source>
          <target state="translated">인텔 코어 i7 캐논 레이크 CPU.</target>
        </trans-unit>
        <trans-unit id="c4ed472847cb3eceff148fc5b94183b8db29b19b" translate="yes" xml:space="preserve">
          <source>Intel Core i7 Cascadelake CPU.</source>
          <target state="translated">Intel Core i7 Cascadelake CPU.</target>
        </trans-unit>
        <trans-unit id="b32d6db4dff1e6d6530b2575922d42b9b045c652" translate="yes" xml:space="preserve">
          <source>Intel Core i7 Haswell CPU.</source>
          <target state="translated">인텔 코어 i7 Haswell CPU.</target>
        </trans-unit>
        <trans-unit id="353db5d3e634aa88ed2d6ae57d1bb0aacb9cfa2b" translate="yes" xml:space="preserve">
          <source>Intel Core i7 Ice Lake Client CPU.</source>
          <target state="translated">인텔 코어 i7 아이스 레이크 클라이언트 CPU.</target>
        </trans-unit>
        <trans-unit id="37c78089650622a8c6a999e31d07bd906914786c" translate="yes" xml:space="preserve">
          <source>Intel Core i7 Ice Lake Server CPU.</source>
          <target state="translated">인텔 코어 i7 아이스 레이크 서버 CPU.</target>
        </trans-unit>
        <trans-unit id="991620aa6f39ac29087254344c8c3b9da95d1189" translate="yes" xml:space="preserve">
          <source>Intel Core i7 Ivy Bridge CPU.</source>
          <target state="translated">인텔 코어 i7 아이비 브릿지 CPU.</target>
        </trans-unit>
        <trans-unit id="af412b16a4a1fa709b5c4e0dc1b4053086a658b9" translate="yes" xml:space="preserve">
          <source>Intel Core i7 Nehalem CPU.</source>
          <target state="translated">인텔 코어 i7 네 할렘 CPU.</target>
        </trans-unit>
        <trans-unit id="54d95e4ebd3dd5bdf5b9ba56f027d07a984d2afe" translate="yes" xml:space="preserve">
          <source>Intel Core i7 Sandy Bridge CPU.</source>
          <target state="translated">Intel Core i7 Sandy Bridge CPU.</target>
        </trans-unit>
        <trans-unit id="97a2f42fbad5abbeae70ab8ff04a6b3e6c62ec8d" translate="yes" xml:space="preserve">
          <source>Intel Core i7 Skylake AVX512 CPU.</source>
          <target state="translated">Intel Core i7 Skylake AVX512 CPU.</target>
        </trans-unit>
        <trans-unit id="61de61671dc55856e7c1255296d1d6473b16dcdc" translate="yes" xml:space="preserve">
          <source>Intel Core i7 Skylake CPU.</source>
          <target state="translated">Intel Core i7 Skylake CPU.</target>
        </trans-unit>
        <trans-unit id="edb9e75e299eceeb7b0f4e6c0a6395b9498d75fe" translate="yes" xml:space="preserve">
          <source>Intel Core i7 Westmere CPU.</source>
          <target state="translated">인텔 코어 i7 웨스트 미어 CPU.</target>
        </trans-unit>
        <trans-unit id="be251927e1134f1e835ac088a557608349a55b6d" translate="yes" xml:space="preserve">
          <source>Intel Goldmont CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AES, PCLMUL, RDRND, XSAVE, XSAVEOPT and FSGSBASE instruction set support.</source>
          <target state="translated">64 비트 확장 기능이있는 Intel Goldmont CPU, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AES, PCLMUL, RDRND, XSAVE, XSAVEOPT 및 FSGSBASE 명령 세트 지원.</target>
        </trans-unit>
        <trans-unit id="f2216f7a5b6c685673690f79b7109ffb2466d911" translate="yes" xml:space="preserve">
          <source>Intel Goldmont Plus CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AES, PCLMUL, RDRND, XSAVE, XSAVEOPT, FSGSBASE, PTWRITE, RDPID, SGX and UMIP instruction set support.</source>
          <target state="translated">64 비트 확장 기능이있는 Intel Goldmont Plus CPU, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AES, PCLMUL, RDRND, XSAVE, XSAVEOPT, FSGSBASE, PTWRITE, RDPID, SGX 및 UMIP 명령어 세트 지원</target>
        </trans-unit>
        <trans-unit id="dffa1cc691c3f49cfd482c1c5dcc027a2c092d54" translate="yes" xml:space="preserve">
          <source>Intel Haswell CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA, BMI, BMI2 and F16C instruction set support.</source>
          <target state="translated">64 비트 확장 기능이있는 Intel Haswell CPU, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA, BMI, BMI2 및 F16C 명령 세트 지원.</target>
        </trans-unit>
        <trans-unit id="029522f4f956d60fb0bf7a0af936a2149a313aab" translate="yes" xml:space="preserve">
          <source>Intel IA-64&amp;mdash;</source>
          <target state="translated">인텔 IA-64&amp;mdash;</target>
        </trans-unit>
        <trans-unit id="152aaec109e2add72adc65b6971cf8b59aa85e87" translate="yes" xml:space="preserve">
          <source>Intel Icelake Client CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, PKU, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA, BMI, BMI2, F16C, RDSEED, ADCX, PREFETCHW, CLFLUSHOPT, XSAVEC, XSAVES, AVX512F, AVX512VL, AVX512BW, AVX512DQ, AVX512CD, AVX512VBMI, AVX512IFMA, SHA, CLWB, UMIP, RDPID, GFNI, AVX512VBMI2, AVX512VPOPCNTDQ, AVX512BITALG, AVX512VNNI, VPCLMULQDQ, VAES instruction set support.</source>
          <target state="translated">64 비트 확장, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, PKU, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA, BMI, Intel Icelake 클라이언트 CPU BMI2, F16C, RDSEED, ADCX, prefetchw와, CLFLUSHOPT, XSAVEC, XSAVES, AVX512F, AVX512VL, AVX512BW, AVX512DQ, AVX512CD, AVX512VBMI, AVX512IFMA, SHA, CLWB, UMIP, RDPID, GFNI, AVX512VBMI2, AVX512VPOPCNTDQ, AVX512BITALG, AVX512VNNI, VPCLMULQDQ, VAES 명령어 세트 지원.</target>
        </trans-unit>
        <trans-unit id="12973dd04d0e1250092f82f9f41af48d0131cdb4" translate="yes" xml:space="preserve">
          <source>Intel Icelake Server CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, PKU, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA, BMI, BMI2, F16C, RDSEED, ADCX, PREFETCHW, CLFLUSHOPT, XSAVEC, XSAVES, AVX512F, AVX512VL, AVX512BW, AVX512DQ, AVX512CD, AVX512VBMI, AVX512IFMA, SHA, CLWB, UMIP, RDPID, GFNI, AVX512VBMI2, AVX512VPOPCNTDQ, AVX512BITALG, AVX512VNNI, VPCLMULQDQ, VAES, PCONFIG and WBNOINVD instruction set support.</source>
          <target state="translated">64 비트 확장 기능이있는 Intel Icelake 서버 CPU, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, PKU, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA, BMI, BMI2, F16C, RDSEED, ADCX, prefetchw와, CLFLUSHOPT, XSAVEC, XSAVES, AVX512F, AVX512VL, AVX512BW, AVX512DQ, AVX512CD, AVX512VBMI, AVX512IFMA, SHA, CLWB, UMIP, RDPID, GFNI, AVX512VBMI2, AVX512VPOPCNTDQ, AVX512BITALG, AVX512VNNI, VPCLMULQDQ, VAES, PCONFIG 및 WBNOINVD 명령 세트 지원.</target>
        </trans-unit>
        <trans-unit id="6d14e08a728150f7657d76da24c5926d84024a8a" translate="yes" xml:space="preserve">
          <source>Intel Ivy Bridge CPU with 64-bit extensions, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AVX, AES, PCLMUL, FSGSBASE, RDRND and F16C instruction set support.</source>
          <target state="translated">64 비트 확장, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AVX, AES, PCLMUL, FSGSBASE, RDRND 및 F16C 명령어 세트를 지원하는 인텔 아이비 브릿지 CPU.</target>
        </trans-unit>
        <trans-unit id="a23c9118e2b6b27802c0cfb7609d25957c86b1e8" translate="yes" xml:space="preserve">
          <source>Intel Knight&amp;rsquo;s Landing CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA, BMI, BMI2, F16C, RDSEED, ADCX, PREFETCHW, AVX512F, AVX512PF, AVX512ER and AVX512CD instruction set support.</source>
          <target state="translated">64 비트 확장 기능이있는 Intel Knight의 랜딩 CPU, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA, BMI, BMI2, F16C, RDSEED, ADCX, PREFETCHW, AVX512F, AVX512PF, AVX512ER 및 AVX512CD 명령 세트 지원.</target>
        </trans-unit>
        <trans-unit id="105d9453c57cee49c5152c3b47056ccd901b9948" translate="yes" xml:space="preserve">
          <source>Intel Knights Landing CPU.</source>
          <target state="translated">인텔 나이트 랜딩 CPU.</target>
        </trans-unit>
        <trans-unit id="c800510ad776e6fbb7c9cd7e1662747a6e512e3f" translate="yes" xml:space="preserve">
          <source>Intel Knights Mill CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA, BMI, BMI2, F16C, RDSEED, ADCX, PREFETCHW, AVX512F, AVX512PF, AVX512ER, AVX512CD, AVX5124VNNIW, AVX5124FMAPS and AVX512VPOPCNTDQ instruction set support.</source>
          <target state="translated">64 비트 확장 기능이있는 Intel Knights Mill CPU, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA, BMI, BMI2, F16C, RDSEED, ADCX, PREFETCHW, AVX512F, AVX512PF, AVX512ER, AVX512CD, AVX5124VNNIW, AVX5124FMAPS 및 AVX512VPOPCNTDQ 명령 세트 지원.</target>
        </trans-unit>
        <trans-unit id="d88ddb80194f5935c0ceb2040bb98a4530a38e3f" translate="yes" xml:space="preserve">
          <source>Intel Knights Mill CPU.</source>
          <target state="translated">인텔 나이츠 밀 CPU.</target>
        </trans-unit>
        <trans-unit id="5a5d0ee6c3a5681a84e63be765d0a7690aa74293" translate="yes" xml:space="preserve">
          <source>Intel Lakemont MCU, based on Intel Pentium CPU.</source>
          <target state="translated">Intel Pentium CPU 기반 Intel Lakemont MCU</target>
        </trans-unit>
        <trans-unit id="e9d02986e09874e7b363db4a3f07d004d93bc77b" translate="yes" xml:space="preserve">
          <source>Intel Nehalem CPU with 64-bit extensions, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2 and POPCNT instruction set support.</source>
          <target state="translated">64 비트 확장, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2 및 POPCNT 명령어 세트를 지원하는 Intel Nehalem CPU.</target>
        </trans-unit>
        <trans-unit id="a6319d6cfad54e8f74103c7032e5935dfba6b99f" translate="yes" xml:space="preserve">
          <source>Intel Pentium 4 CPU with MMX, SSE and SSE2 instruction set support.</source>
          <target state="translated">MMX, SSE 및 SSE2 명령어 세트를 지원하는 Intel Pentium 4 CPU.</target>
        </trans-unit>
        <trans-unit id="692a199262cb57086ab54560f8577f96ec98b367" translate="yes" xml:space="preserve">
          <source>Intel Pentium CPU with no MMX support.</source>
          <target state="translated">MMX를 지원하지 않는 Intel Pentium CPU.</target>
        </trans-unit>
        <trans-unit id="5406108d0a0a2ab97f47445acc6de86235a437a5" translate="yes" xml:space="preserve">
          <source>Intel Pentium II CPU, based on Pentium Pro core with MMX instruction set support.</source>
          <target state="translated">MMX 명령어 세트를 지원하는 Pentium Pro 코어 기반 Intel Pentium II CPU.</target>
        </trans-unit>
        <trans-unit id="d32614708f17485dc4ac55214c77f2b4445ec22e" translate="yes" xml:space="preserve">
          <source>Intel Pentium III CPU, based on Pentium Pro core with MMX and SSE instruction set support.</source>
          <target state="translated">MMX 및 SSE 명령어 세트를 지원하는 Pentium Pro 코어 기반 Intel Pentium III CPU.</target>
        </trans-unit>
        <trans-unit id="dd6d9a141ca90602dda6330f90d376d13851bfa4" translate="yes" xml:space="preserve">
          <source>Intel Pentium M; low-power version of Intel Pentium III CPU with MMX, SSE and SSE2 instruction set support. Used by Centrino notebooks.</source>
          <target state="translated">인텔 펜티엄 M; MMX, SSE 및 SSE2 명령어 세트를 지원하는 저전력 버전의 Intel Pentium III CPU. Centrino 노트북에서 사용합니다.</target>
        </trans-unit>
        <trans-unit id="76835b07fd27d0e346aae8dc4c118e93e09d1be7" translate="yes" xml:space="preserve">
          <source>Intel Pentium MMX CPU, based on Pentium core with MMX instruction set support.</source>
          <target state="translated">MMX 명령어 세트를 지원하는 Pentium 코어 기반 Intel Pentium MMX CPU.</target>
        </trans-unit>
        <trans-unit id="e7e2b54ad0f358255e49e7d7c2cff41f6c2b715f" translate="yes" xml:space="preserve">
          <source>Intel Pentium Pro CPU.</source>
          <target state="translated">인텔 펜티엄 프로 CPU.</target>
        </trans-unit>
        <trans-unit id="183af32dfc242cf12479af940024a191cecfa3b9" translate="yes" xml:space="preserve">
          <source>Intel Sandy Bridge CPU with 64-bit extensions, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AVX, AES and PCLMUL instruction set support.</source>
          <target state="translated">64 비트 확장, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AVX, AES 및 PCLMUL 명령어 세트를 지원하는 Intel Sandy Bridge CPU.</target>
        </trans-unit>
        <trans-unit id="e33ed61d0314127450707b1de5637b9644898ad0" translate="yes" xml:space="preserve">
          <source>Intel Silvermont CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AES, PCLMUL and RDRND instruction set support.</source>
          <target state="translated">64 비트 확장, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AES, PCLMUL 및 RDRND 명령어 세트를 지원하는 Intel Silvermont CPU.</target>
        </trans-unit>
        <trans-unit id="c8f30486c1fea007cfe040db3321b63b09ca9b7f" translate="yes" xml:space="preserve">
          <source>Intel Silvermont CPU.</source>
          <target state="translated">인텔 실버 몬트 CPU.</target>
        </trans-unit>
        <trans-unit id="2c471437cb0ae3ad6a24d1fbb334ca901411069f" translate="yes" xml:space="preserve">
          <source>Intel Skylake CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA, BMI, BMI2, F16C, RDSEED, ADCX, PREFETCHW, CLFLUSHOPT, XSAVEC and XSAVES instruction set support.</source>
          <target state="translated">64 비트 확장 기능이있는 Intel Skylake CPU, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA, BMI, BMI2, F16C , RDSEED, ADCX, PREFETCHW, CLFLUSHOPT, XSAVEC 및 XSAVES 명령 세트 지원.</target>
        </trans-unit>
        <trans-unit id="030f7151f3b0f21bbf6ee47ac9218a8952760202" translate="yes" xml:space="preserve">
          <source>Intel Skylake Server CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, PKU, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA, BMI, BMI2, F16C, RDSEED, ADCX, PREFETCHW, CLFLUSHOPT, XSAVEC, XSAVES, AVX512F, CLWB, AVX512VL, AVX512BW, AVX512DQ and AVX512CD instruction set support.</source>
          <target state="translated">64 비트 확장 기능이있는 Intel Skylake 서버 CPU, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, PKU, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA, BMI, BMI2, F16C, RDSEED, ADCX, PREFETCHW, CLFLUSHOPT, XSAVEC, XSAVES, AVX512F, CLWB, AVX512VL, AVX512BW, AVX512DQ 및 AVX512CD 명령 세트 지원.</target>
        </trans-unit>
        <trans-unit id="031051a100af7d38f1ec674ac811215b8ec13d33" translate="yes" xml:space="preserve">
          <source>Intel Tremont CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AES, PCLMUL, RDRND, XSAVE, XSAVEOPT, FSGSBASE, PTWRITE, RDPID, SGX, UMIP, GFNI-SSE, CLWB and ENCLV instruction set support.</source>
          <target state="translated">64 비트 확장 기능이있는 Intel Tremont CPU, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AES, PCLMUL, RDRND, XSAVE, XSAVEOPT, FSGSBASE, PTWRITE, RDPID, SGX, UMIP , GFNI-SSE, CLWB 및 ENCLV 명령 세트 지원.</target>
        </trans-unit>
        <trans-unit id="6f94a420ea2b277fc84f51439540965bdf1d1d00" translate="yes" xml:space="preserve">
          <source>Intel Westmere CPU with 64-bit extensions, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AES and PCLMUL instruction set support.</source>
          <target state="translated">64 비트 확장, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AES 및 PCLMUL 명령어 세트를 지원하는 Intel Westmere CPU.</target>
        </trans-unit>
        <trans-unit id="40a66cab51829a9774ebe13c489c426b16676128" translate="yes" xml:space="preserve">
          <source>Intel i486 CPU. (No scheduling is implemented for this chip.)</source>
          <target state="translated">인텔 i486 CPU. (이 칩에는 스케줄링이 구현되지 않았습니다.)</target>
        </trans-unit>
        <trans-unit id="26c5ea59f401269b24e031564e165c71e3401bf8" translate="yes" xml:space="preserve">
          <source>Internal visibility is like hidden visibility, but with additional processor specific semantics. Unless otherwise specified by the psABI, GCC defines internal visibility to mean that a function is &lt;em&gt;never&lt;/em&gt; called from another module. Compare this with hidden functions which, while they cannot be referenced directly by other modules, can be referenced indirectly via function pointers. By indicating that a function cannot be called from outside the module, GCC may for instance omit the load of a PIC register since it is known that the calling function loaded the correct value.</source>
          <target state="translated">내부 가시성은 숨겨진 가시성과 같지만 추가 프로세서 고유의 의미가 있습니다. psABI에서 달리 지정하지 않는 한 GCC는 내부 가시성을 정의하여 함수가 다른 모듈에서 호출 &lt;em&gt;되지 않음&lt;/em&gt; 을 의미합니다 . 이 기능을 다른 모듈에서 직접 참조 할 수는 없지만 함수 포인터를 통해 간접적으로 참조 할 수있는 숨겨진 기능과 비교하십시오. 함수가 모듈 외부에서 호출 될 수 없음을 표시함으로써 GCC는 호출 함수가 올바른 값을로드 한 것으로 알려져 있기 때문에 PIC 레지스터의로드를 생략 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d69c32ab0f83c3af71f75c3424e457f06a60796a" translate="yes" xml:space="preserve">
          <source>Interrupt service routines (ISRs) may use the &lt;code&gt;__gcc_isr&lt;/code&gt; pseudo instruction supported by GNU Binutils. If this option is on, the feature can still be disabled for individual ISRs by means of the &lt;a href=&quot;avr-function-attributes#AVR-Function-Attributes&quot;&gt;&lt;code&gt;no_gccisr&lt;/code&gt;&lt;/a&gt; function attribute. This feature is activated per default if optimization is on (but not with</source>
          <target state="translated">인터럽트 서비스 루틴 (ISR)은 GNU Binutils가 지원 하는 &lt;code&gt;__gcc_isr&lt;/code&gt; 의사 명령어를 사용할 수 있습니다 . 이 옵션이 켜져 있으면 &lt;a href=&quot;avr-function-attributes#AVR-Function-Attributes&quot;&gt; &lt;code&gt;no_gccisr&lt;/code&gt; &lt;/a&gt; 함수 속성을 사용하여 개별 ISR에 대해 기능을 비활성화 할 수 있습니다 . 이 기능은 최적화가 켜져 있으면 기본적으로 활성화되지만</target>
        </trans-unit>
        <trans-unit id="c300cbc2c5555248cab81a9877a8b8d0e8847cd8" translate="yes" xml:space="preserve">
          <source>Introduces a concept definition. Concepts are sets of syntactic and semantic requirements on types and their values.</source>
          <target state="translated">개념 정의를 소개합니다. 개념은 유형 및 해당 값에 대한 구문 및 의미 요구 사항 집합입니다.</target>
        </trans-unit>
        <trans-unit id="e9ee425dc594ca4cd61142b534317e5fd811f369" translate="yes" xml:space="preserve">
          <source>Introduces a universally quantified object in an axiom. For example, &lt;code&gt;forall (int n) n + 0 == n&lt;/code&gt;).</source>
          <target state="translated">공리로 보편적으로 정량화 된 객체를 소개합니다. 예를 들어, &lt;code&gt;forall (int n) n + 0 == n&lt;/code&gt; )입니다.</target>
        </trans-unit>
        <trans-unit id="c9bb1c893c7539b3e81ed6f78430c173d327e156" translate="yes" xml:space="preserve">
          <source>Introduces an axiom definition. Axioms introduce requirements on values.</source>
          <target state="translated">공리 정의를 소개합니다. 공리는 가치에 대한 요구 사항을 소개합니다.</target>
        </trans-unit>
        <trans-unit id="9cb5e33d10879b864901a4b8c5a0a3b0f6b53b63" translate="yes" xml:space="preserve">
          <source>Introduces constraints on template arguments or requirements for a member function of a class template.</source>
          <target state="translated">클래스 템플릿의 멤버 함수에 대한 템플릿 인수 또는 요구 사항에 대한 제약 조건을 소개합니다.</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="0976486535c34fcca63e03f9634c0dcd637d8085" translate="yes" xml:space="preserve">
          <source>Introduction to gcov-dump.</source>
          <target state="translated">gcov-dump 소개.</target>
        </trans-unit>
        <trans-unit id="417575a98f9da5c69fba9e55f68b055b7043023b" translate="yes" xml:space="preserve">
          <source>Introduction to gcov-tool.</source>
          <target state="translated">gcov-tool 소개</target>
        </trans-unit>
        <trans-unit id="e0e41368efe023b790ba4ea9a2296cdb87041af5" translate="yes" xml:space="preserve">
          <source>Introduction to gcov.</source>
          <target state="translated">gcov 소개</target>
        </trans-unit>
        <trans-unit id="1832d871126216725e499101b1180346127057f2" translate="yes" xml:space="preserve">
          <source>Invoke GCC with</source>
          <target state="translated">와 함께 GCC를 호출</target>
        </trans-unit>
        <trans-unit id="bab3ce6c526b0e0b48e06b21edbe45c2cfca2bfb" translate="yes" xml:space="preserve">
          <source>Invoke all subcommands under a wrapper program. The name of the wrapper program and its parameters are passed as a comma separated list.</source>
          <target state="translated">랩퍼 프로그램에서 모든 부속 명령을 호출하십시오. 랩퍼 프로그램의 이름 및 해당 매개 변수는 쉼표로 구분 된 목록으로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="14a32e2b224d7a1c507e7565d52d143083b3ef43" translate="yes" xml:space="preserve">
          <source>Issue &lt;var&gt;number&lt;/var&gt; instructions per cycle. &lt;var&gt;number&lt;/var&gt; can only be 1 or 2.</source>
          <target state="translated">사이클 당 발행 &lt;var&gt;number&lt;/var&gt; 지침. &lt;var&gt;number&lt;/var&gt; 는 1 또는 2 만 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f38af183405226c56c3edb2f3ffa6733bbf93c9d" translate="yes" xml:space="preserve">
          <source>Issue a warning for any floating constant that does not have a suffix. When used together with</source>
          <target state="translated">접미사가없는 부동 상수에 대해 경고를 발행하십시오. 함께 사용하면</target>
        </trans-unit>
        <trans-unit id="b4a1555a78482b333a3506ee721963b4b2c6999e" translate="yes" xml:space="preserve">
          <source>Issue a warning when HSAIL cannot be emitted for the compiled function or OpenMP construct.</source>
          <target state="translated">컴파일 된 함수 또는 OpenMP 구문에 대해 HSAIL을 생성 할 수없는 경우 경고를 발행하십시오.</target>
        </trans-unit>
        <trans-unit id="ec2d085cd0108643220e5d5464665882dd6bda3c" translate="yes" xml:space="preserve">
          <source>Issue all the warnings demanded by strict ISO C and ISO C++; reject all programs that use forbidden extensions, and some other programs that do not follow ISO C and ISO C++. For ISO C, follows the version of the ISO C standard specified by any</source>
          <target state="translated">엄격한 ISO C 및 ISO C ++에서 요구하는 모든 경고를 발행하십시오. 금지 된 확장명을 사용하는 모든 프로그램과 ISO C 및 ISO C ++를 따르지 않는 일부 다른 프로그램은 거부하십시오. ISO C의 경우 다음에 의해 지정된 ISO C 표준 버전을 따릅니다.</target>
        </trans-unit>
        <trans-unit id="44d9d45d52ba5adbd6f20568aa8f4699933acb85" translate="yes" xml:space="preserve">
          <source>Issues a &lt;var&gt;command&lt;/var&gt; to the spec file processor. The commands that can appear here are:</source>
          <target state="translated">스펙 파일 프로세서에 &lt;var&gt;command&lt;/var&gt; 을 발행합니다 . 여기에 나타날 수있는 명령은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c1cdee1a80b97b9e4ba721f558cf2b2cf90ba35f" translate="yes" xml:space="preserve">
          <source>It also creates a resolver function (see the &lt;code&gt;ifunc&lt;/code&gt; attribute above) that dynamically selects a clone suitable for current architecture. The resolver is created only if there is a usage of a function with &lt;code&gt;target_clones&lt;/code&gt; attribute.</source>
          <target state="translated">또한 현재 아키텍처에 적합한 복제본을 동적으로 선택 하는 리졸버 함수 ( 위 의 &lt;code&gt;ifunc&lt;/code&gt; 속성 참조)를 작성합니다. 리졸버는 &lt;code&gt;target_clones&lt;/code&gt; 속성 을 가진 함수를 사용하는 경우에만 작성됩니다 .</target>
        </trans-unit>
        <trans-unit id="bef38d257d928adc53dfbb3b12ae650ea23aa57c" translate="yes" xml:space="preserve">
          <source>It also enables</source>
          <target state="translated">또한 활성화</target>
        </trans-unit>
        <trans-unit id="cf69a12f771fe8af3100d72d86a905a59f409fb8" translate="yes" xml:space="preserve">
          <source>It also warns about psABI-related changes. The known psABI changes at this point include:</source>
          <target state="translated">또한 psABI 관련 변경 사항에 대해 경고합니다. 이 시점에서 알려진 psABI 변경 사항은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="bb430418c39fbf8255d12ea3dd0974f5e0f66b24" translate="yes" xml:space="preserve">
          <source>It can also be used to debug or libgcov code as the tools shares the majority code as the runtime library.</source>
          <target state="translated">또한 도구가 런타임 라이브러리로 다수의 코드를 공유하므로 디버그 또는 libgcov 코드에 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8da008061a563aa8f2361e7e2fc2eaa54e416ddc" translate="yes" xml:space="preserve">
          <source>It can be enabled even if var-tracking is disabled, in which case annotations are created and maintained, but discarded at the end. By default, this flag is enabled together with</source>
          <target state="translated">var-tracking이 비활성화되어 있어도 활성화 할 수 있으며,이 경우 주석이 생성 및 유지되지만 끝에 폐기됩니다. 기본적으로이 플래그는</target>
        </trans-unit>
        <trans-unit id="bc047c74eee0912985ebb4ded32e27c027970361" translate="yes" xml:space="preserve">
          <source>It does not make sense for a &lt;code&gt;noreturn&lt;/code&gt; function to have a return type other than &lt;code&gt;void&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;noreturn&lt;/code&gt; 함수가 &lt;code&gt;void&lt;/code&gt; 이외의 리턴 유형을 갖는 것은 의미가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="5c87f6c1eebf231573babd67d05ed2d66e8ec815" translate="yes" xml:space="preserve">
          <source>It doesn&amp;rsquo;t warn when both branches contain just a null statement. This warning also warn for conditional operators:</source>
          <target state="translated">두 브랜치에 null 문만 포함되어 있으면 경고하지 않습니다. 이 경고는 조건부 연산자에도 경고합니다.</target>
        </trans-unit>
        <trans-unit id="a8dbb374fb1de6cf9db557f63120f254ea245440" translate="yes" xml:space="preserve">
          <source>It is &lt;em&gt;important&lt;/em&gt; to note that this option changes the interfaces for various library routines. It also affects the operational behavior of the C library. Thus, &lt;em&gt;extreme&lt;/em&gt; care is needed in using this option.</source>
          <target state="translated">이다 &lt;em&gt;중요한&lt;/em&gt; 이 옵션은 다양한 라이브러리 루틴에 대한 인터페이스를 변경 참고 할 수 있습니다. 또한 C 라이브러리의 작동 동작에 영향을줍니다. 따라서이 옵션을 사용할 때는 &lt;em&gt;각별한&lt;/em&gt; 주의가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="06319dff6bcbd5dfa828072a6a2aae6213a79eb9" translate="yes" xml:space="preserve">
          <source>It is also possible to specify expected probability of the expression with &lt;code&gt;__builtin_expect_with_probability&lt;/code&gt; built-in function.</source>
          <target state="translated">&lt;code&gt;__builtin_expect_with_probability&lt;/code&gt; 내장 함수 를 사용하여 식의 예상 확률을 지정할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="90e175bed2a49562ba22aacb0ae36600d762860b" translate="yes" xml:space="preserve">
          <source>It is an error to use this flag with the frame pointer or stack pointer. Use of this flag for other registers that have fixed pervasive roles in the machine&amp;rsquo;s execution model produces disastrous results.</source>
          <target state="translated">이 플래그를 프레임 포인터 또는 스택 포인터와 함께 사용하면 오류가 발생합니다. 머신의 실행 모델에서 퍼베이시브 역할이 고정 된 다른 레지스터에이 플래그를 사용하면 비참한 결과가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="0f31597b91c17b117bb21b656918dc5ff7d70f56" translate="yes" xml:space="preserve">
          <source>It is built into GCC which switches take arguments and which do not. (You might think it would be useful to generalize this to allow each compiler&amp;rsquo;s spec to say which switches take arguments. But this cannot be done in a consistent fashion. GCC cannot even decide which input files have been specified without knowing which switches take arguments, and it must know which input files to compile in order to tell which compilers to run).</source>
          <target state="translated">스위치는 인수를 취하고 그렇지 않은 GCC에 내장되어 있습니다. (각 컴파일러의 스펙에 따라 어떤 스위치가 인수를 취하는 지 말할 수 있도록 이것을 일반화하는 것이 유용 할 것이라고 생각할 수도 있지만, 일관된 방식으로 수행 할 수는 없습니다. GCC는 어떤 스위치가 인수를 사용하는지 알지 못하면 어떤 입력 파일이 지정되었는지조차 결정할 수 없습니다. 실행할 컴파일러를 알려면 컴파일 할 입력 파일을 알아야합니다.</target>
        </trans-unit>
        <trans-unit id="222012f45344f5c65f901b37c6b82d7fb7d6d4f9" translate="yes" xml:space="preserve">
          <source>It is dangerous to use pointers or references to &lt;em&gt;portions&lt;/em&gt; of a temporary object. The compiler may very well delete the object before you expect it to, leaving a pointer to garbage. The most common place where this problem crops up is in classes like string classes, especially ones that define a conversion function to type &lt;code&gt;char *&lt;/code&gt; or &lt;code&gt;const char *&lt;/code&gt;&amp;mdash;which is one reason why the standard &lt;code&gt;string&lt;/code&gt; class requires you to call the &lt;code&gt;c_str&lt;/code&gt; member function. However, any class that returns a pointer to some internal structure is potentially subject to this problem.</source>
          <target state="translated">임시 객체의 &lt;em&gt;일부&lt;/em&gt; 에 대한 포인터 또는 참조를 사용하는 것은 위험 합니다. 컴파일러는 객체를 예상하기 전에 객체를 매우 잘 삭제하여 가비지에 대한 포인터를 남길 수 있습니다. 이 문제가 발생하는 가장 일반적인 장소는 문자열 클래스와 같은 클래스, 특히 &lt;code&gt;char *&lt;/code&gt; 또는 &lt;code&gt;const char *&lt;/code&gt; 유형으로 변환 함수를 정의하는 클래스입니다 . 표준 &lt;code&gt;string&lt;/code&gt; 클래스에서 &lt;code&gt;c_str&lt;/code&gt; 멤버 함수 를 호출해야하는 이유 중 하나 입니다. 그러나 일부 내부 구조에 대한 포인터를 반환하는 모든 클래스에는이 문제가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ddf939a1b24ae83b791cb87faf0fd0fa5e3e973f" translate="yes" xml:space="preserve">
          <source>It is easier to describe the DSP built-in functions if we first define the following types:</source>
          <target state="translated">먼저 다음 유형을 정의하면 DSP 내장 기능을 설명하기가 더 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="25fcd667b0dbb0d799b3054dad7c17ad2fd73cf2" translate="yes" xml:space="preserve">
          <source>It is easy to accidentally do computations with &lt;code&gt;double&lt;/code&gt; because floating-point literals are implicitly of type &lt;code&gt;double&lt;/code&gt;. For example, in:</source>
          <target state="translated">부동 소수점 리터럴은 암시 적으로 &lt;code&gt;double&lt;/code&gt; 유형이므로 실수로 &lt;code&gt;double&lt;/code&gt; 을 사용하여 계산을 수행하는 것이 쉽습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0fa7afd0d95560eed67f292eec0b569ea0dd71aa" translate="yes" xml:space="preserve">
          <source>It is enabled by default when compiling with optimization (</source>
          <target state="translated">최적화로 컴파일 할 때 기본적으로 사용됩니다 (</target>
        </trans-unit>
        <trans-unit id="29da5267ff88893b381bfccaf430bf521aa54e56" translate="yes" xml:space="preserve">
          <source>It is equivalent to the following traditional C declaration:</source>
          <target state="translated">다음과 같은 전통적인 C 선언과 같습니다.</target>
        </trans-unit>
        <trans-unit id="5652a04f74187d8f8864c44a33360051feca8c85" translate="yes" xml:space="preserve">
          <source>It is legitimate for user-specific startup code to set up &lt;code&gt;EIND&lt;/code&gt; early, for example by means of initialization code located in section &lt;code&gt;.init3&lt;/code&gt;. Such code runs prior to general startup code that initializes RAM and calls constructors, but after the bit of startup code from AVR-LibC that sets &lt;code&gt;EIND&lt;/code&gt; to the segment where the vector table is located.</source>
          <target state="translated">예를 들어 &lt;code&gt;.init3&lt;/code&gt; 섹션에있는 초기화 코드 를 통해 사용자 별 시작 코드가 &lt;code&gt;EIND&lt;/code&gt; 를 조기 에 설정하는 것이 합법적입니다 . 이러한 코드는 RAM을 초기화하고 생성자를 호출하는 일반 시작 코드 이전에 실행되지만 &lt;code&gt;EIND&lt;/code&gt; 을 벡터 테이블이있는 세그먼트로 설정하는 AVR-LibC의 시작 코드 비트 후에 실행 됩니다.</target>
        </trans-unit>
        <trans-unit id="0ed96f764b95d949d9244bb6e3dbb5f5e78a720f" translate="yes" xml:space="preserve">
          <source>It is never safe to depend on the order of evaluation of side effects. For example, a function call like this may very well behave differently from one compiler to another:</source>
          <target state="translated">부작용 평가 순서에 의존하는 것은 결코 안전하지 않습니다. 예를 들어, 이와 같은 함수 호출은 컴파일러마다 다르게 동작 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ec64b190f1e83c72bcab890189abf4b5928a6b64" translate="yes" xml:space="preserve">
          <source>It is normally not desirable to use this option as it degrades performance. However, it may be useful in large applications, particularly when partial linking is used to build the application.</source>
          <target state="translated">일반적으로이 옵션은 성능을 저하 시키므로 사용하지 않는 것이 좋습니다. 그러나 대규모 응용 프로그램, 특히 부분 링크를 사용하여 응용 프로그램을 빌드 할 때 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="21321b482939430be1649188ae37be3907714952" translate="yes" xml:space="preserve">
          <source>It is not always simple to compute the proper value for &lt;var&gt;size&lt;/var&gt;. The value is used by &lt;code&gt;__builtin_apply&lt;/code&gt; to compute the amount of data that should be pushed on the stack and copied from the incoming argument area.</source>
          <target state="translated">&lt;var&gt;size&lt;/var&gt; 에 대한 적절한 값을 계산하는 것이 항상 간단한 것은 아닙니다 . 이 값은 &lt;code&gt;__builtin_apply&lt;/code&gt; 에서 스택에 푸시하고 들어오는 인수 영역에서 복사해야하는 데이터의 양을 계산하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="9583fac1992c0dd658009cc677b8edd9b3559156" translate="yes" xml:space="preserve">
          <source>It is not recommended to access the coverage files directly. Consumers should use the intermediate format that is provided by &lt;code&gt;gcov&lt;/code&gt; tool via</source>
          <target state="translated">적용 범위 파일에 직접 액세스하지 않는 것이 좋습니다. 소비자는 다음을 통해 &lt;code&gt;gcov&lt;/code&gt; 도구에서 제공하는 중간 형식을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="759cbf732a4b9d49b3077805574c7a9fe941a1ee" translate="yes" xml:space="preserve">
          <source>It is not specified when between sequence points modifications to the values of objects take effect. Programs whose behavior depends on this have undefined behavior; the C and C++ standards specify that &amp;ldquo;Between the previous and next sequence point an object shall have its stored value modified at most once by the evaluation of an expression. Furthermore, the prior value shall be read only to determine the value to be stored.&amp;rdquo;. If a program breaks these rules, the results on any particular implementation are entirely unpredictable.</source>
          <target state="translated">시퀀스 포인트 사이에서 객체의 값에 대한 수정이 적용될 때 지정되지 않습니다. 동작이 이것에 의존하는 프로그램에는 정의되지 않은 동작이 있습니다. C 및 C ++ 표준은 다음과 같이 지정합니다. 또한, 저장 될 값을 결정하기 위해 이전 값은 읽기 전용이어야한다.&amp;rdquo; 프로그램이 이러한 규칙을 어기면 특정 구현에 대한 결과를 완전히 예측할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="e4bbacc8fe63822752c6544626a765dc0c0321df" translate="yes" xml:space="preserve">
          <source>It is possible that if an input dies in an &lt;code&gt;asm&lt;/code&gt;, the compiler might use the input register for an output reload. Consider this example:</source>
          <target state="translated">입력이 &lt;code&gt;asm&lt;/code&gt; 에서 죽으면 컴파일러가 출력 레지스터를 위해 입력 레지스터를 사용할 수 있습니다. 이 예제를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="ba77dbc3171ca92f26c1dbf56da4bd53b0500ff2" translate="yes" xml:space="preserve">
          <source>It is possible to call the nested function from outside the scope of its name by storing its address or passing the address to another function:</source>
          <target state="translated">주소를 저장하거나 다른 함수에 주소를 전달하여 이름의 범위 밖에서 중첩 함수를 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="09bc3800860fd0c51543567a22abe4b7cc247361" translate="yes" xml:space="preserve">
          <source>It is possible to make separate sets of fixed header files for the different machine models, and arrange a structure of symbolic links so as to use the proper set, but you&amp;rsquo;ll have to do this by hand.</source>
          <target state="translated">다른 머신 모델에 대해 별도의 고정 헤더 파일 세트를 작성하고 적절한 세트를 사용하도록 기호 링크의 구조를 배열 할 수 있지만이를 직접 수행해야합니다.</target>
        </trans-unit>
        <trans-unit id="420a79f7231108de5b2576c9755f6a3032e08da4" translate="yes" xml:space="preserve">
          <source>It is possible to suppress the warning by wrapping the LHS into parentheses:</source>
          <target state="translated">LHS를 괄호로 묶어 경고를 억제 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="aa90bfd1edcfd644920fd2aefaa0bdd2013faf88" translate="yes" xml:space="preserve">
          <source>It is possible to use shifting operators &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; on integer-type vectors. The operation is defined as following: &lt;code&gt;{a0,
a1, &amp;hellip;, an} &amp;gt;&amp;gt; {b0, b1, &amp;hellip;, bn} == {a0 &amp;gt;&amp;gt; b0, a1 &amp;gt;&amp;gt; b1,
&amp;hellip;, an &amp;gt;&amp;gt; bn}&lt;/code&gt;. Vector operands must have the same number of elements.</source>
          <target state="translated">정수형 벡터에 시프트 연산자 &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; , &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; 를 사용할 수 있습니다 . 조작은 &lt;code&gt;{a0, a1, &amp;hellip;, an} &amp;gt;&amp;gt; {b0, b1, &amp;hellip;, bn} == {a0 &amp;gt;&amp;gt; b0, a1 &amp;gt;&amp;gt; b1, &amp;hellip;, an &amp;gt;&amp;gt; bn}&lt;/code&gt; 됩니다. 벡터 피연산자는 같은 수의 요소를 가져야합니다.</target>
        </trans-unit>
        <trans-unit id="b2c756f86b32f2cd4cdcd443df6b017980104a01" translate="yes" xml:space="preserve">
          <source>It is recommended that portable code use the &lt;code&gt;_Float16&lt;/code&gt; type defined by ISO/IEC TS 18661-3:2015. See &lt;a href=&quot;floating-types#Floating-Types&quot;&gt;Floating Types&lt;/a&gt;.</source>
          <target state="translated">이식 가능한 코드 는 ISO / IEC TS 18661-3 : 2015에 정의 된 &lt;code&gt;_Float16&lt;/code&gt; 유형을 사용하는 것이 좋습니다 . &lt;a href=&quot;floating-types#Floating-Types&quot;&gt;부동 유형을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="98d410e04f8559b2fa54defa3d5b96852865984f" translate="yes" xml:space="preserve">
          <source>It is roughly equivalent to a machine-readable version of</source>
          <target state="translated">대략 머신에서 읽을 수있는 버전과 같습니다.</target>
        </trans-unit>
        <trans-unit id="574f9079944193334c7e5726ee8070aad0c62222" translate="yes" xml:space="preserve">
          <source>It is the kernel&amp;rsquo;s responsibility to ensure that speculative accesses to these regions are indeed safe.</source>
          <target state="translated">이 지역에 대한 투기 적 접근이 실제로 안전하다는 것은 커널의 책임입니다.</target>
        </trans-unit>
        <trans-unit id="10e20b537622f9df7f44882db02afaf516f3c621" translate="yes" xml:space="preserve">
          <source>It is unspecified whether additional action must be taken to ensure when and whether side effects are visible to other threads.</source>
          <target state="translated">부작용이 다른 스레드에 표시되는시기와 여부를 확인하기 위해 추가 조치를 취해야하는지 여부는 지정되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="2d097c3d72ddf1f995f0fc68fb38ee32a1b555bf" translate="yes" xml:space="preserve">
          <source>It is used to separate compiler options from assembler options in the</source>
          <target state="translated">컴파일러 옵션을 사용하여 컴파일러 옵션과 어셈블러 옵션을 구분합니다.</target>
        </trans-unit>
        <trans-unit id="dba1d8fdacd72ab721e60590f0e1995a94fdefa3" translate="yes" xml:space="preserve">
          <source>It makes a difference where in the command you write this option; the linker searches and processes libraries and object files in the order they are specified. Thus, &amp;lsquo;</source>
          <target state="translated">명령에서이 옵션을 쓰는 위치가 달라집니다. 링커는 라이브러리 및 객체 파일을 지정된 순서대로 검색하고 처리합니다. 따라서 '</target>
        </trans-unit>
        <trans-unit id="2cd8cd40e34198493136bfcbb08ea4f60eae9a69" translate="yes" xml:space="preserve">
          <source>It sets the default visibility to &lt;code&gt;hidden&lt;/code&gt;, like</source>
          <target state="translated">그것은에 기본 가시성을 설정 &lt;code&gt;hidden&lt;/code&gt; 처럼,</target>
        </trans-unit>
        <trans-unit id="58668e7669fd564d99db5d581fcdb6a5618440b5" translate="yes" xml:space="preserve">
          <source>J</source>
          <target state="translated">J</target>
        </trans-unit>
        <trans-unit id="e07831ca17ef893717fb3d26cf59ea3349ca55e5" translate="yes" xml:space="preserve">
          <source>JUMP_INSN</source>
          <target state="translated">JUMP_INSN</target>
        </trans-unit>
        <trans-unit id="700a56d510459faed15f5debbb5b561c648a59dc" translate="yes" xml:space="preserve">
          <source>Jump relaxing is performed by the linker because jump offsets are not known before code is located. Therefore, the assembler code generated by the compiler is the same, but the instructions in the executable may differ from instructions in the assembler code.</source>
          <target state="translated">코드를 찾기 전에 점프 오프셋을 알 수 없으므로 링커에서 점프 이완을 수행합니다. 따라서 컴파일러에서 생성 한 어셈블러 코드는 동일하지만 실행 파일의 명령어는 어셈블러 코드의 명령어와 다를 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="af93c2a2a81cf4e05fc157d311f98819e791644e" translate="yes" xml:space="preserve">
          <source>Jumping into a statement expression with &lt;code&gt;goto&lt;/code&gt; or using a &lt;code&gt;switch&lt;/code&gt; statement outside the statement expression with a &lt;code&gt;case&lt;/code&gt; or &lt;code&gt;default&lt;/code&gt; label inside the statement expression is not permitted. Jumping into a statement expression with a computed &lt;code&gt;goto&lt;/code&gt; (see &lt;a href=&quot;labels-as-values#Labels-as-Values&quot;&gt;Labels as Values&lt;/a&gt;) has undefined behavior. Jumping out of a statement expression is permitted, but if the statement expression is part of a larger expression then it is unspecified which other subexpressions of that expression have been evaluated except where the language definition requires certain subexpressions to be evaluated before or after the statement expression. A &lt;code&gt;break&lt;/code&gt; or &lt;code&gt;continue&lt;/code&gt; statement inside of a statement expression used in &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;do&lt;/code&gt; or &lt;code&gt;for&lt;/code&gt; loop or &lt;code&gt;switch&lt;/code&gt; statement condition or &lt;code&gt;for&lt;/code&gt; statement init or increment expressions jumps to an outer loop or &lt;code&gt;switch&lt;/code&gt; statement if any (otherwise it is an error), rather than to the loop or &lt;code&gt;switch&lt;/code&gt; statement in whose condition or init or increment expression it appears. In any case, as with a function call, the evaluation of a statement expression is not interleaved with the evaluation of other parts of the containing expression. For example,</source>
          <target state="translated">와 문장 표현에 점프 &lt;code&gt;goto&lt;/code&gt; 또는 사용하여 &lt;code&gt;switch&lt;/code&gt; A를 문 발현 외부 문 &lt;code&gt;case&lt;/code&gt; 또는 &lt;code&gt;default&lt;/code&gt; 문장 표현 내부 라벨은 허용되지 않습니다. 계산 된 &lt;code&gt;goto&lt;/code&gt; ( &lt;a href=&quot;labels-as-values#Labels-as-Values&quot;&gt;값으로 레이블&lt;/a&gt; 참조) 를 사용하여 명령문 표현식으로 점프하면 동작이 정의되지 않습니다. 명령문 표현식에서 뛰어 넘기는 허용되지만 명령문 표현식이 더 큰 표현식의 일부인 경우 언어 정의에서 명령문 표현식 전후에 특정 서브 표현식을 평가해야하는 경우를 제외하고 해당 표현식의 다른 서브 표현식이 평가되지 않은 것은 지정되지 않습니다. . &lt;code&gt;break&lt;/code&gt; 또는 &lt;code&gt;continue&lt;/code&gt; 에 사용 된 문장 표현 문 안쪽 &lt;code&gt;while&lt;/code&gt; , &lt;code&gt;do&lt;/code&gt; 또는 &lt;code&gt;for&lt;/code&gt; 루프 또는 &lt;code&gt;switch&lt;/code&gt; 문 조건 또는 &lt;code&gt;for&lt;/code&gt; 명령문 INIT 또는 증분 표현 외부 루프 또는 점프 &lt;code&gt;switch&lt;/code&gt; 라도 (그렇지 않으면 에러가) if 문보다는 루프거나 &lt;code&gt;switch&lt;/code&gt; 조건이나 초기화 또는 증가 표현이있는 문장. 어쨌든 함수 호출과 마찬가지로 명령문 표현식의 평가는 포함 표현식의 다른 부분에 대한 평가와 인터리브되지 않습니다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="2b13f70915a333ad1345cb0a713fe0f1d940baa8" translate="yes" xml:space="preserve">
          <source>Jumping or breaking out of the scope of the array name deallocates the storage. Jumping into the scope is not allowed; you get an error message for it.</source>
          <target state="translated">스토리지 이름의 범위를 뛰어 넘거나 벗어나면 스토리지가 할당 해제됩니다. 범위로 뛰어들 수 없습니다. 오류 메시지가 나타납니다.</target>
        </trans-unit>
        <trans-unit id="2a9a31d82aa3cb195cd7f2b75bcdcd8415e308a6" translate="yes" xml:space="preserve">
          <source>Jumping to non-symbolic addresses like so is &lt;em&gt;not&lt;/em&gt; supported:</source>
          <target state="translated">비 심볼릭 주소로 점프하는 &lt;em&gt;것은&lt;/em&gt; 지원 &lt;em&gt;되지 않습니다&lt;/em&gt; :</target>
        </trans-unit>
        <trans-unit id="4dc96847c59ad017e1f52617508661905b7065fb" translate="yes" xml:space="preserve">
          <source>Just generate RTL for a function instead of compiling it. Usually used with</source>
          <target state="translated">함수를 컴파일하는 대신 RTL을 생성하십시오. 보통과 함께 사용</target>
        </trans-unit>
        <trans-unit id="b6334def5a8d3d7ca543dc93313652b70cd20272" translate="yes" xml:space="preserve">
          <source>Just like &amp;lsquo;</source>
          <target state="translated">처럼 '</target>
        </trans-unit>
        <trans-unit id="a7ee38bb7be4fc44198cb2685d9601dcf2b9f569" translate="yes" xml:space="preserve">
          <source>K</source>
          <target state="translated">K</target>
        </trans-unit>
        <trans-unit id="d7ab492f9442aff4c0dfd4b5e856e26a171c2db5" translate="yes" xml:space="preserve">
          <source>K&amp;amp;R compilers allow comments to cross over an inclusion boundary (i.e. started in an include file and ended in the including file).</source>
          <target state="translated">K &amp;amp; R 컴파일러는 주석이 포함 경계를 넘어서도록 허용합니다 (즉, 포함 파일에서 시작하여 포함 파일에서 끝남).</target>
        </trans-unit>
        <trans-unit id="c7dc02334aa94e0bc1283ccc400f189aaa2b7976" translate="yes" xml:space="preserve">
          <source>Keep interrupts masked for the whole function. Without this attribute, GCC tries to reenable interrupts for as much of the function as it can.</source>
          <target state="translated">전체 기능에 대해 인터럽트를 마스크로 유지하십시오. 이 속성이 없으면 GCC는 최대한 많은 기능에 대해 인터럽트를 다시 활성화하려고합니다.</target>
        </trans-unit>
        <trans-unit id="9bd5abe6030f4ef801df883109c611447feb1515" translate="yes" xml:space="preserve">
          <source>Kernel aborts hardware transactions when a syscall is made.</source>
          <target state="translated">시스템 호출이 이루어질 때 커널은 하드웨어 트랜잭션을 중단합니다.</target>
        </trans-unit>
        <trans-unit id="fa7363d164625694d26a815f1f1ab461d3263708" translate="yes" xml:space="preserve">
          <source>Kernel functions may return an integer value, which will be written to a conventional place within the HSA &quot;kernargs&quot; region.</source>
          <target state="translated">커널 함수는 정수 값을 리턴 할 수 있으며, 이는 HSA &quot;kernargs&quot;영역 내의 기존 위치에 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="79669ca4852f608ef4859854a9f05eb011eb9964" translate="yes" xml:space="preserve">
          <source>Kernel functions must have &lt;code&gt;void&lt;/code&gt; return type.</source>
          <target state="translated">커널 함수에는 &lt;code&gt;void&lt;/code&gt; 반환 유형 이 있어야합니다 .</target>
        </trans-unit>
        <trans-unit id="2e3467757c06fe013ec127c6837ec9e8c04f5533" translate="yes" xml:space="preserve">
          <source>Kernel supports system call vectored.</source>
          <target state="translated">커널은 벡터 시스템 호출을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="98c6f61d08ed6b303581b5da803e632e815f9d37" translate="yes" xml:space="preserve">
          <source>Keyword Index</source>
          <target state="translated">키워드 색인</target>
        </trans-unit>
        <trans-unit id="677a50b8d3cbf8979a03912f146968845201059d" translate="yes" xml:space="preserve">
          <source>Known incompatibilities in</source>
          <target state="translated">알려진 비 호환성</target>
        </trans-unit>
        <trans-unit id="1363c20e8e3fef6df75dd6c368cef6c326f7f5b4" translate="yes" xml:space="preserve">
          <source>Ks</source>
          <target state="translated">Ks</target>
        </trans-unit>
        <trans-unit id="d160e0986aca4714714a16f29ec605af90be704d" translate="yes" xml:space="preserve">
          <source>L</source>
          <target state="translated">L</target>
        </trans-unit>
        <trans-unit id="52b1773e986d85ab44b6b67319708dcec8867b79" translate="yes" xml:space="preserve">
          <source>L1</source>
          <target state="translated">L1</target>
        </trans-unit>
        <trans-unit id="a58b12bf79088e3096165fd69c8df55fdc79b2d0" translate="yes" xml:space="preserve">
          <source>L2</source>
          <target state="translated">L2</target>
        </trans-unit>
        <trans-unit id="c6cacbbe61fddf595b9c69dde1c8d5791215fa58" translate="yes" xml:space="preserve">
          <source>L3</source>
          <target state="translated">L3</target>
        </trans-unit>
        <trans-unit id="2b19cf3b0091868fb529b31bfddd152a60a55eab" translate="yes" xml:space="preserve">
          <source>LB0 or LB1.</source>
          <target state="translated">LB0 또는 LB1.</target>
        </trans-unit>
        <trans-unit id="2a9fff255e39d9798525091d476d171d9bad8116" translate="yes" xml:space="preserve">
          <source>LC0 or LC1.</source>
          <target state="translated">LC0 또는 LC1.</target>
        </trans-unit>
        <trans-unit id="c1bbd9d8f7a0645057266fc203d231a2b9fd6447" translate="yes" xml:space="preserve">
          <source>LINK</source>
          <target state="translated">LINK</target>
        </trans-unit>
        <trans-unit id="a63c0879cf0b6bc20feb079506071ad7f50b4d1d" translate="yes" xml:space="preserve">
          <source>LK</source>
          <target state="translated">LK</target>
        </trans-unit>
        <trans-unit id="1460dc33fdc66db88bdcc5b32057457efeed3ce5" translate="yes" xml:space="preserve">
          <source>LL</source>
          <target state="translated">LL</target>
        </trans-unit>
        <trans-unit id="2d4ddf538f5ed7f72f84925d57f9d81bdb15adc1" translate="yes" xml:space="preserve">
          <source>LLK</source>
          <target state="translated">LLK</target>
        </trans-unit>
        <trans-unit id="d05f632a76d9a1d79903317959f2b63e3eb81188" translate="yes" xml:space="preserve">
          <source>LLR</source>
          <target state="translated">LLR</target>
        </trans-unit>
        <trans-unit id="5a87b84b3b674118887667926d107c63ffeeae44" translate="yes" xml:space="preserve">
          <source>LO register.</source>
          <target state="translated">LO 레지스터.</target>
        </trans-unit>
        <trans-unit id="839c009f1a3367ba293a05566e9526487d63b1f0" translate="yes" xml:space="preserve">
          <source>LOW register class $r0 to $r7 constraint for V3/V3M ISA.</source>
          <target state="translated">V3 / V3M ISA에 대한 LOW 레지스터 클래스 $ r0 ~ $ r7 제약 조건</target>
        </trans-unit>
        <trans-unit id="4a810ba5773552ccfceb16825c3062de97c294eb" translate="yes" xml:space="preserve">
          <source>LOW register class $r0 to $r7.</source>
          <target state="translated">LOW 레지스터 클래스 $ r0 ~ $ r7.</target>
        </trans-unit>
        <trans-unit id="777f2196b3ae77b7f9004f0d5204457ba6fda328" translate="yes" xml:space="preserve">
          <source>LR</source>
          <target state="translated">LR</target>
        </trans-unit>
        <trans-unit id="dd5bf7d47a5dfc2bcc529f782c1c637921083216" translate="yes" xml:space="preserve">
          <source>LRA tries to reuse values reloaded in registers in subsequent insns. This optimization is called inheritance. EBB is used as a region to do this optimization. The parameter defines a minimal fall-through edge probability in percentage used to add BB to inheritance EBB in LRA. The default value was chosen from numerous runs of SPEC2000 on x86-64.</source>
          <target state="translated">LRA는 후속 insns에서 레지스터에 다시로드 된 값을 재사용하려고합니다. 이 최적화를 상속이라고합니다. EBB는이 최적화를 수행하기위한 영역으로 사용됩니다. 이 매개 변수는 LRA의 상속 EBB에 BB를 추가하는 데 사용되는 최소 폴 스루 에지 확률 (백분율)을 정의합니다. 기본값은 x86-64의 수많은 SPEC2000 실행에서 선택되었습니다.</target>
        </trans-unit>
        <trans-unit id="d90587b589c74f46158b96dbbda3b4344fcf6bff" translate="yes" xml:space="preserve">
          <source>LT0 or LT1.</source>
          <target state="translated">LT0 또는 LT1.</target>
        </trans-unit>
        <trans-unit id="2b3d31d6443cbf2b24423a06b35596600e0a7620" translate="yes" xml:space="preserve">
          <source>LVX</source>
          <target state="translated">LVX</target>
        </trans-unit>
        <trans-unit id="7176b4dc8a1a51d74af0fbde63da63f37f88fc42" translate="yes" xml:space="preserve">
          <source>LXVD2X</source>
          <target state="translated">LXVD2X</target>
        </trans-unit>
        <trans-unit id="b3c111fd86d80111756f4bb5ad6dfa824a9b5b06" translate="yes" xml:space="preserve">
          <source>LXVW4X</source>
          <target state="translated">LXVW4X</target>
        </trans-unit>
        <trans-unit id="15a5c145bdcbf327e468bccaa0d729366041a2f2" translate="yes" xml:space="preserve">
          <source>Label Attributes</source>
          <target state="translated">라벨 속성</target>
        </trans-unit>
        <trans-unit id="f1f2fa801b970d574f666485e66ee46e097e6427" translate="yes" xml:space="preserve">
          <source>Labeling elements of initializers.</source>
          <target state="translated">이니셜 라이저의 라벨링 요소.</target>
        </trans-unit>
        <trans-unit id="c888c748b45ba92daf2d79e81c7cf808dd705a4f" translate="yes" xml:space="preserve">
          <source>Labeling the elements of an array initializer is especially useful when the indices are characters or belong to an &lt;code&gt;enum&lt;/code&gt; type. For example:</source>
          <target state="translated">배열 이니셜 라이저의 요소에 레이블을 지정하면 인덱스가 문자이거나 &lt;code&gt;enum&lt;/code&gt; 형에 속할 때 특히 유용 합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="38a7b915dc641b14cbc6feadf10219311cdc04e1" translate="yes" xml:space="preserve">
          <source>Labels local to a block.</source>
          <target state="translated">블록의 로컬 레이블.</target>
        </trans-unit>
        <trans-unit id="6ee75bcb65c92d1554d29bd9cffb81123768b4a8" translate="yes" xml:space="preserve">
          <source>Lambdas in default argument scope were mangled incorrectly, and the ABI changed the mangling of &lt;code&gt;nullptr_t&lt;/code&gt;.</source>
          <target state="translated">기본 인수 범위의 &lt;code&gt;nullptr_t&lt;/code&gt; 잘못 엉망이되어 ABI가 nullptr_t 의 맹 글링을 변경했습니다 .</target>
        </trans-unit>
        <trans-unit id="31b2cd938a9a1a76c704d6ed2c1faec141386f9e" translate="yes" xml:space="preserve">
          <source>Language standards include lists of implementation-defined features whose behavior can vary from one implementation to another. Some of these features are normally covered by a platform&amp;rsquo;s ABI and others are not. The features that are not covered by an ABI generally affect how a program behaves, but not intercallability.</source>
          <target state="translated">언어 표준에는 구현마다 기능이 다를 수있는 구현 정의 기능 목록이 포함됩니다. 이러한 기능 중 일부는 일반적으로 플랫폼의 ABI에서 다루고 있으며 다른 기능은 그렇지 않습니다. ABI에서 다루지 않는 기능은 일반적으로 프로그램의 작동 방식에 영향을 주지만 상호 호환성은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="1df11475e10548949860e49ab8d96350fe757add" translate="yes" xml:space="preserve">
          <source>Language standards supported by GCC.</source>
          <target state="translated">GCC가 지원하는 언어 표준.</target>
        </trans-unit>
        <trans-unit id="4ff7fa102d9bdc09ff6c083895f5bd3bb97e528e" translate="yes" xml:space="preserve">
          <source>Language-level support for the &lt;code&gt;__fp16&lt;/code&gt; data type is independent of whether GCC generates code using hardware floating-point instructions. In cases where hardware support is not specified, GCC implements conversions between &lt;code&gt;__fp16&lt;/code&gt; and other types as library calls.</source>
          <target state="translated">&lt;code&gt;__fp16&lt;/code&gt; 데이터 유형에 대한 언어 수준의 지원은 GCC가 하드웨어 부동 소수점 명령어를 사용하여 코드를 생성하는지 여부와 무관합니다. 하드웨어 지원이 지정되지 않은 경우 GCC는 &lt;code&gt;__fp16&lt;/code&gt; 과 다른 유형 간의 변환 을 라이브러리 호출로 구현 합니다.</target>
        </trans-unit>
        <trans-unit id="02d9ef8ac9de5f46ec90bbddc863445931360af6" translate="yes" xml:space="preserve">
          <source>Large model objects may live anywhere in the 32-bit address space (the compiler generates &lt;code&gt;seth/add3&lt;/code&gt; instructions to load their addresses), and may not be reachable with the &lt;code&gt;bl&lt;/code&gt; instruction (the compiler generates the much slower &lt;code&gt;seth/add3/jl&lt;/code&gt; instruction sequence).</source>
          <target state="translated">큰 모델 객체는 32 비트 주소 공간의 어느 곳에 나있을 수 있으며 (컴파일러는 주소를로드하기 위해 &lt;code&gt;seth/add3&lt;/code&gt; 명령어를 생성 함 ) &lt;code&gt;bl&lt;/code&gt; 명령어를 사용하여 도달 할 수 없습니다 (컴파일러는 훨씬 느린 &lt;code&gt;seth/add3/jl&lt;/code&gt; 명령어 시퀀스를 생성 함) ).</target>
        </trans-unit>
        <trans-unit id="56b15737278e77281ea86cb33e6bfea3b4613076" translate="yes" xml:space="preserve">
          <source>Large structures and unions (more than 8 bytes in size) are passed by reference.</source>
          <target state="translated">큰 구조와 공용체 (크기가 8 바이트 이상)는 참조로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="845f3db0a1bdfa4a4a6a24784bed2c78c3d73d36" translate="yes" xml:space="preserve">
          <source>Large structures and unions (more than 8 bytes in size) are passed by value.</source>
          <target state="translated">큰 구조와 공용체 (크기가 8 바이트 이상)는 값으로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="fbce483a4e29ee4ee826175454905da900f5c223" translate="yes" xml:space="preserve">
          <source>Left-shift of -1, i.e., a bit mask with a block of leading ones, the rest being a block of trailing zeroes. Can only match when the</source>
          <target state="translated">-1의 왼쪽 시프트, 즉 선행하는 블록이있는 비트 마스크, 나머지는 후행 0의 블록입니다. 때만 일치</target>
        </trans-unit>
        <trans-unit id="0d3309d83dfe2fdbaa209d32824da64e0abd8ff4" translate="yes" xml:space="preserve">
          <source>Legacy built-in functions for atomic memory access.</source>
          <target state="translated">원자 메모리 액세스를위한 레거시 내장 기능</target>
        </trans-unit>
        <trans-unit id="d3f134d760f872555ad34ce7a9f4ad92b91c73aa" translate="yes" xml:space="preserve">
          <source>Legacy no-op option only recognized with the cris-axis-elf and cris-axis-linux-gnu targets.</source>
          <target state="translated">레거시 no-op 옵션은 cris-axis-elf 및 cris-axis-linux-gnu 대상에서만 인식됩니다.</target>
        </trans-unit>
        <trans-unit id="5d93bdaa6a15d1b6e5450f4302f2f10ba5d010a4" translate="yes" xml:space="preserve">
          <source>Legacy no-op option only recognized with the cris-axis-linux-gnu target.</source>
          <target state="translated">레거시 no-op 옵션은 cris-axis-linux-gnu 대상에서만 인식됩니다.</target>
        </trans-unit>
        <trans-unit id="729d8cfefc7bb0129b3366ff9201b272fb00a79b" translate="yes" xml:space="preserve">
          <source>Legacy register&amp;mdash;the eight integer registers available on all i386 processors (&lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;c&lt;/code&gt;, &lt;code&gt;d&lt;/code&gt;, &lt;code&gt;si&lt;/code&gt;, &lt;code&gt;di&lt;/code&gt;, &lt;code&gt;bp&lt;/code&gt;, &lt;code&gt;sp&lt;/code&gt;).</source>
          <target state="translated">레거시 레지스터 &amp;mdash; 모든 i386 프로세서에서 사용할 수있는 8 개의 정수 레지스터 ( &lt;code&gt;a&lt;/code&gt; , &lt;code&gt;b&lt;/code&gt; , &lt;code&gt;c&lt;/code&gt; , &lt;code&gt;d&lt;/code&gt; , &lt;code&gt;si&lt;/code&gt; , &lt;code&gt;di&lt;/code&gt; , &lt;code&gt;bp&lt;/code&gt; , &lt;code&gt;sp&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="5b44d1d0d4510759a3c61491a4dd93b373221d2d" translate="yes" xml:space="preserve">
          <source>Let the type &lt;code&gt;char&lt;/code&gt; be signed, like &lt;code&gt;signed char&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;signed char&lt;/code&gt; 와 같이 &lt;code&gt;char&lt;/code&gt; 유형에 서명하십시오 .</target>
        </trans-unit>
        <trans-unit id="6457902867bbfc8d3297c809cca5572f5593c486" translate="yes" xml:space="preserve">
          <source>Let the type &lt;code&gt;char&lt;/code&gt; be unsigned, like &lt;code&gt;unsigned char&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;unsigned char&lt;/code&gt; 와 같이 &lt;code&gt;char&lt;/code&gt; 유형을 unsigned로 지정하십시오 .</target>
        </trans-unit>
        <trans-unit id="af97031dc02af16cbf19a3c4518387ba2ca97f37" translate="yes" xml:space="preserve">
          <source>Level 0 produces no debug information at all. Thus,</source>
          <target state="translated">레벨 0은 디버그 정보를 전혀 생성하지 않습니다. 그러므로,</target>
        </trans-unit>
        <trans-unit id="bba17f37af9fce133fba7697c0e9e12ea0d39b41" translate="yes" xml:space="preserve">
          <source>Level 1 produces minimal information, enough for making backtraces in parts of the program that you don&amp;rsquo;t plan to debug. This includes descriptions of functions and external variables, and line number tables, but no information about local variables.</source>
          <target state="translated">레벨 1은 최소한의 정보를 생성하므로 디버그하지 않을 프로그램의 일부에서 역 추적을하기에 충분합니다. 여기에는 함수 및 외부 변수에 대한 설명과 행 번호 테이블이 포함되지만 로컬 변수에 대한 정보는 없습니다.</target>
        </trans-unit>
        <trans-unit id="d762a65225bd923eaa7eb6cfccc522f57266fd45" translate="yes" xml:space="preserve">
          <source>Level 1: Most aggressive, quick, least accurate. Possibly useful when higher levels do not warn but</source>
          <target state="translated">레벨 1 : 가장 공격적이고 빠르며 정확성이 떨어집니다. 더 높은 레벨이 경고하지는 않지만 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2114f8c873951e7bf0e888d70dfdaed1f8aad8ea" translate="yes" xml:space="preserve">
          <source>Level 2: Aggressive, quick, not too precise. May still have many false positives (not as many as level 1 though), and few false negatives (but possibly more than level 1). Unlike level 1, it only warns when an address is taken. Warns about incomplete types. Runs in the front end only.</source>
          <target state="translated">레벨 2 : 공격적이고 빠르며 너무 정확하지 않습니다. 여전히 많은 오 탐지 (수준 1은 아니지만), 오 탐지 (수준 1 이상)를 가질 수 있습니다. 수준 1과 달리 주소를 가져 왔을 때만 경고합니다. 불완전한 유형에 대해 경고합니다. 프론트 엔드에서만 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="eb2071cad03aaa6cfb75d1aaa54d3bb27506dfc4" translate="yes" xml:space="preserve">
          <source>Level 3 (default for</source>
          <target state="translated">레벨 3</target>
        </trans-unit>
        <trans-unit id="0ce56d513e18fc74b46e38940c60751c9b72c15f" translate="yes" xml:space="preserve">
          <source>Level 3 includes extra information, such as all the macro definitions present in the program. Some debuggers support macro expansion when you use</source>
          <target state="translated">레벨 3에는 프로그램에 존재하는 모든 매크로 정의와 같은 추가 정보가 포함됩니다. 일부 디버거는 사용할 때 매크로 확장을 지원합니다</target>
        </trans-unit>
        <trans-unit id="b1f1a50c18e21c2c00d0d4e85425e5638949a006" translate="yes" xml:space="preserve">
          <source>Level &lt;var&gt;1&lt;/var&gt; of</source>
          <target state="translated">레벨 &lt;var&gt;1&lt;/var&gt; 의</target>
        </trans-unit>
        <trans-unit id="c54fbc796919cd07b57056e9dbe5b563f48ca828" translate="yes" xml:space="preserve">
          <source>Level &lt;var&gt;2&lt;/var&gt; warns also about calls that might overflow the destination buffer given an argument of sufficient length or magnitude. At level &lt;var&gt;2&lt;/var&gt;, unknown numeric arguments are assumed to have the minimum representable value for signed types with a precision greater than 1, and the maximum representable value otherwise. Unknown string arguments whose length cannot be assumed to be bounded either by the directive&amp;rsquo;s precision, or by a finite set of string literals they may evaluate to, or the character array they may point to, are assumed to be 1 character long.</source>
          <target state="translated">레벨 &lt;var&gt;2&lt;/var&gt; 는 충분한 길이 또는 크기의 인수가 주어지면 대상 버퍼에 오버 플로우 될 수있는 호출에 대해 경고합니다. 레벨 &lt;var&gt;2&lt;/var&gt; 에서 알 수없는 숫자 인수는 1보다 큰 정밀도를 갖는 부호있는 유형에 대해 최소 표현 가능 값을 갖고 그렇지 않으면 최대 표현 가능 값을 갖는 것으로 가정합니다. 지시문의 정밀도 또는 그들이 평가할 수있는 유한 한 문자열 리터럴 또는 그들이 가리키는 문자 배열에 의해 길이를 제한 할 수없는 알 수없는 문자열 인수는 길이가 1자인 것으로 가정합니다.</target>
        </trans-unit>
        <trans-unit id="0454f6b122dbebade83029a8decf476e445a5d42" translate="yes" xml:space="preserve">
          <source>Level &lt;var&gt;2&lt;/var&gt; warns also about calls to bounded functions whose return value is used and that might result in truncation given an argument of sufficient length or magnitude.</source>
          <target state="translated">레벨 &lt;var&gt;2&lt;/var&gt; 는 리턴 값이 사용되고 충분한 길이 또는 크기의 인수가 주어지면 잘릴 수있는 경계 함수에 대한 호출에 대해서도 경고합니다.</target>
        </trans-unit>
        <trans-unit id="824fa64b61d8962da8b250b2b50781fa7bf2ae81" translate="yes" xml:space="preserve">
          <source>Library code that is intended to operate with more than one UNIX standard must test, set and restore the variable &lt;code&gt;__xpg4_extended_mask&lt;/code&gt; as appropriate. Most GNU software doesn&amp;rsquo;t provide this capability.</source>
          <target state="translated">둘 이상의 UNIX 표준으로 작동하도록 설계된 라이브러리 코드는 변수 &lt;code&gt;__xpg4_extended_mask&lt;/code&gt; 를 적절하게 테스트, 설정 및 복원해야합니다 . 대부분의 GNU 소프트웨어는이 기능을 제공하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7e0ff6d065b5d622b994bd5180d901b19bf13b11" translate="yes" xml:space="preserve">
          <source>Licensed under the GNU Free Documentation License, Version 1.3.</source>
          <target state="translated">GNU Free Documentation License, 버전 1.3에 따라 라이센스가 부여되었습니다.</target>
        </trans-unit>
        <trans-unit id="66c9cac590c3c297cdc00f2956ca0e786df5df3c" translate="yes" xml:space="preserve">
          <source>Lift (do not lift) the usual restrictions on the size of the global offset table.</source>
          <target state="translated">글로벌 오프셋 테이블의 크기에 대한 일반적인 제한을 해제하십시오.</target>
        </trans-unit>
        <trans-unit id="c7e02c95fe85052fcadf9745a5f1d0358088d936" translate="yes" xml:space="preserve">
          <source>Like</source>
          <target state="translated">Like</target>
        </trans-unit>
        <trans-unit id="77afe1cff28c5b328883f684d93ed2aeef7daab3" translate="yes" xml:space="preserve">
          <source>Like %{&lt;code&gt;S&lt;/code&gt;*}, but preserve order of &lt;code&gt;S&lt;/code&gt; and &lt;code&gt;T&lt;/code&gt; options (the order of &lt;code&gt;S&lt;/code&gt; and &lt;code&gt;T&lt;/code&gt; in the spec is not significant). There can be any number of ampersand-separated variables; for each the wild card is optional. Useful for CPP as &amp;lsquo;</source>
          <target state="translated">% { &lt;code&gt;S&lt;/code&gt; *}와 비슷하지만 &lt;code&gt;S&lt;/code&gt; 및 &lt;code&gt;T&lt;/code&gt; 옵션의 순서를 유지 합니다 (사양에서 &lt;code&gt;S&lt;/code&gt; 및 &lt;code&gt;T&lt;/code&gt; 의 순서는 중요하지 않습니다). 앰퍼샌드로 구분 된 변수는 얼마든지있을 수 있습니다. 각각의 와일드 카드는 선택 사항입니다. CPP에 '</target>
        </trans-unit>
        <trans-unit id="79f577cea72e23cf823ebc24c4897a02273dd8c9" translate="yes" xml:space="preserve">
          <source>Like %{&lt;code&gt;S&lt;/code&gt;} but mark last argument supplied within as a file to be deleted on failure.</source>
          <target state="translated">% { &lt;code&gt;S&lt;/code&gt; } 와 유사 하지만 실패시 삭제 될 파일로 제공된 마지막 인수를 표시하십시오.</target>
        </trans-unit>
        <trans-unit id="1b251709afeae3912bdd27abd462e3a66e4fd821" translate="yes" xml:space="preserve">
          <source>Like &amp;lsquo;</source>
          <target state="translated">처럼 '</target>
        </trans-unit>
        <trans-unit id="41ea20d7047cfcc2b60e87742309b580464cc25d" translate="yes" xml:space="preserve">
          <source>Likewise, in C++ this option does not warn about the empty { } initializer, for example:</source>
          <target state="translated">마찬가지로 C ++에서이 옵션은 비어있는 {} 이니셜 라이저에 대해 경고하지 않습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8ec6f3033ac04d064dbd85e82fe18ac287168993" translate="yes" xml:space="preserve">
          <source>Likewise, the &lt;code&gt;tiny&lt;/code&gt; attribute assigned variables to the &lt;code&gt;.tiny&lt;/code&gt; section, relative to the &lt;code&gt;$gp&lt;/code&gt; register.</source>
          <target state="translated">마찬가지로, &lt;code&gt;tiny&lt;/code&gt; 속성 은 &lt;code&gt;$gp&lt;/code&gt; 레지스터를 기준으로 변수를 &lt;code&gt;.tiny&lt;/code&gt; 섹션에 할당했습니다 .</target>
        </trans-unit>
        <trans-unit id="7a4dd85de97bf8049120b5d1c557faa5fe300ece" translate="yes" xml:space="preserve">
          <source>Limit of iterations of the early inliner. This basically bounds the number of nested indirect calls the early inliner can resolve. Deeper chains are still handled by late inlining.</source>
          <target state="translated">초기 라이너의 반복 횟수 제한. 기본적으로 초기 인라이너가 해결할 수있는 중첩 된 간접 호출의 수를 제한합니다. 더 깊은 체인은 여전히 ​​늦은 인라이닝으로 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="b983dd9055ef4d32fadee86fdd79875a7e855312" translate="yes" xml:space="preserve">
          <source>Limit on the number of memory insns per instruction group, giving lower priority to subsequent memory insns attempting to schedule in the same instruction group. Frequently useful to prevent cache bank conflicts. The default value is 1.</source>
          <target state="translated">명령어 그룹당 메모리 인스 턴 수를 제한하여 동일한 명령어 그룹에서 스케줄을 시도하는 후속 메모리 인스 턴 스에 우선 순위를 낮 춥니 다. 캐시 뱅크 충돌을 방지하는 데 유용한 경우가 많습니다. 기본값은 1입니다.</target>
        </trans-unit>
        <trans-unit id="a70b7c5de9a1d5e8251120b6ca320c6c6c75fa0e" translate="yes" xml:space="preserve">
          <source>Limits the maximum number of error messages to &lt;var&gt;n&lt;/var&gt;, at which point GCC bails out rather than attempting to continue processing the source code. If &lt;var&gt;n&lt;/var&gt; is 0 (the default), there is no limit on the number of error messages produced. If</source>
          <target state="translated">최대 오류 메시지 수를 &lt;var&gt;n&lt;/var&gt; 으로 제한합니다 .이 시점에서 GCC는 소스 코드 처리를 계속 시도하지 않고 구제됩니다. 경우 &lt;var&gt;n&lt;/var&gt; 이 0 (기본값)이며, 생산 된 오류 메시지의 수에는 제한이 없습니다. 만약</target>
        </trans-unit>
        <trans-unit id="f308b9feb91b14c5832578dfa2f94356de7bed97" translate="yes" xml:space="preserve">
          <source>Link an RTP executable against shared libraries rather than static libraries. The options</source>
          <target state="translated">정적 라이브러리가 아닌 공유 라이브러리에 대해 RTP 실행 파일을 링크하십시오. 옵션</target>
        </trans-unit>
        <trans-unit id="16f77e4c95fcbb6e20ba75ce78d150f4eaf9adb9" translate="yes" xml:space="preserve">
          <source>Link in code for a __main kernel. This is for stand-alone instead of offloading execution.</source>
          <target state="translated">__main 커널에 대한 코드 링크 이것은 오프로드 실행 대신 독립형입니다.</target>
        </trans-unit>
        <trans-unit id="30bc99cc3fb017ff55a1f1f87a80a4760f7815d2" translate="yes" xml:space="preserve">
          <source>Link the SDRAM-based runtime instead of the default ROM-based runtime.</source>
          <target state="translated">기본 ROM 기반 런타임 대신 SDRAM 기반 런타임을 연결하십시오.</target>
        </trans-unit>
        <trans-unit id="c137658831e051927863f59f7f450e18ce7210e4" translate="yes" xml:space="preserve">
          <source>Link the simulator run-time libraries.</source>
          <target state="translated">시뮬레이터 런타임 라이브러리를 링크하십시오.</target>
        </trans-unit>
        <trans-unit id="13b12041d231abc7fe16df77f8ec7fb7daf8dc5e" translate="yes" xml:space="preserve">
          <source>Link the simulator runtime libraries, excluding built-in support for reset and exception vectors and tables.</source>
          <target state="translated">재설정 및 예외 벡터 및 테이블에 대한 내장 지원을 제외하고 시뮬레이터 런타임 라이브러리를 링크하십시오.</target>
        </trans-unit>
        <trans-unit id="29c8ff029dcea2a75b61b4052124ee024646995e" translate="yes" xml:space="preserve">
          <source>Link to the simulator runtime libraries and linker script. Overrides any scripts that would be selected by the</source>
          <target state="translated">시뮬레이터 런타임 라이브러리 및 링커 스크립트에 링크하십시오. 에 의해 선택된 스크립트를 재정의</target>
        </trans-unit>
        <trans-unit id="183bfc29cd2a03abbb686042f9a4ca4c383469c4" translate="yes" xml:space="preserve">
          <source>Link with HAL BSP. This suppresses linking with the GCC-provided C runtime startup and termination code, and is typically used in conjunction with</source>
          <target state="translated">HAL BSP와 연결하십시오. 이것은 GCC 제공 C 런타임 시작 및 종료 코드와의 연결을 억제하며 일반적으로</target>
        </trans-unit>
        <trans-unit id="c0fd2986ebb288b4c9b093493e94d92f1095ec0c" translate="yes" xml:space="preserve">
          <source>Link with a limited version of the C library,</source>
          <target state="translated">제한된 버전의 C 라이브러리와 연결</target>
        </trans-unit>
        <trans-unit id="b19faca5ebf9a980fbcc46f02ff67771042e4c66" translate="yes" xml:space="preserve">
          <source>Link with the (library, not FD) pic libraries. It&amp;rsquo;s implied by</source>
          <target state="translated">(FD가 아닌 라이브러리) 그림 라이브러리와 연결하십시오. 에 의해 암시</target>
        </trans-unit>
        <trans-unit id="4f4d11e34822b80d223f9c183bca0e0a6766b3d3" translate="yes" xml:space="preserve">
          <source>Link with the POSIX threads library. This option is supported on GNU/Linux targets, most other Unix derivatives, and also on x86 Cygwin and MinGW targets. On some targets this option also sets flags for the preprocessor, so it should be used consistently for both compilation and linking.</source>
          <target state="translated">POSIX 스레드 라이브러리와 연결하십시오. 이 옵션은 GNU / Linux 대상, 대부분의 다른 유닉스 파생물 및 x86 Cygwin 및 MinGW 대상에서도 지원됩니다. 일부 대상에서이 옵션은 프리 프로세서에 대한 플래그도 설정하므로 컴파일 및 링크에 일관되게 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="c906bac82bbb5df605abc23e729b4b1701bc4941" translate="yes" xml:space="preserve">
          <source>Link with the fast floating-point library. This library relaxes some of the IEEE floating-point standard&amp;rsquo;s rules for checking inputs against Not-a-Number (NAN), in the interest of performance.</source>
          <target state="translated">빠른 부동 소수점 라이브러리와 연결하십시오. 이 라이브러리는 성능을 위해 NAN (Not-a-Number)에 대해 입력을 확인하기위한 IEEE 부동 소수점 표준의 규칙 중 일부를 완화합니다.</target>
        </trans-unit>
        <trans-unit id="b550dc9e897489ddd1341876ffdc123faa27e287" translate="yes" xml:space="preserve">
          <source>Link your object files with</source>
          <target state="translated">객체 파일을</target>
        </trans-unit>
        <trans-unit id="d774833bdb5a5925bc007595b1b6b174005be785" translate="yes" xml:space="preserve">
          <source>Link-time optimization does not work well with generation of debugging information on systems other than those using a combination of ELF and DWARF.</source>
          <target state="translated">링크 시간 최적화는 ELF와 DWARF 조합을 사용하는 시스템 이외의 시스템에서 디버깅 정보를 생성 할 때는 제대로 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f2f3f87e5a5b3f8f6c33d21bc1b8346af71cc2c3" translate="yes" xml:space="preserve">
          <source>Link-time optimizations do not require the presence of the whole program to operate. If the program does not require any symbols to be exported, it is possible to combine</source>
          <target state="translated">링크 타임 최적화에는 전체 프로그램이 없어도 작동 할 수 있습니다. 프로그램에서 기호를 내보낼 필요가없는 경우 결합 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="24c04124a55115958a211af083fd534fdc53002f" translate="yes" xml:space="preserve">
          <source>Linker Options</source>
          <target state="translated">링커 옵션</target>
        </trans-unit>
        <trans-unit id="95303c2d5cc82255b1bb2fc85f18b4a1fac41702" translate="yes" xml:space="preserve">
          <source>Linker relaxation must be turned on so that the linker generates the stubs correctly in all situations. See the compiler option</source>
          <target state="translated">모든 상황에서 링커가 스텁을 올바르게 생성하도록 링커 이완을 설정해야합니다. 컴파일러 옵션 참조</target>
        </trans-unit>
        <trans-unit id="c6d173f60116987c8279f2a8ddde8a8365bede1d" translate="yes" xml:space="preserve">
          <source>Links in additional target libraries to support operation within a simulator.</source>
          <target state="translated">시뮬레이터 내에서 작업을 지원하기 위해 추가 대상 라이브러리의 링크.</target>
        </trans-unit>
        <trans-unit id="c48881f1ceb09153d337c9f45781bb9225ee6a40" translate="yes" xml:space="preserve">
          <source>Links the library libsim.a which is in compatible with simulator. Applicable to ELF compiler only.</source>
          <target state="translated">시뮬레이터와 호환되는 라이브러리 libsim.a를 링크합니다. ELF 컴파일러에만 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="094f45d08fa0310d85a106625c3bafcbf0cefe18" translate="yes" xml:space="preserve">
          <source>Load the plugin code in file &lt;var&gt;name&lt;/var&gt;.so, assumed to be a shared object to be dlopen&amp;rsquo;d by the compiler. The base name of the shared object file is used to identify the plugin for the purposes of argument parsing (See</source>
          <target state="translated">파일 &lt;var&gt;name&lt;/var&gt; .so 에 플러그인 코드를로드하십시오 . 컴파일러가 공유 할 객체로 가정합니다. 공유 객체 파일의 기본 이름은 인수 구문 분석을 위해 플러그인을 식별하는 데 사용됩니다 (참조</target>
        </trans-unit>
        <trans-unit id="af513d67ff069a545b837a41325c9329bb4a5695" translate="yes" xml:space="preserve">
          <source>Loads all members of static archive libraries. See man ld(1) for more information.</source>
          <target state="translated">정적 아카이브 라이브러리의 모든 멤버를로드합니다. 자세한 내용은 man ld (1)를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="9aacc3f315098a7f55a89cdd153cf4f07f6c6ab1" translate="yes" xml:space="preserve">
          <source>Local label declarations also make the labels they declare visible to nested functions, if there are any. See &lt;a href=&quot;nested-functions#Nested-Functions&quot;&gt;Nested Functions&lt;/a&gt;, for details.</source>
          <target state="translated">로컬 레이블 선언은 선언 된 레이블이 중첩 된 함수 (있는 경우)에 표시되도록합니다. 자세한 내용은 &lt;a href=&quot;nested-functions#Nested-Functions&quot;&gt;중첩 함수&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="8c89ba18dfdc241d0e38a21c99d9f16612678c7e" translate="yes" xml:space="preserve">
          <source>Local label declarations must come at the beginning of the block, before any ordinary declarations or statements.</source>
          <target state="translated">지역 라벨 선언은 블록의 시작 부분에서 일반적인 선언이나 진술 전에 와야합니다.</target>
        </trans-unit>
        <trans-unit id="0a2b0baaa64ffc83da75538d143a7337686766a9" translate="yes" xml:space="preserve">
          <source>Local static variables and string constants used in an inline function are also considered to have vague linkage, since they must be shared between all inlined and out-of-line instances of the function.</source>
          <target state="translated">인라인 함수에 사용 된 로컬 정적 변수 및 문자열 상수는 함수의 모든 인라인 및 라인 외부 인스턴스간에 공유되어야하기 때문에 모호한 연결을 갖는 것으로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="eb8c869d19686e3e746a324469497d84461ce83e" translate="yes" xml:space="preserve">
          <source>Long-running applications can use the &lt;code&gt;__gcov_reset&lt;/code&gt; and &lt;code&gt;__gcov_dump&lt;/code&gt; facilities to restrict profile collection to the program region of interest. Calling &lt;code&gt;__gcov_reset(void)&lt;/code&gt; will clear all profile counters to zero, and calling &lt;code&gt;__gcov_dump(void)&lt;/code&gt; will cause the profile information collected at that point to be dumped to</source>
          <target state="translated">장기 실행 애플리케이션은 &lt;code&gt;__gcov_reset&lt;/code&gt; 및 &lt;code&gt;__gcov_dump&lt;/code&gt; 기능을 사용하여 프로파일 콜렉션을 관심있는 프로그램 영역으로 제한 할 수 있습니다 . &lt;code&gt;__gcov_reset(void)&lt;/code&gt; 호출 하면 모든 프로필 카운터가 0으로 &lt;code&gt;__gcov_dump(void)&lt;/code&gt; 호출 하면 해당 지점에서 수집 된 프로필 정보가 덤프됩니다.</target>
        </trans-unit>
        <trans-unit id="49a39dd3c9af2f11c14d7122ec26a96b22e43a31" translate="yes" xml:space="preserve">
          <source>Look for identical code sequences. When found, replace one with a jump to the other. This optimization is known as tail merging or cross jumping. This flag is enabled by default at</source>
          <target state="translated">동일한 코드 시퀀스를 찾으십시오. 발견되면 하나를 다른쪽으로 점프로 교체하십시오. 이 최적화를 꼬리 병합 또는 크로스 점프라고합니다. 이 플래그는 기본적으로</target>
        </trans-unit>
        <trans-unit id="3fa0e7ceb193e8314320b38de457e552c3e2c5aa" translate="yes" xml:space="preserve">
          <source>Look in the directory &lt;var&gt;dir&lt;/var&gt; to find the M4 preprocessor. The assembler uses this option.</source>
          <target state="translated">디렉토리 &lt;var&gt;dir&lt;/var&gt; 에서 M4 전처리기를 찾으십시오. 어셈블러는이 옵션을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="13a30c15d1a8fee66ac574506f9ca225db700fd9" translate="yes" xml:space="preserve">
          <source>Loop blocking or strip mining transforms, enabled with</source>
          <target state="translated">루프 블로킹 또는 스트립 마이닝 변환</target>
        </trans-unit>
        <trans-unit id="f11e8d640b392f41511585bd5af9d2be3e825720" translate="yes" xml:space="preserve">
          <source>Loop invariant motion can be very expensive, both in compilation time and in amount of needed compile-time memory, with very large loops. Loops with more basic blocks than this parameter won&amp;rsquo;t have loop invariant motion optimization performed on them.</source>
          <target state="translated">루프 불변 모션은 컴파일 시간과 필요한 컴파일 타임 메모리 양이 매우 큰 루프에서 매우 비쌀 수 있습니다. 이 파라미터보다 기본 블록이 더 많은 루프에는 루프 불변 모션 최적화가 수행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4cb16ca6bdb3a9a863e85db8c5968f1e0bf6cc0d" translate="yes" xml:space="preserve">
          <source>Lower floating-point register. It is only valid on the SPARC-V9 architecture when the Visual Instruction Set is available.</source>
          <target state="translated">낮은 부동 소수점 레지스터 비주얼 명령어 세트가 사용 가능한 경우 SPARC-V9 아키텍처에서만 유효합니다.</target>
        </trans-unit>
        <trans-unit id="d7a0115773cf6a118d1d35b6883d4a563d6abbc2" translate="yes" xml:space="preserve">
          <source>M register</source>
          <target state="translated">M 레지스터</target>
        </trans-unit>
        <trans-unit id="8d3af765ba614f674c663604f980b8895052666f" translate="yes" xml:space="preserve">
          <source>M32C&amp;mdash;</source>
          <target state="translated">M32C&amp;mdash;</target>
        </trans-unit>
        <trans-unit id="a8df7b671cd72e7f847737d5b5be88444ad977a4" translate="yes" xml:space="preserve">
          <source>MAC</source>
          <target state="translated">MAC</target>
        </trans-unit>
        <trans-unit id="8c3145f3cfd5c6713858078af6bf759e2f4a59e6" translate="yes" xml:space="preserve">
          <source>MAC16 40-bit accumulator register</source>
          <target state="translated">MAC16 40 비트 누산기 레지스터</target>
        </trans-unit>
        <trans-unit id="0f03d71ec71f3491c70218ca0cfa61f4e8e3d84c" translate="yes" xml:space="preserve">
          <source>MIDDLE register class $r0 to $r11, $r16 to $r19.</source>
          <target state="translated">MIDDLE 레지스터 클래스 $ r0 ~ $ r11, $ r16 ~ $ r19.</target>
        </trans-unit>
        <trans-unit id="755e1778c2a3e0ab9072480ddcc2c66b6840ed28" translate="yes" xml:space="preserve">
          <source>MIPS instruction</source>
          <target state="translated">MIPS 명령</target>
        </trans-unit>
        <trans-unit id="53cc57a8f3986b6ea7288d7e33347d2a37c3f72e" translate="yes" xml:space="preserve">
          <source>MIPS systems check for division by zero by generating either a conditional trap or a break instruction. Using traps results in smaller code, but is only supported on MIPS II and later. Also, some versions of the Linux kernel have a bug that prevents trap from generating the proper signal (&lt;code&gt;SIGFPE&lt;/code&gt;). Use</source>
          <target state="translated">MIPS 시스템은 조건부 트랩 또는 중단 명령을 생성하여 0으로 나누기를 검사합니다. 트랩을 사용하면 코드가 더 작아 지지만 MIPS II 이상에서만 지원됩니다. 또한 Linux 커널의 일부 버전에는 트랩이 올바른 신호 ( &lt;code&gt;SIGFPE&lt;/code&gt; ) 를 생성하지 못하게하는 버그가 있습니다. 사용하다</target>
        </trans-unit>
        <trans-unit id="b2997691b7ded5a36bc307e55d466f420e6a7d44" translate="yes" xml:space="preserve">
          <source>MIPS&amp;mdash;</source>
          <target state="translated">MIPS&amp;mdash;</target>
        </trans-unit>
        <trans-unit id="93debacda3083d5c50c2a8d0a845161c27cadcbc" translate="yes" xml:space="preserve">
          <source>MIPS16 PC-relative load instructions can access executable sections, but other instructions must not do so. This option is useful on 4KSc and 4KSd processors when the code TLBs have the Read Inhibit bit set. It is also useful on processors that can be configured to have a dual instruction/data SRAM interface and that, like the M4K, automatically redirect PC-relative loads to the instruction RAM.</source>
          <target state="translated">MIPS16 PC 기준로드 명령어는 실행 가능 섹션에 액세스 할 수 있지만 다른 명령어는 액세스 할 수 없습니다. 이 옵션은 코드 TLB에 읽기 금지 비트가 설정되어있는 경우 4KSc 및 4KSd 프로세서에서 유용합니다. 또한 듀얼 명령어 / 데이터 SRAM 인터페이스를 갖도록 구성 할 수 있고 M4K와 같이 PC 기준로드를 명령어 RAM으로 자동 리디렉션하는 프로세서에서도 유용합니다.</target>
        </trans-unit>
        <trans-unit id="7680c5086c2d2c3be19234294beafe41b1321b2e" translate="yes" xml:space="preserve">
          <source>MIPS16 code generation can also be controlled on a per-function basis by means of &lt;code&gt;mips16&lt;/code&gt; and &lt;code&gt;nomips16&lt;/code&gt; attributes. See &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;Function Attributes&lt;/a&gt;, for more information.</source>
          <target state="translated">MIPS16 코드 생성은 &lt;code&gt;mips16&lt;/code&gt; 및 &lt;code&gt;nomips16&lt;/code&gt; 속성을 사용 하여 기능별 로 제어 할 수도 있습니다 . 자세한 내용은 &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;함수 속성&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f62bc918d50dee80474e73d4e09bb21d3bd6591c" translate="yes" xml:space="preserve">
          <source>MMX instructions.</source>
          <target state="translated">MMX 명령어.</target>
        </trans-unit>
        <trans-unit id="9532240b29e5736da38af95cc29d2234e17f7fb1" translate="yes" xml:space="preserve">
          <source>MSA implements 128-bit wide vector registers, operating on 8-, 16-, 32- and 64-bit integer, 16- and 32-bit fixed-point, or 32- and 64-bit floating point data elements. The following vectors typedefs are included in &lt;code&gt;msa.h&lt;/code&gt;:</source>
          <target state="translated">MSA는 8 비트, 16 비트, 32 비트 및 64 비트 정수, 16 비트 및 32 비트 고정 소수점 또는 32 비트 및 64 비트 부동 소수점 데이터 요소에서 작동하는 128 비트 폭의 벡터 레지스터를 구현합니다. 다음 벡터 typedef는 &lt;code&gt;msa.h&lt;/code&gt; 에 포함되어 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d6e9104906df1046e5777ecf3bac7a660a622063" translate="yes" xml:space="preserve">
          <source>MSP430&amp;ndash;</source>
          <target state="translated">MSP430&amp;ndash;</target>
        </trans-unit>
        <trans-unit id="6a3b020a18b6fce95b684c44375e6de9d0b954ea" translate="yes" xml:space="preserve">
          <source>MSVC interprets zero-length bit-fields in the following ways:</source>
          <target state="translated">MSVC는 길이가 0 인 비트 필드를 다음과 같은 방식으로 해석합니다.</target>
        </trans-unit>
        <trans-unit id="21ca2d0714a98e1f72fb1125eb79090aefc4e6c5" translate="yes" xml:space="preserve">
          <source>MUL</source>
          <target state="translated">MUL</target>
        </trans-unit>
        <trans-unit id="d7006438e48554f6ccd522fd6b1594a7b53b7c30" translate="yes" xml:space="preserve">
          <source>Machine-Dependent Options</source>
          <target state="translated">기계 의존적 옵션</target>
        </trans-unit>
        <trans-unit id="16e35af7dbbcf5f7141eba2b5df0cd500275be9b" translate="yes" xml:space="preserve">
          <source>Macro parameters that appear within string literals in the macro body. In traditional C macro replacement takes place within string literals, but in ISO C it does not.</source>
          <target state="translated">매크로 본문의 문자열 리터럴 내에 나타나는 매크로 매개 변수입니다. 전통적인 C 매크로 대체는 문자열 리터럴 내에서 이루어 지지만 ISO C에서는 그렇지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a4db8e30144e72bd37bfd4c74f87ed017510eaa1" translate="yes" xml:space="preserve">
          <source>Macro: &lt;strong id=&quot;index-_005fHTM_005fFIRST_005fUSER_005fABORT_005fCODE&quot;&gt;_HTM_FIRST_USER_ABORT_CODE&lt;/strong&gt;</source>
          <target state="translated">매크로 : &lt;strong id=&quot;index-_005fHTM_005fFIRST_005fUSER_005fABORT_005fCODE&quot;&gt;_HTM_FIRST_USER_ABORT_CODE&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e1b4433995a688704a2c144e5173097b2ce06443" translate="yes" xml:space="preserve">
          <source>Macros for the possible return codes of tbegin are defined in the &lt;code&gt;htmintrin.h&lt;/code&gt; header file:</source>
          <target state="translated">tbegin의 가능한 리턴 코드에 대한 매크로는 &lt;code&gt;htmintrin.h&lt;/code&gt; 헤더 파일에 정의되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="430b5b255ad6e5ab9aa0987e66394d9437143e09" translate="yes" xml:space="preserve">
          <source>Macros with a variable number of arguments.</source>
          <target state="translated">가변 개수의 인수가있는 매크로</target>
        </trans-unit>
        <trans-unit id="e71a69026656b7b52325d6c1690006122a4c1d6e" translate="yes" xml:space="preserve">
          <source>Make &lt;code&gt;int&lt;/code&gt; data 32 bits by default.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 데이터를 기본적으로 32 비트로 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="696d27f734983aca994cd9e82bb950bb7fc9bad4" translate="yes" xml:space="preserve">
          <source>Make all warnings into errors.</source>
          <target state="translated">모든 경고를 오류로 만드십시오.</target>
        </trans-unit>
        <trans-unit id="e5f7eccf3fe006b4aa87bf566d1b5797570440ec" translate="yes" xml:space="preserve">
          <source>Make an assertion with the predicate &lt;var&gt;predicate&lt;/var&gt; and answer &lt;var&gt;answer&lt;/var&gt;. This form is preferred to the older form</source>
          <target state="translated">술어와 주장합니다 &lt;var&gt;predicate&lt;/var&gt; 및 응답 &lt;var&gt;answer&lt;/var&gt; . 이 양식은 이전 양식보다 선호됩니다.</target>
        </trans-unit>
        <trans-unit id="6739da0293bd18a2bc13f558d36b19fd017cf306" translate="yes" xml:space="preserve">
          <source>Make no use of the sections reserved for small data, and use absolute addresses to access all data. Put all initialized global and static data in the &lt;code&gt;.fardata&lt;/code&gt; section, and all uninitialized data in the &lt;code&gt;.far&lt;/code&gt; section. Put all constant data into the &lt;code&gt;.const&lt;/code&gt; section.</source>
          <target state="translated">작은 데이터 용으로 예약 된 섹션을 사용하지 말고 절대 주소를 사용하여 모든 데이터에 액세스하십시오. 초기화 된 모든 전역 및 정적 데이터를 &lt;code&gt;.fardata&lt;/code&gt; 섹션에, 초기화되지 않은 모든 데이터를 &lt;code&gt;.far&lt;/code&gt; 섹션 에 넣습니다 . 모든 상수 데이터를 &lt;code&gt;.const&lt;/code&gt; 섹션에 넣습니다 .</target>
        </trans-unit>
        <trans-unit id="c46a62c755854d2110c054c7e2e3059c8a3f63f2" translate="yes" xml:space="preserve">
          <source>Make partial redundancy elimination (PRE) more aggressive. This flag is enabled by default at</source>
          <target state="translated">부분 중복 제거 (PRE)를보다 적극적으로 만듭니다. 이 플래그는 기본적으로</target>
        </trans-unit>
        <trans-unit id="af5039b69ca9cf8ae8d3afb8f12c7611a14d4025" translate="yes" xml:space="preserve">
          <source>Make the &lt;code&gt;double&lt;/code&gt; data type be 64 bits (</source>
          <target state="translated">만들기 기능 &lt;code&gt;double&lt;/code&gt; (데이터 유형은 64 비트 일</target>
        </trans-unit>
        <trans-unit id="d0bc530ee7775ae5431eaa9e8ce5717c0dbb1d07" translate="yes" xml:space="preserve">
          <source>Make the result of a division yielding a remainder have the same sign as the divisor. With the default,</source>
          <target state="translated">나머지를 산출하는 나눗셈 결과가 제수와 같은 부호를 갖도록하십시오. 기본값으로</target>
        </trans-unit>
        <trans-unit id="b487d8ed2e01a08f064772a395df02d798049c05" translate="yes" xml:space="preserve">
          <source>Make the scheduler assume that the rounding mode has been set to truncating. The default is</source>
          <target state="translated">스케줄러가 반올림 모드가 절단으로 설정되었다고 가정하도록하십시오. 디폴트는</target>
        </trans-unit>
        <trans-unit id="9edc6f02b73d9223d8f5386ad788d88b696b6a9f" translate="yes" xml:space="preserve">
          <source>Make the specified warning into an error. The specifier for a warning is appended; for example</source>
          <target state="translated">지정된 경고를 오류로 만드십시오. 경고 지정자가 추가됩니다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="836efb6e25a091dcb4ff8e1dbb2f0be6a5cbf14c" translate="yes" xml:space="preserve">
          <source>Makefile</source>
          <target state="translated">Makefile</target>
        </trans-unit>
        <trans-unit id="3ff1356273b12f51398317f51507646651eb0368" translate="yes" xml:space="preserve">
          <source>Makes the M32R-specific code in the compiler display some statistics that might help in debugging programs.</source>
          <target state="translated">컴파일러의 M32R 특정 코드가 프로그램 디버깅에 도움이되는 몇 가지 통계를 표시하게합니다.</target>
        </trans-unit>
        <trans-unit id="94aa259bec765e64fb1eb76290c82e5fedd33f3e" translate="yes" xml:space="preserve">
          <source>Makes the compiler output stack usage information for the program, on a per-function basis. The filename for the dump is made by appending</source>
          <target state="translated">컴파일러가 기능별로 프로그램의 스택 사용 정보를 출력하도록합니다. 덤프의 파일 이름은 다음을 추가하여 만듭니다.</target>
        </trans-unit>
        <trans-unit id="bc9710ad8555a938e537b80bcc88d8c3ffa66703" translate="yes" xml:space="preserve">
          <source>Makes the compiler print out each function name as it is compiled, and print some statistics about each pass when it finishes.</source>
          <target state="translated">컴파일러가 컴파일 할 때 각 함수 이름을 인쇄하고 완료시 각 패스에 대한 일부 통계를 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="faffc1a1867ca3fbe9e1f05f5ace551bf601d21a" translate="yes" xml:space="preserve">
          <source>Makes the compiler print some statistics about consistency of the (estimated) profile and effect of individual passes.</source>
          <target state="translated">컴파일러가 (추정 된) 프로파일의 일관성과 개별 패스의 영향에 대한 통계를 인쇄하게합니다.</target>
        </trans-unit>
        <trans-unit id="59718a4c61d99f8f1f1b8a58390e89c6fbed4f36" translate="yes" xml:space="preserve">
          <source>Makes the compiler print some statistics about permanent memory allocation before or after interprocedural optimization.</source>
          <target state="translated">프로세스 간 최적화 전후에 영구 메모리 할당에 대한 일부 통계를 컴파일러가 인쇄하도록합니다.</target>
        </trans-unit>
        <trans-unit id="bacabc371ef6696ef8195cb0c20b2b3601b3574c" translate="yes" xml:space="preserve">
          <source>Makes the compiler print some statistics about permanent memory allocation for the WPA phase only.</source>
          <target state="translated">컴파일러가 WPA 단계의 영구 메모리 할당에 대한 일부 통계 만 인쇄하도록합니다.</target>
        </trans-unit>
        <trans-unit id="834f3f45e4e0af667142767c3590f0cced95ff00" translate="yes" xml:space="preserve">
          <source>Makes the compiler print some statistics about permanent memory allocation when it finishes.</source>
          <target state="translated">컴파일러가 완료되면 영구 메모리 할당에 대한 일부 통계를 인쇄하게합니다.</target>
        </trans-unit>
        <trans-unit id="f5325054aab688a81cbe7f5c61910062f350c9a3" translate="yes" xml:space="preserve">
          <source>Makes the compiler print some statistics about the time consumed by each pass when it finishes.</source>
          <target state="translated">컴파일러에서 각 패스가 완료 될 때 소요되는 시간에 대한 통계를 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="2d929175c558e7d67d7ba83add94ecc2beac4aa0" translate="yes" xml:space="preserve">
          <source>Makes the limit specified by</source>
          <target state="translated">에 의해 지정된 한계를 만듭니다</target>
        </trans-unit>
        <trans-unit id="f1346f72588900d324cb2f158adbed7a88d53077" translate="yes" xml:space="preserve">
          <source>Making</source>
          <target state="translated">Making</target>
        </trans-unit>
        <trans-unit id="595bddc0f32a8f588d6922c81fb74d7fae634597" translate="yes" xml:space="preserve">
          <source>Making bit-fields unsigned by default on particular machines where &amp;ldquo;the ABI standard&amp;rdquo; says to do so.</source>
          <target state="translated">&quot;ABI 표준&quot;에서 지시하는 특정 시스템에서 기본적으로 비트 필드를 부호없는 것으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="05b3e10c8d19a34e29d8509724b7f0aad3359cf7" translate="yes" xml:space="preserve">
          <source>Making certain warnings into errors by default.</source>
          <target state="translated">기본적으로 특정 경고를 오류로 만들기.</target>
        </trans-unit>
        <trans-unit id="d92faee23fb6d55f28742ec136fa1bd3e9c05cb6" translate="yes" xml:space="preserve">
          <source>Making side effects happen in the same order as in some other compiler.</source>
          <target state="translated">부작용은 다른 컴파일러와 같은 순서로 발생합니다.</target>
        </trans-unit>
        <trans-unit id="f9205331ecad8d857088f126ae87013322173454" translate="yes" xml:space="preserve">
          <source>Many GCC back ends support attributes to indicate that a function is an interrupt handler, which tells the compiler to generate function entry and exit sequences that differ from those from regular functions. The exact syntax and behavior are target-specific; refer to the following subsections for details.</source>
          <target state="translated">많은 GCC 백엔드는 함수가 인터럽트 핸들러임을 나타 내기 위해 속성을 지원합니다.이 함수는 컴파일러가 일반 함수와 다른 함수 입력 및 종료 시퀀스를 생성하도록 지시합니다. 정확한 구문과 동작은 대상별로 다릅니다. 자세한 내용은 다음 하위 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="20dac8438e21196731e93d5cfe3efc604c3f8101" translate="yes" xml:space="preserve">
          <source>Many developer options that cause GCC to dump output to a file take an optional &amp;lsquo;</source>
          <target state="translated">GCC가 출력을 파일로 덤프하게하는 많은 개발자 옵션은 선택 사항 인 '</target>
        </trans-unit>
        <trans-unit id="ec306661f7321938ff933dfdb7e414261f882dca" translate="yes" xml:space="preserve">
          <source>Many of the MeP variable attributes may be applied to types as well. Specifically, the &lt;code&gt;based&lt;/code&gt;, &lt;code&gt;tiny&lt;/code&gt;, &lt;code&gt;near&lt;/code&gt;, and &lt;code&gt;far&lt;/code&gt; attributes may be applied to either. The &lt;code&gt;io&lt;/code&gt; and &lt;code&gt;cb&lt;/code&gt; attributes may not be applied to types.</source>
          <target state="translated">많은 MeP 변수 속성이 유형에도 적용될 수 있습니다. 구체적으로, &lt;code&gt;based&lt;/code&gt; , &lt;code&gt;tiny&lt;/code&gt; , &lt;code&gt;near&lt;/code&gt; 및 &lt;code&gt;far&lt;/code&gt; 속성이 둘 중 하나에 적용될 수 있습니다. &lt;code&gt;io&lt;/code&gt; 및 &lt;code&gt;cb&lt;/code&gt; 속성은 유형에 적용되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5786cfab3e759aad2b02b8f7f42d0f70535e297e" translate="yes" xml:space="preserve">
          <source>Many of the architectures support extensions. These can be added by appending &amp;lsquo;</source>
          <target state="translated">많은 아키텍처가 확장을 지원합니다. 이들은 '를 추가하여 추가 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="43e2ed879e507ecad3efbbadd49bc7966af435af" translate="yes" xml:space="preserve">
          <source>Many of the supported CPUs implement optional architectural extensions. Where this is so the architectural extensions are normally enabled by default. If implementations that lack the extension exist, then the extension syntax can be used to disable those extensions that have been omitted. For floating-point and Advanced SIMD (Neon) instructions, the settings of the options</source>
          <target state="translated">지원되는 많은 CPU는 선택적 아키텍처 확장을 구현합니다. 이 경우 아키텍처 확장은 일반적으로 기본적으로 사용됩니다. 확장이없는 구현이 존재하는 경우 확장 구문을 사용하여 생략 된 확장을 비활성화 할 수 있습니다. 부동 소수점 및 고급 SIMD (네온) 명령어의 경우 옵션 설정</target>
        </trans-unit>
        <trans-unit id="93b2a99e63bf1d376f2717070411d9338fcc333f" translate="yes" xml:space="preserve">
          <source>Many options have long names starting with &amp;lsquo;</source>
          <target state="translated">많은 옵션의 이름은 '</target>
        </trans-unit>
        <trans-unit id="069e52b2b7e15ce5d6351adc2098c55a18f4a4d9" translate="yes" xml:space="preserve">
          <source>Many targets have only minimal support for such locks, and do not support a full exchange operation. In this case, a target may support reduced functionality here by which the &lt;em&gt;only&lt;/em&gt; valid value to store is the immediate constant 1. The exact value actually stored in &lt;code&gt;*&lt;var&gt;ptr&lt;/var&gt;&lt;/code&gt; is implementation defined.</source>
          <target state="translated">많은 대상은 이러한 잠금을 최소한으로 만 지원하며 전체 교환 작업을 지원하지 않습니다. 이 경우, 대상이되는 여기 기능 제한 지원할 수 &lt;em&gt;전용&lt;/em&gt; 저장소 유효한 값은 실제로 1 즉치 상수에 저장된 정확한 값 &lt;code&gt;*&lt;var&gt;ptr&lt;/var&gt;&lt;/code&gt; 구현 정의된다.</target>
        </trans-unit>
        <trans-unit id="a63e43a64ed178e397431259869d5b771111a5f4" translate="yes" xml:space="preserve">
          <source>Many user programs contain the declaration &amp;lsquo;</source>
          <target state="translated">많은 사용자 프로그램에는 '</target>
        </trans-unit>
        <trans-unit id="3ee99dca5aca8d2f5d4d021ea57949bcc3ed94ce" translate="yes" xml:space="preserve">
          <source>Many users appreciate the GNU C compiler because it provides an environment that is uniform across machines. These users would be inconvenienced if the compiler treated plain bit-fields differently on certain machines.</source>
          <target state="translated">많은 사용자들이 GNU C 컴파일러는 여러 시스템에서 균일 한 환경을 제공하기 때문에 높이 평가합니다. 컴파일러가 특정 기계에서 일반 비트 필드를 다르게 처리하면 이러한 사용자는 불편을 겪을 것입니다.</target>
        </trans-unit>
        <trans-unit id="7b0beab56a31c0e392b0872e64e6f96b0fc51813" translate="yes" xml:space="preserve">
          <source>Mark (do not mark) calls to &lt;code&gt;__tls_get_addr&lt;/code&gt; with a relocation specifying the function argument. The relocation allows the linker to reliably associate function call with argument setup instructions for TLS optimization, which in turn allows GCC to better schedule the sequence.</source>
          <target state="translated">함수 인수를 지정하는 재배치 로 &lt;code&gt;__tls_get_addr&lt;/code&gt; 에 대한 호출을 표시 (표시 안함 )합니다 . 재배치는 링커가 함수 호출을 TLS 최적화를위한 인수 설정 명령과 안정적으로 연결할 수있게하여 GCC가 시퀀스를 더 잘 예약 할 수있게합니다.</target>
        </trans-unit>
        <trans-unit id="91b6be007d71555c14627786eb97f90fb55842f5" translate="yes" xml:space="preserve">
          <source>Mark the &lt;code&gt;MAC&lt;/code&gt; register as call-clobbered, even if</source>
          <target state="translated">&lt;code&gt;MAC&lt;/code&gt; 레지스터를 콜 클로버로 표시합니다.</target>
        </trans-unit>
        <trans-unit id="7d31a66c9c2397c2a788dd570c0f43a406f8dab4" translate="yes" xml:space="preserve">
          <source>Marks the argument containing or following the &amp;lsquo;</source>
          <target state="translated">'를 포함하거나 따르는 인수를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="3c7709508b83465a998d22e2112b2b63ff657d2b" translate="yes" xml:space="preserve">
          <source>Match vector constant with all 1&amp;rsquo;s if the XXLORC instruction is available.</source>
          <target state="translated">XXLORC 명령이 사용 가능한 경우 벡터 상수를 모두 1과 일치시킵니다.</target>
        </trans-unit>
        <trans-unit id="9358220af2b2c69478912eda2aa639e0354c5d48" translate="yes" xml:space="preserve">
          <source>Matches constants suitable as an operand for the rdprs and cache instructions.</source>
          <target state="translated">rdprs 및 캐시 명령어의 피연산자로 적합한 상수를 일치시킵니다.</target>
        </trans-unit>
        <trans-unit id="122a651c15952f320e43fe812b2b4aa5e823048d" translate="yes" xml:space="preserve">
          <source>Matches control register values to switch fp mode, which are encapsulated in &lt;code&gt;UNSPEC_FP_MODE&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;UNSPEC_FP_MODE&lt;/code&gt; 에 캡슐화 된 fp 모드를 전환하기 위해 제어 레지스터 값을 일치 시킵니다 .</target>
        </trans-unit>
        <trans-unit id="b5b1099792e0d627d4e175f1af231cd030fb5903" translate="yes" xml:space="preserve">
          <source>Matches immediates which are addresses in the small data section and therefore can be added to &lt;code&gt;gp&lt;/code&gt; as a 16-bit immediate to re-create their 32-bit value.</source>
          <target state="translated">작은 데이터 섹션의 주소 인 즉시 일치를 일치하므로 32 비트 값을 다시 작성하기 위해 16 비트 즉시 &lt;code&gt;gp&lt;/code&gt; 에 추가 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bb726d8849c3b68f7756b92dd0e1e79752a43ee7" translate="yes" xml:space="preserve">
          <source>Matches multiple registers in a PARALLEL to form a larger register. Used to match function return values.</source>
          <target state="translated">PARALLEL의 여러 레지스터를 일치시켜 더 큰 레지스터를 형성합니다. 함수 반환 값을 일치시키는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="ee71fb3bf8bbf6c1e95724015a889c77d2a94b09" translate="yes" xml:space="preserve">
          <source>Matches the integer condition code register.</source>
          <target state="translated">정수 조건 코드 레지스터와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="602df055d6d9e229ba210cde48cfc9db36064c83" translate="yes" xml:space="preserve">
          <source>Matches the return address if it can be replaced with the link register.</source>
          <target state="translated">링크 레지스터로 대체 할 수있는 경우 반송 주소와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="3c9fc37f27040f7e45a51ed0b7c4179d3d85e43a" translate="yes" xml:space="preserve">
          <source>Matches the return address if it is in a stack slot.</source>
          <target state="translated">반환 주소가 스택 슬롯에있는 경우 반환 주소와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="9ba05b195e0d365c2d03a54f4554f6eb4199f379" translate="yes" xml:space="preserve">
          <source>Matching constraints are used in these circumstances. More precisely, the two operands that match must include one input-only operand and one output-only operand. Moreover, the digit must be a smaller number than the number of the operand that uses it in the constraint.</source>
          <target state="translated">이러한 상황에서는 일치하는 제한 조건이 사용됩니다. 보다 정확하게 일치하는 두 피연산자에는 하나의 입력 전용 피연산자와 하나의 출력 전용 피연산자가 포함되어야합니다. 또한 숫자는 제한 조건에서 숫자를 사용하는 피연산자 수보다 작은 수 여야합니다.</target>
        </trans-unit>
        <trans-unit id="2ab3c527c8eddfc3d67e7a89fc6dd5d039940af5" translate="yes" xml:space="preserve">
          <source>Max. size of loc list for which reverse ops should be added.</source>
          <target state="translated">최대 역방향 연산을 추가해야하는 위치 목록의 크기입니다.</target>
        </trans-unit>
        <trans-unit id="ea5f0825582cd2fd864fb3cf1499deb7110bf305" translate="yes" xml:space="preserve">
          <source>Maximal number of parallel processes used for LTO streaming.</source>
          <target state="translated">LTO 스트리밍에 사용되는 최대 병렬 프로세스 수</target>
        </trans-unit>
        <trans-unit id="7f5e05f54fa61fe5a8f246a487fe302cefb6c5e5" translate="yes" xml:space="preserve">
          <source>Maximum depth of recursion when querying properties of SSA names in things like fold routines. One level of recursion corresponds to following a use-def chain.</source>
          <target state="translated">접기 루틴과 같은 항목에서 SSA 이름의 속성을 쿼리 할 때 최대 재귀 수준. 한 수준의 재귀는 use-def 체인을 따르는 것에 해당합니다.</target>
        </trans-unit>
        <trans-unit id="13221cf80bfce0800d22289fade0cd0a69971b8f" translate="yes" xml:space="preserve">
          <source>Maximum depth of sqrt chains to use when synthesizing exponentiation by a real constant.</source>
          <target state="translated">지수를 실제 상수로 합성 할 때 사용할 sqrt 체인의 최대 깊이.</target>
        </trans-unit>
        <trans-unit id="c0c313da98791bc0c4df8fec194e4032851773d2" translate="yes" xml:space="preserve">
          <source>Maximum length of the partial antic set computed during the tree partial redundancy elimination optimization (</source>
          <target state="translated">트리 부분 중복 제거 최적화 중 계산 된 부분 고정 세트의 최대 길이 (</target>
        </trans-unit>
        <trans-unit id="61c9dc5b8734c29ef9c0d3d4621d0aa2d06cffa9" translate="yes" xml:space="preserve">
          <source>Maximum loop depth that is value-numbered optimistically. When the limit hits the innermost &lt;var&gt;rpo-vn-max-loop-depth&lt;/var&gt; loops and the outermost loop in the loop nest are value-numbered optimistically and the remaining ones not.</source>
          <target state="translated">낙관적으로 값을 매기는 최대 루프 깊이. 한계가 가장 안쪽 &lt;var&gt;rpo-vn-max-loop-depth&lt;/var&gt; 루프에 도달 하면 루프 네스트의 가장 바깥 쪽 루프는 낙관적으로 값이 번호가 매겨지고 나머지는 그렇지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0f0d9570b94926805a9c160b3e03eb042b4a6ba1" translate="yes" xml:space="preserve">
          <source>Maximum number of NOPs to insert for a branch hint. A branch hint must be at least 8 instructions away from the branch it is affecting. GCC inserts up to &lt;var&gt;n&lt;/var&gt; NOPs to enforce this, otherwise it does not generate the branch hint.</source>
          <target state="translated">분기 힌트에 삽입 할 최대 NOP 수입니다. 분기 힌트는 영향을받는 분기에서 최소 8 개의 명령을 떨어져 있어야합니다. GCC는 이를 적용 하기 위해 최대 &lt;var&gt;n&lt;/var&gt; 개의 NOP를 삽입합니다 . 그렇지 않으면 분기 힌트가 생성되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4a722e07ab0bec0bf3ee43b82969d3fc2f6bd383" translate="yes" xml:space="preserve">
          <source>Maximum number of active local stores in RTL dead store elimination.</source>
          <target state="translated">RTL 사용 불능 상점 제거에서 최대 활성 로컬 상점 수.</target>
        </trans-unit>
        <trans-unit id="c886efdc8c9896a0ccd2a5950bec646558c801d7" translate="yes" xml:space="preserve">
          <source>Maximum number of alias-oracle queries we perform when looking for redundancies for loads and stores. If this limit is hit the search is aborted and the load or store is not considered redundant. The number of queries is algorithmically limited to the number of stores on all paths from the load to the function entry.</source>
          <target state="translated">로드 및 상점에 대한 중복성을 찾을 때 수행하는 최대 별명-오라클 쿼리 수입니다. 이 한계에 도달하면 검색이 중단되고로드 또는 저장은 중복으로 간주되지 않습니다. 쿼리 수는로드에서 함수 항목까지의 모든 경로에 대한 저장소 수로 알고리즘 적으로 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="40ce70e4ec35594c45292851d1fc97bca1f93fad" translate="yes" xml:space="preserve">
          <source>Maximum number of arguments a PHI may have before the FSM threader will not try to thread through its block.</source>
          <target state="translated">FSM 스레 더가 블록을 스레딩하려고 시도하기 전에 PHI가 가질 수있는 최대 인수 수입니다.</target>
        </trans-unit>
        <trans-unit id="572ac21e831e16cc598a1ccce190747c0fe0a851" translate="yes" xml:space="preserve">
          <source>Maximum number of arguments in a PHI supported by TREE if conversion unless the loop is marked with simd pragma.</source>
          <target state="translated">루프가 simd pragma로 표시되지 않은 경우 변환시 TREE가 지원하는 PHI의 최대 인수 수입니다.</target>
        </trans-unit>
        <trans-unit id="589b36d22cf4275cda447d50b0ac46db5e0a33a3" translate="yes" xml:space="preserve">
          <source>Maximum number of arrays per scop.</source>
          <target state="translated">범위 당 최대 배열 수입니다.</target>
        </trans-unit>
        <trans-unit id="bdcc5c505b3b69c4d16ef4963e78842c6e67594d" translate="yes" xml:space="preserve">
          <source>Maximum number of basic blocks on a finite state automaton jump thread path.</source>
          <target state="translated">유한 상태 오토 마톤 점프 스레드 경로의 최대 기본 블록 수.</target>
        </trans-unit>
        <trans-unit id="fb17eeff6bd22da4c5e7f19b721db6c53526d368" translate="yes" xml:space="preserve">
          <source>Maximum number of bits for which we avoid creating FMAs.</source>
          <target state="translated">FMA 작성을 피하는 최대 비트 수입니다.</target>
        </trans-unit>
        <trans-unit id="30b5f824cfde8dee2bdedf2ba978dde1564785de" translate="yes" xml:space="preserve">
          <source>Maximum number of fields in a structure treated in a field sensitive manner during pointer analysis.</source>
          <target state="translated">포인터 분석 중 필드 감지 방식으로 처리 된 구조의 최대 필드 수입니다.</target>
        </trans-unit>
        <trans-unit id="d4134dc374345d0765f3ea81a580857ac5cb4ed0" translate="yes" xml:space="preserve">
          <source>Maximum number of instructions in basic block to be considered for SLP vectorization.</source>
          <target state="translated">SLP 벡터화를 위해 고려할 기본 블록의 최대 명령어 수입니다.</target>
        </trans-unit>
        <trans-unit id="42457c07998415ddf8ec940267b255730a4a1406" translate="yes" xml:space="preserve">
          <source>Maximum number of instructions to copy when duplicating blocks on a finite state automaton jump thread path.</source>
          <target state="translated">유한 상태 오토 마톤 점프 스레드 경로에서 블록을 복제 할 때 복사 할 최대 명령 수.</target>
        </trans-unit>
        <trans-unit id="043a84f32b2827a75a3d5fffbfec3752e8e96315" translate="yes" xml:space="preserve">
          <source>Maximum number of isl operations, 0 means unlimited.</source>
          <target state="translated">최대 isl 연산 수, 0은 무제한을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="089e4eedcc4d7fce822f31faf5865b8d88b44b97" translate="yes" xml:space="preserve">
          <source>Maximum number of nested calls to search for control dependencies during uninitialized variable analysis.</source>
          <target state="translated">초기화되지 않은 변수 분석 중에 제어 종속성을 검색하기위한 최대 중첩 호출 수입니다.</target>
        </trans-unit>
        <trans-unit id="cdafb1be2a6b7f2bb6cbee1daa82d18d0365f67d" translate="yes" xml:space="preserve">
          <source>Maximum number of new jump thread paths to create for a finite state automaton.</source>
          <target state="translated">유한 상태 오토 마톤에 대해 생성 할 최대 새 점프 스레드 경로 수입니다.</target>
        </trans-unit>
        <trans-unit id="fbcf38780774406bc21910d6e71a278137a26943" translate="yes" xml:space="preserve">
          <source>Maximum number of prefetches that can run at the same time.</source>
          <target state="translated">동시에 실행할 수있는 최대 프리 페치 수입니다.</target>
        </trans-unit>
        <trans-unit id="b25f782f3a7332247466bbb1143f9ee42c60e4a2" translate="yes" xml:space="preserve">
          <source>Maximum number of queries into the alias oracle per store. Larger values result in larger compilation times and may result in more removed dead stores.</source>
          <target state="translated">상점 당 별명 oracle에 대한 최대 쿼리 수. 값이 클수록 컴파일 시간이 길어지고 죽은 저장소가 더 많이 제거 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="aad6a4e80018b46f56ebd4f2ff6643d3ee2f5dd4" translate="yes" xml:space="preserve">
          <source>Maximum number of statements allowed in a block that needs to be duplicated when threading jumps.</source>
          <target state="translated">스레딩이 점프 할 때 복제해야하는 블록에 허용되는 최대 명령문 수.</target>
        </trans-unit>
        <trans-unit id="7d85f3b0e525d544a016f8b52d1659de116bb09b" translate="yes" xml:space="preserve">
          <source>Maximum number of strings for which strlen optimization pass will track string lengths.</source>
          <target state="translated">strlen 최적화 패스가 문자열 길이를 추적 할 최대 문자열 수입니다.</target>
        </trans-unit>
        <trans-unit id="2499d3851b3a1006ff7a9c91b972bc98e1f3c29b" translate="yes" xml:space="preserve">
          <source>Maximum permissible cost for the sequence that would be generated by the RTL if-conversion pass for a branch that is considered unpredictable.</source>
          <target state="translated">예측 불가능한 것으로 간주되는 브랜치에 대한 RTL if-conversion 패스에 의해 생성되는 시퀀스의 최대 허용 비용.</target>
        </trans-unit>
        <trans-unit id="767f9d903efd0ff4a8344c917fff822ce2b6a0c7" translate="yes" xml:space="preserve">
          <source>Maximum probability of the entry BB of split region (in percent relative to entry BB of the function) to make partial inlining happen.</source>
          <target state="translated">부분 인라인이 발생할 수있는 분할 영역의 진입 BB (함수의 진입 BB 대비 백분율)의 최대 확률.</target>
        </trans-unit>
        <trans-unit id="826d53c696c4413fae51d040d98d2141b813c688" translate="yes" xml:space="preserve">
          <source>Maximum size (in bytes) of objects tracked bytewise by dead store elimination. Larger values may result in larger compilation times.</source>
          <target state="translated">데드 스토어 제거에 의해 바이트 단위로 추적되는 오브젝트의 최대 크기 (바이트). 값이 클수록 컴파일 시간이 길어질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3468391e63858438bf427dbc2aa9117fe5f50eae" translate="yes" xml:space="preserve">
          <source>Maximum size, in storage units, of an aggregate which should be considered for scalarization when compiling for size.</source>
          <target state="translated">크기를 컴파일 할 때 스칼라 화를 위해 고려해야하는 집계의 최대 크기 (저장 단위).</target>
        </trans-unit>
        <trans-unit id="f73e013e3aecb9c984d3ffea8a7b58955b2a31d2" translate="yes" xml:space="preserve">
          <source>Means (in a particular alternative) that this operand is an &lt;em&gt;earlyclobber&lt;/em&gt; operand, which is written before the instruction is finished using the input operands. Therefore, this operand may not lie in a register that is read by the instruction or as part of any memory address.</source>
          <target state="translated">이 피연산자가 &lt;em&gt;초기 클로버&lt;/em&gt; 피연산자 라는 것을 의미하며 (특별한 대안으로) 입력 피연산자를 사용하여 명령이 완료되기 전에 기록됩니다. 따라서이 피연산자는 명령이 읽거나 메모리 주소의 일부로 읽는 레지스터에 있지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c60d6e2c381a22f526d1f26aefb993f5edf189e6" translate="yes" xml:space="preserve">
          <source>Means that this operand is both read and written by the instruction.</source>
          <target state="translated">이 피연산자는 명령으로 읽고 씁니다.</target>
        </trans-unit>
        <trans-unit id="2114e1da2d86433083c166b08a72e81756397fd2" translate="yes" xml:space="preserve">
          <source>Means that this operand is written to by this instruction: the previous value is discarded and replaced by new data.</source>
          <target state="translated">이 피연산자가이 명령어에 의해 기록됨을 의미합니다. 이전 값은 삭제되고 새 데이터로 대체됩니다.</target>
        </trans-unit>
        <trans-unit id="6f808f76d47dd182d4202b16250325855176057d" translate="yes" xml:space="preserve">
          <source>Medium and large model objects may live anywhere in the 32-bit address space (the compiler generates &lt;code&gt;seth/add3&lt;/code&gt; instructions to load their addresses).</source>
          <target state="translated">중형 및 대형 모델 객체는 32 비트 주소 공간의 어느 곳에 나있을 수 있습니다 (컴파일러는 주소를로드하기 위해 &lt;code&gt;seth/add3&lt;/code&gt; 명령어를 생성 합니다).</target>
        </trans-unit>
        <trans-unit id="6c443fa5ff926841133f0d3b0cafa159cdc4d260" translate="yes" xml:space="preserve">
          <source>Medium model objects may live anywhere in the 32-bit address space (the compiler generates &lt;code&gt;seth/add3&lt;/code&gt; instructions to load their addresses), and are callable with the &lt;code&gt;bl&lt;/code&gt; instruction.</source>
          <target state="translated">중형 모델 객체는 32 비트 주소 공간의 어느 곳에 나있을 수 있으며 (컴파일러는 주소를로드하기 위해 &lt;code&gt;seth/add3&lt;/code&gt; 명령어를 생성 함 ) &lt;code&gt;bl&lt;/code&gt; 명령어를 사용 하여 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1816bc9874f57fd0744de3a08e9bbc26212d5d63" translate="yes" xml:space="preserve">
          <source>Memory address aligned to an 8-byte boundary</source>
          <target state="translated">8 바이트 경계에 정렬 된 메모리 주소</target>
        </trans-unit>
        <trans-unit id="80e77c1231fa820ed79d96ba00ddcfc36b600cd7" translate="yes" xml:space="preserve">
          <source>Memory address for &amp;lsquo;</source>
          <target state="translated">'의 메모리 주소</target>
        </trans-unit>
        <trans-unit id="6fd7afd1540bc925b4192cafdc1eb89b314e4e87" translate="yes" xml:space="preserve">
          <source>Memory address with only a base register</source>
          <target state="translated">기본 레지스터 만있는 메모리 주소</target>
        </trans-unit>
        <trans-unit id="8016c0e813127f0b14241d067584524d2fb58abc" translate="yes" xml:space="preserve">
          <source>Memory addressed using $a0 or $a1.</source>
          <target state="translated">$ a0 또는 $ a1을 사용하여 주소가 지정된 메모리</target>
        </trans-unit>
        <trans-unit id="19355b180625af1511e887291695be8115abc854" translate="yes" xml:space="preserve">
          <source>Memory addressed using the frame base register ($fb).</source>
          <target state="translated">프레임베이스 레지스터 ($ fb)를 사용하여 주소가 지정된 메모리.</target>
        </trans-unit>
        <trans-unit id="bd2f42d7ebfb41d79e7b070e6d81e204e5956c09" translate="yes" xml:space="preserve">
          <source>Memory addressed using the small base register ($sb).</source>
          <target state="translated">작은 기준 레지스터 ($ sb)를 사용하여 주소가 지정된 메모리.</target>
        </trans-unit>
        <trans-unit id="a31b5cbb9421cfaf1ca6e6118f7f198480ffd5d0" translate="yes" xml:space="preserve">
          <source>Memory addressed using the stack pointer ($sp).</source>
          <target state="translated">스택 포인터 ($ sp)를 사용하여 주소가 지정된 메모리.</target>
        </trans-unit>
        <trans-unit id="ed8b1b273dd4024ea1b4fb5dfcca67748288db30" translate="yes" xml:space="preserve">
          <source>Memory addressed with immediate addresses.</source>
          <target state="translated">즉시 주소로 주소가 지정된 메모리.</target>
        </trans-unit>
        <trans-unit id="d949aeb0d10d07472ddfc05e0513ad50740cc00f" translate="yes" xml:space="preserve">
          <source>Memory constraint for 333 format.</source>
          <target state="translated">333 형식의 메모리 제약</target>
        </trans-unit>
        <trans-unit id="20819f1bad9dea4c2ed6e6d52c9387883992ee19" translate="yes" xml:space="preserve">
          <source>Memory constraint for 37 format.</source>
          <target state="translated">37 형식의 메모리 제한 조건.</target>
        </trans-unit>
        <trans-unit id="9724b635833f9bb32c542fbd9e8f144a32f78985" translate="yes" xml:space="preserve">
          <source>Memory constraint for 45 format.</source>
          <target state="translated">45 형식의 메모리 제약.</target>
        </trans-unit>
        <trans-unit id="710841c0621b4f4d84d5446071a071fdd0a85647" translate="yes" xml:space="preserve">
          <source>Memory location with A base register.</source>
          <target state="translated">베이스 레지스터가있는 메모리 위치.</target>
        </trans-unit>
        <trans-unit id="d0f13a219b4363c1a76e520699589392c8f301c5" translate="yes" xml:space="preserve">
          <source>Memory location with B base register.</source>
          <target state="translated">B베이스 레지스터가있는 메모리 위치.</target>
        </trans-unit>
        <trans-unit id="b60300de063f2a19170d8836e4d0898f5e36f8bd" translate="yes" xml:space="preserve">
          <source>Memory operand except postincrement and postdecrement. This is now roughly the same as &amp;lsquo;</source>
          <target state="translated">사후 증가 및 사후 감소를 제외한 메모리 피연산자. 이것은 이제 대략 '</target>
        </trans-unit>
        <trans-unit id="726b825f6cef7945d0f6ab10ee5b3a738b3a1298" translate="yes" xml:space="preserve">
          <source>Memory operand except postincrement. This is roughly the same as &amp;lsquo;</source>
          <target state="translated">후행 증분을 제외한 메모리 피연산자 이것은 대략 '</target>
        </trans-unit>
        <trans-unit id="9f8e3d71a643b481a5cfa4d982a53f85fa84df87" translate="yes" xml:space="preserve">
          <source>Memory operand suitable for TOC fusion memory references.</source>
          <target state="translated">TOC 퓨전 메모리 참조에 적합한 메모리 피연산자.</target>
        </trans-unit>
        <trans-unit id="395edde0171094ec51963bc461e50a1fdafe6cd8" translate="yes" xml:space="preserve">
          <source>Memory operand suitable for power8 GPR load fusion</source>
          <target state="translated">power8 GPR로드 퓨전에 적합한 메모리 피연산자</target>
        </trans-unit>
        <trans-unit id="d0ae7ff34a80944054b2b92c24fc4651c9a64fe8" translate="yes" xml:space="preserve">
          <source>Memory operand that is an indexed or indirect from a register (it is usually better to use &amp;lsquo;</source>
          <target state="translated">레지스터에서 인덱싱되거나 간접적 인 메모리 피연산자 (보통 '</target>
        </trans-unit>
        <trans-unit id="322d0b791caf95d6f4d243275e7ca17b2b23fea0" translate="yes" xml:space="preserve">
          <source>Memory operand that is an offset from a register (it is usually better to use &amp;lsquo;</source>
          <target state="translated">레지스터로부터 오프셋 된 메모리 피연산자 (보통 '</target>
        </trans-unit>
        <trans-unit id="6eb6a34f34e47d870fc9fc3ebc6090ca8be94133" translate="yes" xml:space="preserve">
          <source>Memory operand with address space suitable for &lt;code&gt;buffer_*&lt;/code&gt; instructions</source>
          <target state="translated">&lt;code&gt;buffer_*&lt;/code&gt; 명령어에 적합한 주소 공간을 가진 메모리 피연산자</target>
        </trans-unit>
        <trans-unit id="cc9e26eac7b25747e55d63129414a922494a6c75" translate="yes" xml:space="preserve">
          <source>Memory operand with address space suitable for &lt;code&gt;ds_*&lt;/code&gt; GDS instructions</source>
          <target state="translated">&lt;code&gt;ds_*&lt;/code&gt; GDS 명령어에 적합한 주소 공간을 가진 메모리 피연산자</target>
        </trans-unit>
        <trans-unit id="aa5f1bb18c234a6d4c46e0c3e80dd0ba549aba89" translate="yes" xml:space="preserve">
          <source>Memory operand with address space suitable for &lt;code&gt;ds_*&lt;/code&gt; LDS instructions</source>
          <target state="translated">&lt;code&gt;ds_*&lt;/code&gt; LDS 명령어에 적합한 주소 공간을 가진 메모리 피연산자</target>
        </trans-unit>
        <trans-unit id="8ecc544250973e44d2923d2cc1f917519bef0a1b" translate="yes" xml:space="preserve">
          <source>Memory operand with address space suitable for &lt;code&gt;flat_*&lt;/code&gt; instructions</source>
          <target state="translated">&lt;code&gt;flat_*&lt;/code&gt; 명령어에 적합한 주소 공간을 가진 메모리 피연산자</target>
        </trans-unit>
        <trans-unit id="62c031af02b089c6dc9e937e7f771bf039f5ed68" translate="yes" xml:space="preserve">
          <source>Memory operand with address space suitable for &lt;code&gt;global_*&lt;/code&gt; instructions</source>
          <target state="translated">&lt;code&gt;global_*&lt;/code&gt; 명령어에 적합한 주소 공간을 가진 메모리 피연산자</target>
        </trans-unit>
        <trans-unit id="b20d5fe8b4a80fd5a0e4e0821fedf025aee65a6f" translate="yes" xml:space="preserve">
          <source>Memory operand with address space suitable for &lt;code&gt;s_*&lt;/code&gt; instructions</source>
          <target state="translated">&lt;code&gt;s_*&lt;/code&gt; 명령어에 적합한 주소 공간을 가진 메모리 피연산자</target>
        </trans-unit>
        <trans-unit id="3c72ed35301205786d04b426fbd423f82980b969" translate="yes" xml:space="preserve">
          <source>Memory operand with address space suitable for any &lt;code&gt;ds_*&lt;/code&gt; instructions</source>
          <target state="translated">&lt;code&gt;ds_*&lt;/code&gt; 명령어에 적합한 주소 공간을 가진 메모리 피연산자</target>
        </trans-unit>
        <trans-unit id="b3b8d5b29f09f52cc10de97068861e0316e16bdb" translate="yes" xml:space="preserve">
          <source>Memory operand. If used together with &amp;lsquo;</source>
          <target state="translated">메모리 피연산자 '와 함께 사용하면</target>
        </trans-unit>
        <trans-unit id="43794762a1f7aca8bb2301178d6b63259c1e43f0" translate="yes" xml:space="preserve">
          <source>Memory operand. Normally, &lt;code&gt;m&lt;/code&gt; does not allow addresses that update the base register. If &amp;lsquo;</source>
          <target state="translated">메모리 피연산자 일반적으로 &lt;code&gt;m&lt;/code&gt; 은 기본 레지스터를 업데이트하는 주소를 허용하지 않습니다. 만약 '</target>
        </trans-unit>
        <trans-unit id="7b6b97e91e5eba4011addbf3e10b9e7906bf954c" translate="yes" xml:space="preserve">
          <source>Memory reference with index register and long displacement.</source>
          <target state="translated">인덱스 레지스터 및 긴 변위가있는 메모리 참조</target>
        </trans-unit>
        <trans-unit id="9a94b14171142b859336d46251c8dbf72dc50943" translate="yes" xml:space="preserve">
          <source>Memory reference with index register and short displacement.</source>
          <target state="translated">인덱스 레지스터 및 짧은 변위가있는 메모리 참조.</target>
        </trans-unit>
        <trans-unit id="2fb8b84a962016fd22fbf12ea342e1c40b8035f8" translate="yes" xml:space="preserve">
          <source>Memory reference without index register and with short displacement.</source>
          <target state="translated">인덱스 레지스터가없고 변위가 짧은 메모리 참조.</target>
        </trans-unit>
        <trans-unit id="491e3286e2611a0728ecfa047379f2f749771904" translate="yes" xml:space="preserve">
          <source>Memory reference without index register but with long displacement.</source>
          <target state="translated">인덱스 레지스터는 없지만 변위가 긴 메모리 참조.</target>
        </trans-unit>
        <trans-unit id="d192463d29153e86978cd080b9203a31c83c04dc" translate="yes" xml:space="preserve">
          <source>Memory reference, labels only.</source>
          <target state="translated">메모리 참조, 레이블 만.</target>
        </trans-unit>
        <trans-unit id="d6dcf71bba2aaea0d8eb91702f0ddb76f3ae8a9d" translate="yes" xml:space="preserve">
          <source>Memory reference, stack only.</source>
          <target state="translated">메모리 참조, 스택 만.</target>
        </trans-unit>
        <trans-unit id="5ed985867545880f51ec92077881565ace67d52a" translate="yes" xml:space="preserve">
          <source>Memory references which do not require an extended MOVX instruction.</source>
          <target state="translated">확장 MOVX 명령이 필요없는 메모리 참조</target>
        </trans-unit>
        <trans-unit id="e9bd0686e8657f752b042462e65dc27de9283fa8" translate="yes" xml:space="preserve">
          <source>Merge two profile directories.</source>
          <target state="translated">두 개의 프로파일 디렉토리를 병합하십시오.</target>
        </trans-unit>
        <trans-unit id="9beac7aed0788f045478c01f24626e18230f2cbb" translate="yes" xml:space="preserve">
          <source>Methods for ensuring that exactly one copy of each needed template instantiation is emitted.</source>
          <target state="translated">필요한 각 템플릿 인스턴스화 복사본을 정확히 하나만 생성하는 방법.</target>
        </trans-unit>
        <trans-unit id="34e1239e75b04d5d16e9f47534b6507143dacb84" translate="yes" xml:space="preserve">
          <source>Methods have their &amp;ldquo;signature&amp;rdquo; encoded and made available to the runtime. The &amp;ldquo;signature&amp;rdquo; encodes all the information required to dynamically build invocations of the method at runtime: return type and arguments.</source>
          <target state="translated">메소드는 &quot;서명&quot;이 인코딩되어 런타임에 사용 가능합니다. &quot;서명&quot;은 런타임에 메소드의 호출을 동적으로 빌드하는 데 필요한 모든 정보 (반환 유형 및 인수)를 인코딩합니다.</target>
        </trans-unit>
        <trans-unit id="9bcc3c7c1426d225ece5effb94396a57b559d752" translate="yes" xml:space="preserve">
          <source>MicroBlaze&amp;mdash;</source>
          <target state="translated">MicroBlaze&amp;mdash;</target>
        </trans-unit>
        <trans-unit id="681e43ff8a8ad2e04d5476b27713412d0ec9743e" translate="yes" xml:space="preserve">
          <source>MicroMIPS code generation can also be controlled on a per-function basis by means of &lt;code&gt;micromips&lt;/code&gt; and &lt;code&gt;nomicromips&lt;/code&gt; attributes. See &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;Function Attributes&lt;/a&gt;, for more information.</source>
          <target state="translated">MicroMIPS 코드 생성은 &lt;code&gt;micromips&lt;/code&gt; 및 &lt;code&gt;nomicromips&lt;/code&gt; 속성을 사용 하여 기능별 로 제어 할 수도 있습니다 . 자세한 내용은 &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;함수 속성&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f28083796ccdb1b0e0381b28eea250ff84d72d16" translate="yes" xml:space="preserve">
          <source>Minimal distance (in CPU cycles) between store and load targeting same memory locations.</source>
          <target state="translated">동일한 메모리 위치를 대상으로하는 저장소와로드 사이의 최소 거리 (CPU주기).</target>
        </trans-unit>
        <trans-unit id="d3f9668b22dd267a422611f8c414780110d1ee06" translate="yes" xml:space="preserve">
          <source>Minimum constant stride, in bytes, to start using prefetch hints for. If the stride is less than this threshold, prefetch hints will not be issued.</source>
          <target state="translated">프리 페치 힌트 사용을 시작하기위한 최소 상수 보폭 (바이트)입니다. 보폭이이 임계 값보다 작 으면 프리 페치 힌트가 발행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7e3dd7a86286ca6dab95d9df906d62ffe348d950" translate="yes" xml:space="preserve">
          <source>Minimum size of the garbage collector&amp;rsquo;s heap before it begins bothering to collect garbage. The first collection occurs after the heap expands by</source>
          <target state="translated">가비지 수집을 방해하기 전에 가비지 수집기 힙의 최소 크기입니다. 힙이 다음과 같이 확장 된 후 첫 번째 콜렉션이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="b613e1f4b8036f146dab16e67008c04d77270819" translate="yes" xml:space="preserve">
          <source>Mixing code compiled with</source>
          <target state="translated">믹싱 코드로 컴파일</target>
        </trans-unit>
        <trans-unit id="91a9ca5df98e28a582eb4cbb4190a43f0df2ecc2" translate="yes" xml:space="preserve">
          <source>Mixing declarations and code.</source>
          <target state="translated">선언 및 코드 혼합</target>
        </trans-unit>
        <trans-unit id="8499918b5f737795e8bbab660efce21d3c5e790c" translate="yes" xml:space="preserve">
          <source>Modern architectures (Pentium and newer) prefer &lt;code&gt;long double&lt;/code&gt; to be aligned to an 8- or 16-byte boundary. In arrays or structures conforming to the ABI, this is not possible. So specifying</source>
          <target state="translated">현대식 아키텍처 (Pentium 이상) 는 8 바이트 또는 16 바이트 경계에 맞춰 &lt;code&gt;long double&lt;/code&gt; 을 선호합니다 . ABI를 준수하는 배열 또는 구조에서는 불가능합니다. 따라서 지정</target>
        </trans-unit>
        <trans-unit id="f94eb61ea7bf1171327eb9dfea234ab785c18c4a" translate="yes" xml:space="preserve">
          <source>Modified allocation strategy for large objects: they are always allocated dynamically if their size exceeds a fixed threshold. Note this may change the semantics of some code.</source>
          <target state="translated">큰 객체에 대한 수정 된 할당 전략 : 크기가 고정 임계 값을 초과하면 항상 동적으로 할당됩니다. 이로 인해 일부 코드의 의미가 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f260e757cec75096bc3eefbfb1c4a14720832017" translate="yes" xml:space="preserve">
          <source>Modifier</source>
          <target state="translated">Modifier</target>
        </trans-unit>
        <trans-unit id="b4a423831a1d441cbab7693ff60d9c62d4423efc" translate="yes" xml:space="preserve">
          <source>Modifies the disposition of a diagnostic. Note that not all diagnostics are modifiable; at the moment only warnings (normally controlled by &amp;lsquo;</source>
          <target state="translated">진단 처리를 수정합니다. 모든 진단이 수정 가능한 것은 아닙니다. 현재 경고 만 (일반적으로 '</target>
        </trans-unit>
        <trans-unit id="890e53a0441882d44da0e15084e87441ae507fe0" translate="yes" xml:space="preserve">
          <source>Modify generation of the TOC (Table Of Contents), which is created for every executable file. The</source>
          <target state="translated">모든 실행 파일에 대해 생성되는 TOC (목차) 생성을 수정하십시오. 그만큼</target>
        </trans-unit>
        <trans-unit id="668ffad556934319b2e3f91288f93ce06c2e1fc6" translate="yes" xml:space="preserve">
          <source>Modulo scheduling is performed before traditional scheduling. If a loop is modulo scheduled, later scheduling passes may change its schedule. Use this option to control that behavior.</source>
          <target state="translated">모듈로 스케줄링은 기존의 스케줄링 전에 수행됩니다. 루프가 모듈로 스케쥴 된 경우, 나중의 스케쥴링 패스는 스케쥴을 변경할 수 있습니다. 이 옵션을 사용하여 해당 동작을 제어하십시오.</target>
        </trans-unit>
        <trans-unit id="309f11a63b1640883f46f60897d51ffa5ac37c7f" translate="yes" xml:space="preserve">
          <source>More information about the C++ standards is available on the ISO C++ committee&amp;rsquo;s web site at &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/&quot;&gt;http://www.open-std.org/jtc1/sc22/wg21/&lt;/a&gt;.</source>
          <target state="translated">C ++ 표준에 대한 자세한 내용은 ISO C ++위원회 웹 사이트 ( &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/&quot;&gt;http://www.open-std.org/jtc1/sc22/wg21/)&lt;/a&gt; 에서 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="891aea1007d2562f5d8781c56d5e28eba2deb2bd" translate="yes" xml:space="preserve">
          <source>More precise control over effects of constraints.</source>
          <target state="translated">구속 조건의 영향을보다 정확하게 제어합니다.</target>
        </trans-unit>
        <trans-unit id="2e7b65dfba86234cf0cdfe5374b0beb9b8659875" translate="yes" xml:space="preserve">
          <source>Moreover, code compiled with</source>
          <target state="translated">또한 코드가 컴파일 된</target>
        </trans-unit>
        <trans-unit id="adf990b81f1337b1444660be88bae07e6e0cac89" translate="yes" xml:space="preserve">
          <source>Moreover, the use of type punning or aliasing to toggle the storage order is not supported; that is to say, a given scalar object cannot be accessed through distinct types that assign a different storage order to it.</source>
          <target state="translated">또한 punning 또는 aliasing 유형을 사용하여 스토리지 순서를 전환하는 것은 지원되지 않습니다. 즉, 지정된 스칼라 오브젝트는 다른 스토리지 순서를 지정하는 고유 한 유형을 통해 액세스 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="febc193964e929ae91b44ba37bf5546d8533e106" translate="yes" xml:space="preserve">
          <source>Most everything in this section also applies to template instantiations, but there are other options as well. See &lt;a href=&quot;template-instantiation#Template-Instantiation&quot;&gt;Where&amp;rsquo;s the Template?&lt;/a&gt;.</source>
          <target state="translated">이 섹션의 대부분은 템플릿 인스턴스화에도 적용되지만 다른 옵션도 있습니다. &lt;a href=&quot;template-instantiation#Template-Instantiation&quot;&gt;템플릿이 어디에 있습니까?를&lt;/a&gt; 참조하십시오 . .</target>
        </trans-unit>
        <trans-unit id="7d40be24cbe2715d2c4d11c3fa35ec4a3d0a9578" translate="yes" xml:space="preserve">
          <source>Most extension names are generically named, but have an effect that is dependent upon the architecture to which it is applied. For example, the &amp;lsquo;</source>
          <target state="translated">대부분의 확장명은 일반적으로 이름이 지정되지만 적용되는 아키텍처에 따라 영향을받습니다. 예를 들어 '</target>
        </trans-unit>
        <trans-unit id="c5f693c99cea8fb8e8f90432fa56ecb8806eac99" translate="yes" xml:space="preserve">
          <source>Most of the command-line options that you can use with GCC are useful for C programs; when an option is only useful with another language (usually C++), the explanation says so explicitly. If the description for a particular option does not mention a source language, you can use that option with all supported languages.</source>
          <target state="translated">GCC와 함께 사용할 수있는 대부분의 명령 줄 옵션은 C 프로그램에 유용합니다. 옵션이 다른 언어 (보통 C ++)에서만 유용 할 때, 설명에 명시 적으로 나와 있습니다. 특정 옵션에 대한 설명에 원어가 언급되지 않은 경우 해당 옵션을 지원되는 모든 언어와 함께 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="acb2c4639112cfbd408d303ae398d9ba94841c41" translate="yes" xml:space="preserve">
          <source>Most of the compiler support routines used by GCC are present in</source>
          <target state="translated">GCC가 사용하는 대부분의 컴파일러 지원 루틴은</target>
        </trans-unit>
        <trans-unit id="1190b33357fedbc8e23507d141244cc209f1d4d8" translate="yes" xml:space="preserve">
          <source>Most of the compilers for languages other than C have their own names. The C++ compiler is G++, the Ada compiler is GNAT, and so on. When we talk about compiling one of those languages, we might refer to that compiler by its own name, or as GCC. Either is correct.</source>
          <target state="translated">C 이외의 언어에 대한 대부분의 컴파일러에는 자체 이름이 있습니다. C ++ 컴파일러는 G ++이고 Ada 컴파일러는 GNAT 등입니다. 이러한 언어 중 하나를 컴파일하는 것에 대해 이야기 할 때 해당 컴파일러를 자체 이름 또는 GCC로 지칭 할 수 있습니다. 맞습니다.</target>
        </trans-unit>
        <trans-unit id="9ebf03e9ae1c00e508d3032c0e374949f85bea61" translate="yes" xml:space="preserve">
          <source>Most of the functions are named after specific FR-V instructions. Such functions are said to be &amp;ldquo;directly mapped&amp;rdquo; and are summarized here in tabular form.</source>
          <target state="translated">대부분의 기능은 특정 FR-V 명령의 이름을 따서 명명되었습니다. 이러한 기능은 &quot;직접 매핑 된&quot;것으로 여기에 표 형식으로 요약되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="ec1de17a62dee02240eeb1321c2ac46bdf9cd493" translate="yes" xml:space="preserve">
          <source>Most of them have both positive and negative forms; the negative form of</source>
          <target state="translated">그들 대부분은 긍정적이고 부정적인 형태를 가지고 있습니다. 부정적인 형태</target>
        </trans-unit>
        <trans-unit id="b1d8d32003acecaf71516f0bf879666d3674f7fe" translate="yes" xml:space="preserve">
          <source>Most often, the target has only one flags register, and thus is an implied operand of many instructions. In this case, the operand should not be referenced within the assembler template via &lt;code&gt;%0&lt;/code&gt; etc, as there&amp;rsquo;s no corresponding text in the assembly language.</source>
          <target state="translated">대부분의 경우 대상에는 플래그 레지스터가 하나만 있으므로 많은 명령의 묵시적 피연산자입니다. 이 경우 어셈블리 언어에 해당 텍스트가 없으므로 &lt;code&gt;%0&lt;/code&gt; 등을 통해 어셈블러 템플릿 내에서 피연산자를 참조하면 안됩니다 .</target>
        </trans-unit>
        <trans-unit id="72a8b6a5d1ac7c34e4f61f891ec4a43524ca3b66" translate="yes" xml:space="preserve">
          <source>Most optimizations are completely disabled at</source>
          <target state="translated">대부분의 최적화는</target>
        </trans-unit>
        <trans-unit id="13339d5e377562f5402957b4f49bf4408143bb1e" translate="yes" xml:space="preserve">
          <source>Most platforms have a well-defined ABI that covers C code, but ABIs that cover C++ functionality are not yet common.</source>
          <target state="translated">대부분의 플랫폼에는 C 코드를 다루는 잘 정의 된 ABI가 있지만 C ++ 기능을 다루는 ABI는 아직 일반적이지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a8e025853b5a9c981b9d43c33bfecb537596123d" translate="yes" xml:space="preserve">
          <source>Most targets also support the &lt;code&gt;#pragma scalar_storage_order&lt;/code&gt; directive which lays out structures and unions subsequently defined as the documented &lt;code&gt;__attribute__ ((scalar_storage_order))&lt;/code&gt;.</source>
          <target state="translated">대부분의 대상 은 문서화 된 &lt;code&gt;__attribute__ ((scalar_storage_order))&lt;/code&gt; 로 정의 된 구조 및 공용체를 &lt;code&gt;#pragma scalar_storage_order&lt;/code&gt; 하는 #pragma scalar_storage_order 지시문 도 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="680f79f08cf61810296a4ee80ba892c66f63b64a" translate="yes" xml:space="preserve">
          <source>Most targets do not fully support stack clash protection. However, on those targets</source>
          <target state="translated">대부분의 대상은 스택 충돌 보호를 완전히 지원하지 않습니다. 그러나 그 목표에</target>
        </trans-unit>
        <trans-unit id="5f06e8d5cd2977cd77acb1d757741ee754cd0324" translate="yes" xml:space="preserve">
          <source>Motorola 680x0&amp;mdash;</source>
          <target state="translated">Motorola 680x0&amp;mdash;</target>
        </trans-unit>
        <trans-unit id="bc0a55ab052a1cf243993a46758ac4468d2ab9ba" translate="yes" xml:space="preserve">
          <source>Move branches with loop invariant conditions out of the loop, with duplicates of the loop on both branches (modified according to result of the condition).</source>
          <target state="translated">루프 불변 조건이있는 분기를 루프 외부로 이동하고 두 분기에 루프가 중복 된 상태로 만듭니다 (조건 결과에 따라 수정 됨).</target>
        </trans-unit>
        <trans-unit id="63199cbcf0ab7ca9f987276baf4740a413cbdcc5" translate="yes" xml:space="preserve">
          <source>Move the &lt;var&gt;value&lt;/var&gt; to a system register which is mapped by &lt;var&gt;sr&lt;/var&gt;.</source>
          <target state="translated">&lt;var&gt;sr&lt;/var&gt; 에 의해 맵핑 된 시스템 레지스터로 &lt;var&gt;value&lt;/var&gt; 을 이동하십시오 .</target>
        </trans-unit>
        <trans-unit id="33c97514f5bf6de502b66a5aa354c1dad01c6126" translate="yes" xml:space="preserve">
          <source>Move the &lt;var&gt;value&lt;/var&gt; to a user space register which is mapped by &lt;var&gt;usr&lt;/var&gt;.</source>
          <target state="translated">&lt;var&gt;usr&lt;/var&gt; 에 의해 맵핑 된 사용자 공간 레지스터로 &lt;var&gt;value&lt;/var&gt; 을 이동하십시오 .</target>
        </trans-unit>
        <trans-unit id="eb9a4be488e6008421357ab2ff673c8e64152c81" translate="yes" xml:space="preserve">
          <source>Moxie&amp;mdash;</source>
          <target state="translated">Moxie&amp;mdash;</target>
        </trans-unit>
        <trans-unit id="80dab88409d45dd9de9b88f85e2a723d26ebf56e" translate="yes" xml:space="preserve">
          <source>Multiple assembler dialects in asm templates</source>
          <target state="translated">asm 템플릿의 여러 어셈블러 방언</target>
        </trans-unit>
        <trans-unit id="9de74906ae73e7abba43283a9f21b04f2a29dff4" translate="yes" xml:space="preserve">
          <source>Multiple letter constraint followed by 4 parameter letters.</source>
          <target state="translated">여러 문자 제약 조건 뒤에 4 개의 매개 변수 문자가옵니다.</target>
        </trans-unit>
        <trans-unit id="e770571f058fffa700a47b602bc309e830c8be32" translate="yes" xml:space="preserve">
          <source>Multiple target back ends implement the &lt;code&gt;target&lt;/code&gt; attribute to specify that a function is to be compiled with different target options than specified on the command line. One or more strings can be provided as arguments. Each string consists of one or more comma-separated suffixes to the &lt;code&gt;-m&lt;/code&gt; prefix jointly forming the name of a machine-dependent option. See &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;Machine-Dependent Options&lt;/a&gt;.</source>
          <target state="translated">여러 대상 백엔드는 &lt;code&gt;target&lt;/code&gt; 속성을 구현 하여 명령 행에 지정된 것과 다른 대상 옵션으로 함수를 컴파일하도록 지정합니다. 하나 이상의 문자열을 인수로 제공 할 수 있습니다. 각 문자열은 기계 종속 옵션의 이름을 함께 형성하는 &lt;code&gt;-m&lt;/code&gt; 접두어에 쉼표로 구분 된 하나 이상의 접미어로 구성됩니다 . &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;시스템 종속 옵션을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a4396298dd3704b78e29e91eb801be9008be9b13" translate="yes" xml:space="preserve">
          <source>Multiple target function attributes can be specified by separating them with a comma. For example:</source>
          <target state="translated">쉼표로 구분하여 여러 대상 함수 속성을 지정할 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b51a60734da64be0e618bacbea2865a8a7dcd669" translate="yes" xml:space="preserve">
          <source>N</source>
          <target state="translated">N</target>
        </trans-unit>
        <trans-unit id="d47079447b5192867c512bdf89a4a9e7c7709e69" translate="yes" xml:space="preserve">
          <source>NDS32&amp;mdash;</source>
          <target state="translated">NDS32&amp;mdash;</target>
        </trans-unit>
        <trans-unit id="78be6d596f33b13713a69551887b4126e05649fd" translate="yes" xml:space="preserve">
          <source>Name lookup, templates, and accessing members of base classes</source>
          <target state="translated">기본 클래스의 이름 조회, 템플릿 및 액세스 멤버</target>
        </trans-unit>
        <trans-unit id="6bf295b51885097e115a84abf80cc7c9c2b12295" translate="yes" xml:space="preserve">
          <source>Named address spaces.</source>
          <target state="translated">명명 된 주소 공간.</target>
        </trans-unit>
        <trans-unit id="a4ab2153cb6be3e36eb0fcd0a7825c61609ceaad" translate="yes" xml:space="preserve">
          <source>Names of the form &amp;lsquo;</source>
          <target state="translated">'형식의 이름</target>
        </trans-unit>
        <trans-unit id="1336c32a57f6fa7a94ca832ea1140308c1cfda6d" translate="yes" xml:space="preserve">
          <source>Native Solaris and GNU/Linux toolchains also support the value &amp;lsquo;</source>
          <target state="translated">기본 Solaris 및 GNU / Linux 툴체인도 '</target>
        </trans-unit>
        <trans-unit id="b3056b4ea8ff67d4c00fc41091b2da5034d1c693" translate="yes" xml:space="preserve">
          <source>Native toolchains also support the value &amp;lsquo;</source>
          <target state="translated">기본 툴체인은 '</target>
        </trans-unit>
        <trans-unit id="e0fd58db30cdaf4cb3c4fd21f7b593b6b094b957" translate="yes" xml:space="preserve">
          <source>Negative immediate 3-bit value in the range of -7&amp;ndash;0.</source>
          <target state="translated">-7&amp;ndash;0 범위의 음의 즉각적인 3 비트 값.</target>
        </trans-unit>
        <trans-unit id="0d4f32cb70c5a0b5302d7743ef92c572d8bfa6ca" translate="yes" xml:space="preserve">
          <source>Negative immediate 5-bit value in the range of -31&amp;ndash;0.</source>
          <target state="translated">-31&amp;ndash;0 범위의 음의 즉각적인 5 비트 값.</target>
        </trans-unit>
        <trans-unit id="71694791d6e9d1c29e62638d006d5804c95dc93f" translate="yes" xml:space="preserve">
          <source>Nested function definitions are permitted within functions in the places where variable definitions are allowed; that is, in any block, mixed with the other declarations and statements in the block.</source>
          <target state="translated">변수 정의가 허용되는 장소의 함수 내에서 중첩 함수 정의가 허용됩니다. 즉, 모든 블록에서 블록의 다른 선언 및 명령문과 혼합됩니다.</target>
        </trans-unit>
        <trans-unit id="84649f23eec8b1bfced1d736ab0e7d0fe45ad88e" translate="yes" xml:space="preserve">
          <source>Nested function in GNU C.</source>
          <target state="translated">GNU C의 중첩 함수</target>
        </trans-unit>
        <trans-unit id="1c944bbfb1ff1467c254709da889e90dec614ba4" translate="yes" xml:space="preserve">
          <source>Never emit code for non-inline templates that are instantiated implicitly (i.e. by use); only emit code for explicit instantiations. If you use this option, you must take care to structure your code to include all the necessary explicit instantiations to avoid getting undefined symbols at link time. See &lt;a href=&quot;template-instantiation#Template-Instantiation&quot;&gt;Template Instantiation&lt;/a&gt;, for more information.</source>
          <target state="translated">암시 적으로 (즉, 사용하여) 인스턴스화 된 비 인라인 템플릿에 대한 코드를 생성하지 마십시오. 명시 적 인스턴스화를위한 코드 만 내 보냅니다. 이 옵션을 사용하는 경우 링크 타임에 정의되지 않은 기호가 표시되지 않도록 필요한 모든 명시 적 인스턴스화를 포함하도록 코드를 구성해야합니다. 자세한 내용은 &lt;a href=&quot;template-instantiation#Template-Instantiation&quot;&gt;템플릿 인스턴스화&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="6b21656ef9d79508ea751427cbd57eb0d5a98aa9" translate="yes" xml:space="preserve">
          <source>Never overload &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt;, or &lt;code&gt;,&lt;/code&gt;.</source>
          <target state="translated">과부하 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; , &lt;code&gt;||&lt;/code&gt; 또는 &lt;code&gt;,&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="43c43b1684ea4228e8802bcaf7a852eddb77acea" translate="yes" xml:space="preserve">
          <source>New section before &lt;b&gt;[basic.stc.static]&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;[basic.stc.static]&lt;/b&gt; 이전의 새로운 섹션&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="0f4b3722af5b863a5c080de35be82beff787b2b2" translate="yes" xml:space="preserve">
          <source>New text after paragraph 4</source>
          <target state="translated">단락 4 이후의 새로운 텍스트</target>
        </trans-unit>
        <trans-unit id="56621f3d816c878efbdea614a3b709091bf122a4" translate="yes" xml:space="preserve">
          <source>New text after paragraph 7</source>
          <target state="translated">단락 7 이후의 새로운 텍스트</target>
        </trans-unit>
        <trans-unit id="05170b2e793e467768f1d82454f9339473b0d422" translate="yes" xml:space="preserve">
          <source>Newlines can be included in the string by using the &amp;lsquo;</source>
          <target state="translated">'를 사용하여 줄 바꿈을 문자열에 포함시킬 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="70245ce57efdc3e1caea9514e35f3efb5802f457" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;_005f_005fatomic-builtins#g_t_005f_005fatomic-Builtins&quot;&gt;__atomic Builtins&lt;/a&gt;, Previous: &lt;a href=&quot;offsetof#Offsetof&quot;&gt;Offsetof&lt;/a&gt;, Up: &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;_005f_005fatomic-builtins#g_t_005f_005fatomic-Builtins&quot;&gt;__atomic Builtins&lt;/a&gt; , 이전 : &lt;a href=&quot;offsetof#Offsetof&quot;&gt;Offsetof&lt;/a&gt; , 위로 : &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C 확장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="d0a48afe8e16b41b0fc16e460948d7ac8286cf6e" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;aarch64-function-attributes#AArch64-Function-Attributes&quot;&gt;AArch64 Function Attributes&lt;/a&gt;, Up: &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;Function Attributes&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;aarch64-function-attributes#AArch64-Function-Attributes&quot;&gt;AArch64 함수 속성&lt;/a&gt; , 위로 : &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;함수 속성&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="5b9efe2f8173cdf6bd44c14a37c130fc2b149d4e" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;adapteva-epiphany-options#Adapteva-Epiphany-Options&quot;&gt;Adapteva Epiphany Options&lt;/a&gt;, Up: &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;Submodel Options&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;adapteva-epiphany-options#Adapteva-Epiphany-Options&quot;&gt;Adapteva Epiphany Options&lt;/a&gt; , Up : 하위 모델 &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;옵션&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="1813414d0f404825f36b041f60b2e4a78f56ca7a" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;altera-nios-ii-built_002din-functions#Altera-Nios-II-Built_002din-Functions&quot;&gt;Altera Nios II Built-in Functions&lt;/a&gt;, Previous: &lt;a href=&quot;aarch64-built_002din-functions#AArch64-Built_002din-Functions&quot;&gt;AArch64 Built-in Functions&lt;/a&gt;, Up: &lt;a href=&quot;target-builtins#Target-Builtins&quot;&gt;Target Builtins&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;altera-nios-ii-built_002din-functions#Altera-Nios-II-Built_002din-Functions&quot;&gt;Altera Nios II 내장 함수&lt;/a&gt; , 이전 : &lt;a href=&quot;aarch64-built_002din-functions#AArch64-Built_002din-Functions&quot;&gt;AArch64 내장 함수&lt;/a&gt; , 위 : &lt;a href=&quot;target-builtins#Target-Builtins&quot;&gt;대상 내장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="3c0ea55a43d31fe8e1228f4d2fe258928718e217" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;amd-gcn-function-attributes#AMD-GCN-Function-Attributes&quot;&gt;AMD GCN Function Attributes&lt;/a&gt;, Previous: &lt;a href=&quot;common-function-attributes#Common-Function-Attributes&quot;&gt;Common Function Attributes&lt;/a&gt;, Up: &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;Function Attributes&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;amd-gcn-function-attributes#AMD-GCN-Function-Attributes&quot;&gt;AMD GCN 기능 속성&lt;/a&gt; , 이전 : &lt;a href=&quot;common-function-attributes#Common-Function-Attributes&quot;&gt;공통 기능 속성&lt;/a&gt; , 위로 : &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;기능 속성&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="70100ee7e2f41c7b93397b162f6e2a6abc22d01f" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;amd-gcn-options#AMD-GCN-Options&quot;&gt;AMD GCN Options&lt;/a&gt;, Previous: &lt;a href=&quot;aarch64-options#AArch64-Options&quot;&gt;AArch64 Options&lt;/a&gt;, Up: &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;Submodel Options&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;amd-gcn-options#AMD-GCN-Options&quot;&gt;AMD GCN 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;aarch64-options#AArch64-Options&quot;&gt;AArch64 옵션&lt;/a&gt; , 위 : 하위 모델 &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;옵션&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="4cb1e4a9a9e63dd42867dc79517b29a31e68be46" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;arc-built_002din-functions#ARC-Built_002din-Functions&quot;&gt;ARC Built-in Functions&lt;/a&gt;, Previous: &lt;a href=&quot;alpha-built_002din-functions#Alpha-Built_002din-Functions&quot;&gt;Alpha Built-in Functions&lt;/a&gt;, Up: &lt;a href=&quot;target-builtins#Target-Builtins&quot;&gt;Target Builtins&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;arc-built_002din-functions#ARC-Built_002din-Functions&quot;&gt;ARC 내장 함수&lt;/a&gt; , 이전 : &lt;a href=&quot;alpha-built_002din-functions#Alpha-Built_002din-Functions&quot;&gt;알파 내장 함수&lt;/a&gt; , 위 : &lt;a href=&quot;target-builtins#Target-Builtins&quot;&gt;대상 내장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="31a215e4e68ba7a420a8804e0b1706714501c5c8" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;arc-function-attributes#ARC-Function-Attributes&quot;&gt;ARC Function Attributes&lt;/a&gt;, Previous: &lt;a href=&quot;aarch64-function-attributes#AArch64-Function-Attributes&quot;&gt;AArch64 Function Attributes&lt;/a&gt;, Up: &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;Function Attributes&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;arc-function-attributes#ARC-Function-Attributes&quot;&gt;ARC 기능 속성&lt;/a&gt; , 이전 : &lt;a href=&quot;aarch64-function-attributes#AArch64-Function-Attributes&quot;&gt;AArch64 기능 속성&lt;/a&gt; , 위쪽 : &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;기능 속성&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="147e41ead4720ef719588c676ba877719163d3ad" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;arc-simd-built_002din-functions#ARC-SIMD-Built_002din-Functions&quot;&gt;ARC SIMD Built-in Functions&lt;/a&gt;, Previous: &lt;a href=&quot;altera-nios-ii-built_002din-functions#Altera-Nios-II-Built_002din-Functions&quot;&gt;Altera Nios II Built-in Functions&lt;/a&gt;, Up: &lt;a href=&quot;target-builtins#Target-Builtins&quot;&gt;Target Builtins&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;arc-simd-built_002din-functions#ARC-SIMD-Built_002din-Functions&quot;&gt;ARC SIMD 내장 함수&lt;/a&gt; , 이전 : &lt;a href=&quot;altera-nios-ii-built_002din-functions#Altera-Nios-II-Built_002din-Functions&quot;&gt;Altera Nios II 내장 함수&lt;/a&gt; , 위 : &lt;a href=&quot;target-builtins#Target-Builtins&quot;&gt;대상 내장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="e97ceb1d051dc24c90641314f2611198b270e109" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;arc-type-attributes#ARC-Type-Attributes&quot;&gt;ARC Type Attributes&lt;/a&gt;, Up: &lt;a href=&quot;type-attributes#Type-Attributes&quot;&gt;Type Attributes&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;arc-type-attributes#ARC-Type-Attributes&quot;&gt;ARC 유형 속성&lt;/a&gt; , 위 : &lt;a href=&quot;type-attributes#Type-Attributes&quot;&gt;유형 속성&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="f635fc92a5903ec23fae3ef5b2a92dedf6a126a0" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;arc-variable-attributes#ARC-Variable-Attributes&quot;&gt;ARC Variable Attributes&lt;/a&gt;, Up: &lt;a href=&quot;variable-attributes#Variable-Attributes&quot;&gt;Variable Attributes&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;arc-variable-attributes#ARC-Variable-Attributes&quot;&gt;ARC 변수 속성&lt;/a&gt; , 위로 : &lt;a href=&quot;variable-attributes#Variable-Attributes&quot;&gt;변수 속성&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="3c3204552edd900b447b35c2adcb689231e7c4da" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;arm-c-language-extensions-_0028acle_0029#ARM-C-Language-Extensions-_0028ACLE_0029&quot;&gt;ARM C Language Extensions (ACLE)&lt;/a&gt;, Previous: &lt;a href=&quot;arc-simd-built_002din-functions#ARC-SIMD-Built_002din-Functions&quot;&gt;ARC SIMD Built-in Functions&lt;/a&gt;, Up: &lt;a href=&quot;target-builtins#Target-Builtins&quot;&gt;Target Builtins&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;arm-c-language-extensions-_0028acle_0029#ARM-C-Language-Extensions-_0028ACLE_0029&quot;&gt;ARM C 언어 확장 (ACLE)&lt;/a&gt; , 이전 : &lt;a href=&quot;arc-simd-built_002din-functions#ARC-SIMD-Built_002din-Functions&quot;&gt;ARC SIMD 내장 함수&lt;/a&gt; , 위 : &lt;a href=&quot;target-builtins#Target-Builtins&quot;&gt;대상 내장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="e8fcd8a30d6e61c9db63695220db338c5df2d81b" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;arm-function-attributes#ARM-Function-Attributes&quot;&gt;ARM Function Attributes&lt;/a&gt;, Previous: &lt;a href=&quot;amd-gcn-function-attributes#AMD-GCN-Function-Attributes&quot;&gt;AMD GCN Function Attributes&lt;/a&gt;, Up: &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;Function Attributes&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;arm-function-attributes#ARM-Function-Attributes&quot;&gt;ARM 함수 속성&lt;/a&gt; , 이전 : &lt;a href=&quot;amd-gcn-function-attributes#AMD-GCN-Function-Attributes&quot;&gt;AMD GCN 함수 속성&lt;/a&gt; , 위로 : &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;함수 속성&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="a586aa6fedf14d4c5eae39a530f4a311eed97dfa" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;arm-iwmmxt-built_002din-functions#ARM-iWMMXt-Built_002din-Functions&quot;&gt;ARM iWMMXt Built-in Functions&lt;/a&gt;, Previous: &lt;a href=&quot;arc-built_002din-functions#ARC-Built_002din-Functions&quot;&gt;ARC Built-in Functions&lt;/a&gt;, Up: &lt;a href=&quot;target-builtins#Target-Builtins&quot;&gt;Target Builtins&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;arm-iwmmxt-built_002din-functions#ARM-iWMMXt-Built_002din-Functions&quot;&gt;ARM iWMMXt 내장 함수&lt;/a&gt; , 이전 : &lt;a href=&quot;arc-built_002din-functions#ARC-Built_002din-Functions&quot;&gt;ARC 내장 함수&lt;/a&gt; , 위 : &lt;a href=&quot;target-builtins#Target-Builtins&quot;&gt;대상 내장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="b675b0ce96378ae234994ec166edcd1d49df26b2" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;arm-options#ARM-Options&quot;&gt;ARM Options&lt;/a&gt;, Previous: &lt;a href=&quot;amd-gcn-options#AMD-GCN-Options&quot;&gt;AMD GCN Options&lt;/a&gt;, Up: &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;Submodel Options&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;arm-options#ARM-Options&quot;&gt;ARM 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;amd-gcn-options#AMD-GCN-Options&quot;&gt;AMD GCN 옵션&lt;/a&gt; , 위로 : &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;하위 모델 옵션&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="54038c649f1606782dd5aeef09e9af11dba5323b" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;arrays-and-pointers-implementation#Arrays-and-pointers-implementation&quot;&gt;Arrays and pointers implementation&lt;/a&gt;, Previous: &lt;a href=&quot;integers-implementation#Integers-implementation&quot;&gt;Integers implementation&lt;/a&gt;, Up: &lt;a href=&quot;c-implementation#C-Implementation&quot;&gt;C Implementation&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;arrays-and-pointers-implementation#Arrays-and-pointers-implementation&quot;&gt;배열 및 포인터 구현&lt;/a&gt; , 이전 : &lt;a href=&quot;integers-implementation#Integers-implementation&quot;&gt;정수 구현&lt;/a&gt; , Up : &lt;a href=&quot;c-implementation#C-Implementation&quot;&gt;C 구현&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="a95fffc68d4e3182c059646f21cc1e56f424ab07" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;assembler-options#Assembler-Options&quot;&gt;Assembler Options&lt;/a&gt;, Previous: &lt;a href=&quot;instrumentation-options#Instrumentation-Options&quot;&gt;Instrumentation Options&lt;/a&gt;, Up: &lt;a href=&quot;invoking-gcc#Invoking-GCC&quot;&gt;Invoking GCC&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;assembler-options#Assembler-Options&quot;&gt;어셈블러 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;instrumentation-options#Instrumentation-Options&quot;&gt;계측 옵션&lt;/a&gt; , 위로 : &lt;a href=&quot;invoking-gcc#Invoking-GCC&quot;&gt;GCC 호출&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="7ed4ff21f88f81ed51c61d14683ba7ddb0ac574c" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;avr-function-attributes#AVR-Function-Attributes&quot;&gt;AVR Function Attributes&lt;/a&gt;, Previous: &lt;a href=&quot;arc-function-attributes#ARC-Function-Attributes&quot;&gt;ARC Function Attributes&lt;/a&gt;, Up: &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;Function Attributes&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;avr-function-attributes#AVR-Function-Attributes&quot;&gt;AVR 기능 속성&lt;/a&gt; , 이전 : &lt;a href=&quot;arc-function-attributes#ARC-Function-Attributes&quot;&gt;ARC 기능 속성&lt;/a&gt; , 위 : &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;기능 속성&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="c189031ad1e3df2db6c1b02ab3f75fa3b6f24cf2" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;avr-options#AVR-Options&quot;&gt;AVR Options&lt;/a&gt;, Previous: &lt;a href=&quot;arc-options#ARC-Options&quot;&gt;ARC Options&lt;/a&gt;, Up: &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;Submodel Options&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;avr-options#AVR-Options&quot;&gt;AVR 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;arc-options#ARC-Options&quot;&gt;ARC 옵션&lt;/a&gt; , 위 : &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;하위 모델 옵션&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="6fc262459b5aae08bca8f12cc6d02882493626a6" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;backwards-compatibility#Backwards-Compatibility&quot;&gt;Backwards Compatibility&lt;/a&gt;, Previous: &lt;a href=&quot;c_002b_002b-concepts#C_002b_002b-Concepts&quot;&gt;C++ Concepts&lt;/a&gt;, Up: &lt;a href=&quot;c_002b_002b-extensions#C_002b_002b-Extensions&quot;&gt;C++ Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;backwards-compatibility#Backwards-Compatibility&quot;&gt;이전 버전과의 호환성&lt;/a&gt; , 이전 : &lt;a href=&quot;c_002b_002b-concepts#C_002b_002b-Concepts&quot;&gt;C ++ 개념&lt;/a&gt; , 위로 : &lt;a href=&quot;c_002b_002b-extensions#C_002b_002b-Extensions&quot;&gt;C ++ 확장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="980c565c37e61a18b5087af462c1a4d2c12ab42c" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;basic-powerpc-built_002din-functions-available-on-isa-2_002e05#Basic-PowerPC-Built_002din-Functions-Available-on-ISA-2_002e05&quot;&gt;Basic PowerPC Built-in Functions Available on ISA 2.05&lt;/a&gt;, Up: &lt;a href=&quot;basic-powerpc-built_002din-functions#Basic-PowerPC-Built_002din-Functions&quot;&gt;Basic PowerPC Built-in Functions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;basic-powerpc-built_002din-functions-available-on-isa-2_002e05#Basic-PowerPC-Built_002din-Functions-Available-on-ISA-2_002e05&quot;&gt;ISA 2.05&lt;/a&gt; 에서 사용 가능한 기본 PowerPC 내장 함수 , 위로 : &lt;a href=&quot;basic-powerpc-built_002din-functions#Basic-PowerPC-Built_002din-Functions&quot;&gt;기본 PowerPC 내장 함수&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="e82b8ee5ebcf2973533037ee20c62c925d4e1893" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;basic-powerpc-built_002din-functions-available-on-isa-2_002e06#Basic-PowerPC-Built_002din-Functions-Available-on-ISA-2_002e06&quot;&gt;Basic PowerPC Built-in Functions Available on ISA 2.06&lt;/a&gt;, Previous: &lt;a href=&quot;basic-powerpc-built_002din-functions-available-on-all-configurations#Basic-PowerPC-Built_002din-Functions-Available-on-all-Configurations&quot;&gt;Basic PowerPC Built-in Functions Available on all Configurations&lt;/a&gt;, Up: &lt;a href=&quot;basic-powerpc-built_002din-functions#Basic-PowerPC-Built_002din-Functions&quot;&gt;Basic PowerPC Built-in Functions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;basic-powerpc-built_002din-functions-available-on-isa-2_002e06#Basic-PowerPC-Built_002din-Functions-Available-on-ISA-2_002e06&quot;&gt;ISA 2.06&lt;/a&gt; 에서 사용 가능한 기본 PowerPC 내장 함수 , 이전 : &lt;a href=&quot;basic-powerpc-built_002din-functions-available-on-all-configurations#Basic-PowerPC-Built_002din-Functions-Available-on-all-Configurations&quot;&gt;모든 구성&lt;/a&gt; 에서 사용 가능한 기본 PowerPC 내장 함수 , 위로 : &lt;a href=&quot;basic-powerpc-built_002din-functions#Basic-PowerPC-Built_002din-Functions&quot;&gt;기본 PowerPC 내장 함수&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="25f8193502d487ff7eabfc57e8454c0bb19ab731" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;binary-constants#Binary-constants&quot;&gt;Binary constants&lt;/a&gt;, Previous: &lt;a href=&quot;unnamed-fields#Unnamed-Fields&quot;&gt;Unnamed Fields&lt;/a&gt;, Up: &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;binary-constants#Binary-constants&quot;&gt;이진 상수&lt;/a&gt; , 이전 : &lt;a href=&quot;unnamed-fields#Unnamed-Fields&quot;&gt;Unnamed Fields&lt;/a&gt; , Up : &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C 확장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="a56438c92681e6f7a9169d887d447b2029d62d29" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;blackfin-built_002din-functions#Blackfin-Built_002din-Functions&quot;&gt;Blackfin Built-in Functions&lt;/a&gt;, Previous: &lt;a href=&quot;arm-armv8_002dm-security-extensions#ARM-ARMv8_002dM-Security-Extensions&quot;&gt;ARM ARMv8-M Security Extensions&lt;/a&gt;, Up: &lt;a href=&quot;target-builtins#Target-Builtins&quot;&gt;Target Builtins&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;blackfin-built_002din-functions#Blackfin-Built_002din-Functions&quot;&gt;Blackfin 내장 함수&lt;/a&gt; , 이전 : &lt;a href=&quot;arm-armv8_002dm-security-extensions#ARM-ARMv8_002dM-Security-Extensions&quot;&gt;ARM ARMv8-M 보안 확장&lt;/a&gt; , 위쪽 : &lt;a href=&quot;target-builtins#Target-Builtins&quot;&gt;대상 내장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="654a5d46703c988fcaf6509511a78e68d38f137a" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;blackfin-function-attributes#Blackfin-Function-Attributes&quot;&gt;Blackfin Function Attributes&lt;/a&gt;, Previous: &lt;a href=&quot;arm-function-attributes#ARM-Function-Attributes&quot;&gt;ARM Function Attributes&lt;/a&gt;, Up: &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;Function Attributes&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;blackfin-function-attributes#Blackfin-Function-Attributes&quot;&gt;Blackfin 함수 특성&lt;/a&gt; , 이전 : &lt;a href=&quot;arm-function-attributes#ARM-Function-Attributes&quot;&gt;ARM 함수 특성&lt;/a&gt; , 위쪽 : &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;함수 특성&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="2938a220943a59aebec996e459619a0aff16d5e2" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;blackfin-options#Blackfin-Options&quot;&gt;Blackfin Options&lt;/a&gt;, Previous: &lt;a href=&quot;arm-options#ARM-Options&quot;&gt;ARM Options&lt;/a&gt;, Up: &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;Submodel Options&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;blackfin-options#Blackfin-Options&quot;&gt;블랙 핀 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;arm-options#ARM-Options&quot;&gt;ARM 옵션&lt;/a&gt; , 위쪽 : &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;하위 모델 옵션&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="3a0e7cc92b28ec24e67b808393c68c0f3541602a" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;bound-member-functions#Bound-member-functions&quot;&gt;Bound member functions&lt;/a&gt;, Previous: &lt;a href=&quot;c_002b_002b-interface#C_002b_002b-Interface&quot;&gt;C++ Interface&lt;/a&gt;, Up: &lt;a href=&quot;c_002b_002b-extensions#C_002b_002b-Extensions&quot;&gt;C++ Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;bound-member-functions#Bound-member-functions&quot;&gt;바운드 멤버 함수&lt;/a&gt; , 이전 : &lt;a href=&quot;c_002b_002b-interface#C_002b_002b-Interface&quot;&gt;C ++ 인터페이스&lt;/a&gt; , 위로 : &lt;a href=&quot;c_002b_002b-extensions#C_002b_002b-Extensions&quot;&gt;C ++ 확장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="ec9466eaf16e9f5083aa369ae5c87ff6c6e9d36f" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;c-implementation#C-Implementation&quot;&gt;C Implementation&lt;/a&gt;, Previous: &lt;a href=&quot;standards#Standards&quot;&gt;Standards&lt;/a&gt;, Up: &lt;a href=&quot;index#Top&quot;&gt;Top&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;c-implementation#C-Implementation&quot;&gt;C 구현&lt;/a&gt; , 이전 : &lt;a href=&quot;standards#Standards&quot;&gt;표준&lt;/a&gt; , 위로 : &lt;a href=&quot;index#Top&quot;&gt;맨 위로&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="0034c2d99bab07c28558643cdf74c796954c52c0" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;c6x-options#C6X-Options&quot;&gt;C6X Options&lt;/a&gt;, Previous: &lt;a href=&quot;avr-options#AVR-Options&quot;&gt;AVR Options&lt;/a&gt;, Up: &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;Submodel Options&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;c6x-options#C6X-Options&quot;&gt;C6X 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;avr-options#AVR-Options&quot;&gt;AVR 옵션&lt;/a&gt; , 위 : &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;서브 모델 옵션&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;내용&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="a3a25241cc4adaa7e662a15b8ac6b929a0fe1da7" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;c_002b_002b-concepts#C_002b_002b-Concepts&quot;&gt;C++ Concepts&lt;/a&gt;, Previous: &lt;a href=&quot;function-multiversioning#Function-Multiversioning&quot;&gt;Function Multiversioning&lt;/a&gt;, Up: &lt;a href=&quot;c_002b_002b-extensions#C_002b_002b-Extensions&quot;&gt;C++ Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;c_002b_002b-concepts#C_002b_002b-Concepts&quot;&gt;C ++ 개념&lt;/a&gt; , 이전 : &lt;a href=&quot;function-multiversioning#Function-Multiversioning&quot;&gt;함수 멀티 버전 관리&lt;/a&gt; , 위로 : &lt;a href=&quot;c_002b_002b-extensions#C_002b_002b-Extensions&quot;&gt;C ++ 확장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="e20ef352b100b4a5d3266a450b9517f4a2ce2d1d" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;c_002b_002b-dialect-options#C_002b_002b-Dialect-Options&quot;&gt;C++ Dialect Options&lt;/a&gt;, Previous: &lt;a href=&quot;invoking-g_002b_002b#Invoking-G_002b_002b&quot;&gt;Invoking G++&lt;/a&gt;, Up: &lt;a href=&quot;invoking-gcc#Invoking-GCC&quot;&gt;Invoking GCC&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;c_002b_002b-dialect-options#C_002b_002b-Dialect-Options&quot;&gt;C ++ 방언 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;invoking-g_002b_002b#Invoking-G_002b_002b&quot;&gt;G ++ 호출&lt;/a&gt; , 위 : &lt;a href=&quot;invoking-gcc#Invoking-GCC&quot;&gt;GCC 호출&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="f475b4d84adb9dde9cdf62e6f3280c4b05daa635" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;c_002b_002b-extensions#C_002b_002b-Extensions&quot;&gt;C++ Extensions&lt;/a&gt;, Previous: &lt;a href=&quot;c_002b_002b-implementation#C_002b_002b-Implementation&quot;&gt;C++ Implementation&lt;/a&gt;, Up: &lt;a href=&quot;index#Top&quot;&gt;Top&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;c_002b_002b-extensions#C_002b_002b-Extensions&quot;&gt;C ++ 확장&lt;/a&gt; , 이전 : &lt;a href=&quot;c_002b_002b-implementation#C_002b_002b-Implementation&quot;&gt;C ++ 구현&lt;/a&gt; , 위로 : &lt;a href=&quot;index#Top&quot;&gt;맨 위로&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="32f021966ddae090e8b90801997e661a6fa524c2" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;c_002b_002b-implementation#C_002b_002b-Implementation&quot;&gt;C++ Implementation&lt;/a&gt;, Previous: &lt;a href=&quot;invoking-gcc#Invoking-GCC&quot;&gt;Invoking GCC&lt;/a&gt;, Up: &lt;a href=&quot;index#Top&quot;&gt;Top&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;c_002b_002b-implementation#C_002b_002b-Implementation&quot;&gt;C ++ 구현&lt;/a&gt; , 이전 : &lt;a href=&quot;invoking-gcc#Invoking-GCC&quot;&gt;GCC 호출&lt;/a&gt; , 위로 : &lt;a href=&quot;index#Top&quot;&gt;맨 위로&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="5bc446fe2bd838c10d25284ce19c477f637b5888" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;c_002b_002b-interface#C_002b_002b-Interface&quot;&gt;C++ Interface&lt;/a&gt;, Previous: &lt;a href=&quot;restricted-pointers#Restricted-Pointers&quot;&gt;Restricted Pointers&lt;/a&gt;, Up: &lt;a href=&quot;c_002b_002b-extensions#C_002b_002b-Extensions&quot;&gt;C++ Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;c_002b_002b-interface#C_002b_002b-Interface&quot;&gt;C ++ 인터페이스&lt;/a&gt; , 이전 : &lt;a href=&quot;restricted-pointers#Restricted-Pointers&quot;&gt;제한된 포인터&lt;/a&gt; , 위로 : &lt;a href=&quot;c_002b_002b-extensions#C_002b_002b-Extensions&quot;&gt;C ++ 확장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="63c8dbc00f68636de9bdff86b888fa862cb19340" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;c_002b_002b-misunderstandings#C_002b_002b-Misunderstandings&quot;&gt;C++ Misunderstandings&lt;/a&gt;, Previous: &lt;a href=&quot;standard-libraries#Standard-Libraries&quot;&gt;Standard Libraries&lt;/a&gt;, Up: &lt;a href=&quot;trouble#Trouble&quot;&gt;Trouble&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;c_002b_002b-misunderstandings#C_002b_002b-Misunderstandings&quot;&gt;C ++ 오해&lt;/a&gt; , 이전 : &lt;a href=&quot;standard-libraries#Standard-Libraries&quot;&gt;표준 라이브러리&lt;/a&gt; , 위로 : &lt;a href=&quot;trouble#Trouble&quot;&gt;문제&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="2b153d8ce2439d3a32fdd81c630dd3578430e150" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;case-ranges#Case-Ranges&quot;&gt;Case Ranges&lt;/a&gt;, Previous: &lt;a href=&quot;compound-literals#Compound-Literals&quot;&gt;Compound Literals&lt;/a&gt;, Up: &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;case-ranges#Case-Ranges&quot;&gt;사례 범위&lt;/a&gt; , 이전 : &lt;a href=&quot;compound-literals#Compound-Literals&quot;&gt;복합 리터럴&lt;/a&gt; , 위로 : &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C 확장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="c5dea49d84f243e31e877e90921ea8e423e3aeea" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;code-gen-options#Code-Gen-Options&quot;&gt;Code Gen Options&lt;/a&gt;, Previous: &lt;a href=&quot;link-options#Link-Options&quot;&gt;Link Options&lt;/a&gt;, Up: &lt;a href=&quot;invoking-gcc#Invoking-GCC&quot;&gt;Invoking GCC&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;code-gen-options#Code-Gen-Options&quot;&gt;코드 생성 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;link-options#Link-Options&quot;&gt;링크 옵션&lt;/a&gt; , 위 : &lt;a href=&quot;invoking-gcc#Invoking-GCC&quot;&gt;GCC 호출&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="3837e045c1a7535f9d92aca47ffef6a70b760ca4" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;compatibility_005falias#compatibility_005falias&quot;&gt;compatibility_alias&lt;/a&gt;, Previous: &lt;a href=&quot;garbage-collection#Garbage-Collection&quot;&gt;Garbage Collection&lt;/a&gt;, Up: &lt;a href=&quot;objective_002dc#Objective_002dC&quot;&gt;Objective-C&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;compatibility_005falias#compatibility_005falias&quot;&gt;compatibility_alias&lt;/a&gt; , 이전 : &lt;a href=&quot;garbage-collection#Garbage-Collection&quot;&gt;가비지 수집&lt;/a&gt; , 위로 : &lt;a href=&quot;objective_002dc#Objective_002dC&quot;&gt;Objective-C&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="2517214a203234378e1a8926ae519f6833f14f84" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;conditionals#Conditionals&quot;&gt;Conditionals&lt;/a&gt;, Previous: &lt;a href=&quot;constructing-calls#Constructing-Calls&quot;&gt;Constructing Calls&lt;/a&gt;, Up: &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;conditionals#Conditionals&quot;&gt;조건부&lt;/a&gt; , 이전 : &lt;a href=&quot;constructing-calls#Constructing-Calls&quot;&gt;호출 구성&lt;/a&gt; , 위로 : &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C 내선&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="eaa01f89cde959322b7b92ad83fef626c9fa1c12" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;constant-string-objects#Constant-string-objects&quot;&gt;Constant string objects&lt;/a&gt;, Previous: &lt;a href=&quot;type-encoding#Type-encoding&quot;&gt;Type encoding&lt;/a&gt;, Up: &lt;a href=&quot;objective_002dc#Objective_002dC&quot;&gt;Objective-C&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;constant-string-objects#Constant-string-objects&quot;&gt;상수 문자열 객체&lt;/a&gt; , 이전 : &lt;a href=&quot;type-encoding#Type-encoding&quot;&gt;유형 인코딩&lt;/a&gt; , 위 : &lt;a href=&quot;objective_002dc#Objective_002dC&quot;&gt;Objective-C&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="01a28ecf102bfbb7eaffa140a32a83b563c01956" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;constraints#Constraints&quot;&gt;Constraints&lt;/a&gt;, Previous: &lt;a href=&quot;basic-asm#Basic-Asm&quot;&gt;Basic Asm&lt;/a&gt;, Up: &lt;a href=&quot;using-assembly-language-with-c#Using-Assembly-Language-with-C&quot;&gt;Using Assembly Language with C&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;constraints#Constraints&quot;&gt;제약 조건&lt;/a&gt; , 이전 : &lt;a href=&quot;basic-asm#Basic-Asm&quot;&gt;기본 Asm&lt;/a&gt; , 위로 : &lt;a href=&quot;using-assembly-language-with-c#Using-Assembly-Language-with-C&quot;&gt;C와 함께 어셈블리 언어 사용&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="a573819b7d8872ede20a616792e98139b8dc0668" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;constructing-calls#Constructing-Calls&quot;&gt;Constructing Calls&lt;/a&gt;, Previous: &lt;a href=&quot;nested-functions#Nested-Functions&quot;&gt;Nested Functions&lt;/a&gt;, Up: &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;constructing-calls#Constructing-Calls&quot;&gt;호출 구성&lt;/a&gt; , 이전 : &lt;a href=&quot;nested-functions#Nested-Functions&quot;&gt;중첩 함수&lt;/a&gt; , 위 : &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C 확장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="2900e98706104015fbbbdca170135fa7286e1c39" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;copy-assignment#Copy-Assignment&quot;&gt;Copy Assignment&lt;/a&gt;, Previous: &lt;a href=&quot;name-lookup#Name-lookup&quot;&gt;Name lookup&lt;/a&gt;, Up: &lt;a href=&quot;c_002b_002b-misunderstandings#C_002b_002b-Misunderstandings&quot;&gt;C++ Misunderstandings&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;copy-assignment#Copy-Assignment&quot;&gt;사본 할당&lt;/a&gt; , 이전 : &lt;a href=&quot;name-lookup#Name-lookup&quot;&gt;이름 조회&lt;/a&gt; , 위 : &lt;a href=&quot;c_002b_002b-misunderstandings#C_002b_002b-Misunderstandings&quot;&gt;C ++ 오해&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;내용&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="ac454af0cd30e631db98f1dead48a2c1800ce7d6" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;cr16-function-attributes#CR16-Function-Attributes&quot;&gt;CR16 Function Attributes&lt;/a&gt;, Previous: &lt;a href=&quot;avr-function-attributes#AVR-Function-Attributes&quot;&gt;AVR Function Attributes&lt;/a&gt;, Up: &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;Function Attributes&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;cr16-function-attributes#CR16-Function-Attributes&quot;&gt;CR16 기능 속성&lt;/a&gt; , 이전 : &lt;a href=&quot;avr-function-attributes#AVR-Function-Attributes&quot;&gt;AVR 기능 속성&lt;/a&gt; , 위 : &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;기능 속성&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="2bda6cec324dc097c668d2782a9a7a098b011b9a" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;cr16-options#CR16-Options&quot;&gt;CR16 Options&lt;/a&gt;, Previous: &lt;a href=&quot;c6x-options#C6X-Options&quot;&gt;C6X Options&lt;/a&gt;, Up: &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;Submodel Options&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;cr16-options#CR16-Options&quot;&gt;CR16 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;c6x-options#C6X-Options&quot;&gt;C6X 옵션&lt;/a&gt; , 위 : 하위 모델 &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;옵션&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="0afb915c589d3efdbed6fc99a075714ef2af1c97" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;darwin-options#Darwin-Options&quot;&gt;Darwin Options&lt;/a&gt;, Previous: &lt;a href=&quot;cr16-options#CR16-Options&quot;&gt;CR16 Options&lt;/a&gt;, Up: &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;Submodel Options&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;darwin-options#Darwin-Options&quot;&gt;Darwin 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;cr16-options#CR16-Options&quot;&gt;CR16 옵션&lt;/a&gt; , 위 : &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;하위 모델 옵션&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="2eec157b2dad981a7282e60a371bd9f2ebb70457" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;debugging-options#Debugging-Options&quot;&gt;Debugging Options&lt;/a&gt;, Previous: &lt;a href=&quot;diagnostic-message-formatting-options#Diagnostic-Message-Formatting-Options&quot;&gt;Diagnostic Message Formatting Options&lt;/a&gt;, Up: &lt;a href=&quot;invoking-gcc#Invoking-GCC&quot;&gt;Invoking GCC&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;debugging-options#Debugging-Options&quot;&gt;디버깅 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;diagnostic-message-formatting-options#Diagnostic-Message-Formatting-Options&quot;&gt;진단 메시지 형식 옵션&lt;/a&gt; , 위로 : &lt;a href=&quot;invoking-gcc#Invoking-GCC&quot;&gt;GCC 호출&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="49cd09776e44900e16b587168ba3432b56074a68" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;dec-alpha-options#DEC-Alpha-Options&quot;&gt;DEC Alpha Options&lt;/a&gt;, Previous: &lt;a href=&quot;c_002dsky-options#C_002dSKY-Options&quot;&gt;C-SKY Options&lt;/a&gt;, Up: &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;Submodel Options&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;dec-alpha-options#DEC-Alpha-Options&quot;&gt;DEC 알파 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;c_002dsky-options#C_002dSKY-Options&quot;&gt;C-SKY 옵션&lt;/a&gt; , 위 : &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;하위 모델 옵션&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="62af023ca164254c29f9e33e8d055719f6b9f7d8" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;decimal-float#Decimal-Float&quot;&gt;Decimal Float&lt;/a&gt;, Previous: &lt;a href=&quot;floating-types#Floating-Types&quot;&gt;Floating Types&lt;/a&gt;, Up: &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;decimal-float#Decimal-Float&quot;&gt;10 진 플로트&lt;/a&gt; , 이전 : &lt;a href=&quot;floating-types#Floating-Types&quot;&gt;플로팅 유형&lt;/a&gt; , 위로 : &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C 확장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="fa3bebddd3414c2933e2f5b237514c38e2541513" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;declarators-implementation#Declarators-implementation&quot;&gt;Declarators implementation&lt;/a&gt;, Previous: &lt;a href=&quot;structures-unions-enumerations-and-bit_002dfields-implementation#Structures-unions-enumerations-and-bit_002dfields-implementation&quot;&gt;Structures unions enumerations and bit-fields implementation&lt;/a&gt;, Up: &lt;a href=&quot;c-implementation#C-Implementation&quot;&gt;C Implementation&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;declarators-implementation#Declarators-implementation&quot;&gt;선언자 구현&lt;/a&gt; , 이전 : &lt;a href=&quot;structures-unions-enumerations-and-bit_002dfields-implementation#Structures-unions-enumerations-and-bit_002dfields-implementation&quot;&gt;공용체 열거 및 비트 필드 구현 구조&lt;/a&gt; : Up : &lt;a href=&quot;c-implementation#C-Implementation&quot;&gt;C 구현&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="44c9ed3d885d20263cf8c837bbdc86eb6bc8d80f" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;designated-inits#Designated-Inits&quot;&gt;Designated Inits&lt;/a&gt;, Previous: &lt;a href=&quot;initializers#Initializers&quot;&gt;Initializers&lt;/a&gt;, Up: &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;designated-inits#Designated-Inits&quot;&gt;지정된 &lt;/a&gt;&lt;a href=&quot;initializers#Initializers&quot;&gt;초기화&lt;/a&gt; , 이전 : 이니셜 라이저 , 위로 : &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C 확장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="d13a79655849f653ff44ad2bbf9d0fcba3b70def" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;developer-options#Developer-Options&quot;&gt;Developer Options&lt;/a&gt;, Previous: &lt;a href=&quot;directory-options#Directory-Options&quot;&gt;Directory Options&lt;/a&gt;, Up: &lt;a href=&quot;invoking-gcc#Invoking-GCC&quot;&gt;Invoking GCC&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;developer-options#Developer-Options&quot;&gt;개발자 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;directory-options#Directory-Options&quot;&gt;디렉토리 옵션&lt;/a&gt; , 위로 : &lt;a href=&quot;invoking-gcc#Invoking-GCC&quot;&gt;GCC 호출&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="d9fd1427b4cd03f03c0a219edb848fe4f6d88b4a" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;diagnostic-message-formatting-options#Diagnostic-Message-Formatting-Options&quot;&gt;Diagnostic Message Formatting Options&lt;/a&gt;, Previous: &lt;a href=&quot;c_002b_002b-dialect-options#C_002b_002b-Dialect-Options&quot;&gt;C++ Dialect Options&lt;/a&gt;, Up: &lt;a href=&quot;invoking-gcc#Invoking-GCC&quot;&gt;Invoking GCC&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;diagnostic-message-formatting-options#Diagnostic-Message-Formatting-Options&quot;&gt;진단 메시지 형식 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;c_002b_002b-dialect-options#C_002b_002b-Dialect-Options&quot;&gt;C ++ Dialect 옵션&lt;/a&gt; , 위로 : &lt;a href=&quot;invoking-gcc#Invoking-GCC&quot;&gt;GCC 호출&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="1b3c9bfdd80d65f5bdf56970f2351f210ad2b07f" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;directory-options#Directory-Options&quot;&gt;Directory Options&lt;/a&gt;, Previous: &lt;a href=&quot;assembler-options#Assembler-Options&quot;&gt;Assembler Options&lt;/a&gt;, Up: &lt;a href=&quot;invoking-gcc#Invoking-GCC&quot;&gt;Invoking GCC&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;directory-options#Directory-Options&quot;&gt;디렉토리 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;assembler-options#Assembler-Options&quot;&gt;어셈블러 옵션&lt;/a&gt; , 위로 : &lt;a href=&quot;invoking-gcc#Invoking-GCC&quot;&gt;GCC 호출&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="a34a549bc6c16a8bc5e293a9b8b61ed3d85ecd8f" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;empty-structures#Empty-Structures&quot;&gt;Empty Structures&lt;/a&gt;, Previous: &lt;a href=&quot;named-address-spaces#Named-Address-Spaces&quot;&gt;Named Address Spaces&lt;/a&gt;, Up: &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;empty-structures#Empty-Structures&quot;&gt;빈 구조&lt;/a&gt; , 이전 : &lt;a href=&quot;named-address-spaces#Named-Address-Spaces&quot;&gt;명명 된 주소 공간&lt;/a&gt; , 위로 : &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C 확장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="635f828a4a656da056cc1c4c15babdff121b41e9" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;enumerator-attributes#Enumerator-Attributes&quot;&gt;Enumerator Attributes&lt;/a&gt;, Previous: &lt;a href=&quot;type-attributes#Type-Attributes&quot;&gt;Type Attributes&lt;/a&gt;, Up: &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;enumerator-attributes#Enumerator-Attributes&quot;&gt;열거 자 속성&lt;/a&gt; , 이전 : &lt;a href=&quot;type-attributes#Type-Attributes&quot;&gt;유형 속성&lt;/a&gt; , 위로 : &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C 확장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="86303c2833aeba956949636cdfe7dc1678fe4fe9" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;environment-variables#Environment-Variables&quot;&gt;Environment Variables&lt;/a&gt;, Previous: &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;Submodel Options&lt;/a&gt;, Up: &lt;a href=&quot;invoking-gcc#Invoking-GCC&quot;&gt;Invoking GCC&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;environment-variables#Environment-Variables&quot;&gt;환경 변수&lt;/a&gt; , 이전 : &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;하위 모델 옵션&lt;/a&gt; , 위 : &lt;a href=&quot;invoking-gcc#Invoking-GCC&quot;&gt;GCC 호출&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="5dfa86c77de81c6bc83118fdb0949c3b7925defb" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;escaped-newlines#Escaped-Newlines&quot;&gt;Escaped Newlines&lt;/a&gt;, Previous: &lt;a href=&quot;variable-length#Variable-Length&quot;&gt;Variable Length&lt;/a&gt;, Up: &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;escaped-newlines#Escaped-Newlines&quot;&gt;이스케이프 된 줄 바꿈&lt;/a&gt; , 이전 : &lt;a href=&quot;variable-length#Variable-Length&quot;&gt;가변 길이&lt;/a&gt; , 위로 : &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C 확장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="c91ab3b7bc85206508d68f6efbf978d4dbfb991e" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;explicit-register-variables#Explicit-Register-Variables&quot;&gt;Explicit Register Variables&lt;/a&gt;, Previous: &lt;a href=&quot;constraints#Constraints&quot;&gt;Constraints&lt;/a&gt;, Up: &lt;a href=&quot;using-assembly-language-with-c#Using-Assembly-Language-with-C&quot;&gt;Using Assembly Language with C&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;explicit-register-variables#Explicit-Register-Variables&quot;&gt;명시 적 레지스터 변수&lt;/a&gt; , 이전 : &lt;a href=&quot;constraints#Constraints&quot;&gt;제약 조건&lt;/a&gt; , 위로 : &lt;a href=&quot;using-assembly-language-with-c#Using-Assembly-Language-with-C&quot;&gt;C와 함께 어셈블리 언어 사용&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="9cfe357a6362631525348479d75b0273e8aa070a" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;extended-asm#Extended-Asm&quot;&gt;Extended Asm&lt;/a&gt;, Up: &lt;a href=&quot;using-assembly-language-with-c#Using-Assembly-Language-with-C&quot;&gt;Using Assembly Language with C&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;extended-asm#Extended-Asm&quot;&gt;확장 Asm&lt;/a&gt; , 위로 : &lt;a href=&quot;using-assembly-language-with-c#Using-Assembly-Language-with-C&quot;&gt;C&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt; ] 와 함께 어셈블리 언어 사용</target>
        </trans-unit>
        <trans-unit id="c5d2bde1e22560637b295f0c2dd0f8109cfbef3a" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;fast-enumeration-protocol#Fast-enumeration-protocol&quot;&gt;Fast enumeration protocol&lt;/a&gt;, Previous: &lt;a href=&quot;c99_002dlike-fast-enumeration-syntax#c99_002dlike-fast-enumeration-syntax&quot;&gt;c99-like fast enumeration syntax&lt;/a&gt;, Up: &lt;a href=&quot;fast-enumeration#Fast-enumeration&quot;&gt;Fast enumeration&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;fast-enumeration-protocol#Fast-enumeration-protocol&quot;&gt;빠른 열거 프로토콜&lt;/a&gt; , 이전 : &lt;a href=&quot;c99_002dlike-fast-enumeration-syntax#c99_002dlike-fast-enumeration-syntax&quot;&gt;c99와 같은 빠른 열거 구문&lt;/a&gt; , 위로 : &lt;a href=&quot;fast-enumeration#Fast-enumeration&quot;&gt;빠른 열거&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="b31521932e8e3d416305184c8b015eedd2c3db85" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;fixed-headers#Fixed-Headers&quot;&gt;Fixed Headers&lt;/a&gt;, Previous: &lt;a href=&quot;interoperation#Interoperation&quot;&gt;Interoperation&lt;/a&gt;, Up: &lt;a href=&quot;trouble#Trouble&quot;&gt;Trouble&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;fixed-headers#Fixed-Headers&quot;&gt;고정 헤더&lt;/a&gt; , 이전 : &lt;a href=&quot;interoperation#Interoperation&quot;&gt;상호 운용성&lt;/a&gt; , 위로 : &lt;a href=&quot;trouble#Trouble&quot;&gt;문제&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="634c56217a425eabd149112bd620a3b268647b33" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;floating-point-implementation#Floating-point-implementation&quot;&gt;Floating point implementation&lt;/a&gt;, Previous: &lt;a href=&quot;characters-implementation#Characters-implementation&quot;&gt;Characters implementation&lt;/a&gt;, Up: &lt;a href=&quot;c-implementation#C-Implementation&quot;&gt;C Implementation&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;floating-point-implementation#Floating-point-implementation&quot;&gt;부동 소수점 구현&lt;/a&gt; , 이전 : &lt;a href=&quot;characters-implementation#Characters-implementation&quot;&gt;문자 구현&lt;/a&gt; , 위 : &lt;a href=&quot;c-implementation#C-Implementation&quot;&gt;C 구현&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="0c3a52edf914b5054c27bb8a7d8d30fbe190ecb4" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;floating-types#Floating-Types&quot;&gt;Floating Types&lt;/a&gt;, Previous: &lt;a href=&quot;long-long#Long-Long&quot;&gt;Long Long&lt;/a&gt;, Up: &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;floating-types#Floating-Types&quot;&gt;플로팅 유형&lt;/a&gt; , 이전 : &lt;a href=&quot;long-long#Long-Long&quot;&gt;Long Long&lt;/a&gt; , 위로 : &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C 확장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="f04fee7158d75f6ecd89b62af3b2f6c4f8b81087" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;fr30-options#FR30-Options&quot;&gt;FR30 Options&lt;/a&gt;, Previous: &lt;a href=&quot;darwin-options#Darwin-Options&quot;&gt;Darwin Options&lt;/a&gt;, Up: &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;Submodel Options&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;fr30-options#FR30-Options&quot;&gt;FR30 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;darwin-options#Darwin-Options&quot;&gt;다윈 옵션&lt;/a&gt; , 위 : &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;서브 모델 옵션&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;내용&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="3733cf1466d542638ae1d8329c56fedc9eccdfa7" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;function-multiversioning#Function-Multiversioning&quot;&gt;Function Multiversioning&lt;/a&gt;, Previous: &lt;a href=&quot;bound-member-functions#Bound-member-functions&quot;&gt;Bound member functions&lt;/a&gt;, Up: &lt;a href=&quot;c_002b_002b-extensions#C_002b_002b-Extensions&quot;&gt;C++ Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;function-multiversioning#Function-Multiversioning&quot;&gt;함수 멀티 버전 화&lt;/a&gt; , 이전 : &lt;a href=&quot;bound-member-functions#Bound-member-functions&quot;&gt;바운드 멤버 함수&lt;/a&gt; , 위 : &lt;a href=&quot;c_002b_002b-extensions#C_002b_002b-Extensions&quot;&gt;C ++ 확장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="da45d27d4763d797c27728d565af948615305375" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;function-prototypes#Function-Prototypes&quot;&gt;Function Prototypes&lt;/a&gt;, Previous: &lt;a href=&quot;statement-attributes#Statement-Attributes&quot;&gt;Statement Attributes&lt;/a&gt;, Up: &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;function-prototypes#Function-Prototypes&quot;&gt;함수 프로토 타입&lt;/a&gt; , 이전 : &lt;a href=&quot;statement-attributes#Statement-Attributes&quot;&gt;명령문 속성&lt;/a&gt; , 위로 : &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C 확장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="1d2afdb349e944fd5c22758b7b3c8e643da3c801" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;g_002b_002b-and-gcc#G_002b_002b-and-GCC&quot;&gt;G++ and GCC&lt;/a&gt; [&lt;a href=&quot;#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;g_002b_002b-and-gcc#G_002b_002b-and-GCC&quot;&gt;G ++ 및 GCC&lt;/a&gt; [ &lt;a href=&quot;#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="693e8111a0319cb294c1541643b218216bf57355" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;garbage-collection#Garbage-Collection&quot;&gt;Garbage Collection&lt;/a&gt;, Previous: &lt;a href=&quot;executing-code-before-main#Executing-code-before-main&quot;&gt;Executing code before main&lt;/a&gt;, Up: &lt;a href=&quot;objective_002dc#Objective_002dC&quot;&gt;Objective-C&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;garbage-collection#Garbage-Collection&quot;&gt;가비지 콜렉션&lt;/a&gt; , 이전 : &lt;a href=&quot;executing-code-before-main#Executing-code-before-main&quot;&gt;main 전에 코드 실행&lt;/a&gt; , 위로 : &lt;a href=&quot;objective_002dc#Objective_002dC&quot;&gt;Objective-C&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="a112b7d7c2c6b0834586f7f684ff923c57517d14" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;gcov#Gcov&quot;&gt;Gcov&lt;/a&gt;, Previous: &lt;a href=&quot;objective_002dc#Objective_002dC&quot;&gt;Objective-C&lt;/a&gt;, Up: &lt;a href=&quot;index#Top&quot;&gt;Top&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;gcov#Gcov&quot;&gt;Gcov&lt;/a&gt; , 이전 : &lt;a href=&quot;objective_002dc#Objective_002dC&quot;&gt;Objective-C&lt;/a&gt; , 위로 : &lt;a href=&quot;index#Top&quot;&gt;맨 위로&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="e878cbff601450c3a9c5dea12c34506a89190960" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;gcov-and-optimization#Gcov-and-Optimization&quot;&gt;Gcov and Optimization&lt;/a&gt;, Previous: &lt;a href=&quot;gcov-intro#Gcov-Intro&quot;&gt;Gcov Intro&lt;/a&gt;, Up: &lt;a href=&quot;gcov#Gcov&quot;&gt;Gcov&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;gcov-and-optimization#Gcov-and-Optimization&quot;&gt;Gcov 및 최적화&lt;/a&gt; , 이전 : &lt;a href=&quot;gcov-intro#Gcov-Intro&quot;&gt;Gcov 소개&lt;/a&gt; , 위로 : &lt;a href=&quot;gcov#Gcov&quot;&gt;Gcov&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="4956c74f06b505cdce437b12b34ab813db15259a" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;gcov-data-files#Gcov-Data-Files&quot;&gt;Gcov Data Files&lt;/a&gt;, Previous: &lt;a href=&quot;invoking-gcov#Invoking-Gcov&quot;&gt;Invoking Gcov&lt;/a&gt;, Up: &lt;a href=&quot;gcov#Gcov&quot;&gt;Gcov&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;gcov-data-files#Gcov-Data-Files&quot;&gt;Gcov 데이터 파일&lt;/a&gt; , 이전 : &lt;a href=&quot;invoking-gcov#Invoking-Gcov&quot;&gt;Gcov 호출&lt;/a&gt; , 위로 : &lt;a href=&quot;gcov#Gcov&quot;&gt;Gcov&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="ef1ec9d467d7a4b23a6591061f7fb507848a7851" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;gnu_002flinux-options#GNU_002fLinux-Options&quot;&gt;GNU/Linux Options&lt;/a&gt;, Previous: &lt;a href=&quot;ft32-options#FT32-Options&quot;&gt;FT32 Options&lt;/a&gt;, Up: &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;Submodel Options&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;gnu_002flinux-options#GNU_002fLinux-Options&quot;&gt;GNU / Linux 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;ft32-options#FT32-Options&quot;&gt;FT32 옵션&lt;/a&gt; , 위로 : 하위 모델 &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;옵션&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="e3798c70b5bed4e9c2d59d91d19e2f3b3f8df636" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;h8_002f300-function-attributes#H8_002f300-Function-Attributes&quot;&gt;H8/300 Function Attributes&lt;/a&gt;, Previous: &lt;a href=&quot;c_002dsky-function-attributes#C_002dSKY-Function-Attributes&quot;&gt;C-SKY Function Attributes&lt;/a&gt;, Up: &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;Function Attributes&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;h8_002f300-function-attributes#H8_002f300-Function-Attributes&quot;&gt;H8 / 300 기능 속성&lt;/a&gt; , 이전 : &lt;a href=&quot;c_002dsky-function-attributes#C_002dSKY-Function-Attributes&quot;&gt;C-SKY 기능 속성&lt;/a&gt; , 위쪽 : &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;기능 속성&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="525f172d5e346124f211ff6fe17621ace2c7a7cd" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;half_002dprecision#Half_002dPrecision&quot;&gt;Half-Precision&lt;/a&gt;, Previous: &lt;a href=&quot;complex#Complex&quot;&gt;Complex&lt;/a&gt;, Up: &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;half_002dprecision#Half_002dPrecision&quot;&gt;반 정밀도&lt;/a&gt; , 이전 : &lt;a href=&quot;complex#Complex&quot;&gt;복합&lt;/a&gt; , 위로 : &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C 확장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="3444529b2fffe568527ebfa000482b33d292717b" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;hex-floats#Hex-Floats&quot;&gt;Hex Floats&lt;/a&gt;, Previous: &lt;a href=&quot;half_002dprecision#Half_002dPrecision&quot;&gt;Half-Precision&lt;/a&gt;, Up: &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;hex-floats#Hex-Floats&quot;&gt;16 진 플로트&lt;/a&gt; , 이전 : &lt;a href=&quot;half_002dprecision#Half_002dPrecision&quot;&gt;반 정밀도&lt;/a&gt; , 위로 : &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C 확장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="5c71ab4e598d4c2784d995ce92501f8fad746add" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;ia_002d64-options#IA_002d64-Options&quot;&gt;IA-64 Options&lt;/a&gt;, Previous: &lt;a href=&quot;h8_002f300-options#H8_002f300-Options&quot;&gt;H8/300 Options&lt;/a&gt;, Up: &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;Submodel Options&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;ia_002d64-options#IA_002d64-Options&quot;&gt;IA-64 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;h8_002f300-options#H8_002f300-Options&quot;&gt;H8 / 300 옵션&lt;/a&gt; , 위 : &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;하위 모델 옵션&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="44d478ff8549e70788ce00f195e709b2872ea2dc" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;incompatibilities#Incompatibilities&quot;&gt;Incompatibilities&lt;/a&gt;, Previous: &lt;a href=&quot;actual-bugs#Actual-Bugs&quot;&gt;Actual Bugs&lt;/a&gt;, Up: &lt;a href=&quot;trouble#Trouble&quot;&gt;Trouble&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;incompatibilities#Incompatibilities&quot;&gt;비 호환성&lt;/a&gt; , 이전 : &lt;a href=&quot;actual-bugs#Actual-Bugs&quot;&gt;실제 버그&lt;/a&gt; , 위로 : &lt;a href=&quot;trouble#Trouble&quot;&gt;문제&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="04b5e298f0141c0f9807e4ccccf59613d3017f0e" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;instrumentation-options#Instrumentation-Options&quot;&gt;Instrumentation Options&lt;/a&gt;, Previous: &lt;a href=&quot;debugging-options#Debugging-Options&quot;&gt;Debugging Options&lt;/a&gt;, Up: &lt;a href=&quot;invoking-gcc#Invoking-GCC&quot;&gt;Invoking GCC&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;instrumentation-options#Instrumentation-Options&quot;&gt;계측 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;debugging-options#Debugging-Options&quot;&gt;디버깅 옵션&lt;/a&gt; , 위로 : &lt;a href=&quot;invoking-gcc#Invoking-GCC&quot;&gt;GCC 호출&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="d9b1296dfee96ea62f311df1cd7f01321a016a4f" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;integer-overflow-builtins#Integer-Overflow-Builtins&quot;&gt;Integer Overflow Builtins&lt;/a&gt;, Previous: &lt;a href=&quot;_005f_005fsync-builtins#g_t_005f_005fsync-Builtins&quot;&gt;__sync Builtins&lt;/a&gt;, Up: &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;integer-overflow-builtins#Integer-Overflow-Builtins&quot;&gt;정수 오버플로 내장&lt;/a&gt; , 이전 : &lt;a href=&quot;_005f_005fsync-builtins#g_t_005f_005fsync-Builtins&quot;&gt;__sync 내장&lt;/a&gt; , 위로 : &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C 확장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="41f4da7dcaac1c8db4bab18daef2dc37aa4ddf30" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;integers-implementation#Integers-implementation&quot;&gt;Integers implementation&lt;/a&gt;, Previous: &lt;a href=&quot;identifiers-implementation#Identifiers-implementation&quot;&gt;Identifiers implementation&lt;/a&gt;, Up: &lt;a href=&quot;c-implementation#C-Implementation&quot;&gt;C Implementation&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;integers-implementation#Integers-implementation&quot;&gt;정수 구현&lt;/a&gt; , 이전 : &lt;a href=&quot;identifiers-implementation#Identifiers-implementation&quot;&gt;식별자 구현&lt;/a&gt; , Up : &lt;a href=&quot;c-implementation#C-Implementation&quot;&gt;C 구현&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="ad087f86a9d4fc4e6e43d97ef177d1708bfca3e4" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;invoking-g_002b_002b#Invoking-G_002b_002b&quot;&gt;Invoking G++&lt;/a&gt;, Previous: &lt;a href=&quot;option-summary#Option-Summary&quot;&gt;Option Summary&lt;/a&gt;, Up: &lt;a href=&quot;invoking-gcc#Invoking-GCC&quot;&gt;Invoking GCC&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;invoking-g_002b_002b#Invoking-G_002b_002b&quot;&gt;G ++ 호출&lt;/a&gt; , 이전 : &lt;a href=&quot;option-summary#Option-Summary&quot;&gt;옵션 요약&lt;/a&gt; , 위로 : &lt;a href=&quot;invoking-gcc#Invoking-GCC&quot;&gt;GCC 호출&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="87a920628e2005cd9974cfee06fb327a8f2d761c" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;invoking-gcc#Invoking-GCC&quot;&gt;Invoking GCC&lt;/a&gt;, Previous: &lt;a href=&quot;g_002b_002b-and-gcc#G_002b_002b-and-GCC&quot;&gt;G++ and GCC&lt;/a&gt;, Up: &lt;a href=&quot;index#Top&quot;&gt;Top&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;invoking-gcc#Invoking-GCC&quot;&gt;GCC 호출&lt;/a&gt; , 이전 : &lt;a href=&quot;g_002b_002b-and-gcc#G_002b_002b-and-GCC&quot;&gt;G ++ 및 GCC&lt;/a&gt; , 위로 : &lt;a href=&quot;index#Top&quot;&gt;맨 위로&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="5ab76ea02d6bc8afe4df74d64269ac50fe7289d4" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;invoking-gcov#Invoking-Gcov&quot;&gt;Invoking Gcov&lt;/a&gt;, Up: &lt;a href=&quot;gcov#Gcov&quot;&gt;Gcov&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;invoking-gcov#Invoking-Gcov&quot;&gt;Gcov 호출&lt;/a&gt; , 위로 : &lt;a href=&quot;gcov#Gcov&quot;&gt;Gcov&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="988d035719bd45a96c8b432ff15d819ae8afa3ba" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;invoking-gcov_002dtool#Invoking-Gcov_002dtool&quot;&gt;Invoking Gcov-tool&lt;/a&gt;, Up: &lt;a href=&quot;gcov_002dtool#Gcov_002dtool&quot;&gt;Gcov-tool&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;invoking-gcov_002dtool#Invoking-Gcov_002dtool&quot;&gt;Gcov-tool 호출&lt;/a&gt; , 위로 : &lt;a href=&quot;gcov_002dtool#Gcov_002dtool&quot;&gt;Gcov-tool&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="e116842d7179217bfbaff7f6d8f0080a832739bb" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;label-attributes#Label-Attributes&quot;&gt;Label Attributes&lt;/a&gt;, Previous: &lt;a href=&quot;variable-attributes#Variable-Attributes&quot;&gt;Variable Attributes&lt;/a&gt;, Up: &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;label-attributes#Label-Attributes&quot;&gt;레이블 속성&lt;/a&gt; , 이전 : &lt;a href=&quot;variable-attributes#Variable-Attributes&quot;&gt;변수 속성&lt;/a&gt; , 위로 : &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C 확장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="ff390370ba4c00a31cc875544b61d643681e033e" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;labels-as-values#Labels-as-Values&quot;&gt;Labels as Values&lt;/a&gt;, Previous: &lt;a href=&quot;statement-exprs#Statement-Exprs&quot;&gt;Statement Exprs&lt;/a&gt;, Up: &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;labels-as-values#Labels-as-Values&quot;&gt;값으로 레이블 지정&lt;/a&gt; , 이전 : &lt;a href=&quot;statement-exprs#Statement-Exprs&quot;&gt;명령문 Exprs&lt;/a&gt; , 위로 : &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C 확장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="503848e80ff122ff19dfc3d6a0962103de8f9cce" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;library-functions-implementation#Library-functions-implementation&quot;&gt;Library functions implementation&lt;/a&gt;, Previous: &lt;a href=&quot;statements-implementation#Statements-implementation&quot;&gt;Statements implementation&lt;/a&gt;, Up: &lt;a href=&quot;c-implementation#C-Implementation&quot;&gt;C Implementation&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;library-functions-implementation#Library-functions-implementation&quot;&gt;라이브러리 함수 구현&lt;/a&gt; , 이전 : &lt;a href=&quot;statements-implementation#Statements-implementation&quot;&gt;명령문 구현&lt;/a&gt; , 위 : &lt;a href=&quot;c-implementation#C-Implementation&quot;&gt;C 구현&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="0d7b29e255c5e295a1f7cc49c225c37a4d516d2a" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;lm32-options#LM32-Options&quot;&gt;LM32 Options&lt;/a&gt;, Previous: &lt;a href=&quot;hppa-options#HPPA-Options&quot;&gt;HPPA Options&lt;/a&gt;, Up: &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;Submodel Options&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;lm32-options#LM32-Options&quot;&gt;LM32 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;hppa-options#HPPA-Options&quot;&gt;HPPA 옵션&lt;/a&gt; , 위 : &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;서브 모델 옵션&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;내용&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="1d5f755b1cd691c864d4a18cbea4dcd574b5cd22" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;local-labels#Local-Labels&quot;&gt;Local Labels&lt;/a&gt;, Up: &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;local-labels#Local-Labels&quot;&gt;로컬 레이블&lt;/a&gt; , 위로 : &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C 확장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="c8acc9c4c3bb8106462486d61c5cb71dbb73b00a" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;local-register-variables#Local-Register-Variables&quot;&gt;Local Register Variables&lt;/a&gt;, Up: &lt;a href=&quot;explicit-register-variables#Explicit-Register-Variables&quot;&gt;Explicit Register Variables&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;local-register-variables#Local-Register-Variables&quot;&gt;로컬 레지스터 변수&lt;/a&gt; , 위로 : &lt;a href=&quot;explicit-register-variables#Explicit-Register-Variables&quot;&gt;명시 적 레지스터 변수&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="4056798ba9f4a9f29d10943147d8707f0f15736e" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;loop_002dspecific-pragmas#Loop_002dSpecific-Pragmas&quot;&gt;Loop-Specific Pragmas&lt;/a&gt;, Previous: &lt;a href=&quot;push_002fpop-macro-pragmas#Push_002fPop-Macro-Pragmas&quot;&gt;Push/Pop Macro Pragmas&lt;/a&gt;, Up: &lt;a href=&quot;pragmas#Pragmas&quot;&gt;Pragmas&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;loop_002dspecific-pragmas#Loop_002dSpecific-Pragmas&quot;&gt;루프 별 프라 그마&lt;/a&gt; , 이전 : &lt;a href=&quot;push_002fpop-macro-pragmas#Push_002fPop-Macro-Pragmas&quot;&gt;푸시 / 팝 매크로 프라 그마&lt;/a&gt; , 위로 : &lt;a href=&quot;pragmas#Pragmas&quot;&gt;프라 그마&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="7dc0b7e7828b160a22d09143d34ffcee0c0f2cef" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;m32r_002fd-function-attributes#M32R_002fD-Function-Attributes&quot;&gt;M32R/D Function Attributes&lt;/a&gt;, Previous: &lt;a href=&quot;ia_002d64-function-attributes#IA_002d64-Function-Attributes&quot;&gt;IA-64 Function Attributes&lt;/a&gt;, Up: &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;Function Attributes&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;m32r_002fd-function-attributes#M32R_002fD-Function-Attributes&quot;&gt;M32R / D 기능 속성&lt;/a&gt; , 이전 : &lt;a href=&quot;ia_002d64-function-attributes#IA_002d64-Function-Attributes&quot;&gt;IA-64 기능 속성&lt;/a&gt; , 위쪽 : &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;기능 속성&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="114e226b799310783d4a0ee7c15705901e10bbe0" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;m680x0-options#M680x0-Options&quot;&gt;M680x0 Options&lt;/a&gt;, Previous: &lt;a href=&quot;m32c-options#M32C-Options&quot;&gt;M32C Options&lt;/a&gt;, Up: &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;Submodel Options&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;m680x0-options#M680x0-Options&quot;&gt;M680x0 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;m32c-options#M32C-Options&quot;&gt;M32C 옵션&lt;/a&gt; , 위 : 하위 모델 &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;옵션&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="79b753e5917b78642834447e80f745d26c03e448" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;machine-constraints#Machine-Constraints&quot;&gt;Machine Constraints&lt;/a&gt;, Previous: &lt;a href=&quot;multi_002dalternative#Multi_002dAlternative&quot;&gt;Multi-Alternative&lt;/a&gt;, Up: &lt;a href=&quot;constraints#Constraints&quot;&gt;Constraints&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;machine-constraints#Machine-Constraints&quot;&gt;기계 구속 조건&lt;/a&gt; , 이전 : &lt;a href=&quot;multi_002dalternative#Multi_002dAlternative&quot;&gt;다중 대체&lt;/a&gt; , 위로 : &lt;a href=&quot;constraints#Constraints&quot;&gt;구속 조건&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="c01a3db67c300483f4a6d4644a4ada26947e4e20" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;mcore-options#MCore-Options&quot;&gt;MCore Options&lt;/a&gt;, Previous: &lt;a href=&quot;m32r_002fd-options#M32R_002fD-Options&quot;&gt;M32R/D Options&lt;/a&gt;, Up: &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;Submodel Options&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;mcore-options#MCore-Options&quot;&gt;MCore 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;m32r_002fd-options#M32R_002fD-Options&quot;&gt;M32R / D 옵션&lt;/a&gt; , 위 : &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;하위 모델 옵션&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="2008e69b24e2c38a584b403510a83f1610a30e2b" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;microblaze-options#MicroBlaze-Options&quot;&gt;MicroBlaze Options&lt;/a&gt;, Previous: &lt;a href=&quot;mcore-options#MCore-Options&quot;&gt;MCore Options&lt;/a&gt;, Up: &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;Submodel Options&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;microblaze-options#MicroBlaze-Options&quot;&gt;MicroBlaze 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;mcore-options#MCore-Options&quot;&gt;MCore 옵션&lt;/a&gt; , 위 : 하위 모델 &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;옵션&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="89e078eda8d06813bd14866bd14401b775d08364" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;microsoft-windows-variable-attributes#Microsoft-Windows-Variable-Attributes&quot;&gt;Microsoft Windows Variable Attributes&lt;/a&gt;, Previous: &lt;a href=&quot;m32r_002fd-variable-attributes#M32R_002fD-Variable-Attributes&quot;&gt;M32R/D Variable Attributes&lt;/a&gt;, Up: &lt;a href=&quot;variable-attributes#Variable-Attributes&quot;&gt;Variable Attributes&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;microsoft-windows-variable-attributes#Microsoft-Windows-Variable-Attributes&quot;&gt;Microsoft Windows 변수 속성&lt;/a&gt; , 이전 : &lt;a href=&quot;m32r_002fd-variable-attributes#M32R_002fD-Variable-Attributes&quot;&gt;M32R / D 변수 속성&lt;/a&gt; , 위로 : &lt;a href=&quot;variable-attributes#Variable-Attributes&quot;&gt;변수 속성&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="a0e40644fa5fef29ce09d7e255fe629ed33da0f1" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;mips-function-attributes#MIPS-Function-Attributes&quot;&gt;MIPS Function Attributes&lt;/a&gt;, Previous: &lt;a href=&quot;microblaze-function-attributes#MicroBlaze-Function-Attributes&quot;&gt;MicroBlaze Function Attributes&lt;/a&gt;, Up: &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;Function Attributes&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;mips-function-attributes#MIPS-Function-Attributes&quot;&gt;MIPS 기능 속성&lt;/a&gt; , 이전 : &lt;a href=&quot;microblaze-function-attributes#MicroBlaze-Function-Attributes&quot;&gt;MicroBlaze 기능 속성&lt;/a&gt; , 위로 : &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;기능 속성&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="f9dfd4a77c569f77141041f2975b6769b63bc1f3" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;mips-options#MIPS-Options&quot;&gt;MIPS Options&lt;/a&gt;, Previous: &lt;a href=&quot;mep-options#MeP-Options&quot;&gt;MeP Options&lt;/a&gt;, Up: &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;Submodel Options&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;mips-options#MIPS-Options&quot;&gt;MIPS 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;mep-options#MeP-Options&quot;&gt;MeP 옵션&lt;/a&gt; , 위 : &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;하위 모델 옵션&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="5a2f78c719453e22d7717d4f9a01d223fb2f45d5" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;mips-paired_002dsingle-support#MIPS-Paired_002dSingle-Support&quot;&gt;MIPS Paired-Single Support&lt;/a&gt;, Previous: &lt;a href=&quot;fr_002dv-built_002din-functions#FR_002dV-Built_002din-Functions&quot;&gt;FR-V Built-in Functions&lt;/a&gt;, Up: &lt;a href=&quot;target-builtins#Target-Builtins&quot;&gt;Target Builtins&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;mips-paired_002dsingle-support#MIPS-Paired_002dSingle-Support&quot;&gt;MIPS 단일 쌍 지원&lt;/a&gt; , 이전 : &lt;a href=&quot;fr_002dv-built_002din-functions#FR_002dV-Built_002din-Functions&quot;&gt;FR-V 내장 함수&lt;/a&gt; , 위 : &lt;a href=&quot;target-builtins#Target-Builtins&quot;&gt;대상 내장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="d58bf9a4a7416037923513e98bd6ceb2efbee68b" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;mips-simd-architecture-_0028msa_0029-support#MIPS-SIMD-Architecture-_0028MSA_0029-Support&quot;&gt;MIPS SIMD Architecture (MSA) Support&lt;/a&gt;, Previous: &lt;a href=&quot;mips-paired_002dsingle-support#MIPS-Paired_002dSingle-Support&quot;&gt;MIPS Paired-Single Support&lt;/a&gt;, Up: &lt;a href=&quot;target-builtins#Target-Builtins&quot;&gt;Target Builtins&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;mips-simd-architecture-_0028msa_0029-support#MIPS-SIMD-Architecture-_0028MSA_0029-Support&quot;&gt;MIPS SIMD 아키텍처 (MSA) 지원&lt;/a&gt; , 이전 : &lt;a href=&quot;mips-paired_002dsingle-support#MIPS-Paired_002dSingle-Support&quot;&gt;MIPS Paired-Single Support&lt;/a&gt; , Up : &lt;a href=&quot;target-builtins#Target-Builtins&quot;&gt;Target Builtins&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="273a4340ed53c63316ce1b213c0f667a43683b5e" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;mips_002d3d-built_002din-functions#MIPS_002d3D-Built_002din-Functions&quot;&gt;MIPS-3D Built-in Functions&lt;/a&gt;, Previous: &lt;a href=&quot;paired_002dsingle-arithmetic#Paired_002dSingle-Arithmetic&quot;&gt;Paired-Single Arithmetic&lt;/a&gt;, Up: &lt;a href=&quot;mips-loongson-built_002din-functions#MIPS-Loongson-Built_002din-Functions&quot;&gt;MIPS Loongson Built-in Functions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;mips_002d3d-built_002din-functions#MIPS_002d3D-Built_002din-Functions&quot;&gt;MIPS-3D 내장 함수&lt;/a&gt; , 이전 : &lt;a href=&quot;paired_002dsingle-arithmetic#Paired_002dSingle-Arithmetic&quot;&gt;Paired-Single Arithmetic&lt;/a&gt; , Up : &lt;a href=&quot;mips-loongson-built_002din-functions#MIPS-Loongson-Built_002din-Functions&quot;&gt;MIPS Loongson 내장 함수&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="2e9a5adea5eb1cebe97af016674baea059497f02" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;mixed-declarations#Mixed-Declarations&quot;&gt;Mixed Declarations&lt;/a&gt;, Previous: &lt;a href=&quot;case-ranges#Case-Ranges&quot;&gt;Case Ranges&lt;/a&gt;, Up: &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;mixed-declarations#Mixed-Declarations&quot;&gt;혼합 선언&lt;/a&gt; , 이전 : &lt;a href=&quot;case-ranges#Case-Ranges&quot;&gt;사례 범위&lt;/a&gt; , 최대 : &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C 확장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="9a51b571bb14a282e0af0b49e90a5bb41548f5b1" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;mmix-options#MMIX-Options&quot;&gt;MMIX Options&lt;/a&gt;, Previous: &lt;a href=&quot;microblaze-options#MicroBlaze-Options&quot;&gt;MicroBlaze Options&lt;/a&gt;, Up: &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;Submodel Options&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;mmix-options#MMIX-Options&quot;&gt;MMIX 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;microblaze-options#MicroBlaze-Options&quot;&gt;MicroBlaze 옵션&lt;/a&gt; , 위 : &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;하위 모델 옵션&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="3520d198d2de0741d68da8e3916a4aae200de2bb" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;mn10300-options#MN10300-Options&quot;&gt;MN10300 Options&lt;/a&gt;, Previous: &lt;a href=&quot;mips-options#MIPS-Options&quot;&gt;MIPS Options&lt;/a&gt;, Up: &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;Submodel Options&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;mn10300-options#MN10300-Options&quot;&gt;MN10300 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;mips-options#MIPS-Options&quot;&gt;MIPS 옵션&lt;/a&gt; , 위 : &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;서브 모델 옵션&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;내용&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="8cc5a24cd1485fe8a071c0f9646d0bf1e025413b" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;moxie-options#Moxie-Options&quot;&gt;Moxie Options&lt;/a&gt;, Previous: &lt;a href=&quot;mmix-options#MMIX-Options&quot;&gt;MMIX Options&lt;/a&gt;, Up: &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;Submodel Options&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;moxie-options#Moxie-Options&quot;&gt;Moxie 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;mmix-options#MMIX-Options&quot;&gt;MMIX 옵션&lt;/a&gt; , 위 : &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;하위 모델 옵션&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="58f854919c783589a5280e00cd70ed009c449630" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;msp430-function-attributes#MSP430-Function-Attributes&quot;&gt;MSP430 Function Attributes&lt;/a&gt;, Previous: &lt;a href=&quot;microsoft-windows-function-attributes#Microsoft-Windows-Function-Attributes&quot;&gt;Microsoft Windows Function Attributes&lt;/a&gt;, Up: &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;Function Attributes&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;msp430-function-attributes#MSP430-Function-Attributes&quot;&gt;MSP430 기능 속성&lt;/a&gt; , 이전 : &lt;a href=&quot;microsoft-windows-function-attributes#Microsoft-Windows-Function-Attributes&quot;&gt;Microsoft Windows 기능 속성&lt;/a&gt; , 위로 : &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;기능 속성&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="0f1e149f9142b31fd92088bdce61111f06779305" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;msp430-variable-attributes#MSP430-Variable-Attributes&quot;&gt;MSP430 Variable Attributes&lt;/a&gt;, Previous: &lt;a href=&quot;mep-variable-attributes#MeP-Variable-Attributes&quot;&gt;MeP Variable Attributes&lt;/a&gt;, Up: &lt;a href=&quot;variable-attributes#Variable-Attributes&quot;&gt;Variable Attributes&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;msp430-variable-attributes#MSP430-Variable-Attributes&quot;&gt;MSP430 변수 속성&lt;/a&gt; , 이전 : &lt;a href=&quot;mep-variable-attributes#MeP-Variable-Attributes&quot;&gt;MeP 변수 속성&lt;/a&gt; , 위로 : &lt;a href=&quot;variable-attributes#Variable-Attributes&quot;&gt;변수 속성&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="8a0647898943d8e5e84327fd178bbc2caa1fac6e" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;multi_002dalternative#Multi_002dAlternative&quot;&gt;Multi-Alternative&lt;/a&gt;, Up: &lt;a href=&quot;constraints#Constraints&quot;&gt;Constraints&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;multi_002dalternative#Multi_002dAlternative&quot;&gt;다중 대체&lt;/a&gt; , 위 : &lt;a href=&quot;constraints#Constraints&quot;&gt;제약 조건&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="4a8b971d30f19e37fc03ca8062d6203b6fcd9b3f" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;named-address-spaces#Named-Address-Spaces&quot;&gt;Named Address Spaces&lt;/a&gt;, Previous: &lt;a href=&quot;hex-floats#Hex-Floats&quot;&gt;Hex Floats&lt;/a&gt;, Up: &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;named-address-spaces#Named-Address-Spaces&quot;&gt;명명 된 주소 공간&lt;/a&gt; , 이전 : &lt;a href=&quot;hex-floats#Hex-Floats&quot;&gt;16 진 플로트&lt;/a&gt; , 위로 : &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C 확장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="9c28bd932e5411222517850549cad3df4e57d2e9" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;nds32-function-attributes#NDS32-Function-Attributes&quot;&gt;NDS32 Function Attributes&lt;/a&gt;, Previous: &lt;a href=&quot;mips-function-attributes#MIPS-Function-Attributes&quot;&gt;MIPS Function Attributes&lt;/a&gt;, Up: &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;Function Attributes&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;nds32-function-attributes#NDS32-Function-Attributes&quot;&gt;NDS32 기능 속성&lt;/a&gt; , 이전 : &lt;a href=&quot;mips-function-attributes#MIPS-Function-Attributes&quot;&gt;MIPS 기능 속성&lt;/a&gt; , 위쪽 : &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;기능 속성&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="ce6e06e68aa684ca4f3d38e369a55ec206ff4f9e" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;nds32-options#NDS32-Options&quot;&gt;NDS32 Options&lt;/a&gt;, Previous: &lt;a href=&quot;moxie-options#Moxie-Options&quot;&gt;Moxie Options&lt;/a&gt;, Up: &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;Submodel Options&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;nds32-options#NDS32-Options&quot;&gt;NDS32 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;moxie-options#Moxie-Options&quot;&gt;경륜 옵션&lt;/a&gt; , 위 : &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;서브 모델 옵션&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;내용&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="e8a50f3c61ea9b317a9aedcb9555b63044b15265" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;nested-functions#Nested-Functions&quot;&gt;Nested Functions&lt;/a&gt;, Previous: &lt;a href=&quot;local-labels#Local-Labels&quot;&gt;Local Labels&lt;/a&gt;, Up: &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;nested-functions#Nested-Functions&quot;&gt;중첩 함수&lt;/a&gt; , 이전 : &lt;a href=&quot;local-labels#Local-Labels&quot;&gt;로컬 레이블&lt;/a&gt; , 위로 : &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C 확장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="80e0abbdae5236c09af0fd4076c02ae68ea4088c" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;nios-ii-function-attributes#Nios-II-Function-Attributes&quot;&gt;Nios II Function Attributes&lt;/a&gt;, Previous: &lt;a href=&quot;msp430-function-attributes#MSP430-Function-Attributes&quot;&gt;MSP430 Function Attributes&lt;/a&gt;, Up: &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;Function Attributes&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;nios-ii-function-attributes#Nios-II-Function-Attributes&quot;&gt;Nios II 기능 속성&lt;/a&gt; , 이전 : &lt;a href=&quot;msp430-function-attributes#MSP430-Function-Attributes&quot;&gt;MSP430 기능 속성&lt;/a&gt; , 위 : &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;기능 속성&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="9e5af8cea7e8828c3fadde5f6ca6cbdac810c60d" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;nios-ii-options#Nios-II-Options&quot;&gt;Nios II Options&lt;/a&gt;, Previous: &lt;a href=&quot;msp430-options#MSP430-Options&quot;&gt;MSP430 Options&lt;/a&gt;, Up: &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;Submodel Options&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;nios-ii-options#Nios-II-Options&quot;&gt;Nios II 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;msp430-options#MSP430-Options&quot;&gt;MSP430 옵션&lt;/a&gt; , 위 : &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;하위 모델 옵션&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="c54db10c392160420226d0da94d9c9b028288d7f" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;nonlocal-gotos#Nonlocal-Gotos&quot;&gt;Nonlocal Gotos&lt;/a&gt;, Previous: &lt;a href=&quot;labels-as-values#Labels-as-Values&quot;&gt;Labels as Values&lt;/a&gt;, Up: &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;nonlocal-gotos#Nonlocal-Gotos&quot;&gt;비 로컬 이동&lt;/a&gt; , 이전 : &lt;a href=&quot;labels-as-values#Labels-as-Values&quot;&gt;레이블을 값으로&lt;/a&gt; , 위로 : &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C 확장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="b33d33c3bd571168e2905a69bce6dfa007416729" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;nvidia-ptx-options#Nvidia-PTX-Options&quot;&gt;Nvidia PTX Options&lt;/a&gt;, Previous: &lt;a href=&quot;nds32-options#NDS32-Options&quot;&gt;NDS32 Options&lt;/a&gt;, Up: &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;Submodel Options&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;nvidia-ptx-options#Nvidia-PTX-Options&quot;&gt;Nvidia PTX 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;nds32-options#NDS32-Options&quot;&gt;NDS32 옵션&lt;/a&gt; , 위 : 하위 모델 &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;옵션&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="c2dabd6d6ec6c228fbf79a685a05a1dc4aa1f752" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;objective_002dc#Objective_002dC&quot;&gt;Objective-C&lt;/a&gt;, Previous: &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C Extensions&lt;/a&gt;, Up: &lt;a href=&quot;index#Top&quot;&gt;Top&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;objective_002dc#Objective_002dC&quot;&gt;Objective-C&lt;/a&gt; , 이전 : &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C 확장&lt;/a&gt; , 위로 : &lt;a href=&quot;index#Top&quot;&gt;맨 위로&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="fc09400e5f456db5af3a1bf0b554cd2a0fe269f5" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;objective_002dc-and-objective_002dc_002b_002b-dialect-options#Objective_002dC-and-Objective_002dC_002b_002b-Dialect-Options&quot;&gt;Objective-C and Objective-C++ Dialect Options&lt;/a&gt;, Previous: &lt;a href=&quot;c-dialect-options#C-Dialect-Options&quot;&gt;C Dialect Options&lt;/a&gt;, Up: &lt;a href=&quot;invoking-gcc#Invoking-GCC&quot;&gt;Invoking GCC&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;objective_002dc-and-objective_002dc_002b_002b-dialect-options#Objective_002dC-and-Objective_002dC_002b_002b-Dialect-Options&quot;&gt;Objective-C 및 Objective-C ++ 방언 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;c-dialect-options#C-Dialect-Options&quot;&gt;C 방언 옵션&lt;/a&gt; , 위 : &lt;a href=&quot;invoking-gcc#Invoking-GCC&quot;&gt;GCC 호출&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="f7608c7c72518188c40d90a66a18e3eabcd20785" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;offsetof#Offsetof&quot;&gt;Offsetof&lt;/a&gt;, Previous: &lt;a href=&quot;return-address#Return-Address&quot;&gt;Return Address&lt;/a&gt;, Up: &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;offsetof#Offsetof&quot;&gt;오프셋&lt;/a&gt; , 이전 : &lt;a href=&quot;return-address#Return-Address&quot;&gt;반송 주소&lt;/a&gt; , 위로 : &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C 확장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;내용&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="d4af5899e841ea4f7724077b6093396d3ab69944" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;openrisc-options#OpenRISC-Options&quot;&gt;OpenRISC Options&lt;/a&gt;, Previous: &lt;a href=&quot;nios-ii-options#Nios-II-Options&quot;&gt;Nios II Options&lt;/a&gt;, Up: &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;Submodel Options&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;openrisc-options#OpenRISC-Options&quot;&gt;OpenRISC 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;nios-ii-options#Nios-II-Options&quot;&gt;Nios II 옵션&lt;/a&gt; , 위 : &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;하위 모델 옵션&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="b9500eba93d7f123e29442bb629c1608caa1d5ae" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;optimize-options#Optimize-Options&quot;&gt;Optimize Options&lt;/a&gt;, Previous: &lt;a href=&quot;warning-options#Warning-Options&quot;&gt;Warning Options&lt;/a&gt;, Up: &lt;a href=&quot;invoking-gcc#Invoking-GCC&quot;&gt;Invoking GCC&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;optimize-options#Optimize-Options&quot;&gt;최적화 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;warning-options#Warning-Options&quot;&gt;경고 옵션&lt;/a&gt; , 위로 : &lt;a href=&quot;invoking-gcc#Invoking-GCC&quot;&gt;GCC 호출&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="6c33fcbc4189395b7e93b06f2dd89b4aeffc2ea7" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;other-builtins#Other-Builtins&quot;&gt;Other Builtins&lt;/a&gt;, Previous: &lt;a href=&quot;x86-specific-memory-model-extensions-for-transactional-memory#x86-specific-memory-model-extensions-for-transactional-memory&quot;&gt;x86 specific memory model extensions for transactional memory&lt;/a&gt;, Up: &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;other-builtins#Other-Builtins&quot;&gt;Other Builtins&lt;/a&gt; , Previous : &lt;a href=&quot;x86-specific-memory-model-extensions-for-transactional-memory#x86-specific-memory-model-extensions-for-transactional-memory&quot;&gt;트랜잭션 메모리를위한 x86 특정 메모리 모델 확장&lt;/a&gt; , Up : &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C 확장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="22663b9602ac6dd91071e96ddfc242138205fff0" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;other-mips-built_002din-functions#Other-MIPS-Built_002din-Functions&quot;&gt;Other MIPS Built-in Functions&lt;/a&gt;, Previous: &lt;a href=&quot;mips-loongson-built_002din-functions#MIPS-Loongson-Built_002din-Functions&quot;&gt;MIPS Loongson Built-in Functions&lt;/a&gt;, Up: &lt;a href=&quot;target-builtins#Target-Builtins&quot;&gt;Target Builtins&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;other-mips-built_002din-functions#Other-MIPS-Built_002din-Functions&quot;&gt;기타 MIPS 내장 함수&lt;/a&gt; , 이전 : &lt;a href=&quot;mips-loongson-built_002din-functions#MIPS-Loongson-Built_002din-Functions&quot;&gt;MIPS Loongson 내장 함수&lt;/a&gt; , 위 : &lt;a href=&quot;target-builtins#Target-Builtins&quot;&gt;대상 내장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="cb3f14bc39890213bbd55cfebc05afcd446c9ae2" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;overall-options#Overall-Options&quot;&gt;Overall Options&lt;/a&gt;, Up: &lt;a href=&quot;invoking-gcc#Invoking-GCC&quot;&gt;Invoking GCC&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;overall-options#Overall-Options&quot;&gt;전체 옵션&lt;/a&gt; , 위 : &lt;a href=&quot;invoking-gcc#Invoking-GCC&quot;&gt;GCC 호출&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="53e4c21cf667d3a6b1066d7d47ff7c498d74ec61" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;powerpc-altivec-built_002din-functions-available-on-isa-2_002e06#PowerPC-AltiVec-Built_002din-Functions-Available-on-ISA-2_002e06&quot;&gt;PowerPC AltiVec Built-in Functions Available on ISA 2.06&lt;/a&gt;, Up: &lt;a href=&quot;powerpc-altivec_002fvsx-built_002din-functions#PowerPC-AltiVec_002fVSX-Built_002din-Functions&quot;&gt;PowerPC AltiVec/VSX Built-in Functions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;powerpc-altivec-built_002din-functions-available-on-isa-2_002e06#PowerPC-AltiVec-Built_002din-Functions-Available-on-ISA-2_002e06&quot;&gt;ISA 2.06&lt;/a&gt; 에서 사용 가능한 PowerPC AltiVec 기본 제공 기능 , 위로 : &lt;a href=&quot;powerpc-altivec_002fvsx-built_002din-functions#PowerPC-AltiVec_002fVSX-Built_002din-Functions&quot;&gt;PowerPC AltiVec / VSX 기본 제공 기능&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="d670770272c67f91b088e59dd68e3646a5e893aa" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;powerpc-altivec-built_002din-functions-available-on-isa-2_002e07#PowerPC-AltiVec-Built_002din-Functions-Available-on-ISA-2_002e07&quot;&gt;PowerPC AltiVec Built-in Functions Available on ISA 2.07&lt;/a&gt;, Previous: &lt;a href=&quot;powerpc-altivec-built_002din-functions-on-isa-2_002e05#PowerPC-AltiVec-Built_002din-Functions-on-ISA-2_002e05&quot;&gt;PowerPC AltiVec Built-in Functions on ISA 2.05&lt;/a&gt;, Up: &lt;a href=&quot;powerpc-altivec_002fvsx-built_002din-functions#PowerPC-AltiVec_002fVSX-Built_002din-Functions&quot;&gt;PowerPC AltiVec/VSX Built-in Functions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;powerpc-altivec-built_002din-functions-available-on-isa-2_002e07#PowerPC-AltiVec-Built_002din-Functions-Available-on-ISA-2_002e07&quot;&gt;ISA 2.07&lt;/a&gt; 에서 사용 가능한 PowerPC AltiVec 내장 함수 , 이전 : &lt;a href=&quot;powerpc-altivec-built_002din-functions-on-isa-2_002e05#PowerPC-AltiVec-Built_002din-Functions-on-ISA-2_002e05&quot;&gt;ISA 2.05에서 PowerPC AltiVec 내장 함수&lt;/a&gt; , 위로 : &lt;a href=&quot;powerpc-altivec_002fvsx-built_002din-functions#PowerPC-AltiVec_002fVSX-Built_002din-Functions&quot;&gt;PowerPC AltiVec / VSX 내장 함수&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="f6c9948cd46a1059908aa1cd3369178c4739b4b7" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;powerpc-altivec-built_002din-functions-available-on-isa-3_002e0#PowerPC-AltiVec-Built_002din-Functions-Available-on-ISA-3_002e0&quot;&gt;PowerPC AltiVec Built-in Functions Available on ISA 3.0&lt;/a&gt;, Previous: &lt;a href=&quot;powerpc-altivec-built_002din-functions-available-on-isa-2_002e06#PowerPC-AltiVec-Built_002din-Functions-Available-on-ISA-2_002e06&quot;&gt;PowerPC AltiVec Built-in Functions Available on ISA 2.06&lt;/a&gt;, Up: &lt;a href=&quot;powerpc-altivec_002fvsx-built_002din-functions#PowerPC-AltiVec_002fVSX-Built_002din-Functions&quot;&gt;PowerPC AltiVec/VSX Built-in Functions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;powerpc-altivec-built_002din-functions-available-on-isa-3_002e0#PowerPC-AltiVec-Built_002din-Functions-Available-on-ISA-3_002e0&quot;&gt;ISA 3.0&lt;/a&gt; 에서 사용 가능한 PowerPC AltiVec 내장 함수 , 이전 : &lt;a href=&quot;powerpc-altivec-built_002din-functions-available-on-isa-2_002e06#PowerPC-AltiVec-Built_002din-Functions-Available-on-ISA-2_002e06&quot;&gt;ISA 2.06&lt;/a&gt; 에서 사용 가능한 PowerPC AltiVec 내장 함수 , 위로 : &lt;a href=&quot;powerpc-altivec_002fvsx-built_002din-functions#PowerPC-AltiVec_002fVSX-Built_002din-Functions&quot;&gt;PowerPC AltiVec / VSX 내장 함수&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="d9b10827e89c59f90592d502827c879cba285e33" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;powerpc-atomic-memory-operation-functions#PowerPC-Atomic-Memory-Operation-Functions&quot;&gt;PowerPC Atomic Memory Operation Functions&lt;/a&gt;, Previous: &lt;a href=&quot;powerpc-altivec_002fvsx-built_002din-functions#PowerPC-AltiVec_002fVSX-Built_002din-Functions&quot;&gt;PowerPC AltiVec/VSX Built-in Functions&lt;/a&gt;, Up: &lt;a href=&quot;target-builtins#Target-Builtins&quot;&gt;Target Builtins&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;powerpc-atomic-memory-operation-functions#PowerPC-Atomic-Memory-Operation-Functions&quot;&gt;PowerPC 원자 메모리 작동 기능&lt;/a&gt; , 이전 : &lt;a href=&quot;powerpc-altivec_002fvsx-built_002din-functions#PowerPC-AltiVec_002fVSX-Built_002din-Functions&quot;&gt;PowerPC AltiVec / VSX 내장 기능&lt;/a&gt; , 위 : &lt;a href=&quot;target-builtins#Target-Builtins&quot;&gt;대상 내장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="d608f11578662cf1826c523ba6021ca38edc1f79" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;powerpc-hardware-transactional-memory-built_002din-functions#PowerPC-Hardware-Transactional-Memory-Built_002din-Functions&quot;&gt;PowerPC Hardware Transactional Memory Built-in Functions&lt;/a&gt;, Previous: &lt;a href=&quot;basic-powerpc-built_002din-functions#Basic-PowerPC-Built_002din-Functions&quot;&gt;Basic PowerPC Built-in Functions&lt;/a&gt;, Up: &lt;a href=&quot;target-builtins#Target-Builtins&quot;&gt;Target Builtins&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;powerpc-hardware-transactional-memory-built_002din-functions#PowerPC-Hardware-Transactional-Memory-Built_002din-Functions&quot;&gt;PowerPC 하드웨어 트랜잭션 메모리 내장 함수&lt;/a&gt; , 이전 : &lt;a href=&quot;basic-powerpc-built_002din-functions#Basic-PowerPC-Built_002din-Functions&quot;&gt;기본 PowerPC 내장 함수&lt;/a&gt; , 위로 : &lt;a href=&quot;target-builtins#Target-Builtins&quot;&gt;대상 내장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="8ca7ac02018353a6bb8040513cab68ac5c182478" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;powerpc-options#PowerPC-Options&quot;&gt;PowerPC Options&lt;/a&gt;, Previous: &lt;a href=&quot;pdp_002d11-options#PDP_002d11-Options&quot;&gt;PDP-11 Options&lt;/a&gt;, Up: &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;Submodel Options&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;powerpc-options#PowerPC-Options&quot;&gt;PowerPC 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;pdp_002d11-options#PDP_002d11-Options&quot;&gt;PDP-11 옵션&lt;/a&gt; , 위 : &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;하위 모델 옵션&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="f68f274686386175b2359c4a10b0f71ef66d066e" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;precompiled-headers#Precompiled-Headers&quot;&gt;Precompiled Headers&lt;/a&gt;, Previous: &lt;a href=&quot;spec-files#Spec-Files&quot;&gt;Spec Files&lt;/a&gt;, Up: &lt;a href=&quot;invoking-gcc#Invoking-GCC&quot;&gt;Invoking GCC&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;precompiled-headers#Precompiled-Headers&quot;&gt;사전 컴파일 된 헤더&lt;/a&gt; , 이전 : &lt;a href=&quot;spec-files#Spec-Files&quot;&gt;사양 파일&lt;/a&gt; , 위로 : &lt;a href=&quot;invoking-gcc#Invoking-GCC&quot;&gt;GCC 호출&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="1184638a9ad76016621ecfa6d1c6738b70ce6d64" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;preprocessor-options#Preprocessor-Options&quot;&gt;Preprocessor Options&lt;/a&gt;, Previous: &lt;a href=&quot;optimize-options#Optimize-Options&quot;&gt;Optimize Options&lt;/a&gt;, Up: &lt;a href=&quot;invoking-gcc#Invoking-GCC&quot;&gt;Invoking GCC&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : 전 &lt;a href=&quot;preprocessor-options#Preprocessor-Options&quot;&gt;처리기 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;optimize-options#Optimize-Options&quot;&gt;최적화 옵션&lt;/a&gt; , 위로 : &lt;a href=&quot;invoking-gcc#Invoking-GCC&quot;&gt;GCC 호출&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="85036669a15490093a2c84a280452a776a550bb7" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;qualifiers-implementation#Qualifiers-implementation&quot;&gt;Qualifiers implementation&lt;/a&gt;, Previous: &lt;a href=&quot;hints-implementation#Hints-implementation&quot;&gt;Hints implementation&lt;/a&gt;, Up: &lt;a href=&quot;c-implementation#C-Implementation&quot;&gt;C Implementation&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;qualifiers-implementation#Qualifiers-implementation&quot;&gt;한정자 구현&lt;/a&gt; , 이전 : &lt;a href=&quot;hints-implementation#Hints-implementation&quot;&gt;힌트 구현&lt;/a&gt; , 위로 : &lt;a href=&quot;c-implementation#C-Implementation&quot;&gt;C 구현&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="5ffcd6b1a3c30b45ce0072ad0572358badf0cea1" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;raw-read_002fwrite-functions#Raw-read_002fwrite-Functions&quot;&gt;Raw read/write Functions&lt;/a&gt;, Previous: &lt;a href=&quot;directly_002dmapped-integer-functions#Directly_002dmapped-Integer-Functions&quot;&gt;Directly-mapped Integer Functions&lt;/a&gt;, Up: &lt;a href=&quot;fr_002dv-built_002din-functions#FR_002dV-Built_002din-Functions&quot;&gt;FR-V Built-in Functions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;raw-read_002fwrite-functions#Raw-read_002fwrite-Functions&quot;&gt;원시 읽기 / 쓰기 함수&lt;/a&gt; , 이전 : &lt;a href=&quot;directly_002dmapped-integer-functions#Directly_002dmapped-Integer-Functions&quot;&gt;직접 매핑 된 정수 함수&lt;/a&gt; , 위 : &lt;a href=&quot;fr_002dv-built_002din-functions#FR_002dV-Built_002din-Functions&quot;&gt;FR-V 내장 함수&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="9750fe5153662baa2491e23292b7cae62b763a51" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;restricted-pointers#Restricted-Pointers&quot;&gt;Restricted Pointers&lt;/a&gt;, Up: &lt;a href=&quot;c_002b_002b-extensions#C_002b_002b-Extensions&quot;&gt;C++ Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;restricted-pointers#Restricted-Pointers&quot;&gt;제한된 포인터&lt;/a&gt; , 위로 : &lt;a href=&quot;c_002b_002b-extensions#C_002b_002b-Extensions&quot;&gt;C ++ 확장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="5ecd0bf38bf2e860f67521f57cd9269c112afdac" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;return-address#Return-Address&quot;&gt;Return Address&lt;/a&gt;, Previous: &lt;a href=&quot;incomplete-enums#Incomplete-Enums&quot;&gt;Incomplete Enums&lt;/a&gt;, Up: &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;return-address#Return-Address&quot;&gt;반송 주소&lt;/a&gt; , 이전 : &lt;a href=&quot;incomplete-enums#Incomplete-Enums&quot;&gt;불완전한 열거 형&lt;/a&gt; , 위로 : &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C 확장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="a46d901c69e7311a78069bbbae6b48bc11698f11" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;risc_002dv-function-attributes#RISC_002dV-Function-Attributes&quot;&gt;RISC-V Function Attributes&lt;/a&gt;, Previous: &lt;a href=&quot;nvidia-ptx-function-attributes#Nvidia-PTX-Function-Attributes&quot;&gt;Nvidia PTX Function Attributes&lt;/a&gt;, Up: &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;Function Attributes&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;risc_002dv-function-attributes#RISC_002dV-Function-Attributes&quot;&gt;RISC-V 기능 속성&lt;/a&gt; , 이전 : &lt;a href=&quot;nvidia-ptx-function-attributes#Nvidia-PTX-Function-Attributes&quot;&gt;Nvidia PTX 기능 속성&lt;/a&gt; , 위 : &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;기능 속성&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="cf1a4c546049e42dc71fbfd97888410d4f66145a" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;rl78-options#RL78-Options&quot;&gt;RL78 Options&lt;/a&gt;, Previous: &lt;a href=&quot;powerpc-options#PowerPC-Options&quot;&gt;PowerPC Options&lt;/a&gt;, Up: &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;Submodel Options&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;rl78-options#RL78-Options&quot;&gt;RL78 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;powerpc-options#PowerPC-Options&quot;&gt;PowerPC 옵션&lt;/a&gt; , 위 : &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;하위 모델 옵션&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="84454805b4eb2e47df52d824bc09eb495ede3af1" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;rs_002f6000-and-powerpc-options#RS_002f6000-and-PowerPC-Options&quot;&gt;RS/6000 and PowerPC Options&lt;/a&gt;, Previous: &lt;a href=&quot;risc_002dv-options#RISC_002dV-Options&quot;&gt;RISC-V Options&lt;/a&gt;, Up: &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;Submodel Options&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;rs_002f6000-and-powerpc-options#RS_002f6000-and-PowerPC-Options&quot;&gt;RS / 6000 및 PowerPC 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;risc_002dv-options#RISC_002dV-Options&quot;&gt;RISC-V 옵션&lt;/a&gt; , 위 : &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;하위 모델 옵션&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="4cccfd20279cda44cee876e13d03598665410818" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;rs_002f6000-and-powerpc-pragmas#RS_002f6000-and-PowerPC-Pragmas&quot;&gt;RS/6000 and PowerPC Pragmas&lt;/a&gt;, Previous: &lt;a href=&quot;m32c-pragmas#M32C-Pragmas&quot;&gt;M32C Pragmas&lt;/a&gt;, Up: &lt;a href=&quot;pragmas#Pragmas&quot;&gt;Pragmas&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;rs_002f6000-and-powerpc-pragmas#RS_002f6000-and-PowerPC-Pragmas&quot;&gt;RS / 6000 및 PowerPC Pragma&lt;/a&gt; , 이전 : &lt;a href=&quot;m32c-pragmas#M32C-Pragmas&quot;&gt;M32C Pragmas&lt;/a&gt; , Up : &lt;a href=&quot;pragmas#Pragmas&quot;&gt;Pragma&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="ac346075f9afa0468b0e4b2b287ce700b76fcb03" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;rx-options#RX-Options&quot;&gt;RX Options&lt;/a&gt;, Previous: &lt;a href=&quot;rl78-options#RL78-Options&quot;&gt;RL78 Options&lt;/a&gt;, Up: &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;Submodel Options&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;rx-options#RX-Options&quot;&gt;RX 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;rl78-options#RL78-Options&quot;&gt;RL78 옵션&lt;/a&gt; , 위 : &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;하위 모델 옵션&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="2fb03c2843d5d13f1cfa5d9a06f0a96c35c05105" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;s_002f390-and-zseries-options#S_002f390-and-zSeries-Options&quot;&gt;S/390 and zSeries Options&lt;/a&gt;, Previous: &lt;a href=&quot;rs_002f6000-and-powerpc-options#RS_002f6000-and-PowerPC-Options&quot;&gt;RS/6000 and PowerPC Options&lt;/a&gt;, Up: &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;Submodel Options&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;s_002f390-and-zseries-options#S_002f390-and-zSeries-Options&quot;&gt;S / 390 및 zSeries 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;rs_002f6000-and-powerpc-options#RS_002f6000-and-PowerPC-Options&quot;&gt;RS / 6000 및 PowerPC 옵션&lt;/a&gt; , 위 : &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;하위 모델 옵션&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="b0e3bf7fb52e2e1b726e378ef9451fdb667b06e3" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;s_002f390-function-attributes#S_002f390-Function-Attributes&quot;&gt;S/390 Function Attributes&lt;/a&gt;, Previous: &lt;a href=&quot;rl78-function-attributes#RL78-Function-Attributes&quot;&gt;RL78 Function Attributes&lt;/a&gt;, Up: &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;Function Attributes&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;s_002f390-function-attributes#S_002f390-Function-Attributes&quot;&gt;S / 390 기능 속성&lt;/a&gt; , 이전 : &lt;a href=&quot;rl78-function-attributes#RL78-Function-Attributes&quot;&gt;RL78 기능 속성&lt;/a&gt; , 위쪽 : &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;기능 속성&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="004a04a27689c95e6cc62feeb31a1f4f31525783" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;s_002f390-system-z-built_002din-functions#S_002f390-System-z-Built_002din-Functions&quot;&gt;S/390 System z Built-in Functions&lt;/a&gt;, Previous: &lt;a href=&quot;powerpc-atomic-memory-operation-functions#PowerPC-Atomic-Memory-Operation-Functions&quot;&gt;PowerPC Atomic Memory Operation Functions&lt;/a&gt;, Up: &lt;a href=&quot;target-builtins#Target-Builtins&quot;&gt;Target Builtins&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;s_002f390-system-z-built_002din-functions#S_002f390-System-z-Built_002din-Functions&quot;&gt;S / 390 System z 내장 기능&lt;/a&gt; , 이전 : &lt;a href=&quot;powerpc-atomic-memory-operation-functions#PowerPC-Atomic-Memory-Operation-Functions&quot;&gt;PowerPC 원자 메모리 작동 기능&lt;/a&gt; , 위 : &lt;a href=&quot;target-builtins#Target-Builtins&quot;&gt;대상 내장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="1b4d43ec4aaa5c51b8254869cf51da7cb318fd30" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;score-options#Score-Options&quot;&gt;Score Options&lt;/a&gt;, Previous: &lt;a href=&quot;rx-options#RX-Options&quot;&gt;RX Options&lt;/a&gt;, Up: &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;Submodel Options&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;score-options#Score-Options&quot;&gt;점수 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;rx-options#RX-Options&quot;&gt;RX 옵션&lt;/a&gt; , 위 : &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;하위 모델 옵션&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="7c342902e7daa92a45a3e6adf4c04a0023f7c8fa" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;sh-built_002din-functions#SH-Built_002din-Functions&quot;&gt;SH Built-in Functions&lt;/a&gt;, Previous: &lt;a href=&quot;rx-built_002din-functions#RX-Built_002din-Functions&quot;&gt;RX Built-in Functions&lt;/a&gt;, Up: &lt;a href=&quot;target-builtins#Target-Builtins&quot;&gt;Target Builtins&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;sh-built_002din-functions#SH-Built_002din-Functions&quot;&gt;SH 내장 함수&lt;/a&gt; , 이전 : &lt;a href=&quot;rx-built_002din-functions#RX-Built_002din-Functions&quot;&gt;RX 내장 함수&lt;/a&gt; , 위 : &lt;a href=&quot;target-builtins#Target-Builtins&quot;&gt;대상 내장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="9a96d534e7b868bf17122d27b5ac88cb55bc6a59" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;solaris-2-options#Solaris-2-Options&quot;&gt;Solaris 2 Options&lt;/a&gt;, Previous: &lt;a href=&quot;score-options#Score-Options&quot;&gt;Score Options&lt;/a&gt;, Up: &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;Submodel Options&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;solaris-2-options#Solaris-2-Options&quot;&gt;Solaris 2 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;score-options#Score-Options&quot;&gt;스코어 옵션&lt;/a&gt; , 위로 : &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;하위 모델 옵션&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="e1b931b2d6bbdea54f1c12f94678c1d2b81826ef" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;spec-files#Spec-Files&quot;&gt;Spec Files&lt;/a&gt;, Previous: &lt;a href=&quot;developer-options#Developer-Options&quot;&gt;Developer Options&lt;/a&gt;, Up: &lt;a href=&quot;invoking-gcc#Invoking-GCC&quot;&gt;Invoking GCC&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;spec-files#Spec-Files&quot;&gt;사양 파일&lt;/a&gt; , 이전 : &lt;a href=&quot;developer-options#Developer-Options&quot;&gt;개발자 옵션&lt;/a&gt; , 위로 : &lt;a href=&quot;invoking-gcc#Invoking-GCC&quot;&gt;GCC 호출&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="f8584dd766dd43b5de1c66d1350e2cd6323ac599" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;spu-built_002din-functions#SPU-Built_002din-Functions&quot;&gt;SPU Built-in Functions&lt;/a&gt;, Previous: &lt;a href=&quot;sh-built_002din-functions#SH-Built_002din-Functions&quot;&gt;SH Built-in Functions&lt;/a&gt;, Up: &lt;a href=&quot;target-builtins#Target-Builtins&quot;&gt;Target Builtins&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;spu-built_002din-functions#SPU-Built_002din-Functions&quot;&gt;SPU 내장 함수&lt;/a&gt; , 이전 : &lt;a href=&quot;sh-built_002din-functions#SH-Built_002din-Functions&quot;&gt;SH 내장 함수&lt;/a&gt; , 위 : &lt;a href=&quot;target-builtins#Target-Builtins&quot;&gt;대상 내장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="a143082082f64885fe3e57a8e6711204ee19df8d" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;spu-function-attributes#SPU-Function-Attributes&quot;&gt;SPU Function Attributes&lt;/a&gt;, Previous: &lt;a href=&quot;s_002f390-function-attributes#S_002f390-Function-Attributes&quot;&gt;S/390 Function Attributes&lt;/a&gt;, Up: &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;Function Attributes&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;spu-function-attributes#SPU-Function-Attributes&quot;&gt;SPU 기능 속성&lt;/a&gt; , 이전 : &lt;a href=&quot;s_002f390-function-attributes#S_002f390-Function-Attributes&quot;&gt;S / 390 기능 속성&lt;/a&gt; , 위로 : &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;기능 속성&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="8b648890a8c81a7ec58b986d4066100a3dd7cbed" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;spu-options#SPU-Options&quot;&gt;SPU Options&lt;/a&gt;, Previous: &lt;a href=&quot;solaris-2-options#Solaris-2-Options&quot;&gt;Solaris 2 Options&lt;/a&gt;, Up: &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;Submodel Options&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;spu-options#SPU-Options&quot;&gt;SPU 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;solaris-2-options#Solaris-2-Options&quot;&gt;Solaris 2 옵션&lt;/a&gt; , 위로 : &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;하위 모델 옵션&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="d390f886bacd9702e68bd3c1e2c97374feb32abf" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;standards#Standards&quot;&gt;Standards&lt;/a&gt;, Up: &lt;a href=&quot;index#Top&quot;&gt;Top&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;standards#Standards&quot;&gt;표준&lt;/a&gt; , 위로 : &lt;a href=&quot;index#Top&quot;&gt;맨 위로&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="b339bd2b5b5710f97645ab45223776731ecd31ad" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;Submodel Options&lt;/a&gt;, Previous: &lt;a href=&quot;code-gen-options#Code-Gen-Options&quot;&gt;Code Gen Options&lt;/a&gt;, Up: &lt;a href=&quot;invoking-gcc#Invoking-GCC&quot;&gt;Invoking GCC&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;하위 모델 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;code-gen-options#Code-Gen-Options&quot;&gt;Code Gen 옵션&lt;/a&gt; , 위로 : &lt;a href=&quot;invoking-gcc#Invoking-GCC&quot;&gt;GCC 호출&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="d2578773fcc6d5c47fc01c5cadc0510c1f92deec" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;synchronization#Synchronization&quot;&gt;Synchronization&lt;/a&gt;, Previous: &lt;a href=&quot;compatibility_005falias#compatibility_005falias&quot;&gt;compatibility_alias&lt;/a&gt;, Up: &lt;a href=&quot;objective_002dc#Objective_002dC&quot;&gt;Objective-C&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;synchronization#Synchronization&quot;&gt;동기화&lt;/a&gt; , 이전 : &lt;a href=&quot;compatibility_005falias#compatibility_005falias&quot;&gt;compatibility_alias&lt;/a&gt; , 위로 : &lt;a href=&quot;objective_002dc#Objective_002dC&quot;&gt;Objective-C&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="160e20db22c2977bc73e482248a54545e88d2534" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;system-v-options#System-V-Options&quot;&gt;System V Options&lt;/a&gt;, Previous: &lt;a href=&quot;sparc-options#SPARC-Options&quot;&gt;SPARC Options&lt;/a&gt;, Up: &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;Submodel Options&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;system-v-options#System-V-Options&quot;&gt;System V 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;sparc-options#SPARC-Options&quot;&gt;SPARC 옵션&lt;/a&gt; , 위로 : &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;하위 모델 옵션&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="bd4f8db12751bae78907d018eced9a5b1deaf76f" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;target-builtins#Target-Builtins&quot;&gt;Target Builtins&lt;/a&gt;, Previous: &lt;a href=&quot;object-size-checking#Object-Size-Checking&quot;&gt;Object Size Checking&lt;/a&gt;, Up: &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;target-builtins#Target-Builtins&quot;&gt;대상 내장&lt;/a&gt; , 이전 : &lt;a href=&quot;object-size-checking#Object-Size-Checking&quot;&gt;객체 크기 확인&lt;/a&gt; , 위로 : &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C 확장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="793c354854a6e0ef193285ffbd65703a0822f428" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;target-format-checks#Target-Format-Checks&quot;&gt;Target Format Checks&lt;/a&gt;, Previous: &lt;a href=&quot;other-builtins#Other-Builtins&quot;&gt;Other Builtins&lt;/a&gt;, Up: &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;target-format-checks#Target-Format-Checks&quot;&gt;대상 형식 확인&lt;/a&gt; , 이전 : &lt;a href=&quot;other-builtins#Other-Builtins&quot;&gt;기타 내장&lt;/a&gt; , 위로 : &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C 확장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="6575ee5d8336ee06cddb237ce6b2aa12a3e666a9" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;template-instantiation#Template-Instantiation&quot;&gt;Template Instantiation&lt;/a&gt;, Previous: &lt;a href=&quot;vague-linkage#Vague-Linkage&quot;&gt;Vague Linkage&lt;/a&gt;, Up: &lt;a href=&quot;c_002b_002b-extensions#C_002b_002b-Extensions&quot;&gt;C++ Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;template-instantiation#Template-Instantiation&quot;&gt;템플릿 인스턴스화&lt;/a&gt; , 이전 : &lt;a href=&quot;vague-linkage#Vague-Linkage&quot;&gt;Vague Linkage&lt;/a&gt; , Up : &lt;a href=&quot;c_002b_002b-extensions#C_002b_002b-Extensions&quot;&gt;C ++ 확장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="6ac6b481f51cf113f0ec82d8ca6595b45f12bcd5" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;temporaries#Temporaries&quot;&gt;Temporaries&lt;/a&gt;, Previous: &lt;a href=&quot;static-definitions#Static-Definitions&quot;&gt;Static Definitions&lt;/a&gt;, Up: &lt;a href=&quot;c_002b_002b-misunderstandings#C_002b_002b-Misunderstandings&quot;&gt;C++ Misunderstandings&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;temporaries#Temporaries&quot;&gt;임시&lt;/a&gt; , 이전 : &lt;a href=&quot;static-definitions#Static-Definitions&quot;&gt;정적 정의&lt;/a&gt; , 위로 : &lt;a href=&quot;c_002b_002b-misunderstandings#C_002b_002b-Misunderstandings&quot;&gt;C ++ 오해&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="34a4a217d2b997bf4c38556ecb4bcb0a2743e80a" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;thread_002dlocal#Thread_002dLocal&quot;&gt;Thread-Local&lt;/a&gt;, Previous: &lt;a href=&quot;pragmas#Pragmas&quot;&gt;Pragmas&lt;/a&gt;, Up: &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;thread_002dlocal#Thread_002dLocal&quot;&gt;Thread-Local&lt;/a&gt; , 이전 : &lt;a href=&quot;pragmas#Pragmas&quot;&gt;Pragmas&lt;/a&gt; , 위로 : &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C 확장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="65a4bab77b18521b2acb2c89169de8a4a74a0610" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;traditional-gnu-objective_002dc-runtime-api#Traditional-GNU-Objective_002dC-runtime-API&quot;&gt;Traditional GNU Objective-C runtime API&lt;/a&gt;, Up: &lt;a href=&quot;gnu-objective_002dc-runtime-api#GNU-Objective_002dC-runtime-API&quot;&gt;GNU Objective-C runtime API&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;traditional-gnu-objective_002dc-runtime-api#Traditional-GNU-Objective_002dC-runtime-API&quot;&gt;전통적인 GNU Objective-C 런타임 API&lt;/a&gt; , 위로 : &lt;a href=&quot;gnu-objective_002dc-runtime-api#GNU-Objective_002dC-runtime-API&quot;&gt;GNU Objective-C 런타임 API&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="aa99fdafd15098ca1802ee69c77101bf76fd9c8b" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;type-attributes#Type-Attributes&quot;&gt;Type Attributes&lt;/a&gt;, Previous: &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;Function Attributes&lt;/a&gt;, Up: &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;type-attributes#Type-Attributes&quot;&gt;유형 속성&lt;/a&gt; , 이전 : &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;기능 속성&lt;/a&gt; , 위로 : &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C 확장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="eacf67b80de9e0a9fb491a29b2f34ab70562f47f" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;type-encoding#Type-encoding&quot;&gt;Type encoding&lt;/a&gt;, Previous: &lt;a href=&quot;gnu-objective_002dc-runtime-api#GNU-Objective_002dC-runtime-API&quot;&gt;GNU Objective-C runtime API&lt;/a&gt;, Up: &lt;a href=&quot;objective_002dc#Objective_002dC&quot;&gt;Objective-C&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;type-encoding#Type-encoding&quot;&gt;유형 인코딩&lt;/a&gt; , 이전 : &lt;a href=&quot;gnu-objective_002dc-runtime-api#GNU-Objective_002dC-runtime-API&quot;&gt;GNU Objective-C 런타임 API&lt;/a&gt; , 위로 : &lt;a href=&quot;objective_002dc#Objective_002dC&quot;&gt;Objective-C&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="fc69f87f51d89fae61c58267cf2049f715acde0f" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;typeof#Typeof&quot;&gt;Typeof&lt;/a&gt;, Previous: &lt;a href=&quot;nonlocal-gotos#Nonlocal-Gotos&quot;&gt;Nonlocal Gotos&lt;/a&gt;, Up: &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;typeof#Typeof&quot;&gt;Typeof&lt;/a&gt; , 이전 : &lt;a href=&quot;nonlocal-gotos#Nonlocal-Gotos&quot;&gt;Nonlocal Gotos&lt;/a&gt; , 위로 : &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C 확장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="25a66026860fae1eb88cfb0361002b1ce55e6065" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;using-assembly-language-with-c#Using-Assembly-Language-with-C&quot;&gt;Using Assembly Language with C&lt;/a&gt;, Previous: &lt;a href=&quot;inline#Inline&quot;&gt;Inline&lt;/a&gt;, Up: &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;using-assembly-language-with-c#Using-Assembly-Language-with-C&quot;&gt;C로 어셈블리 언어 사용&lt;/a&gt; , 이전 : &lt;a href=&quot;inline#Inline&quot;&gt;인라인&lt;/a&gt; , 위로 : &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C 확장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="df5d6354b28f58c864ce0680393a8dda9a06b76a" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;variable-attributes#Variable-Attributes&quot;&gt;Variable Attributes&lt;/a&gt;, Previous: &lt;a href=&quot;mixed-declarations#Mixed-Declarations&quot;&gt;Mixed Declarations&lt;/a&gt;, Up: &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;variable-attributes#Variable-Attributes&quot;&gt;변수 속성&lt;/a&gt; , 이전 : &lt;a href=&quot;mixed-declarations#Mixed-Declarations&quot;&gt;혼합 선언&lt;/a&gt; , 위로 : &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C 확장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="5db116d71e256827be321280aebb09f6d0d9e453" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;variadic-macros#Variadic-Macros&quot;&gt;Variadic Macros&lt;/a&gt;, Previous: &lt;a href=&quot;empty-structures#Empty-Structures&quot;&gt;Empty Structures&lt;/a&gt;, Up: &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;variadic-macros#Variadic-Macros&quot;&gt;Variadic Macros&lt;/a&gt; , Previous : &lt;a href=&quot;empty-structures#Empty-Structures&quot;&gt;Empty Structures&lt;/a&gt; , Up : &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C 확장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="c7be7d2a838297920c4a502bb912e89a751b09be" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;vax-options#VAX-Options&quot;&gt;VAX Options&lt;/a&gt;, Previous: &lt;a href=&quot;tilepro-options#TILEPro-Options&quot;&gt;TILEPro Options&lt;/a&gt;, Up: &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;Submodel Options&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;vax-options#VAX-Options&quot;&gt;VAX 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;tilepro-options#TILEPro-Options&quot;&gt;TILEPro 옵션&lt;/a&gt; , 위 : 하위 모델 &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;옵션&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="73b6582057889a487aac4638c08a07c5425c4a10" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;vector-extensions#Vector-Extensions&quot;&gt;Vector Extensions&lt;/a&gt;, Previous: &lt;a href=&quot;function-names#Function-Names&quot;&gt;Function Names&lt;/a&gt;, Up: &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;vector-extensions#Vector-Extensions&quot;&gt;벡터 확장&lt;/a&gt; , 이전 : &lt;a href=&quot;function-names#Function-Names&quot;&gt;함수 이름&lt;/a&gt; , 위로 : &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C 확장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="dda601323d96e583079f776a6506022c59992c70" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;visibility-pragmas#Visibility-Pragmas&quot;&gt;Visibility Pragmas&lt;/a&gt;, Previous: &lt;a href=&quot;weak-pragmas#Weak-Pragmas&quot;&gt;Weak Pragmas&lt;/a&gt;, Up: &lt;a href=&quot;pragmas#Pragmas&quot;&gt;Pragmas&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;visibility-pragmas#Visibility-Pragmas&quot;&gt;가시성 프라 그마&lt;/a&gt; , 이전 : &lt;a href=&quot;weak-pragmas#Weak-Pragmas&quot;&gt;약한 프라 그마&lt;/a&gt; , 위로 : &lt;a href=&quot;pragmas#Pragmas&quot;&gt;프라 그마&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="2cb49c6c2d4a7062cf2b24377e65c2fd116b7e17" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;vms-options#VMS-Options&quot;&gt;VMS Options&lt;/a&gt;, Previous: &lt;a href=&quot;vax-options#VAX-Options&quot;&gt;VAX Options&lt;/a&gt;, Up: &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;Submodel Options&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;vms-options#VMS-Options&quot;&gt;VMS 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;vax-options#VAX-Options&quot;&gt;VAX 옵션&lt;/a&gt; , 위 : &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;하위 모델 옵션&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="d577a13cc5442024c3a00d7c0620458146b380a1" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;volatiles#Volatiles&quot;&gt;Volatiles&lt;/a&gt;, Previous: &lt;a href=&quot;alignment#Alignment&quot;&gt;Alignment&lt;/a&gt;, Up: &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;volatiles#Volatiles&quot;&gt;휘발성&lt;/a&gt; : 이전 : &lt;a href=&quot;alignment#Alignment&quot;&gt;정렬&lt;/a&gt; , 위 : &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C 확장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="bb352232a36967fb4d50f075c07205745a510e46" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;warning-options#Warning-Options&quot;&gt;Warning Options&lt;/a&gt;, Previous: &lt;a href=&quot;objective_002dc-and-objective_002dc_002b_002b-dialect-options#Objective_002dC-and-Objective_002dC_002b_002b-Dialect-Options&quot;&gt;Objective-C and Objective-C++ Dialect Options&lt;/a&gt;, Up: &lt;a href=&quot;invoking-gcc#Invoking-GCC&quot;&gt;Invoking GCC&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;warning-options#Warning-Options&quot;&gt;경고 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;objective_002dc-and-objective_002dc_002b_002b-dialect-options#Objective_002dC-and-Objective_002dC_002b_002b-Dialect-Options&quot;&gt;Objective-C 및 Objective-C ++ 방언 옵션&lt;/a&gt; , 위 : &lt;a href=&quot;invoking-gcc#Invoking-GCC&quot;&gt;GCC 호출&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="43a7c98cd76b20a1a005fbd82721268aeb19185f" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;warnings-and-errors#Warnings-and-Errors&quot;&gt;Warnings and Errors&lt;/a&gt;, Previous: &lt;a href=&quot;c_002b_002b-misunderstandings#C_002b_002b-Misunderstandings&quot;&gt;C++ Misunderstandings&lt;/a&gt;, Up: &lt;a href=&quot;trouble#Trouble&quot;&gt;Trouble&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;warnings-and-errors#Warnings-and-Errors&quot;&gt;경고 및 오류&lt;/a&gt; , 이전 : &lt;a href=&quot;c_002b_002b-misunderstandings#C_002b_002b-Misunderstandings&quot;&gt;C ++ 오해&lt;/a&gt; , 위로 : &lt;a href=&quot;trouble#Trouble&quot;&gt;문제&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="38acacaff668c3e1b3da3519f97f08ee08bcfdf4" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;weak-pragmas#Weak-Pragmas&quot;&gt;Weak Pragmas&lt;/a&gt;, Previous: &lt;a href=&quot;symbol_002drenaming-pragmas#Symbol_002dRenaming-Pragmas&quot;&gt;Symbol-Renaming Pragmas&lt;/a&gt;, Up: &lt;a href=&quot;pragmas#Pragmas&quot;&gt;Pragmas&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;weak-pragmas#Weak-Pragmas&quot;&gt;약한 Pragmas&lt;/a&gt; , 이전 : &lt;a href=&quot;symbol_002drenaming-pragmas#Symbol_002dRenaming-Pragmas&quot;&gt;Symbol-Renaming Pragmas&lt;/a&gt; , Up : &lt;a href=&quot;pragmas#Pragmas&quot;&gt;Pragma&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="6f69b7ac749d9fe71599715ed84253b353c1f47c" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;x86-control_002dflow-protection-intrinsics#x86-control_002dflow-protection-intrinsics&quot;&gt;x86 control-flow protection intrinsics&lt;/a&gt;, Previous: &lt;a href=&quot;x86-built_002din-functions#x86-Built_002din-Functions&quot;&gt;x86 Built-in Functions&lt;/a&gt;, Up: &lt;a href=&quot;target-builtins#Target-Builtins&quot;&gt;Target Builtins&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;x86-control_002dflow-protection-intrinsics#x86-control_002dflow-protection-intrinsics&quot;&gt;x86 제어 흐름 보호 내장 함수&lt;/a&gt; , 이전 : &lt;a href=&quot;x86-built_002din-functions#x86-Built_002din-Functions&quot;&gt;x86 내장 함수&lt;/a&gt; , 위 : &lt;a href=&quot;target-builtins#Target-Builtins&quot;&gt;대상 내장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="3a1d3171807d4c729c92a961e0245b55b3241440" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;x86-specific-memory-model-extensions-for-transactional-memory#x86-specific-memory-model-extensions-for-transactional-memory&quot;&gt;x86 specific memory model extensions for transactional memory&lt;/a&gt;, Previous: &lt;a href=&quot;_005f_005fatomic-builtins#g_t_005f_005fatomic-Builtins&quot;&gt;__atomic Builtins&lt;/a&gt;, Up: &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;x86-specific-memory-model-extensions-for-transactional-memory#x86-specific-memory-model-extensions-for-transactional-memory&quot;&gt;트랜잭션 메모리에 대한 x86 특정 메모리 모델 확장&lt;/a&gt; , 이전 : &lt;a href=&quot;_005f_005fatomic-builtins#g_t_005f_005fatomic-Builtins&quot;&gt;__atomic Builtins&lt;/a&gt; , 위로 : &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C 확장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="ed44b49d07f621bc2b4922cf17e1a158775f0c53" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;x86-transactional-memory-intrinsics#x86-transactional-memory-intrinsics&quot;&gt;x86 transactional memory intrinsics&lt;/a&gt;, Previous: &lt;a href=&quot;tilepro-built_002din-functions#TILEPro-Built_002din-Functions&quot;&gt;TILEPro Built-in Functions&lt;/a&gt;, Up: &lt;a href=&quot;target-builtins#Target-Builtins&quot;&gt;Target Builtins&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;x86-transactional-memory-intrinsics#x86-transactional-memory-intrinsics&quot;&gt;x86 트랜잭션 메모리 내장 함수&lt;/a&gt; , 이전 : &lt;a href=&quot;tilepro-built_002din-functions#TILEPro-Built_002din-Functions&quot;&gt;TILEPro 내장 함수&lt;/a&gt; , 위 : &lt;a href=&quot;target-builtins#Target-Builtins&quot;&gt;대상 내장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="c66fe24d83c0f8da5974ee26549cb7dd5d883146" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;x86-windows-options#x86-Windows-Options&quot;&gt;x86 Windows Options&lt;/a&gt;, Previous: &lt;a href=&quot;vxworks-options#VxWorks-Options&quot;&gt;VxWorks Options&lt;/a&gt;, Up: &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;Submodel Options&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;x86-windows-options#x86-Windows-Options&quot;&gt;x86 Windows 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;vxworks-options#VxWorks-Options&quot;&gt;VxWorks 옵션&lt;/a&gt; , 위로 : &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;하위 모델 옵션&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="0e47a6829e23471082a94d04dea1733b6dbd60a3" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;xstormy16-function-attributes#Xstormy16-Function-Attributes&quot;&gt;Xstormy16 Function Attributes&lt;/a&gt;, Previous: &lt;a href=&quot;visium-function-attributes#Visium-Function-Attributes&quot;&gt;Visium Function Attributes&lt;/a&gt;, Up: &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;Function Attributes&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;xstormy16-function-attributes#Xstormy16-Function-Attributes&quot;&gt;Xstormy16 함수 속성&lt;/a&gt; , 이전 : &lt;a href=&quot;visium-function-attributes#Visium-Function-Attributes&quot;&gt;Visium 함수 속성&lt;/a&gt; , 위로 : &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;함수 속성&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="43c9b7dce60829ee27586784e391df985c2969ce" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;xstormy16-options#Xstormy16-Options&quot;&gt;Xstormy16 Options&lt;/a&gt;, Previous: &lt;a href=&quot;x86-options#x86-Options&quot;&gt;x86 Options&lt;/a&gt;, Up: &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;Submodel Options&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;xstormy16-options#Xstormy16-Options&quot;&gt;Xstormy16 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;x86-options#x86-Options&quot;&gt;86 옵션&lt;/a&gt; , 위 : &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;서브 모델 옵션&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;내용&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="91a19b0c7c0ca84ea4465ef4202cfe957645a09c" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;zero-length#Zero-Length&quot;&gt;Zero Length&lt;/a&gt;, Previous: &lt;a href=&quot;fixed_002dpoint#Fixed_002dPoint&quot;&gt;Fixed-Point&lt;/a&gt;, Up: &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;zero-length#Zero-Length&quot;&gt;길이 없음&lt;/a&gt; , 이전 : &lt;a href=&quot;fixed_002dpoint#Fixed_002dPoint&quot;&gt;고정 소수점&lt;/a&gt; , 위로 : &lt;a href=&quot;c-extensions#C-Extensions&quot;&gt;C 확장&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="08005c3f16f342a0f5fdcb83a51ce7fd0e929b9d" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;zseries-options#zSeries-Options&quot;&gt;zSeries Options&lt;/a&gt;, Previous: &lt;a href=&quot;xstormy16-options#Xstormy16-Options&quot;&gt;Xstormy16 Options&lt;/a&gt;, Up: &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;Submodel Options&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">다음 : &lt;a href=&quot;zseries-options#zSeries-Options&quot;&gt;zSeries 옵션&lt;/a&gt; , 이전 : &lt;a href=&quot;xstormy16-options#Xstormy16-Options&quot;&gt;Xstormy16 옵션&lt;/a&gt; , 위로 : 하위 모델 &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;옵션&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;목차&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;색인&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="63f2b1cfb6acd7e2dace8bea441c0fa9eee6ea55" translate="yes" xml:space="preserve">
          <source>Nios II family&amp;mdash;</source>
          <target state="translated">Nios II 가족 &amp;mdash;</target>
        </trans-unit>
        <trans-unit id="816c52fd2bdd94a63cd0944823a6c0aa9384c103" translate="yes" xml:space="preserve">
          <source>No</source>
          <target state="translated">No</target>
        </trans-unit>
        <trans-unit id="ceecc1795117fd76d538c306ee965ee5ad015f80" translate="yes" xml:space="preserve">
          <source>No dependence is costly.</source>
          <target state="translated">비용이 많이 들지 않습니다.</target>
        </trans-unit>
        <trans-unit id="157ef95a942c96188b2d48b48ae32045bbe6b17e" translate="yes" xml:space="preserve">
          <source>No extra limitations applied to GCC other than defined by the selected platform.</source>
          <target state="translated">선택한 플랫폼에서 정의한 것 외에는 GCC에 추가 제한이 적용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c02c5f79b945b6744c5a3404682acb514d86b032" translate="yes" xml:space="preserve">
          <source>No multiplier available.</source>
          <target state="translated">사용 가능한 승수가 없습니다.</target>
        </trans-unit>
        <trans-unit id="0710442267307c872bb723fca0a85170234fb4dc" translate="yes" xml:space="preserve">
          <source>No register (NO_REGS).</source>
          <target state="translated">레지스터가 없습니다 (NO_REGS).</target>
        </trans-unit>
        <trans-unit id="32472049b3e855f68b99ffa22a89f6a2827ede42" translate="yes" xml:space="preserve">
          <source>No size optimization. This level is deprecated and treated like &amp;lsquo;</source>
          <target state="translated">크기 최적화가 없습니다. 이 수준은 더 이상 사용되지 않으며 '</target>
        </trans-unit>
        <trans-unit id="4d700e8374c0df2ca78f9ce381622ece8dceaaee" translate="yes" xml:space="preserve">
          <source>No static initialization may refer to the address of a thread-local variable.</source>
          <target state="translated">정적 초기화는 스레드 로컬 변수의 주소를 참조 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="bbbd71b6d8e04d2ba2cf842c2f5760785fc0d0f3" translate="yes" xml:space="preserve">
          <source>Non-&lt;code&gt;static&lt;/code&gt; members shall not be &lt;code&gt;__thread&lt;/code&gt;.</source>
          <target state="translated">비 &lt;code&gt;static&lt;/code&gt; 회원을지지 않습니다 &lt;code&gt;__thread&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="65d55582633631df4d6bc0dece8be47d128cd391" translate="yes" xml:space="preserve">
          <source>Non-constant initializers.</source>
          <target state="translated">일정하지 않은 이니셜 라이저.</target>
        </trans-unit>
        <trans-unit id="58846921dc82faa6bef539cd8cf4750d830511a2" translate="yes" xml:space="preserve">
          <source>Non-empty initialization of zero-length arrays is treated like any case where there are more initializer elements than the array holds, in that a suitable warning about &amp;ldquo;excess elements in array&amp;rdquo; is given, and the excess elements (all of them, in this case) are ignored.</source>
          <target state="translated">길이가 0이 아닌 배열의 비어 있지 않은 초기화는 배열이 보유한 것보다 많은 초기화 요소가있는 경우처럼 처리됩니다. &quot;어레이의 초과 요소&quot;에 대한 적절한 경고가 표시되고 초과 요소 (모두에서 이 경우)는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="513c74f733c35cb364a70bed88ac8fec0ac445df" translate="yes" xml:space="preserve">
          <source>Non-register operands allowed in clr</source>
          <target state="translated">clr에 허용되는 비 등록 피연산자</target>
        </trans-unit>
        <trans-unit id="331e5c01a185a6374dc7b5d39eb314b02c4a6abd" translate="yes" xml:space="preserve">
          <source>Non-volatile memory for floating-point loads and stores</source>
          <target state="translated">부동 소수점로드 및 저장을위한 비 휘발성 메모리</target>
        </trans-unit>
        <trans-unit id="0f5c846a0ec1c900aca7b7cc2d566af2266fd09b" translate="yes" xml:space="preserve">
          <source>Nonlocal gotos.</source>
          <target state="translated">로컬이 아닌 고 토스.</target>
        </trans-unit>
        <trans-unit id="cb680a4a641e54bc86f5159ead6eba9ea8278566" translate="yes" xml:space="preserve">
          <source>Nonzero integer constant with low 16 bits zero.</source>
          <target state="translated">16 비트가 0 인 정수가 아닌 정수입니다.</target>
        </trans-unit>
        <trans-unit id="0ef498062f48f9b9c73f615c3db9b8a533351134" translate="yes" xml:space="preserve">
          <source>Normal IEEE rounding mode. Floating-point numbers are rounded towards the nearest machine number or towards the even machine number in case of a tie.</source>
          <target state="translated">일반적인 IEEE 반올림 모드. 부동 소수점 숫자는 가장 가까운 기계 번호 또는 짝수 기계의 번호로 반올림됩니다.</target>
        </trans-unit>
        <trans-unit id="e1f9ef87b3ce49415e2f612672369255dd38d9e1" translate="yes" xml:space="preserve">
          <source>Normalize the profile. The specified value is the max counter value in the new profile.</source>
          <target state="translated">프로파일을 정규화하십시오. 지정된 값은 새 프로필의 최대 카운터 값입니다.</target>
        </trans-unit>
        <trans-unit id="91794807aefa7446ef6ebcc7267daafd84b01dfb" translate="yes" xml:space="preserve">
          <source>Normally GCC examines a 32- or 64-bit integer constant to see if it can construct it from smaller constants in two or three instructions. If it cannot, it outputs the constant as a literal and generates code to load it from the data segment at run time.</source>
          <target state="translated">일반적으로 GCC는 32 비트 또는 64 비트 정수 상수를 검사하여 2 개 또는 3 개의 명령어로 더 작은 상수로 구성 할 수 있는지 확인합니다. 그렇지 않은 경우 상수를 리터럴로 출력하고 런타임시 데이터 세그먼트에서로드하는 코드를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="09000e99f43c4190b37108069c190b4d5496d221" translate="yes" xml:space="preserve">
          <source>Normally the &lt;code&gt;gcc&lt;/code&gt; program exits with the code of 1 if any phase of the compiler returns a non-success return code. If you specify</source>
          <target state="translated">컴파일러의 어떤 단계에서 성공하지 못한 리턴 코드를 리턴하면 일반적으로 &lt;code&gt;gcc&lt;/code&gt; 프로그램은 코드 1로 종료됩니다. 지정하면</target>
        </trans-unit>
        <trans-unit id="1b04d3a93ed10c9f53f1fd42077f176b945033ae" translate="yes" xml:space="preserve">
          <source>Normally this only warns about global allocation functions, but</source>
          <target state="translated">일반적으로 이것은 전역 할당 기능에 대해서만 경고하지만</target>
        </trans-unit>
        <trans-unit id="c7f4179d966dd1c9c4f0ca01d4cc9bff162659ed" translate="yes" xml:space="preserve">
          <source>Normally, GCC&amp;rsquo;s estimate is adequate to ensure that correct code is generated, but it is possible to confuse the compiler if you use pseudo instructions or assembler macros that expand into multiple real instructions, or if you use assembler directives that expand to more space in the object file than is needed for a single instruction. If this happens then the assembler may produce a diagnostic saying that a label is unreachable.</source>
          <target state="translated">일반적으로 GCC의 추정치는 올바른 코드가 생성되도록하는 데 충분하지만 의사 명령어 나 여러 실제 명령어로 확장되는 어셈블러 매크로를 사용하거나 더 많은 공간으로 확장되는 어셈블러 지시문을 사용하는 경우 컴파일러를 혼동 할 수 있습니다. 단일 명령에 필요한 것보다 객체 파일. 이 경우 어셈블러는 레이블에 도달 할 수 없다는 진단 메시지를 생성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1db33b32cde91317d797fba014f0621efb197fe5" translate="yes" xml:space="preserve">
          <source>Normally, the compiler places the code it generates in the &lt;code&gt;text&lt;/code&gt; section. Sometimes, however, you need additional sections, or you need certain particular functions to appear in special sections. The &lt;code&gt;section&lt;/code&gt; attribute specifies that a function lives in a particular section. For example, the declaration:</source>
          <target state="translated">일반적으로 컴파일러는 생성 한 코드를 &lt;code&gt;text&lt;/code&gt; 섹션에 배치합니다. 그러나 때때로 추가 섹션이 필요하거나 특수 섹션에 나타나려면 특정 기능이 필요합니다. &lt;code&gt;section&lt;/code&gt; 속성을 지정하는 기능은 특정 섹션에 살고있다. 예를 들어, 선언 :</target>
        </trans-unit>
        <trans-unit id="5824da0f29b8cb6b612946ba55e464aa0bcde3f7" translate="yes" xml:space="preserve">
          <source>Normally, the compiler places the objects it generates in sections like &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;bss&lt;/code&gt;. Sometimes, however, you need additional sections, or you need certain particular variables to appear in special sections, for example to map to special hardware. The &lt;code&gt;section&lt;/code&gt; attribute specifies that a variable (or function) lives in a particular section. For example, this small program uses several specific section names:</source>
          <target state="translated">일반적으로 컴파일러는 생성 한 객체를 &lt;code&gt;data&lt;/code&gt; 및 &lt;code&gt;bss&lt;/code&gt; 와 같은 섹션에 배치합니다 . 그러나 경우에 따라 추가 섹션이 필요하거나 특수 하드웨어에 매핑하는 등 특정 섹션에 특정 변수가 표시되어야합니다. &lt;code&gt;section&lt;/code&gt; 속성을 지정하는 변수 (또는 함수), 특정 부분에 살고있다. 예를 들어이 작은 프로그램은 몇 가지 특정 섹션 이름을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="dc3123fab58f5bd69dfa23076df0d5a5429506d4" translate="yes" xml:space="preserve">
          <source>Normally, the type is &lt;code&gt;unsigned int&lt;/code&gt; if there are no negative values in the enumeration, otherwise &lt;code&gt;int&lt;/code&gt;. If</source>
          <target state="translated">일반적으로 열거 형에 음수 값이 없으면 형식은 &lt;code&gt;unsigned int&lt;/code&gt; 이고, 그렇지 않으면 &lt;code&gt;int&lt;/code&gt; 입니다. 만약</target>
        </trans-unit>
        <trans-unit id="edb6a0bc2ab6accd4ba9577fa1a3f346dfb03f45" translate="yes" xml:space="preserve">
          <source>Normally, when producing DWARF output, GCC avoids producing debug symbol output for types that are nowhere used in the source file being compiled. Sometimes it is useful to have GCC emit debugging information for all types declared in a compilation unit, regardless of whether or not they are actually used in that compilation unit, for example if, in the debugger, you want to cast a value to a type that is not actually used in your program (but is declared). More often, however, this results in a significant amount of wasted space.</source>
          <target state="translated">일반적으로 DWARF 출력을 생성 할 때 GCC는 컴파일중인 소스 파일에서 사용되지 않는 유형에 대한 디버그 심볼 출력을 생성하지 않습니다. 디버거에서 값을 형식으로 캐스팅하려는 경우 GCC가 컴파일 단위에서 실제로 사용되는지 여부에 관계없이 컴파일 단위로 선언 된 모든 형식에 대해 디버깅 정보를 내보내는 것이 유용한 경우가 있습니다. 그것은 실제로 프로그램에서 사용되지는 않지만 선언됩니다. 그러나 이로 인해 공간이 많이 낭비됩니다.</target>
        </trans-unit>
        <trans-unit id="5fe1a379650dfb6a058133c8395daee08db199b7" translate="yes" xml:space="preserve">
          <source>Not all operations are supported by all target processors. If a particular operation cannot be implemented on the target processor, a warning is generated and a call to an external function is generated. The external function carries the same name as the built-in version, with an additional suffix &amp;lsquo;</source>
          <target state="translated">모든 대상 프로세서가 모든 작업을 지원하는 것은 아닙니다. 대상 프로세서에서 특정 작업을 구현할 수 없으면 경고가 생성되고 외부 기능에 대한 호출이 생성됩니다. 외부 함수는 내장 버전과 동일한 이름을 가지며 추가 접미사 '</target>
        </trans-unit>
        <trans-unit id="d026cb247ca315cfe306b3384bff25a6ab71a379" translate="yes" xml:space="preserve">
          <source>Not all optimizations are controlled directly by a flag. Only optimizations that have a flag are listed in this section.</source>
          <target state="translated">모든 최적화가 플래그에 의해 직접 제어되는 것은 아닙니다. 이 섹션에는 플래그가있는 최적화 만 나열됩니다.</target>
        </trans-unit>
        <trans-unit id="4b36b74e3d01cb6ac8b6660a39abf57632ad11d1" translate="yes" xml:space="preserve">
          <source>Not all targets support this attribute.</source>
          <target state="translated">모든 대상이이 속성을 지원하지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="c982177b7b1f84bc5866e2f9ad69f0b22eddba84" translate="yes" xml:space="preserve">
          <source>Not all targets support this option.</source>
          <target state="translated">모든 대상이이 옵션을 지원하지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="c64b53ba1418cb2bd6c8fd569bdf2b829b655684" translate="yes" xml:space="preserve">
          <source>Not enabled at any optimization level.</source>
          <target state="translated">어떤 최적화 수준에서도 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="8c4f421b6c939c15649549748e1cd845cafea2ef" translate="yes" xml:space="preserve">
          <source>Not every optimization option that starts with the &lt;var&gt;-f&lt;/var&gt; prefix specified by the attribute necessarily has an effect on the function. The &lt;code&gt;optimize&lt;/code&gt; attribute should be used for debugging purposes only. It is not suitable in production code.</source>
          <target state="translated">속성으로 지정된 &lt;var&gt;-f&lt;/var&gt; 접두어로 시작하는 모든 최적화 옵션이 반드시 함수에 영향을주는 것은 아닙니다. &lt;code&gt;optimize&lt;/code&gt; 속성은 디버깅 목적으로 만 사용되어야합니다. 프로덕션 코드에는 적합하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="59b6006c55ac58915f9ba77748a73f73ca27312e" translate="yes" xml:space="preserve">
          <source>Note - this option also affects the display of the &amp;lsquo;</source>
          <target state="translated">참고-이 옵션은 '</target>
        </trans-unit>
        <trans-unit id="7c33e384f6c3aac2c07cd9ab2a38a1445541cd5d" translate="yes" xml:space="preserve">
          <source>Note how &lt;code&gt;const&lt;/code&gt; interacts with pointers:</source>
          <target state="translated">&lt;code&gt;const&lt;/code&gt; 가 포인터와 어떻게 상호 작용 하는지 참고하십시오 .</target>
        </trans-unit>
        <trans-unit id="a5eb3f45c17cd77dd7e3b04c26624e63d2b8a23a" translate="yes" xml:space="preserve">
          <source>Note however that in some environments this assumption is not true. Use</source>
          <target state="translated">그러나 일부 환경에서는이 가정이 사실이 아닙니다. 사용하다</target>
        </trans-unit>
        <trans-unit id="da7038b6159ab37164aeb7442907c881108aff7e" translate="yes" xml:space="preserve">
          <source>Note that</source>
          <target state="translated">Note that</target>
        </trans-unit>
        <trans-unit id="4994df5cd6597fa1e9e41bfbcbbae1ddb5c7b130" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;-ftrack-macro-expansion=2&lt;/code&gt; is activated by default.</source>
          <target state="translated">참고 &lt;code&gt;-ftrack-macro-expansion=2&lt;/code&gt; 기본적으로 활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="595c0bdf6e8c826481f9948405295248b7bb5f00" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;__builtin_shuffle&lt;/code&gt; is intentionally semantically compatible with the OpenCL &lt;code&gt;shuffle&lt;/code&gt; and &lt;code&gt;shuffle2&lt;/code&gt; functions.</source>
          <target state="translated">참고 &lt;code&gt;__builtin_shuffle&lt;/code&gt; 가 의도적 인 OpenCL와 의미 호환 &lt;code&gt;shuffle&lt;/code&gt; 과 &lt;code&gt;shuffle2&lt;/code&gt; 기능을합니다.</target>
        </trans-unit>
        <trans-unit id="ad5991a8dda8324c599d0bb7c5ee4635a0157ca5" translate="yes" xml:space="preserve">
          <source>Note that Alpha implementations without floating-point operations are required to have floating-point registers.</source>
          <target state="translated">부동 소수점 연산이없는 알파 구현에는 부동 소수점 레지스터가 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="640a167c95e07b139282b9afdf159009b7f64f37" translate="yes" xml:space="preserve">
          <source>Note that CPU tuning options and attributes such as the</source>
          <target state="translated">CPU 튜닝 옵션 및</target>
        </trans-unit>
        <trans-unit id="25f2e969ab6d8225c88894ec2720d6d7ece1a596" translate="yes" xml:space="preserve">
          <source>Note that GCC can completely remove the bodies of functions that are not needed &amp;ndash; for instance if they are inlined everywhere. Such functions are marked with &amp;lsquo;</source>
          <target state="translated">GCC는 필요하지 않은 기능의 바디를 완전히 제거 할 수 있습니다 (예 : 어디에나 인라인 된 경우). 이러한 기능에는 '</target>
        </trans-unit>
        <trans-unit id="da0ae17a1bbc7cd3112418d4da47379cc5834047" translate="yes" xml:space="preserve">
          <source>Note that GCC does not otherwise attempt to emulate a pre-standard C compiler, and these options are only supported with the</source>
          <target state="translated">GCC는 사전 표준 C 컴파일러를 에뮬레이션하려고 시도하지 않으며 이러한 옵션은</target>
        </trans-unit>
        <trans-unit id="7d869795c81fdd0e125c5016e561ee2ed7cd4d11" translate="yes" xml:space="preserve">
          <source>Note that GCC implements &lt;code&gt;1.0f/sqrtf(&lt;var&gt;x&lt;/var&gt;)&lt;/code&gt; in terms of &lt;code&gt;RSQRTSS&lt;/code&gt; (or &lt;code&gt;RSQRTPS&lt;/code&gt;) already with</source>
          <target state="translated">GCC는 이미 &lt;code&gt;RSQRTSS&lt;/code&gt; (또는 &lt;code&gt;RSQRTPS&lt;/code&gt; ) 측면에서 &lt;code&gt;1.0f/sqrtf(&lt;var&gt;x&lt;/var&gt;)&lt;/code&gt; 를 구현합니다.</target>
        </trans-unit>
        <trans-unit id="97ef80e0bad3a975d80ca069c07a24ef824cf1d1" translate="yes" xml:space="preserve">
          <source>Note that GCC may optimize small variable-length arrays of a known value into plain arrays, so this warning may not get triggered for such arrays.</source>
          <target state="translated">GCC는 알려진 값의 작은 가변 길이 배열을 일반 배열로 최적화 할 수 있으므로 이러한 배열에 대해이 경고가 트리거되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9aef0cca3e5428200ebde1b7c29c435083c89279" translate="yes" xml:space="preserve">
          <source>Note that a function that has pointer arguments and examines the data pointed to must &lt;em&gt;not&lt;/em&gt; be declared &lt;code&gt;const&lt;/code&gt; if the pointed-to data might change between successive invocations of the function. In general, since a function cannot distinguish data that might change from data that cannot, const functions should never take pointer or, in C++, reference arguments. Likewise, a function that calls a non-const function usually must not be const itself.</source>
          <target state="translated">포인터 인수가 있고 지정된 데이터를 검사하는 함수 는 지정된 데이터가 함수의 연속 호출간에 변경 될 수있는 경우 &lt;code&gt;const&lt;/code&gt; 로 선언 되어서는 &lt;em&gt;안됩니다&lt;/em&gt; . 일반적으로 함수는 변경할 수없는 데이터와 변경 될 수있는 데이터를 구별 할 수 없으므로 const 함수는 포인터 또는 C ++에서 참조 인수를 가져서는 안됩니다. 마찬가지로, 비 const 함수를 호출하는 함수는 일반적으로 const 자체가 아니어야합니다.</target>
        </trans-unit>
        <trans-unit id="0cf9e176415f71f03538ab2b9c1c2b1cb00b5733" translate="yes" xml:space="preserve">
          <source>Note that although you can ask the compiler to select a time-efficient alignment for a given type and then declare only individual stand-alone objects of that type, the compiler&amp;rsquo;s ability to select a time-efficient alignment is primarily useful only when you plan to create arrays of variables having the relevant (efficiently aligned) type. If you declare or use arrays of variables of an efficiently-aligned type, then it is likely that your program also does pointer arithmetic (or subscripting, which amounts to the same thing) on pointers to the relevant type, and the code that the compiler generates for these pointer arithmetic operations is often more efficient for efficiently-aligned types than for other types.</source>
          <target state="translated">컴파일러에게 주어진 유형에 대해 시간 효율적인 정렬을 선택하고 해당 유형의 개별 독립형 객체 만 선언하도록 요청할 수 있지만 시간 효율적인 정렬을 선택하는 컴파일러의 기능은 주로 계획하려는 경우에만 유용합니다. 관련 (효율적으로 정렬 된) 유형의 변수 배열을 만듭니다. 효율적으로 정렬 된 유형의 변수 배열을 선언하거나 사용하는 경우 프로그램에서 관련 유형에 대한 포인터 및 컴파일러가 사용하는 코드에 대한 포인터 산술 (또는 첨자)도 수행 할 수 있습니다 이러한 포인터 산술 연산은 종종 다른 유형보다 효율적으로 정렬 된 유형에 더 효율적입니다.</target>
        </trans-unit>
        <trans-unit id="55d414a8beb57becc579e30b2e277824c58b4dd3" translate="yes" xml:space="preserve">
          <source>Note that an object of a type with this attribute does not have any special semantics.</source>
          <target state="translated">이 속성을 가진 유형의 객체에는 특별한 의미가 없습니다.</target>
        </trans-unit>
        <trans-unit id="2344a4468335dfd8b6538e904e711bd4e1564df2" translate="yes" xml:space="preserve">
          <source>Note that certain usages in a function definition can make it unsuitable for inline substitution. Among these usages are: variadic functions, use of &lt;code&gt;alloca&lt;/code&gt;, use of computed goto (see &lt;a href=&quot;labels-as-values#Labels-as-Values&quot;&gt;Labels as Values&lt;/a&gt;), use of nonlocal goto, use of nested functions, use of &lt;code&gt;setjmp&lt;/code&gt;, use of &lt;code&gt;__builtin_longjmp&lt;/code&gt; and use of &lt;code&gt;__builtin_return&lt;/code&gt; or &lt;code&gt;__builtin_apply_args&lt;/code&gt;. Using</source>
          <target state="translated">함수 정의의 특정 사용법은 인라인 대체에 적합하지 않을 수 있습니다. 이러한 사용법 중에는 가변성 함수, &lt;code&gt;alloca&lt;/code&gt; 사용, 계산 된 goto 사용 ( &lt;a href=&quot;labels-as-values#Labels-as-Values&quot;&gt;값으로 레이블&lt;/a&gt; 참조 ), 비 로컬 goto 사용, 중첩 함수 사용, &lt;code&gt;setjmp&lt;/code&gt; 사용, &lt;code&gt;__builtin_longjmp&lt;/code&gt; 및 &lt;code&gt;__builtin_return&lt;/code&gt; 또는 &lt;code&gt;__builtin_apply_args&lt;/code&gt; 사용이 있습니다. 사용</target>
        </trans-unit>
        <trans-unit id="60d00b41fd03c104679a0b60c270b62cfb9c8387" translate="yes" xml:space="preserve">
          <source>Note that extended &lt;code&gt;asm&lt;/code&gt; statements must be inside a function. Only basic &lt;code&gt;asm&lt;/code&gt; may be outside functions (see &lt;a href=&quot;basic-asm#Basic-Asm&quot;&gt;Basic Asm&lt;/a&gt;). Functions declared with the &lt;code&gt;naked&lt;/code&gt; attribute also require basic &lt;code&gt;asm&lt;/code&gt; (see &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;Function Attributes&lt;/a&gt;).</source>
          <target state="translated">확장 된 &lt;code&gt;asm&lt;/code&gt; 문은 함수 안에 있어야합니다. 기본 &lt;code&gt;asm&lt;/code&gt; 만 외부 함수일 수 있습니다 ( &lt;a href=&quot;basic-asm#Basic-Asm&quot;&gt;Basic Asm&lt;/a&gt; 참조 ). &lt;code&gt;naked&lt;/code&gt; 속성으로 선언 된 함수 에는 기본 &lt;code&gt;asm&lt;/code&gt; 이 필요합니다 ( &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;Function Attributes&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="04ca57f8c468e9039e8d6b29f48ad839e2d54e26" translate="yes" xml:space="preserve">
          <source>Note that for the merging operation, this profile generated offline may contain slight different values from the online merged profile. Here are a list of typical differences:</source>
          <target state="translated">병합 작업의 경우 오프라인으로 생성 된이 프로필에는 온라인 병합 프로필과 약간 다른 값이 포함될 수 있습니다. 일반적인 차이점 목록은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8aa5dd8380fed462aee794f99c7469bafebb8707" translate="yes" xml:space="preserve">
          <source>Note that in an output operand which can be matched by another operand, the constraint letter &amp;lsquo;</source>
          <target state="translated">다른 피연산자와 일치 할 수있는 출력 피연산자에서 제한 문자 '</target>
        </trans-unit>
        <trans-unit id="78f4323dd876ee822f914a288a135c401055b1df" translate="yes" xml:space="preserve">
          <source>Note that in the C++11 memory model, &lt;em&gt;fences&lt;/em&gt; (e.g., &amp;lsquo;</source>
          <target state="translated">C ++ 11 메모리 모델에서 &lt;em&gt;펜스&lt;/em&gt; (예 : '</target>
        </trans-unit>
        <trans-unit id="f767e2d2b4e961e72b9dc83247251174ea5a397c" translate="yes" xml:space="preserve">
          <source>Note that interrupts are enabled inside the function unless the &lt;code&gt;disinterrupt&lt;/code&gt; attribute is also specified.</source>
          <target state="translated">하지 않는 인터럽트 함수 내에서 사용 가능합니다 &lt;code&gt;disinterrupt&lt;/code&gt; 속성도 지정됩니다.</target>
        </trans-unit>
        <trans-unit id="aed181f4b69dc735522aee4ebee8fbf513413da4" translate="yes" xml:space="preserve">
          <source>Note that introducing variable declarations (as we do in &lt;code&gt;maxint&lt;/code&gt;) can cause variable shadowing, so while this example using the &lt;code&gt;max&lt;/code&gt; macro produces correct results:</source>
          <target state="translated">&lt;code&gt;maxint&lt;/code&gt; 에서와 같이 변수 선언을 도입 하면 변수 섀도 잉이 발생할 수 있으므로 &lt;code&gt;max&lt;/code&gt; 매크로 를 사용하는이 예제 는 올바른 결과를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="036dc1c0073fb9a7c10d0e8372e1d1167ea6fbab" translate="yes" xml:space="preserve">
          <source>Note that keyword-and-predefine mode is enabled by disabling GNU extensions (e.g., by using &lt;code&gt;-std=c11&lt;/code&gt;) and including &lt;code&gt;&amp;lt;altivec.h&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">키워드 및 사전 정의 모드는 GNU 확장을 비활성화하고 (예 : &lt;code&gt;-std=c11&lt;/code&gt; 사용 ) &lt;code&gt;&amp;lt;altivec.h&amp;gt;&lt;/code&gt; 를 포함하여 활성화 됩니다.</target>
        </trans-unit>
        <trans-unit id="638d84afe30c269ccff7e3fa717c076aa5b26edf" translate="yes" xml:space="preserve">
          <source>Note that leaf functions might indirectly run a signal handler defined in the current compilation unit that uses static variables. Similarly, when lazy symbol resolution is in effect, leaf functions might invoke indirect functions whose resolver function or implementation function is defined in the current compilation unit and uses static variables. There is no standard-compliant way to write such a signal handler, resolver function, or implementation function, and the best that you can do is to remove the &lt;code&gt;leaf&lt;/code&gt; attribute or mark all such static variables &lt;code&gt;volatile&lt;/code&gt;. Lastly, for ELF-based systems that support symbol interposition, care should be taken that functions defined in the current compilation unit do not unexpectedly interpose other symbols based on the defined standards mode and defined feature test macros; otherwise an inadvertent callback would be added.</source>
          <target state="translated">리프 함수는 정적 변수를 사용하는 현재 컴파일 단위에 정의 된 신호 핸들러를 간접적으로 실행할 수 있습니다. 유사하게, 지연 심볼 분석이 유효 할 때, 리프 함수는 리졸버 함수 또는 구현 함수가 현재 컴파일 단위에 정의되고 정적 변수를 사용하는 간접 함수를 호출 할 수 있습니다. 이러한 신호 처리기, 리졸버 함수 또는 구현 함수를 작성하는 표준 호환 방법은 없으며 &lt;code&gt;leaf&lt;/code&gt; 속성 을 제거 하거나 모든 정적 변수를 &lt;code&gt;volatile&lt;/code&gt; 표시 하는 것이 가장 좋습니다. 마지막으로 심볼 배치를 지원하는 ELF 기반 시스템의 경우 현재 컴파일 단위에 정의 된 기능이 정의 된 표준 모드 및 정의 된 기능 테스트 매크로를 기반으로 다른 심볼을 예기치 않게 배치하지 않도록주의해야합니다. 그렇지 않으면 부주의 한 콜백이 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="22771a0417619fdc36605ab57ab7c10176e42b15" translate="yes" xml:space="preserve">
          <source>Note that line 7 is shown in the report multiple times. First occurrence presents total number of execution of the line and the next two belong to instances of class Foo constructors. As you can also see, line 30 contains some unexecuted basic blocks and thus execution count has asterisk symbol.</source>
          <target state="translated">7 행은 보고서에 여러 번 표시됩니다. 첫 번째는 행의 총 실행 수를 나타내고 다음 두 개는 Foo 클래스 생성자의 인스턴스에 속합니다. 보시다시피 30 행에는 실행되지 않은 기본 블록이 포함되어 있으므로 실행 횟수에는 별표 기호가 있습니다.</target>
        </trans-unit>
        <trans-unit id="3bb9b100f8ff1703fcefab531aacd6d4ae0e7027" translate="yes" xml:space="preserve">
          <source>Note that line numbers and column numbers number from 1. In the current implementation, &lt;var&gt;start_line&lt;/var&gt; and &lt;var&gt;start_column&lt;/var&gt; do not include any template parameters and the leading return type but that this is likely to be fixed in the future.</source>
          <target state="translated">행 번호와 열 번호는 1부터 시작합니다. 현재 구현에서 &lt;var&gt;start_line&lt;/var&gt; 및 &lt;var&gt;start_column&lt;/var&gt; 에는 템플릿 매개 변수와 선행 반환 유형이 포함되지 않지만 향후 수정 될 가능성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="ef68439ef3a02a1358e43b7eee74f40510f39166" translate="yes" xml:space="preserve">
          <source>Note that modern binutils provide plugin auto-load mechanism. Installing the linker plugin into</source>
          <target state="translated">최신 binutils는 플러그인 자동로드 메커니즘을 제공합니다. 에 링커 플러그인 설치</target>
        </trans-unit>
        <trans-unit id="afd97262c10b1b6225415eddf3432615366c31bc" translate="yes" xml:space="preserve">
          <source>Note that old-style stack checking is also the fallback method for &amp;lsquo;</source>
          <target state="translated">구식 스택 검사는 '</target>
        </trans-unit>
        <trans-unit id="e59c63dceca3c7afd147f667e7adcc1b1c4ff2d0" translate="yes" xml:space="preserve">
          <source>Note that only (pointers to) Objective-C objects may be thrown and caught using this scheme. When an object is thrown, it will be caught by the nearest &lt;code&gt;@catch&lt;/code&gt; clause capable of handling objects of that type, analogously to how &lt;code&gt;catch&lt;/code&gt; blocks work in C++ and Java. A &lt;code&gt;@catch(id &amp;hellip;)&lt;/code&gt; clause (as shown above) may also be provided to catch any and all Objective-C exceptions not caught by previous &lt;code&gt;@catch&lt;/code&gt; clauses (if any).</source>
          <target state="translated">이 체계를 사용하여 Objective-C 객체 만 (포인터를) 가리킬 수 있습니다. 객체가 발생하면 C ++ 및 Java에서 &lt;code&gt;catch&lt;/code&gt; 블록이 작동 하는 방식과 유사하게 해당 유형의 객체를 처리 할 수있는 가장 가까운 &lt;code&gt;@catch&lt;/code&gt; 절에 의해 잡 힙니다 . &lt;code&gt;@catch(id &amp;hellip;)&lt;/code&gt; 절 (위 그림 참조) 또한 이전에 의해 체포되지 않은 모든 목표 - C 예외 잡기 위해 제공 될 수있다 &lt;code&gt;@catch&lt;/code&gt; 의 (있는 경우) 절을.</target>
        </trans-unit>
        <trans-unit id="2edf0a230759903e0a14d3e4ee6df58367d0f232" translate="yes" xml:space="preserve">
          <source>Note that options of the pragma, unlike options of the target attribute, do change the value of preprocessor macros like &lt;code&gt;__VEC__&lt;/code&gt;. They can be specified as below:</source>
          <target state="translated">대상 속성의 옵션과 달리 pragma의 옵션은 &lt;code&gt;__VEC__&lt;/code&gt; 과 같은 전 처리기 매크로의 값을 변경합니다 . 다음과 같이 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="59d0d7b3b55800bfe6c074fc78f6433158ea1dab" translate="yes" xml:space="preserve">
          <source>Note that sanitized atomic builtins cannot throw exceptions when operating on invalid memory addresses with non-call exceptions (</source>
          <target state="translated">호출되지 않은 예외가있는 유효하지 않은 메모리 주소에서 작동 할 때 살균 된 원자 내장은 예외를 처리 할 수 ​​없습니다 (</target>
        </trans-unit>
        <trans-unit id="71de7403ea4e3472b8b04dc8ed82a895a7128f46" translate="yes" xml:space="preserve">
          <source>Note that since Objective-C is an extension of the C language, Objective-C compilations may also use options specific to the C front-end (e.g.,</source>
          <target state="translated">Objective-C는 C 언어의 확장이므로 Objective-C 컴파일은 C 프런트 엔드에 특정한 옵션 (예 :</target>
        </trans-unit>
        <trans-unit id="6a54b50aca6cca66a5c245d09682074721af128d" translate="yes" xml:space="preserve">
          <source>Note that some compilers (including G++ versions prior to 3.4) get these examples wrong and accept above code without an error. Those compilers do not implement two-stage name lookup correctly.</source>
          <target state="translated">일부 컴파일러 (3.4 이전의 G ++ 버전 포함)는 이러한 예제를 잘못 표시하고 오류없이 위의 코드를 승인합니다. 이러한 컴파일러는 2 단계 이름 조회를 올바르게 구현하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9c1c1e3bf6005c19b1a3eabef2566e932318422c" translate="yes" xml:space="preserve">
          <source>Note that some linkers can create multiple GOTs. If you have such a linker, you should only need to use</source>
          <target state="translated">일부 링커는 여러 GOT를 만들 수 있습니다. 이러한 링커가있는 경우에만 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="252d5382a8f2a70cc099c108e5ca06768e143011" translate="yes" xml:space="preserve">
          <source>Note that some linkers, including newer versions of the GNU linker, can create multiple GOTs and sort GOT entries. If you have such a linker, you should only need to use</source>
          <target state="translated">최신 버전의 GNU 링커를 포함하여 일부 링커는 여러 GOT를 생성하고 GOT 항목을 정렬 할 수 있습니다. 이러한 링커가있는 경우에만 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="a97ef8d01741699f2b34571c08ff46e524640c86" translate="yes" xml:space="preserve">
          <source>Note that some warning flags are not implied by</source>
          <target state="translated">일부 경고 플래그는 다음을 의미하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8375cd3557c65449394485f1027bde4d9e01b948" translate="yes" xml:space="preserve">
          <source>Note that specifying</source>
          <target state="translated">다음을 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="9a510476f96794d38ce6034a0461f9fd8b7391c4" translate="yes" xml:space="preserve">
          <source>Note that support for &amp;lsquo;</source>
          <target state="translated">'에 대한 지원</target>
        </trans-unit>
        <trans-unit id="e36a773ef709e536a82e2d886a7cd51f572df233" translate="yes" xml:space="preserve">
          <source>Note that the &amp;lsquo;</source>
          <target state="translated">'</target>
        </trans-unit>
        <trans-unit id="e20bd91e7e018647b6025ebffdf86f4912b8b811" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;_MIPS_ARCH&lt;/code&gt; macro uses the processor names given above. In other words, it has the full prefix and does not abbreviate &amp;lsquo;</source>
          <target state="translated">참고 것을 &lt;code&gt;_MIPS_ARCH&lt;/code&gt; 의 매크로 상기 주어진 프로세서 이름을 사용한다. 즉, 전체 접두사를 가지며 '</target>
        </trans-unit>
        <trans-unit id="0b1b353b3eb6b2c22fefb66a233451593afe4a77" translate="yes" xml:space="preserve">
          <source>Note that the C++11 standard allows for the memory order parameter to be determined at run time rather than at compile time. These built-in functions map any run-time value to &lt;code&gt;__ATOMIC_SEQ_CST&lt;/code&gt; rather than invoke a runtime library call or inline a switch statement. This is standard compliant, safe, and the simplest approach for now.</source>
          <target state="translated">C ++ 11 표준에서는 메모리 순서 매개 변수를 컴파일 타임이 아닌 런타임에 판별 할 수 있습니다. 이러한 내장 함수 는 런타임 라이브러리 호출을 호출하거나 switch 문을 인라인하지 않고 런타임 값을 &lt;code&gt;__ATOMIC_SEQ_CST&lt;/code&gt; 에 맵핑 합니다. 이것은 현재 표준을 준수하고 안전하며 가장 간단한 방법입니다.</target>
        </trans-unit>
        <trans-unit id="c324fb7fae333f4826013cf889aa730c54f78667" translate="yes" xml:space="preserve">
          <source>Note that the EABI has a 32-bit and a 64-bit variant. GCC normally generates 64-bit code when you select a 64-bit architecture, but you can use</source>
          <target state="translated">EABI에는 32 비트 및 64 비트 변형이 있습니다. GCC는 일반적으로 64 비트 아키텍처를 선택할 때 64 비트 코드를 생성하지만</target>
        </trans-unit>
        <trans-unit id="00d4337be2fb056582e50da4242861bcb5fe544e" translate="yes" xml:space="preserve">
          <source>Note that the GNU Objective-C runtime currently provides no support for method forwarding or method invocations other than the &lt;code&gt;__objc_msg_forward2&lt;/code&gt; hook.</source>
          <target state="translated">GNU Objective-C 런타임은 현재 &lt;code&gt;__objc_msg_forward2&lt;/code&gt; 후크 이외의 메소드 전달 또는 메소드 호출을 지원하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="7c89566a6cdaee2ed6b4a61f8eeecb6b2a9057c2" translate="yes" xml:space="preserve">
          <source>Note that the alignment of any given &lt;code&gt;struct&lt;/code&gt; or &lt;code&gt;union&lt;/code&gt; type is required by the ISO C standard to be at least a perfect multiple of the lowest common multiple of the alignments of all of the members of the &lt;code&gt;struct&lt;/code&gt; or &lt;code&gt;union&lt;/code&gt; in question. This means that you &lt;em&gt;can&lt;/em&gt; effectively adjust the alignment of a &lt;code&gt;struct&lt;/code&gt; or &lt;code&gt;union&lt;/code&gt; type by attaching an &lt;code&gt;aligned&lt;/code&gt; attribute to any one of the members of such a type, but the notation illustrated in the example above is a more obvious, intuitive, and readable way to request the compiler to adjust the alignment of an entire &lt;code&gt;struct&lt;/code&gt; or &lt;code&gt;union&lt;/code&gt; type.</source>
          <target state="translated">주어진 &lt;code&gt;struct&lt;/code&gt; 또는 &lt;code&gt;union&lt;/code&gt; 유형 의 정렬은 ISO C 표준에 따라 해당 &lt;code&gt;struct&lt;/code&gt; 또는 &lt;code&gt;union&lt;/code&gt; 의 모든 멤버의 최소 공배수의 최소 배수의 완벽한 배수 여야 합니다. 즉, 이러한 유형 의 멤버 중 하나에 &lt;code&gt;aligned&lt;/code&gt; 속성을 첨부하여 &lt;code&gt;struct&lt;/code&gt; 또는 &lt;code&gt;union&lt;/code&gt; 유형 의 정렬을 효과적으로 조정할 &lt;em&gt;수&lt;/em&gt; 있지만 위의 예에 표시된 표기법은보다 명확하고 직관적이며 읽기 쉬운 방법입니다. 컴파일러에게 전체 &lt;code&gt;struct&lt;/code&gt; 또는 &lt;code&gt;union&lt;/code&gt; 유형 의 정렬을 조정하도록 요청하십시오 .</target>
        </trans-unit>
        <trans-unit id="a68c819e8486f564e0c37c632369951750b7868d" translate="yes" xml:space="preserve">
          <source>Note that the code above is invalid in C++11.</source>
          <target state="translated">위 코드는 C ++ 11에서는 유효하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="740b3e245965006e56a04c100d6444966ec687f1" translate="yes" xml:space="preserve">
          <source>Note that the compiler can move even &lt;code&gt;volatile asm&lt;/code&gt; instructions relative to other code, including across jump instructions. For example, on many targets there is a system register that controls the rounding mode of floating-point operations. Setting it with a &lt;code&gt;volatile asm&lt;/code&gt; statement, as in the following PowerPC example, does not work reliably.</source>
          <target state="translated">컴파일러는 점프 명령을 포함하여 다른 코드에 비해 &lt;code&gt;volatile asm&lt;/code&gt; 명령 도 이동할 수 있습니다 . 예를 들어, 많은 대상에 부동 소수점 연산의 반올림 모드를 제어하는 ​​시스템 레지스터가 있습니다. 다음 PowerPC 예 와 같이 &lt;code&gt;volatile asm&lt;/code&gt; 문으로 설정하면 안정적으로 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6b1fccbb379bc04f4205632ff6197d3836f30817" translate="yes" xml:space="preserve">
          <source>Note that the effectiveness of &lt;code&gt;aligned&lt;/code&gt; attributes for static variables may be limited by inherent limitations in the system linker and/or object file format. On some systems, the linker is only able to arrange for variables to be aligned up to a certain maximum alignment. (For some linkers, the maximum supported alignment may be very very small.) If your linker is only able to align variables up to a maximum of 8-byte alignment, then specifying &lt;code&gt;aligned(16)&lt;/code&gt; in an &lt;code&gt;__attribute__&lt;/code&gt; still only provides you with 8-byte alignment. See your linker documentation for further information.</source>
          <target state="translated">정적 변수에 대한 &lt;code&gt;aligned&lt;/code&gt; 속성 의 효과 는 시스템 링커 및 / 또는 객체 파일 형식의 고유 제한으로 인해 제한 될 수 있습니다. 일부 시스템에서는 링커가 변수를 특정 최대 정렬까지 정렬 할 수만 있습니다. (일부 링커의 경우 지원되는 최대 정렬이 매우 작을 수 있습니다.) 링커가 변수를 최대 8 바이트 정렬까지만 정렬 할 수 있는 경우 &lt;code&gt;__attribute__&lt;/code&gt; 에 &lt;code&gt;aligned(16)&lt;/code&gt; 을 지정 하면 여전히 8 만 제공합니다. 바이트 정렬. 자세한 내용은 링커 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="52269615745c572f0c87a076245c32351a12c46f" translate="yes" xml:space="preserve">
          <source>Note that the effectiveness of &lt;code&gt;aligned&lt;/code&gt; attributes may be limited by inherent limitations in the system linker and/or object file format. On some systems, the linker is only able to arrange for functions to be aligned up to a certain maximum alignment. (For some linkers, the maximum supported alignment may be very very small.) See your linker documentation for further information.</source>
          <target state="translated">&lt;code&gt;aligned&lt;/code&gt; 속성 의 효과 는 시스템 링커 및 / 또는 객체 파일 형식의 고유 제한으로 인해 제한 될 수 있습니다. 일부 시스템에서 링커는 기능을 특정 최대 정렬까지 정렬 할 수만 있습니다. (일부 링커의 경우 지원되는 최대 정렬이 매우 작을 수 있습니다.) 자세한 내용은 링커 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="d2ba60ecb7665847cb4c42800dcadf1918ca6ade" translate="yes" xml:space="preserve">
          <source>Note that the effectiveness of &lt;code&gt;aligned&lt;/code&gt; attributes may be limited by inherent limitations in your linker. On many systems, the linker is only able to arrange for variables to be aligned up to a certain maximum alignment. (For some linkers, the maximum supported alignment may be very very small.) If your linker is only able to align variables up to a maximum of 8-byte alignment, then specifying &lt;code&gt;aligned (16)&lt;/code&gt; in an &lt;code&gt;__attribute__&lt;/code&gt; still only provides you with 8-byte alignment. See your linker documentation for further information.</source>
          <target state="translated">&lt;code&gt;aligned&lt;/code&gt; 속성 의 효과는 링커의 고유 제한으로 인해 제한 될 수 있습니다. 많은 시스템에서 링커는 변수를 특정 최대 정렬까지 정렬 할 수만 있습니다. (일부 링커의 경우 지원되는 최대 정렬이 매우 작을 수 있습니다.) 링커가 변수를 최대 8 바이트 정렬까지만 정렬 할 수 있는 경우 &lt;code&gt;__attribute__&lt;/code&gt; 에서 &lt;code&gt;aligned (16)&lt;/code&gt; 을 지정 하면 여전히 8 만 제공합니다. 바이트 정렬. 자세한 내용은 링커 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="2c7ab8ccdc305b6566238ec03be8ccb0047ffa81" translate="yes" xml:space="preserve">
          <source>Note that the length of the array is the highest value specified plus one.</source>
          <target state="translated">배열의 길이는 지정된 최대 값에 1을 더한 값입니다.</target>
        </trans-unit>
        <trans-unit id="caa5dd4685d6b7d13f378318f887534e91a6523c" translate="yes" xml:space="preserve">
          <source>Note that the multiply-accumulate instructions can be disabled using the command-line option &lt;code&gt;-mno-fused-madd&lt;/code&gt;.</source>
          <target state="translated">명령 행 옵션 &lt;code&gt;-mno-fused-madd&lt;/code&gt; 를 사용하여 곱하기 누산 명령어를 비활성화 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7a820a99c6279fcd5e924f795802a2542efc0908" translate="yes" xml:space="preserve">
          <source>Note that the option</source>
          <target state="translated">옵션은</target>
        </trans-unit>
        <trans-unit id="b0feec14351d01c59b359daaa88237f8658bdd08" translate="yes" xml:space="preserve">
          <source>Note that the output &lt;var&gt;filename&lt;/var&gt; is overwritten in case of multiple translation units. If a combined output from multiple translation units is desired,</source>
          <target state="translated">번역 단위가 여러 개인 경우 출력 &lt;var&gt;filename&lt;/var&gt; 을 덮어 씁니다. 여러 번역 단위의 결합 된 출력이 필요한 경우,</target>
        </trans-unit>
        <trans-unit id="200d34f710232266dc15e671646a71f297d28fb4" translate="yes" xml:space="preserve">
          <source>Note that the particular values of &lt;var&gt;priority&lt;/var&gt; do not matter; only their relative ordering.</source>
          <target state="translated">&lt;var&gt;priority&lt;/var&gt; 의 특정 값은 중요 하지 않습니다. 상대 순서 만.</target>
        </trans-unit>
        <trans-unit id="a7d52064d55054b7b696c519178faacee02e3363" translate="yes" xml:space="preserve">
          <source>Note that the semantics of the above HTM builtins are required to mimic the locking semantics used for critical sections. Builtins that are used to create a new transaction or restart a suspended transaction must have lock acquisition like semantics while those builtins that end or suspend a transaction must have lock release like semantics. Specifically, this must mimic lock semantics as specified by C++11, for example: Lock acquisition is as-if an execution of __atomic_exchange_n(&amp;amp;globallock,1,__ATOMIC_ACQUIRE) that returns 0, and lock release is as-if an execution of __atomic_store(&amp;amp;globallock,0,__ATOMIC_RELEASE), with globallock being an implicit implementation-defined lock used for all transactions. The HTM instructions associated with with the builtins inherently provide the correct acquisition and release hardware barriers required. However, the compiler must also be prohibited from moving loads and stores across the builtins in a way that would violate their semantics. This has been accomplished by adding memory barriers to the associated HTM instructions (which is a conservative approach to provide acquire and release semantics). Earlier versions of the compiler did not treat the HTM instructions as memory barriers. A &lt;code&gt;__TM_FENCE__&lt;/code&gt; macro has been added, which can be used to determine whether the current compiler treats HTM instructions as memory barriers or not. This allows the user to explicitly add memory barriers to their code when using an older version of the compiler.</source>
          <target state="translated">위의 HTM 내장의 의미는 중요한 섹션에 사용되는 잠금 의미를 모방하는 데 필요합니다. 새 트랜잭션을 작성하거나 일시 중단 된 트랜잭션을 다시 시작하는 데 사용되는 내장은 의미와 같은 잠금 획득을 가져야하고, 트랜잭션을 종료하거나 일시 중단하는 내장은 의미와 같은 잠금 해제를 가져야합니다. 특히, 이것은 C ++ 11에 지정된 잠금 의미를 모방해야합니다. 예를 들면 다음과 같습니다. 잠금 획득은 0을 리턴하는 __atomic_exchange_n (&amp;amp; globallock, 1, __ ATOMIC_ACQUIRE)의 실행과 동일하고 잠금 해제는 __atomic_store의 실행과 동일 (&amp;amp; globallock, 0, __ ATOMIC_RELEASE). globallock은 모든 트랜잭션에 사용되는 암시 적 구현 정의 잠금입니다. 내장과 관련된 HTM 명령은 본질적으로 필요한 올바른 수집 및 릴리스 하드웨어 장벽을 제공합니다.그러나 컴파일러는 의미를 위반하는 방식으로 내장 및로드를 저장 및로드하지 못하도록 금지해야합니다. 이것은 관련된 HTM 명령어에 메모리 장벽을 추가함으로써 달성되었습니다 (이는 의미 획득 및 해제 시맨틱을 제공하기위한 보수적 인 접근 방식 임). 이전 버전의 컴파일러는 HTM 명령어를 메모리 장벽으로 취급하지 않았습니다. ㅏ &lt;code&gt;__TM_FENCE__&lt;/code&gt; 매크로가 추가되어 현재 컴파일러가 HTM 명령어를 메모리 장벽으로 처리하는지 여부를 결정하는 데 사용할 수 있습니다. 이를 통해 사용자는 이전 버전의 컴파일러를 사용할 때 코드에 메모리 장벽을 명시 적으로 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9d13aa9653e85dc0aa4290fe6ea98d4340842a52" translate="yes" xml:space="preserve">
          <source>Note that the transactional memory feature is not supported with non-call exceptions (</source>
          <target state="translated">비 호출 예외에서는 트랜잭션 메모리 기능이 지원되지 않습니다 (</target>
        </trans-unit>
        <trans-unit id="ba98743dbc04514a390ac00337a92d06b13b73e0" translate="yes" xml:space="preserve">
          <source>Note that the type visibility is applied to vague linkage entities associated with the class (vtable, typeinfo node, etc.). In particular, if a class is thrown as an exception in one shared object and caught in another, the class must have default visibility. Otherwise the two shared objects are unable to use the same typeinfo node and exception handling will break.</source>
          <target state="translated">유형 가시성은 클래스와 연관된 모호한 연결 엔티티 (vtable, typeinfo 노드 등)에 적용됩니다. 특히 클래스가 한 공유 객체에서 예외로 발생하고 다른 공유 객체에서 잡히면 클래스에 기본 가시성이 있어야합니다. 그렇지 않으면 두 공유 객체가 동일한 typeinfo 노드를 사용할 수 없으며 예외 처리가 중단됩니다.</target>
        </trans-unit>
        <trans-unit id="5653c5268bec31a5a9c36ca0e82b71dcc88178b5" translate="yes" xml:space="preserve">
          <source>Note that the value of &lt;code&gt;__attribute__ ((patchable_function_entry
(N,M)))&lt;/code&gt; takes precedence over command-line option</source>
          <target state="translated">음의 값 것을 &lt;code&gt;__attribute__ ((patchable_function_entry (N,M)))&lt;/code&gt; 명령 행 옵션보다 우선</target>
        </trans-unit>
        <trans-unit id="9017445945ab17e7d578c311fdcefe2c89ff211d" translate="yes" xml:space="preserve">
          <source>Note that there may be no warning about a variable that is used only to compute a value that itself is never used, because such computations may be deleted by data flow analysis before the warnings are printed.</source>
          <target state="translated">자체적으로 사용되지 않은 값을 계산하는 데만 사용되는 변수에 대해서는 경고가 표시되지 않을 수 있습니다. 이러한 계산은 경고가 인쇄되기 전에 데이터 흐름 분석에 의해 삭제 될 수 있기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="662f126aa8b10344234faddbcc1926cf9a8a6964" translate="yes" xml:space="preserve">
          <source>Note that these points &lt;em&gt;only&lt;/em&gt; apply to code that is compiled with the definition. The behavior of code that is merely linked in (for example code from libraries) is not affected.</source>
          <target state="translated">이 요점 은 정의로 컴파일 된 코드 &lt;em&gt;에만&lt;/em&gt; 적용됩니다. 단순히 링크 된 코드의 동작 (예 : 라이브러리의 코드)에는 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="fda4c9fb10051ce07a5e7da3a73fe11cd1092bec" translate="yes" xml:space="preserve">
          <source>Note that these pragmas override any command-line options. GCC keeps track of the location of each pragma, and issues diagnostics according to the state as of that point in the source file. Thus, pragmas occurring after a line do not affect diagnostics caused by that line.</source>
          <target state="translated">이 pragma는 모든 명령 줄 옵션보다 우선합니다. GCC는 각 pragma의 위치를 ​​추적하고 소스 파일에서 해당 시점의 상태에 따라 진단을 발행합니다. 따라서 라인 이후에 발생하는 pragma는 해당 라인으로 인한 진단에 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="034b15a9268c7658f26f0ac2c14ff10b84b34ad9" translate="yes" xml:space="preserve">
          <source>Note that this clobber does not prevent the &lt;em&gt;processor&lt;/em&gt; from doing speculative reads past the &lt;code&gt;asm&lt;/code&gt; statement. To prevent that, you need processor-specific fence instructions.</source>
          <target state="translated">이 클로버는 &lt;em&gt;프로세서&lt;/em&gt; 가 &lt;code&gt;asm&lt;/code&gt; 문을 지나서 추론 적 읽기를 수행하는 것을 막지 않습니다 . 이를 방지하려면 프로세서 별 차단 명령어가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="85b2ff49c40abac9ce4c3214a9f4e5da131d40f5" translate="yes" xml:space="preserve">
          <source>Note that this does not check whether the subscript is in bounds&amp;mdash;array indexing in C never does that.</source>
          <target state="translated">이것은 아래 첨자가 경계에 있는지 여부를 확인하지는 않습니다. C의 배열 색인은 절대로 그렇지 않습니다.</target>
        </trans-unit>
        <trans-unit id="fe068d03d79648087f0e901f7903dc301cb5511f" translate="yes" xml:space="preserve">
          <source>Note that this is equivalent to</source>
          <target state="translated">이것은 이것과 같습니다</target>
        </trans-unit>
        <trans-unit id="29fb6de499e7765adb0a6ebae13ccd422b34334d" translate="yes" xml:space="preserve">
          <source>Note that this option is off for all targets but x86 targets using ms-abi.</source>
          <target state="translated">이 옵션은 ms-abi를 사용하는 x86 대상을 제외한 모든 대상에 대해 해제되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="622759c99f6c912e577faea994db7b99f410133f" translate="yes" xml:space="preserve">
          <source>Note that this switch does not actually cause checking to be done; the operating system or the language runtime must do that. The switch causes generation of code to ensure that they see the stack being extended.</source>
          <target state="translated">이 스위치로 인해 실제로 검사가 수행되는 것은 아닙니다. 운영 체제 또는 언어 런타임에서이를 수행해야합니다. 이 스위치로 인해 코드가 생성되어 스택이 확장되는 것을 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f2e6446ac36e2008a96adc21c839234cf727d121" translate="yes" xml:space="preserve">
          <source>Note that unlike the &lt;code&gt;__has_attribute&lt;/code&gt; preprocessor operator which is suitable for use in &lt;code&gt;#if&lt;/code&gt; preprocessing directives &lt;code&gt;__builtin_has_attribute&lt;/code&gt; is an intrinsic function that is not recognized in such contexts.</source>
          <target state="translated">&lt;code&gt;#if&lt;/code&gt; 전처리 지시문 에 사용하기에 적합한 &lt;code&gt;__has_attribute&lt;/code&gt; 전 처리기 연산자 와 달리 &lt;code&gt;__builtin_has_attribute&lt;/code&gt; 는 이러한 컨텍스트에서 인식되지 않는 고유 함수입니다.</target>
        </trans-unit>
        <trans-unit id="4915a790890fd8cabfbb7baba7dffe7f3e783235" translate="yes" xml:space="preserve">
          <source>Note that with DWARF Version 2, some ports require and always use some non-conflicting DWARF 3 extensions in the unwind tables.</source>
          <target state="translated">DWARF 버전 2를 사용하면 일부 포트는 풀기 테이블에서 충돌하지 않는 DWARF 3 확장을 필요로하며 항상 사용합니다.</target>
        </trans-unit>
        <trans-unit id="6035af8efec8a117b9c722b2b3c2e674e988cea9" translate="yes" xml:space="preserve">
          <source>Note that you can also specify places to search using options such as</source>
          <target state="translated">다음과 같은 옵션을 사용하여 검색 할 장소를 지정할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="5bcd6e74d1ab8e43e8bfcc4f3f3b5bbe369e9ab8" translate="yes" xml:space="preserve">
          <source>Note that you can gain more local control over generation of Nios II custom instructions by using the &lt;code&gt;target(&quot;custom-&lt;var&gt;insn&lt;/var&gt;=&lt;var&gt;N&lt;/var&gt;&quot;)&lt;/code&gt; and &lt;code&gt;target(&quot;no-custom-&lt;var&gt;insn&lt;/var&gt;&quot;)&lt;/code&gt; function attributes (see &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;Function Attributes&lt;/a&gt;) or pragmas (see &lt;a href=&quot;function-specific-option-pragmas#Function-Specific-Option-Pragmas&quot;&gt;Function Specific Option Pragmas&lt;/a&gt;).</source>
          <target state="translated">당신이 사용하여는 Nios II 사용자 지정 지침의 세대에 비해 더 로컬 제어를 얻을 수 있습니다 &lt;code&gt;target(&quot;custom-&lt;var&gt;insn&lt;/var&gt;=&lt;var&gt;N&lt;/var&gt;&quot;)&lt;/code&gt; 및 &lt;code&gt;target(&quot;no-custom-&lt;var&gt;insn&lt;/var&gt;&quot;)&lt;/code&gt; 기능 특성 (참조 &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;기능 속성&lt;/a&gt; (참조) 또는 프라그 마를 &lt;a href=&quot;function-specific-option-pragmas#Function-Specific-Option-Pragmas&quot;&gt;기능별 옵션 Pragma&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="8e3637e90e88b7647a86c2faf5b8451b2735e797" translate="yes" xml:space="preserve">
          <source>Note that you can gain more local control over selection of a FPU configuration by using the &lt;code&gt;target(&quot;custom-fpu-cfg=&lt;var&gt;name&lt;/var&gt;&quot;)&lt;/code&gt; function attribute (see &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;Function Attributes&lt;/a&gt;) or pragma (see &lt;a href=&quot;function-specific-option-pragmas#Function-Specific-Option-Pragmas&quot;&gt;Function Specific Option Pragmas&lt;/a&gt;).</source>
          <target state="translated">사용자가 사용에 의해 FPU 구성의 선택을 더 로컬 제어 할 수있는 주 &lt;code&gt;target(&quot;custom-fpu-cfg=&lt;var&gt;name&lt;/var&gt;&quot;)&lt;/code&gt; 함수 특성 (참조 &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;기능 속성&lt;/a&gt; ) 또는 프 래그 (참고 &lt;a href=&quot;function-specific-option-pragmas#Function-Specific-Option-Pragmas&quot;&gt;함수 특정 옵션 프라그&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="0b180a7bd8ea3a5861ed720c8ea3a822f83801ff" translate="yes" xml:space="preserve">
          <source>Note that you still pay the penalty for the call through a function pointer; on most modern architectures, such a call defeats the branch prediction features of the CPU. This is also true of normal virtual function calls.</source>
          <target state="translated">함수 포인터를 통해 여전히 호출에 대한 페널티를 지불합니다. 대부분의 최신 아키텍처에서 이러한 호출은 CPU의 분기 예측 기능을 무효화합니다. 이것은 정상적인 가상 함수 호출에서도 마찬가지입니다.</target>
        </trans-unit>
        <trans-unit id="ac17698bd2e5a151a851f73a5bb974fba25e07c5" translate="yes" xml:space="preserve">
          <source>Note that, in most cases, the transactional and non-transactional code must synchronize together to ensure consistency.</source>
          <target state="translated">대부분의 경우 트랜잭션 및 비 트랜잭션 코드는 일관성을 유지하기 위해 동기화되어야합니다.</target>
        </trans-unit>
        <trans-unit id="e3ec5fccedcb699172747c3a05722bfb91d46bea" translate="yes" xml:space="preserve">
          <source>Note, although the RL78/G14 core is the default target, specifying</source>
          <target state="translated">RL78 / G14 코어가 기본 대상이지만</target>
        </trans-unit>
        <trans-unit id="5a355add672d58fac3f36e8673694724e1f416fd" translate="yes" xml:space="preserve">
          <source>Note, common variables (variables that have not been initialized) and constants are not placed into the small data area as they are assigned to other sections in the output executable.</source>
          <target state="translated">공통 변수 (초기화되지 않은 변수) 및 상수는 출력 실행 파일의 다른 섹션에 할당되므로 작은 데이터 영역에 배치되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ec00bb40354ffb0deb816462a47283225a434512" translate="yes" xml:space="preserve">
          <source>Note, that even seemingly correct code involving signed integers could cause a warning:</source>
          <target state="translated">부호있는 정수와 관련된 올바른 코드조차도 경고가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b4cd942f29618abad98eb8e760afb5d726ae23ad" translate="yes" xml:space="preserve">
          <source>Note, the &lt;code&gt;ms_abi&lt;/code&gt; attribute for Microsoft Windows 64-bit targets currently requires the</source>
          <target state="translated">Microsoft Windows 64 비트 대상 의 &lt;code&gt;ms_abi&lt;/code&gt; 속성에는 현재</target>
        </trans-unit>
        <trans-unit id="b7d4dcfd998e917223505065762f8d50ee9b3a25" translate="yes" xml:space="preserve">
          <source>Note, using this feature reserves a register, usually &lt;code&gt;r13&lt;/code&gt;, for the constant data base address. This can result in slower and/or larger code, especially in complicated functions.</source>
          <target state="translated">이 기능을 사용 하면 상수 데이터베이스 주소에 대한 레지스터 (일반적으로 &lt;code&gt;r13&lt;/code&gt; )가 예약 됩니다. 이로 인해 특히 복잡한 기능에서 느리고 큰 코드가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="81c80fe03c1cf4853a7fbc4f1732f9af9b08d3fb" translate="yes" xml:space="preserve">
          <source>Note: By default the check is disabled at run time. To enable it, add &lt;code&gt;detect_stack_use_after_return=1&lt;/code&gt; to the environment variable &lt;code&gt;ASAN_OPTIONS&lt;/code&gt;.</source>
          <target state="translated">참고 : 기본적으로 검사는 런타임에 비활성화되어 있습니다. 이를 활성화하려면 &lt;code&gt;detect_stack_use_after_return=1&lt;/code&gt; 을 환경 변수 &lt;code&gt;ASAN_OPTIONS&lt;/code&gt; 에 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="653df4c66e16cd2b0f4c03901841429636a45c7e" translate="yes" xml:space="preserve">
          <source>Note: Due to restrictions of the C/C++11 memory model, write accesses are not allowed to touch non bit-field members. It is therefore recommended to define all bits of the field&amp;rsquo;s type as bit-field members.</source>
          <target state="translated">참고 : C / C ++ 11 메모리 모델의 제한으로 인해 쓰기 액세스는 비트 필드가 아닌 멤버를 건드릴 수 없습니다. 따라서 필드 유형의 모든 비트를 비트 필드 멤버로 정의하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="2437e4643702bb3a24ae89b520ed20c18ddeb4ed" translate="yes" xml:space="preserve">
          <source>Note: This feature &lt;em&gt;appends&lt;/em&gt; data to the log file. If you want a fresh log file, be sure to delete any existing one.</source>
          <target state="translated">참고 :이 기능은 데이터를 로그 파일에 &lt;em&gt;추가&lt;/em&gt; 합니다. 새로운 로그 파일을 원하는 경우 기존 로그 파일을 삭제하십시오.</target>
        </trans-unit>
        <trans-unit id="33af5cf9bbeadb94b0d73f8f6075c9d60e8e28e9" translate="yes" xml:space="preserve">
          <source>Note: This feature &lt;em&gt;appends&lt;/em&gt; data to the log files. To get fresh log files, be sure to delete any existing ones.</source>
          <target state="translated">참고 :이 기능은 데이터를 로그 파일에 &lt;em&gt;추가&lt;/em&gt; 합니다. 새로운 로그 파일을 얻으려면 기존 로그 파일을 삭제하십시오.</target>
        </trans-unit>
        <trans-unit id="94de4dcdeffe344fd2e07479078415d30d371bc6" translate="yes" xml:space="preserve">
          <source>Notice that attribute &lt;a href=&quot;variable-attributes#AVR-Variable-Attributes&quot;&gt;&lt;code&gt;progmem&lt;/code&gt;&lt;/a&gt; locates data in flash but accesses to these data read from generic address space, i.e. from RAM, so that you need special accessors like &lt;code&gt;pgm_read_byte&lt;/code&gt; from &lt;a href=&quot;http://nongnu.org/avr-libc/user-manual/&quot;&gt;AVR-LibC&lt;/a&gt; together with attribute &lt;code&gt;progmem&lt;/code&gt;.</source>
          <target state="translated">공지 사항 속성 것을 &lt;a href=&quot;variable-attributes#AVR-Variable-Attributes&quot;&gt; &lt;code&gt;progmem&lt;/code&gt; 의&lt;/a&gt; 이 데이터에 있는지 찾아 플래시의 데이터 만 접근하면 같은 특별한 접근이 필요 그래서 일반적인 주소 공간, 즉 RAM에서 읽을 &lt;code&gt;pgm_read_byte&lt;/code&gt; 에서 &lt;a href=&quot;http://nongnu.org/avr-libc/user-manual/&quot;&gt;AVR-한 LibC&lt;/a&gt; 함께 속성과 &lt;code&gt;progmem&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="822f7eb64142ce391817402c05871710e1c7e133" translate="yes" xml:space="preserve">
          <source>Notice that neither of these options enable any extra precision over the x87 standard of 80 bits for a &lt;code&gt;long double&lt;/code&gt;.</source>
          <target state="translated">이 옵션들 중 어느 것도 &lt;code&gt;long double&lt;/code&gt; 에 대해 x87 표준 80 비트보다 더 높은 정밀도를 가능하게하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="d786dcc1d9f435999d84d58bba3ea4f4224bc5d1" translate="yes" xml:space="preserve">
          <source>Notice that the final link is done with &lt;code&gt;g++&lt;/code&gt; to get the C++ runtime libraries and</source>
          <target state="translated">최종 연결은 &lt;code&gt;g++&lt;/code&gt; 로 수행되어 C ++ 런타임 라이브러리를 얻습니다.</target>
        </trans-unit>
        <trans-unit id="7859f3b9fa8e3ddc23832a7038119944dfbd9dee" translate="yes" xml:space="preserve">
          <source>Now that there is a definitive ISO standard C++, G++ has a specification to adhere to. The C++ language evolved over time, and features that used to be acceptable in previous drafts of the standard, such as the ARM [Annotated C++ Reference Manual], are no longer accepted. In order to allow compilation of C++ written to such drafts, G++ contains some backwards compatibilities. &lt;em&gt;All such backwards compatibility features are liable to disappear in future versions of G++.&lt;/em&gt; They should be considered deprecated. See &lt;a href=&quot;deprecated-features#Deprecated-Features&quot;&gt;Deprecated Features&lt;/a&gt;.</source>
          <target state="translated">결정적인 ISO 표준 C ++이 있으므로 G ++에는 준수해야 할 사양이 있습니다. C ++ 언어는 시간이 지남에 따라 발전했으며 ARM [Annotated C ++ Reference Manual]과 같이 이전 표준 초안에서 허용되었던 기능은 더 이상 허용되지 않습니다. 이러한 초안에 작성된 C ++의 컴파일을 허용하기 위해 G ++에는 이전 버전과의 호환성이 포함되어 있습니다. &lt;em&gt;이러한 모든 이전 버전과의 호환성 기능은 향후 버전의 G ++에서 사라질 수 있습니다. &lt;/em&gt;더 이상 사용되지 않는 것으로 간주해야합니다. 더 이상 &lt;a href=&quot;deprecated-features#Deprecated-Features&quot;&gt;사용되지 않는 기능을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d3c34c7f63b787680a247f557449ec0eb5bc2f0b" translate="yes" xml:space="preserve">
          <source>Now the declaration can be rewritten this way:</source>
          <target state="translated">이제 선언을 다음과 같이 다시 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1ba3ed282bccf05f27e20c0a5ca69aabb606912d" translate="yes" xml:space="preserve">
          <source>Number of instructions accounted by inliner for function overhead such as function prologue and epilogue.</source>
          <target state="translated">함수 프롤로그 및 에필로그와 같은 함수 오버 헤드에 대해 인라이너가 설명하는 명령 수입니다.</target>
        </trans-unit>
        <trans-unit id="a9d77bd27290bc643783a102371782a121ea9d61" translate="yes" xml:space="preserve">
          <source>Numbers that mov3q can handle</source>
          <target state="translated">mov3q가 처리 할 수있는 숫자</target>
        </trans-unit>
        <trans-unit id="08a914cde05039694ef0194d9ee79ff9a79dde33" translate="yes" xml:space="preserve">
          <source>O</source>
          <target state="translated">O</target>
        </trans-unit>
        <trans-unit id="6959e9b8158bcc98ff6a2e70863764b7906e552d" translate="yes" xml:space="preserve">
          <source>Objective-C and Objective-C++ Language Options</source>
          <target state="translated">Objective-C 및 Objective-C ++ 언어 옵션</target>
        </trans-unit>
        <trans-unit id="b20ab9c456cbbe290b4cfd583f1fa88b379c6e0a" translate="yes" xml:space="preserve">
          <source>Objective-C source code that should not be preprocessed.</source>
          <target state="translated">전처리해서는 안되는 Objective-C 소스 코드</target>
        </trans-unit>
        <trans-unit id="523f1f4c763600ed7eb3c9421220aea454d745f2" translate="yes" xml:space="preserve">
          <source>Objective-C source code. Note that you must link with the</source>
          <target state="translated">Objective-C 소스 코드 에 연결해야합니다</target>
        </trans-unit>
        <trans-unit id="6761b54a5f6515c95bea112628e68f8898e14d5f" translate="yes" xml:space="preserve">
          <source>Objective-C type</source>
          <target state="translated">오브젝티브 -C 타입</target>
        </trans-unit>
        <trans-unit id="474c942588ec71182d78e7e6c24b2f42f3f5b41d" translate="yes" xml:space="preserve">
          <source>Objective-C++ source code that must be preprocessed.</source>
          <target state="translated">전처리해야하는 Objective-C ++ 소스 코드.</target>
        </trans-unit>
        <trans-unit id="9f49aa63e9a783d60abf07bc9ac9666caffe9aa0" translate="yes" xml:space="preserve">
          <source>Objective-C++ source code that should not be preprocessed.</source>
          <target state="translated">전처리해서는 안되는 Objective-C ++ 소스 코드.</target>
        </trans-unit>
        <trans-unit id="2fc3a7a8c2d20b9da1bb517ce3a19a14b1914763" translate="yes" xml:space="preserve">
          <source>Objective-C++ source code. Note that you must link with the</source>
          <target state="translated">Objective-C ++ 소스 코드 에 연결해야합니다</target>
        </trans-unit>
        <trans-unit id="94aaa1ebd84aff7dbe1614ccac8e74bcfa0211be" translate="yes" xml:space="preserve">
          <source>Objects in this address space are located in &lt;code&gt;.progmemx.data&lt;/code&gt;.</source>
          <target state="translated">이 주소 공간의 객체는 &lt;code&gt;.progmemx.data&lt;/code&gt; 에 있습니다.</target>
        </trans-unit>
        <trans-unit id="99bee92cef09b1bc404e70f9dcc3030446972523" translate="yes" xml:space="preserve">
          <source>Obsolete FPX.</source>
          <target state="translated">더 이상 사용되지 않는 FPX.</target>
        </trans-unit>
        <trans-unit id="357a16c30a61cd6d9c51164bbf466d92855a15d0" translate="yes" xml:space="preserve">
          <source>Occasionally users write programs intended only for a particular machine type. On these occasions, the users would benefit if the GNU C compiler were to support by default the same dialect as the other compilers on that machine. But such applications are rare. And users writing a program to run on more than one type of machine cannot possibly benefit from this kind of compatibility.</source>
          <target state="translated">때때로 사용자는 특정 머신 유형 전용 프로그램을 작성합니다. 이 경우 GNU C 컴파일러가 기본적으로 해당 컴퓨터의 다른 컴파일러와 동일한 언어를 지원해야한다면 이점이 있습니다. 그러나 이러한 응용 프로그램은 거의 없습니다. 또한 여러 유형의 컴퓨터에서 실행되도록 프로그램을 작성하는 사용자는 이러한 종류의 호환성을 활용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="6a1d199165d4390c283d7ec80687eea8baaa6781" translate="yes" xml:space="preserve">
          <source>Odd numbered general registers (R1, R3, R5). These are used for 16-bit multiply operations.</source>
          <target state="translated">홀수 번호의 일반 레지스터 (R1, R3, R5). 이들은 16 비트 곱하기 연산에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="f6f13ba62d3196cffb57c88d034d24dc7db533c0" translate="yes" xml:space="preserve">
          <source>Odd-numbered D register</source>
          <target state="translated">홀수 D 레지스터</target>
        </trans-unit>
        <trans-unit id="e4e56f818282df1d1b711e3e41bbe20d94d55efb" translate="yes" xml:space="preserve">
          <source>Odd-numbered accumulator register.</source>
          <target state="translated">홀수 누산기 레지스터.</target>
        </trans-unit>
        <trans-unit id="2ec34c9bd3bcb5d07ffbd54beeea503e1f9bc861" translate="yes" xml:space="preserve">
          <source>Of course, this extension only makes sense if the extra data comes at the end of a top-level object, as otherwise we would be overwriting data at subsequent offsets. To avoid undue complication and confusion with initialization of deeply nested arrays, we simply disallow any non-empty initialization except when the structure is the top-level object. For example:</source>
          <target state="translated">물론이 확장은 추가 데이터가 최상위 개체의 끝에 오는 경우에만 의미가 있습니다. 그렇지 않으면 후속 오프셋에서 데이터를 덮어 쓰게됩니다. 깊게 중첩 된 배열을 초기화 할 때 과도한 복잡성과 혼동을 피하기 위해 구조가 최상위 개체 인 경우를 제외하고 비어 있지 않은 초기화를 허용하지 않습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f663d80f570741cb1b9eca32266f6672ce42030f" translate="yes" xml:space="preserve">
          <source>Of these, the &lt;code&gt;__builtin_divde&lt;/code&gt; and &lt;code&gt;__builtin_divdeu&lt;/code&gt; functions require a 64-bit environment.</source>
          <target state="translated">이 중 &lt;code&gt;__builtin_divde&lt;/code&gt; 및 &lt;code&gt;__builtin_divdeu&lt;/code&gt; 함수에는 64 비트 환경이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="0f7d9ddd9b5ccc44a5e0501cbbc23a989dc1c52a" translate="yes" xml:space="preserve">
          <source>Often large projects have many header files that are included in every source file. The time the compiler takes to process these header files over and over again can account for nearly all of the time required to build the project. To make builds faster, GCC allows you to &lt;em&gt;precompile&lt;/em&gt; a header file.</source>
          <target state="translated">큰 프로젝트에는 종종 모든 소스 파일에 포함 된 많은 헤더 파일이 있습니다. 컴파일러가 이러한 헤더 파일을 반복해서 처리하는 데 걸리는 시간은 프로젝트를 빌드하는 데 필요한 거의 모든 시간을 고려할 수 있습니다. 빌드 속도를 높이기 위해 GCC에서는 헤더 파일 을 &lt;em&gt;미리 컴파일&lt;/em&gt; 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a23e04c02255174ad925f6e2cccd9b49d9597326" translate="yes" xml:space="preserve">
          <source>Old C system header files did not contain an &lt;code&gt;extern &quot;C&quot; {&amp;hellip;}&lt;/code&gt; scope to set the language. On such systems, all system header files are implicitly scoped inside a C language scope. Such headers must correctly prototype function argument types, there is no leeway for &lt;code&gt;()&lt;/code&gt; to indicate an unspecified set of arguments.</source>
          <target state="translated">이전 C 시스템 헤더 파일에는 언어를 설정하기 위한 &lt;code&gt;extern &quot;C&quot; {&amp;hellip;}&lt;/code&gt; 범위가 없습니다. 이러한 시스템에서 모든 시스템 헤더 파일은 C 언어 범위 내에서 암시 적으로 범위가 지정됩니다. 이러한 헤더는 함수 인수 유형을 올바르게 프로토 타입해야하며 , 지정되지 않은 인수 세트를 나타내는 &lt;code&gt;()&lt;/code&gt; 에 대한 여지가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="71c6fc1445925444b09e10f27a88eff061bbe9c1" translate="yes" xml:space="preserve">
          <source>Old-style checking is a generic mechanism that requires no specific target support in the compiler but comes with the following drawbacks:</source>
          <target state="translated">구식 검사는 컴파일러에서 특정 대상을 지원하지 않아도되는 일반적인 메커니즘이지만 다음과 같은 단점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="e905fa5fdb190761bd1ca3d3cd01c42bc12f95eb" translate="yes" xml:space="preserve">
          <source>Older Alpha assemblers provided no way to generate symbol relocations except via assembler macros. Use of these macros does not allow optimal instruction scheduling. GNU binutils as of version 2.12 supports a new syntax that allows the compiler to explicitly mark which relocations should apply to which instructions. This option is mostly useful for debugging, as GCC detects the capabilities of the assembler when it is built and sets the default accordingly.</source>
          <target state="translated">이전 알파 어셈블러는 어셈블러 매크로를 통한 경우를 제외하고 심볼 재배치를 생성 할 방법을 제공하지 않았습니다. 이러한 매크로를 사용하면 최적의 명령어 스케줄링이 허용되지 않습니다. 버전 2.12부터 GNU binutils는 컴파일러가 어떤 재배치가 어떤 명령어에 적용되어야하는지 명시 적으로 표시 할 수있는 새로운 구문을 지원합니다. 이 옵션은 GCC가 빌드 될 때 어셈블러의 기능을 감지하고 그에 따라 기본값을 설정하므로 디버깅에 주로 유용합니다.</target>
        </trans-unit>
        <trans-unit id="3085d604d803b18b2d3da9b70c5b7bd52c15d189" translate="yes" xml:space="preserve">
          <source>Older versions of GCC (prior to 4.9.0) incorrectly did not align a structure parameter on a 128-bit boundary when that structure contained a member requiring 128-bit alignment. This is corrected in more recent versions of GCC. This option may be used to generate code that is compatible with functions compiled with older versions of GCC.</source>
          <target state="translated">이전 버전의 GCC (4.9.0 이전)는 해당 구조에 128 비트 정렬이 필요한 멤버가 포함 된 경우 128 비트 경계에서 구조 매개 변수를 잘못 정렬하지 않았습니다. 최신 버전의 GCC에서 수정되었습니다. 이 옵션은 이전 버전의 GCC로 컴파일 된 함수와 호환되는 코드를 생성하는 데 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5dfaed8cc27e9086a9dc0f3015f15bae64911631" translate="yes" xml:space="preserve">
          <source>Omit or keep the frame pointer in leaf functions. The former behavior is the default.</source>
          <target state="translated">리프 함수에서 프레임 포인터를 생략하거나 유지하십시오. 전자의 동작이 기본값입니다.</target>
        </trans-unit>
        <trans-unit id="437ede91272f9267303ec0e8f4b085f62a36bb9e" translate="yes" xml:space="preserve">
          <source>Omit the frame pointer in functions that don&amp;rsquo;t need one. This avoids the instructions to save, set up and restore the frame pointer; on many targets it also makes an extra register available.</source>
          <target state="translated">필요하지 않은 함수에서는 프레임 포인터를 생략하십시오. 이것은 프레임 포인터를 저장, 설정 및 복원하라는 지시를 피합니다. 많은 대상에서 추가 레지스터를 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="7f333b33122cfd75af3269c8713019718f14b845" translate="yes" xml:space="preserve">
          <source>Omitted fields are implicitly initialized the same as for objects that have static storage duration.</source>
          <target state="translated">생략 된 필드는 정적 저장 기간이있는 오브젝트와 동일하게 내재적으로 초기화됩니다.</target>
        </trans-unit>
        <trans-unit id="621edda55692290d44767a6a92b9a2fd510661a9" translate="yes" xml:space="preserve">
          <source>Omitting the middle operand of a &amp;lsquo;</source>
          <target state="translated">'의 중간 피연산자를 생략</target>
        </trans-unit>
        <trans-unit id="b2f0103d381dd1d323db8c3a03db44cdc626ca6f" translate="yes" xml:space="preserve">
          <source>On 32-bit and 64-bit x86 targets, you can use an ABI attribute to indicate which calling convention should be used for a function. The &lt;code&gt;ms_abi&lt;/code&gt; attribute tells the compiler to use the Microsoft ABI, while the &lt;code&gt;sysv_abi&lt;/code&gt; attribute tells the compiler to use the ABI used on GNU/Linux and other systems. The default is to use the Microsoft ABI when targeting Windows. On all other systems, the default is the x86/AMD ABI.</source>
          <target state="translated">32 비트 및 64 비트 x86 대상에서 ABI 속성을 사용하여 함수에 사용해야하는 호출 규칙을 나타낼 수 있습니다. &lt;code&gt;ms_abi&lt;/code&gt; 그동안 속성은 Microsoft ABI를 사용하도록 컴파일러에 지시 &lt;code&gt;sysv_abi&lt;/code&gt; 속성은 GNU / 리눅스와 다른 시스템에서 사용되는 ABI를 사용하도록 컴파일러에 지시합니다. 기본값은 Windows를 대상으로 할 때 Microsoft ABI를 사용하는 것입니다. 다른 모든 시스템에서 기본값은 x86 / AMD ABI입니다.</target>
        </trans-unit>
        <trans-unit id="7a78b9a364dfefd6e175d0a3ab80ffee92a27b67" translate="yes" xml:space="preserve">
          <source>On 32-bit and 64-bit x86 targets, you can use this function attribute to make GCC generate the &amp;ldquo;hot-patching&amp;rdquo; function prologue used in Win32 API functions in Microsoft Windows XP Service Pack 2 and newer.</source>
          <target state="translated">32 비트 및 64 비트 x86 대상에서이 함수 속성을 사용하여 GCC가 Microsoft Windows XP 서비스 팩 2 이상의 Win32 API 함수에 사용되는 &quot;핫 패치&quot;기능 프롤로그를 생성하게 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2e6f4c5ed2ae407c91c285251b8a1702b691a3d3" translate="yes" xml:space="preserve">
          <source>On 64-bit Darwin, natural alignment is the default, and</source>
          <target state="translated">64 비트 다윈에서는 자연스러운 정렬이 기본값이며</target>
        </trans-unit>
        <trans-unit id="90926b7f3e6ce0a7faa650bc5e0a9ae2579391e7" translate="yes" xml:space="preserve">
          <source>On 64-bit targets, if the ISA 3.0 additions (</source>
          <target state="translated">ISA 3.0이 추가 된 경우 64 비트 대상에서</target>
        </trans-unit>
        <trans-unit id="7b3ca74678fda2723df9a31e541f8a4acf896387" translate="yes" xml:space="preserve">
          <source>On 68000 and x86 systems, for instance, you can get paradoxical results if you test the precise values of floating point numbers. For example, you can find that a floating point value which is not a NaN is not equal to itself. This results from the fact that the floating point registers hold a few more bits of precision than fit in a &lt;code id=&quot;index-floating-point-precision&quot;&gt;double&lt;/code&gt; in memory. Compiled code moves values between memory and floating point registers at its convenience, and moving them into memory truncates them.</source>
          <target state="translated">예를 들어 68000 및 x86 시스템에서 부동 소수점 숫자의 정확한 값을 테스트하면 역설적 인 결과를 얻을 수 있습니다. 예를 들어 NaN이 아닌 부동 소수점 값이 자신과 같지 않다는 것을 알 수 있습니다. 이는 부동 소수점 레지스터가 &lt;code id=&quot;index-floating-point-precision&quot;&gt;double&lt;/code&gt; 메모리에 맞추는 것보다 몇 비트 더 높은 정밀도를 유지한다는 사실에서 비롯 됩니다. 컴파일 된 코드는 편의에 따라 메모리와 부동 소수점 레지스터간에 값을 이동하고 메모리로 이동하면 잘립니다.</target>
        </trans-unit>
        <trans-unit id="cce5f37f8d7cd0a5de8d4490ee3152c0ec04bedd" translate="yes" xml:space="preserve">
          <source>On AIX and other platforms without weak symbol support, templates need to be instantiated explicitly and symbols for static members of templates will not be generated.</source>
          <target state="translated">약한 심볼 지원이없는 AIX 및 기타 플랫폼에서는 템플릿을 명시 적으로 인스턴스화해야하며 템플릿의 정적 멤버에 대한 심볼이 생성되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="67e15fb9b0006d78449a870c8f6d6bae81a57e96" translate="yes" xml:space="preserve">
          <source>On AIX, 32-bit Darwin, and 64-bit PowerPC GNU/Linux, the option</source>
          <target state="translated">AIX, 32 비트 Darwin 및 64 비트 PowerPC GNU / Linux에서 옵션</target>
        </trans-unit>
        <trans-unit id="019b3d4021e3ba16398a7b4f14363d61ec45ddb1" translate="yes" xml:space="preserve">
          <source>On AIX, GCC scans object files and library archives for static constructors and destructors when linking an application before the linker prunes unreferenced symbols. This is necessary to prevent the AIX linker from mistakenly assuming that static constructor or destructor are unused and removing them before the scanning can occur. All static constructors and destructors found will be referenced even though the modules in which they occur may not be used by the program. This may lead to both increased executable size and unexpected symbol references.</source>
          <target state="translated">AIX에서 GCC는 링커가 참조되지 않은 심볼을 제거하기 전에 애플리케이션을 링크 할 때 오브젝트 파일 및 라이브러리 아카이브에서 정적 생성자와 소멸자를 스캔합니다. 정적 링커 나 소멸자가 사용되지 않는다고 가정하고 스캔이 발생하기 전에 AIX 링커가 실수로이를 제거하는 것을 방지하기 위해 필요합니다. 발견 된 모든 정적 생성자와 소멸자는 발생하는 모듈이 프로그램에서 사용되지 않더라도 참조됩니다. 이로 인해 실행 파일 크기가 커지고 예기치 않은 기호 참조가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a7fc2ecb53d4b8654edde643a329268c4adcdf2d" translate="yes" xml:space="preserve">
          <source>On AIX, the</source>
          <target state="translated">AIX에서</target>
        </trans-unit>
        <trans-unit id="b99c11f10a1b4912f3f4ac45aa35400b9f4941b4" translate="yes" xml:space="preserve">
          <source>On ARM and AArch64 targets, GCC supports half-precision (16-bit) floating point via the &lt;code&gt;__fp16&lt;/code&gt; type defined in the ARM C Language Extensions. On ARM systems, you must enable this type explicitly with the</source>
          <target state="translated">ARM 및 AArch64 대상에서 GCC는 ARM C 언어 확장에 정의 된 &lt;code&gt;__fp16&lt;/code&gt; 유형을 통해 반 정밀도 (16 비트) 부동 소수점을 지원합니다 . ARM 시스템에서이 유형을 명시 적으로 활성화해야합니다.</target>
        </trans-unit>
        <trans-unit id="044bbf9ca0fc753b68e0048878d9dc31315c9b07" translate="yes" xml:space="preserve">
          <source>On ARM, the following options are allowed:</source>
          <target state="translated">ARM에서는 다음 옵션이 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="a11f77770b3ac07e9fed3796d7930661cf18f2c7" translate="yes" xml:space="preserve">
          <source>On ARMv7-M the interrupt type is ignored, and the attribute means the function may be called with a word-aligned stack pointer.</source>
          <target state="translated">ARMv7-M에서는 인터럽트 유형이 무시되며이 속성은 단어 정렬 스택 포인터로 함수를 호출 할 수 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="48ccee53230e4608e92f4b1f261864383c07df8e" translate="yes" xml:space="preserve">
          <source>On AVR, functions with the &lt;code&gt;OS_main&lt;/code&gt; or &lt;code&gt;OS_task&lt;/code&gt; attribute do not save/restore any call-saved register in their prologue/epilogue.</source>
          <target state="translated">AVR에서 &lt;code&gt;OS_main&lt;/code&gt; 또는 &lt;code&gt;OS_task&lt;/code&gt; 속성이 있는 함수 는 프롤로그 / 에필로그에 호출 저장 레지스터를 저장 / 복원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f34723347967079aa79c31b53daa8a49f5306802" translate="yes" xml:space="preserve">
          <source>On Darwin and Mac OS X systems, compile code so that it is not relocatable, but that its external references are relocatable. The resulting code is suitable for applications, but not shared libraries.</source>
          <target state="translated">Darwin 및 Mac OS X 시스템에서는 코드를 재배치 할 수 없지만 외부 참조는 재배치 할 수 있도록 코드를 컴파일하십시오. 결과 코드는 응용 프로그램에는 적합하지만 공유 라이브러리에는 적합하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ed31ac5dbaf4a6d513670e8cc0d00955bb7a25ce" translate="yes" xml:space="preserve">
          <source>On Darwin systems, the math library never sets &lt;code&gt;errno&lt;/code&gt;. There is therefore no reason for the compiler to consider the possibility that it might, and</source>
          <target state="translated">다윈 시스템에서 수학 라이브러리는 절대로 &lt;code&gt;errno&lt;/code&gt; 를 설정하지 않습니다 . 따라서 컴파일러가 가능성을 고려할 이유가 없습니다.</target>
        </trans-unit>
        <trans-unit id="ab58930923e6356c626d0fea63978d6a0bcfbd3b" translate="yes" xml:space="preserve">
          <source>On Darwin, default visibility means that the declaration is visible to other modules.</source>
          <target state="translated">Darwin에서 기본 가시성은 선언이 다른 모듈에서 볼 수 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="c3cacd47bbb004b77b81f458c2b4cc6d8f910d84" translate="yes" xml:space="preserve">
          <source>On Darwin/PPC systems, &lt;code&gt;#pragma longcall&lt;/code&gt; generates &lt;code&gt;jbsr
callee, L42&lt;/code&gt;, plus a &lt;em&gt;branch island&lt;/em&gt; (glue code). The two target addresses represent the callee and the branch island. The Darwin/PPC linker prefers the first address and generates a &lt;code&gt;bl
callee&lt;/code&gt; if the PPC &lt;code&gt;bl&lt;/code&gt; instruction reaches the callee directly; otherwise, the linker generates &lt;code&gt;bl L42&lt;/code&gt; to call the branch island. The branch island is appended to the body of the calling function; it computes the full 32-bit address of the callee and jumps to it.</source>
          <target state="translated">Darwin / PPC 시스템에서 &lt;code&gt;#pragma longcall&lt;/code&gt; 은 &lt;code&gt;jbsr callee, L42&lt;/code&gt; 와 함께 &lt;em&gt;분기 섬&lt;/em&gt; (glue code)을 생성합니다. 두 대상 주소는 수신자와 지점을 나타냅니다. PPC &lt;code&gt;bl&lt;/code&gt; 명령이 수신자에게 직접 도달하면 Darwin / PPC 링커는 첫 번째 주소를 선호하고 &lt;code&gt;bl callee&lt;/code&gt; 생성합니다 . 그렇지 않으면 링커에서 &lt;code&gt;bl L42&lt;/code&gt; 를 생성 하여 분기 아일랜드를 호출합니다. 브랜치 아일랜드는 호출 함수의 본문에 추가됩니다. 수신자의 전체 32 비트 주소를 계산하여 이동합니다.</target>
        </trans-unit>
        <trans-unit id="ebd988cb1f0efca5877fe075a434d5e0cabc9398" translate="yes" xml:space="preserve">
          <source>On ELF, default visibility means that the declaration is visible to other modules and, in shared libraries, means that the declared entity may be overridden.</source>
          <target state="translated">ELF에서 기본 표시 여부는 선언이 다른 모듈에 표시되고 공유 라이브러리에서 선언 된 엔터티가 재정의 될 수 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="de0c8d6e8daa4597ac84600a0f8f99a4ce88af03" translate="yes" xml:space="preserve">
          <source>On ELF/DWARF systems these options do not degenerate the quality of the debug information. There could be issues with other object files/debug info formats.</source>
          <target state="translated">ELF / DWARF 시스템에서 이러한 옵션은 디버그 정보의 품질을 저하시키지 않습니다. 다른 객체 파일 / 디버그 정보 형식에 문제가있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ec8791fbe1958e9c97975ff37d2fe4b8f9facc05" translate="yes" xml:space="preserve">
          <source>On Epiphany targets one or more optional parameters can be added like this:</source>
          <target state="translated">Epiphany 대상에서 다음과 같이 하나 이상의 선택적 매개 변수를 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="05a7abb490ac44e199f071ef8503596c138dde64" translate="yes" xml:space="preserve">
          <source>On HP-UX 10 and later, the GCC driver adds the necessary options to link with libdld.sl when the</source>
          <target state="translated">HP-UX 10 이상에서 GCC 드라이버는 다음과 같은 경우 libdld.sl과 연결하는 데 필요한 옵션을 추가합니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
