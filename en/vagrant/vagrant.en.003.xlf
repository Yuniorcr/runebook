<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="en" datatype="htmlbody" original="vagrant">
    <body>
      <group id="vagrant">
        <trans-unit id="3486dfb9bf02f6d81aea26f2e88f9f75e916c8de" translate="yes" xml:space="preserve">
          <source>The provisioner can automatically build images. Images are built prior to any configured containers to run, so you can build an image before running it. Building an image is easy:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c5a72b72296464aa5fbe0aa51409389acdc5c1f" translate="yes" xml:space="preserve">
          <source>The provisioner class should subclass and implement &lt;code&gt;Vagrant.plugin(2, :provisioner)&lt;/code&gt; which is an upgrade-safe way to let Vagrant return the proper parent class for provisioners.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a08829c346626ae77eb2ed2693c93dca2bc9466" translate="yes" xml:space="preserve">
          <source>The provisioners in this case will output &quot;A&quot;, then &quot;C&quot;, then &quot;B&quot;. Notice that &quot;B&quot; is last. That is because the ordering is outside-in, in the order of the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a18f72fc8929d9da0b93f22c1fa3a2f8e8d69d88" translate="yes" xml:space="preserve">
          <source>The publish command is a complete solution for creating and updating a Vagrant box on Vagrant Cloud. Instead of having to create each attribute of a Vagrant box with separate commands, the publish command instead asks you to provide all the information required before creating or updating a new box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54e6878c15630d85199f88a77ed8a7676fe7a1bb" translate="yes" xml:space="preserve">
          <source>The quickest way to get started with the Puppet agent provisioner is to just specify the location of the Puppet master:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="399857d21fb3f06290f61b02800e3833c47d6127" translate="yes" xml:space="preserve">
          <source>The quickest way to get started with the Puppet provisioner is to just enable it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0284f818e80b4c878762fec0b2202a5c4317e110" translate="yes" xml:space="preserve">
          <source>The raw loaded &lt;code&gt;Vagrant::Environment&lt;/code&gt; object is available with the '@env' instance variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="177da0b25f77a79101a2f651059cfd4130d8be6b" translate="yes" xml:space="preserve">
          <source>The reason &lt;code&gt;UNSET_VALUE&lt;/code&gt; is used instead of Ruby's &lt;code&gt;nil&lt;/code&gt; is because it is possible that you want the default to be some value, and the user actually wants to set the value to &lt;code&gt;nil&lt;/code&gt;, and it is impossible for Vagrant to automatically determine whether the user set the instance variable, or if it was defaulted as nil.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9741be99e38a32e91aaef8e03a1bec0fd9294506" translate="yes" xml:space="preserve">
          <source>The recommendation is to make sure to test symbolic links on all the host/guest combinations you sync folders on if this is important to you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0638b54d2ca01f9899a9ef763f633a3afe6db665" translate="yes" xml:space="preserve">
          <source>The recommended mode of operation is &lt;code&gt;:bootstrap&lt;/code&gt;, as you get the full benefits of CFEngine when you have it running periodically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3194bbf54836f5f0ba44360152b71a260fc2026f" translate="yes" xml:space="preserve">
          <source>The reference of available command-line flags to this command is available below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0e7f295797e8fc7fab5a62eec085af6b03d291b" translate="yes" xml:space="preserve">
          <source>The remainder of the available options are optional:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82602536e992b417d2825cc8f6f1a9849ed85b75" translate="yes" xml:space="preserve">
          <source>The return value is a Ruby Hash object, where the key is a section name, and the value is a list of error messages. These will be displayed by Vagrant. The hash must not contain any values if there are no errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2462848affcd1842368bfae6d7f07e3ba6c040ab" translate="yes" xml:space="preserve">
          <source>The rsync synced folder does a one-time one-way sync from the machine running to the machine being started by Vagrant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89aaacb00693e8a20598d3aa146874664018146e" translate="yes" xml:space="preserve">
          <source>The rsync synced folder type accepts the following options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec9b2c9a89e8443b57c5354c0e11a5522ce9536c" translate="yes" xml:space="preserve">
          <source>The second option is for situations where you would like to have more control over the inventory management.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eb020ee3a9040f8a3d3c977624b635940b631cb" translate="yes" xml:space="preserve">
          <source>The second way to pull images is to use the &lt;code&gt;pull_images&lt;/code&gt; function. Each call to &lt;code&gt;pull_images&lt;/code&gt; will &lt;em&gt;append&lt;/em&gt; the images to be pulled. The &lt;code&gt;images&lt;/code&gt; variable, on the other hand, can only be used once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2faabbb34bb334fdaa9ef2fb4bb610df645df5a5" translate="yes" xml:space="preserve">
          <source>The settings within &lt;code&gt;config.ssh&lt;/code&gt; relate to configuring how Vagrant will access your machine over SSH. As with most Vagrant settings, the defaults are typically fine, but you can fine tune whatever you would like.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71517ab10ab429f22ea81565ed96054553f6cb98" translate="yes" xml:space="preserve">
          <source>The settings within &lt;code&gt;config.vagrant&lt;/code&gt; modify the behavior of Vagrant itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b23f334b998e5008c102271fbfdfbce90b9ee773" translate="yes" xml:space="preserve">
          <source>The settings within &lt;code&gt;config.vm&lt;/code&gt; modify the configuration of the machine that Vagrant manages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbade9bae6e815251bb9c25b4bf33f47aad57798" translate="yes" xml:space="preserve">
          <source>The settings within &lt;code&gt;config.winrm&lt;/code&gt; relate to configuring how Vagrant will access your Windows guest over WinRM. As with most Vagrant settings, the defaults are typically fine, but you can fine tune whatever you would like.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92d0dd22f491a3947c24b5220d847b9ae112f302" translate="yes" xml:space="preserve">
          <source>The share command initializes a Vagrant Share session, allowing you to share your Vagrant environment with anyone in the world, enabling collaboration directly in your Vagrant environment in almost any network environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5146c7c1f32e1735f0555c07bf99421a2516dfc7" translate="yes" xml:space="preserve">
          <source>The share will be accessible for the duration that &lt;code&gt;vagrant share&lt;/code&gt; is running. Press &lt;code&gt;Ctrl-C&lt;/code&gt; to quit the sharing session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32ce0fbd261cc6b0fc0ba0a5d7515f3853616cc3" translate="yes" xml:space="preserve">
          <source>The shell provisioner can also take an option specifying a path to a shell script on the host machine. Vagrant will then upload this script into the guest and execute it. An example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b100f2d1e66d2490011d5e010c6556032a8d986a" translate="yes" xml:space="preserve">
          <source>The shell provisioner takes various options. One of &lt;code&gt;inline&lt;/code&gt; or &lt;code&gt;path&lt;/code&gt; is required:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1fa82c98d7f180f1f1e8d09eb36ce796b8817af" translate="yes" xml:space="preserve">
          <source>The state ID of the target machine. targeted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="346c686944c3e129212c0e485fde9703638c1ab4" translate="yes" xml:space="preserve">
          <source>The string identifying the desired interface must exactly match the name of an available interface. If it cannot be found, Vagrant will ask you to pick from a list of available network interfaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd92dc3186a31ebcbef417850ae40e385b9f63f6" translate="yes" xml:space="preserve">
          <source>The syntax of Vagrantfiles is &lt;a href=&quot;http://www.ruby-lang.org&quot;&gt;Ruby&lt;/a&gt;, but knowledge of the Ruby programming language is not necessary to make modifications to the Vagrantfile, since it is mostly simple variable assignment. In fact, Ruby is not even the most popular community Vagrant is used within, which should help show you that despite not having Ruby knowledge, people are very successful with Vagrant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4b6239f6d6ecae0149000429a4264c76f1b0e35" translate="yes" xml:space="preserve">
          <source>The trigger class takes various options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f4118da646d54fc775790ec3e6e5a90015ca2c6" translate="yes" xml:space="preserve">
          <source>The upgrade process from 1.0.x to 1.x is straightforward. Vagrant is quite &lt;a href=&quot;backwards-compatibility&quot;&gt;backwards compatible&lt;/a&gt; with Vagrant 1.0.x, so you can simply reinstall Vagrant over your previous installation by downloading the latest package and installing it using standard procedures for your operating system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a5316f0155fe7fd6f5cb428d51abd5838b1741c" translate="yes" xml:space="preserve">
          <source>The validation method is given a &lt;code&gt;machine&lt;/code&gt; object, since validation is done for each machine that Vagrant is managing. This allows you to conditionally validate some keys based on the state of the machine and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b0a2990b255db60b3d119159a03d7f98c898dbe" translate="yes" xml:space="preserve">
          <source>The value to use for the &lt;code&gt;--provider&lt;/code&gt; flag is &lt;code&gt;hyperv&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32d0805b9c3f4b28a92a8b8e23ef3f8eec6df8d0" translate="yes" xml:space="preserve">
          <source>The value to use for the &lt;code&gt;--provider&lt;/code&gt; flag is &lt;code&gt;virtualbox&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33c94a339769d1c6236b979dc0a0e482b00bbdc9" translate="yes" xml:space="preserve">
          <source>The value to use for the &lt;code&gt;--provider&lt;/code&gt; flag is &lt;code&gt;vmware_desktop&lt;/code&gt;. For compatibility with older versions of the plugin, &lt;code&gt;vmware_fusion&lt;/code&gt; can be used for VMware Fusion, and &lt;code&gt;vmware_workstation&lt;/code&gt; for VMware Workstation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a10a85c8026f99e1adbd9e237a39b3e514c09812" translate="yes" xml:space="preserve">
          <source>The virtual machine created in VirtualBox can use any configuration you would like, but Vagrant has some hard requirements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e500c5cf699aaa5cbced29a723d3424222030cc1" translate="yes" xml:space="preserve">
          <source>The web application under development will be accessed remotely. This means that if you have any hardcoded asset (images, stylesheets, etc.) URLs such as &lt;code&gt;&amp;lt;img src=&quot;http://127.0.0.1/header.png&quot;&amp;gt;&lt;/code&gt;, then they will not load for people accessing your share.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c40a11b834f4f1e641021d97be329e8b5d0b544e" translate="yes" xml:space="preserve">
          <source>Then run:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9129580feadf64d9b1513fbe6e4dc3b0e63cfd57" translate="yes" xml:space="preserve">
          <source>Then the shell provisioner can be used to configure the ip of the interface:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a161143c7adc3d7b6c1d34bb8dd8ca93161fb6a" translate="yes" xml:space="preserve">
          <source>Then, create the &quot;metadata.json&quot; file necessary for the box, as documented in &lt;a href=&quot;../boxes/format&quot;&gt;basics of the box file format&lt;/a&gt;. The proper provider value to use for the metadata is &quot;hyperv&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9001392d4b81a1a4c8231d913c0b27a4e8bc3952" translate="yes" xml:space="preserve">
          <source>There are a few more configuration options available. These generally do not need to be modified but are available if your Chef Server requires customization of these variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d75cffeed03c8d92c9c4f36131c5881b8eeb014a" translate="yes" xml:space="preserve">
          <source>There are a special category of boxes known as &quot;base boxes.&quot; These boxes contain the bare minimum required for Vagrant to function, are generally not made by repackaging an existing Vagrant environment (hence the &quot;base&quot; in the &quot;base box&quot;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b6371a79709bc256387c24f3cae53432a754140" translate="yes" xml:space="preserve">
          <source>There are also more global NFS options you can set with &lt;code&gt;config.nfs&lt;/code&gt; in the Vagrantfile. These are documented below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba8bdbfed9d4c7645c4c12def4d0f700bfb1a1d2" translate="yes" xml:space="preserve">
          <source>There are no special keys or values in &lt;code&gt;info.json&lt;/code&gt;, and Vagrant will print each key and value on its own line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59e6a10fe1191b49c3a0569b08c473a1306ab679" translate="yes" xml:space="preserve">
          <source>There are some convenience shortcuts for memory and CPU settings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fa0d6a764da4db3772ebaf3726288b20aa2839a" translate="yes" xml:space="preserve">
          <source>There are some gotchas:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f5db6fdb3e26f684a13fcef7bb71fff50399919" translate="yes" xml:space="preserve">
          <source>There are two main methods that need to be implemented: the &lt;code&gt;configure&lt;/code&gt; method and the &lt;code&gt;provision&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c9378847a1063f08ad54a877a92e6fb43d8463b" translate="yes" xml:space="preserve">
          <source>There is a &lt;a href=&quot;https://github.com/hashicorp/vagrant/issues/351#issuecomment-1339640&quot;&gt;VirtualBox bug&lt;/a&gt; related to &lt;code&gt;sendfile&lt;/code&gt; which can result in corrupted or non-updating files. You should deactivate &lt;code&gt;sendfile&lt;/code&gt; in any web servers you may be running.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31a80236869740ff2601fba74125cabc595ca9b5" translate="yes" xml:space="preserve">
          <source>There is also some less structured help available from the experience of other users. These are not official documentation but if you are running into trouble they may help you:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd593d842b38f9aeaec27d7cb5de42f9b1d6be2e" translate="yes" xml:space="preserve">
          <source>There is also the &quot;metadata.json&quot; file used by Vagrant itself. This file contains nothing but the defaults which are documented on the &lt;a href=&quot;../boxes/format&quot;&gt;box format&lt;/a&gt; page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="469373c46bb4a2cb16ba87cace8fa0b028a97493" translate="yes" xml:space="preserve">
          <source>Therefore, to fit into Vagrant's error handling mechanisms, subclass &lt;code&gt;VagrantError&lt;/code&gt; and set a proper message on your exception. To see examples of this, look at Vagrant's &lt;a href=&quot;https://github.com/hashicorp/vagrant/blob/master/lib/vagrant/errors.rb&quot;&gt;built-in errors&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d161fe945f56b1a6a8f79847462087b9364e4e86" translate="yes" xml:space="preserve">
          <source>These additional configuration steps are specific to Windows Server 2008 (WinRM 1.1). For Windows Server 2008 R2, Windows 7 and later versions of Windows you can ignore this section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8004792ccb769e985d36f60b9a899abd31f096e" translate="yes" xml:space="preserve">
          <source>These are the VMX settings the whitelisting applies to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bae96b4a26042ae64e65afd2e50e0b8268a87770" translate="yes" xml:space="preserve">
          <source>These are the only two officially-recommended box sets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c47a771ffa154856f7de298eca0c8e156aaceb5" translate="yes" xml:space="preserve">
          <source>These built-in middleware can be thought of as a standard library for your actions on your provider. The core VirtualBox provider uses these built-in middleware heavily.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d88979e63bee777594296bd050ca63d4042c93b7" translate="yes" xml:space="preserve">
          <source>These machines are generally able to work together or are somehow associated with each other. Here are some use-cases people are using multi-machine environments for today:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3d0f29a4e7b9cbd784c15e9286206d4d24656c2" translate="yes" xml:space="preserve">
          <source>These may be used to control the output of state execution:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4de2d07df23b55a07306f6a40e77d96c94e7e134" translate="yes" xml:space="preserve">
          <source>These only make sense when &lt;code&gt;install_master&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. Not supported on Windows guest machines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62064e87cb9fa765b633d1202b7ed841f206fd09" translate="yes" xml:space="preserve">
          <source>These only make sense when &lt;code&gt;no_minion&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04b12ab6a71538ec47b6cc68e39ed46aade2b1cd" translate="yes" xml:space="preserve">
          <source>These options get passed to the &lt;code&gt;ansible-playbook&lt;/code&gt; command that ships with Ansible, either via command line arguments or environment variables, depending on Ansible own capabilities.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fc8f8a910411d31584246baf3056c368fd86a52" translate="yes" xml:space="preserve">
          <source>These settings are only used if you've set your communicator type to &lt;code&gt;:winrm&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f5aa585bf2a9a27ad5459818257bd2190a334ed" translate="yes" xml:space="preserve">
          <source>These variables take the highest precedence over any other variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4135b2573ab16a92e64ef2838010b16b934c2a9" translate="yes" xml:space="preserve">
          <source>These will run before and after each defined guest in the Vagrantfile.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fc9eb1f7023f5f81627ddd1ce0ab9c8472f13f5" translate="yes" xml:space="preserve">
          <source>Third party programs exist to allow the SSH executable to access Pageant by creating a unix socket for the SSH executable to read. For more information please see &lt;a href=&quot;https://github.com/cuviper/ssh-pageant&quot;&gt;ssh-pageant&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcdcbe6387dfee19fc6b076d438941b56558c415" translate="yes" xml:space="preserve">
          <source>This Gemfile gets &quot;vagrant&quot; for development. This allows you to &lt;code&gt;bundle exec vagrant&lt;/code&gt; to run Vagrant with your plugin already loaded, so that you can test it manually that way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e0afc17b13fb87fdeb3dae42b3ba2e5a9723412" translate="yes" xml:space="preserve">
          <source>This JSON file can be passed directly to &lt;code&gt;vagrant box add&lt;/code&gt; from the local filesystem using a file path or via a URL, and Vagrant will install the proper version of the box. In this case, the value for the &lt;code&gt;url&lt;/code&gt; key in the JSON can also be a file path. If multiple providers are available, Vagrant will ask what provider you want to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd3c7a52b659689112572932571aed5f8a214e55" translate="yes" xml:space="preserve">
          <source>This Vagrantfile will start the official Docker Consul image. However, the associated Vagrant command to &lt;code&gt;docker-exec&lt;/code&gt; into this instance is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a977dc5034f2eda74f15dfb53ea282232aa648ae" translate="yes" xml:space="preserve">
          <source>This adds a box with the given address to Vagrant. The address can be one of three things:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bce03a2ef0aa893aa169b84c7e1599ab1436fc7" translate="yes" xml:space="preserve">
          <source>This avoids a reverse DNS lookup on the connecting SSH client which can take many seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e28414c993feb842462ba829907391ab022efea3" translate="yes" xml:space="preserve">
          <source>This behavior can also be achieved by defining your file provisioner below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6fb9c2aa45692cc961b104c82292470ca8e5ebd" translate="yes" xml:space="preserve">
          <source>This causes &lt;code&gt;echo Hello, World&lt;/code&gt; to be run within the guest machine when provisioners are run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e304e735ea4d91b88e7542564f93312f57715dc7" translate="yes" xml:space="preserve">
          <source>This causes Vagrant to run Chef Apply with the given recipe contents. If you are familiar with Chef, you know this will install the apache2 package from the system package provider.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="098ac55737414489b98af5aec401edd34230f71a" translate="yes" xml:space="preserve">
          <source>This causes Vagrant to run Chef Solo with the &quot;apache&quot; cookbook. The cookbooks by default are looked for in the &quot;cookbooks&quot; directory relative to your project root. The directory structure ends up looking like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ffcda8746779fd4d375a6890b7c2eb7764d9af7" translate="yes" xml:space="preserve">
          <source>This class and the methods that need to be implemented are &lt;a href=&quot;https://github.com/hashicorp/vagrant/blob/master/lib/vagrant/plugin/v2/provider.rb&quot;&gt;very well documented&lt;/a&gt;. The documentation done on the class in the comments should be enough to understand what needs to be done.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="775bfd3f42eb77fbe0d63c87fb76a166535493c9" translate="yes" xml:space="preserve">
          <source>This class and the methods that need to be implemented are &lt;a href=&quot;https://github.com/hashicorp/vagrant/blob/master/lib/vagrant/plugin/v2/provisioner.rb&quot;&gt;very well documented&lt;/a&gt;. The documentation on the class in the comments should be enough to understand what needs to be done.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e6e1da8df8c6d6d6a8e9acfa6b8bccc87d275a8" translate="yes" xml:space="preserve">
          <source>This command accepts optional command-line flags:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82c34cb023b5fa65f19f817b1654675ac1a80447" translate="yes" xml:space="preserve">
          <source>This command creates and configures guest machines according to your &lt;a href=&quot;../vagrantfile/index&quot;&gt;Vagrantfile&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="309c52b6f1bc7a6ce96264ef18ac360fcd76ed29" translate="yes" xml:space="preserve">
          <source>This command forces a re-sync of any &lt;a href=&quot;../synced-folders/rsync&quot;&gt;rsync synced folders&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5820f67caaa3cfd39127f1b2804f92c533f547b0" translate="yes" xml:space="preserve">
          <source>This command installs a license for a proprietary Vagrant plugin, such as the &lt;a href=&quot;../vmware&quot;&gt;VMware Fusion provider&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c148c8b21d9190bb6c907f123bdcf82285f7ef4" translate="yes" xml:space="preserve">
          <source>This command is a great way to quickly test any provisioners, and is especially useful for incremental development of shell scripts, Chef cookbooks, or Puppet modules. You can just make simple modifications to the provisioning scripts on your machine, run a &lt;code&gt;vagrant provision&lt;/code&gt;, and check for the desired results. Rinse and repeat.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d58cdd979c102ffe89547d084720d74380c5fdb" translate="yes" xml:space="preserve">
          <source>This command is the inverse of &lt;code&gt;vagrant snapshot push&lt;/code&gt;: it will restore the pushed state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d18126515cf64d4953302b6ebae4f3e54b48abf4" translate="yes" xml:space="preserve">
          <source>This command is typically &lt;em&gt;much faster&lt;/em&gt; if the machine is halted prior to snapshotting. If this is not an option, or is not ideal, then the deletion can also be done online with most providers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="818762a6a9aedfd072371270a1629d6bc9c91e6b" translate="yes" xml:space="preserve">
          <source>This command is usually required for changes made in the Vagrantfile to take effect. After making any modifications to the Vagrantfile, a &lt;code&gt;reload&lt;/code&gt; should be called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d48efadf0630ba3e1d36ec9643703a91b509c48a" translate="yes" xml:space="preserve">
          <source>This command lists all the boxes that are installed into Vagrant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecf0e5981522d285b4dd583c772be88b266bc948" translate="yes" xml:space="preserve">
          <source>This command removes a box from Vagrant that matches the given name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2990cdeb705bf90a1d311ca9746b2577cef4ae99" translate="yes" xml:space="preserve">
          <source>This command removes old versions of installed boxes. If the box is currently in use vagrant will ask for confirmation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fccb7d5dccfc2ba6b4a35ad25aeae23c489b657a" translate="yes" xml:space="preserve">
          <source>This command repackages the given box and puts it in the current directory so you can redistribute it. The name, provider, and version of the box can be retrieved using &lt;code&gt;vagrant box list&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="139585f27904a957f63c700d8dbb8912b5f7ff59" translate="yes" xml:space="preserve">
          <source>This command restores the named snapshot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="954a3764d7f7e65633ff29258a675c1a0fc6e3ff" translate="yes" xml:space="preserve">
          <source>This command saves a new named snapshot. If this command is used, the &lt;code&gt;push&lt;/code&gt; and &lt;code&gt;pop&lt;/code&gt; subcommands cannot be safely used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1cc6a8d4ad802c6bb664908b3713e070b56596e" translate="yes" xml:space="preserve">
          <source>This command shuts down the running machine Vagrant is managing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f29161ebb7101f478dd9efd35477ad827f480692" translate="yes" xml:space="preserve">
          <source>This command stops the running machine Vagrant is managing and destroys all resources that were created during the machine creation process. After running this command, your computer should be left at a clean state, as if you never created the guest machine in the first place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a5d665412562b2969a91c9b0fe899f979806d12" translate="yes" xml:space="preserve">
          <source>This command tells you the version of Vagrant you have installed as well as the latest version of Vagrant that is currently available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1c08d18cf263d0b49e661305dd3df9661e21129" translate="yes" xml:space="preserve">
          <source>This command tells you whether or not the box you are using in your current Vagrant environment is outdated. If the &lt;code&gt;--global&lt;/code&gt; flag is present, every installed box will be checked for updates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e7e50f143ba4608ad4dc29a31cda72f3a33237f" translate="yes" xml:space="preserve">
          <source>This command updates the box for the current Vagrant environment if there are updates available. The command can also update a specific box (outside of an active Vagrant environment), by specifying the &lt;code&gt;--box&lt;/code&gt; flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="494db807c9bb3ec87e092b9e27b006db6c9d7e63" translate="yes" xml:space="preserve">
          <source>This command validates your &lt;a href=&quot;../vagrantfile/index&quot;&gt;Vagrantfile&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53b81c554f44a6cee8a22258de451fee31f1e615" translate="yes" xml:space="preserve">
          <source>This command watches all local directories of any &lt;a href=&quot;../synced-folders/rsync&quot;&gt;rsync synced folders&lt;/a&gt; and automatically initiates an rsync transfer when changes are detected. This command does not exit until an interrupt is received.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f787704898fb71484813ff17484ecf5dbb7c5fa3" translate="yes" xml:space="preserve">
          <source>This command will delete the named snapshot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98b4c1f2f5edb336672ce0555ed95a54b737e8cd" translate="yes" xml:space="preserve">
          <source>This command will list all the snapshots taken.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="339bfc24dfc129f5bf9a8e7c1033865abd9be405" translate="yes" xml:space="preserve">
          <source>This command will only work if the machines supports PowerShell. Not every environment will support PowerShell. At the moment, only Windows is supported with this command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75cff22a02a9df1d60780e492b593b974893525e" translate="yes" xml:space="preserve">
          <source>This command will tell you the state of all active Vagrant environments on the system for the currently logged in user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc30ba755e74957834542fdba94dc50235902c01" translate="yes" xml:space="preserve">
          <source>This command will validate your Vagrant Cloud token and will print the user who it belongs to. If a token is passed in, it will attempt to validate it instead of the token stored stored on disk.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c663929be81872656a15083113fd332c0857e0f" translate="yes" xml:space="preserve">
          <source>This compatibility layer will remain in Vagrant up to and including Vagrant 2.0. It may still exist after that, but Vagrant's compatibility promise is only for two versions. Seeing that major Vagrant releases take years to develop and release, it is safe to stick with your version 1.0.x Vagrantfile for the time being.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c4b1070eb61d7d6c1460e290dbd1c69daf4c008" translate="yes" xml:space="preserve">
          <source>This configures providers that Vagrant should prefer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab9f753a3d6fa4e22fc346c2244f658bcf0a410f" translate="yes" xml:space="preserve">
          <source>This configures the default provider Vagrant will use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbb23c292b42ed6b8a69df5b8e15af2c220c65c7" translate="yes" xml:space="preserve">
          <source>This configures the template used by &lt;code&gt;vagrant init&lt;/code&gt; when the &lt;code&gt;--template&lt;/code&gt; option is not provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e60020f0a5c3299f48d256d2f5e26c722a2a80a9" translate="yes" xml:space="preserve">
          <source>This documentation page will not go into how to use Ansible or how to write Ansible playbooks, since Ansible is a complete deployment and configuration management system that is beyond the scope of Vagrant documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f867c47917fe5adbdb554150feb8955570fe6e0" translate="yes" xml:space="preserve">
          <source>This environment variable may be set by the Vagrant launcher to help determine the current runtime architecture in use. In general Vagrant will set this value when running on a Windows host using a cygwin or msys based shell. The value the Vagrant launcher may set in this environment variable will not always match the actual architecture of the platform itself. Instead it signifies the detected architecture of the environment it is running within. If this value is set, the Vagrant launcher will not modify it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2591dd51589d7a42b783a1a614c9ea66a196a802" translate="yes" xml:space="preserve">
          <source>This environment variable may be set by the Vagrant launcher to help determine the current runtime platform. In general Vagrant will set this value when running on a Windows host using a cygwin or msys based shell. If this value is set, the Vagrant launcher will not modify it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e562e6e0f17857f6aef38d799c16a2d5647013c" translate="yes" xml:space="preserve">
          <source>This environmental variable is commonly used in scripting environments where a single folder may contain multiple Vagrantfiles representing different configurations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee19ba6bfb420e0c060f81d9a05d32e70beee121" translate="yes" xml:space="preserve">
          <source>This environmental variable is most commonly set when running Vagrant from a scripting environment in order to set the directory that Vagrant sees.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="553fe5f45c3bf79c503057d4b67da993628f5870" translate="yes" xml:space="preserve">
          <source>This example would enable the &lt;code&gt;GuestServiceInterface&lt;/code&gt; (which Vagrant is aware) and &lt;code&gt;CustomVMSRV&lt;/code&gt; (which Vagrant is &lt;em&gt;not&lt;/em&gt; aware) VM integration services.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0310c97787f67bc53483149d70e7e395efbda14f" translate="yes" xml:space="preserve">
          <source>This feature lets you run &lt;code&gt;vagrant&lt;/code&gt; from any directory in your project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86ebd72ab9284d6273df7d1c20bc5a1b43278e50" translate="yes" xml:space="preserve">
          <source>This generally requires extra disk space to store all the contents of the RAM within your guest machine, but the machine no longer consumes the RAM of your host machine or CPU cycles while it is suspended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd058602e0c05038659ad9ee7d4d05f9b0b84a69" translate="yes" xml:space="preserve">
          <source>This has a number of useful use cases: you can test webhooks by exposing your Vagrant environment to the internet, you can show your work to clients, teammates, or managers, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe3e95cb61f6834a1a5dd12e1d27f2553a25c4f2" translate="yes" xml:space="preserve">
          <source>This initializes the current directory to be a Vagrant environment by creating an initial &lt;a href=&quot;../vagrantfile/index&quot;&gt;Vagrantfile&lt;/a&gt; if one does not already exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f487db0f784284cbb96dce6bde546fcb0270618" translate="yes" xml:space="preserve">
          <source>This inner configuration differs among providers, so please read the documentation for your provider of choice to see available configuration options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34d0c48b9cde5730c99b3b780361db045ea54a38" translate="yes" xml:space="preserve">
          <source>This installs a plugin with the given name or file path. If the name is not a path to a file, then the plugin is installed from remote repositories, usually &lt;a href=&quot;https://rubygems.org&quot;&gt;RubyGems&lt;/a&gt;. This command will also update a plugin if it is already installed, but you can also use &lt;code&gt;vagrant plugin update&lt;/code&gt; for that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f24261e8db94de7d678328efac2473f0bac5c8fa" translate="yes" xml:space="preserve">
          <source>This is &lt;strong&gt;important!&lt;/strong&gt;. Many aspects of Vagrant expect the default SSH user to have passwordless sudo configured. This lets Vagrant configure networks, mount synced folders, install software, and more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f37eacd43943948ab155a7278be1c8b7dade18a5" translate="yes" xml:space="preserve">
          <source>This is a command at its simplest form. Of course, the command superclass gives you access to the Vagrant environment and provides some helpers to do common tasks such as command line parsing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04503c0d8c49c04752987b2d021f5d75b51ea4f5" translate="yes" xml:space="preserve">
          <source>This is a complete list of the options that are available for forwarded ports. Only the &lt;code&gt;guest&lt;/code&gt; and &lt;code&gt;host&lt;/code&gt; options are required. Below this section, there are more detailed examples of using these options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb9e0d6b02d2994acbf214d25ca04f348204bd06" translate="yes" xml:space="preserve">
          <source>This is a shorthand for &lt;code&gt;vagrant snapshot save&lt;/code&gt; where you do not need to specify a name. When you call the inverse &lt;code&gt;vagrant snapshot pop&lt;/code&gt;, it will restore the pushed state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b68e0b0c752b0c0aacdf428c6c7ada1508771cd9" translate="yes" xml:space="preserve">
          <source>This is an advanced option and should only be used if you know what you are using, since it can cause the network device to not work at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb4dee0f6835dd996b98c87121c6ef4846ddc44c" translate="yes" xml:space="preserve">
          <source>This is an easy mistake to make, and Vagrant cannot really protect against it, so the best we can do is mention it here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f47b5960b97c6904d17e1c9ee210df9edfedc698" translate="yes" xml:space="preserve">
          <source>This is because the &quot;name&quot; of the VM is &quot;web&quot;, so the command is actually:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfdc037d418129f6ebd4526b7f1c628e2edade85" translate="yes" xml:space="preserve">
          <source>This is done because the actual dependencies and APIs used when defining components are not stable across major Vagrant versions. A command implementation written for Vagrant 2.0 will not be compatible with Vagrant 3.0 and so on. But the &lt;em&gt;definition&lt;/em&gt; is just plain Ruby that must always be forward compatible to future Vagrant versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09c52be5e8903c4364412a95fa684c016cc7a812" translate="yes" xml:space="preserve">
          <source>This is recommended over raw parsing/manipulation of command line flags. The following is an example of parsing command line flags pulled directly from the built-in Vagrant &lt;code&gt;destroy&lt;/code&gt; command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26a9df137b7a4a15ed63bfd542ac47a0dcdaaf34" translate="yes" xml:space="preserve">
          <source>This is similar to how Vagrant 0.x was handled. In practice, Vagrant 0.x only introduced a handful of backwards incompatibilities during the entire development cycle, but the possibility of backwards incompatibilities is made clear so people are not surprised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16fac757722956df543bf25a1f2a3de0a9d15971" translate="yes" xml:space="preserve">
          <source>This is the command used to manage (add, remove, etc.) &lt;a href=&quot;../boxes&quot;&gt;boxes&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a843bd4ae5fe0d653ebdfa385968ea8827a94ccd" translate="yes" xml:space="preserve">
          <source>This is the command used to manage &lt;a href=&quot;../plugins/index&quot;&gt;plugins&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95c7455edbb16555c0851e5b40998ce48cd5bbba" translate="yes" xml:space="preserve">
          <source>This is the command used to manage anything related to &lt;a href=&quot;https://vagrantcloud.com&quot;&gt;Vagrant Cloud&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f7ea229386b735edc7d1f607106fbddb6eee1da" translate="yes" xml:space="preserve">
          <source>This is the command used to manage snapshots with the guest machine. Snapshots record a point-in-time state of a guest machine. You can then quickly restore to this environment. This lets you experiment and try things and quickly restore back to a previous state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d90bed2d48adb7158bd40d619b92340d5ca3311" translate="yes" xml:space="preserve">
          <source>This is the single most important command in Vagrant, since it is how any Vagrant machine is created. Anyone using Vagrant must use this command on a day-to-day basis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e67666ea1f0a16c1661a6467be5c2bf1566a066e" translate="yes" xml:space="preserve">
          <source>This is useful for extra components of your application that it might depend on: databases, queues, etc. Typically, the primary application you are working on is built with a Dockerfile, or via a container with SSH.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fac43f769b78bb4e1d206a68eb3d33928778de8" translate="yes" xml:space="preserve">
          <source>This is useful since &lt;a href=&quot;../boxes&quot;&gt;boxes&lt;/a&gt; typically are not built &lt;em&gt;perfectly&lt;/em&gt; for your use case. Of course, if you want to just use &lt;code&gt;vagrant ssh&lt;/code&gt; and install the software by hand, that works. But by using the provisioning systems built-in to Vagrant, it automates the process so that it is repeatable. Most importantly, it requires no human interaction, so you can &lt;code&gt;vagrant destroy&lt;/code&gt; and &lt;code&gt;vagrant up&lt;/code&gt; and have a fully ready-to-go work environment with a single command. Powerful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99e95ea71f683b2597ecbc932ba721cc578df633" translate="yes" xml:space="preserve">
          <source>This is useful since &lt;a href=&quot;boxes&quot;&gt;boxes&lt;/a&gt; typically are not built &lt;em&gt;perfectly&lt;/em&gt; for your use case. Of course, if you want to just use &lt;code&gt;vagrant ssh&lt;/code&gt; and install the software by hand, that works. But by using the provisioning systems built-in to Vagrant, it automates the process so that it is repeatable. Most importantly, it requires no human interaction, so you can &lt;code&gt;vagrant destroy&lt;/code&gt; and &lt;code&gt;vagrant up&lt;/code&gt; and have a fully ready-to-go work environment with a single command. Powerful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3201d4aacdc69aa4a32814e050bded4c980bcd90" translate="yes" xml:space="preserve">
          <source>This issue has been reported to VMware, but a fix has not been released yet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4d982f75ccd2ae535dc4649c6cae038949cc182" translate="yes" xml:space="preserve">
          <source>This lists all installed plugins and their respective installed versions. If a version constraint was specified for a plugin when installing it, the constraint will be listed as well. Other plugin-specific information may be shown, too.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb0df729ffbe464bf6c9906f3aab47ec4590a213" translate="yes" xml:space="preserve">
          <source>This makes the following commands equivalent:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bece35a18815327cc4afdb1cf8ce297921f9d9f5" translate="yes" xml:space="preserve">
          <source>This merge logic is what you want almost every time. Hence, in the example above, &lt;code&gt;@widgets&lt;/code&gt; is set to &lt;code&gt;UNSET_VALUE&lt;/code&gt;. If we had two Vagrant configuration objects in the same file, then Vagrant would properly merge the follows. The example below shows this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25c4e53a67f289704daf5bd97ede510b41aae71d" translate="yes" xml:space="preserve">
          <source>This mode makes it easy to programmatically execute Vagrant and read data out of it. This output format is protected by our &lt;a href=&quot;../installation/backwards-compatibility&quot;&gt;backwards compatibility&lt;/a&gt; policy. Until Vagrant 2.0 is released, however, the machine readable output may change as we determine more use cases for it. But the backwards compatibility promise should make it safe to write client libraries to parse the output format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91a9041b51ee23e7e18d1f0531688c812de714d4" translate="yes" xml:space="preserve">
          <source>This new provisioner is a middle ground between running a full blown Chef Server and using the limited &lt;a href=&quot;chef_solo&quot;&gt;Chef Solo&lt;/a&gt; provisioner. It runs a local in-memory Chef Server and fakes the validation and client key registration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a871b0d9b53073dc9125a58b9e6978ec3e599ce" translate="yes" xml:space="preserve">
          <source>This normally does not need to be set since Vagrant is fairly intelligent about how to detect the default provider. By setting this, you will force Vagrant to use this provider for any &lt;em&gt;new&lt;/em&gt; Vagrant environments. Existing Vagrant environments will continue to use the provider they came &lt;code&gt;up&lt;/code&gt; with. Once you &lt;code&gt;vagrant destroy&lt;/code&gt; existing environments, this will take effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a927411837ecba61261cb9d6be7f9e1015a64aa4" translate="yes" xml:space="preserve">
          <source>This only has an effect if you do not already use private keys for authentication or if you are relying on the default insecure key. If you do not have to care about security in your project and want to keep using the default insecure key, set this to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3055a682f7902622835f9a6f15ea16151133a963" translate="yes" xml:space="preserve">
          <source>This option has no effect when the &lt;code&gt;inventory_path&lt;/code&gt; option is defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c219bfef2d87fd9c1451ac174709beae4800341" translate="yes" xml:space="preserve">
          <source>This option is disabled by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b2a2a4f5928dc68068bb78c6282de092775a8e0" translate="yes" xml:space="preserve">
          <source>This option is enabled by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="362d7d602e0717e8c078e00fa2527fc729fc695c" translate="yes" xml:space="preserve">
          <source>This option will not affect global box functions like &lt;code&gt;vagrant box update&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dea75c64025ee52908706e1450e5e22fdcc4f42" translate="yes" xml:space="preserve">
          <source>This packages a currently running &lt;em&gt;VirtualBox&lt;/em&gt; or &lt;em&gt;Hyper-V&lt;/em&gt; environment into a re-usable &lt;a href=&quot;../boxes&quot;&gt;box&lt;/a&gt;. This command can only be used with other &lt;a href=&quot;../providers/index&quot;&gt;providers&lt;/a&gt; based on the provider implementation and if the provider supports it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d97d9a73b3eb577848d015172cdca62ec5b5dd9f" translate="yes" xml:space="preserve">
          <source>This page documents how to add new &lt;a href=&quot;../provisioning/index&quot;&gt;provisioners&lt;/a&gt; to Vagrant, allowing Vagrant to automatically install software and configure software using a custom provisioner. Prior to reading this, you should be familiar with the &lt;a href=&quot;development-basics&quot;&gt;plugin development basics&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ac46a5084da5b0790983cb1d1ea368216a83b40" translate="yes" xml:space="preserve">
          <source>This page documents how to add new capabilities for &lt;a href=&quot;guests&quot;&gt;guests&lt;/a&gt; to Vagrant, allowing Vagrant to perform new actions on specific guest operating systems. Prior to reading this, you should be familiar with the &lt;a href=&quot;development-basics&quot;&gt;plugin development basics&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb7c3d71e7db2e4f01ec848a2e0594a832a53116" translate="yes" xml:space="preserve">
          <source>This page documents how to add new capabilities for &lt;a href=&quot;hosts&quot;&gt;hosts&lt;/a&gt; to Vagrant, allowing Vagrant to perform new actions on specific host operating systems. Prior to reading this, you should be familiar with the &lt;a href=&quot;development-basics&quot;&gt;plugin development basics&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3012bf75a53c175f74ea049cbdfcad8693667b21" translate="yes" xml:space="preserve">
          <source>This page documents how to add new commands to Vagrant, invocable via &lt;code&gt;vagrant YOUR-COMMAND&lt;/code&gt;. Prior to reading this, you should be familiar with the &lt;a href=&quot;development-basics&quot;&gt;plugin development basics&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2cd4e483ba50890d621f78e3ff8f782601f9a31" translate="yes" xml:space="preserve">
          <source>This page documents how to add new configuration options to Vagrant, settable with &lt;code&gt;config.YOURKEY&lt;/code&gt; in Vagrantfiles. Prior to reading this, you should be familiar with the &lt;a href=&quot;development-basics&quot;&gt;plugin development basics&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06f2e03fc69866cfc79c139840c402d081cb06c9" translate="yes" xml:space="preserve">
          <source>This page documents how to add new guest OS detection to Vagrant, allowing Vagrant to properly configure new operating systems. Prior to reading this, you should be familiar with the &lt;a href=&quot;development-basics&quot;&gt;plugin development basics&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a67e562d8273b15f8235ee80e0dc0679eccb7bd3" translate="yes" xml:space="preserve">
          <source>This page documents how to add new host OS detection to Vagrant, allowing Vagrant to properly execute host-specific operations on new operating systems. Prior to reading this, you should be familiar with the &lt;a href=&quot;development-basics&quot;&gt;plugin development basics&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b81b4a4158d3758709cf6a9a991b275f41d437c" translate="yes" xml:space="preserve">
          <source>This page documents how to add support for new &lt;a href=&quot;../providers/index&quot;&gt;providers&lt;/a&gt; to Vagrant, allowing Vagrant to run and manage machines powered by a system other than VirtualBox. Prior to reading this, you should be familiar with the &lt;a href=&quot;development-basics&quot;&gt;plugin development basics&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edfccb6e36e81bc84a1692ce26c90f50219cf34d" translate="yes" xml:space="preserve">
          <source>This page documents how to organize the file structure of your plugin and distribute it so that it is installable using &lt;a href=&quot;usage&quot;&gt;standard installation methods&lt;/a&gt;. Prior to reading this, you should be familiar with the &lt;a href=&quot;development-basics&quot;&gt;plugin development basics&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47fe924a3d69e7e070a6a26e2e39320acd4c5f7b" translate="yes" xml:space="preserve">
          <source>This page documents how to upgrade your kernel and keep your guest tools functioning. If you are not planning to upgrade your kernel, then you can safely skip this page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e7163ab4367ea3e1b9141a29f0cb5dbe6d0f85f" translate="yes" xml:space="preserve">
          <source>This page documents the format so that you can create your own base boxes. Note that currently you must make these base boxes by hand. A future release of Vagrant will provide additional mechanisms for automatically creating such images.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c68123c636d68e8192332e96243f459beb6b2d43" translate="yes" xml:space="preserve">
          <source>This page lists some common issues people run into with Vagrant and VirtualBox as well as solutions for those issues.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b95c12d279447fa9f4ccff59433a40bb451ca011" translate="yes" xml:space="preserve">
          <source>This page only documents the specific parts of the &lt;code&gt;ansible&lt;/code&gt; (remote) provisioner. General Ansible concepts like Playbook or Inventory are shortly explained in the &lt;a href=&quot;ansible_intro&quot;&gt;introduction to Ansible and Vagrant&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="509f379676ca075b812bccbe2fb83ddf276ee619" translate="yes" xml:space="preserve">
          <source>This page only documents the specific parts of the &lt;code&gt;ansible_local&lt;/code&gt; provisioner. General Ansible concepts like Playbook or Inventory are shortly explained in the &lt;a href=&quot;ansible_intro&quot;&gt;introduction to Ansible and Vagrant&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3406c6e92002232397f017e6ffdd5a1d9f2c1f8" translate="yes" xml:space="preserve">
          <source>This page tracks some known issues or limitations of the VMware provider. Note that none of these are generally blockers to using the provider, but are good to know.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3a814b81c5f59b9037f43774c64dca005be910c" translate="yes" xml:space="preserve">
          <source>This page will cover how to use versioned boxes. It does &lt;em&gt;not&lt;/em&gt; cover how to update your own custom boxes with versions. That is covered in &lt;a href=&quot;base&quot;&gt;creating a base box&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19e715ace3af05cdb33bae75009c4430fc7c0ff3" translate="yes" xml:space="preserve">
          <source>This page will document some general guidelines for creating base boxes, however, and will link to provider-specific guides for creating base boxes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84d5858ad610dde4f92c5dffa14cf28b38b502c8" translate="yes" xml:space="preserve">
          <source>This parameter can be a path to a JSON or YAML file, or a hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73f8a7862db037e41de60d9af0ca591b8a4c18a3" translate="yes" xml:space="preserve">
          <source>This provider is a drop-in replacement for VirtualBox, meaning that every VirtualBox feature that Vagrant supports is fully functional in VMware as well. However, there are some VMware-specific things such as box formats, configurations, etc. that are documented here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c73931564ac174a77d9f262ecc77921da0a05d80" translate="yes" xml:space="preserve">
          <source>This provider-specific configuration is done within the Vagrantfile in a way that is portable, easy to use, and easy to understand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f77351b410980bf54461dadd4d244c102a2b1a7f" translate="yes" xml:space="preserve">
          <source>This removes all user installed plugin information. All plugin gems, their dependencies, and the &lt;code&gt;plugins.json&lt;/code&gt; file are removed. This command provides a simple mechanism to fully remove all user installed custom plugins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57111ab12b85a4008e3c57d18d73e5cf3d7474ff" translate="yes" xml:space="preserve">
          <source>This resumes a Vagrant managed machine that was previously suspended, perhaps with the &lt;a href=&quot;suspend&quot;&gt;suspend command&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0393bf2a363949b50daea03a2062e2eaa84eb3e9" translate="yes" xml:space="preserve">
          <source>This section covers other information that does not quite fit under the other categories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8cf513a2b55b39318fc13b0753689999efae23f" translate="yes" xml:space="preserve">
          <source>This section documents all the available types that may be outputted with the machine-readable output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8afb81f1169c65a41a52926f9a9bd5712476cb0c" translate="yes" xml:space="preserve">
          <source>This section documents some other things related to the Docker provisioner that are generally useful to know if you are using this provisioner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7a3be7c8c0df69ffe9fe5381db20fd0d6108b50" translate="yes" xml:space="preserve">
          <source>This section documents the actual raw contents of the box file. This is not as useful when creating a base box but can be useful in debugging issues if necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f125f0a55a3fae46829dfa84ca860c36fca137f7" translate="yes" xml:space="preserve">
          <source>This section lists the &lt;em&gt;specific&lt;/em&gt; options for the Ansible (remote) provisioner. In addition to the options listed below, this provisioner supports the &lt;a href=&quot;ansible_common&quot;&gt;&lt;strong&gt;common options&lt;/strong&gt; for both Ansible provisioners&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc2a0d323e330a53b4ff92529d1e78f9ab2f4d90" translate="yes" xml:space="preserve">
          <source>This section lists the &lt;em&gt;specific&lt;/em&gt; options for the Ansible Local provisioner. In addition to the options listed below, this provisioner supports the &lt;a href=&quot;ansible_common&quot;&gt;&lt;strong&gt;common options&lt;/strong&gt; for both Ansible provisioners&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63919eb64783ece644af74e61df8344266e60ea9" translate="yes" xml:space="preserve">
          <source>This section lists the complete set of available options for the Chef Apply provisioner. More detailed examples of how to use the provisioner are available below this section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="749cf3e3d6ff8fb10c73731cd75c5faf586a8103" translate="yes" xml:space="preserve">
          <source>This section lists the complete set of available options for the Chef Solo provisioner. More detailed examples of how to use the provisioner are available below this section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4fc3329069940713fc2ed094ee7eba46d29fbb3" translate="yes" xml:space="preserve">
          <source>This section lists the complete set of available options for the Chef Zero provisioner. More detailed examples of how to use the provisioner are available below this section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4754d6f04b71d4b53e42fec70b458d8572fefbad" translate="yes" xml:space="preserve">
          <source>This section lists the complete set of available options for the Puppet provisioner. More detailed examples of how to use the provisioner are available below this section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a6ff74eed90d9a6b30de87e690440f753fa5ad0" translate="yes" xml:space="preserve">
          <source>This sets up a shared folder for the salt root, and copies the minion file over, then runs &lt;code&gt;state.highstate&lt;/code&gt; on the machine. Your minion file must contain the line &lt;code&gt;file_client: local&lt;/code&gt; in order to work in a masterless setup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e341b913749d608eee891ed93d9670cb1b0df00" translate="yes" xml:space="preserve">
          <source>This setting is an &lt;em&gt;advanced feature&lt;/em&gt; that should not be enabled unless absolutely necessary. It breaks some other features of Vagrant, and is really only exposed for cases where it is absolutely necessary. If you can find a way to not use a pty, that is recommended instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c001cc56a41deb9b69c95d55722f67a0f64e0d7e" translate="yes" xml:space="preserve">
          <source>This specifies the filename of the Vagrantfile that Vagrant searches for. By default, this is &quot;Vagrantfile&quot;. Note that this is &lt;em&gt;not&lt;/em&gt; a file path, but just a filename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a15a5dac87697fa221c6029e6fa608c73511ca54" translate="yes" xml:space="preserve">
          <source>This suspends the guest machine Vagrant is managing, rather than fully &lt;a href=&quot;halt&quot;&gt;shutting it down&lt;/a&gt; or &lt;a href=&quot;destroy&quot;&gt;destroying it&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a786561a2a37e6b89e6abd0fc391269968455778" translate="yes" xml:space="preserve">
          <source>This takes a snapshot and pushes it onto the snapshot stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7294107005d8fb8611cc8d96aa1ac2de745af808" translate="yes" xml:space="preserve">
          <source>This uninstalls the plugin with the given name. Any dependencies of the plugin will also be uninstalled assuming no other plugin needs them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7c0f2abecfbce291760d05163a8238ed9416529" translate="yes" xml:space="preserve">
          <source>This updates the plugins that are installed within Vagrant. If you specified version constraints when installing the plugin, this command will respect those constraints. If you want to change a version constraint, re-install the plugin using &lt;code&gt;vagrant plugin install&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="359daf234c86b9cb1ea9dc0ba19fbfdc9f14bb7e" translate="yes" xml:space="preserve">
          <source>This will &lt;code&gt;docker run&lt;/code&gt; a container with the &quot;rabbitmq&quot; image. Note that Vagrant uses the first parameter (the image name by default) to override any settings used in a previous &lt;code&gt;run&lt;/code&gt; definition. Therefore, if you need to run multiple containers from the same image then you must specify the &lt;code&gt;image&lt;/code&gt; option (documented below) with a unique name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a06444395b156e11ca39eee3c499e4438eda0dd" translate="yes" xml:space="preserve">
          <source>This will SSH into a running Vagrant machine and give you access to a shell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9064b6917a457912dde74cb986d812736100d2c0" translate="yes" xml:space="preserve">
          <source>This will allow accessing port 80 on the guest via port 8080 on the host.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15dc8c71635fae9cbb6f8750b1ec0cb0ed68ec52" translate="yes" xml:space="preserve">
          <source>This will assign that IP to the machine. The entire &lt;code&gt;/64&lt;/code&gt; subnet will be reserved. Please make sure to use the reserved local addresses approved for IPv6.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdcefebbf7910c3d1490462ea6c400928fc1178c" translate="yes" xml:space="preserve">
          <source>This will automatically assign an IP address from the reserved address space. The IP address can be determined by using &lt;code&gt;vagrant ssh&lt;/code&gt; to SSH into the machine and using the appropriate command line tool to find the IP, such as &lt;code&gt;ifconfig&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c18a5933212155be8434f755fb75255032ae70fd" translate="yes" xml:space="preserve">
          <source>This will cause Vagrant to pull the &quot;ubuntu&quot; image from the registry for you automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ecf8f23ab59f5605a15b3326d5fcccc22c0957b" translate="yes" xml:space="preserve">
          <source>This will download and bring up a new VMware Fusion/Workstation virtual machine in Vagrant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac5f3f291bc69ea05e13fce896634dcbcf4c92f6" translate="yes" xml:space="preserve">
          <source>This will enable Vagrant to access the Windows system outside of the WSL and properly interact with Windows executables. This will automatically modify the &lt;code&gt;VAGRANT_HOME&lt;/code&gt; environment variable if it is not already defined, setting it to be within the user's home directory on Windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c5456c4b3bb708eb7dfb6fe20b7d8a4af3549e4" translate="yes" xml:space="preserve">
          <source>This will generate files in &lt;code&gt;exec/&lt;/code&gt;, including &lt;code&gt;vagrant&lt;/code&gt;. You can now specify the full path to the &lt;code&gt;exec/vagrant&lt;/code&gt; anywhere on your operating system:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5a9fb5c2ff165efdab51ae5d5ad65d29eae8079" translate="yes" xml:space="preserve">
          <source>This will log you out if you are logged in. If you are already logged out, this command will do nothing. It is not an error to call this command if you are already logged out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fef1b45e27576d89e0f78a6a91838f5a953661b" translate="yes" xml:space="preserve">
          <source>This will open a PowerShell prompt on the host into a running Vagrant guest machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b50e0d30f09aab606fb51334d0c633e769d8909c" translate="yes" xml:space="preserve">
          <source>This will output valid configuration for an SSH config file to SSH into the running Vagrant machine from &lt;code&gt;ssh&lt;/code&gt; directly (instead of using &lt;code&gt;vagrant ssh&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60e093406a5d1ba0c4a633d091545e56d347d8a9" translate="yes" xml:space="preserve">
          <source>This will prevent Vagrant from displaying a warning to the user as well as disable the VMX settings modifications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="360a869a4e0ffee96933c99ac0873c1d50331312" translate="yes" xml:space="preserve">
          <source>This will start an RDP client for a remote desktop session with the guest. This only works for Vagrant environments that support remote desktop, which is typically only Windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5402bc3dfb259355ca71259cd3818ccbcf15b0ce" translate="yes" xml:space="preserve">
          <source>This will tell you the state of the machines Vagrant is managing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd20162d38e1a5ab0b76f4ede9a6fc2979dfcc78" translate="yes" xml:space="preserve">
          <source>This would result in the following &lt;code&gt;mount&lt;/code&gt; command being executed on the guest:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e910c289e4a13fc335c8c2b6705e63fa8df25c8" translate="yes" xml:space="preserve">
          <source>This would result in the following content in &lt;code&gt;/etc/exports&lt;/code&gt; on the host (note the added &lt;code&gt;async&lt;/code&gt; flag):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e96f3984eaaf637764ee32773288dabcc604bf6b" translate="yes" xml:space="preserve">
          <source>Tips &amp;amp; Tricks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="092da30065f07adb4a08c52dc1aaf646aa06aee4" translate="yes" xml:space="preserve">
          <source>Tips and Tricks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b4f550a365439d78b0a7f70cd85b6c574e432b4" translate="yes" xml:space="preserve">
          <source>To accomplish this, you simply need to include a file named &lt;code&gt;info.json&lt;/code&gt; when creating a &lt;a href=&quot;base&quot;&gt;base box&lt;/a&gt; which is a JSON document containing any and all relevant information that will be displayed to the user when the &lt;code&gt;-i&lt;/code&gt; option is used with &lt;code&gt;vagrant box list&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9954affea85f3465b1a8c70273463f9a9d7425c" translate="yes" xml:space="preserve">
          <source>To assist with common tasks, Vagrant ships with a set of &lt;a href=&quot;https://github.com/hashicorp/vagrant/tree/master/lib/vagrant/action/builtin&quot;&gt;built-in middleware&lt;/a&gt;. Each of the middleware is well commented on the behavior and options for each, and using these built-in middleware is critical to building a well-behaved provider.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a23763bdcb12b31cd35c8b8cccaec4b52430d23f" translate="yes" xml:space="preserve">
          <source>To avoid this, you will need to detach the process from the shell. Please Google to learn how to do this for your shell. One method of doing this is the &lt;code&gt;nohup&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e837f3f73ac57ee2c009996952fd3ba525b0b04f" translate="yes" xml:space="preserve">
          <source>To begin, some minimal installations of operating systems do not even include &lt;code&gt;sudo&lt;/code&gt; by default. Verify that you install &lt;code&gt;sudo&lt;/code&gt; in some way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b48d3ebe66641f61aa0ad2e8a0efc83fc144842a" translate="yes" xml:space="preserve">
          <source>To configure NFS, Vagrant must modify system files on the host. Therefore, at some point during the &lt;code&gt;vagrant up&lt;/code&gt; sequence, you may be prompted for administrative privileges (via the typical &lt;code&gt;sudo&lt;/code&gt; program). These privileges are used to modify &lt;code&gt;/etc/exports&lt;/code&gt; as well as to start and stop the NFS server daemon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5067821868a6b0fdcd2fee87bcae00aa8cd11e80" translate="yes" xml:space="preserve">
          <source>To configure SSH access with the insecure keypair, place the public key into the &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt; file for the &quot;vagrant&quot; user. Note that OpenSSH is very picky about file permissions. Therefore, make sure that &lt;code&gt;~/.ssh&lt;/code&gt; has &lt;code&gt;0700&lt;/code&gt; permissions and the authorized keys file has &lt;code&gt;0600&lt;/code&gt; permissions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b044c47a8695269440319676209d1bea91dc6b8" translate="yes" xml:space="preserve">
          <source>To customize this file, use the &lt;code&gt;post_install_provisioner&lt;/code&gt; shell provisioner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9adbc8a99d1c4ba5c0a8515c3ca7d4b9257a2711" translate="yes" xml:space="preserve">
          <source>To define a non-primary command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26c775d17edf88f1616a0f542fd220d74ec992e6" translate="yes" xml:space="preserve">
          <source>To determine the changes in a specific version of a plugin, refer to the plugin's homepage (usually a GitHub page or similar). It is the plugin author's responsibility to provide a change log if he or she chooses to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da5152c16a5f8a456c934af2f97d5064b1cd9ad4" translate="yes" xml:space="preserve">
          <source>To enable NFS, just add the &lt;code&gt;type: &quot;nfs&quot;&lt;/code&gt; flag onto your synced folder:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b918270f5b5ec08c6ac4750d3f1583bd7eff7c28" translate="yes" xml:space="preserve">
          <source>To enable and configure WinRM you will need to set the WinRM service to auto-start and allow unencrypted basic auth (obviously this is not secure). Run the following commands from a regular Windows command prompt:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="375e5f83917ded8a4d1f3f06924af82434104987" translate="yes" xml:space="preserve">
          <source>To enable detailed logging, set the &lt;code&gt;VAGRANT_LOG&lt;/code&gt; environmental variable to the desired log level name, which is one of &lt;code&gt;debug&lt;/code&gt; (loud), &lt;code&gt;info&lt;/code&gt; (normal), &lt;code&gt;warn&lt;/code&gt; (quiet), and &lt;code&gt;error&lt;/code&gt; (very quiet). When asking for support, please set this to &lt;code&gt;debug&lt;/code&gt;. When troubleshooting your own issues, you should start with &lt;code&gt;info&lt;/code&gt;, which is much quieter, but contains important information about the behavior of Vagrant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="049e2e73a87d756363f2b7e308f318012dab2b34" translate="yes" xml:space="preserve">
          <source>To ensure that the command works properly, you should start &lt;code&gt;rsync-auto&lt;/code&gt; only when the machine is running, and shut it down before any machine state changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3002b2868b21016555947eb46d5147468455c60d" translate="yes" xml:space="preserve">
          <source>To fix this issue, completely shut down all VirtualBox machines and GUIs. Wait a few seconds. Then, launch VirtualBox only with the access level you wish to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa534f730b88668404449c33568aeeb10d8d26dd" translate="yes" xml:space="preserve">
          <source>To get started, create a new &lt;code&gt;Vagrantfile&lt;/code&gt; that points to a VMware box:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bd27afb3126ab18532a354e127b60df936bf3b2" translate="yes" xml:space="preserve">
          <source>To have backward compatibility:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf1497b8e38163daa79630c92c7c2abb1b940e7b" translate="yes" xml:space="preserve">
          <source>To install via the GUI:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33c44d06139ad8c211f44e6c95a86fcc0b0d3bfc" translate="yes" xml:space="preserve">
          <source>To install via the command line:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60911eb7a38d8535ece89931c6b758c3353aac8c" translate="yes" xml:space="preserve">
          <source>To learn how to make your own custom Vagrant providers, read the Vagrant plugin development guide on &lt;a href=&quot;../plugins/providers&quot;&gt;creating custom providers&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdba41bbed700c884d5106198cb7f444d78a78ea" translate="yes" xml:space="preserve">
          <source>To learn more about Ansible, please consult the &lt;a href=&quot;https://docs.ansible.com/&quot;&gt;Ansible Documentation Site&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5edf356f6b4c86eabcaf58c7777fff7bedbd7bb" translate="yes" xml:space="preserve">
          <source>To manually test your plugin during development, use &lt;code&gt;bundle exec vagrant&lt;/code&gt; to execute Vagrant with your plugin loaded (thanks to the Gemfile setup we did earlier).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69a16408185dd79cfce971ce9e1def109c59c4a6" translate="yes" xml:space="preserve">
          <source>To override settings, you must assign a name to your provisioner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f1d11f0726d1a17f0ea815cbd5240ba39074318" translate="yes" xml:space="preserve">
          <source>To package a Hyper-V box, export the virtual machine from the Hyper-V Manager using the &quot;Export&quot; feature. This will create a directory with a structure similar to the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1a321af09a203fe8e644caf0ebed6c314eba769" translate="yes" xml:space="preserve">
          <source>To repeat, &lt;strong&gt;the lazy loading aspect of plugin components is critical&lt;/strong&gt; to the way Vagrant plugins work. All components must be lazily loaded and returned within their definition blocks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01fdedeb4821915f1344184a91e3c7ab3a2fdd18" translate="yes" xml:space="preserve">
          <source>To run Ansible against your Vagrant guest, the basic &lt;code&gt;Vagrantfile&lt;/code&gt; configuration looks like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4f8e38c6219f85d84dd66bdef25e47fb2f2ee2f" translate="yes" xml:space="preserve">
          <source>To run Ansible from your Vagrant guest, the basic &lt;code&gt;Vagrantfile&lt;/code&gt; configuration looks like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d83d2336ee46deafb64067f18b6612d801ce84e2" translate="yes" xml:space="preserve">
          <source>To run a script already available on the guest you can use an inline script to invoke the remote script on the guest.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f21dcf57cf1071a13ade54dc3c08b13362b68a4" translate="yes" xml:space="preserve">
          <source>To setup your project, run &lt;code&gt;bundle gem vagrant-my-plugin&lt;/code&gt;. This will create a &lt;code&gt;vagrant-my-plugin&lt;/code&gt; directory that has the initial layout to be a RubyGem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f56cfa291bbcfcb848019d4ce89c322ce84fe536" translate="yes" xml:space="preserve">
          <source>To specify a default machine, just mark it primary when defining it. Only one primary machine may be specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcc8de9c8d00416178868e378b942dab4b260770" translate="yes" xml:space="preserve">
          <source>To specify a private network as an internal network for VirtualBox use the &lt;code&gt;virtualbox__intnet&lt;/code&gt; option with the network. The &lt;code&gt;virtualbox__&lt;/code&gt; (double underscore) prefix tells Vagrant that this option is only for the VirtualBox provider.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="599a325462d62efb2a0e95dc5c329d5a5da6347d" translate="yes" xml:space="preserve">
          <source>To subclass another guest, specify that guest's name as a second parameter in the guest definition:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b29f362c2671afb5fafefe3cfcccf6d0c2b5f39f" translate="yes" xml:space="preserve">
          <source>To subclass another host, specify that host's name as a second parameter in the host definition:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccea31ae84293f9ceb2f762cac1d5057553623ff" translate="yes" xml:space="preserve">
          <source>To test the box, pretend you are a new user of Vagrant and give it a shot:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87110f01406c4edd1a4aeb186c8ed2ecdcc6cefd" translate="yes" xml:space="preserve">
          <source>To use HTTP sharing, simply run &lt;code&gt;vagrant share&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3881423062912155e972017d9c22407b3aa73912" translate="yes" xml:space="preserve">
          <source>To use the SMB synced folder type on a Windows host, the machine must have PowerShell version 3 or later installed. In addition, when Vagrant attempts to create new SMB shares, or remove existing SMB shares, Administrator privileges will be required. Vagrant will request these privileges using UAC.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc84afa87b7222a18695cd96e20260ad0a99f37f" translate="yes" xml:space="preserve">
          <source>To use the SMB synced folder type on a macOS host, file sharing must be enabled for the local account. Enable SMB file sharing by following the instructions below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="130718b4f039f2b310fd204c2086db2235558908" translate="yes" xml:space="preserve">
          <source>To use the rsync synced folder type, the machine running Vagrant must have &lt;code&gt;rsync&lt;/code&gt; (or &lt;code&gt;rsync.exe&lt;/code&gt;) on the path. This executable is expected to behave like the standard rsync tool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2194480b91e724d60c73a8f36fe0e2be0ab5d3b7" translate="yes" xml:space="preserve">
          <source>To verify the license installation, run:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f398de92986b98f031eb447e9d98ed49120b3d14" translate="yes" xml:space="preserve">
          <source>To view what plugins are installed into your Vagrant environment at any time, use the &lt;code&gt;vagrant plugin list&lt;/code&gt; command. This will list the plugins that are installed along with their version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96e27a610d7a9c828475d2de5351b92fba9a01b9" translate="yes" xml:space="preserve">
          <source>To work around that, you can use &lt;code&gt;ansible.galaxy_command&lt;/code&gt; to prepend the command with &lt;code&gt;sudo&lt;/code&gt;, as illustrated in the example below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d96f51a98733e0b8df8d0f4a8892953f529785fc" translate="yes" xml:space="preserve">
          <source>Today, there are three different components:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="047708b21883d20fa96e13ada1ae6a3f040a4c1c" translate="yes" xml:space="preserve">
          <source>Triggers</source>
          <target state="translated">Triggers</target>
        </trans-unit>
        <trans-unit id="b2bb819d627070346888b8e9dbdebae107170c61" translate="yes" xml:space="preserve">
          <source>Triggers can also be defined to run Ruby, rather than bash or powershell. An example of this might be using a Ruby option to get more information from the &lt;code&gt;VBoxManage&lt;/code&gt; tool. In this case, we are printing the &lt;code&gt;ostype&lt;/code&gt; defined for thte guest after it has been brought up.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08353a8540ef5bb73f13bb770485f9a0f8086443" translate="yes" xml:space="preserve">
          <source>Triggers can also be defined within the scope of guests in a Vagrantfile. These triggers will only run on the configured guest. An example of a guest only trigger:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="625037c01edfe43fdab92f264d50804630ade644" translate="yes" xml:space="preserve">
          <source>Triggers can be defined as a block or hash in a Vagrantfile. The example below will result in the same trigger:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85560c02bf43e84acfb630ddd89155ba8c7973fb" translate="yes" xml:space="preserve">
          <source>Turn off UAC</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="93b9e289e2842469d001eccf7ad5d79f3c302dc9" translate="yes" xml:space="preserve">
          <source>Types</source>
          <target state="translated">Types</target>
        </trans-unit>
        <trans-unit id="58c5d7a6662cc43179d4403fc2be99ee44d0c67d" translate="yes" xml:space="preserve">
          <source>URL directly a box file. In this case, you must specify a &lt;code&gt;--name&lt;/code&gt; flag (see below) and versioning/updates will not work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70ddf9302b5855a10a5d8804a187129187dc603f" translate="yes" xml:space="preserve">
          <source>Ubuntu 12.04 requires some special steps to make networking work. These are reproduced here in case similar steps are needed with other distributions. Without these commands, Ubuntu 12.04 will not report an IP address to Hyper-V:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4513d7fe4d181e19632334f4b97b07a2f88aad52" translate="yes" xml:space="preserve">
          <source>Ubuntu 14.04.2 without secure boot</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ff83fea87126a83d78e059069774e0bfe5dc5df" translate="yes" xml:space="preserve">
          <source>Uninstall using the add/remove programs section of the control panel</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb45a9c3025eaa4734a0cffb97226d387103ffbd" translate="yes" xml:space="preserve">
          <source>Uninstallation</source>
          <target state="translated">Uninstallation</target>
        </trans-unit>
        <trans-unit id="a8f9bd2e37e6dad3c6493c9ad4e9b780e3776ba6" translate="yes" xml:space="preserve">
          <source>Uninstalling Vagrant</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18b297b4ff8b4568466fac4d4ef5f311bfa35001" translate="yes" xml:space="preserve">
          <source>Uninstalling Vagrant is easy and straightforward. You can either uninstall the Vagrant binary, the user data, or both. The sections below cover how to do this on every platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b667db39db85326c8fd311708a23b691b090683" translate="yes" xml:space="preserve">
          <source>Uninstalling a plugin is as easy as installing it. Just use the &lt;code&gt;vagrant plugin uninstall&lt;/code&gt; command and the plugin will be removed. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b64a30ac793d0f150d988446ba0bb95250f5cca" translate="yes" xml:space="preserve">
          <source>Unmanaged machines and undefined groups are not added to the inventory, to avoid useless Ansible errors (e.g. &lt;em&gt;unreachable host&lt;/em&gt; or &lt;em&gt;undefined child group&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ab9f8699c1be5e0d59743cbef88dfb23dc70e6c" translate="yes" xml:space="preserve">
          <source>Unselect Hyper-V and click OK.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2038bdec9210202d0d9d74839e3925ff0cd91ba1" translate="yes" xml:space="preserve">
          <source>Up</source>
          <target state="translated">Up</target>
        </trans-unit>
        <trans-unit id="ec6952e09b9cc6aee90f3110c55ff105e4facbf9" translate="yes" xml:space="preserve">
          <source>Updating</source>
          <target state="translated">Updating</target>
        </trans-unit>
        <trans-unit id="b06666d7e51506b36773184adf1a49661a8dbbf6" translate="yes" xml:space="preserve">
          <source>Updating the Vagrant VMware Desktop plugin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3896166fef7a0a075f021ed87841fe69c6c90d8d" translate="yes" xml:space="preserve">
          <source>Upgrading From Vagrant 1.0.x</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a619abec7b59379739e9b4e0bde7d5d5bc967c33" translate="yes" xml:space="preserve">
          <source>Upgrading Vagrant</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="739fe794b4460c57dea9321b2e33a602e59efb9b" translate="yes" xml:space="preserve">
          <source>Upgrading to v1.x</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="47f907f278dd6034fde9bde901a6f42711e3ae78" translate="yes" xml:space="preserve">
          <source>Use Locally</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fac88f6ecfbb2b83ce68a470b68e9da2b4e6b03f" translate="yes" xml:space="preserve">
          <source>Use the Ruby Resolv library in place of the libc resolver.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89dcdaf64640563622c800f4a6723a7a83839463" translate="yes" xml:space="preserve">
          <source>Use the navigation on the left below the &quot;Plugins&quot; section to learn more about how to use and build your own plugins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dddbc4982462d084c18e4cf132aa89fdb150243a" translate="yes" xml:space="preserve">
          <source>Use the navigation to the left to find a specific Docker topic to read more about.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c54f1169e958ada4d2e8befe4f7c7c48501cfa7" translate="yes" xml:space="preserve">
          <source>Use the navigation to the left to find a specific VMware topic to read more about.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb128643e3f93e4c33692dbae74c41021d5ae9c0" translate="yes" xml:space="preserve">
          <source>Use the navigation to the left to find a specific VirtualBox topic to read more about.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1e887ad301db2838308801456e01403dfd27811" translate="yes" xml:space="preserve">
          <source>Using Docker</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="637611b9503f8bd19ca2ab1ffcafeef88fad5fc5" translate="yes" xml:space="preserve">
          <source>Using Vagrant Machines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f60198c8c76e9b92d8e62dc3b37a045fbe12756" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;../vagrantfile/index&quot;&gt;Vagrantfile&lt;/a&gt;, you can also configure Vagrant to automatically check for updates during any &lt;code&gt;vagrant up&lt;/code&gt;. This is enabled by default, but can easily be disabled with &lt;code&gt;config.vm.box_check_update = false&lt;/code&gt; in your Vagrantfile.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dca947a9b6bff2898b1eb305e6620fc27bd6f7e" translate="yes" xml:space="preserve">
          <source>Using the DHCP Assigned Default Route</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53a269896063c813bdc673ce297b2bc8035e6a7b" translate="yes" xml:space="preserve">
          <source>Using the Raw Vagrant Environment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abc7d13de4858805a9c385231676f20409dc6507" translate="yes" xml:space="preserve">
          <source>Using the multi-machine feature of Vagrant, these environments can be modeled in the context of a single Vagrant environment without losing any of the benefits of Vagrant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b236b40721751142e52249efd51f19f0d047caf" translate="yes" xml:space="preserve">
          <source>Using this method, there are very few cases that Vagrant does not find the correct provider for you. This also allows each &lt;a href=&quot;../vagrantfile/index&quot;&gt;Vagrantfile&lt;/a&gt; to define what providers the development environment is made for by ordering provider configurations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab8d8e6eb370c41d92f34f313bd442d3149686ec" translate="yes" xml:space="preserve">
          <source>Usually, host locale environment variables are passed to guest. It may cause failures if the guest software do not support host locale. One possible solution is override locale in the &lt;code&gt;Vagrantfile&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="682bfff30fa4d1603322b44ba272bbc920b87bf2" translate="yes" xml:space="preserve">
          <source>VBoxManage Customizations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68b168223c1e706022127825ace184007f128caa" translate="yes" xml:space="preserve">
          <source>VM Clone Directory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bd1390d1614aa7962aef95221744e545e6333f5" translate="yes" xml:space="preserve">
          <source>VM Integration Services</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97dcd167d0eebda8393bf51c42af4a716ffce32d" translate="yes" xml:space="preserve">
          <source>VMX Customization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67fd47937d4c0995d98a587c85594f043d263026" translate="yes" xml:space="preserve">
          <source>VMX Whitelisting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a899770276071a91fdf0dcddcdb50019e6808b25" translate="yes" xml:space="preserve">
          <source>VMX customization is done as the final step before the VMware machine is booted, so you have the ability to possibly undo or misconfigure things that Vagrant has set up itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9df625269fcc5577c8ea633a4e4425fbc1863a1c" translate="yes" xml:space="preserve">
          <source>VMX is an undocumented format and there is no official reference for the available keys and values. This customization option is exposed for people who have knowledge of exactly what they want.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33fee39b98989fb6aea1fe4ef3a13396c94e3cf5" translate="yes" xml:space="preserve">
          <source>VMware</source>
          <target state="translated">VMware</target>
        </trans-unit>
        <trans-unit id="b5b424157461e364254500a85d46cc09f0e425df" translate="yes" xml:space="preserve">
          <source>VMware Base Boxes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c121112f32e0eb4464171243bf6098d4da17116" translate="yes" xml:space="preserve">
          <source>VMware Workstation has a bug on Windows where forwarded ports do not work properly. Vagrant actually works around this bug and makes them work. However, if you run the virtual network editor on Windows, the forwarded ports will suddenly stop working.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc56f974b576f93f84de328c288398929828bec8" translate="yes" xml:space="preserve">
          <source>Vagrant</source>
          <target state="translated">Vagrant</target>
        </trans-unit>
        <trans-unit id="11575611750c2fabf370c9a644feeba2c9478875" translate="yes" xml:space="preserve">
          <source>Vagrant 1.1+ provides full backwards compatibility for valid Vagrant 1.0.x Vagrantfiles which do not use plugins. After installing Vagrant 1.1, your 1.0.x environments should continue working without modifications, and existing running machines will continue to be managed properly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32b3f0bc4f66edafdde6df7777760aa13d156ad9" translate="yes" xml:space="preserve">
          <source>Vagrant 1.8 changed SMB mounting to use the more secure credential file mechanism. However, many operating systems ship with an outdated filesystem type for SMB out of the box which does not support this. The above workaround reverts Vagrant to the insecure before, but causes it work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d6bec9eb0a7f5076e95734203777494e49ca538" translate="yes" xml:space="preserve">
          <source>Vagrant 2.0 final will have a stable Vagrantfile format that will remain backwards compatible, just as 1.0 is considered stable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a6145c13bd81c1f56a53a5a9e83056b16f7ee96" translate="yes" xml:space="preserve">
          <source>Vagrant &lt;em&gt;must&lt;/em&gt; be installed within the Linux distribution used with WSL. While the &lt;code&gt;vagrant.exe&lt;/code&gt; executable provided by the Vagrant Windows installation is accessible from within the WSL, it will not function as expected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bac2f3c3df88d440f2dbfcc2d4b551428e526de0" translate="yes" xml:space="preserve">
          <source>Vagrant Connect</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3470978777ba4492019cb251e77155ac8454af6b" translate="yes" xml:space="preserve">
          <source>Vagrant Documentation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b693a28395dee0e53729b7ebac652eebc2cf9e1b" translate="yes" xml:space="preserve">
          <source>Vagrant Installation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7783ba9f9b9e051073020a53d37d8f9d36366325" translate="yes" xml:space="preserve">
          <source>Vagrant Push</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e10bea2bea2a0cc96f30a8f254eab05ba0ca37f7" translate="yes" xml:space="preserve">
          <source>Vagrant Push FTP and SFTP strategy pushes the code in your Vagrant development environment to a remote FTP or SFTP server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fda654e4247fb014221a68c4ca5d88e3c0b3d1e" translate="yes" xml:space="preserve">
          <source>Vagrant Push is the easiest way to deploy your application. You can read more in the documentation links on the sidebar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9353d26464a3691656bea1ac7985b3dd26f5596f" translate="yes" xml:space="preserve">
          <source>Vagrant Settings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25dc3f78f8ae01b2eb4148ba73b438739455303b" translate="yes" xml:space="preserve">
          <source>Vagrant Share</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f717ac7dc1b43a2d52ba998287cd0d45002d9ca4" translate="yes" xml:space="preserve">
          <source>Vagrant Share allows you to share your Vagrant environment with anyone in the world, enabling collaboration directly in your Vagrant environment in almost any network environment with just a single command: &lt;code&gt;vagrant share&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6efa3dc84ed4c49a4edc4e18f4d052f6ad874a5a" translate="yes" xml:space="preserve">
          <source>Vagrant Share can also expose an SSL port that can be accessed over SSL. Creating an HTTPS share requires a non-free ngrok account.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f432d13f5b7972d4948c04feea890334599c53b0" translate="yes" xml:space="preserve">
          <source>Vagrant Share can create a publicly accessible URL endpoint to access an HTTP server running in your Vagrant environment. This is known as &quot;HTTP sharing,&quot; and is enabled by default when &lt;code&gt;vagrant share&lt;/code&gt; is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4be4661a306209466736452a7622bebb13293398" translate="yes" xml:space="preserve">
          <source>Vagrant Share is a Vagrant plugin that must be installed. It is not included with Vagrant system packages. To install the Vagrant Share plugin, run the following command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1e8ffb4b14b1a945ef1e6daffc03773829165a7" translate="yes" xml:space="preserve">
          <source>Vagrant Share requires &lt;a href=&quot;https://ngrok.com&quot;&gt;ngrok&lt;/a&gt; to be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="999192e1760b910db6f60c330ad8f0b8a33d0022" translate="yes" xml:space="preserve">
          <source>Vagrant Triggers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96777b36cadd01c489e347ed99df321f1a381fb0" translate="yes" xml:space="preserve">
          <source>Vagrant Triggers has a few options to define trigger behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d264e3f7d1e920bc13f59f4aac47b2c6ac20a249" translate="yes" xml:space="preserve">
          <source>Vagrant Up</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f42098f6333f736d3ce412343f09796cf628f69" translate="yes" xml:space="preserve">
          <source>Vagrant Usage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fca0d236ff64841c3c883442a1cd0fa4a8eb4d2" translate="yes" xml:space="preserve">
          <source>Vagrant VMware Utility Access</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31522d7572b740c404b421ad640434d73d160afe" translate="yes" xml:space="preserve">
          <source>Vagrant VMware Utility Installation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81d5828f74e80eb9196b6c7d158a10d5b682155b" translate="yes" xml:space="preserve">
          <source>Vagrant VMware Utility Service</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eac07c9a1f567e59150d083fa85bbaf5feb2891e" translate="yes" xml:space="preserve">
          <source>Vagrant also supports a form of inheritance for guests, since sometimes operating systems stem from a common root. A good example of this is Linux is the root of Debian, which further is the root of Ubuntu in many cases. Inheritance allows guests to share a lot of common behavior while allowing distro-specific overrides.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="142e20f79fb069094b963b9fa45aa1a14875d986" translate="yes" xml:space="preserve">
          <source>Vagrant also supports a form of inheritance for hosts, since sometimes operating systems stem from a common root. A good example of this is Linux is the root of Debian, which further is the root of Ubuntu in many cases. Inheritance allows hosts to share a lot of common behavior while allowing distro-specific overrides.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1b9f544dcc21c6ea3ef16b3bd8f77c8351000a1" translate="yes" xml:space="preserve">
          <source>Vagrant also supports provisioning with &lt;a href=&quot;https://docs.chef.io/roles.html&quot;&gt;Chef roles&lt;/a&gt;. This is done by specifying a path to a roles folder where roles are defined and by adding roles to your run list:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e52445a1a9cd79eaa3ed4e08d7fe0caee59f4fee" translate="yes" xml:space="preserve">
          <source>Vagrant also supports provisioning with &lt;a href=&quot;https://docs.puppetlabs.com/guides/modules.html&quot;&gt;Puppet modules&lt;/a&gt;. This is done by specifying a path to a modules folder where modules are located. The manifest file is still used as an entry-point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edd0cb4dc7e7fe2cf3e13dae72e5b69577c5faed" translate="yes" xml:space="preserve">
          <source>Vagrant and Windows Subsystem for Linux</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5c70124f625496648f4495b15575d2883ac3cf5" translate="yes" xml:space="preserve">
          <source>Vagrant attempts to find the default provider in the following order:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="172ea51bed96b81f6e028d162a57235c511c2920" translate="yes" xml:space="preserve">
          <source>Vagrant boxes are all provider-specific. A box for VirtualBox is incompatible with the VMware Fusion provider, or any other provider. A box must be installed for each provider, and can share the same name as other boxes as long as the providers differ. So you can have both a VirtualBox and VMware Fusion &quot;precise64&quot; box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c317199c146da5455cb4bddf957221f11729f59" translate="yes" xml:space="preserve">
          <source>Vagrant can also automatically build and run images based on a local Dockerfile. This is useful for iterating on an application locally that is built into an image later. An example is shown below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5542a9b70b6b813653cc27114f18111fc53fd902" translate="yes" xml:space="preserve">
          <source>Vagrant can not and does not automatically download the updated box and update the machine because boxes can be relatively large and updating the machine requires destroying it and recreating it, which can cause important data to be lost. Therefore, this process is manual to the extent that the user has to manually enter a command to do it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0a1da8fdd0352322423467688495a7d738211fa" translate="yes" xml:space="preserve">
          <source>Vagrant can optionally use the Ruby Resolv library in place of the libc resolver. This can be disabled setting this environment variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34132e8796e0d13446db7ef083df705da6ce0ef7" translate="yes" xml:space="preserve">
          <source>Vagrant can share any or &lt;em&gt;every&lt;/em&gt; port to your Vagrant environment, not just SSH and HTTP. The &lt;code&gt;vagrant connect&lt;/code&gt; command gives the connecting person a static IP they can use to communicate to the shared Vagrant environment. Any TCP traffic sent to this IP is sent to the shared Vagrant environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aef1db35f83f38a5c9e3c1ef1339fbcb1f144a78" translate="yes" xml:space="preserve">
          <source>Vagrant can use &lt;a href=&quot;https://en.wikipedia.org/wiki/Rsync&quot;&gt;rsync&lt;/a&gt; as a mechanism to sync a folder to the guest machine. This synced folder type is useful primarily in situations where other synced folder mechanisms are not available, such as when NFS or VirtualBox shared folders are not available in the guest machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c55fd199ae946c943639eb618a3cce3b82905308" translate="yes" xml:space="preserve">
          <source>Vagrant can use &lt;a href=&quot;https://en.wikipedia.org/wiki/Server_Message_Block&quot;&gt;SMB&lt;/a&gt; as a mechanism to create a bi-directional synced folder between the host machine and the Vagrant machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c913103af1209722ceaf6613b0ae2f4973fc6d7" translate="yes" xml:space="preserve">
          <source>Vagrant comes with many great features out of the box to get your environments up and running. Sometimes, however, you want to change the way Vagrant does something or add additional functionality to Vagrant. This can be done via Vagrant &lt;em&gt;plugins&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="070777a8f3f7992b3e85353f40d3f9b90ce23c7e" translate="yes" xml:space="preserve">
          <source>Vagrant comes with support out of the box for &lt;a href=&quot;https://en.wikipedia.org/wiki/Hyper-V&quot;&gt;Hyper-V&lt;/a&gt;, a native hypervisor written by Microsoft. Hyper-V is available by default for almost all Windows 8.1 and later installs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c3911dbe2f6c95cf85bc91f4d933be8255e91e6" translate="yes" xml:space="preserve">
          <source>Vagrant comes with support out of the box for &lt;a href=&quot;https://www.virtualbox.org&quot;&gt;VirtualBox&lt;/a&gt;, a free, cross-platform consumer virtualization product.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed193a7d32e8a88c8956d1742820b61365017f11" translate="yes" xml:space="preserve">
          <source>Vagrant comes with support out of the box for using Docker as a provider. This allows for your development environments to be backed by Docker containers rather than virtual machines. Additionally, it provides for a good workflow for developing Dockerfiles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="762df6b1c48690af8984cd3b193739416f717e9f" translate="yes" xml:space="preserve">
          <source>Vagrant core requests specific actions from your provider through the &lt;code&gt;action&lt;/code&gt; method on your provider class. The full list of actions requested is listed in the comments of that method on the superclass. If your provider does not implement a certain action, then Vagrant core will show a friendly error, so do not worry if you miss any, things will not explode or crash spectacularly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07c400ec0c379689161ffc3af72899b19fe960e4" translate="yes" xml:space="preserve">
          <source>Vagrant currently restricts you to bringing up one provider per machine. If you have a multi-machine environment, you can bring up one machine backed by VirtualBox and another backed by VMware Fusion, for example, but you cannot back the &lt;em&gt;same machine&lt;/em&gt; with both VirtualBox and VMware Fusion. This is a limitation that will be removed in a future version of Vagrant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f71f554398ed31b04476d9ce95eb4b03440a660" translate="yes" xml:space="preserve">
          <source>Vagrant detects where your HTTP server is running in your Vagrant environment and outputs the endpoint that can be used to access this share. Just give this URL to anyone you want to share it with, and they will be able to access your Vagrant environment!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efe344ab716c1094b5852500e9e2defaa4116990" translate="yes" xml:space="preserve">
          <source>Vagrant does not actually use or expect any root password. However, having a generally well known root password makes it easier for the general public to modify the machine if needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="399ee97df038fb822f7b14f4a867d2ca891edebb" translate="yes" xml:space="preserve">
          <source>Vagrant does not automatically prune old versions because it does not know if they might be in use by other Vagrant environments. Because boxes can be large, you may want to actively prune them once in a while using &lt;code&gt;vagrant box remove&lt;/code&gt;. You can see all the boxes that are installed using &lt;code&gt;vagrant box list&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1170967e2926c363aacd21bf251d11a30c7b36f4" translate="yes" xml:space="preserve">
          <source>Vagrant does not yet know how to create and configure new networks for Hyper-V. When launching a machine with Hyper-V, Vagrant will prompt you asking what virtual switch you want to connect the virtual machine to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf7f108121dd189ae219567cd18c44857d166051" translate="yes" xml:space="preserve">
          <source>Vagrant does occasional network calls to check whether the version of Vagrant that is running locally is up to date. We understand that software making remote calls over the internet for any reason can be undesirable. To suppress these calls, set the environment variable &lt;code&gt;VAGRANT_CHECKPOINT_DISABLE&lt;/code&gt; to any non-empty value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52c679d43e766e7be7e28010ba49c30334204347" translate="yes" xml:space="preserve">
          <source>Vagrant exposes a way to call any command against VBoxManage just prior to booting the machine:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="140e19d4a896943c47d760eaee6d74e40ab8ab17" translate="yes" xml:space="preserve">
          <source>Vagrant forwarded ports allow you to access a port on your host machine and have all data forwarded to a port on the guest machine, over either TCP or UDP.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="600dde277b98269fb019efb28fb2224465306da5" translate="yes" xml:space="preserve">
          <source>Vagrant gives you multiple options for provisioning the machine, from simple shell scripts to more complex, industry-standard configuration management systems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd7aaf38204a2779346c8b8c9c6f8bc31952d9a7" translate="yes" xml:space="preserve">
          <source>Vagrant has a set of environmental variables that can be used to configure and control it in a global way. This page lists those environmental variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80db44b9044a5069df1e7c838b3746f30bbf4d25" translate="yes" xml:space="preserve">
          <source>Vagrant has many features that requires doing guest OS-specific actions, such as mounting folders, configuring networks, etc. These tasks vary from operating system to operating system. If you find that one of these does not work for your operating system, then maybe the guest implementation is incomplete or incorrect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27076385e4c8155762475d3966141cf0e429a7cf" translate="yes" xml:space="preserve">
          <source>Vagrant has some features that require host OS-specific actions, such as exporting NFS folders. These tasks vary from operating system to operating system. Vagrant uses host detection as well as &lt;a href=&quot;host-capabilities&quot;&gt;host capabilities&lt;/a&gt; to perform these host OS-specific operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6a4d39d84192d40e24c1d609c0dc7983ce9fc7d" translate="yes" xml:space="preserve">
          <source>Vagrant includes a simple way to package VirtualBox base boxes. Once you've installed all the software you want to install, you can run this command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05bed77f67a339394b1867835e4c6786addd0ac8" translate="yes" xml:space="preserve">
          <source>Vagrant is able to define and control multiple guest machines per Vagrantfile. This is known as a &quot;multi-machine&quot; environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38539faeed448315c96773d2731c6d1d031ad9ab" translate="yes" xml:space="preserve">
          <source>Vagrant is designed to provision &lt;a href=&quot;../multi-machine&quot;&gt;multi-machine environments&lt;/a&gt; in sequence, but the following configuration pattern can be used to take advantage of Ansible parallelism:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de7f8e835a5a8bb8d2d0f47a6b2f90f88136c6a9" translate="yes" xml:space="preserve">
          <source>Vagrant is meant to run with one Vagrantfile per project, and the Vagrantfile is supposed to be committed to version control. This allows other developers involved in the project to check out the code, run &lt;code&gt;vagrant up&lt;/code&gt;, and be on their way. Vagrantfiles are portable across every platform Vagrant supports.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edb5bb007dea6a93ed5da94ba1c05fee32ba7c64" translate="yes" xml:space="preserve">
          <source>Vagrant may fail to properly initialize user installed custom plugins. This can be caused my improper plugin installation/removal, or by manual manipulation of plugin related files like the &lt;code&gt;plugins.json&lt;/code&gt; data file. Vagrant can attempt to automatically repair the problem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f18ea34bf55aae5e89aff9d0284776456f02ca4" translate="yes" xml:space="preserve">
          <source>Vagrant now automatically detects what provider a box is for. This is visible when listing boxes. Vagrant puts the provider in parentheses next to the name, as can be seen below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1babe9b253e2349efda00f3dcf32ba4bc9371e8b" translate="yes" xml:space="preserve">
          <source>Vagrant offers multiple options for how you are able to connect your guest machines to the network, but there is a standard usage pattern as well as some points common to all network configurations that are important to know.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44e835833bb3dd8f2180f7cd4097e1877348d57e" translate="yes" xml:space="preserve">
          <source>Vagrant plugins are configured based on current environment. If plugins are installed using Vagrant from source, they will not work from the package based Vagrant installation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a444b8805d0fdd82a860b5a51abd4cad2aeb4341" translate="yes" xml:space="preserve">
          <source>Vagrant private networks allow you to access your guest machine by some address that is not publicly accessible from the global internet. In general, this means your machine gets an address in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Private_network#Private_IPv4_address_spaces&quot;&gt;private address space&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09b033cce1e4504daf0b53485078104dd211716c" translate="yes" xml:space="preserve">
          <source>Vagrant public networks are less private than private networks, and the exact meaning actually varies from &lt;a href=&quot;../providers/index&quot;&gt;provider to provider&lt;/a&gt;, hence the ambiguous definition. The idea is that while &lt;a href=&quot;private_network&quot;&gt;private networks&lt;/a&gt; should never allow the general public access to your machine, public networks can.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b200668947054d5535820b71ffcf11d6b56cbb75" translate="yes" xml:space="preserve">
          <source>Vagrant share has three primary modes or features. These features are not mutually exclusive, meaning that any combination of them can be active at any given time:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e760c20e83ddd6b540517c9d2ea9d7098e41e99" translate="yes" xml:space="preserve">
          <source>Vagrant share makes it trivially easy to allow remote SSH access to your Vagrant environment by supplying the &lt;code&gt;--ssh&lt;/code&gt; flag to &lt;code&gt;vagrant share&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2abc4986f5b40ae8ed34cc69b008a74b493f57b4" translate="yes" xml:space="preserve">
          <source>Vagrant share uses end-to-end TLS for non-HTTP connections. So even unencrypted TCP streams are encrypted through the various proxies and only unencrypted during the final local communication between the local proxy and the Vagrant environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81c889a66937c0dc9a85f87813723ae59ca3d0b8" translate="yes" xml:space="preserve">
          <source>Vagrant supports &lt;a href=&quot;../providers/configuration&quot;&gt;provider-specific configuration&lt;/a&gt;, allowing for users to finely tune and control specific providers from Vagrantfiles. It is easy for your custom provider to expose custom configuration as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e64e1facee3a952a6549bc49cffb300099582599" translate="yes" xml:space="preserve">
          <source>Vagrant supports parallelizing some actions, such as &lt;code&gt;vagrant up&lt;/code&gt;, if the provider explicitly supports it. By default, Vagrant will not parallelize a provider.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65eed049317d249ba00bcaba64b9621e3af0913d" translate="yes" xml:space="preserve">
          <source>Vagrant upgrades during the 1.x release series are straightforward:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33c9060e534f36e50dffca3419e561839fb18299" translate="yes" xml:space="preserve">
          <source>Vagrant version requirements should be specified at the top of a Vagrantfile with the &lt;code&gt;Vagrant.require_version&lt;/code&gt; helper:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f85f9e9275d5f492285c6328548dea7ca0b5c0ca" translate="yes" xml:space="preserve">
          <source>Vagrant will append the contents of this variable to the default user agent header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebc3765adc7785dacb518930f107548afdf6b21c" translate="yes" xml:space="preserve">
          <source>Vagrant will attempt to use the local SSH client installed on the host machine. On POSIX machines, an SSH client must be installed and available on the PATH.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04290381d3c8baceb99b969c8ad389887d501374" translate="yes" xml:space="preserve">
          <source>Vagrant will default to using a system provided &lt;code&gt;ssh&lt;/code&gt; on Windows. This environment variable can also be used to disable that behavior to force Vagrant to use the embedded &lt;code&gt;ssh&lt;/code&gt; executable by setting it to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2cdff1a42c29718e13237440bc64d8b27752d1f" translate="yes" xml:space="preserve">
          <source>Vagrant will detect when it is being run within the WSL and adjust how it locates and executes third party executables. For example, when using the VirtualBox provider Vagrant will interact with VirtualBox installed on the Windows system, not within the WSL. It is important to ensure that any required Windows executable is available within your &lt;code&gt;PATH&lt;/code&gt; to allow Vagrant to access them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3f6aa25dc8042d4e5f2a664ed1c3fe1cdd4dbd0" translate="yes" xml:space="preserve">
          <source>Vagrant will error if the specified compatibility mode is incompatible with the current Ansible version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b64b70db764a59d7893907f408be28683286151e" translate="yes" xml:space="preserve">
          <source>Vagrant will first attempt to gracefully shut down the machine by running the guest OS shutdown mechanism. If this fails, or if the &lt;code&gt;--force&lt;/code&gt; flag is specified, Vagrant will effectively just shut off power to the machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39376d78907cdbdb7a816447b0b24960822c8c4a" translate="yes" xml:space="preserve">
          <source>Vagrant will go through all installed provider plugins (including the ones that come with Vagrant), and find the first plugin that reports it is usable. There is a priority system here: systems that are known better have a higher priority than systems that are worse. For example, if you have the VMware provider installed, it will always take priority over VirtualBox.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1428bded45ba04279e028a263e61c1b083e2773" translate="yes" xml:space="preserve">
          <source>Vagrant will go through all of the &lt;code&gt;config.vm.provider&lt;/code&gt; calls in the Vagrantfile and try each in order. It will choose the first provider that is usable. For example, if you configure Hyper-V, it will never be chosen on Mac this way. It must be both configured and usable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2719abd814a7110f924c67dec5cba46e29dfb51d" translate="yes" xml:space="preserve">
          <source>Vagrant will not display the warning about disabling the core trigger feature if the community plugin is installed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="458fe4e708a40eb56374a25332c154852b4a191f" translate="yes" xml:space="preserve">
          <source>Vagrant will not display warning when &lt;code&gt;vagrant-winrm&lt;/code&gt; plugin is installed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="435fc754b02366b706a3afce6d93250d727d9204" translate="yes" xml:space="preserve">
          <source>Vagrant will now warn if a whitelisted setting is detected within a Vagrant box VMX file. If it is detected, a warning will be shown alerting the user and providing a configuration snippet. The configuration snippet can be used in the Vagrantfile if Vagrant fails to start the virtual machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2fc6203059efed1560582cf470f498df7928fb6" translate="yes" xml:space="preserve">
          <source>Vagrant will spin up a single instance of a host VM and run multiple containers on this one VM. This means that with the Docker provider, you only have the overhead of one virtual machine, and only if it is absolutely necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20df97fb4943eafd8f5ec5469ee429e853dd2336" translate="yes" xml:space="preserve">
          <source>Vagrant will ssh into this instance without the instance name:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98c437c12a45cd85301872f23e6431ddb556d133" translate="yes" xml:space="preserve">
          <source>Vagrant will try to install (or upgrade) Ansible when one of these conditions are met:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfd43176624444fac5b09ac8c2c75e8f20b22099" translate="yes" xml:space="preserve">
          <source>Vagrant will use a default timeout when checking for the installed version of PowerShell. Occasionally the default can be too low and Vagrant will report being unable to detect the installed version of PowerShell. This environment variable can be used to extend the timeout used during PowerShell version detection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8d975c5fd7e831a644c754846ea8008581e9b3f" translate="yes" xml:space="preserve">
          <source>Vagrant works by loading &lt;a href=&quot;../vagrantfile/index#load-order&quot;&gt;multiple Vagrantfiles and merging them&lt;/a&gt;. This merge logic is built-in to configuration classes. When merging two configuration objects, we will call them &quot;old&quot; and &quot;new&quot;, it'll by default take all the instance variables defined on &quot;new&quot; that are not &lt;code&gt;UNSET_VALUE&lt;/code&gt; and set them onto the merged result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b4c5aea8677b4d567381b4eff4d7d64acbf7c0f" translate="yes" xml:space="preserve">
          <source>Vagrant would generate the following inventory file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="880a33829d0929ef6c5bb535e6f72195c0d9b644" translate="yes" xml:space="preserve">
          <source>Vagrantfile</source>
          <target state="translated">Vagrantfile</target>
        </trans-unit>
        <trans-unit id="e244caf54ffd7e391dfcc5ce7cd241a55b41ff5c" translate="yes" xml:space="preserve">
          <source>Vagrantfile Changes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfb74eb05c7f3abf87ee9009ed884a9a7d5db266" translate="yes" xml:space="preserve">
          <source>Vagrantfile from the project directory. This is the Vagrantfile that you will be modifying most of the time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d23c74ef365c7c21ee828f9c0c85360d7b174de" translate="yes" xml:space="preserve">
          <source>Vagrantfile in your Vagrant home directory (defaults to &lt;code&gt;~/.vagrant.d&lt;/code&gt;). This lets you specify some defaults for your system user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f923c5895c1283cdd157b1764974bb12c86160ef" translate="yes" xml:space="preserve">
          <source>Vagrantfile packaged with the &lt;a href=&quot;../boxes&quot;&gt;box&lt;/a&gt; that is to be used for a given machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6752f198b56479cfb32b98d51047e89e96433119" translate="yes" xml:space="preserve">
          <source>Validate</source>
          <target state="translated">Validate</target>
        </trans-unit>
        <trans-unit id="dd74d182c641e4c78502d863b44d0aeff1575e54" translate="yes" xml:space="preserve">
          <source>Validation</source>
          <target state="translated">Validation</target>
        </trans-unit>
        <trans-unit id="2da600bf9404843107a9531694f654e5662959e0" translate="yes" xml:space="preserve">
          <source>Version</source>
          <target state="translated">Version</target>
        </trans-unit>
        <trans-unit id="224b3e69d2026b5a0057503a55e63ded7bb0836c" translate="yes" xml:space="preserve">
          <source>Version Constraints</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a100dc475d8973fb23b2e39631ca0334594d6ef" translate="yes" xml:space="preserve">
          <source>Viewing Versions and Updating</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3f399c7b545ec25f2545fccae9e49d6452088cf" translate="yes" xml:space="preserve">
          <source>Viewing the &lt;a href=&quot;https://github.com/mitchellh/vagrant-aws/blob/master/lib/vagrant-aws/provider.rb&quot;&gt;AWS provider class&lt;/a&gt; as well as the &lt;a href=&quot;https://github.com/mitchellh/vagrant-aws&quot;&gt;overall structure of the plugin&lt;/a&gt; is recommended as a strong getting started point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20983738e303f426d9a074698140cbc674d3f9ec" translate="yes" xml:space="preserve">
          <source>Virtual Machine</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2903d603f8a65b2ffaa0e793e83d9609200b1aeb" translate="yes" xml:space="preserve">
          <source>Virtual Machine Name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb837c2918c14957ebf249f5eb0de4adb9ee6f1c" translate="yes" xml:space="preserve">
          <source>VirtualBox</source>
          <target state="translated">VirtualBox</target>
        </trans-unit>
        <trans-unit id="2cde59e86a4514b1fa924860dd0f25a2a5094eb0" translate="yes" xml:space="preserve">
          <source>VirtualBox Base Boxes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="913c9cb6ff00aa8d0cc207f230457888bb95da74" translate="yes" xml:space="preserve">
          <source>VirtualBox Guest Additions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5867a217e8625124a84967e9130e54731f56585b" translate="yes" xml:space="preserve">
          <source>VirtualBox Internal Network</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7bd178f1404426c64ee4b7e81ff6b6c3542755b" translate="yes" xml:space="preserve">
          <source>VirtualBox NIC Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9e8b4c0d6eb7819c0ddea4fe3d57a41f004778f" translate="yes" xml:space="preserve">
          <source>VirtualBox must be installed on its own prior to using the provider, or the provider will display an error message asking you to install it. VirtualBox can be installed by &lt;a href=&quot;https://www.virtualbox.org/wiki/Downloads&quot;&gt;downloading&lt;/a&gt; a package or installer for your operating system and using standard procedures to install that package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79d76f055c14051ff43853e11d5287ecbfe7c0d9" translate="yes" xml:space="preserve">
          <source>Volume Consistency</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac7e0adc86b117aaa878da3ad2bd72552dcea734" translate="yes" xml:space="preserve">
          <source>Watch the installation output carefully. Even if HGFS (synced folders) support failed to build, the installer will output that installing VMware tools was successful. Read the output to find any error messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9820cefa6a117bcf716f42deb2764f373d214a7e" translate="yes" xml:space="preserve">
          <source>We strongly recommend using &lt;a href=&quot;https://www.packer.io&quot;&gt;Packer&lt;/a&gt; to create reproducible builds for your base boxes, as well as automating the builds. Read more about &lt;a href=&quot;https://www.packer.io/guides/packer-on-cicd/build-image-in-cicd.html&quot;&gt;automating Vagrant box creation with Packer&lt;/a&gt; in the Packer documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4550b8e6ab2707cefc1196f2d916fedd297bb070" translate="yes" xml:space="preserve">
          <source>Welcome to the documentation for Vagrant - the command line utility for managing the lifecycle of virtual machines. This website aims to document every feature of Vagrant from top-to-bottom, covering as much detail as possible. If you are just getting started with Vagrant, it is highly recommended that you start with the &lt;a href=&quot;https://www.vagrantup.com/intro/getting-started/index.html&quot;&gt;getting started guide&lt;/a&gt; first, and then return to this page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7de3295649285d00deadf353403fba11b5c2f68" translate="yes" xml:space="preserve">
          <source>What follows is a basic Vagrantfile that will get salt working on a single minion, without a master:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09414aab71bcc07f6b5e2b24c5e5a7c8c323b803" translate="yes" xml:space="preserve">
          <source>What's in a Base Box?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a5485f7e30f0f779ce4c90efa62eb1bf469fe72" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;vagrant provision&lt;/code&gt; is used on a running environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c787201f696adf410c45f481e2a419cce2839767" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;vagrant reload --provision&lt;/code&gt; is called. The &lt;code&gt;--provision&lt;/code&gt; flag must be present to force provisioning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08991400a16af5a981a79aa20f9682692fc33f82" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;vagrant up --provider=docker&lt;/code&gt; is run, this will bring up the image &lt;code&gt;foo/bar&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f22baf0f9633bd0cffca30f4f89b23fa9306811d" translate="yes" xml:space="preserve">
          <source>When DHCP is used, the IP can be determined by using &lt;code&gt;vagrant ssh&lt;/code&gt; to SSH into the machine and using the appropriate command line tool to find the IP, such as &lt;code&gt;ifconfig&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13088298e045202467fbb3f4919bbc7795fea5f6" translate="yes" xml:space="preserve">
          <source>When Provisioning Happens</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="783aa09e634808b6a58de3eea2f1551a587588bd" translate="yes" xml:space="preserve">
          <source>When SSH sharing is enabled, Vagrant generates a brand new keypair for SSH access. The public key portion is automatically inserted into the Vagrant machine, and the private key portion is provided to the user connecting to the Vagrant share. This private key is encrypted using a password that you will be prompted for. This password is &lt;em&gt;never&lt;/em&gt; transmitted across the network by Vagrant, and is an extra layer of security preventing anyone who may know your share name from easily accessing your machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b884516bf776b387ee129263550c8d5d275cae9" translate="yes" xml:space="preserve">
          <source>When Vagrant applies port forwarding rules while bring up a guest instance, other running VMware VMs may experience a loss of network connectivity. The cause of this connectivity issue is the restarting of the VMware NAT service to apply new port forwarding rules. Since new rules cannot be applied to the NAT service while it is running, it is required to restart the service, which results in the loss of connectivity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d86f392196106aa6cb9cd339367fc3bc8b68669" translate="yes" xml:space="preserve">
          <source>When Vagrant attempts to create new SMB shares, or remove existing SMB shares, root access will be required. Vagrant will request these privileges using &lt;code&gt;sudo&lt;/code&gt; to run the &lt;code&gt;/usr/sbin/sharing&lt;/code&gt; command. Adding the following to the system's &lt;code&gt;sudoers&lt;/code&gt; configuration will allow Vagrant to manage SMB shares without requiring a password each time:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dfb31aba081ec4c4f825e8c3b8508c022f1c19f" translate="yes" xml:space="preserve">
          <source>When Vagrant boots a box and detects the insecure keypair, it will automatically replace it with a randomly generated keypair for additional security while the box is running.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="075ca6249e4b0285b4776e8b981a6c738cc140db" translate="yes" xml:space="preserve">
          <source>When Windows access is enabled Vagrant will automatically adjust &lt;code&gt;VAGRANT_HOME&lt;/code&gt; to be located on the Windows host. This is required to ensure &lt;code&gt;VAGRANT_HOME&lt;/code&gt; is located on a DrvFs file system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54cfce7e25fe220064c94a2f1e994de52ab31da7" translate="yes" xml:space="preserve">
          <source>When an Ansible version is defined (e.g. &lt;code&gt;&quot;2.1.6.0&quot;&lt;/code&gt;), the Ansible provisioner will be executed only if Ansible is installed at the requested version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65b86334801618ea38b48be7a4e5b5f804d90349" translate="yes" xml:space="preserve">
          <source>When authoring a plugin, simply call &lt;code&gt;super&lt;/code&gt; in your initialize function to setup these instance variables:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcd2b57a11927d439fbe5cce4d30ae6b112c29f7" translate="yes" xml:space="preserve">
          <source>When bringing up a VMware backed machine, Vagrant copies all of the contents in the box into a privately managed &quot;vmwarevm&quot; folder, and uses the first &quot;vmx&quot; file found to control the machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="094a24cad11f8f901596291ad87a32c8c691add8" translate="yes" xml:space="preserve">
          <source>When bringing up a VirtualBox backed machine, Vagrant &lt;a href=&quot;https://www.virtualbox.org/manual/ch08.html#vboxmanage-import&quot;&gt;imports&lt;/a&gt; the &quot;box.ovf&quot; file found in the box contents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8d2acc7624c0f5ae6207025f1b2973cfc3af651" translate="yes" xml:space="preserve">
          <source>When creating a Vagrant box, you can supply additional information that might be relevant to the user when running &lt;code&gt;vagrant box list -i&lt;/code&gt;. For example, you could package your box to include information about the author of the box and a website for users to learn more:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d954efdc5f93b04825352b0cdb8a71de1247bebe" translate="yes" xml:space="preserve">
          <source>When creating a base box, make sure the user will have enough disk space to do interesting things, without being annoying. For example, in VirtualBox, you should create a dynamically resizing drive with a large maximum size. This causes the actual footprint of the drive to be small initially, but to dynamically grow towards the max size as disk space is needed, providing the most flexibility for the end user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1801aec29a083a77ea1daa58f31716c2d2ee3338" translate="yes" xml:space="preserve">
          <source>When detecting operating systems with &lt;code&gt;detect?&lt;/code&gt;, Vagrant always does a depth-first search by searching the children operating systems before checking their parents. Therefore, it is guaranteed in the above example that the &lt;code&gt;detect?&lt;/code&gt; method on &quot;ubuntu&quot; will be called before &quot;debian.&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d4d18a3c25e1f4a937e6fba4eda00755642ae43" translate="yes" xml:space="preserve">
          <source>When loading Vagrantfiles, Vagrant uses the proper configuration object for each version, and properly merges them, just like any other configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a76522a7b534b54a01ccaa8468544eacb7b2096e" translate="yes" xml:space="preserve">
          <source>When parallelization is enabled, multiple &lt;a href=&quot;#actions&quot;&gt;actions&lt;/a&gt; may be run in parallel. Therefore, providers must be certain that their action stacks are thread-safe. The core of Vagrant itself (such as box collections, SSH, etc.) is thread-safe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63272ed682fe36ac6b1c45ea996685d57c4bbf2d" translate="yes" xml:space="preserve">
          <source>When pty is enabled, it is important to note that command output will &lt;em&gt;not&lt;/em&gt; be streamed to the UI. Instead, the output will be delivered in full to the UI once the command has completed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e444a778382a969d9371bca896f80486d16e0d1" translate="yes" xml:space="preserve">
          <source>When running &lt;code&gt;vagrant up&lt;/code&gt; with the settings above, Vagrant will automatically start the &quot;web&quot; and &quot;db&quot; machines, but will not start the &quot;db_follower&quot; machine. You can manually force the &quot;db_follower&quot; machine to start by running &lt;code&gt;vagrant up db_follower&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cef0ae79ed0f0ca17599e5b07e2b582efddb04e4" translate="yes" xml:space="preserve">
          <source>When setting this environment variable, its value will be in seconds. By default, it will use 30 seconds as a timeout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc385250a09a73807221bd71b3ce694074604805" translate="yes" xml:space="preserve">
          <source>When shipping an Ansible configuration file it is good to know that:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bde38a15bae40ce5e758a08389b704c08f866261" translate="yes" xml:space="preserve">
          <source>When the application is ready to be deployed to the FTP server, just run a single command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="491f44a8fd1964ea1e47a2cb1ce348c527d8869b" translate="yes" xml:space="preserve">
          <source>When this is enabled, Vagrant will check for updates on every &lt;code&gt;vagrant up&lt;/code&gt;, not just when the machine is being created from scratch, but also when it is resuming, starting after being halted, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e5673ef95f4862d55b7b08f10287b210401c198" translate="yes" xml:space="preserve">
          <source>When this option is set to &lt;code&gt;&quot;latest&quot;&lt;/code&gt;, no version check is applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="061896d9de76a07af9223f96b2381f0250e5aadb" translate="yes" xml:space="preserve">
          <source>When upgrading Vagrant it may be required to reinstall plugins due to an internal incompatibility. The expunge command can help make that process easier by attempting to automatically reinstall currently configured plugins:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3fa32d00a3b9249941c3e0f38390d016275e3c9" translate="yes" xml:space="preserve">
          <source>When using Ansible, it needs to know on which machines a given playbook should run. It does this by way of an &lt;a href=&quot;https://docs.ansible.com/intro_inventory.html&quot;&gt;inventory&lt;/a&gt; file which lists those machines. In the context of Vagrant, there are two ways to approach working with inventory files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e3d7b626311035c735ac62368531b23913c3454" translate="yes" xml:space="preserve">
          <source>When using Docker, Vagrant automatically converts synced folders and networking options into Docker volumes and forwarded ports. You do not have to use the Docker-specific configurations to do this. This helps keep your Vagrantfile similar to how it has always looked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb9f913c0d0b7f911a31e4066a35cba0777ccbfe" translate="yes" xml:space="preserve">
          <source>When using NFSv4, ensure the &lt;code&gt;nfs_udp&lt;/code&gt; option is set to false. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf87660ff1a25f6d9c95c031d70006398f8835c5" translate="yes" xml:space="preserve">
          <source>When using features such as &lt;a href=&quot;../multi-machine/index&quot;&gt;multi-machine&lt;/a&gt; or &lt;a href=&quot;../providers/configuration&quot;&gt;provider-specific overrides&lt;/a&gt;, you may want to define common provisioners in the global configuration scope of a Vagrantfile, but override certain aspects of them internally. Vagrant allows you to do this, but has some details to consider.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3edcaaa5f04446aec88eea81d88042ba7f5ae881" translate="yes" xml:space="preserve">
          <source>When using these scopes, order of execution for things such as provisioners becomes important. Vagrant enforces ordering outside-in, in the order listed in the Vagrantfile. For example, with the Vagrantfile below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88c21e0b945a2ca67d496c79d2489829ec6b781e" translate="yes" xml:space="preserve">
          <source>When using these support channels, it is generally helpful to include debugging logs along with any error reports. These logs can often help you troubleshoot any problems you may be having.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28da7ce1913965eb4787cbe00345925825dd9514" translate="yes" xml:space="preserve">
          <source>When using this configuration class, it looks like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75e04553b6b5a6c8d842f421357ac1aa57116949" translate="yes" xml:space="preserve">
          <source>When you add a box, Vagrant unpacks it and stores it internally. The original &lt;code&gt;*.box&lt;/code&gt; file is not preserved. This command is useful for reclaiming a &lt;code&gt;*.box&lt;/code&gt; file from an installed Vagrant box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ad9564e516a77b7857fac5ba00e4a836662484a" translate="yes" xml:space="preserve">
          <source>When you provision your Vagrant virtual machine with Chef Server, it creates a new Chef &quot;node&quot; entry and Chef &quot;client&quot; entry on the Chef Server, using the hostname of the machine. After you tear down your guest machine, Vagrant can be configured to do it automatically with the following settings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59f95c899fe2c68b73a154916487fffb75044554" translate="yes" xml:space="preserve">
          <source>When you run any &lt;code&gt;vagrant&lt;/code&gt; command, Vagrant climbs up the directory tree looking for the first Vagrantfile it can find, starting first in the current directory. So if you run &lt;code&gt;vagrant&lt;/code&gt; in &lt;code&gt;/home/mitchellh/projects/foo&lt;/code&gt;, it will search the following paths in order for a Vagrantfile, until it finds one:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28e9230a1ab0d76676f19f267d57b44cef285607" translate="yes" xml:space="preserve">
          <source>When you want to manually test your plugin, use &lt;code&gt;bundle exec vagrant&lt;/code&gt; in order to run Vagrant with your plugin loaded (as we specified in the Gemfile).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff516b6381f677195d99ac483fb6e895d74c7d93" translate="yes" xml:space="preserve">
          <source>When you want to switch back to the official Vagrant version, simply remove the symlink.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba0e4117aa08dae1a90331d0010956c9f511cbf2" translate="yes" xml:space="preserve">
          <source>Where &quot;my-virtual-machine&quot; is replaced by the name of the virtual machine in VirtualBox to package as a base box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8703b8d15969d6a3bb9d43b861c6ce04dc4501c" translate="yes" xml:space="preserve">
          <source>Where the above IP address is one set in your Vagrantfile:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5919a914f162a0275ef1ee0052cf42101d5f3ea7" translate="yes" xml:space="preserve">
          <source>While Vagrant VMware Desktop provider is a drop-in replacement for VirtualBox, there are some additional features that are exposed that allow you to more finely configure VMware-specific aspects of your machines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8f74dbe24e0db9b155ecfe95768f406b1492a0a" translate="yes" xml:space="preserve">
          <source>While Vagrant offers multiple options for how you are able to provision your machine, there is a standard usage pattern as well as some important points common to all provisioners that are important to know.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39f92debef0cd0d51528b3c09b29ead788a148e4" translate="yes" xml:space="preserve">
          <source>While Vagrant ships out of the box with support for &lt;a href=&quot;https://www.virtualbox.org&quot;&gt;VirtualBox&lt;/a&gt;, &lt;a href=&quot;https://www.microsoft.com/hyper-v&quot;&gt;Hyper-V&lt;/a&gt;, and &lt;a href=&quot;https://www.docker.io&quot;&gt;Docker&lt;/a&gt;, Vagrant has the ability to manage other types of machines as well. This is done by using other &lt;em&gt;providers&lt;/em&gt; with Vagrant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62fb001349f4007b324a93c3089873174f704bc3" translate="yes" xml:space="preserve">
          <source>While hopefully you are sharing with someone you trust, in certain environments you might be sharing with a class, or a conference, and you do not want them to be able to SSH in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b4fd58cf5bdf234bdd59de99ee1bd6709a21dab" translate="yes" xml:space="preserve">
          <source>While internal aliases can be used to define more intuitive Vagrant commands, external command aliases are used to define Vagrant commands with brand new functionality. These aliases are prefixed with the &lt;code&gt;!&lt;/code&gt; character, which indicates to the interpreter that the alias should be executed as a shell command. For example, let's say that you want to be able to view the processor and memory utilization of the active project's virtual machine. To do this, you could define a &lt;code&gt;vagrant metrics&lt;/code&gt; command that returns the required information in an easy-to-read format, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3baff603f995633cbab52c0049e8ce0b729f11d" translate="yes" xml:space="preserve">
          <source>While the file provisioner does support trailing slashes or &quot;globing&quot;, this can lead to some confusing results due to the underlying tool used to copy files and folders between the host and guests. For example, if you have a source and destination with a trailing slash defined below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8503d8cd86976aac44804e01789b65f56a9a905" translate="yes" xml:space="preserve">
          <source>While we plan on it in the future, Vagrant still does not install Chef or Puppet automatically when using those provisioners. Users can use a shell provisioner to do this, but if you want Chef/Puppet to just work out of the box, you will have to install them in the base box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99f1a984fdef48aa61ad5468067089572857d221" translate="yes" xml:space="preserve">
          <source>While well-behaved Vagrant providers should work with any Vagrantfile with sane defaults, providers generally expose unique configuration options so that you can get the most out of each provider.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7931e9377d3cd89411e1f4c46be93205cd162660" translate="yes" xml:space="preserve">
          <source>While you can choose any IP you would like, you &lt;em&gt;should&lt;/em&gt; use an IP from the &lt;a href=&quot;https://en.wikipedia.org/wiki/Private_network#Private_IPv4_address_spaces&quot;&gt;reserved private address space&lt;/a&gt;. These IPs are guaranteed to never be publicly routable, and most routers actually block traffic from going to them from the outside world.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7306d145a6c383d863674fb4ab4343973d50a05a" translate="yes" xml:space="preserve">
          <source>WinRM Settings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82560d3cc45a9e631540031904e28380bbe74dba" translate="yes" xml:space="preserve">
          <source>WinSSH</source>
          <target state="translated">WinSSH</target>
        </trans-unit>
        <trans-unit id="0bb2f21fc0525533a8ec9758bebda81a616d25bf" translate="yes" xml:space="preserve">
          <source>WinSSH Settings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26d9c28d789c254f71ea99a3463b99a7ccc2f4fa" translate="yes" xml:space="preserve">
          <source>Windows</source>
          <target state="translated">Windows</target>
        </trans-unit>
        <trans-unit id="a3563a21ef4fce1dc0706fe54be2a98cb7a03024" translate="yes" xml:space="preserve">
          <source>Windows Access</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ff8dfb62945dcaebf83a4e5f8d198e70932becb" translate="yes" xml:space="preserve">
          <source>Windows Boxes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cef8330ebf7de96fa473bda98ef5d319cff9747" translate="yes" xml:space="preserve">
          <source>Windows Host</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="781e4f5fbf3604722a41c8f2d48dd007382f9c63" translate="yes" xml:space="preserve">
          <source>Windows Server 2003 and Windows XP are &lt;em&gt;not&lt;/em&gt; supported, but if you are a die hard XP fan &lt;a href=&quot;https://stackoverflow.com/a/18593425/18475&quot;&gt;this&lt;/a&gt; may help you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1add6d4d6ea2e87bce1bbd31fa294c7e9ea09e02" translate="yes" xml:space="preserve">
          <source>Windows, VirtualBox, and Hyper-V</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f1a060f684f64372f22f378d931551acddff687" translate="yes" xml:space="preserve">
          <source>Windows: &lt;a href=&quot;https://omnitruck.chef.io/install.ps1&quot;&gt;https://omnitruck.chef.io/install.ps1&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49f1b7e36febe75fc071f59f8990b2bc1a4366a7" translate="yes" xml:space="preserve">
          <source>With a custom inventory, the private key must be specified (e.g. via an &lt;code&gt;ansible.cfg&lt;/code&gt; configuration file, &lt;code&gt;--private-key&lt;/code&gt; argument, or as part of your inventory file):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3aa2d6490cafc6704825a7b14d876f7bc538911" translate="yes" xml:space="preserve">
          <source>With auto-generated inventory:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ec20f705f4e7c7d94942bdcbd80952e92b70af9" translate="yes" xml:space="preserve">
          <source>With multiple provisioners, use the &lt;code&gt;--provision-with&lt;/code&gt; setting along with names to get more fine grained control over what is run and when.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77395a9cf0061ec530d24f98b0c2c5adaa8e6221" translate="yes" xml:space="preserve">
          <source>With some providers, it is possible to specify a list of adapters to bridge against:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2d9d6a14bce86be780996855dfe0c677e63be1a" translate="yes" xml:space="preserve">
          <source>With the &lt;a href=&quot;ansible_common#inventory_path&quot;&gt;&lt;code&gt;inventory_path&lt;/code&gt;&lt;/a&gt; option, you can reference a specific inventory resource (e.g. a static inventory file, a &lt;a href=&quot;https://docs.ansible.com/intro_dynamic_inventory.html&quot;&gt;dynamic inventory script&lt;/a&gt; or even &lt;a href=&quot;https://docs.ansible.com/intro_dynamic_inventory.html#using-multiple-inventory-sources&quot;&gt;multiple inventories stored in the same directory&lt;/a&gt;). Vagrant will then use this inventory information instead of generating it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd4fb761f3afc132bf54ed65b3fe83e7090bb922" translate="yes" xml:space="preserve">
          <source>With the above component, the &quot;ubuntu&quot; guest inherits from &quot;debian.&quot; When a capability is looked up for &quot;ubuntu&quot;, all capabilities from &quot;debian&quot; are also available, and any capabilities in &quot;ubuntu&quot; override parent capabilities.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="058f45b9f886262a2ee51c1b367b75974883dfdd" translate="yes" xml:space="preserve">
          <source>With the above component, the &quot;ubuntu&quot; host inherits from &quot;debian.&quot; When a capability is looked up for &quot;ubuntu&quot;, all capabilities from &quot;debian&quot; are also available, and any capabilities in &quot;ubuntu&quot; override parent capabilities.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c49575e1ee7613bb739d88f11635f7e89defe86" translate="yes" xml:space="preserve">
          <source>With the following configuration pattern, you can install and execute Ansible only on a single guest machine (the &lt;code&gt;&quot;controller&quot;&lt;/code&gt;) to provision all your machines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7190d1a074ca138fbfc54cbdfcfcd2679194a258" translate="yes" xml:space="preserve">
          <source>With this configuration example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="349c87b5c1f6961d1c5d24200e8a01caee33a825" translate="yes" xml:space="preserve">
          <source>With this configuration, Vagrant will install &lt;code&gt;pip&lt;/code&gt; and then execute the command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cd6ea50d47528d9025d942ed94427688c5c74ab" translate="yes" xml:space="preserve">
          <source>Within each Vagrantfile, you may specify multiple &lt;code&gt;Vagrant.configure&lt;/code&gt; blocks. All configurations will be merged within a single Vagrantfile in the order they're defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a512a77d0b2ab8e3b7ae9b64812115333014c3ed" translate="yes" xml:space="preserve">
          <source>Within the archive, Vagrant does expect a single file: &lt;code&gt;metadata.json&lt;/code&gt;. This is a JSON file that is completely unrelated to the above box catalog metadata component; there is only one &lt;code&gt;metadata.json&lt;/code&gt; per box file (inside the box file), whereas one catalog metadata JSON document can describe multiple versions of the same box, potentially spanning multiple providers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="692840b6a98229d54379e88df565297e7b1c9684" translate="yes" xml:space="preserve">
          <source>Within the context of a plugin definition, guest capabilities can be defined like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e464f4d09a1ecb232835cf5633655a779055c7d0" translate="yes" xml:space="preserve">
          <source>Within the context of a plugin definition, new commands can be defined like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef808c2a57ff3f8d8fabdeb6dd883a1a269110a6" translate="yes" xml:space="preserve">
          <source>Within the context of a plugin definition, new configuration keys can be defined like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3953e37e42e5d8163fb0846591fbd18a8b7d5b27" translate="yes" xml:space="preserve">
          <source>Within the context of a plugin definition, new guests can be defined like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b331323cbd0eb0e6e2f263a1ae1740cb0943a26" translate="yes" xml:space="preserve">
          <source>Within the context of a plugin definition, new hosts can be defined like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f0b1820f6b0a7bc941dab24bcf8f8d278534b9c" translate="yes" xml:space="preserve">
          <source>Within the context of a plugin definition, new providers are defined like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aba46b648d06598d8ea7836ff70d47abcaf3bd63" translate="yes" xml:space="preserve">
          <source>Within the context of a plugin definition, new provisioners can be defined like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d359ba62be672986b6375439c5fa9f1dbdf0ec61" translate="yes" xml:space="preserve">
          <source>Within the definition, a plugin advertises what components it adds to Vagrant. An example is shown below where a command and provisioner are added:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="656204d8d4d1e69b670bd5574947a56b126ec1bb" translate="yes" xml:space="preserve">
          <source>Within the format, if data contains a comma, it is replaced with &lt;code&gt;%!(VAGRANT_COMMA)&lt;/code&gt;. This was preferred over an escape character such as \' because it is more friendly to tools like awk.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7a4acdaa676113d36145da649a78f7b6eac3933" translate="yes" xml:space="preserve">
          <source>Work-In-Progress</source>
          <target state="translated">Work-In-Progress</target>
        </trans-unit>
        <trans-unit id="79d3ef5734ccb5c78ddb3a9a7e06440503707efc" translate="yes" xml:space="preserve">
          <source>Working within the WSL provides a layer of isolation from the actual Windows system. In most cases Vagrant will need access to the actual Windows system to function correctly. As most Vagrant providers will need to be installed on Windows directly (not within the WSL) Vagrant will require Windows access. Access to the Windows system is controlled via an environment variable: &lt;code&gt;VAGRANT_WSL_ENABLE_WINDOWS_ACCESS&lt;/code&gt;. If this environment variable is set, Vagrant will access the Windows system to run executables and enable things like synced folders. When running in a bash shell within WSL, the environment variable can be setup like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1996c079b69c7e020dbf7eb8634b9fa2a43ac018" translate="yes" xml:space="preserve">
          <source>You are telling vagrant to upload &lt;code&gt;~/pathfolder&lt;/code&gt; under the remote dir &lt;code&gt;/remote/newlocation&lt;/code&gt;, which will look like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e39ccc9eb295bfa5c028da5e294df0f2f62406b6" translate="yes" xml:space="preserve">
          <source>You can also bring up your environment and explicitly &lt;em&gt;not&lt;/em&gt; run provisioners by specifying &lt;code&gt;--no-provision&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd9e1e50c6c27890d1b69ad8574f7a0e605999e7" translate="yes" xml:space="preserve">
          <source>You can also define &lt;em&gt;non-primary commands&lt;/em&gt;. These commands do not show up in the &lt;code&gt;vagrant -h&lt;/code&gt; output. They only show up if the user explicitly does a &lt;code&gt;vagrant list-commands&lt;/code&gt; which shows the full listing of available commands. This is useful for highly specific commands or plugins that a beginner to Vagrant would not be using anyways. Vagrant itself uses non-primary commands to expose some internal functions, as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8381ae1ebecc10b297b351fe2d5f0496d33ea0c7" translate="yes" xml:space="preserve">
          <source>You can also disable it by going through the Windows system settings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87da8e4f5be4a4e7b8675a41daaf70687d0b8220" translate="yes" xml:space="preserve">
          <source>You can also get the debug level output using the &lt;code&gt;--debug&lt;/code&gt; command line option. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d98249afe0502c8ca13a959470de48c1e3709cf" translate="yes" xml:space="preserve">
          <source>You can also modify the prefix length by changing the &lt;code&gt;netmask&lt;/code&gt; option (defaults to 64):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e2875d9386fb51c3da94ed70a3dccf2b3dcf37b" translate="yes" xml:space="preserve">
          <source>You can also set &lt;code&gt;run:&lt;/code&gt; to &lt;code&gt;&quot;never&quot;&lt;/code&gt; if you have an optional provisioner that you want to mention to the user in a &quot;post up message&quot; or that requires some other configuration before it is possible, then call this with &lt;code&gt;vagrant provision --provision-with bootstrap&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e8e0d1e1a87c0931cd5d61315efdb5d5d85c77a" translate="yes" xml:space="preserve">
          <source>You can also specify a &lt;em&gt;primary machine&lt;/em&gt;. The primary machine will be the default machine used when a specific machine in a multi-machine environment is not specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a84713089cfd797220d4dfb552ba298166a5d7ad" translate="yes" xml:space="preserve">
          <source>You can also specify a manifests path that is on the remote machine already, perhaps put in place by a shell provisioner. In this case, Vagrant will not attempt to upload the manifests directory. To specify a remote manifests path, use the following syntax:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2908a829925d2ec01a9abc3bc30880fdbe985b2" translate="yes" xml:space="preserve">
          <source>You can also specify a static IP address for the machine. This lets you access the Vagrant managed machine using a static, known IP. The Vagrantfile for a static IP looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2948b9d2a6983b744f33174706c5cc0548448196" translate="yes" xml:space="preserve">
          <source>You can also specify arguments as an array if you do not want to worry about quoting:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25788a665d82eab1134e44ac7c04e64941beabba" translate="yes" xml:space="preserve">
          <source>You can also tweak the arguments specified in the &lt;code&gt;/etc/exports&lt;/code&gt; template when the mount is added, by using the OS-specific &lt;code&gt;linux__nfs_options&lt;/code&gt; or &lt;code&gt;bsd__nfs_options&lt;/code&gt; keys. Note that these options completely override the default arguments that are added by Vagrant automatically. For example, to make the NFS share asynchronous:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5f837085af4dfd6417633019f25dae17e297fdf" translate="yes" xml:space="preserve">
          <source>You can always force a resync with the &lt;a href=&quot;rsync&quot;&gt;rsync&lt;/a&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b85c789231a818cb264824eeae4cd1804eaee7c3" translate="yes" xml:space="preserve">
          <source>You can change the starting directory where Vagrant looks for a Vagrantfile by setting the &lt;code&gt;VAGRANT_CWD&lt;/code&gt; environmental variable to some other path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cf136ba2742a89ef4c69e33f9eb71dcd33cc972" translate="yes" xml:space="preserve">
          <source>You can check if the box you are using is outdated with &lt;code&gt;vagrant box outdated&lt;/code&gt;. This can check if the box in your current Vagrant environment is outdated as well as any other box installed on the system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="099e116f901854c15453f63ec4c5b130275972a1" translate="yes" xml:space="preserve">
          <source>You can choose to handle versions however you see fit. However, many boxes in the public catalog follow &lt;a href=&quot;http://semver.org/&quot;&gt;semantic versioning&lt;/a&gt;. Basically, only the first number (the &quot;major version&quot;) breaks backwards compatibility. In terms of Vagrant boxes, this means that any software that runs in version &quot;1.1.5&quot; of a box should work in &quot;1.2&quot; and &quot;1.4.5&quot; and so on, but &quot;2.0&quot; might introduce big changes that break your software. By following this convention, the best constraint is &lt;code&gt;~&amp;gt; 1.0&lt;/code&gt; because you know it is safe no matter what version is in that range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="502ce6f4e729f02cfc3cb1acabb2b79d0d817d28" translate="yes" xml:space="preserve">
          <source>You can constrain a Vagrant environment to a specific version or versions of a box using the &lt;a href=&quot;../vagrantfile/index&quot;&gt;Vagrantfile&lt;/a&gt; by specifying the &lt;code&gt;config.vm.box_version&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a0c1c17a6835f47b710b25d3056beae76eab682" translate="yes" xml:space="preserve">
          <source>You can customize the name that appears in the VirtualBox GUI by setting the &lt;code&gt;name&lt;/code&gt; property. By default, Vagrant sets it to the containing folder of the Vagrantfile plus a timestamp of when the machine was created. By setting another name, your VM can be more easily identified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4fa2128af6a0d42e8a54df2250a99086f14f8a4" translate="yes" xml:space="preserve">
          <source>You can define allowed port range assignable by Vagrant when port collision is detected via &lt;a href=&quot;../vagrantfile/machine_settings&quot;&gt;config.vm.usable_port_range&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="024938074f794d981494d3503dc4fd9c9e2fec77" translate="yes" xml:space="preserve">
          <source>You can distribute the box file however you would like. However, if you want to support versioning, putting multiple providers at a single URL, pushing updates, analytics, and more, we recommend you add the box to &lt;a href=&quot;https://www.vagrantup.com/docs/vagrant-cloud&quot;&gt;HashiCorp's Vagrant Cloud&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb9b9d055e4a4096672a9d202b78200b7c0a2e50" translate="yes" xml:space="preserve">
          <source>You can export pillar data for use during provisioning by using the &lt;code&gt;pillar&lt;/code&gt; command. Each call will merge the data so you can safely call it multiple times. The data passed in should only be hashes and lists. Here is an example::</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="365f0f4cb5bce034cd7dd330da4872473a930383" translate="yes" xml:space="preserve">
          <source>You can find the appropriate guest additions version to match your VirtualBox version by selecting the appropriate version &lt;a href=&quot;http://download.virtualbox.org/virtualbox/&quot;&gt;here&lt;/a&gt;. The examples below use 4.3.8, which was the latest VirtualBox version at the time of writing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdab58c82682be9e83cd97bc915767e7085ae50a" translate="yes" xml:space="preserve">
          <source>You can find the full list of built-in provisioners and usage of these provisioners in the navigational area to the left.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cd3dbd279db84e20263ce2e2b636e98ba9281bc" translate="yes" xml:space="preserve">
          <source>You can learn about all the details of Vagrant Share in the &lt;a href=&quot;../share/index&quot;&gt;Vagrant Share section&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f26a4b4ff069ae2a2142bdfebff24eca1ee56cb4" translate="yes" xml:space="preserve">
          <source>You can learn all about boxes by reading this page as well as the sub-pages in the navigation to the left.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d607328606e9f9aa7c7fe0e83446059490c5a39" translate="yes" xml:space="preserve">
          <source>You can learn more about the available configuration options by clicking the relevant section in the left navigational area.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="257e47357949769b487c5d1cbf7623aa9e971e62" translate="yes" xml:space="preserve">
          <source>You can now run Vagrant by running &lt;code&gt;bundle exec vagrant&lt;/code&gt; from inside that directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55bb6313715f77ecf94a8391e26f560512c032c7" translate="yes" xml:space="preserve">
          <source>You can of course target other operating systems that do not have YUM by changing the playbook tasks. Ansible ships with a number of &lt;a href=&quot;https://docs.ansible.com/modules.html&quot;&gt;modules&lt;/a&gt; that make running otherwise tedious tasks dead simple.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22364258a8b4a967391d05433e0e59de3cd56fb0" translate="yes" xml:space="preserve">
          <source>You can parameterize your scripts as well like any normal shell script. These arguments can be specified to the shell provisioner. They should be specified as a string as they'd be typed on the command line, so be sure to properly escape anything:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15bdc9911e9c94315da541be90095c29c44ad5a6" translate="yes" xml:space="preserve">
          <source>You can pass raw arguments through to your RDP client on the command-line by appending it after a &lt;code&gt;--&lt;/code&gt;. Vagrant just passes these through. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="948d39fda298b92431328621e100616f7eb7d085" translate="yes" xml:space="preserve">
          <source>You can specify a custom node name by setting the &lt;code&gt;node_name&lt;/code&gt; property. This is useful for cookbooks that may depend on this being set to some sort of value. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43815c8e9d552c8a0bb287467ec007dbaa394ada" translate="yes" xml:space="preserve">
          <source>You can specify a specific NIC type for the created network interface by using the &lt;code&gt;nic_type&lt;/code&gt; parameter. This is not prefixed by &lt;code&gt;virtualbox__&lt;/code&gt; for legacy reasons, but is VirtualBox-specific.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6aefa8ad1f92f75374f5ba1fb112e83b11d8612" translate="yes" xml:space="preserve">
          <source>You can specify a static IP via IPv6. DHCP for IPv6 is not supported. To use IPv6, just specify an IPv6 address as the IP:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="098e6db0e8799a27373f50b05a9b1c8db2bc05b7" translate="yes" xml:space="preserve">
          <source>You can specify the &lt;a href=&quot;https://docs.chef.io/environments.html&quot;&gt;environment&lt;/a&gt; for the node to come up in using the &lt;code&gt;environment&lt;/code&gt; configuration option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c950940616458260edcc0fd6f5497396d6505ce1" translate="yes" xml:space="preserve">
          <source>You can update the Vagrant VMware plugin to the latest version by re-running the install command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8968d9298bbd7f6d10fdbd3df8e67e99daa36738" translate="yes" xml:space="preserve">
          <source>You can upload both public and private boxes to this service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06a42364c2d4ec9c4b95b2014e96b7e34f6a248a" translate="yes" xml:space="preserve">
          <source>You can verify Hyper-V kernel modules are properly installed by running &lt;code&gt;lsmod&lt;/code&gt; on Linux machines and looking for modules prefixed with &lt;code&gt;hv_&lt;/code&gt;. Additionally, you will need to verify that the &quot;Network&quot; tab for your virtual machine in the Hyper-V manager is reporting an IP address. If it is not reporting an IP address, Vagrant will not be able to access it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1310c0ee4cf0c48741a4475956010e7fff78779" translate="yes" xml:space="preserve">
          <source>You can view all subcommands, including the non-primary subcommands, by running &lt;code&gt;vagrant list-commands&lt;/code&gt;, which itself is a non-primary subcommand!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58c27171f22e50bc9f3c6f50f8878eddf3c18f45" translate="yes" xml:space="preserve">
          <source>You can view the &lt;a href=&quot;https://github.com/mitchellh/vagrant-aws/blob/master/Rakefile&quot;&gt;vagrant-aws Rakefile&lt;/a&gt; for a more comprehensive example that includes testing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e7a4260263bcebcbebdcf78949fb839a8264c9f" translate="yes" xml:space="preserve">
          <source>You do &lt;em&gt;not need&lt;/em&gt; the provider plugin installed to add a box for that provider.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dfb0a3de729b1f219cd9d3815675399253e6744" translate="yes" xml:space="preserve">
          <source>You may also specify additional optional parameters when configuring synced folders. These options are listed below. More detailed examples of using some of these options are shown below this section, note the owner/group example supplies two additional options separated by commas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29b5401a3a3c3b3a8f97485fb390445ba7d54c25" translate="yes" xml:space="preserve">
          <source>You may also wish to consult the &lt;a href=&quot;../other/environmental-variables&quot;&gt;documentation&lt;/a&gt; regarding the environmental variables that can be used to configure and control Vagrant in a global way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="371202fc0fc1cc6c67947e3aae3960d723b6e50e" translate="yes" xml:space="preserve">
          <source>You may find additional action hooks if you browse the Vagrant source code, but only the list of action hooks here are guaranteed to persist between Vagrant releases. Please do not rely on the internal API as it is subject to change without notice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67f7bea8ba446ebba52d8f85a2fc12bc0284ef35" translate="yes" xml:space="preserve">
          <source>You might have to reboot your machine for the changes to take effect. More information about Hyper-V can be read &lt;a href=&quot;https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/quick-start/enable-hyper-v&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="807f28933872512e5acdf74a7aaf1406fbd9b32b" translate="yes" xml:space="preserve">
          <source>You must have a modern Ruby (&amp;gt;= 2.2) in order to develop and build Vagrant. The specific Ruby version is documented in the Vagrant's &lt;code&gt;gemspec&lt;/code&gt;. Please refer to the &lt;code&gt;vagrant.gemspec&lt;/code&gt; in the repository on GitHub, as it will contain the most up-to-date requirement. This guide will not discuss how to install and manage Ruby. However, beware of the following pitfalls:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72f0378d4216fab941481b41748f138a406d7599" translate="yes" xml:space="preserve">
          <source>You need to create a static &lt;code&gt;inventory&lt;/code&gt; file that corresponds to your &lt;code&gt;Vagrantfile&lt;/code&gt; machine definitions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6415c993115ecc8692110a70b8db6176cc19fff0" translate="yes" xml:space="preserve">
          <source>You should first read the &lt;a href=&quot;basic_usage&quot;&gt;basic usage&lt;/a&gt; page and then continue by reading the documentation for a specific networking primitive by following the navigation to the left.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81551ac83f10a69358ab818b1cec5bf45096ac96" translate="yes" xml:space="preserve">
          <source>You should modify the &lt;code&gt;vagrant-my-plugin.gemspec&lt;/code&gt; file to add any dependencies and change any metadata. View the &lt;a href=&quot;https://github.com/mitchellh/vagrant-aws/blob/master/vagrant-aws.gemspec&quot;&gt;vagrant-aws.gemspec&lt;/a&gt; for a good example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b38adc0be13cc986907088d085357729c82b4aa3" translate="yes" xml:space="preserve">
          <source>You will need to install Hyper-V kernel modules. While this improves performance, it also enables necessary features such as reporting its IP address so that Vagrant can access it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50eb043b60e99412200ddebfe9be6d60ce324010" translate="yes" xml:space="preserve">
          <source>Your Vagrant host should ideally provide a recent version of OpenSSH that &lt;a href=&quot;https://docs.ansible.com/faq.html#how-do-i-get-ansible-to-reuse-connections-enable-kerberized-ssh-or-have-ansible-pay-attention-to-my-local-ssh-config-file&quot;&gt;supports ControlPersist&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a256dffb4108c32f2d63894a49c19ce8a72461d" translate="yes" xml:space="preserve">
          <source>Your existing license will continue to work with all previous versions of the VMware products. If you do not wish to update at this time, you can rollback your VMware installation to an older version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4c29a4264d01c65bce3c74d8595e113df1937b1" translate="yes" xml:space="preserve">
          <source>Your plugin can and should be this easy, too, since you basically get this for free by using Bundler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f346b5cbd0a6c345adb1b73ddf30179a23a39c92" translate="yes" xml:space="preserve">
          <source>_&lt;em&gt;NOTE: When Vagrant is installed on the Windows system the version installed within the Linux distribution &lt;em&gt;must&lt;/em&gt; match.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="026ab54a79d48f04c6d16825386d2fc8d97af2c9" translate="yes" xml:space="preserve">
          <source>an &lt;code&gt;ansible.cfg&lt;/code&gt; file located in the same directory as your &lt;code&gt;Vagrantfile&lt;/code&gt; will be used by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b6c1eae4b53ba65a8e28b19623e70e909eda3c4" translate="yes" xml:space="preserve">
          <source>any path set as &lt;code&gt;ANSIBLE_CONFIG&lt;/code&gt; environment variable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6170db5b3dd12e91fbc07c7cdd38224b4869e5ea" translate="yes" xml:space="preserve">
          <source>as of Ansible 1.5, the lookup order is the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="162fc368222d7c39c45f020e63e8a94c26a1f937" translate="yes" xml:space="preserve">
          <source>box-name</source>
          <target state="translated">box-name</target>
        </trans-unit>
        <trans-unit id="a8dc10de64f0e266fe298697fbee768aa9d69d48" translate="yes" xml:space="preserve">
          <source>box-provider</source>
          <target state="translated">box-provider</target>
        </trans-unit>
        <trans-unit id="41799e8d0a60d973ed2b95f106fe297b6cb0c6aa" translate="yes" xml:space="preserve">
          <source>cli-command</source>
          <target state="translated">cli-command</target>
        </trans-unit>
        <trans-unit id="c9c146d6c7969eb221248dc9cd84e40a670e42cb" translate="yes" xml:space="preserve">
          <source>config.ssh.username</source>
          <target state="translated">config.ssh.username</target>
        </trans-unit>
        <trans-unit id="bb35e2837445b96ad62fcebf87a706c809dbec6b" translate="yes" xml:space="preserve">
          <source>config.vagrant.host</source>
          <target state="translated">config.vagrant.host</target>
        </trans-unit>
        <trans-unit id="fd1b503384458b24ea1ba684b797f1b734566b48" translate="yes" xml:space="preserve">
          <source>config.vm.base_mac</source>
          <target state="translated">config.vm.base_mac</target>
        </trans-unit>
        <trans-unit id="2258cd9f5a07bf18661a0aac41cf6e57feb567e7" translate="yes" xml:space="preserve">
          <source>config.winrm.username</source>
          <target state="translated">config.winrm.username</target>
        </trans-unit>
        <trans-unit id="3de4b529f069a6b25ef0c9e34efa83ab11463253" translate="yes" xml:space="preserve">
          <source>docker-exec</source>
          <target state="translated">docker-exec</target>
        </trans-unit>
        <trans-unit id="ae42a6c02e77e726c1930052a4bbc3d92a54080b" translate="yes" xml:space="preserve">
          <source>docker-logs</source>
          <target state="translated">docker-logs</target>
        </trans-unit>
        <trans-unit id="f6e36e6cc9047dbbd72216f979d72a45049c0da5" translate="yes" xml:space="preserve">
          <source>docker-run</source>
          <target state="translated">docker-run</target>
        </trans-unit>
        <trans-unit id="fbc0ff713ef76b44bdad26d1a3c0bdb6fdfda710" translate="yes" xml:space="preserve">
          <source>error-exit</source>
          <target state="translated">error-exit</target>
        </trans-unit>
        <trans-unit id="08ad7eb291049c76aa53c3e619e560fa9cd85af7" translate="yes" xml:space="preserve">
          <source>it is also possible to reference any other location with the &lt;a href=&quot;ansible_common#config_file&quot;&gt;config_file&lt;/a&gt; provisioner option. In this case, Vagrant will set the &lt;code&gt;ANSIBLE_CONFIG&lt;/code&gt; environment variable accordingly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd6fdcbf5a860d174ac10af745972501941dc684" translate="yes" xml:space="preserve">
          <source>macOS</source>
          <target state="translated">macOS</target>
        </trans-unit>
        <trans-unit id="e412f01f233cc01c8f640575e03722b5fbc4e69d" translate="yes" xml:space="preserve">
          <source>macOS Host</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50e00acda560b8089239e179f4d35213149d73ee" translate="yes" xml:space="preserve">
          <source>or you can update your &lt;code&gt;Vagrantfile&lt;/code&gt; as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="260b08a9d6ba18765cf6d01f0c50e93c69240113" translate="yes" xml:space="preserve">
          <source>provider-name</source>
          <target state="translated">provider-name</target>
        </trans-unit>
        <trans-unit id="3d0cabb0a2c77c133c096479a0691099dc3469d7" translate="yes" xml:space="preserve">
          <source>replaced by the absolute path to a &lt;code&gt;roles&lt;/code&gt; subdirectory sitting in the &lt;code&gt;playbook&lt;/code&gt; parent directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51882c3515a6de07fbf1fdb113736870d1eba59c" translate="yes" xml:space="preserve">
          <source>replaced by the absolute path to the &lt;code&gt;galaxy_roles_path&lt;/code&gt; option when such option is defined, or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cd1a8b7dd930db5d1b080584eeefe7022570049" translate="yes" xml:space="preserve">
          <source>rsync</source>
          <target state="translated">rsync</target>
        </trans-unit>
        <trans-unit id="9c6ce323d7284a914b06ba46a1ee332acb70c782" translate="yes" xml:space="preserve">
          <source>rsync-auto</source>
          <target state="translated">rsync-auto</target>
        </trans-unit>
        <trans-unit id="c3b1ed8c0c8e50bfc4ad1a7c8741b8e836e3663e" translate="yes" xml:space="preserve">
          <source>ssh-config</source>
          <target state="translated">ssh-config</target>
        </trans-unit>
        <trans-unit id="aa4a5f8125f234182e2dea92805afdfb747a86be" translate="yes" xml:space="preserve">
          <source>state</source>
          <target state="translated">state</target>
        </trans-unit>
        <trans-unit id="6c6f30ec8e5d3ab3605ea4176690578cf47f340b" translate="yes" xml:space="preserve">
          <source>state-human-long</source>
          <target state="translated">state-human-long</target>
        </trans-unit>
        <trans-unit id="821b75a232e775fe34ced7662c35e39a2796a384" translate="yes" xml:space="preserve">
          <source>state-human-short</source>
          <target state="translated">state-human-short</target>
        </trans-unit>
        <trans-unit id="2cd55f15b0dd0f92b23a9c15c79b83c4e451b95a" translate="yes" xml:space="preserve">
          <source>the mounted synced folder will be owned by the user with ID &lt;code&gt;1234&lt;/code&gt; and the group with ID &lt;code&gt;1234&lt;/code&gt;. The &lt;code&gt;owner&lt;/code&gt; and &lt;code&gt;group&lt;/code&gt; options will be ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a823560441b7e4df7579e84dec956bb81f022ad9" translate="yes" xml:space="preserve">
          <source>vagrant box</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fa9db8d13e4498ca704005ff43f493e8f70fa57" translate="yes" xml:space="preserve">
          <source>vagrant cloud</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f46ceaf1c1e83b98cf99487aed317dfef261094" translate="yes" xml:space="preserve">
          <source>vagrant connect</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe0db3df7f442ce4f4d918b92ea333dd29c60766" translate="yes" xml:space="preserve">
          <source>vagrant destroy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d74452207a535748f0857010f1352fc8a0beaef1" translate="yes" xml:space="preserve">
          <source>vagrant global-status</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="561273c12b2adadd2de51a61fdef8ca5b9864706" translate="yes" xml:space="preserve">
          <source>vagrant halt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0f612397cdffad4a599b2a8da29db134d8a4522" translate="yes" xml:space="preserve">
          <source>vagrant init</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcb7e24494968aa51e3ba083015d8bceead00aaa" translate="yes" xml:space="preserve">
          <source>vagrant login</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b78dcf24f2ccc5d254adf4162e51020ddc9f82a" translate="yes" xml:space="preserve">
          <source>vagrant package</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22c107757d7a3dfc9bfbe9483cca79e9d094abe9" translate="yes" xml:space="preserve">
          <source>vagrant plugin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c35d124ece690feda57eb8dc3feaba632d8c24a" translate="yes" xml:space="preserve">
          <source>vagrant port</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33bf468dc5af8f15849d753067315a3734ef41cc" translate="yes" xml:space="preserve">
          <source>vagrant powershell</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad8038b4bc27d01866516b9d257444414762f48d" translate="yes" xml:space="preserve">
          <source>vagrant provision</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2fb594a212d110ffe872c1147702f2cbda76dfb" translate="yes" xml:space="preserve">
          <source>vagrant rdp</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afbea132ee784cf694576baac13967a8b5c7e40b" translate="yes" xml:space="preserve">
          <source>vagrant reload</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b28a800685566f73a7e440f9d216fadde681338c" translate="yes" xml:space="preserve">
          <source>vagrant resume</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92302d9729e62cd447b5537dd99a707279687cd6" translate="yes" xml:space="preserve">
          <source>vagrant rsync</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b41f54d8f26bff102a566d54b30e97a6c3cfe947" translate="yes" xml:space="preserve">
          <source>vagrant rsync-auto</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b215df1d6b4c645ae8f82d2dedf462bb07dcf858" translate="yes" xml:space="preserve">
          <source>vagrant share</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61dc29e1eda3d2b2ed884b2e527cbfa4b2ee4a3b" translate="yes" xml:space="preserve">
          <source>vagrant snapshot</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03d8c2c8d8fb81858e4fa2f9ef69c7556d2a74d2" translate="yes" xml:space="preserve">
          <source>vagrant ssh</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9ca95e34a7e9f05e8f051374ea41c12599cead7" translate="yes" xml:space="preserve">
          <source>vagrant ssh-config</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa479d7bd9fe116a4f496bcd0615c72482c1f9e0" translate="yes" xml:space="preserve">
          <source>vagrant status</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d39df58e9106322eea732e71e11f16d1dcf19dc9" translate="yes" xml:space="preserve">
          <source>vagrant suspend</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30a5c5f2f385722e89bbc2052f960ca8534f7f93" translate="yes" xml:space="preserve">
          <source>vagrant up</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d92094574bdfb5229ab55b59283afe16510731e1" translate="yes" xml:space="preserve">
          <source>vagrant validate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="166b5bb2af837558a19f72a74c2ccc822752c9f9" translate="yes" xml:space="preserve">
          <source>vagrant version</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
