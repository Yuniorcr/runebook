<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="en" datatype="htmlbody" original="cpp">
    <body>
      <group id="cpp">
        <trans-unit id="5fb396c12e00e26c90d1d1e106b3e27caa66284b" translate="yes" xml:space="preserve">
          <source>assigns the shared state</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="001271614870d153551f720aef75f3c403db1d89" translate="yes" xml:space="preserve">
          <source>assigns value to a &lt;code&gt;zoned_time&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beafa55bd9b2a6320631cae66de043b42ebfb26f" translate="yes" xml:space="preserve">
          <source>assigns values to the container</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f4ffc2b4c608adae1cee299296725eedfb80b47" translate="yes" xml:space="preserve">
          <source>assigns values to the container adaptor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d4c285d426fd4112aa9d70521d910b5a50c337d" translate="yes" xml:space="preserve">
          <source>assigns values to the string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62c35ce99f4d469044de5382183cc24a92514456" translate="yes" xml:space="preserve">
          <source>assoc_laguerre(0, m, x) = 1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40575017ed4f58c37affefdc15c3080c6228c2aa" translate="yes" xml:space="preserve">
          <source>assoc_laguerre(1, m, x) = -x + m + 1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="266831461a618376bfd3d98c32170bf68e9b348e" translate="yes" xml:space="preserve">
          <source>assoc_laguerre(2, m, x) =</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d08442430c3504b6257bc5bad0537b8bb163430" translate="yes" xml:space="preserve">
          <source>assoc_laguerre(3, m, x) =</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="badde3d44767acff7ada7d4de437ffa0968af390" translate="yes" xml:space="preserve">
          <source>assoc_laguerreassoc_laguerrefassoc_laguerrel</source>
          <target state="translated">assoc_laguerreassoc_laguerrefassoc_laguerrel</target>
        </trans-unit>
        <trans-unit id="287643098e31a6694bfc2c906e328b9500077c35" translate="yes" xml:space="preserve">
          <source>assoc_legendre(0, 0, x) = 1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4940a3ef421cbc85dfc42875253b11c131296adc" translate="yes" xml:space="preserve">
          <source>assoc_legendre(1, 0, x) = x</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74f9be560df4812fea1909795833c2abc283ee81" translate="yes" xml:space="preserve">
          <source>assoc_legendre(1, 1, x) = (1-x2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3eb4a73f5c664cecd211390abd7f5b0ea835236" translate="yes" xml:space="preserve">
          <source>assoc_legendre(2, 0, x) =</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dea7d9ca17e32ba05a23eae396aa4bbb46b440bc" translate="yes" xml:space="preserve">
          <source>assoc_legendre(2, 1, x) = 3x(1-x2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="029614c65ac6d5d15c485497bb59a31eba3457c3" translate="yes" xml:space="preserve">
          <source>assoc_legendre(2, 2, x) = 3(1-x2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35034402dea317be09934977200b73057373f126" translate="yes" xml:space="preserve">
          <source>assoc_legendreassoc_legendrefassoc_legendrel</source>
          <target state="translated">assoc_legendreassoc_legendrefassoc_legendrel</target>
        </trans-unit>
        <trans-unit id="b25d9fcd1d469c1c21257dd464a424e82afd7961" translate="yes" xml:space="preserve">
          <source>associated Laguerre polynomials</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc1e43bc0d99cf8b5c6bb558cd308e7bd31f8013" translate="yes" xml:space="preserve">
          <source>associated Legendre polynomials</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fd238999ebcde209cf218de8320ac3188473c13" translate="yes" xml:space="preserve">
          <source>associated character sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d39aef3f4af63ecb446b9b353b899364a9a45a4" translate="yes" xml:space="preserve">
          <source>associated input sequence has reached end-of-file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a04a2d2e76b4ac9bfe61ef695eede5e6cca9aa93" translate="yes" xml:space="preserve">
          <source>associated set of namespaces and classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25e8559eba9ac04476349ef29241dda3b25df55c" translate="yes" xml:space="preserve">
          <source>associated with underlying &lt;a href=&quot;type_info&quot;&gt;&lt;code&gt;type_info&lt;/code&gt;&lt;/a&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dea82164e2c91b4655dac7d9f0c9fa1fa5253ee5" translate="yes" xml:space="preserve">
          <source>associates a sequence of catch clauses with the entire function body, and with the &lt;a href=&quot;constructor&quot;&gt;member initializer list&lt;/a&gt; (if used in a constructor) as well. Every exception thrown from any statement in the function body, or (for constructors) from any member or base constructor, or (for destructors) from any member or base destructor, transfers control to the handler-sequence the same way an exception thrown in a regular &lt;a href=&quot;try_catch&quot;&gt;try block&lt;/a&gt; would.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e0f5e4eec8c133c4f07b970b8a730fb86e07994" translate="yes" xml:space="preserve">
          <source>assume the calling thread already has ownership of the mutex</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c68b2e43e9b36cca2b339f48c3e9a1e14c43272c" translate="yes" xml:space="preserve">
          <source>assume the input is in little-endian byte order (applies to UTF-16 input only, the default is big-endian)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3e3055803574f39ca1b16b2ddede9110902a38f" translate="yes" xml:space="preserve">
          <source>assume_aligned</source>
          <target state="translated">assume_aligned</target>
        </trans-unit>
        <trans-unit id="b7e04b33fdd186ab6bd2deace04ea6b551b9bd4a" translate="yes" xml:space="preserve">
          <source>async</source>
          <target state="translated">async</target>
        </trans-unit>
        <trans-unit id="27e90dfa57c358acfaf470860f6f72c9282ce995" translate="yes" xml:space="preserve">
          <source>at</source>
          <target state="translated">at</target>
        </trans-unit>
        <trans-unit id="81fd50b903ef5bd1d9e0e785400783db07983b81" translate="yes" xml:space="preserve">
          <source>at compile-time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4e380389a774a586c5fa16ad6f747ccd0f5dd49" translate="yes" xml:space="preserve">
          <source>at least</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4ae9db3e7aa8cdca11fce3e070c63fb37af654f" translate="yes" xml:space="preserve">
          <source>at least as constrained</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5b6826ebe454d927f67a962e96a4fecadee65f7" translate="yes" xml:space="preserve">
          <source>at least one copy constructor, move constructor, copy assignment operator, or move assignment operator is non-deleted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03d63e9f7ae5d693bff4e1fe2dc3702a845c4a9d" translate="yes" xml:space="preserve">
          <source>at most &lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(begin(), end()) + &lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(other.begin(), other.end()) - 1&lt;/code&gt; comparisons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd5cfd845d77f50c46e50931dc8874275086097a" translate="yes" xml:space="preserve">
          <source>at phase 1, the candidate functions are all initializer-list constructors of &lt;code&gt;T&lt;/code&gt; and the argument list for the purpose of overload resolution consists of a single initializer list argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83a80430d0ecf453056468a9cd57a3d24f447820" translate="yes" xml:space="preserve">
          <source>at position &lt;code&gt;xpos&lt;/code&gt; if all of the following is true:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b3167c14955e1f3fea9853d7148dcb75a62f7ab" translate="yes" xml:space="preserve">
          <source>at_quick_exit</source>
          <target state="translated">at_quick_exit</target>
        </trans-unit>
        <trans-unit id="fd281638c28da6a30c5b0c730c9b9ec0d88cba4c" translate="yes" xml:space="preserve">
          <source>atan(iz)</source>
          <target state="translated">atan(iz)</target>
        </trans-unit>
        <trans-unit id="d3b027e28e82239ca16abc8c0655d501eb569410" translate="yes" xml:space="preserve">
          <source>atan(std::complex)</source>
          <target state="translated">atan(std::complex)</target>
        </trans-unit>
        <trans-unit id="4d3f088390fa63161b8dda3f53d7dd9cfcc3eea0" translate="yes" xml:space="preserve">
          <source>atan(std::valarray)</source>
          <target state="translated">atan(std::valarray)</target>
        </trans-unit>
        <trans-unit id="2f51a4efec4e51ef0333ecf72d0ca5e9d889ed68" translate="yes" xml:space="preserve">
          <source>atan2(std::valarray)</source>
          <target state="translated">atan2(std::valarray)</target>
        </trans-unit>
        <trans-unit id="b957cefd959bb1c4b5fdb50a314397923487008a" translate="yes" xml:space="preserve">
          <source>atan2atan2fatan2l</source>
          <target state="translated">atan2atan2fatan2l</target>
        </trans-unit>
        <trans-unit id="1cbecfd27a902ae767327ccf26fc508a471b1941" translate="yes" xml:space="preserve">
          <source>atanatanfatanl</source>
          <target state="translated">atanatanfatanl</target>
        </trans-unit>
        <trans-unit id="f50fd820913ce9b41c52ebdf52f00199b52679b5" translate="yes" xml:space="preserve">
          <source>atanh(std::complex)</source>
          <target state="translated">atanh(std::complex)</target>
        </trans-unit>
        <trans-unit id="0b67f8cc63e7d4d66ac6071e6d9132e68a8b95f5" translate="yes" xml:space="preserve">
          <source>atanhatanhfatanhl</source>
          <target state="translated">atanhatanhfatanhl</target>
        </trans-unit>
        <trans-unit id="3853b2fd4c89603fc8835e3e1228e431622c9270" translate="yes" xml:space="preserve">
          <source>atexit</source>
          <target state="translated">atexit</target>
        </trans-unit>
        <trans-unit id="6017383f8fbd1471aeeef3234b4ca0a2acb5156d" translate="yes" xml:space="preserve">
          <source>atof</source>
          <target state="translated">atof</target>
        </trans-unit>
        <trans-unit id="c6ad2fc918927ced018e6fe7d948a7ec0fc7ebff" translate="yes" xml:space="preserve">
          <source>atoiatolatoll</source>
          <target state="translated">atoiatolatoll</target>
        </trans-unit>
        <trans-unit id="4e91475d3fae49d1a8a60862b1dbc2d921e7d999" translate="yes" xml:space="preserve">
          <source>atomic</source>
          <target state="translated">atomic</target>
        </trans-unit>
        <trans-unit id="4ce80af449d61ec8ecca13096c59a5528fc8918c" translate="yes" xml:space="preserve">
          <source>atomic (either all statements occur, or nothing occurs)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a69fc56bc986f1e61962a326ca5b843d72d29d9c" translate="yes" xml:space="preserve">
          <source>atomic class template and specializations for bool, integral, and pointer types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="014ebea2d7b9ef3bb1bcdd5cd92b7a1b78aeae27" translate="yes" xml:space="preserve">
          <source>atomic shared pointer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="778f57fa3059d20647d5c564dc7f0f3c07a3da05" translate="yes" xml:space="preserve">
          <source>atomic weak pointer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2a3d912d3e0062b8a6abdcc954abdb07884b724" translate="yes" xml:space="preserve">
          <source>atomic&amp;lt;shared_ptr&amp;lt;T&amp;gt;&amp;gt;::atomic</source>
          <target state="translated">atomic&amp;lt;shared_ptr&amp;lt;T&amp;gt;&amp;gt;::atomic</target>
        </trans-unit>
        <trans-unit id="abb17a982af29acc976ab78431d3fa11035c2a3f" translate="yes" xml:space="preserve">
          <source>atomic&amp;lt;shared_ptr&amp;lt;T&amp;gt;&amp;gt;::compare_exchange_weak, compare_exchange_strong</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36d2526e7e7b928ca8d4c6afc260ccfe6fd34e3d" translate="yes" xml:space="preserve">
          <source>atomic&amp;lt;shared_ptr&amp;lt;T&amp;gt;&amp;gt;::exchange</source>
          <target state="translated">atomic&amp;lt;shared_ptr&amp;lt;T&amp;gt;&amp;gt;::exchange</target>
        </trans-unit>
        <trans-unit id="c0a192ed102bcc7c54b55db63545549ae2fb9436" translate="yes" xml:space="preserve">
          <source>atomic&amp;lt;shared_ptr&amp;lt;T&amp;gt;&amp;gt;::is_always_lock_free</source>
          <target state="translated">atomic&amp;lt;shared_ptr&amp;lt;T&amp;gt;&amp;gt;::is_always_lock_free</target>
        </trans-unit>
        <trans-unit id="f588ee8e7b49e449849a96191771b7e9b5111a28" translate="yes" xml:space="preserve">
          <source>atomic&amp;lt;shared_ptr&amp;lt;T&amp;gt;&amp;gt;::is_lock_free</source>
          <target state="translated">atomic&amp;lt;shared_ptr&amp;lt;T&amp;gt;&amp;gt;::is_lock_free</target>
        </trans-unit>
        <trans-unit id="019238180d295788e338d7379a8150adbce69a80" translate="yes" xml:space="preserve">
          <source>atomic&amp;lt;shared_ptr&amp;lt;T&amp;gt;&amp;gt;::load</source>
          <target state="translated">atomic&amp;lt;shared_ptr&amp;lt;T&amp;gt;&amp;gt;::load</target>
        </trans-unit>
        <trans-unit id="14260820e6b5ce6c7863ae2f43267d53c69af006" translate="yes" xml:space="preserve">
          <source>atomic&amp;lt;shared_ptr&amp;lt;T&amp;gt;&amp;gt;::operator std::shared_ptr&amp;lt;T&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="858777f0466a9b5aa592c96a5f6190ed727ad0e3" translate="yes" xml:space="preserve">
          <source>atomic&amp;lt;shared_ptr&amp;lt;T&amp;gt;&amp;gt;::operator=</source>
          <target state="translated">atomic&amp;lt;shared_ptr&amp;lt;T&amp;gt;&amp;gt;::operator=</target>
        </trans-unit>
        <trans-unit id="4ef24490d20125318584065579eef7486580e0f4" translate="yes" xml:space="preserve">
          <source>atomic&amp;lt;shared_ptr&amp;lt;T&amp;gt;&amp;gt;::store</source>
          <target state="translated">atomic&amp;lt;shared_ptr&amp;lt;T&amp;gt;&amp;gt;::store</target>
        </trans-unit>
        <trans-unit id="106dd58d53b1be3feaddcbfb1ae7bfc16f09f5e5" translate="yes" xml:space="preserve">
          <source>atomic&amp;lt;weak_ptr&amp;lt;T&amp;gt;&amp;gt;::atomic</source>
          <target state="translated">atomic&amp;lt;weak_ptr&amp;lt;T&amp;gt;&amp;gt;::atomic</target>
        </trans-unit>
        <trans-unit id="018f2fec4125de81516b23a2b8f1ac8c14b9e8a4" translate="yes" xml:space="preserve">
          <source>atomic&amp;lt;weak_ptr&amp;lt;T&amp;gt;&amp;gt;::compare_exchange_weak, compare_exchange_strong</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20214b02245ef0164ee603b6b3f9d4afe704d91b" translate="yes" xml:space="preserve">
          <source>atomic&amp;lt;weak_ptr&amp;lt;T&amp;gt;&amp;gt;::exchange</source>
          <target state="translated">atomic&amp;lt;weak_ptr&amp;lt;T&amp;gt;&amp;gt;::exchange</target>
        </trans-unit>
        <trans-unit id="9ac248e8bac618375fb5a10241b8338a483cf10b" translate="yes" xml:space="preserve">
          <source>atomic&amp;lt;weak_ptr&amp;lt;T&amp;gt;&amp;gt;::is_always_lock_free</source>
          <target state="translated">atomic&amp;lt;weak_ptr&amp;lt;T&amp;gt;&amp;gt;::is_always_lock_free</target>
        </trans-unit>
        <trans-unit id="4aafe7bc5daf274fdc6d349740efe21de4685aae" translate="yes" xml:space="preserve">
          <source>atomic&amp;lt;weak_ptr&amp;lt;T&amp;gt;&amp;gt;::is_lock_free</source>
          <target state="translated">atomic&amp;lt;weak_ptr&amp;lt;T&amp;gt;&amp;gt;::is_lock_free</target>
        </trans-unit>
        <trans-unit id="f25fc6257d0ead064eb9bfdfca6ab7878e1855e0" translate="yes" xml:space="preserve">
          <source>atomic&amp;lt;weak_ptr&amp;lt;T&amp;gt;&amp;gt;::load</source>
          <target state="translated">atomic&amp;lt;weak_ptr&amp;lt;T&amp;gt;&amp;gt;::load</target>
        </trans-unit>
        <trans-unit id="2ab7e87f5c62844db5b4202144cd272255e2c268" translate="yes" xml:space="preserve">
          <source>atomic&amp;lt;weak_ptr&amp;lt;T&amp;gt;&amp;gt;::operator std::weak_ptr&amp;lt;T&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d08910f9ca87ad234c6f648588401a0d51dfc97c" translate="yes" xml:space="preserve">
          <source>atomic&amp;lt;weak_ptr&amp;lt;T&amp;gt;&amp;gt;::operator=</source>
          <target state="translated">atomic&amp;lt;weak_ptr&amp;lt;T&amp;gt;&amp;gt;::operator=</target>
        </trans-unit>
        <trans-unit id="f8d3e6f0fcd8d1dca2c7cb55a6f7dc43273d0ae9" translate="yes" xml:space="preserve">
          <source>atomic&amp;lt;weak_ptr&amp;lt;T&amp;gt;&amp;gt;::store</source>
          <target state="translated">atomic&amp;lt;weak_ptr&amp;lt;T&amp;gt;&amp;gt;::store</target>
        </trans-unit>
        <trans-unit id="efaff01b269cf3616cc99a7e4be007f81c621cc8" translate="yes" xml:space="preserve">
          <source>atomic_compare_exchange_weakatomic_compare_exchange_weak_explicitatomic_compare_exchange_strongatomic_compare_exchange_strong_explicit</source>
          <target state="translated">atomic_compare_exchange_weakatomic_compare_exchange_weak_explicitatomic_compare_exchange_strongatomic_compare_exchange_strong_explicit</target>
        </trans-unit>
        <trans-unit id="da1b31c910ecb9c7bf63dd359c31e80d8d9adbbb" translate="yes" xml:space="preserve">
          <source>atomic_exchangeatomic_exchange_explicit</source>
          <target state="translated">atomic_exchangeatomic_exchange_explicit</target>
        </trans-unit>
        <trans-unit id="68abb79dc9381ee4c7e2960afde1dfb67ac53f75" translate="yes" xml:space="preserve">
          <source>atomic_fetch_addatomic_fetch_add_explicit</source>
          <target state="translated">atomic_fetch_addatomic_fetch_add_explicit</target>
        </trans-unit>
        <trans-unit id="4636325964362c389e84bf2159178c141696167c" translate="yes" xml:space="preserve">
          <source>atomic_fetch_andatomic_fetch_and_explicit</source>
          <target state="translated">atomic_fetch_andatomic_fetch_and_explicit</target>
        </trans-unit>
        <trans-unit id="fd45ef687560c6d955b9fbefbedf41992a0256c4" translate="yes" xml:space="preserve">
          <source>atomic_fetch_oratomic_fetch_or_explicit</source>
          <target state="translated">atomic_fetch_oratomic_fetch_or_explicit</target>
        </trans-unit>
        <trans-unit id="2ecbdc6cb974eae1bc3b6c02d656f11317e0c27d" translate="yes" xml:space="preserve">
          <source>atomic_fetch_subatomic_fetch_sub_explicit</source>
          <target state="translated">atomic_fetch_subatomic_fetch_sub_explicit</target>
        </trans-unit>
        <trans-unit id="f8bc1ef8c5a4d9352886923c00f8369344ab0b17" translate="yes" xml:space="preserve">
          <source>atomic_fetch_xoratomic_fetch_xor_explicit</source>
          <target state="translated">atomic_fetch_xoratomic_fetch_xor_explicit</target>
        </trans-unit>
        <trans-unit id="3ddeffad16e9ac220257edf816bbc4d016469eb3" translate="yes" xml:space="preserve">
          <source>atomic_flag</source>
          <target state="translated">atomic_flag</target>
        </trans-unit>
        <trans-unit id="15242abd00ff500da8d9b58c8238d540f3f1421e" translate="yes" xml:space="preserve">
          <source>atomic_flag_clearatomic_flag_clear_explicit</source>
          <target state="translated">atomic_flag_clearatomic_flag_clear_explicit</target>
        </trans-unit>
        <trans-unit id="67982553a4d3dd9a3a239ebf9e4ce6a29f5c1d15" translate="yes" xml:space="preserve">
          <source>atomic_flag_test_and_setatomic_flag_test_and_set_explicit</source>
          <target state="translated">atomic_flag_test_and_setatomic_flag_test_and_set_explicit</target>
        </trans-unit>
        <trans-unit id="ca6857b24a822b3951d174231b03a6a5570fcbf1" translate="yes" xml:space="preserve">
          <source>atomic_init</source>
          <target state="translated">atomic_init</target>
        </trans-unit>
        <trans-unit id="3b1d586b599c6781cec18d961a12cf0a425a7577" translate="yes" xml:space="preserve">
          <source>atomic_is_lock_free</source>
          <target state="translated">atomic_is_lock_free</target>
        </trans-unit>
        <trans-unit id="07f3c9c9db8706113662a155f10243698ff7b877" translate="yes" xml:space="preserve">
          <source>atomic_is_lock_free(std::shared_ptr)</source>
          <target state="translated">atomic_is_lock_free(std::shared_ptr)</target>
        </trans-unit>
        <trans-unit id="38742836008ed0bfa46052fedc3cb03fb5fcecf4" translate="yes" xml:space="preserve">
          <source>atomic_loadatomic_load_explicit</source>
          <target state="translated">atomic_loadatomic_load_explicit</target>
        </trans-unit>
        <trans-unit id="ead7213b5abc2868628fcfa4844ebcf216705989" translate="yes" xml:space="preserve">
          <source>atomic_ref</source>
          <target state="translated">atomic_ref</target>
        </trans-unit>
        <trans-unit id="8c617083c7f1960a4b352867c61f3c3b678be5ee" translate="yes" xml:space="preserve">
          <source>atomic_signal_fence</source>
          <target state="translated">atomic_signal_fence</target>
        </trans-unit>
        <trans-unit id="eb45ccb8f431657afb3489bd8f05a7ee55248577" translate="yes" xml:space="preserve">
          <source>atomic_storeatomic_store_explicit</source>
          <target state="translated">atomic_storeatomic_store_explicit</target>
        </trans-unit>
        <trans-unit id="23475947ad76f230293cc1d4cce0c2516c7c1097" translate="yes" xml:space="preserve">
          <source>atomic_thread_fence</source>
          <target state="translated">atomic_thread_fence</target>
        </trans-unit>
        <trans-unit id="55f1cb544fa19acb181b9e138fb0cf72bc17dd2a" translate="yes" xml:space="preserve">
          <source>atomically adds the argument to the value stored in the atomic object and obtains the value held previously</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc26b83028281f2468ac0c964707ff42f121c193" translate="yes" xml:space="preserve">
          <source>atomically adds the argument to the value stored in the referenced object and obtains the value held previously</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ef8f4fac1ca87d61914ddb11c7cd20087283d9a" translate="yes" xml:space="preserve">
          <source>atomically adds, subtracts, or performs bitwise AND, OR, XOR with the referenced value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b655c44dc39499a1526ecc695bca71bcdcc095cb" translate="yes" xml:space="preserve">
          <source>atomically compares the value of the atomic object with non-atomic argument and performs atomic exchange if equal or atomic load if not</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="055a5ba2b5359a4674b67a0d067dcb31cf123ddc" translate="yes" xml:space="preserve">
          <source>atomically compares the value of the referenced object with non-atomic argument and performs atomic exchange if equal or atomic load if not</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c26205d9303449429ba654684ae60f613da8335" translate="yes" xml:space="preserve">
          <source>atomically increments or decrements the referenced object by one</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="075251ae5cd14d80604a2240c802438c5c5e3452" translate="yes" xml:space="preserve">
          <source>atomically obtains the value of the atomic object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dfcee81735d1e450861023729c95d97bf13c00c" translate="yes" xml:space="preserve">
          <source>atomically obtains the value of the referenced object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f36e9fb2a289fbdd6a7ffc8c8c14c5b2f2671a95" translate="yes" xml:space="preserve">
          <source>atomically obtains the value stored in an atomic object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e068c4ea9e8ef07ac49f6df399d3e702fd3435b" translate="yes" xml:space="preserve">
          <source>atomically performs bitwise AND between the argument and the value of the atomic object and obtains the value held previously</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38a4269b60cfa75448d352015d9078300eb303a9" translate="yes" xml:space="preserve">
          <source>atomically performs bitwise AND between the argument and the value of the referenced object and obtains the value held previously</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b74f1696c2e22978eb8303aced882100ab57b83" translate="yes" xml:space="preserve">
          <source>atomically performs bitwise OR between the argument and the value of the atomic object and obtains the value held previously</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9f82c23ef3293ea97017fff8957a969bfc8a2cb" translate="yes" xml:space="preserve">
          <source>atomically performs bitwise OR between the argument and the value of the referenced object and obtains the value held previously</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2638694064cdacb0a8533e87f758b2bb3995c444" translate="yes" xml:space="preserve">
          <source>atomically performs bitwise XOR between the argument and the value of the atomic object and obtains the value held previously</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c72a96b9e453d6f5a2d91dfdbb9521957bc40def" translate="yes" xml:space="preserve">
          <source>atomically performs bitwise XOR between the argument and the value of the referenced object and obtains the value held previously</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f410fd6e62e71aba76e05c696198a27345f97a13" translate="yes" xml:space="preserve">
          <source>atomically replaces the value of the atomic object and obtains the value held previously</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abd273d751929e4b129c13c9d9aba0557f24364d" translate="yes" xml:space="preserve">
          <source>atomically replaces the value of the atomic object with a non-atomic argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d03d1d3dc0888b9c5ee4a1e4e0b448e48423cf4e" translate="yes" xml:space="preserve">
          <source>atomically replaces the value of the atomic object with non-atomic argument and returns the old value of the atomic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f319224d7569d31eecde366af9213b5120ab7c38" translate="yes" xml:space="preserve">
          <source>atomically replaces the value of the referenced object and obtains the value held previously</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="298b2954698e8b642651670b4f927543d65531c0" translate="yes" xml:space="preserve">
          <source>atomically replaces the value of the referenced object with a non-atomic argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ae372a924ac12280c72b864882cfd813fa14251" translate="yes" xml:space="preserve">
          <source>atomically sets flag to &lt;code&gt;false&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecd18567144fb03bdf6e0ba82491230f3de4d5bf" translate="yes" xml:space="preserve">
          <source>atomically sets the flag to &lt;code&gt;true&lt;/code&gt; and obtains its previous value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3861f9d7522e6f189ce50f1d41a54a8c05392bfc" translate="yes" xml:space="preserve">
          <source>atomically sets the flag to &lt;code&gt;true&lt;/code&gt; and returns its previous value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c35233070c527b087d4cd1c0c8edcd2ccbc23b69" translate="yes" xml:space="preserve">
          <source>atomically sets the value of the flag to &lt;code&gt;false&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4783c66b621da79d98269bcca190f6ab2b4cc74f" translate="yes" xml:space="preserve">
          <source>atomically subtracts the argument from the value stored in the atomic object and obtains the value held previously</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="263488a7f8fd68c42745d7ac083f6d7d140bbb64" translate="yes" xml:space="preserve">
          <source>atomically subtracts the argument from the value stored in the referenced object and obtains the value held previously</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99c453d64bbee7c4dab74d1198f6650c3e5f05ac" translate="yes" xml:space="preserve">
          <source>atomically transmits the entire internal buffer to the wrapped streambuf</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5043cfc275092f6c6fa1bedc9e1efd6bde1787d1" translate="yes" xml:space="preserve">
          <source>attempt to access &lt;code&gt;&lt;a href=&quot;promise&quot;&gt;std::promise&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;future&quot;&gt;std::future&lt;/a&gt;&lt;/code&gt; without an associated shared state</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9941d888e03749b6a528d6df2a8709c3f9b085d7" translate="yes" xml:space="preserve">
          <source>attempt to store a value in the shared state twice</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="977f62428ad2554923f0cf454e34df1bba3148dc" translate="yes" xml:space="preserve">
          <source>attempting to create a cv-qualified function type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcfa1460f71e1da1a3bc2492b8a560911d099a30" translate="yes" xml:space="preserve">
          <source>attempting to create a function type which returns an array type or a function type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="571572fa8f0a6245636dd08e215f93dbf54aae65" translate="yes" xml:space="preserve">
          <source>attempting to create a function type with a parameter of type void</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bdf90cc197050533ef5dc5dce5407808fe3a07a" translate="yes" xml:space="preserve">
          <source>attempting to create a pointer to reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ff417ba8821ef97bc79372277da6caaa6a4bac7" translate="yes" xml:space="preserve">
          <source>attempting to create a reference to void</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b369476a243af2d5c5d81fb1e2c3a7660d81fa4" translate="yes" xml:space="preserve">
          <source>attempting to create a symlink for a directory succeeds but does nothing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11f56a860411e11796ff0c2b3f983dfcd2359043" translate="yes" xml:space="preserve">
          <source>attempting to create an array of void, array of reference, array of function, array of negative size, array of non-integral size, or array of size zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4d2bafc72e766c59d93e75a95b7a76eb0b950b1" translate="yes" xml:space="preserve">
          <source>attempting to create pointer to member of T, where T is not a class type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fccdf30255717e902d7f05fdfa1b86e9ba17243" translate="yes" xml:space="preserve">
          <source>attempting to give an invalid type to a non-type template parameter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f9a5558a3ce75d1e3e45c61be6c1a0d3373c5eb" translate="yes" xml:space="preserve">
          <source>attempting to instantiate a pack expansion containing multiple packs of different lengths</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d13784458cbdf1e75778118d68c44bd42d7f0ea9" translate="yes" xml:space="preserve">
          <source>attempting to perform an invalid conversion in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f3d039a62880f696ae6f24c9ae3a8b071a68a08" translate="yes" xml:space="preserve">
          <source>attempting to use a member of a type, where</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bf37149263866b63847ee5601e7a8864c532d47" translate="yes" xml:space="preserve">
          <source>attempting to use a type that is not a class or enumeration on the left of a scope resolution operator &lt;code&gt;::&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="908bf2f2b1ca78a758c0dd00f22850acc1eef7d4" translate="yes" xml:space="preserve">
          <source>attempts to lock the associated &lt;a href=&quot;../../named_req/timedlockable&quot;&gt;TimedLockable&lt;/a&gt; mutex, returns if the mutex has been unavailable for the specified time duration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c09d640559f1334a7498adce1459d3ec43762d05" translate="yes" xml:space="preserve">
          <source>attempts to lock the associated &lt;a href=&quot;../named_req/timedlockable&quot;&gt;TimedLockable&lt;/a&gt; mutex, returns if the mutex has been unavailable for the specified time duration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a2011508a4883ccf41d24fdeb3b7f1ede41b86a" translate="yes" xml:space="preserve">
          <source>attempts to match a regular expression to an entire character sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d77059665a6a4192acd12f8f67453d7f249901ee" translate="yes" xml:space="preserve">
          <source>attempts to match a regular expression to any part of a character sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2567844a31b81706eac3407481f1d26f00b7b4ce" translate="yes" xml:space="preserve">
          <source>attempts to obtain ownership of mutexes via repeated calls to &lt;code&gt;try_lock&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="234c3fb3ee967d7a827b76f78da6aab99618b638" translate="yes" xml:space="preserve">
          <source>attempts to replace the controlled character sequence with an array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc88c6b3cc380853de27e44642207df9743ff63d" translate="yes" xml:space="preserve">
          <source>attr</source>
          <target state="translated">attr</target>
        </trans-unit>
        <trans-unit id="0ba9445da32dde8ca657a8e2d82aca27ff681517" translate="yes" xml:space="preserve">
          <source>attr represents an optional number of &lt;a href=&quot;attributes&quot;&gt;attributes&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c6349315b32b0db5e447dcc388ac57706204e3d" translate="yes" xml:space="preserve">
          <source>attr(C++11)</source>
          <target state="translated">attr(C++11)</target>
        </trans-unit>
        <trans-unit id="bad34c8c568a6bd6e2e1b82d03f00c3ac31a69ab" translate="yes" xml:space="preserve">
          <source>attr(C++17)</source>
          <target state="translated">attr(C++17)</target>
        </trans-unit>
        <trans-unit id="9460bbb3317d81459bf1a4b9f7fb058aeafa7c06" translate="yes" xml:space="preserve">
          <source>attr(optional)&lt;code&gt;break&lt;/code&gt;&lt;code&gt;;&lt;/code&gt;</source>
          <target state="translated">attr(optional)&lt;code&gt;break&lt;/code&gt;&lt;code&gt;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4722c407e68cb51c5e3ce47d2ef63a0df6841000" translate="yes" xml:space="preserve">
          <source>attr(optional)&lt;code&gt;case&lt;/code&gt;constant_expression&lt;code&gt;:&lt;/code&gt;statement</source>
          <target state="translated">attr(optional)&lt;code&gt;case&lt;/code&gt;constant_expression&lt;code&gt;:&lt;/code&gt;statement</target>
        </trans-unit>
        <trans-unit id="debe7c1056e0fd49c4d3d62f4a175d2cac8632be" translate="yes" xml:space="preserve">
          <source>attr(optional)&lt;code&gt;case&lt;/code&gt;constexpr&lt;code&gt;:&lt;/code&gt;statement</source>
          <target state="translated">attr(optional)&lt;code&gt;case&lt;/code&gt;constexpr&lt;code&gt;:&lt;/code&gt;statement</target>
        </trans-unit>
        <trans-unit id="ba5c111105ad6a59bbb78489245f7bcfcdd6fced" translate="yes" xml:space="preserve">
          <source>attr(optional)&lt;code&gt;co_return&lt;/code&gt;braced-init-list&lt;code&gt;;&lt;/code&gt;</source>
          <target state="translated">attr(optional)&lt;code&gt;co_return&lt;/code&gt;braced-init-list&lt;code&gt;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="58258e2addff7cbf6aebbf574dad85e8bcf218fc" translate="yes" xml:space="preserve">
          <source>attr(optional)&lt;code&gt;co_return&lt;/code&gt;expression(optional)&lt;code&gt;;&lt;/code&gt;</source>
          <target state="translated">attr(optional)&lt;code&gt;co_return&lt;/code&gt;expression(optional)&lt;code&gt;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="087c4322946ec576c818bc4c247e5f341098189f" translate="yes" xml:space="preserve">
          <source>attr(optional)&lt;code&gt;continue&lt;/code&gt;&lt;code&gt;;&lt;/code&gt;</source>
          <target state="translated">attr(optional)&lt;code&gt;continue&lt;/code&gt;&lt;code&gt;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c9ba1995beef17f3a2cb903efa0bdeea2279ff93" translate="yes" xml:space="preserve">
          <source>attr(optional)&lt;code&gt;default&lt;/code&gt;&lt;code&gt;:&lt;/code&gt;statement</source>
          <target state="translated">attr(optional)&lt;code&gt;default&lt;/code&gt;&lt;code&gt;:&lt;/code&gt;statement</target>
        </trans-unit>
        <trans-unit id="a6c0bad48d38c78ace8713168a3de983e8e42f68" translate="yes" xml:space="preserve">
          <source>attr(optional)&lt;code&gt;do&lt;/code&gt;statement&lt;code&gt;while (&lt;/code&gt;expression&lt;code&gt;)&lt;/code&gt;&lt;code&gt;;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eafa85001b34cfdf23f4a17bb1886e99148ea35" translate="yes" xml:space="preserve">
          <source>attr(optional)&lt;code&gt;do&lt;/code&gt;statement&lt;code&gt;while&lt;/code&gt;&lt;code&gt;(&lt;/code&gt;expression&lt;code&gt;)&lt;/code&gt;&lt;code&gt;;&lt;/code&gt;</source>
          <target state="translated">attr(optional)&lt;code&gt;do&lt;/code&gt;statement&lt;code&gt;while&lt;/code&gt;&lt;code&gt;(&lt;/code&gt;expression&lt;code&gt;)&lt;/code&gt;&lt;code&gt;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="36478518bda66e3b0c96b6ffebd9d1556f11e6c1" translate="yes" xml:space="preserve">
          <source>attr(optional)&lt;code&gt;for (&lt;/code&gt;declaration-or-expression(optional)&lt;code&gt;;&lt;/code&gt;declaration-or-expression(optional)&lt;code&gt;;&lt;/code&gt;expression(optional)&lt;code&gt;)&lt;/code&gt;statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1562ec1823fbc0937721dcf1bd8f6e1f92c4aee3" translate="yes" xml:space="preserve">
          <source>attr(optional)&lt;code&gt;for (&lt;/code&gt;init-statement(optional)range_declaration&lt;code&gt;:&lt;/code&gt;range_expression&lt;code&gt;)&lt;/code&gt;loop_statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7777604154169ee901bce428700ce917d24fe366" translate="yes" xml:space="preserve">
          <source>attr(optional)&lt;code&gt;for (&lt;/code&gt;init-statementcondition(optional)&lt;code&gt;;&lt;/code&gt;iteration_expression(optional)&lt;code&gt;)&lt;/code&gt;statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32d06ae6cccf2090b768127bac3dcc1085f87b57" translate="yes" xml:space="preserve">
          <source>attr(optional)&lt;code&gt;for (&lt;/code&gt;range_declaration&lt;code&gt;:&lt;/code&gt;range_expression&lt;code&gt;)&lt;/code&gt;loop_statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2b433c759bde7431d39ac95a90241d75730cc98" translate="yes" xml:space="preserve">
          <source>attr(optional)&lt;code&gt;for&lt;/code&gt;&lt;code&gt;(&lt;/code&gt;for-range-decl&lt;code&gt;:&lt;/code&gt;for-range-init&lt;code&gt;)&lt;/code&gt;statement</source>
          <target state="translated">attr(optional)&lt;code&gt;for&lt;/code&gt;&lt;code&gt;(&lt;/code&gt;for-range-decl&lt;code&gt;:&lt;/code&gt;for-range-init&lt;code&gt;)&lt;/code&gt;statement</target>
        </trans-unit>
        <trans-unit id="1881bbc0c96a7bb8d497a7c0fd19db0023fa8f38" translate="yes" xml:space="preserve">
          <source>attr(optional)&lt;code&gt;for&lt;/code&gt;&lt;code&gt;(&lt;/code&gt;init-statementcondition(optional)&lt;code&gt;;&lt;/code&gt;expression(optional)&lt;code&gt;)&lt;/code&gt;statement</source>
          <target state="translated">attr(optional)&lt;code&gt;for&lt;/code&gt;&lt;code&gt;(&lt;/code&gt;init-statementcondition(optional)&lt;code&gt;;&lt;/code&gt;expression(optional)&lt;code&gt;)&lt;/code&gt;statement</target>
        </trans-unit>
        <trans-unit id="1d75adfb896144d0ec994ac080484e839b18b207" translate="yes" xml:space="preserve">
          <source>attr(optional)&lt;code&gt;goto&lt;/code&gt;identifier&lt;code&gt;;&lt;/code&gt;</source>
          <target state="translated">attr(optional)&lt;code&gt;goto&lt;/code&gt;identifier&lt;code&gt;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b465e6550fb80f5355a0d533ffd5bcf58e32b129" translate="yes" xml:space="preserve">
          <source>attr(optional)&lt;code&gt;goto&lt;/code&gt;label&lt;code&gt;;&lt;/code&gt;</source>
          <target state="translated">attr(optional)&lt;code&gt;goto&lt;/code&gt;label&lt;code&gt;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f8d1240e1d1d237120ec257d56a13f7b5b0f9a40" translate="yes" xml:space="preserve">
          <source>attr(optional)&lt;code&gt;if&lt;/code&gt;&lt;code&gt;(&lt;/code&gt;condition&lt;code&gt;)&lt;/code&gt;statement</source>
          <target state="translated">attr(optional)&lt;code&gt;if&lt;/code&gt;&lt;code&gt;(&lt;/code&gt;condition&lt;code&gt;)&lt;/code&gt;statement</target>
        </trans-unit>
        <trans-unit id="314ebe999b6414ab24c771e2f2cff9f6e2f35fb9" translate="yes" xml:space="preserve">
          <source>attr(optional)&lt;code&gt;if&lt;/code&gt;&lt;code&gt;(&lt;/code&gt;condition&lt;code&gt;)&lt;/code&gt;statement-true</source>
          <target state="translated">attr(optional)&lt;code&gt;if&lt;/code&gt;&lt;code&gt;(&lt;/code&gt;condition&lt;code&gt;)&lt;/code&gt;statement-true</target>
        </trans-unit>
        <trans-unit id="272e7d63221923d124153ab35d1fcdea99ae1c06" translate="yes" xml:space="preserve">
          <source>attr(optional)&lt;code&gt;if&lt;/code&gt;&lt;code&gt;(&lt;/code&gt;condition&lt;code&gt;)&lt;/code&gt;statement-true&lt;code&gt;else&lt;/code&gt;statement-false</source>
          <target state="translated">attr(optional)&lt;code&gt;if&lt;/code&gt;&lt;code&gt;(&lt;/code&gt;condition&lt;code&gt;)&lt;/code&gt;statement-true&lt;code&gt;else&lt;/code&gt;statement-false</target>
        </trans-unit>
        <trans-unit id="6808b6470527401f10b80e1be9f5ff401627ce2a" translate="yes" xml:space="preserve">
          <source>attr(optional)&lt;code&gt;if&lt;/code&gt;&lt;code&gt;(&lt;/code&gt;condition&lt;code&gt;)&lt;/code&gt;statement&lt;code&gt;else&lt;/code&gt;statement</source>
          <target state="translated">attr(optional)&lt;code&gt;if&lt;/code&gt;&lt;code&gt;(&lt;/code&gt;condition&lt;code&gt;)&lt;/code&gt;statement&lt;code&gt;else&lt;/code&gt;statement</target>
        </trans-unit>
        <trans-unit id="4277687efe7f1a6c08d95777e0b5dc9dbe11bcc7" translate="yes" xml:space="preserve">
          <source>attr(optional)&lt;code&gt;if&lt;/code&gt;&lt;code&gt;constexpr&lt;/code&gt;(optional)&lt;code&gt;(&lt;/code&gt;init-statement(optional)condition&lt;code&gt;)&lt;/code&gt;statement</source>
          <target state="translated">attr(optional)&lt;code&gt;if&lt;/code&gt;&lt;code&gt;constexpr&lt;/code&gt;(optional)&lt;code&gt;(&lt;/code&gt;init-statement(optional)condition&lt;code&gt;)&lt;/code&gt;statement</target>
        </trans-unit>
        <trans-unit id="732dfac0b35d3478ff0ec3c8ea6cb5a404b51513" translate="yes" xml:space="preserve">
          <source>attr(optional)&lt;code&gt;if&lt;/code&gt;&lt;code&gt;constexpr&lt;/code&gt;(optional)&lt;code&gt;(&lt;/code&gt;init-statement(optional)condition&lt;code&gt;)&lt;/code&gt;statement-true</source>
          <target state="translated">attr(optional)&lt;code&gt;if&lt;/code&gt;&lt;code&gt;constexpr&lt;/code&gt;(optional)&lt;code&gt;(&lt;/code&gt;init-statement(optional)condition&lt;code&gt;)&lt;/code&gt;statement-true</target>
        </trans-unit>
        <trans-unit id="3ea429d83752525d25c0cd219e7d56e0fe3d2c89" translate="yes" xml:space="preserve">
          <source>attr(optional)&lt;code&gt;if&lt;/code&gt;&lt;code&gt;constexpr&lt;/code&gt;(optional)&lt;code&gt;(&lt;/code&gt;init-statement(optional)condition&lt;code&gt;)&lt;/code&gt;statement-true&lt;code&gt;else&lt;/code&gt;statement-false</source>
          <target state="translated">attr(optional)&lt;code&gt;if&lt;/code&gt;&lt;code&gt;constexpr&lt;/code&gt;(optional)&lt;code&gt;(&lt;/code&gt;init-statement(optional)condition&lt;code&gt;)&lt;/code&gt;statement-true&lt;code&gt;else&lt;/code&gt;statement-false</target>
        </trans-unit>
        <trans-unit id="a78bae9b7f71b453bb44a789019d2342037168ae" translate="yes" xml:space="preserve">
          <source>attr(optional)&lt;code&gt;if&lt;/code&gt;&lt;code&gt;constexpr&lt;/code&gt;(optional)&lt;code&gt;(&lt;/code&gt;init-statement(optional)condition&lt;code&gt;)&lt;/code&gt;statement&lt;code&gt;else&lt;/code&gt;statement</source>
          <target state="translated">attr(optional)&lt;code&gt;if&lt;/code&gt;&lt;code&gt;constexpr&lt;/code&gt;(optional)&lt;code&gt;(&lt;/code&gt;init-statement(optional)condition&lt;code&gt;)&lt;/code&gt;statement&lt;code&gt;else&lt;/code&gt;statement</target>
        </trans-unit>
        <trans-unit id="bae968831483e480eabfc37a9975ed9c37aa37f1" translate="yes" xml:space="preserve">
          <source>attr(optional)&lt;code&gt;return&lt;/code&gt;braced-init-list&lt;code&gt;;&lt;/code&gt;</source>
          <target state="translated">attr(optional)&lt;code&gt;return&lt;/code&gt;braced-init-list&lt;code&gt;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f15dabb59017e60fbd8d6c5a37221b6148c7eb40" translate="yes" xml:space="preserve">
          <source>attr(optional)&lt;code&gt;return&lt;/code&gt;expression(optional)&lt;code&gt;;&lt;/code&gt;</source>
          <target state="translated">attr(optional)&lt;code&gt;return&lt;/code&gt;expression(optional)&lt;code&gt;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c8f01107cabf001458947a61e2c68835bb7d3465" translate="yes" xml:space="preserve">
          <source>attr(optional)&lt;code&gt;switch&lt;/code&gt;&lt;code&gt;(&lt;/code&gt;condition&lt;code&gt;)&lt;/code&gt;statement</source>
          <target state="translated">attr(optional)&lt;code&gt;switch&lt;/code&gt;&lt;code&gt;(&lt;/code&gt;condition&lt;code&gt;)&lt;/code&gt;statement</target>
        </trans-unit>
        <trans-unit id="bf6ed32a10b6f131bd93039ca13a01017cd3006f" translate="yes" xml:space="preserve">
          <source>attr(optional)&lt;code&gt;switch&lt;/code&gt;&lt;code&gt;(&lt;/code&gt;init-statement(optional)condition&lt;code&gt;)&lt;/code&gt;statement</source>
          <target state="translated">attr(optional)&lt;code&gt;switch&lt;/code&gt;&lt;code&gt;(&lt;/code&gt;init-statement(optional)condition&lt;code&gt;)&lt;/code&gt;statement</target>
        </trans-unit>
        <trans-unit id="f6529a79e079cc46fb0a979a3efe969fb16f96ab" translate="yes" xml:space="preserve">
          <source>attr(optional)&lt;code&gt;try&lt;/code&gt;compound-statementhandler-sequence</source>
          <target state="translated">attr(optional)&lt;code&gt;try&lt;/code&gt;compound-statementhandler-sequence</target>
        </trans-unit>
        <trans-unit id="8443b8b7b55821d56f64aa6119853f05478805d9" translate="yes" xml:space="preserve">
          <source>attr(optional)&lt;code&gt;using&lt;/code&gt;&lt;code&gt;namespace&lt;/code&gt;nested-name-specifier(optional)namespace-name&lt;code&gt;;&lt;/code&gt;</source>
          <target state="translated">attr(optional)&lt;code&gt;using&lt;/code&gt;&lt;code&gt;namespace&lt;/code&gt;nested-name-specifier(optional)namespace-name&lt;code&gt;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bbc5e8b4979c13e8ba780c78b141b58e99a5529d" translate="yes" xml:space="preserve">
          <source>attr(optional)&lt;code&gt;while (&lt;/code&gt;condition&lt;code&gt;)&lt;/code&gt;statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84278f8aca858e20209ab96412e71d65048cab2d" translate="yes" xml:space="preserve">
          <source>attr(optional)&lt;code&gt;while&lt;/code&gt;&lt;code&gt;(&lt;/code&gt;condition&lt;code&gt;)&lt;/code&gt;statement</source>
          <target state="translated">attr(optional)&lt;code&gt;while&lt;/code&gt;&lt;code&gt;(&lt;/code&gt;condition&lt;code&gt;)&lt;/code&gt;statement</target>
        </trans-unit>
        <trans-unit id="f3aac815a0225c0668c41f7773a9d2e4184d32f3" translate="yes" xml:space="preserve">
          <source>attr(optional)&lt;code&gt;{&lt;/code&gt;statement...(optional)&lt;code&gt;} &lt;/code&gt;</source>
          <target state="translated">attr(optional)&lt;code&gt;{&lt;/code&gt;statement...(optional)&lt;code&gt;} &lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8d07dacfad470e8720976cfea56be811c0277175" translate="yes" xml:space="preserve">
          <source>attr(optional)access-specifier(optional)virtual-specifier(optional)class-or-decltype</source>
          <target state="translated">attr(optional)access-specifier(optional)virtual-specifier(optional)class-or-decltype</target>
        </trans-unit>
        <trans-unit id="238fc5f79f459b7cf31f46448b134f66c1a3eb2c" translate="yes" xml:space="preserve">
          <source>attr(optional)cv-autoref-operator(optional)&lt;code&gt;[&lt;/code&gt;identifier-list&lt;code&gt;]&lt;/code&gt;&lt;code&gt;(&lt;/code&gt;expression&lt;code&gt;) &lt;/code&gt;&lt;code&gt;;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b6dd90d31ad515883bc28070cded0fffb7c080a" translate="yes" xml:space="preserve">
          <source>attr(optional)cv-autoref-operator(optional)&lt;code&gt;[&lt;/code&gt;identifier-list&lt;code&gt;]&lt;/code&gt;&lt;code&gt;=&lt;/code&gt;expression&lt;code&gt;;&lt;/code&gt;</source>
          <target state="translated">attr(optional)cv-autoref-operator(optional)&lt;code&gt;[&lt;/code&gt;identifier-list&lt;code&gt;]&lt;/code&gt;&lt;code&gt;=&lt;/code&gt;expression&lt;code&gt;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="97687146b1d098a84e77a730e8a154d5d37621b7" translate="yes" xml:space="preserve">
          <source>attr(optional)cv-autoref-operator(optional)&lt;code&gt;[&lt;/code&gt;identifier-list&lt;code&gt;]&lt;/code&gt;&lt;code&gt;{&lt;/code&gt;expression&lt;code&gt;} &lt;/code&gt;&lt;code&gt;;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8d4436d7896ff6b8df65899a700e1d345027a6d" translate="yes" xml:space="preserve">
          <source>attr(optional)decl-specifier-seq(optional)declaratorvirt-specifier-seq(optional)function-body</source>
          <target state="translated">attr(optional)decl-specifier-seq(optional)declaratorvirt-specifier-seq(optional)function-body</target>
        </trans-unit>
        <trans-unit id="6d7d965e06590d38da833c3927b32e0b0fa17f15" translate="yes" xml:space="preserve">
          <source>attr(optional)decl-specifier-seq(optional)id-expression&lt;code&gt;(&lt;/code&gt;&lt;code&gt;void&lt;/code&gt;(optional)&lt;code&gt;)&lt;/code&gt;except(optional)attr(optional)&lt;code&gt;;&lt;/code&gt;</source>
          <target state="translated">attr(optional)decl-specifier-seq(optional)id-expression&lt;code&gt;(&lt;/code&gt;&lt;code&gt;void&lt;/code&gt;(optional)&lt;code&gt;)&lt;/code&gt;except(optional)attr(optional)&lt;code&gt;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7414cd0305e9d166c96a38f4c6234681d66b9dcc" translate="yes" xml:space="preserve">
          <source>attr(optional)decl-specifier-seq(optional)member-declarator-list(optional)&lt;code&gt;;&lt;/code&gt;</source>
          <target state="translated">attr(optional)decl-specifier-seq(optional)member-declarator-list(optional)&lt;code&gt;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1aa01c2f228a3867d4a98a8085801e2296591747" translate="yes" xml:space="preserve">
          <source>attr(optional)decl-specifier-seqabstract-declarator(optional)</source>
          <target state="translated">attr(optional)decl-specifier-seqabstract-declarator(optional)</target>
        </trans-unit>
        <trans-unit id="0d39b65796fd5945a79ed6ad7ff3fb8aa8b1c088" translate="yes" xml:space="preserve">
          <source>attr(optional)decl-specifier-seqabstract-declarator(optional)&lt;code&gt;= &lt;/code&gt;initializer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="777c0cceaaf267179f9790443e74c062cabd791e" translate="yes" xml:space="preserve">
          <source>attr(optional)decl-specifier-seqdeclarator</source>
          <target state="translated">attr(optional)decl-specifier-seqdeclarator</target>
        </trans-unit>
        <trans-unit id="17516e70319ee4621318bac7f269782b22a8633c" translate="yes" xml:space="preserve">
          <source>attr(optional)decl-specifier-seqdeclarator&lt;code&gt;= &lt;/code&gt;initializer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d644294f14863f4bef9cea01a3e9c15dee7c3ee" translate="yes" xml:space="preserve">
          <source>attr(optional)declarator&lt;code&gt;;&lt;/code&gt;</source>
          <target state="translated">attr(optional)declarator&lt;code&gt;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e366c52205572702d3ba9c6eeaf044ab9ad63001" translate="yes" xml:space="preserve">
          <source>attr(optional)expression(optional)&lt;code&gt;;&lt;/code&gt;</source>
          <target state="translated">attr(optional)expression(optional)&lt;code&gt;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="aa597ac4c000ab361bf69196209724899f4586db" translate="yes" xml:space="preserve">
          <source>attr(optional)identifier&lt;code&gt;:&lt;/code&gt;statement</source>
          <target state="translated">attr(optional)identifier&lt;code&gt;:&lt;/code&gt;statement</target>
        </trans-unit>
        <trans-unit id="dfe2978421b7327af35b1854530cc6505a1105c3" translate="yes" xml:space="preserve">
          <source>attr(since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eabc179259fefb3b72737b7068304833f4d0d36c" translate="yes" xml:space="preserve">
          <source>attr&lt;code&gt;]]&lt;/code&gt;&lt;code&gt;[[&lt;/code&gt;attr1, attr2, attr3&lt;code&gt;(&lt;/code&gt;args&lt;code&gt;)&lt;/code&gt;&lt;code&gt;]]&lt;/code&gt;&lt;code&gt;[[&lt;/code&gt;namespace&lt;code&gt;::&lt;/code&gt;attr&lt;code&gt;(&lt;/code&gt;args&lt;code&gt;)&lt;/code&gt;&lt;code&gt;]]&lt;/code&gt;alignas_specifier</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d077461ec426a6d289ae0ef4f7f29656b797c449" translate="yes" xml:space="preserve">
          <source>attrdecl-specifier-seqinit-declarator-list&lt;code&gt;;&lt;/code&gt;</source>
          <target state="translated">attrdecl-specifier-seqinit-declarator-list&lt;code&gt;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="883ba3217125eef0658a57645e9c213b8f518e7d" translate="yes" xml:space="preserve">
          <source>attribute specifier sequence(since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d33c29281569fb7d2afb290c6ffaf892a8547193" translate="yes" xml:space="preserve">
          <source>attribute-namespace&lt;code&gt;::&lt;/code&gt;identifier</source>
          <target state="translated">attribute-namespace&lt;code&gt;::&lt;/code&gt;identifier</target>
        </trans-unit>
        <trans-unit id="68522e4f2d0863202de4220d18abca23e750cc4f" translate="yes" xml:space="preserve">
          <source>attribute-namespace&lt;code&gt;::&lt;/code&gt;identifier&lt;code&gt;(&lt;/code&gt;argument-list&lt;code&gt;)&lt;/code&gt;</source>
          <target state="translated">attribute-namespace&lt;code&gt;::&lt;/code&gt;identifier&lt;code&gt;(&lt;/code&gt;argument-list&lt;code&gt;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3655ff4bcb967811c9689f9797ac3e2a4c38179a" translate="yes" xml:space="preserve">
          <source>attribute-token</source>
          <target state="translated">attribute-token</target>
        </trans-unit>
        <trans-unit id="41157ac8f8d9bdf1b1a3e1742394923c4a4e1f05" translate="yes" xml:space="preserve">
          <source>attribute: carries_dependency</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="043750795611190c23a0919a6768474be12dbca7" translate="yes" xml:space="preserve">
          <source>attribute: deprecated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77acc7e1e1e3b2d3d2ab4788a8e0efbb02bb6c78" translate="yes" xml:space="preserve">
          <source>attribute: fallthrough</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="305ce0f499a04db218525b3f30c06ab5c9786bc7" translate="yes" xml:space="preserve">
          <source>attribute: maybe_unused</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2148b6ccfc28dcd7e2661b38f3d4447e192ef0a3" translate="yes" xml:space="preserve">
          <source>attribute: no_unique_address</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="844b1b34a4e9d5065949cd8a0e77886534ed380b" translate="yes" xml:space="preserve">
          <source>attribute: nodiscard</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91875451ab675bc0d9f22c9f4c2c5b94d103dc7b" translate="yes" xml:space="preserve">
          <source>attribute: noreturn</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acc62f33569a62005bc01620a476859a5d607499" translate="yes" xml:space="preserve">
          <source>attribute: optimize_for_synchronized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="522603b2d16d4fcb35fb583158426539feeaae05" translate="yes" xml:space="preserve">
          <source>audible bell</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7876153ada8274a24c48647e87674701755f9d09" translate="yes" xml:space="preserve">
          <source>audit</source>
          <target state="translated">audit</target>
        </trans-unit>
        <trans-unit id="0d612c12d2ac33625bf3e0351b6f5e4f73829fa8" translate="yes" xml:space="preserve">
          <source>auto</source>
          <target state="translated">auto</target>
        </trans-unit>
        <trans-unit id="356fc001586dadfe716887a6cece046c1cec160e" translate="yes" xml:space="preserve">
          <source>auto specifier</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="617d83fe69edb61435af21ff782aa989a1f6d982" translate="yes" xml:space="preserve">
          <source>auto type deduction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="191de89387986319425da966c630e5339743aaaa" translate="yes" xml:space="preserve">
          <source>auto-returning functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="497c5e5f94a0837449213744b5f629d46e6679ac" translate="yes" xml:space="preserve">
          <source>auto_ptr</source>
          <target state="translated">auto_ptr</target>
        </trans-unit>
        <trans-unit id="ebe8872498bd7a369441cf75f56db2bf3701eef9" translate="yes" xml:space="preserve">
          <source>automatic</source>
          <target state="translated">automatic</target>
        </trans-unit>
        <trans-unit id="3b3cd5b0229377b22cc7f98409a56cde1891196c" translate="yes" xml:space="preserve">
          <source>automatic storage duration specifier</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de98d1647a4fc96cc34b04ddf1cb5bd19b0f61dd" translate="yes" xml:space="preserve">
          <source>automatically generates comparison operators based on user-defined &lt;code&gt;operator==&lt;/code&gt; and &lt;code&gt;operator&amp;lt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33738be9ce8162d31c570c20d9edad93788fdd97" translate="yes" xml:space="preserve">
          <source>average linear, worst quadratic (in &lt;code&gt;b.size()&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6ace100e668ac2dca3546f9cc5c011bb5dddb51" translate="yes" xml:space="preserve">
          <source>average linear, worst quadratin (on the distance between &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e34718bf780cca168bc7d975b45c460aeecf6e0f" translate="yes" xml:space="preserve">
          <source>avoided by making it a template</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e3cb168177e31139cfff64de1cdc2431a9d7147" translate="yes" xml:space="preserve">
          <source>await-expression (C++20)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c027a379a046e31dfb0f6b178d42c47ae4aba491" translate="yes" xml:space="preserve">
          <source>awk</source>
          <target state="translated">awk</target>
        </trans-unit>
        <trans-unit id="b85b34a6def6d2fcbe94ed053a40cb675d86175a" translate="yes" xml:space="preserve">
          <source>axiom</source>
          <target state="translated">axiom</target>
        </trans-unit>
        <trans-unit id="e9d71f5ee7c92d6dc9e92ffdad17b8bd49418f98" translate="yes" xml:space="preserve">
          <source>b</source>
          <target state="translated">b</target>
        </trans-unit>
        <trans-unit id="969de5b74511ecbc3dca7477dbfd048afae16562" translate="yes" xml:space="preserve">
          <source>b &amp;minus; a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c00544865dbe9e4df8523118c223bd87f890b1f" translate="yes" xml:space="preserve">
          <source>b &amp;minus; a + 1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9e449aaf8257260bfd33cdce7416214b474ec24" translate="yes" xml:space="preserve">
          <source>b) 10 digit characters from &lt;code&gt;'0'&lt;/code&gt; to &lt;code&gt;'9'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="745818c1dc67a9d8b86a6ea03e4ad9d589f4bf7e" translate="yes" xml:space="preserve">
          <source>b) All of its direct and indirect base classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b833ad7df3236cdcf5b7efb34b599cf9e7fab8a" translate="yes" xml:space="preserve">
          <source>b) If &lt;code&gt;D&lt;/code&gt; is an lvalue-reference type &lt;code&gt;A&amp;amp;&lt;/code&gt;, then the signatures are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d85be76d70ad61bb53c06db846c1f2f626ae095" translate="yes" xml:space="preserve">
          <source>b) If expression is not a glvalue expression of polymorphic type, &lt;code&gt;typeid&lt;/code&gt; does &lt;a href=&quot;expressions#Unevaluated_expressions&quot;&gt;not evaluate the expression&lt;/a&gt;, and the &lt;code&gt;&lt;a href=&quot;../types/type_info&quot;&gt;std::type_info&lt;/a&gt;&lt;/code&gt; object it identifies represents the static type of the expression. Lvalue-to-rvalue, array-to-pointer, or function-to-pointer conversions are not performed. &lt;a href=&quot;implicit_cast#Temporary_materialization&quot;&gt;Temporary materialization&lt;/a&gt;, however, is (formally) performed for prvalue arguments: typeid determines the type of the result object.(since C++17)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bf7f6dc3e74f18f5f61876da7ce4633e89169ee" translate="yes" xml:space="preserve">
          <source>b) If it is a trailing-return-type, then the result of expression must be &lt;a href=&quot;implicit_cast&quot;&gt;implicitly convertible&lt;/a&gt; to the type named. If conversion fails, the enclosing requires-expression is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e87cdd660d4f12b68ef50288b60f3e6d6a7655f" translate="yes" xml:space="preserve">
          <source>b) If the caller was wrong and the putback position is in fact available, simply decrements &lt;a href=&quot;../basic_streambuf/gptr&quot;&gt;&lt;code&gt;basic_streambuf::gptr()&lt;/code&gt;&lt;/a&gt;, e.g. by calling &lt;code&gt;gbump(-1)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ffda75e5318679a06f3d8cf0936851f6386fc38" translate="yes" xml:space="preserve">
          <source>b) If the next character is whitespace, as indicated by the locale provided in the stream &lt;code&gt;str&lt;/code&gt; (i.e. &lt;code&gt;std::isspace(*fmtbeg, str.getloc()) == true&lt;/code&gt;, the function keeps incrementing &lt;code&gt;fmtbeg&lt;/code&gt; until it either becomes equal to &lt;code&gt;fmtend&lt;/code&gt; or points to a non-whitespace character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf5d08a674da9d9e859c3f5ca0fa7c553c80678b" translate="yes" xml:space="preserve">
          <source>b) Initializes the buffer state to &quot;constant&quot; (the buffer is a user-provided fixed-size buffer)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a59263b0128f0430b6b17d752c4efa6dd437212d" translate="yes" xml:space="preserve">
          <source>b) Or, if not that, the rank of &lt;code&gt;S1&lt;/code&gt; is better than the rank of &lt;code&gt;S2&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="688b46e2fcc381be978c29e69fb25f635ff7d564" translate="yes" xml:space="preserve">
          <source>b) Otherwise (if the first character is the delimiter):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c589d6be02285af347d8071aa278431218f658db" translate="yes" xml:space="preserve">
          <source>b) Otherwise, if &lt;code&gt;(os.flags() &amp;amp; ios_base::adjustfield) == ios_base::left&lt;/code&gt;, places &lt;code&gt;os.width()-str.size()&lt;/code&gt; copies of the &lt;code&gt;os.fill()&lt;/code&gt; character after the character sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6acf8f49b56e2ab7f5321f5f261b159d85e61e0" translate="yes" xml:space="preserve">
          <source>b) Otherwise, if &lt;code&gt;(os.flags() &amp;amp; ios_base::adjustfield) == ios_base::left&lt;/code&gt;, places &lt;code&gt;os.width()-v.size()&lt;/code&gt; copies of the &lt;code&gt;os.fill()&lt;/code&gt; character after the character sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f490c04c95f24cc8adf44c005a317bba57ee0a07" translate="yes" xml:space="preserve">
          <source>b) Otherwise, if expression points/refers to a public base of the most derived object, and, simultaneously, the most derived object has an unambiguous public base class of type &lt;code&gt;Derived&lt;/code&gt;, the result of the cast points/refers to that &lt;code&gt;Derived&lt;/code&gt; (This is known as a &quot;sidecast&quot;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d1ee083ecfff5d498073b4953f25f21c3d1eba3" translate="yes" xml:space="preserve">
          <source>b) Otherwise, if the buffer is allowed to modify its own get area, decrements &lt;a href=&quot;../basic_streambuf/gptr&quot;&gt;&lt;code&gt;basic_streambuf::gptr()&lt;/code&gt;&lt;/a&gt; and writes &lt;code&gt;c&lt;/code&gt; to the location pointed to gptr() after adjustment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f9509314d8e4c46a94728e27a521d256aa2e098" translate="yes" xml:space="preserve">
          <source>b) The defaulted copy constructor (3) is defined as deleted if &lt;code&gt;&lt;a href=&quot;../../types/is_copy_constructible&quot;&gt;std::is_copy_constructible_v&lt;/a&gt;&amp;lt;TimeZonePtr&amp;gt;&lt;/code&gt; is false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe62c5bff9daba06a2a16b0ad8d33d5eb201175e" translate="yes" xml:space="preserve">
          <source>b) The namespaces in which any template template arguments are members</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c284200513469ff1c6defad7c2d9a10abe071d57" translate="yes" xml:space="preserve">
          <source>b) Then checks what character is in the putback position. If the character held there is already equal to &lt;code&gt;(char)c&lt;/code&gt;, then simply decrements &lt;a href=&quot;../basic_streambuf/gptr&quot;&gt;&lt;code&gt;basic_streambuf::gptr()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60f83e5e0700ef5280572f2c69d3b6aa2b220a7a" translate="yes" xml:space="preserve">
          <source>b) Then checks what character is in the putback position. If the character held there is already equal to &lt;code&gt;c&lt;/code&gt;, as determined by &lt;code&gt;Traits::eq(to_char_type(c), gptr()[-1])&lt;/code&gt;, then simply decrements &lt;a href=&quot;../basic_streambuf/gptr&quot;&gt;&lt;code&gt;basic_streambuf::gptr()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c367d89a88d7598996622bafa4a3efc294e1a4e0" translate="yes" xml:space="preserve">
          <source>b) Then every character from &lt;code&gt;s&lt;/code&gt;, except if the next character to output equals &lt;code&gt;delim&lt;/code&gt; or equals &lt;code&gt;escape&lt;/code&gt; (as determined by the stream's &lt;code&gt;traits_type::eq&lt;/code&gt;), then first appends an extra copy of &lt;code&gt;escape&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a3d59db25a528306f156294a2c3134d241bfca1" translate="yes" xml:space="preserve">
          <source>b) There was a parsing error (&lt;code&gt;err != &lt;a href=&quot;../../io/ios_base/iostate&quot;&gt;std::ios_base::goodbit&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fdf6f8cfc146d20b94e04a3ff725722e071afb7" translate="yes" xml:space="preserve">
          <source>b) U is not an array type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bc0ecebd06886d78ad624872831056f4d7910c8" translate="yes" xml:space="preserve">
          <source>b) aliases of existing types, defined with &lt;a href=&quot;typedef&quot;&gt;typedef&lt;/a&gt; or &lt;a href=&quot;type_alias&quot;&gt;type alias&lt;/a&gt; declarations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5ec061146428007af356491910ebdf97480d9a5" translate="yes" xml:space="preserve">
          <source>b) all member functions of some class &lt;code&gt;T&lt;/code&gt;, in which case, if &lt;a href=&quot;this&quot;&gt;this&lt;/a&gt; is in scope and is a pointer to &lt;code&gt;T&lt;/code&gt; or to a derived class of &lt;code&gt;T&lt;/code&gt;, &lt;code&gt;*this&lt;/code&gt; is used as the implied object argument. Otherwise (if &lt;code&gt;this&lt;/code&gt; is not in scope or does not point to &lt;code&gt;T&lt;/code&gt;), a fake object of type &lt;code&gt;T&lt;/code&gt; is used as the implied object argument, and if overload resolution subsequently selects a non-static member function, the program is ill-formed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7694bd09956a19773be1f55db6c3899d3488f67b" translate="yes" xml:space="preserve">
          <source>b) allocating a new memory block of size &lt;code&gt;new_size&lt;/code&gt; bytes, copying memory area with size equal the lesser of the new and the old sizes, and freeing the old block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00d5e4582cd7ead7322b6d9afa07f90a81f0f65c" translate="yes" xml:space="preserve">
          <source>b) if &lt;code&gt;A&lt;/code&gt; is a pointer or pointer to member type, the deduced &lt;code&gt;A&lt;/code&gt; is allowed to be any pointer that can be converted to &lt;code&gt;A&lt;/code&gt; by qualification conversion:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe2f450dad8db0bb5c08109fcf9252d0bab7f8bf" translate="yes" xml:space="preserve">
          <source>b) if &lt;code&gt;E&lt;/code&gt; is a non-reference type, this deleter is move constructed from &lt;code&gt;u&lt;/code&gt;'s deleter (requires that this construction does not throw)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d1c975ffa25eb948dafbc2bf53470be3094ac33" translate="yes" xml:space="preserve">
          <source>b) if &lt;code&gt;dir == ios_base::cur&lt;/code&gt;, then &lt;code&gt;newoff&lt;/code&gt; is the current position of the pointer (&lt;code&gt;gptr()-eback()&lt;/code&gt; or &lt;code&gt;pptr()-pbase()&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="754321894ca56cf99e221cba1be767c7f6d7cc79" translate="yes" xml:space="preserve">
          <source>b) if &lt;code&gt;way == ios_base::cur&lt;/code&gt;, then &lt;code&gt;newoff&lt;/code&gt; is the current position of the pointer (&lt;code&gt;gptr()-eback()&lt;/code&gt; or &lt;code&gt;pptr()-pbase()&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53a0c36c4b1f0c520706df996184fb213c8daf99" translate="yes" xml:space="preserve">
          <source>b) if A is the left operand of the built-in &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt;, &lt;code&gt;?:&lt;/code&gt;, or &lt;code&gt;,&lt;/code&gt; operators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ac3ac8f20099ce72c9791ea7ea504ad4935cf4c" translate="yes" xml:space="preserve">
          <source>b) if the &lt;code&gt;app&lt;/code&gt; bit is set in &lt;code&gt;mode&lt;/code&gt;, constructs the buffer by calling &lt;code&gt;strstreambuf(s, n, s + &lt;a href=&quot;../../string/byte/strlen&quot;&gt;std::strlen&lt;/a&gt;(s))&lt;/code&gt;. The behavior is undefined if there are less than &lt;code&gt;n&lt;/code&gt; elements in the array whose first element is pointed to by &lt;code&gt;s&lt;/code&gt; or if the array does not contain a valid null-terminated character sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d8ec3a813940d2c17439c1198683b0cb09b976f" translate="yes" xml:space="preserve">
          <source>b) if the return type is an array type and &lt;code&gt;A&lt;/code&gt; is not a reference type, then &lt;code&gt;P&lt;/code&gt; is the pointer type obtained by array-to-pointer conversion;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f7aa99854ecae1768992cfc21712a595b30235c" translate="yes" xml:space="preserve">
          <source>b) if the value category of expression is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a666bbb2f16711efedfbf9bbbe98388eb8131dfd" translate="yes" xml:space="preserve">
          <source>b) its address cannot be taken</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46ce74932dab04935780ff6597ceceb8528203aa" translate="yes" xml:space="preserve">
          <source>b) otherwise, if &lt;code&gt;A&lt;/code&gt; is a function type, &lt;code&gt;A&lt;/code&gt; is replaced by the pointer type obtained from function-to-pointer conversion;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f027267bce2aae5df6db3f25fa87585399a26366" translate="yes" xml:space="preserve">
          <source>b) otherwise, the overload set must include either, but not both, a raw literal operator or a numeric literal operator template. If the overload set includes a raw literal operator, the user-defined literal expression is treated as a function call &lt;code&gt;operator &quot;&quot; X(&quot;f&quot;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e79ba1ea1aa0d17f4d098370870f357cd22f0ab" translate="yes" xml:space="preserve">
          <source>b) otherwise, the overload set must include either, but not both, a raw literal operator or a numeric literal operator template. If the overload set includes a raw literal operator, the user-defined literal expression is treated as a function call &lt;code&gt;operator &quot;&quot; X(&quot;n&quot;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bef1d94f733cdc8a5ef971fb3dcc84b9beb1650" translate="yes" xml:space="preserve">
          <source>b) otherwise, the user-defined literal expression is treated as a function call &lt;code&gt;operator &quot;&quot; X (str, len)&lt;/code&gt;, where &lt;code&gt;len&lt;/code&gt; is the length of the string literal, excluding the terminating null character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1146aa94a7746ba15e34d798a742206533e83429" translate="yes" xml:space="preserve">
          <source>b) pointer to function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="455c43cc2ea4f88e63ed680a2b887768a90cc0e3" translate="yes" xml:space="preserve">
          <source>b) the entire body of its base class(es), recursing into their bases when no declarations are found</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df67698d7f650397971a8f11aa81e53cb528ad2e" translate="yes" xml:space="preserve">
          <source>b) the next available input character is &lt;code&gt;delim&lt;/code&gt;, as tested by &lt;code&gt;Traits::eq(c, delim)&lt;/code&gt;, in which case the delimiter character is extracted from &lt;code&gt;input&lt;/code&gt;, but is not appended to &lt;code&gt;str&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9a53cc7def7b308a2085427c95e5a45cb6eb44a" translate="yes" xml:space="preserve">
          <source>b)&lt;a href=&quot;name&quot;&gt;identifiers&lt;/a&gt;</source>
          <target state="translated">b)&lt;a href=&quot;name&quot;&gt;identifiers&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="92f893802ba003f9a72aedfba161e30f1fbf93ef" translate="yes" xml:space="preserve">
          <source>b)&lt;a href=&quot;static&quot;&gt;static&lt;/a&gt; data members</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d5dd86c4e2ef813934faa932b4987959fc7b4dd" translate="yes" xml:space="preserve">
          <source>b)&lt;a href=&quot;static&quot;&gt;static&lt;/a&gt; member functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a3f8ebd05054dee08a0eb3f6d00a57ea81f6b39" translate="yes" xml:space="preserve">
          <source>b)&lt;code&gt;&lt;a href=&quot;static_cast&quot;&gt;static_cast&lt;/a&gt;&amp;lt;new_type&amp;gt;(expression)&lt;/code&gt;, with extensions: pointer or reference to a &lt;a href=&quot;derived_class&quot;&gt;derived class&lt;/a&gt; is additionally allowed to be cast to pointer or reference to unambiguous base class (and vice versa) even if the base class is &lt;a href=&quot;access&quot;&gt;inaccessible&lt;/a&gt; (that is, this cast ignores the private inheritance specifier). Same applies to casting &lt;a href=&quot;pointer&quot;&gt;pointer to member&lt;/a&gt; to pointer to member of unambiguous non-virtual base;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fd2726d0afd57b3d40214ae8e75d933b97844c7" translate="yes" xml:space="preserve">
          <source>b)&lt;code&gt;Derived&lt;/code&gt; to &lt;code&gt;Mid&amp;amp;&lt;/code&gt; or &lt;code&gt;Mid&amp;amp;&amp;amp;&lt;/code&gt; is better than &lt;code&gt;Derived&lt;/code&gt; to &lt;code&gt;Base&amp;amp;&lt;/code&gt; or &lt;code&gt;Base&amp;amp;&amp;amp;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="438834e7c36b0a9dd0e991a3f4fabeef033faae2" translate="yes" xml:space="preserve">
          <source>b0</source>
          <target state="translated">b0</target>
        </trans-unit>
        <trans-unit id="7e83ca2a65d6f90a809c8570c6c905a941b87732" translate="yes" xml:space="preserve">
          <source>b1</source>
          <target state="translated">b1</target>
        </trans-unit>
        <trans-unit id="61bb8d29b5be7db307cb29005bff087ebe300454" translate="yes" xml:space="preserve">
          <source>back</source>
          <target state="translated">back</target>
        </trans-unit>
        <trans-unit id="215097b59e806062d18531a9f906d29b55bacdf7" translate="yes" xml:space="preserve">
          <source>back_insert_iterator</source>
          <target state="translated">back_insert_iterator</target>
        </trans-unit>
        <trans-unit id="4c7874776757272005e8d8984f4712ff5e3e3819" translate="yes" xml:space="preserve">
          <source>back_inserter</source>
          <target state="translated">back_inserter</target>
        </trans-unit>
        <trans-unit id="77d8779019ec8408b8210c0919dfb1666636841d" translate="yes" xml:space="preserve">
          <source>backs out the input sequence to unget a character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96b40fa329fbdee8d7f5903986e4c514c5b1b308" translate="yes" xml:space="preserve">
          <source>backs out the input sequence to unget a character, not affecting the associated file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3853072116a861ff4c871d3e96a9cac7da78b7d2" translate="yes" xml:space="preserve">
          <source>backslash</source>
          <target state="translated">backslash</target>
        </trans-unit>
        <trans-unit id="4930eb3f60df3a6a61e8d44178feb2b8f820a153" translate="yes" xml:space="preserve">
          <source>backspace</source>
          <target state="translated">backspace</target>
        </trans-unit>
        <trans-unit id="220534f3eda033c64d430f6e4ce55671da55737f" translate="yes" xml:space="preserve">
          <source>backspace character (&lt;code&gt;DEL&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1902e3d6fc4e78a0bcc50ba12b882769afbf4a8c" translate="yes" xml:space="preserve">
          <source>bad</source>
          <target state="translated">bad</target>
        </trans-unit>
        <trans-unit id="d723a17bd2df5223221468a19781abe52b2935fb" translate="yes" xml:space="preserve">
          <source>bad_alloc</source>
          <target state="translated">bad_alloc</target>
        </trans-unit>
        <trans-unit id="8e7214d827c3ba803f81ea6d89c4887f3428d154" translate="yes" xml:space="preserve">
          <source>bad_any_cast</source>
          <target state="translated">bad_any_cast</target>
        </trans-unit>
        <trans-unit id="5edf257ec2328abde36a2616899f817940bff7b8" translate="yes" xml:space="preserve">
          <source>bad_array_new_length</source>
          <target state="translated">bad_array_new_length</target>
        </trans-unit>
        <trans-unit id="62acde4c4193fa9c62a7f84def163caf2c6711a3" translate="yes" xml:space="preserve">
          <source>bad_cast</source>
          <target state="translated">bad_cast</target>
        </trans-unit>
        <trans-unit id="4fd253febfa60bc203afedc38a64c116f1df0054" translate="yes" xml:space="preserve">
          <source>bad_exception</source>
          <target state="translated">bad_exception</target>
        </trans-unit>
        <trans-unit id="f0ae674dba769871a82510bd503032d50d41146b" translate="yes" xml:space="preserve">
          <source>bad_function_call</source>
          <target state="translated">bad_function_call</target>
        </trans-unit>
        <trans-unit id="bd4a93982ea7341c0c35cb537e4f9cf295063677" translate="yes" xml:space="preserve">
          <source>bad_optional_access</source>
          <target state="translated">bad_optional_access</target>
        </trans-unit>
        <trans-unit id="91fc1101e56254f93af669501f0ab85909368af8" translate="yes" xml:space="preserve">
          <source>bad_typeid</source>
          <target state="translated">bad_typeid</target>
        </trans-unit>
        <trans-unit id="528b550ccb19501b9931cdd99c2d327da702ff93" translate="yes" xml:space="preserve">
          <source>bad_variant_access</source>
          <target state="translated">bad_variant_access</target>
        </trans-unit>
        <trans-unit id="140f507cf77bfc6a9cf69957fbb989154f7b9d8e" translate="yes" xml:space="preserve">
          <source>bad_weak_ptr</source>
          <target state="translated">bad_weak_ptr</target>
        </trans-unit>
        <trans-unit id="a1219b5e1460b831d916ede8ab6cbf43c0f8e353" translate="yes" xml:space="preserve">
          <source>badbit</source>
          <target state="translated">badbit</target>
        </trans-unit>
        <trans-unit id="1405df66cbe219b0bf6355bc3d60361a8376b6b4" translate="yes" xml:space="preserve">
          <source>base</source>
          <target state="translated">base</target>
        </trans-unit>
        <trans-unit id="f99b84d5d22904eeedce0acb9068ecd65e29f613" translate="yes" xml:space="preserve">
          <source>base 2 logarithm of the given number (log&lt;sub&gt;2&lt;/sub&gt;(x))</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fac6df3ab90ad52a730c4f21d2076ac323ca100" translate="yes" xml:space="preserve">
          <source>base as a complex value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ce10011115bcf9b6feaab0c28550d47eb882505" translate="yes" xml:space="preserve">
          <source>base as a value of floating-point or &lt;a href=&quot;../../types/is_integral&quot;&gt;integral type&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b279f4dc3cff7fdefcd097e5512d460be5a9494f" translate="yes" xml:space="preserve">
          <source>base characteristic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13b60860232dad68e794f8aada6faba4770b4198" translate="yes" xml:space="preserve">
          <source>base class for error categories</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="453f4cdf7c840bc99a61065b162e258be837d23f" translate="yes" xml:space="preserve">
          <source>base class for exceptions thrown by the standard library components</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55bc70202b5a5d3d63f45409ac1a7f58d1c35522" translate="yes" xml:space="preserve">
          <source>base class subobject</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d0e8d7ce2f2e1e771798a4dde0b2a2d32419350" translate="yes" xml:space="preserve">
          <source>base class subobjects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1083e1825f78f69124b4b9bc9eb4fbc7b04aa6fa" translate="yes" xml:space="preserve">
          <source>base class to ease the definition of required types for simple iterators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f5638934d288604061ea3dcb1cce4f6fb19df52" translate="yes" xml:space="preserve">
          <source>base classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a42979f93f1e8922ff1b5ffabd11739d775fe223" translate="yes" xml:space="preserve">
          <source>base engine</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b18cb1822cbed8d768795d525f97718253daf97" translate="yes" xml:space="preserve">
          <source>base path, against which &lt;code&gt;p&lt;/code&gt; will be made relative/proximate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="230cef4841318fd240aa9625a386088a52f47cea" translate="yes" xml:space="preserve">
          <source>base-clause</source>
          <target state="translated">base-clause</target>
        </trans-unit>
        <trans-unit id="fffcd5ebd45e9dd6f98964e7b2cf625d0c08c46d" translate="yes" xml:space="preserve">
          <source>base-n</source>
          <target state="translated">base-n</target>
        </trans-unit>
        <trans-unit id="02c65ae2923a69b27645cf98d872f998292cfe23" translate="yes" xml:space="preserve">
          <source>base-specifier-list</source>
          <target state="translated">base-specifier-list</target>
        </trans-unit>
        <trans-unit id="4b55af168adb1a0ca13600a65f42d66cd24bc98e" translate="yes" xml:space="preserve">
          <source>base-specifiers in a base-clause may be &lt;a href=&quot;parameter_pack&quot;&gt;pack expansions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="195929b2a62ec23777b28df536eef9112af8bd79" translate="yes" xml:space="preserve">
          <source>based on a consumed range of integer data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d40a5e9938e0008f2e3b718cef0789d4c35411d" translate="yes" xml:space="preserve">
          <source>basic execution character set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea69d5b4b37d50765cdc62e3f4db263218860551" translate="yes" xml:space="preserve">
          <source>basic source character set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3813210b904fad491f857ef9cf25eb942d7259fe" translate="yes" xml:space="preserve">
          <source>basic_filebuf</source>
          <target state="translated">basic_filebuf</target>
        </trans-unit>
        <trans-unit id="ba36fdc26cd637fbb39c5a4f923001fc02e86297" translate="yes" xml:space="preserve">
          <source>basic_fstream</source>
          <target state="translated">basic_fstream</target>
        </trans-unit>
        <trans-unit id="68e3a14f98834fafb374481354455adecd106a6a" translate="yes" xml:space="preserve">
          <source>basic_ifstream</source>
          <target state="translated">basic_ifstream</target>
        </trans-unit>
        <trans-unit id="a27e8969c4dec1b01dcca598514b63073870b5f6" translate="yes" xml:space="preserve">
          <source>basic_ios</source>
          <target state="translated">basic_ios</target>
        </trans-unit>
        <trans-unit id="05da0c51d65fc2b9cab627cbe44cb1ad83440991" translate="yes" xml:space="preserve">
          <source>basic_iostream</source>
          <target state="translated">basic_iostream</target>
        </trans-unit>
        <trans-unit id="0da4e8c3a9f438afb5fa3bcd782634fed14d19c8" translate="yes" xml:space="preserve">
          <source>basic_istream</source>
          <target state="translated">basic_istream</target>
        </trans-unit>
        <trans-unit id="d9758af07fbd2d7191c5d4bce5bdc6396cc79537" translate="yes" xml:space="preserve">
          <source>basic_istringstream</source>
          <target state="translated">basic_istringstream</target>
        </trans-unit>
        <trans-unit id="9639184d5d59625ab6a49fbbe85cab15354b5070" translate="yes" xml:space="preserve">
          <source>basic_ofstream</source>
          <target state="translated">basic_ofstream</target>
        </trans-unit>
        <trans-unit id="3d5c8e66002bcdecf03871bd73a7b955a9dddbcb" translate="yes" xml:space="preserve">
          <source>basic_ostream</source>
          <target state="translated">basic_ostream</target>
        </trans-unit>
        <trans-unit id="e4f669c1f784da7521208998ba344dc1fbced221" translate="yes" xml:space="preserve">
          <source>basic_ostream to initialize from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="314b287950bd0e9473216132c3d235e501ef072c" translate="yes" xml:space="preserve">
          <source>basic_ostringstream</source>
          <target state="translated">basic_ostringstream</target>
        </trans-unit>
        <trans-unit id="7f77ae30daf5c22765df41a47c3a5660aba83aa3" translate="yes" xml:space="preserve">
          <source>basic_osyncstream</source>
          <target state="translated">basic_osyncstream</target>
        </trans-unit>
        <trans-unit id="150330c5b1d4248c16fe919614ff20f4fa6d0040" translate="yes" xml:space="preserve">
          <source>basic_regex</source>
          <target state="translated">basic_regex</target>
        </trans-unit>
        <trans-unit id="9f1a734f05ee2675c2ff92b63b05844596c951a1" translate="yes" xml:space="preserve">
          <source>basic_streambuf</source>
          <target state="translated">basic_streambuf</target>
        </trans-unit>
        <trans-unit id="62eed35f7e3c87827febda940c7309210f9b47cf" translate="yes" xml:space="preserve">
          <source>basic_string</source>
          <target state="translated">basic_string</target>
        </trans-unit>
        <trans-unit id="b2d0e54b80b5aea95f02be5fea84356789847fa7" translate="yes" xml:space="preserve">
          <source>basic_string_view</source>
          <target state="translated">basic_string_view</target>
        </trans-unit>
        <trans-unit id="0374ab4cbce6b5134f0fa5341f40a9ba8bed4c17" translate="yes" xml:space="preserve">
          <source>basic_stringbuf</source>
          <target state="translated">basic_stringbuf</target>
        </trans-unit>
        <trans-unit id="a5fc6af8d4d3410edd00854487231c40f587d05d" translate="yes" xml:space="preserve">
          <source>basic_stringstream</source>
          <target state="translated">basic_stringstream</target>
        </trans-unit>
        <trans-unit id="1f459d2df35b5755b1abc7f5cb17b90868662cd9" translate="yes" xml:space="preserve">
          <source>basic_syncbuf</source>
          <target state="translated">basic_syncbuf</target>
        </trans-unit>
        <trans-unit id="2d1ab52f979996695c65753553413b2c21865250" translate="yes" xml:space="preserve">
          <source>be a copy of &lt;code&gt;this-&amp;gt;&lt;/code&gt;&lt;a href=&quot;get_allocator&quot;&gt;&lt;code&gt;get_allocator()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f897fcba6c33d33c093d96f6341d649d85416327" translate="yes" xml:space="preserve">
          <source>be replaced by move-assignment (see above), then &lt;code&gt;T&lt;/code&gt; is &lt;a href=&quot;moveinsertable&quot;&gt;MoveInsertable&lt;/a&gt; into &lt;code&gt;X&lt;/code&gt; and &lt;a href=&quot;moveassignable&quot;&gt;MoveAssignable&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14c59eb683e295db6518f99e1386aaa38e3fb7cb" translate="yes" xml:space="preserve">
          <source>because calling &lt;code&gt;&lt;a href=&quot;../algorithm/swap&quot;&gt;std::swap&lt;/a&gt;(obj1, obj2)&lt;/code&gt; directly would not consider the user-defined swap() functions that could be defined in the same namespace as the types of obj1 or obj2, and just calling the unqualified &lt;code&gt;swap(obj1, obj2)&lt;/code&gt; would call nothing if no user-defined overload was provided. In particular, &lt;code&gt;&lt;a href=&quot;../algorithm/iter_swap&quot;&gt;std::iter_swap&lt;/a&gt;&lt;/code&gt; and all other standard library algorithms use this approach when dealing with &lt;a href=&quot;../named_req/swappable&quot;&gt;Swappable&lt;/a&gt; types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51de2b835bd35a67eb32dbcd3d77d4b96e5aa39d" translate="yes" xml:space="preserve">
          <source>before</source>
          <target state="translated">before</target>
        </trans-unit>
        <trans-unit id="89f4be13043bf90a4cd3f40b31cc423c98de1c5a" translate="yes" xml:space="preserve">
          <source>before it was advanced by one, or &lt;code&gt;traits::eof()&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f94d60c44958baa63c5f5f55c48ba4526d1842e3" translate="yes" xml:space="preserve">
          <source>before_begin cbefore_begin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff14a362669695cc5e5f82ec2680407825661d31" translate="yes" xml:space="preserve">
          <source>beg</source>
          <target state="translated">beg</target>
        </trans-unit>
        <trans-unit id="8cbd0a74c6efdb39943b290bb82c9d6b2a6ee5a6" translate="yes" xml:space="preserve">
          <source>begin</source>
          <target state="translated">begin</target>
        </trans-unit>
        <trans-unit id="ed7f6585fe8ba93d001fa8541b7fb3c583100b27" translate="yes" xml:space="preserve">
          <source>begin cbegin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab4910c0d9e22a2aa6b1d7944b1c31d46b743130" translate="yes" xml:space="preserve">
          <source>begin(size_type) cbegin(size_type)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27ca1bc695c7bc91143d6129a8d0e3571f4a6282" translate="yes" xml:space="preserve">
          <source>begin(std::filesystem::directory_iterator)end(std::filesystem::directory_iterator)</source>
          <target state="translated">begin(std::filesystem::directory_iterator)end(std::filesystem::directory_iterator)</target>
        </trans-unit>
        <trans-unit id="50cfab446c8134d918220a9192fadb43c47e2406" translate="yes" xml:space="preserve">
          <source>begin(std::filesystem::recursive_directory_iterator)end(std::filesystem::recursive_directory_iterator)</source>
          <target state="translated">begin(std::filesystem::recursive_directory_iterator)end(std::filesystem::recursive_directory_iterator)</target>
        </trans-unit>
        <trans-unit id="1997e469330d45594fb3bd564927650f2485c2b1" translate="yes" xml:space="preserve">
          <source>begin, end</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac2c0c196d064e8b348f7a566b46834f740eb107" translate="yes" xml:space="preserve">
          <source>begin, end(std::ranges::empty_view)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b730665466cfb7a079d74627c36d379702c2cf0a" translate="yes" xml:space="preserve">
          <source>begin, end(std::ranges::ref_view)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0b8030a33e2ca3c7ec813d14597aae09d4863f5" translate="yes" xml:space="preserve">
          <source>begin,end&lt;small&gt;(std::basic_string_view)&lt;/small&gt;</source>
          <target state="translated">begin,end&lt;small&gt;(std::basic_string_view)&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="a43b32ca171b7a3863b26baaeb48c3d3f44d931a" translate="yes" xml:space="preserve">
          <source>begin,end&lt;small&gt;(std::span)&lt;/small&gt;</source>
          <target state="translated">begin,end&lt;small&gt;(std::span)&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="eaeaf46ff0e8658ac42424a2cb45d4e885826fb8" translate="yes" xml:space="preserve">
          <source>begin_expr</source>
          <target state="translated">begin_expr</target>
        </trans-unit>
        <trans-unit id="afd8194518df5fce067cc26a57d8e51ecb53c3de" translate="yes" xml:space="preserve">
          <source>begincbegin</source>
          <target state="translated">begincbegin</target>
        </trans-unit>
        <trans-unit id="d1dc25355bd9b369668d0373cf8c41939c1455bb" translate="yes" xml:space="preserve">
          <source>beginend</source>
          <target state="translated">beginend</target>
        </trans-unit>
        <trans-unit id="3b11edc4442533d3d8ddea5ea179412f0e1b5d79" translate="yes" xml:space="preserve">
          <source>beginning of the destination range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f47c0df6e32b10638d24abd8fabff66c182d2e7" translate="yes" xml:space="preserve">
          <source>beginning of the second range of elements to swap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfcea8ac245e94ad9ee2c2ec625d672da32ee1dd" translate="yes" xml:space="preserve">
          <source>beginning of the token</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cd61127319e94aae7a253f901ff7a6988e90b69" translate="yes" xml:space="preserve">
          <source>beginning pointer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a9e5758042903cc802023717e831b05c1bf9996" translate="yes" xml:space="preserve">
          <source>behaves as if each name from &lt;a href=&quot;header/cassert&quot;&gt;&lt;code&gt;&amp;lt;cassert&amp;gt;&lt;/code&gt;&lt;/a&gt; is placed in global namespace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1f24d159837662f28768062c8fb080c43ced23f" translate="yes" xml:space="preserve">
          <source>behaves as if each name from &lt;a href=&quot;header/cctype&quot;&gt;&lt;code&gt;&amp;lt;cctype&amp;gt;&lt;/code&gt;&lt;/a&gt; is placed in global namespace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac6c17ca177650df0895002fcb12a5c371747a80" translate="yes" xml:space="preserve">
          <source>behaves as if each name from &lt;a href=&quot;header/cerrno&quot;&gt;&lt;code&gt;&amp;lt;cerrno&amp;gt;&lt;/code&gt;&lt;/a&gt; is placed in global namespace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d51fe271f7b336aa9010fb9b187554c50879d3e" translate="yes" xml:space="preserve">
          <source>behaves as if each name from &lt;a href=&quot;header/cfenv&quot;&gt;&lt;code&gt;&amp;lt;cfenv&amp;gt;&lt;/code&gt;&lt;/a&gt; is placed in global namespace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d624d11dcbda20a1a506e3414337dd14b08c9cb" translate="yes" xml:space="preserve">
          <source>behaves as if each name from &lt;a href=&quot;header/cfloat&quot;&gt;&lt;code&gt;&amp;lt;cfloat&amp;gt;&lt;/code&gt;&lt;/a&gt; is placed in global namespace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5e76d49e091031b7c8dd7893abb2335baaa1309" translate="yes" xml:space="preserve">
          <source>behaves as if each name from &lt;a href=&quot;header/cinttypes&quot;&gt;&lt;code&gt;&amp;lt;cinttypes&amp;gt;&lt;/code&gt;&lt;/a&gt; is placed in global namespace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79882db60fdb1d3940e9196248ca0070b947ec8f" translate="yes" xml:space="preserve">
          <source>behaves as if each name from &lt;a href=&quot;header/climits&quot;&gt;&lt;code&gt;&amp;lt;climits&amp;gt;&lt;/code&gt;&lt;/a&gt; is placed in global namespace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="356413e54ea0783d3cef36479e5bcb50291fc4ce" translate="yes" xml:space="preserve">
          <source>behaves as if each name from &lt;a href=&quot;header/clocale&quot;&gt;&lt;code&gt;&amp;lt;clocale&amp;gt;&lt;/code&gt;&lt;/a&gt; is placed in global namespace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc4de99429d26b5cd09361dab7f3b8e223503dd7" translate="yes" xml:space="preserve">
          <source>behaves as if each name from &lt;a href=&quot;header/cmath&quot;&gt;&lt;code&gt;&amp;lt;cmath&amp;gt;&lt;/code&gt;&lt;/a&gt; is placed in global namespace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54266a14529e5e9006b7611ee2730c4c58567e50" translate="yes" xml:space="preserve">
          <source>behaves as if each name from &lt;a href=&quot;header/csetjmp&quot;&gt;&lt;code&gt;&amp;lt;csetjmp&amp;gt;&lt;/code&gt;&lt;/a&gt; is placed in global namespace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bed850511f720b70a7cbf4cbd65bf1270ecf976" translate="yes" xml:space="preserve">
          <source>behaves as if each name from &lt;a href=&quot;header/csignal&quot;&gt;&lt;code&gt;&amp;lt;csignal&amp;gt;&lt;/code&gt;&lt;/a&gt; is placed in global namespace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="118d3b4377ea8ced1853372ae4e661b2b1bae8e8" translate="yes" xml:space="preserve">
          <source>behaves as if each name from &lt;a href=&quot;header/cstdarg&quot;&gt;&lt;code&gt;&amp;lt;cstdarg&amp;gt;&lt;/code&gt;&lt;/a&gt; is placed in global namespace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a48783dc4ef4f672eaaefcd5ec87c195c6da7c1d" translate="yes" xml:space="preserve">
          <source>behaves as if each name from &lt;a href=&quot;header/cstddef&quot;&gt;&lt;code&gt;&amp;lt;cstddef&amp;gt;&lt;/code&gt;&lt;/a&gt; is placed in global namespace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f42845258efd7617f5ab7ef25d2607625dcbc980" translate="yes" xml:space="preserve">
          <source>behaves as if each name from &lt;a href=&quot;header/cstdint&quot;&gt;&lt;code&gt;&amp;lt;cstdint&amp;gt;&lt;/code&gt;&lt;/a&gt; is placed in global namespace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e93bfca1f55f1fa32d7ed654df9e7bd4d25a1bc8" translate="yes" xml:space="preserve">
          <source>behaves as if each name from &lt;a href=&quot;header/cstdio&quot;&gt;&lt;code&gt;&amp;lt;cstdio&amp;gt;&lt;/code&gt;&lt;/a&gt; is placed in global namespace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="808618801e0152ca1cefd2337489acbe5f3e9d35" translate="yes" xml:space="preserve">
          <source>behaves as if each name from &lt;a href=&quot;header/cstdlib&quot;&gt;&lt;code&gt;&amp;lt;cstdlib&amp;gt;&lt;/code&gt;&lt;/a&gt; is placed in global namespace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9990f196c73880897d220ecd7b765a3e452fd94" translate="yes" xml:space="preserve">
          <source>behaves as if each name from &lt;a href=&quot;header/cstring&quot;&gt;&lt;code&gt;&amp;lt;cstring&amp;gt;&lt;/code&gt;&lt;/a&gt; is placed in global namespace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ef6e5fefa31b158e410f4ba612e591082ebb25d" translate="yes" xml:space="preserve">
          <source>behaves as if each name from &lt;a href=&quot;header/ctime&quot;&gt;&lt;code&gt;&amp;lt;ctime&amp;gt;&lt;/code&gt;&lt;/a&gt; is placed in global namespace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fd2312c6a9833f4cb589e8fbc7a1bac3f2f1118" translate="yes" xml:space="preserve">
          <source>behaves as if each name from &lt;a href=&quot;header/cuchar&quot;&gt;&lt;code&gt;&amp;lt;cuchar&amp;gt;&lt;/code&gt;&lt;/a&gt; is placed in global namespace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d856ef1b74d52dbba6aa2f05aed77a12b0c240d" translate="yes" xml:space="preserve">
          <source>behaves as if each name from &lt;a href=&quot;header/cwchar&quot;&gt;&lt;code&gt;&amp;lt;cwchar&amp;gt;&lt;/code&gt;&lt;/a&gt; is placed in global namespace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25c3915aa9c89024e74fdf56889033c5c70d3e18" translate="yes" xml:space="preserve">
          <source>behaves as if each name from &lt;a href=&quot;header/cwctype&quot;&gt;&lt;code&gt;&amp;lt;cwctype&amp;gt;&lt;/code&gt;&lt;/a&gt; is placed in global namespace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07dee6b4e77f1d5da9bc1e0b99129b64a5d756b8" translate="yes" xml:space="preserve">
          <source>behavior corrected</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d1bfafa7df677cce46cb243e6358cd97a3d7478" translate="yes" xml:space="preserve">
          <source>behavior unclear for some inputs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64d1d8b2b17114733247a37e72525486b3f91137" translate="yes" xml:space="preserve">
          <source>below) is inserted after the &lt;code&gt;%&lt;/code&gt; character. Each conversion specifier causes the matched characters to be interpreted as parts of date and time types according to the table below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2077ad92ad98aded0ac12c21745ae471a1ffce3" translate="yes" xml:space="preserve">
          <source>bernoulli_distribution</source>
          <target state="translated">bernoulli_distribution</target>
        </trans-unit>
        <trans-unit id="a295e0bdde1938d1fbfd343e5a3e569e868e1465" translate="yes" xml:space="preserve">
          <source>beta</source>
          <target state="translated">beta</target>
        </trans-unit>
        <trans-unit id="cfc9630c64bacf61019ec3524adb3db9979bc2d0" translate="yes" xml:space="preserve">
          <source>beta function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbad04f2728533ccd4c43c844bf5741fe9472e52" translate="yes" xml:space="preserve">
          <source>betabetafbetal</source>
          <target state="translated">betabetafbetal</target>
        </trans-unit>
        <trans-unit id="a31e44e0548b4c995336834db72c429ffc0f13ba" translate="yes" xml:space="preserve">
          <source>better</source>
          <target state="translated">better</target>
        </trans-unit>
        <trans-unit id="3a3de4b89a83f4708b77f0a0f005e572dec0dd0b" translate="yes" xml:space="preserve">
          <source>biggest element while &lt;code&gt;&lt;a href=&quot;max_element&quot;&gt;std::max_element&lt;/a&gt;&lt;/code&gt; finds the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4d34f9b46991d7c1389bdff856d7dbe98b94b5a" translate="yes" xml:space="preserve">
          <source>biggest element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e57cfe843145135aee1f4d0d63ceb7842093712" translate="yes" xml:space="preserve">
          <source>binary</source>
          <target state="translated">binary</target>
        </trans-unit>
        <trans-unit id="741f61073eecabc413d675ca51826ae3c0984fcd" translate="yes" xml:space="preserve">
          <source>binary &lt;a href=&quot;../named_req/functionobject&quot;&gt;FunctionObject&lt;/a&gt; that will be applied in to the result of &lt;code&gt;unary_op&lt;/code&gt;, the results of other &lt;code&gt;binary_op&lt;/code&gt;, and &lt;code&gt;init&lt;/code&gt; if provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e9aae788d2a17693afde70bf8ff35971c9ca75a" translate="yes" xml:space="preserve">
          <source>binary &lt;a href=&quot;../named_req/functionobject&quot;&gt;FunctionObject&lt;/a&gt; that will be applied in to the result of &lt;code&gt;unary_op&lt;/code&gt;, the results of other &lt;code&gt;binary_op&lt;/code&gt;, and &lt;code&gt;init&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbf808f36abf46de5ffc039e74fd9a1baf67583a" translate="yes" xml:space="preserve">
          <source>binary &lt;a href=&quot;../named_req/functionobject&quot;&gt;FunctionObject&lt;/a&gt; that will be applied in to the result of dereferencing the input iterators, the results of other &lt;code&gt;binary_op&lt;/code&gt;, and &lt;code&gt;init&lt;/code&gt; (if provided).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebcfe91cb0161bd4d528b1fd5a62caea01575ec9" translate="yes" xml:space="preserve">
          <source>binary &lt;a href=&quot;../named_req/functionobject&quot;&gt;FunctionObject&lt;/a&gt; that will be applied in to the result of dereferencing the input iterators, the results of other &lt;code&gt;binary_op&lt;/code&gt;, and &lt;code&gt;init&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bf2d618d36259b6a2e1538d9f3157b37676f6f5" translate="yes" xml:space="preserve">
          <source>binary &lt;a href=&quot;../named_req/functionobject&quot;&gt;FunctionObject&lt;/a&gt; that will be applied in unspecified order to the result of dereferencing the input iterators, the results of other &lt;code&gt;binary_op&lt;/code&gt; and &lt;code&gt;init&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65a4e72022d330b42c9ccd6bafd3a640eaaa14aa" translate="yes" xml:space="preserve">
          <source>binary &lt;a href=&quot;../named_req/functionobject&quot;&gt;FunctionObject&lt;/a&gt; that will be applied in unspecified order to the results of &lt;code&gt;unary_op&lt;/code&gt;, the results of other &lt;code&gt;binary_op&lt;/code&gt; and &lt;code&gt;init&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="344a801c520f1896f850fb9b3469848339ebacfc" translate="yes" xml:space="preserve">
          <source>binary floating-point expression. It consists of the following parts:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c844b6dffde6c2e82416d5271de16767556e4750" translate="yes" xml:space="preserve">
          <source>binary operation function object that will be applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ade56be29b44ee47abd0fa345e9a29673fc608d" translate="yes" xml:space="preserve">
          <source>binary operation function object that will be applied. The binary operator takes the current accumulation value &lt;code&gt;a&lt;/code&gt; (initialized to &lt;code&gt;init&lt;/code&gt;) and the value of the current element &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a4b03c962eb0cd5c84fbf6f4f68ffbfce65f556" translate="yes" xml:space="preserve">
          <source>binary operation function object that will be applied. This &quot;product&quot; function takes one value from each range and produces a new value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbdc5af3dc6517a998cdb8a0ea2dbf1730a06948" translate="yes" xml:space="preserve">
          <source>binary operation function object that will be applied. This &quot;sum&quot; function takes a value returned by op2 and the current value of the accumulator and produces a new value to be stored in the accumulator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a8b33b20aafe1fee2070986fc168d2623aa0a64" translate="yes" xml:space="preserve">
          <source>binary predicate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4104241ef3dff98b73d0848fa7a1cef5f3f9124" translate="yes" xml:space="preserve">
          <source>binary predicate which returns ​&lt;code&gt;true&lt;/code&gt; if the elements should be treated as equal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0abab15bc1b33f7e291b8fa667a489882fd250a" translate="yes" xml:space="preserve">
          <source>binary predicate which returns ​&lt;code&gt;true&lt;/code&gt; if the first argument is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bd27899135880b77f5d63096d9cd5c250622b55" translate="yes" xml:space="preserve">
          <source>binary stream</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="914375be0c24f927d660d9bbe53f80f52ff2afd6" translate="yes" xml:space="preserve">
          <source>binary, octal, or hexadecimal bases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caa9e269f6376a44033ca7a736cbc0062069c685" translate="yes" xml:space="preserve">
          <source>binary-literal</source>
          <target state="translated">binary-literal</target>
        </trans-unit>
        <trans-unit id="96d14d9d92ecf0c310ef187ca9520e68c2275a89" translate="yes" xml:space="preserve">
          <source>binary-literal is the character sequence &lt;code&gt;0b&lt;/code&gt; or the character sequence &lt;code&gt;0B&lt;/code&gt; followed by one or more binary digits (&lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="773bdfffea4211a314d6c40731f4e0a466aac876" translate="yes" xml:space="preserve">
          <source>binary-literalinteger-suffix(optional)</source>
          <target state="translated">binary-literalinteger-suffix(optional)</target>
        </trans-unit>
        <trans-unit id="e10e4b7ef2aadbf8bd919303a1d884926e4a836a" translate="yes" xml:space="preserve">
          <source>binary-literalud-suffix</source>
          <target state="translated">binary-literalud-suffix</target>
        </trans-unit>
        <trans-unit id="13739f2a715ca87431737247b7bef43c4caf3e3c" translate="yes" xml:space="preserve">
          <source>binary_function</source>
          <target state="translated">binary_function</target>
        </trans-unit>
        <trans-unit id="f81abe5231a75e647854f08eb5d0126825a2e3f0" translate="yes" xml:space="preserve">
          <source>binary_negate</source>
          <target state="translated">binary_negate</target>
        </trans-unit>
        <trans-unit id="1523803a03e5dc02afba548dfd7cab274c7338da" translate="yes" xml:space="preserve">
          <source>binary_op</source>
          <target state="translated">binary_op</target>
        </trans-unit>
        <trans-unit id="5472423d8cd42c02110fed895795fea6bd5e979a" translate="yes" xml:space="preserve">
          <source>binary_search</source>
          <target state="translated">binary_search</target>
        </trans-unit>
        <trans-unit id="6bdd4db977b0f96aaf3bff2e4300153c648ca382" translate="yes" xml:space="preserve">
          <source>bind</source>
          <target state="translated">bind</target>
        </trans-unit>
        <trans-unit id="d3c84de95db05d8823ca0f708ad717e01d971c2e" translate="yes" xml:space="preserve">
          <source>bind1stbind2nd</source>
          <target state="translated">bind1stbind2nd</target>
        </trans-unit>
        <trans-unit id="823d795e39c8da27974b36f220e30551c9256956" translate="yes" xml:space="preserve">
          <source>bind_front</source>
          <target state="translated">bind_front</target>
        </trans-unit>
        <trans-unit id="d9f5e8a6dd78ed559ff725a075d36971f9d47340" translate="yes" xml:space="preserve">
          <source>binder1stbinder2nd</source>
          <target state="translated">binder1stbinder2nd</target>
        </trans-unit>
        <trans-unit id="9c4432b05dd2f7fde8d25996dac83aea1d0c330b" translate="yes" xml:space="preserve">
          <source>binding a reference to a prvalue</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79808942ae16f9804dc8edc3c43271b7c437355a" translate="yes" xml:space="preserve">
          <source>binds a variable number of arguments, in order, to a function object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a99dec48bb95bec759fe67d710d76b9509f0a62" translate="yes" xml:space="preserve">
          <source>binds one argument to a binary function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbdacd8f901b7b404dea284140ef1d756682c546" translate="yes" xml:space="preserve">
          <source>binds one or more arguments to a function object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ebf5fd7ed5f3ab3203edc492d9972f34edd47dc" translate="yes" xml:space="preserve">
          <source>binomial_distribution</source>
          <target state="translated">binomial_distribution</target>
        </trans-unit>
        <trans-unit id="026e996a3a5897970b058ffb093a163a1d763649" translate="yes" xml:space="preserve">
          <source>bit</source>
          <target state="translated">bit</target>
        </trans-unit>
        <trans-unit id="b5579eae1c2d14e66a0cccf54d73a9768bf617db" translate="yes" xml:space="preserve">
          <source>bit-field lengths</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f82cfa4bb91337ffcc219dff4d7092ce03f6928d" translate="yes" xml:space="preserve">
          <source>bit_and</source>
          <target state="translated">bit_and</target>
        </trans-unit>
        <trans-unit id="8eb6763fccc8c00fa482cb09d508430a5a7a7985" translate="yes" xml:space="preserve">
          <source>bit_and&amp;lt;void&amp;gt;</source>
          <target state="translated">bit_and&amp;lt;void&amp;gt;</target>
        </trans-unit>
        <trans-unit id="1b4762ab1f464e5c4c6abd7cd93d4a080e57d10b" translate="yes" xml:space="preserve">
          <source>bit_cast</source>
          <target state="translated">bit_cast</target>
        </trans-unit>
        <trans-unit id="d66dfdf73bb4c2cf933a76173bfdd1f5de1bee20" translate="yes" xml:space="preserve">
          <source>bit_not</source>
          <target state="translated">bit_not</target>
        </trans-unit>
        <trans-unit id="51d74423ce69cde66425b0a5670805dc514b4dbf" translate="yes" xml:space="preserve">
          <source>bit_not&amp;lt;void&amp;gt;</source>
          <target state="translated">bit_not&amp;lt;void&amp;gt;</target>
        </trans-unit>
        <trans-unit id="5e1ab8f73ab06724b4769316dfdb9c01ddf308b8" translate="yes" xml:space="preserve">
          <source>bit_or</source>
          <target state="translated">bit_or</target>
        </trans-unit>
        <trans-unit id="685467f32bc6664fc252b801b3e405571f9ed70e" translate="yes" xml:space="preserve">
          <source>bit_or&amp;lt;void&amp;gt;</source>
          <target state="translated">bit_or&amp;lt;void&amp;gt;</target>
        </trans-unit>
        <trans-unit id="5e289abe10d66d745832acc5eb871227c30bf962" translate="yes" xml:space="preserve">
          <source>bit_xor</source>
          <target state="translated">bit_xor</target>
        </trans-unit>
        <trans-unit id="74944cc891187fd3dc12bf310207a0ce8ddf3bac" translate="yes" xml:space="preserve">
          <source>bit_xor&amp;lt;void&amp;gt;</source>
          <target state="translated">bit_xor&amp;lt;void&amp;gt;</target>
        </trans-unit>
        <trans-unit id="2e35f2eaae06ade733de4acf6e9319e29196fe71" translate="yes" xml:space="preserve">
          <source>bitand</source>
          <target state="translated">bitand</target>
        </trans-unit>
        <trans-unit id="85b376d96fbe9d7ad6fe8b6d6fd83a6eded8309f" translate="yes" xml:space="preserve">
          <source>bitmask listing the exception flags to clear</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="421fd5da99cb18d3e074e38c1321d38aabe38749" translate="yes" xml:space="preserve">
          <source>bitmask listing the exception flags to get/set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfba9e5da2d151af672f01908c9b0fec09042631" translate="yes" xml:space="preserve">
          <source>bitmask listing the exception flags to raise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22fa062c623c72c862c72c097f8543db23d9a1ce" translate="yes" xml:space="preserve">
          <source>bitmask listing the exception flags to test</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f90192e3c4d962438e535b36364d1401a799274c" translate="yes" xml:space="preserve">
          <source>bitmask of the flags to clear</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d28a4222176708dd09ed3b1d2bbd46aea638a261" translate="yes" xml:space="preserve">
          <source>bitmask of the flags to set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84e65e9dad75679f5db158ddd300fc950f007789" translate="yes" xml:space="preserve">
          <source>bitmask value, where individual bits control the allowed methods of execution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="369346a303eb11946c3660f3b16aeaac3dc2efe4" translate="yes" xml:space="preserve">
          <source>bitor</source>
          <target state="translated">bitor</target>
        </trans-unit>
        <trans-unit id="ae5247d0f9febd5b05f3c435f150af9b916eee81" translate="yes" xml:space="preserve">
          <source>bits, the exact number being recorded in &lt;code&gt;&lt;a href=&quot;../types/climits&quot;&gt;CHAR_BIT&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20d70af79c04008cfae444634621dd615b9cafbc" translate="yes" xml:space="preserve">
          <source>bitset</source>
          <target state="translated">bitset</target>
        </trans-unit>
        <trans-unit id="12dbd2052295143562404eafd45d88f15574d57d" translate="yes" xml:space="preserve">
          <source>bitset to compare</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d2e2b3264cc7fab967c16996bc31c27de08c23c" translate="yes" xml:space="preserve">
          <source>bitset, integer, or enumeration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ba5b46e332d373dfdfa248036598eb70f831d32" translate="yes" xml:space="preserve">
          <source>bitwise AND</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7402e94c5ea8e6b4bb099410df4afd780d8e4c79" translate="yes" xml:space="preserve">
          <source>bitwise AND assignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="898900a45561d4f119a2ed52510f1ace0fda7e60" translate="yes" xml:space="preserve">
          <source>bitwise NOT</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d5bb4d1e43ddd2b7554d5d7d0b44fa8e15c9b68" translate="yes" xml:space="preserve">
          <source>bitwise OR</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e5f445b5a0f08154aa262fd1995a32c5d5c0147" translate="yes" xml:space="preserve">
          <source>bitwise OR assignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b300e864ddbe0739e21a193a664318099c6bb2e7" translate="yes" xml:space="preserve">
          <source>bitwise OR of all supported floating-point exceptions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f0757e0ba4c22c9e209a79597f6b1dc188081e0" translate="yes" xml:space="preserve">
          <source>bitwise XOR</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9063e7abb7c0e4ee7d47249d5f9e90204980272c" translate="yes" xml:space="preserve">
          <source>bitwise XOR assignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="350cfc389d600baf7c2838eb6baef5aed0cd45aa" translate="yes" xml:space="preserve">
          <source>bitwise left shift</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84f6496a81acfb97e4ab300a6a95c0973638ba88" translate="yes" xml:space="preserve">
          <source>bitwise left shift assignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fff944ed7256fa81d54dca9807ef764c7748af53" translate="yes" xml:space="preserve">
          <source>bitwise right shift</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="234df5bbdb792b725dffb8b417a14c937e3afddc" translate="yes" xml:space="preserve">
          <source>bitwise right shift assignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6184d6847d594ec75c4c07514d4bb490d5e166df" translate="yes" xml:space="preserve">
          <source>blank</source>
          <target state="translated">blank</target>
        </trans-unit>
        <trans-unit id="616104e51c5ed90c923fbf39fd555a031a518600" translate="yes" xml:space="preserve">
          <source>block-declaration&lt;code&gt;;&lt;/code&gt;</source>
          <target state="translated">block-declaration&lt;code&gt;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f7d5b2b95861daea9933ef0a243f733bbc79235e" translate="yes" xml:space="preserve">
          <source>blocks</source>
          <target state="translated">blocks</target>
        </trans-unit>
        <trans-unit id="55243c39258eebba298f8a857313253b1246b14a" translate="yes" xml:space="preserve">
          <source>blocks the current thread until the condition variable is woken up</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c6da29727e29175ff06266f888af3730fc53809" translate="yes" xml:space="preserve">
          <source>blocks the current thread until the condition variable is woken up or after the specified timeout duration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96b7e03c1fee3f917b0080f12f24520aee86cafe" translate="yes" xml:space="preserve">
          <source>blocks the current thread until the condition variable is woken up or until specified time point has been reached</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02083f4579e08a612425c0c1a17ee47add783b94" translate="yes" xml:space="preserve">
          <source>body</source>
          <target state="translated">body</target>
        </trans-unit>
        <trans-unit id="5039d155a71c0a5f7a2b2654ad49cb7ee47a8980" translate="yes" xml:space="preserve">
          <source>bool</source>
          <target state="translated">bool</target>
        </trans-unit>
        <trans-unit id="74c0a482256e238404635e60622eac31ca59c228" translate="yes" xml:space="preserve">
          <source>bool matched</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b9a4e29817d11d7b554a72e58dbe0aa534f0a17" translate="yes" xml:space="preserve">
          <source>bool_constexpr</source>
          <target state="translated">bool_constexpr</target>
        </trans-unit>
        <trans-unit id="d0e4a81c41db3cf5e3b13b6c2011e1d362c31e90" translate="yes" xml:space="preserve">
          <source>boolalphanoboolalpha</source>
          <target state="translated">boolalphanoboolalpha</target>
        </trans-unit>
        <trans-unit id="bbb50f353822905f23c869b003b648b6ecca002d" translate="yes" xml:space="preserve">
          <source>boolean literal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc39b18f287d8bbfaceae020f4a4eb32ac5c1e70" translate="yes" xml:space="preserve">
          <source>both</source>
          <target state="translated">both</target>
        </trans-unit>
        <trans-unit id="cef7a9edca2c94ad0d0abd5cb723d8cc1feb99f5" translate="yes" xml:space="preserve">
          <source>both &lt;a href=&quot;adl&quot;&gt;argument-dependent lookup&lt;/a&gt; for the name &lt;code&gt;operator &amp;lt;&amp;lt;&lt;/code&gt; which finds multiple function template declarations in the namespace std and qualified name lookup for the name &lt;code&gt;std::ostream::operator&amp;lt;&amp;lt;&lt;/code&gt; which finds multiple member function declarations in class &lt;code&gt;std::ostream&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="037c7dc3c5f46cff3b8bec743f4219f64cc894da" translate="yes" xml:space="preserve">
          <source>both &lt;code&gt;l&lt;/code&gt;/&lt;code&gt;L&lt;/code&gt; and &lt;code&gt;u&lt;/code&gt;/&lt;code&gt;U&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3e99c96451d58b97073754b706fca32b43e9f52" translate="yes" xml:space="preserve">
          <source>both &lt;code&gt;ll&lt;/code&gt;/&lt;code&gt;LL&lt;/code&gt; and &lt;code&gt;u&lt;/code&gt;/&lt;code&gt;U&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f4c95598057fde804507b0158a655eb31df8eb0" translate="yes" xml:space="preserve">
          <source>both &lt;code&gt;ranges::begin(E)&lt;/code&gt; and &lt;code&gt;ranges::end(E)&lt;/code&gt; are amortized constant time and non-modifying, and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15262769b7e5988e6264d3b24704d3ba74be16c7" translate="yes" xml:space="preserve">
          <source>both are pointers to the same complete object types, ignoring cv-qualifiers. In this case, the result type is &lt;code&gt;&lt;a href=&quot;../types/ptrdiff_t&quot;&gt;std::ptrdiff_t&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e36e7d15a155e858a154babf02e71615cdbe0f5" translate="yes" xml:space="preserve">
          <source>both can inherit from such members</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b0863dab1943fcaae2ec2df7677b1b2d875288f" translate="yes" xml:space="preserve">
          <source>both conflicting evaluations are atomic operations (see &lt;code&gt;&lt;a href=&quot;../atomic/atomic&quot;&gt;std::atomic&lt;/a&gt;&lt;/code&gt;), or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab85d4e383c2b03e88d671e9b568648d86db8c21" translate="yes" xml:space="preserve">
          <source>both evaluations execute on the same thread or in the same &lt;a href=&quot;../utility/program/signal#Signal_handler&quot;&gt;signal handler&lt;/a&gt;, or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ac440d9e09489ab17180801a2423f6e67e422b3" translate="yes" xml:space="preserve">
          <source>both have arithmetic or unscoped enumeration type. In this case, the usual arithmetic conversions are performed on both operands and determine the type of the result..</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93896d9a1d8d85c514f5a2ea2a54de8560d570fb" translate="yes" xml:space="preserve">
          <source>both match results are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ddd60bfde5d1c1194de0d4e4f6e342c5a1d3935" translate="yes" xml:space="preserve">
          <source>both types are pointers or references (lvalue or rvalue) to classes. Multi-level pointers or references are not allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d46077c78ecf87402848fc9f920b72cde953b02" translate="yes" xml:space="preserve">
          <source>bound</source>
          <target state="translated">bound</target>
        </trans-unit>
        <trans-unit id="2ebeb1d76f735eea5ba814dae584f49a17b7a34c" translate="yes" xml:space="preserve">
          <source>boyer_moore_horspool_searcher</source>
          <target state="translated">boyer_moore_horspool_searcher</target>
        </trans-unit>
        <trans-unit id="7e5191044bc4d3932ccb1347ade68e671d3a828f" translate="yes" xml:space="preserve">
          <source>boyer_moore_searcher</source>
          <target state="translated">boyer_moore_searcher</target>
        </trans-unit>
        <trans-unit id="439eacd7230d8c1b5d6e37bbad5f7fcecbd4e634" translate="yes" xml:space="preserve">
          <source>brace-enclosed &lt;a href=&quot;statements#Compound_statements&quot;&gt;sequence of statements&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04efcab293dd1f491ff23f985cd22f2f4d57ec42" translate="yes" xml:space="preserve">
          <source>brace-enclosed list of comma-separated initializers and nested braced-init-lists</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b851393a7a603801776d7a37d6c0643e748e054" translate="yes" xml:space="preserve">
          <source>brace-enclosed list of initializers and other braced-init-lists</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30d6b79375f6d01c2583794d6e091d675fd9d5e3" translate="yes" xml:space="preserve">
          <source>brace-or-equal-initializer</source>
          <target state="translated">brace-or-equal-initializer</target>
        </trans-unit>
        <trans-unit id="12a6eb0cb69d0cc4105b87f3adeb041588f8e30a" translate="yes" xml:space="preserve">
          <source>braced-init-list</source>
          <target state="translated">braced-init-list</target>
        </trans-unit>
        <trans-unit id="4f9cac8dbc4c67a388b8379dcc126c90c7c5e72a" translate="yes" xml:space="preserve">
          <source>break</source>
          <target state="translated">break</target>
        </trans-unit>
        <trans-unit id="fe629bfa35252fc46f5295e18bd5241426443ab4" translate="yes" xml:space="preserve">
          <source>break statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63922a16f0059e28af08740ace6eda2b5defbd39" translate="yes" xml:space="preserve">
          <source>breakset</source>
          <target state="translated">breakset</target>
        </trans-unit>
        <trans-unit id="45e821e8b7772bf60a6072efeed8d598a83a17de" translate="yes" xml:space="preserve">
          <source>bsearch</source>
          <target state="translated">bsearch</target>
        </trans-unit>
        <trans-unit id="c9c050d8e406c90f38cf093c56cdb2a161d12c40" translate="yes" xml:space="preserve">
          <source>btowc</source>
          <target state="translated">btowc</target>
        </trans-unit>
        <trans-unit id="827b8276dd99a8a945b710d5e1f7ccb6d9c39b16" translate="yes" xml:space="preserve">
          <source>bucket</source>
          <target state="translated">bucket</target>
        </trans-unit>
        <trans-unit id="14fa4a0acc4430e2672f31b0bc376ac382b874d6" translate="yes" xml:space="preserve">
          <source>bucket_count</source>
          <target state="translated">bucket_count</target>
        </trans-unit>
        <trans-unit id="2c5491b18f93396226144021b8653856d790aa67" translate="yes" xml:space="preserve">
          <source>bucket_size</source>
          <target state="translated">bucket_size</target>
        </trans-unit>
        <trans-unit id="cb25206229818f0ed8dd8ccd022f176f164106b0" translate="yes" xml:space="preserve">
          <source>buf</source>
          <target state="translated">buf</target>
        </trans-unit>
        <trans-unit id="abb1e3a428ffec59afe18b1af817b34f086a931b" translate="yes" xml:space="preserve">
          <source>buf_size</source>
          <target state="translated">buf_size</target>
        </trans-unit>
        <trans-unit id="e53c2ea1fe4bd2b78bf4723c7c155a578e020a25" translate="yes" xml:space="preserve">
          <source>buffer</source>
          <target state="translated">buffer</target>
        </trans-unit>
        <trans-unit id="0d304b0a68f8851e30f7151e552022d464d17dd4" translate="yes" xml:space="preserve">
          <source>buffer_size</source>
          <target state="translated">buffer_size</target>
        </trans-unit>
        <trans-unit id="6644820c5650a768c5b85e2c23d86d0cac8c7632" translate="yes" xml:space="preserve">
          <source>buffering mode to use. It can be one of the following values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f67ac826db82b4fbd0415abf4bc257f5a28282d" translate="yes" xml:space="preserve">
          <source>build levels</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0354b2fdc3db524a6e068bfa379056ed3f7ad50c" translate="yes" xml:space="preserve">
          <source>built-in candidates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d7f5ee2a89754fd0cb3b08ac980e8a4b203554b" translate="yes" xml:space="preserve">
          <source>but not</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b6c9eda2994fefe04704725d39d6e182aa5d739" translate="yes" xml:space="preserve">
          <source>but not defined in another namespace and pulled in by a using.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b27eeda51c65514f7ede2f271bbfdae6beab858" translate="yes" xml:space="preserve">
          <source>but not required</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e930ac3a5cba2d973a65eb77365acb7b3bca03a" translate="yes" xml:space="preserve">
          <source>by &lt;code&gt;count&lt;/code&gt; characters. No checks are done for underflow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38893c43d6296db23b83aa674592e53a0ef82db8" translate="yes" xml:space="preserve">
          <source>by an implementation-defined growth factor (which does not have to be integral).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e423d5b425964a0599ce7b7be8592cc9556915f6" translate="yes" xml:space="preserve">
          <source>by an implementation-defined growth factor (which is not necessarily integral), and then allocates the return block from the newly allocated buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24added52d4522a25a37a2f36a55feb5e3559d55" translate="yes" xml:space="preserve">
          <source>by following this algorithm:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62e4af1f2feaa26b0b76c2a5a2bcf4bff70be5d8" translate="yes" xml:space="preserve">
          <source>by one character. On failure returns &lt;code&gt;traits::eof()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="283f7e922c4e1f22a1cf9893f8952af5fff121ab" translate="yes" xml:space="preserve">
          <source>by the null character &lt;code&gt;'\0'&lt;/code&gt; and the pointer to the following character is stored in a static location for subsequent invocations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad7bb1d68e8f15367f767a46bea7049b20f14867" translate="yes" xml:space="preserve">
          <source>by the null wide character &lt;code&gt;L'\0'&lt;/code&gt; and the parser state (typically a pointer to the following wide character) is stored in the user-provided location &lt;code&gt;*ptr&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ec71c0ff83693783af430e6693da1ed988433ff" translate="yes" xml:space="preserve">
          <source>by the same thread and implements locking with a timeout</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cf1783fa99f62ca581f6fe8f3cd66b0f9ab9fc3" translate="yes" xml:space="preserve">
          <source>byte</source>
          <target state="translated">byte</target>
        </trans-unit>
        <trans-unit id="6b76c5ede7c5354387d6490e8ed6b115df0a1568" translate="yes" xml:space="preserve">
          <source>byte &lt;code&gt;0x07&lt;/code&gt; in ASCII encoding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="644b71607800e9269becb86b07c9e18ba8bde8c0" translate="yes" xml:space="preserve">
          <source>byte &lt;code&gt;0x08&lt;/code&gt; in ASCII encoding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="878760b7c68dbfe8f1ac752ad80680b5b0e65063" translate="yes" xml:space="preserve">
          <source>byte &lt;code&gt;0x09&lt;/code&gt; in ASCII encoding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12d33142405f7fbaffedd6257cd7cc37aee42305" translate="yes" xml:space="preserve">
          <source>byte &lt;code&gt;0x0a&lt;/code&gt; in ASCII encoding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cbb3e1785d7b78f8b427ed7efdba802559756c0" translate="yes" xml:space="preserve">
          <source>byte &lt;code&gt;0x0b&lt;/code&gt; in ASCII encoding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efadc491c2438c5b080d09696a0c47dddf0fe2f5" translate="yes" xml:space="preserve">
          <source>byte &lt;code&gt;0x0c&lt;/code&gt; in ASCII encoding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dcd4cf231f8559398cae88d4a9a1986d23a1c5e" translate="yes" xml:space="preserve">
          <source>byte &lt;code&gt;0x0d&lt;/code&gt; in ASCII encoding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81cecc0e1cf3b8877b36358e5519c4b642b94e4f" translate="yes" xml:space="preserve">
          <source>byte &lt;code&gt;0x22&lt;/code&gt; in ASCII encoding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b9a29153e50bdcb8d99ffe32a662abf0c45a6e6" translate="yes" xml:space="preserve">
          <source>byte &lt;code&gt;0x27&lt;/code&gt; in ASCII encoding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f35482876bef85021b384c54e58cf476798921b" translate="yes" xml:space="preserve">
          <source>byte &lt;code&gt;0x3f&lt;/code&gt; in ASCII encoding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e7adefe990ab5d7825cde7271b433b9e417bf14" translate="yes" xml:space="preserve">
          <source>byte &lt;code&gt;0x5c&lt;/code&gt; in ASCII encoding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c76b4265d0e5bdc1302b52604094650b50685af" translate="yes" xml:space="preserve">
          <source>byte &lt;code&gt;nn&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59bf89749dd5624d61ab0080c684533f6a7bd849" translate="yes" xml:space="preserve">
          <source>byte &lt;code&gt;nnn&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="997b795a1686eb78c4bfcef11c22969d880e1811" translate="yes" xml:space="preserve">
          <source>byte offset from the beginning of a standard-layout type to specified member</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b16a3e852ffc6de7e69e62c0d3d196d78d5380b" translate="yes" xml:space="preserve">
          <source>byte_err</source>
          <target state="translated">byte_err</target>
        </trans-unit>
        <trans-unit id="d9242c5c0269a19e7f4395faccf3284cbebe6c54" translate="yes" xml:space="preserve">
          <source>bytebuf</source>
          <target state="translated">bytebuf</target>
        </trans-unit>
        <trans-unit id="daf529a73101c2be626b99fc6938163e7a27620b" translate="yes" xml:space="preserve">
          <source>bytes</source>
          <target state="translated">bytes</target>
        </trans-unit>
        <trans-unit id="84a516841ba77a5b4648de2cd0dfcb30ea46dbb4" translate="yes" xml:space="preserve">
          <source>c</source>
          <target state="translated">c</target>
        </trans-unit>
        <trans-unit id="adb946ecebcfca0dba29624e2de9ce7b89a7dba4" translate="yes" xml:space="preserve">
          <source>c) 52 letters from &lt;code&gt;'a'&lt;/code&gt; to &lt;code&gt;'z'&lt;/code&gt; and from &lt;code&gt;'A'&lt;/code&gt; to &lt;code&gt;'Z'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67605d674839e0cc0648146eb029911c0b16f3fa" translate="yes" xml:space="preserve">
          <source>c) All characters have been read from the input sequence (&lt;code&gt;beg == end&lt;/code&gt;. If this condition terminates the loop, the function sets both &lt;code&gt;eofbit&lt;/code&gt; and &lt;code&gt;failbit&lt;/code&gt; in &lt;code&gt;err&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da0d8d0e977d27e5eb409e8022d6ccdefebc4289" translate="yes" xml:space="preserve">
          <source>c) Constructors with a &lt;code&gt;&lt;a href=&quot;../../string/basic_string_view&quot;&gt;std::string_view&lt;/a&gt;&lt;/code&gt; parameter &lt;code&gt;name&lt;/code&gt;(6,8,10,12,15-16) do not participate in overload resolution if &lt;code&gt;traits::locate_zone(name)&lt;/code&gt; is not well-formed or if that expression is not convertible to &lt;code&gt;TimeZonePtr&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9684819c71f55d175dfd7c74b6d891ef335ddffd" translate="yes" xml:space="preserve">
          <source>c) Determines the number of elements in the user-provided array as follows: if &lt;code&gt;n&lt;/code&gt; is greater than zero, &lt;code&gt;n&lt;/code&gt; is used. If &lt;code&gt;n&lt;/code&gt; is zero, &lt;code&gt;&lt;a href=&quot;../../string/byte/strlen&quot;&gt;std::strlen&lt;/a&gt;(gnext)&lt;/code&gt; is executed to determine the buffer size. If &lt;code&gt;n&lt;/code&gt; is negative, &lt;code&gt;&lt;a href=&quot;../../types/climits&quot;&gt;INT_MAX&lt;/a&gt;&lt;/code&gt; is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9578bc823ace6b8f91187c3ecfded436d3774e8" translate="yes" xml:space="preserve">
          <source>c) Either &lt;code&gt;Deleter&lt;/code&gt; is a reference type and &lt;code&gt;E&lt;/code&gt; is the same type as &lt;code&gt;D&lt;/code&gt;, or &lt;code&gt;Deleter&lt;/code&gt; is not a reference type and &lt;code&gt;E&lt;/code&gt; is implicitly convertible to &lt;code&gt;D&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39f21188bbbd16abd376f07aa343ef620b09420b" translate="yes" xml:space="preserve">
          <source>c) If &lt;code&gt;D&lt;/code&gt; is an lvalue-reference type &lt;code&gt;const A&amp;amp;&lt;/code&gt;, then the signatures are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08d77d4f86f35b141fa648a0f7fe673b2f231a5b" translate="yes" xml:space="preserve">
          <source>c) If it contains a type-constraint, then &lt;code&gt;decltype((expression))&lt;/code&gt; must satisfy the constraint imposed by the type-constraint. Otherwise, the enclosing requires-expression is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f2ddaa63678637582cd48a988309723dd3324da" translate="yes" xml:space="preserve">
          <source>c) If the class is a &lt;a href=&quot;nested_classes&quot;&gt;member of another class&lt;/a&gt;, the class of which it is a member</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="716255080e2f3b89447622b006b7fd7dd9b9b742" translate="yes" xml:space="preserve">
          <source>c) If the next character in the format string is equivalent to the next character in the input stream according to case-insensitive comparison, the function advances both sequences by one character &lt;code&gt;++fmtbeg, ++beg;&lt;/code&gt; and continues the loop, Otherwise, it sets the &lt;code&gt;failbit&lt;/code&gt; in &lt;code&gt;err&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cbdcd945d60c2b548aa4ec635bd36d82f793c57" translate="yes" xml:space="preserve">
          <source>c) In the end, &lt;code&gt;delim&lt;/code&gt; is appended to &lt;code&gt;seq&lt;/code&gt; once more</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89d85d850eb41b6423ce338c8a2ccfa1dd22912b" translate="yes" xml:space="preserve">
          <source>c) Otherwise, if the buffer is open for reading only, fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b2166d643617b933fdcb9113f05e8a332d09e80" translate="yes" xml:space="preserve">
          <source>c) Otherwise, if the buffer is unmodifiable (this strstreambuf was constructed with a string literal or some other &lt;code&gt;const&lt;/code&gt; array), fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6773eb57a6f6d570630e2593e2ef0804d79cbc71" translate="yes" xml:space="preserve">
          <source>c) Otherwise, places &lt;code&gt;os.width()-str.size()&lt;/code&gt; copies of the &lt;code&gt;os.fill()&lt;/code&gt; character before the character sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c3d5f480caa65d6b9a50b192ee19387700ec524" translate="yes" xml:space="preserve">
          <source>c) Otherwise, places &lt;code&gt;os.width()-v.size()&lt;/code&gt; copies of the &lt;code&gt;os.fill()&lt;/code&gt; character before the character sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a6d3b825640564064627b9f1633423158d7624a" translate="yes" xml:space="preserve">
          <source>c) Otherwise, the runtime check fails. If the &lt;code&gt;dynamic_cast&lt;/code&gt; is used on pointers, the null pointer value of type new_type is returned. If it was used on references, the exception &lt;code&gt;&lt;a href=&quot;../types/bad_cast&quot;&gt;std::bad_cast&lt;/a&gt;&lt;/code&gt; is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e87b21c45f6e7171f24286cbf0f0e5409eb1120e" translate="yes" xml:space="preserve">
          <source>c) The classes in which any template template arguments are members (if they happen to be class member templates)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3faa4774b0d99b4eb1fc03e25a8ee7cd5d519124" translate="yes" xml:space="preserve">
          <source>c) explicit &lt;a href=&quot;operator_member_access&quot;&gt;class member access&lt;/a&gt; expression that selects a member function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06f2e75e17573c31d45ca92792ce53a145df12ae" translate="yes" xml:space="preserve">
          <source>c) if &lt;code&gt;A&lt;/code&gt; is a function pointer type, the deduced &lt;code&gt;A&lt;/code&gt; is allowed to be pointer to noexcept function, convertible to &lt;code&gt;A&lt;/code&gt; by function pointer conversion; d) if &lt;code&gt;A&lt;/code&gt; is a pointer to member function, the deduced &lt;code&gt;A&lt;/code&gt; is allowed to be a pointer to noexcept member function, convertible to &lt;code&gt;A&lt;/code&gt; by function pointer conversion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d88c0f24cfbea0c01ec4cf3a992faa2b6cf17a4" translate="yes" xml:space="preserve">
          <source>c) if &lt;code&gt;dir == ios_base::end&lt;/code&gt;, then &lt;code&gt;newoff&lt;/code&gt; is the length of the entire initialized part of the buffer (if overallocation is used, the high watermark pointer minus the beginning pointer)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21883e548dc805738996975637c219d364b514c3" translate="yes" xml:space="preserve">
          <source>c) if &lt;code&gt;way == ios_base::end&lt;/code&gt;, then &lt;code&gt;newoff&lt;/code&gt; is the length of the entire initialized part of the buffer (if overallocation is used, the high watermark pointer minus the beginning pointer)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d23c4051ed6792ea9a0ac4ac0048393445a2f5e0" translate="yes" xml:space="preserve">
          <source>c) if the return type is a function type and &lt;code&gt;A&lt;/code&gt; is not a reference type, then &lt;code&gt;P&lt;/code&gt; is the function pointer type obtained by function-to-pointer conversion;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e327a5860606408d6f30fb10558596d7cdf99dec" translate="yes" xml:space="preserve">
          <source>c) if the value category of expression is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab409e5af3337dae3f769e5f50b55235095b312e" translate="yes" xml:space="preserve">
          <source>c) if this class is &lt;a href=&quot;nested_classes&quot;&gt;nested&lt;/a&gt;, the body of the enclosing class until the declaration of this class and the entire body of the base class(es) of the enclosing class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b18ec86073f70eab4d8d51d697c01d1621ac8ce0" translate="yes" xml:space="preserve">
          <source>c) or, if not that, both &lt;code&gt;S1&lt;/code&gt; and &lt;code&gt;S2&lt;/code&gt; are binding to a reference parameter to something other than the implicit object parameter of a ref-qualified member function, and &lt;code&gt;S1&lt;/code&gt; binds an rvalue reference to an rvalue while &lt;code&gt;S2&lt;/code&gt; binds an lvalue reference to an rvalue</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59fa952735bd25bda755b6433fcbb0c6b0cbbfaa" translate="yes" xml:space="preserve">
          <source>c) otherwise, if &lt;code&gt;A&lt;/code&gt; is a cv-qualified type, the top-level cv-qualifiers are ignored for deduction:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a763c2ddcf261912bc470ca341b0caad97b4363" translate="yes" xml:space="preserve">
          <source>c) otherwise, if the overload set includes a numeric literal operator template, the user-defined literal expression is treated as a function call &lt;code&gt;operator &quot;&quot; X&amp;lt;'c1', 'c2', 'c3'..., 'ck'&amp;gt;()&lt;/code&gt;, where c1..ck are the individual characters of &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b40d61a4f45d77812439e0672811d172feb29de" translate="yes" xml:space="preserve">
          <source>c) otherwise, if the overload set includes a numeric literal operator template, the user-defined literal expression is treated as a function call &lt;code&gt;operator &quot;&quot; X&amp;lt;'c1', 'c2', 'c3'..., 'ck'&amp;gt;()&lt;/code&gt;, where c1..ck are the individual characters of &lt;code&gt;n&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d3f9aa741d82a1c9e63a710bab69018268aaa66" translate="yes" xml:space="preserve">
          <source>c) preprocessing numbers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5728a0c2b71c2c88607bb54a8b65f147057e3cfd" translate="yes" xml:space="preserve">
          <source>c) the name of the class within its own definition acts as a public member type alias of itself for the purpose of &lt;a href=&quot;unqualified_lookup#Injected_class_name&quot;&gt;lookup&lt;/a&gt; (except when used to name a &lt;a href=&quot;constructor&quot;&gt;constructor&lt;/a&gt;): this is known as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="febd55c2dd65da5c2ae2f700671a96fa9f3be505" translate="yes" xml:space="preserve">
          <source>c)&lt;code&gt;Base::*&lt;/code&gt; to &lt;code&gt;Mid::*&lt;/code&gt; is better than &lt;code&gt;Base::*&lt;/code&gt; to &lt;code&gt;Derived::*&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f59c9d2f092ba3bfc50fa6a93ecd5a447d3cf190" translate="yes" xml:space="preserve">
          <source>c)&lt;code&gt;static_cast&lt;/code&gt; (with extensions) followed by &lt;code&gt;const_cast&lt;/code&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de57b3124f9809a774e696abc1dc46c9fc343b3e" translate="yes" xml:space="preserve">
          <source>c)&lt;code&gt;str.max_size()&lt;/code&gt; characters have been stored, in which case &lt;code&gt;getline&lt;/code&gt; sets &lt;a href=&quot;../../io/ios_base/iostate&quot;&gt;&lt;code&gt;failbit&lt;/code&gt;&lt;/a&gt; and returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09847540794d19bd490a73f53a51885e5338ddd3" translate="yes" xml:space="preserve">
          <source>c-char is either</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5214883ef7e687be05cfa56450a50037a13eb6b" translate="yes" xml:space="preserve">
          <source>c-char-sequence is a sequence of two or more c-chars.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1708459620489ee3994622735ca8fa4a844b8f7" translate="yes" xml:space="preserve">
          <source>c1, c2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5713aabe5d18a23031c2f9920c360478dd60ea18" translate="yes" xml:space="preserve">
          <source>c16</source>
          <target state="translated">c16</target>
        </trans-unit>
        <trans-unit id="1dd62be74659c5d93d22341d0618b56566c459fb" translate="yes" xml:space="preserve">
          <source>c16rtomb</source>
          <target state="translated">c16rtomb</target>
        </trans-unit>
        <trans-unit id="5c87bb30988aeddde73acc547013b15109404be5" translate="yes" xml:space="preserve">
          <source>c32</source>
          <target state="translated">c32</target>
        </trans-unit>
        <trans-unit id="c86109e360f162c4eb9dcded70b86be4144d29b1" translate="yes" xml:space="preserve">
          <source>c32rtomb</source>
          <target state="translated">c32rtomb</target>
        </trans-unit>
        <trans-unit id="9f84ad6b89dc26670c0d6e7a3f81093b41c04438" translate="yes" xml:space="preserve">
          <source>c8</source>
          <target state="translated">c8</target>
        </trans-unit>
        <trans-unit id="a6c3481bc07deff3fbcf21e78538dcc70eb79e32" translate="yes" xml:space="preserve">
          <source>c8rtomb</source>
          <target state="translated">c8rtomb</target>
        </trans-unit>
        <trans-unit id="ac892b11ea226ec5065fc4d41221325a7d791066" translate="yes" xml:space="preserve">
          <source>c_str</source>
          <target state="translated">c_str</target>
        </trans-unit>
        <trans-unit id="0b41b6527a8cd52f3dc39fcd4498134b0ef353b4" translate="yes" xml:space="preserve">
          <source>c_strnativeoperator string_type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9766177dd5587e03b7cea8781b271af3fe491fd9" translate="yes" xml:space="preserve">
          <source>calculate the hash of the argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="331956a31adb94d9a1e3239eaba79143dc9b1cac" translate="yes" xml:space="preserve">
          <source>calculates a hash value for a path object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="500ebecc531f4e57debef89f14f557b3c6bd2ff8" translate="yes" xml:space="preserve">
          <source>calculates and prints the first 10 factorials.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58d9c25c28568f63e47c479b4180de03bedac420" translate="yes" xml:space="preserve">
          <source>calculates the bias-eliminated, evenly distributed 32-bit values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3f27e89e963dc81d97a1fa60a2f0918f6a7f073" translate="yes" xml:space="preserve">
          <source>calculates the length of a null-terminated character string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd0b9dce3bfe571ee814561432b60d433a1f5260" translate="yes" xml:space="preserve">
          <source>calculates the length of the externT string that would be consumed by conversion into given internT buffer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2036596f8c42bf50616ebbf5a7240826d92c896b" translate="yes" xml:space="preserve">
          <source>calculates the sum of all elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64a8a1bfda4ddfee8341385ebe8923ddb0220240" translate="yes" xml:space="preserve">
          <source>calendar time type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f70d549ee7eb7218043abe55c875943eb915a83" translate="yes" xml:space="preserve">
          <source>call &lt;code&gt;os.imbue(loc)&lt;/code&gt; (for overloads (2,4) only);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="469996b2b9fa146eff0709420d3178c0ca09b81c" translate="yes" xml:space="preserve">
          <source>call &lt;code&gt;reserve()&lt;/code&gt; on the vector, since it does not know of the vector's usage characteristics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7665ef7c95961e1ad897565d1f367859f26ab93b" translate="yes" xml:space="preserve">
          <source>call &lt;code&gt;to_stream(os, fmt, s)&lt;/code&gt; (for (1,2)) or &lt;code&gt;to_stream(os, fmt.c_str(), s)&lt;/code&gt; (for (3,4)), where &lt;code&gt;to_stream&lt;/code&gt; is called unqualified to enable &lt;a href=&quot;../language/adl&quot;&gt;argument-dependent lookup&lt;/a&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b76768ad3375d1dc7bcd3af20de7235afc651fc" translate="yes" xml:space="preserve">
          <source>call in that order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d2aa6893ffeb2557c7b31ea0d651e12245b70a4" translate="yes" xml:space="preserve">
          <source>call synchronizes-with the next</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfc884072cf87ce2f57078e23279dc198b61d8ea" translate="yes" xml:space="preserve">
          <source>call synchronizes-with the returns from all</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b954c238fefe8ce57f415a036e4e5710b2dc5f1" translate="yes" xml:space="preserve">
          <source>call to any library function, except the following</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4428db8f6d9f9163ac99c345173ccef553224e7" translate="yes" xml:space="preserve">
          <source>call to any type of function that does not have non-throwing exception specification, unless it is a &lt;a href=&quot;constexpr&quot;&gt; constant expression&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30965dfb034d03b170635fa109e7cf5f0340f69a" translate="yes" xml:space="preserve">
          <source>call, comma, ternary</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96923b03587e2d79f2b15b1b24349431a68e2115" translate="yes" xml:space="preserve">
          <source>call, with no additional synchronization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6dbfc6d610c4973eb73b367f48eb1c9d4bdf235" translate="yes" xml:space="preserve">
          <source>call. The end of each</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38ec3fef5f020c3242ef847bdc7c9cbc1bcd4bdb" translate="yes" xml:space="preserve">
          <source>call_once</source>
          <target state="translated">call_once</target>
        </trans-unit>
        <trans-unit id="61c2646b7b558ec82695f28658875c57279e52e9" translate="yes" xml:space="preserve">
          <source>callable function to initialize the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f83adaaee730113586f8861da455bd121dc91c1" translate="yes" xml:space="preserve">
          <source>callback function type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d6364ba311876adcb810e8ac5a5c3d73f55fa43" translate="yes" xml:space="preserve">
          <source>calloc</source>
          <target state="translated">calloc</target>
        </trans-unit>
        <trans-unit id="eece732a894032231fd26526252f2514aa7ee776" translate="yes" xml:space="preserve">
          <source>calls &lt;code&gt;&lt;a href=&quot;../memory/new/operator_delete&quot;&gt;operator delete&lt;/a&gt;&lt;/code&gt; to free the memory used by the coroutine state</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="696d2f3085e7d23570eb88b8e6c6163c21b9c0d5" translate="yes" xml:space="preserve">
          <source>calls &lt;code&gt;promise.final_suspend()&lt;/code&gt; and &lt;code&gt;co_await&lt;/code&gt;'s the result (e.g. to resume a continuation or publish a result). It's undefined behavior to resume a coroutine from this point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d6449bc4a1679d724093c6e75ab9220d9dc82dc" translate="yes" xml:space="preserve">
          <source>calls &lt;code&gt;promise.final_suspend()&lt;/code&gt; and &lt;code&gt;co_await&lt;/code&gt;'s the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6666b6dcb85f53244c98e381d568e0eca3f794b5" translate="yes" xml:space="preserve">
          <source>calls &lt;code&gt;promise.get_return_object()&lt;/code&gt; and keeps the result in a local variable. The result of that call will be returned to the caller when the coroutine first suspends. Any exceptions thrown up to and including this step propagate back to the caller, not placed in the promise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d019796167f1cdd71c54a51ff94323a895349353" translate="yes" xml:space="preserve">
          <source>calls &lt;code&gt;promise.initial_suspend()&lt;/code&gt; and &lt;code&gt;co_await&lt;/code&gt;'s its result. Typical Promise types either return a &lt;code&gt;suspend_always&lt;/code&gt;, for lazily-started coroutines, or &lt;code&gt;suspend_never&lt;/code&gt;, for eagerly-started coroutines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d38a649cd80163003c0d0278f59c9a844dac361" translate="yes" xml:space="preserve">
          <source>calls &lt;code&gt;promise.return_void()&lt;/code&gt; for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3bf6ed17f2742efd748857b13090efa2ebf435e" translate="yes" xml:space="preserve">
          <source>calls a function with a tuple of arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2e2ef97b79c395be38f9239d13e90aa03535ae6" translate="yes" xml:space="preserve">
          <source>calls emit on the underlying basic_syncbuf to transmit its internal data to the final destination</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48922ba61cb737a295492adf30a8da53b6ef70d1" translate="yes" xml:space="preserve">
          <source>calls on the same &lt;code&gt;flag&lt;/code&gt; form a single total order consisting of zero or more</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3d21e8d350db19388436959a3627137ec08b0c4" translate="yes" xml:space="preserve">
          <source>calls on the same &lt;code&gt;flag&lt;/code&gt;: this means that all concurrent calls to &lt;code&gt;call_once&lt;/code&gt; are guaranteed to observe any side-effects made by the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75c0bae2e2ae9cbc0a813148863fb8691dc75411" translate="yes" xml:space="preserve">
          <source>calls the constructor for the promise object. If the promise type has a constructor that takes all coroutine parameters, that constuctor is called, with post-copy coroutine arguments. Otherwise the default constructor is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c43985c0de59fe5a63d283fc29d03a97e9c2787b" translate="yes" xml:space="preserve">
          <source>calls the destructor of the promise object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aa504d7b68a32e26a1cb8393668a338bbc80aa2" translate="yes" xml:space="preserve">
          <source>calls the destructors of the function parameter copies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bea18f23badbc750bca2c1dd29c51fa8a59868d8" translate="yes" xml:space="preserve">
          <source>calls the host environment's command processor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="814b0016a171172adde4f3665c4b9a822337c872" translate="yes" xml:space="preserve">
          <source>calls the provided functor with the arguments held by one or more variants</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c408a406b09d381fa8eb1d9956c3ddbef7e1bc3" translate="yes" xml:space="preserve">
          <source>calls the stored function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c9eb30c3fc2c45925abe7f1854d4d2580e7dde7" translate="yes" xml:space="preserve">
          <source>calls to &lt;code&gt;operator==&lt;/code&gt; on &lt;code&gt;value_type&lt;/code&gt;, calls to the predicate returned by &lt;a href=&quot;key_eq&quot;&gt;key_eq&lt;/a&gt;, and calls to the hasher returned by &lt;a href=&quot;hash_function&quot;&gt;hash_function&lt;/a&gt; in the average case, where</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b3262fa1389f124098e7048232814dacda1ce34" translate="yes" xml:space="preserve">
          <source>calls to &lt;code&gt;operator==&lt;/code&gt; on &lt;code&gt;value_type&lt;/code&gt;, calls to the predicate returned by &lt;a href=&quot;key_eq&quot;&gt;key_eq&lt;/a&gt;, and calls to the hasher returned by &lt;a href=&quot;hash_function&quot;&gt;hash_function&lt;/a&gt;, in the average case, proportional to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ac0d54fd4d6aa87113a26caf0af521a84a3a3d3" translate="yes" xml:space="preserve">
          <source>calls, followed by one</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aebe69ad7198d12f664f3e71ca19254a4c36f8bc" translate="yes" xml:space="preserve">
          <source>can be moved from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f586a8752a83629eca6a403bdaa7f46e282a34e1" translate="yes" xml:space="preserve">
          <source>can be swapped with an unqualified non-member function call &lt;code&gt;swap()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="294648051bc67d48bd8452df71c04d2ec64ef311" translate="yes" xml:space="preserve">
          <source>can be used to iterate through a single bucket but not across buckets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c73ad34253b77c62fde7c8dfc393265c4a0309c" translate="yes" xml:space="preserve">
          <source>can be used with some modifications in the following situations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="944d8514361d64554a73389eb03cb935ad730549" translate="yes" xml:space="preserve">
          <source>can consist of several words not necessarily in quotes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc9e68ab327fbaa2a2bf054b0e6c1ec9dfdf8b08" translate="yes" xml:space="preserve">
          <source>can not be copy-assigned</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88accd794ebab07c501bb5c93cf41951ff1b3e34" translate="yes" xml:space="preserve">
          <source>can only contain digits, Latin letters, and underscores. The result is a quiet NaN floating-point value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dda8d3ea92a13e6fcdf645c918154962509137de" translate="yes" xml:space="preserve">
          <source>can replaced with one of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8761d26fb8d6c7853faf7cf13fd3e5471364dc36" translate="yes" xml:space="preserve">
          <source>cancelled</source>
          <target state="translated">cancelled</target>
        </trans-unit>
        <trans-unit id="910238342593e48e0187dab0a1e9eec5a591b6df" translate="yes" xml:space="preserve">
          <source>cancels the effect of &lt;code&gt;&lt;a href=&quot;../memory/gc/declare_no_pointers&quot;&gt;std::declare_no_pointers&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a530dd2834cdb1d3b78d33f99530c0bc8930c91" translate="yes" xml:space="preserve">
          <source>cancels the effect of &lt;code&gt;&lt;a href=&quot;memory/gc/declare_no_pointers&quot;&gt;std::declare_no_pointers&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f292ce2ce5050d95e34bf93e393c5d3934be4be0" translate="yes" xml:space="preserve">
          <source>cancels the effect of &lt;code&gt;std::declare_no_pointers&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bc2c730c336fffcfada420abc3582e34b4d8375" translate="yes" xml:space="preserve">
          <source>candidate function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3e3bdb1b7158ef150481618116c0d166fbabb71" translate="yes" xml:space="preserve">
          <source>candidate functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f46f0ff61f0fd3c0b5003d36ca854e22ec322053" translate="yes" xml:space="preserve">
          <source>candidate inheriting constructors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="820910cbd5d16eb419cd08a13ad75e686723eba4" translate="yes" xml:space="preserve">
          <source>cannot be non-member</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08940dece180de6643dace1c6cf4093428f17eaf" translate="yes" xml:space="preserve">
          <source>cannot deduce array bound and element type from a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a93b9ca40070e6c05a775fa0a6f5550ff8d5bb16" translate="yes" xml:space="preserve">
          <source>canonical path</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a79f4da35a0f62ca397e46356cbcde89769bb8a7" translate="yes" xml:space="preserve">
          <source>canonicalweakly_canonical</source>
          <target state="translated">canonicalweakly_canonical</target>
        </trans-unit>
        <trans-unit id="7cb1f56d3fbe09e809244fc8e13671cd876e3860" translate="yes" xml:space="preserve">
          <source>capacity</source>
          <target state="translated">capacity</target>
        </trans-unit>
        <trans-unit id="086bfda9821e3dde7d0b8778694b557f1edd5b33" translate="yes" xml:space="preserve">
          <source>capture-less generic lambda</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4579e296ccaab3267f3510a662f06b21aca909c5" translate="yes" xml:space="preserve">
          <source>capture-less non-generic lambda</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad49510a2a24f40544e8657d6b5927333fea654d" translate="yes" xml:space="preserve">
          <source>captures</source>
          <target state="translated">captures</target>
        </trans-unit>
        <trans-unit id="604c896055767b41ec2aaecb06eb779f904bd569" translate="yes" xml:space="preserve">
          <source>captures the current exception in a &lt;code&gt;&lt;a href=&quot;../error/exception_ptr&quot;&gt;std::exception_ptr&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c215623834abb1d1a2aebb70963a727269877a11" translate="yes" xml:space="preserve">
          <source>captures the current exception in a &lt;code&gt;&lt;a href=&quot;../exception_ptr&quot;&gt;std::exception_ptr&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc017a2f0fa16038eb1eba4cb755833a7598bacb" translate="yes" xml:space="preserve">
          <source>captures the current exception in a &lt;code&gt;&lt;a href=&quot;error/exception_ptr&quot;&gt;std::exception_ptr&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="151fe8f6905e25081f82b78905ed5eef8aafec1a" translate="yes" xml:space="preserve">
          <source>captures the current exception in a &lt;code&gt;&lt;a href=&quot;exception_ptr&quot;&gt;std::exception_ptr&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04649a58e2c3e1da9fec6060d10ca3dd769230a2" translate="yes" xml:space="preserve">
          <source>captures the current exception in a &lt;code&gt;std::exception_ptr&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e9f192b79a14968d26f70ab1aa8e21b65e3df64" translate="yes" xml:space="preserve">
          <source>carriage return</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb01a154773d2c86df137e2f014bce3c69afa131" translate="yes" xml:space="preserve">
          <source>carriage return (&lt;code&gt;0x0d&lt;/code&gt;, &lt;code&gt;'\r'&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50b27358bf6f95b269f2663a454c4fdb8bb02605" translate="yes" xml:space="preserve">
          <source>carries dependency</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6406510c31e0c9925733c7f21414bf6428333ed2" translate="yes" xml:space="preserve">
          <source>case</source>
          <target state="translated">case</target>
        </trans-unit>
        <trans-unit id="c126f4bcf5f8b045cbf0e937e94fd9897f447912" translate="yes" xml:space="preserve">
          <source>case expressions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="768a46a5d3c9426d78cbf894c1b5268cf11d9730" translate="yes" xml:space="preserve">
          <source>cassert</source>
          <target state="translated">cassert</target>
        </trans-unit>
        <trans-unit id="a9b23c3fa19600bc2f690e23c393ca73b27ac40a" translate="yes" xml:space="preserve">
          <source>casts the result of dereferencing an object to its associated rvalue reference type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d989e8d27dc9e0ec3389fc855f142c3d40f0c50" translate="yes" xml:space="preserve">
          <source>cat</source>
          <target state="translated">cat</target>
        </trans-unit>
        <trans-unit id="9ebad64e5d2b9542779537fce0354f34c099e7ff" translate="yes" xml:space="preserve">
          <source>catch</source>
          <target state="translated">catch</target>
        </trans-unit>
        <trans-unit id="0796c896c5bca1a1b371878e05c39298910ee4c2" translate="yes" xml:space="preserve">
          <source>catches the exception and calls &lt;code&gt;promise.unhandled_exception()&lt;/code&gt; from within the catch-block</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2cafc85aa95daa0d8967b1e59201b9fa30a3968" translate="yes" xml:space="preserve">
          <source>categorizes the given floating point value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ccbf9c9c5fc1bc34df8238a97094968f38f5165" translate="yes" xml:space="preserve">
          <source>category</source>
          <target state="translated">category</target>
        </trans-unit>
        <trans-unit id="837523540586bf157392f6efcd1f5edf2d2eba8b" translate="yes" xml:space="preserve">
          <source>cauchy_distribution</source>
          <target state="translated">cauchy_distribution</target>
        </trans-unit>
        <trans-unit id="1ee6256c4231a89526cdba99a385ddba68bf9bd5" translate="yes" xml:space="preserve">
          <source>cause an &lt;b&gt;&lt;a href=&quot;preprocessor/error&quot;&gt;error&lt;/a&gt;&lt;/b&gt; (controlled by directive &lt;code&gt;#error&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e028c66150f39cd52493a640e31aca502b9b8282" translate="yes" xml:space="preserve">
          <source>causes abnormal program termination (without cleaning up)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a0cf3e861ff5d86d8d7810d59dd7728ae64906f" translate="yes" xml:space="preserve">
          <source>causes base class constructors to be found by name lookup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad242532675681b2e8455fe34f1189f79dfc9512" translate="yes" xml:space="preserve">
          <source>causes normal program termination with cleaning up</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99f4cd6dd02307550e4c6e67952f8b1ed34327cf" translate="yes" xml:space="preserve">
          <source>causes normal program termination without cleaning up</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81857cbeef2f103760a365abbae055319fa9ef2a" translate="yes" xml:space="preserve">
          <source>causes quick program termination without completely cleaning up</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceb573dbb939c5a6fea55f33115960e1f2e5dc5c" translate="yes" xml:space="preserve">
          <source>cbrtcbrtfcbrtl</source>
          <target state="translated">cbrtcbrtfcbrtl</target>
        </trans-unit>
        <trans-unit id="43cfe91d60fee8b5b61ec150b063e2e01c598c35" translate="yes" xml:space="preserve">
          <source>ccomplex</source>
          <target state="translated">ccomplex</target>
        </trans-unit>
        <trans-unit id="607432cfff0226be7d60a3afe5c18522aae30c3c" translate="yes" xml:space="preserve">
          <source>cctype</source>
          <target state="translated">cctype</target>
        </trans-unit>
        <trans-unit id="dc9ceb915fd2468579fded372117e2a8090955d0" translate="yes" xml:space="preserve">
          <source>ceil(std::chrono::duration)</source>
          <target state="translated">ceil(std::chrono::duration)</target>
        </trans-unit>
        <trans-unit id="2346acbeece5e183e38959c785f8d2979cee85bb" translate="yes" xml:space="preserve">
          <source>ceil(std::chrono::time_point)</source>
          <target state="translated">ceil(std::chrono::time_point)</target>
        </trans-unit>
        <trans-unit id="c89385a0aa0774e85a7c2875718903a31b365d86" translate="yes" xml:space="preserve">
          <source>ceil2</source>
          <target state="translated">ceil2</target>
        </trans-unit>
        <trans-unit id="549c8176d95b05554c77528516e2ef4030993d24" translate="yes" xml:space="preserve">
          <source>ceilceilfceill</source>
          <target state="translated">ceilceilfceill</target>
        </trans-unit>
        <trans-unit id="9c46fa693b882d9575f7121c7c98256a6f19b0dc" translate="yes" xml:space="preserve">
          <source>cerrno</source>
          <target state="translated">cerrno</target>
        </trans-unit>
        <trans-unit id="14ae4464a0b9cdd29e3db3747c618d6bfe89f247" translate="yes" xml:space="preserve">
          <source>cerrwcerr</source>
          <target state="translated">cerrwcerr</target>
        </trans-unit>
        <trans-unit id="e509e831c3e8a374fc27aca7f5c9839970cfdb27" translate="yes" xml:space="preserve">
          <source>cfenv</source>
          <target state="translated">cfenv</target>
        </trans-unit>
        <trans-unit id="aa85e6b31cca64df2d8cdb09f22eb6f2b438043b" translate="yes" xml:space="preserve">
          <source>cfloat</source>
          <target state="translated">cfloat</target>
        </trans-unit>
        <trans-unit id="482bd64c6c9f098c9ef8b77b8f870517bf33a1b9" translate="yes" xml:space="preserve">
          <source>ch</source>
          <target state="translated">ch</target>
        </trans-unit>
        <trans-unit id="29c16341a10bfaa178825ea6522570dd1ba1d1b3" translate="yes" xml:space="preserve">
          <source>change the contained object, constructing the new object directly</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4499b38628ce19c7994e7b6a95b6a8ba58d38e27" translate="yes" xml:space="preserve">
          <source>changed to return a null pointer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9a850a6d3f3fd69a7137bbe292bca67d92a4bdb" translate="yes" xml:space="preserve">
          <source>changes between the definition context and the point of instantiation of a specialization of the template, the program is ill-formed, no diagnostic required. This is possible in the following situations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a6f0d0a544a37ee2036391b0014f465cefa8c13" translate="yes" xml:space="preserve">
          <source>changes floating-point precision</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3da8272706e5e4d31a854a63e23febf57dbbe692" translate="yes" xml:space="preserve">
          <source>changes formatting used for floating-point I/O</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9265d80427cfe2b3ffbcf04b4fd877c2a6c938a6" translate="yes" xml:space="preserve">
          <source>changes the associated locale</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e85fd232172e958baff1a2a4ad1f929e6783826" translate="yes" xml:space="preserve">
          <source>changes the base used for integer I/O</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7807a11d1aeb493d18bd18caebcfa06fb7726f8" translate="yes" xml:space="preserve">
          <source>changes the current emit-on-sync policy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="511e58b471879af5672bc671007d6988a60b6c80" translate="yes" xml:space="preserve">
          <source>changes the fill character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05cd028c4577aca14844277246d1f69fa9baa8ba" translate="yes" xml:space="preserve">
          <source>changes the function to be called by &lt;code&gt;&lt;a href=&quot;../error/exception/unexpected&quot;&gt;std::unexpected&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e50c795dbbf862f15777c876be1c7d39df66898a" translate="yes" xml:space="preserve">
          <source>changes the function to be called by &lt;code&gt;&lt;a href=&quot;../error/terminate&quot;&gt;std::terminate&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68e39bdee3f419e3ab465fc30b0584ab6a974e3d" translate="yes" xml:space="preserve">
          <source>changes the function to be called by &lt;code&gt;&lt;a href=&quot;error/exception/unexpected&quot;&gt;std::unexpected&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a768d1d42f956ad82cfb231b4facd79853348f3f" translate="yes" xml:space="preserve">
          <source>changes the function to be called by &lt;code&gt;&lt;a href=&quot;error/terminate&quot;&gt;std::terminate&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1a2a56b913644da5c9992b7252398132bc41543" translate="yes" xml:space="preserve">
          <source>changes the function to be called by &lt;code&gt;&lt;a href=&quot;terminate&quot;&gt;std::terminate&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5174862829dac8c9525aaad6af81de9f75329a6c" translate="yes" xml:space="preserve">
          <source>changes the function to be called by &lt;code&gt;&lt;a href=&quot;unexpected&quot;&gt;std::unexpected&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c1312f2a50ccc15f1b0b9e54b989f97f2150c8b" translate="yes" xml:space="preserve">
          <source>changes the global locale</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa6fe93fea0364438557981541ad7193ce4d13d8" translate="yes" xml:space="preserve">
          <source>changes the number of characters stored</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57d463acc50f5596adc11140356a9229f474242c" translate="yes" xml:space="preserve">
          <source>changes the number of elements stored</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98d54119bfe52b2bcfe824b06ddf3bf26c6f0479" translate="yes" xml:space="preserve">
          <source>changes the size of a regular file by truncation or zero-fill</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fc4317138b3d9524fa59fecdfc9ab0bc34b8a2f" translate="yes" xml:space="preserve">
          <source>changes the size of valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1527ea4c6c21e4a686fc16fb8b71b25eb074a191" translate="yes" xml:space="preserve">
          <source>changes the time format used for output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63c7d782b9203a3440b528439828c4ff11bbd4fb" translate="yes" xml:space="preserve">
          <source>changes the width of the next input/output field</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71fafc4e2fc1e47e234762a96b80512b6b5534c2" translate="yes" xml:space="preserve">
          <source>char</source>
          <target state="translated">char</target>
        </trans-unit>
        <trans-unit id="5c3cd06a93e5e97789634b5ac2b1ba0018e69ad9" translate="yes" xml:space="preserve">
          <source>char array to use as the output buffer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ed3fe8098d6e0de78fe1e8a16df0bc7fcc40d03" translate="yes" xml:space="preserve">
          <source>char frac_digits</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a8b9a7d235c9417a3afe5743bca79380e919f3b" translate="yes" xml:space="preserve">
          <source>char int_frac_digits</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3e91c135b1b8b3fee2bb7b4e770c82f2a798e4c" translate="yes" xml:space="preserve">
          <source>char int_n_cs_precedes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8edd4e13d8a46b3f4654637eadbc9802067f37b4" translate="yes" xml:space="preserve">
          <source>char int_n_sep_by_space</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38c55a24b0d2593523d7532223ee334b4a503523" translate="yes" xml:space="preserve">
          <source>char int_n_sign_posn</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5acc6bf8c95ea3a54eafad568f685d645e62fc2" translate="yes" xml:space="preserve">
          <source>char int_p_cs_precedes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab569f9545be35334ff52a5f207f977c060ea6b4" translate="yes" xml:space="preserve">
          <source>char int_p_sep_by_space</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38f64db01fea9f1bf8e4778b318ece611a72d9ad" translate="yes" xml:space="preserve">
          <source>char int_p_sign_posn</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0766d8884d2c1d15186ae9e5e4070d83a4a8030" translate="yes" xml:space="preserve">
          <source>char n_cs_precedes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e1452a7dbd52a2267fb12004e3a750706b33986" translate="yes" xml:space="preserve">
          <source>char n_sep_by_space</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bda055681f41ce7939fb4df4e25fab56eefd9bf" translate="yes" xml:space="preserve">
          <source>char n_sign_posn</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a60f400cf48362c996d4005bbeadffea31c6fe91" translate="yes" xml:space="preserve">
          <source>char p_cs_precedes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4e8df07e7e306386f15a559cd4555b1ff1b6ef8" translate="yes" xml:space="preserve">
          <source>char p_sep_by_space</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fb530b998db45283a490990db3369bce3afbae3" translate="yes" xml:space="preserve">
          <source>char p_sign_posn</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="082354697418cc67f10c1f0992c76b38529a8f62" translate="yes" xml:space="preserve">
          <source>char* currency_symbol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85e859f5125ce1b7837cbd2d721b5a3ccd0fcb5b" translate="yes" xml:space="preserve">
          <source>char* decimal_point</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e02438b9d93c9d964247be67963a0c4e5f16057b" translate="yes" xml:space="preserve">
          <source>char* grouping</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64aaa633172988b59703e9c4979c08f90e08b707" translate="yes" xml:space="preserve">
          <source>char* int_curr_symbol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a478208650833e1ac0d547b22f5d442e1994bcef" translate="yes" xml:space="preserve">
          <source>char* mon_decimal_point</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f11216b4653477793bd18ab2082978728d65a0a" translate="yes" xml:space="preserve">
          <source>char* mon_grouping</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a3648d7ed7e3967186650e689019bd82c7cd3f2" translate="yes" xml:space="preserve">
          <source>char* mon_thousands_sep</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7121b9de4faa918e5e81b3c26010cd44825445f1" translate="yes" xml:space="preserve">
          <source>char* negative_sign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc215f6674c9147d5263dba220bc9f303a89e3ae" translate="yes" xml:space="preserve">
          <source>char* positive_sign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58985b17cb576757740a8d7e1f31926e86c7369f" translate="yes" xml:space="preserve">
          <source>char* thousands_sep</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f0929def9f464eaa3995a4828b85af1d75c74b2" translate="yes" xml:space="preserve">
          <source>char16_t</source>
          <target state="translated">char16_t</target>
        </trans-unit>
        <trans-unit id="5a100eb0c44e1eb34410cbe60ee8a0781c9599eb" translate="yes" xml:space="preserve">
          <source>char32_t</source>
          <target state="translated">char32_t</target>
        </trans-unit>
        <trans-unit id="a8e5d855e7d214ad6a88bbe94cb1b2989a3fc075" translate="yes" xml:space="preserve">
          <source>char8_t</source>
          <target state="translated">char8_t</target>
        </trans-unit>
        <trans-unit id="ec0c4dacb27e5b292458b373ee79362618a7366a" translate="yes" xml:space="preserve">
          <source>char_sequence</source>
          <target state="translated">char_sequence</target>
        </trans-unit>
        <trans-unit id="f0db3fa401aea04b711d6f1f3630552eaaee8e59" translate="yes" xml:space="preserve">
          <source>character</source>
          <target state="translated">character</target>
        </trans-unit>
        <trans-unit id="23bb22d8aab24aba9b2f28895b2b23e2a939a85f" translate="yes" xml:space="preserve">
          <source>character class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1369fe5ef1a51f279eb734b2a561104457c1ff9" translate="yes" xml:space="preserve">
          <source>character identifying characters to search for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51a5cceafefdc404095fb964ad568c20f0406fe1" translate="yes" xml:space="preserve">
          <source>character literal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2ee60d27e5b9452cff70cf5324d7f42d437d4ad" translate="yes" xml:space="preserve">
          <source>character range to write to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c7bbb320040eef7457ff05c1a8789e67e8d3b14" translate="yes" xml:space="preserve">
          <source>character sequence, whereas &lt;code&gt;&lt;a href=&quot;regex_search&quot;&gt;std::regex_search&lt;/a&gt;&lt;/code&gt; will successfully match subsequences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4daa65e981342fff82b1e1ec5ca27b5947c77bdb" translate="yes" xml:space="preserve">
          <source>character string identifying the command to be run in the command processor. If a null pointer is given, command processor is checked for existence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b351fb163a0a8bf4be05047071ee94b780e5061a" translate="yes" xml:space="preserve">
          <source>character string to be written</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa455c148ff6f1c0df0970e13cd7842debe47d1e" translate="yes" xml:space="preserve">
          <source>character that needs to be examined for equivalence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="431e1fc64bb73470c804abea232b34f52e6c0a8f" translate="yes" xml:space="preserve">
          <source>character that needs to be examined for equivalence, ignoring case</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06ecf932feeb72872d1cd4eb41412bde55c5fee1" translate="yes" xml:space="preserve">
          <source>character to assign to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e4a226dacf7aeb6fcbd1e5ada3c467b461aa757" translate="yes" xml:space="preserve">
          <source>character to be converted. If the value of &lt;code&gt;ch&lt;/code&gt; is not representable as &lt;code&gt;unsigned char&lt;/code&gt; and does not equal &lt;code&gt;&lt;a href=&quot;../../io/c&quot;&gt;EOF&lt;/a&gt;&lt;/code&gt;, the behavior is undefined</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93de424afd4ef92d902d8fb5c8474b8b1e898272" translate="yes" xml:space="preserve">
          <source>character to be converted. If the value of &lt;code&gt;ch&lt;/code&gt; is not representable as &lt;code&gt;unsigned char&lt;/code&gt; and does not equal &lt;code&gt;&lt;a href=&quot;../../io/c&quot;&gt;EOF&lt;/a&gt;&lt;/code&gt;, the behavior is undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f986d9e46fbae80cbbb3f23e53609bf9272e83a2" translate="yes" xml:space="preserve">
          <source>character to be pushed into the input stream buffer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57d7a7ef7a484bf5ab0b5efcc143db2817dbcd51" translate="yes" xml:space="preserve">
          <source>character to be written</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="692d0a73bc69c812237a3a617465442960850a10" translate="yes" xml:space="preserve">
          <source>character to classify</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a7ba31b557c08a2bfba0619629e85222812826e" translate="yes" xml:space="preserve">
          <source>character to compare</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea077c684cff5dc7052280ddab915305fbccc52b" translate="yes" xml:space="preserve">
          <source>character to convert</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbe7828423775e4317e8215cf2c11971942ad32e" translate="yes" xml:space="preserve">
          <source>character to initialize the new characters with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75213fc543014868339e95c0cf95d8cb30fa638c" translate="yes" xml:space="preserve">
          <source>character to insert</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f4c2c3eaf398a97c8df177b63887ddf2fcbffd4" translate="yes" xml:space="preserve">
          <source>character to put back</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ceb89e43129e594e3d9a1ec930e02f4cb638232" translate="yes" xml:space="preserve">
          <source>character to put back or &lt;code&gt;Traits::eof()&lt;/code&gt; if only back out is requested</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e98df35faacf2bf236339d9eb00867b18114e183" translate="yes" xml:space="preserve">
          <source>character to put into input stream</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f783b69f4e4accac0463e6abd342f20275ebb66" translate="yes" xml:space="preserve">
          <source>character to return if the conversion was unsuccessful</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="493e2155b805726376d1e0d5047b41cc024177b6" translate="yes" xml:space="preserve">
          <source>character to search for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e7ba46dff910c2736818f904151384cd77f1045" translate="yes" xml:space="preserve">
          <source>character to use to represent &lt;code&gt;false&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd2da56cfad5c68b269eab197d350d67cdfdaf86" translate="yes" xml:space="preserve">
          <source>character to use to represent &lt;code&gt;true&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ceabf43c08eefb7adfa54d6f12b1d9caefd2797" translate="yes" xml:space="preserve">
          <source>character to write</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48236e5e509429b8fc8cd4a0ae77085dbfcc11bf" translate="yes" xml:space="preserve">
          <source>character type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7519b5613b1281aae74d62b0b2fced7957a5f4ec" translate="yes" xml:space="preserve">
          <source>character type used by the native encoding of the filesystem: &lt;code&gt;char&lt;/code&gt; on POSIX, &lt;code&gt;wchar_t&lt;/code&gt; on Windows</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78ad1141863770a5a5885b778e8c04409a2e963e" translate="yes" xml:space="preserve">
          <source>character types:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe2e34b723b61845339a58dd91623f34e50144d5" translate="yes" xml:space="preserve">
          <source>character value to append</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5e58dc91578de83c98a95fa43f17692221172e6" translate="yes" xml:space="preserve">
          <source>character value to assign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5a9ce8c9dc6e9289161906632d87866caf25787" translate="yes" xml:space="preserve">
          <source>character value to use for replacement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="424b990229dbadce52c562f56976650c087c14a9" translate="yes" xml:space="preserve">
          <source>character values to compare</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="710d0788358645993815df84c6ad4037cce46057" translate="yes" xml:space="preserve">
          <source>character-literal</source>
          <target state="translated">character-literal</target>
        </trans-unit>
        <trans-unit id="452dc3b224690305268c485b7c93e05f27889b61" translate="yes" xml:space="preserve">
          <source>character-literalud-suffix</source>
          <target state="translated">character-literalud-suffix</target>
        </trans-unit>
        <trans-unit id="20efd3a2b53bbecb951b9dacf597f0e6a16f8507" translate="yes" xml:space="preserve">
          <source>character.</source>
          <target state="translated">character.</target>
        </trans-unit>
        <trans-unit id="d87fbe89b909c8ce36a0b9450e4a1f6fd3a78bd9" translate="yes" xml:space="preserve">
          <source>character. C++ provides functions to create, inspect, and modify null-terminated strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa908a40ba515918f9d5edbdcad8ebc1fe5c2b42" translate="yes" xml:space="preserve">
          <source>characters</source>
          <target state="translated">characters</target>
        </trans-unit>
        <trans-unit id="efef9283dd72136f78db2ff7c5df2b2d7abe2484" translate="yes" xml:space="preserve">
          <source>characters (by default), if required, on the left when right-justified, or on the right if left-justified. In the case when &lt;code&gt;*&lt;/code&gt; is used, the width is specified by an additional argument of type &lt;code&gt;int&lt;/code&gt;. If the value of the argument is negative, it results with the &lt;code&gt;-&lt;/code&gt; flag specified and positive field width. (Note: This is the minimum width: The value is never truncated.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="259f0c7d443037352aacc805d8a84cf898d9d6a0" translate="yes" xml:space="preserve">
          <source>characters (the argument must be a pointer to an array with sufficient room). Unlike %s and %[, does not append the null character to the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffd2af53700d73f6fc0468763f9882963282571a" translate="yes" xml:space="preserve">
          <source>characters starting at &lt;code&gt;index&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd39488bf7a6b1824cf83585da2f39deddcc89de" translate="yes" xml:space="preserve">
          <source>characters).</source>
          <target state="translated">characters).</target>
        </trans-unit>
        <trans-unit id="9950758331aaa9e1d140072847c0983a8e45042f" translate="yes" xml:space="preserve">
          <source>characters. For integer numbers it is ignored if the precision is explicitly specified. For other conversions using this flag results in undefined behavior. It is ignored if &lt;code&gt;-&lt;/code&gt; flag is present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef0942b164cbcfcae9ed749182429a648f0388a8" translate="yes" xml:space="preserve">
          <source>charconv</source>
          <target state="translated">charconv</target>
        </trans-unit>
        <trans-unit id="184cf93689683e0108ee91c390654d3bbbab80fc" translate="yes" xml:space="preserve">
          <source>chars_format</source>
          <target state="translated">chars_format</target>
        </trans-unit>
        <trans-unit id="ce9d9c72cc5427f9c1f716439747fd992254f6e1" translate="yes" xml:space="preserve">
          <source>check if a regular expression occurs anywhere within a string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="979163dad7f0937255571a44a4bb006f1770eea1" translate="yes" xml:space="preserve">
          <source>checks for a file error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e87aa25c3a5c1310378f1655aafd3e689508a9fb" translate="yes" xml:space="preserve">
          <source>checks for the end-of-file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a3b1286195d0391ed1c98c847022b0840820a05" translate="yes" xml:space="preserve">
          <source>checks if &lt;code&gt;&lt;a href=&quot;path/root_path&quot;&gt;root_path()&lt;/a&gt;&lt;/code&gt; uniquely identifies file system location</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4659ea022d9e2b44a57a9542caa7e8435ccadb4a" translate="yes" xml:space="preserve">
          <source>checks if a character is a blank character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49b5b9d79a3e68fa1c3044f4e754cb08b400777e" translate="yes" xml:space="preserve">
          <source>checks if a character is a control character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ad3c5ea18b878fc21194c3cdf0fb7b2f4e4649f" translate="yes" xml:space="preserve">
          <source>checks if a character is a digit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd4b5f76be543699cd44726041d2ddaf3ff04eba" translate="yes" xml:space="preserve">
          <source>checks if a character is a graphical character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e3c4ad428d31184b04073af61c1a53d9090c645" translate="yes" xml:space="preserve">
          <source>checks if a character is a hexadecimal character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bda15f6eff744caf2a338b8537cfd9c217e6875" translate="yes" xml:space="preserve">
          <source>checks if a character is a printing character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="575c0bbffae8668ef01f71bb08ccae64a6ab3e11" translate="yes" xml:space="preserve">
          <source>checks if a character is a punctuation character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f1a758ed24f9855a3c70731a82344e3f2811b07" translate="yes" xml:space="preserve">
          <source>checks if a character is a space character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8b58653cb533309648aabce01073b715aa4ac78" translate="yes" xml:space="preserve">
          <source>checks if a character is alphabetic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c04bca1911a1ba3158ac5710aaf05d454a1dad0a" translate="yes" xml:space="preserve">
          <source>checks if a character is alphanumeric</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf07d67279ac21bf83df58eaf59b68e01e3bbd15" translate="yes" xml:space="preserve">
          <source>checks if a character is an uppercase character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74a1c368e6adc2a4b8e4fe3cdca3ebf42992c887" translate="yes" xml:space="preserve">
          <source>checks if a character is classfied as graphical by a locale</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49a11ddd0ed50867d02e1ed59f8edc368126bf83" translate="yes" xml:space="preserve">
          <source>checks if a character is classified as a blank character by a locale</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a50372500887c6969c567da6160fe4984cc6a69" translate="yes" xml:space="preserve">
          <source>checks if a character is classified as a control character by a locale</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="758967790951fb0da1ce5ceba17f4a6101518747" translate="yes" xml:space="preserve">
          <source>checks if a character is classified as a digit by a locale</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48d8675abe1c8226957b7cfc24891e2ace5e06be" translate="yes" xml:space="preserve">
          <source>checks if a character is classified as a hexadecimal digit by a locale</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15cf623a02d040763850113dc33d22a9abc8e914" translate="yes" xml:space="preserve">
          <source>checks if a character is classified as alphabetic by a locale</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de3f4889ae62d05f64397c1eb6a6ca0ba95ce61b" translate="yes" xml:space="preserve">
          <source>checks if a character is classified as alphanumeric by a locale</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b08da5a36a41418b478bee68109c881d781ec7a6" translate="yes" xml:space="preserve">
          <source>checks if a character is classified as lowercase by a locale</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e5f0e27f31218013e0b49b738e315aaa42f0a48" translate="yes" xml:space="preserve">
          <source>checks if a character is classified as printable by a locale</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f0fbf0d076d0906e76052f6a6a9c5b3bc45a0a0" translate="yes" xml:space="preserve">
          <source>checks if a character is classified as punctuation by a locale</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aba861da5ecf5b59897addfe8298eeebb2874e06" translate="yes" xml:space="preserve">
          <source>checks if a character is classified as uppercase by a locale</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c41c9d98f0b54c55ef2ccb338db95d8d69f26e9" translate="yes" xml:space="preserve">
          <source>checks if a character is classified as whitespace by a locale</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7d4b57e98da730a307d7f6d914843b61cef9606" translate="yes" xml:space="preserve">
          <source>checks if a character is lowercase</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c2a3c7203aee5011ebc0d62484264026008a345" translate="yes" xml:space="preserve">
          <source>checks if a locale implements a specific facet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ed681abc7fd9b89a35d8f5f5c53d341520d84cb" translate="yes" xml:space="preserve">
          <source>checks if a non-recoverable error has occurred</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f49099c458eae3d50ec882e6573ab6b68c969a08" translate="yes" xml:space="preserve">
          <source>checks if a number is an integral power of two</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5410cf759d76952b58c0a24db9637df46057084c" translate="yes" xml:space="preserve">
          <source>checks if a predicate is &lt;code&gt;true&lt;/code&gt; for all, any or none of the elements in a range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91d9cfb39a1a9f8d815bb0c1447108cc56da5378" translate="yes" xml:space="preserve">
          <source>checks if a type can be constructed from an rvalue reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cd7a0d02619f4b678bd0ca2c2159eb18ee9e997" translate="yes" xml:space="preserve">
          <source>checks if a type can be converted to the other type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="924dff1dc3e08d09398e156ebbad3d0351dd63a0" translate="yes" xml:space="preserve">
          <source>checks if a type can be invoked (as if by &lt;code&gt;&lt;a href=&quot;../utility/functional/invoke&quot;&gt;std::invoke&lt;/a&gt;&lt;/code&gt;) with the given argument types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82f8f91664ed79845c69845f8070c2ecfa74e6b8" translate="yes" xml:space="preserve">
          <source>checks if a type can be invoked (as if by &lt;code&gt;&lt;a href=&quot;utility/functional/invoke&quot;&gt;std::invoke&lt;/a&gt;&lt;/code&gt;) with the given argument types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e45f605f47245f4b0a7e9fbcd9355b6d509e056d" translate="yes" xml:space="preserve">
          <source>checks if a type can be invoked (as if by &lt;code&gt;std::invoke&lt;/code&gt;) with the given argument types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4db3462b03bea17ef56931c6fdc32ec225346f65" translate="yes" xml:space="preserve">
          <source>checks if a type has a assignment operator for a specific argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d11d5a8b25e6774409517a614165f101f068aaa" translate="yes" xml:space="preserve">
          <source>checks if a type has a constructor for specific arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fa0c24429c302b2fb601812be95c1d1ef28a41f" translate="yes" xml:space="preserve">
          <source>checks if a type has a copy assignment operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87c4e9dccc4d9823884a4a6072faeaad1d5a4caa" translate="yes" xml:space="preserve">
          <source>checks if a type has a copy constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="865ea58fe1dddc6939ca76d4850cb8d6dd6e6b15" translate="yes" xml:space="preserve">
          <source>checks if a type has a default constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2f69a842c4576ea1ea19a1ed3c89f586cbd29e4" translate="yes" xml:space="preserve">
          <source>checks if a type has a move assignment operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de0608c51083cadbdf587c88e2d04b402e493855" translate="yes" xml:space="preserve">
          <source>checks if a type has a non-deleted destructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="788d60cd3317a8ced631d9ffb2294926fc93ffbd" translate="yes" xml:space="preserve">
          <source>checks if a type has a virtual destructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c77cf70e01c50b80c24311b25584d14d533a36c9" translate="yes" xml:space="preserve">
          <source>checks if a type is &lt;code&gt;&lt;a href=&quot;../types/nullptr_t&quot;&gt;std::nullptr_t&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c55204b0e8935217f3f16277fa43d6e02941e45e" translate="yes" xml:space="preserve">
          <source>checks if a type is &lt;code&gt;&lt;a href=&quot;nullptr_t&quot;&gt;std::nullptr_t&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f572225d903a9bfdf9584a356c65abf42e9bb8c8" translate="yes" xml:space="preserve">
          <source>checks if a type is &lt;code&gt;&lt;a href=&quot;types/nullptr_t&quot;&gt;std::nullptr_t&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95067247386ea8964c868d8e2470aa64200dc364" translate="yes" xml:space="preserve">
          <source>checks if a type is &lt;code&gt;std::nullptr_t&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0aaba168e288ade3d5a384660ff019099728272" translate="yes" xml:space="preserve">
          <source>checks if a type is &lt;code&gt;void&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="537e76d298d78e83162b82af9dc4a2c43543feab" translate="yes" xml:space="preserve">
          <source>checks if a type is a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52b5bb6bdbb3a15fbddb037a28047ee30c30496f" translate="yes" xml:space="preserve">
          <source>checks if a type is a class (but not union) type and has no non-static data members</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73d76d781b923b4c7f721abd2868606e3c4ef7a0" translate="yes" xml:space="preserve">
          <source>checks if a type is a compound type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fa2a7b53972dc9ede3d59b16ac44044200008dd" translate="yes" xml:space="preserve">
          <source>checks if a type is a final class type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a30498cdc91b43b9cd9440154636f028cfff982a" translate="yes" xml:space="preserve">
          <source>checks if a type is a floating-point type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a9a744164bba88d0730d3a604e641cb7ee8c57c" translate="yes" xml:space="preserve">
          <source>checks if a type is a function type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1c646bbd2dfa3f415774a612f5b22cd2b8a5a08" translate="yes" xml:space="preserve">
          <source>checks if a type is a fundamental type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c01c19727fa4dfec4f696d1fdf26a37367a0fc9" translate="yes" xml:space="preserve">
          <source>checks if a type is a literal type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cff32e96fae67a0acccdd4255838533572f918c" translate="yes" xml:space="preserve">
          <source>checks if a type is a non-union class type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="164e5fdba097322816c7b7c1e172e82d9cbcc217" translate="yes" xml:space="preserve">
          <source>checks if a type is a plain-old data (POD) type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be1ea34f82ee70a8d8fddc3b3f67f41789d9cc52" translate="yes" xml:space="preserve">
          <source>checks if a type is a pointer to a non-static member function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ce050c717965ebd5e95ae6ba788d8592ea43d63" translate="yes" xml:space="preserve">
          <source>checks if a type is a pointer to a non-static member object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5af23ca95099af1b28c43d35d65879a67aa1258e" translate="yes" xml:space="preserve">
          <source>checks if a type is a pointer to an non-static member function or object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="933b1c4d5072f2c53cc81defc1f935be1f967aba" translate="yes" xml:space="preserve">
          <source>checks if a type is a pointer type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68be0d79db9b49e2d72565759b25648048303052" translate="yes" xml:space="preserve">
          <source>checks if a type is a polymorphic class type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46aca0cce05933c46cb7aae0106bb379fad48497" translate="yes" xml:space="preserve">
          <source>checks if a type is a scalar type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8ff12a02898c13af2c80e907cea2deaab835af4" translate="yes" xml:space="preserve">
          <source>checks if a type is a signed arithmetic type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13d454deb7552d6880694f3df4e1383191d306f5" translate="yes" xml:space="preserve">
          <source>checks if a type is a standard-layout type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fe28b83f749e41a86447ed4aa13a8649cf73911" translate="yes" xml:space="preserve">
          <source>checks if a type is an abstract class type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99e502e77d8d398811a876dc4abc35db27b1a3c1" translate="yes" xml:space="preserve">
          <source>checks if a type is an aggregate type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6c55a5206ce11dc8de73994b8ecc8a52e13333d" translate="yes" xml:space="preserve">
          <source>checks if a type is an arithmetic type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43aae0159c94d80a9c886f882de4a9fa850193b0" translate="yes" xml:space="preserve">
          <source>checks if a type is an array type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3cf16fa735d0275f48365a5f68cc62d23edf3ac" translate="yes" xml:space="preserve">
          <source>checks if a type is an array type of known bound</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70194fb67cf664c359a6061f9856000313f8d079" translate="yes" xml:space="preserve">
          <source>checks if a type is an array type of unknown bound</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2c16a5cb49182f7a2f4805538e3591d034ba55e" translate="yes" xml:space="preserve">
          <source>checks if a type is an enumeration type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eee1651cebd1c5d8f136b5ec49a9e75731ea5edd" translate="yes" xml:space="preserve">
          <source>checks if a type is an integral type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd0dd72036a24b64e74b836aaa4f66dd208941fa" translate="yes" xml:space="preserve">
          <source>checks if a type is an object type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdabc1faca980ecd87f73b08743c5c7d07b39b04" translate="yes" xml:space="preserve">
          <source>checks if a type is an union type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7efeb0acc73f5a5ab98a32419000d4a04bbbb889" translate="yes" xml:space="preserve">
          <source>checks if a type is an unsigned arithmetic type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="940ad33094791fa696cc214cf795ea1d165d7a5f" translate="yes" xml:space="preserve">
          <source>checks if a type is const-qualified</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ec7bf3795f8ff13107fbcbdcc3e6e9ac137ddfa" translate="yes" xml:space="preserve">
          <source>checks if a type is derived from the other type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a2ad3a8349910aa4fd7ea33c9ec9a654fec49a8" translate="yes" xml:space="preserve">
          <source>checks if a type is either a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca1918c5bffb9c56384487316fc5067705cbb845" translate="yes" xml:space="preserve">
          <source>checks if a type is trivial</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48e237b961a3062dddf54cf6cc189b2f7329c7f3" translate="yes" xml:space="preserve">
          <source>checks if a type is trivially copyable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05c71bc1b4fd80423c42802deb11b4108de47d81" translate="yes" xml:space="preserve">
          <source>checks if a type is volatile-qualified</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57cd6163488f25000a836024aded5bb6be45008c" translate="yes" xml:space="preserve">
          <source>checks if a valid target is contained</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59cbfcd7772c6d302f7395d8d43e6fec169a68a1" translate="yes" xml:space="preserve">
          <source>checks if a variant currently holds a given type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="429c75efc9fe6d6127f394024a7d90937f8a1d09" translate="yes" xml:space="preserve">
          <source>checks if a wide character is a blank character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bd71ab98a61a0f5eb6c96f40f5afc3349a3645d" translate="yes" xml:space="preserve">
          <source>checks if a wide character is a control character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a1eb76b47a9eea09b3a461b7f3726dc083d9c71" translate="yes" xml:space="preserve">
          <source>checks if a wide character is a digit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc2167ddc37d4c29fd9cacf7df1e51341e45d82e" translate="yes" xml:space="preserve">
          <source>checks if a wide character is a graphical character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de2a0021057cf94fbb0926725b1c97eb92af1ddb" translate="yes" xml:space="preserve">
          <source>checks if a wide character is a printing character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfe43ebb36434844376b512d9fadae32cf4402f5" translate="yes" xml:space="preserve">
          <source>checks if a wide character is a punctuation character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f68cce439fc0fef4ce64dd6dc1459f4fd4d2463" translate="yes" xml:space="preserve">
          <source>checks if a wide character is a space character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e77b6d61e3df8bd3d8c2ba78335b806a0eb849ae" translate="yes" xml:space="preserve">
          <source>checks if a wide character is alphabetic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c4453d136c94d672adf91afcebf2cdf59fbe1eb" translate="yes" xml:space="preserve">
          <source>checks if a wide character is alphanumeric</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34b97ecc0df4472e4bda8754c8b8d8215d29882e" translate="yes" xml:space="preserve">
          <source>checks if a wide character is an uppercase character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5be6951d5135c2e132e6963429bbe49c49749e15" translate="yes" xml:space="preserve">
          <source>checks if a wide character is lowercase</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc97a5ff168accb42f6eaec257bc45685db799c9" translate="yes" xml:space="preserve">
          <source>checks if all, any or none of the bits are set to &lt;code&gt;true&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05ba812395fa540b96003e4eef8183d76912edf6" translate="yes" xml:space="preserve">
          <source>checks if an error has occurred</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8e47dfeebafe60463c2aca1b941aa3191c692a9" translate="yes" xml:space="preserve">
          <source>checks if an error has occurred (synonym of &lt;code&gt;&lt;a href=&quot;../io/basic_ios/fail&quot;&gt;fail()&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bef798373fd94e0e103e638243fa1488a5c1539" translate="yes" xml:space="preserve">
          <source>checks if an error has occurred (synonym of &lt;code&gt;&lt;a href=&quot;basic_ios/fail&quot;&gt;fail()&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7309239b4e26563b30c460452e7a8515a0ac7a3" translate="yes" xml:space="preserve">
          <source>checks if end-of-file has been reached</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ca91bbb3c91c0500e6f8c07088f9232e9e6d583" translate="yes" xml:space="preserve">
          <source>checks if every bit in the type's object representation contributes to its value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22ce39f6593bb0b680127af5a28979e43b309623" translate="yes" xml:space="preserve">
          <source>checks if exception handling is currently in progress</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61a244b57eb597150225cc3eeaa408ca89cb7e3d" translate="yes" xml:space="preserve">
          <source>checks if no error has occurred (synonym of &lt;code&gt;!fail()&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3e32e91cdd53fe156a2d811ae9a180288845271" translate="yes" xml:space="preserve">
          <source>checks if no error has occurred i.e. I/O operations are available</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81a230cbb914fa04701d745ff409e4426aa3288e" translate="yes" xml:space="preserve">
          <source>checks if object holds a value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c470419fd6286f745456dda2d8b238e0c5c3b26d" translate="yes" xml:space="preserve">
          <source>checks if objects of a type can be swapped with objects of same or different type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab8906a0a50539dd21eb866aa9a486001faa4d7f" translate="yes" xml:space="preserve">
          <source>checks if the &lt;code&gt;atomic_ref&lt;/code&gt; object is lock-free</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="797e71d9511f52b7798b74c4878c87e6d8a1e445" translate="yes" xml:space="preserve">
          <source>checks if the &lt;code&gt;month_day&lt;/code&gt; is valid</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="160326a733ca3daed0972c0486cbc57030acf2bb" translate="yes" xml:space="preserve">
          <source>checks if the &lt;code&gt;year_month_day&lt;/code&gt; represents a valid date</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b2320d7ab9e1a4f8b62ed7cc1329fd82f00383c" translate="yes" xml:space="preserve">
          <source>checks if the arguments are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be7320a35e410c879a4b073f73ddbde252cb44cb" translate="yes" xml:space="preserve">
          <source>checks if the arguments are equal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04fe3444fff1b1040ff386912076ac18920a52df" translate="yes" xml:space="preserve">
          <source>checks if the arguments are not equal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a9b20a330f2c6bbfe241e05aec47e15d4b89114" translate="yes" xml:space="preserve">
          <source>checks if the associated file is open</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcf475524a7a53439e75727e7591c3c8c2ec746f" translate="yes" xml:space="preserve">
          <source>checks if the atomic object is lock-free</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="845d5c2effe57cca6b24f511e47ea5e2d0c0104e" translate="yes" xml:space="preserve">
          <source>checks if the atomic type's operations are lock-free</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7e1f0a5c9a2154e35cbb20bcb44fc22fbb93afa" translate="yes" xml:space="preserve">
          <source>checks if the container contains element with specific key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1243478265e6026ef270193b8a119a121b7eee8" translate="yes" xml:space="preserve">
          <source>checks if the corresponding path element is not empty</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0f32c6ebdb8f9b7f22d675758cfef96e21fbe8a" translate="yes" xml:space="preserve">
          <source>checks if the first argument is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e040d52a1dd997675286618825bc8744ba23b076" translate="yes" xml:space="preserve">
          <source>checks if the first argument is greater than or equal to the second</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d8ae72443c4ec84c05d69273c24ba7ca0bf74fe" translate="yes" xml:space="preserve">
          <source>checks if the first argument is greater than the second</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7b8f591b88b106affc52c798436dbd937b7ec9d" translate="yes" xml:space="preserve">
          <source>checks if the first argument is less than or equal to the second</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6bd5f74ee011f171129a89918d68f523e8f6285" translate="yes" xml:space="preserve">
          <source>checks if the first argument is less than the second</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03ec5bfb59295041844b0f3dad79291901d69181" translate="yes" xml:space="preserve">
          <source>checks if the first floating-point argument is greater or equal than the second</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc8e0b4812edd9e3105b1eb054266e499830052b" translate="yes" xml:space="preserve">
          <source>checks if the first floating-point argument is greater than the second</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1fd43773bd60e28c5b80faf5de6df6960982686" translate="yes" xml:space="preserve">
          <source>checks if the first floating-point argument is less or equal than the second</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f78b3e1d8d7d150eb0e94d72530ef3ff36420f6" translate="yes" xml:space="preserve">
          <source>checks if the first floating-point argument is less or greater than the second</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7560fcc00c10e2268e9709ed45e2684d22e5bc3c" translate="yes" xml:space="preserve">
          <source>checks if the first floating-point argument is less than the second</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07a8129cb83c0dee02330e9ecc9af4bb7dc7878d" translate="yes" xml:space="preserve">
          <source>checks if the future has a shared state</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="070833320fc3a699e25b131ccfc3718155d1f8a9" translate="yes" xml:space="preserve">
          <source>checks if the given number has finite value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b66f94571e17d9c01811d8d69dd5257b21d69baa" translate="yes" xml:space="preserve">
          <source>checks if the given number is NaN</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9640a55bd0add4363c913845a3fb375a62e68336" translate="yes" xml:space="preserve">
          <source>checks if the given number is infinite</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="307fb43ce128682ff1a6b1671fa769fb25222b71" translate="yes" xml:space="preserve">
          <source>checks if the given number is negative</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14ac1aeb15b8d1e6e7061415473f54bd42f9b50b" translate="yes" xml:space="preserve">
          <source>checks if the given number is normal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10c91440b20e1dfd5711faf36cec3e85d6ab07fa" translate="yes" xml:space="preserve">
          <source>checks if the given range is a max heap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ea8259a0de5baac4ff98071e71e57db9795e0b4" translate="yes" xml:space="preserve">
          <source>checks if the mbstate_t object represents initial shift state</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10a810595f8be4c6163187fab5cb95d9ea1cfc70" translate="yes" xml:space="preserve">
          <source>checks if the path is empty</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40e9b478b6f4e06f42c06f4935fedb0d30303454" translate="yes" xml:space="preserve">
          <source>checks if the preparation of the stream object was successful</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f0e55e0423c4e09b755fa16104a5c4c69972265" translate="yes" xml:space="preserve">
          <source>checks if the results are available</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26b5185eb6f07714e969480f4a74515b2e52e486" translate="yes" xml:space="preserve">
          <source>checks if the sequence is empty</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e144297d0acc94ad875a3c7f5d53b9b74a60edd2" translate="yes" xml:space="preserve">
          <source>checks if the specified type supports uses-allocator construction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22c24f5d3b6784ca18c487097a920380667d05b9" translate="yes" xml:space="preserve">
          <source>checks if the stored &lt;a href=&quot;month&quot;&gt;&lt;code&gt;month&lt;/code&gt;&lt;/a&gt; is valid</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1dfebcea2b6d38f4f981d410108731499a81101" translate="yes" xml:space="preserve">
          <source>checks if the stored &lt;a href=&quot;weekday&quot;&gt;&lt;code&gt;weekday&lt;/code&gt;&lt;/a&gt; is valid</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9d961b88b35dbbe15aca55ded842a779b0bf668" translate="yes" xml:space="preserve">
          <source>checks if the stored day value is in the normal range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="871365176b664d6cdfdb40d6589af381bac75cd7" translate="yes" xml:space="preserve">
          <source>checks if the stored month value is in the normal range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1f82ae1815c4f20222a5f8efd91e84259b55fce" translate="yes" xml:space="preserve">
          <source>checks if the stored pointer is not null</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4000908a3484bab8f12a679b112a4540a3513b81" translate="yes" xml:space="preserve">
          <source>checks if the stored weekday value is valid</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e15d6ed274d2d1bf6fffdac8b1b9240876fbf2a" translate="yes" xml:space="preserve">
          <source>checks if the stored year value is valid</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04956e3ec62b3b4ba1cdb4db8865b88739323cc3" translate="yes" xml:space="preserve">
          <source>checks if the stream has an associated file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c62cb0ecc5fed0614a86fcc0ad477e59ea41516f" translate="yes" xml:space="preserve">
          <source>checks if the string ends with the given suffix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87144d89e9851dbf53eb2f4ac80911ebfc147fc7" translate="yes" xml:space="preserve">
          <source>checks if the string starts with the given prefix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ff5a5818ed759b6fc36636bcd82b29904dc0ec9" translate="yes" xml:space="preserve">
          <source>checks if the string view ends with the given suffix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6273de5b6a8676d184a6765f71f448fb7ce7536" translate="yes" xml:space="preserve">
          <source>checks if the string view starts with the given prefix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7cb46e54446ffda53d5ee148d39199c76306969" translate="yes" xml:space="preserve">
          <source>checks if the task object has a valid function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5d2deb828adcbb2c11e7bff2cbb55b3187088d7" translate="yes" xml:space="preserve">
          <source>checks if the value is non-zero</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b998214c8502ee80c9035f854e0e7060b3279f77" translate="yes" xml:space="preserve">
          <source>checks if the variant is in the invalid state</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="829d0f9fdf50c1cac5593e0410f7b1e7b1442151" translate="yes" xml:space="preserve">
          <source>checks if the weekday and index are both valid</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="292f50c8f90097f029fae31c2953ed819de2f59f" translate="yes" xml:space="preserve">
          <source>checks if there is an associated managed object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5abddd7520c2444c252a641a65cdc06f3478ebc0" translate="yes" xml:space="preserve">
          <source>checks if this &lt;code&gt;year_month&lt;/code&gt; is valid</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1823af40b7bc137194a2bc0acd801614c41e4963" translate="yes" xml:space="preserve">
          <source>checks if two floating-point values are unordered</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e6e7017ca00045b854c8eb8ed86b3a9888a61ed" translate="yes" xml:space="preserve">
          <source>checks if two types are the same</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cef90b154407dbe028efef845b84b3d84a5341ac" translate="yes" xml:space="preserve">
          <source>checks whether a character is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b462d2c45570dad13c96b379529e5e31f916fbe" translate="yes" xml:space="preserve">
          <source>checks whether a range is empty</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f04393dbaad769f1e9e469c7570a0c443211dbaf" translate="yes" xml:space="preserve">
          <source>checks whether a range is sorted into ascending order</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bea58967460ac26371b5b7481358602aa4c9908" translate="yes" xml:space="preserve">
          <source>checks whether directory entry refers to existing file system object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4045afa2d02a8a125c19bb32adb8ea3ea06becfd" translate="yes" xml:space="preserve">
          <source>checks whether file status is known</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abd7ad27690f94aaf7887a0e92d10e4f2eefe710" translate="yes" xml:space="preserve">
          <source>checks whether path refers to existing file system object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75de520089ad8b0b76db8c1dd7f1c3ca24b46a78" translate="yes" xml:space="preserve">
          <source>checks whether the argument refers to a named IPC socket</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c66cd9b9ead20ce995b00d3a7a2a099550391e78" translate="yes" xml:space="preserve">
          <source>checks whether the argument refers to a regular file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1affb992ce445e557e0ff556ed591568c6d4bc3" translate="yes" xml:space="preserve">
          <source>checks whether the argument refers to a symbolic link</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91b07b10cd2cb20c89ead959ec8fe1e566688d0e" translate="yes" xml:space="preserve">
          <source>checks whether the argument refers to an</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49775421caf5b1985901321f738deaf62c87d045" translate="yes" xml:space="preserve">
          <source>checks whether the contained &lt;a href=&quot;month&quot;&gt;&lt;code&gt;month&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;weekday_indexed&quot;&gt;&lt;code&gt;weekday_indexed&lt;/code&gt;&lt;/a&gt; are valid</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb557cb66b025f671790e821a02ceebf0811d233" translate="yes" xml:space="preserve">
          <source>checks whether the contained &lt;a href=&quot;month&quot;&gt;&lt;code&gt;month&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;weekday_last&quot;&gt;&lt;code&gt;weekday_last&lt;/code&gt;&lt;/a&gt; are valid</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ec550d7c1b60100c35d8de375c41269ed82054c" translate="yes" xml:space="preserve">
          <source>checks whether the container is empty</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce556d9d9eb04dee09ab8de88e6102b1d6f17737" translate="yes" xml:space="preserve">
          <source>checks whether the directory entry refers to a character device</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3264ab46ee86aeb782ebdbd348e5f65bdc39037" translate="yes" xml:space="preserve">
          <source>checks whether the directory entry refers to a directory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f64be8610b526042c106fdbfcc80645d80fc8839" translate="yes" xml:space="preserve">
          <source>checks whether the directory entry refers to a named IPC socket</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a1eb39ad4040bba41fc4b75aba9aa6f52cc8b51" translate="yes" xml:space="preserve">
          <source>checks whether the directory entry refers to a named pipe</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14cbd4c73b12adb69e9756be9d81019e4ec85d0f" translate="yes" xml:space="preserve">
          <source>checks whether the directory entry refers to a regular file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1a37ba24d437de4bb6eb47b5f075b5cbc2e2b57" translate="yes" xml:space="preserve">
          <source>checks whether the directory entry refers to a symbolic link</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e76997006fca81d611e60d0abd14a69fe5fd4d85" translate="yes" xml:space="preserve">
          <source>checks whether the directory entry refers to an</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38858cb3676bcc0d4db7d1a58dbe3fe40cd9a2a0" translate="yes" xml:space="preserve">
          <source>checks whether the directory entry refers to block device</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f6287ad2e53ef003162c65889ae998127f7c63a" translate="yes" xml:space="preserve">
          <source>checks whether the first argument is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce1fd2d8877b131a3c20ecf82fd4ae0f987c1c5f" translate="yes" xml:space="preserve">
          <source>checks whether the given path refers to a character device</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c431286f308e4348f63ebeddbf8549c0866652f3" translate="yes" xml:space="preserve">
          <source>checks whether the given path refers to a directory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dee94db339cf07be37181d414f4c2541178ae7c9" translate="yes" xml:space="preserve">
          <source>checks whether the given path refers to a named pipe</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acf82ad2aa086439c621f8a4c828b9fde17d7bed" translate="yes" xml:space="preserve">
          <source>checks whether the given path refers to an empty file or directory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="055dafd9f9c6dc9907d54b86c6fb03c4ba5dd863" translate="yes" xml:space="preserve">
          <source>checks whether the given path refers to block device</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6d0325c61fe72bd6f48641196d5653f941ed4fd" translate="yes" xml:space="preserve">
          <source>checks whether the managed object is managed only by the current &lt;code&gt;shared_ptr&lt;/code&gt; instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f42b9017995845a4cfe19d206e775765b32758c7" translate="yes" xml:space="preserve">
          <source>checks whether the match was successful</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcd99139fa78f1d39e375e6c4a1bd6d502a97750" translate="yes" xml:space="preserve">
          <source>checks whether the node handle is empty</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d493b470a75e83f8b3c5051d4ddb329bf16f1fbb" translate="yes" xml:space="preserve">
          <source>checks whether the object contains a value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e99e60af765575ae65ab8baa4f877c1dfdb02374" translate="yes" xml:space="preserve">
          <source>checks whether the objects refer to the same type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04bf444e8370f7e5ea8480709ffb5e1c2809b8ee" translate="yes" xml:space="preserve">
          <source>checks whether the recursion is disabled for the current directory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfd0d7fae79a0eecc983f3b991966a6762bbb527" translate="yes" xml:space="preserve">
          <source>checks whether the referenced object was already deleted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac7a4961298a1ed7669bbf940e5e498a212da7c7" translate="yes" xml:space="preserve">
          <source>checks whether the referred type precedes referred type of another &lt;code&gt;type_index&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce60238730fd96e4bf02210ff6783be56b6a9eb3" translate="yes" xml:space="preserve">
          <source>checks whether the string is empty</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08746e567285c00d4f2d4cf777bb580ed608bbc6" translate="yes" xml:space="preserve">
          <source>checks whether the thread is joinable, i.e. potentially running in parallel context</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b01311fb98f0d59df7ae6e9f25645896cff1355" translate="yes" xml:space="preserve">
          <source>checks whether the underlying container is empty</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d286fa2e62a129511bcd92624a0daacd965bbd53" translate="yes" xml:space="preserve">
          <source>checks whether the view is empty</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4f8abc37f4105b13a738213f75868e9e1952ec9" translate="yes" xml:space="preserve">
          <source>checks whether this object represents a valid date</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2d75b27917bf0fd9e8fe517cf9957d03fc34d5a" translate="yes" xml:space="preserve">
          <source>checks whether two paths refer to the same file system object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e5dbd81544cb2b59bc475373559c56cf09a75f4" translate="yes" xml:space="preserve">
          <source>chi_squared_distribution</source>
          <target state="translated">chi_squared_distribution</target>
        </trans-unit>
        <trans-unit id="9477fdc83bfd8feb0a2eb0d8ba9a407ab4e6f77b" translate="yes" xml:space="preserve">
          <source>choose</source>
          <target state="translated">choose</target>
        </trans-unit>
        <trans-unit id="7a8fa4cf36821f5d494abfb3c2c2f9cab7f0e2a2" translate="yes" xml:space="preserve">
          <source>chooses one type or another based on compile-time boolean</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fbe4a465f758f9d6d1ea54042160414ba713bbf" translate="yes" xml:space="preserve">
          <source>chrono</source>
          <target state="translated">chrono</target>
        </trans-unit>
        <trans-unit id="7e078c9876ccabef154017c770e05195c85b5e4d" translate="yes" xml:space="preserve">
          <source>chunks</source>
          <target state="translated">chunks</target>
        </trans-unit>
        <trans-unit id="53c14ca5a370cdad35374dd27d87f958371588c0" translate="yes" xml:space="preserve">
          <source>cinttypes</source>
          <target state="translated">cinttypes</target>
        </trans-unit>
        <trans-unit id="84333d8cb97e9dd23bf15999ec5ed6904bda76c9" translate="yes" xml:space="preserve">
          <source>cinwcin</source>
          <target state="translated">cinwcin</target>
        </trans-unit>
        <trans-unit id="64d4c38398370dffa78769b1c5124bd43a0b80e0" translate="yes" xml:space="preserve">
          <source>circular shift of the elements of the valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="159d1f234c2366b6b30fa86b107aeffa940c8e6b" translate="yes" xml:space="preserve">
          <source>cis(y), or, ex</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bff255fb105707090e5ab8b2f1a56e5ecfbca58e" translate="yes" xml:space="preserve">
          <source>ciso646</source>
          <target state="translated">ciso646</target>
        </trans-unit>
        <trans-unit id="a4ab4f21160cf5b0a8b70fd62605f209cd8eb378" translate="yes" xml:space="preserve">
          <source>clamp</source>
          <target state="translated">clamp</target>
        </trans-unit>
        <trans-unit id="7494f1872bc8cad5ee6a8ee767733428b1702b61" translate="yes" xml:space="preserve">
          <source>clamps a value between a pair of boundary values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19a5243fb8b8aa14a6492919ff30474302d97300" translate="yes" xml:space="preserve">
          <source>clarified that it's linear in the number of elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d767bf5b72373d12f0efd4406677e9ed076f592" translate="yes" xml:space="preserve">
          <source>class</source>
          <target state="translated">class</target>
        </trans-unit>
        <trans-unit id="aa378e90c99b42958068a3dd3d7fa244a577a8e5" translate="yes" xml:space="preserve">
          <source>class member (including static and non-static functions, types, templates, etc)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20262cc4b1e96381dbff8b598d541e2c4069d32e" translate="yes" xml:space="preserve">
          <source>class member access expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="295f637bf0726f41fd8feb1e135436ba1f7397d9" translate="yes" xml:space="preserve">
          <source>class specifier</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="227f477d049532f3187fd191fb7a5f9e0cbe1c1c" translate="yes" xml:space="preserve">
          <source>class template</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0bf2698b0025c631bb7643d134622c9da9c41f7" translate="yes" xml:space="preserve">
          <source>class type (typically, &lt;code&gt;struct&lt;/code&gt; or &lt;code&gt;union&lt;/code&gt;), that has</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e56fa0859779ed36a2a5353b8cfc1755647ce1e" translate="yes" xml:space="preserve">
          <source>class type that has been declared (e.g. by &lt;a href=&quot;class#Forward_declaration&quot;&gt;forward declaration&lt;/a&gt;) but not defined;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aaf1dc6bc94a6b1ce526055602ee27130597a28" translate="yes" xml:space="preserve">
          <source>class was regarded as complete in the default member initializers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f70464872ad09db6d30b302ef12506b017abc9f8" translate="yes" xml:space="preserve">
          <source>class with a member defined in an indirect base wasn't technically standard-layout</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
