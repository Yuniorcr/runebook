<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="">
    <body>
      <group id="">
        <trans-unit id="a5e194d9e8fbeafa8407c9815ab55a588b496009" translate="yes" xml:space="preserve">
          <source>std::vector::data</source>
          <target state="translated">std::vector::data</target>
        </trans-unit>
        <trans-unit id="af6a179a9927cb00a823380ba6a8bdcff562e7d0" translate="yes" xml:space="preserve">
          <source>std::vector::emplace</source>
          <target state="translated">std::vector::emplace</target>
        </trans-unit>
        <trans-unit id="5ec7ba640b0ee4bbb0e28c20bf4c48d41e50b89f" translate="yes" xml:space="preserve">
          <source>std::vector::emplace_back</source>
          <target state="translated">std::vector::emplace_back</target>
        </trans-unit>
        <trans-unit id="b4fc7fa6a09253db6816e42ecb3fa7fb2092274a" translate="yes" xml:space="preserve">
          <source>std::vector::empty</source>
          <target state="translated">std::vector::empty</target>
        </trans-unit>
        <trans-unit id="5ba0a8af5bbe4469d13e8671990f4eb82768d53a" translate="yes" xml:space="preserve">
          <source>std::vector::end</source>
          <target state="translated">std::vector::end</target>
        </trans-unit>
        <trans-unit id="9e394e168116d605d02f47919a861f469154c8ec" translate="yes" xml:space="preserve">
          <source>std::vector::erase</source>
          <target state="translated">std::vector::erase</target>
        </trans-unit>
        <trans-unit id="41b0e1c5db3a5bb5bdb09141ea7f29fda7c3fa57" translate="yes" xml:space="preserve">
          <source>std::vector::flip</source>
          <target state="translated">std::vector::flip</target>
        </trans-unit>
        <trans-unit id="eed861422eb61c62e7b8581b62bd5c8034a40a24" translate="yes" xml:space="preserve">
          <source>std::vector::front</source>
          <target state="translated">std::vector::front</target>
        </trans-unit>
        <trans-unit id="71aed48fadb615bcf5dc929814c416d7bc80d883" translate="yes" xml:space="preserve">
          <source>std::vector::get_allocator</source>
          <target state="translated">std::vector::get_allocator</target>
        </trans-unit>
        <trans-unit id="79cc6dec3c5805826336aeab2219555227277e84" translate="yes" xml:space="preserve">
          <source>std::vector::insert</source>
          <target state="translated">std::vector::insert</target>
        </trans-unit>
        <trans-unit id="6e85e2d53b59d991ebb7996ba76db6d293105f30" translate="yes" xml:space="preserve">
          <source>std::vector::max_size</source>
          <target state="translated">std::vector::max_size</target>
        </trans-unit>
        <trans-unit id="f738b24a32e95d8a3797f2a58ba099acf9f9483d" translate="yes" xml:space="preserve">
          <source>std::vector::operator=</source>
          <target state="translated">std::vector::operator=</target>
        </trans-unit>
        <trans-unit id="bcd7824108d5f422cc2de2247000a35586c7244f" translate="yes" xml:space="preserve">
          <source>std::vector::operator[]</source>
          <target state="translated">std::vector::operator[]</target>
        </trans-unit>
        <trans-unit id="4f4524bd683677a0dae8a8a3ae0fe4f7da9a6d82" translate="yes" xml:space="preserve">
          <source>std::vector::pop_back</source>
          <target state="translated">std::vector::pop_back</target>
        </trans-unit>
        <trans-unit id="45030051bbd7cae45701819f2212fd73366c0d8a" translate="yes" xml:space="preserve">
          <source>std::vector::push_back</source>
          <target state="translated">std::vector::push_back</target>
        </trans-unit>
        <trans-unit id="2c88a084d0f81caa2a24b9e7ae081aa8bbcdf775" translate="yes" xml:space="preserve">
          <source>std::vector::rbegin</source>
          <target state="translated">std::vector::rbegin</target>
        </trans-unit>
        <trans-unit id="b3250ca37ce454ef62208c73063a3d44886c8935" translate="yes" xml:space="preserve">
          <source>std::vector::reference</source>
          <target state="translated">std::vector::reference</target>
        </trans-unit>
        <trans-unit id="db34bf5dce962f8923c8fc9863de0d325ea3f7a1" translate="yes" xml:space="preserve">
          <source>std::vector::rend</source>
          <target state="translated">std::vector::rend</target>
        </trans-unit>
        <trans-unit id="6be7a7796e571ec22eae3f9a8c9ce9ed0986f394" translate="yes" xml:space="preserve">
          <source>std::vector::reserve</source>
          <target state="translated">std::vector::reserve</target>
        </trans-unit>
        <trans-unit id="7377e588eda31f0d98f62bac9c183a16863f35f8" translate="yes" xml:space="preserve">
          <source>std::vector::resize</source>
          <target state="translated">std::vector::resize</target>
        </trans-unit>
        <trans-unit id="d1b244e72334f911ff23a49a71c6faff8d495fd2" translate="yes" xml:space="preserve">
          <source>std::vector::shrink_to_fit</source>
          <target state="translated">std::vector::shrink_to_fit</target>
        </trans-unit>
        <trans-unit id="4928c6aa4d0492adc6e48cd9ebda81fd244bfd5b" translate="yes" xml:space="preserve">
          <source>std::vector::size</source>
          <target state="translated">std::vector::size</target>
        </trans-unit>
        <trans-unit id="118897d7b1ad4b1ae9671e4912bda7744210cf31" translate="yes" xml:space="preserve">
          <source>std::vector::swap</source>
          <target state="translated">std::vector::swap</target>
        </trans-unit>
        <trans-unit id="bcb05555aefc1bceb9b4a11816d9afe17900d1b5" translate="yes" xml:space="preserve">
          <source>std::vector::vector</source>
          <target state="translated">std::vector::vector</target>
        </trans-unit>
        <trans-unit id="61b10ba76aba9fe9020c732fdd8ef325e4c0a58c" translate="yes" xml:space="preserve">
          <source>std::vector::~vector</source>
          <target state="translated">std::vector::~vector</target>
        </trans-unit>
        <trans-unit id="684dd96761ff53922f94ec415e5a1546ba3b6e25" translate="yes" xml:space="preserve">
          <source>std::visit</source>
          <target state="translated">std::visit</target>
        </trans-unit>
        <trans-unit id="c27f799a38dc78ab1225cf1a2acf1189b3746c1d" translate="yes" xml:space="preserve">
          <source>std::void_t</source>
          <target state="translated">std::void_t</target>
        </trans-unit>
        <trans-unit id="73a6af1d0dd6faf5dcf6f1866ac0c41a93de00f6" translate="yes" xml:space="preserve">
          <source>std::vprintf, std::vfprintf, std::vsprintf, std::vsnprintf</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1de7131c201f8bf2c2192c1562d306ba70200fb4" translate="yes" xml:space="preserve">
          <source>std::vscanf, std::vfscanf, std::vsscanf</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fb2284cc080059c3b6b48345d961711eaced4be" translate="yes" xml:space="preserve">
          <source>std::vsprintf</source>
          <target state="translated">std::vsprintf</target>
        </trans-unit>
        <trans-unit id="38100bc671015eda807b0f5e996b5e1b39270ae0" translate="yes" xml:space="preserve">
          <source>std::vsscanf</source>
          <target state="translated">std::vsscanf</target>
        </trans-unit>
        <trans-unit id="9dcfec1720b3cc90f6dd2df8be7ff7a930a20837" translate="yes" xml:space="preserve">
          <source>std::vwprintf</source>
          <target state="translated">std::vwprintf</target>
        </trans-unit>
        <trans-unit id="6e2a997a21099951067778d953da37acbe73a8e9" translate="yes" xml:space="preserve">
          <source>std::vwprintf, std::vfwprintf, std::vswprintf</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3704eff5b2bdcac31bb13ec91ff982832dfdf6ea" translate="yes" xml:space="preserve">
          <source>std::vwscanf</source>
          <target state="translated">std::vwscanf</target>
        </trans-unit>
        <trans-unit id="0f9cd7e869439b8b7216a82e706895212e877722" translate="yes" xml:space="preserve">
          <source>std::vwscanf, std::vfwscanf, std::vswscanf</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b0015f3b72b21f67d1dc5d5b9e9707994213a26" translate="yes" xml:space="preserve">
          <source>std::wbuffer_convert</source>
          <target state="translated">std::wbuffer_convert</target>
        </trans-unit>
        <trans-unit id="78f13784f3d69c498a17b33534cda038cfb2d4a2" translate="yes" xml:space="preserve">
          <source>std::wbuffer_convert&amp;lt;Codecvt,Elem,Tr&amp;gt;::rdbuf</source>
          <target state="translated">std::wbuffer_convert&amp;lt;Codecvt,Elem,Tr&amp;gt;::rdbuf</target>
        </trans-unit>
        <trans-unit id="f05927ade70f562e745b6d1965dcdb0c8a3e88b6" translate="yes" xml:space="preserve">
          <source>std::wbuffer_convert&amp;lt;Codecvt,Elem,Tr&amp;gt;::state</source>
          <target state="translated">std::wbuffer_convert&amp;lt;Codecvt,Elem,Tr&amp;gt;::state</target>
        </trans-unit>
        <trans-unit id="24bcb5ce17b295f86e9ba226a95a8b9f4016746d" translate="yes" xml:space="preserve">
          <source>std::wbuffer_convert&amp;lt;Codecvt,Elem,Tr&amp;gt;::wbuffer_convert</source>
          <target state="translated">std::wbuffer_convert&amp;lt;Codecvt,Elem,Tr&amp;gt;::wbuffer_convert</target>
        </trans-unit>
        <trans-unit id="5e34e5a7a14c7de16ee75e878612dda8a828b9e1" translate="yes" xml:space="preserve">
          <source>std::wbuffer_convert&amp;lt;Codecvt,Elem,Tr&amp;gt;::~wbuffer_convert</source>
          <target state="translated">std::wbuffer_convert&amp;lt;Codecvt,Elem,Tr&amp;gt;::~wbuffer_convert</target>
        </trans-unit>
        <trans-unit id="0b17eb08771078c44f61b0a0fc886cbb57e1ad6c" translate="yes" xml:space="preserve">
          <source>std::wbuffer_convert::rdbuf</source>
          <target state="translated">std::wbuffer_convert::rdbuf</target>
        </trans-unit>
        <trans-unit id="6d0ee09f48b99689bd485a5de3a6c4654136d153" translate="yes" xml:space="preserve">
          <source>std::wbuffer_convert::state</source>
          <target state="translated">std::wbuffer_convert::state</target>
        </trans-unit>
        <trans-unit id="28632c07fc1da8dbe39c81638fa112d4ff5b7481" translate="yes" xml:space="preserve">
          <source>std::wbuffer_convert::wbuffer_convert</source>
          <target state="translated">std::wbuffer_convert::wbuffer_convert</target>
        </trans-unit>
        <trans-unit id="c99f040b42c6f0556afc56786c01c83d10d3ba55" translate="yes" xml:space="preserve">
          <source>std::wbuffer_convert::~wbuffer_convert</source>
          <target state="translated">std::wbuffer_convert::~wbuffer_convert</target>
        </trans-unit>
        <trans-unit id="17a7fb69b78c8b1685277b14420992c3cb6ebd31" translate="yes" xml:space="preserve">
          <source>std::wcerr</source>
          <target state="translated">std::wcerr</target>
        </trans-unit>
        <trans-unit id="76df5c5fb3bd45aefc1e12d5004eee4b41ee39f1" translate="yes" xml:space="preserve">
          <source>std::wcin</source>
          <target state="translated">std::wcin</target>
        </trans-unit>
        <trans-unit id="ce2943f95a5cce9cf418e7101b1d60dd0a5258f3" translate="yes" xml:space="preserve">
          <source>std::wclog</source>
          <target state="translated">std::wclog</target>
        </trans-unit>
        <trans-unit id="8b1817e71e19c16a7eac43de7451044f00c8a6d5" translate="yes" xml:space="preserve">
          <source>std::wcout</source>
          <target state="translated">std::wcout</target>
        </trans-unit>
        <trans-unit id="6c3bd3c46675cf0ef9c6e87a02e2d501061c42e1" translate="yes" xml:space="preserve">
          <source>std::wcrtomb</source>
          <target state="translated">std::wcrtomb</target>
        </trans-unit>
        <trans-unit id="d909cb3379c0401671c2cc927654f22e6b72890b" translate="yes" xml:space="preserve">
          <source>std::wcscat</source>
          <target state="translated">std::wcscat</target>
        </trans-unit>
        <trans-unit id="36153ce3ad21b4bbe9bce2b87022c9c60554688f" translate="yes" xml:space="preserve">
          <source>std::wcschr</source>
          <target state="translated">std::wcschr</target>
        </trans-unit>
        <trans-unit id="90ab84a1ba185918bd416dd732f12efa787b8160" translate="yes" xml:space="preserve">
          <source>std::wcscmp</source>
          <target state="translated">std::wcscmp</target>
        </trans-unit>
        <trans-unit id="2c0a70e12cc9843a7384e2ef01040178646d3c10" translate="yes" xml:space="preserve">
          <source>std::wcscoll</source>
          <target state="translated">std::wcscoll</target>
        </trans-unit>
        <trans-unit id="4b17855506e842cd9fd8386b6c36690cdf7b9e22" translate="yes" xml:space="preserve">
          <source>std::wcscpy</source>
          <target state="translated">std::wcscpy</target>
        </trans-unit>
        <trans-unit id="7036ae1e7b4e36f85b2b82d860b10589c04a6f99" translate="yes" xml:space="preserve">
          <source>std::wcscspn</source>
          <target state="translated">std::wcscspn</target>
        </trans-unit>
        <trans-unit id="be5abca3ed7d6abdad20898ae2635ac59a513461" translate="yes" xml:space="preserve">
          <source>std::wcsftime</source>
          <target state="translated">std::wcsftime</target>
        </trans-unit>
        <trans-unit id="af929f5f50b62e37306b9b073ccc03fffc8a4d7b" translate="yes" xml:space="preserve">
          <source>std::wcslen</source>
          <target state="translated">std::wcslen</target>
        </trans-unit>
        <trans-unit id="88d203d9bb41fb654d4d67787919fc710d6a28ea" translate="yes" xml:space="preserve">
          <source>std::wcsncat</source>
          <target state="translated">std::wcsncat</target>
        </trans-unit>
        <trans-unit id="693b95ec6ab6f6654308878eacc3db5af717deb6" translate="yes" xml:space="preserve">
          <source>std::wcsncmp</source>
          <target state="translated">std::wcsncmp</target>
        </trans-unit>
        <trans-unit id="a73170b5dfbd6ee6983a38fa6b50e20a0aa1a501" translate="yes" xml:space="preserve">
          <source>std::wcsncpy</source>
          <target state="translated">std::wcsncpy</target>
        </trans-unit>
        <trans-unit id="3cc71adcd0755f95004c834685b18b4100739523" translate="yes" xml:space="preserve">
          <source>std::wcspbrk</source>
          <target state="translated">std::wcspbrk</target>
        </trans-unit>
        <trans-unit id="ed0138d30b7c053eed83e1c7cb7021a9b889f1d8" translate="yes" xml:space="preserve">
          <source>std::wcsrchr</source>
          <target state="translated">std::wcsrchr</target>
        </trans-unit>
        <trans-unit id="9ab4dd65478d65e8f0ddba4cb930eae151eddb8e" translate="yes" xml:space="preserve">
          <source>std::wcsrtombs</source>
          <target state="translated">std::wcsrtombs</target>
        </trans-unit>
        <trans-unit id="93007ef4b174ddbf33c2e1dc83d922779a39cdb7" translate="yes" xml:space="preserve">
          <source>std::wcsspn</source>
          <target state="translated">std::wcsspn</target>
        </trans-unit>
        <trans-unit id="28e22ccb1b4bedf8a85edacc1e6a6b54f9822d21" translate="yes" xml:space="preserve">
          <source>std::wcsstr</source>
          <target state="translated">std::wcsstr</target>
        </trans-unit>
        <trans-unit id="d6732f7fbcec90e22da561a031b8d373a3ecfb79" translate="yes" xml:space="preserve">
          <source>std::wcstof, std::wcstod, std::wcstold</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49a9e23c34b08ab5484528ff8c79a1e2b94b7ab3" translate="yes" xml:space="preserve">
          <source>std::wcstoimax, std::wcstoumax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1f6b9c1d35512cf0cfe4bd0eee9bba753c38896" translate="yes" xml:space="preserve">
          <source>std::wcstok</source>
          <target state="translated">std::wcstok</target>
        </trans-unit>
        <trans-unit id="94f866824895f234eca9da07bdd8f4788efbdebb" translate="yes" xml:space="preserve">
          <source>std::wcstol, std::wcstoll</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de93eee450bd764d0b8a24589789cf713406e7ee" translate="yes" xml:space="preserve">
          <source>std::wcstold</source>
          <target state="translated">std::wcstold</target>
        </trans-unit>
        <trans-unit id="10462d763ab4af15d8c0743d82e6cb6e4e030ea7" translate="yes" xml:space="preserve">
          <source>std::wcstoll</source>
          <target state="translated">std::wcstoll</target>
        </trans-unit>
        <trans-unit id="27d70c0334bfc6e635c35982199775f202aa3489" translate="yes" xml:space="preserve">
          <source>std::wcstombs</source>
          <target state="translated">std::wcstombs</target>
        </trans-unit>
        <trans-unit id="7b4f2e0e46255a0a8760766a07d324d900a23fc2" translate="yes" xml:space="preserve">
          <source>std::wcstoul, std::wcstoull</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="851dac8878c8234b62528bdc88d21292649df450" translate="yes" xml:space="preserve">
          <source>std::wcstoull</source>
          <target state="translated">std::wcstoull</target>
        </trans-unit>
        <trans-unit id="07b40a14e54032062541d1cd2353f9acde69276a" translate="yes" xml:space="preserve">
          <source>std::wcstoumax</source>
          <target state="translated">std::wcstoumax</target>
        </trans-unit>
        <trans-unit id="b97b69fc2dc02b507b9e02a966a5d1ef224e320b" translate="yes" xml:space="preserve">
          <source>std::wcsxfrm</source>
          <target state="translated">std::wcsxfrm</target>
        </trans-unit>
        <trans-unit id="ce17c36ef2e730a2f2ccb89695fea7f078d31dca" translate="yes" xml:space="preserve">
          <source>std::wctob</source>
          <target state="translated">std::wctob</target>
        </trans-unit>
        <trans-unit id="4d1392a641ca9e2c62f281bd0b62531b80643315" translate="yes" xml:space="preserve">
          <source>std::wctomb</source>
          <target state="translated">std::wctomb</target>
        </trans-unit>
        <trans-unit id="8a9b9525677440f3a125037fa334501bb0ce3c71" translate="yes" xml:space="preserve">
          <source>std::wctrans</source>
          <target state="translated">std::wctrans</target>
        </trans-unit>
        <trans-unit id="80eff65e0a5f652b6c469b20c668253c04837bab" translate="yes" xml:space="preserve">
          <source>std::wctype</source>
          <target state="translated">std::wctype</target>
        </trans-unit>
        <trans-unit id="026a027c4671d7ae7f359400603d2b915fccc9af" translate="yes" xml:space="preserve">
          <source>std::weak_equal</source>
          <target state="translated">std::weak_equal</target>
        </trans-unit>
        <trans-unit id="0743b6fe1103d661f2c264da01d4570679b42c97" translate="yes" xml:space="preserve">
          <source>std::weak_equality</source>
          <target state="translated">std::weak_equality</target>
        </trans-unit>
        <trans-unit id="f0fc3dbecae897424267fc5e3bcfd1927252c5e4" translate="yes" xml:space="preserve">
          <source>std::weak_order</source>
          <target state="translated">std::weak_order</target>
        </trans-unit>
        <trans-unit id="3f002c784b8520047a2d205b59c660e33aeeb1ee" translate="yes" xml:space="preserve">
          <source>std::weak_ordering</source>
          <target state="translated">std::weak_ordering</target>
        </trans-unit>
        <trans-unit id="662455ec5c166c3d0e683102d28161bcce7cc387" translate="yes" xml:space="preserve">
          <source>std::weak_ordering::operator partial_ordering</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf96053cb72a1d2d99fd84b04a66888b54a6080f" translate="yes" xml:space="preserve">
          <source>std::weak_ordering::operator weak_equality</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d564b112043c348ff6f5014b097d0acfa0c0be2b" translate="yes" xml:space="preserve">
          <source>std::weak_ptr</source>
          <target state="translated">std::weak_ptr</target>
        </trans-unit>
        <trans-unit id="f6f9cb2e82b11fc346f345ecb32c566cf97bd0d7" translate="yes" xml:space="preserve">
          <source>std::weak_ptr&amp;lt;T&amp;gt;::expired</source>
          <target state="translated">std::weak_ptr&amp;lt;T&amp;gt;::expired</target>
        </trans-unit>
        <trans-unit id="92d282d9b80770d5b1ae86f891015d6e6fc21446" translate="yes" xml:space="preserve">
          <source>std::weak_ptr&amp;lt;T&amp;gt;::lock</source>
          <target state="translated">std::weak_ptr&amp;lt;T&amp;gt;::lock</target>
        </trans-unit>
        <trans-unit id="7adc7556f000bcd46bae5a7bdf19441ea334ca9d" translate="yes" xml:space="preserve">
          <source>std::weak_ptr&amp;lt;T&amp;gt;::operator=</source>
          <target state="translated">std::weak_ptr&amp;lt;T&amp;gt;::operator=</target>
        </trans-unit>
        <trans-unit id="8f69992629561148f21ecde748f23f73eea8cc52" translate="yes" xml:space="preserve">
          <source>std::weak_ptr&amp;lt;T&amp;gt;::owner_before</source>
          <target state="translated">std::weak_ptr&amp;lt;T&amp;gt;::owner_before</target>
        </trans-unit>
        <trans-unit id="f52bb7ceb98cdbe7278b0698ad677329800be0ae" translate="yes" xml:space="preserve">
          <source>std::weak_ptr&amp;lt;T&amp;gt;::reset</source>
          <target state="translated">std::weak_ptr&amp;lt;T&amp;gt;::reset</target>
        </trans-unit>
        <trans-unit id="a37a8c6638e6c539d10c1815e5eff00d6e9e5a55" translate="yes" xml:space="preserve">
          <source>std::weak_ptr&amp;lt;T&amp;gt;::swap</source>
          <target state="translated">std::weak_ptr&amp;lt;T&amp;gt;::swap</target>
        </trans-unit>
        <trans-unit id="437da72fbebeb762ae8eecc9f7f959c9b3a7ae26" translate="yes" xml:space="preserve">
          <source>std::weak_ptr&amp;lt;T&amp;gt;::use_count</source>
          <target state="translated">std::weak_ptr&amp;lt;T&amp;gt;::use_count</target>
        </trans-unit>
        <trans-unit id="20a8c5c7c84128fbf3b89ca5050262bf052a5495" translate="yes" xml:space="preserve">
          <source>std::weak_ptr&amp;lt;T&amp;gt;::weak_ptr</source>
          <target state="translated">std::weak_ptr&amp;lt;T&amp;gt;::weak_ptr</target>
        </trans-unit>
        <trans-unit id="92f1b796235b9301aff5130ae087f921ec6466e4" translate="yes" xml:space="preserve">
          <source>std::weak_ptr&amp;lt;T&amp;gt;::~weak_ptr</source>
          <target state="translated">std::weak_ptr&amp;lt;T&amp;gt;::~weak_ptr</target>
        </trans-unit>
        <trans-unit id="efe93462f51b8541eb50f860d640bada18922009" translate="yes" xml:space="preserve">
          <source>std::weak_ptr::expired</source>
          <target state="translated">std::weak_ptr::expired</target>
        </trans-unit>
        <trans-unit id="857b127171065f0dbf108e37153b7dd5e4c7b2ff" translate="yes" xml:space="preserve">
          <source>std::weak_ptr::lock</source>
          <target state="translated">std::weak_ptr::lock</target>
        </trans-unit>
        <trans-unit id="e6205fc190d3427c8966b10594ece5eda4e1fac9" translate="yes" xml:space="preserve">
          <source>std::weak_ptr::operator=</source>
          <target state="translated">std::weak_ptr::operator=</target>
        </trans-unit>
        <trans-unit id="ab052f2fd069a7271b12b6d1b1e41e0700a79d36" translate="yes" xml:space="preserve">
          <source>std::weak_ptr::owner_before</source>
          <target state="translated">std::weak_ptr::owner_before</target>
        </trans-unit>
        <trans-unit id="a4ef4018926a109e274b511465ccea87bf3ac556" translate="yes" xml:space="preserve">
          <source>std::weak_ptr::reset</source>
          <target state="translated">std::weak_ptr::reset</target>
        </trans-unit>
        <trans-unit id="77870a3001e0e5e4cd2818fa97c5f7229429c36a" translate="yes" xml:space="preserve">
          <source>std::weak_ptr::swap</source>
          <target state="translated">std::weak_ptr::swap</target>
        </trans-unit>
        <trans-unit id="cabe5f2e7ab87379bd37815d8a1e13cfcfb254f2" translate="yes" xml:space="preserve">
          <source>std::weak_ptr::use_count</source>
          <target state="translated">std::weak_ptr::use_count</target>
        </trans-unit>
        <trans-unit id="690e83d6f1b74fdb823a8b2e52087deb2b07f30d" translate="yes" xml:space="preserve">
          <source>std::weak_ptr::weak_ptr</source>
          <target state="translated">std::weak_ptr::weak_ptr</target>
        </trans-unit>
        <trans-unit id="74115dbbc3edd1b8fc136f846400d7cb56f8e951" translate="yes" xml:space="preserve">
          <source>std::weak_ptr::~weak_ptr</source>
          <target state="translated">std::weak_ptr::~weak_ptr</target>
        </trans-unit>
        <trans-unit id="463579896bec41fff0b54cb7ad708713f19e27ca" translate="yes" xml:space="preserve">
          <source>std::weibull_distribution</source>
          <target state="translated">std::weibull_distribution</target>
        </trans-unit>
        <trans-unit id="f0892fe37c07fc82ed68e64835451bd05f8bddfa" translate="yes" xml:space="preserve">
          <source>std::weibull_distribution&amp;lt;RealType&amp;gt;::a, b</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="560abbeafbef34f462f56eb9dc99401c4d9bedac" translate="yes" xml:space="preserve">
          <source>std::weibull_distribution&amp;lt;RealType&amp;gt;::max</source>
          <target state="translated">std::weibull_distribution&amp;lt;RealType&amp;gt;::max</target>
        </trans-unit>
        <trans-unit id="5bcd427155f660a59c89cf7ed5a8f34c47e96962" translate="yes" xml:space="preserve">
          <source>std::weibull_distribution&amp;lt;RealType&amp;gt;::min</source>
          <target state="translated">std::weibull_distribution&amp;lt;RealType&amp;gt;::min</target>
        </trans-unit>
        <trans-unit id="3ab6fe746bc907968fd5706c406885a06e962e85" translate="yes" xml:space="preserve">
          <source>std::weibull_distribution&amp;lt;RealType&amp;gt;::operator()</source>
          <target state="translated">std::weibull_distribution&amp;lt;RealType&amp;gt;::operator()</target>
        </trans-unit>
        <trans-unit id="cd2b8b48d25089b05beea383b19841e0accba5f1" translate="yes" xml:space="preserve">
          <source>std::weibull_distribution&amp;lt;RealType&amp;gt;::param</source>
          <target state="translated">std::weibull_distribution&amp;lt;RealType&amp;gt;::param</target>
        </trans-unit>
        <trans-unit id="93afef7b9ccdc612525984fec9a15f7cf4705dd6" translate="yes" xml:space="preserve">
          <source>std::weibull_distribution&amp;lt;RealType&amp;gt;::reset</source>
          <target state="translated">std::weibull_distribution&amp;lt;RealType&amp;gt;::reset</target>
        </trans-unit>
        <trans-unit id="973a7dbcf2f7aaebfa666c24f2f489c494994835" translate="yes" xml:space="preserve">
          <source>std::weibull_distribution&amp;lt;RealType&amp;gt;::weibull_distribution</source>
          <target state="translated">std::weibull_distribution&amp;lt;RealType&amp;gt;::weibull_distribution</target>
        </trans-unit>
        <trans-unit id="8f1504a7b233e5be32d39dcc05b5c1f13e81b4a7" translate="yes" xml:space="preserve">
          <source>std::weibull_distribution::a</source>
          <target state="translated">std::weibull_distribution::a</target>
        </trans-unit>
        <trans-unit id="55908e9c69de5947a02bd1b9117488eecfa202be" translate="yes" xml:space="preserve">
          <source>std::weibull_distribution::max</source>
          <target state="translated">std::weibull_distribution::max</target>
        </trans-unit>
        <trans-unit id="78f7a40fbe13b97607503b7f38eeeb37ef55d53e" translate="yes" xml:space="preserve">
          <source>std::weibull_distribution::min</source>
          <target state="translated">std::weibull_distribution::min</target>
        </trans-unit>
        <trans-unit id="473a136257a9d2d2cfa3f9d40ac67dcf74a7c3dc" translate="yes" xml:space="preserve">
          <source>std::weibull_distribution::operator()</source>
          <target state="translated">std::weibull_distribution::operator()</target>
        </trans-unit>
        <trans-unit id="3b72ae2b803280580bc23aab8e54e165d0f2c025" translate="yes" xml:space="preserve">
          <source>std::weibull_distribution::param</source>
          <target state="translated">std::weibull_distribution::param</target>
        </trans-unit>
        <trans-unit id="e52d714c0922351b5f112945445b3518416f61be" translate="yes" xml:space="preserve">
          <source>std::weibull_distribution::reset</source>
          <target state="translated">std::weibull_distribution::reset</target>
        </trans-unit>
        <trans-unit id="8de2b2fd0727a782c11b3957c8d4f700d35720be" translate="yes" xml:space="preserve">
          <source>std::weibull_distribution::weibull_distribution</source>
          <target state="translated">std::weibull_distribution::weibull_distribution</target>
        </trans-unit>
        <trans-unit id="549c32c8d767206ba0658bd53b413c2e328dc919" translate="yes" xml:space="preserve">
          <source>std::wmemchr</source>
          <target state="translated">std::wmemchr</target>
        </trans-unit>
        <trans-unit id="f2fa2d21eee87feb4e5d5313c2e9dfbde5ef5dd8" translate="yes" xml:space="preserve">
          <source>std::wmemcmp</source>
          <target state="translated">std::wmemcmp</target>
        </trans-unit>
        <trans-unit id="51f27e0744b00b53f4fa4bcffe55831dd5b4a4c1" translate="yes" xml:space="preserve">
          <source>std::wmemcpy</source>
          <target state="translated">std::wmemcpy</target>
        </trans-unit>
        <trans-unit id="3d60f22d9477324a78b461833eb7e4701f4347b2" translate="yes" xml:space="preserve">
          <source>std::wmemmove</source>
          <target state="translated">std::wmemmove</target>
        </trans-unit>
        <trans-unit id="e9ed8d73461d9591808245d2268dce37bed52878" translate="yes" xml:space="preserve">
          <source>std::wmemset</source>
          <target state="translated">std::wmemset</target>
        </trans-unit>
        <trans-unit id="ee6a359f4f1b73f3cf4893326a04ac2f790986ea" translate="yes" xml:space="preserve">
          <source>std::wprintf</source>
          <target state="translated">std::wprintf</target>
        </trans-unit>
        <trans-unit id="3cfb1053d8c59e24f7db6d454d328307c3cb7f30" translate="yes" xml:space="preserve">
          <source>std::wprintf, std::fwprintf, std::swprintf</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="add44c5d324b2d8dc6cd3f39cfec3941780bda54" translate="yes" xml:space="preserve">
          <source>std::ws</source>
          <target state="translated">std::ws</target>
        </trans-unit>
        <trans-unit id="98fce8e19cb509e1fd2f59289cad6f5bc468ff0f" translate="yes" xml:space="preserve">
          <source>std::wscanf</source>
          <target state="translated">std::wscanf</target>
        </trans-unit>
        <trans-unit id="8ab8e384f07488dcbb2d342190fe53902dd23550" translate="yes" xml:space="preserve">
          <source>std::wscanf, std::fwscanf, std::swscanf</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="543a7db2afed212b0fdfc929ae213c9f9d8576ae" translate="yes" xml:space="preserve">
          <source>std::wstring_convert</source>
          <target state="translated">std::wstring_convert</target>
        </trans-unit>
        <trans-unit id="f1bd443d4aaa2541e87b3280ce560ab78d4f6bf5" translate="yes" xml:space="preserve">
          <source>std::wstring_convert&amp;lt;Codecvt,Elem,Wide_alloc,Byte_alloc&amp;gt;:: ~wstring_convert</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d6a835e6956d4f2c83cefe00402a9bc3aa9f5fd" translate="yes" xml:space="preserve">
          <source>std::wstring_convert&amp;lt;Codecvt,Elem,Wide_alloc,Byte_alloc&amp;gt;::converted</source>
          <target state="translated">std::wstring_convert&amp;lt;Codecvt,Elem,Wide_alloc,Byte_alloc&amp;gt;::converted</target>
        </trans-unit>
        <trans-unit id="099dfa7e126beb053cbeda2288e626b18897d2a1" translate="yes" xml:space="preserve">
          <source>std::wstring_convert&amp;lt;Codecvt,Elem,Wide_alloc,Byte_alloc&amp;gt;::from_bytes</source>
          <target state="translated">std::wstring_convert&amp;lt;Codecvt,Elem,Wide_alloc,Byte_alloc&amp;gt;::from_bytes</target>
        </trans-unit>
        <trans-unit id="0033e12c6ba3f5159296dc3a690245d903ae4792" translate="yes" xml:space="preserve">
          <source>std::wstring_convert&amp;lt;Codecvt,Elem,Wide_alloc,Byte_alloc&amp;gt;::state</source>
          <target state="translated">std::wstring_convert&amp;lt;Codecvt,Elem,Wide_alloc,Byte_alloc&amp;gt;::state</target>
        </trans-unit>
        <trans-unit id="39898a5c53365be3911e8c84aac5c2833319ae33" translate="yes" xml:space="preserve">
          <source>std::wstring_convert&amp;lt;Codecvt,Elem,Wide_alloc,Byte_alloc&amp;gt;::to_bytes</source>
          <target state="translated">std::wstring_convert&amp;lt;Codecvt,Elem,Wide_alloc,Byte_alloc&amp;gt;::to_bytes</target>
        </trans-unit>
        <trans-unit id="34cc275317575d8bab842e1a22863d7b7961f38f" translate="yes" xml:space="preserve">
          <source>std::wstring_convert&amp;lt;Codecvt,Elem,Wide_alloc,Byte_alloc&amp;gt;::wstring_convert</source>
          <target state="translated">std::wstring_convert&amp;lt;Codecvt,Elem,Wide_alloc,Byte_alloc&amp;gt;::wstring_convert</target>
        </trans-unit>
        <trans-unit id="337afdeaf2f484669487cba11f53361d49dc221d" translate="yes" xml:space="preserve">
          <source>std::wstring_convert:: ~wstring_convert</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aeaefcd4014718745163410b081f247f0fd83bf" translate="yes" xml:space="preserve">
          <source>std::wstring_convert::converted</source>
          <target state="translated">std::wstring_convert::converted</target>
        </trans-unit>
        <trans-unit id="f4524f9302a4cc63b5005ce86ec976da868e6761" translate="yes" xml:space="preserve">
          <source>std::wstring_convert::from_bytes</source>
          <target state="translated">std::wstring_convert::from_bytes</target>
        </trans-unit>
        <trans-unit id="c2b4d0425930e5f3c8e08ebaff86fb49c9c07e9f" translate="yes" xml:space="preserve">
          <source>std::wstring_convert::state</source>
          <target state="translated">std::wstring_convert::state</target>
        </trans-unit>
        <trans-unit id="57ca8fa101f9b3a0b28bceb5ebd731b1a19548ee" translate="yes" xml:space="preserve">
          <source>std::wstring_convert::to_bytes</source>
          <target state="translated">std::wstring_convert::to_bytes</target>
        </trans-unit>
        <trans-unit id="ceba5e6192909a049d483154fe60cf83f882b2cf" translate="yes" xml:space="preserve">
          <source>std::wstring_convert::wstring_convert</source>
          <target state="translated">std::wstring_convert::wstring_convert</target>
        </trans-unit>
        <trans-unit id="5492226ca4f5fafdf732bd9fbd3f63cc28f442ad" translate="yes" xml:space="preserve">
          <source>std_name</source>
          <target state="translated">std_name</target>
        </trans-unit>
        <trans-unit id="185fc1ef3fe91517feeb5c6d7906ae8f9c51db70" translate="yes" xml:space="preserve">
          <source>stddev</source>
          <target state="translated">stddev</target>
        </trans-unit>
        <trans-unit id="2820990657ac8ffea91c83471562359da461629e" translate="yes" xml:space="preserve">
          <source>stdexcept</source>
          <target state="translated">stdexcept</target>
        </trans-unit>
        <trans-unit id="5b38b5eae67339b37d73ec6e92bdf1f9379406ba" translate="yes" xml:space="preserve">
          <source>stdinstdoutstderr</source>
          <target state="translated">stdinstdoutstderr</target>
        </trans-unit>
        <trans-unit id="e8402c081a4da657ef8810b2d65b11ee77577684" translate="yes" xml:space="preserve">
          <source>steady clock flag, always &lt;code&gt;true&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0263402ac557343a0fc5d5b8c7321a2eca6c8c9e" translate="yes" xml:space="preserve">
          <source>steady_clock</source>
          <target state="translated">steady_clock</target>
        </trans-unit>
        <trans-unit id="e1d3fe39d1cbbfb4f67a0c16fbd6728253c96c1d" translate="yes" xml:space="preserve">
          <source>stem</source>
          <target state="translated">stem</target>
        </trans-unit>
        <trans-unit id="6fd0defdd1c19095847f2f708896a9d83ebce80c" translate="yes" xml:space="preserve">
          <source>stofstodstold</source>
          <target state="translated">stofstodstold</target>
        </trans-unit>
        <trans-unit id="bcee360db2b384b86c8692bc02924e64ecb0cdbf" translate="yes" xml:space="preserve">
          <source>stoistolstoll</source>
          <target state="translated">stoistolstoll</target>
        </trans-unit>
        <trans-unit id="469a3c734557021ffb3a27711d3e7341ce549d08" translate="yes" xml:space="preserve">
          <source>stops the execution of the current thread for a specified time duration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42722dbb26cd0f08fff6ede7883b7ef1b012fb5e" translate="yes" xml:space="preserve">
          <source>stops the execution of the current thread until a specified time point</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="258a840bf6fb2c3dc1fa8283a06c385cd2cc9cc1" translate="yes" xml:space="preserve">
          <source>storage duration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65ea83c1931c480598e62d08c8e44f87b34a4041" translate="yes" xml:space="preserve">
          <source>storage duration and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3b30adc43e96cde97dbd7558dac446848f39334" translate="yes" xml:space="preserve">
          <source>storage duration are destroyed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a46c8c09789b6971840a73f57557cc4238cc7e99" translate="yes" xml:space="preserve">
          <source>storage duration specifiers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d03018fb4276d158d9e7a206b043e6351737d956" translate="yes" xml:space="preserve">
          <source>storage duration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0954e3e70aa2202a1b57322d1f1ebb6ee765c2bd" translate="yes" xml:space="preserve">
          <source>storage duration. Also hints to the compiler to place the object in the processor's register. (deprecated)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="567157eb41696b503b61b50dd58861fda527e440" translate="yes" xml:space="preserve">
          <source>storage duration. The storage for the object is allocated and deallocated per request by using &lt;a href=&quot;../memory&quot;&gt;dynamic memory allocation&lt;/a&gt; functions. See &lt;a href=&quot;new&quot;&gt;new-expression&lt;/a&gt; for details on initialization of objects with this storage duration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac250a4e97b39c92c81c6a14638f645abf9e166d" translate="yes" xml:space="preserve">
          <source>storage duration. The storage for the object is allocated at the beginning of the enclosing code block and deallocated at the end. All local objects have this storage duration, except those declared &lt;code&gt;static&lt;/code&gt;, &lt;code&gt;extern&lt;/code&gt; or &lt;code&gt;thread_local&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4599ba39a83ca4fc20aaf6e92bb9efa970efb68" translate="yes" xml:space="preserve">
          <source>storage duration. The storage for the object is allocated when the program begins and deallocated when the program ends. Only one instance of the object exists. All objects declared at namespace scope (including global namespace) have this storage duration, plus those declared with &lt;code&gt;static&lt;/code&gt; or &lt;code&gt;extern&lt;/code&gt;. See &lt;a href=&quot;initialization#Non-local_variables&quot;&gt;Non-local variables&lt;/a&gt; and &lt;a href=&quot;storage_duration#Static_local_variables&quot;&gt;Static local variables&lt;/a&gt; for details on initialization of objects with this storage duration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e5cb03bfc880cf619caddfdfb7634f85865fcfb" translate="yes" xml:space="preserve">
          <source>storage duration. The storage for the object is allocated when the thread begins and deallocated when the thread ends. Each thread has its own instance of the object. Only objects declared &lt;code&gt;thread_local&lt;/code&gt; have this storage duration. &lt;code&gt;thread_local&lt;/code&gt; can appear together with &lt;code&gt;static&lt;/code&gt; or &lt;code&gt;extern&lt;/code&gt; to adjust linkage. See &lt;a href=&quot;initialization#Non-local_variables&quot;&gt;Non-local variables&lt;/a&gt; for details on initialization of objects with this storage duration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a21295d813c26eb287fc6b59454fb37858d63e6" translate="yes" xml:space="preserve">
          <source>store</source>
          <target state="translated">store</target>
        </trans-unit>
        <trans-unit id="3ee9a4996ca14a8f2bc28005bc439cc89600024a" translate="yes" xml:space="preserve">
          <source>stores a reference in a new &lt;code&gt;std::reference_wrapper&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f7c1d4896c945fe9dfdeb88b60e8ecedf981925" translate="yes" xml:space="preserve">
          <source>stores a value for asynchronous retrieval</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1731b38a630353a6ebdfe5494dc4b00ffb62703" translate="yes" xml:space="preserve">
          <source>stores a value into an atomic object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02347aa87e7382924a9a7be80d09b91a2aca282f" translate="yes" xml:space="preserve">
          <source>stores a value into the object referenced by an &lt;code&gt;atomic_ref&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="148452e1b6e5ca42f27a81e5069cc2bb67944255" translate="yes" xml:space="preserve">
          <source>stores and manipulates sequences of characters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00cefc2d12de072aa47013b49640371c50e07f55" translate="yes" xml:space="preserve">
          <source>stossc</source>
          <target state="translated">stossc</target>
        </trans-unit>
        <trans-unit id="ac97ccfc3ee39ca77a51f7f34b71ed00a3f0db3c" translate="yes" xml:space="preserve">
          <source>stoulstoull</source>
          <target state="translated">stoulstoull</target>
        </trans-unit>
        <trans-unit id="3442496b96dd01591a8cd44b1eec1368ab728aba" translate="yes" xml:space="preserve">
          <source>str</source>
          <target state="translated">str</target>
        </trans-unit>
        <trans-unit id="cfaf9574c952d521bcc2483f6bb89afd9e57f984" translate="yes" xml:space="preserve">
          <source>str_end</source>
          <target state="translated">str_end</target>
        </trans-unit>
        <trans-unit id="9d60fa19b28fcd5e8305f24bec643de572d7264f" translate="yes" xml:space="preserve">
          <source>strbuf</source>
          <target state="translated">strbuf</target>
        </trans-unit>
        <trans-unit id="4ad96f473a804e5077780e51723c447b2926c7e1" translate="yes" xml:space="preserve">
          <source>strcat</source>
          <target state="translated">strcat</target>
        </trans-unit>
        <trans-unit id="e82adcb13528b782e1040740340ce98a75be1dbe" translate="yes" xml:space="preserve">
          <source>strchr</source>
          <target state="translated">strchr</target>
        </trans-unit>
        <trans-unit id="3289abc05c29277963cd4055ebe06c540bfdc397" translate="yes" xml:space="preserve">
          <source>strcmp</source>
          <target state="translated">strcmp</target>
        </trans-unit>
        <trans-unit id="4812d5b749885b54d2618689a123964b5aa09c1b" translate="yes" xml:space="preserve">
          <source>strcoll</source>
          <target state="translated">strcoll</target>
        </trans-unit>
        <trans-unit id="f21c6fecef7a3274c82450856cda386f24b86510" translate="yes" xml:space="preserve">
          <source>strcpy</source>
          <target state="translated">strcpy</target>
        </trans-unit>
        <trans-unit id="b19cb789dfc18ed9f979e5ba61857c83a4a1b537" translate="yes" xml:space="preserve">
          <source>strcspn</source>
          <target state="translated">strcspn</target>
        </trans-unit>
        <trans-unit id="c82e3d7279efa3eca576370af952c815d48ce41f" translate="yes" xml:space="preserve">
          <source>stream</source>
          <target state="translated">stream</target>
        </trans-unit>
        <trans-unit id="030146c31ce09e25c2434079c6de9bfc9ad16e1c" translate="yes" xml:space="preserve">
          <source>stream buffer iterators to compare</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="618dc494567ecbc96404e90c3ed028bbcd560a46" translate="yes" xml:space="preserve">
          <source>stream buffer to assign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18d0903ee12330b4b845cc5c9382f4ed36e6684b" translate="yes" xml:space="preserve">
          <source>stream buffer to associate to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deb906ace1dbc6b7edf9f2196037f3351e0d4593" translate="yes" xml:space="preserve">
          <source>stream buffer to exchange contents with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43dacf074af457bf2747b435832439e2343b7319" translate="yes" xml:space="preserve">
          <source>stream buffer to initialize the iterator with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb12370673be8cb189f04e10b972a684577703bf" translate="yes" xml:space="preserve">
          <source>stream buffer to read the content to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff09501037ba15c503ae4ae6a836eb3d647b9df1" translate="yes" xml:space="preserve">
          <source>stream error flags object that is modified by this function to indicate errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85e9849537c363611bcb448e41c41f0642da9621" translate="yes" xml:space="preserve">
          <source>stream error state flags to set. It can be a combination of the following constants:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6b611fe5ba81c8055d0fb37e489873ddb660191" translate="yes" xml:space="preserve">
          <source>stream exception</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5c9aa2fc056a2457161f1672d9d91854cf79f44" translate="yes" xml:space="preserve">
          <source>stream extraction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3521e549372fa1cdf947036d9cc5c5f49acb2f51" translate="yes" xml:space="preserve">
          <source>stream insertion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8afe96bd76ddca7210daa4be3a4f03043e91c1d4" translate="yes" xml:space="preserve">
          <source>stream insertion and extraction operators are often declared as non-member friends.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26a079c00e1da8451d244937b9d9b8504e8a3867" translate="yes" xml:space="preserve">
          <source>stream iterators to compare</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1072e8ebfe80e00ae1548566152f36b81497b61" translate="yes" xml:space="preserve">
          <source>stream open mode type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2f74d2b6ed648198d570a2f6609f8ebe958e138" translate="yes" xml:space="preserve">
          <source>stream position, such as one obtained by &lt;code&gt;&lt;a href=&quot;seekoff&quot;&gt;seekoff()&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;seekpos()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4c74428fd24b00bd30d49f4af82c1ba98eba501" translate="yes" xml:space="preserve">
          <source>stream to exchange the state with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f8e0ef0b43b215dcddcd9e34171511a49125128" translate="yes" xml:space="preserve">
          <source>stream to initialize the istream_iterator with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2134a4ca5c5f63768f886e6c0d8130cf241b7e6e" translate="yes" xml:space="preserve">
          <source>stream to obtain the stream buffer from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="011f9465eba1bd8fd046ebac42f0f5890e959152" translate="yes" xml:space="preserve">
          <source>stream to perform input on</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="874b9c4b34d761b3703ed5eafddf6a721f783d81" translate="yes" xml:space="preserve">
          <source>stream to perform output on</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dfa8b69494bebe465003ad10eac43b2c92b7881" translate="yes" xml:space="preserve">
          <source>stream to retrieve the formatting information from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01c0a97d27426d7612cfc35eaaaf7e431f84603d" translate="yes" xml:space="preserve">
          <source>streambuf</source>
          <target state="translated">streambuf</target>
        </trans-unit>
        <trans-unit id="51032f427fbe8dd8ccc0581cc22ae16b9cad74b8" translate="yes" xml:space="preserve">
          <source>streambuf to initialize with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d50270d70931e3dcfca7cf7e357be5073efdf2bd" translate="yes" xml:space="preserve">
          <source>streambuffer to use as output sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f6a91022a0210122013ab0bbc007aad9659e185" translate="yes" xml:space="preserve">
          <source>streambuffer to use as underlying device</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afd303aef87f29b87f56654fc6f23026216d61a5" translate="yes" xml:space="preserve">
          <source>streamoff</source>
          <target state="translated">streamoff</target>
        </trans-unit>
        <trans-unit id="39bab19fea3fa07bbc86d13c06628d81e15279ed" translate="yes" xml:space="preserve">
          <source>streams whose state to swap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="117dd6714f333ebf4c5f0d3d2a614807bda08dfa" translate="yes" xml:space="preserve">
          <source>streamsize</source>
          <target state="translated">streamsize</target>
        </trans-unit>
        <trans-unit id="e76d2a3073c61d4064cdadf379a2b29b2d2f5ccc" translate="yes" xml:space="preserve">
          <source>strerror</source>
          <target state="translated">strerror</target>
        </trans-unit>
        <trans-unit id="de093aaea82fd740ecd7cb7be06ae3f527748ad2" translate="yes" xml:space="preserve">
          <source>strftime</source>
          <target state="translated">strftime</target>
        </trans-unit>
        <trans-unit id="480839692df2a763f6cb41d281c4dd9dccb3674c" translate="yes" xml:space="preserve">
          <source>strict total ordering</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81a9f9f8b62976e36b230986c6abfb242cf02e4f" translate="yes" xml:space="preserve">
          <source>strict weak ordering relation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dc89f85b619068818f6ffc8b793a74773a52f83" translate="yes" xml:space="preserve">
          <source>stride</source>
          <target state="translated">stride</target>
        </trans-unit>
        <trans-unit id="9d72b127e05a7cc353505a2aae47e14135e95559" translate="yes" xml:space="preserve">
          <source>strides</source>
          <target state="translated">strides</target>
        </trans-unit>
        <trans-unit id="ecb252044b5ea0f679ee78ec1a12904739e2904d" translate="yes" xml:space="preserve">
          <source>string</source>
          <target state="translated">string</target>
        </trans-unit>
        <trans-unit id="ca198cabdc8db864997d87129e02d50404c7a21e" translate="yes" xml:space="preserve">
          <source>string containing characters to assign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0821acf8eda28e8e4485c48cb250cc8ab920a7df" translate="yes" xml:space="preserve">
          <source>string conversions such as &lt;code&gt;&lt;a href=&quot;../../string/byte/strtof&quot;&gt;std::strtod&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../../io/c/printf&quot;&gt;std::printf&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c19794b7607678ae43dcac2f70ac5e4d74a5ed6c" translate="yes" xml:space="preserve">
          <source>string identifying characters to search for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bc224db834d4d5d5c88404f063d0c00be8e1528" translate="yes" xml:space="preserve">
          <source>string literal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1f8f61560ab051d18ded06b1bb36823b256accc" translate="yes" xml:space="preserve">
          <source>string literal operator template</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9a0fd03162250e6c83ad7990c36fe1f00219ab6" translate="yes" xml:space="preserve">
          <source>string or string view to append</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b57cd5e40e5c76bd5a11db4c7206f180e0c58d78" translate="yes" xml:space="preserve">
          <source>string stream to move from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00f6d444ab4e07559d29f6cef009c00b6dc9a28f" translate="yes" xml:space="preserve">
          <source>string to append</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f23ebc533456178360350c92f6d5284869ffbb67" translate="yes" xml:space="preserve">
          <source>string to assign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2450fa07f4341e4adac240ae9361dd3326958593" translate="yes" xml:space="preserve">
          <source>string to be used as source to initialize the characters with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="743a94db11c63dc3811377e76954cb9fd71ebbc9" translate="yes" xml:space="preserve">
          <source>string to be used as source to initialize the string with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="014ab0591221266431b7c93b09e303b8e574aec2" translate="yes" xml:space="preserve">
          <source>string to exchange the contents with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f12be7477e2b12989b9a6f307dd1b300c5fc87c0" translate="yes" xml:space="preserve">
          <source>string to insert</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7aa3238e43392ab67f9fd4b55ec3c26e92bf878" translate="yes" xml:space="preserve">
          <source>string to search for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="084820704e7cd8d38763c8b57fa8a1b638298865" translate="yes" xml:space="preserve">
          <source>string to use as initial contents of the string stream</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62218010e5a34a041388f7d6f364aee16e27faf3" translate="yes" xml:space="preserve">
          <source>string to use for replacement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f69d64c7c72bb303db246c8fa2c6ebf38c0c3e7e" translate="yes" xml:space="preserve">
          <source>string used to initialize the bitset</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32069a84e164f50b9c29c6e07d0c88fc879ff39e" translate="yes" xml:space="preserve">
          <source>string-literal</source>
          <target state="translated">string-literal</target>
        </trans-unit>
        <trans-unit id="d5600f067e8412dc47f25d70c3a916d910214789" translate="yes" xml:space="preserve">
          <source>string-literalud-suffix</source>
          <target state="translated">string-literalud-suffix</target>
        </trans-unit>
        <trans-unit id="4f8555754e5bd7953b038e19b7f7efe1a1bfcc39" translate="yes" xml:space="preserve">
          <source>string_view</source>
          <target state="translated">string_view</target>
        </trans-unit>
        <trans-unit id="15b86fd5b15b679e96320473e0d6b1501fa04d00" translate="yes" xml:space="preserve">
          <source>strings whose contents to compare</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45e6bfc5d5bd9759b881d4d0422f10851fccf175" translate="yes" xml:space="preserve">
          <source>strings whose contents to swap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36b55dbb4fb9995f63df002be373baaeb6665ae9" translate="yes" xml:space="preserve">
          <source>stringwstringu8stringu16stringu32string</source>
          <target state="translated">stringwstringu8stringu16stringu32string</target>
        </trans-unit>
        <trans-unit id="6c19df52f4536474beeb594b4c186a34750bfbba" translate="yes" xml:space="preserve">
          <source>strlen</source>
          <target state="translated">strlen</target>
        </trans-unit>
        <trans-unit id="b9a3d1d31a9c0286d8a27feaf45dac65d87a6258" translate="yes" xml:space="preserve">
          <source>strncat</source>
          <target state="translated">strncat</target>
        </trans-unit>
        <trans-unit id="1452b37a8c42bfdb3f5e5ad5e6db8d4ec3c05dc1" translate="yes" xml:space="preserve">
          <source>strncmp</source>
          <target state="translated">strncmp</target>
        </trans-unit>
        <trans-unit id="97769ab411139b6b8a2dec456364fa5186a4a091" translate="yes" xml:space="preserve">
          <source>strncpy</source>
          <target state="translated">strncpy</target>
        </trans-unit>
        <trans-unit id="7ca94650c4b9745c62f77694246c2c6c68710074" translate="yes" xml:space="preserve">
          <source>strong structural equality</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e2837a6122279bc97e6bc52c5fee06f8f82baa1" translate="yes" xml:space="preserve">
          <source>strong_equal</source>
          <target state="translated">strong_equal</target>
        </trans-unit>
        <trans-unit id="7ca4d0846fa22e60bc88df02a5cd7b43c98525ac" translate="yes" xml:space="preserve">
          <source>strong_equality</source>
          <target state="translated">strong_equality</target>
        </trans-unit>
        <trans-unit id="e52ec356b8f699bc83b5fd73fc7d0e102e617c93" translate="yes" xml:space="preserve">
          <source>strong_order</source>
          <target state="translated">strong_order</target>
        </trans-unit>
        <trans-unit id="bbbc3f31fe583dc526c01c7da82df281d0b8071a" translate="yes" xml:space="preserve">
          <source>strong_ordering</source>
          <target state="translated">strong_ordering</target>
        </trans-unit>
        <trans-unit id="e02db13c706543aa9ac8af200d565814c85283ed" translate="yes" xml:space="preserve">
          <source>strongly happens-before</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83f143739d403e0b952decd540ca7b1d15e706b2" translate="yes" xml:space="preserve">
          <source>stroperator string_type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c7bfb0d1a481934467d1515266ace98bb8488e2" translate="yes" xml:space="preserve">
          <source>strpbrk</source>
          <target state="translated">strpbrk</target>
        </trans-unit>
        <trans-unit id="74020e4c7b38368e509a4c70eab2f0f4ffddf86f" translate="yes" xml:space="preserve">
          <source>strrchr</source>
          <target state="translated">strrchr</target>
        </trans-unit>
        <trans-unit id="2f05ae62158f750d3fd487964b171c1e68e58e2c" translate="yes" xml:space="preserve">
          <source>strspn</source>
          <target state="translated">strspn</target>
        </trans-unit>
        <trans-unit id="5886180d00b45c0cda775277994ebb81198af915" translate="yes" xml:space="preserve">
          <source>strstr</source>
          <target state="translated">strstr</target>
        </trans-unit>
        <trans-unit id="72346b617b9f71a4ea90225eb9def1f6f623d96f" translate="yes" xml:space="preserve">
          <source>strstream</source>
          <target state="translated">strstream</target>
        </trans-unit>
        <trans-unit id="38f50a12c2dff37507079f9dabf7ec587d7edced" translate="yes" xml:space="preserve">
          <source>strstreambuf</source>
          <target state="translated">strstreambuf</target>
        </trans-unit>
        <trans-unit id="2a984c121b6efb400b9d340372a10cd09262e941" translate="yes" xml:space="preserve">
          <source>strtofstrtodstrtold</source>
          <target state="translated">strtofstrtodstrtold</target>
        </trans-unit>
        <trans-unit id="d4931e62f7bff7b20a62ade93c357b7348f8e9c3" translate="yes" xml:space="preserve">
          <source>strtoimaxstrtoumax</source>
          <target state="translated">strtoimaxstrtoumax</target>
        </trans-unit>
        <trans-unit id="dad2f887a8ea1d34aac73388bf6d8a40bae7ce3a" translate="yes" xml:space="preserve">
          <source>strtok</source>
          <target state="translated">strtok</target>
        </trans-unit>
        <trans-unit id="4dc2dbb4a3241c975df311882649fdf9029038a5" translate="yes" xml:space="preserve">
          <source>strtolstrtoll</source>
          <target state="translated">strtolstrtoll</target>
        </trans-unit>
        <trans-unit id="a22cd29917eed6036bd52f949b366f08304029e2" translate="yes" xml:space="preserve">
          <source>strtoul strtoull</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d118e5a3cc15b182d1286373a60c787e58d3166f" translate="yes" xml:space="preserve">
          <source>struct</source>
          <target state="translated">struct</target>
        </trans-unit>
        <trans-unit id="8ebdc69f31f5f5d3f691d7c13f21f4d3c04b5430" translate="yes" xml:space="preserve">
          <source>structs with volatile members are trivially copyable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="228ed98858ed5bbc6d92f478301d1bca4cb3ce61" translate="yes" xml:space="preserve">
          <source>structs with volatile members were trivially copyable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9466e45d36185dbf7c2725cf1e0c9c38598171e6" translate="yes" xml:space="preserve">
          <source>structure type, return of the &lt;code&gt;&lt;a href=&quot;../numeric/math/div&quot;&gt;std::div&lt;/a&gt;&lt;/code&gt; function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbf69db054b2c4947cda90ea13d03026fa8ade23" translate="yes" xml:space="preserve">
          <source>structure type, return of the &lt;code&gt;&lt;a href=&quot;../numeric/math/div&quot;&gt;std::imaxdiv&lt;/a&gt;&lt;/code&gt; function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdd9364c06da77be8fde36f0d8fcb52c8487aa91" translate="yes" xml:space="preserve">
          <source>structure type, return of the &lt;code&gt;&lt;a href=&quot;../numeric/math/div&quot;&gt;std::ldiv&lt;/a&gt;&lt;/code&gt; function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8aa899fda5ee3014b6132d3392217d5c20ef53af" translate="yes" xml:space="preserve">
          <source>structure type, return of the &lt;code&gt;&lt;a href=&quot;../numeric/math/div&quot;&gt;std::lldiv&lt;/a&gt;&lt;/code&gt; function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23a5cb1c98ef9df3718ae21114a0c6d70370888e" translate="yes" xml:space="preserve">
          <source>structure type, return of the &lt;code&gt;&lt;a href=&quot;math/div&quot;&gt;std::div&lt;/a&gt;&lt;/code&gt; function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3acee9d701562fc254d78760e17f0f50206fafb1" translate="yes" xml:space="preserve">
          <source>structure type, return of the &lt;code&gt;&lt;a href=&quot;math/div&quot;&gt;std::imaxdiv&lt;/a&gt;&lt;/code&gt; function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bf0ba44165250002e152d2c55ec6c300af8d6cf" translate="yes" xml:space="preserve">
          <source>structure type, return of the &lt;code&gt;&lt;a href=&quot;math/div&quot;&gt;std::ldiv&lt;/a&gt;&lt;/code&gt; function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27882d920e66065efa063e6b3546dd75816cc090" translate="yes" xml:space="preserve">
          <source>structure type, return of the &lt;code&gt;&lt;a href=&quot;math/div&quot;&gt;std::lldiv&lt;/a&gt;&lt;/code&gt; function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2847d3feded1d41060c4eb0cc35fd0765775026" translate="yes" xml:space="preserve">
          <source>structured binding declaration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fac8428928a6d525e5c2c2c24288ee5e11f20c5b" translate="yes" xml:space="preserve">
          <source>structured bindings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5492aced1d1abc48f71d4b0008428cd833f9666" translate="yes" xml:space="preserve">
          <source>strxfrm</source>
          <target state="translated">strxfrm</target>
        </trans-unit>
        <trans-unit id="f1981af373d98135c0966aaf08eaa6fd55c09455" translate="yes" xml:space="preserve">
          <source>student_t_distribution</source>
          <target state="translated">student_t_distribution</target>
        </trans-unit>
        <trans-unit id="c3dd351bcfa7e34be0c014f83486d0a785e2abe5" translate="yes" xml:space="preserve">
          <source>sub_match</source>
          <target state="translated">sub_match</target>
        </trans-unit>
        <trans-unit id="b4fc850f81d2e354f4ab0c9892393349580aaf35" translate="yes" xml:space="preserve">
          <source>submatch</source>
          <target state="translated">submatch</target>
        </trans-unit>
        <trans-unit id="b8dcdeb6656f8c2f704e5ad26f89a0710e292fed" translate="yes" xml:space="preserve">
          <source>submatches</source>
          <target state="translated">submatches</target>
        </trans-unit>
        <trans-unit id="48c3883e89fe31a7c8d6286005c9164ce3207954" translate="yes" xml:space="preserve">
          <source>subnormal</source>
          <target state="translated">subnormal</target>
        </trans-unit>
        <trans-unit id="832c96dd459e81ccc22f73492aa50e87f038b768" translate="yes" xml:space="preserve">
          <source>subobjects</source>
          <target state="translated">subobjects</target>
        </trans-unit>
        <trans-unit id="16833d9acee11c8ebcb625b1cebba007d73e58d1" translate="yes" xml:space="preserve">
          <source>subrange</source>
          <target state="translated">subrange</target>
        </trans-unit>
        <trans-unit id="df85a3fa4cab8cb59c20a9638f3c316f42a1cd49" translate="yes" xml:space="preserve">
          <source>subscript</source>
          <target state="translated">subscript</target>
        </trans-unit>
        <trans-unit id="7e396f5ca36c1a6ce13dbd23dce1a0ed75fb68fd" translate="yes" xml:space="preserve">
          <source>subscripting an array rvalue resulted in lvalue</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="181ab3a1791ff5fc589c393df83edd6937bd931d" translate="yes" xml:space="preserve">
          <source>subspan</source>
          <target state="translated">subspan</target>
        </trans-unit>
        <trans-unit id="d0fb56ce199aa106b03724e03b249269585710d1" translate="yes" xml:space="preserve">
          <source>substitution failure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b00fb8eeec4073a07d6134b8b97544cc4be94122" translate="yes" xml:space="preserve">
          <source>substitution is performed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a7fcb58656f61628c9c0507f553928f5ccbc010" translate="yes" xml:space="preserve">
          <source>substitution of each template argument into the following template parameters (if any) succeeds, and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72face471a629a5739e9760b45e749a5dab417a1" translate="yes" xml:space="preserve">
          <source>substr</source>
          <target state="translated">substr</target>
        </trans-unit>
        <trans-unit id="b8faf4d398f9f8c22db0a6b8276ca0f21670b959" translate="yes" xml:space="preserve">
          <source>subsume</source>
          <target state="translated">subsume</target>
        </trans-unit>
        <trans-unit id="fe0bcc980c6db6269847b067bbf660b331f1fb67" translate="yes" xml:space="preserve">
          <source>subtract_with_carry_engine</source>
          <target state="translated">subtract_with_carry_engine</target>
        </trans-unit>
        <trans-unit id="148d46fb75d907f1fd6bcb109cb532d2ed504a21" translate="yes" xml:space="preserve">
          <source>subtraction</source>
          <target state="translated">subtraction</target>
        </trans-unit>
        <trans-unit id="32c7e8ab112f8f017c09c8ba993718065132093d" translate="yes" xml:space="preserve">
          <source>subtraction assignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cf23ad545aa398822494629576ad9b1e21ccafe" translate="yes" xml:space="preserve">
          <source>subtracts a non-atomic value from an atomic object and obtains the previous value of the atomic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbde0ba4d7df59cd23db03f13b6a8aecd0a4c6cd" translate="yes" xml:space="preserve">
          <source>subtracts two &lt;code&gt;ratio&lt;/code&gt; objects at compile-time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3343b5b8a2b4cdd0786c194a5a7c802d49824ae0" translate="yes" xml:space="preserve">
          <source>succ</source>
          <target state="translated">succ</target>
        </trans-unit>
        <trans-unit id="53a5687cb26dc41f2ab4033e97e13adefd3740d6" translate="yes" xml:space="preserve">
          <source>success</source>
          <target state="translated">success</target>
        </trans-unit>
        <trans-unit id="52e914cf66dfa3d924282b56a4ac495878d412cf" translate="yes" xml:space="preserve">
          <source>successful execution of a program</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="131cc9b81a14732af5940e3520be33b02a5126bc" translate="yes" xml:space="preserve">
          <source>such init is ill-formed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4edf4602df6d76a4a602894ed46dd37d24fbd4d" translate="yes" xml:space="preserve">
          <source>such specializations are forbidden</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdca81ff0033bd52e01e0c38528c9264aeefc4ea" translate="yes" xml:space="preserve">
          <source>such that</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35dbe21e91d42f19fee9ad5a0c19e929a8589aff" translate="yes" xml:space="preserve">
          <source>such that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10cd69e5ac1b3f64b4fd6c1ff667b74fdd801a3d" translate="yes" xml:space="preserve">
          <source>such types are allowed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0f96de8d17f2d027b268946d5227b8ce6d69b7f" translate="yes" xml:space="preserve">
          <source>such uses are allowed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec87faca4cbad909219bbcea9dbbe370a9f8c690" translate="yes" xml:space="preserve">
          <source>suffix</source>
          <target state="translated">suffix</target>
        </trans-unit>
        <trans-unit id="58b768cc1cc35edf853a5c40e1918871a55ccd09" translate="yes" xml:space="preserve">
          <source>suffix iterator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae756647b6002c47e1614a4a3cf9434a18951f73" translate="yes" xml:space="preserve">
          <source>suffix, if present, is one of &lt;code&gt;f&lt;/code&gt;, &lt;code&gt;F&lt;/code&gt;, &lt;code&gt;l&lt;/code&gt;, or &lt;code&gt;L&lt;/code&gt;. The suffix determines the type of the floating-point literal:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54a00030f0e0dd466ade4932f4c1e4c35348da36" translate="yes" xml:space="preserve">
          <source>suggests that the implementation reschedule execution of threads</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9dff3557ded7414ae530834de7011f1388d202a" translate="yes" xml:space="preserve">
          <source>sum</source>
          <target state="translated">sum</target>
        </trans-unit>
        <trans-unit id="fc547405c26ae5616fa305b55d7aff0e99b28e82" translate="yes" xml:space="preserve">
          <source>sums up a range of elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08517d94f15db916c3c89e7b27d88e3a91e6715c" translate="yes" xml:space="preserve">
          <source>sungetc</source>
          <target state="translated">sungetc</target>
        </trans-unit>
        <trans-unit id="fe28b88ef9e93d78f44bacf7dd37f36c2fecf9bc" translate="yes" xml:space="preserve">
          <source>supplied at construction. The size of buffers obtained follows a geometric progression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a09337464b15bc3f8c253cc193ff5154d926f56d" translate="yes" xml:space="preserve">
          <source>supplies implementation-dependent library information</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85988b082eb7826b107e7e4c36983e024be46f48" translate="yes" xml:space="preserve">
          <source>suppresses compiler warnings on unused entities, if any</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e354577c2952694a19201f1e7839a0fc72d28970" translate="yes" xml:space="preserve">
          <source>surrogate call function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a6190df9675de3c18b12fd3fc97648581780661" translate="yes" xml:space="preserve">
          <source>sv</source>
          <target state="translated">sv</target>
        </trans-unit>
        <trans-unit id="ade3217578be1546a1b2a6827e4b13aa6d48d141" translate="yes" xml:space="preserve">
          <source>swap</source>
          <target state="translated">swap</target>
        </trans-unit>
        <trans-unit id="e5d54233f907817146961a933b0c98bb8687d402" translate="yes" xml:space="preserve">
          <source>swap the values referenced by two dereferenceable objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23971f62cfe2fd8ee02a150548044e13bfc565ca" translate="yes" xml:space="preserve">
          <source>swap(std::filesystem::path)</source>
          <target state="translated">swap(std::filesystem::path)</target>
        </trans-unit>
        <trans-unit id="2c8d87774f1e922acd35e8035d1a91f0474c44f5" translate="yes" xml:space="preserve">
          <source>swap_ranges</source>
          <target state="translated">swap_ranges</target>
        </trans-unit>
        <trans-unit id="933a600a6146793134748371bad42894cca424a9" translate="yes" xml:space="preserve">
          <source>swapping multi-dimensional arrays can never be &lt;code&gt;noexcept&lt;/code&gt; due to name lookup problems</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c90bf3e68b2e57aa6b85ac65e216a5a9436f6d9" translate="yes" xml:space="preserve">
          <source>swaps state with another &lt;code&gt;&lt;a href=&quot;../unique_lock&quot;&gt;std::unique_lock&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0d22c5f690e2e6b4cba1ce915026040fd824a3b" translate="yes" xml:space="preserve">
          <source>swaps state with another &lt;code&gt;std::unique_lock&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c76acb91eeb3ddd2f46a14572407780bf536471b" translate="yes" xml:space="preserve">
          <source>swaps stream objects, except for the associated buffer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33e307d70c53a596ea9a34c66931a680bdae2a44" translate="yes" xml:space="preserve">
          <source>swaps the contents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47d09aaea302de77a39f01f37ce1704c6070cca8" translate="yes" xml:space="preserve">
          <source>swaps the contents of two &lt;code&gt;tuple&lt;/code&gt;s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47aee1bbf121d6f5f3c47dca42246abb1b5beb29" translate="yes" xml:space="preserve">
          <source>swaps the data members with another shared_lock</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bb6954bc133434d78c1c22c9110e2a1e48bf5ac" translate="yes" xml:space="preserve">
          <source>swaps the elements pointed to by two iterators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c67a3813935541e8d7e84fca5962660baaa20a35" translate="yes" xml:space="preserve">
          <source>swaps the managed objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12726a6783b4361c73f1d14ed2f0f0720ad13615" translate="yes" xml:space="preserve">
          <source>swaps the values of two objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b83a63e96e1874f912b3e244265fb993e96f02fb" translate="yes" xml:space="preserve">
          <source>swaps two &lt;code&gt;any&lt;/code&gt; objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c51d9f22436946f3b4835e46263d274a375a1a5" translate="yes" xml:space="preserve">
          <source>swaps two &lt;code&gt;std::vector&amp;lt;bool&amp;gt;::reference&lt;/code&gt;s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac5d75d9712b7f98a381d5c2ace89f794cb5fd63" translate="yes" xml:space="preserve">
          <source>swaps two basic_filebuf objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ce9c6745095b1e8b51b427653e39f9852827f95" translate="yes" xml:space="preserve">
          <source>swaps two basic_streambuf objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bb6685a3af6de00838c2cd2e7930a7351bd9c4d" translate="yes" xml:space="preserve">
          <source>swaps two basic_stringbuf objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a42df90d928c123ba7f1e672ddf735e5a92103ba" translate="yes" xml:space="preserve">
          <source>swaps two basic_syncbuf objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f686202d7f13ce2a36abd9b75d4a7414ee8b4608" translate="yes" xml:space="preserve">
          <source>swaps two file streams</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="450d3bb8d6bae90480987dfb338c8a12273e7479" translate="yes" xml:space="preserve">
          <source>swaps two paths</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63106ac91246fbe71c9ac08caf7ac6e989a393d3" translate="yes" xml:space="preserve">
          <source>swaps two promise objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e2908ead2dbd0a4e5b063b8237479a4710ea105" translate="yes" xml:space="preserve">
          <source>swaps two ranges of elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de86033c2f461e38a0459c5543dc817687abd849" translate="yes" xml:space="preserve">
          <source>swaps two string streams</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21725eb269446c9b5135f804fb74ba494a707e27" translate="yes" xml:space="preserve">
          <source>swaps two task objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6bf8fa9bf72620004ebca94a63b832d3860837e" translate="yes" xml:space="preserve">
          <source>swaps two thread objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ad2b76ffeaaf2b5987c64cbad982c438f14b776" translate="yes" xml:space="preserve">
          <source>swaps with another &lt;code&gt;&lt;a href=&quot;../basic_ios&quot;&gt;std::basic_ios&lt;/a&gt;&lt;/code&gt; except for &lt;code&gt;rdbuf&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc7baab24652bd134d3e46fcc11642ea2279eccc" translate="yes" xml:space="preserve">
          <source>swaps with another &lt;code&gt;std::basic_ios&lt;/code&gt; except for &lt;code&gt;rdbuf&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="337886af07434e288cee9947b9348ca6b714566f" translate="yes" xml:space="preserve">
          <source>swaps with another valarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f572e1cfd404560e7420e0be7ddc30aa56932f3e" translate="yes" xml:space="preserve">
          <source>swaps with another variant</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01ba7992f85de477e8e630428eb5ed14769f9155" translate="yes" xml:space="preserve">
          <source>switch</source>
          <target state="translated">switch</target>
        </trans-unit>
        <trans-unit id="a5788b30c0048567ebb31bde44a772c814958a84" translate="yes" xml:space="preserve">
          <source>switch statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31a970df8ca29f9e7e46fd9794aa77db8cda36c8" translate="yes" xml:space="preserve">
          <source>switches a file stream between wide character I/O and narrow character I/O</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb300c43a77badc097c3e396ef6181c975e16cbe" translate="yes" xml:space="preserve">
          <source>switches between textual and numeric representation of booleans</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="247175b14de46873cbab86c9cb13396c410e3309" translate="yes" xml:space="preserve">
          <source>sx&amp;radic;2 &amp;pi;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbdd67cccd954b26841bfbaeffd4a5db21b28743" translate="yes" xml:space="preserve">
          <source>symbolic link</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bef0155e10e6f66edd47a483578e4531881bdc75" translate="yes" xml:space="preserve">
          <source>symlink_status of the file designated by this directory entry</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b387ced110858dcbcda36edb044dc18f91a0894" translate="yes" xml:space="preserve">
          <source>sync</source>
          <target state="translated">sync</target>
        </trans-unit>
        <trans-unit id="24dfafc0ed08e2bedefafc32929ebe604b4773af" translate="yes" xml:space="preserve">
          <source>sync stream buffer to exchange contents with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5af7d58e10b170ce6a1081c602b41b07be73ce5" translate="yes" xml:space="preserve">
          <source>sync_with_stdio</source>
          <target state="translated">sync_with_stdio</target>
        </trans-unit>
        <trans-unit id="e39e815cecbe36daaaa5ca750adc365a5c0b5527" translate="yes" xml:space="preserve">
          <source>synchronization state before the call to the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dd9295ddfe8faa449053a19aa1592910572f6b7" translate="yes" xml:space="preserve">
          <source>synchronize-with</source>
          <target state="translated">synchronize-with</target>
        </trans-unit>
        <trans-unit id="0a975f6959933d4d37a975ab8c0af40fba1fc194" translate="yes" xml:space="preserve">
          <source>synchronized output device wrapper</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1d41f99a855e14816b60d971a06da2341170522" translate="yes" xml:space="preserve">
          <source>synchronized output stream wrapper</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0009694ccc5fe1eac724c97830d621907c6374ed" translate="yes" xml:space="preserve">
          <source>synchronized-with</source>
          <target state="translated">synchronized-with</target>
        </trans-unit>
        <trans-unit id="dea673d36ac685cedf9355831c4df0f37bfb519f" translate="yes" xml:space="preserve">
          <source>synchronized_pool_resource</source>
          <target state="translated">synchronized_pool_resource</target>
        </trans-unit>
        <trans-unit id="a9f741f49e62a0cd0bc1daa043b80426e35c3e21" translate="yes" xml:space="preserve">
          <source>synchronizes an output stream with the actual file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eb1a96e0471b66cc70430cf1a786bee9871eeea" translate="yes" xml:space="preserve">
          <source>synchronizes the buffers with the associated character sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e442784bb5c3234096cd401f769a6a7b2aecd19d" translate="yes" xml:space="preserve">
          <source>synchronizes with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7beea6aeb9dbf7d5e26632bf5ba07a432e4f86f9" translate="yes" xml:space="preserve">
          <source>synchronizes with the underlying storage device</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="171fc527c94a35f1c0ec7f329136c331d7cb3b7c" translate="yes" xml:space="preserve">
          <source>synchronizes-with</source>
          <target state="translated">synchronizes-with</target>
        </trans-unit>
        <trans-unit id="8729d909d8bff6259b744902aa4a045117b346ed" translate="yes" xml:space="preserve">
          <source>syncstream</source>
          <target state="translated">syncstream</target>
        </trans-unit>
        <trans-unit id="5262cc2063758bd10838680666281bfee43e2f16" translate="yes" xml:space="preserve">
          <source>synonym of &lt;code&gt;Od&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="343006be5ed1ee66df3a7846ab7a6004acff5d9f" translate="yes" xml:space="preserve">
          <source>synonym of &lt;code&gt;a&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13b40e00a3b25ce3317f26b62df514a927da5276" translate="yes" xml:space="preserve">
          <source>synonym of &lt;code&gt;b&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e5ac08a7bbc5b663171d5dbcf52e63c62dcb84c" translate="yes" xml:space="preserve">
          <source>synonym of &lt;code&gt;d&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17b27bce79a058897a5233a349e16641aca8c658" translate="yes" xml:space="preserve">
          <source>syntax described above, library functions that are defined to accept &quot;detected format&quot; accept path names in both formats: a detected format argument is taken to be in the generic format if and only if it matches the generic format but is not acceptable to the operating system as a native path. On those OS where native format differs between pathnames of directories and pathnames of files, a generic pathname is treated as a directory path if it ends on a directory separator and a regular file otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2c82b6ef5b6ffc2393042e783bf22c81584fde3" translate="yes" xml:space="preserve">
          <source>syntax that is different from the portable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d1bd5d24b6fc5dc31fa0b0b0dc7f9ac35398aeb" translate="yes" xml:space="preserve">
          <source>syntax_option_type</source>
          <target state="translated">syntax_option_type</target>
        </trans-unit>
        <trans-unit id="7dcc49a78fdadc3e689b7c54704552b571d7c6d2" translate="yes" xml:space="preserve">
          <source>sys_info</source>
          <target state="translated">sys_info</target>
        </trans-unit>
        <trans-unit id="317f1e761f2faa8da781a4762b9dcc2c5cad209a" translate="yes" xml:space="preserve">
          <source>system</source>
          <target state="translated">system</target>
        </trans-unit>
        <trans-unit id="e613365c69e0709bec2c03c4b1c968f5c1427234" translate="yes" xml:space="preserve">
          <source>system clock time point to convert</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73c0ec86702b474e81ba3b3362afff070528b152" translate="yes" xml:space="preserve">
          <source>system wide:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5324511e707c8494793aae32350e2567b29bb98" translate="yes" xml:space="preserve">
          <source>system-specific locale identifier. Can be &lt;code&gt;&quot;&quot;&lt;/code&gt; for the user-preferred locale or &lt;code&gt;&quot;C&quot;&lt;/code&gt; for the minimal locale</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1257248cecbfcaf4bbabc4378afb4ebcf5075d1" translate="yes" xml:space="preserve">
          <source>system_category</source>
          <target state="translated">system_category</target>
        </trans-unit>
        <trans-unit id="43cd8002bfda8c140780adf992f1c0f44dee155b" translate="yes" xml:space="preserve">
          <source>system_clock</source>
          <target state="translated">system_clock</target>
        </trans-unit>
        <trans-unit id="d1bb6e29f92ca41d05b11eccf3087bc1e0e6d9a5" translate="yes" xml:space="preserve">
          <source>system_error</source>
          <target state="translated">system_error</target>
        </trans-unit>
        <trans-unit id="c57c8e6d6a0517959598de2c08de5cf8daa440ce" translate="yes" xml:space="preserve">
          <source>sz</source>
          <target state="translated">sz</target>
        </trans-unit>
        <trans-unit id="8efd86fb78a56a5145ed7739dcb00c78581c5375" translate="yes" xml:space="preserve">
          <source>t</source>
          <target state="translated">t</target>
        </trans-unit>
        <trans-unit id="990e53e902400b7161e1030ee92ef861b18ad96e" translate="yes" xml:space="preserve">
          <source>t, u</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8868f3789c606dce6f51424af2fe37818737c78c" translate="yes" xml:space="preserve">
          <source>tab (&lt;code&gt;\t&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3ee137d4f22eb06ed1351d644f3674592c90836" translate="yes" xml:space="preserve">
          <source>table</source>
          <target state="translated">table</target>
        </trans-unit>
        <trans-unit id="5e9b60f69165f32f8930843ca718e10fdee30c52" translate="yes" xml:space="preserve">
          <source>tag</source>
          <target state="translated">tag</target>
        </trans-unit>
        <trans-unit id="d1fa337eb13df7404a6948f07ff3829e8eabeaec" translate="yes" xml:space="preserve">
          <source>tag class indicating the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deb120685185ac588f3b30b4438dc7b4eb20b492" translate="yes" xml:space="preserve">
          <source>tag constants used to specify locking strategy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d164361a17c3fb3033e1f01474fe260a5ccac1a" translate="yes" xml:space="preserve">
          <source>tag parameter used to select constructors with different locking strategies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da779724c3cfff723e0eb9bfe185ce9fc35d0d49" translate="yes" xml:space="preserve">
          <source>tag parameter used to select non-locking version of the constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="848e2770562fe30f08850948a82e98ea12cdcad0" translate="yes" xml:space="preserve">
          <source>tag type used to identify destroying-delete overloads of operator delete</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02616b3d617b495a779770898acc170e2cb49b30" translate="yes" xml:space="preserve">
          <source>tag type used to select allocator-aware constructor overloads</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31f580d15fe4a931afb729c555a3aacf59abbcf5" translate="yes" xml:space="preserve">
          <source>tag type used to select an non-throwing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc9e9b219c85456192e10191380983c23ed9db82" translate="yes" xml:space="preserve">
          <source>tag type used to select correct function overload for piecewise construction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f2b6e3eea234220c798680aee098377dab178c5" translate="yes" xml:space="preserve">
          <source>tag type used to specify locking strategy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5c1cb8e2891cd5e8f687a543c93062c4aeaafa1" translate="yes" xml:space="preserve">
          <source>tags to alter behavior of the standard codecvt facets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61044301ef52864d9d853ed299e057b36fbb62fc" translate="yes" xml:space="preserve">
          <source>tai_clock</source>
          <target state="translated">tai_clock</target>
        </trans-unit>
        <trans-unit id="89e378ef13da0477285fe0215d062cb1eb5ab0fa" translate="yes" xml:space="preserve">
          <source>take_viewview::take</source>
          <target state="translated">take_viewview::take</target>
        </trans-unit>
        <trans-unit id="b7d39258b3016a2b17c8e6ee41d6eb2d08237dd6" translate="yes" xml:space="preserve">
          <source>taking address of incomplete type that overloads address-of was undefined behavior</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c839b01dda369ddb3cd350804d6cbbe82e00c73e" translate="yes" xml:space="preserve">
          <source>tan(std::complex)</source>
          <target state="translated">tan(std::complex)</target>
        </trans-unit>
        <trans-unit id="527801329a84a0b46698b77ef977bc9882a84ff3" translate="yes" xml:space="preserve">
          <source>tan(std::valarray)</source>
          <target state="translated">tan(std::valarray)</target>
        </trans-unit>
        <trans-unit id="c5aed2a3170e20a3c835dd39f31785111354cf04" translate="yes" xml:space="preserve">
          <source>tanh(std::complex)</source>
          <target state="translated">tanh(std::complex)</target>
        </trans-unit>
        <trans-unit id="eaf271588e726a0805cadb733f69e6146e195fd4" translate="yes" xml:space="preserve">
          <source>tanh(std::valarray)</source>
          <target state="translated">tanh(std::valarray)</target>
        </trans-unit>
        <trans-unit id="b57e89cb37d54bba593dd3acaeccc48a02978165" translate="yes" xml:space="preserve">
          <source>tanhtanhftanhl</source>
          <target state="translated">tanhtanhftanhl</target>
        </trans-unit>
        <trans-unit id="bfd9b112ebdfe2d1d52a5fdffb38cca83b52c9b9" translate="yes" xml:space="preserve">
          <source>tantanftanl</source>
          <target state="translated">tantanftanl</target>
        </trans-unit>
        <trans-unit id="0e8a3ad980ec179856012b7eecf4327e99cd44cd" translate="yes" xml:space="preserve">
          <source>target</source>
          <target state="translated">target</target>
        </trans-unit>
        <trans-unit id="5cf7c43d75a41c0f035587199f6ed8627a7eee7a" translate="yes" xml:space="preserve">
          <source>target &lt;code&gt;any&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e7ea5d578e98283b7d02b4f68dfb55a95931479" translate="yes" xml:space="preserve">
          <source>target constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b590305c14926b3b4bcc3e76d5c4026e2bd0f329" translate="yes" xml:space="preserve">
          <source>target path for the move/rename operation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a61bc9865def95bc1eb2c31cf124d54a3ae64974" translate="yes" xml:space="preserve">
          <source>target type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b152960220089efb9dfd04267b0ec6030b08b8cc" translate="yes" xml:space="preserve">
          <source>target_type</source>
          <target state="translated">target_type</target>
        </trans-unit>
        <trans-unit id="3e0e9d16eef20f33735bea2a576c45728b2ad8f9" translate="yes" xml:space="preserve">
          <source>tbl</source>
          <target state="translated">tbl</target>
        </trans-unit>
        <trans-unit id="600f6c1246eea12f8c90a4c8b915daa455f2fc29" translate="yes" xml:space="preserve">
          <source>tellg</source>
          <target state="translated">tellg</target>
        </trans-unit>
        <trans-unit id="0d33446e153194a92e970e97c7519d5d8a437833" translate="yes" xml:space="preserve">
          <source>tellp</source>
          <target state="translated">tellp</target>
        </trans-unit>
        <trans-unit id="5509aea2c363bac162edd0c77eaff0e2772cf8a1" translate="yes" xml:space="preserve">
          <source>temp_directory_path</source>
          <target state="translated">temp_directory_path</target>
        </trans-unit>
        <trans-unit id="3226ecbe650213a49cd03ae67140750e4f340083" translate="yes" xml:space="preserve">
          <source>template</source>
          <target state="translated">template</target>
        </trans-unit>
        <trans-unit id="130f87a0322d9a70d3c436f72ea680cce47693d9" translate="yes" xml:space="preserve">
          <source>template &amp;lt;class U&amp;gt; using rebind</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16bc6b6b4758f55b9be8587d96f9ab4464debe9a" translate="yes" xml:space="preserve">
          <source>template argument deduction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2ad122dcf695d5c1b9266941cb5565412b1f7db" translate="yes" xml:space="preserve">
          <source>template definition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f02b38d4820d54f4494d798f90be23a8b25a62c" translate="yes" xml:space="preserve">
          <source>template instantiation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bd32cb877fd5cfe3c171f8e28532a6880669ec9" translate="yes" xml:space="preserve">
          <source>template name with template arguments (optionally &lt;a href=&quot;name#Qualified_identifiers&quot;&gt;qualified&lt;/a&gt;, optionally using &lt;a href=&quot;dependent_name&quot;&gt;template disambiguator&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9698e0c481f535c8c2719b3d45782c39ffc0542" translate="yes" xml:space="preserve">
          <source>template name without template arguments (optionally &lt;a href=&quot;name#Qualified_identifiers&quot;&gt;qualified&lt;/a&gt;): see &lt;a href=&quot;deduction_guide&quot;&gt;class template argument deduction&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2853cbdbc971502a3422ef579fb69b6044e7c70" translate="yes" xml:space="preserve">
          <source>template parameter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e554aad8a12acf76237edfab281a413261d1eb6a" translate="yes" xml:space="preserve">
          <source>template parameter could not be used in non-type arg expressions other than id-expressions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63e3daa1734c3b4e76f5a1da86a2f18aff9da80f" translate="yes" xml:space="preserve">
          <source>template parameter object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3814aff1071c289f3d8574f2dc980072f35f91da" translate="yes" xml:space="preserve">
          <source>template parameters of &lt;code&gt;Fi&lt;/code&gt; are the template parameters of &lt;code&gt;C&lt;/code&gt; followed (if &lt;code&gt;Ci&lt;/code&gt; is a constructor template) by the template parameters of &lt;code&gt;Ci&lt;/code&gt; (default template arguments are included too)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1b9b6e49a93b73407320f658bb224e251baaae4" translate="yes" xml:space="preserve">
          <source>template&amp;lt; class U &amp;gt; using rebind</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5ec8b037a724a1091982dcf5b3fb224c5f4f0a9" translate="yes" xml:space="preserve">
          <source>template-1 is at least as specialized as template-2 for all types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1c5384f84d2012964d170ec6d961af39f365534" translate="yes" xml:space="preserve">
          <source>template-1 is more specialized than template-2 for some types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee0612ac66eb64c6d87a5c0edd6dafc0cbf3aa48" translate="yes" xml:space="preserve">
          <source>template-2 is not more specialized than template-1 for any types OR is not at least as specialized for any types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05d788a5e373a30e855c6a95960ef8a804cad04e" translate="yes" xml:space="preserve">
          <source>template-id</source>
          <target state="translated">template-id</target>
        </trans-unit>
        <trans-unit id="9fbc971e72bcd819ef43f67a89e21ae99537ee9e" translate="yes" xml:space="preserve">
          <source>template-name</source>
          <target state="translated">template-name</target>
        </trans-unit>
        <trans-unit id="e8e2cec515a867adff5793b45d991de9afef775d" translate="yes" xml:space="preserve">
          <source>template-name&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">template-name&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9021dc99d61d7fba2dd44f5434ca53278d244ac5" translate="yes" xml:space="preserve">
          <source>template-name&lt;code&gt;( &lt;/code&gt;expressions(optional)&lt;code&gt;) &lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd59b4679edd4c1aeec85be99af4eb46cbbe77de" translate="yes" xml:space="preserve">
          <source>template-name&lt;code&gt;{ &lt;/code&gt;expressions(optional)&lt;code&gt;} &lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b66765d172c2b6b1f26916232b5a53fa5e35713" translate="yes" xml:space="preserve">
          <source>template-parameter-list</source>
          <target state="translated">template-parameter-list</target>
        </trans-unit>
        <trans-unit id="7981a4e7e9bdc02180a3c3d1a6b2adf0ba424b1c" translate="yes" xml:space="preserve">
          <source>templates</source>
          <target state="translated">templates</target>
        </trans-unit>
        <trans-unit id="e261fbd24a6484c58a56a1cf2750b8e0ddf8fada" translate="yes" xml:space="preserve">
          <source>terminate</source>
          <target state="translated">terminate</target>
        </trans-unit>
        <trans-unit id="ea25cc4ff44ea21a2d5c15497bf62de46c5286fb" translate="yes" xml:space="preserve">
          <source>terminate_handler</source>
          <target state="translated">terminate_handler</target>
        </trans-unit>
        <trans-unit id="709ff4977a3ae52d3d552b03d3fd95ebbc5059bd" translate="yes" xml:space="preserve">
          <source>termination request, sent to the program</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25c39fdf82c85896cff7a22b0b6f55e28bc03808" translate="yes" xml:space="preserve">
          <source>termination, is returned. In other cases implementation-defined status value is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4326ca988e5392fb540ae503a156070370642bd" translate="yes" xml:space="preserve">
          <source>ternary conditional</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a94a8fe5ccb19ba61c4c0873d391e987982fbbd3" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="translated">test</target>
        </trans-unit>
        <trans-unit id="de0a00662e0d91262a84e4196fd64d0a9d6a0ccb" translate="yes" xml:space="preserve">
          <source>test whether a class represents an execution policy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc1d72d80770cea49a1f114fc3688d4930a6879e" translate="yes" xml:space="preserve">
          <source>test_and_set</source>
          <target state="translated">test_and_set</target>
        </trans-unit>
        <trans-unit id="02c1aaff0a677a39444dfce910c175b5c8321742" translate="yes" xml:space="preserve">
          <source>tests if both &lt;code&gt;istreambuf_iterator&lt;/code&gt;s are end-of-stream or if both are valid</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="377eb122c92b8b4515217b042d297c7c1ec35cdf" translate="yes" xml:space="preserve">
          <source>tests if output failed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="214fd9694cc228172213052dd12c8b7b669bf084" translate="yes" xml:space="preserve">
          <source>tests if the facet encodes an identity conversion for all valid argument values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c61682ce9a0adb3967ede46056e2890456bb1f35" translate="yes" xml:space="preserve">
          <source>tests if the lhs compares greater or equal than rhs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc9676a357f14487c5779520d32b42c044286740" translate="yes" xml:space="preserve">
          <source>tests if the lhs compares greater than rhs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c57c3569f0763c3f26c18986fd6512f25f84e34" translate="yes" xml:space="preserve">
          <source>tests if the lhs compares less or equal than rhs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6034bb67ecf3b4f17f1521f8bc9d08f1c85e930d" translate="yes" xml:space="preserve">
          <source>tests if the lhs compares less than rhs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67ad5a389a3eabe2e43251c35856f3bebba4e702" translate="yes" xml:space="preserve">
          <source>tests if the two arguments compare equal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b90bd8a0d4680ffdef1183c3ede079041c370116" translate="yes" xml:space="preserve">
          <source>tests if the two arguments do not compare equal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e6f974ad3d0034920a507c8a6218f9f13e5d367" translate="yes" xml:space="preserve">
          <source>tests whether the lock owns its associated mutex</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f8e41f1f00fb8373b980fd1613658225927436c" translate="yes" xml:space="preserve">
          <source>text stream</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f436e5daad5543b213f8189613f2d5d22fcdd817" translate="yes" xml:space="preserve">
          <source>text that could be used to explain the rationale for deprecation and/or to suggest a replacing entity</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc945f6541fab65d51684f79e37ebb9d4c40c558" translate="yes" xml:space="preserve">
          <source>tgammatgammaftgammal</source>
          <target state="translated">tgammatgammaftgammal</target>
        </trans-unit>
        <trans-unit id="46088f7a9fe9ee73cd050dbff2898093be1eba46" translate="yes" xml:space="preserve">
          <source>th captured &lt;a href=&quot;http://en.cppreference.com/w/cpp/regex/ecmascript#Sub-expressions&quot;&gt;marked subexpression&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbb1cd639dcfb6e4c9d7bc0fdc803459f041ec8b" translate="yes" xml:space="preserve">
          <source>th equivalent key group. Proprotional to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe7f6908d818598bf01eb648a783e140412d5b35" translate="yes" xml:space="preserve">
          <source>th sub-match is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="713c66a64f8fd0ae26fafcb73d2025ed883895cb" translate="yes" xml:space="preserve">
          <source>than (i.e. greater or equal to) &lt;code&gt;value&lt;/code&gt;, or &lt;code&gt;last&lt;/code&gt; if no such element is found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00fa43c2709aecb964955dc890864e34da296edd" translate="yes" xml:space="preserve">
          <source>than (i.e. is ordered</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c7c11422ec301ef94d8a86606f3e8d04d7f523c" translate="yes" xml:space="preserve">
          <source>than (i.e. is ordered before) the second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4acee181658460a828dc1c21f8c20f6140cb8595" translate="yes" xml:space="preserve">
          <source>than &lt;code&gt;*b&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b32f11bfdc06fa1999976e386e5b641fc9c2797c" translate="yes" xml:space="preserve">
          <source>than &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="028edae1234efa3e20a5adf3862fe549f5fd11cb" translate="yes" xml:space="preserve">
          <source>than &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c8499a94b335359ed6e26768d49311f5818cfca" translate="yes" xml:space="preserve">
          <source>than &lt;code&gt;key&lt;/code&gt; and another pointing to the first element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe39e96055caf604944bbb1df841039febe8708c" translate="yes" xml:space="preserve">
          <source>than &lt;code&gt;key&lt;/code&gt; and the second pointing to the first element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e49e2a889c3f7b7f1c22acfaaaf0533a13933971" translate="yes" xml:space="preserve">
          <source>than &lt;code&gt;key&lt;/code&gt;, past-the-end (see &lt;code&gt;&lt;a href=&quot;end&quot;&gt;end()&lt;/a&gt;&lt;/code&gt;) iterator is returned as the first element. Similarly if there are no elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49760d44a5fe9ef2599407bbebe50e285fd13d1a" translate="yes" xml:space="preserve">
          <source>than &lt;code&gt;key&lt;/code&gt;, past-the-end iterator is returned as the second element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f440a52d9fc34d3d995afefd1639b87099f20664" translate="yes" xml:space="preserve">
          <source>than &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abd6107c59ef574d769aa585a1d20c0b6c84d059" translate="yes" xml:space="preserve">
          <source>than &lt;code&gt;key&lt;/code&gt;. Alternatively, the first iterator may be obtained with &lt;code&gt;&lt;a href=&quot;lower_bound&quot;&gt;lower_bound()&lt;/a&gt;&lt;/code&gt;, and the second with &lt;code&gt;&lt;a href=&quot;upper_bound&quot;&gt;upper_bound()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e94c51e132cf830ff2254133583b645fa8988f51" translate="yes" xml:space="preserve">
          <source>than &lt;code&gt;key&lt;/code&gt;. If no such element is found, a past-the-end iterator (see &lt;code&gt;&lt;a href=&quot;end&quot;&gt;end()&lt;/a&gt;&lt;/code&gt;) is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c95bcc59eae2db04001656cf4dd766cadc9437d8" translate="yes" xml:space="preserve">
          <source>than &lt;code&gt;key&lt;/code&gt;. If no such element is found, past-the-end (see &lt;code&gt;&lt;a href=&quot;end&quot;&gt;end()&lt;/a&gt;&lt;/code&gt;) iterator is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="586f3430743bdc3c8dc1600d5cfd2cf6779f44ae" translate="yes" xml:space="preserve">
          <source>than &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae13692a7d30a7d15145913f60c0021b64884039" translate="yes" xml:space="preserve">
          <source>than &lt;code&gt;v&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a57835d530dcb861a29aba5823e4fcc94dccd2a" translate="yes" xml:space="preserve">
          <source>than &lt;code&gt;value&lt;/code&gt; and another pointing to the first element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8342e8dd8ae9e54d632fa2209e26dcc0268cd3dd" translate="yes" xml:space="preserve">
          <source>than &lt;code&gt;value&lt;/code&gt; and the second pointing to the first element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87cff8adebf318204e7d800c0edfbf5498881aca" translate="yes" xml:space="preserve">
          <source>than &lt;code&gt;value&lt;/code&gt;, &lt;code&gt;last&lt;/code&gt; is returned as the first element. Similarly if there are no elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a28e98635500b750acf8033d0750e3df5f6eba7b" translate="yes" xml:space="preserve">
          <source>than &lt;code&gt;value&lt;/code&gt;, &lt;code&gt;last&lt;/code&gt; is returned as the second element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6bbd3b3bc7dcd09da33f27e3ab18cae37e7839a" translate="yes" xml:space="preserve">
          <source>than &lt;code&gt;value&lt;/code&gt;, or &lt;code&gt;last&lt;/code&gt; if no such element is found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfb80e509900a1e263cceea5a305dce4197d07f5" translate="yes" xml:space="preserve">
          <source>than &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25c36e45e440f6ac117a41e4c5282c1d02db7272" translate="yes" xml:space="preserve">
          <source>than &lt;code&gt;value&lt;/code&gt;. The first iterator may be alternatively obtained with &lt;code&gt;&lt;a href=&quot;lower_bound&quot;&gt;std::lower_bound()&lt;/a&gt;&lt;/code&gt;, the second - with &lt;code&gt;&lt;a href=&quot;upper_bound&quot;&gt;std::upper_bound()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="643a8634bc65077c55cfee24ea995e252aac69d9" translate="yes" xml:space="preserve">
          <source>than D2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d92199ac558e69e863a56427d7b93beb9069709b" translate="yes" xml:space="preserve">
          <source>than a certain value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2273ec147e3af76a32e6d7ce838dac0e67e7df81" translate="yes" xml:space="preserve">
          <source>than a pointer &lt;code&gt;q&lt;/code&gt;, then &lt;code&gt;p&amp;gt;=q&lt;/code&gt;, &lt;code&gt;p&amp;gt;q&lt;/code&gt;, &lt;code&gt;q&amp;lt;=p&lt;/code&gt;, and &lt;code&gt;q&amp;lt;p&lt;/code&gt; all yield &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;p&amp;lt;=q&lt;/code&gt;, &lt;code&gt;p&amp;lt;q&lt;/code&gt;, &lt;code&gt;q&amp;gt;=p&lt;/code&gt;, and &lt;code&gt;q&amp;gt;p&lt;/code&gt; all yield &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="903269f6a9861743056d1553db23a392ac65558d" translate="yes" xml:space="preserve">
          <source>than a standard conversion sequence &lt;code&gt;S2&lt;/code&gt; if</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78b88d6a1cb72d2ae73acc752292873e4895efe1" translate="yes" xml:space="preserve">
          <source>than a user-defined conversion sequence &lt;code&gt;U2&lt;/code&gt; if they call the same constructor/user-defined conversion function or initialize the same class with aggregate-initialization, and in either case the second standard conversion sequence in &lt;code&gt;U1&lt;/code&gt; is better than the second standard conversion sequence in &lt;code&gt;U2&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5599b91fc5f11e87ec143b6c236be86eeaf6f503" translate="yes" xml:space="preserve">
          <source>than a user-defined conversion sequence or an ellipsis conversion sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5ba644aeca736eea3b1566e4e70da83610c9a35" translate="yes" xml:space="preserve">
          <source>than an &lt;a href=&quot;variadic_arguments&quot;&gt;ellipsis conversion&lt;/a&gt; sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23bb9a194ce423d661bf2fdea360ec9efd13530c" translate="yes" xml:space="preserve">
          <source>than any non-empty range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c757520efdd95c0d29e609301d52c67c7d59ab2" translate="yes" xml:space="preserve">
          <source>than data2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3cae98dd45b18c134035b7c854f9ab3c075936c" translate="yes" xml:space="preserve">
          <source>than list-initialization sequence &lt;code&gt;L2&lt;/code&gt; if &lt;code&gt;L1&lt;/code&gt; initializes an &lt;code&gt;&lt;a href=&quot;../utility/initializer_list&quot;&gt;std::initializer_list&lt;/a&gt;&lt;/code&gt; parameter, while &lt;code&gt;L2&lt;/code&gt; does not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a73ccb2c4e5dac7bed0cc47ccba15d49db6d44f3" translate="yes" xml:space="preserve">
          <source>than list-initialization sequence &lt;code&gt;L2&lt;/code&gt; if the corresponding parameters are references to arrays, and L1 converts to type &quot;array of N1 T,&quot; L2 converts to type &quot;array of N2 T&quot;, and N1 is smaller than N2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f27e9fad05e2a42d02ace28ac12ef77c04b21e3" translate="yes" xml:space="preserve">
          <source>than or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35689882e3311c9dc01dc96a527bacb30486b45a" translate="yes" xml:space="preserve">
          <source>than the contents of &lt;code&gt;rhs&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3580ae7a1202164261839ea30788515bf7fe084" translate="yes" xml:space="preserve">
          <source>than the corresponding implicit conversion for that argument of F2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbd1f18aa4f63dedde67df89e4caa8aa50abc5eb" translate="yes" xml:space="preserve">
          <source>than the given key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="850208f99772eb9d171c506335a7e08c9d06a1f0" translate="yes" xml:space="preserve">
          <source>than the given value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1df9136e137b038b95a8bc44184b263b6081eeb3" translate="yes" xml:space="preserve">
          <source>than the implicit conversions for all arguments of F2, and.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31bbec0fb464dd87ac3c922a74de16ce5e08f07b" translate="yes" xml:space="preserve">
          <source>than the other character sequence, zero if the both underlying character sequences are equal, greater than zero if this sub_match is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b97fab2e885b2a6c62c84ff598f77653b323119" translate="yes" xml:space="preserve">
          <source>than the other character sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="259d25ad59115493ac9f001f49a15d870293e1a7" translate="yes" xml:space="preserve">
          <source>than the other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a5c7cf162dd7192f32ccc12e98bc0460d63e62c" translate="yes" xml:space="preserve">
          <source>than the second</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbbf7c2e21d27e8878703ae28d144fdd70a2d367" translate="yes" xml:space="preserve">
          <source>than the second and zero if the arguments are equal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f288ee94da73cb635d94f3648bf4bc33ed06d838" translate="yes" xml:space="preserve">
          <source>than the second and zero if the arguments are equal. &lt;code&gt;key&lt;/code&gt; is passed as the first argument, an element from the array as the second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06095571d57f5ea42e137806eb5eb8b4af97693b" translate="yes" xml:space="preserve">
          <source>than the second range &lt;code&gt;[first2, last2)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cd67ae1b18508276288afab6f89e9c423209937" translate="yes" xml:space="preserve">
          <source>than the second,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b79f5f2a0218659098b15944cd2efd2b20db3538" translate="yes" xml:space="preserve">
          <source>than the second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a880aa2d4ce0b0e8a63e6ad2a17a93c892855687" translate="yes" xml:space="preserve">
          <source>than the standard conversion sequence from the return type of F2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fce7b2e217c8dc7d542e805119901b976932b315" translate="yes" xml:space="preserve">
          <source>that an object &lt;code&gt;t&lt;/code&gt; may be &quot;moved from&quot;, i.e. allowing the efficient transfer of resources from &lt;code&gt;t&lt;/code&gt; to another object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4aa8d0955805e262518d7f0b0b76c1f81c62c3a" translate="yes" xml:space="preserve">
          <source>that are then divided into blocks of uniform size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebbd513f9998fc8c1faa2d3b55e510fbccc71c27" translate="yes" xml:space="preserve">
          <source>that has.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="054bc76fbf995827062117d1b1c0b40693605e93" translate="yes" xml:space="preserve">
          <source>that is not a &lt;a href=&quot;bit_field&quot;&gt;bit field&lt;/a&gt;and not marked &lt;code&gt;[[&lt;a href=&quot;attributes/no_unique_address&quot;&gt;no_unique_address&lt;/a&gt;]]&lt;/code&gt;(since C++20) is required to be non-zero (the size of a base class subobject may be zero even without &lt;code&gt;[[no_unique_address]]&lt;/code&gt;(since C++20): see &lt;a href=&quot;ebo&quot;&gt;empty base optimization&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bb221a8ec783767cfb199b7ecc5e4b18073c8e6" translate="yes" xml:space="preserve">
          <source>that is not a member of the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f86b9e9b4307c540fa6a5d0b8b8770d4dde240b" translate="yes" xml:space="preserve">
          <source>that it will add to the lookup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5cc63ab0939c215c87075e8069ae1ae1b02393c" translate="yes" xml:space="preserve">
          <source>that names the inline namespace is implicitly inserted in the enclosing namespace (similar to the implicit using-directive for the unnamed namespace)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="073d1a5b878a024db71d51202282c6cf35c0d596" translate="yes" xml:space="preserve">
          <source>that refers to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01a981c37412583a9522d7030b8243c87933ad74" translate="yes" xml:space="preserve">
          <source>that serves request for different block sizes. Each pool manages a collection of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f080b716e6069bc12486c484b0081982f395284" translate="yes" xml:space="preserve">
          <source>that specifies the size of the argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="878ea2d8feea45be6a3c7a74f4a9e4c4f6fc1093" translate="yes" xml:space="preserve">
          <source>that specifies the size of the receiving argument, that is, the actual destination type. This affects the conversion accuracy and overflow rules. The default destination type is different for each conversion type (see table below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd57ce683be0ee86adaac28c95607ebc2e34764a" translate="yes" xml:space="preserve">
          <source>that uses an expression that is non-modifying for some constant lvalue operand also implicitly requires additional variations of that expression that accept a non-constant lvalue or (possibly constant) rvalue for the given operand unless such an expression variation is explicitly required with differing semantics. These</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbccdf2efb33b52e6c9d0a14dd70b2d415fbea6e" translate="yes" xml:space="preserve">
          <source>the</source>
          <target state="translated">the</target>
        </trans-unit>
        <trans-unit id="1cf0cb5a00b950ecf8c96a12970d8ab18a57c151" translate="yes" xml:space="preserve">
          <source>the 16-bit character to convert</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49ea3c2c802304943cdb63fd456a5f3c7bc0d902" translate="yes" xml:space="preserve">
          <source>the 32-bit character to convert</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48f195f4b49ac71d1c67353e004f58e15b1dffb0" translate="yes" xml:space="preserve">
          <source>the &lt;a href=&quot;../named_req/lockable&quot;&gt;Lockable&lt;/a&gt; objects to lock</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="752a097bfd69b329a87559e0d49ffa8d8ae0139b" translate="yes" xml:space="preserve">
          <source>the &lt;a href=&quot;auto&quot;&gt;auto specifier&lt;/a&gt; cannot be used in a non-static data member declaration (although it is allowed for static data members that are &lt;a href=&quot;static#Constant_static_members&quot;&gt;initialized in the class definition&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca6476221a55f7a0e2c7c3749d5d3f4f219affb4" translate="yes" xml:space="preserve">
          <source>the &lt;a href=&quot;consteval&quot;&gt;&lt;code&gt;consteval&lt;/code&gt;&lt;/a&gt; specifier, only allowed in function and function template declarations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="837a365361d21a052599754a8ef6f5e1cd38f8a2" translate="yes" xml:space="preserve">
          <source>the &lt;a href=&quot;constexpr&quot;&gt;&lt;code&gt;constexpr&lt;/code&gt;&lt;/a&gt; specifier, only allowed in variable definitions, function and function template declarations, and the declaration of static data members of literal type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="641bd7a14770ff3c44b2073e6034cf4026e06402" translate="yes" xml:space="preserve">
          <source>the &lt;a href=&quot;dependent_name#Lookup_rules&quot;&gt;dependent name lookup&lt;/a&gt; from the point of template instantiation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6fe604f460b957f05bb0dc9bed4759429ebcdb8" translate="yes" xml:space="preserve">
          <source>the &lt;a href=&quot;eval_order&quot;&gt;full-expression&lt;/a&gt; of its initialization, including all implicit conversions, constructors calls, etc, must be a &lt;a href=&quot;constant_expression&quot;&gt;constant expression&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddb020af1d0011679c7707242ff70ef7a6d992cd" translate="yes" xml:space="preserve">
          <source>the &lt;a href=&quot;friend&quot;&gt;&lt;code&gt;friend&lt;/code&gt;&lt;/a&gt; specifier, allowed in class and function declarations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dbeb387a54e59f697dc73a74fbeab974c89b642" translate="yes" xml:space="preserve">
          <source>the &lt;a href=&quot;inline&quot;&gt;&lt;code&gt;inline&lt;/code&gt;&lt;/a&gt; specifier is also allowed on variable declarations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dcfde3cc6ac1aab112171d0705920f67ada034b" translate="yes" xml:space="preserve">
          <source>the &lt;a href=&quot;overloaded_address&quot;&gt;address of a non-template function&lt;/a&gt; in an overload set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d1beff1c479277b656b0fbaa9bb7cd2f9ce1661" translate="yes" xml:space="preserve">
          <source>the &lt;a href=&quot;this&quot;&gt;&lt;code&gt;this&lt;/code&gt;&lt;/a&gt; pointer, except in a &lt;code&gt;constexpr&lt;/code&gt; function or a &lt;code&gt;constexpr&lt;/code&gt; constructor that is being evaluated as part of the expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55c46a43088bdcf75364ee115297d9d00e417fe5" translate="yes" xml:space="preserve">
          <source>the &lt;a href=&quot;this&quot;&gt;&lt;code&gt;this&lt;/code&gt;&lt;/a&gt; pointer;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5bf02532ed164bb0c995dca1367e3d9ab872a78" translate="yes" xml:space="preserve">
          <source>the &lt;a href=&quot;typedef&quot;&gt;&lt;code&gt;typedef&lt;/code&gt;&lt;/a&gt; specifier. If present, the entire declaration is a &lt;a href=&quot;typedef&quot;&gt;typedef declaration&lt;/a&gt; and each declarator introduces a new type name, not an object or a function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="796001b0e3ec6e4062618c188d597120eec615f1" translate="yes" xml:space="preserve">
          <source>the &lt;code&gt;&lt;a href=&quot;../error/error_condition&quot;&gt;std::error_condition&lt;/a&gt;&lt;/code&gt; enumeration listing all standard &lt;a href=&quot;cerrno&quot;&gt;&lt;code&gt;&amp;lt;cerrno&amp;gt;&lt;/code&gt;&lt;/a&gt; macro constants</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52055035816393e1b6f7c77b4ccf7566a20e3fb8" translate="yes" xml:space="preserve">
          <source>the &lt;code&gt;&lt;a href=&quot;../shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../weak_ptr&quot;&gt;std::weak_ptr&lt;/a&gt;&lt;/code&gt; to be compared</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b42a3a081ca4663c450c2d6abde7a4afa9d3f00b" translate="yes" xml:space="preserve">
          <source>the &lt;code&gt;&lt;a href=&quot;basic_regex&quot;&gt;std::basic_regex&lt;/a&gt;&lt;/code&gt; that will be matched against the input sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a3e34bbc2e8446b78f7dc094f7925a52fbb5a55" translate="yes" xml:space="preserve">
          <source>the &lt;code&gt;&lt;a href=&quot;basic_regex&quot;&gt;std::regex&lt;/a&gt;&lt;/code&gt; that should be applied to the target character sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b13fa9ba7c769f14600bd7d72a042cfd9437b5ca" translate="yes" xml:space="preserve">
          <source>the &lt;code&gt;&lt;a href=&quot;error/error_condition&quot;&gt;std::error_condition&lt;/a&gt;&lt;/code&gt; enumeration listing all standard &lt;a href=&quot;header/cerrno&quot;&gt;&lt;code&gt;&amp;lt;cerrno&amp;gt;&lt;/code&gt;&lt;/a&gt; macro constants</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0844b7b4902b1407e404c1fc3e4f9b1c4ec51a6a" translate="yes" xml:space="preserve">
          <source>the &lt;code&gt;&lt;a href=&quot;error_condition&quot;&gt;std::error_condition&lt;/a&gt;&lt;/code&gt; enumeration listing all standard &lt;a href=&quot;../header/cerrno&quot;&gt;&lt;code&gt;&amp;lt;cerrno&amp;gt;&lt;/code&gt;&lt;/a&gt; macro constants</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="445eb2b5b5383d4d26f8fce0e579ad578bc9eca9" translate="yes" xml:space="preserve">
          <source>the &lt;code&gt;basic_ios&lt;/code&gt; object to exchange the state with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8774818df80501ba31f685b580313eaeda05da2" translate="yes" xml:space="preserve">
          <source>the &lt;code&gt;basic_ios&lt;/code&gt; object to transfer the state from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6196b4c7924673b66d38a52acca20b5f285e20f0" translate="yes" xml:space="preserve">
          <source>the &lt;code&gt;enum&lt;/code&gt; keyword must be used to refer to an &lt;a href=&quot;enum&quot;&gt;enumeration type&lt;/a&gt; (whether scoped or unscoped)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e74b9546ce3e5777b851db182f60e85cf8fcd08f" translate="yes" xml:space="preserve">
          <source>the &lt;code&gt;match_results&lt;/code&gt; to swap with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eaad06277d25c40b6473125648dba1afb7a676b" translate="yes" xml:space="preserve">
          <source>the &lt;code&gt;noexcept&lt;/code&gt; specification is ill-formed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ba9c73d180674b07c012d63919ea881aaae0c65" translate="yes" xml:space="preserve">
          <source>the &lt;code&gt;optional&lt;/code&gt; object to exchange the contents with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9717b77ba851a7817cba3ad7c84d04a91b8e3979" translate="yes" xml:space="preserve">
          <source>the &lt;code&gt;std::packaged_task&lt;/code&gt; to move from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f456f1d7fb780b801f9ecd00030e0e9df869dd4f" translate="yes" xml:space="preserve">
          <source>the &lt;code&gt;union&lt;/code&gt;class-key must be used to refer to a &lt;a href=&quot;union&quot;&gt;union&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8817f100d185417065712f931df4495b35fd7090" translate="yes" xml:space="preserve">
          <source>the C++ type system overview</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72293ea121ba4e2a5025fcad9526244f408ac64b" translate="yes" xml:space="preserve">
          <source>the IO stream error codes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71135a89d8a7a5be72c217b30823fc2fbb1e7081" translate="yes" xml:space="preserve">
          <source>the LC_CTYPE category, obtained from a call to &lt;code&gt;&lt;a href=&quot;wctype&quot;&gt;std::wctype&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f290dcde29d8c2696610a8d43c030bcd272c90e" translate="yes" xml:space="preserve">
          <source>the LC_CTYPE mapping, obtained from a call to &lt;code&gt;&lt;a href=&quot;wctrans&quot;&gt;std::wctrans&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b15e34691bef55babc5c694ed47a037fc13c3b9" translate="yes" xml:space="preserve">
          <source>the POD type of at least size &lt;code&gt;Len&lt;/code&gt; with alignment requirement &lt;code&gt;Align&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ddea6ef31c4d559a76fc3c0432c54cb30f8638f" translate="yes" xml:space="preserve">
          <source>the UTF-8 code unit to convert</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="212206d5aa405bf3089086eb3f6cae80a854f48f" translate="yes" xml:space="preserve">
          <source>the absolute numeric monetary value is required</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b6510bc571ff67f8a53ba8f9b65ce7ca336bda9" translate="yes" xml:space="preserve">
          <source>the alignment originally allocated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21db0b2626456cb559888aab962671cefb2867e7" translate="yes" xml:space="preserve">
          <source>the alignment to use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17cd817cef3f6d45af56c8d046ef7615e957377d" translate="yes" xml:space="preserve">
          <source>the allocator (type-erased);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08f5db1cd240c81cf59f61394b8d3797c6fd3a3d" translate="yes" xml:space="preserve">
          <source>the allocator to pass to the constructor of the member &lt;code&gt;std::basic_syncbuf&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="517961ecd2a752e21de11e74d4b07b77c9e2cdbe" translate="yes" xml:space="preserve">
          <source>the allocator to use for temporary storage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b345cf77f9aa26b9a006769c7e3cbe9608573526" translate="yes" xml:space="preserve">
          <source>the allocator to use when storing the task</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c5dab4b1eec911f3d5195f2f7d4da1c165fc538" translate="yes" xml:space="preserve">
          <source>the allocator to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7e4f0ee2a8e167c29a4d8cf2ebe8a6b3247b789" translate="yes" xml:space="preserve">
          <source>the argument for the arithmetic operation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48d86cbd9aafa8c6524d7aa17158ca8eb2dae0b3" translate="yes" xml:space="preserve">
          <source>the argument is outside the range in which the operation is mathematically defined (the description of &lt;a href=&quot;../math&quot;&gt;each function&lt;/a&gt; lists the required domain errors)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cec15b3bcd8fcec1941620b40b66c6b00db6ec6" translate="yes" xml:space="preserve">
          <source>the argument of the &lt;a href=&quot;delete&quot;&gt;delete-expression&lt;/a&gt; (&lt;code&gt;T&lt;/code&gt; is any object pointer type);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8e97950f390163e7697b50dd43a1f9489b76e07" translate="yes" xml:space="preserve">
          <source>the argument of the function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf3713bfaa50c15690bf47c08a5594e823a7678e" translate="yes" xml:space="preserve">
          <source>the argument of the function)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2336ee232a40b9ecba11f3c9be5153ba780ea68" translate="yes" xml:space="preserve">
          <source>the argument, a value of a floating-point or integral type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e5f26eaebde8a31bbbd68c032b9bef1e4129d5e" translate="yes" xml:space="preserve">
          <source>the arguments are copied and/or moved before invocation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="195c7d15d07d22fa81cfbcb72221eefda8001765" translate="yes" xml:space="preserve">
          <source>the arguments to compare: either both complex numbers or one complex and one scalar of matching type (&lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;long double&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a6ba2f5f7c040998b4fe8d14c22ce808fa141a7" translate="yes" xml:space="preserve">
          <source>the arguments to forward to the the constructor of &lt;code&gt;U&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2bb815f00c93b63bfe4fa2a9e9d34c2550cb9cd" translate="yes" xml:space="preserve">
          <source>the arguments to pass to T's constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b82fca0bf3141cc6f23fee7d75f0aeb408a5d66d" translate="yes" xml:space="preserve">
          <source>the arguments to pass to the constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf558dba5001350f1960e5946b365eb1afaaa949" translate="yes" xml:space="preserve">
          <source>the arguments: either both complex numbers or one complex and one scalar of matching type (&lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;long double&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46007ee0e699043b79dc69a5b313ecf8f1285a1b" translate="yes" xml:space="preserve">
          <source>the array bound cannot be deduced in a new expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5f5368a9a03f8de4fddf3478cbff611290f7e35" translate="yes" xml:space="preserve">
          <source>the array index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88b1f68ae41748017c3b04afe371d6b245f7eec6" translate="yes" xml:space="preserve">
          <source>the assignment operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77c0070626d140184bc416b10ca4e2ccde14a2ff" translate="yes" xml:space="preserve">
          <source>the assignment operator is deleted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="879ca92c4d7d25d56b71d5b66fae9ff1d92a4100" translate="yes" xml:space="preserve">
          <source>the associated allocator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6e1bbddec48a7fadb45a2e22400b74e0bbdf265" translate="yes" xml:space="preserve">
          <source>the associated stream buffer pointer (see &lt;a href=&quot;basic_ios/rdbuf&quot;&gt;&lt;code&gt;rdbuf()&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ede127f458a5b0f9ba53d17e5a668c8f32a1a999" translate="yes" xml:space="preserve">
          <source>the asynchronous task abandoned its shared state</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7488eef6a4f5081bb7bca81c811518c0b9dfd3e" translate="yes" xml:space="preserve">
          <source>the atomic store from the point of view of thread A, become</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99e50e8dbb41a4fcefe746614a6bf7a2c9dfe58d" translate="yes" xml:space="preserve">
          <source>the base class for all facet categories: each facet of any category is derived from this type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d631a7b866e7ec75314e75e14a39a5350cba8b8d" translate="yes" xml:space="preserve">
          <source>the basic_istream object from which to assign to &lt;code&gt;*this&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04c84bb122c8fe8b2ea9d18315560c145e76313d" translate="yes" xml:space="preserve">
          <source>the basic_ostream object from which to assign to &lt;code&gt;*this&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="532816d4491aa7a3f158f8e253d302ef5ca3e3fa" translate="yes" xml:space="preserve">
          <source>the beginning of a stream</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac7790c407a8a8a63224740ef6c91e0960b812e8" translate="yes" xml:space="preserve">
          <source>the beginning of the destination range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f4449309c236dff913a03b8ccb19689305b0995" translate="yes" xml:space="preserve">
          <source>the beginning of the destination range, may be equal to &lt;code&gt;first1&lt;/code&gt; or &lt;code&gt;first2&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96a28b30d03a0c1712ccb31b71515e74899f7ea0" translate="yes" xml:space="preserve">
          <source>the beginning of the destination range, may be equal to &lt;code&gt;first&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0670cf655a58d725fc4f4efcc68041c56a8e0ac" translate="yes" xml:space="preserve">
          <source>the beginning of the destination range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="832e3db402b1f75100661e89460f411f25ca4c32" translate="yes" xml:space="preserve">
          <source>the beginning of the destination range. The behavior is undefined if &lt;code&gt;d_first&lt;/code&gt; is within the range &lt;code&gt;[first, last)&lt;/code&gt;. In this case, &lt;code&gt;&lt;a href=&quot;move_backward&quot;&gt;std::move_backward&lt;/a&gt;&lt;/code&gt; may be used instead of &lt;a href=&quot;move#top&quot;&gt; std::move&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e56a5f7e59ad2710abf913c42b865f7cd48713f" translate="yes" xml:space="preserve">
          <source>the beginning of the destination range; may be equal to &lt;code&gt;first&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e92411bec1850ddc8a95a0be72014760f2fedef" translate="yes" xml:space="preserve">
          <source>the beginning of the first sorted range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ec26690d4cf3c80eefb4673380fe17c6caa6680" translate="yes" xml:space="preserve">
          <source>the beginning of the original range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="483175508242ec1e03ac59078fcb87faf19655f6" translate="yes" xml:space="preserve">
          <source>the beginning of the output range for the elements that do not satisfy p</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83fde3194835f7847933f785f62d559436c08897" translate="yes" xml:space="preserve">
          <source>the beginning of the output range for the elements that satisfy p</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9297f2a911ce1baacd10e6fd67af88a253132416" translate="yes" xml:space="preserve">
          <source>the beginning of the range of elements to copy from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="438690bb43266deda561761ed0b01c7c2ba09f5d" translate="yes" xml:space="preserve">
          <source>the beginning of the range of elements to destroy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f60785fe6f75d5ca4d7a10c1d863f330c3c4214" translate="yes" xml:space="preserve">
          <source>the beginning of the range of elements to generate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cec77fdab433c9d3af59778b5e099f3656e2db79" translate="yes" xml:space="preserve">
          <source>the beginning of the range of elements to initialize</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb9008eaacad7050474eebbc5ed3cd4cb95e7586" translate="yes" xml:space="preserve">
          <source>the beginning of the range of elements to modify</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b7abed042f4ee7f1f8690d78f2fd5fbfab072b7" translate="yes" xml:space="preserve">
          <source>the beginning of the range of the elements to copy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd70bb487922c858aa7f363d44a73848bf5a6abe" translate="yes" xml:space="preserve">
          <source>the beginning of the range of the elements to initialize</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="373964afa3afdd501d7c769c05e5aabdfe8411d5" translate="yes" xml:space="preserve">
          <source>the beginning of the range of the elements to move</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30a1b0a3366d11151ab53a69486c4222155118fe" translate="yes" xml:space="preserve">
          <source>the beginning of the range to apply the function to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2454ce2c419617fc0f7723049c4a357921b55af" translate="yes" xml:space="preserve">
          <source>the beginning of the second range of elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09fbbf2622d2b82e2722cf2f22034bbca3ad6658" translate="yes" xml:space="preserve">
          <source>the beginning of the second range of elements to transform</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af59f5c9dee65418eb3b4af853ee19f492f28148" translate="yes" xml:space="preserve">
          <source>the behavior is only unspecified</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2140284a4af5618833e45cbfceabbc14c9827ad" translate="yes" xml:space="preserve">
          <source>the best match for a template template argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80adb90fefde4a48a84cbeb39c514826e98d817f" translate="yes" xml:space="preserve">
          <source>the best viable candidate for a non-template function in &lt;a href=&quot;overload_resolution&quot;&gt;overload resolution&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e736a2cc0ba4631736c23402c6342392d2ef07e8" translate="yes" xml:space="preserve">
          <source>the bitmask obtained from one or several calls to lookup_classname()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8abedf4789556cd6cf03a4682463268530f0c7be" translate="yes" xml:space="preserve">
          <source>the bitset on the left-hand side of the operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="167d18dd97780d07a79002b09bea5d72910f64ec" translate="yes" xml:space="preserve">
          <source>the bitset on the right-hand side of the operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8760c761a38169c5014fffa399d8777d9d197e11" translate="yes" xml:space="preserve">
          <source>the bitset to be read or written</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e29cea8496cbe95dfa342fd116ad969649382620" translate="yes" xml:space="preserve">
          <source>the body of the lambda &lt;a href=&quot;definition#ODR-use&quot;&gt;odr-uses&lt;/a&gt; the variable or the &lt;code&gt;this&lt;/code&gt; pointer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c0bc402523625180a01cb650d62a51e6f77c47a" translate="yes" xml:space="preserve">
          <source>the bound</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a1ec4a7310fec015e921f7e4819f321fcda8f70" translate="yes" xml:space="preserve">
          <source>the bound (defaults to &lt;code&gt;std::unreachable_sentinel_t&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f60d3b0c46416400b55d305f82e57e249671cafa" translate="yes" xml:space="preserve">
          <source>the boundaries to clamp &lt;code&gt;v&lt;/code&gt; to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a904451cfb0f3fb053cda997fe43b5eb32c3ba72" translate="yes" xml:space="preserve">
          <source>the brace-enclosed &lt;a href=&quot;statements#Compound_statements&quot;&gt;sequence of statements&lt;/a&gt; that constitutes the body of a function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d65aaa353126b431b11a691f9bef4e25a792f26" translate="yes" xml:space="preserve">
          <source>the brace-enclosed &lt;a href=&quot;statements#Compound_statements&quot;&gt;sequence of statements&lt;/a&gt; that constututes the body of a function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7afdbb77981fddfe61a5bafdb1d9f70c6c2e6d52" translate="yes" xml:space="preserve">
          <source>the byte type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63ee22e4eee1fa7b42a92ffba7ca112a1610a232" translate="yes" xml:space="preserve">
          <source>the call to &lt;a href=&quot;../basic_streambuf/pubsync&quot;&gt;&lt;code&gt;pubsync()&lt;/code&gt;&lt;/a&gt;, if requested, also completed successfully.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1559f8e6949a0d416db2d8ee006852f573afbdf" translate="yes" xml:space="preserve">
          <source>the callable target (function, member function, lambda-expression, functor) to execute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b76e272b642315774cbf57032dfadd9127585a2" translate="yes" xml:space="preserve">
          <source>the category of error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b635c1cb4c2d9c742ba5aa8fb0bc65e7bdca154a" translate="yes" xml:space="preserve">
          <source>the category of the iterator. Must be one of &lt;a href=&quot;iterator_tags&quot;&gt;iterator category tags&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afeefc028f3b72c1ef97ac12777b18efdc7c978d" translate="yes" xml:space="preserve">
          <source>the character &lt;code&gt;~&lt;/code&gt; followed by a &lt;a href=&quot;decltype&quot;&gt;decltype&lt;/a&gt; specifier, such as &lt;code&gt;~decltype(str)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0929fc19150f48f11aeaa7de9387fa0f341a80ed" translate="yes" xml:space="preserve">
          <source>the character &lt;code&gt;~&lt;/code&gt; followed by a class name, such as &lt;code&gt;~MyClass&lt;/code&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec0cd8e0e05a1c7b38fede062055947e2c23262b" translate="yes" xml:space="preserve">
          <source>the character sequence &lt;code&gt;&quot;&quot;&lt;/code&gt; followed, without a space, by the character sequence that becomes the ud-suffix. This special syntax makes it possible to use language keywords and &lt;a href=&quot;../keywords&quot;&gt;reserved identifiers&lt;/a&gt; as ud-suffixes, and is used by the declaration of &lt;code&gt;operator &quot;&quot;if&lt;/code&gt; from the header &lt;code&gt;&amp;lt;complex&amp;gt;&lt;/code&gt;. Note that using this form does not change the rules that user-defined literal operators must begin with an underscore: declarations such as &lt;code&gt;operator &quot;&quot;if&lt;/code&gt; may only appear as part of a standard library header. However, it allows the use of an underscore followed by a capital letter (which is otherwise a &lt;a href=&quot;name&quot;&gt;reserved identifier&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d8995b227b2b5bd46a8f288978236b34deefbad" translate="yes" xml:space="preserve">
          <source>the character stream to read from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4e82e377f9b63d6ed297b80f52a7882a2d948ff" translate="yes" xml:space="preserve">
          <source>the character stream to write to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ad5708e56790ae357d3cbf10c7721472e548c80" translate="yes" xml:space="preserve">
          <source>the character that may represent a digit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7755c73c86612b87768dbf0c241097b7d3517747" translate="yes" xml:space="preserve">
          <source>the character that names a conversion specifier</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f80835b790e5f0f4e6d46f6e1364f2b8ed1daa3" translate="yes" xml:space="preserve">
          <source>the character to append</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79129b0ba8b5f3145f33d36c27dc7260a95c0322" translate="yes" xml:space="preserve">
          <source>the character to classify</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="454f153095b3dd31b0dfed9298a1d25b562b7b86" translate="yes" xml:space="preserve">
          <source>the character to insert</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e6fb54659095dd32402c9bff3772cc630392364" translate="yes" xml:space="preserve">
          <source>the character to put back, or Traits::eof() to indicate that backing up of the get area is requested</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7d2ffd8f2fbe80880ade9a151155a96cae7f7bc" translate="yes" xml:space="preserve">
          <source>the character to search for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e9447d10782f08535b6d910540db26d6ee35b3f" translate="yes" xml:space="preserve">
          <source>the character to store in the put area</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3b03a5d5342eff30e868b2d3a6fd33567465653" translate="yes" xml:space="preserve">
          <source>the character to use as fill character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="681edba6167a5c0ac8c5187bbd88c1de330de3f8" translate="yes" xml:space="preserve">
          <source>the character to use as the delimiter, defaults to &lt;code&gt;&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01692d5c6912031fad2382fabd2d7387d9ab75e1" translate="yes" xml:space="preserve">
          <source>the character to use as the escape character, defaults to &lt;code&gt;\&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bb6f7fc77055c0f4465fb10fd648589cd4fbd8c" translate="yes" xml:space="preserve">
          <source>the character used as the decimal point</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e04eb0408133080b226a309c2100c6f2a3ac967" translate="yes" xml:space="preserve">
          <source>the character used to separate groups of digits before the decimal point</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8ca83424321a8302337db9250b3ebc87a321bdc" translate="yes" xml:space="preserve">
          <source>the class must have no virtual base classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c6e2bebe6bd39105ae5234121743518b3817c6f" translate="yes" xml:space="preserve">
          <source>the clock with the shortest tick period available</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6e6ded6e33ed4f0b43521b75349a09eaa970630" translate="yes" xml:space="preserve">
          <source>the closure type of a lambda expression that appears in the declaration of a templated entity</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9d4bd81efe6b1647c82c8d1e5b04bebe31efb18" translate="yes" xml:space="preserve">
          <source>the common reference type for all &lt;code&gt;T...&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3100f44ed64294fe7e76494cb9210b73233ded6b" translate="yes" xml:space="preserve">
          <source>the common type for all &lt;code&gt;T...&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c084d204cb4405efc0eefffa4e5c2b3010385f03" translate="yes" xml:space="preserve">
          <source>the comparison function object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="723a599b7a43db441d10063d25c36267e9c9c3bc" translate="yes" xml:space="preserve">
          <source>the comparison function object to initialize the underlying comparison functor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fe35be82a99c1b9cbeb733f009c35c11a949f06" translate="yes" xml:space="preserve">
          <source>the complex number argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46e52bcb784e5084579a80704247e85de8522848" translate="yes" xml:space="preserve">
          <source>the complex number to be inserted or extracted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aa36e4de2e2bb7053edccdf69045bf03c2a2b08" translate="yes" xml:space="preserve">
          <source>the complexity of an attempted match exceeded a predefined level</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d0983cf7c30a2be540b2fe92f44bb8049c7669d" translate="yes" xml:space="preserve">
          <source>the condition variable to notify at thread exit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2bf31b5816da26dee291e7d118c3a8dab588252" translate="yes" xml:space="preserve">
          <source>the condition variable was awakened by timeout expiration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be994babe450edd5310ce1f31c842146697fbbcd" translate="yes" xml:space="preserve">
          <source>the condition variable was awakened with &lt;code&gt;notify_all&lt;/code&gt;, &lt;code&gt;notify_one&lt;/code&gt;, or spuriously</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ade10615adfd8495567450ce9c825c724f3f7222" translate="yes" xml:space="preserve">
          <source>the constant value 2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5606b08dafd49924cb894f957b3544bf9aea7b09" translate="yes" xml:space="preserve">
          <source>the constant value &lt;code&gt;5489u&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b94243d3f329294a65c4aebc4bcd7609d798cd36" translate="yes" xml:space="preserve">
          <source>the constraint expression in the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84fa9935a56005ff9e2ce4b02341eb9916a01ce2" translate="yes" xml:space="preserve">
          <source>the constraint expression in the trailing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b256e7d3f490084a5e5e7383b027ec70c1c32e0c" translate="yes" xml:space="preserve">
          <source>the constraint expression introduced for each constrained template parameter, in order of appearance;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cd9b521bc7c473ec63ea9f581ad030771d46ee8" translate="yes" xml:space="preserve">
          <source>the constructor acquires the resource and establishes all class invariants or throws an exception if that cannot be done,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6fc90facd016f76bd1de874e968f76a775c52e0" translate="yes" xml:space="preserve">
          <source>the constructor arguments to pass to &lt;code&gt;a.construct()&lt;/code&gt; or to placement-new</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b59defcf852f3e24632523a528f7069c0193770" translate="yes" xml:space="preserve">
          <source>the constructor arguments to pass to the constructor of &lt;code&gt;T1&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2b15a49cbfe933fcce98e2de9f3da22a739d123" translate="yes" xml:space="preserve">
          <source>the constructor arguments to pass to the constructor of &lt;code&gt;T2&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7603802d55696587a253f6c40ba5970f1afccbb" translate="yes" xml:space="preserve">
          <source>the constructor arguments to pass to the constructor of &lt;code&gt;T&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac3c3b177d4842bd91cf91d63966b49cd94d2f97" translate="yes" xml:space="preserve">
          <source>the constructor arguments to use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b27a3db164ad07368954daa1ac324b729766b275" translate="yes" xml:space="preserve">
          <source>the constructor body must be either deleted or defaulted or contain only the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc51f41b2653bf9c9bb2a001ce350a6361912107" translate="yes" xml:space="preserve">
          <source>the constructor body must satisfy the constraints for the body of a constexpr function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2c34d3d3c65d1ee808d9cb6274564df129b48a4" translate="yes" xml:space="preserve">
          <source>the constructor must not have a &lt;a href=&quot;function-try-block&quot;&gt;function-try-block&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cca37ad19189e882107b01a60970a48093f1ecb9" translate="yes" xml:space="preserve">
          <source>the constructors of &lt;code&gt;T&lt;/code&gt; are examined and the best match is selected by overload resolution. The constructor is then called to initialize the object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26319ee99d64d0f780bbc2f18ed8fa743055bd35" translate="yes" xml:space="preserve">
          <source>the contents of &lt;code&gt;rhs&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ffcfc4bddf544f464d4e9759af0289b5fac4533" translate="yes" xml:space="preserve">
          <source>the contents of shared state were already accessed through &lt;code&gt;&lt;a href=&quot;future&quot;&gt;std::future&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f60f55b90ed5dbae650b01b11112cc79ee836d9" translate="yes" xml:space="preserve">
          <source>the contents of the null-terminated byte string pointed to by &lt;code&gt;s&lt;/code&gt;, followed by &lt;code&gt;&quot;: &quot;&lt;/code&gt; (unless &lt;code&gt;s&lt;/code&gt; is a null pointer or the character pointed to by &lt;code&gt;s&lt;/code&gt; is the null character)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6e07e3d10c28d2b644eddc737fc2dc6ed4447ca" translate="yes" xml:space="preserve">
          <source>the context of a preprocessor directive:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91ece1ffbe7487845a71e62528dd49f0c4816e05" translate="yes" xml:space="preserve">
          <source>the controlling expression of &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bb29261c440be8b56f3448b589fb6a37bc84afe" translate="yes" xml:space="preserve">
          <source>the controlling expression of the &lt;a href=&quot;switch&quot;&gt;&lt;code&gt;switch&lt;/code&gt;&lt;/a&gt; statement (&lt;code&gt;T&lt;/code&gt; is any integral or enumeration type).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82eee14238c34d0b74ea443c2cfcd549b0f6a65b" translate="yes" xml:space="preserve">
          <source>the conversion function for captureless lambdas had unspecified exception specification</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8185c2f0cda37d1694bdeba1e24d1fd9c478c8d" translate="yes" xml:space="preserve">
          <source>the conversion is non-narrowing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2a7d7e1069adf8ef05244c53e7a1eca75362e9f" translate="yes" xml:space="preserve">
          <source>the conversion must also be valid in a constant expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc39be4c94bd56857f989928e201f128d580d129" translate="yes" xml:space="preserve">
          <source>the conversion occurs in an &lt;a href=&quot;expressions#Unevaluated_expressions&quot;&gt;unevaluated context&lt;/a&gt;(outside an &lt;a href=&quot;consteval&quot;&gt;immediate invocation&lt;/a&gt;)(since C++20), such as an operand of &lt;code&gt;sizeof&lt;/code&gt;, &lt;code&gt;noexcept&lt;/code&gt;, &lt;code&gt;decltype&lt;/code&gt;,(since C++11) or the static form of &lt;code&gt;typeid&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c8ba4aa552b66061fae4abef712e26aa5d1d5de" translate="yes" xml:space="preserve">
          <source>the converted integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86fa5760495aa002f763604106df7985e8d70e87" translate="yes" xml:space="preserve">
          <source>the converted string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99de4a021082425d8d72294c2b080e879784e7f4" translate="yes" xml:space="preserve">
          <source>the copy assignment operator is deleted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55bfab09c4746dc38bf12c2bb8de9c9dfbed8795" translate="yes" xml:space="preserve">
          <source>the copy assignment operator selected for every direct base of &lt;code&gt;T&lt;/code&gt; is trivial;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c951ca625a5d3574bf636350712bc6695bf32c99" translate="yes" xml:space="preserve">
          <source>the copy assignment operator selected for every non-static class type (or array of class type) member of &lt;code&gt;T&lt;/code&gt; is trivial;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6855dcf52b23da2329aa9a9bf0a23e0088a9e0f" translate="yes" xml:space="preserve">
          <source>the copy constructor and function call operator of &lt;code&gt;BinaryPredicate&lt;/code&gt; or &lt;code&gt;Hash&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96f270c9f5c6639da0abe3a5b029135121bd373b" translate="yes" xml:space="preserve">
          <source>the copy constructor of &lt;code&gt;RandomIt1&lt;/code&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bc2449c5fa538bac8dcd2c8ce1284d682902c3e" translate="yes" xml:space="preserve">
          <source>the copy constructor or function call operator of &lt;code&gt;BinaryPredicate&lt;/code&gt; or &lt;code&gt;Hash&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d950fec035756c5b763c142fec9a248428eb7ff0" translate="yes" xml:space="preserve">
          <source>the copy constructor selected for every direct base of &lt;code&gt;T&lt;/code&gt; is trivial;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="251998a62010889a728d70aeee3c5634e8a07932" translate="yes" xml:space="preserve">
          <source>the copy constructor selected for every non-static class type (or array of class type) member of &lt;code&gt;T&lt;/code&gt; is trivial;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37e63329a5d8d2d0c525e454c0b4725551e88b38" translate="yes" xml:space="preserve">
          <source>the corresponding successful return from &lt;code&gt;join()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82d41874e3b50d063d5b54951cc29da4d0c45d7e" translate="yes" xml:space="preserve">
          <source>the current position of stream position indicator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbe70fee6125bfaf041dc76e8d40fc8bef24f362" translate="yes" xml:space="preserve">
          <source>the current value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a06669b602d87f2a9b66486700829eb3ecbc49a5" translate="yes" xml:space="preserve">
          <source>the data consist only of printing characters and the control characters &lt;code&gt;\t&lt;/code&gt; and &lt;code&gt;\n&lt;/code&gt; (in particular, on Windows OS, the character &lt;code&gt;'\0x1A'&lt;/code&gt; terminates input)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dae3c92fc34412fadbead6e7d195a1916190b73d" translate="yes" xml:space="preserve">
          <source>the data to be inserted into &lt;code&gt;os&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a2c03c8d81d5f6808ba151d7e25181ab63389c3" translate="yes" xml:space="preserve">
          <source>the day value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8b615b505acc474dcf26b90c7fd105fe825ec60" translate="yes" xml:space="preserve">
          <source>the declarator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8faf1cd7a60ed5c77c5307434eb8d942ba49877d" translate="yes" xml:space="preserve">
          <source>the default allocator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b343c6f27ffae0b79356a5e6e02df07f77375d4" translate="yes" xml:space="preserve">
          <source>the default constructor is explicit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b31af7b2c60a6b75fbe7d5fc1290ae91d83373c7" translate="yes" xml:space="preserve">
          <source>the default constructor, copy constructor, and copy assignment operator of the value type of &lt;code&gt;RandomIt1&lt;/code&gt;; or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e33bdf5e96c853ab255795d7ef1017cda1c5704a" translate="yes" xml:space="preserve">
          <source>the default constructor, copy constructor, or copy assignment operator of the value type of &lt;code&gt;RandomIt1&lt;/code&gt;; or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c83f08b10c083bae0d66a640bdcc2cf040227b44" translate="yes" xml:space="preserve">
          <source>the default precision is not known</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26bec4c97195d80b7acc6616e5a7dfcd2de49103" translate="yes" xml:space="preserve">
          <source>the default rounding direction is not known</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="711d57425973797d8eded1f791a81af26422ebf6" translate="yes" xml:space="preserve">
          <source>the default seed (&lt;code&gt;1&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28e2702418d6ce655bbe15640863632c2a6acbca" translate="yes" xml:space="preserve">
          <source>the degree of the polymonial, a value of unsigned integer type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9a862cca657173f3cefdcf6d20ee60f7c45b851" translate="yes" xml:space="preserve">
          <source>the degree of the polynomial</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c38930f5b659e4ff9b2f3debd459ea50ba57a6ed" translate="yes" xml:space="preserve">
          <source>the degree of the polynomial, a value of unsigned integer type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e12cf27abc828fb8294e0d2f571898f3b6b4e3cc" translate="yes" xml:space="preserve">
          <source>the deleted copy assignment operator took reference to non-const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8cf602b2a9a8ed2ec3802fa584b68f69b660790" translate="yes" xml:space="preserve">
          <source>the deleted copy constructor took reference to non-const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2a4ee058f80dc81ab0ce3217d41b60e7b23e5c6" translate="yes" xml:space="preserve">
          <source>the deleter (type-erased);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="689b9a6c445687c9b2295067f7cae104a5480990" translate="yes" xml:space="preserve">
          <source>the delimiter character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77793961bec3f67eb6f766c3e9cef0365f990d3b" translate="yes" xml:space="preserve">
          <source>the desired alignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90e2376ea8728e56c4f333b8c7b379d9e0fb953b" translate="yes" xml:space="preserve">
          <source>the desired number of objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c512750b66fe3fc00661d2f511c9017a6061804" translate="yes" xml:space="preserve">
          <source>the destruction of local variables of the block enclosing the return statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01dde6917232ebc6380bfbd1d16349ad2f220785" translate="yes" xml:space="preserve">
          <source>the destructor is protected virtual</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a6fdb01f130132a341167fdabee09959813416c" translate="yes" xml:space="preserve">
          <source>the destructor releases the resource and never throws exceptions;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e4a500989348f8d6cc89c13775be0e0a44ec12e" translate="yes" xml:space="preserve">
          <source>the difference between two &lt;code&gt;&lt;a href=&quot;fpos&quot;&gt;std::fpos&lt;/a&gt;&lt;/code&gt; objects is a value of type &lt;code&gt;std::streamoff&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0dc1bfead6a19d3c017527b664368595ed0bfaf" translate="yes" xml:space="preserve">
          <source>the dimensions in &lt;a href=&quot;../language/new&quot;&gt;new-expressions&lt;/a&gt; other than the first</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6feead2453beb167dd07a007d56a26e056096b19" translate="yes" xml:space="preserve">
          <source>the dimensions in &lt;a href=&quot;new&quot;&gt;new-expressions&lt;/a&gt; other than the first</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="842131b78dd7f7a8b75a47dd540b4f2fa1ea714c" translate="yes" xml:space="preserve">
          <source>the directory options used at construction (accessible with &lt;a href=&quot;recursive_directory_iterator/options&quot;&gt;&lt;code&gt;options()&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="750186f6c24f2a572e24c610bb21efab83be1437" translate="yes" xml:space="preserve">
          <source>the distribution parameter set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8d550f1bee023fd02f919e04f15289bb0be031f" translate="yes" xml:space="preserve">
          <source>the duration argument for mixed-argument operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0cc6d78d998079eeecc367221d620111a6363e1" translate="yes" xml:space="preserve">
          <source>the effect of A</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5042ee92b8c844269011e15f7e4be548f9998b9f" translate="yes" xml:space="preserve">
          <source>the element that should appear at the beginning of the rotated range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="591984b460a8de097e1324f332a8318e9b1954ca" translate="yes" xml:space="preserve">
          <source>the element to transfer from &lt;code&gt;other&lt;/code&gt; to &lt;code&gt;*this&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83998378592fa1c021b48f206a8fa622873ec249" translate="yes" xml:space="preserve">
          <source>the encoding is not state-dependent, no termination sequence necessary</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bee8591b8a42bd18b54a8566f845f59e3d7ef5be" translate="yes" xml:space="preserve">
          <source>the end of the first sorted range and the beginning of the second</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ac8349ca73f2ef41b87c96e6a983ceeca36e93e" translate="yes" xml:space="preserve">
          <source>the end of the matching sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="852c90b0f545c154b844801847e99d8a383de135" translate="yes" xml:space="preserve">
          <source>the end of the original range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56df37a8afc91357fcaeffa9a4a9c266488ac92f" translate="yes" xml:space="preserve">
          <source>the end of the second sorted range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cab1f9e523739d81d87f5af49458f067da43f27d" translate="yes" xml:space="preserve">
          <source>the end of the sequence that matched &lt;a href=&quot;http://en.cppreference.com/w/cpp/regex/ecmascript#Sub-expressions&quot;&gt;marked sub-expression&lt;/a&gt; n, or &lt;code&gt;last&lt;/code&gt; if the subexpression did not participate in the match</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a4380845a8f832c0e5f1409d83cb0b82e17300c" translate="yes" xml:space="preserve">
          <source>the end of the stream is reached, in which case &lt;code&gt;failbit&lt;/code&gt; and &lt;code&gt;eofbit&lt;/code&gt; are set and if the stream is on for exceptions on one of these bits, &lt;a href=&quot;../io/ios_base/failure&quot;&gt;&lt;code&gt;ios_base::failure&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23159a37a31a42a5b3f3ef42db54e7f667fb16fe" translate="yes" xml:space="preserve">
          <source>the end-of-file condition occurs in the stream &lt;code&gt;is&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65577a588b56d42c17280bd68be2d124ca96af22" translate="yes" xml:space="preserve">
          <source>the ending of a stream</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c0fbdc1aac62fdc58b11cddc41390e832254abf" translate="yes" xml:space="preserve">
          <source>the entire controlling expression of &lt;a href=&quot;../../language/if&quot;&gt;if&lt;/a&gt;, &lt;a href=&quot;../../language/switch&quot;&gt;switch&lt;/a&gt;, &lt;a href=&quot;../../language/while&quot;&gt;while&lt;/a&gt;, &lt;a href=&quot;../../language/do&quot;&gt;do-while&lt;/a&gt;, &lt;a href=&quot;../../language/for&quot;&gt;for&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61670eee64b36dbc487d61f1aeca5c8d1dfae2e0" translate="yes" xml:space="preserve">
          <source>the entire expression of an &lt;a href=&quot;../../language/statements#Expression_statements&quot;&gt;expression statement&lt;/a&gt; (possibly cast to &lt;code&gt;void&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0aafbbd26fd3bb0a569c0c0d0bbaf578f773898" translate="yes" xml:space="preserve">
          <source>the enumeration is either scoped or unscoped with underlying type fixed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="712a1de6e6839ecedf7580cbfccc34a2da4b8c09" translate="yes" xml:space="preserve">
          <source>the exception object to rethrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3e46b39ec690a4b51561c418e126e32c13dbf22" translate="yes" xml:space="preserve">
          <source>the exception object to throw</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9b46f6e327cb2184928be139e8d86fe4d114fac" translate="yes" xml:space="preserve">
          <source>the exception specification exception on the lambda-expression applies to the function-call operator or operator template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="166ac11bef32f64e817c576c817f380253c469a5" translate="yes" xml:space="preserve">
          <source>the exception thrown when invoking an empty &lt;code&gt;&lt;a href=&quot;../function&quot;&gt;std::function&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8de3e4e306a46791d16415cf7e27fb927d9986a7" translate="yes" xml:space="preserve">
          <source>the exception thrown when invoking an empty &lt;code&gt;&lt;a href=&quot;../utility/functional/function&quot;&gt;std::function&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffa625a201a7c3b32a47fe3548281cccfb070dd8" translate="yes" xml:space="preserve">
          <source>the exception thrown when invoking an empty &lt;code&gt;&lt;a href=&quot;functional/function&quot;&gt;std::function&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c03d09842e27d89a58aa7e2bfe41b8c19f5bbb5e" translate="yes" xml:space="preserve">
          <source>the exception thrown when invoking an empty &lt;code&gt;std::function&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47731fd5e216208d87ccce2a065380190b7b908c" translate="yes" xml:space="preserve">
          <source>the execution policy to use. See &lt;a href=&quot;../algorithm/execution_policy_tag_t&quot;&gt;execution policy&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="964f72a692474490d8a9462e1774f815763d0d78" translate="yes" xml:space="preserve">
          <source>the execution policy to use. See &lt;a href=&quot;execution_policy_tag_t&quot;&gt;execution policy&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="811c5615c1fcf0d57355a133904809e50ed8935f" translate="yes" xml:space="preserve">
          <source>the expression &lt;code&gt;E1 = {E2}&lt;/code&gt; is equivalent to &lt;code&gt;E1 = T{E2}&lt;/code&gt;, where &lt;code&gt;T&lt;/code&gt; is the type of &lt;code&gt;E1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef3213f752d5b605e22845b6fe557f211ad2a29d" translate="yes" xml:space="preserve">
          <source>the expression &lt;code&gt;E1 = {}&lt;/code&gt; is equivalent to &lt;code&gt;E1 = T{}&lt;/code&gt;, where &lt;code&gt;T&lt;/code&gt; is the type of &lt;code&gt;E1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06cdeb920f440dbaa174e75a087dfa78451740ef" translate="yes" xml:space="preserve">
          <source>the expression contains an invalid back reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51b202cdef8263a5bf9ef4ec14d619698d53f00a" translate="yes" xml:space="preserve">
          <source>the expression contains an invalid character class name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c20a366daffbb3fa3170ce96b71d75799f1a5964" translate="yes" xml:space="preserve">
          <source>the expression contains an invalid character range (e.g. [b-a])</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="952a969045fd4142441246de9115d8a7d0d5bf90" translate="yes" xml:space="preserve">
          <source>the expression contains an invalid collating element name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3d2d9ed3735778d383ab0c39329af024b481682" translate="yes" xml:space="preserve">
          <source>the expression contains an invalid escaped character or a trailing escape</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2faf74e1993cb0eb4c30d68cca7d7250acc13c88" translate="yes" xml:space="preserve">
          <source>the expression contains an invalid range in a {} expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a569b49d6035f2ae68b91d50f196cb17193a4db" translate="yes" xml:space="preserve">
          <source>the expression contains mismatched curly braces ('{' and '}')</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82b66f65ccca2fbd65d3fc92504c174b7fea9d90" translate="yes" xml:space="preserve">
          <source>the expression contains mismatched parentheses ('(' and ')')</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87cf6ed0c64e0b634f44c571b7584681455cc692" translate="yes" xml:space="preserve">
          <source>the expression contains mismatched square brackets ('[' and ']')</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adb6ee2e21a71655ce3ce1d3878df29511f9247b" translate="yes" xml:space="preserve">
          <source>the expression in a &lt;a href=&quot;noexcept_spec&quot;&gt;&lt;code&gt;noexcept&lt;/code&gt;&lt;/a&gt; specifier;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98a32d22ef81936e3d7da9c0afbb3fbd941f1e06" translate="yes" xml:space="preserve">
          <source>the expression in an &lt;a href=&quot;explicit&quot;&gt;&lt;code&gt;explicit&lt;/code&gt;&lt;/a&gt; specifier;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04be1273329b7f8895a0a3f57fd9b981d8d77189" translate="yes" xml:space="preserve">
          <source>the expression is of class type and its value after user-defined conversion function and before the &lt;a href=&quot;implicit_cast&quot;&gt;second standard conversion&lt;/a&gt; is negative;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52a234301e8def2e354211af3328de3fc7b44229" translate="yes" xml:space="preserve">
          <source>the expression is of non-class type and its value before conversion to &lt;code&gt;&lt;a href=&quot;../types/size_t&quot;&gt;std::size_t&lt;/a&gt;&lt;/code&gt; is negative;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eb1cc55582965121177b53cf384afd98f146a46" translate="yes" xml:space="preserve">
          <source>the expression is well-formed in unevaluated context</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35e6b41245f613f58cc65e5e4cf96556b7a1ae0c" translate="yes" xml:space="preserve">
          <source>the expression whose return value is to be removed from a dependency tree</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ade8e4e6b250d9d7725be12bd92ac7bad793b209" translate="yes" xml:space="preserve">
          <source>the expressions in their requires-clauses that follow the function declarators, if present, are equivalent</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb2eec564dcb61227fd0f028b7a67f89d95b9a57" translate="yes" xml:space="preserve">
          <source>the expressions in their requires-clauses that follow the template parameter lists, if present, are equivalent</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c76eec307a091575ea680e9e56f9b5400338cf81" translate="yes" xml:space="preserve">
          <source>the expressions involving template parameters in their return types and parameter lists are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="364fae8b7cdfc970284e3be9ada0faa629fc9fdf" translate="yes" xml:space="preserve">
          <source>the extension to replace with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9f88fb6a095c4a22f8983e65d1fd605a29a8c49" translate="yes" xml:space="preserve">
          <source>the facet index type: each facet class must declare or inherit a public static member of this type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d869d4ac362068b4bbf3966befe76be3d413c52b" translate="yes" xml:space="preserve">
          <source>the file exists but its type could not be determined</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0de5ebbab94fc885c54d41b77f0aca5cc14a7819" translate="yes" xml:space="preserve">
          <source>the file name to open; &lt;code&gt;s&lt;/code&gt; must point to a null-terminated string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e297ef2181d227a54e027cacde0002575f4bc342" translate="yes" xml:space="preserve">
          <source>the file opening mode, a binary OR of the &lt;code&gt;&lt;a href=&quot;../ios_base&quot;&gt;std::ios_base&lt;/a&gt;&lt;/code&gt; modes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dd58c8832798e05ccae57b34f4724632cdb1710" translate="yes" xml:space="preserve">
          <source>the file stream to check</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0dc9ae51de96b882c0136ea78d000718e6988d9" translate="yes" xml:space="preserve">
          <source>the file stream to close</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="466ce090a6ed700cc6cd657d99f3986aad3315f3" translate="yes" xml:space="preserve">
          <source>the file stream to modify</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b605eb2486bc00069d3b6c24385338a253c5b9b" translate="yes" xml:space="preserve">
          <source>the file stream to set the buffer to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59b09ecdf963c1677b7f106968a997be3647a06b" translate="yes" xml:space="preserve">
          <source>the file stream to set the buffer to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f602341be14b79f94dfdaf59c3cf43f624a531f3" translate="yes" xml:space="preserve">
          <source>the file stream to write out</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38acc15862c5759b50b5cc12258b30e0a205afde" translate="yes" xml:space="preserve">
          <source>the file to reset the error flags for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0042635aad2105cb513c5b0abfc760905957951a" translate="yes" xml:space="preserve">
          <source>the fill character (see &lt;a href=&quot;basic_ios/fill&quot;&gt;&lt;code&gt;fill()&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4bcbb25990e769fc557ad3f81856e2ed58e7faa" translate="yes" xml:space="preserve">
          <source>the fill character before the call to the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc8fa6ff9c0eec14b909b2114d76a017fb4f1a18" translate="yes" xml:space="preserve">
          <source>the first element can be removed using &lt;code&gt;&lt;a href=&quot;pop_heap&quot;&gt;std::pop_heap&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a44c415efe23ee524da894f3c1117dd06d89b0d" translate="yes" xml:space="preserve">
          <source>the first element can be removed using &lt;code&gt;std::pop_heap()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb325805ac50ea41a7301055de704424504b9570" translate="yes" xml:space="preserve">
          <source>the first function template has the same template parameters as the first partial specialization and has just one function parameter, whose type is a class template specialization with all the template arguments from the first partial specialization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1b2ecc1c6e7c53935d0a6a1ca989d3028303f85" translate="yes" xml:space="preserve">
          <source>the first input sorted range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17359d629ff2b1f92cad69d46d67af31aed807fb" translate="yes" xml:space="preserve">
          <source>the first of the characters returned by moneypunct::positive_sign or moneypunct::negative_sign is required</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d03830d66dd51928097577c96a0b2c037420113" translate="yes" xml:space="preserve">
          <source>the first operand of the conditional operator &lt;code&gt;?:&lt;/code&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ae40b367295f62dcfe4cde815d6b8e29532a3ec" translate="yes" xml:space="preserve">
          <source>the first range of elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78f05bf8fc62a5ae6ab616ebe364e81362ce0ee9" translate="yes" xml:space="preserve">
          <source>the first range of elements to examine</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2db380634b53df4ffbb9371c9cd50ee5f4514953" translate="yes" xml:space="preserve">
          <source>the first range of elements to merge</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee8742ff1feee1c55b7144e8bd29e7a8be76fa8e" translate="yes" xml:space="preserve">
          <source>the first range of elements to swap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43a651cc3bb73ad85503105f0681938d426a0904" translate="yes" xml:space="preserve">
          <source>the first range of elements to transform</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6e51f74620268790b7d93020c412914b67801d9" translate="yes" xml:space="preserve">
          <source>the first range of the elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c74304e128aa539f93ea09582d01a85412f1eba2" translate="yes" xml:space="preserve">
          <source>the first range of the elements to compare</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cfdfc755a62e38a494207123223b015f5dac4ce" translate="yes" xml:space="preserve">
          <source>the first read is performed in the constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="750444e995e4648829554d9bfda1634a52f8256c" translate="yes" xml:space="preserve">
          <source>the first read may be deferred to the first dereferencing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="012f8520848bef5d35cccdec3d8ff29884e0eb8f" translate="yes" xml:space="preserve">
          <source>the first sorted range of elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32241fb88e324591aa508d7b4993a9345b9fcdc3" translate="yes" xml:space="preserve">
          <source>the first string to compare</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3293e8d160144362f2dc71f30c7ad22aff323cbe" translate="yes" xml:space="preserve">
          <source>the first type &lt;code&gt;Bi&lt;/code&gt; in &lt;code&gt;B1, ..., BN&lt;/code&gt; for which &lt;code&gt;bool(Bi::value) == false&lt;/code&gt;, or &lt;code&gt;BN&lt;/code&gt; if there is no such type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="525592b06f79c8b66ff704602e61a6e9682c57a2" translate="yes" xml:space="preserve">
          <source>the first type &lt;code&gt;Bi&lt;/code&gt; in &lt;code&gt;B1, ..., BN&lt;/code&gt; for which &lt;code&gt;bool(Bi::value) == true&lt;/code&gt;, or &lt;code&gt;BN&lt;/code&gt; if there is no such type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9853d6ceeb5f5217d2d31d976e5005ce614a656" translate="yes" xml:space="preserve">
          <source>the following are true:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="300931c9ba9d009da43265b906ddd9348062f553" translate="yes" xml:space="preserve">
          <source>the following expression is well-formed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e42bcea2b10d46b2b6c266629ed575f89091ded8" translate="yes" xml:space="preserve">
          <source>the following expressions are valid and have their specified effects:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09562c6fc3f14ce9429998cad7912fd51f705762" translate="yes" xml:space="preserve">
          <source>the format contains variable items (week day, Julian day, etc), or this function is not implemented</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78801c121c35fee319a658d862d72538c902a6b3" translate="yes" xml:space="preserve">
          <source>the formatting flags before the call to the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6382330770e2431a8a4ed6c0b459c5c9300113b6" translate="yes" xml:space="preserve">
          <source>the function &lt;code&gt;A::f&lt;/code&gt; is not a function template, but is still considered to be templated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2430dabaca237f527452ee9dfb5952987c81fbdf" translate="yes" xml:space="preserve">
          <source>the function body must &lt;b&gt;not&lt;/b&gt; contain:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0eab6b839a360e6787dca35602898a04f5fdb29" translate="yes" xml:space="preserve">
          <source>the function body must be either deleted or defaulted or contain only the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98ee5e274eb1572c118aa4c1c7a598df05420804" translate="yes" xml:space="preserve">
          <source>the function is &lt;a href=&quot;definition#ODR-use&quot;&gt;odr-used&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19851cd9f4f3bc14ba1d1b3de2194ef0745345b3" translate="yes" xml:space="preserve">
          <source>the function is named by an id-expression (either directly or as part of member access or pointer-to-member access expression), the set of potential exceptions of the named function is added to the list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0690949a279da8f821483a095168addbde1eb7ab" translate="yes" xml:space="preserve">
          <source>the function object used to initialize &lt;code&gt;*this&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d518998941d9612e534edc144379527f624814b" translate="yes" xml:space="preserve">
          <source>the function parameters of &lt;code&gt;Fi&lt;/code&gt; are the constructor parameters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="308a8e686ef4e0027a01fbe49b5957504450ab14" translate="yes" xml:space="preserve">
          <source>the function which will be called on event, supplied as a function pointer of type &lt;a href=&quot;event_callback&quot;&gt;event_callback&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="171b23f57db777e41c78f27b69b3b99a619cf155" translate="yes" xml:space="preserve">
          <source>the function would be odr-used but appears in an unevaluated operand</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1579b786d4fef30ea731f3794a637183b1d538e" translate="yes" xml:space="preserve">
          <source>the glvalue has the type &lt;code&gt;&lt;a href=&quot;../types/nullptr_t&quot;&gt;std::nullptr_t&lt;/a&gt;&lt;/code&gt;: in this case the resulting prvalue is the null pointer constant &lt;code&gt;nullptr&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a3d33714cdcab8a6577daee1a590f17287f6f00" translate="yes" xml:space="preserve">
          <source>the greatest lower bound on the values potentially returned by &lt;code&gt;x&lt;/code&gt;&amp;rsquo;s &lt;code&gt;operator()&lt;/code&gt;, as determined by the current values of &lt;code&gt;x&lt;/code&gt;&amp;rsquo;s parameters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4c0421bbc79d95f928cca4c832ba728f7dc4bef" translate="yes" xml:space="preserve">
          <source>the hash value of the key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcddf85db5591e9444ad918bf9a4ff76f0ddeacb" translate="yes" xml:space="preserve">
          <source>the hint, logarithmic in the size of the container otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2b50fb9e708fbc8a19b4658236defad616aedf2" translate="yes" xml:space="preserve">
          <source>the identifier to use as the ud-suffix for the user-defined literals that will call this function. Must begin with the underscore &lt;code&gt;_&lt;/code&gt;: the suffixes that do not begin with the underscore are reserved for the literal operators provided by the standard library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bc197059b24585d8edbad3d296b4d67170908fc" translate="yes" xml:space="preserve">
          <source>the identifiers that are &lt;a href=&quot;../keywords&quot;&gt;keywords&lt;/a&gt; cannot be used for other purposes;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65eb1c73a141218778d6e0836426bcf2192c638f" translate="yes" xml:space="preserve">
          <source>the identifiers that begin with an underscore are reserved in the global namespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb1aaa65b75c573cbcc26211a648ef98dc0bb488" translate="yes" xml:space="preserve">
          <source>the identifiers that begin with an underscore followed by an uppercase letter are reserved;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="616be92332fad4740f42680eba2f680d27363e0e" translate="yes" xml:space="preserve">
          <source>the identifiers with a double underscore anywhere are reserved;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0a322dbbb44477a7e96a1019dbf6f25c15710e3" translate="yes" xml:space="preserve">
          <source>the imaginary component of &lt;code&gt;z&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90a575e11335a91326de40856e2d959c848b92c7" translate="yes" xml:space="preserve">
          <source>the imaginary part</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="605eb75e3ff1095d044a16ceba85e96d6c6a8c89" translate="yes" xml:space="preserve">
          <source>the implicitly-declared move assignment operator would not be defined as deleted,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dce5c220680d8fc898dc71c4e1adccc853d083e" translate="yes" xml:space="preserve">
          <source>the implicitly-declared move constructor is not defined as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74e17893a23978096cbd041250a369ad0d7fca8d" translate="yes" xml:space="preserve">
          <source>the increment term (c).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d570ad89e9c44d3639ab75bae9f60f4ceaa9331f" translate="yes" xml:space="preserve">
          <source>the index of the bucket to access</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad4ae8c67310eaf71814deb617a2f5dc897a303c" translate="yes" xml:space="preserve">
          <source>the index of the bucket to examine</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07535aed059eee7f7b1665942823f0f35e33ae82" translate="yes" xml:space="preserve">
          <source>the index of the element to access</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1197dd45bf4a1539a99fd3f5b13578ae3fc98e5d" translate="yes" xml:space="preserve">
          <source>the index of the element to be returned</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4629cca1d45bc38369b5968be57e86ee00376ac" translate="yes" xml:space="preserve">
          <source>the index of the first character to append</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c90639dfec7aa436629be3f0e2652b4c77639326" translate="yes" xml:space="preserve">
          <source>the index of the submatch that should be returned. &quot;0&quot; represents the entire match, and &quot;-1&quot; represents the parts that are not matched (e.g, the stuff between matches).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="255aed15b6043c62235dfa0e4df4b126c19bf3c8" translate="yes" xml:space="preserve">
          <source>the initial buffer to use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f35c2523bc5437767a03c7b8503ec91484fdc9be" translate="yes" xml:space="preserve">
          <source>the initial seed sequence represented as a pair of input iterators whose &lt;code&gt;&lt;a href=&quot;../../../iterator/iterator_traits&quot;&gt;std::iterator_traits&lt;/a&gt;&amp;lt;&amp;gt;::value_type&lt;/code&gt; is an integer type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d44f1a36f649da23359a4e6f0ca3224b8d226307" translate="yes" xml:space="preserve">
          <source>the initial size of the dynamically allocated buffer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92976c332faa834122ed3d11c1c528450dcc6889" translate="yes" xml:space="preserve">
          <source>the initial value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5e17d1dd0efe94d3241d52b345fe6a4919f36ca" translate="yes" xml:space="preserve">
          <source>the initial value (optional)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0c2479a1406de801810c2f27450995340ad695c" translate="yes" xml:space="preserve">
          <source>the initial value of the character conversion state</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9426b14a23c5b9ddcb9db21fe3dd3114cd8356d1" translate="yes" xml:space="preserve">
          <source>the initial value of the generalized sum</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0903c8dbcff11db81f0c29193aa2a5fe372cb738" translate="yes" xml:space="preserve">
          <source>the initial value to initialize every element of the array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="353efe7cab0195fd2eefe89b3f87f01206273d28" translate="yes" xml:space="preserve">
          <source>the initialization is direct-list-initialization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="467d74c2d5d2673205f268312b0a0387d1c09b7c" translate="yes" xml:space="preserve">
          <source>the initializer list has only a single element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7eacf9d4db8829589f1eac342ff1fbe0b1190554" translate="yes" xml:space="preserve">
          <source>the initializer list to pass to the constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfc416f709f89704e173306825488dee4294d376" translate="yes" xml:space="preserve">
          <source>the input character sequence, represented as &lt;code&gt;&lt;a href=&quot;../string/basic_string&quot;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt; or character array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55ce994d6c79cc02cd24ce30b027e785e247fb41" translate="yes" xml:space="preserve">
          <source>the input character sequence, represented as a pair of iterators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0586c2b6d26c4da80c668e1f9d6dd84d9993c0e" translate="yes" xml:space="preserve">
          <source>the integer type that can be accessed as an atomic entity from an asynchronous signal handler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fbc24083c047d86ab24c779b5e5d50cf8cec764" translate="yes" xml:space="preserve">
          <source>the invocation of &lt;code&gt;std::raise&lt;/code&gt; and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f780001b147ea4a4f95f379a30e2d25a3044403" translate="yes" xml:space="preserve">
          <source>the iterator type to retrieve properties for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="608e41fc99a02c7c04595d9f8c90ff8a4a8ba9f4" translate="yes" xml:space="preserve">
          <source>the key of the element to find</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eda85a8078dc041121de2c265716b9cb2c20715a" translate="yes" xml:space="preserve">
          <source>the key used both to look up and to insert if not found</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bb08ea723581fee950dc34fa73cbbf074e9d041" translate="yes" xml:space="preserve">
          <source>the keyword &lt;a href=&quot;../keyword/class&quot;&gt;class&lt;/a&gt;, &lt;a href=&quot;../keyword/struct&quot;&gt;struct&lt;/a&gt;, or &lt;a href=&quot;../keyword/union&quot;&gt;union&lt;/a&gt;, followed by template name with template arguments (optionally &lt;a href=&quot;name#Qualified_identifiers&quot;&gt;qualified&lt;/a&gt;, optionally using &lt;a href=&quot;dependent_name&quot;&gt;template disambiguator&lt;/a&gt;), previously defined as the name of a class template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ed91ae9737bb2700f3586972d4eb44da518da6a" translate="yes" xml:space="preserve">
          <source>the keyword &lt;a href=&quot;../keyword/class&quot;&gt;class&lt;/a&gt;, &lt;a href=&quot;../keyword/struct&quot;&gt;struct&lt;/a&gt;, or &lt;a href=&quot;../keyword/union&quot;&gt;union&lt;/a&gt;, followed by the identifier (optionally &lt;a href=&quot;name#Qualified_identifiers&quot;&gt;qualified&lt;/a&gt;), previously defined as the name of a class, struct, or union.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65b06b95555188dbe4cc12a25d32469db841ab87" translate="yes" xml:space="preserve">
          <source>the keyword &lt;a href=&quot;../keyword/enum&quot;&gt;enum&lt;/a&gt; followed by the identifier (optionally &lt;a href=&quot;name#Qualified_identifiers&quot;&gt;qualified&lt;/a&gt;), previously declared as the name of an enumeration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98f09a4eed99719737de5a0b551d04b31b5f806b" translate="yes" xml:space="preserve">
          <source>the keyword &lt;code&gt;typename&lt;/code&gt; may be used as necessary to resolve &lt;a href=&quot;dependent_name&quot;&gt;dependent names&lt;/a&gt;, when the using-declaration introduces a member type from a base class into a class template</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="543b1d800d5e38e6ef3373dc76327e83dc7c234f" translate="yes" xml:space="preserve">
          <source>the keyword &lt;code&gt;virtual&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="494452c2e0c6d0482a5c663bb41d041d8bd70346" translate="yes" xml:space="preserve">
          <source>the language linkage is the same (e.g. the include file isn't inside an extern &quot;C&quot; block)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fccd08680588f8064c33a98a50e1243015e54cbf" translate="yes" xml:space="preserve">
          <source>the largest integer power of 10 that is a valid finite floating-point value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa1b2d92ae0a54d735db221ba7de256212cc4fa1" translate="yes" xml:space="preserve">
          <source>the largest possible &lt;code&gt;time_point&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0667c901c5ac78a2e6d2e4f87a4d8e4908220497" translate="yes" xml:space="preserve">
          <source>the largest valid value of wchar_t</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcab5baee4730601db19c2ac97930ac4ddbf89e6" translate="yes" xml:space="preserve">
          <source>the largest value of &lt;code&gt;Elem&lt;/code&gt; that this facet will read or write without error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a6f605cd322af7a5a7e5df1ab249e20d0bd2b34" translate="yes" xml:space="preserve">
          <source>the largest value that can be passed to &lt;code&gt;A::allocate()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfbff4157cb10d38a78f7ea3588922058aa609b8" translate="yes" xml:space="preserve">
          <source>the last &lt;code&gt;memory_order_seq_cst&lt;/code&gt; modification of M that appears before X in the single total order</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3dc6b8a4f57f9237c65781615908b2ac8206b2f" translate="yes" xml:space="preserve">
          <source>the last character is \n</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dd17807ab234612e4739378e3d84cf60c9280ad" translate="yes" xml:space="preserve">
          <source>the last element to inspect or modify.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9517a28efe61524718f6b3e6057ee62018fba8c" translate="yes" xml:space="preserve">
          <source>the last remaining &lt;code&gt;shared_ptr&lt;/code&gt; owning the object is assigned another pointer via &lt;code&gt;&lt;a href=&quot;shared_ptr/operator=&quot;&gt;operator=&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;shared_ptr/reset&quot;&gt;reset()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bab419c845b4fe2e5916baf7dae9cc8e912df41a" translate="yes" xml:space="preserve">
          <source>the last remaining &lt;code&gt;shared_ptr&lt;/code&gt; owning the object is destroyed;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="902d453531f134d47150f59e13a8f08237ed377e" translate="yes" xml:space="preserve">
          <source>the least upper bound on the values potentially returned by &lt;code&gt;x&lt;/code&gt;&amp;rsquo;s &lt;code&gt;operator()&lt;/code&gt;, as determined by the current values of &lt;code&gt;x&lt;/code&gt;&amp;rsquo;s parameters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67460d23d60af21c70056796f2dccd9dbb624046" translate="yes" xml:space="preserve">
          <source>the left-hand &lt;code&gt;shared_ptr&lt;/code&gt; to compare</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65cf9766c96e49a2379067d24bc2220e5a62249c" translate="yes" xml:space="preserve">
          <source>the length of &lt;code&gt;str&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff29324649b243c746932a3097c9f6a9ba378d04" translate="yes" xml:space="preserve">
          <source>the length of the character sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61cd857cef4af7a8db589653f51e1ef59e49bb0b" translate="yes" xml:space="preserve">
          <source>the length of the sequence to search for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fc0d196fe2de7c806c0a6d3f8c4a9afd3157de4" translate="yes" xml:space="preserve">
          <source>the library functions &lt;code&gt;&lt;a href=&quot;../math/round&quot;&gt;std::round&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../math/round&quot;&gt;std::lround&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../math/round&quot;&gt;std::llround&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../math/ceil&quot;&gt;std::ceil&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../math/floor&quot;&gt;std::floor&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../math/trunc&quot;&gt;std::trunc&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="290d0fe2d88a0e50e813327bf1ec1489712b4633" translate="yes" xml:space="preserve">
          <source>the library rounding functions &lt;code&gt;&lt;a href=&quot;../math/nearbyint&quot;&gt;std::nearbyint&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../math/rint&quot;&gt;std::rint&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../math/rint&quot;&gt;std::lrint&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d84e3c576992b60cb3cee6b895b6088cddd77e5" translate="yes" xml:space="preserve">
          <source>the lifetime of the array has begun and not ended</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1db21345a261662b6baa16f8b76f11a3144244f" translate="yes" xml:space="preserve">
          <source>the lifetime of the containing object has begun and not ended</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aeb87c08c271e2e9d76249ae6810d5489c57e82" translate="yes" xml:space="preserve">
          <source>the locale category used to identify the facets to merge with &lt;code&gt;other&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce28e42f47ccd9e65e90a3650e73a043e943298e" translate="yes" xml:space="preserve">
          <source>the locale object associated with the stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3427c85a072550346de81bb2d45c511f3fbd2b9" translate="yes" xml:space="preserve">
          <source>the locale object to query</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="383d8b6751baa727d5cca61d2cd2ef8defab2871" translate="yes" xml:space="preserve">
          <source>the locale to imbue</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="914e7cc3d87c2df76dc953ede2db1be9fd785fa8" translate="yes" xml:space="preserve">
          <source>the locale to imbue the stream with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7a9230dbad3d9464af5dc657d34213a86369b0c" translate="yes" xml:space="preserve">
          <source>the lock associated with the condition variable &lt;code&gt;cond&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e31524c8262a0e6e733cefe3251fbe6af1233b0" translate="yes" xml:space="preserve">
          <source>the lock to swap the state with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cac8848e870d1048a28c815d22052684e095e74" translate="yes" xml:space="preserve">
          <source>the lock-free boolean atomic type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38cf804da9979b575b0ed9f71a8c7a80569147a2" translate="yes" xml:space="preserve">
          <source>the lookup of non-member function &lt;code&gt;get&lt;/code&gt; performed by &lt;a href=&quot;structured_binding&quot;&gt;structured binding declaration&lt;/a&gt; for tuple-like types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba2adcc22ad0724ab289525b96a15fad39d239ac" translate="yes" xml:space="preserve">
          <source>the lookup of non-member functions &lt;code&gt;begin&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; performed by the &lt;a href=&quot;range-for&quot;&gt;range-for&lt;/a&gt; loop if member lookup fails</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dccf457d197b29e7bbc729dfa81ec77d8f85e9d1" translate="yes" xml:space="preserve">
          <source>the lower bound of the interval sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b84a524ce910042df6f675ec437d12ac23d40d5" translate="yes" xml:space="preserve">
          <source>the managing &lt;code&gt;unique_ptr&lt;/code&gt; object is assigned another pointer via &lt;code&gt;&lt;a href=&quot;unique_ptr/operator=&quot;&gt;operator=&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;unique_ptr/reset&quot;&gt;reset()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e584aa44ae5ca2378b69aacb450af758723646d8" translate="yes" xml:space="preserve">
          <source>the managing &lt;code&gt;unique_ptr&lt;/code&gt; object is destroyed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68722827aecacc7ee97e3256eed6528b3d58824b" translate="yes" xml:space="preserve">
          <source>the match flags of type &lt;code&gt;&lt;a href=&quot;match_flag_type&quot;&gt;std::regex_constants::match_flag_type&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dad6bd94fcf302d443bb88461333ae90e1dfe5d" translate="yes" xml:space="preserve">
          <source>the match results</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4482325a01ce62e7df84ffda6f52e61156bbb7f3" translate="yes" xml:space="preserve">
          <source>the match_results objects whose contents will be swapped</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9790a6683fe30d201a88b37951a035af5fc5495a" translate="yes" xml:space="preserve">
          <source>the mathematical result is finite, but becomes infinite after rounding, or becomes the largest representable finite value after rounding down</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="916fd8a70e547d8531a9a589cf4b77bcdd97e3ff" translate="yes" xml:space="preserve">
          <source>the mathematical result of the function is exactly infinite or undefined</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15a3f235905aa2acd470f53b352868a95fa04d98" translate="yes" xml:space="preserve">
          <source>the memory location where the object will be placed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="230c22f3774d96566c723fdb50ed7b0b6384ed44" translate="yes" xml:space="preserve">
          <source>the memory ordering executed by this fence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="593066f6bb8f8fa31c4dd514f9d8e2ccc0c95258" translate="yes" xml:space="preserve">
          <source>the memory sycnhronization ordering for this operation: all values are permitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="582eddc33f74b3694b6e147dd6ebe0a6db0c4738" translate="yes" xml:space="preserve">
          <source>the memory synchronization order for this operation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31b6fec16934d87b9b20159b3d8157accc502dfc" translate="yes" xml:space="preserve">
          <source>the memory synchronization ordering for both operations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dc6570f70c2e6a4dc8bdb7be2f4627c1d92a816" translate="yes" xml:space="preserve">
          <source>the memory synchronization ordering for the load operation if the comparison fails. Cannot be &lt;code&gt;&lt;a href=&quot;../memory_order&quot;&gt;std::memory_order_release&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../memory_order&quot;&gt;std::memory_order_acq_rel&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bc40b809d45344c01e560fa6cceda0d52a26206" translate="yes" xml:space="preserve">
          <source>the memory synchronization ordering for the load operation if the comparison fails. Cannot be &lt;code&gt;&lt;a href=&quot;../memory_order&quot;&gt;std::memory_order_release&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../memory_order&quot;&gt;std::memory_order_acq_rel&lt;/a&gt;&lt;/code&gt; and cannot specify stronger ordering than &lt;code&gt;success&lt;/code&gt;(until C++17)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06f882a61b804d2a9e07767d0fd1c39fa191ac44" translate="yes" xml:space="preserve">
          <source>the memory synchronization ordering for the load operation if the comparison fails. Cannot be &lt;code&gt;&lt;a href=&quot;memory_order&quot;&gt;std::memory_order_release&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;memory_order&quot;&gt;std::memory_order_acq_rel&lt;/a&gt;&lt;/code&gt; and cannot specify stronger ordering than &lt;code&gt;succ&lt;/code&gt;(until C++17)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e9c575ec69afbfaf2dae419a5b270ac59c464cb" translate="yes" xml:space="preserve">
          <source>the memory synchronization ordering for the read-modify-write operation if the comparison succeeds. All values are permitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e2c90a0148e57ca331de00ec2f76efcec1d9f1e" translate="yes" xml:space="preserve">
          <source>the memory synchronization ordering for this operation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c6ecd42d64b629ffa56d74d2857d924b481a240" translate="yes" xml:space="preserve">
          <source>the memory synchronization ordering for this operation (cannot be &lt;code&gt;&lt;a href=&quot;../memory_order&quot;&gt;std::memory_order_consume&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../memory_order&quot;&gt;std::memory_order_acquire&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;../memory_order&quot;&gt;std::memory_order_acq_rel&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00728729df324b15f382eee55d4c699997cc7a51" translate="yes" xml:space="preserve">
          <source>the memory synchronization ordering for this operation: all values are permitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a15275fb8292cf446e1154475193b0512fbd20a2" translate="yes" xml:space="preserve">
          <source>the memory synchronization ordering for this operation: only &lt;code&gt;&lt;a href=&quot;memory_order&quot;&gt;std::memory_order_relaxed&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;memory_order&quot;&gt;std::memory_order_consume&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;memory_order&quot;&gt;std::memory_order_acquire&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;memory_order&quot;&gt;std::memory_order_seq_cst&lt;/a&gt;&lt;/code&gt; are permitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8e13cc00ce6c34cd6a413cfb690a4be043d5a1d" translate="yes" xml:space="preserve">
          <source>the memory synchronization ordering for this operation: only &lt;code&gt;&lt;a href=&quot;memory_order&quot;&gt;std::memory_order_relaxed&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;memory_order&quot;&gt;std::memory_order_release&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;memory_order&quot;&gt;std::memory_order_seq_cst&lt;/a&gt;&lt;/code&gt; are permitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44663eb508f8ceaf7853003a519766b9656ff43d" translate="yes" xml:space="preserve">
          <source>the memory synchronization ordering for this operation: only &lt;code&gt;&lt;a href=&quot;memory_order&quot;&gt;std::memory_order_relaxed&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;memory_order&quot;&gt;std::memory_order_release&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;memory_order&quot;&gt;std::memory_order_seq_cst&lt;/a&gt;&lt;/code&gt; are permitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd5bf15ade95d888b971e466cef6e889c38f86cf" translate="yes" xml:space="preserve">
          <source>the minimum size of the first buffer to allocate; must be greater than zero</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc2cf37b254f707edc573e690575fae3ac7a222c" translate="yes" xml:space="preserve">
          <source>the modulus term (m).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bf33e2d5b5a15d3f1ccf54636a162da51aec0ca" translate="yes" xml:space="preserve">
          <source>the monetary format type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c2583856098e498208db28b37e47395eb37393d" translate="yes" xml:space="preserve">
          <source>the move assignment operator selected for every direct base of &lt;code&gt;T&lt;/code&gt; is trivial;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89f461449f66d3189abcc7a0939040abccfedad3" translate="yes" xml:space="preserve">
          <source>the move assignment operator selected for every non-static class type (or array of class type) member of &lt;code&gt;T&lt;/code&gt; is trivial;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3997e621bcb4fef424cb76f10fbc1e001ba8cea9" translate="yes" xml:space="preserve">
          <source>the move constructor selected for every direct base of &lt;code&gt;T&lt;/code&gt; is trivial;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc17620efddb4b46d55a2a9d695ff5ac1fde5830" translate="yes" xml:space="preserve">
          <source>the move constructor selected for every non-static class type (or array of class type) member of &lt;code&gt;T&lt;/code&gt; is trivial;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02d676cbd56837413074b619fa82f1d4b166f18c" translate="yes" xml:space="preserve">
          <source>the multiplier term (a).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a7399e180e667a1fc2ac58859f92898c37f1e5c" translate="yes" xml:space="preserve">
          <source>the name of a previously-declared class type, optionally &lt;a href=&quot;name#Qualified_identifiers&quot;&gt;qualified&lt;/a&gt;, or an identifier not previously declared as a type name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a013f3355377e1a4a6114adf10351bd7188552d" translate="yes" xml:space="preserve">
          <source>the name of a previously-declared enumeration type, optionally &lt;a href=&quot;name#Qualified_identifiers&quot;&gt;qualified&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfd51c626154bd835814a2e19db84ba2902edfbf" translate="yes" xml:space="preserve">
          <source>the name of a variable, a function, a &lt;a href=&quot;template_parameters#Non-type_template_parameter&quot;&gt;template parameter object&lt;/a&gt;(since C++20), or a data member, regardless of type, such as &lt;code&gt;&lt;a href=&quot;../io/cin&quot;&gt;std::cin&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../io/manip/endl&quot;&gt;std::endl&lt;/a&gt;&lt;/code&gt;. Even if the variable's type is rvalue reference, the expression consisting of its name is an lvalue expression;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34837f330494b411df85f026c0386e0679f2e9a3" translate="yes" xml:space="preserve">
          <source>the name of the bit field that is being declared. The name is optional: nameless bitfields introduce the specified number of bits of padding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c08f156f487c02a069b9158644ea45245953e471" translate="yes" xml:space="preserve">
          <source>the name of the class template followed by template argument list for the partial specialization, where each argument is equivalent to its corresponding parameter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37db9c12cc8f56b55b95fe76745626998ee6fc07" translate="yes" xml:space="preserve">
          <source>the name of the class that's being defined. Optionally &lt;a href=&quot;name#Qualified_identifiers&quot;&gt;qualified&lt;/a&gt;, optionally followed by keyword &lt;a href=&quot;../keyword/final&quot;&gt;final&lt;/a&gt;. The name may be omitted, in which case the class is unnamed (note that unnamed class cannot be &lt;a href=&quot;final&quot;&gt;final&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7df9b56f58a5b7ef94af76d2a8639c00d8725bc" translate="yes" xml:space="preserve">
          <source>the name of the class that's being defined. Optionally prepended by nested-name-specifier (sequence of names and scope-resolution operators, ending with scope-resolution operator), optionally followed by keyword &lt;a href=&quot;../keyword/final&quot;&gt;final&lt;/a&gt;. The name may be omitted, in which case the class is unnamed (note that unnamed class cannot be final)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de796765bdf229cfee3abd7814e045850d23dea0" translate="yes" xml:space="preserve">
          <source>the name of the enumeration that's being declared. If present, and if this declaration is a re-declaration, it may be preceded by nested-name-specifier(since C++11): sequence of names and scope-resolution operators &lt;code&gt;::&lt;/code&gt;, ending with scope-resolution operator. The name can be omitted only in unscoped enumeration declarations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da3bce322c3431b58e29a5ee61f2d63c164e27a4" translate="yes" xml:space="preserve">
          <source>the name of the file to be opened</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6bab3b7ea0e8899e7c777c88e0b21ddfd7df85c" translate="yes" xml:space="preserve">
          <source>the name of the locale</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53bd1cea4f0e8dee7e4e8ad199e3dd087d0394b6" translate="yes" xml:space="preserve">
          <source>the name of the union that's being defined. Optionally prepended by nested-name-specifier (sequence of names and scope-resolution operators, ending with scope-resolution operator). The name may be omitted, in which case the union is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="816b835cf144901fb9b30d6f03362da81d2251b8" translate="yes" xml:space="preserve">
          <source>the name that is introduced by this declaration, which becomes either a type name (1) or a template name (2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8f928bc756995aa9fa44f17f972cdadba11e535" translate="yes" xml:space="preserve">
          <source>the named parameter preceding the first variable parameter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3182b3c8790174d74336244b05979effb0602023" translate="yes" xml:space="preserve">
          <source>the new global C++ locale</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9cf477b8251e9e9b54e20069c4a267e30527192" translate="yes" xml:space="preserve">
          <source>the new locale</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c4d1fb6e9ed2542cc7c0312c608e8016066f62c" translate="yes" xml:space="preserve">
          <source>the new object is of the same type as the original object (ignoring cv-qualification).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="295410e779c2b18aa2181f25f1d5b1c8cf690c75" translate="yes" xml:space="preserve">
          <source>the new object is of the same type as the original object (ignoring the top-level cv-qualifiers)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="488800abf52c4228d9b23c15b6752454b3296414" translate="yes" xml:space="preserve">
          <source>the new size of the container</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed3de8f229556afe5962d3499efc757e4158f1e7" translate="yes" xml:space="preserve">
          <source>the new synchronization setting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b017f5832c8779fc65da8f6473dc9a43667a5331" translate="yes" xml:space="preserve">
          <source>the next available character &lt;code&gt;c&lt;/code&gt; in the input sequence is &lt;code&gt;delim&lt;/code&gt;, as determined by &lt;code&gt;Traits::eq_int_type(Traits::to_int_type(c), delim)&lt;/code&gt;. The delimiter character is extracted and discarded. This test is disabled if &lt;code&gt;delim&lt;/code&gt; is &lt;code&gt;Traits::eof()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07e96e08576561c57bea9715a0f011eb5f08a56c" translate="yes" xml:space="preserve">
          <source>the next available character &lt;code&gt;c&lt;/code&gt; in the input sequence is not whitespace as determined by &lt;code&gt;std::isspace(c, is.getloc())&lt;/code&gt;. The non-whitespace character is not extracted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59bfcde6365665cb649af998af08a6c8afa86710" translate="yes" xml:space="preserve">
          <source>the next available character &lt;code&gt;c&lt;/code&gt; is the delimiter, as determined by &lt;code&gt;Traits::eq(c, delim)&lt;/code&gt;. The delimiter is extracted (unlike &lt;a href=&quot;get&quot;&gt;&lt;code&gt;basic_istream::get()&lt;/code&gt;&lt;/a&gt;) and counted towards &lt;code&gt;gcount()&lt;/code&gt;, but is not stored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="444ed4aed54ef47f6d7522951659530110e1ea92" translate="yes" xml:space="preserve">
          <source>the next available character on the input stream is not a whitespace character, as tested by the &lt;code&gt;&lt;a href=&quot;../locale/ctype&quot;&gt;std::ctype&lt;/a&gt;&lt;/code&gt; facet of the locale currently imbued in this input stream. The non-whitespace character is not extracted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b8c5b06325c793c55237d0b57fa73948fdfe704" translate="yes" xml:space="preserve">
          <source>the next available input character &lt;code&gt;c&lt;/code&gt; equals &lt;code&gt;delim&lt;/code&gt;, as determined by &lt;code&gt;Traits::eq(c, delim)&lt;/code&gt;. This character is not extracted (unlike &lt;a href=&quot;getline&quot;&gt;&lt;code&gt;basic_istream::getline()&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df54cd6a1436cc89eec9681b273683e50bd93b18" translate="yes" xml:space="preserve">
          <source>the next available input character &lt;code&gt;c&lt;/code&gt; equals &lt;code&gt;delim&lt;/code&gt;, as determined by &lt;code&gt;Traits::eq(c, delim)&lt;/code&gt;. This character is not extracted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8d60b2c50aab60aa6d793363a2cbb6575522fbe" translate="yes" xml:space="preserve">
          <source>the next character is neither &lt;code&gt;is.widen('0')&lt;/code&gt; nor &lt;code&gt;is.widen('1')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd1fb99ced3b849f0e230eec5aed5a78e160750c" translate="yes" xml:space="preserve">
          <source>the next multibyte character to be stored would exceed &lt;code&gt;len&lt;/code&gt;. &lt;code&gt;src&lt;/code&gt; is set to point at the first unconverted wide character. This condition is not checked if &lt;code&gt;dst==&lt;a href=&quot;../../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e760e6bbd706d40f9ba46f158d24b6be3d814313" translate="yes" xml:space="preserve">
          <source>the next variable parameter in &lt;code&gt;ap&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0970326e052ea9676c702d2c99a01e58551ce0d7" translate="yes" xml:space="preserve">
          <source>the next wide character to be stored would exceed &lt;code&gt;len&lt;/code&gt;. &lt;code&gt;src&lt;/code&gt; is set to point at the beginning of the first unconverted multibyte character. This condition is not checked if &lt;code&gt;dst==&lt;a href=&quot;../../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57e37baa16671bb24810fbaffaaf637988956d47" translate="yes" xml:space="preserve">
          <source>the non-explicit conversion functions from &lt;code&gt;S&lt;/code&gt; and its base classes (unless hidden) to &lt;code&gt;T&lt;/code&gt; or class derived from &lt;code&gt;T&lt;/code&gt; or a reference to such. If this copy-initialization is part of the direct-initialization sequence of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce2d92c706daf5f4f3d3e300db3869dba026e3be" translate="yes" xml:space="preserve">
          <source>the non-explicit user-defined conversion functions of &lt;code&gt;S&lt;/code&gt; and its base classes (unless hidden) that produce type &lt;code&gt;T&lt;/code&gt; or a type convertible to &lt;code&gt;T&lt;/code&gt; by a &lt;a href=&quot;implicit_cast&quot;&gt;standard conversion sequence&lt;/a&gt;, or a reference to such type. cv qualifiers on the returned type are ignored for the purpose of selecting candidate functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c400820275bb4a1e4cfb3d66f529196c3940b6e" translate="yes" xml:space="preserve">
          <source>the non-explicit user-defined conversion functions of &lt;code&gt;S&lt;/code&gt; and its base classes (unless hidden) to the type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e946d9b2a259c397fd4478cb0648b675b2d008d" translate="yes" xml:space="preserve">
          <source>the non-static data members of its member anonymous unions;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae5444dc6d7aea9fd27ed5da85447458d09fc5e0" translate="yes" xml:space="preserve">
          <source>the null-terminated character string to be inserted into the stream after each output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35d57cddc6f234f81239052a43e077ac704b0489" translate="yes" xml:space="preserve">
          <source>the number base</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82af2cb2921e5e4dce52af8de0126864cb6afe6b" translate="yes" xml:space="preserve">
          <source>the number of &lt;code&gt;shared_ptr&lt;/code&gt; instances managing the current object or &lt;code&gt;​0​&lt;/code&gt; if there is no managed object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c73ca5be309fc10ce899393355cf572b3d45a2bc" translate="yes" xml:space="preserve">
          <source>the number of &lt;code&gt;shared_ptr&lt;/code&gt;s that own the managed object;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4599a71ac9dfa05a6d8f9cc251d8617162c9218c" translate="yes" xml:space="preserve">
          <source>the number of &lt;code&gt;weak_ptr&lt;/code&gt;s that refer to the managed object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a354ded02e2c4657b44f9e255ed2acd4049f13ad" translate="yes" xml:space="preserve">
          <source>the number of CharT elements in the user-provided buffer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a06a9776ef5bfbb7e8c4e610b1f639ac9ed00b20" translate="yes" xml:space="preserve">
          <source>the number of CharT elements in the user-provided buffer or zero</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25297f7ce8a0d5ea9a312be07eba02b2ff33fc5e" translate="yes" xml:space="preserve">
          <source>the number of bits the generated numbers should have</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11a09f553a3e492f2fd940b2b08b8f942d80d65e" translate="yes" xml:space="preserve">
          <source>the number of bits to allocate storage for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6350e4185e4378cf8d2c2a8bbc66b8f98c504ab" translate="yes" xml:space="preserve">
          <source>the number of bytes &lt;code&gt;[1...n]&lt;/code&gt; of the multibyte character successfully converted from &lt;code&gt;s&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90ec49260fce691d95da7e5d016fd69601c49a07" translate="yes" xml:space="preserve">
          <source>the number of bytes in the get area (if pbeg is null) or in the put area (if pbeg is not null) of the user-provided array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d2e96e7824c544a1c881bfb8d0908065078643a" translate="yes" xml:space="preserve">
          <source>the number of bytes in the range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b221d5487d6fc359e31372456c399c5e77e76fff" translate="yes" xml:space="preserve">
          <source>the number of bytes in the range, same value as previously used with &lt;code&gt;&lt;a href=&quot;declare_no_pointers&quot;&gt;std::declare_no_pointers&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98b583c5a7a46cdb9cfb500bf34ebc44b3384b22" translate="yes" xml:space="preserve">
          <source>the number of bytes in the user-provided buffer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="255b1706d886083cbb675bd4de6b2959a0ec5ab0" translate="yes" xml:space="preserve">
          <source>the number of bytes originally allocated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="795479b82e95c525e23d22b8da5d75f3ead52c5f" translate="yes" xml:space="preserve">
          <source>the number of bytes to allocate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4650eba636889bbba136ae9c5b4b530fbe8725f" translate="yes" xml:space="preserve">
          <source>the number of characters to analyze</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b95dea6573d468f5e0766b2cf5e73d6182e1e02f" translate="yes" xml:space="preserve">
          <source>the number of characters to compare from each character string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a5a0066c30459bb51d26e79540fc1678462ff4d" translate="yes" xml:space="preserve">
          <source>the number of characters to copy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60c12e93895d53e94580df8ffdc55bdbda620ee0" translate="yes" xml:space="preserve">
          <source>the number of densities</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="218e0778fa7f3b40abaea676aceeb85d18682d9b" translate="yes" xml:space="preserve">
          <source>the number of digits after the decimal point to display in a monetary quantity</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68dd91ccc2a74e71df691874588ac5114df484af" translate="yes" xml:space="preserve">
          <source>the number of digits after the decimal point to display in an international monetary quantity</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a60b4b93986f97476c7948a1f5f58b8813dfad4" translate="yes" xml:space="preserve">
          <source>the number of dimensions of &lt;code&gt;T&lt;/code&gt; or zero</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0db520278ee4694187ba8c190a1e8dbfd5257819" translate="yes" xml:space="preserve">
          <source>the number of elements along the &lt;code&gt;N&lt;/code&gt;th dimension of &lt;code&gt;T&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73845dfa53ddf7e0f27a2a321ed061e9e75d8505" translate="yes" xml:space="preserve">
          <source>the number of elements in the initializer list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9970f345e3233f532871c567697108ea557398e7" translate="yes" xml:space="preserve">
          <source>the number of elements in the sequence, or &lt;code&gt;std::dynamic_extent&lt;/code&gt; if dynamic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="773673fa6e28fee2898cb88d27f06faefe3334c1" translate="yes" xml:space="preserve">
          <source>the number of elements in the slice</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a0b8800dd326bf591c290ee87005fb6bc6d6485" translate="yes" xml:space="preserve">
          <source>the number of elements to apply the function to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c560990d88daf672b4160f6beb98253f8a748190" translate="yes" xml:space="preserve">
          <source>the number of elements to construct</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81f1662694ad4631a09141522ca06b9c0c93552b" translate="yes" xml:space="preserve">
          <source>the number of elements to destroy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7db48bd0e3920c1efb87a9f941b6935c4f25420" translate="yes" xml:space="preserve">
          <source>the number of elements to initialize</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10ea2dcbc381af2c0ef82dbba5a3522e53427be9" translate="yes" xml:space="preserve">
          <source>the number of hours</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a37c8b78496a110425afe04d2d740fec645931a" translate="yes" xml:space="preserve">
          <source>the number of levels &lt;code&gt;n&lt;/code&gt; is the same for both pointers;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4ec8201a6f3daf6cf0ac8d570cfc9061b7870b7" translate="yes" xml:space="preserve">
          <source>the number of microseconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6bb5714c9d6303bf2f3a723dee9e4f40c7e3b7e" translate="yes" xml:space="preserve">
          <source>the number of milliseconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad2da7113934a03644d1747b09d32b5bad2a8d57" translate="yes" xml:space="preserve">
          <source>the number of minutes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="711d8f37307545eda107dd54c0f0b82620a82a30" translate="yes" xml:space="preserve">
          <source>the number of nanoseconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bc005ffa0a0ff82f17772bbc9ad2625189c0b10" translate="yes" xml:space="preserve">
          <source>the number of objects for which the memory was allocated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25fd4f3d613855be655f2eb7c2112df6bab0a4d2" translate="yes" xml:space="preserve">
          <source>the number of objects originally allocated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d2fa6e6eed2eee987067d78842ea69028e38062" translate="yes" xml:space="preserve">
          <source>the number of objects the storage was allocated for</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
