<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="en" datatype="htmlbody" original="python">
    <body>
      <group id="python">
        <trans-unit id="3c605662dab5a29ccef91d000e38909b7e68ed8f" translate="yes" xml:space="preserve">
          <source>Python&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement supports the concept of a runtime context defined by a context manager. This is implemented using a pair of methods that allow user-defined classes to define a runtime context that is entered before the statement body is executed and exited when the statement ends:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62fc66372953f6ab112fc8bd0382a503991fcf19" translate="yes" xml:space="preserve">
          <source>Python&amp;rsquo;s built-in I/O library, including both abstract classes and some concrete classes such as file I/O.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a375ced3f944826fda74f05d6e50538bb8b37488" translate="yes" xml:space="preserve">
          <source>Python&amp;rsquo;s interfaces for processing XML are grouped in the &lt;code&gt;xml&lt;/code&gt; package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8db5f8b1f1148220554e3b71399989ac48a9561a" translate="yes" xml:space="preserve">
          <source>Python&amp;rsquo;s standard library is very extensive, offering a wide range of facilities as indicated by the long table of contents listed below. The library contains built-in modules (written in C) that provide access to system functionality such as file I/O that would otherwise be inaccessible to Python programmers, as well as modules written in Python that provide standardized solutions for many problems that occur in everyday programming. Some of these modules are explicitly designed to encourage and enhance the portability of Python programs by abstracting away platform-specifics into platform-neutral APIs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a56d74116e43a96d3671879a0a1353285c0a42d1" translate="yes" xml:space="preserve">
          <source>Q. I noticed that context precision is applied to the results of operations but not to the inputs. Is there anything to watch out for when mixing values of different precisions?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="184e8ee9a97600966afe3fe06142b4741fecfdc6" translate="yes" xml:space="preserve">
          <source>Q. In a fixed-point application with two decimal places, some inputs have many places and need to be rounded. Others are not supposed to have excess digits and need to be validated. What methods should be used?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf287f2c6a76496fdced9da2a97d5411e4cd69a2" translate="yes" xml:space="preserve">
          <source>Q. Is the CPython implementation fast for large numbers?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41099d70c4a2d310ac02e2147ae184e06ddd6db1" translate="yes" xml:space="preserve">
          <source>Q. Is there a way to convert a regular float to a &lt;a href=&quot;#decimal.Decimal&quot;&gt;&lt;code&gt;Decimal&lt;/code&gt;&lt;/a&gt;?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a4cfd94822d098abcdf3a658fff987ccb270559" translate="yes" xml:space="preserve">
          <source>Q. It is cumbersome to type &lt;code&gt;decimal.Decimal('1234.5')&lt;/code&gt;. Is there a way to minimize typing when using the interactive interpreter?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="434b41406d63e88e90b7a2e94979b5737ff0a790" translate="yes" xml:space="preserve">
          <source>Q. Once I have valid two place inputs, how do I maintain that invariant throughout an application?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a552838f973a788a3762885e44efbeb55fed4de6" translate="yes" xml:space="preserve">
          <source>Q. Some decimal values always print with exponential notation. Is there a way to get a non-exponential representation?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efdff4caeb47a86ad4dcce8a816e26d400c5a2ef" translate="yes" xml:space="preserve">
          <source>Q. There are many ways to express the same value. The numbers &lt;code&gt;200&lt;/code&gt;, &lt;code&gt;200.000&lt;/code&gt;, &lt;code&gt;2E2&lt;/code&gt;, and &lt;code&gt;02E+4&lt;/code&gt; all have the same value at various precisions. Is there a way to transform them to a single recognizable canonical value?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12c5b25eefaaf388326b462caef87d681c47cf1f" translate="yes" xml:space="preserve">
          <source>Q. Within a complex calculation, how can I make sure that I haven&amp;rsquo;t gotten a spurious result because of insufficient precision or rounding anomalies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="332067183f2ce95de719c0a525e235eae58d074a" translate="yes" xml:space="preserve">
          <source>QName Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2fce752ca401b308d2ac6e2708b36aff84ff002" translate="yes" xml:space="preserve">
          <source>QName wrapper. This can be used to wrap a QName attribute value, in order to get proper namespace handling on output. &lt;em&gt;text_or_uri&lt;/em&gt; is a string containing the QName value, in the form {uri}local, or, if the tag argument is given, the URI part of a QName. If &lt;em&gt;tag&lt;/em&gt; is given, the first argument is interpreted as a URI, and this argument is interpreted as a local name. &lt;a href=&quot;#xml.etree.ElementTree.QName&quot;&gt;&lt;code&gt;QName&lt;/code&gt;&lt;/a&gt; instances are opaque.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5860c8458788e44e7636fa364548e067049a0d7b" translate="yes" xml:space="preserve">
          <source>QUIT</source>
          <target state="translated">QUIT</target>
        </trans-unit>
        <trans-unit id="73b2ff0d16b082ecede8e9b05601f92714c8c513" translate="yes" xml:space="preserve">
          <source>Queries on ST Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab66121a0bc7c0b8a6aaee889cc54e93513b06e9" translate="yes" xml:space="preserve">
          <source>Queries the given executable (defaults to the Python interpreter binary) for various architecture information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="299ec896adc2c252dcea6805c40e9a91a11f850a" translate="yes" xml:space="preserve">
          <source>Query component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0404dd683dbc5f71444913158ce10905f534d293" translate="yes" xml:space="preserve">
          <source>Query or modify horizontal position of the treeview.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3137551469b1aac6319fe3bb1f6f5dc55c48802" translate="yes" xml:space="preserve">
          <source>Query or modify the configuration options of the Tix application context. If no option is specified, returns a dictionary all of the available options. If option is specified with no value, then the method returns a list describing the one named option (this list will be identical to the corresponding sublist of the value returned if no option is specified). If one or more option-value pairs are specified, then the method modifies the given option(s) to have the given value(s); in this case the method returns an empty string. Option may be any of the configuration options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3411c4b5457d5f86c7ff912b35ce82d4368a90e" translate="yes" xml:space="preserve">
          <source>Query or modify the heading options for the specified &lt;em&gt;column&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1eb3b4198a33afbb12fb74d12272ff4ad1739f1" translate="yes" xml:space="preserve">
          <source>Query or modify the options for the specified &lt;em&gt;column&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="069eb8475b8cd15fc964be359e94827025782b6b" translate="yes" xml:space="preserve">
          <source>Query or modify the options for the specified &lt;em&gt;item&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="723650e9732d43f711b60b214741478002d36c63" translate="yes" xml:space="preserve">
          <source>Query or modify the options for the specified &lt;em&gt;tagname&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d31c0506051a5a4710db0bff55099734b00676f0" translate="yes" xml:space="preserve">
          <source>Query or modify the options of the specific &lt;em&gt;tab_id&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="530c55b9295c467994e092bafdf0d25b46ddc05e" translate="yes" xml:space="preserve">
          <source>Query or modify vertical position of the treeview.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a54e9015afaf3040642420dd5908057649fd153b" translate="yes" xml:space="preserve">
          <source>Query or set the default value of the specified option(s) in &lt;em&gt;style&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ccecafbaa149fddd3ee35e984ca1f1ff13368e9" translate="yes" xml:space="preserve">
          <source>Query or sets dynamic values of the specified option(s) in &lt;em&gt;style&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b7011e503bd87a591251a590e176d2f8118d9ce" translate="yes" xml:space="preserve">
          <source>Query the server&amp;rsquo;s capabilities as specified in &lt;a href=&quot;https://tools.ietf.org/html/rfc2449.html&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;RFC 2449&lt;/strong&gt;&lt;/a&gt;. Returns a dictionary in the form &lt;code&gt;{'name': ['param'...]}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="449bae23eac37a985c7d71e5a4cb82646b71e61c" translate="yes" xml:space="preserve">
          <source>Querying path properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ae17d7b262729ea440d0673b507aa9e8c22bd4a" translate="yes" xml:space="preserve">
          <source>Querying the size of a terminal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c37f91c2a4c0dfd4703731640367d2f6614c4abc" translate="yes" xml:space="preserve">
          <source>Querying the size of the output terminal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="002ff598115d84595ffeee6219cb5c03d3a1d4a6" translate="yes" xml:space="preserve">
          <source>Question</source>
          <target state="translated">Question</target>
        </trans-unit>
        <trans-unit id="d325fcd919384f395c02751e03d2cd0288b98cca" translate="yes" xml:space="preserve">
          <source>Queue</source>
          <target state="translated">Queue</target>
        </trans-unit>
        <trans-unit id="bd67243a09150c1cca311daac0a967d7282fadc5" translate="yes" xml:space="preserve">
          <source>Queue Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fa61222581c10ad0120496b1f531fd922fa2b3a" translate="yes" xml:space="preserve">
          <source>Queue objects (&lt;a href=&quot;#queue.Queue&quot;&gt;&lt;code&gt;Queue&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#queue.LifoQueue&quot;&gt;&lt;code&gt;LifoQueue&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;#queue.PriorityQueue&quot;&gt;&lt;code&gt;PriorityQueue&lt;/code&gt;&lt;/a&gt;) provide the public methods described below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f425cbe378acfd9f1a8de93cea4965d49b9e251" translate="yes" xml:space="preserve">
          <source>QueueHandler</source>
          <target state="translated">QueueHandler</target>
        </trans-unit>
        <trans-unit id="2f1f3352372721053da1ab577f2842c42e6e8dfd" translate="yes" xml:space="preserve">
          <source>QueueListener</source>
          <target state="translated">QueueListener</target>
        </trans-unit>
        <trans-unit id="83dbc32040459c6d170231f099414d8cc8806687" translate="yes" xml:space="preserve">
          <source>Queues</source>
          <target state="translated">Queues</target>
        </trans-unit>
        <trans-unit id="ad29d9b9f009a6cdb44666226a27ecac9d357b47" translate="yes" xml:space="preserve">
          <source>Queues are thread and process safe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ab9e848689bfc7257f1be1f467e76856e54b587" translate="yes" xml:space="preserve">
          <source>Queues can be used to distribute workload between several concurrent tasks:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e96968057fbbd4d3efa5fc0f76107086ff30c0d" translate="yes" xml:space="preserve">
          <source>Queues should be used to distribute work amongst multiple asyncio Tasks, implement connection pools, and pub/sub patterns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d2b679e22dfa3101d1ba7bf2ec43c351c8ef687" translate="yes" xml:space="preserve">
          <source>Quick Guide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="455083cac2ae96eabe3895762b6080aa09e6afa4" translate="yes" xml:space="preserve">
          <source>Quick Start</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dd0abc6c28752043604672ca88d6f1a334a8032" translate="yes" xml:space="preserve">
          <source>Quick-start Tutorial</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4babb1d9227e9cf95369d0a1db1908f28649b65e" translate="yes" xml:space="preserve">
          <source>Quiet and signaling NaNs are also included in the total ordering. The result of this function is &lt;code&gt;Decimal('0')&lt;/code&gt; if both operands have the same representation, &lt;code&gt;Decimal('-1')&lt;/code&gt; if the first operand is lower in the total order than the second, and &lt;code&gt;Decimal('1')&lt;/code&gt; if the first operand is higher in the total order than the second operand. See the specification for details of the total order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c32ccfb23b10eafc366f5df18350d5e5c78818c6" translate="yes" xml:space="preserve">
          <source>Quit from the debugger. The program being executed is aborted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9a049dd51f6f6165f82600419d9408a49973ebc" translate="yes" xml:space="preserve">
          <source>Quota exceeded</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d948c11d9b187ba19486b6cb13c596158cb156b8" translate="yes" xml:space="preserve">
          <source>Quote characters are not recognized within words (&lt;code&gt;Do&quot;Not&quot;Separate&lt;/code&gt; is parsed as the single word &lt;code&gt;Do&quot;Not&quot;Separate&lt;/code&gt;);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf43703d976b5083d479d158bf1057729ed499a1" translate="yes" xml:space="preserve">
          <source>Quoted empty strings (&lt;code&gt;''&lt;/code&gt;) are allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1de88b7a5518f32064e4736088839ca0a35cef5f" translate="yes" xml:space="preserve">
          <source>Quotes are stripped out, and do not separate words (&lt;code&gt;&quot;Do&quot;Not&quot;Separate&quot;&lt;/code&gt; is parsed as the single word &lt;code&gt;DoNotSeparate&lt;/code&gt;);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3baf119d765d9f829905b317e59f73675764e9ee" translate="yes" xml:space="preserve">
          <source>Quoting the docs for that value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06576556d1ad802f247cad11ae748be47b70cd9c" translate="yes" xml:space="preserve">
          <source>R</source>
          <target state="translated">R</target>
        </trans-unit>
        <trans-unit id="cabc5c96018f7018921f4448490e0330a4b89f05" translate="yes" xml:space="preserve">
          <source>R flag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4acdb8f75fc10aeabb85627f5b065c26ab3a0d42" translate="yes" xml:space="preserve">
          <source>R flag and O flag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c54a6c7f5be551f84672806b45e8628a63c06c62" translate="yes" xml:space="preserve">
          <source>RCPT</source>
          <target state="translated">RCPT</target>
        </trans-unit>
        <trans-unit id="971a36c4421e4cbb57c2d5af10bfa1a4e0b52c61" translate="yes" xml:space="preserve">
          <source>RFS specific error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c12ad208e53e2457d4dd4d5838ee8fb9e6f7b91" translate="yes" xml:space="preserve">
          <source>RLock Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b86aad6bcd44688901d1d90d82637c77c09de567" translate="yes" xml:space="preserve">
          <source>RSET</source>
          <target state="translated">RSET</target>
        </trans-unit>
        <trans-unit id="a1c2f06372ca0b2789b9b64df1a575c0e730b3a4" translate="yes" xml:space="preserve">
          <source>Raise &lt;a href=&quot;#ssl.SSLWantReadError&quot;&gt;&lt;code&gt;SSLWantReadError&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#ssl.SSLWantWriteError&quot;&gt;&lt;code&gt;SSLWantWriteError&lt;/code&gt;&lt;/a&gt; if the socket is &lt;a href=&quot;#ssl-nonblocking&quot;&gt;non-blocking&lt;/a&gt; and the read would block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="487f22f4c2f92d02b3f0636b5755e31f6f23e284" translate="yes" xml:space="preserve">
          <source>Raise &lt;a href=&quot;#ssl.SSLWantReadError&quot;&gt;&lt;code&gt;SSLWantReadError&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#ssl.SSLWantWriteError&quot;&gt;&lt;code&gt;SSLWantWriteError&lt;/code&gt;&lt;/a&gt; if the socket is &lt;a href=&quot;#ssl-nonblocking&quot;&gt;non-blocking&lt;/a&gt; and the write would block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2bd0f4cf527cddda0cf32631211e4b1d3a115b2" translate="yes" xml:space="preserve">
          <source>Raise &lt;a href=&quot;#test.support.ResourceDenied&quot;&gt;&lt;code&gt;ResourceDenied&lt;/code&gt;&lt;/a&gt; if &lt;em&gt;resource&lt;/em&gt; is not available. &lt;em&gt;msg&lt;/em&gt; is the argument to &lt;a href=&quot;#test.support.ResourceDenied&quot;&gt;&lt;code&gt;ResourceDenied&lt;/code&gt;&lt;/a&gt; if it is raised. Always returns &lt;code&gt;True&lt;/code&gt; if called by a function whose &lt;code&gt;__name__&lt;/code&gt; is &lt;code&gt;'__main__'&lt;/code&gt;. Used when tests are executed by &lt;code&gt;test.regrtest&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab18aff48bbfd5b6a5bf472b5ad070ee5656353a" translate="yes" xml:space="preserve">
          <source>Raise &lt;a href=&quot;asyncio-exceptions#asyncio.SendfileNotAvailableError&quot;&gt;&lt;code&gt;SendfileNotAvailableError&lt;/code&gt;&lt;/a&gt; if the system does not support &lt;em&gt;sendfile&lt;/em&gt; syscall and &lt;em&gt;fallback&lt;/em&gt; is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="527292d4de0f371692e481985d15cb116d202b2d" translate="yes" xml:space="preserve">
          <source>Raise &lt;a href=&quot;asyncio-exceptions#asyncio.SendfileNotAvailableError&quot;&gt;&lt;code&gt;SendfileNotAvailableError&lt;/code&gt;&lt;/a&gt; if the system does not support the &lt;em&gt;sendfile&lt;/em&gt; syscall and &lt;em&gt;fallback&lt;/em&gt; is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3949a795c96bcc51f936b853e92dc8da9c47436c" translate="yes" xml:space="preserve">
          <source>Raise &lt;a href=&quot;exceptions#EOFError&quot;&gt;&lt;code&gt;EOFError&lt;/code&gt;&lt;/a&gt; if connection closed and no cooked data available. Return &lt;code&gt;b''&lt;/code&gt; if no cooked data available otherwise. Do not block unless in the midst of an IAC sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="962bd72f06e8e4fc81d5eb5e468371d15b1b67d9" translate="yes" xml:space="preserve">
          <source>Raise &lt;a href=&quot;exceptions#EOFError&quot;&gt;&lt;code&gt;EOFError&lt;/code&gt;&lt;/a&gt; if connection closed and no data available. Return &lt;code&gt;b''&lt;/code&gt; if no cooked data available otherwise. Do not block unless in the midst of an IAC sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97f0fa880269b6b6271c64f1f4a208758cb64d47" translate="yes" xml:space="preserve">
          <source>Raise &lt;a href=&quot;exceptions#EOFError&quot;&gt;&lt;code&gt;EOFError&lt;/code&gt;&lt;/a&gt; if connection closed and no data available. Return &lt;code&gt;b''&lt;/code&gt; if no cooked data available otherwise. This method never blocks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b3410be4134473ff83a9cf274834d1bb99e74ab" translate="yes" xml:space="preserve">
          <source>Raise &lt;a href=&quot;exceptions#UnicodeError&quot;&gt;&lt;code&gt;UnicodeError&lt;/code&gt;&lt;/a&gt; (or a subclass); this is the default. Implemented in &lt;a href=&quot;#codecs.strict_errors&quot;&gt;&lt;code&gt;strict_errors()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f67c030aedb349de53ad484b068199c66d4cd06" translate="yes" xml:space="preserve">
          <source>Raise &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; if the signal number is invalid or uncatchable. Raise &lt;a href=&quot;exceptions#RuntimeError&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt; if there is a problem setting up the handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="814415113c0c8decdf1d88d3ed37e7070bc13872" translate="yes" xml:space="preserve">
          <source>Raise &lt;a href=&quot;unittest#unittest.SkipTest&quot;&gt;&lt;code&gt;unittest.SkipTest&lt;/code&gt;&lt;/a&gt; on TLS certification validation failures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="308c5a294475831ade67dc9414117e18e489fe7b" translate="yes" xml:space="preserve">
          <source>Raise a &lt;a href=&quot;exceptions#NotImplementedError&quot;&gt;&lt;code&gt;NotImplementedError&lt;/code&gt;&lt;/a&gt; exception. Override this in subclasses to do something useful with this message. Whatever was passed in the constructor as &lt;em&gt;remoteaddr&lt;/em&gt; will be available as the &lt;code&gt;_remoteaddr&lt;/code&gt; attribute. &lt;em&gt;peer&lt;/em&gt; is the remote host&amp;rsquo;s address, &lt;em&gt;mailfrom&lt;/em&gt; is the envelope originator, &lt;em&gt;rcpttos&lt;/em&gt; are the envelope recipients and &lt;em&gt;data&lt;/em&gt; is a string containing the contents of the e-mail (which should be in &lt;a href=&quot;https://tools.ietf.org/html/rfc5321.html&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 5321&lt;/strong&gt;&lt;/a&gt; format).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65e72f948dcfe673bb8541b444b8355706436e8a" translate="yes" xml:space="preserve">
          <source>Raise a &lt;a href=&quot;urllib.error#urllib.error.URLError&quot;&gt;&lt;code&gt;URLError&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="614b50a0330db1e9fafcc7da211960ef6fb721cb" translate="yes" xml:space="preserve">
          <source>Raise an &lt;a href=&quot;#pickle.UnpicklingError&quot;&gt;&lt;code&gt;UnpicklingError&lt;/code&gt;&lt;/a&gt; by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b88624f1396637aa9a76429273275f50508df400" translate="yes" xml:space="preserve">
          <source>Raise an &lt;a href=&quot;asyncio-exceptions#asyncio.IncompleteReadError&quot;&gt;&lt;code&gt;IncompleteReadError&lt;/code&gt;&lt;/a&gt; if EOF is reached before &lt;em&gt;n&lt;/em&gt; can be read. Use the &lt;a href=&quot;asyncio-exceptions#asyncio.IncompleteReadError.partial&quot;&gt;&lt;code&gt;IncompleteReadError.partial&lt;/code&gt;&lt;/a&gt; attribute to get the partially read data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a58c93294747790e1b22b847370e743fc01c245" translate="yes" xml:space="preserve">
          <source>Raise an auditing event &lt;code&gt;sys.addaudithook&lt;/code&gt; with no arguments. If any existing hooks raise an exception derived from &lt;a href=&quot;exceptions#RuntimeError&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt;, the new hook will not be added and the exception suppressed. As a result, callers cannot assume that their hook has been added unless they control all existing hooks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca3d89a5fb88f6f9a0bd62453f5695f34f7fa45d" translate="yes" xml:space="preserve">
          <source>Raise an auditing event &lt;code&gt;sys.excepthook&lt;/code&gt; with arguments &lt;code&gt;hook&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;value&lt;/code&gt;, &lt;code&gt;traceback&lt;/code&gt; when an uncaught exception occurs. If no hook has been set, &lt;code&gt;hook&lt;/code&gt; may be &lt;code&gt;None&lt;/code&gt;. If any hook raises an exception derived from &lt;a href=&quot;exceptions#RuntimeError&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt; the call to the hook will be suppressed. Otherwise, the audit hook exception will be reported as unraisable and &lt;code&gt;sys.excepthook&lt;/code&gt; will be called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45011f2084f8278270a25782bcd2640523f13528" translate="yes" xml:space="preserve">
          <source>Raise an auditing event &lt;code&gt;sys.unraisablehook&lt;/code&gt; with arguments &lt;code&gt;hook&lt;/code&gt;, &lt;code&gt;unraisable&lt;/code&gt; when an exception that cannot be handled occurs. The &lt;code&gt;unraisable&lt;/code&gt; object is the same as what will be passed to the hook. If no hook has been set, &lt;code&gt;hook&lt;/code&gt; may be &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="209de910e7786b23db5dc873a89af3a05981debf" translate="yes" xml:space="preserve">
          <source>Raise an auditing event with any active hooks. The event name is a string identifying the event and its associated schema, which is the number and types of arguments. The schema for a given event is considered public and stable API and should not be modified between releases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13cf5b4eef107d04fdb694c15a3c5afda9b3e4e4" translate="yes" xml:space="preserve">
          <source>Raise an error if key is not a valid &lt;a href=&quot;https://tools.ietf.org/html/rfc2109.html&quot; id=&quot;index-7&quot;&gt;&lt;strong&gt;RFC 2109&lt;/strong&gt;&lt;/a&gt; attribute, otherwise behave the same as &lt;a href=&quot;stdtypes#dict.setdefault&quot;&gt;&lt;code&gt;dict.setdefault()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="513ada27286511dfac9e3b76b355e74118db90a0" translate="yes" xml:space="preserve">
          <source>Raise an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b98d56804717a8344b3faca8217587e3500c68a0" translate="yes" xml:space="preserve">
          <source>Raise an exception for all conversions, even empty strings. The error handler is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf3b3c75170387df65e41bc9318129e65dbdf4ee" translate="yes" xml:space="preserve">
          <source>Raise the &lt;a href=&quot;exceptions#SystemExit&quot;&gt;&lt;code&gt;SystemExit&lt;/code&gt;&lt;/a&gt; exception. When not caught, this will cause the thread to exit silently.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ccbc658af15a6aeb17ccf284357dee98b1d51f5" translate="yes" xml:space="preserve">
          <source>Raised by &lt;a href=&quot;#tabnanny.process_tokens&quot;&gt;&lt;code&gt;process_tokens()&lt;/code&gt;&lt;/a&gt; if detecting an ambiguous indent. Captured and handled in &lt;a href=&quot;#tabnanny.check&quot;&gt;&lt;code&gt;check()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91700c02a657d1a22a6d0888df755d5dfb61f79b" translate="yes" xml:space="preserve">
          <source>Raised by any of the functions when an error is detected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="245b5484a84dffa039ee789ab007738e78ad447d" translate="yes" xml:space="preserve">
          <source>Raised by built-in function &lt;a href=&quot;functions#next&quot;&gt;&lt;code&gt;next()&lt;/code&gt;&lt;/a&gt; and an &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-iterator&quot;&gt;iterator&lt;/a&gt;&amp;rsquo;s &lt;a href=&quot;stdtypes#iterator.__next__&quot;&gt;&lt;code&gt;__next__()&lt;/code&gt;&lt;/a&gt; method to signal that there are no further items produced by the iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2983d41c68d982efc0d0b57a90c10a02c160d04c" translate="yes" xml:space="preserve">
          <source>Raised by methods with a timeout when the timeout expires.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc96cf122ef42afab52327246420df5bb1d3c53c" translate="yes" xml:space="preserve">
          <source>Raised by the &lt;a href=&quot;asyncio-stream#asyncio-streams&quot;&gt;asyncio stream APIs&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b51969a7cc445dc68596da644b1a18f7d7fcbb1" translate="yes" xml:space="preserve">
          <source>Raised for module specific errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1baf724ee5fe516d3b35aeb53c1e867b3c240c00" translate="yes" xml:space="preserve">
          <source>Raised if a parameter or an operation is not supported on the underlying object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abf08139e31556af9d9e88d3cf3c121cebad53f2" translate="yes" xml:space="preserve">
          <source>Raised on &lt;a href=&quot;#module-dbm.dumb&quot;&gt;&lt;code&gt;dbm.dumb&lt;/code&gt;&lt;/a&gt;-specific errors, such as I/O errors. &lt;a href=&quot;exceptions#KeyError&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt; is raised for general mapping errors like specifying an incorrect key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da2f1875aa7b05656f96bc8ec5f6498856443e73" translate="yes" xml:space="preserve">
          <source>Raised on &lt;a href=&quot;#module-dbm.gnu&quot;&gt;&lt;code&gt;dbm.gnu&lt;/code&gt;&lt;/a&gt;-specific errors, such as I/O errors. &lt;a href=&quot;exceptions#KeyError&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt; is raised for general mapping errors like specifying an incorrect key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bebf1eb5d03fa1b1f275fdb3636f5eae78a1c67d" translate="yes" xml:space="preserve">
          <source>Raised on &lt;a href=&quot;#module-dbm.ndbm&quot;&gt;&lt;code&gt;dbm.ndbm&lt;/code&gt;&lt;/a&gt;-specific errors, such as I/O errors. &lt;a href=&quot;exceptions#KeyError&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt; is raised for general mapping errors like specifying an incorrect key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b383d0b7cb3f178108fcc45ef0363602bc197b0f" translate="yes" xml:space="preserve">
          <source>Raised on attempts to modify an object where modifications are not allowed (such as for read-only nodes).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ff9f6d3bfabe1e49c2d2cd9998e69b497930e6d" translate="yes" xml:space="preserve">
          <source>Raised on thread-specific errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="537bf0e92bcd7af8483212b23b70188a1ca87261" translate="yes" xml:space="preserve">
          <source>Raised on timeout by functions like &lt;a href=&quot;asyncio-task#asyncio.wait_for&quot;&gt;&lt;code&gt;wait_for()&lt;/code&gt;&lt;/a&gt;. Keep in mind that &lt;code&gt;asyncio.TimeoutError&lt;/code&gt; is &lt;strong&gt;unrelated&lt;/strong&gt; to the built-in &lt;a href=&quot;exceptions#TimeoutError&quot;&gt;&lt;code&gt;TimeoutError&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f3c87e4ded0cbb2cff11ecad1e4e1ec32b13cf1" translate="yes" xml:space="preserve">
          <source>Raised to signal an error from the underlying &lt;a href=&quot;#signal.setitimer&quot;&gt;&lt;code&gt;setitimer()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#signal.getitimer&quot;&gt;&lt;code&gt;getitimer()&lt;/code&gt;&lt;/a&gt; implementation. Expect this error if an invalid interval timer or a negative time is passed to &lt;a href=&quot;#signal.setitimer&quot;&gt;&lt;code&gt;setitimer()&lt;/code&gt;&lt;/a&gt;. This error is a subtype of &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fe1e20fa35932b3cf3d6a9a5e14ed636dc84926" translate="yes" xml:space="preserve">
          <source>Raised to signal an error from the underlying SSL implementation (currently provided by the OpenSSL library). This signifies some problem in the higher-level encryption and authentication layer that&amp;rsquo;s superimposed on the underlying network connection. This error is a subtype of &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt;. The error code and message of &lt;a href=&quot;#ssl.SSLError&quot;&gt;&lt;code&gt;SSLError&lt;/code&gt;&lt;/a&gt; instances are provided by the OpenSSL library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a7e966363f7c43fd69d2d7a8980d282b0fbe461" translate="yes" xml:space="preserve">
          <source>Raised under some error conditions when parsing the &lt;a href=&quot;https://tools.ietf.org/html/rfc5322.html&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 5322&lt;/strong&gt;&lt;/a&gt; headers of a message, this class is derived from &lt;a href=&quot;#email.errors.MessageParseError&quot;&gt;&lt;code&gt;MessageParseError&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;email.message#email.message.EmailMessage.set_boundary&quot;&gt;&lt;code&gt;set_boundary()&lt;/code&gt;&lt;/a&gt; method will raise this error if the content type is unknown when the method is called. &lt;a href=&quot;email.header#email.header.Header&quot;&gt;&lt;code&gt;Header&lt;/code&gt;&lt;/a&gt; may raise this error for certain base64 decoding errors, and when an attempt is made to create a header that appears to contain an embedded header (that is, there is what is supposed to be a continuation line that has no leading whitespace and looks like a header).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="617e5051c07bf55a90ef9fecf77ff467dabb6cb3" translate="yes" xml:space="preserve">
          <source>Raised when a &lt;a href=&quot;https://docs.python.org/3.8/c-api/buffer.html#bufferobjects&quot;&gt;buffer&lt;/a&gt; related operation cannot be performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="187e39f0dad7df3a4efed4d1751d3054ddb97a0a" translate="yes" xml:space="preserve">
          <source>Raised when a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-generator&quot;&gt;generator&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-coroutine&quot;&gt;coroutine&lt;/a&gt; is closed; see &lt;a href=&quot;https://docs.python.org/3.8/reference/expressions.html#generator.close&quot;&gt;&lt;code&gt;generator.close()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#coroutine.close&quot;&gt;&lt;code&gt;coroutine.close()&lt;/code&gt;&lt;/a&gt;. It directly inherits from &lt;a href=&quot;#BaseException&quot;&gt;&lt;code&gt;BaseException&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;#Exception&quot;&gt;&lt;code&gt;Exception&lt;/code&gt;&lt;/a&gt; since it is technically not an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41098d3349464b37af05302ad74bfe09fe931237" translate="yes" xml:space="preserve">
          <source>Raised when a Task is cancelled. See also &lt;a href=&quot;asyncio-task#asyncio.Task.cancel&quot;&gt;&lt;code&gt;Task.cancel()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99485010453317f4839a224b98155a228a8d2d31" translate="yes" xml:space="preserve">
          <source>Raised when a Unicode-related encoding or decoding error occurs. It is a subclass of &lt;a href=&quot;#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2018eef101b2f4d0cdf86e08cde977dd0c66f60f" translate="yes" xml:space="preserve">
          <source>Raised when a Unicode-related error occurs during decoding. It is a subclass of &lt;a href=&quot;#UnicodeError&quot;&gt;&lt;code&gt;UnicodeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c91c642aba5bbb3e9611b2f284aaec30beda70f" translate="yes" xml:space="preserve">
          <source>Raised when a Unicode-related error occurs during encoding. It is a subclass of &lt;a href=&quot;#UnicodeError&quot;&gt;&lt;code&gt;UnicodeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cb5f76edfdda9f55f655978fb8c9e58f15abc70" translate="yes" xml:space="preserve">
          <source>Raised when a Unicode-related error occurs during translating. It is a subclass of &lt;a href=&quot;#UnicodeError&quot;&gt;&lt;code&gt;UnicodeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e30b0c7a0e9e8c499e6135e347a0262de4697cc4" translate="yes" xml:space="preserve">
          <source>Raised when a directory operation (such as &lt;a href=&quot;os#os.listdir&quot;&gt;&lt;code&gt;os.listdir()&lt;/code&gt;&lt;/a&gt;) is requested on something which is not a directory. Corresponds to &lt;code&gt;errno&lt;/code&gt;&lt;code&gt;ENOTDIR&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f836922934916388b6630da53747c489b0b017d5" translate="yes" xml:space="preserve">
          <source>Raised when a file operation (such as &lt;a href=&quot;os#os.remove&quot;&gt;&lt;code&gt;os.remove()&lt;/code&gt;&lt;/a&gt;) is requested on a directory. Corresponds to &lt;code&gt;errno&lt;/code&gt;&lt;code&gt;EISDIR&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fa0e53dc1968e11d9bb54b28011070563c164fd" translate="yes" xml:space="preserve">
          <source>Raised when a file or directory is requested but doesn&amp;rsquo;t exist. Corresponds to &lt;code&gt;errno&lt;/code&gt;&lt;code&gt;ENOENT&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7129f2d93cf00de4b8ab65fcffd612decb408de9" translate="yes" xml:space="preserve">
          <source>Raised when a future is cancelled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5ff497a3606243528ae596e76f679e9b5d0e83e" translate="yes" xml:space="preserve">
          <source>Raised when a future operation exceeds the given timeout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b69c8d3075f854ffb4db6ca4db57fc62b4846431" translate="yes" xml:space="preserve">
          <source>Raised when a given process doesn&amp;rsquo;t exist. Corresponds to &lt;code&gt;errno&lt;/code&gt;&lt;code&gt;ESRCH&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c7780b6f82c22b1007a3ed52e42762b1e1b4108" translate="yes" xml:space="preserve">
          <source>Raised when a local or global name is not found. This applies only to unqualified names. The associated value is an error message that includes the name that could not be found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4535b411526027ac118fc7423603430f6f77204d" translate="yes" xml:space="preserve">
          <source>Raised when a mailbox is expected but is not found, such as when instantiating a &lt;a href=&quot;#mailbox.Mailbox&quot;&gt;&lt;code&gt;Mailbox&lt;/code&gt;&lt;/a&gt; subclass with a path that does not exist (and with the &lt;em&gt;create&lt;/em&gt; parameter set to &lt;code&gt;False&lt;/code&gt;), or when opening a folder that does not exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4b3706acb5e19e9dd3b20ebaa9fb12da7f73b46" translate="yes" xml:space="preserve">
          <source>Raised when a mailbox is not empty but is expected to be, such as when deleting a folder that contains messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29fa887635b98cd97b286abcca41a5285d1532c4" translate="yes" xml:space="preserve">
          <source>Raised when a mapping (dictionary) key is not found in the set of existing keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4813ea6633b6ee18af13f0a8e20689288ddb6d8" translate="yes" xml:space="preserve">
          <source>Raised when a node is inserted in a different document than it currently belongs to, and the implementation does not support migrating the node from one document to the other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccf1abcce481459a6586330a57730d8a02595e41" translate="yes" xml:space="preserve">
          <source>Raised when a payload is added to a &lt;a href=&quot;email.compat32-message#email.message.Message&quot;&gt;&lt;code&gt;Message&lt;/code&gt;&lt;/a&gt; object using &lt;code&gt;add_payload()&lt;/code&gt;, but the payload is already a scalar and the message&amp;rsquo;s &lt;em&gt;Content-Type&lt;/em&gt; main type is not either &lt;em&gt;multipart&lt;/em&gt; or missing. &lt;a href=&quot;#email.errors.MultipartConversionError&quot;&gt;&lt;code&gt;MultipartConversionError&lt;/code&gt;&lt;/a&gt; multiply inherits from &lt;a href=&quot;#email.errors.MessageError&quot;&gt;&lt;code&gt;MessageError&lt;/code&gt;&lt;/a&gt; and the built-in &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ac15f68208a959e5d90aff2e430959074ae6d2b" translate="yes" xml:space="preserve">
          <source>Raised when a reference is made to a local variable in a function or method, but no value has been bound to that variable. This is a subclass of &lt;a href=&quot;#NameError&quot;&gt;&lt;code&gt;NameError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5c15cc830f5bee7143900d7592e9bea83bc7ca5" translate="yes" xml:space="preserve">
          <source>Raised when a sequence subscript is out of range. (Slice indices are silently truncated to fall in the allowed range; if an index is not an integer, &lt;a href=&quot;#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is raised.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="836ac5fd240c91206491984f5396cb57cefd2188" translate="yes" xml:space="preserve">
          <source>Raised when a specified range of text does not fit into a string. This is not known to be used in the Python DOM implementations, but may be received from DOM implementations not written in Python.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bee8969add5862bfa046bf4a87b2119da43bd766" translate="yes" xml:space="preserve">
          <source>Raised when a system call is interrupted by an incoming signal. Corresponds to &lt;code&gt;errno&lt;/code&gt;&lt;a href=&quot;errno#errno.EINTR&quot;&gt;&lt;code&gt;EINTR&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="192e3a29045db8e91297a6481d51b54c3ff2d65a" translate="yes" xml:space="preserve">
          <source>Raised when a system function timed out at the system level. Corresponds to &lt;code&gt;errno&lt;/code&gt;&lt;code&gt;ETIMEDOUT&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d567a14527f762054253cadf609186f38653719" translate="yes" xml:space="preserve">
          <source>Raised when an &lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#assert&quot;&gt;&lt;code&gt;assert&lt;/code&gt;&lt;/a&gt; statement fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5945c1d5737e249b836423b124cc966a7203214a" translate="yes" xml:space="preserve">
          <source>Raised when an attempt is made to insert a node where the node type is not allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c146f51a1a22ce7be88f5e3fc18559eb0b36abea" translate="yes" xml:space="preserve">
          <source>Raised when an attempt is made to insert an &lt;code&gt;Attr&lt;/code&gt; node that is already present elsewhere in the document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ecd22b9ee23ec28a85db41faa926f7bb23daecf" translate="yes" xml:space="preserve">
          <source>Raised when an attempt is made to modify the type of a node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="149a7fc4e849fe2dbcd86b6a6099f2c4b9505a07" translate="yes" xml:space="preserve">
          <source>Raised when an attempt is made to use an object that is not defined or is no longer usable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8cfb95b5fbc853892e47f514184913b78acf955" translate="yes" xml:space="preserve">
          <source>Raised when an attribute reference (see &lt;a href=&quot;https://docs.python.org/3.8/reference/expressions.html#attribute-references&quot;&gt;Attribute references&lt;/a&gt;) or assignment fails. (When an object does not support attribute references or attribute assignments at all, &lt;a href=&quot;#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is raised.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f78ebf753bab31ace3810a94417434fa41a6672" translate="yes" xml:space="preserve">
          <source>Raised when an error is detected that doesn&amp;rsquo;t fall in any of the other categories. The associated value is a string indicating what precisely went wrong.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a787646929310b8199ab55a8e3de5507387a81aa" translate="yes" xml:space="preserve">
          <source>Raised when an implicitly defined &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__setattr__&quot;&gt;&lt;code&gt;__setattr__()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__delattr__&quot;&gt;&lt;code&gt;__delattr__()&lt;/code&gt;&lt;/a&gt; is called on a dataclass which was defined with &lt;code&gt;frozen=True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42fccf9cd15a154e1afbd5a825835935ea240c46" translate="yes" xml:space="preserve">
          <source>Raised when an index or size parameter to a method is negative or exceeds the allowed values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2565d594815edb534ee6de4dacaf2a546fff4d90" translate="yes" xml:space="preserve">
          <source>Raised when an input byte could not properly be assigned to a character; for example, a NUL byte (value &lt;code&gt;0&lt;/code&gt;) in a UTF-8 input stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d7dd1e0ead0426d93968affe5e1667c5472e2f1" translate="yes" xml:space="preserve">
          <source>Raised when an invalid or illegal string is specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c813eccfc69c0664893e9c82027cb01fa7db5291" translate="yes" xml:space="preserve">
          <source>Raised when an operation is performed on a future that is not allowed in the current state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c1feda89f7b1be1568a90504487213bf1d6e2f3" translate="yes" xml:space="preserve">
          <source>Raised when an operation on a child process failed. Corresponds to &lt;code&gt;errno&lt;/code&gt;&lt;code&gt;ECHILD&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cfa50647a51c263accb156260c868da54119176" translate="yes" xml:space="preserve">
          <source>Raised when an operation or function is applied to an object of inappropriate type. The associated value is a string giving details about the type mismatch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1b0fa6358da619838e976caf300cdaecbc7434d" translate="yes" xml:space="preserve">
          <source>Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as &lt;a href=&quot;#IndexError&quot;&gt;&lt;code&gt;IndexError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f1d3a8eb30cec2d71cc6db649391b9a9039c152" translate="yes" xml:space="preserve">
          <source>Raised when an operation runs out of memory but the situation may still be rescued (by deleting some objects). The associated value is a string indicating what kind of (internal) operation ran out of memory. Note that because of the underlying memory management architecture (C&amp;rsquo;s &lt;code&gt;malloc()&lt;/code&gt; function), the interpreter may not always be able to completely recover from this situation; it nevertheless raises an exception so that a stack traceback can be printed, in case a run-away program was the cause.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15b6a587f2dea584ce3780a71b6e9091108d69ce" translate="yes" xml:space="preserve">
          <source>Raised when an operation would block on an object (e.g. socket) set for non-blocking operation. Corresponds to &lt;code&gt;errno&lt;/code&gt;&lt;code&gt;EAGAIN&lt;/code&gt;, &lt;code&gt;EALREADY&lt;/code&gt;, &lt;code&gt;EWOULDBLOCK&lt;/code&gt; and &lt;code&gt;EINPROGRESS&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="071c2f2348407f377cf093c42e97717a7295ee9b" translate="yes" xml:space="preserve">
          <source>Raised when either a docstring or expression that may be split over several lines is not completed anywhere in the file, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8173f406e1e46af1b511049a62a3e5d77c75621a" translate="yes" xml:space="preserve">
          <source>Raised when indentation contains an inconsistent use of tabs and spaces. This is a subclass of &lt;a href=&quot;#IndentationError&quot;&gt;&lt;code&gt;IndentationError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f26eba02b7f68f1b93b15968c0c8bffa60e82f19" translate="yes" xml:space="preserve">
          <source>Raised when some mailbox-related condition beyond the control of the program causes it to be unable to proceed, such as when failing to acquire a lock that another program already holds a lock, or when a uniquely-generated file name already exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a1e3e96778b4a76c6bb63f399424514bf51419b" translate="yes" xml:space="preserve">
          <source>Raised when the &lt;a href=&quot;functions#input&quot;&gt;&lt;code&gt;input()&lt;/code&gt;&lt;/a&gt; function hits an end-of-file condition (EOF) without reading any data. (N.B.: the &lt;code&gt;io.IOBase.read()&lt;/code&gt; and &lt;a href=&quot;io#io.IOBase.readline&quot;&gt;&lt;code&gt;io.IOBase.readline()&lt;/code&gt;&lt;/a&gt; methods return an empty string when they hit EOF.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8187000ffcc004cf488ed36d80812d62f29f188" translate="yes" xml:space="preserve">
          <source>Raised when the &lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#import&quot;&gt;&lt;code&gt;import&lt;/code&gt;&lt;/a&gt; statement has troubles trying to load a module. Also raised when the &amp;ldquo;from list&amp;rdquo; in &lt;code&gt;from ... import&lt;/code&gt; has a name that cannot be found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5a0109d2a5c23e5e14daed241f3537e0efbfef8" translate="yes" xml:space="preserve">
          <source>Raised when the data in a file cannot be parsed, such as when an &lt;a href=&quot;#mailbox.MH&quot;&gt;&lt;code&gt;MH&lt;/code&gt;&lt;/a&gt; instance attempts to read a corrupted &lt;code&gt;.mh_sequences&lt;/code&gt; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="146054eb7828ebcac691fb3dbda2da3741b10a04" translate="yes" xml:space="preserve">
          <source>Raised when the implementation does not support the requested type of object or operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4f3e6d615fa197033468c28f628c05354cbf396" translate="yes" xml:space="preserve">
          <source>Raised when the interpreter finds an internal error, but the situation does not look so serious to cause it to abandon all hope. The associated value is a string indicating what went wrong (in low-level terms).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a941d5c673c4b371a41d611c42daed10ef3bc500" translate="yes" xml:space="preserve">
          <source>Raised when the parser encounters a syntax error. This may occur in an &lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#import&quot;&gt;&lt;code&gt;import&lt;/code&gt;&lt;/a&gt; statement, in a call to the built-in functions &lt;a href=&quot;functions#exec&quot;&gt;&lt;code&gt;exec()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;functions#eval&quot;&gt;&lt;code&gt;eval()&lt;/code&gt;&lt;/a&gt;, or when reading the initial script or standard input (also interactively).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26bd9e205db6583e46e333a0118865687e016863" translate="yes" xml:space="preserve">
          <source>Raised when the result of an arithmetic operation is too large to be represented. This cannot occur for integers (which would rather raise &lt;a href=&quot;#MemoryError&quot;&gt;&lt;code&gt;MemoryError&lt;/code&gt;&lt;/a&gt; than give up). However, for historical reasons, OverflowError is sometimes raised for integers that are outside a required range. Because of the lack of standardization of floating point exception handling in C, most floating point operations are not checked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9447026f9df744be9ee128a09126624b58463e43" translate="yes" xml:space="preserve">
          <source>Raised when the second argument of a division or modulo operation is zero. The associated value is a string indicating the type of the operands and the operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4775761a9c5cb275b116d24a71b80b5be8a9a2c5" translate="yes" xml:space="preserve">
          <source>Raised when the user hits the interrupt key (normally</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4db30c88f41b18a01cc76f6eb12efcd692885a4c" translate="yes" xml:space="preserve">
          <source>Raised when there is an authentication error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a17fa2784976b37bb998d75d962a816fac48634" translate="yes" xml:space="preserve">
          <source>Raised when trying to create a file or directory which already exists. Corresponds to &lt;code&gt;errno&lt;/code&gt;&lt;code&gt;EEXIST&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="025e7b830e478e39e0a379feaeb271aa79b69e76" translate="yes" xml:space="preserve">
          <source>Raised when trying to run an operation without the adequate access rights - for example filesystem permissions. Corresponds to &lt;code&gt;errno&lt;/code&gt;&lt;code&gt;EACCES&lt;/code&gt; and &lt;code&gt;EPERM&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="238a00f356dee73a56bd4ca0031f0eebb8fb06a3" translate="yes" xml:space="preserve">
          <source>Raises &lt;a href=&quot;#ossaudiodev.OSSAudioError&quot;&gt;&lt;code&gt;OSSAudioError&lt;/code&gt;&lt;/a&gt; if an invalid control is specified, or &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; if an unsupported control is specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac7f57a0ff24a51ebd2b019405d1f096075057e1" translate="yes" xml:space="preserve">
          <source>Raises &lt;a href=&quot;#ossaudiodev.OSSAudioError&quot;&gt;&lt;code&gt;OSSAudioError&lt;/code&gt;&lt;/a&gt; if an invalid mixer control was specified, or if the specified volumes were out-of-range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1469e58af18bc65cb7589d2e63c275155510418" translate="yes" xml:space="preserve">
          <source>Raises &lt;a href=&quot;#statistics.StatisticsError&quot;&gt;&lt;code&gt;StatisticsError&lt;/code&gt;&lt;/a&gt; if &lt;em&gt;data&lt;/em&gt; has fewer than two values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="799ebcc5213436d53ec32c6d0a050b0cc45ca5e8" translate="yes" xml:space="preserve">
          <source>Raises &lt;a href=&quot;#statistics.StatisticsError&quot;&gt;&lt;code&gt;StatisticsError&lt;/code&gt;&lt;/a&gt; if &lt;em&gt;data&lt;/em&gt; is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b499d88e8c6595b524fb41721a6812376d234ff" translate="yes" xml:space="preserve">
          <source>Raises &lt;a href=&quot;#tarfile.HeaderError&quot;&gt;&lt;code&gt;HeaderError&lt;/code&gt;&lt;/a&gt; if the buffer is invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40b6d67cb90046b3b63b5dcad43fc14488bd45bd" translate="yes" xml:space="preserve">
          <source>Raises &lt;a href=&quot;asyncio-exceptions#asyncio.TimeoutError&quot;&gt;&lt;code&gt;asyncio.TimeoutError&lt;/code&gt;&lt;/a&gt; if the timeout occurs before all Futures are done.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02d004ae5bd069157f48f6b273f43669e0c5afbd" translate="yes" xml:space="preserve">
          <source>Raises &lt;a href=&quot;exceptions#KeyError&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt; if no matching cookie exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91ba61c2f7451f16f2ac78bd5e08da93d73b8658" translate="yes" xml:space="preserve">
          <source>Raises &lt;a href=&quot;exceptions#ProcessLookupError&quot;&gt;&lt;code&gt;ProcessLookupError&lt;/code&gt;&lt;/a&gt; when &lt;em&gt;pid&lt;/em&gt; can&amp;rsquo;t be found and &lt;a href=&quot;exceptions#PermissionError&quot;&gt;&lt;code&gt;PermissionError&lt;/code&gt;&lt;/a&gt; when the user doesn&amp;rsquo;t have &lt;code&gt;CAP_SYS_RESOURCE&lt;/code&gt; for the process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53937e5a7d70f054e980e2a37b896bf64eed1ea2" translate="yes" xml:space="preserve">
          <source>Raises &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; if &lt;code&gt;instance&lt;/code&gt; is not a dataclass instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a91d3d7d9b2850e6dd1726232f8e33aef0e2e413" translate="yes" xml:space="preserve">
          <source>Raises &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; if either of the arguments are not integers. Raises &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; if either of the arguments are negative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="742c3253209370a98134cc25fd53354074e0c3e6" translate="yes" xml:space="preserve">
          <source>Raises &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; if an invalid resource is specified, if the new soft limit exceeds the hard limit, or if a process tries to raise its hard limit. Specifying a limit of &lt;a href=&quot;#resource.RLIM_INFINITY&quot;&gt;&lt;code&gt;RLIM_INFINITY&lt;/code&gt;&lt;/a&gt; when the hard or system limit for that resource is not unlimited will result in a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt;. A process with the effective UID of super-user can request any valid limit value, including unlimited, but &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; will still be raised if the requested limit exceeds the system imposed limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2e146c798bfc44e2ad573a62ac77fdb983eb7f5" translate="yes" xml:space="preserve">
          <source>Raises &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; if called more times than there were items placed in the queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79802bd247b2fab5e87d9034c68acee395355c10" translate="yes" xml:space="preserve">
          <source>Raises &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; if no signature can be provided, and &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; if that type of object is not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="594dd1109a995b371fac6a3d6bb6647ee1e74ff5" translate="yes" xml:space="preserve">
          <source>Raises &lt;a href=&quot;urllib.error#urllib.error.URLError&quot;&gt;&lt;code&gt;URLError&lt;/code&gt;&lt;/a&gt; on protocol errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="758bae30f6db4e2386562c3f494933a38e3c16d2" translate="yes" xml:space="preserve">
          <source>Raises a &lt;a href=&quot;#statistics.StatisticsError&quot;&gt;&lt;code&gt;StatisticsError&lt;/code&gt;&lt;/a&gt; if the input dataset is empty, if it contains a zero, or if it contains a negative value. The &lt;em&gt;data&lt;/em&gt; may be a sequence or iterable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb7175e654d8cec4a1e4d0bf4f680af987bf4d62" translate="yes" xml:space="preserve">
          <source>Raises a &lt;a href=&quot;asyncio-exceptions#asyncio.InvalidStateError&quot;&gt;&lt;code&gt;InvalidStateError&lt;/code&gt;&lt;/a&gt; error if the Future is already &lt;em&gt;done&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c80ba2542e0af03bbef50e69aeeb4c3a81b77ad" translate="yes" xml:space="preserve">
          <source>Raises a &lt;a href=&quot;exceptions#LookupError&quot;&gt;&lt;code&gt;LookupError&lt;/code&gt;&lt;/a&gt; in case the encoding cannot be found or the codec doesn&amp;rsquo;t support an incremental decoder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b63f05b5798012ffc63adfd031f372ae0deb3890" translate="yes" xml:space="preserve">
          <source>Raises a &lt;a href=&quot;exceptions#LookupError&quot;&gt;&lt;code&gt;LookupError&lt;/code&gt;&lt;/a&gt; in case the encoding cannot be found or the codec doesn&amp;rsquo;t support an incremental encoder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13e52e3ac65af8901398f21b27126fbcd7a0e912" translate="yes" xml:space="preserve">
          <source>Raises a &lt;a href=&quot;exceptions#LookupError&quot;&gt;&lt;code&gt;LookupError&lt;/code&gt;&lt;/a&gt; in case the encoding cannot be found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e6dce7afb06128f2150033972ef474abcfc3e54" translate="yes" xml:space="preserve">
          <source>Raises a &lt;a href=&quot;exceptions#LookupError&quot;&gt;&lt;code&gt;LookupError&lt;/code&gt;&lt;/a&gt; in case the handler cannot be found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e61c009e9f13b2b3a453e9b03b63e924188e5c5" translate="yes" xml:space="preserve">
          <source>Raises a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; if called more times than there were items placed in the queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c25c140a614f4600cd58acb9788428e868cd6c64" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;cpython.run_interactivehook&lt;/code&gt; with the hook object as the argument when the hook is called on startup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e3659576e7d56fd42b0192cfe01b816827d0d7a" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;sys._current_frames&lt;/code&gt; with no arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39e0509c4828435eb2063c4749e88e820e4c4e19" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;sys._getframe&lt;/code&gt; with no arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2715c6ef6d6047ee2a10c30494274b1581ce87a7" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;sys.set_asyncgen_hooks_finalizer&lt;/code&gt; with no arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0fb916a1e815458b71e1e1a89376bfe5a45dc3a" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;sys.set_asyncgen_hooks_firstiter&lt;/code&gt; with no arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52dad9dad3b32b119aba16eea230246633895842" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;sys.setprofile&lt;/code&gt; with no arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16ca2c45afe8a124ff7e4d1f9da35856dafa3fa3" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;sys.settrace&lt;/code&gt; with no arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efafa56e78f31621c13f731f324927897b824411" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;array.__new__&lt;/code&gt; with arguments &lt;code&gt;typecode&lt;/code&gt;, &lt;code&gt;initializer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="079936061198eb6088c170bd396ee47f6049c02f" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;builtins.breakpoint&lt;/code&gt; with argument &lt;code&gt;breakpointhook&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ebc51f218e9004d7b94fe769d4cb2198aaf3cdd" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;builtins.input&lt;/code&gt; with argument &lt;code&gt;prompt&lt;/code&gt; before reading input</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53c39966d4b0e5d67eb25146622558c37663ccc7" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;code.__new__&lt;/code&gt; with arguments &lt;code&gt;code&lt;/code&gt;, &lt;code&gt;filename&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;argcount&lt;/code&gt;, &lt;code&gt;posonlyargcount&lt;/code&gt;, &lt;code&gt;kwonlyargcount&lt;/code&gt;, &lt;code&gt;nlocals&lt;/code&gt;, &lt;code&gt;stacksize&lt;/code&gt;, &lt;code&gt;flags&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbd715add0e866debc2ed538e8d47460989be563" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;compile&lt;/code&gt; with arguments &lt;code&gt;source&lt;/code&gt; and &lt;code&gt;filename&lt;/code&gt;. This event may also be raised by implicit compilation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9760e460d25516ad7f78ab56e8fb1fecb0606067" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;ctypes.addressof&lt;/code&gt; with argument &lt;code&gt;obj&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68ace3ef224bfccf1cc7d3e720e02017dbebc57c" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;ctypes.cdata/buffer&lt;/code&gt; with arguments &lt;code&gt;pointer&lt;/code&gt;, &lt;code&gt;size&lt;/code&gt;, &lt;code&gt;offset&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ab3444f481a6369c603e1ad538dd221023c9d44" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;ctypes.create_string_buffer&lt;/code&gt; with arguments &lt;code&gt;init&lt;/code&gt;, &lt;code&gt;size&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b7c565e8a29f3db5258895f6725951d4f55463c" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;ctypes.create_unicode_buffer&lt;/code&gt; with arguments &lt;code&gt;init&lt;/code&gt;, &lt;code&gt;size&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40768b76b5d41d388ae2b81735890f852de6b22a" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;ctypes.get_errno&lt;/code&gt; with no arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b112d7a70da482cfcd999ed8d36300eee0b160f0" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;ctypes.get_last_error&lt;/code&gt; with no arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="431aacfcd3f8b88c1df3928779bc3e1e9867dcfc" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;ctypes.set_errno&lt;/code&gt; with argument &lt;code&gt;errno&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ba6cc6cc5936ec2ab86e9cf060f45927ab5a9b6" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;ctypes.set_last_error&lt;/code&gt; with argument &lt;code&gt;error&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a804cbaf29eae46476e1731002fcce6340bb3f0" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;ctypes.string_at&lt;/code&gt; with arguments &lt;code&gt;address&lt;/code&gt;, &lt;code&gt;size&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d6b171a4597fcb595d9d806a5c0cfc26285efdb" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;ctypes.wstring_at&lt;/code&gt; with arguments &lt;code&gt;address&lt;/code&gt;, &lt;code&gt;size&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="403d12339bdaf377051f6e0fc09c75388702dc9a" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;ensurepip.bootstrap&lt;/code&gt; with argument &lt;code&gt;root&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="842d393d07933374e0857825fc6ac6bd8a102d7b" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;exec&lt;/code&gt; with the code object as the argument. Code compilation events may also be raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f122a1eab81f37d648e38f51dba15b370ce9805" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;ftplib.connect&lt;/code&gt; with arguments &lt;code&gt;self&lt;/code&gt;, &lt;code&gt;host&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15bf37d46c26f40dc2f6748f2cfd031b747e22dc" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;ftplib.sendcmd&lt;/code&gt; with arguments &lt;code&gt;self&lt;/code&gt;, &lt;code&gt;cmd&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6efc2da71b14329e9da0e2276777354d4c6ec256" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;glob.glob&lt;/code&gt; with arguments &lt;code&gt;pathname&lt;/code&gt;, &lt;code&gt;recursive&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8684756366c03d40cef85d8a80b15e114b8d0c30" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;imaplib.open&lt;/code&gt; with arguments &lt;code&gt;self&lt;/code&gt;, &lt;code&gt;host&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ea054955479414e79a7f6fe8174e9d2bd08ff4a" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;imaplib.send&lt;/code&gt; with arguments &lt;code&gt;self&lt;/code&gt;, &lt;code&gt;data&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60bfb7b427a42844719ecaaccf9ee76e3bcb939c" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;mmap.__new__&lt;/code&gt; with arguments &lt;code&gt;fileno&lt;/code&gt;, &lt;code&gt;length&lt;/code&gt;, &lt;code&gt;access&lt;/code&gt;, &lt;code&gt;offset&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e826a502c1efa032d18a01fff7f577e27e639e2" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;nntplib.connect&lt;/code&gt; with arguments &lt;code&gt;self&lt;/code&gt;, &lt;code&gt;host&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c9c311595c304be374f4ba8ca21fd804373ac91" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;open&lt;/code&gt; with arguments &lt;code&gt;file&lt;/code&gt;, &lt;code&gt;mode&lt;/code&gt;, &lt;code&gt;flags&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c334c43fb99a8eefdffacf34c0d3ffe16f937f64" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;open&lt;/code&gt; with arguments &lt;code&gt;path&lt;/code&gt;, &lt;code&gt;mode&lt;/code&gt;, &lt;code&gt;flags&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7083acb1dbec7ee4b5630b61dfa858df623a3850" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;os.listdir&lt;/code&gt; with argument &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ccad36ebce32e09acb40556b57e9566adf00938" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;os.scandir&lt;/code&gt; with argument &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21b4a379a91dc55d5b77c3a653c22c27c0c4c20f" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;os.system&lt;/code&gt; with argument &lt;code&gt;command&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1427152b59da45b4f8e37086cd50203f4b006498" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;os.truncate&lt;/code&gt; with arguments &lt;code&gt;fd&lt;/code&gt;, &lt;code&gt;length&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ae05ea1bc6d3cd9c474e444a8d9f63ddc9cc1aa" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;os.truncate&lt;/code&gt; with arguments &lt;code&gt;path&lt;/code&gt;, &lt;code&gt;length&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdfad89ab653d3d9cc0dab43be3eaac363bfafdc" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;pdb.Pdb&lt;/code&gt; with no arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99e5e53409656c2149cec3c383ed1d42bcbe1bf1" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;pickle.find_class&lt;/code&gt; with arguments &lt;code&gt;module&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e86db6c09bb7d31f34b954259251378ca4a58e9a" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;poplib.connect&lt;/code&gt; with arguments &lt;code&gt;self&lt;/code&gt;, &lt;code&gt;host&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ec11a227b843f0eccffd0d9d48026cd47ccfdaa" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;shutil.copytree&lt;/code&gt; with arguments &lt;code&gt;src&lt;/code&gt;, &lt;code&gt;dst&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b1f2bd9cb1f51c7860d9296ed4e355042c9671f" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;shutil.make_archive&lt;/code&gt; with arguments &lt;code&gt;base_name&lt;/code&gt;, &lt;code&gt;format&lt;/code&gt;, &lt;code&gt;root_dir&lt;/code&gt;, &lt;code&gt;base_dir&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b6ab294d1e818bfc0a21642bc9224b317628735" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;shutil.rmtree&lt;/code&gt; with argument &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a780a3ef482d641b115f37933cb8186f24825db" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;smtplib.connect&lt;/code&gt; with arguments &lt;code&gt;self&lt;/code&gt;, &lt;code&gt;host&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72e3e7abfbdd34540c3b592afbc8160df0c27e61" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;socket.__new__&lt;/code&gt; with arguments &lt;code&gt;self&lt;/code&gt;, &lt;code&gt;family&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;protocol&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f13ffb0d7c17142c0d5837a56b05d32e42ae7aef" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;socket.bind&lt;/code&gt; with arguments &lt;code&gt;self&lt;/code&gt;, &lt;code&gt;address&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52b5691ba9376ae2c52f23fbd452b354ff224b0e" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;socket.connect&lt;/code&gt; with arguments &lt;code&gt;self&lt;/code&gt;, &lt;code&gt;address&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba9ec04f23995f6b706abe491c392041f3e18302" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;socket.getaddrinfo&lt;/code&gt; with arguments &lt;code&gt;host&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt;, &lt;code&gt;family&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;protocol&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbaad4be0c50af7d2eea49386900e38cd27ab02d" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;socket.gethostbyaddr&lt;/code&gt; with argument &lt;code&gt;ip_address&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c476710b9f2e8eb127c60fe270b7d0adb4839a1d" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;socket.gethostbyname&lt;/code&gt; with argument &lt;code&gt;hostname&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41bde25bc577978d285c312d7eed21cd86f48a4c" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;socket.gethostname&lt;/code&gt; with no arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="243615721a7a0f9b8575016d5087c0217e9f5753" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;socket.getnameinfo&lt;/code&gt; with argument &lt;code&gt;sockaddr&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8be7f6ac85fa7cb2bd384cf154e3e316edca27a7" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;socket.getservbyname&lt;/code&gt; with arguments &lt;code&gt;servicename&lt;/code&gt;, &lt;code&gt;protocolname&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31fd9516e1ea931e96f7d064707ffeeef7556b70" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;socket.getservbyport&lt;/code&gt; with arguments &lt;code&gt;port&lt;/code&gt;, &lt;code&gt;protocolname&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="158cd9da2db5b46ce03c4f0d0f68b165dfa34894" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;socket.sendmsg&lt;/code&gt; with arguments &lt;code&gt;self&lt;/code&gt;, &lt;code&gt;address&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd8cfeb15c70ee83a2c70931f6acb79ac2ecbbf5" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;socket.sendto&lt;/code&gt; with arguments &lt;code&gt;self&lt;/code&gt;, &lt;code&gt;address&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55056cfce35597cbbeb72e3c4c0e0adf1dd5f86a" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;socket.sethostname&lt;/code&gt; with argument &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a781d737477fda3dca4474d595df4eb9501850e7" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;sqlite3.connect&lt;/code&gt; with argument &lt;code&gt;database&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="631318cee4026563eef10a46dd35e91230064ed2" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;telnetlib.Telnet.open&lt;/code&gt; with arguments &lt;code&gt;self&lt;/code&gt;, &lt;code&gt;host&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b827dd581199ea8b3e310e0b7982f057a447709" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;telnetlib.Telnet.write&lt;/code&gt; with arguments &lt;code&gt;self&lt;/code&gt;, &lt;code&gt;buffer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb441af255307fb4987873dc4ba5b5cb29116f46" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;tempfile.mkdtemp&lt;/code&gt; with argument &lt;code&gt;fullpath&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="549c513d3923079d6bd986fcb1a1d0fb30c3bd50" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;tempfile.mkstemp&lt;/code&gt; with argument &lt;code&gt;fullpath&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8c911396da30965d0d4925c79c5f27f02ed1d21" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;webbrowser.open&lt;/code&gt; with argument &lt;code&gt;url&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="becb6b292c48bca62d12e0c6e307fb409006dbb9" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;winreg.ConnectRegistry&lt;/code&gt; with arguments &lt;code&gt;computer_name&lt;/code&gt;, &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38d2b25f921cb04cfabb111d68752863ba88acfd" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;winreg.CreateKey&lt;/code&gt; with arguments &lt;code&gt;key&lt;/code&gt;, &lt;code&gt;sub_key&lt;/code&gt;, &lt;code&gt;access&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1de2fecfbd25187d516ee0903df8df413010d76" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;winreg.DeleteKey&lt;/code&gt; with arguments &lt;code&gt;key&lt;/code&gt;, &lt;code&gt;sub_key&lt;/code&gt;, &lt;code&gt;access&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdd56b8a99fd38d26751f2118ed67b08a5113c21" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;winreg.DeleteValue&lt;/code&gt; with arguments &lt;code&gt;key&lt;/code&gt;, &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5b79c9cdf2353098e6269001a976aebc73258f4" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;winreg.DisableReflectionKey&lt;/code&gt; with argument &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eca81343c80b5da0bb4154b3bfdbcd0a814c523" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;winreg.EnableReflectionKey&lt;/code&gt; with argument &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1f71c48ea3d8417ef425fcb7ed978f895b23b59" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;winreg.EnumKey&lt;/code&gt; with arguments &lt;code&gt;key&lt;/code&gt;, &lt;code&gt;index&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="909314b840d434b0b4a6f73231e9e50f1abc338e" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;winreg.EnumValue&lt;/code&gt; with arguments &lt;code&gt;key&lt;/code&gt;, &lt;code&gt;index&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55f814a42899ca638d649a0a2208e63755ddc133" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;winreg.ExpandEnvironmentStrings&lt;/code&gt; with argument &lt;code&gt;str&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed130a3d35da585f7e58f44493356c1830bc6526" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;winreg.LoadKey&lt;/code&gt; with arguments &lt;code&gt;key&lt;/code&gt;, &lt;code&gt;sub_key&lt;/code&gt;, &lt;code&gt;file_name&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d8a3901c5c8a70f425579c18fb423e7cd512407" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;winreg.OpenKey/result&lt;/code&gt; with argument &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb1d19e696208caec6cc4f604bf9b4face28d793" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;winreg.OpenKey&lt;/code&gt; with arguments &lt;code&gt;key&lt;/code&gt;, &lt;code&gt;sub_key&lt;/code&gt;, &lt;code&gt;access&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adbea71778cde2fd4167434485b1f3f604cf0577" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;winreg.PyHKEY.Detach&lt;/code&gt; with argument &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a353604a08dad7c40d5ca74f0d24a5cd63f2ba5e" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;winreg.QueryInfoKey&lt;/code&gt; with argument &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d401aa7c38103f2bb793cb45fe649d94e4f319ca" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;winreg.QueryReflectionKey&lt;/code&gt; with argument &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="389ed35fecc8df9bf935c5b7749495b8fe874201" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;winreg.QueryValue&lt;/code&gt; with arguments &lt;code&gt;key&lt;/code&gt;, &lt;code&gt;sub_key&lt;/code&gt;, &lt;code&gt;value_name&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d225dc0ccc2502e7092c5a77050f1d789af5d32" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;winreg.SaveKey&lt;/code&gt; with arguments &lt;code&gt;key&lt;/code&gt;, &lt;code&gt;file_name&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec9964950f335aaa8a619156a2d86be67823b8cd" translate="yes" xml:space="preserve">
          <source>Raises an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;winreg.SetValue&lt;/code&gt; with arguments &lt;code&gt;key&lt;/code&gt;, &lt;code&gt;sub_key&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b31f9833da01faadb2b0fb996ec1059685c9aa6b" translate="yes" xml:space="preserve">
          <source>Raises an auditing event &lt;code&gt;builtins.input/result&lt;/code&gt; with the result after successfully reading input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06077ce794e2fdaba6736617e21ce7a808c6346f" translate="yes" xml:space="preserve">
          <source>Raises an error if a duplicate member name is found instead of creating an alias:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff05810a934c386ddb661bfee62ea3cebdf266d9" translate="yes" xml:space="preserve">
          <source>Raises an exception using one of the 3 forms of the &lt;code&gt;raise&lt;/code&gt; statement, depending on the value of &lt;em&gt;argc&lt;/em&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ba28f92358b5eb9c93f89e4c9613e9169554bc0" translate="yes" xml:space="preserve">
          <source>Raising exceptions with mocks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59ea108a0cd83dee0099a55fafd5a1e049f54cd6" translate="yes" xml:space="preserve">
          <source>Random generation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa759b82b4d6d1756df7ae1bbf44212e19e1e8bc" translate="yes" xml:space="preserve">
          <source>Random numbers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="272eed3efd9e1be092b154f89ad938be8590f835" translate="yes" xml:space="preserve">
          <source>Randomized hashing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a6094c432313c5605d8ee138be752abfaa8b607" translate="yes" xml:space="preserve">
          <source>Randomized hashing is designed for situations where one party, the message preparer, generates all or part of a message to be signed by a second party, the message signer. If the message preparer is able to find cryptographic hash function collisions (i.e., two messages producing the same hash value), then they might prepare meaningful versions of the message that would produce the same hash value and digital signature, but with different results (e.g., transferring $1,000,000 to an account, rather than $10). Cryptographic hash functions have been designed with collision resistance as a major goal, but the current concentration on attacking cryptographic hash functions may result in a given cryptographic hash function providing less collision resistance than expected. Randomized hashing offers the signer additional protection by reducing the likelihood that a preparer can generate two or more messages that ultimately yield the same hash value during the digital signature generation process &amp;mdash; even if it is practical to find collisions for the hash function. However, the use of randomized hashing may reduce the amount of security provided by a digital signature when all portions of the message are prepared by the signer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a16c5bbe4bf996740f257aa1e81bd57e4c52c8dd" translate="yes" xml:space="preserve">
          <source>Range</source>
          <target state="translated">Range</target>
        </trans-unit>
        <trans-unit id="89323c437f79f07829673962949a543da59ede1e" translate="yes" xml:space="preserve">
          <source>Range examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87a5eaaadc19a029bb8b37ebe5ca1eb9e3fabfa6" translate="yes" xml:space="preserve">
          <source>Range objects implement the &lt;a href=&quot;collections.abc#collections.abc.Sequence&quot;&gt;&lt;code&gt;collections.abc.Sequence&lt;/code&gt;&lt;/a&gt; ABC, and provide features such as containment tests, element index lookup, slicing and support for negative indices (see &lt;a href=&quot;#typesseq&quot;&gt;Sequence Types &amp;mdash; list, tuple, range&lt;/a&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d5fda95e3940bc09dc1ccc22666813c0b54f73d" translate="yes" xml:space="preserve">
          <source>Ranges</source>
          <target state="translated">Ranges</target>
        </trans-unit>
        <trans-unit id="72685baa2f647e006214a79053c591c0a8565a9b" translate="yes" xml:space="preserve">
          <source>Ranges containing absolute values larger than &lt;a href=&quot;sys#sys.maxsize&quot;&gt;&lt;code&gt;sys.maxsize&lt;/code&gt;&lt;/a&gt; are permitted but some features (such as &lt;a href=&quot;functions#len&quot;&gt;&lt;code&gt;len()&lt;/code&gt;&lt;/a&gt;) may raise &lt;a href=&quot;exceptions#OverflowError&quot;&gt;&lt;code&gt;OverflowError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46750bd43585be9fb4c7e768a335b1aa32fb5137" translate="yes" xml:space="preserve">
          <source>Ranges implement all of the &lt;a href=&quot;#typesseq-common&quot;&gt;common&lt;/a&gt; sequence operations except concatenation and repetition (due to the fact that range objects can only represent sequences that follow a strict pattern and repetition and concatenation will usually violate that pattern).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="716cf010adf57500bb3f0b679572b06a5bc48ee3" translate="yes" xml:space="preserve">
          <source>Ranges of characters can be indicated by giving two characters and separating them by a &lt;code&gt;'-'&lt;/code&gt;, for example &lt;code&gt;[a-z]&lt;/code&gt; will match any lowercase ASCII letter, &lt;code&gt;[0-5][0-9]&lt;/code&gt; will match all the two-digits numbers from &lt;code&gt;00&lt;/code&gt; to &lt;code&gt;59&lt;/code&gt;, and &lt;code&gt;[0-9A-Fa-f]&lt;/code&gt; will match any hexadecimal digit. If &lt;code&gt;-&lt;/code&gt; is escaped (e.g. &lt;code&gt;[a\-z]&lt;/code&gt;) or if it&amp;rsquo;s placed as the first or last character (e.g. &lt;code&gt;[-a]&lt;/code&gt; or &lt;code&gt;[a-]&lt;/code&gt;), it will match a literal &lt;code&gt;'-'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a9c736b3175d6576311a0ce0ad8c80fa6631f94" translate="yes" xml:space="preserve">
          <source>Rate</source>
          <target state="translated">Rate</target>
        </trans-unit>
        <trans-unit id="abbef9c3268c1d4ea987e7e462d7be3209f1ac4b" translate="yes" xml:space="preserve">
          <source>Rather than being a function, &lt;a href=&quot;stdtypes#list&quot;&gt;&lt;code&gt;list&lt;/code&gt;&lt;/a&gt; is actually a mutable sequence type, as documented in &lt;a href=&quot;stdtypes#typesseq-list&quot;&gt;Lists&lt;/a&gt; and &lt;a href=&quot;stdtypes#typesseq&quot;&gt;Sequence Types &amp;mdash; list, tuple, range&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cce469c6e429669ba4c57d079475f8f780d1eec" translate="yes" xml:space="preserve">
          <source>Rather than being a function, &lt;a href=&quot;stdtypes#range&quot;&gt;&lt;code&gt;range&lt;/code&gt;&lt;/a&gt; is actually an immutable sequence type, as documented in &lt;a href=&quot;stdtypes#typesseq-range&quot;&gt;Ranges&lt;/a&gt; and &lt;a href=&quot;stdtypes#typesseq&quot;&gt;Sequence Types &amp;mdash; list, tuple, range&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3078547b80644efcb71d3452f708c41bb34c618e" translate="yes" xml:space="preserve">
          <source>Rather than being a function, &lt;a href=&quot;stdtypes#tuple&quot;&gt;&lt;code&gt;tuple&lt;/code&gt;&lt;/a&gt; is actually an immutable sequence type, as documented in &lt;a href=&quot;stdtypes#typesseq-tuple&quot;&gt;Tuples&lt;/a&gt; and &lt;a href=&quot;stdtypes#typesseq&quot;&gt;Sequence Types &amp;mdash; list, tuple, range&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="056b01b619354da320f406f426bba963a64cf431" translate="yes" xml:space="preserve">
          <source>Raw File I/O</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7c1a79be24017e3ee6febc2a83a78872f57cd0c" translate="yes" xml:space="preserve">
          <source>Raw I/O</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aace7c41f767801df880b70c5702c06530aad5b" translate="yes" xml:space="preserve">
          <source>Raw I/O (also called &lt;em&gt;unbuffered I/O&lt;/em&gt;) is generally used as a low-level building-block for binary and text streams; it is rarely useful to directly manipulate a raw stream from user code. Nevertheless, you can create a raw stream by opening a file in binary mode with buffering disabled:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3309699934582b28949b166809ac6b9c5c69ccd" translate="yes" xml:space="preserve">
          <source>Raw String Notation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cd206a3bf7f92529ea41aa790f166a382b7ac14" translate="yes" xml:space="preserve">
          <source>Raw binary I/O typically provides low-level access to an underlying OS device or API, and does not try to encapsulate it in high-level primitives (this is left to Buffered I/O and Text I/O, described later in this page).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a4e0efd7f4e3bcbe0f545193d34aaae5e57a2cd" translate="yes" xml:space="preserve">
          <source>Raw string notation (&lt;code&gt;r&quot;text&quot;&lt;/code&gt;) keeps regular expressions sane. Without it, every backslash (&lt;code&gt;'\'&lt;/code&gt;) in a regular expression would have to be prefixed with another one to escape it. For example, the two following lines of code are functionally identical:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32b782deb36c27ece9175526e20725ccdaf40c92" translate="yes" xml:space="preserve">
          <source>RawArray(&amp;lsquo;h&amp;rsquo;, 7)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="626ffe29095fcf739267ebb6f703c4623c0414ff" translate="yes" xml:space="preserve">
          <source>RawArray(&amp;lsquo;i&amp;rsquo;, (9, 2, 8))</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aeed3acd8679b1c888b9a52532abe1bdab36ec8" translate="yes" xml:space="preserve">
          <source>RawArray(c_int, (9, 2, 8))</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81de3aa1ac25caa95ccc8ece4bfec2012a8f05ec" translate="yes" xml:space="preserve">
          <source>RawArray(c_short, 7)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b1e8433b45042827ff62732cd187628f20e6272" translate="yes" xml:space="preserve">
          <source>RawConfigParser Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9ef9f0bf1bb2774aecf0bc5eac70a0c3df407d0" translate="yes" xml:space="preserve">
          <source>RawValue(&amp;lsquo;d&amp;rsquo;, 2.4)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a085643483d1d28e296bba8c245adb06cfe5ee8f" translate="yes" xml:space="preserve">
          <source>RawValue(MyStruct, 4, 6)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3964dfdf161c0a4d57f44d29cea2e5ce7b015c24" translate="yes" xml:space="preserve">
          <source>RawValue(c_double, 2.4)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46819dee760d23017b083e3721863443e51a0535" translate="yes" xml:space="preserve">
          <source>Re-define the sequences that exist in the mailbox based upon &lt;em&gt;sequences&lt;/em&gt;, a dictionary of names mapped to key lists, like returned by &lt;a href=&quot;#mailbox.MH.get_sequences&quot;&gt;&lt;code&gt;get_sequences()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8640dd86f3b4479b018eccf7d047f63477657ebe" translate="yes" xml:space="preserve">
          <source>Re-using old test code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3655682a661b47ceabbe8da87b35c82adcc08b0" translate="yes" xml:space="preserve">
          <source>Reached the buffer size limit while looking for a separator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="852b438f91ad9eb2cdd84419a675a216d543c687" translate="yes" xml:space="preserve">
          <source>Read</source>
          <target state="translated">Read</target>
        </trans-unit>
        <trans-unit id="0e4518bbf33bc9f34bd39493aecee4ec5624d1b3" translate="yes" xml:space="preserve">
          <source>Read &lt;em&gt;n&lt;/em&gt; items (as machine values) from the &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;file object&lt;/a&gt;&lt;em&gt;f&lt;/em&gt; and append them to the end of the array. If less than &lt;em&gt;n&lt;/em&gt; items are available, &lt;a href=&quot;exceptions#EOFError&quot;&gt;&lt;code&gt;EOFError&lt;/code&gt;&lt;/a&gt; is raised, but the items that were available are still inserted into the array. &lt;em&gt;f&lt;/em&gt; must be a real built-in file object; something else with a &lt;code&gt;read()&lt;/code&gt; method won&amp;rsquo;t do.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9fd63bf3dd054ea6e4dbb0bf6660d7d5c8c9d79" translate="yes" xml:space="preserve">
          <source>Read &lt;em&gt;n&lt;/em&gt; uncompressed bytes without advancing the file position. At most one single read on the compressed stream is done to satisfy the call. The number of bytes returned may be more or less than requested.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ecf8a5092366366f98673883ba56da84a5f1831" translate="yes" xml:space="preserve">
          <source>Read &lt;em&gt;size&lt;/em&gt; bytes from the audio input and return them as a Python string. Unlike most Unix device drivers, OSS audio devices in blocking mode (the default) will block &lt;a href=&quot;#ossaudiodev.oss_audio_device.read&quot;&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/a&gt; until the entire requested amount of data is available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d7576bc1047472ce41ab965ef4da96edf217ad2" translate="yes" xml:space="preserve">
          <source>Read Transports</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcac2b94b89c15334aebf939b9f27649cff73927" translate="yes" xml:space="preserve">
          <source>Read a bytes object from the user, with primitive line editing capacity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bf01d2b2a3ffc92f6637915b0da38b21df691e1" translate="yes" xml:space="preserve">
          <source>Read a data URL. This kind of URL contains the content encoded in the URL itself. The data URL syntax is specified in &lt;a href=&quot;https://tools.ietf.org/html/rfc2397.html&quot; id=&quot;index-8&quot;&gt;&lt;strong&gt;RFC 2397&lt;/strong&gt;&lt;/a&gt;. This implementation ignores white spaces in base64 encoded data URLs so the URL may be wrapped in whatever source file it comes from. But even though some browsers don&amp;rsquo;t mind about a missing padding at the end of a base64 encoded data URL, this implementation will raise an &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; in that case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="665d8414ef46a658946867aba8ac7b8f55e2a618" translate="yes" xml:space="preserve">
          <source>Read a keypress and return the resulting character as a byte string. Nothing is echoed to the console. This call will block if a keypress is not already available, but will not wait for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b70aaf6a02c374e2e69473c3abd2416d016ecad9" translate="yes" xml:space="preserve">
          <source>Read a plist data from a bytes object. Return the root object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="729442432e3bea73e864a90ad683329f1a141062" translate="yes" xml:space="preserve">
          <source>Read a plist file. &lt;em&gt;fp&lt;/em&gt; should be a readable and binary file object. Return the unpacked root object (which usually is a dictionary).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e91234c95e7e365247321ed5c89ff1bd57380573" translate="yes" xml:space="preserve">
          <source>Read a plist file. &lt;em&gt;pathOrFile&lt;/em&gt; may be either a file name or a (readable and binary) file object. Returns the unpacked root object (which usually is a dictionary).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d17bc479e546de7ff883deafc8203e76f0a328da" translate="yes" xml:space="preserve">
          <source>Read a raw token. Ignore the pushback stack, and do not interpret source requests. (This is not ordinarily a useful entry point, and is documented here only for the sake of completeness.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e656b53db3aedd07c8ef90e1d5712397b704145" translate="yes" xml:space="preserve">
          <source>Read all data until EOF as bytes; block until connection closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb385b433dc261aeca94f5e4c8c12b73d4692054" translate="yes" xml:space="preserve">
          <source>Read all lines available on the input stream and return them as a list of lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eada104490597549a6b5523ffb45caa1528ad4b0" translate="yes" xml:space="preserve">
          <source>Read all the data from the binary file-like object &lt;em&gt;fp&lt;/em&gt;, parse the resulting bytes, and return the message object. &lt;em&gt;fp&lt;/em&gt; must support both the &lt;a href=&quot;io#io.IOBase.readline&quot;&gt;&lt;code&gt;readline()&lt;/code&gt;&lt;/a&gt; and the &lt;code&gt;read()&lt;/code&gt; methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e652c2d6780e2d096031f76a5ba14fa62cbb797" translate="yes" xml:space="preserve">
          <source>Read all the data from the text-mode file-like object &lt;em&gt;fp&lt;/em&gt;, parse the resulting text, and return the root message object. &lt;em&gt;fp&lt;/em&gt; must support both the &lt;a href=&quot;io#io.TextIOBase.readline&quot;&gt;&lt;code&gt;readline()&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&quot;io#io.TextIOBase.read&quot;&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/a&gt; methods on file-like objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="151332fb9b8beb4e0a8e30f6906bbbc5f48dbfde" translate="yes" xml:space="preserve">
          <source>Read all the files in the archive and check their CRC&amp;rsquo;s and file headers. Return the name of the first bad file, or else return &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1f981e030cc65108801a2bd215b6116ff35e87a" translate="yes" xml:space="preserve">
          <source>Read and parse configuration data from &lt;em&gt;f&lt;/em&gt; which must be an iterable yielding Unicode strings (for example files opened in text mode).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="778d597616c2298f5ca88a05450c7ef2de22081f" translate="yes" xml:space="preserve">
          <source>Read and return &lt;em&gt;size&lt;/em&gt; bytes, or if &lt;em&gt;size&lt;/em&gt; is not given or negative, until EOF or if the read call would block in non-blocking mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d84a2f36ea55bca770755460cd5f6842ea390894" translate="yes" xml:space="preserve">
          <source>Read and return a list of lines from the stream. &lt;em&gt;hint&lt;/em&gt; can be specified to control the number of lines read: no more lines will be read if the total size (in bytes/characters) of all lines so far exceeds &lt;em&gt;hint&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e1f16d0246cfce7e5cd42242a8cdfd52fe0dc68" translate="yes" xml:space="preserve">
          <source>Read and return all the bytes from the stream until EOF, using multiple calls to the stream if necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61b4597ddfbabba4eb23399ed051cfc2df36902b" translate="yes" xml:space="preserve">
          <source>Read and return at most &lt;em&gt;size&lt;/em&gt; characters from the stream as a single &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;. If &lt;em&gt;size&lt;/em&gt; is negative or &lt;code&gt;None&lt;/code&gt;, reads until EOF.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="032833aa0f34522410b0dd6b09712e09e0b8dee1" translate="yes" xml:space="preserve">
          <source>Read and return one line from the stream. If &lt;em&gt;size&lt;/em&gt; is specified, at most &lt;em&gt;size&lt;/em&gt; bytes will be read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f93d80f4f50ff298f98fac30a63bf36fbd53ced" translate="yes" xml:space="preserve">
          <source>Read and return the contents of &lt;em&gt;resource&lt;/em&gt; within &lt;em&gt;package&lt;/em&gt; as a &lt;code&gt;str&lt;/code&gt;. By default, the contents are read as strict UTF-8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97dcf057220f3c5d8aa73dc678dd6d41940a6eef" translate="yes" xml:space="preserve">
          <source>Read and return the contents of the &lt;em&gt;resource&lt;/em&gt; within &lt;em&gt;package&lt;/em&gt; as &lt;code&gt;bytes&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be47592d3da6a91fa0c7b65e8dd4d66b69b12c9d" translate="yes" xml:space="preserve">
          <source>Read and return the next &lt;em&gt;nframes&lt;/em&gt; frames from the audio file. The returned data is a string containing for each frame the uncompressed samples of all channels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="accd63a3792cc0939b2b953724277a0f3ad00ec5" translate="yes" xml:space="preserve">
          <source>Read and return up to &lt;em&gt;size&lt;/em&gt; bytes with only one call on the raw stream. If at least one byte is buffered, only buffered bytes are returned. Otherwise, one raw stream read call is made.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d07db2cc7617a3fe8a45a82d4e33150c0ef968f" translate="yes" xml:space="preserve">
          <source>Read and return up to &lt;em&gt;size&lt;/em&gt; bytes, with at most one call to the underlying raw stream&amp;rsquo;s &lt;a href=&quot;#io.RawIOBase.read&quot;&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/a&gt; (or &lt;a href=&quot;#io.RawIOBase.readinto&quot;&gt;&lt;code&gt;readinto()&lt;/code&gt;&lt;/a&gt;) method. This can be useful if you are implementing your own buffering on top of a &lt;a href=&quot;#io.BufferedIOBase&quot;&gt;&lt;code&gt;BufferedIOBase&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="801839f88f45d74aab9e4937a55def4dc1f3fa7d" translate="yes" xml:space="preserve">
          <source>Read and return up to &lt;em&gt;size&lt;/em&gt; bytes. If the argument is omitted, &lt;code&gt;None&lt;/code&gt;, or negative, data is read and returned until EOF is reached. An empty &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; object is returned if the stream is already at EOF.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="269e643c44fc746a6aec1f6ed801592b3e2b769e" translate="yes" xml:space="preserve">
          <source>Read at least one byte of cooked data unless EOF is hit. Return &lt;code&gt;b''&lt;/code&gt; if EOF is hit. Block if no data is immediately available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7db014aec0f4b1148afa6c6feaf0ad9880222712" translate="yes" xml:space="preserve">
          <source>Read at most &lt;em&gt;buffer_size&lt;/em&gt; bytes from the socket&amp;rsquo;s remote end-point. An empty bytes object implies that the channel has been closed from the other end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22bf38b1194379ba0f960e68a6e61447edc5618e" translate="yes" xml:space="preserve">
          <source>Read at most &lt;em&gt;n&lt;/em&gt; bytes from file descriptor &lt;em&gt;fd&lt;/em&gt; at a position of &lt;em&gt;offset&lt;/em&gt;, leaving the file offset unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="950e8a25f50ef4960b770d71d7ff0642abfb35a5" translate="yes" xml:space="preserve">
          <source>Read at most &lt;em&gt;n&lt;/em&gt; bytes from file descriptor &lt;em&gt;fd&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84fce006d0a1e309d3ec44e51f1cdb77c1f298eb" translate="yes" xml:space="preserve">
          <source>Read at most &lt;em&gt;size&lt;/em&gt; bytes from the chunk (less if the read hits the end of the chunk before obtaining &lt;em&gt;size&lt;/em&gt; bytes). If the &lt;em&gt;size&lt;/em&gt; argument is negative or omitted, read all data until the end of the chunk. An empty bytes object is returned when the end of the chunk is encountered immediately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6cb6b66afb555d54c1da5b4951f06f0d83fa104" translate="yes" xml:space="preserve">
          <source>Read bytes into a pre-allocated, writable &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;&lt;em&gt;b&lt;/em&gt; and return the number of bytes read. For example, &lt;em&gt;b&lt;/em&gt; might be a &lt;a href=&quot;stdtypes#bytearray&quot;&gt;&lt;code&gt;bytearray&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="623f707fa12afd59cb42a95e249c0cfa8d84403c" translate="yes" xml:space="preserve">
          <source>Read bytes into a pre-allocated, writable &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;&lt;em&gt;b&lt;/em&gt;, and return the number of bytes read. For example, &lt;em&gt;b&lt;/em&gt; might be a &lt;a href=&quot;stdtypes#bytearray&quot;&gt;&lt;code&gt;bytearray&lt;/code&gt;&lt;/a&gt;. If the object is in non-blocking mode and no bytes are available, &lt;code&gt;None&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40fde32cbda88fe61b04a63e828036182507da5e" translate="yes" xml:space="preserve">
          <source>Read bytes into a pre-allocated, writable &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;&lt;em&gt;b&lt;/em&gt;, using at most one call to the underlying raw stream&amp;rsquo;s &lt;a href=&quot;#io.RawIOBase.read&quot;&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/a&gt; (or &lt;a href=&quot;#io.RawIOBase.readinto&quot;&gt;&lt;code&gt;readinto()&lt;/code&gt;&lt;/a&gt;) method. Return the number of bytes read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11784d641386cbb3b9565cb5e44d47cfb462f62e" translate="yes" xml:space="preserve">
          <source>Read data from the stream until &lt;em&gt;separator&lt;/em&gt; is found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2836a8a7b00fb58916686face31bb01a8f04add3" translate="yes" xml:space="preserve">
          <source>Read everything that can be without blocking in I/O (eager).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="086341b1243ffe085f2b510b8dbe64cd54ef265d" translate="yes" xml:space="preserve">
          <source>Read exactly &lt;em&gt;n&lt;/em&gt; bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71e0ef19601dc132ab6b288b3cecb7a550fb8ec0" translate="yes" xml:space="preserve">
          <source>Read from a file descriptor &lt;em&gt;fd&lt;/em&gt; at a position of &lt;em&gt;offset&lt;/em&gt; into mutable &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like objects&lt;/a&gt;&lt;em&gt;buffers&lt;/em&gt;, leaving the file offset unchanged. Transfer data into each buffer until it is full and then move on to the next buffer in the sequence to hold the rest of the data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46f1f0afa3b7935125f9a8761dca565440d2922a" translate="yes" xml:space="preserve">
          <source>Read from a file descriptor &lt;em&gt;fd&lt;/em&gt; into a number of mutable &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like objects&lt;/a&gt;&lt;em&gt;buffers&lt;/em&gt;. Transfer data into each buffer until it is full and then move on to the next buffer in the sequence to hold the rest of the data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="370a120715a7c1833cbfdc99def641a60b759335" translate="yes" xml:space="preserve">
          <source>Read into &lt;em&gt;buffer&lt;/em&gt; a complete message of byte data sent from the other end of the connection and return the number of bytes in the message. Blocks until there is something to receive. Raises &lt;a href=&quot;exceptions#EOFError&quot;&gt;&lt;code&gt;EOFError&lt;/code&gt;&lt;/a&gt; if there is nothing left to receive and the other end was closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58fd9f6e88d1c5506b9f30352520459e5d574878" translate="yes" xml:space="preserve">
          <source>Read one line from the input stream and return the decoded data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c530ff788aa04dd6810efcf2ec524d9201915724" translate="yes" xml:space="preserve">
          <source>Read one line, where &amp;ldquo;line&amp;rdquo; is a sequence of bytes ending with &lt;code&gt;\n&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a11d3494cb085e6bb059cce3b8c7779518c0f535" translate="yes" xml:space="preserve">
          <source>Read one value from the open file and return it. If no valid value is read (e.g. because the data has a different Python version&amp;rsquo;s incompatible marshal format), raise &lt;a href=&quot;exceptions#EOFError&quot;&gt;&lt;code&gt;EOFError&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. The file must be a readable &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-binary-file&quot;&gt;binary file&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3cc8c56e2bce4a91f9564fd0a68bebf4f1aae62" translate="yes" xml:space="preserve">
          <source>Read only mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d62b80a78ee9fd52c9bd1c58e7df70e3d3b9dbc0" translate="yes" xml:space="preserve">
          <source>Read readily available data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4f07bb853e3e73e2f5713357ac165dd42bb44e7" translate="yes" xml:space="preserve">
          <source>Read the &lt;a href=&quot;#security-considerations&quot;&gt;Security Considerations&lt;/a&gt; section before using &lt;code&gt;shell=True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36a78bd35a074b6a5224921622d62064039708b3" translate="yes" xml:space="preserve">
          <source>Read the Wikipedia article, &lt;a href=&quot;https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator&quot;&gt;Cryptographically secure pseudorandom number generator (CSPRNG)&lt;/a&gt;, to get the requirements of a cryptographically generator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a690d2859783c0df3df22c4539d2e42784ae104e" translate="yes" xml:space="preserve">
          <source>Read the current file as bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffe92b56501ebcdcbab2c7c99fbe83d9fbdad392" translate="yes" xml:space="preserve">
          <source>Read the current file as unicode text. Positional and keyword arguments are passed through to &lt;a href=&quot;io#io.TextIOWrapper&quot;&gt;&lt;code&gt;io.TextIOWrapper&lt;/code&gt;&lt;/a&gt; (except &lt;code&gt;buffer&lt;/code&gt;, which is implied by the context).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae4d23471fd1abd1d35737496f1afc5caa8f9fa3" translate="yes" xml:space="preserve">
          <source>Read the documentation for your HTTP server and check with your local system administrator to find the directory where CGI scripts should be installed; usually this is in a directory &lt;code&gt;cgi-bin&lt;/code&gt; in the server tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6c0096aa107f685e086ee5056e587ef9245c6fb" translate="yes" xml:space="preserve">
          <source>Read the file &lt;code&gt;list&lt;/code&gt; and add each line that it contains to the list of files and directories to compile. If &lt;code&gt;list&lt;/code&gt; is &lt;code&gt;-&lt;/code&gt;, read lines from &lt;code&gt;stdin&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9043cc7135605ae79c85c6a4222a2b9b7760d02" translate="yes" xml:space="preserve">
          <source>Read the next member from the &lt;a href=&quot;#tarfile.TarFile&quot;&gt;&lt;code&gt;TarFile&lt;/code&gt;&lt;/a&gt; object &lt;em&gt;tarfile&lt;/em&gt; and return it as a &lt;a href=&quot;#tarfile.TarInfo&quot;&gt;&lt;code&gt;TarInfo&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2e2db3d4342df11e319327d19c3f517416fd093" translate="yes" xml:space="preserve">
          <source>Read the pickled representation of an object from the open &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;file object&lt;/a&gt;&lt;em&gt;file&lt;/em&gt; and return the reconstituted object hierarchy specified therein. This is equivalent to &lt;code&gt;Unpickler(file).load()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca7f3209ca328076e8c99b3695b834a977dae426" translate="yes" xml:space="preserve">
          <source>Read the pickled representation of an object from the open file object given in the constructor, and return the reconstituted object hierarchy specified therein. Bytes past the pickled representation of the object are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="244e9ebb10edf2b477c2a4c43f22d764476ea5ab" translate="yes" xml:space="preserve">
          <source>Read until a given byte string, &lt;em&gt;expected&lt;/em&gt;, is encountered or until &lt;em&gt;timeout&lt;/em&gt; seconds have passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d24f7fea0df1e214b18d3f53bb4f3190e644dbd" translate="yes" xml:space="preserve">
          <source>Read until newline or EOF and return a single &lt;code&gt;str&lt;/code&gt;. If the stream is already at EOF, an empty string is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="275ad8a9522498120a9251ff218f6d8a6854e563" translate="yes" xml:space="preserve">
          <source>Read until one from a list of a regular expressions matches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="355759e6f9cbb09a4ddd49bcde6c6fe81070120b" translate="yes" xml:space="preserve">
          <source>Read up to &lt;em&gt;len&lt;/em&gt; bytes of data from the SSL socket and return the result as a &lt;code&gt;bytes&lt;/code&gt; instance. If &lt;em&gt;buffer&lt;/em&gt; is specified, then read into the buffer instead, and return the number of bytes read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67c359728ae94f131b3de31cc8fe482af1689b90" translate="yes" xml:space="preserve">
          <source>Read up to &lt;em&gt;n&lt;/em&gt; bytes from the memory buffer. If &lt;em&gt;n&lt;/em&gt; is not specified or negative, all bytes are returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66c8dadf4af31035a32dfe0697628b30df8e2340" translate="yes" xml:space="preserve">
          <source>Read up to &lt;em&gt;n&lt;/em&gt; bytes. If &lt;em&gt;n&lt;/em&gt; is not provided, or set to &lt;code&gt;-1&lt;/code&gt;, read until EOF and return all read bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be9279935b87c86aa3d872251148831f8eef60b1" translate="yes" xml:space="preserve">
          <source>Read up to &lt;em&gt;size&lt;/em&gt; bytes from the object and return them. As a convenience, if &lt;em&gt;size&lt;/em&gt; is unspecified or -1, all bytes until EOF are returned. Otherwise, only one system call is ever made. Fewer than &lt;em&gt;size&lt;/em&gt; bytes may be returned if the operating system call returns fewer than &lt;em&gt;size&lt;/em&gt; bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d7c483daa44c7fc69ec7c033ba33d2f0ecf7b8c" translate="yes" xml:space="preserve">
          <source>Read window related data stored in the file by an earlier &lt;code&gt;putwin()&lt;/code&gt; call. The routine then creates and initializes a new window using that data, returning the new window object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da08100916e9f503e065d06037cb6883e9110bf4" translate="yes" xml:space="preserve">
          <source>Read-only Transports</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9024b38762e4a2f67f6a66a7cd3c49edf9e41023" translate="yes" xml:space="preserve">
          <source>Read-only access to size in bytes of the shared memory block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28e815b1c90cbea2302aea1fb4f0320664d93b86" translate="yes" xml:space="preserve">
          <source>Read-only access to the unique name of the shared memory block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a759c19cd2bd30e46f16084fc5f6eb8f05850a3d" translate="yes" xml:space="preserve">
          <source>Read-only attribute containing the &lt;a href=&quot;struct#module-struct&quot;&gt;&lt;code&gt;struct&lt;/code&gt;&lt;/a&gt; packing format used by all currently stored values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0255693ac4e04ef15e0f7093799a77cddf306f8" translate="yes" xml:space="preserve">
          <source>Read-only attribute returning a list of upcoming events in the order they will be run. Each event is shown as a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-named-tuple&quot;&gt;named tuple&lt;/a&gt; with the following fields: time, priority, action, argument, kwargs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd7967994dfc943a9d75a158de2c9b6edcab50b2" translate="yes" xml:space="preserve">
          <source>Read-only file system</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e14e4cb7a5fc41c26789e4ceb8b7556512ce5b3c" translate="yes" xml:space="preserve">
          <source>Read-only option. The widget periodically increments the value of this option whenever its value is greater than 0 and, in determinate mode, less than maximum. This option may be used by the current theme to provide additional animation effects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdd475b101ff224617dbdc559cda3c41a6196b2b" translate="yes" xml:space="preserve">
          <source>Read-only proxy of a mapping. It provides a dynamic view on the mapping&amp;rsquo;s entries, which means that when the mapping changes, the view reflects these changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="617e4fa30ba80f113b7bc6e6c0b28994cdf5dc81" translate="yes" xml:space="preserve">
          <source>Read/write attribute that controls the number of rows returned by &lt;a href=&quot;#sqlite3.Cursor.fetchmany&quot;&gt;&lt;code&gt;fetchmany()&lt;/code&gt;&lt;/a&gt;. The default value is 1 which means a single row would be fetched per call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1db1af1a77800e199d231211e0ee56c94656a50" translate="yes" xml:space="preserve">
          <source>Reader Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db2391bcf367fb51145969722a1c93694fa96fd1" translate="yes" xml:space="preserve">
          <source>Reader objects (&lt;a href=&quot;#csv.DictReader&quot;&gt;&lt;code&gt;DictReader&lt;/code&gt;&lt;/a&gt; instances and objects returned by the &lt;a href=&quot;#csv.reader&quot;&gt;&lt;code&gt;reader()&lt;/code&gt;&lt;/a&gt; function) have the following public methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36423bc484450ac08875c5c75741a36b238967ce" translate="yes" xml:space="preserve">
          <source>Reader objects have the following public attributes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3216a8ee62aa836c78abf06d3d2b2c311982c82c" translate="yes" xml:space="preserve">
          <source>Reading Mail with Rmail</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f1c88aeb61edc1aa1f64399ee69112fad93c18f" translate="yes" xml:space="preserve">
          <source>Reading a file with an alternate format:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a2bc35fba7dad0f428a963052db61b92ac210d0" translate="yes" xml:space="preserve">
          <source>Reading and writing &lt;strong&gt;gzip&lt;/strong&gt;-format files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d84f8e2c49c100903904fb63d7379d86751544b5" translate="yes" xml:space="preserve">
          <source>Reading and writing compressed files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d4bfaee912bc17ab5a2c37daed14a5b4b6d07f6" translate="yes" xml:space="preserve">
          <source>Reading in a compressed file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10300bcc0ccd09bb4fd189b1c4c1aeb7f5446577" translate="yes" xml:space="preserve">
          <source>Reading the &lt;code&gt;port&lt;/code&gt; attribute will raise a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; if an invalid port is specified in the URL. See section &lt;a href=&quot;#urlparse-result-object&quot;&gt;Structured Parse Results&lt;/a&gt; for more information on the result object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e840c99d90d44d7beed3e6b82643eb55b43dcea5" translate="yes" xml:space="preserve">
          <source>Readline configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="172081870890f80c50c85609cacec8034dd848d9" translate="yes" xml:space="preserve">
          <source>Readline keybindings may be configured via an initialization file, typically &lt;code&gt;.inputrc&lt;/code&gt; in your home directory. See &lt;a href=&quot;https://tiswww.cwru.edu/php/chet/readline/rluserman.html#SEC9&quot;&gt;Readline Init File&lt;/a&gt; in the GNU Readline manual for information about the format and allowable constructs of that file, and the capabilities of the Readline library in general.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10ac791e71e93f862245871c4af29005241b9a34" translate="yes" xml:space="preserve">
          <source>Reads &lt;em&gt;path&lt;/em&gt; as a binary file and returns the bytes from it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f0d14ec42b269211345636b5534da62c18d549b" translate="yes" xml:space="preserve">
          <source>Reads &lt;em&gt;size&lt;/em&gt; bytes from the remote server. You may override this method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1ce17a8a9a4575f081b7748033ddd36404c0db6" translate="yes" xml:space="preserve">
          <source>Reads and returns at most &lt;em&gt;n&lt;/em&gt; frames of audio, as a &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="016f3cb3ac7a6483a9a12e632b5df2abaee0a4b5" translate="yes" xml:space="preserve">
          <source>Reads and returns the response body, or up to the next &lt;em&gt;amt&lt;/em&gt; bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fed140dfd1d54545cc77cf6a66050b5153d6ac71" translate="yes" xml:space="preserve">
          <source>Reads one line from the remote server. You may override this method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ffa3183d71464b7a65987dec7e601ad7f53e81a" translate="yes" xml:space="preserve">
          <source>Reads the &lt;code&gt;robots.txt&lt;/code&gt; URL and feeds it to the parser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cce7e602b272ec5e4ca4c13ba5491dc9a092ea9" translate="yes" xml:space="preserve">
          <source>Reads the logging configuration from a &lt;a href=&quot;configparser#module-configparser&quot;&gt;&lt;code&gt;configparser&lt;/code&gt;&lt;/a&gt;-format file. The format of the file should be as described in &lt;a href=&quot;#logging-config-fileformat&quot;&gt;Configuration file format&lt;/a&gt;. This function can be called several times from an application, allowing an end user to select from various pre-canned configurations (if the developer provides a mechanism to present the choices and load the chosen configuration).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94a1c358e9ba85fac3229ed196a115be7045cbf9" translate="yes" xml:space="preserve">
          <source>Reads up to the next len(b) bytes of the response body into the buffer &lt;em&gt;b&lt;/em&gt;. Returns the number of bytes read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b7b781423798a78a5487b901d30aec866644103" translate="yes" xml:space="preserve">
          <source>Ready for output: writing will not block</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e410122c8f53dfdabf057b3e096b98c81ad68e74" translate="yes" xml:space="preserve">
          <source>Real also provides defaults for &lt;a href=&quot;functions#complex&quot;&gt;&lt;code&gt;complex()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#numbers.Complex.real&quot;&gt;&lt;code&gt;real&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#numbers.Complex.imag&quot;&gt;&lt;code&gt;imag&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#numbers.Complex.conjugate&quot;&gt;&lt;code&gt;conjugate()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6414efc283d993817db64cdec7ef20c4bd2eba0c" translate="yes" xml:space="preserve">
          <source>Real size of the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6565a5b039a6fd648b22ceea587ede519f134bdb" translate="yes" xml:space="preserve">
          <source>Real world examples of reentrancy are more likely to involve multiple functions calling each other and hence be far more complicated than this example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e78773d0218c4431c0d5b19ada30e8c89952290" translate="yes" xml:space="preserve">
          <source>Real-valued distributions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d51911428c69cc773c6faac0d6e0f78f4fec08a1" translate="yes" xml:space="preserve">
          <source>Reallocate storage for a curses window to adjust its dimensions to the specified values. If either dimension is larger than the current values, the window&amp;rsquo;s data is filled with blanks that have the current background rendition (as set by &lt;a href=&quot;#curses.window.bkgdset&quot;&gt;&lt;code&gt;bkgdset()&lt;/code&gt;&lt;/a&gt;) merged into them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acfbb75c08c1128d2822ae8e5c5d5a4e3ab7130c" translate="yes" xml:space="preserve">
          <source>Reason phrase returned by server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3729bf88b61b1fc78b1c2486abb63f7a87daa766" translate="yes" xml:space="preserve">
          <source>Recall that the use of a type alias declares two types to be &lt;em&gt;equivalent&lt;/em&gt; to one another. Doing &lt;code&gt;Alias = Original&lt;/code&gt; will make the static type checker treat &lt;code&gt;Alias&lt;/code&gt; as being &lt;em&gt;exactly equivalent&lt;/em&gt; to &lt;code&gt;Original&lt;/code&gt; in all cases. This is useful when you want to simplify complex type signatures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa1b054549b2e91025585495171c4282ac8e4217" translate="yes" xml:space="preserve">
          <source>Receive a message, calculate the digest of the message using &lt;em&gt;authkey&lt;/em&gt; as the key, and then send the digest back.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d57ef5a4f2a6abd0b387d37fa4f4ff988c8fbe7" translate="yes" xml:space="preserve">
          <source>Receive data from &lt;em&gt;sock&lt;/em&gt; into the &lt;em&gt;buf&lt;/em&gt; buffer. Modeled after the blocking &lt;a href=&quot;socket#socket.socket.recv_into&quot;&gt;&lt;code&gt;socket.recv_into()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70d9c71067229336eeee5fadb7b7a0ff772dc759" translate="yes" xml:space="preserve">
          <source>Receive data from the &lt;a href=&quot;socket#socket.socket&quot;&gt;&lt;code&gt;socket&lt;/code&gt;&lt;/a&gt; into a buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9abb4eb4d8e8514335de2fb01dee754d2fe37fde" translate="yes" xml:space="preserve">
          <source>Receive data from the &lt;a href=&quot;socket#socket.socket&quot;&gt;&lt;code&gt;socket&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="774ae2c3ec69a2cfb81913d5cee240dad966ffc8" translate="yes" xml:space="preserve">
          <source>Receive data from the socket, writing it into &lt;em&gt;buffer&lt;/em&gt; instead of creating a new bytestring. The return value is a pair &lt;code&gt;(nbytes, address)&lt;/code&gt; where &lt;em&gt;nbytes&lt;/em&gt; is the number of bytes received and &lt;em&gt;address&lt;/em&gt; is the address of the socket sending the data. See the Unix manual page &lt;em&gt;&lt;a href=&quot;https://manpages.debian.org/recv(2)&quot;&gt;recv(2)&lt;/a&gt;&lt;/em&gt; for the meaning of the optional argument &lt;em&gt;flags&lt;/em&gt;; it defaults to zero. (The format of &lt;em&gt;address&lt;/em&gt; depends on the address family &amp;mdash; see above.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df9ebd8be22851abfc842c7d2c91246bfbb96740" translate="yes" xml:space="preserve">
          <source>Receive data from the socket. The return value is a bytes object representing the data received. The maximum amount of data to be received at once is specified by &lt;em&gt;bufsize&lt;/em&gt;. See the Unix manual page &lt;em&gt;&lt;a href=&quot;https://manpages.debian.org/recv(2)&quot;&gt;recv(2)&lt;/a&gt;&lt;/em&gt; for the meaning of the optional argument &lt;em&gt;flags&lt;/em&gt;; it defaults to zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc433c0c9914f4955ff5a97005a06dd7afb1cef5" translate="yes" xml:space="preserve">
          <source>Receive data from the socket. The return value is a pair &lt;code&gt;(bytes, address)&lt;/code&gt; where &lt;em&gt;bytes&lt;/em&gt; is a bytes object representing the data received and &lt;em&gt;address&lt;/em&gt; is the address of the socket sending the data. See the Unix manual page &lt;em&gt;&lt;a href=&quot;https://manpages.debian.org/recv(2)&quot;&gt;recv(2)&lt;/a&gt;&lt;/em&gt; for the meaning of the optional argument &lt;em&gt;flags&lt;/em&gt;; it defaults to zero. (The format of &lt;em&gt;address&lt;/em&gt; depends on the address family &amp;mdash; see above.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce7629e3171b3be5aefc520d8ece4a3ff43dad28" translate="yes" xml:space="preserve">
          <source>Receive normal data (up to &lt;em&gt;bufsize&lt;/em&gt; bytes) and ancillary data from the socket. The &lt;em&gt;ancbufsize&lt;/em&gt; argument sets the size in bytes of the internal buffer used to receive the ancillary data; it defaults to 0, meaning that no ancillary data will be received. Appropriate buffer sizes for ancillary data can be calculated using &lt;a href=&quot;#socket.CMSG_SPACE&quot;&gt;&lt;code&gt;CMSG_SPACE()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#socket.CMSG_LEN&quot;&gt;&lt;code&gt;CMSG_LEN()&lt;/code&gt;&lt;/a&gt;, and items which do not fit into the buffer might be truncated or discarded. The &lt;em&gt;flags&lt;/em&gt; argument defaults to 0 and has the same meaning as for &lt;a href=&quot;#socket.socket.recv&quot;&gt;&lt;code&gt;recv()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f772d48559fa81da24dc9bb2d05269e73289c1df" translate="yes" xml:space="preserve">
          <source>Receive normal data and ancillary data from the socket, behaving as &lt;a href=&quot;#socket.socket.recvmsg&quot;&gt;&lt;code&gt;recvmsg()&lt;/code&gt;&lt;/a&gt; would, but scatter the non-ancillary data into a series of buffers instead of returning a new bytes object. The &lt;em&gt;buffers&lt;/em&gt; argument must be an iterable of objects that export writable buffers (e.g. &lt;a href=&quot;stdtypes#bytearray&quot;&gt;&lt;code&gt;bytearray&lt;/code&gt;&lt;/a&gt; objects); these will be filled with successive chunks of the non-ancillary data until it has all been written or there are no more buffers. The operating system may set a limit (&lt;a href=&quot;os#os.sysconf&quot;&gt;&lt;code&gt;sysconf()&lt;/code&gt;&lt;/a&gt; value &lt;code&gt;SC_IOV_MAX&lt;/code&gt;) on the number of buffers that can be used. The &lt;em&gt;ancbufsize&lt;/em&gt; and &lt;em&gt;flags&lt;/em&gt; arguments have the same meaning as for &lt;a href=&quot;#socket.socket.recvmsg&quot;&gt;&lt;code&gt;recvmsg()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8ecb1d042a3b48788104ef92b11c47181ac8e90" translate="yes" xml:space="preserve">
          <source>Receive notification of a processing instruction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="969730be8780de4bfd4769adb56e080405d6b06e" translate="yes" xml:space="preserve">
          <source>Receive notification of a skipped entity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0f707ac12424cf8350e1640b548139d4dcbc752" translate="yes" xml:space="preserve">
          <source>Receive notification of character data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1ed75deeb63816becb327823827f361dc002ace" translate="yes" xml:space="preserve">
          <source>Receive notification of ignorable whitespace in element content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adb5b34aa1bdc2bed0a8cc8e47afe59f239921e0" translate="yes" xml:space="preserve">
          <source>Receive notification of the beginning of a document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab1f6aa93da5c7054ea80f41cb7b3df8f521f92c" translate="yes" xml:space="preserve">
          <source>Receive notification of the end of a document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62674304a4abc748b1b6aaf5985032b7ad74e50c" translate="yes" xml:space="preserve">
          <source>Receive up to &lt;em&gt;nbytes&lt;/em&gt; bytes from the socket, storing the data into a buffer rather than creating a new bytestring. If &lt;em&gt;nbytes&lt;/em&gt; is not specified (or 0), receive up to the size available in the given buffer. Returns the number of bytes received. See the Unix manual page &lt;em&gt;&lt;a href=&quot;https://manpages.debian.org/recv(2)&quot;&gt;recv(2)&lt;/a&gt;&lt;/em&gt; for the meaning of the optional argument &lt;em&gt;flags&lt;/em&gt;; it defaults to zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87516c95bd3638d0dfe06d89c812ba108573cb6a" translate="yes" xml:space="preserve">
          <source>Receive up to &lt;em&gt;nbytes&lt;/em&gt; from &lt;em&gt;sock&lt;/em&gt;. Asynchronous version of &lt;a href=&quot;socket#socket.socket.recv&quot;&gt;&lt;code&gt;socket.recv()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d5799828d6f5ec360634fcfaeae8aa75ab1b50b" translate="yes" xml:space="preserve">
          <source>Recent Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b7d55ef3dcf529e39026fa094b79632e8f36dc7" translate="yes" xml:space="preserve">
          <source>Recent Tcl/Tk manuals on www.tcl.tk.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04b2fa57ede9687f28f36d0a6144290c583c1ccc" translate="yes" xml:space="preserve">
          <source>Recent versions of the pickle protocol (from protocol 2 and upwards) feature efficient binary encodings for several common features and built-in types. Also, the &lt;a href=&quot;#module-pickle&quot;&gt;&lt;code&gt;pickle&lt;/code&gt;&lt;/a&gt; module has a transparent optimizer written in C.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fb1092f32d4fcbf9e061ffd718d4ec689c6c95e" translate="yes" xml:space="preserve">
          <source>Recipes</source>
          <target state="translated">Recipes</target>
        </trans-unit>
        <trans-unit id="31eccc69d3dfb9a8c5efb2b2336c72cd4a0e6ecd" translate="yes" xml:space="preserve">
          <source>Recipes and best practices</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0afefc625b1d6df9032c27d107d3cc92632128b0" translate="yes" xml:space="preserve">
          <source>Reconfigure this text stream using new settings for &lt;em&gt;encoding&lt;/em&gt;, &lt;em&gt;errors&lt;/em&gt;, &lt;em&gt;newline&lt;/em&gt;, &lt;em&gt;line_buffering&lt;/em&gt; and &lt;em&gt;write_through&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc08933b96ad762d14f56ef9bb38f79deb3264c9" translate="yes" xml:space="preserve">
          <source>Record &lt;em&gt;handler&lt;/em&gt; as the function to call when an object of a type matching &lt;em&gt;typekey&lt;/em&gt; is passed to &lt;a href=&quot;#email.contentmanager.set_content&quot;&gt;&lt;code&gt;set_content()&lt;/code&gt;&lt;/a&gt;. For the possible values of &lt;em&gt;typekey&lt;/em&gt;, see &lt;a href=&quot;#email.contentmanager.set_content&quot;&gt;&lt;code&gt;set_content()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56d721d9be865cbe675c509ad2dc82f65a32c297" translate="yes" xml:space="preserve">
          <source>Record Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="550210dffc16ae75a4266c879b85d63405b131ff" translate="yes" xml:space="preserve">
          <source>Record Separator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26602f7b5fcc3eacdb808f9d38dac9fb3601f555" translate="yes" xml:space="preserve">
          <source>Record separator, block-mode terminator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1b268d35219d40cf6f8bd8c752eb3d2e9da8ddd" translate="yes" xml:space="preserve">
          <source>Record that the package named &lt;em&gt;pkg_name&lt;/em&gt; can be found in the specified &lt;em&gt;path&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="361236b2995d356a16777babb86909ee78312843" translate="yes" xml:space="preserve">
          <source>Record the function &lt;em&gt;handler&lt;/em&gt; as the handler for &lt;em&gt;key&lt;/em&gt;. For the possible values of &lt;em&gt;key&lt;/em&gt;, see &lt;a href=&quot;#email.contentmanager.get_content&quot;&gt;&lt;code&gt;get_content()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a4482baecc5c936c327a024735cf6a4b7d357cf" translate="yes" xml:space="preserve">
          <source>Rectangular Turtles as Hanoi discs (shape, shapesize)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00b0621d227157f479fa34a6cf0046e754507f7b" translate="yes" xml:space="preserve">
          <source>RecursionError</source>
          <target state="translated">RecursionError</target>
        </trans-unit>
        <trans-unit id="96ba1b1015be70b0923b099b9a499b43d9c26512" translate="yes" xml:space="preserve">
          <source>Recursive directory creation function. Like &lt;a href=&quot;#os.mkdir&quot;&gt;&lt;code&gt;mkdir()&lt;/code&gt;&lt;/a&gt;, but makes all intermediate-level directories needed to contain the leaf directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1276ee86cf37b3c2f65fee0e5250c139938fbab4" translate="yes" xml:space="preserve">
          <source>Recursive directory or file renaming function. Works like &lt;a href=&quot;#os.rename&quot;&gt;&lt;code&gt;rename()&lt;/code&gt;&lt;/a&gt;, except creation of any intermediate directories needed to make the new pathname good is attempted first. After the rename, directories corresponding to rightmost path segments of the old name will be pruned away using &lt;a href=&quot;#os.removedirs&quot;&gt;&lt;code&gt;removedirs()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1727163dd0ed3d846cf01500b450064ac7a6858f" translate="yes" xml:space="preserve">
          <source>Recursive implementation used by &lt;a href=&quot;#reprlib.Repr.repr&quot;&gt;&lt;code&gt;repr()&lt;/code&gt;&lt;/a&gt;. This uses the type of &lt;em&gt;obj&lt;/em&gt; to determine which formatting method to call, passing it &lt;em&gt;obj&lt;/em&gt; and &lt;em&gt;level&lt;/em&gt;. The type-specific methods should call &lt;a href=&quot;#reprlib.Repr.repr1&quot;&gt;&lt;code&gt;repr1()&lt;/code&gt;&lt;/a&gt; to perform recursive formatting, with &lt;code&gt;level - 1&lt;/code&gt; for the value of &lt;em&gt;level&lt;/em&gt; in the recursive call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bbd41b3e25dc42209f3e3cf6dfc7788c3c2f7c4" translate="yes" xml:space="preserve">
          <source>Recursive objects (compound objects that, directly or indirectly, contain a reference to themselves) may cause a recursive loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cf343d35a2951efa9acec2d6f7d08389ad9b862" translate="yes" xml:space="preserve">
          <source>Recursively copy an entire directory tree rooted at &lt;em&gt;src&lt;/em&gt; to a directory named &lt;em&gt;dst&lt;/em&gt; and return the destination directory. &lt;em&gt;dirs_exist_ok&lt;/em&gt; dictates whether to raise an exception in case &lt;em&gt;dst&lt;/em&gt; or any missing parent directory already exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="180df0d6c8d4c579acdcd7d9396e0718f8e5314d" translate="yes" xml:space="preserve">
          <source>Recursively descend the directory tree named by &lt;em&gt;dir&lt;/em&gt;, compiling all &lt;code&gt;.py&lt;/code&gt; files along the way. Return a true value if all the files compiled successfully, and a false value otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27119d11be9fa4ec959592d161e4265bff641523" translate="yes" xml:space="preserve">
          <source>Recursively move a file or directory (&lt;em&gt;src&lt;/em&gt;) to another location (&lt;em&gt;dst&lt;/em&gt;) and return the destination.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3ca03bf0a62228194dc0b6acc42503eef9450f9" translate="yes" xml:space="preserve">
          <source>Recursively yield all descendant nodes in the tree starting at &lt;em&gt;node&lt;/em&gt; (including &lt;em&gt;node&lt;/em&gt; itself), in no specified order. This is useful if you only want to modify nodes in place and don&amp;rsquo;t care about the context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc9db3a795571c7e71f45670a1da7ff49b5f1557" translate="yes" xml:space="preserve">
          <source>Red</source>
          <target state="translated">Red</target>
        </trans-unit>
        <trans-unit id="86d1aaf14cd279ae2cf1492c578de97ba98cd80c" translate="yes" xml:space="preserve">
          <source>Redirect to the &lt;code&gt;Location:&lt;/code&gt; or &lt;code&gt;URI:&lt;/code&gt; URL. This method is called by the parent &lt;a href=&quot;#urllib.request.OpenerDirector&quot;&gt;&lt;code&gt;OpenerDirector&lt;/code&gt;&lt;/a&gt; when getting an HTTP &amp;lsquo;moved permanently&amp;rsquo; response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="471b94d402d16a5fe7549d001a68ada1f7ddb16f" translate="yes" xml:space="preserve">
          <source>Redo</source>
          <target state="translated">Redo</target>
        </trans-unit>
        <trans-unit id="fa00e646528931eda76d7105684ee497a84cf30a" translate="yes" xml:space="preserve">
          <source>Redo the last undone change to the current window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26744d62a96f1cadd0af20a2e6465fecffeb9384" translate="yes" xml:space="preserve">
          <source>Reduces &lt;em&gt;x&lt;/em&gt; to its simplest form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d25d695408ce744a2210b44ac61f09f673eda1c2" translate="yes" xml:space="preserve">
          <source>Redundant arguments are skipped, e.g.:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faf0ccf6987b184ee29bf8360d65c3940cac99c3" translate="yes" xml:space="preserve">
          <source>Reentrancy</source>
          <target state="translated">Reentrancy</target>
        </trans-unit>
        <trans-unit id="31af1e7d9bdf0c23f4f62741ae34245ad0ba7260" translate="yes" xml:space="preserve">
          <source>Reentrant context managers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b75a504a3c0ba70ec0c10b2a3af9e5159a4bdcef" translate="yes" xml:space="preserve">
          <source>Reentrant locks also support the &lt;a href=&quot;#with-locks&quot;&gt;context management protocol&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb78d0d5486a369e93ee7a6cdd4b38e67e977db6" translate="yes" xml:space="preserve">
          <source>Ref (reference)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4c48c1a7a47b1d71c279a887e2ffc0a67306f39" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;#pickle-picklable&quot;&gt;What can be pickled and unpickled?&lt;/a&gt; to learn what kinds of objects can be pickled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cf6852f041f2f75b501bc94adc79db87ab5b0bf" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;multiprocessing#multiprocessing.managers.BaseManager&quot;&gt;&lt;code&gt;multiprocessing.managers.BaseManager&lt;/code&gt;&lt;/a&gt; for a description of the inherited &lt;em&gt;address&lt;/em&gt; and &lt;em&gt;authkey&lt;/em&gt; optional input arguments and how they may be used to connect to an existing &lt;code&gt;SharedMemoryManager&lt;/code&gt; service from other processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9cf528cc829e45349c0d15f2db845b85a0259ce" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;urllib.request#urllib-examples&quot;&gt;urllib examples&lt;/a&gt; to find out how urlencode method can be used for generating query string for a URL or data for POST.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae2245c595777492261bc4133ce898624d7c4f2c" translate="yes" xml:space="preserve">
          <source>Refer to the corresponding attribute documentation in &lt;a href=&quot;#ipaddress.IPv4Address&quot;&gt;&lt;code&gt;IPv4Address&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9576a59010d3da190ca3684a799f611a1b6fbcd" translate="yes" xml:space="preserve">
          <source>Refer to the corresponding attribute documentation in &lt;a href=&quot;#ipaddress.IPv4Interface&quot;&gt;&lt;code&gt;IPv4Interface&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b85be0aaf5c895e33415ac3f0b5c8f83d27d37a" translate="yes" xml:space="preserve">
          <source>Refer to the corresponding attribute documentation in &lt;a href=&quot;#ipaddress.IPv4Network&quot;&gt;&lt;code&gt;IPv4Network&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df17e49138f3f65ca0925aa5f4e03398b9debe72" translate="yes" xml:space="preserve">
          <source>Refer to the section &lt;a href=&quot;#pickle-state&quot;&gt;Handling Stateful Objects&lt;/a&gt; for more information about how to use the methods &lt;a href=&quot;#object.__getstate__&quot;&gt;&lt;code&gt;__getstate__()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#object.__setstate__&quot;&gt;&lt;code&gt;__setstate__()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db1c784524e1b54011a95823026161f7c8517fe0" translate="yes" xml:space="preserve">
          <source>Reference</source>
          <target state="translated">Reference</target>
        </trans-unit>
        <trans-unit id="2eca1b4d68aeba600d4d3d5d19a63fddf76c2ea9" translate="yes" xml:space="preserve">
          <source>ReferenceError</source>
          <target state="translated">ReferenceError</target>
        </trans-unit>
        <trans-unit id="5d20d0fee3b91643dd8d272ac33d01ca95179d82" translate="yes" xml:space="preserve">
          <source>References</source>
          <target state="translated">References</target>
        </trans-unit>
        <trans-unit id="e2c4c767a75ea64177cb183a0c2547b6552dec09" translate="yes" xml:space="preserve">
          <source>Reformat the current blank-line-delimited paragraph in comment block or multiline string or selected line in a string. All lines in the paragraph will be formatted to less than N columns, where N defaults to 72.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56e3badc4e6c5cc95e0ea5a9a878b9bd09f319d4" translate="yes" xml:space="preserve">
          <source>Refresh</source>
          <target state="translated">Refresh</target>
        </trans-unit>
        <trans-unit id="1a40d6fbcfd5a05686e3eb47a0a8f93b385f5db8" translate="yes" xml:space="preserve">
          <source>Refresh screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff94044878bc215938c36be9ee6c2a78ff6b5155" translate="yes" xml:space="preserve">
          <source>Regardless of the system you&amp;rsquo;re running on, you can instantiate all of these classes, since they don&amp;rsquo;t provide any operation that does system calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c64942ace4774bf822764bf8de2f43e9d6205ec5" translate="yes" xml:space="preserve">
          <source>Regardless, for maximum interoperability, you may wish to voluntarily adhere to the restriction yourself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2257c3081ae3f64a08a00f535816622645cf47db" translate="yes" xml:space="preserve">
          <source>Register &lt;em&gt;func&lt;/em&gt; as a function to be executed at termination. Any optional arguments that are to be passed to &lt;em&gt;func&lt;/em&gt; must be passed as arguments to &lt;a href=&quot;#atexit.register&quot;&gt;&lt;code&gt;register()&lt;/code&gt;&lt;/a&gt;. It is possible to register the same function and arguments more than once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cf23139d88e505f3ae5029c24fc6e2e5c9845c0" translate="yes" xml:space="preserve">
          <source>Register &lt;em&gt;subclass&lt;/em&gt; as a &amp;ldquo;virtual subclass&amp;rdquo; of this ABC. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46544acf16426268f320581723045a91c82f422a" translate="yes" xml:space="preserve">
          <source>Register a &lt;a href=&quot;#unittest.TestResult&quot;&gt;&lt;code&gt;TestResult&lt;/code&gt;&lt;/a&gt; object for control-c handling. Registering a result stores a weak reference to it, so it doesn&amp;rsquo;t prevent the result from being garbage collected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9b46ebeff8249fc9c6789f792454d36e4861953" translate="yes" xml:space="preserve">
          <source>Register a &lt;em&gt;defect&lt;/em&gt; on &lt;em&gt;obj&lt;/em&gt;. In the email package, &lt;em&gt;defect&lt;/em&gt; will always be a subclass of &lt;code&gt;Defect&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="164f6bd8d95c5fd4c9678b7c32a2758a86a74a63" translate="yes" xml:space="preserve">
          <source>Register a callback function that will be called after the TLS Client Hello handshake message has been received by the SSL/TLS server when the TLS client specifies a server name indication. The server name indication mechanism is specified in &lt;a href=&quot;https://tools.ietf.org/html/rfc6066.html&quot; id=&quot;index-16&quot;&gt;&lt;strong&gt;RFC 6066&lt;/strong&gt;&lt;/a&gt; section 3 - Server Name Indication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b3559061218c8902451a453ef6702c1f1345ec0" translate="yes" xml:space="preserve">
          <source>Register a codec search function. Search functions are expected to take one argument, being the encoding name in all lower case letters, and return a &lt;a href=&quot;#codecs.CodecInfo&quot;&gt;&lt;code&gt;CodecInfo&lt;/code&gt;&lt;/a&gt; object. In case a search function cannot find a given encoding, it should return &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b03d910abc654603111bdba5ec907f8cae3a73be" translate="yes" xml:space="preserve">
          <source>Register a fd descriptor with the epoll object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcd44a82c12fc43270246c151369862610370a6d" translate="yes" xml:space="preserve">
          <source>Register a file descriptor with the polling object. Future calls to the &lt;a href=&quot;#select.poll&quot;&gt;&lt;code&gt;poll()&lt;/code&gt;&lt;/a&gt; method will then check whether the file descriptor has any pending I/O events. &lt;em&gt;fd&lt;/em&gt; can be either an integer, or an object with a &lt;a href=&quot;io#io.IOBase.fileno&quot;&gt;&lt;code&gt;fileno()&lt;/code&gt;&lt;/a&gt; method that returns an integer. File objects implement &lt;code&gt;fileno()&lt;/code&gt;, so they can also be used as the argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37055bd4fc23c0f4fdea4606eace1de43793f75b" translate="yes" xml:space="preserve">
          <source>Register a file object for selection, monitoring it for I/O events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fd26bcbfcaa91f7175cd5c9e51256abe0c74da5" translate="yes" xml:space="preserve">
          <source>Register a function that can respond to XML-RPC requests. If &lt;em&gt;name&lt;/em&gt; is given, it will be the method name associated with &lt;em&gt;function&lt;/em&gt;, otherwise &lt;code&gt;function.__name__&lt;/code&gt; will be used. &lt;em&gt;name&lt;/em&gt; is a string, and may contain characters not legal in Python identifiers, including the period character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="932c565191eb5d0a0f44bcd3a47f087684594629" translate="yes" xml:space="preserve">
          <source>Register a new child handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ca76dbaf3b10d5b00ef8023f3d721391c27d096" translate="yes" xml:space="preserve">
          <source>Register a user signal: install a handler for the &lt;em&gt;signum&lt;/em&gt; signal to dump the traceback of all threads, or of the current thread if &lt;em&gt;all_threads&lt;/em&gt; is &lt;code&gt;False&lt;/code&gt;, into &lt;em&gt;file&lt;/em&gt;. Call the previous handler if chain is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7a88fc1c560d328f89eb19344727dd1b06a1f6a" translate="yes" xml:space="preserve">
          <source>Register an archiver for the format &lt;em&gt;name&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c69e4c1a6b761b31802eca6d70086c78cac40eb" translate="yes" xml:space="preserve">
          <source>Register an object which is used to expose method names which have not been registered using &lt;a href=&quot;#xmlrpc.server.CGIXMLRPCRequestHandler.register_function&quot;&gt;&lt;code&gt;register_function()&lt;/code&gt;&lt;/a&gt;. If instance contains a &lt;code&gt;_dispatch()&lt;/code&gt; method, it is called with the requested method name and the parameters from the request; the return value is returned to the client as the result. If instance does not have a &lt;code&gt;_dispatch()&lt;/code&gt; method, it is searched for an attribute matching the name of the requested method; if the requested method name contains periods, each component of the method name is searched for individually, with the effect that a simple hierarchical search is performed. The value found from this search is then called with the parameters from the request, and the return value is passed back to the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed9365f6c69e5a1b24741bf60904088a13744988" translate="yes" xml:space="preserve">
          <source>Register an object which is used to expose method names which have not been registered using &lt;a href=&quot;#xmlrpc.server.SimpleXMLRPCServer.register_function&quot;&gt;&lt;code&gt;register_function()&lt;/code&gt;&lt;/a&gt;. If &lt;em&gt;instance&lt;/em&gt; contains a &lt;code&gt;_dispatch()&lt;/code&gt; method, it is called with the requested method name and the parameters from the request. Its API is &lt;code&gt;def _dispatch(self, method, params)&lt;/code&gt; (note that &lt;em&gt;params&lt;/em&gt; does not represent a variable argument list). If it calls an underlying function to perform its task, that function is called as &lt;code&gt;func(*params)&lt;/code&gt;, expanding the parameter list. The return value from &lt;code&gt;_dispatch()&lt;/code&gt; is returned to the client as the result. If &lt;em&gt;instance&lt;/em&gt; does not have a &lt;code&gt;_dispatch()&lt;/code&gt; method, it is searched for an attribute matching the name of the requested method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e63339c20e691d44cfc9696ee457196f1582944e" translate="yes" xml:space="preserve">
          <source>Register an open socket to wait for data using streams</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31f209836a9b7ebbeed4270cc1f5fbc1d00b624f" translate="yes" xml:space="preserve">
          <source>Register callables to be executed when a new child process is forked using &lt;a href=&quot;#os.fork&quot;&gt;&lt;code&gt;os.fork()&lt;/code&gt;&lt;/a&gt; or similar process cloning APIs. The parameters are optional and keyword-only. Each specifies a different call point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7380a641971d9fdea939efb17a008fb3415a8df4" translate="yes" xml:space="preserve">
          <source>Register handlers for signals &lt;code&gt;SIGINT&lt;/code&gt; and &lt;code&gt;SIGTERM&lt;/code&gt; using the &lt;a href=&quot;#asyncio.loop.add_signal_handler&quot;&gt;&lt;code&gt;loop.add_signal_handler()&lt;/code&gt;&lt;/a&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b91bba2cba69b477fe0d2b0a0843ebcd636def10" translate="yes" xml:space="preserve">
          <source>Register the &lt;em&gt;factory&lt;/em&gt; function with the name &lt;em&gt;name&lt;/em&gt;. The factory function should return an object which implements the &lt;code&gt;DOMImplementation&lt;/code&gt; interface. The factory function can return the same object every time, or a new one for each call, as appropriate for the specific implementation (e.g. if that implementation supports some customization).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f92397a88086429e8a44b3cb946e76aa3d03bea9" translate="yes" xml:space="preserve">
          <source>Register the XML-RPC introspection functions &lt;code&gt;system.listMethods&lt;/code&gt;, &lt;code&gt;system.methodHelp&lt;/code&gt; and &lt;code&gt;system.methodSignature&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f57270a3a2291de58564a8382d4dd27ac258ceb6" translate="yes" xml:space="preserve">
          <source>Register the XML-RPC multicall function &lt;code&gt;system.multicall&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4718e11bf7cd26056f9aabd4bb5d18f811fd0df3" translate="yes" xml:space="preserve">
          <source>Register the browser type &lt;em&gt;name&lt;/em&gt;. Once a browser type is registered, the &lt;a href=&quot;#webbrowser.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; function can return a controller for that browser type. If &lt;em&gt;instance&lt;/em&gt; is not provided, or is &lt;code&gt;None&lt;/code&gt;, &lt;em&gt;constructor&lt;/em&gt; will be called without parameters to create an instance when needed. If &lt;em&gt;instance&lt;/em&gt; is provided, &lt;em&gt;constructor&lt;/em&gt; will never be called, and may be &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9feadc6219a888b6af3e0b732a44c86f6e6bc4fe" translate="yes" xml:space="preserve">
          <source>Register the error handling function &lt;em&gt;error_handler&lt;/em&gt; under the name &lt;em&gt;name&lt;/em&gt;. The &lt;em&gt;error_handler&lt;/em&gt; argument will be called during encoding and decoding in case of an error, when &lt;em&gt;name&lt;/em&gt; is specified as the errors parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9353afc89e79764054514b6909c4b75bd875f500" translate="yes" xml:space="preserve">
          <source>Register the read end of &lt;em&gt;pipe&lt;/em&gt; in the event loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03167f901b75de04f1a74c6dda1dfb5372323b7f" translate="yes" xml:space="preserve">
          <source>Register the write end of &lt;em&gt;pipe&lt;/em&gt; in the event loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9afbeb2844d451aa393d0047778bed406865a5a8" translate="yes" xml:space="preserve">
          <source>Registering a &lt;a href=&quot;#unittest.TestResult&quot;&gt;&lt;code&gt;TestResult&lt;/code&gt;&lt;/a&gt; object has no side-effects if control-c handling is not enabled, so test frameworks can unconditionally register all results they create independently of whether or not handling is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f806f73ca1282968116ee369be33ec7b2bc43a1e" translate="yes" xml:space="preserve">
          <source>Registering a file descriptor that&amp;rsquo;s already registered is not an error, and has the same effect as registering the descriptor exactly once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8d752e2d66634a0503418efc63377aedf300c3e" translate="yes" xml:space="preserve">
          <source>Registering a file descriptor that&amp;rsquo;s already registered is not an error, but the result is undefined. The appropriate action is to unregister or modify it first. This is an important difference compared with &lt;code&gt;poll()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b6323e44d8eb9755ce0c51d184939da5a24ae74" translate="yes" xml:space="preserve">
          <source>Registering a new dialect:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9b0a6a6e0ad10be8bd30c2abdfaa375bab2fed3" translate="yes" xml:space="preserve">
          <source>Registering an adapter callable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b4028ee967be38667ca5b4eb6a3d7780792a90b" translate="yes" xml:space="preserve">
          <source>Registers &lt;em&gt;trace_callback&lt;/em&gt; to be called for each SQL statement that is actually executed by the SQLite backend.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35efa660a7091cdf25e330f6bae8ae3ece9016c2" translate="yes" xml:space="preserve">
          <source>Registers a callable to convert a bytestring from the database into a custom Python type. The callable will be invoked for all database values that are of the type &lt;em&gt;typename&lt;/em&gt;. Confer the parameter &lt;em&gt;detect_types&lt;/em&gt; of the &lt;a href=&quot;#sqlite3.connect&quot;&gt;&lt;code&gt;connect()&lt;/code&gt;&lt;/a&gt; function for how the type detection works. Note that &lt;em&gt;typename&lt;/em&gt; and the name of the type in your query are matched in case-insensitive manner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6e987e63d4340915744a6d25f1e0148affac7a5" translate="yes" xml:space="preserve">
          <source>Registers a callable to convert the custom Python type &lt;em&gt;type&lt;/em&gt; into one of SQLite&amp;rsquo;s supported types. The callable &lt;em&gt;callable&lt;/em&gt; accepts as single parameter the Python value, and must return a value of the following types: int, float, str or bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f4f4f0d3036b0446492d39636a2ba426bf00bdf" translate="yes" xml:space="preserve">
          <source>Registers a namespace prefix. The registry is global, and any existing mapping for either the given prefix or the namespace URI will be removed. &lt;em&gt;prefix&lt;/em&gt; is a namespace prefix. &lt;em&gt;uri&lt;/em&gt; is a namespace uri. Tags and attributes in this namespace will be serialized with the given prefix, if at all possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="898448a0347d0a1cccd5de2f6639d1a5dec6c199" translate="yes" xml:space="preserve">
          <source>Registers a type-specific method called by &lt;a href=&quot;#unittest.TestCase.assertEqual&quot;&gt;&lt;code&gt;assertEqual()&lt;/code&gt;&lt;/a&gt; to check if two objects of exactly the same &lt;em&gt;typeobj&lt;/em&gt; (not subclasses) compare equal. &lt;em&gt;function&lt;/em&gt; must take two positional arguments and a third msg=None keyword argument just as &lt;a href=&quot;#unittest.TestCase.assertEqual&quot;&gt;&lt;code&gt;assertEqual()&lt;/code&gt;&lt;/a&gt; does. It must raise &lt;a href=&quot;#unittest.TestCase.failureException&quot;&gt;&lt;code&gt;self.failureException(msg)&lt;/code&gt;&lt;/a&gt; when inequality between the first two parameters is detected &amp;ndash; possibly providing useful information and explaining the inequalities in details in the error message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ed4baf6d52295c8cbd61889f5bc71b934277d03" translate="yes" xml:space="preserve">
          <source>Registers an unpack format. &lt;em&gt;name&lt;/em&gt; is the name of the format and &lt;em&gt;extensions&lt;/em&gt; is a list of extensions corresponding to the format, like &lt;code&gt;.zip&lt;/code&gt; for Zip files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dff8ae65444da1337c633c3a82fc2c97e6c4ebf7" translate="yes" xml:space="preserve">
          <source>Registers the XML-RPC introspection functions &lt;code&gt;system.listMethods&lt;/code&gt;, &lt;code&gt;system.methodHelp&lt;/code&gt; and &lt;code&gt;system.methodSignature&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b24c061372e9006ab3dba21e01332b1f78875c0" translate="yes" xml:space="preserve">
          <source>Registers the XML-RPC multicall function system.multicall.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21f1b9fba98b063f1e01a48b68deb0fe5c932f64" translate="yes" xml:space="preserve">
          <source>Registers the file handler callback function &lt;em&gt;func&lt;/em&gt;. The &lt;em&gt;file&lt;/em&gt; argument may either be an object with a &lt;a href=&quot;io#io.IOBase.fileno&quot;&gt;&lt;code&gt;fileno()&lt;/code&gt;&lt;/a&gt; method (such as a file or socket object), or an integer file descriptor. The &lt;em&gt;mask&lt;/em&gt; argument is an ORed combination of any of the three constants below. The callback is called as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00eb92c8b8f2eb8d829ae3e26e00670e31f68720" translate="yes" xml:space="preserve">
          <source>Registry Handle Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d479a6175499f959f3adaaac8b78ac75a72c8cd" translate="yes" xml:space="preserve">
          <source>Registry entries subordinate to this key allow you to access performance data. The data is not actually stored in the registry; the registry functions cause the system to collect the data from its source.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="891d33cc3ca4b92db2b616c6c874f3d2eb036366" translate="yes" xml:space="preserve">
          <source>Registry entries subordinate to this key define the default user configuration for new users on the local computer and the user configuration for the current user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dcd07c12eb2712977e50c638f465638745a96ab" translate="yes" xml:space="preserve">
          <source>Registry entries subordinate to this key define the physical state of the computer, including data about the bus type, system memory, and installed hardware and software.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40c4329d727d54c52d160922d278205eca8b3b6d" translate="yes" xml:space="preserve">
          <source>Registry entries subordinate to this key define the preferences of the current user. These preferences include the settings of environment variables, data about program groups, colors, printers, network connections, and application preferences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a734a77cb1b1cd6f9f28fe107f26bfe1d74de18c" translate="yes" xml:space="preserve">
          <source>Registry entries subordinate to this key define types (or classes) of documents and the properties associated with those types. Shell and COM applications use the information stored under this key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="769c4ae00ec08ffb7efba4a0686555cb084e381b" translate="yes" xml:space="preserve">
          <source>Regression testing is best confined to dedicated objects or files. There are several options for organizing tests:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9872d9ad98b2ae5a0752ca710959f64efa89b06" translate="yes" xml:space="preserve">
          <source>Regression testing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="469415c626b697430fa86fc9993ad32f63927e1f" translate="yes" xml:space="preserve">
          <source>Regular Expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e556cc3de941b0839b7798d403a3735b8507eafa" translate="yes" xml:space="preserve">
          <source>Regular Expression Examples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d09d9c65ab0a1e1b60f7fdee405a4cc73b31eb2" translate="yes" xml:space="preserve">
          <source>Regular Expression Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d255bd9ce32e1d539253422b204d6f8d5be2aa6" translate="yes" xml:space="preserve">
          <source>Regular Expression Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dd97ee527b620cafde5e92fbcb2c95497eed93a" translate="yes" xml:space="preserve">
          <source>Regular expressions beginning with &lt;code&gt;'^'&lt;/code&gt; can be used with &lt;a href=&quot;#re.search&quot;&gt;&lt;code&gt;search()&lt;/code&gt;&lt;/a&gt; to restrict the match at the beginning of the string:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d47a98032e08362b7f130e61db04cff15d0c211" translate="yes" xml:space="preserve">
          <source>Regular expressions can be concatenated to form new regular expressions; if &lt;em&gt;A&lt;/em&gt; and &lt;em&gt;B&lt;/em&gt; are both regular expressions, then &lt;em&gt;AB&lt;/em&gt; is also a regular expression. In general, if a string &lt;em&gt;p&lt;/em&gt; matches &lt;em&gt;A&lt;/em&gt; and another string &lt;em&gt;q&lt;/em&gt; matches &lt;em&gt;B&lt;/em&gt;, the string &lt;em&gt;pq&lt;/em&gt; will match AB. This holds unless &lt;em&gt;A&lt;/em&gt; or &lt;em&gt;B&lt;/em&gt; contain low precedence operations; boundary conditions between &lt;em&gt;A&lt;/em&gt; and &lt;em&gt;B&lt;/em&gt;; or have numbered group references. Thus, complex expressions can easily be constructed from simpler primitive expressions like the ones described here. For details of the theory and implementation of regular expressions, consult the Friedl book &lt;a href=&quot;#frie09&quot; id=&quot;id1&quot;&gt;[Frie09]&lt;/a&gt;, or almost any textbook about compiler construction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec9b77a5957eaf418ffffd72a87c45d90f1ded45" translate="yes" xml:space="preserve">
          <source>Regular expressions can contain both special and ordinary characters. Most ordinary characters, like &lt;code&gt;'A'&lt;/code&gt;, &lt;code&gt;'a'&lt;/code&gt;, or &lt;code&gt;'0'&lt;/code&gt;, are the simplest regular expressions; they simply match themselves. You can concatenate ordinary characters, so &lt;code&gt;last&lt;/code&gt; matches the string &lt;code&gt;'last'&lt;/code&gt;. (In the rest of this section, we&amp;rsquo;ll write RE&amp;rsquo;s in &lt;code&gt;this special style&lt;/code&gt;, usually without quotes, and strings to be matched &lt;code&gt;'in single quotes'&lt;/code&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd13ca3bb8d1c682d2d59d5f935beea7ebc60be8" translate="yes" xml:space="preserve">
          <source>Regular expressions use the backslash character (&lt;code&gt;'\'&lt;/code&gt;) to indicate special forms or to allow special characters to be used without invoking their special meaning. This collides with Python&amp;rsquo;s usage of the same character for the same purpose in string literals; for example, to match a literal backslash, one might have to write &lt;code&gt;'\\\\'&lt;/code&gt; as the pattern string, because the regular expression must be &lt;code&gt;\\&lt;/code&gt;, and each backslash must be expressed as &lt;code&gt;\\&lt;/code&gt; inside a regular Python string literal. Also, please note that any invalid escape sequences in Python&amp;rsquo;s usage of the backslash in string literals now generate a &lt;a href=&quot;exceptions#DeprecationWarning&quot;&gt;&lt;code&gt;DeprecationWarning&lt;/code&gt;&lt;/a&gt; and in the future this will become a &lt;a href=&quot;exceptions#SyntaxError&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt;. This behaviour will happen even if it is a valid escape sequence for a regular expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="632284d6d44cd285a0879407d2b79c59fd92e9cc" translate="yes" xml:space="preserve">
          <source>Regular file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92e74a4e2e893412ec99eec29137ca19143363a0" translate="yes" xml:space="preserve">
          <source>Relationship to other Python modules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a306d4bef0fa5b9e7915d6a274854e42f372a74" translate="yes" xml:space="preserve">
          <source>Release a lock, decrementing the recursion level. If after the decrement it is zero, reset the lock to unlocked (not owned by any thread), and if any other threads are blocked waiting for the lock to become unlocked, allow exactly one of them to proceed. If after the decrement the recursion level is still nonzero, the lock remains locked and owned by the calling thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55e983958dfae1027586eb59fe3a7b345a542b22" translate="yes" xml:space="preserve">
          <source>Release a lock, decrementing the recursion level. If after the decrement the recursion level is zero, reset the lock to unlocked (not owned by any process or thread) and if any other processes or threads are blocked waiting for the lock to become unlocked, allow exactly one of them to proceed. If after the decrement the recursion level is still nonzero, the lock remains locked and owned by the calling process or thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="325db7a1cdbf77d318358ad23c85e5e1231225a2" translate="yes" xml:space="preserve">
          <source>Release a lock. This can be called from any process or thread, not only the process or thread which originally acquired the lock.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01dabcc102e3847783d7a1993fb3e86527f38974" translate="yes" xml:space="preserve">
          <source>Release a lock. This can be called from any thread, not only the thread which has acquired the lock.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f77f1092af6163d0d1eb73d1d4d09fcf952eda4e" translate="yes" xml:space="preserve">
          <source>Release a semaphore, incrementing the internal counter by one. Can wake up a task waiting to acquire the semaphore.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9451dc6afbeda9021e289fd403b79c86eee707df" translate="yes" xml:space="preserve">
          <source>Release a semaphore, incrementing the internal counter by one. When it was zero on entry and another thread is waiting for it to become larger than zero again, wake up that thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1fc58a6c69a6005894d2bcaddb143b7922c8c07" translate="yes" xml:space="preserve">
          <source>Release the lock on the mailbox, if any.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5e4913e6b00fb0411556eedb8df5d4e15248e9e" translate="yes" xml:space="preserve">
          <source>Release the lock.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="902ed4cb647c5987fae4a3f474bae31539906133" translate="yes" xml:space="preserve">
          <source>Release the underlying buffer exposed by the PickleBuffer object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="718b6fe96e3c4e49603e32cb056705892983d6b1" translate="yes" xml:space="preserve">
          <source>Release the underlying buffer exposed by the memoryview object. Many objects take special actions when a view is held on them (for example, a &lt;a href=&quot;#bytearray&quot;&gt;&lt;code&gt;bytearray&lt;/code&gt;&lt;/a&gt; would temporarily forbid resizing); therefore, calling release() is handy to remove these restrictions (and free any dangling resources) as soon as possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfdddac609bc6525864a46420d173e2db58b56da" translate="yes" xml:space="preserve">
          <source>Release the underlying lock.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cee554c3a4338184c2c0a12178930f6283f66e65" translate="yes" xml:space="preserve">
          <source>Release the underlying lock. This method calls the corresponding method on the underlying lock; there is no return value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b6171647eb49e3293f844f2cd7952949833b937" translate="yes" xml:space="preserve">
          <source>Releases the lock. The lock must have been acquired earlier, but not necessarily by the same thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f09a95b89d92f3fc9ea74fc087dcf0c058b1b66" translate="yes" xml:space="preserve">
          <source>Releases the thread lock acquired with &lt;a href=&quot;#logging.Handler.acquire&quot;&gt;&lt;code&gt;acquire()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dab78af2001df694dd992ceaa491a83fa95e598" translate="yes" xml:space="preserve">
          <source>Reload a previously imported &lt;em&gt;module&lt;/em&gt;. The argument must be a module object, so it must have been successfully imported before. This is useful if you have edited the module source file using an external editor and want to try out the new version without leaving the Python interpreter. The return value is the module object (which can be different if re-importing causes a different object to be placed in &lt;a href=&quot;sys#sys.modules&quot;&gt;&lt;code&gt;sys.modules&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95f9e949daa1abd7b409e941cd024e8e763fdd73" translate="yes" xml:space="preserve">
          <source>Remark: Every sequence of mouse-move-events on a turtle is preceded by a mouse-click event on that turtle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fd7042c55c4be97e3a3234963e74788ed71c483" translate="yes" xml:space="preserve">
          <source>Remembering which future statements the user has entered, so subsequent input can be compiled with these in effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a28251e34f334c2e9198cead3c84396b0209045b" translate="yes" xml:space="preserve">
          <source>Remote I/O error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7361e6611d8de8bcd908886067c50c68d92c5e2" translate="yes" xml:space="preserve">
          <source>Remote address changed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f2f29a523b42c7dff73566cc22f5a5f3d6d714b" translate="yes" xml:space="preserve">
          <source>Remove (delete) the directory &lt;em&gt;path&lt;/em&gt;. If the directory does not exist or is not empty, an &lt;a href=&quot;exceptions#FileNotFoundError&quot;&gt;&lt;code&gt;FileNotFoundError&lt;/code&gt;&lt;/a&gt; or an &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; is raised respectively. In order to remove whole directory trees, &lt;a href=&quot;shutil#shutil.rmtree&quot;&gt;&lt;code&gt;shutil.rmtree()&lt;/code&gt;&lt;/a&gt; can be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09092b51cc111894ec2a0792cdf12ec52bfefd86" translate="yes" xml:space="preserve">
          <source>Remove (delete) the file &lt;em&gt;path&lt;/em&gt;. If &lt;em&gt;path&lt;/em&gt; is a directory, an &lt;a href=&quot;exceptions#IsADirectoryError&quot;&gt;&lt;code&gt;IsADirectoryError&lt;/code&gt;&lt;/a&gt; is raised. Use &lt;a href=&quot;#os.rmdir&quot;&gt;&lt;code&gt;rmdir()&lt;/code&gt;&lt;/a&gt; to remove directories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54ccd5262122a2bb90c8d8e7c34e44ceabccfb23" translate="yes" xml:space="preserve">
          <source>Remove (delete) the file &lt;em&gt;path&lt;/em&gt;. This function is semantically identical to &lt;a href=&quot;#os.remove&quot;&gt;&lt;code&gt;remove()&lt;/code&gt;&lt;/a&gt;; the &lt;code&gt;unlink&lt;/code&gt; name is its traditional Unix name. Please see the documentation for &lt;a href=&quot;#os.remove&quot;&gt;&lt;code&gt;remove()&lt;/code&gt;&lt;/a&gt; for further information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df4a3ac637d825590d00692389c347fb71446c49" translate="yes" xml:space="preserve">
          <source>Remove &lt;code&gt;.pyc&lt;/code&gt; files on uninstall.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5c1787a7462be5a8758ddc2de62b0a3c10ec4a0" translate="yes" xml:space="preserve">
          <source>Remove &lt;code&gt;d[key]&lt;/code&gt; from &lt;em&gt;d&lt;/em&gt;. Raises a &lt;a href=&quot;exceptions#KeyError&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt; if &lt;em&gt;key&lt;/em&gt; is not in the map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90b0e08e343d399962a6bd8d2c41705a75aa6b66" translate="yes" xml:space="preserve">
          <source>Remove &lt;em&gt;callback&lt;/em&gt; from the callbacks list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84f403853efe764e44908458c87622e6eb6beaeb" translate="yes" xml:space="preserve">
          <source>Remove &lt;em&gt;func&lt;/em&gt; from the list of functions to be run at interpreter shutdown. After calling &lt;a href=&quot;#atexit.unregister&quot;&gt;&lt;code&gt;unregister()&lt;/code&gt;&lt;/a&gt;, &lt;em&gt;func&lt;/em&gt; is guaranteed not to be called when the interpreter shuts down, even if it was registered more than once. &lt;a href=&quot;#atexit.unregister&quot;&gt;&lt;code&gt;unregister()&lt;/code&gt;&lt;/a&gt; silently does nothing if &lt;em&gt;func&lt;/em&gt; was not previously registered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d3c177647ed076f35c66ee60a80e644088ab631" translate="yes" xml:space="preserve">
          <source>Remove &lt;em&gt;items&lt;/em&gt; from the selection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6547d9b9085b460bd46210f1be5e085366c204b8" translate="yes" xml:space="preserve">
          <source>Remove &lt;em&gt;label&lt;/em&gt; from the list of labels on the message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ea60577a9b7e090db0bc3612337d5ddc1ef3f63" translate="yes" xml:space="preserve">
          <source>Remove &lt;em&gt;sequence&lt;/em&gt; from the list of sequences that include this message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca9b7932d8450d599cb6979beda8edf16cbfebf9" translate="yes" xml:space="preserve">
          <source>Remove a child node. &lt;em&gt;oldChild&lt;/em&gt; must be a child of this node; if not, &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; is raised. &lt;em&gt;oldChild&lt;/em&gt; is returned on success. If &lt;em&gt;oldChild&lt;/em&gt; will not be used further, its &lt;code&gt;unlink()&lt;/code&gt; method should be called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e638afc65f07e23d8059456ca5203ff65e8d63b3" translate="yes" xml:space="preserve">
          <source>Remove a file descriptor being tracked by a polling object. Just like the &lt;a href=&quot;#select.devpoll.register&quot;&gt;&lt;code&gt;register()&lt;/code&gt;&lt;/a&gt; method, &lt;em&gt;fd&lt;/em&gt; can be an integer or an object with a &lt;a href=&quot;io#io.IOBase.fileno&quot;&gt;&lt;code&gt;fileno()&lt;/code&gt;&lt;/a&gt; method that returns an integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d406b316abb4db3447872fecf4363a68503730f5" translate="yes" xml:space="preserve">
          <source>Remove a file descriptor being tracked by a polling object. Just like the &lt;a href=&quot;#select.poll.register&quot;&gt;&lt;code&gt;register()&lt;/code&gt;&lt;/a&gt; method, &lt;em&gt;fd&lt;/em&gt; can be an integer or an object with a &lt;a href=&quot;io#io.IOBase.fileno&quot;&gt;&lt;code&gt;fileno()&lt;/code&gt;&lt;/a&gt; method that returns an integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4acb1e801dd112b656a9906b873c911e3baffd17" translate="yes" xml:space="preserve">
          <source>Remove a handler for a &lt;a href=&quot;signal#module-signal&quot;&gt;&lt;code&gt;signal&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5487a3ec602c3f128da1167605d573da7caf65f" translate="yes" xml:space="preserve">
          <source>Remove a registered file descriptor from the epoll object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2de339515154b23af33759d56687db0b9afa4c8b" translate="yes" xml:space="preserve">
          <source>Remove a registered result. Once a result has been removed then &lt;a href=&quot;#unittest.TestResult.stop&quot;&gt;&lt;code&gt;stop()&lt;/code&gt;&lt;/a&gt; will no longer be called on that result object in response to a control-c.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e04b32723d8dc93cf14a08faa924d4dc0301551d" translate="yes" xml:space="preserve">
          <source>Remove all elements from the deque leaving it with length 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b09a518a4a9b4d337aff6605fc4365f56b91d14" translate="yes" xml:space="preserve">
          <source>Remove all elements from the set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f290d8d2e6e7afb1c339b0bbfd97a9c8e21061c8" translate="yes" xml:space="preserve">
          <source>Remove all items from the dictionary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a70b106bdf49173c73982c4f4890c1bfd2aece77" translate="yes" xml:space="preserve">
          <source>Remove an attribute by name. If there is no matching attribute, a &lt;a href=&quot;#xml.dom.NotFoundErr&quot;&gt;&lt;code&gt;NotFoundErr&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e44bc40606bdaa4ca11f7c736e84089c476e498" translate="yes" xml:space="preserve">
          <source>Remove an attribute by name. Note that it uses a localName, not a qname. No exception is raised if there is no matching attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="469bcb6f3a7989704b2f3003fd50cbe3be114703" translate="yes" xml:space="preserve">
          <source>Remove and return &lt;em&gt;oldAttr&lt;/em&gt; from the attribute list, if present. If &lt;em&gt;oldAttr&lt;/em&gt; is not present, &lt;a href=&quot;#xml.dom.NotFoundErr&quot;&gt;&lt;code&gt;NotFoundErr&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31ae42d327afacec2d994c0287d142eb91fc9ce1" translate="yes" xml:space="preserve">
          <source>Remove and return a &lt;code&gt;(key, value)&lt;/code&gt; pair from the dictionary. Pairs are returned in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b531f41e80397125057b4d77ec51f25199985f1" translate="yes" xml:space="preserve">
          <source>Remove and return an arbitrary element from the set. Raises &lt;a href=&quot;exceptions#KeyError&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt; if the set is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7da6e1247e14313ead2c906151c6fa54b3b8670" translate="yes" xml:space="preserve">
          <source>Remove and return an element from the left side of the deque. If no elements are present, raises an &lt;a href=&quot;exceptions#IndexError&quot;&gt;&lt;code&gt;IndexError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e670a3f5985cfc119644d78b3e84db994738a729" translate="yes" xml:space="preserve">
          <source>Remove and return an element from the right side of the deque. If no elements are present, raises an &lt;a href=&quot;exceptions#IndexError&quot;&gt;&lt;code&gt;IndexError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dfba53adcb0d3b6fc3163fef06b9e1ac4b32069" translate="yes" xml:space="preserve">
          <source>Remove and return an item from the queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6e8014aef762eb004313f855775293621c0f2fe" translate="yes" xml:space="preserve">
          <source>Remove and return an item from the queue. If optional args &lt;em&gt;block&lt;/em&gt; is &lt;code&gt;True&lt;/code&gt; (the default) and &lt;em&gt;timeout&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt; (the default), block if necessary until an item is available. If &lt;em&gt;timeout&lt;/em&gt; is a positive number, it blocks at most &lt;em&gt;timeout&lt;/em&gt; seconds and raises the &lt;a href=&quot;queue#queue.Empty&quot;&gt;&lt;code&gt;queue.Empty&lt;/code&gt;&lt;/a&gt; exception if no item was available within that time. Otherwise (block is &lt;code&gt;False&lt;/code&gt;), return an item if one is immediately available, else raise the &lt;a href=&quot;queue#queue.Empty&quot;&gt;&lt;code&gt;queue.Empty&lt;/code&gt;&lt;/a&gt; exception (&lt;em&gt;timeout&lt;/em&gt; is ignored in that case).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f5188be7942eda827c4be37e886678fbe47c0e4" translate="yes" xml:space="preserve">
          <source>Remove and return an item from the queue. If optional args &lt;em&gt;block&lt;/em&gt; is true and &lt;em&gt;timeout&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt; (the default), block if necessary until an item is available. If &lt;em&gt;timeout&lt;/em&gt; is a positive number, it blocks at most &lt;em&gt;timeout&lt;/em&gt; seconds and raises the &lt;a href=&quot;#queue.Empty&quot;&gt;&lt;code&gt;Empty&lt;/code&gt;&lt;/a&gt; exception if no item was available within that time. Otherwise (&lt;em&gt;block&lt;/em&gt; is false), return an item if one is immediately available, else raise the &lt;a href=&quot;#queue.Empty&quot;&gt;&lt;code&gt;Empty&lt;/code&gt;&lt;/a&gt; exception (&lt;em&gt;timeout&lt;/em&gt; is ignored in that case).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4088c96f1ba17057a9e3e69be2cd717210daaaf7" translate="yes" xml:space="preserve">
          <source>Remove and return an item from the queue. If queue is empty, wait until an item is available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2798ddc01b549b242184471dd3b04f03bffd93d" translate="yes" xml:space="preserve">
          <source>Remove any common leading whitespace from every line in &lt;em&gt;text&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1901bbdc80057b98ac9f62bfec2a78cea30ba6e3" translate="yes" xml:space="preserve">
          <source>Remove any deletion marks for the mailbox.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faa276c7a3ecba1a269e9f752634eb6ab450d6a4" translate="yes" xml:space="preserve">
          <source>Remove any parents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd474cdf9d281d6e3eb511a782e0bb87e8f7f8c0" translate="yes" xml:space="preserve">
          <source>Remove any unhandled source text from the input buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="218d884dd50dc8dcf49c39d48acbbe88b3efc79b" translate="yes" xml:space="preserve">
          <source>Remove attribute &lt;em&gt;attr&lt;/em&gt; from the &amp;ldquo;background&amp;rdquo; set applied to all writes to the current window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1939bdbb558415e500fd3e239783907685058e1" translate="yes" xml:space="preserve">
          <source>Remove directories recursively. Works like &lt;a href=&quot;#os.rmdir&quot;&gt;&lt;code&gt;rmdir()&lt;/code&gt;&lt;/a&gt; except that, if the leaf directory is successfully removed, &lt;a href=&quot;#os.removedirs&quot;&gt;&lt;code&gt;removedirs()&lt;/code&gt;&lt;/a&gt; tries to successively remove every parent directory mentioned in &lt;em&gt;path&lt;/em&gt; until an error is raised (which is ignored, because it generally means that a parent directory is not empty). For example, &lt;code&gt;os.removedirs('foo/bar/baz')&lt;/code&gt; will first remove the directory &lt;code&gt;'foo/bar/baz'&lt;/code&gt;, and then remove &lt;code&gt;'foo/bar'&lt;/code&gt; and &lt;code&gt;'foo'&lt;/code&gt; if they are empty. Raises &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; if the leaf directory could not be successfully removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8830b3ed7b2b6ea4e93819896c3612feb5403c45" translate="yes" xml:space="preserve">
          <source>Remove element &lt;em&gt;elem&lt;/em&gt; from the set if it is present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9888fcac5accfc7a8b64af98cef05a92569503a4" translate="yes" xml:space="preserve">
          <source>Remove element &lt;em&gt;elem&lt;/em&gt; from the set. Raises &lt;a href=&quot;exceptions#KeyError&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt; if &lt;em&gt;elem&lt;/em&gt; is not contained in the set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46fb222523969621a21f6c33b70bc80f50eae94a" translate="yes" xml:space="preserve">
          <source>Remove history item specified by its position from the history. The position is zero-based. This calls &lt;code&gt;remove_history()&lt;/code&gt; in the underlying library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f1f060055dfc5be6a01d79073813b22ef0c00fc" translate="yes" xml:space="preserve">
          <source>Remove leading # or ## from selected lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e88117b20c99b1cfd4fc97904478939f846183a3" translate="yes" xml:space="preserve">
          <source>Remove modules except for &lt;em&gt;oldmodules&lt;/em&gt; and &lt;code&gt;encodings&lt;/code&gt; in order to preserve internal cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39143687d06562bc974381cd208300718aae9057" translate="yes" xml:space="preserve">
          <source>Remove named header from the request instance (both from regular and unredirected headers).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da54f37cf901136049487b5d8c3b565cc2e92d6c" translate="yes" xml:space="preserve">
          <source>Remove the archive format &lt;em&gt;name&lt;/em&gt; from the list of supported formats.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb6d6cfc9c9b17d28aae0d871bc79d87673c7830" translate="yes" xml:space="preserve">
          <source>Remove the directory by calling &lt;strong&gt;close()&lt;/strong&gt; on the returned object or using it in a &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a219e6650b0c2e74baaa254405797ad3caabe43" translate="yes" xml:space="preserve">
          <source>Remove the directory named &lt;em&gt;dirname&lt;/em&gt; on the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0726ba95221ef1651c5cdfff5fa801955a269aa" translate="yes" xml:space="preserve">
          <source>Remove the event from the queue. If &lt;em&gt;event&lt;/em&gt; is not an event currently in the queue, this method will raise a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a24d3ea5e0575caadaba7127c684bb9a116e0bc" translate="yes" xml:space="preserve">
          <source>Remove the file named &lt;em&gt;filename&lt;/em&gt; from the server. If successful, returns the text of the response, otherwise raises &lt;a href=&quot;#ftplib.error_perm&quot;&gt;&lt;code&gt;error_perm&lt;/code&gt;&lt;/a&gt; on permission errors or &lt;a href=&quot;#ftplib.error_reply&quot;&gt;&lt;code&gt;error_reply&lt;/code&gt;&lt;/a&gt; on other errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab59243c5f0140e1d9f8f50f8faaa896333624e1" translate="yes" xml:space="preserve">
          <source>Remove the first occurrence of &lt;em&gt;value&lt;/em&gt;. If not found, raises a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8410a84caa24fe1396f171fc4f673a31805ea5fd" translate="yes" xml:space="preserve">
          <source>Remove the first occurrence of &lt;em&gt;x&lt;/em&gt; from the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06b253ee2dacd7c2fac34b37b9786fb546bbfa46" translate="yes" xml:space="preserve">
          <source>Remove the given parameter completely from the &lt;em&gt;Content-Type&lt;/em&gt; header. The header will be re-written in place without the parameter or its value. All values will be quoted as necessary unless &lt;em&gt;requote&lt;/em&gt; is &lt;code&gt;False&lt;/code&gt; (the default is &lt;code&gt;True&lt;/code&gt;). Optional &lt;em&gt;header&lt;/em&gt; specifies an alternative to &lt;em&gt;Content-Type&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eecf14ec682619af0362513d29dbc587c2ed96f0" translate="yes" xml:space="preserve">
          <source>Remove the given parameter completely from the &lt;em&gt;Content-Type&lt;/em&gt; header. The header will be re-written in place without the parameter or its value. Optional &lt;em&gt;header&lt;/em&gt; specifies an alternative to &lt;em&gt;Content-Type&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7966794729359a57bb35aa79983ef87245ec907" translate="yes" xml:space="preserve">
          <source>Remove the handler for the &lt;em&gt;sig&lt;/em&gt; signal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5278cbb01c31e671814ad20e41d470025918680f" translate="yes" xml:space="preserve">
          <source>Remove the module named &lt;em&gt;module_name&lt;/em&gt; from &lt;code&gt;sys.modules&lt;/code&gt; and delete any byte-compiled files of the module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a87dc1e2478c072cb792ee6591f8dc2d2026140" translate="yes" xml:space="preserve">
          <source>Remove the payload and all of the &lt;code&gt;Content-&lt;/code&gt; headers, leaving all other headers intact and in their original order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bf2bebbd987c72c8779a2b8195a4ca66c985e00" translate="yes" xml:space="preserve">
          <source>Remove the payload and all of the headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86612e35ce925f33783538d1a60f6935d18f9d27" translate="yes" xml:space="preserve">
          <source>Remove the specified &lt;em&gt;option&lt;/em&gt; from the specified &lt;em&gt;section&lt;/em&gt;. If the section does not exist, raise &lt;a href=&quot;#configparser.NoSectionError&quot;&gt;&lt;code&gt;NoSectionError&lt;/code&gt;&lt;/a&gt;. If the option existed to be removed, return &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt;; otherwise return &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="167f0847a5baf3fc7c48f947592008cef0611efe" translate="yes" xml:space="preserve">
          <source>Remove the specified &lt;em&gt;section&lt;/em&gt; from the configuration. If the section in fact existed, return &lt;code&gt;True&lt;/code&gt;. Otherwise return &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="931133657f7bdcc0493ec989a46c723f6066810a" translate="yes" xml:space="preserve">
          <source>Remove the value of &lt;em&gt;a&lt;/em&gt; at index &lt;em&gt;b&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b870f044d1fabe896b3c74257cc3433e2d316c38" translate="yes" xml:space="preserve">
          <source>Remove this directory. The directory must be empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ec51e7bc1c1b4c94fdbd6fd566496777c4b7b30" translate="yes" xml:space="preserve">
          <source>Remove this file or symbolic link. If the path points to a directory, use &lt;a href=&quot;#pathlib.Path.rmdir&quot;&gt;&lt;code&gt;Path.rmdir()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06a9c625676ef7e3160422e80b7defafd5c2de77" translate="yes" xml:space="preserve">
          <source>Remove trailing space and other whitespace characters after the last non-whitespace character of a line by applying str.rstrip to each line, including lines within multiline strings. Except for Shell windows, remove extra newlines at the end of the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61b70a5898add9d0be465d7351173d1adbc05a3a" translate="yes" xml:space="preserve">
          <source>Removes &lt;em&gt;subelement&lt;/em&gt; from the element. Unlike the find* methods this method compares elements based on the instance identity, not on tag value or contents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd2c5eeb1fd92545e05f12c347fe9049c679df64" translate="yes" xml:space="preserve">
          <source>Removes a named value from a registry key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ce67754e84de4a54e3b8e15d6cbb0f9657ce225" translate="yes" xml:space="preserve">
          <source>Removes an event from the queue</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cf7c4eab3edcdb87fd4bba70cca70af76709309" translate="yes" xml:space="preserve">
          <source>Removes event after first occurrence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="576937b78ee6da10baced9f64f9e4e1bef3c46e8" translate="yes" xml:space="preserve">
          <source>Removes one block from the block stack. Per frame, there is a stack of blocks, denoting &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#try&quot;&gt;&lt;code&gt;try&lt;/code&gt;&lt;/a&gt; statements, and such.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94357e616c453b1697914dba99e5f151a58631c7" translate="yes" xml:space="preserve">
          <source>Removes one block from the block stack. The popped block must be an exception handler block, as implicitly created when entering an except handler. In addition to popping extraneous values from the frame stack, the last three popped values are used to restore the exception state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32e6ee1737489b7ed876da2b98bcac7cdbf7e329" translate="yes" xml:space="preserve">
          <source>Removes the extended filesystem attribute &lt;em&gt;attribute&lt;/em&gt; from &lt;em&gt;path&lt;/em&gt;. &lt;em&gt;attribute&lt;/em&gt; should be bytes or str (directly or indirectly through the &lt;a href=&quot;#os.PathLike&quot;&gt;&lt;code&gt;PathLike&lt;/code&gt;&lt;/a&gt; interface). If it is a string, it is encoded with the filesystem encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa2817427f9f3dd866ffd6171c443159b2bc4d52" translate="yes" xml:space="preserve">
          <source>Removes the handler for process with PID equal to &lt;em&gt;pid&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2195eae66ec66c6a06d82f02a75084dd7fe366ba" translate="yes" xml:space="preserve">
          <source>Removes the item with the index &lt;em&gt;i&lt;/em&gt; from the array and returns it. The optional argument defaults to &lt;code&gt;-1&lt;/code&gt;, so that by default the last item is removed and returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e0efae851aab5bcfc515dd3938067f832c1853f" translate="yes" xml:space="preserve">
          <source>Removes the specified filter &lt;em&gt;filter&lt;/em&gt; from this handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee70f16011ebf7494e0b1b61abda546563eb3852" translate="yes" xml:space="preserve">
          <source>Removes the specified filter &lt;em&gt;filter&lt;/em&gt; from this logger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e0ce9ad7005467ffca8b9e62963e55e390d5e75" translate="yes" xml:space="preserve">
          <source>Removes the specified handler &lt;em&gt;hdlr&lt;/em&gt; from this logger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="265ca2b6db6ce5a3ff9aedd63c5a7c72e5e87f5c" translate="yes" xml:space="preserve">
          <source>Removes the tab specified by &lt;em&gt;tab_id&lt;/em&gt;, unmaps and unmanages the associated window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc9b4dc7fc4b6baad1b2b196e86a61bc2f5abd7f" translate="yes" xml:space="preserve">
          <source>Removes the top-of-stack (TOS) item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52b1b8dfd7406e85d8a1daa01bbc43035eec9e18" translate="yes" xml:space="preserve">
          <source>Removing the entry or changing its priority is more difficult because it would break the heap structure invariants. So, a possible solution is to mark the entry as removed and add a new entry with the revised priority:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4b56a0cc5d96f54a8becd3e61fed1905c99964e" translate="yes" xml:space="preserve">
          <source>Rename file &lt;em&gt;fromname&lt;/em&gt; on the server to &lt;em&gt;toname&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3549f5dc4a198fde3fea43a3acbf2e27a6ae616f" translate="yes" xml:space="preserve">
          <source>Rename mailbox named &lt;em&gt;oldmailbox&lt;/em&gt; to &lt;em&gt;newmailbox&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e60e102fdcd11be474a67a0ae6aacb59d606f78b" translate="yes" xml:space="preserve">
          <source>Rename messages in the mailbox as necessary to eliminate gaps in numbering. Entries in the sequences list are updated correspondingly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d670bc87c1937258260ac24646d8260ebfef90c" translate="yes" xml:space="preserve">
          <source>Rename the file or directory &lt;em&gt;src&lt;/em&gt; to &lt;em&gt;dst&lt;/em&gt;. If &lt;em&gt;dst&lt;/em&gt; exists, the operation will fail with an &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; subclass in a number of cases:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df48f2215cb7bcf4ad18d6577001b5d552a345db" translate="yes" xml:space="preserve">
          <source>Rename the file or directory &lt;em&gt;src&lt;/em&gt; to &lt;em&gt;dst&lt;/em&gt;. If &lt;em&gt;dst&lt;/em&gt; is a directory, &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; will be raised. If &lt;em&gt;dst&lt;/em&gt; exists and is a file, it will be replaced silently if the user has permission. The operation may fail if &lt;em&gt;src&lt;/em&gt; and &lt;em&gt;dst&lt;/em&gt; are on different filesystems. If successful, the renaming will be an atomic operation (this is a POSIX requirement).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca15c03ebc4130eb60f0346ebdf7c103f14c253c" translate="yes" xml:space="preserve">
          <source>Rename this file or directory to the given &lt;em&gt;target&lt;/em&gt;, and return a new Path instance pointing to &lt;em&gt;target&lt;/em&gt;. If &lt;em&gt;target&lt;/em&gt; points to an existing file or directory, it will be unconditionally replaced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a70e8665e55521f4679dca75835942f829d258c" translate="yes" xml:space="preserve">
          <source>Rename this file or directory to the given &lt;em&gt;target&lt;/em&gt;, and return a new Path instance pointing to &lt;em&gt;target&lt;/em&gt;. On Unix, if &lt;em&gt;target&lt;/em&gt; exists and is a file, it will be replaced silently if the user has permission. &lt;em&gt;target&lt;/em&gt; can be either a string or another path object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="642cc0ad199fb1f1297cc368f7bee614268e84be" translate="yes" xml:space="preserve">
          <source>Repeat the last search, if there is one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36ace2bdb584635d14fad0d615202a773323ceeb" translate="yes" xml:space="preserve">
          <source>Repeated Names Within an Object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c9d3258409bffb2c6901c0ff6eadf94763cbc11" translate="yes" xml:space="preserve">
          <source>Repeated names within an object are accepted, and only the value of the last name-value pair is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="117a7c2f50c10d9825d29abe655ca86cc048b12f" translate="yes" xml:space="preserve">
          <source>Repeatedly issue a prompt, accept input, parse an initial prefix off the received input, and dispatch to action methods, passing them the remainder of the line as argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3357dc7c46947a84ac24495ba5860e59fcbcff0" translate="yes" xml:space="preserve">
          <source>Repetition qualifiers (&lt;code&gt;*&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;{m,n}&lt;/code&gt;, etc) cannot be directly nested. This avoids ambiguity with the non-greedy modifier suffix &lt;code&gt;?&lt;/code&gt;, and with other modifiers in other implementations. To apply a second repetition to an inner repetition, parentheses may be used. For example, the expression &lt;code&gt;(?:a{6})*&lt;/code&gt; matches any multiple of six &lt;code&gt;'a'&lt;/code&gt; characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7cf7b25a703b308887c7f1d100c4326ef20ac46" translate="yes" xml:space="preserve">
          <source>Replace</source>
          <target state="translated">Replace</target>
        </trans-unit>
        <trans-unit id="b7089d9919f16da82cdb9ee0a3fa36e6ba9f923a" translate="yes" xml:space="preserve">
          <source>Replace &lt;a href=&quot;optparse#optparse.OptionParser.disable_interspersed_args&quot;&gt;&lt;code&gt;optparse.OptionParser.disable_interspersed_args()&lt;/code&gt;&lt;/a&gt; by using &lt;a href=&quot;#argparse.ArgumentParser.parse_intermixed_args&quot;&gt;&lt;code&gt;parse_intermixed_args()&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;#argparse.ArgumentParser.parse_args&quot;&gt;&lt;code&gt;parse_args()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="188297a1a244750ef2e20d6adecd870c02622f35" translate="yes" xml:space="preserve">
          <source>Replace &lt;code&gt;%xx&lt;/code&gt; escapes by their single-character equivalent. The optional &lt;em&gt;encoding&lt;/em&gt; and &lt;em&gt;errors&lt;/em&gt; parameters specify how to decode percent-encoded sequences into Unicode characters, as accepted by the &lt;a href=&quot;stdtypes#bytes.decode&quot;&gt;&lt;code&gt;bytes.decode()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="485a9bdd73438a2fcd5d53c4c7bc0ae1b7b55cbf" translate="yes" xml:space="preserve">
          <source>Replace &lt;code&gt;%xx&lt;/code&gt; escapes by their single-octet equivalent, and return a &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25700e4fc44102e4c7ad3282a213ebf980594033" translate="yes" xml:space="preserve">
          <source>Replace &lt;code&gt;(options, args) = parser.parse_args()&lt;/code&gt; with &lt;code&gt;args =
parser.parse_args()&lt;/code&gt; and add additional &lt;a href=&quot;#argparse.ArgumentParser.add_argument&quot;&gt;&lt;code&gt;ArgumentParser.add_argument()&lt;/code&gt;&lt;/a&gt; calls for the positional arguments. Keep in mind that what was previously called &lt;code&gt;options&lt;/code&gt;, now in the &lt;a href=&quot;#module-argparse&quot;&gt;&lt;code&gt;argparse&lt;/code&gt;&lt;/a&gt; context is called &lt;code&gt;args&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ab449cbdabce126a1477c0f0eeb8b97b8e06c64" translate="yes" xml:space="preserve">
          <source>Replace &lt;code&gt;optparse.Values&lt;/code&gt; with &lt;a href=&quot;#argparse.Namespace&quot;&gt;&lt;code&gt;Namespace&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;optparse.OptionError&lt;/code&gt; and &lt;code&gt;optparse.OptionValueError&lt;/code&gt; with &lt;code&gt;ArgumentError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abe3536719584d6172532cd1eb89511d647a474f" translate="yes" xml:space="preserve">
          <source>Replace a header. Replace the first header found in the message that matches &lt;em&gt;_name&lt;/em&gt;, retaining header order and field name case of the original header. If no matching header is found, raise a &lt;a href=&quot;exceptions#KeyError&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="060f12e874cb129aa89e6ab574feced679b45808" translate="yes" xml:space="preserve">
          <source>Replace a header. Replace the first header found in the message that matches &lt;em&gt;_name&lt;/em&gt;, retaining header order and field name case. If no matching header was found, a &lt;a href=&quot;exceptions#KeyError&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dcbc6a80fb47be8b07d72e4c8da7b648ee78246" translate="yes" xml:space="preserve">
          <source>Replace all &lt;a href=&quot;optparse#optparse.OptionParser.add_option&quot;&gt;&lt;code&gt;optparse.OptionParser.add_option()&lt;/code&gt;&lt;/a&gt; calls with &lt;a href=&quot;#argparse.ArgumentParser.add_argument&quot;&gt;&lt;code&gt;ArgumentParser.add_argument()&lt;/code&gt;&lt;/a&gt; calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6a3559c55df79b290eb62bc0b9b34b463dcb016" translate="yes" xml:space="preserve">
          <source>Replace an existing node with a new node. It must be the case that &lt;em&gt;oldChild&lt;/em&gt; is a child of this node; if not, &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33de5e2e42ff1aa50ef414ec10190acc10653af2" translate="yes" xml:space="preserve">
          <source>Replace callback actions and the &lt;code&gt;callback_*&lt;/code&gt; keyword arguments with &lt;code&gt;type&lt;/code&gt; or &lt;code&gt;action&lt;/code&gt; arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa2066c3c702b4bf15ec261878a19b0754ddfd0f" translate="yes" xml:space="preserve">
          <source>Replace history item specified by its position with &lt;em&gt;line&lt;/em&gt;. The position is zero-based. This calls &lt;code&gt;replace_history_entry()&lt;/code&gt; in the underlying library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6492730bb5212562fc1dceaa4c764e7d20e850a7" translate="yes" xml:space="preserve">
          <source>Replace special characters in &lt;em&gt;string&lt;/em&gt; using the &lt;code&gt;%xx&lt;/code&gt; escape. Letters, digits, and the characters &lt;code&gt;'_.-~'&lt;/code&gt; are never quoted. By default, this function is intended for quoting the path section of URL. The optional &lt;em&gt;safe&lt;/em&gt; parameter specifies additional ASCII characters that should not be quoted &amp;mdash; its default value is &lt;code&gt;'/'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28841d731e0691f8ec7beb76d15093263abb87fd" translate="yes" xml:space="preserve">
          <source>Replace string names for &lt;code&gt;type&lt;/code&gt; keyword arguments with the corresponding type objects (e.g. int, float, complex, etc).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eb96098cc4f15f26a1fb258728741f742595113" translate="yes" xml:space="preserve">
          <source>Replace strings with implicit arguments such as &lt;code&gt;%default&lt;/code&gt; or &lt;code&gt;%prog&lt;/code&gt; with the standard Python syntax to use dictionaries to format strings, that is, &lt;code&gt;%(default)s&lt;/code&gt; and &lt;code&gt;%(prog)s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="702545f2eeac5b43ba4add4a280265ded04e23c4" translate="yes" xml:space="preserve">
          <source>Replace the OptionParser constructor &lt;code&gt;version&lt;/code&gt; argument with a call to &lt;code&gt;parser.add_argument('--version', action='version', version='&amp;lt;the version&amp;gt;')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3398802fc0a7efdf238f249130ace0304f8df78a" translate="yes" xml:space="preserve">
          <source>Replace the message corresponding to &lt;em&gt;key&lt;/em&gt; with &lt;em&gt;message&lt;/em&gt;. Raise a &lt;a href=&quot;exceptions#KeyError&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt; exception if no message already corresponds to &lt;em&gt;key&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78bea69c8b3d333e5571ef6247dff7824627342d" translate="yes" xml:space="preserve">
          <source>Replace with &lt;code&gt;\N{...}&lt;/code&gt; escape sequences (only for encoding). Implemented in &lt;a href=&quot;#codecs.namereplace_errors&quot;&gt;&lt;code&gt;namereplace_errors()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f37a3fbe9b064c37c869154253f825dfdb624eff" translate="yes" xml:space="preserve">
          <source>Replace with a suitable replacement marker; Python will use the official &lt;code&gt;U+FFFD&lt;/code&gt; REPLACEMENT CHARACTER for the built-in codecs on decoding, and &amp;lsquo;?&amp;rsquo; on encoding. Implemented in &lt;a href=&quot;#codecs.replace_errors&quot;&gt;&lt;code&gt;replace_errors()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a7dfbebd23058d224153efd98659d07afcad6eb" translate="yes" xml:space="preserve">
          <source>Replace with backslashed escape sequences. Implemented in &lt;a href=&quot;#codecs.backslashreplace_errors&quot;&gt;&lt;code&gt;backslashreplace_errors()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7772709acd14a0caec3c6ba7fe906a4d2a65f8b" translate="yes" xml:space="preserve">
          <source>Replace with the appropriate XML character reference (only for encoding). Implemented in &lt;a href=&quot;#codecs.xmlcharrefreplace_errors&quot;&gt;&lt;code&gt;xmlcharrefreplace_errors()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9ff10cebb05fe0da5c269ee255400e64d007fb6" translate="yes" xml:space="preserve">
          <source>Replace&amp;hellip;</source>
          <target state="translated">Replace&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="adfeea99b36524b65f36da222d7fdbfb5a78050b" translate="yes" xml:space="preserve">
          <source>Replaces &lt;em&gt;item&lt;/em&gt;&amp;rsquo;s child with &lt;em&gt;newchildren&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a8dd1e9936aff1f3d8a37bc9d646b9a3ecc5240" translate="yes" xml:space="preserve">
          <source>Replaces TOS with &lt;code&gt;getattr(TOS, co_names[namei])&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32bd1e8eb021cf1315f7e1be4f3e6444e33b8fef" translate="yes" xml:space="preserve">
          <source>Replaces the root element for this tree. This discards the current contents of the tree, and replaces it with the given element. Use with care. &lt;em&gt;element&lt;/em&gt; is an element instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f087390cdd02de76d60e25a903a405417b121ca9" translate="yes" xml:space="preserve">
          <source>Replacing &lt;a href=&quot;os#os.popen&quot;&gt;&lt;code&gt;os.popen()&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;os.popen2()&lt;/code&gt;, &lt;code&gt;os.popen3()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c4c7203f5379e5271cf3141451b2f66414bfadd" translate="yes" xml:space="preserve">
          <source>Replacing &lt;a href=&quot;os#os.system&quot;&gt;&lt;code&gt;os.system()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eab8aa4065b5ba30b75986bbaf56a4a085d60fd1" translate="yes" xml:space="preserve">
          <source>Replacing &lt;code&gt;%+f&lt;/code&gt;, &lt;code&gt;%-f&lt;/code&gt;, and &lt;code&gt;% f&lt;/code&gt; and specifying a sign:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1366209a48e8554cfeca0b011e295c8c2e0419b" translate="yes" xml:space="preserve">
          <source>Replacing &lt;code&gt;%s&lt;/code&gt; and &lt;code&gt;%r&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11a979f0e8ac9f783e1634fdb42dc52b2ae1a523" translate="yes" xml:space="preserve">
          <source>Replacing &lt;code&gt;%x&lt;/code&gt; and &lt;code&gt;%o&lt;/code&gt; and converting the value to different bases:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a711864ef1543b8f3dbe8280074d35a2e8b910e3" translate="yes" xml:space="preserve">
          <source>Replacing &lt;strong&gt;/bin/sh&lt;/strong&gt; shell command substitution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="363e566b19b3e063eefcbb88cb0d02a0cff145e8" translate="yes" xml:space="preserve">
          <source>Replacing Older Functions with the subprocess Module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3af979083c8edcab17cd54aa8ab768be8240d6e" translate="yes" xml:space="preserve">
          <source>Replacing any use of &lt;code&gt;try-finally&lt;/code&gt; and flag variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c8419f67528b20da5b283106a7385c2a397c86d" translate="yes" xml:space="preserve">
          <source>Replacing functions from the &lt;code&gt;popen2&lt;/code&gt; module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc1243f55fba7b961640cbbfd4e141a33ea7e522" translate="yes" xml:space="preserve">
          <source>Replacing shell pipeline</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f213b38163d2555242615174ff0914708d54d337" translate="yes" xml:space="preserve">
          <source>Replacing the &lt;a href=&quot;os#os.spawnl&quot;&gt;&lt;code&gt;os.spawn&lt;/code&gt;&lt;/a&gt; family</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d688ab4a80b47e137d09bd38e40ba5e8b3889aa" translate="yes" xml:space="preserve">
          <source>Replied</source>
          <target state="translated">Replied</target>
        </trans-unit>
        <trans-unit id="12b497d25addd68bea9aa62cc9ce23112c0cf044" translate="yes" xml:space="preserve">
          <source>Replied to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c327a287c30e712678ed3a5b706a40a1cc31dec1" translate="yes" xml:space="preserve">
          <source>Report that the given example failed. This method is provided to allow subclasses of &lt;a href=&quot;#doctest.DocTestRunner&quot;&gt;&lt;code&gt;DocTestRunner&lt;/code&gt;&lt;/a&gt; to customize their output; it should not be called directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8afb4877b1c763309b94ffb83ea503cb77ac97f3" translate="yes" xml:space="preserve">
          <source>Report that the given example raised an unexpected exception. This method is provided to allow subclasses of &lt;a href=&quot;#doctest.DocTestRunner&quot;&gt;&lt;code&gt;DocTestRunner&lt;/code&gt;&lt;/a&gt; to customize their output; it should not be called directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf1cea3684117db6d9295ef565d00c22dd2a7090" translate="yes" xml:space="preserve">
          <source>Report that the given example ran successfully. This method is provided to allow subclasses of &lt;a href=&quot;#doctest.DocTestRunner&quot;&gt;&lt;code&gt;DocTestRunner&lt;/code&gt;&lt;/a&gt; to customize their output; it should not be called directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54c2931067a2ac8f78e68dc764080c3d11cead82" translate="yes" xml:space="preserve">
          <source>Report that the test runner is about to process the given example. This method is provided to allow subclasses of &lt;a href=&quot;#doctest.DocTestRunner&quot;&gt;&lt;code&gt;DocTestRunner&lt;/code&gt;&lt;/a&gt; to customize their output; it should not be called directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f5f1779fb30c60316a19fe768ece4ab18a718ff" translate="yes" xml:space="preserve">
          <source>Reports that the command is not implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9478afd1f1cbbe2570530e14898a3a8702d4a693" translate="yes" xml:space="preserve">
          <source>Repr Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bc6e28d58c936b1a08407448359ffedd92c1182" translate="yes" xml:space="preserve">
          <source>Represent a single frame in the traceback or stack that is being formatted or printed. It may optionally have a stringified version of the frames locals included in it. If &lt;em&gt;lookup_line&lt;/em&gt; is &lt;code&gt;False&lt;/code&gt;, the source code is not looked up until the &lt;a href=&quot;#traceback.FrameSummary&quot;&gt;&lt;code&gt;FrameSummary&lt;/code&gt;&lt;/a&gt; has the &lt;code&gt;line&lt;/code&gt; attribute accessed (which also happens when casting it to a tuple). &lt;code&gt;line&lt;/code&gt; may be directly provided, and will prevent line lookups happening at all. &lt;em&gt;locals&lt;/em&gt; is an optional local variable dictionary, and if supplied the variable representations are stored in the summary for later display.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebe4691e4bae16a26410f71caae3802a8ac0f0f6" translate="yes" xml:space="preserve">
          <source>Represent an address as 16 packed bytes in network (big-endian) order. &lt;em&gt;address&lt;/em&gt; is an integer representation of an IPv6 IP address. A &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; is raised if the integer is negative or too large to be an IPv6 IP address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d79b21e100f0651a5be0fad288f490f75dab588" translate="yes" xml:space="preserve">
          <source>Represent an address as 4 packed bytes in network (big-endian) order. &lt;em&gt;address&lt;/em&gt; is an integer representation of an IPv4 IP address. A &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; is raised if the integer is negative or too large to be an IPv4 IP address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="196cf85693b2e04e03af7b8db9b4362b075f1c0e" translate="yes" xml:space="preserve">
          <source>Represent and manipulate messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="083c9d26131739b5aff9923caafb482b4ec48b58" translate="yes" xml:space="preserve">
          <source>Represent the C &lt;code&gt;bool&lt;/code&gt; datatype (more accurately, &lt;code&gt;_Bool&lt;/code&gt; from C99). Its value can be &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;, and the constructor accepts any object that has a truth value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e44a8b6270a810e5ca0b4301005050ce646965d2" translate="yes" xml:space="preserve">
          <source>Represent the path as a &lt;code&gt;file&lt;/code&gt; URI. &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; is raised if the path isn&amp;rsquo;t absolute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="360bc539904b3901915f57b0aead8cb40373f0de" translate="yes" xml:space="preserve">
          <source>Representation</source>
          <target state="translated">Representation</target>
        </trans-unit>
        <trans-unit id="71334c66cce7357a33242f45111c460d2724f54f" translate="yes" xml:space="preserve">
          <source>Representation of comments in the source document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="251caf0ce3c6598751bdfd48226cc20358adbcd7" translate="yes" xml:space="preserve">
          <source>Represents a processing instruction in the XML document; this inherits from the &lt;code&gt;Node&lt;/code&gt; interface and cannot have child nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a84011a230a8f6db84d875433667507e8e18941" translate="yes" xml:space="preserve">
          <source>Represents a reader object that provides APIs to read data from the IO stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cfc34832a11bb051619fc9790f9df0953623075" translate="yes" xml:space="preserve">
          <source>Represents a writer object that provides APIs to write data to the IO stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85c70c4b26ecde8091c78a5be64cd08937604a4a" translate="yes" xml:space="preserve">
          <source>Represents entries in the Binary table; inserting such an object using &lt;a href=&quot;#msilib.add_data&quot;&gt;&lt;code&gt;add_data()&lt;/code&gt;&lt;/a&gt; reads the file named &lt;em&gt;filename&lt;/em&gt; into the table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebfc708c405efbbf1192348a4763a9c315bdb0b8" translate="yes" xml:space="preserve">
          <source>Represents the C 16-bit &lt;code&gt;signed int&lt;/code&gt; datatype. Usually an alias for &lt;a href=&quot;#ctypes.c_short&quot;&gt;&lt;code&gt;c_short&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6bcb428751c6a8e9e9ea3dec6bce63a6f93097c" translate="yes" xml:space="preserve">
          <source>Represents the C 16-bit &lt;code&gt;unsigned int&lt;/code&gt; datatype. Usually an alias for &lt;a href=&quot;#ctypes.c_ushort&quot;&gt;&lt;code&gt;c_ushort&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e677aaa641998b3b7f81dcb3af7c2c1cc575b407" translate="yes" xml:space="preserve">
          <source>Represents the C 32-bit &lt;code&gt;signed int&lt;/code&gt; datatype. Usually an alias for &lt;a href=&quot;#ctypes.c_int&quot;&gt;&lt;code&gt;c_int&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2afc6de59d69ee744a71e2c8123abd77166620bb" translate="yes" xml:space="preserve">
          <source>Represents the C 32-bit &lt;code&gt;unsigned int&lt;/code&gt; datatype. Usually an alias for &lt;a href=&quot;#ctypes.c_uint&quot;&gt;&lt;code&gt;c_uint&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0404c0259e7891029e732830bcdbe13aff08b1b0" translate="yes" xml:space="preserve">
          <source>Represents the C 64-bit &lt;code&gt;signed int&lt;/code&gt; datatype. Usually an alias for &lt;a href=&quot;#ctypes.c_longlong&quot;&gt;&lt;code&gt;c_longlong&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5579e29300e13296dd2e3bfbbeee1140a6d26a07" translate="yes" xml:space="preserve">
          <source>Represents the C 64-bit &lt;code&gt;unsigned int&lt;/code&gt; datatype. Usually an alias for &lt;a href=&quot;#ctypes.c_ulonglong&quot;&gt;&lt;code&gt;c_ulonglong&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92e77e6cc6636b49e24754ab07d11189472a326a" translate="yes" xml:space="preserve">
          <source>Represents the C 8-bit &lt;code&gt;signed int&lt;/code&gt; datatype. Usually an alias for &lt;a href=&quot;#ctypes.c_byte&quot;&gt;&lt;code&gt;c_byte&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10579ae1b63b51029ea2fcce8f6016c106014413" translate="yes" xml:space="preserve">
          <source>Represents the C 8-bit &lt;code&gt;unsigned int&lt;/code&gt; datatype. Usually an alias for &lt;a href=&quot;#ctypes.c_ubyte&quot;&gt;&lt;code&gt;c_ubyte&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74e71c8e1541ea5e50299033d15c1ebaed0de7e3" translate="yes" xml:space="preserve">
          <source>Represents the C &lt;a href=&quot;https://docs.python.org/3.8/c-api/structures.html#c.PyObject&quot;&gt;&lt;code&gt;PyObject *&lt;/code&gt;&lt;/a&gt; datatype. Calling this without an argument creates a &lt;code&gt;NULL&lt;/code&gt;&lt;a href=&quot;https://docs.python.org/3.8/c-api/structures.html#c.PyObject&quot;&gt;&lt;code&gt;PyObject *&lt;/code&gt;&lt;/a&gt; pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfbc3e30ec72aaf50ceb0c4c2f5ffd9f5589e1ca" translate="yes" xml:space="preserve">
          <source>Represents the C &lt;code&gt;char *&lt;/code&gt; datatype when it points to a zero-terminated string. For a general character pointer that may also point to binary data, &lt;code&gt;POINTER(c_char)&lt;/code&gt; must be used. The constructor accepts an integer address, or a bytes object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cdee775f57e8fc1027bf6cb2f8cad47dc4548f4" translate="yes" xml:space="preserve">
          <source>Represents the C &lt;code&gt;char&lt;/code&gt; datatype, and interprets the value as a single character. The constructor accepts an optional string initializer, the length of the string must be exactly one character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29c01758c668101f768b0d0eca571df4149bc9e9" translate="yes" xml:space="preserve">
          <source>Represents the C &lt;code&gt;double&lt;/code&gt; datatype. The constructor accepts an optional float initializer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eac6288935f4d2aa14ced6c0cd87577a151fa74" translate="yes" xml:space="preserve">
          <source>Represents the C &lt;code&gt;float&lt;/code&gt; datatype. The constructor accepts an optional float initializer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af5c278a503d85c125db7cf7af20bf9212b7e6b7" translate="yes" xml:space="preserve">
          <source>Represents the C &lt;code&gt;long double&lt;/code&gt; datatype. The constructor accepts an optional float initializer. On platforms where &lt;code&gt;sizeof(long double) ==
sizeof(double)&lt;/code&gt; it is an alias to &lt;a href=&quot;#ctypes.c_double&quot;&gt;&lt;code&gt;c_double&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebb2991e44270bf3e743b6df3e6c52ad486aba0a" translate="yes" xml:space="preserve">
          <source>Represents the C &lt;code&gt;signed char&lt;/code&gt; datatype, and interprets the value as small integer. The constructor accepts an optional integer initializer; no overflow checking is done.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="250753a38c9a2f17b0320be37fc295f4ea1d486f" translate="yes" xml:space="preserve">
          <source>Represents the C &lt;code&gt;signed int&lt;/code&gt; datatype. The constructor accepts an optional integer initializer; no overflow checking is done. On platforms where &lt;code&gt;sizeof(int) == sizeof(long)&lt;/code&gt; it is an alias to &lt;a href=&quot;#ctypes.c_long&quot;&gt;&lt;code&gt;c_long&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b3bc32cd5d160044207c249d263b1b2ec7f3dbd" translate="yes" xml:space="preserve">
          <source>Represents the C &lt;code&gt;signed long long&lt;/code&gt; datatype. The constructor accepts an optional integer initializer; no overflow checking is done.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="834e455b79030123be959bab4238c40806a0c1f4" translate="yes" xml:space="preserve">
          <source>Represents the C &lt;code&gt;signed long&lt;/code&gt; datatype. The constructor accepts an optional integer initializer; no overflow checking is done.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29e4ece1364aef7993b77e1eb617ca5e4cbbb63f" translate="yes" xml:space="preserve">
          <source>Represents the C &lt;code&gt;signed short&lt;/code&gt; datatype. The constructor accepts an optional integer initializer; no overflow checking is done.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d39dcb8c43511707fd127c6711f2fa9dbe73a9df" translate="yes" xml:space="preserve">
          <source>Represents the C &lt;code&gt;size_t&lt;/code&gt; datatype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1c72ca6086fa925cb82e1925b2d30d162d3d83f" translate="yes" xml:space="preserve">
          <source>Represents the C &lt;code&gt;ssize_t&lt;/code&gt; datatype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9faff58ee71e2ddb365084d0ad8fa10c0eb0bdbf" translate="yes" xml:space="preserve">
          <source>Represents the C &lt;code&gt;unsigned char&lt;/code&gt; datatype, it interprets the value as small integer. The constructor accepts an optional integer initializer; no overflow checking is done.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e28d5338f955859ad6fa4b5dc935e11719758a00" translate="yes" xml:space="preserve">
          <source>Represents the C &lt;code&gt;unsigned int&lt;/code&gt; datatype. The constructor accepts an optional integer initializer; no overflow checking is done. On platforms where &lt;code&gt;sizeof(int) == sizeof(long)&lt;/code&gt; it is an alias for &lt;a href=&quot;#ctypes.c_ulong&quot;&gt;&lt;code&gt;c_ulong&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c80b4a935038a9853bccd388f5f6b36d87ec052" translate="yes" xml:space="preserve">
          <source>Represents the C &lt;code&gt;unsigned long long&lt;/code&gt; datatype. The constructor accepts an optional integer initializer; no overflow checking is done.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b86a5b6ef36be46af974cca29441da910557668" translate="yes" xml:space="preserve">
          <source>Represents the C &lt;code&gt;unsigned long&lt;/code&gt; datatype. The constructor accepts an optional integer initializer; no overflow checking is done.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c13e529af5d7ca1af4ba67b7ed6b4054d8c96de" translate="yes" xml:space="preserve">
          <source>Represents the C &lt;code&gt;unsigned short&lt;/code&gt; datatype. The constructor accepts an optional integer initializer; no overflow checking is done.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f24369490b1cbe2cb1c8baa14e644f45582675f" translate="yes" xml:space="preserve">
          <source>Represents the C &lt;code&gt;void *&lt;/code&gt; type. The value is represented as integer. The constructor accepts an optional integer initializer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfee4618ef3a9a5c9dde6bb69f6bf3763a8e3d33" translate="yes" xml:space="preserve">
          <source>Represents the C &lt;code&gt;wchar_t *&lt;/code&gt; datatype, which must be a pointer to a zero-terminated wide character string. The constructor accepts an integer address, or a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="955bda388da2054d49816a2c0ec481e724e37ed0" translate="yes" xml:space="preserve">
          <source>Represents the C &lt;code&gt;wchar_t&lt;/code&gt; datatype, and interprets the value as a single character unicode string. The constructor accepts an optional string initializer, the length of the string must be exactly one character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81ab085580795762893afc75a3039479df0598f8" translate="yes" xml:space="preserve">
          <source>Request Handler Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e58418a16c7b78fa65efff4326c8cce9fcab3eb3" translate="yes" xml:space="preserve">
          <source>Request Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88ca8be4e86cd81a8e8b1f0dd8c635d7cb471145" translate="yes" xml:space="preserve">
          <source>Request for information about the transport.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="679af5d209f3165176d020117ec77d62ccb9e685" translate="yes" xml:space="preserve">
          <source>Request message list, result is in the form &lt;code&gt;(response, ['mesg_num octets',
...], octets)&lt;/code&gt;. If &lt;em&gt;which&lt;/em&gt; is set, it is the message to list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="795b6eb1b356df6defdaf7b48040b5b1ab2ded1b" translate="yes" xml:space="preserve">
          <source>Request named status conditions for &lt;em&gt;mailbox&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="349577d4bfaa98e578f20f1fe8d1196b1ecb1809" translate="yes" xml:space="preserve">
          <source>Request the Task to be cancelled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f43a53727b15d57439a6e2679987ec5c354c42e" translate="yes" xml:space="preserve">
          <source>Request the size of the file named &lt;em&gt;filename&lt;/em&gt; on the server. On success, the size of the file is returned as an integer, otherwise &lt;code&gt;None&lt;/code&gt; is returned. Note that the &lt;code&gt;SIZE&lt;/code&gt; command is not standardized, but is supported by many common server implementations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c0edf79e869493af3284f4a90b8286dbe514ab7" translate="yes" xml:space="preserve">
          <source>Request.full_url is a property with setter, getter and a deleter. Getting &lt;a href=&quot;#urllib.request.Request.full_url&quot;&gt;&lt;code&gt;full_url&lt;/code&gt;&lt;/a&gt; returns the original request URL with the fragment, if it was present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6624edf6a6f721c8f8feab403a0106284c9b7a1d" translate="yes" xml:space="preserve">
          <source>Requests post-handshake authentication (PHA) from a TLS 1.3 client. PHA can only be initiated for a TLS 1.3 connection from a server-side socket, after the initial TLS handshake and with PHA enabled on both sides, see &lt;a href=&quot;#ssl.SSLContext.post_handshake_auth&quot;&gt;&lt;code&gt;SSLContext.post_handshake_auth&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f424f28e26130553fd9b1cb33b7ffd4c171c1290" translate="yes" xml:space="preserve">
          <source>Requests that the underlying shared memory block be destroyed. In order to ensure proper cleanup of resources, &lt;code&gt;unlink()&lt;/code&gt; should be called once (and only once) across all processes which have need for the shared memory block. After requesting its destruction, a shared memory block may or may not be immediately destroyed and this behavior may differ across platforms. Attempts to access data inside the shared memory block after &lt;code&gt;unlink()&lt;/code&gt; has been called may result in memory access errors. Note: the last process relinquishing its hold on a shared memory block may call &lt;code&gt;unlink()&lt;/code&gt; and &lt;a href=&quot;#multiprocessing.shared_memory.SharedMemory.close&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt; in either order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f32e5cf5f68b8b47dabad68d3f3f1a96bdf00231" translate="yes" xml:space="preserve">
          <source>Required options are generally considered bad form because users expect &lt;em&gt;options&lt;/em&gt; to be &lt;em&gt;optional&lt;/em&gt;, and thus they should be avoided when possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42104f584e7185af38136c822b6ca0dc0e1c7e9d" translate="yes" xml:space="preserve">
          <source>Required to create a subkey of a registry key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2424413e00243c15ac9ea4a8f445c65ee83db262" translate="yes" xml:space="preserve">
          <source>Required to create, delete, or set a registry value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e039e734b0c82ef1bc9d2b30ebf08a9ad705f5f" translate="yes" xml:space="preserve">
          <source>Required to enumerate the subkeys of a registry key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3597453e15c78c45023d9ab068b701b801babefd" translate="yes" xml:space="preserve">
          <source>Required to query the values of a registry key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="715a438f507d5359881996eead3207ee68d77194" translate="yes" xml:space="preserve">
          <source>Required to request change notifications for a registry key or for subkeys of a registry key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbbabd42d7db228b931c272f5116719cf1328ac2" translate="yes" xml:space="preserve">
          <source>Resent</source>
          <target state="translated">Resent</target>
        </trans-unit>
        <trans-unit id="67a6ff10f1b93d118b60063992189eb08923db8b" translate="yes" xml:space="preserve">
          <source>Reserved</source>
          <target state="translated">Reserved</target>
        </trans-unit>
        <trans-unit id="39ef8a501c8e69a1a3c8d1fc3ebbf4b663515833" translate="yes" xml:space="preserve">
          <source>Reserved for Microsoft compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de3062f48873230d07d0f040f502a6f9de1e3160" translate="yes" xml:space="preserve">
          <source>Reserved for NCS compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83975a32a1f2f4bbed06b220ba258a40a7f5d143" translate="yes" xml:space="preserve">
          <source>Reserved for future definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a94f153c1fc553424928683df2a1ca5095dcc34e" translate="yes" xml:space="preserve">
          <source>Reserved for system use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="127546fc47cbe074868b58f77e429324a507632a" translate="yes" xml:space="preserve">
          <source>Reset all Turtles on the Screen to their initial state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d048221c86f328b023ed87f28984acf28fd11a1" translate="yes" xml:space="preserve">
          <source>Reset or hard reset (unreliable)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f67091a1660ae88b184292a116a4a61ef5bb724e" translate="yes" xml:space="preserve">
          <source>Reset the context variable to the value it had before the &lt;a href=&quot;#contextvars.ContextVar.set&quot;&gt;&lt;code&gt;ContextVar.set()&lt;/code&gt;&lt;/a&gt; that created the &lt;em&gt;token&lt;/em&gt; was used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9de7fd5778a89ce007e6059cb81ef63cf04c0537" translate="yes" xml:space="preserve">
          <source>Reset the decoder to the initial state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d49c70cc7cd22fac918ff3bb95936e180d02604" translate="yes" xml:space="preserve">
          <source>Reset the encoder to the initial state. The output is discarded: call &lt;code&gt;.encode(object, final=True)&lt;/code&gt;, passing an empty byte or text string if necessary, to reset the encoder and to get the output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e92b6a1febd7f5a1114ab71f5a057ba12b66f73c" translate="yes" xml:space="preserve">
          <source>Reset the instance. Loses all unprocessed data. This is called implicitly at instantiation time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bff4bc1b2ec48c271201c2d970d26ad64178b2d" translate="yes" xml:space="preserve">
          <source>Reset the internal flag to false. Subsequently, threads calling &lt;a href=&quot;#threading.Event.wait&quot;&gt;&lt;code&gt;wait()&lt;/code&gt;&lt;/a&gt; will block until &lt;a href=&quot;#threading.Event.set&quot;&gt;&lt;code&gt;set()&lt;/code&gt;&lt;/a&gt; is called to set the internal flag to true again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c19a3e96112fba3feedd5e33e26f6546659d001" translate="yes" xml:space="preserve">
          <source>Reset the state after an event is retrieved</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d633f4e19cee801cd3f67b7cc4865a2a355572e" translate="yes" xml:space="preserve">
          <source>Reset the syslog module values and call the system library &lt;code&gt;closelog()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e34c4f2a32751ad9021deb3a3d894570dd4d915a" translate="yes" xml:space="preserve">
          <source>Reset the time conversion rules used by the library routines. The environment variable &lt;code id=&quot;index-13&quot;&gt;TZ&lt;/code&gt; specifies how this is done. It will also set the variables &lt;code&gt;tzname&lt;/code&gt; (from the &lt;code id=&quot;index-14&quot;&gt;TZ&lt;/code&gt; environment variable), &lt;code&gt;timezone&lt;/code&gt; (non-DST seconds West of UTC), &lt;code&gt;altzone&lt;/code&gt; (DST seconds west of UTC) and &lt;code&gt;daylight&lt;/code&gt; (to 0 if this timezone does not have any daylight saving time rules, or to nonzero if there is a time, past, present or future when daylight saving time applies).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5a40addf34d290ead6463e7ee0b47bc992fe551" translate="yes" xml:space="preserve">
          <source>Reset the warnings filter. This discards the effect of all previous calls to &lt;a href=&quot;#warnings.filterwarnings&quot;&gt;&lt;code&gt;filterwarnings()&lt;/code&gt;&lt;/a&gt;, including that of the &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#cmdoption-w&quot;&gt;&lt;code&gt;-W&lt;/code&gt;&lt;/a&gt; command line options and calls to &lt;a href=&quot;#warnings.simplefilter&quot;&gt;&lt;code&gt;simplefilter()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7e71f72e32429fd2e53309c697f208362dbb76f" translate="yes" xml:space="preserve">
          <source>Resets all of the flags to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f0d2e32284b8664dd767d4744167c246f91973c" translate="yes" xml:space="preserve">
          <source>Resets all of the traps to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cec14b1118db040cd9cad3b5e3f5d5bef19011b" translate="yes" xml:space="preserve">
          <source>Resets an element. This function removes all subelements, clears all attributes, and sets the text and tail attributes to &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc2b17479e9f63ed33d228bfc1309dd6c8ccf270" translate="yes" xml:space="preserve">
          <source>Resets the &lt;a href=&quot;#smtpd.SMTPChannel.mailfrom&quot;&gt;&lt;code&gt;mailfrom&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#smtpd.SMTPChannel.rcpttos&quot;&gt;&lt;code&gt;rcpttos&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#smtpd.SMTPChannel.received_data&quot;&gt;&lt;code&gt;received_data&lt;/code&gt;&lt;/a&gt;, but not the greeting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66f3fb45eae86efcd59bab6111c95e6e1caa63e1" translate="yes" xml:space="preserve">
          <source>Resets the codec buffers used for keeping state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f00d828a74e171605d55a26c1bd917706054bbac" translate="yes" xml:space="preserve">
          <source>Resets the pack buffer to the empty string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="044b0da32617b88c959d3de50339a859cd2c2bfd" translate="yes" xml:space="preserve">
          <source>Resets the scheme and fontset of the Tix application to &lt;em&gt;newScheme&lt;/em&gt; and &lt;em&gt;newFontSet&lt;/em&gt;, respectively. This affects only those widgets created after this call. Therefore, it is best to call the resetoptions method before the creation of any widgets in a Tix application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cae5ff1d026f36112c5fb96e71d4c58a9c342c7" translate="yes" xml:space="preserve">
          <source>Resets the string buffer with the given &lt;em&gt;data&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73a3fdcc6fbb03a069d656eb3c559cde562b9732" translate="yes" xml:space="preserve">
          <source>Resize the standard and current windows to the specified dimensions, and adjusts other bookkeeping data used by the curses library that record the window dimensions (in particular the SIGWINCH handler).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="398c98f3fdf5e169462a36c719de19829608f611" translate="yes" xml:space="preserve">
          <source>Resize the stream to the given &lt;em&gt;size&lt;/em&gt; in bytes (or the current position if &lt;em&gt;size&lt;/em&gt; is not specified). The current stream position isn&amp;rsquo;t changed. This resizing can extend or reduce the current file size. In case of extension, the contents of the new file area depend on the platform (on most systems, additional bytes are zero-filled). The new file size is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a200ae0b8e51597d440a10e995777ad9684ad6e" translate="yes" xml:space="preserve">
          <source>Resizes the map and the underlying file, if any. If the mmap was created with &lt;code&gt;ACCESS_READ&lt;/code&gt; or &lt;code&gt;ACCESS_COPY&lt;/code&gt;, resizing the map will raise a &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b956b5d55f0a3a61228f63920470e1d90b9abda" translate="yes" xml:space="preserve">
          <source>Resolve MRO entries dynamically as specified by &lt;a href=&quot;https://www.python.org/dev/peps/pep-0560&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;PEP 560&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="538964af9fc9214c2d5ef8bd4f6f1f46a83f010a" translate="yes" xml:space="preserve">
          <source>Resolve a relative module name to an absolute one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29012c26c4602ab3af44b530bb1f1b649dd1460b" translate="yes" xml:space="preserve">
          <source>Resolve the system identifier of an entity and return either the system identifier to read from as a string, or an InputSource to read from. The default implementation returns &lt;em&gt;systemId&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87a1fceda48e4943acc5ca76e4bba664c030543a" translate="yes" xml:space="preserve">
          <source>Resolves &lt;code&gt;__aenter__&lt;/code&gt; and &lt;code&gt;__aexit__&lt;/code&gt; from the object on top of the stack. Pushes &lt;code&gt;__aexit__&lt;/code&gt; and result of &lt;code&gt;__aenter__()&lt;/code&gt; to the stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="021493f340d35ce0d744f7a3a9e53445394e86a6" translate="yes" xml:space="preserve">
          <source>Resource</source>
          <target state="translated">Resource</target>
        </trans-unit>
        <trans-unit id="ad94287ab4f543bf10c68378e7ba19242a3df67f" translate="yes" xml:space="preserve">
          <source>Resource Limits</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb5ad770f531d81bceb5b4f329f5aee4a234bc5f" translate="yes" xml:space="preserve">
          <source>Resource Usage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d2b9449646a0ee5d5e77b1f7dfdbd7898f4fbf0" translate="yes" xml:space="preserve">
          <source>Resource deadlock would occur</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f9eda118c3329c901b866254abd2e2e237bf61e" translate="yes" xml:space="preserve">
          <source>ResourceWarning</source>
          <target state="translated">ResourceWarning</target>
        </trans-unit>
        <trans-unit id="01d682cb3b4c9c7e04aa56b2fcaded504578a20f" translate="yes" xml:space="preserve">
          <source>Resources are roughly akin to files inside directories, though it&amp;rsquo;s important to keep in mind that this is just a metaphor. Resources and packages &lt;strong&gt;do not&lt;/strong&gt; have to exist as physical files and directories on the file system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="952df5c17fa0434c089cd6a9cd4044ee0f9fa218" translate="yes" xml:space="preserve">
          <source>Resources limitations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cd523ca42fe0cc464dad9e525f1549425792980" translate="yes" xml:space="preserve">
          <source>Resources usage can be limited using the &lt;a href=&quot;#resource.setrlimit&quot;&gt;&lt;code&gt;setrlimit()&lt;/code&gt;&lt;/a&gt; function described below. Each resource is controlled by a pair of limits: a soft limit and a hard limit. The soft limit is the current limit, and may be lowered or raised by a process over time. The soft limit can never exceed the hard limit. The hard limit can be lowered to any value greater than the soft limit, but not raised. (Only processes with the effective UID of the super-user can raise a hard limit.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b134bd555a2f6ec5313c1b2a225b2c17f3409351" translate="yes" xml:space="preserve">
          <source>Restart</source>
          <target state="translated">Restart</target>
        </trans-unit>
        <trans-unit id="03f21bbdceb66c45dcb2adb701db2f44c7357d8c" translate="yes" xml:space="preserve">
          <source>Restart Shell</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0170bf6e5dedfff27ec63e28fb126f1b886f33d5" translate="yes" xml:space="preserve">
          <source>Restart the debugged Python program. If an argument is supplied, it is split with &lt;a href=&quot;shlex#module-shlex&quot;&gt;&lt;code&gt;shlex&lt;/code&gt;&lt;/a&gt; and the result is used as the new &lt;a href=&quot;sys#sys.argv&quot;&gt;&lt;code&gt;sys.argv&lt;/code&gt;&lt;/a&gt;. History, breakpoints, actions and debugger options are preserved. &lt;a href=&quot;#pdbcommand-restart&quot;&gt;&lt;code&gt;restart&lt;/code&gt;&lt;/a&gt; is an alias for &lt;a href=&quot;#pdbcommand-run&quot;&gt;&lt;code&gt;run&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8fcc6a6eb40e50298cf8a478a3ef3652128987d" translate="yes" xml:space="preserve">
          <source>Restart the shell to clean the environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d42d159b708025b291e1da2884f94a2352410978" translate="yes" xml:space="preserve">
          <source>Restore a pipeline template to its initial state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3ec860cbb39734f68116981c7f3157f2a1f0672" translate="yes" xml:space="preserve">
          <source>Restore the state of the terminal modes to what it was at the last call to &lt;a href=&quot;#curses.savetty&quot;&gt;&lt;code&gt;savetty()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="792c573b37fffed7f82b062bf143b623c4aee0ca" translate="yes" xml:space="preserve">
          <source>Restore the terminal to &amp;ldquo;program&amp;rdquo; mode, as previously saved by &lt;a href=&quot;#curses.def_prog_mode&quot;&gt;&lt;code&gt;def_prog_mode()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="135c8a8213da8e5c924e31ee56c0f0f870235da7" translate="yes" xml:space="preserve">
          <source>Restore the terminal to &amp;ldquo;shell&amp;rdquo; mode, as previously saved by &lt;a href=&quot;#curses.def_shell_mode&quot;&gt;&lt;code&gt;def_shell_mode()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="128dc033b3de8940ac751576e32635b794a43280" translate="yes" xml:space="preserve">
          <source>Restores registry reflection for the specified disabled key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4c3c9ca59c5924842f244c0b9284beb12cfa8f8" translate="yes" xml:space="preserve">
          <source>Restoring reflection for a key does not affect reflection of any subkeys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd0ba95788d644d964009d5cea8331eabcad0285" translate="yes" xml:space="preserve">
          <source>Restrict the process with PID &lt;em&gt;pid&lt;/em&gt; (or the current process if zero) to a set of CPUs. &lt;em&gt;mask&lt;/em&gt; is an iterable of integers representing the set of CPUs to which the process should be restricted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4a29805bf07a828822ba0c7adcbce23dc492db0" translate="yes" xml:space="preserve">
          <source>Restricted Enum subclassing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a676ac7e79ad3c5c290bc9102846f4c905e92a43" translate="yes" xml:space="preserve">
          <source>Restricting Globals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38ad8517f1dfe99e4d87fbdbdd90a3a14b28b872" translate="yes" xml:space="preserve">
          <source>Restrictions</source>
          <target state="translated">Restrictions</target>
        </trans-unit>
        <trans-unit id="5faa59d4bc3756040b8ce9e673c09f929e6ee9ba" translate="yes" xml:space="preserve">
          <source>Result</source>
          <target state="translated">Result</target>
        </trans-unit>
        <trans-unit id="5fc0d872845900695d1aacbae68cabdda6ce0c26" translate="yes" xml:space="preserve">
          <source>Result of a &lt;a href=&quot;#inspect.Signature.bind&quot;&gt;&lt;code&gt;Signature.bind()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#inspect.Signature.bind_partial&quot;&gt;&lt;code&gt;Signature.bind_partial()&lt;/code&gt;&lt;/a&gt; call. Holds the mapping of arguments to the function&amp;rsquo;s parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0319b4be8f8ccc2e624bd9fc79e89eb10988a19" translate="yes" xml:space="preserve">
          <source>Resulting state</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="612e12d29278b5519294bc25cdaddffec6d0f1c6" translate="yes" xml:space="preserve">
          <source>Results</source>
          <target state="translated">Results</target>
        </trans-unit>
        <trans-unit id="b3bd0b5a70497bec4a02b7eb1cb0d4f37eb71a2a" translate="yes" xml:space="preserve">
          <source>Resume</source>
          <target state="translated">Resume</target>
        </trans-unit>
        <trans-unit id="bf13ff44cb63a5d98e2fca09672119bbe81ec70c" translate="yes" xml:space="preserve">
          <source>Resume receiving.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d3cbbc0d36eb6d20bd89c0c8f2ff4faa2ee23fe" translate="yes" xml:space="preserve">
          <source>Resume the receiving end. The protocol&amp;rsquo;s &lt;a href=&quot;#asyncio.Protocol.data_received&quot;&gt;&lt;code&gt;protocol.data_received()&lt;/code&gt;&lt;/a&gt; method will be called once again if some data is available for reading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="291ae6be2810be551f611099e9b589dcbf775f3d" translate="yes" xml:space="preserve">
          <source>Retrieve CRLs from Windows&amp;rsquo; system cert store. &lt;em&gt;store_name&lt;/em&gt; may be one of &lt;code&gt;CA&lt;/code&gt;, &lt;code&gt;ROOT&lt;/code&gt; or &lt;code&gt;MY&lt;/code&gt;. Windows may provide additional cert stores, too.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="649098a342c4ca3d937a57f90e977ebe92cb6e31" translate="yes" xml:space="preserve">
          <source>Retrieve a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-finder&quot;&gt;finder&lt;/a&gt; for the given &lt;em&gt;path_item&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6554c02652259ef954b1555abdf92c24fa021171" translate="yes" xml:space="preserve">
          <source>Retrieve a file in binary transfer mode. &lt;em&gt;cmd&lt;/em&gt; should be an appropriate &lt;code&gt;RETR&lt;/code&gt; command: &lt;code&gt;'RETR filename'&lt;/code&gt;. The &lt;em&gt;callback&lt;/em&gt; function is called for each block of data received, with a single bytes argument giving the data block. The optional &lt;em&gt;blocksize&lt;/em&gt; argument specifies the maximum chunk size to read on the low-level socket object created to do the actual transfer (which will also be the largest size of the data blocks passed to &lt;em&gt;callback&lt;/em&gt;). A reasonable default is chosen. &lt;em&gt;rest&lt;/em&gt; means the same thing as in the &lt;a href=&quot;#ftplib.FTP.transfercmd&quot;&gt;&lt;code&gt;transfercmd()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="403a1578829a239110dcbec03c2d403a31503e65" translate="yes" xml:space="preserve">
          <source>Retrieve a file or directory listing in ASCII transfer mode. &lt;em&gt;cmd&lt;/em&gt; should be an appropriate &lt;code&gt;RETR&lt;/code&gt; command (see &lt;a href=&quot;#ftplib.FTP.retrbinary&quot;&gt;&lt;code&gt;retrbinary()&lt;/code&gt;&lt;/a&gt;) or a command such as &lt;code&gt;LIST&lt;/code&gt; or &lt;code&gt;NLST&lt;/code&gt; (usually just the string &lt;code&gt;'LIST'&lt;/code&gt;). &lt;code&gt;LIST&lt;/code&gt; retrieves a list of files and information about those files. &lt;code&gt;NLST&lt;/code&gt; retrieves a list of file names. The &lt;em&gt;callback&lt;/em&gt; function is called for each line with a string argument containing the line with the trailing CRLF stripped. The default &lt;em&gt;callback&lt;/em&gt; prints the line to &lt;code&gt;sys.stdout&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34e4ce9007d9fe4d7db869d382b75d7b77760830" translate="yes" xml:space="preserve">
          <source>Retrieve a given field value. The &lt;em&gt;key&lt;/em&gt; argument will be either an integer or a string. If it is an integer, it represents the index of the positional argument in &lt;em&gt;args&lt;/em&gt;; if it is a string, then it represents a named argument in &lt;em&gt;kwargs&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddb345d237bdc2e27d9ef8f67a70e7322321eb04" translate="yes" xml:space="preserve">
          <source>Retrieve a module &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-loader&quot;&gt;loader&lt;/a&gt; for the given &lt;em&gt;fullname&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e555659165e22b46f6feb4470ecdaa9807473caf" translate="yes" xml:space="preserve">
          <source>Retrieve attributes without triggering dynamic lookup via the descriptor protocol, &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getattr__&quot;&gt;&lt;code&gt;__getattr__()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getattribute__&quot;&gt;&lt;code&gt;__getattribute__()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="095f446af8551d23d2a1674c7e2a391418e4bf4f" translate="yes" xml:space="preserve">
          <source>Retrieve certificates from Windows&amp;rsquo; system cert store. &lt;em&gt;store_name&lt;/em&gt; may be one of &lt;code&gt;CA&lt;/code&gt;, &lt;code&gt;ROOT&lt;/code&gt; or &lt;code&gt;MY&lt;/code&gt;. Windows may provide additional cert stores, too.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ccfa542fbbdb7bda5d2e0ee405c1ff561d2dfc4" translate="yes" xml:space="preserve">
          <source>Retrieve the next item from the &lt;em&gt;iterator&lt;/em&gt; by calling its &lt;a href=&quot;stdtypes#iterator.__next__&quot;&gt;&lt;code&gt;__next__()&lt;/code&gt;&lt;/a&gt; method. If &lt;em&gt;default&lt;/em&gt; is given, it is returned if the iterator is exhausted, otherwise &lt;a href=&quot;exceptions#StopIteration&quot;&gt;&lt;code&gt;StopIteration&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3960139ac0ae3868793691905f6a343b2c0c77ad" translate="yes" xml:space="preserve">
          <source>Retrieve the specified &lt;code&gt;ANNOTATION&lt;/code&gt;s for &lt;em&gt;mailbox&lt;/em&gt;. The method is non-standard, but is supported by the &lt;code&gt;Cyrus&lt;/code&gt; server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6db53bb97bca1b73a57fd8d7aaab895090eadc3b" translate="yes" xml:space="preserve">
          <source>Retrieve whole message number &lt;em&gt;which&lt;/em&gt;, and set its seen flag. Result is in form &lt;code&gt;(response, ['line', ...], octets)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dab3e703a390019191d739774a97d6d6c3d1910" translate="yes" xml:space="preserve">
          <source>Retrieves the contents of &lt;em&gt;url&lt;/em&gt; and places it in &lt;em&gt;filename&lt;/em&gt;. The return value is a tuple consisting of a local filename and either an &lt;a href=&quot;email.compat32-message#email.message.Message&quot;&gt;&lt;code&gt;email.message.Message&lt;/code&gt;&lt;/a&gt; object containing the response headers (for remote URLs) or &lt;code&gt;None&lt;/code&gt; (for local URLs). The caller must then open and read the contents of &lt;em&gt;filename&lt;/em&gt;. If &lt;em&gt;filename&lt;/em&gt; is not given and the URL refers to a local file, the input filename is returned. If the URL is non-local and &lt;em&gt;filename&lt;/em&gt; is not given, the filename is the output of &lt;a href=&quot;tempfile#tempfile.mktemp&quot;&gt;&lt;code&gt;tempfile.mktemp()&lt;/code&gt;&lt;/a&gt; with a suffix that matches the suffix of the last path component of the input URL. If &lt;em&gt;reporthook&lt;/em&gt; is given, it must be a function accepting three numeric parameters: A chunk number, the maximum size chunks are read in and the total size of the download (-1 if unknown). It will be called once at the start and after each chunk of data is read from the network. &lt;em&gt;reporthook&lt;/em&gt; is ignored for local URLs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="385d63055e6af1c2077e2fd207836302b9c7e071" translate="yes" xml:space="preserve">
          <source>Retrieves the message header plus &lt;em&gt;howmuch&lt;/em&gt; lines of the message after the header of message number &lt;em&gt;which&lt;/em&gt;. Result is in form &lt;code&gt;(response, ['line', ...],
octets)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b9010bcfc3cfcd8b404b1f0d738ea82a1a9e695" translate="yes" xml:space="preserve">
          <source>Retrieves the specialized header associated with &lt;em&gt;name&lt;/em&gt; from the registry (using &lt;em&gt;default_class&lt;/em&gt; if &lt;em&gt;name&lt;/em&gt; does not appear in the registry) and composes it with &lt;em&gt;base_class&lt;/em&gt; to produce a class, calls the constructed class&amp;rsquo;s constructor, passing it the same argument list, and finally returns the class instance created thereby.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b535a36014b3e3d0d355c23706e49c2322351aa" translate="yes" xml:space="preserve">
          <source>Retrieves the type and data for a specified value name associated with an open registry key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7066d204c02602ef3b97ae65a6595bc017e2020" translate="yes" xml:space="preserve">
          <source>Retrieves the unnamed value for a key, as a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a12de40909dd920a73fcf3dee7b8791a3030550" translate="yes" xml:space="preserve">
          <source>Retrieving source code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8489002e10280e19aeb925f9b1cf2bf436a33f09" translate="yes" xml:space="preserve">
          <source>Retry the request with authentication information, if available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24f096b221f9534bcad007f2b5a32b490950b5b5" translate="yes" xml:space="preserve">
          <source>Return</source>
          <target state="translated">Return</target>
        </trans-unit>
        <trans-unit id="92d58116afd8a3734b15b3a4bf9d7a231cbdbab3" translate="yes" xml:space="preserve">
          <source>Return (bytes, is_cryptographic): bytes are &lt;em&gt;num&lt;/em&gt; pseudo-random bytes, is_cryptographic is &lt;code&gt;True&lt;/code&gt; if the bytes generated are cryptographically strong. Raises an &lt;a href=&quot;#ssl.SSLError&quot;&gt;&lt;code&gt;SSLError&lt;/code&gt;&lt;/a&gt; if the operation is not supported by the current RAND method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3498aeacce2a34d6a0b6d6230500f8e683513a49" translate="yes" xml:space="preserve">
          <source>Return &lt;a href=&quot;#datetime.date&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/a&gt; object with same year, month and day.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70f09a6299864364a55efc6ab7b739eacc94902c" translate="yes" xml:space="preserve">
          <source>Return &lt;a href=&quot;#datetime.time&quot;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; object with same hour, minute, second, microsecond and fold. &lt;a href=&quot;#datetime.datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;None&lt;/code&gt;. See also method &lt;a href=&quot;#datetime.datetime.timetz&quot;&gt;&lt;code&gt;timetz()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8f39d2001e59b40bf2e984998187dd7a44afb78" translate="yes" xml:space="preserve">
          <source>Return &lt;a href=&quot;#datetime.time&quot;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; object with same hour, minute, second, microsecond, fold, and tzinfo attributes. See also method &lt;a href=&quot;time#module-time&quot;&gt;&lt;code&gt;time()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0285753e7269b18b9d11ac29cc151c28e2ca833a" translate="yes" xml:space="preserve">
          <source>Return &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;, or the sequence of allowed domains (as a tuple).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7af064dbad7a00c0b1a87689c780ecae0d15d13a" translate="yes" xml:space="preserve">
          <source>Return &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; if &lt;em&gt;name&lt;/em&gt; is a tar archive file, that the &lt;a href=&quot;#module-tarfile&quot;&gt;&lt;code&gt;tarfile&lt;/code&gt;&lt;/a&gt; module can read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="093368eba3cb25719ed94f851fc393590fdf6de9" translate="yes" xml:space="preserve">
          <source>Return &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; if &lt;em&gt;name&lt;/em&gt; is in the set of SMTP service extensions returned by the server, &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt; otherwise. Case is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e94b8938ece9e8b213ea593cb155099ca78f037" translate="yes" xml:space="preserve">
          <source>Return &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; if &lt;em&gt;obj&lt;/em&gt; is true, and &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt; otherwise. This is equivalent to using the &lt;a href=&quot;functions#bool&quot;&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24fd644ca1d49b92dfc4713ccf90fe040848fc46" translate="yes" xml:space="preserve">
          <source>Return &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; if it is a FIFO.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81cd5e95f0922a185d61fa908fc4e1e1cdfe7f5f" translate="yes" xml:space="preserve">
          <source>Return &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; if it is a block device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a5e12c63024db3962cbd1c2f1797b30783c11b9" translate="yes" xml:space="preserve">
          <source>Return &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; if it is a character device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f220814202d4e857c68fe2f395e63adc3cf27cc9" translate="yes" xml:space="preserve">
          <source>Return &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; if it is a directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6150561205505991387a58a2d577338831483f9c" translate="yes" xml:space="preserve">
          <source>Return &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; if it is a hard link.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c53122f3b26b98d323738f4ac4df134b1caeaf6e" translate="yes" xml:space="preserve">
          <source>Return &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; if it is a symbolic link.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f23a3800d797c6e6f2d151aebb523b368e45adc6" translate="yes" xml:space="preserve">
          <source>Return &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; if it is one of character device, block device or FIFO.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea6c7e02552f697e35babcdd2d4bfef42f279cb1" translate="yes" xml:space="preserve">
          <source>Return &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; if the &lt;code&gt;Tarinfo&lt;/code&gt; object is a regular file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2abebad43ed00422c6027529f028a85489fd8b40" translate="yes" xml:space="preserve">
          <source>Return &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; if the &lt;em&gt;object&lt;/em&gt; argument appears callable, &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt; if not. If this returns &lt;code&gt;True&lt;/code&gt;, it is still possible that a call fails, but if it is &lt;code&gt;False&lt;/code&gt;, calling &lt;em&gt;object&lt;/em&gt; will never succeed. Note that classes are callable (calling a class returns a new instance); instances are callable if their class has a &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__call__&quot;&gt;&lt;code&gt;__call__()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b250f27498f743473d64af0630b859fa31e2ff93" translate="yes" xml:space="preserve">
          <source>Return &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; if the Python interpreter is &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-interpreter-shutdown&quot;&gt;shutting down&lt;/a&gt;, &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfe6649437d1f19f39f569f1bb27687988e65f55" translate="yes" xml:space="preserve">
          <source>Return &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; if the argument has a negative sign and &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt; otherwise. Note that zeros and NaNs can both carry signs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f12d5608b79473f8379a1ead78cdeb9bd426454a" translate="yes" xml:space="preserve">
          <source>Return &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; if the argument is a (positive or negative) zero and &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="601693ce8ca7356e92f067e8ea52c52cdb12670b" translate="yes" xml:space="preserve">
          <source>Return &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; if the argument is a (quiet or signaling) NaN and &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4930ff573a7bad0aecc492db9aebbf1393590af4" translate="yes" xml:space="preserve">
          <source>Return &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; if the argument is a &lt;em&gt;normal&lt;/em&gt; finite number. Return &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt; if the argument is zero, subnormal, infinite or a NaN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65323e12210e87344092d755064aa0886a22fb00" translate="yes" xml:space="preserve">
          <source>Return &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; if the argument is a finite number, and &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt; if the argument is an infinity or a NaN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc910198797e97ee0573c35ef24209b1a5e24ac3" translate="yes" xml:space="preserve">
          <source>Return &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; if the argument is a quiet NaN, and &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86ba126a70bb610fab44c2dca4a0f2d1c5462567" translate="yes" xml:space="preserve">
          <source>Return &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; if the argument is a signaling NaN and &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="838b03440dd12c5952d25816baf47c64d10abdf4" translate="yes" xml:space="preserve">
          <source>Return &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; if the argument is canonical and &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt; otherwise. Currently, a &lt;a href=&quot;#decimal.Decimal&quot;&gt;&lt;code&gt;Decimal&lt;/code&gt;&lt;/a&gt; instance is always canonical, so this operation always returns &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dad937519bc5eb8dff85d0c0be025f80eebe2519" translate="yes" xml:space="preserve">
          <source>Return &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; if the argument is either positive or negative infinity and &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7969a9d1bcae3866adb865cb0ec86c576363c00c" translate="yes" xml:space="preserve">
          <source>Return &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; if the argument is subnormal, and &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97ccedce3e6307e9a0bc7160b29f2555e7299cee" translate="yes" xml:space="preserve">
          <source>Return &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; if the transport supports &lt;a href=&quot;#asyncio.WriteTransport.write_eof&quot;&gt;&lt;code&gt;write_eof()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt; if not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26514045ec9a1ff63702fb3558eff12b5735fd29" translate="yes" xml:space="preserve">
          <source>Return &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; if the transport supports sending EOF.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46b2d3c933291bb12517fa733d54850c62c10276" translate="yes" xml:space="preserve">
          <source>Return &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; containing the entire contents of the buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c1556ddf94acefe00bb3b6df3badf33a08c7fa8" translate="yes" xml:space="preserve">
          <source>Return &lt;a href=&quot;struct#struct.calcsize&quot;&gt;&lt;code&gt;struct.calcsize()&lt;/code&gt;&lt;/a&gt; for &lt;code&gt;nPn{fmt}0n&lt;/code&gt; or, if &lt;code&gt;gettotalrefcount&lt;/code&gt; exists, &lt;code&gt;2PnPn{fmt}0P&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="316b341c2f5ad47d174f9abfb2aac9792d9b68ca" translate="yes" xml:space="preserve">
          <source>Return &lt;a href=&quot;struct#struct.calcsize&quot;&gt;&lt;code&gt;struct.calcsize()&lt;/code&gt;&lt;/a&gt; for &lt;code&gt;nP{fmt}0n&lt;/code&gt; or, if &lt;code&gt;gettotalrefcount&lt;/code&gt; exists, &lt;code&gt;2PnP{fmt}0P&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1d847ed232bb9cad52d07be25cff747a7b7f262" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;(exitcode, output)&lt;/code&gt; of executing &lt;em&gt;cmd&lt;/em&gt; in a shell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de1dcaa07d00a86d3004a1250464c4533d42159d" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;(failure_count, test_count)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a91d7a0d4c56e2705fb7930bba2ebcd2668de723" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;Decimal(10)&lt;/code&gt;, the radix (base) in which the &lt;a href=&quot;#decimal.Decimal&quot;&gt;&lt;code&gt;Decimal&lt;/code&gt;&lt;/a&gt; class does all its arithmetic. Included for compatibility with the specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed8e84ba2b1892a25a3e2e7b13b185f76884fb13" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;False&lt;/code&gt; if cookies should not be returned, given cookie domain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40ddb6e4525f3314dcdd8fb22aec4667c7f51a61" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;False&lt;/code&gt; if cookies should not be returned, given cookie path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1a79045f8cf2a891e5fa086886c4c8940e81a94" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;None&lt;/code&gt; to request a normal &lt;code&gt;250 Ok&lt;/code&gt; response; otherwise return the desired response string in &lt;a href=&quot;https://tools.ietf.org/html/rfc5321.html&quot; id=&quot;index-6&quot;&gt;&lt;strong&gt;RFC 5321&lt;/strong&gt;&lt;/a&gt; format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c178f2f5253c6efc74e592899d5ef8bd2adda80" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; for ignorable characters. The character &lt;em&gt;ch&lt;/em&gt; is ignorable if &lt;em&gt;ch&lt;/em&gt; is a space or tab, otherwise it is not ignorable. Used as a default for parameter &lt;em&gt;charjunk&lt;/em&gt; in &lt;a href=&quot;#difflib.ndiff&quot;&gt;&lt;code&gt;ndiff()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50ce3787d5c52cc992d4f0d4d3fe8ca17603e1e9" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; for ignorable lines. The line &lt;em&gt;line&lt;/em&gt; is ignorable if &lt;em&gt;line&lt;/em&gt; is blank or contains a single &lt;code&gt;'#'&lt;/code&gt;, otherwise it is not ignorable. Used as a default for parameter &lt;em&gt;linejunk&lt;/em&gt; in &lt;a href=&quot;#difflib.ndiff&quot;&gt;&lt;code&gt;ndiff()&lt;/code&gt;&lt;/a&gt; in older versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adf2a1e3bfbbed0f518f14b41d322ec7ef4029b7" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; for non-terminal token values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4559a4f32f117e2402898f4b3dc8a930d0fd844" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; for terminal token values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="625136be506a620b8685cf8e1b601a0f137c13b7" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if &amp;lsquo;header_name&amp;rsquo; is an HTTP/1.1 &amp;ldquo;Hop-by-Hop&amp;rdquo; header, as defined by &lt;a href=&quot;https://tools.ietf.org/html/rfc2616.html&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 2616&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7169a45bbce4543e8eeaf654070e82fb3b3dc82e" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if &lt;a href=&quot;#curses.endwin&quot;&gt;&lt;code&gt;endwin()&lt;/code&gt;&lt;/a&gt; has been called (that is, the curses library has been deinitialized).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03489bb44d44ce227ab6538932ea2f7ccc03b9f3" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if &lt;a href=&quot;#curses.resize_term&quot;&gt;&lt;code&gt;resize_term()&lt;/code&gt;&lt;/a&gt; would modify the window structure, &lt;code&gt;False&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48bd7e343aad3c970ef39155526a7f32e96f06a9" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if &lt;a href=&quot;#importlib.machinery.SourceFileLoader.path&quot;&gt;&lt;code&gt;path&lt;/code&gt;&lt;/a&gt; appears to be for a package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f362831e0a56c769ad986dfab464c867f9e279e" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if &lt;code&gt;sys.executable interpreter&lt;/code&gt; requires environment variables in order to be able to run at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="752d4ae38801a49a32090936d310f759690c334f" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if &lt;em&gt;class&lt;/em&gt; is a subclass (direct, indirect or &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-abstract-base-class&quot;&gt;virtual&lt;/a&gt;) of &lt;em&gt;classinfo&lt;/em&gt;. A class is considered a subclass of itself. &lt;em&gt;classinfo&lt;/em&gt; may be a tuple of class objects, in which case every entry in &lt;em&gt;classinfo&lt;/em&gt; will be checked. In any other case, a &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; exception is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3065ecb1059c754989e97319a594623925b2a3dd" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if &lt;em&gt;d&lt;/em&gt; has a key &lt;em&gt;key&lt;/em&gt;, else &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c977adab4811ed32117fab5f86084513622f8bc" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if &lt;em&gt;func&lt;/em&gt; is a &lt;a href=&quot;#coroutine&quot;&gt;coroutine function&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b21fb1683c7ba03ded90dc10609c46a391b220b2" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if &lt;em&gt;key&lt;/em&gt; corresponds to a message, &lt;code&gt;False&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51fe5e8de7847d7ef04c1a31e8e987d93e6fcf5c" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if &lt;em&gt;obj&lt;/em&gt; is a &lt;a href=&quot;#coroutine&quot;&gt;coroutine object&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a051d8859c64dd677a9284f5e35c545211efe1a" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if &lt;em&gt;obj&lt;/em&gt; is either of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="649f832e2bb1e0d42b8abaab3261af8630996ce2" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if &lt;em&gt;other&lt;/em&gt; refers to the same node as this node. This is especially useful for DOM implementations which use any sort of proxy architecture (because more than one object can refer to the same node).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc1798c291263774e39cc31309eb6a442ebe1c6d" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if &lt;em&gt;path&lt;/em&gt; is an &lt;a href=&quot;#os.path.exists&quot;&gt;&lt;code&gt;existing&lt;/code&gt;&lt;/a&gt; directory. This follows symbolic links, so both &lt;a href=&quot;#os.path.islink&quot;&gt;&lt;code&gt;islink()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#os.path.isdir&quot;&gt;&lt;code&gt;isdir()&lt;/code&gt;&lt;/a&gt; can be true for the same path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b472c3f5f1253bff5bb8ae78f53cbb1fc9bfe58" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if &lt;em&gt;path&lt;/em&gt; is an &lt;a href=&quot;#os.path.exists&quot;&gt;&lt;code&gt;existing&lt;/code&gt;&lt;/a&gt; regular file. This follows symbolic links, so both &lt;a href=&quot;#os.path.islink&quot;&gt;&lt;code&gt;islink()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#os.path.isfile&quot;&gt;&lt;code&gt;isfile()&lt;/code&gt;&lt;/a&gt; can be true for the same path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5480c1bd7c5cec37d3e846df8d79d8a45f3f379f" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if &lt;em&gt;path&lt;/em&gt; is an absolute pathname. On Unix, that means it begins with a slash, on Windows that it begins with a (back)slash after chopping off a potential drive letter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cb4e4211dae636d6f7d0ca54e9130efeb56e279" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if &lt;em&gt;path&lt;/em&gt; refers to an &lt;a href=&quot;#os.path.exists&quot;&gt;&lt;code&gt;existing&lt;/code&gt;&lt;/a&gt; directory entry that is a symbolic link. Always &lt;code&gt;False&lt;/code&gt; if symbolic links are not supported by the Python runtime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9d366c2ee90a6bf1f27b8185408639c38b13dc1" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if &lt;em&gt;path&lt;/em&gt; refers to an existing path or an open file descriptor. Returns &lt;code&gt;False&lt;/code&gt; for broken symbolic links. On some platforms, this function may return &lt;code&gt;False&lt;/code&gt; if permission is not granted to execute &lt;a href=&quot;os#os.stat&quot;&gt;&lt;code&gt;os.stat()&lt;/code&gt;&lt;/a&gt; on the requested file, even if the &lt;em&gt;path&lt;/em&gt; physically exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b85ad8b340793b75b5e6af29ed537f2d0fa1b50" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if &lt;em&gt;path&lt;/em&gt; refers to an existing path. Returns &lt;code&gt;True&lt;/code&gt; for broken symbolic links. Equivalent to &lt;a href=&quot;#os.path.exists&quot;&gt;&lt;code&gt;exists()&lt;/code&gt;&lt;/a&gt; on platforms lacking &lt;a href=&quot;os#os.lstat&quot;&gt;&lt;code&gt;os.lstat()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32023b4a78c7b7cd7d7e71517a61bcf6812f2d83" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if &lt;em&gt;resource&lt;/em&gt; is enabled and available. The list of available resources is only set when &lt;code&gt;test.regrtest&lt;/code&gt; is executing the tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f58f0a19fce0587b54726ac6f5cc665c58274a2f" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if &lt;em&gt;s&lt;/em&gt; is a Python keyword.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a499c4bd3eacc162fdab85413e6e6dab48bb581c" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if &lt;em&gt;x&lt;/em&gt; is a NaN (not a number), and &lt;code&gt;False&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60c76f416db7184a71d8d7311afdd3ee76f4adc2" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if &lt;em&gt;x&lt;/em&gt; is a positive or negative infinity, and &lt;code&gt;False&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa42da1d0ac9f50b0e111a26bffdf70b02f15c99" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if &lt;em&gt;x&lt;/em&gt; is in the underlying dictionary&amp;rsquo;s keys, values or items (in the latter case, &lt;em&gt;x&lt;/em&gt; should be a &lt;code&gt;(key, value)&lt;/code&gt; tuple).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a5f969bb1937197a68e7dd97ca8da6a61ab5d7c" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if &lt;em&gt;x&lt;/em&gt; is neither an infinity nor a NaN, and &lt;code&gt;False&lt;/code&gt; otherwise. (Note that &lt;code&gt;0.0&lt;/code&gt;&lt;em&gt;is&lt;/em&gt; considered finite.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b05164bae30914c3da7835121d4d0b792d42343" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if &lt;em&gt;x&lt;/em&gt; is the marker indicating the end of input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0d7acfa3dc19743e2b760ea0fc1883b90b877e9" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if Python was not built with &lt;code&gt;-O0&lt;/code&gt; or &lt;code&gt;-Og&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcf3b40f3033fc53a5903b23da96e8afb6e67874" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if a core dump was generated for the process, otherwise return &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b38fff6d322e0b1e38b12de403ff8e4eef1a3231" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if a keypress is waiting to be read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b106d3a89f7ceaab12c3722c6eaa04053023b8e" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if all bytes in the sequence are ASCII decimal digits and the sequence is not empty, &lt;code&gt;False&lt;/code&gt; otherwise. ASCII decimal digits are those byte values in the sequence &lt;code&gt;b'0123456789'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e70957ed3ddefa229a1857ad4b4cb86ef49f5391" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if all bytes in the sequence are ASCII whitespace and the sequence is not empty, &lt;code&gt;False&lt;/code&gt; otherwise. ASCII whitespace characters are those byte values in the sequence &lt;code&gt;b' \t\n\r\x0b\f'&lt;/code&gt; (space, tab, newline, carriage return, vertical tab, form feed).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a2f62dcf0a9e0bad35a7d51cf56250023dbaec0" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if all bytes in the sequence are alphabetic ASCII characters and the sequence is not empty, &lt;code&gt;False&lt;/code&gt; otherwise. Alphabetic ASCII characters are those byte values in the sequence &lt;code&gt;b'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b991f845eb91665d998b6cfdd099f902cf77362" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if all bytes in the sequence are alphabetical ASCII characters or ASCII decimal digits and the sequence is not empty, &lt;code&gt;False&lt;/code&gt; otherwise. Alphabetic ASCII characters are those byte values in the sequence &lt;code&gt;b'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'&lt;/code&gt;. ASCII decimal digits are those byte values in the sequence &lt;code&gt;b'0123456789'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5028a8849455e69d4edb7224b70c2f92e21ce475" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if all cased characters &lt;a href=&quot;#id15&quot; id=&quot;id6&quot;&gt;4&lt;/a&gt; in the string are lowercase and there is at least one cased character, &lt;code&gt;False&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dc757eb2200a3a03f503111a85181c91dd6a935" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if all cased characters &lt;a href=&quot;#id15&quot; id=&quot;id7&quot;&gt;4&lt;/a&gt; in the string are uppercase and there is at least one cased character, &lt;code&gt;False&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8f26261bd7a3382ca9bb8bcb049bf2e27bbc734" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if all characters in the string are alphabetic and there is at least one character, &lt;code&gt;False&lt;/code&gt; otherwise. Alphabetic characters are those characters defined in the Unicode character database as &amp;ldquo;Letter&amp;rdquo;, i.e., those with general category property being one of &amp;ldquo;Lm&amp;rdquo;, &amp;ldquo;Lt&amp;rdquo;, &amp;ldquo;Lu&amp;rdquo;, &amp;ldquo;Ll&amp;rdquo;, or &amp;ldquo;Lo&amp;rdquo;. Note that this is different from the &amp;ldquo;Alphabetic&amp;rdquo; property defined in the Unicode Standard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fef6425a0b8cf0f974d1d87b52c20a297cab19a1" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if all characters in the string are alphanumeric and there is at least one character, &lt;code&gt;False&lt;/code&gt; otherwise. A character &lt;code&gt;c&lt;/code&gt; is alphanumeric if one of the following returns &lt;code&gt;True&lt;/code&gt;: &lt;code&gt;c.isalpha()&lt;/code&gt;, &lt;code&gt;c.isdecimal()&lt;/code&gt;, &lt;code&gt;c.isdigit()&lt;/code&gt;, or &lt;code&gt;c.isnumeric()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="404a3a332c0a32b30bd18106c5ae19e67f8fd276" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if all characters in the string are decimal characters and there is at least one character, &lt;code&gt;False&lt;/code&gt; otherwise. Decimal characters are those that can be used to form numbers in base 10, e.g. U+0660, ARABIC-INDIC DIGIT ZERO. Formally a decimal character is a character in the Unicode General Category &amp;ldquo;Nd&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4abe890beec4ea49c091abd01791e2bbac0f19e0" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if all characters in the string are digits and there is at least one character, &lt;code&gt;False&lt;/code&gt; otherwise. Digits include decimal characters and digits that need special handling, such as the compatibility superscript digits. This covers digits which cannot be used to form numbers in base 10, like the Kharosthi numbers. Formally, a digit is a character that has the property value Numeric_Type=Digit or Numeric_Type=Decimal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="324a9f0ccc6e2e02d10da9b23aa540f1970b9fc6" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if all characters in the string are numeric characters, and there is at least one character, &lt;code&gt;False&lt;/code&gt; otherwise. Numeric characters include digit characters, and all characters that have the Unicode numeric value property, e.g. U+2155, VULGAR FRACTION ONE FIFTH. Formally, numeric characters are those with the property value Numeric_Type=Digit, Numeric_Type=Decimal or Numeric_Type=Numeric.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="684f677786657bf802299eb1fecccfae093a2096" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if all characters in the string are printable or the string is empty, &lt;code&gt;False&lt;/code&gt; otherwise. Nonprintable characters are those characters defined in the Unicode character database as &amp;ldquo;Other&amp;rdquo; or &amp;ldquo;Separator&amp;rdquo;, excepting the ASCII space (0x20) which is considered printable. (Note that printable characters in this context are those which should not be escaped when &lt;a href=&quot;functions#repr&quot;&gt;&lt;code&gt;repr()&lt;/code&gt;&lt;/a&gt; is invoked on a string. It has no bearing on the handling of strings written to &lt;a href=&quot;sys#sys.stdout&quot;&gt;&lt;code&gt;sys.stdout&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;sys#sys.stderr&quot;&gt;&lt;code&gt;sys.stderr&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1893bdee78843c57671815e1dd818323c359b020" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if all elements of the &lt;em&gt;iterable&lt;/em&gt; are true (or if the iterable is empty). Equivalent to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeeab3236324583fb4707d66d153b80c32530d0d" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if all tests run so far have passed, otherwise returns &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="827fb29992cae8affc1fa822f05d388cbc5a79bd" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if and only if the internal flag is true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e5169d4c182a7bfeea529f3a96d03e89950d7db" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if any element of the &lt;em&gt;iterable&lt;/em&gt; is true. If the iterable is empty, return &lt;code&gt;False&lt;/code&gt;. Equivalent to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdfd1361e82ebfe985cb800863733008ba0c5482" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if automatic collection is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cc2ac0c502014b48f46025706992e8c8303069d" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if both pathname arguments refer to the same file or directory. This is determined by the device number and i-node number and raises an exception if an &lt;a href=&quot;os#os.stat&quot;&gt;&lt;code&gt;os.stat()&lt;/code&gt;&lt;/a&gt; call on either pathname fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9674a80ecf3c4e73288695e34894818266635f6e" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if both the real and imaginary parts of &lt;em&gt;x&lt;/em&gt; are finite, and &lt;code&gt;False&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84f4da1ed3887e188d14f41af95b69328e530a87" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if cookie has the named cookie-attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac3123f2eefa65b44bd4446c28edfacfca4e836d" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if either the real or the imaginary part of &lt;em&gt;x&lt;/em&gt; is a NaN, and &lt;code&gt;False&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ea3723144f92864748951077e84de976e98cf3e" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if either the real or the imaginary part of &lt;em&gt;x&lt;/em&gt; is an infinity, and &lt;code&gt;False&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bba66cf40bcba9c8e8172f92735b82e8ce48a4c" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if its parameter is a dataclass or an instance of one, otherwise return &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b195f5ca2b0277617928c248a6e6b1607bebbac5" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if name binding introduces new namespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25f1562766109f2357ae9489ed0cdf66e3947c69" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if pathname &lt;em&gt;path&lt;/em&gt; is a &lt;em&gt;mount point&lt;/em&gt;: a point in a file system where a different file system has been mounted. On POSIX, the function checks whether &lt;em&gt;path&lt;/em&gt;&amp;rsquo;s parent, &lt;code&gt;&lt;em&gt;path&lt;/em&gt;/..&lt;/code&gt;, is on a different device than &lt;em&gt;path&lt;/em&gt;, or whether &lt;code&gt;&lt;em&gt;path&lt;/em&gt;/..&lt;/code&gt; and &lt;em&gt;path&lt;/em&gt; point to the same i-node on the same device &amp;mdash; this should detect mount points for all Unix and POSIX variants. It is not able to reliably detect bind mounts on the same filesystem. On Windows, a drive letter root and a share UNC are always mount points, and for any other path &lt;code&gt;GetVolumePathName&lt;/code&gt; is called to see if it is different from the input path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2e8be67bc6594919ef5dda4afcc87a85660b06e" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if pen is down, &lt;code&gt;False&lt;/code&gt; if it&amp;rsquo;s up.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="233df5d01c348d1977f999387824421590abecca" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if running on CPython, not on Windows, and configuration not set with &lt;code&gt;WITH_DOC_STRINGS&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1e671df625dc630f86e972bb438647272dd6b0e" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if socket is in blocking mode, &lt;code&gt;False&lt;/code&gt; if in non-blocking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="024e94a0c4f86b5f824872147dfdd5dbf780ecbb" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if string starts with the &lt;em&gt;prefix&lt;/em&gt;, otherwise return &lt;code&gt;False&lt;/code&gt;. &lt;em&gt;prefix&lt;/em&gt; can also be a tuple of prefixes to look for. With optional &lt;em&gt;start&lt;/em&gt;, test string beginning at that position. With optional &lt;em&gt;end&lt;/em&gt;, stop comparing string at that position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f64655e29ef5c69057690b8edee254534078c71" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if strings &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; are equal, otherwise &lt;code&gt;False&lt;/code&gt;, in such a way as to reduce the risk of &lt;a href=&quot;https://codahale.com/a-lesson-in-timing-attacks/&quot;&gt;timing attacks&lt;/a&gt;. See &lt;a href=&quot;hmac#hmac.compare_digest&quot;&gt;&lt;code&gt;hmac.compare_digest()&lt;/code&gt;&lt;/a&gt; for additional details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="416382c98e8cb009eb71fb8ed7325a915a8282a0" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the &lt;em&gt;context&lt;/em&gt; has a value for &lt;em&gt;var&lt;/em&gt; set; return &lt;code&gt;False&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb2b7f6077ac9ddcfabad53836b29d2e95cc0123" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the &lt;em&gt;object&lt;/em&gt; argument is an instance of the &lt;em&gt;classinfo&lt;/em&gt; argument, or of a (direct, indirect or &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-abstract-base-class&quot;&gt;virtual&lt;/a&gt;) subclass thereof. If &lt;em&gt;object&lt;/em&gt; is not an object of the given type, the function always returns &lt;code&gt;False&lt;/code&gt;. If &lt;em&gt;classinfo&lt;/em&gt; is a tuple of type objects (or recursively, other such tuples), return &lt;code&gt;True&lt;/code&gt; if &lt;em&gt;object&lt;/em&gt; is an instance of any of the types. If &lt;em&gt;classinfo&lt;/em&gt; is not a type or tuple of types and such tuples, a &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; exception is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="946b6e440e6563aef5f308641df0c902820df7db" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the Future is &lt;em&gt;done&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a36e714f535604a61c0b98c922807226f3b5ef26" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the Future was &lt;em&gt;cancelled&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afd13c887cb1e4054589e0f99ba7bc7dc0c23efe" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the OS supports symbolic links, &lt;code&gt;False&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7fa73558708cdd39a84d784cdccb26fe3e77f44" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the OS supports xattr, &lt;code&gt;False&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0738f68c4124a233fc1d65c48dc7ccdb03f8bb1f" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the SSL pseudo-random number generator has been seeded with &amp;lsquo;enough&amp;rsquo; randomness, and &lt;code&gt;False&lt;/code&gt; otherwise. You can use &lt;a href=&quot;#ssl.RAND_egd&quot;&gt;&lt;code&gt;ssl.RAND_egd()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#ssl.RAND_add&quot;&gt;&lt;code&gt;ssl.RAND_add()&lt;/code&gt;&lt;/a&gt; to increase the randomness of the pseudo-random number generator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a45d37d2fe67a5610d1dc89f1f444661be07ea8e" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the Task is &lt;em&gt;cancelled&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4deefb3f175ed9a524bcfc60e1ae5c9e5e106a0" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the Task is &lt;em&gt;done&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01febc0610b66c1393754b5305bac55d9f1f1cb5" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the Turtle is shown, &lt;code&gt;False&lt;/code&gt; if it&amp;rsquo;s hidden.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cd6fe21f3355fce0486fcfb13b3728fee17f9c8" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the Windows edition returned by &lt;a href=&quot;#platform.win32_edition&quot;&gt;&lt;code&gt;win32_edition()&lt;/code&gt;&lt;/a&gt; is recognized as an IoT edition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b6dc300080ef0aefa018fb531347b881a6625ba" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the binary data ends with the specified &lt;em&gt;suffix&lt;/em&gt;, otherwise return &lt;code&gt;False&lt;/code&gt;. &lt;em&gt;suffix&lt;/em&gt; can also be a tuple of suffixes to look for. With optional &lt;em&gt;start&lt;/em&gt;, test beginning at that position. With optional &lt;em&gt;end&lt;/em&gt;, stop comparing at that position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5280ffb5c686cc57f4b9f4025c1a24df8d277466" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the binary data starts with the specified &lt;em&gt;prefix&lt;/em&gt;, otherwise return &lt;code&gt;False&lt;/code&gt;. &lt;em&gt;prefix&lt;/em&gt; can also be a tuple of prefixes to look for. With optional &lt;em&gt;start&lt;/em&gt;, test beginning at that position. With optional &lt;em&gt;end&lt;/em&gt;, stop comparing at that position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="317c7030f4a1ba6e44c9e57e1efeecf8685ac29f" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the block has nested namespaces within it. These can be obtained with &lt;a href=&quot;#symtable.SymbolTable.get_children&quot;&gt;&lt;code&gt;get_children()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab991b840752a5503631df9f72ad98714597e0a3" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the block is a nested class or function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a2ca122782d6df631a87f90c1584e009f8d2418" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the block uses &lt;code&gt;exec&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2c985d17600cba113035b1275e7366496b1b25d" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the buffer is empty and &lt;code&gt;feed_eof()&lt;/code&gt; was called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ab290da09446169dd628c008272a92a91d8f7b6" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the buffer is up to capacity. This method can be overridden to implement custom flushing strategies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6f67f8833c2529318d2eac45c9ca007c285e67c" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the call is currently being executed and cannot be cancelled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b827fb97aa52a92d56d20904f9d9956203b81466" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the call was successfully cancelled or finished running.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a52df0f6e4edb37f59c125e25109af29db36b7df" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the call was successfully cancelled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3060a8b204e7cc1bbcfc6f985693f38687a6f224" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the callback was cancelled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d962cb4845a3404d9c1ba50d3cb0d0456dce252d" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the current context references a directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64b4c3b1c538b37700eeabb657a59ee28a6c5a9a" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the current context references a file or directory in the zip file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="388dff15884ed1203b7091ac5865ee69802ce782" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the current context references a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dde6804e47237603bfa32f32b2df2406bf247849" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the element has an attribute named by &lt;em&gt;name&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b361777e74f9561422369b4d220f2d6d6a172ef9" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the element has an attribute named by &lt;em&gt;namespaceURI&lt;/em&gt; and &lt;em&gt;localName&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="803037afef330da060f29f737c1a584b3e789010" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the event is set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c4f9a0386485e131e282882444699ae888afe11" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the event loop is closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbce230766563130bff0c7ae5252ac562117a9dd" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the event loop is currently running.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7be3d468d0f51c1b348c6ac8b30aa1f9a19d8c93" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the event loop is running.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67a8060c4cb8fceceb3feebf4dbf5c9e8b0b1408" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the event loop was closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eeda47e7e6194545f03f862246f96505dfd2c50" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the event queue is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88dc76d8a6f0cfba7f1df60f935891b4741b29fe" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the feature identified by the pair of strings &lt;em&gt;feature&lt;/em&gt; and &lt;em&gt;version&lt;/em&gt; is implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8effffeb8ba6a8648c53738d6fade8f75cf26a5" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the file descriptor &lt;em&gt;fd&lt;/em&gt; is open and connected to a tty(-like) device, else &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e8d64898cceab3c776d333f06d2ec876974eb0f" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the file descriptors &lt;em&gt;fp1&lt;/em&gt; and &lt;em&gt;fp2&lt;/em&gt; refer to the same file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69ba83ecda4af20cf29d10182699831c06d627b6" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the file system for &lt;em&gt;directory&lt;/em&gt; is case-insensitive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="754f371f3d7b0d48f0eb29fbe8cfc0780fe0baab" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the float instance is finite with integral value, and &lt;code&gt;False&lt;/code&gt; otherwise:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f28dd6a1f500c0dff956dbecbb38d62d0abb6ca" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the given integrity check is supported on this system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d70207760f1ba8579a4a85195f23c4c400f2e88" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the last line was read from &lt;code&gt;sys.stdin&lt;/code&gt;, otherwise return &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec0ebd9823fd01a8cb9f9fbebc6231d8fb361728" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the line just read is the first line of its file, otherwise return &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaea28b7cd854798ec1acb5331ab42abca8c144a" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the locals in this table can be optimized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e80ac2852d316967f0e38190133026fdd260262" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the lock is &lt;em&gt;locked&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ad753ef3d46d91e5defb9e376b956e1c30fa52f" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the message object has a field named &lt;em&gt;name&lt;/em&gt;. Matching is done case-insensitively and &lt;em&gt;name&lt;/em&gt; should not include the trailing colon. Used for the &lt;code&gt;in&lt;/code&gt; operator, e.g.:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ab6e934c35497ad5700dd522da421b535e6bfee" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the message object has a field named &lt;em&gt;name&lt;/em&gt;. Matching is done without regard to case and &lt;em&gt;name&lt;/em&gt; does not include the trailing colon. Used for the &lt;code&gt;in&lt;/code&gt; operator. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="813fe3c47deadddecf94a759b6d97eead72cf316" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the message&amp;rsquo;s payload is a list of sub-&lt;a href=&quot;#email.message.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; objects, otherwise return &lt;code&gt;False&lt;/code&gt;. When &lt;a href=&quot;#email.message.EmailMessage.is_multipart&quot;&gt;&lt;code&gt;is_multipart()&lt;/code&gt;&lt;/a&gt; returns &lt;code&gt;False&lt;/code&gt;, the payload should be a string object (which might be a CTE encoded binary payload). Note that &lt;a href=&quot;#email.message.EmailMessage.is_multipart&quot;&gt;&lt;code&gt;is_multipart()&lt;/code&gt;&lt;/a&gt; returning &lt;code&gt;True&lt;/code&gt; does not necessarily mean that &amp;ldquo;msg.get_content_maintype() == &amp;lsquo;multipart&amp;rsquo;&amp;rdquo; will return the &lt;code&gt;True&lt;/code&gt;. For example, &lt;code&gt;is_multipart&lt;/code&gt; will return &lt;code&gt;True&lt;/code&gt; when the &lt;a href=&quot;#email.message.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; is of type &lt;code&gt;message/rfc822&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb01e60f9b794c710d6f5ff81a2a0c287d007af1" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the message&amp;rsquo;s payload is a list of sub-&lt;a href=&quot;#email.message.Message&quot;&gt;&lt;code&gt;Message&lt;/code&gt;&lt;/a&gt; objects, otherwise return &lt;code&gt;False&lt;/code&gt;. When &lt;a href=&quot;#email.message.Message.is_multipart&quot;&gt;&lt;code&gt;is_multipart()&lt;/code&gt;&lt;/a&gt; returns &lt;code&gt;False&lt;/code&gt;, the payload should be a string object (which might be a CTE encoded binary payload). (Note that &lt;a href=&quot;#email.message.Message.is_multipart&quot;&gt;&lt;code&gt;is_multipart()&lt;/code&gt;&lt;/a&gt; returning &lt;code&gt;True&lt;/code&gt; does not necessarily mean that &amp;ldquo;msg.get_content_maintype() == &amp;lsquo;multipart&amp;rsquo;&amp;rdquo; will return the &lt;code&gt;True&lt;/code&gt;. For example, &lt;code&gt;is_multipart&lt;/code&gt; will return &lt;code&gt;True&lt;/code&gt; when the &lt;a href=&quot;#email.message.Message&quot;&gt;&lt;code&gt;Message&lt;/code&gt;&lt;/a&gt; is of type &lt;code&gt;message/rfc822&lt;/code&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="612c7a6dfbca4c39860f17766696a23f487a37a5" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the module specified by &lt;em&gt;fullname&lt;/em&gt; is a package. Raise &lt;a href=&quot;#zipimport.ZipImportError&quot;&gt;&lt;code&gt;ZipImportError&lt;/code&gt;&lt;/a&gt; if the module couldn&amp;rsquo;t be found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1017fa2989c546c0a297169d43fe0dbc24491027" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the node has any attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f37f2fbf4b833170bcbb22938ea6957e1c1a426c" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the node has any child nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b0a24bcbf158eec14d1912914f38370e5f6dc9d" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the object can be used in &lt;a href=&quot;https://docs.python.org/3.8/reference/expressions.html#await&quot;&gt;&lt;code&gt;await&lt;/code&gt;&lt;/a&gt; expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84a94f510472faaf2fdccfe4be7bec17d53e4ad4" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the object is a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-coroutine&quot;&gt;coroutine&lt;/a&gt; created by an &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#async-def&quot;&gt;&lt;code&gt;async def&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e49cdd044e3c96f756de9313ae6fd35395a89ef" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the object is a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-coroutine-function&quot;&gt;coroutine function&lt;/a&gt; (a function defined with an &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#async-def&quot;&gt;&lt;code&gt;async def&lt;/code&gt;&lt;/a&gt; syntax).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f500ea1719ab0fc3a14946a8d2a32a892a9b5db" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the object is a Python function, which includes functions created by a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-lambda&quot;&gt;lambda&lt;/a&gt; expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="493a3b7bb13b994772a705fe495e7b8ce5cb776c" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the object is a Python generator function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50eb7a291df64c7ff188bbd834209a0bb5b1eb3f" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the object is a bound method written in Python.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fe03755a06d2432a5bf344eb33331759993ebd0" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the object is a built-in function or a bound built-in method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a807200b2fc5a492eb9cecb7fd981c8a76a8392" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the object is a class, whether built-in or created in Python code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58169ae19160a7180104fa0fde33c944c83ef14d" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the object is a code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39e01cef77029dd6818c9ab7e114510595c45227" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the object is a data descriptor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01a01ab884f0cb951879ac2bacaecd8a6911aa49" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the object is a frame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="394b4ac03e886a34529ebd34e3fddc902c67dbc5" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the object is a generator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24e6fb864a790b635f71289fd9f8183118a6f4da" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the object is a getset descriptor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c46b54107a298212a17500715000d41e063c736" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the object is a member descriptor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b607199bc1689078ffb298b882d6319270a2b33" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the object is a method descriptor, but not if &lt;a href=&quot;#inspect.ismethod&quot;&gt;&lt;code&gt;ismethod()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#inspect.isclass&quot;&gt;&lt;code&gt;isclass()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#inspect.isfunction&quot;&gt;&lt;code&gt;isfunction()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#inspect.isbuiltin&quot;&gt;&lt;code&gt;isbuiltin()&lt;/code&gt;&lt;/a&gt; are true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="751ca282ae4e2eda7b7edbb6874656c849c97fe0" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the object is a module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a06537b0fda2fddcf149ce956dd829f32ac19a5" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the object is a traceback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1efb68187f81c1bc8515ded4e3e03a62e928c676" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the object is a user-defined or built-in function or method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ae6724b16f29070aa62f055061ea89666d48a9e" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the object is an &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-asynchronous-generator&quot;&gt;asynchronous generator&lt;/a&gt; function, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bad4f7008242f2b9e8e41348f0d8584eaeaed9d6" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the object is an &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-asynchronous-generator-iterator&quot;&gt;asynchronous generator iterator&lt;/a&gt; created by an &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-asynchronous-generator&quot;&gt;asynchronous generator&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a6271c1db7a23de904a5c8bbf6a5a054332a8b4" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the object is an abstract base class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b46162e51c2408b7c91f107bd12ed13de0b12f1f" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the path is a &lt;em&gt;mount point&lt;/em&gt;: a point in a file system where a different file system has been mounted. On POSIX, the function checks whether &lt;em&gt;path&lt;/em&gt;&amp;rsquo;s parent, &lt;code&gt;path/..&lt;/code&gt;, is on a different device than &lt;em&gt;path&lt;/em&gt;, or whether &lt;code&gt;path/..&lt;/code&gt; and &lt;em&gt;path&lt;/em&gt; point to the same i-node on the same device &amp;mdash; this should detect mount points for all Unix and POSIX variants. Not implemented on Windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9afb4535b3729c6d0e0d6a0b2e494436d5f60a5d" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the path points to a FIFO (or a symbolic link pointing to a FIFO), &lt;code&gt;False&lt;/code&gt; if it points to another kind of file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4feba85341547ec9c8d7c9af03a8598464150c98" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the path points to a Unix socket (or a symbolic link pointing to a Unix socket), &lt;code&gt;False&lt;/code&gt; if it points to another kind of file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="439e7378cd7ac16b088615c73bd4a2778cd5a08d" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the path points to a block device (or a symbolic link pointing to a block device), &lt;code&gt;False&lt;/code&gt; if it points to another kind of file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9311da5b7ba2195f760f72908e165d4a1b0c0ed2" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the path points to a character device (or a symbolic link pointing to a character device), &lt;code&gt;False&lt;/code&gt; if it points to another kind of file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddbf12b558df21f01b66142e1fb107f5d0e7ffbf" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the path points to a directory (or a symbolic link pointing to a directory), &lt;code&gt;False&lt;/code&gt; if it points to another kind of file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc85a37c5205530c84af526e8c77c2fee451f53d" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the path points to a regular file (or a symbolic link pointing to a regular file), &lt;code&gt;False&lt;/code&gt; if it points to another kind of file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9e266e5a48dfbecf6157f1cd37018bb0aafb78b" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the path points to a symbolic link, &lt;code&gt;False&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3e7bcc41f3cb8dafc03ff7e8dfd7f64a7697efb" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the platform supports creating a TCP socket which can handle both IPv4 and IPv6 connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d19aacc1433bcd8b6c1d1bf2186f75c53e140b17" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the process exited due to a signal, otherwise return &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2371ef6d7070d0a2c3ed3aab8cec347fb88ac404" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the process exited using the &lt;em&gt;&lt;a href=&quot;https://manpages.debian.org/exit(2)&quot;&gt;exit(2)&lt;/a&gt;&lt;/em&gt; system call, otherwise return &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="763539194ddc657f8bfce35a306055e760b7ff85" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the process has been continued from a job control stop, otherwise return &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7913ec047e68c7feb894081fe76b43214c269d2" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the process has been stopped, otherwise return &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="855aa7ee3f6e65cc92d89f0b17b3352a871f61f4" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the queue is empty, &lt;code&gt;False&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35c7d0e384e2716ecb27e9199ee25c2ca9cc9d7a" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the queue is empty, &lt;code&gt;False&lt;/code&gt; otherwise. Because of multithreading/multiprocessing semantics, this is not reliable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a57ebcf9dc9ed75c53f591ee149aa51b9221f370" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the queue is empty, &lt;code&gt;False&lt;/code&gt; otherwise. If empty() returns &lt;code&gt;False&lt;/code&gt; it doesn&amp;rsquo;t guarantee that a subsequent call to get() will not block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af743a93284dc926521a9b2024450cd320a56553" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the queue is empty, &lt;code&gt;False&lt;/code&gt; otherwise. If empty() returns &lt;code&gt;True&lt;/code&gt; it doesn&amp;rsquo;t guarantee that a subsequent call to put() will not block. Similarly, if empty() returns &lt;code&gt;False&lt;/code&gt; it doesn&amp;rsquo;t guarantee that a subsequent call to get() will not block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a083c22e4730e61a008e8b51fd350e5a35f29a33" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the queue is full, &lt;code&gt;False&lt;/code&gt; otherwise. Because of multithreading/multiprocessing semantics, this is not reliable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56a9d78ad430b09aab4fd452037022d01388fe62" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the queue is full, &lt;code&gt;False&lt;/code&gt; otherwise. If full() returns &lt;code&gt;True&lt;/code&gt; it doesn&amp;rsquo;t guarantee that a subsequent call to get() will not block. Similarly, if full() returns &lt;code&gt;False&lt;/code&gt; it doesn&amp;rsquo;t guarantee that a subsequent call to put() will not block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ecf2eb7b47c96f882f9b60ec2ec345615a893a1" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the running Python interpreter was built from source and is being run from its built location, and not from a location resulting from e.g. running &lt;code&gt;make install&lt;/code&gt; or installing via a binary installer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be82ab611cee8c587ebd3768e948745898d97e2e" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the sequence is ASCII titlecase and the sequence is not empty, &lt;code&gt;False&lt;/code&gt; otherwise. See &lt;a href=&quot;#bytes.title&quot;&gt;&lt;code&gt;bytes.title()&lt;/code&gt;&lt;/a&gt; for more details on the definition of &amp;ldquo;titlecase&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c5355077e152a91d7bf3bceb1a280251d1b2a80" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the sequence is empty or all bytes in the sequence are ASCII, &lt;code&gt;False&lt;/code&gt; otherwise. ASCII bytes are in the range 0-0x7F.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfca89450a817b071865e033557c72136d570473" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the server is accepting new connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41467de2c92a8f2c8121cebc6c6c828a19a0bd3f" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;True&lt;/code&gt; if the set has no elements in common with &lt;em&gt;other&lt;/em&gt;. Sets are disjoint if and only if their intersection is the empty set.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
