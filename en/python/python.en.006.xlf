<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="en" datatype="htmlbody" original="python">
    <body>
      <group id="python">
        <trans-unit id="3d12838d2902df351d82539f77e5196fe220e18b" translate="yes" xml:space="preserve">
          <source>Boolean value. If &lt;code&gt;True&lt;/code&gt;, increment and decrement buttons will cycle from the &lt;code&gt;to&lt;/code&gt; value to the &lt;code&gt;from&lt;/code&gt; value or the &lt;code&gt;from&lt;/code&gt; value to the &lt;code&gt;to&lt;/code&gt; value, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9245a6ae2d0c51a552e5f3f9fc78c7e345278524" translate="yes" xml:space="preserve">
          <source>Boolean value. If set, the widget selection is linked to the Window Manager selection (which can be returned by invoking Misc.selection_get, for example).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fa9e93e36190ed14338b888b01919ba853c4130" translate="yes" xml:space="preserve">
          <source>Boolean values are the two constant objects &lt;code&gt;False&lt;/code&gt; and &lt;code&gt;True&lt;/code&gt;. They are used to represent truth values (although other values can also be considered false or true). In numeric contexts (for example when used as the argument to an arithmetic operator), they behave like the integers 0 and 1, respectively. The built-in function &lt;a href=&quot;functions#bool&quot;&gt;&lt;code&gt;bool()&lt;/code&gt;&lt;/a&gt; can be used to convert any value to a Boolean, if the value can be interpreted as a truth value (see section &lt;a href=&quot;#truth&quot;&gt;Truth Value Testing&lt;/a&gt; above).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d18c0bfba1757c5e30d0bc7a733fee5173697958" translate="yes" xml:space="preserve">
          <source>Boolean, &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="720fd7e99ee4b1def571b8830a99782dae891a6d" translate="yes" xml:space="preserve">
          <source>Bootstraps &lt;code&gt;pip&lt;/code&gt; into the current or designated environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71d8f86363b63766bbf05a4f680a13a4e028d724" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;#asyncio.create_subprocess_exec&quot;&gt;&lt;code&gt;create_subprocess_exec()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#asyncio.create_subprocess_shell&quot;&gt;&lt;code&gt;create_subprocess_shell()&lt;/code&gt;&lt;/a&gt; functions return instances of the &lt;em&gt;Process&lt;/em&gt; class. &lt;em&gt;Process&lt;/em&gt; is a high-level wrapper that allows communicating with subprocesses and watching for their completion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0678a3c848604f505fcb4b2ec36b17b684c82040" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;#patch&quot;&gt;patch&lt;/a&gt; and &lt;a href=&quot;#patch-object&quot;&gt;patch.object&lt;/a&gt; correctly patch and restore descriptors: class methods, static methods and properties. You should patch these on the &lt;em&gt;class&lt;/em&gt; rather than an instance. They also work with &lt;em&gt;some&lt;/em&gt; objects that proxy attribute access, like the &lt;a href=&quot;http://www.voidspace.org.uk/python/weblog/arch_d7_2010_12_04.shtml#e1198&quot;&gt;django settings object&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76150bda2b159ac2e4297d9994115a0259b6b98e" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;#set&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#frozenset&quot;&gt;&lt;code&gt;frozenset&lt;/code&gt;&lt;/a&gt; support set to set comparisons. Two sets are equal if and only if every element of each set is contained in the other (each is a subset of the other). A set is less than another set if and only if the first set is a proper subset of the second set (is a subset, but is not equal). A set is greater than another set if and only if the first set is a proper superset of the second set (is a superset, but is not equal).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da97eda7ef7c14e12c43a76638620729271ea928" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;functions#getattr&quot;&gt;&lt;code&gt;getattr()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;functions#hasattr&quot;&gt;&lt;code&gt;hasattr()&lt;/code&gt;&lt;/a&gt; can trigger code execution when fetching or checking for the existence of attributes. Descriptors, like properties, will be invoked and &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getattr__&quot;&gt;&lt;code&gt;__getattr__()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getattribute__&quot;&gt;&lt;code&gt;__getattribute__()&lt;/code&gt;&lt;/a&gt; may be called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc6402ce03954c13678974692e26ec34f0d6f91d" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;https://tools.ietf.org/html/rfc2965.html&quot; id=&quot;index-14&quot;&gt;&lt;strong&gt;RFC 2965&lt;/strong&gt;&lt;/a&gt; and Netscape cookies are covered. RFC 2965 handling is switched off by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70830bd6073fa55b1bb77c2a936de0cd6ec08ac0" translate="yes" xml:space="preserve">
          <source>Both &lt;em&gt;input_charset&lt;/em&gt; and &lt;em&gt;output_charset&lt;/em&gt; must have Unicode codec entries in the module&amp;rsquo;s character set-to-codec mapping; use &lt;a href=&quot;#email.charset.add_codec&quot;&gt;&lt;code&gt;add_codec()&lt;/code&gt;&lt;/a&gt; to add codecs the module does not know about. See the &lt;a href=&quot;codecs#module-codecs&quot;&gt;&lt;code&gt;codecs&lt;/code&gt;&lt;/a&gt; module&amp;rsquo;s documentation for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ead411397e614cee6d46ba321f1ee1902f0d3551" translate="yes" xml:space="preserve">
          <source>Both binary and decimal floating point are implemented in terms of published standards. While the built-in float type exposes only a modest portion of its capabilities, the decimal module exposes all required parts of the standard. When needed, the programmer has full control over rounding and signal handling. This includes an option to enforce exact arithmetic by using exceptions to block any inexact operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="412827b4525eb3aa564b3e476acee9a6c164827a" translate="yes" xml:space="preserve">
          <source>Both bytes and bytearray objects support the &lt;a href=&quot;#typesseq-common&quot;&gt;common&lt;/a&gt; sequence operations. They interoperate not just with operands of the same type, but with any &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;. Due to this flexibility, they can be freely mixed in operations without causing errors. However, the return type of the result may depend on the order of operands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="906dcaa49ef8791b7ba8c7a06dc1b0bb61aebfb9" translate="yes" xml:space="preserve">
          <source>Both functions return a &lt;code&gt;Document&lt;/code&gt; object representing the content of the document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9308f7b7021d711fb78ce76e026ff4c70b252ac9" translate="yes" xml:space="preserve">
          <source>Both of these factory functions are called with the result type as first argument, and the callback functions expected argument types as the remaining arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e40771c73ac3142db1cd6a2924473530d9c63415" translate="yes" xml:space="preserve">
          <source>Both patterns and strings to be searched can be Unicode strings (&lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;) as well as 8-bit strings (&lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;). However, Unicode strings and 8-bit strings cannot be mixed: that is, you cannot match a Unicode string with a byte pattern or vice-versa; similarly, when asking for a substitution, the replacement string must be of the same type as both the pattern and the search string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60524711bf7cd6ddd3a6f75407a2f25953c838b6" translate="yes" xml:space="preserve">
          <source>Both the &lt;a href=&quot;#module-profile&quot;&gt;&lt;code&gt;profile&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#module-cProfile&quot;&gt;&lt;code&gt;cProfile&lt;/code&gt;&lt;/a&gt; modules provide the following functions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8fa6107edcf0d7fe5de5f35cf96f9376975a492" translate="yes" xml:space="preserve">
          <source>Both the HTTP and HTTPS transports support the URL syntax extension for HTTP Basic Authentication: &lt;code&gt;http://user:pass@host:port/path&lt;/code&gt;. The &lt;code&gt;user:pass&lt;/code&gt; portion will be base64-encoded as an HTTP &amp;lsquo;Authorization&amp;rsquo; header, and sent to the remote server as part of the connection process when invoking an XML-RPC method. You only need to use this if the remote server requires a Basic Authentication user and password. If an HTTPS URL is provided, &lt;em&gt;context&lt;/em&gt; may be &lt;a href=&quot;ssl#ssl.SSLContext&quot;&gt;&lt;code&gt;ssl.SSLContext&lt;/code&gt;&lt;/a&gt; and configures the SSL settings of the underlying HTTPS connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1cca2d2cf2cc882468f5dfa827706c1805375d8" translate="yes" xml:space="preserve">
          <source>Both the regular Netscape cookie protocol and the protocol defined by &lt;a href=&quot;https://tools.ietf.org/html/rfc2965.html&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 2965&lt;/strong&gt;&lt;/a&gt; are handled. RFC 2965 handling is switched off by default. &lt;a href=&quot;https://tools.ietf.org/html/rfc2109.html&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;RFC 2109&lt;/strong&gt;&lt;/a&gt; cookies are parsed as Netscape cookies and subsequently treated either as Netscape or RFC 2965 cookies according to the &amp;lsquo;policy&amp;rsquo; in effect. Note that the great majority of cookies on the Internet are Netscape cookies. &lt;a href=&quot;#module-http.cookiejar&quot;&gt;&lt;code&gt;http.cookiejar&lt;/code&gt;&lt;/a&gt; attempts to follow the de-facto Netscape cookie protocol (which differs substantially from that set out in the original Netscape specification), including taking note of the &lt;code&gt;max-age&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt; cookie-attributes introduced with RFC 2965.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dbcf66e0e3c0a5508b03432a2f3df368782d85e" translate="yes" xml:space="preserve">
          <source>Both ways are described in section &lt;a href=&quot;#sqlite3-module-contents&quot;&gt;Module functions and constants&lt;/a&gt;, in the entries for the constants &lt;a href=&quot;#sqlite3.PARSE_DECLTYPES&quot;&gt;&lt;code&gt;PARSE_DECLTYPES&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#sqlite3.PARSE_COLNAMES&quot;&gt;&lt;code&gt;PARSE_COLNAMES&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cce7f2f2f0dc525117a70d581d9c335212145e5b" translate="yes" xml:space="preserve">
          <source>Bottom</source>
          <target state="translated">Bottom</target>
        </trans-unit>
        <trans-unit id="e1dbd823dfdfc2d17617830a8f74f4d932681cc4" translate="yes" xml:space="preserve">
          <source>Bottom-left corner</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80aa1874eb99dccda2276381f9f4ffdec7143eaf" translate="yes" xml:space="preserve">
          <source>Bottom-right corner</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2e002ea925c38ed1d57bf37ef5d40426841b702" translate="yes" xml:space="preserve">
          <source>Bounded Semaphore is a version of &lt;a href=&quot;#asyncio.Semaphore&quot;&gt;&lt;code&gt;Semaphore&lt;/code&gt;&lt;/a&gt; that raises a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; in &lt;a href=&quot;#asyncio.Semaphore.release&quot;&gt;&lt;code&gt;release()&lt;/code&gt;&lt;/a&gt; if it increases the internal counter above the initial &lt;em&gt;value&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f27d46d2bc64f4ff7fc02b97b058167483c819b5" translate="yes" xml:space="preserve">
          <source>Bounded length deques provide functionality similar to the &lt;code&gt;tail&lt;/code&gt; filter in Unix:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2756e8ad9a82c890a07dc2ba959f75c6165deec" translate="yes" xml:space="preserve">
          <source>BoundedSemaphore</source>
          <target state="translated">BoundedSemaphore</target>
        </trans-unit>
        <trans-unit id="db506c7b5783724a0ae667647def25dde4ac8c16" translate="yes" xml:space="preserve">
          <source>Branch-Call-Jump (BCJ) filters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6818e738c2b21bdaaa174d945a5a8d955f9b4660" translate="yes" xml:space="preserve">
          <source>Break internal references within the DOM so that it will be garbage collected on versions of Python without cyclic GC. Even when cyclic GC is available, using this can make large amounts of memory available sooner, so calling this on DOM objects as soon as they are no longer needed is good practice. This only needs to be called on the &lt;code&gt;Document&lt;/code&gt; object, but may be called on child nodes to discard children of that node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="057f53976b47c840e7d4ea51556fe76a4983b160" translate="yes" xml:space="preserve">
          <source>Break key (unreliable)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26d339cfcc10acc619584ccfcecd8aee58a08229" translate="yes" xml:space="preserve">
          <source>Breakpoints are indexed by number through a list called &lt;code&gt;bpbynumber&lt;/code&gt; and by &lt;code&gt;(file, line)&lt;/code&gt; pairs through &lt;code&gt;bplist&lt;/code&gt;. The former points to a single instance of class &lt;a href=&quot;#bdb.Breakpoint&quot;&gt;&lt;code&gt;Breakpoint&lt;/code&gt;&lt;/a&gt;. The latter points to a list of such instances since there may be more than one breakpoint per line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b10a6960c4012f359c0ce6bee9b19ff172792a7d" translate="yes" xml:space="preserve">
          <source>Brent Welch&amp;rsquo;s encyclopedic book.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5457d94057ed4418eb771b358e421dae5522d307" translate="yes" xml:space="preserve">
          <source>Broadly speaking, &lt;code&gt;d.strftime(fmt)&lt;/code&gt; acts like the &lt;a href=&quot;time#module-time&quot;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; module&amp;rsquo;s &lt;code&gt;time.strftime(fmt, d.timetuple())&lt;/code&gt; although not all objects support a &lt;code&gt;timetuple()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7dfd8323fd5e72ce649953eb9bbb100abdbf328" translate="yes" xml:space="preserve">
          <source>Broken pipe</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46eaefda847b8f294ab091c272ac7c3caec75b7d" translate="yes" xml:space="preserve">
          <source>BrokenPipeError</source>
          <target state="translated">BrokenPipeError</target>
        </trans-unit>
        <trans-unit id="65cda754ede1327c252b27907e2e257c94decd6f" translate="yes" xml:space="preserve">
          <source>Browser Controller Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a327e47ded8f65f6d258b4a730e569ee168be6db" translate="yes" xml:space="preserve">
          <source>Browser controllers provide these methods which parallel three of the module-level convenience functions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52b12a6415af8c93a85ddb213e23fb21922c5ef9" translate="yes" xml:space="preserve">
          <source>Buffer size in bytes for sending a file-like message body.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25d5353daf56aa3d45af53312311f4d3864fffdd" translate="yes" xml:space="preserve">
          <source>Buffer the bytes &lt;em&gt;data&lt;/em&gt; for transmission to the client. It&amp;rsquo;s okay if this method actually transmits the data; &lt;a href=&quot;#wsgiref.handlers.BaseHandler&quot;&gt;&lt;code&gt;BaseHandler&lt;/code&gt;&lt;/a&gt; just separates write and flush operations for greater efficiency when the underlying system actually has such a distinction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="686e3ac1e8c5ee3c1c5629d53729cf9e049cd6ce" translate="yes" xml:space="preserve">
          <source>BufferError</source>
          <target state="translated">BufferError</target>
        </trans-unit>
        <trans-unit id="c7b39b7a30837e3319a6b2c6ed8a735c8561e2c6" translate="yes" xml:space="preserve">
          <source>Buffered I/O streams provide a higher-level interface to an I/O device than raw I/O does.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="959e8e27a1a7517d9d6fea8d34bd9b957b635286" translate="yes" xml:space="preserve">
          <source>Buffered Protocols can be used with any event loop method that supports &lt;a href=&quot;#streaming-protocols&quot;&gt;Streaming Protocols&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="574102792f7c7c7e47baae36d954590700cb065f" translate="yes" xml:space="preserve">
          <source>Buffered Streaming Protocols</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b311ee6c0f812e0972743c0b62829df0f807921a" translate="yes" xml:space="preserve">
          <source>Buffered Streams</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8eea1b80ba437eb2c7d9d8e4a7a1c0c36ddce4e" translate="yes" xml:space="preserve">
          <source>Bugs</source>
          <target state="translated">Bugs</target>
        </trans-unit>
        <trans-unit id="e2a08d31bdd8d081756ba38c56ba4d641e93dc37" translate="yes" xml:space="preserve">
          <source>Build a pair of connected socket objects using the given address family, socket type, and protocol number. Address family, socket type, and protocol number are as for the &lt;a href=&quot;#socket.socket&quot;&gt;&lt;code&gt;socket()&lt;/code&gt;&lt;/a&gt; function above. The default family is &lt;a href=&quot;#socket.AF_UNIX&quot;&gt;&lt;code&gt;AF_UNIX&lt;/code&gt;&lt;/a&gt; if defined on the platform; otherwise, the default is &lt;a href=&quot;#socket.AF_INET&quot;&gt;&lt;code&gt;AF_INET&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e9656b5fcacde2351e066c227427c3e012c98d2" translate="yes" xml:space="preserve">
          <source>Building XML documents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd6340131dc0513bc11d497bc3d1cf2f8b579961" translate="yes" xml:space="preserve">
          <source>Built-in Constants</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82e330488e4f4db6f630ff4b0e83b77d370d478e" translate="yes" xml:space="preserve">
          <source>Built-in Exceptions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2c05904ba07a6ff264de1d75f78c6ff5dce9860" translate="yes" xml:space="preserve">
          <source>Built-in Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9383071c87bb3c0b8b13c806952ce07e9c48a3bd" translate="yes" xml:space="preserve">
          <source>Built-in Types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2f9b8a4a5c37edcd59988672dfcfd3c6c2d4a94" translate="yes" xml:space="preserve">
          <source>Bulgarian, Byelorussian, Macedonian, Russian, Serbian</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f07f4711cba2866b61759ea0e7b48922ec7fe786" translate="yes" xml:space="preserve">
          <source>But for strings with more than &lt;code&gt;sys.float_info.dig&lt;/code&gt; significant digits, this isn&amp;rsquo;t always true:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="004c5cf93a775636561b365abba996971a9aedc3" translate="yes" xml:space="preserve">
          <source>But if we pass a &lt;em&gt;buffer_callback&lt;/em&gt; and then give back the accumulated buffers when unserializing, we are able to get back the original object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9a6dc0dea2456e6fdbe63316e135e168e69bbbc" translate="yes" xml:space="preserve">
          <source>But this is allowed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a6147a8ef54b0c6f733b2e259793dcd5ecdd996" translate="yes" xml:space="preserve">
          <source>By &amp;ldquo;installed package&amp;rdquo; we generally mean a third-party package installed into Python&amp;rsquo;s &lt;code&gt;site-packages&lt;/code&gt; directory via tools such as &lt;a href=&quot;https://pypi.org/project/pip/&quot;&gt;pip&lt;/a&gt;. Specifically, it means a package with either a discoverable &lt;code&gt;dist-info&lt;/code&gt; or &lt;code&gt;egg-info&lt;/code&gt; directory, and metadata defined by &lt;a href=&quot;https://www.python.org/dev/peps/pep-0566/&quot;&gt;PEP 566&lt;/a&gt; or its older specifications. By default, package metadata can live on the file system or in zip archives on &lt;code&gt;sys.path&lt;/code&gt;. Through an extension mechanism, the metadata can live almost anywhere.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb6eed428fae77be28a2a3bf7fc36fab40ed7e17" translate="yes" xml:space="preserve">
          <source>By combining together these and similar commands, intricate shapes and pictures can easily be drawn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="286ee8278fd8ab4e0bb68f3b03113179bc8da4c6" translate="yes" xml:space="preserve">
          <source>By contrast, if you create the SSL context by calling the &lt;a href=&quot;#ssl.SSLContext&quot;&gt;&lt;code&gt;SSLContext&lt;/code&gt;&lt;/a&gt; constructor yourself, it will not have certificate validation nor hostname checking enabled by default. If you do so, please read the paragraphs below to achieve a good security level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4925b83b2b2b23aaf1c66fff18b8c0029cc678e1" translate="yes" xml:space="preserve">
          <source>By default &lt;a href=&quot;#module-shutil&quot;&gt;&lt;code&gt;shutil&lt;/code&gt;&lt;/a&gt; provides these formats:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a442e6847fcb81d8e12f5ccd5522ffb613f8b302" translate="yes" xml:space="preserve">
          <source>By default &lt;a href=&quot;#unittest.mock.patch&quot;&gt;&lt;code&gt;patch()&lt;/code&gt;&lt;/a&gt; will fail to replace attributes that don&amp;rsquo;t exist. If you pass in &lt;code&gt;create=True&lt;/code&gt;, and the attribute doesn&amp;rsquo;t exist, patch will create the attribute for you when the patched function is called, and delete it again after the patched function has exited. This is useful for writing tests against attributes that your production code creates at runtime. It is off by default because it can be dangerous. With it switched on you can write passing tests against APIs that don&amp;rsquo;t actually exist!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e11f6ec8c72c6430bc9c389fb2edfddc8c054485" translate="yes" xml:space="preserve">
          <source>By default Unicode alphanumerics are the ones used in Unicode patterns, but this can be changed by using the &lt;a href=&quot;#re.ASCII&quot;&gt;&lt;code&gt;ASCII&lt;/code&gt;&lt;/a&gt; flag. Word boundaries are determined by the current locale if the &lt;a href=&quot;#re.LOCALE&quot;&gt;&lt;code&gt;LOCALE&lt;/code&gt;&lt;/a&gt; flag is used. Inside a character range, &lt;code&gt;\b&lt;/code&gt; represents the backspace character, for compatibility with Python&amp;rsquo;s string literals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a555dcde94361baeb4a969d6e2aba5d45aab6d18" translate="yes" xml:space="preserve">
          <source>By default all tasks for the current event loop are returned. If &lt;em&gt;loop&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt;, the &lt;a href=&quot;asyncio-eventloop#asyncio.get_event_loop&quot;&gt;&lt;code&gt;get_event_loop()&lt;/code&gt;&lt;/a&gt; function is used to get the current loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="348aa774128c8876086cc6859a2d1a237faf35da" translate="yes" xml:space="preserve">
          <source>By default asyncio is configured to use &lt;a href=&quot;#asyncio.SelectorEventLoop&quot;&gt;&lt;code&gt;SelectorEventLoop&lt;/code&gt;&lt;/a&gt; on Unix and &lt;a href=&quot;#asyncio.ProactorEventLoop&quot;&gt;&lt;code&gt;ProactorEventLoop&lt;/code&gt;&lt;/a&gt; on Windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbe8db946f6c4039aedf3337f510e5fb4d84a3b8" translate="yes" xml:space="preserve">
          <source>By default asyncio runs in production mode. In order to ease the development asyncio has a &lt;em&gt;debug mode&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2d0e2958afe24ad181976d5e62c588dde7221db" translate="yes" xml:space="preserve">
          <source>By default functions are assumed to return the C &lt;code&gt;int&lt;/code&gt; type. Other return types can be specified by setting the &lt;code&gt;restype&lt;/code&gt; attribute of the function object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83606b363ba65c4bdc94a570461388ab6e60c908" translate="yes" xml:space="preserve">
          <source>By default if a process is not the creator of the queue then on exit it will attempt to join the queue&amp;rsquo;s background thread. The process can call &lt;a href=&quot;#multiprocessing.Queue.cancel_join_thread&quot;&gt;&lt;code&gt;cancel_join_thread()&lt;/code&gt;&lt;/a&gt; to make &lt;a href=&quot;#multiprocessing.Queue.join_thread&quot;&gt;&lt;code&gt;join_thread()&lt;/code&gt;&lt;/a&gt; do nothing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2235fc8bdd0df529b51b9b98a249362b87248fd8" translate="yes" xml:space="preserve">
          <source>By default many of the protocol methods are required to return objects of a specific type. These methods are preconfigured with a default return value, so that they can be used without you having to do anything if you aren&amp;rsquo;t interested in the return value. You can still &lt;em&gt;set&lt;/em&gt; the return value manually if you want to change the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47e5ba4cdbf45dc6469e9b93a83211483f2c3df3" translate="yes" xml:space="preserve">
          <source>By default this runner shows &lt;a href=&quot;exceptions#DeprecationWarning&quot;&gt;&lt;code&gt;DeprecationWarning&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;exceptions#PendingDeprecationWarning&quot;&gt;&lt;code&gt;PendingDeprecationWarning&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;exceptions#ResourceWarning&quot;&gt;&lt;code&gt;ResourceWarning&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;exceptions#ImportWarning&quot;&gt;&lt;code&gt;ImportWarning&lt;/code&gt;&lt;/a&gt; even if they are &lt;a href=&quot;warnings#warning-ignored&quot;&gt;ignored by default&lt;/a&gt;. Deprecation warnings caused by &lt;a href=&quot;#deprecated-aliases&quot;&gt;deprecated unittest methods&lt;/a&gt; are also special-cased and, when the warning filters are &lt;code&gt;'default'&lt;/code&gt; or &lt;code&gt;'always'&lt;/code&gt;, they will appear only once per-module, in order to avoid too many warning messages. This behavior can be overridden using Python&amp;rsquo;s &lt;code&gt;-Wd&lt;/code&gt; or &lt;code&gt;-Wa&lt;/code&gt; options (see &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#using-on-warnings&quot;&gt;Warning control&lt;/a&gt;) and leaving &lt;em&gt;warnings&lt;/em&gt; to &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ae01e3d2789afe7d1a9556247cf9d3863cbe4da" translate="yes" xml:space="preserve">
          <source>By default this skips private attributes beginning with &amp;lsquo;_&amp;rsquo; but includes all magic methods, i.e. those starting and ending in &amp;lsquo;__&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52f7dbe5b41ae8611a2810a429a49fbad90c7410" translate="yes" xml:space="preserve">
          <source>By default when using &lt;a href=&quot;#configparser.ConfigParser.getboolean&quot;&gt;&lt;code&gt;getboolean()&lt;/code&gt;&lt;/a&gt;, config parsers consider the following values &lt;code&gt;True&lt;/code&gt;: &lt;code&gt;'1'&lt;/code&gt;, &lt;code&gt;'yes'&lt;/code&gt;, &lt;code&gt;'true'&lt;/code&gt;, &lt;code&gt;'on'&lt;/code&gt; and the following values &lt;code&gt;False&lt;/code&gt;: &lt;code&gt;'0'&lt;/code&gt;, &lt;code&gt;'no'&lt;/code&gt;, &lt;code&gt;'false'&lt;/code&gt;, &lt;code&gt;'off'&lt;/code&gt;. You can override this by specifying a custom dictionary of strings and their Boolean outcomes. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21b2fa9e8bd653d25936c1ef6f64b883a8409f29" translate="yes" xml:space="preserve">
          <source>By default you will not get any tracebacks in user-defined functions, aggregates, converters, authorizer callbacks etc. If you want to debug them, you can call this function with &lt;em&gt;flag&lt;/em&gt; set to &lt;code&gt;True&lt;/code&gt;. Afterwards, you will get tracebacks from callbacks on &lt;code&gt;sys.stderr&lt;/code&gt;. Use &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt; to disable the feature again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f132014d689a5cf73b7e430ffb2dcd6bdf06fb85" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;#argparse.ArgumentParser&quot;&gt;&lt;code&gt;ArgumentParser&lt;/code&gt;&lt;/a&gt; calculates the usage message from the arguments it contains:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="024605f88e757d67ce6f6e4fd5acb4d11c9a071b" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;#argparse.ArgumentParser&quot;&gt;&lt;code&gt;ArgumentParser&lt;/code&gt;&lt;/a&gt; groups command-line arguments into &amp;ldquo;positional arguments&amp;rdquo; and &amp;ldquo;optional arguments&amp;rdquo; when displaying help messages. When there is a better conceptual grouping of arguments than this default one, appropriate groups can be created using the &lt;a href=&quot;#argparse.ArgumentParser.add_argument_group&quot;&gt;&lt;code&gt;add_argument_group()&lt;/code&gt;&lt;/a&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32cb386527e775896cd057a28fa7c4bd40470da8" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;#argparse.ArgumentParser&quot;&gt;&lt;code&gt;ArgumentParser&lt;/code&gt;&lt;/a&gt; objects read command-line arguments in as simple strings. However, quite often the command-line string should instead be interpreted as another type, like a &lt;a href=&quot;functions#float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;type&lt;/code&gt; keyword argument of &lt;a href=&quot;#argparse.ArgumentParser.add_argument&quot;&gt;&lt;code&gt;add_argument()&lt;/code&gt;&lt;/a&gt; allows any necessary type-checking and type conversions to be performed. Common built-in types and functions can be used directly as the value of the &lt;code&gt;type&lt;/code&gt; argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94b437bedcb22203818d42f82de4da353c13eba3" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;#argparse.ArgumentParser&quot;&gt;&lt;code&gt;ArgumentParser&lt;/code&gt;&lt;/a&gt; objects use &lt;code&gt;sys.argv[0]&lt;/code&gt; to determine how to display the name of the program in help messages. This default is almost always desirable because it will make the help messages match how the program was invoked on the command line. For example, consider a file named &lt;code&gt;myprogram.py&lt;/code&gt; with the following code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb58169c2afcd07d3793490e9bfb11ff16d131cb" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;#dataclasses.dataclass&quot;&gt;&lt;code&gt;dataclass()&lt;/code&gt;&lt;/a&gt; will not implicitly add a &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__hash__&quot;&gt;&lt;code&gt;__hash__()&lt;/code&gt;&lt;/a&gt; method unless it is safe to do so. Neither will it add or change an existing explicitly defined &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__hash__&quot;&gt;&lt;code&gt;__hash__()&lt;/code&gt;&lt;/a&gt; method. Setting the class attribute &lt;code&gt;__hash__ = None&lt;/code&gt; has a specific meaning to Python, as described in the &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__hash__&quot;&gt;&lt;code&gt;__hash__()&lt;/code&gt;&lt;/a&gt; documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddd4450bf8d89a24f78314fc96e96f3a51a2cfe1" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;#doctest.testfile&quot;&gt;&lt;code&gt;testfile()&lt;/code&gt;&lt;/a&gt; looks for files in the calling module&amp;rsquo;s directory. See section &lt;a href=&quot;#doctest-basic-api&quot;&gt;Basic API&lt;/a&gt; for a description of the optional arguments that can be used to tell it to look for files in other locations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f5935e8f63ee8aab7d9c10c622d79fc87c370ea" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;#os.walk&quot;&gt;&lt;code&gt;walk()&lt;/code&gt;&lt;/a&gt; will not walk down into symbolic links that resolve to directories. Set &lt;em&gt;followlinks&lt;/em&gt; to &lt;code&gt;True&lt;/code&gt; to visit directories pointed to by symlinks, on systems that support them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc029c94a9abc8785480c4cc10cbe10a76a8afe0" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;#timeit.Timer.timeit&quot;&gt;&lt;code&gt;timeit()&lt;/code&gt;&lt;/a&gt; temporarily turns off &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-garbage-collection&quot;&gt;garbage collection&lt;/a&gt; during the timing. The advantage of this approach is that it makes independent timings more comparable. The disadvantage is that GC may be an important component of the performance of the function being measured. If so, GC can be re-enabled as the first statement in the &lt;em&gt;setup&lt;/em&gt; string. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11d5d8210634b80549b5b63361003e12a84937bc" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;pip&lt;/code&gt; is installed into the current virtual environment (if one is active) or into the system site packages (if there is no active virtual environment). The installation location can be controlled through two additional command line options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e04756eee7f0460d985177205e10b1a23503c069" translate="yes" xml:space="preserve">
          <source>By default, &lt;em&gt;check_same_thread&lt;/em&gt; is &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; and only the creating thread may use the connection. If set &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt;, the returned connection may be shared across multiple threads. When using multiple threads with the same connection writing operations should be serialized by the user to avoid data corruption.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9796dc7a23b90b4d977cc10e77473ff593a1938d" translate="yes" xml:space="preserve">
          <source>By default, &lt;em&gt;prefix&lt;/em&gt; is added to all lines that do not consist solely of whitespace (including any line endings).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc4ca20bdc6fbea8397ef04133950e8434765b2e" translate="yes" xml:space="preserve">
          <source>By default, ArgumentParser objects add an option which simply displays the parser&amp;rsquo;s help message. For example, consider a file named &lt;code&gt;myprogram.py&lt;/code&gt; containing the following code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="746866251cfb3e555774dcd8af3a46db19750c77" translate="yes" xml:space="preserve">
          <source>By default, C types are represented in the machine&amp;rsquo;s native format and byte order, and properly aligned by skipping pad bytes if necessary (according to the rules used by the C compiler).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3512445457ee9e1000f6118054d51f83a71dc8bb" translate="yes" xml:space="preserve">
          <source>By default, IDLE executes user code in a separate subprocess via a socket, which uses the internal loopback interface. This connection is not externally visible and no data is sent to or received from the Internet. If firewall software complains anyway, you can ignore it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cb79819df474427622fdc62a2ac6ec7a2e31bb5" translate="yes" xml:space="preserve">
          <source>By default, IDLE runs user code in a separate OS process rather than in the user interface process that runs the shell and editor. In the execution process, it replaces &lt;code&gt;sys.stdin&lt;/code&gt;, &lt;code&gt;sys.stdout&lt;/code&gt;, and &lt;code&gt;sys.stderr&lt;/code&gt; with objects that get input from and send output to the Shell window. The original values stored in &lt;code&gt;sys.__stdin__&lt;/code&gt;, &lt;code&gt;sys.__stdout__&lt;/code&gt;, and &lt;code&gt;sys.__stderr__&lt;/code&gt; are not touched, but may be &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4338c28f624cd168dc6e6a993f6edcf0b0caa8e8" translate="yes" xml:space="preserve">
          <source>By default, IIS gives a &lt;code&gt;PATH_INFO&lt;/code&gt; that duplicates the &lt;code&gt;SCRIPT_NAME&lt;/code&gt; at the front, causing problems for WSGI applications that wish to implement routing. This handler strips any such duplicated path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34a08824cf61e85f3edd280a072e1ba951239abf" translate="yes" xml:space="preserve">
          <source>By default, Pdb sets a handler for the SIGINT signal (which is sent when the user presses</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43d58b5909b4209e333296709be9cee88202e059" translate="yes" xml:space="preserve">
          <source>By default, Python installs several warning filters, which can be overridden by the &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#cmdoption-w&quot;&gt;&lt;code&gt;-W&lt;/code&gt;&lt;/a&gt; command-line option, the &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONWARNINGS&quot; id=&quot;index-3&quot;&gt;&lt;code&gt;PYTHONWARNINGS&lt;/code&gt;&lt;/a&gt; environment variable and calls to &lt;a href=&quot;#warnings.filterwarnings&quot;&gt;&lt;code&gt;filterwarnings()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="194edc12a70011820b7389989028ffc9cc56fa43" translate="yes" xml:space="preserve">
          <source>By default, Rmail displays only visible headers. The &lt;a href=&quot;#mailbox.BabylMessage&quot;&gt;&lt;code&gt;BabylMessage&lt;/code&gt;&lt;/a&gt; class, though, uses the original headers because they are more complete. Visible headers may be accessed explicitly if desired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1631d9dffd1975805f1afb15caa3c01281e60e0" translate="yes" xml:space="preserve">
          <source>By default, Structure and Union fields are aligned in the same way the C compiler does it. It is possible to override this behavior by specifying a &lt;code&gt;_pack_&lt;/code&gt; class attribute in the subclass definition. This must be set to a positive integer and specifies the maximum alignment for the fields. This is what &lt;code&gt;#pragma pack(n)&lt;/code&gt; also does in MSVC.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6eb82dd6665f910dee0adea7123f213a064029b" translate="yes" xml:space="preserve">
          <source>By default, a pickler object will not have a &lt;a href=&quot;#pickle.Pickler.dispatch_table&quot;&gt;&lt;code&gt;dispatch_table&lt;/code&gt;&lt;/a&gt; attribute, and it will instead use the global dispatch table managed by the &lt;a href=&quot;copyreg#module-copyreg&quot;&gt;&lt;code&gt;copyreg&lt;/code&gt;&lt;/a&gt; module. However, to customize the pickling for a specific pickler object one can set the &lt;a href=&quot;#pickle.Pickler.dispatch_table&quot;&gt;&lt;code&gt;dispatch_table&lt;/code&gt;&lt;/a&gt; attribute to a dict-like object. Alternatively, if a subclass of &lt;a href=&quot;#pickle.Pickler&quot;&gt;&lt;code&gt;Pickler&lt;/code&gt;&lt;/a&gt; has a &lt;a href=&quot;#pickle.Pickler.dispatch_table&quot;&gt;&lt;code&gt;dispatch_table&lt;/code&gt;&lt;/a&gt; attribute then this will be used as the default dispatch table for instances of that class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53801121724a8b51bc2f424f971489d6286912cc" translate="yes" xml:space="preserve">
          <source>By default, a trace of an allocated memory block only stores the most recent frame (1 frame). To store 25 frames at startup: set the &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONTRACEMALLOC&quot; id=&quot;index-1&quot;&gt;&lt;code&gt;PYTHONTRACEMALLOC&lt;/code&gt;&lt;/a&gt; environment variable to &lt;code&gt;25&lt;/code&gt;, or use the &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#id5&quot;&gt;&lt;code&gt;-X&lt;/code&gt;&lt;/a&gt;&lt;code&gt;tracemalloc=25&lt;/code&gt; command line option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20f9c9b32bdc318c5c18acd3766a8add6de519ab" translate="yes" xml:space="preserve">
          <source>By default, accepts the name of a module and prints the source of that module. A class or function within the module can be printed instead by appended a colon and the qualified name of the target object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaec6d27e5f37d0c8c91b7a089060ddcb01dba03" translate="yes" xml:space="preserve">
          <source>By default, all keys in sections are accessible in a case-insensitive manner &lt;a href=&quot;#id14&quot; id=&quot;id10&quot;&gt;1&lt;/a&gt;. E.g. &lt;code&gt;for option in parser[&quot;section&quot;]&lt;/code&gt; yields only &lt;code&gt;optionxform&lt;/code&gt;&amp;rsquo;ed option key names. This means lowercased keys by default. At the same time, for a section that holds the key &lt;code&gt;'a'&lt;/code&gt;, both expressions return &lt;code&gt;True&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df77a2f5e1f9b841bf3693ba08d7b2ecd3c51127" translate="yes" xml:space="preserve">
          <source>By default, an object is considered true unless its class defines either a &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__bool__&quot;&gt;&lt;code&gt;__bool__()&lt;/code&gt;&lt;/a&gt; method that returns &lt;code&gt;False&lt;/code&gt; or a &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__len__&quot;&gt;&lt;code&gt;__len__()&lt;/code&gt;&lt;/a&gt; method that returns zero, when called with the object. &lt;a href=&quot;#id12&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt; Here are most of the built-in objects considered false:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ea474f9f38dc663c8a08f500f58696344e668cc" translate="yes" xml:space="preserve">
          <source>By default, attempting to patch a function in a module (or a method or an attribute in a class) that does not exist will fail with &lt;a href=&quot;exceptions#AttributeError&quot;&gt;&lt;code&gt;AttributeError&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba6f8ccaf5287f458e74dcc3c521955c22632ec1" translate="yes" xml:space="preserve">
          <source>By default, each time &lt;a href=&quot;#module-doctest&quot;&gt;&lt;code&gt;doctest&lt;/code&gt;&lt;/a&gt; finds a docstring to test, it uses a &lt;em&gt;shallow copy&lt;/em&gt; of &lt;code&gt;M&lt;/code&gt;&amp;rsquo;s globals, so that running tests doesn&amp;rsquo;t change the module&amp;rsquo;s real globals, and so that one test in &lt;code&gt;M&lt;/code&gt; can&amp;rsquo;t leave behind crumbs that accidentally allow another test to work. This means examples can freely use any names defined at top-level in &lt;code&gt;M&lt;/code&gt;, and names defined earlier in the docstring being run. Examples cannot see names defined in other docstrings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dced44bdbcc5d88045afe23f3049d96083bbec3f" translate="yes" xml:space="preserve">
          <source>By default, enumerations allow multiple names as aliases for the same value. When this behavior isn&amp;rsquo;t desired, the following decorator can be used to ensure each value is used only once in the enumeration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ab285e785eb1c48a8796719be9a670c6e97df9b" translate="yes" xml:space="preserve">
          <source>By default, errors from the &lt;a href=&quot;#os.scandir&quot;&gt;&lt;code&gt;scandir()&lt;/code&gt;&lt;/a&gt; call are ignored. If optional argument &lt;em&gt;onerror&lt;/em&gt; is specified, it should be a function; it will be called with one argument, an &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; instance. It can report the error to continue with the walk, or raise the exception to abort the walk. Note that the filename is available as the &lt;code&gt;filename&lt;/code&gt; attribute of the exception object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5fd2a1ebe99a0d3917c731d7846b7f02865b33d" translate="yes" xml:space="preserve">
          <source>By default, if an expected output block contains a line containing only the string &lt;code&gt;&amp;lt;BLANKLINE&amp;gt;&lt;/code&gt;, then that line will match a blank line in the actual output. Because a genuinely blank line delimits the expected output, this is the only way to communicate that a blank line is expected. When &lt;a href=&quot;#doctest.DONT_ACCEPT_BLANKLINE&quot;&gt;&lt;code&gt;DONT_ACCEPT_BLANKLINE&lt;/code&gt;&lt;/a&gt; is specified, this substitution is not allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2508fc55ad92f5457b99f4d98df22c95e511d0e" translate="yes" xml:space="preserve">
          <source>By default, if an expected output block contains just &lt;code&gt;1&lt;/code&gt;, an actual output block containing just &lt;code&gt;1&lt;/code&gt; or just &lt;code&gt;True&lt;/code&gt; is considered to be a match, and similarly for &lt;code&gt;0&lt;/code&gt; versus &lt;code&gt;False&lt;/code&gt;. When &lt;a href=&quot;#doctest.DONT_ACCEPT_TRUE_FOR_1&quot;&gt;&lt;code&gt;DONT_ACCEPT_TRUE_FOR_1&lt;/code&gt;&lt;/a&gt; is specified, neither substitution is allowed. The default behavior caters to that Python changed the return type of many functions from integer to boolean; doctests expecting &amp;ldquo;little integer&amp;rdquo; output still work in these cases. This option will probably go away, but not for several years.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9b9cb578b338579d6cbb60c27b43fc1a3cceffa" translate="yes" xml:space="preserve">
          <source>By default, no arguments are passed to &lt;em&gt;target&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="008b3b178e4b68b1e60ef93709f10afc91405af4" translate="yes" xml:space="preserve">
          <source>By default, or when &lt;em&gt;pages&lt;/em&gt; is either &lt;code&gt;0&lt;/code&gt; or a negative integer, the entire database is copied in a single step; otherwise the method performs a loop copying up to &lt;em&gt;pages&lt;/em&gt; pages at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fb1ffcd7df10e13bd50a132b07d1a02253cb944" translate="yes" xml:space="preserve">
          <source>By default, server binds itself to all interfaces. The option &lt;code&gt;-b/--bind&lt;/code&gt; specifies a specific address to which it should bind. Both IPv4 and IPv6 addresses are supported. For example, the following command causes the server to bind to localhost only:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77eeefe6f3c358b478358f7fcd4bb93cba700b29" translate="yes" xml:space="preserve">
          <source>By default, server uses the current directory. The option &lt;code&gt;-d/--directory&lt;/code&gt; specifies a directory to which it should serve the files. For example, the following command uses a specific directory:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="301b7f7ac742594093987dfcc029e8f93e2dbe64" translate="yes" xml:space="preserve">
          <source>By default, the &lt;a href=&quot;#module-pickle&quot;&gt;&lt;code&gt;pickle&lt;/code&gt;&lt;/a&gt; data format uses a relatively compact binary representation. If you need optimal size characteristics, you can efficiently &lt;a href=&quot;archiving&quot;&gt;compress&lt;/a&gt; pickled data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="094a33ba83d7519f725e162343187dcd2696de2d" translate="yes" xml:space="preserve">
          <source>By default, the &lt;a href=&quot;#module-sqlite3&quot;&gt;&lt;code&gt;sqlite3&lt;/code&gt;&lt;/a&gt; module uses its &lt;a href=&quot;#sqlite3.Connection&quot;&gt;&lt;code&gt;Connection&lt;/code&gt;&lt;/a&gt; class for the connect call. You can, however, subclass the &lt;a href=&quot;#sqlite3.Connection&quot;&gt;&lt;code&gt;Connection&lt;/code&gt;&lt;/a&gt; class and make &lt;a href=&quot;#sqlite3.connect&quot;&gt;&lt;code&gt;connect()&lt;/code&gt;&lt;/a&gt; use your class instead by providing your class for the &lt;em&gt;factory&lt;/em&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6462d732918c01c641bc37dfaab3963a19f0d248" translate="yes" xml:space="preserve">
          <source>By default, the &lt;a href=&quot;#urllib.request.URLopener&quot;&gt;&lt;code&gt;URLopener&lt;/code&gt;&lt;/a&gt; class sends a &lt;em&gt;User-Agent&lt;/em&gt; header of &lt;code&gt;urllib/VVV&lt;/code&gt;, where &lt;em&gt;VVV&lt;/em&gt; is the &lt;a href=&quot;urllib#module-urllib&quot;&gt;&lt;code&gt;urllib&lt;/code&gt;&lt;/a&gt; version number. Applications can define their own &lt;em&gt;User-Agent&lt;/em&gt; header by subclassing &lt;a href=&quot;#urllib.request.URLopener&quot;&gt;&lt;code&gt;URLopener&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#urllib.request.FancyURLopener&quot;&gt;&lt;code&gt;FancyURLopener&lt;/code&gt;&lt;/a&gt; and setting the class attribute &lt;a href=&quot;#urllib.request.URLopener.version&quot;&gt;&lt;code&gt;version&lt;/code&gt;&lt;/a&gt; to an appropriate string value in the subclass definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3680d558cfec6850bcf6d9a77a8cad55df9c5560" translate="yes" xml:space="preserve">
          <source>By default, the &lt;strong&gt;href&lt;/strong&gt; attribute is treated as a file name. You can use custom loaders to override this behaviour. Also note that the standard helper does not support XPointer syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d10ea8597ea642766854d45414b54ceba2e795c6" translate="yes" xml:space="preserve">
          <source>By default, the Python traceback is written to &lt;a href=&quot;sys#sys.stderr&quot;&gt;&lt;code&gt;sys.stderr&lt;/code&gt;&lt;/a&gt;. To see tracebacks, applications must be run in the terminal. A log file can alternatively be passed to &lt;a href=&quot;#faulthandler.enable&quot;&gt;&lt;code&gt;faulthandler.enable()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="920a6566848376fec069ad7573aa5aa7bb437561" translate="yes" xml:space="preserve">
          <source>By default, the class also implements the parse method of the XMLReader interface using the feed, close and reset methods of the IncrementalParser interface as a convenience to SAX 2.0 driver writers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c77b39dd4b69e05f235e3b85ecffeea127e6edc1" translate="yes" xml:space="preserve">
          <source>By default, the description will be line-wrapped so that it fits within the given space. To change this behavior, see the &lt;a href=&quot;#formatter-class&quot;&gt;formatter_class&lt;/a&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72cdb093d0d5c4a0811bf0713c0a0594ccf746c2" translate="yes" xml:space="preserve">
          <source>By default, the diff control lines (those with &lt;code&gt;***&lt;/code&gt; or &lt;code&gt;---&lt;/code&gt;) are created with a trailing newline. This is helpful so that inputs created from &lt;a href=&quot;io#io.IOBase.readlines&quot;&gt;&lt;code&gt;io.IOBase.readlines()&lt;/code&gt;&lt;/a&gt; result in diffs that are suitable for use with &lt;a href=&quot;io#io.IOBase.writelines&quot;&gt;&lt;code&gt;io.IOBase.writelines()&lt;/code&gt;&lt;/a&gt; since both the inputs and outputs have trailing newlines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="701fa93323cbf8ce2e905edfa806eadfe2ba9ee4" translate="yes" xml:space="preserve">
          <source>By default, the diff control lines (those with &lt;code&gt;---&lt;/code&gt;, &lt;code&gt;+++&lt;/code&gt;, or &lt;code&gt;@@&lt;/code&gt;) are created with a trailing newline. This is helpful so that inputs created from &lt;a href=&quot;io#io.IOBase.readlines&quot;&gt;&lt;code&gt;io.IOBase.readlines()&lt;/code&gt;&lt;/a&gt; result in diffs that are suitable for use with &lt;a href=&quot;io#io.IOBase.writelines&quot;&gt;&lt;code&gt;io.IOBase.writelines()&lt;/code&gt;&lt;/a&gt; since both the inputs and outputs have trailing newlines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="195dae096c798b9d4b95b13edb7f663ede7d0d8a" translate="yes" xml:space="preserve">
          <source>By default, the result of packing a given C struct includes pad bytes in order to maintain proper alignment for the C types involved; similarly, alignment is taken into account when unpacking. This behavior is chosen so that the bytes of a packed struct correspond exactly to the layout in memory of the corresponding C struct. To handle platform-independent data formats or omit implicit pad bytes, use &lt;code&gt;standard&lt;/code&gt; size and alignment instead of &lt;code&gt;native&lt;/code&gt; size and alignment: see &lt;a href=&quot;#struct-alignment&quot;&gt;Byte Order, Size, and Alignment&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f8d31485f1cf87f768e5f2e59061661f7d4b972" translate="yes" xml:space="preserve">
          <source>By default, the scripts &lt;code&gt;pipX&lt;/code&gt; and &lt;code&gt;pipX.Y&lt;/code&gt; will be installed (where X.Y stands for the current version of Python).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdf79e7494f0c8e40aa022f705fa4a17ed0f4359" translate="yes" xml:space="preserve">
          <source>By default, the scripts &lt;code&gt;pipX&lt;/code&gt; and &lt;code&gt;pipX.Y&lt;/code&gt; will be installed (where X.Y stands for the version of Python used to invoke &lt;code&gt;ensurepip&lt;/code&gt;). The scripts installed can be controlled through two additional command line options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5200803235e477dfe23987b607e2285ed5feca81" translate="yes" xml:space="preserve">
          <source>By default, the sub-window will extend from the specified position to the lower right corner of the window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b06468131c77687172a2610a996c3423867c90f" translate="yes" xml:space="preserve">
          <source>By default, the window will extend from the specified position to the lower right corner of the screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9477a9bea084d85882bf3b402a08fa167abb59ff" translate="yes" xml:space="preserve">
          <source>By default, this function will return the data as encoded bytes. The actual encoding of the output data may depend on the command being invoked, so the decoding to text will often need to be handled at the application level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31f19246d0599116d8e34379c8cd902758801c53" translate="yes" xml:space="preserve">
          <source>By default, unpickling will import any class or function that it finds in the pickle data. For many applications, this behaviour is unacceptable as it permits the unpickler to import and invoke arbitrary code. Just consider what this hand-crafted pickle data stream does when loaded:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ef1793786e54340ce8bfbe17daf119d10d21483" translate="yes" xml:space="preserve">
          <source>By default, version 3 pickles are used to serialize values. The version of the pickle protocol can be specified with the &lt;em&gt;protocol&lt;/em&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b38308bfeb6ea74147739e7c4c985e750ec529ef" translate="yes" xml:space="preserve">
          <source>By default, version 3 pickles are used to serialize values. The version of the pickle protocol can be specified with the &lt;em&gt;protocol&lt;/em&gt; parameter. See the &lt;a href=&quot;pickle#module-pickle&quot;&gt;&lt;code&gt;pickle&lt;/code&gt;&lt;/a&gt; documentation for a discussion of the pickle protocols.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eff56d0e72b6ce61e999e3149679525f60cc22e6" translate="yes" xml:space="preserve">
          <source>By default, wake up one thread waiting on this condition, if any. If the calling thread has not acquired the lock when this method is called, a &lt;a href=&quot;exceptions#RuntimeError&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="854aa6f56f9c0d27436b46f46a4a43f383857560" translate="yes" xml:space="preserve">
          <source>By default, when reading from &lt;code&gt;/dev/random&lt;/code&gt;, &lt;a href=&quot;#os.getrandom&quot;&gt;&lt;code&gt;getrandom()&lt;/code&gt;&lt;/a&gt; blocks if no random bytes are available, and when reading from &lt;code&gt;/dev/urandom&lt;/code&gt;, it blocks if the entropy pool has not yet been initialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b516742d0bb1873f6652a665f55b4757162ced1" translate="yes" xml:space="preserve">
          <source>By reading and writing only large chunks of data even when the user asks for a single byte, buffered I/O hides any inefficiency in calling and executing the operating system&amp;rsquo;s unbuffered I/O routines. The gain depends on the OS and the kind of I/O which is performed. For example, on some modern OSes such as Linux, unbuffered disk I/O can be as fast as buffered I/O. The bottom line, however, is that buffered I/O offers predictable performance regardless of the platform and the backing device. Therefore, it is almost always preferable to use buffered I/O rather than unbuffered I/O for binary data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd46034571b47794a0bda9d3d583cb9fd6cb5cec" translate="yes" xml:space="preserve">
          <source>By returning true values, these callbacks can suppress exceptions the same way context manager &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__exit__&quot;&gt;&lt;code&gt;__exit__()&lt;/code&gt;&lt;/a&gt; methods can.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e560960e3ca3501b7d01f95836df6c7554b4bf3e" translate="yes" xml:space="preserve">
          <source>By setting &lt;em&gt;salt&lt;/em&gt; parameter users can introduce randomization to the hash function. Randomized hashing is useful for protecting against collision attacks on the hash function used in digital signatures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32fe99c22402d3f9cd7abfeb71dfafa391c5a113" translate="yes" xml:space="preserve">
          <source>By using a custom event loop policy, the behavior of &lt;a href=&quot;asyncio-eventloop#asyncio.get_event_loop&quot;&gt;&lt;code&gt;get_event_loop()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;asyncio-eventloop#asyncio.set_event_loop&quot;&gt;&lt;code&gt;set_event_loop()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;asyncio-eventloop#asyncio.new_event_loop&quot;&gt;&lt;code&gt;new_event_loop()&lt;/code&gt;&lt;/a&gt; functions can be customized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b091b4f9c8ca0872cda8cde6431e148f093daeaf" translate="yes" xml:space="preserve">
          <source>Byte Order, Size, and Alignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a0d6d3439bd2ad80ce89b16b070f185d6471f83" translate="yes" xml:space="preserve">
          <source>Byte index at which an error occurred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cc655c3485fc15dd7ca0afb59d9aa38bd081838" translate="yes" xml:space="preserve">
          <source>Byte offset to the file header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8333e6eadb360031f488d25d73b03263c17d5cd1" translate="yes" xml:space="preserve">
          <source>Byte order</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4597d8ef411d59e1d9be06348c147c4dc042b844" translate="yes" xml:space="preserve">
          <source>Byte-compile a single source file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f44d65c941475def9c425dea9272a82770ad20f" translate="yes" xml:space="preserve">
          <source>Byte-compile all the &lt;code&gt;.py&lt;/code&gt; files found along &lt;code&gt;sys.path&lt;/code&gt;. Return a true value if all the files compiled successfully, and a false value otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d77f09e0e7b15c9cb3b575a00f1091dc029bc527" translate="yes" xml:space="preserve">
          <source>Bytearray Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3f31d2587c2659748200906697b7e426ebe3937" translate="yes" xml:space="preserve">
          <source>Bytecode analysis</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29c3e8776cc54b4a3d00a06a3057380e1328a8bd" translate="yes" xml:space="preserve">
          <source>Bytes (any object that follows the &lt;a href=&quot;https://docs.python.org/3.8/c-api/buffer.html#bufferobjects&quot;&gt;buffer protocol&lt;/a&gt; or has &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__bytes__&quot;&gt;&lt;code&gt;__bytes__()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87b953d5d72682cb2132578bfed73b5853f4110b" translate="yes" xml:space="preserve">
          <source>Bytes (converts any Python object using &lt;code&gt;repr(obj).encode('ascii','backslashreplace)&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="240fc4227ac064b6af55b8039b1a8a4d447e7719" translate="yes" xml:space="preserve">
          <source>Bytes Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="691d2567928500c0d6dcc3954f0ec2324402cb5d" translate="yes" xml:space="preserve">
          <source>Bytes and Bytearray Operations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7df78136784a7bc228bd395f315bea3a22a1309a" translate="yes" xml:space="preserve">
          <source>Bytes objects (&lt;code&gt;bytes&lt;/code&gt;/&lt;code&gt;bytearray&lt;/code&gt;) have one unique built-in operation: the &lt;code&gt;%&lt;/code&gt; operator (modulo). This is also known as the bytes &lt;em&gt;formatting&lt;/em&gt; or &lt;em&gt;interpolation&lt;/em&gt; operator. Given &lt;code&gt;format % values&lt;/code&gt; (where &lt;em&gt;format&lt;/em&gt; is a bytes object), &lt;code&gt;%&lt;/code&gt; conversion specifications in &lt;em&gt;format&lt;/em&gt; are replaced with zero or more elements of &lt;em&gt;values&lt;/em&gt;. The effect is similar to using the &lt;code&gt;sprintf()&lt;/code&gt; in the C language.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0abcedbcee06f3e9a3a9f49f28bb8293fda9dbce" translate="yes" xml:space="preserve">
          <source>Bytes objects are immutable sequences of single bytes. Since many major binary protocols are based on the ASCII text encoding, bytes objects offer several methods that are only valid when working with ASCII compatible data and are closely related to string objects in a variety of other ways.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47d7f1da06c57177341c3d9ef2119c5d7eaec765" translate="yes" xml:space="preserve">
          <source>Bytes objects can also be created with literals, see &lt;a href=&quot;https://docs.python.org/3.8/reference/lexical_analysis.html#strings&quot;&gt;String and Bytes literals&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f91b8d8bed8c0993bf0eb2d6b6ee7a3409cd568f" translate="yes" xml:space="preserve">
          <source>Bytes version of &lt;a href=&quot;#os.environ&quot;&gt;&lt;code&gt;environ&lt;/code&gt;&lt;/a&gt;: a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-mapping&quot;&gt;mapping&lt;/a&gt; object representing the environment as byte strings. &lt;a href=&quot;#os.environ&quot;&gt;&lt;code&gt;environ&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#os.environb&quot;&gt;&lt;code&gt;environb&lt;/code&gt;&lt;/a&gt; are synchronized (modify &lt;a href=&quot;#os.environb&quot;&gt;&lt;code&gt;environb&lt;/code&gt;&lt;/a&gt; updates &lt;a href=&quot;#os.environ&quot;&gt;&lt;code&gt;environ&lt;/code&gt;&lt;/a&gt;, and vice versa).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c17a08f748a73c44dbe27e96cafd97e19083491" translate="yes" xml:space="preserve">
          <source>BytesWarning</source>
          <target state="translated">BytesWarning</target>
        </trans-unit>
        <trans-unit id="53cd5afff77d718a16da7a261addfd2e7a746175" translate="yes" xml:space="preserve">
          <source>C Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="502ca6c945d9f8aee115c49e01f9edd12a50b0c8" translate="yes" xml:space="preserve">
          <source>C type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23c8bef685fe7f8e5ab76b80f3a180f9b6022855" translate="yes" xml:space="preserve">
          <source>C++ programmers should note that Python&amp;rsquo;s virtual base class concept is not the same as C++&amp;rsquo;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1034f70b6f9ddd2bcb58956fc970e5f50cec8bd2" translate="yes" xml:space="preserve">
          <source>C-Backspace</source>
          <target state="translated">C-Backspace</target>
        </trans-unit>
        <trans-unit id="235d9f2cf895c1719d46fc1198d0f621032d1477" translate="yes" xml:space="preserve">
          <source>C-Del</source>
          <target state="translated">C-Del</target>
        </trans-unit>
        <trans-unit id="a13b54dca6c09f524e525a2fe3f23ea99ba36108" translate="yes" xml:space="preserve">
          <source>C-End</source>
          <target state="translated">C-End</target>
        </trans-unit>
        <trans-unit id="eeebc65079beba3a90a4b5d6ba9a80053cb89d1e" translate="yes" xml:space="preserve">
          <source>C-Home</source>
          <target state="translated">C-Home</target>
        </trans-unit>
        <trans-unit id="75d3584877ad5e6927fb88c6d65c9ed11fe39a60" translate="yes" xml:space="preserve">
          <source>C-LeftArrow</source>
          <target state="translated">C-LeftArrow</target>
        </trans-unit>
        <trans-unit id="81723ec83c08ca03bcaaa0d427499d1e5f788151" translate="yes" xml:space="preserve">
          <source>C-RightArrow</source>
          <target state="translated">C-RightArrow</target>
        </trans-unit>
        <trans-unit id="3bff8fb1aa290267671b1c50e3b32db24f00b295" translate="yes" xml:space="preserve">
          <source>C-a</source>
          <target state="translated">C-a</target>
        </trans-unit>
        <trans-unit id="c204a76fc3c1123c96b13dd7ec922d02d4b00e91" translate="yes" xml:space="preserve">
          <source>C-b</source>
          <target state="translated">C-b</target>
        </trans-unit>
        <trans-unit id="b3b7965656c0921692a30673d7781acd51c4eed9" translate="yes" xml:space="preserve">
          <source>C-c</source>
          <target state="translated">C-c</target>
        </trans-unit>
        <trans-unit id="1d8e75405de8be939b05db3eef9ab4daa516674d" translate="yes" xml:space="preserve">
          <source>C-d</source>
          <target state="translated">C-d</target>
        </trans-unit>
        <trans-unit id="a7ef1e89e28b60bd53a0a5ab746fbcd131fdf224" translate="yes" xml:space="preserve">
          <source>C-e</source>
          <target state="translated">C-e</target>
        </trans-unit>
        <trans-unit id="dd71d43937255c2ba419c077fa824865f8267186" translate="yes" xml:space="preserve">
          <source>C-f</source>
          <target state="translated">C-f</target>
        </trans-unit>
        <trans-unit id="d5eeac2f32301e2b964f421e02a44c5afa000881" translate="yes" xml:space="preserve">
          <source>C-k</source>
          <target state="translated">C-k</target>
        </trans-unit>
        <trans-unit id="2fef5b5a274737535a312ecc5d6b8de717c1cb77" translate="yes" xml:space="preserve">
          <source>C-l</source>
          <target state="translated">C-l</target>
        </trans-unit>
        <trans-unit id="aa3408adf600065cf33c17971e8cdd9f76e5d785" translate="yes" xml:space="preserve">
          <source>C-n</source>
          <target state="translated">C-n</target>
        </trans-unit>
        <trans-unit id="332268c029d8126391ff9151361238bdf44870d8" translate="yes" xml:space="preserve">
          <source>C-p</source>
          <target state="translated">C-p</target>
        </trans-unit>
        <trans-unit id="121c73e0febd3ed6eed71fa025798c8f1aacb9e1" translate="yes" xml:space="preserve">
          <source>C-space</source>
          <target state="translated">C-space</target>
        </trans-unit>
        <trans-unit id="0a23d9de112f4305bbf7d308788b4615cc11e2a2" translate="yes" xml:space="preserve">
          <source>C-v</source>
          <target state="translated">C-v</target>
        </trans-unit>
        <trans-unit id="06778eb851df0109025af462f33a15822a2c4acd" translate="yes" xml:space="preserve">
          <source>C:\&amp;gt; &amp;lt;venv&amp;gt;\Scripts\activate.bat</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a4d6cc3bfd116624ab6eab2afe4bf74100b9d76" translate="yes" xml:space="preserve">
          <source>CA certificates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="695e5aa14e6fe8e356628b82479477b0506f9c0b" translate="yes" xml:space="preserve">
          <source>CAB Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da51553cdca6a389c76ebbb44f8f3db969bdf6f0" translate="yes" xml:space="preserve">
          <source>CAN_BCM, in the CAN protocol family, is the broadcast manager (BCM) protocol. Broadcast manager constants, documented in the Linux documentation, are also defined in the socket module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5950e554ab73c5d2c3309f13271b96de1e6397c6" translate="yes" xml:space="preserve">
          <source>CAN_ISOTP, in the CAN protocol family, is the ISO-TP (ISO 15765-2) protocol. ISO-TP constants, documented in the Linux documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="257278b28d7dc2b2ef4ebe950494d50618465456" translate="yes" xml:space="preserve">
          <source>CD quality audio (at 16 bits/sample and 2 channels)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40d04adc35660ba11ebba59e354ace6b0c068b64" translate="yes" xml:space="preserve">
          <source>CGI scripts run by the &lt;a href=&quot;#http.server.CGIHTTPRequestHandler&quot;&gt;&lt;code&gt;CGIHTTPRequestHandler&lt;/code&gt;&lt;/a&gt; class cannot execute redirects (HTTP code 302), because code 200 (script output follows) is sent prior to execution of the CGI script. This pre-empts the status code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb8a75cfae1ababa3149fa53c620dcd4835d2520" translate="yes" xml:space="preserve">
          <source>CGI-based invocation via &lt;code&gt;sys.stdin&lt;/code&gt;, &lt;code&gt;sys.stdout&lt;/code&gt;, &lt;code&gt;sys.stderr&lt;/code&gt; and &lt;code&gt;os.environ&lt;/code&gt;. This is useful when you have a WSGI application and want to run it as a CGI script. Simply invoke &lt;code&gt;CGIHandler().run(app)&lt;/code&gt;, where &lt;code&gt;app&lt;/code&gt; is the WSGI application object you wish to invoke.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1db242ce7f53756a63c5ab80467f656202373c1" translate="yes" xml:space="preserve">
          <source>CGIXMLRPCRequestHandler</source>
          <target state="translated">CGIXMLRPCRequestHandler</target>
        </trans-unit>
        <trans-unit id="7b70381119b2200eb7425171b0121ee70c6bc114" translate="yes" xml:space="preserve">
          <source>COM methods use a special calling convention: They require a pointer to the COM interface as first argument, in addition to those parameters that are specified in the &lt;code&gt;argtypes&lt;/code&gt; tuple.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46c49201af708ad6cef94b944f1641bb646aa409" translate="yes" xml:space="preserve">
          <source>CORO_CLOSED: Execution has completed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f9a30b2eb91ba4138f5e271061570560833646d" translate="yes" xml:space="preserve">
          <source>CORO_CREATED: Waiting to start execution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31c41d8cf6e40d0532994f4856c83c21bbb1e8e1" translate="yes" xml:space="preserve">
          <source>CORO_RUNNING: Currently being executed by the interpreter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="509ad5271c57dacc40d39e1ed75ef82d8114cd35" translate="yes" xml:space="preserve">
          <source>CORO_SUSPENDED: Currently suspended at an await expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af2ed89a4fe79dba29dbaa99aebebf122da9ac3e" translate="yes" xml:space="preserve">
          <source>CPython implementation detail, the optimized C implementation is only used when &lt;em&gt;digest&lt;/em&gt; is a string and name of a digest algorithm, which is supported by OpenSSL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80ff1e2a5b02fb3d071d353e0f7ce3735a83e4d0" translate="yes" xml:space="preserve">
          <source>CRC-32 of the uncompressed file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f89e0f610ee638c3646bd23391b25ceaead4ae94" translate="yes" xml:space="preserve">
          <source>CacheFTPHandler Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e38c0231e693ccfb11bc5fa1b2ff3ef6d1232cb" translate="yes" xml:space="preserve">
          <source>Calculate the product of all the elements in the input &lt;em&gt;iterable&lt;/em&gt;. The default &lt;em&gt;start&lt;/em&gt; value for the product is &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f95d848e27a04164389116a53d8673594a434ca" translate="yes" xml:space="preserve">
          <source>Calculates the appropriate metaclass and creates the class namespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f5d676056099e45734608d2eff8dbab45fd39b2" translate="yes" xml:space="preserve">
          <source>Calculation of the initial rollover time is done when the handler is initialised. Calculation of subsequent rollover times is done only when rollover occurs, and rollover occurs only when emitting output. If this is not kept in mind, it might lead to some confusion. For example, if an interval of &amp;ldquo;every minute&amp;rdquo; is set, that does not mean you will always see log files with times (in the filename) separated by a minute; if, during application execution, logging output is generated more frequently than once a minute, &lt;em&gt;then&lt;/em&gt; you can expect to see log files with times separated by a minute. If, on the other hand, logging messages are only output once every five minutes (say), then there will be gaps in the file times corresponding to the minutes where no output (and hence no rollover) occurred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5ed075f00edd0132316935e88c331ca039fab0d" translate="yes" xml:space="preserve">
          <source>Calibration</source>
          <target state="translated">Calibration</target>
        </trans-unit>
        <trans-unit id="aadcf37f946caa06a6b21da9c6121f7161a3b776" translate="yes" xml:space="preserve">
          <source>Call &lt;a href=&quot;#timeit.Timer.timeit&quot;&gt;&lt;code&gt;timeit()&lt;/code&gt;&lt;/a&gt; a few times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c11ef00130172d0934549f735d63234d9404e14c" translate="yes" xml:space="preserve">
          <source>Call &lt;a href=&quot;#tracemalloc.take_snapshot&quot;&gt;&lt;code&gt;take_snapshot()&lt;/code&gt;&lt;/a&gt; function to take a snapshot of traces before clearing them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b4768a13e018551f272730c6611d4c080e50a4b" translate="yes" xml:space="preserve">
          <source>Call &lt;a href=&quot;keyword#keyword.iskeyword&quot;&gt;&lt;code&gt;keyword.iskeyword()&lt;/code&gt;&lt;/a&gt; to test whether string &lt;code&gt;s&lt;/code&gt; is a reserved identifier, such as &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#def&quot;&gt;&lt;code&gt;def&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#class&quot;&gt;&lt;code&gt;class&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56e931d9872eb3cf90d27e13f71f652e4465e54c" translate="yes" xml:space="preserve">
          <source>Call &lt;a href=&quot;os#os.rmdir&quot;&gt;&lt;code&gt;os.rmdir()&lt;/code&gt;&lt;/a&gt; on &lt;em&gt;filename&lt;/em&gt;. On Windows platforms, this is wrapped with a wait loop that checks for the existence of the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29609bd887533f0dd3ff25aab5face44bff5f1b0" translate="yes" xml:space="preserve">
          <source>Call &lt;a href=&quot;os#os.unlink&quot;&gt;&lt;code&gt;os.unlink()&lt;/code&gt;&lt;/a&gt; on &lt;em&gt;filename&lt;/em&gt;. On Windows platforms, this is wrapped with a wait loop that checks for the existence fo the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6f97c3415bdff307399101a6db4b1f236970274" translate="yes" xml:space="preserve">
          <source>Call &lt;a href=&quot;shutil#shutil.rmtree&quot;&gt;&lt;code&gt;shutil.rmtree()&lt;/code&gt;&lt;/a&gt; on &lt;em&gt;path&lt;/em&gt; or call &lt;a href=&quot;os#os.lstat&quot;&gt;&lt;code&gt;os.lstat()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;os#os.rmdir&quot;&gt;&lt;code&gt;os.rmdir()&lt;/code&gt;&lt;/a&gt; to remove a path and its contents. On Windows platforms, this is wrapped with a wait loop that checks for the existence of the files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27b75ea0be2f6061901183e40ec3ac73c03ac4f5" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;func(*args)&lt;/code&gt;, while tracing is enabled. The tracing state is saved, and restored afterwards. This is intended to be called from a debugger from a checkpoint, to recursively debug some other code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05ccf4c1c319609596c020e120cde4412c5e3e2d" translate="yes" xml:space="preserve">
          <source>Call &lt;em&gt;func&lt;/em&gt; with arguments &lt;em&gt;args&lt;/em&gt; and keyword arguments &lt;em&gt;kwds&lt;/em&gt;. It blocks until the result is ready. Given this blocks, &lt;a href=&quot;#multiprocessing.pool.Pool.apply_async&quot;&gt;&lt;code&gt;apply_async()&lt;/code&gt;&lt;/a&gt; is better suited for performing work in parallel. Additionally, &lt;em&gt;func&lt;/em&gt; is only executed in one of the workers of the pool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc6e2c8e120683e16cf0ed4a4a301bba7d7eb747" translate="yes" xml:space="preserve">
          <source>Call &lt;em&gt;func&lt;/em&gt; with the given arguments under control of the &lt;a href=&quot;#trace.Trace&quot;&gt;&lt;code&gt;Trace&lt;/code&gt;&lt;/a&gt; object with the current tracing parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecbe6052c3e7d7fe54e0583c7e777cc334fae406" translate="yes" xml:space="preserve">
          <source>Call and return the result of a method of the proxy&amp;rsquo;s referent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5924f5863dc387e6330c12726b4529aa4cc2f5c" translate="yes" xml:space="preserve">
          <source>Call count statistics can be used to identify bugs in code (surprising counts), and to identify possible inline-expansion points (high call counts). Internal time statistics can be used to identify &amp;ldquo;hot loops&amp;rdquo; that should be carefully optimized. Cumulative time statistics should be used to identify high level errors in the selection of algorithms. Note that the unusual handling of cumulative times in this profiler allows statistics for recursive implementations of algorithms to be directly compared to iterative implementations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="896c3a3c821ad69cdeaac87e56dc4733d4c270ed" translate="yes" xml:space="preserve">
          <source>Call the &lt;a href=&quot;email.contentmanager#email.contentmanager.ContentManager.get_content&quot;&gt;&lt;code&gt;get_content()&lt;/code&gt;&lt;/a&gt; method of the &lt;em&gt;content_manager&lt;/em&gt;, passing self as the message object, and passing along any other arguments or keywords as additional arguments. If &lt;em&gt;content_manager&lt;/em&gt; is not specified, use the &lt;code&gt;content_manager&lt;/code&gt; specified by the current &lt;a href=&quot;email.policy#module-email.policy&quot;&gt;&lt;code&gt;policy&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="214f6401d2ee9a7696a5fc8ca0ae9e0423122a8a" translate="yes" xml:space="preserve">
          <source>Call the &lt;a href=&quot;email.contentmanager#email.contentmanager.ContentManager.set_content&quot;&gt;&lt;code&gt;set_content()&lt;/code&gt;&lt;/a&gt; method of the &lt;em&gt;content_manager&lt;/em&gt;, passing self as the message object, and passing along any other arguments or keywords as additional arguments. If &lt;em&gt;content_manager&lt;/em&gt; is not specified, use the &lt;code&gt;content_manager&lt;/code&gt; specified by the current &lt;a href=&quot;email.policy#module-email.policy&quot;&gt;&lt;code&gt;policy&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b729bac01ccf147b38d61abf339918f169a4e4c8" translate="yes" xml:space="preserve">
          <source>Call the &lt;em&gt;function&lt;/em&gt; (a function or method object, not a string) with the given arguments. When &lt;a href=&quot;#pdb.runcall&quot;&gt;&lt;code&gt;runcall()&lt;/code&gt;&lt;/a&gt; returns, it returns whatever the function call returned. The debugger prompt appears as soon as the function is entered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="025702ae6236841034249320d15712f1956b9fcc" translate="yes" xml:space="preserve">
          <source>Call the current event loop exception handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61df0c3829240e2b9d7460deb03b05e26ff34c69" translate="yes" xml:space="preserve">
          <source>Call the exception handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20301c340aa6e7e82cbba4889f397214b80ebce3" translate="yes" xml:space="preserve">
          <source>Call the system call &lt;code&gt;getsid()&lt;/code&gt;. See the Unix manual for the semantics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e936d4212ad93e1e57cbfdaccedac79661a3904" translate="yes" xml:space="preserve">
          <source>Call the system call &lt;code&gt;setpgid()&lt;/code&gt; to set the process group id of the process with id &lt;em&gt;pid&lt;/em&gt; to the process group with id &lt;em&gt;pgrp&lt;/em&gt;. See the Unix manual for the semantics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7229279000f5d9adef8c815ab89f39aa93c00490" translate="yes" xml:space="preserve">
          <source>Call the system call &lt;code&gt;setpgrp()&lt;/code&gt; or &lt;code&gt;setpgrp(0, 0)&lt;/code&gt; depending on which version is implemented (if any). See the Unix manual for the semantics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="334bddfc8498d45521f542c494365c39d8f85c76" translate="yes" xml:space="preserve">
          <source>Call the system call &lt;code&gt;setsid()&lt;/code&gt;. See the Unix manual for the semantics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="357cfe3414095f4b1221ab953069b4bd31357b6f" translate="yes" xml:space="preserve">
          <source>Call the system initgroups() to initialize the group access list with all of the groups of which the specified username is a member, plus the specified group id.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f63f6fc3723b3c154d7df71f69a1d96b3b8852cd" translate="yes" xml:space="preserve">
          <source>Call the underlying &lt;code&gt;MessageBeep()&lt;/code&gt; function from the Platform API. This plays a sound as specified in the registry. The &lt;em&gt;type&lt;/em&gt; argument specifies which sound to play; possible values are &lt;code&gt;-1&lt;/code&gt;, &lt;code&gt;MB_ICONASTERISK&lt;/code&gt;, &lt;code&gt;MB_ICONEXCLAMATION&lt;/code&gt;, &lt;code&gt;MB_ICONHAND&lt;/code&gt;, &lt;code&gt;MB_ICONQUESTION&lt;/code&gt;, and &lt;code&gt;MB_OK&lt;/code&gt;, all described below. The value &lt;code&gt;-1&lt;/code&gt; produces a &amp;ldquo;simple beep&amp;rdquo;; this is the final fallback if a sound cannot be played otherwise. If the system indicates an error, &lt;a href=&quot;exceptions#RuntimeError&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d3b80318020b568e71a46fcb6e3119618b228bc" translate="yes" xml:space="preserve">
          <source>Call the underlying &lt;code&gt;PlaySound()&lt;/code&gt; function from the Platform API. The &lt;em&gt;sound&lt;/em&gt; parameter may be a filename, a system sound alias, audio data as a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;, or &lt;code&gt;None&lt;/code&gt;. Its interpretation depends on the value of &lt;em&gt;flags&lt;/em&gt;, which can be a bitwise ORed combination of the constants described below. If the &lt;em&gt;sound&lt;/em&gt; parameter is &lt;code&gt;None&lt;/code&gt;, any currently playing waveform sound is stopped. If the system indicates an error, &lt;a href=&quot;exceptions#RuntimeError&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6bc544aaad9220f5dcb4037a85c3e70a21c3401" translate="yes" xml:space="preserve">
          <source>Call this function to specify a recording source. Returns a bitmask indicating the new recording source (or sources) if successful; raises &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; if an invalid source was specified. To set the current recording source to the microphone input:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="128871044105014d5a62307b275a122d3b3e78fc" translate="yes" xml:space="preserve">
          <source>Call to set a new value for the context variable in the current context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b55289fd0c473d42c2d6be6391e6a9f53a24056" translate="yes" xml:space="preserve">
          <source>Callable</source>
          <target state="translated">Callable</target>
        </trans-unit>
        <trans-unit id="8b20b70beb4a64c315031bb8bb78e087da52d53f" translate="yes" xml:space="preserve">
          <source>Callable object that constructs a test suite from a list of tests. No methods on the resulting object are needed. The default value is the &lt;a href=&quot;#unittest.TestSuite&quot;&gt;&lt;code&gt;TestSuite&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bc76aaa0fb105a3d567c6b50b1f0736290bd16e" translate="yes" xml:space="preserve">
          <source>Callable type; &lt;code&gt;Callable[[int], str]&lt;/code&gt; is a function of (int) -&amp;gt; str.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f5b0450323457809cb7416078a9c6b54c6e8c40" translate="yes" xml:space="preserve">
          <source>Callback Handles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04f9a377a5245adf1c0c727ef509b19ea04d764a" translate="yes" xml:space="preserve">
          <source>Callback functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8889c6972a5b2469ab9e81893d59faa1f3c65b7e" translate="yes" xml:space="preserve">
          <source>Callbacks are called in the order in which they are registered. Each callback will be called exactly once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8e22fb29e8e152e750614c8b3bc9be34b585202" translate="yes" xml:space="preserve">
          <source>Callbacks registered with &lt;a href=&quot;#asyncio.Future.add_done_callback&quot;&gt;&lt;code&gt;asyncio.Future.add_done_callback()&lt;/code&gt;&lt;/a&gt; are not called immediately. They are scheduled with &lt;a href=&quot;asyncio-eventloop#asyncio.loop.call_soon&quot;&gt;&lt;code&gt;loop.call_soon()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad0a4411519272abaad0d5e7e3113fe5f371db24" translate="yes" xml:space="preserve">
          <source>Callbacks should complete immediately since otherwise the thread which handles the results will get blocked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="403e946147c23a181f1511885c98cc2805b30e14" translate="yes" xml:space="preserve">
          <source>Callbacks taking longer than 100ms are logged. The &lt;code&gt;loop.slow_callback_duration&lt;/code&gt; attribute can be used to set the minimum execution duration in seconds that is considered &amp;ldquo;slow&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fd73468e637a25aae99b12cfc723b07e5b72a4e" translate="yes" xml:space="preserve">
          <source>Callbacks to Python for the various steps of MSI creation are currently not exposed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4a1965f31efd22ed43a1ff8b9fd47be00549c25" translate="yes" xml:space="preserve">
          <source>Called after the &lt;a href=&quot;#socketserver.BaseRequestHandler.handle&quot;&gt;&lt;code&gt;handle()&lt;/code&gt;&lt;/a&gt; method to perform any clean-up actions required. The default implementation does nothing. If &lt;a href=&quot;#socketserver.BaseRequestHandler.setup&quot;&gt;&lt;code&gt;setup()&lt;/code&gt;&lt;/a&gt; raises an exception, this function will not be called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1362dc5d1e6bf75e0cc3251664dec655024b4702" translate="yes" xml:space="preserve">
          <source>Called after the test case &lt;em&gt;test&lt;/em&gt; has been executed, regardless of the outcome.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cf1ea40660aa308b2a80eb6ed925c83028b5285" translate="yes" xml:space="preserve">
          <source>Called at the end of a CDATA section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29de25fc0a839a0eff2d7b9cb3fc5f0583cc7099" translate="yes" xml:space="preserve">
          <source>Called at the start of a CDATA section. This and &lt;a href=&quot;#xml.parsers.expat.xmlparser.EndCdataSectionHandler&quot;&gt;&lt;code&gt;EndCdataSectionHandler&lt;/code&gt;&lt;/a&gt; are needed to be able to identify the syntactical start and end for CDATA sections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77c92e0ccaa38c90faa94b0fa33a5eccb775c601" translate="yes" xml:space="preserve">
          <source>Called before the &lt;a href=&quot;#socketserver.BaseRequestHandler.handle&quot;&gt;&lt;code&gt;handle()&lt;/code&gt;&lt;/a&gt; method to perform any initialization actions required. The default implementation does nothing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb95815021a99d97e202ab300b0985a814991b7a" translate="yes" xml:space="preserve">
          <source>Called by the parser to give the application a locator for locating the origin of document events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be01e974e6d417e15234574f4368a9b6bc8a28af" translate="yes" xml:space="preserve">
          <source>Called by the server&amp;rsquo;s constructor to activate the server. The default behavior for a TCP server just invokes &lt;a href=&quot;socket#socket.socket.listen&quot;&gt;&lt;code&gt;listen()&lt;/code&gt;&lt;/a&gt; on the server&amp;rsquo;s socket. May be overridden.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e787c3c273aa363aff918a9d06907484b8d5d91" translate="yes" xml:space="preserve">
          <source>Called by the server&amp;rsquo;s constructor to bind the socket to the desired address. May be overridden.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8ecb1f0ef62b2e83924331808e4e401b5daa58a" translate="yes" xml:space="preserve">
          <source>Called each time around the asynchronous loop to determine whether a channel&amp;rsquo;s socket should be added to the list on which read events can occur. The default method simply returns &lt;code&gt;True&lt;/code&gt;, indicating that by default, all channels will be interested in read events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f58bd0b869a1d21a99b2c683b53040cd3d970fd6" translate="yes" xml:space="preserve">
          <source>Called each time around the asynchronous loop to determine whether a channel&amp;rsquo;s socket should be added to the list on which write events can occur. The default method simply returns &lt;code&gt;True&lt;/code&gt;, indicating that by default, all channels will be interested in write events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39465ea3b515751242f0b2339a37f5bd19e9dd5b" translate="yes" xml:space="preserve">
          <source>Called for all entity declarations. For parameter and internal entities, &lt;em&gt;value&lt;/em&gt; will be a string giving the declared contents of the entity; this will be &lt;code&gt;None&lt;/code&gt; for external entities. The &lt;em&gt;notationName&lt;/em&gt; parameter will be &lt;code&gt;None&lt;/code&gt; for parsed entities, and the name of the notation for unparsed entities. &lt;em&gt;is_parameter_entity&lt;/em&gt; will be true if the entity is a parameter entity or false for general entities (most applications only need to be concerned with general entities). This is only available starting with version 1.95.0 of the Expat library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d614becb7000a1bb805517aa8d3765a41ede38de" translate="yes" xml:space="preserve">
          <source>Called for any characters in the XML document for which no applicable handler has been specified. This means characters that are part of a construct which could be reported, but for which no handler has been supplied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65104a0a441fac3b68b4f415ba2cdf55b05bdb64" translate="yes" xml:space="preserve">
          <source>Called for character data. This will be called for normal character data, CDATA marked content, and ignorable whitespace. Applications which must distinguish these cases can use the &lt;a href=&quot;#xml.parsers.expat.xmlparser.StartCdataSectionHandler&quot;&gt;&lt;code&gt;StartCdataSectionHandler&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#xml.parsers.expat.xmlparser.EndCdataSectionHandler&quot;&gt;&lt;code&gt;EndCdataSectionHandler&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#xml.parsers.expat.xmlparser.ElementDeclHandler&quot;&gt;&lt;code&gt;ElementDeclHandler&lt;/code&gt;&lt;/a&gt; callbacks to collect the required information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="351051ff1c33be49862a2797c6123d5fa7394782" translate="yes" xml:space="preserve">
          <source>Called for comments. &lt;em&gt;data&lt;/em&gt; is the text of the comment, excluding the leading &lt;code&gt;'&amp;lt;!-&lt;/code&gt;&lt;code&gt;-'&lt;/code&gt; and trailing &lt;code&gt;'-&lt;/code&gt;&lt;code&gt;-&amp;gt;'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3da84a39794c83e95aea42a553e2c15a43b19b7c" translate="yes" xml:space="preserve">
          <source>Called for each declared attribute for an element type. If an attribute list declaration declares three attributes, this handler is called three times, once for each attribute. &lt;em&gt;elname&lt;/em&gt; is the name of the element to which the declaration applies and &lt;em&gt;attname&lt;/em&gt; is the name of the attribute declared. The attribute type is a string passed as &lt;em&gt;type&lt;/em&gt;; the possible values are &lt;code&gt;'CDATA'&lt;/code&gt;, &lt;code&gt;'ID'&lt;/code&gt;, &lt;code&gt;'IDREF'&lt;/code&gt;, &amp;hellip; &lt;em&gt;default&lt;/em&gt; gives the default value for the attribute used when the attribute is not specified by the document instance, or &lt;code&gt;None&lt;/code&gt; if there is no default value (&lt;code&gt;#IMPLIED&lt;/code&gt; values). If the attribute is required to be given in the document instance, &lt;em&gt;required&lt;/em&gt; will be true. This requires Expat version 1.95.0 or newer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2da069c998b581663a5c7cca6e3b4d6abde5056a" translate="yes" xml:space="preserve">
          <source>Called for every processing instruction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bd8719a321134b502f88d1bcdde6054d154c2a5" translate="yes" xml:space="preserve">
          <source>Called for notation declarations. &lt;em&gt;notationName&lt;/em&gt;, &lt;em&gt;base&lt;/em&gt;, and &lt;em&gt;systemId&lt;/em&gt;, and &lt;em&gt;publicId&lt;/em&gt; are strings if given. If the public identifier is omitted, &lt;em&gt;publicId&lt;/em&gt; will be &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0120d7d44d9dafd4e24a71d36f3590d5701cfffc" translate="yes" xml:space="preserve">
          <source>Called for references to external entities. &lt;em&gt;base&lt;/em&gt; is the current base, as set by a previous call to &lt;a href=&quot;#xml.parsers.expat.xmlparser.SetBase&quot;&gt;&lt;code&gt;SetBase()&lt;/code&gt;&lt;/a&gt;. The public and system identifiers, &lt;em&gt;systemId&lt;/em&gt; and &lt;em&gt;publicId&lt;/em&gt;, are strings if given; if the public identifier is not given, &lt;em&gt;publicId&lt;/em&gt; will be &lt;code&gt;None&lt;/code&gt;. The &lt;em&gt;context&lt;/em&gt; value is opaque and should only be used as described below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d63a76f0bc6dffffa93ff65ecb72fb2a176eaad7" translate="yes" xml:space="preserve">
          <source>Called for the end of every element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22c0081cf331d749adba48c6dfc5bea84d876ac4" translate="yes" xml:space="preserve">
          <source>Called for the start of every element. &lt;em&gt;name&lt;/em&gt; is a string containing the element name, and &lt;em&gt;attributes&lt;/em&gt; is the element attributes. If &lt;a href=&quot;#xml.parsers.expat.xmlparser.ordered_attributes&quot;&gt;&lt;code&gt;ordered_attributes&lt;/code&gt;&lt;/a&gt; is true, this is a list (see &lt;a href=&quot;#xml.parsers.expat.xmlparser.ordered_attributes&quot;&gt;&lt;code&gt;ordered_attributes&lt;/code&gt;&lt;/a&gt; for a full description). Otherwise it&amp;rsquo;s a dictionary mapping names to values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0203abda3fe131b18ed78f796cbf6a741ee9708" translate="yes" xml:space="preserve">
          <source>Called for unparsed (NDATA) entity declarations. This is only present for version 1.2 of the Expat library; for more recent versions, use &lt;a href=&quot;#xml.parsers.expat.xmlparser.EntityDeclHandler&quot;&gt;&lt;code&gt;EntityDeclHandler&lt;/code&gt;&lt;/a&gt; instead. (The underlying function in the Expat library has been declared obsolete.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e2b4db57a4a964b6e5ec2da7ad036f7149b4e6d" translate="yes" xml:space="preserve">
          <source>Called if the XML document hasn&amp;rsquo;t been declared as being a standalone document. This happens when there is an external subset or a reference to a parameter entity, but the XML declaration does not set standalone to &lt;code&gt;yes&lt;/code&gt; in an XML declaration. If this handler returns &lt;code&gt;0&lt;/code&gt;, then the parser will raise an &lt;code&gt;XML_ERROR_NOT_STANDALONE&lt;/code&gt; error. If this handler is not set, no exception is raised by the parser for this condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="801c462bf8afe04b4c72101c72079853f7d04683" translate="yes" xml:space="preserve">
          <source>Called on listening channels (passive openers) when a connection can be established with a new remote endpoint that has issued a &lt;a href=&quot;#asyncore.dispatcher.connect&quot;&gt;&lt;code&gt;connect()&lt;/code&gt;&lt;/a&gt; call for the local endpoint. Deprecated in version 3.2; use &lt;a href=&quot;#asyncore.dispatcher.handle_accepted&quot;&gt;&lt;code&gt;handle_accepted()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd7cf28533b52eaa266a093228069b68199a5fea" translate="yes" xml:space="preserve">
          <source>Called on listening channels (passive openers) when a connection has been established with a new remote endpoint that has issued a &lt;a href=&quot;#asyncore.dispatcher.connect&quot;&gt;&lt;code&gt;connect()&lt;/code&gt;&lt;/a&gt; call for the local endpoint. &lt;em&gt;sock&lt;/em&gt; is a &lt;em&gt;new&lt;/em&gt; socket object usable to send and receive data on the connection, and &lt;em&gt;addr&lt;/em&gt; is the address bound to the socket on the other end of the connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9c67282703698d858525bac6d78cc5bb4989fe8" translate="yes" xml:space="preserve">
          <source>Called once after all tests are executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a74a05f7d7947e682973dd1f19b882d09b4329a5" translate="yes" xml:space="preserve">
          <source>Called once before any tests are executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e35b66cd6779c0829508f7b48a7c4fdfc2b4a8b1" translate="yes" xml:space="preserve">
          <source>Called once for each element type declaration. &lt;em&gt;name&lt;/em&gt; is the name of the element type, and &lt;em&gt;model&lt;/em&gt; is a representation of the content model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99180e6e064ef2e1830ee080f5f17fb849c73d41" translate="yes" xml:space="preserve">
          <source>Called to allocate a new receive buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f36d0aaf4ae2f0e89cb6e1a5cc810871d238565a" translate="yes" xml:space="preserve">
          <source>Called when Expat begins parsing the document type declaration (&lt;code&gt;&amp;lt;!DOCTYPE
...&lt;/code&gt;). The &lt;em&gt;doctypeName&lt;/em&gt; is provided exactly as presented. The &lt;em&gt;systemId&lt;/em&gt; and &lt;em&gt;publicId&lt;/em&gt; parameters give the system and public identifiers if specified, or &lt;code&gt;None&lt;/code&gt; if omitted. &lt;em&gt;has_internal_subset&lt;/em&gt; will be true if the document contains and internal document declaration subset. This requires Expat version 1.2 or newer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae0ea24c7f1016a8815afdfabf7bf52f1032bc2a" translate="yes" xml:space="preserve">
          <source>Called when Expat is done parsing the document type declaration. This requires Expat version 1.2 or newer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00da34713091416f249b29a3e0e2a884fef5439b" translate="yes" xml:space="preserve">
          <source>Called when a connection is made.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="741d85fe818b7c6722691252d741e01026dc63d9" translate="yes" xml:space="preserve">
          <source>Called when a datagram is received.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed7a2a610a007eb5620d97017bd585811b8fb138" translate="yes" xml:space="preserve">
          <source>Called when a datagram is received. &lt;em&gt;data&lt;/em&gt; is a bytes object containing the incoming data. &lt;em&gt;addr&lt;/em&gt; is the address of the peer sending the data; the exact format depends on the transport.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c89041e063612781bc79fd90b882ce6363d749a9" translate="yes" xml:space="preserve">
          <source>Called when a header is added to an &lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;email.compat32-message#email.message.Message&quot;&gt;&lt;code&gt;Message&lt;/code&gt;&lt;/a&gt; object. If the returned value is not &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt;, and there are already a number of headers with the name &lt;em&gt;name&lt;/em&gt; greater than or equal to the value returned, a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="441a5c99fdf19bde8078414cfda746533c1653c3" translate="yes" xml:space="preserve">
          <source>Called when a previous send or receive operation raises an &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f4505983f471951335f7e31e8370e2c3e1eef2d" translate="yes" xml:space="preserve">
          <source>Called when a previous send or receive operation raises an &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt;. &lt;em&gt;exc&lt;/em&gt; is the &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cec60647698fb6d07c4d99119e7c1c797af31359" translate="yes" xml:space="preserve">
          <source>Called when a subtest finishes. &lt;em&gt;test&lt;/em&gt; is the test case corresponding to the test method. &lt;em&gt;subtest&lt;/em&gt; is a custom &lt;a href=&quot;#unittest.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; instance describing the subtest.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4255302d67790092ae3618fe040548705ab7253" translate="yes" xml:space="preserve">
          <source>Called when an EOF is received.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47163a325e380e3b03b46ed04459bfa4ee2e8228" translate="yes" xml:space="preserve">
          <source>Called when an element contains a namespace declaration. Namespace declarations are processed before the &lt;a href=&quot;#xml.parsers.expat.xmlparser.StartElementHandler&quot;&gt;&lt;code&gt;StartElementHandler&lt;/code&gt;&lt;/a&gt; is called for the element on which declarations are placed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2c94edfe84e7229cf18a7a214117aee9eed9dc7" translate="yes" xml:space="preserve">
          <source>Called when an exception has occurred but there is no way for Python to handle it. For example, when a destructor raises an exception or during garbage collection (&lt;a href=&quot;gc#gc.collect&quot;&gt;&lt;code&gt;gc.collect()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="decbf1665099d80c2457790e7b6f7145eae20cca" translate="yes" xml:space="preserve">
          <source>Called when an exception is raised and not otherwise handled. The default version prints a condensed traceback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00f56e20a5f519f2df2677ed26f8bbdfc4194b95" translate="yes" xml:space="preserve">
          <source>Called when one of the pipes communicating with the child process is closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3b78dd745e04601bc99bad202195cb9c98fe85a" translate="yes" xml:space="preserve">
          <source>Called when some data is received.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="217344b70c9efea012a06dc52d9ac41b017812ed" translate="yes" xml:space="preserve">
          <source>Called when some data is received. &lt;em&gt;data&lt;/em&gt; is a non-empty bytes object containing the incoming data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff5adab8eb2686ba2906090a9199bb5cdb69d605" translate="yes" xml:space="preserve">
          <source>Called when the XML declaration is parsed. The XML declaration is the (optional) declaration of the applicable version of the XML recommendation, the encoding of the document text, and an optional &amp;ldquo;standalone&amp;rdquo; declaration. &lt;em&gt;version&lt;/em&gt; and &lt;em&gt;encoding&lt;/em&gt; will be strings, and &lt;em&gt;standalone&lt;/em&gt; will be &lt;code&gt;1&lt;/code&gt; if the document is declared standalone, &lt;code&gt;0&lt;/code&gt; if it is declared not to be standalone, or &lt;code&gt;-1&lt;/code&gt; if the standalone clause was omitted. This is only available with Expat version 1.95.0 or newer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5766546dd2741e6e89fd53d02804d20e27709e2" translate="yes" xml:space="preserve">
          <source>Called when the active opener&amp;rsquo;s socket actually makes a connection. Might send a &amp;ldquo;welcome&amp;rdquo; banner, or initiate a protocol negotiation with the remote endpoint, for example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9af5edeb8bc5f7967f0e571ce0a3a075f8fd9e8a" translate="yes" xml:space="preserve">
          <source>Called when the asynchronous loop detects that a &lt;code&gt;read()&lt;/code&gt; call on the channel&amp;rsquo;s socket will succeed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc3738bfd6a9cf8bf34f1ac672ffbd485175ed82" translate="yes" xml:space="preserve">
          <source>Called when the asynchronous loop detects that a writable socket can be written. Often this method will implement the necessary buffering for performance. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33318d6af2ebe985c2637e467125192cbc339cd8" translate="yes" xml:space="preserve">
          <source>Called when the buffer was updated with the received data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab708144e4a924706380437c0bb8e5327c6947eb" translate="yes" xml:space="preserve">
          <source>Called when the child process has exited.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bbfaa09ac05c5e53f9ef4d80b462f8d81592e3e" translate="yes" xml:space="preserve">
          <source>Called when the child process writes data into its &lt;em&gt;stdout&lt;/em&gt; or &lt;em&gt;stderr&lt;/em&gt; pipe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1686e3fdec5180bf19f3cb72d575edd1dbb61a00" translate="yes" xml:space="preserve">
          <source>Called when the child process writes data into its stdout or stderr pipe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cf89c3402691b9fff6df51c9daaeebdfe6a4405" translate="yes" xml:space="preserve">
          <source>Called when the closing tag is reached for an element that contained a namespace declaration. This is called once for each namespace declaration on the element in the reverse of the order for which the &lt;a href=&quot;#xml.parsers.expat.xmlparser.StartNamespaceDeclHandler&quot;&gt;&lt;code&gt;StartNamespaceDeclHandler&lt;/code&gt;&lt;/a&gt; was called to indicate the start of each namespace declaration&amp;rsquo;s scope. Calls to this handler are made after the corresponding &lt;a href=&quot;#xml.parsers.expat.xmlparser.EndElementHandler&quot;&gt;&lt;code&gt;EndElementHandler&lt;/code&gt;&lt;/a&gt; for the end of the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de2b9ca8645846a4d95bf9e4c667f941ca95e222" translate="yes" xml:space="preserve">
          <source>Called when the connection is lost or closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c28a8d4d7a87754487f88f39c810f03649a21a58" translate="yes" xml:space="preserve">
          <source>Called when the incoming data stream matches the termination condition set by &lt;a href=&quot;#asynchat.async_chat.set_terminator&quot;&gt;&lt;code&gt;set_terminator()&lt;/code&gt;&lt;/a&gt;. The default method, which must be overridden, raises a &lt;a href=&quot;exceptions#NotImplementedError&quot;&gt;&lt;code&gt;NotImplementedError&lt;/code&gt;&lt;/a&gt; exception. The buffered input data should be available via an instance attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d24725944aa6176d132adcaebbb36c1ac3216a80" translate="yes" xml:space="preserve">
          <source>Called when the other end signals it won&amp;rsquo;t send any more data (for example by calling &lt;a href=&quot;#asyncio.WriteTransport.write_eof&quot;&gt;&lt;code&gt;transport.write_eof()&lt;/code&gt;&lt;/a&gt;, if the other end also uses asyncio).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5d3e1abf1d11f3b9d7a488f3431793eac7214f5" translate="yes" xml:space="preserve">
          <source>Called when the parser encounters a recoverable error. If this method does not raise an exception, parsing may continue, but further document information should not be expected by the application. Allowing the parser to continue may allow additional errors to be discovered in the input document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a62d16cb22215bf3b54762151690d3ecc53cad75" translate="yes" xml:space="preserve">
          <source>Called when the parser encounters an error it cannot recover from; parsing is expected to terminate when this method returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6264ba30b36eafdf4baf216460a08047c4851de" translate="yes" xml:space="preserve">
          <source>Called when the parser presents minor warning information to the application. Parsing is expected to continue when this method returns, and document information will continue to be passed to the application. Raising an exception in this method will cause parsing to end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0970e02d9cddb591bda4674612ee5443cfa2c8ce" translate="yes" xml:space="preserve">
          <source>Called when the socket is closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9e2a9b663e100b719f6e5a0e4ab0f562c5a4596" translate="yes" xml:space="preserve">
          <source>Called when the test case &lt;em&gt;test&lt;/em&gt; fails, but was marked with the &lt;a href=&quot;#unittest.expectedFailure&quot;&gt;&lt;code&gt;expectedFailure()&lt;/code&gt;&lt;/a&gt; decorator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f3969e6db8fa4f1fa14bbbd6ec0bfecc01de4e7" translate="yes" xml:space="preserve">
          <source>Called when the test case &lt;em&gt;test&lt;/em&gt; is about to be run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bca7207440759b2e171906cb5da70bee86eb49dd" translate="yes" xml:space="preserve">
          <source>Called when the test case &lt;em&gt;test&lt;/em&gt; is skipped. &lt;em&gt;reason&lt;/em&gt; is the reason the test gave for skipping.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7792b25bb80d9fc1481932f914cc3076c1a0edae" translate="yes" xml:space="preserve">
          <source>Called when the test case &lt;em&gt;test&lt;/em&gt; raises an unexpected exception. &lt;em&gt;err&lt;/em&gt; is a tuple of the form returned by &lt;a href=&quot;sys#sys.exc_info&quot;&gt;&lt;code&gt;sys.exc_info()&lt;/code&gt;&lt;/a&gt;: &lt;code&gt;(type, value,
traceback)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbc5c4bec80f4d248644d9d310ffed0fe88dd5a9" translate="yes" xml:space="preserve">
          <source>Called when the test case &lt;em&gt;test&lt;/em&gt; signals a failure. &lt;em&gt;err&lt;/em&gt; is a tuple of the form returned by &lt;a href=&quot;sys#sys.exc_info&quot;&gt;&lt;code&gt;sys.exc_info()&lt;/code&gt;&lt;/a&gt;: &lt;code&gt;(type, value, traceback)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35b7e26d8a3f934c9efa4654a919c2f1f7206b0f" translate="yes" xml:space="preserve">
          <source>Called when the test case &lt;em&gt;test&lt;/em&gt; succeeds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a5700f77862534b91aa33efd9ced9dd36c831e9" translate="yes" xml:space="preserve">
          <source>Called when the test case &lt;em&gt;test&lt;/em&gt; was marked with the &lt;a href=&quot;#unittest.expectedFailure&quot;&gt;&lt;code&gt;expectedFailure()&lt;/code&gt;&lt;/a&gt; decorator, but succeeded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="335a8d2c36029276f348c7d71a0dff500bddd0fa" translate="yes" xml:space="preserve">
          <source>Called when the transport&amp;rsquo;s buffer drains below the low water mark.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5eb66717be824c508e56c27e35477c9e0358d90" translate="yes" xml:space="preserve">
          <source>Called when the transport&amp;rsquo;s buffer drains below the low watermark.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f77e65961b22377db69c25dfb4af7c7d875153a0" translate="yes" xml:space="preserve">
          <source>Called when the transport&amp;rsquo;s buffer goes over the high water mark.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a28c5e7c0ef64102b186d5d206a6f283c697c4aa" translate="yes" xml:space="preserve">
          <source>Called when the transport&amp;rsquo;s buffer goes over the high watermark.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbfb1d9c7d0ef0efa9c5a37e71ccc5ce31643ace" translate="yes" xml:space="preserve">
          <source>Called when there is out of band (OOB) data for a socket connection. This will almost never happen, as OOB is tenuously supported and rarely used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="560f42342f7c53c6ccd34f45c7b1575469d33ce3" translate="yes" xml:space="preserve">
          <source>Called with &lt;em&gt;data&lt;/em&gt; holding an arbitrary amount of received data. The default method, which must be overridden, raises a &lt;a href=&quot;exceptions#NotImplementedError&quot;&gt;&lt;code&gt;NotImplementedError&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91f63fb778fbf778d23c69d5a31e985a9cacf308" translate="yes" xml:space="preserve">
          <source>Calling</source>
          <target state="translated">Calling</target>
        </trans-unit>
        <trans-unit id="3d8468dadcc6dc3c3c75017a499b07b830ae67a0" translate="yes" xml:space="preserve">
          <source>Calling &lt;a href=&quot;#concurrent.futures.Executor&quot;&gt;&lt;code&gt;Executor&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#concurrent.futures.Future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt; methods from a callable submitted to a &lt;a href=&quot;#concurrent.futures.ProcessPoolExecutor&quot;&gt;&lt;code&gt;ProcessPoolExecutor&lt;/code&gt;&lt;/a&gt; will result in deadlock.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d69aeba19e5cb43b48a5d360b7df2ecdb98d992b" translate="yes" xml:space="preserve">
          <source>Calling &lt;a href=&quot;#os.putenv&quot;&gt;&lt;code&gt;putenv()&lt;/code&gt;&lt;/a&gt; directly does not change &lt;code&gt;os.environ&lt;/code&gt;, so it&amp;rsquo;s better to modify &lt;code&gt;os.environ&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eee933557219c597f6fed04dbb90ef4dcec434a" translate="yes" xml:space="preserve">
          <source>Calling &lt;a href=&quot;asyncio-eventloop#asyncio.loop.set_debug&quot;&gt;&lt;code&gt;loop.set_debug()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9670a395b19eecaf88c4a04d6298d90c49dbf1ba" translate="yes" xml:space="preserve">
          <source>Calling &lt;a href=&quot;functions#help&quot;&gt;&lt;code&gt;help()&lt;/code&gt;&lt;/a&gt; on methods or functions displays the docstrings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a19a87775f3eaa51a81e61cfba22856699ecdc80" translate="yes" xml:space="preserve">
          <source>Calling &lt;a href=&quot;select#select.select&quot;&gt;&lt;code&gt;select()&lt;/code&gt;&lt;/a&gt; tells you that the OS-level socket can be read from (or written to), but it does not imply that there is sufficient data at the upper SSL layer. For example, only part of an SSL frame might have arrived. Therefore, you must be ready to handle &lt;code&gt;SSLSocket.recv()&lt;/code&gt; and &lt;code&gt;SSLSocket.send()&lt;/code&gt; failures, and retry after another call to &lt;a href=&quot;select#select.select&quot;&gt;&lt;code&gt;select()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0952eada586a42848fba2a672aedee433860e7c" translate="yes" xml:space="preserve">
          <source>Calling &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; is only recommended under Unix. Under Windows, the unicode form is the canonical representation of filesystem paths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03276456844659492ffc75282aa43e3258748763" translate="yes" xml:space="preserve">
          <source>Calling &lt;a href=&quot;sys#sys.exit&quot;&gt;&lt;code&gt;sys.exit()&lt;/code&gt;&lt;/a&gt; or raising the &lt;a href=&quot;exceptions#SystemExit&quot;&gt;&lt;code&gt;SystemExit&lt;/code&gt;&lt;/a&gt; exception is equivalent to calling &lt;a href=&quot;#_thread.exit&quot;&gt;&lt;code&gt;_thread.exit()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de19e8ff0314711e715ff2ee16e7a125cb8ae825" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;bytes()&lt;/code&gt; on a &lt;a href=&quot;#wsgiref.headers.Headers&quot;&gt;&lt;code&gt;Headers&lt;/code&gt;&lt;/a&gt; object returns a formatted bytestring suitable for transmission as HTTP response headers. Each header is placed on a line with its value, separated by a colon and a space. Each line is terminated by a carriage return and line feed, and the bytestring is terminated with a blank line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19822677dc19f67d189d9173d5c1e5f48450f08a" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;freeze_support()&lt;/code&gt; has no effect when invoked on any operating system other than Windows. In addition, if the module is being run normally by the Python interpreter on Windows (the program has not been frozen), then &lt;code&gt;freeze_support()&lt;/code&gt; has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eae69e48b97900fa2c5282fbb5099b96c35e0eb3" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;main&lt;/code&gt; actually returns an instance of the &lt;code&gt;TestProgram&lt;/code&gt; class. This stores the result of the tests run as the &lt;code&gt;result&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c64f483b0e216b7f12d66ec62bdce71a6172c93f" translate="yes" xml:space="preserve">
          <source>Calling a &lt;a href=&quot;#gzip.GzipFile&quot;&gt;&lt;code&gt;GzipFile&lt;/code&gt;&lt;/a&gt; object&amp;rsquo;s &lt;code&gt;close()&lt;/code&gt; method does not close &lt;em&gt;fileobj&lt;/em&gt;, since you might wish to append more material after the compressed data. This also allows you to pass an &lt;a href=&quot;io#io.BytesIO&quot;&gt;&lt;code&gt;io.BytesIO&lt;/code&gt;&lt;/a&gt; object opened for writing as &lt;em&gt;fileobj&lt;/em&gt;, and retrieve the resulting memory buffer using the &lt;a href=&quot;io#io.BytesIO&quot;&gt;&lt;code&gt;io.BytesIO&lt;/code&gt;&lt;/a&gt; object&amp;rsquo;s &lt;a href=&quot;io#io.BytesIO.getvalue&quot;&gt;&lt;code&gt;getvalue()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b42370b8643158e19be412878ef354db7c54e6e7" translate="yes" xml:space="preserve">
          <source>Calling functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="918b0be50125b304219dc1e7ea36008d58e2aece" translate="yes" xml:space="preserve">
          <source>Calling functions with your own custom data types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="481ad1a5c8b7b8212a0cabfbd85c9e84e9f49eab" translate="yes" xml:space="preserve">
          <source>Calling functions, continued</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9551807be144bc49e3fb05e792f394fc2c904216" translate="yes" xml:space="preserve">
          <source>Calling the pointer type without an argument creates a &lt;code&gt;NULL&lt;/code&gt; pointer. &lt;code&gt;NULL&lt;/code&gt; pointers have a &lt;code&gt;False&lt;/code&gt; boolean value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="806b766686c40042b74cb0441a76e8486f4bcede" translate="yes" xml:space="preserve">
          <source>Calling the program through the shell is usually not required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aee1763c0b60db5a3fe5b7f25e6dee1315f7450b" translate="yes" xml:space="preserve">
          <source>Calling this during a test method or &lt;a href=&quot;#unittest.TestCase.setUp&quot;&gt;&lt;code&gt;setUp()&lt;/code&gt;&lt;/a&gt; skips the current test. See &lt;a href=&quot;#unittest-skipping&quot;&gt;Skipping tests and expected failures&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="152ea819a2598a98a6695c6405e218396c4c9c81" translate="yes" xml:space="preserve">
          <source>Calling this has the side effect of &amp;ldquo;joining&amp;rdquo; any processes which have already finished.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58199a1a305a1f0aca5e3081bb547455d0d3bbe8" translate="yes" xml:space="preserve">
          <source>Calling this method is equivalent to combining the path with each of the &lt;em&gt;other&lt;/em&gt; arguments in turn:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4464ef39f90ba51711b7c49c234fc763b53db5d2" translate="yes" xml:space="preserve">
          <source>Calling this method should ensure that the data on the output is put into a clean state that allows appending of new fresh data without having to rescan the whole stream to recover state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53de036be65b154c48f391b0361b66610d4e7772" translate="yes" xml:space="preserve">
          <source>Calling this with a true value for &lt;em&gt;flag&lt;/em&gt; (the default) will cause Expat to call the &lt;a href=&quot;#xml.parsers.expat.xmlparser.ExternalEntityRefHandler&quot;&gt;&lt;code&gt;ExternalEntityRefHandler&lt;/code&gt;&lt;/a&gt; with &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; for all arguments to allow an alternate DTD to be loaded. If the document does not contain a document type declaration, the &lt;a href=&quot;#xml.parsers.expat.xmlparser.ExternalEntityRefHandler&quot;&gt;&lt;code&gt;ExternalEntityRefHandler&lt;/code&gt;&lt;/a&gt; will still be called, but the &lt;a href=&quot;#xml.parsers.expat.xmlparser.StartDoctypeDeclHandler&quot;&gt;&lt;code&gt;StartDoctypeDeclHandler&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#xml.parsers.expat.xmlparser.EndDoctypeDeclHandler&quot;&gt;&lt;code&gt;EndDoctypeDeclHandler&lt;/code&gt;&lt;/a&gt; will not be called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="660f2f1f422830bf3130b53dae9a654c10bad506" translate="yes" xml:space="preserve">
          <source>Calls &lt;a href=&quot;#http.server.BaseHTTPRequestHandler.handle_one_request&quot;&gt;&lt;code&gt;handle_one_request()&lt;/code&gt;&lt;/a&gt; once (or, if persistent connections are enabled, multiple times) to handle incoming HTTP requests. You should never need to override it; instead, implement appropriate &lt;code&gt;do_*()&lt;/code&gt; methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3366a95a2015f49377a8674a42cb6074bdff908f" translate="yes" xml:space="preserve">
          <source>Calls &lt;a href=&quot;#importlib.abc.PathEntryFinder.invalidate_caches&quot;&gt;&lt;code&gt;importlib.abc.PathEntryFinder.invalidate_caches()&lt;/code&gt;&lt;/a&gt; on all finders stored in &lt;a href=&quot;sys#sys.path_importer_cache&quot;&gt;&lt;code&gt;sys.path_importer_cache&lt;/code&gt;&lt;/a&gt; that define the method. Otherwise entries in &lt;a href=&quot;sys#sys.path_importer_cache&quot;&gt;&lt;code&gt;sys.path_importer_cache&lt;/code&gt;&lt;/a&gt; set to &lt;code&gt;None&lt;/code&gt; are deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ed6ed6a9a91795ad695fdf0c9cddbad3a8f4520" translate="yes" xml:space="preserve">
          <source>Calls &lt;a href=&quot;#logging.handlers.MemoryHandler.flush&quot;&gt;&lt;code&gt;flush()&lt;/code&gt;&lt;/a&gt;, sets the target to &lt;code&gt;None&lt;/code&gt; and clears the buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f089a197ae0c1f886a720ee5edffdbc231438b5" translate="yes" xml:space="preserve">
          <source>Calls &lt;a href=&quot;#socketserver.BaseServer.finish_request&quot;&gt;&lt;code&gt;finish_request()&lt;/code&gt;&lt;/a&gt; to create an instance of the &lt;a href=&quot;#socketserver.BaseServer.RequestHandlerClass&quot;&gt;&lt;code&gt;RequestHandlerClass&lt;/code&gt;&lt;/a&gt;. If desired, this function can create a new process or thread to handle the request; the &lt;a href=&quot;#socketserver.ForkingMixIn&quot;&gt;&lt;code&gt;ForkingMixIn&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#socketserver.ThreadingMixIn&quot;&gt;&lt;code&gt;ThreadingMixIn&lt;/code&gt;&lt;/a&gt; classes do this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd9fc56c6af9f934102a6baff8962985ad8335f0" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;dict.__setitem__(TOS1[-i], TOS1, TOS)&lt;/code&gt;. Used to implement dict comprehensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="432193830ac0a6453e2593d41fc80f41606cd798" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;list.append(TOS[-i], TOS)&lt;/code&gt;. Used to implement list comprehensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87a290bfd0c5783e4f772da748152bee0dce4438" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;set.add(TOS1[-i], TOS)&lt;/code&gt;. Used to implement set comprehensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3c80151afdc1dc4f1f15ac92a73268592889d32" translate="yes" xml:space="preserve">
          <source>Calls a callable object with positional (if any) and keyword arguments. &lt;em&gt;argc&lt;/em&gt; indicates the total number of positional and keyword arguments. The top element on the stack contains a tuple of keyword argument names. Below that are keyword arguments in the order corresponding to the tuple. Below that are positional arguments, with the right-most parameter on top. Below the arguments is a callable object to call. &lt;code&gt;CALL_FUNCTION_KW&lt;/code&gt; pops all arguments and the callable object off the stack, calls the callable object with those arguments, and pushes the return value returned by the callable object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bcfedcebd017c91ce1d8f3ed2136bb744e4e7e3" translate="yes" xml:space="preserve">
          <source>Calls a callable object with positional arguments. &lt;em&gt;argc&lt;/em&gt; indicates the number of positional arguments. The top of the stack contains positional arguments, with the right-most argument on top. Below the arguments is a callable object to call. &lt;code&gt;CALL_FUNCTION&lt;/code&gt; pops all arguments and the callable object off the stack, calls the callable object with those arguments, and pushes the return value returned by the callable object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3d1c503fdcaa6e6166bf0cc776fada9edcae78d" translate="yes" xml:space="preserve">
          <source>Calls a callable object with variable set of positional and keyword arguments. If the lowest bit of &lt;em&gt;flags&lt;/em&gt; is set, the top of the stack contains a mapping object containing additional keyword arguments. Below that is an iterable object containing positional arguments and a callable object to call. &lt;a href=&quot;#opcode-BUILD_MAP_UNPACK_WITH_CALL&quot;&gt;&lt;code&gt;BUILD_MAP_UNPACK_WITH_CALL&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#opcode-BUILD_TUPLE_UNPACK_WITH_CALL&quot;&gt;&lt;code&gt;BUILD_TUPLE_UNPACK_WITH_CALL&lt;/code&gt;&lt;/a&gt; can be used for merging multiple mapping objects and iterables containing arguments. Before the callable is called, the mapping object and iterable object are each &amp;ldquo;unpacked&amp;rdquo; and their contents passed in as keyword and positional arguments respectively. &lt;code&gt;CALL_FUNCTION_EX&lt;/code&gt; pops all arguments and the callable object off the stack, calls the callable object with those arguments, and pushes the return value returned by the callable object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14d090b39c19089e4c0079421e067e1a44a78f9d" translate="yes" xml:space="preserve">
          <source>Calls a method. &lt;em&gt;argc&lt;/em&gt; is number of positional arguments. Keyword arguments are not supported. This opcode is designed to be used with &lt;a href=&quot;#opcode-LOAD_METHOD&quot;&gt;&lt;code&gt;LOAD_METHOD&lt;/code&gt;&lt;/a&gt;. Positional arguments are on top of the stack. Below them, two items described in &lt;a href=&quot;#opcode-LOAD_METHOD&quot;&gt;&lt;code&gt;LOAD_METHOD&lt;/code&gt;&lt;/a&gt; on the stack. All of them are popped and return value is pushed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21c4bdb16701951fa99b7d99067407eb76c29edd" translate="yes" xml:space="preserve">
          <source>Calls made to the object will be recorded in the attributes like &lt;a href=&quot;#unittest.mock.Mock.call_args&quot;&gt;&lt;code&gt;call_args&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#unittest.mock.Mock.call_args_list&quot;&gt;&lt;code&gt;call_args_list&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec11af0584a15d4c48eb151351a55a5d8097f844" translate="yes" xml:space="preserve">
          <source>Calls super&amp;rsquo;s &lt;code&gt;load_module()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="451d57cc69a8939faa69090b9b01bc1692745d9a" translate="yes" xml:space="preserve">
          <source>Calls to magic methods do not appear in &lt;a href=&quot;#unittest.mock.Mock.method_calls&quot;&gt;&lt;code&gt;method_calls&lt;/code&gt;&lt;/a&gt;, but they are recorded in &lt;a href=&quot;#unittest.mock.Mock.mock_calls&quot;&gt;&lt;code&gt;mock_calls&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="478693ac496b905aca50729a82969165632e4d05" translate="yes" xml:space="preserve">
          <source>Calltips</source>
          <target state="translated">Calltips</target>
        </trans-unit>
        <trans-unit id="561e85d0b0568a50f3de1a1e5711714b9c8953ae" translate="yes" xml:space="preserve">
          <source>Can also be used to distinguish generator-based coroutines from regular generators:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9df6f72ec4df7b0e71a09b1ebf6b53e528ee1af" translate="yes" xml:space="preserve">
          <source>Can be passed to the &lt;em&gt;stdin&lt;/em&gt;, &lt;em&gt;stdout&lt;/em&gt; or &lt;em&gt;stderr&lt;/em&gt; parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c4b8cae3b6474adb23f9cc0e55a8ccddd1ab035" translate="yes" xml:space="preserve">
          <source>Can be raised in situations like setting a result value for a &lt;em&gt;Future&lt;/em&gt; object that already has a result value set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14e2f126cf41bb106a52d147735548c428c60e37" translate="yes" xml:space="preserve">
          <source>Can not access a needed shared library</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e7112996c0bc37c1eee9583cf6ce310abd859a7" translate="yes" xml:space="preserve">
          <source>Can occur with division, modulo division, or when raising a number to a negative power. If this signal is not trapped, returns &lt;code&gt;Infinity&lt;/code&gt; or &lt;code&gt;-Infinity&lt;/code&gt; with the sign determined by the inputs to the calculation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5672ecfe65e7cc180ace87905559dcc51add70d8" translate="yes" xml:space="preserve">
          <source>Canadian</source>
          <target state="translated">Canadian</target>
        </trans-unit>
        <trans-unit id="77dfd2135f4db726c47299bb55be26f7f4525a46" translate="yes" xml:space="preserve">
          <source>Cancel</source>
          <target state="translated">Cancel</target>
        </trans-unit>
        <trans-unit id="dd262b10cc08ccc611018e48c5e1f5adbfe13ab1" translate="yes" xml:space="preserve">
          <source>Cancel the Future and schedule callbacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6645dd31307260ea7a6d4c6bdcdbce033c1f082" translate="yes" xml:space="preserve">
          <source>Cancel the callback. If the callback has already been canceled or executed, this method has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0852b16275ba8ddb4435db48a211abb9fa8adb7d" translate="yes" xml:space="preserve">
          <source>Cancel the last call to &lt;a href=&quot;#faulthandler.dump_traceback_later&quot;&gt;&lt;code&gt;dump_traceback_later()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bf5b2d860f0b8549b244b878f13b62ffd5669f8" translate="yes" xml:space="preserve">
          <source>Cannot assign requested address</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="577bf7f510eba351fd7cb5c994415680c2b49b26" translate="yes" xml:space="preserve">
          <source>Cannot exec a shared library directly</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fc3a76733eb2dd9f75a45feee42b1fad853ee11" translate="yes" xml:space="preserve">
          <source>Cannot send after transport endpoint shutdown</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5b5bacc03e5aad79cf2f41574bbe9e41b9756ab" translate="yes" xml:space="preserve">
          <source>Canonicalization is a way to normalise XML output in a way that allows byte-by-byte comparisons and digital signatures. It reduced the freedom that XML serializers have and instead generates a more constrained XML representation. The main restrictions regard the placement of namespace declarations, the ordering of attributes, and ignorable whitespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8da51ecda68389485ea70d137e71241be83c9f80" translate="yes" xml:space="preserve">
          <source>Capture an exception for later rendering. &lt;em&gt;limit&lt;/em&gt;, &lt;em&gt;lookup_lines&lt;/em&gt; and &lt;em&gt;capture_locals&lt;/em&gt; are as for the &lt;a href=&quot;#traceback.StackSummary&quot;&gt;&lt;code&gt;StackSummary&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="423688cc4e45ae73b2f610db15f924e06ee4e746" translate="yes" xml:space="preserve">
          <source>Capture enough detail about a non-file-based module to permit getting its lines later via &lt;a href=&quot;#linecache.getline&quot;&gt;&lt;code&gt;getline()&lt;/code&gt;&lt;/a&gt; even if &lt;em&gt;module_globals&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt; in the later call. This avoids doing I/O until a line is actually needed, without having to carry the module globals around indefinitely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73ebe9a50fd6ca2d3324832fad422470c3355c9f" translate="yes" xml:space="preserve">
          <source>Captured stderr from the child process. A bytes sequence, or a string if &lt;a href=&quot;#subprocess.run&quot;&gt;&lt;code&gt;run()&lt;/code&gt;&lt;/a&gt; was called with an encoding, errors, or text=True. &lt;code&gt;None&lt;/code&gt; if stderr was not captured.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4547994cede5f7462e17ce8f34c7d4e9e18a3c76" translate="yes" xml:space="preserve">
          <source>Captured stdout from the child process. A bytes sequence, or a string if &lt;a href=&quot;#subprocess.run&quot;&gt;&lt;code&gt;run()&lt;/code&gt;&lt;/a&gt; was called with an encoding, errors, or text=True. &lt;code&gt;None&lt;/code&gt; if stdout was not captured.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d4ff11a778be6ea97e8e96bf8ca5e46cb1aad1e" translate="yes" xml:space="preserve">
          <source>Care must be taken when using objects returned by &lt;a href=&quot;#gc.get_referrers&quot;&gt;&lt;code&gt;get_referrers()&lt;/code&gt;&lt;/a&gt; because some of them could still be under construction and hence in a temporarily invalid state. Avoid using &lt;a href=&quot;#gc.get_referrers&quot;&gt;&lt;code&gt;get_referrers()&lt;/code&gt;&lt;/a&gt; for any purpose other than debugging.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8093a543e2b7a34f5543b74befc660a7463f92a1" translate="yes" xml:space="preserve">
          <source>Caring about security</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="159392d633c2cffbc6a491daf2bedda249a234bf" translate="yes" xml:space="preserve">
          <source>Carriage Return</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19df561b969d0d35d2780bcfc8bbd19894e60070" translate="yes" xml:space="preserve">
          <source>Carriage Return + Line Feed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df10067f5a8780a3c7f1ce6b060b8d78df100b22" translate="yes" xml:space="preserve">
          <source>Carriage return</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d154d3695a2abeb95c90dda3cfea6a363d6009b" translate="yes" xml:space="preserve">
          <source>Cartesian product of input iterables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a3f1fd2b6898c4c599e5bcaae645ca75232a29c" translate="yes" xml:space="preserve">
          <source>Cased characters are those with general category property being one of &amp;ldquo;Lu&amp;rdquo; (Letter, uppercase), &amp;ldquo;Ll&amp;rdquo; (Letter, lowercase), or &amp;ldquo;Lt&amp;rdquo; (Letter, titlecase).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a710c6a25471525747a94389b0048e0c220a994" translate="yes" xml:space="preserve">
          <source>Casefolding is similar to lowercasing but more aggressive because it is intended to remove all case distinctions in a string. For example, the German lowercase letter &lt;code&gt;'&amp;szlig;'&lt;/code&gt; is equivalent to &lt;code&gt;&quot;ss&quot;&lt;/code&gt;. Since it is already lowercase, &lt;a href=&quot;#str.lower&quot;&gt;&lt;code&gt;lower()&lt;/code&gt;&lt;/a&gt; would do nothing to &lt;code&gt;'&amp;szlig;'&lt;/code&gt;; &lt;a href=&quot;#str.casefold&quot;&gt;&lt;code&gt;casefold()&lt;/code&gt;&lt;/a&gt; converts it to &lt;code&gt;&quot;ss&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efd1ea7c76bf8f999ebd22019e740747b2a456ca" translate="yes" xml:space="preserve">
          <source>Cast 1D/bytes to 3D/ints to 1D/signed char:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b51303cb67a2430f894ecc8bed9ea9c39292982e" translate="yes" xml:space="preserve">
          <source>Cast 1D/long to 1D/unsigned bytes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da1e76d74512fdad1c361ba7d43170cf78f598c5" translate="yes" xml:space="preserve">
          <source>Cast 1D/unsigned bytes to 1D/char:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="244de116d5421438d25f58d35698849ba6bc478b" translate="yes" xml:space="preserve">
          <source>Cast 1D/unsigned long to 2D/unsigned long:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44236da31f0c60b653269335136ce18d60761f8a" translate="yes" xml:space="preserve">
          <source>Cast a memoryview to a new format or shape. &lt;em&gt;shape&lt;/em&gt; defaults to &lt;code&gt;[byte_length//new_itemsize]&lt;/code&gt;, which means that the result view will be one-dimensional. The return value is a new memoryview, but the buffer itself is not copied. Supported casts are 1D -&amp;gt; C-&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-contiguous&quot;&gt;contiguous&lt;/a&gt; and C-contiguous -&amp;gt; 1D.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f805f9f5e840b86ca6f017c55f16e1c067e2770" translate="yes" xml:space="preserve">
          <source>Cast a value to a type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26fcb69697dc56f3f70bef9888d5cb1a7998908d" translate="yes" xml:space="preserve">
          <source>Catching exceptions from &lt;code&gt;__enter__&lt;/code&gt; methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d705192e4aa89da0d6179e32948da3e1643a4de1" translate="yes" xml:space="preserve">
          <source>Categories of information that can be queried on some transports:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3c686e711e4720f99b4562bb3dbaae7ab658cf2" translate="yes" xml:space="preserve">
          <source>Category</source>
          <target state="translated">Category</target>
        </trans-unit>
        <trans-unit id="dbdfb8cc570311bf0ba41bc653280f8a44570d62" translate="yes" xml:space="preserve">
          <source>Cause requests to go through a proxy. If &lt;em&gt;proxies&lt;/em&gt; is given, it must be a dictionary mapping protocol names to URLs of proxies. The default is to read the list of proxies from the environment variables &lt;code&gt;&amp;lt;protocol&amp;gt;_proxy&lt;/code&gt;. If no proxy environment variables are set, then in a Windows environment proxy settings are obtained from the registry&amp;rsquo;s Internet Settings section, and in a Mac OS X environment proxy information is retrieved from the OS X System Configuration Framework.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d597e2852df34bd068582e30fe2fba007c79c0c6" translate="yes" xml:space="preserve">
          <source>Cause the byte string &lt;em&gt;char&lt;/em&gt; to be &amp;ldquo;pushed back&amp;rdquo; into the console buffer; it will be the next character read by &lt;a href=&quot;#msvcrt.getch&quot;&gt;&lt;code&gt;getch()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#msvcrt.getche&quot;&gt;&lt;code&gt;getche()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6a4d81194f5c12bc93ce83e8500eacd138a85fc" translate="yes" xml:space="preserve">
          <source>Cause the process to sleep until a signal is received; the appropriate handler will then be called. Returns nothing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4238ac8dfef54eb6b06e859f54e8c262bf5d1dd0" translate="yes" xml:space="preserve">
          <source>Causes the resulting RE to match 0 or 1 repetitions of the preceding RE. &lt;code&gt;ab?&lt;/code&gt; will match either &amp;lsquo;a&amp;rsquo; or &amp;lsquo;ab&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6521ef76f5eec86f28e2c3b8bb2db9feebf89b5" translate="yes" xml:space="preserve">
          <source>Causes the resulting RE to match 0 or more repetitions of the preceding RE, as many repetitions as are possible. &lt;code&gt;ab*&lt;/code&gt; will match &amp;lsquo;a&amp;rsquo;, &amp;lsquo;ab&amp;rsquo;, or &amp;lsquo;a&amp;rsquo; followed by any number of &amp;lsquo;b&amp;rsquo;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d769faa26c26a2d62b38a56f95c30aaa3f2dcc80" translate="yes" xml:space="preserve">
          <source>Causes the resulting RE to match 1 or more repetitions of the preceding RE. &lt;code&gt;ab+&lt;/code&gt; will match &amp;lsquo;a&amp;rsquo; followed by any non-zero number of &amp;lsquo;b&amp;rsquo;s; it will not match just &amp;lsquo;a&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9554ee678b921d16d58debb386c31c95e42bd638" translate="yes" xml:space="preserve">
          <source>Causes the resulting RE to match from &lt;em&gt;m&lt;/em&gt; to &lt;em&gt;n&lt;/em&gt; repetitions of the preceding RE, attempting to match as &lt;em&gt;few&lt;/em&gt; repetitions as possible. This is the non-greedy version of the previous qualifier. For example, on the 6-character string &lt;code&gt;'aaaaaa'&lt;/code&gt;, &lt;code&gt;a{3,5}&lt;/code&gt; will match 5 &lt;code&gt;'a'&lt;/code&gt; characters, while &lt;code&gt;a{3,5}?&lt;/code&gt; will only match 3 characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="795e6286cf43bfb04649942f83459b1c010275e9" translate="yes" xml:space="preserve">
          <source>Causes the resulting RE to match from &lt;em&gt;m&lt;/em&gt; to &lt;em&gt;n&lt;/em&gt; repetitions of the preceding RE, attempting to match as many repetitions as possible. For example, &lt;code&gt;a{3,5}&lt;/code&gt; will match from 3 to 5 &lt;code&gt;'a'&lt;/code&gt; characters. Omitting &lt;em&gt;m&lt;/em&gt; specifies a lower bound of zero, and omitting &lt;em&gt;n&lt;/em&gt; specifies an infinite upper bound. As an example, &lt;code&gt;a{4,}b&lt;/code&gt; will match &lt;code&gt;'aaaab'&lt;/code&gt; or a thousand &lt;code&gt;'a'&lt;/code&gt; characters followed by a &lt;code&gt;'b'&lt;/code&gt;, but not &lt;code&gt;'aaab'&lt;/code&gt;. The comma may not be omitted or the modifier would be confused with the previously described form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55a89527100d7affacb785a535913eceec75eda6" translate="yes" xml:space="preserve">
          <source>Caution</source>
          <target state="translated">Caution</target>
        </trans-unit>
        <trans-unit id="4fd03d227374b3a76ae481c4b37cb9b5ca6de82e" translate="yes" xml:space="preserve">
          <source>Caution: Because a &lt;a href=&quot;#weakref.WeakKeyDictionary&quot;&gt;&lt;code&gt;WeakKeyDictionary&lt;/code&gt;&lt;/a&gt; is built on top of a Python dictionary, it must not change size when iterating over it. This can be difficult to ensure for a &lt;a href=&quot;#weakref.WeakKeyDictionary&quot;&gt;&lt;code&gt;WeakKeyDictionary&lt;/code&gt;&lt;/a&gt; because actions performed by the program during iteration may cause items in the dictionary to vanish &amp;ldquo;by magic&amp;rdquo; (as a side effect of garbage collection).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98b54726ce69023dd84eefe17eb5ba78df2551c7" translate="yes" xml:space="preserve">
          <source>Caution: Because a &lt;a href=&quot;#weakref.WeakValueDictionary&quot;&gt;&lt;code&gt;WeakValueDictionary&lt;/code&gt;&lt;/a&gt; is built on top of a Python dictionary, it must not change size when iterating over it. This can be difficult to ensure for a &lt;a href=&quot;#weakref.WeakValueDictionary&quot;&gt;&lt;code&gt;WeakValueDictionary&lt;/code&gt;&lt;/a&gt; because actions performed by the program during iteration may cause items in the dictionary to vanish &amp;ldquo;by magic&amp;rdquo; (as a side effect of garbage collection).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28d65d06b54089952f2efa68f4246e1755f3ffb2" translate="yes" xml:space="preserve">
          <source>Caution: Elements with no subelements will test as &lt;code&gt;False&lt;/code&gt;. This behavior will change in future versions. Use specific &lt;code&gt;len(elem)&lt;/code&gt; or &lt;code&gt;elem is
None&lt;/code&gt; test instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f3877b3dced4906601a483e6cc1de8779bebdad" translate="yes" xml:space="preserve">
          <source>Caution: The result of a &lt;a href=&quot;#difflib.SequenceMatcher.ratio&quot;&gt;&lt;code&gt;ratio()&lt;/code&gt;&lt;/a&gt; call may depend on the order of the arguments. For instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcaa33a7ae44bd5042c37a9cdbea7f843b1cf7c8" translate="yes" xml:space="preserve">
          <source>Caveats</source>
          <target state="translated">Caveats</target>
        </trans-unit>
        <trans-unit id="63266e7267914b07fbf4b164dcc1d84189c65a4c" translate="yes" xml:space="preserve">
          <source>Celtic languages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28b768f0ecfec65d6b6c9d702997b9cead7dfc46" translate="yes" xml:space="preserve">
          <source>Center of keypad</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="171300a9ac9c7382753e5909b51b4d79fa63ad59" translate="yes" xml:space="preserve">
          <source>Central and Eastern Europe</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ce5a81ce01e50b47239445ead0f60c140cd8a07" translate="yes" xml:space="preserve">
          <source>Certain character sets must be encoded with quoted-printable or base64 when used in email headers or bodies. Certain character sets must be converted outright, and are not allowed in email.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="593eb89de1ddc271f51c530034469e3085c08768" translate="yes" xml:space="preserve">
          <source>Certain message labels, called &lt;em&gt;attributes&lt;/em&gt;, are defined by convention to have special meanings. The attributes are as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96f371107c946e6bdcff1f60dfcae4d5e63ab940" translate="yes" xml:space="preserve">
          <source>Certificate chains</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af04086d676f475531671840b684b45828ef8454" translate="yes" xml:space="preserve">
          <source>Certificate handling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3e4eb01f159b35b99f9fe62dc4d20f8175f1cc1" translate="yes" xml:space="preserve">
          <source>Certificates</source>
          <target state="translated">Certificates</target>
        </trans-unit>
        <trans-unit id="b31fec0e4996c70c92887575b6c842980880122b" translate="yes" xml:space="preserve">
          <source>Certificates in a capath directory aren&amp;rsquo;t loaded unless they have been used at least once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f44bf6e31a60aac9e6c0f3359a8b6bc414ff4210" translate="yes" xml:space="preserve">
          <source>Certificates in general are part of a public-key / private-key system. In this system, each &lt;em&gt;principal&lt;/em&gt;, (which may be a machine, or a person, or an organization) is assigned a unique two-part encryption key. One part of the key is public, and is called the &lt;em&gt;public key&lt;/em&gt;; the other part is kept secret, and is called the &lt;em&gt;private key&lt;/em&gt;. The two parts are related, in that if you encrypt a message with one of the parts, you can decrypt it with the other part, and &lt;strong&gt;only&lt;/strong&gt; with the other part.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44b29218c73d6ea8a23ce3115ef57628d41c7a15" translate="yes" xml:space="preserve">
          <source>ChainMap objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad8fbb20f7c181ff05b9615555748be64e9a304f" translate="yes" xml:space="preserve">
          <source>Change a registered file object&amp;rsquo;s monitored events or attached data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="720fee3a19af7ced65149e4a22e579762b9389a4" translate="yes" xml:space="preserve">
          <source>Change or query the current global domain. If &lt;em&gt;domain&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt;, then the current global domain is returned, otherwise the global domain is set to &lt;em&gt;domain&lt;/em&gt;, which is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3a6429f7e6579fa0309e08bdc5f6c3693b41f95" translate="yes" xml:space="preserve">
          <source>Change owner &lt;em&gt;user&lt;/em&gt; and/or &lt;em&gt;group&lt;/em&gt; of the given &lt;em&gt;path&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09d8ae26d89f2e248ecad1dd21602fb29686a880" translate="yes" xml:space="preserve">
          <source>Change system call restart behaviour: if &lt;em&gt;flag&lt;/em&gt; is &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt;, system calls will be restarted when interrupted by signal &lt;em&gt;signalnum&lt;/em&gt;, otherwise system calls will be interrupted. Returns nothing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ca2b292f4c9a625946f55ff3c28a36f19ed515f" translate="yes" xml:space="preserve">
          <source>Change the current working directory to &lt;em&gt;path&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf70a04b333f0d38b491b7a16cb497d498023d97" translate="yes" xml:space="preserve">
          <source>Change the current working directory to the directory represented by the file descriptor &lt;em&gt;fd&lt;/em&gt;. The descriptor must refer to an opened directory, not an open file. As of Python 3.3, this is equivalent to &lt;code&gt;os.chdir(fd)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8145354c4ed04786c9a7472ae8fc8c08f7017a36" translate="yes" xml:space="preserve">
          <source>Change the definition of a color, taking the number of the color to be changed followed by three RGB values (for the amounts of red, green, and blue components). The value of &lt;em&gt;color_number&lt;/em&gt; must be between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;COLORS&lt;/code&gt;. Each of &lt;em&gt;r&lt;/em&gt;, &lt;em&gt;g&lt;/em&gt;, &lt;em&gt;b&lt;/em&gt;, must be a value between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1000&lt;/code&gt;. When &lt;a href=&quot;#curses.init_color&quot;&gt;&lt;code&gt;init_color()&lt;/code&gt;&lt;/a&gt; is used, all occurrences of that color on the screen immediately change to the new definition. This function is a no-op on most terminals; it is active only if &lt;a href=&quot;#curses.can_change_color&quot;&gt;&lt;code&gt;can_change_color()&lt;/code&gt;&lt;/a&gt; returns &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f821e2b635ee244bfcd104b3ba7e7f0b6bd58dd6" translate="yes" xml:space="preserve">
          <source>Change the definition of a color-pair. It takes three arguments: the number of the color-pair to be changed, the foreground color number, and the background color number. The value of &lt;em&gt;pair_number&lt;/em&gt; must be between &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;COLOR_PAIRS - 1&lt;/code&gt; (the &lt;code&gt;0&lt;/code&gt; color pair is wired to white on black and cannot be changed). The value of &lt;em&gt;fg&lt;/em&gt; and &lt;em&gt;bg&lt;/em&gt; arguments must be between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;COLORS&lt;/code&gt;. If the color-pair was previously initialized, the screen is refreshed and all occurrences of that color-pair are changed to the new definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b5d5e0b32ce8c95402eb88a7a7b5dccea7a3ea9" translate="yes" xml:space="preserve">
          <source>Change the encoding used to return translated messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d813d2b0c8655445b9bdee3148830836fbd7c1ba" translate="yes" xml:space="preserve">
          <source>Change the file mode and permissions, like &lt;a href=&quot;os#os.chmod&quot;&gt;&lt;code&gt;os.chmod()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68384080fd64e6315b2be960052dc10ac16429df" translate="yes" xml:space="preserve">
          <source>Change the mode of &lt;em&gt;path&lt;/em&gt; to the numeric &lt;em&gt;mode&lt;/em&gt;. &lt;em&gt;mode&lt;/em&gt; may take one of the following values (as defined in the &lt;a href=&quot;stat#module-stat&quot;&gt;&lt;code&gt;stat&lt;/code&gt;&lt;/a&gt; module) or bitwise ORed combinations of them:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af5c714b67933437a9225d675e7562cfea02ccfe" translate="yes" xml:space="preserve">
          <source>Change the mode of &lt;em&gt;path&lt;/em&gt; to the numeric &lt;em&gt;mode&lt;/em&gt;. If path is a symlink, this affects the symlink rather than the target. See the docs for &lt;a href=&quot;#os.chmod&quot;&gt;&lt;code&gt;chmod()&lt;/code&gt;&lt;/a&gt; for possible values of &lt;em&gt;mode&lt;/em&gt;. As of Python 3.3, this is equivalent to &lt;code&gt;os.chmod(path, mode, follow_symlinks=False)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e7345c82847185620cc38ebe06addd033602411" translate="yes" xml:space="preserve">
          <source>Change the mode of file descriptor &lt;em&gt;fd&lt;/em&gt; to cbreak. If &lt;em&gt;when&lt;/em&gt; is omitted, it defaults to &lt;code&gt;termios.TCSAFLUSH&lt;/code&gt;, and is passed to &lt;a href=&quot;termios#termios.tcsetattr&quot;&gt;&lt;code&gt;termios.tcsetattr()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a5db458a46551c5ecac55206b3bbf06290c21a2" translate="yes" xml:space="preserve">
          <source>Change the mode of the file descriptor &lt;em&gt;fd&lt;/em&gt; to raw. If &lt;em&gt;when&lt;/em&gt; is omitted, it defaults to &lt;code&gt;termios.TCSAFLUSH&lt;/code&gt;, and is passed to &lt;a href=&quot;termios#termios.tcsetattr&quot;&gt;&lt;code&gt;termios.tcsetattr()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df529e83cc35551c127351a817d58aacc06e2dc6" translate="yes" xml:space="preserve">
          <source>Change the mode of the file given by &lt;em&gt;fd&lt;/em&gt; to the numeric &lt;em&gt;mode&lt;/em&gt;. See the docs for &lt;a href=&quot;#os.chmod&quot;&gt;&lt;code&gt;chmod()&lt;/code&gt;&lt;/a&gt; for possible values of &lt;em&gt;mode&lt;/em&gt;. As of Python 3.3, this is equivalent to &lt;code&gt;os.chmod(fd, mode)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c65ef473b406e7a78a2438b2eac9ebbd360c5139" translate="yes" xml:space="preserve">
          <source>Change the owner and group id of &lt;em&gt;path&lt;/em&gt; to the numeric &lt;em&gt;uid&lt;/em&gt; and &lt;em&gt;gid&lt;/em&gt;. This function will not follow symbolic links. As of Python 3.3, this is equivalent to &lt;code&gt;os.chown(path, uid, gid, follow_symlinks=False)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53894f22457d3df831a1c43a42294a0ef3b2fb59" translate="yes" xml:space="preserve">
          <source>Change the owner and group id of &lt;em&gt;path&lt;/em&gt; to the numeric &lt;em&gt;uid&lt;/em&gt; and &lt;em&gt;gid&lt;/em&gt;. To leave one of the ids unchanged, set it to -1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aaf122e7b3c8a3c54989cd0e607442620ec1bc9" translate="yes" xml:space="preserve">
          <source>Change the owner and group id of the file given by &lt;em&gt;fd&lt;/em&gt; to the numeric &lt;em&gt;uid&lt;/em&gt; and &lt;em&gt;gid&lt;/em&gt;. To leave one of the ids unchanged, set it to -1. See &lt;a href=&quot;#os.chown&quot;&gt;&lt;code&gt;chown()&lt;/code&gt;&lt;/a&gt;. As of Python 3.3, this is equivalent to &lt;code&gt;os.chown(fd, uid,
gid)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f96743593cb1166cb78e769c4514c65ee913d6fa" translate="yes" xml:space="preserve">
          <source>Change the root directory of the current process to &lt;em&gt;path&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dbec226ba1ea5a114d1a674323a81c92420418e" translate="yes" xml:space="preserve">
          <source>Change the stream position to the given &lt;em&gt;offset&lt;/em&gt;. Behaviour depends on the &lt;em&gt;whence&lt;/em&gt; parameter. The default value for &lt;em&gt;whence&lt;/em&gt; is &lt;code&gt;SEEK_SET&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c17be4282df288dbb931de7338a89692f2dc6186" translate="yes" xml:space="preserve">
          <source>Change the stream position to the given byte &lt;em&gt;offset&lt;/em&gt;. &lt;em&gt;offset&lt;/em&gt; is interpreted relative to the position indicated by &lt;em&gt;whence&lt;/em&gt;. The default value for &lt;em&gt;whence&lt;/em&gt; is &lt;code&gt;SEEK_SET&lt;/code&gt;. Values for &lt;em&gt;whence&lt;/em&gt; are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2b45f97c3816b692c7c6ebac63371564ba94541" translate="yes" xml:space="preserve">
          <source>Change the window associated with the panel to the window &lt;em&gt;win&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b9a4f44f13c67b53c0c39dc7ad38c6964f33b26" translate="yes" xml:space="preserve">
          <source>Change what&amp;rsquo;s displayed on the screen to reflect the current contents of the line buffer. This calls &lt;code&gt;rl_redisplay()&lt;/code&gt; in the underlying library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c732229eb2217bd97c6bd80a55ad6f97228dff7a" translate="yes" xml:space="preserve">
          <source>Changed in version 3.0: Always returns an unsigned value. To generate the same numeric value across all Python versions and platforms, use &lt;code&gt;adler32(data) &amp;amp; 0xffffffff&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af9cfb7d30fb25ce18cb797168a3c1e9efef7530" translate="yes" xml:space="preserve">
          <source>Changed in version 3.0: Always returns an unsigned value. To generate the same numeric value across all Python versions and platforms, use &lt;code&gt;crc32(data) &amp;amp; 0xffffffff&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6ac82e23a0e683e2884b82b1078851acda1268d" translate="yes" xml:space="preserve">
          <source>Changed in version 3.0: The default protocol is 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="537cdf8485e4b74a48de09b94e218b3fbaa6a3a0" translate="yes" xml:space="preserve">
          <source>Changed in version 3.0: The result is always unsigned. To generate the same numeric value across all Python versions and platforms, use &lt;code&gt;crc32(data) &amp;amp; 0xffffffff&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca60d28ccc4a7e66ce5bc6b399015fa8167505ac" translate="yes" xml:space="preserve">
          <source>Changed in version 3.1: &lt;code&gt;%f&lt;/code&gt; conversions for numbers whose absolute value is over 1e50 are no longer replaced by &lt;code&gt;%g&lt;/code&gt; conversions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1173409e497ba0f89793fec2308d3254cabb00d3" translate="yes" xml:space="preserve">
          <source>Changed in version 3.1: &lt;em&gt;parse_constant&lt;/em&gt; doesn&amp;rsquo;t get called on &amp;lsquo;null&amp;rsquo;, &amp;lsquo;true&amp;rsquo;, &amp;lsquo;false&amp;rsquo; anymore.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98f8f18853a8b4317612d7c8d8eb2cc038e404e8" translate="yes" xml:space="preserve">
          <source>Changed in version 3.1: &lt;em&gt;processName&lt;/em&gt; was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="519e56ce3db5b6a8b5e1c5a832ab37d71bc7122a" translate="yes" xml:space="preserve">
          <source>Changed in version 3.1: Added &lt;em&gt;step&lt;/em&gt; argument and allowed non-integer arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18771a790afbfdddac37407e4815957052f7e408" translate="yes" xml:space="preserve">
          <source>Changed in version 3.1: Added ability to execute packages by looking for a &lt;code&gt;__main__&lt;/code&gt; submodule.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="142d8fecd4e04596e1fae7705ec9ee9d81d4a35a" translate="yes" xml:space="preserve">
          <source>Changed in version 3.1: Added dictionary interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c90ad976d4a85ce730b40e8e0eeb478580b3770c" translate="yes" xml:space="preserve">
          <source>Changed in version 3.1: Added named component attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9931f13212eb404b313097ca72242e0f021f85a3" translate="yes" xml:space="preserve">
          <source>Changed in version 3.1: Added support for &lt;em&gt;object_pairs_hook&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da787e41d3ea18a184ea8dc78391eea722e041f8" translate="yes" xml:space="preserve">
          <source>Changed in version 3.1: Added support for &lt;em&gt;rename&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76189e970a56ec69292d860a438d7884fd0dcf9b" translate="yes" xml:space="preserve">
          <source>Changed in version 3.1: Added support for keyword arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab7a9e70170f3b6797e31ed22603f88f6edc0f30" translate="yes" xml:space="preserve">
          <source>Changed in version 3.1: Added support for named tuples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06093f314fffd9ea0f6ab2afb1c9ccc74a0b1bb5" translate="yes" xml:space="preserve">
          <source>Changed in version 3.1: Added the &lt;code&gt;','&lt;/code&gt; option (see also &lt;a href=&quot;https://www.python.org/dev/peps/pep-0378&quot; id=&quot;index-7&quot;&gt;&lt;strong&gt;PEP 378&lt;/strong&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae999bfe2033504c97db0921b7b1bb40df869bcc" translate="yes" xml:space="preserve">
          <source>Changed in version 3.1: Added the ability to use &lt;a href=&quot;#unittest.TestCase.assertRaises&quot;&gt;&lt;code&gt;assertRaises()&lt;/code&gt;&lt;/a&gt; as a context manager.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e98cbd97169623f07073269d171b8ded92167da8" translate="yes" xml:space="preserve">
          <source>Changed in version 3.1: Added the automatic calling of type-specific equality function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a479c7ad525f3b08fd169b58a9cb8db33d5f6243" translate="yes" xml:space="preserve">
          <source>Changed in version 3.1: Added the optional flags argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="554b1b2304c0d90d9b2b907e595d0a78f8d4455d" translate="yes" xml:space="preserve">
          <source>Changed in version 3.1: In 3.0, some of the integer formats wrapped out-of-range values and raised &lt;a href=&quot;exceptions#DeprecationWarning&quot;&gt;&lt;code&gt;DeprecationWarning&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;#struct.error&quot;&gt;&lt;code&gt;struct.error&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e3417ca9b87c5d6447c9359dc309580cc761cf6" translate="yes" xml:space="preserve">
          <source>Changed in version 3.1: In 3.1 this was changed to add the test name to the short description even in the presence of a docstring. This caused compatibility issues with unittest extensions and adding the test name was moved to the &lt;a href=&quot;#unittest.TextTestResult&quot;&gt;&lt;code&gt;TextTestResult&lt;/code&gt;&lt;/a&gt; in Python 3.2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cccb32a71e28853fea0261c4d14121efb0ea169b" translate="yes" xml:space="preserve">
          <source>Changed in version 3.1: On some systems, conversion using the file system encoding may fail. In this case, Python uses the &lt;a href=&quot;codecs#surrogateescape&quot;&gt;surrogateescape encoding error handler&lt;/a&gt;, which means that undecodable bytes are replaced by a Unicode character U+DCxx on decoding, and these are again translated to the original byte on encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bd78f8dbabc55380af14f3be182d4724bfe458f" translate="yes" xml:space="preserve">
          <source>Changed in version 3.1: Previously, the method always returned &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7c3b3eb4eb12d37f5604d4759015f3dd08a8783" translate="yes" xml:space="preserve">
          <source>Changed in version 3.1: Returns an &lt;a href=&quot;#collections.OrderedDict&quot;&gt;&lt;code&gt;OrderedDict&lt;/code&gt;&lt;/a&gt; instead of a regular &lt;a href=&quot;stdtypes#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e00980a47ec6bb0dc861a5371f679640ca93ca22" translate="yes" xml:space="preserve">
          <source>Changed in version 3.1: Support for file and file-like objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8675c984e7a97790076cdc19f4bbc5d455db908c" translate="yes" xml:space="preserve">
          <source>Changed in version 3.1: Support for keyword arguments added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfd57caaab5e32d8413393d8341c30bdbd6beb46" translate="yes" xml:space="preserve">
          <source>Changed in version 3.1: Support for the &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement was added, along with the &lt;em&gt;mtime&lt;/em&gt; constructor argument and &lt;a href=&quot;#gzip.GzipFile.mtime&quot;&gt;&lt;code&gt;mtime&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68cbcfa945c3ab476d29bf74cebbf18903fca840" translate="yes" xml:space="preserve">
          <source>Changed in version 3.1: Support for the &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16ec7d22d5a19e1a65d9de3f92edc97be9b828a1" translate="yes" xml:space="preserve">
          <source>Changed in version 3.1: The &lt;em&gt;exit&lt;/em&gt; parameter was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85c9028d3e54d7442ac2c89adce91dccb81cc825" translate="yes" xml:space="preserve">
          <source>Changed in version 3.1: The Python GIL is released to allow other threads to run while hash updates on data larger than 2047 bytes is taking place when using hash algorithms supplied by OpenSSL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e57d384dfe6f8503f30b9002a3f912771e2280f" translate="yes" xml:space="preserve">
          <source>Changed in version 3.1: The default &lt;em&gt;dict_type&lt;/em&gt; is &lt;a href=&quot;collections#collections.OrderedDict&quot;&gt;&lt;code&gt;collections.OrderedDict&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="166fdb71d51607a94eaefa24aa94facef19086e4" translate="yes" xml:space="preserve">
          <source>Changed in version 3.1: The positional argument specifiers can be omitted for &lt;a href=&quot;stdtypes#str.format&quot;&gt;&lt;code&gt;str.format()&lt;/code&gt;&lt;/a&gt;, so &lt;code&gt;'{} {}'.format(a, b)&lt;/code&gt; is equivalent to &lt;code&gt;'{0} {1}'.format(a, b)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af94eafce482ef601e340833d27776b69c7d138c" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2.1: (See: &lt;a href=&quot;https://bugs.python.org/issue12168&quot;&gt;bpo-12168&lt;/a&gt;.) In earlier versions, the message sent to the syslog daemons was always terminated with a NUL byte, because early versions of these daemons expected a NUL terminated message - even though it&amp;rsquo;s not in the relevant specification (&lt;a href=&quot;https://tools.ietf.org/html/rfc5424.html&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 5424&lt;/strong&gt;&lt;/a&gt;). More recent versions of these daemons don&amp;rsquo;t expect the NUL byte but strip it off if it&amp;rsquo;s there, and even more recent daemons (which adhere more closely to RFC 5424) pass the NUL byte on as part of the message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0afed93b0d4eeb509a03bbaeb5f09426e0cb4f5e" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: &lt;a href=&quot;#configparser.ConfigParser.readfp&quot;&gt;&lt;code&gt;readfp()&lt;/code&gt;&lt;/a&gt; now iterates on &lt;em&gt;fp&lt;/em&gt; instead of calling &lt;code&gt;fp.readline()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc88da30808c82c1293400c16a27a8c2cc56c0bc" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: &lt;a href=&quot;#doctest.IGNORE_EXCEPTION_DETAIL&quot;&gt;&lt;code&gt;IGNORE_EXCEPTION_DETAIL&lt;/code&gt;&lt;/a&gt; now also ignores any information relating to the module containing the exception under test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5749096281f219a4f7f01001ef8349b74685730f" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: &lt;a href=&quot;#random.randrange&quot;&gt;&lt;code&gt;randrange()&lt;/code&gt;&lt;/a&gt; is more sophisticated about producing equally distributed values. Formerly it used a style like &lt;code&gt;int(random()*n)&lt;/code&gt; which could produce slightly uneven distributions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1a03e3a0b540c3e0799128fcb0c81c27ad48daf" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: &lt;a href=&quot;#sys.getfilesystemencoding&quot;&gt;&lt;code&gt;getfilesystemencoding()&lt;/code&gt;&lt;/a&gt; result cannot be &lt;code&gt;None&lt;/code&gt; anymore.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1fe0ed8d5f6cf5c86138332c63f8876ecd77f3e" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: &lt;a href=&quot;#unittest.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; can be instantiated successfully without providing a &lt;em&gt;methodName&lt;/em&gt;. This makes it easier to experiment with &lt;a href=&quot;#unittest.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; from the interactive interpreter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11e46f9e4172df72572f9d6819077089c579a690" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: &lt;a href=&quot;#unittest.TestCase.assertAlmostEqual&quot;&gt;&lt;code&gt;assertAlmostEqual()&lt;/code&gt;&lt;/a&gt; automatically considers almost equal objects that compare equal. &lt;a href=&quot;#unittest.TestCase.assertNotAlmostEqual&quot;&gt;&lt;code&gt;assertNotAlmostEqual()&lt;/code&gt;&lt;/a&gt; automatically fails if the objects compare equal. Added the &lt;em&gt;delta&lt;/em&gt; keyword argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1440ccb5c6457c67fd2eaef179f83349fe55195f" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: &lt;a href=&quot;#unittest.TestCase.assertMultiLineEqual&quot;&gt;&lt;code&gt;assertMultiLineEqual()&lt;/code&gt;&lt;/a&gt; added as the default type equality function for comparing strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b18478e566722631d21aa1bace3810cb3eb58b72" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: &lt;a href=&quot;exceptions#DeprecationWarning&quot;&gt;&lt;code&gt;DeprecationWarning&lt;/code&gt;&lt;/a&gt; is now ignored by default in addition to &lt;a href=&quot;exceptions#PendingDeprecationWarning&quot;&gt;&lt;code&gt;PendingDeprecationWarning&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b513252ea03b9cf35084f00ed4e34bbd1cc20e9c" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: &lt;code&gt;.pdbrc&lt;/code&gt; can now contain commands that continue debugging, such as &lt;a href=&quot;#pdbcommand-continue&quot;&gt;&lt;code&gt;continue&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#pdbcommand-next&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt;. Previously, these commands had no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa43f0f89cbecd00094a85fb4045a869f7281905" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: &lt;code&gt;\v&lt;/code&gt; and &lt;code&gt;\f&lt;/code&gt; added to list of line boundaries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7e75fb78cd26379d954e12ef5234de7a52c6b62" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: &lt;code&gt;get()&lt;/code&gt; and &lt;code&gt;setdefault()&lt;/code&gt; are now available in all database modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a75d96e8964b95835e6a5e529fe78ac0f23d39de" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: &lt;em&gt;allow_no_value&lt;/em&gt;, &lt;em&gt;delimiters&lt;/em&gt;, &lt;em&gt;comment_prefixes&lt;/em&gt;, &lt;em&gt;strict&lt;/em&gt;, &lt;em&gt;empty_lines_in_values&lt;/em&gt;, &lt;em&gt;default_section&lt;/em&gt; and &lt;em&gt;interpolation&lt;/em&gt; were added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e594a4ee16262a6e7522482f009a5ec444f09452" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: &lt;em&gt;cafile&lt;/em&gt; and &lt;em&gt;capath&lt;/em&gt; were added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2ec6e2fdb50647cf66302dc95dbff5617b96801" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: &lt;em&gt;context&lt;/em&gt; and &lt;em&gt;check_hostname&lt;/em&gt; were added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5a0d479fa6487dad7c15e153649c02b213272aa" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: &lt;em&gt;context&lt;/em&gt; parameter added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f8b1f0a75e484a9e3da3c653455fa8d265d59eb" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: &lt;em&gt;group_pattern&lt;/em&gt; was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d177c10f7ae05b83a95f60175c6c95933ca55d16" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: &lt;em&gt;msg&lt;/em&gt; may be a byte string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c18b19d6a3a1ad22a8592b55eaed6c35d7116886" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: &lt;em&gt;rest&lt;/em&gt; parameter added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4d4044434743f26e635d36dedee7e5da7432978" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: &lt;em&gt;restore_signals&lt;/em&gt; was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7ceed06f63f522a2c6c89c405613683d83c004b" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: &lt;em&gt;socktype&lt;/em&gt; was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74c3419027915a376860800bf38f30017740fe7c" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: &lt;em&gt;source_address&lt;/em&gt; was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7df77fa9670053bba47d3f6222e1b1217fbd68d3" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: &lt;em&gt;source_address&lt;/em&gt;, &lt;em&gt;context&lt;/em&gt; and &lt;em&gt;check_hostname&lt;/em&gt; were added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="865e3b43949c5287decaadb22d5be7bc611fbd8a" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: &lt;em&gt;start_new_session&lt;/em&gt; was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89bf6cd3c4a8cc51ae68f7bf85567b3d7fd617de" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: &lt;em&gt;usenetrc&lt;/em&gt; is now &lt;code&gt;False&lt;/code&gt; by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8a24a8f5bf7489afacc0ce16caa9c66433cf199" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: A non-integral input to this method is rounded to the nearest integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8001c2d7dff5693f988f217294c8b124912fb37" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Accept only bytestring or bytearray objects as input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4c69f6f5a6a3551d477ed0665bf350dad82cdbd" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Add &lt;em&gt;encoding&lt;/em&gt; and &lt;em&gt;errors&lt;/em&gt; parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95146296986280f06bd7941d66bbacce0695fe8e" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Added &lt;code&gt;__cached__&lt;/code&gt; global variable (see &lt;a href=&quot;https://www.python.org/dev/peps/pep-3147&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;PEP 3147&lt;/strong&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07fae133f75001a2a732672901971c94a1f4061a" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Added &lt;code&gt;quiet&lt;/code&gt; attribute for the new &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#cmdoption-q&quot;&gt;&lt;code&gt;-q&lt;/code&gt;&lt;/a&gt; flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c9512db24aec78fc6542ff47cf959a2f83c0d7a" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Added IPv6 URL parsing capabilities.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79094348357033d5e927f23c98241c49d111ed87" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Added Windows support.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="480acc287e38687f3ef5650c7eccb818a3e21c2b" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Added context manager support.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc9ba3341a1b901857e585af842c2b08364073a0" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Added handling for the &lt;code&gt;'unknown-8bit'&lt;/code&gt; charset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="549354cce4521a9c4bf7a7245a5483449a24ad2b" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Added support for &lt;code&gt;'-'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9180901b20f11c3133e92f9dacae7935f2711dcb" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Added support for Windows 6.0 (Vista) symbolic links.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c366fa5ade51e32fea64adcc3b1f6f1e81df0c9" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Added support for Windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="469d75436829af56018ceef670537dd9044a9872" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Added support for re-encoding &lt;code&gt;8bit&lt;/code&gt; message bodies, and the &lt;em&gt;linesep&lt;/em&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dca06c6c2149e6f07668eb8f164761284614298" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Added support for thread.lock, threading.Lock, and code objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bd1166778c87aaab7fde797e17d4fb99046f320" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Added the &lt;code&gt;-b&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a1c01f7c9ee395a389a87156c2f80a73fe112fd" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Added the &lt;code&gt;-i&lt;/code&gt;, &lt;code&gt;-b&lt;/code&gt; and &lt;code&gt;-h&lt;/code&gt; options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45a9131a48eacb60df6688ff99f9470b1394bf10" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Added the &lt;code&gt;exception&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b3a01e20bc80c50227b9a340b5f4656bee1bb29" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Added the &lt;code&gt;warnings&lt;/code&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81442b4926b1035ffeaccc10c8f658f3d59c4232" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Added the &lt;em&gt;copy_function&lt;/em&gt; argument to be able to provide a custom copy function. Added the &lt;em&gt;ignore_dangling_symlinks&lt;/em&gt; argument to silent dangling symlinks errors when &lt;em&gt;symlinks&lt;/em&gt; is false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4221ca1f11c112f09e5e2b91693db1fc3776f479" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Added the &lt;em&gt;domain&lt;/em&gt; keyword.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecae6c9f77c99d62ef971607bff6d981b4fe9e2b" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Added the &lt;em&gt;filter&lt;/em&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff6c6c7f2630c352c419994e02f9ee70a0816de8" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Added the &lt;em&gt;keyencoding&lt;/em&gt; parameter; previously, keys were always encoded in UTF-8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f8bdf084b8f5707f13645513600a38d1043cf77" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Added the &lt;em&gt;legacy&lt;/em&gt; and &lt;em&gt;optimize&lt;/em&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67eded9a162e2bc2873e2f53db81e167b6cb466a" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Added the &lt;em&gt;linesep&lt;/em&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5678c03072e837c04923b69de2361551c6247532" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Added the &lt;em&gt;set_attrs&lt;/em&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2f72be3f9a65dff6184ff6e47c9ca263c92e02e" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Allow giving an explicit line number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf5de0213714792b3246865cac5703fb306b66cc" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Allow strings for &lt;em&gt;indent&lt;/em&gt; in addition to integers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a7944d5ce300c7fefb8f768051ece16ac2d7ada" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Allow the use of named arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5f5a817cb4deb5ccd507b97d769d0e714778cdb" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Allowed use of Windows and Mac newlines. Also input in &lt;code&gt;'exec'&lt;/code&gt; mode does not have to end in a newline anymore. Added the &lt;em&gt;optimize&lt;/em&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3496fec5acfb82776a9952b9af315ad6b3ba0d9c" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Also print the contents of the &lt;a href=&quot;#gc.garbage&quot;&gt;&lt;code&gt;garbage&lt;/code&gt;&lt;/a&gt; list at &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-interpreter-shutdown&quot;&gt;interpreter shutdown&lt;/a&gt;, if it isn&amp;rsquo;t empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="082f1488f814f78ee7963e385f5470bfa4093668" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Arguments &lt;em&gt;raw&lt;/em&gt;, &lt;em&gt;vars&lt;/em&gt; and &lt;em&gt;fallback&lt;/em&gt; are keyword only to protect users from trying to use the third argument as the &lt;em&gt;fallback&lt;/em&gt; fallback (especially when using the mapping protocol).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0d8cda96d1da943a01d314969b0a311aa34d00b" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Audio device objects also support the context management protocol, i.e. they can be used in a &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d987439a5207e099ba743bd71e847e2de6871ed1" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Before 3.2, the &lt;em&gt;errors&lt;/em&gt; argument was ignored; &lt;code&gt;'replace'&lt;/code&gt; was always used to encode, and &lt;code&gt;'ignore'&lt;/code&gt; to decode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bce632982ec84e304a30210dfa7bfcf510ecbe67" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Can be used as a context manager.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06eaefb51ca841a37adf6964acaca16bb31f3436" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Changed default value of &lt;em&gt;cfile&lt;/em&gt; to be &lt;a href=&quot;https://www.python.org/dev/peps/pep-3147&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;PEP 3147&lt;/strong&gt;&lt;/a&gt;-compliant. Previous default was &lt;em&gt;file&lt;/em&gt; + &lt;code&gt;'c'&lt;/code&gt; (&lt;code&gt;'o'&lt;/code&gt; if optimization was enabled). Also added the &lt;em&gt;optimize&lt;/em&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91bbf6bb7557737c6535e849923476920591ca35" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Changed to a named tuple and added &lt;em&gt;service_pack_minor&lt;/em&gt;, &lt;em&gt;service_pack_major&lt;/em&gt;, &lt;em&gt;suite_mask&lt;/em&gt;, and &lt;em&gt;product_type&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1b301b4e24498ff77a90a9f9ea22308220fcaf9" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Floor division and true division of a &lt;a href=&quot;#datetime.timedelta&quot;&gt;&lt;code&gt;timedelta&lt;/code&gt;&lt;/a&gt; object by another &lt;a href=&quot;#datetime.timedelta&quot;&gt;&lt;code&gt;timedelta&lt;/code&gt;&lt;/a&gt; object are now supported, as are remainder operations and the &lt;a href=&quot;functions#divmod&quot;&gt;&lt;code&gt;divmod()&lt;/code&gt;&lt;/a&gt; function. True division and multiplication of a &lt;a href=&quot;#datetime.timedelta&quot;&gt;&lt;code&gt;timedelta&lt;/code&gt;&lt;/a&gt; object by a &lt;a href=&quot;functions#float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt; object are now supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48008acfcb7672e1030900f7a5fa36487b3652fe" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: HTTPS virtual hosts are now supported if possible (that is, if &lt;a href=&quot;ssl#ssl.HAS_SNI&quot;&gt;&lt;code&gt;ssl.HAS_SNI&lt;/code&gt;&lt;/a&gt; is true).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c4b663f1d51707ae57f011c2fc308f36f6354b4" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Headers are stored in an internal buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5412a97c69b590b4082d1955349638a9a099943" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: If this list is non-empty at &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-interpreter-shutdown&quot;&gt;interpreter shutdown&lt;/a&gt;, a &lt;a href=&quot;exceptions#ResourceWarning&quot;&gt;&lt;code&gt;ResourceWarning&lt;/code&gt;&lt;/a&gt; is emitted, which is silent by default. If &lt;a href=&quot;#gc.DEBUG_UNCOLLECTABLE&quot;&gt;&lt;code&gt;DEBUG_UNCOLLECTABLE&lt;/code&gt;&lt;/a&gt; is set, in addition all uncollectable objects are printed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2187166ae4a844c4fbf025da86ec409be76e1ed9" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Implement the Sequence ABC. Support slicing and negative indices. Test &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt; objects for membership in constant time instead of iterating through all items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b01a529c0e91c8bdc96c7a0fe5f4d9282828ffd0" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: In earlier versions it was only possible to run individual test methods and not modules or classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c679604d3f4a5f2ea2808564626ca197506a4747" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: In earlier versions the &lt;a href=&quot;#unittest.TestSuite&quot;&gt;&lt;code&gt;TestSuite&lt;/code&gt;&lt;/a&gt; accessed tests directly rather than through iteration, so overriding &lt;a href=&quot;#unittest.TestSuite.__iter__&quot;&gt;&lt;code&gt;__iter__()&lt;/code&gt;&lt;/a&gt; wasn&amp;rsquo;t sufficient for providing tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e06b4da7d821464da127e9dff4b0695d9f584a7" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: In previous versions of &lt;a href=&quot;#module-configparser&quot;&gt;&lt;code&gt;configparser&lt;/code&gt;&lt;/a&gt; behaviour matched &lt;code&gt;comment_prefixes=('#',';')&lt;/code&gt; and &lt;code&gt;inline_comment_prefixes=(';',)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e65a3a5f905e29a5e1efa59f5a50b1b1070c7564" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: In previous versions of &lt;a href=&quot;#module-configparser&quot;&gt;&lt;code&gt;configparser&lt;/code&gt;&lt;/a&gt; behaviour matched &lt;code&gt;strict=False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a3903be0c9a2428fbbf132cc5dc080f206385f1" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: In previous versions, &lt;code&gt;strftime()&lt;/code&gt; method was restricted to years &amp;gt;= 1900.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="426cd001c712ea4d25033939aa93bca1d5e9396b" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: In previous versions, keyword arguments were not allowed, and &lt;em&gt;ident&lt;/em&gt; was required. The default for &lt;em&gt;ident&lt;/em&gt; was dependent on the system libraries, and often was &lt;code&gt;python&lt;/code&gt; instead of the name of the Python program file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="514d373f8db984e9d8a9cfa034390d4569e5d97e" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Lock acquires can now be interrupted by signals on POSIX.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="260a5484e295b0a8a411195c0e7ed247487ba6c9" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Lock acquisition can now be interrupted by signals on POSIX if the underlying threading implementation supports it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73a8834cb33b90ddc72bafe63ac0cd014f324f80" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Many of the following methods have been reworked and fixed, which makes them incompatible with their 3.1 counterparts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80914831c8c876414979ed5a17b1ecac84bf0beb" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Missing attributes no longer trigger an &lt;a href=&quot;exceptions#AttributeError&quot;&gt;&lt;code&gt;AttributeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e906fa70135479b900c049ca5b2b7325d88b34b" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Mixed-type comparisons between &lt;a href=&quot;#decimal.Decimal&quot;&gt;&lt;code&gt;Decimal&lt;/code&gt;&lt;/a&gt; instances and other numeric types are now fully supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="344fc1c93edef2918356a487d8e7f6c10370bf98" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Mixer objects also support the context management protocol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e63a2481f0bb3c20efd1c4c5707d3bc530d3f05" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Moved to the version 2 scheme which uses all of the bits in a string seed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bacb802d11c3941ef5337c0c0adcda227900c940" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: NetBSD and DragonFlyBSD support added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da2c556fcda902ef2f7f11664ea16d758192c3c7" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: New optional arguments &lt;em&gt;filters&lt;/em&gt; and &lt;em&gt;quiet&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d34719b4cb072e9694ccd8ad2aec00916b626eb2" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Non-string section names raise &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24ba9b7cdb45eadf74a01028f28e107f5a9cd0f8" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Now allows bytes and set literals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aae05129cbe571df19f8e1cc5ca944abc4be0047" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: On Unix, keys and values are bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ca7ec51f96ec3c5b6eb9ee49b1e95699d985bed" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Previously, Windows registry settings were ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2247d320b943c5cdf34c67d7e6f0cc0ba062c0a1" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Previously, the method always returned &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf515833f315d71fbba59347219b1b477c0d1ca8" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Query parameter supports bytes and string objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1b0c897b099fdbe4a1aa45f40bf3077a985c559" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Renamed to &lt;a href=&quot;#unittest.TestCase.assertRaisesRegex&quot;&gt;&lt;code&gt;assertRaisesRegex()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e53faa183a9cfae37b8fbe8e1f41ee6693848a0" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Result is a structured object rather than a simple 2-tuple.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6697529eef880c398a98085c5cbf3c7b69126b0a" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Support for &lt;code&gt;load_tests&lt;/code&gt; added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="280d81cdfc99b4afaff4e4cdee97b2ca85b2ad82" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Support for binary input was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a45ec181452190330caf36e750398207ca02ff4" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Support for the &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-context-manager&quot;&gt;context manager&lt;/a&gt; protocol was added. Exiting the context manager is equivalent to calling &lt;a href=&quot;#socket.close&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56e0e01f6cbf490e10cc0ba88a686bddb6323b08" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Support for the &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e36025a675382f360658d973b76e045c075fc0cc" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Support for zero-padded and unseekable files was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf176d77cfe5e4c5ff5f74a843c9941676a11c8a" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: The &lt;a href=&quot;#fractions.Fraction&quot;&gt;&lt;code&gt;Fraction&lt;/code&gt;&lt;/a&gt; constructor now accepts &lt;a href=&quot;functions#float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;decimal#decimal.Decimal&quot;&gt;&lt;code&gt;decimal.Decimal&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c263bea410599d3c096b63bf68d6edbcd32ad5e" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: The &lt;a href=&quot;#logging.Logger.isEnabledFor&quot;&gt;&lt;code&gt;isEnabledFor()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#logging.Logger.getEffectiveLevel&quot;&gt;&lt;code&gt;getEffectiveLevel()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#logging.Logger.setLevel&quot;&gt;&lt;code&gt;setLevel()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#logging.Logger.hasHandlers&quot;&gt;&lt;code&gt;hasHandlers()&lt;/code&gt;&lt;/a&gt; methods were added to &lt;a href=&quot;#logging.LoggerAdapter&quot;&gt;&lt;code&gt;LoggerAdapter&lt;/code&gt;&lt;/a&gt;. These methods delegate to the underlying logger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="821c98de5aa5e1367c5a0912cdab39a3348de78a" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: The &lt;code&gt;ST_RDONLY&lt;/code&gt; and &lt;code&gt;ST_NOSUID&lt;/code&gt; constants were added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="410b32ea408f72235962fe8ee07bcc13f80e270a" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: The &lt;code&gt;StreamHandler&lt;/code&gt; class now has a &lt;code&gt;terminator&lt;/code&gt; attribute, default value &lt;code&gt;'\n'&lt;/code&gt;, which is used as the terminator when writing a formatted record to a stream. If you don&amp;rsquo;t want this newline termination, you can set the handler instance&amp;rsquo;s &lt;code&gt;terminator&lt;/code&gt; attribute to the empty string. In earlier versions, the terminator was hardcoded as &lt;code&gt;'\n'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72c2c94192fa10b872808954f3d1ff1f97b6f8e1" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: The &lt;code&gt;filename&lt;/code&gt; attribute and &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__init__&quot;&gt;&lt;code&gt;__init__()&lt;/code&gt;&lt;/a&gt; argument were renamed to &lt;code&gt;source&lt;/code&gt; for consistency.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cef6597e8ab6923cefbf16e03239ee94b125bf5" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: The &lt;em&gt;compress_type&lt;/em&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d85e436ba5584921f5cd44287fd50d97b0ca32ca" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: The &lt;em&gt;level&lt;/em&gt; parameter now accepts a string representation of the level such as &amp;lsquo;INFO&amp;rsquo; as an alternative to the integer constants such as &lt;code&gt;INFO&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04b23a70f35eccca14f9e49a512c0d6df5b07dba" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: The &lt;em&gt;level&lt;/em&gt; parameter now accepts a string representation of the level such as &amp;lsquo;INFO&amp;rsquo; as an alternative to the integer constants such as &lt;code&gt;INFO&lt;/code&gt;. Note, however, that levels are internally stored as integers, and methods such as e.g. &lt;a href=&quot;#logging.Logger.getEffectiveLevel&quot;&gt;&lt;code&gt;getEffectiveLevel()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#logging.Logger.isEnabledFor&quot;&gt;&lt;code&gt;isEnabledFor()&lt;/code&gt;&lt;/a&gt; will return/expect to be passed integers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4a83589980dcac997cc66caa4064cb244aaa7c3" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: The &lt;em&gt;pass_fds&lt;/em&gt; parameter was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a7e51a2bdaa60d4f178447115479071f535d6e1" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: The &lt;em&gt;path&lt;/em&gt; parameter became optional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a716734e0933b0762aff8d4fd5e75d383df64f5d" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: The &lt;em&gt;stack_info&lt;/em&gt; parameter was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e2a14a99cad50573d58016217c8f9c15c295bf0" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: The &lt;em&gt;style&lt;/em&gt; argument was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f04eebe3baca25e6d1280ffb41a3f3b9803c9c31" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: The &lt;em&gt;style&lt;/em&gt; parameter was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08e4d030bb20c6827465fb995c09d09c1759338d" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: The &lt;em&gt;timeout&lt;/em&gt; parameter is new.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc7d57006e2f4a53cb9bc28c0bc128f66054ff81" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: The &lt;em&gt;verbosity&lt;/em&gt;, &lt;em&gt;failfast&lt;/em&gt;, &lt;em&gt;catchbreak&lt;/em&gt;, &lt;em&gt;buffer&lt;/em&gt; and &lt;em&gt;warnings&lt;/em&gt; parameters were added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4154b321663f905e6d9a5f18ff35b462814e5c3e" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: The argument to the constructor is now permitted to be a &lt;a href=&quot;functions#float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2fca0472a1f56de5a733716fba2853d97f96699" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: The buffered headers are written to the output stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1384575d0c2f2a4cf7f50c85a9443ab1a9b72c69" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: The creation of a &lt;a href=&quot;#logging.LogRecord&quot;&gt;&lt;code&gt;LogRecord&lt;/code&gt;&lt;/a&gt; has been made more configurable by providing a factory which is used to create the record. The factory can be set using &lt;a href=&quot;#logging.getLogRecordFactory&quot;&gt;&lt;code&gt;getLogRecordFactory()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#logging.setLogRecordFactory&quot;&gt;&lt;code&gt;setLogRecordFactory()&lt;/code&gt;&lt;/a&gt; (see this for the factory&amp;rsquo;s signature).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cd17855ab6f9241ec652999c3948d766b8fd5cb" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: The default for &lt;em&gt;close_fds&lt;/em&gt; was changed from &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt; to what is described above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c285606014635e5c94356ec6031a333a7e1132b6" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: The default stream is set to &lt;a href=&quot;sys#sys.stderr&quot;&gt;&lt;code&gt;sys.stderr&lt;/code&gt;&lt;/a&gt; at instantiation time rather than import time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c646a74444be20bed70ff1ca5cb407caf5c3ab3" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: The file object really is a binary file; previously it was incorrectly returned in text mode. Also, the file-like object now supports the context management protocol: you can use a &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement to automatically close it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3e754e99512162722bf322ab3f968d97e61c866" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: The method &lt;code&gt;assertRegexpMatches()&lt;/code&gt; has been renamed to &lt;a href=&quot;#unittest.TestCase.assertRegex&quot;&gt;&lt;code&gt;assertRegex()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c4f59aa7c7cab7bc1520f28770c96e0920935a2" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: The returned dictionary includes additional items such as &lt;code&gt;issuer&lt;/code&gt; and &lt;code&gt;notBefore&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06842c7aaafec60796e6dcbf1c267d287a5971a1" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: The returned socket objects now support the whole socket API, rather than a subset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="929b3dc2fc49d281530d8c7176324f391781f311" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: This class now supports HTTPS virtual hosts if possible (that is, if &lt;a href=&quot;ssl#ssl.HAS_SNI&quot;&gt;&lt;code&gt;ssl.HAS_SNI&lt;/code&gt;&lt;/a&gt; is true).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c19345738626405132916ba5b9242721c2001603" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: This method is applicable only for local hostnames. When a remote hostname is given, an &lt;a href=&quot;urllib.error#urllib.error.URLError&quot;&gt;&lt;code&gt;URLError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aeb7b4d9e29b10e5a14e3f61a2cb4a16c56bf8d" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: URL parsing functions now accept ASCII encoded byte sequences</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69da1bcb321345e640a1b58b0475f66d0334fa9b" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Use &lt;code&gt;'backslashreplace'&lt;/code&gt; error handler on &lt;a href=&quot;exceptions#UnicodeEncodeError&quot;&gt;&lt;code&gt;UnicodeEncodeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d05dfe376589c7336a4741545895bc4f9bc354d1" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Use &lt;code&gt;'surrogateescape'&lt;/code&gt; as the default for the &lt;em&gt;errors&lt;/em&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5c46c69b070c78909c1f170b9fb5f695fc1e05c" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Use of &lt;a href=&quot;#contextlib.ContextDecorator&quot;&gt;&lt;code&gt;ContextDecorator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="408dbe21c768435c6bd7001104b4d3ab9343a691" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: Use of the &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__index__&quot;&gt;&lt;code&gt;__index__()&lt;/code&gt;&lt;/a&gt; method for non-integers is new in 3.2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7264002029d43964adbb07f9ec5408ddc13a180" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: When the &lt;code&gt;%z&lt;/code&gt; directive is provided to the &lt;code&gt;strptime()&lt;/code&gt; method, an aware &lt;a href=&quot;#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; object will be produced. The &lt;code&gt;tzinfo&lt;/code&gt; of the result will be set to a &lt;a href=&quot;#datetime.timezone&quot;&gt;&lt;code&gt;timezone&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8577c39dd4f6e48cb5e9c26f22db43ead817e7c" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: You don&amp;rsquo;t need to create specialized &lt;code&gt;Filter&lt;/code&gt; classes, or use other classes with a &lt;code&gt;filter&lt;/code&gt; method: you can use a function (or other callable) as a filter. The filtering logic will check to see if the filter object has a &lt;code&gt;filter&lt;/code&gt; attribute: if it does, it&amp;rsquo;s assumed to be a &lt;code&gt;Filter&lt;/code&gt; and its &lt;a href=&quot;#logging.Filter.filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt; method is called. Otherwise, it&amp;rsquo;s assumed to be a callable and called with the record as the single parameter. The returned value should conform to that returned by &lt;a href=&quot;#logging.Filter.filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16ce1c1a5ab4d3e3203b76558502a5b224354e3a" translate="yes" xml:space="preserve">
          <source>Changed in version 3.2: parameters can now be passed using keyword arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd8a733f8f073799e3ab11493a393cd9275fbaeb" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec97a8ccaabc5ecae61f05a8386d9d35f6d8abbb" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3.1: &lt;em&gt;bufsize&lt;/em&gt; now defaults to -1 to enable buffering by default to match the behavior that most code expects. In versions prior to Python 3.2.4 and 3.3.1 it incorrectly defaulted to &lt;code&gt;0&lt;/code&gt; which was unbuffered and allowed short reads. This was unintentional and did not match the behavior of Python 2 as most code expected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3db174c4eba34a4bad975a4a4018721c1023468" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3.3: The function now follows &lt;a href=&quot;https://tools.ietf.org/html/rfc6125.html&quot; id=&quot;index-8&quot;&gt;&lt;strong&gt;RFC 6125&lt;/strong&gt;&lt;/a&gt;, section 6.4.3 and does neither match multiple wildcards (e.g. &lt;code&gt;*.*.com&lt;/code&gt; or &lt;code&gt;*a*.example.org&lt;/code&gt;) nor a wildcard inside an internationalized domain names (IDN) fragment. IDN A-labels such as &lt;code&gt;www*.xn--pthon-kva.org&lt;/code&gt; are still supported, but &lt;code&gt;x*.python.org&lt;/code&gt; no longer matches &lt;code&gt;xn--tda.python.org&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac2f4a6e025ed215a843bfd93910ffd8d22b5801" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3.4: Windows support added</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67482adc55dcb5bc047a12052ec29177466c05c9" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3.4: Windows support was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa11fe5b00e5e286c6f903a36b4d033af51c2218" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="893604c0b92c9b86be59ad46833a38f609ecb0e5" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: (See: &lt;a href=&quot;https://bugs.python.org/issue12419&quot;&gt;bpo-12419&lt;/a&gt;.) In earlier versions, there was no facility for an &amp;ldquo;ident&amp;rdquo; or &amp;ldquo;tag&amp;rdquo; prefix to identify the source of the message. This can now be specified using a class-level attribute, defaulting to &lt;code&gt;&quot;&quot;&lt;/code&gt; to preserve existing behaviour, but which can be overridden on a &lt;code&gt;SysLogHandler&lt;/code&gt; instance in order for that instance to prepend the ident to every message handled. Note that the provided ident must be text, not bytes, and is prepended to the message exactly as is.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6316bda42eda47a27c9b0b5e4b6e5ca29c4afdf" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: &lt;a href=&quot;#EnvironmentError&quot;&gt;&lt;code&gt;EnvironmentError&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#IOError&quot;&gt;&lt;code&gt;IOError&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#WindowsError&quot;&gt;&lt;code&gt;WindowsError&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;socket#socket.error&quot;&gt;&lt;code&gt;socket.error&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;select#select.error&quot;&gt;&lt;code&gt;select.error&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;mmap.error&lt;/code&gt; have been merged into &lt;a href=&quot;#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt;, and the constructor may return a subclass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf50c6f40c428aba321a7b58b6e0725e5da7bbb6" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: &lt;a href=&quot;#memoryview.tolist&quot;&gt;&lt;code&gt;tolist()&lt;/code&gt;&lt;/a&gt; now supports all single character native formats in &lt;a href=&quot;struct#module-struct&quot;&gt;&lt;code&gt;struct&lt;/code&gt;&lt;/a&gt; module syntax as well as multi-dimensional representations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b97de7299996ecf1f7d5478f9f301ccc525cd003" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: &lt;a href=&quot;#sched.scheduler&quot;&gt;&lt;code&gt;scheduler&lt;/code&gt;&lt;/a&gt; class can be safely used in multi-threaded environments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43a9bab1336059667028f34b7e8be99c5bef0614" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: &lt;a href=&quot;#ssl.SSLError&quot;&gt;&lt;code&gt;SSLError&lt;/code&gt;&lt;/a&gt; used to be a subtype of &lt;a href=&quot;socket#socket.error&quot;&gt;&lt;code&gt;socket.error&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="090ad76a24ef2ed25f5a026588274e6e38181ef1" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: &lt;a href=&quot;#urllib.error.URLError&quot;&gt;&lt;code&gt;URLError&lt;/code&gt;&lt;/a&gt; has been made a subclass of &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;exceptions#IOError&quot;&gt;&lt;code&gt;IOError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7efaab12d1aa53bb781ad3f2b0dfc5228d184f6c" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: &lt;a href=&quot;#urllib.request.Request.method&quot;&gt;&lt;code&gt;Request.method&lt;/code&gt;&lt;/a&gt; argument is added to the Request class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed729b24caab7d8686b995cadf0af1fe54970425" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: &lt;a href=&quot;exceptions#IOError&quot;&gt;&lt;code&gt;IOError&lt;/code&gt;&lt;/a&gt; used to be raised instead of &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d106a47813e9fa73519f79288d75473b243da19f" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: &lt;a href=&quot;exceptions#IOError&quot;&gt;&lt;code&gt;IOError&lt;/code&gt;&lt;/a&gt; used to be raised instead of &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt;. Added &lt;em&gt;follow_symlinks&lt;/em&gt; argument. Now returns &lt;em&gt;dst&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78ea587098b5f303b745b2b096d2cd642f1be2bf" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: &lt;a href=&quot;exceptions#IOError&quot;&gt;&lt;code&gt;IOError&lt;/code&gt;&lt;/a&gt; used to be raised, it is now an alias of &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="086f8a08b3a2c8a3d9cb428439401d6f2622f46d" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: &lt;a href=&quot;exceptions#IOError&quot;&gt;&lt;code&gt;IOError&lt;/code&gt;&lt;/a&gt; used to be raised; it is now an alias of &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9bd0f6f1fccb8e163d926a471a0a43b3ab8ad70" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; is raised instead of &lt;a href=&quot;exceptions#IOError&quot;&gt;&lt;code&gt;IOError&lt;/code&gt;&lt;/a&gt;, now an alias of the former.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ffe1b35780cc268428697df5e944c5953acb63c" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: &lt;a href=&quot;exceptions#WindowsError&quot;&gt;&lt;code&gt;WindowsError&lt;/code&gt;&lt;/a&gt; used to be raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="122a84c8a5833660f94ab7a301dd1475fabc3fc8" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: &lt;a href=&quot;functions#float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt; arguments raise an exception if the &lt;a href=&quot;#decimal.FloatOperation&quot;&gt;&lt;code&gt;FloatOperation&lt;/code&gt;&lt;/a&gt; trap is set. By default the trap is off.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4d127aa8068e6c450f136ec1b57b82080968ba4" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: &lt;a href=&quot;https://docs.python.org/3.8/reference/import.html#__loader__&quot;&gt;&lt;code&gt;__loader__&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.8/reference/import.html#__package__&quot;&gt;&lt;code&gt;__package__&lt;/code&gt;&lt;/a&gt; are automatically set (when possible).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc107a0de04c5d944fa6f6cd506949c300963d5b" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: &lt;a href=&quot;time#time.perf_counter&quot;&gt;&lt;code&gt;time.perf_counter()&lt;/code&gt;&lt;/a&gt; is now the default timer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0439774f6afd3a900f407a93010065d79db3358e" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: &lt;code&gt;None&lt;/code&gt; is stored instead of &lt;a href=&quot;imp#imp.NullImporter&quot;&gt;&lt;code&gt;imp.NullImporter&lt;/code&gt;&lt;/a&gt; when no finder is found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfd700325c3fe8d73d16c409f0b4a3f3963d8638" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: &lt;em&gt;argument&lt;/em&gt; parameter is optional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a247e06bdf3a6612f6671b3f21a04fc2942d850" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: &lt;em&gt;blocking&lt;/em&gt; parameter was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="877715ae100b4211101f58d766ee29a4e0b89176" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: &lt;em&gt;cadefault&lt;/em&gt; was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaac4ff3beb47da35e06b63bf7edd751a8e95735" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: &lt;em&gt;context&lt;/em&gt; was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80083a2b3a36e87903e5406aa660cf10de02aa7b" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: &lt;em&gt;family&lt;/em&gt; and &lt;em&gt;type&lt;/em&gt; arguments can be omitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8e1549db2743c22bba9b42df0e11a7bf8ca6fb2" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: &lt;em&gt;kwargs&lt;/em&gt; parameter was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1f1beee8e64a981d4865c37e91fe06d21b1dfa8" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: &lt;em&gt;path&lt;/em&gt; can now be an integer: &lt;code&gt;True&lt;/code&gt; is returned if it is an open file descriptor, &lt;code&gt;False&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6efe462a308326127d3555cc6c8fc24312157dc" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: &lt;em&gt;request&lt;/em&gt; object needs &lt;code&gt;origin_req_host&lt;/code&gt; attribute. Dependency on a deprecated method &lt;code&gt;get_origin_req_host()&lt;/code&gt; has been removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4f2630bfcfc775ed130096dcab5293614ab394a" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: &lt;em&gt;source_address&lt;/em&gt; parameter was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7434f71ecb6e3ffc9d718e587687f84ca13af9d" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: &lt;em&gt;ssl_context&lt;/em&gt; parameter added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="238c536cbe5418bcbe1273ad9890c968fce4db15" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: &lt;em&gt;timefunc&lt;/em&gt; and &lt;em&gt;delayfunc&lt;/em&gt; parameters are optional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baf1367099df683f87d9e6edc6ef975a71663609" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: &lt;em&gt;timeout&lt;/em&gt; was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d514cd15298020c57de282533e882f1fb54d6f89" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: &lt;em&gt;tz&lt;/em&gt; now can be omitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9b41489db38c0bfa38afc3d21f2854f41629b84" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: ASCII-only Unicode strings are now accepted by the decoding functions of the modern interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51962002f2d6d087d310adaf4db2499bddeceefe" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: ASCII-only unicode strings are now accepted by the &lt;code&gt;a2b_*&lt;/code&gt; functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9997eb8291b58b70af4b946c6f07b5f9c373ea54" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Accept &lt;code&gt;crypt.METHOD_*&lt;/code&gt; values in addition to strings for &lt;em&gt;salt&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9a29377a67d24797c49af25022fdf05cdfdc80e" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Add &lt;a href=&quot;#os.O_CLOEXEC&quot;&gt;&lt;code&gt;O_CLOEXEC&lt;/code&gt;&lt;/a&gt; constant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3763d79287f56b61e5eeb5569eedeafb1d85bc9" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Added &lt;code&gt;service_actions&lt;/code&gt; call to the &lt;code&gt;serve_forever&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3da22b7997cbffaa9e5f84804b1b415ec889030" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Added &lt;code&gt;value&lt;/code&gt; attribute and the ability for generator functions to use it to return a value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11a95e4248e5e31987d00e36ecdf1b0c19fde0ba" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Added &lt;em&gt;follow_symlinks&lt;/em&gt; argument and support for Linux extended attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66ab5794d3e4f4d2ce750a3224154cdef2338495" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Added &lt;em&gt;follow_symlinks&lt;/em&gt; argument, try to copy extended file system attributes too (currently Linux only). Now returns path to the newly created file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b84923598bf50e962cb202276ede98bd83d0b4a" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Added &lt;em&gt;follow_symlinks&lt;/em&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ca5466c03c3ff27bd23306a613b5d77d385e35f" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Added &lt;em&gt;follow_symlinks&lt;/em&gt; argument. Now returns path to the newly created file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae6dc08fdd44eb3c0e404fb37abede09d66bd18a" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Added a symlink attack resistant version that is used automatically if platform supports fd-based functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d90bf572cbba885bfcfb51d57150e5fa5ba041ef" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Added explicit symlink handling for foreign filesystems, thus adapting it to the behavior of GNU&amp;rsquo;s &lt;strong&gt;mv&lt;/strong&gt;. Now returns &lt;em&gt;dst&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e298240287f830d38f514585862251c133eec58" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Added support for &lt;a href=&quot;bz2#module-bz2&quot;&gt;&lt;code&gt;bzip2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;lzma#module-lzma&quot;&gt;&lt;code&gt;lzma&lt;/code&gt;&lt;/a&gt; compression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e89eb844373690c5aed379abc7f9c6efd76730b0" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Added support for &lt;a href=&quot;lzma#module-lzma&quot;&gt;&lt;code&gt;lzma&lt;/code&gt;&lt;/a&gt; compression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8d1a74ebcaffc711cf13a5e6ee25e332ae5875a" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Added support for &lt;code&gt;exact_type&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a398acd4aebfd572f75e04b3812c3eb1de182c3f" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Added support for &lt;em&gt;filename&lt;/em&gt; being a file object, support for text mode, and the &lt;em&gt;encoding&lt;/em&gt;, &lt;em&gt;errors&lt;/em&gt; and &lt;em&gt;newline&lt;/em&gt; arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24b5b0ae54d48200647cf57b7ec4399afea0c28a" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Added support for the &lt;code&gt;'n'&lt;/code&gt; and &lt;code&gt;'N'&lt;/code&gt; formats.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db24845dd928094b00a8504e7caa83e3e84749cd" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Added the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;path&lt;/code&gt; attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d07c918623551a114a19686a1502f6b300527140" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Added the &lt;em&gt;charset&lt;/em&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a42423c10c38f65da04a6d1f6387d8e5dc31063" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Added the &lt;em&gt;daemon&lt;/em&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eea501c79389a11d737b546a52df4007bee170ad" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Added the &lt;em&gt;dir_fd&lt;/em&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f507b581c556679380dd248afb80d1d599b1317f" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Added the &lt;em&gt;dir_fd&lt;/em&gt;, &lt;em&gt;effective_ids&lt;/em&gt;, and &lt;em&gt;follow_symlinks&lt;/em&gt; parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aebc74f16f563fa10ce5fdbbd9f380509b6268f0" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Added the &lt;em&gt;flags&lt;/em&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ba1716f48ee774462534453d5dd0680704c8367" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Added the &lt;em&gt;flush&lt;/em&gt; keyword argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b3ee43b08c4f5fadd0e9ea16e57e6e93938bc9a" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Added the &lt;em&gt;msg&lt;/em&gt; keyword argument when used as a context manager.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e77b20ebe3cdd0a5397655084c12413947e8a8c" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Added the &lt;em&gt;policy&lt;/em&gt; keyword.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b268345974b985fd902fc97cc3b5320884938378" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Added the &lt;em&gt;typed&lt;/em&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b482d401c1ff6e1380527c5dab872a8f388abf36" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Added the &lt;em&gt;zdict&lt;/em&gt; parameter and keyword argument support.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="491a642b9734a2a05d11cf5f1f650fe19de243e6" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Added the &lt;em&gt;zdict&lt;/em&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="332aaa280396e36b8552748f402c0cc02e466306" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Added the optional &lt;em&gt;func&lt;/em&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92a13bc458871a7d55caea5a1a8de0d19d8323e1" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Allowed &amp;lsquo;:&amp;rsquo; as a valid Cookie name character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f73575f0f6bc17345081d629618469bd3a5dbb8c" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Also accept an integer in the range 0 to 255 as the subsequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39e059543e2f9bb79d0d272b48a27be2a3385690" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: An empty tuple instead of &lt;code&gt;None&lt;/code&gt; when ndim = 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b26c487ca02878bb2f65e200f5c3e2e808cd36a8" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: An instance of &lt;a href=&quot;exceptions#WindowsError&quot;&gt;&lt;code&gt;WindowsError&lt;/code&gt;&lt;/a&gt; used to be created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6caef24342743466df5b85c3af01f11fc9bb93da" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Argument can be omitted or &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90fb247a83a1886bf4926b496ec977a28298caaa" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Before &lt;a href=&quot;https://www.python.org/dev/peps/pep-0393&quot; id=&quot;index-17&quot;&gt;&lt;strong&gt;PEP 393&lt;/strong&gt;&lt;/a&gt;, &lt;code&gt;sys.maxunicode&lt;/code&gt; used to be either &lt;code&gt;0xFFFF&lt;/code&gt; or &lt;code&gt;0x10FFFF&lt;/code&gt;, depending on the configuration option that specified whether Unicode characters were stored as UCS-2 or UCS-4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46f4b6cad6afcf3422953cc52bd66988573f2b75" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Connection objects themselves can now be transferred between processes using &lt;a href=&quot;#multiprocessing.connection.Connection.send&quot;&gt;&lt;code&gt;Connection.send()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#multiprocessing.connection.Connection.recv&quot;&gt;&lt;code&gt;Connection.recv()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b0e51d2da3b46e93c65547ec39954ec9e870ea4" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Copy metadata when &lt;em&gt;symlinks&lt;/em&gt; is false. Now returns &lt;em&gt;dst&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77bac2c37e0416eb04abb46a7193467c5f599463" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Define &amp;lsquo;==&amp;rsquo; and &amp;lsquo;!=&amp;rsquo; to compare range objects based on the sequence of values they define (instead of comparing based on object identity).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6398282600819d93b2f6cdea42f83c7bb6cbe33b" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Equality comparisons between aware and naive &lt;a href=&quot;#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; instances don&amp;rsquo;t raise &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bd4b66f5142412248268d498445cbeff30cdf3e" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Equality comparisons between aware and naive &lt;a href=&quot;#datetime.time&quot;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; instances don&amp;rsquo;t raise &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8e04ab06f3e9536fc5abc127f8a75d6919a2eb0" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Following &lt;a href=&quot;https://www.python.org/dev/peps/pep-3151&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;PEP 3151&lt;/strong&gt;&lt;/a&gt;, this class was made an alias of &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e545596e8b9f8784254f890ca7530c4e6b9d0078" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Following &lt;a href=&quot;https://www.python.org/dev/peps/pep-3151&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;PEP 3151&lt;/strong&gt;&lt;/a&gt;, this class was made an alias of &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cc3c3fea1f3a16e3b9b3b05f5a7dedbcc1dda80" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: For backwards compatibility with the Python 2 series, the &lt;code&gt;u&lt;/code&gt; prefix is once again permitted on string literals. It has no effect on the meaning of string literals and cannot be combined with the &lt;code&gt;r&lt;/code&gt; prefix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a4099cef39c5afbe5ae0990dd03bd91d22ecd61" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Headers are stored to an internal buffer and &lt;a href=&quot;#http.server.BaseHTTPRequestHandler.end_headers&quot;&gt;&lt;code&gt;end_headers()&lt;/code&gt;&lt;/a&gt; needs to be called explicitly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f830572c33b4daf3eed2baa953fe642f7977b9d" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Importing the module used to trigger paths manipulation even when using &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#id3&quot;&gt;&lt;code&gt;-S&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="896ddba2fca4eaa0516e89ee6e9cb4a5d68532a8" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: In version 3.2, &lt;code&gt;strftime()&lt;/code&gt; method was restricted to years &amp;gt;= 1000.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90ade5e607d33bb4e835e47e9802a395dfb17c12" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: LoadError was made a subclass of &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;exceptions#IOError&quot;&gt;&lt;code&gt;IOError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08991b3a6904be4c40e9bf3ef4024703023d5dd9" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Manager objects support the context management protocol &amp;ndash; see &lt;a href=&quot;stdtypes#typecontextmanager&quot;&gt;Context Manager Types&lt;/a&gt;. &lt;a href=&quot;stdtypes#contextmanager.__enter__&quot;&gt;&lt;code&gt;__enter__()&lt;/code&gt;&lt;/a&gt; starts the server process (if it has not already started) and then returns the manager object. &lt;a href=&quot;stdtypes#contextmanager.__exit__&quot;&gt;&lt;code&gt;__exit__()&lt;/code&gt;&lt;/a&gt; calls &lt;a href=&quot;#multiprocessing.managers.BaseManager.shutdown&quot;&gt;&lt;code&gt;shutdown()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cebf47e4ddd6598694cc673f73f1adc6e3815105" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Negative values for &lt;em&gt;level&lt;/em&gt; are no longer supported (which also changes the default value to 0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc0d387fe3b436b214dcb650a502438346bf6f26" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: New optional argument &lt;em&gt;password&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c1559ee234cbeb8f9cde131f27f6ccc057b5bbe" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: On Linux, &lt;a href=&quot;#sys.platform&quot;&gt;&lt;code&gt;sys.platform&lt;/code&gt;&lt;/a&gt; doesn&amp;rsquo;t contain the major version anymore. It is always &lt;code&gt;'linux'&lt;/code&gt;, instead of &lt;code&gt;'linux2'&lt;/code&gt; or &lt;code&gt;'linux3'&lt;/code&gt;. Since older Python versions include the version number, it is recommended to always use the &lt;code&gt;startswith&lt;/code&gt; idiom presented above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7abec4553f62164142ebb011b237e4e1327acfa" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: One-dimensional memoryviews can now be sliced. One-dimensional memoryviews with formats &amp;lsquo;B&amp;rsquo;, &amp;lsquo;b&amp;rsquo; or &amp;lsquo;c&amp;rsquo; are now hashable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d988ad3d76f454249e4c75bb621fe3079cf9ccd" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Operations in this module now raise &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; where &lt;a href=&quot;exceptions#IOError&quot;&gt;&lt;code&gt;IOError&lt;/code&gt;&lt;/a&gt; was raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="840bf011d357e25ba695a2b73ce3e87fe222d8ff" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Operations in this module used to raise an &lt;a href=&quot;exceptions#IOError&quot;&gt;&lt;code&gt;IOError&lt;/code&gt;&lt;/a&gt; where they now raise an &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00f38a0a7bdb8f47d9d5d71f4ef4ef12db382548" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Operations that used to raise &lt;a href=&quot;exceptions#IOError&quot;&gt;&lt;code&gt;IOError&lt;/code&gt;&lt;/a&gt; now raise &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt;, since &lt;a href=&quot;exceptions#IOError&quot;&gt;&lt;code&gt;IOError&lt;/code&gt;&lt;/a&gt; is now an alias of &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e19927359f3b9b2678e53d2328e133b11e626c1d" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Parent packages are automatically imported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22ad590bad024a1ad953c00706d662cd71696efe" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Previous versions compared the raw memory disregarding the item format and the logical array structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="937ab1caaa11b389be853b3f20ddb84717a22add" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Previous versions of &lt;code&gt;run&lt;/code&gt; did not return the result. Neither did calling an instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36a29837ff5a8749049764868f12f1b75a768382" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Previously, &lt;a href=&quot;#socket.AF_UNIX&quot;&gt;&lt;code&gt;AF_UNIX&lt;/code&gt;&lt;/a&gt; socket paths were assumed to use UTF-8 encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c058edbf457a69e8aa977763286f72651a69419a" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Previously, a name lookup was performed. To avoid name resolution delays, it now always returns the IP address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de9eea4ba089c04d51e58f49a23b69c53705e6ed" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Previously, the default format was hard-coded as in this example: &lt;code&gt;2010-09-06 22:38:15,292&lt;/code&gt; where the part before the comma is handled by a strptime format string (&lt;code&gt;'%Y-%m-%d %H:%M:%S'&lt;/code&gt;), and the part after the comma is a millisecond value. Because strptime does not have a format placeholder for milliseconds, the millisecond value is appended using another format string, &lt;code&gt;'%s,%03d'&lt;/code&gt; &amp;mdash; and both of these format strings have been hardcoded into this method. With the change, these strings are defined as class-level attributes which can be overridden at the instance level when desired. The names of the attributes are &lt;code&gt;default_time_format&lt;/code&gt; (for the strptime format string) and &lt;code&gt;default_msec_format&lt;/code&gt; (for appending the millisecond value).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9903516770eea69151ebb967556727a74104946" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Raise &lt;a href=&quot;exceptions#OverflowError&quot;&gt;&lt;code&gt;OverflowError&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; if the timestamp is out of the range of values supported by the platform C &lt;code&gt;gmtime()&lt;/code&gt; function. Raise &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; on &lt;code&gt;gmtime()&lt;/code&gt; failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6721ed874957a99d85058625f923e255c2f32bcb" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Raise &lt;a href=&quot;exceptions#OverflowError&quot;&gt;&lt;code&gt;OverflowError&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; if the timestamp is out of the range of values supported by the platform C &lt;code&gt;localtime()&lt;/code&gt; function. Raise &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; on &lt;code&gt;localtime()&lt;/code&gt; failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aede22ce238476ed68552a051a715b8937992cf1" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Raise &lt;a href=&quot;exceptions#OverflowError&quot;&gt;&lt;code&gt;OverflowError&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; if the timestamp is out of the range of values supported by the platform C &lt;code&gt;localtime()&lt;/code&gt; or &lt;code&gt;gmtime()&lt;/code&gt; functions. Raise &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; on &lt;code&gt;localtime()&lt;/code&gt; or &lt;code&gt;gmtime()&lt;/code&gt; failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="283162dba9dc1507d00958e646bbc50355a26e1f" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Raise &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; on unsupported Authentication Scheme.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62cbf46a05f6cebf0bc77b8742797bb7c9a40901" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Removed obsolete &lt;code&gt;division_warning&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6003ba40916e765275d2a4ce97ca3eef65f55478" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Removed the &lt;em&gt;strict&lt;/em&gt; argument that was deprecated in 2.4. Added the &lt;em&gt;policy&lt;/em&gt; keyword.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82364970aee353dc61f1c7299e9f62c0ea15c012" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Removed the &lt;em&gt;strict&lt;/em&gt; argument. Added the &lt;em&gt;policy&lt;/em&gt; keyword.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="488c3e02d2783912b025e8a4243520b38e1e58ce" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Result changed from a tuple to a namedtuple.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b1682e7fff1fa39b2ee451f71d70c62ea7ce51c" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Return an &lt;a href=&quot;io#io.BufferedReader&quot;&gt;&lt;code&gt;io.BufferedReader&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="566a178d7b935b1d3a5ee1e338a3cd0ea760a579" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Return type changed from a tuple to a tuple-like object with named attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbd3c865415b995e391f0bf929078d2703038ee0" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Returns the registered subclass, to allow usage as a class decorator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bd3e9a65797c0b6e01dd1d6f29102c2ff122a6a" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: See &lt;a href=&quot;#exception-changed&quot;&gt;above&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c1a2cf87674da4baa9e5f571b9060b738f7a5e6" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Several functions in this module used to raise a &lt;a href=&quot;exceptions#WindowsError&quot;&gt;&lt;code&gt;WindowsError&lt;/code&gt;&lt;/a&gt;, which is now an alias of &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e03fa29f1e627103ff6810a4d6e0f4983af4615f" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Support any error handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87de0a0cf13f8964e1b55851645b0d476b712251" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Support for multi-stream inputs was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b29728d76d6bebd5fcf75b45c6bc02f84c81c210" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Support for name aliases &lt;a href=&quot;#id3&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt; and named sequences &lt;a href=&quot;#id4&quot; id=&quot;id2&quot;&gt;2&lt;/a&gt; has been added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e051a97cbf47c53950a5e78e019c1ccf8e01765" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Support for the &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="128d3b69dea76494c98804d921cc21474f1319b0" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Support was added for &lt;em&gt;filename&lt;/em&gt; being a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;file object&lt;/a&gt; instead of an actual filename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edc192130a8cea77b3c04d9510c3b7a62a8d92cc" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Tab-completion via the &lt;a href=&quot;readline#module-readline&quot;&gt;&lt;code&gt;readline&lt;/code&gt;&lt;/a&gt; module is available for commands and command arguments, e.g. the current global and local names are offered as arguments of the &lt;code&gt;p&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41b3c436a74ddf0f8788d2f9df29df59802e592b" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: The &lt;a href=&quot;#time.struct_time&quot;&gt;&lt;code&gt;struct_time&lt;/code&gt;&lt;/a&gt; type was extended to provide the &lt;code&gt;tm_gmtoff&lt;/code&gt; and &lt;code&gt;tm_zone&lt;/code&gt; attributes when platform supports corresponding &lt;code&gt;struct tm&lt;/code&gt; members.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6018812f8a81d8273123472cc14d86fd2053408" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: The &lt;a href=&quot;io#io.BufferedIOBase.read1&quot;&gt;&lt;code&gt;io.BufferedIOBase.read1()&lt;/code&gt;&lt;/a&gt; method is now implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da3bef4f1409ae766e4b24171bb1043e1d03f2da" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: The &lt;a href=&quot;threading#threading.Condition.wait_for&quot;&gt;&lt;code&gt;wait_for()&lt;/code&gt;&lt;/a&gt; method was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fea5c111b95f1f394e3a620ec0c5bc085f60e65" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: The &lt;code&gt;'\u'&lt;/code&gt; and &lt;code&gt;'\U'&lt;/code&gt; escape sequences have been added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2c8d24a4576f821464364c188f3d5573043f6b0" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: The &lt;code&gt;'_'&lt;/code&gt; character is no longer escaped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bd204f46cb00cec6ce62673ab117094efd78f2b" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: The &lt;code&gt;'a'&lt;/code&gt; (append) mode was added, along with support for reading multi-stream files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5c4271d2ac1ee43dd84c56e9a420494d3223172" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: The &lt;code&gt;-g&lt;/code&gt; command line option was removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84abcb87ffb2f340518ac165b7634cbc3c2828e8" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: The &lt;code&gt;fileno()&lt;/code&gt;, &lt;code&gt;readable()&lt;/code&gt;, &lt;code&gt;seekable()&lt;/code&gt;, &lt;code&gt;writable()&lt;/code&gt;, &lt;code&gt;read1()&lt;/code&gt; and &lt;code&gt;readinto()&lt;/code&gt; methods were added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84fa4908aae22abc200eff9662b1e21e3a28cb87" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: The &lt;em&gt;handlers&lt;/em&gt; argument was added. Additional checks were added to catch situations where incompatible arguments are specified (e.g. &lt;em&gt;handlers&lt;/em&gt; together with &lt;em&gt;stream&lt;/em&gt; or &lt;em&gt;filename&lt;/em&gt;, or &lt;em&gt;stream&lt;/em&gt; together with &lt;em&gt;filename&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="864dd4223a923d43120fbebea62d1eed39962d92" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: The &lt;em&gt;opener&lt;/em&gt; parameter was added. The &lt;code&gt;'x'&lt;/code&gt; mode was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71970c098147cbc669f2c1453831b523748d00d7" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: The &lt;em&gt;policy&lt;/em&gt; keyword argument was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="754e25a626bce333641fe20ae1fc978e5122c8ec" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: The &lt;em&gt;use_builtin_types&lt;/em&gt; flag was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb9b2876700e1de602153b679fa7b24d1edb36aa" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: The &lt;em&gt;write_through&lt;/em&gt; argument has been added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="749331bd3ae29f46f8c529a1e13512e9b8147c20" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: The AF_CAN family was added. The AF_RDS family was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edbde8ed1af170a05791dbc6fb850f46045911bf" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: The C module computes &lt;a href=&quot;#decimal.Context.power&quot;&gt;&lt;code&gt;power()&lt;/code&gt;&lt;/a&gt; in terms of the correctly-rounded &lt;a href=&quot;#decimal.Context.exp&quot;&gt;&lt;code&gt;exp()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#decimal.Context.ln&quot;&gt;&lt;code&gt;ln()&lt;/code&gt;&lt;/a&gt; functions. The result is well-defined but only &amp;ldquo;almost always correctly-rounded&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df01c7d62072728d140e97aab7166fa1a88049d6" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: The default &lt;em&gt;encoding&lt;/em&gt; is now &lt;code&gt;locale.getpreferredencoding(False)&lt;/code&gt; instead of &lt;code&gt;locale.getpreferredencoding()&lt;/code&gt;. Don&amp;rsquo;t change temporary the locale encoding using &lt;a href=&quot;locale#locale.setlocale&quot;&gt;&lt;code&gt;locale.setlocale()&lt;/code&gt;&lt;/a&gt;, use the current locale encoding instead of the user preferred encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f7517e571260e5e5ce4b5bf08a3553139883a83" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: The fragment is now parsed for all URL schemes (unless &lt;em&gt;allow_fragment&lt;/em&gt; is false), in accordance with &lt;a href=&quot;https://tools.ietf.org/html/rfc3986.html&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;RFC 3986&lt;/strong&gt;&lt;/a&gt;. Previously, a whitelist of schemes that support fragments existed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb32d53d36a936bbe07b2dd89df0443ef4cb4fef" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: The function is based directly on &lt;a href=&quot;importlib#module-importlib&quot;&gt;&lt;code&gt;importlib&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="757d11dcb56b8617750b43ac8b543297e90eab0e" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: The term &amp;ldquo;Python&amp;rdquo; is replaced with implementation specific term like &amp;ldquo;CPython&amp;rdquo;, &amp;ldquo;Jython&amp;rdquo; etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="156131e91a9c094f1cc30cd828b1404d5c72b8ce" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: This class was made a subclass of &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="336239ceb888ed4ad1109ce4ff02af56bd6e3248" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: This function is now IPv6-compatible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70a92158ffee050f192fc93cddce4f291cf217f3" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: This function used to be called unconditionally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03e1ec6c8e0c7e73547c862c4bc53f3959ce219e" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: This function used to raise &lt;a href=&quot;exceptions#IOError&quot;&gt;&lt;code&gt;IOError&lt;/code&gt;&lt;/a&gt;, which is now an alias of &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dea196089a9105263428b2bcbe32f20011e5242" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: This is now a synonym of the built-in &lt;a href=&quot;exceptions#RuntimeError&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5b6cdb51aa3be9be8b51fdd9a0601d4b91643ac" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: This method used to raise &lt;a href=&quot;socket#socket.error&quot;&gt;&lt;code&gt;socket.error&lt;/code&gt;&lt;/a&gt;, which is now an alias of &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23872637ea6b978ceb83b8e9713c8bb5636485e5" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: This module will use a fast implementation whenever available. The &lt;code&gt;xml.etree.cElementTree&lt;/code&gt; module is deprecated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f07c10707dc4517691a2bbd4c447ffb4243f732" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Updated to be based directly on &lt;a href=&quot;importlib#module-importlib&quot;&gt;&lt;code&gt;importlib&lt;/code&gt;&lt;/a&gt; rather than relying on the package internal &lt;a href=&quot;https://www.python.org/dev/peps/pep-0302&quot; id=&quot;index-10&quot;&gt;&lt;strong&gt;PEP 302&lt;/strong&gt;&lt;/a&gt; import emulation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f721b03e7052755159a78f623e788b6116148cb" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Updated to be based directly on &lt;a href=&quot;importlib#module-importlib&quot;&gt;&lt;code&gt;importlib&lt;/code&gt;&lt;/a&gt; rather than relying on the package internal &lt;a href=&quot;https://www.python.org/dev/peps/pep-0302&quot; id=&quot;index-11&quot;&gt;&lt;strong&gt;PEP 302&lt;/strong&gt;&lt;/a&gt; import emulation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5643c9abd989a6886249f1bf67229cdfedc5b400" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Updated to be based directly on &lt;a href=&quot;importlib#module-importlib&quot;&gt;&lt;code&gt;importlib&lt;/code&gt;&lt;/a&gt; rather than relying on the package internal &lt;a href=&quot;https://www.python.org/dev/peps/pep-0302&quot; id=&quot;index-12&quot;&gt;&lt;strong&gt;PEP 302&lt;/strong&gt;&lt;/a&gt; import emulation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="949f7e4dd81c73dcf6fedb4c4bd51511b5d0e576" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Updated to be based directly on &lt;a href=&quot;importlib#module-importlib&quot;&gt;&lt;code&gt;importlib&lt;/code&gt;&lt;/a&gt; rather than relying on the package internal &lt;a href=&quot;https://www.python.org/dev/peps/pep-0302&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;PEP 302&lt;/strong&gt;&lt;/a&gt; import emulation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb79999d305d58f44c64f9762299d9e691263768" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Updated to be based directly on &lt;a href=&quot;importlib#module-importlib&quot;&gt;&lt;code&gt;importlib&lt;/code&gt;&lt;/a&gt; rather than relying on the package internal &lt;a href=&quot;https://www.python.org/dev/peps/pep-0302&quot; id=&quot;index-7&quot;&gt;&lt;strong&gt;PEP 302&lt;/strong&gt;&lt;/a&gt; import emulation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="587803df1a21999310a3c3cdb653f605fe057352" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Updated to be based directly on &lt;a href=&quot;importlib#module-importlib&quot;&gt;&lt;code&gt;importlib&lt;/code&gt;&lt;/a&gt; rather than relying on the package internal &lt;a href=&quot;https://www.python.org/dev/peps/pep-0302&quot; id=&quot;index-8&quot;&gt;&lt;strong&gt;PEP 302&lt;/strong&gt;&lt;/a&gt; import emulation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78ec30e96ff42f0970f886a732a78b11103ad254" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: When &lt;em&gt;universal_newlines&lt;/em&gt; is &lt;code&gt;True&lt;/code&gt;, the class uses the encoding &lt;a href=&quot;locale#locale.getpreferredencoding&quot;&gt;&lt;code&gt;locale.getpreferredencoding(False)&lt;/code&gt;&lt;/a&gt; instead of &lt;code&gt;locale.getpreferredencoding()&lt;/code&gt;. See the &lt;a href=&quot;io#io.TextIOWrapper&quot;&gt;&lt;code&gt;io.TextIOWrapper&lt;/code&gt;&lt;/a&gt; class for more information on this change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7bb012ec7246baa0ce838675c3e622a42f645ea" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: When one of the worker processes terminates abruptly, a &lt;code&gt;BrokenProcessPool&lt;/code&gt; error is now raised. Previously, behaviour was undefined but operations on the executor or its futures would often freeze or deadlock.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06d3713ab79fffe023c72889d8e41a398bff4060" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: Windows errors used to raise &lt;a href=&quot;exceptions#WindowsError&quot;&gt;&lt;code&gt;WindowsError&lt;/code&gt;&lt;/a&gt;, which is now an alias of &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9837efc7d4d55cfba7e486263f87ad736c84c57a" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: changed from a factory function to a class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e239c631f45240a4a34faa83d895f57c6248232" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: format &lt;code&gt;'B'&lt;/code&gt; is now handled according to the struct module syntax. This means that &lt;code&gt;memoryview(b'abc')[0] == b'abc'[0] == 97&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44c54361765c0e4ae45d43c8f941cfc756a89a4d" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: get_method now looks at the value of &lt;a href=&quot;#urllib.request.Request.method&quot;&gt;&lt;code&gt;Request.method&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa92dbd4ff44cdb6103171e2d22b2aef2420bf61" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: source_address argument was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a42a45107c87d4dac88da16ee4145ce7f54e97a6" translate="yes" xml:space="preserve">
          <source>Changed in version 3.3: the truncate method now accepts a &lt;code&gt;size&lt;/code&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="395bcffe514fa2d94f4b7a3150e3afa731be90e1" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f38e5a0f06ff44ce0db5bea0845d36859021c13" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4.1: Before Python 3.4.1, if &lt;em&gt;exist_ok&lt;/em&gt; was &lt;code&gt;True&lt;/code&gt; and the directory existed, &lt;a href=&quot;#os.makedirs&quot;&gt;&lt;code&gt;makedirs()&lt;/code&gt;&lt;/a&gt; would still raise an error if &lt;em&gt;mode&lt;/em&gt; did not match the mode of the existing directory. Since this behavior was impossible to implement safely, it was removed in Python 3.4.1. See &lt;a href=&quot;https://bugs.python.org/issue21082&quot;&gt;bpo-21082&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc59941a11994983f6222659d719d911d0121180" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4.2: is_attachment is now a method instead of a property, for consistency with &lt;a href=&quot;email.compat32-message#email.message.Message.is_multipart&quot;&gt;&lt;code&gt;is_multipart()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c30629967e45db7c2f4064628e68baf4c1416665" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4.3: &lt;em&gt;context&lt;/em&gt; was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ffd7d0da3915d9cd7972713e2b6d4df0f9a01d2" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4.3: This class now performs all the necessary certificate and hostname checks by default. To revert to the previous, unverified, behavior &lt;code&gt;ssl._create_unverified_context()&lt;/code&gt; can be passed to the &lt;em&gt;context&lt;/em&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f5118775d166c0cfff4d4910031ce3bf447779b" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4.4: RC4 was dropped from the default cipher string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a140d62f80072759bd32e3f6b9ade383a61f400a" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4.4: The &lt;em&gt;family&lt;/em&gt;, &lt;em&gt;proto&lt;/em&gt;, &lt;em&gt;flags&lt;/em&gt;, &lt;em&gt;reuse_address&lt;/em&gt;, &lt;em&gt;reuse_port, *allow_broadcast&lt;/em&gt;, and &lt;em&gt;sock&lt;/em&gt; parameters were added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7ab44936d40c41eedf93182b834f58358f9412e" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfd827ec3898feda669dcd2d5b7d1e8a49429023" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: &lt;a href=&quot;#module-pydoc&quot;&gt;&lt;code&gt;pydoc&lt;/code&gt;&lt;/a&gt; now uses &lt;a href=&quot;inspect#inspect.signature&quot;&gt;&lt;code&gt;inspect.signature()&lt;/code&gt;&lt;/a&gt; rather than &lt;a href=&quot;inspect#inspect.getfullargspec&quot;&gt;&lt;code&gt;inspect.getfullargspec()&lt;/code&gt;&lt;/a&gt; to extract signature information from callables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8099d9be509a1d7cf9205db0b7544b3df794c0f6" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: &lt;a href=&quot;#pty.spawn&quot;&gt;&lt;code&gt;spawn()&lt;/code&gt;&lt;/a&gt; now returns the status value from &lt;a href=&quot;os#os.waitpid&quot;&gt;&lt;code&gt;os.waitpid()&lt;/code&gt;&lt;/a&gt; on the child process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6171c1370057c3ea38cb58b0beb916f35c2682d" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; is raised when the handshake isn&amp;rsquo;t done. The returned dictionary includes additional X509v3 extension items such as &lt;code&gt;crlDistributionPoints&lt;/code&gt;, &lt;code&gt;caIssuers&lt;/code&gt; and &lt;code&gt;OCSP&lt;/code&gt; URIs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5ba273c4f668a577dc57c00d8dd5f50da67de5b" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-module-spec&quot;&gt;Module specs&lt;/a&gt; were introduced in Python 3.4, by &lt;a href=&quot;https://www.python.org/dev/peps/pep-0451&quot; id=&quot;index-18&quot;&gt;&lt;strong&gt;PEP 451&lt;/strong&gt;&lt;/a&gt;. Earlier versions of Python looked for a method called &lt;a href=&quot;importlib#importlib.abc.MetaPathFinder.find_module&quot;&gt;&lt;code&gt;find_module()&lt;/code&gt;&lt;/a&gt;. This is still called as a fallback if a &lt;a href=&quot;#sys.meta_path&quot;&gt;&lt;code&gt;meta_path&lt;/code&gt;&lt;/a&gt; entry doesn&amp;rsquo;t have a &lt;a href=&quot;importlib#importlib.abc.MetaPathFinder.find_spec&quot;&gt;&lt;code&gt;find_spec()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a26d01dbc58b9dacc8ed4b84d0af68f3c9045e6b" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: &lt;code&gt;object().__format__(format_spec)&lt;/code&gt; raises &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; if &lt;em&gt;format_spec&lt;/em&gt; is not an empty string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4026f66743a12f74d0573c5ed037e6e36de6c8e7" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: &lt;code&gt;replace&lt;/code&gt; keyword was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b6ed44ee019da69bd2b411a0bf8154817470dca" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: &lt;em&gt;atTime&lt;/em&gt; parameter was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1b526295e7900da9be0744a7be7d2aa96444856" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: &lt;em&gt;convert_charrefs&lt;/em&gt; keyword argument added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98081d0f9a0ff4080c02b5129def1aaa36bf8257" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: &lt;em&gt;spawn&lt;/em&gt; added on all unix platforms, and &lt;em&gt;forkserver&lt;/em&gt; added for some unix platforms. Child processes no longer inherit all of the parents inheritable handles on Windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6d04307a782375731bd641d8eb9da0a054d6025" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: A default value can now be set in subclasses; previously it could only be set via the constructor argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a02cf8797f7d0cd51db56dfd39e3c0c369e913f" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Activation of rlcompleter and history was made automatic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cc1def8050bf639dc57de7e6271ab7d4a7583ec" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Add &lt;a href=&quot;#os.O_PATH&quot;&gt;&lt;code&gt;O_PATH&lt;/code&gt;&lt;/a&gt; on systems that support it. Add &lt;a href=&quot;#os.O_TMPFILE&quot;&gt;&lt;code&gt;O_TMPFILE&lt;/code&gt;&lt;/a&gt;, only available on Linux Kernel 3.11 or newer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5978254599ae66154d67048f3d38d3103c725e78" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Add the optional &lt;em&gt;inheritable&lt;/em&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40c410c6ace65293887bf46580d4d4e1f59b9963" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Added &lt;a href=&quot;io#io.IOBase.readline&quot;&gt;&lt;code&gt;readline()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;io#io.IOBase.readlines&quot;&gt;&lt;code&gt;readlines()&lt;/code&gt;&lt;/a&gt; support. The mock of &lt;code&gt;read()&lt;/code&gt; changed to consume &lt;em&gt;read_data&lt;/em&gt; rather than returning it on each call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03d34635bde702641e5fe04f660e8d31a31cd6d1" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Added &lt;code&gt;isolated&lt;/code&gt; attribute for &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#id2&quot;&gt;&lt;code&gt;-I&lt;/code&gt;&lt;/a&gt;&lt;code&gt;isolated&lt;/code&gt; flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddbc1738db84bb887e526156e50969e6f1ae8423" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Added &lt;em&gt;algorithm&lt;/em&gt;, &lt;em&gt;hash_bits&lt;/em&gt; and &lt;em&gt;seed_bits&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cd49cb681d6851e8d0cd011990436d8b9c6679b" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Added &lt;em&gt;file&lt;/em&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c854f2bcb52cad647c480dcbb24cad8906ec6d5" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Added Windows support.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29e18949dee71c5fbb54587b651d26250e3c56c1" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Added context manager support.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5475d23a05e41960dc8ea1697f3be29e40b52f38" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Added native support for the context management protocol to the objects returned by &lt;a href=&quot;#dbm.open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78f93c6a6c62dc0065dfbf11e79df09adced7421" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Added signature introspection on specced and autospecced mock objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1109c41b946e0113c0b9f85e899f6539ffb0ee36" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Added support for data URLs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="526372381dc98e96560bf12c713e6db740023adf" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Added support for int- and float-derived Enum classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="571d09d5619200fab43512dc5f2c9599cb13fa73" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Added support for the &lt;code&gt;&quot;x&quot;&lt;/code&gt; and &lt;code&gt;&quot;xb&quot;&lt;/code&gt; modes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f90339ca71fa907f10decb12dbc43084d801d4b7" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Added support for the &lt;code&gt;&quot;x&quot;&lt;/code&gt;, &lt;code&gt;&quot;xb&quot;&lt;/code&gt; and &lt;code&gt;&quot;xt&quot;&lt;/code&gt; modes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a50f63b20804683db81da97d1eb2b59d826128df" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Added support for the &lt;code&gt;'x'&lt;/code&gt; and &lt;code&gt;'xb'&lt;/code&gt; modes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ce1c4fad339a7dd252b5262cee9706df7c74600" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Added support for the &lt;code&gt;'x'&lt;/code&gt;, &lt;code&gt;'xb'&lt;/code&gt; and &lt;code&gt;'xt'&lt;/code&gt; modes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bbaee557807e9060a8c696e88dd2d82d36bb705" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Added support for unseekable files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b0f79c0104ad00869bcd21bc995b1c280408619" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Added the &lt;a href=&quot;#weakref.ref.__callback__&quot;&gt;&lt;code&gt;__callback__&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4135932f343ee84f9211f35833dbfea4d4c31749" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Added the &lt;code&gt;with_pip&lt;/code&gt; parameter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b56a1789988430ab454180c3c31c037c03c3688e" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Added the &lt;em&gt;compact&lt;/em&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47a23f52dceaa9e85c84092319a8e70d89a328fa" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Added the &lt;em&gt;uri&lt;/em&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25736294f42a79674ab81892c16785516fa601d4" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Added the POSIX permission check.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dec8ee069c3f97bea30b817a63adf3ae4e0da16" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: An instance of a subclass of &lt;a href=&quot;configparser#configparser.RawConfigParser&quot;&gt;&lt;code&gt;RawConfigParser&lt;/code&gt;&lt;/a&gt; is now accepted as a value for &lt;code&gt;fname&lt;/code&gt;. This facilitates:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d445304e6c9c42ce2d024598f3da3a5504325d08" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Any &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt; is now accepted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07f6b793cdc3b490b5e787cc64437f15fca08826" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Any &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like objects&lt;/a&gt; are now accepted by all encoding and decoding functions in this module. Ascii85/Base85 support added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34ad5355e0b443969aa4c5f9b071aa80a93dcf89" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Calls objects in &lt;a href=&quot;sys#sys.path_hooks&quot;&gt;&lt;code&gt;sys.path_hooks&lt;/code&gt;&lt;/a&gt; with the current working directory for &lt;code&gt;''&lt;/code&gt; (i.e. the empty string).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90851c1fa0579ab96e63f7f5a0c85139bf96b445" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Changed code to use &lt;a href=&quot;importlib#module-importlib&quot;&gt;&lt;code&gt;importlib&lt;/code&gt;&lt;/a&gt; for the byte-code cache file writing. This means file creation/writing semantics now match what &lt;a href=&quot;importlib#module-importlib&quot;&gt;&lt;code&gt;importlib&lt;/code&gt;&lt;/a&gt; does, e.g. permissions, write-and-move semantics, etc. Also added the caveat that &lt;a href=&quot;exceptions#FileExistsError&quot;&gt;&lt;code&gt;FileExistsError&lt;/code&gt;&lt;/a&gt; is raised if &lt;em&gt;cfile&lt;/em&gt; is a symlink or non-regular file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15f62ee25d999c03892974e4b445ab6ffe42cfe0" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Changes to &lt;a href=&quot;pydoc#module-pydoc&quot;&gt;&lt;code&gt;pydoc&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;inspect#module-inspect&quot;&gt;&lt;code&gt;inspect&lt;/code&gt;&lt;/a&gt; mean that the reported signatures for callables are now more comprehensive and consistent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16f858fa18a0f630b6ed044142ea89d9b478a85b" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Changing value of &lt;a href=&quot;#urllib.request.Request.data&quot;&gt;&lt;code&gt;Request.data&lt;/code&gt;&lt;/a&gt; now deletes &amp;ldquo;Content-Length&amp;rdquo; header if it was previously set or calculated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44d5f160fac2cdd8c00d8b0797f155b4791799d8" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Default &lt;a href=&quot;#urllib.request.Request.method&quot;&gt;&lt;code&gt;Request.method&lt;/code&gt;&lt;/a&gt; may be indicated at the class level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a2bca8cc5f845e17bc4c0e5a3e5ad08a0c7290f" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Defaults to &lt;code&gt;None&lt;/code&gt;. Previously the attribute was optional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd9af8a5a1ead9aa86d5deac76392d72c3f65d6a" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Following &lt;a href=&quot;https://www.python.org/dev/peps/pep-0442&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;PEP 442&lt;/strong&gt;&lt;/a&gt;, objects with a &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__del__&quot;&gt;&lt;code&gt;__del__()&lt;/code&gt;&lt;/a&gt; method don&amp;rsquo;t end up in &lt;a href=&quot;#gc.garbage&quot;&gt;&lt;code&gt;gc.garbage&lt;/code&gt;&lt;/a&gt; anymore.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="547cf2b670b5087751f804bbc8d353da1247be08" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: If &lt;code&gt;__loader__&lt;/code&gt; is not set, raise &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt;, just like when the attribute is set to &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9cc166a4a4488471a5a970c014c2676723745f7" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: If &lt;code&gt;port&lt;/code&gt; is specified as &lt;code&gt;None&lt;/code&gt;, a Unix domain socket is created using the value in &lt;code&gt;host&lt;/code&gt; - otherwise, a TCP socket is created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b4201d821fcf51ca7e570776a3cb908e0f29773" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: If &lt;code&gt;port&lt;/code&gt; is specified as &lt;code&gt;None&lt;/code&gt;, a Unix domain socket is created using the value in &lt;code&gt;host&lt;/code&gt; - otherwise, a UDP socket is created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abd146ec82e9dd5cb9c0a4d9ef0f66fc246622f8" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: If &lt;em&gt;base&lt;/em&gt; is not an instance of &lt;a href=&quot;#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt; and the &lt;em&gt;base&lt;/em&gt; object has a &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__index__&quot;&gt;&lt;code&gt;base.__index__&lt;/code&gt;&lt;/a&gt; method, that method is called to obtain an integer for the base. Previous versions used &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__int__&quot;&gt;&lt;code&gt;base.__int__&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__index__&quot;&gt;&lt;code&gt;base.__index__&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a1b89a264f6b7a4a7914a9d7c7f3eed02c97c37" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: In Python 3.3 Parameter objects were allowed to have &lt;code&gt;name&lt;/code&gt; set to &lt;code&gt;None&lt;/code&gt; if their &lt;code&gt;kind&lt;/code&gt; was set to &lt;code&gt;POSITIONAL_ONLY&lt;/code&gt;. This is no longer permitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eb94ddce2a2b70c80baf5015bc88b951da8f4e5" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: In Python versions earlier than 3.4, this function could also be passed a text level, and would return the corresponding numeric value of the level. This undocumented behaviour was considered a mistake, and was removed in Python 3.4, but reinstated in 3.4.2 due to retain backward compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d908f177fb0fa9ccb214dc09fb99718daeafc98" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: In earlier versions the &lt;a href=&quot;#unittest.TestSuite&quot;&gt;&lt;code&gt;TestSuite&lt;/code&gt;&lt;/a&gt; held references to each &lt;a href=&quot;#unittest.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; after &lt;a href=&quot;#unittest.TestSuite.run&quot;&gt;&lt;code&gt;TestSuite.run()&lt;/code&gt;&lt;/a&gt;. Subclasses can restore that behavior by overriding &lt;code&gt;TestSuite._removeTestAtIndex()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0bc3e69263470dedfe9997af46d61ac16b2f926" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: In earlier versions, if the target directory already existed, an error was raised, unless the &lt;code&gt;--clear&lt;/code&gt; or &lt;code&gt;--upgrade&lt;/code&gt; option was provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c86338fd0b00bc560e3f0a638fb60d062c1d3ea7" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Installs pip by default, added the &lt;code&gt;--without-pip&lt;/code&gt; and &lt;code&gt;--copies&lt;/code&gt; options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe32c3e42db7b425227e1221f5b509b1889cb005" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Made optional instead of an abstractmethod.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad7002330735555358c2725a8906c97ef9adcc2f" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Modules that raise &lt;a href=&quot;#unittest.SkipTest&quot;&gt;&lt;code&gt;SkipTest&lt;/code&gt;&lt;/a&gt; on import are recorded as skips, not errors. Discovery works for &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-namespace-package&quot;&gt;namespace packages&lt;/a&gt;. Paths are sorted before being imported so that execution order is the same even if the underlying file system&amp;rsquo;s ordering is not dependent on file name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f36f170dd5c2e2b197775ec7ceaa6711602fade0" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: New API, old API deprecated. Support for binary format plists added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c31411fdd8d9dbbb4eb43dff4ced02079abdaa2" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: New optional argument &lt;em&gt;cadata&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd1eb972a72b47de6f93331e4945058dc23a975b" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: No longer abstract and a concrete implementation is provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="debcc86ab4f4fb10ac757de15d5c07180d4e694a" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: No longer raises &lt;a href=&quot;exceptions#NotImplementedError&quot;&gt;&lt;code&gt;NotImplementedError&lt;/code&gt;&lt;/a&gt; when called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27bfa4204ea6c9bcbb6425624adbd8df86de7a4f" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Now supported on Unix when the &lt;code&gt;'spawn'&lt;/code&gt; start method is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="467051e7fb6d03c391fae3c8489aff2376a143db" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Parameter &lt;em&gt;key&lt;/em&gt; can be a bytes or bytearray object. Parameter &lt;em&gt;msg&lt;/em&gt; can be of any type supported by &lt;a href=&quot;hashlib#module-hashlib&quot;&gt;&lt;code&gt;hashlib&lt;/code&gt;&lt;/a&gt;. Parameter &lt;em&gt;digestmod&lt;/em&gt; can be the name of a hash algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79d643e40c80217000c5c3ae86d2aee85d4a3123" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Parameter &lt;em&gt;msg&lt;/em&gt; can be of any type supported by &lt;a href=&quot;hashlib#module-hashlib&quot;&gt;&lt;code&gt;hashlib&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2987a7f5b79bd5b384b2283f0c8e1ee7a020b260" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Raise &lt;a href=&quot;#shutil.SameFileError&quot;&gt;&lt;code&gt;SameFileError&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;#shutil.Error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt;. Since the former is a subclass of the latter, this change is backward compatible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f1443d8e0ea3988ac2fd822449e2b21114f3834" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Raise &lt;a href=&quot;exceptions#ImportError&quot;&gt;&lt;code&gt;ImportError&lt;/code&gt;&lt;/a&gt; when called instead of &lt;a href=&quot;exceptions#NotImplementedError&quot;&gt;&lt;code&gt;NotImplementedError&lt;/code&gt;&lt;/a&gt;. Functionality provided when &lt;a href=&quot;#importlib.abc.Loader.exec_module&quot;&gt;&lt;code&gt;exec_module()&lt;/code&gt;&lt;/a&gt; is available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a790480f9c688dbb42991686467d06bbb1ec7f3d" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Raise &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;exceptions#NotImplementedError&quot;&gt;&lt;code&gt;NotImplementedError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29f6f64efd83eceff97497a0065b956904b9839b" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Raises &lt;a href=&quot;exceptions#ImportError&quot;&gt;&lt;code&gt;ImportError&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;exceptions#NotImplementedError&quot;&gt;&lt;code&gt;NotImplementedError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7b1849049a9f4ef1fa0e6adaec33c7b57aa4023" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Raises &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;exceptions#NotImplementedError&quot;&gt;&lt;code&gt;NotImplementedError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd2debda84dbafc528845a8a5b0621620958fa37" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Restoration of the &lt;code&gt;rot13&lt;/code&gt; alias.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c04b0364fcb059a7cb84c1e4f213d9e01eee741b" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Restoration of the aliases for the binary transforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f187c26cd8b21bef0bac395512a2a5b23c3c1f5c" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Returning NotImplemented from the underlying comparison function for unrecognised types is now supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f41a828d79435b6ab92d1af9504085545ab2c67" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Returns &lt;code&gt;(None, [])&lt;/code&gt; instead of raising &lt;a href=&quot;exceptions#NotImplementedError&quot;&gt;&lt;code&gt;NotImplementedError&lt;/code&gt;&lt;/a&gt;. Uses &lt;a href=&quot;#importlib.abc.PathEntryFinder.find_spec&quot;&gt;&lt;code&gt;find_spec()&lt;/code&gt;&lt;/a&gt; when available to provide functionality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d952c0ebc1d5df5ba1e6a5aa894da4845dbde8a" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Returns &lt;code&gt;False&lt;/code&gt; if there were any &lt;a href=&quot;#unittest.TestResult.unexpectedSuccesses&quot;&gt;&lt;code&gt;unexpectedSuccesses&lt;/code&gt;&lt;/a&gt; from tests marked with the &lt;a href=&quot;#unittest.expectedFailure&quot;&gt;&lt;code&gt;expectedFailure()&lt;/code&gt;&lt;/a&gt; decorator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bff63aa286374c7c1b24af1e59040c5f3c8d871" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Returns &lt;code&gt;None&lt;/code&gt; when called instead of &lt;code&gt;NotImplemented&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3afd017dbcb784877342e6dae03c8efa3fcc7b6a" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Returns &lt;code&gt;None&lt;/code&gt; when called instead of raising &lt;a href=&quot;exceptions#NotImplementedError&quot;&gt;&lt;code&gt;NotImplementedError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f2161d9c0a8364c2f9af9c590df8eed0c9a24d8" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Returns &lt;code&gt;None&lt;/code&gt; when called instead of raising &lt;a href=&quot;exceptions#NotImplementedError&quot;&gt;&lt;code&gt;NotImplementedError&lt;/code&gt;&lt;/a&gt;. Can use &lt;a href=&quot;#importlib.abc.MetaPathFinder.find_spec&quot;&gt;&lt;code&gt;find_spec()&lt;/code&gt;&lt;/a&gt; to provide functionality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cf35a6f0a5e015eb1a94d255b121d8bbe30b843" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: SMTPException became subclass of &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="775ce8cb8144e0f24ad9c9d70e71eeaac13dc758" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Set &lt;a href=&quot;https://docs.python.org/3.8/reference/import.html#__name__&quot;&gt;&lt;code&gt;__name__&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3.8/reference/import.html#__loader__&quot;&gt;&lt;code&gt;__loader__&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;https://docs.python.org/3.8/reference/import.html#__package__&quot;&gt;&lt;code&gt;__package__&lt;/code&gt;&lt;/a&gt; unconditionally to support reloading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b5fc5dcf3b71f3fdf03471e15d08040d35c8f60" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Set &lt;code&gt;__loader__&lt;/code&gt; if set to &lt;code&gt;None&lt;/code&gt;, as if the attribute does not exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b49a155d5942450cda9e71ed9c5285f7ece9125" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Support for 24-bit samples was added. All functions now accept any &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;. String input now results in an immediate error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04716b7ca636d60051f842d727a4cf568489b516" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Support for the &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="281b3984a9843d1b3f79a3a55f6a9cb7e2baa9ff" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Support for the &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement was added. The new file descriptor is now non-inheritable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d271640fd718b970379480ae12d403d633a4dd54" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Support for the &lt;em&gt;input&lt;/em&gt; keyword argument was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a07e20e374c469f8c336659f7dd5865b14ce6a2" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Test discovery supports &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-namespace-package&quot;&gt;namespace packages&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7fc3490bfc67290951e29ee803970bdf738fa9b" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: The &lt;a href=&quot;#OSError.filename&quot;&gt;&lt;code&gt;filename&lt;/code&gt;&lt;/a&gt; attribute is now the original file name passed to the function, instead of the name encoded to or decoded from the filesystem encoding. Also, the &lt;em&gt;filename2&lt;/em&gt; constructor argument and attribute was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6b7728ab161788cdcfdabee630268fda9ced93e" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: The &lt;code&gt;'surrogatepass'&lt;/code&gt; error handlers now works with utf-16* and utf-32* codecs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b012f8bfb01a7c7b8b398a744b6d06d628f2da20" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: The &lt;code&gt;'x'&lt;/code&gt; (exclusive creation) mode was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bbbe4636cf2cacbdeab7e19b9cbff7eed060f34" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: The &lt;code&gt;ST_NODEV&lt;/code&gt;, &lt;code&gt;ST_NOEXEC&lt;/code&gt;, &lt;code&gt;ST_SYNCHRONOUS&lt;/code&gt;, &lt;code&gt;ST_MANDLOCK&lt;/code&gt;, &lt;code&gt;ST_WRITE&lt;/code&gt;, &lt;code&gt;ST_APPEND&lt;/code&gt;, &lt;code&gt;ST_IMMUTABLE&lt;/code&gt;, &lt;code&gt;ST_NOATIME&lt;/code&gt;, &lt;code&gt;ST_NODIRATIME&lt;/code&gt;, and &lt;code&gt;ST_RELATIME&lt;/code&gt; constants were added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abb78245dbb025b8b981ec6dedfc938eb90f843d" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: The &lt;code&gt;__wrapped__&lt;/code&gt; attribute now always refers to the wrapped function, even if that function defined a &lt;code&gt;__wrapped__&lt;/code&gt; attribute. (see &lt;a href=&quot;https://bugs.python.org/issue17482&quot;&gt;bpo-17482&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5482a0a70a012195edd252272815c06c4bbcf18c" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: The &lt;code&gt;file&lt;/code&gt; attribute is automatically closed upon the garbage collection of the creating &lt;code&gt;FieldStorage&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="206e1adfa020778a0a9e61cc640e9618826da0f8" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: The &lt;code&gt;verify&lt;/code&gt; argument was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="073189996bf6f624bbb99e21b1e7c3d48321a707" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: The &lt;em&gt;defaultTest&lt;/em&gt; parameter was changed to also accept an iterable of test names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9727cfdc284d16e761091301bbdf81cecdfb2b4" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: The &lt;em&gt;strict&lt;/em&gt; parameter was removed. HTTP 0.9 style &amp;ldquo;Simple Responses&amp;rdquo; are no longer supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d657043598b0cf211df2fe3d2bbcb6f75cb05fa0" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: The &lt;em&gt;strict&lt;/em&gt; parameter was removed. HTTP 0.9-style &amp;ldquo;Simple Responses&amp;rdquo; are no longer supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8b3947e8ecbc5550d09f9a928d6cfe955a97fce" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: The &lt;em&gt;strict&lt;/em&gt; parameter was removed. HTTP 0.9-style &amp;ldquo;Simple Responses&amp;rdquo; are not longer supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6ac972474009854779b7dba1ce3a2029c060add" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: The CAN_BCM protocol was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b378bbeba4f2415dc682f9a660ba6d2d5833ebd" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: The class now supports hostname check with &lt;a href=&quot;ssl#ssl.SSLContext.check_hostname&quot;&gt;&lt;code&gt;ssl.SSLContext.check_hostname&lt;/code&gt;&lt;/a&gt; and &lt;em&gt;Server Name Indication&lt;/em&gt; (see &lt;a href=&quot;ssl#ssl.HAS_SNI&quot;&gt;&lt;code&gt;ssl.HAS_SNI&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72752b769d3409e5534cd67fe718ffec40b8da1f" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: The error response includes a Content-Length header. Added the &lt;em&gt;explain&lt;/em&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76be54ebccd0889a27aa5efcc71a643a878cf2d9" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: The file is now non-inheritable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc2e65acd44b499642fc383067052903500c3757" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: The function supports &lt;a href=&quot;#stat.S_IFDOOR&quot;&gt;&lt;code&gt;S_IFDOOR&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#stat.S_IFPORT&quot;&gt;&lt;code&gt;S_IFPORT&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#stat.S_IFWHT&quot;&gt;&lt;code&gt;S_IFWHT&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e37c6d084570de73e6c575530940e3625d0229cb" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: The handshake method also performs &lt;a href=&quot;#ssl.match_hostname&quot;&gt;&lt;code&gt;match_hostname()&lt;/code&gt;&lt;/a&gt; when the &lt;a href=&quot;#ssl.SSLContext.check_hostname&quot;&gt;&lt;code&gt;check_hostname&lt;/code&gt;&lt;/a&gt; attribute of the socket&amp;rsquo;s &lt;a href=&quot;#ssl.SSLSocket.context&quot;&gt;&lt;code&gt;context&lt;/code&gt;&lt;/a&gt; is true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f240b6b1a737bdd863e8ed288aa1fd73b1d9367b" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: The method now supports hostname check with &lt;a href=&quot;ssl#ssl.SSLContext.check_hostname&quot;&gt;&lt;code&gt;ssl.SSLContext.check_hostname&lt;/code&gt;&lt;/a&gt; and &lt;em&gt;Server Name Indication&lt;/em&gt; (see &lt;a href=&quot;ssl#ssl.HAS_SNI&quot;&gt;&lt;code&gt;ssl.HAS_SNI&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac6cf37b80532792f1874ea7fa2493eaadc12c1a" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: The method now supports hostname check with &lt;code&gt;SSLContext.check_hostname&lt;/code&gt; and &lt;em&gt;Server Name Indicator&lt;/em&gt; (see &lt;a href=&quot;ssl#ssl.HAS_SNI&quot;&gt;&lt;code&gt;HAS_SNI&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2d6476c108f3747f18ad71be92c210162202465" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: The name attribute has been present in CPython since its inception, but until Python 3.4 was not formally specified, so may not exist on some platforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81f084d1d08c76e82e458f6f69b20415711ecd2f" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: The new file descriptor is now non-inheritable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bca53188c01fbea416ffb38887f77e67da6c38f" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: The new file descriptors are now non-inheritable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4474904d8d46a8a21c25e403c2bf62413d445218" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: The optional &lt;code&gt;m&lt;/code&gt; parameter was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21ca64f1d1cfec827e1054ddfeec13f1cc339587" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: The positional argument specifiers can be omitted for &lt;a href=&quot;#string.Formatter&quot;&gt;&lt;code&gt;Formatter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bff7c4e47480e4a606af7bb6b08b4d098c5aaee0" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: The request methods add_data, has_data, get_data, get_type, get_host, get_selector, get_origin_req_host and is_unverifiable that were deprecated since 3.3 have been removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25811023e8709e9edc58310da5e62315cf3be75e" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: The returned socket is now non-inheritable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1c1ef814a0522f7982685c62e33e5f9ee8a6748" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: The returned sockets are now non-inheritable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c965737cf3ff7cc76fcbbf5e02b62167f99f7a9e" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: The socket is now non-inheritable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bef524d5cf5dd0ce14fb0c3c02056fc3114a2b5" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: The stat module is backed by a C implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccb62796c0b14dd68cc9e21d13a1c4b6db5385a1" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: The utf-16* and utf-32* encoders no longer allow surrogate code points (&lt;code&gt;U+D800&lt;/code&gt;&amp;ndash;&lt;code&gt;U+DFFF&lt;/code&gt;) to be encoded. The utf-32* decoders no longer decode byte sequences that correspond to surrogate code points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f83524fa13629635b622a1cdb0f9ec5008e5cd8f" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: This function is now based on &lt;a href=&quot;#inspect.signature&quot;&gt;&lt;code&gt;signature()&lt;/code&gt;&lt;/a&gt;, but still ignores &lt;code&gt;__wrapped__&lt;/code&gt; attributes and includes the already bound first parameter in the signature output for bound methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c521a4a6f79a4d582b496e83ee5a6c76eb47b1a4" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: To detect calls to &lt;a href=&quot;#abc.ABCMeta.register&quot;&gt;&lt;code&gt;register()&lt;/code&gt;&lt;/a&gt;, you can use the &lt;a href=&quot;#abc.get_cache_token&quot;&gt;&lt;code&gt;get_cache_token()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06026e6b963524f5f1fb67a11def37bb78b4e8d0" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: To suppress printing any banner, pass an empty string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a385062a107e2d4a8a1e6493aa6b47f1f1725d67" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Updated to be based on &lt;a href=&quot;https://www.python.org/dev/peps/pep-0451&quot; id=&quot;index-6&quot;&gt;&lt;strong&gt;PEP 451&lt;/strong&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6109cc614623ccccd3791cc302401755f67d99b3" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Updated to be based on &lt;a href=&quot;https://www.python.org/dev/peps/pep-0451&quot; id=&quot;index-9&quot;&gt;&lt;strong&gt;PEP 451&lt;/strong&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cc546f052fac77b290a09dee704a740f800d41a" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Updated to take advantage of the module spec feature added by &lt;a href=&quot;https://www.python.org/dev/peps/pep-0451&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;PEP 451&lt;/strong&gt;&lt;/a&gt;. This allows &lt;code&gt;__cached__&lt;/code&gt; to be set correctly for modules run this way, as well as ensuring the real module name is always accessible as &lt;code&gt;__spec__.name&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2c9bb85683979dfbbf662586f284f3fa0f4903a" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Updated to take advantage of the module spec feature added by &lt;a href=&quot;https://www.python.org/dev/peps/pep-0451&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;PEP 451&lt;/strong&gt;&lt;/a&gt;. This allows &lt;code&gt;__cached__&lt;/code&gt; to be set correctly in the case where &lt;code&gt;__main__&lt;/code&gt; is imported from a valid sys.path entry rather than being executed directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e6c112f29b366c7ec1116a3656a3163add58599" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Use &lt;code&gt;(',', ': ')&lt;/code&gt; as default if &lt;em&gt;indent&lt;/em&gt; is not &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="531c464001fb4a65bbca9e1e52f97f813d400d01" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Windows now uses the same implementation as all other platforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="374a16956e4a5f625e1b2689796dcad777e5ff84" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: Windows support added</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c747dfd4237f7bbec3e63100f6a02a7606d3fcfa" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: ZIP64 extensions are enabled by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="417fd7ced1aefee1b8a00c473516fb89f5e2ce7c" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: accepts any &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt; as input for encoding and decoding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3650d52799a4c624b59deffd016af82454a9ff61" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: memoryview is now registered automatically with &lt;a href=&quot;collections.abc#collections.abc.Sequence&quot;&gt;&lt;code&gt;collections.abc.Sequence&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f51f235881b6b84b1396b3c487b150c936e074fe" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: the &lt;em&gt;policy&lt;/em&gt; keyword argument was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29af30791781def4f4bfde0e56f11250ee073d61" translate="yes" xml:space="preserve">
          <source>Changed in version 3.4: the method was changed to use &lt;code&gt;utf8=True&lt;/code&gt;, thus producing an &lt;a href=&quot;https://tools.ietf.org/html/rfc6531.html&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;RFC 6531&lt;/strong&gt;&lt;/a&gt;-like message representation, instead of being a direct alias for &lt;a href=&quot;#email.message.EmailMessage.as_string&quot;&gt;&lt;code&gt;as_string()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="783172687e666b89bf20a20800e19a271c4a4f52" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2718ba01d7bcc5485a5ef6166e8ee9af093b896" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5.1: A &lt;a href=&quot;exceptions#RecursionError&quot;&gt;&lt;code&gt;RecursionError&lt;/code&gt;&lt;/a&gt; exception is now raised if the new limit is too low at the current recursion depth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="341a461bd35829944be0413ee97dbb363533181e" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5.1: The &lt;em&gt;host&lt;/em&gt; parameter can be a sequence of strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72a3a9ec07ee7c567df734911d524f86a591e368" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5.1: The function accepts any &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-awaitable&quot;&gt;awaitable&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7e8bb9a4b3d0e221b80af7c96b152682d3c56c5" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5.2: &lt;code&gt;address&lt;/code&gt; no longer needs to be resolved. &lt;code&gt;sock_connect&lt;/code&gt; will try to check if the &lt;em&gt;address&lt;/em&gt; is already resolved by calling &lt;a href=&quot;socket#socket.inet_pton&quot;&gt;&lt;code&gt;socket.inet_pton()&lt;/code&gt;&lt;/a&gt;. If not, &lt;a href=&quot;#asyncio.loop.getaddrinfo&quot;&gt;&lt;code&gt;loop.getaddrinfo()&lt;/code&gt;&lt;/a&gt; will be used to resolve the &lt;em&gt;address&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1166b6be007bd9d7bbc0e83517787f7d59103c43" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5.2: On Linux, if the &lt;code&gt;getrandom()&lt;/code&gt; syscall blocks (the urandom entropy pool is not initialized yet), fall back on reading &lt;code&gt;/dev/urandom&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8380c03b262ccc4213a57664c36cdfb10c18ef5" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5.3: &lt;a href=&quot;#asyncio.loop.run_in_executor&quot;&gt;&lt;code&gt;loop.run_in_executor()&lt;/code&gt;&lt;/a&gt; no longer configures the &lt;code&gt;max_workers&lt;/code&gt; of the thread pool executor it creates, instead leaving it up to the thread pool executor (&lt;a href=&quot;concurrent.futures#concurrent.futures.ThreadPoolExecutor&quot;&gt;&lt;code&gt;ThreadPoolExecutor&lt;/code&gt;&lt;/a&gt;) to set the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fe56c53cc2f17f1f1a74e1af9f08b6b98ed6d5b" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5.3: Updated to support linking with OpenSSL 1.1.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30425075849dfd3316ee72293aa07085c559eb80" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bce948492d59c6dc9726461bbfbb75d2b5aac126" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: &lt;a href=&quot;#dbm.dumb.open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; always creates a new database when the flag has the value &lt;code&gt;'n'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9568b8f30026525e2451cedf35e0d53d2c5f8ae4" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: &lt;a href=&quot;#doctest.DocTestSuite&quot;&gt;&lt;code&gt;DocTestSuite()&lt;/code&gt;&lt;/a&gt; returns an empty &lt;a href=&quot;unittest#unittest.TestSuite&quot;&gt;&lt;code&gt;unittest.TestSuite&lt;/code&gt;&lt;/a&gt; if &lt;em&gt;module&lt;/em&gt; contains no docstrings instead of raising &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77b5f42fa4723ab1a7be62c9d9a2e46f513ed23c" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: &lt;a href=&quot;#smtplib.SMTPNotSupportedError&quot;&gt;&lt;code&gt;SMTPNotSupportedError&lt;/code&gt;&lt;/a&gt; may be raised, and the &lt;em&gt;initial_response_ok&lt;/em&gt; parameter was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05af516fa9e62a7eabe9d33ef8ce7796ccb9aa6c" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: &lt;code&gt;AsyncFunctionDef&lt;/code&gt; is now supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef030ed70dd3dffe4ce0e7beaa75e4e92f2d658f" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: &lt;code&gt;SMTPUTF8&lt;/code&gt; support added, and &lt;a href=&quot;#smtplib.SMTPNotSupportedError&quot;&gt;&lt;code&gt;SMTPNotSupportedError&lt;/code&gt;&lt;/a&gt; may be raised if &lt;code&gt;SMTPUTF8&lt;/code&gt; is specified but the server does not support it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b406126fef88f081ce9dd4c318c46d47368e1cc" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: &lt;code&gt;__eq__()&lt;/code&gt; now takes &lt;a href=&quot;#http.cookies.Morsel.key&quot;&gt;&lt;code&gt;key&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#http.cookies.Morsel.value&quot;&gt;&lt;code&gt;value&lt;/code&gt;&lt;/a&gt; into account.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56d0ba7df7bf6f189f1ca1dd1b6b03bd6b6f7f66" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: &lt;em&gt;_charset&lt;/em&gt; also accepts &lt;a href=&quot;email.charset#email.charset.Charset&quot;&gt;&lt;code&gt;Charset&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3049c0ddf3ae528dffb4035154c9720106d16cb7" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: &lt;em&gt;allow_abbrev&lt;/em&gt; parameter was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5e7742ab5bb4da84c454e5dfbbf5e4f03f4c0b4" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: &lt;em&gt;charset&lt;/em&gt; keyword-only argument was added. The default charset of HTML document changed from &lt;code&gt;'ISO-8859-1'&lt;/code&gt; to &lt;code&gt;'utf-8'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67734f7cdec85352414a5b10e901f5b70ff7d940" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: &lt;em&gt;headers&lt;/em&gt; parameter is optional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a41cf3b8aa647f629a45f8ada9d3305a570d116" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: &lt;em&gt;localaddr&lt;/em&gt; and &lt;em&gt;remoteaddr&lt;/em&gt; may now contain IPv6 addresses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1b86a2b2670b63d9641251aaa64b3f61f984377" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: &lt;em&gt;quiet&lt;/em&gt; parameter was changed to a multilevel value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67216ace4b269eccc5b4184a537ccf4ae3e8650b" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: &lt;em&gt;read_data&lt;/em&gt; is now reset on each call to the &lt;em&gt;mock&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71b2be89fbeeb9dee6a73dd62d1e35083a60acb6" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: &lt;em&gt;stdout&lt;/em&gt; and &lt;em&gt;stderr&lt;/em&gt; attributes added</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2552d73974416d52097093cc6dc8df0a519a0e24" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: &lt;em&gt;suffix&lt;/em&gt;, &lt;em&gt;prefix&lt;/em&gt;, and &lt;em&gt;dir&lt;/em&gt; may now be supplied in bytes in order to obtain a bytes return value. Prior to this, only str was allowed. &lt;em&gt;suffix&lt;/em&gt; and &lt;em&gt;prefix&lt;/em&gt; now accept and default to &lt;code&gt;None&lt;/code&gt; to cause an appropriate default value to be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65b9b0534cbe44098b4dbfbbe694bfebb241015c" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: A list of &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-named-tuple&quot;&gt;named tuples&lt;/a&gt;&lt;code&gt;FrameInfo(frame, filename, lineno, function, code_context, index)&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="574838f70d2abe14f42707a9d566a8a747e95add" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Add &lt;code&gt;__qualname__&lt;/code&gt; and &lt;code&gt;gi_yieldfrom&lt;/code&gt; attributes to generators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9861f431ca21f1b435540450c7f8440f86528d47" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Added &lt;a href=&quot;#token.AWAIT&quot;&gt;&lt;code&gt;AWAIT&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#token.ASYNC&quot;&gt;&lt;code&gt;ASYNC&lt;/code&gt;&lt;/a&gt; tokens.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="979e73d1c9ab1d139c7ba5285e5f6e23442f6957" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Added additional attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d67378b283e7fc0a23b4c4fb7d03114eb1c023ce" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Added debuglevel 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6f91293767193f130d2b8cf583008e7be1fa275" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Added negative &lt;em&gt;limit&lt;/em&gt; support.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="673ad2eeaeed9c38520c861d863acdf40271ea12" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Added support for SSL/TLS in &lt;a href=&quot;#asyncio.ProactorEventLoop&quot;&gt;&lt;code&gt;ProactorEventLoop&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9e813cc5e57d71f76d509c50151744d7bc0c629" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Added support for Windows</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36fd8d29fb07b4433287aeeef6734bf614ee4c5f" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Added support for group references of fixed length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b21aee0ce3b647085321f11c22cb5225add687da" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Added support for passing file descriptor to this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61a042f5fef5811e9add37f4709112f29666c585" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Added support for the &lt;em&gt;xztar&lt;/em&gt; format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56f2990986f0eac1aa35172b9f3a1ba10665ee65" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Added support for the context management protocol to the &lt;code&gt;FieldStorage&lt;/code&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01f80f17847054364624ce71082fd10c493789d3" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Added support for writing arbitrary &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like objects&lt;/a&gt;. The &lt;a href=&quot;io#io.BufferedIOBase.read&quot;&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/a&gt; method now accepts an argument of &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="678dc0a02493c720a2d7fc332155acbd8aea00b9" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Added support for writing to unseekable streams. Added support for the &lt;code&gt;'x'&lt;/code&gt; mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32ec2ad158ab4770f714a5961f20e660cc4dcce5" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Added support of &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c99228f47ee0147973525603483a5f3bacd3187" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Added support of arbitrary iterables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4abf4a8d0a42a53c56a03dcbe08e0ca62064a0b0" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Added support of character streams.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b3869d171345c71d5f5393ef86ac496a89e1681" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Added support of slicing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc5b8e03b0949c9c01586b96617efc59a1892629" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Added the &lt;code&gt;-j&lt;/code&gt;, &lt;code&gt;-r&lt;/code&gt;, and &lt;code&gt;-qq&lt;/code&gt; options. &lt;code&gt;-q&lt;/code&gt; option was changed to a multilevel value. &lt;code&gt;-b&lt;/code&gt; will always produce a byte-code file ending in &lt;code&gt;.pyc&lt;/code&gt;, never &lt;code&gt;.pyo&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dd5f4fcfb346f43c0ad4a93d0b9d7e570ae346c" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Added the &lt;em&gt;chunksize&lt;/em&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba18239bbd7c87d361600e28260b65891505133f" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Added the &lt;em&gt;context&lt;/em&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67463b58a47b4eb4142519e4a67b543f82b592f8" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Added the &lt;em&gt;copy_function&lt;/em&gt; keyword argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db96fe38bd1dad734f884898a4dfb323cc5d68d2" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Added the &lt;em&gt;max_length&lt;/em&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ecc3fa3dfce1e7e815b390617487f1de22e8582" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Added the &lt;em&gt;members&lt;/em&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77db1f6e26d205777d71fb6d478775ae18db031c" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Added the &lt;em&gt;numeric_owner&lt;/em&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8fa067f8c439200d3f43401784a2a0f1bf819d1" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Added the &lt;em&gt;workers&lt;/em&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23d60f6a224acfd8e432afcc54ba35da80722e97" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Added the optional &lt;em&gt;key&lt;/em&gt; and &lt;em&gt;reverse&lt;/em&gt; parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03c93cf802a7afd5f8ca022b7bf63f3aa64f6847" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Added the tb_locals parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1b1a38f7a331c8cd4325a88691f6b59a517390c" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Added the two-tuple form for the &lt;em&gt;address&lt;/em&gt; constructor parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12f4a39f79801cbc6c87bbdb87909e3dfca4094b" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Always allow a server_hostname to be passed, even if OpenSSL does not have SNI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79c496672f8c0e7be35031464dae67b2046933dd" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: As part of &lt;a href=&quot;https://www.python.org/dev/peps/pep-0489&quot; id=&quot;index-18&quot;&gt;&lt;strong&gt;PEP 489&lt;/strong&gt;&lt;/a&gt;, the builtin importer now implements &lt;code&gt;Loader.create_module()&lt;/code&gt; and &lt;code&gt;Loader.exec_module()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3aa50ec5a577815eff5b77bb0c86c80ee58998a" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Before Python 3.5, a &lt;a href=&quot;#datetime.time&quot;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; object was considered to be false if it represented midnight in UTC. This behavior was considered obscure and error-prone and has been removed in Python 3.5. See &lt;a href=&quot;https://bugs.python.org/issue13936&quot;&gt;bpo-13936&lt;/a&gt; for full details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="976021f5f4f0d8bfa8e58678faa52a4c249e6648" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Behaviour updated to match the semantics defined in &lt;a href=&quot;https://tools.ietf.org/html/rfc3986.html&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;RFC 3986&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16ca22cac23724b406896f4e926513cf069d99b7" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Discovery no longer checks package names for matching &lt;em&gt;pattern&lt;/em&gt; due to the impossibility of package names matching the default pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da31be2dff335f9c20bc6ce695575df78e9785c8" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Documentation strings are now inherited if not overridden.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="716834f9e6b129dfb20fb42b4de420b29d5a6f03" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: For HTTPS URIs, &lt;a href=&quot;#module-xmlrpc.client&quot;&gt;&lt;code&gt;xmlrpc.client&lt;/code&gt;&lt;/a&gt; now performs all the necessary certificate and hostname checks by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afc4943b6f7ec52b0067f2fb8cec61a67fb7316c" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Found packages are now checked for &lt;code&gt;load_tests&lt;/code&gt; regardless of whether their path matches &lt;em&gt;pattern&lt;/em&gt;, because it is impossible for a package name to match the default pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28d462e66867decc7550f994a764d6a78d5569ac" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: If &lt;em&gt;max_workers&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt; or not given, it will default to the number of processors on the machine, multiplied by &lt;code&gt;5&lt;/code&gt;, assuming that &lt;a href=&quot;#concurrent.futures.ThreadPoolExecutor&quot;&gt;&lt;code&gt;ThreadPoolExecutor&lt;/code&gt;&lt;/a&gt; is often used to overlap I/O instead of CPU work and the number of workers should be higher than the number of workers for &lt;a href=&quot;#concurrent.futures.ProcessPoolExecutor&quot;&gt;&lt;code&gt;ProcessPoolExecutor&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9989bc5d263e7c6b2345696a14879e555901dfe" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: If a &lt;a href=&quot;exceptions#ConnectionError&quot;&gt;&lt;code&gt;ConnectionError&lt;/code&gt;&lt;/a&gt; or subclass is raised, the &lt;a href=&quot;#http.client.HTTPConnection&quot;&gt;&lt;code&gt;HTTPConnection&lt;/code&gt;&lt;/a&gt; object will be ready to reconnect when a new request is sent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9abb2f511a58c5d0dacdf4d219a8fe06f46016ee" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: If an &lt;a href=&quot;exceptions#ImportError&quot;&gt;&lt;code&gt;ImportError&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;exceptions#AttributeError&quot;&gt;&lt;code&gt;AttributeError&lt;/code&gt;&lt;/a&gt; occurs while traversing &lt;em&gt;name&lt;/em&gt; then a synthetic test that raises that error when run will be returned. These errors are included in the errors accumulated by self.errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85a70b3dd1c90b9f4258f74feba25fec4545e510" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: If the current working directory &amp;ndash; represented by an empty string &amp;ndash; is no longer valid then &lt;code&gt;None&lt;/code&gt; is returned but no value is cached in &lt;a href=&quot;sys#sys.path_importer_cache&quot;&gt;&lt;code&gt;sys.path_importer_cache&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f178b529f6d250355f1bf334535c992a2699ad7" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: If the system call is interrupted and the signal handler does not raise an exception, the function now retries the system call instead of raising an &lt;a href=&quot;exceptions#InterruptedError&quot;&gt;&lt;code&gt;InterruptedError&lt;/code&gt;&lt;/a&gt; exception (see &lt;a href=&quot;https://www.python.org/dev/peps/pep-0475&quot; id=&quot;index-14&quot;&gt;&lt;strong&gt;PEP 475&lt;/strong&gt;&lt;/a&gt; for the rationale).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5ad4f1bec4dabb269f79787ec13d7046d3b4c9d" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: If the system call is interrupted and the signal handler does not raise an exception, the function now retries the system call instead of raising an &lt;a href=&quot;exceptions#InterruptedError&quot;&gt;&lt;code&gt;InterruptedError&lt;/code&gt;&lt;/a&gt; exception (see &lt;a href=&quot;https://www.python.org/dev/peps/pep-0475&quot; id=&quot;index-16&quot;&gt;&lt;strong&gt;PEP 475&lt;/strong&gt;&lt;/a&gt; for the rationale).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71cc37bdfb12c951769167957581ffce69c01a75" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: If the system call is interrupted and the signal handler does not raise an exception, the function now retries the system call instead of raising an &lt;a href=&quot;exceptions#InterruptedError&quot;&gt;&lt;code&gt;InterruptedError&lt;/code&gt;&lt;/a&gt; exception (see &lt;a href=&quot;https://www.python.org/dev/peps/pep-0475&quot; id=&quot;index-17&quot;&gt;&lt;strong&gt;PEP 475&lt;/strong&gt;&lt;/a&gt; for the rationale).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9092f3af488d4e88b20eef7000b34424f0452984" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: If the system call is interrupted and the signal handler does not raise an exception, the function now retries the system call instead of raising an &lt;a href=&quot;exceptions#InterruptedError&quot;&gt;&lt;code&gt;InterruptedError&lt;/code&gt;&lt;/a&gt; exception (see &lt;a href=&quot;https://www.python.org/dev/peps/pep-0475&quot; id=&quot;index-36&quot;&gt;&lt;strong&gt;PEP 475&lt;/strong&gt;&lt;/a&gt; for the rationale).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e57302d178b532da446d7173b0a9c7e998a82f2" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: If the system call is interrupted and the signal handler does not raise an exception, the method now retries the system call instead of raising an &lt;a href=&quot;exceptions#InterruptedError&quot;&gt;&lt;code&gt;InterruptedError&lt;/code&gt;&lt;/a&gt; exception (see &lt;a href=&quot;https://www.python.org/dev/peps/pep-0475&quot; id=&quot;index-10&quot;&gt;&lt;strong&gt;PEP 475&lt;/strong&gt;&lt;/a&gt; for the rationale).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a518f953286e7572a70a6b4f7670a61dacba2109" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: If the system call is interrupted and the signal handler does not raise an exception, the method now retries the system call instead of raising an &lt;a href=&quot;exceptions#InterruptedError&quot;&gt;&lt;code&gt;InterruptedError&lt;/code&gt;&lt;/a&gt; exception (see &lt;a href=&quot;https://www.python.org/dev/peps/pep-0475&quot; id=&quot;index-11&quot;&gt;&lt;strong&gt;PEP 475&lt;/strong&gt;&lt;/a&gt; for the rationale).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b746ebb8f7053eee20f0c8523b669326b7c5857" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: If the system call is interrupted and the signal handler does not raise an exception, the method now retries the system call instead of raising an &lt;a href=&quot;exceptions#InterruptedError&quot;&gt;&lt;code&gt;InterruptedError&lt;/code&gt;&lt;/a&gt; exception (see &lt;a href=&quot;https://www.python.org/dev/peps/pep-0475&quot; id=&quot;index-12&quot;&gt;&lt;strong&gt;PEP 475&lt;/strong&gt;&lt;/a&gt; for the rationale).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3166ed12c4aa4c3e567157e9517ccedc256d4338" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: If the system call is interrupted and the signal handler does not raise an exception, the method now retries the system call instead of raising an &lt;a href=&quot;exceptions#InterruptedError&quot;&gt;&lt;code&gt;InterruptedError&lt;/code&gt;&lt;/a&gt; exception (see &lt;a href=&quot;https://www.python.org/dev/peps/pep-0475&quot; id=&quot;index-13&quot;&gt;&lt;strong&gt;PEP 475&lt;/strong&gt;&lt;/a&gt; for the rationale).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f24ecca02529ff0ef62ba3eece53d5192b3b1f1" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: If the system call is interrupted and the signal handler does not raise an exception, the method now retries the system call instead of raising an &lt;a href=&quot;exceptions#InterruptedError&quot;&gt;&lt;code&gt;InterruptedError&lt;/code&gt;&lt;/a&gt; exception (see &lt;a href=&quot;https://www.python.org/dev/peps/pep-0475&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;PEP 475&lt;/strong&gt;&lt;/a&gt; for the rationale).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="421b60415977094d9064742bcf701955b1626e19" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: If the system call is interrupted and the signal handler does not raise an exception, the method now retries the system call instead of raising an &lt;a href=&quot;exceptions#InterruptedError&quot;&gt;&lt;code&gt;InterruptedError&lt;/code&gt;&lt;/a&gt; exception (see &lt;a href=&quot;https://www.python.org/dev/peps/pep-0475&quot; id=&quot;index-7&quot;&gt;&lt;strong&gt;PEP 475&lt;/strong&gt;&lt;/a&gt; for the rationale).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18e9ca7d1c56c17573a8ae2f2dfd59c3181a8013" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: If the system call is interrupted and the signal handler does not raise an exception, the method now retries the system call instead of raising an &lt;a href=&quot;exceptions#InterruptedError&quot;&gt;&lt;code&gt;InterruptedError&lt;/code&gt;&lt;/a&gt; exception (see &lt;a href=&quot;https://www.python.org/dev/peps/pep-0475&quot; id=&quot;index-8&quot;&gt;&lt;strong&gt;PEP 475&lt;/strong&gt;&lt;/a&gt; for the rationale).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3f98ef5fa77e1a46c58137a1f5238fa1868d5f4" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: If the system call is interrupted and the signal handler does not raise an exception, the method now retries the system call instead of raising an &lt;a href=&quot;exceptions#InterruptedError&quot;&gt;&lt;code&gt;InterruptedError&lt;/code&gt;&lt;/a&gt; exception (see &lt;a href=&quot;https://www.python.org/dev/peps/pep-0475&quot; id=&quot;index-9&quot;&gt;&lt;strong&gt;PEP 475&lt;/strong&gt;&lt;/a&gt; for the rationale).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27f211f270f061bac1e22d3c4b811d07868501ef" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: If you are patching builtins in a module then you don&amp;rsquo;t need to pass &lt;code&gt;create=True&lt;/code&gt;, it will be added by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad5e8a53152fdc43ce62b9c8c9944564392aa323" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: In earlier Python versions, the &lt;code&gt;SSLSocket.send()&lt;/code&gt; method returned zero instead of raising &lt;a href=&quot;#ssl.SSLWantWriteError&quot;&gt;&lt;code&gt;SSLWantWriteError&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#ssl.SSLWantReadError&quot;&gt;&lt;code&gt;SSLWantReadError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33abe22eb35e9c9ef6e51e11587555fa9b70b0f6" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Instances of &lt;a href=&quot;#xmlrpc.client.ServerProxy&quot;&gt;&lt;code&gt;ServerProxy&lt;/code&gt;&lt;/a&gt; support the &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-context-manager&quot;&gt;context manager&lt;/a&gt; protocol for closing the underlying transport.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b14b2d6c26302f3d0d48ffa64a2eea826c1de170" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Interpret the input time as a time in UTC as specified by &amp;lsquo;GMT&amp;rsquo; timezone in the input string. Local timezone was used previously. Return an integer (no fractions of a second in the input format)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8d89fe4317d801ffadcdb7112758b90c0c7cb54" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Introduced the RuntimeError transformation via &lt;code&gt;from __future__ import generator_stop&lt;/code&gt;, see &lt;a href=&quot;https://www.python.org/dev/peps/pep-0479&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;PEP 479&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1728691cad246dd6348934a019397606deb11020" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Made the method static.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a6ba87bd7673d96d06f699d08b9074126ef3bb0" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Matching of IP addresses, when present in the subjectAltName field of the certificate, is now supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21179b20fe1fac8ca53b825c86054c1d23efe4d9" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: New methods &lt;code&gt;__getnewargs__&lt;/code&gt;, &lt;code&gt;__rmod__&lt;/code&gt;, &lt;code&gt;casefold&lt;/code&gt;, &lt;code&gt;format_map&lt;/code&gt;, &lt;code&gt;isprintable&lt;/code&gt;, and &lt;code&gt;maketrans&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f893658b9bdfa45624ee7676d3a5bc63eb23fb08" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: On Linux 3.17 and newer, the &lt;code&gt;getrandom()&lt;/code&gt; syscall is now used when available. On OpenBSD 5.6 and newer, the C &lt;code&gt;getentropy()&lt;/code&gt; function is now used. These functions avoid the usage of an internal file descriptor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9487816ac7bfd5dc03211276f3fa94e6995d1fa2" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: On Windows, the function now also supports socket handles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="203f3f13e4b6d466d2ca908d02c3ddc5e5b5d46c" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Parameter objects are picklable and hashable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f126a888bd15d73cc9d821fc5d17468a078735d3" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Previously, &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; was raised when null bytes were encountered in &lt;em&gt;source&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ee198955ff47d41199cb0449bc6e7094fa52d15" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Property docstrings became writeable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e71ef31512f03913c7a3eab96bc209f3db87c43" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Python now retries system calls when a syscall is interrupted by a signal, except if the signal handler raises an exception (see &lt;a href=&quot;https://www.python.org/dev/peps/pep-0475&quot; id=&quot;index-6&quot;&gt;&lt;strong&gt;PEP 475&lt;/strong&gt;&lt;/a&gt; for the rationale), instead of raising &lt;a href=&quot;#InterruptedError&quot;&gt;&lt;code&gt;InterruptedError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2369da4b3d7081a475a96aad2467687f51be61eb" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Result changed from a tuple to a namedtuple.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60b7fe5ed17adc2b12249b0a16824a1bda001b03" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Return a named tuple instead of a tuple.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b142e9561825132f35a890b785e128d883e0bbec" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Signature objects are picklable and hashable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c311b461c9318168e6478c45baf00dec0ac4f2a1" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Starting in Python 3.6, this method will not be optional when &lt;a href=&quot;#importlib.abc.Loader.exec_module&quot;&gt;&lt;code&gt;exec_module()&lt;/code&gt;&lt;/a&gt; is defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c317012d1d9c91359e6ebcc693088757fb3a5f51" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Support for recursive globs using &amp;ldquo;&lt;code&gt;**&lt;/code&gt;&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc61a01acdd37cc159465a9f0e14a3064205956d" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Support for the &amp;ldquo;site-python&amp;rdquo; directory has been removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96f754fd8218d5bea58883303b5a90110078aa82" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Support for the &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c5de0e83e4f793a6375a164c1fc6590a05eb8f2" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: Synchronized objects support the &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-context-manager&quot;&gt;context manager&lt;/a&gt; protocol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf35619084b2040bd7342db1f3706532f61f8c68" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: The &lt;a href=&quot;io#io.BufferedIOBase&quot;&gt;&lt;code&gt;io.BufferedIOBase&lt;/code&gt;&lt;/a&gt; interface is now implemented and all of its reader operations are supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd5077a9c0c9d1b76011520be94c57d9f3cf5aab" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: The &lt;a href=&quot;io#io.BufferedIOBase.read&quot;&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/a&gt; method now accepts an argument of &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ebdef646b528f30d6fd7e23bb34516fb9df5741" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: The &lt;a href=&quot;os#os.O_TMPFILE&quot;&gt;&lt;code&gt;os.O_TMPFILE&lt;/code&gt;&lt;/a&gt; flag is now used if available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="746fac1f591421b7b38e76bf05c9e89254ebfbe7" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: The &lt;code&gt;'.pyo'&lt;/code&gt; file extension is no longer replaced with &lt;code&gt;'.py'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e10699eb05cc553162db733561d74887d87fa0da" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: The &lt;code&gt;'backslashreplace'&lt;/code&gt; error handlers now works with decoding and translating.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8725ca7bc51b5ff6cec24f13624e6f3f7ced220d" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: The &lt;code&gt;'x'&lt;/code&gt; (exclusive creation) mode was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c7c9eb434a922fdd2f8d6903cc142d413bf88a6" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: The &lt;code&gt;respect_handler_level&lt;/code&gt; argument was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10510dcf395ba5d6ee8da8d70abcefab86097bf4" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: The &lt;code&gt;sendfile()&lt;/code&gt; method was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52d943e47d7f876525aebe44c1e777a96ed6c27f" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: The &lt;code&gt;shutdown()&lt;/code&gt; does not reset the socket timeout each time bytes are received or sent. The socket timeout is now to maximum total duration of the shutdown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbbbf217c86fbfa70b3a59177343ec0a399a7525" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: The &lt;em&gt;backlog&lt;/em&gt; parameter is now optional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f044673d353de2da7c29d375bcc6da0f2c2d351e" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: The &lt;em&gt;context&lt;/em&gt; parameter was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17f2fd91cc7b8654d05403d077fb1414265bafa5" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: The &lt;em&gt;converters&lt;/em&gt; argument was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="893daef034b3f984d09338c7803046a1a26b37e4" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: The &lt;em&gt;decode_data&lt;/em&gt; and &lt;em&gt;enable_SMTPUTF8&lt;/em&gt; parameters were added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e81e98e876c2f708dd72c8c539e24dccd1cac052" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: The &lt;em&gt;etype&lt;/em&gt; argument is ignored and inferred from the type of &lt;em&gt;value&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd7748ec093dcfeda201ff3dabdc1ec5f275a1ab" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: The &lt;em&gt;exc_info&lt;/em&gt; parameter can now accept exception instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a13f7d116a3676cf383bf9f21efb471790fc2e92" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: The &lt;em&gt;exist_ok&lt;/em&gt; parameter was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02da0cab62b43d3b47b5d5538350f1eae13955f5" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: The &lt;em&gt;legacy&lt;/em&gt; parameter only writes out &lt;code&gt;.pyc&lt;/code&gt; files, not &lt;code&gt;.pyo&lt;/code&gt; files no matter what the value of &lt;em&gt;optimize&lt;/em&gt; is.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c879c29121e03fcd8ad4ba9923060697738ee75" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: The &lt;em&gt;optimization&lt;/em&gt; parameter was added and the &lt;em&gt;debug_override&lt;/em&gt; parameter was deprecated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a5e79b22f7bf79034d1dab49c93e8295c6d911b" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: The &lt;em&gt;start&lt;/em&gt; parameter was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a0d0591b64398f2eabc102d9a4955764c8273c0" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: The default &lt;em&gt;ssl_version&lt;/em&gt; is changed from &lt;a href=&quot;#ssl.PROTOCOL_SSLv3&quot;&gt;&lt;code&gt;PROTOCOL_SSLv3&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;#ssl.PROTOCOL_TLS&quot;&gt;&lt;code&gt;PROTOCOL_TLS&lt;/code&gt;&lt;/a&gt; for maximum compatibility with modern servers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d9b6836a9123ceecd00f9733299b32685a1ede8" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: The default value for argument &lt;em&gt;convert_charrefs&lt;/em&gt; is now &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dc314222eea7a087d3fbee3cef1515917138b13" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: The dictionary is created from stack items instead of creating an empty dictionary pre-sized to hold &lt;em&gt;count&lt;/em&gt; items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a31ccdcc8395b71354d686054af5996cafc9ddf" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: The docstrings of property objects are now writeable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="501dba3bbb2dc846d2e91af9af04c1963c461bb0" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: The error raised for lack of STARTTLS support is now the &lt;a href=&quot;#smtplib.SMTPNotSupportedError&quot;&gt;&lt;code&gt;SMTPNotSupportedError&lt;/code&gt;&lt;/a&gt; subclass instead of the base &lt;a href=&quot;#smtplib.SMTPException&quot;&gt;&lt;code&gt;SMTPException&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c049809b0b3dca43adca755105541e8b538f54e1" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: The full chained traceback is displayed instead of just the primary traceback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="711fd444763cd0036f717bd8008a563384a24c37" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: The function is now always available and always system-wide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ca300a492fa8c047c848d82578bce391012031d" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: The function is now retried if interrupted by a signal not in &lt;em&gt;sigset&lt;/em&gt; and the signal handler does not raise an exception (see &lt;a href=&quot;https://www.python.org/dev/peps/pep-0475&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;PEP 475&lt;/strong&gt;&lt;/a&gt; for the rationale).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43d906878d580ec882c290284b9ab54d4b1ee979" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: The function is now retried with a recomputed timeout when interrupted by a signal, except if the signal handler raises an exception (see &lt;a href=&quot;https://www.python.org/dev/peps/pep-0475&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;PEP 475&lt;/strong&gt;&lt;/a&gt; for the rationale), instead of raising &lt;a href=&quot;exceptions#InterruptedError&quot;&gt;&lt;code&gt;InterruptedError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f032426070d96c005e3a73613f1284f5ea89bff4" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: The function is now retried with a recomputed timeout when interrupted by a signal, except if the signal handler raises an exception (see &lt;a href=&quot;https://www.python.org/dev/peps/pep-0475&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;PEP 475&lt;/strong&gt;&lt;/a&gt; for the rationale), instead of raising &lt;a href=&quot;exceptions#InterruptedError&quot;&gt;&lt;code&gt;InterruptedError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f44f0b44be25394e4dda1f3af2ac453521f6331" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: The function is now retried with a recomputed timeout when interrupted by a signal, except if the signal handler raises an exception (see &lt;a href=&quot;https://www.python.org/dev/peps/pep-0475&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;PEP 475&lt;/strong&gt;&lt;/a&gt; for the rationale), instead of raising &lt;a href=&quot;exceptions#InterruptedError&quot;&gt;&lt;code&gt;InterruptedError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3312bb02793380a90d78567b06989f46cb463ae4" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: The function is now retried with a recomputed timeout when interrupted by a signal, except if the signal handler raises an exception (see &lt;a href=&quot;https://www.python.org/dev/peps/pep-0475&quot; id=&quot;index-6&quot;&gt;&lt;strong&gt;PEP 475&lt;/strong&gt;&lt;/a&gt; for the rationale), instead of raising &lt;a href=&quot;exceptions#InterruptedError&quot;&gt;&lt;code&gt;InterruptedError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="913de5ec7f348b169cb47c58ffc92d6af042eaef" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: The function is now retried with a recomputed timeout when interrupted by a signal, except if the signal handler raises an exception (see &lt;a href=&quot;https://www.python.org/dev/peps/pep-0475&quot; id=&quot;index-7&quot;&gt;&lt;strong&gt;PEP 475&lt;/strong&gt;&lt;/a&gt; for the rationale), instead of raising &lt;a href=&quot;exceptions#InterruptedError&quot;&gt;&lt;code&gt;InterruptedError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bb119a7d649b2c41a427a648cf56b124372379e" translate="yes" xml:space="preserve">
          <source>Changed in version 3.5: The function is now retried with the recomputed &lt;em&gt;timeout&lt;/em&gt; if interrupted by a signal not in &lt;em&gt;sigset&lt;/em&gt; and the signal handler does not raise an exception (see &lt;a href=&quot;https://www.python.org/dev/peps/pep-0475&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;PEP 475&lt;/strong&gt;&lt;/a&gt; for the rationale).</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
