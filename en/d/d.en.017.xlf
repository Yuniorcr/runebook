<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="">
    <body>
      <group id="">
        <trans-unit id="40c8a933628c77ca08e491a5b2e22d9b1ce4fde0" translate="yes" xml:space="preserve">
          <source>Composition of allocators is not recommended at this level due to inflexibility of dynamic interfaces and inefficiencies caused by cascaded multiple calls. Instead, compose allocators using the static interface defined in &lt;a href=&quot;std_experimental_allocator_building_blocks&quot;&gt;&lt;code&gt;std.experimental.allocator.building_blocks&lt;/code&gt;&lt;/a&gt;, then adapt the composed allocator to &lt;code&gt;ISharedAllocator&lt;/code&gt; (possibly by using &lt;a href=&quot;#CSharedAllocatorImpl&quot;&gt;&lt;code&gt;CSharedAllocatorImpl&lt;/code&gt;&lt;/a&gt; below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7b50cb2c8713f1b5ca6e3a46afeecbf46654a4a" translate="yes" xml:space="preserve">
          <source>Composition of allocators is not recommended at this level due to inflexibility of dynamic interfaces and inefficiencies caused by cascaded multiple calls. Instead, compose allocators using the static interface defined in &lt;a href=&quot;std_experimental_allocator_building_blocks&quot;&gt;&lt;code&gt;std.experimental.allocator.building_blocks&lt;/code&gt;&lt;/a&gt;, then adapt the composed allocator to &lt;code&gt;RCIAllocator&lt;/code&gt; (possibly by using &lt;a href=&quot;#allocatorObject&quot;&gt;&lt;code&gt;allocatorObject&lt;/code&gt;&lt;/a&gt; below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d600c469ce6615aec4b9ccc9ac99015222a2cd4a" translate="yes" xml:space="preserve">
          <source>Composition of allocators is not recommended at this level due to inflexibility of dynamic interfaces and inefficiencies caused by cascaded multiple calls. Instead, compose allocators using the static interface defined in &lt;a href=&quot;std_experimental_allocator_building_blocks&quot;&gt;&lt;code&gt;std.experimental.allocator.building_blocks&lt;/code&gt;&lt;/a&gt;, then adapt the composed allocator to &lt;code&gt;RCISharedAllocator&lt;/code&gt; (possibly by using &lt;a href=&quot;#sharedAllocatorObject&quot;&gt;&lt;code&gt;sharedAllocatorObject&lt;/code&gt;&lt;/a&gt; below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b431b82e9bce2d80758c9a0364b1e899b167bca3" translate="yes" xml:space="preserve">
          <source>Compress and return any remaining data. The returned data should be appended to that returned by compress().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b91383db4a977df84d9d757e34690eb3fc7d851" translate="yes" xml:space="preserve">
          <source>Compress data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8dc2c07db65d42c9c393d98f8d9729c6beed681" translate="yes" xml:space="preserve">
          <source>Compress the data in buf and return the compressed data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89a75f1668dd36d7548c52993ff9cd9810b43d8a" translate="yes" xml:space="preserve">
          <source>Compress/decompress data using the &lt;a href=&quot;http://www.zlib.net&quot;&gt;zlib library&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80550794074729987ba2c50d10325a6661e3698e" translate="yes" xml:space="preserve">
          <source>Compress/decompress data using the zlib library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f100b192df1f9c75c6c1d947e071005a9b94874f" translate="yes" xml:space="preserve">
          <source>Compression method used by ArchiveMember</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26aaa35645fb564b496958b2c50db8717acc133f" translate="yes" xml:space="preserve">
          <source>CompressionMethod</source>
          <target state="translated">CompressionMethod</target>
        </trans-unit>
        <trans-unit id="cbc8d8043da3b003c6d2aff42124a5bad20359c0" translate="yes" xml:space="preserve">
          <source>Compute HMAC digests of arbitrary data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95994e5336c058f341ee7887a377a099034ec411" translate="yes" xml:space="preserve">
          <source>Compute MD5 hash of arbitrary data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24baedad0dbc82d64549a5102e14973f3260590c" translate="yes" xml:space="preserve">
          <source>Compute MOD bits matching &lt;code&gt;this&lt;/code&gt; argument type to wild parameter type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="081bc30fb0efc1dbeb72897ae1b50df74202f671" translate="yes" xml:space="preserve">
          <source>Compute MurmurHash of arbitrary data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ada77a245b8b65254fa2bd2ec7982197684a020" translate="yes" xml:space="preserve">
          <source>Compute RIPEMD-160 hash of arbitrary data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ba34f35a04123a2ebf02b152eea60a361465caa" translate="yes" xml:space="preserve">
          <source>Compute SHA1 and SHA2 hashes of arbitrary data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59806efe8816bdf113fe5ffcf24b9d67587999dc" translate="yes" xml:space="preserve">
          <source>Compute column number at the end of the printed form of the string, assuming the string starts in the leftmost column, which is numbered starting from 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39ea6ece3f7ff3bfca84b026b3c00d5558a650d8" translate="yes" xml:space="preserve">
          <source>Compute covariance of parameters &lt;code&gt;this&lt;/code&gt; and &lt;code&gt;p&lt;/code&gt; as determined by the storage classes of both.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2899928c342104b102c9fb899b2a19b12b7c6b8f" translate="yes" xml:space="preserve">
          <source>Compute digests such as md5, sha1 and crc32.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="114ac47572e156cc9f60194024ceb062761cf170" translate="yes" xml:space="preserve">
          <source>Compute hash function for Object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b9f081e79f23af8321ffcc88ead6e2e02f25fb6" translate="yes" xml:space="preserve">
          <source>Compute n * 2&lt;sup&gt;exp&lt;/sup&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="605710f35eafe733df0dc2a4c0e73d7c711eb032" translate="yes" xml:space="preserve">
          <source>Compute number of elements for a (possibly multidimensional) static array, or 1 for other types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23878574338ad4ed6153fe2d2983bb38e8e88560" translate="yes" xml:space="preserve">
          <source>Compute size of a dt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47dd82c7c7297f6f9c8f6783436ccac77ec97b62" translate="yes" xml:space="preserve">
          <source>Compute square root of x.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6810299cd458778af68742dfbad149d1819bc21e" translate="yes" xml:space="preserve">
          <source>Compute the Adler-32 checksum of a buffer's worth of data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99c622a401ade4d7e2ebcffe7d148251987300a5" translate="yes" xml:space="preserve">
          <source>Compute the CRC32 checksum of a buffer's worth of data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fe16e5290f537eb58bcbe27dcbb8dabf4bc6163" translate="yes" xml:space="preserve">
          <source>Compute the Fourier transform of range using the &amp;Omicron;(&lt;code&gt;N log N&lt;/code&gt;) Cooley-Tukey Algorithm. &lt;code&gt;range&lt;/code&gt; must be a random-access range with slicing and a length equal to &lt;code&gt;size&lt;/code&gt; as provided at the construction of this object. The contents of range can be either numeric types, which will be interpreted as pure real values, or complex types with properties or members &lt;code&gt;.re&lt;/code&gt; and &lt;code&gt;.im&lt;/code&gt; that can be read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b471c4955a83035411d5b45de39b1b5e1642da44" translate="yes" xml:space="preserve">
          <source>Compute the sum of binary logarithms of the input range &lt;code&gt;r&lt;/code&gt;. The error of this method is much smaller than with a naive sum of log2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff38c1a05c708138b2214f90d4dc1a12310dd41c" translate="yes" xml:space="preserve">
          <source>Compute the value of an integer x, raised to the power of a positive integer n.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f68d18423d62869cea6398c61a35fc2726681da" translate="yes" xml:space="preserve">
          <source>Compute the value of x &lt;sup&gt;n&lt;/sup&gt;, where n is an integer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77fc143961f9dbeaf572c0de2cdcd8820a0f8972" translate="yes" xml:space="preserve">
          <source>Computes &lt;a href=&quot;https://en.wikipedia.org/wiki/Entropy_(information_theory)&quot;&gt;entropy&lt;/a&gt; of input range &lt;code&gt;r&lt;/code&gt; in bits. This function assumes (without checking) that the values in &lt;code&gt;r&lt;/code&gt; are all in &lt;code&gt;[0, 1]&lt;/code&gt;. For the entropy to be meaningful, often &lt;code&gt;r&lt;/code&gt; should be normalized too (i.e., its values should sum to 1). The two-parameter version stops evaluating as soon as the intermediate result is greater than or equal to &lt;code&gt;max&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="296843c88206c491563d4a7f5e7016600d230563" translate="yes" xml:space="preserve">
          <source>Computes &lt;a href=&quot;https://en.wikipedia.org/wiki/Euclidean_distance&quot;&gt;Euclidean distance&lt;/a&gt; between input ranges &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;. The two ranges must have the same length. The three-parameter version stops computation as soon as the distance is greater than or equal to &lt;code&gt;limit&lt;/code&gt; (this is useful to save computation if a small distance is sought).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8687c4446d77dec6b0783c73ae0c35b758b4e36" translate="yes" xml:space="preserve">
          <source>Computes &lt;a href=&quot;https://en.wikipedia.org/wiki/MurmurHash&quot;&gt;MurmurHash&lt;/a&gt; hashes of arbitrary data. MurmurHash is a non-cryptographic hash function suitable for general hash-based lookup. It is optimized for x86 but can be used on all architectures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d1c57bf08f15b670eca8f41ce0168ced47af851" translate="yes" xml:space="preserve">
          <source>Computes Cartesian product of two ranges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb193027e232a8b400c045bedc504035cc557cce" translate="yes" xml:space="preserve">
          <source>Computes MD5 hashes of arbitrary data. MD5 hashes are 16 byte quantities that are like a checksum or CRC, but are more robust.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5579e2951cd84cd7814305254794db678509d171" translate="yes" xml:space="preserve">
          <source>Computes RIPEMD-160 hashes of arbitrary data. RIPEMD-160 hashes are 20 byte quantities that are like a checksum or CRC, but are more robust.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b03ce1bab59ab2d228bb375354ca2f56fee8c218" translate="yes" xml:space="preserve">
          <source>Computes SHA1 and SHA2 hashes of arbitrary data. SHA hashes are 20 to 64 byte quantities (depending on the SHA algorithm) that are like a checksum or CRC, but are more robust.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7873407fccab092da69ee0890f41357999dc857" translate="yes" xml:space="preserve">
          <source>Computes a hash of the instance of a type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82604089c1a3a9639da1f3dad4ff14761ed55648" translate="yes" xml:space="preserve">
          <source>Computes a subrange of &lt;code&gt;range&lt;/code&gt; starting at the first occurrence of &lt;code&gt;range&lt;/code&gt;'s minimum (respectively maximum) and with the same ending as &lt;code&gt;range&lt;/code&gt;, or the empty range if &lt;code&gt;range&lt;/code&gt; itself is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b28e3792ae1738b85ec20e79a7ef0f511b39b00f" translate="yes" xml:space="preserve">
          <source>Computes an index for &lt;code&gt;r&lt;/code&gt; based on the comparison &lt;code&gt;less&lt;/code&gt;. The index is a sorted array of pointers or indices into the original range. This technique is similar to sorting, but it is more flexible because (1) it allows &quot;sorting&quot; of immutable collections, (2) allows binary search even if the original collection does not offer random access, (3) allows multiple indexes, each on a different predicate, and (4) may be faster when dealing with large objects. However, using an index may also be slower under certain circumstances due to the extra indirection, and is always larger than a sorting-based solution because it needs space for the index in addition to the original collection. The complexity is the same as &lt;code&gt;sort&lt;/code&gt;'s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92f85def44d73b410c07064bdb1637d1fdade94c" translate="yes" xml:space="preserve">
          <source>Computes integer to floating point powers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="828dda1e22c2f096a88e923fc1bc2efd10471f59" translate="yes" xml:space="preserve">
          <source>Computes the &lt;a href=&quot;https://en.wikipedia.org/wiki/Cosine_similarity&quot;&gt;cosine similarity&lt;/a&gt; of input ranges &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;. The two ranges must have the same length. If both ranges define length, the check is done once; otherwise, it is done at each iteration. If either range has all-zero elements, return 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="001e06c86d6d760ab7657dfb18427574bae02730" translate="yes" xml:space="preserve">
          <source>Computes the &lt;a href=&quot;https://en.wikipedia.org/wiki/Dot_product&quot;&gt;dot product&lt;/a&gt; of input ranges &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;. The two ranges must have the same length. If both ranges define length, the check is done once; otherwise, it is done at each iteration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcf4ed97371360235833e69216aba07328958d9e" translate="yes" xml:space="preserve">
          <source>Computes the &lt;a href=&quot;https://en.wikipedia.org/wiki/Jensen%E2%80%93Shannon_divergence&quot;&gt;Jensen-Shannon divergence&lt;/a&gt; between &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;, which is the sum &lt;code&gt;(ai * log(2 * ai / (ai + bi)) + bi * log(2 * bi / (ai + bi))) / 2&lt;/code&gt;. The base of logarithm is 2. The ranges are assumed to contain elements in &lt;code&gt;[0, 1]&lt;/code&gt;. Usually the ranges are normalized probability distributions, but this is not required or checked by &lt;code&gt;jensenShannonDivergence&lt;/code&gt;. If the inputs are normalized, the result is bounded within &lt;code&gt;[0, 1]&lt;/code&gt;. The three-parameter version stops evaluations as soon as the intermediate result is greater than or equal to &lt;code&gt;limit&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bccc93152f84cfb32d87abe05334a1cc08f473ea" translate="yes" xml:space="preserve">
          <source>Computes the &lt;a href=&quot;https://en.wikipedia.org/wiki/Kullback%E2%80%93Leibler_divergence&quot;&gt;Kullback-Leibler divergence&lt;/a&gt; between input ranges &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;, which is the sum &lt;code&gt;ai * log(ai / bi)&lt;/code&gt;. The base of logarithm is 2. The ranges are assumed to contain elements in &lt;code&gt;[0, 1]&lt;/code&gt;. Usually the ranges are normalized probability distributions, but this is not required or checked by &lt;code&gt;kullbackLeiblerDivergence&lt;/code&gt;. If any element &lt;code&gt;bi&lt;/code&gt; is zero and the corresponding element &lt;code&gt;ai&lt;/code&gt; nonzero, returns infinity. (Otherwise, if &lt;code&gt;ai == 0 &amp;amp;&amp;amp; bi == 0&lt;/code&gt;, the term &lt;code&gt;ai * log(ai / bi)&lt;/code&gt; is considered zero.) If the inputs are normalized, the result is positive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82f8a61e8d0a5e2c407cc15d0dc98d8a7c77f454" translate="yes" xml:space="preserve">
          <source>Computes the greatest common divisor of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; by using an efficient algorithm such as &lt;a href=&quot;https://en.wikipedia.org/wiki/Euclidean_algorithm&quot;&gt;Euclid's&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/Binary_GCD_algorithm&quot;&gt;Stein's&lt;/a&gt; algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62daeb05222388ac697dc74b9f37d3d0822c2a6e" translate="yes" xml:space="preserve">
          <source>Computes the hash of the held value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="265e1e72bdf2f361616fec34db23103d27bf2241" translate="yes" xml:space="preserve">
          <source>Computes the index of the first occurrence of &lt;code&gt;range&lt;/code&gt;'s maximum element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="355f343fa9f1a69e378af49768a7655e8cf9c6b9" translate="yes" xml:space="preserve">
          <source>Computes the index of the first occurrence of &lt;code&gt;range&lt;/code&gt;'s minimum element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23157290f28401c16bb054d1176e6a8721bc9834" translate="yes" xml:space="preserve">
          <source>Computes the inverse Fourier transform of a range. The range must be a random access range with slicing, have a length equal to the size provided at construction of this object, and contain elements that are either of type std.complex.Complex or have essentially the same compile-time interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4770977a60d3756b3fc642893a20b59f0fe70f5" translate="yes" xml:space="preserve">
          <source>Computes the length of any range in O(n) time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a53d2cd20ccb22bc201e56bc6c6a7059b3ec842d" translate="yes" xml:space="preserve">
          <source>Computes the length of grapheme cluster starting at &lt;code&gt;index&lt;/code&gt;. Both the resulting length and the &lt;code&gt;index&lt;/code&gt; are measured in &lt;a href=&quot;#Code%20unit&quot;&gt;code units&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a5a9de63581b03924af8f2c2bbd32e205910376" translate="yes" xml:space="preserve">
          <source>Computes the match of the popFront length. Completes in &amp;Omicron;(&lt;code&gt;s.length * t.length&lt;/code&gt;) time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d970629c10f34f68e73440748e21b623f859402" translate="yes" xml:space="preserve">
          <source>Computes the minimum (respectively maximum) of &lt;code&gt;range&lt;/code&gt; along with its number of occurrences. Formally, the minimum is a value &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;range&lt;/code&gt; such that &lt;code&gt;pred(a, x)&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; for all values &lt;code&gt;a&lt;/code&gt; in &lt;code&gt;range&lt;/code&gt;. Conversely, the maximum is a value &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;range&lt;/code&gt; such that &lt;code&gt;pred(x, a)&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; for all values &lt;code&gt;a&lt;/code&gt; in &lt;code&gt;range&lt;/code&gt; (note the swapped arguments to &lt;code&gt;pred&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef86bb558e70e54418dec649b83e309302fe4774" translate="yes" xml:space="preserve">
          <source>Computes the next lexicographically greater even permutation of a range in-place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c939037e683052e11796212630e886a0f710fc91" translate="yes" xml:space="preserve">
          <source>Computes the next lexicographically greater permutation of a range in-place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ac0eb054effc8e964f179add51ac8ce5cde0817" translate="yes" xml:space="preserve">
          <source>Computes the nth permutation of a range in-place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7776b0304fc7917421d0069aa2e2faee1db476d1" translate="yes" xml:space="preserve">
          <source>Computes the union of a range of sorted ranges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb77e0d53b3af1bb492d078444229137406cc49e" translate="yes" xml:space="preserve">
          <source>Computes the union of multiple ranges. The &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input ranges&lt;/a&gt; are passed as a range of ranges and each is assumed to be sorted by &lt;code&gt;less&lt;/code&gt;. Computation is done lazily, one union element at a time. &lt;code&gt;multiwayUnion(ror)&lt;/code&gt; is functionally equivalent to &lt;code&gt;multiwayMerge(ror).uniq&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a126dbb5dda187ebb7d5104cb58f176f39bc7db" translate="yes" xml:space="preserve">
          <source>Computes the value of a positive integer &lt;code&gt;x&lt;/code&gt;, raised to the power &lt;code&gt;n&lt;/code&gt;, modulo &lt;code&gt;m&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04fa1754d0f3ba8b19daaf72ab1060db4c420591" translate="yes" xml:space="preserve">
          <source>Computes whether two values are approximately equal, admitting a maximum relative difference, and a maximum absolute difference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90f1bfbd09f8811922bf824de5a2cde80eff4934" translate="yes" xml:space="preserve">
          <source>Computing array lengths during compilation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed0c24b1a7f07e9baa4b3d7d42eace24ae7358ef" translate="yes" xml:space="preserve">
          <source>Concatenate Tuples. Tuple concatenation is only allowed if all named fields are distinct (no named field of this tuple occurs in &lt;code&gt;t&lt;/code&gt; and no named field of &lt;code&gt;t&lt;/code&gt; occurs in this tuple).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1cbdd888810a65f9ce252092149adeb11bad0f8" translate="yes" xml:space="preserve">
          <source>Concatenate multiple &lt;code&gt;escapeShellCommand&lt;/code&gt; and &lt;a href=&quot;#escapeShellFileName&quot;&gt;&lt;code&gt;escapeShellFileName&lt;/code&gt;&lt;/a&gt; results to use shell redirection or piping operators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef92b5ecddb9c03ee25b9741d86e91adf28ae5ee" translate="yes" xml:space="preserve">
          <source>Concatenate path segments together to form one path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbbbf15264cd015326c8650e5c9bcfe45679594d" translate="yes" xml:space="preserve">
          <source>Concatenate tuples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d334da4f36d3ac970a49b9c6ff3d38de0a94daec" translate="yes" xml:space="preserve">
          <source>Concatenate two lists (l2 appended to l1).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54605f22a1f1252b76de960747267c3c0603476d" translate="yes" xml:space="preserve">
          <source>Concatenates a range of ranges into one array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09f32ec319e44bc6f468a74c63ca6c7d780d7a7f" translate="yes" xml:space="preserve">
          <source>Concatenates several ranges into a single range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aba48fb5ee4afc0282b513e1b8419e115676e665" translate="yes" xml:space="preserve">
          <source>Concatenating the arrays inside of &lt;code&gt;arrs&lt;/code&gt;. &lt;code&gt;_d_arraycatnTX([a, b, c])&lt;/code&gt; means &lt;code&gt;a ~ b ~ c&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fd32d36258eae30e3a703b388fd2d676ac083d9" translate="yes" xml:space="preserve">
          <source>Concatenation always creates a copy of its operands, even if one of the operands is a 0 length array, so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bfdaed1fe3ba5044986f54f678261c455c4286e" translate="yes" xml:space="preserve">
          <source>Concatenation and appending</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f307354edc327002aff0696b23e699bed6b0337f" translate="yes" xml:space="preserve">
          <source>Conceptual type that outlines the common properties of all UTF Matchers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f4979324e03e4571b1d7eba701226670c2ee2da" translate="yes" xml:space="preserve">
          <source>Condition</source>
          <target state="translated">Condition</target>
        </trans-unit>
        <trans-unit id="368834630d459ecc51471d8ef1eb3550a7af82cb" translate="yes" xml:space="preserve">
          <source>Conditional Compilation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a0d63179619b501ad5800876cf0df368b27a390" translate="yes" xml:space="preserve">
          <source>Conditional Expressions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02b96d4c9fbd3a91b071d3d53be1d37274828f1c" translate="yes" xml:space="preserve">
          <source>Conditional Logging</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61fb1fb5259174d8968cdd64b4b930f65a905d82" translate="yes" xml:space="preserve">
          <source>Conditional compilation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41d7d233afb0dd68d28fc8f570d341d5c22d2172" translate="yes" xml:space="preserve">
          <source>Conditional logging can be achieved be passing a &lt;code&gt;bool&lt;/code&gt; as first argument to a log function. If conditional logging is used the condition must be &lt;code&gt;true&lt;/code&gt; in order to have the log message logged.  In order to combine an explicit &lt;code&gt;LogLevel&lt;/code&gt; passing with conditional logging, the &lt;code&gt;LogLevel&lt;/code&gt; has to be passed as first argument followed by the &lt;code&gt;bool&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e9b71968760fc03c2bd272ee9bbb297247e44ef" translate="yes" xml:space="preserve">
          <source>ConditionalDeclaration</source>
          <target state="translated">ConditionalDeclaration</target>
        </trans-unit>
        <trans-unit id="c5b4a55bf44bb04ff293c5deb38688769ac299cf" translate="yes" xml:space="preserve">
          <source>ConditionalStatement</source>
          <target state="translated">ConditionalStatement</target>
        </trans-unit>
        <trans-unit id="2cda11f185fbbbe7d23cfc89fd493405e9cae9a1" translate="yes" xml:space="preserve">
          <source>Config &lt;code&gt;config&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="754164850f38c1ecdaf6b8ed894cb192bc36c5f4" translate="yes" xml:space="preserve">
          <source>Configuration</source>
          <target state="translated">Configuration</target>
        </trans-unit>
        <trans-unit id="06610b8b075f898940036a6adb700398270f1776" translate="yes" xml:space="preserve">
          <source>Configuration options for &lt;code&gt;getopt&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6431b321225e094a850e4edc49d8a1243e81cc7" translate="yes" xml:space="preserve">
          <source>Configuration options for druntime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b3ac33acfeded0c91e96d651db32f59b33bf43d" translate="yes" xml:space="preserve">
          <source>Configuration via the command line can be disabled by declaring a variable for the linker to pick up before using it's default from the runtime:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c549a207a37db7214dfa5f6be06a12b29fcccee0" translate="yes" xml:space="preserve">
          <source>Configuration via the command line can be disabled by declaring a variable for the linker to pick up before using its default from the runtime:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cfd39d93ce243f8209e2cb0fd6a72bd5199a441" translate="yes" xml:space="preserve">
          <source>Configure an auto-checkpoint</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cda84f2fffb92ec6200fae3e17f21d369027339" translate="yes" xml:space="preserve">
          <source>Configure database connections</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d3bc7d832ae044f63c47a2f9e7fae292f78d77f" translate="yes" xml:space="preserve">
          <source>Configuring The SQLite Library</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c9652511df81d8bc126592a1f7ea6652bb3ab73" translate="yes" xml:space="preserve">
          <source>Configuring the Garbage Collector</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76ad8dda0a203dcd9a14445916230e10df73a7f3" translate="yes" xml:space="preserve">
          <source>Confirm s is a valid template, then store it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db012c464d251d67ffbcac09777d640d209be8dd" translate="yes" xml:space="preserve">
          <source>Confirm whether this stopwatch is measuring time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="841a7cce211d41301505ff131d9f016fac1e6279" translate="yes" xml:space="preserve">
          <source>Conforms to IEEE 754-2008</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d2931da0a4a255003ce81824b3d90572948d6f8" translate="yes" xml:space="preserve">
          <source>Conforms to the Microsoft Windows Structured Exception Handling conventions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bad8df68294c8ab2277b9345f70f577dbf3c8959" translate="yes" xml:space="preserve">
          <source>Conforms to the target's C ABI struct layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49578a731259515bbadf31f422528ce8c4631b50" translate="yes" xml:space="preserve">
          <source>Conn &lt;code&gt;conn&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0474ba2f1ee3e396c97ac1ac34d1d19ad3689dae" translate="yes" xml:space="preserve">
          <source>Connection encoding. Defaults to ISO-8859-1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="519ecd274822b5f9ddc30ae246a94167b56bf039" translate="yes" xml:space="preserve">
          <source>Connection type used when the URL should be used to auto detect the protocol. This struct is used as placeholder for the connection parameter when calling the high level API and the connection type (HTTP/FTP) should be guessed by inspecting the URL parameter. The rules for guessing the protocol are: 1, if URL starts with ftp://, ftps:// or ftp. then FTP connection is assumed. 2, HTTP connection otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="078912762bea745ba2c41bae707b195db48327c8" translate="yes" xml:space="preserve">
          <source>Connectionless, unreliable datagrams with a fixed maximum length; data may be lost or arrive out of order</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d929792a86b18c9fb89df6aef5598294f6328000" translate="yes" xml:space="preserve">
          <source>Connector_Punctuation</source>
          <target state="translated">Connector_Punctuation</target>
        </trans-unit>
        <trans-unit id="a30b51b4925a7ede0792face17a4f0e9710a0252" translate="yes" xml:space="preserve">
          <source>Consider using &lt;code&gt;getAddress&lt;/code&gt;, &lt;code&gt;parseAddress&lt;/code&gt; and &lt;code&gt;Address&lt;/code&gt; methods instead of using this class directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9810660bbdff1aae34eac15a7facdded0db22668" translate="yes" xml:space="preserve">
          <source>Const Member Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83dcf3de7eb019ec6629bbd79f8b667634364e18" translate="yes" xml:space="preserve">
          <source>Const Storage Class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d742d8dde06f988077f8f82f51f498a3531d234" translate="yes" xml:space="preserve">
          <source>Const Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="784fed24b477710eef1f5226f481179174928151" translate="yes" xml:space="preserve">
          <source>Const and Immutable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="896cf932e98b76529cba660f6f6a0543fea0acaa" translate="yes" xml:space="preserve">
          <source>Const and Immutable Interfaces</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9069f2cf93e274994d11feade6815e9fb488f82d" translate="yes" xml:space="preserve">
          <source>Const array is converted to input range by removing its qualifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f40015b781b2d4acdb42042e30dd8e0561ab4289" translate="yes" xml:space="preserve">
          <source>Const member functions are functions that are not allowed to change any part of the object through the member function's this reference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2250093f69faa6a58322166f59cb9d509a15db57" translate="yes" xml:space="preserve">
          <source>Const types are like immutable types, except that const forms a read-only</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc17a30efd81f4b6809eff7a896b92f5876f25e3" translate="yes" xml:space="preserve">
          <source>Const, Immutable Comparison</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b27c2428c75022095914c42cb3f655e37a5625b8" translate="yes" xml:space="preserve">
          <source>Const, Immutable and Shared Classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8681eda928fe17b6615fbb79a2dc733c8ebaba94" translate="yes" xml:space="preserve">
          <source>Const, Immutable and Shared Structs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c73b65a7e00144e4a4cd7b116f22177ab58213a" translate="yes" xml:space="preserve">
          <source>Constant &lt;a href=&quot;#Code%20point&quot;&gt;code point&lt;/a&gt; (0x0085) - next line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee9a92399d6335bc2aeede4d454001baa024aaf3" translate="yes" xml:space="preserve">
          <source>Constant &lt;a href=&quot;#Code%20point&quot;&gt;code point&lt;/a&gt; (0x2028) - line separator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9cdea9445ed1d8ad134d40b5e8dd40f3350c441" translate="yes" xml:space="preserve">
          <source>Constant &lt;a href=&quot;#Code%20point&quot;&gt;code point&lt;/a&gt; (0x2029) - paragraph separator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae1de1f3ec7fd1e298252331c9256b1f73d60516" translate="yes" xml:space="preserve">
          <source>Constant defining a fully decoded BOM</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="513fd3be0bfd521c00e6fe601132e59539268d57" translate="yes" xml:space="preserve">
          <source>Constant fold an Expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3db4fce387c01b326d3e15a975e8b04f8af06c7c" translate="yes" xml:space="preserve">
          <source>Constant folded version of &lt;code&gt;e&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c1d160235265d86d921f707d3ce59f58aed4954" translate="yes" xml:space="preserve">
          <source>Constant folding, with support for CTFE Return true if non-pointer expression e can be compared with &amp;gt;,is, ==, etc, using ctfeCmp, ctfeEqual, ctfeIdentity</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f386d7e7881b32fa39cb7b62bdb15c0f3a4c0e1" translate="yes" xml:space="preserve">
          <source>Constants</source>
          <target state="translated">Constants</target>
        </trans-unit>
        <trans-unit id="f7d639ba9c48f5467c4d1a8f0152a2dc90222051" translate="yes" xml:space="preserve">
          <source>Constants Defining Special Destructor Behavior</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdd87b7907fb17673e884c148848c9c5e93b59ca" translate="yes" xml:space="preserve">
          <source>Constraint</source>
          <target state="translated">Constraint</target>
        </trans-unit>
        <trans-unit id="52e68a873a2be3470675b9ee933b98d781ae7fef" translate="yes" xml:space="preserve">
          <source>Constraints</source>
          <target state="translated">Constraints</target>
        </trans-unit>
        <trans-unit id="cd7dc62d6119143cd2fd7c7185b12b70cf0749f3" translate="yes" xml:space="preserve">
          <source>Construct 256 character translation table, where characters in from[] are replaced by corresponding characters in to[].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5de02eef75a505103dd6a73f454b30bd0638b7c9" translate="yes" xml:space="preserve">
          <source>Construct a &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; from a ISO time string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cef526ef10de16815aa0c9df0e5fee07dd4e2470" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;BigInt&lt;/code&gt; from a built-in integral type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5b5175be9d000ff28745ca7b47dfab50bb5237b" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;BigInt&lt;/code&gt; from a decimal or hexadecimal string. The number must be in the form of a decimal or hex literal. It may have a leading &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt; sign, followed by &lt;code&gt;0x&lt;/code&gt; or &lt;code&gt;0X&lt;/code&gt; if hexadecimal. Underscores are permitted in any location after the &lt;code&gt;0x&lt;/code&gt; and/or the sign of the number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d7c3b4548cf75fac0de21ecc52fb10d3606eec5" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;BigInt&lt;/code&gt; from another &lt;code&gt;BigInt&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7efa1a6ab14f5ccd00f6c0c9a24eba2121df8bda" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;CompoundStatement&lt;/code&gt; from an array of &lt;code&gt;Statement&lt;/code&gt;s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29b364a0138bce0f5c44e30e508e17d93f7c05ed" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;CompoundStatement&lt;/code&gt; using an already existing array of &lt;code&gt;Statement&lt;/code&gt;s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4a6c4a823793d5f65499787e95138d6100b624f" translate="yes" xml:space="preserve">
          <source>Construct a &lt;code&gt;Decoder&lt;/code&gt; that iterates over the decoding of the given Base64 encoded data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edbcd15b10b6211f79e2728db1542060e841dc30" translate="yes" xml:space="preserve">
          <source>Construct a BitRange.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e5951f021a460e25ffeab1777192f63d5dcad38" translate="yes" xml:space="preserve">
          <source>Construct a Processing Instruction section</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f8c7657f3358e4444599716fc5a5104fadd594b" translate="yes" xml:space="preserve">
          <source>Construct a UUID struct from the 16 byte representation of a UUID.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16a3dc0d5228e43b22556eb8ffea43940ae8f1b3" translate="yes" xml:space="preserve">
          <source>Construct a UUID struct from the 16 byte representation of a UUID. Variadic constructor to allow a simpler syntax, see examples. You need to pass exactly 16 ubytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23141c0f7e0d7ab9526562ff979c5df531f9e26b" translate="yes" xml:space="preserve">
          <source>Construct a character data section</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7a49314abea8219c1157b1b3da7ac10cc878066" translate="yes" xml:space="preserve">
          <source>Construct a comment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2c71e5e027279ee45a7931fee354af43aa8085a" translate="yes" xml:space="preserve">
          <source>Construct a complex number with the specified real and imaginary parts. In the case where a single argument is passed that is not complex, the imaginary part of the result will be zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f1465ea8ff9842efb9f4fb5533375eb53710f4b" translate="yes" xml:space="preserve">
          <source>Construct a new &lt;code&gt;FormatSpec&lt;/code&gt; using the format string &lt;code&gt;fmt&lt;/code&gt;, no processing is done until needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b338b11da2dffa6fdc8f6e1cebf5a1fc9737f7a" translate="yes" xml:space="preserve">
          <source>Construct a new &lt;code&gt;Internet6Address&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d79b3621c7911196f6ede8afe742e5c8ec1d706" translate="yes" xml:space="preserve">
          <source>Construct a new &lt;code&gt;InternetAddress&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7538127e5f1404acba2c44fa3de190633fd2308" translate="yes" xml:space="preserve">
          <source>Construct a new &lt;code&gt;UnixAddress&lt;/code&gt; from the specified path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd446bfae9180e30b1daa43c407ceb3fdf970415" translate="yes" xml:space="preserve">
          <source>Construct a new &lt;code&gt;UnixAddress&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bdec3f526944ac27208976a2f90415d2bb71451" translate="yes" xml:space="preserve">
          <source>Construct a new string from &lt;code&gt;input&lt;/code&gt; by replacing all of the fragments that match a pattern &lt;code&gt;re&lt;/code&gt; with a string generated from the match according to the &lt;code&gt;format&lt;/code&gt; specifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70db60e9276b0769769d7bc219186f785f9656d7" translate="yes" xml:space="preserve">
          <source>Construct a new string from &lt;code&gt;input&lt;/code&gt; by replacing the first match with a string generated from it according to the &lt;code&gt;format&lt;/code&gt; specifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cf2215c38ab2484cd95c1a3f8d7e5ea5d6e5d89" translate="yes" xml:space="preserve">
          <source>Construct a range iterating over an associative array by key/value tuples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e49b6c0e84de21ca12a39e319d7d0f1c33c4e83a" translate="yes" xml:space="preserve">
          <source>Construct a set from a forward range of code point intervals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ce8cada6e1ecb8296e6778664e7e54197cd4560" translate="yes" xml:space="preserve">
          <source>Construct a set from plain values of code point intervals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f66ee7eaa1f920dff7ccd0302783f06c78ac43a1" translate="yes" xml:space="preserve">
          <source>Construct a specific point in time in the UTC timezone and add two days.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5725c80a7627176eef25dd37fe82818e437ca5c" translate="yes" xml:space="preserve">
          <source>Construct a specific point in time without timezone information and get its ISO string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="394f0b49b16c495da3d93936f500ab9712ce9376" translate="yes" xml:space="preserve">
          <source>Construct a ternary value from another ternary value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e61b23e18fedae64c5d35d65cf20fb2f2d67df8" translate="yes" xml:space="preserve">
          <source>Construct a text (aka PCData) section</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84da9edb06d68da916babe0161ac2b1d6a5d7665" translate="yes" xml:space="preserve">
          <source>Construct a variable from &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; and put it in the environment while saving the previous value of the environment variable into a global list so it can be restored later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49fa16f74b39989050bae31ab6353db2926f9d36" translate="yes" xml:space="preserve">
          <source>Construct an &lt;code&gt;Encoder&lt;/code&gt; that iterates over the Base64 encoding of the given &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa8c85542dd824e935b81b57a1863e6723f75cb5" translate="yes" xml:space="preserve">
          <source>Construct an XML Instruction section</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a194031f6ae934ce18b0c67914deaf21cac16ec1" translate="yes" xml:space="preserve">
          <source>Construct an archive out of the current members of the archive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5c166b2ff50eb5ec5eec43caf2eb44127f34619" translate="yes" xml:space="preserve">
          <source>Construct an associative array consisting of all abbreviations that uniquely map to the strings in values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cf702deece5ed2b82278e20dc28296a3a195348" translate="yes" xml:space="preserve">
          <source>Construct an associative array of type ti from keys and value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e75af0c6e150db4d6b4dec02927806bba690aec9" translate="yes" xml:space="preserve">
          <source>Construct an identifier from a D slice</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80d4446ef4560aaedf6b918f5799b1c445900184" translate="yes" xml:space="preserve">
          <source>Construct and assign from a &lt;code&gt;bool&lt;/code&gt;, receiving &lt;code&gt;no&lt;/code&gt; for &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;yes&lt;/code&gt; for &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="647783f6e0c996a537f44ec3b423196a31d77d95" translate="yes" xml:space="preserve">
          <source>Construct and manipulate template argument lists (aka type lists).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7a26e15daa59c5841cd23ead59280c64ffa4247" translate="yes" xml:space="preserve">
          <source>Construct elem to run when an array bounds check fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6de53d9bc658052402833a77bcc70a7c52e05729" translate="yes" xml:space="preserve">
          <source>Construct from another code point set of any type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="195707e72a012ddb97f51ce7407e70d2a55623c4" translate="yes" xml:space="preserve">
          <source>Construct new, useful general purpose types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82ce738c4d85678079ef40a05612ba2651226474" translate="yes" xml:space="preserve">
          <source>Construct the array operation expression, call object.arrayOp!(tiargs)(args). Encode operand types and operations into tiargs using reverse polish notation (RPN) to preserve precedence. Unary operations are prefixed with &quot;u&quot; (e.g. &quot;u~&quot;). Pass operand values (slices or scalars) as args.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f3ec07075420c87a074dd94b630d897ff817037" translate="yes" xml:space="preserve">
          <source>Construct. destbufsize is the same as for D.zlib.uncompress().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cba1d6a444e0426f16ee3f9f52dcc2b14b8af47" translate="yes" xml:space="preserve">
          <source>Constructed ArrayLiteralExp</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da33e1b7e0c4eae1911ee4a15280f0990e1a6115" translate="yes" xml:space="preserve">
          <source>Construction</source>
          <target state="translated">Construction</target>
        </trans-unit>
        <trans-unit id="a3fe9a9b809ec5725205d76e7f854c1241a03e33" translate="yes" xml:space="preserve">
          <source>Construction and Reference Semantics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="976162fa882990e03c8dd184b0b58a781b3a0c3b" translate="yes" xml:space="preserve">
          <source>Construction from an input and an index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2186eebe242de29328a263df29ae1111232f2644" translate="yes" xml:space="preserve">
          <source>Construction from an input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b811fc2a657ea4e942e1143cd08736916b4217a0" translate="yes" xml:space="preserve">
          <source>Construction of lookup tables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dd3a5d9a969f9c6c6072358abb68461c1de1b22" translate="yes" xml:space="preserve">
          <source>Construction or Assignment on Setting AA Entries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a494a02b46c9d078348d4b43daaa23777792b7f5" translate="yes" xml:space="preserve">
          <source>Constructor argument for default construction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="054ab73cf0d9f14ed49f82c4cff717124d2a513c" translate="yes" xml:space="preserve">
          <source>Constructor binding &lt;code&gt;this&lt;/code&gt; to &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7aca37d11a5dad62fa7753ebd2d62be1dbbcf19" translate="yes" xml:space="preserve">
          <source>Constructor for &lt;code&gt;JSONValue&lt;/code&gt;. If &lt;code&gt;arg&lt;/code&gt; is a &lt;code&gt;JSONValue&lt;/code&gt; its value and type will be copied to the new &lt;code&gt;JSONValue&lt;/code&gt;. Note that this is a shallow copy: if type is &lt;code&gt;JSONType.object&lt;/code&gt; or &lt;code&gt;JSONType.array&lt;/code&gt; then only the reference to the data will be copied. Otherwise, &lt;code&gt;arg&lt;/code&gt; must be implicitly convertible to one of the following types: &lt;code&gt;typeof(null)&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;ulong&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, an associative array &lt;code&gt;V[K]&lt;/code&gt; for any &lt;code&gt;V&lt;/code&gt; and &lt;code&gt;K&lt;/code&gt; i.e. a JSON object, any array or &lt;code&gt;bool&lt;/code&gt;. The type will be set accordingly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="958db728358d20353a09b0ce14e29f648fa7b9b6" translate="yes" xml:space="preserve">
          <source>Constructor initializing &lt;code&gt;this&lt;/code&gt; with &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0367f2949e838dbf344d79ca0be183c08f50ddea" translate="yes" xml:space="preserve">
          <source>Constructor taking a compatible &lt;code&gt;Tuple&lt;/code&gt;. Two &lt;code&gt;Tuple&lt;/code&gt;s are compatible &lt;b&gt;iff&lt;/b&gt; they are both of the same length, and, for each type &lt;code&gt;T&lt;/code&gt; on the left-hand side, the corresponding type &lt;code&gt;U&lt;/code&gt; on the right-hand side can implicitly convert to &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82fb824d4d5cc73ecbddf2d369c8b6d494d4005e" translate="yes" xml:space="preserve">
          <source>Constructor taking a compatible array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="337303cb1c4142f79bb21427c7834170cf217748" translate="yes" xml:space="preserve">
          <source>Constructor taking a number of items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="312dcee2fedfca8db731097219798f4fda057356" translate="yes" xml:space="preserve">
          <source>Constructor taking a number of nodes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39aa104961235c81ea7ce5789ee56792a20446f0" translate="yes" xml:space="preserve">
          <source>Constructor taking a value properly convertible to the underlying type. &lt;code&gt;U&lt;/code&gt; may be either an integral that can be converted to &lt;code&gt;T&lt;/code&gt; without a loss, or another &lt;code&gt;Checked&lt;/code&gt; instance whose representation may be in turn converted to &lt;code&gt;T&lt;/code&gt; without a loss.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7462d0e28326868b6e970d116a087457bc47647" translate="yes" xml:space="preserve">
          <source>Constructor taking an &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="028ef1ffceb1a8e2f931182078782ecd73909dff" translate="yes" xml:space="preserve">
          <source>Constructor taking one value for each field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec87cd71d0c30421b4e1bbb4504a346899fd1803" translate="yes" xml:space="preserve">
          <source>Constructor taking the name of the file to open and the open mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b736db750e5b8588933a2cab677f5fbd588db97" translate="yes" xml:space="preserve">
          <source>Constructor taking the url as parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f815f9d325af38009f8487671b992fc3b8edee2" translate="yes" xml:space="preserve">
          <source>Constructor that initializes the payload.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="016997051201ccc98c813dcc7c39a587d61ab8c6" translate="yes" xml:space="preserve">
          <source>Constructor that takes a &lt;code&gt;Unique&lt;/code&gt; of a type that is convertible to our type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b1f1dc0db9cef3da3b4be09aee734bc80e7d08c" translate="yes" xml:space="preserve">
          <source>Constructor that takes an lvalue. It nulls its source. The nulling will ensure uniqueness as long as there are no previous aliases to the source.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d0b20d8fc18f15a14377620be1f3f6c18b63a08" translate="yes" xml:space="preserve">
          <source>Constructor that takes an rvalue. It will ensure uniqueness, as long as the rvalue isn't just a view on an lvalue (e.g., a cast). Typical usage:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05f636b7912d58ac3b449cb36c994c98a7238361" translate="yes" xml:space="preserve">
          <source>Constructor to use when creating a new archive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c1ac12e45facf352f3efe44eb326d743f2088a0" translate="yes" xml:space="preserve">
          <source>Constructor to use when reading an existing archive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48b7f1869a1fb50e06c68f08a76aa0238231d852" translate="yes" xml:space="preserve">
          <source>Constructor which takes an error message and error code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28237bb656117133502ebdcbb4cc87ee22fad07c" translate="yes" xml:space="preserve">
          <source>Constructor which takes an error message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c0e6f93d76eef0a5ad9b6d7bb2bad4c3b17cd12" translate="yes" xml:space="preserve">
          <source>Constructor which takes an error message. The current global &lt;a href=&quot;core_stdc_errno#errno&quot;&gt;&lt;code&gt;core.stdc.errno.errno&lt;/code&gt;&lt;/a&gt; value is used as error code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d4ae6f60e2d60a48fe329503bd32951d4cbc36d" translate="yes" xml:space="preserve">
          <source>Constructor which takes the error number (&lt;a href=&quot;https://google.com/search?btnI=I%27m+Feeling+Lucky&amp;amp;ie=UTF-8&amp;amp;oe=UTF-8&amp;amp;q=GetLastError&quot;&gt;GetLastError&lt;/a&gt; in Windows, errno in Posix).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba2200976ccedc895aa8714dc1e6fb4e9038e5f4" translate="yes" xml:space="preserve">
          <source>Constructor.</source>
          <target state="translated">Constructor.</target>
        </trans-unit>
        <trans-unit id="fb6b24775698549efb7aa5531d3b2988935f90f6" translate="yes" xml:space="preserve">
          <source>Constructor. Pass in a range of elements to initialize the tree with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a178df59f99c60619523cc28c3159353aae12d6" translate="yes" xml:space="preserve">
          <source>Constructor. Pass in an array of elements, or individual elements to initialize the tree with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60a5c966a71a24034f9238685790a526710ef75d" translate="yes" xml:space="preserve">
          <source>Constructors</source>
          <target state="translated">Constructors</target>
        </trans-unit>
        <trans-unit id="807d66814f4ba4f921c1396af90944a155259be3" translate="yes" xml:space="preserve">
          <source>Constructors accepting desired capacity or a preallocated buffer, similar in semantics to those of &lt;code&gt;BitmappedBlock&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16754c38fa1206780e385874d1438ae4c6a8b8c6" translate="yes" xml:space="preserve">
          <source>Constructors are defined with a function name of &lt;code&gt;this&lt;/code&gt; and having no return value. The grammar is the same as for the class &lt;a href=&quot;class#Constructor&quot;&gt;&lt;i&gt;Constructor&lt;/i&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2e6c63b9009979683923270fe7969b7aa741e91" translate="yes" xml:space="preserve">
          <source>Constructors are defined with a function name of &lt;code&gt;this&lt;/code&gt; and having no return value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc2ab456b803f2a781f337931bdcedefaed757d1" translate="yes" xml:space="preserve">
          <source>Constructors can be overloaded with different attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aa2beb6e3d0ab0cb39859e1839af45b65f842fd" translate="yes" xml:space="preserve">
          <source>Constructors can call other constructors for the same class in order to share common initializations (this is called a delegating constructor):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f4fc5393e597a57538cf4de6d5462b225d2d51e" translate="yes" xml:space="preserve">
          <source>Constructors can call other constructors for the same struct in order to share common initializations (this is called a &lt;a href=&quot;class#delegating-constructors&quot;&gt;delegating constructor&lt;/a&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5417b6074f85a905aed32a156a099f6cc6ef82a9" translate="yes" xml:space="preserve">
          <source>Constructors can have one of these member function attributes: &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;immutable&lt;/code&gt;, and &lt;code&gt;shared&lt;/code&gt;. Construction of qualified objects will then be restricted to the implemented qualified constructors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6224547e06b5379ad7844e2e3e6bdd01e198c7c9" translate="yes" xml:space="preserve">
          <source>Constructors return the this pointer in EAX.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e983ecc3235a082ac5ab3438cb35588e5913d548" translate="yes" xml:space="preserve">
          <source>Constructors setting up the memory structured as a free list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="917fbdc8fb87d3240ea5d269d2fec24c7e203ffc" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;a href=&quot;#Tuple&quot;&gt;&lt;code&gt;Tuple&lt;/code&gt;&lt;/a&gt; object instantiated and initialized according to the given arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dad768a1d3c806574ce4ef1d6f17739935f5ef4b" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;DirEntry&lt;/code&gt; for the given file (or directory).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1f2cf92b74dfa870775ce13ac3caf1d9e122173" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;RefAppender&lt;/code&gt; with a given array reference. This does not copy the data. If the array has a larger capacity as determined by &lt;code&gt;arr.capacity&lt;/code&gt;, it will be used by the appender.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a99c29487dadc182d8a3bda120934df206639c9" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;VariantN&lt;/code&gt; value given an argument of a generic type. Statically rejects disallowed types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bc5b4b671ae60c2f6de52fe65f7ef1b9d577caf" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;XorshiftEngine&lt;/code&gt; generator seeded with x0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecf8fa50fa09e85a50a7ee1d6d9cb5689198b305" translate="yes" xml:space="preserve">
          <source>Constructs a Document by parsing XML text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="142fbb3a4f3a407f93e0c16daba0bb5064ea4c6d" translate="yes" xml:space="preserve">
          <source>Constructs a Document from a Tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b95fdaa893c80a5c04bf4437cd4b6fdd348c04af" translate="yes" xml:space="preserve">
          <source>Constructs a DocumentParser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f20472cfd83dc45168ff0eb4d99a68f4a6aafcdf" translate="yes" xml:space="preserve">
          <source>Constructs a LinearCongruentialEngine generator seeded with &lt;code&gt;x0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="233b957299550b15a28e3548a091cca8b823bc0f" translate="yes" xml:space="preserve">
          <source>Constructs a MersenneTwisterEngine object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f9db8efce8dd429db5938c30a8f172827296779" translate="yes" xml:space="preserve">
          <source>Constructs a StopWatch. Whether it starts immediately depends on the &lt;a href=&quot;#AutoStart&quot;&gt;&lt;code&gt;AutoStart&lt;/code&gt;&lt;/a&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00d1a29960b8444e123571c0597b354c35facc3d" translate="yes" xml:space="preserve">
          <source>Constructs a block allocator given a hunk of memory, or a desired capacity in bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="146e982316dbe394422d91958193b29e48ddcb91" translate="yes" xml:space="preserve">
          <source>Constructs a blocking IPv4 TCP Socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53247329cc6a51d22ab4698276b1f754d0339aaa" translate="yes" xml:space="preserve">
          <source>Constructs a blocking IPv4 UDP Socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f485ed96de3ac13b7303b9b65eca592e0443e023" translate="yes" xml:space="preserve">
          <source>Constructs a blocking TCP Socket and connects to an &lt;code&gt;Address&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="431478cfa4f05184c54f87ab32bb9c9692007e39" translate="yes" xml:space="preserve">
          <source>Constructs a blocking TCP Socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d350c91652d7b9b0cd2159ce6cde3003102137a6" translate="yes" xml:space="preserve">
          <source>Constructs a blocking UDP Socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17cdbaf765f763438b5c9e4f2e41158243f3b098" translate="yes" xml:space="preserve">
          <source>Constructs a complex number given its absolute value and argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6854fd227e337caa25e42f39155a6f82de1c1e18" translate="yes" xml:space="preserve">
          <source>Constructs a matcher object to classify &lt;a href=&quot;#Code%20point&quot;&gt;code points&lt;/a&gt; from the &lt;code&gt;set&lt;/code&gt; for encoding that has &lt;code&gt;Char&lt;/code&gt; as code unit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec9df545fbfee53dd90779724e7a812c8dc67a55" translate="yes" xml:space="preserve">
          <source>Constructs a message from the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea8599b64b5ab10e1403a39d677d9d23280a9390" translate="yes" xml:space="preserve">
          <source>Constructs a new function or delegate type with the same basic signature as the given one, but different attributes (including linkage).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a007be1fb9fb1e9a3bb438949e90dfe8105d9f56" translate="yes" xml:space="preserve">
          <source>Constructs a region backed by a user-provided store. Assumes the memory was allocated with &lt;code&gt;ParentAllocator&lt;/code&gt; (if different from &lt;a href=&quot;std_experimental_allocator_building_blocks_null_allocator#NullAllocator&quot;&gt;&lt;code&gt;NullAllocator&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b06ce7a9e6471d4b389eadc615ef60d562d5d9b2" translate="yes" xml:space="preserve">
          <source>Constructs a static array from &lt;code&gt;a&lt;/code&gt;. The type of elements can be specified implicitly so that &lt;code&gt;[1, 2].staticArray&lt;/code&gt; results in &lt;code&gt;int[2]&lt;/code&gt;, or explicitly, e.g. &lt;code&gt;[1, 2].staticArray!float&lt;/code&gt; returns &lt;code&gt;float[2]&lt;/code&gt;. When &lt;code&gt;a&lt;/code&gt; is a range whose length is not known at compile time, the number of elements must be given as template argument (e.g. &lt;code&gt;myrange.staticArray!2&lt;/code&gt;). Size and type can be combined, if the source range elements are implicitly convertible to the requested element type (eg: &lt;code&gt;2.iota.staticArray!(long[2])&lt;/code&gt;). When the range &lt;code&gt;a&lt;/code&gt; is known at compile time, it can also be specified as a template argument to avoid having to specify the number of elements (e.g.: &lt;code&gt;staticArray!(2.iota)&lt;/code&gt; or &lt;code&gt;staticArray!(double, 2.iota)&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7781933a4887fd803519fc54f562055cd812781c" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;code&gt;Address&lt;/code&gt; with a copy of the specified &lt;code&gt;sockaddr&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aec993528ca9dc016d572af7cf82ee72630798f" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;code&gt;Address&lt;/code&gt; with a reference to the specified &lt;code&gt;sockaddr&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9615b78e90ddc4141b1f50da180143f27c8af2f7" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;code&gt;AllocatorList&lt;/code&gt; given a factory object. This constructor is defined only if &lt;code&gt;Factory&lt;/code&gt; has state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bb58461416282d926d1b319755b4712d0bb7ef9" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;code&gt;Appender&lt;/code&gt; with a given array. Note that this does not copy the data. If the array has a larger capacity as determined by &lt;code&gt;arr.capacity&lt;/code&gt;, it will be used by the appender. After initializing an appender on an array, appending to the original array will reallocate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a3c9e846d5ff280c1c43c0fc859906e5949020f" translate="yes" xml:space="preserve">
          <source>Constructs an Element from a Tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b04b95cb59989b1f3e6f81986bdbf5684b4e8e11" translate="yes" xml:space="preserve">
          <source>Constructs an Element given a name and a string to be used as a Text interior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ef5c16305c0cacfff7b62667368f5395c44c8f0" translate="yes" xml:space="preserve">
          <source>Constructs an instance of Tag with a specified name and type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eb54bebdca75e4774fca8547e272f327c707365" translate="yes" xml:space="preserve">
          <source>Constructs an object given two ranges &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;t&lt;/code&gt; and a penalty &lt;code&gt;lambda&lt;/code&gt;. Constructor completes in &amp;Omicron;(&lt;code&gt;s.length * t.length&lt;/code&gt;) time and computes all matches of length 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c2e1b07aa0f19ca657a0f923e6620e04e17d896" translate="yes" xml:space="preserve">
          <source>Constructs the HMAC digest using the specified secret.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ac831e9f5e17e420e37b7e07bf6060ff89784d9" translate="yes" xml:space="preserve">
          <source>Container primitives</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdcf8089bd1bb28d912fe327273fec402f37b4f0" translate="yes" xml:space="preserve">
          <source>Containers do not form a class hierarchy, instead they implement a common set of primitives (see table below). These primitives each guarantee a specific worst case complexity and thus allow generic code to be written independently of the container implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fc21d6c189ee8cb63a6e6aac085f59dcacbe434" translate="yes" xml:space="preserve">
          <source>Contains a memset implementation used by compiler-generated code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a6f3a1f434d86f30876a874a0b93c581c1c8b1e" translate="yes" xml:space="preserve">
          <source>Contains a registry for GC factories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e083cdb203f74feb48a6a33669824a6e66cb3369" translate="yes" xml:space="preserve">
          <source>Contains aggregate information about a block of managed memory. The purpose of this struct is to support a more efficient query style in instances where detailed information is needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29492764613b66bb03de8ad7679e7a717630eb80" translate="yes" xml:space="preserve">
          <source>Contains aggregated diagnostics information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="273a7dc903587fcac7ec096b9861c3c1e1e83e38" translate="yes" xml:space="preserve">
          <source>Contains all available CLI &lt;a href=&quot;#Usage.Option&quot;&gt;&lt;code&gt;Usage.Option&lt;/code&gt;&lt;/a&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ca74771e8e4d50838a5d61dfe30a32ee401633a" translate="yes" xml:space="preserve">
          <source>Contains all data for a class declaration that is needed for the Objective-C integration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5758660e7aee75739c576bec5bbbf585a0eeed56" translate="yes" xml:space="preserve">
          <source>Contains all text which occurs after the root element. Defaults to the empty string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8783cd5f87b85b9067504dfc5f62c8eeef387c4" translate="yes" xml:space="preserve">
          <source>Contains all text which occurs before the root element. Defaults to &amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08c7edba7490157d52a2bebdf452e082ec47a85a" translate="yes" xml:space="preserve">
          <source>Contains druntime startup and shutdown routines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99a79c4c156e712bb397dee3eeb5c6eea6c0caf3" translate="yes" xml:space="preserve">
          <source>Contains implementations of functions called when the -profile=gc switch is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61ba82fdcfc8dae9c85e2e28e679b79ee9524ff4" translate="yes" xml:space="preserve">
          <source>Contains support code for code profiling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d68b82f5a6be5a484ed9b7861d6e9244ca39d4e" translate="yes" xml:space="preserve">
          <source>Contains the elementary mathematical functions (powers, roots, and trigonometric functions), and low-level floating-point operations. Mathematical special functions are available in &lt;code&gt;std.mathspecial&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="374abc9326723db2e7c697a2e6e4a267fe502ba8" translate="yes" xml:space="preserve">
          <source>Contains the garbage collector configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55cac8fa5f9a9f51445b40b028c04583fd1b7e94" translate="yes" xml:space="preserve">
          <source>Contains the implementation for object monitors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c43e50c1f103bb404d1f65f3ca0cac200dba4a52" translate="yes" xml:space="preserve">
          <source>Contains the internal GC interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a032e0777594355a5de7f90137f141d62d5d95dd" translate="yes" xml:space="preserve">
          <source>Contains various utility functions used by the runtime implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a08a8cb56aef49a4bb99834f8677b54329650228" translate="yes" xml:space="preserve">
          <source>Content of this structure depends on information which is known and is achievable (e.g. by FTP LIST parsing). Please see the url_easy_setopt(3) man page for callbacks returning this structure -- some fields are mandatory, some others are optional. The FLAG field has special meaning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77d12b97ba61ffccb079e0dd2ef6809c1e957255" translate="yes" xml:space="preserve">
          <source>Content-Type</source>
          <target state="translated">Content-Type</target>
        </trans-unit>
        <trans-unit id="98251b802b3d8e0fab3d7ef7d11a13d8ba221384" translate="yes" xml:space="preserve">
          <source>Context Limitation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cc99c46b528420190afd0244c38be46fd558d8e" translate="yes" xml:space="preserve">
          <source>Continue Statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e00690c736538c71ad18c2491100afa18d8ad07d" translate="yes" xml:space="preserve">
          <source>Continue to send authentication (user+password) when following locations, even when hostname changed. This can potentially send off the name and password to whatever host the server decides.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="871aae3a25947aaa249c78c11e20e318f84bf435" translate="yes" xml:space="preserve">
          <source>Contract Programming</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef3ae2c761b4a2473b2910338e239fa3eb7fe7d0" translate="yes" xml:space="preserve">
          <source>ContractChecking &lt;strong id=&quot;arrayBounds&quot;&gt;arrayBounds&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58b151a487b5b15bd53e628c2aa67fcd794d1b65" translate="yes" xml:space="preserve">
          <source>ContractChecking &lt;strong id=&quot;assert_&quot;&gt;assert_&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5375164204a2f5e56cdbbed34a61f0552eceffaf" translate="yes" xml:space="preserve">
          <source>ContractChecking &lt;strong id=&quot;invariant_&quot;&gt;invariant_&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07797d6d70881f0065abbaa5d2db584cee41ccbe" translate="yes" xml:space="preserve">
          <source>ContractChecking &lt;strong id=&quot;postcondition&quot;&gt;postcondition&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8c4e2d35f85c409b1763c5d617c7124eb387c47" translate="yes" xml:space="preserve">
          <source>ContractChecking &lt;strong id=&quot;precondition&quot;&gt;precondition&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8a121a438ee5a2fb57a169295d9586a112d6e2a" translate="yes" xml:space="preserve">
          <source>ContractChecking &lt;strong id=&quot;switchError&quot;&gt;switchError&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32767bc87ce3ae8cd973b35c715a2ae94be49543" translate="yes" xml:space="preserve">
          <source>Contracts</source>
          <target state="translated">Contracts</target>
        </trans-unit>
        <trans-unit id="e08ca7a19394780a00d421700b2b6072e92cd151" translate="yes" xml:space="preserve">
          <source>Contracts Reading List</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a6fd7ad54f6db44bd48aaa1e54275e15709f220" translate="yes" xml:space="preserve">
          <source>Contracts are a breakthrough technique to reduce the programming effort for large projects. Contracts are the concept of preconditions, postconditions, errors, and invariants.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea1d3df298ca84104dbf8b2f6f916c02f6f77c6e" translate="yes" xml:space="preserve">
          <source>Control</source>
          <target state="translated">Control</target>
        </trans-unit>
        <trans-unit id="adf251f07168589eca3ad151f045da715921ca0e" translate="yes" xml:space="preserve">
          <source>Control Pictures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c2234cbd63091af60ac97c73f8399e25e57cbf0" translate="yes" xml:space="preserve">
          <source>Control and configure the D runtime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="537748b8d0b3c009932ffdcb2807345633628bae" translate="yes" xml:space="preserve">
          <source>Control the Floating point hardware</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7f5075a114488026d76dd48e5050fddf4db4821" translate="yes" xml:space="preserve">
          <source>Control the built-in garbage collector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6184ead7fbc8b585f30f7328c7d83cf9c22576b4" translate="yes" xml:space="preserve">
          <source>Control the various text mode attributes, such as color, when writing text to the console.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d531b827bceefa0692483efc8f1348a688772d8" translate="yes" xml:space="preserve">
          <source>Controls the assumptions the function makes about the lengths of the ranges</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fc385e9b61ce294ccbd6295a709917db7660e5f" translate="yes" xml:space="preserve">
          <source>Controls the assumptions the function makes about the lengths of the ranges (i.e. jagged or not)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea782105450bbc3723c1b76880caef4ed08032a7" translate="yes" xml:space="preserve">
          <source>Convenience Routines For Running Queries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbaf8ee56cf3b9369018adb601f4bf25663e048e" translate="yes" xml:space="preserve">
          <source>Convenience aliases for &lt;a href=&quot;#dur&quot;&gt;&lt;code&gt;dur&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd805f155418cecaf1531265afd99b52aac61ab2" translate="yes" xml:space="preserve">
          <source>Convenience function for constructing a generic container.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97a89cd2033f72e4eb474981a122ebe612ce8f03" translate="yes" xml:space="preserve">
          <source>Convenience function for creating a &lt;code&gt;Rebindable&lt;/code&gt; using automatic type inference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fe3ba594a0730c8377a41b425b9f0bdc446eba1" translate="yes" xml:space="preserve">
          <source>Convenience function for creating a &lt;code&gt;RedBlackTree!E&lt;/code&gt; from a list of values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fcfa4530313650065bc0666bdfaa3f7071ece58" translate="yes" xml:space="preserve">
          <source>Convenience function for creating an &lt;code&gt;InputRangeObject&lt;/code&gt; of the proper type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2deeddfbf7c17e3c5ed993f8f07764fedbbc9c86" translate="yes" xml:space="preserve">
          <source>Convenience function for creating an &lt;code&gt;InputRangeObject&lt;/code&gt; of the proper type. See &lt;a href=&quot;#InputRange&quot;&gt;&lt;code&gt;InputRange&lt;/code&gt;&lt;/a&gt; for an example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33f3457273684d37c964b9c19f1490014d05b78c" translate="yes" xml:space="preserve">
          <source>Convenience function for creating an &lt;code&gt;OutputRangeObject&lt;/code&gt; with a base range of type &lt;code&gt;R&lt;/code&gt; that accepts types &lt;code&gt;E&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f13ca9b185b997f6100d99d5834656c2a0f654b1" translate="yes" xml:space="preserve">
          <source>Convenience function for creating an &lt;code&gt;OutputRangeObject&lt;/code&gt; with a base range of type R that accepts types E.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="543a17dfa7cd9fecc2d051d691cc274f44674a5b" translate="yes" xml:space="preserve">
          <source>Convenience function that forwards to &lt;code&gt;core.sys.posix.stdio.popen&lt;/code&gt; with appropriately-constructed C-style strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57e58ca108f45c53d8dfc085d29212201f4aa333" translate="yes" xml:space="preserve">
          <source>Convenience function that returns a &lt;a href=&quot;#RefAppender&quot;&gt;&lt;code&gt;RefAppender&lt;/code&gt;&lt;/a&gt; instance initialized with &lt;code&gt;arrayPtr&lt;/code&gt;. Don't use null for the array pointer, use the other version of &lt;code&gt;appender&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="281f96e0594e5b73a2e2e9d42b693c5d84ca8aef" translate="yes" xml:space="preserve">
          <source>Convenience function that returns a &lt;code&gt;BinaryHeap!Store&lt;/code&gt; object initialized with &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;initialSize&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbf606ab86105b722d7651433b775855c8f60974" translate="yes" xml:space="preserve">
          <source>Convenience function that returns an &lt;a href=&quot;#Appender&quot;&gt;&lt;code&gt;Appender&lt;/code&gt;&lt;/a&gt; instance, optionally initialized with &lt;code&gt;array&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47da49afa84caecf99a65771eecc2d27ea32a75e" translate="yes" xml:space="preserve">
          <source>Convenience function that turns an integral into the corresponding &lt;code&gt;Checked&lt;/code&gt; instance by using template argument deduction. The hook type may be specified (by default &lt;code&gt;Abort&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7eb2cf7a70b87e610611dcba9cc0bdabcaa306a1" translate="yes" xml:space="preserve">
          <source>Convenience function that uses type deduction to return the appropriate &lt;code&gt;FallbackAllocator&lt;/code&gt; instance. To initialize with allocators that don't have state, use their &lt;code&gt;it&lt;/code&gt; static member.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81c10fc980c8a23004da700f26d2e49b63195765" translate="yes" xml:space="preserve">
          <source>Convenience function to construct optimal configurations for packed Trie from any &lt;code&gt;set&lt;/code&gt; of &lt;a href=&quot;#Code%20point&quot;&gt;code points&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa203451ffb1f6e9e972677557577f159f71f56a" translate="yes" xml:space="preserve">
          <source>Convenience function which calls &lt;a href=&quot;std_range_primitives#popFrontN&quot;&gt;&lt;code&gt;std.range.primitives.popFrontN&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(range, n)&lt;/code&gt; and returns &lt;code&gt;range&lt;/code&gt;. &lt;code&gt;drop&lt;/code&gt; makes it easier to pop elements from a range and then pass it to another function within a single expression, whereas &lt;code&gt;popFrontN&lt;/code&gt; would require multiple statements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ed83ebf96e10dc1b8f43752d4d2a8c69a7ef125" translate="yes" xml:space="preserve">
          <source>Convenience function which calls &lt;code&gt;range.popFront()&lt;/code&gt; and returns &lt;code&gt;range&lt;/code&gt;. &lt;code&gt;dropOne&lt;/code&gt; makes it easier to pop an element from a range and then pass it to another function within a single expression, whereas &lt;code&gt;popFront&lt;/code&gt; would require multiple statements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d00821ec7d482d22259510bb224af117d2300d18" translate="yes" xml:space="preserve">
          <source>Convenience function. Like find, but only returns whether or not the search was successful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3dc32f284d99498a3ff78fa7f8707de6601d006" translate="yes" xml:space="preserve">
          <source>Convenience functions for converting one or more arguments of any type into text (the three character widths).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63a9968094dce5e51d767213fb044fe75d3397ea" translate="yes" xml:space="preserve">
          <source>Convenience functions that create an &lt;code&gt;Fft&lt;/code&gt; object, run the FFT or inverse FFT and return the result. Useful for one-off FFTs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5a94220c8ea5abfb148116a7e3799cbbf7ea2be" translate="yes" xml:space="preserve">
          <source>Convenience functions that forwards to &lt;code&gt;taskPool.parallel&lt;/code&gt;. The purpose of these is to make parallel foreach less verbose and more readable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="967ff579d1b9e412dbb4fb0ba6bf32a0206aa7b7" translate="yes" xml:space="preserve">
          <source>Convenience functions that throw an &lt;code&gt;StdioException&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f361faef9831cb8d5034d73da3a4a91d8124d09" translate="yes" xml:space="preserve">
          <source>Convenience mixin for trivially sub-classing exceptions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df84ccbf276b4bf10a3abe6941075be97f75450b" translate="yes" xml:space="preserve">
          <source>Convenience names that allow using e.g. &lt;code&gt;Yes.encryption&lt;/code&gt; instead of &lt;code&gt;Flag!&quot;encryption&quot;.yes&lt;/code&gt; and &lt;code&gt;No.encryption&lt;/code&gt; instead of &lt;code&gt;Flag!&quot;encryption&quot;.no&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cb541d4dad444c9b9a7542a4394d7feffdcfdf0" translate="yes" xml:space="preserve">
          <source>Convenience wrapper around &lt;a href=&quot;#convClockFreq&quot;&gt;&lt;code&gt;convClockFreq&lt;/code&gt;&lt;/a&gt; which converts ticks at a clock frequency of &lt;code&gt;MonoTime.ticksPerSecond&lt;/code&gt; to nanoseconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b5c35c190fd9666d416cddc663fbf2993d10e6b" translate="yes" xml:space="preserve">
          <source>Convenient operations commonly used with built-in arrays. Note that many common array operations are subsets of more generic algorithms that work with arbitrary ranges, so they are found in &lt;code&gt;std.algorithm&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61856b8c17a4ff32006fe4b7dcc6f96f253b2120" translate="yes" xml:space="preserve">
          <source>Conventions</source>
          <target state="translated">Conventions</target>
        </trans-unit>
        <trans-unit id="e5a1bf84f0030e4788165ba4a4686a376904272f" translate="yes" xml:space="preserve">
          <source>Conversely, all of the &lt;code&gt;out&lt;/code&gt; contracts need to be satisfied, so overriding functions becomes a processes of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5af5b7bf221e414a8c6a208feed4235fe84af14" translate="yes" xml:space="preserve">
          <source>Conversely, allocating memory with one non-&lt;code&gt;shared&lt;/code&gt; allocator, passing it across threads (by casting the obtained buffer to &lt;code&gt;shared&lt;/code&gt;), and later deallocating it in a different thread (either with a different allocator object or with the same allocator object after casting it to &lt;code&gt;shared&lt;/code&gt;) is illegal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9151f8433f795cb0f0b5b6743aeb7de77ec49f00" translate="yes" xml:space="preserve">
          <source>Conversion</source>
          <target state="translated">Conversion</target>
        </trans-unit>
        <trans-unit id="494c619bf8123d3b37b181684cb6338f68758f1b" translate="yes" xml:space="preserve">
          <source>Conversion from string types to char types enforces the input to consist of a single code point, and said code point must fit in the target type. Otherwise, &lt;a href=&quot;#ConvException&quot;&gt;&lt;code&gt;ConvException&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9809150893d2b2bb036c8fb3972fbb95c93ae93b" translate="yes" xml:space="preserve">
          <source>Conversion operators. Convert from conversion operator to conversion index parallel array invconvtab[] in cgelem.c</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b9cd0af162c3095105f23d4382e114423f820eb" translate="yes" xml:space="preserve">
          <source>Conversion to bool and int</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b08eaadf77cfdba7944ddcaf69eee5a983b74af3" translate="yes" xml:space="preserve">
          <source>Conversions</source>
          <target state="translated">Conversions</target>
        </trans-unit>
        <trans-unit id="197e8fd63c43eaa131c7d71bd1c845f261c1ca73" translate="yes" xml:space="preserve">
          <source>Conversions from integral types to floating-point types always succeed, but might lose accuracy. The largest integers with a predecessor representable in floating-point format are &lt;code&gt;2^24-1&lt;/code&gt; for &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;2^53-1&lt;/code&gt; for &lt;code&gt;double&lt;/code&gt;, and &lt;code&gt;2^64-1&lt;/code&gt; for &lt;code&gt;real&lt;/code&gt; (when &lt;code&gt;real&lt;/code&gt; is 80-bit, e.g. on Intel machines).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86f181ecd6da52a393babcdf0413f894069d62dc" translate="yes" xml:space="preserve">
          <source>Conversions from string to numeric types differ from the C equivalents &lt;code&gt;atoi()&lt;/code&gt; and &lt;code&gt;atol()&lt;/code&gt; by checking for overflow and not allowing whitespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d749a4f79969e83668c822ec3cb207e0dfcb26a" translate="yes" xml:space="preserve">
          <source>Conversions operate transitively, meaning that they work on arrays and associative arrays of any complexity.  This conversion works because &lt;code&gt;to!short&lt;/code&gt; applies to an &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;to!wstring&lt;/code&gt; applies to a &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;to!string&lt;/code&gt; applies to a &lt;code&gt;double&lt;/code&gt;, and &lt;code&gt;to!(double[])&lt;/code&gt; applies to an &lt;code&gt;int[]&lt;/code&gt;. The conversion might throw an exception because &lt;code&gt;to!short&lt;/code&gt; might fail the range check.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f15ce79532d7a88716daffe2b5fa5245abe9c20" translate="yes" xml:space="preserve">
          <source>Convert</source>
          <target state="translated">Convert</target>
        </trans-unit>
        <trans-unit id="cbfd7dd188ff7f487f68697a8d34f14f04f7dec6" translate="yes" xml:space="preserve">
          <source>Convert Expression to elem, then append destructors for any temporaries created in elem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="300d1d44e039ebbc34544e6257ab84ea8d05e054" translate="yes" xml:space="preserve">
          <source>Convert MODxxxx to STCxxx</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cac4192e2c3b155cebc1be34d4b77eb443e533c0" translate="yes" xml:space="preserve">
          <source>Convert Object to a human readable string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a157b506be054ad583671757f6739b58b4eae2cf" translate="yes" xml:space="preserve">
          <source>Convert Win32 error code to string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8203e1072dab83cb9ec37a4f4016d9ab9deef361" translate="yes" xml:space="preserve">
          <source>Convert a callable to a delegate with the same parameter list and return type, avoiding heap allocations and use of auxiliary storage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7616efe01f9711b656d048ab996095537d915ed4" translate="yes" xml:space="preserve">
          <source>Convert a narrow string to an array type that fully supports random access. This is handled as a special case and always returns an array of &lt;code&gt;dchar&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae8c143fc472917c228a5c0ff4611ff8f4b320dd" translate="yes" xml:space="preserve">
          <source>Convert a string from one encoding to another.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="775fe4e45be29046b343c44db1012fcf4054e8bd" translate="yes" xml:space="preserve">
          <source>Convert an &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; or a string to upper or lower case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c279cb7055f08eba41ad9320ed65a8b4bd24423e" translate="yes" xml:space="preserve">
          <source>Convert an IPv4 address number in host byte order to a human readable string representing the IPv4 address in dotted-decimal form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a94a08d73d55d4d138a67dc22b14b4c3e02569f" translate="yes" xml:space="preserve">
          <source>Convert array to a dynamic array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ca78c70b84ae82ae6555ba40c8527618a61c871" translate="yes" xml:space="preserve">
          <source>Convert array to a pointer to the data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a023ef771ded91cccae26939483968bef14680b" translate="yes" xml:space="preserve">
          <source>Convert expression into a delegate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21d2c697aa6b1950d17d8a4c4f437a6c775e1abd" translate="yes" xml:space="preserve">
          <source>Convert from pointer to exception_object field to pointer to CppExceptionHeader that it is embedded inside of.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca97d234020c359f0ea9445b2940ce5ecabb073f" translate="yes" xml:space="preserve">
          <source>Convert from pointer to exception_object to pointer to ExceptionHeader that it is embedded inside of.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="141d85c0215cf01962972ffaaf51166d383ad99a" translate="yes" xml:space="preserve">
          <source>Convert front end type &lt;code&gt;t&lt;/code&gt; to backend type &lt;code&gt;t.ctype&lt;/code&gt;. Memoize the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdd72d6f2bdb11b763377603b2356cca157b65d6" translate="yes" xml:space="preserve">
          <source>Convert integer to a range of characters. Intended to be lightweight and fast.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbbceb68e9badc857157ec44ce9e4004ea0d70fb" translate="yes" xml:space="preserve">
          <source>Convert integral value to string in radix radix. radix must be a value from 2 to 36. value is treated as a signed value only if radix is 10. The characters A through Z are used to represent values 10 through 36 and their case is determined by the letterCase parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7b617a1afa58073368ac7644c913c0a1351ae0d" translate="yes" xml:space="preserve">
          <source>Convert internal buffer to array of chars.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1c0c49893f30f59cf861f572b87531ec8714ef8" translate="yes" xml:space="preserve">
          <source>Convert intrinsic function to operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df7a4dda020c82114c65501c86fda6ef64fb7578" translate="yes" xml:space="preserve">
          <source>Convert string contents to a 0 terminated string, allocated by mem.xmalloc().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec4aa6a499b7d8a47d71bacac0397813ddfaa4db" translate="yes" xml:space="preserve">
          <source>Convert string to char[].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e5b362d69a7b7939119a85847912d34f42f3d2a" translate="yes" xml:space="preserve">
          <source>Convert the &lt;code&gt;BigInt&lt;/code&gt; to &lt;code&gt;string&lt;/code&gt;, passing it to the given sink.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e697a11907653a602483019409a860f0b6b446e" translate="yes" xml:space="preserve">
          <source>Convert the result of &lt;code&gt;__traits(getParameterStorageClasses)&lt;/code&gt; to &lt;a href=&quot;#ParameterStorageClass&quot;&gt;&lt;code&gt;ParameterStorageClass&lt;/code&gt;&lt;/a&gt;&lt;code&gt;enum&lt;/code&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7da59e0b399f4430a5165fc7efc2188b462909d8" translate="yes" xml:space="preserve">
          <source>Convert to 'const'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d339781d067223d4ff6ffa91e1a499862e4e10d" translate="yes" xml:space="preserve">
          <source>Convert to 'immutable'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64a97922b6ad5fabb50249f78bb7261af9bfcdc7" translate="yes" xml:space="preserve">
          <source>Convert to 'wild'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87e0f4222e74eab68817299371f9ec11a177e211" translate="yes" xml:space="preserve">
          <source>Convert to &lt;code&gt;size_t[]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b01671f329e1e8db8dfaf9b057f7d93f19d92bc" translate="yes" xml:space="preserve">
          <source>Convert to &lt;code&gt;void[]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7e573911db63a61f22b50d1d7f51e71f6801020" translate="yes" xml:space="preserve">
          <source>Convert to array of bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81f5f7ef2860779e845c8d181cf922cbaa33cd4e" translate="yes" xml:space="preserve">
          <source>Convert types from one type to another.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2ca50a2d69bd1118ceb42e9e63fb2cadf8cec83" translate="yes" xml:space="preserve">
          <source>Convert wrapped value to a human readable string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="792ceeff170dffe3167fec916d1a3b1293c9dd91" translate="yes" xml:space="preserve">
          <source>Converted to D from curl headers by &lt;a href=&quot;http://www.digitalmars.com/d/2.0/htod.html&quot;&gt;htod&lt;/a&gt; and cleaned up by Jonas Drewsen (jdrewsen)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b36e0d9093c25cbc6e2a4908ce26bc8670d8275a" translate="yes" xml:space="preserve">
          <source>Converting a value to its own type (useful mostly for generic code) simply returns its argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="450f535fe5b129de6888d6e0eaa750ca3a090834" translate="yes" xml:space="preserve">
          <source>Converting among numeric types is a safe way to cast them around.  Conversions from floating-point types to integral types allow loss of precision (the fractional part of a floating-point number). The conversion is truncating towards zero, the same way a cast would truncate. (To round a floating point value when casting to an integral, use &lt;code&gt;roundTo&lt;/code&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="031bf48dec6b48a765724d561163e257c0bd643c" translate="yes" xml:space="preserve">
          <source>Converting an array to another array type works by converting each element in turn. Associative arrays can be converted to associative arrays as long as keys and values can in turn be converted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d54717abb3bcd9a560b4033abb55a3f1b9abaf0c" translate="yes" xml:space="preserve">
          <source>Converting text to any of the four normalization forms via &lt;a href=&quot;#normalize&quot;&gt;&lt;code&gt;normalize&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a774f38191f5ee26ac3460d0bd0ede6e3b255259" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;s&lt;/code&gt; to lowercase (by performing Unicode lowercase mapping) in place. For a few characters string length may increase after the transformation, in such a case the function reallocates exactly once. If &lt;code&gt;s&lt;/code&gt; does not have any uppercase characters, then &lt;code&gt;s&lt;/code&gt; is unaltered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f50788ea46280702695186b92c1242c64d22af55" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;s&lt;/code&gt; to uppercase (by performing Unicode uppercase mapping) in place. For a few characters string length may increase after the transformation, in such a case the function reallocates exactly once. If &lt;code&gt;s&lt;/code&gt; does not have any lowercase characters, then &lt;code&gt;s&lt;/code&gt; is unaltered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ae33ebc9b2f5b3c2490b1760900c22c6b676fbc" translate="yes" xml:space="preserve">
          <source>Converts a &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; to a &lt;code&gt;FILETIME&lt;/code&gt; struct.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56be3b4d1a90af46d0b4592f89cac9048787f523" translate="yes" xml:space="preserve">
          <source>Converts a &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; to a &lt;code&gt;SYSTEMTIME&lt;/code&gt; struct.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="894edb86f4a8a0cd1f69c6b5d9062818feeb4ddd" translate="yes" xml:space="preserve">
          <source>Converts a &lt;code&gt;FILETIME&lt;/code&gt; struct to a &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed832f63736b31569fc124964cd3c928884d26d6" translate="yes" xml:space="preserve">
          <source>Converts a &lt;code&gt;FILETIME&lt;/code&gt; struct to the number of hnsecs since midnight, January 1st, 1 A.D.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf543602844b3062641ecae07379d485cf8d1e9c" translate="yes" xml:space="preserve">
          <source>Converts a &lt;code&gt;SYSTEMTIME&lt;/code&gt; struct to a &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="543b837fe53783efdefb34be70919c615cbd90b2" translate="yes" xml:space="preserve">
          <source>Converts a &lt;code&gt;TickDuration&lt;/code&gt; to the given units as either an integral value or a floating point value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da8e27299262cc14743b153feb76d11d4fc53020" translate="yes" xml:space="preserve">
          <source>Converts a callable to a delegate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2246d69735597617ac670e1cd79c63e9b7c718e" translate="yes" xml:space="preserve">
          <source>Converts a hex literal to a string at compile time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12fd3fc98603c4c30662a5d938bee086fc318076" translate="yes" xml:space="preserve">
          <source>Converts a number of hnsecs since midnight, January 1st, 1 A.D. to a &lt;code&gt;FILETIME&lt;/code&gt; struct.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8645b8b019a6a92357fd2abaf953b052fdc1822" translate="yes" xml:space="preserve">
          <source>Converts an ASCII letter to lowercase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="498c6f9ce172411761c196b39cf785adcfc26947" translate="yes" xml:space="preserve">
          <source>Converts an ASCII letter to uppercase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f236af9686b5551670717880afe98b4a169a9b35" translate="yes" xml:space="preserve">
          <source>Converts any foreach-iterable entity (e.g. an input range) to an alias sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cd9c57aa4a490cac5e73dc3d34bbb7dcb896ecd" translate="yes" xml:space="preserve">
          <source>Converts array (other than strings) to string. Each element is converted by calling &lt;code&gt;to!T&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f0da0dc296d4db8687cb43fe21c97d98f43b18d" translate="yes" xml:space="preserve">
          <source>Converts from &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; to DOS file date/time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="203d4991495ad2a5ccd5bf2eb36f27bdb41d0ab3" translate="yes" xml:space="preserve">
          <source>Converts from DOS file date/time to &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96775ca56ca5ed48ab90888921d90905553fc258" translate="yes" xml:space="preserve">
          <source>Converts from unix time (i.e. seconds from midnight, January 1st, 1970 in UTC) to a &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47a6cd5246b5128f541dc1f56c74256ce4a5cf6e" translate="yes" xml:space="preserve">
          <source>Converts from unix time (which uses midnight, January 1st, 1970 UTC as its epoch and seconds as its units) to &quot;std time&quot; (which uses midnight, January 1st, 1 A.D. UTC and hnsecs as its units).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ff42625e816f32f0e903105abab719aab3bc247" translate="yes" xml:space="preserve">
          <source>Converts std time (which uses midnight, January 1st, 1 A.D. UTC as its epoch and hnsecs as its units) to unix time (which uses midnight, January 1st, 1970 UTC as its epoch and seconds as its units).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02026be234370e8ba0fa5a12a01ca8dc15195021" translate="yes" xml:space="preserve">
          <source>Converts the UTF-8 string s into a null-terminated string in a Windows 8-bit character set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68545d42d5434868c8492fc2ad3250e2f1494c37" translate="yes" xml:space="preserve">
          <source>Converts the complex number to a string representation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4417d8f06d1b116703d3dde566fa560d538d75d" translate="yes" xml:space="preserve">
          <source>Converts the given time from one clock frequency/resolution to another.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a6e949bbca6ba048ef59d86f6355918bc8f8588" translate="yes" xml:space="preserve">
          <source>Converts the given value from big endian to the native endianness and returns it. The value is given as a &lt;code&gt;ubyte[n]&lt;/code&gt; where &lt;code&gt;n&lt;/code&gt; is the size of the target type. You must give the target type as a template argument, because there are multiple types with the same size and so the type of the argument is not enough to determine the return type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99754092cef6ee8c6b8a8736f7dda136a6df1796" translate="yes" xml:space="preserve">
          <source>Converts the given value from little endian to the native endianness and returns it. The value is given as a &lt;code&gt;ubyte[n]&lt;/code&gt; where &lt;code&gt;n&lt;/code&gt; is the size of the target type. You must give the target type as a template argument, because there are multiple types with the same size and so the type of the argument is not enough to determine the return type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7026ec6ca618852b8dbaface42f39c87c3912a93" translate="yes" xml:space="preserve">
          <source>Converts the given value from the native endianness to big endian and returns it as a &lt;code&gt;ubyte[n]&lt;/code&gt; where &lt;code&gt;n&lt;/code&gt; is the size of the given type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db7766a0ee6d7c4c104a32edc118f2a266f57364" translate="yes" xml:space="preserve">
          <source>Converts the given value from the native endianness to little endian and returns it as a &lt;code&gt;ubyte[n]&lt;/code&gt; where &lt;code&gt;n&lt;/code&gt; is the size of the given type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71032212236b6edba85329a7e36a9ebec7e90c73" translate="yes" xml:space="preserve">
          <source>Converts the null-terminated string s from a Windows 8-bit character set into a UTF-8 char array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="453bede937d557afda6a1aea6ab1d8f1c5734489" translate="yes" xml:space="preserve">
          <source>Converts the store &lt;code&gt;s&lt;/code&gt; into a heap. If &lt;code&gt;initialSize&lt;/code&gt; is specified, only the first &lt;code&gt;initialSize&lt;/code&gt; elements in &lt;code&gt;s&lt;/code&gt; are transformed into a heap, after which the heap can grow up to &lt;code&gt;r.length&lt;/code&gt; (if &lt;code&gt;Store&lt;/code&gt; is a range) or indefinitely (if &lt;code&gt;Store&lt;/code&gt; is a container with &lt;code&gt;insertBack&lt;/code&gt;). Performs &amp;Omicron;(&lt;code&gt;min(r.length, initialSize)&lt;/code&gt;) evaluations of &lt;code&gt;less&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f93578046a37a61d755a351d7403ee07d2feb19" translate="yes" xml:space="preserve">
          <source>Converts this &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; to a string with the format &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. If &lt;code&gt;writer&lt;/code&gt; is set, the resulting string will be written directly to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6603b566288f85150171c62cd84c2febe4e416d1" translate="yes" xml:space="preserve">
          <source>Converts this &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; to a string with the format &lt;code&gt;YYYY-Mon-DD&lt;/code&gt;. If &lt;code&gt;writer&lt;/code&gt; is set, the resulting string will be written directly to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbed58be0aee4969a87b68c3fa4d895942507f6c" translate="yes" xml:space="preserve">
          <source>Converts this &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; to a string with the format &lt;code&gt;YYYYMMDD&lt;/code&gt;. If &lt;code&gt;writer&lt;/code&gt; is set, the resulting string will be written directly to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a1ebbb6b69924d680654dfe931f3d107306042b" translate="yes" xml:space="preserve">
          <source>Converts this &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; to a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cdf3feb7790120701384059bf58b361680f227a" translate="yes" xml:space="preserve">
          <source>Converts this &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; to a string with the format &lt;code&gt;YYYY-MM-DDTHH:MM:SS&lt;/code&gt;. If &lt;code&gt;writer&lt;/code&gt; is set, the resulting string will be written directly to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4b6f600d98add32575a23efab5b281c9146f97b" translate="yes" xml:space="preserve">
          <source>Converts this &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; to a string with the format &lt;code&gt;YYYY-Mon-DD HH:MM:SS&lt;/code&gt;. If &lt;code&gt;writer&lt;/code&gt; is set, the resulting string will be written directly to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f02a2e92abc14cc294c7e38e57188968b21a1abb" translate="yes" xml:space="preserve">
          <source>Converts this &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; to a string with the format &lt;code&gt;YYYYMMDDTHHMMSS&lt;/code&gt;. If &lt;code&gt;writer&lt;/code&gt; is set, the resulting string will be written directly to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db51859446cb3a5e9180034baebbd2056ca398e0" translate="yes" xml:space="preserve">
          <source>Converts this &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; to a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2476ac04da69ffdc944a61493a1b71959fe371eb" translate="yes" xml:space="preserve">
          <source>Converts this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; to a string with the format YYYY-MM-DDTHH:MM:SS.FFFFFFFTZ (where F is fractional seconds and TZ is the time zone).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fd506aa039e90544044bf8ca9bc422fc2f26564" translate="yes" xml:space="preserve">
          <source>Converts this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; to a string with the format YYYY-Mon-DD HH:MM:SS.FFFFFFFTZ (where F is fractional seconds and TZ is the time zone).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d39abfdab21a7e5012c4e5c22865dc3c6b9b9a8f" translate="yes" xml:space="preserve">
          <source>Converts this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; to a string with the format YYYYMMDDTHHMMSS.FFFFFFFTZ (where F is fractional seconds and TZ is time zone).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="288ffc29180217ab372bbf85f774ec19f9c71bdb" translate="yes" xml:space="preserve">
          <source>Converts this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; to a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5ead06637aa29f4e0f3f6e8350a6b3d0470262f" translate="yes" xml:space="preserve">
          <source>Converts this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; to unix time (i.e. seconds from midnight, January 1st, 1970 in UTC).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11c0c6c4e0883ccde835c4d2ba2f873e1dc0fe81" translate="yes" xml:space="preserve">
          <source>Converts this &lt;a href=&quot;#TimeOfDay&quot;&gt;&lt;code&gt;TimeOfDay&lt;/code&gt;&lt;/a&gt; to a string with the format &lt;code&gt;HH:MM:SS&lt;/code&gt;. If &lt;code&gt;writer&lt;/code&gt; is set, the resulting string will be written directly to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="289897447b39fc44b7870f5a328e8892eb4029c1" translate="yes" xml:space="preserve">
          <source>Converts this &lt;a href=&quot;#TimeOfDay&quot;&gt;&lt;code&gt;TimeOfDay&lt;/code&gt;&lt;/a&gt; to a string with the format &lt;code&gt;HHMMSS&lt;/code&gt;. If &lt;code&gt;writer&lt;/code&gt; is set, the resulting string will be written directly to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8233cbfc0d952b5bfeda989512aed9518e2812db" translate="yes" xml:space="preserve">
          <source>Converts this &lt;code&gt;Duration&lt;/code&gt; to a &lt;code&gt;string&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6e0e45d39cee812b4f40d98644bee8bb2dbdb9d" translate="yes" xml:space="preserve">
          <source>Converts this TimeOfDay to a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d70de6e4f1b10ef5bbf7032a91df90630348700" translate="yes" xml:space="preserve">
          <source>Converts this interval to a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da35025d96842d394967858a7a95f5b87cb34797" translate="yes" xml:space="preserve">
          <source>Converts to string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf38165162fb8000f4b46022cfe90ad022d53d08" translate="yes" xml:space="preserve">
          <source>Copies a range to another. If &lt;code&gt;a = [1, 2, 3]&lt;/code&gt; and &lt;code&gt;b = new int[5]&lt;/code&gt;, then &lt;code&gt;copy(a, b)&lt;/code&gt; leaves &lt;code&gt;b = [1, 2, 3, 0, 0]&lt;/code&gt; and returns &lt;code&gt;b[3 .. $]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14bbc85755baa25d4951be7218064216daa78c34" translate="yes" xml:space="preserve">
          <source>Copies all environment variables into an associative array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3484c1ab3cd6af03dbf05b6c0cb7f8dbede1bc3e" translate="yes" xml:space="preserve">
          <source>Copies out the top elements of a range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3760826c7bb74f35fbcd18d73458a48731a1bc5b" translate="yes" xml:space="preserve">
          <source>Copies out the values that occur most frequently (multiplied by per-value weights) in a range of ranges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bdd3f12e99e3b707353754ea1c09e13976482b7" translate="yes" xml:space="preserve">
          <source>Copies out the values that occur most frequently in a range of ranges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc55bda0ef1918898bb2580421cef4d1e592ad70" translate="yes" xml:space="preserve">
          <source>Copies the content of &lt;code&gt;source&lt;/code&gt; into &lt;code&gt;target&lt;/code&gt; and returns the remaining (unfilled) part of &lt;code&gt;target&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78798d20653e71e4060adbb2cf9963f5c8d2dbc1" translate="yes" xml:space="preserve">
          <source>Copies the top &lt;code&gt;n&lt;/code&gt; elements of the &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt;&lt;code&gt;source&lt;/code&gt; into the random-access range &lt;code&gt;target&lt;/code&gt;, where &lt;code&gt;n = target.length&lt;/code&gt;. Elements of &lt;code&gt;source&lt;/code&gt; are not touched. If &lt;code&gt;sorted&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the target is sorted. Otherwise, the target respects the &lt;a href=&quot;http://en.wikipedia.org/wiki/Binary_heap&quot;&gt;heap property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c860f91e1096880f98894442e0fd5b51861a8938" translate="yes" xml:space="preserve">
          <source>Copies type qualifiers from &lt;code&gt;FromType&lt;/code&gt; to &lt;code&gt;ToType&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f831e18f3d39d06a4db85c2a93c55cd8de3583f9" translate="yes" xml:space="preserve">
          <source>Coptic</source>
          <target state="translated">Coptic</target>
        </trans-unit>
        <trans-unit id="709184dfbdae79b767c073438461d5232cfaf826" translate="yes" xml:space="preserve">
          <source>Copy a list and return it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd1c2a586ccbd243219ac10eddf70c09e31d365c" translate="yes" xml:space="preserve">
          <source>Copy construction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37418ac4b9973316ffcd94559dc007884df26d17" translate="yes" xml:space="preserve">
          <source>Copy constructors are used to initialize a &lt;code&gt;struct&lt;/code&gt; instance from another &lt;code&gt;struct&lt;/code&gt; of the same type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="320779b333b853c0722a1290050d477167e8a078" translate="yes" xml:space="preserve">
          <source>Copy file &lt;code&gt;from&lt;/code&gt; to file &lt;code&gt;to&lt;/code&gt;. File timestamps are preserved. File attributes are preserved, if &lt;code&gt;preserve&lt;/code&gt; equals &lt;code&gt;Yes.preserveAttributes&lt;/code&gt;. On Windows only &lt;code&gt;Yes.preserveAttributes&lt;/code&gt; (the default on Windows) is supported. If the target file exists, it is overwritten.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6adfec0ea49b245d49516253d1dd309df3c674d0" translate="yes" xml:space="preserve">
          <source>Copy list of pointers into an array of pointers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="308a306712a72a68760a831c427ff9a7b6f477e8" translate="yes" xml:space="preserve">
          <source>Copy of pContext passed to s_r_g_c()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8fcd23e55300e52517fa8bcab8fa048a94546e8" translate="yes" xml:space="preserve">
          <source>Copy the AST for Initializer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9b2e4441cb240ca98a4ab28279101e86791c233" translate="yes" xml:space="preserve">
          <source>Copy the content of &lt;code&gt;src&lt;/code&gt; into a C-string ('\0' terminated) then call &lt;code&gt;dg&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b95b3aef1bd39e43db4216e5417954c43df1366d" translate="yes" xml:space="preserve">
          <source>Copy the syntax. Used for template instantiations. If s is NULL, allocate the new object, otherwise fill it in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ec1721ef2b902c8de7cb0d0aa34612ec83401fd" translate="yes" xml:space="preserve">
          <source>Copying of this struct is disabled, since it would provide no useful semantics. If you want to pass this struct around, you should do so by reference or pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9e302476e5802312f92d2000e1d7eb281d3f5c6" translate="yes" xml:space="preserve">
          <source>Copying one &lt;code&gt;File&lt;/code&gt; object to another results in the two &lt;code&gt;File&lt;/code&gt; objects referring to the same underlying file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9a652bd968ffd57a4235b12a1e05a73da8e344b" translate="yes" xml:space="preserve">
          <source>Copying range &lt;code&gt;E&lt;/code&gt; into &lt;code&gt;R&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c490d0555e01fccc566b2049a123406254aec4e" translate="yes" xml:space="preserve">
          <source>Copyright (C) 1998 - 2010, Daniel Stenberg, &amp;lt;daniel@haxx.se&amp;gt;, et al.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7fd2f0b0b062e7925bd7e80f9edff1469e8c0cd" translate="yes" xml:space="preserve">
          <source>Copyright (C) 2018-2019 by The D Language Foundation, All Rights Reserved</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="791e6eab1ad061b18a1d6efc93a77ad535bf0203" translate="yes" xml:space="preserve">
          <source>Copyright Digital Mars 2007 - 2010.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4671543319eb1a3e40086a095380b9f58bb42d23" translate="yes" xml:space="preserve">
          <source>Copyright:</source>
          <target state="translated">Copyright:</target>
        </trans-unit>
        <trans-unit id="c1c6068dcf095f0b88f5e50f1dfe0135b6190c47" translate="yes" xml:space="preserve">
          <source>Core allocator objects that interface with D's garbage collected heap (&lt;a href=&quot;std_experimental_allocator_gc_allocator&quot;&gt;&lt;code&gt;std.experimental.allocator.gc_allocator&lt;/code&gt;&lt;/a&gt;), the C &lt;code&gt;malloc&lt;/code&gt; family (&lt;a href=&quot;std_experimental_allocator_mallocator&quot;&gt;&lt;code&gt;std.experimental.allocator.mallocator&lt;/code&gt;&lt;/a&gt;), and the OS (&lt;a href=&quot;std_experimental_allocator_mmap_allocator&quot;&gt;&lt;code&gt;std.experimental.allocator.mmap_allocator&lt;/code&gt;&lt;/a&gt;). Most custom allocators would ultimately obtain memory from one of these core allocators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b820d5ee9cbef08cc0675cf59c9e9666eb11879" translate="yes" xml:space="preserve">
          <source>Core language definitions. Automatically imported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76cb799cd1522d52368e0a75ed33732541a23b3a" translate="yes" xml:space="preserve">
          <source>Could not find an MX record for this domain but an A-record does exist</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08c19a8f1d0d59ad9d116a7f6a492aba8099b5e8" translate="yes" xml:space="preserve">
          <source>Could not find an MX record or an A-record for this domain</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0939fecded0f0c9d546d71641c3908e28d8f44d4" translate="yes" xml:space="preserve">
          <source>Count The Number Of Rows Modified</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d5ade84a80435c2bfa6f6177104e09a64281c70" translate="yes" xml:space="preserve">
          <source>Count all the possible substrings of length 2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8be0facbf0a137c1553dcd917b58aac8fddcb84c" translate="yes" xml:space="preserve">
          <source>Count up and return number of items in list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e564d45aaad122a5874f0bff4352287fa9c20217" translate="yes" xml:space="preserve">
          <source>Counting Rod Numerals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="173f9b130d44a68c96e425930a40f7564c0cd832" translate="yes" xml:space="preserve">
          <source>Counts all the set bits in the &lt;code&gt;BitArray&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ce36e691e55ca1534110cdf92701208325abb85" translate="yes" xml:space="preserve">
          <source>Counts elements in the given &lt;a href=&quot;std_range_primitives#isForwardRange&quot;&gt;forward range&lt;/a&gt; until the given predicate is true for one of the given &lt;code&gt;needles&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="036b8b1123e79381082e175aa22db7cf31f3e5e1" translate="yes" xml:space="preserve">
          <source>Counts elements that are equal to a specified value or satisfy a predicate. &lt;code&gt;count([1, 2, 1], 1)&lt;/code&gt; returns &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;count!&quot;a &amp;lt; 0&quot;([1, -3, 0])&lt;/code&gt; returns &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccf0dfb24dfd16253b0f3c9addacb80ba1861801" translate="yes" xml:space="preserve">
          <source>Counts the number of calls to &lt;code&gt;alignedAllocate&lt;/code&gt; that succeeded, i.e. they returned a block as large as requested. (N.B. requests for zero bytes count as successful.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89e430aecb0bc14a42573f4e6f98203eeb3b69aa" translate="yes" xml:space="preserve">
          <source>Counts the number of calls to &lt;code&gt;alignedAllocate&lt;/code&gt;. All calls are counted, including requests for zero bytes or failed requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33412aaca6b7b7660ddf82c644a97ea07b39f016" translate="yes" xml:space="preserve">
          <source>Counts the number of calls to &lt;code&gt;allocate&lt;/code&gt; that succeeded, i.e. they returned a block as large as requested. (N.B. requests for zero bytes count as successful.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b35cbf7d07dd6ee024a9bcd8d87883db36546721" translate="yes" xml:space="preserve">
          <source>Counts the number of calls to &lt;code&gt;allocate&lt;/code&gt;. All calls are counted, including requests for zero bytes or failed requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3219b291728cf96157a69f99f29e801ca560a91d" translate="yes" xml:space="preserve">
          <source>Counts the number of calls to &lt;code&gt;deallocate&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5961c3ed47a6ea7e033c8af93daa0abd5528a016" translate="yes" xml:space="preserve">
          <source>Counts the number of calls to &lt;code&gt;deallocateAll&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2879654a173945a9cba0580571953a4dc0a97302" translate="yes" xml:space="preserve">
          <source>Counts the number of calls to &lt;code&gt;expand&lt;/code&gt; that resulted in a successful expansion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c5af41f873e7913601ca76a10cc79cc68d7c141" translate="yes" xml:space="preserve">
          <source>Counts the number of calls to &lt;code&gt;expand&lt;/code&gt;, regardless of arguments or result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09d92465f887e970b05288ec88d3e63ccb6de9ca" translate="yes" xml:space="preserve">
          <source>Counts the number of calls to &lt;code&gt;owns&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1afc421ebe17abffb879f6aab12a15ef83d68dd4" translate="yes" xml:space="preserve">
          <source>Counts the number of calls to &lt;code&gt;reallocate&lt;/code&gt; that resulted in an in-place reallocation (no memory moved). If this number is close to the total number of reallocations, that indicates the allocator finds room at the current block's end in a large fraction of the cases, but also that internal fragmentation may be high (the size of the unit of allocation is large compared to the typical allocation size of the application).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="820537dc16117e7850cbde5ae4bfce6bca7be8ed" translate="yes" xml:space="preserve">
          <source>Counts the number of calls to &lt;code&gt;reallocate&lt;/code&gt; that succeeded. (Reallocations to zero bytes count as successful.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc15833a702b66d803c03a8019110e6825ca2625" translate="yes" xml:space="preserve">
          <source>Counts the number of calls to &lt;code&gt;reallocate&lt;/code&gt;, regardless of arguments or result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c12f5fb99ca2154f2dcfa85d6b67e6da2e844b9b" translate="yes" xml:space="preserve">
          <source>Covariant means that 'this' can substitute for 't', i.e. a pure function is a match for an impure type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d95e70de908fe667a8d90b4c2c9835cc65a2bc51" translate="yes" xml:space="preserve">
          <source>Covariant return types are supported, which means that the overriding function in a derived class can return a type that is derived from the type returned by the overridden function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80e13549b47a4dfc6e898a282920091b209c78be" translate="yes" xml:space="preserve">
          <source>Coverage</source>
          <target state="translated">Coverage</target>
        </trans-unit>
        <trans-unit id="134b318951a0e9fd4c15b2f4d1bdf343d3855913" translate="yes" xml:space="preserve">
          <source>Covers a given range &lt;code&gt;r&lt;/code&gt; in a random manner, i.e. goes through each element of &lt;code&gt;r&lt;/code&gt; once and only once, just in a random order. &lt;code&gt;r&lt;/code&gt; must be a random-access range with length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80b8fd5910e5321eafb27f61b9891d1fcfabc69f" translate="yes" xml:space="preserve">
          <source>CppTypeInfo &lt;code&gt;sti&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49b9f541df9267a1e81a2e1318c39164b9049cf8" translate="yes" xml:space="preserve">
          <source>Create A New Dynamic String Object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f738b7c71ee4fcfa212cb684acc179c459d0f67c" translate="yes" xml:space="preserve">
          <source>Create Or Redefine SQL Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ece1dfb335b9491989584a0b93ef182f523f9560" translate="yes" xml:space="preserve">
          <source>Create RTInfo for type T</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d375db3a1f3f34950378c2942ec463da134ac351" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;KRRegion&lt;/code&gt;. If &lt;code&gt;ParentAllocator&lt;/code&gt; is not &lt;code&gt;NullAllocator&lt;/code&gt;, &lt;code&gt;KRRegion&lt;/code&gt;'s destructor will call &lt;code&gt;parent.deallocate&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f87dab8d862d0e2f326eb6f6f98422949344a463" translate="yes" xml:space="preserve">
          <source>Create a SocketSet with a specific initial capacity (defaults to &lt;code&gt;FD_SETSIZE&lt;/code&gt;, the system's default capacity).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6115e98c8527cdbd982abe785b7a57087cb4c9e9" translate="yes" xml:space="preserve">
          <source>Create a bitfield pack of eight bits, which fit in one ubyte. The bitfields are allocated starting from the least significant bit, i.e. x occupies the two least significant bits of the bitfields storage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="839d59c094905e9232ab8c88f3cdc905e73f062f" translate="yes" xml:space="preserve">
          <source>Create a blocking socket using the parameters from the specified &lt;code&gt;AddressInfo&lt;/code&gt; structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75ae856d1b4059fd4c939c4490a4432d4ce09656" translate="yes" xml:space="preserve">
          <source>Create a blocking socket. If a single protocol type exists to support this socket type within the address family, the &lt;code&gt;ProtocolType&lt;/code&gt; may be omitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5c91e7ca2204837ccbc8674326fb67dea000b39" translate="yes" xml:space="preserve">
          <source>Create a deep copy of &lt;code&gt;this&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eb536cb42ec7dabddf6284395324e96212d115e" translate="yes" xml:space="preserve">
          <source>Create a dynamic array of the same size and copy the contents of the array into it. The copy is typed as being immutable. If this conversion is invalid the call will not compile.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ddf0e62c5224c606a534ff3f1eb6d8fe747981d" translate="yes" xml:space="preserve">
          <source>Create a dynamic array of the same size and copy the contents of the array into it. The copy will have any immutability or const stripped. If this conversion is invalid the call will not compile.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="341accefd95b61afa9893db29309cc44315c3a2a" translate="yes" xml:space="preserve">
          <source>Create a horizontal rule by adding a line containing three or more asterisks, underscores or hyphens:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e967753a33c5c7c7aa1e8f4422915e9dfd50d92c" translate="yes" xml:space="preserve">
          <source>Create a new associative array of the same size and copy the contents of the associative array into it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c9de552758093961aee77c1dae8b1dd3d177f54" translate="yes" xml:space="preserve">
          <source>Create a new scope from sc. semantic, semantic2 and semantic3 will use this for aggregate members.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="765b47ab87cb7a6d03987e9ff17e776ff00c1f20" translate="yes" xml:space="preserve">
          <source>Create a new scope if one or more given attributes are different from the sc's. If the returned scope != sc, the caller should pop the scope after it used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0af330de1bfdb44bc3db78edbb6764a903bd5a6f" translate="yes" xml:space="preserve">
          <source>Create a new thread for executing this &lt;code&gt;Task&lt;/code&gt;, execute it in the newly created thread, then terminate the thread. This can be used for future/promise parallelism. An explicit priority may be given to the &lt;code&gt;Task&lt;/code&gt;. If one is provided, its value is forwarded to &lt;code&gt;core.thread.Thread.priority&lt;/code&gt;. See &lt;a href=&quot;std_parallelism#task&quot;&gt;&lt;code&gt;std.parallelism.task&lt;/code&gt;&lt;/a&gt; for usage example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c71ba660ac8a783c6ab9eb2e83d4cb7a0caf6e05" translate="yes" xml:space="preserve">
          <source>Create a quiet NAN, storing an integer inside the payload.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0230dbb481a6cc7524fc6a1776a286525afecbb" translate="yes" xml:space="preserve">
          <source>Create a range which repeats one value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05cea08ac76b777160923ee7d8caa033b1e3267d" translate="yes" xml:space="preserve">
          <source>Create a reference to another dt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="956893df969cb511fe8cb0a535aa0c05eb7c1e44" translate="yes" xml:space="preserve">
          <source>Create a scope for the parameters of the TemplateInstance &lt;code&gt;ti&lt;/code&gt; in the parent scope sc from the ScopeDsymbol paramsym.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6243527d15de44e02eb522bb38a9f03d7ab0c9b3" translate="yes" xml:space="preserve">
          <source>Create a thread not under control of the runtime, i.e. TLS module constructors are not run and the GC does not suspend it during a collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="348e3661ccba88f4db846a336ac30d6c05131e6d" translate="yes" xml:space="preserve">
          <source>Create a unary or binary function from a string. Most often used when defining algorithms on ranges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="959f9dde6d0a81fc23a2588b08ba6db6bae1876b" translate="yes" xml:space="preserve">
          <source>Create a vector type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9572cfad6b3211fcd4b15b756e271a21d6de1572" translate="yes" xml:space="preserve">
          <source>Create an &lt;code&gt;Fft&lt;/code&gt; object for computing fast Fourier transforms of power of two sizes of &lt;code&gt;size&lt;/code&gt; or smaller. &lt;code&gt;size&lt;/code&gt; must be a power of two.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6650f16211e259caf5365253a1f7216d8f5171d" translate="yes" xml:space="preserve">
          <source>Create an array of &lt;code&gt;T&lt;/code&gt; with &lt;code&gt;length&lt;/code&gt; elements using &lt;code&gt;alloc&lt;/code&gt;. The array is either default-initialized, filled with copies of &lt;code&gt;init&lt;/code&gt;, or initialized with values fetched from &lt;code&gt;range&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="526001f9a9b94b9fd00bba4fb0e338ddc47b01cf" translate="yes" xml:space="preserve">
          <source>Create an array of &lt;code&gt;T&lt;/code&gt; with &lt;code&gt;length&lt;/code&gt; elements. The array is either default-initialized, filled with copies of &lt;code&gt;init&lt;/code&gt;, or initialized with values fetched from &lt;code&gt;range&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afd41877e2d03683b62c3966d07b3578b44fa83c" translate="yes" xml:space="preserve">
          <source>Create an array of enumerated values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d624d8319aaa043a0e0bcda5eb8c6692ae1c99ad" translate="yes" xml:space="preserve">
          <source>Create an array of random numbers using range functions and UFCS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14ef15a3d735dc58c104a58836a40a871675370e" translate="yes" xml:space="preserve">
          <source>Create an identifier in the string table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f15bb6174bb0ae0102d8f77548b958b264eca0f" translate="yes" xml:space="preserve">
          <source>Create inclusive destructor for struct/class by aggregating all the destructors in dtors[] with the destructors for all the members.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06412ef3cdbe60fb294e12eeae1a8f44ed3439af" translate="yes" xml:space="preserve">
          <source>Create inclusive invariant for struct/class by aggregating all the invariants in invs[]. void __invariant() const [pure nothrow @trusted] { invs[0](), invs[1](), ...; }</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86c9df773642e6041f2232b04da0147162423a70" translate="yes" xml:space="preserve">
          <source>Create instance of Object represented by 'this'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f91dcf5e8a8544b29b8c109ab40e97ebba994da" translate="yes" xml:space="preserve">
          <source>Create instance of class specified by the fully qualified name classname. The class must either have no constructors or have a default constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aae95e6ec02b6e5eb22379134870bf1f1adbec6" translate="yes" xml:space="preserve">
          <source>Create link to existing list, that is, share the list with somebody else.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeec46bd186170bc95905007868367a92e1a1373" translate="yes" xml:space="preserve">
          <source>Create reference to s+offset</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e69371dea3bc5d5b1ce101edd514aa4b5a3a2c33" translate="yes" xml:space="preserve">
          <source>Create the static initializer for the struct/class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2c8a09dc1433291cd9bc6fd5786498693b64e21" translate="yes" xml:space="preserve">
          <source>CreateFolder &lt;code&gt;createFileNameFolder&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e34f80c232756fb185e577f5d37547da03fc5dc5" translate="yes" xml:space="preserve">
          <source>Creates a &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; from a string with the format YYYY-MM-DD. Whitespace is stripped from the given string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddc6e946bb7d665d5d024eddf994d6bb9a983bdc" translate="yes" xml:space="preserve">
          <source>Creates a &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; from a string with the format YYYY-Mon-DD. Whitespace is stripped from the given string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0e20c926289335859e6d97ff01950b27ec62dd2" translate="yes" xml:space="preserve">
          <source>Creates a &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; from a string with the format YYYYMMDD. Whitespace is stripped from the given string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3091af4b2ee859443ab3c8a53bebcda60ddb979" translate="yes" xml:space="preserve">
          <source>Creates a &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; from a string with the format YYYY-MM-DDTHH:MM:SS. Whitespace is stripped from the given string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3041e4d81e36a466d1e51fa044e13c66f2d70792" translate="yes" xml:space="preserve">
          <source>Creates a &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; from a string with the format YYYY-Mon-DD HH:MM:SS. Whitespace is stripped from the given string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dbacf39bfced8fa82e9ebe4c805f56fa4355100" translate="yes" xml:space="preserve">
          <source>Creates a &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; from a string with the format YYYYMMDDTHHMMSS. Whitespace is stripped from the given string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89d6b000a1e0072815008260d5751f430cc1bc5b" translate="yes" xml:space="preserve">
          <source>Creates a &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; from a string with the format YYYY-MM-DD HH:MM:SS.FFFFFFFTZ (where F is fractional seconds is the time zone). Whitespace is stripped from the given string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25e0e1d4a091ccac9d256e34e9f9ae4e5842e2bf" translate="yes" xml:space="preserve">
          <source>Creates a &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; from a string with the format YYYY-MM-DDTHH:MM:SS.FFFFFFFTZ (where F is fractional seconds is the time zone). Whitespace is stripped from the given string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbfa00e601500f8abcab6f8903eca2c36e737ac4" translate="yes" xml:space="preserve">
          <source>Creates a &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; from a string with the format YYYYMMDDTHHMMSS.FFFFFFFTZ (where F is fractional seconds is the time zone). Whitespace is stripped from the given string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b213f5d28de923b7220902c1697934db1c8f60d3" translate="yes" xml:space="preserve">
          <source>Creates a &lt;a href=&quot;#TimeOfDay&quot;&gt;&lt;code&gt;TimeOfDay&lt;/code&gt;&lt;/a&gt; from a string with the format HH:MM:SS. Whitespace is stripped from the given string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96b1a32d19336613b876dcd9a105f13defae7bd7" translate="yes" xml:space="preserve">
          <source>Creates a &lt;a href=&quot;#TimeOfDay&quot;&gt;&lt;code&gt;TimeOfDay&lt;/code&gt;&lt;/a&gt; from a string with the format HHMMSS. Whitespace is stripped from the given string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="661f5e4bfc4e5c0b2feb77d82f632d60d90264a2" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;BitArray&lt;/code&gt; from a &lt;code&gt;bool&lt;/code&gt; array, such that &lt;code&gt;bool&lt;/code&gt; values read from left to right correspond to subsequent bits in the &lt;code&gt;BitArray&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75f1a094795d835c2e6c032e474ae4ed7954f131" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;BitArray&lt;/code&gt; from the raw contents of the source array. The source array is not copied but simply acts as the underlying array of bits, which stores data as &lt;code&gt;size_t&lt;/code&gt; units.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91bf27933374868d67d5fe77c4446e5f6d88a641" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Task&lt;/code&gt; on the GC heap that calls a function pointer, delegate, or class/struct with overloaded opCall.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4058ec66257ae48d3c3078de7f6e641a360c7cb" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Task&lt;/code&gt; on the GC heap that calls an alias. This may be executed via &lt;code&gt;Task.executeInNewThread&lt;/code&gt; or by submitting to a &lt;a href=&quot;std_parallelism#TaskPool&quot;&gt;&lt;code&gt;std.parallelism.TaskPool&lt;/code&gt;&lt;/a&gt;. A globally accessible instance of &lt;code&gt;TaskPool&lt;/code&gt; is provided by &lt;a href=&quot;std_parallelism#taskPool&quot;&gt;&lt;code&gt;std.parallelism.taskPool&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34e4d8ddfca04c3316cc068b4800ba69aa18ecdf" translate="yes" xml:space="preserve">
          <source>Creates a Condition variable analog for signaling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c859ea4adbfacacaab358299326fde8ee39270d1" translate="yes" xml:space="preserve">
          <source>Creates a Lexer for the source code base[begoffset..endoffset+1]. The last character, base[endoffset], must be null (0) or EOF (0x1A).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4043d1c472260058ff2b44188bce91464289418" translate="yes" xml:space="preserve">
          <source>Creates a bitfield pack of eight bits, which fit in one &lt;code&gt;ubyte&lt;/code&gt;. The bitfields are allocated starting from the least significant bit, i.e. x occupies the two least significant bits of the bitfields storage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22e271cc711a759e645164a6c0eb60bcdf7daa84" translate="yes" xml:space="preserve">
          <source>Creates a container of type &lt;code&gt;C&lt;/code&gt; from either another container or a range. The created container must not be a null reference even if x is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c88b30b91f6883b933e7785db39c6a543b98bd1" translate="yes" xml:space="preserve">
          <source>Creates a copy of a &lt;a href=&quot;#Tuple&quot;&gt;&lt;code&gt;Tuple&lt;/code&gt;&lt;/a&gt; with its fields in reverse order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eafa6a0f5a2c3f7d41c7a2a8061125f06fba9dbe" translate="yes" xml:space="preserve">
          <source>Creates a forward range whose values are defined by a mathematical recurrence relation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f24557243bfa5bfdcb62b5e9b12d22b154537901" translate="yes" xml:space="preserve">
          <source>Creates a function that binds the first argument of a given function to a given value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb183c0a9d71fad3327428b4e288c762c0601c56" translate="yes" xml:space="preserve">
          <source>Creates a function that caches its result for fast re-evaluation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca671f44e7aaeac35a6537c07507991cbe066f68" translate="yes" xml:space="preserve">
          <source>Creates a function that negates another.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cde91551966a8c3538a557aa7e1f65e48ffab5da" translate="yes" xml:space="preserve">
          <source>Creates a hash of this &lt;code&gt;Tuple&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0adb30e0283a4af18094accba2f9b8d4adae66b8" translate="yes" xml:space="preserve">
          <source>Creates a mathematical sequence given the initial values and a recurrence function that computes the next value from the existing values. The sequence comes in the form of an infinite forward range. The type &lt;code&gt;Recurrence&lt;/code&gt; itself is seldom used directly; most often, recurrences are obtained by calling the function &lt;code&gt;recurrence&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96ee19dd76d73d769afaaa909687c75babff0184" translate="yes" xml:space="preserve">
          <source>Creates a new Condition variable analog which is used to check for and to signal the addition of messages to a thread's message queue. Like yield, some schedulers may need to define custom behavior so that calls to Condition.wait() yield to another thread when no new messages are available instead of blocking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a031f47a97f06dd1d0df403626203b69d541f12c" translate="yes" xml:space="preserve">
          <source>Creates a new Condition variable. No custom behavior is needed here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="124555a8b0f648fe1d012d276d753c0d19322a5b" translate="yes" xml:space="preserve">
          <source>Creates a new array out of several copies of an input array or range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c29b4591a6c00e3151f27e3a3a0216407411dd7f" translate="yes" xml:space="preserve">
          <source>Creates a new array such that the items in &lt;code&gt;slice&lt;/code&gt; are replaced with the items in &lt;code&gt;replacement&lt;/code&gt;. &lt;code&gt;slice&lt;/code&gt; and &lt;code&gt;replacement&lt;/code&gt; do not need to be the same length. The result will grow or shrink based on the items given.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3890727bd831b1cb6c012e4c91606c3ef658c4a3" translate="yes" xml:space="preserve">
          <source>Creates a new array which is identical to &lt;code&gt;s&lt;/code&gt; except that all of its characters are converted to lowercase (by preforming Unicode lowercase mapping). If none of &lt;code&gt;s&lt;/code&gt; characters were affected, then &lt;code&gt;s&lt;/code&gt; itself is returned if &lt;code&gt;s&lt;/code&gt; is a &lt;code&gt;string&lt;/code&gt;-like type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e9c86b82c6b1fb66dd08cc61c38a1b079756d54" translate="yes" xml:space="preserve">
          <source>Creates a new curl session handle with the same options set for the handle passed in. Duplicating a handle could only be a matter of cloning data and options, internal state info and things like persistant connections cannot be transfered. It is useful in multithreaded applications when you can run curl_easy_duphandle() for each new thread to avoid a series of identical curl_easy_setopt() invokes in every thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60a4fea607c23225fa400ed6c857bae74cd299af" translate="yes" xml:space="preserve">
          <source>Creates a new function call expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2112334d42e17720c661c805ce3324b558dd51cb" translate="yes" xml:space="preserve">
          <source>Creates a new instance of Error. The nextInChain parameter is used internally and should always be &lt;code&gt;null&lt;/code&gt; when passed by user code. This constructor does not automatically throw the newly-created Error; the &lt;code&gt;throw&lt;/code&gt; statement should be used for that purpose.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29ef1c3bd126426d443d7475b7ad71d8d8c5679c" translate="yes" xml:space="preserve">
          <source>Creates a new instance of Exception. The nextInChain parameter is used internally and should always be &lt;code&gt;null&lt;/code&gt; when passed by user code. This constructor does not automatically throw the newly-created Exception; the &lt;code&gt;throw&lt;/code&gt; statement should be used for that purpose.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75f34c3d414f8f4a0b73cf72e2fb0126aa145b92" translate="yes" xml:space="preserve">
          <source>Creates a new kernel thread and assigns it to run the supplied op.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d99a8a851fc71224c4095d3dc8c906d38b101b8" translate="yes" xml:space="preserve">
          <source>Creates a new static array from given data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecd36a22428e9994d09134717eafec38a89d2e58" translate="yes" xml:space="preserve">
          <source>Creates a pair of connected sockets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19f224f0cad04c0c9a5314d50caf1aa975093e9d" translate="yes" xml:space="preserve">
          <source>Creates a proxy for the value &lt;code&gt;a&lt;/code&gt; that will forward all operations while disabling implicit conversions. The aliased item &lt;code&gt;a&lt;/code&gt; must be an &lt;b&gt;lvalue&lt;/b&gt;. This is useful for creating a new type from the &quot;base&quot; type (though this is &lt;b&gt;not&lt;/b&gt; a subtype-supertype relationship; the new type is not related to the old type in any way, by design).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="facab5397d905340fc2ff34e036fe91a505cf570" translate="yes" xml:space="preserve">
          <source>Creates a random-access range consisting of exactly the first element of the given range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="491697895d99be2bf8ff4cd9ed471190dfadb752" translate="yes" xml:space="preserve">
          <source>Creates a random-access range consisting of zero elements of the given range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f69619e79d80e1df263dcf9dbcb2c394594c350" translate="yes" xml:space="preserve">
          <source>Creates a range by successive calls to a given function. This allows to create ranges as a single delegate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="167e3b6167defb5f50874936631196fc03fabc4e" translate="yes" xml:space="preserve">
          <source>Creates a range consisting of numbers between a starting point and ending point, spaced apart by a given interval.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="095bb16dbe08643123728b96d2a088f28e3da974" translate="yes" xml:space="preserve">
          <source>Creates a range of values that span the given starting and stopping values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c95f11a9b28c359aba0cb5384ce5aea65f8856bc" translate="yes" xml:space="preserve">
          <source>Creates a range that consists of a single element repeated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fa647cca40fc0069485c0e4600015ae305d64f8" translate="yes" xml:space="preserve">
          <source>Creates a range that iterates over the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="119d886f6f9141897a559c5bf0cae6c375d23ffa" translate="yes" xml:space="preserve">
          <source>Creates a range that iterates over the first elements of the given ranges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3797332557503d8df3a90878b6a631d088b9e66" translate="yes" xml:space="preserve">
          <source>Creates a range that iterates over the given arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27a319945d62e58889db17071829a24459cceffe" translate="yes" xml:space="preserve">
          <source>Creates a range that offers a view of a given range as though its elements were reordered according to a given range of indices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f505e45463d22852e5431617427809b2bc561947" translate="yes" xml:space="preserve">
          <source>Creates a range that returns a fixed-size sliding window over the original range. Unlike chunks, it advances a configurable number of items at a time, not one chunk at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2da09b0362ffc9ff9f92b609fc490c7a66e9f7b" translate="yes" xml:space="preserve">
          <source>Creates a range that returns a number of chunks of approximately equal length from the original range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3774ff477392cd2c3383bbfc03f5d68150b2336" translate="yes" xml:space="preserve">
          <source>Creates a range that returns fixed-size chunks of the original range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d113436e57d2b2729c85287cfeed4bd50c9facf" translate="yes" xml:space="preserve">
          <source>Creates a range that wraps a given range, forwarding along its elements while also calling a provided function with each element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7977beaa2aaf3f6cc573dcadaf85a1c0d137ad7" translate="yes" xml:space="preserve">
          <source>Creates a scalable &lt;code&gt;AllocatorList&lt;/code&gt; of &lt;code&gt;Regions&lt;/code&gt;, each having at least &lt;code&gt;bytesPerRegion&lt;/code&gt; bytes. Allocation is very fast. This allocator does not offer &lt;code&gt;deallocate&lt;/code&gt; but does free all regions in its destructor. It is recommended for short-lived batch applications that count on never running out of memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f435c0e7fa6220851faf44b48ca047ab20cefcb" translate="yes" xml:space="preserve">
          <source>Creates a separate index for a range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd006c74f19abaa4a0761b1b7efaf29942f86da3" translate="yes" xml:space="preserve">
          <source>Creates a sequence of zero or more aliases. This is most commonly used as template parameters or arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40566702e6ad921ff558ff9ca4d1037811d09aae" translate="yes" xml:space="preserve">
          <source>Creates a sub-range consisting of only up to the first</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="469d599d62d1c2fd391700f6a0c78d2089510708" translate="yes" xml:space="preserve">
          <source>Creates a symbolic link (symlink).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="802b8df3eba4f0a49c5a4217df7e199c969ce5ad" translate="yes" xml:space="preserve">
          <source>Creates a unidirectional pipe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf8f38539d3338ea07ae1f542a53a2838ccaf683" translate="yes" xml:space="preserve">
          <source>Creates an &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; set up to parse one line at a time from the file into a tuple.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3561d870353a64c33492bae1227a4b54a7562e97" translate="yes" xml:space="preserve">
          <source>Creates an &lt;code&gt;AliasSeq&lt;/code&gt; which repeats &lt;code&gt;TList&lt;/code&gt; exactly &lt;code&gt;n&lt;/code&gt; times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8204b9ea20ad3e99dc18dafe9f5966a149ef25a0" translate="yes" xml:space="preserve">
          <source>Creates an empty range from the given range in &amp;Omicron;(&lt;code&gt;1&lt;/code&gt;). If it can, it will return the same range type. If not, it will return &lt;code&gt;takeExactly(range, 0)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98c208a0fd5b7f2985b53749917bb319ab1b4a0f" translate="yes" xml:space="preserve">
          <source>Creates an event object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fc3668b0b3ac61f1c2ccf2f6e391f909fb421a6" translate="yes" xml:space="preserve">
          <source>Creates an infinite range that repeats the given forward range indefinitely. Good for implementing circular buffers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcde82886bef2cfc57fa138c18fa3fe6f213ba99" translate="yes" xml:space="preserve">
          <source>Creates an instance of worker-local storage, initialized with a given value. The value is &lt;code&gt;lazy&lt;/code&gt; so that you can, for example, easily create one instance of a class for each worker. For usage example, see the &lt;code&gt;WorkerLocalStorage&lt;/code&gt; struct.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be1b805e9512fab0c82226f8469579575b03085d" translate="yes" xml:space="preserve">
          <source>Creates an lvalue or rvalue of type &lt;code&gt;T&lt;/code&gt; for &lt;code&gt;typeof(...)&lt;/code&gt; and &lt;code&gt;__traits(compiles, ...)&lt;/code&gt; purposes. No actual value is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaebf9f2d50b56a9272662e3ba187103b8fd7fb6" translate="yes" xml:space="preserve">
          <source>Creates and returns the hidden parameters for this function declaration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b553ea67f7afbb68b5ef6b9110f190f5fa0d536" translate="yes" xml:space="preserve">
          <source>Creates and starts a new Thread object that executes dg and adds it to the list of tracked threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8465192a47f3a3964b86383849851b3f987af9e" translate="yes" xml:space="preserve">
          <source>Creates and starts a new Thread object that executes fn and adds it to the list of tracked threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f14747fb861d9f57045e9760eebadb571c0f14c" translate="yes" xml:space="preserve">
          <source>Creates the file if it does not already exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e72ff62874af2b080424b1f364475d8251da057" translate="yes" xml:space="preserve">
          <source>Creates the list of modules based on the files provided</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c36b26347d25b74467c336b27111c896866bd305" translate="yes" xml:space="preserve">
          <source>Creates the range that results from discarding exactly</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bc721a88f6358a1f98c1960601822da71eda438" translate="yes" xml:space="preserve">
          <source>Creates the range that results from discarding the first</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4fae2eaf902de2336623c5f44ed9233da515843" translate="yes" xml:space="preserve">
          <source>Creates the range that results from discarding the first element from the given range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8ccf47a3faeae60cbaa6e290f3c7add8d8439e4" translate="yes" xml:space="preserve">
          <source>Creates the range that results from discarding the last</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e26745f992813425c3f6e9ec560904ac5dfc6d56" translate="yes" xml:space="preserve">
          <source>Creates the range that results from discarding the last element from the given range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="702d6feb03374612a47955af68790e7167c2df15" translate="yes" xml:space="preserve">
          <source>Creating Immutable Data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfac50d6424b5166c3ee2808c85ae7c139b5182f" translate="yes" xml:space="preserve">
          <source>Credits</source>
          <target state="translated">Credits</target>
        </trans-unit>
        <trans-unit id="662cb4a2bd7d633921dbca8a7d42f872af7c9656" translate="yes" xml:space="preserve">
          <source>Cs</source>
          <target state="translated">Cs</target>
        </trans-unit>
        <trans-unit id="c2c3639bbe4de0aea10b057ea83de756ef98378f" translate="yes" xml:space="preserve">
          <source>Ctor</source>
          <target state="translated">Ctor</target>
        </trans-unit>
        <trans-unit id="a47b165571b7225fe9e41c496a97f58f335b0c95" translate="yes" xml:space="preserve">
          <source>CtorFlow &lt;code&gt;ctorflow&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2ec2f1f5ce49dd13daec8eee36db1395ae3b43f" translate="yes" xml:space="preserve">
          <source>CtorFlow &lt;strong id=&quot;clone&quot;&gt;clone&lt;/strong&gt;();</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c804c33db286558bb634271d46f72ed27582aa7" translate="yes" xml:space="preserve">
          <source>Cuneiform</source>
          <target state="translated">Cuneiform</target>
        </trans-unit>
        <trans-unit id="45b5a2c7a3a08d60fb826e098c079562c9b73f47" translate="yes" xml:space="preserve">
          <source>Cuneiform Numbers and Punctuation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c04085590ca8e7a54d013972ef35c99a27d5d737" translate="yes" xml:space="preserve">
          <source>Curl &lt;strong id=&quot;dup&quot;&gt;dup&lt;/strong&gt;();</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="773dbcf2918b7b09831a0ed13a940ea3c1ee1fa6" translate="yes" xml:space="preserve">
          <source>CurlCode &lt;strong id=&quot;getTiming&quot;&gt;getTiming&lt;/strong&gt;(CurlInfo timing, ref double val);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2ad2d9e83c0551cb2f717df5892a96ecafc33b4" translate="yes" xml:space="preserve">
          <source>CurlCode &lt;strong id=&quot;perform&quot;&gt;perform&lt;/strong&gt;(ThrowOnError throwOnError = Yes.throwOnError);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be31623169a932d4c6c560d7201b407aa5182a35" translate="yes" xml:space="preserve">
          <source>CurlInfo &lt;code&gt;timing&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12060f8ec6f86ad11a42f46cb52ac099f81f88f5" translate="yes" xml:space="preserve">
          <source>CurlKHType &lt;strong id=&quot;keytype&quot;&gt;keytype&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88902869e96472323a9edc08d7ae406940c970e5" translate="yes" xml:space="preserve">
          <source>CurlOption &lt;code&gt;option&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52b9269b5ed7da7a493a1dbe83846551a4d7568c" translate="yes" xml:space="preserve">
          <source>CurlSeek delegate(long, CurlSeekPos) &lt;code&gt;callback&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37f1460d74729779c053720f8343662b43997475" translate="yes" xml:space="preserve">
          <source>Currency Symbols</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84f9a40ca51da6b15c30fb2dde0fe4ae3193cebf" translate="yes" xml:space="preserve">
          <source>Currency_Symbol</source>
          <target state="translated">Currency_Symbol</target>
        </trans-unit>
        <trans-unit id="1c51a4dec4b6d066a950991a20e81d7204b847ff" translate="yes" xml:space="preserve">
          <source>Current 'state' of the compiler. Used to gather together most global variables. This struct is saved/restored during function body parsing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bb5afa66ef9deeeb65948941312b1da2a80f78e" translate="yes" xml:space="preserve">
          <source>Current items are equal; no editing is necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69802cb8c8d960584abd7b92600c394739df538c" translate="yes" xml:space="preserve">
          <source>Current limitation: Due to &lt;a href=&quot;https://issues.dlang.org/show_bug.cgi?id=11500&quot;&gt;bug #11500&lt;/a&gt;, currently the constructors specified in this mixin cannot be overloaded with any other custom constructors. Thus this mixin can currently only be used when no such custom constructors need to be explicitly specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce942321383836e436083da3460ea976ea73c9cf" translate="yes" xml:space="preserve">
          <source>Currently nested templates can capture at most one context. As a typical example, non-static template member functions cannot take local symbol by using template alias parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff4623ac05dc3913907977438836d2f3c936fb47" translate="yes" xml:space="preserve">
          <source>Currently only supports UTF documents.  If there is an encoding attribute in the prolog, it is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdb34bac47d9c08061ba96d029fe7cfb9cc5802d" translate="yes" xml:space="preserve">
          <source>Currently only works on x86 and Itanium CPUs. Many processors have bugs in their microcode for the CPUID instruction, so sometimes the cache information may be incorrect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfc0dbba909b8d801dfd589ff4ce7238fefbfe4c" translate="yes" xml:space="preserve">
          <source>Currently, only FreeBSD/DragonFlyBSD supports a more precise clock, where it uses &lt;code&gt;CLOCK_MONOTONIC_PRECISE&lt;/code&gt; for the monotonic time and &lt;code&gt;CLOCK_REALTIME_PRECISE&lt;/code&gt; for the wall clock time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="959207731027f2760054a49b8e3de46c08dd6bdd" translate="yes" xml:space="preserve">
          <source>Currently, only Linux and FreeBSD/DragonFlyBSD support a coarser clock, and on other platforms, it's treated as &lt;code&gt;ClockType.normal&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfcc51a98311f46893672f2fb6d173d44d66fc77" translate="yes" xml:space="preserve">
          <source>Custom Page Cache Object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3fc60eff39cb549b6d9c803b4a451eb43428671" translate="yes" xml:space="preserve">
          <source>Custom predicate for comparison of haystack and needle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8a592f320e5a686e3807c060bc9b332dcc6b0b4" translate="yes" xml:space="preserve">
          <source>Custom predicate functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfed9740a3d512ab6d90b0cbc0ffce4c3744006e" translate="yes" xml:space="preserve">
          <source>Custom request, for customizing the get command like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a74881d82849f50f687aa6d7ccfec894be3d7785" translate="yes" xml:space="preserve">
          <source>Customized Base64 encoding schemes can be implemented by instantiating this template with the appropriate arguments. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5edb9626eb87d040db1eb00c7aa5b2c28b0e6650" translate="yes" xml:space="preserve">
          <source>Cycle!R &lt;strong id=&quot;cycle&quot;&gt;cycle&lt;/strong&gt;(R)(R input, size_t index = 0)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d8cafa53ee2c1c0875ad69af202f51945cbe5f0" translate="yes" xml:space="preserve">
          <source>Cycles (circular dependencies) in the import declarations are allowed as long as not both of the modules contain static constructors or static destructors. Violation of this rule will result in a runtime exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="467f7f2e1a32702888fd1652ec31b786fd0b1c0b" translate="yes" xml:space="preserve">
          <source>Cyclic Redundancy Check (32-bit) implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36c9c09d1a88bef7e48da22695dc2c7f51367161" translate="yes" xml:space="preserve">
          <source>Cyclic functions (i.e. functions that wind up directly or indirectly calling themselves) are inferred as being impure, throwing, and @system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5330ddfa4df379999c1bfc18ba91ec4dcf678d1d" translate="yes" xml:space="preserve">
          <source>Cypriot</source>
          <target state="translated">Cypriot</target>
        </trans-unit>
        <trans-unit id="3f15c59d268026cfd87f29afcccbd986a8b120f6" translate="yes" xml:space="preserve">
          <source>Cypriot Syllabary</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cb0955565a00adf2d4dd0f3ab0976a162bd4df5" translate="yes" xml:space="preserve">
          <source>Cyrillic</source>
          <target state="translated">Cyrillic</target>
        </trans-unit>
        <trans-unit id="13cb71dbdc01614be3dd0248e4bab527145b3a0c" translate="yes" xml:space="preserve">
          <source>Cyrillic Extended-A</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e19f6b8db26b5f4584e846a958391e34785c75d" translate="yes" xml:space="preserve">
          <source>Cyrillic Extended-B</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f096016543cf8648b1e0ba5ebd0cde1cb50f3a2" translate="yes" xml:space="preserve">
          <source>Cyrillic Supplement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50c9e8d5fc98727b4bbc93cf5d64a68db647f04f" translate="yes" xml:space="preserve">
          <source>D</source>
          <target state="translated">D</target>
        </trans-unit>
        <trans-unit id="c075a684f58014ba537d34ff9519af0073d068d0" translate="yes" xml:space="preserve">
          <source>D &lt;code&gt;duration&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="420ba6fd12e656eed08bc3686d185ed3d67a02db" translate="yes" xml:space="preserve">
          <source>D &lt;code&gt;lhs&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31ddff47ea2df1a65990ec2b6a0572ffb0107b5b" translate="yes" xml:space="preserve">
          <source>D &lt;code&gt;rhs&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df22aa7a42bde4b06895be25544565774c8fe9f9" translate="yes" xml:space="preserve">
          <source>D &lt;code&gt;td&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ca85edb97301be7fd1849c8854fbc23b8139193" translate="yes" xml:space="preserve">
          <source>D And C Function Prototype Equivalence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3dde59eb8e6d6f854408cbe61a4fbfc9b447911" translate="yes" xml:space="preserve">
          <source>D And C Type Equivalence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4959476e34feab4fd79ecd8a71227840715bd031" translate="yes" xml:space="preserve">
          <source>D And C++ Type Equivalence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86da087c301b2f798d4ba996b708f1700a968709" translate="yes" xml:space="preserve">
          <source>D Code Formatting Macros</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3f23c864026a341662336508bfcf4b56460282f" translate="yes" xml:space="preserve">
          <source>D Grammar</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20fb9b176e61fdbf6fd72a0f9b1c75e432e9363e" translate="yes" xml:space="preserve">
          <source>D Operations That Involve the Garbage Collector</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b1a6b14130ac212af69f729479639b4f6728d35" translate="yes" xml:space="preserve">
          <source>D accomplishes typesafe linking by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8bd85138c80a70ce7a94bdf0dbb9e8c049bd318" translate="yes" xml:space="preserve">
          <source>D allows overloading of the comparison operators &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt; via two functions, &lt;code&gt;opEquals&lt;/code&gt; and &lt;code&gt;opCmp&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="245c88a0d2db8ba44dd302d346881e4a09782dfc" translate="yes" xml:space="preserve">
          <source>D also provides the mechanisms to write code where the garbage collector is &lt;b&gt;not involved&lt;/b&gt;. More information is provided below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="536f3a2ed377e10f64d552c2d73a20c905e02fc9" translate="yes" xml:space="preserve">
          <source>D binding to C++</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19ddf415c5a9aba3800b9f9389ba5483b40b7a2f" translate="yes" xml:space="preserve">
          <source>D binding to C++ std::allocator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31b1546a7311b8038bca2bd20f9fc0ac1391d37a" translate="yes" xml:space="preserve">
          <source>D bindings for standard C headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40b1be27cbfa93ccf74b6920df5a41be8c48c101" translate="yes" xml:space="preserve">
          <source>D can easily call C callbacks (function pointers), and C can call callbacks provided by D code if the callback is an &lt;code&gt;extern(C)&lt;/code&gt; function, or some other linkage that both sides have agreed to (e.g. &lt;code&gt;extern(Windows)&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c470394ce7797205adec8b8a502a172295e638c7" translate="yes" xml:space="preserve">
          <source>D can explicitly manage memory using a variety of library tools, such as with &lt;a href=&quot;https://dlang.org/phobos/std_experimental_allocator.html&quot;&gt;&lt;code&gt;std.experimental.allocator&lt;/code&gt;&lt;/a&gt;. Additionally, &lt;code&gt;core.stdc.stdlib.malloc&lt;/code&gt; and &lt;code&gt;core.stdc.stdlib.free&lt;/code&gt; can be used directly for connecting to C++ functions that expect &lt;code&gt;malloc&lt;/code&gt;'d buffers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5acb9506d75a51ad2e949d226d6eb45b0c67820e" translate="yes" xml:space="preserve">
          <source>D can still explicitly allocate memory using core.stdc.stdlib.malloc() and core.stdc.stdlib.free(), these are useful for connecting to C functions that expect malloc'd buffers, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17e8e7c234c8b135698e2569ad7c740d6032f484" translate="yes" xml:space="preserve">
          <source>D cannot directly call C++ special member functions, and vice versa. These include constructors, destructors, conversion operators, operator overloading, and allocators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fb4b87546a27bc737044f6f7e9773793eda6a11" translate="yes" xml:space="preserve">
          <source>D code can be embedded using lines beginning with at least three hyphens &lt;code&gt;-&lt;/code&gt;, backticks &lt;code&gt;`&lt;/code&gt; or tildes &lt;code&gt;~&lt;/code&gt; (ignoring whitespace) to delineate the code section:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcedc4ea27f9fbbf3eaeba264e973e8baac897d0" translate="yes" xml:space="preserve">
          <source>D code gets automatic syntax highlighting. To include code in another language without syntax highlighting, add a language string at the end of the top delimiter line:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db2576347b92e13d169d9d3a8ec611d68f429441" translate="yes" xml:space="preserve">
          <source>D constrains integral types to specific sizes. But efficiency of different sizes varies from machine to machine, pointer sizes vary, and the maximum integer size varies. &lt;b&gt;stdint&lt;/b&gt; offers a portable way of trading off size vs efficiency, in a manner compatible with the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="507bee50e6e5c4a08c20f7a821523744843dab1d" translate="yes" xml:space="preserve">
          <source>D conventions are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a11c2269497647472aad8b1a5fbcb4adc87a952" translate="yes" xml:space="preserve">
          <source>D does not support bit fields. If needed, they can be emulated with shift and mask operations, or use the &lt;a href=&quot;https://dlang.org/phobos/std_bitmanip.html#bitfields&quot;&gt;std.bitmanip.bitfields&lt;/a&gt; library type. &lt;a href=&quot;https://dlang.org/htod.html&quot;&gt;htod&lt;/a&gt; will convert bit fields to inline functions that do the right shift and masks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10392eddc0ec6cd68606fb4c53a826525a44407e" translate="yes" xml:space="preserve">
          <source>D does not support declaring variables of anonymous struct types. In such a case you can define a named struct in D and make it private:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5ed1c9e2e5b85b71f5da5cc74c0dc2f3e444e1a" translate="yes" xml:space="preserve">
          <source>D exception handling fits right in with that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2996c849bb3b528029f848ec1204d0c07cdcd623" translate="yes" xml:space="preserve">
          <source>D features not available with &lt;b&gt;BetterC&lt;/b&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="883282b9d057cb0d92c679117bdb3b124bb34d24" translate="yes" xml:space="preserve">
          <source>D grammar allows declarations only as statements. However in AST representation it can be part of any expression. This is used, for example, during internal syntax re-writes to inject hidden symbols.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bff43f4fa297f3c093df3b2ac4a91965cf38a6b0" translate="yes" xml:space="preserve">
          <source>D has reference types, but they are implicit. For example, classes are always referred to by reference; this means that class instances can never reside on the stack or be passed as function parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b55a6666e706c8c18a3807c207816e092af0934" translate="yes" xml:space="preserve">
          <source>D has some support for interfacing with Objective-C. It supports classes, subclasses, instance variables, instance and class methods. It is only available on macOS, compiling for 64bit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="121b6728c073450cbfd13591bf64f1dacb90a45f" translate="yes" xml:space="preserve">
          <source>D has types that are not represented in existing C or C++ debuggers. These are dynamic arrays, associative arrays, and delegates. Representing these types as structs causes problems because function calling conventions for structs are often different than that for these types, which causes C/C++ debuggers to misrepresent things. For these debuggers, they are represented as a C type which does match the calling conventions for the type. The &lt;b&gt;dmd&lt;/b&gt; compiler will generate only C symbolic type info with the &lt;b&gt;-gc&lt;/b&gt; compiler switch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d7dc7a95854603cb8d9462f5cc1ad1a152da8c2" translate="yes" xml:space="preserve">
          <source>D header file for C99</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed764989e25528a9844d96827752e35b6e2e9eea" translate="yes" xml:space="preserve">
          <source>D header file for C99.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ad95cc9683672fd46f6a22377da886b23e6e760" translate="yes" xml:space="preserve">
          <source>D header file for interaction with C++ std::array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f35219179c87ed75b46610654f6f3ed6dbd80a3" translate="yes" xml:space="preserve">
          <source>D header file for interaction with C++ std::string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8745691e9f4a9ab07ce82e5bf211832a13541675" translate="yes" xml:space="preserve">
          <source>D header file for interaction with C++ std::string_view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fa30a4a6e6e6ac7b257dba8aee80922db2a59d4" translate="yes" xml:space="preserve">
          <source>D header file for interaction with C++ std::type_traits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e89f07a65806c6e223faa5fc9abe0d71cc5e02bb" translate="yes" xml:space="preserve">
          <source>D header file for interaction with C++ std::vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5824cf94dceeaf8ce80dcdea0f69c87be67a1def" translate="yes" xml:space="preserve">
          <source>D is a general-purpose systems programming language with a C-like syntax that compiles to native code. It is statically typed and supports both automatic (garbage collected) and manual memory management. D programs are structured as modules that can be compiled separately and linked with external libraries to create native libraries or executables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4523654c6ad41f53f1cb538f5b3376ea8b5d67c" translate="yes" xml:space="preserve">
          <source>D is a systems programming language with support for garbage collection. Usually it is not necessary to free memory explicitly. Just allocate as needed, and the garbage collector will periodically return all unused memory to the pool of available memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e55199a6ff4a3d3957959784edcd8f8e4b27511c" translate="yes" xml:space="preserve">
          <source>D is designed to fit comfortably with a C compiler for the target system. D makes up for not having its own VM by relying on the target environment's C runtime library. It would be senseless to attempt to port to D or write D wrappers for the vast array of C APIs available. How much easier it is to just call them directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc6ee9028bb527b99c9d4c56e23cdd8645b43dac" translate="yes" xml:space="preserve">
          <source>D is statically typed. Every expression has a type. Types constrain the values an expression can hold, and determine the semantics of operations on those values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cbe911218e52a81c61994de4956c194b77f145c" translate="yes" xml:space="preserve">
          <source>D language counterpart to C++ std::array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d67cb3c014edbba57daff299226c50e7d26383c4" translate="yes" xml:space="preserve">
          <source>D language counterpart to C++ std::basic_string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41ac364d23fcf29b68564ddbcd4409f706b80280" translate="yes" xml:space="preserve">
          <source>D language counterpart to C++ std::basic_string_view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d7d4857e53f3903d163814c3fd126b718eac23d" translate="yes" xml:space="preserve">
          <source>D makes this simple. All member initializations must be determinable by the compiler at compile time, hence there is no order-of-evaluation dependency for member initializations, and it is not possible to read a value that has not been initialized. Dynamic initialization is performed by a static constructor, defined with a special syntax &lt;code&gt;static this()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="348b41b262e2ee87f7ee9a58be800f10e55e96d7" translate="yes" xml:space="preserve">
          <source>D makes use of the Codeview OEM generic type record indicated by &lt;code&gt;LF_OEM&lt;/code&gt; (0x0015). The format is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f05a7b018a28bc978c0088c176ce00074272430c" translate="yes" xml:space="preserve">
          <source>D programs generally require:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d19d04a51d14b6f326e1ab50d8689f157419398" translate="yes" xml:space="preserve">
          <source>D provides an easy way to call C functions and operating system API functions, as compatibility with both is essential. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b7505970a750559a4a0dcb9c95b55f7ba6c9212" translate="yes" xml:space="preserve">
          <source>D runtime type identification uses completely different techniques than C++. The two are incompatible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f074b4f5342d38c9e4b97593d5d852288629b0d" translate="yes" xml:space="preserve">
          <source>D structs and classes have different semantics whereas C++ structs and classes are basically the same. The use of a D struct or class depends on the C++ implementation and not on the used C++ keyword. When mapping a D &lt;code&gt;class&lt;/code&gt; onto a C++ &lt;code&gt;struct&lt;/code&gt;, use &lt;code&gt;extern(C++, struct)&lt;/code&gt; to avoid linking problems with C++ compilers (notably MSVC) that distinguish between C++'s &lt;code&gt;class&lt;/code&gt; and &lt;code&gt;struct&lt;/code&gt; when mangling. Conversely, use &lt;code&gt;extern(C++, class)&lt;/code&gt; to map a D &lt;code&gt;struct&lt;/code&gt; onto a C++ &lt;code&gt;class&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="413b9f9ee5f4a33c9e8e2c74310bb7e1520feb22" translate="yes" xml:space="preserve">
          <source>D structs and unions are analogous to C's.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0e98f6d2eaf06b89533f60085e7a9609ecffc56" translate="yes" xml:space="preserve">
          <source>D style variadic function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9234fe1a36dd900caaf3d14d414557e453441fe" translate="yes" xml:space="preserve">
          <source>D supports bitfields in the standard library: see &lt;a href=&quot;https://dlang.org/phobos/std_bitmanip.html#bitfields&quot;&gt;&lt;code&gt;std.bitmanip.bitfields&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a3e7acb063a730b948300d255921be3f44a2bd6" translate="yes" xml:space="preserve">
          <source>D symbol identifiers to source representation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63b2085b5ee886bb893b17cc3825c3a7bac6abcc" translate="yes" xml:space="preserve">
          <source>D takes a pragmatic approach that assumes a couple modest accommodations can solve a significant chunk of the problem:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="076ea0cddc7cd8818920bc029904f93dd150a22a" translate="yes" xml:space="preserve">
          <source>D understands how C function names are &quot;mangled&quot; and the correct C function call/return sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfdb702abc09e4bf6af6f33ee84d8a6561bdb436" translate="yes" xml:space="preserve">
          <source>D understands how C++ function names are &quot;mangled&quot; and the correct C++ function call/return sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2ca0b27fd611ef015ce14be30794acd4f9a7076" translate="yes" xml:space="preserve">
          <source>D x86 Inline Assembler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cdfa72ceece084d32cc919a274b9cba8fcd894f" translate="yes" xml:space="preserve">
          <source>D's allocators have a layered structure in both implementation and documentation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6829dc591dc54cea15edb61fe39f95e34f7f3982" translate="yes" xml:space="preserve">
          <source>D's built-in garbage-collected allocator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8187ee85e129e1f90db421cc9a29c74c3da265a" translate="yes" xml:space="preserve">
          <source>D's goals for embedded documentation are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40a87633288b39dd560b9503d0951d9deec4c501" translate="yes" xml:space="preserve">
          <source>D, being a systems programming language, provides an inline assembler. The inline assembler is standardized for D implementations across the same CPU family, for example, the Intel Pentium inline assembler for a Win32 D compiler will be syntax compatible with the inline assembler for Linux running on an Intel Pentium.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f121662d3ed579c4262cd8ee742f37a867894743" translate="yes" xml:space="preserve">
          <source>D-style Variadic Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85f3cd4f9bad02d84690368f648e490c0fb00c1d" translate="yes" xml:space="preserve">
          <source>D-style variadic functions cannot be marked as &lt;code&gt;@safe&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ff8c600ebb573fe27a75c1d69933fce59916bff" translate="yes" xml:space="preserve">
          <source>D.NET</source>
          <target state="translated">D.NET</target>
        </trans-unit>
        <trans-unit id="32d5e09780df47e67febb678521d8abe246ef7f3" translate="yes" xml:space="preserve">
          <source>D1 style operator overloading</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e915cae90d2c29f2358559dc05c3df58595f55d" translate="yes" xml:space="preserve">
          <source>DATETIME</source>
          <target state="translated">DATETIME</target>
        </trans-unit>
        <trans-unit id="1814daa949d9be12578d550487601b3ffb0f3294" translate="yes" xml:space="preserve">
          <source>DCatchBlock</source>
          <target state="translated">DCatchBlock</target>
        </trans-unit>
        <trans-unit id="c35aab27f1f16d077844d1e2e843f5ad7a4d74b4" translate="yes" xml:space="preserve">
          <source>DCatchInfo</source>
          <target state="translated">DCatchInfo</target>
        </trans-unit>
        <trans-unit id="149aac94bd27b95bb54c837312e06b3ff1e01797" translate="yes" xml:space="preserve">
          <source>DELETE, TRACE and others</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed03c1e6eea87bb52507c25ade7ebb2cf71c59b0" translate="yes" xml:space="preserve">
          <source>DEPRECATED: Use &lt;a href=&quot;#reverseArgs&quot;&gt;&lt;code&gt;reverseArgs&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5684aeb3ce6e6bbccefbe8970e6bd7ea5a037735" translate="yes" xml:space="preserve">
          <source>DF &lt;code&gt;f&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c26f4629698733a6034fa75e0b7268c2d40e6d7a" translate="yes" xml:space="preserve">
          <source>DG &lt;code&gt;sink&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fea0a308507e8c0ea8d5406ec3aa47072ac89917" translate="yes" xml:space="preserve">
          <source>DHandlerInfo</source>
          <target state="translated">DHandlerInfo</target>
        </trans-unit>
        <trans-unit id="8ac04a874fab478591710648015b2cab5ac04e7a" translate="yes" xml:space="preserve">
          <source>DHandlerTable</source>
          <target state="translated">DHandlerTable</target>
        </trans-unit>
        <trans-unit id="281b3e844c7c9ebd0f0700420e0eca42f1c07f3d" translate="yes" xml:space="preserve">
          <source>DList &lt;strong id=&quot;opBinary&quot;&gt;opBinary&lt;/strong&gt;(string op, Stuff)(Stuff rhs)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db5bf0255282647c454fa59e6c8c5eb7735233ea" translate="yes" xml:space="preserve">
          <source>DList &lt;strong id=&quot;opBinaryRight&quot;&gt;opBinaryRight&lt;/strong&gt;(string op, Stuff)(Stuff lhs)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25c0b6803c5bf3452395c58abf6779ae685c3351" translate="yes" xml:space="preserve">
          <source>DList &lt;strong id=&quot;opOpAssign&quot;&gt;opOpAssign&lt;/strong&gt;(string op, Stuff)(Stuff rhs)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73220b6fc86e8444477fc3e4a8f1ac57ede8ba51" translate="yes" xml:space="preserve">
          <source>DMD (Digital Mars D) is the compiler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2252ec1f6791e8118b0737f8262fe59003241113" translate="yes" xml:space="preserve">
          <source>DMD's entry point, C main.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20cf49a295826203fca48874eadc25984298220f" translate="yes" xml:space="preserve">
          <source>DMD-generated module &lt;code&gt;__entrypoint&lt;/code&gt; where the C main resides</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a40af10594b1fe393f992683f992876e5b82c830" translate="yes" xml:space="preserve">
          <source>DNS cache timeout</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="839b4d242b27d4e00dc0979927fcbe8223225c0f" translate="yes" xml:space="preserve">
          <source>DNS lookup timeout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05360ae598da60f4c6ea48e2bd59a360ad627b22" translate="yes" xml:space="preserve">
          <source>DOCFILENAME</source>
          <target state="translated">DOCFILENAME</target>
        </trans-unit>
        <trans-unit id="527d9c071bb7a8c959e3b30d96d47f285f9bf286" translate="yes" xml:space="preserve">
          <source>DT &lt;code&gt;tolerance&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24942523bd10801ae5b643487a7c28eba38f21f5" translate="yes" xml:space="preserve">
          <source>Dash</source>
          <target state="translated">Dash</target>
        </trans-unit>
        <trans-unit id="876c81de0c2e26d99cf08d9a14af93e711b19f5c" translate="yes" xml:space="preserve">
          <source>Dash_Punctuation</source>
          <target state="translated">Dash_Punctuation</target>
        </trans-unit>
        <trans-unit id="f4ad2706fa87a802352efdbb422cb64dbe61c91c" translate="yes" xml:space="preserve">
          <source>Data &lt;code&gt;data&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="352953a16a74f0790135416ee3270f630371240c" translate="yes" xml:space="preserve">
          <source>Data Change Notification Callbacks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df6ebe7969c4d5202b832d782941362c6e0cae9d" translate="yes" xml:space="preserve">
          <source>Data Type Compatibility</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="300eccfd0c54c3aa5cc0df22eac803dbe88630e3" translate="yes" xml:space="preserve">
          <source>Data definitions DTibytes 1..7 bytes DTabytes offset of bytes of data a { a data bytes } DTnbytes bytes of data a { a data bytes } a = offset DTazeros # of 0 bytes a DTsymsize same as DTazeros, but the type of the symbol gives the size DTcommon # of 0 bytes (in a common block) a DTxoff offset from symbol w a w = symbol number (pointer for CPP) a = offset DTcoff offset into code segment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5938adc1e4b8fc6c4fa6aeefb38d094858c6ba03" translate="yes" xml:space="preserve">
          <source>Data for a class declaration that is needed for the Objective-C integration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a01abb210c956c2e12e9ccb27efc6f5697b4642" translate="yes" xml:space="preserve">
          <source>Data is shared across threads and the affix follows suit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="775e1e628cf251b049c3fa9bfe1977a634c74e05" translate="yes" xml:space="preserve">
          <source>Data is written to one end of the pipe and read from the other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b510f83fb9e39f1a10ce10e2dd7b90e9a99c4178" translate="yes" xml:space="preserve">
          <source>Data link escape</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09d7927bd586a435c13e162ffd8e2037761ee143" translate="yes" xml:space="preserve">
          <source>Data may be placed into a table. Tables consist of a single header row, a delimiter row, and zero or more data rows. Cells in each row are separated by pipe (&lt;code&gt;|&lt;/code&gt;) characters. Initial and trailing &lt;code&gt;|&lt;/code&gt;'s are optional. The number of cells in the delimiter row must match the number of cells in the header row:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b20bde9629e5c99004ca74941e9b23c3a1df877c" translate="yes" xml:space="preserve">
          <source>Data passed to the progress callback</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc3e0536ab13aed2fb72da353c6d1b107881a065" translate="yes" xml:space="preserve">
          <source>Data pulled from input before finding a problem</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a46a83973f1d5005a51cff8503ad3554d15739dd" translate="yes" xml:space="preserve">
          <source>Data that will never change its value can be typed as immutable. The immutable keyword can be used as a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd76809af8087d8bf86bccfefc1fce2214a3765e" translate="yes" xml:space="preserve">
          <source>Data to HTTP Post</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0be170abfdf228097d8fd04a092e2e686eb56209" translate="yes" xml:space="preserve">
          <source>Data to be swapped with &lt;code&gt;lhs&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4c961498463f7e0d6c406d9c8008486428ab14e" translate="yes" xml:space="preserve">
          <source>Data to be swapped with &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c3a807b2afb3a1c7be0e9b4ae52d8810bae9911" translate="yes" xml:space="preserve">
          <source>Data to copy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dfd2ee1303ec46c31262cfa19e2f7fb06dc1a8b" translate="yes" xml:space="preserve">
          <source>Data to post.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="797bc05b357305e1932e73a7d36b5c5d9e636a5c" translate="yes" xml:space="preserve">
          <source>Data type definition of curl_off_t.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="805e631b2c4331634631ab9d3d378e6f37ae988c" translate="yes" xml:space="preserve">
          <source>Data type mismatch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87ad120a4ba60c79863260e10eca7015248baadd" translate="yes" xml:space="preserve">
          <source>Database Connection For Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f77d22fb96d5dfa5073b2fe8ffcf8caa0f1f055f" translate="yes" xml:space="preserve">
          <source>Database Connection Handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed913bb076648fca64b8de1c707bbce02bda0945" translate="yes" xml:space="preserve">
          <source>Database Connection Status</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74cbb2ae7b134d31108d39d85d470240bf8ec748" translate="yes" xml:space="preserve">
          <source>Database Name NULL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c74d7c4589947e1f0611e10551aa7c9e1f5efa2" translate="yes" xml:space="preserve">
          <source>Database Name Table Name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08868372fcc6df03923ff0a62b6740aab4b59a1d" translate="yes" xml:space="preserve">
          <source>Database lock protocol error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb9a4bc1c0c153e4e4b042a79113b815b7e3021d" translate="yes" xml:space="preserve">
          <source>Date</source>
          <target state="translated">Date</target>
        </trans-unit>
        <trans-unit id="e41c9dca2333fa788b5cf30714ffc607513d2701" translate="yes" xml:space="preserve">
          <source>Date &lt;code&gt;date&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30ef0df6fd820e100e2b862329873127bc101367" translate="yes" xml:space="preserve">
          <source>Date &lt;code&gt;rhs&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0992381fbd2ed819a8d85ebd8c5f3c4e046a291c" translate="yes" xml:space="preserve">
          <source>Date checking</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9a570306f04512676b4ec99a692b20b053ab81b" translate="yes" xml:space="preserve">
          <source>Date conversion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1e5baf5ecc3589631088c40cbdd43061976ed8f" translate="yes" xml:space="preserve">
          <source>DateTime</source>
          <target state="translated">DateTime</target>
        </trans-unit>
        <trans-unit id="7bd0a645e83d6293f2ac658ba2c541a128f65160" translate="yes" xml:space="preserve">
          <source>DateTime &lt;code&gt;dateTime&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50c465a7e603d7f34f3bc92280dabffaa722ae0b" translate="yes" xml:space="preserve">
          <source>DateTime &lt;code&gt;rhs&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="102540d9bb31a7bb0220b673237b8d10f7c7275f" translate="yes" xml:space="preserve">
          <source>David Simcha</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23c1a4a564924c404275ccc90f9032d7bc610cd3" translate="yes" xml:space="preserve">
          <source>Day of a Gregorian Month.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="232f188c18baa6ec73f240c2283edac2e895ead4" translate="yes" xml:space="preserve">
          <source>Day of the month.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="626768dfcc6b9633ecc6a7e7e7bf8195db816514" translate="yes" xml:space="preserve">
          <source>Day of the week this &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; is on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c331185171d5b8b397558aeeba86ec31a95daba4" translate="yes" xml:space="preserve">
          <source>Day of the week this &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; is on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88e734266606869df957a7c0f140482b5dc9240d" translate="yes" xml:space="preserve">
          <source>Day of the week this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; is on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5adf2e7dce3355a8b43b9e02348a4d264604444a" translate="yes" xml:space="preserve">
          <source>Day of the year this &lt;a href=&quot;#Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; is on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8cf70c5944db45b0744da7bbc738777a7ad789e" translate="yes" xml:space="preserve">
          <source>Day of the year this &lt;a href=&quot;#DateTime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; is on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9c83570b5900ee02a21939abef960bd71f7ebe0" translate="yes" xml:space="preserve">
          <source>Day of the year this &lt;a href=&quot;#SysTime&quot;&gt;&lt;code&gt;SysTime&lt;/code&gt;&lt;/a&gt; is on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d217acf15d9c91018c040a87e1a6703ff4783db" translate="yes" xml:space="preserve">
          <source>Day of the year.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5556bda98087587c3fd3795ebf53b124789c5586" translate="yes" xml:space="preserve">
          <source>DayOfWeek &lt;code&gt;currDoW&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f233ca1cd32606c49e90bb687b290b377c3fa09c" translate="yes" xml:space="preserve">
          <source>DayOfWeek &lt;code&gt;dayOfWeek&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe0c0bef273fca4c1fc04dfe682d2fed5f5b8c28" translate="yes" xml:space="preserve">
          <source>DayOfWeek &lt;code&gt;dow&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8064b01fec4de1e986ae9989edb52515cfd892bb" translate="yes" xml:space="preserve">
          <source>Daylight Savings Time flag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86ccd9040e164f6b31eff441e1b4ddc44e72847d" translate="yes" xml:space="preserve">
          <source>Ddoc Section Formatting Macros</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ac46f279a1fa0133478a64489b3104466715043" translate="yes" xml:space="preserve">
          <source>Ddoc can automatically generate usage examples for declarations using unit tests. If a declaration is followed by a documented unit test, the code from the test will be inserted into the example section of the declaration. This avoids the frequent problem of having outdated documentation for pieces of code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c18b6736ff9c9b5405dba716c1075e7224dff8e0" translate="yes" xml:space="preserve">
          <source>Ddoc does not generate HTML code. It formats into the basic formatting macros, which (in their predefined form) are then expanded into HTML. If output other than HTML is desired, then these macros need to be redefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9840b40bb80bed37d395f716bc6b09d4d6c01d5" translate="yes" xml:space="preserve">
          <source>Ddoc is primarily designed for use in producing documentation from embedded comments. It can also, however, be used for processing other general documentation. The reason for doing this would be to take advantage of the macro capability of Ddoc and the D code syntax highlighting capability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fb7c1687832d0818c78d9fb05c4ecb341d15249" translate="yes" xml:space="preserve">
          <source>Deallocates &lt;code&gt;b&lt;/code&gt;, which is assumed to have been previously allocated with this allocator. Deallocation performs a linear search in the free list to preserve its sorting order. It follows that blocks with higher addresses in allocators with many free blocks are slower to deallocate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d01931f745782a57d8fca7493bd853c4a9ddce7" translate="yes" xml:space="preserve">
          <source>Deallocates &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7fadc0e35dabce1bf9846c81d69446d932164cd" translate="yes" xml:space="preserve">
          <source>Deallocates &lt;code&gt;b&lt;/code&gt;. If it's of eligible size, it's put on the free list. Otherwise, it's returned to &lt;code&gt;parent&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dedb91c6fcf841105df2821d7153a890b807f6b" translate="yes" xml:space="preserve">
          <source>Deallocates &lt;code&gt;b&lt;/code&gt;. This works only if &lt;code&gt;b&lt;/code&gt; was obtained as the last call to &lt;code&gt;allocate&lt;/code&gt;; otherwise (i.e. another allocation has occurred since) it does nothing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81959fcf2b1407376d1d5051d3ba64c2b39ce9b1" translate="yes" xml:space="preserve">
          <source>Deallocates &lt;code&gt;b&lt;/code&gt;. This works only if &lt;code&gt;b&lt;/code&gt; was obtained as the last call to &lt;code&gt;allocate&lt;/code&gt;; otherwise (i.e. another allocation has occurred since) it does nothing. This semantics is tricky and therefore &lt;code&gt;deallocate&lt;/code&gt; is defined only if &lt;code&gt;Region&lt;/code&gt; is instantiated with &lt;code&gt;Yes.defineDeallocate&lt;/code&gt; as the third template argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00417f5823644f33bf5edec704252ae474e90607" translate="yes" xml:space="preserve">
          <source>Deallocates a block previously allocated with this allocator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e60dbe0f533b075afd615147044f432f563e90fc" translate="yes" xml:space="preserve">
          <source>Deallocates a memory block. Implementations that don't support this primitive should always return &lt;code&gt;false&lt;/code&gt;. A simple way to check that an allocator supports deallocation is to call &lt;code&gt;deallocate(null)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aecd159fca1c4e67fecc7d26fe360b4f5fa379d" translate="yes" xml:space="preserve">
          <source>Deallocates all memory allocated by this region, which can be subsequently reused for new allocations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29e7515d0b0fa1aa05fab0cdf677555556bd1ab2" translate="yes" xml:space="preserve">
          <source>Deallocates all memory allocated with this allocator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13ee72b94b0c3a01c2b39dc74bddd998b6f54bff" translate="yes" xml:space="preserve">
          <source>Deallocates all memory allocated with this allocator. If an allocator implements this method, it must specify whether its destructor calls it, too.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8b0dd85166c453cf047322a1d701f8f0774ce61" translate="yes" xml:space="preserve">
          <source>Deallocates all memory allocated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc581d2fbe01bbad449340bd78f6d3905d3d52bc" translate="yes" xml:space="preserve">
          <source>Deallocates all memory currently allocated, making the allocator ready for other allocations. This is a &amp;Omicron;(&lt;code&gt;1&lt;/code&gt;) operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="375eb34e6b4c58d529175cc75b6080a5179fa77c" translate="yes" xml:space="preserve">
          <source>Deallocates all memory. Implementations that don't support this primitive should always return &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="693611e2f31c3d686f38d8d59ef91ed8a58f5e60" translate="yes" xml:space="preserve">
          <source>Deallocates everything from the parent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28e790db63e16ffb73cddf977ba22e95426db2d3" translate="yes" xml:space="preserve">
          <source>Deallocates the buffer &lt;code&gt;b&lt;/code&gt; given as parameter. Deallocations take place in constant time, regardless of the number of nodes in the list. &lt;code&gt;b.ptr&lt;/code&gt; is rounded down to the nearest multiple of the &lt;code&gt;alignment&lt;/code&gt; to quickly find the corresponding &lt;code&gt;AlignedBlockNode&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6ed360d4abba38f3529f274c0f497df84327d1f" translate="yes" xml:space="preserve">
          <source>Deallocates the given buffer &lt;code&gt;b&lt;/code&gt;, by atomically setting the corresponding bit to &lt;code&gt;0&lt;/code&gt;. &lt;code&gt;b&lt;/code&gt; must be valid, and cannot contain multiple adjacent &lt;code&gt;blocks&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6756d0c2656d83a2c4a40d0c6c294083d6454148" translate="yes" xml:space="preserve">
          <source>Deallocates the memory referenced by p. If p is null, no action occurs. If p references memory not originally allocated by this garbage collector, if p points to the interior of a memory block, or if this method is called from a finalizer, no action will be taken. The block will not be finalized regardless of whether the FINALIZE attribute is set. If finalization is desired, call &lt;a href=&quot;object#destroy&quot;&gt;&lt;code&gt;destroy&lt;/code&gt;&lt;/a&gt; prior to &lt;code&gt;GC.free&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91420f5f3acdf53b1f959f067447b487323b2d18" translate="yes" xml:space="preserve">
          <source>Deallocation removes any read/write permissions from the target pages and notifies the OS to reclaim the physical memory, while keeping the virtual memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="978410b97d8a330550445ffa9ad9d811af65a9f4" translate="yes" xml:space="preserve">
          <source>Debug Condition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14a5529bad4b06400e8ae61ab912a7cd0d10cc37" translate="yes" xml:space="preserve">
          <source>Debug Specification</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06a1228bc1a2b90a6f69119da7257f1a1ab45207" translate="yes" xml:space="preserve">
          <source>Debug Statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0c2c1850c4f5c7487bbcf707447288586061665" translate="yes" xml:space="preserve">
          <source>Debug identifiers and levels are set either by the command line switch &lt;code&gt;-debug&lt;/code&gt; or by a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2acd488deeb1960df8e4e199af113ed6c4248b5" translate="yes" xml:space="preserve">
          <source>Debug specifications only affect the module they appear in, they do not affect any imported modules. Debug identifiers are in their own namespace, independent from version identifiers and other symbols.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e4e870be69d39ebaf5be79f4a5e8a28e4a8f09b" translate="yes" xml:space="preserve">
          <source>DebugSpecification</source>
          <target state="translated">DebugSpecification</target>
        </trans-unit>
        <trans-unit id="3d2007a7dd8aa1714c20fa92fcc1113b1137a313" translate="yes" xml:space="preserve">
          <source>DebugStatement</source>
          <target state="translated">DebugStatement</target>
        </trans-unit>
        <trans-unit id="54b7fa5fd17a033513aa4603fe16f3295eb20cde" translate="yes" xml:space="preserve">
          <source>DebugStatements</source>
          <target state="translated">DebugStatements</target>
        </trans-unit>
        <trans-unit id="4d93d7d3dbfcebf8261ee800b21d2d60de831b8a" translate="yes" xml:space="preserve">
          <source>DebugSymbol's happen for statements like: debug = identifier; debug = integer;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a30a20c0780e4f65a6fbda30a51368b3ea650aeb" translate="yes" xml:space="preserve">
          <source>Decide if attributes for this function can be inferred from examining the function body.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4c3a2d0cc24a4535ef91791064ffe989cbd382a" translate="yes" xml:space="preserve">
          <source>Decimal</source>
          <target state="translated">Decimal</target>
        </trans-unit>
        <trans-unit id="9e7ef50b518db60d788f6a66f520f096a5520932" translate="yes" xml:space="preserve">
          <source>Decimal Literal Types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a474b82d29231d6f1ccbf54770e91331804b5e39" translate="yes" xml:space="preserve">
          <source>Decimal integers are a sequence of decimal digits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2de80026e02653cd40f376511faf80e503b57dad" translate="yes" xml:space="preserve">
          <source>Decimal_Number</source>
          <target state="translated">Decimal_Number</target>
        </trans-unit>
        <trans-unit id="902215ab9cce221464c82a811ffbf787aae569a5" translate="yes" xml:space="preserve">
          <source>Declaration &lt;code&gt;d&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a9836d7a1f0bfb09fb9f17d77609357ee100d20" translate="yes" xml:space="preserve">
          <source>Declaration Statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d29683a9ffa0394ace63543e28e006b48029722" translate="yes" xml:space="preserve">
          <source>Declaration Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dbd41224edfbe68c7f2bb4f6490fc6955007a5d" translate="yes" xml:space="preserve">
          <source>Declaration of a symbol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4df4d0d514f56b499f06d9d0b79927ecf23d6473" translate="yes" xml:space="preserve">
          <source>Declaration statements define variables, and declare types, templates, functions, imports, conditionals, static foreaches, and static asserts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f167d58fa1936ba9d8b8b66ebb917ff8a385b7fc" translate="yes" xml:space="preserve">
          <source>Declaration syntax generally reads right to left:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f529c46c42bf47385843447380f9083ea85ad933" translate="yes" xml:space="preserve">
          <source>DeclarationBlock</source>
          <target state="translated">DeclarationBlock</target>
        </trans-unit>
        <trans-unit id="5bb823617a62be17e705b335fba5d4aec48eeccc" translate="yes" xml:space="preserve">
          <source>DeclarationExp &lt;code&gt;e&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9b846963186dedc9a34aab11fab9a0a092e2d1b" translate="yes" xml:space="preserve">
          <source>Declarations</source>
          <target state="translated">Declarations</target>
        </trans-unit>
        <trans-unit id="b2d470601a3d4487d9aa450f5db0b4407b71ec6f" translate="yes" xml:space="preserve">
          <source>Declarations appear before the identifier being declared and read right to left, so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="792121f5e5959941aabdee1cc06fb17c681269dd" translate="yes" xml:space="preserve">
          <source>Declarations at module scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="357cee9200ca080c7e1bb92afd3f56d835106b03" translate="yes" xml:space="preserve">
          <source>Declarations for interfacing with the ODBC library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c8080422baab7c5dfd2ef7a7d95733d7d14dbd2" translate="yes" xml:space="preserve">
          <source>Declarations inside &lt;code&gt;BaseClass&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acbd57364da8ec4429f99f9abe1e2cf960f39c4c" translate="yes" xml:space="preserve">
          <source>Declarations inside &lt;code&gt;Foo&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07073b60f0a5c321ba826fabc66323c4ccf44ef5" translate="yes" xml:space="preserve">
          <source>Declarations inside &lt;code&gt;bar&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e39406434fba037956df51d317adc73db26ad763" translate="yes" xml:space="preserve">
          <source>Declarator</source>
          <target state="translated">Declarator</target>
        </trans-unit>
        <trans-unit id="4884a58f8854eaff9e14e4541fa2bfc15e139d8a" translate="yes" xml:space="preserve">
          <source>Declare The Schema Of A Virtual Table</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="789b27945c32aa3b3dc27c3088dc1d56ef533c8f" translate="yes" xml:space="preserve">
          <source>Declare one or more of the functions to be function templates even if they take no specific template arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d589e1ed3e4a83c9e3c689d35e6af4db16cf6a59" translate="yes" xml:space="preserve">
          <source>Declare parameters of template instance, initialize them with the template instance arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8118e66aa0d9891f4571c1ab2494aaa3cdb7a6b" translate="yes" xml:space="preserve">
          <source>Declare result variable lazily.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ce51b37a7f81f5172fdac6a58f02604f2a69530" translate="yes" xml:space="preserve">
          <source>Declare template parameter tp with value o, and install it in the scope sc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13a40c01b2509965e38c4e58bf4f7081ffd728d9" translate="yes" xml:space="preserve">
          <source>Declare the functions inside of a mixin template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a85107bcac12057ef2b3cbc11e112f58d45e3a1d" translate="yes" xml:space="preserve">
          <source>Declare the functions to be static members of a nested struct:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23776085f3b27f84d9591be0a7aa80866f3538fd" translate="yes" xml:space="preserve">
          <source>Declare your own linear congruential engine</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c657d4e9ebee4c198c968bcba7aff6eeab9209c1" translate="yes" xml:space="preserve">
          <source>Declared Datatype Of A Query Result</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71a17a71a9f79cc8bd76ac0e7f0f13c4f0c8db81" translate="yes" xml:space="preserve">
          <source>Declaring an External Class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c0d8f96cd8b374527e48fbd5b4e9fb411f6bca8" translate="yes" xml:space="preserve">
          <source>Declaring an instance variable looks exactly the same as for a regular D class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df50d3b937b66b95438db0baeefd22f2c1fa73b6" translate="yes" xml:space="preserve">
          <source>Decode</source>
          <target state="translated">Decode</target>
        </trans-unit>
        <trans-unit id="dbba0fda2419c5ddfc2c1e2e7bf06860f6436900" translate="yes" xml:space="preserve">
          <source>Decode Signed LEB128.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d4fd06fda3c2f0f209bfb521e76e6c96911badb" translate="yes" xml:space="preserve">
          <source>Decode Unsigned LEB128.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1331e16b2aa86b673e67d5de5aa0667a06e438f1" translate="yes" xml:space="preserve">
          <source>Decode a UTF-16 sequence as a single UTF-32 code point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37b32b5db730690ed79c40536224b996ea9780ef" translate="yes" xml:space="preserve">
          <source>Decode a UTF-8 sequence as a single UTF-32 code point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfd3524c8c563b09008218fac3d408952ffb4b11" translate="yes" xml:space="preserve">
          <source>Decode, and throw exception on error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="406bb62f3f33b8ee5964cf4ecafe3878f9b6291c" translate="yes" xml:space="preserve">
          <source>Decode, but ignore errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3821e20522daad9f57316f912fe1be7b26097318" translate="yes" xml:space="preserve">
          <source>DecodeException if decode fails</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46664e82aa4d152b87c49f64b8c12e4e9f3bfc63" translate="yes" xml:space="preserve">
          <source>DecodeException if mode == DecodeMode.STRICT and decode fails</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f001d418c3a6a2090bdc0efd4a74748a8652ac76" translate="yes" xml:space="preserve">
          <source>DecodeMode &lt;code&gt;mode&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9f9cd86a51b3e2f8f8bb9ccc352699712738757" translate="yes" xml:space="preserve">
          <source>Decoder!Range &lt;strong id=&quot;decoder&quot;&gt;decoder&lt;/strong&gt;(Range)(Range range)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b1bd0df056cc5b05a9c21efd16cacfb012e0aa6" translate="yes" xml:space="preserve">
          <source>Decodes a single code point from the end of a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d5e319e3deb54e40422a2ff80fdffd0d465c77c" translate="yes" xml:space="preserve">
          <source>Decodes a single code point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d605555fd554268d3f7092e4dfd739e804d6e4ff" translate="yes" xml:space="preserve">
          <source>Decodes a single code point. The input does not have to be valid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f95dd9db2c1f3dc7f42ac75e283334b4487f4e0" translate="yes" xml:space="preserve">
          <source>Decodes a string by unescaping all predefined XML entities.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="394691f122913c450c1d979638fefc7f9b4936d9" translate="yes" xml:space="preserve">
          <source>Decodes and returns the code point starting at &lt;code&gt;str[index]&lt;/code&gt;. &lt;code&gt;index&lt;/code&gt; is advanced to one past the decoded code point. If the code point is not well-formed, then a &lt;code&gt;UTFException&lt;/code&gt; is thrown and &lt;code&gt;index&lt;/code&gt; remains unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a966f90f685bee27fa037e2c88b5c7e4eaa16b77" translate="yes" xml:space="preserve">
          <source>Decodes source into a given &lt;a href=&quot;std_range_primitives#isOutputRange&quot;&gt;output range&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49d1787ea4b9bb131d20e33432426cfac5ed8daf" translate="yes" xml:space="preserve">
          <source>Decodes source into newly-allocated buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc99eaa6f996cb24aaa9f16d927e74ca329a6edf" translate="yes" xml:space="preserve">
          <source>Decodes source into the given buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac1d3d72ef820f018eec0cf37be48d3fc07063e8" translate="yes" xml:space="preserve">
          <source>Decodes the URI string encodedURI into a UTF-8 string and returns it. All escape sequences are decoded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="475eb1f0fc19db39961b576c47d3442f49745df2" translate="yes" xml:space="preserve">
          <source>Decodes the URI string encodedURI into a UTF-8 string and returns it. Escape sequences that resolve to reserved URI characters are not replaced. Escape sequences that resolve to the '#' character are not replaced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73e4e91afe8b4f47795484e980cc395b572d9595" translate="yes" xml:space="preserve">
          <source>Decoding (&lt;a href=&quot;#decodeGrapheme&quot;&gt;&lt;code&gt;decodeGrapheme&lt;/code&gt;&lt;/a&gt;) and iteration (&lt;a href=&quot;#byGrapheme&quot;&gt;&lt;code&gt;byGrapheme&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#graphemeStride&quot;&gt;&lt;code&gt;graphemeStride&lt;/code&gt;&lt;/a&gt;) by user-perceived characters, that is by &lt;a href=&quot;#Grapheme&quot;&gt;&lt;code&gt;Grapheme&lt;/code&gt;&lt;/a&gt; clusters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8daa89a5a99e8ec115a0662f2e1660217e62ec8" translate="yes" xml:space="preserve">
          <source>Decommit all physical memory associated with the buffer given as parameter, but keep the range of virtual addresses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b0a363a7d243d250d53b4cbfe3e066f33145e52" translate="yes" xml:space="preserve">
          <source>Decompose</source>
          <target state="translated">Decompose</target>
        </trans-unit>
        <trans-unit id="f696ff6edb97c27479dfeb370594310b979f4fdf" translate="yes" xml:space="preserve">
          <source>Decomposes a Hangul syllable. If &lt;code&gt;ch&lt;/code&gt; is not a composed syllable then this function returns &lt;a href=&quot;#Grapheme&quot;&gt;&lt;code&gt;Grapheme&lt;/code&gt;&lt;/a&gt; containing only &lt;code&gt;ch&lt;/code&gt; as is.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e7b400681f356e884cec054477da6ae1fd30add" translate="yes" xml:space="preserve">
          <source>Decomposing and composing of individual character(s) according to canonical or compatibility rules, see &lt;a href=&quot;#compose&quot;&gt;&lt;code&gt;compose&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#decompose&quot;&gt;&lt;code&gt;decompose&lt;/code&gt;&lt;/a&gt;, including the specific version for Hangul syllables &lt;a href=&quot;#composeJamo&quot;&gt;&lt;code&gt;composeJamo&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#decomposeHangul&quot;&gt;&lt;code&gt;decomposeHangul&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64557b59c3e3b422b56194c79018a7a402df5f75" translate="yes" xml:space="preserve">
          <source>Decompress and return any remaining data. The returned data should be appended to that returned by uncompress(). The UnCompress object cannot be used further.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="758d2baadff9e7263131434184a3f463f60af9a5" translate="yes" xml:space="preserve">
          <source>Decompress the contents of archive member de and return the expanded data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="331e56cb06cb518e2402ea3951b07bb690da1ffd" translate="yes" xml:space="preserve">
          <source>Decompress the data in buf and return the decompressed data. The buffers returned from successive calls to this should be concatenated together.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ea10b070e9d7365e1dfb76f204e09a139b7b4bf" translate="yes" xml:space="preserve">
          <source>Decompresses the data in srcbuf[].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e9abbc6f4724b8e785725d912f2aaa59750275e" translate="yes" xml:space="preserve">
          <source>Decreases the reference count of the concrete class that implements this interface. When the reference count is &lt;code&gt;0&lt;/code&gt;, the object self-destructs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02c806f941459077b10b340cd9632e9a0cb538f5" translate="yes" xml:space="preserve">
          <source>Decrements the internal lock count by one. If this brings the count to zero, the lock is released.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef0d38f738fb21cfe095e1269d745948ad990bfd" translate="yes" xml:space="preserve">
          <source>Deduction from a specialization can provide values for more than one parameter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9d287d865171614d8dedf150d2d0836f7b7edd5" translate="yes" xml:space="preserve">
          <source>Deep interface inheritance causes compile error with messages like &quot;Error: function std.typecons.AutoImplement!(Foo).AutoImplement.bar does not override any function&quot;. [&lt;a href=&quot;https://issues.dlang.org/show_bug.cgi?id=2525&quot;&gt;Bugzilla 2525&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c748de0e8bf8554aeb51f7845528d2e387d7b157" translate="yes" xml:space="preserve">
          <source>Default Initialization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="371d87a5f41a115cc6ae98f15bc16de04539f72f" translate="yes" xml:space="preserve">
          <source>Default Initialization of Structs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="420b1de5ee5bd01f3bccad5941846b453e834c77" translate="yes" xml:space="preserve">
          <source>Default Initialization of Unions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50c0422b1bd3c0cb85a3b10f878811736afd4f6f" translate="yes" xml:space="preserve">
          <source>Default Random Engines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f3b4cf1b282f5e24851d2fc312835e2ee1126a7" translate="yes" xml:space="preserve">
          <source>Default constructor that initializes a &lt;code&gt;TaskPool&lt;/code&gt; with &lt;code&gt;totalCPUs&lt;/code&gt; - 1 worker threads. The minus 1 is included because the main thread will also be available to do work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27d8f5b12b08679fa1ceeb7aa68b26b65ef2045f" translate="yes" xml:space="preserve">
          <source>Default formatting (same as &quot;d&quot;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e96836a37f607443c594efaed093035c05afe38b" translate="yes" xml:space="preserve">
          <source>Default highlighting of all the members of a class, struct, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98f9ae2cc7e4e80454521f2ab1730089e9d6baa9" translate="yes" xml:space="preserve">
          <source>Default namespace from RFC 4122</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c5cd1f0d1dcc8e95ce7f83f2ec37a797706dca3" translate="yes" xml:space="preserve">
          <source>Default parameters are resolved and semantically checked in the context of the function declaration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc75ea9274f6222114e96e9234906962c3ab1c51" translate="yes" xml:space="preserve">
          <source>Default system linkage for the target.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a76b4f3915cc1ec7629202bfab49b91d3e8811c7" translate="yes" xml:space="preserve">
          <source>Default value to use for architecture. Should be &quot;32&quot; or &quot;64&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0471388472434480b398dbbb1b529f53c8403a1a" translate="yes" xml:space="preserve">
          <source>DefaultStatement &lt;strong id=&quot;sdefault&quot;&gt;sdefault&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc406dd5812a1993fbe6a79d3cd9b04e74387b96" translate="yes" xml:space="preserve">
          <source>Default_Ignorable_Code_Point</source>
          <target state="translated">Default_Ignorable_Code_Point</target>
        </trans-unit>
        <trans-unit id="f04a631e5fb8580ab675839a96ca7cd9782ddc95" translate="yes" xml:space="preserve">
          <source>Defaults to &quot;&quot; but can be assigned to prior to calling &lt;code&gt;getopt&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df1395a4ccfcda2ee16159ff05ed2cc4232a297b" translate="yes" xml:space="preserve">
          <source>Defaults to &quot;--&quot; but can be assigned to prior to calling &lt;code&gt;getopt&lt;/code&gt;. Assigning an empty string to &lt;code&gt;endOfOptions&lt;/code&gt; effectively disables it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8aa51945574822bec5dcd1c3efc97549eb710c3f" translate="yes" xml:space="preserve">
          <source>Defaults to '-' but it can be assigned to prior to calling &lt;code&gt;getopt&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9de2851fac6dd53ccefeb661bb98002fd0c199f4" translate="yes" xml:space="preserve">
          <source>Defaults to '=' but can be assigned to prior to calling &lt;code&gt;getopt&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8503b1ebf1456be871732701f4598afac98d9a38" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;Yes.preserveAttributes&lt;/code&gt; on Windows, and the opposite on all other platforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd21e76d6af8f49e1eb6914fb6c49390fd8bd8c1" translate="yes" xml:space="preserve">
          <source>Define &lt;code&gt;XorshiftEngine&lt;/code&gt; generators with well-chosen parameters. See each bits examples of &quot;Xorshift RNGs&quot;. &lt;code&gt;Xorshift&lt;/code&gt; is a Xorshift128's alias because 128bits implementation is mostly used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81847ec7dd3ceb5453d0ee6884a6280e90c956b1" translate="yes" xml:space="preserve">
          <source>Define LinearCongruentialEngine generators with well-chosen parameters. &lt;code&gt;MinstdRand0&lt;/code&gt; implements Park and Miller's &quot;minimal standard&quot; &lt;a href=&quot;http://wikipedia.org/wiki/Park%E2%80%93Miller_random_number_generator&quot;&gt;generator&lt;/a&gt; that uses 16807 for the multiplier. &lt;code&gt;MinstdRand&lt;/code&gt; implements a variant that has slightly better spectral behavior by using the multiplier 48271. Both generators are rather simplistic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a32a694b454b48f0c6093b3ea95bcc7ae1e63ab" translate="yes" xml:space="preserve">
          <source>Define New Collating Sequences</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39097f9cdbdc9c13d9f7924e620c0870a6ab1f2d" translate="yes" xml:space="preserve">
          <source>Define base class for synchronization exceptions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fe6ef7e4374fbc92435a3eb3a1da3f110264323" translate="yes" xml:space="preserve">
          <source>Define when building the standard library</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3531e23462282b88161b0b09c4198f983f8f5d9c" translate="yes" xml:space="preserve">
          <source>Defined if &lt;code&gt;Allocator.deallocate&lt;/code&gt; and &lt;code&gt;Allocator.owns&lt;/code&gt; are defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3e2600e60e43fcc7af73e79b544e721703b0e8b" translate="yes" xml:space="preserve">
          <source>Defined if &lt;code&gt;ParentAllocator.deallocate&lt;/code&gt; exists and forwards to &lt;code&gt;parent.deallocate(b.ptr[0 .. goodAllocSize(b.length)])&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5839c46fd4f57e4f4534cc94d889acf7302900a" translate="yes" xml:space="preserve">
          <source>Defined if &lt;code&gt;ParentAllocator.deallocate&lt;/code&gt; exists, and returns to it all memory held in the free tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae7fc2022dee75f14540e1bb6b89db20bb6af50b" translate="yes" xml:space="preserve">
          <source>Defined if &lt;code&gt;ParentAllocator.deallocateAll&lt;/code&gt; exists, and forwards to it. Also nullifies the free tree (it's assumed the parent frees all memory stil managed by the free tree).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="924b574b2f51f1f91bae0a753d7a3cd5e721d17d" translate="yes" xml:space="preserve">
          <source>Defined if &lt;code&gt;ParentAllocator&lt;/code&gt; defines it. Checks whether the block belongs to this allocator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22d483263bd2221c01661d83bf480b3a1978600e" translate="yes" xml:space="preserve">
          <source>Defined if &lt;code&gt;perCallFlags&lt;/code&gt; is nonzero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80fb3bfe81400b11248d1a55abb8916e94447707" translate="yes" xml:space="preserve">
          <source>Defined if &lt;code&gt;perCallFlags&lt;/code&gt; is nonzero. Iterates all monitored file/line instances. The order of iteration is not meaningful (items are inserted at the front of a list upon the first call), so preprocessing the statistics after collection might be appropriate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af0b04d11e256e5ba5a86b4d6ccc479ac3bb0733" translate="yes" xml:space="preserve">
          <source>Defined if &lt;code&gt;perCallFlags&lt;/code&gt; is nonzero. Outputs (e.g. to a &lt;code&gt;File&lt;/code&gt;) a simple report of the collected per-call statistics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e6aad149de6e35db7818ba9e061e221c789d78e" translate="yes" xml:space="preserve">
          <source>Defined in RFC 4122 document</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74bb7ab73b6be283bed5a27e4f9da6abe208f8a4" translate="yes" xml:space="preserve">
          <source>Defined only if &lt;code&gt;Allocator.deallocateAll&lt;/code&gt; is defined. Affects per instance and per call &lt;code&gt;numDeallocateAll&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="880dd85210629b3db5a46cc41b73cc297fc347f0" translate="yes" xml:space="preserve">
          <source>Defined only if &lt;code&gt;Allocator.expand&lt;/code&gt; is defined. Finds the owner of &lt;code&gt;b&lt;/code&gt; and calls &lt;code&gt;expand&lt;/code&gt; for it. The owner is not brought to the head of the list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="744c61edf3dc2f8cca313264c4f118c38c0b2a22" translate="yes" xml:space="preserve">
          <source>Defined only if &lt;code&gt;Allocator.owns&lt;/code&gt; and &lt;code&gt;Allocator.deallocateAll&lt;/code&gt; are defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fdfa394d06528a596ae4874c40d528d999bfd2b" translate="yes" xml:space="preserve">
          <source>Defined only if &lt;code&gt;Allocator.reallocate&lt;/code&gt; is defined. Finds the owner of &lt;code&gt;b&lt;/code&gt; and calls &lt;code&gt;reallocate&lt;/code&gt; for it. If that fails, calls the global &lt;code&gt;reallocate&lt;/code&gt;, which allocates a new block and moves memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed697f6a88a630666af1c722afd39b1d0f4f4f19" translate="yes" xml:space="preserve">
          <source>Defined only if &lt;code&gt;Allocator&lt;/code&gt; defines &lt;code&gt;owns&lt;/code&gt;. Finds the owner of &lt;code&gt;b&lt;/code&gt; and forwards the call to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0e6bc044e12c4e9611bf3580583040fda29e9b8" translate="yes" xml:space="preserve">
          <source>Defined only if &lt;code&gt;Allocator&lt;/code&gt; defines &lt;code&gt;owns&lt;/code&gt;. Tries each allocator in turn, in most-recently-used order. If the owner is found, it is moved to the front of the list as a side effect under the assumption it will be used soon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e24b737d8be4f0fce227702cdf2d4971d9bd548" translate="yes" xml:space="preserve">
          <source>Defined only if &lt;code&gt;Options.bytesUsed&lt;/code&gt; is defined. Returns &lt;code&gt;bytesUsed == 0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e866186e044949f060cc13ede78f11571f00e878" translate="yes" xml:space="preserve">
          <source>Defined only if &lt;code&gt;ParentAllocator.alignedAllocate&lt;/code&gt; exists. Expansion occurs in place under the conditions required by &lt;code&gt;expand&lt;/code&gt;. Shrinking occurs in place if &lt;code&gt;goodAllocSize(b.length) == goodAllocSize(s)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9de3285d7d12656c0f50a8bc0845b0e3663f1845" translate="yes" xml:space="preserve">
          <source>Defined only if &lt;code&gt;ParentAllocator&lt;/code&gt; defines &lt;code&gt;deallocateAll&lt;/code&gt;. If so, forwards to it and resets the freelist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb02e98056476e0ccf512cbbc349777443611e1f" translate="yes" xml:space="preserve">
          <source>Defined only if &lt;code&gt;parent.alignedAllocate&lt;/code&gt; exists and works similarly to &lt;code&gt;allocate&lt;/code&gt; by forwarding to &lt;code&gt;parent.alignedAllocate(goodAllocSize(n), a)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bdcfae19e6266cb37491298481490d18641857e" translate="yes" xml:space="preserve">
          <source>Defined when building the standard runtime</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8603ace2093f41a5875c31508c40434bf1934d95" translate="yes" xml:space="preserve">
          <source>Defined whether or not &lt;code&gt;Allocator.deallocate&lt;/code&gt; is defined. Affects per instance: &lt;code&gt;numDeallocate&lt;/code&gt;, &lt;code&gt;bytesUsed&lt;/code&gt;, and &lt;code&gt;bytesSlack&lt;/code&gt;. Affects per call: &lt;code&gt;numDeallocate&lt;/code&gt; and &lt;code&gt;bytesContracted&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a10dcb53bbdef9f4f52f70eb8281de857ea0c04d" translate="yes" xml:space="preserve">
          <source>Defined whether or not &lt;code&gt;Allocator.expand&lt;/code&gt; is defined. Affects per instance: &lt;code&gt;numExpand&lt;/code&gt;, &lt;code&gt;numExpandOK&lt;/code&gt;, &lt;code&gt;bytesExpanded&lt;/code&gt;, &lt;code&gt;bytesSlack&lt;/code&gt;, &lt;code&gt;bytesAllocated&lt;/code&gt;, and &lt;code&gt;bytesUsed&lt;/code&gt;. Affects per call: &lt;code&gt;numExpand&lt;/code&gt;, &lt;code&gt;numExpandOK&lt;/code&gt;, &lt;code&gt;bytesExpanded&lt;/code&gt;, and &lt;code&gt;bytesAllocated&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b422af85c74e4035f60d8efe5ab2781d63622be3" translate="yes" xml:space="preserve">
          <source>Defined whether or not &lt;code&gt;Allocator.reallocate&lt;/code&gt; is defined. Affects per instance: &lt;code&gt;numReallocate&lt;/code&gt;, &lt;code&gt;numReallocateOK&lt;/code&gt;, &lt;code&gt; numReallocateInPlace&lt;/code&gt;, &lt;code&gt;bytesNotMoved&lt;/code&gt;, &lt;code&gt;bytesAllocated&lt;/code&gt;, &lt;code&gt; bytesSlack&lt;/code&gt;, &lt;code&gt;bytesExpanded&lt;/code&gt;, and &lt;code&gt;bytesContracted&lt;/code&gt;. Affects per call: &lt;code&gt;numReallocate&lt;/code&gt;, &lt;code&gt;numReallocateOK&lt;/code&gt;, &lt;code&gt;numReallocateInPlace&lt;/code&gt;, &lt;code&gt;bytesNotMoved&lt;/code&gt;, &lt;code&gt;bytesExpanded&lt;/code&gt;, &lt;code&gt;bytesContracted&lt;/code&gt;, and &lt;code&gt;bytesMoved&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e01f0090ee0730f66f1a15b18bea750a3d6fc2b4" translate="yes" xml:space="preserve">
          <source>Defines a Latin2-encoded character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e53ecfaa755cb1d4f19e088a8c9f00a6dbfc490" translate="yes" xml:space="preserve">
          <source>Defines a Windows1250-encoded character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f1903090723311586df4cd37fbdf5f26e67079a" translate="yes" xml:space="preserve">
          <source>Defines a Windows1251-encoded character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cccb5b7d80539ad53bf55ca34e9f94b1953e89a5" translate="yes" xml:space="preserve">
          <source>Defines a Windows1252-encoded character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56254a36f29bce74ac63e1c814d120ccbdcc4a03" translate="yes" xml:space="preserve">
          <source>Defines a reference-counted object containing a &lt;code&gt;T&lt;/code&gt; value as payload.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba5e2fe31df68893adfb9e39176c913b0ab90b13" translate="yes" xml:space="preserve">
          <source>Defines a simple, self-documenting yes/no flag. This makes it easy for APIs to define functions accepting flags without resorting to &lt;code&gt;bool&lt;/code&gt;, which is opaque in calls, and without needing to define an enumerated type separately. Using &lt;code&gt;Flag!&quot;Name&quot;&lt;/code&gt; instead of &lt;code&gt;bool&lt;/code&gt; makes the flag's meaning visible in calls. Each yes/no flag has its own type, which makes confusions and mix-ups impossible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d037c0e93cb77eea8d259e298e9c276dd536788f" translate="yes" xml:space="preserve">
          <source>Defines a total order on all floating-point numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b2fe2f27a3c2be6c4b5a0300512ceb77431cca8" translate="yes" xml:space="preserve">
          <source>Defines a value paired with a distinctive &quot;null&quot; state that denotes the absence of a value. If default constructed, a &lt;code&gt;Nullable!T&lt;/code&gt; object starts in the null state. Assigning it renders it non-null. Calling &lt;code&gt;nullify&lt;/code&gt; can nullify it again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f49f1773a53446e251ede71ac0716adcb46d913" translate="yes" xml:space="preserve">
          <source>Defines an Latin1-encoded character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e57a29ea6d093696ef6c6f7d8afb730e34136a6d" translate="yes" xml:space="preserve">
          <source>Defines an Latin1-encoded string (as an array of &lt;code&gt;immutable(Latin1Char)&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="011886a5161af4c4e37e5385fd27679cc8b830bd" translate="yes" xml:space="preserve">
          <source>Defines an Latin2-encoded string (as an array of &lt;code&gt; immutable(Latin2Char)&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d5cf26107dde7d6c09fcfb638d212a7bf2e12ba" translate="yes" xml:space="preserve">
          <source>Defines an Windows1250-encoded string (as an array of &lt;code&gt; immutable(Windows1250Char)&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8732904f5c920a3848f6eb11eb4689860b73df6" translate="yes" xml:space="preserve">
          <source>Defines an Windows1251-encoded string (as an array of &lt;code&gt; immutable(Windows1251Char)&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4276c26be648ff75c1e818b48f26e071b93fc98" translate="yes" xml:space="preserve">
          <source>Defines an Windows1252-encoded string (as an array of &lt;code&gt; immutable(Windows1252Char)&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97ccdd739d5a34ddd79a07f475bf10a7ea2872af" translate="yes" xml:space="preserve">
          <source>Defines an early termination condition. Receives the current upper and lower bounds on the root. The delegate must return &lt;code&gt;true&lt;/code&gt; when these bounds are acceptable. If this function always returns &lt;code&gt;false&lt;/code&gt;, full machine precision will be achieved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c3a4051688057309dd223cc23bc9904e0d4075a" translate="yes" xml:space="preserve">
          <source>Defines binary operations with overflow checking for any two integral types. The result type obeys the language rules (even when they may be counterintuitive), and &lt;code&gt;overflow&lt;/code&gt; is set if an overflow occurs (including inadvertent change of signedness, e.g. &lt;code&gt;-1&lt;/code&gt; is converted to &lt;code&gt;uint&lt;/code&gt;). Conceptually the behavior is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6275d2a02318e95dbebc22c44c93c7e2829c06d" translate="yes" xml:space="preserve">
          <source>Defines binary operators &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;^^&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; for the case when a built-in numeric or Boolean type is on the left-hand side, and a &lt;code&gt;Checked&lt;/code&gt; instance is on the right-hand side.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deff15ac1ee86ba403037d1ba526c39f22f79b38" translate="yes" xml:space="preserve">
          <source>Defines binary operators &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;^^&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;. If &lt;code&gt;Hook&lt;/code&gt; defines &lt;code&gt;hookOpBinary&lt;/code&gt;, &lt;code&gt;opBinary&lt;/code&gt; forwards to &lt;code&gt; Checked!(typeof(hook.hookOpBinary!op(get, rhs)), Hook)(hook.hookOpBinary!op(get, rhs))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82d51c5b573b12f3ad98f02a60e2594b70eb07ed" translate="yes" xml:space="preserve">
          <source>Defines built-in exception types and low-level language hooks required by the compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e91c153395398611d9ad588b394bf5e23ccda89" translate="yes" xml:space="preserve">
          <source>Defines hooks for binary operators &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;^^&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; for cases where a &lt;code&gt;Checked&lt;/code&gt; object is the left-hand side operand. If &lt;code&gt;lhs == WithNaN.defaultValue!Lhs&lt;/code&gt;, returns &lt;code&gt;WithNaN.defaultValue!(typeof(lhs + rhs))&lt;/code&gt; without evaluating the operand. Otherwise, evaluates the operand. If evaluation does not overflow, returns the result. Otherwise, returns &lt;code&gt;WithNaN.defaultValue!(typeof(lhs + rhs))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4943eeb1bdb96455051418c789cfdb6862bc56c" translate="yes" xml:space="preserve">
          <source>Defines hooks for binary operators &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;^^&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; for cases where a &lt;code&gt;Checked&lt;/code&gt; object is the right-hand side operand. If &lt;code&gt;rhs == WithNaN.defaultValue!Rhs&lt;/code&gt;, returns &lt;code&gt;WithNaN.defaultValue!(typeof(lhs + rhs))&lt;/code&gt; without evaluating the operand. Otherwise, evaluates the operand. If evaluation does not overflow, returns the result. Otherwise, returns &lt;code&gt;WithNaN.defaultValue!(typeof(lhs + rhs))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="344e4af67915b1da0a4f7b2eb4baa46168d0a009" translate="yes" xml:space="preserve">
          <source>Defines hooks for binary operators &lt;code&gt;+=&lt;/code&gt;, &lt;code&gt;-=&lt;/code&gt;, &lt;code&gt;*=&lt;/code&gt;, &lt;code&gt;/=&lt;/code&gt;, &lt;code&gt;%=&lt;/code&gt;, &lt;code&gt;^^=&lt;/code&gt;, &lt;code&gt;&amp;amp;=&lt;/code&gt;, &lt;code&gt;|=&lt;/code&gt;, &lt;code&gt;^=&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;, and &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;=&lt;/code&gt; for cases where a &lt;code&gt;Checked&lt;/code&gt; object is the left-hand side operand. If &lt;code&gt;lhs == WithNaN.defaultValue!Lhs&lt;/code&gt;, no action is carried. Otherwise, evaluates the operand. If evaluation does not overflow and fits in &lt;code&gt;Lhs&lt;/code&gt; without loss of information or change of sign, sets &lt;code&gt;lhs&lt;/code&gt; to the result. Otherwise, sets &lt;code&gt;lhs&lt;/code&gt; to &lt;code&gt;WithNaN.defaultValue!Lhs&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1765c6ae1549ba0f78d30a2ebbb0c0bf7b13cc1d" translate="yes" xml:space="preserve">
          <source>Defines hooks for unary operators &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;~&lt;/code&gt;, &lt;code&gt;++&lt;/code&gt;, and &lt;code&gt;--&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1062f11ecac31d0859fcc7cf5ec29909f863a7eb" translate="yes" xml:space="preserve">
          <source>Defines operators &lt;code&gt;+=&lt;/code&gt;, &lt;code&gt;-=&lt;/code&gt;, &lt;code&gt;*=&lt;/code&gt;, &lt;code&gt;/=&lt;/code&gt;, &lt;code&gt;%=&lt;/code&gt;, &lt;code&gt;^^=&lt;/code&gt;, &lt;code&gt;&amp;amp;=&lt;/code&gt;, &lt;code&gt;|=&lt;/code&gt;, &lt;code&gt;^=&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;, and &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;=&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a84f96c56e07c3c0d4be57b930a8414c37127be8" translate="yes" xml:space="preserve">
          <source>Defines the array's primary range, which is a random-access range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9547918d0ec754aaa9e5611e63002c034456218" translate="yes" xml:space="preserve">
          <source>Defines the array's primary range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25307811d2b650458426086b1231b34b76190751" translate="yes" xml:space="preserve">
          <source>Defines the constants A=0, B=1, C=2, all of type &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5960422815ff02efca0bb0b0bc511d329a4df6b9" translate="yes" xml:space="preserve">
          <source>Defines the container's primary range, which embodies a bidirectional range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfb64e179215d70a5466203268165ded0aa67b71" translate="yes" xml:space="preserve">
          <source>Defines the container's primary range, which embodies a forward range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7704b43cc8447527f7119f9c397053172e452d7c" translate="yes" xml:space="preserve">
          <source>Defines the fastest type to use when storing temporaries of a calculation intended to ultimately yield a result of type &lt;code&gt;F&lt;/code&gt; (where &lt;code&gt;F&lt;/code&gt; must be one of &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, or &lt;code&gt;real&lt;/code&gt;). When doing a multi-step computation, you may want to store intermediate results as &lt;code&gt;FPTemporary!F&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7510c989e941b6308941ea24aee5fb7c86db407f" translate="yes" xml:space="preserve">
          <source>Defines the minimum and maximum. These values are hookable by defining &lt;code&gt;Hook.min&lt;/code&gt; and/or &lt;code&gt;Hook.max&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de7aa10564ec957fefcba6baa79ce725c7abf349" translate="yes" xml:space="preserve">
          <source>Defines the policy used by this mutex. Currently, two policies are defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b305949e5df45bb169d88a908bbe6d1143c90bf8" translate="yes" xml:space="preserve">
          <source>Defines the swapping strategy for algorithms that need to swap elements in a range (such as partition and sort). The strategy concerns the swapping of elements that are not the core concern of the algorithm. For example, consider an algorithm that sorts &lt;code&gt;[ &quot;abc&quot;, &quot;b&quot;, &quot;aBc&quot; ]&lt;/code&gt; according to &lt;code&gt;toUpper(a) &amp;lt; toUpper(b)&lt;/code&gt;. That algorithm might choose to swap the two equivalent strings &lt;code&gt;&quot;abc&quot;&lt;/code&gt; and &lt;code&gt;&quot;aBc&quot;&lt;/code&gt;. That does not affect the sorting since both &lt;code&gt;[&quot;abc&quot;, &quot;aBc&quot;, &quot;b&quot; ]&lt;/code&gt; and &lt;code&gt;[ &quot;aBc&quot;, &quot;abc&quot;, &quot;b&quot; ]&lt;/code&gt; are valid outcomes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ffb8042426740aa5362d442a645d2b525c7e4eb" translate="yes" xml:space="preserve">
          <source>Defines unary operators &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;~&lt;/code&gt;, &lt;code&gt;++&lt;/code&gt;, and &lt;code&gt;--&lt;/code&gt;. Unary &lt;code&gt;+&lt;/code&gt; is not overridable and always has built-in behavior (returns &lt;code&gt;this&lt;/code&gt;). For the others, if &lt;code&gt;Hook&lt;/code&gt; defines &lt;code&gt;hookOpUnary&lt;/code&gt;, &lt;code&gt;opUnary&lt;/code&gt; forwards to &lt;code&gt; Checked!(typeof(hook.hookOpUnary!op(get)), Hook)(hook.hookOpUnary!op(get))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c91bdc265815b43c5de3c96f45a415a58fc03b3a" translate="yes" xml:space="preserve">
          <source>Defines various character sets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91c4c727f1758e45e932ce0db96676cf294ad1a7" translate="yes" xml:space="preserve">
          <source>Defining a Class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="253771ce82d51dcb870328ec077ebadd1937c2b0" translate="yes" xml:space="preserve">
          <source>Defining an Objective-C class is exactly the same as declaring an external class but it should not be declared as &lt;code&gt;extern&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49228588f4c386e959561b07cb41a3da0cc8a81a" translate="yes" xml:space="preserve">
          <source>Definitions and Terms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebbaa67091704824d3f48a282a09651d409aa6bd" translate="yes" xml:space="preserve">
          <source>Definitions from *.ddoc files specified on the command line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a576cd4219d3b8794f54a95b3ea7cef6eaff9c96" translate="yes" xml:space="preserve">
          <source>Definitions from any Macros: sections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56ddc5afa8fef3fcf012921b1f9dae5145cf3f46" translate="yes" xml:space="preserve">
          <source>Definitions from file specified by &lt;a href=&quot;https://dlang.org/dmd-windows.html&quot;&gt;sc.ini&lt;/a&gt;'s or &lt;a href=&quot;https://dlang.org/dmd-linux.html#dmd_conf&quot;&gt;dmd.conf&lt;/a&gt; DDOCFILE setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5248d2cbc097c85b5bf07bd79ad21d3dc04f00b6" translate="yes" xml:space="preserve">
          <source>Definitions of common Byte Order Marks. The elements of the &lt;code&gt;enum&lt;/code&gt; can used as indices into &lt;code&gt;bomTable&lt;/code&gt; to get matching &lt;code&gt;BOMSeq&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7897876db0bd35868da0c36a32fa7a500fda668a" translate="yes" xml:space="preserve">
          <source>Definitions of special attributes recognized by the compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b21b82b54b0a65d096a65a8b2d7349eacef2dd27" translate="yes" xml:space="preserve">
          <source>Deflate algorithm. Use zlib library to compress</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3b60fd736fbc73cf4f2f050a5951f01d10ff552" translate="yes" xml:space="preserve">
          <source>Deinitialize the memory allocator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="718411bfbf8f7d188783f4bac4960c2189d9cac7" translate="yes" xml:space="preserve">
          <source>Deinitializes the global state of the compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="065cfc5102f580580f89796dcd1da1ae87b21082" translate="yes" xml:space="preserve">
          <source>Deinitializes the global variables of the DMD compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35ad6c0b40711e9f140e5814aaeef4e704df85cf" translate="yes" xml:space="preserve">
          <source>Delegate Layout</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d47fb2fb1178c716e771f8849c7c3bc1aa8bb49f" translate="yes" xml:space="preserve">
          <source>Delegate constructor calls cannot appear after labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64b5c80659df5d38b23f9b3191515d8daefe2e21" translate="yes" xml:space="preserve">
          <source>Delegate to call afterwards</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dcccba4f8856a9df41efcf1d5ea4f2cfd327cec" translate="yes" xml:space="preserve">
          <source>Delegates</source>
          <target state="translated">Delegates</target>
        </trans-unit>
        <trans-unit id="3cf9845d1e82b5c764efd1c97377bd5fd9ba42fb" translate="yes" xml:space="preserve">
          <source>Delegates are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16abb00eb4427b3b72f26ec632c009b0430dcf6f" translate="yes" xml:space="preserve">
          <source>Delegates are an aggregate of two pieces of data: an object reference and a pointer to a non-static member function, or a pointer to a closure and a pointer to a nested function. The object reference forms the &lt;code&gt;this&lt;/code&gt; pointer when the function is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aec14b7fdac5fb0ecec8f415ab6eb69aa261acb" translate="yes" xml:space="preserve">
          <source>Delegates are called analogously to function pointers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2558e9f7d9f5526e4364edc3b8db3d61cf86460c" translate="yes" xml:space="preserve">
          <source>Delegates are declared similarly to function pointers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa625441b78d7acde925782444188a7c87208857" translate="yes" xml:space="preserve">
          <source>Delegates are formatted by &lt;code&gt;ReturnType delegate(Parameters) FunctionAttributes&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e1b39ccb37a9961d1255101485bf15889e010ca" translate="yes" xml:space="preserve">
          <source>Delegates are returned with the pointer to the function in EDX and the context pointer in EAX.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="052b6f63bd5851cead5b4c172e8f935a644d89b8" translate="yes" xml:space="preserve">
          <source>Delegates cannot be initialized with static member functions or non-member functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c7d30725d61528bbe87347b21c48cb4af14cdd7" translate="yes" xml:space="preserve">
          <source>Delegates to non-static nested functions contain two pieces of data: the pointer to the stack frame of the lexically enclosing function (called the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df2bc9c8ae8ec095a651df2d9f40d26505be447e" translate="yes" xml:space="preserve">
          <source>Delegates vs interfaces</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d54452ca4b1bb4f12762b945e239935abe5fa967" translate="yes" xml:space="preserve">
          <source>Delegates, Function Pointers, and Closures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c2f909da974c69b9255abf22c4ae5cb45c5d450" translate="yes" xml:space="preserve">
          <source>Delegating the kind of operation to &quot;g&quot; flag is soon to be phased out along with the ability to choose the exact matching scheme. The choice of matching scheme to use depends highly on the pattern kind and can done automatically on case by case basis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6fdbe48dc54dd86f63097a03bd24094dedd713a" translate="yes" xml:space="preserve">
          <source>Delete</source>
          <target state="translated">Delete</target>
        </trans-unit>
        <trans-unit id="65ff71d2eb372c56b3f421a32122f09cb83f3b55" translate="yes" xml:space="preserve">
          <source>Delete Expressions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f55705e486ea8516926708c08c13c9256e8a95e" translate="yes" xml:space="preserve">
          <source>Delete a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="972202c713fa07c93a56a91c10a0682843f3a8e5" translate="yes" xml:space="preserve">
          <source>Delete de from the archive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88fe1a4f86d7d55ef149bd6699c8cb4ae2ad5354" translate="yes" xml:space="preserve">
          <source>Delete entry in AA, return true if it was present</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f7a502591586046031c9af95e9952db392fbf2f" translate="yes" xml:space="preserve">
          <source>Delete exception instance &lt;code&gt;t&lt;/code&gt; from the exception pool. Must have been allocated with &lt;code&gt;_d_newThrowable()&lt;/code&gt;. This is meant to be called at the close of a catch block. It's nothrow because otherwise any function with a catch block could not be nothrow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dfa5a5b1782a414f9933fb08f5b7f16627c244b" translate="yes" xml:space="preserve">
          <source>Delete existing file, write new file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="046b836f5646c2c23db59e441ec8c005c9a8f702" translate="yes" xml:space="preserve">
          <source>Delete file &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9e7b44b2cadf44f0c32b15240292c8452debe64" translate="yes" xml:space="preserve">
          <source>Deleting arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fdf5407bec76f65af9589ccf41be8c79bf847a1" translate="yes" xml:space="preserve">
          <source>Deleting arrays of structs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4254b9286de9f21e4cee34675ef4eebdc65ff8c6" translate="yes" xml:space="preserve">
          <source>Deleting classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed4c149e0b712f4e2bb72b0013511d6f061d5740" translate="yes" xml:space="preserve">
          <source>Deleting interfaces</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae17b3b5e7a92728accc290c8bf686e71c3e3517" translate="yes" xml:space="preserve">
          <source>Deleting structs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be9605dcb1e588f88c8bee392dc7b467d126321c" translate="yes" xml:space="preserve">
          <source>Delimited Strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e387962609f0e1e964c7e568f72f9e7ae3c3956" translate="yes" xml:space="preserve">
          <source>Delimited strings use various forms of delimiters. The delimiter, whether a character or identifer, must immediately follow the &quot; without any intervening whitespace. The terminating delimiter must immediately precede the closing &quot; without any intervening whitespace. A</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dec72453c3798227c53d3e18645cc781f128098" translate="yes" xml:space="preserve">
          <source>Demangle D mangled names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddfd9e8118efdecff8dd2d2af4b014f3b4804c01" translate="yes" xml:space="preserve">
          <source>Demangles D mangled names. If it is not a D mangled name, it returns its argument name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="debfefbb9cba46b7cd15ad0f72aee393c6142eb7" translate="yes" xml:space="preserve">
          <source>Demangles a D mangled type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef35d5b2d9137e56445dcb13b1926641ac1748d1" translate="yes" xml:space="preserve">
          <source>Denis Shelomovskij</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b119328fcf0f1a8506c71d6d5c90a4b602176677" translate="yes" xml:space="preserve">
          <source>Depending on the architecture, compiler flags may be required to activate support for SIMD types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5800c53d5e6610496fae36318de2fc0ee48759c2" translate="yes" xml:space="preserve">
          <source>Depending on the sign, NANs go to either end of the spectrum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eef926e2307412ea5d18dc2f434ab76df97c9426" translate="yes" xml:space="preserve">
          <source>Depending on the struct layout, the compiler may generate the following internal postblit functions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="527600bf0272b6bf3abcb495a99c6ee346bb82b2" translate="yes" xml:space="preserve">
          <source>Deprecated</source>
          <target state="translated">Deprecated</target>
        </trans-unit>
        <trans-unit id="42a66abe1669ce3ffad7695dbe407c22ed591eb2" translate="yes" xml:space="preserve">
          <source>Deprecated Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfc32553e9a3941dedadb9fb40b33e7008f653d9" translate="yes" xml:space="preserve">
          <source>Deprecated Soft Heap Limit Interface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2a248487f391de50bfbecd25bb7aaa1ed569640" translate="yes" xml:space="preserve">
          <source>Deprecated. Please use &lt;a href=&quot;#enforce&quot;&gt;&lt;code&gt;enforce&lt;/code&gt;&lt;/a&gt; instead. This function will be removed 2.089.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c79ea7bd700047cc619e794290dc3e2dc523454" translate="yes" xml:space="preserve">
          <source>Deprecated. Please use &lt;a href=&quot;#round&quot;&gt;&lt;code&gt;round&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b9904893da49653e1dba2c46ecfb0656a693e60" translate="yes" xml:space="preserve">
          <source>DeprecatedAttribute</source>
          <target state="translated">DeprecatedAttribute</target>
        </trans-unit>
        <trans-unit id="ee777837c7008ab314d60ab6340d94b7bb481757" translate="yes" xml:space="preserve">
          <source>Dereferencing a pointer that is not</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0474d0915ec1aafb67985d6471d5cd7b881a0fc7" translate="yes" xml:space="preserve">
          <source>Deregisters the calling thread from use with the runtime. If this routine is called for a thread which is not registered, the result is undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ca49bb05cb1ee30fb0317e206c0b46b922133c6" translate="yes" xml:space="preserve">
          <source>Deregisters the given thread from use with the runtime. If this routine is called for a thread which is not registered, the result is undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="081ea626fb636d13a422e02a8223b6bacf54ed06" translate="yes" xml:space="preserve">
          <source>Derived Data Types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc979d243485252a4a9336b834ea499511e48f35" translate="yes" xml:space="preserve">
          <source>Derived classes inherit any allocator from their base class, if one is not specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecdd58700bf7c79b9590aa6ba4f17a59fdf13cc5" translate="yes" xml:space="preserve">
          <source>Derived classes inherit any deallocator from their base class, if one is not specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01e635f27ec24e2d0be75256adcfabf099c3a6e6" translate="yes" xml:space="preserve">
          <source>Desc</source>
          <target state="translated">Desc</target>
        </trans-unit>
        <trans-unit id="d55435d9dcbb175dba229d196e836af1eeb181cc" translate="yes" xml:space="preserve">
          <source>Describes a back-end target. At present it is incomplete, but in the future it should grow to contain most or all target machine and target O/S specific information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17519f0a081d4de96e9a8327052145d4da388c05" translate="yes" xml:space="preserve">
          <source>Describes how an argument type is passed to a function on target.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="04f0f87cdf30f41863595935bdd7b915c84a0c3d" translate="yes" xml:space="preserve">
          <source>Deseret</source>
          <target state="translated">Deseret</target>
        </trans-unit>
        <trans-unit id="5c22a4f35a8597f537d66c0b77083b1157bffb80" translate="yes" xml:space="preserve">
          <source>Destination string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="839c441dcc29d361bfacf38afa416f18a1637928" translate="yes" xml:space="preserve">
          <source>Destroy A Prepared Statement Object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ac4f537d3b2f32d96a398d33d05ec08395a3c21" translate="yes" xml:space="preserve">
          <source>Destroys and then deallocates (using &lt;code&gt;alloc&lt;/code&gt;) the object pointed to by a pointer, the class object referred to by a &lt;code&gt;class&lt;/code&gt; or &lt;code&gt;interface&lt;/code&gt; reference, or an entire array. It is assumed the respective entities had been allocated with the same allocator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7c2581b265a4916c03d15bb749b173d1a0e008f" translate="yes" xml:space="preserve">
          <source>Destroys and then deallocates (using &lt;code&gt;allocatorFor!T&lt;/code&gt;) the object pointed to by a pointer, the class object referred to by a &lt;code&gt;class&lt;/code&gt; or &lt;code&gt;interface&lt;/code&gt; reference, or an entire array. It is assumed the respective entities had been allocated with the same allocator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="461b0c4ed643cec21e62641f68d242b11940c0e4" translate="yes" xml:space="preserve">
          <source>Destroys and then deallocates a multidimensional array, assuming it was created with makeMultidimensionalArray and the same allocator was used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2ba51b01f5575967e896aa687ec2875a9254daf" translate="yes" xml:space="preserve">
          <source>Destroys and then deallocates an object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f22d78fd51640f5bf6ec9cfaee6fb8da07259389" translate="yes" xml:space="preserve">
          <source>Destroys the given object and optionally resets to initial state. It's used to destroy an object, calling its destructor or finalizer so it no longer references any other objects. It does</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
