<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="en" datatype="htmlbody" original="d">
    <body>
      <group id="d">
        <trans-unit id="3eb34f7d8ff2a61c242722058a753cf673126c48" translate="yes" xml:space="preserve">
          <source>Destructively get the error message from the last constraint evaluation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d01bf1298a3c981415555afc1ef02f440504923" translate="yes" xml:space="preserve">
          <source>Destructively reads and returns the first element of the container. The slot is not removed from the container; it is left initialized with &lt;code&gt;T.init&lt;/code&gt;. This routine need not be defined if &lt;code&gt; front&lt;/code&gt; returns a &lt;code&gt;ref&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9336266e721a28a2d92fc3dbf7f484300407b2c1" translate="yes" xml:space="preserve">
          <source>Destructively reads and returns the last element of the container. The slot is not removed from the container; it is left initialized with &lt;code&gt;T.init&lt;/code&gt;. This routine need not be defined if &lt;code&gt; front&lt;/code&gt; returns a &lt;code&gt;ref&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aac383021a816adb22bea815df65cb001f38245" translate="yes" xml:space="preserve">
          <source>Destructively reads and returns the value at position &lt;code&gt;x&lt;/code&gt;. The slot is not removed from the container; it is left initialized with &lt;code&gt; T.init&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84a4ecd4027e79f4330184a9d5c9d5af4500afab" translate="yes" xml:space="preserve">
          <source>Destructively reads the &lt;code&gt;n&lt;/code&gt;th element in the composite range. Defined if all ranges offer random access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcf6c17f9da73e467a073ac5e6e487e5bdc36429" translate="yes" xml:space="preserve">
          <source>Destructors</source>
          <target state="translated">Destructors</target>
        </trans-unit>
        <trans-unit id="e919ed9bb70a46a3796a19890a326ae3da20095c" translate="yes" xml:space="preserve">
          <source>Destructors are attached to VarDeclarations. Hence, if expression returns a temp that needs a destructor, make sure and create a VarDeclaration for that temp.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e1a2ce60b3d70cf2ae1ff1fc74a1778546c1572" translate="yes" xml:space="preserve">
          <source>Destructors are called when an object goes out of scope. Their purpose is to free up resources owned by the struct object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="733aed473da33e2c79e767b165dc015afa760e13" translate="yes" xml:space="preserve">
          <source>Destructors are used to deallocate resources acquired by an object. For most classes, this resource is allocated memory. With garbage collection, most destructors then become empty and can be discarded entirely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4193705fdcc17dae2da79691a2cff0a2916e3951" translate="yes" xml:space="preserve">
          <source>Destructors will always be executed while other threads are active; that is, an implementation that stops the world must not execute destructors until the world has been resumed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9fe3defe21f65240e63a90d5c97a3f08cb63c9f" translate="yes" xml:space="preserve">
          <source>Detaches from the current file (throwing on failure), and then attempts to open file &lt;code&gt;name&lt;/code&gt; with mode &lt;code&gt;stdioOpenmode&lt;/code&gt;. The mode has the same semantics as in the C standard library &lt;a href=&quot;http://cplusplus.com/reference/clibrary/cstdio/fopen.html&quot;&gt;fopen&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43c99522dee5ed94beb8731d90acc43ed9c784ee" translate="yes" xml:space="preserve">
          <source>Detaches from the current file (throwing on failure), and then runs a command by calling the C standard library function &lt;a href=&quot;http://opengroup.org/onlinepubs/007908799/xsh/popen.html&quot;&gt;popen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd15bb413d37f7450fabf4b76fbb1eddbcbd1e62" translate="yes" xml:space="preserve">
          <source>Detaches from the underlying file. If the sole owner, calls &lt;code&gt;close&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc3decbb93847518f1a049dcf49d0d7c6560bcc6" translate="yes" xml:space="preserve">
          <source>Details</source>
          <target state="translated">Details</target>
        </trans-unit>
        <trans-unit id="542386bcd7c66d08d9518931559ad4e0bf8fae14" translate="yes" xml:space="preserve">
          <source>Detect cases where pointers to the stack can escape the lifetime of the stack frame by being placed into a GC allocated object. Print error messages when these are detected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9076928999f6d4e94fb79f73da0c20fffef0d124" translate="yes" xml:space="preserve">
          <source>Detect cases where pointers to the stack can escape the lifetime of the stack frame by returning &lt;code&gt;e&lt;/code&gt; by value. Print error messages when these are detected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdb923c0534e9e273b6936106d4812cf1cf38b9f" translate="yes" xml:space="preserve">
          <source>Detect cases where pointers to the stack can escape the lifetime of the stack frame when throwing &lt;code&gt;e&lt;/code&gt;. Print error messages when these are detected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="499cb741a25cf7eada5e6336f956dbbc7666650a" translate="yes" xml:space="preserve">
          <source>Detect cases where returning &lt;code&gt;e&lt;/code&gt; by &lt;code&gt;ref&lt;/code&gt; can result in a reference to the stack being returned. Print error messages when these are detected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d6a78255190ec428d4fad5f67efcbbc9ca2974e" translate="yes" xml:space="preserve">
          <source>Detect if type has pointer fields that are initialized to void. Local stack variables with such void fields can remain uninitialized, leading to pointer bugs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54df594c9eb6677b5114796db2da98d1c4d4d452" translate="yes" xml:space="preserve">
          <source>Detect the currently active compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b51b71117c0828c840c8304d87dfac8964b64f84" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is a basic type (scalar type or void).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e78a9491e067ba1200478bea4b6381af182bad4" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is a built-in boolean type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bccc60c97e13b55d2259e4dd661f163277430aaf" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is a built-in floating point type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31e28e8d83f4150e30813b06f2f956381a78adee" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is a built-in integral type. Types &lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;char&lt;/code&gt;, &lt;code&gt;wchar&lt;/code&gt;, and &lt;code&gt;dchar&lt;/code&gt; are not considered integral.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de2d77424008998270c19608961463e73f92c7be" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is a built-in numeric type (integral or floating point).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c65089db015519f052bf159af96861d7372752d" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is a built-in signed numeric type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a490a1efc5fe8f8c15db26ad0b4f95eab8eca53" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is a built-in unsigned numeric type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b38352e7ad6b1a6fbdbccfb9ff4ad51beb73154" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is a callable object, which can be called with the function call operator &lt;code&gt;(...)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d45434827e487a9b6c8f41db71cdd120d62ea9e" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is a final class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f84ba682685f76cbf3408bf575477cd73c6327b" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is a final function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c52ac80711426de7e3c5c1cd6a0a7eb7e94d583" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is a scalar type (a built-in numeric, character or boolean type).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf13c75ae1dde7ee0304af6c7479fae0f687338c" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is a struct, static array, or enum that is implicitly convertible to a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f245b54bbf6f96a3faf317a8a5dca85cbc461ba" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is an abstract class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0b8e4c218376a5ae32d31d3e0a14bdfe6e6a841" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is an abstract function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6b9086f224909a7c2bb4c56aba8c2ed79ca9706" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is an associative array type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c1e7216bbcd9d1c115943f756e4d4417a836a18" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is one of the built-in character types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9077d0a75bafe1b3a2f13d1ff7c468b81df74dc7" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;T&lt;/code&gt; is one of the built-in string types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4922c3a1a7b5dd1ae36c0c326672b28edec6d464" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;X&lt;/code&gt; is a final method or class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="827d13e51ef77f43eb8725193f558f8d3eaf26a4" translate="yes" xml:space="preserve">
          <source>Detect whether &lt;code&gt;X&lt;/code&gt; is a type. Analogous to &lt;code&gt;is(X)&lt;/code&gt;. This is useful when used in conjunction with other templates, e.g. &lt;code&gt;allSatisfy!(isType, X)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faf576f5d93ef682672e5244af28e0c3228a1ea4" translate="yes" xml:space="preserve">
          <source>Detect whether an enum is of integral type and has only &quot;flag&quot; values (i.e. values with a bit count of exactly 1). Additionally, a zero value is allowed for compatibility with enums including a &quot;None&quot; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55ab7e461b66e319d8943fcc41de661d483907b2" translate="yes" xml:space="preserve">
          <source>Detect whether symbol or type &lt;code&gt;T&lt;/code&gt; is a delegate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="064b283bb793e2f13ffab06a0541e23b98aa996d" translate="yes" xml:space="preserve">
          <source>Detect whether symbol or type &lt;code&gt;T&lt;/code&gt; is a function pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b905a78d7eaf504e70d41bac2fa8c3c5b9742831" translate="yes" xml:space="preserve">
          <source>Detect whether symbol or type &lt;code&gt;T&lt;/code&gt; is a function, a function pointer or a delegate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="674c29e0e2e68606be876cc14e7e5e12719c9857" translate="yes" xml:space="preserve">
          <source>Detect whether symbol or type &lt;code&gt;X&lt;/code&gt; is a function. This is different that finding if a symbol is callable or satisfying &lt;code&gt;is(X == function)&lt;/code&gt;, it finds specifically if the symbol represents a normal function declaration, i.e. not a delegate or a function pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a18e26595656dc21ae2e7aa0da88d7f5461d5ee5" translate="yes" xml:space="preserve">
          <source>Detect whether type &lt;code&gt;T&lt;/code&gt; is a SIMD vector type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6931021a7dd4235c4e43d4024655c4f753d99d87" translate="yes" xml:space="preserve">
          <source>Detect whether type &lt;code&gt;T&lt;/code&gt; is a builtin type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d34991bc4b88a04f0d2dab2f2dc23c8c0accb03" translate="yes" xml:space="preserve">
          <source>Detect whether type &lt;code&gt;T&lt;/code&gt; is a dynamic array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d70edfd1cd99f8159a2db9bad481855617e7d282" translate="yes" xml:space="preserve">
          <source>Detect whether type &lt;code&gt;T&lt;/code&gt; is a narrow string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="891aa6be5a4a83c8eb5f8d718cd4f28085867ec7" translate="yes" xml:space="preserve">
          <source>Detect whether type &lt;code&gt;T&lt;/code&gt; is a pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43cee00a6b779541c408c81e19cef2a386e3e9ef" translate="yes" xml:space="preserve">
          <source>Detect whether type &lt;code&gt;T&lt;/code&gt; is a static array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8ace4bf5df650564f19304d71e5d174e7eb8a72" translate="yes" xml:space="preserve">
          <source>Detect whether type &lt;code&gt;T&lt;/code&gt; is a string that will be autodecoded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c8d24db5f10b60dbce755a6acb2ee42c46f0c75" translate="yes" xml:space="preserve">
          <source>Detect whether type &lt;code&gt;T&lt;/code&gt; is an aggregate type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="231e9d409748bcfba060f2b94a81fb91cefc2633" translate="yes" xml:space="preserve">
          <source>Detect whether type &lt;code&gt;T&lt;/code&gt; is an array (static or dynamic; for associative arrays see &lt;a href=&quot;#isAssociativeArray&quot;&gt;&lt;code&gt;isAssociativeArray&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a570e3de4ebebd703f76578c10d24c5c6e1c0a0b" translate="yes" xml:space="preserve">
          <source>Detects whether &lt;code&gt;T&lt;/code&gt; is a comparable type. Basic types and structs and classes that implement opCmp are ordering comparable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cb93bae74fdeaac6fc236f4e82d733ebb774f3f" translate="yes" xml:space="preserve">
          <source>Determine If A Prepared Statement Has Been Reset</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db966195ad1f618275836e22992513b99d0a007c" translate="yes" xml:space="preserve">
          <source>Determine If An SQL Statement Is Complete</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c26787f0638276ef98ffe28bc01f913ce7cd577e" translate="yes" xml:space="preserve">
          <source>Determine backend tym bits corresponding to MOD</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd50d354bd2da7cac6650d8443206ebc8579e505" translate="yes" xml:space="preserve">
          <source>Determine cost of inlining Expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d999b41f32ac29b623afade74858ca9ac9b9eb82" translate="yes" xml:space="preserve">
          <source>Determine cost of inlining function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b89883ad97d6e0f10f1d04a3963690958709c5b3" translate="yes" xml:space="preserve">
          <source>Determine file name extension as slice of input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4888046c30ec3c0e823a22287f94fe792cc1cee3" translate="yes" xml:space="preserve">
          <source>Determine if 'this' can be implicitly converted to type 'to'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a6a487846cd439c760b867647167d0a43c8efda" translate="yes" xml:space="preserve">
          <source>Determine if 'this' has complete base class information. This is used to detect forward references in covariant overloads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="270a5778fa851b2c65d873ec35c4d21e8814dc94" translate="yes" xml:space="preserve">
          <source>Determine if 'this' is a base class of cd.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fc64d96936ef03185e0f208f0407d2013e22a77" translate="yes" xml:space="preserve">
          <source>Determine if 'this' is a base class of cd. (Actually, if it is an interface supported by cd)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aabd0fe13df1f7a6451f2d0f8cb8e6f3ac45ccb" translate="yes" xml:space="preserve">
          <source>Determine if 'this' is a base class of cd. This is used to detect circular inheritance only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1f9c46d3d7b73954da02f8483e442b459949365" translate="yes" xml:space="preserve">
          <source>Determine if 'this' overrides fd. Return !=0 if it does.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d98d667440fab25729ff393e6749fc6bc7c803a8" translate="yes" xml:space="preserve">
          <source>Determine if &lt;code&gt;this&lt;/code&gt; has a lifetime that lasts past the destruction of &lt;code&gt;v&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9deaf7e3761824d3a560f3a002c9cfc9bbdf30a8" translate="yes" xml:space="preserve">
          <source>Determine if &lt;code&gt;this&lt;/code&gt; is available by walking up the enclosing scopes until a function is found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e7fe93e32fcd42c1ea43251fdd4c08fd9a92cb2" translate="yes" xml:space="preserve">
          <source>Determine if Expression has any side effects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8e1b84bee581482cfd7496a29be083631594f1c" translate="yes" xml:space="preserve">
          <source>Determine if a &lt;code&gt;this&lt;/code&gt; is needed to access &lt;code&gt;d&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="378e53b0c9705af12aa3d20a3dfea2de180d3964" translate="yes" xml:space="preserve">
          <source>Determine if a database is read-only</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fad2fb7deeb5e3b2b95e75834d1bd3d75cd9c9b5" translate="yes" xml:space="preserve">
          <source>Determine if a symbol has a given &lt;a href=&quot;https://dlang.org/spec/attribute.html#uda&quot;&gt;user-defined attribute&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49b7cd6a540b1533843dadd565bc412266929ade" translate="yes" xml:space="preserve">
          <source>Determine if an enclosed &lt;code&gt;break&lt;/code&gt; would apply to this statement, such as if it is a loop or switch statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe4f7fc039e88d4d60f26ff9bde9881e60eed3ee" translate="yes" xml:space="preserve">
          <source>Determine if an enclosed &lt;code&gt;continue&lt;/code&gt; would apply to this statement, such as if it is a loop statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7df92a453270a0ff75e532f40d676ac1a1b29c5c" translate="yes" xml:space="preserve">
          <source>Determine if converting 'this' to 'to' is an identity operation, a conversion to const operation, or the types aren't the same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bb85eefd3529fbadfd10c398a5f02000661a8a5" translate="yes" xml:space="preserve">
          <source>Determine if enum is a special one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0be17bface398896e6fbb5e6eeae1cd6a535fed0" translate="yes" xml:space="preserve">
          <source>Determine if function is a builtin one that we can evaluate at compile time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98a5ca1cdf3c0ffd4595f295d0cd487fbda95cf5" translate="yes" xml:space="preserve">
          <source>Determine if function is a non-static member function that has an implicit 'this' expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed50069e8eef8cb717d09f426afa76da9625f4d4" translate="yes" xml:space="preserve">
          <source>Determine if function needs a static frame pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ac7fdfd8c90918c14e542343cc9f9687a8d9198" translate="yes" xml:space="preserve">
          <source>Determine if function's variables are referenced by a function nested within it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfc2ffe7ef218b7a4686596124702195d226e9be" translate="yes" xml:space="preserve">
          <source>Determine if it is @safe to cast e from tfrom to tto.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f355a69378df7ca91f6d2fd1bab608b14d6b776" translate="yes" xml:space="preserve">
          <source>Determine if operands of binary op can be reversed to fit operator overload.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be30b8b7412fc422b2330bdf9c0a92a776e5ce0e" translate="yes" xml:space="preserve">
          <source>Determine if p points to the rest of an identifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e5281a6c7319e91a2189a41c2ef29a176db9e6a" translate="yes" xml:space="preserve">
          <source>Determine if p points to the start of an identifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="316b506f6acfc382426ee0a988f166b0b6290256" translate="yes" xml:space="preserve">
          <source>Determine if parameter is a lazy array of delegates. If so, return the return type of those delegates. If not, return NULL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cde324315a08ff1fbf62286d3c4e66f069818380" translate="yes" xml:space="preserve">
          <source>Determine if path is absolute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95b5299a192aa44d7a560f633dc8b34f81756716" translate="yes" xml:space="preserve">
          <source>Determine if slot 0 of the vtbl[] is reserved for something else. For class objects, yes, this is where the ClassInfo ptr goes. For COM interfaces, no. For non-COM interfaces, yes, this is where the Interface ptr goes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6020afb22c7f7860bdfff6e4d49cee5acd1140e" translate="yes" xml:space="preserve">
          <source>Determine if slot 0 of the vtbl[] is reserved for something else. For class objects, yes, this is where the classinfo ptr goes. For COM interfaces, no. For non-COM interfaces, yes, this is where the Interface ptr goes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2c73dfba48a96e7f07a8203d457d63f496cd2f8" translate="yes" xml:space="preserve">
          <source>Determine if string is a valid Identifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e40c18902c112b083f5b1bec1e5285cd185cca5e" translate="yes" xml:space="preserve">
          <source>Determine if struct is POD (Plain Old Data).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be392e8a57bd5dab891b2efd8f733e73d8ab6f6a" translate="yes" xml:space="preserve">
          <source>Determine if sym is the 'primary' destructor, that is, the most-aggregate destructor (the one that is defined as _xdtor)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bff0244a23527db485143f875cdc64b133c0e61" translate="yes" xml:space="preserve">
          <source>Determine if t is a struct that has destructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2217bce6f22486903bfc5b61c828563f3e5a8066" translate="yes" xml:space="preserve">
          <source>Determine if t is a struct that has postblit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3729f2949c876b2a955a596117188b2288de9c2" translate="yes" xml:space="preserve">
          <source>Determine if template instance is really a template function, and that template function needs to infer types from the function arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fce7a1efc6ef0138c637fced312783604e90c9f1" translate="yes" xml:space="preserve">
          <source>Determine if the call of f, or function type or delegate type t1, has any side effects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="736a23aad28d59a837cc0c93fc2977a227e17fff" translate="yes" xml:space="preserve">
          <source>Determine if this symbol is only one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fc16966011442d5b9df75d427210aafdacf2a82" translate="yes" xml:space="preserve">
          <source>Determine if too expensive to inline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e99f6262aa8845662506231314521688e8fe7455" translate="yes" xml:space="preserve">
          <source>Determine if type t can be indexed or sliced given that it is not an aggregate with operator overloads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4724821c4fcf2478ae2d717f41aa91b34098b11" translate="yes" xml:space="preserve">
          <source>Determine if type t is copyable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a624a8e85f794e2b9a00a2c6869bf76e1171cc66" translate="yes" xml:space="preserve">
          <source>Determine if we need to generate an instance of ModuleInfo for this Module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="479aaf7dde32be79091b845d2f8777260b360556" translate="yes" xml:space="preserve">
          <source>Determine if zero bits need to be copied for this backend type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24b28aafb862370e9bc9d9c3dd0d659eb032aa2f" translate="yes" xml:space="preserve">
          <source>Determine lexical level difference from &lt;code&gt;this&lt;/code&gt; to nested function &lt;code&gt;fd&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9747c00345ecadf5845fc493b2735fcff266bb22" translate="yes" xml:space="preserve">
          <source>Determine lexical level difference from &lt;code&gt;this&lt;/code&gt; to nested function &lt;code&gt;fd&lt;/code&gt;. Issue error if &lt;code&gt;this&lt;/code&gt; cannot call &lt;code&gt;fd&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed3f29692e2dc50798983bef609614ff2b74448a" translate="yes" xml:space="preserve">
          <source>Determine mask of ways that a statement can exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df7ed67f9ac0d29143623306e6d91138f580d975" translate="yes" xml:space="preserve">
          <source>Determine number of arguments, folding in tuples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c1d788a86541433216b1cbe6cd800e359230a01" translate="yes" xml:space="preserve">
          <source>Determine number of entries in associative array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb3a7a28aadc6ac9a24522fb1facbfd2499e9ebf" translate="yes" xml:space="preserve">
          <source>Determine partial specialization order of 'this' vs g. This is very similar to TemplateDeclaration::leastAsSpecialized().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07fd5119c1c381fac5e9c06cace35914173ad2f6" translate="yes" xml:space="preserve">
          <source>Determine partial specialization order of 'this' vs td2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4a0c05f58058b8b1a23ad73ba5dbb12b1000809" translate="yes" xml:space="preserve">
          <source>Determine properties of an elem. EBIN binary node? EUNA unary node? EOP operator node (unary or binary)? ERTOL right to left evaluation (left to right is default) Eunambig unambiguous definition elem?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec90df507605c588bbd907da1813711d1abfd953" translate="yes" xml:space="preserve">
          <source>Determine return style of function - whether in registers or through a hidden pointer to the caller's stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb1ac0fdb6de60b29d0b485cddbfcca58a990ed6" translate="yes" xml:space="preserve">
          <source>Determine the cost of evaluating an operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a3db1976e3076dd125c7bfa90f65d53dd96bce3" translate="yes" xml:space="preserve">
          <source>Determine the linkage attribute of the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4620ec5933c4cce452d632eaafeadcbe437b16d9" translate="yes" xml:space="preserve">
          <source>Determine the right symbol to look up an associative array element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96ef7480200f4b221065970ed3935ac957722606" translate="yes" xml:space="preserve">
          <source>Determine the size a value of type &lt;code&gt;t&lt;/code&gt; will be when it is passed on the function parameter stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ce82109b0eb275737e6626cc738e09d8757df3f" translate="yes" xml:space="preserve">
          <source>Determine things about relational operators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="445eda42e7c74464d44ccd1620a2befb21ab9620" translate="yes" xml:space="preserve">
          <source>Determine whether an 'out' contract is declared inside the given function or any of its overrides.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be63ebb9b04e4d8d615eca65e8535b3769ebecf8" translate="yes" xml:space="preserve">
          <source>Determine whether the given file (or directory) exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfdac9bb32932094f4b0f47419554e0bafa2389e" translate="yes" xml:space="preserve">
          <source>Determine which Module a Dsymbol is in, as far as access rights go.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="723620b57dc29a2943525ce74b11aab59b3b93b8" translate="yes" xml:space="preserve">
          <source>Determine which Module a Dsymbol is in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3834ecc3aa1dad92da7b3401ec6af20392309d9e" translate="yes" xml:space="preserve">
          <source>Determines additional argument types for makeTupleForeach.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbda00b791b63020eacb383579930a0158c3cc64" translate="yes" xml:space="preserve">
          <source>Determines if &lt;code&gt;f&lt;/code&gt; is a function that requires a context pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a8678bb77c2872e0adc65687e74251cccabf377" translate="yes" xml:space="preserve">
          <source>Determines if a TemplateInstance will need a nested generation of the TemplateDeclaration. Sets enclosing property if so, and returns != 0;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c10a7e5581a17107fb508dd7d48da75fd37b44b8" translate="yes" xml:space="preserve">
          <source>Determines if x is &amp;plusmn;&amp;infin;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92eac75e8cbc6049ad92262b93532f4eee6c60d1" translate="yes" xml:space="preserve">
          <source>Determines if x is NaN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af8200a58cdb4cd837802e4514a7145ed07fb505" translate="yes" xml:space="preserve">
          <source>Determines if x is finite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaf6a6dd33d39ca2f85c693e18a10fe4ec497406" translate="yes" xml:space="preserve">
          <source>Determines if x is normalized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1530bf626bae0f80da40842bbc7b8e58caf37370" translate="yes" xml:space="preserve">
          <source>Determines if x is subnormal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03a2ac6420b6f24c17fedf5d0c29dfeaa05227a0" translate="yes" xml:space="preserve">
          <source>Determines the behavior for when an error is detected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="291cdf30bdc4d2ceba2bd008be64b599519e85cc" translate="yes" xml:space="preserve">
          <source>Determines the boundary between valid and invalid addresses. Status codes above this number will be returned as-is, status codes below will be returned as EmailStatusCode.valid. Thus the calling program can simply look for EmailStatusCode.valid if it is only interested in whether an address is valid or not. The errorLevel will determine how &quot;picky&quot; isEmail() is about the address.  If omitted or passed as EmailStatusCode.none then isEmail() will not perform any finer grained error checking and an address is either considered valid or not. Email status code will either be EmailStatusCode.valid or EmailStatusCode.error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b08723c8d029e0808aad92158ef8f7cd9d5154cb" translate="yes" xml:space="preserve">
          <source>Determines the path to the current user's preferred command interpreter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bd7ecbe5ae3fa4321dce2a69d3c85c5d1fb3689" translate="yes" xml:space="preserve">
          <source>Determines the return type of makeTupleForeach.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a2c0e82a4c82cf25e46b967e56429fa643e7957" translate="yes" xml:space="preserve">
          <source>Determines what kind of variadic parameters function has.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d994ce5a973e87c8a98d2fc2edd4cd117663f111" translate="yes" xml:space="preserve">
          <source>Determines whether &lt;code&gt;T&lt;/code&gt; has its own context pointer. &lt;code&gt;T&lt;/code&gt; must be either &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;struct&lt;/code&gt;, or &lt;code&gt;union&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79dcffbdac2699b8d56325ec6cc56e1b3aa1778e" translate="yes" xml:space="preserve">
          <source>Determines whether &lt;code&gt;T&lt;/code&gt; is a class nested inside another class and that &lt;code&gt;T.outer&lt;/code&gt; is the implicit reference to the outer class (i.e. &lt;code&gt;outer&lt;/code&gt; has not been used as a field or method name)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="528e814e2b44f7d34f9985d0baf099b0e6fea047" translate="yes" xml:space="preserve">
          <source>Determines whether &lt;code&gt;T&lt;/code&gt; or any of its representation types have a context pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01ed6a908c8924bcb05f62a2cc826cfe4cd7bb23" translate="yes" xml:space="preserve">
          <source>Determines whether a path is absolute or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcfeda9a254a089d6294c953e0491b65b7ef276d" translate="yes" xml:space="preserve">
          <source>Determines whether a path starts at a root directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4edc6bd929f6c3bbc4b5e9c6a10714bafa42804" translate="yes" xml:space="preserve">
          <source>Determines whether a symbol represents a module or package (Used as a helper for is(type == module) and is(type == package))</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c5c488163b93892028eaf2415c0fd1650901e2a" translate="yes" xml:space="preserve">
          <source>Determines whether the element for which the given predicate is true should be included in the resulting range (&lt;code&gt;No.openRight&lt;/code&gt;), or not (&lt;code&gt;Yes.openRight&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="543cbcdd8099f7a0b4e482266421c33c837a5831" translate="yes" xml:space="preserve">
          <source>Determines whether the function type &lt;code&gt;F&lt;/code&gt; is covariant with &lt;code&gt;G&lt;/code&gt;, i.e., functions of the type &lt;code&gt;F&lt;/code&gt; can override ones of the type &lt;code&gt;G&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="857bda4d26bbce771887b7d005e412fd90efa18b" translate="yes" xml:space="preserve">
          <source>Determines whether the given character is a directory separator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d36b5cd65a97672003a0ec9584d46cf9f414ebf5" translate="yes" xml:space="preserve">
          <source>Determines whether the type &lt;code&gt;S&lt;/code&gt; can be copied. If a type cannot be copied, then code such as &lt;code&gt;MyStruct x; auto y = x;&lt;/code&gt; will fail to compile. Copying for structs can be disabled by using &lt;code&gt;@disable this(this)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="061572172fa8b502ac5a30678cb22158f90cac0c" translate="yes" xml:space="preserve">
          <source>Determines whether to sort the index by the elements they refer to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3376a9770679682419b8a2b1d090a087ba2468b" translate="yes" xml:space="preserve">
          <source>Devanagari</source>
          <target state="translated">Devanagari</target>
        </trans-unit>
        <trans-unit id="f1d0b00583cf18e4f46c6f6a49928b18ac563eb8" translate="yes" xml:space="preserve">
          <source>Devanagari Extended</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2b6aad897453084e39c5b6cb348101052d037d6" translate="yes" xml:space="preserve">
          <source>Device control 1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c59c390789ea42b9e83bd6e9a087f7e7e19830c2" translate="yes" xml:space="preserve">
          <source>Device control 2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03d032304208a286ab590e6e0412ba2f32473099" translate="yes" xml:space="preserve">
          <source>Device control 3</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99e66b66a02a1ee7e99342652890cd1ca85ebf30" translate="yes" xml:space="preserve">
          <source>Device control 4</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd45a760f4e395483865648f31fd4527b653a0e6" translate="yes" xml:space="preserve">
          <source>Dg &lt;code&gt;dg&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df416cb44acdc7ff67e4ace824b92780b273ed0c" translate="yes" xml:space="preserve">
          <source>Diacritic</source>
          <target state="translated">Diacritic</target>
        </trans-unit>
        <trans-unit id="e3846175845cdb013139d3c78211ff1af2ada56b" translate="yes" xml:space="preserve">
          <source>Diagnostic reporter which prints the diagnostic messages to stderr.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48b17d41a887daf56fbe376e53c33e4334d2b37f" translate="yes" xml:space="preserve">
          <source>DiagnosticReporter &lt;code&gt;diagnosticReporter&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ca05e4035af5bf6a8530fc91b666a55254f9cf3" translate="yes" xml:space="preserve">
          <source>DiagnosticReporting &lt;code&gt;useDeprecated&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abfa2f54c9cbb66bf41f52c2e1c10ea7cf7fc1c0" translate="yes" xml:space="preserve">
          <source>Dictates directory spanning policy for dirEntries (see below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6576da21cb057e550894290bd7fc9e18fb25046" translate="yes" xml:space="preserve">
          <source>Dictates how iteration in a &lt;a href=&quot;#zip&quot;&gt;&lt;code&gt;zip&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#lockstep&quot;&gt;&lt;code&gt;lockstep&lt;/code&gt;&lt;/a&gt; should stop. By default stop at the end of the shortest of all ranges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5868229c99f342304e88e7ab77113b5de8a9b34d" translate="yes" xml:space="preserve">
          <source>Differences from the Kernighan-Ritchie allocator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00d0138195f4b82f95ed866a592bbdfe8acc72f4" translate="yes" xml:space="preserve">
          <source>Different compiler settings, optimization settings, and inlining settings can affect opportunities for constant folding, therefore the results of floating point calculations may differ depending on those settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0f5b6944c2cb56e5841bec8be19999cd4103ab2" translate="yes" xml:space="preserve">
          <source>Different data locks for a single share</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8b45432740c6a6295216b76e3f34067af96d73b" translate="yes" xml:space="preserve">
          <source>Different from other AttribDeclaration subclasses, include() call requires the completion of addMember and setScope phases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5c695c1d733025cbaa13f8eaba5273501ba483e" translate="yes" xml:space="preserve">
          <source>Different lock access types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38c26e54dd81b5beb41841e49c13ad7a31bbab29" translate="yes" xml:space="preserve">
          <source>Different signals can be added to a class by naming the mixins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41d219b83461231cfa58beb6fe7013a0c39674fb" translate="yes" xml:space="preserve">
          <source>Digamma function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47fdd58bee4dc86df2b978107102a22b9c44345b" translate="yes" xml:space="preserve">
          <source>Digest</source>
          <target state="translated">Digest</target>
        </trans-unit>
        <trans-unit id="e202731645b5903590a1721aec671ead010434dd" translate="yes" xml:space="preserve">
          <source>Digest with IE flavour</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="347acdba548588bbd29c93b643717c5b619fc9dc" translate="yes" xml:space="preserve">
          <source>DigestType!H &lt;strong id=&quot;finish&quot;&gt;finish&lt;/strong&gt;();</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e055596d1a7dd6729a4ea844af3804a3000405b" translate="yes" xml:space="preserve">
          <source>DigestType!Hash &lt;strong id=&quot;digest&quot;&gt;digest&lt;/strong&gt;(Hash, Range)(auto ref Range range)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3729bbf766b7afa198569d6497eb40e04441ade" translate="yes" xml:space="preserve">
          <source>DigestType!Hash &lt;strong id=&quot;digest&quot;&gt;digest&lt;/strong&gt;(Hash, T...)(scope const T data)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a62b295138ccc435d1119df6f358d56908f084eb" translate="yes" xml:space="preserve">
          <source>Digesting single bits (as opposed to bytes) is not implemented. This will be done as another template constraint helper (hasBitDigesting!T) and an additional interface (BitDigest)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb3d49bc8e14b2dd94a418374cf376aa4e3689a1" translate="yes" xml:space="preserve">
          <source>Digests do not work in CTFE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d267bf6104bc48ff02fae4aa1086207aeaf2f15" translate="yes" xml:space="preserve">
          <source>Digital Mars D (DMD)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="860dec87a36aab409b5c7737ad322775f24b3873" translate="yes" xml:space="preserve">
          <source>Digital Mars's MAKE program can be notified that a program can accept long command lines via environment variables by preceding the rule line for the program with a *.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2f6cb0f659da17abd54f5cdfc673931b59818ec" translate="yes" xml:space="preserve">
          <source>DigitalMars C runtime</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ceb1ec77714195da0fe4bcb3a48e59dc70dbfce" translate="yes" xml:space="preserve">
          <source>Dimension i.e. the number of native words backing this &lt;code&gt;BitArray&lt;/code&gt;.  Technically, this is the length of the underlying array storing bits, which is equal to &lt;code&gt;ceil(length / (size_t.sizeof * 8))&lt;/code&gt;, as bits are packed into &lt;code&gt;size_t&lt;/code&gt; units.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3927412ea64e80f5a0cbe309d0aa4c42ecdc9065" translate="yes" xml:space="preserve">
          <source>Dingbats</source>
          <target state="translated">Dingbats</target>
        </trans-unit>
        <trans-unit id="759e0d815ae585fb8bac59addeabec46e631136b" translate="yes" xml:space="preserve">
          <source>DirEntry &lt;code&gt;de&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="622c520ae1561df1c0e646d62ea55fd11213a490" translate="yes" xml:space="preserve">
          <source>Direction &lt;code&gt;dir&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1029544ae8b46287a52a74595462c217cf60a5a9" translate="yes" xml:space="preserve">
          <source>Directories</source>
          <target state="translated">Directories</target>
        </trans-unit>
        <trans-unit id="7f5cf49d5f14355579c48870159720b7e4cb8104" translate="yes" xml:space="preserve">
          <source>Directory matching callback called after the file (chunk) was downloaded, or skipped</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62a1901037b83e3013b41d8cdfaeaf3b97e8ec0c" translate="yes" xml:space="preserve">
          <source>Directory matching callback called before downloading of an individual file (chunk) started</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8ba486351bc5bc8f536c3684d649f6bba19fb09" translate="yes" xml:space="preserve">
          <source>Directs the call to either one of the &lt;code&gt;buckets&lt;/code&gt; allocators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="673cf6ae82497c0bfb4b0257312c6ce0dff96771" translate="yes" xml:space="preserve">
          <source>Disable (mask) specific hardware exceptions. Multiple exceptions may be ORed together.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03145a3cc292c23bd2c39300c95f0daea5c2a86b" translate="yes" xml:space="preserve">
          <source>Disable GC collection cycles while that thread is active with &lt;a href=&quot;#disable&quot;&gt;&lt;code&gt;disable&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;#enable&quot;&gt;&lt;code&gt;enable&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc4db9a1df0ab57c1963989136455f78a06edbf2" translate="yes" xml:space="preserve">
          <source>Disable the Nagle algorithm for send coalescing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f18d15c436642bb1b6dc9007150b2e55250d957" translate="yes" xml:space="preserve">
          <source>Disables automatic garbage collections performed to minimize the process footprint. Collections may continue to occur in instances where the implementation deems necessary for correct program behavior, such as during an out of memory condition. This function is reentrant, but enable must be called once for each call to disable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4381e662a49e6eff28e950bf9b63b9397e0ff422" translate="yes" xml:space="preserve">
          <source>Disables sends and/or receives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a028268b53825265b1f96bf957d18423681846f" translate="yes" xml:space="preserve">
          <source>Disabling Array Bounds Checking</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92134947ba1f6ead2a7886f3c52a180f24e38c29" translate="yes" xml:space="preserve">
          <source>Disabling Default Struct Construction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2403aba30d80ac06cb16c5482b584bcc2fb8556f" translate="yes" xml:space="preserve">
          <source>Disabling exception will follow these rules:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45b418f2ce93897cacff432a6407313616f0effc" translate="yes" xml:space="preserve">
          <source>Disabling struct postblit makes the object not copyable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dde1f923bce15988a141f95ecfb94c07dd719af" translate="yes" xml:space="preserve">
          <source>Disallow &lt;code&gt;@system&lt;/code&gt; asm statements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a58e3b7d7ec9e61c853624d42770760218e02be9" translate="yes" xml:space="preserve">
          <source>Disallowed Floating Point Transformations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95ae8922ce7ae02dfbd1162984b468693f6a563b" translate="yes" xml:space="preserve">
          <source>Disallowing overlapping makes it possible for more aggressive parallel code optimizations than possible with the serial semantics of C.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b145cd26efec2371fbaebd6e59da0288cdb70a4" translate="yes" xml:space="preserve">
          <source>Disclaimer: The random number generators and API provided in this module are not designed to be cryptographically secure, and are therefore unsuitable for cryptographic or security-related purposes such as generating authentication tokens or network sequence numbers. For such needs, please use a reputable cryptographic library instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07ce2fc6e101a8eec909001f12bbd0963c513e2d" translate="yes" xml:space="preserve">
          <source>Disconnect all the slots.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="696c96f0d428c1560921179cb1efd5002041994a" translate="yes" xml:space="preserve">
          <source>Discriminant for which kind of initializer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fd00c73c6b0c2fdb2f52597de39a96356605fab" translate="yes" xml:space="preserve">
          <source>Discriminated unions and algebraic types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d4a9ae8f73ae60ae256d80c2349812a114d7d32" translate="yes" xml:space="preserve">
          <source>Dispatches allocations (and deallocations) between two allocators (&lt;code&gt;SmallAllocator&lt;/code&gt; and &lt;code&gt;LargeAllocator&lt;/code&gt;) depending on the size allocated, as follows. All allocations smaller than or equal to &lt;code&gt;threshold&lt;/code&gt; will be dispatched to &lt;code&gt;SmallAllocator&lt;/code&gt;. The others will go to &lt;code&gt;LargeAllocator&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="878767dea09dd65d9e99925d1bbf35b9ead4d939" translate="yes" xml:space="preserve">
          <source>Dispose</source>
          <target state="translated">Dispose</target>
        </trans-unit>
        <trans-unit id="86bcb9360235671e21ca43c426414e6c95361431" translate="yes" xml:space="preserve">
          <source>Dissecting the SS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eba01cc696856200a8e961304fb348e230176b24" translate="yes" xml:space="preserve">
          <source>Distinguishes between a Mailbox as defined by RFC 5321 and an addr-spec as defined by RFC 5322. Depending on the context, either can be regarded as a valid email address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b89e0561b370a9d9defb798c326cac4cbabab55c" translate="yes" xml:space="preserve">
          <source>Distributed under the &lt;a href=&quot;http://www.boost.org/LICENSE_1_0.txt&quot;&gt;Boost Software License 1.0&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ace81f9d94387dd1a13fbe82f4f33df38b3641a" translate="yes" xml:space="preserve">
          <source>Distributed under the &lt;a href=&quot;http://www.boost.org/LICENSE_1_0.txt&quot;&gt;Boost Software License 1.0&lt;/a&gt;. (See accompanying file LICENSE)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba891575bb154c2b907934064ce520b42404b90b" translate="yes" xml:space="preserve">
          <source>Distributed under the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at &lt;a href=&quot;http://%20boost.org/LICENSE_1_0.txt&quot;&gt;boost.org/LICENSE_1_0.txt&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ab74f49d93f10ad089666bb7d00d1c70aa92f62" translate="yes" xml:space="preserve">
          <source>Distributed under the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at &lt;a href=&quot;http://boost.org/LICENSE_1_0.txt&quot;&gt;boost.org/LICENSE_1_0.txt&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a2d39b8d8ded48a2849b3ea1a1dcbcd9d0e8dbe" translate="yes" xml:space="preserve">
          <source>Ditto</source>
          <target state="translated">Ditto</target>
        </trans-unit>
        <trans-unit id="a816314180f7274708cea2cfeb5b4bf0a2c3d833" translate="yes" xml:space="preserve">
          <source>Divide two complex floating point numbers, x / y.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d913c09c6d3d954ae89f4b03b5517d485d50649" translate="yes" xml:space="preserve">
          <source>Divide-and-conquer division</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1eff6af42848eda7c48b15c9d38a5f1bae8908c" translate="yes" xml:space="preserve">
          <source>Divides allocation sizes in discrete buckets and uses an array of allocators, one per bucket, to satisfy requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a36c5ce128a07ea9566a1fde171f2200aeda2ed" translate="yes" xml:space="preserve">
          <source>Divides two durations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d59184e9b1f7fb2d487b23c37a8d0769b2b80f6e" translate="yes" xml:space="preserve">
          <source>Dmitry Olshansky</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76dadc05139fc7b9bb55ebcce06ee30f3a6d580d" translate="yes" xml:space="preserve">
          <source>Dmitry Olshansky,  API and utility constructs are modeled after the original &lt;code&gt;std.regex&lt;/code&gt; by Walter Bright and Andrei Alexandrescu.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bd083b2b3e187d89788105aa92f56163ce3b9bb" translate="yes" xml:space="preserve">
          <source>Do Statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afa88e9df2329969dfa74d520fd827ee0b4bb118" translate="yes" xml:space="preserve">
          <source>Do access check for member of this class, this class being the type of the 'this' pointer used to access smember. Returns true if the member is not accessible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ced80b974abadd59803f313239db93fc65a5aef" translate="yes" xml:space="preserve">
          <source>Do an explicit cast. Assume that the 'this' expression does not have any indirections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cf5f7f93eb415898103ca45b53223874a94e907" translate="yes" xml:space="preserve">
          <source>Do an implicit cast. Issue error if it can't be done.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49ad1ee743ebd2812afa41df4f17b41e99db9e93" translate="yes" xml:space="preserve">
          <source>Do assignment to an array. p[0 .. count] = value;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2342a7521a0c9b6a4e6ba9b2d19061a24febfe06" translate="yes" xml:space="preserve">
          <source>Do byte or word alignment as necessary. Align sizes of 0, as we may not know array sizes yet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3c57d19eb68dddb9c7bee678b606c3b2b7c954b" translate="yes" xml:space="preserve">
          <source>Do char promotions. char -&amp;gt; dchar wchar -&amp;gt; dchar dchar -&amp;gt; dchar</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7efa78739a0a812ec969fd8c04cc8a58f93414c" translate="yes" xml:space="preserve">
          <source>Do construction of an array. ti[count] p = value;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b160013f0a885bfb3ed7bf9da930f4023f015430" translate="yes" xml:space="preserve">
          <source>Do integral promotions (convertchk). Don't convert</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc9a100899d36229e4bd36b9da54ca644bcf9adb" translate="yes" xml:space="preserve">
          <source>Do mangling for C++ linkage. This is the POSIX side of the implementation. It exports two functions to C++, &lt;code&gt;toCppMangleItanium&lt;/code&gt; and &lt;code&gt;cppTypeInfoMangleItanium&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48f2007f86e365b8ec9f6adbb696ec1982a609ae" translate="yes" xml:space="preserve">
          <source>Do not add or subtract an offset to a pointer such that the result points outside of the bounds of the garbage collected object originally allocated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81b778ac215108ff623547eace59a4ae9bb0b6fe" translate="yes" xml:space="preserve">
          <source>Do not align references or pointers that were allocated using &lt;a href=&quot;expression#NewExpression&quot;&gt;&lt;i&gt;NewExpression&lt;/i&gt;&lt;/a&gt; on boundaries that are not a multiple of &lt;code&gt;size_t&lt;/code&gt;. The garbage collector assumes that pointers and references to GC allocated objects will be on &lt;code&gt;size_t&lt;/code&gt; byte boundaries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caca04bc995d0c6eb8fc2349201d477b42dc5917" translate="yes" xml:space="preserve">
          <source>Do not attempt to resume normal execution after an</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dae81830baa5344537fe42e7999203b567a0ce3" translate="yes" xml:space="preserve">
          <source>Do not auto-initialize the object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77b2c3ee1b3b37ff4e1d1f86da4e93a8c9f01993" translate="yes" xml:space="preserve">
          <source>Do not call this from inside a callback handler e.g. &lt;code&gt;onReceive&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f58790833caa6a65a159ebf3ca17750973f0db4" translate="yes" xml:space="preserve">
          <source>Do not confuse function types with function pointer types; function types are usually used for compile-time reflection purposes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63e963b5f29077511474456af6492bdde1d38506" translate="yes" xml:space="preserve">
          <source>Do not confuse this with &lt;a href=&quot;std_variant#Variant&quot;&gt;&lt;code&gt;std.variant.Variant&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3dd442e9ddf9950a928b468f82f2b3da4fe83b1" translate="yes" xml:space="preserve">
          <source>Do not confuse this with &lt;a href=&quot;std_variant#Variant&quot;&gt;&lt;code&gt;std.variant.Variant&lt;/code&gt;&lt;/a&gt;. The type of this property is &lt;a href=&quot;#Variant&quot;&gt;`std.uuid.UUID.Variant`&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29b494027d2c32b0eb23f6f091dc23e2a05787b4" translate="yes" xml:space="preserve">
          <source>Do not decode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73679fcab18429a879497ec92e92f528b9054737" translate="yes" xml:space="preserve">
          <source>Do not depend on the ordering of pointers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15214b550edaf6868002baab7a36d86b63fdbd52" translate="yes" xml:space="preserve">
          <source>Do not erase the endOfOptions separator from args</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed54b943220a06fc33fbd41e84ae8d683cb32f84" translate="yes" xml:space="preserve">
          <source>Do not have pointers in a struct instance that point back to the same instance. The trouble with this is if the instance gets moved in memory, the pointer will point back to where it came from, with likely disastrous results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9503045deb2713c12f10681d5a82c5e6dc3786b4" translate="yes" xml:space="preserve">
          <source>Do not have side effects in either</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2207daa5237f7950ee2a24d7bad6178ad0c4eac" translate="yes" xml:space="preserve">
          <source>Do not hold references to GC allocated data in such threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75112ebefdc8bc7ab72ca5983be8d10945931a0b" translate="yes" xml:space="preserve">
          <source>Do not indirectly call exported or public member functions within a class invariant, as this can result in infinite recursion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1775975c4acb65a912112e3f08e4b4d3508929c" translate="yes" xml:space="preserve">
          <source>Do not indirectly call exported or public member functions within a struct invariant, as this can result in infinite recursion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="265e329368392df0768a84da95edc465b4f53d17" translate="yes" xml:space="preserve">
          <source>Do not misalign pointers if those pointers may point into the GC heap, such as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae28e6f2bf434f35cfb2723801a49eb3b07894f4" translate="yes" xml:space="preserve">
          <source>Do not move this memory block on collect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="252d61d2c9aaae3fa2855b13f421208eb1adfbab" translate="yes" xml:space="preserve">
          <source>Do not pass or return structs with no fields of non-zero size to &lt;code&gt;extern (C)&lt;/code&gt; functions. According to C11 6.7.2.1p8 this is undefined behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="545f474f77e15c3644ea6498632a63e633d190ac" translate="yes" xml:space="preserve">
          <source>Do not route</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc0a76e6e9b0c6af0cc401f08c6346c5684c9a82" translate="yes" xml:space="preserve">
          <source>Do not scan through this block on collect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee5948436f95ed6ca0018fa3d5ef4d60f9e4e270" translate="yes" xml:space="preserve">
          <source>Do not store into pointers values that may point into the garbage collected heap:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4694aebab008c009fd2ade5c78c132624b4e3994" translate="yes" xml:space="preserve">
          <source>Do not store magic values into pointers, other than &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1baaebf042ac12ef4083353631588e08e8ab3c7a" translate="yes" xml:space="preserve">
          <source>Do not store pointers into non-pointer variables using casts and other tricks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5518272732f9db527429d7b720c46d2567a0aeeb" translate="yes" xml:space="preserve">
          <source>Do not take advantage of alignment of pointers to store bit flags in the low order bits:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b58865d06e7074ca80b26d076607e9c3e9f0a800" translate="yes" xml:space="preserve">
          <source>Do not use built-in appending (i.e. &lt;code&gt;~=&lt;/code&gt;) on the original array until you are done with the appender, because subsequent calls to the appender will reallocate the array data without those appends.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f43c209d1eced41c1951e6622431f16dd6a92327" translate="yes" xml:space="preserve">
          <source>Do not use byte-by-byte memory copies to copy pointer values. This may result in intermediate conditions where there is not a valid pointer, and if the gc pauses the thread in such a condition, it can corrupt memory. Most implementations of &lt;code&gt;memcpy()&lt;/code&gt; will work since the internal implementation of it does the copy in aligned chunks greater than or equal to the pointer size, but since this kind of implementation is not guaranteed by the C standard, use &lt;code&gt;memcpy()&lt;/code&gt; only with extreme caution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fef94bc41deb275037bea8264e5ce1e16ff6601" translate="yes" xml:space="preserve">
          <source>Do not use pointer values to compute a hash function. A copying garbage collector can arbitrarily move objects around in memory, thus invalidating the computed hash value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fcdfeaf8d861d5921d7ae20a6aa8706d48e2502" translate="yes" xml:space="preserve">
          <source>Do not use the xor trick to swap two pointer values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9450a2a7f4c92d925d6ca19a49b85936cbddd9f4" translate="yes" xml:space="preserve">
          <source>Do not write pointer values out to disk and read them back in again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47e4f0210c15edd10b3e8dfae2c365e9ea492c46" translate="yes" xml:space="preserve">
          <source>Do not xor pointers with other values, like the xor pointer linked list trick used in C.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44cce4fe17e5532d7d769dc78edb2ce4bfb6d3c6" translate="yes" xml:space="preserve">
          <source>Do same thing as &lt;a href=&quot;#makeTransTable&quot;&gt;&lt;code&gt;makeTransTable&lt;/code&gt;&lt;/a&gt; but allocate the translation table on the GC heap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4aa62dd02825b617ff934fd70f3fd8af2008444" translate="yes" xml:space="preserve">
          <source>Do syntax copy of an array of Dsymbol's.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7a07128b5b38f3860b8f68acb34a0025bf24ca2" translate="yes" xml:space="preserve">
          <source>Do syntax copy of an array of Ensure's.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19da1895e2f7ae31622d6bf9481e29416f91cc3f" translate="yes" xml:space="preserve">
          <source>Do syntax copy of an array of Statement's.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b79f267da0581c6563cba569790a61e0f1e62f8" translate="yes" xml:space="preserve">
          <source>Do while statements implement simple loops.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">Documentation</target>
        </trans-unit>
        <trans-unit id="e5cf7df46ec6959b440885b9ae093cdb071a4cdc" translate="yes" xml:space="preserve">
          <source>Documentation Generator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b55770552f067992cb153f9604359fff22e6d9a" translate="yes" xml:space="preserve">
          <source>Documentation may contain lists. Start an ordered list with a number followed by a period:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="926e5491f782345c5ebce88e5158033ebc55572c" translate="yes" xml:space="preserve">
          <source>Documentation may include a section of quoted material by prefixing each line of the section with a &lt;code&gt;&amp;gt;&lt;/code&gt;. Quotes may include headings, lists, embedded code, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdb5a714ba58a87c2a7f2811a3ac36b770a2efdc" translate="yes" xml:space="preserve">
          <source>Documentation may link to other documentation or to a URL. There are four styles of links:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c528ec8a539858f2d0895db65fe8bac577f548f" translate="yes" xml:space="preserve">
          <source>Documented Unittests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb7221f475015c63e0d052b4eb162c85818223c5" translate="yes" xml:space="preserve">
          <source>Documented unittests allow the developer to deliver code examples to the user, while at the same time automatically verifying that the examples are valid. This avoids the frequent problem of having outdated documentation for some piece of code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22157d9a8327c6cba20cc721270ec0fb147058d0" translate="yes" xml:space="preserve">
          <source>Does *not* do a deep copy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7880c3cdd7abd23aa1dab064c815cf8a6efc9dbd" translate="yes" xml:space="preserve">
          <source>Does array assignment (not construction) from another lvalue array of the same element type. Handles overlapping copies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb326be1508b3558c9df2c127c6767a185c8e15f" translate="yes" xml:space="preserve">
          <source>Does array assignment (not construction) from another rvalue array of the same element type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7b5e205d736eaa89aab0a993c404218452acec2" translate="yes" xml:space="preserve">
          <source>Does array initialization (not assignment) from another array of the same element type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c341d6163b42492bc175f361de7f7e046b501b5" translate="yes" xml:space="preserve">
          <source>Does array initialization (not assignment) from another array of the same element type. ti is the element type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f48305c318afd30929190596a37b1449341dc48" translate="yes" xml:space="preserve">
          <source>Does basic case-insensitive comparison of &lt;code&gt;r1&lt;/code&gt; and &lt;code&gt;r2&lt;/code&gt;. This function uses simpler comparison rule thus achieving better performance than &lt;a href=&quot;#icmp&quot;&gt;&lt;code&gt;icmp&lt;/code&gt;&lt;/a&gt;. However keep in mind the warning below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1541f9d0a1b7d7addfa9e467393388bf45331786" translate="yes" xml:space="preserve">
          <source>Does case insensitive comparison of &lt;code&gt;r1&lt;/code&gt; and &lt;code&gt;r2&lt;/code&gt;. Follows the rules of full case-folding mapping. This includes matching as equal german &amp;szlig; with &quot;ss&quot; and other 1:M &lt;a href=&quot;#Code%20point&quot;&gt;code point&lt;/a&gt; mappings unlike &lt;a href=&quot;#sicmp&quot;&gt;&lt;code&gt;sicmp&lt;/code&gt;&lt;/a&gt;. The cost of &lt;code&gt;icmp&lt;/code&gt; being pedantically correct is slightly worse performance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d227fda4244c2852330a21da3953b3ada54ec0a1" translate="yes" xml:space="preserve">
          <source>Does it have an x87 FPU on-chip?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83fba42bfa5a2255055c2e608e063da748b0f4c1" translate="yes" xml:space="preserve">
          <source>Does not allocate memory if it does not throw.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5f60bc07826ab5afe9362b839574ccde8f21899" translate="yes" xml:space="preserve">
          <source>Does not allocate memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48413fe4541dc1ee71e5310b4e9c41a5627c01cd" translate="yes" xml:space="preserve">
          <source>Does not allocate memory. Characters in UTF-8 or UTF-16 format that cannot be decoded are treated as &lt;a href=&quot;std_utf#replacementDchar&quot;&gt;&lt;code&gt;std.utf.replacementDchar&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dce2a3d4cb0e63320ae9bb41db9cf5f239c6203b" translate="yes" xml:space="preserve">
          <source>Does not resolve symbolic links.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c740830c192296775600e4b476a2a4cd6515e7a8" translate="yes" xml:space="preserve">
          <source>Does not return on success (the current process will have been replaced). Returns -1 on failure with no indication of the underlying error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f67d427a021b49d829af064322fcd164d0d520fe" translate="yes" xml:space="preserve">
          <source>Does not support encryption.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57647b73e9c332f36e028fa36bff18cf326e39ad" translate="yes" xml:space="preserve">
          <source>Does not throw on invalid UTF; such is simply passed unchanged to the output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56a999eccf87855de475f9001b77eaa33bebcc42" translate="yes" xml:space="preserve">
          <source>Does not work with &lt;code&gt;@safe&lt;/code&gt; functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2068fc4e744b5cb3b339dae23375f8492cf64188" translate="yes" xml:space="preserve">
          <source>Does not work with case insensitive strings where the mapping of tolower and toupper is not 1:1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="234e510cc603f08075d818203c3bd0a16b71e801" translate="yes" xml:space="preserve">
          <source>Does not yet verify that put takes scope parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b970936a7b0239e08cb29e7cc368f29721b67295" translate="yes" xml:space="preserve">
          <source>Does nothing if the directory specified by &lt;code&gt;pathname&lt;/code&gt; already exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d14a56d6d7f137ebcec5fe42cb450c31b78d2d48" translate="yes" xml:space="preserve">
          <source>Does semantic analysis on function bodies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fd2735e2d40ea539042c5be41e2050d6af1c881" translate="yes" xml:space="preserve">
          <source>Does semantic analysis on initializers and members of aggregates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7426f971998f7162437e092ad05d77db524d6ce4" translate="yes" xml:space="preserve">
          <source>Does semantic analysis on the public face of declarations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e7b66a0efda11b1a40d7f052dad77b19269e8c9" translate="yes" xml:space="preserve">
          <source>Does string s[] start with a URL?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38868c2e83fb9b3a3cc81b391b385a673621f4ac" translate="yes" xml:space="preserve">
          <source>Does string s[] start with an email address?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee8fd059691124d36d3b2bf9c557a5b6992ef466" translate="yes" xml:space="preserve">
          <source>Does symbol go into data segment? Includes extern variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ea873f55def1751953aed891c21e1fd70621fb3" translate="yes" xml:space="preserve">
          <source>Does symbol go into thread local storage?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f4245209de5aaf56cccd41911b16c063a174fee" translate="yes" xml:space="preserve">
          <source>Does this CPU perform better on AMD K7 code than PentiumPro..Core2 code?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f93413c51da306bad6613f0c3dfb9485692526d8" translate="yes" xml:space="preserve">
          <source>Does this CPU perform better on Pentium I code than Pentium Pro code?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6beb25bfcb2d456e092bdcbcd4df3c0a4af2770f" translate="yes" xml:space="preserve">
          <source>Does this CPU perform better on Pentium4 code than PentiumPro..Core2 code?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="303dfd80025298b45e565827e0f7acdfb67e7adf" translate="yes" xml:space="preserve">
          <source>Does this expression statically evaluate to a boolean 'result' (true or false)?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20fe1fb5a82d9f8293a5f142d362ade49a423c3b" translate="yes" xml:space="preserve">
          <source>Does this generator have a fixed range? (true).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c45ddb9e91921f4fb3ca128e8d434af1f9c44043" translate="yes" xml:space="preserve">
          <source>Does this statement end with a return statement?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="602cff563bc9c1a99154cbe14ef76827c7b8bd0a" translate="yes" xml:space="preserve">
          <source>Doesn't run semantic() on the returned type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65bae41fbf2bab9d6c517a5161d6f4e5c84b2f99" translate="yes" xml:space="preserve">
          <source>Doing a finer grained specialization than template partial specialization allows for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bf1581b3d79aef115fa984692a0f57e9b6391b0" translate="yes" xml:space="preserve">
          <source>Dollar Operator Overloading</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="421fb059a6bf248f5571209ef5cbebb58961f8d1" translate="yes" xml:space="preserve">
          <source>Domain X</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c300ea4f935146cff3d8c2e417b69ad4286f5b3" translate="yes" xml:space="preserve">
          <source>Domain literal is missing its closing bracket</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36a62fa1476d63a0f159cc1bcd228125da0bc26a" translate="yes" xml:space="preserve">
          <source>Dominic Sayers &amp;lt;dominic@sayers.cc&amp;gt;, Jacob Carlborg</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b8429a95f0eac205580ed220d9c90696f62766d" translate="yes" xml:space="preserve">
          <source>Domino Tiles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa09a73d5a2559992d8df50b14b202ba40b84989" translate="yes" xml:space="preserve">
          <source>Don Clugston</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d0b26b787f9f3785eca5ba583a0874a32c4dfc6" translate="yes" xml:space="preserve">
          <source>Don Clugston, Sean Kelly, Walter Bright, Alex R&amp;oslash;nne Petersen, Thomas Stuart Bockman</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0d862ef147328c2bdab8e47b939a7df16dbcb18" translate="yes" xml:space="preserve">
          <source>Don Clugston, Tomas Lindquist Olsen &amp;lt;tomas@famolsen.dk&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a588f29267f5677ec0874779bc43b4529049e908" translate="yes" xml:space="preserve">
          <source>Don't allow access, but don't generate an error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5bedabd34c7a0b41762124d3fa68898fb512506" translate="yes" xml:space="preserve">
          <source>DosFileTime &lt;code&gt;dft&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9f917733056998a71b923495fed0aa216ff5bfd" translate="yes" xml:space="preserve">
          <source>DotExpFlag bit flags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29452f8d098cfc522610ae95cc37fe7fabe7176a" translate="yes" xml:space="preserve">
          <source>DotIdExp &lt;strong id=&quot;typeDotIdExp&quot;&gt;typeDotIdExp&lt;/strong&gt;(ref const Loc loc, Type type, Identifier ident);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f769255e26cd75e595da28495b1c1b062915615a" translate="yes" xml:space="preserve">
          <source>DotIdentifier</source>
          <target state="translated">DotIdentifier</target>
        </trans-unit>
        <trans-unit id="d02f752b78fa27af256bc9c9891df221a3c43cc3" translate="yes" xml:space="preserve">
          <source>Double Quoted Strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58a15cf6ea8b9a28cb41169bfcd5ac8fbf81d48d" translate="yes" xml:space="preserve">
          <source>Double quoted strings are enclosed by &quot;&quot;. &lt;a href=&quot;#EscapeSequence&quot;&gt;&lt;i&gt;EscapeSequence&lt;/i&gt;&lt;/a&gt;s can be embedded into them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b4c7f39c0dd52ca9e93b751cf3a268ca267083b" translate="yes" xml:space="preserve">
          <source>Double quotes in a field are escaped with a double quote</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39ada38f04cebecefb9b4425f65f5414bc2e5688" translate="yes" xml:space="preserve">
          <source>DragonFlyBSD</source>
          <target state="translated">DragonFlyBSD</target>
        </trans-unit>
        <trans-unit id="c6cfd9344502d0bda387e7aa2d5b236691470937" translate="yes" xml:space="preserve">
          <source>DragonFlyBSD,FreeBSD,OpenBSD-Only</source>
          <target state="translated">DragonFlyBSD,FreeBSD,OpenBSD-Only</target>
        </trans-unit>
        <trans-unit id="6762d5db4af81e5f2c77bcbf79bc1f395b8eb0a4" translate="yes" xml:space="preserve">
          <source>Drop an IP group membership</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2344a954abca9d2ee9cc4c6e9c4befacdc6f6e79" translate="yes" xml:space="preserve">
          <source>Dst</source>
          <target state="translated">Dst</target>
        </trans-unit>
        <trans-unit id="b024af56227cbde4a86bf76b0bd08cc52aebe130" translate="yes" xml:space="preserve">
          <source>Dst &lt;strong id=&quot;onBadCast&quot;&gt;onBadCast&lt;/strong&gt;(Dst, Src)(Src src);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09e6401c31232a6fb2cc5ab8768ce235cdf1abe2" translate="yes" xml:space="preserve">
          <source>Dst[] &lt;code&gt;r&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5a9a4e4ef12e5629fa29318fc987f63c1263435" translate="yes" xml:space="preserve">
          <source>Dsymbol</source>
          <target state="translated">Dsymbol</target>
        </trans-unit>
        <trans-unit id="8b545778ae57876ecf0207ce6c8091ae91e982a7" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;code&gt;dstart&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f906c5f387f9a40fce5e5a506c83c5ea11982076" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;code&gt;fstart&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e832a1f077874040d38633a04423fe25027820e" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;code&gt;p&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="490e98cb5be1dc66bf96b3750e4de4b963606587" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;code&gt;s&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38f65a50fa64dd5ef5a05cc65e0cd98b7a44a10d" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;code&gt;sapply&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad654599d75bbb9a0a04ad6c6a4c073c4440fbe1" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;code&gt;sym&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51c0a3fc988c10b5abd6f1880eec7b7da76ded32" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;code&gt;var&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a455a913b2851eb9ab6f94cc3b97c5265722c6d" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;strong id=&quot;mostVisibleOverload&quot;&gt;mostVisibleOverload&lt;/strong&gt;(Dsymbol s, Module mod = null);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bc55e9116eca2e0a18110f594ccc1a1b222faee" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;strong id=&quot;overnext&quot;&gt;overnext&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f998ebe1daa0a42b7c8113385a9a3ff31e4e90e" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;strong id=&quot;search&quot;&gt;search&lt;/strong&gt;(ref const Loc loc, Identifier ident, int flags = IgnoreNone);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9aef60a1f0da381fa62cedea3e703d86c8caec5" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;strong id=&quot;search&quot;&gt;search&lt;/strong&gt;(ref const Loc loc, Identifier ident, int flags = SearchLocalsOnly);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02b208db776f82952606d59fc10c27ac71a372a1" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;strong id=&quot;search_function&quot;&gt;search_function&lt;/strong&gt;(ScopeDsymbol ad, Identifier funcid);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6f6da4481e29b43f5371dd381f64d16bb020eb2" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;strong id=&quot;sym&quot;&gt;sym&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3293e7c40b5953f617f5d49b0894e4f7726b94e8" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;strong id=&quot;symtabLookup&quot;&gt;symtabLookup&lt;/strong&gt;(Dsymbol s, Identifier id);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="292d8088efaebd0453ef2ade829fbebf5d2ffa4d" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;strong id=&quot;syntaxCopy&quot;&gt;syntaxCopy&lt;/strong&gt;(Dsymbol s);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f2d964bc204331c0e5701b7d6577842b5d5d2c5" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;strong id=&quot;toAlias&quot;&gt;toAlias&lt;/strong&gt;();</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d63aa4af0b5bd60b9f77db659b1759fbc7188d93" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;strong id=&quot;toAlias2&quot;&gt;toAlias2&lt;/strong&gt;();</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c616142ceaa6dd7c99efb38a7262dd9e4a74e2ff" translate="yes" xml:space="preserve">
          <source>Dsymbol &lt;strong id=&quot;toDsymbol&quot;&gt;toDsymbol&lt;/strong&gt;(Scope* sc);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e066699810a3cfe4a775dc1614d4092e48b924c1" translate="yes" xml:space="preserve">
          <source>Dsymbol that generates a scope</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc0fbab1260d726e2460fb8256825878dd187711" translate="yes" xml:space="preserve">
          <source>Dsymbol* &lt;code&gt;ps&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bf3da6da4ac27f77ae668682aa5bbd52078beee" translate="yes" xml:space="preserve">
          <source>DsymbolTable &lt;strong id=&quot;labtab&quot;&gt;labtab&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f805700e007097747cad69493643b293e2e10b6" translate="yes" xml:space="preserve">
          <source>Dsymbol_apply_ft_t &lt;code&gt;fp&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db8646dc08b819447ef527c06deac4cc9e003026" translate="yes" xml:space="preserve">
          <source>Dsymbols</source>
          <target state="translated">Dsymbols</target>
        </trans-unit>
        <trans-unit id="9b6c5433d304473effb9bafc5ebabea2c78462bf" translate="yes" xml:space="preserve">
          <source>Dsymbols &lt;strong id=&quot;obj_symbols_towrite&quot;&gt;obj_symbols_towrite&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fd8c240eec48309328d40f64dfa4c80111856bd" translate="yes" xml:space="preserve">
          <source>Dsymbols* &lt;code&gt;decl&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="020ceea6d0b7987843bd33375b6b8581024abf03" translate="yes" xml:space="preserve">
          <source>Dsymbols* &lt;code&gt;symbols&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f54f49b35574d76d126f9bf8be7e61d8604c8097" translate="yes" xml:space="preserve">
          <source>Dsymbols* &lt;code&gt;vtbl&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="095218a7826af0ed580e41f7cac48851e6cfa475" translate="yes" xml:space="preserve">
          <source>Dsymbols* &lt;strong id=&quot;include&quot;&gt;include&lt;/strong&gt;(Scope* sc);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2e879bbecbe7013ea6be1dd6d3bde799d27cd35" translate="yes" xml:space="preserve">
          <source>Dsymbols* &lt;strong id=&quot;methodList&quot;&gt;methodList&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85e56264d0ff9cd817a1e96f31730a6976842b9b" translate="yes" xml:space="preserve">
          <source>DtBuilder &lt;code&gt;dtb&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84bc9a0f1bfa58783417cc630153b7860a875bc1" translate="yes" xml:space="preserve">
          <source>DtorDeclaration &lt;strong id=&quot;buildDtor&quot;&gt;buildDtor&lt;/strong&gt;(AggregateDeclaration ad, Scope* sc);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97b38c1c9b9dc77fcb289aa3909fd034cd23c5dc" translate="yes" xml:space="preserve">
          <source>DtorDeclaration &lt;strong id=&quot;buildExternDDtor&quot;&gt;buildExternDDtor&lt;/strong&gt;(AggregateDeclaration ad, Scope* sc);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="881fe54811919601458a7e7d557dfc4aeab13911" translate="yes" xml:space="preserve">
          <source>Due to caching byLineCopy can be more memory-efficient than &lt;code&gt;File.byLine.map!idup&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4db7a535677101ee5ada4f464ddc7e4b0fe1093" translate="yes" xml:space="preserve">
          <source>Due to safe type promotion in D, chaining together different character ranges results in a &lt;code&gt;uint&lt;/code&gt; range.  Use &lt;a href=&quot;std_utf#byChar&quot;&gt;byChar&lt;/a&gt;, &lt;a href=&quot;std_utf#byWchar&quot;&gt;byWchar&lt;/a&gt;, and &lt;a href=&quot;std_utf#byDchar&quot;&gt;byDchar&lt;/a&gt; on the ranges to get the type you need.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="245263e86646b52a2631b15f2d5731286c30243f" translate="yes" xml:space="preserve">
          <source>Dumps the full contents of module &lt;code&gt;m&lt;/code&gt; to &lt;code&gt;buf&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66ae505d132b46de925c396bf17063ad737667f4" translate="yes" xml:space="preserve">
          <source>Duplicate functionality of D1's &lt;code&gt;std.file.listdir()&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fe85129a7a4025418f0efa7eafb65196f6338fe" translate="yes" xml:space="preserve">
          <source>Duplicate overloads matching the same type in one of the visitors are disallowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc16ad21d271cc28fc39654c94b04c509aaeeada" translate="yes" xml:space="preserve">
          <source>Duplicate this container. The resulting container contains a shallow copy of the elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cff863af2ce18e996162a094cbaf327406df3ed" translate="yes" xml:space="preserve">
          <source>Duplicate this handle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="889a9cca7b59b20e1a35bacd792adf966e23a88d" translate="yes" xml:space="preserve">
          <source>Duplicates</source>
          <target state="translated">Duplicates</target>
        </trans-unit>
        <trans-unit id="6e20b589aa6df2b4a8b01c6746eab8d8ca3617e0" translate="yes" xml:space="preserve">
          <source>Duplicates the &lt;code&gt;BitArray&lt;/code&gt; and its contents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c85af77478d7179a021e026a9b51351edc52f852" translate="yes" xml:space="preserve">
          <source>Duplicates the array. The elements themselves are not transitively duplicated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e7865574bd7823d0044616e1ee1d6d9cdff3d00" translate="yes" xml:space="preserve">
          <source>Duplicates the container. The elements themselves are not transitively duplicated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70c6d18f48b358cf705cd9d32f4242396d57c82d" translate="yes" xml:space="preserve">
          <source>Duplicates this &lt;code&gt;frontTransversal&lt;/code&gt;. Note that only the encapsulating range of range will be duplicated. Underlying ranges will not be duplicated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1370004da76fa4f3b7a5180fd5436065ef4c7d5b" translate="yes" xml:space="preserve">
          <source>Duration</source>
          <target state="translated">Duration</target>
        </trans-unit>
        <trans-unit id="7c1132f35da45d5af85bf32b2cd42c739981fe8d" translate="yes" xml:space="preserve">
          <source>Duration &lt;code&gt;duration&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f43ea6515e3d20a727bc9ceb0ded3e3985bfea29" translate="yes" xml:space="preserve">
          <source>Duration &lt;code&gt;fracSecs&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4db07fc9d025d6dca122dcd081981f03faf8c06d" translate="yes" xml:space="preserve">
          <source>Duration &lt;code&gt;period&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1058c37a804c6465609fd319f856edc7b95cd41" translate="yes" xml:space="preserve">
          <source>Duration &lt;code&gt;rhs&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acb4f6be6fa038d94a6684fa91b79637f83566a5" translate="yes" xml:space="preserve">
          <source>Duration &lt;code&gt;tmout&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="437f51f0e93fcf9a848d5569e4dfa0e920813016" translate="yes" xml:space="preserve">
          <source>Duration &lt;code&gt;utcOffset&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="768274ee3975a86c0844fdcb16d2a35285f29f34" translate="yes" xml:space="preserve">
          <source>Duration &lt;code&gt;val&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84d6dd410070e6a7e55306ddd911ce9d1fa874c6" translate="yes" xml:space="preserve">
          <source>Duration &lt;code&gt;value&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c2bafb9fe842c627b8e34a5a41cb92e24c037eb" translate="yes" xml:space="preserve">
          <source>Duration &lt;strong id=&quot;maxCollectionTime&quot;&gt;maxCollectionTime&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="615947f51ef7a81f57bc3da2067a415c70840e4d" translate="yes" xml:space="preserve">
          <source>Duration &lt;strong id=&quot;maxPauseTime&quot;&gt;maxPauseTime&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ad2215ff4ec69bcc4c35cb6884b6c2e949cde29" translate="yes" xml:space="preserve">
          <source>Duration &lt;strong id=&quot;totalCollectionTime&quot;&gt;totalCollectionTime&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1d97bac08417469a47a741116e255e1ede2c38d" translate="yes" xml:space="preserve">
          <source>Duration &lt;strong id=&quot;totalPauseTime&quot;&gt;totalPauseTime&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="365e9c607e20865c871c53952a3517838814d291" translate="yes" xml:space="preserve">
          <source>Duration timeout value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="799b124c8daf8718469cbae4456491d6aecf27e8" translate="yes" xml:space="preserve">
          <source>Duration[fun.length] &lt;strong id=&quot;benchmark&quot;&gt;benchmark&lt;/strong&gt;(fun...)(uint n);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01a2cc2568b87a3a494bd2eafcbbdf44739d7fa2" translate="yes" xml:space="preserve">
          <source>Durations of Time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07bb208f468d8b3ddd81b6ffef4767871ab2e0b2" translate="yes" xml:space="preserve">
          <source>Dynamic Array Layout</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2b34c5b7f4476c5b543850932f16344548fc1d9" translate="yes" xml:space="preserve">
          <source>Dynamic Array Properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6589f7c7fc3ae1ddd6d9ea0628690494a52e6667" translate="yes" xml:space="preserve">
          <source>Dynamic Arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de7306215588ef2471751e42c6ef7a7796dbbd5c" translate="yes" xml:space="preserve">
          <source>Dynamic Initialization of Structs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a1ec417f9656bfa58ac913f9a623361c31817a1" translate="yes" xml:space="preserve">
          <source>Dynamic String Object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dfe7ac24e000242d3210236b955fc6d93f77174" translate="yes" xml:space="preserve">
          <source>Dynamic allocator interface. Code that defines allocators ultimately implements this interface. This should be used wherever a uniform type is required for encapsulating various allocator implementations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6e94d0dd79dd4b04ec17eaa625ce2daf2263cb8" translate="yes" xml:space="preserve">
          <source>Dynamic array properties are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcf3f6b5602d426a76e64859371a3b8e82326184" translate="yes" xml:space="preserve">
          <source>Dynamic array, no dimension</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d44854713dee942aa855be9529ca9049d1f51a4" translate="yes" xml:space="preserve">
          <source>Dynamic arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b1f7143c558a88bd72bd07ce563ba1179684e46" translate="yes" xml:space="preserve">
          <source>Dynamic arrays (though slices of static arrays work) and associative arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6502e52c892b54fece51dcff086d445a369a930e" translate="yes" xml:space="preserve">
          <source>Dynamic arrays are formatted as input ranges.  Specializations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd2b48e308cffeab080f92b79babbd14ca12a9b6" translate="yes" xml:space="preserve">
          <source>Dynamic arrays are initialized to having 0 elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16a59a2d2944e36cc40d33dc27c3f04f2148ecb0" translate="yes" xml:space="preserve">
          <source>Dynamic arrays are returned with the pointer in EDX and the length in EAX.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ce2caad71bf4dd56046e9edc2df9b7e23f1b563" translate="yes" xml:space="preserve">
          <source>Dynamic arrays consist of a length and a pointer to the array data. Multiple dynamic arrays can share all or parts of the array data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b54578a708d1177bfc68570440611b3f68c4e3d7" translate="yes" xml:space="preserve">
          <source>Dynamic binding -- Qt's Signals and Slots vs Objective-C</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a26723c7c3553b927f3ca69df439741cc9ff45f0" translate="yes" xml:space="preserve">
          <source>Dynamic shared allocator interface. Code that defines allocators shareable across threads ultimately implements this interface. This should be used wherever a uniform type is required for encapsulating various allocator implementations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="758e372147a13eab85e0e2348816aeca5a5cf87b" translate="yes" xml:space="preserve">
          <source>Dynamically Typed Value Object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23e36053f3d03d5f62e159c1169e1004cb311b5b" translate="yes" xml:space="preserve">
          <source>Dynamically allocates (using &lt;code&gt;alloc&lt;/code&gt;) and then creates in the memory allocated an object of type &lt;code&gt;T&lt;/code&gt;, using &lt;code&gt;args&lt;/code&gt; (if any) for its initialization. Initialization occurs in the memory allocated and is otherwise semantically the same as &lt;code&gt;T(args)&lt;/code&gt;. (Note that using &lt;code&gt;alloc.make!(T[])&lt;/code&gt; creates a pointer to an (empty) array of &lt;code&gt;T&lt;/code&gt;s, not an array. To use an allocator to allocate and initialize an array, use &lt;code&gt;alloc.makeArray!T&lt;/code&gt; described below.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34ce244b6bf5d752a3f5544473bfc0e3809802c5" translate="yes" xml:space="preserve">
          <source>Dynamically allocates (using the appropriate allocator chosen with &lt;code&gt;allocatorFor!T&lt;/code&gt;) and then creates in the memory allocated an object of type &lt;code&gt;T&lt;/code&gt;, using &lt;code&gt;args&lt;/code&gt; (if any) for its initialization. Initialization occurs in the memory allocated and is otherwise semantically the same as &lt;code&gt;T(args)&lt;/code&gt;. (Note that using &lt;code&gt;make!(T[])&lt;/code&gt; creates a pointer to an (empty) array of &lt;code&gt;T&lt;/code&gt;s, not an array. To allocate and initialize an array, use &lt;code&gt;makeArray!T&lt;/code&gt; described below.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0184adedf913b076626646d3f52c3b49c39ad6d" translate="yes" xml:space="preserve">
          <source>E</source>
          <target state="translated">E</target>
        </trans-unit>
        <trans-unit id="c87a673760938363adec32d38a7ce2e63ff06dc4" translate="yes" xml:space="preserve">
          <source>E &lt;code&gt;c&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cab13dd2ab0edecf5f07f49ff5c30ac749537ea" translate="yes" xml:space="preserve">
          <source>E &lt;code&gt;e&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="654b3cd931994406b92e783e53bd21d8d15be1e3" translate="yes" xml:space="preserve">
          <source>E &lt;code&gt;element&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fa7346c4b309ed05ec509280861ca5282502720" translate="yes" xml:space="preserve">
          <source>E &lt;code&gt;end&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36696ce19b713f0e7192d8af3d4e8d66b818b117" translate="yes" xml:space="preserve">
          <source>E &lt;code&gt;expression&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41178eef3b8d5ea8f259ae34efc32aa2178b878b" translate="yes" xml:space="preserve">
          <source>E &lt;code&gt;lPar&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1451714e15dd7f03412e8b3df15c9865899b794" translate="yes" xml:space="preserve">
          <source>E &lt;code&gt;needle&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da623f5b68b27f40326d87a65ee8eabbb9a543cb" translate="yes" xml:space="preserve">
          <source>E &lt;code&gt;pivot&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d579a7cdba3a442fd745d93d48ef920a780541e" translate="yes" xml:space="preserve">
          <source>E &lt;code&gt;rPar&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e6d8c3d877bc4d0d225fa90451158b1d112a2ce" translate="yes" xml:space="preserve">
          <source>E &lt;code&gt;result&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b49a3ab1144291faa187044ae19832f647014922" translate="yes" xml:space="preserve">
          <source>E &lt;code&gt;seed&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c3d28f03f6fc526462dee33dea8868b1064430f" translate="yes" xml:space="preserve">
          <source>E &lt;strong id=&quot;moveAt&quot;&gt;moveAt&lt;/strong&gt;(size_t n);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeaa924cdd1fb426235a2a89796ef7f817847e58" translate="yes" xml:space="preserve">
          <source>E &lt;strong id=&quot;moveAt&quot;&gt;moveAt&lt;/strong&gt;(size_t);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b6060bed99df55889fedcc7ebd1dda48edc20bc" translate="yes" xml:space="preserve">
          <source>E &lt;strong id=&quot;moveBack&quot;&gt;moveBack&lt;/strong&gt;();</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70ba5bb514291f484fb16aff803acb49985b81d2" translate="yes" xml:space="preserve">
          <source>E &lt;strong id=&quot;moveFront&quot;&gt;moveFront&lt;/strong&gt;();</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bcc66f6ce127618b0ccfebf4dd0276bd0404552" translate="yes" xml:space="preserve">
          <source>E &lt;strong id=&quot;opIndex&quot;&gt;opIndex&lt;/strong&gt;(size_t);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22bec8dd2b08e66c06f91112cd2924b9824f4fbb" translate="yes" xml:space="preserve">
          <source>EAX allocated data, null if stack overflows</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bd5f8d7ae14ebe0f410005fa0ee4a2df8d30846" translate="yes" xml:space="preserve">
          <source>EAX, ECX, EDX are scratch registers and can be destroyed by a function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a86e3e3cac4abfb1ddb991c6016eb447bfb5086" translate="yes" xml:space="preserve">
          <source>EBX, ESI, EDI, EBP must be preserved across function calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd8f8916ced6868f49d5edae3f52ca90edef07ea" translate="yes" xml:space="preserve">
          <source>EF BB BF</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2abe262f3d9c19b48e58a958d307e0e7e6c94f0f" translate="yes" xml:space="preserve">
          <source>EFLAGS is assumed destroyed across function calls, except for the direction flag which must be forward.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a415e9a8573efb1bbda1a90eb747ad5f4c19fa97" translate="yes" xml:space="preserve">
          <source>EH Table Entry</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c7a265fd1e6b68c05bde4f42c601389064c93ed" translate="yes" xml:space="preserve">
          <source>EH Table Segment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bc604777adb22ae457a5473c397202e00689e23" translate="yes" xml:space="preserve">
          <source>EMPTY</source>
          <target state="translated">EMPTY</target>
        </trans-unit>
        <trans-unit id="d205abee3d2a71688a6b66568be289a94050031c" translate="yes" xml:space="preserve">
          <source>END</source>
          <target state="translated">END</target>
        </trans-unit>
        <trans-unit id="235f0479b81b99352344ba40f72272e7f500760e" translate="yes" xml:space="preserve">
          <source>E[] &lt;code&gt;array&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30968cd89d2de89aae2990a42c8165e26f50f9a1" translate="yes" xml:space="preserve">
          <source>E[] &lt;code&gt;elems&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c044a741516f01488c89439ef580a3ff478233bf" translate="yes" xml:space="preserve">
          <source>E[] &lt;code&gt;subject&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f217d5beff31c1ca2b1848f38ef906faae597466" translate="yes" xml:space="preserve">
          <source>E[] &lt;strong id=&quot;encode&quot;&gt;encode&lt;/strong&gt;(E)(dchar c);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd56c4205cae90ba13324d33630ab9d062248305" translate="yes" xml:space="preserve">
          <source>E[] &lt;strong id=&quot;replace&quot;&gt;replace&lt;/strong&gt;(E, R1, R2)(E[] subject, R1 from, R2 to)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f51610d23e4abe8c977115a859bbe3315b9eef7" translate="yes" xml:space="preserve">
          <source>E[] &lt;strong id=&quot;replaceFirst&quot;&gt;replaceFirst&lt;/strong&gt;(E, R1, R2)(E[] subject, R1 from, R2 to)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeafbf65fd3a9aa3deb4cbca03e3644a0587b086" translate="yes" xml:space="preserve">
          <source>E[] &lt;strong id=&quot;replaceLast&quot;&gt;replaceLast&lt;/strong&gt;(E, R1, R2)(E[] subject, R1 from, R2 to)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6ba4ade5ebf9a7e06a220ee8879663501891f2b" translate="yes" xml:space="preserve">
          <source>Each &lt;a href=&quot;#AssignExpression&quot;&gt;&lt;i&gt;AssignExpression&lt;/i&gt;&lt;/a&gt; in the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="970c6cbee0d5ba3d3d3bc667ccac13fe12be1735" translate="yes" xml:space="preserve">
          <source>Each &lt;a href=&quot;expression#AssignExpression&quot;&gt;&lt;i&gt;AssignExpression&lt;/i&gt;&lt;/a&gt; in the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="631d7ded095224de62f48a96e5644c6398acd903" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;Tuple&lt;/code&gt; is the same length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3399020b909958cac85e153ab516f6c7694ec40" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;front&lt;/code&gt; will not persist after &lt;code&gt;popFront&lt;/code&gt; is called, so the caller must copy its contents (e.g. by calling &lt;code&gt;to!string&lt;/code&gt;) when retention is needed. If the caller needs to retain a copy of every line, use the &lt;a href=&quot;#byLineCopy&quot;&gt;&lt;code&gt;byLineCopy&lt;/code&gt;&lt;/a&gt; function instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7a44f23b11cb96b96cd2ba0915faa0f052e0b5c" translate="yes" xml:space="preserve">
          <source>Each argument (including any &lt;code&gt;this&lt;/code&gt; pointer) is compared against the function's corresponding parameter, to determine the match level for that argument. The match level for a function is the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb45b718916691da1989010513d172008ff92bab" translate="yes" xml:space="preserve">
          <source>Each documentation comment is associated with a declaration. If the documentation comment is on a line by itself or with only whitespace to the left, it refers to the next declaration. Multiple documentation comments applying to the same declaration are concatenated. Documentation comments not associated with a declaration are ignored. Documentation comments preceding the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edbe8fa5098bb9e7391f688ef6b6ee2314274823" translate="yes" xml:space="preserve">
          <source>Each element is a &lt;a href=&quot;std_typecons#Tuple&quot;&gt;&lt;code&gt;std.typecons.Tuple&lt;/code&gt;&lt;/a&gt; containing the index and the element, in that order, where the index member is named &lt;code&gt;index&lt;/code&gt; and the element member is named &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f713367635244c4763db8b557037fbd71862c126" translate="yes" xml:space="preserve">
          <source>Each expression has a unique full expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="045e249c636ce92b7d03d5926827a365b72e955d" translate="yes" xml:space="preserve">
          <source>Each flag represents a field that can be included in the JSON output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5177bac79e351e65e9f095012536f0d31e1946c9" translate="yes" xml:space="preserve">
          <source>Each record should contain the same number of fields</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ed967b9db86d0b5204db6ba5bddc65d5e95f444" translate="yes" xml:space="preserve">
          <source>Eager parallel map. The eagerness of this function means it has less overhead than the lazily evaluated &lt;code&gt;TaskPool.map&lt;/code&gt; and should be preferred where the memory requirements of eagerness are acceptable. &lt;code&gt;functions&lt;/code&gt; are the functions to be evaluated, passed as template alias parameters in a style similar to &lt;a href=&quot;std_algorithm_iteration#map&quot;&gt;&lt;code&gt;std.algorithm.iteration.map&lt;/code&gt;&lt;/a&gt;. The first argument must be a random access range. For performance reasons, amap will assume the range elements have not yet been initialized. Elements will be overwritten without calling a destructor nor doing an assignment. As such, the range must not contain meaningful data: either un-initialized objects, or objects in their &lt;code&gt;.init&lt;/code&gt; state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c6575a18eb9b2fb3966e6ef26042f110228071b" translate="yes" xml:space="preserve">
          <source>Eagerly advances &lt;code&gt;r&lt;/code&gt; itself (not a copy) exactly &lt;code&gt;n&lt;/code&gt; times (by calling &lt;code&gt;r.popFront&lt;/code&gt;). &lt;code&gt;popFrontExactly&lt;/code&gt; takes &lt;code&gt;r&lt;/code&gt; by &lt;code&gt;ref&lt;/code&gt;, so it mutates the original range. Completes in &amp;Omicron;(&lt;code&gt;1&lt;/code&gt;) steps for ranges that support slicing, and have either length or are infinite. Completes in &amp;Omicron;(&lt;code&gt;n&lt;/code&gt;) time for all other ranges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="013c49ea1dde714e0a3a2fb0379b67f24fba5a76" translate="yes" xml:space="preserve">
          <source>Eagerly concatenates all of the ranges in &lt;code&gt;ror&lt;/code&gt; together (with the GC) into one array using &lt;code&gt;sep&lt;/code&gt; as the separator if present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0675dcff491ec3b808cdc7c8d2ede81bbb0ddeb" translate="yes" xml:space="preserve">
          <source>Eagerly evaluates and caches another range's &lt;code&gt;front&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34fb6db85c18082d6a3fa90368894fb8d976e6bd" translate="yes" xml:space="preserve">
          <source>Eagerly iterates over &lt;code&gt;r&lt;/code&gt; and calls &lt;code&gt;fun&lt;/code&gt; over each element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4e28a21c2fa843876b16d9be4d1cc2f403c77b2" translate="yes" xml:space="preserve">
          <source>Eagerly split a range or string into an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d87236b0de760733175e1874c38a59c48b27028" translate="yes" xml:space="preserve">
          <source>Eagerly splits &lt;code&gt;range&lt;/code&gt; into an array, using &lt;code&gt;sep&lt;/code&gt; as the delimiter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d27eae008f59d8f1f91c00161f3159b86155fb96" translate="yes" xml:space="preserve">
          <source>Effectively a namespace to make it clear that the methods it contains are getting the time from the system clock. It cannot be instantiated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a916cbf64fcae583b211aefc5aaa6379657e245f" translate="yes" xml:space="preserve">
          <source>Effectively it's a forward range of Captures!R, produced by lazily searching for matches in a given input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aca7b73e0a41a8787ac878b76dda80e96536be1b" translate="yes" xml:space="preserve">
          <source>Effectively this creates a 'tester' lambda suitable for algorithms like std.algorithm.find that take unary predicates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd9f4825654c8b3616fba4aa5643f7ea0757d86c" translate="yes" xml:space="preserve">
          <source>Efficiently calculates x * 2&lt;sup&gt;n&lt;/sup&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14aca9bf4e0924cef20dae33b10f37cdb469f89b" translate="yes" xml:space="preserve">
          <source>Egyptian Hieroglyphs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb212465dbae7203df4ab62ae8863407da33e722" translate="yes" xml:space="preserve">
          <source>Egyptian_Hieroglyphs</source>
          <target state="translated">Egyptian_Hieroglyphs</target>
        </trans-unit>
        <trans-unit id="9bf6d61222f740d6395d5c0a917b01c65ac7a82e" translate="yes" xml:space="preserve">
          <source>Either &lt;code&gt;SocketOption.SNDTIMEO&lt;/code&gt; or &lt;code&gt;SocketOption.RCVTIMEO&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b538213d432e073149fc8ce936d87efd13bbae8b" translate="yes" xml:space="preserve">
          <source>Either &lt;code&gt;front&lt;/code&gt; and &lt;code&gt;back&lt;/code&gt; are disjoint, or &lt;code&gt;back&lt;/code&gt; is reachable from &lt;code&gt;front&lt;/code&gt; and &lt;code&gt;front&lt;/code&gt; is not reachable from &lt;code&gt;back&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bb6162d792c8db1e60f256982fb8e204e3145a0" translate="yes" xml:space="preserve">
          <source>Either a single element, or a &lt;a href=&quot;std_range_primitives#isForwardRange&quot;&gt;forward range&lt;/a&gt; of elements, to be evaluated in turn against each element in &lt;code&gt;haystack&lt;/code&gt; under the given predicate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56799ecf425da0fe03950f720256493fc8f97323" translate="yes" xml:space="preserve">
          <source>Either a suitable block of &lt;code&gt;n&lt;/code&gt; bytes aligned at &lt;code&gt;a&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cce4bcaf50fdceff52e6b76b4f40f1e91193a96c" translate="yes" xml:space="preserve">
          <source>Elem &lt;strong id=&quot;back&quot;&gt;back&lt;/strong&gt;();</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a64a0dd8f8de41ca8f9155d1c41f1246f2b78d16" translate="yes" xml:space="preserve">
          <source>Elem &lt;strong id=&quot;front&quot;&gt;front&lt;/strong&gt;();</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07fc2178c4163e292259cfb2eeb452fa28ebb264" translate="yes" xml:space="preserve">
          <source>Elem &lt;strong id=&quot;removeAny&quot;&gt;removeAny&lt;/strong&gt;();</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="815fed41d2b5c32373a2ba77bc841eb55036192a" translate="yes" xml:space="preserve">
          <source>Element &lt;code&gt;item&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="617b6ad21e69ef0e23e6081aaddb2e46c0aa49f9" translate="yes" xml:space="preserve">
          <source>Element &lt;code&gt;needle&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cc795bd839deb73768f3b2b378624de54ec5c8e" translate="yes" xml:space="preserve">
          <source>Element or range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5d3f7d287d7ac65d2f0d6c2698caa1155f2bb82" translate="yes" xml:space="preserve">
          <source>Element sampling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="441f754d30b34ec6f455f3b63ab4e3ef12fa2567" translate="yes" xml:space="preserve">
          <source>Element type for the tree</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a017ecfbaef83e525a46dc1052a60ee1f7dcc34" translate="yes" xml:space="preserve">
          <source>Element type of &lt;code&gt;range&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9ad4909fe4e9413a21c83b4b347fd8272797126" translate="yes" xml:space="preserve">
          <source>Element types. These should be combined with storage classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a86309a78186d3dff495cf566f9a99d9a424ccb" translate="yes" xml:space="preserve">
          <source>ElementEncodingType!(ElementType!RoR)[] &lt;strong id=&quot;join&quot;&gt;join&lt;/strong&gt;(RoR)(RoR ror)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ae890c2864d9cb7135c605192d53170ba9f48e8" translate="yes" xml:space="preserve">
          <source>ElementEncodingType!(ElementType!RoR)[] &lt;strong id=&quot;join&quot;&gt;join&lt;/strong&gt;(RoR, E)(RoR ror, scope E sep)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cb7f607653348ef8248d1403fc1b7cb812dc41c" translate="yes" xml:space="preserve">
          <source>ElementEncodingType!(ElementType!RoR)[] &lt;strong id=&quot;join&quot;&gt;join&lt;/strong&gt;(RoR, R)(RoR ror, scope R sep)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="702f931d0306af88b0823865552adc6fa0812c5d" translate="yes" xml:space="preserve">
          <source>ElementEncodingType!S[] &lt;strong id=&quot;replicate&quot;&gt;replicate&lt;/strong&gt;(S)(S s, size_t n)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42a3ba77b8c17a1ef2ce9dcc9fd601cdaa03846f" translate="yes" xml:space="preserve">
          <source>ElementEncodingType!S[] &lt;strong id=&quot;toLower&quot;&gt;toLower&lt;/strong&gt;(S)(S s)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="392acda9c596c467f63fe2c49f8758250301f4bd" translate="yes" xml:space="preserve">
          <source>ElementEncodingType!S[] &lt;strong id=&quot;toUpper&quot;&gt;toUpper&lt;/strong&gt;(S)(S s)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5379158f2d181b7fa9f49b4b944d580681d55b28" translate="yes" xml:space="preserve">
          <source>ElementHandler[string] &lt;strong id=&quot;onEndTag&quot;&gt;onEndTag&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3509bab6a8e8df125122f531a5102572618ae319" translate="yes" xml:space="preserve">
          <source>ElementType &lt;strong id=&quot;moveAt&quot;&gt;moveAt&lt;/strong&gt;(size_t n);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33ef2617a32e997a8e380250ba77dae4b8b6d9fc" translate="yes" xml:space="preserve">
          <source>ElementType &lt;strong id=&quot;moveBack&quot;&gt;moveBack&lt;/strong&gt;();</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2be9443bfc1f887c0ddfce9a4c4bebf9beb84b9" translate="yes" xml:space="preserve">
          <source>ElementType &lt;strong id=&quot;moveFront&quot;&gt;moveFront&lt;/strong&gt;();</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab1735c15e6bbd4f47316c932e21c0b1884f9074" translate="yes" xml:space="preserve">
          <source>ElementType &lt;strong id=&quot;opIndex&quot;&gt;opIndex&lt;/strong&gt;(size_t n);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ceae5422846c1850afe1536d2f161cc51bc15f2" translate="yes" xml:space="preserve">
          <source>ElementType!R &lt;strong id=&quot;moveAt&quot;&gt;moveAt&lt;/strong&gt;(R)(R r, size_t i);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6041d7706b79b33d558f662e1a591338bf754e6f" translate="yes" xml:space="preserve">
          <source>ElementType!R &lt;strong id=&quot;moveBack&quot;&gt;moveBack&lt;/strong&gt;(R)(R r);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ae77fbe5957fe1ff7bf65bc7bb4e202ac6e7310" translate="yes" xml:space="preserve">
          <source>ElementType!R &lt;strong id=&quot;moveFront&quot;&gt;moveFront&lt;/strong&gt;(R)(R r);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dba97a41f5d9403a5379470ec77587dfe2b378ab" translate="yes" xml:space="preserve">
          <source>ElementType!Range &lt;strong id=&quot;entropy&quot;&gt;entropy&lt;/strong&gt;(Range)(Range r)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54482da3f9235c6fbbbf0ed6a5f5744dc3f1fb04" translate="yes" xml:space="preserve">
          <source>ElementType!Range &lt;strong id=&quot;entropy&quot;&gt;entropy&lt;/strong&gt;(Range, F)(Range r, F max)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1daac9d4b0263465c14fe15886ba68d3da513b2" translate="yes" xml:space="preserve">
          <source>ElementType!Range &lt;strong id=&quot;sumOfLog2s&quot;&gt;sumOfLog2s&lt;/strong&gt;(Range)(Range r)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f2f50d89dda35c54cbe17ed4d5bc5e3935e704e" translate="yes" xml:space="preserve">
          <source>ElementType!S[] &lt;strong id=&quot;replicate&quot;&gt;replicate&lt;/strong&gt;(S)(S s, size_t n)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5af41717fc3e0c6b68c90ef101993c3de9cf4657" translate="yes" xml:space="preserve">
          <source>ElementType!Store &lt;strong id=&quot;removeAny&quot;&gt;removeAny&lt;/strong&gt;();</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81e6d0f4b8b168d02f8b5a91f64c39e265ade30e" translate="yes" xml:space="preserve">
          <source>ElementType!String[] &lt;strong id=&quot;array&quot;&gt;array&lt;/strong&gt;(String)(scope String str)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3bd4e1dc80bf2ee2b709752575c9a0862156bc5" translate="yes" xml:space="preserve">
          <source>Element[] &lt;strong id=&quot;elements&quot;&gt;elements&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb9e481b91ab17d164bbd39e916a61e4b19723f7" translate="yes" xml:space="preserve">
          <source>Elementary mathematical functions (powers, roots, trigonometry).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f985b24fa425c8c26af762a28cd7fb06853f0e7" translate="yes" xml:space="preserve">
          <source>Elements can be swapped across ranges of different types:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13dd77bf1e66f2b40efa3b9e8d4d21e1130a5e9f" translate="yes" xml:space="preserve">
          <source>Elements for a bit field representing memory block attributes. These are manipulated via the getAttr, setAttr, clrAttr functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c838e4b542ac5aa6a62ecd0a260e0e5a1e61eb97" translate="yes" xml:space="preserve">
          <source>Elems</source>
          <target state="translated">Elems</target>
        </trans-unit>
        <trans-unit id="fc0ff864861865bae147c8715abde6277197adcb" translate="yes" xml:space="preserve">
          <source>Elems are the basic tree element. They can be either terminal elems (leaves), unary elems (left subtree exists) or binary elems (left and right subtrees exist).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37137a150453c8341dc88dc5e4a24adeca9da8da" translate="yes" xml:space="preserve">
          <source>Eliminates elements at given offsets from &lt;code&gt;range&lt;/code&gt; and returns the shortened range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7961b40e09efce39bb1596a6f0073b30b5359e24" translate="yes" xml:space="preserve">
          <source>Else if either operand is &lt;code&gt;double&lt;/code&gt;, the other operand is converted to &lt;code&gt;double&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f17ee232bd9cb197e4fd87f9507c3c4dbb560cd" translate="yes" xml:space="preserve">
          <source>Else if either operand is &lt;code&gt;float&lt;/code&gt;, the other operand is converted to &lt;code&gt;float&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9609e0b7e6ea340dbf05465faf2ff6efe7d4b312" translate="yes" xml:space="preserve">
          <source>Else the integer promotions are done on each operand, followed by:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="893da40d8f9df3d0daa923e7df9a12d1a05b2a0c" translate="yes" xml:space="preserve">
          <source>ElseStatement</source>
          <target state="translated">ElseStatement</target>
        </trans-unit>
        <trans-unit id="6b2e0054898f373aae2215ecda0f85d8c9f14b1d" translate="yes" xml:space="preserve">
          <source>EmailStatus &lt;strong id=&quot;isEmail&quot;&gt;isEmail&lt;/strong&gt;(Char)(const(Char)[] email, CheckDns checkDNS = No.checkDns, EmailStatusCode errorLevel = EmailStatusCode.none)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1295ed0c2f947c93f62b24a516ec70bae65910d9" translate="yes" xml:space="preserve">
          <source>EmailStatusCode &lt;code&gt;errorLevel&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee568c86daa6658674d61b601ab68991b94f1e98" translate="yes" xml:space="preserve">
          <source>EmailStatusCode &lt;code&gt;statusCode&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ebe11a2c604519a279794e1deefdb918d19d099" translate="yes" xml:space="preserve">
          <source>Embed these highlighting commands in the text stream. HIGHLIGHT.Escape indicates a Color follows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2957d7f1b575cf6674f3b9cd21c15484f7fb0b85" translate="yes" xml:space="preserve">
          <source>Embedded Code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bff0882940fac652cad3dd1bc8ec9e7bd34c15e" translate="yes" xml:space="preserve">
          <source>Embedded Comments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="883b86e78b11fee2715119068e524fae48a93354" translate="yes" xml:space="preserve">
          <source>Embedded HTML</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afb3c8cf26049457eca4057cf4fd156dcc008d93" translate="yes" xml:space="preserve">
          <source>Embedded documentation comments are one of the following forms:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="043c2cfcce9821785484b7fc5bceb933d7a9060f" translate="yes" xml:space="preserve">
          <source>Embedded documentation comments are processed in a series of phases:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04a28bd6845e9c95330e13fd7f59f93dbf4e7b08" translate="yes" xml:space="preserve">
          <source>Emit prefetch instruction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac6ff37e2f54571cc60828ad2c5211775b2622b5" translate="yes" xml:space="preserve">
          <source>Emoticons</source>
          <target state="translated">Emoticons</target>
        </trans-unit>
        <trans-unit id="b55c446755b6bea6f311ce6517e64a2b1c2e459b" translate="yes" xml:space="preserve">
          <source>Empty Structs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c6e2b73fed51429a5a892cd9c8056cf6678edd7" translate="yes" xml:space="preserve">
          <source>Empty and separator-only ranges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="030c3429dfb8a61c15a21ebff544e445beb8e45e" translate="yes" xml:space="preserve">
          <source>Enable (unmask) specific hardware exceptions. Multiple exceptions may be ORed together.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47209fc977a3d6844b590f95a2e890da8c62a167" translate="yes" xml:space="preserve">
          <source>Enable Or Disable Extended Result Codes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ae5828f55ab597198616d5a6a29272c5472108b" translate="yes" xml:space="preserve">
          <source>Enable Or Disable Extension Loading</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f3889a08ab86ec8ddcc4be30913885c66215716" translate="yes" xml:space="preserve">
          <source>Enable Or Disable Shared Pager Cache</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bce37c03cdb1ea1c2db7e72938269d734302d1b" translate="yes" xml:space="preserve">
          <source>Enable SSL/TLS for FTP, pick one of: CURLFTPSSL_TRY - try using SSL, proceed anyway otherwise CURLFTPSSL_CONTROL - SSL for the control connection or fail CURLFTPSSL_ALL - SSL for all communication or fail</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cbf90ffe7b5043f00cb0b86caba37bb56558b58" translate="yes" xml:space="preserve">
          <source>Enable keep-alive packets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10efdb46d610a542c9c965d276df321b68e5b03f" translate="yes" xml:space="preserve">
          <source>Enable merging of coverage reports with existing data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b84845f1dfde2cfcd609b3fdd44a1877a729e347" translate="yes" xml:space="preserve">
          <source>Enable/disable the TCP Nagle algorithm</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d44a972ab5a45fa93d33bed969870132f92a36c" translate="yes" xml:space="preserve">
          <source>Enables TCP keep-alive with the specified parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79bcddb5a0eeb733d6cee82beff697e093ac845f" translate="yes" xml:space="preserve">
          <source>Enables automatic garbage collection behavior if collections have previously been suspended by a call to disable. This function is reentrant, and must be called once for every call to disable before automatic collections are enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5b9df3f99d6bcd73bd5fffe2b0799d07c917202" translate="yes" xml:space="preserve">
          <source>Encapsulate Parameters* so .length and [i] can be used on it. &lt;a href=&quot;https://dlang.org/spec/function.html#ParameterList&quot;&gt;https://dlang.org/spec/function.html#ParameterList&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9c7711e4b76eb88caee19cd84075750386f2e48" translate="yes" xml:space="preserve">
          <source>Encapsulate path and file names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d4f5fbb3a956c798f6999285ecf9cf7a69251e8" translate="yes" xml:space="preserve">
          <source>Encapsulates a &lt;code&gt;FILE*&lt;/code&gt;. Generally D does not attempt to provide thin wrappers over equivalent functions in the C standard library, but manipulating &lt;code&gt;FILE*&lt;/code&gt; values directly is unsafe and error-prone in many ways. The &lt;code&gt;File&lt;/code&gt; type ensures safe manipulation, automatic file closing, and a lot of convenience.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42f3f54b4a70b84c3d0e6908ba2c470466ee4877" translate="yes" xml:space="preserve">
          <source>Encapsulates all implementation-level data needed for scheduling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="748e49eacf2c1a655647e4253e6a96c30a279303" translate="yes" xml:space="preserve">
          <source>Encapsulates unique ownership of a resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e40ad790e55199e7d2ef0dbc7fabf2db622c12ec" translate="yes" xml:space="preserve">
          <source>Enclosed Alphanumeric Supplement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6b4a28e228cf42e5ab146723e0937d7bf37431e" translate="yes" xml:space="preserve">
          <source>Enclosed Alphanumerics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecbd1232b7421472379e7dc4138275ac6aa868e1" translate="yes" xml:space="preserve">
          <source>Enclosed CJK Letters and Months</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5214ea8b39e3e2f736d3259bf59f7b62a472bac" translate="yes" xml:space="preserve">
          <source>Enclosed Ideographic Supplement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b610eb478dd2651d7723bcf0f052053fc2c5033" translate="yes" xml:space="preserve">
          <source>Enclosing_Mark</source>
          <target state="translated">Enclosing_Mark</target>
        </trans-unit>
        <trans-unit id="782e817cf07d938d62f7f0517e130f19ec6b4cf1" translate="yes" xml:space="preserve">
          <source>Encode</source>
          <target state="translated">Encode</target>
        </trans-unit>
        <trans-unit id="3e475d947990d92a7a4d09f9a4707983b827e684" translate="yes" xml:space="preserve">
          <source>Encode and decode UTF-8, UTF-16 and UTF-32 strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a334ca888394778b3416c4aaed610512bec455a" translate="yes" xml:space="preserve">
          <source>Encode and decode Uniform Resource Identifiers (URIs).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a3ea83c8f7a80a45437a91f54c430d375ed83e9" translate="yes" xml:space="preserve">
          <source>Encode and decode Uniform Resource Identifiers (URIs). URIs are used in internet transfer protocols. Valid URI characters consist of letters, digits, and the characters &lt;b&gt;;/?:@&amp;amp;=+$,-.!~*'()&lt;/b&gt; Reserved URI characters are &lt;b&gt;;/?:@&amp;amp;=+$,&lt;/b&gt; Escape sequences consist of &lt;b&gt;%&lt;/b&gt; followed by two hex digits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3441d10c6cc1bf3c5ff4b87a06f4ce4e76401654" translate="yes" xml:space="preserve">
          <source>Encode source into a &lt;code&gt;char[]&lt;/code&gt; buffer using Base64 encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="220162a6e5b325187b91acc2c02d19d314f1fd83" translate="yes" xml:space="preserve">
          <source>Encode the given expression, which is assumed to be an rvalue literal as another type for use in CTFE. This corresponds roughly to the idiom *(Type *)&amp;amp;e.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ad8d5b089dad44fcb9b633792f5660c5a7cd53d" translate="yes" xml:space="preserve">
          <source>Encoded strings will not have any padding if the &lt;code&gt;Padding&lt;/code&gt; parameter is set to &lt;code&gt;NoPadding&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06c389c01cc77c1798feea52bafb6d47e85cf5d4" translate="yes" xml:space="preserve">
          <source>Encoder!Range &lt;strong id=&quot;encoder&quot;&gt;encoder&lt;/strong&gt;(Range)(Range range)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37bb3fd438866d7d6a800d64d5e82569366077ed" translate="yes" xml:space="preserve">
          <source>Encodes &lt;a href=&quot;http://realityinteractive.com/rgrzywinski/archives/000249.html&quot;&gt;edit operations&lt;/a&gt; necessary to transform one sequence into another. Given sequences &lt;code&gt;s&lt;/code&gt; (source) and &lt;code&gt;t&lt;/code&gt; (target), a sequence of &lt;code&gt;EditOp&lt;/code&gt; encodes the steps that need to be taken to convert &lt;code&gt;s&lt;/code&gt; into &lt;code&gt;t&lt;/code&gt;. For example, if &lt;code&gt;s = &quot;cat&quot;&lt;/code&gt; and &lt;code&gt;&quot;cars&quot;&lt;/code&gt;, the minimal sequence that transforms &lt;code&gt;s&lt;/code&gt; into &lt;code&gt;t&lt;/code&gt; is: skip two characters, replace 't' with 'r', and insert an 's'. Working with edit operations is useful in applications such as spell-checkers (to find the closest word to a given misspelled word), approximate searches, diff-style programs that compute the difference between files, efficient encoding of patches, DNA sequence analysis, and plagiarism detection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3da8545dfc7cfa2cac1f67c4cdd8acd325688097" translate="yes" xml:space="preserve">
          <source>Encodes &lt;code&gt;c&lt;/code&gt; in &lt;code&gt;str&lt;/code&gt;'s encoding and appends it to &lt;code&gt;str&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0154f11eaa6c395b0cc601aa424b12e43b6352b" translate="yes" xml:space="preserve">
          <source>Encodes &lt;code&gt;c&lt;/code&gt; into the static array, &lt;code&gt;buf&lt;/code&gt;, and returns the actual length of the encoded character (a number between &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;4&lt;/code&gt; for &lt;code&gt;char[4]&lt;/code&gt; buffers and a number between &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt; for &lt;code&gt;wchar[2]&lt;/code&gt; buffers).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e6104a6ab2772f371922f3aaeaeb7d2389d06bb" translate="yes" xml:space="preserve">
          <source>Encodes a single code point into a user-supplied, fixed-size buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10ddb4f7dd523c4befc685a3e0632670f78d6f59" translate="yes" xml:space="preserve">
          <source>Encodes a single code point into an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd958e479e5410a4cc921752fa501a1fa5bf4c58" translate="yes" xml:space="preserve">
          <source>Encodes a single code point to a delegate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e84d12b3e9a0bd7610b25c211345bfe28c02cc65" translate="yes" xml:space="preserve">
          <source>Encodes a single code point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fb3f11471ae30b471fb2d7c48448f96784bbdea" translate="yes" xml:space="preserve">
          <source>Encodes a string by replacing all characters which need to be escaped with appropriate predefined XML entities.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0311bab99351addf1e4e596241ca4f5800c003ee" translate="yes" xml:space="preserve">
          <source>Encodes source into an &lt;a href=&quot;std_range_primitives#isOutputRange&quot;&gt;output range&lt;/a&gt; using Base64 encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1c86a4c1f506295d95ffc6df9298ff289c2e793" translate="yes" xml:space="preserve">
          <source>Encodes source to newly-allocated buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70f275c65bf2cb900479221ec66705952ce2b93e" translate="yes" xml:space="preserve">
          <source>Encodes string &lt;code&gt;s&lt;/code&gt; into UTF-16 and returns the encoded string. &lt;code&gt;toUTF16z&lt;/code&gt; is suitable for calling the 'W' functions in the Win32 API that take an &lt;code&gt;LPCWSTR&lt;/code&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18e78253a5c62ee01707c07e6fe0d95281b69440" translate="yes" xml:space="preserve">
          <source>Encodes the UTF-8 string uri into a URI and returns that URI. Any character not a valid URI character is escaped. The '#' character is not escaped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="805d83a773804113c35b1c178f426b5d83bc5314" translate="yes" xml:space="preserve">
          <source>Encodes the UTF-8 string uriComponent into a URI and returns that URI. Any character not a letter, digit, or one of -.!~*'() is escaped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ce944cce4506abe10ef748e0dcaa7daa1599ca2" translate="yes" xml:space="preserve">
          <source>Encodes the contents of &lt;code&gt;s&lt;/code&gt; in units of type &lt;code&gt;Tgt&lt;/code&gt;, writing the result to an output range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c7e5df1b8876d8a4528edc6b37704fba0dde231" translate="yes" xml:space="preserve">
          <source>Encodes the elements of &lt;code&gt;s&lt;/code&gt; to UTF-16 and returns a newly GC allocated &lt;code&gt;wstring&lt;/code&gt; of the elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b85ee0f06ef14a8b4983d595facf07889fcdeaa4" translate="yes" xml:space="preserve">
          <source>Encodes the elements of &lt;code&gt;s&lt;/code&gt; to UTF-32 and returns a newly GC allocated &lt;code&gt;dstring&lt;/code&gt; of the elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4fa69cb4316c9e45077264d1be54ce0c8233a8d" translate="yes" xml:space="preserve">
          <source>Encodes the elements of &lt;code&gt;s&lt;/code&gt; to UTF-8 and returns a newly allocated string of the elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8932888046af9bb1c9f4652f83ea1afc7f9a87cf" translate="yes" xml:space="preserve">
          <source>Encoding / decoding Base64 format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e7952fa5a4905bd0cbd5639a2acedee76ceca8d" translate="yes" xml:space="preserve">
          <source>Encoding schemes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c4f36161365b1d3838bcbdd250887a7031a7e6b" translate="yes" xml:space="preserve">
          <source>EncodingScheme to handle ASCII</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="446d406963616098f3653df4a74a7dddda5a039f" translate="yes" xml:space="preserve">
          <source>EncodingScheme to handle Latin-1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6bf86f655741e69d6528dfdf4504b309aeec0a7" translate="yes" xml:space="preserve">
          <source>EncodingScheme to handle Latin-2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd6227348bc30155f280725c96868620ad2230e9" translate="yes" xml:space="preserve">
          <source>EncodingScheme to handle UTF-16 in native byte order</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be2fba0adf5350ce6b87d427869b7d2551c0de7d" translate="yes" xml:space="preserve">
          <source>EncodingScheme to handle UTF-32 in native byte order</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b49746e2674f13df8a872f2e10e509856c176586" translate="yes" xml:space="preserve">
          <source>EncodingScheme to handle UTF-8</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faeeae997244cadf686b50227182c2861e34762e" translate="yes" xml:space="preserve">
          <source>EncodingScheme to handle Windows-1250</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ffb35bddfecbce77d9f1afe7c2504515c41a641" translate="yes" xml:space="preserve">
          <source>EncodingScheme to handle Windows-1251</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="590090ad0ced92c41c7d0d87dd80d15aa2bc562b" translate="yes" xml:space="preserve">
          <source>EncodingScheme to handle Windows-1252</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bc8157b0e896cd216388715ec7f6749ad576c53" translate="yes" xml:space="preserve">
          <source>Encodings currently supported are UTF-8, UTF-16, UTF-32, ASCII, ISO-8859-1 (also known as LATIN-1), ISO-8859-2 (LATIN-2), WINDOWS-1250, WINDOWS-1251 and WINDOWS-1252.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ae196dd0d55e616b5fc4ddc9c0045f6f5796717" translate="yes" xml:space="preserve">
          <source>Encountered an invalid character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c563e61565c36beafce54d1011c140a395217b9" translate="yes" xml:space="preserve">
          <source>End of File</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26f22eedf68e21f94951e1814a0ef555343a9a70" translate="yes" xml:space="preserve">
          <source>End of Line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1922f8549c83f9841a0a3a96665a811403626eb9" translate="yes" xml:space="preserve">
          <source>End of medium</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4de459b167bc17b3a0e6bbfc5dba938d1d966746" translate="yes" xml:space="preserve">
          <source>End of text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c7f307345f3f9f062b9e039589289044820b04a" translate="yes" xml:space="preserve">
          <source>End of transmission</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d64987ee0b36791afc8558c7aa92bade6f37e738" translate="yes" xml:space="preserve">
          <source>End of transmission block</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceebd323052ebae99407c57b0c539216799488af" translate="yes" xml:space="preserve">
          <source>End-of-line (U+000A).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="322c5d3730703ae50125a473e7a7c3d0e9ef2301" translate="yes" xml:space="preserve">
          <source>Endianness</source>
          <target state="translated">Endianness</target>
        </trans-unit>
        <trans-unit id="13a5c5feafb1e854278095b06d5c23b1b6c39ea8" translate="yes" xml:space="preserve">
          <source>Endianness conversion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46c0381e6bc545755b616831881040e1b2f21be9" translate="yes" xml:space="preserve">
          <source>Endianness refers to the order in which multibyte types are stored. The two main orders are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="077056a263e02ed818ae98bf1fa380acb11b14ed" translate="yes" xml:space="preserve">
          <source>Enforce</source>
          <target state="translated">Enforce</target>
        </trans-unit>
        <trans-unit id="b48fd47a6c0cd5f02c2e6251cb7c4497455891d8" translate="yes" xml:space="preserve">
          <source>Enforces that the given value is true, throwing an &lt;code&gt;ErrnoException&lt;/code&gt; if it is not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ea84a73fbc3cd4c8a0ef912e19036649eae80de" translate="yes" xml:space="preserve">
          <source>Enforces that the given value is true. If the given value is false, an exception is thrown. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff68eb68195a8071792a3ca526f37b8bcbc8ec51" translate="yes" xml:space="preserve">
          <source>Enquiry</source>
          <target state="translated">Enquiry</target>
        </trans-unit>
        <trans-unit id="1ae4e99b78a129f094edccddc69d35644252e904" translate="yes" xml:space="preserve">
          <source>Ensure that the provided path exists</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29ccbf8748c2fbce9ee3867511df1c6e53e16753" translate="yes" xml:space="preserve">
          <source>Ensure the root path (the path minus the name) of the provided path exists, and terminate the process if it doesn't.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f56bd357515dfd89697384d6d4a430df26264c8" translate="yes" xml:space="preserve">
          <source>Ensures sufficient capacity to accommodate &lt;code&gt;e&lt;/code&gt; elements. If &lt;code&gt;e &amp;lt; capacity&lt;/code&gt;, this method does nothing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7496c87d8654c0d48379ac62a2d57a9cbf3195d3" translate="yes" xml:space="preserve">
          <source>Ensures* &lt;strong id=&quot;fensures&quot;&gt;fensures&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ecdf6feee54c3ecdc9ed86dd3b1d8d646d8d82e" translate="yes" xml:space="preserve">
          <source>Entry point for CTFE. A compile-time result is required. Give an error if not possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a1be1c96f470256fed749b9334c204f6340eda9" translate="yes" xml:space="preserve">
          <source>Enum Default Initializer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1ea6e59090424af41c0589b36355a75f90aa3a0" translate="yes" xml:space="preserve">
          <source>Enum Properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c419b2f60d486073fc04f184ff556748d53e97b" translate="yes" xml:space="preserve">
          <source>Enum declarations are used to define a group of constants.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="465cd0ed52d2e368b8931b724a70ae413c97f797" translate="yes" xml:space="preserve">
          <source>Enum options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b2b0b99f8b474622498c40d642e3acadf238431" translate="yes" xml:space="preserve">
          <source>Enum properties only exist for named enums.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b5232dbf7a0d383457da309b54268e5223b3cd1" translate="yes" xml:space="preserve">
          <source>EnumBaseType</source>
          <target state="translated">EnumBaseType</target>
        </trans-unit>
        <trans-unit id="5459409c4560a1853b8bcba1a6a798e678c27502" translate="yes" xml:space="preserve">
          <source>EnumMember</source>
          <target state="translated">EnumMember</target>
        </trans-unit>
        <trans-unit id="1cb2acbf0ed9c36886669ea0a63a81c566c074d5" translate="yes" xml:space="preserve">
          <source>EnumMembers</source>
          <target state="translated">EnumMembers</target>
        </trans-unit>
        <trans-unit id="fcd3434f3e84e6bf841e9b8a79d8c04bee767ab0" translate="yes" xml:space="preserve">
          <source>Enumerated types are converted to strings as their symbolic names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b3cd3ee7332b62ae93f10b73519c0675e0a4b7b" translate="yes" xml:space="preserve">
          <source>Enumeration type for normalization forms, passed as template parameter for functions like &lt;a href=&quot;#normalize&quot;&gt;&lt;code&gt;normalize&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4135d93181c7c7b6f7eebfce73c4b88f3696363b" translate="yes" xml:space="preserve">
          <source>Enumerator &lt;code&gt;start&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3104dd45718e6d1ac6a03b91ae67193ae8361f0" translate="yes" xml:space="preserve">
          <source>Enums</source>
          <target state="translated">Enums</target>
        </trans-unit>
        <trans-unit id="91b5a4505ff4388b543e615403e943b213e146be" translate="yes" xml:space="preserve">
          <source>Enums must have at least one member.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1173b2e11bd16e5dc36c119a4b84f02be11626b5" translate="yes" xml:space="preserve">
          <source>Environment variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af2c16f78a14f7f4e0c19bb8444d3b5d1ddbd6bc" translate="yes" xml:space="preserve">
          <source>Eponymous Templates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98960d79731e92f6a1481f64f5023d43b91903f0" translate="yes" xml:space="preserve">
          <source>Equal to &lt;a href=&quot;etc_c_curl#CURLcode&quot;&gt;&lt;code&gt;etc.c.curl.CURLcode&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb253eb5985c5dedcf6ea0e168a624316301f2da" translate="yes" xml:space="preserve">
          <source>Equality Expressions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0f7f003b5eae761303767b178c5b32ad771e92d" translate="yes" xml:space="preserve">
          <source>Equality comparisons (==, !=, is, !is) are permitted between all pointers, without restriction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0efd94caf98a8617b53c3b12681dbbfdad08e3c" translate="yes" xml:space="preserve">
          <source>Equality expressions compare the two operands for equality (&lt;code&gt;==&lt;/code&gt;) or inequality (&lt;code&gt;!=&lt;/code&gt;). The type of the result is &lt;code&gt;bool&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a821b59480ce2414bd6165847b5c1fb14cb79065" translate="yes" xml:space="preserve">
          <source>Equivalence is defined by the predicate &lt;code&gt;pred&lt;/code&gt;, which can be either binary, which is passed to &lt;a href=&quot;std_functional#binaryFun&quot;&gt;&lt;code&gt;std.functional.binaryFun&lt;/code&gt;&lt;/a&gt;, or unary, which is passed to &lt;a href=&quot;std_functional#unaryFun&quot;&gt;&lt;code&gt;std.functional.unaryFun&lt;/code&gt;&lt;/a&gt;. In the binary form, two range elements &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are considered equivalent if &lt;code&gt;pred(a,b)&lt;/code&gt; is true. In unary form, two elements are considered equivalent if &lt;code&gt;pred(a) == pred(b)&lt;/code&gt; is true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3d4d9eeca49f09a17fcd8a54a0fa4787c33d0da" translate="yes" xml:space="preserve">
          <source>Equivalent elements separated by an intervening non-equivalent element will appear in separate subranges; this function only considers adjacent equivalence. Elements in the subranges will always appear in the same order they appear in the original range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15ed9b5cca8803ef06cb9688dbc5af4fe192a4a4" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;file.writef(fmt, args, '\n')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce6d1bc952023308db732f8f94e2b34d7940aa93" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;fmax(x-y, 0)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e86802e906e78082747bcdbd4222e541b464705" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;write(args, '\n')&lt;/code&gt;. Calling &lt;code&gt;writeln&lt;/code&gt; without arguments is valid and just prints a newline to the standard output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1a5bc7d4ab0b05ff1942fc426e894258a7dcb1a" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;writef(fmt, args, '\n')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f2f6a15cf8da2b27e5a4af47b58e7ad71c0b3d9" translate="yes" xml:space="preserve">
          <source>Error</source>
          <target state="translated">Error</target>
        </trans-unit>
        <trans-unit id="c73f93f4b9a02f4e5a949fd11052e3a166c6f2ac" translate="yes" xml:space="preserve">
          <source>Error Codes And Messages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fc353a0378a6af6e63cb4e746bbbbd0e56d46cc" translate="yes" xml:space="preserve">
          <source>Error Logging Interface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebaf4b5ec788b16d6d54392acc5fde873dbc786a" translate="yes" xml:space="preserve">
          <source>Error exceptions get handled one way or another. There is nothing like a NULL pointer return indicating an error, followed by trying to use that NULL pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a623c8e1a198390969227d2d0b456f83bf23e21d" translate="yes" xml:space="preserve">
          <source>Error function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34d6de902e8eedf56209e7c63d5376af7cf4d10e" translate="yes" xml:space="preserve">
          <source>Error message</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50c855f2252890155a086cc4373ee4123aab7e7a" translate="yes" xml:space="preserve">
          <source>Error message from sqlite3_mprintf()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2252ea1e4cbf7755de129147ae3fdbeb59b1c86e" translate="yes" xml:space="preserve">
          <source>ErrorExp</source>
          <target state="translated">ErrorExp</target>
        </trans-unit>
        <trans-unit id="813b5f9ec8deffdd987c925d7e6501434e44711b" translate="yes" xml:space="preserve">
          <source>ErrorExp &lt;strong id=&quot;arrayOpInvalidError&quot;&gt;arrayOpInvalidError&lt;/strong&gt;(Expression e);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="805e86a8cbf628e38e4c45612c005a504009e79a" translate="yes" xml:space="preserve">
          <source>Errors</source>
          <target state="translated">Errors</target>
        </trans-unit>
        <trans-unit id="36fd0b0b802c6a97f7436e7a54204bfe482a5123" translate="yes" xml:space="preserve">
          <source>Errors are not part of the normal flow of a program. Errors are exceptional, unusual, and unexpected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e66bc34f0c40669df2318f69c4904fa255dc47c1" translate="yes" xml:space="preserve">
          <source>Errors throw a ZlibException.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21208fcb40762782f0bd5de0b94d3c459b091b72" translate="yes" xml:space="preserve">
          <source>Es &lt;code&gt;es&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4cfe1f435f06beaae8e7d7c6d43e5dddbe640bb" translate="yes" xml:space="preserve">
          <source>Escape</source>
          <target state="translated">Escape</target>
        </trans-unit>
        <trans-unit id="3e13e2405c74a25265ee4e281ccf78feafc5234d" translate="yes" xml:space="preserve">
          <source>Escape Sequences</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a8244906137fd404125079316acd1c376574734" translate="yes" xml:space="preserve">
          <source>Escapes URL strings (converts all letters consider illegal in URLs to their %XX versions). This function returns a new allocated string or NULL if an error occurred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c62c2a45ea9630e69c7b0296a18169ca1da2c6cd" translate="yes" xml:space="preserve">
          <source>Escapes a filename to be used for shell redirection with &lt;a href=&quot;#spawnShell&quot;&gt;&lt;code&gt;spawnShell&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#pipeShell&quot;&gt;&lt;code&gt;pipeShell&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#executeShell&quot;&gt;&lt;code&gt;executeShell&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="334839f3a4af8ebe642ad214739fca50dd79b867" translate="yes" xml:space="preserve">
          <source>Escapes an argv-style argument array to be used with &lt;a href=&quot;#spawnShell&quot;&gt;&lt;code&gt;spawnShell&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#pipeShell&quot;&gt;&lt;code&gt;pipeShell&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#executeShell&quot;&gt;&lt;code&gt;executeShell&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c42e53a2ef68cf047319483e6444a0150025a7f7" translate="yes" xml:space="preserve">
          <source>Essentially just calls &lt;code&gt;checkNestedReference() for each variable reference in &lt;/code&gt;e`.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37eefc2536d5ec542e4520a234de4d178700f2f2" translate="yes" xml:space="preserve">
          <source>Establish a connection. If the socket is blocking, connect waits for the connection to be made. If the socket is nonblocking, connect returns immediately and the connection attempt is still in progress.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb2a5e97585ee713b7b435ea0059ffc0b575e976" translate="yes" xml:space="preserve">
          <source>Estimated cost of using this index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dc2b41f9f62ae24f4ee1bdb98221a2c0df13e48" translate="yes" xml:space="preserve">
          <source>Ethiopic</source>
          <target state="translated">Ethiopic</target>
        </trans-unit>
        <trans-unit id="50a8bee7f3f7f91e053f811fb77da91693c7dedd" translate="yes" xml:space="preserve">
          <source>Ethiopic Extended</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b1c5f04c3cf37f71157c85cf3538322e5bf9da1" translate="yes" xml:space="preserve">
          <source>Ethiopic Extended-A</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c8438f345294d8ae21cfe001be4e6de5852f8b9" translate="yes" xml:space="preserve">
          <source>Ethiopic Supplement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec4e1ce13e95c935383dc5219130b98c64fd292a" translate="yes" xml:space="preserve">
          <source>Evaluate &amp;gt;,&amp;lt;=, etc. Resolves slices before comparing. Returns 0 or 1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63a877dc2e3925ab0262cba5e336e32067b1f868" translate="yes" xml:space="preserve">
          <source>Evaluate ==, !=. Resolves slices before comparing. Returns 0 or 1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8465fee9c60fa18c66485376de57ad47eb492b1" translate="yes" xml:space="preserve">
          <source>Evaluate An SQL Statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0a33e70cc28b1c16a65e2ac8b3f23349a36f271" translate="yes" xml:space="preserve">
          <source>Evaluate builtin function. Return result; NULL if cannot evaluate it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba342f0fe13aca65712f2259febed282817e389a" translate="yes" xml:space="preserve">
          <source>Evaluate is, !is. Resolves slices before comparing. Returns 0 or 1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dfd6ef81633d9cb47cabec388bec88396961ba5" translate="yes" xml:space="preserve">
          <source>Evaluate polynomial A(x) = a&lt;sub&gt;0&lt;/sub&gt; + a&lt;sub&gt;1&lt;/sub&gt;x + a&lt;sub&gt;2&lt;/sub&gt;x&lt;sup&gt;2&lt;/sup&gt; + a&lt;sub&gt;3&lt;/sub&gt;x&lt;sup&gt;3&lt;/sup&gt;; ...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5be27aeb62439a889f10e6c829e770637dd9146" translate="yes" xml:space="preserve">
          <source>Evaluates to &lt;code&gt;AliasSeq!(F!(T[0]), F!(T[1]), ..., F!(T[$ - 1]))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9629b284d8cc44b6dfe8df63c6a3f0d4084cc53c" translate="yes" xml:space="preserve">
          <source>Evaluating &lt;code&gt;doesPointTo(x, x)&lt;/code&gt; checks whether &lt;code&gt;x&lt;/code&gt; has internal pointers. This should only be done as an assertive test, as the language is free to assume objects don't have internal pointers (TDPL 7.1.3.5).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a4344337a70f4c33150fb408f68890c00d456e4" translate="yes" xml:space="preserve">
          <source>Evaluation is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66a21e1a42d0f889ed11cc2d4d6f241490fc741c" translate="yes" xml:space="preserve">
          <source>Evaluation is short-circuited if a true result is encountered; the template predicate must be instantiable with one of the given items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d17d4bfeca546c47272dfcbb85f447b4b26bf12" translate="yes" xml:space="preserve">
          <source>Evaluation order of options is &lt;code&gt;rt_options&lt;/code&gt;, then environment variables, then command line arguments, i.e. if command line arguments are not disabled, they can override options specified through the environment or embedded in the executable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="180eef85054f4fcea96ca798ddcbe7751670c0c9" translate="yes" xml:space="preserve">
          <source>Evaluation value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f02f12a41e5810b607c7f2ac63bab107ad16369" translate="yes" xml:space="preserve">
          <source>Even if template arguments are implicitly converted to the same template parameter type, they still refer to the same instance. This example uses a &lt;a href=&quot;#aggregate_templates&quot;&gt;&lt;code&gt;struct&lt;/code&gt; template&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="becac2a7bbc3661ded85df34941db446bcb8fc99" translate="yes" xml:space="preserve">
          <source>Even permutations are useful for generating coordinates of certain geometric shapes. Here's a non-trivial example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff9e5997c4690a9137a05954ed088426938f9897" translate="yes" xml:space="preserve">
          <source>Even though &lt;code&gt;B.foo(int)&lt;/code&gt; is a better match than &lt;code&gt; A.foo(long)&lt;/code&gt; for &lt;code&gt;foo(1)&lt;/code&gt;, it is an error because the two matches are in different overload sets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b34452177e48c546c9017df7b18cba01909144f" translate="yes" xml:space="preserve">
          <source>Even though a new scope is introduced, local symbol declarations cannot shadow (hide) other local symbol declarations in the same function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b53b461e5519dc40d2d9c94f0001bf7d1b8053d1" translate="yes" xml:space="preserve">
          <source>Even trivially sub-classing an exception involves writing boilerplate code for the constructor to: 1) correctly pass in the source file and line number the exception was thrown from; 2) be usable with &lt;a href=&quot;#enforce&quot;&gt;&lt;code&gt;enforce&lt;/code&gt;&lt;/a&gt; which expects exception constructors to take arguments in a fixed order. This mixin provides that boilerplate code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="646505488568f65dc2d08be5e7c3988051fbafd1" translate="yes" xml:space="preserve">
          <source>Even worse, good error handling code is itself error prone, tends to be the least tested (and therefore buggy) part of the project, and is frequently simply omitted. The end result is likely a &quot;blue screen of death&quot; as the program failed to deal with some unanticipated error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd3204ba4b70213492f01a9c5c68e7ab2ed1ff96" translate="yes" xml:space="preserve">
          <source>EvenChunks!Source &lt;strong id=&quot;evenChunks&quot;&gt;evenChunks&lt;/strong&gt;(Source)(Source source, size_t chunkCount)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4a0cc71be8cf518b622bbb5bc79c5bc5de1b789" translate="yes" xml:space="preserve">
          <source>Eventually, the attacker is able to determine the first character in the correct token because the sever takes slightly longer to return a rejection. This is due to the comparison moving on to second item in the two arrays, seeing they are different, and then sending the rejection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f00b8f841e4cef948de65d22226c93fa103650fa" translate="yes" xml:space="preserve">
          <source>Every data logged to this &lt;code&gt;MultiLogger&lt;/code&gt; will be distributed to all the &lt;code&gt;Logger&lt;/code&gt;s inserted into it. This &lt;code&gt;MultiLogger&lt;/code&gt; implementation can hold multiple &lt;code&gt;Logger&lt;/code&gt;s with the same name. If the method &lt;code&gt;removeLogger&lt;/code&gt; is used to remove a &lt;code&gt;Logger&lt;/code&gt; only the first occurrence with that name will be removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e61dc390abff2fed88336a14c32d2472d4eb8ec" translate="yes" xml:space="preserve">
          <source>Every log message with a &lt;code&gt;LogLevel&lt;/code&gt; lower as the global &lt;code&gt;LogLevel&lt;/code&gt; will be discarded before it reaches &lt;code&gt;writeLogMessage&lt;/code&gt; method of any &lt;code&gt;Logger&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="299691262b0966820ccb1f9ef81cef23f22ecbaf" translate="yes" xml:space="preserve">
          <source>Every subclass of &lt;code&gt;Logger&lt;/code&gt; has to call this constructor from their constructor. It sets the &lt;code&gt;LogLevel&lt;/code&gt;, and creates a fatal handler. The fatal handler will throw an &lt;code&gt;Error&lt;/code&gt; if a log call is made with level &lt;code&gt;LogLevel.fatal&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6bc748f9fbc0549e63a017cd5636a311c15fde2" translate="yes" xml:space="preserve">
          <source>Every symbol, type, and expression has properties that can be queried:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b71e20220eb46bc48ab7853c8f64b255dfcc7b90" translate="yes" xml:space="preserve">
          <source>Exact Alias</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8659b6d121f9dcc98345ea85f4be6011035d4e4c" translate="yes" xml:space="preserve">
          <source>Exactly &lt;code&gt;n - 1&lt;/code&gt; comparisons are needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="447595f030e16a9c11484fc6f4099975f890557c" translate="yes" xml:space="preserve">
          <source>Examine function signature for parameter p and see if the value of p can 'escape' the scope of the function. This is useful to minimize the needed annotations for the parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="c57552c19fd7d2da63a30f68727e3bb36eb45b21" translate="yes" xml:space="preserve">
          <source>Example from &quot;Introduction to Algorithms&quot; Cormen et al, p 146</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71d13cfc872d9ac46d96e5966fcea949405ebbc4" translate="yes" xml:space="preserve">
          <source>Example of a simple program printing its stack trace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="529363f48295f0e991d2c61b1b24a9fe1aecfa01" translate="yes" xml:space="preserve">
          <source>Example predicate that compares individual elements in reverse lexical order</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ab7721397827b925456d2a147cb5704105a62a7" translate="yes" xml:space="preserve">
          <source>Example usage:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ac96cc54ccaf408a3aa9265ec618b7d8d9688f3" translate="yes" xml:space="preserve">
          <source>Example using a custom predicate. Note that the needle appears as the second argument of the predicate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="7c5d41ac96fe781891640f2cc6ae31d7dac093fe" translate="yes" xml:space="preserve">
          <source>Example: in the expression &lt;code&gt;((f() * 2 &amp;amp;&amp;amp; g()) + 1) || h()&lt;/code&gt;, the smallest short-circuit expression of the subexpression &lt;code&gt;f() * 2&lt;/code&gt; is &lt;code&gt;f() * 2 &amp;amp;&amp;amp; g()&lt;/code&gt;. In the expression &lt;code&gt;(f() &amp;amp;&amp;amp; g()) + h()&lt;/code&gt;, the subexpression &lt;code&gt;h()&lt;/code&gt; has no smallest short-circuit expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b6e410f2f289a8e54fbc074511ef251ffbf64e5" translate="yes" xml:space="preserve">
          <source>Example: in the statement &lt;code&gt;return f() + g() * 2;&lt;/code&gt;, the full expression of &lt;code&gt;g() * 2&lt;/code&gt; is &lt;code&gt;f() + g() * 2&lt;/code&gt;, but not the full expression of &lt;code&gt;f() + g()&lt;/code&gt; because the latter is not parsed as a subexpression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="2b57735b929f758540f6f204a80a85ed5455f140" translate="yes" xml:space="preserve">
          <source>Exception Flags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20788aa11834509830be30396b88f6404f087e8c" translate="yes" xml:space="preserve">
          <source>Exception Handling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e3da5af2290e454a8dda9f1e0d4340536bda871" translate="yes" xml:space="preserve">
          <source>Exception allocation, cloning, and release compiler support routines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fffb66a488035e580bbe4d9dfb0563a4cf976029" translate="yes" xml:space="preserve">
          <source>Exception containing the row and column for when an exception was thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04ccd57adc7199b9320005b31e59d240c692ae76" translate="yes" xml:space="preserve">
          <source>Exception handling is done with the try-catch-finally statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dd8fbbbac9a5ffa8a85c3407866002bfd2a943a" translate="yes" xml:space="preserve">
          <source>Exception handling is supported. Evaluates to &lt;code&gt;false&lt;/code&gt; when compiling with command line switch &lt;a href=&quot;https://dlang.org/dmd.html#switch-betterC&quot;&gt;&lt;em&gt;-betterC&lt;/em&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7977347a7a7188c09ab63d88a93b935cd78760c4" translate="yes" xml:space="preserve">
          <source>Exception handling method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="989c0eb85b5a41ecfef7a4557f1cdced37ec6bb0" translate="yes" xml:space="preserve">
          <source>Exception handling stack unwinding is a relatively slow process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5701a5b5f69ab1f2d7097d5d051b3d32981e410" translate="yes" xml:space="preserve">
          <source>Exception handling support for Dwarf-style portable exceptions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9829d9ff9d8698ea752a98d4a92c4ea756a83270" translate="yes" xml:space="preserve">
          <source>Exception if it fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3fa8f21629b3a2bb2c1e659bd0f396554feda8e" translate="yes" xml:space="preserve">
          <source>Exception if there is an error while parsing the given XML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04d466ab829f02b64659284da536680cd0cead15" translate="yes" xml:space="preserve">
          <source>Exception interoperability is a work in progress.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac3a987430d7002abc0aeb021e7b76ae195d4418" translate="yes" xml:space="preserve">
          <source>Exception object thrown in case of errors during regex compilation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3b36ed4e90f7895ab9c1f841d81e354fcc19912" translate="yes" xml:space="preserve">
          <source>Exception thrown for file I/O errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb3e9f844a01a0b96967f3dd6a290735d00840ed" translate="yes" xml:space="preserve">
          <source>Exception thrown on HTTP request failures, e.g. 404 Not Found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfe22b35920246b957f97d99d530bac8696b368e" translate="yes" xml:space="preserve">
          <source>Exception thrown on JSON errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a84a6e62adad93da512146dbeb0d45a3dc267b49" translate="yes" xml:space="preserve">
          <source>Exception thrown on errors in std.net.curl functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="253a6febbe3430c64130d06fa5981a03478c1db8" translate="yes" xml:space="preserve">
          <source>Exception thrown on errors in std.string functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da2cac7a810249d2d11cee22b4057ecee00f3eee" translate="yes" xml:space="preserve">
          <source>Exception thrown on errors in std.utf functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b5a2ac6072f2d36ac52160e487df22a74f63da3" translate="yes" xml:space="preserve">
          <source>Exception thrown on timeout errors in std.net.curl functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a4bbb2d3d63ddeb86708dd8ce427adf6b7d165d" translate="yes" xml:space="preserve">
          <source>Exception thrown under different conditions based on the type of &lt;code&gt; Contents&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b352a0dfd2cdf2adffdd6d799e3b32a8a9e3145" translate="yes" xml:space="preserve">
          <source>Exception thrown upon encountering Base64 encoding or decoding errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66069ad3e21b6e2e8b6ef96e5b841bffb3ffeb38" translate="yes" xml:space="preserve">
          <source>Exception thrown when a Token is identified to not be completed: a quote is found in an unquoted field, data continues after a closing quote, or the quoted field was not closed before data was empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="905fb856166761ef9b7e30ba12340557f71b5efe" translate="yes" xml:space="preserve">
          <source>Exception type thrown upon any failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1d0d4844845d6b370b77234d0e77115c51b19af" translate="yes" xml:space="preserve">
          <source>Exception type to throw if the value evaluates to false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f928a890db6dee56e7f09963fd1b5750c95236a4" translate="yes" xml:space="preserve">
          <source>Exception type used by core.time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="653b9fe3f50eddc9f59c435dd81774a198a4bfb2" translate="yes" xml:space="preserve">
          <source>Exception type used by std.datetime. It's an alias to &lt;a href=&quot;core_time#TimeException&quot;&gt;&lt;code&gt;core.time.TimeException&lt;/code&gt;&lt;/a&gt;. Either can be caught without concern about which module it came from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15839feb51f6c7eb57eb20c2122df74004e3811b" translate="yes" xml:space="preserve">
          <source>ExceptionHeader to free</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="668deca20711f80b1c2101115452f3a6ad56520b" translate="yes" xml:space="preserve">
          <source>ExceptionHeader* &lt;code&gt;eh&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd3dfbe79fda3a9d92de67b1bd4f1dc9f60ab723" translate="yes" xml:space="preserve">
          <source>Exceptions</source>
          <target state="translated">Exceptions</target>
        </trans-unit>
        <trans-unit id="787a8beff59b551fcef4298de1a9187c800df51d" translate="yes" xml:space="preserve">
          <source>Exchange &lt;code&gt;exchangeWith&lt;/code&gt; with the memory referenced by &lt;code&gt;here&lt;/code&gt;. This operation is both lock-free and atomic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="947665622c6a0247540f1769e4059f113b774915" translate="yes" xml:space="preserve">
          <source>Execute and wait for completion, collect output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bf71057cfbf7879eaf07dde87aff1966a094423" translate="yes" xml:space="preserve">
          <source>Executed expressions may not reference any global or local static variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f05efa3a0f330761f283964056bd4c437269064" translate="yes" xml:space="preserve">
          <source>Executes and returns one of a collection of handlers based on the type of the switch object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2e599dd9da60b7076bf647f704ce6535a25f893" translate="yes" xml:space="preserve">
          <source>Executes the given program or shell command and returns its exit code and output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67781825ef8399fa41b8bb55aee1e69bf3a817d6" translate="yes" xml:space="preserve">
          <source>Executes the supplied function in a new logical thread represented by &lt;code&gt;Tid&lt;/code&gt;. The calling thread is designated as the owner of the new thread. When the owner thread terminates an &lt;code&gt;OwnerTerminated&lt;/code&gt; message will be sent to the new thread, causing an &lt;code&gt;OwnerTerminated&lt;/code&gt; exception to be thrown on &lt;code&gt;receive()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89a3e381c5ed655eb3aa0b9b587d8ce12bdc9bba" translate="yes" xml:space="preserve">
          <source>Executes the supplied function in a new logical thread represented by Tid. This new thread is linked to the calling thread so that if either it or the calling thread terminates a LinkTerminated message will be sent to the other, causing a LinkTerminated exception to be thrown on receive(). The owner relationship from spawn() is preserved as well, so if the link between threads is broken, owner termination will still result in an OwnerTerminated exception to be thrown on receive().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a3ee996ad5df75a0a1bb42a960cc73553d41928" translate="yes" xml:space="preserve">
          <source>Executing functions via CTFE can take considerably longer than executing it at run time. If the function goes into an infinite loop, it will hang at compile time (rather than hanging at run time).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b3292962bd3ae1aa2ceee38161b97042acb69b4" translate="yes" xml:space="preserve">
          <source>Expand alias this tuples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfc518ef6c3dabb73461eac4a36f80d62e55ffe4" translate="yes" xml:space="preserve">
          <source>Expand any response files in command line. Response files are arguments that look like: @NAME The name is first searched for in the environment. If it is not there, it is searched for as a file name. Arguments are separated by spaces, tabs, or newlines. These can be imbedded within arguments by enclosing the argument in '' or &quot;&quot;. Recursively expands nested response files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39c5e7d251d329155aba4b991a2b7a09613fc576" translate="yes" xml:space="preserve">
          <source>Expand tuples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3ed1860547be833e11502cb37798024cc995fdb" translate="yes" xml:space="preserve">
          <source>Expands &lt;code&gt;b&lt;/code&gt; by &lt;code&gt;delta&lt;/code&gt; bytes. If &lt;code&gt;delta == 0&lt;/code&gt;, succeeds without changing &lt;code&gt;b&lt;/code&gt;. If &lt;code&gt;b is null&lt;/code&gt;, returns &lt;code&gt;false&lt;/code&gt; (the null pointer cannot be expanded in place). Otherwise, &lt;code&gt;b&lt;/code&gt; must be a buffer previously allocated with the same allocator. If expansion was successful, &lt;code&gt;expand&lt;/code&gt; changes &lt;code&gt;b&lt;/code&gt;'s length to &lt;code&gt;b.length + delta&lt;/code&gt; and returns &lt;code&gt;true&lt;/code&gt;. Upon failure, the call effects no change upon the allocator object, leaves &lt;code&gt;b&lt;/code&gt; unchanged, and returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2b86b700bfa590be9e2b589c48ee8ac8959eaae" translate="yes" xml:space="preserve">
          <source>Expands a memory block in place and returns &lt;code&gt;true&lt;/code&gt; if successful. Implementations that don't support this primitive should always return &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b262eee9273f1fc433f6691461d187672e0c5b45" translate="yes" xml:space="preserve">
          <source>Expands an allocated block in place. Expansion will succeed only if the block is the last allocated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="626d5a99aecb87499fb1f3a504d6e69914d2e4c6" translate="yes" xml:space="preserve">
          <source>Expands an allocated block in place. Expansion will succeed only if the block is the last allocated. Defined only if &lt;code&gt;growDownwards&lt;/code&gt; is &lt;code&gt;No.growDownwards&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb2e7f8c65f285e69f36d6abb516fbfe712839e3" translate="yes" xml:space="preserve">
          <source>Expands attribute declarations in members in depth first order. Calls dg(size_t symidx, Dsymbol *sym) for each member. If dg returns !=0, stops and returns that value else returns 0. Use this function to avoid the O(N + N^2/2) complexity of calculating dim and calling N times getNth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="084a0336b3e0fa1cfbc75a4e2da9be624da8ae6d" translate="yes" xml:space="preserve">
          <source>Expands in place a buffer previously allocated by &lt;code&gt;BitmappedBlock&lt;/code&gt;. If instantiated with &lt;code&gt;No.multiblock&lt;/code&gt;, the expansion fails if the new length exceeds &lt;code&gt;theBlockSize&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="797c11627b7043dd4bdb15c59a63cf420baa3b9d" translate="yes" xml:space="preserve">
          <source>Expands in place a buffer previously allocated by &lt;code&gt;SharedBitmappedBlock&lt;/code&gt;. Expansion fails if the new length exceeds the block size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34de05ada292b06170f1d6656265bf476c629815" translate="yes" xml:space="preserve">
          <source>Expands or shrinks allocated block to an allocated size of &lt;code&gt; goodAllocSize(s)&lt;/code&gt;. Expansion occurs in place under the conditions required by &lt;code&gt;expand&lt;/code&gt;. Shrinking occurs in place if &lt;code&gt;goodAllocSize(b.length) == goodAllocSize(s)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ede9dbe92d17709e10217ef41b4cbf32ac479af" translate="yes" xml:space="preserve">
          <source>Expands the interval backwards in time. Effectively, it does &lt;code&gt;begin -= duration&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b57a74d337ac5a259427e1f3ea04c84032512812" translate="yes" xml:space="preserve">
          <source>Expands the interval forwards and/or backwards in time. Effectively, it adds the given number of months/years to end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e16a1c93e572148be3e3c1e14d575c1803a317a6" translate="yes" xml:space="preserve">
          <source>Expands the interval forwards and/or backwards in time. Effectively, it does &lt;code&gt;begin -= duration&lt;/code&gt; and/or &lt;code&gt;end += duration&lt;/code&gt;. Whether it expands forwards and/or backwards in time is determined by dir.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6115ade81a85a7f10953103eafa7ac7f27f7341b" translate="yes" xml:space="preserve">
          <source>Expands the interval forwards and/or backwards in time. Effectively, it subtracts the given number of months/years from &lt;code&gt;begin&lt;/code&gt; and adds them to &lt;code&gt;end&lt;/code&gt;. Whether it expands forwards and/or backwards in time is determined by dir.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f900e50b202dc7b5f34257efaca3c038012cd3e" translate="yes" xml:space="preserve">
          <source>Expands the interval forwards and/or backwards in time. Effectively, it subtracts the given number of months/years from &lt;code&gt;begin&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="316269b9bcff090b5279a8dfef454d19bf6429c9" translate="yes" xml:space="preserve">
          <source>Expands the interval forwards in time. Effectively, it does &lt;code&gt;end += duration&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc5691de73841ad488b58382733ae62e16cc0fbb" translate="yes" xml:space="preserve">
          <source>Expands to a named anchor used for hyperlinking to a particular declaration section. Argument &amp;amp;dollar;1 expands to the qualified declaration name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="076b445912ca06b9147fd4ce226d6bbff02a82c5" translate="yes" xml:space="preserve">
          <source>Expands tuples in args in depth first order. Calls dg(void *ctx, size_t argidx, Parameter *arg) for each Parameter. If dg returns !=0, stops and returns that value else returns 0. Use this function to avoid the O(N + N^2/2) complexity of calculating dim and calling N times getNth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcedc51cce47a902790753d67bea2312fe893839" translate="yes" xml:space="preserve">
          <source>Experienced FORTRAN numerics programmers know that multidimensional &quot;rectangular&quot; arrays for things like matrix operations are much faster than trying to access them via pointers to pointers resulting from &quot;array of pointers to array&quot; semantics. For example, the D syntax:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06490b0b5dc2e6f349a0c0ddde37643f5a5ac75c" translate="yes" xml:space="preserve">
          <source>Experimental network access via the File interface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15a7ffb04c4605a09649beb118c20c17de19ede4" translate="yes" xml:space="preserve">
          <source>Explains the return value of the function. If the function returns &lt;b&gt;void&lt;/b&gt;, don't redundantly document it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20774c9957e71e2e463d16df16c4cfff77b34323" translate="yes" xml:space="preserve">
          <source>Explicit Template Instantiation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbaa54eaab210a4cb9cfc7d9c1378fcdc2b85e52" translate="yes" xml:space="preserve">
          <source>Explicit cast to bool. Useful as a shorthand for !(x.empty) in if and assert statements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d8f05eb6d48b04794152e7b23638cae9f48f278" translate="yes" xml:space="preserve">
          <source>Explicit suffixes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a78d73b55b840cefe1a0a0daca2e42e60edecac9" translate="yes" xml:space="preserve">
          <source>Exponentiation &amp;amp; Logarithms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cd8e8a364673d3411b700d793c596d01bc2b145" translate="yes" xml:space="preserve">
          <source>Exposes the given root Array as a standard D array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97b695b9b9cfde3612c21b3add972cc0f21f4e26" translate="yes" xml:space="preserve">
          <source>Expression</source>
          <target state="translated">Expression</target>
        </trans-unit>
        <trans-unit id="124e31831c2789749ceb9147facc91550d3ce84a" translate="yes" xml:space="preserve">
          <source>Expression &lt;code&gt;arg&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92b421f69102c781d75346243b5587cc88f90fb6" translate="yes" xml:space="preserve">
          <source>Expression &lt;code&gt;e0&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7007fb43c92f8963b348d85ed11e388b0552e1c3" translate="yes" xml:space="preserve">
          <source>Expression &lt;code&gt;e1&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f394df42c68efb7c3038933322adc5a961a6b555" translate="yes" xml:space="preserve">
          <source>Expression &lt;code&gt;e&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e60c9324dd44b217718e5d601d55424f1b4789b" translate="yes" xml:space="preserve">
          <source>Expression &lt;code&gt;earg1&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f910b8428605cbf862e3d1bb322d73f52f00aea1" translate="yes" xml:space="preserve">
          <source>Expression &lt;code&gt;elem&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f2346f54fcfa8df07417dbd8829090b55118464" translate="yes" xml:space="preserve">
          <source>Expression &lt;code&gt;emsg&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cbf5e84e80504f53dddbdea7c64954b155cb357" translate="yes" xml:space="preserve">
          <source>Expression &lt;code&gt;exp&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37aac93cf0d495815e578c5699ff35828cf6f52d" translate="yes" xml:space="preserve">
          <source>Expression &lt;code&gt;feaggr&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a953ed52efeca5916127c7919696beebfa3bd1fc" translate="yes" xml:space="preserve">
          <source>Expression &lt;code&gt;firstArg&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="793cca28c8f3f384b396f7adfd08149a1c0bf195" translate="yes" xml:space="preserve">
          <source>Expression &lt;code&gt;instantiated&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d6980b81fee04c7b5a70125a6146240a73039e9" translate="yes" xml:space="preserve">
          <source>Expression &lt;code&gt;original&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0759ebb987367a96a51a5d1b5ffa1b699e18ec08" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;Expression_optimize&quot;&gt;Expression_optimize&lt;/strong&gt;(Expression e, int result, bool keepLvalue);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7eb0ac731fa465a7e553c45917e50e97836c4c4" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;addDtorHook&quot;&gt;addDtorHook&lt;/strong&gt;(Scope* sc);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79e7a3e2a6b6bb028e3dee36c35a16bbcac64b57" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;addInvariant&quot;&gt;addInvariant&lt;/strong&gt;(ref const Loc loc, Scope* sc, AggregateDeclaration ad, VarDeclaration vthis);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7de6a20914bd0188b326ef7d4369047d4127694" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;arrayOp&quot;&gt;arrayOp&lt;/strong&gt;(BinAssignExp e, Scope* sc);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38cbef71fac259fb3e5addd6010c78720766a7e4" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;arrayOp&quot;&gt;arrayOp&lt;/strong&gt;(BinExp e, Scope* sc);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d05e7a6332b506aff76d8910b31057f52e8e38f0" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;basis&quot;&gt;basis&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce914de3f03e3182cbb394d12e8e44d61e13a1f4" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;binSemantic&quot;&gt;binSemantic&lt;/strong&gt;(BinExp e, Scope* sc);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07cd4a6028fc596b40b13d6d0458444d8de8c8ab" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;build_overload&quot;&gt;build_overload&lt;/strong&gt;(ref const Loc loc, Scope* sc, Expression ethis, Expression earg, Dsymbol d);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6871fa1d9cef9535c1f853ab6b02a766a657fbfb" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;castTo&quot;&gt;castTo&lt;/strong&gt;(Expression e, Scope* sc, Type t);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b45466acfd0d3d2ded6118c9809d1350d706c46" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;charPromotions&quot;&gt;charPromotions&lt;/strong&gt;(Expression e, Scope* sc);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3411c26ed41d2305da3a489d8bf4719326ae9f77" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;condition&quot;&gt;condition&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6931cb91b1ae0e41a9ee765db1152dfb33ce0d4" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;ctfeInterpret&quot;&gt;ctfeInterpret&lt;/strong&gt;(Expression e);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1f6d0f109e3e21ea56ab0c366d0d61e14ee4c7d" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;defaultInit&quot;&gt;defaultInit&lt;/strong&gt;(Type mt, ref const Loc loc);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d97a47c0800d46fd3cd2e538e048bb178e515f0c" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;defaultInitLiteral&quot;&gt;defaultInitLiteral&lt;/strong&gt;(ref const Loc loc);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a092a26bbbc3c916453f449b7418f845d33b41c" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;doCopyOrMove&quot;&gt;doCopyOrMove&lt;/strong&gt;(Scope* sc, Expression e, Type t = null);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34a3fc99823ccdc5563fe45ca6f4cc54c969827f" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;dotExp&quot;&gt;dotExp&lt;/strong&gt;(Type mt, Scope* sc, Expression e, Identifier ident, int flag);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="192530034d665cef7795047e56ecf307c8762064" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;eval_builtin&quot;&gt;eval_builtin&lt;/strong&gt;(Loc loc, FuncDeclaration fd, Expressions* arguments);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80a303e71b3ae3f7d7217b7e5618f20dbd2535a9" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;exp&quot;&gt;exp&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eb2e3ce9ac3932da76f3de31bbf848ad262e34e" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;expandVar&quot;&gt;expandVar&lt;/strong&gt;(int result, VarDeclaration v);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfb3029a50e65b9de4b512fbdb1d29b5615172e3" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;extractSideEffect&quot;&gt;extractSideEffect&lt;/strong&gt;(Scope* sc, const char* name, ref Expression e0, Expression e, bool alwaysCopy = false);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efcc60927be71d26c3c816535424c83c4bde8e5a" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;getField&quot;&gt;getField&lt;/strong&gt;(Type type, uint offset);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c869349f6aded66c0c7140fab666e82c3d45d29" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;getMaxMinValue&quot;&gt;getMaxMinValue&lt;/strong&gt;(ref const Loc loc, Identifier id);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf05303975b50b18a00371bfbf097a643287e833" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;getProperty&quot;&gt;getProperty&lt;/strong&gt;(Type t, ref const Loc loc, Identifier ident, int flag);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ed9d54715957ffd3217c453236ae0352ea8d40c" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;getTargetInfo&quot;&gt;getTargetInfo&lt;/strong&gt;(const(char)* name, ref const Loc loc);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a06617afbe33da227ef8899ec1e3a2bf9eda75fc" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;getThisSkipNestedFuncs&quot;&gt;getThisSkipNestedFuncs&lt;/strong&gt;(ref const Loc loc, Scope* sc, Dsymbol s, AggregateDeclaration ad, Expression e1, Type t, Dsymbol var, bool flag = false);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5182dc71276170cd9c912e2c20da5b0104e0baed" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;identExp&quot;&gt;identExp&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6002f1b5688ee38493cb8bf57b584c7ad904867f" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;implicitCastTo&quot;&gt;implicitCastTo&lt;/strong&gt;(Expression e, Scope* sc, Type t);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9fbd63977c9b0f6b381d61e7486228255c3141c" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;inferType&quot;&gt;inferType&lt;/strong&gt;(Expression e, Type t, int flag = 0);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4eed1230d55b4f7ffdb0f2946ec6b81e685c4d5" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;initializerToExpression&quot;&gt;initializerToExpression&lt;/strong&gt;(Initializer init, Type itype = null);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fd9077340336bbdc42e5a0e55ae876cf74bf052" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;inlineCopy&quot;&gt;inlineCopy&lt;/strong&gt;(Expression e, Scope* sc);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a93d5e116a77484a91fb6b2216ee9f2c3ab792bc" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;integralPromotions&quot;&gt;integralPromotions&lt;/strong&gt;(Expression e, Scope* sc);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="119f4b90e73b2490c0b337b5c2892ee45abe1b1b" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;op_overload&quot;&gt;op_overload&lt;/strong&gt;(Expression e, Scope* sc, TOK* pop = null);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce92783572475e6e71bead0fd27548b7a7fa8d60" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;resolveLoc&quot;&gt;resolveLoc&lt;/strong&gt;(ref const Loc loc, Scope* sc);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20d217b5757071adb84549bfb94bd0bc8a5ef317" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;resolveOpDollar&quot;&gt;resolveOpDollar&lt;/strong&gt;(Scope* sc, ArrayExp ae, Expression* pe0);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35eac18ed0785aafed68f419dd6c566022d1d5a9" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;resolveOpDollar&quot;&gt;resolveOpDollar&lt;/strong&gt;(Scope* sc, ArrayExp ae, IntervalExp ie, Expression* pe0);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24fb0ae31138927857d9517f368cb6748955cf0f" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;resolvePropertiesOnly&quot;&gt;resolvePropertiesOnly&lt;/strong&gt;(Scope* sc, Expression e1);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f1dd720666b1ebbdeaf1330037ca49680382277" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;resolveSlice&quot;&gt;resolveSlice&lt;/strong&gt;(Expression e, UnionExp* pue = null);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="399afa038530894af01c66997652832c22521978" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;scaleFactor&quot;&gt;scaleFactor&lt;/strong&gt;(BinExp be, Scope* sc);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79986118a4e6a934ff5fac083ee5a2d91f44d14e" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;symbolToExp&quot;&gt;symbolToExp&lt;/strong&gt;(Dsymbol s, ref const Loc loc, Scope* sc, bool hasOverloads);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffc4deb0c336cdfa09b1452db6e63631f5d4122f" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;toAssocArrayLiteral&quot;&gt;toAssocArrayLiteral&lt;/strong&gt;(ArrayInitializer ai);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6bce8f2be572a14af244cca194d546909ce6bb7" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;toBoolean&quot;&gt;toBoolean&lt;/strong&gt;(Scope* sc);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdb106e8f5a606a6dce675cd4ddbebbc5666068f" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;toDelegate&quot;&gt;toDelegate&lt;/strong&gt;(Expression e, Type t, Scope* sc);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cdc4080dafbc4371980fa1b4330711247ff8eee" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;toLvalue&quot;&gt;toLvalue&lt;/strong&gt;(Scope* sc, Expression e);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c7b6596f94002291db7dced4938937fd23206f2" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;trySemantic&quot;&gt;trySemantic&lt;/strong&gt;(Expression exp, Scope* sc);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c47e576a24251679ce842e21fa63efaeebfa5ca" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;typeCombine&quot;&gt;typeCombine&lt;/strong&gt;(BinExp be, Scope* sc);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="590987c28b7350e9354ffa20860fe52c9ed58235" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;typeToExpression&quot;&gt;typeToExpression&lt;/strong&gt;(Type t);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e7f226bf5b1c59c07426bc48bf791f755e82872" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;unaSemantic&quot;&gt;unaSemantic&lt;/strong&gt;(UnaExp e, Scope* sc);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25e7bb0649743e5711f99aca2d79a2a5b5648501" translate="yes" xml:space="preserve">
          <source>Expression &lt;strong id=&quot;valueNoDtor&quot;&gt;valueNoDtor&lt;/strong&gt;(Expression e);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf3f22e25aac5a5716bd2ddc48521dc242830fb5" translate="yes" xml:space="preserve">
          <source>Expression Parser</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9c4f2202566f51697b377f90555653846292193" translate="yes" xml:space="preserve">
          <source>Expression Statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eabfa2441c13d974e2af574b0d99a70f4bb9a0d6" translate="yes" xml:space="preserve">
          <source>Expression for the requested targetInfo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6063917999bbfe2ce9b3fa075874599a6ebc96e5" translate="yes" xml:space="preserve">
          <source>Expression representing the &lt;code&gt;this&lt;/code&gt; for the var</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df6caa2f45ca5f6946eb55c0501e737ddb8bf27f" translate="yes" xml:space="preserve">
          <source>Expression to convert</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf9f917167bd00b70d460bca475535ddcbe6fc7e" translate="yes" xml:space="preserve">
          <source>Expression to determine cost of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f055d0b3e4b8725a9090bf4d8f45363b46775b9" translate="yes" xml:space="preserve">
          <source>Expression to look at</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbcc420f7af639d45c5081500755a47ce6367c0a" translate="yes" xml:space="preserve">
          <source>Expression which expected as a string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8e5fdfc95019b0e8b971e0729223c011b90611f" translate="yes" xml:space="preserve">
          <source>Expression* &lt;code&gt;pe&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bc014e6d10451a8147b649b688eca472ffab8da" translate="yes" xml:space="preserve">
          <source>Expression[] &lt;code&gt;args&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd7feaf7d6885e2aeae1d7088bcce98f228aa60c" translate="yes" xml:space="preserve">
          <source>Expression[] &lt;code&gt;negatives&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae5fccd8dcd8fc317f8edfc8259af86cd2967a29" translate="yes" xml:space="preserve">
          <source>Expressions</source>
          <target state="translated">Expressions</target>
        </trans-unit>
        <trans-unit id="17b61fb742fe0544a0738e346e8b68266f8e6c2c" translate="yes" xml:space="preserve">
          <source>Expressions and statements may create and/or consume rvalues. Such values are called</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="827d05e6a3f1241aa29022321190716d0bac015a" translate="yes" xml:space="preserve">
          <source>Expressions are used to compute values with a resulting type. These values can then be assigned, tested, or ignored. Expressions can also have side effects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="213f37939286b76ce58e9d750cb8625a9de8b877" translate="yes" xml:space="preserve">
          <source>Expressions connected by commas</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeda38d97c1591b472912826aeaaf79dee7875cf" translate="yes" xml:space="preserve">
          <source>Expressions of the form &lt;code&gt;a != b&lt;/code&gt; are rewritten as &lt;code&gt;!(a == b)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9790c7ed767b515e2db3f5032fee145b7d8f3f2d" translate="yes" xml:space="preserve">
          <source>Expressions of the form &lt;code&gt;arr[&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="296ed9970d463ab72dec34118964f9a6a98b21b4" translate="yes" xml:space="preserve">
          <source>Expressions that have no effect, like &lt;code&gt;(x + x)&lt;/code&gt;, are illegal as expression statements unless the are cast to void.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d9ba85aff37987e9f1d9fafb80136e7c416676a" translate="yes" xml:space="preserve">
          <source>Expressions* &lt;code&gt;elements&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="137b1c280f96de72078b78ad7d25efffd1250b2a" translate="yes" xml:space="preserve">
          <source>Expressions* &lt;code&gt;exps&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e87db2601150b379b388e1556ff809504a78b747" translate="yes" xml:space="preserve">
          <source>Expressions* &lt;code&gt;fargs&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e0b234b24cbc1fb165bd79fe8e05526407f3b36" translate="yes" xml:space="preserve">
          <source>Expressions* &lt;code&gt;negatives&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd03daa888a0e583ceb40e2e00dacb30660a10cc" translate="yes" xml:space="preserve">
          <source>Expressions* &lt;strong id=&quot;elements&quot;&gt;elements&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37783cf5e7c87b4f591a55d79dbb7ea52f941431" translate="yes" xml:space="preserve">
          <source>Expressions* &lt;strong id=&quot;fdensureParams&quot;&gt;fdensureParams&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="026b50f17d896e63ced46249a059380f8e6cbae1" translate="yes" xml:space="preserve">
          <source>Expressions* &lt;strong id=&quot;fdrequireParams&quot;&gt;fdrequireParams&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7c9df0f13515170e90ad55a4b53a6f772217b57" translate="yes" xml:space="preserve">
          <source>Extend an array &lt;code&gt;px&lt;/code&gt; by &lt;code&gt;n&lt;/code&gt; elements. Caller must initialize those elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8d9ec6e863a0af2e6c6f8b6330f856c27efe720" translate="yes" xml:space="preserve">
          <source>Extend an array by n elements. Caller must initialize those elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b5d8573dd5bcf3e6c45847ffd98818bf7ecfc27" translate="yes" xml:space="preserve">
          <source>Extend may also be used to extend slices (or memory blocks with &lt;a href=&quot;#APPENDABLE&quot;&gt;&lt;code&gt;APPENDABLE&lt;/code&gt;&lt;/a&gt; info). However, use the return value only as an indicator of success. &lt;a href=&quot;#capacity&quot;&gt;&lt;code&gt;capacity&lt;/code&gt;&lt;/a&gt; should be used to retrieve actual usable slice capacity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43ee2587f2dee7414c6f7fffb20316fc7cc9240d" translate="yes" xml:space="preserve">
          <source>Extend the length of the input range &lt;code&gt;r&lt;/code&gt; by padding out the end of the range with the element &lt;code&gt;e&lt;/code&gt;. The element &lt;code&gt;e&lt;/code&gt; must be of a common type with the element type of the range &lt;code&gt;r&lt;/code&gt; as defined by &lt;a href=&quot;std_traits#CommonType&quot;&gt;&lt;code&gt;std.traits.CommonType&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;n&lt;/code&gt; is less than the length of of &lt;code&gt;r&lt;/code&gt;, then the contents of &lt;code&gt;r&lt;/code&gt; are returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa833620006d2c6c6571801ae931036999a293ae" translate="yes" xml:space="preserve">
          <source>Extend, shrink or allocate a new block of memory keeping the contents of an existing block</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f14c54998b149072f5f4807010db7ef4def6435" translate="yes" xml:space="preserve">
          <source>ExtendedModuleUnitTester &lt;code&gt;h&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9b77ddd59e96e949c32c9e07059de1e0868c54d" translate="yes" xml:space="preserve">
          <source>Extender</source>
          <target state="translated">Extender</target>
        </trans-unit>
        <trans-unit id="ca6a41cfa1be0460478758700e28ed97e69b6db4" translate="yes" xml:space="preserve">
          <source>Extends the length of the input range &lt;code&gt;r&lt;/code&gt; by padding out the start of the range with the element &lt;code&gt;e&lt;/code&gt;. The element &lt;code&gt;e&lt;/code&gt; must be of a common type with the element type of the range &lt;code&gt;r&lt;/code&gt; as defined by &lt;a href=&quot;std_traits#CommonType&quot;&gt;&lt;code&gt;std.traits.CommonType&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;n&lt;/code&gt; is less than the length of of &lt;code&gt;r&lt;/code&gt;, then &lt;code&gt;r&lt;/code&gt; is returned unmodified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="659087d3ca23db6ae11e0a43579b5f4a260dda11" translate="yes" xml:space="preserve">
          <source>Extension</source>
          <target state="translated">Extension</target>
        </trans-unit>
        <trans-unit id="006d500cd51d10312fee9a378180dd1c0dbff085" translate="yes" xml:space="preserve">
          <source>Extension to add (should not include '.')</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6482035493770d2e055c43b47e6d26c77dd6c0ef" translate="yes" xml:space="preserve">
          <source>Extern Declarations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3748f7f3cb478d80788fa4224db3fc0a78eefd90" translate="yes" xml:space="preserve">
          <source>ExternallyMangledName</source>
          <target state="translated">ExternallyMangledName</target>
        </trans-unit>
        <trans-unit id="346cbbedcd46a1663dd5b1cc744bd9a949537eb2" translate="yes" xml:space="preserve">
          <source>Extra characters were found after the end of the domain literal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5c6615073da0f312632e0d30300116c3bbca0ac" translate="yes" xml:space="preserve">
          <source>Extract Metadata About A Column Of A Table</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9faa5d876b6179e6ba25ab15280e90240372d01c" translate="yes" xml:space="preserve">
          <source>Extract an integral payload from a NAN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c4b7673b033687b78b5842c4817a13b02fefd97" translate="yes" xml:space="preserve">
          <source>Extract information about types and symbols at compile time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f06fb7685dce7967eb2226a2da1b90f2b56a47a7" translate="yes" xml:space="preserve">
          <source>Extract object previously wrapped by &lt;a href=&quot;#wrap&quot;&gt;&lt;code&gt;wrap&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd69f2de6f5ccb7abb3ebb23adba928b9189680b" translate="yes" xml:space="preserve">
          <source>Extracting keys or values from an associative array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33b53849a6a696afc1cd80915cbb26c701295344" translate="yes" xml:space="preserve">
          <source>Extracts the exponent of x as a signed integral value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e69f20e9f683920d3fb4329abd951e878b1f9372" translate="yes" xml:space="preserve">
          <source>F</source>
          <target state="translated">F</target>
        </trans-unit>
        <trans-unit id="92e79f4fb4307210226b4892ad6cd4e88db84d8e" translate="yes" xml:space="preserve">
          <source>F &lt;code&gt;fn&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="193f1d2a7d28460babdd5dae282bd85494298779" translate="yes" xml:space="preserve">
          <source>F &lt;code&gt;fp&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24cceb382e88b5a613ffd52b108c408d0048ef0f" translate="yes" xml:space="preserve">
          <source>F &lt;code&gt;x&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a08f0857a21894d4669365254c28abd314ff69d5" translate="yes" xml:space="preserve">
          <source>F &lt;strong id=&quot;dotProduct&quot;&gt;dotProduct&lt;/strong&gt;(F, uint N)(ref scope const F[N] a, ref scope const F[N] b)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2667ca0e687195a6570d57ab0089486c7bee46ff" translate="yes" xml:space="preserve">
          <source>F &lt;strong id=&quot;gapWeightedSimilarity&quot;&gt;gapWeightedSimilarity&lt;/strong&gt;(alias comp = &quot;a == b&quot;, R1, R2, F)(R1 s, R2 t, F lambda)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe6176f13577b4b75c6e15efab6754698b9c3bee" translate="yes" xml:space="preserve">
          <source>FE FF</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e02b936dfd78b3c5ebed8632cb4cc204b3750a2" translate="yes" xml:space="preserve">
          <source>FF FE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c498915b8f02917da6f0c028707f1c34277fe255" translate="yes" xml:space="preserve">
          <source>FF FE 00 00</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2a0477ef856e83464b14c113e56b5dc50816ccb" translate="yes" xml:space="preserve">
          <source>FILE* &lt;code&gt;stream&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2605a67597f1a10f5c96696e2424ee2db911144" translate="yes" xml:space="preserve">
          <source>FILETIME* &lt;code&gt;ft&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="716c88fa55348f124b797e571db1aebe854236a3" translate="yes" xml:space="preserve">
          <source>FIPS PUB180-2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1267dff51655e0a3bdc33fc1076bec75984a3f57" translate="yes" xml:space="preserve">
          <source>FLAGS /////////////////////////////////////</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e96a8a604f9b6179e311fa3d5f24abcd71fc841e" translate="yes" xml:space="preserve">
          <source>FNMATCH_FUNCTION user pointer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd00fd89694c9543bbff899304d998d7ecf5294f" translate="yes" xml:space="preserve">
          <source>FPTypeProperties!double &lt;strong id=&quot;DoubleProperties&quot;&gt;DoubleProperties&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d8442da2a84281783f8838ad22bc5dbea8b7a72" translate="yes" xml:space="preserve">
          <source>FPTypeProperties!float &lt;strong id=&quot;FloatProperties&quot;&gt;FloatProperties&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f033c2d3e8e972e4ef1768896ccae5d11b59035e" translate="yes" xml:space="preserve">
          <source>FPTypeProperties!real_t &lt;strong id=&quot;RealProperties&quot;&gt;RealProperties&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33526cf6b3de29bbe86a32df97a3317f13177146" translate="yes" xml:space="preserve">
          <source>FP_ILOGB0</source>
          <target state="translated">FP_ILOGB0</target>
        </trans-unit>
        <trans-unit id="3ca2eaac7e96ce045c763f71e8ad21f82a4121ef" translate="yes" xml:space="preserve">
          <source>FP_ILOGBNAN</source>
          <target state="translated">FP_ILOGBNAN</target>
        </trans-unit>
        <trans-unit id="acb28212fba0272ee990cebd571ebe09b463312e" translate="yes" xml:space="preserve">
          <source>FTP</source>
          <target state="translated">FTP</target>
        </trans-unit>
        <trans-unit id="efd9df5bd03a5bb6ecc42cd9b76d43f3c4b84813" translate="yes" xml:space="preserve">
          <source>FTP &lt;strong id=&quot;dup&quot;&gt;dup&lt;/strong&gt;();</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a156047c4af729c2fac38d529049b3b9938c1d8f" translate="yes" xml:space="preserve">
          <source>FTP Option that causes missing dirs to be created on the remote server. In 7.19.4 we introduced the convenience enums for this option using the CURLFTP_CREATE_DIR prefix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbfe183e82b68040592bf183fc081e933272629b" translate="yes" xml:space="preserve">
          <source>FTP access to the specified url.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79d1ddd73bbfe55930046d43cf864f9b3aca2fb2" translate="yes" xml:space="preserve">
          <source>FTP client functionality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="296657dabd1e7526b0c3bd8986b54a229ec9f74e" translate="yes" xml:space="preserve">
          <source>FTP option that changes the timeout, in seconds, associated with getting a response. This is different from transfer timeout time and essentially places a demand on the FTP server to acknowledge commands in a timely manner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e9d5102532c80cabb71bedd22459f048605a2a0" translate="yes" xml:space="preserve">
          <source>FUNCFLAG.xxxxx</source>
          <target state="translated">FUNCFLAG.xxxxx</target>
        </trans-unit>
        <trans-unit id="04a22d510848e72d972438b2303f4bb0f8cefe40" translate="yes" xml:space="preserve">
          <source>F[] &lt;strong id=&quot;uniformDistribution&quot;&gt;uniformDistribution&lt;/strong&gt;(F = double)(size_t n, F[] useThis = null)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="885d20f30c6997f28727cb3b1c03c026a0423304" translate="yes" xml:space="preserve">
          <source>Facilities for random number generation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e47b9b1021034a56b7d5f70d92d0481524e78f69" translate="yes" xml:space="preserve">
          <source>Factory</source>
          <target state="translated">Factory</target>
        </trans-unit>
        <trans-unit id="9d80a11d6c9cd9d8129231038cc99dcf9cfe6c31" translate="yes" xml:space="preserve">
          <source>Fails: char[] has mutable aliasing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ca23f275cf26c43dc6cb80deec7cc73ebd0d6be" translate="yes" xml:space="preserve">
          <source>Fake a struct symbol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f92a31e5dc809226adfcdd7266d92ffe4d097f29" translate="yes" xml:space="preserve">
          <source>Fake class which holds the thrown exception. Used for implementing exception handling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="187b6d7e012db85d9f53b228f8b221e037e5b215" translate="yes" xml:space="preserve">
          <source>Fallback &lt;strong id=&quot;fallback&quot;&gt;fallback&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d00915c3eb36b1f76efd0ec12a2e2bfdb9c88e2" translate="yes" xml:space="preserve">
          <source>FallbackAllocator!(Primary, Fallback) &lt;strong id=&quot;fallbackAllocator&quot;&gt;fallbackAllocator&lt;/strong&gt;(Primary, Fallback)(auto ref Primary p, auto ref Fallback f);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d505b3f95c1c85d725f5b643bd03f8f11c638e3" translate="yes" xml:space="preserve">
          <source>Families of transcendental functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c15afdf4366c1e5e116d4655301026b41771feaa" translate="yes" xml:space="preserve">
          <source>Family of this address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9784de560abfd12a3df7edbfce43582579bd83ea" translate="yes" xml:space="preserve">
          <source>Fast Alias</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b30639e5d7da09380f8d189ea58cefd7706fb2d8" translate="yes" xml:space="preserve">
          <source>Fast Integer Overflow Checks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b12a136aeae505dcc0b7dbbf0dd96b9dfb9b43f" translate="yes" xml:space="preserve">
          <source>Fast implementation of SHA1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f52bc5a79d93a586d9fd5f867d9e97fd2c1e94ed" translate="yes" xml:space="preserve">
          <source>Fast power modulus calculation for &lt;a href=&quot;#BigInt&quot;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt; operands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc338f87a058158eb824b53705961801516a9460" translate="yes" xml:space="preserve">
          <source>Features</source>
          <target state="translated">Features</target>
        </trans-unit>
        <trans-unit id="5e04f2d50cdd060bbfcbfee4c55990dc2c53ebb6" translate="yes" xml:space="preserve">
          <source>Feeds a piece of data into the hash computation. This method allows the type to be used as an &lt;a href=&quot;std_range#OutputRange&quot;&gt;&lt;code&gt;std.range.OutputRange&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef2e953b973aaaad728788af9fe005332250cfb9" translate="yes" xml:space="preserve">
          <source>Fetch a range that spans all the elements in the container.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="806c6077cb7a78f983cf9f3141f3488ff76bfb62" translate="yes" xml:space="preserve">
          <source>Fetch a set of &lt;a href=&quot;#Code%20point&quot;&gt;code points&lt;/a&gt; that have the given hangul syllable type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f82305ed0f65639966ae3ed3933a92d710f2e1b5" translate="yes" xml:space="preserve">
          <source>Fetches a portion of the container from key &lt;code&gt;a&lt;/code&gt; to key &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="941f1ba20ae720e9df7d97f37ddc2a546949a068" translate="yes" xml:space="preserve">
          <source>Fibonacci numbers, using function in explicit form:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d046974a209aaf1dc186931ea0c33a691fda7aee" translate="yes" xml:space="preserve">
          <source>Field Properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bc4c6a8400a8c6f02130bcea08f292997d6b9f9" translate="yes" xml:space="preserve">
          <source>Field initialization inside constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5a099fc15efbba12a358705f6143f4d6be98777" translate="yes" xml:space="preserve">
          <source>FieldInit[] &lt;strong id=&quot;fieldinit&quot;&gt;fieldinit&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8b685271238adf161cffed3c91f54d97023262b" translate="yes" xml:space="preserve">
          <source>Fields</source>
          <target state="translated">Fields</target>
        </trans-unit>
        <trans-unit id="0de912d25f2bf66472286b09fc92107582e1704b" translate="yes" xml:space="preserve">
          <source>Fields are by default initialized to the default initializer for their type (usually 0 for integer types and NAN for floating point types). If the field declaration has an optional &lt;a href=&quot;declaration#Initializer&quot;&gt;&lt;i&gt;Initializer&lt;/i&gt;&lt;/a&gt; that will be used instead of the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23cca95a6cdd188e6c7fc8755e8efb38d2d70c0e" translate="yes" xml:space="preserve">
          <source>Fields not specified in the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="208ad1de91661d0ad0a36ff8e397f7fa368d919b" translate="yes" xml:space="preserve">
          <source>Fields of &lt;code&gt;extern(Objective-C)&lt;/code&gt; classes have a dynamic offset. That means that the base class can change (add or remove instance variables) without the subclasses needing to recompile or relink.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="853d0fada94e86615dc6538f25f88964cc917132" translate="yes" xml:space="preserve">
          <source>Figure out what is being foreach'd over by looking at the ForeachAggregate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30ce9f687ac35a29ae0ceb7c01a007d763160966" translate="yes" xml:space="preserve">
          <source>File &lt;code&gt;f&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e98c320744b7f0c7cb60ef318110b857423c138" translate="yes" xml:space="preserve">
          <source>File &lt;code&gt;file&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aadfe8f43e9471a7ccd0a6d9513aa2d158d8fc8" translate="yes" xml:space="preserve">
          <source>File &lt;code&gt;stderr&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2d5fc4ef533b94b6bad75f0391ad7ad10de8f26" translate="yes" xml:space="preserve">
          <source>File &lt;code&gt;stdin&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85e9228910eade205bba9f1037b88441eb129b20" translate="yes" xml:space="preserve">
          <source>File &lt;code&gt;stdout&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9483d4c2825aba0712cc0561ced9af3cb73ecdf9" translate="yes" xml:space="preserve">
          <source>File &lt;strong id=&quot;openNetwork&quot;&gt;openNetwork&lt;/strong&gt;(string host, ushort port);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e536d6d6e792234f9c45a8b85837120144d1507" translate="yes" xml:space="preserve">
          <source>File name to get times for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="593c7807cce6682849c08e792d67a7b54a30c7c5" translate="yes" xml:space="preserve">
          <source>File names are case insensitive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bba1cee852025b35d3e3478cf86257fa54326950" translate="yes" xml:space="preserve">
          <source>File names are case sensitive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddde036ce2875cbf396f907c8d72a294c865d6ee" translate="yes" xml:space="preserve">
          <source>File names on the DMD command line with the extension .ddoc are text files that are read and processed in order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b51622761aa9ab4147a65c01ed7a2f997bd6b63" translate="yes" xml:space="preserve">
          <source>File names to dispatch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab2a2923359cc254d1142cb254fa079493ce8064" translate="yes" xml:space="preserve">
          <source>File opened that is not a database file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="600941bc483d702b3e6700aa5c9df8eaacfc769f" translate="yes" xml:space="preserve">
          <source>File separator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8751b87838fad8e9c09877c3fcf2d38b742badf" translate="yes" xml:space="preserve">
          <source>File that called &lt;code&gt;_d_HookTraceImpl&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6025d963ff7d5ab00dd321537b1088bcf0aa15c" translate="yes" xml:space="preserve">
          <source>File to read and split into its lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d239ce96517581903eea3ad6a5e5f8f129445d3" translate="yes" xml:space="preserve">
          <source>File to read lines from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a39297edcbf92570f7009a9439afaa0ade4a510" translate="yes" xml:space="preserve">
          <source>File.ReadResult &lt;code&gt;readResult&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ba5924daeca1702606731ee6e33f3d6f5d8aeff" translate="yes" xml:space="preserve">
          <source>File/Folder name to get times for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1281649a36423bcd13a1e5734562778e5a449fb" translate="yes" xml:space="preserve">
          <source>FileBuffer &lt;strong id=&quot;readFile&quot;&gt;readFile&lt;/strong&gt;(Loc loc, const(char)* filename);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adb0ed28c9f6c61c2c5292ae0018a0dbd403f831" translate="yes" xml:space="preserve">
          <source>FileName &lt;strong id=&quot;setOutfilename&quot;&gt;setOutfilename&lt;/strong&gt;(const(char)[] name, const(char)[] dir, const(char)[] arg, const(char)[] ext);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cdd52dc9b2dc3c92972beb5c0ac073541e5c497" translate="yes" xml:space="preserve">
          <source>Filename NULL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ce6c512ea433a7fc5c8841628e7696cd0ff7f2b" translate="yes" xml:space="preserve">
          <source>Files</source>
          <target state="translated">Files</target>
        </trans-unit>
        <trans-unit id="ac721011f794b0e8baf53f6a4a3ded5e6b587bdc" translate="yes" xml:space="preserve">
          <source>Files are dispatched in the various arrays (global.params.{ddocfiles,dllfiles,jsonfiles,etc...}) according to their extension. Binary files are added to libmodules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c458791c8711a4da04ab0a8024c24f9c4200994" translate="yes" xml:space="preserve">
          <source>Fill in new entries below here!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fec9699a2804108f414d1cbff9f937ab31b1059b" translate="yes" xml:space="preserve">
          <source>Fill in vtbl[] for base class based on member functions of class cd.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43d8814469e2dd06b7a4446e3a72fe3fb9b94b8b" translate="yes" xml:space="preserve">
          <source>Fill out remainder of elements[] with default initializers for fields[].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce95d41d5dfbc8ae874f5267cf6c9192895a26f6" translate="yes" xml:space="preserve">
          <source>Fills a range (assumed uninitialized) with a value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4af7384f97004098d0ba2d1490a26bd5ae8dc06c" translate="yes" xml:space="preserve">
          <source>Fills a range with a pattern, e.g., if &lt;code&gt;a = new int[3]&lt;/code&gt;, then &lt;code&gt;fill(a, 4)&lt;/code&gt; leaves &lt;code&gt;a = [4, 4, 4]&lt;/code&gt; and &lt;code&gt;fill(a, [3, 4])&lt;/code&gt; leaves &lt;code&gt;a = [3, 4, 3]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58c13531d89cbfd81b826ad0e0207a8e8f855efc" translate="yes" xml:space="preserve">
          <source>Fills in properties extractVersion, flags, compressionMethod, time, crc32, compressedSize, expandedSize, expandedData[], name[], extra[].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c839d156063c44cb328b154ceff7d45b6cd1f2d8" translate="yes" xml:space="preserve">
          <source>Fills in the properties data[], diskNumber, diskStartDir, numEntries, totalEntries, and directory[]. For each ArchiveMember, fills in properties crc32, compressedSize, compressedData[].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac430f749392cd86ab81a1eba5a5fa6084a02035" translate="yes" xml:space="preserve">
          <source>Fills in the properties data[], diskNumber, diskStartDir, numEntries, totalEntries, comment[], and directory[]. For each ArchiveMember, fills in properties madeVersion, extractVersion, flags, compressionMethod, time, crc32, compressedSize, expandedSize, compressedData[], diskNumber, internalAttributes, externalAttributes, name[], extra[], comment[]. Use expand() to get the expanded data for each ArchiveMember.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="753c7b4dfb03e4b323218bfbcf8e9ce9e83fd215" translate="yes" xml:space="preserve">
          <source>Filter (higher-order function)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e010e248c9fcbc07279b28e2d9cf39a816edeedc" translate="yes" xml:space="preserve">
          <source>Filtering Log Messages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9cfd7e1924fe46ff476048bb232046b2445c30d" translate="yes" xml:space="preserve">
          <source>Filters an &lt;code&gt;AliasSeq&lt;/code&gt; using a template predicate. Returns an &lt;code&gt;AliasSeq&lt;/code&gt; of the elements which satisfy the predicate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3a871296194a1fb868a45ed782c53f0637a842f" translate="yes" xml:space="preserve">
          <source>Final Classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c054c76415f8cf9cbfa3c705550abf7d2a659de6" translate="yes" xml:space="preserve">
          <source>Final Switch Statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f28c69a57fd5a00b8c460d98af841dbdfc2cf776" translate="yes" xml:space="preserve">
          <source>Final classes cannot be subclassed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce6f1f9e3ddcc894278135e4f17b933043c105ab" translate="yes" xml:space="preserve">
          <source>Final variables cannot be directly mutated or rebound, but references reached through the variable are typed with their original mutability. It is equivalent to &lt;code&gt;final&lt;/code&gt; variables in D1 and Java, as well as &lt;code&gt;readonly&lt;/code&gt; variables in C#.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e2b4800b08f795f43f812ffedaf0e687b6d6874" translate="yes" xml:space="preserve">
          <source>Final!T &lt;strong id=&quot;makeFinal&quot;&gt;makeFinal&lt;/strong&gt;(T)(T t);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e3e2e2f543272fd4cd5df84fdd43fdaeaef1da0" translate="yes" xml:space="preserve">
          <source>Final_Punctuation</source>
          <target state="translated">Final_Punctuation</target>
        </trans-unit>
        <trans-unit id="5651425846864705935b85d871957e1ebe78f459" translate="yes" xml:space="preserve">
          <source>Finalization hook, called FOR each thread. No assumptions about module initialization state should be made.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c0d51279d82c302cafb15142125c52a7d750035" translate="yes" xml:space="preserve">
          <source>Finalize A Dynamic String</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5174f6c9ec806f743432561800d7fb3cdce6c10" translate="yes" xml:space="preserve">
          <source>Finalize the data in this block on collect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1487ab4833797a8fe86e9e688a3c4af63df81678" translate="yes" xml:space="preserve">
          <source>Finalizes the computation of the hash and returns the computed value. Note that &lt;code&gt;finish&lt;/code&gt; can be called only once and that no subsequent calls to &lt;code&gt;put&lt;/code&gt; is allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edf7957cb21bb43e8c1e9e16262a7f52655c315a" translate="yes" xml:space="preserve">
          <source>Finally, any combination of integral offsets and tuples composed of two integral offsets can be passed in:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8318badcbf1d40a64d4bffbf97bd0efd4cae1f40" translate="yes" xml:space="preserve">
          <source>Finally, if the user-defined type is to be used as a key in the built-in associative arrays, then the programmer must ensure that the semantics of &lt;code&gt;opEquals&lt;/code&gt; and &lt;code&gt;toHash&lt;/code&gt; are consistent. If not, the associative array may not work in the expected manner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63ebc2a4bae0f29d985262d1e0a7882d311b33e0" translate="yes" xml:space="preserve">
          <source>Finally, it includes some convenience functions for manipulating ranges:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="957ad37fd6f0cb718a9dbc02f2623b3113168bed" translate="yes" xml:space="preserve">
          <source>Finally, there is no guarantee that using &lt;code&gt;FPTemporary!F&lt;/code&gt; will always be fastest, as the speed of floating-point calculations depends on very many factors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e7650a8c491fd4a8a63008ab0b8ff54cd68ebd3" translate="yes" xml:space="preserve">
          <source>FinallyStatement</source>
          <target state="translated">FinallyStatement</target>
        </trans-unit>
        <trans-unit id="af66114eea030ebc5f2464aa23997a938e455374" translate="yes" xml:space="preserve">
          <source>Find &lt;code&gt;ident&lt;/code&gt; in an array of identifiers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88937cdca6cc08c5d7dbfa18ae72ed67be952ed2" translate="yes" xml:space="preserve">
          <source>Find &lt;code&gt;value&lt;/code&gt; among &lt;code&gt;values&lt;/code&gt;, returning the 1-based index of the first matching value in &lt;code&gt;values&lt;/code&gt;, or &lt;code&gt;0&lt;/code&gt; if &lt;code&gt;value&lt;/code&gt; is not among &lt;code&gt;values&lt;/code&gt;. The predicate &lt;code&gt;pred&lt;/code&gt; is used to compare values, and uses equality by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="545769c2d22b47615aaec611ab60b4390f1d36ac" translate="yes" xml:space="preserve">
          <source>Find The Database Handle Of A Prepared Statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ed4d78384609c747738b51bd99d57a7cbe3bca7" translate="yes" xml:space="preserve">
          <source>Find a common root between &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;base&lt;/code&gt;. If there is no common root, return &lt;code&gt;path&lt;/code&gt; unaltered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cc4bdb526e48e9b0169cef3864d16c67f747c87" translate="yes" xml:space="preserve">
          <source>Find a real minimum of a real function &lt;code&gt;f(x)&lt;/code&gt; via bracketing. Given a function &lt;code&gt;f&lt;/code&gt; and a range &lt;code&gt;(ax .. bx)&lt;/code&gt;, returns the value of &lt;code&gt;x&lt;/code&gt; in the range which is closest to a minimum of &lt;code&gt;f(x)&lt;/code&gt;. &lt;code&gt;f&lt;/code&gt; is never evaluted at the endpoints of &lt;code&gt;ax&lt;/code&gt; and &lt;code&gt;bx&lt;/code&gt;. If &lt;code&gt;f(x)&lt;/code&gt; has more than one minimum in the range, one will be chosen arbitrarily. If &lt;code&gt;f(x)&lt;/code&gt; returns NaN or -Infinity, &lt;code&gt;(x, f(x), NaN)&lt;/code&gt; will be returned; otherwise, this algorithm is guaranteed to succeed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc439799cd4737f8236f05600fc64a52e0bdee1d" translate="yes" xml:space="preserve">
          <source>Find a real root of a real function f(x) via bracketing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9ea8a7553428e4555c42a356e28f37d1f30dc20" translate="yes" xml:space="preserve">
          <source>Find all instance fields, then push them into &lt;code&gt;fields&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f0f2515c2b37286fa318cf443dfdda11744bc3e" translate="yes" xml:space="preserve">
          <source>Find all variables accessed by this delegate that are in functions enclosing it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41ae1d4488620fcf9a1fa1a9eea694e8dd8ef394" translate="yes" xml:space="preserve">
          <source>Find function in overload list that exactly matches t.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edff7cacecc816c7b2bf341caacbadeda732cdfa" translate="yes" xml:space="preserve">
          <source>Find function in overload list that matches to the 'this' modifier. There's four result types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0c98c985999ca34facaa820a09d254832cfa98f" translate="yes" xml:space="preserve">
          <source>Find index of function in vtbl[0..dim] that this function overrides. Prefer an exact match to a covariant one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a869c31c58148141fe2bb0252ad8f9ecb8a528b" translate="yes" xml:space="preserve">
          <source>Find last statement in a sequence of statements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d69cdad0f7e718c4389bc96b6e8484b75621891a" translate="yes" xml:space="preserve">
          <source>Find root of a real function f(x) by bracketing, allowing the termination condition to be specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fb393ab419b2e3f0988a888618d55945a606a1c" translate="yes" xml:space="preserve">
          <source>Find template declaration corresponding to template instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e56b93cf2f4450a7eaf19462aacfb88f33166737" translate="yes" xml:space="preserve">
          <source>Find the config file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2dd908c00ec01e1d2253d53d434daf6a1857fe3" translate="yes" xml:space="preserve">
          <source>Find the first (leftmost) slice of the &lt;code&gt;input&lt;/code&gt; that matches the pattern &lt;code&gt;re&lt;/code&gt;. This function picks the most suitable regular expression engine depending on the pattern properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b74109ae76fb090044e9df5875f1c38828f427c5" translate="yes" xml:space="preserve">
          <source>Find the first non-comma expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cc3fb2f138f676cf6a94d5a2c6b5519efc51d83" translate="yes" xml:space="preserve">
          <source>Find the last non-comma expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19feb6b0e0b231038a55e2bf709f34b7a893df27" translate="yes" xml:space="preserve">
          <source>Find virtual function matching identifier and type. Used to build virtual function tables for interface implementations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f779fad43ff937e8c60b5135580f17f7fea9279" translate="yes" xml:space="preserve">
          <source>Finds &lt;code&gt;needle&lt;/code&gt; in &lt;code&gt;haystack&lt;/code&gt; and positions &lt;code&gt;haystack&lt;/code&gt; right after the first occurrence of &lt;code&gt;needle&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dffa198dc7c767b46fa65ebc9d63a3a8195c5965" translate="yes" xml:space="preserve">
          <source>Finds &lt;code&gt;needle&lt;/code&gt; in &lt;code&gt;haystack&lt;/code&gt; efficiently using the &lt;a href=&quot;https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string_search_algorithm&quot;&gt; Boyer-Moore&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4aab22f9bf13ade683a53be805bd158b6756b54" translate="yes" xml:space="preserve">
          <source>Finds a &lt;code&gt;dmd.conf&lt;/code&gt; and parses it for import paths. This depends on the &lt;code&gt;$DMD&lt;/code&gt; environment variable. If &lt;code&gt;$DMD&lt;/code&gt; is set to &lt;code&gt;ldmd&lt;/code&gt;, it will try to detect and parse a &lt;code&gt;ldc2.conf&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db4503384752d61843483992d0609b3513a269cd" translate="yes" xml:space="preserve">
          <source>Finds an individual element in an &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt;. Elements of &lt;code&gt;haystack&lt;/code&gt; are compared with &lt;code&gt;needle&lt;/code&gt; by using predicate &lt;code&gt;pred&lt;/code&gt; with &lt;code&gt;pred(haystack.front, needle)&lt;/code&gt;. &lt;code&gt;find&lt;/code&gt; performs &amp;Omicron;(&lt;code&gt;walkLength(haystack)&lt;/code&gt;) evaluations of &lt;code&gt;pred&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="494b5c575695991289f1af6c553e989e7554d283" translate="yes" xml:space="preserve">
          <source>Finds multiple attributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc6ca4363cb66199d14c81638ae0bacb275a040f" translate="yes" xml:space="preserve">
          <source>Finds nothing if there is no member with specific UDA</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="372b352a9faabc1d4848c96cff7df7512a64b542" translate="yes" xml:space="preserve">
          <source>Finds the mean (colloquially known as the average) of a range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acc839859781d1a6fe4c1aa11b5d0cad6c9f277f" translate="yes" xml:space="preserve">
          <source>Finds the quotient and remainder for the given dividend and divisor in one operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f42db37e0be1957bbb7a73bd93bbacc6f6971b6" translate="yes" xml:space="preserve">
          <source>Finds two or more &lt;code&gt;needles&lt;/code&gt; into a &lt;code&gt;haystack&lt;/code&gt;. The predicate &lt;code&gt;pred&lt;/code&gt; is used throughout to compare elements. By default, elements are compared for equality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e49c750f94dfbe0f01c55cba7ce3a3fca1cb43ad" translate="yes" xml:space="preserve">
          <source>Finish and return completed data structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="910917ab298e1770af3ee0a6c87f4500d8fc3b35" translate="yes" xml:space="preserve">
          <source>First calls &lt;code&gt;detach&lt;/code&gt; (throwing on failure), and then attempts to associate the given Windows &lt;code&gt;HANDLE&lt;/code&gt; with the &lt;code&gt;File&lt;/code&gt;. The mode must be compatible with the access attributes of the handle. Windows only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcaf56d0ddc5fc561f47a3812f5bb4243cf6c321" translate="yes" xml:space="preserve">
          <source>First calls &lt;code&gt;detach&lt;/code&gt; (throwing on failure), and then attempts to associate the given file descriptor with the &lt;code&gt;File&lt;/code&gt;. The mode must be compatible with the mode of the file descriptor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9a4e48dd9c9e9c16b3c2bdc21882e910e46f414" translate="yes" xml:space="preserve">
          <source>First checks whether there's enough slack memory preallocated for &lt;code&gt;b&lt;/code&gt; by evaluating &lt;code&gt;b.length + delta &amp;lt;= goodAllocSize(b.length)&lt;/code&gt;. If that's the case, expands &lt;code&gt;b&lt;/code&gt; in place. Otherwise, attempts to use &lt;code&gt;parent.expand&lt;/code&gt; appropriately if present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="232d9e5b94637d4aff68a5613d4eb2c442d5e710" translate="yes" xml:space="preserve">
          <source>First element of range is the whole match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19eb5d2bea28d68e63b34cd9da02ecb96eb4de74" translate="yes" xml:space="preserve">
          <source>First element, null if *plist is null</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56336174ab5678a8f418a8043d57e8c559fdf20f" translate="yes" xml:space="preserve">
          <source>First enum member value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61c434e488f86b8e6b440a94d71c3f4ce5c76af6" translate="yes" xml:space="preserve">
          <source>First item to compare.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb036d61b03c52aec70ded61cf94c0bb2799a5dc" translate="yes" xml:space="preserve">
          <source>First, &lt;code&gt;S(1)&lt;/code&gt; and &lt;code&gt;S(2)&lt;/code&gt; are evaluated in lexical order. Per the rules, they will be destroyed at the end of the full expression and in reverse order. The comparison &lt;code&gt;S(1) == S(2)&lt;/code&gt; yields &lt;code&gt;false&lt;/code&gt;, so the right-hand side of the &lt;code&gt;||&lt;/code&gt; is evaluated causing &lt;code&gt;S(3)&lt;/code&gt; and &lt;code&gt;S(4)&lt;/code&gt; to be evaluated, also in lexical order. However, their destruction is not deferred to the end of the full expression. Instead, &lt;code&gt;S(4)&lt;/code&gt; and then &lt;code&gt;S(3)&lt;/code&gt; are destroyed at the end of the &lt;code&gt;||&lt;/code&gt; expression. Following their destruction, &lt;code&gt;S(5)&lt;/code&gt; and &lt;code&gt;S(6)&lt;/code&gt; are constructed in lexical order. Again they are not destroyed at the end of the full expression, but right at the end of the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; expression. Consequently, the destruction of &lt;code&gt;S(6)&lt;/code&gt; and &lt;code&gt;S(5)&lt;/code&gt; is carried before that of &lt;code&gt;S(2)&lt;/code&gt; and &lt;code&gt;S(1)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35821ff9eaf82cccb4cd374c06db922677ab7c04" translate="yes" xml:space="preserve">
          <source>First, an instance of the reference-counted HTTP struct is created. Then the custom delegates are set. These will be called whenever the HTTP instance receives a header and a data buffer, respectively. In this simple example, the headers are written to stdout and the data is ignored. If the request should be stopped before it has finished then return something less than data.length from the onReceive callback. See &lt;a href=&quot;#onReceiveHeader&quot;&gt;&lt;code&gt;onReceiveHeader&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;#onReceive&quot;&gt;&lt;code&gt;onReceive&lt;/code&gt;&lt;/a&gt; for more information. Finally the HTTP request is effected by calling perform(), which is synchronous.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddff6cdec0a5bb1099424737e7832e8c05999395" translate="yes" xml:space="preserve">
          <source>First, the &lt;a href=&quot;type#usual-arithmetic-conversions&quot;&gt;Usual Arithmetic Conversions&lt;/a&gt; are done on the operands. The result type of a relational expression is &lt;code&gt;bool&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4957bf53799feeb05b63a3d6e973fd8fa8760f6f" translate="yes" xml:space="preserve">
          <source>FirstExp</source>
          <target state="translated">FirstExp</target>
        </trans-unit>
        <trans-unit id="5613e8ed3a8c422a59b73ed2d59f778f438baaf8" translate="yes" xml:space="preserve">
          <source>Fit elements[] to the corresponding types of the struct's fields.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fdb1b8027c76adc716597ecea40dafd0a1d1761" translate="yes" xml:space="preserve">
          <source>Fixed-size allocation (unlikely to get reallocated later). Examples: &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, any &lt;code&gt;struct&lt;/code&gt; or &lt;code&gt;class&lt;/code&gt; type. By default it is assumed that the allocation is variable-size, i.e. susceptible to later reallocation (for example all array types). This flag is advisory, i.e. in-place resizing may be attempted for &lt;code&gt;fixedSize&lt;/code&gt; allocations and may succeed. The flag is just a hint to the compiler it may use allocation strategies that work well with objects of fixed size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a774409a00c21de377cf8ed5c6a56b8547973042" translate="yes" xml:space="preserve">
          <source>Flag</source>
          <target state="translated">Flag</target>
        </trans-unit>
        <trans-unit id="6349adf8f4924cf71432b2cc8b99298a02da104f" translate="yes" xml:space="preserve">
          <source>Flag for indicating if the isEmail function should perform a DNS check or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01fd2d670ffad32f041db95fdb5fd34e662c1fd5" translate="yes" xml:space="preserve">
          <source>Flag indicating if help was requested</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4839649a06c4517e676f395e7fb017b70b5e26a6" translate="yes" xml:space="preserve">
          <source>Flag indicating whether a search is case-sensitive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="728d7e2f5a2090a340dd62e4890170496eb26f90" translate="yes" xml:space="preserve">
          <source>Flag to control rethrow behavior of &lt;code&gt;&lt;a href=&quot;#call&quot;&gt;call&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2bb64de167476df8d3672619e1590b0a282bc6b" translate="yes" xml:space="preserve">
          <source>Flag to specify whether or not an exception is thrown on error.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
