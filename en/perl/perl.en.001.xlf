<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="en" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="53498ca32b7c2806dd9dd307c7cd452aa1d469a9" translate="yes" xml:space="preserve">
          <source>!) repetition of the previous word, assuming the &lt;code&gt;/x&lt;/code&gt; modifier, and no &lt;code&gt;/i&lt;/code&gt; modifier outside this group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="888a420d278dfee6e12c632a63e66e47acd72a3b" translate="yes" xml:space="preserve">
          <source>&quot; ... &quot;=back&quot; is used for giving the formatter a clue as to how many &quot;spaces&quot; (ems, or roughly equivalent units) it should tab over, although many formatters will have to convert this to an absolute measurement that may not exactly match with the size of spaces (or M's) in the document's base font. Other formatters may have to completely ignore the number. The lack of any explicit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edc1f1a928ddc90c2a39f5b2a644857a3601efd7" translate="yes" xml:space="preserve">
          <source>&quot; ... &quot;=end</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="841f35cb49c0920660d917c57cb6c4e74ad86461" translate="yes" xml:space="preserve">
          <source>&quot; and &quot;=for :</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34654acb4e76ca19c8fd14d23216a6bdcb901333" translate="yes" xml:space="preserve">
          <source>&quot; begins with a colon (&quot;:&quot;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78a3a301043c62af5d844dd2f8e7709bf1276222" translate="yes" xml:space="preserve">
          <source>&quot; begins with a colon (&quot;:&quot;). That is, if a paragraph starts with a literal space or tab, but</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec7692d1ff3afedf21e0f26d9af2c55d5aa717e3" translate="yes" xml:space="preserve">
          <source>&quot; begins with a colon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8c814e3e9c5451bfc66386bc579c95008b2cfef" translate="yes" xml:space="preserve">
          <source>&quot; commands inside an &quot;=over&quot; ... &quot;=back&quot; region.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="591d3f393f9defc89e8479bd88a150c5de7846a8" translate="yes" xml:space="preserve">
          <source>&quot; commands stop paragraphs that they surround from being parsed as ordinary or verbatim paragraphs, if</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b26772964c02699374d68ceaf05079d8f47a333" translate="yes" xml:space="preserve">
          <source>&quot; commands with no accompanying paragraph. The middle item is an example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29f2e5650bb186889b598657f67bac77177f9a8e" translate="yes" xml:space="preserve">
          <source>&quot; does</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6147fb5ec5da5dc95d2a70ef6acc178e84c7e37" translate="yes" xml:space="preserve">
          <source>&quot; extension and replaces &quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="014d7229fe4a685bf69aa1341de43f0717a2c261" translate="yes" xml:space="preserve">
          <source>&quot; extension, it will first look for a similar filename with a &quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5829c202b2972f6c602b13741a1591421011bb0e" translate="yes" xml:space="preserve">
          <source>&quot; extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2726a973024188934ab62109634990572ff52c1" translate="yes" xml:space="preserve">
          <source>&quot; extension. If this file is found, it will be loaded in place of any file ending in a &quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eea6862f7b9faca5acdd16c258f25a6c62eeebdf" translate="yes" xml:space="preserve">
          <source>&quot; file in the @INC array and will complain about not finding &quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1de5c62926972301758d5465051989ece40b13a" translate="yes" xml:space="preserve">
          <source>&quot; file in the directories specified in the &lt;code&gt;@INC&lt;/code&gt; array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f05816d33b941ebca485af1e2af9cc1267bc6a0a" translate="yes" xml:space="preserve">
          <source>&quot; in quotes. This also helps to differentiate new modules from old</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f67057077d5e3e9541567e6b9e435dac701e373a" translate="yes" xml:space="preserve">
          <source>&quot; in the filename for you, to make it easy to load standard modules. This form of loading of modules does not risk altering your namespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f59b5d47b6cf7317b748754195905512ff797441" translate="yes" xml:space="preserve">
          <source>&quot; is interpreted as $_[</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59840b04914b5f1e29913b55a368cc1af38e7293" translate="yes" xml:space="preserve">
          <source>&quot; or &quot;_-</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="247cd3dd7ddd112e53a1e0387f4c68345c6ef091" translate="yes" xml:space="preserve">
          <source>&quot; or &quot;use base qw(</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a75497118120227d68ded49b4caee45019ed727" translate="yes" xml:space="preserve">
          <source>&quot; or shrpenv='' See the main perl</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9b3290cc064f17f283042fafb349d782e635ba7" translate="yes" xml:space="preserve">
          <source>&quot; paragraph. In practice, most such paragraphs are short, as in:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fcc6dfbf8713409f4fa450b3d15b58b64b80e3c" translate="yes" xml:space="preserve">
          <source>&quot; paragraphs. I.e., these should be tolerated:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0ae6e7074b46cae5275270e9ffcc41075e4f434" translate="yes" xml:space="preserve">
          <source>&quot; region</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b499b337e40d5b87aa230d37472572b180959ded" translate="yes" xml:space="preserve">
          <source>&quot; region where</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="536d0e188c3f2610bf21e506ddcaec764bf1b733" translate="yes" xml:space="preserve">
          <source>&quot; region, then it's a data paragraph, unless &quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b86473a896d82ef8100f7549028c7ca608efcd54" translate="yes" xml:space="preserve">
          <source>&quot; regions, and contentless &quot;=for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93ac7033c68213c5bd4c1172e2708c2529d9a280" translate="yes" xml:space="preserve">
          <source>&quot; regions, empty &quot;=begin :</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbe0d2f1256a6e3f89923765f9eded4f34acd3dc" translate="yes" xml:space="preserve">
          <source>&quot; sequence unless &quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35551bc231111466639645e6b9fa7fea646a252d" translate="yes" xml:space="preserve">
          <source>&quot; sequence where &quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7c1c9e0712036c0ca717aa7e23487ad0dfbfd2a" translate="yes" xml:space="preserve">
          <source>&quot; specifies that the remainder of just this paragraph (starting right after</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="404b1ebfbf741c29cdb04575aee2259e2e393d6b" translate="yes" xml:space="preserve">
          <source>&quot; there. In this case you can do:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4959b6e9a68b6d7f0b207969b307f83f385a942" translate="yes" xml:space="preserve">
          <source>&quot; with &quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fb755a5285d0f6db608e18102740f090823318c" translate="yes" xml:space="preserve">
          <source>&quot; || die;\nexit;&quot; (i.e. the remainder of the input text, concatenated),</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="929659a6cf2dad61108228897679a97623ffd55f" translate="yes" xml:space="preserve">
          <source>&quot;&quot; (a here document has no second left delimiter, second text, second right delimiter, or trailing modifiers).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c65cecde857006645a44e8b06a929cf7b05d3c99" translate="yes" xml:space="preserve">
          <source>&quot;&quot; (i.e. the prefix substring -- trivial in this case),</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b80b57d6359feeec3210ac98701de95b64c0537" translate="yes" xml:space="preserve">
          <source>&quot;&amp;gt;...&amp;lt;/a&amp;gt; elements). Where Pod processors can control this behavior, they should use the first such anchor. That is, &lt;code&gt;L&amp;lt;Foo/Bar&amp;gt;&lt;/code&gt; refers to the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f8536cf117c3c9a69c3891a0b3114d85ac5d3d7" translate="yes" xml:space="preserve">
          <source>&quot;&amp;gt;...&amp;lt;/a&amp;gt; is most easily just left up to browsers to decide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f709df1916c6b638671928f3d2e4685bca3e4744" translate="yes" xml:space="preserve">
          <source>&quot;&amp;lt;&amp;lt;&quot; (i.e. the &quot;name&quot; of the quotelike operator)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="def2b59e780d4b1c68e4ce761889d0cbf0ed6dd8" translate="yes" xml:space="preserve">
          <source>&quot;&amp;lt;&amp;lt;'EOMSG'\nThis is the message.\nEOMSG\n&quot; (i.e. the full extracted here document, including fore and aft delimiters),</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b975c4de4e7bd8906a42846fb364a8efb155ad3" translate="yes" xml:space="preserve">
          <source>&quot;'EOMSG'&quot; (i.e. the left delimiter of the here document, including any quotes),</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58e092244d2955232da0e409875c89b8fc209ff4" translate="yes" xml:space="preserve">
          <source>&quot;) that do &lt;b&gt;not&lt;/b&gt; include the separator. Note that a separator may be longer than one character or even have no characters at all (the empty string, which is a zero-width match).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f20d5aaff7115ef5150819b550818e11619f077" translate="yes" xml:space="preserve">
          <source>&quot;). The subroutine should return either nothing or else a list of up to four values in the following order:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40d9e6016387b09fad547232375f27ecad99c54f" translate="yes" xml:space="preserve">
          <source>&quot;, &quot;_*&quot;, nor a valid method name; and so Locale::Maketext will throw an exception of you try compiling an expression containing this bracket group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c28c575cad5622d4868b5eafa16c56066261221a" translate="yes" xml:space="preserve">
          <source>&quot;, &quot;_-</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b280342bee85c6138034e08cf73fc0e74cdf52d" translate="yes" xml:space="preserve">
          <source>&quot;, ... &quot;=end</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d2c96cbc2b96bb34e64e74587d54e3e5a41e921" translate="yes" xml:space="preserve">
          <source>&quot;, but can be &quot;ypcat group&quot; when &lt;code&gt;NIS&lt;/code&gt; is used. On some systems, such as os390, there may be no equivalent command, in which case this variable is unset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfc9e39f269e3f4cd75af50d96ecd66f52ea4493" translate="yes" xml:space="preserve">
          <source>&quot;, but can be &quot;ypcat hosts&quot; when &lt;code&gt;NIS&lt;/code&gt; is used. On some systems, such as os390, there may be no equivalent command, in which case this variable is unset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73899bd89009306edc8fe1ca48c814033d6f052a" translate="yes" xml:space="preserve">
          <source>&quot;, but can be &quot;ypcat passwd&quot; when &lt;code&gt;NIS&lt;/code&gt; is used. On some systems, such as os390, there may be no equivalent command, in which case this variable is unset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="831a1480149d5036e33ac9196e9cbb28478f40c7" translate="yes" xml:space="preserve">
          <source>&quot;, mean that the text/data in between is meant for formatters that understand the special format called</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1ff34532a59b8e84b92d8ddeca8af7dbe10c732" translate="yes" xml:space="preserve">
          <source>&quot;, some paragraphs, and a command &quot;=end</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d4d2ee91f36c080d0153edcc50fcbb85413d0f7" translate="yes" xml:space="preserve">
          <source>&quot;, then that group is interpreted as just the interpolation of all its items:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="293582d6be89ab606f1a3968907e8ff669c6d8ad" translate="yes" xml:space="preserve">
          <source>&quot;...&quot;=end</source>
          <target state="translated">&quot;...&quot;=end</target>
        </trans-unit>
        <trans-unit id="5bbb1810407368eb4ad0f47875727823997487db" translate="yes" xml:space="preserve">
          <source>&quot;...&quot;=end :</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1696f9f2e379fff047abcc0c98088695fece6deb" translate="yes" xml:space="preserve">
          <source>&quot;...as many times as possible...&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0489eec73dc2f270bb5ef8b489073064fe29761d" translate="yes" xml:space="preserve">
          <source>&quot;...discarding anything else that appears (i.e. the commas)&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4604c3e39bfcff033bad1589f1b61a02f17476f0" translate="yes" xml:space="preserve">
          <source>&quot;&lt;code&gt;-&amp;gt;&lt;/code&gt; &quot; is an infix dereference operator, just as it is in C and C++. If the right side is either a &lt;code&gt;[...]&lt;/code&gt; , &lt;code&gt;{...}&lt;/code&gt; , or a &lt;code&gt;(...)&lt;/code&gt; subscript, then the left side must be either a hard or symbolic reference to an array, a hash, or a subroutine respectively. (Or technically speaking, a location capable of holding a hard reference, if it's an array or hash reference being used for assignment.) See &lt;a href=&quot;perlreftut&quot;&gt;perlreftut&lt;/a&gt; and &lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87d4ddf315acae1d7261b2cbdf3c26fb68734035" translate="yes" xml:space="preserve">
          <source>&quot;=over&quot;...&quot;=back&quot; regions are used for various kinds of list-like structures. (I use the term &quot;region&quot; here simply as a collective term for everything from the &quot;=over&quot; to the matching &quot;=back&quot;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eee34cc2f924e32a8746c29c4a3330f57f5f7a3" translate="yes" xml:space="preserve">
          <source>&quot;As many as there are grains of sand on all the beaches of the world . . .&quot; - Carl Sagan</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="726073e752ec4ad4505377713578e61bbc39866e" translate="yes" xml:space="preserve">
          <source>&quot;Bar&quot; section in Foo.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24dab474c5207d619d178a6d0b1a746c92399974" translate="yes" xml:space="preserve">
          <source>&quot;Demystifying Character Sets&quot;, Andrea Vine, Multilingual Computing &amp;amp; Technology, &lt;b&gt;#26 Vol. 10 Issue 4&lt;/b&gt;, August/September 1999; ISSN 1523-0309; Multilingual Computing Inc. Sandpoint ID, USA.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53d47c5c6618aaccf21203ec78a161ea55b99dd1" translate="yes" xml:space="preserve">
          <source>&quot;Dialect&quot; is not a useful term, since there is no objective criterion for establishing when two language-forms are dialects of eachother, or are separate languages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63974c1db84119a85525b536003f3f1249f34836" translate="yes" xml:space="preserve">
          <source>&quot;EOMSG&quot; (i.e. the right delimiter of the here document),</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86290057b853fe07f340970de7e674393f0262bd" translate="yes" xml:space="preserve">
          <source>&quot;Fast gets&quot; Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d1688fa4618da64f6b12022a58ff6c9a294a461" translate="yes" xml:space="preserve">
          <source>&quot;Foo.pm provides an implementation of the FOO protocol. Bar.pm implements the related BAR protocol.&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="348c21be76bb053e161cb7bda6d3f6118cec74f2" translate="yes" xml:space="preserve">
          <source>&quot;FooBar.pm provides an implementation of the FOO protocol and the related BAR standard.&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="615c2c4aaa8e2289cba6c94484766fda4a921b75" translate="yes" xml:space="preserve">
          <source>&quot;Fused multiply-add&quot;, &lt;code&gt;x * y + z&lt;/code&gt; , possibly faster (and less lossy) than the explicit two operations [C99].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee78324185ab7dd1ea135c03c8d55c563938e2a0" translate="yes" xml:space="preserve">
          <source>&quot;Gimme&quot; Values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f09f3beb6a39d1cc2e92bccae22c28eed74e0ec4" translate="yes" xml:space="preserve">
          <source>&quot;How do I print out the contents of a hash when all I have is a reference?&quot; First write the code for printing out a hash:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55010eb3a0f088dca619cb7d21c04b4f07792117" translate="yes" xml:space="preserve">
          <source>&quot;Internationalization&quot; is often abbreviated as &lt;b&gt;i18n&lt;/b&gt; because its first and last letters are separated by eighteen others. (You may guess why the internalin ... internaliti ... i18n tends to get abbreviated.) In the same way, &quot;localization&quot; is often abbreviated to &lt;b&gt;l10n&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d308c720700121780e21ecb715543e056dbc9565" translate="yes" xml:space="preserve">
          <source>&quot;Introduce&quot; &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; variables to visible status. This is called during parsing at the end of each statement to make lexical variables visible to subsequent statements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc60411d9744c1b217658a75fa90b31a7c413345" translate="yes" xml:space="preserve">
          <source>&quot;It does not work&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87f108810249f34fd4d96f6085496c94df07a91e" translate="yes" xml:space="preserve">
          <source>&quot;Mortal&quot; SVs are mainly used for SVs that are placed on perl's stack. For example an SV which is created just to pass a number to a called sub is made mortal to have it cleaned up automatically when it's popped off the stack. Similarly, results returned by XSUBs (which are pushed on the stack) are often made mortal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab9aac3ee68b880ca89848974a5f87346a57524b" translate="yes" xml:space="preserve">
          <source>&quot;Mortalization&quot; then is at its simplest a deferred &lt;code&gt;SvREFCNT_dec&lt;/code&gt; . However, if you mortalize a variable twice, the reference count will later be decremented twice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96fb0826b6ee3caed8525ae261c21b036f0b6681" translate="yes" xml:space="preserve">
          <source>&quot;Out of memory!&quot; messages during the build of Perl are most often fixed by re building the GNU make utility for OS/390 from a source code kit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36702080b8fee44d9d04d03dc11e1deb28d8cab1" translate="yes" xml:space="preserve">
          <source>&quot;Pacifist&quot; from CharlesSoft (&lt;a href=&quot;http://www.charlessoft.com/&quot;&gt;http://www.charlessoft.com/&lt;/a&gt;) is a nice way to extract the Perl binaries from the OS media, without having to reinstall the entire OS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b130b15ac0b9c20bffa3f769b1e96a70008a5c5d" translate="yes" xml:space="preserve">
          <source>&quot;Perl&quot; is the name of the language. Only the &quot;P&quot; is capitalized. The name of the interpreter (the program which runs the Perl script) is &quot;perl&quot; with a lowercase &quot;p&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4508837cc18d726d16c39b99abd0fbdc7ba3ccfb" translate="yes" xml:space="preserve">
          <source>&quot;Porting/Maintainers.pl&quot;</source>
          <target state="translated">&quot;Porting/Maintainers.pl&quot;</target>
        </trans-unit>
        <trans-unit id="1bcf08241e138dadc770c577d5ce86e6f113ee3f" translate="yes" xml:space="preserve">
          <source>&quot;Positive difference&quot;, &lt;code&gt;x - y&lt;/code&gt; if &lt;code&gt;x &amp;gt; y&lt;/code&gt; , zero otherwise [C99].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0017c90d6d319b00407e2d5393a048052eec957" translate="yes" xml:space="preserve">
          <source>&quot;Programming Perl&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4e47c2aaee257ae0d1ef04694649ddd10a28fc8" translate="yes" xml:space="preserve">
          <source>&quot;RISC OS&quot; is the proper name for the operating system, but the value in &lt;code&gt;$^O&lt;/code&gt; is &quot;riscos&quot; (because we don't like shouting).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e22aecff2c1a711a55c4b42ef5ff3c101dbe1a4" translate="yes" xml:space="preserve">
          <source>&quot;Rounding to zero&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2094957749e7292950132fe54a5585b67a99435" translate="yes" xml:space="preserve">
          <source>&quot;Social Contract about Contributed Modules&quot; originally by Russ Allbery &amp;lt;rra@stanford.edu&amp;gt; and the perl5-porters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0475de65a5ee7f7c7fce9e004462f9361141e37" translate="yes" xml:space="preserve">
          <source>&quot;Superseded&quot; by sv_nosharing().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1e844b5c3467cb34691ed07ebc33426d1a1bbad" translate="yes" xml:space="preserve">
          <source>&quot;The Road goes ever on and on, down from the door where it began.&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7bc1ec8466bffdcb0c9ce3859dfbc6d990f2199" translate="yes" xml:space="preserve">
          <source>&quot;This is the message.\n&quot; (i.e. the text of the here document),</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a77a31ed530d9fefa4de597c42f8d42dd6ad9d6" translate="yes" xml:space="preserve">
          <source>&quot;Try and extract a ' or &quot; delimited string, otherwise extract anything up to a comma...&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c743e8b83503d9400c724e77d16b4131306d6c13" translate="yes" xml:space="preserve">
          <source>&quot;Used only once&quot; warnings can be generated when &lt;code&gt;autodie&lt;/code&gt; or &lt;code&gt;Fatal&lt;/code&gt; is used with package filehandles (eg, &lt;code&gt;FILE&lt;/code&gt; ). It's strongly recommended you use scalar filehandles instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b92dd946d4543f66a0cac05da0086638295237d6" translate="yes" xml:space="preserve">
          <source>&quot;Used only once&quot; warnings can be generated when &lt;code&gt;autodie&lt;/code&gt; or &lt;code&gt;Fatal&lt;/code&gt; is used with package filehandles (eg, &lt;code&gt;FILE&lt;/code&gt; ). Scalar filehandles are strongly recommended instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b6ad2f63ae904551b4f6fda68b35bfc9b46f003" translate="yes" xml:space="preserve">
          <source>&quot;Version strings&quot; are incompatible and should not be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4f7e6dd4c99a32558882a8a7aa708f6a1e6d23c" translate="yes" xml:space="preserve">
          <source>&quot;We're really serious about reinventing everything that needs reinventing.&quot; --Larry Wall</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edf086af6f9276c9313a4674a9441f8f3f1aa820" translate="yes" xml:space="preserve">
          <source>&quot;bar&quot;. Here it's more effective to use minimal matching to make sure you get the text between a &quot;foo&quot; and the first &quot;bar&quot; thereafter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78a54c491dd1f74a50504e5c54ead7bcfa5953d1" translate="yes" xml:space="preserve">
          <source>&quot;character&quot; can actually consist of more than one internal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="989d7ca1bb0b22bed0a3905cc989ba99d6be4a91" translate="yes" xml:space="preserve">
          <source>&quot;character&quot; or code point. For Western languages, this is adequately modelled by a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="847c4d7ac56d55423e94dddca824eeb3b83b7854" translate="yes" xml:space="preserve">
          <source>&quot;cumulative&quot; times will be bogus. On anything other than Windows NT or Windows 2000, &quot;system&quot; time will be bogus, and &quot;user&quot; time is actually the time returned by the &lt;code&gt;clock()&lt;/code&gt; function in the C runtime library. (Win32)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc0871a6875d5c4960d922fcce802399e4b7633b" translate="yes" xml:space="preserve">
          <source>&quot;echo surprise&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b41aff569bde877e5369d2efdea71435f81e0b55" translate="yes" xml:space="preserve">
          <source>&quot;failure_auto_handler&quot; may not be exactly what you want, but I hope it at least shows you that maketext failure can be mitigated in any number of very flexible ways. If you can formalize exactly what you want, you should be able to express that as a failure handler. You can even make it default for every object of a given class, by setting it in that class's init:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec5099d9f0bc50a9fa611e9032f0bad4ca03c5da" translate="yes" xml:space="preserve">
          <source>&quot;foo&quot; and the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2390df1760a4cf3c0228e93e72976961624ce68f" translate="yes" xml:space="preserve">
          <source>&quot;if (!foo) ...&quot; rather than &quot;if (foo == FALSE) ...&quot; etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f85459426c73038a5a31528fa13a322c89aa692" translate="yes" xml:space="preserve">
          <source>&quot;knows&quot; where to find it. It is an example of a layer which takes an argument as it is called thus:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f00c06303672021b2fa6bcf4a262a3aa65530747" translate="yes" xml:space="preserve">
          <source>&quot;my $x&quot; having gone out of scope by the time the anonymous subroutine runs. That's what a closure is all about.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="857f7c33f8400012941d903dbe5794c9451950ba" translate="yes" xml:space="preserve">
          <source>&quot;perl&quot;</source>
          <target state="translated">&quot;perl&quot;</target>
        </trans-unit>
        <trans-unit id="c94840830b8ce69f7171413e18dc3f86f465b7af" translate="yes" xml:space="preserve">
          <source>&quot;perl.exe&quot;</source>
          <target state="translated">&quot;perl.exe&quot;</target>
        </trans-unit>
        <trans-unit id="c465fd635a10476d894fa900f37b65c0dcb301bd" translate="yes" xml:space="preserve">
          <source>&quot;perl.pm&quot;</source>
          <target state="translated">&quot;perl.pm&quot;</target>
        </trans-unit>
        <trans-unit id="68b5ce6b9b6e73dc84b6191f9a508db84569b9d3" translate="yes" xml:space="preserve">
          <source>&quot;perlio&quot; over &quot;unix&quot; provides a complete replacement for stdio as seen via PerlIO API. This is the default for USE_PERLIO when system's stdio does not permit perl's &quot;fast gets&quot; access, and which do not distinguish between &lt;code&gt;O_TEXT&lt;/code&gt; and &lt;code&gt;O_BINARY&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="568eccb95ee35464182472bc4ed9b9655eb0600d" translate="yes" xml:space="preserve">
          <source>&quot;return foo;&quot; rather than &quot;return(foo);&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ef11ccf9abe1dc589548120aa9b022376ccd19d" translate="yes" xml:space="preserve">
          <source>&quot;rsh cat file |&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e727ca42016a89a2f4fa54e53d8ca9f88f3b7825" translate="yes" xml:space="preserve">
          <source>&quot;stuff&quot;</source>
          <target state="translated">&quot;stuff&quot;</target>
        </trans-unit>
        <trans-unit id="7a83a9a0ad2d14ac966685d8c971a4c2c0bdddd9" translate="yes" xml:space="preserve">
          <source>&quot;who by trained skill rescued life from such great billows and such thick darkness and moored it in so perfect a calm and in so brilliant a light&quot; - Lucretius</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82b79406e7e2594c27c15ad88e8f731244170f34" translate="yes" xml:space="preserve">
          <source>&quot;x-&quot; is a prefix for language tags that are not registered with ISO or IANA. Example, x-double-dutch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f0c991d4fad2eb14b6e409336108c9768e40dbb" translate="yes" xml:space="preserve">
          <source># Bison as a reentrant yacc:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c0807798f9b4867c69c968eb87b5b3c68a4dcde" translate="yes" xml:space="preserve">
          <source># Create a string representing an optimized pattern (a la Friedl) # that matches a substring delimited by any of the specified characters # (in this case: any type of quote or a slash)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9ffe5af95f8500e158f4cf2c1932c0700af8947" translate="yes" xml:space="preserve">
          <source># Generate a reference to an anonymous sub that is just like extract_tagged # but pre-compiled and optimized for a specific pair of tags, and consequently # much faster (i.e. 3 times faster). It uses qr// for better performance on # repeated calls, so it only works under Perl 5.005 or later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5101d3cf689f70b81b6919ba2f451b4a0420e8b9" translate="yes" xml:space="preserve">
          <source># Variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2216e4bbdb2f5861335e49103053cb8a676197bd" translate="yes" xml:space="preserve">
          <source># add flag %pure_parser:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc5cf8f12f4906d81eec5aaebde83cfd4ac5dc27" translate="yes" xml:space="preserve">
          <source># call bison:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd0b75b10dccaf613779a5ef47fc36295cfc0d36" translate="yes" xml:space="preserve">
          <source># cleanup:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bfc95db7c073595e2d7a847148ea9791978cf4d" translate="yes" xml:space="preserve">
          <source># dereference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1bc445c96fffb34d3bd3960a6fa21b7ff4a4f86" translate="yes" xml:space="preserve">
          <source># finish this later #</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28b5caf6238469e33f2b94648551dc19aca2e6c0" translate="yes" xml:space="preserve">
          <source># ifdebug</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1b3d7eed2c80c4891e25597006aef84a9c72092" translate="yes" xml:space="preserve">
          <source># ifdebug-constant</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d0c1baeac22c39044889653045d33b16910a5e4" translate="yes" xml:space="preserve">
          <source># logfile</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="505f550b86f50101933d55a5cbf7cfebd8084b0a" translate="yes" xml:space="preserve">
          <source># regex-transliterate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d131043135cb389f92faaf2cdd8e166456c039df" translate="yes" xml:space="preserve">
          <source># save parameters: params=&quot;&quot; while [[ $# -gt 1 ]]; do params=&quot;$params $1&quot; shift done</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a003615b205a339a3c35e66f6b9669a121623d38" translate="yes" xml:space="preserve">
          <source># sort-apache-log</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c6288b14b73ed4d3376bd3c2ee6237545e849c7" translate="yes" xml:space="preserve">
          <source># sort-apache-log-schwarzian</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7477f3c827e92b89be53f3394df27115118eef8" translate="yes" xml:space="preserve">
          <source># vim: ts=2 sts=2 sw=2 et:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd9dc0c9b41d88c092c735108a9c09f91b5d723e" translate="yes" xml:space="preserve">
          <source># wordmatch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6ff294a8366d7c6db65d3ec1259a630ce8fecd6" translate="yes" xml:space="preserve">
          <source>#! and quoting on non-Unix systems</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59bec4791fee675f5ed27ae1bff8ac1f01cf8709" translate="yes" xml:space="preserve">
          <source>#!end included /path/to/manifest.skip</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="562668a4e3158ff447ee838c980469de671af5dd" translate="yes" xml:space="preserve">
          <source>#!start included /path/to/manifest.skip</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72c46abddab87ee5ed0d0b8ae594455fc8a4eb6a" translate="yes" xml:space="preserve">
          <source>#p5p on IRC</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cdf2936da2fc556bfa533ab1eb59ce710ac80e5" translate="yes" xml:space="preserve">
          <source>$</source>
          <target state="translated">$</target>
        </trans-unit>
        <trans-unit id="2b2bf58d7c05813eeb142609e597d302c236cb54" translate="yes" xml:space="preserve">
          <source>$!</source>
          <target state="translated">$!</target>
        </trans-unit>
        <trans-unit id="19c33f53d4c44993637a47e5b8cae4ab403ffdc6" translate="yes" xml:space="preserve">
          <source>$&quot;</source>
          <target state="translated">$&quot;</target>
        </trans-unit>
        <trans-unit id="4f237b451ae97c31abb9472f0de827c4b6b9a63b" translate="yes" xml:space="preserve">
          <source>$#</source>
          <target state="translated">$#</target>
        </trans-unit>
        <trans-unit id="89f0403865a685eab3831c406205bbfe40f946d4" translate="yes" xml:space="preserve">
          <source>$$</source>
          <target state="translated">$$</target>
        </trans-unit>
        <trans-unit id="53136aecf3561792d2c13d93130b07d4e7515408" translate="yes" xml:space="preserve">
          <source>$%</source>
          <target state="translated">$%</target>
        </trans-unit>
        <trans-unit id="e573170c9f5a0c5e32ea337f1ceded3533ad5ccd" translate="yes" xml:space="preserve">
          <source>$&amp;#x27;</source>
          <target state="translated">$&amp;#x27;</target>
        </trans-unit>
        <trans-unit id="03ffa019ef03e8e87433eb7791c8f6c3dd4f674c" translate="yes" xml:space="preserve">
          <source>$&amp;amp;</source>
          <target state="translated">$&amp;amp;</target>
        </trans-unit>
        <trans-unit id="36e9b970866234d5d0d436624112a5e2cbbaabea" translate="yes" xml:space="preserve">
          <source>$&amp;gt;</source>
          <target state="translated">$&amp;gt;</target>
        </trans-unit>
        <trans-unit id="42b8a99ce454e1bc93a6f922aa7a96ad36f5892b" translate="yes" xml:space="preserve">
          <source>$&amp;lt;</source>
          <target state="translated">$&amp;lt;</target>
        </trans-unit>
        <trans-unit id="b1de846438944cd0d19a82caa6b2cbe43ec1a853" translate="yes" xml:space="preserve">
          <source>$&amp;lt;digits&amp;gt; ($1, $2, ...)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7acbf2bdb0d445a8598ad4eabee624eece8a9e1" translate="yes" xml:space="preserve">
          <source>$&amp;quot;</source>
          <target state="translated">$&amp;quot;</target>
        </trans-unit>
        <trans-unit id="19e35eb131e30e833a0837ab77652a9c6f698cfb" translate="yes" xml:space="preserve">
          <source>$'</source>
          <target state="translated">$'</target>
        </trans-unit>
        <trans-unit id="04583da77fde46c83b4592a40f2f8af80f172d2a" translate="yes" xml:space="preserve">
          <source>$(</source>
          <target state="translated">$(</target>
        </trans-unit>
        <trans-unit id="c786d2f8ab2afd820e266997b235777032ed80c1" translate="yes" xml:space="preserve">
          <source>$(PERLRUN) will be used as perl.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36bea4541f4c634080daffee5e9af23d73fbdb3b" translate="yes" xml:space="preserve">
          <source>$)</source>
          <target state="translated">$)</target>
        </trans-unit>
        <trans-unit id="03c9903d5615458db68dc2a714835572c6447822" translate="yes" xml:space="preserve">
          <source>$*</source>
          <target state="translated">$*</target>
        </trans-unit>
        <trans-unit id="bda20e3534c4485d869ebc3a17ca82039a446b7a" translate="yes" xml:space="preserve">
          <source>$+</source>
          <target state="translated">$+</target>
        </trans-unit>
        <trans-unit id="01d46b478ff241e18a84748ae6d63a422584e80d" translate="yes" xml:space="preserve">
          <source>$+{foo} will be the same as $2, and $3 will contain 'z' instead of the opposite which is what a .NET regex hacker might expect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fb2f246b85cc1ccf71f6161bb7ffb1b6a6b800b" translate="yes" xml:space="preserve">
          <source>$,</source>
          <target state="translated">$,</target>
        </trans-unit>
        <trans-unit id="8687e81c89fd859f915437acb2abab5377adfbb6" translate="yes" xml:space="preserve">
          <source>$-</source>
          <target state="translated">$-</target>
        </trans-unit>
        <trans-unit id="867571b364af93edd7a5f7b1037f8f334b5faa03" translate="yes" xml:space="preserve">
          <source>$.</source>
          <target state="translated">$.</target>
        </trans-unit>
        <trans-unit id="ccded91e42cf3f8409738b70a21ecc24c0cd6ea8" translate="yes" xml:space="preserve">
          <source>$/</source>
          <target state="translated">$/</target>
        </trans-unit>
        <trans-unit id="27d5c2470022b5ccab4f76808896be38c7033802" translate="yes" xml:space="preserve">
          <source>$/ has to be a string. You can use these examples if you really need to do this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67fcfaddec4102c49977fd17a1731a9d061fc054" translate="yes" xml:space="preserve">
          <source>$0</source>
          <target state="translated">$0</target>
        </trans-unit>
        <trans-unit id="0fea9c4eaa24d19ef0ff52c0e6de19ff56ef6749" translate="yes" xml:space="preserve">
          <source>$0 assignments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="530556f6a7d26d930477d3325d18325323d81d14" translate="yes" xml:space="preserve">
          <source>$:</source>
          <target state="translated">$:</target>
        </trans-unit>
        <trans-unit id="9f1a0c751d8ad01052a602004a2db8d9b250e2d8" translate="yes" xml:space="preserve">
          <source>$;</source>
          <target state="translated">$;</target>
        </trans-unit>
        <trans-unit id="6c54da87202f53539a818d56449eac47dd2abb2c" translate="yes" xml:space="preserve">
          <source>$=</source>
          <target state="translated">$=</target>
        </trans-unit>
        <trans-unit id="89068f2eedb08a016758d168f896ce1532646a83" translate="yes" xml:space="preserve">
          <source>$?</source>
          <target state="translated">$?</target>
        </trans-unit>
        <trans-unit id="956def6823dff82073ab6f4108231cc1d2f9c39c" translate="yes" xml:space="preserve">
          <source>$@</source>
          <target state="translated">$@</target>
        </trans-unit>
        <trans-unit id="12675ef7f4b8924cd27cbe5bfa2280a86acdf19a" translate="yes" xml:space="preserve">
          <source>$ACCUMULATOR</source>
          <target state="translated">$ACCUMULATOR</target>
        </trans-unit>
        <trans-unit id="8f10b30742db71464850eed8f13d63349dcff16d" translate="yes" xml:space="preserve">
          <source>$ALIAS</source>
          <target state="translated">$ALIAS</target>
        </trans-unit>
        <trans-unit id="dc6c6edddd138f5fb4e1c1106d266c9e3a40c5f8" translate="yes" xml:space="preserve">
          <source>$ARG</source>
          <target state="translated">$ARG</target>
        </trans-unit>
        <trans-unit id="31c0946904fd7f3bf6c8ca612d2cfbbecadc731e" translate="yes" xml:space="preserve">
          <source>$ARGV</source>
          <target state="translated">$ARGV</target>
        </trans-unit>
        <trans-unit id="e99a1a2d7cdacebe7fc5a37c9a8c6b5dc4b66586" translate="yes" xml:space="preserve">
          <source>$Archive::Tar::CHMOD</source>
          <target state="translated">$Archive::Tar::CHMOD</target>
        </trans-unit>
        <trans-unit id="8fb90fea351f12c22c8fad472081aca56d6fbd05" translate="yes" xml:space="preserve">
          <source>$Archive::Tar::CHOWN</source>
          <target state="translated">$Archive::Tar::CHOWN</target>
        </trans-unit>
        <trans-unit id="80537c15248edf7d7c15396803be0e5f65fa0ac1" translate="yes" xml:space="preserve">
          <source>$Archive::Tar::DEBUG</source>
          <target state="translated">$Archive::Tar::DEBUG</target>
        </trans-unit>
        <trans-unit id="5553232c55f29fdcf87f223a0344310ada0a0735" translate="yes" xml:space="preserve">
          <source>$Archive::Tar::DO_NOT_USE_PREFIX</source>
          <target state="translated">$Archive::Tar::DO_NOT_USE_PREFIX</target>
        </trans-unit>
        <trans-unit id="39e59f34bfeeeb748a54c56614f5d250905f8bb4" translate="yes" xml:space="preserve">
          <source>$Archive::Tar::FOLLOW_SYMLINK</source>
          <target state="translated">$Archive::Tar::FOLLOW_SYMLINK</target>
        </trans-unit>
        <trans-unit id="42dbe1717a6bf661c0fafa8c77c960fa7b3bc536" translate="yes" xml:space="preserve">
          <source>$Archive::Tar::HAS_IO_STRING</source>
          <target state="translated">$Archive::Tar::HAS_IO_STRING</target>
        </trans-unit>
        <trans-unit id="ce9b393cf5f3a5abe5ef5fb411d5ea0063cd91d1" translate="yes" xml:space="preserve">
          <source>$Archive::Tar::HAS_PERLIO</source>
          <target state="translated">$Archive::Tar::HAS_PERLIO</target>
        </trans-unit>
        <trans-unit id="a2eb72c82aeb3d0e7ffbd433b1fc050d7e2ad4db" translate="yes" xml:space="preserve">
          <source>$Archive::Tar::INSECURE_EXTRACT_MODE</source>
          <target state="translated">$Archive::Tar::INSECURE_EXTRACT_MODE</target>
        </trans-unit>
        <trans-unit id="aace0b5db944d45010e8e3e8409842870e10ac68" translate="yes" xml:space="preserve">
          <source>$Archive::Tar::SAME_PERMISSIONS</source>
          <target state="translated">$Archive::Tar::SAME_PERMISSIONS</target>
        </trans-unit>
        <trans-unit id="90f0cae80ca167d2c415c4de8f6c1716912da498" translate="yes" xml:space="preserve">
          <source>$Archive::Tar::WARN</source>
          <target state="translated">$Archive::Tar::WARN</target>
        </trans-unit>
        <trans-unit id="3c0f2d5c2a91506e84907eaad62cdef4890e3008" translate="yes" xml:space="preserve">
          <source>$Archive::Tar::ZERO_PAD_NUMBERS</source>
          <target state="translated">$Archive::Tar::ZERO_PAD_NUMBERS</target>
        </trans-unit>
        <trans-unit id="f380a34bb9a6e3b042cd707f0a9e1a6c651887fa" translate="yes" xml:space="preserve">
          <source>$Archive::Tar::error</source>
          <target state="translated">$Archive::Tar::error</target>
        </trans-unit>
        <trans-unit id="78c253333dc0eda9b8f237c04afcada30580e290" translate="yes" xml:space="preserve">
          <source>$B::overlay</source>
          <target state="translated">$B::overlay</target>
        </trans-unit>
        <trans-unit id="ef033900c00554f08204961c03c32170da2c5921" translate="yes" xml:space="preserve">
          <source>$BASETIME</source>
          <target state="translated">$BASETIME</target>
        </trans-unit>
        <trans-unit id="b99bd738fd61a5d551acee3114d0e557f97c0c01" translate="yes" xml:space="preserve">
          <source>$CHILD_ERROR</source>
          <target state="translated">$CHILD_ERROR</target>
        </trans-unit>
        <trans-unit id="b4285d6416fa73d873a239972fe4d40456d0789e" translate="yes" xml:space="preserve">
          <source>$COMPILING</source>
          <target state="translated">$COMPILING</target>
        </trans-unit>
        <trans-unit id="7c06e35ecff5267d7a3d8fb9fcb4ea4e88a3dbee" translate="yes" xml:space="preserve">
          <source>$CPANHOME/.cpan/build/</source>
          <target state="translated">$CPANHOME/.cpan/build/</target>
        </trans-unit>
        <trans-unit id="c6bbe29d8c13f0afe001f9f046158c4375a1db7e" translate="yes" xml:space="preserve">
          <source>$Carp::CarpLevel</source>
          <target state="translated">$Carp::CarpLevel</target>
        </trans-unit>
        <trans-unit id="5ae162d8cf29f0d3dc565f3ac95eca68b2e821c3" translate="yes" xml:space="preserve">
          <source>$Carp::MaxArgLen</source>
          <target state="translated">$Carp::MaxArgLen</target>
        </trans-unit>
        <trans-unit id="28a9f8aeea94b30b1c94faa5a715655f94c1b02d" translate="yes" xml:space="preserve">
          <source>$Carp::MaxArgNums</source>
          <target state="translated">$Carp::MaxArgNums</target>
        </trans-unit>
        <trans-unit id="1cb67bf187288cb2af48f6fe6235e62d18858587" translate="yes" xml:space="preserve">
          <source>$Carp::MaxEvalLen</source>
          <target state="translated">$Carp::MaxEvalLen</target>
        </trans-unit>
        <trans-unit id="58d73df1044b3582278fc39ca2943f12ec2fd188" translate="yes" xml:space="preserve">
          <source>$Carp::RefArgFormatter</source>
          <target state="translated">$Carp::RefArgFormatter</target>
        </trans-unit>
        <trans-unit id="1a490038972a8da704c75e249c4b00d85418c1ac" translate="yes" xml:space="preserve">
          <source>$Carp::Verbose</source>
          <target state="translated">$Carp::Verbose</target>
        </trans-unit>
        <trans-unit id="ffd1cd29db6c3ab33f9d27e5b2aab4f641f76884" translate="yes" xml:space="preserve">
          <source>$Config{sitelib}/sitecustomize.pl</source>
          <target state="translated">$Config{sitelib}/sitecustomize.pl</target>
        </trans-unit>
        <trans-unit id="0a4354e9269611583fe193a9ecb4f247f5cc09b1" translate="yes" xml:space="preserve">
          <source>$DEBUGGING</source>
          <target state="translated">$DEBUGGING</target>
        </trans-unit>
        <trans-unit id="8125e3e1c85787a0b8a2a91d076e0e75c096874b" translate="yes" xml:space="preserve">
          <source>$Data::Dumper::Bless</source>
          <target state="translated">$Data::Dumper::Bless</target>
        </trans-unit>
        <trans-unit id="3faf6c582863ddd95ee45deab29611e8280d0b28" translate="yes" xml:space="preserve">
          <source>$Data::Dumper::Deepcopy</source>
          <target state="translated">$Data::Dumper::Deepcopy</target>
        </trans-unit>
        <trans-unit id="f1ec2d5894331e679905738b39d49635ee8ef178" translate="yes" xml:space="preserve">
          <source>$Data::Dumper::Deparse</source>
          <target state="translated">$Data::Dumper::Deparse</target>
        </trans-unit>
        <trans-unit id="09a761059ff00c9eb8b6084e39917b3fc094b9bf" translate="yes" xml:space="preserve">
          <source>$Data::Dumper::Freezer</source>
          <target state="translated">$Data::Dumper::Freezer</target>
        </trans-unit>
        <trans-unit id="898d9df8467a5b8ec56aa2275c611936fed91d1d" translate="yes" xml:space="preserve">
          <source>$Data::Dumper::Indent</source>
          <target state="translated">$Data::Dumper::Indent</target>
        </trans-unit>
        <trans-unit id="76c71e60c67534b4e749776439344472c50b033b" translate="yes" xml:space="preserve">
          <source>$Data::Dumper::Maxdepth</source>
          <target state="translated">$Data::Dumper::Maxdepth</target>
        </trans-unit>
        <trans-unit id="a204cebfa621b0f6ec93ddf466041ef842d15678" translate="yes" xml:space="preserve">
          <source>$Data::Dumper::Maxrecurse</source>
          <target state="translated">$Data::Dumper::Maxrecurse</target>
        </trans-unit>
        <trans-unit id="04fe5fccc3f074594d41f13ff42a62aff2d1b441" translate="yes" xml:space="preserve">
          <source>$Data::Dumper::Pad</source>
          <target state="translated">$Data::Dumper::Pad</target>
        </trans-unit>
        <trans-unit id="0e6209e6c6d6089e3da8285b0e8cb70108f6f91a" translate="yes" xml:space="preserve">
          <source>$Data::Dumper::Pair</source>
          <target state="translated">$Data::Dumper::Pair</target>
        </trans-unit>
        <trans-unit id="e4e6ba9d6e5d6fbf4ed7be29f27731a59af9ec4c" translate="yes" xml:space="preserve">
          <source>$Data::Dumper::Purity</source>
          <target state="translated">$Data::Dumper::Purity</target>
        </trans-unit>
        <trans-unit id="e174ee51b981ac44d8793d48727eac69343b796c" translate="yes" xml:space="preserve">
          <source>$Data::Dumper::Quotekeys</source>
          <target state="translated">$Data::Dumper::Quotekeys</target>
        </trans-unit>
        <trans-unit id="5afa9395e929501e4921f1e28c10dbde141aacfa" translate="yes" xml:space="preserve">
          <source>$Data::Dumper::Sortkeys</source>
          <target state="translated">$Data::Dumper::Sortkeys</target>
        </trans-unit>
        <trans-unit id="8cb2ecbc101c78c1fb46c11f6c78e67cc5497bbc" translate="yes" xml:space="preserve">
          <source>$Data::Dumper::Sparseseen</source>
          <target state="translated">$Data::Dumper::Sparseseen</target>
        </trans-unit>
        <trans-unit id="7a91d01e0515e2a3debca4a52fb3083d82c1a25e" translate="yes" xml:space="preserve">
          <source>$Data::Dumper::Terse</source>
          <target state="translated">$Data::Dumper::Terse</target>
        </trans-unit>
        <trans-unit id="50ede978b2eed64f4120810c2a0891ff93552ce0" translate="yes" xml:space="preserve">
          <source>$Data::Dumper::Toaster</source>
          <target state="translated">$Data::Dumper::Toaster</target>
        </trans-unit>
        <trans-unit id="26ca9cf98f58f601654fe337dac16e676f344220" translate="yes" xml:space="preserve">
          <source>$Data::Dumper::Useperl</source>
          <target state="translated">$Data::Dumper::Useperl</target>
        </trans-unit>
        <trans-unit id="95d63c052c6f4bb6e104322bbb9b2e7bbe1430ef" translate="yes" xml:space="preserve">
          <source>$Data::Dumper::Useqq</source>
          <target state="translated">$Data::Dumper::Useqq</target>
        </trans-unit>
        <trans-unit id="a216f77e59a7e0e3fae0c977b7c62330e4b6e8f2" translate="yes" xml:space="preserve">
          <source>$Data::Dumper::Varname</source>
          <target state="translated">$Data::Dumper::Varname</target>
        </trans-unit>
        <trans-unit id="b176fcaa98d422f4dc369a0548127f7f949c8c1a" translate="yes" xml:space="preserve">
          <source>$EFFECTIVE_GROUP_ID</source>
          <target state="translated">$EFFECTIVE_GROUP_ID</target>
        </trans-unit>
        <trans-unit id="26a892721925fde784da0e01c4b192d0b34a535d" translate="yes" xml:space="preserve">
          <source>$EFFECTIVE_USER_ID</source>
          <target state="translated">$EFFECTIVE_USER_ID</target>
        </trans-unit>
        <trans-unit id="631c1646f3ddb91f757b388e1a26823a2dce665b" translate="yes" xml:space="preserve">
          <source>$EGID</source>
          <target state="translated">$EGID</target>
        </trans-unit>
        <trans-unit id="14bf74134b98d0ee87096f94dd569fe8ae0d481b" translate="yes" xml:space="preserve">
          <source>$ENV{PWD}</source>
          <target state="translated">$ENV{PWD}</target>
        </trans-unit>
        <trans-unit id="6597705d48deb54f7c1c3576a925bbe4e945cda4" translate="yes" xml:space="preserve">
          <source>$ERRNO</source>
          <target state="translated">$ERRNO</target>
        </trans-unit>
        <trans-unit id="55f3da869a8a0b41c13bc5b54e0be9cb3586172c" translate="yes" xml:space="preserve">
          <source>$EUID</source>
          <target state="translated">$EUID</target>
        </trans-unit>
        <trans-unit id="f5d8523241cd7613aa830a24cb92b14bb2ccb686" translate="yes" xml:space="preserve">
          <source>$EVAL_ERROR</source>
          <target state="translated">$EVAL_ERROR</target>
        </trans-unit>
        <trans-unit id="c0c6d83a4fcdeeb16517e3829195c7f68195e86e" translate="yes" xml:space="preserve">
          <source>$EXCEPTIONS_BEING_CAUGHT</source>
          <target state="translated">$EXCEPTIONS_BEING_CAUGHT</target>
        </trans-unit>
        <trans-unit id="36666ec0e4a8df18a6ea6178125d4f7fed69d7fc" translate="yes" xml:space="preserve">
          <source>$EXECUTABLE_NAME</source>
          <target state="translated">$EXECUTABLE_NAME</target>
        </trans-unit>
        <trans-unit id="afd19714a9fe7d706f20e69d4893464dbd967e4a" translate="yes" xml:space="preserve">
          <source>$EXTENDED_OS_ERROR</source>
          <target state="translated">$EXTENDED_OS_ERROR</target>
        </trans-unit>
        <trans-unit id="5a1d15a55e1e3efe390ef98fb8c7f83295d17204" translate="yes" xml:space="preserve">
          <source>$FORMAT_FORMFEED</source>
          <target state="translated">$FORMAT_FORMFEED</target>
        </trans-unit>
        <trans-unit id="0d5ee81e8830e78ce7f94ec346cc72163018f353" translate="yes" xml:space="preserve">
          <source>$FORMAT_LINES_LEFT</source>
          <target state="translated">$FORMAT_LINES_LEFT</target>
        </trans-unit>
        <trans-unit id="06db95be8ba253fba0224cb27878bb563c5b588c" translate="yes" xml:space="preserve">
          <source>$FORMAT_LINES_PER_PAGE</source>
          <target state="translated">$FORMAT_LINES_PER_PAGE</target>
        </trans-unit>
        <trans-unit id="fb5055ea2c08d148c5f81b99fb005e798293ca93" translate="yes" xml:space="preserve">
          <source>$FORMAT_LINE_BREAK_CHARACTERS</source>
          <target state="translated">$FORMAT_LINE_BREAK_CHARACTERS</target>
        </trans-unit>
        <trans-unit id="e60b97700a1ab194037a57df5401d2b23fcd7f47" translate="yes" xml:space="preserve">
          <source>$FORMAT_NAME</source>
          <target state="translated">$FORMAT_NAME</target>
        </trans-unit>
        <trans-unit id="9d635c566dc3ef2fe55c5d7b871fb7e22e5888cb" translate="yes" xml:space="preserve">
          <source>$FORMAT_PAGE_NUMBER</source>
          <target state="translated">$FORMAT_PAGE_NUMBER</target>
        </trans-unit>
        <trans-unit id="e395f04770d560ec4c2e76dda3ebd07ba8d58194" translate="yes" xml:space="preserve">
          <source>$FORMAT_TOP_NAME</source>
          <target state="translated">$FORMAT_TOP_NAME</target>
        </trans-unit>
        <trans-unit id="d2bf10d740abaa3cb5e66cd3e60014fe3d274095" translate="yes" xml:space="preserve">
          <source>$File::Fetch::BLACKLIST</source>
          <target state="translated">$File::Fetch::BLACKLIST</target>
        </trans-unit>
        <trans-unit id="43f216a01ab356df8bf90f80b40f01ab963f7cba" translate="yes" xml:space="preserve">
          <source>$File::Fetch::DEBUG</source>
          <target state="translated">$File::Fetch::DEBUG</target>
        </trans-unit>
        <trans-unit id="b352d89a987e4c5579736d68705af6822eca09ae" translate="yes" xml:space="preserve">
          <source>$File::Fetch::FROM_EMAIL</source>
          <target state="translated">$File::Fetch::FROM_EMAIL</target>
        </trans-unit>
        <trans-unit id="a5ddb3c70c1a23bc41e1fb54a1a6412f0ad36fbc" translate="yes" xml:space="preserve">
          <source>$File::Fetch::FTP_PASSIVE</source>
          <target state="translated">$File::Fetch::FTP_PASSIVE</target>
        </trans-unit>
        <trans-unit id="873626bcac9d01a24fbdb0363add8c60274b5829" translate="yes" xml:space="preserve">
          <source>$File::Fetch::METHOD_FAIL</source>
          <target state="translated">$File::Fetch::METHOD_FAIL</target>
        </trans-unit>
        <trans-unit id="e1eafcc3980e87bf5ffb85799996298dfd4e0c0b" translate="yes" xml:space="preserve">
          <source>$File::Fetch::TIMEOUT</source>
          <target state="translated">$File::Fetch::TIMEOUT</target>
        </trans-unit>
        <trans-unit id="f31734e27c18b800ba0d0bebc25355504603f7d8" translate="yes" xml:space="preserve">
          <source>$File::Fetch::USER_AGENT</source>
          <target state="translated">$File::Fetch::USER_AGENT</target>
        </trans-unit>
        <trans-unit id="72c4ae0d18388f1838b10259912fe19a2bfc90c4" translate="yes" xml:space="preserve">
          <source>$File::Fetch::WARN</source>
          <target state="translated">$File::Fetch::WARN</target>
        </trans-unit>
        <trans-unit id="1531b2d5fc0b6a782b45849e84938e2273c32612" translate="yes" xml:space="preserve">
          <source>$GID</source>
          <target state="translated">$GID</target>
        </trans-unit>
        <trans-unit id="564552091ff936a9b458ca65a4f39e558f8014d5" translate="yes" xml:space="preserve">
          <source>$HOME/.termcap</source>
          <target state="translated">$HOME/.termcap</target>
        </trans-unit>
        <trans-unit id="3971a18a95f5c0899118bcbaadde2bc408bca8f3" translate="yes" xml:space="preserve">
          <source>$HOME/perl5lib</source>
          <target state="translated">$HOME/perl5lib</target>
        </trans-unit>
        <trans-unit id="c93cef2c35777d2852cb255b01a76c86b6bacedb" translate="yes" xml:space="preserve">
          <source>$HOME/perl5lib/MyModule.pm</source>
          <target state="translated">$HOME/perl5lib/MyModule.pm</target>
        </trans-unit>
        <trans-unit id="3f73973ae5192034d94fd9bb626fd84e2e3c82fb" translate="yes" xml:space="preserve">
          <source>$HOME/perl5lib/Myclass/Subclass.pm</source>
          <target state="translated">$HOME/perl5lib/Myclass/Subclass.pm</target>
        </trans-unit>
        <trans-unit id="5ce48ab7d8db201b2c1d618a2cb9a5f5ca392096" translate="yes" xml:space="preserve">
          <source>$INPLACE_EDIT</source>
          <target state="translated">$INPLACE_EDIT</target>
        </trans-unit>
        <trans-unit id="6ef23e13acaaaf010e174c0f51a00a7f351dad18" translate="yes" xml:space="preserve">
          <source>$INPUT_LINE_NUMBER</source>
          <target state="translated">$INPUT_LINE_NUMBER</target>
        </trans-unit>
        <trans-unit id="5d237968e55afd4369386ce82e519e28571242f0" translate="yes" xml:space="preserve">
          <source>$INPUT_RECORD_SEPARATOR</source>
          <target state="translated">$INPUT_RECORD_SEPARATOR</target>
        </trans-unit>
        <trans-unit id="c7e42a220adeaac1f31f9d27d8e0f3301a59d175" translate="yes" xml:space="preserve">
          <source>$IPC::Cmd::ALLOW_NULL_ARGS</source>
          <target state="translated">$IPC::Cmd::ALLOW_NULL_ARGS</target>
        </trans-unit>
        <trans-unit id="2c7857cea28540a9929cd700f835098878d97562" translate="yes" xml:space="preserve">
          <source>$IPC::Cmd::INSTANCES</source>
          <target state="translated">$IPC::Cmd::INSTANCES</target>
        </trans-unit>
        <trans-unit id="f31c60bb1caa78c34315b8bf0ff39c9b97fb104c" translate="yes" xml:space="preserve">
          <source>$IPC::Cmd::USE_IPC_OPEN3</source>
          <target state="translated">$IPC::Cmd::USE_IPC_OPEN3</target>
        </trans-unit>
        <trans-unit id="58625032945d75934c9823c0171f5e9f4b452f55" translate="yes" xml:space="preserve">
          <source>$IPC::Cmd::USE_IPC_RUN</source>
          <target state="translated">$IPC::Cmd::USE_IPC_RUN</target>
        </trans-unit>
        <trans-unit id="171bc407bf352842dbb666432b0b27365416531d" translate="yes" xml:space="preserve">
          <source>$IPC::Cmd::VERBOSE</source>
          <target state="translated">$IPC::Cmd::VERBOSE</target>
        </trans-unit>
        <trans-unit id="46522c787773ca95169b111679cacd5a877fe3bf" translate="yes" xml:space="preserve">
          <source>$IPC::Cmd::WARN</source>
          <target state="translated">$IPC::Cmd::WARN</target>
        </trans-unit>
        <trans-unit id="93bf56809e96a24aaeef593cf74e54f206a3d3ba" translate="yes" xml:space="preserve">
          <source>$LAST_PAREN_MATCH</source>
          <target state="translated">$LAST_PAREN_MATCH</target>
        </trans-unit>
        <trans-unit id="603ebed46feb86c71a70389e38e3c8ec6509d52c" translate="yes" xml:space="preserve">
          <source>$LAST_REGEXP_CODE_RESULT</source>
          <target state="translated">$LAST_REGEXP_CODE_RESULT</target>
        </trans-unit>
        <trans-unit id="b935b906b0ff840068263231238b1a391934c321" translate="yes" xml:space="preserve">
          <source>$LAST_SUBMATCH_RESULT</source>
          <target state="translated">$LAST_SUBMATCH_RESULT</target>
        </trans-unit>
        <trans-unit id="f968c293a5265407a98f5193ad2db4e33a996baa" translate="yes" xml:space="preserve">
          <source>$LIST_SEPARATOR</source>
          <target state="translated">$LIST_SEPARATOR</target>
        </trans-unit>
        <trans-unit id="fa66c66c89ecf089b5c40f2c0dad46aac6ad9c56" translate="yes" xml:space="preserve">
          <source>$MATCH</source>
          <target state="translated">$MATCH</target>
        </trans-unit>
        <trans-unit id="673962b79136a94dc1096c60a868703a64914a6d" translate="yes" xml:space="preserve">
          <source>$Module::Load::Conditional::CACHE</source>
          <target state="translated">$Module::Load::Conditional::CACHE</target>
        </trans-unit>
        <trans-unit id="1c10dfe2dd4154ac1f47b4e6e00eed1dac053d26" translate="yes" xml:space="preserve">
          <source>$Module::Load::Conditional::CHECK_INC_HASH</source>
          <target state="translated">$Module::Load::Conditional::CHECK_INC_HASH</target>
        </trans-unit>
        <trans-unit id="bdfab39ef1a3ad690e082150b16f9b1cf54f5e7f" translate="yes" xml:space="preserve">
          <source>$Module::Load::Conditional::DEPRECATED</source>
          <target state="translated">$Module::Load::Conditional::DEPRECATED</target>
        </trans-unit>
        <trans-unit id="617fbb7ae68374c24d9042be861c735c544adb0e" translate="yes" xml:space="preserve">
          <source>$Module::Load::Conditional::ERROR</source>
          <target state="translated">$Module::Load::Conditional::ERROR</target>
        </trans-unit>
        <trans-unit id="c2d8beb5881613a4b367893b03f73708e1d70e46" translate="yes" xml:space="preserve">
          <source>$Module::Load::Conditional::FIND_VERSION</source>
          <target state="translated">$Module::Load::Conditional::FIND_VERSION</target>
        </trans-unit>
        <trans-unit id="907a1dfcf9b333c94ab5dd605bdc822256e31c58" translate="yes" xml:space="preserve">
          <source>$Module::Load::Conditional::VERBOSE</source>
          <target state="translated">$Module::Load::Conditional::VERBOSE</target>
        </trans-unit>
        <trans-unit id="d08daadf8677e9c69458bad62de84dc6db297698" translate="yes" xml:space="preserve">
          <source>$NR</source>
          <target state="translated">$NR</target>
        </trans-unit>
        <trans-unit id="df6a8160d5093da08a6be0b2ee478c368a5534a2" translate="yes" xml:space="preserve">
          <source>$OBJ</source>
          <target state="translated">$OBJ</target>
        </trans-unit>
        <trans-unit id="887288dc8d89271e35d5aaad257cebddb172d323" translate="yes" xml:space="preserve">
          <source>$OFS</source>
          <target state="translated">$OFS</target>
        </trans-unit>
        <trans-unit id="e29072f0ed22692c0b7e6fe5e78edccd82e31566" translate="yes" xml:space="preserve">
          <source>$OLD_PERL_VERSION</source>
          <target state="translated">$OLD_PERL_VERSION</target>
        </trans-unit>
        <trans-unit id="bd748d0b6dcf3c09bef0bc31ccabd18378767d1e" translate="yes" xml:space="preserve">
          <source>$ORS</source>
          <target state="translated">$ORS</target>
        </trans-unit>
        <trans-unit id="b29f63e61d3ce93fdb21dda944b4f3b7bb2d8bb5" translate="yes" xml:space="preserve">
          <source>$OSNAME</source>
          <target state="translated">$OSNAME</target>
        </trans-unit>
        <trans-unit id="55dfa42ed9ec251bb1f5d8b176110dd7047f12bb" translate="yes" xml:space="preserve">
          <source>$OS_ERROR</source>
          <target state="translated">$OS_ERROR</target>
        </trans-unit>
        <trans-unit id="15f5d99fd861650fedd0dce25e57e8216966beed" translate="yes" xml:space="preserve">
          <source>$OUTPUT_AUTOFLUSH</source>
          <target state="translated">$OUTPUT_AUTOFLUSH</target>
        </trans-unit>
        <trans-unit id="8d30a2089928d1617ffe411ca032a6a38ff73c33" translate="yes" xml:space="preserve">
          <source>$OUTPUT_FIELD_SEPARATOR</source>
          <target state="translated">$OUTPUT_FIELD_SEPARATOR</target>
        </trans-unit>
        <trans-unit id="1ed4fb80aba9b0b29a733b73f609f855fd297100" translate="yes" xml:space="preserve">
          <source>$OUTPUT_RECORD_SEPARATOR</source>
          <target state="translated">$OUTPUT_RECORD_SEPARATOR</target>
        </trans-unit>
        <trans-unit id="b8e15dd3c562ea1e2f2702af1acf8dbf09ba300e" translate="yes" xml:space="preserve">
          <source>$PERLDB</source>
          <target state="translated">$PERLDB</target>
        </trans-unit>
        <trans-unit id="d8775afdf3a2ca483ce53f0d57c6995fbec55cfb" translate="yes" xml:space="preserve">
          <source>$PERL_VERSION</source>
          <target state="translated">$PERL_VERSION</target>
        </trans-unit>
        <trans-unit id="9cf85d73d9faddf3cd84380e2725603b900ea6b1" translate="yes" xml:space="preserve">
          <source>$PID</source>
          <target state="translated">$PID</target>
        </trans-unit>
        <trans-unit id="48753b805d8cee17c00c01178d3c788056e48faa" translate="yes" xml:space="preserve">
          <source>$POSTMATCH</source>
          <target state="translated">$POSTMATCH</target>
        </trans-unit>
        <trans-unit id="24fc1e37230d19e036d846f996323e68ee9b4f7e" translate="yes" xml:space="preserve">
          <source>$PREMATCH</source>
          <target state="translated">$PREMATCH</target>
        </trans-unit>
        <trans-unit id="9a5efd8c6a8381ef3db65f9b43a61b4f35f770cf" translate="yes" xml:space="preserve">
          <source>$PROCESS_ID</source>
          <target state="translated">$PROCESS_ID</target>
        </trans-unit>
        <trans-unit id="3aad57fb61e548d82975a41ee5933d1df361f7ed" translate="yes" xml:space="preserve">
          <source>$PROGRAM_NAME</source>
          <target state="translated">$PROGRAM_NAME</target>
        </trans-unit>
        <trans-unit id="d3c7757a8f43dd3e49bc9746c48d55f339d76f78" translate="yes" xml:space="preserve">
          <source>$PVers</source>
          <target state="translated">$PVers</target>
        </trans-unit>
        <trans-unit id="d4d550fb608d8a7667972625695373d933647a8b" translate="yes" xml:space="preserve">
          <source>$Package</source>
          <target state="translated">$Package</target>
        </trans-unit>
        <trans-unit id="b0fd36dbe1ae5d7363ea6a98bf34d5b517bf571c" translate="yes" xml:space="preserve">
          <source>$Params::Check::ALLOW_UNKNOWN</source>
          <target state="translated">$Params::Check::ALLOW_UNKNOWN</target>
        </trans-unit>
        <trans-unit id="4afe9f65d7f2a6cd277ba876a0e707e08bd0c7a8" translate="yes" xml:space="preserve">
          <source>$Params::Check::CALLER_DEPTH</source>
          <target state="translated">$Params::Check::CALLER_DEPTH</target>
        </trans-unit>
        <trans-unit id="2a15f9d71624c5f98df28e6b23493b652897ebb0" translate="yes" xml:space="preserve">
          <source>$Params::Check::NO_DUPLICATES</source>
          <target state="translated">$Params::Check::NO_DUPLICATES</target>
        </trans-unit>
        <trans-unit id="1cea0266ece97b5ba04cc925b15f1d22f49042be" translate="yes" xml:space="preserve">
          <source>$Params::Check::ONLY_ALLOW_DEFINED</source>
          <target state="translated">$Params::Check::ONLY_ALLOW_DEFINED</target>
        </trans-unit>
        <trans-unit id="09e479e4c1b8faa340216d6ae359cebe6861a883" translate="yes" xml:space="preserve">
          <source>$Params::Check::PRESERVE_CASE</source>
          <target state="translated">$Params::Check::PRESERVE_CASE</target>
        </trans-unit>
        <trans-unit id="6453a2e34a521d20e8c27b76f88b2956b431bd5b" translate="yes" xml:space="preserve">
          <source>$Params::Check::SANITY_CHECK_TEMPLATE</source>
          <target state="translated">$Params::Check::SANITY_CHECK_TEMPLATE</target>
        </trans-unit>
        <trans-unit id="46b66ca32ccb20b0ff9369f46106e2a6f733d0a4" translate="yes" xml:space="preserve">
          <source>$Params::Check::STRICT_TYPE</source>
          <target state="translated">$Params::Check::STRICT_TYPE</target>
        </trans-unit>
        <trans-unit id="ffbea766b150d32c61b052cb555d7daa1791f89c" translate="yes" xml:space="preserve">
          <source>$Params::Check::STRIP_LEADING_DASHES</source>
          <target state="translated">$Params::Check::STRIP_LEADING_DASHES</target>
        </trans-unit>
        <trans-unit id="61192d1cb03a1037d6e938de2bc57bca7647cf3e" translate="yes" xml:space="preserve">
          <source>$Params::Check::VERBOSE</source>
          <target state="translated">$Params::Check::VERBOSE</target>
        </trans-unit>
        <trans-unit id="b3ccf503a8f638bbe518acedc979c01a553bb12c" translate="yes" xml:space="preserve">
          <source>$Params::Check::WARNINGS_FATAL</source>
          <target state="translated">$Params::Check::WARNINGS_FATAL</target>
        </trans-unit>
        <trans-unit id="41db0eaf93610ac9e1ca0f5b952123835e2b0965" translate="yes" xml:space="preserve">
          <source>$REAL_GROUP_ID</source>
          <target state="translated">$REAL_GROUP_ID</target>
        </trans-unit>
        <trans-unit id="ddc2df1bf1030b90a6259845b653b728d67dd1f3" translate="yes" xml:space="preserve">
          <source>$REAL_USER_ID</source>
          <target state="translated">$REAL_USER_ID</target>
        </trans-unit>
        <trans-unit id="729766ab36a04bf267c232783a2a0d2ada32a6fc" translate="yes" xml:space="preserve">
          <source>$RS</source>
          <target state="translated">$RS</target>
        </trans-unit>
        <trans-unit id="05220bbab4e2f4dc4aa2bbd899c1562e0b881718" translate="yes" xml:space="preserve">
          <source>$SUBSCRIPT_SEPARATOR</source>
          <target state="translated">$SUBSCRIPT_SEPARATOR</target>
        </trans-unit>
        <trans-unit id="b0e9dcdc9e2ed159b8ca0fe7c035781eb5d622cc" translate="yes" xml:space="preserve">
          <source>$SUBSEP</source>
          <target state="translated">$SUBSEP</target>
        </trans-unit>
        <trans-unit id="827562d44ade47bcec5e5ac33f07ec6e9e82231c" translate="yes" xml:space="preserve">
          <source>$SYSTEM_FD_MAX</source>
          <target state="translated">$SYSTEM_FD_MAX</target>
        </trans-unit>
        <trans-unit id="2cc895489fc2eee1f09f0e7a9b475346064db15c" translate="yes" xml:space="preserve">
          <source>$Term::ANSIColor::AUTOLOCAL was changed to take precedence over $Term::ANSIColor::AUTORESET, rather than the other way around, in Term::ANSIColor 4.00, included in Perl 5.17.8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b4d0ec2ecaa45143fe97db1039bb4fc118561a4" translate="yes" xml:space="preserve">
          <source>$Term::Complete::complete</source>
          <target state="translated">$Term::Complete::complete</target>
        </trans-unit>
        <trans-unit id="37ba960decd1dfce7dce2ae594fcaf2df9d2584a" translate="yes" xml:space="preserve">
          <source>$Term::Complete::erase1</source>
          <target state="translated">$Term::Complete::erase1</target>
        </trans-unit>
        <trans-unit id="b9432a470a763d5844452f25f4c164b58569044c" translate="yes" xml:space="preserve">
          <source>$Term::Complete::erase2</source>
          <target state="translated">$Term::Complete::erase2</target>
        </trans-unit>
        <trans-unit id="3c48eac4e78732be148c01f64466ee77e47d3a8f" translate="yes" xml:space="preserve">
          <source>$Term::Complete::kill</source>
          <target state="translated">$Term::Complete::kill</target>
        </trans-unit>
        <trans-unit id="05abc76c6d0a9e8224eb5fbaf3d7a716b00ea054" translate="yes" xml:space="preserve">
          <source>$UID</source>
          <target state="translated">$UID</target>
        </trans-unit>
        <trans-unit id="543435f94cd11c71afba35be3543996198d7326e" translate="yes" xml:space="preserve">
          <source>$WARNING</source>
          <target state="translated">$WARNING</target>
        </trans-unit>
        <trans-unit id="9fd654cf10bd76eafc7b01ab3c865a5aacf85eb5" translate="yes" xml:space="preserve">
          <source>$[</source>
          <target state="translated">$[</target>
        </trans-unit>
        <trans-unit id="0a77acf8f2f18e358d9118bed17296a3f98fe09b" translate="yes" xml:space="preserve">
          <source>$\</source>
          <target state="translated">$\</target>
        </trans-unit>
        <trans-unit id="eb4655bd9ed1636ef5f1147378cf5a69ba31b6d5" translate="yes" xml:space="preserve">
          <source>$]</source>
          <target state="translated">$]</target>
        </trans-unit>
        <trans-unit id="5ce15ecc1851eac29dd75980cdae4bafe8fdbfd8" translate="yes" xml:space="preserve">
          <source>$^</source>
          <target state="translated">$^</target>
        </trans-unit>
        <trans-unit id="2b4c0148212df3d3402ba05cb87076b6041aa004" translate="yes" xml:space="preserve">
          <source>$^A</source>
          <target state="translated">$^A</target>
        </trans-unit>
        <trans-unit id="d61a541e74fdf94d017269c6b6032cdcfa1513da" translate="yes" xml:space="preserve">
          <source>$^C</source>
          <target state="translated">$^C</target>
        </trans-unit>
        <trans-unit id="13b05dc64bc643ede1435640cc15983111021457" translate="yes" xml:space="preserve">
          <source>$^D</source>
          <target state="translated">$^D</target>
        </trans-unit>
        <trans-unit id="89b856bc8d68c06099b8a3681d5a62b646d171d1" translate="yes" xml:space="preserve">
          <source>$^E</source>
          <target state="translated">$^E</target>
        </trans-unit>
        <trans-unit id="1e3b26f799d2439e293b6652dc7143722675976d" translate="yes" xml:space="preserve">
          <source>$^F</source>
          <target state="translated">$^F</target>
        </trans-unit>
        <trans-unit id="abf3e45ee6b7d9d0dc6655337468981ebdefe04e" translate="yes" xml:space="preserve">
          <source>$^H</source>
          <target state="translated">$^H</target>
        </trans-unit>
        <trans-unit id="1480ecb10ba562a06dc3c94539fedc7589f45be2" translate="yes" xml:space="preserve">
          <source>$^I</source>
          <target state="translated">$^I</target>
        </trans-unit>
        <trans-unit id="25ea1ffd9f1baeec6789be9c34fbaff41de87cbb" translate="yes" xml:space="preserve">
          <source>$^L</source>
          <target state="translated">$^L</target>
        </trans-unit>
        <trans-unit id="cd6b803ca3f43c58d13fd1b86e82ff999daa8e5e" translate="yes" xml:space="preserve">
          <source>$^M</source>
          <target state="translated">$^M</target>
        </trans-unit>
        <trans-unit id="079fa467501710c0e6e9f8dc15f3474b9762231d" translate="yes" xml:space="preserve">
          <source>$^N</source>
          <target state="translated">$^N</target>
        </trans-unit>
        <trans-unit id="12d351531ec9acdd026c3d4559368c2d2d778b52" translate="yes" xml:space="preserve">
          <source>$^O</source>
          <target state="translated">$^O</target>
        </trans-unit>
        <trans-unit id="19adec87ebf58f224cd85b6973901a349faf90ae" translate="yes" xml:space="preserve">
          <source>$^P</source>
          <target state="translated">$^P</target>
        </trans-unit>
        <trans-unit id="a64f2f52bdac8bfe9ac7e946c86dcbf292200545" translate="yes" xml:space="preserve">
          <source>$^R</source>
          <target state="translated">$^R</target>
        </trans-unit>
        <trans-unit id="194a27094819d1b35a4153926ea5b9f0683c03bb" translate="yes" xml:space="preserve">
          <source>$^S</source>
          <target state="translated">$^S</target>
        </trans-unit>
        <trans-unit id="1f5a4d199385f2c6af59ce6f67a6a713dcbcdb84" translate="yes" xml:space="preserve">
          <source>$^T</source>
          <target state="translated">$^T</target>
        </trans-unit>
        <trans-unit id="4a6447f6f069502ff9324949f8b3e4540f95262c" translate="yes" xml:space="preserve">
          <source>$^V</source>
          <target state="translated">$^V</target>
        </trans-unit>
        <trans-unit id="9bb58965cc839efa4e480726faebfcf953848f17" translate="yes" xml:space="preserve">
          <source>$^W</source>
          <target state="translated">$^W</target>
        </trans-unit>
        <trans-unit id="80195455d013db141538cd3beccfa965ff3e0b5e" translate="yes" xml:space="preserve">
          <source>$^X</source>
          <target state="translated">$^X</target>
        </trans-unit>
        <trans-unit id="8f5425ad661de1a70d604d994b60ce39cd289f97" translate="yes" xml:space="preserve">
          <source>$^X doesn't always contain a full path in FreeBSD</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3569547b5e21452a5429cc4405321f7bb79d6d8d" translate="yes" xml:space="preserve">
          <source>$_</source>
          <target state="translated">$_</target>
        </trans-unit>
        <trans-unit id="f60dfbe04054a64b697e123be1dd0d9e7a4cf6c2" translate="yes" xml:space="preserve">
          <source>$`</source>
          <target state="translated">$`</target>
        </trans-unit>
        <trans-unit id="c1cb3943b0b49c80c13197853e1a4b0919506fce" translate="yes" xml:space="preserve">
          <source>$a</source>
          <target state="translated">$a</target>
        </trans-unit>
        <trans-unit id="81dc7573667628e97a062b886d5a11d3c7423228" translate="yes" xml:space="preserve">
          <source>$a and $b of an object. In the above subroutine &lt;code&gt;&quot;[$meth $a $b]&quot;&lt;/code&gt; is a catenation of some strings and components $a and $b. If these components use overloading, the catenation operator will look for an overloaded operator &lt;code&gt;.&lt;/code&gt;; if not present, it will look for an overloaded operator &lt;code&gt;&quot;&quot;&lt;/code&gt; . Thus it is enough to use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a6eb339cf9c70c5e2f97327a0f3020442fa5767" translate="yes" xml:space="preserve">
          <source>$address = inet_pton $family, $string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f5c8b0cb207dcee0633760ac036e6be4d7dd94f" translate="yes" xml:space="preserve">
          <source>$alg</source>
          <target state="translated">$alg</target>
        </trans-unit>
        <trans-unit id="4580c231ec8da4ca8475bca2f2dc7f1ce853d560" translate="yes" xml:space="preserve">
          <source>$archlibexp/&lt;code&gt;CORE&lt;/code&gt;</source>
          <target state="translated">$archlibexp/&lt;code&gt;CORE&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="876795e8a106261c7eb459b47313acf1200740b0" translate="yes" xml:space="preserve">
          <source>$arg</source>
          <target state="translated">$arg</target>
        </trans-unit>
        <trans-unit id="0352a724a0c641a8e53d8e90c823d4750844b0b6" translate="yes" xml:space="preserve">
          <source>$argoff</source>
          <target state="translated">$argoff</target>
        </trans-unit>
        <trans-unit id="773eaf1fbbda0761eb04a3d20c2a9cc38f47a26a" translate="yes" xml:space="preserve">
          <source>$b</source>
          <target state="translated">$b</target>
        </trans-unit>
        <trans-unit id="dcdbded0ec798dd6f5a772c813e2090e14928dc9" translate="yes" xml:space="preserve">
          <source>$belowFlag</source>
          <target state="translated">$belowFlag</target>
        </trans-unit>
        <trans-unit id="c7abeeb28233074cc58fa987bbc1860b66086b7e" translate="yes" xml:space="preserve">
          <source>$bool = $file-&amp;gt;chmod $mode)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f06fed6c659e9ce6e4f0bae9ea672fb3bc218316" translate="yes" xml:space="preserve">
          <source>$bool = $file-&amp;gt;chown( $user [, $group])</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60646f3a036232c77d761789cff0cffdca52d860" translate="yes" xml:space="preserve">
          <source>$bool = $file-&amp;gt;extract( [ $alternative_name ] )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9735132c2d66949e6506cca917f600adae8be47f" translate="yes" xml:space="preserve">
          <source>$bool = $file-&amp;gt;has_content</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db91c3eaa3ad7e4b4dbbf5314fb2e939fa1a45e7" translate="yes" xml:space="preserve">
          <source>$bool = $file-&amp;gt;rename( $new_name )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcbd53a5ea77020400484c0e40ca531087da9f18" translate="yes" xml:space="preserve">
          <source>$bool = $file-&amp;gt;replace_content( $content )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b66a60cf2aae8c1a6a1cce4d8f8d4fac45435b6d" translate="yes" xml:space="preserve">
          <source>$bool = $file-&amp;gt;validate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="009b9bc4b2c3d15998df860e9282475ff1e88c88" translate="yes" xml:space="preserve">
          <source>$bool = Archive::Tar-&amp;gt;has_bzip2_support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3b6f1cf3339cd8c8109268643ac971bba3878f8" translate="yes" xml:space="preserve">
          <source>$bool = Archive::Tar-&amp;gt;has_io_string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42994fe80c3c34811ed9e2aff625d3a252288672" translate="yes" xml:space="preserve">
          <source>$bool = Archive::Tar-&amp;gt;has_perlio</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5ea43187e85747d488f88d9800204635852d97f" translate="yes" xml:space="preserve">
          <source>$bool = Archive::Tar-&amp;gt;has_zlib_support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="579b30cbf349ab00eca371efa2d73e3c1cc4f8f1" translate="yes" xml:space="preserve">
          <source>$bool = IPC::Cmd-&amp;gt;can_capture_buffer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b799fcccdcf16bd655da404895b92d390b997da" translate="yes" xml:space="preserve">
          <source>$bool = IPC::Cmd-&amp;gt;can_use_run_forked</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1354edf9aeb46da0b5f26170e23562637e297dee" translate="yes" xml:space="preserve">
          <source>$bool = can_load( modules =&amp;gt; { NAME =&amp;gt; VERSION [,NAME =&amp;gt; VERSION] }, [verbose =&amp;gt; BOOL, nocache =&amp;gt; BOOL, autoload =&amp;gt; BOOL] )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edd84a68933ba9a26ae995b8baf3404189e2a821" translate="yes" xml:space="preserve">
          <source>$bool = mark_as_loaded( PACKAGE );</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd80b8e06866eb5492953fdecae0ecb4561859d3" translate="yes" xml:space="preserve">
          <source>$bool = mark_as_unloaded( PACKAGE );</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="139f4a3fe14faa00f87b58586ceb66fe85ea836c" translate="yes" xml:space="preserve">
          <source>$check</source>
          <target state="translated">$check</target>
        </trans-unit>
        <trans-unit id="cccd59677d63f3a17f5ee0ba2b4f24d0efe769d0" translate="yes" xml:space="preserve">
          <source>$cmd should include any switches and repeated initial arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e6880c795aab9545dabe1a733a89938f793ccf1" translate="yes" xml:space="preserve">
          <source>$content = $file-&amp;gt;get_content</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c3554fe5bddc359a8723f79b0928a50f39f2b31" translate="yes" xml:space="preserve">
          <source>$cref = $file-&amp;gt;get_content_by_ref</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="461e9bac5c124e13e943d74294b5b3c23e91e59a" translate="yes" xml:space="preserve">
          <source>$data</source>
          <target state="translated">$data</target>
        </trans-unit>
        <trans-unit id="74afb6d04e003989f04476d7c0a9fd2b6682c6a4" translate="yes" xml:space="preserve">
          <source>$db-&amp;gt;Filter_Pop()</source>
          <target state="translated">$db-&amp;gt;Filter_Pop()</target>
        </trans-unit>
        <trans-unit id="05370fa4252cd1d02a0f6d8760e1f0ec10e76a5e" translate="yes" xml:space="preserve">
          <source>$db-&amp;gt;Filter_Push() / $db-&amp;gt;Filter_Key_Push() / $db-&amp;gt;Filter_Value_Push()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4aafa39e8b39605a7fa5d8f5547fe8170d26dcb" translate="yes" xml:space="preserve">
          <source>$db-&amp;gt;Filtered()</source>
          <target state="translated">$db-&amp;gt;Filtered()</target>
        </trans-unit>
        <trans-unit id="a6566b8d3c2d0096d771f2d03ed6b128d9f5c7e1" translate="yes" xml:space="preserve">
          <source>$destination</source>
          <target state="translated">$destination</target>
        </trans-unit>
        <trans-unit id="fd8e6bd9ac1f96ef11bde6790c1a8b791426cac9" translate="yes" xml:space="preserve">
          <source>$dict</source>
          <target state="translated">$dict</target>
        </trans-unit>
        <trans-unit id="ecf7d84dff7315c8dd46364c18a9d35683d1b56f" translate="yes" xml:space="preserve">
          <source>$directories must be only the directory portion of the path on systems that have the concept of a volume or that have path syntax that differentiates files from directories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="971b11c9549db56cc4c8a03faf0d1fde549163e0" translate="yes" xml:space="preserve">
          <source>$directories should be only the directory portion of the path on systems that have the concept of a volume or that have path syntax that differentiates files from directories. Consider using &lt;code&gt;splitpath()&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c5e5a777709b1142bd4823463b0d5cdf8a0c620" translate="yes" xml:space="preserve">
          <source>$dirs contains everything up to and including the last directory separator in the $path including the volume (if applicable). The remainder of the $path is the $filename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7870bba34537ca6620320e255f3f7b47ec3361ee" translate="yes" xml:space="preserve">
          <source>$dl_debug is set to &lt;code&gt;$ENV{'PERL_DL_DEBUG'}&lt;/code&gt; if defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc40f64a3e17a8c491eeed9e7f42ceed7f1ca3f4" translate="yes" xml:space="preserve">
          <source>$fail_ok</source>
          <target state="translated">$fail_ok</target>
        </trans-unit>
        <trans-unit id="5a2fb9ddcb750df6ba64a871b9652aaf43a3ed3a" translate="yes" xml:space="preserve">
          <source>$family = sockaddr_family $sockaddr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bf4ceec84c7011fd9142df585667dce049ae0e1" translate="yes" xml:space="preserve">
          <source>$ff = File::Fetch-&amp;gt;new( uri =&amp;gt; '&lt;a href=&quot;http://some.where.com/dir/file.txt&quot;&gt;http://some.where.com/dir/file.txt&lt;/a&gt;' );</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b227d151121c22a9951babadfcc206d0614ad54" translate="yes" xml:space="preserve">
          <source>$ff = File::Fetch-&amp;gt;new( uri =&amp;gt; 'http://some.where.com/dir/file.txt' );</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4692556fb4b6d01aad645881ac73cd6a0b779293" translate="yes" xml:space="preserve">
          <source>$ff-&amp;gt;error([BOOL])</source>
          <target state="translated">$ff-&amp;gt;error([BOOL])</target>
        </trans-unit>
        <trans-unit id="6b4111212c56cfba1035348ad2c755f8c19bb9f0" translate="yes" xml:space="preserve">
          <source>$fh</source>
          <target state="translated">$fh</target>
        </trans-unit>
        <trans-unit id="04f47912f7e0768e2393e780b3bf0937a630fc20" translate="yes" xml:space="preserve">
          <source>$file will be normalized (ie. Unixified). &lt;b&gt;UNIMPLEMENTED&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee689a7d8975c5b1d097a0eced2a70dd33e3c4c9" translate="yes" xml:space="preserve">
          <source>$filename</source>
          <target state="translated">$filename</target>
        </trans-unit>
        <trans-unit id="5ea1f2177918ab13fc71ebae37a1261b28c552ab" translate="yes" xml:space="preserve">
          <source>$filter_cmd is an optional shell command to run each .pm file through prior to splitting and copying. Input is the contents of the module, output the new module contents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f6a935b07e6055abedf3f77b0f98d7d40a0e60f" translate="yes" xml:space="preserve">
          <source>$fold</source>
          <target state="translated">$fold</target>
        </trans-unit>
        <trans-unit id="3d91d4ec0dbea6bada4b9c6be06efcbff17ee007" translate="yes" xml:space="preserve">
          <source>$foo Magazin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="098917b7fa441f18579de545a0b34d31cfbbf2f5" translate="yes" xml:space="preserve">
          <source>$foo-&amp;gt;bar&quot; is a verbatim paragraph, because its first line starts with a literal whitespace character (and there's no &quot;=begin&quot;...&quot;=end&quot; region around).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0531de35789817e207fc001068560afeb60f59b" translate="yes" xml:space="preserve">
          <source>$fullext is the name of the module converted to a directory (ie. Foo::Bar would be Foo/Bar). If $fullext is not specified, it will attempt to read it from @ARGV.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ea221136eb5fd2993c54a31c565a5176254654d" translate="yes" xml:space="preserve">
          <source>$hashref = run_forked( COMMAND, { child_stdin =&amp;gt; SCALAR, timeout =&amp;gt; DIGIT, stdout_handler =&amp;gt; CODEREF, stderr_handler =&amp;gt; CODEREF} );</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="763d1db2652dfedb83601a16579a88b8343c132f" translate="yes" xml:space="preserve">
          <source>$how can be used to specify a different methods of &quot;copying&quot;. Valid values are &lt;code&gt;cp&lt;/code&gt; , which actually copies the files, &lt;code&gt;ln&lt;/code&gt; which creates hard links, and &lt;code&gt;best&lt;/code&gt; which mostly links the files but copies any symbolic link to make a tree without any symbolic link. &lt;code&gt;cp&lt;/code&gt; is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="316836c760c19b57af2f0ca43c0afb210f144410" translate="yes" xml:space="preserve">
          <source>$href = check_install( module =&amp;gt; NAME [, version =&amp;gt; VERSION, verbose =&amp;gt; BOOL ] );</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52409ae032d5b8d50237a28f8eb110a9a78c7f66" translate="yes" xml:space="preserve">
          <source>$incpath/usr/include</source>
          <target state="translated">$incpath/usr/include</target>
        </trans-unit>
        <trans-unit id="f4ad7739254dd5143c051db8cec0d7d232cac3ce" translate="yes" xml:space="preserve">
          <source>$incpath/usr/lib</source>
          <target state="translated">$incpath/usr/lib</target>
        </trans-unit>
        <trans-unit id="a74c7f4f24e3a16dc8a8fd0782adc03ec22357a5" translate="yes" xml:space="preserve">
          <source>$installbin/perl</source>
          <target state="translated">$installbin/perl</target>
        </trans-unit>
        <trans-unit id="689a9bc79cc2fbda3db03bf8572a4cbd8db83ed2" translate="yes" xml:space="preserve">
          <source>$ip_address = inet_aton $string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e57d870d8aa1e1bd3734c5a14216962aa321815f" translate="yes" xml:space="preserve">
          <source>$ip_mreq = pack_ip_mreq $multiaddr, $interface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8a6aa5e2984ec7f368e2610d9f3fbd1c6dea893" translate="yes" xml:space="preserve">
          <source>$ip_mreq_source = pack_ip_mreq_source $multiaddr, $source, $interface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3da328a4823f1ade282c291a8e429f859617004" translate="yes" xml:space="preserve">
          <source>$ipc_open3_version = IPC::Cmd-&amp;gt;can_use_ipc_open3( [VERBOSE] )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52ab7e77ce1b2bc48b6a6e8d0d54045af2cf17d4" translate="yes" xml:space="preserve">
          <source>$ipc_run_version = IPC::Cmd-&amp;gt;can_use_ipc_run( [VERBOSE] )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c38ce027134b59f23a977ba36c53abede60afcb3" translate="yes" xml:space="preserve">
          <source>$ipv6_mreq = pack_ipv6_mreq $multiaddr6, $ifindex</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1addd33cadecf3066f0307b5fd4d2792f9394ae1" translate="yes" xml:space="preserve">
          <source>$keep</source>
          <target state="translated">$keep</target>
        </trans-unit>
        <trans-unit id="3f8de01169eabbb582c7c5ffb762d5f7d1f1bf07" translate="yes" xml:space="preserve">
          <source>$key</source>
          <target state="translated">$key</target>
        </trans-unit>
        <trans-unit id="0903bef96b970f78463a1ce707207857b3f42f8a" translate="yes" xml:space="preserve">
          <source>$lh = YourProjClass-&amp;gt;get_handle( ...langtags... ) || die &quot;lg-handle?&quot;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faf2e582cc01837c288476a4a98b4035ee8d9c8a" translate="yes" xml:space="preserve">
          <source>$lh = YourProjClass-&amp;gt;get_handle&lt;b&gt;()&lt;/b&gt; || die &quot;lg-handle?&quot;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8d0b6c50dd8b4040590312d5d2857545e4762ca" translate="yes" xml:space="preserve">
          <source>$lh = YourProjClass::langname-&amp;gt;new();</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c431a9c04294ca95147177e72184dfcfa780d4a6" translate="yes" xml:space="preserve">
          <source>$lh-&amp;gt;init();</source>
          <target state="translated">$lh-&amp;gt;init();</target>
        </trans-unit>
        <trans-unit id="207ff4dc124ea1ec8c530501c5f5a3d2d0dfb42d" translate="yes" xml:space="preserve">
          <source>$libperl $libs Typical values are shrpenv=&quot;env &lt;code&gt;LD_RUN_PATH&lt;/code&gt; =</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d2df9e97761584d114da732ba7802afed34cb7b" translate="yes" xml:space="preserve">
          <source>$loc = is_loaded( PACKAGE );</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7ce743dc73a4b3aae285d6a37453ffe5974739f" translate="yes" xml:space="preserve">
          <source>$mode</source>
          <target state="translated">$mode</target>
        </trans-unit>
        <trans-unit id="a46fc2e84087740c55fa962d5cb14b3fba7bb315" translate="yes" xml:space="preserve">
          <source>$modtime</source>
          <target state="translated">$modtime</target>
        </trans-unit>
        <trans-unit id="ff3ef28b99a352753c74beb9d8c9cb65758a293e" translate="yes" xml:space="preserve">
          <source>$nbits</source>
          <target state="translated">$nbits</target>
        </trans-unit>
        <trans-unit id="411fa8b347e87eb1896083be942d50d0acb0579e" translate="yes" xml:space="preserve">
          <source>$ntype</source>
          <target state="translated">$ntype</target>
        </trans-unit>
        <trans-unit id="016a17980e9bc34534182a7fb79adceaf2771fe6" translate="yes" xml:space="preserve">
          <source>$num_tests is the number of tests you planned to run. If a numbered plan was already declared, and if this contradicts, a failing test will be run to reflect the planning mistake. If &lt;code&gt;no_plan&lt;/code&gt; was declared, this will override.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7654b7a7c03d6bbabc9342d908bf448f802d4a2" translate="yes" xml:space="preserve">
          <source>$number_of_tests is the same as &lt;code&gt;plan()&lt;/code&gt; , it's the number of tests you expected to run. You can omit this, in which case the number of tests you ran doesn't matter, just the fact that your tests ran to conclusion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf018b51955567f3c86a7155853c4229480c4bd6" translate="yes" xml:space="preserve">
          <source>$object</source>
          <target state="translated">$object</target>
        </trans-unit>
        <trans-unit id="317c2e0556ad09d49d85ba928421a817aa6a62cd" translate="yes" xml:space="preserve">
          <source>$octets</source>
          <target state="translated">$octets</target>
        </trans-unit>
        <trans-unit id="6c3f11ebb8a8d8ffb66a46de46deaae821c44954" translate="yes" xml:space="preserve">
          <source>$octets. Though both contain the same data, the UTF8 flag for $string is on. See &lt;a href=&quot;#The-UTF8-flag&quot;&gt;The UTF8 flag&lt;/a&gt; below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c507b0dd2caaf01663ee7b720a3fa9ad79cae740" translate="yes" xml:space="preserve">
          <source>$offset</source>
          <target state="translated">$offset</target>
        </trans-unit>
        <trans-unit id="20343fdbf6f0ccfd4d86b1c453d54e6610ea8429" translate="yes" xml:space="preserve">
          <source>$ok | ($ok, $err, $full_buf, $stdout_buff, $stderr_buff) = run( command =&amp;gt; COMMAND, [verbose =&amp;gt; BOOL, buffer =&amp;gt; \$SCALAR, timeout =&amp;gt; DIGIT] );</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cd354a4dc7fbb0fc75ee3b67666be581e5d73ea" translate="yes" xml:space="preserve">
          <source>$parser-&amp;gt;get_title on that document will return &quot;Hoo::Boy::Wowza -- Stuff wow yeah!&quot;. If the document starts with:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31e21e1409beb26edfe0634e04ff3d883b181b4b" translate="yes" xml:space="preserve">
          <source>$path = $file-&amp;gt;full_path</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb5190b3cef221b23e685ff70e4399a4e2f19590" translate="yes" xml:space="preserve">
          <source>$path = can_run( PROGRAM );</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a5c9a2ec48ae6c8e7cc887d023f12dad8b932f7" translate="yes" xml:space="preserve">
          <source>$pname</source>
          <target state="translated">$pname</target>
        </trans-unit>
        <trans-unit id="2d05f339425e2cbc716ee342353a14abd1afd4a3" translate="yes" xml:space="preserve">
          <source>$pod_para-&amp;gt;*cmd_name()*</source>
          <target state="translated">$pod_para-&amp;gt;*cmd_name()*</target>
        </trans-unit>
        <trans-unit id="6ec0fff13d1c27dceececa0ef615cdc3fc306554" translate="yes" xml:space="preserve">
          <source>$pod_para-&amp;gt;*cmd_prefix()*</source>
          <target state="translated">$pod_para-&amp;gt;*cmd_prefix()*</target>
        </trans-unit>
        <trans-unit id="b59f022560669dce085876c3b1bb17d69cd01706" translate="yes" xml:space="preserve">
          <source>$pod_para-&amp;gt;*cmd_separator()*</source>
          <target state="translated">$pod_para-&amp;gt;*cmd_separator()*</target>
        </trans-unit>
        <trans-unit id="5112b9ac49fe14f85c0bf78a0006909613c30608" translate="yes" xml:space="preserve">
          <source>$pod_para-&amp;gt;*file_line()*</source>
          <target state="translated">$pod_para-&amp;gt;*file_line()*</target>
        </trans-unit>
        <trans-unit id="23fffc056f6e6eed69c5a4c1ed3f7b0a8941eff8" translate="yes" xml:space="preserve">
          <source>$pod_para-&amp;gt;*parse_tree()*</source>
          <target state="translated">$pod_para-&amp;gt;*parse_tree()*</target>
        </trans-unit>
        <trans-unit id="8b3518f2e0f31924794bf90ce74238948628f238" translate="yes" xml:space="preserve">
          <source>$pod_para-&amp;gt;*raw_text()*</source>
          <target state="translated">$pod_para-&amp;gt;*raw_text()*</target>
        </trans-unit>
        <trans-unit id="7252650d656acde55b275b696fb006ab26077a65" translate="yes" xml:space="preserve">
          <source>$pod_para-&amp;gt;*text()*</source>
          <target state="translated">$pod_para-&amp;gt;*text()*</target>
        </trans-unit>
        <trans-unit id="5c2bf5ae8a54fff59e0a31ab80cf112d34eb6192" translate="yes" xml:space="preserve">
          <source>$pod_para-&amp;gt;&lt;b&gt;cmd_name()&lt;/b&gt;</source>
          <target state="translated">$pod_para-&amp;gt;&lt;b&gt;cmd_name()&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="3a97593ea0e74fb2e07fdd98b8f7f47cd7a8043b" translate="yes" xml:space="preserve">
          <source>$pod_para-&amp;gt;&lt;b&gt;cmd_prefix()&lt;/b&gt;</source>
          <target state="translated">$pod_para-&amp;gt;&lt;b&gt;cmd_prefix()&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="8749658c4397fad20aac352bcdcd3c3a383bef40" translate="yes" xml:space="preserve">
          <source>$pod_para-&amp;gt;&lt;b&gt;cmd_separator()&lt;/b&gt;</source>
          <target state="translated">$pod_para-&amp;gt;&lt;b&gt;cmd_separator()&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="15f216e18e3d50d37b0ac482ec9f71b7dc1282b6" translate="yes" xml:space="preserve">
          <source>$pod_para-&amp;gt;&lt;b&gt;file_line()&lt;/b&gt;</source>
          <target state="translated">$pod_para-&amp;gt;&lt;b&gt;file_line()&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="3cefff7f0293cc8b2008a04796d9ee938d616275" translate="yes" xml:space="preserve">
          <source>$pod_para-&amp;gt;&lt;b&gt;parse_tree()&lt;/b&gt;</source>
          <target state="translated">$pod_para-&amp;gt;&lt;b&gt;parse_tree()&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="c29ab44a407b99ac96768c06fa6de380d890202c" translate="yes" xml:space="preserve">
          <source>$pod_para-&amp;gt;&lt;b&gt;raw_text()&lt;/b&gt;</source>
          <target state="translated">$pod_para-&amp;gt;&lt;b&gt;raw_text()&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="80b3e03dcbc165bf5adf260b282dbf4051aba176" translate="yes" xml:space="preserve">
          <source>$pod_para-&amp;gt;&lt;b&gt;text()&lt;/b&gt;</source>
          <target state="translated">$pod_para-&amp;gt;&lt;b&gt;text()&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="0543846061e5f15a1f6797c878c9d07a09e01e3a" translate="yes" xml:space="preserve">
          <source>$pod_seq-&amp;gt;*append()*</source>
          <target state="translated">$pod_seq-&amp;gt;*append()*</target>
        </trans-unit>
        <trans-unit id="77c3f59c01a71e4d5412dedaacae6072d62a5807" translate="yes" xml:space="preserve">
          <source>$pod_seq-&amp;gt;*cmd_name()*</source>
          <target state="translated">$pod_seq-&amp;gt;*cmd_name()*</target>
        </trans-unit>
        <trans-unit id="fd4a0899a72c018c8a55bbcc95978985f85f3dd9" translate="yes" xml:space="preserve">
          <source>$pod_seq-&amp;gt;*file_line()*</source>
          <target state="translated">$pod_seq-&amp;gt;*file_line()*</target>
        </trans-unit>
        <trans-unit id="28eedcd1544b22d9ab7e168ef6be6961c87be247" translate="yes" xml:space="preserve">
          <source>$pod_seq-&amp;gt;*left_delimiter()*</source>
          <target state="translated">$pod_seq-&amp;gt;*left_delimiter()*</target>
        </trans-unit>
        <trans-unit id="104f514d6f0ec37cddba8406d9831d6f244fc9a3" translate="yes" xml:space="preserve">
          <source>$pod_seq-&amp;gt;*nested()*</source>
          <target state="translated">$pod_seq-&amp;gt;*nested()*</target>
        </trans-unit>
        <trans-unit id="44252659f7a02b5e4dfe5fb8ca4b659fb5e65c42" translate="yes" xml:space="preserve">
          <source>$pod_seq-&amp;gt;*parse_tree()*</source>
          <target state="translated">$pod_seq-&amp;gt;*parse_tree()*</target>
        </trans-unit>
        <trans-unit id="2b690cd12158a9fc836945c6a6bfc2e483d7ab3a" translate="yes" xml:space="preserve">
          <source>$pod_seq-&amp;gt;*prepend()*</source>
          <target state="translated">$pod_seq-&amp;gt;*prepend()*</target>
        </trans-unit>
        <trans-unit id="509e0efd438493554203853e68ac5808a2dc4405" translate="yes" xml:space="preserve">
          <source>$pod_seq-&amp;gt;*raw_text()*</source>
          <target state="translated">$pod_seq-&amp;gt;*raw_text()*</target>
        </trans-unit>
        <trans-unit id="db25cdb49d7268f8b38b834bf6084668d174dd6c" translate="yes" xml:space="preserve">
          <source>$pod_seq-&amp;gt;*right_delimiter()*</source>
          <target state="translated">$pod_seq-&amp;gt;*right_delimiter()*</target>
        </trans-unit>
        <trans-unit id="cc286a98b989860b2ed0d2fff8492d754ae9fd86" translate="yes" xml:space="preserve">
          <source>$pod_seq-&amp;gt;&lt;b&gt;append()&lt;/b&gt;</source>
          <target state="translated">$pod_seq-&amp;gt;&lt;b&gt;append()&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="0e6b623e7c75c3a69ff30ad44dcec96977b93b0a" translate="yes" xml:space="preserve">
          <source>$pod_seq-&amp;gt;&lt;b&gt;cmd_name()&lt;/b&gt;</source>
          <target state="translated">$pod_seq-&amp;gt;&lt;b&gt;cmd_name()&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="4d62eb6dc7d33ed00b7445292c8d59dda96f89eb" translate="yes" xml:space="preserve">
          <source>$pod_seq-&amp;gt;&lt;b&gt;file_line()&lt;/b&gt;</source>
          <target state="translated">$pod_seq-&amp;gt;&lt;b&gt;file_line()&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="13cdc0fe0f24b101dc30474d9717c2cb2057b913" translate="yes" xml:space="preserve">
          <source>$pod_seq-&amp;gt;&lt;b&gt;left_delimiter()&lt;/b&gt;</source>
          <target state="translated">$pod_seq-&amp;gt;&lt;b&gt;left_delimiter()&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="b7e8dc6d95abf03d05af772f588cc9b40b1691e4" translate="yes" xml:space="preserve">
          <source>$pod_seq-&amp;gt;&lt;b&gt;nested()&lt;/b&gt;</source>
          <target state="translated">$pod_seq-&amp;gt;&lt;b&gt;nested()&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="7243e98d272c3f392486aaa6edfbc67911d37de2" translate="yes" xml:space="preserve">
          <source>$pod_seq-&amp;gt;&lt;b&gt;parse_tree()&lt;/b&gt;</source>
          <target state="translated">$pod_seq-&amp;gt;&lt;b&gt;parse_tree()&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="281cdba9e2fcd32e564d56fcc1f1c782a1253952" translate="yes" xml:space="preserve">
          <source>$pod_seq-&amp;gt;&lt;b&gt;prepend()&lt;/b&gt;</source>
          <target state="translated">$pod_seq-&amp;gt;&lt;b&gt;prepend()&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="f80018b524e261ebe1766fbff1673e08c99d41b6" translate="yes" xml:space="preserve">
          <source>$pod_seq-&amp;gt;&lt;b&gt;raw_text()&lt;/b&gt;</source>
          <target state="translated">$pod_seq-&amp;gt;&lt;b&gt;raw_text()&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="8055b6e5b3b0a6bd67a9b1dd0a3ce03ae07e24a4" translate="yes" xml:space="preserve">
          <source>$pod_seq-&amp;gt;&lt;b&gt;right_delimiter()&lt;/b&gt;</source>
          <target state="translated">$pod_seq-&amp;gt;&lt;b&gt;right_delimiter()&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="a973850dc37d17ea20bdf301b5e28f9f99509678" translate="yes" xml:space="preserve">
          <source>$prefix/lib</source>
          <target state="translated">$prefix/lib</target>
        </trans-unit>
        <trans-unit id="32c7e16385ce949943fc9388da4b9c9ef37470dd" translate="yes" xml:space="preserve">
          <source>$prefix/lib/perl5</source>
          <target state="translated">$prefix/lib/perl5</target>
        </trans-unit>
        <trans-unit id="a4c979584d50db069a7b76318f7d6e14c440fc3b" translate="yes" xml:space="preserve">
          <source>$ptree-&amp;gt;*append()*</source>
          <target state="translated">$ptree-&amp;gt;*append()*</target>
        </trans-unit>
        <trans-unit id="51c33e2bf31d0e89b6fa7ee633ffc664e81f5205" translate="yes" xml:space="preserve">
          <source>$ptree-&amp;gt;*children()*</source>
          <target state="translated">$ptree-&amp;gt;*children()*</target>
        </trans-unit>
        <trans-unit id="21b249f1a3091988d22aed8c5f671c4d1412f2dc" translate="yes" xml:space="preserve">
          <source>$ptree-&amp;gt;*prepend()*</source>
          <target state="translated">$ptree-&amp;gt;*prepend()*</target>
        </trans-unit>
        <trans-unit id="9a1c10003bf7bdb5b121fc66580817a1d8f27e8b" translate="yes" xml:space="preserve">
          <source>$ptree-&amp;gt;*raw_text()*</source>
          <target state="translated">$ptree-&amp;gt;*raw_text()*</target>
        </trans-unit>
        <trans-unit id="c947258b9d9d0a401c6774e37dfa3d0dd3e4ecc9" translate="yes" xml:space="preserve">
          <source>$ptree-&amp;gt;*top()*</source>
          <target state="translated">$ptree-&amp;gt;*top()*</target>
        </trans-unit>
        <trans-unit id="4f46195adb17dcccf8e6222982d5b7132c3ae755" translate="yes" xml:space="preserve">
          <source>$ptree-&amp;gt;&lt;b&gt;append()&lt;/b&gt;</source>
          <target state="translated">$ptree-&amp;gt;&lt;b&gt;append()&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="e9342d99d3ff36dffd9ab5963064f5986ecf3962" translate="yes" xml:space="preserve">
          <source>$ptree-&amp;gt;&lt;b&gt;children()&lt;/b&gt;</source>
          <target state="translated">$ptree-&amp;gt;&lt;b&gt;children()&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="479b39412d8d9d14ceda0521720dc7d846fda45b" translate="yes" xml:space="preserve">
          <source>$ptree-&amp;gt;&lt;b&gt;prepend()&lt;/b&gt;</source>
          <target state="translated">$ptree-&amp;gt;&lt;b&gt;prepend()&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="8b9333255147e73f0a07ef3fec9dde34a2470fed" translate="yes" xml:space="preserve">
          <source>$ptree-&amp;gt;&lt;b&gt;raw_text()&lt;/b&gt;</source>
          <target state="translated">$ptree-&amp;gt;&lt;b&gt;raw_text()&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="234d7ed42a5bf10d89f0b4cf2e9b22193f761415" translate="yes" xml:space="preserve">
          <source>$ptree-&amp;gt;&lt;b&gt;top()&lt;/b&gt;</source>
          <target state="translated">$ptree-&amp;gt;&lt;b&gt;top()&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="bc38703d265f61fd9f0bc53c2433bfdeaf5a5b3d" translate="yes" xml:space="preserve">
          <source>$q = QUOTE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="430fd043d9c7b0e33613c731f40fe295a306f84a" translate="yes" xml:space="preserve">
          <source>$result = reduce { BLOCK } @list</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cab3501d0d4334dfa4ad695bef19e88b4bf09f9" translate="yes" xml:space="preserve">
          <source>$scalar</source>
          <target state="translated">$scalar</target>
        </trans-unit>
        <trans-unit id="1723f1462129df4d7b4be7a54b57ba0270c9822c" translate="yes" xml:space="preserve">
          <source>$schema_name is the name of a supported schema. Currently only &lt;code&gt;distroprefs&lt;/code&gt; is supported. $data is the data to be validated. $file is the absolute path to the file the data are coming from. $doc is the index of the document within $doc that is to be validated. The last two arguments are only there for better error reporting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e83fac6be51f4f3eb6e2d347ab911599b0615094" translate="yes" xml:space="preserve">
          <source>$search-&amp;gt;find( $pod )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0798f452a7a15b5845e8f756bc70f3af1ae1398c" translate="yes" xml:space="preserve">
          <source>$search-&amp;gt;find( $pod, @search_dirs )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0abaed5ca2be3a02d6b90c5ccf6f3e7742307462" translate="yes" xml:space="preserve">
          <source>$search-&amp;gt;simplify_name( $str )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="061443778106aabeea95b0841c3f27f4b023a510" translate="yes" xml:space="preserve">
          <source>$search-&amp;gt;survey( @directories )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e50586964394c13c552941f9efa2e2c7c90a706" translate="yes" xml:space="preserve">
          <source>$self-&amp;gt;contains_pod( $file )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="237eafbeeb489227454ddf4d52e0f67e72cddd15" translate="yes" xml:space="preserve">
          <source>$sha-&amp;gt;clone-&amp;gt;b64digest</source>
          <target state="translated">$sha-&amp;gt;clone-&amp;gt;b64digest</target>
        </trans-unit>
        <trans-unit id="452497a95b7d24a032ccabcd791edcd90f47f3e5" translate="yes" xml:space="preserve">
          <source>$sha-&amp;gt;clone-&amp;gt;digest</source>
          <target state="translated">$sha-&amp;gt;clone-&amp;gt;digest</target>
        </trans-unit>
        <trans-unit id="fd0d49fc7469f91e932cb29521834a05d7ad994c" translate="yes" xml:space="preserve">
          <source>$sha-&amp;gt;clone-&amp;gt;hexdigest</source>
          <target state="translated">$sha-&amp;gt;clone-&amp;gt;hexdigest</target>
        </trans-unit>
        <trans-unit id="7bd9826fe8c763b9d95b337d7cb413c9e97431bd" translate="yes" xml:space="preserve">
          <source>$sitelib/.</source>
          <target state="translated">$sitelib/.</target>
        </trans-unit>
        <trans-unit id="c5c55d59abe9b606aa8c20b61b5291cdce613261" translate="yes" xml:space="preserve">
          <source>$sitelib/sitecustomize.pl</source>
          <target state="translated">$sitelib/sitecustomize.pl</target>
        </trans-unit>
        <trans-unit id="084286afe0115760775c34216334bf81612dc640" translate="yes" xml:space="preserve">
          <source>$sockaddr = pack_sockaddr_in $port, $ip_address</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="018a1f4eb4f0831bca61ed93acd027b63e0bcfca" translate="yes" xml:space="preserve">
          <source>$sockaddr = pack_sockaddr_in6 $port, $ip6_address, [$scope_id, [$flowinfo]]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcf49d79bf1e2f83c849c105f7ee0113a0bdd435" translate="yes" xml:space="preserve">
          <source>$sockaddr = pack_sockaddr_un $path</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a04d2ac9187607b73e49c57a3b052e494b2d6018" translate="yes" xml:space="preserve">
          <source>$sockaddr = sockaddr_in $port, $ip_address</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4203b6a44966c2cedfd9b940322239dfc6100d3" translate="yes" xml:space="preserve">
          <source>$sockaddr = sockaddr_in6 $port, $ip6_address, [$scope_id, [$flowinfo]]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee798b7b9fba9a8ceba81aeaeebcd37a71100679" translate="yes" xml:space="preserve">
          <source>$sockaddr = sockaddr_un $path</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94bc1f1b33889b6b9eb473b7041353e66f645c2c" translate="yes" xml:space="preserve">
          <source>$status = $bz-&amp;gt;bzclose($output);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6677e533ba11d88e54012d68c0a57a76cd11f3d" translate="yes" xml:space="preserve">
          <source>$status = $bz-&amp;gt;bzdeflate($input, $output);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dbff5dce4cc7f2c7fc19a5a144301e8e33d659f" translate="yes" xml:space="preserve">
          <source>$status = $bz-&amp;gt;bzflush($output);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fa86465313bf4eda785c3ea102468a0c9043cc8" translate="yes" xml:space="preserve">
          <source>$status = $z-&amp;gt;bzinflate($input, $output);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7f0ae76779ec922c578bdb271f23fc6679cb0ef" translate="yes" xml:space="preserve">
          <source>$str</source>
          <target state="translated">$str</target>
        </trans-unit>
        <trans-unit id="ca433a9baf524c8e5bf4c8a2859d7e247f99492a" translate="yes" xml:space="preserve">
          <source>$string</source>
          <target state="translated">$string</target>
        </trans-unit>
        <trans-unit id="b9d90a6be1616df556378cf23249256e1125c7c0" translate="yes" xml:space="preserve">
          <source>$string = inet_ntoa $ip_address</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="033ba99857e847c6480e4d6378ad72710cb2060e" translate="yes" xml:space="preserve">
          <source>$string = inet_ntop $family, $address</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75553f88c96a46d52a2a5a8fd94bf2e772e06f04" translate="yes" xml:space="preserve">
          <source>$string. Though both contain the same data, the UTF8 flag for $octets is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c68cc78326d4fb3186b74be5adeb8a835bac5bce" translate="yes" xml:space="preserve">
          <source>$tar-&amp;gt;add_data ( $filename, $data, [$opthashref] )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d45eadd092a573b146835e21314cee8111df6f7" translate="yes" xml:space="preserve">
          <source>$tar-&amp;gt;add_files( @filenamelist )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbc974c89acca1678c93393fcae0afb6f034da66" translate="yes" xml:space="preserve">
          <source>$tar-&amp;gt;chmod( $file, $mode )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c67924a2622d47860819753b5e7b09aa12acc799" translate="yes" xml:space="preserve">
          <source>$tar-&amp;gt;chown( $file, $uname [, $gname] )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="789cbef638447f83d6cf35b5ea435d23991339dd" translate="yes" xml:space="preserve">
          <source>$tar-&amp;gt;clear</source>
          <target state="translated">$tar-&amp;gt;clear</target>
        </trans-unit>
        <trans-unit id="f7c148b64d955e2ff652c8c9268023bc5a485ca7" translate="yes" xml:space="preserve">
          <source>$tar-&amp;gt;contains_file( $filename )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d78432215903919aff2702fff585449658c839b7" translate="yes" xml:space="preserve">
          <source>$tar-&amp;gt;error( [$BOOL] )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="967e7ff89f8b1ecb5c3530648f158c60ad665faf" translate="yes" xml:space="preserve">
          <source>$tar-&amp;gt;extract( [@filenames] )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="742cf3dc2313653c85ff16eb0ece90ca393baceb" translate="yes" xml:space="preserve">
          <source>$tar-&amp;gt;extract_file( $file, [$extract_path] )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="732bb22b0723f141a48b4c4b4ceab9fffd05df4d" translate="yes" xml:space="preserve">
          <source>$tar-&amp;gt;get_content( $file )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d83b15aeb10d2288e5f4fa7333587ef95aca9755" translate="yes" xml:space="preserve">
          <source>$tar-&amp;gt;get_files( [@filenames] )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f22d7e1161dac4284d014d513034419c29dec71" translate="yes" xml:space="preserve">
          <source>$tar-&amp;gt;list_files( [\@properties] )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95a8e66f9f828884acf1f51d4af568b925c6931d" translate="yes" xml:space="preserve">
          <source>$tar-&amp;gt;read ( $filename|$handle, [$compressed, {opt =&amp;gt; 'val'}] )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9db9ebbd90b10e8f76713867a2d2bf2d0f1984c3" translate="yes" xml:space="preserve">
          <source>$tar-&amp;gt;remove (@filenamelist)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="191081e4ad56fcec598f9d928a28a7fac67046e8" translate="yes" xml:space="preserve">
          <source>$tar-&amp;gt;rename( $file, $new_name )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35111e167bc94ee3e79397f2ef1e862f3391b1cf" translate="yes" xml:space="preserve">
          <source>$tar-&amp;gt;replace_content( $file, $content )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b55f3c42622b9213c7bfe5296f83396ce3991f74" translate="yes" xml:space="preserve">
          <source>$tar-&amp;gt;setcwd( $cwd );</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1565108274b1753f6a22b37e46248d13737ef664" translate="yes" xml:space="preserve">
          <source>$tar-&amp;gt;write ( [$file, $compressed, $prefix] )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4303e633448539b6886582898977bd61368d52fb" translate="yes" xml:space="preserve">
          <source>$test_name is a very short description of the test that will be printed out. It makes it very easy to find a test in your script when it fails and gives others an idea of your intentions. $test_name is optional, but we &lt;b&gt;very&lt;/b&gt; strongly encourage its use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ba9aee00421063b3cca2d44ceeb67426fa7c82b" translate="yes" xml:space="preserve">
          <source>$thr-&amp;gt;wantarray()</source>
          <target state="translated">$thr-&amp;gt;wantarray()</target>
        </trans-unit>
        <trans-unit id="3f69c14e858b5c1df34d113331775fb073451b81" translate="yes" xml:space="preserve">
          <source>$type</source>
          <target state="translated">$type</target>
        </trans-unit>
        <trans-unit id="c97f7b5b669b69882534ea808361380941113443" translate="yes" xml:space="preserve">
          <source>$var</source>
          <target state="translated">$var</target>
        </trans-unit>
        <trans-unit id="bfcf22efab3cb92615cab56b71ca38f6e006aba1" translate="yes" xml:space="preserve">
          <source>$where = $ff-&amp;gt;fetch( [to =&amp;gt; /my/output/dir/ | \$scalar] )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ebcca98a699ea53e2231247a72a84bd295d614d" translate="yes" xml:space="preserve">
          <source>${^CHILD_ERROR_NATIVE}</source>
          <target state="translated">${^CHILD_ERROR_NATIVE}</target>
        </trans-unit>
        <trans-unit id="1e4a912f5f72199122c873cee34ff1c1d239e2fb" translate="yes" xml:space="preserve">
          <source>${^ENCODING}</source>
          <target state="translated">${^ENCODING}</target>
        </trans-unit>
        <trans-unit id="f3b8899b8e5e8f23e75aed69e3ddce82f41c8175" translate="yes" xml:space="preserve">
          <source>${^GLOBAL_PHASE}</source>
          <target state="translated">${^GLOBAL_PHASE}</target>
        </trans-unit>
        <trans-unit id="9e4345c690ee606721d9761c2f7ce10f61ceeb9d" translate="yes" xml:space="preserve">
          <source>${^LAST_FH}</source>
          <target state="translated">${^LAST_FH}</target>
        </trans-unit>
        <trans-unit id="443ce1f66248ed10b7009d542010c8e91d8dae37" translate="yes" xml:space="preserve">
          <source>${^MATCH}</source>
          <target state="translated">${^MATCH}</target>
        </trans-unit>
        <trans-unit id="eab499bcd51ef7801fc7d5cf7a9c9be79c9fceab" translate="yes" xml:space="preserve">
          <source>${^OPEN}</source>
          <target state="translated">${^OPEN}</target>
        </trans-unit>
        <trans-unit id="eacfcf095abe839cd36ea94708b28d9f88fc9e6c" translate="yes" xml:space="preserve">
          <source>${^POSTMATCH}</source>
          <target state="translated">${^POSTMATCH}</target>
        </trans-unit>
        <trans-unit id="06f0155547c173d8ff08023c4c7b0bf8ef44ec38" translate="yes" xml:space="preserve">
          <source>${^PREMATCH}</source>
          <target state="translated">${^PREMATCH}</target>
        </trans-unit>
        <trans-unit id="a6327eea8d10eaf0879a99bc91af3cb373ff690b" translate="yes" xml:space="preserve">
          <source>${^RE_DEBUG_FLAGS}</source>
          <target state="translated">${^RE_DEBUG_FLAGS}</target>
        </trans-unit>
        <trans-unit id="2cea488293c79f442f588260b13ba766ddf2741a" translate="yes" xml:space="preserve">
          <source>${^RE_TRIE_MAXBUF}</source>
          <target state="translated">${^RE_TRIE_MAXBUF}</target>
        </trans-unit>
        <trans-unit id="1bd418fbb1c94b64343dd94c3b3c7e2a5e0c7828" translate="yes" xml:space="preserve">
          <source>${^TAINT}</source>
          <target state="translated">${^TAINT}</target>
        </trans-unit>
        <trans-unit id="3df290c99bb1f15114e673cbfb205b475c45429e" translate="yes" xml:space="preserve">
          <source>${^UNICODE}</source>
          <target state="translated">${^UNICODE}</target>
        </trans-unit>
        <trans-unit id="d5e44141e74595fb104f0e4c2e1812bfd9b10e85" translate="yes" xml:space="preserve">
          <source>${^UTF8CACHE}</source>
          <target state="translated">${^UTF8CACHE}</target>
        </trans-unit>
        <trans-unit id="cca54b188d8e3dceb1ac93c20408aaa24c0d7bc1" translate="yes" xml:space="preserve">
          <source>${^UTF8LOCALE}</source>
          <target state="translated">${^UTF8LOCALE}</target>
        </trans-unit>
        <trans-unit id="a8753fde4078af63df119522c82c6bebd3f742d1" translate="yes" xml:space="preserve">
          <source>${^WARNING_BITS}</source>
          <target state="translated">${^WARNING_BITS}</target>
        </trans-unit>
        <trans-unit id="71880dad1d4783db72e3bfe4756119aa26c86c5d" translate="yes" xml:space="preserve">
          <source>${^WIN32_SLOPPY_STAT}</source>
          <target state="translated">${^WIN32_SLOPPY_STAT}</target>
        </trans-unit>
        <trans-unit id="771b7238750e9bd5146de0ab218aa3b85fcdf6fa" translate="yes" xml:space="preserve">
          <source>$|</source>
          <target state="translated">$|</target>
        </trans-unit>
        <trans-unit id="44b3b4b64ef02be99c03d8329b923e02b85c9509" translate="yes" xml:space="preserve">
          <source>$~</source>
          <target state="translated">$~</target>
        </trans-unit>
        <trans-unit id="69766f02fb09cd43fabb15be9645941918840347" translate="yes" xml:space="preserve">
          <source>%!</source>
          <target state="translated">%!</target>
        </trans-unit>
        <trans-unit id="1d01dda9eba4d09a665f6741bf9af0a14a72397d" translate="yes" xml:space="preserve">
          <source>%+</source>
          <target state="translated">%+</target>
        </trans-unit>
        <trans-unit id="409fa36268c6dc22379d48047705403185f5a3e8" translate="yes" xml:space="preserve">
          <source>%-</source>
          <target state="translated">%-</target>
        </trans-unit>
        <trans-unit id="eab4232e08743caf7f46a889f501992d903d5b97" translate="yes" xml:space="preserve">
          <source>%Carp::CarpInternal</source>
          <target state="translated">%Carp::CarpInternal</target>
        </trans-unit>
        <trans-unit id="0fffa2610426e3167a3f64535bdb6e97c405c404" translate="yes" xml:space="preserve">
          <source>%Carp::Internal</source>
          <target state="translated">%Carp::Internal</target>
        </trans-unit>
        <trans-unit id="a7fa017920810a51db543f5006fb201f42156860" translate="yes" xml:space="preserve">
          <source>%ENV</source>
          <target state="translated">%ENV</target>
        </trans-unit>
        <trans-unit id="4f37bbbf42a5a63d6213e5c858ddeb4a0078e2c1" translate="yes" xml:space="preserve">
          <source>%ERRNO</source>
          <target state="translated">%ERRNO</target>
        </trans-unit>
        <trans-unit id="8f719f8f6124651595ab12181bb234997a6e4807" translate="yes" xml:space="preserve">
          <source>%INC</source>
          <target state="translated">%INC</target>
        </trans-unit>
        <trans-unit id="d47497f0abd25c67acee2ef495dbc21c23d079fc" translate="yes" xml:space="preserve">
          <source>%LAST_MATCH_START</source>
          <target state="translated">%LAST_MATCH_START</target>
        </trans-unit>
        <trans-unit id="5740befe6171db7e508c0a0f26d7fbf97ce0b1e0" translate="yes" xml:space="preserve">
          <source>%LAST_PAREN_MATCH</source>
          <target state="translated">%LAST_PAREN_MATCH</target>
        </trans-unit>
        <trans-unit id="81b84a26a1e4e6398e3563f0b0bae375fc916f02" translate="yes" xml:space="preserve">
          <source>%OS_ERROR</source>
          <target state="translated">%OS_ERROR</target>
        </trans-unit>
        <trans-unit id="b0659bcf5c297c4ceabbd86f958cc3cae80c85e6" translate="yes" xml:space="preserve">
          <source>%SIG</source>
          <target state="translated">%SIG</target>
        </trans-unit>
        <trans-unit id="e4d5d809c6a0a5e880e9f66591496135956a98df" translate="yes" xml:space="preserve">
          <source>%^H</source>
          <target state="translated">%^H</target>
        </trans-unit>
        <trans-unit id="4dc1631d0540ce9e340433c61838b5287a1c1646" translate="yes" xml:space="preserve">
          <source>%options</source>
          <target state="translated">%options</target>
        </trans-unit>
        <trans-unit id="013f313b88b5f5b6a4e0e0f6d2a76a087abf1e9c" translate="yes" xml:space="preserve">
          <source>%overrides can be used to override any of the above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54f697a1ff421e46f37022813a88d0937a82090c" translate="yes" xml:space="preserve">
          <source>&amp;amp;</source>
          <target state="translated">&amp;amp;</target>
        </trans-unit>
        <trans-unit id="950abeed7df9229273cb9283ba220370c52c6709" translate="yes" xml:space="preserve">
          <source>&amp;amp;shellwords() is written as a special case of &amp;amp;quotewords(), and it does token parsing with whitespace as a delimiter-- similar to most Unix shells.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="064cb50518e04595ab545ccfaf2a0458fa658563" translate="yes" xml:space="preserve">
          <source>&amp;copy; 1993&amp;ndash;2016 Larry Wall and others</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac8a398dab68d75de1a2cec307e8d5776d87bc9a" translate="yes" xml:space="preserve">
          <source>&amp;gt; &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="534279656be98d039c439315743b5cae1c6e4b08" translate="yes" xml:space="preserve">
          <source>&amp;gt; ($1, $2, ...)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74ab763fe1e718a505d3df58dea09f4a12d16928" translate="yes" xml:space="preserve">
          <source>&amp;gt; (which will be required in the future when compiling CPAN modules). CURRENTLY NOT SUPPORTED!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf679239131a9868c1f081681e869ad09a37ff16" translate="yes" xml:space="preserve">
          <source>&amp;gt; Nick Ing-Simmons &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="487287f17b8900ef2d38272be5613f93168c2bef" translate="yes" xml:space="preserve">
          <source>&amp;gt; and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3518cbad9db494498eca265405b21334f4ae173c" translate="yes" xml:space="preserve">
          <source>&amp;gt; and Doug MacEachern &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e68b1343862c556c2a56b3ed595a23106be6011" translate="yes" xml:space="preserve">
          <source>&amp;gt; and Gregor N. Purdy &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c4a274a78d7509062138409cd7fa362bc22da34" translate="yes" xml:space="preserve">
          <source>&amp;gt; and Larry Wall &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d312c88be5fbd71b71ad8f91a86d72304ed1aae" translate="yes" xml:space="preserve">
          <source>&amp;gt; and the &lt;code&gt;perl5-porters&lt;/code&gt; mailing list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12434187b17b8455b14c9d71cd9e0f4c3ffc0e4f" translate="yes" xml:space="preserve">
          <source>&amp;gt; does not refer to fields--it refers to substrings matched by the last match pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84225c48e0e2aaa0915987bb47ef960c5163d2fe" translate="yes" xml:space="preserve">
          <source>&amp;gt; exists and should be included. This is the location of the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="428621d1f6c46d3b4c7fd941f0b542fabb09ef28" translate="yes" xml:space="preserve">
          <source>&amp;gt; form only in the left hand side. Anywhere else it's $&amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="912dc972e2732021d6a253b882c0b78e5f53ea5d" translate="yes" xml:space="preserve">
          <source>&amp;gt; is now maintaining libnet as of version 1.22_02</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7cdc1a41bc71b6809023272c7092646dedb4444" translate="yes" xml:space="preserve">
          <source>&amp;gt; using the perlbug program included with perl.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53bd4d17a9ca16e45387ff5fe61adbedb6eca566" translate="yes" xml:space="preserve">
          <source>&amp;gt; with support from Tim Bunce &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad8f58e52674cdb548fe304dea7f9d366d236f11" translate="yes" xml:space="preserve">
          <source>&amp;gt; |</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="846e10b2fe5c8e6569dec4a50716692ced1253a2" translate="yes" xml:space="preserve">
          <source>&amp;gt;&quot; code, shouldn't simply replace it with nullstring (by default, at least), but may pass it through as a string consisting of the literal characters E, less-than,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b52c14658cbd723a179fe2b65b13ea2d1ae5ed4b" translate="yes" xml:space="preserve">
          <source>&amp;gt;&quot; codes by firing an event especially for such codes, or by adding a special node-type to the in-memory document tree. Such &quot;E&amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c986d64e13b7988dbaa6fac3f4f24d6e7c97fc9a" translate="yes" xml:space="preserve">
          <source>&amp;gt;&quot; may have special meaning to some processors, or some processors may choose to add them to a special error report.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="470640a31108a95e8a2e8cc9289afd0d6acb88e7" translate="yes" xml:space="preserve">
          <source>&amp;gt;'s BSD::Resource class (not included) to access the PRIO_PROCESS, PRIO_MIN, and PRIO_MAX constants from your system, as well as the getpriority() and setpriority() system calls. Here's the preamble of the class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97003c08bf5d96a0ccf68bf987ae771824708ca0" translate="yes" xml:space="preserve">
          <source>&amp;gt;, 25 June 1995.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76f1a8f4518e252f563250bbf047b350b6ce5414" translate="yes" xml:space="preserve">
          <source>&amp;gt;, Jarkko Hietaniemi &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b1c5153e0332505951bfd7dd6d47ac36153522d" translate="yes" xml:space="preserve">
          <source>&amp;gt;, Raphael Manfredi &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="656d1dc94b98368ca38ba98b9cbb3ede655cb92d" translate="yes" xml:space="preserve">
          <source>&amp;gt;, Tim Bunce &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="974ba0bd1abf548b73687295bff5e6f89b210572" translate="yes" xml:space="preserve">
          <source>&amp;gt;, Zefram &amp;lt;zefram@fysh.org&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cd7950d1b4fac82cb63438026e4449e01ee4843" translate="yes" xml:space="preserve">
          <source>&amp;gt;, along with the output produced by &lt;code&gt;perl -V&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5feed16c11b26202c07c80e0fbecda66a4618987" translate="yes" xml:space="preserve">
          <source>&amp;gt;, and also contact your vendor: bug fixes may exist for these problems in your operating system. Sometimes such bug fixes are called an operating system upgrade. If you have the source for Perl, include in the perlbug email the output of the test described above in &lt;a href=&quot;#Testing-for-broken-locales&quot;&gt;Testing for broken locales&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4966802cc673e4182f98b1a6cf448b36b02d9362" translate="yes" xml:space="preserve">
          <source>&amp;gt;, with help from many other folks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f44d0a23c57fb5f26df955513ec2ac46e6b44a56" translate="yes" xml:space="preserve">
          <source>&amp;gt;, with small contributions from Tim Bunce, Tom Christiansen, Guy Decoux, Hallvard Furuseth, Dov Grobgeld, and Ilya Zakharevich.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6dc9ef3eea4526366b91e74fece8d4dab9acc4b" translate="yes" xml:space="preserve">
          <source>&amp;gt;. Adapted from Sys::Hostname by David Sundstrom &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6b7f748bb7fdc9bed2d08a5aeae78c943cc1b0a" translate="yes" xml:space="preserve">
          <source>&amp;gt;. All rights reserved. This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa8a0a3ca732947e24856f7eb5e973ee01ea7626" translate="yes" xml:space="preserve">
          <source>&amp;gt;. First, because it's used as a prefix to some other template code. Second, because it cannot be used in &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; at all, and third, in &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt;, doesn't return the data as defined by the template code it precedes. Instead it'll give you an integer of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61b50c1c1d6b60d60bfb434a189956c47b482268" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;Just Another Perl Hacker&amp;rdquo;, a clever but cryptic bit of Perl code that, when executed, evaluates to that string. Often used to illustrate a particular Perl feature, and something of an ongoing Obfuscated Perl Contest seen in USENET signatures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d2c1a80d8c17e5a143aee09c29a86838f18ab02" translate="yes" xml:space="preserve">
          <source>&amp;lt;</source>
          <target state="translated">&amp;lt;</target>
        </trans-unit>
        <trans-unit id="2ac89caf8e00544c55c30e4140af9ba1fee727f4" translate="yes" xml:space="preserve">
          <source>&amp;lt;.&amp;gt;, where it means relative to the start of the string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a8914272173ac186c1dacdf770e1ec52b85ad96" translate="yes" xml:space="preserve">
          <source>&amp;lt;DB_File&amp;gt;, &lt;a href=&quot;http://search.cpan.org/perldoc/GDBM_File&quot;&gt;GDBM_File&lt;/a&gt;, &lt;a href=&quot;ndbm_file&quot;&gt;NDBM_File&lt;/a&gt;, &lt;a href=&quot;http://search.cpan.org/perldoc/ODBM_File&quot;&gt;ODBM_File&lt;/a&gt;, &lt;a href=&quot;sdbm_file&quot;&gt;SDBM_File&lt;/a&gt;, &lt;a href=&quot;perldbmfilter&quot;&gt;perldbmfilter&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63651d818a3b754767cf16fcaeaedb3bf632318f" translate="yes" xml:space="preserve">
          <source>&amp;lt;Extension</source>
          <target state="translated">&amp;lt;Extension</target>
        </trans-unit>
        <trans-unit id="238b3568a5754311f948de8074ce4be8cb6873f1" translate="yes" xml:space="preserve">
          <source>&amp;lt;Raphael_Manfredi@pobox.com&amp;gt;</source>
          <target state="translated">&amp;lt;Raphael_Manfredi@pobox.com&amp;gt;</target>
        </trans-unit>
        <trans-unit id="4a923d1f22dc8b8e2f7facbda8de92541d95a16e" translate="yes" xml:space="preserve">
          <source>&amp;lt;ajs@ajs.com&amp;gt;</source>
          <target state="translated">&amp;lt;ajs@ajs.com&amp;gt;</target>
        </trans-unit>
        <trans-unit id="bc9486c266002cc736c3bbbdd7208f76f2de37ab" translate="yes" xml:space="preserve">
          <source>&amp;lt;bailey@newman.upenn.edu&amp;gt;</source>
          <target state="translated">&amp;lt;bailey@newman.upenn.edu&amp;gt;</target>
        </trans-unit>
        <trans-unit id="c63920085ef25b369cced2a5798441f216e09acf" translate="yes" xml:space="preserve">
          <source>&amp;lt;dankogai@cpan.org&amp;gt;</source>
          <target state="translated">&amp;lt;dankogai@cpan.org&amp;gt;</target>
        </trans-unit>
        <trans-unit id="951a3a396cef0e66d142037a9f7bc84b8f307996" translate="yes" xml:space="preserve">
          <source>&amp;lt;keyword&amp;gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5120a9c69186b17f19515cbbd957f126a2e5c02a" translate="yes" xml:space="preserve">
          <source>&amp;lt;perl-unicode@perl.org&amp;gt;</source>
          <target state="translated">&amp;lt;perl-unicode@perl.org&amp;gt;</target>
        </trans-unit>
        <trans-unit id="d36fc8ce187477bd063f5578c1320811aefc2ffa" translate="yes" xml:space="preserve">
          <source>&amp;lt;perl5-porters@perl.org&amp;gt;</source>
          <target state="translated">&amp;lt;perl5-porters@perl.org&amp;gt;</target>
        </trans-unit>
        <trans-unit id="5a731e60e74b5f552d4d0f177a25c912f96021e5" translate="yes" xml:space="preserve">
          <source>&amp;lt;sys/ioctl.h&amp;gt;</source>
          <target state="translated">&amp;lt;sys/ioctl.h&amp;gt;</target>
        </trans-unit>
        <trans-unit id="a2f2d6096c8a02f8b871d2e564ef464b82694198" translate="yes" xml:space="preserve">
          <source>&amp;lt;sys/ipc.h</source>
          <target state="translated">&amp;lt;sys/ipc.h</target>
        </trans-unit>
        <trans-unit id="d1868104ddd5a3d4f720e8e3d5ea2ffdd651290a" translate="yes" xml:space="preserve">
          <source>&amp;lt;sys/sem.h</source>
          <target state="translated">&amp;lt;sys/sem.h</target>
        </trans-unit>
        <trans-unit id="2cd497bc73fbbe2a589ea520d4e4cccfb586ad92" translate="yes" xml:space="preserve">
          <source>&amp;ndash;a</source>
          <target state="translated">&amp;ndash;a</target>
        </trans-unit>
        <trans-unit id="f29d4a39a6858f24ba6c2e4ead315a49bc5c32bc" translate="yes" xml:space="preserve">
          <source>&amp;ndash;n</source>
          <target state="translated">&amp;ndash;n</target>
        </trans-unit>
        <trans-unit id="11def85d6d154c6ccee02c955e87f916b82b4956" translate="yes" xml:space="preserve">
          <source>&amp;ndash;p</source>
          <target state="translated">&amp;ndash;p</target>
        </trans-unit>
        <trans-unit id="4cdeabc37950941d9e022ee90895f48f051ff5a6" translate="yes" xml:space="preserve">
          <source>&amp;pi;&amp;omicron;&amp;lambda;ύ&amp;chi;&amp;rho;&amp;omega;&amp;mu;&amp;omicron;&amp;sigmaf;</source>
          <target state="translated">&amp;pi;&amp;omicron;&amp;lambda;ύ&amp;chi;&amp;rho;&amp;omega;&amp;mu;&amp;omicron;&amp;sigmaf;</target>
        </trans-unit>
        <trans-unit id="7e7e54edfd858f948a4dfdc756a1c0631dbf87ca" translate="yes" xml:space="preserve">
          <source>'&quot; or as &quot;magic is enabled if you set &lt;code&gt;$Currency&lt;/code&gt; to '&lt;b&gt;[euro]&lt;/b&gt;'&quot;, or as &quot;magic is enabled if you set &lt;code&gt;$Currency&lt;/code&gt; to '[x20AC]', etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3480122946825fa496d9c43868b3a8715943fe75" translate="yes" xml:space="preserve">
          <source>'/flags' mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4769dd4c1b1ae724cadf629e4fde6a0410374c3" translate="yes" xml:space="preserve">
          <source>'Debug' mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94784a2d57322b0e37b035292a17a97c0b5d7a07" translate="yes" xml:space="preserve">
          <source>'Get' magic is ignored on the sv passed in, but will be called on &lt;code&gt;SvRV(sv)&lt;/code&gt; if sv is an RV.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c61521a89da3563cbce63a25ba389b2cb3d8e76" translate="yes" xml:space="preserve">
          <source>'NEXT', 'LAST', or 'REDO' if the OP is a target of one of those in exec mode, or empty otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2a5021e06688db5fb816545b0a0f08c57d4ef2f" translate="yes" xml:space="preserve">
          <source>'Nestable' by Ed Avis ed@membled.com</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98ec474e6553ae6f25d1fab98307dcfb87177146" translate="yes" xml:space="preserve">
          <source>'Quiet' mode; don't print out the names of the files being converted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1613c033139d5917e7cf249d6a6e4f215b5130d" translate="yes" xml:space="preserve">
          <source>'a' in the regexp element 'at' doesn't match the end of the string. Backtrack one character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f655991602e28fd4eb05426a7036458d4dae52b7" translate="yes" xml:space="preserve">
          <source>'a' in the regexp element 'at' still doesn't match the last letter of the string 't', so backtrack one more character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea9ff72b952f6b696e621c65d8ce641fc03b8eb1" translate="yes" xml:space="preserve">
          <source>'actual_ok' is a reflection of whether or not the test literally printed 'ok' or 'not ok'. This is for examining the result of 'todo' tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f04ab9bc75852bae4aaa8584a82ba4bf401a5a75" translate="yes" xml:space="preserve">
          <source>'blib'</source>
          <target state="translated">'blib'</target>
        </trans-unit>
        <trans-unit id="7ff46717e453ac4170ceaf6d1aa64c0c68c41f5d" translate="yes" xml:space="preserve">
          <source>'command'</source>
          <target state="translated">'command'</target>
        </trans-unit>
        <trans-unit id="246b1012bb3e04ee0d6df3a6213bf219770fad0b" translate="yes" xml:space="preserve">
          <source>'d' in the regexp doesn't match 'c' in the string - a dead end. So backtrack two characters and pick the second alternative in the first group 'abc'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cd0e8016334776693c757142c1ddb0e8bb46364" translate="yes" xml:space="preserve">
          <source>'d' matches. The second grouping is satisfied, so set $2 to 'd'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eca7d2b8862be5adae46195d185923cefa4bfc1" translate="yes" xml:space="preserve">
          <source>'debug' mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3824939c962e06ba01f1f600b30450149931e60c" translate="yes" xml:space="preserve">
          <source>'e' may be specified multiple times. 'replacement' is interpreted as a double quoted string unless a single-quote (&lt;code&gt;'&lt;/code&gt;) is the delimiter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e57fe67e2e49ad2a96629f1c6979a429dda60af9" translate="yes" xml:space="preserve">
          <source>'errno' - unresolved external</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eaaa883c384a824893531ee5f26a6032bb4cde2" translate="yes" xml:space="preserve">
          <source>'eval' mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="226545675638f79bd8571b4dcf7d70e920c23acf" translate="yes" xml:space="preserve">
          <source>'f' in the regexp doesn't match 'e' in the string, so a dead end. Backtrack one character and pick the second alternative in the second group 'd'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b37f08d3d307f423506e17010dadbc5ce5216a86" translate="yes" xml:space="preserve">
          <source>'libname' is either the long name ('Math::BigInt::Pari'), or only the short version like 'Pari'. To use this library:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b84fc1317c877e9ebaf4001975554012578a3e28" translate="yes" xml:space="preserve">
          <source>'libname' is either the long name, like 'Math::BigInt::Pari', or only the short version, like 'Pari'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dbeab799268e9a72da38c0b8e16561da3acb7cb" translate="yes" xml:space="preserve">
          <source>'load' and 'autoload' are imported by default, but 'load_remote' and 'autoload_remote' are not imported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d672154adebbd67a8d065f3a7ebddfbbd82272c4" translate="yes" xml:space="preserve">
          <source>'module name' is simply the name of your module. (Foo::Bar)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c644c923e46425090c4a4cd8e078ba138d1d6d2f" translate="yes" xml:space="preserve">
          <source>'module...'</source>
          <target state="translated">'module...'</target>
        </trans-unit>
        <trans-unit id="f3cbd92cada8b36db6a7d01bb118a79f51a1ab6c" translate="yes" xml:space="preserve">
          <source>'name' is the name of the test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16b3b7907ba8251aa5f8c85b8b4f54f1fb6fe9c6" translate="yes" xml:space="preserve">
          <source>'ok' is true if Test::Harness will consider the test to be a pass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48aebecad871be5a0936233fc2afc1b743a89448" translate="yes" xml:space="preserve">
          <source>'s &lt;code&gt;--timer&lt;/code&gt; switch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bbc45feacf307c8770c8e61c9b14d478123f7ce" translate="yes" xml:space="preserve">
          <source>'s &lt;code&gt;FILE&lt;/code&gt; structure. This will be used to define the macro FILE_base(fp).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36234c0d4814a50a99e5c14a813be701ce0ed1d5" translate="yes" xml:space="preserve">
          <source>'s &lt;code&gt;FILE&lt;/code&gt; structure. This will be used to define the macro FILE_bufsiz(fp).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5e8294b57cd05092ef756a1736bd716210542cc" translate="yes" xml:space="preserve">
          <source>'s &lt;code&gt;FILE&lt;/code&gt; structure. This will be used to define the macro FILE_cnt(fp).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d4fd1ddeb7d5ca874be33c4acd454c99886f701" translate="yes" xml:space="preserve">
          <source>'s &lt;code&gt;FILE&lt;/code&gt; structure. This will be used to define the macro FILE_ptr(fp).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3ea5df1ce0d65a65fb77848b6be8ee89ec118fc" translate="yes" xml:space="preserve">
          <source>'s LSP actually plays other games which allow applications requiring IFS compatibility to work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8575f3c6cb8a428609d737afc9b913d36a061d6c" translate="yes" xml:space="preserve">
          <source>'s activity as well, and probably sooner than you'd think.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35e89f567ec3d2e2daf57c907135d3d2decf311d" translate="yes" xml:space="preserve">
          <source>'s internal UTF8 flag &lt;b&gt;off&lt;/b&gt;. Do not use frivolously. Returns the previous state of the UTF8 flag, or &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c18972339252f6dd40990b14182751758dd14d3e" translate="yes" xml:space="preserve">
          <source>'s internal UTF8 flag &lt;b&gt;on&lt;/b&gt;. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffd9245243d51fd57fdf81ada6cce7df0957935a" translate="yes" xml:space="preserve">
          <source>'static' or 'dynamic' (default unless usedl=undef in config.sh). Should only be used to force static linking (also see linkext below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e20a94bf4b6abdcf096a0ce42fdffaa360f1905c" translate="yes" xml:space="preserve">
          <source>'strict' mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f24e6bedf7257a8db0e284fae40a53ce17809fe" translate="yes" xml:space="preserve">
          <source>'taint' mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90c9d3f549b86ea3c7b41b7b689d4b79b2c181ab" translate="yes" xml:space="preserve">
          <source>'type' indicates if it was a special test. Normal tests have a type of ''. Type can be one of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccdc189a84ee023b400d2ee14fd88c740d96e9f2" translate="yes" xml:space="preserve">
          <source>'type' is the type of what you're installing. Usually 'Module'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28ed3a797da3c48c309a4ef792147f3c56cfec40" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="translated">(</target>
        </trans-unit>
        <trans-unit id="4f57dce057d5cea28b53a7b4760a828edbdc4709" translate="yes" xml:space="preserve">
          <source>( &lt;a href=&quot;http://hyperarchive.lcs.mit.edu/HyperArchive/Archive/cmp/&quot;&gt;http://hyperarchive.lcs.mit.edu/HyperArchive/Archive/cmp/&lt;/a&gt; ).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de084108ea7d4f9b842dc2f6fb9eeb70c55f2ab2" translate="yes" xml:space="preserve">
          <source>( &lt;a href=&quot;http://www.tpj.com/&quot;&gt;http://www.tpj.com/&lt;/a&gt; ) volume 3, #2. Reprinted with permission.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64cb4d83c3562ffca658498220ac6d82771fcd45" translate="yes" xml:space="preserve">
          <source>(!) of &lt;code&gt;$_&lt;/code&gt; , not a dynamically scoped alias the way &lt;code&gt;foreach&lt;/code&gt; does. That made it similar to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5745e8f83582d83cfabb87f3b88e434d2ba3b35" translate="yes" xml:space="preserve">
          <source>(&quot;Slavey&quot; is a subform.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="324dad1204a14e1d528a2df3ccc425357b64c9d6" translate="yes" xml:space="preserve">
          <source>($err, $hostname, $servicename) = getnameinfo $sockaddr, [$flags, [$xflags]]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95355570b48ddfd3b7ac54f9ffb2f7be75db8eec" translate="yes" xml:space="preserve">
          <source>($err, @result) = getaddrinfo $host, $service, [$hints]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="963617d130a1b015c92a1ba35b891465e4aa9a9e" translate="yes" xml:space="preserve">
          <source>($multiaddr, $interface) = unpack_ip_mreq $ip_mreq</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1afcd6b8f0ac8ff3714572d108e1c6c87676cff6" translate="yes" xml:space="preserve">
          <source>($multiaddr, $source, $interface) = unpack_ip_mreq_source $ip_mreq</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07812108ec38fc97a8a1d8cc78fdac7fa15322d5" translate="yes" xml:space="preserve">
          <source>($multiaddr6, $ifindex) = unpack_ipv6_mreq $ipv6_mreq</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f3bf479dc9d0bbda96445f67cffc06484b3f21b" translate="yes" xml:space="preserve">
          <source>($path) = sockaddr_un $sockaddr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="467c5e28d8d73c3feef1edc1e9efeaf56d16dedf" translate="yes" xml:space="preserve">
          <source>($path) = unpack_sockaddr_un $sockaddr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d12c7694dd1eddf25b847d588c31d622c7203f7e" translate="yes" xml:space="preserve">
          <source>($port, $ip6_address, $scope_id, $flowinfo) = sockaddr_in6 $sockaddr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a88f63857e9d5c6c1454732bdb18d399b7f0ec6" translate="yes" xml:space="preserve">
          <source>($port, $ip6_address, $scope_id, $flowinfo) = unpack_sockaddr_in6 $sockaddr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1af639b26170506df06d8fe8271e698e3d9e7426" translate="yes" xml:space="preserve">
          <source>($port, $ip_address) = sockaddr_in $sockaddr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dddeeeccdf6cca46b2dab2162f4cd0e1ffe3ea52" translate="yes" xml:space="preserve">
          <source>($port, $ip_address) = unpack_sockaddr_in $sockaddr</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55952a2fe4555e49e3469a8d7bf3292696cba969" translate="yes" xml:space="preserve">
          <source>($z, $status) = new Compress::Raw::Bunzip2 $appendOutput, $consumeInput, $small, $verbosity, $limitOutput;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b58b321c25bced9b834f50cc77a361fd6183ce16" translate="yes" xml:space="preserve">
          <source>($z, $status) = new Compress::Raw::Bzip2 $appendOutput, $blockSize100k, $workfactor;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09797eb7d3af42d8115a0e052db5d5a93d8c02b2" translate="yes" xml:space="preserve">
          <source>(*) Not all fields are supported on all filesystem types. Notably, the ctime field is non-portable. In particular, you cannot expect it to be a &quot;creation time&quot;; see &lt;a href=&quot;../perlport#Files-and-Filesystems&quot;&gt;Files and Filesystems in perlport&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dfb9c09371641d7e40e94e3ffafa77aa16aab63" translate="yes" xml:space="preserve">
          <source>(*) Not all fields are supported on all filesystem types. Notably, the ctime field is non-portable. In particular, you cannot expect it to be a &quot;creation time&quot;; see &lt;a href=&quot;perlport#Files-and-Filesystems&quot;&gt;Files and Filesystems in perlport&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efaf07201a7a7789620127dae8f3bf56b768541b" translate="yes" xml:space="preserve">
          <source>(0) You need to have the appropriate Symbian SDK installed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9280d152cea94fd9f2b018ee3305ba5927991780" translate="yes" xml:space="preserve">
          <source>(1 or 0 I suppose). This behavior may change in the future, so don't write code that relies on it. &lt;code&gt;Present_In&lt;/code&gt; is a Perl extension that is expressible in a bipartite or compound form (for example, &lt;code&gt;\p{Present_In=4.0}&lt;/code&gt; ), so &lt;code&gt;charprop&lt;/code&gt; accepts it. But &lt;code&gt;Any&lt;/code&gt; is a Perl extension that isn't expressible that way, so &lt;code&gt;charprop&lt;/code&gt; returns &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; for it. Also &lt;code&gt;charprop&lt;/code&gt; returns &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; for all Perl extensions that are internal-only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="050b9bf9f343b8809e0bab2bf66536bcc9df986f" translate="yes" xml:space="preserve">
          <source>(1) Get a Perl source code distribution (for example the file perl-5.9.2.tar.gz is fine) from &lt;a href=&quot;http://www.cpan.org/src/&quot;&gt;http://www.cpan.org/src/&lt;/a&gt; and unpack it in your the C:/Symbian directory of your Windows system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df4e6b2f505aab96f6d250421f7df084a7490d2f" translate="yes" xml:space="preserve">
          <source>(1) command. A manpage contains a SYNOPSIS, a DESCRIPTION, a list of BUGS, and so on, and is typically longer than a page. There are manpages documenting &lt;b&gt;commands&lt;/b&gt;, &lt;b&gt;syscalls&lt;/b&gt;, &lt;b&gt;library&lt;/b&gt;&lt;b&gt;functions&lt;/b&gt;, &lt;b&gt;devices&lt;/b&gt;, &lt;b&gt;protocols&lt;/b&gt;, &lt;b&gt;files&lt;/b&gt;, and such. In this book, we call any piece of standard Perl documentation (like &lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt; or &lt;a href=&quot;https://perldoc.perl.org/5.26.0/perldelta.html&quot;&gt;perldelta&lt;/a&gt;) a manpage, no matter what format it&amp;rsquo;s installed in on your system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5228ad69edf06d251455b6e8e10e1e6d43d51f2f" translate="yes" xml:space="preserve">
          <source>(1) manpage for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92d072185bd3901bb095fa9ea8d556c4e36a573d" translate="yes" xml:space="preserve">
          <source>(1) using function names exported by default:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aed051b9e7aba274cb5bac8c4e6f4de9e43f1caa" translate="yes" xml:space="preserve">
          <source>(2) Change to the perl source directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e61295961ddd41bd3e4e4f52e51b91a833ed23be" translate="yes" xml:space="preserve">
          <source>(2) Non-conjoining Hangul letters (Compatibility Jamo, halfwidth Jamo, and enclosed letters) are not automatically terminated with a terminator primary weight. These characters may need terminator included in a collation element table beforehand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d1adc8d5ae1c56d00f41c5420ddf7310ec7c5f1" translate="yes" xml:space="preserve">
          <source>(2) function with the parameters FILENAME, MODE, and PERMS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9d7959d0c2b8cd146bc55b95791e265288aa37f" translate="yes" xml:space="preserve">
          <source>(2) syscall to see which values and flag bits are available. You may combine several flags using the &lt;code&gt;|&lt;/code&gt;-operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e291c99ac01bdbe45472105b059471ed2319fe4a" translate="yes" xml:space="preserve">
          <source>(2) syscall, refers to the field holding the &lt;b&gt;permission bits&lt;/b&gt; and the type of the &lt;b&gt;file&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7c4b5763638dfdbe81e052889c56cb0770af8f5" translate="yes" xml:space="preserve">
          <source>(2) to make an entire file appear in the process's address space, and then using that as PerlIO's &quot;buffer&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c21bde1fc9f21050c970887ae0994b9d92958b6" translate="yes" xml:space="preserve">
          <source>(2) using function names exported on request:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e43b464c22b563d52c0e0763a11d8b3d5cbac2ba" translate="yes" xml:space="preserve">
          <source>(2), which is used to implement Perl's readline() function, the &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; operator. On older Perls the handler was called immediately (and as &lt;code&gt;&lt;a href=&quot;functions/read&quot;&gt;read&lt;/a&gt;&lt;/code&gt; is not &quot;unsafe&quot;, this worked well). With the &quot;deferred&quot; scheme the handler is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fd5cd5bb1c41d9b30f01b6b4a4b982b250d405d" translate="yes" xml:space="preserve">
          <source>(2). See &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; in Camel chapter 27, &amp;ldquo;Functions&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d8000ef790797cf4fee474a65c03ad0b65dbec0" translate="yes" xml:space="preserve">
          <source>(2005, ISBN 1558607013, published by Morgan Kaufmann) discusses memoization (and many other topics) in tremendous detail. It is available on-line for free. For more information, visit &lt;a href=&quot;http://hop.perl.plover.com/&quot;&gt;http://hop.perl.plover.com/&lt;/a&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a4578033a534914e48a6362607183b5cd7d8c13" translate="yes" xml:space="preserve">
          <source>(3) Run the following script using the perl coming with the SDK</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b68fe1b6b7cbc0d020ca580d98d672026c90a28" translate="yes" xml:space="preserve">
          <source>(3) provides. Look for these in the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2168e714102ae6ad5b69d06433f97b07097c327" translate="yes" xml:space="preserve">
          <source>(4) Build the project, either by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="481a7c8c1bd9ff05e6f7ff1e8072ddb047ca7c1a" translate="yes" xml:space="preserve">
          <source>(8 bit), an address (16 bit, big endian), a record type (8 bit),</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14ffb7bc030537f80b2752d07a4b2bfd1a194ef0" translate="yes" xml:space="preserve">
          <source>(&lt;b&gt;CAUTION&lt;/b&gt;: This layer does not validate byte sequences. For reading input, you should instead use &lt;code&gt;:encoding(utf8)&lt;/code&gt; instead of bare &lt;code&gt;:utf8&lt;/code&gt; .)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="411e8312cc23fafe54da32c15030a2e2d7c13874" translate="yes" xml:space="preserve">
          <source>(&lt;b&gt;Note:&lt;/b&gt; This feature has been introduced in CPAN.pm 1.8854)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd5c775365e54d99c82b2bdbfa1a8b15be5799c5" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;&quot;\xc4\x80&quot;&lt;/code&gt; is not a valid sequence of bytes in any UTF-8-encoded character(s) in the EBCDIC code pages that Perl supports, which is why the above example returns failure on them. What does decode into &lt;code&gt;\x{100}&lt;/code&gt; depends on the platform. It is &lt;code&gt;&quot;\x8C\x41&quot;&lt;/code&gt; in IBM-1047.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78e45c35a27c679146d8b9a6547452781016fe78" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;BSD&lt;/code&gt; ), not from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fe2b454cc9f684a029244a2eab0a33ae978e254" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;SYSV&lt;/code&gt; ).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="536759402cbf72f889912d8ccaae56bd1ffbd470" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;\\x{}&lt;/code&gt; is used here instead of &lt;code&gt;\\N{}&lt;/code&gt; , since it's most likely that you want to see what the native values are.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9a99e3f412e4a4ae9aeac7ca17e188f0e7a8a80" translate="yes" xml:space="preserve">
          <source>(&lt;code&gt;and&lt;/code&gt; , &lt;code&gt;or&lt;/code&gt; and &lt;code&gt;not&lt;/code&gt; aren't just in the above table as descriptions of the operators. They're also supported as operators in their own right. They're more readable than the C-style operators, but have different precedence to &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and friends. Check &lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt; for more detail.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef5d8550b445b49ccb753adf95edfcddb3df2884" translate="yes" xml:space="preserve">
          <source>(A form of Norwegian.) (Formerly &quot;no-nyn&quot;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df5d2401d8afaf926b8570554d4a8edfbc46213c" translate="yes" xml:space="preserve">
          <source>(A group of languages.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97c8f9191e112d148413f32f352dbaacd093ba86" translate="yes" xml:space="preserve">
          <source>(A slightly shorter form is &lt;code&gt;av_tindex&lt;/code&gt; .)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6eb74e6567398a36c5eae2709cd3dde2c0742b4" translate="yes" xml:space="preserve">
          <source>(A) This is the error message generally seen in a browser window when trying to run a CGI program (including SSI) over the web. The actual error text varies widely from server to server. The most frequently-seen variants are &quot;500 Server error&quot;, &quot;Method (something) not permitted&quot;, &quot;Document contains no data&quot;, &quot;Premature end of script headers&quot;, and &quot;Did not produce a valid header&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5fe4b8ca23e43f2d32862cd661c17b564966084" translate="yes" xml:space="preserve">
          <source>(A) You've accidentally run your script through &lt;b&gt;csh&lt;/b&gt; instead of Perl. Check the #! line, or manually feed your script into Perl yourself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c92e409ec1058cc20e8a847808274b8f228535c" translate="yes" xml:space="preserve">
          <source>(A) You've accidentally run your script through &lt;b&gt;csh&lt;/b&gt; or another shell instead of Perl. Check the #! line, or manually feed your script into Perl yourself. The #! line at the top of your file could look like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b25504fc0af5bbaab6ee549340ce607231d2c3d0" translate="yes" xml:space="preserve">
          <source>(A) You've accidentally run your script through the Bourne shell instead of Perl. Check the #! line, or manually feed your script into Perl yourself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7502cf3eebb29d7b1108dd5fe5022cd24b558e7" translate="yes" xml:space="preserve">
          <source>(ANY_TARGET must not be given a double-colon rule by MakeMaker.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12ddb71ee4b6ce8514a68c8e84c97499504ca2b2" translate="yes" xml:space="preserve">
          <source>(Actually, besides &lt;code&gt;Common&lt;/code&gt; , the &lt;code&gt;Inherited&lt;/code&gt; script, contains characters that are used in multiple scripts. These are modifier characters which inherit the script value of the controlling character. Some of these are used in many scripts, and so go into &lt;code&gt;Inherited&lt;/code&gt; in both &lt;code&gt;Script&lt;/code&gt; and &lt;code&gt;Script_Extensions&lt;/code&gt; . Others are used in just a few scripts, so are in &lt;code&gt;Inherited&lt;/code&gt; in &lt;code&gt;Script&lt;/code&gt; , but not in &lt;code&gt;Script_Extensions&lt;/code&gt; .)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dab0efeb94c0f8965bcf922d24fbd629174b794c" translate="yes" xml:space="preserve">
          <source>(Actually, the preceding discussion is something of a fib. You don't need to enable deferred writing to get good performance for this common case, because &lt;code&gt;Tie::File&lt;/code&gt; will do it for you automatically unless you specifically tell it not to. See &lt;a href=&quot;#Autodeferring&quot;&gt;Autodeferring&lt;/a&gt;, below.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5ca46a57550e9346051f0d6f256f53e0f7a4e88" translate="yes" xml:space="preserve">
          <source>(Add the &lt;code&gt;--&lt;a href=&quot;functions/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; option to remove leftover files.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70dff9608ea9c4b8fb976ba65f00753b9a037d1b" translate="yes" xml:space="preserve">
          <source>(Also &lt;code&gt;isgreaterequal&lt;/code&gt; , &lt;code&gt;isless&lt;/code&gt; , &lt;code&gt;islessequal&lt;/code&gt; , &lt;code&gt;islessgreater&lt;/code&gt; , &lt;code&gt;isunordered&lt;/code&gt; )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33e3594a0b8cdf286c072fdee438939e6c2c0b2d" translate="yes" xml:space="preserve">
          <source>(Also see &lt;a href=&quot;pullparser&quot;&gt;Pod::Simple::PullParser&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcb5b408224889b4858ee04ee35bc48ce4b2c967" translate="yes" xml:space="preserve">
          <source>(Although that is not formally a data paragraph, it has the same meaning as one, and Pod parsers may parse it as one.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eb7bf799aa68817b3e5e10c05e0d2390d374551" translate="yes" xml:space="preserve">
          <source>(And so on with other country codes as the subtag.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d962869e95d850ca0a5b315f47f0eb7a3bfd0ab5" translate="yes" xml:space="preserve">
          <source>(Artificial)</source>
          <target state="translated">(Artificial)</target>
        </trans-unit>
        <trans-unit id="137ce04e787ba616e83cdac14df27698bf1e1c2b" translate="yes" xml:space="preserve">
          <source>(Artificial) NOT Interlingua!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9ce22cfc45278057811215f942d1b8bf75296f9" translate="yes" xml:space="preserve">
          <source>(Artificial) NOT Interlingue!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50c3b4d3d4ab0855b0a8f3819a11a85644954f6d" translate="yes" xml:space="preserve">
          <source>(BMP). With Unicode 3.1, 17 (yes, seventeen) planes in all were defined--but they are nowhere near full of defined characters, yet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="889a329a56f96b4874765b3dd9310eabfd8dcb2d" translate="yes" xml:space="preserve">
          <source>(BOMs) are--see &lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="773997d4758cee5b811a79d949e92a5712710d89" translate="yes" xml:space="preserve">
          <source>(Be aware that the last example was not always inlined in Perl 5.20 and earlier, which did not behave consistently with subroutines containing inner scopes.) You can countermand inlining by using an explicit &lt;code&gt;&lt;a href=&quot;functions/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a174191e282920b91639822a672d5725bf76ec47" translate="yes" xml:space="preserve">
          <source>(Building 'cc -n32' is the default.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55e3c08f18c3b475f51af9d536d960817a3d1e29" translate="yes" xml:space="preserve">
          <source>(C) by Tels &lt;a href=&quot;http://bloodgate.com/&quot;&gt;http://bloodgate.com/&lt;/a&gt; 2001 - 2009.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b85dee1acd3d5850c5cc9f8e459f8b5fdd52ce02" translate="yes" xml:space="preserve">
          <source>(C) by Tels &lt;a href=&quot;http://bloodgate.com/&quot;&gt;http://bloodgate.com/&lt;/a&gt; in early 2002 - 2007.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b54c7941f27ddb609d27a0459780940afe556b1b" translate="yes" xml:space="preserve">
          <source>(D deprecated) As an (ahem) accidental feature, &lt;code&gt;AUTOLOAD&lt;/code&gt; subroutines are looked up as methods (using the &lt;code&gt;@ISA&lt;/code&gt; hierarchy) even when the subroutines to be autoloaded were called as plain functions (e.g. &lt;code&gt;Foo::bar()&lt;/code&gt; ), not as methods (e.g. &lt;code&gt;Foo-&amp;gt;bar()&lt;/code&gt; or &lt;code&gt;$obj-&amp;gt;bar()&lt;/code&gt; ).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e047d8531b1bb00316d1b6eb16e7a4673888ecb8" translate="yes" xml:space="preserve">
          <source>(D deprecated) The &lt;code&gt;$[&lt;/code&gt; variable (index of the first element in an array) is deprecated. See &lt;a href=&quot;perlvar#%24%5b&quot;&gt;$[ in perlvar&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5296c629c88d453a6fc34138f3fff451c2bfee94" translate="yes" xml:space="preserve">
          <source>(D deprecated) The construct indicated is no longer recommended for use, generally because there's a better way to do it, and also because the old way has bad side effects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d051557d51c179f51b72b70cb39fc8d5f3731aa" translate="yes" xml:space="preserve">
          <source>(D deprecated) The values you give to a format should be separated by commas, not just aligned on a line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a80d3e9ffc218ea224bf6be7a7f8e413e54073b" translate="yes" xml:space="preserve">
          <source>(D deprecated) Using &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt; to jump from an outer scope into an inner scope is deprecated and should be avoided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb84561117151d1586d9959d070508cfdeb9100b" translate="yes" xml:space="preserve">
          <source>(D deprecated) Using literal non-graphic (including control) characters in the source to refer to the ^FOO variables, like &lt;code&gt;$^X&lt;/code&gt; and &lt;code&gt;${^GLOBAL_PHASE}&lt;/code&gt; is now deprecated. (We use &lt;code&gt;^X&lt;/code&gt; and &lt;code&gt;^G&lt;/code&gt; here for legibility. They actually represent the non-printable control characters, code points 0x18 and 0x07, respectively; &lt;code&gt;^A&lt;/code&gt; would mean the control character whose code point is 0x01.) This only affects code like &lt;code&gt;$\cT&lt;/code&gt; , where &lt;code&gt;\cT&lt;/code&gt; is a control in the source code; &lt;code&gt;${&quot;\cT&quot;}&lt;/code&gt; and &lt;code&gt;$^T&lt;/code&gt; remain valid. Things that are non-controls and also not graphic are NO-BREAK SPACE and SOFT HYPHEN, which were previously only allowed for historical reasons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dc8e45a85b07c27a4332a53b4995a56c9f88e06" translate="yes" xml:space="preserve">
          <source>(D deprecated) You are now encouraged to use the explicitly quoted form if you wish to use an empty line as the terminator of the here-document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b744218457f994d25e6d43a4c5fa12f3a7b1c93d" translate="yes" xml:space="preserve">
          <source>(D deprecated) You are now encouraged to use the shorter *glob{IO} form to access the filehandle slot within a typeglob.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78d651187cb78635eb2229820aa5801319ef5a7a" translate="yes" xml:space="preserve">
          <source>(D deprecated) You assigned a non-&lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; value to &lt;code&gt;${^ENCODING}&lt;/code&gt; . This is deprecated; see &lt;code&gt;&lt;a href=&quot;perlvar#%24%7b%5eENCODING%7d&quot;&gt;${^ENCODING} in perlvar&lt;/a&gt;&lt;/code&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98b4fff1326134e5710d7269a09627ac4e0a2af7" translate="yes" xml:space="preserve">
          <source>(D deprecated) You assigned a reference to a scalar to &lt;code&gt;$/&lt;/code&gt; where the referenced item is not a positive integer. In older perls this &lt;b&gt;appeared&lt;/b&gt; to work the same as setting it to &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; but was in fact internally different, less efficient and with very bad luck could have resulted in your file being split by a stringified form of the reference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca7feb58917b45471832dc5fed064d810fe661a1" translate="yes" xml:space="preserve">
          <source>(D deprecated) You called a function whose use is deprecated. See the function's name in &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65700451b3161785219f723bd9d50bcf52fab3ec" translate="yes" xml:space="preserve">
          <source>(D deprecated) You defined a character name which contained a no-break space character. Change it to a regular space. Usually these names are defined in the &lt;code&gt;:alias&lt;/code&gt; import argument to &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; charnames&lt;/code&gt; , but they could be defined by a translator installed into &lt;code&gt;$^H{charnames}&lt;/code&gt; . See &lt;a href=&quot;charnames#CUSTOM-ALIASES&quot;&gt;CUSTOM ALIASES in charnames&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c7a7a1be46fb9a708270705853737171791e07e" translate="yes" xml:space="preserve">
          <source>(D deprecated) You have used the attributes pragma to modify the &quot;locked&quot; attribute on a code reference. The :locked attribute is obsolete, has had no effect since 5005 threads were removed, and will be removed in a future release of Perl 5.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cec8d12f13eeb1fc6bd140c80dcbd00a2311f89" translate="yes" xml:space="preserve">
          <source>(D deprecated) You have used the attributes pragma to modify the &quot;unique&quot; attribute on an array, hash or scalar reference. The :unique attribute has had no effect since Perl 5.8.8, and will be removed in a future release of Perl 5.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e02c1423037b1205275204842ae26e8bafb6846e" translate="yes" xml:space="preserve">
          <source>(D deprecated) You used &lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/tied&quot;&gt;tied&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/untie&quot;&gt;untie&lt;/a&gt;&lt;/code&gt; on a scalar but that scalar happens to hold a typeglob, which means its filehandle will be tied. If you mean to tie a handle, use an explicit * as in &lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie&lt;/a&gt; *$handle&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64e524bdec57acbc9bf2ad467be8f2f3305b0abd" translate="yes" xml:space="preserve">
          <source>(D deprecated) You used a declaration similar to &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $x if 0&lt;/code&gt; . There has been a long-standing bug in Perl that causes a lexical variable not to be cleared at scope exit when its declaration includes a false conditional. Some people have exploited this bug to achieve a kind of static variable. Since we intend to fix this bug, we don't want people relying on this behavior. You can achieve a similar static effect by declaring the variable in a separate block outside the function, eg</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8718adde330126a5b4580bfeb68ea2244f61fd52" translate="yes" xml:space="preserve">
          <source>(D deprecated) You wrote something like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ec1621e34a81b00ba558dcb776f48d504963336" translate="yes" xml:space="preserve">
          <source>(D deprecated) chdir() with no arguments is documented to change to $ENV{HOME} or $ENV{LOGDIR}. chdir(undef) and chdir('') share this behavior, but that has been deprecated. In future versions they will simply fail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="156ebc8e5ab3aa0daf420d1094d5f8233d63bd54" translate="yes" xml:space="preserve">
          <source>(D deprecated, regexp) The \C character class is deprecated, and will become a compile-time error in a future release of perl (tentatively v5.24). This construct allows you to match a single byte of what makes up a multi-byte single UTF8 character, and breaks encapsulation. It is currently also very buggy. If you really need to process the individual bytes, you probably want to convert your string to one where each underlying byte is stored as a character, with utf8::encode().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee8035c28be35cefb7d731d7241605895d498984" translate="yes" xml:space="preserve">
          <source>(D deprecated, regexp) You used a literal &lt;code&gt;&quot;{&quot;&lt;/code&gt; character in a regular expression pattern. You should change to use &lt;code&gt;&quot;\{&quot;&lt;/code&gt; instead, because a future version of Perl (tentatively v5.26) will consider this to be a syntax error. If the pattern delimiters are also braces, any matching right brace (&lt;code&gt;&quot;}&quot;&lt;/code&gt; ) should also be escaped to avoid confusing the parser, for example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3758194b11056ea33d8ab6ba7cd8a7322385edb4" translate="yes" xml:space="preserve">
          <source>(D deprecated, regexp) You used the indicated regular expression pattern modifier at least twice in a string of modifiers. It is deprecated to do this with this particular modifier, to allow future extensions to the Perl language.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bda2744613539234444703bee4898b3ffab826d" translate="yes" xml:space="preserve">
          <source>(D deprecated, syntax) The special variable &lt;code&gt;$#&lt;/code&gt; , deprecated in older perls, has been removed as of 5.10.0 and is no longer supported. You should use the printf/sprintf functions instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8544ee32166f03b9a8585880a823948aca56e421" translate="yes" xml:space="preserve">
          <source>(D deprecated, syntax) The special variable &lt;code&gt;$*&lt;/code&gt; , deprecated in older perls, has been removed as of 5.10.0 and is no longer supported. In previous versions of perl the use of &lt;code&gt;$*&lt;/code&gt; enabled or disabled multi-line matching within a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d78e71c917b1266cba9c956d93b2ec088c1c0e4c" translate="yes" xml:space="preserve">
          <source>(D deprecated, utf8) This message indicates a bug either in the Perl core or in XS code. Such code was trying to find out if a character, allegedly stored internally encoded as UTF-8, was of a given type, such as being punctuation or a digit. But the character was not encoded in legal UTF-8. The &lt;code&gt;%s&lt;/code&gt; is replaced by a string that can be used by knowledgeable people to determine what the type being checked against was. If &lt;code&gt;utf8&lt;/code&gt; warnings are enabled, a further message is raised, giving details of the malformation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e14793bdbda27b3b2c09bc2a9248fb22de194c58" translate="yes" xml:space="preserve">
          <source>(D io, deprecated) You used open() to associate a filehandle to a symbol (glob or scalar) that already holds a dirhandle. Although legal, this idiom might render your code confusing and is deprecated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="180bf7cb71bf234598edac3d98380d0dd2935f4a" translate="yes" xml:space="preserve">
          <source>(D io, deprecated) You used opendir() to associate a dirhandle to a symbol (glob or scalar) that already holds a filehandle. Although legal, this idiom might render your code confusing and is deprecated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="097c9d6e192483d08f9887c06cdb6266c9330d6d" translate="yes" xml:space="preserve">
          <source>(Deprecated.) &lt;code&gt;\C&lt;/code&gt; always matches a single octet, even if the source string is encoded in UTF-8 format, and the character to be matched is a multi-octet character. This is very dangerous, because it violates the logical character abstraction and can cause UTF-8 sequences to become malformed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="251b5e5df1fc2870671dba1afa24aaada9f1d8b4" translate="yes" xml:space="preserve">
          <source>(DoS) attacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50ee4ca91c19b7d8b0c5180b6f84913c40f717fc" translate="yes" xml:space="preserve">
          <source>(Does &lt;code&gt;LATIN CAPITAL LETTER A WITH ACUTE&lt;/code&gt; come before or after &lt;code&gt;LATIN CAPITAL LETTER A WITH GRAVE&lt;/code&gt; ?)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08923c52563a85f7e1a7a33445fca33472112360" translate="yes" xml:space="preserve">
          <source>(Don't worry about that &lt;code&gt;-&amp;gt;&lt;/code&gt; operator, it will be explained later.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91c2c66f2b0ea932e0eb6dee4a610749d0aa55d3" translate="yes" xml:space="preserve">
          <source>(Every SVish thing has a magic queue, and magic is an entry in that queue. This is how a single variable may participate in multiple forms of magic simultaneously. For instance, environment variables regularly have two forms at once: their %ENV magic and their taint magic. However, the magic which implements overloading is applied to the stashes, which are rarely used directly, thus should not slow down Perl.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e7a441f62736643adf38a029fb9ac13ba1638d5" translate="yes" xml:space="preserve">
          <source>(Exactly what separator character should be used, is gotten from &lt;code&gt;$Config::Config{'path_sep'}&lt;/code&gt; , via the &lt;a href=&quot;../../config&quot;&gt;Config&lt;/a&gt; module.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dc3bfae2e7614ab3027bb72f39abf1c5a8abcb4" translate="yes" xml:space="preserve">
          <source>(Expect a lot of errors during the both steps.) Now move it on your BOOKSHELF path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b7dc743e0e74ea5606a40947b3173424f3fe46d" translate="yes" xml:space="preserve">
          <source>(Experimental feature!) Some CPAN modules recommend additional, optional dependencies. These should generally be installed except in resource constrained environments. When this policy is true, recommended modules will be included with required modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb7cd36675076e1b3484ce0ca7109231a8d472ff" translate="yes" xml:space="preserve">
          <source>(Experimental feature!) Some CPAN modules suggest additional, optional dependencies. These 'suggest' dependencies provide enhanced operation. When this policy is true, suggested modules will be included with required modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f612db6e6169e8501c828fe715cc9c9a14e14600" translate="yes" xml:space="preserve">
          <source>(F) &lt;b&gt;-c&lt;/b&gt; or &lt;b&gt;--color&lt;/b&gt; were given, but Term::ANSIColor could not be loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="802251eb3ba25a36271e6cf779813235b59519b9" translate="yes" xml:space="preserve">
          <source>(F) &lt;code&gt;(?[...])&lt;/code&gt; cannot be used within the scope of a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; or with an &lt;code&gt;/l&lt;/code&gt; regular expression modifier, as that would require deferring to run-time the calculation of what it should evaluate to, and it is regex compile-time only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bb1860c01ca7f8054f9c2522796e8c6e61c274a" translate="yes" xml:space="preserve">
          <source>(F) &lt;code&gt;&lt;a href=&quot;functions/caller&quot;&gt;caller&lt;/a&gt;&lt;/code&gt; tried to set &lt;code&gt;@DB::args&lt;/code&gt; , but found it tied. Tying &lt;code&gt;@DB::args&lt;/code&gt; is not supported. (Before this error was added, it used to crash.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18e42a0e5c11f6429dde9578d1165194ce85be44" translate="yes" xml:space="preserve">
          <source>(F) &lt;code&gt;&lt;a href=&quot;functions/defined&quot;&gt;defined()&lt;/a&gt;&lt;/code&gt; is not usually right on hashes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a17f29cb861574aaa98f0c4654c638c2518ec8f" translate="yes" xml:space="preserve">
          <source>(F) &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next::method&lt;/a&gt;&lt;/code&gt; found no further instances of this method name in the remaining packages of the MRO of this class. If you don't want it throwing an exception, use &lt;code&gt;maybe::next::method&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next::can&lt;/a&gt;&lt;/code&gt;. See &lt;a href=&quot;mro&quot;&gt;mro&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cc9e0ba31f706bc70c638491a6cfee5de2fcaa4" translate="yes" xml:space="preserve">
          <source>(F) &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next::method&lt;/a&gt;&lt;/code&gt; needs to be called within the context of a real method in a real package, and it could not find such a context. See &lt;a href=&quot;mro&quot;&gt;mro&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="151798ac14f32a94194181c64aea0cf0ebec80ea" translate="yes" xml:space="preserve">
          <source>(F) &lt;code&gt;\N&lt;/code&gt; has two meanings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1887c1aa0134d44c271332655d1ef2202955c2a" translate="yes" xml:space="preserve">
          <source>(F) &lt;code&gt;\p&lt;/code&gt; and &lt;code&gt;\P&lt;/code&gt; are used to introduce a named Unicode property, as described in &lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt; and &lt;a href=&quot;perlre&quot;&gt;perlre&lt;/a&gt;. You used &lt;code&gt;\p&lt;/code&gt; or &lt;code&gt;\P&lt;/code&gt; in a regular expression without specifying the property name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a6d485bd23628acb5fcf9dd20889de198304223" translate="yes" xml:space="preserve">
          <source>(F) A &quot;goto&quot; statement was executed to jump into the middle of a foreach loop. You can't get there from here. See &lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c37f5bf31d2981891420b727a6aaaab2c62bc41" translate="yes" xml:space="preserve">
          <source>(F) A &quot;goto&quot; statement was executed to jump out of what might look like a block, except that it isn't a proper block. This usually occurs if you tried to jump out of a sort() block or subroutine, which is a no-no. See &lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b4d2012e3c4ce0c8309e9f6401face4fb10a0bc" translate="yes" xml:space="preserve">
          <source>(F) A &quot;last&quot; statement was executed to break out of the current block, except that there's this itty bitty problem called there isn't a current block. Note that an &quot;if&quot; or &quot;else&quot; block doesn't count as a &quot;loopish&quot; block, as doesn't a block given to sort(), map() or grep(). You can usually double the curlies to get the same effect though, because the inner curlies will be considered a block that loops once. See &lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69325ad43ffb0c64628e8cd6885ba99d15036779" translate="yes" xml:space="preserve">
          <source>(F) A &quot;next&quot; statement was executed to reiterate the current block, but there isn't a current block. Note that an &quot;if&quot; or &quot;else&quot; block doesn't count as a &quot;loopish&quot; block, as doesn't a block given to sort(), map() or grep(). You can usually double the curlies to get the same effect though, because the inner curlies will be considered a block that loops once. See &lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af75b8c21a1eef55d616d80d2cc3c205e6012c83" translate="yes" xml:space="preserve">
          <source>(F) A &quot;redo&quot; statement was executed to restart the current block, but there isn't a current block. Note that an &quot;if&quot; or &quot;else&quot; block doesn't count as a &quot;loopish&quot; block, as doesn't a block given to sort(), map() or grep(). You can usually double the curlies to get the same effect though, because the inner curlies will be considered a block that loops once. See &lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ca09e7b230780e358ee2bb34e644500c488010d" translate="yes" xml:space="preserve">
          <source>(F) A ()-group started with a count. A count is supposed to follow something: a template character or a ()-group. See &lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c32b9236db5bb11a68d743946d3e1a32c24689f" translate="yes" xml:space="preserve">
          <source>(F) A (?(condition)if-clause|else-clause) construct can have at most two branches (the if-clause and the else-clause). If you want one or both to contain alternation, such as using &lt;code&gt;this|that|other&lt;/code&gt; , enclose it in clustering parentheses:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8f945525497d71d2052e4052ec0e68214f10875" translate="yes" xml:space="preserve">
          <source>(F) A &lt;code&gt;\o&lt;/code&gt; must be followed immediately by a &lt;code&gt;{&lt;/code&gt; in double-quotish context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ea4ccbc5fbdbf4306411e82b830c9487e5c9151" translate="yes" xml:space="preserve">
          <source>(F) A DESTROY() method created a new reference to the object which is just being DESTROYed. Perl is confused, and prefers to abort rather than to create a dangling reference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32dd2cfdbe8c5bd6c8f2c1ffdf2d4411c9ddb6fa" translate="yes" xml:space="preserve">
          <source>(F) A constant value (perhaps declared using the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; constant&lt;/code&gt; pragma) is being dereferenced, but it amounts to the wrong type of reference. The message indicates the type of reference that was expected. This usually indicates a syntax error in dereferencing the constant value. See &lt;a href=&quot;perlsub#Constant-Functions&quot;&gt;Constant Functions in perlsub&lt;/a&gt; and &lt;a href=&quot;constant&quot;&gt;constant&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="157e2ac65a1e913c9c48982d2fc68fc6bce972b2" translate="yes" xml:space="preserve">
          <source>(F) A double-quoted string ended with &quot;\c&quot;, without the required control character name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f79a50f2879c6283702e3b4c6fa6a3da4656ef6" translate="yes" xml:space="preserve">
          <source>(F) A fatal error occurred while trying to fork while opening a pipeline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df45e7d7f5767d264c81575eb5a01868bd386117" translate="yes" xml:space="preserve">
          <source>(F) A forked child returned an incomprehensible message about its errno.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b203be8d16bebf483dfa3bf80da040707c8be13" translate="yes" xml:space="preserve">
          <source>(F) A format must be terminated by a line with a solitary dot. Perl got to the end of your file without finding such a line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b2b2fd2f2ee9c3703efb147c4de09badacd6ee4" translate="yes" xml:space="preserve">
          <source>(F) A function (or method) was called in a package which allows autoload, but there is no function to autoload. Most probable causes are a misprint in a function/method name or a failure to &lt;code&gt;AutoSplit&lt;/code&gt; the file, say, by doing &lt;code&gt;make install&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c5d2dee7a7145f48f3d90fc550364568849f4bc" translate="yes" xml:space="preserve">
          <source>(F) A list operator that has a filehandle or &quot;indirect object&quot; is not allowed to have a comma between that and the following arguments. Otherwise it'd be just another one of the arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19133a26c62a34feee5d7b63a029a6704f51e93c" translate="yes" xml:space="preserve">
          <source>(F) A method call must know in what package it's supposed to run. It ordinarily finds this out from the object reference you supply, but you didn't supply an object reference in this case. A reference isn't an object reference until it has been blessed. See &lt;a href=&quot;perlobj&quot;&gt;perlobj&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e4b96c0d94d9352166a16cceba6761445792213" translate="yes" xml:space="preserve">
          <source>(F) A named group of the form &lt;code&gt;(?'...')&lt;/code&gt; or &lt;code&gt;(?&amp;lt;...&amp;gt;)&lt;/code&gt; was missing the final closing quote or angle bracket. The &amp;lt;-- HERE shows whereabouts in the regular expression the problem was discovered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fee4f3834a7a9943af683561c67f82aaba537eac" translate="yes" xml:space="preserve">
          <source>(F) A named reference of the form &lt;code&gt;(?&amp;amp;...)&lt;/code&gt; was missing the final closing parenthesis after the name. The &amp;lt;-- HERE shows whereabouts in the regular expression the problem was discovered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9218537d0f1a8c52e1548de579fce7cfa072b4f5" translate="yes" xml:space="preserve">
          <source>(F) A named reference of the form &lt;code&gt;(?('...')...)&lt;/code&gt; or &lt;code&gt;(?(&amp;lt;...&amp;gt;)...)&lt;/code&gt; was missing the final closing quote or angle bracket after the name. The &amp;lt;-- HERE shows whereabouts in the regular expression the problem was discovered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adc273f5babbe3681047f382ff35a14d25a84a22" translate="yes" xml:space="preserve">
          <source>(F) A named reference of the form &lt;code&gt;(?P=...)&lt;/code&gt; was missing the final closing parenthesis after the name. The &amp;lt;-- HERE shows whereabouts in the regular expression the problem was discovered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec756f118a1399e7fd2d2f218d428f2a653f22c2" translate="yes" xml:space="preserve">
          <source>(F) A pack or unpack template has an opening '(' or '[' without its matching counterpart. See &lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a376eafcc4551f922b8d3a18d8c9ceddf3a13245" translate="yes" xml:space="preserve">
          <source>(F) A proposed regular expression extension has the character reserved but has not yet been written. The &amp;lt;-- HERE shows whereabouts in the regular expression the problem was discovered. See &lt;a href=&quot;perlre&quot;&gt;perlre&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0220dd07be4bbbd5a99f82eae67c6793cbb1ea44" translate="yes" xml:space="preserve">
          <source>(F) A regular expression comment must be terminated by a closing parenthesis. Embedded parentheses aren't allowed. See &lt;a href=&quot;perlre&quot;&gt;perlre&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a42e3ba6de5ab1700edfd03b7679fb5f5c8d8911" translate="yes" xml:space="preserve">
          <source>(F) A regular expression contained the &lt;code&gt;(?{ ... })&lt;/code&gt; zero-width assertion, but that construct is only allowed when the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; re 'eval'&lt;/code&gt; pragma is in effect. See &lt;a href=&quot;perlre#(%3f%7b-code-%7d)&quot;&gt;(?{ code }) in perlre&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba8ccdf4d7b6c15b936066d2d8a0bd9db1fe5323" translate="yes" xml:space="preserve">
          <source>(F) A regular expression ended with an incomplete extension (?. The &amp;lt;-- HERE shows whereabouts in the regular expression the problem was discovered. See &lt;a href=&quot;perlre&quot;&gt;perlre&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e05b265158e15d00be9e6b1442d6366cc9692789" translate="yes" xml:space="preserve">
          <source>(F) A required (or used) file must return a true value to indicate that it compiled correctly and ran its initialization code correctly. It's traditional to end such a file with a &quot;1;&quot;, though any true value would do. See &lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab2902a8ee1ae5020ad778fd817f6e080b75a2c6" translate="yes" xml:space="preserve">
          <source>(F) A sort comparison subroutine written in XS must return exactly one item. See &lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12f6344918aa8c751e78039a57485ef147c04692" translate="yes" xml:space="preserve">
          <source>(F) A string of a form &lt;code&gt;CORE::word&lt;/code&gt; was given to prototype(), but there is no builtin with the name &lt;code&gt;word&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77e356d795b7fc2049c0ae6ebcc66949ece949e9" translate="yes" xml:space="preserve">
          <source>(F) A subroutine invoked from an external package via call_sv() exited by calling exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="425a3fb6c5c012d21bfa1b61cea2a027f8698b39" translate="yes" xml:space="preserve">
          <source>(F) A subroutine using a signature received fewer arguments than required by the signature. The caller of the subroutine is presumably at fault. Inconveniently, this error will be reported at the location of the subroutine, not that of the caller.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac222b95a87ac69a521690bb9bf7a580edc11712" translate="yes" xml:space="preserve">
          <source>(F) A subroutine using a signature received more arguments than required by the signature. The caller of the subroutine is presumably at fault. Inconveniently, this error will be reported at the location of the subroutine, not that of the caller.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b348db01f83ad39c0609676fcd3fe30ab251dd15" translate="yes" xml:space="preserve">
          <source>(F) A subroutine using a slurpy hash parameter in its signature received an odd number of arguments to populate the hash. It requires the arguments to be paired, with the same number of keys as values. The caller of the subroutine is presumably at fault. Inconveniently, this error will be reported at the location of the subroutine, not that of the caller.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eefd360cf8752d8d0e28e32d12b950ae17623e27" translate="yes" xml:space="preserve">
          <source>(F) A subroutine was not declared correctly. See &lt;a href=&quot;perlsub&quot;&gt;perlsub&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ef13f47abac2ffd25adb0dbd93357986bef6726" translate="yes" xml:space="preserve">
          <source>(F) A symbol was passed to something wanting a filehandle, but the symbol has no filehandle associated with it. Perhaps you didn't do an open(), or did it in another package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39be2f04b2ec00aab3d01351f8d070b6cac0943b" translate="yes" xml:space="preserve">
          <source>(F) A tied array claimed to have a negative number of elements, which is not possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9163ff8236f77c7c1df1301c9bbca93ca29e31da" translate="yes" xml:space="preserve">
          <source>(F) A type cannot be forced to have both big-endian and little-endian byte-order at the same time, so this combination of modifiers is not allowed. See &lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc2729005e0cdd03f316feedb0ad56957d21d789" translate="yes" xml:space="preserve">
          <source>(F) A value used as either a hard reference or a symbolic reference must be a defined value. This helps to delurk some insidious errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3da1bf1b0e9d10d5c3b75fa5eb70bb5535f9d275" translate="yes" xml:space="preserve">
          <source>(F) A version number did not meet the &quot;lax&quot; criteria for versions. A &quot;lax&quot; version number is a positive decimal number (integer or decimal-fraction) without exponentiation or else a dotted-decimal v-string. If the v-string has fewer than three components, it must have a leading 'v' character. Otherwise, the leading 'v' is optional. Both decimal and dotted-decimal versions may have a trailing &quot;alpha&quot; component separated by an underscore character after a fractional or dotted-decimal component. The parenthesized text indicates which criteria were not met. See the &lt;a href=&quot;version&quot;&gt;version&lt;/a&gt; module for more details on allowed version formats.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9724072b2a7c2e239e2c204f194230042be4ac29" translate="yes" xml:space="preserve">
          <source>(F) A version number did not meet the &quot;strict&quot; criteria for versions. A &quot;strict&quot; version number is a positive decimal number (integer or decimal-fraction) without exponentiation or else a dotted-decimal v-string with a leading 'v' character and at least three components. The parenthesized text indicates which criteria were not met. See the &lt;a href=&quot;version&quot;&gt;version&lt;/a&gt; module for more details on allowed version formats.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13a2de8c9af92217641de65ec35efeb24e9af795" translate="yes" xml:space="preserve">
          <source>(F) Alphanumerics immediately following the closing delimiter of a regular expression pattern are interpreted by Perl as modifier flags for the regex. One of the ones you specified is invalid. One way this can happen is if you didn't put in white space between the end of the regex and a following alphanumeric operator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="019ca3f78247f71bbd225df4e235596bac9f1aad" translate="yes" xml:space="preserve">
          <source>(F) An &lt;code&gt;(?R)&lt;/code&gt; or &lt;code&gt;(?0)&lt;/code&gt; sequence in a regular expression was missing the final parenthesis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efaa8aa95b64a2900ce028dfae5e7f654509038d" translate="yes" xml:space="preserve">
          <source>(F) An XS module tried to call &lt;code&gt;mro_method_changed_in&lt;/code&gt; on a hash that was not attached to the symbol table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bed907b49f827cef25144c18ba51b98dc6c3af9" translate="yes" xml:space="preserve">
          <source>(F) An ancient error message that almost nobody ever runs into anymore. But before sort was a keyword, people sometimes used it as a filehandle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="119cf48d6663598e98ef07cf8d471cda483b09d1" translate="yes" xml:space="preserve">
          <source>(F) An argument to pack(&quot;w&quot;,...) was negative. The BER compressed integer format can only be used with positive integers. See &lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e71549a18f9ba491116e9bb1c08ef0b9ae4cff8" translate="yes" xml:space="preserve">
          <source>(F) An argument to pack(&quot;w&quot;,...) was not an integer. The BER compressed integer format can only be used with positive integers, and you attempted to compress something else. See &lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d98574242515b5b7163081f0fa79c62408185815" translate="yes" xml:space="preserve">
          <source>(F) An argument to pack(&quot;w&quot;,...) was too large to compress. The BER compressed integer format can only be used with positive integers, and you attempted to compress a very large number (&amp;gt; 1e308). See &lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70ade651e727668a156e21cd9dfa1fb3c35f0ca9" translate="yes" xml:space="preserve">
          <source>(F) An argument to unpack(&quot;w&quot;,...) was incompatible with the BER compressed integer format and could not be converted to an integer. See &lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c69006eda9a9d24e0f077f79c4a5662ec62447f8" translate="yes" xml:space="preserve">
          <source>(F) An attempt was made to perform an overloaded operation for which no handler was defined. While some handlers can be autogenerated in terms of other handlers, there is no default handler for any operation, unless the &lt;code&gt;fallback&lt;/code&gt; overloading key is specified to be true. See &lt;a href=&quot;overload&quot;&gt;overload&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20cc458e6a4191ed432c8cf00b0da1264e1aa279" translate="yes" xml:space="preserve">
          <source>(F) An attempt was made to specify an entry in an overloading table that doesn't resolve to a valid subroutine. See &lt;a href=&quot;overload&quot;&gt;overload&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd601bedca74f3db7bc3b57ceee8379ca7ea7ef0" translate="yes" xml:space="preserve">
          <source>(F) An attempt was made to specify an entry in an overloading table that doesn't somehow point to a valid subroutine. See &lt;a href=&quot;overload&quot;&gt;overload&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dedc067ddb2d1bebadc58c6cce432a4b8834f3b0" translate="yes" xml:space="preserve">
          <source>(F) An error issued by the &lt;code&gt;warnings&lt;/code&gt; pragma. You specified a warnings category that is unknown to perl at this point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0118f8c9767d9e5b01a7059e7aa016fdac697bd" translate="yes" xml:space="preserve">
          <source>(F) An error occurred during the implicit output invoked by the &lt;code&gt;-p&lt;/code&gt; command-line switch. (This output goes to STDOUT unless you've redirected it with select().)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28337e65369010f6e852037453f68ab1c8643738" translate="yes" xml:space="preserve">
          <source>(F) An error peculiar to EBCDIC. Internally, v-strings are stored as Unicode code points, and encoded in EBCDIC as UTF-EBCDIC. The UTF-EBCDIC encoding is limited to code points no larger than 2147483647 (0x7FFFFFFF).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f2fc6db7df43da1ae5b47f8986c3b65dc0cbf52" translate="yes" xml:space="preserve">
          <source>(F) An error peculiar to OS/2. PERLLIB_PREFIX should be of the form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93d11768032e8dffe6c5ecb18ca73b08809aad0f" translate="yes" xml:space="preserve">
          <source>(F) An error peculiar to OS/2. PERL_SH_DIR is the directory to find the &lt;code&gt;sh&lt;/code&gt; -shell in. See &quot;PERL_SH_DIR&quot; in &lt;a href=&quot;perlos2&quot;&gt;perlos2&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0636f154b75a3d28e3bd0d2799a1e522315707c7" translate="yes" xml:space="preserve">
          <source>(F) An error peculiar to VMS. Because Perl may have to deal with file specifications in either VMS or Unix syntax, it converts them to a single form when it must operate on them directly. Either you've passed an invalid file specification to Perl, or you've found a case the conversion routines don't handle. Drat.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2afff57a450917916c8446b2407da33c57cece3" translate="yes" xml:space="preserve">
          <source>(F) An error peculiar to VMS. Perl does its own command line redirection, and couldn't open the file specified after '&amp;gt;' or '&amp;gt;&amp;gt;' on the command line for writing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d80b27eba95f26dc237cd509381f537e48de8ba5" translate="yes" xml:space="preserve">
          <source>(F) An error peculiar to VMS. Perl does its own command line redirection, and couldn't open the file specified after '&amp;lt;' on the command line for reading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="152db267d71d558b7c5a249f5ca22b54eae8873c" translate="yes" xml:space="preserve">
          <source>(F) An error peculiar to VMS. Perl does its own command line redirection, and couldn't open the file specified after '2&amp;gt;' or '2&amp;gt;&amp;gt;' on the command line for writing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4f6dac326bf792c1fb14b39b6077d1968b7f2c0" translate="yes" xml:space="preserve">
          <source>(F) An error peculiar to VMS. Perl does its own command line redirection, and found that STDIN was a pipe, and that you also tried to redirect STDIN using '&amp;lt;'. Only one STDIN stream to a customer, please.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8351ae3bec7b844a35b31bdfffd6c70828cb90f0" translate="yes" xml:space="preserve">
          <source>(F) An error peculiar to VMS. Perl does its own command line redirection, and thinks you tried to redirect stdout both to a file and into a pipe to another command. You need to choose one or the other, though nothing's stopping you from piping into a program or Perl script which 'splits' output into two streams, such as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a994f696f8cd4930e9f23d878db88e256d1dd4c" translate="yes" xml:space="preserve">
          <source>(F) An error peculiar to VMS. Perl handles its own command line redirection, and found a '&amp;gt;' or a '&amp;gt;&amp;gt;' on the command line, but can't find the name of the file to which to write data destined for stdout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="553e65412cda77205bd2f7e3baeeaa433f60d81e" translate="yes" xml:space="preserve">
          <source>(F) An error peculiar to VMS. Perl handles its own command line redirection, and found a '&amp;lt;' on the command line, but can't find the name of the file from which to read data for stdin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45c95665fd2354147037182f453143c27164af66" translate="yes" xml:space="preserve">
          <source>(F) An error peculiar to VMS. Perl handles its own command line redirection, and found a '2&amp;gt;' or a '2&amp;gt;&amp;gt;' on the command line, but can't find the name of the file to which to write data destined for stderr.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf733b78419d62bfa22dd17cbbf11f4d8aa99a99" translate="yes" xml:space="preserve">
          <source>(F) An error peculiar to VMS. Perl handles its own command line redirection, and found a '|' at the end of the command line, so it doesn't know where you want to pipe the output from this command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebe0c22eb2a59bf4e14a1b6b09c8d2e42c2840bf" translate="yes" xml:space="preserve">
          <source>(F) An error peculiar to VMS. Perl handles its own command line redirection, and found a lone '&amp;gt;' at the end of the command line, so it doesn't know where you wanted to redirect stdout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aa1cda2f90080c8b2440458b6fe6572afb3c1d9" translate="yes" xml:space="preserve">
          <source>(F) An extension is attempting to insert text into the current parse (using &lt;a href=&quot;perlapi#lex_stuff_pvn&quot;&gt;lex_stuff_pvn&lt;/a&gt; or similar), but tried to insert a character that couldn't be part of the current input. This is an inherent pitfall of the stuffing mechanism, and one of the reasons to avoid it. Where it is necessary to stuff, stuffing only plain ASCII is recommended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="232297e1a3ced4a0a64765941bd45ffc2c271b72" translate="yes" xml:space="preserve">
          <source>(F) An extension using the keyword plugin mechanism violated the plugin API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b0f8a72abec6229156502ca05c227abc24ea69c" translate="yes" xml:space="preserve">
          <source>(F) An ioctl() or fcntl() returned more than Perl was bargaining for. Perl guesses a reasonable buffer size, but puts a sentinel byte at the end of the buffer just in case. This sentinel byte got clobbered, and Perl assumes that memory is now corrupted. See &lt;a href=&quot;functions/ioctl&quot;&gt;ioctl&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e248a9c37d413f521440a18ebb64fe461da21865" translate="yes" xml:space="preserve">
          <source>(F) An object with a &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr&lt;/a&gt;&lt;/code&gt; overload was used as part of a match, but the overloaded operation didn't return a compiled regexp. See &lt;a href=&quot;overload&quot;&gt;overload&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b8767c3628ddf99384b821638b91c546bef448f" translate="yes" xml:space="preserve">
          <source>(F) An object with an overloaded dereference operator was dereferenced, but the overloaded operation did not return a reference. See &lt;a href=&quot;overload&quot;&gt;overload&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30124c0821e16e60b0caa226c36deca290c4518a" translate="yes" xml:space="preserve">
          <source>(F) An unknown command line option was given.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb297e04197d5c9e328cb2aa28a991cabe2a8de5" translate="yes" xml:space="preserve">
          <source>(F) An untrapped exception was raised while executing a BEGIN subroutine. Compilation stops immediately and the interpreter is exited.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e182364d97b2a34d238bf505748d3c310554d32b" translate="yes" xml:space="preserve">
          <source>(F) An untrapped exception was raised while executing a UNITCHECK, CHECK, INIT, or END subroutine. Processing of the remainder of the queue of such routines has been prematurely ended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dff694945aa4b21e95380871c5bfa0fe1d691405" translate="yes" xml:space="preserve">
          <source>(F) And you probably never will, because you probably don't have the sources to your kernel, and your vendor probably doesn't give a rip about what you want. Your best bet is to put a setuid C wrapper around your script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e094656858fc9a75ae1a44f05d8374439a813537" translate="yes" xml:space="preserve">
          <source>(F) Apparently you've been programming in &lt;b&gt;csh&lt;/b&gt; too much. Variables are always mentioned with the $ in Perl, unlike in the shells, where it can vary from one line to the next.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f19a47fbea4f43ec1ab0ece1e98b5e3d1b80def" translate="yes" xml:space="preserve">
          <source>(F) Assigning to &lt;code&gt;\(%hash)&lt;/code&gt; is not supported. If you meant to make %hash refer to some other hash, use &lt;code&gt;\%hash = \%other_hash&lt;/code&gt; . If you want to make the elements of %hash into aliases of the scalars referenced on the right-hand side, use a hash slice: &lt;code&gt;\@hash{@keys} = @those_scalar_refs&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6ddc7fd522c688dbba7ed0dd60a66a95354aeba" translate="yes" xml:space="preserve">
          <source>(F) Assigning to &lt;code&gt;\&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;(@array)&lt;/code&gt; or &lt;code&gt;\(&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt; @array)&lt;/code&gt; is not supported, as it is not clear exactly what it should do. If you meant to make @array refer to some other array, use &lt;code&gt;\@array = \@other_array&lt;/code&gt; . If you want to make the elements of @array aliases of the scalars referenced on the right-hand side, use &lt;code&gt;\(@array) = @scalar_refs&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="495c2e9fe9f03e2366c1320e975bf6982ff08b50" translate="yes" xml:space="preserve">
          <source>(F) Assignment to &lt;code&gt;$[&lt;/code&gt; is now strictly circumscribed, and interpreted as a compiler directive. You may say only one of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01ad3f4624a8a59f3446263d695004964319ee71" translate="yes" xml:space="preserve">
          <source>(F) Between the brackets enclosing a numeric repeat count only digits are permitted. See &lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8581e70d690d0dbb5a2c68eb9f50cba9fa032f85" translate="yes" xml:space="preserve">
          <source>(F) Certain operations are deemed to be too insecure for a setuid or setgid script to even be allowed to attempt. Generally speaking there will be another way to do what you want that is, if not secure, at least securable. See &lt;a href=&quot;perlsec&quot;&gt;perlsec&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9237604ce7080f8c1b08f30e36b602a2c1874fbb" translate="yes" xml:space="preserve">
          <source>(F) Certain types of SVs, in particular real symbol table entries (typeglobs), can't be forced to stop being what they are. So you can't say things like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c56bb1dc57913c736253a9b60b0b11d3b2033590" translate="yes" xml:space="preserve">
          <source>(F) Configure couldn't find the crypt() function on your machine, probably because your vendor didn't supply it, probably because they think the U.S. Government thinks it's a secret, or at least that they will continue to pretend that it is. And if you quote me on that, I will deny it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10924735553e0c754e1e680bd25e9c639ddf1729" translate="yes" xml:space="preserve">
          <source>(F) Configure didn't find anything resembling the setregid() call for your system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfc494e73351f6ca2c70cd5dd39b866790076314" translate="yes" xml:space="preserve">
          <source>(F) Configure didn't find anything resembling the setreuid() call for your system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b383189415d7b4124129eea6eb2937736bdaaa0" translate="yes" xml:space="preserve">
          <source>(F) Creating a new thread inside the &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt; operator is not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a435e299c82194470e95dd670fa1055afe13e2db" translate="yes" xml:space="preserve">
          <source>(F) Currently the implementation of &quot;state&quot; only permits the initialization of scalar variables in scalar context. Re-write &lt;code&gt;state ($a) = 42&lt;/code&gt; as &lt;code&gt;state $a = 42&lt;/code&gt; to change from list to scalar context. Constructions such as &lt;code&gt;state (@a) = foo()&lt;/code&gt; will be supported in a future perl release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f449dbab5a82a9f8317a24c392b97fa4a5ff93e7" translate="yes" xml:space="preserve">
          <source>(F) For ordinary real numbers, you can't take the logarithm of a negative number or zero. There's a Math::Complex package that comes standard with Perl, though, if you really want to do that for the negative numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da165a3ef31c77afdd97cd2380c5a8af4b546617" translate="yes" xml:space="preserve">
          <source>(F) For ordinary real numbers, you can't take the square root of a negative number. There's a Math::Complex package that comes standard with Perl, though, if you really want to do that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="556a96532740ab16aba70228a3202ee677f94f16" translate="yes" xml:space="preserve">
          <source>(F) Fully qualified variable names are not allowed in &quot;our&quot; declarations, because that doesn't make much sense under existing rules. Such syntax is reserved for future extensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36f289ac5cbd77466229f2ceea2a98756135e79b" translate="yes" xml:space="preserve">
          <source>(F) Group names must follow the rules for perl identifiers, meaning they must start with a non-digit word character. A common cause of this error is using (?&amp;amp;0) instead of (?0). See &lt;a href=&quot;perlre&quot;&gt;perlre&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a896705d373c6881753065d405d900cd5b3054b0" translate="yes" xml:space="preserve">
          <source>(F) If a closure has attributes, the subroutine passed to an attribute handler is the prototype that is cloned when a new closure is created. This subroutine cannot be called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2465da176e92f8d3a50b41cf3d9962d57c461e32" translate="yes" xml:space="preserve">
          <source>(F) If you assign to a conditional operator, the 2nd and 3rd arguments must either both be scalars or both be lists. Otherwise Perl won't know which context to supply to the right side.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf2e4492175322af3c85bb164ea40aacca21a086" translate="yes" xml:space="preserve">
          <source>(F) In &lt;code&gt;\c&lt;i&gt;X&lt;/i&gt;&lt;/code&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e757b2deeb7c787117cb40c8364356345efd135b" translate="yes" xml:space="preserve">
          <source>(F) In a here document construct like &lt;code&gt;&amp;lt;&amp;lt;FOO&lt;/code&gt;, the label &lt;code&gt;FOO&lt;/code&gt; is too long for Perl to handle. You have to be seriously twisted to write code that triggers this error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fed5ca1c1b737c576dea708e0cb25e78a6a2a6c4" translate="yes" xml:space="preserve">
          <source>(F) In a regular expression, there was a non-hexadecimal character where a hex one was expected, like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="077bd85bd2f56c2654b65d4da795d14c88c49760" translate="yes" xml:space="preserve">
          <source>(F) In a regular expression, there was a non-octal character where an octal one was expected, like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23b8f7cc22b4ec684f7c5cc3312a4275e9e503ff" translate="yes" xml:space="preserve">
          <source>(F) In a regular expression, you had a &lt;code&gt;\g&lt;/code&gt; that wasn't followed by a proper group reference. In the case of &lt;code&gt;\g{&lt;/code&gt; , the closing brace is missing; otherwise the &lt;code&gt;\g&lt;/code&gt; must be followed by an integer. Fix the pattern and retry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d77767f37ba2459f46c88c0a9cba7c4fda76df1e" translate="yes" xml:space="preserve">
          <source>(F) In a regular expression, you said something like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e57c48c333c0cabe935bcb344780fa7c6487e71" translate="yes" xml:space="preserve">
          <source>(F) In a subroutine signature, you put something after a slurpy (array or hash) parameter. The slurpy parameter takes all the available arguments, so there can't be any left to fill later parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc497f6fda1b2f2a22f57da56791d99751535819" translate="yes" xml:space="preserve">
          <source>(F) In a subroutine signature, you wrote something like &quot;$a = undef, $b&quot;, making an earlier parameter optional and a later one mandatory. Parameters are filled from left to right, so it's impossible for the caller to omit an earlier one and pass a later one. If you want to act as if the parameters are filled from right to left, declare the rightmost optional and then shuffle the parameters around in the subroutine's body.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="122b0f1eda1e12b7a727cc97009ff0cf397aa5c4" translate="yes" xml:space="preserve">
          <source>(F) In a subroutine signature, you wrote something like &quot;$a =&quot;, making a named optional parameter without a default value. A nameless optional parameter is permitted to have no default value, but a named one must have a specific default. You probably want &quot;$a = undef&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4aea4116c26c14c418ee5888b5586bee375bffd" translate="yes" xml:space="preserve">
          <source>(F) It makes no sense to test the current stat buffer for symbolic linkhood if the last stat that wrote to the stat buffer already went past the symlink to get to the real file. Use an actual filename instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="368db372d949e3066c2d6f88ed17a40278ae4026" translate="yes" xml:space="preserve">
          <source>(F) Lexically scoped subroutines are not yet implemented. Don't try that yet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51539242a3127dd871186e85e0bbfe8c32c75011" translate="yes" xml:space="preserve">
          <source>(F) Lexically scoped subroutines aren't in a package, so it doesn't make sense to try to declare one with a package qualifier on the front.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79b7e9c7ea4bf0a8890321d992c87ea909fe73f3" translate="yes" xml:space="preserve">
          <source>(F) Lexically scoped variables aren't in a package, so it doesn't make sense to try to declare one with a package qualifier on the front. Use local() if you want to localize a package variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4e405274053b0eb95f91de966f55e55b43bd22b" translate="yes" xml:space="preserve">
          <source>(F) Lexing code supplied by an extension violated the lexer's API in a detectable way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aa9ed13f32c61b953e0eac6125269159cbba79e" translate="yes" xml:space="preserve">
          <source>(F) List assignment to %ENV is not supported on some systems, notably VMS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0565eac594f36fd1e81012c09d8022b08418626" translate="yes" xml:space="preserve">
          <source>(F) Lookbehind is allowed only for subexpressions whose length is fixed and known at compile time. For positive lookbehind, you can use the &lt;code&gt;\K&lt;/code&gt; regex construct as a way to get the equivalent functionality. See &lt;a href=&quot;perlre#(%3f%3c%3dpattern)-%5cK&quot;&gt;(?&amp;lt;=pattern) \K in perlre&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dfe4c0625d1be939b5ad92d07e1863208203853" translate="yes" xml:space="preserve">
          <source>(F) Missing right brace in &lt;code&gt;\x{...}&lt;/code&gt; , &lt;code&gt;\p{...}&lt;/code&gt; , &lt;code&gt;\P{...}&lt;/code&gt; , or &lt;code&gt;\N{...}&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5b08353bc14c504a2e3929aee6f5dc215ab2873" translate="yes" xml:space="preserve">
          <source>(F) Named Unicode character escapes (&lt;code&gt;\N{...}&lt;/code&gt; ) may return a multi-character sequence. Even though a character class is supposed to match just one character of input, perl will match the whole thing correctly, except when the class is inverted (&lt;code&gt;[^...]&lt;/code&gt;), or the escape is the beginning or final end point of a range. The mathematically logical behavior for what matches when inverting is very different from what people expect, so we have decided to forbid it. Similarly unclear is what should be generated when the &lt;code&gt;\N{...}&lt;/code&gt; is used as one of the end points of the range, such as in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1a9e815d6e00a2cedf919240bf9b0248c9b7e13" translate="yes" xml:space="preserve">
          <source>(F) Named Unicode character escapes (&lt;code&gt;\N{...}&lt;/code&gt; ) may return a zero-length sequence. Such an escape was used in an extended character class, i.e. &lt;code&gt;(?[...])&lt;/code&gt; , which is not permitted. Check that the correct escape has been used, and the correct charnames handler is in scope. The &amp;lt;-- HERE shows whereabouts in the regular expression the problem was discovered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e60d7922e3c4f1f88115e714bb7e2c6998154b1b" translate="yes" xml:space="preserve">
          <source>(F) On some platforms, notably Windows, the three-or-more-arguments form of &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; does not support pipes, such as &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;($pipe, '|-', @args)&lt;/code&gt; . Use the two-argument &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;($pipe, '|prog arg1 arg2...')&lt;/code&gt; form instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6290bce42016329c13366674c1ed9a1587042900" translate="yes" xml:space="preserve">
          <source>(F) One (or both) of the numeric arguments to the range operator &quot;..&quot; are outside the range which can be represented by integers internally. One possible workaround is to force Perl to use magical string increment by prepending &quot;0&quot; to your numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dde9ebdf50c7e98f1be7e2aa211c7a180aaea82d" translate="yes" xml:space="preserve">
          <source>(F) Only a bare module name is allowed as the first argument to a &quot;use&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a6af84bbe13338ab1bfad78c53e154d3fac7c4f" translate="yes" xml:space="preserve">
          <source>(F) Only a limited number of constructs can be used as the argument to a reference constructor on the left-hand side of an assignment, and what you used was not one of them. See &lt;a href=&quot;perlref#Assigning-to-References&quot;&gt;Assigning to References in perlref&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b0f0537fd5ee14f3a34ac5bac25b8f1d8f30693" translate="yes" xml:space="preserve">
          <source>(F) Only certain characters are valid for character names. The indicated one isn't. See &lt;a href=&quot;charnames#CUSTOM-ALIASES&quot;&gt;CUSTOM ALIASES in charnames&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f60251d25cae11ba47f647e1c8b77aae04440c45" translate="yes" xml:space="preserve">
          <source>(F) Only hard references are allowed by &quot;strict refs&quot;. Symbolic references are disallowed. See &lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9a92f699b0543260cc897ee911a79932615fb48" translate="yes" xml:space="preserve">
          <source>(F) Only hard references may be blessed. This is how Perl &quot;enforces&quot; encapsulation of objects. See &lt;a href=&quot;perlobj&quot;&gt;perlobj&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a00e14644a713e5cdbb1e9d27cf6c478e6362b00" translate="yes" xml:space="preserve">
          <source>(F) Only scalar, array, and hash variables may be declared as &quot;my&quot;, &quot;our&quot; or &quot;state&quot; variables. They must have ordinary identifiers as names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f14803dbb7e35c8db60af21bb50426e030686f1" translate="yes" xml:space="preserve">
          <source>(F) Parsing code supplied by an extension violated the parser's API in a detectable way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5affb372add320566fe6ad14ebab2e2e12397a80" translate="yes" xml:space="preserve">
          <source>(F) Perhaps you modified the iterated array within the loop? This error is typically caused by code like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8013bee375f6196594cf6c15598dab86cf5c3ee9" translate="yes" xml:space="preserve">
          <source>(F) Perl aborted due to too high a number of signals pending. This usually indicates that your operating system tried to deliver signals too fast (with a very high priority), starving the perl process from resources it would need to reach a point where it can process signals safely. (See &lt;a href=&quot;perlipc#Deferred-Signals-(Safe-Signals)&quot;&gt;Deferred Signals (Safe Signals) in perlipc&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1424eedfdecb62c50967917759ecf557dd443fa0" translate="yes" xml:space="preserve">
          <source>(F) Perl can't peek at the stdio buffer of filehandles when it doesn't know about your kind of stdio. You'll have to use a filename instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a0506e6f1364819d092c08f391edd21c10d8907" translate="yes" xml:space="preserve">
          <source>(F) Perl could not compile a file specified in a &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; statement. Perl uses this generic message when none of the errors that it encountered were severe enough to halt compilation immediately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b4eb689306ed0b40d84fe921ff940c3ae7f5ead" translate="yes" xml:space="preserve">
          <source>(F) Perl could not figure out what you meant inside this construct; this notifies you that it is giving up trying.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82a19ededf6ff54d754825de95e764bf77b68bf5" translate="yes" xml:space="preserve">
          <source>(F) Perl detected an attempt to return illegal lvalues (such as temporary or readonly values) from a subroutine used as an lvalue. This is not allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddf975641e419fa01e68aaa4b88abe8d8dce90f0" translate="yes" xml:space="preserve">
          <source>(F) Perl detected tainted data when trying to compile a regular expression that contains a call to a user-defined character property function, i.e. &lt;code&gt;\p{IsFoo}&lt;/code&gt; or &lt;code&gt;\p{InFoo}&lt;/code&gt; . See &lt;a href=&quot;perlunicode#User-Defined-Character-Properties&quot;&gt;User-Defined Character Properties in perlunicode&lt;/a&gt; and &lt;a href=&quot;perlsec&quot;&gt;perlsec&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b67ee1da1a857797ceb4d4c4ccb0a4221bed6778" translate="yes" xml:space="preserve">
          <source>(F) Perl detected tainted data when trying to compile a regular expression that contains the &lt;code&gt;(?{ ... })&lt;/code&gt; zero-width assertion, which is unsafe. See &lt;a href=&quot;perlre#(%3f%7b-code-%7d)&quot;&gt;(?{ code }) in perlre&lt;/a&gt;, and &lt;a href=&quot;perlsec&quot;&gt;perlsec&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb4cb464240a073fb801741505b79c52562d5c7c" translate="yes" xml:space="preserve">
          <source>(F) Perl found a &lt;code&gt;BEGIN {}&lt;/code&gt; subroutine (or a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; directive, which implies a &lt;code&gt;BEGIN {}&lt;/code&gt; ) after one or more compilation errors had already occurred. Since the intended environment for the &lt;code&gt;BEGIN {}&lt;/code&gt; could not be guaranteed (due to the errors), and since subsequent code likely depends on its correct operation, Perl just gave up.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="713df0713ce6f47f431cda711ca257822204a66a" translate="yes" xml:space="preserve">
          <source>(F) Perl limits identifiers (names for variables, functions, etc.) to about 250 characters for simple names, and somewhat more for compound names (like &lt;code&gt;$A::B&lt;/code&gt; ). You've exceeded Perl's limits. Future versions of Perl are likely to eliminate these arbitrary limitations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ae0011661bed30eceefad7df087ff51369677da" translate="yes" xml:space="preserve">
          <source>(F) Perl limits the representation of decimal numbers in programs to about 250 characters. You've exceeded that length. Future versions of Perl are likely to eliminate this arbitrary limitation. In the meantime, try using scientific notation (e.g. &quot;1e6&quot; instead of &quot;1_000_000&quot;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5b840e41f6ff6070f46090c02d883a992eaa0f3" translate="yes" xml:space="preserve">
          <source>(F) Perl normally treats carriage returns in the program text as it would any other whitespace, which means you should never see this error when Perl was built using standard options. For some reason, your version of Perl appears to have been built without this support. Talk to your Perl administrator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82621ee82c484b2b72e29dc0e0639ca058487f55" translate="yes" xml:space="preserve">
          <source>(F) Perl strings can stretch over multiple lines. This message means that the closing delimiter was omitted. Because bracketed quotes count nesting levels, the following is missing its final parenthesis:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96929efe9b501ad98a917d3909aaaa8dddc81e82" translate="yes" xml:space="preserve">
          <source>(F) Perl supports a maximum of only 14 args to syscall().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98a0bc4c637fda7278ea3aff2c9d1649fa09539f" translate="yes" xml:space="preserve">
          <source>(F) Perl thought it was reading UTF-16 encoded character data but while doing it Perl met a malformed Unicode surrogate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d6cbf7e44f592a3012b24898530dc29ea6d4050" translate="yes" xml:space="preserve">
          <source>(F) Perl tried to calculate the method resolution order (MRO) of a package, but failed because the package stash has no name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eddea5ab02b126c5934b8b141dba9fa2d43326ed" translate="yes" xml:space="preserve">
          <source>(F) Perl tried to compile a regular expression containing the &lt;code&gt;(?{ ... })&lt;/code&gt; zero-width assertion at run time, as it would when the pattern contains interpolated values. Since that is a security risk, it is not allowed. If you insist, you may still do this by using the &lt;code&gt;re 'eval'&lt;/code&gt; pragma or by explicitly building the pattern from an interpolated string at run time and using that in an eval(). See &lt;a href=&quot;perlre#(%3f%7b-code-%7d)&quot;&gt;(?{ code }) in perlre&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9677574c9a0054313726f995d52bce85d90eff97" translate="yes" xml:space="preserve">
          <source>(F) Perl was looking for a number but found nothing that looked like a number. This happens, for example with &lt;code&gt;\o{}&lt;/code&gt; , with no number between the braces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44d3567532282b8855a809aa48487910b1684b8e" translate="yes" xml:space="preserve">
          <source>(F) Perl was trying to evaluate a reference to a &quot;typeglob&quot; (that is, a symbol table entry that looks like &lt;code&gt;*foo&lt;/code&gt; ), but found a reference to something else instead. You can use the ref() function to find out what kind of ref it really was. See &lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b4cf3a03768e42e762d100463b41b9fd37ad125" translate="yes" xml:space="preserve">
          <source>(F) Perl was trying to evaluate a reference to a code value (that is, a subroutine), but found a reference to something else instead. You can use the ref() function to find out what kind of ref it really was. See also &lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c737a6ab78282ed7d2c8321fed26c58c3fa29e0" translate="yes" xml:space="preserve">
          <source>(F) Perl was trying to evaluate a reference to a hash value, but found a reference to something else instead. You can use the ref() function to find out what kind of ref it really was. See &lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="686c750b21313a854366a3dadba23a358b2f182a" translate="yes" xml:space="preserve">
          <source>(F) Perl was trying to evaluate a reference to a scalar value, but found a reference to something else instead. You can use the ref() function to find out what kind of ref it really was. See &lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="061971ac0e6a6c2a5ee9070b1898b9c52c8de0bc" translate="yes" xml:space="preserve">
          <source>(F) Perl was trying to evaluate a reference to an array value, but found a reference to something else instead. You can use the ref() function to find out what kind of ref it really was. See &lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af15bd373ca2f0716638ca4c6ab1bdd16fe040c8" translate="yes" xml:space="preserve">
          <source>(F) Perl was trying to execute the indicated program for you because that's what the #! line said. If that's not what you wanted, you may need to mention &quot;perl&quot; on the #! line somewhere.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4304d02c492500daa887c651090c0fde645e7e21" translate="yes" xml:space="preserve">
          <source>(F) Perl's &lt;b&gt;-e&lt;/b&gt; and &lt;b&gt;-E&lt;/b&gt; command-line options require an argument. If you want to run an empty program, pass the empty string as a separate argument or run a program consisting of a single 0 or 1:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a5400324091c4b26c2c30fd383cad8e3b3565c1" translate="yes" xml:space="preserve">
          <source>(F) Pod::PlainText was invoked via the compatibility mode pod2text() interface and the input file it was given could not be opened.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="572dead0f2efe7a75f7bd834faa073342fdbee98" translate="yes" xml:space="preserve">
          <source>(F) Pod::Text was invoked via the compatibility mode pod2text() interface and the input file it was given could not be opened.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25ae6bf17357b1643e1462dac920471ced2c20a8" translate="yes" xml:space="preserve">
          <source>(F) Probably means you had a syntax error. Common reasons include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0c7a6ef4cd8f02c84142972dfcec728f46cb6c2" translate="yes" xml:space="preserve">
          <source>(F) Process identifiers must be (signed) integers. It is a fatal error to attempt to kill() an undefined, empty-string or otherwise non-numeric process identifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="093a01f294151782f2d5842f345bbc217e8e932f" translate="yes" xml:space="preserve">
          <source>(F) Self-ties are of arrays and hashes are not supported in the current implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c54c36be6223ae630fd5b9835cba3705c8525d28" translate="yes" xml:space="preserve">
          <source>(F) Something has attempted to use an internal API call which depends on Perl being compiled with the default support for randomized hash key traversal, but this Perl has been compiled without it. You should report this warning to the relevant upstream party, or recompile perl with default options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23a9a8de8fef3628daab6f5690c052096078ee33" translate="yes" xml:space="preserve">
          <source>(F) Something other than a colon or whitespace was seen between the elements of an attribute list. If the previous attribute had a parenthesised parameter list, perhaps that list was terminated too soon. See &lt;a href=&quot;attributes&quot;&gt;attributes&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62ef247b4bf7caf9ea097f8541f5b68e67f2b05f" translate="yes" xml:space="preserve">
          <source>(F) Something went horribly bad in hexadecimal float handling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="203b9cfd99fe496858259074a04db7e2092bd671" translate="yes" xml:space="preserve">
          <source>(F) Subroutines meant to be used in lvalue context should be declared as such. See &lt;a href=&quot;perlsub#Lvalue-subroutines&quot;&gt;Lvalue subroutines in perlsub&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cae3e04414931f974dd511603f1bcfdb73cab70c" translate="yes" xml:space="preserve">
          <source>(F) The &quot;const&quot; attribute causes an anonymous subroutine to be run and its value captured at the time that it is cloned. Named subroutines are not cloned like this, so the attribute does not make sense on them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="951c55ceff8441cd54d8bfcecb06d0d6517cb8ab" translate="yes" xml:space="preserve">
          <source>(F) The &quot;goto subroutine&quot; call can't be used to jump out of an eval &quot;string&quot; or block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3069165b3da8cfbc9b9281ff603416d3baa013c3" translate="yes" xml:space="preserve">
          <source>(F) The &quot;goto subroutine&quot; call can't be used to jump out of the comparison sub for a sort(), or from a similar callback (such as the reduce() function in List::Util).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c78ef94ce9a7a6ad74473d34dfd2fee75adbe204" translate="yes" xml:space="preserve">
          <source>(F) The &quot;no&quot; keyword is recognized and executed at compile time, and returns no useful value. See &lt;a href=&quot;perlmod&quot;&gt;perlmod&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd319dd650e9f1929a83c1b056fbdc265fd7d720" translate="yes" xml:space="preserve">
          <source>(F) The &quot;use&quot; keyword is recognized and executed at compile time, and returns no useful value. See &lt;a href=&quot;perlmod&quot;&gt;perlmod&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a540a910ee546c263af74fd8c8f90138b556ca8" translate="yes" xml:space="preserve">
          <source>(F) The #! line specifies a switch that doesn't make sense at this point. For example, it'd be kind of silly to put a &lt;b&gt;-x&lt;/b&gt; on the #! line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0421b92d90c345ee1306ce86a3f4698ec2f749d2" translate="yes" xml:space="preserve">
          <source>(F) The &lt;b&gt;-I&lt;/b&gt; command-line switch requires a directory name as part of the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6832c017e67b123e158b0f17164136844247f775" translate="yes" xml:space="preserve">
          <source>(F) The &lt;code&gt;(?[...])&lt;/code&gt; extended character class regular expression construct only allows character classes (including character class escapes like &lt;code&gt;\d&lt;/code&gt; ), operators, and parentheses. The one exception is &lt;code&gt;(?flags:...)&lt;/code&gt; containing at least one flag and exactly one &lt;code&gt;(?[...])&lt;/code&gt; construct. This allows a regular expression containing just &lt;code&gt;(?[...])&lt;/code&gt; to be interpolated. If you see this error message, then you probably have some other &lt;code&gt;(?...)&lt;/code&gt; construct inside your character class. See &lt;a href=&quot;perlrecharclass#Extended-Bracketed-Character-Classes&quot;&gt;Extended Bracketed Character Classes in perlrecharclass&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06e4955bddcc05d16c922f1444290bb72b0612da" translate="yes" xml:space="preserve">
          <source>(F) The &lt;code&gt;-M&lt;/code&gt; or &lt;code&gt;-m&lt;/code&gt; options say that Perl should load some module, but you omitted the name of the module. Consult &lt;a href=&quot;perlrun&quot;&gt;perlrun&lt;/a&gt; for full details about &lt;code&gt;-M&lt;/code&gt; and &lt;code&gt;-m&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b76355c20d5d7d2df0de42e0273b57e789ad6fae" translate="yes" xml:space="preserve">
          <source>(F) The &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; function is not implemented on some systems, e.g., Symbian OS. See &lt;a href=&quot;perlport&quot;&gt;perlport&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a11a376242a23b828774068aac9f1317a700304" translate="yes" xml:space="preserve">
          <source>(F) The &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; function has been asked to open multiple files. This can happen if you are trying to open a pipe to a command that takes a list of arguments, but have forgotten to specify a piped open mode. See &lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a0736238cacb6befeb4410e022070236771916e" translate="yes" xml:space="preserve">
          <source>(F) The &lt;code&gt;errors&lt;/code&gt; parameter to the constructor was set to an unknown value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abc50f4f620211fce51a276ae85130deadfa59b1" translate="yes" xml:space="preserve">
          <source>(F) The ANSI escape sequence passed to uncolor() contains escapes which aren't recognized and can't be translated to names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99ad56301743e77b746114a111dddb7bbd58e007" translate="yes" xml:space="preserve">
          <source>(F) The CLASSNAME argument to the bless() operator is expected to be the name of the package to bless the resulting object into. You've supplied instead a reference to something: perhaps you wrote</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e25ade7a2e0589e489586bed7c69426575036bce" translate="yes" xml:space="preserve">
          <source>(F) The CORE:: namespace is reserved for Perl keywords.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6858f8e1f53861c5cbf6bce68fa9bf83414f199" translate="yes" xml:space="preserve">
          <source>(F) The POD document being formatted had syntax errors and the &lt;code&gt;errors&lt;/code&gt; option was set to &lt;code&gt;&lt;a href=&quot;../functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4abbc676f25035b15b0bb49601bad5cca17e43ba" translate="yes" xml:space="preserve">
          <source>(F) The Perl parser has no idea what to do with the specified character in your Perl script (or eval) near the specified column. Perhaps you tried to run a compressed script, a binary program, or a directory as a Perl program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17ad46344932865086ee80b50c8461cdc862069c" translate="yes" xml:space="preserve">
          <source>(F) The XS module in question was compiled against a different incompatible version of Perl than the one that has loaded the XS module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18ea36fba1ed90cad5df667b33390df597613003" translate="yes" xml:space="preserve">
          <source>(F) The alias name passed to coloralias() matches a standard color name. Standard color names cannot be aliased.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0b1d568e9c301eb5db04b07067f62473f3a382d" translate="yes" xml:space="preserve">
          <source>(F) The anonymous subroutine you're trying to call hasn't been defined, or if it was, it has since been undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee9e9bdf62ee0773b328cf9c058c5536e2eefeff" translate="yes" xml:space="preserve">
          <source>(F) The argument to &lt;code&gt;&lt;a href=&quot;functions/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; must be either a hash or array element, such as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b5908fc91c7d19435051b066e0efb7256fa2f8d" translate="yes" xml:space="preserve">
          <source>(F) The argument to &lt;code&gt;&lt;a href=&quot;functions/exists&quot;&gt;exists&lt;/a&gt;&lt;/code&gt; for &lt;code&gt;&lt;a href=&quot;functions/exists&quot;&gt;exists&lt;/a&gt; &amp;amp;sub&lt;/code&gt; must be a subroutine name, and not a subroutine call. &lt;code&gt;&lt;a href=&quot;functions/exists&quot;&gt;exists&lt;/a&gt; &amp;amp;sub()&lt;/code&gt; will generate this error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0eeefd5108a3751e14e8cc9a74ea9f2055d895d" translate="yes" xml:space="preserve">
          <source>(F) The argument to &lt;code&gt;&lt;a href=&quot;functions/exists&quot;&gt;exists&lt;/a&gt;&lt;/code&gt; must be a hash or array element or a subroutine with an ampersand, such as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d54a559ce0c7b22cdf34ecd321c6f45b3d950d35" translate="yes" xml:space="preserve">
          <source>(F) The argument to a '.' in your template tried to move the working position to before the start of the packed string being built.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e30c369da08e2f52e35c81cd684ac7e7113a781" translate="yes" xml:space="preserve">
          <source>(F) The argument to the indicated command line switch must follow immediately after the switch, without intervening spaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00d42c059eb0cd0362d7433ff40ba2e141f232a1" translate="yes" xml:space="preserve">
          <source>(F) The brackets around a character class must match. If you wish to include a closing bracket in a character class, backslash it or put it first. The &amp;lt;-- HERE shows whereabouts in the regular expression the problem was discovered. See &lt;a href=&quot;perlre&quot;&gt;perlre&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b320527ec26615c42b89e809411faaefd1f7a21" translate="yes" xml:space="preserve">
          <source>(F) The character constant represented by &lt;code&gt;...&lt;/code&gt; is not a valid hexadecimal number. Either it is empty, or you tried to use a character other than 0 - 9 or A - F, a - f in a hexadecimal number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c90a92973800345669e04d1087c6d51dc30b1652" translate="yes" xml:space="preserve">
          <source>(F) The charnames handler returned malformed UTF-8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93cecc1e573dfe3b5c71705d63bac7bbad43183a" translate="yes" xml:space="preserve">
          <source>(F) The class in the character class [: :] syntax is unknown. The &amp;lt;-- HERE shows whereabouts in the regular expression the problem was discovered. Note that the POSIX character classes do &lt;b&gt;not&lt;/b&gt; have the &lt;code&gt;is&lt;/code&gt; prefix the corresponding C interfaces have: in other words, it's &lt;code&gt;[[:print:]]&lt;/code&gt;, not &lt;code&gt;isprint&lt;/code&gt; . See &lt;a href=&quot;perlre&quot;&gt;perlre&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25c22fca50a08cbb5340a828380199c67816f58b" translate="yes" xml:space="preserve">
          <source>(F) The code you are trying to run claims it will not run on the version of Perl you are using because it is too new. Maybe the code needs to be updated, or maybe it is simply wrong and the version check should just be removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c6785244556208803df68a653a5b7c91eed57de" translate="yes" xml:space="preserve">
          <source>(F) The code you are trying to run has asked for a newer version of Perl than you are running. Perhaps &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; 5.10&lt;/code&gt; was written instead of &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; 5.010&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; v5.10&lt;/code&gt; . Without the leading &lt;code&gt;v&lt;/code&gt; , the number is interpreted as a decimal, with every three digits after the decimal point representing a part of the version number. So 5.10 is equivalent to v5.100.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6de229c7069f7af3a49deb23b3050cacc1b321c" translate="yes" xml:space="preserve">
          <source>(F) The compiler tried to interpret a bracketed expression as a subscript. But to the left of the brackets was an expression that didn't look like a hash or array reference, or anything else subscriptable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b2409edf7899060c62fbf2aff2ae69d68e054f2" translate="yes" xml:space="preserve">
          <source>(F) The condition part of a (?(condition)if-clause|else-clause) construct is not known. The condition must be one of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf82b09ca3553e587b2ce772ea22c90349f0a561" translate="yes" xml:space="preserve">
          <source>(F) The construction &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $x := 42&lt;/code&gt; used to parse as equivalent to &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $x : = 42&lt;/code&gt; (applying an empty attribute list to &lt;code&gt;$x&lt;/code&gt; ). This construct was deprecated in 5.12.0, and has now been made a syntax error, so &lt;code&gt;:=&lt;/code&gt; can be reclaimed as a new operator in the future.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0f10cd186ec15ba6d5cee0a79a7735ffea808f1" translate="yes" xml:space="preserve">
          <source>(F) The contents of a &amp;lt;&amp;gt; operator may not exceed the maximum size of a Perl identifier. If you're just trying to glob a long list of filenames, try using the glob() operator, or put the filenames into a variable and glob that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="080b83db81ca715f9f52b02789639f6664859440" translate="yes" xml:space="preserve">
          <source>(F) The count in the (un)pack template may be replaced by &lt;code&gt;[TEMPLATE]&lt;/code&gt; only if &lt;code&gt;TEMPLATE&lt;/code&gt; always matches the same amount of packed bytes that can be determined from the template alone. This is not possible if it contains any of the codes @, /, U, u, w or a *-length. Redesign the template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d85d4e1b7f8f56e1064d2e15f450bf1f099a387f" translate="yes" xml:space="preserve">
          <source>(F) The currently executing code was compiled with the &lt;b&gt;-d&lt;/b&gt; switch, but for some reason the current debugger (e.g.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5710097e881433fbe892394ce4b628d27da70f08" translate="yes" xml:space="preserve">
          <source>(F) The deeply magical &quot;goto subroutine&quot; call can only replace one subroutine call for another. It can't manufacture one out of whole cloth. In general you should be calling it out of only an AUTOLOAD routine anyway. See &lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb34d3945e0fb1b0123ef636d49413395f97e404" translate="yes" xml:space="preserve">
          <source>(F) The end of the perl code contained within the {...} must be followed immediately by a ')'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b36f23b5f050f31941365ff3f2b77aca6b5f39e" translate="yes" xml:space="preserve">
          <source>(F) The failing code attempted to delete a key whose value has been declared readonly from a restricted hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d8e3808a2fde1f676f1879595d95cc975f2d86f" translate="yes" xml:space="preserve">
          <source>(F) The failing code attempted to delete from a restricted hash a key which is not in its key set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="370a06ba1475d4513a515a384a052dd303f3191a" translate="yes" xml:space="preserve">
          <source>(F) The failing code has attempted to get or set a key which is not in the current set of allowed keys of a restricted hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e00756026930b1b8d3bd76f0281d280ae772813b" translate="yes" xml:space="preserve">
          <source>(F) The final summary message when a &lt;code&gt;perl -c&lt;/code&gt; fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46b3c3fefa5ef7e41051a143512e65a20dc1a1bb" translate="yes" xml:space="preserve">
          <source>(F) The final summary message when a &lt;code&gt;perl -c&lt;/code&gt; succeeds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66baae2593d19e44c3a5a8242dbfeeed5a43d575" translate="yes" xml:space="preserve">
          <source>(F) The final summary message when a Perl compilation fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e193182fbf7baf73255d84b7976bca310abff5e" translate="yes" xml:space="preserve">
          <source>(F) The first argument to formline must be a valid format picture specification. It was found to be empty, which probably means you supplied it an uninitialized value. See &lt;a href=&quot;perlform&quot;&gt;perlform&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c57f57dc4bc57e6c0dccdf2185d15bac0f30acb" translate="yes" xml:space="preserve">
          <source>(F) The first time the &lt;code&gt;%!&lt;/code&gt; hash is used, perl automatically loads the Errno.pm module. The Errno module is expected to tie the %! hash to provide symbolic names for &lt;code&gt;$!&lt;/code&gt; errno values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c2d2b9fa2dd70265e99d9e9ec37ad1a7d407c58" translate="yes" xml:space="preserve">
          <source>(F) The format indicated doesn't seem to exist. Perhaps it's really in another package? See &lt;a href=&quot;perlform&quot;&gt;perlform&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fd3275a5e5f180184deb0691d159e33c9de4d27" translate="yes" xml:space="preserve">
          <source>(F) The function indicated isn't implemented on this architecture, according to the probings of Configure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="560973c72235263704e6a28ab70c9ea8f07b56ef" translate="yes" xml:space="preserve">
          <source>(F) The function requires fewer arguments than you specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f455690ddf7f0384b2568583676fb88f705575a" translate="yes" xml:space="preserve">
          <source>(F) The function requires more arguments than you specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74c819a3a503139a65525343443bad859cdd38ab" translate="yes" xml:space="preserve">
          <source>(F) The given character is not a valid pack or unpack type. See &lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e8a9cb5472adb2bd8d1680404de770d70758985" translate="yes" xml:space="preserve">
          <source>(F) The global variables $a and $b are reserved for sort comparisons. You mentioned $a or $b in the same line as the &amp;lt;=&amp;gt; or cmp operator, and the variable had earlier been declared as a lexical variable. Either qualify the sort variable with the package name, or rename the lexical variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a63ac763f3adf9788b781ef49345fb568b26ba4" translate="yes" xml:space="preserve">
          <source>(F) The indexes and widths specified in the format string of &lt;code&gt;&lt;a href=&quot;functions/printf&quot;&gt;printf()&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf()&lt;/a&gt;&lt;/code&gt; are too large. The numbers must not overflow the size of integers for your architecture.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="279b23034c9dcdedec9b68bfcc6c06fbff60e996" translate="yes" xml:space="preserve">
          <source>(F) The indicated attribute for a subroutine or variable was not recognized by Perl or by a user-supplied handler. See &lt;a href=&quot;attributes&quot;&gt;attributes&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8c226e92609484f1a705b19b8e07546c4d1dd7f" translate="yes" xml:space="preserve">
          <source>(F) The indicated attributes for a subroutine or variable were not recognized by Perl or by a user-supplied handler. See &lt;a href=&quot;attributes&quot;&gt;attributes&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a5130c968f4acc9296eb545217c0fa0cca89e93" translate="yes" xml:space="preserve">
          <source>(F) The internal routine that does method lookup was handed a symbol table that doesn't have a name. Symbol tables can become anonymous for example by undefining stashes: &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt; %Some::Package::&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4de64e899e7cc19b5328e2c623d4536f2382564e" translate="yes" xml:space="preserve">
          <source>(F) The internal structure of the version object was invalid. Perhaps the internals were modified directly in some way or an arbitrary reference was blessed into the &quot;version&quot; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2a8881acd95dd3b1b12ef86335ddb1c33cb7025" translate="yes" xml:space="preserve">
          <source>(F) The length count obtained from a length/code unpack operation was negative. See &lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da9dea337f615eeaa3795341a9a3b7d0baf74fba" translate="yes" xml:space="preserve">
          <source>(F) The lexer couldn't find the final delimiter of a // or m{} construct. Remember that bracketing delimiters count nesting level. Missing the leading &lt;code&gt;$&lt;/code&gt; from a variable &lt;code&gt;$m&lt;/code&gt; may cause this error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="348b17d29e44331eca1104730046931743e6da0c" translate="yes" xml:space="preserve">
          <source>(F) The lexer couldn't find the final delimiter of a tr///, tr[][], y/// or y[][] construct.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95e52e18379aaacd9ef15468a616fbb5d6028ac3" translate="yes" xml:space="preserve">
          <source>(F) The lexer couldn't find the final delimiter of an s/// or s{}{} construct. Remember that bracketing delimiters count nesting level. Missing the leading &lt;code&gt;$&lt;/code&gt; from variable &lt;code&gt;$s&lt;/code&gt; may cause this error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed5ae073a031cc261ceb00f34527139475b3384f" translate="yes" xml:space="preserve">
          <source>(F) The lexer couldn't find the interior delimiter of a tr/// or tr[][] or y/// or y[][] construct. Missing the leading &lt;code&gt;$&lt;/code&gt; from variables &lt;code&gt;$tr&lt;/code&gt; or &lt;code&gt;$y&lt;/code&gt; may cause this error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bef25aaf366b4093b06f46cff5f9d8a1e014f5ae" translate="yes" xml:space="preserve">
          <source>(F) The lexer couldn't find the interior delimiter of an s/// or s{}{} construct. Remember that bracketing delimiters count nesting level. Missing the leading &lt;code&gt;$&lt;/code&gt; from variable &lt;code&gt;$s&lt;/code&gt; may cause this error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c24aac06808a099cc95b739179a1df15791caaf" translate="yes" xml:space="preserve">
          <source>(F) The lexer counted more closing curly or square brackets than opening ones, so you're probably missing a matching opening bracket. As a general rule, you'll find the missing one (so to speak) near the place you were last editing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcddf39aa91c5496d44ad962784dd192649c696f" translate="yes" xml:space="preserve">
          <source>(F) The lexer counted more opening curly or square brackets than closing ones. As a general rule, you'll find it's missing near the place you were last editing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b53e285d7ec98500ac9df80264b68fd5f1615c71" translate="yes" xml:space="preserve">
          <source>(F) The lexer found something other than a simple identifier at the start of an attribute, and it wasn't a semicolon or the start of a block. Perhaps you terminated the parameter list of the previous attribute too soon. See &lt;a href=&quot;attributes&quot;&gt;attributes&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6ccac0f11afc4c9df3d88594553ff87023e3205" translate="yes" xml:space="preserve">
          <source>(F) The lexer saw a left angle bracket in a place where it was expecting a term, so it's looking for the corresponding right angle bracket, and not finding it. Chances are you left some needed parentheses out earlier in the line, and you really meant a &quot;less than&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd2ba1a7b625b4b40683b95687d850dc3c70b0c3" translate="yes" xml:space="preserve">
          <source>(F) The lexer saw an opening (left) parenthesis character while parsing an attribute list, but the matching closing (right) parenthesis character was not found. You may need to add (or remove) a backslash character to get your parentheses to balance. See &lt;a href=&quot;attributes&quot;&gt;attributes&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b779eb9cf5490f4c37b33be4c878cf1e7eba153f" translate="yes" xml:space="preserve">
          <source>(F) The malloc() function returned 0, indicating there was insufficient remaining memory (or virtual memory) to satisfy the request. However, the request was judged large enough (compile-time default is 64K), so a possibility to shut down by trapping this error is granted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43b76388cb2e63d3af4e07af5db3e7ed9419984a" translate="yes" xml:space="preserve">
          <source>(F) The method resolution order (MRO) of the given class is not C3-consistent, and you have enabled the C3 MRO for this class. See the C3 documentation in &lt;a href=&quot;mro&quot;&gt;mro&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aebd12cc2a7fd43bf7871ee7d9f9688562a46a2c" translate="yes" xml:space="preserve">
          <source>(F) The method which overloads &quot;=&quot; is buggy. See &lt;a href=&quot;overload#Copy-Constructor&quot;&gt;Copy Constructor in overload&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9871eac2b4e9376fca56303f1f1b03c269af1f8" translate="yes" xml:space="preserve">
          <source>(F) The modifiers '!', '&amp;lt;' and '&amp;gt;' are allowed in pack() or unpack() only after certain types. See &lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="950bde69717c4eaacf48e7d9edef82b0fc59e15b" translate="yes" xml:space="preserve">
          <source>(F) The module argument to perl's &lt;b&gt;-m&lt;/b&gt; and &lt;b&gt;-M&lt;/b&gt; command-line options cannot contain single colons in the module name, but only in the arguments after &quot;=&quot;. In other words, &lt;b&gt;-MFoo::Bar=:baz&lt;/b&gt; is ok, but &lt;b&gt;-MFoo:Bar=baz&lt;/b&gt; is not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d8698aa5773d5e83f49e1c517008c809f194625" translate="yes" xml:space="preserve">
          <source>(F) The module in question uses features of a version of Perl more recent than the currently running version. How long has it been since you upgraded, anyway? See &lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b72f49d2991a9ad34c1f6c9092f4a2c91e724a3c" translate="yes" xml:space="preserve">
          <source>(F) The module you loaded is trying to load an external library, like for example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cc9ce57a2350d1aedf6d7ab6fc533759dc0ac22" translate="yes" xml:space="preserve">
          <source>(F) The module you tried to load failed to load a dynamic extension. This may either mean that you upgraded your version of perl to one that is incompatible with your old dynamic extensions (which is known to happen between major versions of perl), or (more likely) that your dynamic extension was built against an older version of the library that is installed on your system. You may need to rebuild your old dynamic extensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e2b528304509bfaf9eb358c67ab1a20d3736e93" translate="yes" xml:space="preserve">
          <source>(F) The name you used inside &lt;code&gt;\N{}&lt;/code&gt; is unknown to Perl. Check the spelling. You can say &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; charnames &quot;:loose&quot;&lt;/code&gt; to not have to be so precise about spaces, hyphens, and capitalization on standard Unicode names. (Any custom aliases that have been created must be specified exactly, regardless of whether &lt;code&gt;:loose&lt;/code&gt; is used or not.) This error may also happen if the &lt;code&gt;\N{}&lt;/code&gt; is not in the scope of the corresponding &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; charnames&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dcca6aa0e749f140c0c01a49273d9198ba37361" translate="yes" xml:space="preserve">
          <source>(F) The named property which you specified via &lt;code&gt;\p&lt;/code&gt; or &lt;code&gt;\P&lt;/code&gt; is not one known to Perl. Perhaps you misspelled the name? See &lt;a href=&quot;perluniprops#Properties-accessible-through-%5cp%7b%7d-and-%5cP%7b%7d&quot;&gt;Properties accessible through \p{} and \P{} in perluniprops&lt;/a&gt; for a complete list of available official properties. If it is a &lt;a href=&quot;perlunicode#User-Defined-Character-Properties&quot;&gt;user-defined property&lt;/a&gt; it must have been defined by the time the regular expression is compiled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bea874313c792450496d5903a505f20bf31fc002" translate="yes" xml:space="preserve">
          <source>(F) The new (as of Perl 5.12) meaning of &lt;code&gt;\N&lt;/code&gt; as &lt;code&gt;[^\n]&lt;/code&gt; is not valid in a bracketed character class, for the same reason that &lt;code&gt;.&lt;/code&gt; in a character class loses its specialness: it matches almost everything, which is probably not what you want.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="394214519b0a002c908d450181ba38170737e9f9" translate="yes" xml:space="preserve">
          <source>(F) The number of bits in vec() (the third argument) must be a power of two from 1 to 32 (or 64, if your platform supports that).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88916212d80049d0e845529c1b8eec8f29028d43" translate="yes" xml:space="preserve">
          <source>(F) The parser found inconsistencies either while attempting to define an overloaded constant, or when trying to find the character name specified in the &lt;code&gt;\N{...}&lt;/code&gt; escape. Perhaps you forgot to load the corresponding &lt;a href=&quot;overload&quot;&gt;overload&lt;/a&gt; pragma?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cc11aca92c38551784f92f1b6642bd6deee80bb" translate="yes" xml:space="preserve">
          <source>(F) The parser found inconsistencies while attempting to define an overloaded constant. Perhaps you forgot to load the corresponding &lt;a href=&quot;overload&quot;&gt;overload&lt;/a&gt; pragma?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3185b94204eb940522c58534f797adc1c25bddcb" translate="yes" xml:space="preserve">
          <source>(F) The parser has given up trying to parse the program after 10 errors. Further error messages would likely be uninformative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e1aae8640dd04f842e1dd0f94885b32e8df57f9" translate="yes" xml:space="preserve">
          <source>(F) The pattern looks like a {min,max} quantifier, but the min or max could not be parsed as a valid number - either it has leading zeroes, or it represents too big a number to cope with. The &amp;lt;-- HERE shows where in the regular expression the problem was discovered. See &lt;a href=&quot;perlre&quot;&gt;perlre&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b54d652def9fb024b0a5f9a3875686885a58b6f8" translate="yes" xml:space="preserve">
          <source>(F) The quote specification given (the &lt;code&gt;quotes&lt;/code&gt; option to the constructor) was invalid. A quote specification must be one, two, or four characters long.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="082df552f96197dfba16fbcc384be8346bef54f2" translate="yes" xml:space="preserve">
          <source>(F) The range specified in a character class had a minimum character greater than the maximum character. One possibility is that you forgot the &lt;code&gt;{}&lt;/code&gt; from your ending &lt;code&gt;\x{}&lt;/code&gt; - &lt;code&gt;\x&lt;/code&gt; without the curly braces can go only up to &lt;code&gt;ff&lt;/code&gt; . The &amp;lt;-- HERE shows whereabouts in the regular expression the problem was discovered. See &lt;a href=&quot;perlre&quot;&gt;perlre&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06d429172351003851adad6bd78bcbdab83f4941" translate="yes" xml:space="preserve">
          <source>(F) The range specified in the tr/// or y/// operator had a minimum character greater than the maximum character. See &lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2f9ac1ee6670ac9ea6e9f80571ec9b43fac43cd" translate="yes" xml:space="preserve">
          <source>(F) The regular expression ends with an unbackslashed backslash. Backslash it. See &lt;a href=&quot;perlre&quot;&gt;perlre&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f39f898b1b2e1f9068736b5549ac1675148174ad" translate="yes" xml:space="preserve">
          <source>(F) The regular expression expects a mandatory argument following the escape sequence and this has been omitted or incorrectly written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="319a72b3ecb2401e911b41828f7160317fd82f9b" translate="yes" xml:space="preserve">
          <source>(F) The regular expression pattern had more than one of these mutually exclusive modifiers. Retain only the modifier that is supposed to be there.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
