<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="en" datatype="htmlbody" original="bash">
    <body>
      <group id="bash">
        <trans-unit id="3e4ba7e20d0d5861b85a4b485e97a50af4f2229a" translate="yes" xml:space="preserve">
          <source>An array variable whose members are assigned by the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5fb9da983a81153b675febc370fd7d43ea294f1" translate="yes" xml:space="preserve">
          <source>An array variable whose members are the line numbers in source files where each corresponding member of &lt;var&gt;FUNCNAME&lt;/var&gt; was invoked. &lt;code&gt;${BASH_LINENO[$i]}&lt;/code&gt; is the line number in the source file (&lt;code&gt;${BASH_SOURCE[$i+1]}&lt;/code&gt;) where &lt;code&gt;${FUNCNAME[$i]}&lt;/code&gt; was called (or &lt;code&gt;${BASH_LINENO[$i-1]}&lt;/code&gt; if referenced within another shell function). Use &lt;code&gt;LINENO&lt;/code&gt; to obtain the current line number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af169c4aad6b05ec1e966f36c83d8d7005cd7e0a" translate="yes" xml:space="preserve">
          <source>An array variable whose members are the source filenames where the corresponding shell function names in the &lt;code&gt;FUNCNAME&lt;/code&gt; array variable are defined. The shell function &lt;code&gt;${FUNCNAME[$i]}&lt;/code&gt; is defined in the file &lt;code&gt;${BASH_SOURCE[$i]}&lt;/code&gt; and called from &lt;code&gt;${BASH_SOURCE[$i+1]}&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35edd346f768fcd9ee1e2878caf16d4727ec2c2e" translate="yes" xml:space="preserve">
          <source>An array variable whose values are the number of parameters in each frame of the current bash execution call stack. The number of parameters to the current subroutine (shell function or script executed with &lt;code&gt;.&lt;/code&gt; or &lt;code&gt;source&lt;/code&gt;) is at the top of the stack. When a subroutine is executed, the number of parameters passed is pushed onto &lt;code&gt;BASH_ARGC&lt;/code&gt;. The shell sets &lt;code&gt;BASH_ARGC&lt;/code&gt; only when in extended debugging mode (see &lt;a href=&quot;the-shopt-builtin#The-Shopt-Builtin&quot;&gt;The Shopt Builtin&lt;/a&gt; for a description of the &lt;code&gt;extdebug&lt;/code&gt; option to the &lt;code&gt;shopt&lt;/code&gt; builtin). Setting &lt;code&gt;extdebug&lt;/code&gt; after the shell has started to execute a script, or referencing this variable when &lt;code&gt;extdebug&lt;/code&gt; is not set, may result in inconsistent values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="644a56cc1847242f7b3eb5598257652b047603a4" translate="yes" xml:space="preserve">
          <source>An associative array variable whose members correspond to the internal hash table of commands as maintained by the &lt;code&gt;hash&lt;/code&gt; builtin (see &lt;a href=&quot;bourne-shell-builtins#Bourne-Shell-Builtins&quot;&gt;Bourne Shell Builtins&lt;/a&gt;). Elements added to this array appear in the hash table; however, unsetting array elements currently does not cause command names to be removed from the hash table. If &lt;code&gt;BASH_CMDS&lt;/code&gt; is unset, it loses its special properties, even if it is subsequently reset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af5859e874886cdb1ddf21e5742b1e6226fe170c" translate="yes" xml:space="preserve">
          <source>An associative array variable whose members correspond to the internal list of aliases as maintained by the &lt;code&gt;alias&lt;/code&gt; builtin. (see &lt;a href=&quot;bourne-shell-builtins#Bourne-Shell-Builtins&quot;&gt;Bourne Shell Builtins&lt;/a&gt;). Elements added to this array appear in the alias list; however, unsetting array elements currently does not cause aliases to be removed from the alias list. If &lt;code&gt;BASH_ALIASES&lt;/code&gt; is unset, it loses its special properties, even if it is subsequently reset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fca5efbf92b800d08290da89c89c5c1b271827d2" translate="yes" xml:space="preserve">
          <source>An escape character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a9035d6c34d533d04f6b7a05e9f5de07690c984" translate="yes" xml:space="preserve">
          <source>An event designator is a reference to a command line entry in the history list. Unless the reference is absolute, events are relative to the current position in the history list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4169a64dd8d1552aabc828b96115afa36b66ef7" translate="yes" xml:space="preserve">
          <source>An example inputrc file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7616a0cb0a5efad420a53b0c332e8e599cb210fc" translate="yes" xml:space="preserve">
          <source>An example shell function for generating possible completions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e5fa57883d9bf7e3735c2074beadbd12d19d7ae" translate="yes" xml:space="preserve">
          <source>An index into &lt;code&gt;${COMP_WORDS}&lt;/code&gt; of the word containing the current cursor position. This variable is available only in shell functions invoked by the programmable completion facilities (see &lt;a href=&quot;programmable-completion#Programmable-Completion&quot;&gt;Programmable Completion&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6193d16ce12acf45b8e18b71bd531c2ad8f6344f" translate="yes" xml:space="preserve">
          <source>An indexed array is created automatically if any variable is assigned to using the syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a8c368c57c3302e8b0dac17b95c434cf308233b" translate="yes" xml:space="preserve">
          <source>An interactive login shell sends a &lt;code&gt;SIGHUP&lt;/code&gt; to all jobs on exit if the &lt;code&gt;huponexit&lt;/code&gt; shell option has been enabled (see &lt;a href=&quot;signals#Signals&quot;&gt;Signals&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="befd6401b60b10cda25e5684211c470f451afe92" translate="yes" xml:space="preserve">
          <source>An interactive shell generally reads from and writes to a user&amp;rsquo;s terminal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5937a112852c4e884ce08b30d70f06a04360ec1" translate="yes" xml:space="preserve">
          <source>An interactive shell is one started without non-option arguments, unless</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f15e2375ce8441424a30be0fe247b676ddf4759" translate="yes" xml:space="preserve">
          <source>An interactive shell will not exit upon reading EOF.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="435c8fb72723c7fb7507f1830dd3f0016b903ac6" translate="yes" xml:space="preserve">
          <source>An introduction to the shell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cedbd6925272d7dd15fe8ba2a4365347eeea9818" translate="yes" xml:space="preserve">
          <source>An older version of the bash_completion package is distributed with bash in the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c3503edec7f8f2fb276fe9373a5ee916d62ca0e" translate="yes" xml:space="preserve">
          <source>Any character that appears in a pattern, other than the special pattern characters described below, matches itself. The &lt;small&gt;NUL&lt;/small&gt; character may not occur in a pattern. A backslash escapes the following character; the escaping backslash is discarded when matching. The special pattern characters must be quoted if they are to be matched literally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96fbf8be8e8b3b1637c65d31d53122984b4799a7" translate="yes" xml:space="preserve">
          <source>Any completions specified by a filename expansion pattern to the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="093317f6114bdaf1c9b80acdfb4744facce9ee53" translate="yes" xml:space="preserve">
          <source>Any element of an array may be referenced using &lt;code&gt;${&lt;var&gt;name&lt;/var&gt;[&lt;var&gt;subscript&lt;/var&gt;]}&lt;/code&gt;. The braces are required to avoid conflicts with the shell&amp;rsquo;s filename expansion operators. If the &lt;var&gt;subscript&lt;/var&gt; is &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05c84891da9124272ef091879d5a02832afcce76" translate="yes" xml:space="preserve">
          <source>Any function specified with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="737bb9637c4b416bd6a8828df88deaf130eff585" translate="yes" xml:space="preserve">
          <source>Append the history lines not already read from the history file to the current history list. These are lines appended to the history file since the beginning of the current Bash session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa371fc9ef369f423df1af5f429cb095d5abac4c" translate="yes" xml:space="preserve">
          <source>Append the new history lines to the history file. These are history lines entered since the beginning of the current Bash session, but not already appended to the history file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d13a5c548dd1bd4f3955e89191f0212a7bdbf71b" translate="yes" xml:space="preserve">
          <source>Appendix A Reporting Bugs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfe09449cc8e33d24f5a69a34ea0dd5996ea6af0" translate="yes" xml:space="preserve">
          <source>Appendix B Major Differences From The Bourne Shell</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4880cb1ef429add51eb9a787445961729f2e1ae9" translate="yes" xml:space="preserve">
          <source>Appendix C GNU Free Documentation License</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f58cb6b3f24a0b908fae648b1fc2c206b57b18b0" translate="yes" xml:space="preserve">
          <source>Appendix D Indexes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2c618827073f43083dd69ab40b02f7d6238db37" translate="yes" xml:space="preserve">
          <source>Apply the following &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdaa7306385ffcc4f28214e221decb76dcc0b272" translate="yes" xml:space="preserve">
          <source>Arguments to non-string format specifiers are treated as C language constants, except that a leading plus or minus sign is allowed, and if the leading character is a single or double quote, the value is the ASCII value of the following character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fb75a7744b90e1d41f52f6bfdc6641917e4fac3" translate="yes" xml:space="preserve">
          <source>Arithmetic Expansion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3edb8e1eef15c24a8864ca7944421bfa0563defa" translate="yes" xml:space="preserve">
          <source>Arithmetic expansion allows the evaluation of an arithmetic expression and the substitution of the result. The format for arithmetic expansion is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c706e3b86ea549c90f68920d714563086d1fc02" translate="yes" xml:space="preserve">
          <source>Arithmetic on shell variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="743a14b067caaa35a04f6582909f1857caf4c645" translate="yes" xml:space="preserve">
          <source>Arrange for the debugger profile to be executed before the shell starts. Turns on extended debugging mode (see &lt;a href=&quot;the-shopt-builtin#The-Shopt-Builtin&quot;&gt;The Shopt Builtin&lt;/a&gt; for a description of the &lt;code&gt;extdebug&lt;/code&gt; option to the &lt;code&gt;shopt&lt;/code&gt; builtin).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86bda10308cd1e1c31d2fea35a9b89ba9752f3e0" translate="yes" xml:space="preserve">
          <source>Array Variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a67461a5e834e4fd2df3f2b523d7f15a31181ff" translate="yes" xml:space="preserve">
          <source>Array variable names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b90cc9bfd23567a2ff5ba1f00e7c63ca6da8755e" translate="yes" xml:space="preserve">
          <source>Arrays</source>
          <target state="translated">Arrays</target>
        </trans-unit>
        <trans-unit id="7eabced6cb34d778f5f281e26063b9089172023e" translate="yes" xml:space="preserve">
          <source>Arrays are assigned to using compound assignments of the form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bc9c32a38bca1b59308f5c7039a8648f444ed2e" translate="yes" xml:space="preserve">
          <source>As noted above, Bash requires the &lt;code&gt;xpg_echo&lt;/code&gt; option to be enabled for the &lt;code&gt;echo&lt;/code&gt; builtin to be fully conformant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aa589890cfda9df3fd8cfd7bc779b2770704045" translate="yes" xml:space="preserve">
          <source>As noted above, if a non-interactive shell is invoked with the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f432892286f6a7bf3732fb257a0a4599a1049c26" translate="yes" xml:space="preserve">
          <source>As you can see, the {} is replaced with each line read from standard input. While using &lt;code&gt;ls&lt;/code&gt; will work in most instances, it is not sufficient to deal with all filenames. If you need to accommodate special characters in filenames, you can use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d23ff97ad27a77304173e16b06d1cb07802965e" translate="yes" xml:space="preserve">
          <source>Assignment statements preceding &lt;small&gt;POSIX&lt;/small&gt; special builtins persist in the shell environment after the builtin completes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54430ac198c8aa5f1b7e6151be8f8efafe05bce5" translate="yes" xml:space="preserve">
          <source>Assignment statements preceding shell function calls persist in the shell environment after the function returns, as if a &lt;small&gt;POSIX&lt;/small&gt; special builtin command had been executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6afff165a0368b6b32a90d8e10aaea87835226a0" translate="yes" xml:space="preserve">
          <source>Assignment statements preceding the command stay in effect in the shell environment after the command completes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d94b6b875d60484c4bb7340dd6a44faadd5efa2" translate="yes" xml:space="preserve">
          <source>Associative arrays are created using</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="312925ab15a73ffc2af430651a066fde15cd3475" translate="yes" xml:space="preserve">
          <source>At its base, a shell is simply a macro processor that executes commands. The term macro processor means functionality where text and symbols are expanded to create larger expressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a33972941fa256c44269f0d323b7d43c6c92b66" translate="yes" xml:space="preserve">
          <source>Attempt completion on the text before point, comparing the text against lines from the history list for possible completion matches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a39cbb1d67c91fb900a7e0403b3bf4f7226464c" translate="yes" xml:space="preserve">
          <source>Attempt completion on the text before point, treating it as a command name. Command completion attempts to match the text against aliases, reserved words, shell functions, shell builtins, and finally executable filenames, in that order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0459206f5ad3b3f0d57f7aa7179ed400b6444bbf" translate="yes" xml:space="preserve">
          <source>Attempt completion on the text before point, treating it as a hostname.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a275c647ae0a0312b3d4920af98c24668aed88b2" translate="yes" xml:space="preserve">
          <source>Attempt completion on the text before point, treating it as a shell variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d3b29635546c0f2a5cf19e44ea8077397280344" translate="yes" xml:space="preserve">
          <source>Attempt completion on the text before point, treating it as a username.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6bab22ea714bcffa182b9fb15b4394a520c76f3" translate="yes" xml:space="preserve">
          <source>Attempt filename completion on the text before point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9821e5eb38f2e8b0a52f3a8e01446975a7c1341" translate="yes" xml:space="preserve">
          <source>Attempt menu completion on the text before point, comparing the text against lines from the history list for possible completion matches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cb32994a537e88f73ea5cb2abb8426080a63b09" translate="yes" xml:space="preserve">
          <source>Attempt to move point to the same physical screen column on the next physical screen line. This will not have the desired effect if the current Readline line does not take up more than one physical line or if the length of the current Readline line is not greater than the length of the prompt plus the screen width.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13d9e19111325af7927ae0a41b76bcd6ea3d199d" translate="yes" xml:space="preserve">
          <source>Attempt to move point to the same physical screen column on the previous physical screen line. This will not have the desired effect if the current Readline line does not take up more than one physical line or if point is not greater than the length of the prompt plus the screen width.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="220ee35ed4573b6fb0cfebbad0e076d7b1ac9886" translate="yes" xml:space="preserve">
          <source>Attempt to perform completion on the text before point. The actual completion performed is application-specific. Bash attempts completion treating the text as a variable (if the text begins with &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd38f839b1357eff12d518b6fb4026b120d6a7aa" translate="yes" xml:space="preserve">
          <source>Attributes may be specified for an array variable using the &lt;code&gt;declare&lt;/code&gt; and &lt;code&gt;readonly&lt;/code&gt; builtins. Each attribute applies to all members of an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae4f281df5a5d0ff3cad6371f76d5c29b6d953ec" translate="yes" xml:space="preserve">
          <source>B</source>
          <target state="translated">B</target>
        </trans-unit>
        <trans-unit id="7e0604a488d54d9f299ba77ae94a81953953b191" translate="yes" xml:space="preserve">
          <source>B.1 Implementation Differences From The SVR4.2 Shell</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f620cacbc465c805c4e1c25e20fa57e55c09e33e" translate="yes" xml:space="preserve">
          <source>Bash</source>
          <target state="translated">Bash</target>
        </trans-unit>
        <trans-unit id="1d2140e9c186ba4c79d63ab511540a15728ae9eb" translate="yes" xml:space="preserve">
          <source>Bash Builtin Commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="778de54221951d87d2fff578d429e650857ecf09" translate="yes" xml:space="preserve">
          <source>Bash Builtins</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19fe050a832ad862f72117f033c08f61e34343c9" translate="yes" xml:space="preserve">
          <source>Bash Conditional Expressions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="febdc089f94146b8e3dcee3ded46c3a70f9fa6cb" translate="yes" xml:space="preserve">
          <source>Bash Features</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a69370a2dabaaa403ed0c85823816926cb374af6" translate="yes" xml:space="preserve">
          <source>Bash History Builtins</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4e254c154469cc28339b1767c2dc643554d5e43" translate="yes" xml:space="preserve">
          <source>Bash History Facilities</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="558084a52c984d57c3303a89245922b38a45b03c" translate="yes" xml:space="preserve">
          <source>Bash POSIX Mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f167125125d1d74e4ced29f29cb7ed5cc2d72e0c" translate="yes" xml:space="preserve">
          <source>Bash Reference Manual</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="702b271b9be7f4524530ed54f7def024b195d319" translate="yes" xml:space="preserve">
          <source>Bash Startup Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c457bb85807204243999c640208e0b5f6a526f2e" translate="yes" xml:space="preserve">
          <source>Bash Variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b94be2a20e762976fbd6d00c02f9087209fa4365" translate="yes" xml:space="preserve">
          <source>Bash allows a function to override a builtin with the same name, and provides access to that builtin&amp;rsquo;s functionality within the function via the &lt;code&gt;builtin&lt;/code&gt; and &lt;code&gt;command&lt;/code&gt; builtins (see &lt;a href=&quot;bash-builtins#Bash-Builtins&quot;&gt;Bash Builtins&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45ea30664300fb4506c7c0c0341657bed07ca29c" translate="yes" xml:space="preserve">
          <source>Bash allows multiple option arguments when it is invoked (&lt;code&gt;-x -v&lt;/code&gt;); the SVR4.2 shell allows only one option argument (&lt;code&gt;-xv&lt;/code&gt;). In fact, some versions of the shell dump core if the second argument begins with a &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="544840dfc1a95c6dd3a445461c9459b2d1327781" translate="yes" xml:space="preserve">
          <source>Bash also performs tilde expansion on words satisfying the conditions of variable assignments (see &lt;a href=&quot;shell-parameters#Shell-Parameters&quot;&gt;Shell Parameters&lt;/a&gt;) when they appear as arguments to simple commands. Bash does not do this, except for the &lt;var&gt;declaration&lt;/var&gt; commands listed above, when in &lt;small&gt;POSIX&lt;/small&gt; mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="386b9e0bb6527c98d16b6a49e87a9de31b05d0ac" translate="yes" xml:space="preserve">
          <source>Bash attempts to determine when it is being run with its standard input connected to a network connection, as when executed by the remote shell daemon, usually &lt;code&gt;rshd&lt;/code&gt;, or the secure shell daemon &lt;code&gt;sshd&lt;/code&gt;. If Bash determines it is being run in this fashion, it reads and executes commands from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09a739a32bbb67b8ad38cb56f78cde59cbc50c41" translate="yes" xml:space="preserve">
          <source>Bash automatically assigns variables that provide information about the current user (&lt;code&gt;UID&lt;/code&gt;, &lt;code&gt;EUID&lt;/code&gt;, and &lt;code&gt;GROUPS&lt;/code&gt;), the current host (&lt;code&gt;HOSTTYPE&lt;/code&gt;, &lt;code&gt;OSTYPE&lt;/code&gt;, &lt;code&gt;MACHTYPE&lt;/code&gt;, and &lt;code&gt;HOSTNAME&lt;/code&gt;), and the instance of Bash that is running (&lt;code&gt;BASH&lt;/code&gt;, &lt;code&gt;BASH_VERSION&lt;/code&gt;, and &lt;code&gt;BASH_VERSINFO&lt;/code&gt;). See &lt;a href=&quot;bash-variables#Bash-Variables&quot;&gt;Bash Variables&lt;/a&gt;, for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b03e5596026fd937988a600d87ecbad53b046c3" translate="yes" xml:space="preserve">
          <source>Bash builtin commands to manipulate the directory stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb533b109e619c69425173e7ca65ad98116b44f8" translate="yes" xml:space="preserve">
          <source>Bash builtin commands used to interact with job control.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff0be66fbe096224a68531dfd5800e069c0bbad2" translate="yes" xml:space="preserve">
          <source>Bash can be configured to be &lt;small&gt;POSIX&lt;/small&gt;-conformant by default, by specifying the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d65fab620faf5c73fdd4aba418d590920164c5d" translate="yes" xml:space="preserve">
          <source>Bash can expand positional parameters beyond &lt;code&gt;$9&lt;/code&gt; using &lt;code&gt;${&lt;var&gt;num&lt;/var&gt;}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa48b43e05495444b5fe410c516bc1e3db932030" translate="yes" xml:space="preserve">
          <source>Bash can open network connections to arbitrary machines and services with the redirection operators (see &lt;a href=&quot;redirections#Redirections&quot;&gt;Redirections&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba2aa8df3cfb8d66c029b8627befe4cd901e23be" translate="yes" xml:space="preserve">
          <source>Bash configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e37aa50aac07515085daccb4bc0e14a44fd3f67f" translate="yes" xml:space="preserve">
          <source>Bash contains features that appear in other popular shells, and some features that only appear in Bash. Some of the shells that Bash has borrowed concepts from are the Bourne Shell (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e90a6d7cfc8043130cc0ea848e6590913b24f36" translate="yes" xml:space="preserve">
          <source>Bash contains the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8fc436f0b7677c1b09ab20c652aadf53f41fa46" translate="yes" xml:space="preserve">
          <source>Bash does not allow unbalanced quotes. The SVR4.2 shell will silently insert a needed closing quote at &lt;code&gt;EOF&lt;/code&gt; under certain circumstances. This can be the cause of some hard-to-find errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d264ab74eb3b073ba76f5dd5b6e8eb63d2d75305" translate="yes" xml:space="preserve">
          <source>Bash does not fork a subshell when redirecting into or out of a shell control structure such as an &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;while&lt;/code&gt; statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f29215f4d4c2297a44eff82703c7a3ca03622b93" translate="yes" xml:space="preserve">
          <source>Bash does not have the &lt;code&gt;stop&lt;/code&gt; or &lt;code&gt;newgrp&lt;/code&gt; builtins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ff98de1f471c94f01823fbc5399c29f642973cf" translate="yes" xml:space="preserve">
          <source>Bash does not use the &lt;code&gt;SHACCT&lt;/code&gt; variable or perform shell accounting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="767bf3ad996123b6c83fc4a4c8391ab77e9d4bcd" translate="yes" xml:space="preserve">
          <source>Bash ensures that the &lt;code&gt;POSIXLY_CORRECT&lt;/code&gt; variable is set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2695f29f0448deb02a72886a139d2e8d8ea3225e" translate="yes" xml:space="preserve">
          <source>Bash executes the value of the &lt;code&gt;PROMPT_COMMAND&lt;/code&gt; variable as a command before printing the primary prompt, &lt;code&gt;$PS1&lt;/code&gt; (see &lt;a href=&quot;bash-variables#Bash-Variables&quot;&gt;Bash Variables&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a5b430a9110ad6f9b3b28bd8b08cde8282b417b" translate="yes" xml:space="preserve">
          <source>Bash expands and displays &lt;code&gt;PS1&lt;/code&gt; before reading the first line of a command, and expands and displays &lt;code&gt;PS2&lt;/code&gt; before reading the second and subsequent lines of a multi-line command. Bash expands and displays &lt;code&gt;PS0&lt;/code&gt; after it reads a command but before executing it. See &lt;a href=&quot;controlling-the-prompt#Controlling-the-Prompt&quot;&gt;Controlling the Prompt&lt;/a&gt;, for a complete list of prompt string escape sequences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="116c9a09f37376a672b6b462cca1993406778282" translate="yes" xml:space="preserve">
          <source>Bash functions are permitted to have local variables using the &lt;code&gt;local&lt;/code&gt; builtin, and thus useful recursive functions may be written (see &lt;a href=&quot;bash-builtins#Bash-Builtins&quot;&gt;Bash Builtins&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc9818ce89b0bf3dee3310a04b7f6dfe16b2d0ee" translate="yes" xml:space="preserve">
          <source>Bash handles several filenames specially when they are used in redirections, as described in the following table. If the operating system on which Bash is running provides these special files, bash will use them; otherwise it will emulate them internally with the behavior described below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60c5b36217381fe3b270ff6dc191ece42d4d1903" translate="yes" xml:space="preserve">
          <source>Bash has &lt;var&gt;indirect&lt;/var&gt; variable expansion using &lt;code&gt;${!word}&lt;/code&gt; (see &lt;a href=&quot;shell-parameter-expansion#Shell-Parameter-Expansion&quot;&gt;Shell Parameter Expansion&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95f439a70368a904a1d7ede6c3b0266032336d81" translate="yes" xml:space="preserve">
          <source>Bash has command history (see &lt;a href=&quot;bash-history-facilities#Bash-History-Facilities&quot;&gt;Bash History Facilities&lt;/a&gt;) and the &lt;code&gt;history&lt;/code&gt; and &lt;code&gt;fc&lt;/code&gt; builtins to manipulate it. The Bash history list maintains timestamp information and uses the value of the &lt;code&gt;HISTTIMEFORMAT&lt;/code&gt; variable to display it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b299b8526275e73fcf210e53c32f05b32c1ee4d" translate="yes" xml:space="preserve">
          <source>Bash has command-line editing (see &lt;a href=&quot;command-line-editing#Command-Line-Editing&quot;&gt;Command Line Editing&lt;/a&gt;) and the &lt;code&gt;bind&lt;/code&gt; builtin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6477ee86466cc8eddfc168fab96a566cd45cadd" translate="yes" xml:space="preserve">
          <source>Bash has much more optional behavior controllable with the &lt;code&gt;set&lt;/code&gt; builtin (see &lt;a href=&quot;the-set-builtin#The-Set-Builtin&quot;&gt;The Set Builtin&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8462604fa3784398a139f5b3a0d1acffa9df509f" translate="yes" xml:space="preserve">
          <source>Bash has multi-character invocation options (see &lt;a href=&quot;invoking-bash#Invoking-Bash&quot;&gt;Invoking Bash&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a87d05e00ceccd7e5e213a9bf32dee7008af48e" translate="yes" xml:space="preserve">
          <source>Bash has one-dimensional array variables (see &lt;a href=&quot;arrays#Arrays&quot;&gt;Arrays&lt;/a&gt;), and the appropriate variable expansions and assignment syntax to use them. Several of the Bash builtins take options to act on arrays. Bash provides a number of built-in array variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c61bed2865f6e972da028f1d603631a718c16b4" translate="yes" xml:space="preserve">
          <source>Bash has process substitution (see &lt;a href=&quot;process-substitution#Process-Substitution&quot;&gt;Process Substitution&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5323c9808a806dd2a3e97cbe0c709e031d1aa08" translate="yes" xml:space="preserve">
          <source>Bash has the &lt;code&gt;time&lt;/code&gt; reserved word and command timing (see &lt;a href=&quot;pipelines#Pipelines&quot;&gt;Pipelines&lt;/a&gt;). The display of the timing statistics may be controlled with the &lt;code&gt;TIMEFORMAT&lt;/code&gt; variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a464e6bf80471c044018099bbfe8c46f31799c1" translate="yes" xml:space="preserve">
          <source>Bash implements &lt;code&gt;csh&lt;/code&gt;-like history expansion (see &lt;a href=&quot;history-interaction#History-Interaction&quot;&gt;History Interaction&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0b58a57d4447e5bfa8aa63762439f62d3b28bc1" translate="yes" xml:space="preserve">
          <source>Bash implements a &lt;code&gt;csh&lt;/code&gt;-like directory stack, and provides the &lt;code&gt;pushd&lt;/code&gt;, &lt;code&gt;popd&lt;/code&gt;, and &lt;code&gt;dirs&lt;/code&gt; builtins to manipulate it (see &lt;a href=&quot;the-directory-stack#The-Directory-Stack&quot;&gt;The Directory Stack&lt;/a&gt;). Bash also makes the directory stack visible as the value of the &lt;code&gt;DIRSTACK&lt;/code&gt; shell variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d7647c6a9a349d22ae007897f67078abfede54f" translate="yes" xml:space="preserve">
          <source>Bash implements command aliases and the &lt;code&gt;alias&lt;/code&gt; and &lt;code&gt;unalias&lt;/code&gt; builtins (see &lt;a href=&quot;aliases#Aliases&quot;&gt;Aliases&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c831a68bfcdc8fab4e6e39e7e5daf03823604e0b" translate="yes" xml:space="preserve">
          <source>Bash implements essentially the same grammar, parameter and variable expansion, redirection, and quoting as the Bourne Shell. Bash uses the &lt;small&gt;POSIX&lt;/small&gt; standard as the specification of how these features are to be implemented. There are some differences between the traditional Bourne shell and Bash; this section quickly details the differences of significance. A number of these differences are explained in greater depth in previous sections. This section uses the version of &lt;code&gt;sh&lt;/code&gt; included in SVR4.2 (the last version of the historical Bourne shell) as the baseline reference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d898eee1ff41c4acb0fd9bebe80a2cecac808a82" translate="yes" xml:space="preserve">
          <source>Bash implements extended pattern matching features when the &lt;code&gt;extglob&lt;/code&gt; shell option is enabled (see &lt;a href=&quot;pattern-matching#Pattern-Matching&quot;&gt;Pattern Matching&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bbb2c6fafc04cd2f98b59cc6392f2b0a106377d" translate="yes" xml:space="preserve">
          <source>Bash implements the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b15a48c135b87f05c1929116088cd1b59c2432f" translate="yes" xml:space="preserve">
          <source>Bash implements the &lt;code&gt;!&lt;/code&gt; keyword to negate the return value of a pipeline (see &lt;a href=&quot;pipelines#Pipelines&quot;&gt;Pipelines&lt;/a&gt;). Very useful when an &lt;code&gt;if&lt;/code&gt; statement needs to act only if a test fails. The Bash &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13692efe3f1aaf66422cb0e833e3667884c7c8a6" translate="yes" xml:space="preserve">
          <source>Bash implements the &lt;code&gt;for (( &lt;var&gt;expr1&lt;/var&gt; ; &lt;var&gt;expr2&lt;/var&gt; ; &lt;var&gt;expr3&lt;/var&gt; ))&lt;/code&gt; arithmetic for command, similar to the C language (see &lt;a href=&quot;looping-constructs#Looping-Constructs&quot;&gt;Looping Constructs&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8a3a0a0ddac94d2f334434eb25424f78b936e61" translate="yes" xml:space="preserve">
          <source>Bash implements the full set of &lt;small&gt;POSIX&lt;/small&gt; filename expansion operators, including &lt;var&gt;character classes&lt;/var&gt;, &lt;var&gt;equivalence classes&lt;/var&gt;, and &lt;var&gt;collating symbols&lt;/var&gt; (see &lt;a href=&quot;filename-expansion#Filename-Expansion&quot;&gt;Filename Expansion&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c886707487d65b8536cb1bd430acfcdc12fc48ee" translate="yes" xml:space="preserve">
          <source>Bash includes a &lt;code&gt;help&lt;/code&gt; builtin for quick reference to shell facilities (see &lt;a href=&quot;bash-builtins#Bash-Builtins&quot;&gt;Bash Builtins&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fca189adb9103ed71159cb5fb91098d1a90a2897" translate="yes" xml:space="preserve">
          <source>Bash includes a number of features to support a separate debugger for shell scripts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f2581a854538383fedb7e45a84a66bddc37aa19" translate="yes" xml:space="preserve">
          <source>Bash includes brace expansion (see &lt;a href=&quot;brace-expansion#Brace-Expansion&quot;&gt;Brace Expansion&lt;/a&gt;) and tilde expansion (see &lt;a href=&quot;tilde-expansion#Tilde-Expansion&quot;&gt;Tilde Expansion&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f999bc858121512c78fdd5a13a61ba2b603b8089" translate="yes" xml:space="preserve">
          <source>Bash includes the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f05fe047ca703eccb7dfa25a3930ddcc0cdc132f" translate="yes" xml:space="preserve">
          <source>Bash includes the &lt;code&gt;[[&lt;/code&gt; compound command, which makes conditional testing part of the shell grammar (see &lt;a href=&quot;conditional-constructs#Conditional-Constructs&quot;&gt;Conditional Constructs&lt;/a&gt;), including optional regular expression matching.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a12e38fc6970a8b0648535816c0fe6e361556705" translate="yes" xml:space="preserve">
          <source>Bash includes the &lt;code&gt;caller&lt;/code&gt; builtin, which displays the context of any active subroutine call (a shell function or a script executed with the &lt;code&gt;.&lt;/code&gt; or &lt;code&gt;source&lt;/code&gt; builtins). This supports the bash debugger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="743d885ca631dc0401d9228c9d3e841b29339ed5" translate="yes" xml:space="preserve">
          <source>Bash includes the &lt;code&gt;select&lt;/code&gt; compound command, which allows the generation of simple menus (see &lt;a href=&quot;conditional-constructs#Conditional-Constructs&quot;&gt;Conditional Constructs&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddd93b5dc0dd303d99c501c1e7f52d775493b255" translate="yes" xml:space="preserve">
          <source>Bash includes the &lt;code&gt;shopt&lt;/code&gt; builtin, for finer control of shell optional capabilities (see &lt;a href=&quot;the-shopt-builtin#The-Shopt-Builtin&quot;&gt;The Shopt Builtin&lt;/a&gt;), and allows these options to be set and unset at shell invocation (see &lt;a href=&quot;invoking-bash#Invoking-Bash&quot;&gt;Invoking Bash&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bb8b6e0bcc2dec1fa0d611629a713c4bbb4b446" translate="yes" xml:space="preserve">
          <source>Bash includes the &lt;small&gt;POSIX&lt;/small&gt; pattern removal &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6139947b5e85ab79d64b66c23e31237094ee627a" translate="yes" xml:space="preserve">
          <source>Bash inspects the value of the &lt;code&gt;ignoreeof&lt;/code&gt; option to &lt;code&gt;set -o&lt;/code&gt; instead of exiting immediately when it receives an &lt;code&gt;EOF&lt;/code&gt; on its standard input when reading a command (see &lt;a href=&quot;the-set-builtin#The-Set-Builtin&quot;&gt;The Set Builtin&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71926fe5295fc8d59b114b61105289705f44ecba" translate="yes" xml:space="preserve">
          <source>Bash installation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf121c9f1655879d043645186fc6c44e8dacbbc6" translate="yes" xml:space="preserve">
          <source>Bash interprets special backslash-escaped characters in the prompt strings when interactive (see &lt;a href=&quot;controlling-the-prompt#Controlling-the-Prompt&quot;&gt;Controlling the Prompt&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d809ced9a20e430dca76576c6df4d1215938aff9" translate="yes" xml:space="preserve">
          <source>Bash is &lt;small&gt;POSIX&lt;/small&gt;-conformant, even where the &lt;small&gt;POSIX&lt;/small&gt; specification differs from traditional &lt;code&gt;sh&lt;/code&gt; behavior (see &lt;a href=&quot;bash-posix-mode#Bash-POSIX-Mode&quot;&gt;Bash POSIX Mode&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37b5b8f9a555b07d3529f8091527d6a4a9ead810" translate="yes" xml:space="preserve">
          <source>Bash is an acronym for &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81435f0a92436109dfc837576ea9016ffea48ccf" translate="yes" xml:space="preserve">
          <source>Bash is largely compatible with &lt;code&gt;sh&lt;/code&gt; and incorporates useful features from the Korn shell &lt;code&gt;ksh&lt;/code&gt; and the C shell &lt;code&gt;csh&lt;/code&gt;. It is intended to be a conformant implementation of the &lt;small&gt;IEEE&lt;/small&gt;&lt;small&gt;POSIX&lt;/small&gt; Shell and Tools portion of the &lt;small&gt;IEEE&lt;/small&gt;&lt;small&gt;POSIX&lt;/small&gt; specification (&lt;small&gt;IEEE&lt;/small&gt; Standard 1003.1). It offers functional improvements over &lt;code&gt;sh&lt;/code&gt; for both interactive and programming use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e355b3296c04b89d2634437bfef72ab6341f947b" translate="yes" xml:space="preserve">
          <source>Bash is the shell, or command language interpreter, for the &lt;small&gt;GNU&lt;/small&gt; operating system. The name is an acronym for the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb52dbe275583d6b3d01277d2c1bca40f57f722a" translate="yes" xml:space="preserve">
          <source>Bash performs filename expansion on filenames specified as operands to input and output redirection operators (see &lt;a href=&quot;redirections#Redirections&quot;&gt;Redirections&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c98c3bf58b20138e38d5c80a3f61df0cf4ef03fc" translate="yes" xml:space="preserve">
          <source>Bash performs the expansion by executing &lt;var&gt;command&lt;/var&gt; in a subshell environment and replacing the command substitution with the standard output of the command, with any trailing newlines deleted. Embedded newlines are not deleted, but they may be removed during word splitting. The command substitution &lt;code&gt;$(cat &lt;var&gt;file&lt;/var&gt;)&lt;/code&gt; can be replaced by the equivalent but faster &lt;code&gt;$(&amp;lt; &lt;var&gt;file&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0950fd9485da121372d36f565d3c12bfa92ccd8f" translate="yes" xml:space="preserve">
          <source>Bash provides a programmable word completion mechanism (see &lt;a href=&quot;programmable-completion#Programmable-Completion&quot;&gt;Programmable Completion&lt;/a&gt;), and builtin commands &lt;code&gt;complete&lt;/code&gt;, &lt;code&gt;compgen&lt;/code&gt;, and &lt;code&gt;compopt&lt;/code&gt;, to manipulate it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fd51eb1cee21cece2fef3bece4447f62df75bbf" translate="yes" xml:space="preserve">
          <source>Bash provides looping constructs, conditional commands, and mechanisms to group commands and execute them as a unit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4269ad6df17a8fece7b8bbbc28ece0c976d9f195" translate="yes" xml:space="preserve">
          <source>Bash provides one-dimensional indexed and associative array variables. Any variable may be used as an indexed array; the &lt;code&gt;declare&lt;/code&gt; builtin will explicitly declare an array. There is no maximum limit on the size of an array, nor any requirement that members be indexed or assigned contiguously. Indexed arrays are referenced using integers (including arithmetic expressions (see &lt;a href=&quot;shell-arithmetic#Shell-Arithmetic&quot;&gt;Shell Arithmetic&lt;/a&gt;)) and are zero-based; associative arrays use arbitrary strings. Unless otherwise noted, indexed array indices must be non-negative integers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d64f49b0a51331d7311fe0b83efe2779ef25e124" translate="yes" xml:space="preserve">
          <source>Bash provides optional case-insensitive matching for the &lt;code&gt;case&lt;/code&gt; and &lt;code&gt;[[&lt;/code&gt; constructs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5628528a2a5bf4621b9ef668c56ebdf95bcdc4a" translate="yes" xml:space="preserve">
          <source>Bash provides several ways to manipulate the environment. On invocation, the shell scans its own environment and creates a parameter for each name found, automatically marking it for &lt;var&gt;export&lt;/var&gt; to child processes. Executed commands inherit the environment. The &lt;code&gt;export&lt;/code&gt; and &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bf189d9d299b736be01c2acc3f1ad98e00b71b8" translate="yes" xml:space="preserve">
          <source>Bash provides shell arithmetic, the &lt;code&gt;((&lt;/code&gt; compound command (see &lt;a href=&quot;conditional-constructs#Conditional-Constructs&quot;&gt;Conditional Constructs&lt;/a&gt;), and arithmetic expansion (see &lt;a href=&quot;shell-arithmetic#Shell-Arithmetic&quot;&gt;Shell Arithmetic&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bd323432330e377287769c32351bbca8f05029b" translate="yes" xml:space="preserve">
          <source>Bash provides two builtin commands which manipulate the history list and history file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a1a3a5e7f95833d5c5e31aac549284c2b849879" translate="yes" xml:space="preserve">
          <source>Bash provides two ways to group a list of commands to be executed as a unit. When commands are grouped, redirections may be applied to the entire command list. For example, the output of all the commands in the list may be redirected to a single stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc15d0b2136f110a47248e25281e66c86eb8571e" translate="yes" xml:space="preserve">
          <source>Bash removes an exited background process&amp;rsquo;s status from the list of such statuses after the &lt;code&gt;wait&lt;/code&gt; builtin is used to obtain it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47b9dfe739f34670c2f2fb655d438fb5c6e5256f" translate="yes" xml:space="preserve">
          <source>Bash scripts often begin with &lt;code&gt;#! /bin/bash&lt;/code&gt; (assuming that Bash has been installed in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d812e15b0b5610dfdf8109d8905fbf7fdad870a" translate="yes" xml:space="preserve">
          <source>Bash supports the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecc62c79e4b33f78d61ddccfee7b3649b6812e73" translate="yes" xml:space="preserve">
          <source>Bash supports the &lt;code&gt;$&quot;&amp;hellip;&quot;&lt;/code&gt; quoting syntax to do locale-specific translation of the characters between the double quotes. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e624dec237a0450c66dca01ba02eec98d4311003" translate="yes" xml:space="preserve">
          <source>Bash supports the following looping constructs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fad306c7ec97bd44cb9be5688f908929552293e0" translate="yes" xml:space="preserve">
          <source>Bash treats a number of filenames specially when they are used in redirection operators (see &lt;a href=&quot;redirections#Redirections&quot;&gt;Redirections&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a36c6522edce07265285b065f3bc113caea97c86" translate="yes" xml:space="preserve">
          <source>Bash uses certain shell variables in the same way as the Bourne shell. In some cases, Bash assigns a default value to the variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3861c8e89059b54aa25a00a741a22b183e168af9" translate="yes" xml:space="preserve">
          <source>Bash will check for mail periodically, depending on the values of the &lt;code&gt;MAIL&lt;/code&gt;, &lt;code&gt;MAILPATH&lt;/code&gt;, and &lt;code&gt;MAILCHECK&lt;/code&gt; shell variables (see &lt;a href=&quot;bash-variables#Bash-Variables&quot;&gt;Bash Variables&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a031fb4b54459f27072c9ee40c4b13ebd94a781" translate="yes" xml:space="preserve">
          <source>Basic Installation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccae6c15c8f6bb4867f2de8a73cbe190c92425a6" translate="yes" xml:space="preserve">
          <source>Basic Shell Features</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="133040f7192692ef859238af29614bca61765eaf" translate="yes" xml:space="preserve">
          <source>Before a command is executed, its input and output may be &lt;var&gt;redirected&lt;/var&gt; using a special notation interpreted by the shell. Redirection allows commands&amp;rsquo; file handles to be duplicated, opened, closed, made to refer to different files, and can change the files the command reads from and writes to. Redirection may also be used to modify file handles in the current shell execution environment. The following redirection operators may precede or appear anywhere within a simple command or may follow a command. Redirections are processed in the order they appear, from left to right.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d419c32f096f03315c886b88ccd7749e6d5635ab" translate="yes" xml:space="preserve">
          <source>Begin a sequence of non-printing characters. This could be used to embed a terminal control sequence into the prompt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bf611a231f374f343178fd17d3ca701a309e304" translate="yes" xml:space="preserve">
          <source>Begin assigning to &lt;var&gt;array&lt;/var&gt; at index &lt;var&gt;origin&lt;/var&gt;. The default index is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a38a7f00d8703cdac6c8021898552624864dd359" translate="yes" xml:space="preserve">
          <source>Begin saving the characters typed into the current keyboard macro.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d90a92b3e31feb999071d30ada8eac06ce9fb469" translate="yes" xml:space="preserve">
          <source>Bindable Readline Commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5b2a61d38fa7ceb83f1e087e477bbdab50fb795" translate="yes" xml:space="preserve">
          <source>Boolean variables (those that can be set to on or off) are set to on if the value is null or empty, &lt;var&gt;on&lt;/var&gt; (case-insensitive), or 1. Any other value results in the variable being set to off.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6951c04d742c15e74e65aafce21ab81d54b6fda5" translate="yes" xml:space="preserve">
          <source>Bourne Shell Builtins</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af1c2e17f5314f5d3c045d05ac2ace66b95b558d" translate="yes" xml:space="preserve">
          <source>Bourne Shell Variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78d7155d38e7898e65c8556e73ab878f79cc7745" translate="yes" xml:space="preserve">
          <source>Bourne shell</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3397ab510fbae88c92acd3be3c9a2f21d54ea643" translate="yes" xml:space="preserve">
          <source>Bourne-Again SHell</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53675dae9e58acb722badeebf978bee9e5e16f3f" translate="yes" xml:space="preserve">
          <source>Brace Expansion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10434965a7fa45f7f832b0aec27799f8228e6825" translate="yes" xml:space="preserve">
          <source>Brace expansion is a mechanism by which arbitrary strings may be generated. This mechanism is similar to &lt;var&gt;filename expansion&lt;/var&gt; (see &lt;a href=&quot;filename-expansion#Filename-Expansion&quot;&gt;Filename Expansion&lt;/a&gt;), but the filenames generated need not exist. Patterns to be brace expanded take the form of an optional &lt;var&gt;preamble&lt;/var&gt;, followed by either a series of comma-separated strings or a sequence expression between a pair of braces, followed by an optional &lt;var&gt;postscript&lt;/var&gt;. The preamble is prefixed to each string contained within the braces, and the postscript is then appended to each resulting string, expanding left to right.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d9ab8c5d65b938be3c42c43a91019132ac43d31" translate="yes" xml:space="preserve">
          <source>Brace expansion is performed before any other expansions, and any characters special to other expansions are preserved in the result. It is strictly textual. Bash does not apply any syntactic interpretation to the context of the expansion or the text between the braces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37fc2e3d3ea6a3e81a4b67fed6280583663375cd" translate="yes" xml:space="preserve">
          <source>Brace expansions may be nested. The results of each expanded string are not sorted; left to right order is preserved. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93821391b71cff58968e2fa9b593d32441d80132" translate="yes" xml:space="preserve">
          <source>Breaks the input into words and operators, obeying the quoting rules described in &lt;a href=&quot;quoting#Quoting&quot;&gt;Quoting&lt;/a&gt;. These tokens are separated by &lt;code&gt;metacharacters&lt;/code&gt;. Alias expansion is performed by this step (see &lt;a href=&quot;aliases#Aliases&quot;&gt;Aliases&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46b73fe84096c617168a5ee324fc2931f9952181" translate="yes" xml:space="preserve">
          <source>Brings the &lt;var&gt;N&lt;/var&gt;th directory (counting from the left of the list printed by &lt;code&gt;dirs&lt;/code&gt;, starting with zero) to the top of the list by rotating the stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ed03600e19513d74388cb1ad97a36d32115c41d" translate="yes" xml:space="preserve">
          <source>Brings the &lt;var&gt;N&lt;/var&gt;th directory (counting from the right of the list printed by &lt;code&gt;dirs&lt;/code&gt;, starting with zero) to the top of the list by rotating the stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7f69c3c309831e8c75433aa20c6c04149fceec0" translate="yes" xml:space="preserve">
          <source>Builtin Index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fca58325283ee35d6a1ef927aa1c6c2591236dbc" translate="yes" xml:space="preserve">
          <source>Builtin commands are contained within the shell itself. When the name of a builtin command is used as the first word of a simple command (see &lt;a href=&quot;simple-commands#Simple-Commands&quot;&gt;Simple Commands&lt;/a&gt;), the shell executes the command directly, without invoking another program. Builtin commands are necessary to implement functionality impossible or inconvenient to obtain with separate utilities.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abecce7e0f5df146665e14a1eb97afda29469f52" translate="yes" xml:space="preserve">
          <source>Builtin commands classified specially by POSIX.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6a4ea9017cbe0e1f10d114084edf6a9ff6d3079" translate="yes" xml:space="preserve">
          <source>Builtin commands inherited from the Bourne Shell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fb02a4fbe3fb47e69e22b734705b7f4fa53dd38" translate="yes" xml:space="preserve">
          <source>Builtin commands to specify how to complete arguments for a particular command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa07ce53ecc83b10257b6124246c366a56178e23" translate="yes" xml:space="preserve">
          <source>Builtins to modify shell attributes and optional behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7fa12b8b38db827d7ce92009cc9fa53135c3ce6" translate="yes" xml:space="preserve">
          <source>By default, &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d807145e5d7c1cda3ea5b36d16a797ed65cf0d01" translate="yes" xml:space="preserve">
          <source>By default, if a compspec is found, whatever it generates is returned to the completion code as the full set of possible completions. The default Bash completions are not attempted, and the Readline default of filename completion is disabled. If the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ea55945f2d6bda03f80b5e247bbd9f33429914b" translate="yes" xml:space="preserve">
          <source>By default, or when the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="871734275acfef964a064fb4b7708161a8adeed9" translate="yes" xml:space="preserve">
          <source>By default, this command is unbound.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32096c2e0eff33d844ee6d675407ace18289357d" translate="yes" xml:space="preserve">
          <source>C</source>
          <target state="translated">C</target>
        </trans-unit>
        <trans-unit id="f631ddb4a806d2687f4d5c8aa3c048b37442b386" translate="yes" xml:space="preserve">
          <source>C-J</source>
          <target state="translated">C-J</target>
        </trans-unit>
        <trans-unit id="5ec9d3dadc7abaeb1f5f16db2365b2aeb6a2f74b" translate="yes" xml:space="preserve">
          <source>C-_</source>
          <target state="translated">C-_</target>
        </trans-unit>
        <trans-unit id="3bff8fb1aa290267671b1c50e3b32db24f00b295" translate="yes" xml:space="preserve">
          <source>C-a</source>
          <target state="translated">C-a</target>
        </trans-unit>
        <trans-unit id="c204a76fc3c1123c96b13dd7ec922d02d4b00e91" translate="yes" xml:space="preserve">
          <source>C-b</source>
          <target state="translated">C-b</target>
        </trans-unit>
        <trans-unit id="1d8e75405de8be939b05db3eef9ab4daa516674d" translate="yes" xml:space="preserve">
          <source>C-d</source>
          <target state="translated">C-d</target>
        </trans-unit>
        <trans-unit id="a7ef1e89e28b60bd53a0a5ab746fbcd131fdf224" translate="yes" xml:space="preserve">
          <source>C-e</source>
          <target state="translated">C-e</target>
        </trans-unit>
        <trans-unit id="dd71d43937255c2ba419c077fa824865f8267186" translate="yes" xml:space="preserve">
          <source>C-f</source>
          <target state="translated">C-f</target>
        </trans-unit>
        <trans-unit id="a6d13ed5d2d00101157246b7ae1e91a19d7d7406" translate="yes" xml:space="preserve">
          <source>C-g</source>
          <target state="translated">C-g</target>
        </trans-unit>
        <trans-unit id="d5eeac2f32301e2b964f421e02a44c5afa000881" translate="yes" xml:space="preserve">
          <source>C-k</source>
          <target state="translated">C-k</target>
        </trans-unit>
        <trans-unit id="2fef5b5a274737535a312ecc5d6b8de717c1cb77" translate="yes" xml:space="preserve">
          <source>C-l</source>
          <target state="translated">C-l</target>
        </trans-unit>
        <trans-unit id="c0aa2536c4ea15884e7f0c5dd834cc587ba56461" translate="yes" xml:space="preserve">
          <source>C-o</source>
          <target state="translated">C-o</target>
        </trans-unit>
        <trans-unit id="1666955c646a9bb3fabdb2404112bd45b66ccb34" translate="yes" xml:space="preserve">
          <source>C-q</source>
          <target state="translated">C-q</target>
        </trans-unit>
        <trans-unit id="74b18abb702cb69395f60707416dd8e1f9e92a32" translate="yes" xml:space="preserve">
          <source>C-r</source>
          <target state="translated">C-r</target>
        </trans-unit>
        <trans-unit id="78540d990eb5e51e46b3d550d8999b517398872e" translate="yes" xml:space="preserve">
          <source>C-s</source>
          <target state="translated">C-s</target>
        </trans-unit>
        <trans-unit id="ac7de9aff7d0daffb3ae53140a783f411f89c587" translate="yes" xml:space="preserve">
          <source>C-u</source>
          <target state="translated">C-u</target>
        </trans-unit>
        <trans-unit id="8e0be97e2cc76979d93e15014888863a6e79a7af" translate="yes" xml:space="preserve">
          <source>C-w</source>
          <target state="translated">C-w</target>
        </trans-unit>
        <trans-unit id="298ef629795cfb23ea736c739c02035ede13e0c6" translate="yes" xml:space="preserve">
          <source>C-x</source>
          <target state="translated">C-x</target>
        </trans-unit>
        <trans-unit id="48565510392a43d2b0a14deded91b2a0fe29f254" translate="yes" xml:space="preserve">
          <source>C-x C-u</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f286461016d3e4db77e8a575a1f55b2d71886961" translate="yes" xml:space="preserve">
          <source>C-y</source>
          <target state="translated">C-y</target>
        </trans-unit>
        <trans-unit id="689dd245f008400f0c1242bb06996164757f3836" translate="yes" xml:space="preserve">
          <source>COLLECTIONS OF DOCUMENTS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9416c652f11562c1a2ac149e08598792cd26d941" translate="yes" xml:space="preserve">
          <source>COMBINING DOCUMENTS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="343a641fe4a78507db7e2252ee941d90557af1bc" translate="yes" xml:space="preserve">
          <source>COPYING IN QUANTITY</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb7016a4f1b2784abc4adfaf50a885353f7a7a75" translate="yes" xml:space="preserve">
          <source>CPU-COMPANY-SYSTEM</source>
          <target state="translated">CPU-COMPANY-SYSTEM</target>
        </trans-unit>
        <trans-unit id="b926330f493034aa4fdc02c7fbed8ace2f494177" translate="yes" xml:space="preserve">
          <source>Capitalize the current (or following) word. With a negative argument, capitalize the previous word, but do not move the cursor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6e9221a2feb66cb5ed0d71b8833143034549d0d" translate="yes" xml:space="preserve">
          <source>Cause &lt;code&gt;read&lt;/code&gt; to time out and return failure if a complete line of input (or a specified number of characters) is not read within &lt;var&gt;timeout&lt;/var&gt; seconds. &lt;var&gt;timeout&lt;/var&gt; may be a decimal number with a fractional portion following the decimal point. This option is only effective if &lt;code&gt;read&lt;/code&gt; is reading input from a terminal, pipe, or other special file; it has no effect when reading from regular files. If &lt;code&gt;read&lt;/code&gt; times out, &lt;code&gt;read&lt;/code&gt; saves any partial input read into the specified variable &lt;var&gt;name&lt;/var&gt;. If &lt;var&gt;timeout&lt;/var&gt; is 0, &lt;code&gt;read&lt;/code&gt; returns immediately, without trying to read and data. The exit status is 0 if input is available on the specified file descriptor, non-zero otherwise. The exit status is greater than 128 if the timeout is exceeded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d45406ed9a39fda567678493e4d8511af4c5b5d3" translate="yes" xml:space="preserve">
          <source>Cause &lt;var&gt;shell-command&lt;/var&gt; to be executed whenever &lt;var&gt;keyseq&lt;/var&gt; is entered. When &lt;var&gt;shell-command&lt;/var&gt; is executed, the shell sets the &lt;code&gt;READLINE_LINE&lt;/code&gt; variable to the contents of the Readline line buffer and the &lt;code&gt;READLINE_POINT&lt;/code&gt; variable to the current location of the insertion point. If the executed command changes the value of &lt;code&gt;READLINE_LINE&lt;/code&gt; or &lt;code&gt;READLINE_POINT&lt;/code&gt;, those new values will be reflected in the editing state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47c50d83112a0125eb2f9000824249872255d108" translate="yes" xml:space="preserve">
          <source>Cause a shell function to stop executing and return the value &lt;var&gt;n&lt;/var&gt; to its caller. If &lt;var&gt;n&lt;/var&gt; is not supplied, the return value is the exit status of the last command executed in the function. If &lt;code&gt;return&lt;/code&gt; is executed by a trap handler, the last command used to determine the status is the last command executed before the trap handler. If &lt;code&gt;return&lt;/code&gt; is executed during a &lt;code&gt;DEBUG&lt;/code&gt; trap, the last command used to determine the status is the last command executed by the trap handler before &lt;code&gt;return&lt;/code&gt; was invoked. &lt;code&gt;return&lt;/code&gt; may also be used to terminate execution of a script being executed with the &lt;code&gt;.&lt;/code&gt; (&lt;code&gt;source&lt;/code&gt;) builtin, returning either &lt;var&gt;n&lt;/var&gt; or the exit status of the last command executed within the script as the exit status of the script. If &lt;var&gt;n&lt;/var&gt; is supplied, the return value is its least significant 8 bits. Any command associated with the &lt;code&gt;RETURN&lt;/code&gt; trap is executed before execution resumes after the function or script. The return status is non-zero if &lt;code&gt;return&lt;/code&gt; is supplied a non-numeric argument or is used outside a function and not during the execution of a script by &lt;code&gt;.&lt;/code&gt; or &lt;code&gt;source&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2ba9ddce76bb572c5cf2c46d16a2e07a896c2bc" translate="yes" xml:space="preserve">
          <source>Cause changes to be applied over the entire event line. Used in conjunction with &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f21c44fed98cfb4736d16c5cc7fe27c839dd4bc" translate="yes" xml:space="preserve">
          <source>Cause the &lt;code&gt;direxpand&lt;/code&gt; shell option (see &lt;a href=&quot;the-shopt-builtin#The-Shopt-Builtin&quot;&gt;The Shopt Builtin&lt;/a&gt;) to be enabled by default when the shell starts. It is normally disabled by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bceba0041e73d4a94f23d00a18b56956ea994b29" translate="yes" xml:space="preserve">
          <source>Cause the status of terminated background jobs to be reported immediately, rather than before printing the next primary prompt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="151cb07b853c442fcf3f2ee439bec008eb5d136f" translate="yes" xml:space="preserve">
          <source>Causes &lt;code&gt;dirs&lt;/code&gt; to print the directory stack with one entry per line, prefixing each entry with its index in the stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e782a56479c21e4133b7a66a5f698bdf297beaf9" translate="yes" xml:space="preserve">
          <source>Causes &lt;code&gt;dirs&lt;/code&gt; to print the directory stack with one entry per line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1dbf73480a3691c206740a3e68211fd6855b20e" translate="yes" xml:space="preserve">
          <source>Causes &lt;code&gt;printf&lt;/code&gt; to expand backslash escape sequences in the corresponding &lt;var&gt;argument&lt;/var&gt; in the same way as &lt;code&gt;echo -e&lt;/code&gt; (see &lt;a href=&quot;#Bash-Builtins&quot;&gt;Bash Builtins&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d60384fd31826cbc780a657654c4529869524b3" translate="yes" xml:space="preserve">
          <source>Causes &lt;code&gt;printf&lt;/code&gt; to output the corresponding &lt;var&gt;argument&lt;/var&gt; in a format that can be reused as shell input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e2a62239d9bda86c46cf27afe91bfcf846daca2" translate="yes" xml:space="preserve">
          <source>Causes &lt;code&gt;printf&lt;/code&gt; to output the date-time string resulting from using &lt;var&gt;datefmt&lt;/var&gt; as a format string for &lt;code&gt;strftime&lt;/code&gt;(3). The corresponding &lt;var&gt;argument&lt;/var&gt; is an integer representing the number of seconds since the epoch. Two special argument values may be used: -1 represents the current time, and -2 represents the time the shell was invoked. If no argument is specified, conversion behaves as if -1 had been given. This is an exception to the usual &lt;code&gt;printf&lt;/code&gt; behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a08b8e851c899a305e4c6b9dfe1f2372d7784436" translate="yes" xml:space="preserve">
          <source>Change and report the hard limit associated with a resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2fc2e4da975b43e0683f36b645afeee19f39729" translate="yes" xml:space="preserve">
          <source>Change and report the soft limit associated with a resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44846af504ce324d8605f01db4a18136dd14b76d" translate="yes" xml:space="preserve">
          <source>Change the behavior of Bash where the default operation differs from the &lt;small&gt;POSIX&lt;/small&gt; standard to match the standard (see &lt;a href=&quot;bash-posix-mode#Bash-POSIX-Mode&quot;&gt;Bash POSIX Mode&lt;/a&gt;). This is intended to make Bash behave as a strict superset of that standard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f3ad73393ca1c353c8d3b2a06484f4b02e14846" translate="yes" xml:space="preserve">
          <source>Change the behavior of Bash where the default operation differs from the &lt;small&gt;POSIX&lt;/small&gt; standard to match the standard. This is intended to make Bash behave as a strict superset of that standard. See &lt;a href=&quot;bash-posix-mode#Bash-POSIX-Mode&quot;&gt;Bash POSIX Mode&lt;/a&gt;, for a description of the Bash &lt;small&gt;POSIX&lt;/small&gt; mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbb8974ea34c93350a1529eadfdde40fcc13cca0" translate="yes" xml:space="preserve">
          <source>Change the current working directory to &lt;var&gt;directory&lt;/var&gt;. If &lt;var&gt;directory&lt;/var&gt; is not supplied, the value of the &lt;code&gt;HOME&lt;/code&gt; shell variable is used. Any additional arguments following &lt;var&gt;directory&lt;/var&gt; are ignored. If the shell variable &lt;code&gt;CDPATH&lt;/code&gt; exists, it is used as a search path: each directory name in &lt;code&gt;CDPATH&lt;/code&gt; is searched for &lt;var&gt;directory&lt;/var&gt;, with alternative directory names in &lt;code&gt;CDPATH&lt;/code&gt; separated by a colon (&amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="407af34fa37c33517e6ca05aa8b706bed0d6b46a" translate="yes" xml:space="preserve">
          <source>Change the values of shell attributes and positional parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b59218df63dde48a3feeb097e5bf936cd130ccc" translate="yes" xml:space="preserve">
          <source>Changing directories with the &lt;code&gt;cd&lt;/code&gt; builtin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edb31bb75fd315d4f5c9127f1a5e92abdf33e5f5" translate="yes" xml:space="preserve">
          <source>Chapter describing the command line editing features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dea55cfff2fc60902ee44f5ba817d2ca35aad7f" translate="yes" xml:space="preserve">
          <source>Clear the history list. This may be combined with the other options to replace the history list completely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7dac2e2707d7916613ef16a3d87f5dbfbfa4328" translate="yes" xml:space="preserve">
          <source>Clear the screen and redraw the current line, leaving the current line at the top of the screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fd5babfd59773e4b9a28a740b93b2702bf90485" translate="yes" xml:space="preserve">
          <source>Clear the screen, reprinting the current line at the top.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28d1837dbf4e1b81e1750f5c1f5094d12180a4ac" translate="yes" xml:space="preserve">
          <source>Clears the directory stack by deleting all of the elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e5b9660cde1962adabbbea6202b6f3207a99875" translate="yes" xml:space="preserve">
          <source>Command Execution Environment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e9c66f240ad44b82b702550f265c1d3880beb1e" translate="yes" xml:space="preserve">
          <source>Command Grouping</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3531c279b9620ebb55a288373da55ef0656c4c04" translate="yes" xml:space="preserve">
          <source>Command History Expansion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c58a024ddf74da4e609ddb6cb105c407857b51c5" translate="yes" xml:space="preserve">
          <source>Command Line Editing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72f3d56ef38f562fe2c2db25166a758cad8ae332" translate="yes" xml:space="preserve">
          <source>Command Search and Execution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65bc76a2fc0dadc75a9ee937c1c98b89fa46b4fa" translate="yes" xml:space="preserve">
          <source>Command Substitution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a3eb5154f685e87f207c05d60033093863f0032" translate="yes" xml:space="preserve">
          <source>Command history (see &lt;a href=&quot;bash-history-facilities#Bash-History-Facilities&quot;&gt;Bash History Facilities&lt;/a&gt;) and history expansion (see &lt;a href=&quot;history-interaction#History-Interaction&quot;&gt;History Interaction&lt;/a&gt;) are enabled by default. Bash will save the command history to the file named by &lt;code&gt;$HISTFILE&lt;/code&gt; when a shell with history enabled exits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6866e1be4122ab07ddbef5be25678b5218214da6" translate="yes" xml:space="preserve">
          <source>Command line options that you can give to Bash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7670a907c42228501c1fefdd8569e1b0dc5a50ab" translate="yes" xml:space="preserve">
          <source>Command names. May also be specified as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd2f2df0a1b63211c1ce976e67546cd3aa6532a5" translate="yes" xml:space="preserve">
          <source>Command substitution allows the output of a command to replace the command itself. Command substitution occurs when a command is enclosed as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c153dce78bd4b76aa0a8ee0ea8c07a0a7954bde5" translate="yes" xml:space="preserve">
          <source>Command substitution, commands grouped with parentheses, and asynchronous commands are invoked in a subshell environment that is a duplicate of the shell environment, except that traps caught by the shell are reset to the values that the shell inherited from its parent at invocation. Builtin commands that are invoked as part of a pipeline are also executed in a subshell environment. Changes made to the subshell environment cannot affect the shell&amp;rsquo;s execution environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c3a8db228748db87eec94d2dfa56204049ba4e9" translate="yes" xml:space="preserve">
          <source>Command substitutions may be nested. To nest when using the backquoted form, escape the inner backquotes with backslashes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a9cdc9c6e6a587571f6f4be625717492211deef" translate="yes" xml:space="preserve">
          <source>Commands For Changing Text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f603458c7bba6d82491ab224297eb15a9aed4bd" translate="yes" xml:space="preserve">
          <source>Commands For Completion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcb93c01cd0f418f31a0349a777670d9a04cbbd4" translate="yes" xml:space="preserve">
          <source>Commands For History</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5994dde2ca8cf16f815ac45ae47cf200b7dc696d" translate="yes" xml:space="preserve">
          <source>Commands For Killing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="329cb5ac44eced8dd704aa6b97257cc78935f354" translate="yes" xml:space="preserve">
          <source>Commands For Manipulating The History</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d6bbee6b8e6fbc182b911af2255c2a6d3a8f6c3" translate="yes" xml:space="preserve">
          <source>Commands For Moving</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="084f549cc654f41e93fbd4ca9a2d992ab730dbba" translate="yes" xml:space="preserve">
          <source>Commands For Text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7dd42d8327137689e528bbaecc8cd7e644031ec" translate="yes" xml:space="preserve">
          <source>Commands for changing text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b43bef0f00596bc5eb24bc2b7fc459c70f9cb2f0" translate="yes" xml:space="preserve">
          <source>Commands for killing and yanking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c386e3741a204dc08f2cb9ed3dab37f69eb9e72b" translate="yes" xml:space="preserve">
          <source>Commands in this branch of the &lt;code&gt;$if&lt;/code&gt; directive are executed if the test fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="795c9ad7be7d0758e852ff0e782ef99044a478e9" translate="yes" xml:space="preserve">
          <source>Commands separated by a &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7963e537f2082ae93c50e65ee8a4fd56187d5749" translate="yes" xml:space="preserve">
          <source>Commands that are a part of the shell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fce06e20e5f7f74aacccab40b59b75a56c8f7305" translate="yes" xml:space="preserve">
          <source>Comments</source>
          <target state="translated">Comments</target>
        </trans-unit>
        <trans-unit id="37c3291b28fe4fcf4e224585008aa8ff6ca5de6a" translate="yes" xml:space="preserve">
          <source>Compilers and Options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="493a48c734e8b25f7d6248767601663deada5b9e" translate="yes" xml:space="preserve">
          <source>Compiling For Multiple Architectures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e63b5fda96c513b8c6c03bc1e2bad742363ef10e" translate="yes" xml:space="preserve">
          <source>Complicated extended pattern matching against long strings is slow, especially when the patterns contain alternations and the strings contain multiple matches. Using separate matches against shorter strings, or using arrays of strings instead of a single long string, may be faster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="516ed6a202e3a73524d26a065c84277bee76e76d" translate="yes" xml:space="preserve">
          <source>Compound Commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d04e0a92aec08aa5a7a3ee5216b515499c875319" translate="yes" xml:space="preserve">
          <source>Compound commands are the shell programming language constructs. Each construct begins with a reserved word or control operator and is terminated by a corresponding reserved word or operator. Any redirections (see &lt;a href=&quot;redirections#Redirections&quot;&gt;Redirections&lt;/a&gt;) associated with a compound command apply to all commands within that compound command unless explicitly overridden.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deeb953eb7ef69ac491f2aa55c295d5bec25ce8b" translate="yes" xml:space="preserve">
          <source>Concept Index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28fc57178ee113ee9b3b5b60ed84e7c75da158b8" translate="yes" xml:space="preserve">
          <source>Conditional Constructs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fcb10c945dc8f468ebf8ec6946b032b19bb158c" translate="yes" xml:space="preserve">
          <source>Conditional Init Constructs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dd4675cc1d958e94e008d6aad8c15b5564f2e5c" translate="yes" xml:space="preserve">
          <source>Conditional expressions are used by the &lt;code&gt;[[&lt;/code&gt; compound command and the &lt;code&gt;test&lt;/code&gt; and &lt;code&gt;[&lt;/code&gt; builtin commands. The &lt;code&gt;test&lt;/code&gt; and &lt;code&gt;[&lt;/code&gt; commands determine their behavior based on the number of arguments; see the descriptions of those commands for any other command-specific actions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8117a98ae9efe0fd1a71e49ecf482c7ea30b28ad" translate="yes" xml:space="preserve">
          <source>Conditional key bindings in the inputrc file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d2b4a065324ed3c3da628bf5cb57fa94ad07e10" translate="yes" xml:space="preserve">
          <source>Connecting the input and output of several commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdb15c9f53115c5f9339546588f580f1bdc65ae3" translate="yes" xml:space="preserve">
          <source>Constants with a leading 0 are interpreted as octal numbers. A leading &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a2442c733dc4d42993d58f2384aa9304cc50262" translate="yes" xml:space="preserve">
          <source>Contains the name of a file in the same format as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1210cc85a00377bcbf73a439aada0aeb8e0e481b" translate="yes" xml:space="preserve">
          <source>Controlling the Prompt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec96b0a3286527b85362f13dfabb077e7ab45469" translate="yes" xml:space="preserve">
          <source>Controls the action of the shell on receipt of an &lt;code&gt;EOF&lt;/code&gt; character as the sole input. If set, the value denotes the number of consecutive &lt;code&gt;EOF&lt;/code&gt; characters that can be read as the first character on an input line before the shell will exit. If the variable exists but does not have a numeric value, or has no value, then the default is 10. If the variable does not exist, then &lt;code&gt;EOF&lt;/code&gt; signifies the end of input to the shell. This is only in effect for interactive shells.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6002ea4f042d9c85781650caca5521414dd1dd5d" translate="yes" xml:space="preserve">
          <source>Controls what happens when Readline wants to ring the terminal bell. If set to &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c8a7a03c931d858f642a0ffafb460a33532b63c" translate="yes" xml:space="preserve">
          <source>Coprocesses</source>
          <target state="translated">Coprocesses</target>
        </trans-unit>
        <trans-unit id="17b241230490f5583b64ce80f56e5cecb791875d" translate="yes" xml:space="preserve">
          <source>Copy at most &lt;var&gt;count&lt;/var&gt; lines. If &lt;var&gt;count&lt;/var&gt; is 0, all lines are copied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2995b8338a670d15c3a7987a7725e793d3a22024" translate="yes" xml:space="preserve">
          <source>Copy the text in the region to the kill buffer, so it can be yanked right away. By default, this command is unbound.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6edd8b1e99d094b05e212ad2e9cdcfbbb8edb9cb" translate="yes" xml:space="preserve">
          <source>Copy the word before point to the kill buffer. The word boundaries are the same as &lt;code&gt;backward-word&lt;/code&gt;. By default, this command is unbound.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39206e54a93de37916e39080e9da691c9ed6b95d" translate="yes" xml:space="preserve">
          <source>Copy the word following point to the kill buffer. The word boundaries are the same as &lt;code&gt;forward-word&lt;/code&gt;. By default, this command is unbound.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb533437eb7cefc07001f7d7e4ce2e0bf7aa1f2c" translate="yes" xml:space="preserve">
          <source>Copying and sharing this documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="154784820baffd42626a2bcde20aa0381aaae095" translate="yes" xml:space="preserve">
          <source>Copyright &amp;copy; 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e437b60a6846f553df7ff9d9a352503a73b81bd3" translate="yes" xml:space="preserve">
          <source>Currently ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5598cb3abd03849adb9eaee518fab6b063f99cb" translate="yes" xml:space="preserve">
          <source>Customizing Readline from a user&amp;rsquo;s view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="456434af162a43c823a1d4cdd26b1c5b97f08279" translate="yes" xml:space="preserve">
          <source>Customizing the various prompt strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50c9e8d5fc98727b4bbc93cf5d64a68db647f04f" translate="yes" xml:space="preserve">
          <source>D</source>
          <target state="translated">D</target>
        </trans-unit>
        <trans-unit id="7598c12b4a70fa343637f2c4c2dca159a35b4951" translate="yes" xml:space="preserve">
          <source>D.1 Index of Shell Builtin Commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19e84ca2c8daeb36c5dfe51d86645a62916d14f3" translate="yes" xml:space="preserve">
          <source>D.2 Index of Shell Reserved Words</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4130497620e966568118983378d1ee9151eede8" translate="yes" xml:space="preserve">
          <source>D.3 Parameter and Variable Index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5f57692ba17d9a6628c4dfb5fd9f9116c9d1fb3" translate="yes" xml:space="preserve">
          <source>D.4 Function Index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f44a81b5ff3b971a394abd9b48b4b95bf752b406" translate="yes" xml:space="preserve">
          <source>D.5 Concept Index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e89825345af888d019c3ca060aaf072506138fc4" translate="yes" xml:space="preserve">
          <source>DTD</source>
          <target state="translated">DTD</target>
        </trans-unit>
        <trans-unit id="14bac27f501e56e1330b139c1e675077f49a75f8" translate="yes" xml:space="preserve">
          <source>Declare variables and give them attributes. If no &lt;var&gt;name&lt;/var&gt;s are given, then display the values of variables instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37a0421700cbe55eec8f11b79aaf182741f47044" translate="yes" xml:space="preserve">
          <source>Define if you are using the Andrew File System from Transarc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef613db953f4340bc7153c20f363c57f180784f2" translate="yes" xml:space="preserve">
          <source>Define this to make Bash link with a locally-installed version of Readline rather than the version in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca04fd20766d012c25aa0a3182361559b7f1886f" translate="yes" xml:space="preserve">
          <source>Define this to use the Purify memory allocation checker from Rational Software.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15225baac48fc3d689cb2b0f74b936eff4339ff7" translate="yes" xml:space="preserve">
          <source>Definitions</source>
          <target state="translated">Definitions</target>
        </trans-unit>
        <trans-unit id="03eaa9c0f30f58eed3bd3ee843ddbe2bab334034" translate="yes" xml:space="preserve">
          <source>Delete all spaces and tabs around point. By default, this is unbound.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e6b8f60fe75e6eeffcfdf108abcfd3c18849c6e" translate="yes" xml:space="preserve">
          <source>Delete any section Entitled &amp;ldquo;Endorsements&amp;rdquo;. Such a section may not be included in the Modified Version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b1f80c10d6a42826216351ebeda0c58abb0e624" translate="yes" xml:space="preserve">
          <source>Delete the character at point. If this function is bound to the same character as the tty &lt;small&gt;EOF&lt;/small&gt; character, as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8490cc4157bab1c65b97ae0596f3d09c2612107a" translate="yes" xml:space="preserve">
          <source>Delete the character behind the cursor. A numeric argument means to kill the characters instead of deleting them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="929088c27b0eb60e04edcac70b2a85e5a8dc47b1" translate="yes" xml:space="preserve">
          <source>Delete the character to the left of the cursor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12c9cb967e133f91fbd42892eb7fbd87ab2e1dc7" translate="yes" xml:space="preserve">
          <source>Delete the character under the cursor, unless the cursor is at the end of the line, in which case the character behind the cursor is deleted. By default, this is not bound to a key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c01e827109bb2eb4866db3b0d831fb311b52847a" translate="yes" xml:space="preserve">
          <source>Delete the character underneath the cursor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15d917b3b6e79033cd47eceb20b989eb391e0bc9" translate="yes" xml:space="preserve">
          <source>Delete the history entries between positions &lt;var&gt;start&lt;/var&gt; and &lt;var&gt;end&lt;/var&gt;, inclusive. Positive and negative values for &lt;var&gt;start&lt;/var&gt; and &lt;var&gt;end&lt;/var&gt; are interpreted as described above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4342ef8d6b249dc53feb51cdecdd4814285cfadb" translate="yes" xml:space="preserve">
          <source>Delete the history entry at position &lt;var&gt;offset&lt;/var&gt;. If &lt;var&gt;offset&lt;/var&gt; is positive, it should be specified as it appears when the history is displayed. If &lt;var&gt;offset&lt;/var&gt; is negative, it is interpreted as relative to one greater than the last history position, so negative indices count back from the end of the history, and an index of &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5c189768f978900f4a41713270f18f3401e1e06" translate="yes" xml:space="preserve">
          <source>Deletes the character under the cursor if not at the beginning or end of the line (like &lt;code&gt;delete-char&lt;/code&gt;). If at the end of the line, behaves identically to &lt;code&gt;possible-completions&lt;/code&gt;. This command is unbound by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="515824f152954141db6bc26124f50abb56f1d2ef" translate="yes" xml:space="preserve">
          <source>Directory Stack Builtins</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df7e62eba7c2ae042c8910c743f296795ffb04cb" translate="yes" xml:space="preserve">
          <source>Directory names. May also be specified as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3d2fe1fdef2a48f16fdb834b9035a2e098cb975" translate="yes" xml:space="preserve">
          <source>Disable (unset) each &lt;var&gt;optname&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ac702e04dea45effb4c73f463693ecd4b38e8a1" translate="yes" xml:space="preserve">
          <source>Disable filename expansion (globbing).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e42646826d0e17364e9e5fe2f4137fb2e22c1a6" translate="yes" xml:space="preserve">
          <source>Discard the first &lt;var&gt;count&lt;/var&gt; lines read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d237adb5528d6b85814dbb4c413e265a1e07d242" translate="yes" xml:space="preserve">
          <source>Display &lt;var&gt;prompt&lt;/var&gt;, without a trailing newline, before attempting to read any input. The prompt is displayed only if input is coming from a terminal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b041c80d391d71e0ba553ace83ad8b38a5e19f03" translate="yes" xml:space="preserve">
          <source>Display Readline function names and bindings in such a way that they can be used as input or in a Readline initialization file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d6e64c3f73f453a1ccfbfeedd265411e431a08d" translate="yes" xml:space="preserve">
          <source>Display Readline key sequences bound to macros and the strings they output in such a way that they can be used as input or in a Readline initialization file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd7b566fe3c46da759396fc1a10283c1d81c851a" translate="yes" xml:space="preserve">
          <source>Display Readline key sequences bound to macros and the strings they output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="776f5ffc859e970b56a2cf65a0dec6fb2c09db8b" translate="yes" xml:space="preserve">
          <source>Display Readline variable names and values in such a way that they can be used as input or in a Readline initialization file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33c78521ae4336775ee8f73c7db5e7060930f2a0" translate="yes" xml:space="preserve">
          <source>Display a short description of each &lt;var&gt;pattern&lt;/var&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13df7ff2e32c3f53ad77ed98b6ae5e4613663c61" translate="yes" xml:space="preserve">
          <source>Display a usage message on standard output and exit successfully.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d274780c32ae730a904b56aad21ebe752668e21d" translate="yes" xml:space="preserve">
          <source>Display current Readline (see &lt;a href=&quot;command-line-editing#Command-Line-Editing&quot;&gt;Command Line Editing&lt;/a&gt;) key and function bindings, bind a key sequence to a Readline function or macro, or set a Readline variable. Each non-option argument is a command as it would appear in a Readline initialization file (see &lt;a href=&quot;readline-init-file#Readline-Init-File&quot;&gt;Readline Init File&lt;/a&gt;), but each binding or command must be passed as a separate argument; e.g., &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2fe07d8828653828685b8b089dd34fea3b9ad50" translate="yes" xml:space="preserve">
          <source>Display helpful information about builtin commands. If &lt;var&gt;pattern&lt;/var&gt; is specified, &lt;code&gt;help&lt;/code&gt; gives detailed help on all commands matching &lt;var&gt;pattern&lt;/var&gt;, otherwise a list of the builtins is printed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dab646ab7d9d5e63e23a11a14e990f761b1752b" translate="yes" xml:space="preserve">
          <source>Display information only about jobs that have changed status since the user was last notified of their status.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3692188e608394fb73df30d0fe22dce78df518ce" translate="yes" xml:space="preserve">
          <source>Display only a short usage synopsis for each &lt;var&gt;pattern&lt;/var&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c9b571ad4ed3fef1517d31b187245d76cc23e45" translate="yes" xml:space="preserve">
          <source>Display only running jobs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d90cdeb1d587355bbb7e18899c35388a6f883fcc" translate="yes" xml:space="preserve">
          <source>Display only stopped jobs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aca35e42be333733d273a1a92f97c0febbf2cfb" translate="yes" xml:space="preserve">
          <source>Display the description of each &lt;var&gt;pattern&lt;/var&gt; in a manpage-like format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f74b706494fda86557016603c50d49e430f9a8b2" translate="yes" xml:space="preserve">
          <source>Display the list of currently remembered directories. Directories are added to the list with the &lt;code&gt;pushd&lt;/code&gt; command; the &lt;code&gt;popd&lt;/code&gt; command removes directories from the list. The current directory is always the first directory in the stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34d8485b5d897710d31113cb43d9345d4695604e" translate="yes" xml:space="preserve">
          <source>Display version information about the current instance of Bash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27d6038cc3733b6776628504624c331907206f68" translate="yes" xml:space="preserve">
          <source>Displays the &lt;var&gt;N&lt;/var&gt;th directory (counting from the left of the list printed by &lt;code&gt;dirs&lt;/code&gt; when invoked without options), starting with zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3286e62f08c3730ccb855d2688237745eb71f7a0" translate="yes" xml:space="preserve">
          <source>Displays the &lt;var&gt;N&lt;/var&gt;th directory (counting from the right of the list printed by &lt;code&gt;dirs&lt;/code&gt; when invoked without options), starting with zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="990b141381f13519c2b491643df0ac717b8f895e" translate="yes" xml:space="preserve">
          <source>Do not print messages saying which checks are being made.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c58006228703ec1ca66e0a963c3a993b443dee27" translate="yes" xml:space="preserve">
          <source>Do not retitle any existing section to be Entitled &amp;ldquo;Endorsements&amp;rdquo; or to conflict in title with any Invariant Section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="251452a47a32219e90f79387a9da32ca4b8669de" translate="yes" xml:space="preserve">
          <source>Do not use the &lt;small&gt;GNU&lt;/small&gt; Readline library (see &lt;a href=&quot;command-line-editing#Command-Line-Editing&quot;&gt;Command Line Editing&lt;/a&gt;) to read command lines when the shell is interactive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34641df3f2b0c5ff59f2ad11c6421bd4c178800c" translate="yes" xml:space="preserve">
          <source>Do nothing beyond expanding &lt;var&gt;arguments&lt;/var&gt; and performing redirections. The return status is zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a764d2bad3e82bb92ba3944027f7bb869039b6c5" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t load the system-wide startup file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a95295542c97477950a6ff8084078b88de4746f5" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t read the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bc4aeea2b858e5d0b2038c659c17e529fe4085a" translate="yes" xml:space="preserve">
          <source>Double Quotes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4487e41802f7b30a9bf65cded281e61a35c118b" translate="yes" xml:space="preserve">
          <source>Drag the character before the cursor forward over the character at the cursor, moving the cursor forward as well. If the insertion point is at the end of the line, then this transposes the last two characters of the line. Negative arguments have no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baca3816508d8de24fa41abd4773ccf8791d0456" translate="yes" xml:space="preserve">
          <source>Drag the word before point past the word after point, moving point past that word as well. If the insertion point is at the end of the line, this transposes the last two words on the line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0184adedf913b076626646d3f52c3b49c39ad6d" translate="yes" xml:space="preserve">
          <source>E</source>
          <target state="translated">E</target>
        </trans-unit>
        <trans-unit id="4481138366ccad9893f046cefc44f50e2a0b7198" translate="yes" xml:space="preserve">
          <source>ESC f</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="839fbe4758d9a6a0629c5c823cc01bc829cff0e3" translate="yes" xml:space="preserve">
          <source>ESC[11~</source>
          <target state="translated">ESC[11~</target>
        </trans-unit>
        <trans-unit id="3c01441027ee1bb404320471e83b88b9c0a4cc16" translate="yes" xml:space="preserve">
          <source>Each &lt;var&gt;name&lt;/var&gt; is an associative array variable (see &lt;a href=&quot;arrays#Arrays&quot;&gt;Arrays&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d81512733c61c710cd7c3f7c9abe7a612aadaea7" translate="yes" xml:space="preserve">
          <source>Each &lt;var&gt;name&lt;/var&gt; is an indexed array variable (see &lt;a href=&quot;arrays#Arrays&quot;&gt;Arrays&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eedee81fde17cf8668c43cbf595d74b650f6b15d" translate="yes" xml:space="preserve">
          <source>Each clause must be terminated with &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58fa808b767a0867a3f6a1921a95e8c18caa014c" translate="yes" xml:space="preserve">
          <source>Each command in a pipeline is executed in its own subshell, which is a separate process (see &lt;a href=&quot;command-execution-environment#Command-Execution-Environment&quot;&gt;Command Execution Environment&lt;/a&gt;). If the &lt;code&gt;lastpipe&lt;/code&gt; option is enabled using the &lt;code&gt;shopt&lt;/code&gt; builtin (see &lt;a href=&quot;the-shopt-builtin#The-Shopt-Builtin&quot;&gt;The Shopt Builtin&lt;/a&gt;), the last element of a pipeline may be run by the shell process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c03bd2e8cc875a9b297daf5040b75b7f459b3ad" translate="yes" xml:space="preserve">
          <source>Each of the shell metacharacters (see &lt;a href=&quot;definitions#Definitions&quot;&gt;Definitions&lt;/a&gt;) has special meaning to the shell and must be quoted if it is to represent itself. When the command history expansion facilities are being used (see &lt;a href=&quot;history-interaction#History-Interaction&quot;&gt;History Interaction&lt;/a&gt;), the &lt;var&gt;history expansion&lt;/var&gt; character, usually &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="076892cde39a23965cfe9b72faa214616a3b15fe" translate="yes" xml:space="preserve">
          <source>Each redirection that may be preceded by a file descriptor number may instead be preceded by a word of the form {&lt;var&gt;varname&lt;/var&gt;}. In this case, for each redirection operator except &amp;gt;&amp;amp;- and &amp;lt;&amp;amp;-, the shell will allocate a file descriptor greater than 10 and assign it to {&lt;var&gt;varname&lt;/var&gt;}. If &amp;gt;&amp;amp;- or &amp;lt;&amp;amp;- is preceded by {&lt;var&gt;varname&lt;/var&gt;}, the value of &lt;var&gt;varname&lt;/var&gt; defines the file descriptor to close. If {&lt;var&gt;varname&lt;/var&gt;} is supplied, the redirection persists beyond the scope of the command, allowing the shell programmer to manage the file descriptor himself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e01c0b40acc6ff6b5b39dde949086006567c089" translate="yes" xml:space="preserve">
          <source>Each time &lt;code&gt;hash&lt;/code&gt; is invoked, it remembers the full pathnames of the commands specified as &lt;var&gt;name&lt;/var&gt; arguments, so they need not be searched for on subsequent invocations. The commands are found by searching through the directories listed in &lt;code&gt;$PATH&lt;/code&gt;. Any previously-remembered pathname is discarded. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="123e55065b1bb04796125df7a6e3577bc3f78e26" translate="yes" xml:space="preserve">
          <source>Each time this parameter is referenced, a random integer between 0 and 32767 is generated. Assigning a value to this variable seeds the random number generator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9de15e0f54460ee2a8fb5fc34ed944e24292ffde" translate="yes" xml:space="preserve">
          <source>Each time this parameter is referenced, it expands to the number of seconds since the Unix Epoch (see the documentation for the C library function &lt;var&gt;time&lt;/var&gt; for the definition of Epoch). Assignments to &lt;code&gt;EPOCHSECONDS&lt;/code&gt; are ignored. If &lt;code&gt;EPOCHSECONDS&lt;/code&gt; is unset, it loses its special properties, even if it is subsequently reset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d23c65da090f34b9b24f6196cd1c222bc5043e84" translate="yes" xml:space="preserve">
          <source>Each time this parameter is referenced, it expands to the number of seconds since the Unix Epoch as a floating point value with micro-second granularity (see the documentation for the C library function &lt;var&gt;time&lt;/var&gt; for the definition of Epoch). Assignments to &lt;code&gt;EPOCHREALTIME&lt;/code&gt; are ignored. If &lt;code&gt;EPOCHREALTIME&lt;/code&gt; is unset, it loses its special properties, even if it is subsequently reset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab7e24d1a7c1b084e231c996a57a6774124695a9" translate="yes" xml:space="preserve">
          <source>Each variable assignment is checked for unquoted tilde-prefixes immediately following a &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e56658184f5ed970ac31170e5521d416018e6be" translate="yes" xml:space="preserve">
          <source>Each variable or function that is created or modified is given the export attribute and marked for export to the environment of subsequent commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dbbee03214c8ac8b2eef1098847051dd676995d" translate="yes" xml:space="preserve">
          <source>Each version of the License is given a distinguishing version number. If the Document specifies that a particular numbered version of this License &amp;ldquo;or any later version&amp;rdquo; applies to it, you have the option of following the terms and conditions either of that specified version or of any later version that has been published (not as a draft) by the Free Software Foundation. If the Document does not specify a version number of this License, you may choose any version ever published (not as a draft) by the Free Software Foundation. If the Document specifies that a proxy can decide which future versions of this License can be used, that proxy&amp;rsquo;s public statement of acceptance of a version permanently authorizes you to choose that version for the Document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fa0f6fb6e440f220b80c6c2d4888a44c80062d9" translate="yes" xml:space="preserve">
          <source>Enable &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2e79c185211b9e67e06f3c709cc53825cd10fe2" translate="yes" xml:space="preserve">
          <source>Enable (set) each &lt;var&gt;optname&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9b53a652990d85170f7e672f04e386535ffc526" translate="yes" xml:space="preserve">
          <source>Enable and disable builtin shell commands. Disabling a builtin allows a disk command which has the same name as a shell builtin to be executed without specifying a full pathname, even though the shell normally searches for builtins before disk commands. If</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d1b4622d37f1b0ba8c0b777dbb1b996845c765c" translate="yes" xml:space="preserve">
          <source>Enable command history, as described in &lt;a href=&quot;bash-history-facilities#Bash-History-Facilities&quot;&gt;Bash History Facilities&lt;/a&gt;. This option is on by default in interactive shells.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f864b3b1b5c427651d0d571f526ecca9b4ea802d" translate="yes" xml:space="preserve">
          <source>Enable support for &lt;a href=&quot;http://www.unix.org/version2/whatsnew/lfs20mar.html&quot;&gt;large files&lt;/a&gt; if the operating system requires special compiler options to build programs which can access large files. This is enabled by default, if the operating system provides large file support.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caa5de8f3263f981c15d4d450c0a6c3cd1952405" translate="yes" xml:space="preserve">
          <source>Enable the programmable completion facilities (see &lt;a href=&quot;programmable-completion#Programmable-Completion&quot;&gt;Programmable Completion&lt;/a&gt;). If Readline is not enabled, this option has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="091713447eb488afdd7108e2315b018f0bf73492" translate="yes" xml:space="preserve">
          <source>Enabling &lt;small&gt;POSIX&lt;/small&gt; mode has the effect of setting the &lt;code&gt;inherit_errexit&lt;/code&gt; option, so subshells spawned to execute command substitutions inherit the value of the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65863ba0a3dfba5f65b08c1631dea3f9d7e27214" translate="yes" xml:space="preserve">
          <source>Enabling &lt;small&gt;POSIX&lt;/small&gt; mode has the effect of setting the &lt;code&gt;shift_verbose&lt;/code&gt; option, so numeric arguments to &lt;code&gt;shift&lt;/code&gt; that exceed the number of positional parameters will result in an error message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c44f12b29415342c9dc8c04f8dc9beffb4ac4a7e" translate="yes" xml:space="preserve">
          <source>Enclosing characters in double quotes (&amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51c33143a0b205ef393e882cb3244299516f9b08" translate="yes" xml:space="preserve">
          <source>Enclosing characters in single quotes (&amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adf47705460fdb3365a684241a6b22caa01d806e" translate="yes" xml:space="preserve">
          <source>End a sequence of non-printing characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d443a1185575c125d61e0af393b044d7b06ef572" translate="yes" xml:space="preserve">
          <source>Environment</source>
          <target state="translated">Environment</target>
        </trans-unit>
        <trans-unit id="fdd6abe4d3e43555fd6a8a4c1cf45b848e487e53" translate="yes" xml:space="preserve">
          <source>Equivalent to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="435c41f6e2cb1bfb9f7b6bdcc6da8c24703575f7" translate="yes" xml:space="preserve">
          <source>Error tracing is enabled: command substitution, shell functions, and subshells invoked with &lt;code&gt;( &lt;var&gt;command&lt;/var&gt; )&lt;/code&gt; inherit the &lt;code&gt;ERR&lt;/code&gt; trap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9e89b54ec73689553af30dd03b5f687e16616fb" translate="yes" xml:space="preserve">
          <source>Escape Character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8847cc1e6aaa23fabc2736e3a258d26080f52b50" translate="yes" xml:space="preserve">
          <source>Evaluate &lt;var&gt;callback&lt;/var&gt; each time &lt;var&gt;quantum&lt;/var&gt; lines are read. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d14aaf66892b62bb697f75d8e7158e39af015757" translate="yes" xml:space="preserve">
          <source>Evaluate a conditional expression &lt;var&gt;expr&lt;/var&gt; and return a status of 0 (true) or 1 (false). Each operator and operand must be a separate argument. Expressions are composed of the primaries described below in &lt;a href=&quot;bash-conditional-expressions#Bash-Conditional-Expressions&quot;&gt;Bash Conditional Expressions&lt;/a&gt;. &lt;code&gt;test&lt;/code&gt; does not accept any options, nor does it accept and ignore an argument of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdada53f6de22a42b1b986711fcd16d20111c5d8" translate="yes" xml:space="preserve">
          <source>Evaluation is done in fixed-width integers with no check for overflow, though division by 0 is trapped and flagged as an error. The operators and their precedence, associativity, and values are the same as in the C language. The following list of operators is grouped into levels of equal-precedence operators. The levels are listed in order of decreasing precedence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f81dbc80b5fb875e98fd2a393091d0c168bb041f" translate="yes" xml:space="preserve">
          <source>Event Designators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ce75041d97cf817b4ddd136ddb8befefae02f6f" translate="yes" xml:space="preserve">
          <source>Examples of suitable formats for Transparent copies include plain &lt;small&gt;ASCII&lt;/small&gt; without markup, Texinfo input format, LaTeX input format,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db594b9f47a21a740021f6f7e42a911e26ff2311" translate="yes" xml:space="preserve">
          <source>Execute &lt;var&gt;consequent-commands&lt;/var&gt; as long as &lt;var&gt;test-commands&lt;/var&gt; has an exit status of zero. The return status is the exit status of the last command executed in &lt;var&gt;consequent-commands&lt;/var&gt;, or zero if none was executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2de40889c9c1b6f9d350aaca394da8db65d01d54" translate="yes" xml:space="preserve">
          <source>Execute &lt;var&gt;consequent-commands&lt;/var&gt; as long as &lt;var&gt;test-commands&lt;/var&gt; has an exit status which is not zero. The return status is the exit status of the last command executed in &lt;var&gt;consequent-commands&lt;/var&gt;, or zero if none was executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0768f7f48d73715d585e325d6eb196981d869406" translate="yes" xml:space="preserve">
          <source>Execute commands from &lt;var&gt;filename&lt;/var&gt; (instead of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5247ecd754ea4e202126e713baa3638f4913dc8f" translate="yes" xml:space="preserve">
          <source>Executes the command (see &lt;a href=&quot;executing-commands#Executing-Commands&quot;&gt;Executing Commands&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b1d72d3eae7cf1fafda5045b2256094c6e6f7b3" translate="yes" xml:space="preserve">
          <source>Executing Commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a48defe538322ee2f065c55807333afe2662a5c" translate="yes" xml:space="preserve">
          <source>Executing files of shell commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f147bbcdc2ea57f6c81bec669ec536b253dc54b" translate="yes" xml:space="preserve">
          <source>Exit Status</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecb36345a2317b8d4a7a335bcc2c46e455a8278e" translate="yes" xml:space="preserve">
          <source>Exit a login shell, returning a status of &lt;var&gt;n&lt;/var&gt; to the shell&amp;rsquo;s parent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5d3f93533c0dd804b9ad3f7128809a490d7e229" translate="yes" xml:space="preserve">
          <source>Exit after reading and executing one command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48d4f2e17614de2f309b6ea645a4186cf19a62af" translate="yes" xml:space="preserve">
          <source>Exit from a &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;until&lt;/code&gt;, or &lt;code&gt;select&lt;/code&gt; loop. If &lt;var&gt;n&lt;/var&gt; is supplied, the &lt;var&gt;n&lt;/var&gt;th enclosing loop is exited. &lt;var&gt;n&lt;/var&gt; must be greater than or equal to 1. The return status is zero unless &lt;var&gt;n&lt;/var&gt; is not greater than or equal to 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1b67480a95632a330a58d1eec571fd65498ed85" translate="yes" xml:space="preserve">
          <source>Exit immediately if a pipeline (see &lt;a href=&quot;pipelines#Pipelines&quot;&gt;Pipelines&lt;/a&gt;), which may consist of a single simple command (see &lt;a href=&quot;simple-commands#Simple-Commands&quot;&gt;Simple Commands&lt;/a&gt;), a list (see &lt;a href=&quot;lists#Lists&quot;&gt;Lists&lt;/a&gt;), or a compound command (see &lt;a href=&quot;compound-commands#Compound-Commands&quot;&gt;Compound Commands&lt;/a&gt;) returns a non-zero status. The shell does not exit if the command that fails is part of the command list immediately following a &lt;code&gt;while&lt;/code&gt; or &lt;code&gt;until&lt;/code&gt; keyword, part of the test in an &lt;code&gt;if&lt;/code&gt; statement, part of any command executed in a &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; or &lt;code&gt;||&lt;/code&gt; list except the command following the final &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; or &lt;code&gt;||&lt;/code&gt;, any command in a pipeline but the last, or if the command&amp;rsquo;s return status is being inverted with &lt;code&gt;!&lt;/code&gt;. If a compound command other than a subshell returns a non-zero status because a command failed while</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8680a8365685143354bf24857e0e80f34974d351" translate="yes" xml:space="preserve">
          <source>Exit the shell, returning a status of &lt;var&gt;n&lt;/var&gt; to the shell&amp;rsquo;s parent. If &lt;var&gt;n&lt;/var&gt; is omitted, the exit status is that of the last command executed. Any trap on &lt;code&gt;EXIT&lt;/code&gt; is executed before the shell terminates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae95ddb1d665affd3e5c19cac30785e429c3a007" translate="yes" xml:space="preserve">
          <source>Expand &lt;var&gt;words&lt;/var&gt; (see &lt;a href=&quot;shell-expansions#Shell-Expansions&quot;&gt;Shell Expansions&lt;/a&gt;), and execute &lt;var&gt;commands&lt;/var&gt; once for each member in the resultant list, with &lt;var&gt;name&lt;/var&gt; bound to the current member. If &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01e89565aa0bd1b8f0b74bdba39c7f802d41dca9" translate="yes" xml:space="preserve">
          <source>Expand the line as the shell does. This performs alias and history expansion as well as all of the shell word expansions (see &lt;a href=&quot;shell-expansions#Shell-Expansions&quot;&gt;Shell Expansions&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7c3c8adf13cebde9cc1f4c0f3582e189e275c33" translate="yes" xml:space="preserve">
          <source>Expands to the names of variables whose names begin with &lt;var&gt;prefix&lt;/var&gt;, separated by the first character of the &lt;code&gt;IFS&lt;/code&gt; special variable. When &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c66389a5a628bc379008d93de82cba08eaff6a4" translate="yes" xml:space="preserve">
          <source>Expands to the process ID of the current Bash process. This differs from &lt;code&gt;$$&lt;/code&gt; under certain circumstances, such as subshells that do not require Bash to be re-initialized. Assignments to &lt;code&gt;BASHPID&lt;/code&gt; have no effect. If &lt;code&gt;BASHPID&lt;/code&gt; is unset, it loses its special properties, even if it is subsequently reset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeefa260632f8ab2be737460be21e67770fcef62" translate="yes" xml:space="preserve">
          <source>Expansion errors due to references to unbound shell variables after &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b314ffc0ff89a0dc56ea5edc34ae51d3483fc9e" translate="yes" xml:space="preserve">
          <source>Expansion is performed on the command line after it has been split into &lt;code&gt;token&lt;/code&gt;s. There are seven kinds of expansion performed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ac4bab2194250db443120ee805398c4d2705b33" translate="yes" xml:space="preserve">
          <source>Expansion of expressions within braces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="573839c911bc91001ab46fcd6f821b6ad19c30b9" translate="yes" xml:space="preserve">
          <source>Expansion of the ~ character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9110ad38100e0120a06926de56afaff922ad458" translate="yes" xml:space="preserve">
          <source>Explicit null arguments (&lt;code&gt;&quot;&quot;&lt;/code&gt; or &lt;code&gt;''&lt;/code&gt;) are retained and passed to commands as empty strings. Unquoted implicit null arguments, resulting from the expansion of parameters that have no values, are removed. If a parameter with no value is expanded within double quotes, a null argument results and is retained and passed to a command as an empty string. When a quoted null argument appears as part of a word whose expansion is non-null, the null argument is removed. That is, the word &lt;code&gt;-d''&lt;/code&gt; becomes &lt;code&gt;-d&lt;/code&gt; after word splitting and null argument removal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3f6b5a6badea5ccf39a4dce297b467741574a93" translate="yes" xml:space="preserve">
          <source>Expressions may be combined using the following operators, listed in decreasing order of precedence. The evaluation depends on the number of arguments; see below. Operator precedence is used when there are five or more arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e338a97d4b0f0eac5ea1317fd365eb51cf4c99f5" translate="yes" xml:space="preserve">
          <source>Expressions may be combined using the following operators, listed in decreasing order of precedence:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21ca86863c85d11e4ca9e426df3df65eec06873a" translate="yes" xml:space="preserve">
          <source>Expressions may be unary or binary, and are formed from the following primaries. Unary expressions are often used to examine the status of a file. There are string operators and numeric comparison operators as well. Bash handles several filenames specially when they are used in expressions. If the operating system on which Bash is running provides these special files, Bash will use them; otherwise it will emulate them internally with this behavior: If the &lt;var&gt;file&lt;/var&gt; argument to one of the primaries is of the form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e69f20e9f683920d3fb4329abd951e878b1f9372" translate="yes" xml:space="preserve">
          <source>F</source>
          <target state="translated">F</target>
        </trans-unit>
        <trans-unit id="01d518fcb352228f88b2aaae230c46aebb3e8747" translate="yes" xml:space="preserve">
          <source>FUTURE REVISIONS OF THIS LICENSE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc68cabfbfc112b9e52c75611ef91f892f0222be" translate="yes" xml:space="preserve">
          <source>Features found only in Bash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe7ee2460c006b9bc9c729f0f939fa08ac7c8a62" translate="yes" xml:space="preserve">
          <source>File descriptor 0 is duplicated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e8963551cab1ada2bcfb4d478960f55e196b5c5" translate="yes" xml:space="preserve">
          <source>File descriptor 1 is duplicated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d2669fb224bcb2badbb005c1228f5596da7525d" translate="yes" xml:space="preserve">
          <source>File descriptor 2 is duplicated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97ac467ead939914256511ca5ef9560952949b65" translate="yes" xml:space="preserve">
          <source>File names. May also be specified as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b89c3e388470fc18eba45be427abbeefb68e2ec2" translate="yes" xml:space="preserve">
          <source>Filename Expansion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8c77a3481d496a18d74ab5a952f281934bd67b0" translate="yes" xml:space="preserve">
          <source>Finally, Parallel can be used to run a sequence of shell commands in parallel, similar to &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d675708a166f30cb09377438921d0e17b8b674a" translate="yes" xml:space="preserve">
          <source>Finally, any prefix and suffix specified with the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d57771befe6e7f83eed8620aa1d0198dbf19dc2" translate="yes" xml:space="preserve">
          <source>First, the actions specified by the compspec are used. Only matches which are prefixed by the word being completed are returned. When the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6633e2e0caf5fa978444e9320465d62816fc7b0c" translate="yes" xml:space="preserve">
          <source>First, the arithmetic expression &lt;var&gt;expr1&lt;/var&gt; is evaluated according to the rules described below (see &lt;a href=&quot;shell-arithmetic#Shell-Arithmetic&quot;&gt;Shell Arithmetic&lt;/a&gt;). The arithmetic expression &lt;var&gt;expr2&lt;/var&gt; is then evaluated repeatedly until it evaluates to zero. Each time &lt;var&gt;expr2&lt;/var&gt; evaluates to a non-zero value, &lt;var&gt;commands&lt;/var&gt; are executed and the arithmetic expression &lt;var&gt;expr3&lt;/var&gt; is evaluated. If any expression is omitted, it behaves as if it evaluates to 1. The return value is the exit status of the last command in &lt;var&gt;commands&lt;/var&gt; that is executed, or false if any of the expressions is invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3910b9b885a8514ff80f83efddbc51c57949c732" translate="yes" xml:space="preserve">
          <source>First, the command name is identified. If a compspec has been defined for that command, the compspec is used to generate the list of possible completions for the word. If the command word is the empty string (completion attempted at the beginning of an empty line), any compspec defined with the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3df8d48a78e473a88e082ff72f98eb7a4d6617d3" translate="yes" xml:space="preserve">
          <source>For a complete description, refer to the GNU Parallel documentation. A few examples should provide a brief introduction to its use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="821543598f885cdefc1bae15a68128743485ea4e" translate="yes" xml:space="preserve">
          <source>For almost every purpose, shell functions are preferred over aliases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31ea4cd505220cf7dc65cbd234d0346175138c04" translate="yes" xml:space="preserve">
          <source>For any section Entitled &amp;ldquo;Acknowledgements&amp;rdquo; or &amp;ldquo;Dedications&amp;rdquo;, Preserve the Title of the section, and preserve in the section all the substance and tone of each of the contributor acknowledgements and/or dedications given therein.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="700d2c8c8405332c3586f73a8c63632399d9b6d6" translate="yes" xml:space="preserve">
          <source>For each &lt;var&gt;name&lt;/var&gt;, indicate how it would be interpreted if used as a command name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af37e6fbbfbbcac7ffe32d937e4c6af958fa64b4" translate="yes" xml:space="preserve">
          <source>For each argument, a local variable named &lt;var&gt;name&lt;/var&gt; is created, and assigned &lt;var&gt;value&lt;/var&gt;. The &lt;var&gt;option&lt;/var&gt; can be any of the options accepted by &lt;code&gt;declare&lt;/code&gt;. &lt;code&gt;local&lt;/code&gt; can only be used within a function; it makes the variable &lt;var&gt;name&lt;/var&gt; have a visible scope restricted to that function and its children. If &lt;var&gt;name&lt;/var&gt; is &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6db6725e9e7d5c088630e348048d1e73fc7657d3" translate="yes" xml:space="preserve">
          <source>For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d42487498c37e54e1153f378c44e641eeda4bc8" translate="yes" xml:space="preserve">
          <source>For example, if</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee147ac90812d13353d84ebd3346013384640894" translate="yes" xml:space="preserve">
          <source>For example, if a variable &lt;var&gt;var&lt;/var&gt; is declared as local in function &lt;var&gt;func1&lt;/var&gt;, and &lt;var&gt;func1&lt;/var&gt; calls another function &lt;var&gt;func2&lt;/var&gt;, references to &lt;var&gt;var&lt;/var&gt; made from within &lt;var&gt;func2&lt;/var&gt; will resolve to the local variable &lt;var&gt;var&lt;/var&gt; from &lt;var&gt;func1&lt;/var&gt;, shadowing any global variable named &lt;var&gt;var&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec4a58e34a67613579e3965238cc9042ea21fd77" translate="yes" xml:space="preserve">
          <source>For example, in the default C locale, &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b936fbe728022a646cda07e1ff2263d62ff893c" translate="yes" xml:space="preserve">
          <source>For example, it is easy to replace &lt;code&gt;xargs&lt;/code&gt; to gzip all html files in the current directory and its subdirectories:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f0a9b7bb1ae50175807be5f1d4f1df0bdba4cd2" translate="yes" xml:space="preserve">
          <source>For example, the following will match a line (stored in the shell variable &lt;var&gt;line&lt;/var&gt;) if there is a sequence of characters in the value consisting of any number, including zero, of space characters, zero or one instances of &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0c62e669f41bf783284d8c6ac18be626ff41b56" translate="yes" xml:space="preserve">
          <source>For historical reasons, the &lt;small&gt;POSIX&lt;/small&gt; standard has classified several builtin commands as &lt;em&gt;special&lt;/em&gt;. When Bash is executing in &lt;small&gt;POSIX&lt;/small&gt; mode, the special builtins differ from other builtin commands in three respects:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a1b9e9cc3d61418a49a71efef24c922a8fb54b3" translate="yes" xml:space="preserve">
          <source>For instance, assuming that there is a library of compspecs, each kept in a file corresponding to the name of the command, the following default completion function would load completions dynamically:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="784d40d018fd5cad5221ec4e8f15af75cc3d75b4" translate="yes" xml:space="preserve">
          <source>For the shell&amp;rsquo;s purposes, a command which exits with a zero exit status has succeeded. A non-zero exit status indicates failure. This seemingly counter-intuitive scheme is used so there is one well-defined way to indicate success and a variety of ways to indicate various failure modes. When a command terminates on a fatal signal whose number is &lt;var&gt;N&lt;/var&gt;, Bash uses the value 128+&lt;var&gt;N&lt;/var&gt; as the exit status.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6360d0a5f78a80fd2c3b1455015f95ff24d49d46" translate="yes" xml:space="preserve">
          <source>Force the shell to run interactively. Interactive shells are described in &lt;a href=&quot;interactive-shells#Interactive-Shells&quot;&gt;Interactive Shells&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50ec7604326dea76b8e89b9d6e7d98debb6b11f5" translate="yes" xml:space="preserve">
          <source>Function Index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd98fb172ddca2b4583bc0e0f0f1aacefb23c698" translate="yes" xml:space="preserve">
          <source>Function Key 1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1e4211f19a459bd591302cbd0a9d22886846a83" translate="yes" xml:space="preserve">
          <source>Function names and definitions may be listed with the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40d4d818f943e148d8fd7a8459c1099ae6979a20" translate="yes" xml:space="preserve">
          <source>Function names may not be the same as one of the &lt;small&gt;POSIX&lt;/small&gt; special builtins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2e1454a918213c05308895ef589284ac6291134" translate="yes" xml:space="preserve">
          <source>Function names must be valid shell &lt;code&gt;name&lt;/code&gt;s. That is, they may not contain characters other than letters, digits, and underscores, and may not start with a digit. Declaring a function with an invalid name causes a fatal syntax error in non-interactive shells.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9389dc80de92f750ba90e9f50496baed221c08e9" translate="yes" xml:space="preserve">
          <source>Function tracing is enabled: command substitution, shell functions, and subshells invoked with &lt;code&gt;( &lt;var&gt;command&lt;/var&gt; )&lt;/code&gt; inherit the &lt;code&gt;DEBUG&lt;/code&gt; and &lt;code&gt;RETURN&lt;/code&gt; traps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b35666c449bc6a2c93c99818621b519d66fc564c" translate="yes" xml:space="preserve">
          <source>Functions are declared using this syntax:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dba2b9985060c118805c0e646c421556a5e13db" translate="yes" xml:space="preserve">
          <source>Functions may be recursive. The &lt;code&gt;FUNCNEST&lt;/code&gt; variable may be used to limit the depth of the function call stack and restrict the number of function invocations. By default, no limit is placed on the number of recursive calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a36a6718f54524d846894fb04b5b885b4e43e63b" translate="yes" xml:space="preserve">
          <source>G</source>
          <target state="translated">G</target>
        </trans-unit>
        <trans-unit id="0e4ec8a54cfff9c2845fa38842cb6cd1bdea197d" translate="yes" xml:space="preserve">
          <source>GNU Free Documentation License</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f21ecd5fdbaaca4a9b6ad407e43e4a149da7aa62" translate="yes" xml:space="preserve">
          <source>GNU Parallel</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="572b5de1c4916bb0d6d9a63d28c4c31651f40945" translate="yes" xml:space="preserve">
          <source>GNU Parallel can replace certain common idioms that operate on lines read from a file (in this case, filenames listed one per line):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9920f873877a2c00d43ce366e00fcc4a026c2a0f" translate="yes" xml:space="preserve">
          <source>GNU Parallel, as its name suggests, can be used to build and run commands in parallel. You may run the same command with different arguments, whether they are filenames, usernames, hostnames, or lines read from files. GNU Parallel provides shorthand references to many of the most common operations (input lines, various portions of the input line, different ways to specify the input source, and so on). Parallel can replace &lt;code&gt;xargs&lt;/code&gt; or feed commands from its input sources to several different instances of Bash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dbeaadcfa2f14613d9d91d2caac209a10086e09" translate="yes" xml:space="preserve">
          <source>General index for concepts described in this manual.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffb502eed96b0e0d1fc435a5f6ebe2ec48930a05" translate="yes" xml:space="preserve">
          <source>Generate possible completion matches for &lt;var&gt;word&lt;/var&gt; according to the &lt;var&gt;option&lt;/var&gt;s, which may be any option accepted by the &lt;code&gt;complete&lt;/code&gt; builtin with the exception of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd70f263257984118ab228639692bdd13569f0b2" translate="yes" xml:space="preserve">
          <source>Getting Readline to do the typing for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cba4bc90f5a1d0269ef8cbd9482887f10f77f42c" translate="yes" xml:space="preserve">
          <source>Getting at previous lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99323b8804e03c3a5a84c311342b577caf41b7ed" translate="yes" xml:space="preserve">
          <source>Give each &lt;var&gt;name&lt;/var&gt; the &lt;code&gt;trace&lt;/code&gt; attribute. Traced functions inherit the &lt;code&gt;DEBUG&lt;/code&gt; and &lt;code&gt;RETURN&lt;/code&gt; traps from the calling shell. The trace attribute has no special meaning for variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb56493b275ff2bb5b3cd590e09d93ad07e98047" translate="yes" xml:space="preserve">
          <source>Give each &lt;var&gt;name&lt;/var&gt; the &lt;var&gt;nameref&lt;/var&gt; attribute, making it a name reference to another variable. That other variable is defined by the value of &lt;var&gt;name&lt;/var&gt;. All references, assignments, and attribute modifications to &lt;var&gt;name&lt;/var&gt;, except for those using or changing the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20a5f73e86c8343b4b8a010a3e2038de94656587" translate="yes" xml:space="preserve">
          <source>Giving numeric arguments to commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="099b74dac0cc412b3ed58c7cd5d5cceb9d23de2d" translate="yes" xml:space="preserve">
          <source>Group names. May also be specified as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36f92be4931e1adae5787fc625a3cf5e4c6d164a" translate="yes" xml:space="preserve">
          <source>Grouping Commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8542359d131fc7210e38dfd60c72ef251889b55" translate="yes" xml:space="preserve">
          <source>Grouping commands by name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cf184f4c67ad58283ecb19349720b0cae756829" translate="yes" xml:space="preserve">
          <source>H</source>
          <target state="translated">H</target>
        </trans-unit>
        <trans-unit id="9f738ce8457f291b18ee47e665e96baa84f38fcd" translate="yes" xml:space="preserve">
          <source>HTML</source>
          <target state="translated">HTML</target>
        </trans-unit>
        <trans-unit id="37b4ed15dab727027485455d935c87fc79eed0a6" translate="yes" xml:space="preserve">
          <source>Help topics as accepted by the &lt;code&gt;help&lt;/code&gt; builtin (see &lt;a href=&quot;bash-builtins#Bash-Builtins&quot;&gt;Bash Builtins&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46d757ece3ee04110da0daaafd3fb3fe6a92eb57" translate="yes" xml:space="preserve">
          <source>Here are some examples illustrating substring expansion on parameters and subscripted arrays:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed952c00f5cb59401032439885a8d022eb6a90b5" translate="yes" xml:space="preserve">
          <source>Here are the word designators:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6d52f9730a70d6e1c33fd5620375a435833e36e" translate="yes" xml:space="preserve">
          <source>Here is a complete list of the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="697bff6a62f6ddad9affd3c23f639d1a0e233a52" translate="yes" xml:space="preserve">
          <source>Here is an example of an &lt;var&gt;inputrc&lt;/var&gt; file. This illustrates key binding, variable assignment, and conditional syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="600278c68a7feb1a868a5ec74472bbcd6428595c" translate="yes" xml:space="preserve">
          <source>Here is an example that allows the user to pick a filename from the current directory, and displays the name and index of the file selected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3816b46b9f531dbceabf9e71cca67437b8984275" translate="yes" xml:space="preserve">
          <source>Here is an example using &lt;code&gt;case&lt;/code&gt; in a script that could be used to describe one interesting feature of an animal:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0f3fbd7c5047f1575528bc673d7f9ffb5c67b78" translate="yes" xml:space="preserve">
          <source>Here is how to &lt;em&gt;yank&lt;/em&gt; the text back into the line. Yanking means to copy the most-recently-killed text from the kill buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abf00be55adf0eb5ff38d028f70ddf95e8082dc8" translate="yes" xml:space="preserve">
          <source>Here is the list of commands for killing text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c63fcb4d2eeb09ef32194f4d724f16d0dad22d86" translate="yes" xml:space="preserve">
          <source>Here, for example, is how to change from the default Emacs-like key binding to use &lt;code&gt;vi&lt;/code&gt; line editing commands:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="563affddaa469d3c15210019ffdd8fdc943e789b" translate="yes" xml:space="preserve">
          <source>History Expansion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="012f57901bb9d5819c769fd3ba3f1634febf1ab7" translate="yes" xml:space="preserve">
          <source>History Interaction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64f467b3669480337cc7db5e5946619f71ced84f" translate="yes" xml:space="preserve">
          <source>History expansion implements shell-like quoting conventions: a backslash can be used to remove the special handling for the next character; single quotes enclose verbatim sequences of characters, and can be used to inhibit history expansion; and characters enclosed within double quotes may be subject to history expansion, since backslash can escape the history expansion character, but single quotes may not, since they are not treated specially within double quotes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b8069afd6f62815c142b182ee4a99d1754f61a1" translate="yes" xml:space="preserve">
          <source>History expansion is performed immediately after a complete line is read, before the shell breaks it into words, and is performed on each line individually. Bash attempts to inform the history expansion functions about quoting still in effect from previous lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3381af67492132d2a4caf0479daa928e8f33a833" translate="yes" xml:space="preserve">
          <source>History expansion takes place in two parts. The first is to determine which line from the history list should be used during substitution. The second is to select portions of that line for inclusion into the current one. The line selected from the history is called the &lt;em&gt;event&lt;/em&gt;, and the portions of that line that are acted upon are called &lt;em&gt;words&lt;/em&gt;. Various &lt;em&gt;modifiers&lt;/em&gt; are available to manipulate the selected words. The line is broken into words in the same fashion that Bash does, so that several words surrounded by quotes are considered one word. History expansions are introduced by the appearance of the history expansion character, which is &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="514e980bb78844737b79059ed05eea92bb3d5c9f" translate="yes" xml:space="preserve">
          <source>History expansions introduce words from the history list into the input stream, making it easy to repeat commands, insert the arguments to a previous command into the current input line, or fix errors in previous commands quickly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f21bba93908089603c978a9f533a18bdc96a963" translate="yes" xml:space="preserve">
          <source>History of visited directories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fec5fab020547b760b20f31e28d2aae836406f7d" translate="yes" xml:space="preserve">
          <source>History, how to use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44da3f7ae23c0f9579331166ec23b8aeb799208b" translate="yes" xml:space="preserve">
          <source>Hostnames, as taken from the file specified by the &lt;code&gt;HOSTFILE&lt;/code&gt; shell variable (see &lt;a href=&quot;bash-variables#Bash-Variables&quot;&gt;Bash Variables&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00cb2a2ccd7a8407767b30f9e6ea317f10165bb0" translate="yes" xml:space="preserve">
          <source>How Bash expands parameters and the various expansions available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0a559b6e2d7396ec3cfa484dc81a867c185bd73" translate="yes" xml:space="preserve">
          <source>How Bash expands simple commands before executing them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bd508daa344caccdb8a1f6967644e19d7a6dd41" translate="yes" xml:space="preserve">
          <source>How Bash expands variables to their values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5b4a297369087f4c540cb5e57a2efe0b4a1ec2b" translate="yes" xml:space="preserve">
          <source>How Bash finds commands and runs them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="705f2ab5402b3ba23e553c50511554b980eb0aa7" translate="yes" xml:space="preserve">
          <source>How Bash lets you manipulate your command history.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="636121882b92cbf75206f96d8cfbccb5ba32e650" translate="yes" xml:space="preserve">
          <source>How and when quote characters are removed from words.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21ae32736e976f6f479c34b1f4f78ffb20a45583" translate="yes" xml:space="preserve">
          <source>How job control works.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43e045ed8644d318082b5e90c174a9f50fc83f94" translate="yes" xml:space="preserve">
          <source>How often (in seconds) that the shell should check for mail in the files specified in the &lt;code&gt;MAILPATH&lt;/code&gt; or &lt;code&gt;MAIL&lt;/code&gt; variables. The default is 60 seconds. When it is time to check for mail, the shell does so before displaying the primary prompt. If this variable is unset, or set to a value that is not a number greater than or equal to zero, the shell disables mail checking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5122b04b98b6cb7d584575476e649f09c4d7854b" translate="yes" xml:space="preserve">
          <source>How the results of expansion are split into separate arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91ec050b7b1aac4a30b57f25a6a475e935d12134" translate="yes" xml:space="preserve">
          <source>How the shell matches patterns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d71617b2404084d1b08725b89d80672e41640a0a" translate="yes" xml:space="preserve">
          <source>How the shell stores values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b7c6988e806e5646f59104182c8e2acee9730f8" translate="yes" xml:space="preserve">
          <source>How to build and install Bash on your system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f77ae2b628a712579d274e8a46291eef2fccc5d" translate="yes" xml:space="preserve">
          <source>How to compile Bash for more than one kind of system from the same source tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a28eaf6fa6aaf527c86e1e3671902d5ef6673304" translate="yes" xml:space="preserve">
          <source>How to configure Bash for a particular system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0f8e1130fc57d2263078286702d1c19fb91d332" translate="yes" xml:space="preserve">
          <source>How to delete text, and how to get it back!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05e816ad6ff499e8a84de7bfbfe9d1b1996c6c7d" translate="yes" xml:space="preserve">
          <source>How to enable and disable optional features when building Bash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5236d96f61d2792963f3eaf76de99667edb6242" translate="yes" xml:space="preserve">
          <source>How to execute commands sequentially.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="813ed3f8c590e1bdcdb2be481fa1e8c746103f4d" translate="yes" xml:space="preserve">
          <source>How to expand ANSI-C sequences in quoted strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eece67e35162b170cf9d961ea94c3fae85f53d6" translate="yes" xml:space="preserve">
          <source>How to inhibit all interpretation of a sequence of characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6731a99b5ecba395e4289f5c46fac1f860787f9" translate="yes" xml:space="preserve">
          <source>How to remove the special meaning from a single character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e72088797abf5458ef6960bc9656ac417b355a0" translate="yes" xml:space="preserve">
          <source>How to remove the special meaning from characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ffede19048d638ee9ef09f4afdbfea1b37f2fa1" translate="yes" xml:space="preserve">
          <source>How to report bugs in Bash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea31d447e64fb72cd59b54c080c5a8120dbfe6dd" translate="yes" xml:space="preserve">
          <source>How to set special options for various systems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82bc02142700694f6b6122318960d1b2e4428232" translate="yes" xml:space="preserve">
          <source>How to set the various paths used by the installation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c00aae970cf619c619c7b3b920486ff93f661cfd" translate="yes" xml:space="preserve">
          <source>How to share default configuration values among GNU programs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2d972e804df8548b8f356bcc808bb81153df671" translate="yes" xml:space="preserve">
          <source>How to specify comments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a1ba811a9c9c12030393b93f376ebfdfd284926" translate="yes" xml:space="preserve">
          <source>How to specify the possible completions for a specific command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e3be43e6540767e16426cddb4974c3e474d3192" translate="yes" xml:space="preserve">
          <source>How to specify which history line to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56b0959eea40e34990aae302eef8cf5eb5b069ca" translate="yes" xml:space="preserve">
          <source>How to suppress most of the interpretation of a sequence of characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf607e7d7a552c6a715e1836d6df53e868ab77cd" translate="yes" xml:space="preserve">
          <source>How to tell if a shell is interactive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdd8239cb856ce89dd3372fe7dac878485db32ea" translate="yes" xml:space="preserve">
          <source>How to translate strings into different languages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd92555cbedbf0b5f464ebeadeb68f27c787c694" translate="yes" xml:space="preserve">
          <source>How to use arithmetic in shell expansions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a767e1f2275bc99680c33ce015eb5b167ac9c9b3" translate="yes" xml:space="preserve">
          <source>However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca73ab65568cd125c2d27a22bbd9e863c10b675d" translate="yes" xml:space="preserve">
          <source>I</source>
          <target state="translated">I</target>
        </trans-unit>
        <trans-unit id="393aca9083d526ef7eb9fa16234ec9d0e82d9ee3" translate="yes" xml:space="preserve">
          <source>Identical to &lt;code&gt;menu-complete&lt;/code&gt;, but moves backward through the list of possible completions, as if &lt;code&gt;menu-complete&lt;/code&gt; had been given a negative argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="751c68a3471b1c791efaee0a8e7c24ea0c266efd" translate="yes" xml:space="preserve">
          <source>If</source>
          <target state="translated">If</target>
        </trans-unit>
        <trans-unit id="b94b85388613ff812132cfe4fbfdcb534fff787e" translate="yes" xml:space="preserve">
          <source>If &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2359e55a7e838e90e550f9bbd0722902e3d12548" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;set -P&lt;/code&gt; is on, then:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="258b0138a2ba1f7a90d47d1df6e659af050079fa" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;command&lt;/var&gt; is supplied, it replaces the shell without creating a new process. If the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5a1fc3d69ee41cf9a674904c93fe56f1af55533" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;directory&lt;/var&gt; is &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db7df46e1677118816bb3cc96d5f3d1bb016d823" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;fd&lt;/var&gt; is a valid integer, file descriptor &lt;var&gt;fd&lt;/var&gt; is duplicated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6a36b0383dacfeba0b4991eeba9395c27107746" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;host&lt;/var&gt; is a valid hostname or Internet address, and &lt;var&gt;port&lt;/var&gt; is an integer port number or service name, Bash attempts to open the corresponding TCP socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2f0ed2a344f7c56f9a525c7663a15403e6f8997" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;host&lt;/var&gt; is a valid hostname or Internet address, and &lt;var&gt;port&lt;/var&gt; is an integer port number or service name, Bash attempts to open the corresponding UDP socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57b1f907c491aa38b767c7f9954197c94bad6d88" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;jobspec&lt;/var&gt; is given, output is restricted to information about that job. If &lt;var&gt;jobspec&lt;/var&gt; is not supplied, the status of all jobs is listed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d73828af7d0caf7a942515061caf0c104e019b26" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;limit&lt;/var&gt; is given, and the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6941cee87418ba29be43b7c02bc4186c948bebbe" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;name&lt;/var&gt; is an array variable, expands to the list of array indices (keys) assigned in &lt;var&gt;name&lt;/var&gt;. If &lt;var&gt;name&lt;/var&gt; is not an array, expands to 0 if &lt;var&gt;name&lt;/var&gt; is set and null otherwise. When &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90d2bf911877dcd018448b4fa11f17b521ec021a" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;offset&lt;/var&gt; evaluates to a number less than zero, the value is used as an offset in characters from the end of the value of &lt;var&gt;parameter&lt;/var&gt;. If &lt;var&gt;length&lt;/var&gt; evaluates to a number less than zero, it is interpreted as an offset in characters from the end of the value of &lt;var&gt;parameter&lt;/var&gt; rather than a number of characters, and the expansion is the characters between &lt;var&gt;offset&lt;/var&gt; and that result. Note that a negative offset must be separated from the colon by at least one space to avoid being confused with the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3dbd90979f11940416966a17c9767352edc8bca" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;parameter&lt;/var&gt; is &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3c8a9050458b1d1764aa5c7580bd7e24e51cf84" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;parameter&lt;/var&gt; is an indexed array name subscripted by &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a933511083f809e12ed4d366a4222102893821f6" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;parameter&lt;/var&gt; is null or unset, nothing is substituted, otherwise the expansion of &lt;var&gt;word&lt;/var&gt; is substituted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a7bff0cbd3600d20034bbb8a02954436a57e645" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;parameter&lt;/var&gt; is null or unset, the expansion of &lt;var&gt;word&lt;/var&gt; (or a message to that effect if &lt;var&gt;word&lt;/var&gt; is not present) is written to the standard error and the shell, if it is not interactive, exits. Otherwise, the value of &lt;var&gt;parameter&lt;/var&gt; is substituted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25480a13be311d09c224d460b7039fb7e1872e50" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;parameter&lt;/var&gt; is unset or null, the expansion of &lt;var&gt;word&lt;/var&gt; is assigned to &lt;var&gt;parameter&lt;/var&gt;. The value of &lt;var&gt;parameter&lt;/var&gt; is then substituted. Positional parameters and special parameters may not be assigned to in this way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="053b8d6257ac8e3813c4da7fbe800e5f2cd50647" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;parameter&lt;/var&gt; is unset or null, the expansion of &lt;var&gt;word&lt;/var&gt; is substituted. Otherwise, the value of &lt;var&gt;parameter&lt;/var&gt; is substituted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="062df1706c997e4e31b1720431e0fc925e957dd1" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;value&lt;/var&gt; is not given, the variable is assigned the null string. All &lt;var&gt;value&lt;/var&gt;s undergo tilde expansion, parameter and variable expansion, command substitution, arithmetic expansion, and quote removal (detailed below). If the variable has its &lt;code&gt;integer&lt;/code&gt; attribute set, then &lt;var&gt;value&lt;/var&gt; is evaluated as an arithmetic expression even if the &lt;code&gt;$((&amp;hellip;))&lt;/code&gt; expansion is not used (see &lt;a href=&quot;arithmetic-expansion#Arithmetic-Expansion&quot;&gt;Arithmetic Expansion&lt;/a&gt;). Word splitting is not performed, with the exception of &lt;code&gt;&quot;$@&quot;&lt;/code&gt; as explained below. Filename expansion is not performed. Assignment statements may also appear as arguments to the &lt;code&gt;alias&lt;/code&gt;, &lt;code&gt;declare&lt;/code&gt;, &lt;code&gt;typeset&lt;/code&gt;, &lt;code&gt;export&lt;/code&gt;, &lt;code&gt;readonly&lt;/code&gt;, and &lt;code&gt;local&lt;/code&gt; builtin commands (&lt;var&gt;declaration&lt;/var&gt; commands). When in &lt;small&gt;POSIX&lt;/small&gt; mode (see &lt;a href=&quot;bash-posix-mode#Bash-POSIX-Mode&quot;&gt;Bash POSIX Mode&lt;/a&gt;), these builtins may appear in a command after one or more instances of the &lt;code&gt;command&lt;/code&gt; builtin and retain these assignment statement properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8e30842d1ff4669f56f166866d66f203f4de618" translate="yes" xml:space="preserve">
          <source>If Bash finds this variable in the environment when the shell starts with value &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3e57ae73348461cf9aaa21ecb851916a6610333" translate="yes" xml:space="preserve">
          <source>If Bash finds this variable in the environment when the shell starts, it assumes that the shell is running in an Emacs shell buffer and may disable line editing depending on the value of &lt;code&gt;TERM&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d0496e1d2eef697bda7e95938d73fcb6002b3c8" translate="yes" xml:space="preserve">
          <source>If Bash is invoked with the name &lt;code&gt;sh&lt;/code&gt;, it tries to mimic the startup behavior of historical versions of &lt;code&gt;sh&lt;/code&gt; as closely as possible, while conforming to the &lt;small&gt;POSIX&lt;/small&gt; standard as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4034db360dd2a212318b0ef15c222ef04c163a2d" translate="yes" xml:space="preserve">
          <source>If Bash is started with the effective user (group) id not equal to the real user (group) id, and the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a52a0b0164cda121640f100e1a9a4b00b09185f7" translate="yes" xml:space="preserve">
          <source>If Bash is started with the name &lt;code&gt;rbash&lt;/code&gt;, or the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fecb100bbeb2bb3fb9d1c798316637deea64496" translate="yes" xml:space="preserve">
          <source>If Bash is waiting for a command to complete and receives a signal for which a trap has been set, the trap will not be executed until the command completes. When Bash is waiting for an asynchronous command via the &lt;code&gt;wait&lt;/code&gt; builtin, the reception of a signal for which a trap has been set will cause the &lt;code&gt;wait&lt;/code&gt; builtin to return immediately with an exit status greater than 128, immediately after which the trap is executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9ec556c59d8876506edf997447cbccad318b196" translate="yes" xml:space="preserve">
          <source>If Readline is being used to read the line, &lt;var&gt;text&lt;/var&gt; is placed into the editing buffer before editing begins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e69b39329c4f6a621c33584cac4a7b869fc8c9d" translate="yes" xml:space="preserve">
          <source>If a &lt;small&gt;POSIX&lt;/small&gt; special builtin returns an error status, a non-interactive shell exits. The fatal errors are those listed in the &lt;small&gt;POSIX&lt;/small&gt; standard, and include things like passing incorrect options, redirection errors, variable assignment errors for assignments preceding the command name, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13365b36d17aebf61f97d0c028c3adb38488bbd3" translate="yes" xml:space="preserve">
          <source>If a &lt;var&gt;sigspec&lt;/var&gt; is &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;EXIT&lt;/code&gt;, &lt;var&gt;arg&lt;/var&gt; is executed when the shell exits. If a &lt;var&gt;sigspec&lt;/var&gt; is &lt;code&gt;DEBUG&lt;/code&gt;, the command &lt;var&gt;arg&lt;/var&gt; is executed before every simple command, &lt;code&gt;for&lt;/code&gt; command, &lt;code&gt;case&lt;/code&gt; command, &lt;code&gt;select&lt;/code&gt; command, every arithmetic &lt;code&gt;for&lt;/code&gt; command, and before the first command executes in a shell function. Refer to the description of the &lt;code&gt;extdebug&lt;/code&gt; option to the &lt;code&gt;shopt&lt;/code&gt; builtin (see &lt;a href=&quot;the-shopt-builtin#The-Shopt-Builtin&quot;&gt;The Shopt Builtin&lt;/a&gt;) for details of its effect on the &lt;code&gt;DEBUG&lt;/code&gt; trap. If a &lt;var&gt;sigspec&lt;/var&gt; is &lt;code&gt;RETURN&lt;/code&gt;, the command &lt;var&gt;arg&lt;/var&gt; is executed each time a shell function or a script executed with the &lt;code&gt;.&lt;/code&gt; or &lt;code&gt;source&lt;/code&gt; builtins finishes executing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a72fe8140766e82198128f65ccc06b5a29e8da81" translate="yes" xml:space="preserve">
          <source>If a &lt;var&gt;sigspec&lt;/var&gt; is &lt;code&gt;ERR&lt;/code&gt;, the command &lt;var&gt;arg&lt;/var&gt; is executed whenever a pipeline (which may consist of a single simple command), a list, or a compound command returns a non-zero exit status, subject to the following conditions. The &lt;code&gt;ERR&lt;/code&gt; trap is not executed if the failed command is part of the command list immediately following an &lt;code&gt;until&lt;/code&gt; or &lt;code&gt;while&lt;/code&gt; keyword, part of the test following the &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;elif&lt;/code&gt; reserved words, part of a command executed in a &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; or &lt;code&gt;||&lt;/code&gt; list except the command following the final &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; or &lt;code&gt;||&lt;/code&gt;, any command in a pipeline but the last, or if the command&amp;rsquo;s return status is being inverted using &lt;code&gt;!&lt;/code&gt;. These are the same conditions obeyed by the &lt;code&gt;errexit&lt;/code&gt; (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a8dddd2aa79e75a82a4e62f0a3930238f5783e2" translate="yes" xml:space="preserve">
          <source>If a command fails because of an error during expansion or redirection, the exit status is greater than zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f4ebd9a4cebd1e4c2f77f7612e7b5154da1de76" translate="yes" xml:space="preserve">
          <source>If a command generates output, you may want to preserve the input order in the output. For instance, the following command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eac3ba182de487d22ed5cf529f45a62b5c753cbb" translate="yes" xml:space="preserve">
          <source>If a command is followed by a &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="262b44d58aab9d1ead94c6414c6bba9ae14a8b6a" translate="yes" xml:space="preserve">
          <source>If a command is hashed,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e000e30b972d57a747a863f4ae2f50daa0da4ba" translate="yes" xml:space="preserve">
          <source>If a command is not found, the child process created to execute it returns a status of 127. If a command is found but is not executable, the return status is 126.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82ab2070fc48319330344cadfaf540dd91f6c571" translate="yes" xml:space="preserve">
          <source>If a command is terminated by the control operator &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abc1263d6ce57073633b138e4552d86410edbb8c" translate="yes" xml:space="preserve">
          <source>If a compound command or shell function executes in a context where</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c34cd465ee158ec90a06383d802e934fcac69a2" translate="yes" xml:space="preserve">
          <source>If a non-empty directory name from &lt;code&gt;CDPATH&lt;/code&gt; is used, or if &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4fe338c512b01adf0185ba49be309db4cd94526" translate="yes" xml:space="preserve">
          <source>If a required argument is not found, and &lt;code&gt;getopts&lt;/code&gt; is not silent, a question mark (&amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ce89a3e8a43d0af6ec3140b4d3e09d38d3041ca" translate="yes" xml:space="preserve">
          <source>If a section in the Document is Entitled &amp;ldquo;Acknowledgements&amp;rdquo;, &amp;ldquo;Dedications&amp;rdquo;, or &amp;ldquo;History&amp;rdquo;, the requirement (section 4) to Preserve its Title (section 1) will typically require changing the actual title.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a47e743e6678fe4fda2687d0ace14febef67ba1" translate="yes" xml:space="preserve">
          <source>If a special builtin returns an error status, a non-interactive shell exits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e1e3a36072e44af8a5b8ef5e9afa6bf7bd6777e" translate="yes" xml:space="preserve">
          <source>If a word begins with an unquoted tilde character (&amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e7265774f9acdadda1e04c0ab8c46e91b84878b" translate="yes" xml:space="preserve">
          <source>If a word designator is supplied without an event specification, the previous command is used as the event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8510134af5d86088511088bf4e350d6444de7bbc" translate="yes" xml:space="preserve">
          <source>If an attempt to exit Bash is made while jobs are stopped, (or running, if the &lt;code&gt;checkjobs&lt;/code&gt; option is enabled &amp;ndash; see &lt;a href=&quot;the-shopt-builtin#The-Shopt-Builtin&quot;&gt;The Shopt Builtin&lt;/a&gt;), the shell prints a warning message, and if the &lt;code&gt;checkjobs&lt;/code&gt; option is enabled, lists the jobs and their statuses. The &lt;code&gt;jobs&lt;/code&gt; command may then be used to inspect their status. If a second attempt to exit is made without an intervening command, Bash does not print another warning, and any stopped jobs are terminated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3e729ae4620d7ec47b9fe00986079e01731c823" translate="yes" xml:space="preserve">
          <source>If an invalid option is seen, &lt;code&gt;getopts&lt;/code&gt; places &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08a28d3d40efa7e859683962e041e759509d17ef" translate="yes" xml:space="preserve">
          <source>If arguments remain after option processing, and neither the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a87230db9c1a3eef3f9a043437908477ad36a5a" translate="yes" xml:space="preserve">
          <source>If calling &lt;code&gt;stat&lt;/code&gt; on /dev/fd/&lt;var&gt;N&lt;/var&gt; returns different results than calling &lt;code&gt;fstat&lt;/code&gt; on file descriptor &lt;var&gt;N&lt;/var&gt;, supply this option to enable a workaround. This has implications for conditional commands that test file attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09110ceb312edde4d747bc8c112a4b117106a1ca" translate="yes" xml:space="preserve">
          <source>If either</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b44eedd7e90480e54638ad99bec6e704d7f97b27" translate="yes" xml:space="preserve">
          <source>If either the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2067a4e264c6515ec15b4710146ae8692a3581c1" translate="yes" xml:space="preserve">
          <source>If enabled, and the &lt;code&gt;cmdhist&lt;/code&gt; option is enabled, multi-line commands are saved to the history with embedded newlines rather than using semicolon separators where possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="824c50ce709b24ee6904d9f0c2d15a2975891952" translate="yes" xml:space="preserve">
          <source>If multiple options are supplied, the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa5583b1e4cd263dafe517d60e590401e8055a96" translate="yes" xml:space="preserve">
          <source>If no arguments follow this option, then the positional parameters are unset. Otherwise, the positional parameters are set to the &lt;var&gt;arguments&lt;/var&gt;, even if some of them begin with a &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da010fc212bc172ad7f55d1d9211e10715be88e0" translate="yes" xml:space="preserve">
          <source>If no command name results, redirections are performed, but do not affect the current shell environment. A redirection error causes the command to exit with a non-zero status.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a3ff111f4e50defc3c963326ab30b3eb23f0e5c" translate="yes" xml:space="preserve">
          <source>If no command name results, the variable assignments affect the current shell environment. Otherwise, the variables are added to the environment of the executed command and do not affect the current shell environment. If any of the assignments attempts to assign a value to a readonly variable, an error occurs, and the command exits with a non-zero status.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbc609cffce471fc61c562933b7ac61039051f86" translate="yes" xml:space="preserve">
          <source>If no options or arguments are supplied, &lt;code&gt;set&lt;/code&gt; displays the names and values of all shell variables and functions, sorted according to the current locale, in a format that may be reused as input for setting or resetting the currently-set variables. Read-only variables cannot be reset. In &lt;small&gt;POSIX&lt;/small&gt; mode, only shell variables are listed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="383ca8993ad81f9d1fdd804ab740bc0fd9b03292" translate="yes" xml:space="preserve">
          <source>If not supplied with an explicit origin, &lt;code&gt;mapfile&lt;/code&gt; will clear &lt;var&gt;array&lt;/var&gt; before assigning to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f1907c8652486dcdb0aef31f1cba67addf23ad3" translate="yes" xml:space="preserve">
          <source>If set at shell invocation, or in a shell startup file, arrange to execute the debugger profile before the shell starts, identical to the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f88d67aae9fbbcc5e6bf0dc40d8e5dbe106478a0" translate="yes" xml:space="preserve">
          <source>If set to &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d51ed3e3c224e99ee28d845cfc30fd35c5f6b79a" translate="yes" xml:space="preserve">
          <source>If set to a number greater than zero, the value is used as the number of trailing directory components to retain when expanding the &lt;code&gt;\w&lt;/code&gt; and &lt;code&gt;\W&lt;/code&gt; prompt string escapes (see &lt;a href=&quot;controlling-the-prompt#Controlling-the-Prompt&quot;&gt;Controlling the Prompt&lt;/a&gt;). Characters removed are replaced with an ellipsis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b68feee700a99b10103483f1241e248ed15abb0" translate="yes" xml:space="preserve">
          <source>If set to a numeric value greater than 0, defines a maximum function nesting level. Function invocations that exceed this nesting level will cause the current command to abort.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="670809062dff56fe36807cfbddd56a579b60b277" translate="yes" xml:space="preserve">
          <source>If set to a value greater than zero, &lt;code&gt;TMOUT&lt;/code&gt; is treated as the default timeout for the &lt;code&gt;read&lt;/code&gt; builtin (see &lt;a href=&quot;bash-builtins#Bash-Builtins&quot;&gt;Bash Builtins&lt;/a&gt;). The &lt;code&gt;select&lt;/code&gt; command (see &lt;a href=&quot;conditional-constructs#Conditional-Constructs&quot;&gt;Conditional Constructs&lt;/a&gt;) terminates if input does not arrive after &lt;code&gt;TMOUT&lt;/code&gt; seconds when input is coming from a terminal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61462ac11150a1700bd6dd7abcf2d1bfe805e210" translate="yes" xml:space="preserve">
          <source>If set to an integer corresponding to a valid file descriptor, Bash will write the trace output generated when &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55e2801478004893e245bebe0ebd35f57ed0f814" translate="yes" xml:space="preserve">
          <source>If set to the value 1, Bash displays error messages generated by the &lt;code&gt;getopts&lt;/code&gt; builtin command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="796d2c3ac2aaf92fa03e90984e01911ce8a12e62" translate="yes" xml:space="preserve">
          <source>If set, &lt;code&gt;$'&lt;var&gt;string&lt;/var&gt;'&lt;/code&gt; and &lt;code&gt;$&quot;&lt;var&gt;string&lt;/var&gt;&quot;&lt;/code&gt; quoting is performed within &lt;code&gt;${&lt;var&gt;parameter&lt;/var&gt;}&lt;/code&gt; expansions enclosed in double quotes. This option is enabled by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ba697a44bc6bec460de9aa0e93c98c6681c1a45" translate="yes" xml:space="preserve">
          <source>If set, Bash allows filename patterns which match no files to expand to a null string, rather than themselves.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c9c75e31bb9b681e286b348e9c25b106aefd45b" translate="yes" xml:space="preserve">
          <source>If set, Bash attempts spelling correction on directory names during word completion if the directory name initially supplied does not exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ea4e8e58398143c1e3fe450d9180b6a8cff442f" translate="yes" xml:space="preserve">
          <source>If set, Bash attempts to save all lines of a multiple-line command in the same history entry. This allows easy re-editing of multi-line commands. This option is enabled by default, but only has an effect if command history is enabled (see &lt;a href=&quot;bash-history-facilities#Bash-History-Facilities&quot;&gt;Bash History Facilities&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce93cbcbf2bf13d7cbf432beb64352e0cd28ed8f" translate="yes" xml:space="preserve">
          <source>If set, Bash changes its behavior to that of version 3.1 with respect to quoted arguments to the conditional command&amp;rsquo;s &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83dba9325cbab8a67804115d4d3e4f4bb8140b01" translate="yes" xml:space="preserve">
          <source>If set, Bash changes its behavior to that of version 3.2 with respect to locale-specific string comparison when using the &lt;code&gt;[[&lt;/code&gt; conditional command&amp;rsquo;s &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40ce7df7a9e5ee28d00fb786efa9d3c2857f04bb" translate="yes" xml:space="preserve">
          <source>If set, Bash changes its behavior to that of version 4.0 with respect to locale-specific string comparison when using the &lt;code&gt;[[&lt;/code&gt; conditional command&amp;rsquo;s &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dedf38582c3016bc9b5bdedd3a37498ef42f9ef1" translate="yes" xml:space="preserve">
          <source>If set, Bash checks the window size after each external (non-builtin) command and, if necessary, updates the values of &lt;code&gt;LINES&lt;/code&gt; and &lt;code&gt;COLUMNS&lt;/code&gt;. This option is enabled by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5e42f2a09e7e82fc731ab4023374133df9ec15c" translate="yes" xml:space="preserve">
          <source>If set, Bash does not print a warning message if an attempt is made to use a quoted compound array assignment as an argument to &lt;code&gt;declare&lt;/code&gt;, makes word expansion errors non-fatal errors that cause the current command to fail (the default behavior is to make them fatal errors that cause the shell to exit), and does not reset the loop state when a shell function is executed (this allows &lt;code&gt;break&lt;/code&gt; or &lt;code&gt;continue&lt;/code&gt; in a shell function to affect loops in the caller&amp;rsquo;s context).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea1d8d33934bc994a558d7250e4c61adae031df0" translate="yes" xml:space="preserve">
          <source>If set, Bash does not process the replacement string in the pattern substitution word expansion using quote removal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ce2629bcc9863de7662b108ac2c7e18c15136ce" translate="yes" xml:space="preserve">
          <source>If set, Bash includes filenames beginning with a &amp;lsquo;.&amp;rsquo; in the results of filename expansion. The filenames &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="151ad7e893455a1a3a11b2e7117190370182fff0" translate="yes" xml:space="preserve">
          <source>If set, Bash lists the status of any stopped and running jobs before exiting an interactive shell. If any jobs are running, this causes the exit to be deferred until a second exit is attempted without an intervening command (see &lt;a href=&quot;job-control#Job-Control&quot;&gt;Job Control&lt;/a&gt;). The shell always postpones exiting if any jobs are stopped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2538c67c1bddf594e51e1cc292c098d52219f727" translate="yes" xml:space="preserve">
          <source>If set, Bash matches filenames in a case-insensitive fashion when performing filename expansion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fb6f87344f0c630d7cdd094c16b6c4eae76b199" translate="yes" xml:space="preserve">
          <source>If set, Bash matches patterns in a case-insensitive fashion when performing matching while executing &lt;code&gt;case&lt;/code&gt; or &lt;code&gt;[[&lt;/code&gt; conditional commands, when performing pattern substitution word expansions, or when filtering possible completions as part of programmable completion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa526e67dfbf3b2eaf6c5be01047df0255da3a3a" translate="yes" xml:space="preserve">
          <source>If set, Bash quotes all shell metacharacters in filenames and directory names when performing completion. If not set, Bash removes metacharacters such as the dollar sign from the set of characters that will be quoted in completed filenames when these metacharacters appear in shell variable references in words to be completed. This means that dollar signs in variable names that expand to directories will not be quoted; however, any dollar signs appearing in filenames will not be quoted, either. This is active only when bash is using backslashes to quote completed filenames. This variable is set by default, which is the default Bash behavior in versions through 4.2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13f771755d078034a764360a2fa22176df155f9f" translate="yes" xml:space="preserve">
          <source>If set, Bash replaces directory names with the results of word expansion when performing filename completion. This changes the contents of the readline editing buffer. If not set, Bash attempts to preserve what the user typed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23989e8210862fdc11296dd107bf3007f01cdb8b" translate="yes" xml:space="preserve">
          <source>If set, Bash saves the positional parameters to BASH_ARGV and BASH_ARGC before they are used, regardless of whether or not extended debugging mode is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bb7d5096b9817b0ce116f65ab9f347af5231bfe" translate="yes" xml:space="preserve">
          <source>If set, Bash uses its value as the name of a directory in which Bash creates temporary files for the shell&amp;rsquo;s use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9944b303cdb5e5ece86f98632299216c14c3e0f4" translate="yes" xml:space="preserve">
          <source>If set, Bash will send &lt;code&gt;SIGHUP&lt;/code&gt; to all jobs when an interactive login shell exits (see &lt;a href=&quot;signals#Signals&quot;&gt;Signals&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b01c605d4295e6f33c90d7585617060e8ea103f5" translate="yes" xml:space="preserve">
          <source>If set, Bash, when in &lt;small&gt;POSIX&lt;/small&gt; mode, treats a single quote in a double-quoted parameter expansion as a special character. The single quotes must match (an even number) and the characters between the single quotes are considered quoted. This is the behavior of &lt;small&gt;POSIX&lt;/small&gt; mode through version 4.1. The default Bash behavior remains as in previous versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="524dcc79e18562f7fc6d766d279f01ed2606c0e2" translate="yes" xml:space="preserve">
          <source>If set, a command name that is the name of a directory is executed as if it were the argument to the &lt;code&gt;cd&lt;/code&gt; command. This option is only used by interactive shells.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9349e599bc48288e2bc0cf7ae88af2367fbcfd96" translate="yes" xml:space="preserve">
          <source>If set, aliases are expanded as described below under Aliases, &lt;a href=&quot;aliases#Aliases&quot;&gt;Aliases&lt;/a&gt;. This option is enabled by default for interactive shells.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01996a22c68871b270e9aa28572029220ba9f012" translate="yes" xml:space="preserve">
          <source>If set, and Readline is being used, Bash will attempt to perform hostname completion when a word containing a &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ea1e84fbbe570614555a80076b0ddaa4ce41c06" translate="yes" xml:space="preserve">
          <source>If set, and Readline is being used, Bash will not attempt to search the &lt;code&gt;PATH&lt;/code&gt; for possible completions when completion is attempted on an empty line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97eb2bb66597befe93514836295c1094a25f0b91" translate="yes" xml:space="preserve">
          <source>If set, and Readline is being used, a user is given the opportunity to re-edit a failed history substitution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9caef08bbd1665feb673ec3dcbb2b43d20573472" translate="yes" xml:space="preserve">
          <source>If set, and Readline is being used, the results of history substitution are not immediately passed to the shell parser. Instead, the resulting line is loaded into the Readline editing buffer, allowing further modification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0430e5ba6c6756b1d6bb8b315c37057061725213" translate="yes" xml:space="preserve">
          <source>If set, and a file that Bash is checking for mail has been accessed since the last time it was checked, the message &lt;code&gt;&quot;The mail in &lt;var&gt;mailfile&lt;/var&gt; has been read&quot;&lt;/code&gt; is displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6359e84564f30cc604b526da5a0776f958c16285" translate="yes" xml:space="preserve">
          <source>If set, and job control is not active, the shell runs the last command of a pipeline not executed in the background in the current shell environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bceb55bbf9b565581f0c0cd00f48ba9e9be82b89" translate="yes" xml:space="preserve">
          <source>If set, and programmable completion is enabled, Bash treats a command name that doesn&amp;rsquo;t have any completions as a possible alias and attempts alias expansion. If it has an alias, Bash attempts programmable completion using the command word resulting from the expanded alias.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ece77937e574f2030045d06aa2e5131a108b370" translate="yes" xml:space="preserve">
          <source>If set, any trap on &lt;code&gt;DEBUG&lt;/code&gt; and &lt;code&gt;RETURN&lt;/code&gt; are inherited by shell functions, command substitutions, and commands executed in a subshell environment. The &lt;code&gt;DEBUG&lt;/code&gt; and &lt;code&gt;RETURN&lt;/code&gt; traps are normally not inherited in such cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de069878dada4d702b6a71bd07d34a6994d2e6e4" translate="yes" xml:space="preserve">
          <source>If set, any trap on &lt;code&gt;ERR&lt;/code&gt; is inherited by shell functions, command substitutions, and commands executed in a subshell environment. The &lt;code&gt;ERR&lt;/code&gt; trap is normally not inherited in such cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b36606b48de4cdd3638d27e0de266cb6333319b" translate="yes" xml:space="preserve">
          <source>If set, calling &lt;code&gt;unset&lt;/code&gt; on local variables in previous function scopes marks them so subsequent lookups find them unset until that function returns. This is identical to the behavior of unsetting local variables at the current function scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbd5e98b4ada631ae8afc0b3ace1cea1bc1fb5b6" translate="yes" xml:space="preserve">
          <source>If set, command substitution inherits the value of the &lt;code&gt;errexit&lt;/code&gt; option, instead of unsetting it in the subshell environment. This option is enabled when &lt;small&gt;POSIX&lt;/small&gt; mode is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3b8b47e3cef60b23b50d3ae86ab70fe0a37f010" translate="yes" xml:space="preserve">
          <source>If set, do not resolve symbolic links when performing commands such as &lt;code&gt;cd&lt;/code&gt; which change the current directory. The physical directory is used instead. By default, Bash follows the logical chain of directories when performing commands which change the current directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f88675f12cacf08b380a7cf5af85cdd408a6411" translate="yes" xml:space="preserve">
          <source>If set, local variables inherit the value and attributes of a variable of the same name that exists at a previous scope before any new value is assigned. The &lt;var&gt;nameref&lt;/var&gt; attribute is not inherited.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c15922052fb6e6f230ba76c62507ba296628a0d0" translate="yes" xml:space="preserve">
          <source>If set, minor errors in the spelling of a directory component in a &lt;code&gt;cd&lt;/code&gt; command will be corrected. The errors checked for are transposed characters, a missing character, and a character too many. If a correction is found, the corrected path is printed, and the command proceeds. This option is only used by interactive shells.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e16241ced739fb607c71b1addd6fdb4c7812708b" translate="yes" xml:space="preserve">
          <source>If set, patterns which fail to match filenames during filename expansion result in an expansion error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd353747d5b7e8ed81af0e7f92fdf7b1d6ed6f9c" translate="yes" xml:space="preserve">
          <source>If set, prompt strings undergo parameter expansion, command substitution, arithmetic expansion, and quote removal after being expanded as described below (see &lt;a href=&quot;controlling-the-prompt#Controlling-the-Prompt&quot;&gt;Controlling the Prompt&lt;/a&gt;). This option is enabled by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee08c8ac1fddd9aaad9cb8aa674d274440992f17" translate="yes" xml:space="preserve">
          <source>If set, range expressions used in pattern matching bracket expressions (see &lt;a href=&quot;pattern-matching#Pattern-Matching&quot;&gt;Pattern Matching&lt;/a&gt;) behave as if in the traditional C locale when performing comparisons. That is, the current locale&amp;rsquo;s collating sequence is not taken into account, so &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="532961dedcbffcb75500ae01cf7dfa330bdbd494" translate="yes" xml:space="preserve">
          <source>If set, shell error messages are written in the standard &lt;small&gt;GNU&lt;/small&gt; error message format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0f445855a089d9e1ff1d19ba6a442ce38852aeb" translate="yes" xml:space="preserve">
          <source>If set, the &lt;code&gt;echo&lt;/code&gt; builtin expands backslash-escape sequences by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7401d5a39dde09f90702593f121ccff9d32a79ec" translate="yes" xml:space="preserve">
          <source>If set, the &lt;code&gt;source&lt;/code&gt; builtin uses the value of &lt;code&gt;PATH&lt;/code&gt; to find the directory containing the file supplied as an argument. This option is enabled by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="929ecd64341730633669db0878e9d6103a5c68a2" translate="yes" xml:space="preserve">
          <source>If set, the extended pattern matching features described above (see &lt;a href=&quot;pattern-matching#Pattern-Matching&quot;&gt;Pattern Matching&lt;/a&gt;) are enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d25abd86d6c395156512cf9d8235fb585d7dcc4c" translate="yes" xml:space="preserve">
          <source>If set, the history list is appended to the file named by the value of the &lt;code&gt;HISTFILE&lt;/code&gt; variable when the shell exits, rather than overwriting the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dfbb4f731ea9e5935a750ccb2c4ae145387d5b7" translate="yes" xml:space="preserve">
          <source>If set, the pattern &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d20efcf1f5218c0f6dde042bc148eec1dfd84659" translate="yes" xml:space="preserve">
          <source>If set, the programmable completion facilities (see &lt;a href=&quot;programmable-completion#Programmable-Completion&quot;&gt;Programmable Completion&lt;/a&gt;) are enabled. This option is enabled by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cfd778c33d0a5bb3623ddc496866a42f25b4b02" translate="yes" xml:space="preserve">
          <source>If set, the return value of a pipeline is the value of the last (rightmost) command to exit with a non-zero status, or zero if all commands in the pipeline exit successfully. This option is disabled by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e4ecae825db827904953ed14cd72be66025462a" translate="yes" xml:space="preserve">
          <source>If set, the shell suppresses multiple evaluation of associative array subscripts during arithmetic expression evaluation, while executing builtins that can perform variable assignments, and while executing builtins that perform array dereferencing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aee2679701e687e1a860e08a9cd9723e0988c9a9" translate="yes" xml:space="preserve">
          <source>If set, the suffixes specified by the &lt;code&gt;FIGNORE&lt;/code&gt; shell variable cause words to be ignored when performing word completion even if the ignored words are the only possible completions. See &lt;a href=&quot;bash-variables#Bash-Variables&quot;&gt;Bash Variables&lt;/a&gt;, for a description of &lt;code&gt;FIGNORE&lt;/code&gt;. This option is enabled by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7fa24bc01eb5c7c545872c6bce0f30c3c535a3f" translate="yes" xml:space="preserve">
          <source>If set, the value is interpreted as a command to execute before the printing of each primary prompt (&lt;code&gt;$PS1&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d9b7696c9777c3fdef5f5f1690ef14ee23382d9" translate="yes" xml:space="preserve">
          <source>If the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b7453082b85c0dfe273fa0bac742afa84cc65ae" translate="yes" xml:space="preserve">
          <source>If the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a22cb6827833044b2ede9b1dcf1c374590cf127" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;HISTTIMEFORMAT&lt;/code&gt; is set, the time stamp information associated with each history entry is written to the history file, marked with the history comment character. When the history file is read, lines beginning with the history comment character followed immediately by a digit are interpreted as timestamps for the following history entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="054839071066ec9f34f4cf4abd12d33d1e4bc044" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;extglob&lt;/code&gt; shell option is enabled using the &lt;code&gt;shopt&lt;/code&gt; builtin, several extended pattern matching operators are recognized. In the following description, a &lt;var&gt;pattern-list&lt;/var&gt; is a list of one or more patterns separated by a &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db1456589cde9f027231d50a5ef788521caa8a2b" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;huponexit&lt;/code&gt; shell option has been set with &lt;code&gt;shopt&lt;/code&gt; (see &lt;a href=&quot;the-shopt-builtin#The-Shopt-Builtin&quot;&gt;The Shopt Builtin&lt;/a&gt;), Bash sends a &lt;code&gt;SIGHUP&lt;/code&gt; to all jobs when an interactive login shell exits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05896284c1b6e1c762ed3c503a01a064c0179e7b" translate="yes" xml:space="preserve">
          <source>If the &lt;var&gt;show-mode-in-prompt&lt;/var&gt; variable is enabled, this string is displayed immediately before the last line of the primary prompt when emacs editing mode is active. The value is expanded like a key binding, so the standard set of meta- and control prefixes and backslash escape sequences is available. Use the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a47328a5af0ba72502c03a74fccfa6394c9482d6" translate="yes" xml:space="preserve">
          <source>If the &lt;var&gt;show-mode-in-prompt&lt;/var&gt; variable is enabled, this string is displayed immediately before the last line of the primary prompt when vi editing mode is active and in command mode. The value is expanded like a key binding, so the standard set of meta- and control prefixes and backslash escape sequences is available. Use the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e74f6642baaada2241bf823143088cfb8b1c430a" translate="yes" xml:space="preserve">
          <source>If the &lt;var&gt;show-mode-in-prompt&lt;/var&gt; variable is enabled, this string is displayed immediately before the last line of the primary prompt when vi editing mode is active and in insertion mode. The value is expanded like a key binding, so the standard set of meta- and control prefixes and backslash escape sequences is available. Use the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30998f0fe4e2941544fd8bc821fc1183fd2c1673" translate="yes" xml:space="preserve">
          <source>If the Cover Text requirement of section 3 is applicable to these copies of the Document, then if the Document is less than one half of the entire aggregate, the Document&amp;rsquo;s Cover Texts may be placed on covers that bracket the Document within the aggregate, or the electronic equivalent of covers if the Document is in electronic form. Otherwise they must appear on printed covers that bracket the whole aggregate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b01b14a92da64769140796d5db1f7480425aa3ee" translate="yes" xml:space="preserve">
          <source>If the Modified Version includes new front-matter sections or appendices that qualify as Secondary Sections and contain no material copied from the Document, you may at your option designate some or all of these sections as invariant. To do this, add their titles to the list of Invariant Sections in the Modified Version&amp;rsquo;s license notice. These titles must be distinct from any other section titles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae42262454a5127278c1909c79b76841c7b45277" translate="yes" xml:space="preserve">
          <source>If the builtin command &lt;code&gt;return&lt;/code&gt; is executed in a function, the function completes and execution resumes with the next command after the function call. Any command associated with the &lt;code&gt;RETURN&lt;/code&gt; trap is executed before execution resumes. When a function completes, the values of the positional parameters and the special parameter &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9414ef2fe2583852563464aa2c575ff4cb02f6ca" translate="yes" xml:space="preserve">
          <source>If the characters following the tilde in the tilde-prefix consist of a number &lt;var&gt;N&lt;/var&gt;, optionally prefixed by a &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f66c975b1e9edc53dfe72b4e402ff8bc30f4da7" translate="yes" xml:space="preserve">
          <source>If the command name contains no slashes, the shell attempts to locate it. If there exists a shell function by that name, that function is invoked as described in &lt;a href=&quot;shell-functions#Shell-Functions&quot;&gt;Shell Functions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f20af8e5f490bb85cabed38dc27315b8be4a2484" translate="yes" xml:space="preserve">
          <source>If the command run by the &lt;code&gt;DEBUG&lt;/code&gt; trap returns a non-zero value, the next command is skipped and not executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b6d40a13b60a08f621b0b1d4a57fe5e59527120" translate="yes" xml:space="preserve">
          <source>If the command run by the &lt;code&gt;DEBUG&lt;/code&gt; trap returns a value of 2, and the shell is executing in a subroutine (a shell function or a shell script executed by the &lt;code&gt;.&lt;/code&gt; or &lt;code&gt;source&lt;/code&gt; builtins), the shell simulates a call to &lt;code&gt;return&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f83971eccd504a2e75124443fa3d5576d5f18348" translate="yes" xml:space="preserve">
          <source>If the command was not begun asynchronously, the shell waits for the command to complete and collects its exit status.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ae4fb110d63c7096c1b994332344374159c067f" translate="yes" xml:space="preserve">
          <source>If the control variable in a &lt;code&gt;for&lt;/code&gt; loop has the nameref attribute, the list of words can be a list of shell variables, and a name reference will be established for each word in the list, in turn, when the loop is executed. Array variables cannot be given the nameref attribute. However, nameref variables can reference array variables and subscripted array variables. Namerefs can be unset using the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d888181452fabb4419c2b1daf7d28c4d9a94611c" translate="yes" xml:space="preserve">
          <source>If the description for a command says that it &amp;lsquo;kills&amp;rsquo; text, then you can be sure that you can get the text back in a different (or the same) place later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05397a050dc8c9703cdaf1abb09d6dada14f1d08" translate="yes" xml:space="preserve">
          <source>If the effective uid is 0, &lt;code&gt;#&lt;/code&gt;, otherwise &lt;code&gt;$&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da1a1344c2ffc23e855a0673f3f4c0b321925609" translate="yes" xml:space="preserve">
          <source>If the first argument is &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e911ffd5bbeed35045cf2ac99ba15b01c5758dc" translate="yes" xml:space="preserve">
          <source>If the first argument is exactly &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9f08dd4da402efbb0a5b33aeef095b7ba5e7a6b" translate="yes" xml:space="preserve">
          <source>If the first character of &lt;var&gt;parameter&lt;/var&gt; is an exclamation point (!), and &lt;var&gt;parameter&lt;/var&gt; is not a &lt;var&gt;nameref&lt;/var&gt;, it introduces a level of indirection. Bash uses the value formed by expanding the rest of &lt;var&gt;parameter&lt;/var&gt; as the new &lt;var&gt;parameter&lt;/var&gt;; this is then expanded and that value is used in the rest of the expansion, rather than the expansion of the original &lt;var&gt;parameter&lt;/var&gt;. This is known as &lt;code&gt;indirect expansion&lt;/code&gt;. The value is subject to tilde expansion, parameter expansion, command substitution, and arithmetic expansion. If &lt;var&gt;parameter&lt;/var&gt; is a nameref, this expands to the name of the variable referenced by &lt;var&gt;parameter&lt;/var&gt; instead of performing the complete indirect expansion. The exceptions to this are the expansions of ${!&lt;var&gt;prefix&lt;/var&gt;*} and ${!&lt;var&gt;name&lt;/var&gt;[@]} described below. The exclamation point must immediately follow the left brace in order to introduce indirection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8625d646fa2af7dff7580fe1d9a273c1a1771ef" translate="yes" xml:space="preserve">
          <source>If the login name is invalid, or the tilde expansion fails, the word is left unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9343f2fce82acf4542b2a16221e2bb2edfc14433" translate="yes" xml:space="preserve">
          <source>If the metafied character &lt;var&gt;x&lt;/var&gt; is upper case, run the command that is bound to the corresponding metafied lower case character. The behavior is undefined if &lt;var&gt;x&lt;/var&gt; is already lower case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3652b088dd6ef0f515c30a1a29bdbba1f912556d" translate="yes" xml:space="preserve">
          <source>If the name does not match a function, the shell searches for it in the list of shell builtins. If a match is found, that builtin is invoked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfd1f09748ba192d26affcb3d19a5e031f053962" translate="yes" xml:space="preserve">
          <source>If the name is neither a shell function nor a builtin, and contains no slashes, Bash searches each element of &lt;code&gt;$PATH&lt;/code&gt; for a directory containing an executable file by that name. Bash uses a hash table to remember the full pathnames of executable files to avoid multiple &lt;code&gt;PATH&lt;/code&gt; searches (see the description of &lt;code&gt;hash&lt;/code&gt; in &lt;a href=&quot;bourne-shell-builtins#Bourne-Shell-Builtins&quot;&gt;Bourne Shell Builtins&lt;/a&gt;). A full search of the directories in &lt;code&gt;$PATH&lt;/code&gt; is performed only if the command is not found in the hash table. If the search is unsuccessful, the shell searches for a defined shell function named &lt;code&gt;command_not_found_handle&lt;/code&gt;. If that function exists, it is invoked in a separate execution environment with the original command and the original command&amp;rsquo;s arguments as its arguments, and the function&amp;rsquo;s exit status becomes the exit status of that subshell. If that function is not defined, the shell prints an error message and returns an exit status of 127.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f530b0ef8e20407d7d685925ddafd5d56930b0c7" translate="yes" xml:space="preserve">
          <source>If the operating system on which Bash is running supports job control, Bash contains facilities to use it. Typing the &lt;var&gt;suspend&lt;/var&gt; character (typically &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f467cea5a3baad26f30dc33b725ee0e20015f1e6" translate="yes" xml:space="preserve">
          <source>If the pipeline is not executed asynchronously (see &lt;a href=&quot;lists#Lists&quot;&gt;Lists&lt;/a&gt;), the shell waits for all commands in the pipeline to complete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="212a14fc281d3000c828b63409f5331515c588fb" translate="yes" xml:space="preserve">
          <source>If the previously-applied actions do not generate any matches, and the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e63922ec9b7d407e0fe264eb09d2bcba6980b4e" translate="yes" xml:space="preserve">
          <source>If the redirection operator is &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59230d41e9af73b73329d9b9dd8fc87548195f3c" translate="yes" xml:space="preserve">
          <source>If the required texts for either cover are too voluminous to fit legibly, you should put the first ones listed (as many as fit reasonably) on the actual cover, and continue the rest onto adjacent pages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d06d8152807b8f77cfbe145131f509497b38d79c" translate="yes" xml:space="preserve">
          <source>If the search is successful, or if the command name contains one or more slashes, the shell executes the named program in a separate execution environment. Argument 0 is set to the name given, and the remaining arguments to the command are set to the arguments supplied, if any.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fdbb85479a122cfee88f7d44a4c73b22755a154" translate="yes" xml:space="preserve">
          <source>If the second argument is one of the binary conditional operators (see &lt;a href=&quot;bash-conditional-expressions#Bash-Conditional-Expressions&quot;&gt;Bash Conditional Expressions&lt;/a&gt;), the result of the expression is the result of the binary test using the first and third arguments as operands. The &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d69b794650bef337e72e3298fb850c85885ed1a7" translate="yes" xml:space="preserve">
          <source>If the substitution appears within double quotes, word splitting and filename expansion are not performed on the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b8cff8050c947a078b23cdfbe99842ebe251678" translate="yes" xml:space="preserve">
          <source>If the tilde-prefix is &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77c19eb829524ff3830be892be9daab526e2586c" translate="yes" xml:space="preserve">
          <source>If the value is null, no timing information is displayed. A trailing newline is added when the format string is displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b29c2bc636919907e5727e599653ad33a35ef415" translate="yes" xml:space="preserve">
          <source>If there are no options, a list of the shell builtins is displayed. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd38cdf1358ce5370d2ae926cab8b09f8209e5cc" translate="yes" xml:space="preserve">
          <source>If there is a command name left after expansion, execution proceeds as described below. Otherwise, the command exits. If one of the expansions contained a command substitution, the exit status of the command is the exit status of the last command substitution performed. If there were no command substitutions, the command exits with a status of zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef831694cfe0e1766f40148e94f715f89ddf8e51" translate="yes" xml:space="preserve">
          <source>If this execution fails because the file is not in executable format, and the file is not a directory, it is assumed to be a &lt;var&gt;shell script&lt;/var&gt; and the shell executes it as described in &lt;a href=&quot;shell-scripts#Shell-Scripts&quot;&gt;Shell Scripts&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9cbb1826e5bd276b241f84d5fb0cf0f72a33b28" translate="yes" xml:space="preserve">
          <source>If this is set, Bash checks that a command found in the hash table exists before trying to execute it. If a hashed command no longer exists, a normal path search is performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d993244d80213308de5ea31430b494a883f910a" translate="yes" xml:space="preserve">
          <source>If this is set, a non-interactive shell will not exit if it cannot execute the file specified as an argument to the &lt;code&gt;exec&lt;/code&gt; builtin command. An interactive shell does not exit if &lt;code&gt;exec&lt;/code&gt; fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd439d48a99ce19464c09456bd0704d9996fdf10" translate="yes" xml:space="preserve">
          <source>If this is set, an argument to the &lt;code&gt;cd&lt;/code&gt; builtin command that is not a directory is assumed to be the name of a variable whose value is the directory to change to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fc99e904ebf11747e18bd0280b940e9b71a9adf" translate="yes" xml:space="preserve">
          <source>If this is set, the &lt;code&gt;shift&lt;/code&gt; builtin prints an error message when the shift count exceeds the number of positional parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa9c5fa227ef993e47df813205672fbe87b28590" translate="yes" xml:space="preserve">
          <source>If this option is given, backslash does not act as an escape character. The backslash is considered to be part of the line. In particular, a backslash-newline pair may not then be used as a line continuation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b35702eed6ed9a377ce23daf4e3ad1266e3ab93" translate="yes" xml:space="preserve">
          <source>If this option is present, or if no arguments remain after option processing, then commands are read from the standard input. This option allows the positional parameters to be set when invoking an interactive shell or when reading input through a pipe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="777e91878a06be51cd1833b132b824e91b78809d" translate="yes" xml:space="preserve">
          <source>If this parameter is set to a filename or directory name and the &lt;code&gt;MAILPATH&lt;/code&gt; variable is not set, Bash informs the user of the arrival of mail in the specified file or Maildir-format directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88d7176ed8843fa0356bde0b33b22ab8e357f85d" translate="yes" xml:space="preserve">
          <source>If this variable is in the environment when Bash starts, the shell enters &lt;small&gt;POSIX&lt;/small&gt; mode (see &lt;a href=&quot;bash-posix-mode#Bash-POSIX-Mode&quot;&gt;Bash POSIX Mode&lt;/a&gt;) before reading the startup files, as if the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1b89889d40b4d7ed3d3571f50654adabf775633" translate="yes" xml:space="preserve">
          <source>If this variable is not set, Bash acts as if it had the value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f193f77ae6c578e085525731e2ade93975c1d7b6" translate="yes" xml:space="preserve">
          <source>If this variable is set and not null, its value is used as a format string for &lt;var&gt;strftime&lt;/var&gt; to print the time stamp associated with each history entry displayed by the &lt;code&gt;history&lt;/code&gt; builtin. If this variable is set, time stamps are written to the history file so they may be preserved across shell sessions. This uses the history comment character to distinguish timestamps from other history lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="676ae2b7cf28a1e7f203d97bc2401be482723d3d" translate="yes" xml:space="preserve">
          <source>If this variable is set when Bash is invoked to execute a shell script, its value is expanded and used as the name of a startup file to read before executing the script. See &lt;a href=&quot;bash-startup-files#Bash-Startup-Files&quot;&gt;Bash Startup Files&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f28ca2e8f75483fc478ec8c1ba2646d3681c8ad5" translate="yes" xml:space="preserve">
          <source>If you do not have a Meta or &lt;code&gt;ALT&lt;/code&gt; key, or another key working as a Meta key, the identical keystroke can be generated by typing &lt;code&gt;ESC&lt;/code&gt;&lt;em&gt;first&lt;/em&gt;, and then typing &lt;code&gt;k&lt;/code&gt;. Either process is known as &lt;em&gt;metafying&lt;/em&gt; the &lt;code&gt;k&lt;/code&gt; key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d959cdc013e27164e0b6fbacf47517d98590f9b4" translate="yes" xml:space="preserve">
          <source>If you have Invariant Sections without Cover Texts, or some other combination of the three, merge those two alternatives to suit the situation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad1b8a7db5a735690b717ff819d3d51d6e5400ec" translate="yes" xml:space="preserve">
          <source>If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts, replace the &amp;ldquo;with&amp;hellip;Texts.&amp;rdquo; line with this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="973407fb9d8484275f138c80804c3c11c43dc6b0" translate="yes" xml:space="preserve">
          <source>If you have to use a &lt;code&gt;make&lt;/code&gt; that does not supports the &lt;code&gt;VPATH&lt;/code&gt; variable, you can compile Bash for one architecture at a time in the source code directory. After you have installed Bash for one architecture, use &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc3797f7197bba97fa8222f26600e2e48affc612" translate="yes" xml:space="preserve">
          <source>If you need to do unusual things to compile Bash, please try to figure out how &lt;code&gt;configure&lt;/code&gt; could check whether or not to do them, and mail diffs or instructions to &lt;a href=&quot;mailto:bash-maintainers@gnu.org&quot;&gt;bash-maintainers@gnu.org&lt;/a&gt; so they can be considered for the next release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83aedbaa45e9f84bfa1fcbbeea8869b139d5088a" translate="yes" xml:space="preserve">
          <source>If you need to protect special characters such as newlines in file names, use find&amp;rsquo;s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12078bff72a7a0d0b47a2085949d8643b6a58c14" translate="yes" xml:space="preserve">
          <source>If you publish or distribute Opaque copies of the Document numbering more than 100, you must either include a machine-readable Transparent copy along with each Opaque copy, or state in or with each Opaque copy a computer-network location from which the general network-using public has access to download using public-standard network protocols a complete Transparent copy of the Document, free of added material. If you use the latter option, you must take reasonably prudent steps, when you begin distribution of Opaque copies in quantity, to ensure that this Transparent copy will remain thus accessible at the stated location until at least one year after the last time you distribute an Opaque copy (directly or through your agents or retailers) of that edition to the public.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="259996a1220d546fc0064aba80c2b9da3313fa17" translate="yes" xml:space="preserve">
          <source>If you publish printed copies (or copies in media that commonly have printed covers) of the Document, numbering more than 100, and the Document&amp;rsquo;s license notice requires Cover Texts, you must enclose the copies in covers that carry, clearly and legibly, all these Cover Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on the back cover. Both covers must also clearly and legibly identify you as the publisher of these copies. The front cover must present the full title with all words of the title equally prominent and visible. You may add other material on the covers in addition. Copying with changes limited to the covers, as long as they preserve the title of the Document and satisfy these conditions, can be treated as verbatim copying in other respects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6730d9b385f08c2cf6be9d05fb9bf6a7f7ae50d2" translate="yes" xml:space="preserve">
          <source>If you want to build Bash in a directory separate from the source directory &amp;ndash; to build for multiple architectures, for example &amp;ndash; just use the full path to the configure script. The following commands will build bash in a directory under</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="186f9f4f8bfcc1b6dbd98b1ddbc6918a65ae8d2e" translate="yes" xml:space="preserve">
          <source>If you want to match a character that&amp;rsquo;s special to the regular expression grammar, it has to be quoted to remove its special meaning. This means that in the pattern &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab7363fb921e78e0a7556aab74f823ea4f39495e" translate="yes" xml:space="preserve">
          <source>If you want to set default values for &lt;code&gt;configure&lt;/code&gt; scripts to share, you can create a site shell script called &lt;code&gt;config.site&lt;/code&gt; that gives default values for variables like &lt;code&gt;CC&lt;/code&gt;, &lt;code&gt;cache_file&lt;/code&gt;, and &lt;code&gt;prefix&lt;/code&gt;. &lt;code&gt;configure&lt;/code&gt; looks for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b740d12c534adf1e78083987d4914f9a914ca40f" translate="yes" xml:space="preserve">
          <source>If your document contains nontrivial examples of program code, we recommend releasing these examples in parallel under your choice of free software license, such as the GNU General Public License, to permit their use in free software.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad807d7010690da3b367c158778dc87f36daca62" translate="yes" xml:space="preserve">
          <source>Importing function definitions from the shell environment at startup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bfc53bff471d024384b520ef7eb191e4bb09ec3" translate="yes" xml:space="preserve">
          <source>In a non-interactive shell, or an interactive shell in which the &lt;code&gt;interactive_comments&lt;/code&gt; option to the &lt;code&gt;shopt&lt;/code&gt; builtin is enabled (see &lt;a href=&quot;the-shopt-builtin#The-Shopt-Builtin&quot;&gt;The Shopt Builtin&lt;/a&gt;), a word beginning with &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02b2d522d02685102f94404bf4b0d657a9e31c49" translate="yes" xml:space="preserve">
          <source>In a questionable attempt at security, the SVR4.2 shell, when invoked without the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acd7ffcb27a06d2f814691335100fc8359783d24" translate="yes" xml:space="preserve">
          <source>In addition to command names, readline allows keys to be bound to a string that is inserted when the key is pressed (a &lt;var&gt;macro&lt;/var&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93c833fa4e72f9033538088f0593e7bc9024232e" translate="yes" xml:space="preserve">
          <source>In addition to the &lt;small&gt;GNU&lt;/small&gt; Emacs style escape sequences, a second set of backslash escapes is available:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c5729dabfd311f795dc7288f0cc0f352dd8db0d" translate="yes" xml:space="preserve">
          <source>In addition to the creation of a subshell, there is a subtle difference between these two constructs due to historical reasons. The braces are &lt;code&gt;reserved words&lt;/code&gt;, so they must be separated from the &lt;var&gt;list&lt;/var&gt; by &lt;code&gt;blank&lt;/code&gt;s or other shell metacharacters. The parentheses are &lt;code&gt;operators&lt;/code&gt;, and are recognized as separate tokens by the shell even if they are not separated from the &lt;var&gt;list&lt;/var&gt; by whitespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2e6fbde158335869362b0e379cc922ff5d488fa" translate="yes" xml:space="preserve">
          <source>In addition, several keys have their own names. Specifically, &lt;code&gt;DEL&lt;/code&gt;, &lt;code&gt;ESC&lt;/code&gt;, &lt;code&gt;LFD&lt;/code&gt;, &lt;code&gt;SPC&lt;/code&gt;, &lt;code&gt;RET&lt;/code&gt;, and &lt;code&gt;TAB&lt;/code&gt; all stand for themselves when seen in this text, or in an init file (see &lt;a href=&quot;readline-init-file#Readline-Init-File&quot;&gt;Readline Init File&lt;/a&gt;). If your keyboard lacks a &lt;code&gt;LFD&lt;/code&gt; key, typing &lt;code&gt;C-j&lt;/code&gt; will produce the desired character. The &lt;code&gt;RET&lt;/code&gt; key may be labeled &lt;code&gt;Return&lt;/code&gt; or &lt;code&gt;Enter&lt;/code&gt; on some keyboards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b3be7d7807edefafd0966948d79f5327f1f6852" translate="yes" xml:space="preserve">
          <source>In addition, the &lt;code&gt;C-x C-r&lt;/code&gt; command re-reads this init file, thus incorporating any changes that you might have made to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b95dacbd396bc51b6d40d63fdc5a99b5e400172e" translate="yes" xml:space="preserve">
          <source>In addition, the following table describes the special characters which can appear in the prompt variables &lt;code&gt;PS0&lt;/code&gt;, &lt;code&gt;PS1&lt;/code&gt;, &lt;code&gt;PS2&lt;/code&gt;, and &lt;code&gt;PS4&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a023a1f8d31694303fdf19bf34bafab5048fffb" translate="yes" xml:space="preserve">
          <source>In an interactive shell, the value is interpreted as the number of seconds to wait for a line of input after issuing the primary prompt. Bash terminates after waiting for that number of seconds if a complete line of input does not arrive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdba83de9a185c5d0269395ce15a272761068752" translate="yes" xml:space="preserve">
          <source>In each of the cases below, &lt;var&gt;word&lt;/var&gt; is subject to tilde expansion, parameter expansion, command substitution, and arithmetic expansion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="776f3e487a8a68ec6f7020b12d39b7d82631cfe9" translate="yes" xml:space="preserve">
          <source>In most cases a list of commands in a compound command&amp;rsquo;s description may be separated from the rest of the command by one or more newlines, and may be followed by a newline in place of a semicolon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52fc1c75570831d9162a7f56b56ea8e34f6226d0" translate="yes" xml:space="preserve">
          <source>In order to enter characters into the line, simply type them. The typed character appears where the cursor was, and then the cursor moves one space to the right. If you mistype a character, you can use your erase character to back up and delete the mistyped character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfca208f0049bbff96fae9f0ee95f08078198a8c" translate="yes" xml:space="preserve">
          <source>In order to switch interactively between &lt;code&gt;emacs&lt;/code&gt; and &lt;code&gt;vi&lt;/code&gt; editing modes, use the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51978bf956b8794338f8c4cf3a067f0a540b285c" translate="yes" xml:space="preserve">
          <source>In overwrite mode, characters bound to &lt;code&gt;self-insert&lt;/code&gt; replace the text at point rather than pushing the text to the right. Characters bound to &lt;code&gt;backward-delete-char&lt;/code&gt; replace the character before point with a space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acc6f4c088642eb7f8737b1a54d1b8d8a8f44c63" translate="yes" xml:space="preserve">
          <source>In the above example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abf9823b3792f5beb81f16b1fe9e504eb5e9f0f2" translate="yes" xml:space="preserve">
          <source>In the absence of any traps, &lt;code&gt;SIGINT&lt;/code&gt; is caught and handled (see &lt;a href=&quot;signals#Signals&quot;&gt;Signals&lt;/a&gt;). &lt;code&gt;SIGINT&lt;/code&gt; will interrupt some shell builtins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="105bd8bc0640d79759a2a90ca4a1c85a26636658" translate="yes" xml:space="preserve">
          <source>In the absence of any traps, Bash ignores &lt;code&gt;SIGTERM&lt;/code&gt; (see &lt;a href=&quot;signals#Signals&quot;&gt;Signals&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cda68fb93baabdacea520a528ee305f4e985aca" translate="yes" xml:space="preserve">
          <source>In the combination, you must combine any sections Entitled &amp;ldquo;History&amp;rdquo; in the various original documents, forming one section Entitled &amp;ldquo;History&amp;rdquo;; likewise combine any sections Entitled &amp;ldquo;Acknowledgements&amp;rdquo;, and any sections Entitled &amp;ldquo;Dedications&amp;rdquo;. You must delete all sections Entitled &amp;ldquo;Endorsements.&amp;rdquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6258da724ae30a7bd686127a1de1b959fc5247b9" translate="yes" xml:space="preserve">
          <source>In the context where an assignment statement is assigning a value to a shell variable or array index (see &lt;a href=&quot;arrays#Arrays&quot;&gt;Arrays&lt;/a&gt;), the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47ba31c55cf17ab9234a30dc016e247f26027b3f" translate="yes" xml:space="preserve">
          <source>In the example above,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6054c41c039baa67beb6220428bddb9dcb8f61e2" translate="yes" xml:space="preserve">
          <source>In the following descriptions, &lt;em&gt;point&lt;/em&gt; refers to the current cursor position, and &lt;em&gt;mark&lt;/em&gt; refers to a cursor position saved by the &lt;code&gt;set-mark&lt;/code&gt; command. The text between the point and mark is referred to as the &lt;em&gt;region&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9e9924a14a939202e524f8d54c079b3361a4f8f" translate="yes" xml:space="preserve">
          <source>In the following descriptions, if the file descriptor number is omitted, and the first character of the redirection operator is &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="936662e2ff52735b6e8de158c20eb900ce6d2796" translate="yes" xml:space="preserve">
          <source>In the second form, &lt;var&gt;command&lt;/var&gt; is re-executed after each instance of &lt;var&gt;pat&lt;/var&gt; in the selected command is replaced by &lt;var&gt;rep&lt;/var&gt;. &lt;var&gt;command&lt;/var&gt; is intepreted the same as &lt;var&gt;first&lt;/var&gt; above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4c9c6f987e14cc39c69cce18793290b45b8c829" translate="yes" xml:space="preserve">
          <source>Include &lt;code&gt;csh&lt;/code&gt;-like brace expansion ( &lt;code&gt;b{a,b}c&lt;/code&gt; &amp;rarr; &lt;code&gt;bac bbc&lt;/code&gt; ). See &lt;a href=&quot;brace-expansion#Brace-Expansion&quot;&gt;Brace Expansion&lt;/a&gt;, for a complete description.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f37101c8da0de163cd9ec8919b0c95749d4e46c5" translate="yes" xml:space="preserve">
          <source>Include an unaltered copy of this License.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d48dc0547638595849dd7293cce4c2c8803508e" translate="yes" xml:space="preserve">
          <source>Include command history and the &lt;code&gt;fc&lt;/code&gt; and &lt;code&gt;history&lt;/code&gt; builtin commands (see &lt;a href=&quot;bash-history-facilities#Bash-History-Facilities&quot;&gt;Bash History Facilities&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23c33e6a9c711a4ef6e0de93e9edd5dc0fcd18e2" translate="yes" xml:space="preserve">
          <source>Include support for &lt;code&gt;csh&lt;/code&gt;-like history substitution (see &lt;a href=&quot;history-interaction#History-Interaction&quot;&gt;History Interaction&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcd4d1d8d16796e7e10435ccfdf1234d31d66bad" translate="yes" xml:space="preserve">
          <source>Include support for a &lt;code&gt;csh&lt;/code&gt;-like directory stack and the &lt;code&gt;pushd&lt;/code&gt;, &lt;code&gt;popd&lt;/code&gt;, and &lt;code&gt;dirs&lt;/code&gt; builtins (see &lt;a href=&quot;the-directory-stack#The-Directory-Stack&quot;&gt;The Directory Stack&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae8823eba1fe6af3fc8854f6dceeff5ba3a8f237" translate="yes" xml:space="preserve">
          <source>Include support for a &lt;em&gt;restricted shell&lt;/em&gt;. If this is enabled, Bash, when called as &lt;code&gt;rbash&lt;/code&gt;, enters a restricted mode. See &lt;a href=&quot;the-restricted-shell#The-Restricted-Shell&quot;&gt;The Restricted Shell&lt;/a&gt;, for a description of restricted mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08137dd0a94c8fe61752fd5a565f5ca1868e59f0" translate="yes" xml:space="preserve">
          <source>Include support for case-modifying attributes in the &lt;code&gt;declare&lt;/code&gt; builtin and assignment statements. Variables with the &lt;var&gt;uppercase&lt;/var&gt; attribute, for example, will have their values converted to uppercase upon assignment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79652870d76d9dc4d92510ebd79937754f61ac34" translate="yes" xml:space="preserve">
          <source>Include support for case-modifying word expansions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9652f104e6bcc36329b35fc55d0fe4f137df4fb4" translate="yes" xml:space="preserve">
          <source>Include support for command-line editing and history with the Bash version of the Readline library (see &lt;a href=&quot;command-line-editing#Command-Line-Editing&quot;&gt;Command Line Editing&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ea7279bad2b6c05dc67100447cb96ae787fdd27" translate="yes" xml:space="preserve">
          <source>Include support for coprocesses and the &lt;code&gt;coproc&lt;/code&gt; reserved word (see &lt;a href=&quot;pipelines#Pipelines&quot;&gt;Pipelines&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce1057c164b1c9c64f899236af3180fa51a2e884" translate="yes" xml:space="preserve">
          <source>Include support for importing function definitions exported by another instance of the shell from the environment. This option is enabled by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99d5fc71d3d9ad53444e7309bea67a07e61b048e" translate="yes" xml:space="preserve">
          <source>Include support for matching &lt;small&gt;POSIX&lt;/small&gt; regular expressions using the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83ad9eb4e9a64b1f5ad0a6bec7a8781dec0bbfeb" translate="yes" xml:space="preserve">
          <source>Include support for one-dimensional array shell variables (see &lt;a href=&quot;arrays#Arrays&quot;&gt;Arrays&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ca4232fcf0d840864e3259aeea182e99a3c9dd5" translate="yes" xml:space="preserve">
          <source>Include support for recognizing &lt;code&gt;time&lt;/code&gt; as a reserved word and for displaying timing statistics for the pipeline following &lt;code&gt;time&lt;/code&gt; (see &lt;a href=&quot;pipelines#Pipelines&quot;&gt;Pipelines&lt;/a&gt;). This allows pipelines as well as shell builtins and functions to be timed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b3e316cb2abba0ed34fdcb0f8ff1797d729c4e7" translate="yes" xml:space="preserve">
          <source>Include support for the &lt;code&gt;((&amp;hellip;))&lt;/code&gt; command (see &lt;a href=&quot;conditional-constructs#Conditional-Constructs&quot;&gt;Conditional Constructs&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19fc1d7250d16771acb76de6ec69f38c9d8d60cb" translate="yes" xml:space="preserve">
          <source>Include support for the &lt;code&gt;[[&lt;/code&gt; conditional command. (see &lt;a href=&quot;conditional-constructs#Conditional-Constructs&quot;&gt;Conditional Constructs&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c70178ab357435e6786f148594a0417a44372a7" translate="yes" xml:space="preserve">
          <source>Include support for the alternate form of the &lt;code&gt;for&lt;/code&gt; command that behaves like the C language &lt;code&gt;for&lt;/code&gt; statement (see &lt;a href=&quot;looping-constructs#Looping-Constructs&quot;&gt;Looping Constructs&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec69a59a3545823bf8466b4d739c9bc65470598e" translate="yes" xml:space="preserve">
          <source>Include support for the bash debugger (distributed separately).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a38210d3d2cf777e266e4e73ccafcbddde65c070" translate="yes" xml:space="preserve">
          <source>Include support for the extended pattern matching features described above under &lt;a href=&quot;pattern-matching#Pattern-Matching&quot;&gt;Pattern Matching&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5617c0dcf0a06bdacc90381e950b7d3327be91e1" translate="yes" xml:space="preserve">
          <source>Include the &lt;code&gt;help&lt;/code&gt; builtin, which displays help on shell builtins and variables (see &lt;a href=&quot;bash-builtins#Bash-Builtins&quot;&gt;Bash Builtins&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0c109a13625dc09e3f3d9f8ed668f83daf955ee" translate="yes" xml:space="preserve">
          <source>Include the &lt;code&gt;select&lt;/code&gt; compound command, which allows the generation of simple menus (see &lt;a href=&quot;conditional-constructs#Conditional-Constructs&quot;&gt;Conditional Constructs&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98ddfd2fcb3db286949b7e1b30f3bc46531b32ce" translate="yes" xml:space="preserve">
          <source>Include, immediately after the copyright notices, a license notice giving the public permission to use the Modified Version under the terms of this License, in the form shown in the Addendum below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bafc536987bae59572bd4d7cee3e20b1d578c491" translate="yes" xml:space="preserve">
          <source>Incremental searches begin before the user has finished typing the search string. As each character of the search string is typed, Readline displays the next entry from the history matching the string typed so far. An incremental search requires only as many characters as needed to find the desired history entry. To search backward in the history for a particular string, type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="522533bd13a86a35c057d83bb8162f29b4eb6954" translate="yes" xml:space="preserve">
          <source>Incremental undo, separately remembered for each line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b886372e2855e2cd32c2349c1096abd80921f3d" translate="yes" xml:space="preserve">
          <source>Incremented by one each time a new instance of Bash is started. This is intended to be a count of how deeply your Bash shells are nested.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a41f2a411df07a0f72ac2e480854008ae6f6f92" translate="yes" xml:space="preserve">
          <source>Incremented by one within each subshell or subshell environment when the shell begins executing in that environment. The initial value is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f755e41ce627af0222ceee4e0d6d2f3858e3aab" translate="yes" xml:space="preserve">
          <source>Index Entry</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcefb5437bfab999cc8a93b525748cd20b539fbf" translate="yes" xml:space="preserve">
          <source>Index of Bash builtin commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ae4e49df3217a02eb6534a0c5c648f4dc6ff126" translate="yes" xml:space="preserve">
          <source>Index of Bash reserved words.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac6bf955791a05020c5db624b5c43aa732584c74" translate="yes" xml:space="preserve">
          <source>Index of Shell Builtin Commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae3342927761f2a2013ddf5aaffcec14ca115148" translate="yes" xml:space="preserve">
          <source>Index of Shell Reserved Words</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c51c5d792dfa40ea6eaa2c3da75b322c50cd65b" translate="yes" xml:space="preserve">
          <source>Index of bindable Readline functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f642ee196088372ea886186c6c617515599afd3f" translate="yes" xml:space="preserve">
          <source>Indexes</source>
          <target state="translated">Indexes</target>
        </trans-unit>
        <trans-unit id="d8bf034ca34b2e1090ab79dfdd6df9eb3649ecc1" translate="yes" xml:space="preserve">
          <source>Individual builtins may be enabled or disabled using the &lt;code&gt;enable&lt;/code&gt; builtin (see &lt;a href=&quot;bash-builtins#Bash-Builtins&quot;&gt;Bash Builtins&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36bf2bbc71654be3a9fb288228872771ba5913ce" translate="yes" xml:space="preserve">
          <source>Insert all completions of the text before point that would have been generated by &lt;code&gt;possible-completions&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51c899f9c6a36af69f71f53579673d97f6c6a826" translate="yes" xml:space="preserve">
          <source>Insert last argument to the previous command (the last word of the previous history entry). With a numeric argument, behave exactly like &lt;code&gt;yank-nth-arg&lt;/code&gt;. Successive calls to &lt;code&gt;yank-last-arg&lt;/code&gt; move back through the history list, inserting the last word (or the word specified by the argument to the first call) of each line in turn. Any numeric argument supplied to these successive calls determines the direction to move through the history. A negative argument switches the direction through the history (back or forward). The history expansion facilities are used to extract the last argument, as if the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="310399bcedf57d54d7471b78b856e75c1beb2c1d" translate="yes" xml:space="preserve">
          <source>Insert the character into the line at the cursor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c39c979a9871b542978913310993b374023a2cf1" translate="yes" xml:space="preserve">
          <source>Insert the first argument to the previous command (usually the second word on the previous line) at point. With an argument &lt;var&gt;n&lt;/var&gt;, insert the &lt;var&gt;n&lt;/var&gt;th word from the previous command (the words in the previous command begin with word 0). A negative argument inserts the &lt;var&gt;n&lt;/var&gt;th word from the end of the previous command. Once the argument &lt;var&gt;n&lt;/var&gt; is computed, the argument is extracted as if the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1125a01c8b91e5041b6a63ed1a1277bf925e2cb" translate="yes" xml:space="preserve">
          <source>Insert yourself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9efc96d34a8c1a78d0022d104007d9a8a3ef3ef0" translate="yes" xml:space="preserve">
          <source>Installation Names</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de9f8e2188b9605d3821e60f54247965098f9c5b" translate="yes" xml:space="preserve">
          <source>Installation instructions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ceb87d7ed8aaab5dec98b38916e0c7dcfb07e0f" translate="yes" xml:space="preserve">
          <source>Installing Bash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb2b5d4dfd6d698c256f1a086e45a1de9b61d4da" translate="yes" xml:space="preserve">
          <source>Interactive Shell Behavior</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aba9ffd5b8a8c781a49eeeeded988fd69a2644bc" translate="yes" xml:space="preserve">
          <source>Interactive Shells</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9e6bffaf4f8a8e7d642ee16dbae8deacb40f522" translate="yes" xml:space="preserve">
          <source>Interactive shells are described in &lt;a href=&quot;interactive-shells#Interactive-Shells&quot;&gt;Interactive Shells&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="d44f3813a0a1ea25d6216259a03a52cefb25574a" translate="yes" xml:space="preserve">
          <source>Introduction and Notation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1310dcc8c1d7695ce4c6c152ec693ea6eacd943a" translate="yes" xml:space="preserve">
          <source>Introduction to Line Editing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a78c74e831be415e85867a2b53146048ff76ed5b" translate="yes" xml:space="preserve">
          <source>Invoke an editor on the current command line, and execute the result as shell commands. Bash attempts to invoke &lt;code&gt;$VISUAL&lt;/code&gt;, &lt;code&gt;$EDITOR&lt;/code&gt;, and &lt;code&gt;emacs&lt;/code&gt; as the editor, in that order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a808face373d931bb97a4af094b6366115ae0bb" translate="yes" xml:space="preserve">
          <source>Invoked as an interactive login shell, or with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d6d3dcd12b83b916aac351644c87ba945a36914" translate="yes" xml:space="preserve">
          <source>Invoked as an interactive non-login shell</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c840d1aebd1cc8867415b5f8d365d04381cc4eb3" translate="yes" xml:space="preserve">
          <source>Invoked by remote shell daemon</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d80f0ae695c457d4a95bb4248f58561935f10edf" translate="yes" xml:space="preserve">
          <source>Invoked in &lt;small&gt;POSIX&lt;/small&gt; mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a29e8987c12c4681adfb70a9ff1ef8cdb64eb6d" translate="yes" xml:space="preserve">
          <source>Invoked non-interactively</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="826936663d02f73cb6f3cbefcfc4702b02f52f77" translate="yes" xml:space="preserve">
          <source>Invoked with name &lt;code&gt;sh&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41af4936f217a0404b7b3b602511db7f712e9292" translate="yes" xml:space="preserve">
          <source>Invoked with unequal effective and real &lt;small&gt;UID/GID&lt;/small&gt;s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c548b18bbf97d4b70a80c25b9237a5aebd9f45b" translate="yes" xml:space="preserve">
          <source>Invoking Bash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="029b86474413e5f992d7a5f714852cbf01ca2dcd" translate="yes" xml:space="preserve">
          <source>Is this Shell Interactive?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9285aeb8182cef9880c06325f2441654400c114" translate="yes" xml:space="preserve">
          <source>It is possible to have a variable and a function with the same name; &lt;code&gt;sh&lt;/code&gt; does not separate the two name spaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29d682ce4731cc5ebfe926cf429b60ff1fd158a6" translate="yes" xml:space="preserve">
          <source>It is possible to obtain the keys (indices) of an array as well as the values. ${!&lt;var&gt;name&lt;/var&gt;[@]} and ${!&lt;var&gt;name&lt;/var&gt;[*]} expand to the indices assigned in array variable &lt;var&gt;name&lt;/var&gt;. The treatment when in double quotes is similar to the expansion of the special parameters &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01730ad215a52da832cdc90865fedfa60910f52d" translate="yes" xml:space="preserve">
          <source>It is requested, but not required, that you contact the authors of the Document well before redistributing any large number of copies, to give them a chance to provide you with an updated version of the Document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58668e7669fd564d99db5d581fcdb6a5618440b5" translate="yes" xml:space="preserve">
          <source>J</source>
          <target state="translated">J</target>
        </trans-unit>
        <trans-unit id="45c9d11599074bb63e1dd7a5059ab11259e3a168" translate="yes" xml:space="preserve">
          <source>JPG</source>
          <target state="translated">JPG</target>
        </trans-unit>
        <trans-unit id="b7507ee66a0315e37375e7fa4fde2a28c84b2e48" translate="yes" xml:space="preserve">
          <source>Job Control</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ce00b107bece6e5d05a22c354ac0a7844522ee8" translate="yes" xml:space="preserve">
          <source>Job Control (see &lt;a href=&quot;job-control#Job-Control&quot;&gt;Job Control&lt;/a&gt;) is enabled by default. When job control is in effect, Bash ignores the keyboard-generated job control signals &lt;code&gt;SIGTTIN&lt;/code&gt;, &lt;code&gt;SIGTTOU&lt;/code&gt;, and &lt;code&gt;SIGTSTP&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ff630d22dbf623cca727da91bc11bd64f6bf183" translate="yes" xml:space="preserve">
          <source>Job Control Basics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b5b8ec4af061fa149960775ceec6be8fca89cc6" translate="yes" xml:space="preserve">
          <source>Job Control Builtins</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84ce27a7ad8afd61171f2a624012ee6722fe2ad0" translate="yes" xml:space="preserve">
          <source>Job Control Variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01f3733bdc0670b240a60dd6f87ff3d21daaf17d" translate="yes" xml:space="preserve">
          <source>Job control is enabled (see &lt;a href=&quot;job-control#Job-Control&quot;&gt;Job Control&lt;/a&gt;). All processes run in a separate process group. When a background job completes, the shell prints a line containing its exit status.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="291cfa00911cbfa3478bd3c6a34fd2e75f150d32" translate="yes" xml:space="preserve">
          <source>Job control refers to the ability to selectively stop (suspend) the execution of processes and continue (resume) their execution at a later point. A user typically employs this facility via an interactive interface supplied jointly by the operating system kernel&amp;rsquo;s terminal driver and Bash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3939a315e8eaf8d2814bae9f39fd2fee452f773c" translate="yes" xml:space="preserve">
          <source>Job names, if job control is active. May also be specified as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="722c3f42b12510fdd11075d489a240fe079e232b" translate="yes" xml:space="preserve">
          <source>Job number &lt;code&gt;n&lt;/code&gt; may be referred to as &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97334835cf3bd4ff49ed61b961b56ec9717c5314" translate="yes" xml:space="preserve">
          <source>Jump to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7ee38bb7be4fc44198cb2685d9601dcf2b9f569" translate="yes" xml:space="preserve">
          <source>K</source>
          <target state="translated">K</target>
        </trans-unit>
        <trans-unit id="4094ecbe8dc357339a9eda4dfd61ef3af94bcda9" translate="yes" xml:space="preserve">
          <source>Key Bindings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc4837611e356bedd08fd92c8bd27ef9a22790ca" translate="yes" xml:space="preserve">
          <source>Keyboard Macros</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb1b6518bbf36cc047b4c3269881f855522cc8b1" translate="yes" xml:space="preserve">
          <source>Kill all characters on the current line, no matter where point is. By default, this is unbound.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="648f13248b3847d61a1f89cd76b06aac2ae31d09" translate="yes" xml:space="preserve">
          <source>Kill backward from the cursor to the beginning of the current line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b30e4b6bbffe5f53777064b7b1f25e77be5aaaf2" translate="yes" xml:space="preserve">
          <source>Kill from point to the end of the current word, or if between words, to the end of the next word. Word boundaries are the same as &lt;code&gt;forward-word&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed456754c6eff11239c224ec6f708ace9d87ecee" translate="yes" xml:space="preserve">
          <source>Kill from point to the end of the current word, or if between words, to the end of the next word. Word boundaries are the same as &lt;code&gt;shell-forward-word&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ffbf8547e6beb6fd3a22032bae5f6a4eca48a29" translate="yes" xml:space="preserve">
          <source>Kill from the cursor the start of the current word, or, if between words, to the start of the previous word. Word boundaries are the same as those used by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc1e73bdb9d198500a5293b86f2b2a3464cc8d11" translate="yes" xml:space="preserve">
          <source>Kill from the cursor to the end of the current word, or, if between words, to the end of the next word. Word boundaries are the same as those used by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="311a4cde3db454c3849e6ee13e45582356a552a1" translate="yes" xml:space="preserve">
          <source>Kill from the cursor to the previous whitespace. This is different than</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ecb0ef048ba441b7755a53bd46945b1e20c2c91" translate="yes" xml:space="preserve">
          <source>Kill the text from point to the end of the line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6ffad75f2cec42a116c1a0e5d568a0039830396" translate="yes" xml:space="preserve">
          <source>Kill the text from the current cursor position to the end of the line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04c841ce2d4253cd79155b6e3949e02bf6c53e61" translate="yes" xml:space="preserve">
          <source>Kill the text in the current region. By default, this command is unbound.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f90603f79ddaf8e0226787803ee944e6f568c103" translate="yes" xml:space="preserve">
          <source>Kill the word behind point, using white space and the slash character as the word boundaries. The killed text is saved on the kill-ring.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5997899e032ace476cc7eef39bb34b06c94ae54" translate="yes" xml:space="preserve">
          <source>Kill the word behind point, using white space as a word boundary. The killed text is saved on the kill-ring.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fea2d6f0be014cb4b6bedac3fd797f026257b42" translate="yes" xml:space="preserve">
          <source>Kill the word behind point. Word boundaries are the same as &lt;code&gt;backward-word&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84bdeb981aed42b434759620c7937dc2c98dcce5" translate="yes" xml:space="preserve">
          <source>Kill the word behind point. Word boundaries are the same as &lt;code&gt;shell-backward-word&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="377ef541daa0c559de537f46058454ce4547bbc1" translate="yes" xml:space="preserve">
          <source>Killing And Yanking</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d160e0986aca4714714a16f29ec605af90be704d" translate="yes" xml:space="preserve">
          <source>L</source>
          <target state="translated">L</target>
        </trans-unit>
        <trans-unit id="dbfdd62c22d142fb89ad0f50c9a45f31239755f2" translate="yes" xml:space="preserve">
          <source>Letting Readline Type For You</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d0db8c2b020268e4b2e48ddcbb42e59195d905a" translate="yes" xml:space="preserve">
          <source>Licensed under the GNU Free Documentation License.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c584b03c51b0bbeffeccc97a9b960239a36436e" translate="yes" xml:space="preserve">
          <source>List all key sequences bound to shell commands and the associated commands in a format that can be reused as input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f529bec4d07453233e9cea0f36dbf54def12aa1" translate="yes" xml:space="preserve">
          <source>List current Readline function names and bindings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b8e450b07a8a6d28388b4347569efa2489edbee" translate="yes" xml:space="preserve">
          <source>List current Readline variable names and values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81844ddfcde68c31fdf2fc102b2f0ca33a634238" translate="yes" xml:space="preserve">
          <source>List of variables that exist in Bash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a42204e2bb1eefc84bb3b1bf10ab724cfb44f943" translate="yes" xml:space="preserve">
          <source>List on the Title Page, as authors, one or more persons or entities responsible for authorship of the modifications in the Modified Version, together with at least five of the principal authors of the Document (all of its principal authors, if it has fewer than five), unless they release you from this requirement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de83ac9739dc3eb70e15b6c9285b4b7206938222" translate="yes" xml:space="preserve">
          <source>List only the process &lt;small&gt;ID&lt;/small&gt; of the job&amp;rsquo;s process group leader.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b2356b25df63e113adc66f527a48249cc9e7985" translate="yes" xml:space="preserve">
          <source>List process &lt;small&gt;ID&lt;/small&gt;s in addition to the normal information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4791291906b728b3ff5195d2c300dad9c80cb52a" translate="yes" xml:space="preserve">
          <source>List the names of all Readline functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0588e814f2d21cdbbba6703f05050bf44f4d26ec" translate="yes" xml:space="preserve">
          <source>List the possible completions of the text before point, treating it as a command name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e7d8c02ded0a86831aa8dc760c443da3780f8b5" translate="yes" xml:space="preserve">
          <source>List the possible completions of the text before point, treating it as a filename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32c364e760f2dcc9773d5f67bc8c8b2c41b3e5de" translate="yes" xml:space="preserve">
          <source>List the possible completions of the text before point, treating it as a hostname.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="787c208564164447207cca1fc91e2359bc7e27df" translate="yes" xml:space="preserve">
          <source>List the possible completions of the text before point, treating it as a shell variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7748706420d46a17640eae54d47e278df748f65d" translate="yes" xml:space="preserve">
          <source>List the possible completions of the text before point, treating it as a username.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18cba9bae09e335253831c1faa4e5feece845846" translate="yes" xml:space="preserve">
          <source>List the possible completions of the text before point. When displaying completions, Readline sets the number of columns used for display to the value of &lt;code&gt;completion-display-width&lt;/code&gt;, the value of the environment variable &lt;code&gt;COLUMNS&lt;/code&gt;, or the screen width, in that order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57c9502a7d7d48fd4a86b45fefb2b163491c3ae1" translate="yes" xml:space="preserve">
          <source>Lists</source>
          <target state="translated">Lists</target>
        </trans-unit>
        <trans-unit id="a4a97c2b2e7d7b37d9f11ba3ccda555463bceba2" translate="yes" xml:space="preserve">
          <source>Lists of Commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0919ea0ff2c98d0bec36e30ca7274851b56675cb" translate="yes" xml:space="preserve">
          <source>Literal tildes that appear as the first character in elements of the &lt;code&gt;PATH&lt;/code&gt; variable are not expanded as described above under &lt;a href=&quot;tilde-expansion#Tilde-Expansion&quot;&gt;Tilde Expansion&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8709e97731b1d3c30dd2bfc5464bbdfb32ec5150" translate="yes" xml:space="preserve">
          <source>Local variables &quot;shadow&quot; variables with the same name declared at previous scopes. For instance, a local variable declared in a function hides a global variable of the same name: references and assignments refer to the local variable, leaving the global variable unmodified. When the function returns, the global variable is once again visible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a0a3d9b1f0215dda9247d514ef33401ca13e150" translate="yes" xml:space="preserve">
          <source>Locale Translation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a59cf22a5c9bec8f8a98ec4cb5b2f0dbd04d8a1" translate="yes" xml:space="preserve">
          <source>Locale-Specific Translation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a262a1284fca7a73f90fac6c73ecc09b7ab28766" translate="yes" xml:space="preserve">
          <source>Locate and remember (hash) commands as they are looked up for execution. This option is enabled by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04e3682353b56a2921e33cef86a36a973e382a38" translate="yes" xml:space="preserve">
          <source>Look for the Bash source code in directory &lt;var&gt;dir&lt;/var&gt;. Usually &lt;code&gt;configure&lt;/code&gt; can determine that directory automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c8606f02f484a20125d607e5631dda3a0ec841f" translate="yes" xml:space="preserve">
          <source>Looping Constructs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="887791bfe6656ace33a7a1ed37824f33be8c2ebf" translate="yes" xml:space="preserve">
          <source>Lowercase the current (or following) word. With a negative argument, lowercase the previous word, but do not move the cursor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c63ae6dd4fc9f9dda66970e827d13f7c73fe841c" translate="yes" xml:space="preserve">
          <source>M</source>
          <target state="translated">M</target>
        </trans-unit>
        <trans-unit id="f56099d279d3bbbe13433ab2b41f59ecda17c1b5" translate="yes" xml:space="preserve">
          <source>M--</source>
          <target state="translated">M--</target>
        </trans-unit>
        <trans-unit id="eb0aec4ec21a4101bd0ef2f34229c444b30b385e" translate="yes" xml:space="preserve">
          <source>M-- C-k</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7bf8d901f8b8e35548ee2a63db64dd733f5d157" translate="yes" xml:space="preserve">
          <source>M-1 0 C-d</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7591f331f91ebb10d139ef84c05c78dc46889d88" translate="yes" xml:space="preserve">
          <source>M-C-k</source>
          <target state="translated">M-C-k</target>
        </trans-unit>
        <trans-unit id="e286729ebdb433a6094d1271b49c5a2c6f950ccc" translate="yes" xml:space="preserve">
          <source>M-DEL</source>
          <target state="translated">M-DEL</target>
        </trans-unit>
        <trans-unit id="dfec75d824ab931885b10c2deb8b602ddf385540" translate="yes" xml:space="preserve">
          <source>M-b</source>
          <target state="translated">M-b</target>
        </trans-unit>
        <trans-unit id="a213eb1de2d97fd8ab6c0c8486e553f7cdc3e521" translate="yes" xml:space="preserve">
          <source>M-d</source>
          <target state="translated">M-d</target>
        </trans-unit>
        <trans-unit id="add69bf7aa5e86e6ac1a17b8047a626986b67564" translate="yes" xml:space="preserve">
          <source>M-f</source>
          <target state="translated">M-f</target>
        </trans-unit>
        <trans-unit id="748e454f60558bf0c3ce84d737eb8fc02adbf9f8" translate="yes" xml:space="preserve">
          <source>M-k</source>
          <target state="translated">M-k</target>
        </trans-unit>
        <trans-unit id="7555a33395fef6db20d121fb58c3221aa124e48c" translate="yes" xml:space="preserve">
          <source>M-y</source>
          <target state="translated">M-y</target>
        </trans-unit>
        <trans-unit id="10dfafbed59fc9d1d09c3566fd534d347478066d" translate="yes" xml:space="preserve">
          <source>MODIFICATIONS</source>
          <target state="translated">MODIFICATIONS</target>
        </trans-unit>
        <trans-unit id="330f70a96b57455e60ea79f3c77c8b9bbc80e7f2" translate="yes" xml:space="preserve">
          <source>Major Differences From The Bourne Shell</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a13cb3801daadaaaad284f639ac522e78e3a2c1" translate="yes" xml:space="preserve">
          <source>Make &lt;var&gt;name&lt;/var&gt;s readonly. These names cannot then be assigned values by subsequent assignment statements or unset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe79a4c96a8c61dd84b3d8f4de5922900deeb84f" translate="yes" xml:space="preserve">
          <source>Make Bash &lt;small&gt;POSIX&lt;/small&gt;-conformant by default (see &lt;a href=&quot;bash-posix-mode#Bash-POSIX-Mode&quot;&gt;Bash POSIX Mode&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b144f0bbad3df69b9624985274f440eaf0aa843" translate="yes" xml:space="preserve">
          <source>Make the &lt;code&gt;echo&lt;/code&gt; builtin expand backslash-escaped characters by default, without requiring the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fa29f841406e9273e65e66ce6799c3e9dd10f08" translate="yes" xml:space="preserve">
          <source>Make the shell a restricted shell (see &lt;a href=&quot;the-restricted-shell#The-Restricted-Shell&quot;&gt;The Restricted Shell&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef3baab5ee04d1e09d8422381233dab83b426a22" translate="yes" xml:space="preserve">
          <source>Make this shell act as if it had been directly invoked by login. When the shell is interactive, this is equivalent to starting a login shell with &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="836efb6e25a091dcb4ff8e1dbb2f0be6a5cbf14c" translate="yes" xml:space="preserve">
          <source>Makefile</source>
          <target state="translated">Makefile</target>
        </trans-unit>
        <trans-unit id="05def473aba0558d1630fcc42989825be8af3535" translate="yes" xml:space="preserve">
          <source>Makefilefile</source>
          <target state="translated">Makefilefile</target>
        </trans-unit>
        <trans-unit id="9c56c02dacd4da9dbffdc1f5f297ac43b8810db6" translate="yes" xml:space="preserve">
          <source>Makes &lt;var&gt;dir&lt;/var&gt; be the top of the stack, making it the new current directory as if it had been supplied as an argument to the &lt;code&gt;cd&lt;/code&gt; builtin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b14d955de5a31afe35f83846b2704bd26c502ad0" translate="yes" xml:space="preserve">
          <source>Making Bash behave more closely to what the POSIX standard specifies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e836fdc2572ab23d5dc8c36bd613ac6b0f82d63" translate="yes" xml:space="preserve">
          <source>Manual</source>
          <target state="translated">Manual</target>
        </trans-unit>
        <trans-unit id="33a11ddeb40a5ea23b8ede803f8e1aa69d8e1704" translate="yes" xml:space="preserve">
          <source>Manual: Appendices</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19cfb484b6178f6b9d15f8147a01c01331ec01b8" translate="yes" xml:space="preserve">
          <source>Manual: Indexes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5c70dc1930929d3c5404a84596e92ae32dcc16d" translate="yes" xml:space="preserve">
          <source>Many more examples &amp;ndash; an extensive collection of completions for most of the common GNU, Unix, and Linux commands &amp;ndash; are available as part of the bash_completion project. This is installed by default on many GNU/Linux distributions. Originally written by Ian Macdonald, the project now lives at &lt;a href=&quot;https://github.com/scop/bash-completion/&quot;&gt;https://github.com/scop/bash-completion/&lt;/a&gt;. There are ports for other systems such as Solaris and Mac OS X.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="929820933cbf583ca61cd2cbd76a10ebbdad3ab7" translate="yes" xml:space="preserve">
          <source>Many of the builtins have been extended by &lt;small&gt;POSIX&lt;/small&gt; or Bash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a76fa952b85656089b18b552030f74bffcd3a78" translate="yes" xml:space="preserve">
          <source>Mark each &lt;var&gt;name&lt;/var&gt; as readonly. The values of these names may not be changed by subsequent assignment. If the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c65f494822786d72599a219e58b5ad8b9f74bd3" translate="yes" xml:space="preserve">
          <source>Mark each &lt;var&gt;name&lt;/var&gt; for export to subsequent commands via the environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbc3f611fc43d45dcdc3e407212c20046c1b9585" translate="yes" xml:space="preserve">
          <source>Mark each &lt;var&gt;name&lt;/var&gt; to be passed to child processes in the environment. If the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47b2a5bb2c23f338ee6a62b187c1d3e2b1eb1b0e" translate="yes" xml:space="preserve">
          <source>Matches any one of the enclosed characters. A pair of characters separated by a hyphen denotes a &lt;var&gt;range expression&lt;/var&gt;; any character that falls between those two characters, inclusive, using the current locale&amp;rsquo;s collating sequence and character set, is matched. If the first character following the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb8a96214111f641ec065d807d183c827eb89b95" translate="yes" xml:space="preserve">
          <source>Matches any single character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60598833231b6c5c16760ebcb6b5a9ce13a7da8b" translate="yes" xml:space="preserve">
          <source>Matches any string, including the null string. When the &lt;code&gt;globstar&lt;/code&gt; shell option is enabled, and &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="580bc9960e476459e3ccd80437aa6badf17a078d" translate="yes" xml:space="preserve">
          <source>Matches anything except one of the given patterns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbc361d5b4d32c141da2e7dda8d5139e01c8f063" translate="yes" xml:space="preserve">
          <source>Matches one of the given patterns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="507ef24c56912e7e6756bece3eb9f74e4cd3a4c1" translate="yes" xml:space="preserve">
          <source>Matches one or more occurrences of the given patterns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcd86c7bd75a865687eb9ebbdc1a8b2be66c3323" translate="yes" xml:space="preserve">
          <source>Matches zero or more occurrences of the given patterns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c265be742c89b975ed703f6c4d6f306c544e2e2" translate="yes" xml:space="preserve">
          <source>Matches zero or one occurrence of the given patterns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef742df294c22559e343cc21d8a45225c22f195c" translate="yes" xml:space="preserve">
          <source>Metafy the next character typed. This is for keyboards without a meta key. Typing &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eb76460945245eee981e7f4e80d50ea11d83432" translate="yes" xml:space="preserve">
          <source>Miscellaneous Commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b775d8f987b6e8e0ceeb2569624f232e86e2599" translate="yes" xml:space="preserve">
          <source>Modern systems provide more secure ways to implement a restricted environment, such as &lt;code&gt;jails&lt;/code&gt;, &lt;code&gt;zones&lt;/code&gt;, or &lt;code&gt;containers&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a7ea294bf33134dce4b142b8b7182de29b978b2" translate="yes" xml:space="preserve">
          <source>Modifiers</source>
          <target state="translated">Modifiers</target>
        </trans-unit>
        <trans-unit id="14d16343acee667618ed3e2abddff9294d37ada9" translate="yes" xml:space="preserve">
          <source>Modify completion options for each &lt;var&gt;name&lt;/var&gt; according to the &lt;var&gt;option&lt;/var&gt;s, or for the currently-executing completion if no &lt;var&gt;name&lt;/var&gt;s are supplied. If no &lt;var&gt;option&lt;/var&gt;s are given, display the completion options for each &lt;var&gt;name&lt;/var&gt; or the current completion. The possible values of &lt;var&gt;option&lt;/var&gt; are those valid for the &lt;code&gt;complete&lt;/code&gt; builtin described above. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04121c88ece5c186f18f267948470d8744f5e497" translate="yes" xml:space="preserve">
          <source>Modify shell optional behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="331756640fcecc796eafaad9e2ab28526a0aed94" translate="yes" xml:space="preserve">
          <source>Modifying Shell Behavior</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbf4fccd6de98d8a8fc56159af58c88a0799f1f0" translate="yes" xml:space="preserve">
          <source>Modifying the results of substitution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0b6d569baa669ab5166eda7946cffd9aa8c24fb" translate="yes" xml:space="preserve">
          <source>More complex shell commands are composed of simple commands arranged together in a variety of ways: in a pipeline in which the output of one command becomes the input of a second, in a loop or conditional construct, or in some other grouping.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6f7b0cba471a3fb5a86435ad9b95d4d3186ccdc" translate="yes" xml:space="preserve">
          <source>More features unique to Bash may be found in &lt;a href=&quot;bash-features#Bash-Features&quot;&gt;Bash Features&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc5f2e099e3643dce228ebc5118d6bc9d530a456" translate="yes" xml:space="preserve">
          <source>Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d949bb6b18e78526fdb3309145863c0fff7acfb" translate="yes" xml:space="preserve">
          <source>Most versions of Unix make this a part of the operating system&amp;rsquo;s command execution mechanism. If the first line of a script begins with the two characters &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03a568ed0d0916cdf5158fedc938163865f34d79" translate="yes" xml:space="preserve">
          <source>Move &amp;lsquo;back&amp;rsquo; through the history list, fetching the previous command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="802387d1306c70f90614ec5492974da0b34d6702" translate="yes" xml:space="preserve">
          <source>Move &amp;lsquo;forward&amp;rsquo; through the history list, fetching the next command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea22070bff60174ad9198aadedea01b9e334bc86" translate="yes" xml:space="preserve">
          <source>Move back a character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f03abbd943590e5b676ac24ffec0cb3457a839fb" translate="yes" xml:space="preserve">
          <source>Move back one character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="555b84b86186f36ece3db4f40fd957046b94b4f4" translate="yes" xml:space="preserve">
          <source>Move back to the start of the current or previous word. Words are composed of letters and digits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="609e1270ca78a70ff45889670fd3fd78ff7848ad" translate="yes" xml:space="preserve">
          <source>Move back to the start of the current or previous word. Words are delimited by non-quoted shell metacharacters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b202f08f962725726cf136388f4e14e523a12a8" translate="yes" xml:space="preserve">
          <source>Move backward a word.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6be232605df98981975e07d50911ad5d613980f6" translate="yes" xml:space="preserve">
          <source>Move forward a character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d13a0267e092ec63b89b3880303a5185a25c3196" translate="yes" xml:space="preserve">
          <source>Move forward a word, where a word is composed of letters and digits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b8cd052c7c7c6b3baf215b9ba57515984535bce" translate="yes" xml:space="preserve">
          <source>Move forward one character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="606acc9a1c4941929e33d5ba6380faad05f1999a" translate="yes" xml:space="preserve">
          <source>Move forward to the end of the next word. Words are composed of letters and digits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b89d7ec6d2bd93bddd819bc89f1f0d6a26143b09" translate="yes" xml:space="preserve">
          <source>Move forward to the end of the next word. Words are delimited by non-quoted shell metacharacters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02b23ca4886e6967ab15ea2dc46e9717e5be7448" translate="yes" xml:space="preserve">
          <source>Move to the end of the input history, i.e., the line currently being entered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a6ce964c353d7fc77f5427c386721059f89e58e" translate="yes" xml:space="preserve">
          <source>Move to the end of the line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b197771ca8ea11c5879847015686b2f25546c56c" translate="yes" xml:space="preserve">
          <source>Move to the first line in the history.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8be6e00fb1b714d59f81a250036a76f44d397aa" translate="yes" xml:space="preserve">
          <source>Move to the start of the current line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c0251a5384fa6d692664ca6c0665abebb12594c" translate="yes" xml:space="preserve">
          <source>Move to the start of the line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53d14d8e8ec047e7ce0acf9c1000fbfe93a8d444" translate="yes" xml:space="preserve">
          <source>Moving about the input line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14c0fe91993a2f846fb463f4f9af616666e24b26" translate="yes" xml:space="preserve">
          <source>Moving about the line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b51a60734da64be0e618bacbea2865a8a7dcd669" translate="yes" xml:space="preserve">
          <source>N</source>
          <target state="translated">N</target>
        </trans-unit>
        <trans-unit id="e69fc18a69727f31dc484cc6cc5d98f4552fffd6" translate="yes" xml:space="preserve">
          <source>NOTES</source>
          <target state="translated">NOTES</target>
        </trans-unit>
        <trans-unit id="884999f8c31d1e58342a8bbb16985f2346ae4228" translate="yes" xml:space="preserve">
          <source>Names of all shell variables. May also be specified as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="855dac7ef3e4b8def896fa4ab44b01a71f10d1b7" translate="yes" xml:space="preserve">
          <source>Names of disabled shell builtins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2625ff45ce1ef5f0a4dc736a4f560f0b09467a01" translate="yes" xml:space="preserve">
          <source>Names of enabled shell builtins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd42d546f44ab55e4cace8a66a8665c92c311d05" translate="yes" xml:space="preserve">
          <source>Names of exported shell variables. May also be specified as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf305f7f425a639788a5ceb75efe5eff28e05a46" translate="yes" xml:space="preserve">
          <source>Names of running jobs, if job control is active.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d36dd11e7e18e31675c16c2b2bc011a6f22d9fc" translate="yes" xml:space="preserve">
          <source>Names of shell builtin commands. May also be specified as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3e4ba5fcc703baf196cfbafd0cf45e47a01ccd4" translate="yes" xml:space="preserve">
          <source>Names of shell functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aaf14106fd44ec96ea787010350180d7786fa15" translate="yes" xml:space="preserve">
          <source>Names of stopped jobs, if job control is active.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="599beb2be4e642c95316c695b3cb8b79ac302110" translate="yes" xml:space="preserve">
          <source>Next, any command specified with the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7a2f42bd50eaa66febaa97d85e69b1e9650256b" translate="yes" xml:space="preserve">
          <source>Next, the string specified as the argument to the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef13a5a0b262b0ac5dca1d912e920c21ac0452e9" translate="yes" xml:space="preserve">
          <source>No parameter and variable expansion, command substitution, arithmetic expansion, or filename expansion is performed on &lt;var&gt;word&lt;/var&gt;. If any part of &lt;var&gt;word&lt;/var&gt; is quoted, the &lt;var&gt;delimiter&lt;/var&gt; is the result of quote removal on &lt;var&gt;word&lt;/var&gt;, and the lines in the here-document are not expanded. If &lt;var&gt;word&lt;/var&gt; is unquoted, all lines of the here-document are subjected to parameter expansion, command substitution, and arithmetic expansion, the character sequence &lt;code&gt;\newline&lt;/code&gt; is ignored, and &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b11e4927fbb66107c5529cfa17ebc2f1d5088f44" translate="yes" xml:space="preserve">
          <source>Non-builtin commands started by Bash have signal handlers set to the values inherited by the shell from its parent. When job control is not in effect, asynchronous commands ignore &lt;code&gt;SIGINT&lt;/code&gt; and &lt;code&gt;SIGQUIT&lt;/code&gt; in addition to these inherited handlers. Commands run as a result of command substitution ignore the keyboard-generated job control signals &lt;code&gt;SIGTTIN&lt;/code&gt;, &lt;code&gt;SIGTTOU&lt;/code&gt;, and &lt;code&gt;SIGTSTP&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c485ae1fdc8aaec172e2cfbb73ba1b1edd86f00d" translate="yes" xml:space="preserve">
          <source>Non-incremental searches read the entire search string before starting to search for matching history lines. The search string may be typed by the user or be part of the contents of the current line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c6ec55c5b4bfe5089bd9904bc736c7597d8e5c2" translate="yes" xml:space="preserve">
          <source>Non-interactive shells exit if &lt;var&gt;filename&lt;/var&gt; in &lt;code&gt;.&lt;/code&gt;&lt;var&gt;filename&lt;/var&gt; is not found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cabefe578a859ab8e65ca427392ad944a8360d2" translate="yes" xml:space="preserve">
          <source>Non-interactive shells exit if a parameter expansion error occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1d6b4f667281a0903111799342dc09dac1a5b7f" translate="yes" xml:space="preserve">
          <source>Non-interactive shells exit if a syntax error in an arithmetic expansion results in an invalid expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f3b130b3679867796e7b2794d8d4d0a8d2adf7b" translate="yes" xml:space="preserve">
          <source>Non-interactive shells exit if there is a syntax error in a script read with the &lt;code&gt;.&lt;/code&gt; or &lt;code&gt;source&lt;/code&gt; builtins, or in a string processed by the &lt;code&gt;eval&lt;/code&gt; builtin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c27101824728b035245beb759417f36eeb9e65c" translate="yes" xml:space="preserve">
          <source>Notation used in this text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e867b380c598d9e97d14aa2959425a607f995453" translate="yes" xml:space="preserve">
          <source>Note that for historical reasons, in the most common usage the curly braces that surround the body of the function must be separated from the body by &lt;code&gt;blank&lt;/code&gt;s or newlines. This is because the braces are reserved words and are only recognized as such when they are separated from the command list by whitespace or another shell metacharacter. Also, when using the braces, the &lt;var&gt;list&lt;/var&gt; must be terminated by a semicolon, a &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d0eea6cc1840504408ea16ccadd02eec4fd32c0" translate="yes" xml:space="preserve">
          <source>Note that if no expansion occurs, no splitting is performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85099ec840523ed8d40cae98363cbd5b2fc921b8" translate="yes" xml:space="preserve">
          <source>Note that the order of redirections is significant. For example, the command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74848d504d1ec5c74a9815027d3618d6e3ab1fad" translate="yes" xml:space="preserve">
          <source>Note that when the mode is interpreted as an octal number, each number of the umask is subtracted from &lt;code&gt;7&lt;/code&gt;. Thus, a umask of &lt;code&gt;022&lt;/code&gt; results in permissions of &lt;code&gt;755&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2ac05f5cec4f5c8c50a92866154dc88ab43649c" translate="yes" xml:space="preserve">
          <source>Note that wherever a &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e51443fffacab700dcc08997d3c849facc3f9f48" translate="yes" xml:space="preserve">
          <source>Notice how</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="997abb76eabee288731fc2937ad66abaea3fbea8" translate="yes" xml:space="preserve">
          <source>Numeric Arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08a914cde05039694ef0194d9ee79ff9a79dde33" translate="yes" xml:space="preserve">
          <source>O</source>
          <target state="translated">O</target>
        </trans-unit>
        <trans-unit id="0a38dbc78e366f12451b07667d8eb4386b2e3e9d" translate="yes" xml:space="preserve">
          <source>Of the two forms, the first is preferred. This is semantically equivalent to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60cc2e1aa5c6781f9d89f9ab563e754633cc2620" translate="yes" xml:space="preserve">
          <source>Of these list operators, &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9f43fe082c76f430e5842d0449865dc57520a1d" translate="yes" xml:space="preserve">
          <source>Often during an interactive session you type in a long line of text, only to notice that the first word on the line is misspelled. The Readline library gives you a set of commands for manipulating the text as you type it in, allowing you to just fix your typo, and not forcing you to retype the majority of the line. Using these editing commands, you move the cursor to the place that needs correction, and delete or insert the text of the corrections. Then, when you are satisfied with the line, you simply press &lt;code&gt;RET&lt;/code&gt;. You do not have to be at the end of the line to press &lt;code&gt;RET&lt;/code&gt;; the entire line is accepted regardless of the location of the cursor within the line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0049a66519cae71159800bb77a35007bc2d76d3" translate="yes" xml:space="preserve">
          <source>On</source>
          <target state="translated">On</target>
        </trans-unit>
        <trans-unit id="8ebccea227af14bbb1599e724e0522b214338baf" translate="yes" xml:space="preserve">
          <source>On systems that can support it, there is an additional expansion available: &lt;var&gt;process substitution&lt;/var&gt;. This is performed at the same time as tilde, parameter, variable, and arithmetic expansion and command substitution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07afde5708f0ba3067a7ec1085ed9cd58e1783d1" translate="yes" xml:space="preserve">
          <source>On systems that have the &lt;code&gt;env&lt;/code&gt; program, you can do it like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eb62ac292e5797fd17df43924a97d74fb272dc2" translate="yes" xml:space="preserve">
          <source>On systems that support it, the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8f6ec6d8abab1598eff4845cedd84ce7452f322" translate="yes" xml:space="preserve">
          <source>Once a compspec has been found, it is used to generate the list of matching words. If a compspec is not found, the default Bash completion described above (see &lt;a href=&quot;commands-for-completion#Commands-For-Completion&quot;&gt;Commands For Completion&lt;/a&gt;) is performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b4cb352a1834cc4f714a3045fd1a423a629bf84" translate="yes" xml:space="preserve">
          <source>Once installed using &lt;code&gt;complete&lt;/code&gt;, &lt;code&gt;_comp_cd&lt;/code&gt; will be called every time we attempt word completion for a &lt;code&gt;cd&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b189e60668574dd5cd46ed1f2e9e4d2bf426c36a" translate="yes" xml:space="preserve">
          <source>Once you have determined that a bug actually exists, use the &lt;code&gt;bashbug&lt;/code&gt; command to submit a bug report. If you have a fix, you are encouraged to mail that as well! Suggestions and &amp;lsquo;philosophical&amp;rsquo; bug reports may be mailed to &lt;a href=&quot;mailto:bug-bash@gnu.org&quot;&gt;bug-bash@gnu.org&lt;/a&gt; or posted to the Usenet newsgroup &lt;code&gt;gnu.bash.bug&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7ee0466359400646ed4e6c00353d527121d3c64" translate="yes" xml:space="preserve">
          <source>Once you know the name of the command, simply place on a line in the init file the name of the key you wish to bind the command to, a colon, and then the name of the command. There can be no space between the key name and the colon &amp;ndash; that will be interpreted as part of the key name. The name of the key can be expressed in different ways, depending on what you find most comfortable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8609e6315434e29702d2030592ee086c67b1328a" translate="yes" xml:space="preserve">
          <source>One line is read from the standard input, or from the file descriptor &lt;var&gt;fd&lt;/var&gt; supplied as an argument to the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efa6b1ad3f2ac7fe9f4ec4da46bbf66dd6d5c8ae" translate="yes" xml:space="preserve">
          <source>Only brace expansion, word splitting, and filename expansion can increase the number of words of the expansion; other expansions expand a single word to a single word. The only exceptions to this are the expansions of &lt;code&gt;&quot;$@&quot;&lt;/code&gt; and &lt;code&gt;$*&lt;/code&gt; (see &lt;a href=&quot;special-parameters#Special-Parameters&quot;&gt;Special Parameters&lt;/a&gt;), and &lt;code&gt;&quot;${&lt;var&gt;name&lt;/var&gt;[@]}&quot;&lt;/code&gt; and &lt;code&gt;${&lt;var&gt;name&lt;/var&gt;[*]}&lt;/code&gt; (see &lt;a href=&quot;arrays#Arrays&quot;&gt;Arrays&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3f63ffbf309566a1b64f190313887ac80114620" translate="yes" xml:space="preserve">
          <source>Operation Controls</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a123ce747593062b420ea1afad3f992c718a91f0" translate="yes" xml:space="preserve">
          <source>Operators are evaluated in order of precedence. Sub-expressions in parentheses are evaluated first and may override the precedence rules above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c49b1643c903074dd04faa3ee683900d824639b" translate="yes" xml:space="preserve">
          <source>Optional Features</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e79fc4ed7d2f9247da49d7371869cb864168199f" translate="yes" xml:space="preserve">
          <source>Optionally waits for the command to complete and collects its exit status (see &lt;a href=&quot;exit-status#Exit-Status&quot;&gt;Exit Status&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="653829574c84efd3074e50a0e8430336d832c8f9" translate="yes" xml:space="preserve">
          <source>Optionally, type &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d381474b1479ffb5678f11212c0bdc2bff5feea8" translate="yes" xml:space="preserve">
          <source>Options recognized by the configuration program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="482607f33da36f20af8510afc8761bfa783d9b63" translate="yes" xml:space="preserve">
          <source>Options, if supplied, have the following meanings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6b75389e57a647a7a0fa71f758f4ae59a0d5037" translate="yes" xml:space="preserve">
          <source>Other miscellaneous commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f414ad44e61646509b29eca330bb7f94be2be3f" translate="yes" xml:space="preserve">
          <source>Other options, if specified, have the following meanings. The arguments to the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ba0c424a990ead00e4ec8cb75b53f66dbc1b9a3" translate="yes" xml:space="preserve">
          <source>Otherwise, roughly speaking, the shell reads its input and divides the input into words and operators, employing the quoting rules to select which meanings to assign various words and characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5083607f8cf9f9a3292e875a3d3160e84830624" translate="yes" xml:space="preserve">
          <source>Otherwise, the expression is false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="735bc0b3cdeff740416fb1e21ec082062d907d0e" translate="yes" xml:space="preserve">
          <source>Output the &lt;var&gt;arg&lt;/var&gt;s, separated by spaces, terminated with a newline. The return status is 0 unless a write error occurs. If</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="511993d3c99719e38a6779073019dacd7178ddb9" translate="yes" xml:space="preserve">
          <source>P</source>
          <target state="translated">P</target>
        </trans-unit>
        <trans-unit id="d613d88cb2d86f484f6f82d44ac1fc60722abe20" translate="yes" xml:space="preserve">
          <source>PDF</source>
          <target state="translated">PDF</target>
        </trans-unit>
        <trans-unit id="70fe60b7dfe0837f2c69677bfef128c134937b16" translate="yes" xml:space="preserve">
          <source>PNG</source>
          <target state="translated">PNG</target>
        </trans-unit>
        <trans-unit id="23507e798d66fee0b05313c2a15e15ff93e82f20" translate="yes" xml:space="preserve">
          <source>POSIX</source>
          <target state="translated">POSIX</target>
        </trans-unit>
        <trans-unit id="36210f79c9877df688092c80b4449beec4ae7a53" translate="yes" xml:space="preserve">
          <source>POSIX Mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7840941760ebcd9fee13ec0f1666aa06fbb11bc3" translate="yes" xml:space="preserve">
          <source>PREAMBLE</source>
          <target state="translated">PREAMBLE</target>
        </trans-unit>
        <trans-unit id="0dac8aebac689487e61a61dc096c7a01df49d173" translate="yes" xml:space="preserve">
          <source>PREFIX/etc/config.site</source>
          <target state="translated">PREFIX/etc/config.site</target>
        </trans-unit>
        <trans-unit id="6a5cbc94cd76ba5c8832807baa0fc0bf7c997a10" translate="yes" xml:space="preserve">
          <source>PREFIX/share/config.site</source>
          <target state="translated">PREFIX/share/config.site</target>
        </trans-unit>
        <trans-unit id="dc376c9466a33946c4f972b93a88c847031ecc56" translate="yes" xml:space="preserve">
          <source>Parallel provides a built-in mechanism to remove filename extensions, which lends itself to batch file transformations or renaming:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa44e825207d5e6e2c87337e60831915ff38c62b" translate="yes" xml:space="preserve">
          <source>Parameter and Variable Index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4a5c6a2bfebc6eda40b7b2940c3ae930c10de54" translate="yes" xml:space="preserve">
          <source>Parameters denoted by special characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49f3e028dba674f0dcf953f185515ad3c0ace436" translate="yes" xml:space="preserve">
          <source>Parser syntax errors will not cause the shell to exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b239d04549c0c2e0f5845a6f6492f34cc6230c2" translate="yes" xml:space="preserve">
          <source>Parses the tokens into simple and compound commands (see &lt;a href=&quot;shell-commands#Shell-Commands&quot;&gt;Shell Commands&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8651e2cb1a7196435daa44c9ec8860271a8cecf7" translate="yes" xml:space="preserve">
          <source>Parsing the value of &lt;code&gt;SHELLOPTS&lt;/code&gt; from the shell environment at startup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="535ab3a1c5459ace2d0b0bcb8fc022e58a4100d9" translate="yes" xml:space="preserve">
          <source>Pattern Matching</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33441ab464d849ec078472439c7ed257ed7642d8" translate="yes" xml:space="preserve">
          <source>Perform alias expansion on the current line (see &lt;a href=&quot;aliases#Aliases&quot;&gt;Aliases&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7acc1d7a6009b9fbf53f3628042bf9b78cdab1ad" translate="yes" xml:space="preserve">
          <source>Perform directory name completion if the compspec generates no matches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0ee075401ecbb7710373d6e9ae9f23c4921e03f" translate="yes" xml:space="preserve">
          <source>Perform filename completion and insert the list of possible completions enclosed within braces so the list is available to the shell (see &lt;a href=&quot;brace-expansion#Brace-Expansion&quot;&gt;Brace Expansion&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92c44efdc4824b35de3ac1b5eff4d18f4827ecd6" translate="yes" xml:space="preserve">
          <source>Perform history and alias expansion on the current line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebd4dd29b0b99da43be7e88b436304dc9c718008" translate="yes" xml:space="preserve">
          <source>Perform history expansion on the current line and insert a space (see &lt;a href=&quot;history-interaction#History-Interaction&quot;&gt;History Interaction&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87d6be2655fa082259da2ba5288a00d313ba515b" translate="yes" xml:space="preserve">
          <source>Perform history expansion on the current line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92982c52c4e88da6d39ee367423900c1c347d781" translate="yes" xml:space="preserve">
          <source>Perform history substitution on the &lt;var&gt;arg&lt;/var&gt;s and display the result on the standard output, without storing the results in the history list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1bbb001cd048992a7ed9ef590e9403c1e499b2f" translate="yes" xml:space="preserve">
          <source>Perform the rest of the default Bash completions if the compspec generates no matches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eecde23b59a01486182ed6efdd5c7f5843bef96f" translate="yes" xml:space="preserve">
          <source>Perform tilde expansion on the current word.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d545fbb92646613a09ad066fdf580ae09d740fdd" translate="yes" xml:space="preserve">
          <source>Performs any necessary redirections (see &lt;a href=&quot;redirections#Redirections&quot;&gt;Redirections&lt;/a&gt;) and removes the redirection operators and their operands from the argument list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19f85558b90ce509bef028a8bda95ab6ac9e329a" translate="yes" xml:space="preserve">
          <source>Performs the various shell expansions (see &lt;a href=&quot;shell-expansions#Shell-Expansions&quot;&gt;Shell Expansions&lt;/a&gt;), breaking the expanded tokens into lists of filenames (see &lt;a href=&quot;filename-expansion#Filename-Expansion&quot;&gt;Filename Expansion&lt;/a&gt;) and commands and arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5df1e14fdba13b1a3f9690f736bcb2aac132e72" translate="yes" xml:space="preserve">
          <source>Pipelines</source>
          <target state="translated">Pipelines</target>
        </trans-unit>
        <trans-unit id="83bd454ad11177553299716427482ee2e807bf81" translate="yes" xml:space="preserve">
          <source>Placing a list of commands between curly braces causes the list to be executed in the current shell context. No subshell is created. The semicolon (or newline) following &lt;var&gt;list&lt;/var&gt; is required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="880c8d044e4fbccf8e2c6f06679d9a1927a1878b" translate="yes" xml:space="preserve">
          <source>Placing a list of commands between parentheses causes a subshell environment to be created (see &lt;a href=&quot;command-execution-environment#Command-Execution-Environment&quot;&gt;Command Execution Environment&lt;/a&gt;), and each of the commands in &lt;var&gt;list&lt;/var&gt; to be executed in that subshell. Since the &lt;var&gt;list&lt;/var&gt; is executed in a subshell, variable assignments do not remain in effect after the subshell completes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f1fd18067343152339e9143fee4118fd28d9b95" translate="yes" xml:space="preserve">
          <source>Please report all bugs you find in Bash. But first, you should make sure that it really is a bug, and that it appears in the latest version of Bash. The latest version of Bash is always available for FTP from &lt;a href=&quot;ftp://ftp.gnu.org/pub/gnu/bash/&quot;&gt;ftp://ftp.gnu.org/pub/gnu/bash/&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="511d735aa35cdf8e795b9937986ccbdbb6381baf" translate="yes" xml:space="preserve">
          <source>Please send all reports concerning this manual to &lt;a href=&quot;mailto:bug-bash@gnu.org&quot;&gt;bug-bash@gnu.org&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0409ca1ed07e3ea1190ff159179e055a95170973" translate="yes" xml:space="preserve">
          <source>Positional Parameters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b670406f48db3c38c8321037fdcfd4db2850ca9f" translate="yes" xml:space="preserve">
          <source>Possible completions go into the &lt;var&gt;COMPREPLY&lt;/var&gt; array variable, one completion per array element. The programmable completion system retrieves the completions from there when the function returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8320940a96a5a393d94b9b77bd893ee58704973c" translate="yes" xml:space="preserve">
          <source>Preserve all the Invariant Sections of the Document, unaltered in their text and in their titles. Section numbers or the equivalent are not considered part of the section titles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b04c7d12d9703e639a0203d9c985db37387cac15" translate="yes" xml:space="preserve">
          <source>Preserve all the copyright notices of the Document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5051a88a1d0d3ba638df6ea419ccd1ae7f60d6b6" translate="yes" xml:space="preserve">
          <source>Preserve any Warranty Disclaimers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34c134b6a9e8fed47c8697f7e99d46697aacfda5" translate="yes" xml:space="preserve">
          <source>Preserve in that license notice the full lists of Invariant Sections and required Cover Texts given in the Document&amp;rsquo;s license notice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a9bef098dcea53925fd46969413eda7810fed69" translate="yes" xml:space="preserve">
          <source>Preserve the network location, if any, given in the Document for public access to a Transparent copy of the Document, and likewise the network locations given in the Document for previous versions it was based on. These may be placed in the &amp;ldquo;History&amp;rdquo; section. You may omit a network location for a work that was published at least four years before the Document itself, or if the original publisher of the version it refers to gives permission.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7230944595b16832a48eed067321909e9c8e1c41" translate="yes" xml:space="preserve">
          <source>Preserve the section Entitled &amp;ldquo;History&amp;rdquo;, Preserve its Title, and add to it an item stating at least the title, year, new authors, and publisher of the Modified Version as given on the Title Page. If there is no section Entitled &amp;ldquo;History&amp;rdquo; in the Document, create one stating the title, year, authors, and publisher of the Document as given on its Title Page, then add an item describing the Modified Version as stated in the previous sentence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f89dd9d9837e075d78374d4ecf26b73966b821c" translate="yes" xml:space="preserve">
          <source>Prevent output redirection using &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3da23b411641bd13de7a7c7d09b9ed8c5419c67" translate="yes" xml:space="preserve">
          <source>Primitives used in composing expressions for the &lt;code&gt;test&lt;/code&gt; builtin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f1e0197c2d110325ba2a6f7b55538971aa97161" translate="yes" xml:space="preserve">
          <source>Print a summary of the options to &lt;code&gt;configure&lt;/code&gt;, and exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bd67ec0e598053aa289b95ce99f4f6f6251ee3e" translate="yes" xml:space="preserve">
          <source>Print a trace of simple commands, &lt;code&gt;for&lt;/code&gt; commands, &lt;code&gt;case&lt;/code&gt; commands, &lt;code&gt;select&lt;/code&gt; commands, and arithmetic &lt;code&gt;for&lt;/code&gt; commands and their arguments or associated word lists after they are expanded and before they are executed. The value of the &lt;code&gt;PS4&lt;/code&gt; variable is expanded and the resultant value is printed before the command and its expanded arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad45eadb9ff5f2beddd8cd5428d107bf917519eb" translate="yes" xml:space="preserve">
          <source>Print all of the Readline key sequences bound to macros and the strings they output. If a numeric argument is supplied, the output is formatted in such a way that it can be made part of an &lt;var&gt;inputrc&lt;/var&gt; file. This command is unbound by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b20400dac0d04d07bbe8ec2453627f6dd8a219a4" translate="yes" xml:space="preserve">
          <source>Print all of the functions and their key bindings to the Readline output stream. If a numeric argument is supplied, the output is formatted in such a way that it can be made part of an &lt;var&gt;inputrc&lt;/var&gt; file. This command is unbound by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c63a0c5cbb1a50241f4d040a510c95dcd2d95e28" translate="yes" xml:space="preserve">
          <source>Print all of the settable variables and their values to the Readline output stream. If a numeric argument is supplied, the output is formatted in such a way that it can be made part of an &lt;var&gt;inputrc&lt;/var&gt; file. This command is unbound by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc05f20b16adac2932d98cdb9236fa494b542ce0" translate="yes" xml:space="preserve">
          <source>Print out the user and system times used by the shell and its children. The return status is zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93a7cede8f62da0b88c4d9e5ccc03126e81aed81" translate="yes" xml:space="preserve">
          <source>Print shell input lines as they are read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de6551f6f1c9f4922ea13535415e2434d52a56f0" translate="yes" xml:space="preserve">
          <source>Print the absolute pathname of the current working directory. If the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5b8c7b9692e19cea248883b471cbe4a02b15c52" translate="yes" xml:space="preserve">
          <source>Print the last keboard macro defined in a format suitable for the &lt;var&gt;inputrc&lt;/var&gt; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1ac9e83a0f06f24c4a46e0daf4f42f78012ac3b" translate="yes" xml:space="preserve">
          <source>Print the new command but do not execute it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d22f1122bdb02ccdf4ab890794c7a933be774dd7" translate="yes" xml:space="preserve">
          <source>Print the version of Autoconf used to generate the &lt;code&gt;configure&lt;/code&gt; script, and exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="980800df05b44d2cf0c16777388d774fa898f7a7" translate="yes" xml:space="preserve">
          <source>Printing characters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f000b74b7957bff2ef870cdba3820ca491152372" translate="yes" xml:space="preserve">
          <source>Process Substitution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="013dc2c5fbd740b5ac32750d97bea26d044c5ae2" translate="yes" xml:space="preserve">
          <source>Process substitution allows a process&amp;rsquo;s input or output to be referred to using a filename. It takes the form of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a92173381a2ba794486d76e958eb41414380ba76" translate="yes" xml:space="preserve">
          <source>Process substitution is not available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd421c0355cbf93d24d93d62eb09630ecdd30cf0" translate="yes" xml:space="preserve">
          <source>Produces a listing using full pathnames; the default listing format uses a tilde to denote the home directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60641a34941124c5041d84772ebca73870f169c6" translate="yes" xml:space="preserve">
          <source>Programmable Completion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e15950a5b29b4b75ebc762ca8ca7e07eabe9b20a" translate="yes" xml:space="preserve">
          <source>Programmable Completion Builtins</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3156e00d3c2588c639e0d3cf6821258b05761c7" translate="yes" xml:space="preserve">
          <source>Q</source>
          <target state="translated">Q</target>
        </trans-unit>
        <trans-unit id="c1c64ae43679154571b2a33870f841e34a17548c" translate="yes" xml:space="preserve">
          <source>Query about which keys invoke the named &lt;var&gt;function&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6d2eaf8d92d9910a1d8e4545fc4a145f3ff581d" translate="yes" xml:space="preserve">
          <source>Quick Substitution. Repeat the last command, replacing &lt;var&gt;string1&lt;/var&gt; with &lt;var&gt;string2&lt;/var&gt;. Equivalent to &lt;code&gt;!!:s/&lt;var&gt;string1&lt;/var&gt;/&lt;var&gt;string2&lt;/var&gt;/&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3400051fed470fd58342025a3abd443fba332085" translate="yes" xml:space="preserve">
          <source>Quick reference helps you find the variable you want.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de6ea4557b8a6432ecd91c9e6dca8f09d4cd4574" translate="yes" xml:space="preserve">
          <source>Quote Removal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82ee851defe1bbeb88b04238828fd723597cfccb" translate="yes" xml:space="preserve">
          <source>Quote the substituted words as with &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7e21b544b7be41554eedb4686a78c96755ea286" translate="yes" xml:space="preserve">
          <source>Quote the substituted words, escaping further substitutions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60fefb29eda0237f92306cb85899330ca8b230ee" translate="yes" xml:space="preserve">
          <source>Quoting</source>
          <target state="translated">Quoting</target>
        </trans-unit>
        <trans-unit id="b614a6ab4c2f711b098f9953e8dbf8256069bb53" translate="yes" xml:space="preserve">
          <source>Quoting is used to remove the special meaning of certain characters or words to the shell. Quoting can be used to disable special treatment for special characters, to prevent reserved words from being recognized as such, and to prevent parameter expansion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06576556d1ad802f247cad11ae748be47b70cd9c" translate="yes" xml:space="preserve">
          <source>R</source>
          <target state="translated">R</target>
        </trans-unit>
        <trans-unit id="dd58914034f8d43f811e6c4cbf40eecb5c44dd6b" translate="yes" xml:space="preserve">
          <source>RELICENSING</source>
          <target state="translated">RELICENSING</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
