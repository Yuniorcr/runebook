<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="en" datatype="htmlbody" original="bash">
    <body>
      <group id="bash">
        <trans-unit id="af4b87685135eac0fb8877d4c706f163b571cac7" translate="yes" xml:space="preserve">
          <source>equality and inequality</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20b31e25580327bd89cb430af5dafc18dc4cca7d" translate="yes" xml:space="preserve">
          <source>erasedups</source>
          <target state="translated">erasedups</target>
        </trans-unit>
        <trans-unit id="cdecabe1520a398e4e46deff9d55b19bed6d6457" translate="yes" xml:space="preserve">
          <source>escape</source>
          <target state="translated">escape</target>
        </trans-unit>
        <trans-unit id="a84c906906538759cff80a5c084f03db67f523b1" translate="yes" xml:space="preserve">
          <source>evaluation, arithmetic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6676ef1d0a74386209605f29a76108976d966048" translate="yes" xml:space="preserve">
          <source>event designators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b55e22fe7830e8fe49f48f834b913ef8618f0521" translate="yes" xml:space="preserve">
          <source>exact</source>
          <target state="translated">exact</target>
        </trans-unit>
        <trans-unit id="131ba025f31f7dfeb68575160f6fa0c8713b1672" translate="yes" xml:space="preserve">
          <source>examples/complete</source>
          <target state="translated">examples/complete</target>
        </trans-unit>
        <trans-unit id="30652948b0bf2463385bcd1b7e6ae07f68d6ee95" translate="yes" xml:space="preserve">
          <source>except for the output format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3827c0d25cae442bbf1da14bca8b795bed453e12" translate="yes" xml:space="preserve">
          <source>exec -l bash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a716e59dcf7689eca249dcebbcc9acab131c70e" translate="yes" xml:space="preserve">
          <source>exec bash --login</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="041b4f3693861ca3414547daa1b4548d00f06d28" translate="yes" xml:space="preserve">
          <source>exec bash -l</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98908800e040040490c41b0d802503a631175a16" translate="yes" xml:space="preserve">
          <source>execution environment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02bfbca7c50eea6ef860280445622b05fdfded8f" translate="yes" xml:space="preserve">
          <source>exit status</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="429688a9b9de3a4445605c3943bf11bab1486e82" translate="yes" xml:space="preserve">
          <source>expansion</source>
          <target state="translated">expansion</target>
        </trans-unit>
        <trans-unit id="98f7434bb40ab895ac53704a640ccf244621db0e" translate="yes" xml:space="preserve">
          <source>expansion, arithmetic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e45a40d589e7629d8079003f94ea9baf18ca056c" translate="yes" xml:space="preserve">
          <source>expansion, brace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ba7213c689070cc8c92c720217dae3025e9f3b5" translate="yes" xml:space="preserve">
          <source>expansion, filename</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95937acdff72afbb68c2ddfcd37b48bc8257b37e" translate="yes" xml:space="preserve">
          <source>expansion, parameter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e41ed97b60e09562b2a6065ad5536cba4456084" translate="yes" xml:space="preserve">
          <source>expansion, pathname</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b516d9c4bb551675be6397fb2f421a1c9e4170c" translate="yes" xml:space="preserve">
          <source>expansion, tilde</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d422390c5a3d1333fb7f5d97621fa0f6e7f0d6c" translate="yes" xml:space="preserve">
          <source>exponentiation</source>
          <target state="translated">exponentiation</target>
        </trans-unit>
        <trans-unit id="dd2e3a77297c30d1fbdc65634d9bf4c9be79f995" translate="yes" xml:space="preserve">
          <source>export -n</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61cb532955223863c06a90b63650286ca19b919c" translate="yes" xml:space="preserve">
          <source>expressions, arithmetic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08ab591c6017e62392449b09ce57095e02fa97a4" translate="yes" xml:space="preserve">
          <source>expressions, conditional</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfcc2a348e7474ada22cf75b583de6a72c8255e0" translate="yes" xml:space="preserve">
          <source>fg %1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2da0b68df8841752bb747a76780679bcd87c6215" translate="yes" xml:space="preserve">
          <source>field</source>
          <target state="translated">field</target>
        </trans-unit>
        <trans-unit id="971c419dd609331343dee105fffd0f4608dc0bf2" translate="yes" xml:space="preserve">
          <source>file</source>
          <target state="translated">file</target>
        </trans-unit>
        <trans-unit id="3ec5cf89afd58d5591920a53b707c43aa2caf649" translate="yes" xml:space="preserve">
          <source>file containing system-dependent definitions. Finally, it creates a shell script named &lt;code&gt;config.status&lt;/code&gt; that you can run in the future to recreate the current configuration, a file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6873b3d211d45c7f5e551cb83f9d6305b2a03720" translate="yes" xml:space="preserve">
          <source>file contains a list of systems for which this should be turned off, and &lt;code&gt;configure&lt;/code&gt; disables this option automatically for a number of systems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08deae8d9ea9bc0b84f94475d868351830e9f7e7" translate="yes" xml:space="preserve">
          <source>filename</source>
          <target state="translated">filename</target>
        </trans-unit>
        <trans-unit id="aad9e3d11dd1407027a26d1d570d7187dd57b0fc" translate="yes" xml:space="preserve">
          <source>filename expansion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cd12fed44bf79bcdd44edaf89d08d9bf90bf8e9" translate="yes" xml:space="preserve">
          <source>flag is given, the commands are listed on standard output. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="253877973c2acdf7783716de746df48442789cef" translate="yes" xml:space="preserve">
          <source>flag reverses the order of the listing. Otherwise, the editor given by &lt;var&gt;ename&lt;/var&gt; is invoked on a file containing those commands. If &lt;var&gt;ename&lt;/var&gt; is not given, the value of the following variable expansion is used: &lt;code&gt;${FCEDIT:-${EDITOR:-vi}}&lt;/code&gt;. This says to use the value of the &lt;code&gt;FCEDIT&lt;/code&gt; variable if set, or the value of the &lt;code&gt;EDITOR&lt;/code&gt; variable if that is set, or &lt;code&gt;vi&lt;/code&gt; if neither is set. When editing is complete, the edited commands are echoed and executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a25f3af8a1f4563581aa061891a1e9c766bfc42a" translate="yes" xml:space="preserve">
          <source>flag suppresses the command numbers when listing. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29f365503fe022e0577395cf3552e10c4d2a0e3e" translate="yes" xml:space="preserve">
          <source>for the possible values of each field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94ed7003b24274bb77481223b08bdff5c3a2f6ca" translate="yes" xml:space="preserve">
          <source>for which the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ed97adde4c8048aa5958ca36ef990f92927ba40" translate="yes" xml:space="preserve">
          <source>foreground</source>
          <target state="translated">foreground</target>
        </trans-unit>
        <trans-unit id="cacfbd40505fff5a97d7effce15468bbc881b94d" translate="yes" xml:space="preserve">
          <source>form feed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="943d602782a7e8870ee56fc210e457afc63e20f0" translate="yes" xml:space="preserve">
          <source>from the source code in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c218e39efa2e1aae69f39d2054528369ce1e1f46" translate="yes" xml:space="preserve">
          <source>function</source>
          <target state="translated">function</target>
        </trans-unit>
        <trans-unit id="fdbf28a95c889bb410a216fd5320895db40d4469" translate="yes" xml:space="preserve">
          <source>functions, shell</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e4f3d4dbe58f8e1da9c34eda01c027b303b5687" translate="yes" xml:space="preserve">
          <source>had been executed. When the shell enters &lt;small&gt;POSIX&lt;/small&gt; mode, it sets this variable if it was not already set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bba1b92bcdad8ccfae79e3f5cdd806ddf294f09b" translate="yes" xml:space="preserve">
          <source>has been supplied, the shell displays the trap commands associated with each &lt;var&gt;sigspec&lt;/var&gt;. If no arguments are supplied, or only</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e6612187f3e7eb3376df48aff2cace54b528b6e" translate="yes" xml:space="preserve">
          <source>has no effect if the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c19ba4537df6613898e1a14c024318cf25deb6f" translate="yes" xml:space="preserve">
          <source>hash -p</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd2547d0fa01fa66eb4611ce7d694a1e658e4ede" translate="yes" xml:space="preserve">
          <source>history builtins</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f759e45f6cb354c043b351f1dbc0aa9e324256dd" translate="yes" xml:space="preserve">
          <source>history events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f179ee84118f3e0b3e26bc8c05abfb7fd3bca6a6" translate="yes" xml:space="preserve">
          <source>history expansion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2fbd9717bb9a334e0a0fa26b1263a41f2397e24" translate="yes" xml:space="preserve">
          <source>history list</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="840335b8f41f2168b82077c6520c948eb5434936" translate="yes" xml:space="preserve">
          <source>horizontal tab</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="042dc4512fa3d391c5170cf3aa61e6a638f84342" translate="yes" xml:space="preserve">
          <source>i</source>
          <target state="translated">i</target>
        </trans-unit>
        <trans-unit id="3a10ddbccc71422d1a67ee3ec166716b7a4d1725" translate="yes" xml:space="preserve">
          <source>i386-unknown-freebsd4.2</source>
          <target state="translated">i386-unknown-freebsd4.2</target>
        </trans-unit>
        <trans-unit id="fae9fd39301eb7e657d4dad32a828cda5d7399e5" translate="yes" xml:space="preserve">
          <source>identifier</source>
          <target state="translated">identifier</target>
        </trans-unit>
        <trans-unit id="39ed2300a2feb4bb67f85409b6fe1a231a74f535" translate="yes" xml:space="preserve">
          <source>if &lt;code&gt;filename&lt;/code&gt; is an executable shell script. This subshell reinitializes itself, so that the effect is as if a new shell had been invoked to interpret the script, with the exception that the locations of commands remembered by the parent (see the description of &lt;code&gt;hash&lt;/code&gt; in &lt;a href=&quot;bourne-shell-builtins#Bourne-Shell-Builtins&quot;&gt;Bourne Shell Builtins&lt;/a&gt;) are retained by the child.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bfb5ecad05b26134116164f43c961ffdb21d1b2" translate="yes" xml:space="preserve">
          <source>if it exists, then</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c14b7dd2ab8f5537e48079fa324b0eb4df382a33" translate="yes" xml:space="preserve">
          <source>if it exists. Or, you can set the &lt;code&gt;CONFIG_SITE&lt;/code&gt; environment variable to the location of the site script. A warning: the Bash &lt;code&gt;configure&lt;/code&gt; looks for a site script, but not all &lt;code&gt;configure&lt;/code&gt; scripts do.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1961357c9f9b22464e79d2775375ec1bf3840397" translate="yes" xml:space="preserve">
          <source>if you want to change it or regenerate &lt;code&gt;configure&lt;/code&gt; using a newer version of Autoconf. If you do this, make sure you are using Autoconf version 2.50 or newer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca5f99a3e6d439a60b9ae0b7128ceae440fe9157" translate="yes" xml:space="preserve">
          <source>ignoreboth</source>
          <target state="translated">ignoreboth</target>
        </trans-unit>
        <trans-unit id="ffedc49daaaf9c4a8efe4cfc8bdc703d47c4813f" translate="yes" xml:space="preserve">
          <source>ignoredups</source>
          <target state="translated">ignoredups</target>
        </trans-unit>
        <trans-unit id="87a9a5cc39a0cf0b55704d49fbdae1540f32c9d1" translate="yes" xml:space="preserve">
          <source>ignorespace</source>
          <target state="translated">ignorespace</target>
        </trans-unit>
        <trans-unit id="470cec587602b47395a317eb72d14272f9628412" translate="yes" xml:space="preserve">
          <source>implies</source>
          <target state="translated">implies</target>
        </trans-unit>
        <trans-unit id="a31a5bc9c9c0abe418fe09dd700e41208d2ed723" translate="yes" xml:space="preserve">
          <source>in &quot;$@&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b29b982f5af5f5824d4d63d24262a1ec033c7595" translate="yes" xml:space="preserve">
          <source>in &lt;var&gt;words&lt;/var&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38b0cb0fe84a3661744067496a5c2ad2c7efb04a" translate="yes" xml:space="preserve">
          <source>in each directory of the package (the top directory, the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbf992c19e7847a4733a87cb6307a678a48c3979" translate="yes" xml:space="preserve">
          <source>indicating that this job is job number 1 and that the process &lt;small&gt;ID&lt;/small&gt; of the last process in the pipeline associated with this job is 25647. All of the processes in a single pipeline are members of the same job. Bash uses the &lt;var&gt;job&lt;/var&gt; abstraction as the basis for job control.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07e3467a52ceb3181f6c9329d920241652629356" translate="yes" xml:space="preserve">
          <source>initialization file in an interactive shell. This is on by default if the shell is invoked as &lt;code&gt;sh&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="998d392bb46b37ac20c484595a662924aa6d601e" translate="yes" xml:space="preserve">
          <source>initialization file, readline</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fb163bdf2cec5bad690dcb1baa9c63f84c039c8" translate="yes" xml:space="preserve">
          <source>inside the function creates a nameref variable &lt;var&gt;ref&lt;/var&gt; whose value is the variable name passed as the first argument. References and assignments to &lt;var&gt;ref&lt;/var&gt;, and changes to its attributes, are treated as references, assignments, and attribute modifications to the variable whose name was passed as &lt;code&gt;$1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1e2b964389a44069f6393f7f404e4082b21b782" translate="yes" xml:space="preserve">
          <source>installation</source>
          <target state="translated">installation</target>
        </trans-unit>
        <trans-unit id="21b45f23e5b78ab4ccf8f7538e7f4aca6d8833c5" translate="yes" xml:space="preserve">
          <source>interaction, readline</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65d05779c3ed2c9a3fa0a54d3b6c9a5a72745998" translate="yes" xml:space="preserve">
          <source>interactive shell</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd05286ee0ff8a830dbdc0c24f1cb68b83b0ef36" translate="yes" xml:space="preserve">
          <source>internationalization</source>
          <target state="translated">internationalization</target>
        </trans-unit>
        <trans-unit id="fcd0bb0f89d9af2289a6802e9fcaab929d5a965b" translate="yes" xml:space="preserve">
          <source>invocation option (see &lt;a href=&quot;invoking-bash#Invoking-Bash&quot;&gt;Invoking Bash&lt;/a&gt;), or from the user&amp;rsquo;s terminal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b81a1aefae9de6216bbf4aa7870707c641f905b8" translate="yes" xml:space="preserve">
          <source>invocation option had been supplied. If it is set while the shell is running, Bash enables &lt;small&gt;POSIX&lt;/small&gt; mode, as if the command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38552cc1ab2c4397babcf3bce39867ac196b831e" translate="yes" xml:space="preserve">
          <source>invocation option is ignored, and &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc5b7ec6a85e69798719a6c60acbfab46d1fd2de" translate="yes" xml:space="preserve">
          <source>invocation option may be used to set the positional parameters when an interactive shell is started.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dffda436f4d95e6bfb7166b30b75816164f4477" translate="yes" xml:space="preserve">
          <source>invocation option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9c2b53ba06a23d56bb77dc0560babaad649fd75" translate="yes" xml:space="preserve">
          <source>invocation options list the translatable strings found in a script (see &lt;a href=&quot;locale-translation#Locale-Translation&quot;&gt;Locale Translation&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56257b4b2abfc3657f9ce2c2940c4dc89b3489d9" translate="yes" xml:space="preserve">
          <source>is a symbolic link to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62305f6b14ccb0af81c2f56f336923021494ee2b" translate="yes" xml:space="preserve">
          <source>is again bound to the function &lt;code&gt;universal-argument&lt;/code&gt; (just as it was in the first example), &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce5d945664ae4ad605f5c4b075aff9d9fa700db6" translate="yes" xml:space="preserve">
          <source>is also accepted; the &lt;var&gt;subscript&lt;/var&gt; is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e8f86672718b13e1a9ecab9c641718bc6c857c6" translate="yes" xml:space="preserve">
          <source>is assumed. Values are in 1024-byte increments, except for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3918a0fd98904629bd9a57db25122a46409f51cd" translate="yes" xml:space="preserve">
          <source>is being ignored, none of the commands executed within the compound command or function body will be affected by the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="662f3c2c838377a03a8adf9540ec1b676ce75d91" translate="yes" xml:space="preserve">
          <source>is bound to run the macro expressed on the right hand side (that is, to insert the text &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d4b33ba2ad9444b9d3a8847d15663d8bd1f08ab" translate="yes" xml:space="preserve">
          <source>is bound to the function &lt;code&gt;backward-kill-word&lt;/code&gt;, and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d666b5408610a849c748c637f1877c7ace5c72d7" translate="yes" xml:space="preserve">
          <source>is bound to the function &lt;code&gt;universal-argument&lt;/code&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="326f7768d44b3c9f184f1704d7a964c8b364aced" translate="yes" xml:space="preserve">
          <source>is equivalent to executing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d211c49f71cd6475d755baf754c85eabc60c0c33" translate="yes" xml:space="preserve">
          <source>is given, &lt;code&gt;trap&lt;/code&gt; prints the list of commands associated with each signal number in a form that may be reused as shell input. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20b62fa0b0e904a9eaf93f95e10d0ac0afd67253" translate="yes" xml:space="preserve">
          <source>is given, the names of the signals corresponding to the arguments are listed, and the return status is zero. &lt;var&gt;exit_status&lt;/var&gt; is a number specifying a signal number or the exit status of a process terminated by a signal. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f02a3c1b0709bd5730046981a7e8f97ec9e9096d" translate="yes" xml:space="preserve">
          <source>is ignored, that setting will not have any effect until the compound command or the command containing the function call completes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="116120c36026ce597824895be29954b66bfcfec5" translate="yes" xml:space="preserve">
          <source>is invoked first. The function may use any of the shell facilities, including the &lt;code&gt;compgen&lt;/code&gt; and &lt;code&gt;compopt&lt;/code&gt; builtins described below (see &lt;a href=&quot;programmable-completion-builtins#Programmable-Completion-Builtins&quot;&gt;Programmable Completion Builtins&lt;/a&gt;), to generate the matches. It must put the possible completions in the &lt;code&gt;COMPREPLY&lt;/code&gt; array variable, one per array element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63ea2f95fc43834975da17ceb87233d383402067" translate="yes" xml:space="preserve">
          <source>is not set, and the sourced file changes the &lt;code&gt;DEBUG&lt;/code&gt; trap, the new value is retained when &lt;code&gt;source&lt;/code&gt; completes. The return status is the exit status of the last command executed, or zero if no commands are executed. If &lt;var&gt;filename&lt;/var&gt; is not found, or cannot be read, the return status is non-zero. This builtin is equivalent to &lt;code&gt;source&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26f65300b98453c8918c27f2369b3b6f31901ff1" translate="yes" xml:space="preserve">
          <source>is read as &amp;lsquo;Control-K&amp;rsquo; and describes the character produced when the &lt;code&gt;k&lt;/code&gt; key is pressed while the Control key is depressed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd1f42ebfa7b89ff1b54471f5f6c13dd82f90846" translate="yes" xml:space="preserve">
          <source>is read as &amp;lsquo;Meta-Control-k&amp;rsquo; and describes the character produced by &lt;em&gt;metafying&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3593766d94938c6954a0de2d038b9c804c13e5a" translate="yes" xml:space="preserve">
          <source>is read as &amp;lsquo;Meta-K&amp;rsquo; and describes the character produced when the Meta key (if you have one) is depressed, and the &lt;code&gt;k&lt;/code&gt; key is pressed. The Meta key is labeled &lt;code&gt;ALT&lt;/code&gt; on many keyboards. On keyboards with two keys labeled &lt;code&gt;ALT&lt;/code&gt; (usually to either side of the space bar), the &lt;code&gt;ALT&lt;/code&gt; on the left side is generally set to work as a Meta key. The &lt;code&gt;ALT&lt;/code&gt; key on the right may also be configured to work as a Meta key or may be configured as some other modifier, such as a Compose key for typing accented characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f04997804af7c707fe89524080ea4eb4e3226e98" translate="yes" xml:space="preserve">
          <source>is set and a command returns a failure status. If a compound command or shell function sets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bb33fc7cfbd3d4e8e7d721acab5b3bb94c38980" translate="yes" xml:space="preserve">
          <source>is specified without</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2153bf5b53b7ac31d733e56c890d50e15c4dbae0" translate="yes" xml:space="preserve">
          <source>is specified, the trailing newline is suppressed. If the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0781c7ab205650ddad01b55859923d6980bc8ff" translate="yes" xml:space="preserve">
          <source>is specified, without specifying the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccf390c346a3c3d76bf0e0075bf163093f80d7cf" translate="yes" xml:space="preserve">
          <source>is supplied with a name that is not a shell function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32a918dc82080da3476368ffc62fbec0b94992f0" translate="yes" xml:space="preserve">
          <source>is supplied without &lt;var&gt;name&lt;/var&gt; arguments, &lt;code&gt;declare&lt;/code&gt; will display the attributes and values of all variables having the attributes specified by the additional options. If no other options are supplied with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85fa0961462dd0a122782bc509cd4562f348205c" translate="yes" xml:space="preserve">
          <source>is supplied without a &lt;var&gt;name&lt;/var&gt; argument, an attempt is made to remove a completion specification for a &lt;var&gt;name&lt;/var&gt; for which no specification exists, or an error occurs adding a completion specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eff29aa350441ee39a59fbbc6c913a8973fd267" translate="yes" xml:space="preserve">
          <source>is supplied, all aliases are removed. Aliases are described in &lt;a href=&quot;aliases#Aliases&quot;&gt;Aliases&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fc71fba759cac6c2b363d2aa07d21071cf91b84" translate="yes" xml:space="preserve">
          <source>is supplied, both the hard and soft limits are set. If no option is given, then</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f48075284b6624a537b83eb9d603f6e05b4cedd" translate="yes" xml:space="preserve">
          <source>is supplied, information about remembered commands is printed. The return status is zero unless a &lt;var&gt;name&lt;/var&gt; is not found or an invalid option is supplied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73b1cd0447b476035cce1cf2c7b561eeb08cde38" translate="yes" xml:space="preserve">
          <source>is supplied, the shell passes &lt;var&gt;name&lt;/var&gt; as the zeroth argument to &lt;var&gt;command&lt;/var&gt;. If &lt;var&gt;command&lt;/var&gt; cannot be executed for some reason, a non-interactive shell exits, unless the &lt;code&gt;execfail&lt;/code&gt; shell option is enabled. In that case, it returns failure. An interactive shell returns failure if the file cannot be executed. A subshell exits unconditionally if &lt;code&gt;exec&lt;/code&gt; fails. If no &lt;var&gt;command&lt;/var&gt; is specified, redirections may be used to affect the current shell environment. If there are no redirection errors, the return status is zero; otherwise the return status is non-zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac16be5e888f91838e2b4898df347d86ac41bfc2" translate="yes" xml:space="preserve">
          <source>is used similarly to duplicate output file descriptors. If &lt;var&gt;n&lt;/var&gt; is not specified, the standard output (file descriptor 1) is used. If the digits in &lt;var&gt;word&lt;/var&gt; do not specify a file descriptor open for output, a redirection error occurs. If &lt;var&gt;word&lt;/var&gt; evaluates to &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad61322952021f4aedce89cac8ced7b2e245a7cf" translate="yes" xml:space="preserve">
          <source>is used to create &lt;code&gt;configure&lt;/code&gt; by a program called Autoconf. You only need</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c9ba06812a08b57384b9b92529668be623dad69" translate="yes" xml:space="preserve">
          <source>is used to duplicate input file descriptors. If &lt;var&gt;word&lt;/var&gt; expands to one or more digits, the file descriptor denoted by &lt;var&gt;n&lt;/var&gt; is made to be a copy of that file descriptor. If the digits in &lt;var&gt;word&lt;/var&gt; do not specify a file descriptor open for input, a redirection error occurs. If &lt;var&gt;word&lt;/var&gt; evaluates to &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25f648ba07c318fb10c2ec4f60a42f5fb257af03" translate="yes" xml:space="preserve">
          <source>is used with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01b9101268e38117b60c179a41d89653187e2823" translate="yes" xml:space="preserve">
          <source>is used with &lt;var&gt;name&lt;/var&gt; arguments, additional options, other than</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f505aeb8452a9e1dda8e2421ee583bd426a1042a" translate="yes" xml:space="preserve">
          <source>is used with no &lt;var&gt;optname&lt;/var&gt; arguments, &lt;code&gt;shopt&lt;/code&gt; shows only those options which are set or unset, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="217fb43e209237b0aaa1895959072269c8744929" translate="yes" xml:space="preserve">
          <source>is used, the &lt;var&gt;name&lt;/var&gt;s become disabled. Otherwise &lt;var&gt;name&lt;/var&gt;s are enabled. For example, to use the &lt;code&gt;test&lt;/code&gt; binary found via &lt;code&gt;$PATH&lt;/code&gt; instead of the shell builtin version, type &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c2dd944dde9e08881bef0894fe7b22a5c9c4b06" translate="yes" xml:space="preserve">
          <source>j</source>
          <target state="translated">j</target>
        </trans-unit>
        <trans-unit id="2eda8ad1632af052b0c74d6fcab6058b3a79cf25" translate="yes" xml:space="preserve">
          <source>job</source>
          <target state="translated">job</target>
        </trans-unit>
        <trans-unit id="d33590b03ac4b301b87f275ccaa0d52b307ffcc7" translate="yes" xml:space="preserve">
          <source>job control</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13fbd79c3d390e5d6585a21e11ff5ec1970cff0c" translate="yes" xml:space="preserve">
          <source>k</source>
          <target state="translated">k</target>
        </trans-unit>
        <trans-unit id="a43aa2b3cce8548368bbd79297bc5714364ea31a" translate="yes" xml:space="preserve">
          <source>keyword</source>
          <target state="translated">keyword</target>
        </trans-unit>
        <trans-unit id="3be3b7d642432669ef6e2c09cb330be09b1f9c58" translate="yes" xml:space="preserve">
          <source>kill -l</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="840750711c0b33a5ccc4d38987c73737a91db5a7" translate="yes" xml:space="preserve">
          <source>kill 0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9127ac661e5c219ad1b4417d0fe16496e7137010" translate="yes" xml:space="preserve">
          <source>kill ring</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4492634f7fd8b8c936a4ec4f6ca43c544395b285" translate="yes" xml:space="preserve">
          <source>killing text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e2ff2fcafa9e9d00113f6de489ce260cc60a64e" translate="yes" xml:space="preserve">
          <source>ksh</source>
          <target state="translated">ksh</target>
        </trans-unit>
        <trans-unit id="37e4f0618558b7dcaee0e895d46ec03ea399ef01" translate="yes" xml:space="preserve">
          <source>left and right bitwise shifts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d062bafff17ba8b9a1215c4c51485134d509d91" translate="yes" xml:space="preserve">
          <source>lib</source>
          <target state="translated">lib</target>
        </trans-unit>
        <trans-unit id="6755b7f3be4d57f35f487463981e184cb3c21e6d" translate="yes" xml:space="preserve">
          <source>lib/malloc</source>
          <target state="translated">lib/malloc</target>
        </trans-unit>
        <trans-unit id="06fcf6270355a8ed05d4291077bf83f5645dc172" translate="yes" xml:space="preserve">
          <source>lib/readline</source>
          <target state="translated">lib/readline</target>
        </trans-unit>
        <trans-unit id="82792a940aeb9dba2eeaa46c50d08754bf494cfc" translate="yes" xml:space="preserve">
          <source>localization</source>
          <target state="translated">localization</target>
        </trans-unit>
        <trans-unit id="268437e9bd2e099a9f82701e5f6bc2d784b2fc62" translate="yes" xml:space="preserve">
          <source>logical AND</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7885a0b6df2add59817cfee480cdaf87d6b5b971" translate="yes" xml:space="preserve">
          <source>logical OR</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a7706f1752e19c786d860b91d544a61fb902b77" translate="yes" xml:space="preserve">
          <source>logical and bitwise negation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e01148e3b7cd58b5655ddc6da8871580e6d8b916" translate="yes" xml:space="preserve">
          <source>login shell</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5821eb27d7b71c9078000da31a5a654c97e401b9" translate="yes" xml:space="preserve">
          <source>make</source>
          <target state="translated">make</target>
        </trans-unit>
        <trans-unit id="112d438a32e6e15222611e49ff58445e826be351" translate="yes" xml:space="preserve">
          <source>make clean</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f65c530b348da0e69a6b0981344be874f738991b" translate="yes" xml:space="preserve">
          <source>make distclean</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ac56d2d6c13acc3594f87eb880d15f820a757b2" translate="yes" xml:space="preserve">
          <source>make install</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f32d54266ec79922e1a06cc8a3601d0fa939f5da" translate="yes" xml:space="preserve">
          <source>make tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23dab2d7dcbd8319e0d9a07d4114fab8446c835a" translate="yes" xml:space="preserve">
          <source>matching, pattern</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6be1c980c0e18efd59eb5487624c4981e24af58b" translate="yes" xml:space="preserve">
          <source>meta prefix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1d3d70699b31ee64cb23e6446c8dba17f385b7d" translate="yes" xml:space="preserve">
          <source>metacharacter</source>
          <target state="translated">metacharacter</target>
        </trans-unit>
        <trans-unit id="75692d3d6a25fdbbab9edabf38e5720974cf6f43" translate="yes" xml:space="preserve">
          <source>method of naming open files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36ead0719d1ff32cc3f81b6ef6c9ccf3a31a07b2" translate="yes" xml:space="preserve">
          <source>minimal-config</source>
          <target state="translated">minimal-config</target>
        </trans-unit>
        <trans-unit id="c93cd2cca5dbb9e3fe8506e7ad76bdb43933c06d" translate="yes" xml:space="preserve">
          <source>moves forward a character, while</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0164191dc3b4d052e57f650044473bc28407c125" translate="yes" xml:space="preserve">
          <source>moves forward a word. It is a loose convention that control keystrokes operate on characters while meta keystrokes operate on words.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4223f83c4cba8246c6602412200bf2cd0a77cba1" translate="yes" xml:space="preserve">
          <source>moves the file descriptor &lt;var&gt;digit&lt;/var&gt; to file descriptor &lt;var&gt;n&lt;/var&gt;, or the standard input (file descriptor 0) if &lt;var&gt;n&lt;/var&gt; is not specified. &lt;var&gt;digit&lt;/var&gt; is closed after being duplicated to &lt;var&gt;n&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22c392fdd0dc8192cc4599f2c2f344be7ded8af8" translate="yes" xml:space="preserve">
          <source>moves the file descriptor &lt;var&gt;digit&lt;/var&gt; to file descriptor &lt;var&gt;n&lt;/var&gt;, or the standard output (file descriptor 1) if &lt;var&gt;n&lt;/var&gt; is not specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="019ca3776e3460a672c6955d46faf2067062ad62" translate="yes" xml:space="preserve">
          <source>multiplication, division, remainder</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ae999552a0d2dca14d62e2bc8b764d377b1dd6c" translate="yes" xml:space="preserve">
          <source>name</source>
          <target state="translated">name</target>
        </trans-unit>
        <trans-unit id="d4862135104fab09dd10c92cb73759fd014d9c70" translate="yes" xml:space="preserve">
          <source>name=value</source>
          <target state="translated">name=value</target>
        </trans-unit>
        <trans-unit id="1404b8c3b46ed519cb95ee827a3962734aadf0cc" translate="yes" xml:space="preserve">
          <source>native languages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e453d1d3e45b46f4624613d0ed41283e8121317d" translate="yes" xml:space="preserve">
          <source>new line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6fd7a4346b3bb0e3124991926d729836808da54" translate="yes" xml:space="preserve">
          <source>newline</source>
          <target state="translated">newline</target>
        </trans-unit>
        <trans-unit id="71f8e7976e4cbc4561c9d62fb283e7f788202acb" translate="yes" xml:space="preserve">
          <source>none</source>
          <target state="translated">none</target>
        </trans-unit>
        <trans-unit id="19d0495c3630c205e3f85cd13c6d4cb031c0953f" translate="yes" xml:space="preserve">
          <source>nor</source>
          <target state="translated">nor</target>
        </trans-unit>
        <trans-unit id="c6634755e8d0a9ed3bec5be9af09235cbd9e30bc" translate="yes" xml:space="preserve">
          <source>nor the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="358c35146455bf41c9eea5fb004c606e71e229b9" translate="yes" xml:space="preserve">
          <source>notation, readline</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3233885639dbb197856a1b3a743b40f9842dfdae" translate="yes" xml:space="preserve">
          <source>of the argument that is significant. If you pass a negative argument to a command which normally acts in a forward direction, that command will act in a backward direction. For example, to kill text back to the start of the line, you might type &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da7a68734367828e30b94927f4c2b43ed2c0f652" translate="yes" xml:space="preserve">
          <source>off</source>
          <target state="translated">off</target>
        </trans-unit>
        <trans-unit id="db3d405b10675998c030223177d42e71b4e7a312" translate="yes" xml:space="preserve">
          <source>on</source>
          <target state="translated">on</target>
        </trans-unit>
        <trans-unit id="314a363da54e00dba91d59bc601a2761ceca5cc9" translate="yes" xml:space="preserve">
          <source>open files inherited by the shell at invocation, as modified by redirections supplied to the &lt;code&gt;exec&lt;/code&gt; builtin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdf61f767a5311ae1c88adc2937cef4e49c884ba" translate="yes" xml:space="preserve">
          <source>operator, shell</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14eb14ece52df99c284b819d9f8092e50aa1613e" translate="yes" xml:space="preserve">
          <source>option</source>
          <target state="translated">option</target>
        </trans-unit>
        <trans-unit id="4c47e82fba109fcab8aa83bfbea6c4174331a0d2" translate="yes" xml:space="preserve">
          <source>option (see &lt;a href=&quot;invoking-bash#Invoking-Bash&quot;&gt;Invoking Bash&lt;/a&gt;), then &lt;code&gt;$0&lt;/code&gt; is set to the first argument after the string to be executed, if one is present. Otherwise, it is set to the filename used to invoke Bash, as given by argument zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9def802bfafecfa4235099bfb18712b98b426fb3" translate="yes" xml:space="preserve">
          <source>option and parallel&amp;rsquo;s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="104ee24387f4691a3098f26bfe9962fae6f618eb" translate="yes" xml:space="preserve">
          <source>option and will use Readline to obtain the line when given the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d3a40253691f0d7103e82b79d5b142a15d36b20" translate="yes" xml:space="preserve">
          <source>option are generated next. The words generated by the pattern need not match the word being completed. The &lt;code&gt;GLOBIGNORE&lt;/code&gt; shell variable is not used to filter the matches, but the &lt;code&gt;FIGNORE&lt;/code&gt; shell variable is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="480f382d10e5d60aed39e4f37d2809e389d8333f" translate="yes" xml:space="preserve">
          <source>option below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="666c2b21fbc238627d03c3fd7a17016b956a2c27" translate="yes" xml:space="preserve">
          <source>option brings in the rest of the &quot;Bash default&quot; completions &amp;ndash; possible completion that Bash adds to the default Readline set. These include things like command name completion, variable completion for words beginning with &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0632bf76f5b2aa644b3c2064aca7b3415593da52" translate="yes" xml:space="preserve">
          <source>option can be used to override this and force the suspension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06bdc3f4f83e9eaf823f8dc2efcb7f0a70dfd6c3" translate="yes" xml:space="preserve">
          <source>option causes &lt;code&gt;wait&lt;/code&gt; to wait until the job or process terminates before returning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feab3bbd40699067638a9bd5488d6481b2d59a1b" translate="yes" xml:space="preserve">
          <source>option causes &lt;var&gt;command&lt;/var&gt; to be executed with an empty environment. If</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d72e60603fe61fb6f4b42dd257f4ff9f6d20c01" translate="yes" xml:space="preserve">
          <source>option causes a single word indicating the command or file name used to invoke &lt;var&gt;command&lt;/var&gt; to be displayed; the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfb92662dfb462bca699bb66c809e4be30bb1dbd" translate="yes" xml:space="preserve">
          <source>option causes output to be displayed in a form that may be reused as input. Other options have the following meanings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91dc4da4a4c21b26fc7713a1770d5c8050e182e9" translate="yes" xml:space="preserve">
          <source>option causes output to be displayed in a format that may be reused as input. If a variable name is followed by =&lt;var&gt;value&lt;/var&gt;, the value of the variable is set to &lt;var&gt;value&lt;/var&gt;. The return status is zero unless an invalid option is supplied, one of the &lt;var&gt;name&lt;/var&gt; arguments is not a valid shell variable or function name, or the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edd0ae8a52c63e8dd38a9be603dc3d78f8607bb4" translate="yes" xml:space="preserve">
          <source>option causes output to be displayed in a format that may be reused as input. If no arguments are given, or if only</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee70ddcf0718f28b3117e7d5d914b42d1b009fcb" translate="yes" xml:space="preserve">
          <source>option causes the output to be assigned to the variable &lt;var&gt;var&lt;/var&gt; rather than being printed to the standard output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c48f0567250b2ef4413db606d22e5cfd9beb35a5" translate="yes" xml:space="preserve">
          <source>option causes the shell to forget all remembered locations. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4091f89d870ab1089aa32406550b1e67fd19eb5c" translate="yes" xml:space="preserve">
          <source>option causes the shell to forget the remembered location of each &lt;var&gt;name&lt;/var&gt;. If the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3c594956d52734b3706dacfbfe954e54c3ad410" translate="yes" xml:space="preserve">
          <source>option causes the shell to print a list of signal names and their corresponding numbers. Each &lt;var&gt;sigspec&lt;/var&gt; is either a signal name or a signal number. Signal names are case insensitive and the &lt;code&gt;SIG&lt;/code&gt; prefix is optional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b02aa780ae6476630e34920f6bab1973180f9d9a" translate="yes" xml:space="preserve">
          <source>option changes the output format to that specified by &lt;small&gt;POSIX&lt;/small&gt;. When the shell is in &lt;small&gt;POSIX&lt;/small&gt; mode (see &lt;a href=&quot;bash-posix-mode#Bash-POSIX-Mode&quot;&gt;Bash POSIX Mode&lt;/a&gt;), it does not recognize &lt;code&gt;time&lt;/code&gt; as a reserved word if the next token begins with a &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d06de06c1c2032a4ca2a4e1f9924385dee70ea0" translate="yes" xml:space="preserve">
          <source>option disables the interpretation of these escape characters, even on systems where they are interpreted by default. The &lt;code&gt;xpg_echo&lt;/code&gt; shell option may be used to dynamically determine whether or not &lt;code&gt;echo&lt;/code&gt; expands these escape characters by default. &lt;code&gt;echo&lt;/code&gt; does not interpret</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e1ee4974d9d26cd665f6a6615c946e9d929bdae" translate="yes" xml:space="preserve">
          <source>option displays output in a form that may be reused as input. If a variable name is followed by =&lt;var&gt;value&lt;/var&gt;, the value of the variable is set to &lt;var&gt;value&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1e46c7b408b5093615fa70bfcff4629a0f33c0f" translate="yes" xml:space="preserve">
          <source>option forces a path search for each &lt;var&gt;name&lt;/var&gt;, even if</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd995f7dbbedee338ceb2490b9b694b6e5765b69" translate="yes" xml:space="preserve">
          <source>option forces variables to be created or modified at the global scope, even when &lt;code&gt;declare&lt;/code&gt; is executed in a shell function. It is ignored in all other cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e232f03ff1715b89d945b509981432e1e1f956a2" translate="yes" xml:space="preserve">
          <source>option from the parent shell. When not in &lt;small&gt;POSIX&lt;/small&gt; mode, Bash clears the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bfbdf94ef7ee7435e35e0836baa120fe4245d5f" translate="yes" xml:space="preserve">
          <source>option from the parent shell. When the &lt;code&gt;inherit_errexit&lt;/code&gt; option is not enabled, Bash clears the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c922bef79dc0ae863ba0261ac0dd34364b8cefa" translate="yes" xml:space="preserve">
          <source>option has been set (see &lt;a href=&quot;the-set-builtin#The-Set-Builtin&quot;&gt;The Set Builtin&lt;/a&gt;), Bash scans each word for the characters &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29cceed43a15204739532767e5398fd22244fb2d" translate="yes" xml:space="preserve">
          <source>option has been supplied, the first argument is assumed to be the name of a file containing shell commands (see &lt;a href=&quot;shell-scripts#Shell-Scripts&quot;&gt;Shell Scripts&lt;/a&gt;). When Bash is invoked in this fashion, &lt;code&gt;$0&lt;/code&gt; is set to the name of the file, and the positional parameters are set to the remaining arguments. Bash reads and executes commands from this file, then exits. Bash&amp;rsquo;s exit status is the exit status of the last command executed in the script. If no commands are executed, the exit status is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f2af33021dd13f950bbb10bbf76d71a47ff3678" translate="yes" xml:space="preserve">
          <source>option has no effect. A non-interactive shell invoked with the name &lt;code&gt;sh&lt;/code&gt; does not attempt to read any other startup files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="640088caef3b0f874b197b4c8f31c5a0f19a67ae" translate="yes" xml:space="preserve">
          <source>option in such subshells.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65bca4b5b18e88bfee36f3bcab6361ff6f1e6c0a" translate="yes" xml:space="preserve">
          <source>option indicates that other supplied options and actions should apply to &amp;ldquo;empty&amp;rdquo; command completion; that is, completion attempted on a blank line. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d66e7bd936911c886ea78900837059ea098cacfe" translate="yes" xml:space="preserve">
          <source>option indicates that other supplied options and actions should apply to completion on the initial non-assignment word on the line, or after a command delimiter such as &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d75d0a152f90f4f193ef695dc70eff051be63caf" translate="yes" xml:space="preserve">
          <source>option indicates that other supplied options and actions should apply to the &amp;ldquo;default&amp;rdquo; command completion; that is, completion attempted on a command for which no completion has previously been defined. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e5e87746d27014a845133460452ab6278627b53" translate="yes" xml:space="preserve">
          <source>option indicates that other supplied options should apply to &amp;ldquo;empty&amp;rdquo; command completion; that is, completion attempted on a blank line. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57a92abc7cb27b1c39fe6e5861c6f29b95daf9ac" translate="yes" xml:space="preserve">
          <source>option indicates that other supplied options should apply to completion on the initial non-assignment word on the line, or after a command delimiter such as &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d23cd92c882c8cb6aa533f122cdb62719a3edf48" translate="yes" xml:space="preserve">
          <source>option indicates that other supplied options should apply to the &amp;ldquo;default&amp;rdquo; command completion; that is, completion attempted on a command for which no completion has previously been defined. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c4e8253593ea66ff5f242de71991d2440ce34df" translate="yes" xml:space="preserve">
          <source>option inhibits the display of function definitions; only the function name and attributes are printed. If the &lt;code&gt;extdebug&lt;/code&gt; shell option is enabled using &lt;code&gt;shopt&lt;/code&gt; (see &lt;a href=&quot;the-shopt-builtin#The-Shopt-Builtin&quot;&gt;The Shopt Builtin&lt;/a&gt;), the source file name and line number where each &lt;var&gt;name&lt;/var&gt; is defined are displayed as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6747b2e05f1fcd92f3964ac1fe074ff926f28ebd" translate="yes" xml:space="preserve">
          <source>option inhibits the path search, and &lt;var&gt;filename&lt;/var&gt; is used as the location of &lt;var&gt;name&lt;/var&gt;. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf0db6442364bab33c6deebd1deb335fc0cd92f2" translate="yes" xml:space="preserve">
          <source>option is applied to the list. The filter is a pattern as used for pathname expansion; a &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84895ff8ded44c89f76ef107c3d43962d553c588" translate="yes" xml:space="preserve">
          <source>option is considered. The string is first split using the characters in the &lt;code&gt;IFS&lt;/code&gt; special variable as delimiters. Shell quoting is honored within the string, in order to provide a mechanism for the words to contain shell metacharacters or characters in the value of &lt;code&gt;IFS&lt;/code&gt;. Each word is then expanded using brace expansion, tilde expansion, parameter and variable expansion, command substitution, and arithmetic expansion, as described above (see &lt;a href=&quot;shell-expansions#Shell-Expansions&quot;&gt;Shell Expansions&lt;/a&gt;). The results are split using the rules described above (see &lt;a href=&quot;word-splitting#Word-Splitting&quot;&gt;Word Splitting&lt;/a&gt;). The results of the expansion are prefix-matched against the word being completed, and the matching words become the possible completions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c688274908d9b4d1a2cb8740613dbbb81225cbc" translate="yes" xml:space="preserve">
          <source>option is enabled, &lt;code&gt;source&lt;/code&gt; inherits any trap on &lt;code&gt;DEBUG&lt;/code&gt;; if it is not, any &lt;code&gt;DEBUG&lt;/code&gt; trap string is saved and restored around the call to &lt;code&gt;source&lt;/code&gt;, and &lt;code&gt;source&lt;/code&gt; unsets the &lt;code&gt;DEBUG&lt;/code&gt; trap while it executes. If</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca614ade4493bfee95033e802295ef9a3e915812" translate="yes" xml:space="preserve">
          <source>option is equivalent to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97269007a6d636b526c7a8b441cbe179ebafb978" translate="yes" xml:space="preserve">
          <source>option is given, a list of names of all exported variables is displayed. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c591e326f7bd65f40e258fa84b74e41d4806431c" translate="yes" xml:space="preserve">
          <source>option is given, each &lt;var&gt;name&lt;/var&gt; refers to a shell variable and that variable is removed. If the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4cefd79f99311b4b69f41594d53c499f449610e" translate="yes" xml:space="preserve">
          <source>option is given, interpretation of the following backslash-escaped characters is enabled. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd1a4408d7c31254b8d7540aa24fa633b06ad6af" translate="yes" xml:space="preserve">
          <source>option is given, the &lt;var&gt;name&lt;/var&gt;s refer to shell functions, and the function definition is removed. If the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e889aa9c8572539d60449ec9b77f0a4abeacdefc" translate="yes" xml:space="preserve">
          <source>option is given, the job is not removed from the table, but is marked so that &lt;code&gt;SIGHUP&lt;/code&gt; is not sent to the job if the shell receives a &lt;code&gt;SIGHUP&lt;/code&gt;. If &lt;var&gt;jobspec&lt;/var&gt; is not present, and neither the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58a448783f589e5ef10491fcfddef0cce16a4db6" translate="yes" xml:space="preserve">
          <source>option is invoked in an environment equivalent to command substitution. It should print a list of completions, one per line, to the standard output. Backslash may be used to escape a newline, if necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdf1cec6ab31ae7efef6fd8a676ffe2b0ca4a848" translate="yes" xml:space="preserve">
          <source>option is not also used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e2c9eb8554e9eb51fe84ec2ce62db28eca83f10" translate="yes" xml:space="preserve">
          <source>option is not supplied, no startup files are read, shell functions are not inherited from the environment, the &lt;code&gt;SHELLOPTS&lt;/code&gt;, &lt;code&gt;BASHOPTS&lt;/code&gt;, &lt;code&gt;CDPATH&lt;/code&gt;, and &lt;code&gt;GLOBIGNORE&lt;/code&gt; variables, if they appear in the environment, are ignored, and the effective user id is set to the real user id. If the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f28f6cd37c90a84e47034c7a7658c690b31c881" translate="yes" xml:space="preserve">
          <source>option is not supplied, these actions are taken and the effective user id is set to the real user id. If the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="062fe771edc149b3d6cf338aa730e936ee0b17be" translate="yes" xml:space="preserve">
          <source>option is not used, &lt;var&gt;limit&lt;/var&gt; is the new value of the specified resource. The special &lt;var&gt;limit&lt;/var&gt; values &lt;code&gt;hard&lt;/code&gt;, &lt;code&gt;soft&lt;/code&gt;, and &lt;code&gt;unlimited&lt;/code&gt; stand for the current hard limit, the current soft limit, and no limit, respectively. A hard limit cannot be increased by a non-root user once it is set; a soft limit may be increased up to the value of the hard limit. Otherwise, the current value of the soft limit for the specified resource is printed, unless the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="889c270521317aceefbe75e6b60f7f64a5c53940" translate="yes" xml:space="preserve">
          <source>option is set (see &lt;a href=&quot;the-set-builtin#The-Set-Builtin&quot;&gt;The Set Builtin&lt;/a&gt;), then all parameter assignments are placed in the environment for a command, not just those that precede the command name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46714f9b873def505470e0e37e779cc6be7f2cdc" translate="yes" xml:space="preserve">
          <source>option is set (see &lt;a href=&quot;the-set-builtin#The-Set-Builtin&quot;&gt;The Set Builtin&lt;/a&gt;). The first character of the expanded value is replicated multiple times, as necessary, to indicate multiple levels of indirection. The default is &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2af03cee6a56b044caebc69aa7a25d8003b04cdb" translate="yes" xml:space="preserve">
          <source>option is supplied (see &lt;a href=&quot;invoking-bash#Invoking-Bash&quot;&gt;Invoking Bash&lt;/a&gt;), Bash reads and executes commands from the file, then exits. This mode of operation creates a non-interactive shell. The shell first searches for the file in the current directory, and looks in the directories in &lt;code&gt;$PATH&lt;/code&gt; if not found there.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7879453bddec1ede215ba68cbd603342abcee07" translate="yes" xml:space="preserve">
          <source>option is supplied at invocation, the shell becomes restricted. A restricted shell is used to set up an environment more controlled than the standard shell. A restricted shell behaves identically to &lt;code&gt;bash&lt;/code&gt; with the exception that the following are disallowed or not performed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="febd14dcd4eebe51b63010c793db7eecb3a807b5" translate="yes" xml:space="preserve">
          <source>option is supplied at invocation, the startup behavior is the same, but the effective user id is not reset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f039512123d0d701a7e6d556aca71916873bad8" translate="yes" xml:space="preserve">
          <source>option is supplied at shell invocation. Line editing is also used when using the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3a31e02652e73ee44967a5891241ffd27c55002" translate="yes" xml:space="preserve">
          <source>option is supplied at startup, the effective user id is not reset. Turning this option off causes the effective user and group ids to be set to the real user and group ids.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5d632586e0ea096bbe7eb4904badf4300f17d9f" translate="yes" xml:space="preserve">
          <source>option is supplied with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="428f3b4c7739c315f17a36e3eb72683915973fd3" translate="yes" xml:space="preserve">
          <source>option is supplied with a name that is not a shell function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfd0a0c02d5a2f277d38374c0ad02ba7e4b5e2c1" translate="yes" xml:space="preserve">
          <source>option is supplied without a &lt;var&gt;mode&lt;/var&gt; argument, the mask is printed in a symbolic format. If the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21ee3ee1c26c8604b7d6eb0d2d1592d40b5242c8" translate="yes" xml:space="preserve">
          <source>option is supplied, &lt;code&gt;jobs&lt;/code&gt; replaces any &lt;var&gt;jobspec&lt;/var&gt; found in &lt;var&gt;command&lt;/var&gt; or &lt;var&gt;arguments&lt;/var&gt; with the corresponding process group &lt;small&gt;ID&lt;/small&gt;, and executes &lt;var&gt;command&lt;/var&gt;, passing it &lt;var&gt;argument&lt;/var&gt;s, returning its exit status.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="044eca1addc8507dc0a0415f1d0486245d2c6b79" translate="yes" xml:space="preserve">
          <source>option is supplied, &lt;code&gt;wait&lt;/code&gt; waits for a single job to terminate and returns its exit status. Supplying the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9639437eb34627949036d8616ef39707263615b2" translate="yes" xml:space="preserve">
          <source>option is supplied, a description of &lt;var&gt;command&lt;/var&gt; is printed. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="132c69cb3665534c4cbb1cf6044d2e88e1ffea16" translate="yes" xml:space="preserve">
          <source>option is supplied, a list of all readonly names is printed. The other options may be used to restrict the output to a subset of the set of readonly names. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6080f0adda74ef961be0cc9d54b77015d1ccdedb" translate="yes" xml:space="preserve">
          <source>option is supplied, and &lt;var&gt;mode&lt;/var&gt; is omitted, the output is in a form that may be reused as input. The return status is zero if the mode is successfully changed or if no &lt;var&gt;mode&lt;/var&gt; argument is supplied, and non-zero otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01b86c7a440b217dc67fafe41558edb621add28c" translate="yes" xml:space="preserve">
          <source>option is supplied, and &lt;var&gt;name&lt;/var&gt; is a variable with the &lt;var&gt;nameref&lt;/var&gt; attribute, &lt;var&gt;name&lt;/var&gt; will be unset rather than the variable it references.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc2f701cb6bd4a313691a2a07cec5d98a2800524" translate="yes" xml:space="preserve">
          <source>option is supplied, each &lt;var&gt;name&lt;/var&gt; refers to a shell function. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f85d6952be501df9b8c252e4e91f35d64a67b1b" translate="yes" xml:space="preserve">
          <source>option is supplied, or if no options are supplied, existing completion specifications are printed in a way that allows them to be reused as input. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9618db110a979559b9248c61dcb1a2dd9451989" translate="yes" xml:space="preserve">
          <source>option is supplied, or no &lt;var&gt;name&lt;/var&gt; arguments appear, a list of shell builtins is printed. With no other arguments, the list consists of all enabled shell builtins. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f78b7dafdeea19022a04e9e085eec4c4046c594" translate="yes" xml:space="preserve">
          <source>option is supplied, symbolic links in &lt;var&gt;directory&lt;/var&gt; are resolved after &lt;code&gt;cd&lt;/code&gt; processes an instance of &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb84a00374eb3f8ed1702cbc0807965291b5bb17" translate="yes" xml:space="preserve">
          <source>option is supplied, the &lt;var&gt;name&lt;/var&gt;s refer to shell functions; otherwise the names refer to shell variables. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2409158ca18695eae21313a6f604c4a1536dfba" translate="yes" xml:space="preserve">
          <source>option is supplied, the current job is used. If no &lt;var&gt;jobspec&lt;/var&gt; is supplied, the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2be317b88dba944559219083cec6d765934eb43c" translate="yes" xml:space="preserve">
          <source>option is supplied, the full pathname to which each &lt;var&gt;name&lt;/var&gt; corresponds is printed. If multiple &lt;var&gt;name&lt;/var&gt; arguments are supplied with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79e0ddd3ee4dc7e199a3bece072d2729402c5b3c" translate="yes" xml:space="preserve">
          <source>option is supplied, the pathname printed may contain symbolic links. The return status is zero unless an error is encountered while determining the name of the current directory or an invalid option is supplied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfdd58382b5fb88b2bab25523a3680b902b9a193" translate="yes" xml:space="preserve">
          <source>option is supplied, the pathname printed will not contain symbolic links. If the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9597801f9db71941b29d044e680733bdd6cc2ef6" translate="yes" xml:space="preserve">
          <source>option is supplied, the shell places a dash at the beginning of the zeroth argument passed to &lt;var&gt;command&lt;/var&gt;. This is what the &lt;code&gt;login&lt;/code&gt; program does. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ff7ef21de37d0214cc8781bd1e89ac0320ef403" translate="yes" xml:space="preserve">
          <source>option is supplied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aefcda03ac24ef986025ec52fbd8b62c396e4aa8" translate="yes" xml:space="preserve">
          <source>option is supplied. If no options are supplied, each &lt;var&gt;name&lt;/var&gt; refers to a variable; if there is no variable by that name, any function with that name is unset. Readonly variables and functions may not be unset. The return status is zero unless a &lt;var&gt;name&lt;/var&gt; is readonly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1a3cac84001c472f7a26da80c86051ca84cc528" translate="yes" xml:space="preserve">
          <source>option is supplied. The variable &lt;code&gt;MAPFILE&lt;/code&gt; is the default &lt;var&gt;array&lt;/var&gt;. Options, if supplied, have the following meanings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="430cb1f84271384fb3ddb97139478d89191be85f" translate="yes" xml:space="preserve">
          <source>option is supplied. When setting new limits, if neither</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f87083975fbb824ff94ab7538e1ef94c13108a7e" translate="yes" xml:space="preserve">
          <source>option is used for filename or directory name completion, the shell variable &lt;code&gt;FIGNORE&lt;/code&gt; is used to filter the matches. See &lt;a href=&quot;bash-variables#Bash-Variables&quot;&gt;Bash Variables&lt;/a&gt;, for a description of &lt;code&gt;FIGNORE&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de09bfde8e67be563da69cbc4a9a06697d7db83e" translate="yes" xml:space="preserve">
          <source>option is used, &lt;code&gt;type&lt;/code&gt; does not attempt to find shell functions, as with the &lt;code&gt;command&lt;/code&gt; builtin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="030d0af8de82bdb28404094ed7a13de8d79dac05" translate="yes" xml:space="preserve">
          <source>option is used, &lt;code&gt;type&lt;/code&gt; either returns the name of the disk file that would be executed, or nothing if</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59ffc9ea7983b7bf2183e82d2ce467e63f7f8c9c" translate="yes" xml:space="preserve">
          <source>option is used, &lt;code&gt;type&lt;/code&gt; prints a single word which is one of &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62c721204a4ef824bdb64e5072666911fed440c0" translate="yes" xml:space="preserve">
          <source>option is used, &lt;code&gt;type&lt;/code&gt; returns all of the places that contain an executable named &lt;var&gt;file&lt;/var&gt;. This includes aliases and functions, if and only if the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0dbb11fad10e1d9d381796578fbcc13789269be" translate="yes" xml:space="preserve">
          <source>option is used, those available with the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f0df740b5026cc6b6c2d3f553fe202937a9c2b8" translate="yes" xml:space="preserve">
          <source>option is used. If a variable name is followed by =&lt;var&gt;value&lt;/var&gt;, the value of the variable is set to &lt;var&gt;value&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e54da22236a45d80dfb3118a0c84c9464a848f4" translate="yes" xml:space="preserve">
          <source>option lists the signal names. If any arguments are supplied when</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f486e5982e4523d358bf8d27eef8b444eb807599" translate="yes" xml:space="preserve">
          <source>option may be used to force another file to be read, but neither &lt;code&gt;rshd&lt;/code&gt; nor &lt;code&gt;sshd&lt;/code&gt; generally invoke the shell with those options or allow them to be specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f2e8e2fec69ba6423e91a665cd299dc434293a7" translate="yes" xml:space="preserve">
          <source>option may be used to inhibit this behavior, and the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11f01e4684bea796f07195bc1f3299e590cd8b36" translate="yes" xml:space="preserve">
          <source>option may be used to inhibit this behavior. When invoked as an interactive shell with the name &lt;code&gt;sh&lt;/code&gt;, Bash looks for the variable &lt;code&gt;ENV&lt;/code&gt;, expands its value if it is defined, and uses the expanded value as the name of a file to read and execute. Since a shell invoked as &lt;code&gt;sh&lt;/code&gt; does not attempt to read and execute commands from any other startup files, the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b387a066416f92e9863312145cc9576c9390dad" translate="yes" xml:space="preserve">
          <source>option may be used when the shell is started to inhibit this behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f44a9e5862fde43ee0248c71653667b8f4071802" translate="yes" xml:space="preserve">
          <source>option means each &lt;var&gt;name&lt;/var&gt; refers to an associative array variable. If both options are supplied,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="304d5c7bf9bce84231ded9fb5519a54255b6615a" translate="yes" xml:space="preserve">
          <source>option means each &lt;var&gt;name&lt;/var&gt; refers to an indexed array variable; the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c11a5a3e21a1e356c971e2b1564be6dc144fcd0d" translate="yes" xml:space="preserve">
          <source>option means to list each builtin with an indication of whether or not it is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cf2793d7f02d865c87eb6e5a5cafc40435c6e59" translate="yes" xml:space="preserve">
          <source>option means to load the new builtin command &lt;var&gt;name&lt;/var&gt; from shared object &lt;var&gt;filename&lt;/var&gt;, on systems that support dynamic loading. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbebcbcd23f9fa2f939511e626755810eec6290e" translate="yes" xml:space="preserve">
          <source>option means to no longer mark each &lt;var&gt;name&lt;/var&gt; for export. If no &lt;var&gt;names&lt;/var&gt; are supplied, or if the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfd526a9645f0ed85bf6ae6974caf9fbde2495bc" translate="yes" xml:space="preserve">
          <source>option means to not follow symbolic links: symbolic links are resolved while &lt;code&gt;cd&lt;/code&gt; is traversing &lt;var&gt;directory&lt;/var&gt; and before processing an instance of &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca6c79b66073c5c69f6afe81ef32619286243582" translate="yes" xml:space="preserve">
          <source>option means to remove or mark all jobs; the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebad551bbd2346f90a5e42f4bfe940f5ff3d151b" translate="yes" xml:space="preserve">
          <source>option means to use a default value for &lt;code&gt;PATH&lt;/code&gt; that is guaranteed to find all of the standard utilities. The return status in this case is 127 if &lt;var&gt;command&lt;/var&gt; cannot be found or an error occurred, and the exit status of &lt;var&gt;command&lt;/var&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d518a89baab3345f94f58dd3f626ca4a8540e2d" translate="yes" xml:space="preserve">
          <source>option presents the extended attributes associated with a file as a directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23031c77c6b6b9c3bacb92c77701629d0644c976" translate="yes" xml:space="preserve">
          <source>option produces a more verbose description. In this case, the return status is zero if &lt;var&gt;command&lt;/var&gt; is found, and non-zero if not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81b429c7ec3f95a526ef3a73d224a3c1a6ffba5e" translate="yes" xml:space="preserve">
          <source>option removes a completion specification for each &lt;var&gt;name&lt;/var&gt;, or, if no &lt;var&gt;name&lt;/var&gt;s are supplied, all completion specifications. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cfe51e8a35f0f9d1b3cb146ede2aa83d1745c4a" translate="yes" xml:space="preserve">
          <source>option restricts &lt;code&gt;enable&lt;/code&gt; to the &lt;small&gt;POSIX&lt;/small&gt; special builtins. If</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08ad115b526261dec39ab5f75c81e28ff21087d2" translate="yes" xml:space="preserve">
          <source>option specifies &lt;var&gt;quantum&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e98bcf674035021aaea1faeea96910394b1f627" translate="yes" xml:space="preserve">
          <source>option takes precedence over</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eaa3a0287025678fb95eb615bc11d9ba7d28266" translate="yes" xml:space="preserve">
          <source>option tells Readline that the possible completions should be treated as filenames, and quoted appropriately. That option will also cause Readline to append a slash to filenames it can determine are directories (which is why we might want to extend &lt;code&gt;_comp_cd&lt;/code&gt; to append a slash if we&amp;rsquo;re using directories found via &lt;var&gt;CDPATH&lt;/var&gt;: Readline can&amp;rsquo;t tell those completions are directories). The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ea2e2557eda8cd7935a789b8a2f9d3ab11541b8" translate="yes" xml:space="preserve">
          <source>option tells Readline to not append a space character to the directory name, in case we want to append to it. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="773a0403aab20aa7149b49db08d30cf94bdb09cb" translate="yes" xml:space="preserve">
          <source>option to &lt;code&gt;complete&lt;/code&gt; is used as the default. If there is no default compspec, Bash attempts alias expansion on the command word as a final resort, and attempts to find a compspec for the command word from any successful expansion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65a5da84333d7b9f0beb910c8bff1007d0de9c31" translate="yes" xml:space="preserve">
          <source>option to &lt;code&gt;complete&lt;/code&gt; is used. If the command word is a full pathname, a compspec for the full pathname is searched for first. If no compspec is found for the full pathname, an attempt is made to find a compspec for the portion following the final slash. If those searches do not result in a compspec, any compspec defined with the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f82639220bbdc8d207b115eedd7a5fecdf05c097" translate="yes" xml:space="preserve">
          <source>option to &lt;code&gt;complete&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7a67964c8c69bee6dbaec53da3c22d3294a6844" translate="yes" xml:space="preserve">
          <source>option to &lt;code&gt;declare&lt;/code&gt; or &lt;code&gt;typeset&lt;/code&gt; will list the function names only (and optionally the source file and line number, if the &lt;code&gt;extdebug&lt;/code&gt; shell option is enabled). Functions may be exported so that subshells automatically have them defined with the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24cb64ecb5cef0b8c35eb45a85c8cbdc23dcf6bb" translate="yes" xml:space="preserve">
          <source>option to act on shell functions, a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92e0084a93e4e240d71973ac622d59149ffe1797" translate="yes" xml:space="preserve">
          <source>option to assign a list of words read from the standard input to an array, and can read values from the standard input into individual array elements. The &lt;code&gt;set&lt;/code&gt; and &lt;code&gt;declare&lt;/code&gt; builtins display array values in a way that allows them to be reused as input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1723219ffc3b7a22a86ebf235d5f41011fdaf26c" translate="yes" xml:space="preserve">
          <source>option to cause the output to be displayed in the form of a &lt;code&gt;umask&lt;/code&gt; command that may be reused as input (see &lt;a href=&quot;bourne-shell-builtins#Bourne-Shell-Builtins&quot;&gt;Bourne Shell Builtins&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2f8924a42f0cb31e68a1f3550c7ac2230cfac27" translate="yes" xml:space="preserve">
          <source>option to display variables with various attributes set in a format that can be used as shell input, a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2b5f491fd003d71d392c69a71010ce4579015e4" translate="yes" xml:space="preserve">
          <source>option to remove various variable attributes, and &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9edecefa04a184168a1fd4a8c3bdca8371d4a687" translate="yes" xml:space="preserve">
          <source>option to specify an associative array. If both options are supplied,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5ee2cbd08c5ca88b36ff2955fcacbfa8bf4ffae" translate="yes" xml:space="preserve">
          <source>option to specify an indexed array and a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a63a4dd0e3d8c3820932c20630a7116ac655abc7" translate="yes" xml:space="preserve">
          <source>option to the &lt;code&gt;command&lt;/code&gt; builtin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62a8ff9f299a2c9ac4591915e5e58d42b4622f21" translate="yes" xml:space="preserve">
          <source>option to the &lt;code&gt;declare&lt;/code&gt; (&lt;code&gt;typeset&lt;/code&gt;) builtin command (see &lt;a href=&quot;bash-builtins#Bash-Builtins&quot;&gt;Bash Builtins&lt;/a&gt;). The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6e083ee3bac558455e05e71500f376b5d4fb589" translate="yes" xml:space="preserve">
          <source>option to the &lt;code&gt;declare&lt;/code&gt; builtin (see &lt;a href=&quot;bash-builtins#Bash-Builtins&quot;&gt;Bash Builtins&lt;/a&gt;) displays the source file name and line number corresponding to each function name supplied as an argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f68e4f605f2242ee2f653002a3433431cf7e5dbd" translate="yes" xml:space="preserve">
          <source>option to the &lt;code&gt;declare&lt;/code&gt; builtin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d07a244fccc5b3e01fe96612b5b4efe1117ac35" translate="yes" xml:space="preserve">
          <source>option to the &lt;code&gt;declare&lt;/code&gt; or &lt;code&gt;local&lt;/code&gt; builtin commands (see &lt;a href=&quot;bash-builtins#Bash-Builtins&quot;&gt;Bash Builtins&lt;/a&gt;) to create a &lt;var&gt;nameref&lt;/var&gt;, or a reference to another variable. This allows variables to be manipulated indirectly. Whenever the nameref variable is referenced, assigned to, unset, or has its attributes modified (other than using or changing the nameref attribute itself), the operation is actually performed on the variable specified by the nameref variable&amp;rsquo;s value. A nameref is commonly used within shell functions to refer to a variable whose name is passed as an argument to the function. For instance, if a variable name is passed to a shell function as its first argument, running</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e6746d1240464e6cdba382b9bbc5bb4b405f28a" translate="yes" xml:space="preserve">
          <source>option to the &lt;code&gt;export&lt;/code&gt; builtin (see &lt;a href=&quot;bourne-shell-builtins#Bourne-Shell-Builtins&quot;&gt;Bourne Shell Builtins&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af0b84995a4467f64baf02e5efcdef32e1d0b7d1" translate="yes" xml:space="preserve">
          <source>option to the &lt;code&gt;fc&lt;/code&gt; builtin command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b2cc79323104bffd4c6eb35b74c7bef98101963" translate="yes" xml:space="preserve">
          <source>option to the &lt;code&gt;hash&lt;/code&gt; builtin command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c894c6244c98e22de14ad7d739a545a60fc6e4d" translate="yes" xml:space="preserve">
          <source>option to the &lt;code&gt;history&lt;/code&gt; builtin command may be used to see what a history expansion will do before using it. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61b7bb270513ecad03db32d74f166f7c9f976e48" translate="yes" xml:space="preserve">
          <source>option to the &lt;code&gt;history&lt;/code&gt; builtin may be used to add commands to the end of the history list without actually executing them, so that they are available for subsequent recall. This is most useful in conjunction with Readline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d09d2c4162658ad8f2cfecd568580b536a93d43" translate="yes" xml:space="preserve">
          <source>option to the &lt;code&gt;read&lt;/code&gt; builtin command (see &lt;a href=&quot;bash-builtins#Bash-Builtins&quot;&gt;Bash Builtins&lt;/a&gt;). By default, the line editing commands are similar to those of Emacs. A vi-style line editing interface is also available. Line editing can be enabled at any time using the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7adf2dfe3908cfe244306d8e7a060aaef974b8fe" translate="yes" xml:space="preserve">
          <source>option to the &lt;code&gt;set&lt;/code&gt; builtin (see &lt;a href=&quot;the-set-builtin#The-Set-Builtin&quot;&gt;The Set Builtin&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e200ba0c78bcf05e783606ac81c7e394052f929" translate="yes" xml:space="preserve">
          <source>option to the &lt;code&gt;set&lt;/code&gt; builtin command (see &lt;a href=&quot;the-set-builtin#The-Set-Builtin&quot;&gt;The Set Builtin&lt;/a&gt;). The options appearing in &lt;code&gt;SHELLOPTS&lt;/code&gt; are those reported as &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a740028d5ff79aec6ee8854300d2cf1dd8eb9a83" translate="yes" xml:space="preserve">
          <source>option to the &lt;code&gt;set&lt;/code&gt; builtin command (see &lt;a href=&quot;the-set-builtin#The-Set-Builtin&quot;&gt;The Set Builtin&lt;/a&gt;). With no options, or with the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35ec9f45b7429a29bf10f29140d67906c2e7e433" translate="yes" xml:space="preserve">
          <source>option to the &lt;code&gt;set&lt;/code&gt; builtin is enabled (see &lt;a href=&quot;the-set-builtin#The-Set-Builtin&quot;&gt;The Set Builtin&lt;/a&gt;), the shell provides access to the &lt;em&gt;command history&lt;/em&gt;, the list of commands previously typed. The value of the &lt;code&gt;HISTSIZE&lt;/code&gt; shell variable is used as the number of commands to save in a history list. The text of the last &lt;code&gt;$HISTSIZE&lt;/code&gt; commands (default 500) is saved. The shell stores each command in the history list prior to parameter and variable expansion but after history expansion is performed, subject to the values of the shell variables &lt;code&gt;HISTIGNORE&lt;/code&gt; and &lt;code&gt;HISTCONTROL&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50fae674308b767038834bbc749b3c4bbf6f2d0a" translate="yes" xml:space="preserve">
          <source>option to the &lt;code&gt;set&lt;/code&gt; builtin is enabled, Bash reports such changes immediately (see &lt;a href=&quot;the-set-builtin#The-Set-Builtin&quot;&gt;The Set Builtin&lt;/a&gt;). Any trap on &lt;code&gt;SIGCHLD&lt;/code&gt; is executed for each child process that exits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9ec324b3572786f708c1661d09c985a868ed148" translate="yes" xml:space="preserve">
          <source>option to the &lt;code&gt;shopt&lt;/code&gt; builtin command (see &lt;a href=&quot;the-shopt-builtin#The-Shopt-Builtin&quot;&gt;The Shopt Builtin&lt;/a&gt;). The options appearing in &lt;code&gt;BASHOPTS&lt;/code&gt; are those reported as &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4221fd2a569c3307632e1d91ffa52dd437842bb" translate="yes" xml:space="preserve">
          <source>option to the &lt;code&gt;unset&lt;/code&gt; builtin (see &lt;a href=&quot;bourne-shell-builtins#Bourne-Shell-Builtins&quot;&gt;Bourne Shell Builtins&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d30d01a777c00e5f56d537d3806ac3b759993495" translate="yes" xml:space="preserve">
          <source>option to the &lt;code&gt;unset&lt;/code&gt; builtin (see &lt;a href=&quot;bourne-shell-builtins#Bourne-Shell-Builtins&quot;&gt;Bourne Shell Builtins&lt;/a&gt;). Otherwise, if &lt;code&gt;unset&lt;/code&gt; is executed with the name of a nameref variable as an argument, the variable referenced by the nameref variable will be unset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13535a3d8ff1dd8180f5baa6d9fc6abe3dee7aec" translate="yes" xml:space="preserve">
          <source>option was supplied to &lt;code&gt;complete&lt;/code&gt; when the compspec was defined, Readline&amp;rsquo;s default completion will be performed if the compspec (and, if attempted, the default Bash completions) generate no matches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52e7b147d1fb014cf144ceda9bc930feacab8d34" translate="yes" xml:space="preserve">
          <source>option was supplied to &lt;code&gt;complete&lt;/code&gt; when the compspec was defined, directory name completion is attempted and any matches are added to the results of the other actions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6c275aa766e5611a09eea328a14320479d485d6" translate="yes" xml:space="preserve">
          <source>option was supplied to &lt;code&gt;complete&lt;/code&gt; when the compspec was defined, directory name completion is attempted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5568039cfdf3c6779fc9a3bd2c9e129305a49099" translate="yes" xml:space="preserve">
          <source>option was supplied to &lt;code&gt;complete&lt;/code&gt; when the compspec was defined, the default Bash completions are attempted if the compspec generates no matches. If the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9b4d0d292c220cd8ee8d0dc613ce28a2cfab5ce" translate="yes" xml:space="preserve">
          <source>option will allow &lt;code&gt;read&lt;/code&gt; to time out if input does not arrive within a specified number of seconds, the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8af36ba962e8db0c7577200d3163c2135ba588e" translate="yes" xml:space="preserve">
          <source>option will allow reading only a specified number of characters rather than a full line, and the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31cc03acdd6da8b5e8ba13438a05c8873d9b368b" translate="yes" xml:space="preserve">
          <source>option will delete a builtin loaded with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="857efa2c2aff4695d75ffd40326103b34a7ee135" translate="yes" xml:space="preserve">
          <source>option will display the attributes and values of each &lt;var&gt;name&lt;/var&gt;. When</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="134f8b17252684df664597ce92b70ad08807c007" translate="yes" xml:space="preserve">
          <source>option will force Bash to read and execute commands from &lt;var&gt;file&lt;/var&gt; instead of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e45c3ed977c2c74baf32749eed63d61adccafc1" translate="yes" xml:space="preserve">
          <source>option will read until a particular character rather than newline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="730ce1e0a0c87eb4e860611430409d1c508c3068" translate="yes" xml:space="preserve">
          <source>option will restrict the display to shell functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b395d96509a2dca275e0306d7c24a81974b2b32" translate="yes" xml:space="preserve">
          <source>option will turn off echoing of input characters as they are read, the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9a29aeb0065625b3308b9b6ecf1f2011e1e9160" translate="yes" xml:space="preserve">
          <source>option without a &lt;var&gt;jobspec&lt;/var&gt; argument restricts operation to running jobs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8df9f00ed03acea43fac1a26e77448265605fc7f" translate="yes" xml:space="preserve">
          <source>option).</source>
          <target state="translated">option).</target>
        </trans-unit>
        <trans-unit id="d8938e8b288ce455a097cdfaafaabea26069eb3e" translate="yes" xml:space="preserve">
          <source>option, &lt;code&gt;alias&lt;/code&gt; prints the list of aliases on the standard output in a form that allows them to be reused as input. If arguments are supplied, an alias is defined for each &lt;var&gt;name&lt;/var&gt; whose &lt;var&gt;value&lt;/var&gt; is given. If no &lt;var&gt;value&lt;/var&gt; is given, the name and value of the alias is printed. Aliases are described in &lt;a href=&quot;aliases#Aliases&quot;&gt;Aliases&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30fe96ee0a09ed0fbc5a20f1a4986c0a9ad2f025" translate="yes" xml:space="preserve">
          <source>option, Bash attempts to read and execute commands from the login shell startup files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a4d5a48f3754d973aa937a1d9d4fac5cc2be408" translate="yes" xml:space="preserve">
          <source>option, a list of all settable options is displayed, with an indication of whether or not each is set; if &lt;var&gt;optnames&lt;/var&gt; are supplied, the output is restricted to those options. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="556a9e506faea2c31e915a97b99d41e82c67eb42" translate="yes" xml:space="preserve">
          <source>option, and whose input and error output are both connected to terminals (as determined by &lt;code&gt;isatty(3)&lt;/code&gt;), or one started with the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19f0fa0464acced3eab8ac1b16fd2e389c41ce62" translate="yes" xml:space="preserve">
          <source>option, and whose input and output are both connected to terminals (as determined by &lt;code&gt;isatty(3)&lt;/code&gt;), or one started with the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9deee72ec35144d348382f7db8a975d10dc84eb8" translate="yes" xml:space="preserve">
          <source>option, and will use the &lt;code&gt;REPLY&lt;/code&gt; variable as a default if no non-option arguments are supplied. The Bash &lt;code&gt;read&lt;/code&gt; builtin also accepts a prompt string with the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01cb489962b9e160a12e562776fdb2063a206431" translate="yes" xml:space="preserve">
          <source>option, it first attempts to read and execute commands from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64f37ae14cf52d4938d4f2ef67ac3f468cca1284" translate="yes" xml:space="preserve">
          <source>option, it first reads and executes commands from the file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b760336bf45803d738f5f67622737ce68b43466" translate="yes" xml:space="preserve">
          <source>option, split into words as described above in &lt;a href=&quot;word-splitting#Word-Splitting&quot;&gt;Word Splitting&lt;/a&gt;, and the first word is assigned to the first &lt;var&gt;name&lt;/var&gt;, the second word to the second &lt;var&gt;name&lt;/var&gt;, and so on. If there are more words than names, the remaining words and their intervening delimiters are assigned to the last &lt;var&gt;name&lt;/var&gt;. If there are fewer words read from the input stream than names, the remaining names are assigned empty values. The characters in the value of the &lt;code&gt;IFS&lt;/code&gt; variable are used to split the line into words using the same rules the shell uses for expansion (described above in &lt;a href=&quot;word-splitting#Word-Splitting&quot;&gt;Word Splitting&lt;/a&gt;). The backslash character &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d638504555346888377e2119da092ff245a71e08" translate="yes" xml:space="preserve">
          <source>option, when job control is enabled, forces &lt;code&gt;wait&lt;/code&gt; to wait for each &lt;var&gt;pid&lt;/var&gt; or &lt;var&gt;jobspec&lt;/var&gt; to terminate before returning its status, intead of returning when it changes status. If neither &lt;var&gt;jobspec&lt;/var&gt; nor &lt;var&gt;pid&lt;/var&gt; specifies an active child process of the shell, the return status is 127.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95743d0047de8fc16d8cf394f0ae7ca6429a16c4" translate="yes" xml:space="preserve">
          <source>option, will alter its real and effective &lt;small&gt;UID&lt;/small&gt; and &lt;small&gt;GID&lt;/small&gt; if they are less than some magic threshold value, commonly 100. This can lead to unexpected results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12cb917fa6b139c69bd08293a23c4256c452e570" translate="yes" xml:space="preserve">
          <source>option.</source>
          <target state="translated">option.</target>
        </trans-unit>
        <trans-unit id="d2d0d4f89df3b17aa7d5cdee2797f8096be25af4" translate="yes" xml:space="preserve">
          <source>option. &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f67839951f6a63a8130bc39d5741f846b64214b9" translate="yes" xml:space="preserve">
          <source>option. If set after invocation, behavior intended for use by debuggers is enabled:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="593039eb1063eb5f244ae8d1f0eb420890f0720f" translate="yes" xml:space="preserve">
          <source>option. See &lt;a href=&quot;interactive-shells#Interactive-Shells&quot;&gt;Interactive Shells&lt;/a&gt;, for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="295d1c5f08b267bfd32f863e6ef18b2548b4415d" translate="yes" xml:space="preserve">
          <source>option. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07706d09fce1df2f501fe17e57125b1dc5fbe0c5" translate="yes" xml:space="preserve">
          <source>option. The &lt;code&gt;read&lt;/code&gt; builtin also has additional options to control input: the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c9695c758f34f6823b79de584671e726dcb0745" translate="yes" xml:space="preserve">
          <source>option. This sets the default value of the &lt;code&gt;xpg_echo&lt;/code&gt; shell option to &lt;code&gt;on&lt;/code&gt;, which makes the Bash &lt;code&gt;echo&lt;/code&gt; behave more like the version specified in the Single Unix Specification, version 3. See &lt;a href=&quot;bash-builtins#Bash-Builtins&quot;&gt;Bash Builtins&lt;/a&gt;, for a description of the escape sequences that &lt;code&gt;echo&lt;/code&gt; recognizes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc43695f5295bc5aa1b42c813c85825b5ac4b05b" translate="yes" xml:space="preserve">
          <source>option:</source>
          <target state="translated">option:</target>
        </trans-unit>
        <trans-unit id="9ab7b42213bb73e10976414f55ebd334fcd3c8c6" translate="yes" xml:space="preserve">
          <source>option; no commands will be executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35e7022d496c1fec62485bec7d61d56d9ed67905" translate="yes" xml:space="preserve">
          <source>options (and, if necessary, the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85c1bdc6cb3eb9c5b11b486afe20d45d029d3090" translate="yes" xml:space="preserve">
          <source>options are added to each member of the completion list, and the result is returned to the Readline completion code as the list of possible completions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a6edad86de6be28dce5d308f2fd81fe90d09ea3" translate="yes" xml:space="preserve">
          <source>options are turned off. If there are no arguments, the positional parameters remain unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baeff99aa58db04ea26d64c241e63c053939e58f" translate="yes" xml:space="preserve">
          <source>options enabled at invocation (either by default or with command-line arguments) or by &lt;code&gt;set&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d493aa73f95d3ead8a2778446fe808e8eac4743b" translate="yes" xml:space="preserve">
          <source>options enabled by &lt;code&gt;shopt&lt;/code&gt; (see &lt;a href=&quot;the-shopt-builtin#The-Shopt-Builtin&quot;&gt;The Shopt Builtin&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e454d0b37b1e3a30ac8e60101e3de3c64380d5a" translate="yes" xml:space="preserve">
          <source>options is invoked. When the command or function is invoked, the &lt;code&gt;COMP_LINE&lt;/code&gt;, &lt;code&gt;COMP_POINT&lt;/code&gt;, &lt;code&gt;COMP_KEY&lt;/code&gt;, and &lt;code&gt;COMP_TYPE&lt;/code&gt; variables are assigned values as described above (see &lt;a href=&quot;bash-variables#Bash-Variables&quot;&gt;Bash Variables&lt;/a&gt;). If a shell function is being invoked, the &lt;code&gt;COMP_WORDS&lt;/code&gt; and &lt;code&gt;COMP_CWORD&lt;/code&gt; variables are also set. When the function or command is invoked, the first argument ($1) is the name of the command whose arguments are being completed, the second argument ($2) is the word being completed, and the third argument ($3) is the word preceding the word being completed on the current command line. No filtering of the generated completions against the word being completed is performed; the function or command has complete freedom in generating the matches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0db77afc390689ecb28372b8bc0723d5639d269" translate="yes" xml:space="preserve">
          <source>options is used, if &lt;var&gt;filename&lt;/var&gt; is given, then it is used as the history file. If not, then the value of the &lt;code&gt;HISTFILE&lt;/code&gt; variable is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="666fd1c3b2b902db163ef87923d5a6ed25a3c5a8" translate="yes" xml:space="preserve">
          <source>options that alter how Bash is compiled and linked, rather than changing run-time features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad49dfb22ef56406a10fe9808398783accc3c054" translate="yes" xml:space="preserve">
          <source>options that the Bash &lt;code&gt;configure&lt;/code&gt; recognizes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="465b4e50218f7c3f4eae0c45a6ddc8576f573ff8" translate="yes" xml:space="preserve">
          <source>options to &lt;code&gt;set&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ba27195955b660a4a33abbcbb546a94555e3868" translate="yes" xml:space="preserve">
          <source>options to switch between logical and physical modes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="579420fdca8e7f2c8539f6f1b1a82abefec8ee37" translate="yes" xml:space="preserve">
          <source>options to the &lt;code&gt;enable&lt;/code&gt; builtin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="521c91a131f4b892e22a366f10502be27e80ed4c" translate="yes" xml:space="preserve">
          <source>options to the &lt;code&gt;set&lt;/code&gt; builtin command (see &lt;a href=&quot;the-set-builtin#The-Set-Builtin&quot;&gt;The Set Builtin&lt;/a&gt;), or disabled using the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cfc7bf9b875d0617eba82be017fd5d3b33af6c5" translate="yes" xml:space="preserve">
          <source>options) should be quoted to protect them from expansion before the &lt;code&gt;complete&lt;/code&gt; builtin is invoked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="972857706342bcffe818557b3475190cc95e1b11" translate="yes" xml:space="preserve">
          <source>options, the various shell variables set by the programmable completion facilities, while available, will not have useful values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77e03e6bb1557ea8faf7fec0a18a02ba7efe5932" translate="yes" xml:space="preserve">
          <source>options, where &lt;var&gt;feature&lt;/var&gt; indicates an optional part of Bash. There are also several</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0006ecad2d8385e7a404dbbee7c7a420f602bb7e" translate="yes" xml:space="preserve">
          <source>options, where &lt;var&gt;package&lt;/var&gt; is something like &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="835470bacb439d9d9ed5b0fb6adc0d05997c0a0e" translate="yes" xml:space="preserve">
          <source>options.</source>
          <target state="translated">options.</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="45c4424c6085a18cb0488b73aed03cbec51b5c47" translate="yes" xml:space="preserve">
          <source>or any of the personal initialization files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc20a6e0f7a02bf87468eddd1832b41b148a6697" translate="yes" xml:space="preserve">
          <source>parameter and variable expansion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8698fcea752209d5c5ba09673df76c9c845aee0e" translate="yes" xml:space="preserve">
          <source>parameter expansion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1f1425b65e5770c87be308dd6bfee4b3fa1b113" translate="yes" xml:space="preserve">
          <source>parameters</source>
          <target state="translated">parameters</target>
        </trans-unit>
        <trans-unit id="be823de22be500735bd4c3bc3c5573e8898f3782" translate="yes" xml:space="preserve">
          <source>parameters, positional</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6face56855e7b525ca36d5c803bee8ff6307644" translate="yes" xml:space="preserve">
          <source>parameters, special</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36b7275ab5f5094b94a631e69a2666ebf1a54ac8" translate="yes" xml:space="preserve">
          <source>pathname expansion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9616f93828582ec9550918516651f47e26d92b1" translate="yes" xml:space="preserve">
          <source>pattern matching</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="992b5d666718483c9676361ebc685d122089e3eb" translate="yes" xml:space="preserve">
          <source>pipeline</source>
          <target state="translated">pipeline</target>
        </trans-unit>
        <trans-unit id="dbb0f1a05866dcf0dec30971c964b711e45be6b1" translate="yes" xml:space="preserve">
          <source>print the hashed value, which is not necessarily the file that appears first in &lt;code&gt;$PATH&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f28ac6b0b420a3cb83fd8202e6c47e4b500565f" translate="yes" xml:space="preserve">
          <source>process group</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c33818acb4d2e92784a739196ec41fd7ec85257a" translate="yes" xml:space="preserve">
          <source>process group ID</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc335d7d94a5779582d25e748791964fcfe32951" translate="yes" xml:space="preserve">
          <source>process substitution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2253d23dfc02a16c42b5644e698515ad73f4391b" translate="yes" xml:space="preserve">
          <source>produced by some word processors for output purposes only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce4e3607f6f4ee508cdc7a1f53954ef56ee52672" translate="yes" xml:space="preserve">
          <source>programmable completion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad00e5e156f2977a827a551ea4f8345691919d00" translate="yes" xml:space="preserve">
          <source>prompting</source>
          <target state="translated">prompting</target>
        </trans-unit>
        <trans-unit id="25f455fa2765fb182010db75e3cd16b60d614f70" translate="yes" xml:space="preserve">
          <source>purify</source>
          <target state="translated">purify</target>
        </trans-unit>
        <trans-unit id="22ea1c649c82946aa6e479e1ffd321e4a318b1b0" translate="yes" xml:space="preserve">
          <source>q</source>
          <target state="translated">q</target>
        </trans-unit>
        <trans-unit id="e5bf57734a49948b4d8e12ceb682a490c459502b" translate="yes" xml:space="preserve">
          <source>question mark</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7216cc989e7849d7bc9540d60542b897b060fdad" translate="yes" xml:space="preserve">
          <source>quoting</source>
          <target state="translated">quoting</target>
        </trans-unit>
        <trans-unit id="c89915700039e19b4cd368773c0123d74ff46f88" translate="yes" xml:space="preserve">
          <source>quoting, ANSI</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dc7c9ec434ed06502767136789763ec11d2c4b7" translate="yes" xml:space="preserve">
          <source>r</source>
          <target state="translated">r</target>
        </trans-unit>
        <trans-unit id="d4264e9df3df35a9ea7199fff23db3dd2e07b465" translate="yes" xml:space="preserve">
          <source>r cc</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a843d3e98ccb01f0f2ac376d60a6b33c8edf3ed2" translate="yes" xml:space="preserve">
          <source>redirection</source>
          <target state="translated">redirection</target>
        </trans-unit>
        <trans-unit id="11249af78f0353f4ab84ddc1480d1edf5124568e" translate="yes" xml:space="preserve">
          <source>redirections</source>
          <target state="translated">redirections</target>
        </trans-unit>
        <trans-unit id="d6a8e6cdd4cabc2934bca3497a954a09b02b3c74" translate="yes" xml:space="preserve">
          <source>regex</source>
          <target state="translated">regex</target>
        </trans-unit>
        <trans-unit id="91943699c6223142af61370eaf0b786b50de5a5e" translate="yes" xml:space="preserve">
          <source>reserved word</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="391e334df4720f06d3ee89418b235fffbc1ddefe" translate="yes" xml:space="preserve">
          <source>restricted shell</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="247482eb38c555e475f8432b2b6990db24f9e041" translate="yes" xml:space="preserve">
          <source>return status</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0f1490a20d0211c997b44bc357e1972deab8ae3" translate="yes" xml:space="preserve">
          <source>s</source>
          <target state="translated">s</target>
        </trans-unit>
        <trans-unit id="9f303f79a9bd2a266d1c2476c46ecccccc45653b" translate="yes" xml:space="preserve">
          <source>s are typed without any intervening characters defining a new search string, any remembered search string is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b122dcfb46498179055e88a4084485987952d23" translate="yes" xml:space="preserve">
          <source>script to create a build tree which has symbolic links back to each file in the source directory. Here&amp;rsquo;s an example that creates a build directory in the current directory from a source directory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c971c71597a539ebb4a27c4744ed187255ec8292" translate="yes" xml:space="preserve">
          <source>searches forward through the history. The characters present in the value of the &lt;code&gt;isearch-terminators&lt;/code&gt; variable are used to terminate an incremental search. If that variable has not been assigned a value, the &lt;code&gt;ESC&lt;/code&gt; and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a3e080cb7a96df401670302c147c16aee7a14a8" translate="yes" xml:space="preserve">
          <source>set +o restricted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebc790c736e0d051d608f0fbc01df359a454e71a" translate="yes" xml:space="preserve">
          <source>set +r</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b5f4e57fa852545b4f1dfc7b000cfad3d2421f8" translate="yes" xml:space="preserve">
          <source>set -n</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61298bf22bd63aa1e120e23594d8e9f5164fde90" translate="yes" xml:space="preserve">
          <source>set -o</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1e3ebddeda5cb51bf31ccb736799b5f6022c819" translate="yes" xml:space="preserve">
          <source>set -o emacs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fbaf3acc1af85cddcecfda0bc6afdc433079ffe" translate="yes" xml:space="preserve">
          <source>set -o posix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c81ec30df11e3a2e611397f3b440a930f48d9be0" translate="yes" xml:space="preserve">
          <source>set -o vi</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6c6a5f87c0ef7dc771b6971dd968e3f2a3b9152" translate="yes" xml:space="preserve">
          <source>set -u</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d871786e2520ccd1c4baa61496226bba42aeca6" translate="yes" xml:space="preserve">
          <source>set -x</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbff557596af5aa230a7bfd9533406a098eec5bc" translate="yes" xml:space="preserve">
          <source>set keymap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0591dba02fdc481113f22a292f51e0199b199e17" translate="yes" xml:space="preserve">
          <source>sets the value of that option;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="142080462400a424298cafbd49eff487bd3efaaa" translate="yes" xml:space="preserve">
          <source>setting, even if</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16795633e2c1543064a3ad70ac3ba71d3d589b3b" translate="yes" xml:space="preserve">
          <source>sh</source>
          <target state="translated">sh</target>
        </trans-unit>
        <trans-unit id="6d67dcaea29558780097d3246f6c133f8b43b23c" translate="yes" xml:space="preserve">
          <source>sh ./configure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a59461739c71e4583b81676e2b68e9fb39f8f76e" translate="yes" xml:space="preserve">
          <source>shell aliases defined with &lt;code&gt;alias&lt;/code&gt; (see &lt;a href=&quot;aliases#Aliases&quot;&gt;Aliases&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43bf77ba8c4580face8ca3dad50a41424b3cac01" translate="yes" xml:space="preserve">
          <source>shell arithmetic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee34460cad81f781780ed077bf1d8d5923474fb2" translate="yes" xml:space="preserve">
          <source>shell function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6625b95c36d14451668755da45b561f4a0e36ce1" translate="yes" xml:space="preserve">
          <source>shell functions defined during execution or inherited from the shell&amp;rsquo;s parent in the environment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a90fbe0e582e683296dfa0fe8678051827cdb354" translate="yes" xml:space="preserve">
          <source>shell parameters that are set by variable assignment or with &lt;code&gt;set&lt;/code&gt; or inherited from the shell&amp;rsquo;s parent in the environment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6347583f73bdb545b8dad745124cf62421d7aa3c" translate="yes" xml:space="preserve">
          <source>shell script</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6df308c611e412f89d83d8990624cafda4d7c22a" translate="yes" xml:space="preserve">
          <source>shell variable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36088fbb970a3fc61d6be67b2f77659e04b8dd31" translate="yes" xml:space="preserve">
          <source>shell variables and functions marked for export, along with variables exported for the command, passed in the environment (see &lt;a href=&quot;environment#Environment&quot;&gt;Environment&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0c00a9d47526117872d1da28b6ccf2b669de648" translate="yes" xml:space="preserve">
          <source>shell, interactive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a411c5075a2b175709bd0a2ac490d2142c0f67ff" translate="yes" xml:space="preserve">
          <source>shopt</source>
          <target state="translated">shopt</target>
        </trans-unit>
        <trans-unit id="0bdb2e9b4fc8282b54263ff71c979fb387989b82" translate="yes" xml:space="preserve">
          <source>shopt -s checkhash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81e9209e64bdd3a52fa01ece075eaa947db8fc49" translate="yes" xml:space="preserve">
          <source>sign</source>
          <target state="translated">sign</target>
        </trans-unit>
        <trans-unit id="36ab4aaa56c8fea2a7afdfa5b5fcd28c9e178754" translate="yes" xml:space="preserve">
          <source>signal</source>
          <target state="translated">signal</target>
        </trans-unit>
        <trans-unit id="4fde96c8d17253478c6bdabd2191ad78b78b1aab" translate="yes" xml:space="preserve">
          <source>signal handling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44817ac90b4676f63ab6aa851d0d68fe7668eb1d" translate="yes" xml:space="preserve">
          <source>single quote</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cdc16294a3b79b3bb08f3dade6b2b1fb59f4b7d" translate="yes" xml:space="preserve">
          <source>special builtin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba2f4ed554088f2c3c33e1ac7c50f5302bec9da7" translate="yes" xml:space="preserve">
          <source>starts a negative argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a701f859e5de50b4136d454f3628ce587625947a" translate="yes" xml:space="preserve">
          <source>startup files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54b89e9e45924edffcd4527c61977ce0f5479620" translate="yes" xml:space="preserve">
          <source>subdirectory.</source>
          <target state="translated">subdirectory.</target>
        </trans-unit>
        <trans-unit id="4d978452b96b6e5e81fccc38bee9ef53b75dbd26" translate="yes" xml:space="preserve">
          <source>substring</source>
          <target state="translated">substring</target>
        </trans-unit>
        <trans-unit id="e72f72263cc38427b80a1e29f2965c2b29dadc96" translate="yes" xml:space="preserve">
          <source>sun4</source>
          <target state="translated">sun4</target>
        </trans-unit>
        <trans-unit id="5bdcd3c0d4d24ae3e71b3b452a024c6324c7e4bb" translate="yes" xml:space="preserve">
          <source>support</source>
          <target state="translated">support</target>
        </trans-unit>
        <trans-unit id="23395a5dfbe9a029dfe51ecb8f2712874b3faeff" translate="yes" xml:space="preserve">
          <source>support/config.sub</source>
          <target state="translated">support/config.sub</target>
        </trans-unit>
        <trans-unit id="0d4a0cd662fadcbc8f7c5f2767a5370e9233efb8" translate="yes" xml:space="preserve">
          <source>support/mkclone</source>
          <target state="translated">support/mkclone</target>
        </trans-unit>
        <trans-unit id="ea2e6ccddb76e49a24334c3471548eb04e3d2ad6" translate="yes" xml:space="preserve">
          <source>suppress further output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="248e117eec2986e221a628eaadac088d29d5e6d3" translate="yes" xml:space="preserve">
          <source>suspending jobs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8efd86fb78a56a5145ed7739dcb00c78581c5375" translate="yes" xml:space="preserve">
          <source>t</source>
          <target state="translated">t</target>
        </trans-unit>
        <trans-unit id="09bbef360f8391925489a7060c8435f4dacc298c" translate="yes" xml:space="preserve">
          <source>takes precedence. If no &lt;var&gt;name&lt;/var&gt; arguments are given, or if the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45ec16d89deca49d2490bde528b81d943c373828" translate="yes" xml:space="preserve">
          <source>takes precedence. The &lt;code&gt;read&lt;/code&gt; builtin accepts a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9ebca047910b44d84a099b4e6c1d6f9191360f4" translate="yes" xml:space="preserve">
          <source>tcsh</source>
          <target state="translated">tcsh</target>
        </trans-unit>
        <trans-unit id="4f0a2ab96d7921091d33a625555217a03f3e32ba" translate="yes" xml:space="preserve">
          <source>that saves the results of its tests to speed up reconfiguring, and a file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b103ba46751dd539cd11d8e79140b0ff9e255859" translate="yes" xml:space="preserve">
          <source>that should be read when the shell needs to complete a hostname. The list of possible hostname completions may be changed while the shell is running; the next time hostname completion is attempted after the value is changed, Bash adds the contents of the new file to the existing list. If &lt;code&gt;HOSTFILE&lt;/code&gt; is set, but has no value, or does not name a readable file, Bash attempts to read</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df85931380eb5761e33113e168479b9896f9c497" translate="yes" xml:space="preserve">
          <source>the Unicode (ISO/IEC 10646) character whose value is the hexadecimal value &lt;var&gt;HHHH&lt;/var&gt; (one to four hex digits)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ccc75a3596f7f54f321f6d47b3e8ab044913a2c" translate="yes" xml:space="preserve">
          <source>the Unicode (ISO/IEC 10646) character whose value is the hexadecimal value &lt;var&gt;HHHHHHHH&lt;/var&gt; (one to eight hex digits)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dce3e31e70e928d92b5e01683307bef3875afcdb" translate="yes" xml:space="preserve">
          <source>the current working directory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="954194f5d079668a256b5fa377b4053b903d14a4" translate="yes" xml:space="preserve">
          <source>the current working directory as set by &lt;code&gt;cd&lt;/code&gt;, &lt;code&gt;pushd&lt;/code&gt;, or &lt;code&gt;popd&lt;/code&gt;, or inherited by the shell at invocation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba1d56c40b8c489e278633879da80eaf55259fe2" translate="yes" xml:space="preserve">
          <source>the eight-bit character whose value is the hexadecimal value &lt;var&gt;HH&lt;/var&gt; (one or two hex digits)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9fcba40ab7e84a8dbfa7c5a9076eddfd056d37f" translate="yes" xml:space="preserve">
          <source>the eight-bit character whose value is the octal value &lt;var&gt;nnn&lt;/var&gt; (one to three digits)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dc60c82d0deec2e1c617ed257e5991c3f03aa5e" translate="yes" xml:space="preserve">
          <source>the eight-bit character whose value is the octal value &lt;var&gt;nnn&lt;/var&gt; (one to three octal digits)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6339be9eafb81b27df9684e2ae73dd1e72a6825c" translate="yes" xml:space="preserve">
          <source>the eight-bit character whose value is the octal value &lt;var&gt;nnn&lt;/var&gt; (zero to three octal digits)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="607b19c0d4ecd31c7c25e635efbe65462b38aa2c" translate="yes" xml:space="preserve">
          <source>the file creation mode mask</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16a4f7c22060adea26c055ea704265a79f280b31" translate="yes" xml:space="preserve">
          <source>the file creation mode mask as set by &lt;code&gt;umask&lt;/code&gt; or inherited from the shell&amp;rsquo;s parent</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94a1366a8db6891d463103b5cf5df117efd12507" translate="yes" xml:space="preserve">
          <source>the shell&amp;rsquo;s open files, plus any modifications and additions specified by redirections to the command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa2f80b190663512311c372a57b5e2ff61edf414" translate="yes" xml:space="preserve">
          <source>then:</source>
          <target state="translated">then:</target>
        </trans-unit>
        <trans-unit id="ea760c2ebf2f40e8ffd5c342f7928a3829809672" translate="yes" xml:space="preserve">
          <source>tilde expansion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14eee0e64c7bf2bb1aab540365c1f6f16f208313" translate="yes" xml:space="preserve">
          <source>to &lt;code&gt;configure&lt;/code&gt; when building (see &lt;a href=&quot;optional-features#Optional-Features&quot;&gt;Optional Features&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52844cb5abbb6c37cc91ee28d470381df28d4d27" translate="yes" xml:space="preserve">
          <source>to disable caching, for debugging &lt;code&gt;configure&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="838bf8e0fbd5b5ee89e397aaff1ed3ba044254ce" translate="yes" xml:space="preserve">
          <source>to mean the end of options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f6176fc892667740702ecad505bf8a8b1dce01e" translate="yes" xml:space="preserve">
          <source>to move the cursor to the left, and then correct your mistake. Afterwards, you can move the cursor to the right with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92294b307e8554d04ff0fc137c5dec53338c9014" translate="yes" xml:space="preserve">
          <source>to obtain the list of possible hostname completions. When &lt;code&gt;HOSTFILE&lt;/code&gt; is unset, the hostname list is cleared.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee977806d7286510da8b9a7492ba58e2484c0ecc" translate="yes" xml:space="preserve">
          <source>token</source>
          <target state="translated">token</target>
        </trans-unit>
        <trans-unit id="ed9036eea7b829587f2b45d67e136514b051baee" translate="yes" xml:space="preserve">
          <source>translation, native languages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8b97fe57411e99f81433e85eb1bc9f739fb25a6" translate="yes" xml:space="preserve">
          <source>traps caught by the shell are reset to the values inherited from the shell&amp;rsquo;s parent, and traps ignored by the shell are ignored</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e8f613b81009f6361d6da9ba58642baf53e0977" translate="yes" xml:space="preserve">
          <source>unary minus and plus</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70f26813a8da92cd91547418ed502e131444f55e" translate="yes" xml:space="preserve">
          <source>unsets it. If &lt;var&gt;shopt_option&lt;/var&gt; is not supplied, the names and values of the shell options accepted by &lt;code&gt;shopt&lt;/code&gt; are printed on the standard output. If the invocation option is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cebcd8a7805f564498d8514fa7bb02f849b8a1da" translate="yes" xml:space="preserve">
          <source>using a publicly available</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a38d8cbd20d9932ba948efaa364bb62651d5ad4" translate="yes" xml:space="preserve">
          <source>v</source>
          <target state="translated">v</target>
        </trans-unit>
        <trans-unit id="eeac6ffc250d1b44e3d38bfb149861010af019ea" translate="yes" xml:space="preserve">
          <source>variable post-increment and post-decrement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d44a1b0a0892523274f93c725e7026fd5dc479c8" translate="yes" xml:space="preserve">
          <source>variable pre-increment and pre-decrement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ead6806eee714f33a573dd2dad070b52e7669a08" translate="yes" xml:space="preserve">
          <source>variable, shell</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="041db931fe250bda6263db19664a29230acbd610" translate="yes" xml:space="preserve">
          <source>variables, readline</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6795e2b14018ede48560807e46c1ba5e9f498efe" translate="yes" xml:space="preserve">
          <source>various process &lt;small&gt;ID&lt;/small&gt;s, including those of background jobs (see &lt;a href=&quot;lists#Lists&quot;&gt;Lists&lt;/a&gt;), the value of &lt;code&gt;$$&lt;/code&gt;, and the value of &lt;code&gt;$PPID&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e20de8c86b03fce756f44020e334524e1e43cf0" translate="yes" xml:space="preserve">
          <source>vertical tab</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="833da188871dde4c49e08271ff3deff524b7992c" translate="yes" xml:space="preserve">
          <source>vi</source>
          <target state="translated">vi</target>
        </trans-unit>
        <trans-unit id="223883960405d6589d6cd37f175c73b073c4180f" translate="yes" xml:space="preserve">
          <source>visible</source>
          <target state="translated">visible</target>
        </trans-unit>
        <trans-unit id="f13ba9568eae7ad261d443162cb54b96675471ba" translate="yes" xml:space="preserve">
          <source>was being ignored, the shell does not exit. A trap on &lt;code&gt;ERR&lt;/code&gt;, if set, is executed before the shell exits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4283059ddcd8101b4924cd85117e14b6112c4d96" translate="yes" xml:space="preserve">
          <source>when Bash is invoked as a login shell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3540c2119468409f7a0656327daed498bd8fbd3e" translate="yes" xml:space="preserve">
          <source>where each &lt;var&gt;value&lt;/var&gt; is of the form &lt;code&gt;[&lt;var&gt;subscript&lt;/var&gt;]=&lt;/code&gt;&lt;var&gt;string&lt;/var&gt;. Indexed array assignments do not require anything but &lt;var&gt;string&lt;/var&gt;. When assigning to indexed arrays, if the optional subscript is supplied, that index is assigned to; otherwise the index of the element assigned is the last index assigned to by the statement plus one. Indexing starts at zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="651395aaac4ba5a11d434cdc24e44cd02b9db388" translate="yes" xml:space="preserve">
          <source>while executing in a context where</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48b821737b0035c2ae7bbe464e547ee272eb86ba" translate="yes" xml:space="preserve">
          <source>will abort an incremental search and restore the original line. When the search is terminated, the history entry containing the search string becomes the current line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce10fb9b8e36ae34867dd3c12329e940426eb452" translate="yes" xml:space="preserve">
          <source>will display as output the traceroute invocation that finishes first. Adding the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5fbf30468c5e3f722ffe71ed0b53c66e0e7777e" translate="yes" xml:space="preserve">
          <source>will ensure that the output of &lt;code&gt;traceroute foss.org.my&lt;/code&gt; is displayed first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ab773a374072d6c49180cfef2b5530e6545680e" translate="yes" xml:space="preserve">
          <source>will evaluate the commands using the shell (since no explicit command is supplied as an argument), in blocks of ten shell jobs at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48e893297de7851eb8267f3f2d77dbac7c7a10c9" translate="yes" xml:space="preserve">
          <source>will terminate an incremental search.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da71913c64ab98f352dd4cb4fe77ed4c292aff2a" translate="yes" xml:space="preserve">
          <source>with a more compact syntax reminiscent of lambdas:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cbcd90adc4b192a87a625850b7f231caddf0eb3" translate="yes" xml:space="preserve">
          <source>word</source>
          <target state="translated">word</target>
        </trans-unit>
        <trans-unit id="dc043cc360beef9ea903043ce29786a18d054af7" translate="yes" xml:space="preserve">
          <source>word splitting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8171671e1e531caff99612d92f0d967d2298e88b" translate="yes" xml:space="preserve">
          <source>would not return &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd8b145269dd1d73b49365e1d85d27ab4eb5d5fb" translate="yes" xml:space="preserve">
          <source>xpg-echo-default</source>
          <target state="translated">xpg-echo-default</target>
        </trans-unit>
        <trans-unit id="15956685b6688781fbe72a2d34860a62ec8ec7a0" translate="yes" xml:space="preserve">
          <source>xtrace</source>
          <target state="translated">xtrace</target>
        </trans-unit>
        <trans-unit id="0af2364ce26d6091ecbb0d31834ebb1b55f3bb61" translate="yes" xml:space="preserve">
          <source>xxx.txt</source>
          <target state="translated">xxx.txt</target>
        </trans-unit>
        <trans-unit id="5d29acf3a7cc4d4499afb45fb2c9df7a9cf96af7" translate="yes" xml:space="preserve">
          <source>yanking text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eb416223e9e69e6bb8ee19793911ad1ad2027d8" translate="yes" xml:space="preserve">
          <source>|</source>
          <target state="translated">|</target>
        </trans-unit>
        <trans-unit id="ee4215f742fff7449e2d2fac5532d0b248649cf7" translate="yes" xml:space="preserve">
          <source>|&amp;amp;</source>
          <target state="translated">|&amp;amp;</target>
        </trans-unit>
        <trans-unit id="c65f37b2cb1ae26c89e9b4f26e2ca9e9cde4ae5b" translate="yes" xml:space="preserve">
          <source>||</source>
          <target state="translated">||</target>
        </trans-unit>
        <trans-unit id="fb3c6e4de85bd9eae26fdc63e75f10a7f39e850e" translate="yes" xml:space="preserve">
          <source>~</source>
          <target state="translated">~</target>
        </trans-unit>
        <trans-unit id="959d4ea52b09827faa0a5d7de05b0225bd2592a5" translate="yes" xml:space="preserve">
          <source>~+</source>
          <target state="translated">~+</target>
        </trans-unit>
        <trans-unit id="977014b1ee2a39f414ea34da42cafd40e3847427" translate="yes" xml:space="preserve">
          <source>~-</source>
          <target state="translated">~-</target>
        </trans-unit>
        <trans-unit id="d29f085f979bcf0b4b36ee00439b3aafaa300819" translate="yes" xml:space="preserve">
          <source>~/.bash_history</source>
          <target state="translated">~/.bash_history</target>
        </trans-unit>
        <trans-unit id="04de43cefc08d0c1b96fee391d0b84b85128074c" translate="yes" xml:space="preserve">
          <source>~/.bash_login</source>
          <target state="translated">~/.bash_login</target>
        </trans-unit>
        <trans-unit id="fb3c677ab204139e35049eaf20641552181f0ec2" translate="yes" xml:space="preserve">
          <source>~/.bash_logout</source>
          <target state="translated">~/.bash_logout</target>
        </trans-unit>
        <trans-unit id="522035954a969752992d5480574bba418488bace" translate="yes" xml:space="preserve">
          <source>~/.bash_profile</source>
          <target state="translated">~/.bash_profile</target>
        </trans-unit>
        <trans-unit id="29c02a319f6df076cb694a29a0b53747878f515e" translate="yes" xml:space="preserve">
          <source>~/.bashrc</source>
          <target state="translated">~/.bashrc</target>
        </trans-unit>
        <trans-unit id="e7d5043f9c0a627c729c0c0e06524ac335280063" translate="yes" xml:space="preserve">
          <source>~/.inputrc</source>
          <target state="translated">~/.inputrc</target>
        </trans-unit>
        <trans-unit id="ef0bed839170e28b3d97aaa30f755c4f95f7454f" translate="yes" xml:space="preserve">
          <source>~/.profile</source>
          <target state="translated">~/.profile</target>
        </trans-unit>
        <trans-unit id="5b87b04d387808649bb667094bc5e728e5ef799e" translate="yes" xml:space="preserve">
          <source>~/.sh_history</source>
          <target state="translated">~/.sh_history</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
