<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="en" datatype="htmlbody" original="octave">
    <body>
      <group id="octave">
        <trans-unit id="d8cb935bd696fba52ceb0acbe48e4e3aff3c8f73" translate="yes" xml:space="preserve">
          <source>The string is written to the file with no additional formatting. Use &lt;code&gt;fdisp&lt;/code&gt; instead to automatically append a newline character appropriate for the local machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdcf603d8f4548f603e553134aaf223621f400f8" translate="yes" xml:space="preserve">
          <source>The string is written verbatim to the standard output. Use &lt;code&gt;disp&lt;/code&gt; to automatically append a newline character appropriate for the local machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d81426525d2e27f04523b286cb21b46da40ddd01" translate="yes" xml:space="preserve">
          <source>The string must be in one of the following formats where a and b are real numbers and the complex unit is &lt;code&gt;'i'&lt;/code&gt; or &lt;code&gt;'j'&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f790ee92e81eb7bab3a0391efa2229a45beeb350" translate="yes" xml:space="preserve">
          <source>The string representation used by Octave is an array of characters, so internally the string &lt;code&gt;&quot;dddddddddd&quot;&lt;/code&gt; is actually a row vector of length 10 containing the value 100 in all places (100 is the ASCII code of &lt;code&gt;&quot;d&quot;&lt;/code&gt;). This lends itself to the obvious generalization to character matrices. Using a matrix of characters, it is possible to represent a collection of same-length strings in one variable. The convention used in Octave is that each row in a character matrix is a separate string, but letting each column represent a string is equally possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4dec5e13b2e4a9899d984ff77c21a0c66627fd9" translate="yes" xml:space="preserve">
          <source>The string to use for the help text of the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f0357cd0c45ef9a85aa49ea092e295d04833f3b" translate="yes" xml:space="preserve">
          <source>The structure &lt;var&gt;options&lt;/var&gt; can have the following field names. If a field name is not specified, the default value is used:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fce167b4f185646e4efdca9062bbc6c28bf4678b" translate="yes" xml:space="preserve">
          <source>The structure &lt;var&gt;s&lt;/var&gt; always contains these three fields:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3a578d85e8680807a6c4fa79a365330fb9d53d9" translate="yes" xml:space="preserve">
          <source>The structure must contain the fields &lt;code&gt;&quot;handle&quot;&lt;/code&gt;, &lt;code&gt;&quot;type&quot;&lt;/code&gt;, &lt;code&gt;&quot;children&quot;&lt;/code&gt;, &lt;code&gt;&quot;properties&quot;&lt;/code&gt;, and &lt;code&gt;&quot;special&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="071fec8f51538c9f8d58b707bcdfec79ee509004" translate="yes" xml:space="preserve">
          <source>The style to use for the plot can be defined with a line style &lt;var&gt;style&lt;/var&gt; of the same format as the &lt;code&gt;plot&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="defc2f90616739c78331a0dc859d222b7d97e01e" translate="yes" xml:space="preserve">
          <source>The style to use for the plot can be defined with a line style &lt;var&gt;style&lt;/var&gt; of the same format as the &lt;code&gt;plot&lt;/code&gt; command. If a marker is specified then the markers are drawn at the origin of the vectors (which are the grid points defined by &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt;). When a marker is specified, the arrowhead is not drawn. If the argument &lt;code&gt;&quot;filled&quot;&lt;/code&gt; is given then the markers are filled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46f2218573cc529b9daf8940f089ee62acbed084" translate="yes" xml:space="preserve">
          <source>The style to use for the plot can be defined with a line style &lt;var&gt;style&lt;/var&gt; of the same format as the &lt;code&gt;plot&lt;/code&gt; command. If a marker is specified then the markers are drawn at the origin of the vectors (which are the grid points defined by &lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;, &lt;var&gt;z&lt;/var&gt;). When a marker is specified, the arrowhead is not drawn. If the argument &lt;code&gt;&quot;filled&quot;&lt;/code&gt; is given then the markers are filled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e69b5228ec98932f9c88fb08909411da5b171487" translate="yes" xml:space="preserve">
          <source>The subscript &lt;var&gt;idx&lt;/var&gt; must be a structure array with fields &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebd882cdae4a1432551f63e32dcdd850b276a307" translate="yes" xml:space="preserve">
          <source>The subscripts are defined by the index vector &lt;var&gt;subs&lt;/var&gt;. The dimension is specified by &lt;var&gt;dim&lt;/var&gt;. If not given, it defaults to the first non-singleton dimension. The length of &lt;var&gt;subs&lt;/var&gt; must be equal to &lt;code&gt;size (&lt;var&gt;vals&lt;/var&gt;, &lt;var&gt;dim&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2738d8f0358bba0414e17d3259943d1c961429a8" translate="yes" xml:space="preserve">
          <source>The subscripts are defined by the rows of the matrix &lt;var&gt;subs&lt;/var&gt; and the values by &lt;var&gt;vals&lt;/var&gt;. Each row of &lt;var&gt;subs&lt;/var&gt; corresponds to one of the values in &lt;var&gt;vals&lt;/var&gt;. If &lt;var&gt;vals&lt;/var&gt; is a scalar, it will be used for each of the row of &lt;var&gt;subs&lt;/var&gt;. If &lt;var&gt;subs&lt;/var&gt; is a cell array of vectors, all vectors must be of the same length, and the subscripts in the &lt;var&gt;k&lt;/var&gt;th vector must correspond to the &lt;var&gt;k&lt;/var&gt;th dimension of the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1d7c9f091299f7d5240522941525c63dbcf791c" translate="yes" xml:space="preserve">
          <source>The supported property types are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3759abd9097afb7f24aca1f4c09e62f3bd86ed6" translate="yes" xml:space="preserve">
          <source>The surface mesh is plotted using shaded rectangles. The vertices of the rectangles [&lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;] are typically the output of &lt;code&gt;meshgrid&lt;/code&gt;. over a 2-D rectangular region in the x-y plane. &lt;var&gt;z&lt;/var&gt; determines the height above the plane of each vertex. If only a single &lt;var&gt;z&lt;/var&gt; matrix is given, then it is plotted over the meshgrid &lt;code&gt;&lt;var&gt;x&lt;/var&gt; = 1:columns (&lt;var&gt;z&lt;/var&gt;), &lt;var&gt;y&lt;/var&gt; = 1:rows (&lt;var&gt;z&lt;/var&gt;)&lt;/code&gt;. Thus, columns of &lt;var&gt;z&lt;/var&gt; correspond to different &lt;var&gt;x&lt;/var&gt; values and rows of &lt;var&gt;z&lt;/var&gt; correspond to different &lt;var&gt;y&lt;/var&gt; values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b46769f6b104ec8be6304814a4bfdace40f1cbda" translate="yes" xml:space="preserve">
          <source>The switch Statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a000ebc0540c2a1fa2d4f1bb6f8896b4ea004fb6" translate="yes" xml:space="preserve">
          <source>The symbol &lt;code&gt;~&lt;/code&gt; may be used as a placeholder in the list of lvalues, indicating that the corresponding return value should be ignored and not stored anywhere:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0455834c2f0ae49c31cadd564a4076068d7325a3" translate="yes" xml:space="preserve">
          <source>The symbol &lt;var&gt;ret-var&lt;/var&gt; is the name of the variable that will hold the value to be returned by the function. This variable must be defined before the end of the function body in order for the function to return a value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8d41ccd19673e226ad418333099b911b400fcc7" translate="yes" xml:space="preserve">
          <source>The system matrix acts like the conductivity &lt;code&gt;S&lt;/code&gt; in Ohm&amp;rsquo;s law &lt;code&gt;S * V = I&lt;/code&gt;. Based on the Dirichlet and Neumann boundary conditions, we are able to solve for the voltages at each vertex &lt;code&gt;V&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4340e678261da2ae0696ac57455b249900e4283" translate="yes" xml:space="preserve">
          <source>The tab width is specified by &lt;var&gt;tw&lt;/var&gt;, and defaults to eight.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe71437fad332115a6795a9a5ce07c1b04e570dc" translate="yes" xml:space="preserve">
          <source>The table below lists all of the sparse functions of Octave. Note that the names of the specific sparse forms of the functions are typically the same as the general versions with a &lt;em&gt;sp&lt;/em&gt; prefix. In the table below, and in the rest of this article, the specific sparse versions of functions are used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5ba6afc25060b21f2f5b95c9e6214c1e1081541" translate="yes" xml:space="preserve">
          <source>The table can be customized to display more or less information through the function &lt;code&gt;whos_line_format&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7c908f6d50f20d69b31bc367e1898f1fcf6316b" translate="yes" xml:space="preserve">
          <source>The text is defined by the string &lt;var&gt;s&lt;/var&gt;. If &lt;var&gt;s&lt;/var&gt; is a cell string organized as a row vector then each string of the cell array is written to a separate line. If &lt;var&gt;s&lt;/var&gt; is organized as a column vector then one string element of the cell array is placed for every mouse click.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c2096c13db5d95e57700bc34ea49a53d15578d1" translate="yes" xml:space="preserve">
          <source>The text object string content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e62ae6961e7bcaa29bfe5e8622f6c0cf9bfeae23" translate="yes" xml:space="preserve">
          <source>The text of the last error message</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c277092e5ffe5403c79898a8eede2c5a48eb0d0" translate="yes" xml:space="preserve">
          <source>The third and fourth arguments &lt;var&gt;g&lt;/var&gt; and &lt;var&gt;h&lt;/var&gt; are function handles pointing to functions that compute the equality constraints and the inequality constraints, respectively. If the problem does not have equality (or inequality) constraints, then use an empty matrix ([]) for &lt;var&gt;g&lt;/var&gt; (or &lt;var&gt;h&lt;/var&gt;). When supplied, these equality and inequality constraint functions must accept one vector argument and return a vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b02349905a85d2446dd0f7de0c81ebb008dfdee" translate="yes" xml:space="preserve">
          <source>The third and fourth arguments may also be 2-element cell arrays of function handles. The first element should point to the constraint function and the second should point to a function that computes the gradient of the constraint function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7195b4719f77b116da398a1a1c0edac3c80b38d3" translate="yes" xml:space="preserve">
          <source>The third and fourth arguments to &lt;code&gt;dasrt&lt;/code&gt; specify the initial condition of the states and their derivatives, and the fourth argument specifies a vector of output times at which the solution is desired, including the time corresponding to the initial condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d64fcb3e439188d55a4c16261d51085d7e637847" translate="yes" xml:space="preserve">
          <source>The third and most general form of the &lt;code&gt;if&lt;/code&gt; statement allows multiple decisions to be combined in a single statement. It looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24a4c0df0b808a20ba080137519e5a48feb220c0" translate="yes" xml:space="preserve">
          <source>The third argument is also optional and defines the plane of the rotation. If present, &lt;var&gt;plane&lt;/var&gt; is a two element vector containing two different valid dimensions of the matrix. When &lt;var&gt;plane&lt;/var&gt; is not given the first two non-singleton dimensions are used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3316908c5ebe0362b237dbbb7104323e8f938db" translate="yes" xml:space="preserve">
          <source>The third calling form of &lt;code&gt;drawnow&lt;/code&gt; is for debugging and is undocumented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fa92cab0022b515af585d0811574891a87808ec" translate="yes" xml:space="preserve">
          <source>The third form of the &lt;code&gt;fopen&lt;/code&gt; function returns information about the open file given its file id.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1ff0c6d96d5595fa4e80c7081bddfed8b293c22" translate="yes" xml:space="preserve">
          <source>The third optional argument &lt;var&gt;opt&lt;/var&gt; controls the behavior of the dialog. See &lt;code&gt;msgbox&lt;/code&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c1fba0c17d0f4cd869b5b4c57308b9c9a3af764" translate="yes" xml:space="preserve">
          <source>The third output &lt;var&gt;exitflag&lt;/var&gt; reports whether the algorithm succeeded and may take one of the following values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be21c86c3e0ec2732b9dc2176602d8ab26daa7cd" translate="yes" xml:space="preserve">
          <source>The third output &lt;var&gt;info&lt;/var&gt; reports whether the algorithm succeeded and may take one of the following values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2555a24f899c28f99431108b5d78d1c31465b431" translate="yes" xml:space="preserve">
          <source>The third way to create structures is the &lt;code&gt;struct&lt;/code&gt; command. &lt;code&gt;struct&lt;/code&gt; takes pairs of arguments, where the first argument in the pair is the fieldname to include in the structure and the second is a scalar or cell array, representing the values to include in the structure or structure array. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc1cbc3f7b94324fcf7e6b2faaf4b7f4f65ba95c" translate="yes" xml:space="preserve">
          <source>The time complexity of the expression &lt;em&gt;O(a*n^p)&lt;/em&gt;. This is a structure with fields &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5836c6d66c24029e6fc162eda2f01323f9b84c9" translate="yes" xml:space="preserve">
          <source>The time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d28b1820c21d788bf541e792a7751315825c2dd1" translate="yes" xml:space="preserve">
          <source>The title of the image as defined by the Exif standard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e01af0401babfdb6b6b103d569e910fb0203908" translate="yes" xml:space="preserve">
          <source>The tolerance &lt;var&gt;tol&lt;/var&gt; defaults to &lt;code&gt;sqrt (eps)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="020db12bc9cda5fe6b12ba4824100139d6dd62a5" translate="yes" xml:space="preserve">
          <source>The top level of the hierarchy and the parent of all figure objects. Use &lt;code&gt;groot&lt;/code&gt; to obtain the handle of the root graphics object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8f18f0280895cf4825cb560b5e8ff49d65953d7" translate="yes" xml:space="preserve">
          <source>The total number of elements in the matrix or array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a1e2954fb0ea009bd827fbd1a514306af525918" translate="yes" xml:space="preserve">
          <source>The total number of returned values is the product of the number of elements returned for each index component. In the example above, the total is 2*1*1 = 2 elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a30001a043cdcb2e8ac959391732bb011f2011d6" translate="yes" xml:space="preserve">
          <source>The trust region radius became excessively small.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26b9ec20825c14e84d161ea58253e1a371198ca0" translate="yes" xml:space="preserve">
          <source>The truth table for the xor operation is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ce0b7af9a0d01674c5d28383bc77e0118acbfbd" translate="yes" xml:space="preserve">
          <source>The try Statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52aa7313cfb4bf1b0b6c3b71de70f4a2c2aa2794" translate="yes" xml:space="preserve">
          <source>The two basic reasons to use sparse matrices are to reduce the memory usage and to not have to do calculations on zero elements. The two are closely related in that the computation time on a sparse matrix operator or function is roughly linear with the number of nonzero elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9618f4a4a63ba22192bb89074d7622fe30a7e308" translate="yes" xml:space="preserve">
          <source>The two definitions are related, for positive real values of &lt;var&gt;x&lt;/var&gt;, by &lt;code&gt;E_1&amp;nbsp;(-x)&amp;nbsp;=&amp;nbsp;-Ei&amp;nbsp;(x)&amp;nbsp;-&amp;nbsp;i*pi&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1560ec7416c3bc7b85993552ffc63904882e8eda" translate="yes" xml:space="preserve">
          <source>The type of machine you are using, and the operating system name and version number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad725f8fbec700b46ff946709d82c735f805d4ca" translate="yes" xml:space="preserve">
          <source>The type of symmetry to check may be specified with the additional input &lt;code&gt;&quot;nonskew&quot;&lt;/code&gt; (default) for regular Hermitian or &lt;code&gt;&quot;skew&quot;&lt;/code&gt; for skew-Hermitian.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="113dea0c1abc9393e2b92d3cb715124cf7063305" translate="yes" xml:space="preserve">
          <source>The type of symmetry to check may be specified with the additional input &lt;code&gt;&quot;nonskew&quot;&lt;/code&gt; (default) for regular symmetry or &lt;code&gt;&quot;skew&quot;&lt;/code&gt; for skew-symmetry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5204ceff27386ae6ed6133ef36c034b0518a0cea" translate="yes" xml:space="preserve">
          <source>The type of uicontrol created is specified by the &lt;var&gt;style&lt;/var&gt; property. If no style property is provided, a push button will be created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f94f32e2aa2b76134f40165cc09d9e4f13e41d02" translate="yes" xml:space="preserve">
          <source>The types and values of the input parameters &lt;var&gt;t&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt; depend on the input &lt;var&gt;flag&lt;/var&gt; that is of type string. Valid values of &lt;var&gt;flag&lt;/var&gt; are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8adbd269c331c77c96db37b97c6c4f211c8deae2" translate="yes" xml:space="preserve">
          <source>The typical way to extract a matrix or array from the input arguments of &lt;code&gt;DEFUN_DLD&lt;/code&gt; function is as follows</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7f01dd63e93e2db097948ad9ee913627c8dd5d8" translate="yes" xml:space="preserve">
          <source>The ui* series of functions work best with the &lt;code&gt;qt&lt;/code&gt; graphics toolkit, although some functionality is available with the &lt;code&gt;fltk&lt;/code&gt; toolkit. There is no support for the &lt;code&gt;gnuplot&lt;/code&gt; toolkit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51e7c0cae6c48943a280e888819155962b0bd492" translate="yes" xml:space="preserve">
          <source>The underlying Fortran code should use the &lt;code&gt;XSTOPX&lt;/code&gt; function to replace the Fortran &lt;code&gt;STOP&lt;/code&gt; function. &lt;code&gt;XSTOPX&lt;/code&gt; uses the Octave exception handler to treat failing cases in the Fortran code explicitly. Note that Octave supplies its own replacement &lt;small&gt;BLAS&lt;/small&gt;&lt;code&gt;XERBLA&lt;/code&gt; function, which uses &lt;code&gt;XSTOPX&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b88f6c3542660147f24745a70df859b574d5c9f" translate="yes" xml:space="preserve">
          <source>The unit used to compute the &lt;code&gt;paperposition&lt;/code&gt; property. For &lt;code&gt;paperunits&lt;/code&gt; set to &lt;code&gt;&quot;pixels&quot;&lt;/code&gt;, the conversion between physical units (ex: &lt;code&gt;&quot;inches&quot;&lt;/code&gt;) and &lt;code&gt;&quot;pixels&quot;&lt;/code&gt; is dependent on the &lt;code&gt;screenpixelsperinch&lt;/code&gt; property of the root object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fadea35915740be5ea17b31b04b8311ea21f8c0c" translate="yes" xml:space="preserve">
          <source>The unit used to compute the &lt;code&gt;position&lt;/code&gt; and &lt;code&gt;outerposition&lt;/code&gt; properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60bcf22fd0ac0eed7dd0721b4a1b44c720fca343" translate="yes" xml:space="preserve">
          <source>The unscaled covariance matrix, formally equal to the inverse of &lt;var&gt;x&amp;rsquo;&lt;/var&gt;*&lt;var&gt;x&lt;/var&gt;, but computed in a way minimizing roundoff error propagation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c0b1d3083ad9ca2a7e0b82183bf71fb74340068" translate="yes" xml:space="preserve">
          <source>The unwind_protect Statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76c55179bfcdb299275b3656e06ab94a12a99b03" translate="yes" xml:space="preserve">
          <source>The upper Cholesky factor &lt;var&gt;R&lt;/var&gt; is computed by using the upper triangular part of matrix &lt;var&gt;A&lt;/var&gt; and is defined by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1890c9701c39eef1aa6b83be16efe7e9d38cd499" translate="yes" xml:space="preserve">
          <source>The use of the &lt;code&gt;maybe_compress&lt;/code&gt; function should be avoided if possible as it will slow the creation of the matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="486810d1bef8c37ffa8f90b03cb329153a311618" translate="yes" xml:space="preserve">
          <source>The user can directly create the sparse matrix within an oct-file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44ac378cb2a3bf5b9d40bd2c7fa0d9f1fa750b24" translate="yes" xml:space="preserve">
          <source>The user can force the type of the matrix with the &lt;code&gt;matrix_type&lt;/code&gt; function. This overcomes the cost of discovering the type of the matrix. However, it should be noted that identifying the type of the matrix incorrectly will lead to unpredictable results, and so &lt;code&gt;matrix_type&lt;/code&gt; should be used with care.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="933d42a738b2099466f4c26608378ca0e112f281" translate="yes" xml:space="preserve">
          <source>The user can select points on a plot with the &lt;code&gt;ginput&lt;/code&gt; function or select the position at which to place text on the plot with the &lt;code&gt;gtext&lt;/code&gt; function using the mouse.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="133defcf2a8cc85d6e89379280e237838c74e0ae" translate="yes" xml:space="preserve">
          <source>The user name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff955a1de3f03a21fca8ad8b7504d2f3da2a59f4" translate="yes" xml:space="preserve">
          <source>The username of the current user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7f941f8364bdda7976f96778d1a2f6cd046401b" translate="yes" xml:space="preserve">
          <source>The uses of &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; are further explained in &lt;a href=&quot;graphics-objects#XREFget&quot;&gt;get&lt;/a&gt;, &lt;a href=&quot;graphics-objects#XREFset&quot;&gt;set&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3879d4dd1203ae34ab58ae828a21583678af3718" translate="yes" xml:space="preserve">
          <source>The validity of this formula can easily be checked by expanding the binomial coefficients in both formulas as factorials. It can be derived more directly via the theory of Cauchy matrices. See J. W. Demmel,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfaa81e76c370c75c591c2d91156e8dc305309b0" translate="yes" xml:space="preserve">
          <source>The value &lt;var&gt;n&lt;/var&gt; must be a real non-negative integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="987eae05835fc50217ab9ec5a201d8873975cf0d" translate="yes" xml:space="preserve">
          <source>The value &lt;var&gt;val&lt;/var&gt; may be modified to fit within the range of the new type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="217ed1d8201a3760885ef024ee2d49ba760c6d6c" translate="yes" xml:space="preserve">
          <source>The value for the &lt;code&gt;papersize&lt;/code&gt;, and &lt;code&gt;paperposition&lt;/code&gt; properties depends upon &lt;code&gt;paperorientation&lt;/code&gt;. The horizontal and vertical values for &lt;code&gt;papersize&lt;/code&gt; and &lt;code&gt;paperposition&lt;/code&gt; reverse order when &lt;code&gt;paperorientation&lt;/code&gt; is switched between &lt;code&gt;&quot;portrait&quot;&lt;/code&gt; and &lt;code&gt;&quot;landscape&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca30babe0da725344857665459f7bd6f3883e78c" translate="yes" xml:space="preserve">
          <source>The value must be &lt;code&gt;&quot;non-modal&quot;&lt;/code&gt;, &lt;code&gt;&quot;modal&quot;&lt;/code&gt;, or &lt;code&gt;&quot;replace&quot;&lt;/code&gt;. See above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f10c1cc5436e834c29308d925fbd8c9cf65a09b1" translate="yes" xml:space="preserve">
          <source>The value must be a single character and the default is &lt;code&gt;&quot; &quot;&lt;/code&gt; (a single space). For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11865d873c7ce3cac98ac13067f50829858a6662" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;history_control&lt;/code&gt; is a colon-separated list of values controlling how commands are saved on the history list. If the list of values includes &lt;code&gt;ignorespace&lt;/code&gt;, lines which begin with a space character are not saved in the history list. A value of &lt;code&gt;ignoredups&lt;/code&gt; causes lines matching the previous history entry to not be saved. A value of &lt;code&gt;ignoreboth&lt;/code&gt; is shorthand for &lt;code&gt;ignorespace&lt;/code&gt; and &lt;code&gt;ignoredups&lt;/code&gt;. A value of &lt;code&gt;erasedups&lt;/code&gt; causes all previous lines matching the current line to be removed from the history list before that line is saved. Any value not in the above list is ignored. If &lt;code&gt;history_control&lt;/code&gt; is the empty string, all commands are saved on the history list, subject to the value of &lt;code&gt;history_save&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b70a6f050d3664cfcadad45b2d85f7af1a189ffc" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;nargin&lt;/code&gt; is not affected by using this declaration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2560ed14f20c168583e3d5ee6a83cc5479a7fa9" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;octave_core_file_options&lt;/code&gt; should follow the same format as the options for the &lt;code&gt;save&lt;/code&gt; function. The default value is Octave&amp;rsquo;s binary format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a0edac6314484525401f004fcf21d540e424949" translate="yes" xml:space="preserve">
          <source>The value of &lt;var&gt;c&lt;/var&gt; specifies the number of delimiters to prepend to each line of data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d41cbdf4d04fb99498b993acc38ddf77a10e1e0" translate="yes" xml:space="preserve">
          <source>The value of &lt;var&gt;d&lt;/var&gt; is simply the mean of &lt;var&gt;dd&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6a8eed2f72af66c2ea117d16634b3838d1c168c" translate="yes" xml:space="preserve">
          <source>The value of &lt;var&gt;mode&lt;/var&gt; is assumed to be returned from a call to &lt;code&gt;stat&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe5fcc19e2496658d8b7bf06a6fc3a1e59d190e4" translate="yes" xml:space="preserve">
          <source>The value of &lt;var&gt;nu&lt;/var&gt; is the dimension of the span of the Krylov subspace (based on &lt;var&gt;eps1&lt;/var&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6badb163d678b9d7ea64016d920aeca40506cdc7" translate="yes" xml:space="preserve">
          <source>The value of &lt;var&gt;ok&lt;/var&gt; is 1 if the user closed the box with the OK button, otherwise it is 0 and &lt;var&gt;sel&lt;/var&gt; is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ddc82eb372ba285482f1959574e9340a3077262" translate="yes" xml:space="preserve">
          <source>The value of &lt;var&gt;path&lt;/var&gt; should be a colon-separated list of directories in the format described for &lt;code&gt;path&lt;/code&gt;. If no file is found, return an empty character string. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6159679474a3cfb785e1a0e13e6aca3afa146eb0" translate="yes" xml:space="preserve">
          <source>The value of &lt;var&gt;r&lt;/var&gt; specifies the number of delimiter-only lines to add to the start of the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaf379ba4831db17018b5da34d82fb0e8bbb64ec" translate="yes" xml:space="preserve">
          <source>The value of &lt;var&gt;u&lt;/var&gt; may be complex. The value of &lt;var&gt;m&lt;/var&gt; must be 0 &amp;le; &lt;var&gt;m&lt;/var&gt; &amp;le; 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b27bd3d4a0750f7dc10fd97135cd75cffe28b4c1" translate="yes" xml:space="preserve">
          <source>The value of a persistent variable is kept in memory until it is explicitly cleared. Assuming that the implementation of &lt;code&gt;count_calls&lt;/code&gt; is saved on disk, we get the following behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d13b3ab437a2f13ce5276ab7aca8f547dfc0dd6" translate="yes" xml:space="preserve">
          <source>The value of a polynomial represented by the vector &lt;var&gt;c&lt;/var&gt; can be evaluated at the point &lt;var&gt;x&lt;/var&gt; very easily, as the following example shows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2cd93da190b89bfd6fce36f02d511cf8d7ebf4c" translate="yes" xml:space="preserve">
          <source>The value of individual keys can be set with &lt;code&gt;spparms (&lt;var&gt;key&lt;/var&gt;, &lt;var&gt;val&lt;/var&gt;)&lt;/code&gt;. The default values can be restored with the special keyword &lt;code&gt;&quot;default&quot;&lt;/code&gt;. The special keyword &lt;code&gt;&quot;tight&quot;&lt;/code&gt; can be used to set the mmd solvers to attempt a sparser solution at the potential cost of longer running time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9888fbe6ea02af30ade4d41d63e06da6a98d504" translate="yes" xml:space="preserve">
          <source>The value of this property can then be retrieved as a string by a Java object or in Octave:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39a8526875e22862a90371678f6218a0b89dabc4" translate="yes" xml:space="preserve">
          <source>The value returned in &lt;var&gt;info&lt;/var&gt; may be one of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fcd411f2d76bf5edaeac7ab5a3087121d53c600" translate="yes" xml:space="preserve">
          <source>The value where the base of the area plot is drawn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03db772d1c03de14dd99076830558058d72fd555" translate="yes" xml:space="preserve">
          <source>The values &lt;var&gt;n&lt;/var&gt; for which the expression was calculated &lt;strong&gt;AND&lt;/strong&gt; the execution time was greater than zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e95950eca2cf40f59b9cd37ebe0a3de539e19d5" translate="yes" xml:space="preserve">
          <source>The values &lt;var&gt;y&lt;/var&gt; and &lt;var&gt;c&lt;/var&gt; can be derived by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f48fc2552230b0460e5714873efe32f54fde993" translate="yes" xml:space="preserve">
          <source>The values in &lt;var&gt;c&lt;/var&gt; are scaled to span the range of the current colormap. Limits may be placed on the color axis by the command &lt;code&gt;caxis&lt;/code&gt;, or by setting the &lt;code&gt;clim&lt;/code&gt; property of the parent axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d784a318a0365ec6426f6a5480c3c888c0f74ee0" translate="yes" xml:space="preserve">
          <source>The values of the polynomial for each value of &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a196ed89c6a9030351dfa64f851941d32e033084" translate="yes" xml:space="preserve">
          <source>The values of the vector field to plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="712f143fe2ecc6f4e2bf349e09971d6a6dc633e4" translate="yes" xml:space="preserve">
          <source>The variable &lt;code&gt;&lt;var&gt;pos&lt;/var&gt;(1:2)&lt;/code&gt; defines the lower left-hand corner of the patch and &lt;code&gt;&lt;var&gt;pos&lt;/var&gt;(3:4)&lt;/code&gt; defines its width and height. By default, the value of &lt;var&gt;pos&lt;/var&gt; is &lt;code&gt;[0, 0, 1, 1]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee33085a7be59b0b90b275f89e41f6eef168e5a0" translate="yes" xml:space="preserve">
          <source>The variable &lt;var&gt;curv&lt;/var&gt; defines the curvature of the sides of the rectangle and may be a scalar or two-element vector with values between 0 and 1. A value of 0 represents no curvature of the side, whereas a value of 1 means that the side is entirely curved into the arc of a circle. If &lt;var&gt;curv&lt;/var&gt; is a two-element vector, then the first element is the curvature along the x-axis of the patch and the second along y-axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5effbd7e360435b9761b8b011561ea91da0ce20" translate="yes" xml:space="preserve">
          <source>The variable &lt;var&gt;k&lt;/var&gt; is the constant of integration, which by default is set to zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cb40fca01bfb5bb2d6f518e21e509a6a1d40a74" translate="yes" xml:space="preserve">
          <source>The variable &lt;var&gt;rootkey&lt;/var&gt; must be a string with a valid root key identifier:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2e77dabc2f5b26fb9dd32b36133ada17755b089" translate="yes" xml:space="preserve">
          <source>The variable &lt;var&gt;s&lt;/var&gt; is accepted for compatibility but is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9479566f6af39dde47954d13fa03e6d7716e6906" translate="yes" xml:space="preserve">
          <source>The variable &lt;var&gt;success&lt;/var&gt; is 1 if the download was successful, otherwise it is 0 in which case &lt;var&gt;message&lt;/var&gt; contains an error message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20822c6dd4af2da5b5764b7a28bacde24c60932d" translate="yes" xml:space="preserve">
          <source>The variable &lt;var&gt;x&lt;/var&gt; must be a strictly monotonic vector (either increasing or decreasing) of length &lt;var&gt;n&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0c83ebe4a804185f26c2ec9bb975b44111c0f8a" translate="yes" xml:space="preserve">
          <source>The variable &lt;var&gt;x&lt;/var&gt; must be a vector of length &lt;var&gt;n&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bf6e16002f8115e7c1af465625ba03491c13ca0" translate="yes" xml:space="preserve">
          <source>The variable &lt;var&gt;y&lt;/var&gt; must be in the interval [0,1], while &lt;var&gt;a&lt;/var&gt; and &lt;var&gt;b&lt;/var&gt; must be real and strictly positive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1ee684f133e88648b3dc8d4fd362350327687a0" translate="yes" xml:space="preserve">
          <source>The variables &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt; define the vertex pairs, and must therefore have the same shape. They can be either vectors or arrays. If they are arrays then the columns of &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt; are treated separately and an area returned for each.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f557fc738fa4e999bb41037f46ac3513ff27a24e" translate="yes" xml:space="preserve">
          <source>The variance is defined as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="383f48dabdd5b59824f4c792f0f4fdaa2194bac1" translate="yes" xml:space="preserve">
          <source>The variant with no input and output argument is an alias for the function &lt;code&gt;OCTAVE_VERSION&lt;/code&gt; provided for compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="712b62bd841673aa2e7546d29f733a43a1bf9811" translate="yes" xml:space="preserve">
          <source>The vector &lt;var&gt;C&lt;/var&gt; specifies the color of each tetrahedron as an index into the current colormap. The default value is 1:m where m is the number of tetrahedrons; the indices are scaled to map to the full range of the colormap. If there are more tetrahedrons than colors in the colormap then the values in &lt;var&gt;C&lt;/var&gt; are cyclically repeated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d82493b5b4a87c99d1dfed44a515f1a9231254cb" translate="yes" xml:space="preserve">
          <source>The vector &lt;var&gt;c&lt;/var&gt; specifies the autocovariances &lt;code&gt;[gamma_0, &amp;hellip;, gamma_t]&lt;/code&gt; from lag 0 to &lt;var&gt;t&lt;/var&gt;, &lt;var&gt;oldphi&lt;/var&gt; specifies the coefficients based on &lt;var&gt;c&lt;/var&gt;(&lt;var&gt;t&lt;/var&gt;-1) and &lt;var&gt;oldv&lt;/var&gt; specifies the corresponding error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee45235748cdc5458fbe6de11cad0931bd45dc97" translate="yes" xml:space="preserve">
          <source>The vector &lt;var&gt;t&lt;/var&gt; provides an upper limit on the length of the integration. If the stopping condition is met, the vector &lt;var&gt;t_out&lt;/var&gt; will be shorter than &lt;var&gt;t&lt;/var&gt;, and the final element of &lt;var&gt;t_out&lt;/var&gt; will be the point at which the stopping condition was met, and may not correspond to any element of the vector &lt;var&gt;t&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="889e674a23e5a725c6b09cf10b575fef201732b9" translate="yes" xml:space="preserve">
          <source>The vector argument specifying limits is optional, and additional string arguments may be used to specify various axis properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77f0db12997d81f43c39f216670fef21b3112826" translate="yes" xml:space="preserve">
          <source>The vector specifies the coordinates (x0,y0) of the origin of the annotation object, its width, and its height. The width and height may be negative, depending on the orientation of the object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2402be7f90f4f452f0911fd8d544a02b9bb06d98" translate="yes" xml:space="preserve">
          <source>The version is first split into numeric and character portions and then the parts are padded to be the same length (i.e., &lt;code&gt;&quot;1.1&quot;&lt;/code&gt; would be padded to be &lt;code&gt;&quot;1.1.0&quot;&lt;/code&gt; when being compared with &lt;code&gt;&quot;1.1.1&quot;&lt;/code&gt;, and separately, the character parts of the strings are padded with nulls).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee912b8cbf5cfa1d2a9396f359a036398ce4e546" translate="yes" xml:space="preserve">
          <source>The version of Octave. You can get this by noting the version number that is printed when Octave starts, or running it with the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fe743faeb5ea6c705519f07347da952639e73c3" translate="yes" xml:space="preserve">
          <source>The versions listed below are the versions used for testing. If newer versions of these packages are available, you should try to use them, although there may be some differences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43607882fc94097837d7475698a05ebd85e7c18f" translate="yes" xml:space="preserve">
          <source>The vertex normals &lt;var&gt;vn&lt;/var&gt; are calculated from the gradient of the 3-dimensional array &lt;var&gt;val&lt;/var&gt; (size: lxmxn) containing the data for an isosurface geometry. The normals point towards smaller values in &lt;var&gt;val&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9415437c4fe5edb7588071c3a34c6acea36c5a6d" translate="yes" xml:space="preserve">
          <source>The waitbar is filled to fraction &lt;var&gt;frac&lt;/var&gt; which must be in the range [0, 1].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54b516272b5a69fa1a5ae89488462d7efa26b186" translate="yes" xml:space="preserve">
          <source>The warning for division by zero (and in fact all warnings) are disabled in the &lt;code&gt;unwinddemo&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c247a07c2b56c5e11198047fefa4e7ecab63606" translate="yes" xml:space="preserve">
          <source>The warning id &lt;code&gt;Octave:language-extension&lt;/code&gt; can be enabled to warn about this usage. See &lt;a href=&quot;issuing-warnings#XREFwarning_005fids&quot;&gt;warning_ids&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f15f28629b8cabc6cf49c64afff2f08344750dd1" translate="yes" xml:space="preserve">
          <source>The warning message may have multiple lines separated by newline characters (&quot;\n&quot;), or it may be a cellstr array with one element for each line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cec88cd9ae39731a1a3b954b4757f1cdffe38e2a" translate="yes" xml:space="preserve">
          <source>The way to use a function is with a &lt;em&gt;function call&lt;/em&gt; expression, which consists of the function name followed by a list of &lt;em&gt;arguments&lt;/em&gt; in parentheses. The arguments are expressions which give the raw materials for the calculation that the function will do. When there is more than one argument, they are separated by commas. If there are no arguments, you can omit the parentheses, but it is a good idea to include them anyway, to clearly indicate that a function call was intended. Here are some examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efae1904c240d3de25a8d0d556af95aec2f4ef59" translate="yes" xml:space="preserve">
          <source>The while Statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9afdcc17b54a70ad06bc509d67eb44b6feb569b6" translate="yes" xml:space="preserve">
          <source>The width of the stem. (Default: 0.5)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7738275b9740c237517aa877fb16b1edbcec8880" translate="yes" xml:space="preserve">
          <source>The wildcard characters &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, and &lt;code&gt;?&lt;/code&gt; are replaced with wildcards that are appropriate for a regular expression. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="265fd67b21492e2d095e2bb4319bbe615bea860f" translate="yes" xml:space="preserve">
          <source>The window is truncated at the beginning and end of the array to exclude elements for which there is no source data. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = &lt;var&gt;fcn&lt;/var&gt; (&lt;var&gt;x&lt;/var&gt;(1:2))&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = &lt;var&gt;fcn&lt;/var&gt; (&lt;var&gt;x&lt;/var&gt;(end-1:end))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ead8bdae2d358cccd162e33a04ad2d916e2bd474" translate="yes" xml:space="preserve">
          <source>The window is truncated at the beginning and end of the array to exclude elements for which there is no source data. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = mad (&lt;var&gt;x&lt;/var&gt;(1:2))&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = mad (&lt;var&gt;x&lt;/var&gt;(end-1:end))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f314a6a7b54e7bcd1af1dc02c75c80544787640" translate="yes" xml:space="preserve">
          <source>The window is truncated at the beginning and end of the array to exclude elements for which there is no source data. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = max (&lt;var&gt;x&lt;/var&gt;(1:2))&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = max (&lt;var&gt;x&lt;/var&gt;(end-1:end))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8edfa17fa6cd0ef76a40f0245157efbbdc18b8e" translate="yes" xml:space="preserve">
          <source>The window is truncated at the beginning and end of the array to exclude elements for which there is no source data. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = mean (&lt;var&gt;x&lt;/var&gt;(1:2))&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = mean (&lt;var&gt;x&lt;/var&gt;(end-1:end))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0497d66c276c106cd4d9573279c3bbec9b00702c" translate="yes" xml:space="preserve">
          <source>The window is truncated at the beginning and end of the array to exclude elements for which there is no source data. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = min (&lt;var&gt;x&lt;/var&gt;(1:2))&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = min (&lt;var&gt;x&lt;/var&gt;(end-1:end))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85709db97ca1139b6a108fdc232abbf377595aba" translate="yes" xml:space="preserve">
          <source>The window is truncated at the beginning and end of the array to exclude elements for which there is no source data. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = movmedian (&lt;var&gt;x&lt;/var&gt;(1:2))&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = movmedian (&lt;var&gt;x&lt;/var&gt;(end-1:end))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aceb82057c8605a86d51975c7003662145976d5" translate="yes" xml:space="preserve">
          <source>The window is truncated at the beginning and end of the array to exclude elements for which there is no source data. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = movprod (&lt;var&gt;x&lt;/var&gt;(1:2))&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = movprod (&lt;var&gt;x&lt;/var&gt;(end-1:end))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e50f690dc61725c755d31a70a70cd58169b757f1" translate="yes" xml:space="preserve">
          <source>The window is truncated at the beginning and end of the array to exclude elements for which there is no source data. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = movstd (&lt;var&gt;x&lt;/var&gt;(1:2))&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = movstd (&lt;var&gt;x&lt;/var&gt;(end-1:end))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04704464256e45546a548e64c371098b04932848" translate="yes" xml:space="preserve">
          <source>The window is truncated at the beginning and end of the array to exclude elements for which there is no source data. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = movsum (&lt;var&gt;x&lt;/var&gt;(1:2))&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = movsum (&lt;var&gt;x&lt;/var&gt;(end-1:end))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e356190dfcfa579c2322589c8ae00cbbf1292718" translate="yes" xml:space="preserve">
          <source>The window is truncated at the beginning and end of the array to exclude elements for which there is no source data. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = var (&lt;var&gt;x&lt;/var&gt;(1:2))&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = var (&lt;var&gt;x&lt;/var&gt;(end-1:end))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="337005695f34e07da0e6502d3472f7c1ee82ef4d" translate="yes" xml:space="preserve">
          <source>The window is wrapped so that any missing data elements are taken from the other side of the data. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = &lt;var&gt;fcn&lt;/var&gt; ([&lt;var&gt;x&lt;/var&gt;(end), &lt;var&gt;x&lt;/var&gt;(1:2)])&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = &lt;var&gt;fcn&lt;/var&gt; ([&lt;var&gt;x&lt;/var&gt;(end-1:end), &lt;var&gt;x&lt;/var&gt;(1)])&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b4b4c5f5cf8f378ce799132473024ac77f5defe" translate="yes" xml:space="preserve">
          <source>The window is wrapped so that any missing data elements are taken from the other side of the data. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = mad ([&lt;var&gt;x&lt;/var&gt;(end), &lt;var&gt;x&lt;/var&gt;(1:2)])&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = mad ([&lt;var&gt;x&lt;/var&gt;(end-1:end), &lt;var&gt;x&lt;/var&gt;(1)])&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf5ade5299c09cf8ab3fbc80ced530c325c85e66" translate="yes" xml:space="preserve">
          <source>The window is wrapped so that any missing data elements are taken from the other side of the data. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = max ([&lt;var&gt;x&lt;/var&gt;(end), &lt;var&gt;x&lt;/var&gt;(1:2)])&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = max ([&lt;var&gt;x&lt;/var&gt;(end-1:end), &lt;var&gt;x&lt;/var&gt;(1)])&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff4b7dff5c24acb56ff24fa4597036de3a7a7f01" translate="yes" xml:space="preserve">
          <source>The window is wrapped so that any missing data elements are taken from the other side of the data. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = mean ([&lt;var&gt;x&lt;/var&gt;(end), &lt;var&gt;x&lt;/var&gt;(1:2)])&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = mean ([&lt;var&gt;x&lt;/var&gt;(end-1:end), &lt;var&gt;x&lt;/var&gt;(1)])&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4ff8e1a3e9c2eb9e3a8d7cd99632c6f10a23aef" translate="yes" xml:space="preserve">
          <source>The window is wrapped so that any missing data elements are taken from the other side of the data. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = min ([&lt;var&gt;x&lt;/var&gt;(end), &lt;var&gt;x&lt;/var&gt;(1:2)])&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = min ([&lt;var&gt;x&lt;/var&gt;(end-1:end), &lt;var&gt;x&lt;/var&gt;(1)])&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66d2fdbd7ebf1c2a4021180594127639c85e777e" translate="yes" xml:space="preserve">
          <source>The window is wrapped so that any missing data elements are taken from the other side of the data. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = movmedian ([&lt;var&gt;x&lt;/var&gt;(end), &lt;var&gt;x&lt;/var&gt;(1:2)])&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = movmedian ([&lt;var&gt;x&lt;/var&gt;(end-1:end), &lt;var&gt;x&lt;/var&gt;(1)])&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8551dc23b83c53cd9b791d61b399a1815bf01ffd" translate="yes" xml:space="preserve">
          <source>The window is wrapped so that any missing data elements are taken from the other side of the data. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = movprod ([&lt;var&gt;x&lt;/var&gt;(end), &lt;var&gt;x&lt;/var&gt;(1:2)])&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = movprod ([&lt;var&gt;x&lt;/var&gt;(end-1:end), &lt;var&gt;x&lt;/var&gt;(1)])&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbfdf87afb6362996f2a3e535b281ffab7eba709" translate="yes" xml:space="preserve">
          <source>The window is wrapped so that any missing data elements are taken from the other side of the data. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = movstd ([&lt;var&gt;x&lt;/var&gt;(end), &lt;var&gt;x&lt;/var&gt;(1:2)])&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = movstd ([&lt;var&gt;x&lt;/var&gt;(end-1:end), &lt;var&gt;x&lt;/var&gt;(1)])&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a996789faeaed440ba1759f0f22b8312d63b1d91" translate="yes" xml:space="preserve">
          <source>The window is wrapped so that any missing data elements are taken from the other side of the data. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = movsum ([&lt;var&gt;x&lt;/var&gt;(end), &lt;var&gt;x&lt;/var&gt;(1:2)])&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = movsum ([&lt;var&gt;x&lt;/var&gt;(end-1:end), &lt;var&gt;x&lt;/var&gt;(1)])&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4723edde62a9609f9cbbada572562d13b9d8569" translate="yes" xml:space="preserve">
          <source>The window is wrapped so that any missing data elements are taken from the other side of the data. For example, with a window of length 3, &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(1) = var ([&lt;var&gt;x&lt;/var&gt;(end), &lt;var&gt;x&lt;/var&gt;(1:2)])&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;y&lt;/var&gt;(end) = var ([&lt;var&gt;x&lt;/var&gt;(end-1:end), &lt;var&gt;x&lt;/var&gt;(1)])&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1af586283478033dc4945ae38514e333a7eb0acf" translate="yes" xml:space="preserve">
          <source>The window name, e.g., &lt;code&gt;&quot;triangle&quot;&lt;/code&gt; or &lt;code&gt;&quot;rectangle&quot;&lt;/code&gt; is used to search for a function called &lt;code&gt;&lt;var&gt;win&lt;/var&gt;_lw&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed037e71c66dc1e9250e2872cf4553224c6e1541" translate="yes" xml:space="preserve">
          <source>The window name, e.g., &lt;code&gt;&quot;triangle&quot;&lt;/code&gt; or &lt;code&gt;&quot;rectangle&quot;&lt;/code&gt; is used to search for a function called &lt;code&gt;&lt;var&gt;win&lt;/var&gt;_sw&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8df05b212dee45c9da4c449f22ac9c05318e0f4f" translate="yes" xml:space="preserve">
          <source>The window names can be passed as strings or by the &lt;var&gt;win_type&lt;/var&gt; number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f16206783ccac98dcbce0ceef34d6668855fedd" translate="yes" xml:space="preserve">
          <source>The window style of a figure. One of the following values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f453e84da2fec824ab9a7c84c3eecd535ce844cb" translate="yes" xml:space="preserve">
          <source>The wireframe mesh is plotted using rectangles. The vertices of the rectangles [&lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;] are typically the output of &lt;code&gt;meshgrid&lt;/code&gt;. over a 2-D rectangular region in the x-y plane. &lt;var&gt;z&lt;/var&gt; determines the height above the plane of each vertex. If only a single &lt;var&gt;z&lt;/var&gt; matrix is given, then it is plotted over the meshgrid &lt;code&gt;&lt;var&gt;x&lt;/var&gt; = 1:columns (&lt;var&gt;z&lt;/var&gt;), &lt;var&gt;y&lt;/var&gt; = 1:rows (&lt;var&gt;z&lt;/var&gt;)&lt;/code&gt;. Thus, columns of &lt;var&gt;z&lt;/var&gt; correspond to different &lt;var&gt;x&lt;/var&gt; values and rows of &lt;var&gt;z&lt;/var&gt; correspond to different &lt;var&gt;y&lt;/var&gt; values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eb3e560b2f2428aa15ebd70e05c4ef13ad26212" translate="yes" xml:space="preserve">
          <source>The word is parsed as a &quot;quoted string&quot;. If the first character of the string is a double quote (&quot;) then the string includes everything until a matching double quote&amp;mdash;including whitespace, delimiters, and end-of-line characters. If a pair of consecutive double quotes appears in the input, it is replaced in the output by a single double quote. For examples, the input &quot;He said &quot;&quot;Hello&quot;&quot;&quot; would return the value &amp;rsquo;He said &quot;Hello&quot;&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12418b6549dfa5072acea0b8cd8ff6eff0f2d06c" translate="yes" xml:space="preserve">
          <source>The word is parsed as a number and converted to double.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48a6f0a0afa203e91666c86669c0894fc9514d94" translate="yes" xml:space="preserve">
          <source>The word is parsed as a number and converted to int32.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="248f11b9fbaf3f2841cf281340efa1e45f9d1462" translate="yes" xml:space="preserve">
          <source>The word is parsed as a number and converted to int8, int16, int32, or int64. If no size is specified then int32 is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57c9c1f648f8cafd5c7545bddf01209fc988d236" translate="yes" xml:space="preserve">
          <source>The word is parsed as a number and converted to single (float).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1822f8a66c09e956db4acd6c8070f64003a36469" translate="yes" xml:space="preserve">
          <source>The word is parsed as a number and converted to uint8, uint16, uint32, or uint64. If no size is specified then uint32 is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e32f77b25ad8753b803b583bcea3d23a669ec5f" translate="yes" xml:space="preserve">
          <source>The word is parsed as a string ending at the last character before whitespace, an end-of-line, or a delimiter specified in the options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d8336ecaeb40aa1d5097dde96e918c38d144caa" translate="yes" xml:space="preserve">
          <source>The word is parsed as a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f03e746dc661bb2b5e9b3b91f182ad2d52d18a58" translate="yes" xml:space="preserve">
          <source>The word is skipped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="244182dc5a0001a0185b5a8f89a7f141bd2a771f" translate="yes" xml:space="preserve">
          <source>The word specified by the remainder of the conversion specifier is skipped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="159f88833ab382c059b737b674ffba5cf22b3de6" translate="yes" xml:space="preserve">
          <source>The x and y coordinates of the original columns of the data passed to &lt;code&gt;area&lt;/code&gt; prior to the cumulative summation used in the &lt;code&gt;area&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3165940f41a372dc35f37ce09db96b33d64f03cd" translate="yes" xml:space="preserve">
          <source>The y value of the bars in the &lt;code&gt;hggroup&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fa3f5982b1eeb1201392b26a374775b18f08b19" translate="yes" xml:space="preserve">
          <source>The y-value where the baseline is drawn. (Default: 0)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fc722af7b27264af3c41be85ee66321a6ee30c8" translate="yes" xml:space="preserve">
          <source>Then if the path to &lt;code&gt;func1&lt;/code&gt; is &lt;code&gt;&amp;lt;directory&amp;gt;/func1.m&lt;/code&gt;, and if &lt;code&gt;func2&lt;/code&gt; is found in the directory &lt;code&gt;&amp;lt;directory&amp;gt;/private/func2.m&lt;/code&gt;, then &lt;code&gt;func2&lt;/code&gt; is only available for use of the functions, like &lt;code&gt;func1&lt;/code&gt;, that are found in &lt;code&gt;&amp;lt;directory&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f47cf9b5d978dd8923138721acc094642ae853b" translate="yes" xml:space="preserve">
          <source>Then the solution at the roots &lt;var&gt;r&lt;/var&gt; is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18a7080fd8254086cc0399e5bba079cdf26729b6" translate="yes" xml:space="preserve">
          <source>Then, call &lt;code&gt;fsolve&lt;/code&gt; with a specified initial condition to find the roots of the system of equations. For example, given the function &lt;code&gt;f&lt;/code&gt; defined above,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a66d2465ae5277677f88bca5637f141af59f245" translate="yes" xml:space="preserve">
          <source>There are a couple of important considerations in the choice of function name. First, it must be a valid Octave function name and so must be a sequence of letters, digits, and underscores not starting with a digit. Second, as Octave uses the function name to define the filename it attempts to find the function in, the function name in the &lt;code&gt;DEFUN_DLD&lt;/code&gt; macro must match the filename of the oct-file. Therefore, the above function should be in a file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1645c497a7650d167e84dcf1ce0d1cc2ec3e6935" translate="yes" xml:space="preserve">
          <source>There are a few further points to note about this method of creating a sparse matrix. First, it is possible to create a sparse matrix with fewer elements than are actually inserted in the matrix. Therefore,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1555dc02e713bdbf994aaa4e1d1d8f45cbda957" translate="yes" xml:space="preserve">
          <source>There are a number of basic class methods that can (and should) be defined to allow the contents of the classes to be queried and set. The most basic of these is the &lt;code&gt;disp&lt;/code&gt; method. The &lt;code&gt;disp&lt;/code&gt; method is used by Octave whenever a class should be displayed on the screen. Usually this is the result of an Octave expression that doesn&amp;rsquo;t end with a semicolon. If this method is not defined, then Octave won&amp;rsquo;t print anything when displaying the contents of a class which can be confusing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b138b7c0cb096c3691596544f6284479965cf209" translate="yes" xml:space="preserve">
          <source>There are a number of functions available for checking to see if the elements of a matrix meet some condition, and for rearranging the elements of a matrix. For example, Octave can easily tell you if all the elements of a matrix are finite, or are less than some specified value. Octave can also rotate the elements, extract the upper- or lower-triangular parts, or sort the columns of a matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07a7e8dda6f5d69563a2994a985d31cd75ef5c05" translate="yes" xml:space="preserve">
          <source>There are a number of functions that allow information concerning sparse matrices to be obtained. The most basic of these is &lt;em&gt;issparse&lt;/em&gt; that identifies whether a particular Octave object is in fact a sparse matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d155015acb65f9e1995f6488ef38a076dbe648c" translate="yes" xml:space="preserve">
          <source>There are also conversions for printing an integer argument as an unsigned value in octal, decimal, or hexadecimal radix (&amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b706061abf63ef4a6694855e26a15528c3a46e6" translate="yes" xml:space="preserve">
          <source>There are also many ways in which a function could be given as input. It might be passed as one of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c482e22c95a4929da153c6824babf917ca75c0b7" translate="yes" xml:space="preserve">
          <source>There are also the functions &lt;code&gt;mxSetPr&lt;/code&gt;, etc., that perform the inverse, and set the data of an array to use the block of memory pointed to by the argument of &lt;code&gt;mxSetPr&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3b9c3a94df61326b2ce0e75cdaf70e3756c9c58" translate="yes" xml:space="preserve">
          <source>There are currently three options for plotting in Octave: the external program gnuplot, the internal graphics engine using OpenGL coupled with either FLTK or Qt widgets. Gnuplot is a command-driven interactive function plotting program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8928dbb2cae046213eb080dcc0d78e4447288119" translate="yes" xml:space="preserve">
          <source>There are many classes of mathematical problems which give rise to matrices, where a large number of the elements are zero. In this case it makes sense to have a special matrix type to handle this class of problems where only the nonzero elements of the matrix are stored. Not only does this reduce the amount of memory to store the matrix, but it also means that operations on this type of matrix can take advantage of the a priori knowledge of the positions of the nonzero elements to accelerate their calculations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fc1040e188950da7dc34f76d66c0a14d4f8352b" translate="yes" xml:space="preserve">
          <source>There are many different formats for representing such data. Currently, only the two most popular, &lt;em&gt;linear encoding&lt;/em&gt; and &lt;em&gt;mu-law encoding&lt;/em&gt;, are supported by Octave. There is an excellent FAQ on audio formats by Guido van Rossum &lt;a href=&quot;mailto:guido@cwi.nl&quot;&gt;guido@cwi.nl&lt;/a&gt; which can be found at any FAQ ftp site, in particular in the directory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91b72cd6e53863779c1c8a43dd8950e080a2cd9d" translate="yes" xml:space="preserve">
          <source>There are many different means of storing sparse matrix data. What all of the methods have in common is that they attempt to reduce the complexity and storage given a priori knowledge of the particular class of problems that will be solved. A good summary of the available techniques for storing sparse matrix is given by Saad &lt;a href=&quot;#FOOT8&quot; name=&quot;DOCF8&quot;&gt;&lt;sup&gt;8&lt;/sup&gt;&lt;/a&gt;. With full matrices, knowledge of the point of an element of the matrix within the matrix is implied by its position in the computers memory. However, this is not the case for sparse matrices, and so the positions of the nonzero elements of the matrix must equally be stored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="824b3fbb5f8225fa6f2f70f5535f67ea4f163f11" translate="yes" xml:space="preserve">
          <source>There are many different variable types in Octave, but only ones created through &lt;code&gt;javaObject&lt;/code&gt; can use Java functions. Before using Java with an unknown object the type can be checked with &lt;code&gt;isjava&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcbd373f86f2ee06e41efe99927f5c0b9d3c8b93" translate="yes" xml:space="preserve">
          <source>There are many functions that directly return sparse matrices. These include &lt;em&gt;speye&lt;/em&gt;, &lt;em&gt;sprand&lt;/em&gt;, &lt;em&gt;diag&lt;/em&gt;, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2942de5de3cf5ff24e7ec57482acb77f6304d417" translate="yes" xml:space="preserve">
          <source>There are seven different things covered in this section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edd888b06834fc2508cfbf2a9d41eb69e6b056d1" translate="yes" xml:space="preserve">
          <source>There are several basic functions to return specific sparse matrices. For example the sparse identity matrix, is a matrix that is often needed. It therefore has its own function to create it as &lt;code&gt;speye (&lt;var&gt;n&lt;/var&gt;)&lt;/code&gt; or &lt;code&gt;speye (&lt;var&gt;r&lt;/var&gt;, &lt;var&gt;c&lt;/var&gt;)&lt;/code&gt;, which creates an &lt;var&gt;n&lt;/var&gt;-by-&lt;var&gt;n&lt;/var&gt; or &lt;var&gt;r&lt;/var&gt;-by-&lt;var&gt;c&lt;/var&gt; sparse identity matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46eb10a778bcc48fafd3816fbebfeee11b38b61e" translate="yes" xml:space="preserve">
          <source>There are several basic ways of constructing matrices or multi-dimensional arrays. Using the class &lt;code&gt;Matrix&lt;/code&gt; as an example one can</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d0c70cc7f3e5e6fb5c02526ea8caa6d494fa58d" translate="yes" xml:space="preserve">
          <source>There are several functions within Octave that can be useful for the purposes of parameter checking. These include the methods of the &lt;code&gt;octave_value&lt;/code&gt; class like &lt;code&gt;is_real_matrix&lt;/code&gt;, &lt;code&gt;is_numeric_type&lt;/code&gt;, etc. (see</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="410cf12f0d30c93339401cc3545818d844e3b9b4" translate="yes" xml:space="preserve">
          <source>There are several graphical means of finding out information about sparse matrices. The first is the &lt;em&gt;spy&lt;/em&gt; command, which displays the structure of the nonzero elements of the matrix. See &lt;a href=&quot;#fig_003aspmatrix&quot;&gt;Figure 22.1&lt;/a&gt;, for an example of the use of &lt;em&gt;spy&lt;/em&gt;. More advanced graphical information can be obtained with the &lt;em&gt;treeplot&lt;/em&gt;, &lt;em&gt;etreeplot&lt;/em&gt; and &lt;em&gt;gplot&lt;/em&gt; commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae53f59d6869944d32d5828c8e09b275dc8a74a0" translate="yes" xml:space="preserve">
          <source>There are several means to create sparse matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0679add9d01f865d61f920d7e3021c4295068cd2" translate="yes" xml:space="preserve">
          <source>There are some important differences between the various interpolation methods. The &lt;code&gt;&quot;spline&quot;&lt;/code&gt; method enforces that both the first and second derivatives of the interpolated values have a continuous derivative, whereas the other methods do not. This means that the results of the &lt;code&gt;&quot;spline&quot;&lt;/code&gt; method are generally smoother. If the function to be interpolated is in fact smooth, then &lt;code&gt;&quot;spline&quot;&lt;/code&gt; will give excellent results. However, if the function to be evaluated is in some manner discontinuous, then &lt;code&gt;&quot;pchip&quot;&lt;/code&gt; interpolation might give better results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91d560ddeec5a2587817ef2cd84c542f8ea882c0" translate="yes" xml:space="preserve">
          <source>There are three additional support functions that allow the user to find out where in the execution of a script Octave entered the debug mode, and to print the code in the script surrounding the point where Octave entered debug mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce19aa7b04e3e500ecb3038050383ea6c918ad18" translate="yes" xml:space="preserve">
          <source>There are three calling forms of the function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="687a16741963749084aeb2ccc09916562d74e4dd" translate="yes" xml:space="preserve">
          <source>There are three classes of sparse objects that are of interest to the user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eefaa87f3b5146a111dfb03cb6ffcdf3ee130faa" translate="yes" xml:space="preserve">
          <source>There are three files that are always available. Although these files can be accessed using their corresponding numeric file ids, you should always use the symbolic names given in the table below, since it will make your programs easier to understand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8391bc5129634e3cc859ba23f17ea472d5602fa" translate="yes" xml:space="preserve">
          <source>There are three functions that modify the behavior of &lt;code&gt;save&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50ba6ca1444cd09db2ab6ced2e204a22e264da62" translate="yes" xml:space="preserve">
          <source>There are three multi-dimensional interpolation functions in Octave, with similar capabilities. Methods using Delaunay tessellation are described in &lt;a href=&quot;interpolation-on-scattered-data#Interpolation-on-Scattered-Data&quot;&gt;Interpolation on Scattered Data&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a0627b1daf19be2819a9d6efc89075a3058c3ef" translate="yes" xml:space="preserve">
          <source>There are three ways to give the property names and values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e14f29cff5fc2e3313b1e95dda6ce6fb872d605" translate="yes" xml:space="preserve">
          <source>There are times when it is useful to write code that contains assignments within the condition of a &lt;code&gt;while&lt;/code&gt; or &lt;code&gt;if&lt;/code&gt; statement. For example, statements like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dcfc4320981585f5b3ce4e6c05c601d0b1fdc5d" translate="yes" xml:space="preserve">
          <source>There are two basic means of interrupting the execution of an Octave script. These are breakpoints (see &lt;a href=&quot;breakpoints#Breakpoints&quot;&gt;Breakpoints&lt;/a&gt;), discussed in the next section, and interruption based on some condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47bd155efcb3a1f9c8b1a57817bc82244931ec9c" translate="yes" xml:space="preserve">
          <source>There are two important things to know in this case. First, the number of input arguments to the user function is fixed, and in the above example is a single argument. Second, to avoid leaving the temporary function in the Octave symbol table it should be cleared after use. Also, by convention all internal function names begin and end with the character sequence &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15658fe932976cfb0a3fc6f59ae14aa060162557" translate="yes" xml:space="preserve">
          <source>There are two intrinsically different types of &lt;code&gt;classdef&lt;/code&gt; classes, whose major difference is the behavior regarding variable assignment. The first type are &lt;b&gt;value classes&lt;/b&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d61fd6d7a7896d31872b471cce24825be9fd322a" translate="yes" xml:space="preserve">
          <source>There are two significant limitations on Fourier interpolation. First, the function signal is assumed to be periodic, and so non-periodic signals will be poorly represented at the edges. Second, both the signal and its interpolation are required to be sampled at equispaced points. An example of the use of &lt;code&gt;interpft&lt;/code&gt; is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3965a46796224da3a2635d002810c63d9be8d804" translate="yes" xml:space="preserve">
          <source>There are two useful strategies for creating a sparse matrix. The first is to create three vectors representing the row index, column index, and data values, and from these create the matrix. The second alternative is to create a sparse matrix with the appropriate amount of space, and then fill in the values. Both techniques have their advantages and disadvantages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8225d3040eedccf36dba4859768df1cf6ea0e73" translate="yes" xml:space="preserve">
          <source>There is however one known case where this behavior of Octave&amp;rsquo;s sparse matrices will cause a problem. That is in the handling of the &lt;em&gt;diag&lt;/em&gt; function. Whether &lt;em&gt;diag&lt;/em&gt; returns a sparse or full matrix depending on the type of its input arguments. So</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84edc28bec2443f8e6d77afe10c4123b4b2daf35" translate="yes" xml:space="preserve">
          <source>There is no great harm in using &lt;code&gt;F77_XFCN&lt;/code&gt; in all cases, except that for Fortran code that is short running and executes a large number of times, there is potentially an overhead in doing so. However, if &lt;code&gt;F77_FCN&lt;/code&gt; is used with code that calls &lt;code&gt;XSTOP&lt;/code&gt;, Octave can generate a segmentation fault.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a516eb3045062bca577c0035bd8321aac76dced" translate="yes" xml:space="preserve">
          <source>There is often a need to be able to call another Octave function from within an oct-file, and there are many examples of such within Octave itself. For example, the &lt;code&gt;quad&lt;/code&gt; function is an oct-file that calculates the definite integral by quadrature over a user-supplied function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="492b91c15b54939ff80441f6a984931f82eb8089" translate="yes" xml:space="preserve">
          <source>There is one built-in variable with a special meaning. The &lt;code&gt;ans&lt;/code&gt; variable always contains the result of the last computation, where the output wasn&amp;rsquo;t assigned to any variable. The code &lt;code&gt;a = cos (pi)&lt;/code&gt; will assign the value -1 to the variable &lt;code&gt;a&lt;/code&gt;, but will not change the value of &lt;code&gt;ans&lt;/code&gt;. However, the code &lt;code&gt;cos (pi)&lt;/code&gt; will set the value of &lt;code&gt;ans&lt;/code&gt; to -1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7594ce386124a8cc625777db8203b513bd8b4a86" translate="yes" xml:space="preserve">
          <source>There is still one additional problem with this function. What if it is called without an argument? Without additional error checking, Octave will probably print an error message that won&amp;rsquo;t really help you track down the source of the error. To allow you to catch errors like this, Octave provides each function with an automatic variable called &lt;code&gt;nargin&lt;/code&gt;. Each time a function is called, &lt;code&gt;nargin&lt;/code&gt; is automatically initialized to the number of arguments that have actually been passed to the function. For example, we might rewrite the &lt;code&gt;avg&lt;/code&gt; function like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="466b74f976ca2c1251705226e1cc4c1c663ad583" translate="yes" xml:space="preserve">
          <source>Therefore, the test in &lt;code&gt;tsearch&lt;/code&gt; and &lt;code&gt;tsearchn&lt;/code&gt; essentially only needs to express each point in terms of the Barycentric coordinates of each of the simplices of the N-simplex and test the values of &lt;var&gt;beta&lt;/var&gt;. This is exactly the implementation used in &lt;code&gt;tsearchn&lt;/code&gt;. &lt;code&gt;tsearch&lt;/code&gt; is optimized for 2-dimensions and the Barycentric coordinates are not explicitly formed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2c3c26b6149fb034d92c53a1de76948132a8e40" translate="yes" xml:space="preserve">
          <source>Therefore, there is a certain density of nonzero elements of a matrix where it no longer makes sense to store it as a sparse matrix, but rather as a full matrix. For this reason operators and functions that have a high probability of returning a full matrix will always return one. For example adding a scalar constant to a sparse matrix will almost always make it a full matrix, and so the example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="331cf903e951701328f89f9230cad091eb6c976f" translate="yes" xml:space="preserve">
          <source>These are the basic two-dimensional matrix types of Octave. In addition there are a number of multi-dimensional array types including</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22cd5043bcfb95309cae4942d5bf63fb208c135b" translate="yes" xml:space="preserve">
          <source>These are the external build dependencies of the package and are not checked by the package manager. This is here as a hint to the distribution packager. They follow the same conventions as the &lt;code&gt;Depends&lt;/code&gt; keyword. Note that in general, packaging systems such as &lt;code&gt;rpm&lt;/code&gt; or &lt;code&gt;deb&lt;/code&gt; autoprobe the install dependencies from the build dependencies, and therefore a &lt;code&gt;BuildRequires&lt;/code&gt; dependency usually removes the need for a &lt;code&gt;SystemRequirements&lt;/code&gt; dependency.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="516c1af866d51d2fdff4b0d6f94bfa815675f767" translate="yes" xml:space="preserve">
          <source>These are the external install dependencies of the package and are not checked by the package manager. This is here as a hint to the distribution packager. They follow the same conventions as the &lt;code&gt;Depends&lt;/code&gt; keyword.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76a2ee1f74b324a27d5cf79a2c29a6906b8dd1e5" translate="yes" xml:space="preserve">
          <source>These capabilities are used in a number of basic graphics objects. The &lt;code&gt;hggroup&lt;/code&gt; objects created by the functions of Octave contain one or more graphics object and are used to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77180f5e7b9500bc083a4f119de56fa8e271e19c" translate="yes" xml:space="preserve">
          <source>These codes may be used in conjunction with the { and } characters to limit the change to a part of the string. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98f074e49aad02fdf334b6d02cca69d88d572c30" translate="yes" xml:space="preserve">
          <source>These functions are rarely used in practice. One example is the &lt;code&gt;fail (&amp;lsquo;&lt;samp&gt;code&lt;/samp&gt;&amp;rsquo;, &amp;lsquo;&lt;samp&gt;pattern&lt;/samp&gt;&amp;rsquo;)&lt;/code&gt; function which evaluates &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6f242f2f73e40e468f04100d6a0ccceffa4a9f3" translate="yes" xml:space="preserve">
          <source>These functions do not implement a GUI element but are useful when developing programs that do. The functions &lt;code&gt;uiwait&lt;/code&gt;, &lt;code&gt;uiresume&lt;/code&gt;, and &lt;code&gt;waitfor&lt;/code&gt; are only available with the &lt;code&gt;qt&lt;/code&gt; or &lt;code&gt;fltk&lt;/code&gt; toolkits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d8019c6589e6cf4ca1496dd0d3d75fd9acce0e7" translate="yes" xml:space="preserve">
          <source>These lists of function calls make it fairly easy to trace the path your program took before the error occurred, and to correct the error before trying again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89d5f1b227db73e91b393e0028b5569c63f68b74" translate="yes" xml:space="preserve">
          <source>These operators group right to left.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a854e78a3e0d930cdd2b056ddef26cc233245776" translate="yes" xml:space="preserve">
          <source>These operators work on an element-by-element basis. For example, the expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57ac34382fadfc67c830a52b20fd23a6b3b68189" translate="yes" xml:space="preserve">
          <source>These rotations are centered around the camera target (see &lt;a href=&quot;#XREFcamtarget&quot;&gt;camtarget&lt;/a&gt;). First the camera position is pitched up or down by rotating it &lt;var&gt;phi&lt;/var&gt; degrees around an axis orthogonal to both the viewing direction (specifically &lt;code&gt;camtarget() - campos()&lt;/code&gt;) and the camera &amp;ldquo;up vector&amp;rdquo; (see &lt;a href=&quot;#XREFcamup&quot;&gt;camup&lt;/a&gt;). Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60805c7b6bd0842c8bcdda9d4de849b0d534f7bd" translate="yes" xml:space="preserve">
          <source>These routines are highly optimized and many do not carry the overhead of being interpreted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3cd139378dd80fccd1ba3c76f09ba5eaafa810d" translate="yes" xml:space="preserve">
          <source>These types all share a number of basic methods and operators. Many bear a resemblance to functions that exist in the interpreter. A selection of useful methods include</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac1bb402d49b1a35ff04a2c063f40a0588aa5b17" translate="yes" xml:space="preserve">
          <source>These warnings are emitted if a (nearly) singular matrix is inverted. By default, the &lt;code&gt;Octave:nearly-singular-matrix&lt;/code&gt; and &lt;code&gt;Octave:singular-matrix&lt;/code&gt; warnings are enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c78f8f82db1e4ddf507a02ca7de09b2ee880f9b9" translate="yes" xml:space="preserve">
          <source>This allows more rapid solutions of linear equations involving &lt;var&gt;A&lt;/var&gt; to be performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="114d33926dc55d70ed6fb4c5dffd47b70df2af5e" translate="yes" xml:space="preserve">
          <source>This allows the cost of determining the matrix type to be avoided. However, incorrectly defining the matrix type will result in incorrect results from solutions of linear equations, and so it is entirely the responsibility of the user to correctly identify the matrix type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9032d9741099a355cfb52ff095d5eccc4587e6e9" translate="yes" xml:space="preserve">
          <source>This allows you to view one screenful at a time. Some pagers (such as &lt;code&gt;less&lt;/code&gt;&amp;mdash;see &lt;a href=&quot;installation#Installation&quot;&gt;Installation&lt;/a&gt;) are also capable of moving backward on the output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce3bdf687e04e1138c7ae08f9b74b69db8e7517b" translate="yes" xml:space="preserve">
          <source>This appendix will eventually contain a semi-formal description of Octave&amp;rsquo;s language.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40e2801127f754f45136424c94122dc01595e8cb" translate="yes" xml:space="preserve">
          <source>This applies to arrays (matrices), cell arrays, and structs indexed using &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b8547225adb0b322654638d6ce5a5b8542cc4cd" translate="yes" xml:space="preserve">
          <source>This behavior is consistent with the other logical functions. See &lt;a href=&quot;logical-values#Logical-Values&quot;&gt;Logical Values&lt;/a&gt;. The behavior differs from the C language function which returns nonzero if the sign bit is set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3e74c97a50c32e12f34831e8a63583aea04f1eb" translate="yes" xml:space="preserve">
          <source>This behavior is necessary for the boolean operators to work as described for matrix-valued operands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ffa8b0148502639eadd3acddb1fc5d60065929f" translate="yes" xml:space="preserve">
          <source>This behavior not only facilitates the most straightforward and efficient implementation of algorithms, but also preserves certain useful invariants, like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c37c09d162d5ffa4f1738f98cc1abcaa14fdd8e8" translate="yes" xml:space="preserve">
          <source>This can be accomplished with the following functions by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="404c1b065822b1654232a85e29ab366f7eb5d2e9" translate="yes" xml:space="preserve">
          <source>This can be computed exactly using</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdab6097b81d07628e46c33c3c9f51c5c1410461" translate="yes" xml:space="preserve">
          <source>This can be demonstrated by the code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec51b5a3283d6ddeea00a35b9ade8f2a2948ae80" translate="yes" xml:space="preserve">
          <source>This can be used by Octave packages to extend the image reading capabilities Octave, through use of the PKG_ADD and PKG_DEL commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f256c11b92144e23214d4f33ad7389498d135553" translate="yes" xml:space="preserve">
          <source>This can be used for all matrix and array types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b14bbaea156f1c5bd006b45fc83550693bb4100f" translate="yes" xml:space="preserve">
          <source>This can be used to generate many distributions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="885fee0ae890bb804c4686fb2c6d30e9078052bc" translate="yes" xml:space="preserve">
          <source>This can be used to write somewhat more concise code. For example, it is possible write</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fd66c1d53ba2ceb4d4f1de5f0b148ec8ecab1f3" translate="yes" xml:space="preserve">
          <source>This can be useful for packagers that may split the Octave installation into multiple sub-packages, for example, to provide a hint to users for how to install the missing components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="287ae4e82e924e1ba767e0b529fcbe7176538188" translate="yes" xml:space="preserve">
          <source>This can be written in a clearer and more condensed form using the &lt;code&gt;+=&lt;/code&gt; operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e72eaea8571e4fa0d755737df12accfcc9681ebf" translate="yes" xml:space="preserve">
          <source>This can then be associated with an object either at the object&amp;rsquo;s creation, or later with the &lt;code&gt;set&lt;/code&gt; function. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4935cbc1e2ef3c661f74a0215fa6666a3367e512" translate="yes" xml:space="preserve">
          <source>This chapter describes the functions that are available to allow you to get information about what is happening outside of Octave, while it is still running, and use this information in your program. For example, you can get information about environment variables, the current time, and even start other programs from the Octave prompt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bc58e0d4ec5aadfefd10d5da01cf97d830bba70" translate="yes" xml:space="preserve">
          <source>This chapter describes the signal processing and fast Fourier transform functions available in Octave. Fast Fourier transforms are computed with the &lt;small&gt;FFTW&lt;/small&gt; or &lt;small&gt;FFTPACK&lt;/small&gt; libraries depending on how Octave is built.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9694693adb5d638fb4cf3658a951a2cc7c4472ca" translate="yes" xml:space="preserve">
          <source>This chapter discusses the means of constructing a user class, how to query and set the properties of a class, and how to overload operators and functions. Throughout this chapter real code examples are given using a class designed for polynomials.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06310114a27e9e9841c8a855bb2a3d118572a348" translate="yes" xml:space="preserve">
          <source>This chapter discusses vectorization and other techniques for writing faster code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ca6bd6b318f77496e33892f2c28ef84b9dbf6da" translate="yes" xml:space="preserve">
          <source>This chapter documents the linear algebra functions provided in Octave. Reference material for many of these functions may be found in Golub and Van Loan,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d525aa2dea5c949b943bc3772fe57aaaa0d30e1" translate="yes" xml:space="preserve">
          <source>This chapter explains some of Octave&amp;rsquo;s basic features, including how to start an Octave session, get help at the command prompt, edit the command line, and write Octave programs that can be executed as commands from your shell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f870b3b1cd9baf34cf54a90e4fb969929abdd9b1" translate="yes" xml:space="preserve">
          <source>This chapter illustrates user-defined classes and object oriented programming through a custom class designed for polynomials. This class was chosen for its simplicity which does not distract unnecessarily from the discussion of the programming features of Octave. Even so, a bit of background on the goals of the polynomial class is necessary before the syntax and techniques of Octave object oriented programming are introduced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6223d5152e7bd8810b922a69df306af3d062bb6c" translate="yes" xml:space="preserve">
          <source>This class is designed to allow easy parsing of function arguments. The class supports four types of arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28b4bb88f5904d5f0303192b52d6e89deae84e1e" translate="yes" xml:space="preserve">
          <source>This code makes the repetitive structure of the problem more explicit, making the code easier to read, and hence maintain. Also, if the variable &lt;code&gt;X&lt;/code&gt; should change its name, only one line would need changing compared to one line per case when &lt;code&gt;if&lt;/code&gt; statements are used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8e22f90874a1bc576fc1dc09b9d917c9145109f" translate="yes" xml:space="preserve">
          <source>This code works by first evaluating the expression &lt;code&gt;3:10&lt;/code&gt;, to produce a range of values from 3 to 10 inclusive. Then the variable &lt;code&gt;i&lt;/code&gt; is assigned the first element of the range and the body of the loop is executed once. When the end of the loop body is reached, the next value in the range is assigned to the variable &lt;code&gt;i&lt;/code&gt;, and the loop body is executed again. This process continues until there are no more elements to assign.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01ddb9d51a79b3eee57efcdbe2e6af77b1ab3d1e" translate="yes" xml:space="preserve">
          <source>This colormap gives a sepia tone when used on grayscale images.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35f79e5d7dcd2ee2e1e0c3cc83c15c90f925b763" translate="yes" xml:space="preserve">
          <source>This colormap varies from black to white going though blue, green, and red tones while maintaining a monotonically increasing perception of intensity. This is achieved by traversing a color cube from black to white through a helix, hence the name cubehelix, while taking into account the perceived brightness of each channel according to the NTSC specifications from 1953.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a77be10bf36a565bd9fc7ded86acc85d5471b79" translate="yes" xml:space="preserve">
          <source>This command fixes the camera&amp;rsquo;s viewing direction (&lt;code&gt;camtarget() - campos()&lt;/code&gt;), camera up vector (see &lt;a href=&quot;#XREFcamup&quot;&gt;camup&lt;/a&gt;) and viewing angle (see &lt;a href=&quot;#XREFcamva&quot;&gt;camva&lt;/a&gt;). The camera target (see &lt;a href=&quot;#XREFcamtarget&quot;&gt;camtarget&lt;/a&gt;) and camera position (see &lt;a href=&quot;#XREFcampos&quot;&gt;campos&lt;/a&gt;) are changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85c2ddd5459091af861d15b2542c6f75c5bebad3" translate="yes" xml:space="preserve">
          <source>This command only affects the display of numbers, but not how they are stored or computed. To change the internal representation from the default double use one of the conversion functions such as &lt;code&gt;single&lt;/code&gt;, &lt;code&gt;uint8&lt;/code&gt;, &lt;code&gt;int64&lt;/code&gt;, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef83f665a777e09c4d0332b38ffe2ab0696f6840" translate="yes" xml:space="preserve">
          <source>This command will plot &lt;code&gt;y&lt;/code&gt; with red circles, &lt;code&gt;y2&lt;/code&gt; with solid lines, &lt;code&gt;y3&lt;/code&gt; with solid magenta lines, and &lt;code&gt;y4&lt;/code&gt; with points displayed as &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b89fc65079ce5c365a410663a8cb27b013122a6f" translate="yes" xml:space="preserve">
          <source>This command will plot the data in the variable &lt;code&gt;b&lt;/code&gt;, with points displayed as &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9e0b2f4fb9e85bc0a24fb8b505fbdb26c5efcf6" translate="yes" xml:space="preserve">
          <source>This constructor can &lt;strong&gt;only&lt;/strong&gt; be used with matrix types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6ca34c6a6d73e0be34178d17a77b09b20fec1fd" translate="yes" xml:space="preserve">
          <source>This creates a 2-by-9 character matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4c579a421dde4b1ff1d65d848faf52434d90927" translate="yes" xml:space="preserve">
          <source>This creates a N-by-2 matrix &lt;code&gt;nodes&lt;/code&gt; and a E-by-3 matrix &lt;code&gt;elems&lt;/code&gt; with values, which define finite element triangles:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6f80779c20357a3c006d8af99d3e93eed172ce5" translate="yes" xml:space="preserve">
          <source>This creates a sparse matrix with the same structure as &lt;var&gt;S&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="368c29fa95f88ae6085ee0f8a616841ed0c224e6" translate="yes" xml:space="preserve">
          <source>This creates the same matrix as previously. Again, although not strictly necessary, it is significantly faster if the sparse matrix is created and the elements are added in column-major ordering. The reason for this is that when elements are inserted at the end of the current list of known elements then no element in the matrix needs to be moved to allow the new element to be inserted; Only the column indices need to be updated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68a76a0355b8244c80d1f4f8994318433cf2289e" translate="yes" xml:space="preserve">
          <source>This document corresponds to Octave version 5.1.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dba264891b29494dd04eb559595a8439c1ffe3a" translate="yes" xml:space="preserve">
          <source>This error message has several parts, and gives quite a bit of information to help you locate the source of the error. The messages are generated from the point of the innermost error, and provide a traceback of enclosing expressions and function calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8025934018a52607bf3043b6efc0a3dbb3ed587" translate="yes" xml:space="preserve">
          <source>This example creates a variable &lt;code&gt;fib&lt;/code&gt; that contains the first ten elements of the Fibonacci sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24ec35f8bdb301c66d9e8a3c551cf69d6e3f0c72" translate="yes" xml:space="preserve">
          <source>This example demonstrates most of the features needed to link to an external Fortran function, including passing arrays and strings, as well as exception handling. Both the Fortran and C++ files need to be compiled in order for the example to work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8034d960b3a8d6b0a787be5990d26c53f95d716" translate="yes" xml:space="preserve">
          <source>This example shows the use of the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e34d37e3027e2f20d2b9bde7e69a748813c5c633" translate="yes" xml:space="preserve">
          <source>This example uses ILU as preconditioner for a random FEM-Matrix, which has a large condition number. Without &lt;var&gt;L&lt;/var&gt; and &lt;var&gt;U&lt;/var&gt; BICG would not converge.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8861b43d9e0b36e78fe97958252da3e75b803943" translate="yes" xml:space="preserve">
          <source>This expression causes the variable &lt;var&gt;x&lt;/var&gt; to be decremented. The value of the expression is the &lt;em&gt;old&lt;/em&gt; value of &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="905adfc818f95047998ed251dfccb30a8000fd8f" translate="yes" xml:space="preserve">
          <source>This expression causes the variable &lt;var&gt;x&lt;/var&gt; to be incremented. The value of the expression is the &lt;em&gt;old&lt;/em&gt; value of &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac2dd45958c46ba44b43d4288d2be6ba1394d831" translate="yes" xml:space="preserve">
          <source>This expression decrements the variable &lt;var&gt;x&lt;/var&gt;. The value of the expression is the &lt;em&gt;new&lt;/em&gt; value of &lt;var&gt;x&lt;/var&gt;. It is equivalent to the expression &lt;code&gt;&lt;var&gt;x&lt;/var&gt; = &lt;var&gt;x&lt;/var&gt; - 1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4411c11bd8911487c2a8c91de5217c561d2269da" translate="yes" xml:space="preserve">
          <source>This expression increments the variable &lt;var&gt;x&lt;/var&gt;. The value of the expression is the &lt;em&gt;new&lt;/em&gt; value of &lt;var&gt;x&lt;/var&gt;. It is equivalent to the expression &lt;code&gt;&lt;var&gt;x&lt;/var&gt; = &lt;var&gt;x&lt;/var&gt; + 1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d855e2588465e6a87fabb7c93db299a96a10dbd3" translate="yes" xml:space="preserve">
          <source>This file can be used to make changes to the default Octave environment for a particular project. Octave searches for this file in the current directory after it reads</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fca94dcfb1a84b3188885421364803978a9a0e7" translate="yes" xml:space="preserve">
          <source>This file is used to make personal changes to the default Octave environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5387b8274b29c3b4898ea2a5175adee99f0f1e14" translate="yes" xml:space="preserve">
          <source>This file is used to make personal changes to the default Octave environment. It is executed for &lt;small&gt;MATLAB&lt;/small&gt; compatibility, but</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eba4c00e4a70470d102786523461a7aac2d462d" translate="yes" xml:space="preserve">
          <source>This function and &lt;code&gt;+&amp;nbsp;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; are equivalent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9061137764d54615d6b00791b1367a1a8771017f" translate="yes" xml:space="preserve">
          <source>This function and &lt;code&gt;-&amp;nbsp;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; are equivalent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3a9212bac9f7f38d0343a51a92ffeab8a127a33" translate="yes" xml:space="preserve">
          <source>This function and &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&amp;nbsp;*&amp;nbsp;&lt;var&gt;y&lt;/var&gt;&lt;/code&gt; are equivalent. If more arguments are given, the multiplication is applied cumulatively from left to right:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efe25524b3986ac4749449f1edde81f9aa972463" translate="yes" xml:space="preserve">
          <source>This function and &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&amp;nbsp;+&amp;nbsp;&lt;var&gt;y&lt;/var&gt;&lt;/code&gt; are equivalent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="502ec151ce326acafbe295a62526a913d76dcccf" translate="yes" xml:space="preserve">
          <source>This function and &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&amp;nbsp;-&amp;nbsp;&lt;var&gt;y&lt;/var&gt;&lt;/code&gt; are equivalent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b72721c8e0e2af9938c55881abd1e83329d9251f" translate="yes" xml:space="preserve">
          <source>This function and &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&amp;nbsp;.*&amp;nbsp;&lt;var&gt;y&lt;/var&gt;&lt;/code&gt; are equivalent. If more arguments are given, the multiplication is applied cumulatively from left to right:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47a128d1142a02dd25266bbaba1c7a38cbae851a" translate="yes" xml:space="preserve">
          <source>This function and &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&amp;nbsp;./&amp;nbsp;&lt;var&gt;y&lt;/var&gt;&lt;/code&gt; are equivalent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c7c73d2fc97c9f3ff07417b16c6dd41ecd097f5" translate="yes" xml:space="preserve">
          <source>This function and &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&amp;nbsp;.\&amp;nbsp;&lt;var&gt;y&lt;/var&gt;&lt;/code&gt; are equivalent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54c600f0e787b7ecb3bdaacab80d7904763c8376" translate="yes" xml:space="preserve">
          <source>This function and &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&amp;nbsp;.^&amp;nbsp;&lt;var&gt;y&lt;/var&gt;&lt;/code&gt; are equivalent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c459916747246315e0f3ac5bb29b9745585ec08f" translate="yes" xml:space="preserve">
          <source>This function and &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&amp;nbsp;/&amp;nbsp;&lt;var&gt;y&lt;/var&gt;&lt;/code&gt; are equivalent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9661eda327ed8f45b65de6c3fce16d7e93bd21a4" translate="yes" xml:space="preserve">
          <source>This function and &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&amp;nbsp;\&amp;nbsp;&lt;var&gt;y&lt;/var&gt;&lt;/code&gt; are equivalent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c86f55580b5b4ee4e9f0e68ce1b6379ddb593aef" translate="yes" xml:space="preserve">
          <source>This function and &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&amp;nbsp;^&amp;nbsp;&lt;var&gt;y&lt;/var&gt;&lt;/code&gt; are equivalent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ba20393866ff4f18aa7c9ae264ba08ee0d49277" translate="yes" xml:space="preserve">
          <source>This function and &lt;code&gt;&lt;var&gt;x&lt;/var&gt;'&lt;/code&gt; are equivalent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aac2aa22d8b348a1058a67b71f0cc9fb9a86e746" translate="yes" xml:space="preserve">
          <source>This function and &lt;code&gt;&lt;var&gt;x&lt;/var&gt;.'&lt;/code&gt; are equivalent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69576a5d7245b4ceff07f872710a90ac5b9ebdc8" translate="yes" xml:space="preserve">
          <source>This function assumes that versions &lt;var&gt;v1&lt;/var&gt; and &lt;var&gt;v2&lt;/var&gt; are arbitrarily long strings made of numeric and period characters possibly followed by an arbitrary string (e.g., &lt;code&gt;&quot;1.2.3&quot;&lt;/code&gt;, &lt;code&gt;&quot;0.3&quot;&lt;/code&gt;, &lt;code&gt;&quot;0.1.2+&quot;&lt;/code&gt;, or &lt;code&gt;&quot;1.2.3.4-test1&quot;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f2fe5d9756a0b4efa0a5a37bae9dabd0261333f" translate="yes" xml:space="preserve">
          <source>This function behaves like &lt;code&gt;eval&lt;/code&gt;, but any output or warning messages which would normally be written to the console are captured and returned in the string &lt;var&gt;s&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e130b7059bc26fcfdb5f1aec75a8a18446ebfe15" translate="yes" xml:space="preserve">
          <source>This function can be used, for example, to reduce the impact of noise in &lt;var&gt;data&lt;/var&gt; before calculating isosurfaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89389586442a798b213664a0be2956ff33bece7e" translate="yes" xml:space="preserve">
          <source>This function changes the ambient, diffuse, and specular strengths, as well as the specular exponent and specular color reflectance, of all &lt;code&gt;patch&lt;/code&gt; and &lt;code&gt;surface&lt;/code&gt; objects in the current axes. This can be used to simulate, to some extent, the reflectance properties of certain materials when used with &lt;code&gt;light&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="485c01d8d415e14668fa53c075f8f1fb428028b0" translate="yes" xml:space="preserve">
          <source>This function does not support sparse matrices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e82c42972d595cef53627a7913726034f0080796" translate="yes" xml:space="preserve">
          <source>This function is based on the &lt;small&gt;ARPACK&lt;/small&gt; package, written by R. Lehoucq, K. Maschhoff, D. Sorensen, and C. Yang. For more information see &lt;a href=&quot;http://www.caam.rice.edu/software/ARPACK/&quot;&gt;http://www.caam.rice.edu/software/ARPACK/&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d52082903ed87115fef9c4bd6acfa99774a1568" translate="yes" xml:space="preserve">
          <source>This function is called at the beginning of all high-level plotting functions. It is not normally required in user programs. &lt;code&gt;newplot&lt;/code&gt; queries the &lt;code&gt;&quot;NextPlot&quot;&lt;/code&gt; field of the current figure and axes to determine what to do.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cadc07d5c458fb5398ca1957aaed4995b4f5986" translate="yes" xml:space="preserve">
          <source>This function is conceptually equivalent to computing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a407a4acf44b51b7f06ab276d65b770d356d3c3" translate="yes" xml:space="preserve">
          <source>This function is equivalent to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9f2d8c132f1fb4272b67f2dd07a04e95c181cdb" translate="yes" xml:space="preserve">
          <source>This function is equivalent to &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&amp;nbsp;!=&amp;nbsp;&lt;var&gt;y&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03e8142690b30ab8ee2375ae53bc04739d5b7bc1" translate="yes" xml:space="preserve">
          <source>This function is equivalent to &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&amp;nbsp;&amp;gt;&amp;nbsp;&lt;var&gt;y&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="965c566254024329ba6e560bba108135ecd0948d" translate="yes" xml:space="preserve">
          <source>This function is equivalent to &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&amp;nbsp;&amp;gt;=&amp;nbsp;&lt;var&gt;y&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="322a5ca85cd6cde4528bf410bd84e825764039da" translate="yes" xml:space="preserve">
          <source>This function is equivalent to &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&amp;nbsp;&amp;lt;&amp;nbsp;&lt;var&gt;y&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b37704d0e472b913b67b1bf7986caec52e66aa22" translate="yes" xml:space="preserve">
          <source>This function is equivalent to &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&amp;nbsp;&amp;lt;=&amp;nbsp;&lt;var&gt;y&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a772fd74394d4ca009594cfac3633f0219c6a98f" translate="yes" xml:space="preserve">
          <source>This function is equivalent to &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&amp;nbsp;==&amp;nbsp;&lt;var&gt;y&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf7b55057628c26f0f7501f1f7891505c6acdfb8" translate="yes" xml:space="preserve">
          <source>This function is equivalent to &lt;code&gt;arg (complex (&lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44a9df5f4d2c8f1121ad8d9b7e12617e4c91198d" translate="yes" xml:space="preserve">
          <source>This function is equivalent to &lt;code&gt;printf&lt;/code&gt;, except that the output is written to the file descriptor &lt;var&gt;fid&lt;/var&gt; instead of &lt;code&gt;stdout&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdb5a1519dbd62fdc2d8fb08ec1997e09cbf75ca" translate="yes" xml:space="preserve">
          <source>This function is equivalent to the operator syntax &lt;code&gt;!&amp;nbsp;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bf6f1af0d2c495fa6f5299e4e6d860072308f5c" translate="yes" xml:space="preserve">
          <source>This function is equivalent to the operator syntax &lt;code&gt;&lt;var&gt;base&lt;/var&gt;&amp;nbsp;:&amp;nbsp;&lt;var&gt;limit&lt;/var&gt;&lt;/code&gt; or &lt;code&gt;&lt;var&gt;base&lt;/var&gt;&amp;nbsp;:&amp;nbsp;&lt;var&gt;increment&lt;/var&gt;&amp;nbsp;:&amp;nbsp;&lt;var&gt;limit&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60e32178600854dc3b6926a1d3f5877c45875e36" translate="yes" xml:space="preserve">
          <source>This function is equivalent to the operator syntax &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&amp;nbsp;&amp;amp;&amp;nbsp;&lt;var&gt;y&lt;/var&gt;&lt;/code&gt;. If more than two arguments are given, the logical AND is applied cumulatively from left to right:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="713a76dcc5dee8c8a56e5720658db27d81f1ae5d" translate="yes" xml:space="preserve">
          <source>This function is equivalent to the operator syntax &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&amp;nbsp;|&amp;nbsp;&lt;var&gt;y&lt;/var&gt;&lt;/code&gt;. If more than two arguments are given, the logical OR is applied cumulatively from left to right:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d50d4ef6c9bbf5b3c82759706bb2ceeacdd89ec" translate="yes" xml:space="preserve">
          <source>This function is intended to facilitate manipulation of the output of functions such as &lt;code&gt;stemleaf&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a2b2cd29ce436f30e98be5253a0584e01836b04" translate="yes" xml:space="preserve">
          <source>This function is not recommended. Use &lt;code&gt;isfolder&lt;/code&gt; or &lt;code&gt;file_in_loadpath&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da7aa68fdd24f94a542efe2b851233b3a9635c15" translate="yes" xml:space="preserve">
          <source>This function is not very flexible. For better control over the results, use &lt;code&gt;sprintf&lt;/code&gt; (see &lt;a href=&quot;formatted-output#Formatted-Output&quot;&gt;Formatted Output&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58588d93b1010db10c43468002c403be39551cd4" translate="yes" xml:space="preserve">
          <source>This function is obsolete. Use &lt;code&gt;strfind&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff343f03b63aa88810a00f38fa99f7f366c80f77" translate="yes" xml:space="preserve">
          <source>This function is obsolete. Use &lt;code&gt;textscan&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54d2f7e6b128e70a101098ff754f2c105cb9af17" translate="yes" xml:space="preserve">
          <source>This function is obsolete. Use an alternative such as &lt;code&gt;strncmp&lt;/code&gt; or &lt;code&gt;strcmp&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e816148b054fbd5a75979c7bd416badb069989c2" translate="yes" xml:space="preserve">
          <source>This function is patterned after the equivalent function in Perl.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6e0e7f4113048cfa832c29901fb4c6f81a9857a" translate="yes" xml:space="preserve">
          <source>This function is provided for compatibility, but does nothing in Octave.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e56d60684d360d3041124f93c5154cbd8f11aec9" translate="yes" xml:space="preserve">
          <source>This function is provided for the benefit of programs like Emacs which might be controlling Octave and handling user input. The current command number is not incremented when this function is called. This is a feature, not a bug.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0631c944331a1916eb41f0d1e7cea5c967d2720" translate="yes" xml:space="preserve">
          <source>This function is recursive because it calls itself directly. It eventually terminates because each time it calls itself, it uses an argument that is one less than was used for the previous call. Once the argument is no longer greater than zero, it does not call itself, and the recursion ends.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dfdacb5909f2bc8beb1855d10dc5886984707cb" translate="yes" xml:space="preserve">
          <source>This function is similar to &lt;code&gt;get (h, &quot;children&quot;)&lt;/code&gt;, but also returns hidden objects (HandleVisibility = &lt;code&gt;&quot;off&quot;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8a9ca609d3326c85e3a29796d5209c75b7279d1" translate="yes" xml:space="preserve">
          <source>This function is the inverse of &lt;code&gt;mkpp&lt;/code&gt;: it extracts the inputs to &lt;code&gt;mkpp&lt;/code&gt; needed to create the piecewise polynomial structure &lt;var&gt;PP&lt;/var&gt;. The code below makes this relation explicit:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fcdb60ee55688c4ab79c14d90aa09757b781d1f" translate="yes" xml:space="preserve">
          <source>This function is useful for interactive programs. There is no limit to the number of options that may be passed in, but it may be confusing to present more than will fit easily on one screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="100ba22a9f31e38ddf2db2e79f05fa086f3e5e61" translate="yes" xml:space="preserve">
          <source>This function is usually used as a prelude to interpolation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0557e6dba45b599e93144c9fdcd80cc14623877" translate="yes" xml:space="preserve">
          <source>This function just hands off the work to the normal Octave &lt;code&gt;polyval&lt;/code&gt; function. Another interesting example of an overloaded function for the polynomial class is the &lt;code&gt;plot&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a1d60b3e05a8755795b9c8c8a26ac67db8e29bd" translate="yes" xml:space="preserve">
          <source>This function makes the current figure visible, and places it on top of of all other plot windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ec40d2305f984b9a498f843498f53c0c6e107ae" translate="yes" xml:space="preserve">
          <source>This function places caps at the open ends of isosurfaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a3e36c8902085b1cf06c2d709abcfccee6d67f3" translate="yes" xml:space="preserve">
          <source>This function produces output like this</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="950a880010049a2c6e660dab28350d77ef591420" translate="yes" xml:space="preserve">
          <source>This function sends the alarm character &lt;code&gt;&quot;\a&quot;&lt;/code&gt; to the terminal. Depending on the user&amp;rsquo;s configuration this may produce an audible beep, a visual bell, or nothing at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56f9771e861d52f00afe7fafae376f4882a4cfff" translate="yes" xml:space="preserve">
          <source>This function should only be employed if &lt;code&gt;WIFEXITED&lt;/code&gt; returned true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f43bd1a913e366ca04f5a4a2d71345ccd02ede8" translate="yes" xml:space="preserve">
          <source>This function should only be employed if &lt;code&gt;WIFSIGNALED&lt;/code&gt; returned true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ab0b5bb018569a7408c5a764116dce9a98ee3c8" translate="yes" xml:space="preserve">
          <source>This function should only be employed if &lt;code&gt;WIFSIGNALED&lt;/code&gt; returned true. The macro used to implement this function is not specified in POSIX.1-2001 and is not available on some Unix implementations (e.g., AIX, SunOS).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94d7cf3030bbf4b29b0484a5f051f6be1be10092" translate="yes" xml:space="preserve">
          <source>This function should only be employed if &lt;code&gt;WIFSTOPPED&lt;/code&gt; returned true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="312e56f7a2ff98fdfa316eaaaf45bf392ea92170" translate="yes" xml:space="preserve">
          <source>This function uses libcurl. Curl supports, among others, the HTTP, FTP, and FILE protocols. Username and password may be specified in the URL, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d911d917acf58063348aa01b9d721a4f9bd4635c" translate="yes" xml:space="preserve">
          <source>This function uses libcurl. Curl supports, among others, the HTTP, FTP, and FILE protocols. Username and password may be specified in the URL. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4936ed4237c54e8c291494e9cf986c1a4e043ffa" translate="yes" xml:space="preserve">
          <source>This gives:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ed95294888156eff35bf9cdd540cb2bf6e36ad3" translate="yes" xml:space="preserve">
          <source>This has uses in matrix calculus where the underlying matrix is symmetric and it would be pointless to keep values above the main diagonal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f199c2dc4d4e42d9d89e9c3a2a20b04edd3ea921" translate="yes" xml:space="preserve">
          <source>This implementation behaves in exactly the same way as the previous implementation of &lt;code&gt;count_calls&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9bf15ef093ec055bd54d1f1bb0b29db3999eb25" translate="yes" xml:space="preserve">
          <source>This implementation handles any number of input arguments, but it&amp;rsquo;s also a very simple solution to the problem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cd1472bf6083e344aac915ac3a6e87e940d7163" translate="yes" xml:space="preserve">
          <source>This is a difficult test case used to evaluate eigenvalue algorithms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdfc38c23b9ba1b809a2c472a36ae6aedc6e4b10" translate="yes" xml:space="preserve">
          <source>This is a fairly difficult integration (plot the function over the range of integration to see why).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="902dce5711f992f5c5164bd3f49fa0c28129570c" translate="yes" xml:space="preserve">
          <source>This is a permutation such that the Cholesky factorization of &lt;code&gt;&lt;var&gt;S&lt;/var&gt; (&lt;var&gt;p&lt;/var&gt;, &lt;var&gt;p&lt;/var&gt;)&lt;/code&gt; tends to be sparser than the Cholesky factorization of &lt;var&gt;S&lt;/var&gt; itself. &lt;code&gt;amd&lt;/code&gt; is typically faster than &lt;code&gt;symamd&lt;/code&gt; but serves a similar purpose.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5f8458c4e4012dee126a2b65d6f309a793b9ada" translate="yes" xml:space="preserve">
          <source>This is a required file containing information about the package. See &lt;a href=&quot;the-description-file#The-DESCRIPTION-File&quot;&gt;The DESCRIPTION File&lt;/a&gt;, for details on this file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6beec94d6433ed157df8ae45d1f1735528e3849" translate="yes" xml:space="preserve">
          <source>This is a required file containing the license of the package. No restrictions is made on the license in general. If however the package contains dynamically linked functions the license must be compatible with the GNU General Public License.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52d57dbf23250f58f48b480c2405d99a4f4166a1" translate="yes" xml:space="preserve">
          <source>This is a sufficient specification to begin writing the constructor for the polynomial class. All object oriented classes in Octave must be located in a directory that is the name of the class prepended with the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77f06266a1027636742f8afaf97830f05ff1f14b" translate="yes" xml:space="preserve">
          <source>This is also true of assignments to lists of values, so the following is a valid expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="538ed8bc43e28a6d55cffb1c0208a3d8f8c3bea4" translate="yes" xml:space="preserve">
          <source>This is am optional file describing instructions on how to cite the package for publication. It will be displayed verbatim by the function &lt;code&gt;citation&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="847d391fe3beddb3aaedeb808d38f046cafc5506" translate="yes" xml:space="preserve">
          <source>This is an alias for the &lt;code&gt;isalpha&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2520d264989a662ea106833745280031de8a83e2" translate="yes" xml:space="preserve">
          <source>This is an alias for the function &lt;code&gt;OCTAVE_HOME&lt;/code&gt; provided for compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3282d80bc0dfb1dd5535a8ca5a47c09c15574b81" translate="yes" xml:space="preserve">
          <source>This is an alternative method to specify &lt;var&gt;idx&lt;/var&gt;. When specifying it in this way, its value can also be the string &lt;code&gt;&quot;all&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ecad9c53df7a67876faaa7a5d922e353da6830a" translate="yes" xml:space="preserve">
          <source>This is an optional file describing all the changes made to the package source files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c84f74ee9cfd0170075c80e8eabfab77189e15dc" translate="yes" xml:space="preserve">
          <source>This is an optional file describing all user-visible changes worth mentioning. As this file increases on size, old entries can be moved into</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="826430352946b01b627a61764759f22ba1f33d67" translate="yes" xml:space="preserve">
          <source>This is an optional file describing old entries from the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12bf56c2abcf463dde94d6ed94c155d77dbf29ae" translate="yes" xml:space="preserve">
          <source>This is an optional file describing the functions provided by the package. If this file is not given then one with be created automatically from the functions in the package and the &lt;code&gt;Categories&lt;/code&gt; keyword in the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70c9330cb7f9cc5636b0cbebe0fdd5f378d653d9" translate="yes" xml:space="preserve">
          <source>This is an optional function that is run after the installation of a package. This function is called with a single argument, a struct with fields names after the data in the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1accb88b1a443eda36a5cc6facc96a35ecd7124" translate="yes" xml:space="preserve">
          <source>This is an optional function that is run prior to the installation of a package. This function is called with a single argument, a struct with fields names after the data in the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fd4089ef0ffa6598067b0d1145f7ee698b611ae" translate="yes" xml:space="preserve">
          <source>This is an optional function that is run prior to the removal of a package. This function is called with a single argument, a struct with fields names after the data in the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="391800e5160cd1ce1c8fa8c22bc1d122ae33b5d8" translate="yes" xml:space="preserve">
          <source>This is cleaner and more memory efficient than using a dummy variable. The &lt;code&gt;nargout&lt;/code&gt; value for the right-hand side expression is not affected. If the assignment is used as an expression, the return value is a comma-separated list with the ignored values dropped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5814f2e01ed3bbc2e7ae923183b221c05580a6ab" translate="yes" xml:space="preserve">
          <source>This is conceptually equivalent to &lt;code&gt;inv (A) * b&lt;/code&gt;, but avoids computing the inverse of a matrix directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c5c89b0912454ed85fcc78d9c40a247275d4a17" translate="yes" xml:space="preserve">
          <source>This is consistent with the ordering used by &lt;em&gt;max&lt;/em&gt;, &lt;em&gt;min&lt;/em&gt; and &lt;em&gt;sort&lt;/em&gt;, but is not consistent with &lt;small&gt;MATLAB&lt;/small&gt;, which only compares the real parts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5fefbd13aaa4e19a3b034bb880ebcdb919420b9" translate="yes" xml:space="preserve">
          <source>This is defined as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57d7667ecc9371386935ac73cc49b470544fbed9" translate="yes" xml:space="preserve">
          <source>This is defined as, &lt;var&gt;theta&lt;/var&gt; = &lt;code&gt;atan2 (&lt;var&gt;y&lt;/var&gt;, &lt;var&gt;x&lt;/var&gt;)&lt;/code&gt;, in radians.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64ad3c2cd6f4b5e2641bfc0bc092458ad97a0597" translate="yes" xml:space="preserve">
          <source>This is defined block by block as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e75165bd6c0c435e57a13f622ac0560e9f8aea5" translate="yes" xml:space="preserve">
          <source>This is equivalent to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78f8d59bba718b21fc029b9a6984be15a644ce92" translate="yes" xml:space="preserve">
          <source>This is equivalent to (&lt;code&gt;isalpha (&lt;var&gt;s&lt;/var&gt;) | isdigit (&lt;var&gt;s&lt;/var&gt;)&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4399ca1de81bbc6e805f1b676f44110de2d70a4f" translate="yes" xml:space="preserve">
          <source>This is equivalent to (&lt;code&gt;islower (&lt;var&gt;s&lt;/var&gt;) | isupper (&lt;var&gt;s&lt;/var&gt;)&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e06bf2b532df667906e9eb9b8c2ca8f960fe2fd3" translate="yes" xml:space="preserve">
          <source>This is equivalent to &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&amp;nbsp;.^&amp;nbsp;&lt;var&gt;y&lt;/var&gt;&lt;/code&gt;, except that &lt;code&gt;realpow&lt;/code&gt; reports an error if any return value is complex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aca6bd432826f4ee785cd488ecdca027d13d8986" translate="yes" xml:space="preserve">
          <source>This is equivalent to &lt;code&gt;ctime (time ())&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="463ea821d6b25208bd2d64388ded9ab655746372" translate="yes" xml:space="preserve">
          <source>This is equivalent to &lt;code&gt;mkoctfile --mex [options] file&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3915ec730b64eb7324334c55ee083d59f80bbce3" translate="yes" xml:space="preserve">
          <source>This is equivalent to &lt;code&gt;sqrt (&lt;var&gt;x&lt;/var&gt;.^2 + &lt;var&gt;y&lt;/var&gt;.^2)&lt;/code&gt;, but is calculated in a manner that avoids overflows for large values of &lt;var&gt;x&lt;/var&gt; or &lt;var&gt;y&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e19d51f5c2d1a1ec72f794c0fe0edf943ba2c4d8" translate="yes" xml:space="preserve">
          <source>This is equivalent to &lt;code&gt;sum (conj (&lt;var&gt;X&lt;/var&gt;) .* &lt;var&gt;Y&lt;/var&gt;, &lt;var&gt;dim&lt;/var&gt;)&lt;/code&gt;, but avoids forming a temporary array and is faster. When &lt;var&gt;X&lt;/var&gt; and &lt;var&gt;Y&lt;/var&gt; are column vectors, the result is equivalent to &lt;code&gt;&lt;var&gt;X&lt;/var&gt;' * &lt;var&gt;Y&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90995851ac36a2b8648eb3ced1380e7572539384" translate="yes" xml:space="preserve">
          <source>This is equivalent to calling &lt;code&gt;fscanf&lt;/code&gt; with &lt;var&gt;fid&lt;/var&gt; = &lt;code&gt;stdin&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a28c5d500d2ae7986a2210df59107bfd15fd69e" translate="yes" xml:space="preserve">
          <source>This is equivalent to rounding towards negative infinity. If &lt;var&gt;x&lt;/var&gt; is complex, return &lt;code&gt;floor (real (&lt;var&gt;x&lt;/var&gt;)) + floor (imag (&lt;var&gt;x&lt;/var&gt;)) * I&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b17ef95948b73ac2ba2561576c02e4112fd4d8c9" translate="yes" xml:space="preserve">
          <source>This is equivalent to rounding towards positive infinity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="910889def20e09d983d17db9f230c48eacd45a44" translate="yes" xml:space="preserve">
          <source>This is equivalent to rounding towards zero. If &lt;var&gt;x&lt;/var&gt; is complex, return &lt;code&gt;fix (real (&lt;var&gt;x&lt;/var&gt;)) + fix (imag (&lt;var&gt;x&lt;/var&gt;)) * I&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86ca11ed808ba71955b6b702d42b5be523bec9f1" translate="yes" xml:space="preserve">
          <source>This is equivalent to the polynomial found by multiplying together all the common roots. Together with deconv, you can reduce a ratio of two polynomials.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7760e11dfd39f96a4705664ec9e9d140d6a38333" translate="yes" xml:space="preserve">
          <source>This is especially important for loops with &quot;cheap&quot; bodies. Often it suffices to vectorize just the innermost loop to get acceptable performance. A general rule of thumb is that the &quot;order&quot; of the vectorized body should be greater or equal to the &quot;order&quot; of the enclosing loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8583958409847ec94b7f38558c384b6bab578d5a" translate="yes" xml:space="preserve">
          <source>This is given by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ca2d7b971aaaf4f270a39d529b10a7ca73916bd" translate="yes" xml:space="preserve">
          <source>This is like &lt;code&gt;fscanf&lt;/code&gt;, except that the characters are taken from the string &lt;var&gt;string&lt;/var&gt; instead of from a stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b70b563899d45ada181a3ccae1a5f8bc46d7c232" translate="yes" xml:space="preserve">
          <source>This is like &lt;code&gt;printf&lt;/code&gt;, except that the output is returned as a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6e81a14de059aefb36b3ad6707c89a3cbb869aa" translate="yes" xml:space="preserve">
          <source>This is most easily demonstrated by example. Suppose the programmer needs a FIR filter, i.e., a filter with a numerator polynomial but a denominator of 1. In traditional Octave programming this would be performed as follows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2681eae7cb935fdd23a554241797cb1f7b3d98b6" translate="yes" xml:space="preserve">
          <source>This is normally useful when doing object-oriented programming and there is a requirement to call one of Octave&amp;rsquo;s base functions rather than the overloaded one of a new class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c642a946a5ef20b9c56cdcfcd3abbff58c71153" translate="yes" xml:space="preserve">
          <source>This is not a practical example of the &lt;code&gt;continue&lt;/code&gt; statement, but it should give you a clear understanding of how it works. Normally, one would probably write the loop like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8237ab5ad04922df4b3b733248c61ea2229a849" translate="yes" xml:space="preserve">
          <source>This is not the same as &lt;code&gt;x &amp;lt; 0.0&lt;/code&gt;, because IEEE 754 floating point allows zero to be signed. The comparison &lt;code&gt;-0.0 &amp;lt; 0.0&lt;/code&gt; is false, but &lt;code&gt;signbit (-0.0)&lt;/code&gt; will return a nonzero value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bbbb13bd3f943450f4a13ecfbc59acced034840" translate="yes" xml:space="preserve">
          <source>This is one way to normalize columns of a matrix &lt;var&gt;X&lt;/var&gt; to unit norm:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5159c4fda56a596f883293c7e62f46536ff3e86c" translate="yes" xml:space="preserve">
          <source>This is only possible if the call was done using &lt;code&gt;WUNTRACED&lt;/code&gt; or when the child is being traced (see ptrace(2)).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac5c53eadf685f560de5b22f92b00966ccaa21b0" translate="yes" xml:space="preserve">
          <source>This is related to the least squares solution of &lt;code&gt;&lt;var&gt;A&lt;/var&gt; \ &lt;var&gt;b&lt;/var&gt;&lt;/code&gt;, by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ef9623dd5fcb1f13c1c2608fc898fefdf1091fb" translate="yes" xml:space="preserve">
          <source>This is the e-mail address to list after the name in the author field. By default it guesses &lt;code&gt;&amp;lt;$LOGNAME@$HOSTNAME&amp;gt;&lt;/code&gt;, and if &lt;code&gt;$HOSTNAME&lt;/code&gt; is not defined it uses &lt;code&gt;uname -n&lt;/code&gt;. You probably want to override this. Be sure to use the format &lt;code&gt;&lt;a href=&quot;mailto:user@host&quot;&gt;user@host&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e16b59e4bd6319aca01f3f1a7598c864a4a334c" translate="yes" xml:space="preserve">
          <source>This is the location of user local m-files. Be sure it is in your path. The default is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4860f9f14464f9d40dfc198a17cb16007b93fe54" translate="yes" xml:space="preserve">
          <source>This is the name to put after the &quot;## Author:&quot; field of new functions. By default it guesses from the &lt;code&gt;gecos&lt;/code&gt; field of the password database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40513e3c57ee73e4bc7ea5bb85b4a6f917e6875b" translate="yes" xml:space="preserve">
          <source>This is the number of combinations of &lt;var&gt;n&lt;/var&gt; items taken in groups of size &lt;var&gt;k&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41a9d9c19d4a0d0397a5bece099769288b72ea2f" translate="yes" xml:space="preserve">
          <source>This is typically used for large matrices, where the cost of calculating &lt;code&gt;norm (&lt;var&gt;A&lt;/var&gt;)&lt;/code&gt; is prohibitive and an approximation to the 2-norm is acceptable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d708a1e34b9fae20e2e8dc26b1e77c8f8f94d40" translate="yes" xml:space="preserve">
          <source>This is useful for building a matrix incrementally by a sequence of indexed assignments. Subsequent indexed assignments after &lt;code&gt;spalloc&lt;/code&gt; will reuse the pre-allocated memory, provided they are of one of the simple forms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57dcd591bd63accba00855fb5db3583a910f0104" translate="yes" xml:space="preserve">
          <source>This is useful for checking to that the number of output arguments supplied to a function is within an acceptable range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d00fff40673009e7a584512281ef6b03924ecd38" translate="yes" xml:space="preserve">
          <source>This is useful for functions that do not accept array arguments. If the function does accept array arguments it is better to call the function directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2b166094f1268d8f4dd00beba0aca1a10482696" translate="yes" xml:space="preserve">
          <source>This is useful for implementing functions where arguments can either be scalars or of common size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd37002f9ad750dd8755a9a0a0216da1a84ce4ed" translate="yes" xml:space="preserve">
          <source>This is useful to protect temporary changes to global variables from possible errors. For example, the following code will always restore the original value of the global variable &lt;code&gt;frobnosticate&lt;/code&gt; even if an error occurs in the first part of the &lt;code&gt;unwind_protect&lt;/code&gt; block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="931728f491e43285a80d7eb161d43c1b74ce9d3b" translate="yes" xml:space="preserve">
          <source>This isn&amp;rsquo;t merely easier to write; it is also internally much easier to optimize. Octave delegates this operation to an underlying implementation which, among other optimizations, may use special vector hardware instructions or could conceivably even perform the additions in parallel. In general, if the code is vectorized, the underlying implementation has more freedom about the assumptions it can make in order to achieve faster execution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9c188673f6794fa0d8938c6935f41599d09470e" translate="yes" xml:space="preserve">
          <source>This kind of code can however be very cumbersome to both write and maintain. To overcome this problem Octave supports the &lt;code&gt;switch&lt;/code&gt; statement. Using this statement, the above example becomes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df9effc0619fb194648cb4137318e241924cb378" translate="yes" xml:space="preserve">
          <source>This linear transformation of &lt;var&gt;x&lt;/var&gt; improves the numerical stability of the fit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe36d35ff625c5712b1f388de402aad57ff9c364" translate="yes" xml:space="preserve">
          <source>This manual provides comprehensive documentation on how to install, run, use, and extend GNU Octave. Additional chapters describe how to report bugs and help contribute code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4df057d216be9b11b191fc3f61bc96ed8fbe68d0" translate="yes" xml:space="preserve">
          <source>This matches a literal &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91a8024a2838aca58f702e884ebf87149c4d8884" translate="yes" xml:space="preserve">
          <source>This may be useful, for example, when using inline functions with numerical integration or optimization where a vector-valued function is expected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47bcbc9ade661d71a8aa437e3218b0e1fcb295a6" translate="yes" xml:space="preserve">
          <source>This may include either wildcard replacement or special character escaping.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd969aaa3e2122735da57a2f88112183fcb66a9d" translate="yes" xml:space="preserve">
          <source>This means, for example, adding new objects to the scene will not retarget the camera:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0466d142ab5a94a94ed1ffa6367ad2166f2b386b" translate="yes" xml:space="preserve">
          <source>This method is also called when an object appears as lvalue with cs-list indexing, i.e., &lt;code&gt;object{&amp;hellip;}&lt;/code&gt; or &lt;code&gt;object(&amp;hellip;).field&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20f7601e2f2d604a7db9d3fa1be3992815f39fa5" translate="yes" xml:space="preserve">
          <source>This method returns a pointer to the underlying data of the matrix or array so that it can be manipulated directly, either within Octave or by an external library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c21ade32556b2bcbc8936ce6f1c9d3614362fb97" translate="yes" xml:space="preserve">
          <source>This of course assumes that the file &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07ccfdeddc514ddc4afc039110443b0e2f9e0fa1" translate="yes" xml:space="preserve">
          <source>This operation broadcasts the two matrices with permuted dimensions across each other during elementwise multiplication in order to obtain a larger 3-D array, and this array is then summed along the third dimension. A moment of thought will prove that this operation is simply the much faster ordinary matrix multiplication, &lt;code&gt;&lt;var&gt;c&lt;/var&gt; = &lt;var&gt;a&lt;/var&gt;*&lt;var&gt;b&lt;/var&gt;;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92890cb4ff062d1984bd9e01f84a608d45f3393a" translate="yes" xml:space="preserve">
          <source>This option allows for truncation of intermediate floating point results in calculations. It is only necessary for certain platforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53e23a978befb4936d6e391d300380ff9390479a" translate="yes" xml:space="preserve">
          <source>This option exists for &lt;small&gt;MATLAB&lt;/small&gt; compatibility, but has no effect. For maximum performance when reading multiple images from a single file, use the &lt;code&gt;&quot;Index&quot;&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e644feab9ff0894c365d73a8253872fc87042080" translate="yes" xml:space="preserve">
          <source>This option is accepted for backward compatibility but is ignored. Octave can now support multi-dimensional HDF data and automatically modifies variable names if they are invalid Octave identifiers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69e185983f7d5425a9d88bfd6cdaf4202b637592" translate="yes" xml:space="preserve">
          <source>This option is accepted for backward compatibility but is ignored. Octave now overwrites variables currently in memory with those of the same name found in the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d88fbf7a9d970663b5f06747296769ec947efdfb" translate="yes" xml:space="preserve">
          <source>This option is present for compatibility but is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c598f6d597af0ece6ee5f781cde8ecae080243ff" translate="yes" xml:space="preserve">
          <source>This option is required by the &lt;code&gt;&quot;compute consistent initial condition&quot;&lt;/code&gt; and &lt;code&gt;&quot;exclude algebraic variables from error test&quot;&lt;/code&gt; options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b250ff69dc9d2fb715b6eedd8e3583420117c17" translate="yes" xml:space="preserve">
          <source>This option only affects PDF outputs, unless it is combined with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c8f086bac8d4edf68b8c45d3af8cf2d35445e8f" translate="yes" xml:space="preserve">
          <source>This option only has an effect if the &lt;code&gt;&quot;enforce inequality constraints&quot;&lt;/code&gt; option is nonzero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2ca295340b0d5086f31cabc79e412b0e857e059" translate="yes" xml:space="preserve">
          <source>This plot shows the contributions of each column value to the row sum. It is functionally similar to &lt;code&gt;plot (&lt;var&gt;x&lt;/var&gt;, cumsum (&lt;var&gt;y&lt;/var&gt;, 2))&lt;/code&gt;, except that the area under the curve is shaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f31038bf004fced8eee2887d4b642b3036a10ed" translate="yes" xml:space="preserve">
          <source>This prevents long and confusing output from large deeply nested structures. The number of levels to print for nested structures may be set with the function &lt;code&gt;struct_levels_to_print&lt;/code&gt;, and the function &lt;code&gt;print_struct_array_contents&lt;/code&gt; may be used to enable printing of the contents of structure arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="458a406d885108ae10c1a7952dcfc1fa9af06c81" translate="yes" xml:space="preserve">
          <source>This prints a table like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61c6a33772a2804b49b4494cce6bcdda72f1fb72" translate="yes" xml:space="preserve">
          <source>This property controls how results are calculated at the boundaries (endpoints) of the window. Possible values are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb1882bc9875a4b265f0e76a5e942cfd7e0879a0" translate="yes" xml:space="preserve">
          <source>This property controls the size of the head of the arrows in the quiver series. The default value is 0.2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90846bc55e5a9761aa2098305bb151bd6437bc66" translate="yes" xml:space="preserve">
          <source>This results in a sparse matrix with the same structure as &lt;var&gt;S&lt;/var&gt;. The function &lt;var&gt;f&lt;/var&gt; can be passed as a string, a function handle, or an inline function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bd7630bf44e145b16f71092ecf074e49a8af201" translate="yes" xml:space="preserve">
          <source>This returns a column vector &lt;var&gt;v&lt;/var&gt; of length 625. Later, you can restore the random number generator to the state &lt;var&gt;v&lt;/var&gt; using the form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dd4de32dadb489fb89b1b0408759854aa9168a2" translate="yes" xml:space="preserve">
          <source>This rule can lead to some strange looking names, for example &lt;code&gt;defaultlinelinewidth&quot;&lt;/code&gt; specifies the default &lt;code&gt;linewidth&lt;/code&gt; property for &lt;code&gt;line&lt;/code&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0f97049556217db3f98ca0e21b55c56ca605d26" translate="yes" xml:space="preserve">
          <source>This section contains a list of problems (and some apparent problems that don&amp;rsquo;t really mean anything is wrong) that may show up during installation of Octave.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff89efc0f282d78b3f48a2260537983e9114ae8e" translate="yes" xml:space="preserve">
          <source>This section describes how to call &lt;code&gt;printf&lt;/code&gt; and related functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="258e0da7ac4bea4439c457d5bec4ea8f71d2525c" translate="yes" xml:space="preserve">
          <source>This section describes known problems that affect users of Octave. Most of these are not Octave bugs per se&amp;mdash;if they were, we would fix them. But the result for a user may be like the result of a bug.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f82727987eb8cf7d8f10e24467a664f2cd97b25" translate="yes" xml:space="preserve">
          <source>This section describes miscellaneous conversions for &lt;code&gt;printf&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6804f4290260c794db828ec722edf1fbf7d7a054" translate="yes" xml:space="preserve">
          <source>This section describes the &lt;code&gt;scanf&lt;/code&gt; conversions for reading numeric values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8857b01c76f62d904d12ba835ed44a8e3a2d8090" translate="yes" xml:space="preserve">
          <source>This section describes the &lt;code&gt;scanf&lt;/code&gt; input conversions for reading string and character values: &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a03049dfdebee5590b1c8ef36d09e2693d77e3f" translate="yes" xml:space="preserve">
          <source>This section describes the options for the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddf2adf3abf91c5ab0851cd80159c11789438336" translate="yes" xml:space="preserve">
          <source>This section discusses the conversion specifications for floating-point numbers: the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="543a60f850a6c6ddc23fa3e11c03781fb662fe63" translate="yes" xml:space="preserve">
          <source>This section explains the notation conventions that are used in this manual. You may want to skip this section and refer back to it later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da61a6b4f10c1fb183586f2f1f2b8827ac47ae81" translate="yes" xml:space="preserve">
          <source>This section lists the built-in functions that are aware of diagonal and permutation matrices on input, or can return them as output. Passed to other functions, these matrices will in general trigger an implicit conversion. (Of course, user-defined dynamically linked functions may also work with diagonal or permutation matrices).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8aa9f714b23e897534ee34836d15f7592d21b6c9" translate="yes" xml:space="preserve">
          <source>This section provides details about the precise syntax of conversion specifications that can appear in a &lt;code&gt;printf&lt;/code&gt; template string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="127682d7c8dd74079602711374cee7c955c1d9c2" translate="yes" xml:space="preserve">
          <source>This shows a problem with character matrices. It simply isn&amp;rsquo;t possible to represent strings of different lengths. The solution is to use a cell array of strings, which is described in &lt;a href=&quot;cell-arrays-of-strings#Cell-Arrays-of-Strings&quot;&gt;Cell Arrays of Strings&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e3833a5fbdb4d270079e2d2e7c57bc0ed17fac8" translate="yes" xml:space="preserve">
          <source>This shows an important general concept about using arrays for indexing instead of looping over an index variable. See &lt;a href=&quot;index-expressions#Index-Expressions&quot;&gt;Index Expressions&lt;/a&gt;. Also use boolean indexing generously. If a condition needs to be tested, this condition can also be written as a boolean index. For instance, instead of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbbb1fc366235468ec84d6f5c8603025fef89654" translate="yes" xml:space="preserve">
          <source>This shows that &lt;var&gt;A&lt;/var&gt; has 7,840 nonzeros, the complete LU factorization has 126,478 nonzeros, and the incomplete LU factorization, with 0 level of fill-in, has 7,840 nonzeros, the same amount as &lt;var&gt;A&lt;/var&gt;. Taken from: &lt;a href=&quot;http://www.mathworks.com/help/matlab/ref/ilu.html&quot;&gt;http://www.mathworks.com/help/matlab/ref/ilu.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a3e4a97557e9e50cd8e1b6807e5e87f34946598" translate="yes" xml:space="preserve">
          <source>This shows that most of the run time was spent executing the function &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d134bec285d423d2eaf361f33716b9046cd311d8" translate="yes" xml:space="preserve">
          <source>This space saving optimization may be disabled using the function &lt;em&gt;disable_range&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e449fea8b0332a86ca2c7f5a1c5c86c84b7bbafd" translate="yes" xml:space="preserve">
          <source>This specifies the number of bytes to use for the internal buffer. A modest speed improvement may be obtained by setting this to a large value when reading a large file, especially if the input contains long strings. The default is 4096, or a value dependent on &lt;var&gt;n&lt;/var&gt; if that is specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2ee14197f75644a7bc0dd9eabb7ca91f8f00faa" translate="yes" xml:space="preserve">
          <source>This string defines whether the light emanates from a light source at infinite distance (&lt;code&gt;&quot;infinite&quot;&lt;/code&gt;) or from a local point source (&lt;code&gt;&quot;local&quot;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d4f342b409fde8a717a08f9756c999456f8ddfd" translate="yes" xml:space="preserve">
          <source>This value determines whether the editor should be started in async mode (editor is started in the background and Octave continues) or sync mode (Octave waits until the editor exits). Set it to &lt;code&gt;&quot;sync&quot;&lt;/code&gt; to start the editor in sync mode. The default is &lt;code&gt;&quot;async&quot;&lt;/code&gt; (see &lt;a href=&quot;controlling-subprocesses#XREFsystem&quot;&gt;system&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf0863240ad29017f670600f9736199a8c715501" translate="yes" xml:space="preserve">
          <source>This will also inhibit printing of the normal traceback message (you will only see the top-level error message).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd99a47d2e6ea16983d010aada7f51914e3c3e27" translate="yes" xml:space="preserve">
          <source>This will be faster than using regexp in most cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dd8223ba3d56417dc3cb7a954ba049f4911f0ee" translate="yes" xml:space="preserve">
          <source>This will be stored as three vectors &lt;var&gt;cidx&lt;/var&gt;, &lt;var&gt;ridx&lt;/var&gt; and &lt;var&gt;data&lt;/var&gt;, representing the column indexing, row indexing and data respectively. The contents of these three vectors for the above matrix will be</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf317a81f21337bfd0c167bbfeb4c03b065c1c99" translate="yes" xml:space="preserve">
          <source>This will create a file called</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1580e8f082962c59618c6e86ec9f8f178bbda90" translate="yes" xml:space="preserve">
          <source>This will install a copy of Octave, its libraries, and its documentation in the destination directory. As distributed, Octave is installed in the following directories. In the table below, &lt;var&gt;prefix&lt;/var&gt; defaults to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d82c31911b6d4e8b23da7918c939441a33b3b054" translate="yes" xml:space="preserve">
          <source>This will plot the cosine and sine functions and label them accordingly in the legend.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2f1b2df09a1c701cf2208a510768ccb52d2584b" translate="yes" xml:space="preserve">
          <source>This will produce an error about nonconformant arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d3e5f93df7acf9454dc5b54fb252ac8a91f88c9" translate="yes" xml:space="preserve">
          <source>This workaround description will not appear when listing functions in the package with &lt;code&gt;pkg describe&lt;/code&gt; but they will be published in the HTML documentation online. Workaround descriptions can use any HTML markup, but keep in mind that it will be enclosed in a bold-italic environment. For the special case of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3713b384bb63571b47b4994b96e381d043d5ce97" translate="yes" xml:space="preserve">
          <source>This works well as long as it is acceptable to have the name of the variable (or &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65323958d3048890f3132eab72c06aa910100d26" translate="yes" xml:space="preserve">
          <source>Three element range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c7747c575f1d0ec8256555e20610d72fcff4c12" translate="yes" xml:space="preserve">
          <source>Three functions are available for setting and determining the position of the file pointer for a given file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e74c3c69d4583b7e238b4cddd79c2fc0732f13f" translate="yes" xml:space="preserve">
          <source>Three-Dimensional Plots</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0a5925b4e675444eee06b4908ab7b4e2e44d2c5" translate="yes" xml:space="preserve">
          <source>Three-dimensional Function Plotting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82ef08ad1ef7bedcca7aaac7ddddcf65a5b54d17" translate="yes" xml:space="preserve">
          <source>Three-dimensional Geometric Shapes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d015c41ade78cde491f126789680280edc24655e" translate="yes" xml:space="preserve">
          <source>Three-dimensional interpolation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3593ccd96f6c0fad4e362d18ac37226707f2ea46" translate="yes" xml:space="preserve">
          <source>Thu</source>
          <target state="translated">Thu</target>
        </trans-unit>
        <trans-unit id="76031ddf92450ba52c1e3945097079807a9065c2" translate="yes" xml:space="preserve">
          <source>Thursday</source>
          <target state="translated">Thursday</target>
        </trans-unit>
        <trans-unit id="e38f4f305df35e4db9c55bb8ad4bf4dcecd25211" translate="yes" xml:space="preserve">
          <source>Thus,</source>
          <target state="translated">Thus,</target>
        </trans-unit>
        <trans-unit id="f87ff9412739e7b3ab09dcc61b0f2cb9cd69fc30" translate="yes" xml:space="preserve">
          <source>Thus, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e849577fc0133c83af9390dce4d9680899cfe629" translate="yes" xml:space="preserve">
          <source>Tilde expansion is performed on each of the patterns before looking for matching filenames. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3a19b8b3f0a50482bfe492d3ae8081ad87bf778" translate="yes" xml:space="preserve">
          <source>Time (in seconds) used for solving LP/MIP problem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f3f471024a31d26e7d63d04fc03146892c87ab9" translate="yes" xml:space="preserve">
          <source>Time Series: Theory and Methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2529252de262a437d9f27bd7bda373dc8b2d105" translate="yes" xml:space="preserve">
          <source>Time fields:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa0948c6820022957d32ea97fd608e1a2fa0e6ce" translate="yes" xml:space="preserve">
          <source>Time in 1/100ths of a second (0 to 65535) which must expire before displaying the next image in an animated sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31f01ac2170a2f81355994cf10fc1444023c1d96" translate="yes" xml:space="preserve">
          <source>Time in seconds since 00:00:00, Jan 1, 1970 (a nonstandard extension).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eebae61e2d116d63e897de6f6371b8c29e18b5ce" translate="yes" xml:space="preserve">
          <source>Time limit exhausted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86e70eee03e968558f825f38301c680910164573" translate="yes" xml:space="preserve">
          <source>Time of last access in the same form as time values returned from &lt;code&gt;time&lt;/code&gt;. See &lt;a href=&quot;timing-utilities#Timing-Utilities&quot;&gt;Timing Utilities&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fc8c21257764c7948111532cec7b25dfd35ec90" translate="yes" xml:space="preserve">
          <source>Time of last file status change in the same form as time values returned from &lt;code&gt;time&lt;/code&gt;. See &lt;a href=&quot;timing-utilities#Timing-Utilities&quot;&gt;Timing Utilities&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d18f25183bb11e770b37d20545ea06945241c988" translate="yes" xml:space="preserve">
          <source>Time of last modification in the same form as time values returned from &lt;code&gt;time&lt;/code&gt;. See &lt;a href=&quot;timing-utilities#Timing-Utilities&quot;&gt;Timing Utilities&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce1f0f99aac0d33a876e6dae78dcd4225a32ab98" translate="yes" xml:space="preserve">
          <source>Time zone (EDT), or nothing if no time zone is determinable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0a4abcaa4a3ea9e90792df1a73c737deb94760c" translate="yes" xml:space="preserve">
          <source>Time zone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4995d29b8959a8e7f603c03cdeca33b68f8bba73" translate="yes" xml:space="preserve">
          <source>Time, 12-hour (hh:mm:ss [AP]M).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bbf83b25a01e3ac34616016ed10189e7aba10fa" translate="yes" xml:space="preserve">
          <source>Time, 24-hour (hh:mm).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a7adef133b797c4c0011b2961ada2fe4ba4284d" translate="yes" xml:space="preserve">
          <source>Time, 24-hour (hh:mm:ss).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b16c9424b0393814b0c439485c48a56cbb257469" translate="yes" xml:space="preserve">
          <source>Timestamp of file modification (string value).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b31aea78b01ef0e41cd22fc3b109124771ecfeb5" translate="yes" xml:space="preserve">
          <source>Timestamp of file modification as serial date number (double).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="455760175aa175b98349ebdd215e186952f19536" translate="yes" xml:space="preserve">
          <source>Timing Utilities</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a6e1ca1b04a63f5015ca1442a91a25156cabb18" translate="yes" xml:space="preserve">
          <source>Timing, however, is not the only information available from the profile. The attribute column shows us that &lt;code&gt;timesteps&lt;/code&gt; calls itself recursively. This may not be that remarkable in this example (since it&amp;rsquo;s clear anyway), but could be helpful in a more complex setting. As to the question of why is there a &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="768e0c1c69573fb588f61f1308a015c11468e05f" translate="yes" xml:space="preserve">
          <source>Title</source>
          <target state="translated">Title</target>
        </trans-unit>
        <trans-unit id="bcc1ce99199ce8f64af33c739b5c52c06e462ebf" translate="yes" xml:space="preserve">
          <source>Title for the audio file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b8631c25f1cfd154f4169b7231a6814b336e0e2" translate="yes" xml:space="preserve">
          <source>To a very good first approximation, the goal in vectorization is to write code that avoids loops and uses whole-array operations. As a trivial example, consider</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01ea5104fe9cd9ded6f021374a8210a0c9494fc5" translate="yes" xml:space="preserve">
          <source>To access the elements of a cell array, it can be indexed with the { and } operators. Thus, the variable created in the previous example can be indexed like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a99b4248f083dbfa3b7cf325da157f9382205f18" translate="yes" xml:space="preserve">
          <source>To avoid degrading performance unnecessarily by checking the time stamps on functions that are not likely to change, Octave assumes that function files in the directory tree</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e19220939af9ea2a5a0cf5d0fc6e7a27b8495ef" translate="yes" xml:space="preserve">
          <source>To avoid segmentation faults causing Octave to abort, this function explicitly checks that there are sufficient arguments available before accessing these arguments. It then obtains two multi-dimensional arrays of type &lt;code&gt;NDArray&lt;/code&gt; and adds these together. Note that the &lt;code&gt;array_value&lt;/code&gt; method is called without using the &lt;code&gt;is_matrix_type&lt;/code&gt; method. If an error occurs when attempting to extract the value, Octave will print a message and throw an exception. The reason to prefer this coding structure is that the arguments might be a type which is not an &lt;code&gt;NDArray&lt;/code&gt;, but for which it would make sense to convert them to one. The &lt;code&gt;array_value&lt;/code&gt; method allows this conversion to be performed transparently when possible. If you need to catch errors like this, and perform some kind of cleanup or other operation, you can catch the &lt;code&gt;octave_execution_error&lt;/code&gt; exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb627a7b9620b32c7cd5b554a1c1797211681da5" translate="yes" xml:space="preserve">
          <source>To be consistent with the Octave graphic handle classes, a class should also define the &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; methods. The &lt;code&gt;get&lt;/code&gt; method accepts one or two arguments. The first argument is an object of the appropriate class. If no second argument is given then the method should return a structure with all the properties of the class. If the optional second argument is given it should be a property name and the specified property should be retrieved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8150c779e1199a8484f3a60ee81e1ba9652950f7" translate="yes" xml:space="preserve">
          <source>To be more clear, the approximation &lt;var&gt;x&lt;/var&gt; is computed at the iteration &lt;code&gt;(&lt;var&gt;iter(1)&lt;/var&gt; - 1) * &lt;var&gt;restart&lt;/var&gt; + &lt;var&gt;iter(2)&lt;/var&gt;&lt;/code&gt;. Since the output &lt;var&gt;x&lt;/var&gt; corresponds to the minimal preconditioned residual solution, the total number of iterations that the method performed is given by &lt;code&gt;length (resvec) - 1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ee70055ea05297ef67b9cda4f7fddc4c866a0f9" translate="yes" xml:space="preserve">
          <source>To calculate for example the MD5 hash value of the string &lt;code&gt;&quot;abc&quot;&lt;/code&gt; the &lt;code&gt;hash&lt;/code&gt; function is called as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4e0f4b09d7ea0942a71e01a13f532ba2c901ccc" translate="yes" xml:space="preserve">
          <source>To call a method of an object the same structure indexing operator &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f82993e1ff555800963f63a0a9c8a9a481b73f4f" translate="yes" xml:space="preserve">
          <source>To check whether a variable belongs to a user class, the &lt;code&gt;isobject&lt;/code&gt; and &lt;code&gt;isa&lt;/code&gt; functions can be used. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49f7b828e5188337e322cf22041c6712962ac0d4" translate="yes" xml:space="preserve">
          <source>To clear the current figure, call the &lt;code&gt;clf&lt;/code&gt; function. To clear the current axis, call the &lt;code&gt;cla&lt;/code&gt; function. To bring the current figure to the top of the window stack, call the &lt;code&gt;shg&lt;/code&gt; function. To delete a graphics object, call &lt;code&gt;delete&lt;/code&gt; on its index. To close the figure window, call the &lt;code&gt;close&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f7872e426359190e0e4f9d3d2f248875ba6acc8" translate="yes" xml:space="preserve">
          <source>To compile Octave, you will need a recent version of &lt;code&gt;g++&lt;/code&gt; or other ANSI C++ compiler. In addition, you will need a Fortran 77 compiler or &lt;code&gt;f2c&lt;/code&gt;. If you use &lt;code&gt;f2c&lt;/code&gt;, you will need a script like &lt;code&gt;fort77&lt;/code&gt; that works like a normal Fortran compiler by combining &lt;code&gt;f2c&lt;/code&gt; with your C compiler in a single script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a2db47897bfaeb2a31f04ec5f535821cedb8557" translate="yes" xml:space="preserve">
          <source>To compute the matrix exponential, see &lt;a href=&quot;linear-algebra#Linear-Algebra&quot;&gt;Linear Algebra&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b72f37efd9b7233b34d438e336cef3944ee8040" translate="yes" xml:space="preserve">
          <source>To compute the matrix logarithm, see &lt;a href=&quot;linear-algebra#Linear-Algebra&quot;&gt;Linear Algebra&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08d99842644781a5b2b3fcd5c69b785245c0f4a9" translate="yes" xml:space="preserve">
          <source>To compute the matrix square root, see &lt;a href=&quot;linear-algebra#Linear-Algebra&quot;&gt;Linear Algebra&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daf3b6941424b6001fff695bc23b4325a956d174" translate="yes" xml:space="preserve">
          <source>To compute the pseudo-random sequence, &lt;code&gt;rand&lt;/code&gt; uses the Mersenne Twister with a period of &lt;em&gt;2^{19937}-1&lt;/em&gt; (See M. Matsumoto and T. Nishimura,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b17fc55ec118d2056f643d8ffa7e17f844b4530" translate="yes" xml:space="preserve">
          <source>To control the grid lines for an individual axes use the &lt;code&gt;set&lt;/code&gt; function. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99329f88f214841bf40ca0549e895d2c60e09e07" translate="yes" xml:space="preserve">
          <source>To convert back from a cellstr to a character array use &lt;code&gt;char&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6371a92b906eb6440ff363f1dd20af7f34103b7" translate="yes" xml:space="preserve">
          <source>To correct this behavior would mean that zero elements with a negative sign-bit would need to be stored in the matrix to ensure that their sign-bit was respected. This is not done at this time, for reasons of efficiency, and so the user is warned that calculations where the sign-bit of zero is important must not be done using sparse matrices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab4a3c7e0f6eec9d68a75fc7ab73a4672cf8278a" translate="yes" xml:space="preserve">
          <source>To create a bulleted list, type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5cdbeac1c691a014ef0d0f6c146ec07441b687d" translate="yes" xml:space="preserve">
          <source>To create a constant matrix whose values are all the same use an expression such as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c28efdab5f7c4b4688fa7cec850f56788de71fc9" translate="yes" xml:space="preserve">
          <source>To create a numbered list, type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b6727688c2b2c73d8be20a80b9e80cab6266720" translate="yes" xml:space="preserve">
          <source>To define a condition on a property named &lt;code&gt;&quot;timeout&quot;&lt;/code&gt;, use the string &lt;code&gt;'\timeout'&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20426685284854f24c6689b6878e8926eee7acbb" translate="yes" xml:space="preserve">
          <source>To determine if two strings are identical it is necessary to use the &lt;code&gt;strcmp&lt;/code&gt; function. It compares complete strings and is case sensitive. &lt;code&gt;strncmp&lt;/code&gt; compares only the first &lt;code&gt;N&lt;/code&gt; characters (with &lt;code&gt;N&lt;/code&gt; given as a parameter). &lt;code&gt;strcmpi&lt;/code&gt; and &lt;code&gt;strncmpi&lt;/code&gt; are the corresponding functions for case-insensitive comparison.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4fd25e14496762d01914b4fedfba5364c64eae3" translate="yes" xml:space="preserve">
          <source>To determine whether a variable is a graphics object index, or an index to an axes or figure, use the functions &lt;code&gt;ishghandle&lt;/code&gt;, &lt;code&gt;isgraphics&lt;/code&gt;, &lt;code&gt;isaxes&lt;/code&gt;, and &lt;code&gt;isfigure&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc60f7177f77a64d62a9da84a4de61716016217e" translate="yes" xml:space="preserve">
          <source>To display the solution of the previous example graphically, use the command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0bab3aeb671c84a4d01c3aa9737ca0e27b67c83" translate="yes" xml:space="preserve">
          <source>To display the value of a variable, simply type the name of the variable at the prompt. For example, to display the value stored in the matrix &lt;code&gt;B&lt;/code&gt;, type the command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e35e4418e2f17214b67f1aacdd55280d40ca2ce5" translate="yes" xml:space="preserve">
          <source>To enable someone to investigate the bug, you should include all these things:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27281b8c3aba75ee64c905ff62c9f6283cfcf3b1" translate="yes" xml:space="preserve">
          <source>To enforce both options 1 and 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22345badaf6e32f490fd1c4935a2673d7b546dd2" translate="yes" xml:space="preserve">
          <source>To enforce constraint checking during the integration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="018eaa1297a14319f8db3485e4816833d1586222" translate="yes" xml:space="preserve">
          <source>To exit Octave, type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84c09314545da3990f0a32852c19eea9d87a78bf" translate="yes" xml:space="preserve">
          <source>To facilitate smooth mixing with full matrices, backward compatibility, and compatibility with &lt;small&gt;MATLAB&lt;/small&gt;, the diagonal and permutation matrices should allow any operation that works on full matrices, and will either treat it specially, or implicitly convert themselves to full matrices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e1aef56f7cbe1add671305b24384f0d93ad3a59" translate="yes" xml:space="preserve">
          <source>To find the solution of an overdetermined problem needs an estimate of the residual error &lt;var&gt;r&lt;/var&gt; and so it is more complex to formulate a minimum norm solution using the &lt;code&gt;spaugment&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55daf9baa1dfa62fd975d56b72ef8b8611d37fc0" translate="yes" xml:space="preserve">
          <source>To function properly the package manager needs to keep some information about the installed packages. For per-user packages this information is by default stored in the file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d28c1fa9a3c7e3ed0e982b4026dc0dd6611f610e" translate="yes" xml:space="preserve">
          <source>To get a wider-angle view, we could double the viewing angle. This will also set the mode to manual:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4b8a79990b63c894cf01d5980fb6d625d3a3269" translate="yes" xml:space="preserve">
          <source>To give another example for indexing cell arrays with &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f866715d6e17c0ebbf7594d63991aacbd9fda5b3" translate="yes" xml:space="preserve">
          <source>To have Octave read and compile these functions into an internal form, you need to make sure that the file is in Octave&amp;rsquo;s load path (accessible through the &lt;code&gt;path&lt;/code&gt; function), then simply type the base name of the file that contains the commands. (Octave uses the same rules to search for script files as it does to search for function files.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b3b16fe30ad8e97cde247410f1894b56bf8296e" translate="yes" xml:space="preserve">
          <source>To have constraint checking only in the initial condition calculation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d2c3e2377b9c5d47b381d162672449aea714f0e" translate="yes" xml:space="preserve">
          <source>To identify whether a particular point represented by a vector &lt;var&gt;p&lt;/var&gt; falls within one of the simplices of an N-simplex, we can write the Cartesian coordinates of the point in a parametric form with respect to the N-simplex. This parametric form is called the Barycentric Coordinates of the point. If the points defining the N-simplex are given by &lt;var&gt;N&lt;/var&gt; + 1 vectors &lt;code&gt;&lt;var&gt;t&lt;/var&gt;(&lt;var&gt;i&lt;/var&gt;,:)&lt;/code&gt;, then the Barycentric coordinates defining the point &lt;var&gt;p&lt;/var&gt; are given by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba6e99d73af463ea61512d44464030e606ddea98" translate="yes" xml:space="preserve">
          <source>To include external graphics, e.g., a graphic called &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a152a419b0153d2b7e3be32500477f6a774e0e7" translate="yes" xml:space="preserve">
          <source>To include the content of an external file, e.g., a file called &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7216f59d79922aca5609cf533481b44216614df1" translate="yes" xml:space="preserve">
          <source>To inquire whether a particular method exists for a user class, the &lt;code&gt;ismethod&lt;/code&gt; function can be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53412e16a4ede43e4888ea940d9dc33be9887c9b" translate="yes" xml:space="preserve">
          <source>To insert printing characters (letters, digits, symbols, etc.), simply type the character. Octave will insert the character at the cursor and advance the cursor forward.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="322ed7c266fbe3f83fd522dd43c2a0dc348a5daa" translate="yes" xml:space="preserve">
          <source>To make the process easier, use the &lt;code&gt;assert&lt;/code&gt; function. For example, with &lt;code&gt;assert&lt;/code&gt; the previous test is reduced to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19e10d9f2a2f4445bdca31f7751c655e38fef5fd" translate="yes" xml:space="preserve">
          <source>To minimize the amount of code duplication between packages it is possible that one package depends on another one. If a package depends on another, it will check if that package is installed during installation. If it is not, an error will be reported and the package will not be installed. This behavior can be disabled by passing the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7e26d855bf964a10e32969dbd76e05897cffbf8" translate="yes" xml:space="preserve">
          <source>To multiply the two matrices &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;, type the command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02d6afbce5dedc95d133307591112cffdbbb57d3" translate="yes" xml:space="preserve">
          <source>To obtain a single index for each matrix element, Octave pretends that the columns of a matrix form one long vector (like Fortran arrays are stored). For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="967c4339ef1767934e05f1f3b8ec60b550599290" translate="yes" xml:space="preserve">
          <source>To partially solve the problem Octave uses a special optimization for user-defined &lt;code&gt;subsasgn&lt;/code&gt; methods coded as m-files. When the method gets called as a result of the built-in assignment syntax (not a direct &lt;code&gt;subsasgn&lt;/code&gt; call as shown above), i.e., &lt;code&gt;x(1)&amp;nbsp;=&amp;nbsp;1&lt;/code&gt;, &lt;b&gt;AND&lt;/b&gt; if the &lt;code&gt;subsasgn&lt;/code&gt; method is declared with identical input and output arguments, as in the example above, then Octave will ignore the copy of &lt;code&gt;x&lt;/code&gt; inside the caller&amp;rsquo;s scope; therefore, any changes made to &lt;code&gt;x&lt;/code&gt; during the method execution will directly affect the caller&amp;rsquo;s copy as well. This allows, for instance, defining a polynomial class where modifying a single element takes constant time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69e67b694a9e184ebe1e265607bd929cd78de517" translate="yes" xml:space="preserve">
          <source>To plot multiple one- or two-argument groups, separate each group with an empty format string, as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4b40ffdfb7b1e4f734a0b147d1e22845ddf57fa" translate="yes" xml:space="preserve">
          <source>To post-increment a variable &lt;var&gt;x&lt;/var&gt;, you would write &lt;code&gt;&lt;var&gt;x&lt;/var&gt;++&lt;/code&gt;. This adds one to the variable &lt;var&gt;x&lt;/var&gt;, but returns the value that &lt;var&gt;x&lt;/var&gt; had prior to incrementing it. For example, if &lt;var&gt;x&lt;/var&gt; is equal to 2, the result of the expression &lt;code&gt;&lt;var&gt;x&lt;/var&gt;++&lt;/code&gt; is 2, and the new value of &lt;var&gt;x&lt;/var&gt; is 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ae53ddf16568d7175a57a7effbca387ebcbda11" translate="yes" xml:space="preserve">
          <source>To print a message along with ringing the bell, you might modify the &lt;code&gt;wakeup&lt;/code&gt; to look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdf46235aefe7162f38fd162cc2ed9fe7cdc1e98" translate="yes" xml:space="preserve">
          <source>To publish this script file, type &lt;code&gt;publish (&quot;pub_example.m&quot;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b3accda122d29501fa6092dcacf176145045310" translate="yes" xml:space="preserve">
          <source>To query the current hold state use the &lt;code&gt;ishold&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8683b14f43fbfc051f35bbeb9bf8a3ca8171ca0e" translate="yes" xml:space="preserve">
          <source>To quit debug mode and return directly to the prompt without executing any additional code use &lt;code&gt;dbquit&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="956d7474c6a7ae0c4d6951679c81c325d71d1aa3" translate="yes" xml:space="preserve">
          <source>To read a line and discard the terminating newline see &lt;code&gt;fgetl&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c7c245e8b204521695926ab939157f9d1e93eb1" translate="yes" xml:space="preserve">
          <source>To read a line and return the terminating newline see &lt;code&gt;fgets&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75f17fd0082590f5ee3dbb7b57cad47bebf2d79e" translate="yes" xml:space="preserve">
          <source>To read from a file it must be opened for reading using &lt;code&gt;fopen&lt;/code&gt;. Then a line can be read from the file using &lt;code&gt;fgetl&lt;/code&gt; as the following code illustrates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5085c740bfbaf7440d1a890d895691fa9de58fb3" translate="yes" xml:space="preserve">
          <source>To remove a colorbar from a plot use any one of the following keywords for the &lt;var&gt;delete_option&lt;/var&gt;: &lt;code&gt;&quot;off&quot;&lt;/code&gt;, &lt;code&gt;&quot;delete&quot;&lt;/code&gt;, &lt;code&gt;&quot;hide&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d743f79a41bb1db7c95c070a74d7b5e8aba74853" translate="yes" xml:space="preserve">
          <source>To remove a user-defined default setting, set the default property to the value &lt;code&gt;&quot;remove&quot;&lt;/code&gt;. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05512d2a4465299fffa947cc9ebcb7c5887b636d" translate="yes" xml:space="preserve">
          <source>To report a bug in Octave, submit a bug report to the Octave bug tracker &lt;a href=&quot;https://bugs.octave.org&quot;&gt;https://bugs.octave.org&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17facb74e3cc5a2a2bbe9a7e548917415f3859b5" translate="yes" xml:space="preserve">
          <source>To save a plot once it has been displayed on the screen, use the print command. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="816d1124469611895137e6bb82f1ef139eafc781" translate="yes" xml:space="preserve">
          <source>To save a plot, in one of several image formats such as PostScript or PNG, use the &lt;code&gt;print&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fead3c3bbe617561dea73888cbbb85b773ea5ff" translate="yes" xml:space="preserve">
          <source>To see what functions can be called with an object use &lt;code&gt;methods&lt;/code&gt;. For example, using the previously created &lt;var&gt;dobj&lt;/var&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8477c93422bf91b5d040582ce2e8c0f82f1bebb" translate="yes" xml:space="preserve">
          <source>To see what is new in the current release of Octave, use the &lt;code&gt;news&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1c39a78b256b693266f1f88230d33c2a06b1178" translate="yes" xml:space="preserve">
          <source>To see which packages are installed type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cc406ac437288e0ead36df62f635562ea38bc5f" translate="yes" xml:space="preserve">
          <source>To set a breakpoint immediately upon entering a function use line number 1, or omit the line number entirely and just give the function name. When setting the breakpoint Octave will ignore the leading comment block, and the breakpoint will be set on the first executable statement in the function. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f68ca937b3f957db6c96d0fadd4f286aa578829f" translate="yes" xml:space="preserve">
          <source>To set graphics object properties, use the set function. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeea726cf84ea4add8c063071f42f1a60b8e426f" translate="yes" xml:space="preserve">
          <source>To test if an object is a cell array, use the &lt;code&gt;iscell&lt;/code&gt; function. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfef518512cdb20c448529e8fef7b73a48983d9b" translate="yes" xml:space="preserve">
          <source>To test if an object is a string (i.e., a 1xN row vector of characters and not a character matrix) you can use the &lt;code&gt;ischar&lt;/code&gt; function in combination with the &lt;code&gt;isrow&lt;/code&gt; function as in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06f4bcabf8ff9efabc81e5fb11c2c5472459473e" translate="yes" xml:space="preserve">
          <source>To update a single package use &lt;code&gt;pkg install -forge&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05a1df9ce61a15b9290c9fc8342992566656692a" translate="yes" xml:space="preserve">
          <source>To use Publishing Markup, start by typing &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b03e81e2492e8986e936f40a219d6bd3d60a6515" translate="yes" xml:space="preserve">
          <source>To write preformatted code inside a section, indent the code by three spaces after &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d6f87382ce9c4f2be73101dd357cd12d2ebdec7" translate="yes" xml:space="preserve">
          <source>To write preformatted text inside a section, indent the code by two spaces after &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="782a926a7b6def185a7455ea882dfdbff074e7e9" translate="yes" xml:space="preserve">
          <source>Toggle between &lt;code&gt;&quot;hide&quot;&lt;/code&gt; and &lt;code&gt;&quot;show&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ca6d7a4de5ed7544ab183fa5f74f64b1627ddd9" translate="yes" xml:space="preserve">
          <source>Toggle or set the &lt;code&gt;&quot;hold&quot;&lt;/code&gt; state of the plotting engine which determines whether new graphic objects are added to the plot or replace the existing objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="851dc22c2287326545098ec89826eb32e0af64de" translate="yes" xml:space="preserve">
          <source>Toggle the current hold state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb33e88b3d8add0fdeb38bd281e1ad17bb760e0f" translate="yes" xml:space="preserve">
          <source>TolFun</source>
          <target state="translated">TolFun</target>
        </trans-unit>
        <trans-unit id="3e8b0b3d2764ec6fe08d04bf930a19bc81402b9a" translate="yes" xml:space="preserve">
          <source>TolX</source>
          <target state="translated">TolX</target>
        </trans-unit>
        <trans-unit id="4bf72a4dfd30c58593093805996071aab781547b" translate="yes" xml:space="preserve">
          <source>Tolerance used to compare the results of expression &lt;var&gt;f&lt;/var&gt; and expression &lt;var&gt;f2&lt;/var&gt;. If &lt;var&gt;tol&lt;/var&gt; is positive, the tolerance is an absolute one. If &lt;var&gt;tol&lt;/var&gt; is negative, the tolerance is a relative one. The default is &lt;code&gt;eps&lt;/code&gt;. If &lt;var&gt;tol&lt;/var&gt; is &lt;code&gt;Inf&lt;/code&gt;, then no comparison will be made.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7e6dd42d3873b28ac15971476acd8afd9bfa3cc" translate="yes" xml:space="preserve">
          <source>Tool for building software (&lt;a href=&quot;https://www.gnu.org/software/make&quot;&gt;https://www.gnu.org/software/make&lt;/a&gt;). Octave&amp;rsquo;s build system requires GNU Make. Other versions of Make will not work. Fortunately, GNU Make is highly portable and easy to install.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="021a88183a84b1b9899c7dda4862aa097ba4f53f" translate="yes" xml:space="preserve">
          <source>Top center of the screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a6e818e9e728e10f8d8422b38d5140630e8bf57" translate="yes" xml:space="preserve">
          <source>Top left of the screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c33b724a700895efa54e8c073d666894609960ac" translate="yes" xml:space="preserve">
          <source>Top right of the screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2eee3cb2d0afa8c3b1ba022e1db77df29aa739f" translate="yes" xml:space="preserve">
          <source>TotalSamples</source>
          <target state="translated">TotalSamples</target>
        </trans-unit>
        <trans-unit id="985375d93146caa8bf0a799971285d3fee3bd9c0" translate="yes" xml:space="preserve">
          <source>Trailing singleton dimensions are ignored. When called with a single argument, or no argument, &lt;code&gt;size_equal&lt;/code&gt; returns true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73bb90c8db568738efd87e2d15f12bc0e3e06a59" translate="yes" xml:space="preserve">
          <source>Transform Cartesian coordinates to polar or cylindrical coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb798949844baa1e880cdacf66b5e0ac9391b149" translate="yes" xml:space="preserve">
          <source>Transform Cartesian coordinates to spherical coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e3f940647ff7ac908ea6e31b7e04ab14cb6bcf9" translate="yes" xml:space="preserve">
          <source>Transform Groups</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37e8f23f296bb5a6967ca279f5d97aa11248498d" translate="yes" xml:space="preserve">
          <source>Transform a colormap or image from HSV to RGB color space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b0c64543a08785d2ccf22f6aec8740358997ca0" translate="yes" xml:space="preserve">
          <source>Transform a colormap or image from RGB to HSV color space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d433bef3cfcf79c1466ba64b05b482c0df7c8747" translate="yes" xml:space="preserve">
          <source>Transform an image or colormap from red-green-blue (RGB) color space to a grayscale intensity image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe3bb8bbc59ab7a56f1037ac1aded6108aaa7f84" translate="yes" xml:space="preserve">
          <source>Transform polar or cylindrical coordinates to Cartesian coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6f1b70c8c353a3361c81d63929dd38c046eef5c" translate="yes" xml:space="preserve">
          <source>Transform spherical coordinates to Cartesian coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62dd106cf4c734fa50e4399a18930d15377ea584" translate="yes" xml:space="preserve">
          <source>Translate a string for use in a regular expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03980bc3bccb3a8dcac5ae14d66c32f78a0b28c7" translate="yes" xml:space="preserve">
          <source>Transparency is not yet implemented for axes objects. &lt;code&gt;alim&lt;/code&gt; is unused.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eb0059c6c53112f3ca2dbee367b914928b98ea1" translate="yes" xml:space="preserve">
          <source>Transparency is not yet implemented for axes objects. &lt;code&gt;gridalpha&lt;/code&gt; is unused.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0efe4e89fc7bba0bb1657f4ec6d3582896fa58e1" translate="yes" xml:space="preserve">
          <source>Transparency is not yet implemented for axes objects. &lt;code&gt;minorgridalpha&lt;/code&gt; is unused.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43e6a57e55a28b72286174f1f34617c4003d19d3" translate="yes" xml:space="preserve">
          <source>Transparency is not yet implemented for figure objects. &lt;code&gt;alphamap&lt;/code&gt; is unused.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5625c719816061d79da45f3b0e010b39e0dff225" translate="yes" xml:space="preserve">
          <source>Transparency is not yet implemented for image objects. &lt;code&gt;alphadata&lt;/code&gt; is unused.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf67f864341b16ca99016febfc01322338f64708" translate="yes" xml:space="preserve">
          <source>Transparency is not yet implemented for image objects. &lt;code&gt;alphadatamapping&lt;/code&gt; is unused.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3377fc1557c160519ba79eb226992c1016a2a820" translate="yes" xml:space="preserve">
          <source>Transparency is not yet implemented for patch objects. &lt;code&gt;alphadatamapping&lt;/code&gt; is unused.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8fc611db8da702d0342f0b01e229e24d08276db" translate="yes" xml:space="preserve">
          <source>Transparency is not yet implemented for patch objects. &lt;code&gt;edgealpha&lt;/code&gt; is unused.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c2637437fde178f67a4f27f4a420301bfcb4a39" translate="yes" xml:space="preserve">
          <source>Transparency is not yet implemented for patch objects. &lt;code&gt;facevertexalphadata&lt;/code&gt; is unused.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d18b4bbff06b1c99bd898b415a7a8bc57b08d62" translate="yes" xml:space="preserve">
          <source>Transparency is not yet implemented for surface objects. &lt;code&gt;alphadata&lt;/code&gt; is unused.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f79b7f9657d75f5b6b575d6e9ef67a20d306478e" translate="yes" xml:space="preserve">
          <source>Transparency is not yet implemented for surface objects. &lt;code&gt;alphadatamapping&lt;/code&gt; is unused.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b10d7cc4160e1c679a3e5251fc31b55a97d82b86" translate="yes" xml:space="preserve">
          <source>Transparency is not yet implemented for surface objects. &lt;code&gt;edgealpha&lt;/code&gt; is unused.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3c1b72e3670f9ba3a8b60d508526cfeed5575f9" translate="yes" xml:space="preserve">
          <source>Transparency level of the faces of the patch object. Only double values are supported at present where a value of 0 means complete transparency and a value of 1 means solid faces without transparency. Setting the property to &lt;code&gt;&quot;flat&quot;&lt;/code&gt; or &lt;code&gt;&quot;interp&quot;&lt;/code&gt; causes the faces to not being rendered. Additionally, the faces are not sorted from back to front which might lead to unexpected results when rendering layered transparent faces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b109d14c772c6ab87d4489d96f23e580fc2e5eee" translate="yes" xml:space="preserve">
          <source>Transparency level of the faces of the surface object. Only double values are supported at present where a value of 0 means complete transparency and a value of 1 means solid faces without transparency. Setting the property to &lt;code&gt;&quot;flat&quot;&lt;/code&gt;, &lt;code&gt;&quot;interp&quot;&lt;/code&gt; or &lt;code&gt;&quot;texturemap&quot;&lt;/code&gt; causes the faces to not being rendered. Additionally, the faces are not sorted from back to front which might lead to unexpected results when rendering layered transparent faces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa257429d8539a08df2ef78919507d4169cac2c8" translate="yes" xml:space="preserve">
          <source>Transpose</source>
          <target state="translated">Transpose</target>
        </trans-unit>
        <trans-unit id="5aac140fd36da4e5820d9b69c3d2eadc3ed127c5" translate="yes" xml:space="preserve">
          <source>Transpose.</source>
          <target state="translated">Transpose.</target>
        </trans-unit>
        <trans-unit id="c6f1bb9ad85fdf4c969e94ae6fd19f8e89a9a439" translate="yes" xml:space="preserve">
          <source>Treat a series of consecutive delimiters, without whitespace in between, as a single delimiter. Consecutive delimiter series need not be vertically &lt;code&gt;&quot;aligned&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="340f8a1eabb50f94aade40ea1c2d51db10294b4b" translate="yes" xml:space="preserve">
          <source>Treat single occurrences (surrounded by delimiters or whitespace) of the string(s) in &lt;var&gt;value&lt;/var&gt; as missing values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65e79e90951a33ef74a7c0218c7a227712201c03" translate="yes" xml:space="preserve">
          <source>Triangular factor R from the QR decomposition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89225146f512abd9863323c7f96ee652306f95de" translate="yes" xml:space="preserve">
          <source>Trigonometry</source>
          <target state="translated">Trigonometry</target>
        </trans-unit>
        <trans-unit id="476a3279e92ac61227a751a7f22112e4f00a93d6" translate="yes" xml:space="preserve">
          <source>Trouble</source>
          <target state="translated">Trouble</target>
        </trans-unit>
        <trans-unit id="513425e03d675823b21a620a61823652c522f64d" translate="yes" xml:space="preserve">
          <source>True and false values are assigned a value of 0 and 1 respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9814baf733d0337fce5dc37f10452eea9f57e66" translate="yes" xml:space="preserve">
          <source>True for characters that are alphabetic (letters).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88bc37774b0679094e58c0f04cb2b9e085dbef61" translate="yes" xml:space="preserve">
          <source>True for characters that are alphabetic or digits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="754ead1293725d83a240f0cce5d5b111fc74812c" translate="yes" xml:space="preserve">
          <source>True for characters that are in the range of ASCII encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b9996ab2a5885f0988d412e6f4068ea4d1f50d7" translate="yes" xml:space="preserve">
          <source>True for control characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ef7b4145ced15b3415a7d5c626c69f161ff77cf" translate="yes" xml:space="preserve">
          <source>True for decimal digits (0-9).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="765e00e38c1350f7cc90003c1cebf6e674d63502" translate="yes" xml:space="preserve">
          <source>True for hexadecimal digits (a-fA-F0-9).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="195284cd3453c77eeddb923ea4f9813668f36865" translate="yes" xml:space="preserve">
          <source>True for lowercase letters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e30d65db3ede6cb6ab591df74af6449ffc993a16" translate="yes" xml:space="preserve">
          <source>True for printing characters except space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35d72887027ba8e9841928cc7199cf30ee480385" translate="yes" xml:space="preserve">
          <source>True for printing characters including space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2b45c0faa10e894b23b216c8f8ae1efba3fe891" translate="yes" xml:space="preserve">
          <source>True for punctuation characters (printing characters except space or letter or digit).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16121af0eb6c5e5a29e455b188175495b8b7a429" translate="yes" xml:space="preserve">
          <source>True for uppercase letters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89f99c6915ee6a7ed35c685fe0b1a0d2a23e76d7" translate="yes" xml:space="preserve">
          <source>True for whitespace characters (space, formfeed, newline, carriage return, tab, vertical tab).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6574a7b23d2506b69e0a196c0869b02f11b640b2" translate="yes" xml:space="preserve">
          <source>True if &lt;var&gt;file&lt;/var&gt; is a directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="362c61fbb1eb2bf1168feb34f97296a6898358df" translate="yes" xml:space="preserve">
          <source>True if &lt;var&gt;file&lt;/var&gt; is a hidden file (Windows).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a477aa3c04827360b7d61b405b7bab7ab905dfe3" translate="yes" xml:space="preserve">
          <source>True if &lt;var&gt;file&lt;/var&gt; is a system file (Windows).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae5184508c9e79234f15f2c785c5e6b3c4961c57" translate="yes" xml:space="preserve">
          <source>True if &lt;var&gt;file&lt;/var&gt; is an archive (Windows).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4040a30e389464b000b73f86aa334ed994d5e421" translate="yes" xml:space="preserve">
          <source>True if &lt;var&gt;x&lt;/var&gt; is equal to &lt;var&gt;y&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48019603bf1b6957588ab398ab832073c7831c9a" translate="yes" xml:space="preserve">
          <source>True if &lt;var&gt;x&lt;/var&gt; is greater than &lt;var&gt;y&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b48c57a409a55efbccb5833fc5f99c0614dfc96" translate="yes" xml:space="preserve">
          <source>True if &lt;var&gt;x&lt;/var&gt; is greater than or equal to &lt;var&gt;y&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c691d4f0433fd593fe19f505ff9e37d46ccf6f7" translate="yes" xml:space="preserve">
          <source>True if &lt;var&gt;x&lt;/var&gt; is less than &lt;var&gt;y&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95dfe10f0b556b8b28a9af2dd86c5651fdc5a338" translate="yes" xml:space="preserve">
          <source>True if &lt;var&gt;x&lt;/var&gt; is less than or equal to &lt;var&gt;y&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8ef19b588be27e33f0ecf773475e0219f826569" translate="yes" xml:space="preserve">
          <source>True if &lt;var&gt;x&lt;/var&gt; is not equal to &lt;var&gt;y&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb07b12b13498ac5927c2d36166704c1df3f3de1" translate="yes" xml:space="preserve">
          <source>True if name is a directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f56fdd2e459690b0714be72bfd0f84bf3c33d440" translate="yes" xml:space="preserve">
          <source>True if the user (group; other users) has execute permission for &lt;var&gt;file&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f96bf948a773513bff7cc39fdef990326aff975" translate="yes" xml:space="preserve">
          <source>True if the user (group; other users) has read permission for &lt;var&gt;file&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c61c9a07e89854384ce7600c3212784a9f262228" translate="yes" xml:space="preserve">
          <source>True if the user (group; other users) has write permission for &lt;var&gt;file&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6fe70740b6c0b7c2135045faba80f6be500ede0" translate="yes" xml:space="preserve">
          <source>Truncate fractional portion of &lt;var&gt;x&lt;/var&gt; and return the integer portion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bce8a252db3c52d9712f9d58ff45256a4781e7c" translate="yes" xml:space="preserve">
          <source>Truncate the character string &lt;var&gt;s&lt;/var&gt; to length &lt;var&gt;n&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1c84009570e834bc385a529ddbbd3e7e7403540" translate="yes" xml:space="preserve">
          <source>Try &lt;code&gt;demo humps&lt;/code&gt; to see a plot of the &lt;code&gt;humps&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="720d8d86151cd903f03d39e74f04335c962274e2" translate="yes" xml:space="preserve">
          <source>Try to make your bug report self-contained. If we have to ask you for more information, it is best if you include all the previous information in your response, as well as the information that was missing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="529541bb390c76152e313351d89de3cd30a1c4bd" translate="yes" xml:space="preserve">
          <source>Tue</source>
          <target state="translated">Tue</target>
        </trans-unit>
        <trans-unit id="42e43b612a5dfae57ddf5929f0fb945ae83cbf61" translate="yes" xml:space="preserve">
          <source>Tuesday</source>
          <target state="translated">Tuesday</target>
        </trans-unit>
        <trans-unit id="26da77a3b5d6276683e184048e1d3bb94557d77e" translate="yes" xml:space="preserve">
          <source>Turn off linking</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e02fb26e189ff5304b60504b8fa86dfec64deea2" translate="yes" xml:space="preserve">
          <source>Turn on verbose output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8639bbd522580f1f3da1eae390925659141fb86" translate="yes" xml:space="preserve">
          <source>Turn output pagination on or off.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bcc224aee2cb21fbac23a180b7fa6d6741a2868" translate="yes" xml:space="preserve">
          <source>Turn tick labels off for all axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8e9407e307969ed38aaf00fe6663f9e11cde214" translate="yes" xml:space="preserve">
          <source>Turn tick labels on for all axes, or turn them on for the specified axes and off for the remainder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="578be54e22aaba9aaf2ef686c2f9442a992995cd" translate="yes" xml:space="preserve">
          <source>Turn tick marks on for all axes, or turn them on for the specified axes and off for the remainder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37900a5dd13430b19eed55c998696c2face16a2f" translate="yes" xml:space="preserve">
          <source>Turn warnings identified by &lt;var&gt;id&lt;/var&gt; into errors and optionally return their previous state &lt;var&gt;stout&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b0e89b43c695591eb4d828f81a3d74510c7f6df" translate="yes" xml:space="preserve">
          <source>Two different &lt;var&gt;style&lt;/var&gt;s are available for displaying the &lt;var&gt;cmap&lt;/var&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a6abc063d19a6ae560ab051ead276b24ebf2870" translate="yes" xml:space="preserve">
          <source>Two element range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e2df59fae088f606b5b80ba9dea5ba90e049511" translate="yes" xml:space="preserve">
          <source>Two permutation matrices can be multiplied or divided (if their sizes match), performing a composition of permutations. Also a permutation matrix can be indexed by a permutation vector (or two vectors), giving again a permutation matrix. Any other operations do not generally yield a permutation matrix and will thus trigger the implicit conversion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c7d7d1d216a7c5ada3740cac522d8a85f742c56" translate="yes" xml:space="preserve">
          <source>Two-Dimensional Plots</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b36dc04d70113568275e2e03d274fe32d8dc2552" translate="yes" xml:space="preserve">
          <source>Two-digit year</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4bb9b2a28a8551bb1e1fd6ef195ff40e88c5225" translate="yes" xml:space="preserve">
          <source>Two-dimensional Function Plotting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e79a3b187e1931882e00955f72a4645fecbbabea" translate="yes" xml:space="preserve">
          <source>Two-dimensional Geometric Shapes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2b642896980c2e36603d2bb0955bcc4bad32308" translate="yes" xml:space="preserve">
          <source>Two-dimensional interpolation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdcb67de975c894f0cdda0662d3bde38721b92fc" translate="yes" xml:space="preserve">
          <source>Two-element vector &lt;code&gt;[2Dlen 3Dlen]&lt;/code&gt; specifying the length of the tickmarks relative to the longest visible axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb137eb6380c82f86e625ebeaee7595c879942b5" translate="yes" xml:space="preserve">
          <source>Two-element vector &lt;code&gt;[azimuth elevation]&lt;/code&gt; specifying the viewpoint for three-dimensional plots</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02f30c43b9c2dc2e2a75efeebc1d714e4f4bac98" translate="yes" xml:space="preserve">
          <source>Two-element vector &lt;code&gt;[xfirst xlast]&lt;/code&gt; specifying the x coordinates of the centers of the first and last columns of the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="527f40f75707ed523f358c7e30a64e37ff733101" translate="yes" xml:space="preserve">
          <source>Two-element vector &lt;code&gt;[xmin xmax]&lt;/code&gt; specifying the limits for the x-axis. Setting &lt;code&gt;xlim&lt;/code&gt; also forces the &lt;code&gt;xlimmode&lt;/code&gt; property to be set to &lt;code&gt;&quot;manual&quot;&lt;/code&gt;. See &lt;a href=&quot;axis-configuration#XREFxlim&quot;&gt;xlim function&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f030a454788025bc9a365072ff3e068167655b7" translate="yes" xml:space="preserve">
          <source>Two-element vector &lt;code&gt;[yfirst ylast]&lt;/code&gt; specifying the y coordinates of the centers of the first and last rows of the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef6d7668ef9eb14a983f03ed252c5aa8b5d22940" translate="yes" xml:space="preserve">
          <source>Two-element vector &lt;code&gt;[ymin ymax]&lt;/code&gt; specifying the limits for the y-axis. Setting &lt;code&gt;ylim&lt;/code&gt; also forces the &lt;code&gt;ylimmode&lt;/code&gt; property to be set to &lt;code&gt;&quot;manual&quot;&lt;/code&gt;. See &lt;a href=&quot;axis-configuration#XREFylim&quot;&gt;ylim function&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a15479a5f1f50599fa910cbfaec50ac567e7679" translate="yes" xml:space="preserve">
          <source>Two-element vector &lt;code&gt;[zmin zmaz]&lt;/code&gt; specifying the limits for the z-axis. Setting &lt;code&gt;zlim&lt;/code&gt; also forces the &lt;code&gt;zlimmode&lt;/code&gt; property to be set to &lt;code&gt;&quot;manual&quot;&lt;/code&gt;. See &lt;a href=&quot;axis-configuration#XREFzlim&quot;&gt;zlim function&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="e505d82596690256605fb5ee75e0ac61c0cc9de2" translate="yes" xml:space="preserve">
          <source>Type &lt;code&gt;demo tetramesh&lt;/code&gt; to see examples on using &lt;code&gt;tetramesh&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b42d081b224ffaca6767c757779426eeaeb3323" translate="yes" xml:space="preserve">
          <source>Type of factorization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="339ff9d749a6625fac574198f87913d71eedb702" translate="yes" xml:space="preserve">
          <source>Type of the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c6bad9ffc74961e0a71f96d77fb9e12fb47f331" translate="yes" xml:space="preserve">
          <source>Typecast a hexadecimal character array or cell array of strings to an array of numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d5826d4a0483e959dfbc05bebcd563ad3fd2259" translate="yes" xml:space="preserve">
          <source>TypicalX</source>
          <target state="translated">TypicalX</target>
        </trans-unit>
        <trans-unit id="20111781c8f81f71d9e54b22fab8055128111833" translate="yes" xml:space="preserve">
          <source>Typically only the magnitude data &lt;var&gt;y&lt;/var&gt; is present in which case &lt;var&gt;x&lt;/var&gt; is taken to be the range &lt;code&gt;1 : length (&lt;var&gt;y&lt;/var&gt;)&lt;/code&gt;. If &lt;var&gt;x&lt;/var&gt; is given it may be a string array, a cell array of strings, or a numerical vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d94d680baf9c48041367a9822f6e804902b8773" translate="yes" xml:space="preserve">
          <source>Typing in a function at the command prompt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2c7c0caa10a0cca5ea7d69e54018ae0c0389dd6" translate="yes" xml:space="preserve">
          <source>U</source>
          <target state="translated">U</target>
        </trans-unit>
        <trans-unit id="85ef7b3eed88b2f45d813168d5ef3c1597e87ad6" translate="yes" xml:space="preserve">
          <source>UHESS</source>
          <target state="translated">UHESS</target>
        </trans-unit>
        <trans-unit id="828b5505ff4402471cfbb7fe32a6613ec912c004" translate="yes" xml:space="preserve">
          <source>UI Elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1726b1b17e8f6d8ddea9cfc4af226dd6b4e3233a" translate="yes" xml:space="preserve">
          <source>URL Manipulation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7439191c89664de7a10466c332328c275669705" translate="yes" xml:space="preserve">
          <source>UT</source>
          <target state="translated">UT</target>
        </trans-unit>
        <trans-unit id="fac2ff66572220e192befaa230c070ee0bbb4720" translate="yes" xml:space="preserve">
          <source>Uibuttongroup Properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9546f3bf223bafac33c155ec0b7f04ff27d98627" translate="yes" xml:space="preserve">
          <source>Uicontextmenu Properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c4f441186f82c356a04f87f995210c8104dbdb2" translate="yes" xml:space="preserve">
          <source>Uicontextmenu properties are documented at &lt;a href=&quot;uicontextmenu-properties#Uicontextmenu-Properties&quot;&gt;Uicontextmenu Properties&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="093bab7c3746dcd0de92f6769cd0e092854e9520" translate="yes" xml:space="preserve">
          <source>Uicontrol Properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a6d49bea4230f99be4cd116e7030509e4fae408" translate="yes" xml:space="preserve">
          <source>Uimenu Properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="316cf62a863e6622de4d6644c1c5aaf270b5071c" translate="yes" xml:space="preserve">
          <source>Uipanel Properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7322c2a424766118f5a3ee0e87f99d4e60a371b9" translate="yes" xml:space="preserve">
          <source>Uipanel properties are documented at &lt;a href=&quot;uipanel-properties#Uipanel-Properties&quot;&gt;Uipanel Properties&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93d29997f57b94cd7daa0a1f1a6783168635b6a7" translate="yes" xml:space="preserve">
          <source>Uipushtool Properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87f4432ed30de2250b830d86d67ce07811081f9f" translate="yes" xml:space="preserve">
          <source>Uipushtool properties are documented at &lt;a href=&quot;uipushtool-properties#Uipushtool-Properties&quot;&gt;Uipushtool Properties&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1257b4dc5403661c5a839fe358738f7630c41ed" translate="yes" xml:space="preserve">
          <source>Uitable Properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4017aac152db9643d92b0f41138fdb73a25e436a" translate="yes" xml:space="preserve">
          <source>Uitoggletool Properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0f5e9b710586ca45e0a4822dee412100f3f5eb8" translate="yes" xml:space="preserve">
          <source>Uitoggletool properties are documented at &lt;a href=&quot;uitoggletool-properties#Uitoggletool-Properties&quot;&gt;Uitoggletool Properties&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="918659e41c78a7fa55ad1176dab48339fded69c2" translate="yes" xml:space="preserve">
          <source>Uitoolbar Properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6cd9102e9400a50f6d9222f0b8e78dbdc58e9d0" translate="yes" xml:space="preserve">
          <source>Uitoolbar properties are documented at &lt;a href=&quot;uitoolbar-properties#Uitoolbar-Properties&quot;&gt;Uitoolbar Properties&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="967e229462f186ba40b09901daf0c8b11dc42d86" translate="yes" xml:space="preserve">
          <source>Unary addition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7764c45e364f87d6b4cbbd353a8db14125b6ae0a" translate="yes" xml:space="preserve">
          <source>Unary plus. This operator has no effect on the operand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="394608ecc0b81513d7ec644fcd3a5bb32e2fc685" translate="yes" xml:space="preserve">
          <source>Unary subtraction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7053c3c9630696c02fef74f3fb0fea9e0aa3856c" translate="yes" xml:space="preserve">
          <source>Under the null, LM approximately has a chisquare distribution with &lt;var&gt;p&lt;/var&gt; degrees of freedom and &lt;var&gt;pval&lt;/var&gt; is the &lt;em&gt;p&lt;/em&gt;-value (1 minus the CDF of this distribution at LM) of the test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af4b3f21c25f80c43bdb2f7aba91d185863d8751" translate="yes" xml:space="preserve">
          <source>Undo all changes made to this line. This is like typing the &amp;lsquo;undo&amp;rsquo; command enough times to get back to the beginning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3473f776025ef87402164587c0c6d527a9bf6c29" translate="yes" xml:space="preserve">
          <source>Undo the action of the &lt;code&gt;fftshift&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b9ad1e6d2255ad844f522eaf9aae703b9ae00ae" translate="yes" xml:space="preserve">
          <source>Undo the last action. You can undo all the way back to an empty line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5305cf0fc7c1c3a7538f85014bb0870bf475309" translate="yes" xml:space="preserve">
          <source>Undocumented output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd1cd578f352b9fb0ada8bdc1cb83a4ff6ab7c50" translate="yes" xml:space="preserve">
          <source>Undocumented.</source>
          <target state="translated">Undocumented.</target>
        </trans-unit>
        <trans-unit id="eac6722ddd55a8b7172d57779e8d8370c018d66b" translate="yes" xml:space="preserve">
          <source>Uniform Distribution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4fe6de72881468e19ecbcccb86833501bd8312c" translate="yes" xml:space="preserve">
          <source>Uniform Distribution (integers)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dfbfa51f9a9b3175fe5101b0d9f46b7d475fe1d" translate="yes" xml:space="preserve">
          <source>Uninstall named packages. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c0b8e3c14bad2ddacb97a98e18c0761fe529fbe" translate="yes" xml:space="preserve">
          <source>Units of image resolution. Value is &lt;code&gt;&quot;Inch&quot;&lt;/code&gt;, &lt;code&gt;&quot;Centimeter&quot;&lt;/code&gt;, or &lt;code&gt;&quot;undefined&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09e102ac95dfb09396aca55c8a19a1429069b35b" translate="yes" xml:space="preserve">
          <source>Units used to interpret the &lt;code&gt;&quot;fontsize&quot;&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8ab200f3e7bbc4e90c1f09194af6521d544a66b" translate="yes" xml:space="preserve">
          <source>Units used to interpret the &lt;code&gt;&quot;position&quot;&lt;/code&gt;, &lt;code&gt;&quot;outerposition&quot;&lt;/code&gt;, and &lt;code&gt;&quot;tightinset&quot;&lt;/code&gt; properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7c231f4aa55861e6bc06aed776ddfe9f50c48ee" translate="yes" xml:space="preserve">
          <source>Univariate Discrete Distribution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ee79a99ca6a8cf3d3cdc01a21d8c20609777099" translate="yes" xml:space="preserve">
          <source>Unix-style man pages describing Octave.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e310cc73c863ad310b27c72c0bd1c8824a10ac9f" translate="yes" xml:space="preserve">
          <source>Unless otherwise noted, all of the functions described in this chapter will work for real and complex scalar, vector, or matrix arguments. Functions described as &lt;em&gt;mapping functions&lt;/em&gt; apply the given operation individually to each element when given a matrix argument. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3db2d6fe1c66e3f832e7f6d83935a5e5efc72b20" translate="yes" xml:space="preserve">
          <source>Unless you specify &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c47b0525cbcfd17ac07b7554aaeb8a0a5befd4d" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;&lt;var&gt;x&lt;/var&gt;^(1/3)&lt;/code&gt;, the result will be negative if &lt;var&gt;x&lt;/var&gt; is negative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef3ac4eedc59d0967f44a2d80f2e700fc832ab93" translate="yes" xml:space="preserve">
          <source>Unlike a function file, a script file must &lt;em&gt;not&lt;/em&gt; begin with the keyword &lt;code&gt;function&lt;/code&gt;. If it does, Octave will assume that it is a function file, and that it defines a single function that should be evaluated as soon as it is defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e2ba5b2336e48d35ba1078813b639f84df67276" translate="yes" xml:space="preserve">
          <source>Unlike many other computer languages, Octave allows you to define functions that return more than one value. The syntax for defining functions that return multiple values is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3411b45c32c798e6cd4acefc08313818d4e0c229" translate="yes" xml:space="preserve">
          <source>Unlike most languages, functions in Octave may return multiple values. For example, the following statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62b7d3cb889c3cf3d2102a8aa0fda113b72cb989" translate="yes" xml:space="preserve">
          <source>Unlike most programming languages, complex numeric constants are denoted as the sum of real and imaginary parts. The imaginary part is denoted by a real-valued numeric constant followed immediately by a complex value indicator (&amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="349c3d3b08b4bb0edf7d468ffbe18cbd9c9311bc" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;code&gt;return&lt;/code&gt; statement in C, Octave&amp;rsquo;s &lt;code&gt;return&lt;/code&gt; statement cannot be used to return a value from a function. Instead, you must assign values to the list of return variables that are part of the &lt;code&gt;function&lt;/code&gt; statement. The &lt;code&gt;return&lt;/code&gt; statement simply makes it easier to exit a function from a deeply nested loop or conditional statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f9e72a9cdb83ef4389c77765004e9406894f647" translate="yes" xml:space="preserve">
          <source>Unlike the C library function, which requires you to provide a suitably sized string as an argument, Octave&amp;rsquo;s &lt;code&gt;sprintf&lt;/code&gt; function returns the string, automatically sized to hold all of the items converted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12409e65640a45620469ad87f2a31c339cb8b8cc" translate="yes" xml:space="preserve">
          <source>Unlock the named function &lt;var&gt;fcn&lt;/var&gt; so that it may be removed from memory with &lt;code&gt;clear&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca2353864432721ac043aecd2f43c7b16e3d11fd" translate="yes" xml:space="preserve">
          <source>Unpack the TAR archive &lt;var&gt;tarfile&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac87271628c4b6361d26f0bfbf90c02570f632fc" translate="yes" xml:space="preserve">
          <source>Unpack the ZIP archive &lt;var&gt;zipfile&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ce3c5c4d04d3ca618755eff7332594df8bd6dad" translate="yes" xml:space="preserve">
          <source>Unpack the archive &lt;var&gt;file&lt;/var&gt; based on its extension to the directory &lt;var&gt;dir&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed8516f26bf4a4add88a8854d7689a150a246054" translate="yes" xml:space="preserve">
          <source>Unpack the bzip2 archive &lt;var&gt;bzfile&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2f2b471b5ca598dcacbb3072da527dd4a20a83e" translate="yes" xml:space="preserve">
          <source>Unpack the gzip archive &lt;var&gt;gzfile&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1ac088b8a7a60a97ae6c77f21b7d317ce3a2df8" translate="yes" xml:space="preserve">
          <source>Unshared data size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29488daa32604b9aa3d0697ff060d2f63e1a0816" translate="yes" xml:space="preserve">
          <source>Unshared stack size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e84f9be33a662e14f95dbc34ac24c539487ae713" translate="yes" xml:space="preserve">
          <source>Unsurprisingly, &lt;code&gt;bar&lt;/code&gt; is also recursive. It has been called 13,529 times in the course of recursively calculating the Fibonacci number in a suboptimal way, and most of the time was spent in &lt;code&gt;bar&lt;/code&gt; itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9774e1d95d7f365ea8f27cb1ead81eb915de4d3" translate="yes" xml:space="preserve">
          <source>Unwrap radian phases by adding or subtracting multiples of 2*pi as appropriate to remove jumps greater than &lt;var&gt;tol&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd14ddc042bb3f7c865b6d0b09619ab201c06cb8" translate="yes" xml:space="preserve">
          <source>Unwrap will work along the dimension &lt;var&gt;dim&lt;/var&gt;. If &lt;var&gt;dim&lt;/var&gt; is unspecified it defaults to the first non-singleton dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bab2c594f05fdf90c82b1eba8de8f002b201812" translate="yes" xml:space="preserve">
          <source>Up to eight light objects are supported per axes. (Implementation dependent)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e8ccf0e38b27b3a4d19962dd10be4866e218db4" translate="yes" xml:space="preserve">
          <source>Update a Cholesky factorization given a range of columns to shift in the original factored matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7299a988235f1f5e8c1ffbad3eabfd1e61b47055" translate="yes" xml:space="preserve">
          <source>Update a Cholesky factorization given a row or column to delete from the original factored matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb6a155b1d377e5037a6234f3325adda3199c71d" translate="yes" xml:space="preserve">
          <source>Update a Cholesky factorization given a row or column to insert in the original factored matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08036a5e3748177caac1c6a8f416d6b1fb40a89a" translate="yes" xml:space="preserve">
          <source>Update a QR factorization given a range of columns to shift in the original factored matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51d6381da907b1796cbd300743d5aa77b23f9e2e" translate="yes" xml:space="preserve">
          <source>Update a QR factorization given a row or column to delete from the original factored matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ecac67f9f02117bbdaa4b3232cd6bd6349283fc" translate="yes" xml:space="preserve">
          <source>Update a QR factorization given a row or column to insert in the original factored matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5e58760960195e06e1f6c05b8a2838232aeb395" translate="yes" xml:space="preserve">
          <source>Update a QR factorization given update vectors or matrices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1772adc8be64c620cfd9f42c036cd02e2abd6bfa" translate="yes" xml:space="preserve">
          <source>Update figure windows and their children.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58842c43cfdcb35b43ddcc05ea601a2c01111e89" translate="yes" xml:space="preserve">
          <source>Update or downdate a Cholesky factorization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec6952e09b9cc6aee90f3110c55ff105e4facbf9" translate="yes" xml:space="preserve">
          <source>Updating</source>
          <target state="translated">Updating</target>
        </trans-unit>
        <trans-unit id="5e876c69c2e6d3aeb7ca0cd98f1eb7a92aa613f7" translate="yes" xml:space="preserve">
          <source>Upload local files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ded728b3d7aaa54017e04f25067f5a6e5371a444" translate="yes" xml:space="preserve">
          <source>Upload the local file &lt;var&gt;file&lt;/var&gt; into the current remote directory on the FTP connection &lt;var&gt;f&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20ff0f8102bd5b7728c35f95d8528d7f64f56769" translate="yes" xml:space="preserve">
          <source>Upper limit of the objective function. If the objective function reaches this limit and continues increasing, the solver stops the search. This parameter is used in the dual simplex only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="299dc50bce7a3af9d50b415a5a9dd86c7c7ee8c2" translate="yes" xml:space="preserve">
          <source>Upper triangular. If the optional third argument &lt;var&gt;perm&lt;/var&gt; is given, the matrix is assumed to be a permuted upper triangular with the permutations defined by the vector &lt;var&gt;perm&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc549ac546843e2b778358de1dd573e1fbad283c" translate="yes" xml:space="preserve">
          <source>Uppercase the character following the cursor (or the beginning of the next word if the cursor is between words), moving the cursor to the end of the word.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a505a6766696bfb23ae8d5feabd44804068b29f9" translate="yes" xml:space="preserve">
          <source>Uppercase the characters following the cursor to the end of the current (or following) word, moving the cursor to the end of the word.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6dffb93f99547ed517fd76301b35202f33b1f1c" translate="yes" xml:space="preserve">
          <source>Use &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="736fe455c57cf4505349772d4b05307037a88b41" translate="yes" xml:space="preserve">
          <source>Use &amp;lt;char&amp;gt; as the path separation character. This option can help when running Octave on non-Unix systems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c28ce88c41a4ad0639b3a842a341fd945201b9f9" translate="yes" xml:space="preserve">
          <source>Use 12-hour time format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e0c432beb071041971dc552dc0387cf5c793e09" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;cellfun&lt;/code&gt; intelligently. The &lt;code&gt;cellfun&lt;/code&gt; function is a useful tool for avoiding loops. It is often used with anonymous function handles; however, calling an anonymous function involves an overhead quite comparable to the overhead of an m-file function. Passing a handle to a built-in function is faster, because the interpreter is not involved in the internal loop. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55307d71a1e63a2ae0e7a218248227ee090f6bb1" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;ignore_function_time_stamp&lt;/code&gt; when appropriate. If you are calling lots of functions, and none of them will need to change during your run, set the variable &lt;code&gt;ignore_function_time_stamp&lt;/code&gt; to &lt;code&gt;&quot;all&quot;&lt;/code&gt;. This will stop Octave from checking the time stamp of a function file to see if it has been updated while the program is being run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c68bdd835376d383faf2bb558f097da51846472" translate="yes" xml:space="preserve">
          <source>Use &lt;var&gt;fontname&lt;/var&gt; and/or &lt;var&gt;fontsize&lt;/var&gt; for all text. &lt;var&gt;fontname&lt;/var&gt; is ignored for some devices: dxf, fig, hpgl, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92c57054a3e8eec2ade6b1f833e028c02eefa2fd" translate="yes" xml:space="preserve">
          <source>Use BDF formulas in implicit multistep methods. &lt;em&gt;Note&lt;/em&gt;: This option is not yet implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67b713d028d90dfff729d7977c923a40822309ed" translate="yes" xml:space="preserve">
          <source>Use built-in and library functions if possible. Built-in and compiled functions are very fast. Even with an m-file library function, chances are good that it is already optimized, or will be optimized more in a future release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6292cfacecdbf80fb8b4056e20e161c2c317ffd1" translate="yes" xml:space="preserve">
          <source>Use dash-dotted lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b752d092671139b4ba8981cae8852ab031f6d43a" translate="yes" xml:space="preserve">
          <source>Use dashed lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="875439e1b36a8e50b811dae2b6c94f25a359c083" translate="yes" xml:space="preserve">
          <source>Use dotted lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7ad63f1318b93e8495d1a93a29689dc00dcfae9" translate="yes" xml:space="preserve">
          <source>Use either &lt;code&gt;dbcont&lt;/code&gt; or &lt;code&gt;return&lt;/code&gt; to leave the debug mode and continue the normal execution of the script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0f892d0c034533d2319a8e4b07159cb1d60b657" translate="yes" xml:space="preserve">
          <source>Use elementwise vector operators whenever possible to avoid looping (operators like &lt;code&gt;.*&lt;/code&gt; and &lt;code&gt;.^&lt;/code&gt;). See &lt;a href=&quot;arithmetic-ops#Arithmetic-Ops&quot;&gt;Arithmetic Ops&lt;/a&gt;. For simple inline functions, the &lt;code&gt;vectorize&lt;/code&gt; function can do this automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d86872e8bf273036285506f87ffa89511d3480b" translate="yes" xml:space="preserve">
          <source>Use of the &lt;code&gt;interpreter&lt;/code&gt; Property</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="703f7c7517134044bdeba6e79c432006631bb36a" translate="yes" xml:space="preserve">
          <source>Use of the interpreter Property</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35881ff96b5615dfa69ec9c777caae34d0816ca2" translate="yes" xml:space="preserve">
          <source>Use only the lower triangle of &lt;var&gt;A&lt;/var&gt; and return a lower triangular factor &lt;var&gt;L&lt;/var&gt; such that &lt;code&gt;L*L'&lt;/code&gt; approximates &lt;var&gt;A&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01501f0804f399ffb27c9eacda862a2d76ab7ef8" translate="yes" xml:space="preserve">
          <source>Use only the upper triangle of &lt;var&gt;A&lt;/var&gt; and return an upper triangular factor &lt;var&gt;U&lt;/var&gt; such that &lt;code&gt;U'*U&lt;/code&gt; approximates &lt;var&gt;A&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f55e280c0cc2779eacb42d9d9071e0ed7f403d5e" translate="yes" xml:space="preserve">
          <source>Use smoothing techniques to reduce the appearance of jagged lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f56bf664f41841f0780b77777bfbee0360ea999" translate="yes" xml:space="preserve">
          <source>Use solid lines (default).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a93c12f2901fee8a3910889bd9c00614689808bc" translate="yes" xml:space="preserve">
          <source>Use stiff backward differentiation formula (BDF) method. If a function to compute the Jacobian is not supplied, &lt;code&gt;lsode&lt;/code&gt; will compute a finite difference approximation of the Jacobian matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6985f86b2c8e56e8983df6db4607d6b96d4ce8ec" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&quot;string&quot;&lt;/code&gt; property to change the text string. The line and the arrowhead can be customized as for arrow annotations, and the text can be customized using the same properties as &lt;code&gt;text&lt;/code&gt; graphics objects. Note, however, that some text property names are prefixed with &quot;text&quot; to distinguish them from arrow properties: &lt;code&gt;&quot;textbackgroundcolor&quot;&lt;/code&gt;, &lt;code&gt;&quot;textcolor&quot;&lt;/code&gt;, &lt;code&gt;&quot;textedgecolor&quot;&lt;/code&gt;, &lt;code&gt;&quot;textlinewidth&quot;&lt;/code&gt;, &lt;code&gt;&quot;textmargin&quot;&lt;/code&gt;, &lt;code&gt;&quot;textrotation&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c7d002a0d0213202785ce53dc1aeabeec1236f8" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&quot;string&quot;&lt;/code&gt; property to change the text string. You may use &lt;code&gt;&quot;backgroundcolor&quot;&lt;/code&gt;, &lt;code&gt;&quot;edgecolor&quot;&lt;/code&gt;, &lt;code&gt;&quot;linestyle&quot;&lt;/code&gt;, and &lt;code&gt;&quot;linewidth&quot;&lt;/code&gt; properties to customize the box background color and edge appearance. A limited set of &lt;code&gt;text&lt;/code&gt; objects properties are also available; Besides &lt;code&gt;&quot;font&amp;hellip;&quot;&lt;/code&gt; properties, you may also use &lt;code&gt;&quot;horizontalalignment&quot;&lt;/code&gt; and &lt;code&gt;&quot;verticalalignment&quot;&lt;/code&gt; to position the text inside the box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a1df931d3a7fcda3eb6c9a88c55cd660b2924fa" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;fftw&lt;/code&gt; function to generate and save wisdom. Using the utilities provided together with the &lt;small&gt;FFTW&lt;/small&gt; libraries (&lt;code&gt;fftw-wisdom&lt;/code&gt; on Unix systems), you can even add wisdom generated by Octave to the system-wide wisdom file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="178dc4171548dffa72bfecec2b4c233482bc1963" translate="yes" xml:space="preserve">
          <source>Use the Cholesky factorization of B. (default if &lt;var&gt;A&lt;/var&gt; is symmetric (Hermitian) and &lt;var&gt;B&lt;/var&gt; is symmetric (Hermitian) positive definite)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93864ea3e0ee1e46cc7071f091379cfc332dcbaa" translate="yes" xml:space="preserve">
          <source>Use the QZ algorithm. (used whenever &lt;var&gt;A&lt;/var&gt; or &lt;var&gt;B&lt;/var&gt; are not symmetric)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a86311111875c92d698b87d50b4813d957478609" translate="yes" xml:space="preserve">
          <source>Use the gzip algorithm to compress the file. This works on files that are compressed with gzip outside of Octave, and gzip can also be used to convert the files for backward compatibility. This option is only available if Octave was built with a link to the zlib libraries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="632af614e02b09419ed5d35d423919206dc56633" translate="yes" xml:space="preserve">
          <source>Use the included &lt;small&gt;FFTPACK&lt;/small&gt; library for computing Fast Fourier Transforms instead of the &lt;small&gt;FFTW3&lt;/small&gt; library when operating on single precision (float) values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6b2b3a74049e2f751314235dd5d9ae4ee1f2125" translate="yes" xml:space="preserve">
          <source>Use the included &lt;small&gt;FFTPACK&lt;/small&gt; library for computing Fast Fourier Transforms instead of the &lt;small&gt;FFTW3&lt;/small&gt; library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d778f859aa1dcf54d516b4601d4b26369c2a9ba" translate="yes" xml:space="preserve">
          <source>Use the package name &lt;var&gt;package&lt;/var&gt; or Octave to limit the listing to a desired component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70a508011f23aea1812880f8e8641bb6e191209b" translate="yes" xml:space="preserve">
          <source>Use the readline library to provide for editing of the command line in terminal environments. This option is on by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c495bb1d30025d586f2668e5c40798af79ed4966" translate="yes" xml:space="preserve">
          <source>Use two-phase dual simplex, and if it fails, switch to the primal simplex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c29bc6a8ba0b2a91a060e281bfe792739acaf46" translate="yes" xml:space="preserve">
          <source>Use two-phase dual simplex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9cb612bd88dbdf40ce89107f7f9c496dfb08419" translate="yes" xml:space="preserve">
          <source>Use two-phase primal simplex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="964c605b1ab0c74f15e9696e137d26bda2ff59c6" translate="yes" xml:space="preserve">
          <source>User ID of file&amp;rsquo;s owner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d869866a4817bc95e7dcc7e27def41c48093b72d" translate="yes" xml:space="preserve">
          <source>User-Defined Preferences</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cd3be909847beb0291e90fccf60c063936659cd" translate="yes" xml:space="preserve">
          <source>User-defined Data Types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f0380965c08a38688a7ccb1db3f37c3f5a6f4ae" translate="yes" xml:space="preserve">
          <source>User-defined data to associate with the graphics object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9b869e2d0fc8a470e332e1be4a28818cf0bde2f" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;java-interface-functions#XREFisjava&quot;&gt;isjava&lt;/a&gt;, it is possible to check whether a variable is a Java object and its class can be determined as well. In addition to the previous example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="705ae1d21f8a9ae183e4e9eefc6de0735ba279f2" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;dbstep in&lt;/code&gt; will cause execution of the next line to step into any m-files defined on the next line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15fc4f456dbd053da29e28c4d7bbf241fe2f9455" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;dbstep out&lt;/code&gt; will cause execution to continue until the current function returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c673b98e7a78bc34931556e31f2790d58e0a2deb" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;publish (&lt;var&gt;file&lt;/var&gt;, &lt;var&gt;output_format&lt;/var&gt;)&lt;/code&gt; is equivalent to the function call using a structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a066825bfc4237b320cee2f4d8f802040fb3f699" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;quadgk&lt;/code&gt; in the example below, a double integration can be performed. (Note that any of the 1-D quadrature functions can be used in this fashion except for &lt;code&gt;quad&lt;/code&gt; since it is written in Fortran and cannot be called recursively.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af984b2184e30a490dcce136c877ecd629f46590" translate="yes" xml:space="preserve">
          <source>Using Packages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37063b833ff56f48219796db374c71a9fbaa347f" translate="yes" xml:space="preserve">
          <source>Using Publishing Markup in Script Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58b26d26e0baec90054be9d5c0e8f0944aceeb13" translate="yes" xml:space="preserve">
          <source>Using Sparse Matrices</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45b7be92ae1423421a9275acb2b98fa65e0e4187" translate="yes" xml:space="preserve">
          <source>Using Sparse Matrices in Oct-Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aa46225eba8ca89d2ffb1f5134dcb2dd69ec707" translate="yes" xml:space="preserve">
          <source>Using a first order FEM, we approximate the electrical conductivity distribution in Omega as constant on each simplex (represented by the vector &lt;code&gt;conductivity&lt;/code&gt;). Based on the finite element geometry, we first calculate a system (or stiffness) matrix for each simplex (represented as 3-by-3 elements on the diagonal of the element-wise system matrix &lt;code&gt;SE&lt;/code&gt;). Based on &lt;code&gt;SE&lt;/code&gt; and a N-by-DE connectivity matrix &lt;code&gt;C&lt;/code&gt;, representing the connections between simplices and vertices, the global connectivity matrix &lt;code&gt;S&lt;/code&gt; is calculated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87ff81b8fa01ff5cc9f640ba773dfd125a8f1938" translate="yes" xml:space="preserve">
          <source>Using classes to build new classes is supported by Octave through the use of both inheritance and aggregation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d8daf2571ad5958a7ce76ca8eb0cbecd9d73a8c" translate="yes" xml:space="preserve">
          <source>Using just one number, such as the mean, to represent an entire data set may not give an accurate picture of the data. One way to characterize the fit is to measure the dispersion of the data. Octave provides several functions for measuring dispersion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34625b6ffe5d09779c6241c85c135333070330d4" translate="yes" xml:space="preserve">
          <source>Using the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b403dfed4b3fbb780df3846b4ba5f498805f6ca" translate="yes" xml:space="preserve">
          <source>Using zero as an increment in the colon notation, as &lt;code&gt;1:0:1&lt;/code&gt; is not allowed, because a division by zero would occur in determining the number of range elements. However, ranges with zero increment (i.e., all elements equal) are useful, especially in indexing, and Octave allows them to be constructed using the built-in function &lt;code&gt;ones&lt;/code&gt;. Note that because a range must be a row vector, &lt;code&gt;ones (1, 10)&lt;/code&gt; produces a range, while &lt;code&gt;ones (10, 1)&lt;/code&gt; does not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="395cb7ac7348436581ca3432b9d29a2880c5e083" translate="yes" xml:space="preserve">
          <source>Usually Octave will manage the memory, but sometimes it can be practical to remove variables from memory manually. This is usually needed when working with large variables that fill a substantial part of the memory. On a computer that uses the IEEE floating point format, the following program allocates a matrix that requires around 128 MB memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bf056ede57539fe7ab422f88b516c58223a0adf" translate="yes" xml:space="preserve">
          <source>Utility Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9ee5681d3c59f7541c27a38b67edf46259e187b" translate="yes" xml:space="preserve">
          <source>V</source>
          <target state="translated">V</target>
        </trans-unit>
        <trans-unit id="6a5d2de0b79911d1458325b1a51447cf1d0db2b4" translate="yes" xml:space="preserve">
          <source>Valid &lt;var&gt;key&lt;/var&gt; and &lt;var&gt;value&lt;/var&gt; pairs are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13182ff3e08aab3361f693667e8dcb74887661ed" translate="yes" xml:space="preserve">
          <source>Valid annotation types and their specific properties are described below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d1f4870038d7cf81ccd51d08da1417f970ff2b2" translate="yes" xml:space="preserve">
          <source>Valid argument name, but ignored. Left for compatibility with &lt;small&gt;MATLAB&lt;/small&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3171e3b93408d08fcdaca0fd893752b2e6b77e3d" translate="yes" xml:space="preserve">
          <source>Valid arguments for &lt;var&gt;type&lt;/var&gt; are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7551da498d0ef060fe8d63ef855ebf37b74ac651" translate="yes" xml:space="preserve">
          <source>Valid filetype extensions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b089b3e5e3d6bc5af0a709991d48fb144d30543" translate="yes" xml:space="preserve">
          <source>Valid formats for floating point numbers are listed in the following table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c480965357466d29d7070e0a855321899877d8a8" translate="yes" xml:space="preserve">
          <source>Valid indices are either positive integers (although possibly of real data type), or logical arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="123ee2fdc2efc6c40bcd8dcd85325f7aa9fb54a9" translate="yes" xml:space="preserve">
          <source>Valid options are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c15f10cc48f2360e7750c09307868d78d11667a" translate="yes" xml:space="preserve">
          <source>Valid options for &lt;code&gt;load&lt;/code&gt; are listed in the following table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a650167421f09e9606b04e7b9aafe05d8b9092f5" translate="yes" xml:space="preserve">
          <source>Valid options for the &lt;code&gt;save&lt;/code&gt; command are listed in the following table. Options that modify the output format override the format specified by &lt;code&gt;save_default_options&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7036f227274f2da9fc72b35ee54b3299893b720d" translate="yes" xml:space="preserve">
          <source>Valid parameters are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59b95219725d48889242f1a8136ebe784276218c" translate="yes" xml:space="preserve">
          <source>Valid pattern syntax is the same as described for the &lt;code&gt;clear&lt;/code&gt; command. If no patterns are supplied, all variables are listed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb1d545cc82828c7c0bdc2b86a77aabaccb9096f" translate="yes" xml:space="preserve">
          <source>Valid styles for uicontrol are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecba74e32beb8c420920d690734ab1699a9bbfb3" translate="yes" xml:space="preserve">
          <source>Valid values for &lt;var&gt;orientation&lt;/var&gt; are &lt;code&gt;&quot;portrait&quot;&lt;/code&gt;, &lt;code&gt;&quot;landscape&quot;&lt;/code&gt;, and &lt;code&gt;&quot;tall&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="560315ec81e0dafe8e9d36882afad9b1c1048c4a" translate="yes" xml:space="preserve">
          <source>Value Classes vs. Handle Classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fea2433a27294f172e09384e561fc5b5ac92fbc3" translate="yes" xml:space="preserve">
          <source>Value is a 1x8 Matrix with the x,y chromaticity values for white, red, green, and blue points, in that order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de122bdfe0a3137e2639218255d65d9f606c4c66" translate="yes" xml:space="preserve">
          <source>Value is a diagonal matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea0616b80a505ea5580d50478724758cdfd953c3" translate="yes" xml:space="preserve">
          <source>Value to return for empty numeric values in non-whitespace delimited data. The default is NaN. When the data type does not support NaN (int32 for example), then default is zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0baf0efd1ba53cf2cd047ef828d0775507afef6" translate="yes" xml:space="preserve">
          <source>Value to return for empty numeric values in non-whitespace delimited data. The default is NaN. When the data type does not support NaN (int32 for example), then the default is zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3caee89e422d8b14349dfd91179d68f5bf83f941" translate="yes" xml:space="preserve">
          <source>Values are arranged in a single column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b05271f29360283ea57832481b5d2414e24da34" translate="yes" xml:space="preserve">
          <source>Values are arranged in a single row.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bea8d5e308edcad1aa41d1eaa8c1da30651c7a09" translate="yes" xml:space="preserve">
          <source>Values are arranged in a single vector (column or vector).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7abecc70ce621891ed365aa4fe0e0c15db5a2f6d" translate="yes" xml:space="preserve">
          <source>Values are cast to double.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7335ad719780d655a19cae00aef676f04b1b897b" translate="yes" xml:space="preserve">
          <source>Variable in local scope</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa7ff342d87790ec00ab223d9572f4bf32f49c70" translate="yes" xml:space="preserve">
          <source>Variable inheritance leads to a problem for &lt;code&gt;eval&lt;/code&gt; and scripts. If a new variable is created in a parent function, it is not clear what should happen in nested child functions. For example, consider a parent function &lt;code&gt;foo&lt;/code&gt; with a nested child function &lt;code&gt;bar&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39232a9bb6d29d0ddc4ece303bfd34215b99c76f" translate="yes" xml:space="preserve">
          <source>Variable is either 6 or 7</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f921c45e3d6f1dfe800d0b286b0c3e665d98ac8" translate="yes" xml:space="preserve">
          <source>Variable of complex type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b64410ac0390ce8fe1c8c3fe239ab494e8ce014" translate="yes" xml:space="preserve">
          <source>Variable with global scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc1a40fb65a9f98813fbe2e15dddb14ad8d21fc5" translate="yes" xml:space="preserve">
          <source>Variable-length Argument Lists</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec54138d6ad78a448eaa5e53cb1c539e6baf44a9" translate="yes" xml:space="preserve">
          <source>Variable-length Return Lists</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac018db1f7b00972061adff843d37497d8ee153c" translate="yes" xml:space="preserve">
          <source>Variables</source>
          <target state="translated">Variables</target>
        </trans-unit>
        <trans-unit id="a6572dd5d3ba28ab74d38e34c8b53b8587adb9e8" translate="yes" xml:space="preserve">
          <source>Variables in Octave do not have fixed types, so it is possible to first store a numeric value in a variable and then to later use the same name to hold a string value in the same program. Variables may not be used before they have been given a value. Doing so results in an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d531727f10a370fe03501ccab4d5a456f1c2e5b" translate="yes" xml:space="preserve">
          <source>Variables let you give names to values and refer to them later. You have already seen variables in many of the examples. The name of a variable must be a sequence of letters, digits and underscores, but it may not begin with a digit. Octave does not enforce a limit on the length of variable names, but it is seldom useful to have variables with names longer than about 30 characters. The following are all valid variable names</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1acba110170dc557bfef24339e229d77929d8eb3" translate="yes" xml:space="preserve">
          <source>Variables used in the body of a function are local to the function. Variables named in &lt;var&gt;arg-list&lt;/var&gt; and &lt;var&gt;ret-var&lt;/var&gt; are also local to the function. See &lt;a href=&quot;global-variables#Global-Variables&quot;&gt;Global Variables&lt;/a&gt;, for information about how to access global variables inside a function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44957886e63e8fb6234dceff776611e3b84a79d9" translate="yes" xml:space="preserve">
          <source>Vector &lt;code&gt;[X0 Y0 Z0]&lt;/code&gt; where X0, Y0 and Z0 indicate the position of the text anchor as defined by &lt;code&gt;verticalalignment&lt;/code&gt; and &lt;code&gt;horizontalalignment&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97f54acbd6e7286e089af944589f3dec2394d6f3" translate="yes" xml:space="preserve">
          <source>Vector &lt;code&gt;[left bottom width height]&lt;/code&gt; defining the position and size of the figure (in &lt;code&gt;paperunits&lt;/code&gt; units) on the printed page. The position &lt;code&gt;[left bottom]&lt;/code&gt; defines the lower left corner of the figure on the page, and the size is defined by &lt;code&gt;[width height]&lt;/code&gt;. For output formats not implicitly rendered on paper, &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; define the size of the image and the position information is ignored. Setting &lt;code&gt;paperposition&lt;/code&gt; also forces the &lt;code&gt;paperpositionmode&lt;/code&gt; property to be set to &lt;code&gt;&quot;manual&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aa1d9038ff8a2dab6e94ca0b40bf554d7acbe74" translate="yes" xml:space="preserve">
          <source>Vector &lt;code&gt;[width height]&lt;/code&gt; defining the size of the paper for printing. Setting the &lt;code&gt;papersize&lt;/code&gt; property to a value, not associated with one of the defined &lt;code&gt;papertypes&lt;/code&gt; and consistent with the setting for &lt;code&gt;paperorientation&lt;/code&gt;, forces the &lt;code&gt;papertype&lt;/code&gt; property to the value &lt;code&gt;&quot;&amp;lt;custom&amp;gt;&quot;&lt;/code&gt;. If &lt;code&gt;papersize&lt;/code&gt; is set to a value associated with a supported &lt;code&gt;papertype&lt;/code&gt; and consistent with the &lt;code&gt;paperorientation&lt;/code&gt;, the &lt;code&gt;papertype&lt;/code&gt; value is modified to the associated value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67699038122522bc2797537c29ca192d7af648ab" translate="yes" xml:space="preserve">
          <source>Vector &lt;code&gt;[x0 y0 width height]&lt;/code&gt; indicating the size and location of the text string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c53abc884f54defa3ea68e7e4522b307846ca54a" translate="yes" xml:space="preserve">
          <source>Vector Formats</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ad23280346c75fb000d733c0d2ee44f5a061494" translate="yes" xml:space="preserve">
          <source>Vector of the x-locations of the constraints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe571c6e6beb571f8c03c757ff0aa2d3e93d7c04" translate="yes" xml:space="preserve">
          <source>Vector of x data to be plotted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="897e5b459141a66fb93741f122af3945d7a86aeb" translate="yes" xml:space="preserve">
          <source>Vector of y data to be plotted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa4cb8c084fa4f18a1fb16f8ff06d0277fea0a62" translate="yes" xml:space="preserve">
          <source>Vector of z data to be plotted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b364f229fad911735ff66df179b4739ee434117d" translate="yes" xml:space="preserve">
          <source>Vectorization and Faster Code Execution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30e078f2b8dd5d172495b6d91ae09398ccb51d5c" translate="yes" xml:space="preserve">
          <source>Vectorization is a programming technique that uses vector operations instead of element-by-element loop-based operations. Besides frequently producing more succinct Octave code, vectorization also allows for better optimization in the subsequent implementation. The optimizations may occur either in Octave&amp;rsquo;s own Fortran, C, or C++ internal implementation, or even at a lower level depending on the compiler and external numerical libraries used to build Octave. The ultimate goal is to make use of your hardware&amp;rsquo;s vector instructions if possible or to perform other optimizations in software.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d695d1236e1c651e8339eaef4a93939bcc52add0" translate="yes" xml:space="preserve">
          <source>Vectorization is not a concept unique to Octave, but it is particularly important because Octave is a matrix-oriented language. Vectorized Octave code will see a dramatic speed up (10X&amp;ndash;100X) in most cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb0af7e607a41324c9b4fb8ff3889109f3420c49" translate="yes" xml:space="preserve">
          <source>Vectorization is the preferred technique for eliminating loops and speeding up code. Nevertheless, it is not always possible to replace every loop. In such situations it may be worth trying Octave&amp;rsquo;s &lt;strong&gt;experimental&lt;/strong&gt; Just-In-Time (JIT) compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfc0de63a87d87b4d6a24bb59c00ffe547bc8062" translate="yes" xml:space="preserve">
          <source>Vectorized arithmetic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="906c0839a0ca512e1dfed0330564f49decf915ef" translate="yes" xml:space="preserve">
          <source>Vectors and matrices are the basic building blocks for numerical analysis. To create a new matrix and store it in a variable so that you can refer to it later, type the command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b7269fd52b69344cd4968a81696c09d1777f236" translate="yes" xml:space="preserve">
          <source>Verify that &lt;var&gt;str&lt;/var&gt; is an element, or substring of an element, in &lt;var&gt;strarray&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2da600bf9404843107a9531694f654e5662959e0" translate="yes" xml:space="preserve">
          <source>Version</source>
          <target state="translated">Version</target>
        </trans-unit>
        <trans-unit id="f28423aaef9c47032fe0ca2dabfc79f89b9a394e" translate="yes" xml:space="preserve">
          <source>Version of the package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7b9f12a190027c01c17052262e20d68fec7db28" translate="yes" xml:space="preserve">
          <source>Version of the package. A package version must be 3 numbers separated by dots.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e5bd7fc6a6706c0cd191404a654c5b501da8680" translate="yes" xml:space="preserve">
          <source>Vertex normals are used for lighting the edges or faces if the &lt;code&gt;edgelighting&lt;/code&gt; or &lt;code&gt;facelighting&lt;/code&gt; properties are set to &lt;code&gt;&quot;gouraud&quot;&lt;/code&gt;. Setting &lt;code&gt;vertexnormals&lt;/code&gt; also forces the &lt;code&gt;vertexnormalsmode&lt;/code&gt; property to be set to &lt;code&gt;&quot;manual&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56b84d353d030d76594610924975f8ee4b318fcd" translate="yes" xml:space="preserve">
          <source>Vertical concatenation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="679fc22f6747c468b572db6cb37e1452c05bfa2d" translate="yes" xml:space="preserve">
          <source>Via &lt;a href=&quot;java-interface-functions#XREFjavaObject&quot;&gt;javaObject&lt;/a&gt; one may create all kinds of Java objects but arrays. The latter are created through &lt;a href=&quot;java-interface-functions#XREFjavaArray&quot;&gt;javaArray&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e081ddeebc0690e5ed15d32123395a1da2626bfd" translate="yes" xml:space="preserve">
          <source>Voronoi Diagrams</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2415cb7f63df0c9de23362326ad3c37a9adfc96" translate="yes" xml:space="preserve">
          <source>W</source>
          <target state="translated">W</target>
        </trans-unit>
        <trans-unit id="140917b714ce92e12d625053d6439ef7f783033e" translate="yes" xml:space="preserve">
          <source>W. Gautschi,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8104eece38fcafda62ae9771ed3a38d5235875ca" translate="yes" xml:space="preserve">
          <source>W. H. Press, S. A. Teukolsky, W. T. Vetterling, and B. P. Flannery,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1bd81fd4e7add04c8589e9082d43b35cc08cbfe" translate="yes" xml:space="preserve">
          <source>W.H. Press, et al.,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1de3c1bc26c3633d304b416268f343189478036" translate="yes" xml:space="preserve">
          <source>WAV file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="064d699833935c584387ceca7de7f7ccdbec1825" translate="yes" xml:space="preserve">
          <source>WCONTINUE</source>
          <target state="translated">WCONTINUE</target>
        </trans-unit>
        <trans-unit id="076b297a10e9e8ac4bd3118b5753a370ada58faf" translate="yes" xml:space="preserve">
          <source>WCONTINUE ()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c29ccc7ab63074d02e790522a29d34b4c915cf86" translate="yes" xml:space="preserve">
          <source>WCOREDUMP</source>
          <target state="translated">WCOREDUMP</target>
        </trans-unit>
        <trans-unit id="fde9ddb1c6ad423eadc29a88cd1e19ebd6d9b9eb" translate="yes" xml:space="preserve">
          <source>WCOREDUMP (status)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bf1b97f2fc5265d0f7b0dd544056c7b69c3408a" translate="yes" xml:space="preserve">
          <source>WEXITSTATUS</source>
          <target state="translated">WEXITSTATUS</target>
        </trans-unit>
        <trans-unit id="2b200a6a1fb94ab463527efea9a6730322fb6a43" translate="yes" xml:space="preserve">
          <source>WEXITSTATUS (status)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb30a8ff398e22c99931f32ecedf848a74b0149b" translate="yes" xml:space="preserve">
          <source>WIFCONTINUED</source>
          <target state="translated">WIFCONTINUED</target>
        </trans-unit>
        <trans-unit id="1302bcfb606a59a19245c066605aa0cc267f9579" translate="yes" xml:space="preserve">
          <source>WIFCONTINUED (status)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43044f54881faf0daf8e7ae1041687abfeebf5cb" translate="yes" xml:space="preserve">
          <source>WIFEXITED</source>
          <target state="translated">WIFEXITED</target>
        </trans-unit>
        <trans-unit id="c3b70e377fbf9ce88eb16148aed6d6f6a04062a1" translate="yes" xml:space="preserve">
          <source>WIFEXITED (status)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b38ae0ecf527f08e52210be925bf7bff13828dda" translate="yes" xml:space="preserve">
          <source>WIFSIGNALED</source>
          <target state="translated">WIFSIGNALED</target>
        </trans-unit>
        <trans-unit id="9e27a2a79367ed2139ec8712afcd5d01b5f2446d" translate="yes" xml:space="preserve">
          <source>WIFSIGNALED (status)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="831f27b69c3adbdd25e1ac1a506c0b83abecbf5a" translate="yes" xml:space="preserve">
          <source>WIFSTOPPED</source>
          <target state="translated">WIFSTOPPED</target>
        </trans-unit>
        <trans-unit id="7423ab81504b5f4611464b67ad44073f196add4c" translate="yes" xml:space="preserve">
          <source>WIFSTOPPED (status)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e31950e28a56c4fe6e7025b187b2fd4fefe4871" translate="yes" xml:space="preserve">
          <source>WINDOWS</source>
          <target state="translated">WINDOWS</target>
        </trans-unit>
        <trans-unit id="24c16f3291fd5a896a52fda5bcd7de9db4347df5" translate="yes" xml:space="preserve">
          <source>WNOHANG</source>
          <target state="translated">WNOHANG</target>
        </trans-unit>
        <trans-unit id="b09a74f262b47843101d1ab0729eff20f8aa8aae" translate="yes" xml:space="preserve">
          <source>WNOHANG ()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afd661bac1a8453aa3fae2861aaefbd7cafed675" translate="yes" xml:space="preserve">
          <source>WSTOPSIG</source>
          <target state="translated">WSTOPSIG</target>
        </trans-unit>
        <trans-unit id="a72d916fcdbfad9c081cb6dbe6baee55ab64a905" translate="yes" xml:space="preserve">
          <source>WSTOPSIG (status)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62f4cb0ba7a925a5af714a1b21832001dffc25f5" translate="yes" xml:space="preserve">
          <source>WTERMSIG</source>
          <target state="translated">WTERMSIG</target>
        </trans-unit>
        <trans-unit id="000db3610bd3c8f4fcec8cbac8a287cecacbd71e" translate="yes" xml:space="preserve">
          <source>WTERMSIG (status)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="030716508efb8b454e7fc70f999cc9c2690237e9" translate="yes" xml:space="preserve">
          <source>WUNTRACED</source>
          <target state="translated">WUNTRACED</target>
        </trans-unit>
        <trans-unit id="28435378a70e9f5ca97472f94b7f1db01d443bc1" translate="yes" xml:space="preserve">
          <source>WUNTRACED ()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="468ea8df2e1056b92e0bd8fa3299f565f90f97ee" translate="yes" xml:space="preserve">
          <source>Wait for any child process whose process group ID is equal to that of the Octave interpreter process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbcec1b99dd4daf7031c5c0382bdd8238a2aeca1" translate="yes" xml:space="preserve">
          <source>Wait for any child process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2a355abfe2c1aec648ce2d33f2cb0cc05a74e9d" translate="yes" xml:space="preserve">
          <source>Wait for mouse click or key press over the current figure window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="452c7be077c586f18264a112ddb602c32810761f" translate="yes" xml:space="preserve">
          <source>Wait for process &lt;var&gt;pid&lt;/var&gt; to terminate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20b3952e5cee3e6ed958189dad26aa203a5decaa" translate="yes" xml:space="preserve">
          <source>Wait for termination of the child process with ID &lt;var&gt;pid&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f605571af26352c56568bf4d89ad06344637c184" translate="yes" xml:space="preserve">
          <source>Wait for writes to complete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49e115bb0fe7992e795f1a87645453a4c80623cb" translate="yes" xml:space="preserve">
          <source>Wait until signal is received or a child process exits (this is the default if the &lt;var&gt;options&lt;/var&gt; argument is missing).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee5ef2a91787b6f6be7393f1015ba70adf5fb44a" translate="yes" xml:space="preserve">
          <source>We can check for the existence of the &lt;code&gt;roots&lt;/code&gt;-method by calling:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79c09bc369800f63ffc52df2e701ffa415aee783" translate="yes" xml:space="preserve">
          <source>We can reset it to be automatic:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e30a7250e6458d65ee5a93c590faaa9a3039071e" translate="yes" xml:space="preserve">
          <source>We can set it back to automatic:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e53261564d68c5bd5857f91f39aa8b3e0d84e757" translate="yes" xml:space="preserve">
          <source>We can then move the camera further up the z-axis:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53cb3235557fd8a287032b9d976a495bf11a5ab7" translate="yes" xml:space="preserve">
          <source>We can turn the camera to point at a new target:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="642a3b9920da70082a9f192e94403b16c854e10f" translate="yes" xml:space="preserve">
          <source>We only know it is the binary multiplication operator, but fortunately this operator appears only at one place in the code and thus we know which occurrence takes so much time. If there were multiple places, we would have to use the hierarchical profile to find out the exact place which uses up the time which is not covered in this example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23408b19b29e8e8495bb4b68733ada5f85fc2fd6" translate="yes" xml:space="preserve">
          <source>Wed</source>
          <target state="translated">Wed</target>
        </trans-unit>
        <trans-unit id="5656b9b79b0316fc611a9c30d2ffac25228b8371" translate="yes" xml:space="preserve">
          <source>Wednesday</source>
          <target state="translated">Wednesday</target>
        </trans-unit>
        <trans-unit id="c6edc7e26dc1a7f5b6823df1eddaac3ce4524caa" translate="yes" xml:space="preserve">
          <source>Week number of year with Monday as first day of week (00-53).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70f74d2223f1c342ef962202c70c0da63c220737" translate="yes" xml:space="preserve">
          <source>Week number of year with Sunday as first day of week (00-53).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee45cb5a8bcaa82a716eb53485973b59915e1d52" translate="yes" xml:space="preserve">
          <source>What are the possible pairs?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2ce0061fb83880468b9b4664309a8b5d786eef1" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;&lt;var&gt;t&lt;/var&gt; = 1&lt;/code&gt;, return the pseudo-lower triangular Cholesky factor of the Pascal matrix (The sign of some columns may be negative). This matrix is its own inverse, that is &lt;code&gt;pascal (&lt;var&gt;n&lt;/var&gt;, 1) ^ 2 == eye (&lt;var&gt;n&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de737b1bfe2b6c4124dd61165620e44b451901b1" translate="yes" xml:space="preserve">
          <source>When &lt;var&gt;a&lt;/var&gt; and &lt;var&gt;b&lt;/var&gt; are the coefficient vectors of two polynomials, the convolution represents the coefficient vector of the product polynomial.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4995c075b5e02832b91c4fb30e2511a97e8d3ca6" translate="yes" xml:space="preserve">
          <source>When &lt;var&gt;coorsys&lt;/var&gt; is set to &lt;code&gt;&quot;camera&quot;&lt;/code&gt;, the camera is moved left or right by rotating it around an axis parallel to the camera up vector (see &lt;a href=&quot;#XREFcamup&quot;&gt;camup&lt;/a&gt;). The input &lt;var&gt;dir&lt;/var&gt; should not be specified in this case. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd3f6f263f14ef3b22f57692477e108fc9df95b0" translate="yes" xml:space="preserve">
          <source>When &lt;var&gt;file&lt;/var&gt; is already an absolute name, the name is checked against the file system instead of Octave&amp;rsquo;s loadpath. In this case, if &lt;var&gt;file&lt;/var&gt; exists it will be returned in &lt;var&gt;fname&lt;/var&gt;, otherwise an empty string is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b9e49aba6e37fdfe93d1a16912c975867862b7c" translate="yes" xml:space="preserve">
          <source>When &lt;var&gt;filename&lt;/var&gt; does not have an extension the default filename extension</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b0bbce7bdb120458ad715afda62bec7454df6fe" translate="yes" xml:space="preserve">
          <source>When &lt;var&gt;m&lt;/var&gt; is the polynomial order &lt;var&gt;coefs&lt;/var&gt; must be of size: &lt;var&gt;ni&lt;/var&gt;-by-(&lt;var&gt;m&lt;/var&gt; + 1).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="694e49f1fd6c72fceedb93678a43e079cbc74cb5" translate="yes" xml:space="preserve">
          <source>When &lt;var&gt;method&lt;/var&gt; is &lt;code&gt;&quot;gaussian&quot;&lt;/code&gt;, &lt;var&gt;std_dev&lt;/var&gt; defines the standard deviation of the trivariate normal distribution function. &lt;var&gt;std_dev&lt;/var&gt; is either a vector of 3 elements representing the standard deviation of the Gaussian convolution kernel in x-, y- and z-directions or a scalar, in which case the same value is used in all three dimensions. The default value is 0.65.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ecc1bc6c135afabcc544fed0475ca8f5b9ab546" translate="yes" xml:space="preserve">
          <source>When &lt;var&gt;mode&lt;/var&gt; is unspecified return the Cholesky factorization for &lt;var&gt;R&lt;/var&gt;. If &lt;var&gt;mode&lt;/var&gt; is &lt;code&gt;&quot;lower&quot;&lt;/code&gt; or &lt;code&gt;&quot;L&quot;&lt;/code&gt; then return the conjugate transpose &lt;code&gt;&lt;var&gt;R&lt;/var&gt;'&lt;/code&gt; which is a lower triangular factor. The conjugate transpose version is faster and uses less memory, but still returns the same values for all other outputs: &lt;var&gt;count&lt;/var&gt;, &lt;var&gt;h&lt;/var&gt;, &lt;var&gt;parent&lt;/var&gt;, and &lt;var&gt;post&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7488d9a9c93bc51549fe8079d976e327325bc29a" translate="yes" xml:space="preserve">
          <source>When &lt;var&gt;mu&lt;/var&gt; is present, evaluate the polynomial for (&lt;var&gt;x&lt;/var&gt;-&lt;var&gt;mu&lt;/var&gt;(1))/&lt;var&gt;mu&lt;/var&gt;(2).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26ecedb3043c4886e7200e0345222f9f5de26946" translate="yes" xml:space="preserve">
          <source>When &lt;var&gt;n&lt;/var&gt; is positive, the dimensions of &lt;var&gt;x&lt;/var&gt; are shifted to the left, with the leading dimensions circulated to the end. If &lt;var&gt;n&lt;/var&gt; is negative, then the dimensions of &lt;var&gt;x&lt;/var&gt; are shifted to the right, with &lt;var&gt;n&lt;/var&gt; leading singleton dimensions added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d14006ef50698960879a2803ad8dd919f78fab02" translate="yes" xml:space="preserve">
          <source>When &lt;var&gt;obj&lt;/var&gt; is a class object defined with a class constructor, then &lt;code&gt;subsindex&lt;/code&gt; is the overloading method that allows the conversion of this class object to a valid indexing vector. It is important to note that &lt;code&gt;subsindex&lt;/code&gt; must return a zero-based real integer vector of the class &lt;code&gt;&quot;double&quot;&lt;/code&gt;. For example, if the class constructor were</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4567fb823ae76170233ac040de870155c18eb478" translate="yes" xml:space="preserve">
          <source>When &lt;var&gt;obj&lt;/var&gt; is a regular Java object, structure-like indexing can be used as a shortcut syntax. For instance, the following two statements are equivalent</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f64e190e2c1a7c030df19bb530c4129cb6ee59d7" translate="yes" xml:space="preserve">
          <source>When &lt;var&gt;obj&lt;/var&gt; is a regular Java object, structure-like indexing can be used as a shortcut syntax. For instance, the two following statements are equivalent</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9ef636cdcb53552b8c8c4e3e8dbe072ad50d26f" translate="yes" xml:space="preserve">
          <source>When &lt;var&gt;str&lt;/var&gt; is a character string to be tested, and &lt;var&gt;strarray&lt;/var&gt; is a cellstr of valid values, then &lt;var&gt;validstr&lt;/var&gt; will be the validated form of &lt;var&gt;str&lt;/var&gt; where validation is defined as &lt;var&gt;str&lt;/var&gt; being a member or substring of &lt;var&gt;validstr&lt;/var&gt;. This is useful for both verifying and expanding short options, such as &lt;code&gt;&quot;r&quot;&lt;/code&gt;, to their longer forms, such as &lt;code&gt;&quot;red&quot;&lt;/code&gt;. If &lt;var&gt;str&lt;/var&gt; is a substring of &lt;var&gt;validstr&lt;/var&gt;, and there are multiple matches, the shortest match will be returned if all matches are substrings of each other. Otherwise, an error will be raised because the expansion of &lt;var&gt;str&lt;/var&gt; is ambiguous. All comparisons are case insensitive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f1fcac4821a81cc2e9378f58ccfb6fa8bf664ca" translate="yes" xml:space="preserve">
          <source>When &lt;var&gt;x&lt;/var&gt; is a vector, the function counts the number of elements of &lt;var&gt;x&lt;/var&gt; that fall in the histogram bins defined by &lt;var&gt;edges&lt;/var&gt;. This must be a vector of monotonically increasing values that define the edges of the histogram bins. &lt;code&gt;&lt;var&gt;n&lt;/var&gt;(k)&lt;/code&gt; contains the number of elements in &lt;var&gt;x&lt;/var&gt; for which &lt;code&gt;&lt;var&gt;edges&lt;/var&gt;(k) &amp;lt;= &lt;var&gt;x&lt;/var&gt; &amp;lt; &lt;var&gt;edges&lt;/var&gt;(k+1)&lt;/code&gt;. The final element of &lt;var&gt;n&lt;/var&gt; contains the number of elements of &lt;var&gt;x&lt;/var&gt; exactly equal to the last element of &lt;var&gt;edges&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61b6b915264e56a8aa3a5fdaf1395b5cabe4ff08" translate="yes" xml:space="preserve">
          <source>When &lt;var&gt;x&lt;/var&gt; is an &lt;em&gt;N&lt;/em&gt;-dimensional array, the computation is carried out along dimension &lt;var&gt;dim&lt;/var&gt;. If not specified &lt;var&gt;dim&lt;/var&gt; defaults to the first non-singleton dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c79138aad94ef5bf99510e193da45bcf0b2f6e6c" translate="yes" xml:space="preserve">
          <source>When Ghostscript output is sent to a printer the size is determined by the figure&amp;rsquo;s &lt;code&gt;&quot;papersize&quot;&lt;/code&gt; property. When the output is sent to a file the size is determined by the plot box defined by the figure&amp;rsquo;s &lt;code&gt;&quot;paperposition&quot;&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5e70b5d527754991a7b4c09d7ec4c32805d272e" translate="yes" xml:space="preserve">
          <source>When Octave defines a function from a function file, it saves the full name of the file it read and the time stamp on the file. If the time stamp on the file changes, Octave may reload the file. When Octave is running interactively, time stamp checking normally happens at most once each time Octave prints the prompt. Searching for new function definitions also occurs if the current working directory changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52ec4b8ffaa4ca3fafb4c2891c8b6ac8cd603ab1" translate="yes" xml:space="preserve">
          <source>When Octave encounters an identifier that is undefined, it first looks for variables or functions that are already compiled and currently listed in its symbol table. If it fails to find a definition there, it searches a list of directories (the &lt;em&gt;path&lt;/em&gt;) for files ending in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c520daa9f795df05e8b6c6f9770633544ec7321" translate="yes" xml:space="preserve">
          <source>When Octave encounters the keyword &lt;code&gt;return&lt;/code&gt; inside a function or script, it returns control to the caller immediately. At the top level, the return statement is ignored. A &lt;code&gt;return&lt;/code&gt; statement is assumed at the end of every function definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7900268707201e3cdd5a5c57165b76abb483872" translate="yes" xml:space="preserve">
          <source>When Octave is used interactively, stdin is filtered through the command line editing functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baa175ac51214c83f1dcb0d708aeb733664bdb6e" translate="yes" xml:space="preserve">
          <source>When Octave parses a matrix expression, it examines the elements of the list to determine whether they are all constants. If they are, it replaces the list with a single matrix constant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c9f706844a8f031dd2fc78d4d1114f517a2bd23" translate="yes" xml:space="preserve">
          <source>When Octave parses a range expression, it examines the elements of the expression to determine whether they are all constants. If they are, it replaces the range expression with a single range constant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e0224789b6c270f9b4e588e3465fcdb57c391b8" translate="yes" xml:space="preserve">
          <source>When Octave starts, it looks for commands to execute from the files in the following list. These files may contain any valid Octave commands, including function definitions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e96f3b7349824078503e874ace920f192463a21" translate="yes" xml:space="preserve">
          <source>When a &lt;em&gt;matching failure&lt;/em&gt; occurs, &lt;code&gt;scanf&lt;/code&gt; returns immediately, leaving the first non-matching character as the next character to be read from the stream, and &lt;code&gt;scanf&lt;/code&gt; returns all the items that were successfully converted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da49fdf676149f6aed230750772287e9985419b3" translate="yes" xml:space="preserve">
          <source>When a colon is used in the special case of 1-D indexing the result is always a column vector. Creating column vectors with a colon index is a very frequently encountered code idiom and is faster and generally clearer than calling &lt;code&gt;reshape&lt;/code&gt; for this case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99ca90ea19dc3cda312567b4253b71262f867fde" translate="yes" xml:space="preserve">
          <source>When a file is re-parsed, such as when it is modified outside the GUI, all breakpoints within the file are cleared.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="847a89195b78ad6eb45989f810811c217341b094" translate="yes" xml:space="preserve">
          <source>When a function is called, Octave searches a list of directories for a file that contains the function declaration. This list of directories is known as the load path. By default the load path contains a list of directories distributed with Octave plus the current working directory. To see your current load path call the &lt;code&gt;path&lt;/code&gt; function without any input or output arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f045d0b3d7eb731dd6846eb395ba5c8f430a0ca" translate="yes" xml:space="preserve">
          <source>When a light object is present in an axes object, and the properties &lt;code&gt;&quot;EdgeLighting&quot;&lt;/code&gt; or &lt;code&gt;&quot;FaceLighting&quot;&lt;/code&gt; of a &lt;code&gt;patch&lt;/code&gt; or &lt;code&gt;surface&lt;/code&gt; object are set to a value other than &lt;code&gt;&quot;none&quot;&lt;/code&gt;, these objects are drawn with lighting effects. Supported values for Lighting properties are &lt;code&gt;&quot;none&quot;&lt;/code&gt; (no lighting effects), &lt;code&gt;&quot;flat&quot;&lt;/code&gt; (faceted look of the objects), and &lt;code&gt;&quot;gouraud&quot;&lt;/code&gt; (linear interpolation of the lighting effects between the vertices). If the lighting mode is set to &lt;code&gt;&quot;flat&quot;&lt;/code&gt;, the &lt;code&gt;&quot;FaceNormals&quot;&lt;/code&gt; property is used for lighting. For &lt;code&gt;&quot;gouraud&quot;&lt;/code&gt;, the &lt;code&gt;&quot;VertexNormals&quot;&lt;/code&gt; property is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b89d458e581074fb64619088ee0b2a2dc4efab5" translate="yes" xml:space="preserve">
          <source>When a second output argument is requested an index matrix is also returned. The &lt;var&gt;idx&lt;/var&gt; matrix has the same size as &lt;var&gt;x&lt;/var&gt;. Each element of &lt;var&gt;idx&lt;/var&gt; contains the index of the histogram bin in which the corresponding element of &lt;var&gt;x&lt;/var&gt; was counted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a0ced3835eb9e85e77a6614ba80c927315d2723" translate="yes" xml:space="preserve">
          <source>When a test fails, you will see something like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89801f7a126b1478d4820e2e71f4e68d005c8fdf" translate="yes" xml:space="preserve">
          <source>When adding a scalar to a range, subtracting a scalar from it (or subtracting a range from a scalar) and multiplying by scalar, Octave will attempt to avoid unpacking the range and keep the result as a range, too, if it can determine that it is safe to do so. For instance, doing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcce64ef5e4993e4795757b8304569a85a8b6b34" translate="yes" xml:space="preserve">
          <source>When an error has been handled it is possible to raise it again. This can be useful when an error needs to be detected, but the program should still abort. This is possible using the &lt;code&gt;rethrow&lt;/code&gt; function. The previous example can now be changed to count the number of errors related to the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="859fa22eb96df5664bbd8a907389e5c7f95a2470" translate="yes" xml:space="preserve">
          <source>When an error occurs, it can be detected and handled using the &lt;code&gt;try&lt;/code&gt; statement as described in &lt;a href=&quot;the-try-statement#The-try-Statement&quot;&gt;The try Statement&lt;/a&gt;. As an example, the following piece of code counts the number of errors that occurs during a &lt;code&gt;for&lt;/code&gt; loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c59e5a4f88ba50e51b0b56eb5d9e33f7a7c17b69" translate="yes" xml:space="preserve">
          <source>When applied to an array (possibly multi-dimensional) with &lt;var&gt;n&lt;/var&gt; columns, &lt;var&gt;fcn&lt;/var&gt; may return a result in either of two formats: Format 1) an array of size 1-by-&lt;var&gt;n&lt;/var&gt;-by-&lt;var&gt;dim3&lt;/var&gt;-by-&amp;hellip;-by-&lt;var&gt;dimN&lt;/var&gt;. This is the typical output format from Octave core functions. Type &lt;code&gt;demo (&quot;movfun&quot;, 5)&lt;/code&gt; for an example of this use case. Format 2) a row vector of length &lt;code&gt;&lt;var&gt;n&lt;/var&gt; * &lt;var&gt;numel_higher_dims&lt;/var&gt;&lt;/code&gt; where &lt;var&gt;numel_higher_dims&lt;/var&gt; is &lt;code&gt;prod&amp;nbsp;(size&amp;nbsp;(&lt;var&gt;x&lt;/var&gt;)(3:end))&lt;/code&gt;. The output of &lt;var&gt;fcn&lt;/var&gt; for the i-th input column must be found in the output at indices &lt;code&gt;i:&lt;var&gt;n&lt;/var&gt;:(&lt;var&gt;n&lt;/var&gt;*&lt;var&gt;numel_higher_dims&lt;/var&gt;)&lt;/code&gt;. This format is useful when concatenating functions into arrays, or when using &lt;code&gt;nthargout&lt;/code&gt;. Type &lt;code&gt;demo (&quot;movfun&quot;, 6)&lt;/code&gt; for an example of this case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="824638cd2a745728fa51a300c39faf125f21b35f" translate="yes" xml:space="preserve">
          <source>When called from a class constructor, mark the object currently constructed as having a higher precedence than &lt;var&gt;class_name&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="039a7dd9eb9ffffd64e5c4c034f79ee9f16f87d0" translate="yes" xml:space="preserve">
          <source>When called from a class constructor, mark the object currently constructed as having a lower precedence than &lt;var&gt;class_name&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c2a1679f85b4d75684ac4fc31eabdd3d1631dd6" translate="yes" xml:space="preserve">
          <source>When called from an m-file function, the error is prefixed with the name of the caller function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96a0116fd9380c88cb0ba8c36cf13ad9b13623fa" translate="yes" xml:space="preserve">
          <source>When called from inside a function with the &lt;code&gt;&quot;local&quot;&lt;/code&gt; option, the variable is changed locally for the function and any subroutines it calls. The original variable value is restored when exiting the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c17b861f4d3587e1da85197e81e2b1159332e7b" translate="yes" xml:space="preserve">
          <source>When called this function returns values like this</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d914b672c64d0b023edc1d1407d6e96642eab89" translate="yes" xml:space="preserve">
          <source>When called with &lt;code&gt;&quot;KeyType&quot;&lt;/code&gt; and &lt;code&gt;&quot;ValueType&quot;&lt;/code&gt; arguments, create an empty map with the specified types. The inputs &lt;var&gt;kt&lt;/var&gt; and &lt;var&gt;vt&lt;/var&gt; are the types for the keys and values of the map respectively. Allowed values for &lt;var&gt;kt&lt;/var&gt; are &lt;code&gt;&quot;char&quot;&lt;/code&gt;, &lt;code&gt;&quot;double&quot;&lt;/code&gt;, &lt;code&gt;&quot;single&quot;&lt;/code&gt;, &lt;code&gt;&quot;int32&quot;&lt;/code&gt;, &lt;code&gt;&quot;uint32&quot;&lt;/code&gt;, &lt;code&gt;&quot;int64&quot;&lt;/code&gt;, &lt;code&gt;&quot;uint64&quot;&lt;/code&gt;. Allowed values for &lt;var&gt;vt&lt;/var&gt; are &lt;code&gt;&quot;any&quot;&lt;/code&gt;, &lt;code&gt;&quot;char&quot;&lt;/code&gt;, &lt;code&gt;&quot;double&quot;&lt;/code&gt;, &lt;code&gt;&quot;single&quot;&lt;/code&gt;, &lt;code&gt;&quot;int32&quot;&lt;/code&gt;, &lt;code&gt;&quot;uint32&quot;&lt;/code&gt;, &lt;code&gt;&quot;int64&quot;&lt;/code&gt;, &lt;code&gt;&quot;uint64&quot;&lt;/code&gt;, &lt;code&gt;&quot;logical&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e0e3a11e352213adb3532928a8e434f165ac739" translate="yes" xml:space="preserve">
          <source>When called with a character string &lt;var&gt;name&lt;/var&gt;, return the numeric value of errno which corresponds to the specified error code. If &lt;var&gt;name&lt;/var&gt; is not a recognized error code then -1 is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bfea2121297bd44aeb812ca1127ccf61ad46c4f" translate="yes" xml:space="preserve">
          <source>When called with a complex-valued argument, the function &lt;code&gt;f&lt;/code&gt; returns the data structure containing the real and imaginary parts of the original function argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edbf4e93968442f70206d0de673d69ae64a06572" translate="yes" xml:space="preserve">
          <source>When called with a list of parameter/value pairs, return an options structure with only the named parameters initialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e14d8b4461d46b6d55b9662b41e8e1a76d1d7df" translate="yes" xml:space="preserve">
          <source>When called with a numeric input &lt;var&gt;val&lt;/var&gt;, set the current value of errno to the specified value. The previous value of errno is returned as &lt;var&gt;err&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62cba9190ba370e806424f801982f0fe0a6cbf9d" translate="yes" xml:space="preserve">
          <source>When called with a second output argument, return the handle of the figure containing the object whose callback is currently executing. If no callback is executing the second output is also set to the empty matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7844c88f0ba438fd5924714a1164282cad9c4fba" translate="yes" xml:space="preserve">
          <source>When called with a single argument &lt;var&gt;h&lt;/var&gt; which is a handle to an existing uibuttongroup object, switch the focus to the specified uibuttongroup. This functionality is not currently implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3a552c9f39f9927a6b71b217f4fb0c29db4b163" translate="yes" xml:space="preserve">
          <source>When called with a single argument &lt;var&gt;h&lt;/var&gt; which is a handle to an existing uicontrol object, switch the keyboard focus to the specified uicontrol. As a result, the uicontrol object will receive keyboard events that can be processed using the &lt;code&gt;&quot;keypressfcn&quot;&lt;/code&gt; callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63b8ce3e0181a98a42c07267817da95c9fe9b529" translate="yes" xml:space="preserve">
          <source>When called with a single argument &lt;var&gt;x&lt;/var&gt; this is equivalent to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b82cbbab95e9006e69472b0f62b9c34d0913a47c" translate="yes" xml:space="preserve">
          <source>When called with a single argument, return a square matrix with the dimension specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f6988cfd88535d9cdec6191dbfec261b7174068" translate="yes" xml:space="preserve">
          <source>When called with a single input &lt;var&gt;name&lt;/var&gt; set the default graphics toolkit to &lt;var&gt;name&lt;/var&gt;. If the toolkit is not already loaded, it is initialized by calling the function &lt;code&gt;__init_&lt;var&gt;name&lt;/var&gt;__&lt;/code&gt;. If the first input is a list of figure handles, &lt;var&gt;hlist&lt;/var&gt;, then the graphics toolkit is set to &lt;var&gt;name&lt;/var&gt; for these figures only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="196b200950ccf8fceca4cd270194995b78d12736" translate="yes" xml:space="preserve">
          <source>When called with a single input the current waitbar, if it exists, is updated to the new value &lt;var&gt;frac&lt;/var&gt;. If there are multiple outstanding waitbars they can be updated individually by passing the handle &lt;var&gt;h&lt;/var&gt; of the specific waitbar to modify.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a9bd05b3be9e5cac31684e9c6dc122df02eeb69" translate="yes" xml:space="preserve">
          <source>When called with a single output argument &lt;code&gt;isosurface&lt;/code&gt; returns a structure array &lt;var&gt;fv&lt;/var&gt; that contains the fields &lt;var&gt;faces&lt;/var&gt; and &lt;var&gt;vertices&lt;/var&gt; computed at the points &lt;code&gt;[&lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;, &lt;var&gt;z&lt;/var&gt;] = meshgrid (1:l, 1:m, 1:n)&lt;/code&gt; where &lt;code&gt;[l, m, n] = size (&lt;var&gt;v&lt;/var&gt;)&lt;/code&gt;. The output &lt;var&gt;fv&lt;/var&gt; can be used directly as input to the &lt;code&gt;patch&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53fa03358bb6263852d175fd396a7d5d0eba9215" translate="yes" xml:space="preserve">
          <source>When called with a single output argument, &lt;code&gt;isocaps&lt;/code&gt; returns a structure array &lt;var&gt;fvc&lt;/var&gt; with the fields: &lt;code&gt;faces&lt;/code&gt;, &lt;code&gt;vertices&lt;/code&gt;, and &lt;code&gt;facevertexcdata&lt;/code&gt;. The results are computed at the points &lt;code&gt;[&lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;, &lt;var&gt;z&lt;/var&gt;] = meshgrid (1:l, 1:m, 1:n)&lt;/code&gt; where &lt;code&gt;[l, m, n] = size (&lt;var&gt;v&lt;/var&gt;)&lt;/code&gt;. The output &lt;var&gt;fvc&lt;/var&gt; can be used directly as input to the &lt;code&gt;patch&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f978f0a6bde183600f1928fa08d2c756d463324" translate="yes" xml:space="preserve">
          <source>When called with a single size argument, return a square matrix with the dimension specified. When called with more than one scalar argument the first two arguments are taken as the number of rows and columns and any further arguments specify additional matrix dimensions. The size may also be specified with a vector of dimensions &lt;var&gt;sz&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7107e3eb99b5b158c13498594476ab20c9500c3" translate="yes" xml:space="preserve">
          <source>When called with a single vector argument, produce a pie chart of the elements in &lt;var&gt;x&lt;/var&gt;. The size of the ith slice is the percentage that the element &lt;var&gt;x&lt;/var&gt;i represents of the total sum of &lt;var&gt;x&lt;/var&gt;: &lt;code&gt;pct = &lt;var&gt;x&lt;/var&gt;(i) / sum (&lt;var&gt;x&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6617d16dfc00ea47813d28158662ed96c170ffc8" translate="yes" xml:space="preserve">
          <source>When called with a string, the aforementioned properties are set according to the values in the following table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d690c22db89da0b74129cbd0b6958bf0614ae0eb" translate="yes" xml:space="preserve">
          <source>When called with a third input argument, &lt;code&gt;pchip&lt;/code&gt; evaluates the pchip polynomial at the points &lt;var&gt;xi&lt;/var&gt;. The third calling form is equivalent to &lt;code&gt;ppval (pchip (&lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;), &lt;var&gt;xi&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9f7d1797c7b845b0a05013676bcd62443e2eca7" translate="yes" xml:space="preserve">
          <source>When called with a third input argument, &lt;code&gt;spline&lt;/code&gt; evaluates the spline at the points &lt;var&gt;xi&lt;/var&gt;. The third calling form &lt;code&gt;spline (&lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;, &lt;var&gt;xi&lt;/var&gt;)&lt;/code&gt; is equivalent to &lt;code&gt;ppval (spline (&lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;), &lt;var&gt;xi&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5912c7a13039c8d7d84632b0ae09bb7d8ad47702" translate="yes" xml:space="preserve">
          <source>When called with a vector of three elements, the ambient, diffuse, and specular strengths of all &lt;code&gt;patch&lt;/code&gt; and &lt;code&gt;surface&lt;/code&gt; objects in the current axes are updated. An optional fourth vector element updates the specular exponent, and an optional fifth vector element updates the specular color reflectance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0571e1e72364c30079cc11ecea5bcc5aca254db1" translate="yes" xml:space="preserve">
          <source>When called with an optional third argument the order of colors in the new colormap is defined by &lt;var&gt;index&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6106003e90857a731661b66bf2a42e53b8d2426" translate="yes" xml:space="preserve">
          <source>When called with an output argument, return a vector of structures describing Octave and each installed package. The structure includes the following fields.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b12f91c889dc385b75571e85ec5067e3eb1ba4bc" translate="yes" xml:space="preserve">
          <source>When called with argument &lt;code&gt;&quot;mode&quot;&lt;/code&gt;, &lt;code&gt;xticklabels&lt;/code&gt; returns the current value of the axes property &lt;code&gt;&quot;xticklabelmode&quot;&lt;/code&gt;. This property can be changed by calling &lt;code&gt;xticklabels&lt;/code&gt; with either &lt;code&gt;&quot;auto&quot;&lt;/code&gt; (algorithm determines tick labels) or &lt;code&gt;&quot;manual&quot;&lt;/code&gt; (tick labels remain fixed). Note: Specifying xticklabel values will also set the &lt;code&gt;&quot;xticklabelmode&quot;&lt;/code&gt; and &lt;code&gt;&quot;xticks&quot;&lt;/code&gt; properties to &lt;code&gt;&quot;manual&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1543ee478100234577c8472a5902511002d06b8f" translate="yes" xml:space="preserve">
          <source>When called with argument &lt;code&gt;&quot;mode&quot;&lt;/code&gt;, &lt;code&gt;xticks&lt;/code&gt; returns the current value of the axes property &lt;code&gt;&quot;xtickmode&quot;&lt;/code&gt;. This property can be changed by calling &lt;code&gt;xticks&lt;/code&gt; with either &lt;code&gt;&quot;auto&quot;&lt;/code&gt; (algorithm determines tick positions) or &lt;code&gt;&quot;manual&quot;&lt;/code&gt; (tick values remain fixed regardless of axes resizing or rotation). Note: Specifying xtick values will also set the property &lt;code&gt;&quot;xtickmode&quot;&lt;/code&gt; to &lt;code&gt;&quot;manual&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec208446d249f8b8a00c1b178efc0411bed34153" translate="yes" xml:space="preserve">
          <source>When called with just a single output argument &lt;var&gt;success&lt;/var&gt;, &lt;code&gt;test&lt;/code&gt; returns true if all of the tests were successful. If called with more than one output argument then the number of successful tests (&lt;var&gt;n&lt;/var&gt;), the total number of tests in the file (&lt;var&gt;nmax&lt;/var&gt;), the number of xtest failures (&lt;var&gt;nxfail&lt;/var&gt;), the number of tests failed due known bugs (&lt;var&gt;nbug&lt;/var&gt;), the number of tests skipped due to missing features (&lt;var&gt;nskip&lt;/var&gt;), the number of tests skipped due to run-time conditions (&lt;var&gt;nrtskip&lt;/var&gt;), and the number of regressions (&lt;var&gt;nregression&lt;/var&gt;) are returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58d8def1603dc8cebe37a653914f28a8493adda2" translate="yes" xml:space="preserve">
          <source>When called with more than one argument the first two arguments are taken as the number of rows and columns and any further arguments specify additional matrix dimensions. The optional argument &lt;var&gt;class&lt;/var&gt; specifies the return type and may be either &lt;code&gt;&quot;double&quot;&lt;/code&gt; or &lt;code&gt;&quot;single&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b7967a7b99e6fe25e27b9568a376336b12bd6d3" translate="yes" xml:space="preserve">
          <source>When called with more than one scalar argument the first two arguments are taken as the number of rows and columns and any further arguments specify additional matrix dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27c8c8897b326272181e0f10c49e41641ede726a" translate="yes" xml:space="preserve">
          <source>When called with no argument the hidden line removal state is toggled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1363c6dafefb968186423c28e913a77b16c7949" translate="yes" xml:space="preserve">
          <source>When called with no arguments in debugging mode, display the script file currently being debugged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="defb9134f86f75925317687f0beb96c27163f857" translate="yes" xml:space="preserve">
          <source>When called with no arguments, &lt;code&gt;clearvars&lt;/code&gt; deletes all local variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e2a2e6dc93d3488539ba440cf12f4f0d7471de1" translate="yes" xml:space="preserve">
          <source>When called with no arguments, a light object is added to the current plot and is placed slightly above and to the right of the camera&amp;rsquo;s current position: this is equivalent to &lt;code&gt;camlight right&lt;/code&gt;. The commands &lt;code&gt;camlight left&lt;/code&gt; and &lt;code&gt;camlight headlight&lt;/code&gt; behave similarly with the placement being either left of the camera position or centered on the camera position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ada31907fdf98e527ec4009238d62d2981120809" translate="yes" xml:space="preserve">
          <source>When called with no arguments, close the current figure. This is equivalent to &lt;code&gt;close (gcf)&lt;/code&gt;. If the input &lt;var&gt;h&lt;/var&gt; is a graphic handle, or vector of graphics handles, then close each figure in &lt;var&gt;h&lt;/var&gt;. The figure to close may also be specified by name &lt;var&gt;figname&lt;/var&gt; which is matched against the &lt;code&gt;&quot;Name&quot;&lt;/code&gt; property of all figures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ee97b13a0c53d178aae93f61429c363272e5d5e" translate="yes" xml:space="preserve">
          <source>When called with no arguments, return a scalar with the value &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67e5d5585b35896e308f0362bbe0ed87cd7b7cfa" translate="yes" xml:space="preserve">
          <source>When called with no arguments, return a scalar with the value &lt;code&gt;eps (1.0)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b1d3209fc138f0a15331e0127085378e20d0f98" translate="yes" xml:space="preserve">
          <source>When called with no arguments, return a scalar with the value &lt;code&gt;realmax (&lt;code&gt;&quot;double&quot;&lt;/code&gt;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eccb9d1dece6f0bee8a8e059fec4080954757f8" translate="yes" xml:space="preserve">
          <source>When called with no arguments, return a scalar with the value &lt;code&gt;realmin (&lt;code&gt;&quot;double&quot;&lt;/code&gt;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="790dbfd1008015554eb09d1ba9dc1ce49a4e2cfe" translate="yes" xml:space="preserve">
          <source>When called with no arguments, return a scalar with the value &lt;em&gt;e&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53c42adc9631c6b59e9912d3acf278930762ee7f" translate="yes" xml:space="preserve">
          <source>When called with no arguments, return a scalar with the value &lt;em&gt;i&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8403587fed92e1d80a9619e52261d742a9f843f6" translate="yes" xml:space="preserve">
          <source>When called with no arguments, return a scalar with the value of pi.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8ae78521b95f284039298bd86b1652455cb1d7c" translate="yes" xml:space="preserve">
          <source>When called with no arguments, return the current print orientation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6bbd68342dead75b74b7683e0ab6b66eb131cf4" translate="yes" xml:space="preserve">
          <source>When called with no arguments, the names of all available options and their current values are displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68c3679768318677d3528dc001462951b48b2cf2" translate="yes" xml:space="preserve">
          <source>When called with no extra input arguments, it returns the Octave license, otherwise the first input defines the operation mode and must be one of the following strings: &lt;code&gt;inuse&lt;/code&gt;, &lt;code&gt;test&lt;/code&gt;, and &lt;code&gt;checkout&lt;/code&gt;. The optional &lt;var&gt;feature&lt;/var&gt; argument can either be &lt;code&gt;&quot;octave&quot;&lt;/code&gt; (core), or an Octave package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1046ed4c0ab71423c2c66a0d04c8b4e47abe3f41" translate="yes" xml:space="preserve">
          <source>When called with no input argument and one output argument, return a new ODE options structure that contains all possible fields initialized to their default values. If no output argument is requested, display a list of the common ODE solver options along with their default value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b8babe9cd4a499630a96f7080d453d7852ecd7b" translate="yes" xml:space="preserve">
          <source>When called with no input arguments a default map is created with strings as the key type and &lt;code&gt;&quot;any&quot;&lt;/code&gt; as the value type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="038c50cb5ee80f5e177a1157dfd51547500463c9" translate="yes" xml:space="preserve">
          <source>When called with no input arguments the &lt;code&gt;print_usage&lt;/code&gt; function displays the usage message of the currently executing function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d0c3de4496e5bdcfffd98edaaba1068b52856d9" translate="yes" xml:space="preserve">
          <source>When called with no input or output arguments, print the list of all functions with breakpoints and the line numbers where those breakpoints are set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5a2532a39d5863238c58042658f24ca1694fda0" translate="yes" xml:space="preserve">
          <source>When called with no inputs, return the current value of errno.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c0809b24158073b6eb69b2444d61369643686cf" translate="yes" xml:space="preserve">
          <source>When called with no output argument, or the &lt;code&gt;&quot;-echo&quot;&lt;/code&gt; argument is given, then &lt;var&gt;text&lt;/var&gt; is also sent to standard output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f5e1bfbb63747ecbdd45c801f9d2e18c2c0113e" translate="yes" xml:space="preserve">
          <source>When called with no output arguments, &lt;code&gt;lookfor&lt;/code&gt; prints the list of matching functions to the terminal. Otherwise, the output argument &lt;var&gt;fcns&lt;/var&gt; contains the function names and &lt;var&gt;help1str&lt;/var&gt; contains the first sentence from the help string of each function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c229f92e8bcab895e90b1d9478e717228759365" translate="yes" xml:space="preserve">
          <source>When called with no output arguments, &lt;code&gt;methods&lt;/code&gt; prints the list of method names to the screen. Otherwise, the output argument &lt;var&gt;mtds&lt;/var&gt; contains the list in a cell array of strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d0f0cbf1c2e5c2ba41d40bcbd031320e12aa44d" translate="yes" xml:space="preserve">
          <source>When called with no outputs the periodogram is immediately plotted in the current figure window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40c37fe4d1f4eb5f2c40666a593fdbde3f6f98c5" translate="yes" xml:space="preserve">
          <source>When called with one of the modes &lt;code&gt;&quot;on&quot;&lt;/code&gt; or &lt;code&gt;&quot;off&quot;&lt;/code&gt; the state is set accordingly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="801cb8b8eb0a80525e372c0d33f75a965ce381ce" translate="yes" xml:space="preserve">
          <source>When called with one output and no inputs, return an options structure with all valid option parameters initialized to &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a0423ee323d4b89a177010dfd6e35bec40ae839" translate="yes" xml:space="preserve">
          <source>When called with one output argument, return a string containing a continued fraction expansion (multiple terms).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d5602fdad04b15911922e484f855824d3ae8c32" translate="yes" xml:space="preserve">
          <source>When called with one output only elliptic integrals of the first kind are returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a4a8be83eba5e6e8172f63fc9a17991eab3acc9" translate="yes" xml:space="preserve">
          <source>When called with only two arguments, &lt;code&gt;cmpermute&lt;/code&gt; randomly rearranges the colormap &lt;var&gt;map&lt;/var&gt; and returns a new colormap &lt;var&gt;newmap&lt;/var&gt;. It also returns the indexed image &lt;var&gt;Y&lt;/var&gt; which is the equivalent of the original input image &lt;var&gt;X&lt;/var&gt; when displayed using &lt;var&gt;newmap&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de134f154d591d57d0d5c8f4e905cefde039f211" translate="yes" xml:space="preserve">
          <source>When called with output arguments, return the data for the function evaluated over the meshgrid. This can subsequently be plotted with &lt;code&gt;surf (&lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;, &lt;var&gt;z&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b7723bf9e0b7fe31676258acb6f558e5b6b83bc" translate="yes" xml:space="preserve">
          <source>When called with output arguments, the examples are returned in the form of a string &lt;var&gt;s&lt;/var&gt;, with &lt;var&gt;idx&lt;/var&gt; indicating the ending position of the various examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f75551ed0ec52d20e8ccc65f9ef6b65e61cb567" translate="yes" xml:space="preserve">
          <source>When called with the &lt;code&gt;&quot;warning&quot;&lt;/code&gt; option &lt;code&gt;fail&lt;/code&gt; will produce an error if executing the code produces no warning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf6d49a0d08ec7dbf2f9641f794f790234bb2d09" translate="yes" xml:space="preserve">
          <source>When called with the name of a function, list that script file with line numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="108489bab7c0283a92553b349ad16454f35da5ea" translate="yes" xml:space="preserve">
          <source>When called with two arguments, &lt;code&gt;daspk_options&lt;/code&gt; sets the option &lt;var&gt;opt&lt;/var&gt; to value &lt;var&gt;val&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d575a4047d1f6fd1a15bb0a822be02cbfc8ede4" translate="yes" xml:space="preserve">
          <source>When called with two arguments, &lt;code&gt;dasrt_options&lt;/code&gt; sets the option &lt;var&gt;opt&lt;/var&gt; to value &lt;var&gt;val&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c180fba300e0412405277d7a041d3981a479c65c" translate="yes" xml:space="preserve">
          <source>When called with two arguments, &lt;code&gt;dassl_options&lt;/code&gt; sets the option &lt;var&gt;opt&lt;/var&gt; to value &lt;var&gt;val&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cdd317d616c3c6e2e52de90cc18b823a8fe3eeb" translate="yes" xml:space="preserve">
          <source>When called with two arguments, &lt;code&gt;lsode_options&lt;/code&gt; sets the option &lt;var&gt;opt&lt;/var&gt; to value &lt;var&gt;val&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e581c84e05fb0619029d7b17b606052a2365ca1" translate="yes" xml:space="preserve">
          <source>When called with two arguments, &lt;code&gt;quad_options&lt;/code&gt; sets the option &lt;var&gt;opt&lt;/var&gt; to value &lt;var&gt;val&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca8bd71d2d4e1bf36ca82c18bdeaecac9c084cde" translate="yes" xml:space="preserve">
          <source>When called with two arguments, return the piecewise polynomial &lt;var&gt;pp&lt;/var&gt; that may be used with &lt;code&gt;ppval&lt;/code&gt; to evaluate the polynomial at specific points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="851e4e7cb65856707fbbac1b46eeed3c6b093c1a" translate="yes" xml:space="preserve">
          <source>When called with two input ODE options structures &lt;var&gt;oldstruct&lt;/var&gt; and &lt;var&gt;newstruct&lt;/var&gt; overwrite all values from the structure &lt;var&gt;oldstruct&lt;/var&gt; with new values from the structure &lt;var&gt;newstruct&lt;/var&gt;. Empty values in &lt;var&gt;newstruct&lt;/var&gt; will not overwrite values in &lt;var&gt;oldstruct&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="461821e048c20c8bf9f0e07f52f20887f1932070" translate="yes" xml:space="preserve">
          <source>When called with two or three output arguments and a sparse input matrix, &lt;code&gt;lu&lt;/code&gt; does not attempt to perform sparsity preserving column permutations. Called with a fourth output argument, the sparsity preserving column transformation &lt;var&gt;Q&lt;/var&gt; is returned, such that &lt;code&gt;&lt;var&gt;P&lt;/var&gt; * &lt;var&gt;A&lt;/var&gt; * &lt;var&gt;Q&lt;/var&gt; = &lt;var&gt;L&lt;/var&gt; * &lt;var&gt;U&lt;/var&gt;&lt;/code&gt;. This is the &lt;strong&gt;preferred&lt;/strong&gt; way to call &lt;code&gt;lu&lt;/code&gt; with sparse input matrices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2355dbace9ea2a76c3d61c4fbbe0b59cc3e3b2f2" translate="yes" xml:space="preserve">
          <source>When called with two output arguments, [&lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;], &lt;var&gt;x&lt;/var&gt; will contain the input values, and &lt;var&gt;y&lt;/var&gt; will contain the output from &lt;code&gt;humps&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="288c13363c859382a9729a7dbadf247ccd305a68" translate="yes" xml:space="preserve">
          <source>When called with two output arguments, return numeric matrices for the numerator and denominator of a fractional representation of &lt;var&gt;x&lt;/var&gt; such that &lt;code&gt;&lt;var&gt;x&lt;/var&gt; = &lt;var&gt;n&lt;/var&gt; ./ &lt;var&gt;d&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
