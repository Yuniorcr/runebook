<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="en" datatype="htmlbody" original="octave">
    <body>
      <group id="octave">
        <trans-unit id="674d23ff2969413209cf0c2c0d42d469970e66da" translate="yes" xml:space="preserve">
          <source>If nonzero, &lt;code&gt;dassl&lt;/code&gt; will attempt to compute a consistent set of initial conditions. This is generally not reliable, so it is best to provide a consistent set and leave this option set to zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b165df1973bb72a7de8b5dfb96b037a86139c23" translate="yes" xml:space="preserve">
          <source>If nonzero, aggressive absorption is performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ea63fac6cab4cd3cc570eb18cf54366d2217416" translate="yes" xml:space="preserve">
          <source>If nonzero, statistics and knobs are printed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56ba5d9996ed61a66a2d8b9c0a102f8b821d946c" translate="yes" xml:space="preserve">
          <source>If one of the elements of &lt;var&gt;vec&lt;/var&gt; is an odd number, this example skips the print statement for that element, and continues back to the first statement in the loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac5c17124b163750601e7b598515a6c0c68ad0f3" translate="yes" xml:space="preserve">
          <source>If one output argument is requested, return a graphics handle to the created plot. If two output arguments are specified, the data are generated but not plotted. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a5224e207c8c7e22dc6adf979aaccdda7bcb2d4" translate="yes" xml:space="preserve">
          <source>If one output is requested a cell of structure containing the description and list of functions of each package is returned as output rather than printed on screen:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67fe3b729e9f1a4a860a0da9c6446221d38fc403" translate="yes" xml:space="preserve">
          <source>If one output value &lt;var&gt;dpath&lt;/var&gt; is requested, the result is the dynamic classpath.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="490f28ff13fc715037fd778dee0a1d134ff42913" translate="yes" xml:space="preserve">
          <source>If only &lt;var&gt;m&lt;/var&gt; is supplied, and it is a scalar, the dimension of the result is &lt;var&gt;m&lt;/var&gt;-by-&lt;var&gt;m&lt;/var&gt;. If &lt;var&gt;m&lt;/var&gt;, &lt;var&gt;n&lt;/var&gt;, &amp;hellip; are all scalars, then the dimensions of the result are &lt;var&gt;m&lt;/var&gt;-by-&lt;var&gt;n&lt;/var&gt;-by-&amp;hellip;. If given a vector as input, then the dimensions of the result are given by the elements of that vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ae6a37ec3b16ad0850de50d6c578b5a0014318b" translate="yes" xml:space="preserve">
          <source>If only &lt;var&gt;msg&lt;/var&gt; and &lt;var&gt;title&lt;/var&gt; are specified, three buttons with the default captions &lt;code&gt;&quot;Yes&quot;&lt;/code&gt;, &lt;code&gt;&quot;No&quot;&lt;/code&gt;, and &lt;code&gt;&quot;Cancel&quot;&lt;/code&gt; are used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d5e95896c970671dce26ccde155feee16bb7d49" translate="yes" xml:space="preserve">
          <source>If only &lt;var&gt;z&lt;/var&gt; is specified then &lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt; default to the indices of &lt;var&gt;z&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a3d90bffbbedd0c7c149dbf0c8ef90bef33c2f1" translate="yes" xml:space="preserve">
          <source>If only a single input parameter is supplied, its value is copied to each of the outputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4860d648f609f1886f69e0bd21984ac804724a3f" translate="yes" xml:space="preserve">
          <source>If only a single return argument is requested then return a matrix &lt;var&gt;C&lt;/var&gt; where each row represents one Cartesian coordinate (&lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt; (, &lt;var&gt;z&lt;/var&gt;)).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d188bba2fb06d7cf73c04ef43e3992a21a86c18b" translate="yes" xml:space="preserve">
          <source>If only a single return argument is requested then return a matrix &lt;var&gt;C&lt;/var&gt; where each row represents one Cartesian coordinate (&lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;, &lt;var&gt;z&lt;/var&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84d928ac8b07f36fee71937a83cf6fca9fe91e6f" translate="yes" xml:space="preserve">
          <source>If only a single return argument is requested then return a matrix &lt;var&gt;P&lt;/var&gt; where each row represents one polar/(cylindrical) coordinate (&lt;var&gt;theta&lt;/var&gt;, &lt;var&gt;phi&lt;/var&gt; (, &lt;var&gt;z&lt;/var&gt;)).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10b3397a6f71312a5f566c5b0698226301abb33d" translate="yes" xml:space="preserve">
          <source>If only a single return argument is requested then return a matrix &lt;var&gt;S&lt;/var&gt; where each row represents one spherical coordinate (&lt;var&gt;theta&lt;/var&gt;, &lt;var&gt;phi&lt;/var&gt;, &lt;var&gt;r&lt;/var&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c655d060d3bdd5cf436bf45babb8c4de9a70e4a2" translate="yes" xml:space="preserve">
          <source>If only one argument &lt;var&gt;m&lt;/var&gt; is given, &lt;em&gt;K(m,m)&lt;/em&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45022eef5350b365e1d80e0a1246e13f33baaf78" translate="yes" xml:space="preserve">
          <source>If only one argument is given, &lt;var&gt;y&lt;/var&gt;, it is taken as a vector of Y values and the X coordinates are the range &lt;code&gt;1:numel (&lt;var&gt;y&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0fedf41c8b4da20cb00e1931fffc9f64ac638f2" translate="yes" xml:space="preserve">
          <source>If only one argument is given, as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a027b81c38f527bbf582e3e0278f1ce66cf1c6d4" translate="yes" xml:space="preserve">
          <source>If only one argument is given, it is taken as a vector of Y values and the X coordinates are the range &lt;code&gt;1:numel (&lt;var&gt;y&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f00d250953cf0c002249dfcf16cf23d9ec33ad1a" translate="yes" xml:space="preserve">
          <source>If only one argument is given, it is taken as the y-values and the x-coordinates are taken from the indices of the elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="797d34e15d19353a1873268d41e8da4b070618de" translate="yes" xml:space="preserve">
          <source>If only one numeric argument is supplied, then it must be a three digit value specifying the number of rows in digit 1, the number of columns in digit 2, and the plot index in digit 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddbee24e6f034d3ffba7a06ed3f9e3191504af3b" translate="yes" xml:space="preserve">
          <source>If only two arguments are given, as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ed8cc3c33c193199f4a9d5c7072f23bab1b18c7" translate="yes" xml:space="preserve">
          <source>If only two button captions, &lt;var&gt;btn1&lt;/var&gt; and &lt;var&gt;btn2&lt;/var&gt;, are specified the dialog will have only these two buttons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="233fde17bea67c2a376551a9a9f1f045bb57b42a" translate="yes" xml:space="preserve">
          <source>If output arguments are requested then the components of the normal vectors are returned in &lt;var&gt;nx&lt;/var&gt;, &lt;var&gt;ny&lt;/var&gt;, and &lt;var&gt;nz&lt;/var&gt; and no plot is made. The normal vectors are unnormalized (magnitude != 1). To normalize, use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1432528bc1b057ec4bcb31e81e43a86dc01cde39" translate="yes" xml:space="preserve">
          <source>If output arguments are requested, &lt;code&gt;diary&lt;/code&gt; ignores inputs and returns the current status. The boolean &lt;var&gt;status&lt;/var&gt; indicates whether recording is on or off, and &lt;var&gt;diaryfile&lt;/var&gt; is the name of the file where the session is stored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc932d22d1d75a03ed86e76ae5c8c43a8642a8bf" translate="yes" xml:space="preserve">
          <source>If outputs are requested &lt;code&gt;cylinder&lt;/code&gt; returns three matrices in &lt;code&gt;meshgrid&lt;/code&gt; format, such that &lt;code&gt;surf (&lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;, &lt;var&gt;z&lt;/var&gt;)&lt;/code&gt; generates a unit cylinder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ede1995f33e640f9281a6b9177da44869de4e482" translate="yes" xml:space="preserve">
          <source>If outputs are requested &lt;code&gt;ellipsoid&lt;/code&gt; returns three matrices in &lt;code&gt;meshgrid&lt;/code&gt; format, such that &lt;code&gt;surf (&lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;, &lt;var&gt;z&lt;/var&gt;)&lt;/code&gt; generates the ellipsoid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdbcd473ad122342ad00aa3cf74fe85a3ae264ad" translate="yes" xml:space="preserve">
          <source>If outputs are requested &lt;code&gt;sphere&lt;/code&gt; returns three matrices in &lt;code&gt;meshgrid&lt;/code&gt; format such that &lt;code&gt;surf (&lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;, &lt;var&gt;z&lt;/var&gt;)&lt;/code&gt; generates a unit sphere.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4defa99f73f7e314a779b7e1525f2daf49ef84e7" translate="yes" xml:space="preserve">
          <source>If passed a 2-element vector [&lt;var&gt;x_lo&lt;/var&gt;&lt;var&gt;x_hi&lt;/var&gt;], the limits of the x-axis are set to these values and the mode is set to &lt;code&gt;&quot;manual&quot;&lt;/code&gt;. The special values -Inf and Inf can be used to indicate that either the lower axis limit or upper axis limit should be automatically calculated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf5f793f0f9ca0c3fb4a0f8c4a9d50d75c580831" translate="yes" xml:space="preserve">
          <source>If performance is an issue you should always start with the in-language techniques for getting better performance. Chief among these is vectorization (see &lt;a href=&quot;vectorization-and-faster-code-execution#Vectorization-and-Faster-Code-Execution&quot;&gt;Vectorization and Faster Code Execution&lt;/a&gt;) which not only makes the code concise and more understandable but improves performance (10X-100X). If loops must be used, make sure that the allocation of space for variables takes place outside the loops using an assignment to a matrix of the right size, or zeros.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6d4ca8d6988723679b8ef177a1c5283a254f89b" translate="yes" xml:space="preserve">
          <source>If present, &lt;var&gt;fmt&lt;/var&gt; must be one of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8925b650e610a0fbd2d6bec189c631889c5d73ef" translate="yes" xml:space="preserve">
          <source>If present, &lt;var&gt;n&lt;/var&gt; specifies the maximum extent of the dimension to be indexed. When possible the internal result is cached so that subsequent indexing using &lt;var&gt;ind&lt;/var&gt; will not perform the check again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11f4f4a76f25ea5440f2c33a6d7a115494c7fcdc" translate="yes" xml:space="preserve">
          <source>If present, a and/or b are of the form [+-]d[,.]d[[eE][+-]d] where the brackets indicate optional arguments and &lt;code&gt;'d'&lt;/code&gt; indicates zero or more digits. The special input values &lt;code&gt;Inf&lt;/code&gt;, &lt;code&gt;NaN&lt;/code&gt;, and &lt;code&gt;NA&lt;/code&gt; are also accepted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="380282e053adcae03e42a1c4c06284978fdfe5bd" translate="yes" xml:space="preserve">
          <source>If provided, the elements of structure &lt;var&gt;prop_struct&lt;/var&gt; will be used to override the properties of top-level objects stored in &lt;var&gt;filename&lt;/var&gt;, and the saved values from &lt;var&gt;filename&lt;/var&gt; will be stored in &lt;var&gt;old_prop&lt;/var&gt;. &lt;var&gt;old_prop&lt;/var&gt; is a cell array matching the size of &lt;var&gt;h&lt;/var&gt;; each cell contains a structure of the existing property names and values before being overridden.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffbf342a150f3f644925b25508bac692686e42cf" translate="yes" xml:space="preserve">
          <source>If requested &lt;code&gt;tsearchn&lt;/code&gt; also returns the Barycentric coordinates &lt;var&gt;p&lt;/var&gt; of the enclosing triangles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de4ba4a1374eee2ec0125136d501d5950580cc69" translate="yes" xml:space="preserve">
          <source>If requested, &lt;var&gt;err&lt;/var&gt; contains the following status information and is the same size as the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbeaf647d1f6f378faf27e0623e48545a59f99d8" translate="yes" xml:space="preserve">
          <source>If requested, &lt;var&gt;ierr&lt;/var&gt; contains the following status information and is the same size as the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd0ed638da658a6e468fef764c3aea77ec41233d" translate="yes" xml:space="preserve">
          <source>If requested, return index vectors &lt;var&gt;i&lt;/var&gt; and &lt;var&gt;j&lt;/var&gt; such that &lt;code&gt;&lt;var&gt;y&lt;/var&gt; = &lt;var&gt;x&lt;/var&gt;(&lt;var&gt;i&lt;/var&gt;)&lt;/code&gt; and &lt;code&gt;&lt;var&gt;x&lt;/var&gt; = &lt;var&gt;y&lt;/var&gt;(&lt;var&gt;j&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dab9e8afb8e17596dfe40d67325c0d477a8c98c" translate="yes" xml:space="preserve">
          <source>If requested, return index vectors &lt;var&gt;ia&lt;/var&gt; and &lt;var&gt;ib&lt;/var&gt; such that &lt;code&gt;&lt;var&gt;a&lt;/var&gt;(&lt;var&gt;ia&lt;/var&gt;)&lt;/code&gt; and &lt;code&gt;&lt;var&gt;b&lt;/var&gt;(&lt;var&gt;ib&lt;/var&gt;)&lt;/code&gt; are disjoint sets whose union is &lt;var&gt;c&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3b04914f4fd2367305b852f6ec7356750c6e021" translate="yes" xml:space="preserve">
          <source>If requested, return index vectors &lt;var&gt;ia&lt;/var&gt; and &lt;var&gt;ib&lt;/var&gt; such that &lt;code&gt;&lt;var&gt;c&lt;/var&gt; = &lt;var&gt;a&lt;/var&gt;(&lt;var&gt;ia&lt;/var&gt;)&lt;/code&gt; and &lt;code&gt;&lt;var&gt;c&lt;/var&gt; = &lt;var&gt;b&lt;/var&gt;(&lt;var&gt;ib&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6692767142b0d5d4d28327a07aa128fb72525621" translate="yes" xml:space="preserve">
          <source>If requested, return the index vector &lt;var&gt;ia&lt;/var&gt; such that &lt;code&gt;&lt;var&gt;c&lt;/var&gt; = &lt;var&gt;a&lt;/var&gt;(&lt;var&gt;ia&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="143dc195b6fb7c7b7b0e3405f8cb4d0679d85a4a" translate="yes" xml:space="preserve">
          <source>If save is invoked using the functional form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5174e70ce9b49c31653bad77eb40eeecd439ab1" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;&quot;all&quot;&lt;/code&gt;, Octave will not recompile any function files unless their definitions are removed with &lt;code&gt;clear&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4704328de76145b927f724394f4892550ca48d8" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;&quot;none&quot;&lt;/code&gt;, Octave will always check time stamps on files to determine whether functions defined in function files need to recompiled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc78cd5f9ee2d38d84b21600df757e128815602c" translate="yes" xml:space="preserve">
          <source>If set to numerical 1 or true, return normally as soon as an error is encountered, such as trying to read a string using &lt;code&gt;%f&lt;/code&gt;. If set to 0 or false, return an error and no data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53047e10c11159633285323a0dafdf8462e86a64" translate="yes" xml:space="preserve">
          <source>If several complex results are possible, returns the one with smallest non-negative argument (angle). Use &lt;code&gt;realpow&lt;/code&gt;, &lt;code&gt;realsqrt&lt;/code&gt;, &lt;code&gt;cbrt&lt;/code&gt;, or &lt;code&gt;nthroot&lt;/code&gt; if a real result is preferred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f310a52db2b9da6c0a0c50431e0d1fad0fcb742" translate="yes" xml:space="preserve">
          <source>If several functions have been loaded from the same file, Octave must clear all the functions before any one of them can be reloaded. If the &lt;code&gt;Octave:reload-forces-clear&lt;/code&gt; warning is enabled, Octave will warn you when this happens, and print a list of the additional functions that it is forced to clear. By default, the &lt;code&gt;Octave:reload-forces-clear&lt;/code&gt; warning is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04114be9505786c3eadeacdd513e867a9812bdd4" translate="yes" xml:space="preserve">
          <source>If successful, &lt;code&gt;exec&lt;/code&gt; does not return. If &lt;code&gt;exec&lt;/code&gt; does return, &lt;var&gt;err&lt;/var&gt; will be nonzero, and &lt;var&gt;msg&lt;/var&gt; will contain a system-dependent error message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfb1037c94dc666135e6cf22fe07baf90bc3b71f" translate="yes" xml:space="preserve">
          <source>If successful, &lt;code&gt;fclose&lt;/code&gt; returns 0, otherwise, it returns -1. The second form of the &lt;code&gt;fclose&lt;/code&gt; call closes all open files except &lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt;, &lt;code&gt;stderr&lt;/code&gt;, and any FIDs associated with gnuplot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ff24c888bad2a672ce882859d8b9159253eafec" translate="yes" xml:space="preserve">
          <source>If successful, &lt;code&gt;savepath&lt;/code&gt; returns 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fc8205f85ff2d15b2f23f62c95bcf93af00f010" translate="yes" xml:space="preserve">
          <source>If successful, &lt;var&gt;err&lt;/var&gt; is 0 and &lt;var&gt;msg&lt;/var&gt; is an empty string. Otherwise, &lt;var&gt;err&lt;/var&gt; is nonzero and &lt;var&gt;msg&lt;/var&gt; contains a system-dependent error message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fc432cfbb4f452e0a5529bcc20ae543b1362891" translate="yes" xml:space="preserve">
          <source>If successful, &lt;var&gt;fid&lt;/var&gt; is a valid file ID and &lt;var&gt;msg&lt;/var&gt; is an empty string. Otherwise, &lt;var&gt;fid&lt;/var&gt; is -1 and &lt;var&gt;msg&lt;/var&gt; contains a system-dependent error message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29c6d468cdcfc00ab65e90f72e404c7ed9687ba5" translate="yes" xml:space="preserve">
          <source>If successful, &lt;var&gt;fid&lt;/var&gt; is a valid file ID, &lt;var&gt;name&lt;/var&gt; is the name of the file, and &lt;var&gt;msg&lt;/var&gt; is an empty string. Otherwise, &lt;var&gt;fid&lt;/var&gt; is -1, &lt;var&gt;name&lt;/var&gt; is empty, and &lt;var&gt;msg&lt;/var&gt; contains a system-dependent error message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7ecc55f0138a8045003216e5c1f94535c7731e2" translate="yes" xml:space="preserve">
          <source>If successful, &lt;var&gt;fid&lt;/var&gt; is greater than zero and contains the new file ID. Otherwise, &lt;var&gt;fid&lt;/var&gt; is negative and &lt;var&gt;msg&lt;/var&gt; contains a system-dependent error message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="042afdf56d097d40f4402750c214c05eaa365039" translate="yes" xml:space="preserve">
          <source>If successful, &lt;var&gt;result&lt;/var&gt; contains the contents of the symbolic link &lt;var&gt;symlink&lt;/var&gt;, &lt;var&gt;err&lt;/var&gt; is 0, and &lt;var&gt;msg&lt;/var&gt; is an empty string. Otherwise, &lt;var&gt;err&lt;/var&gt; is nonzero and &lt;var&gt;msg&lt;/var&gt; contains a system-dependent error message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4af09c7aa10cb75f287b1f1c1ae8d232bcc10a0" translate="yes" xml:space="preserve">
          <source>If successful, &lt;var&gt;status&lt;/var&gt; is 1 and &lt;var&gt;msg&lt;/var&gt; is a structure with the following fields:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="095f7bee3a557d5878e204a450b0beefdeb346b4" translate="yes" xml:space="preserve">
          <source>If successful, &lt;var&gt;status&lt;/var&gt; is 1, and &lt;var&gt;msg&lt;/var&gt; and &lt;var&gt;msgid&lt;/var&gt; are empty strings (&quot;&quot;). Otherwise, &lt;var&gt;status&lt;/var&gt; is 0, &lt;var&gt;msg&lt;/var&gt; contains a system-dependent error message, and &lt;var&gt;msgid&lt;/var&gt; contains a unique message identifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94a66e825ef7d2889c9a987c82ae82f06ca6bcb8" translate="yes" xml:space="preserve">
          <source>If successful, &lt;var&gt;status&lt;/var&gt; is 1, and &lt;var&gt;msg&lt;/var&gt;, &lt;var&gt;msgid&lt;/var&gt; are empty character strings (&quot;&quot;). Otherwise, &lt;var&gt;status&lt;/var&gt; is 0, &lt;var&gt;msg&lt;/var&gt; contains a system-dependent error message, and &lt;var&gt;msgid&lt;/var&gt; contains a unique message identifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2691d7bde699f50ba79ed5f208f2ef2e23ca3eab" translate="yes" xml:space="preserve">
          <source>If successful, &lt;var&gt;status&lt;/var&gt; is 1, and &lt;var&gt;msg&lt;/var&gt;, &lt;var&gt;msgid&lt;/var&gt; are empty character strings (&quot;&quot;). Otherwise, &lt;var&gt;status&lt;/var&gt; is 0, &lt;var&gt;msg&lt;/var&gt; contains a system-dependent error message, and &lt;var&gt;msgid&lt;/var&gt; contains a unique message identifier. Note that the status code is exactly opposite that of the &lt;code&gt;system&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="246d6528719c765381863429374e6d4eab048c2b" translate="yes" xml:space="preserve">
          <source>If successful, returns the previous value of the mask (as an integer to be interpreted as an octal number); otherwise an error message is printed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45cd7c3fe3daa290e5514b97034d1c71f60353f8" translate="yes" xml:space="preserve">
          <source>If supplied two scalar arguments (&lt;var&gt;m&lt;/var&gt;, &lt;var&gt;n&lt;/var&gt;), &lt;code&gt;eye&lt;/code&gt; takes them to be the number of rows and columns. If given a vector with two elements, &lt;code&gt;eye&lt;/code&gt; uses the values of the elements as the number of rows and columns, respectively. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="927ee9c3ada4ee59050f1913fe6cc947d1875614" translate="yes" xml:space="preserve">
          <source>If table is increasing, of length N and &lt;code&gt;idx = lookup (table, y)&lt;/code&gt;, then &lt;code&gt;table(idx(i)) &amp;lt;= y(i) &amp;lt; table(idx(i+1))&lt;/code&gt; for all &lt;code&gt;y(i)&lt;/code&gt; within the table. If &lt;code&gt;y(i) &amp;lt; table(1)&lt;/code&gt; then &lt;code&gt;idx(i)&lt;/code&gt; is 0. If &lt;code&gt;y(i) &amp;gt;= table(end)&lt;/code&gt; or &lt;code&gt;isnan (y(i))&lt;/code&gt; then &lt;code&gt;idx(i)&lt;/code&gt; is N.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d9b7696c9777c3fdef5f5f1690ef14ee23382d9" translate="yes" xml:space="preserve">
          <source>If the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d60045ad37ad9302e5aa834b56eb793e82cd288" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&quot;animate&quot;&lt;/code&gt; option is given then the plotting is animated in the style of &lt;code&gt;comet3&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f216672db90cc2a1d567e87c2c9bf4dd122ba29" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&quot;auto&quot;&lt;/code&gt; option is given then automatic colormap limits are applied. The automatic algorithm sets &lt;var&gt;cmin&lt;/var&gt; to the minimum data value and &lt;var&gt;cmax&lt;/var&gt; to the maximum data value. If &lt;code&gt;&quot;manual&quot;&lt;/code&gt; is specified then the &lt;code&gt;&quot;climmode&quot;&lt;/code&gt; property is set to &lt;code&gt;&quot;manual&quot;&lt;/code&gt; and the numeric values in the &lt;code&gt;&quot;clim&quot;&lt;/code&gt; property are used for limits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06281793b5c93b8e270d0b152e7c8d8bc7109364" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Octave:addpath-pkg&lt;/code&gt; warning is enabled, Octave will warn when a package directory (i.e., +package_name) is added to the &lt;code&gt;path&lt;/code&gt;. Typically, only the parent directory which contains the package directory should be added to the load path. By default, the &lt;code&gt;Octave:addpath-pkg&lt;/code&gt; warning is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b00f7cf3990ecde79072dad2c02577a390985c82" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Octave:array-as-logical&lt;/code&gt; warning is enabled, Octave will warn when an array of size greater than 1x1 is used as a truth value in an if, while or until statement. By default, the &lt;code&gt;Octave:array-as-logical&lt;/code&gt; warning is disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff7a8a8c1ba3c9584c71f457b154dad7e74fe92a" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Octave:array-to-scalar&lt;/code&gt; warning is enabled, Octave will warn when an implicit conversion from an array to a scalar value is attempted. By default, the &lt;code&gt;Octave:array-to-scalar&lt;/code&gt; warning is disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52725b54c03ac36c9502a1f117a7c0c0745107f5" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Octave:array-to-vector&lt;/code&gt; warning is enabled, Octave will warn when an implicit conversion from an array to a vector value is attempted. By default, the &lt;code&gt;Octave:array-to-vector&lt;/code&gt; warning is disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7215f145d6cf8fc7d517ffdfbbe0a95c5faed66" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Octave:assign-as-truth-value&lt;/code&gt; warning is enabled, a warning is issued for statements like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27e440c7b37d4a2c59346ff2c6b19c018d2a5baa" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Octave:associativity-change&lt;/code&gt; warning is enabled, Octave will warn about possible changes in the meaning of some code due to changes in associativity for some operators. Associativity changes have typically been made for &lt;small&gt;MATLAB&lt;/small&gt; compatibility. By default, the &lt;code&gt;Octave:associativity-change&lt;/code&gt; warning is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eb41dbe01175d156344893463a56b1c39eb5ea3" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Octave:autoload-relative-file-name&lt;/code&gt; is enabled, Octave will warn when parsing autoload() function calls with relative paths to function files. This usually happens when using autoload() calls in PKG_ADD files, when the PKG_ADD file is not in the same directory as the .oct file referred to by the autoload() command. By default, the &lt;code&gt;Octave:autoload-relative-file-name&lt;/code&gt; warning is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cac397bc65c7bb40c3cf7aaa374f211b5892eeb" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Octave:data-file-in-path&lt;/code&gt; warning is enabled, a warning is issued when Octave does not find the target of a file operation such as &lt;code&gt;load&lt;/code&gt; or &lt;code&gt;fopen&lt;/code&gt; directly, but is able to locate the file in Octave&amp;rsquo;s search &lt;code&gt;path&lt;/code&gt; for files. The warning could indicate that a different file target than the programmer intended is being used. By default, the &lt;code&gt;Octave:data-file-in-path&lt;/code&gt; warning is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc30fdd232aa5522ca3508605d30fe1e355e7ea7" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Octave:deprecated-function&lt;/code&gt; warning is enabled, a warning is issued when Octave encounters a function that is obsolete and scheduled for removal from Octave. By default, the &lt;code&gt;Octave:deprecated-function&lt;/code&gt; warning is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29ba68f79fc2deeeeddf80ba3393f0181b197356" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Octave:deprecated-keyword&lt;/code&gt; warning is enabled, a warning is issued when Octave encounters a keyword that is obsolete and scheduled for removal from Octave. By default, the &lt;code&gt;Octave:deprecated-keyword&lt;/code&gt; warning is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28a8cc13a70f9856cc09eda7b18cb116625bb3a8" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Octave:deprecated-property&lt;/code&gt; warning is enabled, a warning is issued when Octave encounters a graphics property that is obsolete and scheduled for removal from Octave. By default, the &lt;code&gt;Octave:deprecated-property&lt;/code&gt; warning is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b49476b674554de0cd95fc6d825a561f7892b8ec" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Octave:divide-by-zero&lt;/code&gt; warning is enabled, a warning is issued when Octave encounters a division by zero. By default, the &lt;code&gt;Octave:divide-by-zero&lt;/code&gt; warning is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6777a35adea8f55e62cafaf4f7d73b423832cda1" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Octave:eigs:UnconvergedEigenvalues&lt;/code&gt; warning is enabled then the eigs function will issue a warning if the number of calculated eigenvalues is less than the number of requested eigenvalues. By default, the &lt;code&gt;Octave:eigs:UnconvergedEigenvalues&lt;/code&gt; warning is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a285456d551880065bffa72b19552be6c271f2f9" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Octave:erase:chararray&lt;/code&gt; warning is enabled then the erase function will issue a warning if the input pattern is a character array rather than a string or cell array of strings. By default, the &lt;code&gt;Octave:erase:chararray&lt;/code&gt; warning is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1efd95fcd859ee292c093ec8e460a14ab58edbeb" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Octave:function-name-clash&lt;/code&gt; warning is enabled, a warning is issued when Octave finds that the name of a function defined in a function file differs from the name of the file. (If the names disagree, the name declared inside the file is ignored.) By default, the &lt;code&gt;Octave:function-name-clash&lt;/code&gt; warning is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c45e316ed1a033fe44788b23b9cdb7bb2dc4298f" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Octave:future-time-stamp&lt;/code&gt; warning is enabled, Octave will print a warning if it finds a function file with a time stamp that is in the future. By default, the &lt;code&gt;Octave:future-time-stamp&lt;/code&gt; warning is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a174e8bf488986e5ba28cf68acd5c9b97de14ea" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Octave:imag-to-real&lt;/code&gt; warning is enabled, a warning is printed for implicit conversions of complex numbers to real numbers. By default, the &lt;code&gt;Octave:imag-to-real&lt;/code&gt; warning is disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90dfbe476ab88cc426322db70ec8abc90d77cfc0" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Octave:legacy-function&lt;/code&gt; warning is enabled, a warning is issued when Octave encounters a function that &lt;small&gt;MATLAB&lt;/small&gt; has suggested should be avoided. The function may become obsolete at some point in the future and removed, in which case the warning will change to &lt;code&gt;Octave:deprecated-function&lt;/code&gt;, and the function will continue to exist for two further versions of Octave before being removed. By default, the &lt;code&gt;Octave:legacy-function&lt;/code&gt; warning is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43853437216a2751c747e81304b1a1d61b70b875" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Octave:lu:sparse_input&lt;/code&gt; warning is enabled, Octave will warn when the lu function is called with a sparse input and less than four output arguments. In this case, sparsity-preserving column permutations are not performed and the result may be inaccurate. By default, the &lt;code&gt;Octave:lu:sparse_input&lt;/code&gt; warning is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e32e679100c3228e79e64befc137a35ea5cf49a" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Octave:missing-semicolon&lt;/code&gt; warning is enabled, Octave will warn when statements in function definitions don&amp;rsquo;t end in semicolons. By default the &lt;code&gt;Octave:missing-semicolon&lt;/code&gt; warning is disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce4e4fb77377fa5c4a7cc99bedb1d958905142c6" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Octave:mixed-string-concat&lt;/code&gt; warning is enabled, print a warning when concatenating a mixture of double and single quoted strings. By default, the &lt;code&gt;Octave:mixed-string-concat&lt;/code&gt; warning is disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ed60a6596eac105f4f2a41ee0e4031fd43fd844" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Octave:neg-dim-as-zero&lt;/code&gt; warning is enabled, print a warning for expressions like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aaacb7220d5b680ac0629cfc627d66faa136219" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Octave:num-to-str&lt;/code&gt; warning is enable, a warning is printed for implicit conversions of numbers to their UTF-8 encoded character equivalents when strings are constructed using a mixture of strings and numbers in matrix notation. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f2c83779819dafa3fd0a0d4d44ada172976bedd" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Octave:possible-matlab-short-circuit-operator&lt;/code&gt; warning is enabled, Octave will warn about using the not short circuiting operators &lt;code&gt;&amp;amp;&lt;/code&gt; and &lt;code&gt;|&lt;/code&gt; inside &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;while&lt;/code&gt; conditions. They normally never short circuit, but they do short circuit when used in a condition. By default, the &lt;code&gt;Octave:possible-matlab-short-circuit-operator&lt;/code&gt; warning is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="061c9311d7702cf3ebcef5fe5b209921a2eb847c" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Octave:precedence-change&lt;/code&gt; warning is enabled, Octave will warn about possible changes in the meaning of some code due to changes in precedence for some operators. Precedence changes have typically been made for &lt;small&gt;MATLAB&lt;/small&gt; compatibility. By default, the &lt;code&gt;Octave:precedence-change&lt;/code&gt; warning is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac400c1590ef937710df9efe88fbbe1166311c2e" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Octave:resize-on-range-error&lt;/code&gt; warning is enabled, print a warning when a matrix is resized by an indexed assignment with indices outside the current bounds. By default, the &lt;code&gt;Octave:resize-on-range-error&lt;/code&gt; warning is disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3e0daf487737e87bb91d8e2bd175b537348f503" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Octave:str-to-num&lt;/code&gt; warning is enabled, a warning is printed for implicit conversions of strings to their numeric UTF-8 encoded byte sequences. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8267e3a33f2a80b3412c9090e49d209d6a3a165d" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Octave:variable-switch-label&lt;/code&gt; warning is enabled, Octave will print a warning if a switch label is not a constant or constant expression. By default, the &lt;code&gt;Octave:variable-switch-label&lt;/code&gt; warning is disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="889e6c824cc94f5385fefdb8138548b0a4e2154e" translate="yes" xml:space="preserve">
          <source>If the &lt;var&gt;fmt&lt;/var&gt; argument is supplied then it is interpreted, as in normal plots, to specify the line style, marker, and color. In addition, &lt;var&gt;fmt&lt;/var&gt; may include an errorbar style which &lt;strong&gt;must precede&lt;/strong&gt; the ordinary format codes. The following errorbar styles are supported:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ce4b7cae226d3a0b6a82536b5542e76122c89ce" translate="yes" xml:space="preserve">
          <source>If the &lt;var&gt;map&lt;/var&gt; argument is omitted, the function is applied to the current colormap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec0d3ecf4d4b4c66e03dd54ff354fa638e168346" translate="yes" xml:space="preserve">
          <source>If the &lt;var&gt;reduction_factor&lt;/var&gt; is omitted, the resulting structure &lt;var&gt;reduced_fv&lt;/var&gt; includes approximately 50% of the faces of the original patch. If &lt;var&gt;reduction_factor&lt;/var&gt; is a fraction between 0 (excluded) and 1 (excluded), a patch with approximately the corresponding fraction of faces is determined. If &lt;var&gt;reduction_factor&lt;/var&gt; is an integer greater than or equal to 1, the resulting patch has approximately &lt;var&gt;reduction_factor&lt;/var&gt; faces. Depending on the geometry of the patch, the resulting number of faces can differ from the given value of &lt;var&gt;reduction_factor&lt;/var&gt;. This is especially true when many shared vertices are detected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dec9d39f49ae26e951af0a80fc62d02092f97289" translate="yes" xml:space="preserve">
          <source>If the &lt;var&gt;x&lt;/var&gt; argument is omitted it defaults to &lt;code&gt;1:rows (&lt;var&gt;y&lt;/var&gt;)&lt;/code&gt;. A value &lt;var&gt;lvl&lt;/var&gt; can be defined that determines where the base level of the shading under the curve should be defined. The default level is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74ae7db98574bb73cbaa904aee7d5ba71f134fb7" translate="yes" xml:space="preserve">
          <source>If the &lt;var&gt;x&lt;/var&gt; is a matrix and &lt;var&gt;y&lt;/var&gt; is a vector, &lt;var&gt;y&lt;/var&gt; is plotted versus the columns (or rows) of &lt;var&gt;x&lt;/var&gt;. (using whichever combination matches, with columns tried first.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f93817d03f159d3344bdab62ad2e66df8f4043d" translate="yes" xml:space="preserve">
          <source>If the Cholesky factorization failed or the matrix is not Hermitian with a real positive diagonal, and the matrix is square, factorize using the &lt;small&gt;LAPACK&lt;/small&gt; xGETRF function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06bf679daa42cc499974ab6981787acc97dcb4e8" translate="yes" xml:space="preserve">
          <source>If the GUI is running, the menu is displayed graphically using &lt;code&gt;listdlg&lt;/code&gt;. Otherwise, the title and menu options are printed on the console.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e24f4e0063a63302c7b74e6819f091831e04289" translate="yes" xml:space="preserve">
          <source>If the Jacobian matrix is sparse and non-constant but maintains a constant sparsity pattern, specify the sparsity pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a71bed1bdfcd10841645526b18d2ca2e02d1d5cb" translate="yes" xml:space="preserve">
          <source>If the above failed or the matrix is not Hermitian with a positive real diagonal use Gaussian elimination with pivoting using &lt;small&gt;LAPACK&lt;/small&gt; xGTSV, and goto 8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ba90920a471d4ed27cb84944132abec83c46d1b" translate="yes" xml:space="preserve">
          <source>If the adaptive integration did not converge, the value of &lt;var&gt;err&lt;/var&gt; will be larger than the requested tolerance. Therefore, it is recommended to verify this value for difficult integrands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="544be2ec91bfe0e49a1b42d3ecc25254ed08a227" translate="yes" xml:space="preserve">
          <source>If the additional argument &lt;code&gt;&quot;force&quot;&lt;/code&gt; is given then figures are closed even when &lt;code&gt;&quot;closerequestfcn&quot;&lt;/code&gt; has been altered to prevent closing the window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a38e8f6a0dbc9beb271cec81cba4230bc766bb1f" translate="yes" xml:space="preserve">
          <source>If the additional argument &lt;code&gt;&quot;hidden&quot;&lt;/code&gt; is given then all figures, including hidden ones, are closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0de27c4d46fe26a80b3fd2d5bb5e3cf6c26ec252" translate="yes" xml:space="preserve">
          <source>If the argument &lt;code&gt;&quot;-append&quot;&lt;/code&gt; is given, append to the end of &lt;var&gt;file&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deb01c95a1e2d7fcd58deaf27938c453e089759f" translate="yes" xml:space="preserve">
          <source>If the argument &lt;code&gt;&quot;all&quot;&lt;/code&gt; is given then all figures with visible handles (HandleVisibility = &lt;code&gt;&quot;on&quot;&lt;/code&gt;) are closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea2c4dc963d3fc8cf93727fda0247c54ed3519f2" translate="yes" xml:space="preserve">
          <source>If the argument &lt;code&gt;&quot;arch&quot;&lt;/code&gt; is specified, return a string indicating the architecture of the computer on which Octave is running.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd8082421da2a7450c985a3252ad42410c5dfc94" translate="yes" xml:space="preserve">
          <source>If the argument &lt;code&gt;&quot;circ&quot;&lt;/code&gt; is given, then the function is plotted over a disk centered on the middle of the domain &lt;var&gt;dom&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dd6ed968c22e03ba3a6cdde77523a38320d2bbd" translate="yes" xml:space="preserve">
          <source>If the argument &lt;code&gt;&quot;class&quot;&lt;/code&gt; is given then the class of &lt;var&gt;x&lt;/var&gt; is included in the string in such a way that &lt;code&gt;eval&lt;/code&gt; will result in the construction of a matrix of the same class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8664e1c00eac7a03fe3823dccb3b8c9deff6461" translate="yes" xml:space="preserve">
          <source>If the argument &lt;var&gt;h&lt;/var&gt; is a handle to a contour group object, then label this plot rather than the one in the current axes returned by &lt;code&gt;gca&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58931fe03ecdf5561916599de12b4ba97219e6ea" translate="yes" xml:space="preserve">
          <source>If the argument &lt;var&gt;hfig&lt;/var&gt; is omitted, then operate on the current figure returned by &lt;code&gt;gcf&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="782f166636c3a325498f4ea24817b1be4fc37329" translate="yes" xml:space="preserve">
          <source>If the argument &lt;var&gt;markersize&lt;/var&gt; is given as a scalar value, it is used to determine the point size in the plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2391c47dd829a5aaae899026d59e272930961747" translate="yes" xml:space="preserve">
          <source>If the argument &lt;var&gt;n&lt;/var&gt; is a single precision number or vector, the returned string has a length of 8. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bddd3f448e4bb1f4383d83fecc424473b40a75cf" translate="yes" xml:space="preserve">
          <source>If the argument &lt;var&gt;shape&lt;/var&gt; is specified, return an array of the desired shape. Possible values are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31f2eb492d18e20a4967ab0cc24ee6e82101d1aa" translate="yes" xml:space="preserve">
          <source>If the argument is a list &lt;var&gt;handle_list&lt;/var&gt;, then a single bounding box for all the objects is computed and the camera is then adjusted as above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0596ac9d7f31e1b54bd3838a28bfdc5ac0d49d27" translate="yes" xml:space="preserve">
          <source>If the argument is an axis object &lt;var&gt;hax&lt;/var&gt;, then the children of the axis are used as &lt;var&gt;handle_list&lt;/var&gt;. When called with no inputs, it uses the current axis (see &lt;a href=&quot;graphics-objects#XREFgca&quot;&gt;gca&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cb32fde68b1fc7b9b25331f5d3a878e19cafd7f" translate="yes" xml:space="preserve">
          <source>If the argument is an object, return the underlying struct.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86d0c26fc22756fb5c8fb8d7aad105db1cda3af7" translate="yes" xml:space="preserve">
          <source>If the argument is not a simple variable name, return an empty string. As an example, a reference to a field in a structure such as &lt;code&gt;s.field&lt;/code&gt; is not a simple name and will return &lt;code&gt;&quot;&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e1d23dfe50d422b68ca6f4095d62dbd50b6affe" translate="yes" xml:space="preserve">
          <source>If the arguments are cell strings, &lt;code&gt;strcat&lt;/code&gt; returns a cell string with the individual cells concatenated. For numerical input, each element is converted to the corresponding ASCII character. Trailing white space for any character string input is eliminated before the strings are concatenated. Note that cell string values do &lt;strong&gt;not&lt;/strong&gt; have whitespace trimmed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f155911fccbc86637a8689798bd5198f6bb5e5a7" translate="yes" xml:space="preserve">
          <source>If the bit length of &lt;var&gt;x&lt;/var&gt; is not divisible by that of &lt;var&gt;class&lt;/var&gt;, an error occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6df83560e72f84ffdbc71393894295149c887899" translate="yes" xml:space="preserve">
          <source>If the call is from the command line, an anonymous function, or a script, the return value is an empty cell array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2861487d6f78325096c72aa638cc8598788b767" translate="yes" xml:space="preserve">
          <source>If the call is successful &lt;var&gt;err&lt;/var&gt; is 0 and &lt;var&gt;msg&lt;/var&gt; is an empty string. If the file does not exist, or some other error occurs, &lt;var&gt;info&lt;/var&gt; is an empty matrix, &lt;var&gt;err&lt;/var&gt; is -1, and &lt;var&gt;msg&lt;/var&gt; contains the corresponding system error message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6b1bcfe863d9829023cb010d8b564b2ba42fb5d" translate="yes" xml:space="preserve">
          <source>If the code calls &lt;code&gt;XSTOPX&lt;/code&gt;, then the &lt;code&gt;F77_XFCN&lt;/code&gt; macro should be used to call the underlying Fortran function. The Fortran exception state can then be checked with the global variable &lt;code&gt;f77_exception_encountered&lt;/code&gt;. If &lt;code&gt;XSTOPX&lt;/code&gt; will not be called, then the &lt;code&gt;F77_FCN&lt;/code&gt; macro should be used instead to call the Fortran code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed10b4ad14028b076a2379c81c272364e51c9d0c" translate="yes" xml:space="preserve">
          <source>If the code doesn&amp;rsquo;t generate an error, the test fails. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1ee0faa7a6d0fb37ced1f6288a723bbcff1a804" translate="yes" xml:space="preserve">
          <source>If the coefficient matrix is singular, Octave will print a warning message and compute a minimum norm solution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb0a76fad82a1c1b781f7e0760fc4d0e0c014fc5" translate="yes" xml:space="preserve">
          <source>If the computation is not successful, &lt;var&gt;istate&lt;/var&gt; will be something other than 2 and &lt;var&gt;msg&lt;/var&gt; will contain additional information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9218299e31b15f355ed2142538e5e345e0d4e935" translate="yes" xml:space="preserve">
          <source>If the computation is not successful, the value of &lt;var&gt;istate&lt;/var&gt; will be less than zero and &lt;var&gt;msg&lt;/var&gt; will contain additional information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a4e5e9b101139432f3ff1f68be15bd556a47294" translate="yes" xml:space="preserve">
          <source>If the device is omitted, it is inferred from the file extension, or if there is no filename then it is sent to the printer as PostScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="217e30d9e2bf47dc6b6ac7acffc810c6063f88a4" translate="yes" xml:space="preserve">
          <source>If the directory does not exist, an error message is printed and the working directory is not changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8ec3e0d9e480907b3de4f2a257be58c72ef4bc9" translate="yes" xml:space="preserve">
          <source>If the effective UID is 0, a &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3e1cd1dc4023f02661ac44975006d5b16a649fe" translate="yes" xml:space="preserve">
          <source>If the error message does not end with a newline character, Octave will print a traceback of all the function calls leading to the error. For example, given the following function definitions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b913771e19e7a6564bfca64f0673e1f76bf83d7b" translate="yes" xml:space="preserve">
          <source>If the error message ends in a newline character, Octave will print the message but will not display any traceback messages as it returns control to the top level. For example, modifying the error message in the previous example to end in a newline causes Octave to only print a single message:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2917b1fe58bd763c6cf5dc8c90469482da81af5" translate="yes" xml:space="preserve">
          <source>If the file does not exist the empty string (&quot;&quot;) is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d65720df53cba1e83c03c89018ab7a2df911ec8" translate="yes" xml:space="preserve">
          <source>If the final argument is the scalar 0 an &lt;code&gt;&quot;economy&quot;&lt;/code&gt; factorization is returned. When the original matrix &lt;var&gt;A&lt;/var&gt; has size MxN and M &amp;gt; N then the &lt;code&gt;&quot;economy&quot;&lt;/code&gt; factorization will calculate just N rows in &lt;var&gt;R&lt;/var&gt; and N columns in &lt;var&gt;Q&lt;/var&gt; and omit the zeros in &lt;var&gt;R&lt;/var&gt;. If M &amp;le; N there is no difference between the economy and standard factorizations. When calculating an &lt;code&gt;&quot;economy&quot;&lt;/code&gt; factorization the output &lt;var&gt;P&lt;/var&gt; is always a vector rather than a matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3efa679b08fd2597beb7462d791f35a2af0111ef" translate="yes" xml:space="preserve">
          <source>If the final argument is the string &lt;code&gt;&quot;vector&quot;&lt;/code&gt; then &lt;var&gt;P&lt;/var&gt; is a permutation vector (of the columns of &lt;var&gt;A&lt;/var&gt;) instead of a permutation matrix. In this case, the defining relationship is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7df8746e2accaafb1f4aabde361bf63904948029" translate="yes" xml:space="preserve">
          <source>If the final output argument is &lt;var&gt;varargout&lt;/var&gt; the returned value is negative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f49ee7283e67487f7edc12b522b0bc1dfc58801" translate="yes" xml:space="preserve">
          <source>If the first argument &lt;var&gt;f&lt;/var&gt; is a function handle, the gradient of the function at the points in &lt;var&gt;x0&lt;/var&gt; is approximated using central difference. For example, &lt;code&gt;gradient (@cos, 0)&lt;/code&gt; approximates the gradient of the cosine function in the point &lt;em&gt;x0 = 0&lt;/em&gt;. As with sampled data, the spacing values between the points from which the gradient is estimated can be set via the &lt;var&gt;s&lt;/var&gt; or &lt;var&gt;dx&lt;/var&gt;, &lt;var&gt;dy&lt;/var&gt;, &amp;hellip; arguments. By default a spacing of 1 is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec48606df48d54efda9ac95c380e5dc9ba262f01" translate="yes" xml:space="preserve">
          <source>If the first argument &lt;var&gt;h&lt;/var&gt; is a list of graphic handles, then operate on these objects rather than the current figure returned by &lt;code&gt;gcf&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8d5ed4fff5eed5c60cfbe84368baeeb8501f21e" translate="yes" xml:space="preserve">
          <source>If the first argument &lt;var&gt;hax&lt;/var&gt; is an axes handle, then add a legend to this axes, rather than the current axes returned by &lt;code&gt;gca&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b861c8042de0f678447d317029832fd0a9fadaa9" translate="yes" xml:space="preserve">
          <source>If the first argument &lt;var&gt;hax&lt;/var&gt; is an axes handle, then add the light object to this axes, rather than the current axes returned by &lt;code&gt;gca&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e4d3d6285705bb7b4f68f009dc56f357ed9afbe" translate="yes" xml:space="preserve">
          <source>If the first argument &lt;var&gt;hax&lt;/var&gt; is an axes handle, then capture this axes, rather than the current axes returned by &lt;code&gt;gca&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9a4a09502770a9161da98fcb812567ab6af93f4" translate="yes" xml:space="preserve">
          <source>If the first argument &lt;var&gt;hax&lt;/var&gt; is an axes handle, then change the lighting effects of objects in this axes, rather than the current axes returned by &lt;code&gt;gca&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49e417347a7e3bcac79b5a180cf04362f3aee863" translate="yes" xml:space="preserve">
          <source>If the first argument &lt;var&gt;hax&lt;/var&gt; is an axes handle, then create a new light object in this axes, rather than the current axes returned by &lt;code&gt;gca&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35d0a3e0f5014773c540d8c2fc7fb259e4f8d292" translate="yes" xml:space="preserve">
          <source>If the first argument &lt;var&gt;hax&lt;/var&gt; is an axes handle, then it defines the principal axes in which to plot the &lt;var&gt;x1&lt;/var&gt; and &lt;var&gt;y1&lt;/var&gt; data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a491209ec61ba359fc93022a7a32a1b453401c1e" translate="yes" xml:space="preserve">
          <source>If the first argument &lt;var&gt;hax&lt;/var&gt; is an axes handle, then operate on this axes rather than the current axes returned by &lt;code&gt;gca&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62ecc406d6b9e3bad84b856f0fd3b11fe2bce986" translate="yes" xml:space="preserve">
          <source>If the first argument &lt;var&gt;hax&lt;/var&gt; is an axes handle, then operate on this axis rather than the current axes returned by &lt;code&gt;gca&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e89872d74d13ac958231e85e8c48401690a9537" translate="yes" xml:space="preserve">
          <source>If the first argument &lt;var&gt;hax&lt;/var&gt; is an axes handle, then plot into this axes, rather than the current axes returned by &lt;code&gt;gca&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc0c9e39f59d01398a57b464ddb31c31375a6f96" translate="yes" xml:space="preserve">
          <source>If the first argument &lt;var&gt;hax&lt;/var&gt; is an axes handle, then the colorbar is added to this axes, rather than the current axes returned by &lt;code&gt;gca&lt;/code&gt;. Alternatively, If the argument &lt;code&gt;&quot;peer&quot;&lt;/code&gt; is given, then the following argument is treated as the axes handle in which to add the colorbar. The &lt;code&gt;&quot;peer&quot;&lt;/code&gt; calling syntax may be removed in the future and is not recommended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="864932a11a9c89955759588a91418c744f368ce9" translate="yes" xml:space="preserve">
          <source>If the first argument &lt;var&gt;hax&lt;/var&gt; is an axes handle, then the colormap for those axes is queried or set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b4da6eef190d0c65159d4566bf6202230916483" translate="yes" xml:space="preserve">
          <source>If the first argument &lt;var&gt;hcb&lt;/var&gt; is a handle to a colorbar object, then operate on this colorbar directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d05aa154a536eb1e4545a95a9c3d1dd115ac33b4" translate="yes" xml:space="preserve">
          <source>If the first argument &lt;var&gt;hf&lt;/var&gt; is a figure handle, then plot into this figure, rather than the current figure returned by &lt;code&gt;gcf&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d93ea96caf1d40f8ea8c45577f0d35d719420c94" translate="yes" xml:space="preserve">
          <source>If the first argument &lt;var&gt;hfig&lt;/var&gt; is a figure handle or list of figure handles, then operate on these figures rather than the current figure returned by &lt;code&gt;gcf&lt;/code&gt;. The root properties will not be changed unless 0 is in the list of figures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a4e2fb2e33112365345df0c0fc30e95a45a66f8" translate="yes" xml:space="preserve">
          <source>If the first argument &lt;var&gt;hfig&lt;/var&gt; is a figure handle then the entire corresponding figure canvas is captured.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e191e6f73b8b71b49c2a4af8d0d0a28b667c1033" translate="yes" xml:space="preserve">
          <source>If the first argument &lt;var&gt;hfig&lt;/var&gt; is a figure handle, then operate on this figure rather than the current figure returned by &lt;code&gt;gcf&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b437063e61048f9bd82e0bec61cd97e42c6a135" translate="yes" xml:space="preserve">
          <source>If the first argument &lt;var&gt;hfig&lt;/var&gt; is a figure, then operate on the given figure rather than the current figure as returned by &lt;code&gt;gcf&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="603b13bcd984e658df8e7e841ebe16c6e33cb475" translate="yes" xml:space="preserve">
          <source>If the first argument &lt;var&gt;hl&lt;/var&gt; is a handle to a light object, then act on this light object rather than creating a new object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0b27be594dd2146c5bde5e5adcca12433412ee2" translate="yes" xml:space="preserve">
          <source>If the first argument is &lt;code&gt;&quot;name&quot;&lt;/code&gt;, a cell array of strings with the names of the values at that key is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ff852a77fe4e4a92045808f8c8c3f627a7b5760" translate="yes" xml:space="preserve">
          <source>If the first argument is a cell array of strings, search each directory of the loadpath for element of the cell array and return the first that matches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="565be35655664a62eca1f42032ea54fad72f7218" translate="yes" xml:space="preserve">
          <source>If the first argument is a handle &lt;var&gt;hfig&lt;/var&gt; to a figure object then it specifies the figure to print. By default, the current figure returned by &lt;code&gt;gcf&lt;/code&gt; is printed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="711f5d4931bd1b4c133e0c6637abc78f3fb82ec3" translate="yes" xml:space="preserve">
          <source>If the first argument is a handle to a figure or axes &lt;var&gt;h&lt;/var&gt;, the movie is played in that figure or axes instead of the current axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6335fdfd00cc4eb23c7b74c958590e92b4115ca" translate="yes" xml:space="preserve">
          <source>If the first argument is a vector, &lt;var&gt;set&lt;/var&gt;, then generate all combinations of the elements of &lt;var&gt;set&lt;/var&gt;, taken &lt;var&gt;k&lt;/var&gt; at a time, with one row per combination. The result &lt;var&gt;c&lt;/var&gt; has &lt;var&gt;k&lt;/var&gt; columns and &lt;code&gt;nchoosek&amp;nbsp;(length&amp;nbsp;(&lt;var&gt;set&lt;/var&gt;),&amp;nbsp;&lt;var&gt;k&lt;/var&gt;)&lt;/code&gt; rows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d34a549e6ff9d5c40e45566e7f0d1f6e06e95587" translate="yes" xml:space="preserve">
          <source>If the first argument is an axes handle &lt;var&gt;hax&lt;/var&gt; or figure handle &lt;var&gt;hfig&lt;/var&gt; then operate on this plot rather than the current one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b611c2b0310f6f6cafcffbf883e45424abc3f5c" translate="yes" xml:space="preserve">
          <source>If the first token in a file (ignoring comments) is &lt;code&gt;function&lt;/code&gt;, Octave will compile the function and try to execute it, printing a message warning about any non-whitespace characters that appear after the function definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be4964d2ccc582d84857d73890dcfeb15b642b0f" translate="yes" xml:space="preserve">
          <source>If the folder name of path name contains a trailing file separator, the contents of that folder will be displayed. If no trailing file separator is present the parent directory is listed. The substring to the right of the rightmost file separator (if any) will be interpreted as a file or directory name and if that file or directory exists it will be highlighted. If the path name or directory name is wholly or partly nonexistent, the current working directory will be displayed. No filter will be active.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ec5e22b5cf241429abd1be7e25d9197b587d6ca" translate="yes" xml:space="preserve">
          <source>If the format string is empty (not just omitted) and the file contains only numeric data (excluding headerlines), textread will return a rectangular matrix with the number of columns matching the number of numeric fields on the first data line of the file. Empty fields are returned as zero values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aa8e9aa82100dae1a24014752ae29cb57639141" translate="yes" xml:space="preserve">
          <source>If the fourth argument &lt;var&gt;si&lt;/var&gt; is provided, it is taken as the initial state of the system and the final state is returned as &lt;var&gt;sf&lt;/var&gt;. The state vector is a column vector whose length is equal to the length of the longest coefficient vector minus one. If &lt;var&gt;si&lt;/var&gt; is not supplied, the initial state vector is set to all zeros.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2b2d82496586e9b96f214f4f729bf012822aa96" translate="yes" xml:space="preserve">
          <source>If the fourth argument, &lt;code&gt;&quot;whole&quot;&lt;/code&gt;, is omitted the response is evaluated at frequencies between 0 and pi.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e01f0e8f9073adc87fff080e48f941523805796" translate="yes" xml:space="preserve">
          <source>If the function &lt;var&gt;name&lt;/var&gt; is available in a file on your path and that file is modifiable, then it will be edited in place. If it is a system function, then it will first be copied to the directory &lt;code&gt;HOME&lt;/code&gt; (see below) and then edited. If no file is found, then the m-file variant, ending with &lt;code&gt;&quot;.m&quot;&lt;/code&gt;, will be considered. If still no file is found, then variants with a leading &lt;code&gt;&quot;@&quot;&lt;/code&gt; and then with both a leading &lt;code&gt;&quot;@&quot;&lt;/code&gt; and trailing &lt;code&gt;&quot;.m&quot;&lt;/code&gt; will be considered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="547074e69ad95eebfda8a4415ff4c5e58267aeff" translate="yes" xml:space="preserve">
          <source>If the group ID does not exist in the database, &lt;code&gt;getgrgid&lt;/code&gt; returns 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf3b476d13c9117e95d77534e624b9f339dc1a9b" translate="yes" xml:space="preserve">
          <source>If the group name does not exist in the database, &lt;code&gt;getgrnam&lt;/code&gt; returns 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee05601106e0f48a5cce0a0e59ed15b0ca5fe9c4" translate="yes" xml:space="preserve">
          <source>If the handle object &lt;var&gt;h&lt;/var&gt; itself is of type &lt;var&gt;type&lt;/var&gt;, return &lt;var&gt;h&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2020b79a2565f5c8b164e523c24ea262485c28dd" translate="yes" xml:space="preserve">
          <source>If the handle of an existing figure or axes is specified, &lt;var&gt;p&lt;/var&gt;, the new object will be created as a child of that object. If no parent handle is provided then a new figure and the necessary children will be constructed using the default values from the root figure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="139548d31e08620e61c362e6386fdd3e288aadfe" translate="yes" xml:space="preserve">
          <source>If the input &lt;var&gt;x&lt;/var&gt; is a column vector then return a column vector; Otherwise, return a row vector. &lt;var&gt;x&lt;/var&gt; may also be a cell array of strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19fc198751999f706716dbd36cb03418b0d21b06" translate="yes" xml:space="preserve">
          <source>If the input is a cell array of strings &lt;var&gt;cellstr&lt;/var&gt; then tilde expansion is performed on each string element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86bb502d578e2086783907bb98a2934faf1616fa" translate="yes" xml:space="preserve">
          <source>If the input is a row vector, the return value is a row vector, otherwise it is a column vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a35f69f0ee79d0b14ae8f6a9fd4e8dd81320d3d" translate="yes" xml:space="preserve">
          <source>If the input matrix &lt;var&gt;A&lt;/var&gt; is sparse then the sparse QR factorization is computed using &lt;small&gt;CSPARSE&lt;/small&gt;. Because the matrix &lt;var&gt;Q&lt;/var&gt; is, in general, a full matrix, it is recommended to request only one return value &lt;var&gt;R&lt;/var&gt;. In that case, the computation avoids the construction of &lt;var&gt;Q&lt;/var&gt; and returns &lt;var&gt;R&lt;/var&gt; such that &lt;code&gt;&lt;var&gt;R&lt;/var&gt; = chol (&lt;var&gt;A&lt;/var&gt;' * &lt;var&gt;A&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25f2a3c896c311e045dad04ea2661203b331209f" translate="yes" xml:space="preserve">
          <source>If the internal variable is set to &lt;code&gt;&quot;system&quot;&lt;/code&gt;, Octave will not automatically recompile function files in subdirectories of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9d1c2ff4c3abda4a7b6100d020cdc807d40eb4e" translate="yes" xml:space="preserve">
          <source>If the last argument to &lt;var&gt;fcn&lt;/var&gt; is &lt;var&gt;varargin&lt;/var&gt; the returned value is negative. For example, the function &lt;code&gt;union&lt;/code&gt; for sets is declared as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="076eaf96ba961ef5eee7d5a6fc7c3efc8bd822a4" translate="yes" xml:space="preserve">
          <source>If the last component part is a cell array, returns a cell array of filepaths, one for each element in the last component, e.g.:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="759df873ae93cc45285d775f62574048ac953751" translate="yes" xml:space="preserve">
          <source>If the last element of &lt;var&gt;c&lt;/var&gt; is not the same as the first element of &lt;var&gt;r&lt;/var&gt;, the last element of &lt;var&gt;c&lt;/var&gt; is used. If the second argument is omitted, it is assumed to be a vector of zeros with the same size as &lt;var&gt;c&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ecebfcdc1fcb4f93e61159217e98d31f301de57" translate="yes" xml:space="preserve">
          <source>If the last input argument is the string &lt;code&gt;&quot;negate&quot;&lt;/code&gt;, compute the reverse vector normals of an isosurface geometry (i.e., pointed towards larger values in &lt;var&gt;val&lt;/var&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1be7b2e6418de5217d0f40eacebfab5b2304979c" translate="yes" xml:space="preserve">
          <source>If the last mouse click did not occur on any child object of the figure, then the current object is the figure itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed7af9c63a166775af092b707eccb9170ae7f429" translate="yes" xml:space="preserve">
          <source>If the length of the smallest possible rational approximation exceeds &lt;var&gt;len&lt;/var&gt;, an asterisk (*) padded with spaces will be returned instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a49511dca3fca0f1de02d800a4ec076d24edd3ee" translate="yes" xml:space="preserve">
          <source>If the limit is exceeded, an error message is printed and control returns to the top level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2433cf3af4b7246d75fb062104af4aebae675a31" translate="yes" xml:space="preserve">
          <source>If the mass matrix is sparse and non-constant but maintains a constant sparsity pattern, specify the sparsity pattern. &lt;em&gt;Note&lt;/em&gt;: This option is not yet implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="430fd411fe71702fe0d8c1d2b664271b3e868cf9" translate="yes" xml:space="preserve">
          <source>If the matrix &lt;var&gt;A&lt;/var&gt; is full, and a third output &lt;var&gt;P&lt;/var&gt; is requested, then &lt;code&gt;qr&lt;/code&gt; calculates the permuted QR factorization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e7a6a8e4651d1284f321da1d1547f962856c7ea" translate="yes" xml:space="preserve">
          <source>If the matrix is Hermitian with a positive real diagonal, attempt Cholesky factorization using &lt;small&gt;LAPACK&lt;/small&gt; xPBTRF.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5de35c48f6624e2034954264fa7f65a744514933" translate="yes" xml:space="preserve">
          <source>If the matrix is Hermitian, with a positive real diagonal, attempt Cholesky factorization using &lt;small&gt;LAPACK&lt;/small&gt; xPTSV.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87ab2a7008b20487a8277780ad07bfd35fefbaa3" translate="yes" xml:space="preserve">
          <source>If the matrix is a permuted diagonal, solve directly taking into account the permutations. Goto 8</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac801bcdccd1d4a8606f726f05c8dc04bbc8c2dc" translate="yes" xml:space="preserve">
          <source>If the matrix is an upper triangular matrix with column permutations or lower triangular matrix with row permutations, perform a sparse forward or backward substitution, and goto 8</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58547d7e8ecf9fa5b585b9e6ebfd2029eab3124b" translate="yes" xml:space="preserve">
          <source>If the matrix is diagonal, solve directly and goto 8</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24630dca157a618dbaac6d5b66397e7dc8b11a13" translate="yes" xml:space="preserve">
          <source>If the matrix is not explicit, e.g., when estimating the condition number of &lt;var&gt;A&lt;/var&gt; given an LU factorization, &lt;code&gt;condest&lt;/code&gt; uses the following functions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa1e70a403303b2dc849d7a4a1fbd73a6211f04f" translate="yes" xml:space="preserve">
          <source>If the matrix is not square, or any of the previous solvers flags a singular or near singular matrix, find a least squares solution using the &lt;small&gt;LAPACK&lt;/small&gt; xGELSD function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="983acb18e0c1df779dfd06918d6bd25e8419e5ed" translate="yes" xml:space="preserve">
          <source>If the matrix is not square, or any of the previous solvers flags a singular or near singular matrix, find a minimum norm solution using &lt;small&gt;CXSPARSE&lt;/small&gt;&lt;a href=&quot;#FOOT10&quot; name=&quot;DOCF10&quot;&gt;&lt;sup&gt;10&lt;/sup&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="460a1e521a47decd43a8936090a9332ba9272e79" translate="yes" xml:space="preserve">
          <source>If the matrix is square, Hermitian with a real positive diagonal, attempt Cholesky factorization using the &lt;small&gt;LAPACK&lt;/small&gt; xPOTRF function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08595301735b06fa44838c8d8e3d81cf1a7a6990" translate="yes" xml:space="preserve">
          <source>If the matrix is square, Hermitian with a real positive diagonal, attempt sparse Cholesky factorization using &lt;small&gt;CHOLMOD&lt;/small&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db3a275b7c8d1ad8e68dd08a04fb053ae232e350" translate="yes" xml:space="preserve">
          <source>If the matrix is square, banded and if the band density is less than that given by &lt;code&gt;spparms (&quot;bandden&quot;)&lt;/code&gt; continue, else goto 4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d0aa75420ef4468c2a25507c2198b6731c690e7" translate="yes" xml:space="preserve">
          <source>If the matrix is tridiagonal and the right-hand side is not sparse continue, else goto 3b.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62acb9ebab99c123093c0e3729a8aa3d304ed289" translate="yes" xml:space="preserve">
          <source>If the matrix is upper or lower triangular perform a sparse forward or backward substitution, and goto 8</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="772000bb2838560ab81cb38b73acf367f858711d" translate="yes" xml:space="preserve">
          <source>If the matrix is upper or lower triangular sparse use a forward or backward substitution using the &lt;small&gt;LAPACK&lt;/small&gt; xTRTRS function, and goto 4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d90f754703395645becb542d148da54fd843bded" translate="yes" xml:space="preserve">
          <source>If the matrix is well-conditioned then &lt;var&gt;c&lt;/var&gt; will be near 1 and if the matrix is poorly conditioned it will be close to 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9afa404007b2d031acc4dca23f771e03c56ce44" translate="yes" xml:space="preserve">
          <source>If the message is an integer, it is interpreted as a bug ID for the Octave bug tracker and reported as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b762559179c642239813035c26cc92aecf52472c" translate="yes" xml:space="preserve">
          <source>If the multiplicity, &lt;var&gt;e&lt;/var&gt;, is not explicitly specified the multiplicity is determined by the function &lt;code&gt;mpoles&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6875b7c9e8d0af8caf61e4a30bb606f26cc93161" translate="yes" xml:space="preserve">
          <source>If the name of the constraint function is omitted, &lt;code&gt;dasrt&lt;/code&gt; solves the same problem as &lt;code&gt;daspk&lt;/code&gt; or &lt;code&gt;dassl&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2fc2cdd79e3f27c5cc26cdf7c51929367c7365f" translate="yes" xml:space="preserve">
          <source>If the named preference or group does not exist, it is added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e592dfb1b56e376b5745db33f0e6b37561a7bd0" translate="yes" xml:space="preserve">
          <source>If the number of elements is greater than one, then the endpoints &lt;var&gt;start&lt;/var&gt; and &lt;var&gt;end&lt;/var&gt; are always included in the range. If &lt;var&gt;start&lt;/var&gt; is greater than &lt;var&gt;end&lt;/var&gt;, the elements are stored in decreasing order. If the number of points is not specified, a value of 100 is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd645f1db2b2c07ba2aefc7fd4c022dad1cdeca8" translate="yes" xml:space="preserve">
          <source>If the number of output subscripts exceeds the number of dimensions, the exceeded dimensions are set to &lt;code&gt;1&lt;/code&gt;. On the other hand, if fewer subscripts than dimensions are provided, the exceeding dimensions are merged into the final requested dimension. For clarity, consider the following examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f7c49215a1c3c6bd50daf0577d5b5693b5fd9d3" translate="yes" xml:space="preserve">
          <source>If the numeric constant is a real integer, it can be defined in decimal, hexadecimal, or binary notation. Hexadecimal notation starts with &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e28baaf5e3031da856759cae8ca152970a3e0800" translate="yes" xml:space="preserve">
          <source>If the object is copied to multiple variables (or cell or struct array elements) or returned from a function, &lt;var&gt;function&lt;/var&gt; will be executed after clearing the last copy of the object. Note that if multiple local onCleanup variables are created, the order in which they are called is unspecified. For similar functionality See &lt;a href=&quot;the-unwind_005fprotect-statement#The-unwind_005fprotect-Statement&quot;&gt;The unwind_protect Statement&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0e5e01c5e9edef34922cc0c4a537462b86f571f" translate="yes" xml:space="preserve">
          <source>If the option &lt;code&gt;&quot;align&quot;&lt;/code&gt; is given then the plot boxes of the subwindows will align, but this may leave no room for axes tick marks or labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97f479f899045cc1451f06193fb8b779eee98dc8" translate="yes" xml:space="preserve">
          <source>If the option &lt;code&gt;&quot;nocompute&quot;&lt;/code&gt; is given, the function will not attempt to guess the type if it is still unknown. This is useful for debugging purposes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a42c9b1331c8331cf4666b8d5eb8e4d75807b96b" translate="yes" xml:space="preserve">
          <source>If the option &lt;code&gt;&quot;replace&quot;&lt;/code&gt; is given then the subplot axes will be reset, rather than just switching the current axes for plotting to the requested subplot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97cc94f0f6d3dc127f975b4f3f40a26fe98cfc9c" translate="yes" xml:space="preserve">
          <source>If the option &lt;code&gt;&quot;unique&quot;&lt;/code&gt; is given, and more than one value is specified at the same &lt;var&gt;i&lt;/var&gt;, &lt;var&gt;j&lt;/var&gt; indices, then the last specified value will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ebafec96066151fc6d94e0578e2d653fbc891cb" translate="yes" xml:space="preserve">
          <source>If the optional &lt;var&gt;dim&lt;/var&gt; argument is given, operate along this dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad9015577a22d56a49ecab494a02d60e654a9928" translate="yes" xml:space="preserve">
          <source>If the optional &lt;var&gt;dim&lt;/var&gt; argument is given, then &lt;code&gt;polyarea&lt;/code&gt; works along this dimension of the arrays &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eeeda24f15d65cf3bff04fcd3812a81409414c8" translate="yes" xml:space="preserve">
          <source>If the optional &lt;var&gt;freq_norm&lt;/var&gt; argument is true, the frequency vector &lt;var&gt;w&lt;/var&gt; is in units of normalized radians. If &lt;var&gt;freq_norm&lt;/var&gt; is false, or not given, then &lt;var&gt;w&lt;/var&gt; is measured in Hertz.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78df7050c588eb92e82cd124701a37249f520085" translate="yes" xml:space="preserve">
          <source>If the optional &lt;var&gt;z&lt;/var&gt; input is given, or &lt;var&gt;zz&lt;/var&gt; is requested, then the output will be a full 3-D grid. If &lt;var&gt;z&lt;/var&gt; is omitted and &lt;var&gt;zz&lt;/var&gt; is requested, it is assumed to be the same as &lt;var&gt;y&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b71822906d0696c742e33e9ad91216c534b3a9d5" translate="yes" xml:space="preserve">
          <source>If the optional argument &lt;code&gt;&quot;periodic&quot;&lt;/code&gt; is given, the periodic form of the window is returned. This is equivalent to the window of length &lt;var&gt;m&lt;/var&gt;+1 with the last coefficient removed. The optional argument &lt;code&gt;&quot;symmetric&quot;&lt;/code&gt; is equivalent to not specifying a second argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1284aac8d27d5d8707ff40f4384d297def8250d8" translate="yes" xml:space="preserve">
          <source>If the optional argument &lt;code&gt;&quot;reset&quot;&lt;/code&gt; is specified, delete all child objects including those with hidden handles and reset all figure properties to their defaults. However, the following properties are not reset: Position, Units, PaperPosition, PaperUnits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afbd4500d3e24667fa2af5425958d3323867a0ae" translate="yes" xml:space="preserve">
          <source>If the optional argument &lt;code&gt;&quot;reset&quot;&lt;/code&gt; is specified, delete all child objects, including those with hidden handles, and reset all axes properties to their defaults. However, the following properties are not reset: &lt;code&gt;Position&lt;/code&gt;, &lt;code&gt;Units&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e62e68898ccfe2d740782a548e014e4e467a46a" translate="yes" xml:space="preserve">
          <source>If the optional argument &lt;code&gt;&quot;rows&quot;&lt;/code&gt; is given then return the unique rows of &lt;var&gt;x&lt;/var&gt; sorted in ascending order. The input must be a 2-D matrix to use this option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fee24808c4d08add54527671bc290993e532d027" translate="yes" xml:space="preserve">
          <source>If the optional argument &lt;code&gt;&quot;rows&quot;&lt;/code&gt; is supplied, check whether the array is sorted by rows as output by the function &lt;code&gt;sortrows&lt;/code&gt; (with no options).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1518c2d5d7e247c02b26e079abf86a03f25c609" translate="yes" xml:space="preserve">
          <source>If the optional argument &lt;var&gt;color&lt;/var&gt; is present then the background color is set to &lt;var&gt;color&lt;/var&gt; rather than inverted. &lt;var&gt;color&lt;/var&gt; may be a string representing one of the eight known colors or an RGB triplet. The special string argument &lt;code&gt;&quot;none&quot;&lt;/code&gt; restores the plot to the factory default colors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8a079c204cd7230cfa44fe790e7baaf653fea73" translate="yes" xml:space="preserve">
          <source>If the optional argument &lt;var&gt;deblank&lt;/var&gt; is true, then the spaces will be removed from the end of the character data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa0cfb25fd7f3babab7b76a96d0523b880b15d53" translate="yes" xml:space="preserve">
          <source>If the optional argument &lt;var&gt;delete&lt;/var&gt; is supplied and is true, the file will be deleted automatically when Octave exits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47a4a4e6de7d4b52ad69b265f1d23884ca912ece" translate="yes" xml:space="preserve">
          <source>If the optional argument &lt;var&gt;dim&lt;/var&gt; is given then operate along this dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7352d79bf2c621aa6d468219cf509ebd5aa2b61d" translate="yes" xml:space="preserve">
          <source>If the optional argument &lt;var&gt;dim&lt;/var&gt; is given, calculate the dot products along this dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b1e1ded6b48c63e4671492628b3375375787159" translate="yes" xml:space="preserve">
          <source>If the optional argument &lt;var&gt;dim&lt;/var&gt; is given, operate along this dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c161e1e19db17f041612b4e8c7d8a31541436a22" translate="yes" xml:space="preserve">
          <source>If the optional argument &lt;var&gt;dim&lt;/var&gt; is given, then the matrix is sorted along the dimension defined by &lt;var&gt;dim&lt;/var&gt;. The optional argument &lt;var&gt;mode&lt;/var&gt; defines the order in which the values will be sorted. Valid values of &lt;var&gt;mode&lt;/var&gt; are &lt;code&gt;&quot;ascend&quot;&lt;/code&gt; or &lt;code&gt;&quot;descend&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da3853c590b9bc69a049f8ce5410bfcf04307936" translate="yes" xml:space="preserve">
          <source>If the optional argument &lt;var&gt;dim&lt;/var&gt; is supplied, work along dimension &lt;var&gt;dim&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e084b4c7a1b16d01e08f7fd1ecc6562f295784e" translate="yes" xml:space="preserve">
          <source>If the optional argument &lt;var&gt;dim&lt;/var&gt; is supplied, work along dimension &lt;var&gt;dim&lt;/var&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f2dbf9e5c7ca9cdfd34e3d24e0d17d27e95d156" translate="yes" xml:space="preserve">
          <source>If the optional argument &lt;var&gt;end&lt;/var&gt; is provided, stop playing at &lt;var&gt;end&lt;/var&gt; seconds in the recording.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9130ecf780f816d6453272b2eb340cd9f421440" translate="yes" xml:space="preserve">
          <source>If the optional argument &lt;var&gt;format&lt;/var&gt; is given, then display only formats with names that start with &lt;var&gt;format&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6b463b73a58d7c5702af450bde5e07d4710252c" translate="yes" xml:space="preserve">
          <source>If the optional argument &lt;var&gt;fs&lt;/var&gt; is given, it specifies the sampling rate for recording.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4730954d85a7b660c67dd382cb761fe420017078" translate="yes" xml:space="preserve">
          <source>If the optional argument &lt;var&gt;id&lt;/var&gt; is provided, return information about the corresponding device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6eb894d16e599d5649d7fa74087091921b82899" translate="yes" xml:space="preserve">
          <source>If the optional argument &lt;var&gt;io&lt;/var&gt; is 1, return information about input devices only. If it is 0, return information about output devices only. If &lt;var&gt;io&lt;/var&gt; is the only argument supplied, return the number of input or output devices available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="132a2e3b879c7c1c48c9c3d9c42d458b1e92a37b" translate="yes" xml:space="preserve">
          <source>If the optional argument &lt;var&gt;name&lt;/var&gt; is provided, return the id of the named device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93f49934a4ca05b35ee940b09b611c5bf3653ee9" translate="yes" xml:space="preserve">
          <source>If the optional argument &lt;var&gt;opt&lt;/var&gt; is 1 or true, the result &lt;var&gt;I&lt;/var&gt; is multiplied by &lt;code&gt;exp&amp;nbsp;(-abs&amp;nbsp;(real&amp;nbsp;(&lt;var&gt;x&lt;/var&gt;)))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3d6551591f6ba0c846b53d15f1a844a0817bdd7" translate="yes" xml:space="preserve">
          <source>If the optional argument &lt;var&gt;opt&lt;/var&gt; is 1 or true, the result &lt;var&gt;J&lt;/var&gt; is multiplied by &lt;code&gt;exp&amp;nbsp;(-abs&amp;nbsp;(imag&amp;nbsp;(&lt;var&gt;x&lt;/var&gt;)))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7afb76c68277bacd79e2a11f8340cacf6998a6cd" translate="yes" xml:space="preserve">
          <source>If the optional argument &lt;var&gt;opt&lt;/var&gt; is 1 or true, the result &lt;var&gt;K&lt;/var&gt; is multiplied by &lt;code&gt;exp&amp;nbsp;(&lt;var&gt;x&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79895b2a8ef84c807df119fdcddb127c48b06d19" translate="yes" xml:space="preserve">
          <source>If the optional argument &lt;var&gt;opt&lt;/var&gt; is 1 or true, the result &lt;var&gt;Y&lt;/var&gt; is multiplied by &lt;code&gt;exp&amp;nbsp;(-abs&amp;nbsp;(imag&amp;nbsp;(&lt;var&gt;x&lt;/var&gt;)))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6559be7bc1117757e52275907636d3d4d91baeea" translate="yes" xml:space="preserve">
          <source>If the optional argument &lt;var&gt;opt&lt;/var&gt; is 1 or true, the result is multiplied by &lt;code&gt;exp (-I*&lt;var&gt;x&lt;/var&gt;)&lt;/code&gt; for &lt;var&gt;k&lt;/var&gt; = 1 or &lt;code&gt;exp (I*&lt;var&gt;x&lt;/var&gt;)&lt;/code&gt; for &lt;var&gt;k&lt;/var&gt; = 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e22ad324a92be3cc0bcabf3e48ca256eb0b4c67" translate="yes" xml:space="preserve">
          <source>If the optional argument &lt;var&gt;overlap&lt;/var&gt; is true (default), the returned vector can include overlapping positions. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ddb4625370765b9444c3773b81ff582f83af2ea" translate="yes" xml:space="preserve">
          <source>If the optional argument &lt;var&gt;start&lt;/var&gt; is provided, begin playing &lt;var&gt;start&lt;/var&gt; seconds in to the recording.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="963b6db2d12df85f62f3a3ede27a94c26d4af420" translate="yes" xml:space="preserve">
          <source>If the optional argument &lt;var&gt;type&lt;/var&gt; is &lt;code&gt;&quot;async&quot;&lt;/code&gt;, the process is started in the background and the process ID of the child process is returned immediately. Otherwise, the child process is started and Octave waits until it exits. If the &lt;var&gt;type&lt;/var&gt; argument is omitted, it defaults to the value &lt;code&gt;&quot;sync&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e8d3f53dfdb88dfbaae8363028134f8474a882c" translate="yes" xml:space="preserve">
          <source>If the optional argument &lt;var&gt;type&lt;/var&gt; is supplied, check only for symbols of the specified type. Valid types are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52988c7f2e6bb290fb4f8973c10f7c642d86e9fc" translate="yes" xml:space="preserve">
          <source>If the optional input &lt;code&gt;&quot;rows&quot;&lt;/code&gt; is given then return rows that are in either &lt;var&gt;a&lt;/var&gt; or &lt;var&gt;b&lt;/var&gt;. The inputs must be 2-D matrices to use this option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fbebe5313bc0cd7ace2e2993841a12af2e51e6b" translate="yes" xml:space="preserve">
          <source>If the optional input &lt;code&gt;&quot;rows&quot;&lt;/code&gt; is given then return the common rows of &lt;var&gt;a&lt;/var&gt; and &lt;var&gt;b&lt;/var&gt;. The inputs must be 2-D matrices to use this option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="011388f74286ba9d598e4d233b07e45a24ffcb7f" translate="yes" xml:space="preserve">
          <source>If the optional input &lt;code&gt;&quot;rows&quot;&lt;/code&gt; is given then return the rows exclusive to sets &lt;var&gt;a&lt;/var&gt; and &lt;var&gt;b&lt;/var&gt;. The inputs must be 2-D matrices to use this option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="040698b942c75633e5440ed3b12d041f9432bb5d" translate="yes" xml:space="preserve">
          <source>If the optional input &lt;code&gt;&quot;rows&quot;&lt;/code&gt; is given then return the rows in &lt;var&gt;a&lt;/var&gt; that are not in &lt;var&gt;b&lt;/var&gt;. The inputs must be 2-D matrices to use this option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0904d19f87acc75d02869d645ed5a53f40e98927" translate="yes" xml:space="preserve">
          <source>If the optional input &lt;var&gt;hfig&lt;/var&gt; or &lt;var&gt;hax&lt;/var&gt; is given then prepare the specified figure or axes rather than the current figure and axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="994daa112ab62c78b110b2857b78e2a78138e4fd" translate="yes" xml:space="preserve">
          <source>If the optional integer value &lt;var&gt;status&lt;/var&gt; is supplied, pass that value to the operating system as Octave&amp;rsquo;s exit status. The default value is zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f25986be06e20c60cd0399416d1c43ffb14ab7de" translate="yes" xml:space="preserve">
          <source>If the optional output &lt;var&gt;list&lt;/var&gt; is requested then &lt;code&gt;ls&lt;/code&gt; returns a character array with one row for each file/directory name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e629da2163d35cde3bf679c1a00f65d1474a421" translate="yes" xml:space="preserve">
          <source>If the optional parameter &lt;var&gt;pflg&lt;/var&gt; is nonzero, row pivoting is used to improve numerical behavior. The default value is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d9e104a422a9822e189e3edbfce9c815a7fa2db" translate="yes" xml:space="preserve">
          <source>If the optional parameter &lt;var&gt;reorder&lt;/var&gt; is zero, poles are not sorted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ec3c20b07c56ff065dc7616868c2997537f16d0" translate="yes" xml:space="preserve">
          <source>If the optional second argument is a scalar, &lt;var&gt;nbins&lt;/var&gt;, it defines the number of bins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76c99b25c368831fcfd84a825719327f31ab3024" translate="yes" xml:space="preserve">
          <source>If the optional second argument is a vector, &lt;var&gt;x&lt;/var&gt;, it defines the centers of the bins. The width of the bins is determined from the adjacent values in the vector. The total number of bins is &lt;code&gt;numel (&lt;var&gt;x&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2efaf0a44ae18204f319ed93f91538d63a99817c" translate="yes" xml:space="preserve">
          <source>If the optional second argument is supplied, return a cell array containing all name matches rather than just the first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="758bea71672541ff92d161cb2a2cc1eb01ec2128" translate="yes" xml:space="preserve">
          <source>If the optional second parameter is supplied with value &lt;code&gt;&quot;s&quot;&lt;/code&gt;, recursively remove all subdirectories as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa0216b57ad7372d4d6d2b924dfb52e05d7619e5" translate="yes" xml:space="preserve">
          <source>If the optional third argument &lt;code&gt;&quot;pack&quot;&lt;/code&gt; is given then the extracted elements are not inserted into a matrix, but instead stacked column-wise one above another, and returned as a column vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20d41e17e4b54ba1380b66f02d9fdefce4675526" translate="yes" xml:space="preserve">
          <source>If the optional third argument &lt;code&gt;&quot;rows&quot;&lt;/code&gt; is given then compare rows in &lt;var&gt;a&lt;/var&gt; with rows in &lt;var&gt;s&lt;/var&gt;. The inputs must be 2-D matrices with the same number of columns to use this option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82170a1c2a619fc3f834c3f61fff08c3b433c2d0" translate="yes" xml:space="preserve">
          <source>If the optional third argument &lt;var&gt;dim&lt;/var&gt; is present then operate along this dimension. In this case the second argument is ignored and should be set to the empty matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9852f5d91a375449fb4a90ff11bf91cd1ef3b332" translate="yes" xml:space="preserve">
          <source>If the optional third input &lt;code&gt;&quot;compact&quot;&lt;/code&gt; is present then the data will be compressed to save more space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dc9b6668a82c72f5d9dda31a4627e641b58f206" translate="yes" xml:space="preserve">
          <source>If the optional third input is present, &lt;code&gt;gsvd&lt;/code&gt; constructs the &quot;economy-sized&quot; decomposition where the number of columns of &lt;var&gt;U&lt;/var&gt;, &lt;var&gt;V&lt;/var&gt; and the number of rows of &lt;var&gt;C&lt;/var&gt;, &lt;var&gt;S&lt;/var&gt; is less than or equal to the number of columns of &lt;var&gt;A&lt;/var&gt;. This option is not yet implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73c18f00eb617ca58cea03e739616ec72f395aa0" translate="yes" xml:space="preserve">
          <source>If the output &lt;var&gt;hax&lt;/var&gt; is requested, subplot returns the axes handle for the subplot. This is useful for modifying the properties of a subplot using &lt;code&gt;set&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b648729441de62ec3f6b6efd813e0b6530b9541" translate="yes" xml:space="preserve">
          <source>If the package contains files called &lt;code&gt;PKG_ADD&lt;/code&gt; or &lt;code&gt;PKG_DEL&lt;/code&gt; the commands in these files will be executed when the package is added or removed from the users path. In some situations such files are a bit cumbersome to maintain, so the package manager supports automatic creation of such files. If a source file in the package contains a &lt;code&gt;PKG_ADD&lt;/code&gt; or &lt;code&gt;PKG_DEL&lt;/code&gt; directive they will be added to either the &lt;code&gt;PKG_ADD&lt;/code&gt; or &lt;code&gt;PKG_DEL&lt;/code&gt; files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="921d2f2c9ffbb9c2e37c3f5af6abcb6f4ece5b68" translate="yes" xml:space="preserve">
          <source>If the package is installed successfully nothing will be printed on the prompt, but if an error occurred during installation it will be reported. It is possible to install several packages at once by writing several package files after the &lt;code&gt;pkg install&lt;/code&gt; command. If a different version of the package is already installed it will be removed prior to installing the new package. This makes it easy to upgrade and downgrade the version of a package, but makes it impossible to have several versions of the same package installed at once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fc2d9bedb72adaa35f26914f54cd01065aeadd3" translate="yes" xml:space="preserve">
          <source>If the package is removed successfully nothing will be printed in the prompt, but if an error occurred it will be reported. It should be noted that the package file used for installation is not needed for removal, and that only the package name as reported by &lt;code&gt;pkg list&lt;/code&gt; should be used when removing a package. It is possible to remove several packages at once by writing several package names after the &lt;code&gt;pkg uninstall&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41b77eaa6a82cf4f2278bb77d65cb14f055ddf22" translate="yes" xml:space="preserve">
          <source>If the parameter &lt;code&gt;&quot;UniformOutput&quot;&lt;/code&gt; is set to true (the default), then the function must return a single element which will be concatenated into the return value. If &lt;code&gt;&quot;UniformOutput&quot;&lt;/code&gt; is false, the outputs are placed into a structure with the same fieldnames as the input structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3ce288df3e11af040d33f22a693f1328ceb4e84" translate="yes" xml:space="preserve">
          <source>If the parameter &lt;code&gt;&quot;UniformOutput&quot;&lt;/code&gt; is set to true (the default), then the function must return scalars which will be concatenated into the return array(s). If &lt;code&gt;&quot;UniformOutput&quot;&lt;/code&gt; is false, the outputs are concatenated into a cell array (or cell arrays). For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b70c9a4c3b00f450753da43bd71ca1e894f70c5" translate="yes" xml:space="preserve">
          <source>If the parameter &lt;var&gt;errfunc&lt;/var&gt; after a further string input argument &lt;code&gt;&quot;ErrorHandler&quot;&lt;/code&gt; is another string, a function handle, an inline function, or an anonymous function, then &lt;var&gt;errfunc&lt;/var&gt; defines a function to call in the case that &lt;var&gt;func&lt;/var&gt; generates an error. The definition of the function must be of the form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10f1f747d5926ca185e32b9ec02617880b38f533" translate="yes" xml:space="preserve">
          <source>If the parameter &lt;var&gt;val&lt;/var&gt; after a further string input argument &lt;code&gt;&quot;UniformOutput&quot;&lt;/code&gt; is set &lt;code&gt;true&lt;/code&gt; (the default), then the named function &lt;var&gt;func&lt;/var&gt; must return a single element which then will be concatenated into the return value and is of type matrix. Otherwise, if that parameter is set to &lt;code&gt;false&lt;/code&gt;, then the outputs are concatenated in a cell array. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71dc6bab73901f2ddd34f83b5ca70aba8fab2107" translate="yes" xml:space="preserve">
          <source>If the published output is a HTML report, you can insert HTML markup, that is only visible in this kind of output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10875b0a98d5cb362d940e448350d78ffd2ec9fb" translate="yes" xml:space="preserve">
          <source>If the published output is a LaTeX or PDF report, you can insert LaTeX markup, that is only visible in this kind of output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="958ffe489f47e8b09ee1f7105f1776bd5793722d" translate="yes" xml:space="preserve">
          <source>If the relative difference of two poles is less than &lt;var&gt;tol&lt;/var&gt; then they are considered to be multiples. The default value for &lt;var&gt;tol&lt;/var&gt; is 0.001.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81a5c391cf259b5220c044f48ad18154d08d7863" translate="yes" xml:space="preserve">
          <source>If the requested line is not a breakpoint no action is performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="429d1136f3a49da48045a1a694d37ac6313e4791" translate="yes" xml:space="preserve">
          <source>If the result doesn&amp;rsquo;t start with a plus or minus sign, prefix it with a space instead. Since the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a8a8ff007037f44d533db7e70e5c6c75ab87fd3" translate="yes" xml:space="preserve">
          <source>If the result is false, the argument has been ignored during the function call through the use of the tilde (~) special output argument. Functions can use &lt;code&gt;isargout&lt;/code&gt; to avoid performing unnecessary calculations for outputs which are unwanted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c66e2c9d84d0da20e9c7d4c8db185c0d811f1c4" translate="yes" xml:space="preserve">
          <source>If the return argument &lt;var&gt;out_file&lt;/var&gt; is given, the name of the created file is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a78d66a29114f18126c11e43afdc3cea5d33cee1" translate="yes" xml:space="preserve">
          <source>If the returned value of &lt;var&gt;pid&lt;/var&gt; is greater than 0, it is the process ID of the child process that exited. If an error occurs, &lt;var&gt;pid&lt;/var&gt; will be less than zero and &lt;var&gt;msg&lt;/var&gt; will contain a system-dependent error message. The value of &lt;var&gt;status&lt;/var&gt; contains additional system-dependent information about the subprocess that exited.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f44aec2a3c9e7b9d6e58851d386a2d872322b1da" translate="yes" xml:space="preserve">
          <source>If the rows are split, Octave will display the matrix in a series of smaller pieces, each of which can fit within the limits of your terminal width and each set of rows is labeled so that you can easily see which columns are currently being displayed. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ee86126e8319545b0e74e8f0c6ee5e827f5b38c" translate="yes" xml:space="preserve">
          <source>If the second and subsequent arguments are character strings, they are the names of the arguments of the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3955768560006097e1e628fa5b4607ed2188319c" translate="yes" xml:space="preserve">
          <source>If the second argument is &lt;code&gt;&quot;explain&quot;&lt;/code&gt; then &lt;var&gt;name&lt;/var&gt; is ignored and an explanation of the line markers used in &lt;code&gt;test&lt;/code&gt; output reports is written to the file specified by &lt;var&gt;fname&lt;/var&gt; or &lt;var&gt;fid&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0df6c4c521e5a12fe0560d4f3d744c268cbb69b9" translate="yes" xml:space="preserve">
          <source>If the second argument is a cell array of strings, search each directory of the path for element of the cell array and return the first that matches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06befb8d4304856e2bf87ceba2c158dcc0b95b38" translate="yes" xml:space="preserve">
          <source>If the second argument is a scalar integer, &lt;em&gt;k&lt;/em&gt;, perform the same test in a linear autoregression model of order &lt;em&gt;k&lt;/em&gt;, i.e., with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa5750ec4a5298173e1839bd440378adb7cde535" translate="yes" xml:space="preserve">
          <source>If the second argument is an integer &lt;var&gt;n&lt;/var&gt;, the arguments are &lt;code&gt;&quot;x&quot;&lt;/code&gt;, &lt;code&gt;&quot;P1&quot;&lt;/code&gt;, &amp;hellip;, &lt;code&gt;&quot;P&lt;var&gt;N&lt;/var&gt;&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8ae7f5c0300665cd22170701ed0272e5aae7e47" translate="yes" xml:space="preserve">
          <source>If the second argument is exactly 0, then the choice of decomposition is based on the matrix &lt;var&gt;A&lt;/var&gt;. If &lt;var&gt;A&lt;/var&gt; has more rows than columns then an economy-sized decomposition is returned, otherwise a regular decomposition is calculated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21f3a2615a58f45e8500001d9723567171ecc761" translate="yes" xml:space="preserve">
          <source>If the second argument is not given, &lt;code&gt;p&amp;nbsp;=&amp;nbsp;2&lt;/code&gt; is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95bed98cae0fe89b2777dfd192fdd2c3f9282100" translate="yes" xml:space="preserve">
          <source>If the second argument is omitted, it is taken to be</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cac2105ae45e45a2e758850cc5a07104a752567d" translate="yes" xml:space="preserve">
          <source>If the second argument is omitted, the first row is taken to be the same as the first column. If the first element of &lt;var&gt;r&lt;/var&gt; is not the same as the first element of &lt;var&gt;c&lt;/var&gt;, the first element of &lt;var&gt;c&lt;/var&gt; is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b156e49b773ef66cd6f39f8605dbaf4888d4e117" translate="yes" xml:space="preserve">
          <source>If the second argument is the string &lt;code&gt;&quot;grabdemo&quot;&lt;/code&gt;, the contents of any built-in demo blocks are extracted but not executed. The text for all code blocks is concatenated and returned as &lt;var&gt;code&lt;/var&gt; with &lt;var&gt;idx&lt;/var&gt; being a vector of positions of the ends of each demo block. For an easier way to extract demo blocks from files, See &lt;a href=&quot;demonstration-functions#XREFexample&quot;&gt;example&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deb35d097b1261b6b483d28d5e7e167741b88fd6" translate="yes" xml:space="preserve">
          <source>If the second optional argument &lt;code&gt;&quot;all&quot;&lt;/code&gt; is supplied, return a cell array containing the list of all files that have the same name in the path. If no files are found, return an empty cell array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8caca0dcc83f0731711218de2798af32f3ffba4" translate="yes" xml:space="preserve">
          <source>If the second output &lt;var&gt;V&lt;/var&gt; is requested the volume of the enclosing convex hull is calculated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2906c56aeeaff7b81889d3ea0fe0ce7b9d2f50d" translate="yes" xml:space="preserve">
          <source>If the second output &lt;var&gt;v&lt;/var&gt; is requested the volume of the enclosing convex hull is calculated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d87b3c66ad09a211b9c5f7e7061d9412e583709" translate="yes" xml:space="preserve">
          <source>If the size of the coefficient matrix &lt;var&gt;A&lt;/var&gt; is n-by-p, the size of the vector/array of constant terms &lt;var&gt;b&lt;/var&gt; must be n-by-k.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6fb64fbbf1c454cab9e5d9613b7e9e3edd69c42" translate="yes" xml:space="preserve">
          <source>If the sparse Cholesky factorization failed or the matrix is not Hermitian with a real positive diagonal, and the matrix is square, factorize, solve, and perform one refinement iteration using &lt;small&gt;UMFPACK&lt;/small&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aa50f26b186313753a1994ffee369a8ba66192e" translate="yes" xml:space="preserve">
          <source>If the special parameter name &lt;code&gt;varargin&lt;/code&gt; appears at the end of a function parameter list it indicates that the function takes a variable number of input arguments. Using &lt;code&gt;varargin&lt;/code&gt; the function looks like this</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="411979ed557508221faee0034bcca10239a01f7e" translate="yes" xml:space="preserve">
          <source>If the string &lt;var&gt;format&lt;/var&gt; is not present or is equal to &lt;code&gt;&quot;short&quot;&lt;/code&gt; then &lt;var&gt;s&lt;/var&gt; will contain the abbreviated name of the weekday. If &lt;var&gt;format&lt;/var&gt; is &lt;code&gt;&quot;long&quot;&lt;/code&gt; then &lt;var&gt;s&lt;/var&gt; will contain the full name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c48f8fe9e13454dfed7b770497ad25548cea05ab" translate="yes" xml:space="preserve">
          <source>If the string &lt;var&gt;line_spec&lt;/var&gt; is given it is passed to &lt;code&gt;plot&lt;/code&gt; and determines the appearance of the plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c80a5137395eded9fbd6974f21a8e44709dac807" translate="yes" xml:space="preserve">
          <source>If the string argument &lt;code&gt;&quot;pp&quot;&lt;/code&gt; is specified, then &lt;var&gt;xi&lt;/var&gt; should not be supplied and &lt;code&gt;interp1&lt;/code&gt; returns a piecewise polynomial object. This object can later be used with &lt;code&gt;ppval&lt;/code&gt; to evaluate the interpolation. There is an equivalence, such that &lt;code&gt;ppval (interp1 (&lt;var&gt;x&lt;/var&gt;,
&lt;var&gt;y&lt;/var&gt;, &lt;var&gt;method&lt;/var&gt;, &lt;code&gt;&quot;pp&quot;&lt;/code&gt;), &lt;var&gt;xi&lt;/var&gt;) == interp1 (&lt;var&gt;x&lt;/var&gt;,
&lt;var&gt;y&lt;/var&gt;, &lt;var&gt;xi&lt;/var&gt;, &lt;var&gt;method&lt;/var&gt;, &lt;code&gt;&quot;extrap&quot;&lt;/code&gt;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5c0f8d667568e752e5b2166403deeeb764b9b08" translate="yes" xml:space="preserve">
          <source>If the syntax of a conversion specification is invalid, the behavior is undefined. If there aren&amp;rsquo;t enough function arguments provided to supply addresses for all the conversion specifications in the template strings that perform assignments, or if the arguments are not of the correct types, the behavior is also undefined. On the other hand, extra arguments are simply ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd56d4f811d6e2cbdc551e1ec1a9d13b19fd770f" translate="yes" xml:space="preserve">
          <source>If the syntax of a conversion specification is invalid, unpredictable things will happen, so don&amp;rsquo;t do this. In particular, &lt;small&gt;MATLAB&lt;/small&gt; allows a bare percentage sign &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11c8c537e9a44af9db951c3d725149c43311f13d" translate="yes" xml:space="preserve">
          <source>If the system is not square, or if the coefficient matrix is singular, a minimum norm solution is computed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f7def31458d7ee4a3cd6fcf3610320929eb3af7" translate="yes" xml:space="preserve">
          <source>If the table is decreasing, then the tests are reversed. For non-strictly monotonic tables, empty intervals are always skipped. The result is undefined if &lt;var&gt;table&lt;/var&gt; is not monotonic, or if &lt;var&gt;table&lt;/var&gt; contains a NaN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceda42284f2e6478ceabd463e9e5884d1c665c0c" translate="yes" xml:space="preserve">
          <source>If the third argument &lt;code&gt;&quot;exact&quot;&lt;/code&gt; is not given, then &lt;var&gt;s&lt;/var&gt; only needs to match &lt;var&gt;A&lt;/var&gt; up to the length of &lt;var&gt;s&lt;/var&gt;. Trailing spaces and nulls in &lt;var&gt;s&lt;/var&gt; and &lt;var&gt;A&lt;/var&gt; are ignored when matching.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0eaeadc3808e920cbad0a6cc89679e3f1549287" translate="yes" xml:space="preserve">
          <source>If the third optional argument &lt;code&gt;&quot;all&quot;&lt;/code&gt; is supplied, return a cell array containing the list of all files that have the same name in the path. If no files are found, return an empty cell array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79ca39746906984bb3f81258f06472b17d576369" translate="yes" xml:space="preserve">
          <source>If the user ID does not exist in the database, &lt;code&gt;getpwuid&lt;/code&gt; returns 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9afd446fbdded29059e6bd61a1de013556edeab0" translate="yes" xml:space="preserve">
          <source>If the user name does not exist in the database, &lt;code&gt;getpwname&lt;/code&gt; returns 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb46472d180db476853061352932e6236a988a7a" translate="yes" xml:space="preserve">
          <source>If the values are cell arrays, create a structure array and initialize its values. The dimensions of each cell array of values must match. Singleton cells and non-cell values are repeated so that they fill the entire array. If the cells are empty, create an empty structure array with the specified field names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4277f70c61c1b8712828a8252c47029d2324ea8e" translate="yes" xml:space="preserve">
          <source>If the values passed to &lt;code&gt;struct&lt;/code&gt; are a mix of scalar and cell arrays, then the scalar arguments are expanded to create a structure array with a consistent dimension. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1f5d4f442fda24f59067bfb502d9de63bd23ba1" translate="yes" xml:space="preserve">
          <source>If the vertices are matrices of size MxN then each polygon patch has M vertices and a total of N polygons will be created. If some polygons do not have M vertices use NaN to represent &quot;no vertex&quot;. If the &lt;var&gt;z&lt;/var&gt; input is present then 3-D patches will be created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19c79da4dff816707d10d1953c16baa5690b903d" translate="yes" xml:space="preserve">
          <source>If there are &lt;em&gt;n&lt;/em&gt; intervals, and the dimensionality of &lt;var&gt;pp&lt;/var&gt; is &lt;em&gt;d&lt;/em&gt;, the resulting array has dimensions &lt;code&gt;[d, n-1]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f5708c5970afa52c84aa728ec44d21d1f3f8325" translate="yes" xml:space="preserve">
          <source>If there are more than two input arguments &lt;var&gt;A1&lt;/var&gt;, &lt;var&gt;A2&lt;/var&gt;, &amp;hellip;, &lt;var&gt;An&lt;/var&gt; the Kronecker product is computed as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fff74736c09f9afd94e0ed0a903bb922d18bab8" translate="yes" xml:space="preserve">
          <source>If there are no more characters to read, &lt;code&gt;fgetl&lt;/code&gt; returns -1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d61554f6de707b465a89e5e65b3eeec342886df9" translate="yes" xml:space="preserve">
          <source>If there are no more characters to read, &lt;code&gt;fgets&lt;/code&gt; returns -1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9a77d7524b5df607f9e102e1fbdd2a3e1299ada" translate="yes" xml:space="preserve">
          <source>If there are not a perfect number &lt;var&gt;n&lt;/var&gt; of regularly spaced colors then the remaining entries in the colormap are gradients of pure red, green, blue, and gray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6d0c608152a6bc6a3dfcb08770431c7142b33f6" translate="yes" xml:space="preserve">
          <source>If there are three named outputs and &lt;var&gt;opts&lt;/var&gt;.milu != &lt;code&gt;&quot;row&quot;&lt;/code&gt;, &lt;var&gt;P&lt;/var&gt; is returned such that &lt;var&gt;L&lt;/var&gt; and &lt;var&gt;U&lt;/var&gt; are incomplete factors of &lt;code&gt;&lt;var&gt;P&lt;/var&gt;*&lt;var&gt;A&lt;/var&gt;&lt;/code&gt;. When &lt;var&gt;opts&lt;/var&gt;.milu == &lt;code&gt;&quot;row&quot;&lt;/code&gt;, &lt;var&gt;P&lt;/var&gt; is returned such that &lt;var&gt;L&lt;/var&gt; and &lt;var&gt;U&lt;/var&gt; are incomplete factors of &lt;code&gt;&lt;var&gt;A&lt;/var&gt;*&lt;var&gt;P&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fb8c4db6c12b518ec653719b12258196d1d446b" translate="yes" xml:space="preserve">
          <source>If there aren&amp;rsquo;t enough function arguments provided to supply values for all the conversion specifications in the template string, or if the arguments are not of the correct types, the results are unpredictable. If you supply more arguments than conversion specifications, the extra argument values are simply ignored; this is sometimes useful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d77672ea489d6625044df7c72dcc471ea8b4a6a" translate="yes" xml:space="preserve">
          <source>If there is no such occurrence, or if &lt;var&gt;pattern&lt;/var&gt; is longer than &lt;var&gt;str&lt;/var&gt;, or if &lt;var&gt;pattern&lt;/var&gt; itself is empty, then &lt;var&gt;idx&lt;/var&gt; is the empty array &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c30283e28d15374ce7afa68c7294756b2af60e0f" translate="yes" xml:space="preserve">
          <source>If this auto-joining feature is not desired then it is important to call &lt;code&gt;newplot&lt;/code&gt; first to prepare a new figure and axes for plotting. Alternatively, the easier way is to call a high-level graphics routine which will both create the plot and then populate it with low-level graphics objects. Instead of calling &lt;code&gt;line&lt;/code&gt;, use &lt;code&gt;plot&lt;/code&gt;. Or use &lt;code&gt;surf&lt;/code&gt; instead of &lt;code&gt;surface&lt;/code&gt;. Or use &lt;code&gt;fill&lt;/code&gt; instead of &lt;code&gt;patch&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a073408ddc0c24f7b7e15b27fff80447048a9218" translate="yes" xml:space="preserve">
          <source>If this code is in the file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c186aa67163d53e071d9a1f94e7d3c040cec57d3" translate="yes" xml:space="preserve">
          <source>If this file exists here, its contents are also appended to the &lt;var&gt;static classpath&lt;/var&gt;. Note that the archives and class directories defined in this last step will affect all users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fe1b21e6677b5cde6bd4d871edfd41a5b0006b6" translate="yes" xml:space="preserve">
          <source>If this flag is set, the simplex solver uses the built-in LP presolver. Otherwise the LP presolver is not used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="425d9b3d3ac8383a187a702252cb78cd940c1df9" translate="yes" xml:space="preserve">
          <source>If this is not what you want, use a series of calls instead of just one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71c9ac798f7a26afe6bf81e9c7f32d7fec18da82" translate="yes" xml:space="preserve">
          <source>If this option is disabled, Octave will display the results produced by evaluating expressions within a function body that are not terminated with a semicolon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07f0da3410b1db12e2687b408f9d6f936f52214a" translate="yes" xml:space="preserve">
          <source>If this option is set to a nonzero value, you must also set the &lt;code&gt;&quot;algebraic variables&quot;&lt;/code&gt; option to declare which variables in the problem are algebraic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c819311db6560697d870fd9f74fb56f13b936c4" translate="yes" xml:space="preserve">
          <source>If this parameter is nonzero, save a copy of the problem in CPLEX LP format to the file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46bcd3c544112adca42b202c0397e2a9dfa6e7bd" translate="yes" xml:space="preserve">
          <source>If this property is set to &lt;code&gt;&quot;auto&quot;&lt;/code&gt;, &lt;code&gt;facenormals&lt;/code&gt; are automatically calculated if the &lt;code&gt;edgelighting&lt;/code&gt; or &lt;code&gt;facelighting&lt;/code&gt; property are set to &lt;code&gt;&quot;flat&quot;&lt;/code&gt; and at least one &lt;code&gt;light&lt;/code&gt; object is present and visible in the same axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6077e6f770f9107d66cd1585cc21d324b40c17e8" translate="yes" xml:space="preserve">
          <source>If this property is set to &lt;code&gt;&quot;auto&quot;&lt;/code&gt;, &lt;code&gt;vertexnormals&lt;/code&gt; are automatically calculated if the &lt;code&gt;edgelighting&lt;/code&gt; or &lt;code&gt;facelighting&lt;/code&gt; property are set to &lt;code&gt;&quot;gouraud&quot;&lt;/code&gt; and at least one &lt;code&gt;light&lt;/code&gt; object is present and visible in the same axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9809a1c5546b6926d2e226fef68bd666c11d22ff" translate="yes" xml:space="preserve">
          <source>If this value is a nonzero scalar, then &lt;code&gt;amd&lt;/code&gt; performs aggressive absorption. The default is not to perform aggressive absorption.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="077abad53add4988eef61e00d1cbbece4128b0df" translate="yes" xml:space="preserve">
          <source>If three functions are passed, then plot the parametrically defined function &lt;code&gt;[&lt;var&gt;fx&lt;/var&gt;(&lt;var&gt;s&lt;/var&gt;, &lt;var&gt;t&lt;/var&gt;), &lt;var&gt;fy&lt;/var&gt;(&lt;var&gt;s&lt;/var&gt;, &lt;var&gt;t&lt;/var&gt;),
&lt;var&gt;fz&lt;/var&gt;(&lt;var&gt;s&lt;/var&gt;, &lt;var&gt;t&lt;/var&gt;)]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ad908d29eb5f73de31da68b0e7eef25038742fd" translate="yes" xml:space="preserve">
          <source>If three inputs are given, &lt;var&gt;direction&lt;/var&gt; should be one of &lt;code&gt;&quot;first&quot;&lt;/code&gt; or &lt;code&gt;&quot;last&quot;&lt;/code&gt;, requesting only the first or last &lt;var&gt;n&lt;/var&gt; indices, respectively. However, the indices are always returned in ascending order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da870583c622099cfd3e98a6aaa9069c692eb905" translate="yes" xml:space="preserve">
          <source>If three output arguments are requested, also return the byte order of the current system as a character (&lt;code&gt;&quot;B&quot;&lt;/code&gt; for big-endian or &lt;code&gt;&quot;L&quot;&lt;/code&gt; for little-endian).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48d46c0188d92f3001cef77475a4e340a8993323" translate="yes" xml:space="preserve">
          <source>If three outputs are requested, &lt;code&gt;find&lt;/code&gt; also returns a vector containing the nonzero values. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="058383942e2b38e4ea4b4f88f036a3f1ab9a3ff6" translate="yes" xml:space="preserve">
          <source>If tolerances are left unspecified, and any integration limits or waypoints are of type &lt;code&gt;single&lt;/code&gt;, then Octave&amp;rsquo;s integral functions automatically reduce the default absolute and relative error tolerances as specified above. If tighter tolerances are desired they must be specified. &lt;small&gt;MATLAB&lt;/small&gt; leaves the tighter tolerances appropriate for &lt;code&gt;double&lt;/code&gt; inputs in place regardless of the class of the integration limits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eabfaadf49b106def1643ee191ebcabee27697bc" translate="yes" xml:space="preserve">
          <source>If true, &lt;var&gt;err&lt;/var&gt; is zero, and &lt;var&gt;yi&lt;/var&gt; is a matrix of the common size with all entries equal to &lt;var&gt;xi&lt;/var&gt; if this is a scalar or &lt;var&gt;xi&lt;/var&gt; otherwise. If the inputs cannot be brought to a common size, &lt;var&gt;err&lt;/var&gt; is 1, and &lt;var&gt;yi&lt;/var&gt; is &lt;var&gt;xi&lt;/var&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9ec57d4dc8511b5ecadf25bb12feed945ad5ef0" translate="yes" xml:space="preserve">
          <source>If true, Octave will attempt to eliminate the redundant copying when calling the &lt;code&gt;subsasgn&lt;/code&gt; method of a user-defined class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f16640c34ecf8b245b8604998f3c74c3290f3681" translate="yes" xml:space="preserve">
          <source>If true, any zeros on the diagonal of the upper triangular factor are replaced by the local drop tolerance &lt;code&gt;droptol * norm (&lt;var&gt;A&lt;/var&gt;(:,j))/&lt;var&gt;U&lt;/var&gt;(j,j)&lt;/code&gt;. The default is false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="801975db54cd048ff722cb67d19db3ac5cc387e2" translate="yes" xml:space="preserve">
          <source>If true, values of struct array elements are printed. This variable does not affect scalar structures whose elements are always printed. In both cases, however, printing will be limited to the number of levels specified by &lt;var&gt;struct_levels_to_print&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80e0838cdde564ba270fbe5d460d5eb115636d22" translate="yes" xml:space="preserve">
          <source>If two functions are passed as inputs then the parametric function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39c7333e5efe6add8e1d8fe35f287c82367e4946" translate="yes" xml:space="preserve">
          <source>If two inputs and two outputs are given, return the derivative of the polynomial quotient &lt;em&gt;&lt;var&gt;b&lt;/var&gt;/&lt;var&gt;a&lt;/var&gt;&lt;/em&gt;. The quotient numerator is in &lt;var&gt;q&lt;/var&gt; and the denominator in &lt;var&gt;d&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30b646081bc588df157bad0704464b9b740fec3e" translate="yes" xml:space="preserve">
          <source>If two inputs are given, &lt;var&gt;n&lt;/var&gt; indicates the maximum number of elements to find from the beginning of the matrix or vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b08d76f7d1a6230436da0ce445673da8b15bf20" translate="yes" xml:space="preserve">
          <source>If two inputs are scalar, then &lt;code&gt;betaincinv (&lt;var&gt;y&lt;/var&gt;, &lt;var&gt;a&lt;/var&gt;, &lt;var&gt;b&lt;/var&gt;)&lt;/code&gt; is returned for each of the other inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5896945a598ce4fab831563dd3b6f3d2cb41e7af" translate="yes" xml:space="preserve">
          <source>If two or more inputs are not scalar, the sizes of them must agree, and &lt;code&gt;betaincinv&lt;/code&gt; is applied element-by-element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4935cefb74e40396dd704e81c5489eee1a04b027" translate="yes" xml:space="preserve">
          <source>If two output arguments are requested &lt;code&gt;pkg&lt;/code&gt; splits the list of installed packages into those which were installed by the current user, and those which were installed by the system administrator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8af71b48da54ec542f81704b73a226d63fba8e9" translate="yes" xml:space="preserve">
          <source>If two output arguments are requested then no plot is made and the polar vectors necessary to plot the histogram are returned instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95621c2391f0f67242ed6f5d54af1ee849be71b3" translate="yes" xml:space="preserve">
          <source>If two output arguments are requested, also return the maximum number of elements for an array. This will depend on whether Octave has been compiled with 32-bit or 64-bit index vectors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b834b05d9da1556ddfc94b4a5c5bf8196b90fafc" translate="yes" xml:space="preserve">
          <source>If two output arguments are requested, return the factors &lt;var&gt;c&lt;/var&gt; and &lt;var&gt;s&lt;/var&gt; rather than the Givens rotation matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46403707491c2a3b7bea09da5631ae8e044883a9" translate="yes" xml:space="preserve">
          <source>If two output values are requested, &lt;code&gt;balance&lt;/code&gt; returns the diagonal &lt;var&gt;D&lt;/var&gt; and the permutation &lt;var&gt;P&lt;/var&gt; separately as vectors. In this case, &lt;code&gt;&lt;var&gt;DD&lt;/var&gt; = eye(n)(:,&lt;var&gt;P&lt;/var&gt;) * diag (&lt;var&gt;D&lt;/var&gt;)&lt;/code&gt;, where &lt;em&gt;n&lt;/em&gt; is the matrix size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0de166a4c8053019c852cca35cb637f8be814e4" translate="yes" xml:space="preserve">
          <source>If two output values&lt;var&gt;dpath&lt;/var&gt; and &lt;var&gt;spath&lt;/var&gt; are requested, the first variable will contain the dynamic classpath and the second will contain the static classpath.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c25dedba663b562642dd37044e12992748dd97f3" translate="yes" xml:space="preserve">
          <source>If two outputs are requested, &lt;code&gt;find&lt;/code&gt; returns the row and column indices of nonzero elements of a matrix. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54cab2bec46bb21483ac1dbe03d2ca5edfc2b488" translate="yes" xml:space="preserve">
          <source>If unspecified &lt;var&gt;n&lt;/var&gt; defaults to 10 (+/- 5 lines)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efcb1fa169a7c1ebc16a6260124b98a399d10702" translate="yes" xml:space="preserve">
          <source>If unspecified the default is to link both X and Y axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d93f7f6f6aa1f43ebcfaf5557260b45c53c87c5" translate="yes" xml:space="preserve">
          <source>If unspecified, &lt;var&gt;filename&lt;/var&gt; is set to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b91502153a86a59cb05591f1f8f7976625fd659d" translate="yes" xml:space="preserve">
          <source>If unspecified, &lt;var&gt;h&lt;/var&gt; is the current figure as returned by &lt;code&gt;gcf&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67ca7f1acd8a5a57a4d108e73df9de6cee45c260" translate="yes" xml:space="preserve">
          <source>If unspecified, &lt;var&gt;h&lt;/var&gt; is the current figure returned by &lt;code&gt;gcf&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4ce42e24e07694c2ccca601eacc303aaaaa8baf" translate="yes" xml:space="preserve">
          <source>If unspecified, the default tolerance is &lt;code&gt;1e-6 * norm (&lt;var&gt;x&lt;/var&gt;(:), 1)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f0fe8db916ebae817b62d032c210eb01f064662" translate="yes" xml:space="preserve">
          <source>If used on the left-hand side of an assignment, a comma separated list generated with &lt;code&gt;{}&lt;/code&gt; can be assigned to. An example is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="089929cb87fbfc29c012d425dc15a1a9656fd689" translate="yes" xml:space="preserve">
          <source>If using the &lt;code&gt;&quot;Events&quot;&lt;/code&gt; option then three additional outputs may be returned. &lt;var&gt;te&lt;/var&gt; holds the time when an Event function returned a zero. &lt;var&gt;ye&lt;/var&gt; holds the value of the solution at time &lt;var&gt;te&lt;/var&gt;. &lt;var&gt;ie&lt;/var&gt; contains an index indicating which Event function was triggered in the case of multiple Event functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea54b39edc0dcd3dcc5c9315187de258eeab9dc9" translate="yes" xml:space="preserve">
          <source>If we execute the two main functions, we get:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47149e4d371ecc1719b46d805214f06f707b705d" translate="yes" xml:space="preserve">
          <source>If we had written &lt;code&gt;avg&lt;/code&gt; like this instead,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30cf0ee8492509ff3a28adcbaa980355cec5a311" translate="yes" xml:space="preserve">
          <source>If we were to try to guess the arguments, we would probably guess wrong and then we would not encounter the bug.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="938c8b50389b72da90007f2fb2d8b86f887b22a6" translate="yes" xml:space="preserve">
          <source>If you are an experienced user of programs like Octave, your suggestions for improvement are welcome in any case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44a26e0b595b10c2628339cd33754afe94f3454a" translate="yes" xml:space="preserve">
          <source>If you are more interested in the CPU time that your process used, you should use the &lt;code&gt;cputime&lt;/code&gt; function instead. The &lt;code&gt;tic&lt;/code&gt; and &lt;code&gt;toc&lt;/code&gt; functions report the actual wall clock time that elapsed between the calls. This may include time spent processing other jobs or doing nothing at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc8c708b3ae3f4c2b2ee9366537576430c69fc28" translate="yes" xml:space="preserve">
          <source>If you are new to Octave, we recommend that you try these examples to begin learning Octave by using it. Lines marked like so, &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d487c30846b2cb6ef27493ad9f9cff24f9f0fa9b" translate="yes" xml:space="preserve">
          <source>If you are not sure whether you have found a bug, here are some guidelines:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce6bd5df5c3ddf429d78dc599deb390d4c707e71" translate="yes" xml:space="preserve">
          <source>If you are only interested in getting a literal string value, you can call &lt;code&gt;input&lt;/code&gt; with the character string &lt;code&gt;&quot;s&quot;&lt;/code&gt; as the second argument. This tells Octave to return the string entered by the user directly, without evaluating it first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b81ee9484bb8f0da52106172dfc457e423a08d6" translate="yes" xml:space="preserve">
          <source>If you are using &lt;code&gt;eval&lt;/code&gt; merely as an exception handling mechanism, and not because you need to execute some arbitrary text, use the &lt;code&gt;try&lt;/code&gt; statement instead. See &lt;a href=&quot;the-try-statement#The-try-Statement&quot;&gt;The try Statement&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23b97f40ec2207a15b63261d75470bc74db38f7f" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t follow these guidelines, your information might still be useful, but using it will take extra work. Maintaining Octave is a lot of work in the best of circumstances, and we can&amp;rsquo;t keep up unless you do your best to help.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cb3e07e68e43fe7cdca0bda4c82fe1f44bd9ebc" translate="yes" xml:space="preserve">
          <source>If you encounter errors like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15c0bf37c472b6714ed5979234819006d8b7cf41" translate="yes" xml:space="preserve">
          <source>If you encounter errors while compiling Octave, first see &lt;a href=&quot;installation-problems#Installation-Problems&quot;&gt;Installation Problems&lt;/a&gt; for a list of known problems and if there is a workaround or solution for your problem. If not, see &lt;a href=&quot;trouble#Trouble&quot;&gt;Trouble&lt;/a&gt; for information about how to report bugs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c83a744aa1ef52bf86a67ac1f4dae38adbc1ed6" translate="yes" xml:space="preserve">
          <source>If you get into trouble, you can usually interrupt Octave by typing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72a8d1763f7abb92b22e4424137c00cafec8b945" translate="yes" xml:space="preserve">
          <source>If you have GNU diff, use &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4b243f87e29acdd5b4584b57a3f6020bc1f259f" translate="yes" xml:space="preserve">
          <source>If you know that the solutions to your equations will always be non-negative, it may help to set this parameter to a nonzero value. However, it is probably best to try leaving this option set to zero first, and only setting it to a nonzero value if that doesn&amp;rsquo;t work very well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a1179d455b08d9b73851996d8958e287eee1dda" translate="yes" xml:space="preserve">
          <source>If you know that your own function files will not change while you are running Octave, you can improve performance by calling &lt;code&gt;ignore_function_time_stamp (&quot;all&quot;)&lt;/code&gt;, so that Octave will ignore the time stamps for all function files. Passing &lt;code&gt;&quot;system&quot;&lt;/code&gt; to this function resets the default behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="773e06c5d71bd61af5bb91daebb02dda4d3b9645" translate="yes" xml:space="preserve">
          <source>If you make two changes for separate reasons, then we might not want to install them both. We might want to install just one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ebaf462f2ba288f59ad4e1233a44f1081fa7278" translate="yes" xml:space="preserve">
          <source>If you need more detailed control, see &lt;a href=&quot;graphics-data-structures#Graphics-Data-Structures&quot;&gt;Graphics Data Structures&lt;/a&gt; and &lt;a href=&quot;advanced-plotting#Advanced-Plotting&quot;&gt;Advanced Plotting&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b19817bba0d43cf4088a4a796a1e69b546c34d9" translate="yes" xml:space="preserve">
          <source>If you plan to modify the parser you will also need GNU &lt;code&gt;bison&lt;/code&gt; and &lt;code&gt;flex&lt;/code&gt;. If you modify the documentation, you will need GNU Texinfo.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3251696f963b5c4b0bff3c5795fa3403db135a1" translate="yes" xml:space="preserve">
          <source>If you start Octave in your home directory, commands from the file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e95a884f71280b0f43e4f02547af313bf9d64adb" translate="yes" xml:space="preserve">
          <source>If you think you have found a bug in Octave or in the installation procedure, however, you should submit a complete bug report to the Octave bug tracker at &lt;a href=&quot;https://bugs.octave.org&quot;&gt;https://bugs.octave.org&lt;/a&gt;. But before you submit a bug report, please read &lt;a href=&quot;https://www.octave.org/bugs.html&quot;&gt;https://www.octave.org/bugs.html&lt;/a&gt; to learn how to submit a useful bug report.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7abfea9c6cccfd3ce74397d16cbb290ac84ffe02" translate="yes" xml:space="preserve">
          <source>If you try this, you will see that the value of the result changes dramatically between &lt;var&gt;t&lt;/var&gt; = 0 and 5, and again around &lt;var&gt;t&lt;/var&gt; = 305. A more efficient set of output points might be</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="098bfb215adb07508bf12635e7acfe96b2b16deb" translate="yes" xml:space="preserve">
          <source>If you want to create a struct which contains a cell array as an individual field, you must wrap it in another cell array as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc19241496699086c1cdf929e7aebdbad68d7efb" translate="yes" xml:space="preserve">
          <source>If you want to temporarily disable a test block, put &lt;code&gt;#&lt;/code&gt; in place of the block type. This creates a comment block which is echoed in the log file but not executed. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24aa0dc8e13859884021a5d5bcd6c5c7a469a952" translate="yes" xml:space="preserve">
          <source>If you wish the points that are outside the tessellation to be flagged, then &lt;code&gt;dsearchn&lt;/code&gt; can be used as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69b2becbdf6968d88df5a463ad29a090517efd28" translate="yes" xml:space="preserve">
          <source>If you wish to build Octave without GNU readline installed, you must use the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="247c1dedc5bbc103fbcf5e4d3a0d6912c19a01f5" translate="yes" xml:space="preserve">
          <source>If you wish to check if a variable exists at all, instead of properties its elements may have, consult &lt;a href=&quot;status-of-variables#Status-of-Variables&quot;&gt;Status of Variables&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc39ee97be38e0111bc03570fbad091c41c76924" translate="yes" xml:space="preserve">
          <source>If you wish to refer to a function that users might expect to find in your package but is not there, providing a work around or pointing out that the function is available elsewhere, you can use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fed1ab9496f68ac0502804bcbdfda4bbfacfe4b5" translate="yes" xml:space="preserve">
          <source>If you wish to suggest changes to the Octave source, send them as context diffs. If you even discuss something in the Octave source, refer to it by context, not by line number, because the line numbers in the development sources probably won&amp;rsquo;t match those in your sources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c8e38015b5493fba0be84dabcd0500f95323fcd" translate="yes" xml:space="preserve">
          <source>If you wish to use the &lt;code&gt;end&lt;/code&gt; keyword in subscripted expressions of an object, then there must be an &lt;code&gt;end&lt;/code&gt; method defined. For example, the &lt;code&gt;end&lt;/code&gt; method for the polynomial class might look like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9592c1f70b09988164d97be51b56be13c526cdf" translate="yes" xml:space="preserve">
          <source>If you would like to write bug fixes or improvements for Octave, that is very helpful. When you send your changes, please follow these guidelines to avoid causing extra work for us in studying the patches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78b996541d66ef6c9a6a21de09498e5de337eeb0" translate="yes" xml:space="preserve">
          <source>If you would like your name to appear in the header line for who made the change, send us the header line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14503dc619a82c817fe6376a4747cff7ee2bda76" translate="yes" xml:space="preserve">
          <source>If you write an executable Octave script, &lt;code&gt;argv&lt;/code&gt; will return the list of arguments passed to the script. See &lt;a href=&quot;executable-octave-programs#Executable-Octave-Programs&quot;&gt;Executable Octave Programs&lt;/a&gt;, for an example of how to create an executable Octave script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e01074f3b36de511c7b671c2a718b455fc238580" translate="yes" xml:space="preserve">
          <source>If your application requires a large amount of memory from the beginning, you can also specify the initial amount of memory allocated to the JVM. Adding the following line to the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0be2535b873f82857d666ae855201a629cacdaf7" translate="yes" xml:space="preserve">
          <source>If your system actually does support IEEE arithmetic, you should be able to fix this problem by modifying the function &lt;code&gt;octave_ieee_init&lt;/code&gt; in the file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ecb50aa9fb1ad688a5992a198e5d350a4da881b" translate="yes" xml:space="preserve">
          <source>If your system does not have a way to report CPU time usage, &lt;code&gt;cputime&lt;/code&gt; returns 0 for each of its output values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ee90caee7c07d6b11cdc7f98eaa50acf3575c04" translate="yes" xml:space="preserve">
          <source>If your system does not support IEEE arithmetic but Octave&amp;rsquo;s configure script incorrectly determined that it does, you can work around the problem by editing the file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cc9a772bac1724d1394f150f80f85e0e292abbf" translate="yes" xml:space="preserve">
          <source>Ignore case when matching the pattern to the string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a21344d93a6ebe7aacaf53da51184ce33b10744c" translate="yes" xml:space="preserve">
          <source>Ignoring Arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38b0381739fb0deecc26d8017f7f4b471ae496e2" translate="yes" xml:space="preserve">
          <source>Ill-conditioned matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e18bb0936914a1f7baa963963dcd3545254c6666" translate="yes" xml:space="preserve">
          <source>Image Processing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70dd8abbad607739746fcf17bb0dd857c339c67b" translate="yes" xml:space="preserve">
          <source>Image Properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eedc4f75d0a3e64eefa7b4bd05374e21dc121331" translate="yes" xml:space="preserve">
          <source>Image Width in pixels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0737ffad6130e268a0f55e7841e8e03f4f9a922e" translate="yes" xml:space="preserve">
          <source>Image comment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fd90764d79c65e072fa421bed30b86a49a3d74f" translate="yes" xml:space="preserve">
          <source>Image file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="735fe112afc92cdfad799df9aea4c168a875c53c" translate="yes" xml:space="preserve">
          <source>Image files that are distributed with Octave.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae1166f22aa26916268b0e7fd16a8afd063ec25e" translate="yes" xml:space="preserve">
          <source>Image format (e.g., &lt;code&gt;&quot;jpeg&quot;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff3dd6c7afcbe158b0468d5a6e8bd165cb04723f" translate="yes" xml:space="preserve">
          <source>Image height in pixels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30bd186057f8a353cb4d5eeb2070ac9d226dd5c4" translate="yes" xml:space="preserve">
          <source>Image processing library (&lt;a href=&quot;http://www.graphicsmagick.org&quot;&gt;http://www.graphicsmagick.org&lt;/a&gt;). GraphicsMagick++ is used to provide the &lt;code&gt;imread&lt;/code&gt; and &lt;code&gt;imwrite&lt;/code&gt; functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6440f7112fff54b1cbf176318ed2602f9598cebc" translate="yes" xml:space="preserve">
          <source>Image processing tools. These functions require the X Window System.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f5418da9102c5693aad9d21e0f27946df8447be" translate="yes" xml:space="preserve">
          <source>Image type. Value is &lt;code&gt;&quot;grayscale&quot;&lt;/code&gt;, &lt;code&gt;&quot;indexed&quot;&lt;/code&gt;, &lt;code&gt;&quot;truecolor&quot;&lt;/code&gt;, &lt;code&gt;&quot;CMYK&quot;&lt;/code&gt;, or &lt;code&gt;&quot;undefined&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed6ce473b435881c7082c80a0d76f4575c5215cc" translate="yes" xml:space="preserve">
          <source>ImageDescription</source>
          <target state="translated">ImageDescription</target>
        </trans-unit>
        <trans-unit id="1db2d4e16d01a258e928546ee56a0191085c879e" translate="yes" xml:space="preserve">
          <source>Implementation Details:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="909e7b9e3b01690245cc4529c3a073eea2ed283f" translate="yes" xml:space="preserve">
          <source>Implementation Note: &lt;code&gt;close&lt;/code&gt; operates by making the handle &lt;var&gt;h&lt;/var&gt; the current figure, and then calling the function specified by the &lt;code&gt;&quot;closerequestfcn&quot;&lt;/code&gt; property of the figure. By default, the function &lt;code&gt;closereq&lt;/code&gt; is used. It is possible that the function invoked will delay or abort removing the figure. To remove a figure without executing any callback functions use &lt;code&gt;delete&lt;/code&gt;. When writing a callback function to close a window do not use &lt;code&gt;close&lt;/code&gt; to avoid recursion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="303a442bf2a5a804909d963c347a0f470271f462" translate="yes" xml:space="preserve">
          <source>Implementation Note: &lt;code&gt;ginput&lt;/code&gt; is intenteded for 2-D plots. For 3-D plots see the &lt;var&gt;currentpoint&lt;/var&gt; property of the current axes which can be transformed with knowledge of the current &lt;code&gt;view&lt;/code&gt; into data units.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce262fc9c7e92106a1470d0df6ee9d604511d9b4" translate="yes" xml:space="preserve">
          <source>Implementation Note: &lt;code&gt;randi&lt;/code&gt; relies internally on &lt;code&gt;rand&lt;/code&gt; which uses class &lt;code&gt;&quot;double&quot;&lt;/code&gt; to represent numbers. This limits the maximum integer (&lt;var&gt;imax&lt;/var&gt;) and range (&lt;var&gt;imax&lt;/var&gt; - &lt;var&gt;imin&lt;/var&gt;) to the value returned by the &lt;code&gt;flintmax&lt;/code&gt; function. For IEEE floating point numbers this value is &lt;em&gt;2^{53} - 1&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8439e1cb68b989dee4226e1b4ec1a6a86d547fee" translate="yes" xml:space="preserve">
          <source>Implementation Note: A colorbar is created as an additional axes object with the &lt;code&gt;&quot;tag&quot;&lt;/code&gt; property set to &lt;code&gt;&quot;colorbar&quot;&lt;/code&gt;. The created object has the extra property &lt;code&gt;&quot;location&quot;&lt;/code&gt; which controls the positioning of the colorbar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f235239ac37a9f4df7f881a391c56fbe603efda" translate="yes" xml:space="preserve">
          <source>Implementation Note: Color definitions with RGB-triples are not valid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="118b06847df4e87adcd97d7158907f6dbe56993b" translate="yes" xml:space="preserve">
          <source>Implementation Note: For Octave versions &amp;le; 4.2, &lt;code&gt;quadcc&lt;/code&gt; accepted a single tolerance argument which specified the relative tolerance. For versions 4.4 and 5, &lt;code&gt;quadcc&lt;/code&gt; will issue a warning when called with a single tolerance argument indicating that the meaning of this input has changed from relative tolerance to absolute tolerance. The warning ID for this message is &lt;code&gt;&quot;Octave:quadcc:RelTol-conversion&quot;&lt;/code&gt;. The warning may be disabled with &lt;code&gt;warning (&quot;off&quot;, &quot;Octave:quadcc:RelTol-conversion&quot;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c627e763b597b9f40da472ffd9698a95158f13c" translate="yes" xml:space="preserve">
          <source>Implementation Note: For compatibility with &lt;small&gt;MATLAB&lt;/small&gt;, escape sequences in &lt;var&gt;pat&lt;/var&gt; (e.g., &lt;code&gt;&quot;\n&quot;&lt;/code&gt; =&amp;gt; newline) are expanded even when &lt;var&gt;pat&lt;/var&gt; has been defined with single quotes. To disable expansion use a second backslash before the escape sequence (e.g., &quot;\\n&quot;) or use the &lt;code&gt;regexptranslate&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb733da171cb7a13259b1444879a14fb91d08f67" translate="yes" xml:space="preserve">
          <source>Implementation Note: For compatibility with &lt;small&gt;MATLAB&lt;/small&gt;, escape sequences in &lt;var&gt;template&lt;/var&gt; (e.g., &lt;code&gt;&quot;\n&quot;&lt;/code&gt; =&amp;gt; newline) are processed regardless of whether &lt;var&gt;template&lt;/var&gt; has been defined with single quotes, as long as there are two or more input arguments. To disable escape sequence expansion use a second backslash before the sequence (e.g., &lt;code&gt;&quot;\\n&quot;&lt;/code&gt;) or use the &lt;code&gt;regexptranslate&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b0e299230f177daf8a27deee59ff922df14990d" translate="yes" xml:space="preserve">
          <source>Implementation Note: For compatibility with &lt;small&gt;MATLAB&lt;/small&gt;, escape sequences in the template string (e.g., &lt;code&gt;&quot;\n&quot;&lt;/code&gt; =&amp;gt; newline) are expanded even when the template string is defined with single quotes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d77321cc3eab07d020759da34c3c653744793c9" translate="yes" xml:space="preserve">
          <source>Implementation Note: If &lt;var&gt;script&lt;/var&gt; includes a path component, then &lt;code&gt;run&lt;/code&gt; first changes the working directory to the directory where &lt;var&gt;script&lt;/var&gt; is found. Next, the script is executed. Finally, &lt;code&gt;run&lt;/code&gt; returns to the original working directory unless &lt;var&gt;script&lt;/var&gt; has specifically changed directories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="202bc6c5859637a76bb36326e2191181c8a97445" translate="yes" xml:space="preserve">
          <source>Implementation Note: Strings are first converted to double values before the checks for valid indices are made. Unless a string contains the NULL character &quot;\0&quot;, it will always be a valid index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1825df68ad6e3cb77fbecc7e4564c322b59fc27" translate="yes" xml:space="preserve">
          <source>Implementation Note: The grayscale intensity is calculated as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5fe5297fe400cfce0ede8fd4b3eaf996b960e5e" translate="yes" xml:space="preserve">
          <source>Implementation Note: The input &lt;var&gt;q&lt;/var&gt; must be less than &lt;code&gt;flintmax&lt;/code&gt; (9.0072e+15) in order to factor correctly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baa8a8320e011f79363aa8d7f1869b6e3ebedd1f" translate="yes" xml:space="preserve">
          <source>Implementation Note: The legend label text is either provided in the call to &lt;code&gt;legend&lt;/code&gt; or is taken from the &lt;code&gt;DisplayName&lt;/code&gt; property of the graphics objects. Only data objects, such as line, patch, and surface, have this property whereas axes, figures, etc. do not so they are never present in a legend. If no labels or &lt;code&gt;DisplayName&lt;/code&gt; properties are available, then the label text is simply &lt;code&gt;&quot;data1&quot;&lt;/code&gt;, &lt;code&gt;&quot;data2&quot;&lt;/code&gt;, &amp;hellip;, &lt;code&gt;&quot;dataN&quot;&lt;/code&gt;. No more than 20 data labels will be automatically generated. To label more, call &lt;code&gt;legend&lt;/code&gt; explicitly and provide all labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="226e79efb160feeb6c4c834a4d8976a31368782d" translate="yes" xml:space="preserve">
          <source>Implementation Note: The origin (0, 0) for images is located in the upper left. For ordinary plots, the origin is located in the lower left. Octave handles this inversion by plotting the data normally, and then reversing the direction of the y-axis by setting the &lt;code&gt;ydir&lt;/code&gt; property to &lt;code&gt;&quot;reverse&quot;&lt;/code&gt;. This has implications whenever an image and an ordinary plot need to be overlaid. The recommended solution is to display the image and then plot the reversed ydata using, for example, &lt;code&gt;flipud (ydata)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1f47b5691014c52ab9e7dccb97817c7dc1aa941" translate="yes" xml:space="preserve">
          <source>Implementation Note: The polar axis is drawn using line and text objects encapsulated in an hggroup. The hggroup properties are linked to the original axes object such that altering an appearance property, for example &lt;code&gt;fontname&lt;/code&gt;, will update the polar axis. Two new properties are added to the original axes&amp;ndash;&lt;code&gt;rtick&lt;/code&gt;, &lt;code&gt;ttick&lt;/code&gt;&amp;ndash;which replace &lt;code&gt;xtick&lt;/code&gt;, &lt;code&gt;ytick&lt;/code&gt;. The first is a list of tick locations in the radial (rho) direction; The second is a list of tick locations in the angular (theta) direction specified in degrees, i.e., in the range 0&amp;ndash;359.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="803088a26e51e2955adcacc1324023c70137c420" translate="yes" xml:space="preserve">
          <source>Implementation Note: The search only includes objects with visible handles (HandleVisibility = &lt;code&gt;&quot;on&quot;&lt;/code&gt;). See &lt;a href=&quot;#XREFfindall&quot;&gt;findall&lt;/a&gt;, to search for all objects including hidden ones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="141ccd3faeb739eff96ca31e86e456598dcf2541" translate="yes" xml:space="preserve">
          <source>Implementation Note: There are several ways of converting colors to grayscale intensities. This functions uses the luminance value obtained from &lt;code&gt;rgb2gray&lt;/code&gt; which is &lt;code&gt;I = 0.299*R + 0.587*G + 0.114*B&lt;/code&gt;. Other possibilities include the value component from &lt;code&gt;rgb2hsv&lt;/code&gt; or using a single color channel from &lt;code&gt;ind2rgb&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1cbb8d418def8003a66065b48deb7fee7f3f0e4" translate="yes" xml:space="preserve">
          <source>Import ASCII table using the specified number of header rows and the specified delimiter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93d9d11dc6fd876d71a01fd8571c5aaee0ce4ca3" translate="yes" xml:space="preserve">
          <source>Import data from the file &lt;var&gt;fname&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b2120f0de6f95fb2fa704525bfaa3ab5b9b00d6" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;m&lt;/code&gt;-files a &lt;code&gt;PKG_ADD&lt;/code&gt; directive looks like this</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bbe6d74cc2df94f447683914cc4658153ce3e7c" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;some_class&lt;/code&gt;, the method &lt;code&gt;func&lt;/code&gt; is defined within a &lt;code&gt;methods&lt;/code&gt; block setting the &lt;code&gt;Access&lt;/code&gt; attribute to &lt;var&gt;mode&lt;/var&gt;, which is one of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21cc0e17582609b077ede856f28cbdd297e040d2" translate="yes" xml:space="preserve">
          <source>In Octave custom formats are supported by implementing all callback subfunctions in a function file named &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40da613679b8f1c93a85923b0183cb94da6dfc1e" translate="yes" xml:space="preserve">
          <source>In Octave it is possible to provide limited Java reflection by listing the public fields and methods of a Java object, both static or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36ff03f537742ac776fe5e1c01171a11a3a5da57" translate="yes" xml:space="preserve">
          <source>In Octave the &lt;code&gt;fieldnames&lt;/code&gt; function for structures has been overloaded to return the fields of a Java object. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="244d401970e161be332758ea88cbe2ac7377470f" translate="yes" xml:space="preserve">
          <source>In Octave, a polynomial is represented by its coefficients (arranged in descending order). For example, a vector &lt;var&gt;c&lt;/var&gt; of length &lt;em&gt;N+1&lt;/em&gt; corresponds to the following polynomial of order &lt;var&gt;N&lt;/var&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6834620d5792153fc6620f3d6a92d748257a71b1" translate="yes" xml:space="preserve">
          <source>In Octave, unlike Fortran, function arguments are passed by value, which means that each argument in a function call is evaluated and assigned to a temporary location in memory before being passed to the function. There is currently no way to specify that a function parameter should be passed by reference instead of by value. This means that it is impossible to directly alter the value of a function parameter in the calling function. It can only change the local copy within the function body. For example, the function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="963cc3df1dd84baf3eaaa88c9f6c5a4ee4141db7" translate="yes" xml:space="preserve">
          <source>In a function description, the name of the function being described appears first. It is followed on the same line by a list of parameters. The names used for the parameters are also used in the body of the description.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bd7408149f4b6f2d450c1cafc3c337215a133bd" translate="yes" xml:space="preserve">
          <source>In a single-quoted string there is only one escape sequence: you may insert a single quote character using two single quote characters in succession. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d79a9045e7f64af0936e9bc0a5e3369db1fc3d1" translate="yes" xml:space="preserve">
          <source>In a thermal model, we want to calculate the temperature in Omega and know the boundary temperature (Dirichlet condition) or heat flux (from which we can calculate the Neumann condition by dividing by the thermal conductivity at the boundary). Similarly, in an electrical model, we want to calculate the voltage in Omega and know the boundary voltage (Dirichlet) or current (Neumann condition after diving by the electrical conductivity). In an electrical model, it is common for much of the boundary to be electrically isolated; this is a Neumann boundary condition with the current equal to zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbc5f8cd6dc4dd05c94083d8616e2cd8437602d2" translate="yes" xml:space="preserve">
          <source>In addition all of the standard Octave mapper functions (i.e., basic math functions that take a single argument) such as &lt;em&gt;abs&lt;/em&gt;, etc. can accept sparse matrices. The reader is referred to the documentation supplied with these functions within Octave itself for further details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a182f62668492bf4846688b7037bfa09d492fdd1" translate="yes" xml:space="preserve">
          <source>In addition the format may contain literal character strings; these will be skipped during reading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e203b3cff1195513be987179959b5aa258b19b0" translate="yes" xml:space="preserve">
          <source>In addition the format may contain literal character strings; these will be skipped during reading. If the input string does not match this literal, the processing terminates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9686c0e54ce4c696bc3c8e05581e2f1defc16feb" translate="yes" xml:space="preserve">
          <source>In addition the members of the group can also be linked to other graphics objects through callback functions. For example the baseline of the &lt;code&gt;bar&lt;/code&gt; or &lt;code&gt;stem&lt;/code&gt; functions is a line object, whose length and position are automatically adjusted, based on changes to the corresponding hggroup elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43e161e34cc10d18de1095d75d8f32ba14fe1b30" translate="yes" xml:space="preserve">
          <source>In addition to accepting individual directory arguments, lists of directory names separated by &lt;code&gt;pathsep&lt;/code&gt; are also accepted. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a85925c959da1225104f5b932d4580c9cb058f5d" translate="yes" xml:space="preserve">
          <source>In addition to evaluating the polynomial, the second output represents the prediction interval, &lt;var&gt;y&lt;/var&gt; +/- &lt;var&gt;dy&lt;/var&gt;, which contains at least 50% of the future predictions. To calculate the prediction interval, the structured variable &lt;var&gt;s&lt;/var&gt;, originating from &lt;code&gt;polyfit&lt;/code&gt;, must be supplied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c2c5777ae3552554dd801ec3e795dc736c85a43" translate="yes" xml:space="preserve">
          <source>In addition to knowing the size of a dispersion it is useful to know the shape of the data set. For example, are data points massed to the left or right of the mean? Octave provides several common measures to describe the shape of the data set. Octave can also calculate moments allowing arbitrary shape measures to be developed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d89a43ff37478ffc6e874f8d0e4043e8d55b7d9b" translate="yes" xml:space="preserve">
          <source>In addition to setting &lt;code&gt;nargin&lt;/code&gt; each time a function is called, Octave also automatically initializes &lt;code&gt;nargout&lt;/code&gt; to the number of values that are expected to be returned. This allows you to write functions that behave differently depending on the number of values that the user of the function has requested. The implicit assignment to the built-in variable &lt;code&gt;ans&lt;/code&gt; does not figure in the count of output arguments, so the value of &lt;code&gt;nargout&lt;/code&gt; may be zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2344bfa6bb4ccf00a0fa9c30a47f5f5cdd526550" translate="yes" xml:space="preserve">
          <source>In addition to the keyboard commands for moving through the history list, Octave provides three functions for viewing, editing, and re-running chunks of commands from the history list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="785f267adae30c4271ed57cc0cd99f28823ec75c" translate="yes" xml:space="preserve">
          <source>In addition to the options supported by &lt;code&gt;strread&lt;/code&gt;, this function supports two more:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04d5f7f37134f64cc8cb5750ddb18d6451d1c0bb" translate="yes" xml:space="preserve">
          <source>In addition to unwind_protect, Octave supports another form of exception handling, the &lt;code&gt;try&lt;/code&gt; block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90c0a3b34a6c55a0342f521a0015f0c7d7d8fc78" translate="yes" xml:space="preserve">
          <source>In addition, some function types may return more information in additional fields.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64e4cdd186cedbe62ef109e00265261a9cca1bb6" translate="yes" xml:space="preserve">
          <source>In addition, the following escaped characters have special meaning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45c11b9edc04548a3aa0d6e538adb06045e4ee04" translate="yes" xml:space="preserve">
          <source>In addition, the following functions are also provided:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcbafa7736318fb861b81a25c4c7d80f68797f74" translate="yes" xml:space="preserve">
          <source>In addition, the following keyword value pairs may appear at the end of the argument list:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f100f9cb81fb50bc6555fcfd1f22d497403939ec" translate="yes" xml:space="preserve">
          <source>In addition, the root object contains information about the graphics system as a whole such as the &lt;code&gt;ScreenSize&lt;/code&gt;. Use &lt;code&gt;get&amp;nbsp;(groot)&lt;/code&gt; to find out what information is available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32324121a40e9bb343f1f3574d3bb17690762224" translate="yes" xml:space="preserve">
          <source>In addition, the support functions &lt;code&gt;spline&lt;/code&gt; and &lt;code&gt;lookup&lt;/code&gt; that underlie the &lt;code&gt;interp1&lt;/code&gt; function can be called directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af8a0c08d4a47b3c3acb11897fba69f09ff76311" translate="yes" xml:space="preserve">
          <source>In addition, there are three non-specific parser customization functions. &lt;code&gt;add_input_event_hook&lt;/code&gt; can be used to schedule a user function for periodic evaluation. &lt;code&gt;remove_input_event_hook&lt;/code&gt; will stop a user function from being evaluated periodically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f77916a1edf7d6d6a6ee10f7759ec1db3cb66ca" translate="yes" xml:space="preserve">
          <source>In all cases, typing CTRL-C stops program execution immediately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d949a10577f92877a6250011b8f590db91a1d0c" translate="yes" xml:space="preserve">
          <source>In any case, please report this as a bug since it might be possible to modify Octave&amp;rsquo;s configuration script to automatically determine the proper thing to do.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfa3699f58c603efe27c8c970cd227fa820ebf10" translate="yes" xml:space="preserve">
          <source>In binary mode there is no conversion of newlines from the remote representation to the local representation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b832653648286e2d9a0639a5977d1acc8f1ecbb0" translate="yes" xml:space="preserve">
          <source>In both cases &lt;code&gt;some_octave_command&lt;/code&gt; should be replaced by the command that should be placed in the &lt;code&gt;PKG_ADD&lt;/code&gt; file. &lt;code&gt;PKG_DEL&lt;/code&gt; directives work in the same way, except the &lt;code&gt;PKG_ADD&lt;/code&gt; keyword is replaced with &lt;code&gt;PKG_DEL&lt;/code&gt; and the commands get added to the &lt;code&gt;PKG_DEL&lt;/code&gt; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f7ae3e0caa80fdb336a4d60efcd5dd20a600cb1" translate="yes" xml:space="preserve">
          <source>In case all dimensions are equal, no broadcasting occurs and ordinary element-by-element arithmetic takes place. For arrays of higher dimensions, if the number of dimensions isn&amp;rsquo;t the same, then missing trailing dimensions are treated as 1. When one of the dimensions is 1, the array with that singleton dimension gets copied along that dimension until it matches the dimension of the other array. For example, consider</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15510052af30543da0d56a4082bd9ddf7e3b1543" translate="yes" xml:space="preserve">
          <source>In cases where a loop cannot be avoided, or a number of values must be combined to form a larger matrix, it is generally faster to set the size of the matrix first (pre-allocate storage), and then insert elements using indexing commands. For example, given a matrix &lt;code&gt;a&lt;/code&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2423a36ae00d02b333ea61d9be1d0f1df5805928" translate="yes" xml:space="preserve">
          <source>In contrast to &lt;code&gt;mesh&lt;/code&gt;, which plots a mesh using rectangles, &lt;code&gt;trimesh&lt;/code&gt; plots the mesh using triangles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecc7c1688b156d5cd74ccc58700611a6c5e7ed10" translate="yes" xml:space="preserve">
          <source>In contrast to &lt;code&gt;surf&lt;/code&gt;, which plots a surface mesh using rectangles, &lt;code&gt;trisurf&lt;/code&gt; plots the mesh using triangles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d55f60a29d749426c8b8a61fb2f3dc494769c09a" translate="yes" xml:space="preserve">
          <source>In contrast to old style classes, the &lt;code&gt;properties&lt;/code&gt;-&lt;code&gt;endproperties&lt;/code&gt; block as well as the &lt;code&gt;methods&lt;/code&gt;-&lt;code&gt;endmethods&lt;/code&gt; block can be used to define properties and methods of the class. Because both blocks are empty, they can be omitted in this particular case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2520403eb65dfe1141904541ec62d7377fcf7a34" translate="yes" xml:space="preserve">
          <source>In debugging mode, execute the next &lt;var&gt;n&lt;/var&gt; lines of code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a3fd41a5529fe498ac47e12d9e5cf03c878b0d1" translate="yes" xml:space="preserve">
          <source>In debugging mode, list &lt;var&gt;n&lt;/var&gt; lines of the function being debugged centered around the current line to be executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89290617b68721433e26b7758d6363c868fab5b8" translate="yes" xml:space="preserve">
          <source>In debugging mode, move down the execution stack &lt;var&gt;n&lt;/var&gt; frames.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a26365b5f3b779a5b1f5cda95fc4ab48376236e" translate="yes" xml:space="preserve">
          <source>In debugging mode, move up the execution stack &lt;var&gt;n&lt;/var&gt; frames.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24e9e90413537da4d3aadaa484045340f05d0bbe" translate="yes" xml:space="preserve">
          <source>In debugging mode, report the current file and line number where execution is stopped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="972a3680b7e26de359defc0e0846b37cee4dde6e" translate="yes" xml:space="preserve">
          <source>In decimal notation, the numeric constant may be denoted as decimal fraction or even in scientific (exponential) notation. Note that this is not possible for hexadecimal or binary notation. Again, in the following example all numeric constants represent the same value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="548db5e472e39ee53ef51ca4fd1c40e1824dda84" translate="yes" xml:space="preserve">
          <source>In double-quoted strings, the backslash character is used to introduce &lt;em&gt;escape sequences&lt;/em&gt; that represent other characters. For example, &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0873308864ef65a229ee1d2ba32e79be9afb1d9e" translate="yes" xml:space="preserve">
          <source>In each case it is easy to see what the final string will look like. This method is also the most efficient. When using matrix concatenation the parser immediately begins joining the strings without having to process the overhead of a function call and the input validation of the associated function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e651d26047ba8d65f5cdd8bcde7afa665eeb3ab2" translate="yes" xml:space="preserve">
          <source>In either case, initial values for the given components are input, and initial guesses for the unknown components must also be provided as input. Set this option to 1 to solve the first problem, or 2 to solve the second (the default is 0, so you must provide a set of initial conditions that are consistent).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f4b3bcabb6f9ec4b1d6ac027d6e07ddbb6514ea" translate="yes" xml:space="preserve">
          <source>In expressions like this, the number of values in each part of the expression need not match. For example, the expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9889f85aafab1c7213f9444b3fb3072cc0c686f9" translate="yes" xml:space="preserve">
          <source>In fact, all three eigenvalues are exactly 1 which emphasizes that for numerical performance the &lt;code&gt;eig&lt;/code&gt; function should be used to compute eigenvalues.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="117b6e152e6d6f87c37463f7bb08c2d852c10264" translate="yes" xml:space="preserve">
          <source>In fact, the column index contains one more element than the number of columns, with the first element always being zero. The advantage of this is a simplification in the code, in that there is no special case for the first or last columns. A short example, demonstrating this in C is.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="196307f8789439ecc95d4a25c693a331c686b344" translate="yes" xml:space="preserve">
          <source>In general Octave supports four different kinds of images, grayscale images, RGB images, binary images, and indexed images. A grayscale image is represented with an M-by-N matrix in which each element corresponds to the intensity of a pixel. An RGB image is represented with an M-by-N-by-3 array where each 3-vector corresponds to the red, green, and blue intensities of each pixel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bb07d8de1487b40ac9225cf990ddf657b1a3f4a" translate="yes" xml:space="preserve">
          <source>In general any function or operator used on a sparse matrix will result in a sparse matrix with the same or a larger number of nonzero elements than the original matrix. This is particularly true for the important case of sparse matrix factorizations. The usual way to address this is to reorder the matrix, such that its factorization is sparser than the factorization of the original matrix. That is the factorization of &lt;code&gt;L * U = P * S * Q&lt;/code&gt; has sparser terms &lt;code&gt;L&lt;/code&gt; and &lt;code&gt;U&lt;/code&gt; than the equivalent factorization &lt;code&gt;L * U = S&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="add429a3abd006ee2156abfddbbd79f62d5d2ffb" translate="yes" xml:space="preserve">
          <source>In general it is best to avoid calculating the inverse of a matrix directly. For example, it is both faster and more accurate to solve systems of equations (&lt;var&gt;A&lt;/var&gt;*&lt;em&gt;x&lt;/em&gt; = &lt;em&gt;b&lt;/em&gt;) with &lt;code&gt;&lt;var&gt;y&lt;/var&gt; = &lt;var&gt;A&lt;/var&gt; \ &lt;em&gt;b&lt;/em&gt;&lt;/code&gt;, rather than &lt;code&gt;&lt;var&gt;y&lt;/var&gt; = inv (&lt;var&gt;A&lt;/var&gt;) * &lt;em&gt;b&lt;/em&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="291127a0054b86fe2ce80db4cff57b53de85f2b9" translate="yes" xml:space="preserve">
          <source>In general most integer matrices are created by casting existing matrices to integers. The following example shows how to cast a matrix into 32 bit integers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fca9c71f6e29b95ddfe7fe244f41ed4f3191af7" translate="yes" xml:space="preserve">
          <source>In general nested cell arrays are displayed hierarchically as in the previous example. In some circumstances it makes sense to reference them by their index, and this can be performed by the &lt;code&gt;celldisp&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="119bfbc716ba33164aae53e4534144b3eadac5f7" translate="yes" xml:space="preserve">
          <source>In general the left division operator is more stable and faster than using the &lt;code&gt;spaugment&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f76854f7b28b2463eb8eb295a667e6badc6a30c" translate="yes" xml:space="preserve">
          <source>In general the lower triangular factorization is significantly faster for sparse matrices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbf11b51d0fcf6c34c59a159db15e8b2e3cc59a5" translate="yes" xml:space="preserve">
          <source>In general there are only three points on the circumference of any circum-circle. However, in some cases, and in particular for the case of a regular grid, 4 or more points can be on a single circum-circle. In this case the Delaunay triangulation is not unique.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="138bfba5800d7c6cda951dd6eaa3300e8c1d6b92" translate="yes" xml:space="preserve">
          <source>In general there may be no way of knowing the best distribution of points ahead of time. Or the points may come from an experiment where there is no freedom to select the best distribution. In any case, one must remain aware of this issue when using &lt;code&gt;trapz&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dffaabcf7d222942a470679a2d89f533082f9f08" translate="yes" xml:space="preserve">
          <source>In general, the first argument in a method definition is always the object that it is called from. Class methods can either be called by passing the object as the first argument to that method or by calling the object followed by a dot (&quot;&lt;code&gt;.&lt;/code&gt;&quot;) and the method&amp;rsquo;s name with subsequent arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8283e2d2b0e3ad5d0a6a3e80b86e018c2dfccd1" translate="yes" xml:space="preserve">
          <source>In general, user-defined classes should overload the &lt;code&gt;disp&lt;/code&gt; method to avoid the default output:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7dbf5a05108d044ae63fcd1fda983b7280f62e2" translate="yes" xml:space="preserve">
          <source>In index expressions the keyword &lt;code&gt;end&lt;/code&gt; automatically refers to the last entry for a particular dimension. This magic index can also be used in ranges and typically eliminates the needs to call &lt;code&gt;size&lt;/code&gt; or &lt;code&gt;length&lt;/code&gt; to gather array bounds before indexing. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5887d25cc956d3db003e5390a14d12006ffd4be" translate="yes" xml:space="preserve">
          <source>In its simplest form, the definition of a function named &lt;var&gt;name&lt;/var&gt; looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68647321955f89a6ba82da9c050191c4a8606bf2" translate="yes" xml:space="preserve">
          <source>In many cases one function needs to access one or more helper functions. If the helper function is limited to the scope of a single function, then subfunctions as discussed above might be used. However, if a single helper function is used by more than one function, then this is no longer possible. In this case the helper functions might be placed in a subdirectory, called &quot;private&quot;, of the directory in which the functions needing access to this helper function are found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe8aebde5aae28ef447087c9f992c36de4950076" translate="yes" xml:space="preserve">
          <source>In more detail, an input conversion specification consists of an initial &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9551a5c980428a21443621580dcce1b476b5803c" translate="yes" xml:space="preserve">
          <source>In more detail, output conversion specifications consist of an initial &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70b026bea3b18e803f73e45599cb3cd1129237c7" translate="yes" xml:space="preserve">
          <source>In most cases, the &lt;code&gt;nchoosek&lt;/code&gt; function is faster for small scalar integer arguments. It also warns about loss of precision for big arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="363319d97fddd4554ac83dbfde390625fbf24af0" translate="yes" xml:space="preserve">
          <source>In most cases, the following functions simply decode their arguments and make the corresponding Unix system calls. For a complete example of how they can be used, look at the definition of the function &lt;code&gt;popen2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19a13264ef052fd4fc1c049fa15898d41e751705" translate="yes" xml:space="preserve">
          <source>In most cases, you will also want to get some information back from the functions you define. Here is the syntax for writing a function that returns a single value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e472a6e46779b705dd4cff9d228dcad63bd391d" translate="yes" xml:space="preserve">
          <source>In much the same way a package can be removed from the Octave path by typing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c1eff95acb20c930eda9801a9eb9cc7c053fd6c" translate="yes" xml:space="preserve">
          <source>In order for a bug report to serve its purpose, you must include the information that makes it possible to fix the bug.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30aeb4af3f1b0b0721e4004b9cee8cbaad1a5d19" translate="yes" xml:space="preserve">
          <source>In order to change the contents of the object a &lt;code&gt;subsasgn&lt;/code&gt; method is needed. For example, the following code makes the polynomial field publicly writable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ab5af88f3872b0f31b668293f7fc9533a276e89" translate="yes" xml:space="preserve">
          <source>In order to execute Java code Octave creates a Java Virtual Machine (JVM). By default the version of the JVM is used that was detected during configuration on Unix-like systems or that is pointed to from the registry keys at</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60ff32114a2c77ff44be1d0affa1fe8d410f2380" translate="yes" xml:space="preserve">
          <source>In order to get good help you first need to know the name of the command that you want to use. The name of this function may not always be obvious, but a good place to start is to type &lt;code&gt;help --list&lt;/code&gt;. This will show you all the operators, keywords, built-in functions, and loadable functions available in the current session of Octave. An alternative is to search the documentation using the &lt;code&gt;lookfor&lt;/code&gt; function (described in &lt;a href=&quot;getting-help#Getting-Help&quot;&gt;Getting Help&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63fe6800074be8d7e2c0e642a562474ffb03f3e1" translate="yes" xml:space="preserve">
          <source>In order to motivate this application, we consider the boundary value Laplace equation. This system can model scalar potential fields, such as heat or electrical potential. Given a medium Omega with boundary dOmega. At all points on the dOmega the boundary conditions are known, and we wish to calculate the potential in Omega. Boundary conditions may specify the potential (Dirichlet boundary condition), its normal derivative across the boundary (Neumann boundary condition), or a weighted sum of the potential and its derivative (Cauchy boundary condition).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71d47710c3105debc3c8f52e7dc1f0a129273332" translate="yes" xml:space="preserve">
          <source>In other words, for &lt;var&gt;t&lt;/var&gt; &amp;gt; &lt;var&gt;k&lt;/var&gt;, &lt;code&gt;[1, &lt;var&gt;y&lt;/var&gt;(&lt;var&gt;t&lt;/var&gt;-1), &amp;hellip;, &lt;var&gt;y&lt;/var&gt;(&lt;var&gt;t&lt;/var&gt;-&lt;var&gt;k&lt;/var&gt;)]&lt;/code&gt; is the t-th row of the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0438d072ff863ac57faf7ca26f3f4cc98bf6ab32" translate="yes" xml:space="preserve">
          <source>In other words, it is equivalent to the following code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57c2afee37ae9077207c5de72e1a68a8e39ecbaa" translate="yes" xml:space="preserve">
          <source>In other words, the statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4604d3e4c26b8ac01aa105ff6ab4344d22814f52" translate="yes" xml:space="preserve">
          <source>In programming, a &lt;em&gt;loop&lt;/em&gt; means a part of a program that is (or at least can be) executed two or more times in succession.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c06c7037a0caa7cd63b388b5d86090484b13919" translate="yes" xml:space="preserve">
          <source>In scripts the two different string types can be distinguished if necessary by using &lt;code&gt;is_dq_string&lt;/code&gt; and &lt;code&gt;is_sq_string&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85f7530b695ed5c62bb10f25dd3c5295f3a26a8d" translate="yes" xml:space="preserve">
          <source>In situations where a single polynomial isn&amp;rsquo;t good enough, a solution is to use several polynomials pieced together. The function &lt;code&gt;splinefit&lt;/code&gt; fits a piecewise polynomial (spline) to a set of data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="337dfa5a887e8e472def1508c3a4ca2a39d558d3" translate="yes" xml:space="preserve">
          <source>In some cases, matrix values that are returned by expressions are displayed like this</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="226cb65291b07ca0c99d2d386b60a9e06819ebde" translate="yes" xml:space="preserve">
          <source>In such cases, it is possible suppress errors for specific statements by writing them with an extra set of parentheses. For example, writing the previous example as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce21f586d1f665010168ceaea46535b780ebcb41" translate="yes" xml:space="preserve">
          <source>In summary, most image processing code will follow the structure of this code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43a035d8cb4dcc881871499a93bf1c9b1d3fad11" translate="yes" xml:space="preserve">
          <source>In terms of the Z Transform, &lt;var&gt;y&lt;/var&gt; is the result of passing the discrete-time signal &lt;var&gt;x&lt;/var&gt; through a system characterized by the following rational system function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6abefb0ebc02351d5d08f8505d9c39811bfa807" translate="yes" xml:space="preserve">
          <source>In the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbb04efc026d389e45bb1d5cff0c1e14d5a55903" translate="yes" xml:space="preserve">
          <source>In the Octave language, a comment starts with either the sharp sign character, &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5703e9bab7533d3a7c9333a0bf5c12b9474f468d" translate="yes" xml:space="preserve">
          <source>In the Octave language, most statements end with a newline character and you must tell Octave to ignore the newline character in order to continue a statement from one line to the next. Lines that end with the characters &lt;code&gt;...&lt;/code&gt; are joined with the following line before they are divided into tokens by Octave&amp;rsquo;s parser. For example, the lines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0fed091f2d4ffe00c21969771eb72d2428f3173" translate="yes" xml:space="preserve">
          <source>In the above case, the multi-dimensional matrix &lt;var&gt;c&lt;/var&gt; is reshaped to a two-dimensional matrix as &lt;code&gt;reshape (c, rows (c), prod (size (c)(2:end)))&lt;/code&gt; and then the same behavior as a loop over a two-dimensional matrix is produced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d6e71a578832d2ac9f270d962451b148f8b0a25" translate="yes" xml:space="preserve">
          <source>In the array mask case, both &lt;var&gt;tval&lt;/var&gt; and &lt;var&gt;fval&lt;/var&gt; must be either scalars or arrays with dimensions equal to &lt;var&gt;mask&lt;/var&gt;. The result is constructed as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bb8edb2a7db30bbcb708fb3c707327782ed95ba" translate="yes" xml:space="preserve">
          <source>In the case of an asymmetric matrix, the appropriate sparsity preserving permutation is &lt;em&gt;colamd&lt;/em&gt; and the factorization using this reordering can be visualized using the command &lt;code&gt;q = colamd (A); [l, u, p] = lu (A(:,q)); spy (l+u)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a04c413c2088df8ecf3c674bb305bef628cfc0f3" translate="yes" xml:space="preserve">
          <source>In the case of an error, the string &lt;var&gt;msg&lt;/var&gt; will return the text of the error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="347dae530f110203be4d82754669e735bb095d15" translate="yes" xml:space="preserve">
          <source>In the case of mixed type indexed assignments, the type is not changed. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca15f3231f206ff6494e1dbe89241c8b699f4ea4" translate="yes" xml:space="preserve">
          <source>In the case where &lt;var&gt;x&lt;/var&gt; is a square matrix, the polynomial given by &lt;var&gt;c&lt;/var&gt; is still well-defined. As when &lt;var&gt;x&lt;/var&gt; is a scalar the obvious implementation is easily expressed in Octave, but also in this case more elegant algorithms perform better. The &lt;code&gt;polyvalm&lt;/code&gt; function provides such an algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ea0f149665b670ba23297b7870ef9f8709fa3e4" translate="yes" xml:space="preserve">
          <source>In the descriptions of the following functions, &lt;var&gt;z&lt;/var&gt; is the complex number &lt;var&gt;x&lt;/var&gt; + &lt;var&gt;i&lt;/var&gt;&lt;var&gt;y&lt;/var&gt;, where &lt;var&gt;i&lt;/var&gt; is defined as &lt;code&gt;sqrt (-1)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11947900e8e351231349859f6e48062eaeb9fab9" translate="yes" xml:space="preserve">
          <source>In the descriptions of the following functions, this data structure is referred to as a &lt;var&gt;grp_struct&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfb43776f2335fe426a14360b7422d39dd636905" translate="yes" xml:space="preserve">
          <source>In the descriptions of the following functions, this data structure is referred to as a &lt;var&gt;pw_struct&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4439f688e2c4919a169a170a437102ffc9c8d6f" translate="yes" xml:space="preserve">
          <source>In the descriptions of the following functions, this structure is referred to as a &lt;var&gt;tm_struct&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79e15fe1454e1b2cff5f15773ba5948c603e79db" translate="yes" xml:space="preserve">
          <source>In the example above, the first line indicates that a variable named &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ce989efdfd5df8e7594500fe43c38c514f7372a" translate="yes" xml:space="preserve">
          <source>In the examples in this manual, results from expressions that you evaluate are indicated with &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee5a1bf15ba07b40baf02c4f839a538ce3cce544" translate="yes" xml:space="preserve">
          <source>In the first assignment, the right-hand side is &lt;code&gt;[]&lt;/code&gt; which is a special null value. As long as the index &lt;var&gt;I&lt;/var&gt; is not empty, this code should delete elements from &lt;var&gt;A&lt;/var&gt; rather than perform assignment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d15952ac26887ee4c0e44e0a8d38bfd8f0e3862a" translate="yes" xml:space="preserve">
          <source>In the first form, program execution is suspended until the graphics object &lt;var&gt;h&lt;/var&gt; is destroyed. If the graphics handle is invalid or if &lt;var&gt;h&lt;/var&gt; is the root figure handle and no property &lt;var&gt;prop&lt;/var&gt; was provided, the function returns immediately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ead297caf361b33c15ec7bdb29b32c28ca9cab6" translate="yes" xml:space="preserve">
          <source>In the first form, read from &lt;var&gt;fid&lt;/var&gt; according to &lt;var&gt;template&lt;/var&gt;, returning the result in the matrix &lt;var&gt;val&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de5d0fa1fcdf3e05f7ec6cebd7136ce4ad8af1ed" translate="yes" xml:space="preserve">
          <source>In the first form, return an error if the number of arguments is not between &lt;var&gt;minargs&lt;/var&gt; and &lt;var&gt;maxargs&lt;/var&gt;. Otherwise, do nothing. Note that this function evaluates the value of &lt;code&gt;nargout&lt;/code&gt; on the caller so its value must have not been tampered with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5539311e03e7236f27edb235b9c771095e58c77d" translate="yes" xml:space="preserve">
          <source>In the first form, the word consists of the longest run consisting of only characters between the brackets. Ranges of characters can be specified by a hyphen; for example, %[0-9a-zA-Z] matches all alphanumeric characters (if the underlying character set is ASCII). Since &lt;small&gt;MATLAB&lt;/small&gt; treats hyphens literally, this expansion only applies to alphanumeric characters. To include &amp;rsquo;-&amp;rsquo; in the set, it should appear first or last in the brackets; to include &amp;rsquo;]&amp;rsquo;, it should be the first character. If the first character is &amp;rsquo;^&amp;rsquo; then the word consists of characters &lt;strong&gt;not&lt;/strong&gt; listed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b6e65864a987073d9a0578a7b07727dc271679b" translate="yes" xml:space="preserve">
          <source>In the following documentation, default values are enclosed in { }.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f9cbe1be1c11faf09af0689e8cbb71790a7c790" translate="yes" xml:space="preserve">
          <source>In the following example, if the first condition is true (that is, the value of &lt;code&gt;x&lt;/code&gt; is divisible by 2), then the first &lt;code&gt;printf&lt;/code&gt; statement is executed. If it is false, then the second condition is tested, and if it is true (that is, the value of &lt;code&gt;x&lt;/code&gt; is divisible by 3), then the second &lt;code&gt;printf&lt;/code&gt; statement is executed. Otherwise, the third &lt;code&gt;printf&lt;/code&gt; statement is performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="467479998ee4f90fea3c9361ae2e8bb22fbb66ba" translate="yes" xml:space="preserve">
          <source>In the following example, the variables &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; refer to the very same object of class &lt;code&gt;handle_class&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9179e002650dab186f6f921ce4a68a092eaf6df1" translate="yes" xml:space="preserve">
          <source>In the following, &lt;var&gt;file&lt;/var&gt; refers to a filename and &lt;code&gt;fid&lt;/code&gt; refers to an integer file number, as returned by &lt;code&gt;fopen&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b1119ee143b6ffd5b232c9e303f7bfb1e8c5732" translate="yes" xml:space="preserve">
          <source>In the formal argument list, it is possible to use the dummy placeholder &lt;code&gt;~&lt;/code&gt; instead of a name. This indicates that the corresponding argument value should be ignored and not stored to any variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fbba66befd556a2fd3f4cabfd63742dc45c70b8" translate="yes" xml:space="preserve">
          <source>In the function body the input arguments can be accessed through the variable &lt;code&gt;varargin&lt;/code&gt;. This variable is a cell array containing all the input arguments. See &lt;a href=&quot;cell-arrays#Cell-Arrays&quot;&gt;Cell Arrays&lt;/a&gt;, for details on working with cell arrays. The &lt;code&gt;smallest&lt;/code&gt; function can now be defined like this</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0309d1a2b28aca483feab26146f90d603178c8c" translate="yes" xml:space="preserve">
          <source>In the low-level calling form (50% higher performance) where the data is specified by name (&lt;code&gt;line (&quot;xdata&quot;, &lt;var&gt;x&lt;/var&gt;, &amp;hellip;)&lt;/code&gt;) the data must be vectors. If no data is specified (&lt;code&gt;line ()&lt;/code&gt;) then &lt;code&gt;&lt;var&gt;x&lt;/var&gt;&amp;nbsp;==&amp;nbsp;&lt;var&gt;y&lt;/var&gt;&amp;nbsp;=&amp;nbsp;[0,&amp;nbsp;1]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80749d9fedc2c7c1c3c963a1eed5c583eec3613f" translate="yes" xml:space="preserve">
          <source>In the result, element with certain indices is equal to the corresponding element of &lt;var&gt;x&lt;/var&gt; if the indices are within the bounds of &lt;var&gt;x&lt;/var&gt;; otherwise, the element is set to zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a4dce901c9d7a3a218ffdf8751a70b42f83cf01" translate="yes" xml:space="preserve">
          <source>In the second assignment, the right-hand side is empty (because &lt;var&gt;X&lt;/var&gt; is &lt;code&gt;[]&lt;/code&gt;), but it is &lt;strong&gt;not&lt;/strong&gt; null. This code should assign the empty value to elements in &lt;var&gt;A&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f720ed751e1f909ed0920b50771ab2bcc4b0166d" translate="yes" xml:space="preserve">
          <source>In the second form of the call, available options are specified directly with their default values given as name-value pairs. If &lt;var&gt;params&lt;/var&gt; do not form name-value pairs, or if an option occurs that does not match any of the available options, an error occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3a3a9775766161b181d42885b570d36ef1aacf2" translate="yes" xml:space="preserve">
          <source>In the second form, execution is suspended until the graphics object is destroyed or the property named &lt;var&gt;prop&lt;/var&gt; is modified. If the graphics handle is invalid or the property does not exist, the function returns immediately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1702c91d247ee8ef591654b2ecef8777d34bfa2f" translate="yes" xml:space="preserve">
          <source>In the second form, read from &lt;var&gt;fid&lt;/var&gt; according to &lt;var&gt;template&lt;/var&gt;, with each conversion specifier in &lt;var&gt;template&lt;/var&gt; corresponding to a single scalar return value. This form is more &amp;ldquo;C-like&amp;rdquo;, and also compatible with previous versions of Octave. The number of successful conversions is returned in &lt;var&gt;count&lt;/var&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="411076e71647e42d7604581c5b6166e293a6d889" translate="yes" xml:space="preserve">
          <source>In the second usage,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f51b73b87e36a197023eba1410ae1ac574725e7" translate="yes" xml:space="preserve">
          <source>In the simplest case, 1) all components are scalars, and 2) the dimensionality of the index expression &lt;em&gt;M&lt;/em&gt; is equal to the dimensionality of the object it is applied to. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8ab1510cdffa9a202236beb73b48b840fa708e0" translate="yes" xml:space="preserve">
          <source>In the standard calling form the data &lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;, and &lt;var&gt;z&lt;/var&gt; may be scalars, vectors, or matrices. In the case of matrix inputs, &lt;code&gt;line&lt;/code&gt; will attempt to orient scalars and vectors so the results can be plotted. This requires that one of the dimensions of the vector match either the number of rows or the number of columns of the matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="642fc1d67b605fc31882810c4f69d7a3d94391aa" translate="yes" xml:space="preserve">
          <source>In the third form, execution is suspended until the graphics object is destroyed or the property named &lt;var&gt;prop&lt;/var&gt; is set to &lt;var&gt;value&lt;/var&gt;. The function &lt;code&gt;isequal&lt;/code&gt; is used to compare property values. If the graphics handle is invalid, the property does not exist or the property is already set to &lt;var&gt;value&lt;/var&gt;, the function returns immediately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a789caf834a5e48707dc583669ea2f8cea23fa40" translate="yes" xml:space="preserve">
          <source>In this Section the graphics object properties are discussed in detail, starting with the root figure properties and continuing through the objects hierarchy. The documentation about a specific graphics object can be displayed using &lt;code&gt;doc&lt;/code&gt; function, e.g., &lt;code&gt;doc (&quot;axes properties&quot;)&lt;/code&gt; will show &lt;a href=&quot;axes-properties#Axes-Properties&quot;&gt;Axes Properties&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97b437774f0d27f58d9812db1fca7ce9c1a5b8be" translate="yes" xml:space="preserve">
          <source>In this case a range of algorithms to perform the transform is considered and the best is selected based on their execution time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9ca5e233702b9f026930971b65eb5e9035587e0" translate="yes" xml:space="preserve">
          <source>In this case only version 1.0.0 of the &lt;code&gt;image&lt;/code&gt; package is installed. The &lt;code&gt;'*'&lt;/code&gt; character next to the package name shows that the image package is loaded and ready for use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f98883311f42d6a3ac4702316fe843d31b634129" translate="yes" xml:space="preserve">
          <source>In this case the &lt;var&gt;state&lt;/var&gt; argument may only be &lt;code&gt;&quot;on&quot;&lt;/code&gt; or &lt;code&gt;&quot;off&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6596939ba486b2eee735f35294b91d9bd4ba5f3a" translate="yes" xml:space="preserve">
          <source>In this case the variable &lt;code&gt;i&lt;/code&gt; takes on the value of the columns of the matrix or cell matrix. So the first loop iterates twice, producing two column vectors &lt;code&gt;[1;2]&lt;/code&gt;, followed by &lt;code&gt;[3;4]&lt;/code&gt;, and likewise for the loop over the cell array. This can be extended to loops over multi-dimensional arrays. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94bdb27518366c8ecf41a14aa393a994688a7b0b" translate="yes" xml:space="preserve">
          <source>In this case, &lt;code&gt;&lt;var&gt;x&lt;/var&gt; = &lt;var&gt;A&lt;/var&gt; \ &lt;var&gt;b&lt;/var&gt;&lt;/code&gt; finds a particular solution &lt;var&gt;x&lt;/var&gt;. The general solution is &lt;var&gt;x&lt;/var&gt; plus the null space of matrix &lt;var&gt;A&lt;/var&gt;. The function &lt;code&gt;null&lt;/code&gt; may be used to compute a basis of the null space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b92e0a6abf074fa15d25641aebc263a0c6e0234c" translate="yes" xml:space="preserve">
          <source>In this case, Octave itself will worry about reference counting and variable scope and will properly free memory without programmer intervention.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="711b51c020cc7113789cad7120112467a906c687" translate="yes" xml:space="preserve">
          <source>In this case, the function that will be executed within Octave will be given by the mex-file, while the help string will come from the m-file. This can also be useful to allow a sample implementation of the mex-file within the Octave language itself for testing purposes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7d4e642f316a4a24742227ad7bd9fe89c252b14" translate="yes" xml:space="preserve">
          <source>In this case, the number of columns of &lt;var&gt;values&lt;/var&gt; must match the number of elements in &lt;var&gt;properties&lt;/var&gt;. The first column of &lt;var&gt;values&lt;/var&gt; contains values for the first entry in &lt;var&gt;properties&lt;/var&gt;, etc. The number of rows of &lt;var&gt;values&lt;/var&gt; must be 1 or match the number of elements of &lt;var&gt;h&lt;/var&gt;. In the first case, each handle in &lt;var&gt;h&lt;/var&gt; will be assigned the same values. In the latter case, the first handle in &lt;var&gt;h&lt;/var&gt; will be assigned the values from the first row of &lt;var&gt;values&lt;/var&gt; and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2dff70503fbf7f20603b229f7b1f3f27a388993" translate="yes" xml:space="preserve">
          <source>In this case, the test will run and any failure will be reported. However, testing is not aborted and subsequent test blocks will be processed normally. Another use of &lt;code&gt;xtest&lt;/code&gt; is for statistical tests which should pass most of the time but are known to fail occasionally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee35fb26254a3ca84ec9d88d29ed877e1bcf5a83" translate="yes" xml:space="preserve">
          <source>In this example &lt;code&gt;S&lt;/code&gt; contains the smoothed image, and &lt;code&gt;Dx&lt;/code&gt; and &lt;code&gt;Dy&lt;/code&gt; contains the partial spatial derivatives of the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e52a3097c2d91f5be0cc16cd2f271a436fdfaa19" translate="yes" xml:space="preserve">
          <source>In this example both &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; would be 1. One way to write the &lt;code&gt;smallest&lt;/code&gt; function is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0de615d44f976a94b7ba04ca367be7bc866e6289" translate="yes" xml:space="preserve">
          <source>In this example, if the expression &lt;code&gt;rem (x, 2) == 0&lt;/code&gt; is true (that is, the value of &lt;code&gt;x&lt;/code&gt; is divisible by 2), then the first &lt;code&gt;printf&lt;/code&gt; statement is evaluated, otherwise the second &lt;code&gt;printf&lt;/code&gt; statement is evaluated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d0c9fd4333bb6ada103ca1dfe6f07c5edfd5adc" translate="yes" xml:space="preserve">
          <source>In this example, the number of linearly independent rows is only 2 because the final row is a linear combination of the first two rows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ef298b3f67967705be05b6013baf296bb8b538d" translate="yes" xml:space="preserve">
          <source>In this form of the &lt;code&gt;for&lt;/code&gt; statement, the value of &lt;var&gt;expression&lt;/var&gt; must be a structure. If it is, &lt;var&gt;key&lt;/var&gt; and &lt;var&gt;val&lt;/var&gt; are set to the name of the element and the corresponding value in turn, until there are no more elements. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1588fc5c3080e50762516405c025eb89897a4fd" translate="yes" xml:space="preserve">
          <source>In this particular case, the two values could have been returned as elements of a single array, but that is not always possible or convenient. The values to be returned may not have compatible dimensions, and it is often desirable to give the individual return values distinct names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23b88d0a71c00972dd44eb1ffc9580d7d5212805" translate="yes" xml:space="preserve">
          <source>Include all the comments that are appropriate to help people reading the source in the future understand why this change was needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65d1601192045675af06555968ff92c97a186805" translate="yes" xml:space="preserve">
          <source>Include files distributed with Octave.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54610970dfb3d89af93803ad964913e5f4fb6e26" translate="yes" xml:space="preserve">
          <source>Included by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c06aefbbf64fb9782c07b6b102c18d7b24821686" translate="yes" xml:space="preserve">
          <source>Included for compatibility. Not used. (default 0)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3186596b007a7daca098a6465feedde9aa0ca8c" translate="yes" xml:space="preserve">
          <source>Included for compatibility. Not used. (default 0.5)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9069c57e04c66fc8cae28500e5ee49ec09a71cb9" translate="yes" xml:space="preserve">
          <source>Included for compatibility. Not used. (default 1)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0545f83f954f9921f48f5b371dffcda74604fd2c" translate="yes" xml:space="preserve">
          <source>Included for compatibility. Not used. (default 3)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fdd8ece850ef78dc6e4491ed7385b240b5edbc6" translate="yes" xml:space="preserve">
          <source>Including File Content</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12fd56448d7c1e964a7c22b6c373d7d644758b66" translate="yes" xml:space="preserve">
          <source>Including Graphics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e057f434b62e3f0ae1cd4de1459f7b88e6eaffca" translate="yes" xml:space="preserve">
          <source>Including URLs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72834e4e17ec6f14ec77899d6b1a7d183966951a" translate="yes" xml:space="preserve">
          <source>Incomplete Cholesky factorization with no fill-in (IC(0)).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f7ce096c9c40086903b2d2496bd4b411cb1edc7" translate="yes" xml:space="preserve">
          <source>Incomplete Cholesky factorization with threshold dropping (ICT).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a580e36ac71f53635997066b118c42f5bf57f05c" translate="yes" xml:space="preserve">
          <source>Increasing the Reliability of Adaptive Quadrature Using Explicit Interpolants</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="881291c106b69c3b1dfc507a02de30e69a2d1e11" translate="yes" xml:space="preserve">
          <source>Increment Operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4061ca27e7a24fb698de78907ad04fa27d3b727d" translate="yes" xml:space="preserve">
          <source>Increment Ops</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f755e41ce627af0222ceee4e0d6d2f3858e3aab" translate="yes" xml:space="preserve">
          <source>Index Entry</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71c97279cf83fc58467572ececa55bdae6e798a5" translate="yes" xml:space="preserve">
          <source>Index Expressions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63ac1b4d37f88c9257b699b22921543205cf4e8b" translate="yes" xml:space="preserve">
          <source>Index manipulation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c05e82732b4cfa9f6913e4ff6abd0b1afc55905a" translate="yes" xml:space="preserve">
          <source>Indexed Assignment Optimization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f9a774d181dff5ea0cefb880b084cde4c56dfcc" translate="yes" xml:space="preserve">
          <source>Indexed assignment with such a null value on the right-hand side should delete array elements. This function is used in place of &lt;code&gt;isempty&lt;/code&gt; when overloading the indexed assignment method (&lt;code&gt;subsasgn&lt;/code&gt;) for user-defined classes. &lt;code&gt;isnull&lt;/code&gt; is used to distinguish between these two cases:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d12d6ee0a5533fb0912c4566b13b5aeff1469a2c" translate="yes" xml:space="preserve">
          <source>Indexing Cell Arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="604a7a773690164fab1cc0640a7cbfac5c506a30" translate="yes" xml:space="preserve">
          <source>Indexing Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="800849664812edde30d8b9dbd1b419cf5a1f634d" translate="yes" xml:space="preserve">
          <source>Indicates a call to a function that is not defined. The function may exist but Octave is unable to find it in the search path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ba231095a613a8cf86cc4ace6f851ac90c2674b" translate="yes" xml:space="preserve">
          <source>Indicates that a data-type was indexed incorrectly, e.g., real-value index for arrays, nonexistent field of a structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c15b8950a910b2e14797141ae5d92b18c66e715" translate="yes" xml:space="preserve">
          <source>Indicates that a function was called in an incorrect way, e.g., wrong number of input arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65391eca3cb6873179afed70381b5ef62271a43f" translate="yes" xml:space="preserve">
          <source>Indicates that a function was called with invalid input arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="175a598c93f1a66174c35970a8c5333e074c7636" translate="yes" xml:space="preserve">
          <source>Indicates that memory couldn&amp;rsquo;t be allocated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba9d914b46ae6d112883ad497a8ef32d87a65bcd" translate="yes" xml:space="preserve">
          <source>Indicates the error was generated by an operation that cannot be executed in the scope from which it was called. For example, the function &lt;code&gt;print_usage ()&lt;/code&gt; when called from the Octave prompt raises this error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45f418781f5ba14f3a84c3bb99a59f3448d5dfb7" translate="yes" xml:space="preserve">
          <source>Indices may be scalars, vectors, ranges, or the special operator &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb59924857768a48ed57e9e3929ae4cb63db282e" translate="yes" xml:space="preserve">
          <source>Indices of elements of the state vector to be passed to the output monitoring function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4185066794bf9deaa0564a765b5ee26984a17847" translate="yes" xml:space="preserve">
          <source>Indices of the frames in &lt;var&gt;mov&lt;/var&gt; that will be displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9e30e2654f1a72ed14621e6d809e8e98d718c9b" translate="yes" xml:space="preserve">
          <source>Individual elements of the structure array can be returned by indexing the variable like &lt;code&gt;&lt;var&gt;x&lt;/var&gt;(1)&lt;/code&gt;, which returns a structure with two fields:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1d71ca242908209d7ea479076e7d5102e909486" translate="yes" xml:space="preserve">
          <source>Inf</source>
          <target state="translated">Inf</target>
        </trans-unit>
        <trans-unit id="3061eeadc501b7f962c60e5adb721dc1c457ce3c" translate="yes" xml:space="preserve">
          <source>Inf (&amp;hellip;, class)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b08bf59bb870a4a83bb31693e361bdf9a978d09c" translate="yes" xml:space="preserve">
          <source>Inf (n)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64843c19f5c18011ef099ce9ba235cf203c2836d" translate="yes" xml:space="preserve">
          <source>Inf (n, m)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aef6028292980955c227bd74c8e4490d52f415a8" translate="yes" xml:space="preserve">
          <source>Inf (n, m, k, &amp;hellip;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4dad01495f7a80fb891c30240cd48ae45c8ebcc" translate="yes" xml:space="preserve">
          <source>Infinity is produced when results are too large to be represented using the IEEE floating point format for numbers. Two common examples which produce infinity are division by zero and overflow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b8096ac64af2ebe915cbe27765cd05e48a1b647" translate="yes" xml:space="preserve">
          <source>Infinity norm, the largest row sum of the absolute values of &lt;var&gt;A&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="083278e880dfe3fac60de06e4a641721df8655e3" translate="yes" xml:space="preserve">
          <source>Info files describing Octave.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eb5ed506e4923c28d7f4a8aa69efe99b3ad75d1" translate="yes" xml:space="preserve">
          <source>Information</source>
          <target state="translated">Information</target>
        </trans-unit>
        <trans-unit id="a3aae5282cec49a94bfc0fa0cf74a8d3329ae326" translate="yes" xml:space="preserve">
          <source>Information about a function or variable such as its location in the file system can also be acquired from within Octave. This is usually only useful during development of programs, and not within a program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f69b87a9fc684b624743d91a629a012e098bf2f" translate="yes" xml:space="preserve">
          <source>Information structure returned from &lt;code&gt;stat&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdaddb9ce367c2ca746a97cc24d2e8817a51f27d" translate="yes" xml:space="preserve">
          <source>Inheritance</source>
          <target state="translated">Inheritance</target>
        </trans-unit>
        <trans-unit id="fd273097ac7c821e482c35d0ac283acd816fe8a3" translate="yes" xml:space="preserve">
          <source>Inheritance and Aggregation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eef8931850e3ffa73ba8dc211cc2308c76931660" translate="yes" xml:space="preserve">
          <source>Initial time step size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f87c93356c7e3527ef6eaef186128958cec43b4b" translate="yes" xml:space="preserve">
          <source>Initialization expression for function argument values. Use &lt;var&gt;k&lt;/var&gt; for the test number and &lt;var&gt;n&lt;/var&gt; for the size of the test. This should compute values for all variables used by &lt;var&gt;f&lt;/var&gt;. Note that &lt;var&gt;init&lt;/var&gt; will be evaluated first for &lt;em&gt;k = 0&lt;/em&gt;, so things which are constant throughout the test series can be computed once. The default value is &lt;code&gt;&lt;var&gt;x&lt;/var&gt; = randn (&lt;var&gt;n&lt;/var&gt;, 1)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aafc0d3ec3a9adf6b409ba51fecde9ee145b6363" translate="yes" xml:space="preserve">
          <source>Initialize a wall-clock timer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a3cc4e5aee9e8da0102c7cf3568bfceea0d4cc9" translate="yes" xml:space="preserve">
          <source>Inline Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b60019f47df04ae92897fa912c6748a6013313fa" translate="yes" xml:space="preserve">
          <source>Inline Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26d8a12b03e81a73e136958e39938541ddcb777a" translate="yes" xml:space="preserve">
          <source>Input Conversion Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b906d134f9587138bd1ced8c1bf3603522007e4" translate="yes" xml:space="preserve">
          <source>Input Parameter Checking in Oct-Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9577c15a328d9dece0ed4eff29cd79ab3bd98953" translate="yes" xml:space="preserve">
          <source>Input and Output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15c36baf16dbdea83c26ebdfbdc7532355f2b3d4" translate="yes" xml:space="preserve">
          <source>Input arguments are specified in form of &lt;var&gt;key&lt;/var&gt;, &lt;var&gt;value&lt;/var&gt; pairs. The &lt;code&gt;&quot;ListString&quot;&lt;/code&gt; argument pair &lt;strong&gt;must&lt;/strong&gt; be specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92141474d4a27359fe08996c20d3bbdc8b52b951" translate="yes" xml:space="preserve">
          <source>Input arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69a1b0b6bab047eea8be25533b3930d55a33a65c" translate="yes" xml:space="preserve">
          <source>Input error, return &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aa91cd73281a13b46a3cc00a4748c45ba203c07" translate="yes" xml:space="preserve">
          <source>Input parameters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb93216448c59d56447272c2a4582870652ab9bb" translate="yes" xml:space="preserve">
          <source>Input that occurs inside parentheses can be continued to the next line without having to use a continuation marker. For example, it is possible to write statements like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aac0a36e6a493b5ef0dea6738a304e844b28d9aa" translate="yes" xml:space="preserve">
          <source>Input-output functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbcf64a3a280c2e26bbf0237d5f1affec0d56857" translate="yes" xml:space="preserve">
          <source>Inputs</source>
          <target state="translated">Inputs</target>
        </trans-unit>
        <trans-unit id="fcadc5a2f2ce33e2ebb11bf51a1dd2322a5a729a" translate="yes" xml:space="preserve">
          <source>Inputs:</source>
          <target state="translated">Inputs:</target>
        </trans-unit>
        <trans-unit id="07f2b92624c2360f9888ededd31161b93f3b6d71" translate="yes" xml:space="preserve">
          <source>Insert a tab character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f495731d67a90ba79d3c0672ad9fb86232c729eb" translate="yes" xml:space="preserve">
          <source>Insert blank lines above and below column number labels and between matrices to produce a more readable output with less data per page. (default).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2e0fa20733984c5cda9b80b4d43835c0d8e44ff" translate="yes" xml:space="preserve">
          <source>Inside double-quoted string constants, the character &lt;code&gt;\&lt;/code&gt; has to be used as continuation marker. The &lt;code&gt;\&lt;/code&gt; must appear at the end of the line just before the newline character:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef538aaaf6ebb60bfaa5b134fe3867a3baa655ad" translate="yes" xml:space="preserve">
          <source>Inside the square brackets that delimit a matrix expression, Octave looks at the surrounding context to determine whether spaces and newline characters should be converted into element and row separators, or simply ignored, so an expression like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a60cbb316565a573f83114fe195b3708a0fa1fc4" translate="yes" xml:space="preserve">
          <source>Install Octave in subdirectories below &lt;var&gt;prefix&lt;/var&gt;. The default value of &lt;var&gt;prefix&lt;/var&gt; is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="987177b6af763309e113b03b94c2798c85d1151b" translate="yes" xml:space="preserve">
          <source>Install a different &lt;small&gt;BLAS&lt;/small&gt; library such as OpenBLAS or ATLAS to correct this issue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2993f0f64c4f878d819ad8a0c2bd40c57f843865" translate="yes" xml:space="preserve">
          <source>Install a package directly from the Octave Forge repository. This requires an internet connection and the cURL library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88fb6bacb4b440ec75a2678adfa7f624dfc56310" translate="yes" xml:space="preserve">
          <source>Install named packages. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="7989d21e50324845d106c157ca9121af45d745e8" translate="yes" xml:space="preserve">
          <source>Installing and Removing Packages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e53df7c1a3f3848605e4165ed851e900f620c3a" translate="yes" xml:space="preserve">
          <source>Instances include matrix indexing, except for extracting a single element or a leading submatrix, indexed assignment, or applying most mapper functions, such as &lt;em&gt;exp&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c957f0cd1ef5c9a10386cd7aeab5c3fdf2e02e16" translate="yes" xml:space="preserve">
          <source>Instead of creating the &lt;code&gt;idx&lt;/code&gt; array it is possible to replace &lt;code&gt;data(idx)&lt;/code&gt; with &lt;code&gt;data(&amp;nbsp;data&amp;nbsp;&amp;lt;=&amp;nbsp;2&amp;nbsp;)&lt;/code&gt; in the above code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fc1f53e13ad5cb1eee3816ef9cf771c9289a5e3" translate="yes" xml:space="preserve">
          <source>Instead of displaying which variables are in memory, it is possible to determine if a given variable is available. That way it is possible to alter the behavior of a program depending on the existence of a variable. The following example illustrates this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f792a4a4e92965a9b0195bafade6716131a7104e" translate="yes" xml:space="preserve">
          <source>Instead of indexed color data &lt;var&gt;c&lt;/var&gt;, &lt;code&gt;isocolors&lt;/code&gt; can also be called with RGB values &lt;var&gt;r&lt;/var&gt;, &lt;var&gt;g&lt;/var&gt;, &lt;var&gt;b&lt;/var&gt;. If input arguments &lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;, &lt;var&gt;z&lt;/var&gt; are not given then &lt;code&gt;meshgrid&lt;/code&gt; computed values are used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="114ea304a5e23aede2cc09adf1f476f75fa1145d" translate="yes" xml:space="preserve">
          <source>Instead of specifying polygons by matrices &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt;, it is possible to present a unique list of vertices and then a list of polygon faces created from those vertices. In this case the &lt;code&gt;&quot;Vertices&quot;&lt;/code&gt; matrix will be an Nx2 (2-D patch) or Nx3 (3-D patch). The MxN &lt;code&gt;&quot;Faces&quot;&lt;/code&gt; matrix describes M polygons having N vertices&amp;mdash;each row describes a single polygon and each column entry is an index into the &lt;code&gt;&quot;Vertices&quot;&lt;/code&gt; matrix to identify a vertex. The patch object can be created by directly passing the property/value pairs &lt;code&gt;&quot;Vertices&quot;&lt;/code&gt;/&lt;var&gt;verts&lt;/var&gt;, &lt;code&gt;&quot;Faces&quot;&lt;/code&gt;/&lt;var&gt;faces&lt;/var&gt; as inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="841612ae6ebae1338593f4dedc72549916310fad" translate="yes" xml:space="preserve">
          <source>Instead of the current context, the script may be executed in either the context of the function that called the present function (&lt;code&gt;&quot;caller&quot;&lt;/code&gt;), or the top-level context (&lt;code&gt;&quot;base&quot;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82b9016a43cfbe3fab36287289c0d43dba0d3e78" translate="yes" xml:space="preserve">
          <source>Instead of using property/value pairs, any property can be set by passing a structure &lt;var&gt;propstruct&lt;/var&gt; with the respective field names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="683987ee4aeb538cfdf37663a8c0ab7ac90a2019" translate="yes" xml:space="preserve">
          <source>Integer Arithmetic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76d810731f55778b9b205c5b368dede7b3459816" translate="yes" xml:space="preserve">
          <source>Integer Conversions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4200062b18d471d8d2fa3abf322674fc3d715dbf" translate="yes" xml:space="preserve">
          <source>Integer Data Types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b4fb6be2361a1ed013cf60a89c0f4ab61cf16ab" translate="yes" xml:space="preserve">
          <source>Integer division with different rounding rules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6da27bbcbaa828c9737a0a1fa1aa5d318810f46" translate="yes" xml:space="preserve">
          <source>Integer parameters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca4cad48895284bc515e4868a02e92d4489bbddf" translate="yes" xml:space="preserve">
          <source>Integer value comprising classes (u)int8, (u)int16, (u)int32, (u)int64.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f17749bbfb4addccc082217b21b0003132c6281a" translate="yes" xml:space="preserve">
          <source>Integers larger than &lt;code&gt;flintmax&lt;/code&gt; may not be displayed correctly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c221ade3db33d04f45cfc13ea2604bcb00899c2e" translate="yes" xml:space="preserve">
          <source>Interacting with Plots</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="515e0bdcedfe6773b7bc4b3192becd51fa704935" translate="yes" xml:space="preserve">
          <source>Interactive desktop is running.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b4edfa194ce7b36cab8c9b2adf1c792e9847730" translate="yes" xml:space="preserve">
          <source>Interactive graphics program (&lt;a href=&quot;http://www.gnuplot.info&quot;&gt;http://www.gnuplot.info&lt;/a&gt;). gnuplot is currently the default graphics renderer for Octave.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50dbe314bb7a33f8d98cc35b0de87160d52e6e4d" translate="yes" xml:space="preserve">
          <source>Interactively explore hierarchical profiler output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6233da5a281da628d55bb5e93ed8a89d1ca19e55" translate="yes" xml:space="preserve">
          <source>Interior point method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45e79aac82cacf1e75c0073084cb8e8311590ff8" translate="yes" xml:space="preserve">
          <source>Internally a package is simply a gzipped tar file that contains a top level directory of any given name. This directory will in the following be referred to as &lt;code&gt;package&lt;/code&gt; and may contain the following files:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f3608b245750c4a5c9120709a49e418ee9c35aa" translate="yes" xml:space="preserve">
          <source>Internally, &lt;code&gt;pi&lt;/code&gt; is computed as &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c319313557b773e9cb17e6a7e0b447aef0539ca" translate="yes" xml:space="preserve">
          <source>Interpolate input data to determine the value of &lt;var&gt;yi&lt;/var&gt; at the points &lt;var&gt;xi&lt;/var&gt;. If not specified, &lt;var&gt;x&lt;/var&gt; is taken to be the indices of &lt;var&gt;y&lt;/var&gt; (&lt;code&gt;1:length (&lt;var&gt;y&lt;/var&gt;)&lt;/code&gt;). If &lt;var&gt;y&lt;/var&gt; is a matrix or an N-dimensional array, the interpolation is performed on each column of &lt;var&gt;y&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b16f9f0d02ec80cfe5cc2d2f44433f95414140cb" translate="yes" xml:space="preserve">
          <source>Interpolate reference data &lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;, &lt;var&gt;z&lt;/var&gt; to determine &lt;var&gt;zi&lt;/var&gt; at the coordinates &lt;var&gt;xi&lt;/var&gt;, &lt;var&gt;yi&lt;/var&gt;. The reference data &lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt; can be matrices, as returned by &lt;code&gt;meshgrid&lt;/code&gt;, in which case the sizes of &lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;, and &lt;var&gt;z&lt;/var&gt; must be equal. If &lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt; are vectors describing a grid then &lt;code&gt;length (&lt;var&gt;x&lt;/var&gt;) == columns (&lt;var&gt;z&lt;/var&gt;)&lt;/code&gt; and &lt;code&gt;length (&lt;var&gt;y&lt;/var&gt;) == rows (&lt;var&gt;z&lt;/var&gt;)&lt;/code&gt;. In either case the input data must be strictly monotonic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d256f32bc31b9e52b4c48a936fc80374fc3b68e" translate="yes" xml:space="preserve">
          <source>Interpolate reference data &lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;, &lt;var&gt;z&lt;/var&gt;, &lt;var&gt;v&lt;/var&gt; to determine &lt;var&gt;vi&lt;/var&gt; at the coordinates &lt;var&gt;xi&lt;/var&gt;, &lt;var&gt;yi&lt;/var&gt;, &lt;var&gt;zi&lt;/var&gt;. The reference data &lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;, &lt;var&gt;z&lt;/var&gt; can be matrices, as returned by &lt;code&gt;meshgrid&lt;/code&gt;, in which case the sizes of &lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;, &lt;var&gt;z&lt;/var&gt;, and &lt;var&gt;v&lt;/var&gt; must be equal. If &lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;, &lt;var&gt;z&lt;/var&gt; are vectors describing a cubic grid then &lt;code&gt;length (&lt;var&gt;x&lt;/var&gt;) == columns (&lt;var&gt;v&lt;/var&gt;)&lt;/code&gt;, &lt;code&gt;length (&lt;var&gt;y&lt;/var&gt;) == rows (&lt;var&gt;v&lt;/var&gt;)&lt;/code&gt;, and &lt;code&gt;length (&lt;var&gt;z&lt;/var&gt;) == size (&lt;var&gt;v&lt;/var&gt;, 3)&lt;/code&gt;. In either case the input data must be strictly monotonic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a9858c9bf3149456595f98943cf88e41039822e" translate="yes" xml:space="preserve">
          <source>Interpolation</source>
          <target state="translated">Interpolation</target>
        </trans-unit>
        <trans-unit id="7140de6620767d35cab46c66723df2d24f63d020" translate="yes" xml:space="preserve">
          <source>Interpolation on Scattered Data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="9ddfc3edc40f8f0a656b6254baa41b6149709cec" translate="yes" xml:space="preserve">
          <source>Introduction to Function and Script Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08a1ad737c7922e15774ea4e1c5871fdcaa9d531" translate="yes" xml:space="preserve">
          <source>Introduction to Graphics Structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86228830623cb00e9c0e9fb3a8beccc5be8da5ff" translate="yes" xml:space="preserve">
          <source>Introduction to Plotting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82e7771ffb7ac801757923626250d1b4c92a16cf" translate="yes" xml:space="preserve">
          <source>Invalid basis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5015425e6fc873c55859830f8c055e7cc97bd14" translate="yes" xml:space="preserve">
          <source>Invalid bounds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a1d7ae050fcf3238e8d5a73afe71b1b2ba076e5" translate="yes" xml:space="preserve">
          <source>Invalid data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99634ed37f8505f136bb95f16db7bf39bc7beabb" translate="yes" xml:space="preserve">
          <source>Invert a symmetric, positive definite square matrix from its Cholesky decomposition, &lt;var&gt;U&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92a8bb99c6acece26dcb71f3aa8260c466cb71e7" translate="yes" xml:space="preserve">
          <source>Invert the colors in the current color scheme.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cd19d8a24e96caba633bd5f04f6ba654bd6c2bb" translate="yes" xml:space="preserve">
          <source>Invoke Perl script &lt;var&gt;scriptfile&lt;/var&gt;, possibly with a list of command line arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0084fc1034ede17895fb74f93212c4df2c6875e7" translate="yes" xml:space="preserve">
          <source>Invoke Python script &lt;var&gt;scriptfile&lt;/var&gt;, possibly with a list of command line arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e5594ae88f3da15da5a9449544a04c37292b68f" translate="yes" xml:space="preserve">
          <source>Invoke the method &lt;var&gt;methodname&lt;/var&gt; on the Java object &lt;var&gt;obj&lt;/var&gt; with the arguments &lt;var&gt;arg1&lt;/var&gt;, &amp;hellip;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39bf0d8828a426e948f5fd29d3afbfe4953d948e" translate="yes" xml:space="preserve">
          <source>Invoking Octave from the Command Line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec72b33ed5d70687b65266f4d53f305aef97cde8" translate="yes" xml:space="preserve">
          <source>Is a square matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e727c64038065312a81610f80c21d8039ed45a32" translate="yes" xml:space="preserve">
          <source>Is the code thoroughly optimized for Octave?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77a7841f20297f312ec7c2a49f2126cc3db30138" translate="yes" xml:space="preserve">
          <source>Is the function called when this menu entry is executed. It can be either a function string (e.g., &lt;code&gt;&quot;myfun&quot;&lt;/code&gt;), a function handle (e.g., @myfun) or a cell array containing the function handle and arguments for the callback function (e.g., {@myfun, arg1, arg2}).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="236a991810407c3af30e61ed19f65cd748b84178" translate="yes" xml:space="preserve">
          <source>Is the type of the factorization and can be one of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43e7548ed1a01cecdf8ba5c26249f5ddfd41f011" translate="yes" xml:space="preserve">
          <source>Issuing Warnings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ed678c231bee222184fff3a08bc3f4e2f5bfb05" translate="yes" xml:space="preserve">
          <source>It can also be helpful to have all output arguments in a single cell in the following manner:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ac9df42f7a0c2795d46b0787bf203f2d6247ddb" translate="yes" xml:space="preserve">
          <source>It can be both necessary and convenient to store several variables of different size or type in one variable. A cell array is a container class able to do just that. In general cell arrays work just like &lt;em&gt;N&lt;/em&gt;-dimensional arrays with the exception of the use of &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dffa5a923011061649cbb456800e0e8aad508c4" translate="yes" xml:space="preserve">
          <source>It can be very convenient store a function in a variable so that it can be passed to a different function. For example, a function that performs numerical minimization needs access to the function that should be minimized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="442cadeed3186dedd021758473ee98fb5ab896b1" translate="yes" xml:space="preserve">
          <source>It is a non-complex matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59bb7a156346e847608ba60d4d9a3596b5dc9592" translate="yes" xml:space="preserve">
          <source>It is a scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f9ab3310a6d3f49c20dc8fb459198b2d32bb375" translate="yes" xml:space="preserve">
          <source>It is also possible to access public fields of Java objects from within Octave using Java syntax, with the limitation of static fields:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe5e48d9378e9fa14044e693f95c955f399d9c75" translate="yes" xml:space="preserve">
          <source>It is also possible to assign an identification string to a warning. If a warning has such an ID the user can enable and disable this warning as will be described in the next section. To assign an ID to a warning, simply call &lt;code&gt;warning&lt;/code&gt; with two string arguments, where the first is the identification string, and the second is the actual warning. Note that warning IDs are in the format &lt;code&gt;&quot;NAMESPACE:WARNING-NAME&quot;&lt;/code&gt;. The namespace &lt;code&gt;&quot;Octave&quot;&lt;/code&gt; is used for Octave&amp;rsquo;s own warnings. Any other string is available as a namespace for user&amp;rsquo;s own warnings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0435cfc38b4687beb6eb9883f949226c69aab15" translate="yes" xml:space="preserve">
          <source>It is also possible to assign an identification string to an error. If an error has such an ID the user can catch this error as will be described in the next section. To assign an ID to an error, simply call &lt;code&gt;error&lt;/code&gt; with two string arguments, where the first is the identification string, and the second is the actual error. Note that error IDs are in the format &lt;code&gt;&quot;NAMESPACE:ERROR-NAME&quot;&lt;/code&gt;. The namespace &lt;code&gt;&quot;Octave&quot;&lt;/code&gt; is used for Octave&amp;rsquo;s own errors. Any other string is available as a namespace for user&amp;rsquo;s own errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26de3b2a26b8342fe6cb4e69a96a2c08f06634e1" translate="yes" xml:space="preserve">
          <source>It is also possible to change the fontname and size within the text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb6a4f1c159e128ef118ee70f18cf986e9dbee74" translate="yes" xml:space="preserve">
          <source>It is also possible to cycle through all the elements of a structure in a loop, using a special form of the &lt;code&gt;for&lt;/code&gt; statement (see &lt;a href=&quot;looping-over-structure-elements#Looping-Over-Structure-Elements&quot;&gt;Looping Over Structure Elements&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2fbec51523b8489b443b5d57b8132bf5d6d8005" translate="yes" xml:space="preserve">
          <source>It is also possible to define new specialized data types by writing a small amount of C++ code. On some systems, new data types can be loaded dynamically while Octave is running, so it is not necessary to recompile all of Octave just to add a new type. See &lt;a href=&quot;external-code-interface#External-Code-Interface&quot;&gt;External Code Interface&lt;/a&gt;, for more information about Octave&amp;rsquo;s dynamic linking capabilities. &lt;a href=&quot;user_002ddefined-data-types#User_002ddefined-Data-Types&quot;&gt;User-defined Data Types&lt;/a&gt; describes what you must do to define a new data type for Octave.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a63551a00035877a36274289d88007f657077a3e" translate="yes" xml:space="preserve">
          <source>It is also possible to enable and disable individual warnings through their string identifications. The following code will issue a warning</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3502a574f1f1f5934b3936191c6cc279a7f30c5c" translate="yes" xml:space="preserve">
          <source>It is also possible to overload built-in or inherited methods, like the &lt;code&gt;disp&lt;/code&gt; function in the example above to tell Octave how objects of &lt;code&gt;some_class&lt;/code&gt; should be displayed (see &lt;a href=&quot;class-methods#Class-Methods&quot;&gt;Class Methods&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d971f23c1e756151e4f27a5f135d29ae884029a6" translate="yes" xml:space="preserve">
          <source>It is also possible to represent &lt;var&gt;A&lt;/var&gt; by a function denoted &lt;var&gt;af&lt;/var&gt;. &lt;var&gt;af&lt;/var&gt; must be followed by a scalar argument &lt;var&gt;n&lt;/var&gt; defining the length of the vector argument accepted by &lt;var&gt;af&lt;/var&gt;. &lt;var&gt;af&lt;/var&gt; can be a function handle, an inline function, or a string. When &lt;var&gt;af&lt;/var&gt; is a string it holds the name of the function to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85633c39b02976d40ae22624a98bb21c5507f4b1" translate="yes" xml:space="preserve">
          <source>It is also possible to use logical values as part of standard numerical calculations. In this case &lt;code&gt;true&lt;/code&gt; is converted to &lt;code&gt;1&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt; to 0, both represented using double precision floating point numbers. So, the result of &lt;code&gt;true*22 - false/6&lt;/code&gt; is &lt;code&gt;22&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23e681cb037bd4026059d02dd45b8dd547ac9200" translate="yes" xml:space="preserve">
          <source>It is an error to remove a nonexistent preference or group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59e44cdc80fe6e2a75ae32f863b213f3c044e1b9" translate="yes" xml:space="preserve">
          <source>It is currently not useful to call &lt;code&gt;scanf&lt;/code&gt; in interactive programs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdcccf923849676b0974b787689e551daf94ce7e" translate="yes" xml:space="preserve">
          <source>It is easy to define a matrix of values in Octave. The size of the matrix is determined automatically, so it is not necessary to explicitly state the dimensions. The expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecffcf6c9a6e60dfccbad835e8d08c01050bfaa0" translate="yes" xml:space="preserve">
          <source>It is good practice at the head of a function to verify that it has been called correctly. In Octave the following idiom is seen frequently</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="540a234a0ec2bb8bd85abe6ef525361958a2f12d" translate="yes" xml:space="preserve">
          <source>It is important to automate the tests as much as possible, however some tests require user interaction. These can be isolated into demo blocks, which if you are in batch mode, are only run when called with &lt;code&gt;demo&lt;/code&gt; or the &lt;code&gt;verbose&lt;/code&gt; option to &lt;code&gt;test&lt;/code&gt;. The code is displayed before it is executed. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b803542835eb4ad9b15d5bfc61116f515c367400" translate="yes" xml:space="preserve">
          <source>It is important to note that a file format is not actually defined by its file extension and that &lt;code&gt;GraphicsMagick&lt;/code&gt; is capable to read and write more file formats than the ones listed by &lt;code&gt;imformats&lt;/code&gt;. What this means is that even with an incorrect or missing extension the image may still be read correctly, and that even unlisted formats are not necessarily unsupported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ce04ece8dabf4a2bf4f85a83b849115dadc2a69" translate="yes" xml:space="preserve">
          <source>It is important to note that the &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt; in &lt;code&gt;foobar&lt;/code&gt; remain zero, as in &lt;code&gt;foo&lt;/code&gt; they are a return value and parameter respectively. The &lt;var&gt;x&lt;/var&gt; in &lt;code&gt;bat&lt;/code&gt; refers to the &lt;var&gt;x&lt;/var&gt; in &lt;code&gt;foo&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67c2ac1277264a7423ad3c6d257c0de94abfe03a" translate="yes" xml:space="preserve">
          <source>It is important to note that variables do &lt;em&gt;not&lt;/em&gt; have permanent types. The type of a variable is simply the type of whatever value it happens to hold at the moment. In the following program fragment, the variable &lt;code&gt;foo&lt;/code&gt; has a numeric value at first, and a string value later on:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e91e2f975b4a1b222cd78f2b1a4535dd28efa2e6" translate="yes" xml:space="preserve">
          <source>It is important to understand the implications that this optimization brings. Since no extra copy of &lt;code&gt;x&lt;/code&gt; will exist in the caller&amp;rsquo;s scope, it is &lt;em&gt;solely&lt;/em&gt; the callee&amp;rsquo;s responsibility to not leave &lt;code&gt;x&lt;/code&gt; in an invalid state if an error occurs during the execution. Also, if the method partially changes &lt;code&gt;x&lt;/code&gt; and then errors out, the changes &lt;em&gt;will&lt;/em&gt; affect &lt;code&gt;x&lt;/code&gt; in the caller&amp;rsquo;s scope. Deleting or completely replacing &lt;code&gt;x&lt;/code&gt; inside subsasgn will not do anything, however, only indexed assignments matter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9b55864b0011f98212749d9ac527909435534fb" translate="yes" xml:space="preserve">
          <source>It is more efficient to use indexing rather than the code construction &lt;code&gt;scalar * ones (M, N, &amp;hellip;)&lt;/code&gt; because it avoids the unnecessary multiplication operation. Moreover, multiplication may not be defined for the object to be replicated whereas indexing an array is always defined. The following code shows how to create a 2x3 cell array from a base unit which is not itself a scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0ad3527ac44549215866d715ee7b39d097faf2c" translate="yes" xml:space="preserve">
          <source>It is much easier to see the error if we rewrite the statements above like this,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f6b300a78cc5952c6768bba2153b3958d75bc2e" translate="yes" xml:space="preserve">
          <source>It is necessary declare a variable as global within a function body in order to access it. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="801ddee654a4f5a60595b8d75b21f32c987f1616" translate="yes" xml:space="preserve">
          <source>It is not a sparse matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="526146d85026fc03d1315f38797e39731b6ab73d" translate="yes" xml:space="preserve">
          <source>It is not empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2d6d72cd91869be693c0b7cb09744dfe1d15585" translate="yes" xml:space="preserve">
          <source>It is not recommended to represent Java&amp;rsquo;s &lt;code&gt;null&lt;/code&gt; value by empty brackets &lt;code&gt;[]&lt;/code&gt;, because &lt;code&gt;null&lt;/code&gt; has no type whereas &lt;code&gt;[]&lt;/code&gt; has type &lt;code&gt;double&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c304a4c82da4a3c1b982a182a0d45fd71d798c42" translate="yes" xml:space="preserve">
          <source>It is not strictly speaking necessary for the user to understand how sparse matrices are stored. However, such an understanding will help to get an understanding of the size of sparse matrices. Understanding the storage technique is also necessary for those users wishing to create their own oct-files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04348c6155f5f8a33984df13f4dbbc5a056adc97" translate="yes" xml:space="preserve">
          <source>It is often necessary to find if two strings or files are identical. This might be done by comparing them character by character and looking for differences. However, this can be slow, and so comparing a hash of the string or file can be a rapid way of finding if the files differ.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aaddc667b95283238f47dc41d259f3a7ae1e314" translate="yes" xml:space="preserve">
          <source>It is often necessary to identify whether a particular point in the N-dimensional space is within the Delaunay tessellation of a set of points in this N-dimensional space, and if so which N-simplex contains the point and which point in the tessellation is closest to the desired point. The functions &lt;code&gt;tsearch&lt;/code&gt; and &lt;code&gt;dsearch&lt;/code&gt; perform this function in a triangulation, and &lt;code&gt;tsearchn&lt;/code&gt; and &lt;code&gt;dsearchn&lt;/code&gt; in an N-dimensional tessellation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f24864a359ac7d98f26d3ca90d7f5983254ff80" translate="yes" xml:space="preserve">
          <source>It is often useful to calculate descriptive statistics over a subsection (i.e., window) of a full dataset. Octave provides the function &lt;code&gt;movfun&lt;/code&gt; which will call an arbitrary function handle with windows of data and accumulate the results. Many of the most commonly desired functions, such as the moving average over a window of data (&lt;code&gt;movmean&lt;/code&gt;), are already provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="188fa50a78938dd69a91532a41a05070a5130f37" translate="yes" xml:space="preserve">
          <source>It is possible to achieve a wide range of output styles by using different values of &lt;code&gt;output_precision&lt;/code&gt;. Reasonable combinations can be set using the &lt;code&gt;format&lt;/code&gt; function. See &lt;a href=&quot;basic-input-and-output#Basic-Input-and-Output&quot;&gt;Basic Input and Output&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cbe064daff614d3025f82f1132e18f254ce15f6" translate="yes" xml:space="preserve">
          <source>It is possible to add or remove directories to or from the load path using &lt;code&gt;addpath&lt;/code&gt; and &lt;code&gt;rmpath&lt;/code&gt;. As an example, the following code adds &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98e341829fcf421014dea3c1e6bf41d80ebb8189" translate="yes" xml:space="preserve">
          <source>It is possible to avoid all warnings about such statements by disabling the &lt;code&gt;Octave:assign-as-truth-value&lt;/code&gt; warning, but that may also let real errors like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f780290d475d08391e464c4cd5cfcc7e795b0c9f" translate="yes" xml:space="preserve">
          <source>It is possible to call other Octave functions from within a mex-file using &lt;code&gt;mexCallMATLAB&lt;/code&gt;. An example of the use of &lt;code&gt;mexCallMATLAB&lt;/code&gt; can be see in the example below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a1e28590ae5b64287aa618a2a89223453ba375f" translate="yes" xml:space="preserve">
          <source>It is possible to change the way Octave manages file formats with the options &lt;code&gt;&quot;add&quot;&lt;/code&gt;, &lt;code&gt;&quot;remove&quot;&lt;/code&gt;, and &lt;code&gt;&quot;update&quot;&lt;/code&gt;, and supplying a structure &lt;var&gt;format&lt;/var&gt; with the required fields. The option &lt;code&gt;&quot;factory&quot;&lt;/code&gt; resets the configuration to the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e3a802de60dce7ac52b8d56bc4643a6b4e70645" translate="yes" xml:space="preserve">
          <source>It is possible to get information about an image file on disk, without actually reading it into Octave. This is done using the &lt;code&gt;imfinfo&lt;/code&gt; function which provides read access to many of the parameters stored in the header of the image file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a75fb5ef416bbc47bc7a67e78c779382bc9066f7" translate="yes" xml:space="preserve">
          <source>It is possible to get the current installation prefix by requesting an output argument. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a731513a1ee5825051c6ebbeb00886920ea3d68" translate="yes" xml:space="preserve">
          <source>It is possible to get the current value of global_list with the following</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26516dbbee86ee4aa501260aa426a66a2b43cc77" translate="yes" xml:space="preserve">
          <source>It is possible to get the current value of local_list with the following</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9a8b0420896d624ffb65d87b22596335ef7d21f" translate="yes" xml:space="preserve">
          <source>It is possible to invoke public member methods on Java objects in Java syntax:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="587cc169ebff0d5635c1b8e2acf7be6d8a2dc0be" translate="yes" xml:space="preserve">
          <source>It is possible to issue warnings from any code using the &lt;code&gt;warning&lt;/code&gt; function. In its most simple form, the &lt;code&gt;warning&lt;/code&gt; function takes a string describing the warning as its input argument. As an example, the following code controls if the variable &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a381bea7bd627e6a360bb3cad09aa216599c12e8" translate="yes" xml:space="preserve">
          <source>It is possible to remove a package from the system using the &lt;code&gt;pkg uninstall&lt;/code&gt; command like this</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afa0034a88d031cdab12ba2d08462408042e4b71" translate="yes" xml:space="preserve">
          <source>It is possible to reorder the decomposition so that the positive eigenvalue is in the upper left corner, by doing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cc46405f59eb7d841a833ad47c2b9cf5ee38563" translate="yes" xml:space="preserve">
          <source>It is possible to represent missing data explicitly in Octave using &lt;code&gt;NA&lt;/code&gt; (short for &amp;ldquo;Not Available&amp;rdquo;). Missing data can only be represented when data is represented as floating point numbers. In this case missing data is represented as a special case of the representation of &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a160b30dcf06c8fda7aee7cb2161dde65eb7e72" translate="yes" xml:space="preserve">
          <source>It is possible to return a variable number of output arguments from a function using a syntax that&amp;rsquo;s similar to the one used with the special &lt;code&gt;varargin&lt;/code&gt; parameter name. To let a function return a variable number of output arguments the special output parameter name &lt;code&gt;varargout&lt;/code&gt; is used. As with &lt;code&gt;varargin&lt;/code&gt;, &lt;code&gt;varargout&lt;/code&gt; is a cell array that will contain the requested output arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2becc65982958f31b08985c16d7171b3e3184369" translate="yes" xml:space="preserve">
          <source>It is possible to save all breakpoints and restore them at once by issuing the commands &lt;code&gt;bp_state = dbstatus; &amp;hellip;; dbstop (bp_state)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4611f992df33b68644265905f12802aba69c468e" translate="yes" xml:space="preserve">
          <source>It is possible to specify that an object&amp;rsquo;s callbacks should not be interrupted by setting the object&amp;rsquo;s &lt;code&gt;interruptible&lt;/code&gt; property to &lt;code&gt;&quot;off&quot;&lt;/code&gt;. In this case, Octave decides what to do based on the &lt;code&gt;busyaction&lt;/code&gt; property of the &lt;strong&gt;interrupting&lt;/strong&gt; callback object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a33fdc5ea3a79c0b83ad6b1eb262a13798c7315f" translate="yes" xml:space="preserve">
          <source>It is possible to use the &lt;code&gt;nthargout&lt;/code&gt; function to obtain only some of the return values or several at once in a cell array. See &lt;a href=&quot;cell-array-objects#Cell-Array-Objects&quot;&gt;Cell Array Objects&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e4cb1b55c0878de8c24c8680c29ed641b0503d1" translate="yes" xml:space="preserve">
          <source>It is possible to write data to a file in a similar way to the &lt;code&gt;disp&lt;/code&gt; function for writing data to the screen. The &lt;code&gt;fdisp&lt;/code&gt; works just like &lt;code&gt;disp&lt;/code&gt; except its first argument is a file pointer as created by &lt;code&gt;fopen&lt;/code&gt;. As an example, the following code writes to data &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dee07363ec67512d97caea59fe084fbeb2aff24b" translate="yes" xml:space="preserve">
          <source>It is possible to write functions that only set some return values. For example, calling the function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f1682d8f39928396b187dbaf883d626ef1ddcab" translate="yes" xml:space="preserve">
          <source>It is quite inefficient to create a vector using a loop like this. In this case, it would have been much more efficient to use the expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9cf2050a51cf23d108221afb27bbc9c0d343967" translate="yes" xml:space="preserve">
          <source>It is sometime desirable to lock a function into memory with the &lt;code&gt;mlock&lt;/code&gt; function. This is typically used for dynamically linked functions in oct-files or mex-files that contain some initialization, and it is desirable that calling &lt;code&gt;clear&lt;/code&gt; does not remove this initialization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0433499c73f41d32a3b3b8d5342d061d2837b20b" translate="yes" xml:space="preserve">
          <source>It is useful for displaying periodic functions. The map is obtained by linearly varying the hue through all possible values while keeping constant maximum saturation and value. The equivalent code is &lt;code&gt;hsv2rgb ([(0:N-1)'/N, ones(N,2)])&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6907f220ebd40ea5fc911110957f3c85432ea6c1" translate="yes" xml:space="preserve">
          <source>It is very common to take different actions depending on the value of one variable. This is possible using the &lt;code&gt;if&lt;/code&gt; statement in the following way</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8189fddee002346d1345e22fd2f6b19799dc0af7" translate="yes" xml:space="preserve">
          <source>It is worth re-iterating that, if only built-in functions are to be called from a C++ standalone program then it does not need to initialize the interpreter. The general rule is that for a built-in function named &lt;code&gt;function_name&lt;/code&gt; in the interpreter, there will be a C++ function named &lt;code&gt;Ffunction_name&lt;/code&gt; (note the prepended capital &lt;code&gt;F&lt;/code&gt;) accessible in the C++ API. The declarations for all built-in functions are collected in the header file &lt;code&gt;builtin-defun-decls.h&lt;/code&gt;. This feature should be used with care as the list of built-in functions can change. No guarantees can be made that a function that is currently a built-in won&amp;rsquo;t be implemented as a .m file or as a dynamically linked function in the future. An example of how to call built-in functions from C++ can be seen in the code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97786bf1156caf091b459afd7d4ee517ae1dd7e3" translate="yes" xml:space="preserve">
          <source>It outputs an indexed image &lt;var&gt;x&lt;/var&gt; and a colormap &lt;var&gt;map&lt;/var&gt; to interpret an image exactly the same as the input. No dithering or other form of color quantization is performed. The output class of the indexed image &lt;var&gt;x&lt;/var&gt; can be uint8, uint16 or double, whichever is required to specify the number of unique colors in the image (which will be equal to the number of rows in &lt;var&gt;map&lt;/var&gt;) in order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd0e0766e8ea169f51bd5b670cab6b828cd5ef2e" translate="yes" xml:space="preserve">
          <source>It should be noted that &lt;code&gt;ones (1, n)&lt;/code&gt; (a row vector of ones) results in a range object (with zero increment). A range is stored internally as a starting value, increment, end value, and total number of values; hence, it is more efficient for storage than a vector or matrix of ones whenever the number of elements is greater than 4. In particular, when &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d8f9c312d847d5b9f3f42f2e3bc6261b85f9cd6" translate="yes" xml:space="preserve">
          <source>It should be noted that &lt;small&gt;MATLAB&lt;/small&gt; uses different definitions which apparently do not distinguish -0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2b2514475518a90b907f559cb78d0c328f02b79" translate="yes" xml:space="preserve">
          <source>It should be noted that all values passed to the bit manipulation functions of Octave are treated as integers. Therefore, even though the example for &lt;code&gt;bitset&lt;/code&gt; above passes the floating point value &lt;code&gt;10&lt;/code&gt;, it is treated as the bits &lt;code&gt;[1, 0, 1, 0]&lt;/code&gt; rather than the bits of the native floating point format representation of &lt;code&gt;10&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a57832782e814bf89e88ffc8515a92cf1c83f45" translate="yes" xml:space="preserve">
          <source>It should be noted that the mex-file contains no help string. To document mex-files, there should exist an m-file in the same directory as the mex-file itself. Taking the above as an example, there would need to be a file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="501d2c49c6248e4cabc5706abac880c84dd8ec9d" translate="yes" xml:space="preserve">
          <source>It should be noted that the number of points determines the quality of the approximation. If the integration needs to be performed between &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt;, instead of 0 and 1, then a change of variables is needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdac1197569db0b5b7c92fe04f15a2cdaefbdcef" translate="yes" xml:space="preserve">
          <source>It should be noted that the statistics functions don&amp;rsquo;t test for data containing NaN, NA, or Inf. These values need to be detected and dealt with explicitly. See &lt;a href=&quot;finding-elements-and-checking-conditions#XREFisnan&quot;&gt;isnan&lt;/a&gt;, &lt;a href=&quot;missing-data#XREFisna&quot;&gt;isna&lt;/a&gt;, &lt;a href=&quot;finding-elements-and-checking-conditions#XREFisinf&quot;&gt;isinf&lt;/a&gt;, &lt;a href=&quot;finding-elements-and-checking-conditions#XREFisfinite&quot;&gt;isfinite&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47eee20a4048d044576294c6c4af9aca5a353cdd" translate="yes" xml:space="preserve">
          <source>It should be noted that the test for whether a matrix is a candidate for Cholesky factorization, performed above, and by the &lt;code&gt;matrix_type&lt;/code&gt; function, does not make certain that the matrix is Hermitian. However, the attempt to factorize the matrix will quickly detect a non-Hermitian matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbc776594f21bc0018d1b3dca60708db762804d2" translate="yes" xml:space="preserve">
          <source>It should be noted, that due to the way that the Octave assignment functions are written that the assignment will reallocate the memory used by the sparse matrix at each iteration of the above loop. Therefore the &lt;em&gt;spalloc&lt;/em&gt; function ignores the &lt;var&gt;nz&lt;/var&gt; argument and does not pre-assign the memory for the matrix. Therefore, it is vitally important that code using to above structure should be vectorized as much as possible to minimize the number of assignments and reduce the number of memory allocations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2d6873909e7db5ab13bfd0e2173c8830c445d3d" translate="yes" xml:space="preserve">
          <source>It will take time to learn Octave&amp;rsquo;s interface for external code and there will inevitably be issues with tools such as compilers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17dc8aaa3ef6a669d182fcea57b63457024207c1" translate="yes" xml:space="preserve">
          <source>It would be much better to use &lt;code&gt;prod (1:n)&lt;/code&gt;, or &lt;code&gt;gamma (n+1)&lt;/code&gt; instead, after first checking to ensure that the value &lt;code&gt;n&lt;/code&gt; is actually a positive integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d4bb709bc89a683ed7f19ffc33601ad2c84854f" translate="yes" xml:space="preserve">
          <source>Italic font</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2818325a37d4282c94e21a91f2d7b36786af3e7f" translate="yes" xml:space="preserve">
          <source>Iteration limit (either &lt;code&gt;MaxIter&lt;/code&gt; or &lt;code&gt;MaxFunEvals&lt;/code&gt;) exceeded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10aee0d73a473ebbdd3f771e0c394b0944dd3eb9" translate="yes" xml:space="preserve">
          <source>Iteration limit exceeded&amp;mdash;either maximum number of algorithm iterations &lt;code&gt;MaxIter&lt;/code&gt; or maximum number of function evaluations &lt;code&gt;MaxFunEvals&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cbd40ef9ada118f75c9389b9b0eeeedcbdff506" translate="yes" xml:space="preserve">
          <source>Iterations limit exhausted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a404fa80a86fec2abfe5da6d968eda0723bd966" translate="yes" xml:space="preserve">
          <source>Iterative Methods for Linear and Nonlinear Equations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="029e8581922a3ab38668a2bc85b9dfba1866e4da" translate="yes" xml:space="preserve">
          <source>Iterative Methods for Sparse Linear Systems</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1868e0dfe8f34027a357afdc2ce5a9d730fc2c9d" translate="yes" xml:space="preserve">
          <source>Iterative Solution of Large Sparse Systems of Equations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fc14c8d2f6874ad77aca3be527e5c7954146bfb" translate="yes" xml:space="preserve">
          <source>Iterative Techniques</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ae26d9dc773f98d7f469a50dcbcc86b07a7adde" translate="yes" xml:space="preserve">
          <source>Iterative Techniques Applied to Sparse Matrices</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab29fdc21b447233d29d94f34606379199a34f8c" translate="yes" xml:space="preserve">
          <source>Iterative techniques:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d420cfc61361a3f5f3df6a2c1985ea75ab70422" translate="yes" xml:space="preserve">
          <source>Its size has length equal to the values of the next in &lt;var&gt;attributes&lt;/var&gt;. The next value must is an array with the length for each dimension. To ignore the check for a certain dimension, the value of &lt;code&gt;NaN&lt;/code&gt; can be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ab8c21b7fa633f90478f744ebb5e51317a27b92" translate="yes" xml:space="preserve">
          <source>Its value may be one of &lt;code&gt;&quot;centimeters&quot;&lt;/code&gt; | &lt;code&gt;&quot;characters&quot;&lt;/code&gt; | &lt;code&gt;&quot;inches&quot;&lt;/code&gt; | &lt;code&gt;&quot;{normalized}&quot;&lt;/code&gt; | &lt;code&gt;&quot;pixels&quot;&lt;/code&gt; | &lt;code&gt;&quot;points&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58668e7669fd564d99db5d581fcdb6a5618440b5" translate="yes" xml:space="preserve">
          <source>J</source>
          <target state="translated">J</target>
        </trans-unit>
        <trans-unit id="54a53f193f369a345a75c9cdf669f4899bfc3704" translate="yes" xml:space="preserve">
          <source>J = besselj (alpha, x)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad24de198dbddac8dfacfca5242da694158e6e0f" translate="yes" xml:space="preserve">
          <source>J = besselj (alpha, x, opt)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b7feeec478e4706bd2bc45542f94e2b0a5eb73d" translate="yes" xml:space="preserve">
          <source>JIT Compiler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df134372d2a1a97c43ea25da5ebaeacc1ea67ea8" translate="yes" xml:space="preserve">
          <source>JPEG Image</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6876b7ffd1cc0a31f5401f27d6bbc78ee4191a46" translate="yes" xml:space="preserve">
          <source>JPEG image</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8d75c42e35e518b4da3d6a025db4ef9bfe6202f" translate="yes" xml:space="preserve">
          <source>JPEG/MIFF/PNG compression level. Value is an integer in the range [0 100].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44d9ab80f02c9ef3726b26c3ccb97d35aad0a281" translate="yes" xml:space="preserve">
          <source>Jacobian</source>
          <target state="translated">Jacobian</target>
        </trans-unit>
        <trans-unit id="b71df2ac565275f195e74f3c6d0166f28e9560c4" translate="yes" xml:space="preserve">
          <source>Jacobian matrix, specified as a constant matrix or a function of time and state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="276bbd673319b8da1c62a0b5bc42a2ddcf6f5f5f" translate="yes" xml:space="preserve">
          <source>Java Development Kit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49104a70b212d8061a12425d9455215d30d2fd8b" translate="yes" xml:space="preserve">
          <source>Java Interface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8492290179530bec758b5fbef3094e48a8a35f1c" translate="yes" xml:space="preserve">
          <source>Java Interface Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e8344d046492ebfed5d94dfd1b9d1af1baf4765" translate="yes" xml:space="preserve">
          <source>Java Virtual Machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccd8a87d9506ef33b74c0ee015e1265b426159fc" translate="yes" xml:space="preserve">
          <source>Java finds classes by searching a &lt;var&gt;classpath&lt;/var&gt; which is a list of Java archive files and/or directories containing class files. In Octave the &lt;var&gt;classpath&lt;/var&gt; is composed of two parts:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c82e0980f1c5a68ace2533373172cd47a3a24f22" translate="yes" xml:space="preserve">
          <source>Java programming language compiler and libraries. The OpenJDK free software implementation is recommended (&lt;a href=&quot;http://openjdk.java.net/&quot;&gt;http://openjdk.java.net/&lt;/a&gt;), although other JDK implementations may work. Java is required to be able to call Java functions from within Octave.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f170b5fc3fb22363bbf624604eca6c80587383c7" translate="yes" xml:space="preserve">
          <source>Javascript-based drawing on an HTML5 canvas viewable in a web browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d649f36220db65d7994d32922dff21b6e0790b59" translate="yes" xml:space="preserve">
          <source>Join the elements of the cell string array, &lt;var&gt;cstr&lt;/var&gt;, into a single string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c2839c644c3fadb37538bacc7c271c2c29d92e6" translate="yes" xml:space="preserve">
          <source>Joins any number of path components intelligently. The return value is the concatenation of each component with exactly one file separator between each non empty part and at most one leading and/or trailing file separator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97334835cf3bd4ff49ed61b961b56ec9717c5314" translate="yes" xml:space="preserve">
          <source>Jump to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="312693745269a039b47fc6e71591980dede04cfa" translate="yes" xml:space="preserve">
          <source>Just as for numerical arrays, it is possible to use vectors as indices (see &lt;a href=&quot;index-expressions#Index-Expressions&quot;&gt;Index Expressions&lt;/a&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="750ef682e8526c26ef4561f690889ac6b3c39c0e" translate="yes" xml:space="preserve">
          <source>Just like numerical arrays, cell arrays can be multi-dimensional. The &lt;code&gt;cell&lt;/code&gt; function accepts any number of positive integers to describe the size of the returned cell array. It is also possible to set the size of the cell array through a vector of positive integers. In the following example two cell arrays of equal size are created, and the size of the first one is displayed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b47bbf381595d68ae499a342afa5b8e80af5970c" translate="yes" xml:space="preserve">
          <source>Just-In-Time Compiler for loops</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7ee38bb7be4fc44198cb2685d9601dcf2b9f569" translate="yes" xml:space="preserve">
          <source>K</source>
          <target state="translated">K</target>
        </trans-unit>
        <trans-unit id="57689c620ffa83c8c2a534d93e670d9a87902165" translate="yes" xml:space="preserve">
          <source>K = besselk (alpha, x)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dbca16e1f930c6fe67a473d14c8cb0887fba1df" translate="yes" xml:space="preserve">
          <source>K = besselk (alpha, x, opt)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9c17233a58fe8bc7d7a4be8d18ae702a42aed87" translate="yes" xml:space="preserve">
          <source>Keep in mind that the purpose of a bug report is to enable someone to fix the bug if it is not known. Always write your bug reports on the assumption that the bug is not known.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="057f5863b6a5e1daf5d379b714b799b838327941" translate="yes" xml:space="preserve">
          <source>Key press events: &lt;code&gt;evt&lt;/code&gt; is a structure with fields &lt;code&gt;Key&lt;/code&gt; (string), &lt;code&gt;Character&lt;/code&gt; (string), and &lt;code&gt;Modifier&lt;/code&gt; (cell array of strings).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f530db58b3e5088dc7412c6d2298ba3f8456bdeb" translate="yes" xml:space="preserve">
          <source>Keywords</source>
          <target state="translated">Keywords</target>
        </trans-unit>
        <trans-unit id="bb3e53dde1051fa68b5f3059706baa347a65cb3b" translate="yes" xml:space="preserve">
          <source>Kill from the cursor to the end of the current word, or if between words, to the end of the next word.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="311a4cde3db454c3849e6ee13e45582356a552a1" translate="yes" xml:space="preserve">
          <source>Kill from the cursor to the previous whitespace. This is different than</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd0b1d2577b52f29b4880fc67c15fb2fbe8fa80c" translate="yes" xml:space="preserve">
          <source>Kill from the cursor to the start of the previous word, or if between words, to the start of the previous word.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6ffad75f2cec42a116c1a0e5d568a0039830396" translate="yes" xml:space="preserve">
          <source>Kill the text from the current cursor position to the end of the line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a07775adc8882c71528193fd44d0c2fe8fad4361" translate="yes" xml:space="preserve">
          <source>Killing and Yanking</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8adf8aee8da794b048790c9b3a2cef027fa664f5" translate="yes" xml:space="preserve">
          <source>Known &lt;small&gt;MATLAB&lt;/small&gt; incompatibilities:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ad1e1963d1eeaff6171a90eab990d5450c9d160" translate="yes" xml:space="preserve">
          <source>Known &lt;small&gt;MATLAB&lt;/small&gt; incompatibility: If tolerances are left unspecified, and any integration limits are of type &lt;code&gt;single&lt;/code&gt;, then Octave&amp;rsquo;s integral functions automatically reduce the default absolute and relative error tolerances as specified above. If tighter tolerances are desired they must be specified. &lt;small&gt;MATLAB&lt;/small&gt; leaves the tighter tolerances appropriate for &lt;code&gt;double&lt;/code&gt; inputs in place regardless of the class of the integration limits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d160e0986aca4714714a16f29ec605af90be704d" translate="yes" xml:space="preserve">
          <source>L</source>
          <target state="translated">L</target>
        </trans-unit>
        <trans-unit id="15bdb17cd8576bde365eefd0b126244078186b26" translate="yes" xml:space="preserve">
          <source>L = del2 (M)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="907f98b81a37777dce2e2af5fec9db4b232f9a77" translate="yes" xml:space="preserve">
          <source>L = del2 (M, dx, dy, &amp;hellip;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b42396e10d4cd7349b5f17127136074fa0dfb04d" translate="yes" xml:space="preserve">
          <source>L = del2 (M, h)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcdef24a41b55b36260a718ebe36cf419b4d8b1f" translate="yes" xml:space="preserve">
          <source>L = ichol (A)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="992315675dab406248a40c07c3e0e6dc07927b00" translate="yes" xml:space="preserve">
          <source>L = ichol (A, opts)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86cd089e40d0c606f2f0046e0b6420e629e115b6" translate="yes" xml:space="preserve">
          <source>L. Montanet, et al.,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf9e7dcbce935737e3132c8567095e62b32e357d" translate="yes" xml:space="preserve">
          <source>LAPACK</source>
          <target state="translated">LAPACK</target>
        </trans-unit>
        <trans-unit id="a60df4da6c9746262f598bbd8376da4500fb47e1" translate="yes" xml:space="preserve">
          <source>LFD</source>
          <target state="translated">LFD</target>
        </trans-unit>
        <trans-unit id="a230d4a66845b14c7d2a6ab825e82549a7f4cacc" translate="yes" xml:space="preserve">
          <source>LLVM</source>
          <target state="translated">LLVM</target>
        </trans-unit>
        <trans-unit id="6c62fb7313eb9d28efbca3e61ff13801b5b45a0a" translate="yes" xml:space="preserve">
          <source>LT</source>
          <target state="translated">LT</target>
        </trans-unit>
        <trans-unit id="db6d3a7d1de58d0e5681b2ec5404bb0734a30b3b" translate="yes" xml:space="preserve">
          <source>LaTeX Markup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a62d1b77798556d0ab1261eb31bd174c1cb067c" translate="yes" xml:space="preserve">
          <source>LaTeX picture environment and extended picture environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="587b9347d2622a69e7c01940cb47ce5636a95ca5" translate="yes" xml:space="preserve">
          <source>Labels of x tick marks. Setting &lt;code&gt;xticklabel&lt;/code&gt; also forces the &lt;code&gt;xticklabelmode&lt;/code&gt; property to be set to &lt;code&gt;&quot;manual&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9f71215c27ab812c79ca46a24de90d704ce1d2f" translate="yes" xml:space="preserve">
          <source>Labels of y tick marks. Setting &lt;code&gt;yticklabel&lt;/code&gt; also forces the &lt;code&gt;yticklabelmode&lt;/code&gt; property to be set to &lt;code&gt;&quot;manual&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ac84f1d027997165e58cc346c81efa56aa31f75" translate="yes" xml:space="preserve">
          <source>Labels of z tick marks. Setting &lt;code&gt;zticklabel&lt;/code&gt; also forces the &lt;code&gt;zticklabelmode&lt;/code&gt; property to be set to &lt;code&gt;&quot;manual&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f2c50daecde30b40e5f26dd88e01bd7c4656b28" translate="yes" xml:space="preserve">
          <source>Largest Algebraic (valid only for real symmetric problems).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4576dbf10320933cba3352caa2b8938c216425b9" translate="yes" xml:space="preserve">
          <source>Largest Imaginary part (valid only for complex or unsymmetric problems).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bd096ec65cf389b55313c44574fd4a4837da83c" translate="yes" xml:space="preserve">
          <source>Largest Magnitude (default).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e9eace53eca8a79f2f66f9a3663049865c53ef3" translate="yes" xml:space="preserve">
          <source>Largest Real part (valid only for complex or unsymmetric problems).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb967472dd6ecb5171638fd33e391e9a748cbdec" translate="yes" xml:space="preserve">
          <source>Largest singular value of &lt;var&gt;A&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c0181b5412cccc52e1df28e49a5a652dda444f8" translate="yes" xml:space="preserve">
          <source>Last fractional variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e88e0b124bb30b81a2b9941bd353f54e925d0351" translate="yes" xml:space="preserve">
          <source>Last relative change in function value was less than &lt;code&gt;TolFun&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="170022d1815546c7ac385d0c063f2f9de3c5756b" translate="yes" xml:space="preserve">
          <source>Last relative decrease in residual was less than &lt;code&gt;TolFun&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c8df2e00a2456ffb151e69b88ebb5e6205b3e8b" translate="yes" xml:space="preserve">
          <source>Last relative step size was less than &lt;code&gt;TolX&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8541d11b47f3f4a46d776cd488514b6636d46d44" translate="yes" xml:space="preserve">
          <source>Last two digits of year (00-99).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba3ec335171242203551fa118476e51f704af516" translate="yes" xml:space="preserve">
          <source>Lazy copying applies to whole Octave objects such as matrices, cells, struct, and also individual cell or struct elements (not array elements).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56a4be1595f58ac75c5fbbdb289963c484b1a642" translate="yes" xml:space="preserve">
          <source>Leading delimiters are ignored. If &lt;var&gt;delim&lt;/var&gt; is not specified, whitespace is assumed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="759892c76f51dcbe9fa69042e3c6abea0f331e04" translate="yes" xml:space="preserve">
          <source>Leave command-line debugging mode and continue code execution normally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d47af1b3fb067e0f579c59dc23a58df336c8fdb" translate="yes" xml:space="preserve">
          <source>Leaving Debug Mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93f128b07389dda53d61ac4d707ac819ef7babcf" translate="yes" xml:space="preserve">
          <source>Left alignment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd24cc4dec471fdcd13d2657906d0fa67c962a68" translate="yes" xml:space="preserve">
          <source>Left center of the screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6278d6c93e2ecce333624436f60f10abd1425157" translate="yes" xml:space="preserve">
          <source>Left division. This is conceptually equivalent to the expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5ed16bca4920ace31f862f7ac42bd6b86f740ef" translate="yes" xml:space="preserve">
          <source>Left-justify the result in the field (instead of the normal right-justification).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6786f7c0719723c4e8a35593d9ed8a0c7268b868" translate="yes" xml:space="preserve">
          <source>Left-justify the result in the field. Normally the result is right-justified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50796993bd8cbc0462858d934d817e906f6ca7ba" translate="yes" xml:space="preserve">
          <source>Left. For numeric lookups the leftmost subinterval shall be extended to minus infinity (i.e., all indices at least 1).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55e38c3052eebb9948a706802b690ceaf1df26ab" translate="yes" xml:space="preserve">
          <source>Legend entries may be specified as individual character string arguments, a character array, or a cell array of character strings. When label names might be confused with options to &lt;code&gt;legend&lt;/code&gt;, the labels should be protected by specifying them as a cell array of strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e0d3ca79381f710352325e10f143a8112e3b5f5" translate="yes" xml:space="preserve">
          <source>Legend labels are associated with the axes&amp;rsquo; children; The first label is assigned to the first object that was plotted in the axes, the second label to the next object plotted, etc. To label specific data objects, without labeling all objects, provide their graphic handles in the input &lt;var&gt;hobjs&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d3d412a0852cc56c28ad0c2a1153229aa365b43" translate="yes" xml:space="preserve">
          <source>Less than</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33331a5bba7154831ad991e3d73f2368d8a52f4d" translate="yes" xml:space="preserve">
          <source>Less than or equal to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b67e2c9559015be4656b3fda9025464f1acfc5f" translate="yes" xml:space="preserve">
          <source>Less than or equal to zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="603482da370f6f4e8cab51db743a45b2aaaba552" translate="yes" xml:space="preserve">
          <source>Less than zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bad3044fe47bef85e9119c1aa82f8a35292076ec" translate="yes" xml:space="preserve">
          <source>Let us consider a trivial problem with a diagonal matrix (we exploit the sparsity of A)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1607a278a25b2ece5bb25a2ecebbe81c8c6149c" translate="yes" xml:space="preserve">
          <source>Let us consider a trivial problem with a tridiagonal matrix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eaa1d501064d059b1266b678734d2b177ec5fbf" translate="yes" xml:space="preserve">
          <source>Letting Readline Type for You</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8283a89c4d467b70162851a7718b7ce860adf53b" translate="yes" xml:space="preserve">
          <source>Level of messages output by solver routines:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="164d3e89bffb60941d4e91ea74289532409c3662" translate="yes" xml:space="preserve">
          <source>Lexer analyzer (&lt;a href=&quot;https://www.gnu.org/software/flex&quot;&gt;https://www.gnu.org/software/flex&lt;/a&gt;). You will need Flex if you modify the &lt;code&gt;lex.ll&lt;/code&gt; source file or if you delete the files that are generated from it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4b06e4a557f39975792809007fcb2956278a344" translate="yes" xml:space="preserve">
          <source>Libraries like liboctave.a and liboctinterp.a.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b118f1ca4885afa85044fcd2726741072ccaa46" translate="yes" xml:space="preserve">
          <source>Library for computing discrete Fourier transforms (&lt;a href=&quot;http://www.fftw.org&quot;&gt;http://www.fftw.org&lt;/a&gt;). FFTW3 is used to provide better performance for functions that compute discrete Fourier transforms (&lt;code&gt;fft&lt;/code&gt;, &lt;code&gt;ifft&lt;/code&gt;, &lt;code&gt;fft2&lt;/code&gt;, etc.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbba52533d5bef045710e1d3d63707be08bd0c63" translate="yes" xml:space="preserve">
          <source>Library for configuring and customizing font access (&lt;a href=&quot;https://www.freedesktop.org/wiki/Software/fontconfig&quot;&gt;https://www.freedesktop.org/wiki/Software/fontconfig&lt;/a&gt;). Fontconfig is used to manage fonts for Octave&amp;rsquo;s OpenGL-based graphics functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c8aec366b5cd8fc6a99d17b7ed6e625f89f8912" translate="yes" xml:space="preserve">
          <source>Library for manipulating portable data files (&lt;a href=&quot;https://www.hdfgroup.org/HDF5&quot;&gt;https://www.hdfgroup.org/HDF5&lt;/a&gt;). &lt;small&gt;HDF5&lt;/small&gt; is required for Octave&amp;rsquo;s &lt;code&gt;load&lt;/code&gt; and &lt;code&gt;save&lt;/code&gt; commands to read and write HDF data files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c2d642b5848589d4b5b86a04f16da4d4dea4701" translate="yes" xml:space="preserve">
          <source>Library for the solution of large-scale eigenvalue problems (&lt;a href=&quot;https://forge.scilab.org/index.php/p/arpack-ng&quot;&gt;https://forge.scilab.org/index.php/p/arpack-ng&lt;/a&gt;). &lt;small&gt;ARPACK&lt;/small&gt; is required to provide the functions &lt;code&gt;eigs&lt;/code&gt; and &lt;code&gt;svds&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19f0338eb48b5041aa9a7b825f708aa19ea0cc3d" translate="yes" xml:space="preserve">
          <source>Library for transferring data with URL syntax (&lt;a href=&quot;https://curl.haxx.se&quot;&gt;https://curl.haxx.se&lt;/a&gt;). cURL is required to provide the &lt;code&gt;urlread&lt;/code&gt; and &lt;code&gt;urlwrite&lt;/code&gt; functions and the &lt;code&gt;ftp&lt;/code&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf8f017afcb5592c55d48be277a2df204caa87e5" translate="yes" xml:space="preserve">
          <source>Libtool</source>
          <target state="translated">Libtool</target>
        </trans-unit>
        <trans-unit id="48efd407845516801aba1647ccf77e51d19e56c5" translate="yes" xml:space="preserve">
          <source>Light Properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5c11eb4cc2cb48e6095118ec98e0a4240c5126c" translate="yes" xml:space="preserve">
          <source>Lighting is only supported for OpenGL graphic toolkits (i.e., &lt;code&gt;&quot;fltk&quot;&lt;/code&gt; and &lt;code&gt;&quot;qt&quot;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4b3d77db86f55149159c32cc85bb610074d745b" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&quot;measure&quot;&lt;/code&gt;, but all possible algorithms that may be used to treat the transform are considered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35ee1dc7c514a634176de58d3c02ef95225f96d8" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;eval&lt;/code&gt;, except that the expressions are evaluated in the context &lt;var&gt;context&lt;/var&gt;, which may be either &lt;code&gt;&quot;caller&quot;&lt;/code&gt; or &lt;code&gt;&quot;base&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="769f70d9cd46b7fa83fdbe8df99ec8858ccfcb8b" translate="yes" xml:space="preserve">
          <source>Like an error, a warning is issued when something unexpected happens. Unlike an error, a warning doesn&amp;rsquo;t abort the currently running program. A simple example of a warning is when a number is divided by zero. In this case Octave will issue a warning and assign the value &lt;code&gt;Inf&lt;/code&gt; to the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07f03b2420a3b3c12b8f45d855b1047247cecdcd" translate="yes" xml:space="preserve">
          <source>Like comparison operations, each element of an element-by-element boolean expression also has a numeric value (1 if true, 0 if false) that comes into play if the result of the boolean expression is stored in a variable, or used in arithmetic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e43576d7f2c644c10bb08f749b89102603f847c" translate="yes" xml:space="preserve">
          <source>Like every other expression, the function call has a value, which is computed by the function based on the arguments you give it. In this example, the value of &lt;code&gt;sqrt (&lt;var&gt;argument&lt;/var&gt;)&lt;/code&gt; is the square root of the argument. A function can also have side effects, such as assigning the values of certain variables or doing input or output operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59857a458398fa33466b8360f1c6c133d910246a" translate="yes" xml:space="preserve">
          <source>Like global variables, a persistent variable may only be initialized once. For example, after executing the following code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca4b83486dececbc0f15bbfde1c31eb6f96f09e6" translate="yes" xml:space="preserve">
          <source>Likewise &lt;code&gt;&lt;var&gt;s&lt;/var&gt; .^ -2&lt;/code&gt; involves terms like &lt;code&gt;0 .^ -2&lt;/code&gt; which is infinity, and so &lt;code&gt;&lt;var&gt;s&lt;/var&gt; .^ -2&lt;/code&gt; is equally a full matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d70fbc0295df233618a52339d42db71a4d8f0a4" translate="yes" xml:space="preserve">
          <source>Line Properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d9a82211d66c2814dff8cb20af66d0719db6eae" translate="yes" xml:space="preserve">
          <source>Line Series</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64b6f0f1f015ec1498b05e5d8fce97f8960b5ce1" translate="yes" xml:space="preserve">
          <source>Line Styles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad0b2cb40e450d2d7da3835f9e492d3ab1eacd1b" translate="yes" xml:space="preserve">
          <source>Line number from which to remove a breakpoint. Multiple lines may be given as separate arguments or as a vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88b7e625ef0c72f2172fa1a6b6d497b30b5e5a8d" translate="yes" xml:space="preserve">
          <source>Line series objects are created by the &lt;code&gt;plot&lt;/code&gt; and &lt;code&gt;plot3&lt;/code&gt; functions and are of the type &lt;code&gt;line&lt;/code&gt;. The properties of the line series with the ability to add data sources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8eba72ed44699ec4c150e81363f7d4c13bdf899" translate="yes" xml:space="preserve">
          <source>Line styles are specified by the following properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7be5f6b94d4dc78a46dcf8b276236486a8ac6305" translate="yes" xml:space="preserve">
          <source>Line-Oriented Input</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcb739908d0a50031f680d3b4fffc6749c4002d3" translate="yes" xml:space="preserve">
          <source>Linear Algebra</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc929ed2e48e325efd9f30603022852bea2e81aa" translate="yes" xml:space="preserve">
          <source>Linear Algebra Package (&lt;a href=&quot;http://www.netlib.org/lapack&quot;&gt;http://www.netlib.org/lapack&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="658203e4e7b67c7910aaf832314afd0c7fa7e997" translate="yes" xml:space="preserve">
          <source>Linear Algebra and Its Applications</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c5a178392b8f22be591f0e49da8bd3a1cfe9423" translate="yes" xml:space="preserve">
          <source>Linear Algebra and Its Applications, 4th Edition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2fb207b7001421fc37166fdf7855b26ed42a2a2" translate="yes" xml:space="preserve">
          <source>Linear Algebra on Sparse Matrices</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6bfb212e65611271725413eb4a7b4e6f3ef7565" translate="yes" xml:space="preserve">
          <source>Linear Algebra with Diagonal/Permutation Matrices</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97a6cbe1eab16c723c090d4309e748a346122f99" translate="yes" xml:space="preserve">
          <source>Linear Least Squares</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df040b02dfe212f9eaa259b4064e69db2c7c48f7" translate="yes" xml:space="preserve">
          <source>Linear Programming</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c30ecc4303851cf7ff13a9ae828fbb59100e77a" translate="yes" xml:space="preserve">
          <source>Linear algebra:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36c5d1785acc08ab0912f4f4fec5282121474dea" translate="yes" xml:space="preserve">
          <source>Linear interpolation from nearest neighbors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38edbd5020229cfdb2ffc4b61b65b7c9b602e973" translate="yes" xml:space="preserve">
          <source>Linear multistep methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77b56e4a3cfa730ac4c99cca107a029eadc03c43" translate="yes" xml:space="preserve">
          <source>Lines beginning with &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96f3f4e5b8de708fd07eae1cdd337509cf6f5233" translate="yes" xml:space="preserve">
          <source>Lines beginning with an alphabetical character indicates a new category of functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a2c7ff2c9c172b8b8c7d3b397238bdc69765f05" translate="yes" xml:space="preserve">
          <source>Lines starting with &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc5a47d400f617e05c2dfdb4e6d14eeca7fba4c4" translate="yes" xml:space="preserve">
          <source>Lines starting with a blank character are continuations from the previous line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5de8880bf6f459d9bbeec97d1bd594b57ca24728" translate="yes" xml:space="preserve">
          <source>Lines starting with a white space character indicate that the function names on the line belong to the last mentioned category.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39e30902aba652420ad939874f4811b9bdac3e73" translate="yes" xml:space="preserve">
          <source>Link a stand-alone executable file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1049230af86a60e165f38011cc42d0381566ad98" translate="yes" xml:space="preserve">
          <source>Link both axes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90c8bf2cbda78f236c1240e9601dee76aa6c3739" translate="yes" xml:space="preserve">
          <source>Link graphic object properties, such that a change in one is propagated to the others.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba329a6cd79cad1832fabb825721ec97686dc197" translate="yes" xml:space="preserve">
          <source>Link the axis limits of 2-D plots such that a change in one is propagated to the others.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95c2517982ed428b1d0830197bf27e777d66b4a4" translate="yes" xml:space="preserve">
          <source>Link x-axes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd22c5aab6286df7cdad3831a0314867cbdc07a8" translate="yes" xml:space="preserve">
          <source>Link y-axes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe4a3e7a0442d1f1b63f3bda53fd1dfd2ffbdd5a" translate="yes" xml:space="preserve">
          <source>Linking external C code to Octave is relatively simple, as the C functions can easily be called directly from C++. One possible issue is that the declarations of the external C functions may need to be explicitly defined as C functions to the compiler. If the declarations of the external C functions are in the header</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="741d6eacac821111e10eca9f2781db84aa8628b2" translate="yes" xml:space="preserve">
          <source>List &lt;var&gt;toolkit&lt;/var&gt; as an available graphics toolkit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62180665372f30f42201443d854370e37253db49" translate="yes" xml:space="preserve">
          <source>List currently defined variables matching the given patterns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14d798e411eb26e9293882b955331f1c5346fff4" translate="yes" xml:space="preserve">
          <source>List directory contents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="037f96d904f09db8754df9cfdd736b632422023a" translate="yes" xml:space="preserve">
          <source>List operators. The pattern will match any character listed between &lt;code&gt;&quot;[&quot;&lt;/code&gt; and &lt;code&gt;&quot;]&quot;&lt;/code&gt;. If the first character is &lt;code&gt;&quot;^&quot;&lt;/code&gt; then the pattern is inverted and any character except those listed between brackets will match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de4b491ef4127722f345cb556cd0fad9b1871b9c" translate="yes" xml:space="preserve">
          <source>List remote directory contents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8f72d48b1791aea4c8b6d92c44badb997673a22" translate="yes" xml:space="preserve">
          <source>List the Octave specific files in directory &lt;var&gt;dir&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78cfd1fcc2fef78ce2bf938acdc18ffdc4ce7779" translate="yes" xml:space="preserve">
          <source>List the current directory in verbose form for the FTP connection &lt;var&gt;f&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48d9923558592ce06c1401781ce3ae9d798bd6e7" translate="yes" xml:space="preserve">
          <source>List the first &lt;var&gt;n&lt;/var&gt; primes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c26a7d72f14e4d4978e8e113a17469e66c59b04" translate="yes" xml:space="preserve">
          <source>List the names of the public methods for the object &lt;var&gt;obj&lt;/var&gt; or the named class &lt;var&gt;classname&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7b35bbf4697070626c8c7f78fd40fd53aad3076" translate="yes" xml:space="preserve">
          <source>List the possible completions of the text before the cursor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae5f4d0c22fc1b12778892cdf131c8ae7741a6b6" translate="yes" xml:space="preserve">
          <source>List variables in the global scope rather than the current scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14879438f43f236adf0c361782851d5465735ab1" translate="yes" xml:space="preserve">
          <source>Literal character fields:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b83039d9f22c8606f7f29f09879f1012af6e99f" translate="yes" xml:space="preserve">
          <source>Load the figure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a39d50ceff4d7d8b41b6797827054cedf1a79cf1" translate="yes" xml:space="preserve">
          <source>Load the graphics objects in &lt;var&gt;filename&lt;/var&gt; into a vector of graphics handles &lt;var&gt;h&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15890278a03b599fa35aa8b175d3745cd16750cf" translate="yes" xml:space="preserve">
          <source>Load the named variables &lt;var&gt;v1&lt;/var&gt;, &lt;var&gt;v2&lt;/var&gt;, &amp;hellip;, from the file &lt;var&gt;file&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dcff9ac45368e7161cfcc7bee18b061570b8ff8" translate="yes" xml:space="preserve">
          <source>Loading and Saving Images</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feba37755bbad5d7188cc14b805f01696a3e2fa3" translate="yes" xml:space="preserve">
          <source>Locale&amp;rsquo;s AM or PM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04096035a11a7791a0861aab96c500b73e720774" translate="yes" xml:space="preserve">
          <source>Locale&amp;rsquo;s abbreviated month name (Jan-Dec).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="067ce67325ff5112826d3e42db533982818d30fd" translate="yes" xml:space="preserve">
          <source>Locale&amp;rsquo;s abbreviated weekday name (Sun-Sat).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="779fdac411a4bd39e70b2db42f1a598c4b059657" translate="yes" xml:space="preserve">
          <source>Locale&amp;rsquo;s date and time (Sat Nov 04 12:02:33 EST 1989).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e721243e32d36695812be53ce1e3100173b4075" translate="yes" xml:space="preserve">
          <source>Locale&amp;rsquo;s date representation (mm/dd/yy).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5539c30e3bd5583eaec2a64dd8c7b880b234b004" translate="yes" xml:space="preserve">
          <source>Locale&amp;rsquo;s full month name, variable length (January-December).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="963abe2f13989f5bcb74506604df3fa3a9b00637" translate="yes" xml:space="preserve">
          <source>Locale&amp;rsquo;s full weekday name, variable length (Sunday-Saturday).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b62a408d2be6e7f9ba6a6c8a829712a9b071b7cc" translate="yes" xml:space="preserve">
          <source>Locale&amp;rsquo;s time representation (%H:%M:%S).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37a991eee8f6aced535e7126d02c6c00ffb11360" translate="yes" xml:space="preserve">
          <source>Location of file or directory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e66c4a56f93aede0e6bd74537131c2b5ff72539a" translate="yes" xml:space="preserve">
          <source>Lock the current function into memory so that it can&amp;rsquo;t be removed with &lt;code&gt;clear&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8bf1f632fed0779598e0ddb4c7a586c28b4cb21" translate="yes" xml:space="preserve">
          <source>Logical Values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b48e81d570127e70ff2d3e0e8d6213b3a7af3d4" translate="yes" xml:space="preserve">
          <source>Logical and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8259ba986782d122f64779d389ceef58be13d6fd" translate="yes" xml:space="preserve">
          <source>Logical and character arrays are not considered to be numeric.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4271943646b1e3b0742a5bd98a8e3f8d50325f4" translate="yes" xml:space="preserve">
          <source>Logical not</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b4453638fec41e78bf97d38a71502539ae079a2" translate="yes" xml:space="preserve">
          <source>Logical or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8beac902224ac2c5e1ac2fbe7669ded5bfa74968" translate="yes" xml:space="preserve">
          <source>Logical value if format supports alpha channel (transparency or matte).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63344b8be4f178580ea1611869b7552412448cba" translate="yes" xml:space="preserve">
          <source>Logical value if format supports multipage (multiple images per file).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c98452f92940d575de3ebb3be1ddc41aa8e7166" translate="yes" xml:space="preserve">
          <source>Logical values can also be constructed by casting numeric objects to logical values, or by using the &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f28c4bd90d5dc0816d77bf49cb27d7d3150fc38" translate="yes" xml:space="preserve">
          <source>Logical values can also be used to index matrices and cell arrays. When indexing with a logical array the result will be a vector containing the values corresponding to &lt;code&gt;true&lt;/code&gt; parts of the logical array. The following example illustrates this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2896269f89f99b883af5d5887f46eec1bd34e27a" translate="yes" xml:space="preserve">
          <source>Look for Octave sources in the directory &lt;var&gt;dir&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="575139f3190d2b4b88613120908db2ef7406f3e8" translate="yes" xml:space="preserve">
          <source>Lookup values in a &lt;strong&gt;sorted&lt;/strong&gt; table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6e1c0b9641bf33e1aaaec1b537963374682bddb" translate="yes" xml:space="preserve">
          <source>LoopCount</source>
          <target state="translated">LoopCount</target>
        </trans-unit>
        <trans-unit id="717116903a15a03352d771a8aa15a0648317a58b" translate="yes" xml:space="preserve">
          <source>Looping Over Structure Elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b20132daaaa7e23261ab520dc4631f91968fefb" translate="yes" xml:space="preserve">
          <source>Loss of significance by argument reduction results in less than half of machine accuracy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6d49c31932354250a4044769b95016a2e38a39e" translate="yes" xml:space="preserve">
          <source>Loss of significance by argument reduction, output may be inaccurate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51bd1ef84a4f57ac3469f92b56324e8fcc14cd16" translate="yes" xml:space="preserve">
          <source>Low accuracy with nonsmooth integrands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3c3ad58b0ac62744c2bb94a50da4362b578cf90" translate="yes" xml:space="preserve">
          <source>Low to High accuracy with nonsmooth/smooth integrands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53a53d791037805c9eaa5d60f14672e2b3484f62" translate="yes" xml:space="preserve">
          <source>Lower limit of the objective function. If the objective function reaches this limit and continues decreasing, the solver stops the search. This parameter is used in the dual simplex method only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12cda5599c2db74eafe9c0fbeeab20b5c3de25a8" translate="yes" xml:space="preserve">
          <source>Lower triangular. If the optional third argument &lt;var&gt;perm&lt;/var&gt; is given, the matrix is assumed to be a permuted lower triangular with the permutations defined by the vector &lt;var&gt;perm&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86584d2a2be30257bd3b14d2fe233f59f8330c75" translate="yes" xml:space="preserve">
          <source>Lowercase the characters following the cursor to the end of the current (or following) word, moving the cursor to the end of the word.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f94695b7a50ce03d4b08392048b4736551f27939" translate="yes" xml:space="preserve">
          <source>Lowercase value of the key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c63ae6dd4fc9f9dda66970e827d13f7c73fe841c" translate="yes" xml:space="preserve">
          <source>M</source>
          <target state="translated">M</target>
        </trans-unit>
        <trans-unit id="1ccf33bf7d4cdbbdfbf3a0d2217f0170db648673" translate="yes" xml:space="preserve">
          <source>M = diag (v)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b7748d1aa522d808c6aad90b9f8b6457d90cc0e" translate="yes" xml:space="preserve">
          <source>M = diag (v, k)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="436d9e222b38cfba53b8813778892f4e5a312b95" translate="yes" xml:space="preserve">
          <source>M = diag (v, m, n)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29d20bcffe97e2e8582a7b36b7a5dcac5e58b8f7" translate="yes" xml:space="preserve">
          <source>M-&amp;gt;</source>
          <target state="translated">M-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="37a5c39dff07a52dd3087c214ce1f8d1b29f0a8c" translate="yes" xml:space="preserve">
          <source>M-&amp;lt;</source>
          <target state="translated">M-&amp;lt;</target>
        </trans-unit>
        <trans-unit id="b691a0899cae20ded7f02bb823bbac9706646354" translate="yes" xml:space="preserve">
          <source>M-?</source>
          <target state="translated">M-?</target>
        </trans-unit>
        <trans-unit id="e286729ebdb433a6094d1271b49c5a2c6f950ccc" translate="yes" xml:space="preserve">
          <source>M-DEL</source>
          <target state="translated">M-DEL</target>
        </trans-unit>
        <trans-unit id="582c231510f999e4090021d4c4d24dd9d1083ddc" translate="yes" xml:space="preserve">
          <source>M-TAB</source>
          <target state="translated">M-TAB</target>
        </trans-unit>
        <trans-unit id="dfec75d824ab931885b10c2deb8b602ddf385540" translate="yes" xml:space="preserve">
          <source>M-b</source>
          <target state="translated">M-b</target>
        </trans-unit>
        <trans-unit id="9f9f196444744016cd3934727f5dbcbffc50a3e9" translate="yes" xml:space="preserve">
          <source>M-c</source>
          <target state="translated">M-c</target>
        </trans-unit>
        <trans-unit id="a213eb1de2d97fd8ab6c0c8486e553f7cdc3e521" translate="yes" xml:space="preserve">
          <source>M-d</source>
          <target state="translated">M-d</target>
        </trans-unit>
        <trans-unit id="add69bf7aa5e86e6ac1a17b8047a626986b67564" translate="yes" xml:space="preserve">
          <source>M-f</source>
          <target state="translated">M-f</target>
        </trans-unit>
        <trans-unit id="6e170e1d95a1d9c6cf3887b77b46419dd3d2ec71" translate="yes" xml:space="preserve">
          <source>M-l</source>
          <target state="translated">M-l</target>
        </trans-unit>
        <trans-unit id="0f8046567a7777233033e7c62fcbaaf077eb077a" translate="yes" xml:space="preserve">
          <source>M-r</source>
          <target state="translated">M-r</target>
        </trans-unit>
        <trans-unit id="3be7be38dbd525c399b8fea805511b112c44e358" translate="yes" xml:space="preserve">
          <source>M-t</source>
          <target state="translated">M-t</target>
        </trans-unit>
        <trans-unit id="9af0d95460fb2a783cd95c120c77b07cf4297a51" translate="yes" xml:space="preserve">
          <source>M-u</source>
          <target state="translated">M-u</target>
        </trans-unit>
        <trans-unit id="7555a33395fef6db20d121fb58c3221aa124e48c" translate="yes" xml:space="preserve">
          <source>M-y</source>
          <target state="translated">M-y</target>
        </trans-unit>
        <trans-unit id="1f7c41c1d830dd3294f09301a33b8ae5b4f2acee" translate="yes" xml:space="preserve">
          <source>M. Abramowitz and I.A. Stegun,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83bd2260257d398076a738813a94bd2f37d6f282" translate="yes" xml:space="preserve">
          <source>MD2</source>
          <target state="translated">MD2</target>
        </trans-unit>
        <trans-unit id="86e9fff1d00c68995ba96d3b00b707d9685f6995" translate="yes" xml:space="preserve">
          <source>MD4</source>
          <target state="translated">MD4</target>
        </trans-unit>
        <trans-unit id="b773bed04a48de200b96981bb79467413a222066" translate="yes" xml:space="preserve">
          <source>MD5</source>
          <target state="translated">MD5</target>
        </trans-unit>
        <trans-unit id="40bb78ac4a8f75b73057a2a259dcfa335c88dad4" translate="yes" xml:space="preserve">
          <source>META</source>
          <target state="translated">META</target>
        </trans-unit>
        <trans-unit id="4a3a8927b85daa16f0fe11b6bbb759eee3095858" translate="yes" xml:space="preserve">
          <source>MM</source>
          <target state="translated">MM</target>
        </trans-unit>
        <trans-unit id="ff6912e2f0ea1f0a272acab877e81da5e3f73b0e" translate="yes" xml:space="preserve">
          <source>Magenta</source>
          <target state="translated">Magenta</target>
        </trans-unit>
        <trans-unit id="585be2f64901aa53f098047f2916159507219a53" translate="yes" xml:space="preserve">
          <source>Maintainer of the package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a94431ee22f05f141107f9355ed3127d0f0c4d5a" translate="yes" xml:space="preserve">
          <source>Make</source>
          <target state="translated">Make</target>
        </trans-unit>
        <trans-unit id="11bd2c3419550f41d7b3ecb87a9243940e86d651" translate="yes" xml:space="preserve">
          <source>Make the axes visible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5ca5f1bb1e5cfc4a422a8956250e2478276ff95" translate="yes" xml:space="preserve">
          <source>Make the matching case sensitive. (default)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e507428c30f7104bdede95c3fc076e52e3f587e8" translate="yes" xml:space="preserve">
          <source>Makeconf</source>
          <target state="translated">Makeconf</target>
        </trans-unit>
        <trans-unit id="836efb6e25a091dcb4ff8e1dbb2f0be6a5cbf14c" translate="yes" xml:space="preserve">
          <source>Makefile</source>
          <target state="translated">Makefile</target>
        </trans-unit>
        <trans-unit id="4faecea6d9857941b442698cdcbd38a141ff746e" translate="yes" xml:space="preserve">
          <source>Makefile.in</source>
          <target state="translated">Makefile.in</target>
        </trans-unit>
        <trans-unit id="44667609f7bfd36a2fd455f1d665c2ef5fd79b3d" translate="yes" xml:space="preserve">
          <source>Making Java Classes Available</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b02d176b86b96c689850ef3621331eebffb231cc" translate="yes" xml:space="preserve">
          <source>Making diagonal and permutation matrices special matrix objects in their own right and the consequent usage of smarter algorithms for certain operations implies, as a side effect, small differences in treating zeros. The contents of this section apply also to sparse matrices, discussed in the following chapter. (see &lt;a href=&quot;sparse-matrices#Sparse-Matrices&quot;&gt;Sparse Matrices&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac2b3e996c71c5394060f486e04a9f90f2cc8f4e" translate="yes" xml:space="preserve">
          <source>Manage &lt;small&gt;FFTW&lt;/small&gt; wisdom data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8802d3d83edfe7ae97d0fa50e3fc68fb2a1c7627" translate="yes" xml:space="preserve">
          <source>Manage or query packages (groups of add-on functions) for Octave.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35eed945f1cf48d3fc45539000459b17f2e0cb03" translate="yes" xml:space="preserve">
          <source>Manage supported image formats.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a22a2a719aa541725cb1641854142a209342abc" translate="yes" xml:space="preserve">
          <source>Managing Default Properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f8da8dd2c428d66af482ef723ff82d361b49613" translate="yes" xml:space="preserve">
          <source>Manipulate sparse matrices</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe7c462390eddbbc284f5ed6ca2daa669cc9f0db" translate="yes" xml:space="preserve">
          <source>Manipulating Strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4b413306cc0f71491eddb8e633cabfbdc1589fb" translate="yes" xml:space="preserve">
          <source>Manipulating Structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2403eed9206d2c9259e9df9b4fd436d5dbb7a6a" translate="yes" xml:space="preserve">
          <source>Manipulating the Load Path</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34b776bba97e37d9d0457b06c8a9591675c0e8c6" translate="yes" xml:space="preserve">
          <source>Manipulation of Plot Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="669a86f5401e98336e12f516217c5a79ba32c871" translate="yes" xml:space="preserve">
          <source>Manipulation of Plot Windows</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e836fdc2572ab23d5dc8c36bd613ac6b0f82d63" translate="yes" xml:space="preserve">
          <source>Manual</source>
          <target state="translated">Manual</target>
        </trans-unit>
        <trans-unit id="33a11ddeb40a5ea23b8ede803f8e1aa69d8e1704" translate="yes" xml:space="preserve">
          <source>Manual: Appendices</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19cfb484b6178f6b9d15f8147a01c01331ec01b8" translate="yes" xml:space="preserve">
          <source>Manual: Indexes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e1c8aea0e452b25c1c7b5d8441bd974f105cb16" translate="yes" xml:space="preserve">
          <source>Many Octave functions have been overloaded to work with either sparse or full matrices. There is no difference in calling convention when using an overloaded function with a sparse matrix, however, there is also no access to potentially sparse-specific features. At any time the sparse matrix specific version of a function can be used by explicitly calling its function name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f562383e075fb564b586bd8a2bc7e47a67306a04" translate="yes" xml:space="preserve">
          <source>Many different combinations of arguments are possible. The most common form is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e02bd33b5cd8f5ca72c01309f7b5d0a762b4ada3" translate="yes" xml:space="preserve">
          <source>Many different combinations of arguments are possible. The simplest form is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e04b396f0f9ca6c96cec012f12a63787fc1499b" translate="yes" xml:space="preserve">
          <source>Many functions and operators take two or more arguments and the situation can easily arise where these functions are called with objects of different classes. It is therefore necessary to determine the precedence of which method from which class to call when there are mixed objects given to a function or operator. To do this the &lt;code&gt;superiorto&lt;/code&gt; and &lt;code&gt;inferiorto&lt;/code&gt; functions can be used</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e41d37b092a564790596b73f7c8e369331382a6c" translate="yes" xml:space="preserve">
          <source>Many functions can also return single precision values directly. For example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cf991840eb32a7245b4da11b0f7b60e7c471e3a" translate="yes" xml:space="preserve">
          <source>Many of Octave&amp;rsquo;s standard functions are distributed as function files. They are loosely organized by topic, in subdirectories of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3900e36f1440eba0912ecb8023f8ae4ccf27c968" translate="yes" xml:space="preserve">
          <source>Many of the command-line editing functions operate using control characters. For example, the character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38a40ea0fe8ab86edf1a75b1f5266994ce55b242" translate="yes" xml:space="preserve">
          <source>Many of the examples in this manual print text when they are evaluated. In this manual the printed text resulting from an example is indicated by &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71141635c97b09f7e98afd5fc99df53de927ccd8" translate="yes" xml:space="preserve">
          <source>Many operators and functions can work with mixed data types. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab478f3efc840eebab919dff1b9512286f70c10c" translate="yes" xml:space="preserve">
          <source>Map</source>
          <target state="translated">Map</target>
        </trans-unit>
        <trans-unit id="c27fb762163d83c328f0f6857b649896438e7ec6" translate="yes" xml:space="preserve">
          <source>Margins between the borders of the background area and the texts. The value is currently interpreted as pixels, regardless of the &lt;code&gt;&quot;fontunits&quot;&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9a7d63bc466b2c637ee46063ebbbc554b0d7bb8" translate="yes" xml:space="preserve">
          <source>Mark the matrix as full.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
