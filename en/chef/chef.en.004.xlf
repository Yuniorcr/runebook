<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="">
    <body>
      <group id="">
        <trans-unit id="f892b32a2ab007b383a5e35c805686e8337f3b88" translate="yes" xml:space="preserve">
          <source>Format and mount the new volume with the following series of commands:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf8d841d396090396092981e7add914ac5a3a29c" translate="yes" xml:space="preserve">
          <source>FreeBSD. All platform variants of FreeBSD return &lt;code&gt;freebsd&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c83a452a618e4d4e11cd028e0d2744ad5079223d" translate="yes" xml:space="preserve">
          <source>Freeze Versions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e8d7dee52377c4449f4cfd57e99a0cc5aa2e610" translate="yes" xml:space="preserve">
          <source>From Chef Server 12</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="217f9603d0d7ac1bd1eebee60f0dc7d4564be933" translate="yes" xml:space="preserve">
          <source>From Enterprise Chef</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d6ab328521b7ab79a3a2e69abdad6b85dfa1206" translate="yes" xml:space="preserve">
          <source>From Open Source Chef</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cbcf00bea33fb416195e2be5ca6d12239519e75" translate="yes" xml:space="preserve">
          <source>From a root shell type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8a82dae59e151b21de994179ce448cfee25a169" translate="yes" xml:space="preserve">
          <source>From the &lt;code&gt;chef/&lt;/code&gt; directory, add a remote named &lt;code&gt;chef&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="934f1735c14510a58fe83118c7ab3769ecd2ff6e" translate="yes" xml:space="preserve">
          <source>From the Web Interface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="428ecc4dcddac8361147c1dda2e4a8d9dfd1f598" translate="yes" xml:space="preserve">
          <source>From the command line, browse to the &lt;code&gt;chef/&lt;/code&gt; directory:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49e9b13da8b81a050d319adf792901d8cd55819a" translate="yes" xml:space="preserve">
          <source>From the drop-down list next to your username, select &lt;strong&gt;My Profile&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15606d3c44314d85f147f69b4d6b85c43baf3600" translate="yes" xml:space="preserve">
          <source>From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the chef-client will skip creating them. If the files are deleted, then:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f6c859dee70e6673aef9a035f86ab6429a59f96" translate="yes" xml:space="preserve">
          <source>Front End</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="584b0ca8b1bffd60eae9337a282b85f645c97b50" translate="yes" xml:space="preserve">
          <source>Front-end machines are scaled horizontally, and then load balanced using a hardware load balancer, SSL off-loading, and round-robin as the load balancing algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66f7e73f495c0215265a3d73656fba1fe390e16f" translate="yes" xml:space="preserve">
          <source>Front-end machines handle requests to the Chef server API and access to the web user interface. Front-end machines should be load balanced and scaled horizontally by increasing the number of servers available to handle requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="152d1cf2d912c0b47ab85242e86450251a763f9b" translate="yes" xml:space="preserve">
          <source>Frontend</source>
          <target state="translated">Frontend</target>
        </trans-unit>
        <trans-unit id="8a29a7b80cd0645879634cbf7ed3778a9973ee96" translate="yes" xml:space="preserve">
          <source>Frontend Installation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="281cbc061f163cdb9f5b94f0e91456393eb0c96b" translate="yes" xml:space="preserve">
          <source>Full Assignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="977ffe3cf72e60f8226db330a0bdc55c19a84fa3" translate="yes" xml:space="preserve">
          <source>Fully assigned attributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75052dad72245d8618bfd140e997883c92cbc9d4" translate="yes" xml:space="preserve">
          <source>Fully qualified domain names</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1e410ad1472b42cb42cc98962428637290b6706" translate="yes" xml:space="preserve">
          <source>Function</source>
          <target state="translated">Function</target>
        </trans-unit>
        <trans-unit id="0d53b300755da45ade860477b0bf50b22e46e6b4" translate="yes" xml:space="preserve">
          <source>Fuzzy Matching</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f030bbbd32966cde41037b98a8849c46b76e4bc1" translate="yes" xml:space="preserve">
          <source>GET</source>
          <target state="translated">GET</target>
        </trans-unit>
        <trans-unit id="b295909e0209b49969d3046df8d964a8f6e89e9f" translate="yes" xml:space="preserve">
          <source>GET /clients/CLIENT/keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebc3e787d72b260ff44457fe5f672ede8a63623c" translate="yes" xml:space="preserve">
          <source>GET /clients/CLIENT/keys/KEY</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59f01f566a99efb49759e7f6d9c9a7789aaf22ae" translate="yes" xml:space="preserve">
          <source>GET /users/USER/keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21d1a82a95ab5bfa783ac7c5e3440efaae7e1d9e" translate="yes" xml:space="preserve">
          <source>GET /users/USER/keys/</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a86e7d263cf651ae7d959070d1abdfca0e601a1f" translate="yes" xml:space="preserve">
          <source>GRE Tunnels</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1cecf5d1c4586412b4706622e28564cafcacece" translate="yes" xml:space="preserve">
          <source>Gem Package Options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f466df6bf4ee843903705a872f218e58ac64507" translate="yes" xml:space="preserve">
          <source>Gem package options should only be used when gems are installed into the system-wide instance of Ruby, and not the instance of Ruby dedicated to the chef-client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9239ee2cda84eca4c3440e2a7b50148af67da3d4" translate="yes" xml:space="preserve">
          <source>General</source>
          <target state="translated">General</target>
        </trans-unit>
        <trans-unit id="090685f3f2645a3354f7d45ea20f33d20a4e51bd" translate="yes" xml:space="preserve">
          <source>Generally, it&amp;rsquo;s best to let the chef-client choose the provider, and this is (by far) the most common approach. However, in some cases, specifying a provider may be desirable. There are two approaches:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc45f9b7a9a6e8b48f0e28821ec1981804dd1eb6" translate="yes" xml:space="preserve">
          <source>Generate</source>
          <target state="translated">Generate</target>
        </trans-unit>
        <trans-unit id="8000993eb762dd03859049185e4781b38522bb42" translate="yes" xml:space="preserve">
          <source>Generate a new public/private key pair and replace an existing public key with the newly-generated public key. To replace the public key with an existing public key, use &lt;code&gt;--public-key&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fca2523e2bfcf9dd9e4e463e4a78da2ee2376f5" translate="yes" xml:space="preserve">
          <source>Generate metadata for all cookbooks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba76cd056427dbee6a8fcff803a08711e2480c1f" translate="yes" xml:space="preserve">
          <source>Generates a large amount of data about the chef-client run</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b44987fa3307256a0f5d4bcfa6dabc741a557cc" translate="yes" xml:space="preserve">
          <source>Gentoo</source>
          <target state="translated">Gentoo</target>
        </trans-unit>
        <trans-unit id="5fbf0d226580fdc0c3ce0d1e5451beb6cf663b9c" translate="yes" xml:space="preserve">
          <source>Get Package, Run Installer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8c35b06eb4046b422d38612cfbcad8d7f54e9b7" translate="yes" xml:space="preserve">
          <source>Get SSL Certificates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a12f52218f3d82c127b37a1b067cac4e59878da" translate="yes" xml:space="preserve">
          <source>Get SSL certificates from the Chef server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34a98afdcb7c3ec8e266c5fc0d3a9529d42b2713" translate="yes" xml:space="preserve">
          <source>Get the .pem files and knife.rb files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc766c483e09053d3ced4cb0e3b76d3644d470f6" translate="yes" xml:space="preserve">
          <source>Get the package from a remote location, but only if the package does not already exist on the target system</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="008731292a307de99dd72437579d50d7911155f5" translate="yes" xml:space="preserve">
          <source>Get the priority mapping for a provider.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48fa124e69ecb4cb664f5ee991bbd5496e9ad8c2" translate="yes" xml:space="preserve">
          <source>Get the priority mapping for a resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a092e78069d5ca1378bba14443f9ee507632830" translate="yes" xml:space="preserve">
          <source>Gets the Nginx file from a remote location</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56e20169782d583c1df4ddd05b797afa8ba88805" translate="yes" xml:space="preserve">
          <source>Give a user access to read &lt;code&gt;/etc/chef&lt;/code&gt; and also the files accessed by the chef-client. This requires super user privileges and, as such, is not a recommended approach</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67bb4d0fe70eb2f4e030714e8730f6a5a892a138" translate="yes" xml:space="preserve">
          <source>Given the following code structure under &lt;code&gt;'foo'&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f933f46a5a77bfefa8a5f38ed83eefeec8838fa4" translate="yes" xml:space="preserve">
          <source>Given the following code structure, which has an override attribute:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2697f771a6cea46253b23224000de0dda772fdc0" translate="yes" xml:space="preserve">
          <source>Given the following code structure:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f7e2a93d9e85aef8d97342005ec5613fc0829d5" translate="yes" xml:space="preserve">
          <source>Global Endpoints</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6407cb2d1238f904e30de9a1de83ed6990f6d2a" translate="yes" xml:space="preserve">
          <source>Global Permissions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f92ca6a0b2ce33ee32376dd3f69de230343105f8" translate="yes" xml:space="preserve">
          <source>Go to &lt;a href=&quot;http://www.chef.io/chef/install&quot;&gt;http://www.chef.io/chef/install&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e82341bd077d3654e0f998f0f356b4170aadc2a" translate="yes" xml:space="preserve">
          <source>Go to the following URL: &lt;a href=&quot;https://help.github.com/articles/set-up-git&quot;&gt;https://help.github.com/articles/set-up-git&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fbcd5f566969c2c5a948559960375f38813dc60" translate="yes" xml:space="preserve">
          <source>Gone. Unable to update private key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c3ef6766b36b7e8534a40881ffe04fa3651ffbb" translate="yes" xml:space="preserve">
          <source>Good cookbook examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a1436367d3c32eb3d6ccda259911b5619b34d10" translate="yes" xml:space="preserve">
          <source>Graceful Transitions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c02329c48f348eb633688f33c499b18b31dcb947" translate="yes" xml:space="preserve">
          <source>Grant</source>
          <target state="translated">Grant</target>
        </trans-unit>
        <trans-unit id="220c98deb1482e5b5361b123b929ee8e4ac1e18d" translate="yes" xml:space="preserve">
          <source>Graphite</source>
          <target state="translated">Graphite</target>
        </trans-unit>
        <trans-unit id="4288130658d66f05be05bfa6ba67696ede548920" translate="yes" xml:space="preserve">
          <source>Graylog2 GELF</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="171a0606f7c74580fd3982cf57c49d604104120a" translate="yes" xml:space="preserve">
          <source>Group</source>
          <target state="translated">Group</target>
        </trans-unit>
        <trans-unit id="df5f737213a0155fea22e87a8d8452056836f477" translate="yes" xml:space="preserve">
          <source>Group Account</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5da4477f788802259068cf519051fcde6c62c634" translate="yes" xml:space="preserve">
          <source>Group Accounts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae9629f4ebb82c6331c0809fa9a0e54b00e578e6" translate="yes" xml:space="preserve">
          <source>Groups</source>
          <target state="translated">Groups</target>
        </trans-unit>
        <trans-unit id="03032b10666394badfd1a09f44a3c79861da2c42" translate="yes" xml:space="preserve">
          <source>Growl</source>
          <target state="translated">Growl</target>
        </trans-unit>
        <trans-unit id="dcf61cbfe7658ab735c77b095fa93aac1cfaedfe" translate="yes" xml:space="preserve">
          <source>Guard Interpreter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cd655bf4877b3f364e7e81e852c43660089692e" translate="yes" xml:space="preserve">
          <source>Guard Interpreters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67de3c63a9bd94b74bfc86944368ab7bcdf6d849" translate="yes" xml:space="preserve">
          <source>Guards</source>
          <target state="translated">Guards</target>
        </trans-unit>
        <trans-unit id="f3016496db2ad1fdb08b4956d98b96972580e19d" translate="yes" xml:space="preserve">
          <source>HP-UX. All platform variants of HP-UX return &lt;code&gt;hpux&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f40b27d6b8b9a4fc3827264c1da16a04ecf4d094" translate="yes" xml:space="preserve">
          <source>HTTP</source>
          <target state="translated">HTTP</target>
        </trans-unit>
        <trans-unit id="f52698c28f0d2036450e02a85451ee4f5be02442" translate="yes" xml:space="preserve">
          <source>HTTPS</source>
          <target state="translated">HTTPS</target>
        </trans-unit>
        <trans-unit id="be0212bf33313087973171061ef96d564becfb55" translate="yes" xml:space="preserve">
          <source>Handler</source>
          <target state="translated">Handler</target>
        </trans-unit>
        <trans-unit id="90f0cee7a78f4bbe8d8aa6ea2940690955d653fb" translate="yes" xml:space="preserve">
          <source>Handler DSL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdbded94bcbae9390f7fbdcec1c8d417e99b5883" translate="yes" xml:space="preserve">
          <source>Handler Types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="362f233bfd36bbe9ffba21ece507104cececa24e" translate="yes" xml:space="preserve">
          <source>Handlers</source>
          <target state="translated">Handlers</target>
        </trans-unit>
        <trans-unit id="f7aa754afef944d41c295bad998a1e197b8a7d80" translate="yes" xml:space="preserve">
          <source>Handlers and Cookbooks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29f60059e22f3dd50bf372bb5b94c7fa3c98401c" translate="yes" xml:space="preserve">
          <source>Has a dependency on the &lt;code&gt;ruby-prof&lt;/code&gt; gem, which is packaged as part of Chef and the Chef development kit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac134935d7237ae61ebd1477e6afbd9695645f6e" translate="yes" xml:space="preserve">
          <source>Has read-only access by default</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="873507a022b58de26a88deae87268cbd8d6af5b1" translate="yes" xml:space="preserve">
          <source>Hash</source>
          <target state="translated">Hash</target>
        </trans-unit>
        <trans-unit id="7011fd19a12a61e05f68652428adb06b84e5cd2b" translate="yes" xml:space="preserve">
          <source>Hash type was added in Chef client 12.14.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0393bd5b2d867255ea30c5a5c4bc74aeccd165bc" translate="yes" xml:space="preserve">
          <source>Have an unprivileged user (for example: &lt;code&gt;opscode&lt;/code&gt;) be the owner of the &lt;code&gt;deploy&lt;/code&gt; directory and another unprivileged user (for example: &lt;code&gt;opscodeapp&lt;/code&gt;) run the application. Most often, this is the solution that works best</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa167b4517816c18eaf9d125721b6b9200072547" translate="yes" xml:space="preserve">
          <source>Having only the group and not the corresponding users present during a chef-server-ctl reconfigure is unsupported and may lead to an error in the reconfiguration run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d77cec7263d74aa4c2c95a68f4c6cd16d571747d" translate="yes" xml:space="preserve">
          <source>Header Format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e7eebdb08c9dbf27c7668e2badd51e667707d3c" translate="yes" xml:space="preserve">
          <source>Helper</source>
          <target state="translated">Helper</target>
        </trans-unit>
        <trans-unit id="3c9b3433e6f225e4ae00ef2041d44d91bfbf7113" translate="yes" xml:space="preserve">
          <source>Helpers</source>
          <target state="translated">Helpers</target>
        </trans-unit>
        <trans-unit id="169f61f0710ffb0816223c11a40e7f7748ef045e" translate="yes" xml:space="preserve">
          <source>Hide nodes on which a chef-client run has occurred within the previous hour.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffcadc3bbf92f4882971ddc3bc8286e63dfa62c0" translate="yes" xml:space="preserve">
          <source>High Availability</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff90d92716dc096a6cf23642b253f7bac0c93542" translate="yes" xml:space="preserve">
          <source>High Availability (DEPRECATED)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa11d87b48b78aaab7c51c351dd4828aee56c331" translate="yes" xml:space="preserve">
          <source>High Availability: AWS (DEPRECATED)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00ab419a2f903b4d604fb0c936d1335919fa9024" translate="yes" xml:space="preserve">
          <source>High Availability: DRBD (DEPRECATED)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab980f940bf998146c0fa880620fefad5393e441" translate="yes" xml:space="preserve">
          <source>High availability</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="720b68a32b2e5195e4d85d56b5357e04822a7a16" translate="yes" xml:space="preserve">
          <source>Hints to &lt;code&gt;launchctl&lt;/code&gt; to not submit this job to launchd. Default value: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="829fbcec3f2f8cc8b4f7605491ce51aae21bf1db" translate="yes" xml:space="preserve">
          <source>HipChat</source>
          <target state="translated">HipChat</target>
        </trans-unit>
        <trans-unit id="e56bc8d383258cb7345fbe3eb2e24e295b0040be" translate="yes" xml:space="preserve">
          <source>HipChat Notifications</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9864e71e5682e5ff62565af220b93439af6503c" translate="yes" xml:space="preserve">
          <source>Host Notation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d1a86a244a1b4e10a27517b9baf5fd9ce5618fc" translate="yes" xml:space="preserve">
          <source>Host Specifications</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee9ca7b782fc6f45279f284b825060c0a5a108ec" translate="yes" xml:space="preserve">
          <source>Host names</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dbcd60ec442a8199dd9b177f7c5e1831d33732d" translate="yes" xml:space="preserve">
          <source>Hostnames</source>
          <target state="translated">Hostnames</target>
        </trans-unit>
        <trans-unit id="d9a3577d21f965330880ee386afae1eb7414aeeb" translate="yes" xml:space="preserve">
          <source>How do developers run the application locally?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ccdae44004b89b4b3255106c01505ef3baecb11" translate="yes" xml:space="preserve">
          <source>How file staging (via temporary files) is done. When &lt;code&gt;true&lt;/code&gt;, temporary files are created in the directory in which files will reside. When &lt;code&gt;false&lt;/code&gt;, temporary files are created under &lt;code&gt;ENV['TMP']&lt;/code&gt;. Default value: &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="253bf9513b0026db986c6931ef4e64c47a45272b" translate="yes" xml:space="preserve">
          <source>How members should be appended and/or removed from a group. When &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;members&lt;/code&gt; are appended and &lt;code&gt;excluded_members&lt;/code&gt; are removed. When &lt;code&gt;false&lt;/code&gt;, group members are reset to the value of the &lt;code&gt;members&lt;/code&gt; property. Default value: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d3f978e1bcc72cb7822285624f55e96d3e2731b" translate="yes" xml:space="preserve">
          <source>How the chef-client handles certain situations when the target file turns out not to be a file. For example, when a target file is actually a symlink. Set to &lt;code&gt;true&lt;/code&gt; for the chef-client delete the non-file target and replace it with the specified file. Set to &lt;code&gt;false&lt;/code&gt; for the chef-client to raise an error. Default value: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b7fdf536e98c1d8644488901d77f0f0605682d5" translate="yes" xml:space="preserve">
          <source>However, during the first chef-client run, this private key does not exist. Instead, the chef-client will attempt to use the private key assigned to the chef-validator, located in &lt;code&gt;/etc/chef/validation.pem&lt;/code&gt;. (If, for any reason, the chef-validator is unable to make an authenticated request to the Chef server, the initial chef-client run will fail.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e97b2038dac052a19bd7b7445ee653b33bb56113" translate="yes" xml:space="preserve">
          <source>However, if readability of code is desired, such as ensuring that a reader understands what the default action is for a custom resource or stating the action for a resource whose default may not be immediately obvious to the reader, specifying the default action is recommended:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="150a051d166ffa3d5dd92fe0584d762b38e2ee2a" translate="yes" xml:space="preserve">
          <source>IRC Snitch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d48482b792e85357622920ed9cb11367d14172d8" translate="yes" xml:space="preserve">
          <source>Ideally, the best way to debug a recipe is to not have to debug it in the first place. That said, the following sections discuss various approaches to debugging recipes and failed chef-client runs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c14eb05897127bb21bef36ae4b8acacd1baea7b0" translate="yes" xml:space="preserve">
          <source>Identify each package to be installed (implied in this example, not shown)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2e7779b3ff1cda9620f94db814d0039ca93b8be" translate="yes" xml:space="preserve">
          <source>Identify the Chef server type: hosted or on-premises</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa49d2bcdbdb94c15eed345c15a3646102abfd32" translate="yes" xml:space="preserve">
          <source>Identify the FQDN or IP address of the target node. The &lt;code&gt;knife bootstrap&lt;/code&gt; command requires the FQDN or the IP address for the node in order to complete the bootstrap operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a2c2f73e227d1950116baab3c5ff23f2e5f1d16" translate="yes" xml:space="preserve">
          <source>Identify the name of the original non-bootstrap backend server. This is the back end server that does &lt;strong&gt;not&lt;/strong&gt; have &lt;code&gt;:bootstrap =&amp;gt; true&lt;/code&gt; in &lt;code&gt;/etc/opscode/private-chef.rb&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8a45e0b1c4b7b5ffaac86df7b7f17a072214e31" translate="yes" xml:space="preserve">
          <source>Identity and Access Management (IAM)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffec4aa1b6b590ab5e5085707ee2d3877a9797ac" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;:data&lt;/code&gt; is not specified, you get an error: &lt;code&gt;Missing data key in RegistryKey values hash&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17371e46008718ee13bf6dd52c7b526ef7ebebd4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;force_default!&lt;/code&gt; is written:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dc7242bcdc4283d7168f331146494875f464cd5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;http_proxy&lt;/code&gt;, &lt;code&gt;https_proxy&lt;/code&gt;, &lt;code&gt;ftp_proxy&lt;/code&gt;, or &lt;code&gt;no_proxy&lt;/code&gt; is set in the client.rb file, the chef-client will configure the &lt;code&gt;ENV&lt;/code&gt; variable based on these (and related) settings. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36ac838739ff832c502ae6013149443c33b4874f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;mode&lt;/code&gt; is not specified and if the file already exists, the existing mode on the file is used. If &lt;code&gt;mode&lt;/code&gt; is not specified, the file does not exist, and the &lt;code&gt;:create&lt;/code&gt; action is specified, the chef-client assumes a mask value of &lt;code&gt;'0777'&lt;/code&gt; and then applies the umask for the system on which the file is to be created to the &lt;code&gt;mask&lt;/code&gt; value. For example, if the umask on a system is &lt;code&gt;'022'&lt;/code&gt;, the chef-client uses the default value of &lt;code&gt;'0755'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e54ec7cb725bfc6b90beafb074321e38af417ab" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;mode&lt;/code&gt; is not specified and if the file already exists, the existing mode on the file is used. If &lt;code&gt;mode&lt;/code&gt; is not specified, the file does not exist, and the &lt;code&gt;:create&lt;/code&gt; action is specified, the chef-client assumes a mask value of &lt;code&gt;'0777'&lt;/code&gt; and then applies the umask for the system on which the file is to be created to the &lt;code&gt;mask&lt;/code&gt; value. For example, if the umask on a system is &lt;code&gt;'022'&lt;/code&gt;, the chef-client uses the default value of &lt;code&gt;'0755'&lt;/code&gt;. Default value: &lt;code&gt;777&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fc7b721b6b466cf9f84ac8d966ce5cb5959f310" translate="yes" xml:space="preserve">
          <source>If Apache Qpid is installed, a response similar to the following is displayed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d0646b0ac09407cff3cfbbc1bc0b57b7a0ed5f9" translate="yes" xml:space="preserve">
          <source>If Apache Solr is running out of memory, the &lt;code&gt;/var/log/opscode/opscode-solr4/current&lt;/code&gt; log file will contain a message similar to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69bd6c3aa732358cdbc9526df2f285c9466c87ce" translate="yes" xml:space="preserve">
          <source>If Subversion is being used as the version source control application, it is important not to upload certain files that Subversion uses to maintain the version history of each file. This is because the chef-client will never use it while configuring nodes, plus the amount of data in an upload that includes top-level Subversion data could be significant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eed7d93d6e09cb66f64ca7ff25ecb0a8c60cdc1" translate="yes" xml:space="preserve">
          <source>If a DSC script contains configuration data that takes parameters, those parameters may be passed using the &lt;code&gt;flags&lt;/code&gt; property. For example, the following Windows PowerShell script takes parameters for the &lt;code&gt;EditorChoice&lt;/code&gt; and &lt;code&gt;EditorFlags&lt;/code&gt; settings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69debc6b40b825ce5a8cb0296e55c707ecd542c4" translate="yes" xml:space="preserve">
          <source>If a chef-shell.rb file is not found, chef-shell will attempt to load the client.rb file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="496c0d9b3159e8d27b7e33f784e5be2ae3b10fc0" translate="yes" xml:space="preserve">
          <source>If a chef-shell.rb file is not found, chef-shell will attempt to load the solo.rb file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d8becfb217c7bf59f23491917ffe6672556bb0f" translate="yes" xml:space="preserve">
          <source>If a client makes an HTTP request to the server that returns a non-specific error message, this is typically an issue with the &lt;strong&gt;opscode-chef&lt;/strong&gt; or &lt;strong&gt;opscode-erchef&lt;/strong&gt; services. View the full error message for these services in their respective log files. The error is most often a stacktrace from the application error. In some cases, the error message will clearly indicate a problem with another service, which can then be investigated further. For non-obvious errors, please contact Chef support services.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bd5d13ac7719890ac9d9968a717cd3dfdc5dee0" translate="yes" xml:space="preserve">
          <source>If a configuration file is specified using the &lt;code&gt;-c&lt;/code&gt; option, chef-shell will use the specified configuration file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74bb95df8f27fc8d4ee7d83c01f8e6cafd1af588" translate="yes" xml:space="preserve">
          <source>If a cookbook has a dependency on a recipe that is located in another cookbook, that dependency must be declared in the metadata.rb file for that cookbook using the &lt;code&gt;depends&lt;/code&gt; keyword.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e69995ec3fb52d79b80b6c34c28ba53fd42baee3" translate="yes" xml:space="preserve">
          <source>If a cookbook is frozen and the &lt;code&gt;--force&lt;/code&gt; option is not specified, knife will return an error message similar to the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b82a6d7f95f779f2ed6b36f1244ed9d9bdb5d94e" translate="yes" xml:space="preserve">
          <source>If a cookbook is not explicitly given a version constraint the environment will assume the cookbook has no version constraint and will use any version of that cookbook with any node in the environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cbdc514c762cadd83eb6b2a7905d377301c63f5" translate="yes" xml:space="preserve">
          <source>If a hostname is not resolvable, refer to a local systems administrator for specific guidance on how to add the hostname to the DNS system. If the Chef server is being into a testing environment, just add the hostname to &lt;code&gt;/etc/hosts&lt;/code&gt;. The following example shows how a hostname can be added to &lt;code&gt;/etc/hosts&lt;/code&gt; when running Red Hat or CentOS:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f275e35018a9d16023858c2e088b49909817650" translate="yes" xml:space="preserve">
          <source>If a job dies, all remaining processes with the same process ID may be kept running. Set to &lt;code&gt;true&lt;/code&gt; to kill all remaining processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41dbf8f42ccb056692dbc44d76a8be4545732d5e" translate="yes" xml:space="preserve">
          <source>If a named configuration is not provided, chef-shell will attempt to load the chef-shell.rb file from the &lt;code&gt;.chef&lt;/code&gt; directory. For example: &lt;code&gt;~/.chef/chef_shell.rb&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32918f44eabf2a951f49e12d2776173dfc580e3b" translate="yes" xml:space="preserve">
          <source>If a new private key was generated, both the private and public keys are returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="205e316213f218617190c5827d336416606f1901" translate="yes" xml:space="preserve">
          <source>If a response other than &lt;code&gt;&quot;0 processes are in enforce mode&quot;&lt;/code&gt; or &lt;code&gt;&quot;0 profiles are in enforce mode.&quot;&lt;/code&gt; is returned, AppArmor must be set to &lt;code&gt;Complaining&lt;/code&gt; mode or disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f65e38e63dd26f395e44ecf3c75422a434b6cbb8" translate="yes" xml:space="preserve">
          <source>If a response other than &lt;code&gt;&quot;Disabled&quot;&lt;/code&gt; or &lt;code&gt;&quot;Permissive&quot;&lt;/code&gt; is returned, SELinux must be disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="767d31dee0bee4f220fb19aea47cc2e403883935" translate="yes" xml:space="preserve">
          <source>If a string or a block return &lt;code&gt;false&lt;/code&gt;, the chef-client run will stop and an error is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8a11c1eb44464d95eb0351a749eb40115ebb57f" translate="yes" xml:space="preserve">
          <source>If an audit was unsuccessful, the chef-client will return output similar to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91ad06f50b4f89f96885888b94511a44c3bf8460" translate="yes" xml:space="preserve">
          <source>If an environment variable is set, it &lt;strong&gt;MUST&lt;/strong&gt; be lowercase. If it is not, add a lowercase version of that proxy variable to the shell (e.g. &lt;code&gt;~/.bashrc&lt;/code&gt;) using one (or more) the following commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad33322866f226833fc3131fe5565821ae55bcf5" translate="yes" xml:space="preserve">
          <source>If an explicit &lt;code&gt;gem_binary&lt;/code&gt; parameter is not being used with the &lt;code&gt;gem_package&lt;/code&gt; resource, it is preferable to provide the install options as a hash. This approach allows the provider to install the gem without needing to spawn an external gem process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a9a7dd910f703d188375b213f4be87ab6d6a834" translate="yes" xml:space="preserve">
          <source>If an organization is using an internal certificate authority, then the root certificate will not appear in any &lt;code&gt;cacerts.pem&lt;/code&gt; file that ships by default with operating systems and web browsers. Because of this, no currently deployed system will be able to verify certificates that are issued in this manner. To allow other systems to trust certificates from an internal certificate authority, this root certificate will need to be configured so that other systems can follow the chain of authority back to the root certificate. (An intermediate certificate is not enough becuase the root certificate is not already globally known.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62be9a9df074f863db850edb7dc5d7d5523e1e1b" translate="yes" xml:space="preserve">
          <source>If any of the status values return &lt;code&gt;fail&lt;/code&gt;, this typically means the Chef server is unavailable for that service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1ca4b758fe2dfaaa5a823603ce9cdf31e76865b" translate="yes" xml:space="preserve">
          <source>If anything other than &lt;code&gt;0&lt;/code&gt; is returned, the machine is running the &lt;code&gt;xen&lt;/code&gt; kernel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74b724c553d09b751a8551e4d4b34fad54f353f1" translate="yes" xml:space="preserve">
          <source>If it is verified that the primary host is going to be down for a while, the secondary can be promoted to primary:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11cde72d18e1f89697db55c813e56a8644fb353e" translate="yes" xml:space="preserve">
          <source>If it remains &lt;code&gt;DUnknown&lt;/code&gt;, DRBD on the secondary can be manually restarted and it will start to sync. The &lt;code&gt;DUnknown&lt;/code&gt; status is the report which indicates that DRBD sees no network connection to its partner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5b2a24c15cc22d8b13afc97c59c54fcb57778b3" translate="yes" xml:space="preserve">
          <source>If multiple configuration files exists in a &lt;code&gt;.d&lt;/code&gt; directory, ensure that the same setting has the same value in all files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b16c135af2e01375b9d4f2784e0c265f3e2e8538" translate="yes" xml:space="preserve">
          <source>If multiple cookbook directories are being used, chef-solo expects the tar.gz archive to have a directory structure similar to the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91786dd1de4f2bc3850b5117719bd4f94366343a" translate="yes" xml:space="preserve">
          <source>If no properties are marked &lt;code&gt;true&lt;/code&gt;, the property that defaults to the &lt;code&gt;name&lt;/code&gt; of the resource is marked &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cd6bff0a9e64406677f6ff80bff75e414495916" translate="yes" xml:space="preserve">
          <source>If no, recursively check if the user is a member of a security group that has permission to that object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91cc499a6774d37bd949570e07c6e9cd783ac5c6" translate="yes" xml:space="preserve">
          <source>If processes is started by using the &lt;strong&gt;execute&lt;/strong&gt; or &lt;strong&gt;script&lt;/strong&gt; resources (or any of the resources based on those two resources, such as &lt;strong&gt;bash&lt;/strong&gt;), use the &lt;code&gt;environment&lt;/code&gt; attribute to alter the environment that will be passed to the process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="661f6db2649f37b7838e2b28fa6528b301f915ff" translate="yes" xml:space="preserve">
          <source>If rights are not specified, nothing will be changed. The chef-client does not clear out the rights on a file or directory if rights are not specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a39c6157e8f1d54351a409bf70a5e7381e00115" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;SEARCH_QUERY&lt;/code&gt; does not contain a colon character (&lt;code&gt;:&lt;/code&gt;), then the default query pattern is &lt;code&gt;tags:*#{@query}* OR roles:*#{@query}* OR fqdn:*#{@query}* OR addresses:*#{@query}*&lt;/code&gt;, which means the following two search queries are effectively the same:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8498f556039582727a40dfad74f70aec92e7ea99" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;apache2_module_conf_generate.pl&lt;/code&gt; file was located in the cookbook directory under &lt;code&gt;files/host-foo.example.com/&lt;/code&gt;, the specified file(s) would only be copied to the machine with the domain name foo.example.com.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12c7c122913e605acd5b37d936014bb7e2bfcd73" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;deny_rights&lt;/code&gt; permission were to be used instead, something could slip through unless all users and groups were denied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="512b14bc0b553f555695a29c337f27bfc2006d55" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;include_recipe&lt;/code&gt; method is used more than once to include a recipe, only the first inclusion is processed and any subsequent inclusions are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06a33b7d3c6ccf4a5a3cf306b4a0bb6cbd7f077c" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;opscode&lt;/code&gt; and &lt;code&gt;opscode-pgsql&lt;/code&gt; user and group identifiers exist prior to installing the Chef server, the Chef server installation process will use the existing identifiers instead of creating them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb0d2d3048b0c948341bacc1b98c432e3920f8ef" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;source&lt;/code&gt; property is not specified, the package name MUST be exactly the same as the display name found in &lt;strong&gt;Add/Remove programs&lt;/strong&gt; or exacty the same as the &lt;code&gt;DisplayName&lt;/code&gt; property in the appropriate registry key:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="989e5301546cd0cf765abaf7e48030612a25d1cc" translate="yes" xml:space="preserve">
          <source>If the &lt;strong&gt;opscode-expander&lt;/strong&gt; does not start correctly, then take a look at the &lt;code&gt;/var/log/opscode/opscode-expander/current&lt;/code&gt; log file for error messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55be02342c352f32ffa213a7c354b4f364f60812" translate="yes" xml:space="preserve">
          <source>If the &lt;strong&gt;opscode-expander&lt;/strong&gt; is running, check the queue length:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2cc5e4fb11cd648256f7fc9f1ea04b3a57e7138" translate="yes" xml:space="preserve">
          <source>If the &lt;strong&gt;service&lt;/strong&gt; resource cannot find the appropriate command to verify the status of a service, why-run mode will assume that the command would have been installed by a previous resource and that the service would not be running</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3559f7bf6bc7db4328121e0dadf6928f69861ef2" translate="yes" xml:space="preserve">
          <source>If the Chef server is configured to use HTTP, add the following settings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0235d0bb664658bcfc205f95a36ab4557e24fd74" translate="yes" xml:space="preserve">
          <source>If the Chef server is configured to use HTTPS (such as the hosted Chef server), add the following settings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d74da6d6638a71d85488b61153ea70009181628" translate="yes" xml:space="preserve">
          <source>If the RabbitMQ queue that is used by Chef Analytics stops consuming messages, the Chef server data partition will fill up and may affect the overall performance of the Chef server application itself. The settings for the RabbitMQ queue are tunable, including for queue length monitoring, queue capacity, maximum number of messages that can be in the queue before messages are dropped, the point at which messages are dropped, for settings used by the rabbitmq-management plugin, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88f5b110475f716e306edc79488de754359f1127" translate="yes" xml:space="preserve">
          <source>If the SSL certificate can be verified, the response to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54603050365f5935d91f6bbd0b58868c51efb945" translate="yes" xml:space="preserve">
          <source>If the SSL certificate cannot be verified, the response to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60ac8d4c45796b7f816fe6dab06d2ffe14f54582" translate="yes" xml:space="preserve">
          <source>If the UID and GID of &lt;code&gt;opscode&lt;/code&gt; and &lt;code&gt;opscode-pgsql&lt;/code&gt; do not match on both backend Chef server machines, a high availability configuration will not run correctly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01932a6957fffa9dbb258444cdb650eae100c336" translate="yes" xml:space="preserve">
          <source>If the audit was successful, the chef-client will return output similar to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="606859ebff66c25541496f4363eca3830345a05e" translate="yes" xml:space="preserve">
          <source>If the authentication is happening on the node, there are a number of common causes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dee1bf2e56c29f2932c2296531ca6ef100595ab" translate="yes" xml:space="preserve">
          <source>If the authentication request occurs during the initial chef-client run, the issue is most likely with the private key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9bc48d3bbf4cdb78ab1301ce8d35ced051e84e4" translate="yes" xml:space="preserve">
          <source>If the chef-server.rb file does not exist, create a file called &lt;code&gt;chef-server.rb&lt;/code&gt; and put it in the &lt;code&gt;/etc/opscode/&lt;/code&gt; directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ef478279d5431bb3849585280afb98faa734fbd" translate="yes" xml:space="preserve">
          <source>If the chosen node won&amp;rsquo;t promote, run the following commands on the other host to reset its disk state:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76b307eadc6beb3a5dfe0a52b8560461accab905" translate="yes" xml:space="preserve">
          <source>If the defaults have been changed for any reason, and if that change would result in less than 2 UID/GIDs being available to the &lt;code&gt;useradd&lt;/code&gt; program, edit &lt;code&gt;/etc/login.defs&lt;/code&gt; with changes to make at least 2 more UIDs and GIDs available for association. The currently used ID ranges for UIDs and GIDs can be found in &lt;code&gt;/etc/passwd&lt;/code&gt; and &lt;code&gt;/etc/group&lt;/code&gt;, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="625c7934c2d92b3cd501e889ca0b63c46c920d3b" translate="yes" xml:space="preserve">
          <source>If the hint file contains JSON content, it will be returned as a hash from the call to &lt;code&gt;hint?&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efaf7875d48cb6507de13ba6f386f36cf0581ead" translate="yes" xml:space="preserve">
          <source>If the hostname is a FQDN, it will return something like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7a8c5ac392289df5547842058370ab46ae46f1f" translate="yes" xml:space="preserve">
          <source>If the hostname is all lowercase, it will return something like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bf8ab31efd44dc5c2142045b6f066078168eaa7" translate="yes" xml:space="preserve">
          <source>If the hostname is not a FQDN, it must be configured so that it is one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="169cad190b3d043cf793e1f25f856219aa3149d2" translate="yes" xml:space="preserve">
          <source>If the hostname is resolvable, it will return something like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="070ccfd1d6eb2b05109951d1dc3fb48474f016de" translate="yes" xml:space="preserve">
          <source>If the hostname&amp;rsquo;s alphabetic parts are not all lowercase, it must be configured so that they are.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcf0bf3aefcdb1ecf6b730caf81bd41d8f285b6c" translate="yes" xml:space="preserve">
          <source>If the node has MySQL, stops MySQL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c574556a189ada2ae541464673ec26f3b7e9966" translate="yes" xml:space="preserve">
          <source>If the number of total messages continues to increase, increase the number of workers available to the &lt;strong&gt;opscode-expander&lt;/strong&gt; service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="880c0d1a1e50643a627401360f6640d536b23eca" translate="yes" xml:space="preserve">
          <source>If the original primary can be brought back online, the cluster management script run by Keepalived will try to do a DRBD takeover, based on that host&amp;rsquo;s original primary Chef server master status.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b74a4efc4ba9bf064ab480018c91b23ea52dd6d0" translate="yes" xml:space="preserve">
          <source>If the search indexes are not being updated properly, first ensure that the &lt;strong&gt;opscode-expander&lt;/strong&gt; service is running on the backend machine:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7603076f9a40bba25c0d62aa3ad27dcb9faebb55" translate="yes" xml:space="preserve">
          <source>If the secondary host is lost completely, a new host can be installed in its place, the device built, and then DRBD started. The new host will pair with the existing primary, sync data, and be ready to take over if necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96944d7b854dbaf3949ee9d3d9a534a3b34fd980" translate="yes" xml:space="preserve">
          <source>If the server returned &lt;code&gt;0&lt;/code&gt; for the &lt;code&gt;xen&lt;/code&gt; kernel, run:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27c48a30ef255df98e64a81891c1ddd97e698b01" translate="yes" xml:space="preserve">
          <source>If the server returned something other than &lt;code&gt;0&lt;/code&gt;, run:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13461f3c054e49d256f3ef4e25262573ff820348" translate="yes" xml:space="preserve">
          <source>If the service is down, the status line will appear similar to the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3bf707e0bbd6910a75b27f6fb988411804096a5" translate="yes" xml:space="preserve">
          <source>If the status of the secondary reports &lt;code&gt;Inconsistent&lt;/code&gt; or &lt;code&gt;UpToDate&lt;/code&gt; without manual intervention, all is well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2ed236cfe6be07ee960172ad66399da5feb7841" translate="yes" xml:space="preserve">
          <source>If the upgrade process times out, re-run the command until it finishes successfully.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cedfc99c16ea6fe7b132cb8d8fd4ada052599619" translate="yes" xml:space="preserve">
          <source>If there are many customer records in an environment, a simple recipe can be used to loop over every customer, like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="489355b812373e0c5a62e178af8db4ca57c90094" translate="yes" xml:space="preserve">
          <source>If there are more than two front end machines in a cluster, the &lt;code&gt;postgresql['max_connections']&lt;/code&gt; setting should be increased. The increased value depends on the number of machines in the front end, but also the number of services that are running on each of these machines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2024f89122039ad2bb3c88f2c389f23eaff53cce" translate="yes" xml:space="preserve">
          <source>If there are multiple versions of a package installed with the same display name, all of those packages will be removed unless a version is provided in the &lt;code&gt;version&lt;/code&gt; property or unless it can be discovered in the installer file specified by the &lt;code&gt;source&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66411a08a0ad8d02ae83327209f0da3afe2aac0d" translate="yes" xml:space="preserve">
          <source>If they have not been increased, run the following commands as a root user:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8ebf5fe0c07bec1f91f92dc3e61472ad6c7f7a5" translate="yes" xml:space="preserve">
          <source>If this command is run on both back-end servers, it will put the back-end cluster into a state where no server holds the DRBD resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68d09c950e7f81b342f7640d81c9509763a3f785" translate="yes" xml:space="preserve">
          <source>If this command runs successfully, it will return the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb9c5ad0a6010b2efb9323926c30cc8a4a735b30" translate="yes" xml:space="preserve">
          <source>If two &lt;code&gt;control_group&lt;/code&gt; blocks have the same name, the chef-client will raise an exception. For example, the following &lt;code&gt;control_group&lt;/code&gt; blocks exist in different cookbooks:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e44129b045e5b7a62d0cc80a7199f36cfb2efb77" translate="yes" xml:space="preserve">
          <source>If values are missing, they will not be overwritten. If &lt;code&gt;public_key&lt;/code&gt; is null, the public key will not be overwritten.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="791157964bab4dda8da2fd1d925eabc19f42bc13" translate="yes" xml:space="preserve">
          <source>If we go back to the &lt;a href=&quot;../index&quot;&gt;overview of Chef&lt;/a&gt;, but then focus only on where attributes are located, it looks something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea3dea0a7b845f3a316a5ef74fe40ec5e759f1f2" translate="yes" xml:space="preserve">
          <source>If yes, allow the user to perform the action</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9104ae2f9e0c522c98da73ae95231f5596737c0" translate="yes" xml:space="preserve">
          <source>If you are familiar with Capistrano, the following examples should help you know when to use the various callbacks that are available. If you are not familiar with Capistrano, then follow the semantic names of these callbacks to help you determine when to use each of the callbacks within a recipe that is built with the &lt;strong&gt;deploy&lt;/strong&gt; resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e03c2da22677ef6f960ab0a2090de3de5fb57ac2" translate="yes" xml:space="preserve">
          <source>If you are using &lt;code&gt;chef-sugar&lt;/code&gt;&amp;mdash;a &lt;a href=&quot;https://supermarket.chef.io/cookbooks/chef-sugar&quot;&gt;community cookbook&lt;/a&gt;&amp;mdash;it must be version 3.0.1 (or higher) to use the previous example. If you are using an older version of &lt;code&gt;chef-sugar&lt;/code&gt;, the following workaround is required:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="804130c5db94aa7a8fb15512db2c33dbc59e94c1" translate="yes" xml:space="preserve">
          <source>If you get to a situation in which the primary host is lost and unrecoverable, but the last status of the DRBD pair was reporting that the secondary node was in an &lt;code&gt;Inconsistent&lt;/code&gt; state, it is very likely that some data will be lost. The DRBD status on the remaining host will look something like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="162c6b9094bbc02a72aa660b6e8d98c7fa493285" translate="yes" xml:space="preserve">
          <source>If you have access to Chef server (hosted or on premises), you can download the starter kit. The starter kit will create the necessary configuration files&amp;mdash;the .chef directory, knife.rb, the ORGANIZATION-validator.pem, and USER.pem files) with the correct information that is required to interact with the Chef server. Simply download the starter kit and then move it to the desired location on your workstation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4a12b7982fed6e3b23b3ea24cc1dd4a5fd9f600" translate="yes" xml:space="preserve">
          <source>If you just want to use each result of the search and don&amp;rsquo;t care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19a7af058bcd2c81afdb9fe4d9205f96c378ff4a" translate="yes" xml:space="preserve">
          <source>If you receive a &lt;code&gt;missing read permission&lt;/code&gt; error when running the &lt;code&gt;knife user list&lt;/code&gt; subcommand after the upgrade process is finished, you will need to update the value for the &lt;code&gt;chef_server_url&lt;/code&gt; setting in the knife.rb file. The default value for that setting is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="405b7077f71a062445f1f0e185c119d38d1b3184" translate="yes" xml:space="preserve">
          <source>If you want to see all of the information about resources in a single document, see: &lt;a href=&quot;https://docs.chef.io/resources.html&quot;&gt;https://docs.chef.io/resources.html&lt;/a&gt;. Keep reading this page for topics about individual resources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2030762608f27b7f54ad07e5d3c6d542c0700def" translate="yes" xml:space="preserve">
          <source>If your organization has provided custom SSL certificates to the Chef server, the locations of that custom certificate and private key are defined in &lt;code&gt;/etc/opscode/chef-server.rb&lt;/code&gt; as values for the &lt;code&gt;nginx['ssl_certificate']&lt;/code&gt; and &lt;code&gt;nginx['ssl_certificate_key']&lt;/code&gt; settings. Delete the files referenced in those two settings and regenerate new keys using the same authority.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baced609b0b9701696a6a5dee6025595a9e72037" translate="yes" xml:space="preserve">
          <source>If zsh is your preferred shell then run the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="204a79176dbc2713e2aedfe9daa8c3b5fde04ec2" translate="yes" xml:space="preserve">
          <source>If, in the example above, the second location was used, then create the &lt;code&gt;.chef/bootstrap/&lt;/code&gt; directory in the chef-repo, and then create the Embedded Ruby (ERB) template file by running commands similar to the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f31438f3d7308dc487142bb2532411156f515867" translate="yes" xml:space="preserve">
          <source>Ignore the following error messages:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d095db2655ccb8ceebbf3cb74aa975ecd24cbc1" translate="yes" xml:space="preserve">
          <source>In 64-bit versions of Microsoft Windows, &lt;code&gt;HKEY_LOCAL_MACHINE\SOFTWARE\Example&lt;/code&gt; is a re-directed key. In the following examples, because &lt;code&gt;HKEY_LOCAL_MACHINE\SOFTWARE\Example&lt;/code&gt; is a 32-bit key, the output will be &amp;ldquo;Found 32-bit key&amp;rdquo; if they are run on a version of Microsoft Windows that is 64-bit:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7c1c9feaf4e28842124d3d962f7fa548589b990" translate="yes" xml:space="preserve">
          <source>In UNIX, a process environment is a set of key-value pairs made available to a process. Programs expect their environment to contain information required for the program to run. The details of how these key-value pairs are accessed depends on the API of the language being used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18f558ecde6b1fc8057af06f224e5972b13ceede" translate="yes" xml:space="preserve">
          <source>In a command window, enter each of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="905b030c496011e62ad719bedf6f41554a62ee5e" translate="yes" xml:space="preserve">
          <source>In a command window, enter the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1f832a8cb1b44431be3cb41b06d52fb7d934301" translate="yes" xml:space="preserve">
          <source>In a command window, navigate to the chef-repo:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1699111ea29d4541d83bb5756b7092ee6f8f1cb4" translate="yes" xml:space="preserve">
          <source>In a large installation, restricting these results to a subset of results may be necessary:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1abd9db0e8e44a1622c1d6c1bff31bd7f359e01" translate="yes" xml:space="preserve">
          <source>In a specified recipe</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e4e6998329f2a22ead209c9662b2eac7d496186" translate="yes" xml:space="preserve">
          <source>In addition to attributes and recipes, the following items are also part of cookbooks:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19c5cf341a8e724ec359f55c4757f5d422efac36" translate="yes" xml:space="preserve">
          <source>In addition to the &lt;code&gt;shared&lt;/code&gt; sub-directory, the deploy process will create sub-directories named &lt;code&gt;releases&lt;/code&gt; and &lt;code&gt;current&lt;/code&gt; (also in the &lt;code&gt;deploy&lt;/code&gt; directory). The &lt;code&gt;release&lt;/code&gt; directory holds (up to) five most recently deployed versions of an application. The &lt;code&gt;current&lt;/code&gt; directory holds the currently-released version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="573e17e899694fb831be9dfbaeecc32b286492ba" translate="yes" xml:space="preserve">
          <source>In addition to the default settings in a knife.rb file, there are other subcommand-specific settings that can be added. When a subcommand is run, knife will use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29e4400f21d963a3efb5346c89060ffd0c1bf38e" translate="yes" xml:space="preserve">
          <source>In addition, the &lt;a href=&quot;resource_chef_handler&quot;&gt;chef_handler&lt;/a&gt; resource is configured and run using the &lt;strong&gt;chef_handler&lt;/strong&gt; cookbook, which is the location in which custom handlers are defined and maintained. Despite being defined in a cookbook (as a custom resource), the &lt;strong&gt;chef_handler&lt;/strong&gt; resource should otherwise be considered a &amp;ldquo;platform resource&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eabe0fe02d72d60e846fd39d62b55953b9fb0c8" translate="yes" xml:space="preserve">
          <source>In addition, the log file may contain additional entries that detail the amounts of time spent interacting with other services:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea17f2db46fdcff64347e110a9a5f7ae5285ba3f" translate="yes" xml:space="preserve">
          <source>In addition:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58aaae96e36fa8c74d590a189218bfd62501090a" translate="yes" xml:space="preserve">
          <source>In an environment that requires proxies to reach the Internet, many Chef commands will not work until they are configured correctly. To configure Chef to work in an environment that requires proxies, set the &lt;code&gt;http_proxy&lt;/code&gt;, &lt;code&gt;https_proxy&lt;/code&gt;, &lt;code&gt;ftp_proxy&lt;/code&gt;, and/or &lt;code&gt;no_proxy&lt;/code&gt; environment variables to specify the proxy settings using a lowercase value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47b59edaf8d8972a07f4ed3313eb39d4c92258a5" translate="yes" xml:space="preserve">
          <source>In an expanded run-list</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de04d32794dccb880453f2ad85961169dda83ddd" translate="yes" xml:space="preserve">
          <source>In both cases, if the resource is not found, an exception is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96ba307ac6b20934cfe4cfd99422c5b3d8c10ecb" translate="yes" xml:space="preserve">
          <source>In both cases, the chef-client will use the default action (&lt;code&gt;:install&lt;/code&gt;) to install the &lt;code&gt;tar&lt;/code&gt; package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5db3b049abd17c0c39d103d38aa5728f535b4c25" translate="yes" xml:space="preserve">
          <source>In certain situations it may be useful to stop a chef-client run entirely by using an unhandled exception. The &lt;code&gt;raise&lt;/code&gt; and &lt;code&gt;fail&lt;/code&gt; keywords can be used to stop a chef-client run in both the compile and execute phases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cdbb57ef2267f8fdfaca7148251ac567a34ed83" translate="yes" xml:space="preserve">
          <source>In certain situations the proxy used by the Chef server requires authentication. In this situation, three settings must be added to the configuration file. Which settings to add depends on the protocol used to access the Chef server: HTTP or HTTPS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f098afe2beaa8f78ffb6fe6935228903a62c0134" translate="yes" xml:space="preserve">
          <source>In certain situations this option may be used to update &lt;code&gt;normal&lt;/code&gt; attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45c93e9ac183db219b3dc54a8db13f90dbb89523" translate="yes" xml:space="preserve">
          <source>In chef-shell, it is possible to get extremely verbose debugging using the tracing feature in Interactive Ruby (IRb). chef-shell provides a shortcut for turning tracing on and off. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c320d48b6a7545d2b12c64a479cb64b71e1285f" translate="yes" xml:space="preserve">
          <source>In general, attribute precedence is set to enable cookbooks and roles to define attribute defaults, for normal attributes to define the values that should be specific for a node, and for override attributes to force a certain value, even when a node already has that value specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aede350a28cd698ba96d1b5878dad3e89273f096" translate="yes" xml:space="preserve">
          <source>In general, the API client list should be managed using knife or the Chef server management console, as opposed to the Chef server API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdb76b154325d039481cd1c691c6cd66e8642a45" translate="yes" xml:space="preserve">
          <source>In general, use this approach carefully and only after it is determined that nil or empty values won&amp;rsquo;t provide the expected result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28145914f96bad05afb932c52bb4ab119e613c7b" translate="yes" xml:space="preserve">
          <source>In large, distributed organizations the ability to modify the configuration of systems is sometimes segmented across teams, often with varying levels of access to those systems. For example, core application services may be deployed to systems by a central server provisioning team, and then developers on different teams build tooling to support specific applications. In this situation, a developer only requires limited access to machines and only needs to perform the operations that are necessary to deploy tooling for a specific application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abd2855f5102bac9c9dab545385962ba077c806e" translate="yes" xml:space="preserve">
          <source>In many cases, it is better to use the &lt;strong&gt;package&lt;/strong&gt; resource instead of this one. This is because when the &lt;strong&gt;package&lt;/strong&gt; resource is used in a recipe, the chef-client will use details that are collected by Ohai at the start of the chef-client run to determine the correct package application. Using the &lt;strong&gt;package&lt;/strong&gt; resource allows a recipe to be authored in a way that allows it to be used across many platforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96164a31cbe44fff73b67d0ae88e3a5b49556159" translate="yes" xml:space="preserve">
          <source>In most cases, using the empty values for the layout modifiers will prevent the chef-client from passing symbolic linking information to a node during the chef-client run. However, in some cases, it may be preferable to ensure that one (or more) of these layout modifiers do not pass any symbolic linking information to a node during the chef-client run at all. Because each of these layout modifiers are a Hash, the &lt;code&gt;clear&lt;/code&gt; instance method can be used to clear out these values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f87cc0e77f3c3bdf76378f8984038062a488c7d4" translate="yes" xml:space="preserve">
          <source>In non-Chef Ruby, the syntax is &lt;code&gt;include&lt;/code&gt; (without the &lt;code&gt;:&lt;/code&gt; prefix), but without the &lt;code&gt;:&lt;/code&gt; prefix the chef-client will try to find a provider named &lt;code&gt;include&lt;/code&gt;. Using the &lt;code&gt;:&lt;/code&gt; prefix tells the chef-client to look for the specified class that follows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f60117c08e86cbc3fbb470f1ad7958f18404696d" translate="yes" xml:space="preserve">
          <source>In order to read or write 32-bit registry keys on 64-bit machines running Microsoft Windows, the &lt;code&gt;architecture&lt;/code&gt; property must be set to &lt;code&gt;:i386&lt;/code&gt;. The &lt;code&gt;:x86_64&lt;/code&gt; value can be used to force writing to a 64-bit registry location, but this value is less useful than the default (&lt;code&gt;:machine&lt;/code&gt;) because the chef-client returns an exception if &lt;code&gt;:x86_64&lt;/code&gt; is used and the machine turns out to be a 32-bit machine (whereas with &lt;code&gt;:machine&lt;/code&gt;, the chef-client is able to access the registry key on the 32-bit machine).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eedbbdec3b6bacc593ff631c68e9eeab619658b5" translate="yes" xml:space="preserve">
          <source>In order to use the &lt;code&gt;:rollback&lt;/code&gt; action with this deployment, the &lt;code&gt;:rollback&lt;/code&gt; action must be in a resource block that has the same resource name as the initial deploy action. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="180a91f8267d7175a9c9e3f190d6133e7cba419e" translate="yes" xml:space="preserve">
          <source>In some cases, the chef-client may receive a 401 response to the authentication request and a 403 response to an authorization request. An authentication error error may look like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eb096578ad46f5b37d03fd8583e4986b89edc47" translate="yes" xml:space="preserve">
          <source>In some cases, the hostname for the Chef server needs to be updated. The process for updating a hostname varies, depending on the platform on which the Chef server will run. Refer to the manual for the platform or contact a local systems administrator for specific guidance for a specific platform. The following example shows how a hostname can be changed when running Red Hat or CentOS:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0be279d4ffb8611cef50ee9f315ea05ef024891" translate="yes" xml:space="preserve">
          <source>In some cases, the value for a property cannot be known until the execution phase of a chef-client run. In this situation, using lazy evaluation of property values can be helpful. Instead of a property being assigned a value, it may instead be assigned a code block. The syntax for using lazy evaluation is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfeb874790f7add1af418c19609dc51fb6b6de2f" translate="yes" xml:space="preserve">
          <source>In some instances, after the upgrade processes is complete, it may be required to stop Keepalived on the back end secondary server, then restart Keepalived on the back end primary server, and then restart Keepalived on the back end secondary server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdd7c6ed97b24c66f94c7bf4f20ffbb0006745a0" translate="yes" xml:space="preserve">
          <source>In the $EDITOR enter the node data in JSON:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc9521ba94e974aa987ad2bd8810cf5d7988edd3" translate="yes" xml:space="preserve">
          <source>In the $EDITOR enter the role data in JSON:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa6c5574f0247c6817bf869efd07258f7054aae5" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;deploy&lt;/code&gt; directory, a sub-directory named &lt;code&gt;shared&lt;/code&gt; must be created. This sub-directory is where configuration and temporary files will be kept. A typical Ruby on Rails application will have &lt;code&gt;config&lt;/code&gt;, &lt;code&gt;log&lt;/code&gt;, &lt;code&gt;pids&lt;/code&gt;, and &lt;code&gt;system&lt;/code&gt; directories within the &lt;code&gt;shared&lt;/code&gt; directory to keep the files stored there independent of the code in the source repository.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8076a90ee8ebaf1ba0a7e9442e4a9672d2b8cd14" translate="yes" xml:space="preserve">
          <source>In the &lt;strong&gt;Change Password&lt;/strong&gt;, enter the old password and then the new password.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b701ed43aa6d29124306946ddc8ff4d31952cb2" translate="yes" xml:space="preserve">
          <source>In the &lt;strong&gt;Create Client&lt;/strong&gt; dialog box, enter the name of the chef-validator key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01596281cebfb976671dfeebde7f079bf5f6f427" translate="yes" xml:space="preserve">
          <source>In the &lt;strong&gt;Create Client&lt;/strong&gt; dialog box, enter the name of the client key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="770323baedc663734cc0299088bef384797c780c" translate="yes" xml:space="preserve">
          <source>In the &lt;strong&gt;Create Role&lt;/strong&gt; dialog box, enter the name of the role and a description.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02f0477c3f2208fdf183e2760cbc23b12d038b58" translate="yes" xml:space="preserve">
          <source>In the &lt;strong&gt;Create a Data Bag Item&lt;/strong&gt; dialog box, enter the data bag identifier, and then JSON data that defines the data bag item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd0a1675ddf452aa5a4d492fbdcccb86a35e806a" translate="yes" xml:space="preserve">
          <source>In the &lt;strong&gt;Create a Data Bag&lt;/strong&gt; dialog box, enter the name of the data bag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25f7049e4f829928d5e8a320eb33e47b1356d46b" translate="yes" xml:space="preserve">
          <source>In the &lt;strong&gt;Create an Environment&lt;/strong&gt; dialog box, enter the name of the environment and a description.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d38118bed8bc84b8df86fd273947c49fbc359b03" translate="yes" xml:space="preserve">
          <source>In the &lt;strong&gt;Edit Environment Attributes&lt;/strong&gt; dialog box, enter the JSON data that defines the attribute (or attributes).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df76aaf189017846696962f4ec3ec38835415c06" translate="yes" xml:space="preserve">
          <source>In the &lt;strong&gt;Edit Node Attributes&lt;/strong&gt; dialog box, make your changes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dd09a1779007e34d1f08a68c533841e5aee0b63" translate="yes" xml:space="preserve">
          <source>In the &lt;strong&gt;Edit Node Run List&lt;/strong&gt; dialog box, drag the role or recipe from the &lt;strong&gt;Available Roles&lt;/strong&gt; or &lt;strong&gt;Available Recipes&lt;/strong&gt; lists to the current run-list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32e8d2733e300b7b267bf42619692f24e3b3e08c" translate="yes" xml:space="preserve">
          <source>In the &lt;strong&gt;Edit Node Run List&lt;/strong&gt; dialog box, drag the role or recipe from the &lt;strong&gt;Current Run List&lt;/strong&gt; to the list of available roles or recipes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61a24f38517d654d52a332d3f886fc6da6fcdbfd" translate="yes" xml:space="preserve">
          <source>In the &lt;strong&gt;Edit Node Run List&lt;/strong&gt; dialog box, make your changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13fb9f47d4a21e86f1e869a7ca227c79bca7174c" translate="yes" xml:space="preserve">
          <source>In the &lt;strong&gt;Edit Role Attributes&lt;/strong&gt; dialog box, enter the JSON data that defines the attribute (or attributes).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a3a22e14a47c58f5e5dd35022c37a64c2044523" translate="yes" xml:space="preserve">
          <source>In the &lt;strong&gt;Invite User&lt;/strong&gt; dialog box, enter the Chef server user name for the user to be invited, and then click the &lt;strong&gt;Invite&lt;/strong&gt; button:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a47563894db41760fd1955cf4d28786e0073fd56" translate="yes" xml:space="preserve">
          <source>In the &lt;strong&gt;Leave Organization&lt;/strong&gt; dialog box, confirm that the key should be regenerated and click the &lt;strong&gt;Leave Organization&lt;/strong&gt; button:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4412fbf4e67846488800fc8c8cbd51889997b59" translate="yes" xml:space="preserve">
          <source>In the &lt;strong&gt;Leave Organization&lt;/strong&gt; dialog box, confirm that you want to leave the organization, and then click the &lt;strong&gt;Leave Organization&lt;/strong&gt; button:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9939d19fcd9b0821d7e1440cec13efab5c969fe3" translate="yes" xml:space="preserve">
          <source>In the &lt;strong&gt;Manage Node Tags&lt;/strong&gt; dialog box, enter the name of the tag and then select &lt;strong&gt;Add Tags&lt;/strong&gt; from the drop-down.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69b15118e334433d37ff7c5a7e834d70b9fd74ab" translate="yes" xml:space="preserve">
          <source>In the &lt;strong&gt;Manage Node Tags&lt;/strong&gt; dialog box, enter the name of the tag and then select &lt;strong&gt;Delete Tags&lt;/strong&gt; from the drop-down.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ab1572d1603e508ec1c4a21e0cea8d4ff3d3cb3" translate="yes" xml:space="preserve">
          <source>In the &lt;strong&gt;Reset Key&lt;/strong&gt; dialog box, confirm that the key should be regenerated and click the &lt;strong&gt;Regenerate Key&lt;/strong&gt; button:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="446e933968d25f42b48fee84e16e95002748217f" translate="yes" xml:space="preserve">
          <source>In the &lt;strong&gt;Reset Key&lt;/strong&gt; dialog box, confirm that the key should be regenerated and click the &lt;strong&gt;Reset Key&lt;/strong&gt; button:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="138305f2f115f12a2a5b2a4053a3bc6f63a65d00" translate="yes" xml:space="preserve">
          <source>In the &lt;strong&gt;Reset Key&lt;/strong&gt; dialog box, copy the key directly from the dialog box or click the &lt;strong&gt;Download&lt;/strong&gt; button to download the key to your local machine:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="451fb942423d42cec67c1280a052c0ebd3b65a89" translate="yes" xml:space="preserve">
          <source>In the chef-client 11.12 release, the &lt;code&gt;local_key_generation&lt;/code&gt; setting was added to the client.rb file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ec8adc342ff3369bf9a5a1f5f887e3fbb986171" translate="yes" xml:space="preserve">
          <source>In the chef-client 11.8 release, the &lt;code&gt;verify_api_cert&lt;/code&gt; setting was added to the client.rb file with a default value of &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13dc6fd06c04550aa974910f0726673dd5116c44" translate="yes" xml:space="preserve">
          <source>In the chef-client 12 release, the default value for &lt;code&gt;local_key_generation&lt;/code&gt; was changed to &lt;code&gt;true&lt;/code&gt; and the default value for &lt;code&gt;ssl_verify_mode&lt;/code&gt; was changed to &lt;code&gt;:verify_peer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d752f37dc6034d08647e066a721dbca89fa8753c" translate="yes" xml:space="preserve">
          <source>In the custom resource, add the following custom properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="176856285bda3b83350ab71714aaf44e0971da54" translate="yes" xml:space="preserve">
          <source>In the event of a disk full condition for the Redis data store, the &lt;code&gt;dump.rdb&lt;/code&gt; (the primary data store &lt;code&gt;.rdb&lt;/code&gt; used by Redis) can become corrupt and saved as a zero byte file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94ddaf92013522612dce8def66c8a2ee147509e6" translate="yes" xml:space="preserve">
          <source>In the previous example, two attributes will be extracted (on the Chef server) from any node that matches the search query. The result will be a simple hash with keys &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;ip&lt;/code&gt;, and &lt;code&gt;kernel_version&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="013e57af41ca681a7e220a880fc6401b6a9c80be" translate="yes" xml:space="preserve">
          <source>In the previous examples, the first resource uses the value &lt;code&gt;/foo/bar&lt;/code&gt; and the second resource uses the value provided by the code block, as long as the contents of that code block are a valid resource property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77a117e2615425bc92b96ab7de39185edc726d54" translate="yes" xml:space="preserve">
          <source>In the search box in the upper right, enter the search query and click the search icon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a1c73aedb562c9e166d8b552060f2a66c5fc712" translate="yes" xml:space="preserve">
          <source>In the top right, from the &lt;strong&gt;Environment&lt;/strong&gt; drop-down, select the environment:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aee89581886aa21e2386506b18ba53b48af6a83" translate="yes" xml:space="preserve">
          <source>In this situation, re-synchronize the system clocks with the Network Time Protocol (NTP) server, and then re-run the chef-client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="316004e9f73e3f49ce28fe316268e9fd7c6f1f5c" translate="yes" xml:space="preserve">
          <source>In this situation, run the following &lt;code&gt;chef shell-init&lt;/code&gt; command instead:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d26f4f0295c0310e400b59927a317ef8283d464" translate="yes" xml:space="preserve">
          <source>In this situation, the Chef server may be freaking out a bit, so turn off the daemons using the &lt;code&gt;chef-server-ctl stop&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6af1dace563b962c4a9de08f15504aec15619344" translate="yes" xml:space="preserve">
          <source>In versions of the chef-client prior to version 12.0, this subcommand ONLY works when run against the open source Chef server; it does not run against Enterprise Chef (including hosted Enterprise Chef), or Private Chef.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c28b24ea9cffa033927fff1a484b887282336a37" translate="yes" xml:space="preserve">
          <source>In-between each step in a deployment process, callbacks can be run using arbitrary Ruby code, including recipes. All callbacks support embedded recipes given in a block, but each callback assumes a shell command (instead of a deploy hook filename) when given a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a48ee0d0ba94beb2082b340923ce4897ddf6fdaa" translate="yes" xml:space="preserve">
          <source>Include Recipes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c789568dd3e880a06cd0f90f23b8a9c5fc96a118" translate="yes" xml:space="preserve">
          <source>Include a Class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbb428f31f3f5a1b6883c0403a29c414847f54e2" translate="yes" xml:space="preserve">
          <source>Include a Parameter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee927d1ccfeb52ef82239189616fae05f7db78fa" translate="yes" xml:space="preserve">
          <source>Incorporate changing permissions to the desired end state from within a recipe</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b14a1285c4a5787c1be0b1dd42ed3bac38b9402b" translate="yes" xml:space="preserve">
          <source>Increases the amount of time required to complete the chef-client run</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ca99b9596c479a9b6e6f878c54855b1e90605c7" translate="yes" xml:space="preserve">
          <source>Indicates that all environments, cookbooks, cookbook versions, metadata, and/or data bags will be uploaded, deleted, generated, or tested. The context depends on which knife subcommand and argument is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73cff1dfa17e12963d132047ab395fa3004284d8" translate="yes" xml:space="preserve">
          <source>Indicates that the name of the partial template file should be interpreted as a path to a file in the local file system or looked up in a cookbook using the normal rules for template files. Set to &lt;code&gt;true&lt;/code&gt; to interpret as a path to a file in the local file system and to &lt;code&gt;false&lt;/code&gt; to use the normal rules for template files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c2d342f612854c15b5fe5a525dc0a7d4fd2ebc9" translate="yes" xml:space="preserve">
          <source>Indicates the depth to which permissions will be applied. Possible values: &lt;code&gt;true&lt;/code&gt; to apply only to the first level of children; &lt;code&gt;false&lt;/code&gt; to apply to all children.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="587ef476b481b461ac346c31ee923731facca6a2" translate="yes" xml:space="preserve">
          <source>Indicates whether a permission is applied to the parent directory. Possible values: &lt;code&gt;true&lt;/code&gt; to apply to the parent directory or file and its children; &lt;code&gt;false&lt;/code&gt; to not apply only to child directories and files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="831e07ce099339256ccbc829213a3af6ade8149d" translate="yes" xml:space="preserve">
          <source>Indicates whether an attempt to bootstrap the Chef server is made. Generally only enabled on systems that have bootstrap enabled via a &lt;code&gt;server&lt;/code&gt; entry. Default value: &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a9f7e9d54483f68dfbfc4c06c4269b987dbedbf" translate="yes" xml:space="preserve">
          <source>Indicates whether the RAID array exists. Default value: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e0b8d84685da98d9c39148147e04b3d737c97e5" translate="yes" xml:space="preserve">
          <source>Individual teams have competing needs for object and object types&amp;mdash;data bags, environments, roles, and cookbooks are unique to each organization, even if they share the same name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee3d37ec17ce3a5ed57446447e34a69d1f08ea8c" translate="yes" xml:space="preserve">
          <source>Individual users who are members of a group will inherit the permissions assigned to the group. The Chef server includes the following default groups: &lt;code&gt;admins&lt;/code&gt;, &lt;code&gt;clients&lt;/code&gt;, and &lt;code&gt;users&lt;/code&gt;. For users of the hosted Chef server, an additional default group is provided: &lt;code&gt;billing_admins&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b631f69842530d659306c8f06dbad594a6b1807" translate="yes" xml:space="preserve">
          <source>Info</source>
          <target state="translated">Info</target>
        </trans-unit>
        <trans-unit id="6f15824a46981d9eb3137074ad642042ca3903de" translate="yes" xml:space="preserve">
          <source>Information about the application&amp;mdash;the user, their password, the server&amp;mdash;is stored in a data bag on the Chef server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdaddb9ce367c2ca746a97cc24d2e8817a51f27d" translate="yes" xml:space="preserve">
          <source>Inheritance</source>
          <target state="translated">Inheritance</target>
        </trans-unit>
        <trans-unit id="11f2474c2e9a0e4f8e9b1c5e78193f4bc94fd3ec" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;strong&gt;execute&lt;/strong&gt; resource. A Hash of environment variables in the form of &lt;code&gt;({&quot;ENV_VARIABLE&quot; =&amp;gt; &quot;VALUE&quot;})&lt;/code&gt;. (These variables must exist for a command to be run successfully.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a148be9fb941bcd8b34583a160292621e50b9db9" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;strong&gt;execute&lt;/strong&gt; resource. Prevent a command from creating a file when that file already exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="989dd9da77c5f931e34864686dc2b3fa0fa3933b" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;strong&gt;execute&lt;/strong&gt; resource. Prevent a command from running. This action is used to specify that a command is run only when another resource notifies it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33969b1926ff68b987269d019d60f9ed6fd95023" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;strong&gt;execute&lt;/strong&gt; resource. The amount of time (in seconds) a command is to wait before timing out. Default value: &lt;code&gt;3600&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe2b71ba25a925af0c77ffe49efe20e5d22b7344" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;strong&gt;execute&lt;/strong&gt; resource. The current working directory from which a command is run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5089d62bd1bec51f53f514e3516877796d49d466" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;strong&gt;execute&lt;/strong&gt; resource. The group name or group ID that must be changed before running a command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46c0b92acbd66677d08d455f16673ba6c1b02cb9" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;strong&gt;execute&lt;/strong&gt; resource. The return value for a command. This may be an array of accepted values. An exception is raised when the return value(s) do not match. Default value: &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8dec84925c2631c086550c8ce0e03ea2d80c8c9" translate="yes" xml:space="preserve">
          <source>Initial configuration of the Chef server is done automatically using a self-signed certificate to create the certificate and private key files for Nginx.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba58cbb8452ffe0ebc2dc7dadc99784c0ce98186" translate="yes" xml:space="preserve">
          <source>Inline Methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76c3bc374de84dce9e480165c9526d41fbc7cb3c" translate="yes" xml:space="preserve">
          <source>Inline Modules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd6c3ebf7befca9f8208f86c76e4d4180303745c" translate="yes" xml:space="preserve">
          <source>Install</source>
          <target state="translated">Install</target>
        </trans-unit>
        <trans-unit id="109dd4e329645dac75e5b384e67050804859de8f" translate="yes" xml:space="preserve">
          <source>Install &lt;code&gt;chef-ha&lt;/code&gt; package. For Red Hat and CentOS 6:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2112750a65cbfcdf6da43f85b40aefb31f01061d" translate="yes" xml:space="preserve">
          <source>Install DRBD. These steps vary, depending on the platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="675f0ccad4f712136208daf1e93632633082f60f" translate="yes" xml:space="preserve">
          <source>Install a package and/or ensure that a package is the latest version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51e5132afd138a2cd535e1dd9cea1808e976f65f" translate="yes" xml:space="preserve">
          <source>Install a package and/or ensure that a package is the latest version. This action will ignore the &lt;code&gt;version&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60da80156a5d0a6bae59ac9116ec4cab69c6184c" translate="yes" xml:space="preserve">
          <source>Install git</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5240b4d3f8dc2594233ed32b5f044e14159cb11f" translate="yes" xml:space="preserve">
          <source>Install logical volume manager (LVM) tools. For Red Hat and CentOS 6:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a187dad95ad122d0cfeac0966160584649714e6" translate="yes" xml:space="preserve">
          <source>Install on a Workstation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f81c09eee4faf74665275b31d1837e494477eefd" translate="yes" xml:space="preserve">
          <source>Install pre-release gems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ff2681835e3db93e888412063b7f67e2138836a" translate="yes" xml:space="preserve">
          <source>Install the &lt;code&gt;chef-server-core&lt;/code&gt; package. For Red Hat and CentOS 6:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65531d8099553ecf83530530f06396fc58e465a1" translate="yes" xml:space="preserve">
          <source>Install the Chef DK</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc03294bf5f3450e02f87064dfa18f46a110bdcd" translate="yes" xml:space="preserve">
          <source>Install the Chef Server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddc78ec545cc96487508545d5e5018d2012771f4" translate="yes" xml:space="preserve">
          <source>Install the Chef management console (if it is not already).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75c6118b5cf62ac572d62508518ec2c04ccc2632" translate="yes" xml:space="preserve">
          <source>Install the Chef push jobs client on all nodes using the &lt;strong&gt;push-jobs&lt;/strong&gt; cookbook, as needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0e75f7ba5e44a3327a01d63bf69c12885290f44" translate="yes" xml:space="preserve">
          <source>Install the Chef server package. For Red Hat and CentOS 6:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dbd4b23ddc0c26694db078f83b9e1c91414a031" translate="yes" xml:space="preserve">
          <source>Install the chef-client on Microsoft Windows</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e3a9bfaada6a8545a9506fc5feb20e400416aaf" translate="yes" xml:space="preserve">
          <source>Install the package on all servers that are running the Chef server. For example on Ubuntu:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0336e643b458af48aee8f355c781fd400b021e8b" translate="yes" xml:space="preserve">
          <source>Install the package on each frontend and backend Chef server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88c0992e1bcc466b60a5a11a469d99f156f2b848" translate="yes" xml:space="preserve">
          <source>Installs Apache httpd</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95e64d238c7b81bc0b470b27b4debea0eb1408c5" translate="yes" xml:space="preserve">
          <source>Installs MySQL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="254ea09fee8ca88052aa186decac7fb1011c9152" translate="yes" xml:space="preserve">
          <source>Installs a package using the &lt;code&gt;.gemrc&lt;/code&gt; file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73d954a0dc4bee45fdbf7507609aa90f9714391b" translate="yes" xml:space="preserve">
          <source>Installs the file using Bash to the path specified by the &lt;code&gt;src_filepath&lt;/code&gt; variable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72fd09958f143cd9960711f1013427215cac9af5" translate="yes" xml:space="preserve">
          <source>Instead of tracking a specific branch or doing a headless checkout, the chef-client maintains its own branch (via the &lt;strong&gt;git&lt;/strong&gt; resource) that does not exist in the upstream repository. The chef-client is then free to forcibly check out this branch to any commit without destroying the local history of an existing branch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d46e40571a8187d2783052e598738daf2781369f" translate="yes" xml:space="preserve">
          <source>Instead, use the &lt;strong&gt;script&lt;/strong&gt; resource or one of the &lt;strong&gt;script&lt;/strong&gt;-based resources (&lt;strong&gt;bash&lt;/strong&gt;, &lt;strong&gt;csh&lt;/strong&gt;, &lt;strong&gt;perl&lt;/strong&gt;, &lt;strong&gt;python&lt;/strong&gt;, or &lt;strong&gt;ruby&lt;/strong&gt;). For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18b871019a1aa643043abb16464a433d8dbbf83a" translate="yes" xml:space="preserve">
          <source>Interacting with nodes, as (or when) required, such as performing a bootstrap operation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0ade208851657f397c313bf77fda38fc5c6b920" translate="yes" xml:space="preserve">
          <source>Intermediate Certificates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a9858c9bf3149456595f98943cf88e41039822e" translate="yes" xml:space="preserve">
          <source>Interpolation</source>
          <target state="translated">Interpolation</target>
        </trans-unit>
        <trans-unit id="0de1321d43267bb2da1339f336894f8847164120" translate="yes" xml:space="preserve">
          <source>Invite a User</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="944e5ff1928d782fc3a2c95096372fb0c5cd1c7d" translate="yes" xml:space="preserve">
          <source>Invoke the library helper in a recipe:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a406a381be4b387a057e52e2bbbc563a8106c8c7" translate="yes" xml:space="preserve">
          <source>Is &lt;strong&gt;NOT&lt;/strong&gt; how Chef is run in production</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68cdeec0f49af30b9502962d2fa39fcbb0750e22" translate="yes" xml:space="preserve">
          <source>Is a simple extension of Chef</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4a4a73220c7c32f404b5e7217a2ee20f3fd09b8" translate="yes" xml:space="preserve">
          <source>Is always executed in the same order as listed in a run-list</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c6e179f18a07500e0bafb6bd7753954ea7538c3" translate="yes" xml:space="preserve">
          <source>Is an extension of RSpec, a behavior-driven development (BDD) framework for Ruby</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ce164215d749b1d5501989dd57e1e4926dd3ae8" translate="yes" xml:space="preserve">
          <source>Is authored using Ruby, which is a programming language designed to read and behave in a predictable manner</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="068d894e3721c320c949dd850ade6910a2be7771" translate="yes" xml:space="preserve">
          <source>Is defined from within the &lt;code&gt;/definitions&lt;/code&gt; directory of a cookbook</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eab9b3e231ab419a63d3046e2d7513fa139e848" translate="yes" xml:space="preserve">
          <source>Is implemented as part of a cookbook</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce7dbee8a54dece742401a94a88f72caea50af4c" translate="yes" xml:space="preserve">
          <source>Is loaded before resources during the chef-client run; this ensures the definition is available to all of the resources that may need it</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1dedf20ec98890083481808f8650388d16f5b41" translate="yes" xml:space="preserve">
          <source>Is loaded every time this executable is run</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff3dfacd425252a546fb34d7dae036896acae8a6" translate="yes" xml:space="preserve">
          <source>Is located by default at &lt;code&gt;~/chef-repo/.chef/knife.rb&lt;/code&gt; (UNIX and Linux platforms) or &lt;code&gt;c:\Users\username\.chef&lt;/code&gt; (Microsoft Windows platform, starting with Chef development kit version 0.7.0); use the &lt;code&gt;--config&lt;/code&gt; option from the command line to change this location</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93633580cd50025cba83ea3df6190b1fb984f059" translate="yes" xml:space="preserve">
          <source>Is mostly a collection of resources, defined using patterns (resource names, attribute-value pairs, and actions); helper code is added around this using Ruby, when needed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e684673fba7b3665444072bbd30ea39eb2cc52e1" translate="yes" xml:space="preserve">
          <source>Is not a resource or a custom resource</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0b4389b0bcc7f2e6165c2f1a04107358b8473e6" translate="yes" xml:space="preserve">
          <source>Is not created by default</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64cadd3cd60ae268d1d7e236f1c315fe077fe498" translate="yes" xml:space="preserve">
          <source>Is part of the Chef development kit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1346cae319b7a45e9c737a208bddfc234db6f58d" translate="yes" xml:space="preserve">
          <source>Is processed while the resource collection is compiled (whereas resources are processed while a node is converged)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa00d4b322dc776a18117ada5f85da80cc429c32" translate="yes" xml:space="preserve">
          <source>Is reusable in the same way as resources that are built into Chef</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a6d420da17a39e252184b63e19b4e3770f5ca9b" translate="yes" xml:space="preserve">
          <source>Is the fastest way to test resources and recipes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ae4a99eb58aae41e5f63c57cd58b76febdc16e1" translate="yes" xml:space="preserve">
          <source>Is the recommended way to interact with any PostgreSQL database that is part of the Chef server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c3e0118a86a47a4826cd95c19ad45364b53f121" translate="yes" xml:space="preserve">
          <source>It is definitely an encrypted databag, see?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03daea3143ee4506b075a2db45bc36e89e2c6564" translate="yes" xml:space="preserve">
          <source>It is more common to use the &lt;strong&gt;script&lt;/strong&gt;-based resource that is specific to the command shell. Chef has shell-specific resources for Bash, csh, Perl, Python, and Ruby.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faae1f6669b969488d940647d3574f718cc1713b" translate="yes" xml:space="preserve">
          <source>It is not necessary to create or fork a repository in order to clone the chef-repo from GitHub.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93883635c31fa2c7ca5d98c422893165eec71b9c" translate="yes" xml:space="preserve">
          <source>It is possible for multiple users to access the Chef server using the same knife.rb file. (A user can even access multiple organizations if, for example, each instance of the chef-repo contained the same copy of the knife.rb file.) This can be done by adding the knife.rb file to the chef-repo, and then using environment variables to handle the user-specific credential details and/or sensitive values. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52bf6891013a68bce333a2a20e65dd88538d67a6" translate="yes" xml:space="preserve">
          <source>It is possible to further restrict access using a more sophisticated policy document. For example, administrators may choose to permit the Identity and Access Management (IAM) user only to attach/detach the volume ID associated with the Chef server data volume, and not all volumes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b13481dea59d9a71d242668d1cb8e97dd678731" translate="yes" xml:space="preserve">
          <source>It is possible to initiate jobs from the chef-client, such as from within a recipe based on an action to be determined as the recipe runs. For a chef-client to be able to create, initiate, or read jobs, the chef-client on which Chef push jobs is configured must belong to one (or both) of the following groups:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56b77f3a811802fbaad7c879509d3e0b0d3a4588" translate="yes" xml:space="preserve">
          <source>It is recommended that only &lt;code&gt;automatic_attribute_whitelist&lt;/code&gt; be used to whitelist attributes. This is primarily because automatic attributes generate the most data, but also that normal, default, and override attributes are typically much more important attributes and are more likely to cause issues if they are whitelisted incorrectly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bf4738e851d11827f087d4eca106376c63f463b" translate="yes" xml:space="preserve">
          <source>It is the user&amp;rsquo;s responsibility to verify the authenticity of every SSL certificate before downloading it to the &lt;code&gt;/.chef/trusted_certs&lt;/code&gt; directory. knife will use any certificate in that directory as if it is a 100% trusted and authentic SSL certificate. knife will not be able to determine if any certificate in this directory has been tampered with, is forged, malicious, or otherwise harmful. Therefore it is essential that users take the proper steps before downloading certificates into this directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8db7434ba68b6072f9949269e5bec58c12b58260" translate="yes" xml:space="preserve">
          <source>It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what &amp;ldquo;everything&amp;rdquo; is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named &amp;ldquo;admins&amp;rdquo;. For example, to find every administrator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ca192a52323a89996460cd7c209b8dda4044037" translate="yes" xml:space="preserve">
          <source>Iterate over the contents of the data bag to get the associated &lt;code&gt;data_bag_item&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31a7959cbd6734b5e3ab6f7ad29cbd274ba16a0b" translate="yes" xml:space="preserve">
          <source>JSON Data Format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49da4835f067219108d2424557e229a3f556000c" translate="yes" xml:space="preserve">
          <source>Journald</source>
          <target state="translated">Journald</target>
        </trans-unit>
        <trans-unit id="45295b615fba271ae1e7ffe3dcd5626366e57393" translate="yes" xml:space="preserve">
          <source>Keep Master Current</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64bd05200ea7fe39f1a9f99db791e98069574aa8" translate="yes" xml:space="preserve">
          <source>Keep a job alive. Only applies to Mac OS X version 10.4 (and earlier); use &lt;code&gt;keep_alive&lt;/code&gt; instead for newer versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e5e1b08e1e99b4f2f746270c92993dfb482d422" translate="yes" xml:space="preserve">
          <source>Keep a job running continuously (&lt;code&gt;true&lt;/code&gt;) or allow demand and conditions on the node to determine if the job keeps running (&lt;code&gt;false&lt;/code&gt;). Default value: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8776feba35e297add9db844c4aca0bbcb6a07a91" translate="yes" xml:space="preserve">
          <source>Keeping the chef-repo synchronized with version source control</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad26602dfcd887951233b8f1e276af017952437a" translate="yes" xml:space="preserve">
          <source>Keeping the default behavior is recommended. To use a custom CA bundle, update the environment variable to specify the path to the custom CA bundle. If (for some reason) SSL certificate verification stops working, ensure the correct value is specified for &lt;code&gt;SSL_CERT_FILE&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fa94f2c6725d10999346ab450b88df4f1e3cbd7" translate="yes" xml:space="preserve">
          <source>Kernel data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dd51014edd4d5932dffae6d55e345141df4e50b" translate="yes" xml:space="preserve">
          <source>Key Rotation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dab9dc571cc93b5b231139877521f77bdf584d23" translate="yes" xml:space="preserve">
          <source>Key-value store used in conjunction with Nginx to route requests and populate request data used by the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5651c683f14c95aa972cfdbc300d9fecfe02019" translate="yes" xml:space="preserve">
          <source>Keys</source>
          <target state="translated">Keys</target>
        </trans-unit>
        <trans-unit id="08cee46c28ca52226cfe58e4f44af5669640d16c" translate="yes" xml:space="preserve">
          <source>Keys should have &lt;code&gt;DELETE&lt;/code&gt;, &lt;code&gt;GRANT&lt;/code&gt;, &lt;code&gt;READ&lt;/code&gt; and &lt;code&gt;UPDATE&lt;/code&gt; permissions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ac760d10149f41e388e740aeccf63e8ff1e0b47" translate="yes" xml:space="preserve">
          <source>Knife</source>
          <target state="translated">Knife</target>
        </trans-unit>
        <trans-unit id="994dd83be4be07022c7ce20d1bb24e7e0eefbc07" translate="yes" xml:space="preserve">
          <source>Knife API Requests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7a0961030c3e244c4a56423477372852beb5cf1" translate="yes" xml:space="preserve">
          <source>Knife Subcommands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6916099676a6e40e3404aa0afa25839fa133c59" translate="yes" xml:space="preserve">
          <source>Knife, chef-client</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4146e48d2f59e036950c522e2b3f737dc45ff9b6" translate="yes" xml:space="preserve">
          <source>Large Node Sizes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="295f81efebe84a06a4abba2933fec274d89a5f2f" translate="yes" xml:space="preserve">
          <source>Launch a job once (at the time it is loaded). Default value: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6026705fc6afa82db00083326d62533ea186437c" translate="yes" xml:space="preserve">
          <source>Launch two servers, one for the primary backend Chef server and the other for the secondary backend Chef server. Use the same Amazon Machine Images (AMI) so that both backend servers have identical platform and versions. The servers must be in the same availability zones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f99f51322ae1e0bcad2a26a44e573afad5e23f64" translate="yes" xml:space="preserve">
          <source>Layout Modifiers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a908e0185b6c27f075bc57eb57472c177616bed3" translate="yes" xml:space="preserve">
          <source>Lazy Evaluation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7a0e4a40684ec7a73beb9e2263bccabe5b19584" translate="yes" xml:space="preserve">
          <source>Leave Org</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="106dad3aba0465ea7854d4b507822567d3f4f210" translate="yes" xml:space="preserve">
          <source>Leave the value empty to prevent all attributes of that attribute type from being saved:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27c968e6692b41bf6e1a241b870dc41ff1a51b17" translate="yes" xml:space="preserve">
          <source>Libraries</source>
          <target state="translated">Libraries</target>
        </trans-unit>
        <trans-unit id="1cdc1cc38b7e8ef92af75b060ed8eeba5adf60f4" translate="yes" xml:space="preserve">
          <source>Library Modules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eab3de35eb7e3f0c6deb05b296e3ba1f274a940" translate="yes" xml:space="preserve">
          <source>Library Resources</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f39e8b9b8efea94fecc83043ad120c1c32a555d" translate="yes" xml:space="preserve">
          <source>Licensed under the Creative Commons Attribution 3.0 Unported License.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83ad8510bbd3f22363d068e1c96f82fd0fcccd31" translate="yes" xml:space="preserve">
          <source>Linux</source>
          <target state="translated">Linux</target>
        </trans-unit>
        <trans-unit id="b135f190229a8da7666c6c694b4e4a7115c61882" translate="yes" xml:space="preserve">
          <source>List Membership</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60341babc0405bb918cc78afda95aee0a3019602" translate="yes" xml:space="preserve">
          <source>List directories recursively. Default: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ff0476552db9a13cbc74c16cd824d0b65e45ef0" translate="yes" xml:space="preserve">
          <source>List of Services</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4cf31d937dbad4ee19a4140a523c8770faaa6bf" translate="yes" xml:space="preserve">
          <source>Lists additional details (also known as resource properties), as necessary</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3607aeb225a04b5b57b97ec2ba47e84eaaf7e07" translate="yes" xml:space="preserve">
          <source>Load Balancer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="556e39219a8ef8f36593365eb06defeeab154be9" translate="yes" xml:space="preserve">
          <source>Load a template from a local path. By default, the chef-client loads templates from a cookbook&amp;rsquo;s &lt;code&gt;/templates&lt;/code&gt; directory. When this property is set to &lt;code&gt;true&lt;/code&gt;, use the &lt;code&gt;source&lt;/code&gt; property to specify the path to a template on the local node. Default value: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="556c27011885d82d39fe7bf1434f865439dbcf8d" translate="yes" xml:space="preserve">
          <source>Load a template named &lt;code&gt;authorized_ip.erb&lt;/code&gt; from the &lt;code&gt;/templates&lt;/code&gt; directory that is used to set the IP address values based on the variables specified in the recipe</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87710c70a10a9939d749e6cd5527d3d52c18b70d" translate="yes" xml:space="preserve">
          <source>Load-balancing should be used with frontend machines, along with a DNS entry for the virtual IP address used for load balancing. This virtual IP address is added to the chef-server.rb file as the &lt;code&gt;api_fqdn&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f650a4b56dc1e44630bee96f3747297427402f0" translate="yes" xml:space="preserve">
          <source>Load-balancing should be used with frontend servers, along with a DNS entry for the virtual IP address used for load balancing. This virtual IP address is added to the chef-server.rb file as the &lt;code&gt;api_fqdn&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1260701ebb9aee7eb5cf967a3f6d97451cac0329" translate="yes" xml:space="preserve">
          <source>Loads current properties, if the resource already exists</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff5148d6cff2251fbb44fa24ac71e87831f6949a" translate="yes" xml:space="preserve">
          <source>Local Variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6890392708d0064b8614c3964d5ecb0a2ad7877e" translate="yes" xml:space="preserve">
          <source>Local mode does not require a configuration file, instead it will look for a directory named &lt;code&gt;/cookbooks&lt;/code&gt; and will set &lt;code&gt;chef_repo_path&lt;/code&gt; to be just above that. (Local mode will honor the settings in a configuration file, if desired.) If the client.rb file is not found and no configuration file is specified, local mode will search for a knife.rb file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08b3179ee81f03aab1084890f7ddfbb3675e9357" translate="yes" xml:space="preserve">
          <source>Local mode is a way to run the chef-client against the chef-repo on a local machine as if it were running against the Chef server. Local mode relies on chef-zero, which acts as a very lightweight instance of the Chef server. chef-zero reads and writes to the &lt;code&gt;chef_repo_path&lt;/code&gt;, which allows all commands that normally work against the Chef server to be used against the local chef-repo.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f132b43cbd82753b01db6bd49cd4663b78e11df" translate="yes" xml:space="preserve">
          <source>Local mode will store temporary and cache files under the &lt;code&gt;&amp;lt;chef_repo_path&amp;gt;/.cache&lt;/code&gt; directory by default. This allows a normal user to run the chef-client in local mode without requiring root access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="068ba6869f53537da8dcf3ec9fb8da0db4fa22ce" translate="yes" xml:space="preserve">
          <source>Located at the top level of a cookbook&amp;rsquo;s directory structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d1b52dc8a6fb85e2c00aaff86262a3a7520d81b" translate="yes" xml:space="preserve">
          <source>Lock a user&amp;rsquo;s password.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dbc6e73bcb54cd2fa539275b268b19d074b09a7" translate="yes" xml:space="preserve">
          <source>Log Entries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d92568ed56fa1cfe15a1c3c976d00ea13bd2efac" translate="yes" xml:space="preserve">
          <source>Log Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b6c7200880cd299ab20371a729462b7ffae2f34" translate="yes" xml:space="preserve">
          <source>Log HTTP requests in a file named &lt;code&gt;http-traffic.log&lt;/code&gt; that is located in the path specified by &lt;code&gt;log_directory&lt;/code&gt;. Default value: &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3831d4e3e5ace348ba6c68e683f7605e4e030a9f" translate="yes" xml:space="preserve">
          <source>Log Level</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d25d10d8c9986d08df1353c197597aee4193de2" translate="yes" xml:space="preserve">
          <source>Log in as root and then run the chef-client</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="090d664d69643b2962cd3f00c40c9e5062d7fc73" translate="yes" xml:space="preserve">
          <source>Log in to the administrator account. (This is not the same as an account in the administrator&amp;rsquo;s security group.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bb76ee32fd6f4234562657dd431eae50a4ece93" translate="yes" xml:space="preserve">
          <source>Logical Volumes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="126dd3b70a5ca7818e0e26ad1e008d23b0f14a53" translate="yes" xml:space="preserve">
          <source>Logs</source>
          <target state="translated">Logs</target>
        </trans-unit>
        <trans-unit id="a8c07d2d2414a007fc9f38e51ad3f12e844cda3a" translate="yes" xml:space="preserve">
          <source>Long name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef996959d9f6dd3c6577323680f9a9a3cbe65a41" translate="yes" xml:space="preserve">
          <source>Looking at &lt;code&gt;'foo'&lt;/code&gt;, all that&amp;rsquo;s left is the &lt;code&gt;'bat'&lt;/code&gt; entry:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="806758a7980019ffa8d96da6c5856efe1aab9d45" translate="yes" xml:space="preserve">
          <source>Looking for exceptions and notifications, handling each as required</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27da418dc7160824d1f1cea0c0a27285c46f89f4" translate="yes" xml:space="preserve">
          <source>Looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="460ca17454318a0e974e82028c9d8d07345d7d7d" translate="yes" xml:space="preserve">
          <source>Loop Over a Record</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64665e6d6f404c27684d9ba29a784bc6baeca4d6" translate="yes" xml:space="preserve">
          <source>Loop over Array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05540749124252fd88e68df66642d64836a7c251" translate="yes" xml:space="preserve">
          <source>Loop over Hash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b48af28979910507a72300805b16b39786c09205" translate="yes" xml:space="preserve">
          <source>Mac OS X</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="551fb6045f7498aa3bc4211841701adab4d97a42" translate="yes" xml:space="preserve">
          <source>Mac OS X 10.7 calculates the password shadow hash using SALTED-SHA512. The length of the shadow hash value is 68 bytes, the salt value is the first 4 bytes, with the remaining 64 being the shadow hash itself. The following code will calculate password shadow hashes for Mac OS X 10.7:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67d244ed4e16aa2f7732cd5bd54a716b63ed1848" translate="yes" xml:space="preserve">
          <source>Mac OS X 10.8 (and higher) calculates the password shadow hash using SALTED-SHA512-PBKDF2. The length of the shadow hash value is 128 bytes, the salt value is 32 bytes, and an integer specifies the number of iterations. The following code will calculate password shadow hashes for Mac OS X 10.8 (and higher):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a27c9c61575e72d2a6c20dfbf364934037f7a65" translate="yes" xml:space="preserve">
          <source>Mac OS X platform only, 10.7 or higher. The salt value for a password shadow hash. Mac OS X version 10.7 uses SALTED-SHA512 and version 10.8 (and higher) uses SALTED-SHA512-PBKDF2 to calculate password shadow hashes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cafb57e0b5af189c47e68a685ba91cecc909215" translate="yes" xml:space="preserve">
          <source>Mac OS X platform only, 10.8 (or higher). The number of iterations for a password with a SALTED-SHA512-PBKDF2 shadow hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65ecb08bdab887d0bb713c912314b0c6afdfa0d1" translate="yes" xml:space="preserve">
          <source>Machines on which audit-mode runs have failed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b62cbab921127c3a4c555bf3e802d10f5fec297" translate="yes" xml:space="preserve">
          <source>Machines on which chef-client runs have failed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a02629ead6be6b775ca9d9fb2cb7de6aff7b89d6" translate="yes" xml:space="preserve">
          <source>Mail Relay</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6a033b05bf440f0af458f4f6f7443834ee3bc5a" translate="yes" xml:space="preserve">
          <source>Maintained using knife, and then uploaded from the workstation to the Chef server, or is maintained using the Chef management console</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ebdcead2611a57ec9c18662229a324fe75ecaee" translate="yes" xml:space="preserve">
          <source>Make a postgres export using the following commands:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="768981f2ec1cb9d480c042d28a13ba7fc45dec0d" translate="yes" xml:space="preserve">
          <source>Make the necessary changes to the key-value pairs under &lt;code&gt;raw_data&lt;/code&gt; and save them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a884a5b4b7a2cdfc591ad07c3efa7ad621f9cbc" translate="yes" xml:space="preserve">
          <source>Make your changes, and then commit them:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83a968ac1cbdca64b03d86f504594f81bcfded64" translate="yes" xml:space="preserve">
          <source>Make your changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78854bbfcec8c8dfeab27b7f643bf1254db468c5" translate="yes" xml:space="preserve">
          <source>Making changes to a cookbook.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf58d17e561b1b858e35f9202f811297dac2e9db" translate="yes" xml:space="preserve">
          <source>Manage</source>
          <target state="translated">Manage</target>
        </trans-unit>
        <trans-unit id="9c20870cc24e46be7512b54639bb54ed56c64c7d" translate="yes" xml:space="preserve">
          <source>Manage Client Keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d301c16c6c0f0fda6e69c63e824d2afd6200de5f" translate="yes" xml:space="preserve">
          <source>Manage Cookbooks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c3f6c5506495980bc5518a69b8be05b53fac844" translate="yes" xml:space="preserve">
          <source>Manage Data Bags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47666b16e758cf9a79f7b09fd27df5478751f94d" translate="yes" xml:space="preserve">
          <source>Manage Environments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fb4e424222c14175f50e5cdcfe12a8f2e7db998" translate="yes" xml:space="preserve">
          <source>Manage Items</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa0cb7ae29210000dc1c685ce42747e893dac1da" translate="yes" xml:space="preserve">
          <source>Manage Nodes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ead5895b476677e355e45740bbeab9e30ce67013" translate="yes" xml:space="preserve">
          <source>Manage Organizations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8e3adb2400a0cea6909cbfab682905b4a6527c5" translate="yes" xml:space="preserve">
          <source>Manage Permissions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f9b853170a9aa1bfabb5b1d8abdb7d6d3b665bc" translate="yes" xml:space="preserve">
          <source>Manage Roles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5483c5747d8cc82322f4b20fc81338e7d96f2fe" translate="yes" xml:space="preserve">
          <source>Manage Tags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="084ccc678d41a2317e7e32baf653e4d366a3cff6" translate="yes" xml:space="preserve">
          <source>Manage a user&amp;rsquo;s home directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d84ce9c3f17dfe24ea41f15ed6b0034078922e7" translate="yes" xml:space="preserve">
          <source>Manage an existing group. This action does nothing if the group does not exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f20a28a21ea13b7b83e12aa24e8a5942c6682250" translate="yes" xml:space="preserve">
          <source>Manage an existing user. This action does nothing if the user does not exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc5edb807439323036356106ffd85a3d77cd8654" translate="yes" xml:space="preserve">
          <source>Manage server-admins Group</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dec6dbf300b4d9aaa403dc78ea001f463f578d4" translate="yes" xml:space="preserve">
          <source>Managing how data is stored on the Chef server is sometimes necessary, such as rezising DRBD logical volumes, volume groups, and space available on the primary backend machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7af3028915d14b01090e45767b34c1993b8dff8b" translate="yes" xml:space="preserve">
          <source>Manually (w/ Webui)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62f9a8cba4566a59eec4794d32e0fa40d716bd25" translate="yes" xml:space="preserve">
          <source>Manually (w/o Webui)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da24d2d654020d23f745a216c4b4a7dfbc7e102a" translate="yes" xml:space="preserve">
          <source>Manually, by using the &lt;code&gt;chef generate app&lt;/code&gt; subcommand in the chef command-line tool that is packaged in the Chef development kit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8f0eccff30c57c7fc3577d6884de9374601ba34" translate="yes" xml:space="preserve">
          <source>Many DSC resources are comparable to built-in Chef resources. For example, both DSC and Chef have &lt;strong&gt;file&lt;/strong&gt;, &lt;strong&gt;package&lt;/strong&gt;, and &lt;strong&gt;service&lt;/strong&gt; resources. The &lt;strong&gt;dsc_script&lt;/strong&gt; resource is most useful for those DSC resources that do not have a direct comparison to a resource in Chef, such as the &lt;code&gt;Archive&lt;/code&gt; resource, a custom DSC resource, an existing DSC script that performs an important task, and so on. Use the &lt;strong&gt;dsc_script&lt;/strong&gt; resource to embed the code that defines a DSC configuration directly within a Chef recipe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b911006f22aa32b3c1eb412f25db2599c4f34adb" translate="yes" xml:space="preserve">
          <source>Many Recipes, One Definition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f1b2b42ad3eb81e72cf9f390a12e9716ae50842" translate="yes" xml:space="preserve">
          <source>Many Users, Same Repo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3a5a15c702e8bc82d79d58569790faa484d3c63" translate="yes" xml:space="preserve">
          <source>Many attributes are collected by Ohai on each individual node at the start of every chef-client run</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b4d4b0530de4af841546aa59f68f59996ff98cd" translate="yes" xml:space="preserve">
          <source>Many attributes are maintained in the chef-repo for environments, roles, and cookbooks (attribute files and recipes)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b7c41bfd9422b7915c6d1b0dd49c66727960c2f" translate="yes" xml:space="preserve">
          <source>Many components of the Chef server are written using Erlang and run on the BEAM virtual machine. One feature of Erlang and BEAM is the ability to interact with the running service using a command shell. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="658808b084b0faa1f31c8dcfe512c3c1d70a9086" translate="yes" xml:space="preserve">
          <source>Many of the examples in this section use knife, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the Chef server API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ec54238073c999fdda9089a0c2a54a1a7607466" translate="yes" xml:space="preserve">
          <source>Many of these settings are used by more than one subcommand and/or plugin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5b05a3ad8597be314bfcf7e2beaac513b862169" translate="yes" xml:space="preserve">
          <source>Many optional settings should not be added to the knife.rb file. The reasons for not adding them can vary. For example, using &lt;code&gt;--yes&lt;/code&gt; as a default in the knife.rb file will cause knife to always assume that &amp;ldquo;Y&amp;rdquo; is the response to any prompt, which may lead to undesirable outcomes. Other settings, such as &lt;code&gt;--hide-healthy&lt;/code&gt; (used only with the &lt;code&gt;knife status&lt;/code&gt; subcommand) or &lt;code&gt;--bare-directories&lt;/code&gt; (used only with the &lt;code&gt;knife list&lt;/code&gt; subcommand) probably aren&amp;rsquo;t used often enough (and in the same exact way) to justify adding them to the knife.rb file. In general, if the optional settings are not listed on &lt;a href=&quot;config_rb_knife&quot;&gt;the main knife.rb topic&lt;/a&gt;, then add settings only after careful consideration. Do not use optional settings in a production environment until after the setting&amp;rsquo;s performance has been validated in a safe testing environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ae0a428dc2934da70e5cb5681e93777c920fba8" translate="yes" xml:space="preserve">
          <source>Many organizations already have processes in place for managing the applications and settings on various Microsoft Windows machines. For example, System Center. The chef-client can be installed using this method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6cf75285e3b2fc380a2c580c41d8d27bdc0173c" translate="yes" xml:space="preserve">
          <source>Many people who are new to Ruby often find that it doesn&amp;rsquo;t take very long to get up to speed with the basics. For example, it&amp;rsquo;s useful to know how to check the syntax of a Ruby file, such as the contents of a cookbook named &lt;code&gt;my_cookbook.rb&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="766cc2ef235bf3db70fca90d2b61735cdfbbde57" translate="yes" xml:space="preserve">
          <source>Many text editors leave files behind. To prevent these files from being uploaded to the Chef server, add an entry to the chefignore file. For Emacs, do something like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6816019741041d29d824a4f432752e9120b69bb5" translate="yes" xml:space="preserve">
          <source>Map files in a shared directory to the current release directory. The symbolic links for these files are created before any migration is run. Use parentheses &lt;code&gt;( )&lt;/code&gt; around curly braces &lt;code&gt;{ }&lt;/code&gt; to ensure the contents within the curly braces are interpreted as a block and not as an empty Hash. Set to &lt;code&gt;symlink_before_migrate({})&lt;/code&gt; to prevent the creation of symbolic links.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7c8fda7f553ade69c1c967d73815dda451eddfb" translate="yes" xml:space="preserve">
          <source>Map files in a shared directory to the current release directory. The symbolic links for these files are created before any migration is run. Use parentheses &lt;code&gt;( )&lt;/code&gt; around curly braces &lt;code&gt;{ }&lt;/code&gt; to ensure the contents within the curly braces are interpreted as a block and not as an empty Hash. Set to &lt;code&gt;symlink_before_migrate({})&lt;/code&gt; to prevent the creation of symbolic links. Default value: &lt;code&gt;{&quot;config/database.yml&quot; =&amp;gt; &quot;config/database.yml&quot;}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="778a3ec0cff61d951a0e8a94d9b0364187c71d7c" translate="yes" xml:space="preserve">
          <source>Map files in a shared directory to their paths in the current release directory. This property runs after &lt;code&gt;create_dirs_before_symlink&lt;/code&gt; and &lt;code&gt;purge_before_symlink&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0c5771e3485016ca085a1cb3cf3cd44ce0c12c1" translate="yes" xml:space="preserve">
          <source>Map files in a shared directory to their paths in the current release directory. This property runs after &lt;code&gt;create_dirs_before_symlink&lt;/code&gt; and &lt;code&gt;purge_before_symlink&lt;/code&gt;. Default value: &lt;code&gt;{&quot;system&quot; =&amp;gt; &quot;public/system&quot;, &quot;pids&quot; =&amp;gt; &quot;tmp/pids&quot;, &quot;log&quot; =&amp;gt; &quot;log&quot;}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="836f70fd7d82393c2699b8755613486047b49b3c" translate="yes" xml:space="preserve">
          <source>Matcher</source>
          <target state="translated">Matcher</target>
        </trans-unit>
        <trans-unit id="aefaa0affa7f8f09a6cc692ba4d01f3032081bdb" translate="yes" xml:space="preserve">
          <source>Matchers are available for directories. Use this matcher to define audits for directories that test if the directory exists, is mounted, and if it is linked to. This matcher uses the same matching syntax&amp;mdash;&lt;code&gt;expect(file('foo'))&lt;/code&gt;&amp;mdash;as the files. The following matchers are available for directories:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="843e45dce2ca6ac11b28da16ada7667917edbd0e" translate="yes" xml:space="preserve">
          <source>Matchers are available for files and directories. Use this matcher to define audits for files that test if the file exists, its version, if it is is executable, writable, or readable, who owns it, verify checksums (both MD5 and SHA-256) and so on. The following matchers are available for files:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3f5d4c55a49b7849f1aca88b4f38019222643da" translate="yes" xml:space="preserve">
          <source>Matchers are available for packages and may be used to define audits that test if a package or a package version is installed. The following matchers are available:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eedbd7ac58fcd032e2b86da9cbe00c6a720e193b" translate="yes" xml:space="preserve">
          <source>Matchers are available for ports and may be used to define audits that test if a port is listening. The following matchers are available:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72541451af43350e03ec54d9ea5096f790bdae7d" translate="yes" xml:space="preserve">
          <source>Matchers are available for services and may be used to define audits that test for conditions related to services, such as if they are enabled, running, have the correct startup mode, and so on. The following matchers are available:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3edf0df49942da6d11a1a217e4d3af4a5a8e64f2" translate="yes" xml:space="preserve">
          <source>Math</source>
          <target state="translated">Math</target>
        </trans-unit>
        <trans-unit id="cd12e5642da9d2823d1d711ebefe74a13c816d5e" translate="yes" xml:space="preserve">
          <source>Maximum Versions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="068bb5308e64d606e65b717362fd579f56ecd781" translate="yes" xml:space="preserve">
          <source>May be enabled for nodes running on Microsoft Windows and Enterprise Linux platforms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80e6bb65c6dc954becc57cf4624bac5cf8c2caea" translate="yes" xml:space="preserve">
          <source>May be included in a recipe</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04faaf5e85cd0863042c0b04a351651554d47edc" translate="yes" xml:space="preserve">
          <source>May have a dependency on one (or more) recipes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7a9a8caa1b1ed09c030f56e4abe19efc4fddcda" translate="yes" xml:space="preserve">
          <source>May not be enabled for any version of the chef-client earlier than 12.8</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deba9457fad2064b67bf8f45a65d9fabce469269" translate="yes" xml:space="preserve">
          <source>May not notify resources in the resource collection because a definition is loaded &lt;strong&gt;before&lt;/strong&gt; the resource collection itself is created; however, a resource in a definition &lt;strong&gt;may&lt;/strong&gt; notify a resource that exists within the same definition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cda4d900c5b4c122276f485c3baf1d0f14b3b68a" translate="yes" xml:space="preserve">
          <source>May require custom attributes, depending on the cookbooks that are being used</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7176952adf4732f793fab90081bda9464e089df3" translate="yes" xml:space="preserve">
          <source>May restore backed up data to any version of the Chef server that supports this command, starting with Chef server 12.2 (which is the first version of the Chef server in which the &lt;code&gt;chef-server-ctl restore&lt;/code&gt; command is available)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14bccfdac84eb8899d6ac194c5cde2df573c3573" translate="yes" xml:space="preserve">
          <source>May tag a node to facilitate the creation of arbitrary groupings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ff4e956d840b50b0b58f2a0a720f710790ef6f6" translate="yes" xml:space="preserve">
          <source>May use the results of a search query and read the contents of a data bag (including an encrypted data bag)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f11bbe0642066fac47660d52e28656f9b4a6d526" translate="yes" xml:space="preserve">
          <source>Membership of the &lt;code&gt;server-admins&lt;/code&gt; group is managed with a set of &lt;code&gt;chef-server-ctl&lt;/code&gt; subcommands:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="530f6ddbe6f5cabf01f18a63d450d84bd827f45b" translate="yes" xml:space="preserve">
          <source>Memory usage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="809bdbc170aa52e50e2de7cf6185b70003837ead" translate="yes" xml:space="preserve">
          <source>Message Queues</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b4b796d38a66cdadb9d0d8e6102ccbcd891994d" translate="yes" xml:space="preserve">
          <source>Messages are sent to the search index using the following components:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="251edc0eb5a820646bda4e103f0f007fd55321f3" translate="yes" xml:space="preserve">
          <source>Metadata</source>
          <target state="translated">Metadata</target>
        </trans-unit>
        <trans-unit id="88306943fea7e76f9cd57cae0ea6d8b32d2e8434" translate="yes" xml:space="preserve">
          <source>Method</source>
          <target state="translated">Method</target>
        </trans-unit>
        <trans-unit id="e86d6956c2fad54938e3bc8f2087e0ec793c9ed8" translate="yes" xml:space="preserve">
          <source>Microsoft Windows</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c538360777bb48c50bd488eaf91c2fd9cb6b9feb" translate="yes" xml:space="preserve">
          <source>Microsoft Windows only. The permissions for users and groups in a Microsoft Windows environment. For example: &lt;code&gt;rights &amp;lt;permissions&amp;gt;, &amp;lt;principal&amp;gt;, &amp;lt;options&amp;gt;&lt;/code&gt; where &lt;code&gt;&amp;lt;permissions&amp;gt;&lt;/code&gt; specifies the rights granted to the principal, &lt;code&gt;&amp;lt;principal&amp;gt;&lt;/code&gt; is the group or user name, and &lt;code&gt;&amp;lt;options&amp;gt;&lt;/code&gt; is a Hash with one (or more) advanced rights options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e73d8b701a95ff767631c309dbf8a2f98ba5826" translate="yes" xml:space="preserve">
          <source>Microsoft Windows only. Use to specify the domain in which the &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; are located.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1267291d1f3ab59353d20a1ac2d88d603d96e522" translate="yes" xml:space="preserve">
          <source>Microsoft Windows only. Use to specify the password for &lt;code&gt;username&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4d4dc2e55dd0732a3bd6e06eff99da7cc40a8f3" translate="yes" xml:space="preserve">
          <source>Microsoft Windows only. Use to specify the user name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d309a737ef4f0becde1cbcf7b4f50418cb4241d" translate="yes" xml:space="preserve">
          <source>Microsoft Windows only. Use to test if a file is the specified version. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9a5c3c0ea4f148ea498fb8d341539530399591b" translate="yes" xml:space="preserve">
          <source>Microsoft Windows only. Use to test if the named service is installed on the Microsoft Windows platform. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a1a6125058200e19de3fe6a4db1dec2a8ca4915" translate="yes" xml:space="preserve">
          <source>Microsoft Windows only. Use to test if the named service&amp;rsquo;s startup mode is correct on the Microsoft Windows platform. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="383b4c161054fac8e61f6762795e07e061ce7192" translate="yes" xml:space="preserve">
          <source>Microsoft Windows only. Whether a file inherits rights from its parent directory. Default value: &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22bb6da692500d3b0c4aa869d1459d5a77cdcbc7" translate="yes" xml:space="preserve">
          <source>Microsoft Windows platform only. The amount of time (in seconds) to wait before timing out. Default value: &lt;code&gt;60&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20a4314717eac34123d0ccc736705c997a99c971" translate="yes" xml:space="preserve">
          <source>Microsoft Windows. All platform variants of Microsoft Windows return &lt;code&gt;windows&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c03dcad7554cabe87b420390e19bc179b647fd8" translate="yes" xml:space="preserve">
          <source>Microsoft Windows: A path that begins with a forward slash (&lt;code&gt;/&lt;/code&gt;) will point to the root of the current working directory of the chef-client process. This path can vary from system to system. Therefore, using a path that begins with a forward slash (&lt;code&gt;/&lt;/code&gt;) is not recommended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cd3507607a0124bacbcb2646dd36a01d30788e7" translate="yes" xml:space="preserve">
          <source>Microsoft Windows: A quoted 3-5 character string that defines the octal mode that is translated into rights for Microsoft Windows security. For example: &lt;code&gt;'755'&lt;/code&gt;, &lt;code&gt;'0755'&lt;/code&gt;, or &lt;code&gt;00755&lt;/code&gt;. Values up to &lt;code&gt;'0777'&lt;/code&gt; are allowed (no sticky bits) and mean the same in Microsoft Windows as they do in UNIX, where &lt;code&gt;4&lt;/code&gt; equals &lt;code&gt;GENERIC_READ&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt; equals &lt;code&gt;GENERIC_WRITE&lt;/code&gt;, and &lt;code&gt;1&lt;/code&gt; equals &lt;code&gt;GENERIC_EXECUTE&lt;/code&gt;. This property cannot be used to set &lt;code&gt;:full_control&lt;/code&gt;. This property has no effect if not specified, but when it and &lt;code&gt;rights&lt;/code&gt; are both specified, the effects are cumulative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7b93d2128e820f861fc8dfccd9f5521e89ad21f" translate="yes" xml:space="preserve">
          <source>Mode</source>
          <target state="translated">Mode</target>
        </trans-unit>
        <trans-unit id="79f5b225cffab11e22dc40b6f05abef1d33d1561" translate="yes" xml:space="preserve">
          <source>Modes</source>
          <target state="translated">Modes</target>
        </trans-unit>
        <trans-unit id="73fb18d6a572ad4c2f14579eb4a815af1128c376" translate="yes" xml:space="preserve">
          <source>Modifications to environments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e517cc4269eda94e38efc0431c8be0b79c84d45d" translate="yes" xml:space="preserve">
          <source>Modify an existing environment variable. This prepends the new value to the existing value, using the delimiter specified by the &lt;code&gt;delim&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d676f74af2ef66f1b5a24ac9a52a83b2af178c3e" translate="yes" xml:space="preserve">
          <source>Modify an existing group. This action raises an exception if the group does not exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a36702e81305afd4aa980a952229056a883ef769" translate="yes" xml:space="preserve">
          <source>Modify an existing user. This action raises an exception if the user does not exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f294ea43da80e7f81175475b53b7eb53de3bb52f" translate="yes" xml:space="preserve">
          <source>Modify the template with any editor, then specify it using the &lt;code&gt;--bootstrap-template&lt;/code&gt; option as part of the the &lt;code&gt;knife bootstrap&lt;/code&gt; operation, or with any of the knife plug-ins that support cloud computing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec0f10698082c93db66cc3bacc7c4262043d5c37" translate="yes" xml:space="preserve">
          <source>Monitor</source>
          <target state="translated">Monitor</target>
        </trans-unit>
        <trans-unit id="3ccf5501d59f5370096a5fb37f6bd964f69e3367" translate="yes" xml:space="preserve">
          <source>Monitoring Priorities</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32a3a0712932c5530d77b0078a465dca203f84cd" translate="yes" xml:space="preserve">
          <source>Monitoring the Chef server involves two types of checks: application and system. In addition monitoring the HTTP requests that workstations and nodes are making to the Chef server and per-disk data storage volumes is recommended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1a06512ea673cc152b8420b5fe23bd0c2690ea2" translate="yes" xml:space="preserve">
          <source>More about Ruby</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c33b6e1a217cc16b5a138e541bc581b0f7473351" translate="yes" xml:space="preserve">
          <source>More commonly, the usage incorporates arguments to the definition:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44e6d1e6a443021eca110b2c3fd574ce354485c2" translate="yes" xml:space="preserve">
          <source>More than one recipe can be added:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ded416c5044d2b375069f6f1edded5b0be4bcfe1" translate="yes" xml:space="preserve">
          <source>Most authentication requests made to the Chef server are abstracted from the user. Such as when using knife or the Chef server user interface. In some cases, such as when using the &lt;code&gt;knife exec&lt;/code&gt; subcommand, the authentication requests need to be made more explicitly, but still in a way that does not require authentication headers. In a few cases, such as when using arbitrary Ruby code or cURL, it may be necessary to include the full authentication header as part of the request to the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="672fd307cfa170104cb818cdebcdb18a42190323" translate="yes" xml:space="preserve">
          <source>Most data is entered using a text editor in JSON format, unless the &lt;code&gt;--disable-editing&lt;/code&gt; option is entered as part of a command. (Encrypted data bags use YAML, which is a superset of JSON.) JSON is a common, language-independent data format that provides a simple text representation of arbitrary data structures. For more information about JSON, see &lt;a href=&quot;http://www.json.org/&quot;&gt;http://www.json.org/&lt;/a&gt; or &lt;a href=&quot;http://en.wikipedia.org/wiki/JSON&quot;&gt;http://en.wikipedia.org/wiki/JSON&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b26ca218476cae3af1e176d40d0fe07aa3436c1" translate="yes" xml:space="preserve">
          <source>Mount Storage Device</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="182bddb9219e7c581571a8d642e077b1012533ff" translate="yes" xml:space="preserve">
          <source>Mounts the node</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a17c1d9ace65a2af0854b7dd0162a36eb96f46aa" translate="yes" xml:space="preserve">
          <source>Move files to the .chef directory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="846ce32a20580ec6ae9d2a615b0954f4381212fb" translate="yes" xml:space="preserve">
          <source>Moving a tested cookbook to production.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef01688888f1492498da537490cefebdbe1e5934" translate="yes" xml:space="preserve">
          <source>Msiexec.exe</source>
          <target state="translated">Msiexec.exe</target>
        </trans-unit>
        <trans-unit id="e333b3a98cd7a8afcbf4376443eb9cff4437f0ea" translate="yes" xml:space="preserve">
          <source>Msiexec.exe is used to install the chef-client on a node as part of a bootstrap operation. The actual command that is run by the default bootstrap script is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a56075b5d765cfd0c544c28c8d61b015a942996" translate="yes" xml:space="preserve">
          <source>Multiple Organizations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b7ab852e90b6861be58002a02f47252a47e101e" translate="yes" xml:space="preserve">
          <source>Multiple Packages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6644754a7e831be42b3ed01ff7a740bd5df44064" translate="yes" xml:space="preserve">
          <source>Multiple Properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17c89221919156f46b3884bf5595246fa407ad1b" translate="yes" xml:space="preserve">
          <source>Multiple product groups must be supported&amp;mdash;each product group can have its own security requirements, schedule, and goals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84e6d9849b8e294b9b9818c866ca613731f91359" translate="yes" xml:space="preserve">
          <source>Must be able to access the chef-validator.pem so that it may create a new identity on the Chef server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c78f5e1193ec048cf2713c85fa357d64437b453d" translate="yes" xml:space="preserve">
          <source>Must be able to authenticate to the Chef server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7718bc4e23c8104ff6b316cec8d666f2a4ac32c6" translate="yes" xml:space="preserve">
          <source>Must be able to configure a run-list</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cf87d05d21023d4eab3b9166941dee18989dbcf" translate="yes" xml:space="preserve">
          <source>Must be added to a run-list before it can be used by the chef-client</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3812362d5fe3a2e39783ba2d46e1ba3f591c342b" translate="yes" xml:space="preserve">
          <source>Must be stored in a cookbook</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aea41576cdcd99011bed7474dae31f818fe95dd" translate="yes" xml:space="preserve">
          <source>Must define everything that is required to configure part of a system</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f4f7a83b36a7d9538d4d09bb35693d52ad9a493" translate="yes" xml:space="preserve">
          <source>Must have a unique node name; the chef-client will use the FQDN for the host system by default</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="969e7d8dee132181523a501a068fec75bded3005" translate="yes" xml:space="preserve">
          <source>NOT</source>
          <target state="translated">NOT</target>
        </trans-unit>
        <trans-unit id="78a61edc526d45fb768660995e2f6179b5b3cb7b" translate="yes" xml:space="preserve">
          <source>NTP</source>
          <target state="translated">NTP</target>
        </trans-unit>
        <trans-unit id="4ccef8dddde7c311f40a07e2fdf5e1fabde8d04c" translate="yes" xml:space="preserve">
          <source>Name attributes after the recipe in which they are primarily used. e.g. &lt;code&gt;node['postgresql']['server']&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07c86fef27a8ab3c593e020c662ba162dd1eca9b" translate="yes" xml:space="preserve">
          <source>Name things uniformly for their system and component. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b4617b659a51d0b5756991a46730570511eef04" translate="yes" xml:space="preserve">
          <source>Naming</source>
          <target state="translated">Naming</target>
        </trans-unit>
        <trans-unit id="0082d8f8e53e323a051ca6e1f62a98de5e9ee544" translate="yes" xml:space="preserve">
          <source>Naming Resources</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71af4b3dab30f2abf84de7f8e5216405d6d9cf25" translate="yes" xml:space="preserve">
          <source>Nested Fields</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a64d9cd121c344a2ba9288a016802f5fdbb53578" translate="yes" xml:space="preserve">
          <source>NetBSD. All platform variants of NetBSD return &lt;code&gt;netbsd&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4d7a11dd6e9031feb83d3e202c16372867c5cc2" translate="yes" xml:space="preserve">
          <source>Network usage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2be629f46ca83812d2972051abebf0cd98b330f0" translate="yes" xml:space="preserve">
          <source>New in Chef Client 12.11.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f295544147a99b3b735c28bc1d1fa3b944edbb69" translate="yes" xml:space="preserve">
          <source>New in Chef server 12.7</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5e33149566f195e56bc500c0788d7bc1879dfdb" translate="yes" xml:space="preserve">
          <source>New in Chef server 12.7.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb225f7cd2586b9a30ec832f994d71f4f40b7eb9" translate="yes" xml:space="preserve">
          <source>New in Chef server 12.9.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ad0d3d944be819129986b94d2a8663f78ab3eb7" translate="yes" xml:space="preserve">
          <source>Next, the chef-client configures the system based on the order of the resources in the resource collection. Each resource is mapped to a provider, which then examines the node and performs the necessary steps to complete the action. This is also referred to as the &amp;ldquo;execution phase&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2560cbce63028d4ce27fdd2ae2588b9ae69ca1e" translate="yes" xml:space="preserve">
          <source>Nginx</source>
          <target state="translated">Nginx</target>
        </trans-unit>
        <trans-unit id="18c16701a0285972cc005d424398d437d65af30a" translate="yes" xml:space="preserve">
          <source>Nginx is an important entry point for data on the Chef server, which means that debugging efforts frequently start with analyzing the &lt;strong&gt;nginx&lt;/strong&gt; service&amp;rsquo;s &lt;code&gt;access.log&lt;/code&gt; file. This log contains every HTTP request made to the front-end machine and can be very useful when investigating request rates and usage patterns. The following is an example log entry:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84fd472d8fd6e8b00b589006d0c9ce0a83755525" translate="yes" xml:space="preserve">
          <source>Nginx is an open-source HTTP and reverse proxy server that is used as the front-end load balancer for the Chef server. All requests to the Chef server API are routed through Nginx.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6579aaa87f11bff3f0119c3b0380ceab73389da" translate="yes" xml:space="preserve">
          <source>No Proxy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7545a69f97b9fa5bc859fbfe59dba8007fcf6da0" translate="yes" xml:space="preserve">
          <source>No clients, because the &lt;code&gt;-S&lt;/code&gt; option was not specified while creating the vault.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ad97ef8acd87094a75ee5814f60f41fc3889757" translate="yes" xml:space="preserve">
          <source>Node Attributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4ad72dc0d6c6290835c1aaa4673c7cf5f90d6bd" translate="yes" xml:space="preserve">
          <source>Node Location</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b17a6c458741a86bf04ade61ad9a14f7ac61215b" translate="yes" xml:space="preserve">
          <source>Node Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33d6848a140f44110c77c4ebaec0484d26d02ccc" translate="yes" xml:space="preserve">
          <source>Node Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="279b71d33490152fe195c1958224bda7b9cc4031" translate="yes" xml:space="preserve">
          <source>Node Types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e325452c6548fc2449564842660d75ef3b1eb73" translate="yes" xml:space="preserve">
          <source>Nodes</source>
          <target state="translated">Nodes</target>
        </trans-unit>
        <trans-unit id="294472e1aa62d2671351b5a11222ad839b268d44" translate="yes" xml:space="preserve">
          <source>Nodes (collected by Ohai at the start of each chef-client run)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e361daf789f6025e91033d8f081a1d83bd3cfe4" translate="yes" xml:space="preserve">
          <source>Nodes can be managed from the Chef management console web user interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69ba94fb7c4605a2777ecfbc62893592285f48e6" translate="yes" xml:space="preserve">
          <source>Nodes, Workstations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a9707be07da6862114abd49d2570046d4810ca5" translate="yes" xml:space="preserve">
          <source>None.</source>
          <target state="translated">None.</target>
        </trans-unit>
        <trans-unit id="25717b76d1762287d98c1e90c520031cd9358343" translate="yes" xml:space="preserve">
          <source>Normal and override attributes are cleared at the start of the chef-client run, and are then rebuilt as part of the run based on the code in the cookbooks and recipes at that time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08b813d5e3a862153979b4bc3ed606ff77ecf2fe" translate="yes" xml:space="preserve">
          <source>Not allowed. A set of cookbooks and/or cookbook versions could not be found that met all of the requirements of the run-list. A cookbook in the run-list may not exist. A dependency may be present for a cookbook that does not exist. A constraint on a cookbook made by a run-list, environment, or cookbook version, may not match an available cookbook version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ae49e9a61373946f78d134ed1f677b64096c4ee" translate="yes" xml:space="preserve">
          <source>Not found. The requested object does not exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c924e3088204ee77ba681f72be3444357932fca" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="translated">Note</target>
        </trans-unit>
        <trans-unit id="70440046a3dc2e079f23ee1c57dfa76669b732aa" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="translated">Notes</target>
        </trans-unit>
        <trans-unit id="9a27b95bfd6c490ae082ebdb758a4244ade0b2d7" translate="yes" xml:space="preserve">
          <source>Notes about FIPS:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e349a795ee5c99a4344728f4e916286a97adb47" translate="yes" xml:space="preserve">
          <source>Notice that &lt;code&gt;ro&lt;/code&gt; is now &lt;code&gt;ro:Primary/Unknown&lt;/code&gt;. The Chef server can now be recovered by entering the following command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="753a22b2eb617204efee4644795034b8ace1ee14" translate="yes" xml:space="preserve">
          <source>Notifications</source>
          <target state="translated">Notifications</target>
        </trans-unit>
        <trans-unit id="69a2d032693f0d0a7232cda36bda2836ba34d717" translate="yes" xml:space="preserve">
          <source>Notifications and subscriptions do not need to be updated when packages and versions are added or removed from the &lt;code&gt;package_name&lt;/code&gt; or &lt;code&gt;version&lt;/code&gt; properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4932183097e1e42a7111966582784611fa2c2b2b" translate="yes" xml:space="preserve">
          <source>Notifications may be sent to any email address, a chat service like HipChat or Slack, or to a webhook-based service for generic intergrations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bc18750afb43afb858ec4f947d58af408716da5" translate="yes" xml:space="preserve">
          <source>Notifications, via an implicit name:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dad339fc0bb5d2e0f8c80d4c81ab2f16e3796ba" translate="yes" xml:space="preserve">
          <source>Notifies</source>
          <target state="translated">Notifies</target>
        </trans-unit>
        <trans-unit id="b73365ef962b8eb9e6abc7a9ca6fc94fcc25b781" translate="yes" xml:space="preserve">
          <source>Now, run the chef-client again:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07339924c5b66a3f787f5f870d7f6e87a60207f6" translate="yes" xml:space="preserve">
          <source>OK. The request was successful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34ae39ab54b243fd1fadb9d9af43debe51a1e159" translate="yes" xml:space="preserve">
          <source>OK. The request was successful. A hash that maps each checksum to a hash that contains a boolean &lt;code&gt;needs_upload&lt;/code&gt; field and a URL if &lt;code&gt;needs_upload&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74f522ba2cb84d8aee5d60f11b771dc9fef5945b" translate="yes" xml:space="preserve">
          <source>OK. The request was successful. One (or more) cookbooks and associated cookbook version information was returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f579c523960af1aec824c6fdc57af6d4abd76a1f" translate="yes" xml:space="preserve">
          <source>OR</source>
          <target state="translated">OR</target>
        </trans-unit>
        <trans-unit id="3a1c9bbdf81e96f88b56cf60bddfa9c4429607ea" translate="yes" xml:space="preserve">
          <source>ORGANIZATION-validator.pem</source>
          <target state="translated">ORGANIZATION-validator.pem</target>
        </trans-unit>
        <trans-unit id="f37987e722f2d33712c8025e160ad666f3096158" translate="yes" xml:space="preserve">
          <source>ORGANIZATION-validator.pem. This private key can be downloaded from the &lt;strong&gt;Organizations&lt;/strong&gt; page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2883f191bc5ebfdc16c0813eff659b35363ea69b" translate="yes" xml:space="preserve">
          <source>Object</source>
          <target state="translated">Object</target>
        </trans-unit>
        <trans-unit id="3fce51d9d47cd7dd773864983455ba782d5a8ff1" translate="yes" xml:space="preserve">
          <source>Object Permissions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24d50592b70a997e82a3839de9c69ef0c75660a9" translate="yes" xml:space="preserve">
          <source>Objectives</source>
          <target state="translated">Objectives</target>
        </trans-unit>
        <trans-unit id="cf3a5341fee9f65ebbbced141b0b3a7e184e0347" translate="yes" xml:space="preserve">
          <source>Occasionally, a GRE tunnel will be required to handle the VRRP traffic. To accomplish this, set the following in &lt;code&gt;/var/opt/opscode/keepalived/bin/tunnel.sh&lt;/code&gt; on the back-end server that will be used for bootstrapping:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d782fec8f815f0a5ddbe7475fbfbd74162d63a39" translate="yes" xml:space="preserve">
          <source>Often, a workstation is configured to use the Chef development kit as the development toolkit. The Chef development kit is a package from Chef that provides an optional (but recommended) set of tooling, including Chef itself, the chef command line tool, Kitchen, ChefSpec, Berkshelf, and more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="703678013186879e27914d489f38c9314d73afe7" translate="yes" xml:space="preserve">
          <source>Ohai</source>
          <target state="translated">Ohai</target>
        </trans-unit>
        <trans-unit id="bba4ae127f188c29f3f598630ab3f0a9ffc8280c" translate="yes" xml:space="preserve">
          <source>Ohai Settings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="311bd54c29bcd3f4e4a89912b6edbe43caf8bd0d" translate="yes" xml:space="preserve">
          <source>Ohai collects platform information at the start of the chef-client run and stores that information in the &lt;code&gt;node['platform']&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bfa440e604499516f791756000f486ea3e6c92b" translate="yes" xml:space="preserve">
          <source>Ohai configuration settings can be added to the client.rb file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0e4fa07cc69e60fe45d42ca4c9439860a18fb5c" translate="yes" xml:space="preserve">
          <source>Ohai hints are used to tell Ohai something about the system that it is running on that it would not be able to discover itself. An Ohai hint exists if a JSON file exists in the hint directory with the same name as the hint. For example, calling &lt;code&gt;hint?('antarctica')&lt;/code&gt; in an Ohai plugin would return an empty hash if the file &lt;code&gt;antarctica.json&lt;/code&gt; existed in the hints directory, and return nil if the file does not exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63c8a3895dc43d5a0f930848810f4d04bf7c81e3" translate="yes" xml:space="preserve">
          <source>Ohai is a tool that is used to detect attributes on a node, and then provide these attributes to the chef-client at the start of every chef-client run. Ohai is required by the chef-client and must be present on a node. (Ohai is installed on a node as part of the chef-client install process.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5ff7b850bb263cad5d50766c96115f7c4570834" translate="yes" xml:space="preserve">
          <source>On CentOS and Red Hat Enterprise Linux systems, SELinux is enabled in enforcing mode by default. The Chef server does not have a profile available to run under SELinux. In order for the Chef server to run, SELinux must be disabled or set to &lt;code&gt;Permissive&lt;/code&gt; mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02bea76d3640756e462fcc36251e2ff7dad8b866" translate="yes" xml:space="preserve">
          <source>On CentOS and Red Hat Enterprise Linux systems, the Apache Qpid daemon is installed by default. The Chef server uses RabbitMQ for messaging. Because both Apache Qpid and RabbitMQ share the same protocol, Apache Qpid must be disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4a3646286676a8ff8e5c7e508fcb4e611863a27" translate="yes" xml:space="preserve">
          <source>On Linux, the following error sometimes occurs when the permissions used to run the chef-client are incorrect:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d65398bfbc4692e87326bfd3c85ab1b4077f43c3" translate="yes" xml:space="preserve">
          <source>On Microsoft Windows machines: The &lt;code&gt;knife bootstrap windows winrm&lt;/code&gt; subcommand is issued from a workstation. (This command is part of the knife windows plugin .) The hostname, IP address, or FQDN of the target node is issued as part of this command. A connection is established with the target node using WinRM over port 5985. (WinRM must be enabled with the corresponding firewall rules in place.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16496f6d1a25b570630eb4915a64618762d54d15" translate="yes" xml:space="preserve">
          <source>On Microsoft Windows machines: The batch file that is derived from the windows-chef-client-msi.erb bootstrap template executes the &lt;code&gt;chef-client&lt;/code&gt; binary with a set of initial settings stored within &lt;code&gt;first-boot.json&lt;/code&gt; on the node. &lt;code&gt;first-boot.json&lt;/code&gt; is generated from the workstation as part of the initial &lt;code&gt;knife bootstrap&lt;/code&gt; subcommand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="343dbbcdc7110e60aa308aefb775c23d9ff02ba1" translate="yes" xml:space="preserve">
          <source>On Microsoft Windows machines: The batch file that is derived from the windows-chef-client-msi.erb bootstrap template will make a request to the Chef website to get the .msi installer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88de2422cde6186076d61303f8ae6ed79478e99e" translate="yes" xml:space="preserve">
          <source>On Microsoft Windows, &lt;code&gt;C:/opscode/chefdk/bin&lt;/code&gt; must be before &lt;code&gt;C:/opscode/chefdk/embedded/bin&lt;/code&gt; in the &lt;code&gt;PATH&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="368246ead035c4618565da9f8f51906ea1eecaca" translate="yes" xml:space="preserve">
          <source>On Microsoft Windows, both the &lt;code&gt;HUP&lt;/code&gt; and &lt;code&gt;QUIT&lt;/code&gt; signals are not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e9caecdb53b9bcd54c10d8cb0cb846896b0b562" translate="yes" xml:space="preserve">
          <source>On Microsoft Windows, running without elevated privileges (when they are necessary) is an issue that fails silently. It will appear that the chef-client completed its run successfully, but the changes will not have been made. When this occurs, do one of the following to run the chef-client as the administrator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba1cbe6472c844031b05008cff4d4d55fb3b8302" translate="yes" xml:space="preserve">
          <source>On Microsoft Windows, the chef-client must have two entries added to the &lt;code&gt;PATH&lt;/code&gt; environment variable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1624e2497e194b004aeda82e1d91108dad27a89" translate="yes" xml:space="preserve">
          <source>On UNIX- and Linux-based machines, the default location for this file is &lt;code&gt;/etc/chef/client.rb&lt;/code&gt;; on Microsoft Windows machines, the default location for this file is &lt;code&gt;C:\chef\client.rb&lt;/code&gt;; use the &lt;code&gt;--config&lt;/code&gt; option from the command line to change this location</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb6a0417265c19a5d2c1acee0a15dd9cb31f22c0" translate="yes" xml:space="preserve">
          <source>On UNIX- and Linux-based machines: The &lt;code&gt;knife bootstrap&lt;/code&gt; subcommand is issued from a workstation. The hostname, IP address, or FQDN of the target node is issued as part of this command. An SSH connection is established with the target node using port 22. A shell script is assembled using the chef-full.erb (the default bootstrap template), and is then executed on the target node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a2383b62c6af52e0ad0e0ef081a386560b10341" translate="yes" xml:space="preserve">
          <source>On UNIX- and Linux-based machines: The second shell script executes the &lt;code&gt;chef-client&lt;/code&gt; binary with a set of initial settings stored within &lt;code&gt;first-boot.json&lt;/code&gt; on the node. &lt;code&gt;first-boot.json&lt;/code&gt; is generated from the workstation as part of the initial &lt;code&gt;knife bootstrap&lt;/code&gt; subcommand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17bfb76a09e1abe0b70bc0feb7ee29cddee8c0b6" translate="yes" xml:space="preserve">
          <source>On UNIX- and Linux-based machines: The shell script that is derived from the chef-full.erb bootstrap template will make a request to the Chef website to get the most recent version of a second shell script (&lt;code&gt;install.sh&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="313a881ed5c9336816a694719f12472724fc8ca5" translate="yes" xml:space="preserve">
          <source>On UNIX-based systems, the best way to manipulate environment keys is with the &lt;code&gt;ENV&lt;/code&gt; variable in Ruby; however, this approach does not have the same permanent effect as using the &lt;strong&gt;env&lt;/strong&gt; resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80b5782beb3afc99aaf03fbe383eaec2e2a8f545" translate="yes" xml:space="preserve">
          <source>On Ubuntu systems, AppArmor is enabled in enforcing mode by default. Chef products do not have a profile available to run under AppArmor. In order for the Chef products to run, AppArmor must set to &lt;code&gt;Complaining&lt;/code&gt; mode or disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e1f150520161db2774bc1f4202cd6b8e9f83a63" translate="yes" xml:space="preserve">
          <source>On a system with the chef-client installed, use Ruby to make an authenticated request to the Chef server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fdbe8608718cde868058787153b3387b70c1818" translate="yes" xml:space="preserve">
          <source>On back-end servers in a high availability topology, Keepalived is used by the clustering service to determine whether a service should be running. If the &lt;code&gt;status&lt;/code&gt; subcommand is run against any of these nodes, a few things change:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91c28b91c1eb2b868ebec6ab1f3d73fb9c6870b1" translate="yes" xml:space="preserve">
          <source>On certain platforms, and after a file has been moved into place, the chef-client may modify file permissions to support features specific to those platforms. On platforms with SELinux enabled, the chef-client will fix up the security contexts after a file has been moved into the correct location by running the &lt;code&gt;restorecon&lt;/code&gt; command. On the Microsoft Windows platform, the chef-client will create files so that ACL inheritance works as expected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da00d86a94d199982306c9dca6ede0247c835d7b" translate="yes" xml:space="preserve">
          <source>On each front end server in the Chef server configuration, run:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6f23a8e82ff5b901bd486744ba5aecb39b6a484" translate="yes" xml:space="preserve">
          <source>On each host, its own status is reported first, and then the status of its remote partner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a55e6f199c58d8301a6279e3c9a337d9f59d0f5d" translate="yes" xml:space="preserve">
          <source>On each workstation, this directory is the location into which SSL certificates are placed after they are downloaded from the Chef server using the &lt;code&gt;knife ssl fetch&lt;/code&gt; subcommand</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6d942741d704a7c8e2208e372fd1156d9ed3167" translate="yes" xml:space="preserve">
          <source>On every node, this directory is the location into which SSL certificates are placed when a node has been bootstrapped with the chef-client from a workstation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7501282f4a40c26c40638b1772a6d3980fca4002" translate="yes" xml:space="preserve">
          <source>On the Chef server machine create the ORGANIZATION-validator.pem from the command line using chef-server-ctl. Run the following command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1d1a7ae2081d556a1f21c006a85a4b3096c9241" translate="yes" xml:space="preserve">
          <source>On the Chef server machine create the USER.pem from the command line using chef-server-ctl. Run the following command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b23803eb76f39c0291569832f4d9123c381878b" translate="yes" xml:space="preserve">
          <source>On the Chef server, run:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b73c79ee302f34188368c4c562d2546bc2786ef" translate="yes" xml:space="preserve">
          <source>On the back-end node that is currently the backup server, it is normal to see only one running process: Keepalived</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cf476b701a4fcc383b14881b2d4c613693ebf4a" translate="yes" xml:space="preserve">
          <source>On the back-end node that is currently the master server, it is normal to see all services running. It is also normal to see some services in a down state if the server, on reboot, did not attempt to start the services because Keepalived determines which services are restarted based on the state of the cluster</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7365ee45e89e70361122a9d67bad6f002d22c24" translate="yes" xml:space="preserve">
          <source>On the primary back end server, stop all services except Keepalived. With Chef server 12, the Keepalived service will not be stopped with the following command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d12ace2b8b23642af0f57de5701d8917d3ba456" translate="yes" xml:space="preserve">
          <source>On the primary backend server, define it as the primary shared device. For Red Hat and CentOS 6:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1891fe4f103048fbf7f2a583f13f651454df0b7d" translate="yes" xml:space="preserve">
          <source>On the primary backend server, mount the file system. For example, a file system named &lt;code&gt;ext4&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8621fee9d6e0a4fda48a49988b2f4ee3b66db994" translate="yes" xml:space="preserve">
          <source>On the secondary node, the status will look similar to the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b2a935ca8eeb832f05fd7da89d68697136594f2" translate="yes" xml:space="preserve">
          <source>On your Chef server, if the &lt;code&gt;chef-server.rb&lt;/code&gt; file does not exist, create it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e71f809ac2af23b5542584fef416ffd3f656e6dd" translate="yes" xml:space="preserve">
          <source>Once a cookbook version is frozen, only by using the &lt;code&gt;--force&lt;/code&gt; option can an update be made. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cd6e5d05f9032315771b40d7081e31104c17c29" translate="yes" xml:space="preserve">
          <source>Once built, the custom resource may be used in a recipe just like the any of the resources that are built into Chef. The resource gets its name from the cookbook and from the file name in the &lt;code&gt;/resources&lt;/code&gt; directory, with an underscore (&lt;code&gt;_&lt;/code&gt;) separating them. For example, a cookbook named &lt;code&gt;exampleco&lt;/code&gt; with a custom resource named &lt;code&gt;site.rb&lt;/code&gt; is used in a recipe like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fa1afcefc50b066dd36fca5bc02ff218f3d4280" translate="yes" xml:space="preserve">
          <source>Once built, the custom resource may be used in a recipe just like the any of the resources that are built into Chef. The resource gets its name from the cookbook and from the file name in the &lt;code&gt;/resources&lt;/code&gt; directory, with an underscore (&lt;code&gt;_&lt;/code&gt;) separating them. For example, a cookbook named &lt;code&gt;host&lt;/code&gt; with a custom resource in the &lt;code&gt;/resources&lt;/code&gt; directory named &lt;code&gt;porter.rb&lt;/code&gt;. Use it in a recipe like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a084482aaa019738418297824ee1599fafdff0ab" translate="yes" xml:space="preserve">
          <source>Once declared, a template can then use the helper methods to build a file. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1cf3799a7044d1c930fd1c3d98537f9c70388c7" translate="yes" xml:space="preserve">
          <source>Once the new host is identified and the DRBD devices on that host are ready, bring up DRBD and get it talking to the secondary back-end server. This secondary server should not want to be the primary server; it should be waiting for the old primary server to return. Start up DRBD on the new host and verify that it is listening on the correct port and that the status in &lt;code&gt;/proc/drbd&lt;/code&gt; is reporting that the host is up, but in the &lt;code&gt;WFConnect: waiting for connection&lt;/code&gt; state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9def529eff21beaa53f0aa595e1a8757e22767a5" translate="yes" xml:space="preserve">
          <source>Once the workstation machine is configured, it can be used to install the chef-client on one (or more) nodes across the organization using a knife bootstrap operation. The &lt;code&gt;knife bootstrap&lt;/code&gt; command is used to SSH into the target machine, and then do what is needed to allow the chef-client to run on the node. It will install the chef-client executable (if necessary), generate keys, and register the node with the Chef server. The bootstrap operation requires the IP address or FQDN of the target system, the SSH credentials (username, password or identity file) for an account that has root access to the node, and (if the operating system is not Ubuntu, which is the default distribution used by &lt;code&gt;knife bootstrap&lt;/code&gt;) the operating system running on the target system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56e4514ac38ca8cbf32a46d81fb69bcd8083a0e4" translate="yes" xml:space="preserve">
          <source>One (or more) 60 character segments that comprise the canonical header. A canonical header is signed with the private key used by the client machine from which the request is sent, and is also encoded using Base64. If more than one segment is required, each should be named sequentially, e.g. &lt;code&gt;X-Ops-Authorization-1&lt;/code&gt;, &lt;code&gt;X-Ops-Authorization-2&lt;/code&gt;, &lt;code&gt;X-Ops-Authorization-N&lt;/code&gt;, where &lt;code&gt;N&lt;/code&gt; represents the integer used by the last header that is part of the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60548431e04f6e75c7c8017728ad75b97681548f" translate="yes" xml:space="preserve">
          <source>One (or more) additional options that are passed to the command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f85aeb5a937f4d7805c5aea4c88300b4123d76d" translate="yes" xml:space="preserve">
          <source>One (or more) additional options that are passed to the command. For example, common apt-get directives, such as &lt;code&gt;--no-install-recommends&lt;/code&gt;. See the &lt;a href=&quot;http://manpages.debian.net/cgi-bin/man.cgi?query=apt-get&quot;&gt;apt-get man page&lt;/a&gt; for the full list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bc8be619ef011799f9c2088ff26e0e7413ffa80" translate="yes" xml:space="preserve">
          <source>One (or more) comments about the user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="870dce14363a143a1447e956923b174e44a4ce27" translate="yes" xml:space="preserve">
          <source>One (or more) patterns for a command line. If this option is not specified, a list of patterns may be expected on standard input. Default: &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2415eb15931d92465ed4e2623fd58a30e75c472a" translate="yes" xml:space="preserve">
          <source>One (or more) services are down. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73038a078eea1234b2f8123a2e35dea57f292bfd" translate="yes" xml:space="preserve">
          <source>One (or more) workstations are configured to allow users to author, test, and maintain cookbooks. Cookbooks are uploaded to the Chef server from the workstation. Some cookbooks are custom to the organization and others are based on community cookbooks available from the Chef Supermarket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aa3056c60aa3b67d08c9c802c642679e1b9ff17" translate="yes" xml:space="preserve">
          <source>One approach for enabling or disabling services that are managed by System Resource Controller (SRC) is to use the &lt;strong&gt;execute&lt;/strong&gt; resource to invoke &lt;code&gt;mkitab&lt;/code&gt;, and then use that command to enable or disable the service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d2456e4989d515bd36b8c12fedad07bc835f7af" translate="yes" xml:space="preserve">
          <source>One approach is to set attributes at the same precedence level by setting attributes in a cookbook&amp;rsquo;s attribute files, and then also setting the same default attributes (but with different values) using a role. The attributes set in the role will be deep merged on top of the attributes from the attribute file, and the attributes set by the role will take precedence over the attributes specified in the cookbook&amp;rsquo;s attribute files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51c71c1fca8357641e7d35726245fd7e37d23596" translate="yes" xml:space="preserve">
          <source>One approach to working around the double- vs. single-quote issue is to put the single-quotes outside of the double-quotes. For example, for Notepad++:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f536a53de31e6856f575d8d4b5e432c91edcfe5" translate="yes" xml:space="preserve">
          <source>One of the following: the name of a package, the name of a package and its architecture, the name of a dependency. Default value: the &lt;code&gt;name&lt;/code&gt; of the resource block See &amp;ldquo;Syntax&amp;rdquo; section above for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a694b3c52ecd30b83f28de960557f1cfbdda3a4" translate="yes" xml:space="preserve">
          <source>One or more command line flags that are passed to the interpreter when a command is invoked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d30882898734abc7211a0aaebaa097dd2061e3e" translate="yes" xml:space="preserve">
          <source>Only inherited rights remain. All existing explicit rights on the object are removed and replaced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="069ff1a92d67fd47f73a96aaa2ce009a716b9161" translate="yes" xml:space="preserve">
          <source>Only upload stable cookbooks from master.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d26ae1cc4c79fdc0d153a3a4c3684ba3330e1a3" translate="yes" xml:space="preserve">
          <source>Only upload unstable cookbooks from the dev branch. Merge to master and bump the version when stable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="621bfb064faf2768bc60ba5c1f15325f263f02de" translate="yes" xml:space="preserve">
          <source>Open &lt;strong&gt;Connections&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="651f5a0fd17bef78a2d3b21163db0ea8e53339cd" translate="yes" xml:space="preserve">
          <source>Open &lt;strong&gt;Environment Variables&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5761090ce0bcc09745539408c328af54a7c7a23b" translate="yes" xml:space="preserve">
          <source>Open &lt;strong&gt;Internet Properties&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7829876d8e855fa41bcf6d9e5270f6532b4f3535" translate="yes" xml:space="preserve">
          <source>Open &lt;strong&gt;LAN settings&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ab3e624bd85df6913f10d35d0026bd0ee56a7c5" translate="yes" xml:space="preserve">
          <source>Open &lt;strong&gt;System Properties&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d009cb58e46ce6a64264277400f06720a94a2013" translate="yes" xml:space="preserve">
          <source>Open &lt;strong&gt;System variables&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2b605ae50c0ed49bf230af407dfdb9715f983a2" translate="yes" xml:space="preserve">
          <source>Open a command prompt by right-clicking on the command prompt application, and then selecting &lt;strong&gt;Run as administrator&lt;/strong&gt;. After the command window opens, the chef-client can be run as the administrator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="465e675da4be1f10e2aa556e3d86ad677f7bc992" translate="yes" xml:space="preserve">
          <source>Open a command window and enter the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9526fb1beb08d769202d8a660894f743621e56a" translate="yes" xml:space="preserve">
          <source>Open an Erlang command shell to begin diagnosing service issues on the Chef server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92317df05a65b5e8a8d6da3f9f5cef657ab7b7c9" translate="yes" xml:space="preserve">
          <source>Open the Chef management console.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6781c38861693735ebed16e82a2498ff0cd2df9d" translate="yes" xml:space="preserve">
          <source>Open up the newly created &lt;code&gt;chef-server.rb&lt;/code&gt; file in your favorite text editor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aeb98c5ee3d7158dd0013a1a3d6bcab5a8edbae" translate="yes" xml:space="preserve">
          <source>OpenBSD. All platform variants of OpenBSD return &lt;code&gt;openbsd&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0e687b079fb70f2208d1f8d2c75d64d74925496" translate="yes" xml:space="preserve">
          <source>Operator</source>
          <target state="translated">Operator</target>
        </trans-unit>
        <trans-unit id="e90414358dbfff0a68e4eb5d68a16978cf197d5a" translate="yes" xml:space="preserve">
          <source>Operators</source>
          <target state="translated">Operators</target>
        </trans-unit>
        <trans-unit id="06e7835c13272e352c85af7b08c6dacc7b10a131" translate="yes" xml:space="preserve">
          <source>Operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e31d972229de381b461860014dd710856361917a" translate="yes" xml:space="preserve">
          <source>Option</source>
          <target state="translated">Option</target>
        </trans-unit>
        <trans-unit id="aab5ebf8cf05eeaa7cf8e2ec8481aaaa322fc156" translate="yes" xml:space="preserve">
          <source>Option Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="660fb2435ec574695f7d93cb93685e393eb52f7f" translate="yes" xml:space="preserve">
          <source>Optional Interfaces</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="111160aa0d3d16636bd28cf90b8f53772181bd6e" translate="yes" xml:space="preserve">
          <source>Optional Services Tuning</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39fb394c58f8666025a8b1ff70de7e4a8e65e1e6" translate="yes" xml:space="preserve">
          <source>Optional Settings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93cf6a183b3fc31fb03c22e6141db3a50fd230fb" translate="yes" xml:space="preserve">
          <source>Optional when &lt;code&gt;postgresql['external']&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;. The port on which the service is to listen. The port used by PostgreSQL if that port is &lt;strong&gt;not&lt;/strong&gt; 5432. Default value: &lt;code&gt;5432&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99051378995bc9e64798f2355c9b8dc54c031c83" translate="yes" xml:space="preserve">
          <source>Optional, see &lt;code&gt;use_conditional_get&lt;/code&gt;. The SHA-256 checksum of the file. Use to prevent a file from being re-downloaded. When the local file matches the checksum, the chef-client does not download it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b21b9286b417c3ce0eb1c2cfe3588e7bb7568437" translate="yes" xml:space="preserve">
          <source>Optional. A local user account under which services will run, a local user account for PostgreSQL, and a group account under which services will run. See &lt;a href=&quot;install_server_pre#install-server-pre-uids-and-gids&quot;&gt;UIDs and GIDs&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="287b3bcd2afff5b442af438257135ee7407dec43" translate="yes" xml:space="preserve">
          <source>Optional. Add default attributes as JSON data:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc81b481626f0ba3346f08e86589a57d70ab5f26" translate="yes" xml:space="preserve">
          <source>Optional. Add override attributes as JSON data:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="876a71a3f80494c13a6463c717386f371784d5cc" translate="yes" xml:space="preserve">
          <source>Optional. Build the run-list from the list of available roles and recipes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6b67fe0b6fb8a4d6184a42b8a6e7ece4bf8bf5f" translate="yes" xml:space="preserve">
          <source>Optional. Explicitly specifies a provider.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a171b19d63fc64e6d7674f57e827de7d2ea3db36" translate="yes" xml:space="preserve">
          <source>Optional. Explicitly specifies a provider. See &amp;ldquo;Providers&amp;rdquo; section below for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2373650931391f605def34557fff4043b56879bc" translate="yes" xml:space="preserve">
          <source>Optional. Set a constraint by choosing a name, an operator, and a version:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="807e7a11212bc88782335dc812e22051f664fbff" translate="yes" xml:space="preserve">
          <source>Optional. Set the default shell. On Microsoft Windows it is strongly recommended to use Windows PowerShell and cmd.exe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bce142b7372e236fa11be9bde19ce9555a8a645e" translate="yes" xml:space="preserve">
          <source>Optional. The URL at which the gem package is located.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f993f7881ddabec03288e6934b51e53eba095a0" translate="yes" xml:space="preserve">
          <source>Optional. The chef-client will attempt to determine the correct provider during the chef-client run, and then choose the best/correct provider based on configuration data collected at the start of the chef-client run. In general, a provider does not need to be specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6e3c3fba326a678b3c39d5d3921fd486aecc6da" translate="yes" xml:space="preserve">
          <source>Optional. The direct path to a dpkg or deb package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a5bf34e4ecb3f434c20d572bf1480ec53b75c16" translate="yes" xml:space="preserve">
          <source>Optional. The home directory for the user that is running the chef-client as a non-root user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3e378f78b8e854342f0588585bec0ca9f175e18" translate="yes" xml:space="preserve">
          <source>Optional. The name of an Ohai plugin to be reloaded. If this property is not specified, the chef-client will reload all plugins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="869335f9fce9ca67a864abd2af7ea5cb5bae8d61" translate="yes" xml:space="preserve">
          <source>Optional. The path to a package in the local file system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4cfed71c0e9412a2d56f7b39f76921f22c17cf2" translate="yes" xml:space="preserve">
          <source>Optional. The path to a package in the local file system. The location of the package may be at a URL. Default value: the &lt;code&gt;name&lt;/code&gt; of the resource block See &amp;ldquo;Syntax&amp;rdquo; section above for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bf5da9c080bee3a8142586c412aa39971137eee" translate="yes" xml:space="preserve">
          <source>Options</source>
          <target state="translated">Options</target>
        </trans-unit>
        <trans-unit id="320517499f75dbebcac6259c4dd768bd154c222e" translate="yes" xml:space="preserve">
          <source>Options can be specified in a .gemrc file. By default the &lt;code&gt;gem_package&lt;/code&gt; resource will use the Ruby interface to install gems which will ignore the .gemrc file. The &lt;code&gt;gem_package&lt;/code&gt; resource can be forced to use the gems command instead (and to read the .gemrc file) by adding the &lt;code&gt;gem_binary&lt;/code&gt; attribute to a code block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cfdea5ccaff0e80dce7924270369e35c121efed" translate="yes" xml:space="preserve">
          <source>Options for the &lt;code&gt;upgrade&lt;/code&gt; subcommand may only be used when upgrading from Open Source Chef 11 to Chef server 12.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="266da196d95c72342f678351d3a581f6b95953d4" translate="yes" xml:space="preserve">
          <source>Or a less verbose version of the same simple recipe:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1abbff014d44e31b4971a535fde5c47fdb053775" translate="yes" xml:space="preserve">
          <source>Or matches any 12.x (or higher) version of the chef-client:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fa4191ca7e330e364f67aad1008279dea03e528" translate="yes" xml:space="preserve">
          <source>Or matches any 8.x (or higher) version of Ohai:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f6c09fc7812c5f9465f7b455bc2158826dc3def" translate="yes" xml:space="preserve">
          <source>Or matches any version of the chef-client greater than 12.5.1, any 13.x version, but no 14.x versions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98f3b985bbea2b1cb4597090c62fd997364bc248" translate="yes" xml:space="preserve">
          <source>Or matches any version of the chef-client greater than or equal to 11.18.4 and less than 12.0 and also any version of the chef-client greater than or equal to 12.5.1, but less than 13.0:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a49cafcbb9facb36f3943cdc7aae3666eeab6cd6" translate="yes" xml:space="preserve">
          <source>Or remove the remote branch by using the full syntax to &lt;code&gt;push&lt;/code&gt; and by omitting a source branch:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2763a0bf2a77f2dffecc38cf7d553d59311a1600" translate="yes" xml:space="preserve">
          <source>Or the following definition, which looks like a resource when used in a recipe, but also contains resources&amp;mdash;&lt;strong&gt;directory&lt;/strong&gt; and &lt;strong&gt;file&lt;/strong&gt;&amp;mdash;that are repeated, but with slightly different parameters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="403c183a79af5abfc06a798333707c327c5aee3b" translate="yes" xml:space="preserve">
          <source>Or to disable AppArmor entirely, run:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87e0d39b5f4ff24b7431372e3e39b7587a462f84" translate="yes" xml:space="preserve">
          <source>Or to read the contents from a specified file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fbf625508439436d046e0681af18f6e2c2c4dd7" translate="yes" xml:space="preserve">
          <source>Or to search for an administrator named &amp;ldquo;charlie&amp;rdquo;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b8656c8c55bcd847fc1502d3a089b441975c441" translate="yes" xml:space="preserve">
          <source>Or to search for an administrator whose name begins with the letter &amp;ldquo;c&amp;rdquo;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee87b48c5efebaa42f807423a67e4281671401f7" translate="yes" xml:space="preserve">
          <source>Or to search for an administrator with a group identifier of &amp;ldquo;ops&amp;rdquo;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff159edd8d1795df728c7033d939a64eebce526c" translate="yes" xml:space="preserve">
          <source>Or, a pessimistic version constraint for patch version numbers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="022dd66164855ad5f672dba5060908fa41718a5e" translate="yes" xml:space="preserve">
          <source>Or, a pessimistic version constraint that matches cookbooks less than a version number:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47ee500f0039a7db32cf3776546aa2016be821c4" translate="yes" xml:space="preserve">
          <source>Or, to find all of the computers running on the Microsoft Windows platform that are associated with a role named &lt;code&gt;jenkins&lt;/code&gt;, enter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b204a6a036db4695cb2329cc1809b428550a3201" translate="yes" xml:space="preserve">
          <source>Or, to include the same search in a recipe, use a code block similar to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cd69a81f04deda81f59cbb1c30bcbc0862083dc" translate="yes" xml:space="preserve">
          <source>Or, to include the same search query in a recipe, use a code block similar to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00fcdda14949d42c1610edfba9ca80d41d59564f" translate="yes" xml:space="preserve">
          <source>Or:</source>
          <target state="translated">Or:</target>
        </trans-unit>
        <trans-unit id="e9dd9f82875e1ce5d89f6ab4398a6cfc155bb995" translate="yes" xml:space="preserve">
          <source>Oracle Linux</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62fb34ae06ec551305f81d5b036093deecfccfc0" translate="yes" xml:space="preserve">
          <source>Order matters when passing multiple actions. For example: &lt;code&gt;action [:mount, :enable]&lt;/code&gt; ensures that the file system is mounted before it is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="756ca8752560e3ddd444fc6be7b2ac3c9d4a6287" translate="yes" xml:space="preserve">
          <source>Organization Endpoints</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="534687a2156c92ab03b2eb2cf9e6e1c246a055b7" translate="yes" xml:space="preserve">
          <source>Organization Management</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3712472f383762a2a5648e6f6bfaf77edb10d6b1" translate="yes" xml:space="preserve">
          <source>Organizations and Groups</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f01ca105b5dd8c0065e9c1398245c4f35afe57d3" translate="yes" xml:space="preserve">
          <source>Organizations, users, and groups can be managed from the Chef management console, including role-based access control for any user and group to any of the objects saved to the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cb6f2fb01dfa81e12bc1e11f0e7b676e54669fd" translate="yes" xml:space="preserve">
          <source>Other Options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="820fd904777810aed6a7e6898670f40cc659b7ce" translate="yes" xml:space="preserve">
          <source>Other SSH-related settings that are sometimes helpful when added to the knife.rb file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54f3434c9cf0227c914663f9f8dfdf5a9a399d9c" translate="yes" xml:space="preserve">
          <source>Other configuration details</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fad601ac82a9ee10ba70de03a5f440a795557b7b" translate="yes" xml:space="preserve">
          <source>Other formats available include &lt;code&gt;text&lt;/code&gt;, &lt;code&gt;yaml&lt;/code&gt;, and &lt;code&gt;pp&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="184d857a56f4606d7cbfe39e78750dbbc1634b2f" translate="yes" xml:space="preserve">
          <source>Other formatting options are available when those formatters are configured in the client.rb file using the &lt;code&gt;add_formatter&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8adb011e40a331d8637664b558b78deafbeb561" translate="yes" xml:space="preserve">
          <source>Otherwise it will print out a list of errors, similar to the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb0fc0240b24f53b13b63285ab9439a4e99931c7" translate="yes" xml:space="preserve">
          <source>Otherwise, a resource defined in the &lt;code&gt;/libraries&lt;/code&gt; directory is done using Ruby, is added to recipes as if it were any other resource, and is processed by the chef-client in the same way as any other resource. See the &lt;code&gt;/libraries&lt;/code&gt; directory in the &lt;a href=&quot;https://github.com/chef-cookbooks/database&quot;&gt;database&lt;/a&gt; and &lt;a href=&quot;https://github.com/hw-cookbooks/runit&quot;&gt;runit&lt;/a&gt; cookbooks for complete examples of how to use this approach when defining a resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="587810778f76352b09d046fc5d7fe4e6491e4133" translate="yes" xml:space="preserve">
          <source>Output similar to the following is returned:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c52b04001fa3d784607d8bbb5c9fc4d4e7d1fd3" translate="yes" xml:space="preserve">
          <source>Output similar to the following will be shown:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d12ed08a6f12ca2d1c0041245f04df09b65bf38" translate="yes" xml:space="preserve">
          <source>Over time, and with enough data, disks will fill up or exceed the per-disk quotas that may have been set for them and they will not be able to write data. A disk that is not able to write data will not be able to support certain components of the Chef server, such as PostgreSQL, RabbitMQ, service log files, and deleted file handles. Monitoring disk usage is the best way to ensure that disks don&amp;rsquo;t fill up or exceed their quota.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cdaa4845614cb22431399f1c2cc7dde78688527" translate="yes" xml:space="preserve">
          <source>Override Attributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00c7938962929e355d56d680c150f8e5cefa88c1" translate="yes" xml:space="preserve">
          <source>Override the host on which chef-zero listens.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd52493d584d33aca9a9bee7848e6e75b604d190" translate="yes" xml:space="preserve">
          <source>Override the host on which chef-zero listens. Default value: &lt;code&gt;127.0.0.1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0329436a0c566313da6deb4fdd04015df052a84e" translate="yes" xml:space="preserve">
          <source>Overwrite a file when it is different. Default value: &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72f8120553dff797dcabe7d512b50c5ff201b15c" translate="yes" xml:space="preserve">
          <source>Overwrite an existing directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e065a17a7d5adec9a2daad44968f0a44fc7a0a83" translate="yes" xml:space="preserve">
          <source>PATH System Variable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61ff81c30aa3c76e78afea62b2e3bd1dfa49e854" translate="yes" xml:space="preserve">
          <source>POST</source>
          <target state="translated">POST</target>
        </trans-unit>
        <trans-unit id="091b0ce42eb0bd96169ea00b16dd938f6d63ac95" translate="yes" xml:space="preserve">
          <source>PUT</source>
          <target state="translated">PUT</target>
        </trans-unit>
        <trans-unit id="d774411501da5c8828c6cb8cd4e4557f6e2c1f97" translate="yes" xml:space="preserve">
          <source>Parallel requests can be made to the Chef server and are configurable on a per-command basis</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f699f295e5ae4ac633cfa18437fed38d028b3fdb" translate="yes" xml:space="preserve">
          <source>Parameter</source>
          <target state="translated">Parameter</target>
        </trans-unit>
        <trans-unit id="32622d430329259ef9dd557b691b30b7e04ab3fc" translate="yes" xml:space="preserve">
          <source>Parameter Order</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a975eea30db9fa05003e3b5097688bd49ec7e01b" translate="yes" xml:space="preserve">
          <source>Parameters</source>
          <target state="translated">Parameters</target>
        </trans-unit>
        <trans-unit id="1a0f33a40726b2f5c214fb0ded9d5ad32ca0b98b" translate="yes" xml:space="preserve">
          <source>Partial Templates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a65d767d7d44cf9e1479770c5181ebc72f734b19" translate="yes" xml:space="preserve">
          <source>Pass parameters to the DSC script that is specified by the &lt;code&gt;command&lt;/code&gt; property. Parameters are defined as key-value pairs, where the value of each key is the parameter to pass. This property may not be used in the same recipe as the &lt;code&gt;code&lt;/code&gt; property. For example: &lt;code&gt;flags ({ :EditorChoice =&amp;gt; 'emacs', :EditorFlags =&amp;gt; '--maximized' })&lt;/code&gt;. Default value: &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c4672c66f257f3b25d69d8b800e34e8c2d28de2" translate="yes" xml:space="preserve">
          <source>Password Shadow Hash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="233c889740ce51b8255103d79bc65357a12bf35e" translate="yes" xml:space="preserve">
          <source>Password resets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18eac823898fd50e8915757ecd7d63ef54d6b816" translate="yes" xml:space="preserve">
          <source>Paste or add the following text. Please note the placement of the single quotation (&amp;lsquo;) marks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8af09d5e09bd2d5e3632a258eabccdd3d4d7377d" translate="yes" xml:space="preserve">
          <source>Paths can be longer in UNIX and Linux environments than they can be in Microsoft Windows. Microsoft Windows will throw errors when path name lengths are too long. For this reason, it&amp;rsquo;s often helpful to use a very short top-level directory in Microsoft Windows, much like what is done in UNIX and Linux. For example, Chef uses &lt;code&gt;/opt/&lt;/code&gt; to install the Chef development kit on Mac OS X. A similar approach can be done on Microsoft Windows, by creating a top-level directory with a short name. For example: &lt;code&gt;c:\chef&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d34f7a2b0b3b6df62a051917d7e7ac2de8a38df" translate="yes" xml:space="preserve">
          <source>Patterns</source>
          <target state="translated">Patterns</target>
        </trans-unit>
        <trans-unit id="52a4724cd48da00c3046b9920265227e1f4d303b" translate="yes" xml:space="preserve">
          <source>Patterns to Avoid</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01cca5338e88134c974edaa716b16e5f479509a2" translate="yes" xml:space="preserve">
          <source>Patterns to Follow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa72cbef6e4905c2d1a186143eea1685bd410dc5" translate="yes" xml:space="preserve">
          <source>Perform a bootstrap operation with sudo; specify the password with the &lt;code&gt;-P&lt;/code&gt; (or &lt;code&gt;--ssh-password&lt;/code&gt;) option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d27ce17accf8865dbf99bf6be5f06342871c512e" translate="yes" xml:space="preserve">
          <source>Perform a sub-module initialization and update. Default value: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16911994b44c8f7ef544e21717f097f944ee6e78" translate="yes" xml:space="preserve">
          <source>Perform atomic file updates on a per-resource basis. Set to &lt;code&gt;true&lt;/code&gt; for atomic file updates. Set to &lt;code&gt;false&lt;/code&gt; for non-atomic file updates. This setting overrides &lt;code&gt;file_atomic_update&lt;/code&gt;, which is a global setting found in the client.rb file. Default value: &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa564f468cd6392437fd22c7050e9d1a0d5e8075" translate="yes" xml:space="preserve">
          <source>Periodic backups of Chef server data are an essential part of managing and maintaining a healthy configuration and to help ensure that important data can be restored, if required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2b30a29f7c9f54a83017c6e48a08fc2a359aa5c" translate="yes" xml:space="preserve">
          <source>Periodic maintenance tasks are performed on the Chef server servers via cron and the &lt;code&gt;/etc/cron.d&lt;/code&gt; directory. With certain CentOS 6 configurations, an additional step is required to install crontab:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57133ec5e488f7bf14024366c894330af6ebfbfb" translate="yes" xml:space="preserve">
          <source>Permanently replace the current run-list with the specified run-list items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1785713451d01948bc96b1f6cd729251ba4dfe64" translate="yes" xml:space="preserve">
          <source>Permission</source>
          <target state="translated">Permission</target>
        </trans-unit>
        <trans-unit id="d06d55570938d12f87db3bf2b48caa9de22d9c67" translate="yes" xml:space="preserve">
          <source>Permissions</source>
          <target state="translated">Permissions</target>
        </trans-unit>
        <trans-unit id="d97070c82f5f419e8605c9d65af597d7d05fbed5" translate="yes" xml:space="preserve">
          <source>Permissions are managed using the Chef management console add-on in the Chef server web user interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8478ceb941ef4b7f8c37a2bbcf8d6eb9ddf00f7" translate="yes" xml:space="preserve">
          <source>Permissions are used in the Chef server to define how users and groups can interact with objects on the server. Permissions are configured per-organization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c20c115d28ab3ae3d7843a5e8f3d6d53d7dd8a0" translate="yes" xml:space="preserve">
          <source>Permissions for the user to both the Chef server and to the node on which the chef-client run is to take place</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a25d585dda8dc0c983098b2b4343dd9f988455b" translate="yes" xml:space="preserve">
          <source>Persistent data on a backend Chef server is primarily composed of cookbook files and directories. Separate disks should be dedicated entirely to storing this data prior to installing the Chef server. These disks should:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf41f2a4bedcef445b6a98214132a0039f5944dd" translate="yes" xml:space="preserve">
          <source>Persistent data on backend servers of the Chef server is primarily composed of cookbook files and directories. Separate disks should be dedicated entirely to storing this data prior to installing the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="646a02c0278fdc97ed019df0f63adfb3d4bf0de5" translate="yes" xml:space="preserve">
          <source>Persistent data on the backend Chef server is primarily composed of cookbook files and directories. Separate disks should be dedicated entirely to storing this data prior to installing the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67fdebd8f403e647f8ca20c2329ccb705b35b863" translate="yes" xml:space="preserve">
          <source>Persistent data on the backend server of the Chef server is primarily composed of cookbook files and directories. Separate disks should be dedicated entirely to storing this data prior to installing the Chef server. These disks should:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="123a7f2fcc9ae7cbbbd7c7627a483853a9708dab" translate="yes" xml:space="preserve">
          <source>Platform</source>
          <target state="translated">Platform</target>
        </trans-unit>
        <trans-unit id="b4ff854db36516508885a0a8e9e167144ced1659" translate="yes" xml:space="preserve">
          <source>Platform details</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac1a42f5ac9a45b411a075f430e4ea8f3c6f1418" translate="yes" xml:space="preserve">
          <source>Platforms</source>
          <target state="translated">Platforms</target>
        </trans-unit>
        <trans-unit id="2c9cd06e9b95700d09ce2a046080ae6cfe520de0" translate="yes" xml:space="preserve">
          <source>Please &lt;a href=&quot;upgrade_server_open_source_notes&quot;&gt;view the notes&lt;/a&gt; for more background on the upgrade process from Open Source Chef 11 to Chef server 12.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22376eecedf158e162a15d61592f6a466835dbc3" translate="yes" xml:space="preserve">
          <source>Please consider managing community cookbooks using the version of Berkshelf that ships with the Chef development kit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9688a6fc3d8141f374c561c9f956d7e71cc69ef" translate="yes" xml:space="preserve">
          <source>Please delete the files found in the ca directory with names like this &lt;code&gt;$FQDN.crt&lt;/code&gt; and &lt;code&gt;$FQDN.key&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28dd720efec6245b6a89c696cb882c6b0949c795" translate="yes" xml:space="preserve">
          <source>Plug-ins</source>
          <target state="translated">Plug-ins</target>
        </trans-unit>
        <trans-unit id="148d3fc0ebaebeff6d7f03163dd30317b8af71d7" translate="yes" xml:space="preserve">
          <source>Plugins do not always support verbose logging.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb9cf1418089b3356038fdd24fcbdc9d1a7c42a5" translate="yes" xml:space="preserve">
          <source>Policy</source>
          <target state="translated">Policy</target>
        </trans-unit>
        <trans-unit id="007734f5db219d54f6a21f972ff318971ac68bfd" translate="yes" xml:space="preserve">
          <source>Policy defines how business and operational requirements, processes, and production workflows map to objects that are stored on the Chef server. Policy objects on the Chef server include roles, environments, and cookbook versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27a925965b0bd636c23b959961270ff5a2ccf160" translate="yes" xml:space="preserve">
          <source>Policy maps business and operational requirements, process, and workflow to settings and objects stored on the Chef server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b9aabd0588414e001471695f57692d7462c8a79" translate="yes" xml:space="preserve">
          <source>Policy, including policy files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe035157cda20b361ce30613e29b5d6f1a46b5fc" translate="yes" xml:space="preserve">
          <source>Port</source>
          <target state="translated">Port</target>
        </trans-unit>
        <trans-unit id="d6dc18c3b6277ab312e902c02c763e327c91cd1d" translate="yes" xml:space="preserve">
          <source>Port 9683 is used to internally load balance the &lt;strong&gt;oc_bifrost&lt;/strong&gt; service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16c2eb4dbbcdafb15c712951d6aee1bf0a101658" translate="yes" xml:space="preserve">
          <source>Ports</source>
          <target state="translated">Ports</target>
        </trans-unit>
        <trans-unit id="24fd6c2d1150de6a47543209150ff4c2a2d3104f" translate="yes" xml:space="preserve">
          <source>PostgreSQL</source>
          <target state="translated">PostgreSQL</target>
        </trans-unit>
        <trans-unit id="c5c03ec029ffd7e7df3ab3e42d3a2f0e546c970a" translate="yes" xml:space="preserve">
          <source>PostgreSQL Settings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f99f28dc54a766370c06a54d05fe43b31fe88d9" translate="yes" xml:space="preserve">
          <source>PostgreSQL is the data storage repository for the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c34f11767e3344552d1ea1633a63119f696d0a7" translate="yes" xml:space="preserve">
          <source>PowerShell</source>
          <target state="translated">PowerShell</target>
        </trans-unit>
        <trans-unit id="ad842906bfaa850fe9fa8df9fb8b5e460b57eb10" translate="yes" xml:space="preserve">
          <source>Prefer strings over symbols, because they&amp;rsquo;re easier to read and you don&amp;rsquo;t need to explain to non-Rubyists what a symbol is. Please retrofit old cookbooks as you come across them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eed036e414a34a0c245858652e6d88f14c3faefb" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="translated">Prerequisites</target>
        </trans-unit>
        <trans-unit id="ecd287386e6e8071ae4405a65e4e1804e767a338" translate="yes" xml:space="preserve">
          <source>Press &lt;code&gt;Enter&lt;/code&gt; to apply and install the language set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a596f5adc4dff017075078e236e5d3c5c9128573" translate="yes" xml:space="preserve">
          <source>Prevent Re-downloads</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92b851a5aeca9ea7ead4f4ade797e4613847928e" translate="yes" xml:space="preserve">
          <source>Prevent a command from creating a file when that file already exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6bd6452043138168ec50054ee42a66f98c332f4" translate="yes" xml:space="preserve">
          <source>Prevent a command from running. This action is used to specify that a command is run only when another resource notifies it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51dc4a6e74395feb9f4148f3e2f06adeccacf7bc" translate="yes" xml:space="preserve">
          <source>Prevent a directory&amp;rsquo;s children from showing when a directory matches a pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac616e55640fe75f15e35f80b3dd1a11f52d18f1" translate="yes" xml:space="preserve">
          <source>Prevent a directory&amp;rsquo;s children from showing when a directory matches a pattern. Default value: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e771d22e6269e126ccbfbaa727ebf44c891c1e24" translate="yes" xml:space="preserve">
          <source>Prevent a resource from executing when the condition returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7e40d80b719ee3f033c799b7c2a53b56f46f4e3" translate="yes" xml:space="preserve">
          <source>Prevent changes from being uploaded to the Chef server. Default: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d7eddfbbe3247844d412f809b77de7cb97aa3be" translate="yes" xml:space="preserve">
          <source>Prevent the $EDITOR from being opened and accept data as-is.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be7a9e7c0bb884b9b13e4bde9c9476ca734dbf02" translate="yes" xml:space="preserve">
          <source>Prevent the Erlang call from running.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b22a2ce395e87e0a734bcfd1d3b3d5e656e8735" translate="yes" xml:space="preserve">
          <source>Prevents insufficient permissions related to service context</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9bd7d7c394fec68a630289292caac5c5dbbadf2" translate="yes" xml:space="preserve">
          <source>Prevents issues related to a system reboot</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1a82322ddfd839fe8a1cb98b91a53177a02952c" translate="yes" xml:space="preserve">
          <source>Prevents log rotation issues, such as filling a disk partition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18e2a9d5b7615ef7c48484f22a23fe981e3b36c9" translate="yes" xml:space="preserve">
          <source>Previous versions of the Chef server used the &lt;code&gt;ldap['ssl_enabled']&lt;/code&gt; setting to first enable SSL, and then the &lt;code&gt;ldap['encryption']&lt;/code&gt; setting to specify the encryption type. These settings are deprecated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb8bcb9b1f6e5236b7906c3e627e44d778bba496" translate="yes" xml:space="preserve">
          <source>Primary Backend</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0762694addfbede6928354fc8f1ed4d6ebd74a2b" translate="yes" xml:space="preserve">
          <source>Primary File System</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ac10a4300119be13a9ad349814e6c51bf4fbcbf" translate="yes" xml:space="preserve">
          <source>Prior to chef-client 12.0, this functionality was available from the &lt;code&gt;partial_search&lt;/code&gt; cookbook and was referred to as &amp;ldquo;partial search&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78c9e296a394be4ce47945dc178d05fc34fd9646" translate="yes" xml:space="preserve">
          <source>Private Certificate Authority</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc6c88db2f0703a9e2461a4a8060ccf1cb881998" translate="yes" xml:space="preserve">
          <source>Properties</source>
          <target state="translated">Properties</target>
        </trans-unit>
        <trans-unit id="9ae33a7d0ecb82cae8f04aafab20bf90425b7b8c" translate="yes" xml:space="preserve">
          <source>Property</source>
          <target state="translated">Property</target>
        </trans-unit>
        <trans-unit id="cda1c93fc347b65e0caf1a9268e94a892ce89a9d" translate="yes" xml:space="preserve">
          <source>Protect search queries that start with a hyphen (-). A &lt;code&gt;-q&lt;/code&gt; query may be specified as an argument or an option, but not both.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87b7c08baed1c8e93db95b79bcdca55b631dd7bb" translate="yes" xml:space="preserve">
          <source>Providers</source>
          <target state="translated">Providers</target>
        </trans-unit>
        <trans-unit id="9db0b745b6fa2951c35528cc5a431b74d851a2e8" translate="yes" xml:space="preserve">
          <source>Proxies</source>
          <target state="translated">Proxies</target>
        </trans-unit>
        <trans-unit id="44f84eea384bd83aa3441dc1581db4620d063f59" translate="yes" xml:space="preserve">
          <source>Proxy Settings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="347ed8d56626ea69988b1a3e30b25fed196ccb0b" translate="yes" xml:space="preserve">
          <source>Proxy settings are defined in configuration files for the chef-client and for knife and may be specified for HTTP, HTTPS, and FTP.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45ed7974822e228a723e53c7a02d21a1233fc414" translate="yes" xml:space="preserve">
          <source>Proxy settings may be honored inconsistently by applications. For example, the behavior of the &lt;code&gt;no_proxy&lt;/code&gt; setting may not work with certain applications when wildcards are specified. Consider specifying the hostnames without using wildcards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="278dec11e16cd76cd6d3d87e81ab4ec6e486270b" translate="yes" xml:space="preserve">
          <source>Proxy settings may not be honored by all applications. For example, proxy settings may be ignored by the underlying application when specifying a &lt;code&gt;ftp&lt;/code&gt; source with a &lt;code&gt;remote_file&lt;/code&gt; resource. Consider a workaround. For example, in this situation try doing a &lt;code&gt;wget&lt;/code&gt; with an &lt;code&gt;ftp&lt;/code&gt; URL instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a199a454dfca85389910298aedf0e6c7c6d15a65" translate="yes" xml:space="preserve">
          <source>Purge a package. This action typically removes the configuration files as well as the package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39a5548980780cdd9cc86ea4f3513c01c8d030da" translate="yes" xml:space="preserve">
          <source>Purge a package. This action typically removes the configuration files as well as the package. (Debian platform only; for other platforms, use the &lt;code&gt;:remove&lt;/code&gt; action.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1da07ae1dd7f84391fb0a3ae86c136abbd5bcfc" translate="yes" xml:space="preserve">
          <source>Purge extra files found in the target directory. Default value: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fcd78a9e502464cb76a62f5cc6df7f600b5a317" translate="yes" xml:space="preserve">
          <source>Purging multiple packages:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b8c903e8edc281beb30ec75e06ad532d0d2ead4" translate="yes" xml:space="preserve">
          <source>Push the local topic branch to GitHub:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e15996927d4ef84f197eff70c56ef296a943ae4" translate="yes" xml:space="preserve">
          <source>Put this file in the directory of your choice. Run the following command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be79ffcc5317409910ad74f305c21ea17b510072" translate="yes" xml:space="preserve">
          <source>Puts the initial backup in the &lt;code&gt;/var/opt/chef-backup&lt;/code&gt; directory as a tar.gz file; move this backup to a new location for safe keeping</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20028fba53d2e71d8040e10cc1edd28ad46a4fdc" translate="yes" xml:space="preserve">
          <source>PyChef</source>
          <target state="translated">PyChef</target>
        </trans-unit>
        <trans-unit id="a58e5d2145539774f23baf9ed4e477040aaa9b09" translate="yes" xml:space="preserve">
          <source>Python packages have versions, installation directories, URLs, and checksum files. An attributes file that exists to support this type of recipe would include settings like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da03a6c60a60fc80271506454f365e20296ede5c" translate="yes" xml:space="preserve">
          <source>Query Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7d67542c61273b0ee48993a9f22e5677135e815" translate="yes" xml:space="preserve">
          <source>Query for Users and Orgs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f69c2ae7a6875b2d6cdef06022a1d81fff35c2a" translate="yes" xml:space="preserve">
          <source>RSA public key-pairs are used to authenticate knife with the Chef server every time knife attempts to access the Chef server. This ensures that each instance of knife is properly registered with the Chef server and that only trusted users can make changes to the data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b78c77cd51e9a3a8febdba6296588fea4716ca96" translate="yes" xml:space="preserve">
          <source>RSA public key-pairs are used to authenticate the chef-client with the Chef server every time a chef-client needs access to data that is stored on the Chef server. This prevents any node from accessing data that it shouldn&amp;rsquo;t and it ensures that only nodes that are properly registered with the Chef server can be managed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa974d65fd59c2b59d18cacb80da6ba8cc75b411" translate="yes" xml:space="preserve">
          <source>RabbitMQ</source>
          <target state="translated">RabbitMQ</target>
        </trans-unit>
        <trans-unit id="6ea59ea5f63c37f5cca919a3aed7ba0f5a685caa" translate="yes" xml:space="preserve">
          <source>RabbitMQ is used as the message queue for the Chef server. All items that will be added to the search index repository are first added to a queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39b6e2d4e0b853c59dbde9dd96d742316b974132" translate="yes" xml:space="preserve">
          <source>Range Matching</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="852b438f91ad9eb2cdd84419a675a216d543c687" translate="yes" xml:space="preserve">
          <source>Read</source>
          <target state="translated">Read</target>
        </trans-unit>
        <trans-unit id="b25514b7c12656aa0a60238bf6eb4cd0adf4be2d" translate="yes" xml:space="preserve">
          <source>Read Log Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e3025ac20dbe0d6577aafa2a10b12387a665394" translate="yes" xml:space="preserve">
          <source>Read more &lt;a href=&quot;handlers&quot;&gt;about exception, report, and start handlers&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8f82702d6e452cf099a14ba28a230996f66470f" translate="yes" xml:space="preserve">
          <source>Read the &lt;a href=&quot;server_components#server-components-capacity-planning&quot;&gt;guidance around capacity planning&lt;/a&gt; for information about how to choose the right toplogy for the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="768e26a48df8846f1e1d1b35c5ecf3d6c5bc96ad" translate="yes" xml:space="preserve">
          <source>Real IP Address</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc2a44c53ebd22cebed751c670341c4114a4d484" translate="yes" xml:space="preserve">
          <source>Rebase the commits against &lt;code&gt;chef/master&lt;/code&gt;. After work in the topic branch is finished, rebase these commits against the upstream master. Do this manually with &lt;code&gt;git fetch&lt;/code&gt; followed by a &lt;code&gt;git rebase&lt;/code&gt; or use &lt;code&gt;git pull --rebase&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c675a94127489042bd6485c60c5fc2ad4d4c1abb" translate="yes" xml:space="preserve">
          <source>Reboot a node at the end of a chef-client run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4095fa71610b1a6c7fca2ba8e9704f9426e44445" translate="yes" xml:space="preserve">
          <source>Reboot a node so that the chef-client may continue the installation process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b6b93516c56577216e30611e1ffa2155d36e609" translate="yes" xml:space="preserve">
          <source>Reboot the logical partition (LPAR) to apply the updated system process limits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dcda804c96da3cc7e73e8a1672d4379a741f11a" translate="yes" xml:space="preserve">
          <source>Recipe</source>
          <target state="translated">Recipe</target>
        </trans-unit>
        <trans-unit id="6ada4ca8fae45fe95b5117cff0b9a9cf7f4b62ff" translate="yes" xml:space="preserve">
          <source>Recipe Attributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aac526a2c3a9a09406a360d5abcb290242aa3af" translate="yes" xml:space="preserve">
          <source>Recipe DSL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06dd09e41cea0062bb1e3c599306daa929d93510" translate="yes" xml:space="preserve">
          <source>Recipe DSL Methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fb1092f32d4fcbf9e061ffd718d4ec689c6c95e" translate="yes" xml:space="preserve">
          <source>Recipes</source>
          <target state="translated">Recipes</target>
        </trans-unit>
        <trans-unit id="4c12523c60950ace8c71a6feb86b8e57d94f74f7" translate="yes" xml:space="preserve">
          <source>Recipes (in cookbooks)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bb6bafc0f80f5d553773f88979c72e787b5778e" translate="yes" xml:space="preserve">
          <source>Recipes that specify the resources to use and the order in which they are to be applied</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="021bcb50b7d68b531e4f20eee8f20a2d4f03efe4" translate="yes" xml:space="preserve">
          <source>Recommended Settings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0db60a392f09cbff69e7e0c446e4c8905f98c65" translate="yes" xml:space="preserve">
          <source>Reconfigure Reporting services on each server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbc968922b66aaa9733b1b6e6759608205c9eb5a" translate="yes" xml:space="preserve">
          <source>Reconfigure a package. This action requires a response file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dc9c87edf9d33ed83c49bb787330ca456d3a998" translate="yes" xml:space="preserve">
          <source>Reconfigure any Chef server on which Reporting services have been installed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0889e605cf24fc143511d7aa6c81612646d3cba" translate="yes" xml:space="preserve">
          <source>Reconfigure each of the front end servers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ace776e8bda717ca2f92b8155b0624e71c7c256f" translate="yes" xml:space="preserve">
          <source>Reconfigure the Chef management console:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db12632f282a5470afc2b32c42282c9a8cad5291" translate="yes" xml:space="preserve">
          <source>Reconfigure the Chef push jobs servers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c49485a2ee48d470166725ff979291426156593" translate="yes" xml:space="preserve">
          <source>Reconfigure the Chef server and the Chef management console (standalone and frontend group members</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="275793e28090872bd4c77983a8caa94e0dd66012" translate="yes" xml:space="preserve">
          <source>Reconfigure the Chef server on the backend primary server (bootstrap):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57b6692968cea9865d36253c684b85834993c03c" translate="yes" xml:space="preserve">
          <source>Reconfigure the Chef server to re-populate Redis:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93a82891960f249e8303de1b38b845822b0f0fa3" translate="yes" xml:space="preserve">
          <source>Reconfigure the Chef server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12b4106d02b9831de07b654373d9808f0d15336b" translate="yes" xml:space="preserve">
          <source>Reconfigure the Reporting server on the backend primary server (bootstrap):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88cb429b68927f71ae13a0e5f90c63f21295b006" translate="yes" xml:space="preserve">
          <source>Reconfigure the primary Chef server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="224c800c7344f240e5ba1087a6eb5e498373c35f" translate="yes" xml:space="preserve">
          <source>Reconfigure the primary backend Chef push jobs server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6a712c1a86787e554dbfaaf510f31e2b6705fe4" translate="yes" xml:space="preserve">
          <source>Reconfigure the remaining Chef push jobs servers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25ae0ced3824d5b2a0f12c728029cc44db2dd8e4" translate="yes" xml:space="preserve">
          <source>Reconfigure the secondary Chef server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="818bdff076d2833eba842954e093beab1f82363e" translate="yes" xml:space="preserve">
          <source>Recovering a password</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edfa66ebb3274b48a6273673fa3a25fc957d2cb2" translate="yes" xml:space="preserve">
          <source>Recreate a data bag item</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b988be02da1587e019b6fd446620fe7dcb79e00" translate="yes" xml:space="preserve">
          <source>Recursive Directories</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e038224d33933d741037284a706e483f95cac5b7" translate="yes" xml:space="preserve">
          <source>Red Hat Enterprise Linux</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24071b57a13027c01339027dcccb98218f052a8f" translate="yes" xml:space="preserve">
          <source>Redis</source>
          <target state="translated">Redis</target>
        </trans-unit>
        <trans-unit id="db1c784524e1b54011a95823026161f7c8517fe0" translate="yes" xml:space="preserve">
          <source>Reference</source>
          <target state="translated">Reference</target>
        </trans-unit>
        <trans-unit id="1cdf3bc4c087d9c4241dd3184d2fc5d72141272b" translate="yes" xml:space="preserve">
          <source>Regenerate Certificates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2273d9762c04eeb14ced99fd48e5521cf3fb7ca5" translate="yes" xml:space="preserve">
          <source>Regenerating a private key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9042466543ad9375ccacfed37953cf9dfea2d17" translate="yes" xml:space="preserve">
          <source>Registering and authenticating the node with the Chef server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef03771ea5436ced77ae97ad6c81891f2e0e6b73" translate="yes" xml:space="preserve">
          <source>Registry Key Path Separators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab140354a34bd045ff52d42f722acc1c4ffada22" translate="yes" xml:space="preserve">
          <source>Regular Expressions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e7cea6a1cb40acbcdba54a7f078ec7a064002a8" translate="yes" xml:space="preserve">
          <source>Relative Paths</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aa12f1c23b86f0ba57e8e2fb3c3abacb078c298" translate="yes" xml:space="preserve">
          <source>Reload Attributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="545d3a74ae3e42bb52601f43a0d4fb85b820a44c" translate="yes" xml:space="preserve">
          <source>Reload the configuration for this service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a901061a83dcdce1c8f2c26110e06ec2a029028" translate="yes" xml:space="preserve">
          <source>Remember to point &lt;code&gt;INPUT device/directory&lt;/code&gt; to &lt;code&gt;/tmp/rte&lt;/code&gt; when not installing from CD.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b231e97740489342e8f06f258fba65943f765b97" translate="yes" xml:space="preserve">
          <source>Remount a device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91d79535b3f38185431efa5650a87cc532546917" translate="yes" xml:space="preserve">
          <source>Remove Admin User from Org</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7ad8fe3c3d20fa9e7bb2df59ae18ec6a4d534a8" translate="yes" xml:space="preserve">
          <source>Remove All Levels</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cc59cfa62ad1594abb6e73a98def0c2681942ce" translate="yes" xml:space="preserve">
          <source>Remove Members</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa9f74eab6d392598c9aa5408f7c40914a48fc03" translate="yes" xml:space="preserve">
          <source>Remove Precedence Level</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="831832744a8ae9c3e8809d92084e6fb7c447dca4" translate="yes" xml:space="preserve">
          <source>Remove Recipe from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac6f96cc3d39b6a6dd9ec0b7ad2badd0a38526ec" translate="yes" xml:space="preserve">
          <source>Remove Role from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f681d979defbfefb8f58fe9c61d7c57e93e4fb80" translate="yes" xml:space="preserve">
          <source>Remove User from Org</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df4723295748d48f73b6ddccb1051500ce594185" translate="yes" xml:space="preserve">
          <source>Remove a group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="803efb1f652b80e7ade86586a25e22f0fdd4982f" translate="yes" xml:space="preserve">
          <source>Remove a package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3ee4b25a367eca1cd3d2c21dc2248d1c825a69d" translate="yes" xml:space="preserve">
          <source>Remove a user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00ddb853ec7b29888690156c8ed841f72d79985a" translate="yes" xml:space="preserve">
          <source>Remove an entry from the file systems table (&lt;code&gt;fstab&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5864a3a1e828d8d7c4d06fe8cd0a4ab36bb8058" translate="yes" xml:space="preserve">
          <source>Remove any existing release of the same code version and re-deploy a new one in its place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64fff59d00ac63b578dac57eeb29dd1718fdfceb" translate="yes" xml:space="preserve">
          <source>Remove the &lt;code&gt;validation_client_name&lt;/code&gt; setting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d60ae5aeb6142efe289cb5154e37df44a5205ea9" translate="yes" xml:space="preserve">
          <source>Remove the corrupt files:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f274014d55b2b9fae4beb6984affec293edfba2" translate="yes" xml:space="preserve">
          <source>Remove the local branch using &lt;code&gt;-d&lt;/code&gt; to ensure that it has been merged by upstream. This option will not delete a branch that is not an ancestor of the current &lt;code&gt;HEAD&lt;/code&gt;. From the git man page:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56889b32ff7be43cbadb8389d13236bee396e374" translate="yes" xml:space="preserve">
          <source>Remove the local branch:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55dddc9798dd75a4328819ed1caf978e8c308228" translate="yes" xml:space="preserve">
          <source>Remove the specified configuration profile.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecfffb95125f4c05dbdb659b194854307e700499" translate="yes" xml:space="preserve">
          <source>Remove users from a group. May only be used when &lt;code&gt;append&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca1cfb92c47480c20b78f16040693278036692c7" translate="yes" xml:space="preserve">
          <source>Removed for a specific, named attribute precedence level</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a25219246c8d97c9c7ba8c230e2f192bc8b7de4d" translate="yes" xml:space="preserve">
          <source>Removed for all attribute precedence levels</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c3775699aa2b738164174ab336faa6f7f95776c" translate="yes" xml:space="preserve">
          <source>Removes a user who is in one or more &amp;lsquo;admin&amp;rsquo; groups unless that user is the only member of the &amp;lsquo;admin&amp;rsquo; group(s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b130f1f049dfda84fd15e93576936da4fefebaf5" translate="yes" xml:space="preserve">
          <source>Removing a member of the &lt;code&gt;admins&lt;/code&gt; group from an organization requires the user to be removed from the &lt;code&gt;admins&lt;/code&gt; group before they can be removed from the organization:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06f42bd68f61d6b0674a4392f5aaa95e9aada47a" translate="yes" xml:space="preserve">
          <source>Removing multiple packages:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd5539865bc68e4a7cc8b150f12938621c25d7cb" translate="yes" xml:space="preserve">
          <source>Removing the &lt;code&gt;'bar'&lt;/code&gt; key returns the computed value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8e8f17f505770378970745c109388c0570c9523" translate="yes" xml:space="preserve">
          <source>Repeat the same steps as described for the primary backend server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cac3321fa22a80eae576225705b63969aef6e53" translate="yes" xml:space="preserve">
          <source>Replace &lt;code&gt;FQDN&lt;/code&gt; with the FQDN of the frontend server. Replace &lt;code&gt;IP_ADDRESS&lt;/code&gt; with the IP address of the frontend server. Set &lt;code&gt;:role&lt;/code&gt; to &lt;code&gt;&quot;frontend&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78f59441fc47b9d52449f9d5933c790d53cc5c08" translate="yes" xml:space="preserve">
          <source>Replace &lt;code&gt;FQDN&lt;/code&gt; with the FQDN of the load balanced virtual IP address, which should be equal to the FQDN for the service URI that is used by the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63902e78a1907fdb6c22d8b1f9f9cb0917ea2dce" translate="yes" xml:space="preserve">
          <source>Replace &lt;code&gt;FQDN&lt;/code&gt; with the FQDN of the server and &lt;code&gt;IP_ADDRESS&lt;/code&gt; with the IP address of the server. The role is a backend server is &lt;code&gt;&quot;backend&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f962b4b82fb666a99565c3f0763a752574f48b92" translate="yes" xml:space="preserve">
          <source>Replace &lt;code&gt;FQDN&lt;/code&gt; with the FQDN of the server and &lt;code&gt;IP_ADDRESS&lt;/code&gt; with the IP address of the server. The role is a backend server is &lt;code&gt;&quot;backend&quot;&lt;/code&gt;. If the backend server is used to bootstrap the Chef server installation, replace &lt;code&gt;CLUSTER_IPADDRESS&lt;/code&gt; with the IP address of the interface that is used for cluster communications. For example, the same IP address that is used by Keepalived and DRBD. If the Chef server is not used to bootstrap the Chef server installation, exclude the &lt;code&gt;:cluster_ipaddress&lt;/code&gt; entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1388d71f3972dc956edc5422cdd6aeb5315fc43d" translate="yes" xml:space="preserve">
          <source>Replace &lt;code&gt;FQDN&lt;/code&gt; with the FQDN of the server, and &lt;code&gt;IPADDRESS&lt;/code&gt; with the IP address of the server. Replace &lt;code&gt;CLUSTER_IPADDRESS&lt;/code&gt; with the IP address of the server&amp;rsquo;s interface assigned for cluster communications. If no such interface is configured, exclude the &lt;code&gt;cluster_ipaddress&lt;/code&gt; entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d48a4be83d39abdb1feaa1d3a8ec81d2649b94a" translate="yes" xml:space="preserve">
          <source>Replace &lt;code&gt;FQDN&lt;/code&gt; with the FQDN of the server. Replace &lt;code&gt;IP_ADDRESS&lt;/code&gt; with the virtual IP address of the server. The &lt;code&gt;:device&lt;/code&gt; parameter should be the ethernet interface to which the floater virtual IP address will bind. This is typically the public interface of the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1e7f91301f621808baca718d419de20ab5658b6" translate="yes" xml:space="preserve">
          <source>Replace &lt;code&gt;FQDN&lt;/code&gt; with the FQDN of the server. Replace &lt;code&gt;IP_ADDRESS&lt;/code&gt; with the virtual IP address of the server. The &lt;code&gt;:device&lt;/code&gt; parameter should be the ethernet interface to which the virtual IP address will bind. This is typically the public interface of the server. In a typical tiered install, the config here could also be just the main FQDN and IP address that are already configured for the backend. Running &lt;code&gt;chef-server-ctl reconfigure&lt;/code&gt; will not bind the &lt;code&gt;backend_vip&lt;/code&gt; address to an interface, this must be done on startup of the machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f91ee47ff28f447885abd069a8c0b19254cdd96" translate="yes" xml:space="preserve">
          <source>Replace &lt;code&gt;VRRP_IP_OF_PEER&lt;/code&gt; with the IP address of the server on the other end of the tunnel, and &lt;code&gt;MY_IP&lt;/code&gt; with the IP address of the server on which the script will be located.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5c6bcae561106f3f25e674723fe20f75ab2bd53" translate="yes" xml:space="preserve">
          <source>Replace the contents of &lt;code&gt;/var/opt/opscode/nginx/ca/FQDN.crt&lt;/code&gt; and &lt;code&gt;/var/opt/opscode/nginx/ca/FQDN.key&lt;/code&gt; with the certifying authority&amp;rsquo;s files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09407457a0001ad8cae1914896cedfc1bc32c9a2" translate="yes" xml:space="preserve">
          <source>Replace the current run-list with the specified items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a58f9046b405a1a2585341249361679b35c968a8" translate="yes" xml:space="preserve">
          <source>Replace the current run-list with the specified items. This option will not clear the list of cookbooks (and related files) that is cached on the node. This option will not persist node data at the end of the client run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9e579d6d1ba09edc7af3d2bf94ca4c747181eb4" translate="yes" xml:space="preserve">
          <source>Reporting</source>
          <target state="translated">Reporting</target>
        </trans-unit>
        <trans-unit id="5425f0f51d334e1ea43b5ceb88a081333d8db8f7" translate="yes" xml:space="preserve">
          <source>Reporting Groups</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5d8625ffe485e14dd5a7421bdd8651e1524e12c" translate="yes" xml:space="preserve">
          <source>Reporting data is collected during the chef-client run and the results are posted to the Chef server at the end of the chef-client run at the same time the node object is uploaded to the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29d25dd0fb638793e96b278e10e4e653f9e018c2" translate="yes" xml:space="preserve">
          <source>Reporting is used to keep track of what happened during the execution of chef-client runs across all of the infrastructure that is being managed by Chef. Reports can be generated for the entire organization and they can be generated for specific nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88bc3fe3daddee139809d036f18b985fbe165957" translate="yes" xml:space="preserve">
          <source>Reports</source>
          <target state="translated">Reports</target>
        </trans-unit>
        <trans-unit id="834b849d83601ba13563ee2f5349c80790931714" translate="yes" xml:space="preserve">
          <source>Request entity too large. A request may not be larger than 1000000 bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4cbd65c8d7e139c56ea04ca154ca3148043a720" translate="yes" xml:space="preserve">
          <source>Require changes to a cookbook be included as a new version. Only the &lt;code&gt;--force&lt;/code&gt; option can override this setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f33462114b501f9aeaa9bddb5364116f85b98602" translate="yes" xml:space="preserve">
          <source>Require changes to a cookbook be included as a new version. Only the &lt;code&gt;--force&lt;/code&gt; option can override this setting. Default: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2e04b2e3a25ffad92b0a33863c67ea45e4412c1" translate="yes" xml:space="preserve">
          <source>Required Accounts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="677bab503612d48db21f7a1d8528d4603593c393" translate="yes" xml:space="preserve">
          <source>Required Directories</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45cb736679e57444bf5cb4a0f4fc77a7eca28f4d" translate="yes" xml:space="preserve">
          <source>Required Headers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbc4ac8d1741d6cd66323a627c3ed5397c166271" translate="yes" xml:space="preserve">
          <source>Required for &lt;code&gt;:umount&lt;/code&gt; and &lt;code&gt;:remount&lt;/code&gt; actions (for the purpose of checking the mount command output for presence). The special block device or remote node, a label, or a uuid to be mounted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8550143b585f2ff58196eae3010d724e710b3d18" translate="yes" xml:space="preserve">
          <source>Required when &lt;code&gt;postgresql['external']&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;. The PostgreSQL user name. This user must be granted either the &lt;code&gt;CREATE ROLE&lt;/code&gt; and &lt;code&gt;CREATE DATABASE&lt;/code&gt; permissions in PostgreSQL or be granted &lt;code&gt;SUPERUSER&lt;/code&gt; permission. This user must also have an entry in the host-based authentication configuration file used by PostgreSQL (traditionally named &lt;code&gt;pg_hba.conf&lt;/code&gt;). Default value: &lt;code&gt;'superuser_userid'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e2d2f50feabb6f48c5c7f8373721a7fe2e5dd6d" translate="yes" xml:space="preserve">
          <source>Required when &lt;code&gt;postgresql['external']&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;. The password for the user specified by &lt;code&gt;postgresql['db_superuser']&lt;/code&gt;. Default value: &lt;code&gt;'the password'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c90c11b5027bcbccc99426f2e9a0ae773b72df2c" translate="yes" xml:space="preserve">
          <source>Required when &lt;code&gt;postgresql['external']&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;. The virtual IP address. The host for this IP address must be online and reachable from the Chef server via the port specified by &lt;code&gt;postgresql['port']&lt;/code&gt;. Default value: &lt;code&gt;127.0.0.1&lt;/code&gt;. Set this value to the IP address or hostname for the machine on which external PostgreSQL is located when &lt;code&gt;postgresql['external']&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="803aab413cbc0264a1bd878b7ca7ac35418d9f4d" translate="yes" xml:space="preserve">
          <source>Required when &lt;code&gt;postgresql['external']&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;. The virtual IP address. The host for this IP address must be online and reachable from the Chef server via the port specified by &lt;code&gt;postgresql['port']&lt;/code&gt;. Set this value to the IP address or hostname for the machine on which external PostgreSQL is located when &lt;code&gt;postgresql['external']&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46d9c9344a74d032fd56093110e6e841e79e8e35" translate="yes" xml:space="preserve">
          <source>Required. Set to &lt;code&gt;true&lt;/code&gt; to run PostgreSQL external to the Chef server. Must be set once only on a new installation of the Chef server before the first &lt;code&gt;chef-server-ctl reconfigure&lt;/code&gt; command is run. If this is set after a reconfigure or set to &lt;code&gt;false&lt;/code&gt;, any reconfigure of the Chef server will return an error. Default value: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93fa8aa942ef6acdda26860bdfbac5ea261088d0" translate="yes" xml:space="preserve">
          <source>Required. The file system type (fstype) of the device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="427574fbd9c651866995d02d26226efd7df8975e" translate="yes" xml:space="preserve">
          <source>Required. The location of the source file. The location of the source file may be HTTP (&lt;code&gt;http://&lt;/code&gt;), FTP (&lt;code&gt;ftp://&lt;/code&gt;), local (&lt;code&gt;file:///&lt;/code&gt;), or UNC (&lt;code&gt;\\host\share\file.tar.gz&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac2c2978b83975d1f86c5d8d4ce4f86241f75ced" translate="yes" xml:space="preserve">
          <source>Required. The name of the cookbook.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a676a872fcbf38da81060b6c00702f32fa9b889" translate="yes" xml:space="preserve">
          <source>Required. The path to a package in the local file system. The AIX platform requires &lt;code&gt;source&lt;/code&gt; to be a local file system path because &lt;code&gt;installp&lt;/code&gt; does not retrieve packages using HTTP or FTP.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09a428f93ec07a73d726f8bd037ecacfaaf8b044" translate="yes" xml:space="preserve">
          <source>Requirements</source>
          <target state="translated">Requirements</target>
        </trans-unit>
        <trans-unit id="3262d3eff79dea946695dbadba6404a6511dc27f" translate="yes" xml:space="preserve">
          <source>Requires a &lt;code&gt;chef-server-ctl reconfigure&lt;/code&gt; prior to running the command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75c90f13427b97cd8f0e01637fe357498fe89289" translate="yes" xml:space="preserve">
          <source>Requires rsync to be installed on the Chef server prior to running the command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="943819f37be495efc3117e627d6bcacfd2fe9e47" translate="yes" xml:space="preserve">
          <source>Rescue Blocks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d434ee93f428dc709a3eaa9e32ba6b60290410ff" translate="yes" xml:space="preserve">
          <source>Reset Key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a65e2e6652145b2fd7e2ea826f2c1f07804302c5" translate="yes" xml:space="preserve">
          <source>Reset User Key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d0c9a704cafed8b549052baedcd441d9e604c2f" translate="yes" xml:space="preserve">
          <source>Resize DRBD</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8ebd2c0171de0766dc5e0d1d260e86ef871532b" translate="yes" xml:space="preserve">
          <source>Resize DRBD on the current primary backend to extend the size of the DRBD device. Run the following command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be00ed7198477a076135dbd9e35ed0ee2033ee39" translate="yes" xml:space="preserve">
          <source>Resize the file system only on the current primary backend. Run the following command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="928287dbfe098f1bd1335c01b3be7016ea08f4ef" translate="yes" xml:space="preserve">
          <source>Resize the logical volumes identically on both backend machines. Due to differences in the space available for logical volumes on the primary and secondary backend machines (which is typically caused by existing snapshots), the size of the logical volume should be specified in absolute terms on both sides of the DRBD link, rathern than in percentages. Be sure to leave about 20% of the total available space free on both sides of the DRBD link, minus any existing snapshots. Run the following command and replace &lt;code&gt;SIZE&lt;/code&gt; with a value similar to &lt;code&gt;10GiB&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fc8ee8ede2cf4de590f0ebef42fbf1b9c8b40a1" translate="yes" xml:space="preserve">
          <source>Resize the volume group on both backend systems. Run the following commands and replace &lt;code&gt;sdb1&lt;/code&gt; for the correct device name:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="021493f340d35ce0d744f7a3a9e53445394e86a6" translate="yes" xml:space="preserve">
          <source>Resource</source>
          <target state="translated">Resource</target>
        </trans-unit>
        <trans-unit id="ab16b26734278261f1a9d86952a1f37dec44fc92" translate="yes" xml:space="preserve">
          <source>Resource ownership</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87df60de337fb58864343e396696d74611e0d403" translate="yes" xml:space="preserve">
          <source>Resources</source>
          <target state="translated">Resources</target>
        </trans-unit>
        <trans-unit id="25023c339d9a0e3245868e7dfe5f3cc49157990b" translate="yes" xml:space="preserve">
          <source>Resources Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bfd1fa971084abb368db695800cfd0deff76624" translate="yes" xml:space="preserve">
          <source>Resources and providers are resolved dynamically and can handle multiple &lt;code&gt;provides&lt;/code&gt; lines for a specific platform. When multiple &lt;code&gt;provides&lt;/code&gt; lines exist, such as &lt;code&gt;Homebrew&lt;/code&gt; and &lt;code&gt;MacPorts&lt;/code&gt; packages for the Mac OS X platform, then one is selected based on resource priority mapping performed by the chef-client during the chef-client run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac506e30b44493ba905febdbc15a9ac095afd610" translate="yes" xml:space="preserve">
          <source>Resources that are executed during the compile phase cannot notify other resources. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a2299d526c44adbca562d7a01b868af4efc8105" translate="yes" xml:space="preserve">
          <source>Resources that were updated as a result of a chef-client run</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0797036a78e1f0a181d29f747fecaa3a03bc1af" translate="yes" xml:space="preserve">
          <source>Respond to all confirmation prompts with &amp;ldquo;Yes&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="224b1ca867b8a99580f5169aad042a87c704e12e" translate="yes" xml:space="preserve">
          <source>Response Code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f321cf5f3fa5f136ff76e1f88ed6f18cdd4dffc6" translate="yes" xml:space="preserve">
          <source>Restart a service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c8f57aa2154a50070459a1d01431c6a8162cbf0" translate="yes" xml:space="preserve">
          <source>Restart all servers on which Chef push jobs will run:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae29dd376b2a41d8b3e9d5c8a837dcfdd7928228" translate="yes" xml:space="preserve">
          <source>Restart the Chef push jobs components:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdf35d8ee70825acea16a50817ce8868a3a7de76" translate="yes" xml:space="preserve">
          <source>Restart the Nginx service to load the new key and certificate:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ec2292af19454a5fa0c7a8b7c2b7847987c71a9" translate="yes" xml:space="preserve">
          <source>Restarts MySQL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cbe6d6b9a8d1596bb5bca12e14d81c9e108a1a3" translate="yes" xml:space="preserve">
          <source>Restore</source>
          <target state="translated">Restore</target>
        </trans-unit>
        <trans-unit id="90abb2baa65867462d80e2fa7a332d83c733c563" translate="yes" xml:space="preserve">
          <source>Restore the PostgreSQL database:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5fa89face45ee64a0ede4adbc100d983aa8373a" translate="yes" xml:space="preserve">
          <source>Restore the previously backed-up files to the following locations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc7040d7ea37cd0f1713299cb8176ef757aa3269" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;0&lt;/code&gt; if the last line of a command is evaluated to be true or to return &lt;code&gt;1&lt;/code&gt; if the last line is evaluated to be false. Default value: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dba8407d4840a3c98d630919bf76e35e85277f9c" translate="yes" xml:space="preserve">
          <source>Return all available versions for every cookbook.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="097da67a75cd0f02bf71a36242d7818723ba5b0d" translate="yes" xml:space="preserve">
          <source>Return only the contents of the local directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0246455b4db8a993c9ad8846c0d3c15453a166fb" translate="yes" xml:space="preserve">
          <source>Return only the contents of the local directory. Default: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7749fcf802c472b6c2f5bd0556805e456ffd5674" translate="yes" xml:space="preserve">
          <source>Returns:</source>
          <target state="translated">Returns:</target>
        </trans-unit>
        <trans-unit id="8ad9be81925eb77b2bd3282655a543c7e7dc8879" translate="yes" xml:space="preserve">
          <source>Review prerequisites</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97bec9b3fcb11ec218fbf1984f8fb067cd969399" translate="yes" xml:space="preserve">
          <source>Review the full list of &lt;a href=&quot;config_rb_knife_optional_settings&quot;&gt;optional settings&lt;/a&gt; that can be added to the knife.rb file. Many of these optional settings should not be added to the knife.rb file. The reasons for not adding them can vary. For example, using &lt;code&gt;--yes&lt;/code&gt; as a default in the knife.rb file will cause knife to always assume that &amp;ldquo;Y&amp;rdquo; is the response to any prompt, which may lead to undesirable outcomes. Other settings, such as &lt;code&gt;--hide-healthy&lt;/code&gt; (used only with the &lt;code&gt;knife status&lt;/code&gt; subcommand) or &lt;code&gt;--bare-directories&lt;/code&gt; (used only with the &lt;code&gt;knife list&lt;/code&gt; subcommand) probably aren&amp;rsquo;t used often enough (and in the same exact way) to justify adding them to the knife.rb file. In general, if the optional settings are not listed on &lt;a href=&quot;config_rb_knife&quot;&gt;the main knife.rb topic&lt;/a&gt;, then add settings only after careful consideration. Do not use optional settings in a production environment until after the setting&amp;rsquo;s performance has been validated in a safe testing environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9de5d5aadcdb6c68b196da6e8c699ae95a7c43dc" translate="yes" xml:space="preserve">
          <source>Review the full list of &lt;a href=&quot;config_rb_server_optional_settings&quot;&gt;optional settings&lt;/a&gt; that can be added to the chef-server.rb file. Many of these optional settings should not be added without first consulting with Chef support.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9bdd4886489bb99c914dc951d6c0f9f69134189" translate="yes" xml:space="preserve">
          <source>Review the list of &lt;a href=&quot;knife_common_options&quot;&gt;common options&lt;/a&gt; available to this (and all) knife subcommands and plugins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c95034ad080330a3e20e58db5873ec189acb409b" translate="yes" xml:space="preserve">
          <source>Review the prerequisites</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26bcf5d6b81c42a1bca458448f08b92f445b7135" translate="yes" xml:space="preserve">
          <source>Rewind, and then resume the chef-client run to get the expected results:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a82310ae4a4a1ff8cf7bb25797ac2e05c9ad4f1" translate="yes" xml:space="preserve">
          <source>Right:</source>
          <target state="translated">Right:</target>
        </trans-unit>
        <trans-unit id="c3f104d1365744b538bfde9f4adb6a6df4b80355" translate="yes" xml:space="preserve">
          <source>Role</source>
          <target state="translated">Role</target>
        </trans-unit>
        <trans-unit id="9b1bb863e0d26e32e6d315f0c98fba2d6bf25e2a" translate="yes" xml:space="preserve">
          <source>Role Location</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f2b30805dc5a161defea7e653ea18a8c8d49afa" translate="yes" xml:space="preserve">
          <source>Role data looks like the following in JSON:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e76557ce03993a5f963d92fea88c8862e665d137" translate="yes" xml:space="preserve">
          <source>Role default and force default are left in default, plus other precedence levels:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4857cd2f382404a216ee46eb884d27902eef77ce" translate="yes" xml:space="preserve">
          <source>Role-based access control is configured per-organization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47dcc27d6e87ece8baebe7e3877a261a5467093d" translate="yes" xml:space="preserve">
          <source>Roles</source>
          <target state="translated">Roles</target>
        </trans-unit>
        <trans-unit id="5371b1f1f287cade28c3860bb35f6dd64748fef4" translate="yes" xml:space="preserve">
          <source>Roles can be managed from the Chef management console web user interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9091f8a7c7e14d8749d04d1d3eb54e89e7e1176" translate="yes" xml:space="preserve">
          <source>Roles define server types, such as &amp;ldquo;web server&amp;rdquo; or &amp;ldquo;database server&amp;rdquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ca09c243629a6fe943e1ba8cbfd529bb3dd9731" translate="yes" xml:space="preserve">
          <source>Roles in Run-lists</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34ebf4965d87c6126e0c967bdc3a3c499b42dc14" translate="yes" xml:space="preserve">
          <source>Roles stored as JSON data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fc5836ab52b958a724c1e58e9f06279f31a661c" translate="yes" xml:space="preserve">
          <source>Roll a resource back to a previously-deployed release if an error occurs when deploying a new release. Default value: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e00effe3686caa1f2ffe6493529e8090aaf26ce" translate="yes" xml:space="preserve">
          <source>Roll an application back to the previous release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b217e98c3bf70f3cf4633a5447d6587eea974ba1" translate="yes" xml:space="preserve">
          <source>Ruby</source>
          <target state="translated">Ruby</target>
        </trans-unit>
        <trans-unit id="370752a2da8576f27614019b2961dcbf1f132990" translate="yes" xml:space="preserve">
          <source>Ruby Basics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afcf80f23313c9983990f2c86599f9e6a2f6d21e" translate="yes" xml:space="preserve">
          <source>Ruby Class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="140547f8affba3022c3592523c431eb625d019e1" translate="yes" xml:space="preserve">
          <source>Ruby Scripts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07e5de7c52aa04a288d2d54a8bff124adf109f52" translate="yes" xml:space="preserve">
          <source>Ruby in Strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbeaf3603028f9c68cfe1891f6e4a5aa2ac0e2d9" translate="yes" xml:space="preserve">
          <source>Ruby is a simple programming language:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1691bd030f8ce522d837b7fb1b7bf338975e037" translate="yes" xml:space="preserve">
          <source>Ruby is also a powerful and complete programming language:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88cfd368c73735de405fe1063804bd581381127b" translate="yes" xml:space="preserve">
          <source>Ruby is the programming language that is the authoring syntax for cookbooks. Most recipes are simple patterns (blocks that define properties and values that map to specific configuration items like packages, files, services, templates, and users). The full power of Ruby is available for when you need a programming language.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f4b1a2c92043d42e78bcf6a32b64246a913c9df" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;chef-server-ctl reconfigure&lt;/code&gt; for the changes to be picked up by your Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1085d53458cc93c9ab176577c9d2c25f156b9c46" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;which ruby&lt;/code&gt; again. It should return &lt;code&gt;/opt/chefdk/embedded/bin/ruby&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="092cbc179360f9c03d955e4991580f118ec05c99" translate="yes" xml:space="preserve">
          <source>Run a batch file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="340df4fe19581012bf5e1dd8f6647a67bf34883d" translate="yes" xml:space="preserve">
          <source>Run a migration command. Default value: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c2a5024e845c82205526c324158821ea595bb20" translate="yes" xml:space="preserve">
          <source>Run a recipe named &lt;code&gt;machinations.rb&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa8577cf8ee89857bea470178f26370d70f9bdef" translate="yes" xml:space="preserve">
          <source>Run as Non-root User</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b60b7f3f2eccccdf9352661bc9c0c053bb10bb3" translate="yes" xml:space="preserve">
          <source>Run as a Scheduled Task</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b4ac31171b568683b7bdc740da1be5544840ad4" translate="yes" xml:space="preserve">
          <source>Run as a Service</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ae736b97ca3cc38dd9eac20e44170889f757d89" translate="yes" xml:space="preserve">
          <source>Run as a chef-client</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce53623e4050afc7ab0291b9517caa789f57a5c7" translate="yes" xml:space="preserve">
          <source>Run chef-shell in chef-client mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2bfdb4308a601d1953bfc4b32ef9bcf01660b74" translate="yes" xml:space="preserve">
          <source>Run chef-shell in chef-solo mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="118a30016c377ba69c1c3f3929cd1e4d4e7a7b20" translate="yes" xml:space="preserve">
          <source>Run chef-shell in standalone mode.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
