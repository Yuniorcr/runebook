<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="en" datatype="htmlbody" original="dom">
    <body>
      <group id="dom">
        <trans-unit id="4f549939198bb4708f1436bfbc8520dca33d6897" translate="yes" xml:space="preserve">
          <source>The type of track event which is described by the object: &lt;code&gt;&quot;addtrack&quot;&lt;/code&gt; or &lt;code&gt;&quot;removetrack&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb8c126bad66905cd504aad949a72c4f7bf43a78" translate="yes" xml:space="preserve">
          <source>The type specifies how to use the image in order to create the pattern, and must be one of the following string values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47269aa1e2b7a612c6c1808e7d5253029f0a8863" translate="yes" xml:space="preserve">
          <source>The type used to return the value of &lt;a href=&quot;performance/navigation&quot;&gt;&lt;code&gt;navigation&lt;/code&gt;&lt;/a&gt;, which contains information explaining the context of the load operation described by this &lt;code&gt;Performance&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58147d3dc641f5c63a575232de4c050e390152cb" translate="yes" xml:space="preserve">
          <source>The underlying data format is defined by the IEEE draft specification &lt;code&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/draft-ietf-mmusic-sctp-sdp&quot;&gt;draft-ietf-mmusic-sctp-sdp&lt;/a&gt;&lt;/code&gt;. The current format specifies its protocol as either &lt;code&gt;&quot;UDP/DTLS/SCTP&quot;&lt;/code&gt; (UDP carrying DTLS carrying SCTP) or &lt;code&gt;&quot;TCP/DTLS/SCTP&quot;&lt;/code&gt; (TCP carrying DTLS carrying SCTP). Older browsers may only specify &lt;code&gt;&quot;DTLS/SCTP&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="436af11d722d501ef39ef0bedcd89e9eb4fda39c" translate="yes" xml:space="preserve">
          <source>The underlying data transport has been established and data can be transferred bidirectionally across it. This is the default state of a new &lt;a href=&quot;../rtcdatachannel&quot;&gt;&lt;code&gt;RTCDataChannel&lt;/code&gt;&lt;/a&gt; created by the WebRTC layer when the remote peer created the channel and delivered to the site or app in a &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/datachannel&quot;&gt;datachannel&lt;/a&gt;&lt;/code&gt; event of type &lt;a href=&quot;../rtcdatachannelevent&quot;&gt;&lt;code&gt;RTCDataChannelEvent&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb29fadd6b7d70900b0772ce16939c6a3ae5a53b" translate="yes" xml:space="preserve">
          <source>The underlying data transport has closed, or the attempt to make the connection failed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b0c80eb56e0f05f6f372a392e6aade0e8202e92" translate="yes" xml:space="preserve">
          <source>The underlying data transport is closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f6be821ba011b456a2fbe8b98ea2718df1b2454" translate="yes" xml:space="preserve">
          <source>The underlying data transport used by the &lt;a href=&quot;../rtcdatachannel&quot;&gt;&lt;code&gt;RTCDataChannel&lt;/code&gt;&lt;/a&gt; can be created in one of two ways:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1230611b26f60b6e1b961a1858941c7939219063" translate="yes" xml:space="preserve">
          <source>The underlying object store uses in-line keys and the property in the value at the object store's key path does not match the key in this cursor's position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c0f71b38608007dd5d4e20b654e130b126e0271" translate="yes" xml:space="preserve">
          <source>The underlying pixel data of an area of a &lt;a href=&quot;../canvas_api&quot;&gt;&lt;code&gt;canvas&lt;/code&gt;&lt;/a&gt; element. Manipulating such data can be a complex task better suited to be delegated to a Web Worker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ffb6b0bffc02b2f4be8f300f68ff4d73d096919" translate="yes" xml:space="preserve">
          <source>The underlying sink will finish processing any previously-written chunks, before invoking the close behavior. During this time any further attempts to write will fail (without erroring the stream).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fd9c13420a54bb35482c0d9424c83f6c47f9263" translate="yes" xml:space="preserve">
          <source>The uniform &lt;code&gt;uRotationVector&lt;/code&gt; is set to the contents of the variable &lt;code&gt;currentRotation&lt;/code&gt;. This, too, is a 2-component vertex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a2a5fe10456b71dde48da09e16b8815575dd6d4" translate="yes" xml:space="preserve">
          <source>The uniform itself is declared in the shader program using GLSL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be0debcc2eb83dcf86445224bc5121c9c62e118c" translate="yes" xml:space="preserve">
          <source>The uniform name indexed with an integer. E.g. the location returned for &lt;code&gt;arrayUniform[2]&lt;/code&gt; would point directly to the third entry of the &lt;code&gt;arrayUniform&lt;/code&gt; uniform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fad389054e270c670b23bcf8112c4b074df79202" translate="yes" xml:space="preserve">
          <source>The uniform name without the &lt;code&gt;[0]&lt;/code&gt; suffix. E.g. the location returned for &lt;code&gt;arrayUniform&lt;/code&gt; is equivalent to the one for &lt;code&gt;arrayUniform[0]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc9cb9b597c76a78f6e830da4f2b2d159b4d6876" translate="yes" xml:space="preserve">
          <source>The uniform named &lt;code&gt;uScalingFactor&lt;/code&gt; is set to the &lt;code&gt;currentScale&lt;/code&gt; value previously computed; this, as you may recall, is the value used to adjust the coordinate system based on the aspect ratio of the context. This is done using &lt;a href=&quot;../webglrenderingcontext/uniform&quot;&gt;&lt;code&gt;uniform2fv()&lt;/code&gt;&lt;/a&gt; (since this is a 2-value floating-point vector).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0da378abb240c0ed53765d644dae2da44572b7b" translate="yes" xml:space="preserve">
          <source>The unique status of the index is logged to the console: it should be returned as &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30fc58ab5f4576412d18250abfbf109740ba068d" translate="yes" xml:space="preserve">
          <source>The unit is milliseconds and should be accurate to 5 &amp;micro;s (microseconds). However, if the browser is unable to provide a time value accurate to 5 microseconds (due, for example, to hardware or software constraints), the browser can represent the value as a time in milliseconds accurate to a millisecond. Also note the section below on reduced time precision controlled by browser preferences to avoid timing attacks and fingerprinting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="215c8ee959ac03fda0fdd6a65cb73af23a74c00f" translate="yes" xml:space="preserve">
          <source>The unit of &lt;code&gt;DOMHighResTimeStamp&lt;/code&gt; is milliseconds and should be accurate to 5 &amp;micro;s (microseconds). However, If the browser is unable to provide a time value accurate to 5 &amp;micro;s (because, for example, due to hardware or software constraints), the browser can represent a the value as a time in milliseconds accurate to a millisecond.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f7e573f8b73c4ec54c432ce782ae558d69060d2" translate="yes" xml:space="preserve">
          <source>The unit of &lt;code&gt;DOMHighResTimeStamp&lt;/code&gt; is milliseconds and should be accurate to 5 &amp;micro;s (microseconds). However, If the browser is unable to provide a time value accurate to 5 microseconds (because, for example, due to hardware or software constraints), the browser can represent a the value as a time in milliseconds accurate to a millisecond.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b754a0f6a758c28e957b4b082d6bd8a74b34ff7a" translate="yes" xml:space="preserve">
          <source>The unit type is not one of predefined unit types. It is invalid to attempt to define a new value of this type or to attempt to switch an existing value to this type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f95465839b712548941e0ee7da2a6a2f7f1097e" translate="yes" xml:space="preserve">
          <source>The universally unique identifier of the client as a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b7505ad8d398b0ff3f1c46147047ace9715479e" translate="yes" xml:space="preserve">
          <source>The updatePosition() function updates the position of the ball on the canvas (&lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;), and also includes &lt;code&gt;if()&lt;/code&gt; statements to check whether the ball has gone off the edges of the canvas. If so, it makes the ball wrap around to the opposite edge. It also includes a check whether a &lt;code&gt;&lt;a href=&quot;window/requestanimationframe&quot;&gt;requestAnimationFrame()&lt;/a&gt;&lt;/code&gt; call has previously been made, and if so, calls it again as required, and calls the &lt;code&gt;canvasDraw()&lt;/code&gt; function that updates the canvas scene. A tracker is also set up to write out the X and Y values to the screen, for reference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e76f0892b70ac39058988276e95d5aa7b386664e" translate="yes" xml:space="preserve">
          <source>The upload completed successfully.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7dc835df88734482ec7863d51beb4aecc24d339" translate="yes" xml:space="preserve">
          <source>The upload completed; this event does not differentiate between success or failure, and is sent at the very end of the upload process, regardless of the outcome. Prior to this event being sent, one of &lt;code&gt;load&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;, &lt;code&gt;abort&lt;/code&gt;, or &lt;code&gt;timeout&lt;/code&gt; will already have been delivered to indicate why the upload is ending.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51035c784b6cc4a32e65791252bcc8423affeb0c" translate="yes" xml:space="preserve">
          <source>The upload failed due to an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e70c8f5e5fbd5547aa106e8ae1b120ff16d7ce4" translate="yes" xml:space="preserve">
          <source>The upload has begun.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60c27f0e379b4673e2effcf8c64439462f4244c5" translate="yes" xml:space="preserve">
          <source>The upload operation was aborted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50fc23afe648a30d805bfd7d6d04c1903ec81707" translate="yes" xml:space="preserve">
          <source>The upload timed out because an awaited reply did not arrive within the time interval specified by the &lt;a href=&quot;timeout&quot;&gt;&lt;code&gt;timeout&lt;/code&gt;&lt;/a&gt; property on the &lt;a href=&quot;../xmlhttprequest&quot;&gt;&lt;code&gt;XMLHttpRequest&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccca622837e8386da2b8e4081c2f2160f3e622fc" translate="yes" xml:space="preserve">
          <source>The upper bound of the key range (can be any type.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c99dd6744f8cf2c874187cf16cfe0e534d46f2f" translate="yes" xml:space="preserve">
          <source>The upper limit of the frequencies getting a boost or an attenuation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d718bc1b42f838cbd3455ab797f0921c9346e8a" translate="yes" xml:space="preserve">
          <source>The upper value of the key range is one of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c943374dc00a23bbac8ccd3c470e83d86cfa1d6" translate="yes" xml:space="preserve">
          <source>The upper-bound value is included in the key range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="094f15d6d531cb8cac4abfa55040fbf0efbbe837" translate="yes" xml:space="preserve">
          <source>The upper-bound value is not included in the key range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3845e459925b4588d74e3d45735d94b526e014ba" translate="yes" xml:space="preserve">
          <source>The user agent (browser) is in the process of creating the underlying data transport; that is, whatever network level connection is used to link the two peers together is in the process of being set up. This is the state of a new &lt;a href=&quot;../rtcdatachannel&quot;&gt;&lt;code&gt;RTCDataChannel&lt;/code&gt;&lt;/a&gt; after being created by &lt;a href=&quot;../rtcpeerconnection/createdatachannel&quot;&gt;&lt;code&gt;RTCPeerConnection.createDataChannel()&lt;/code&gt;&lt;/a&gt; (on the peer which started the connection process).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb19bd240edb11eefa319f6cf8eab2e3328ff2db" translate="yes" xml:space="preserve">
          <source>The user agent (browser) or operating system doesn't allow playback of media in the current context or situation. This may happen, for example, if the browser requires the user to explicitly start media playback by clicking a &quot;play&quot; button.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9654db2c5efd5887c392a4f431b809902b1fc48e" translate="yes" xml:space="preserve">
          <source>The user agent blocked registration of the protocol handler. This might happen if an invalid scheme is specified, such as &quot;http&quot;, which cannot be registered for obvious security reasons, or if the browser requires that this function be called from a secure context, or that the handler's URL be an HTTPS one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45b9b9aff87ac8ab09e2265b47877e568e675b9a" translate="yes" xml:space="preserve">
          <source>The user agent can't handle any more &lt;code&gt;SourceBuffer&lt;/code&gt; objects, or creating a new &lt;code&gt;SourceBuffer&lt;/code&gt; using the given &lt;code&gt;mimeType&lt;/code&gt; would result in an &lt;a href=&quot;https://w3c.github.io/media-source/#sourcebuffer-configuration&quot;&gt;unsupported configuration of &lt;code&gt;SourceBuffer&lt;/code&gt;s&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cfb98d39388d75f86285340a4db09cd5e431c15" translate="yes" xml:space="preserve">
          <source>The user agent determines, using whatever mechanism it chooses, the maximum amount of storage a given site can use. This maximum is the origin's &lt;strong&gt;quota&lt;/strong&gt;. The amount of this space which is in use by the site is called its &lt;strong&gt;usage&lt;/strong&gt;. Both of these values are estimates; there are several reasons why they're not precise:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ddddd5d109047256c97c20e5c7ab1ade0ac5355" translate="yes" xml:space="preserve">
          <source>The user agent disallowed any speech input from occurring for reasons of security, privacy or user preference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bff5d7a01e8809536a7ef0885cec7b550cf8572" translate="yes" xml:space="preserve">
          <source>The user agent disallowed the requested speech recognition service, either because the user agent doesn't support it or because of reasons of security, privacy or user preference. In this case it would allow another more suitable speech recognition service to be used instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="086e0ba470b908adeb66c079251480eb161dc479" translate="yes" xml:space="preserve">
          <source>The user agent may implement the process of actually sending data in any way it chooses; this may be done periodically during the event loop or truly asynchronously. As messages are actually sent, this value is reduced accordingly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f7c41f5a330ccf018d1b513ea3429ccb6b26d54" translate="yes" xml:space="preserve">
          <source>The user agent should balance audio output latency and power consumption when selecting a latency value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96113ea512de1f194caeafea202a6e832d2d6675" translate="yes" xml:space="preserve">
          <source>The user agent should select a latency that will maximize playback time by minimizing power consumption at the expense of latency. Useful for non-interactive playback, such as playing music.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f4def92564c4c2a622dd4f85e4e6ae2a35be416" translate="yes" xml:space="preserve">
          <source>The user agent string is built on a formal structure which can be decomposed into several pieces of info. Each of these pieces of info comes from other navigator properties which are also settable by the user. Gecko-based browsers comply with the following general structure:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82c06318dce00254294877cd6d8e0661b7ca2f58" translate="yes" xml:space="preserve">
          <source>The user agent will retain the data as long as possible, clearing all &lt;code&gt;&quot;best-effort&quot;&lt;/code&gt; boxes before considering clearing a box marked &lt;code&gt;&quot;persistent&quot;&lt;/code&gt;. If it becomes necessary to consider clearing persistent boxes, the user agent will notify the user and provide a way to clear one or more persistent boxes as needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac9dffabf3c027d13b34a0f3d7deccea90bee28e" translate="yes" xml:space="preserve">
          <source>The user agent will try to retain the data contained in the box for as long as it can, &lt;em&gt;but will not warn users&lt;/em&gt; if storage space runs low and it becomes necessary to clear the box in order to relieve the storage pressure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92f26324425a550b26606ec4ac3b1afc3f081cab" translate="yes" xml:space="preserve">
          <source>The user always has the ability to exit fullscreen mode of their own accord; see &lt;a href=&quot;#Things_your_users_want_to_know&quot;&gt;Things your users want to know&lt;/a&gt;. You can also do so programmatically by calling the &lt;a href=&quot;../document/exitfullscreen&quot;&gt;&lt;code&gt;Document.exitFullscreen()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e21ba80979d76daaa6afd06f7c3f4ec7f264461" translate="yes" xml:space="preserve">
          <source>The user has explicitly declined permission to show notifications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6278c58ad1eaf1cac3e38b049ab3e25cf91495a9" translate="yes" xml:space="preserve">
          <source>The user has granted permission to display notifications, after having been asked previously.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c56b8a768e5139dacc06b97fb688b044f30e2615" translate="yes" xml:space="preserve">
          <source>The user has placed more touch points on the screen than can be supported, in which case the earliest &lt;a href=&quot;touch&quot;&gt;&lt;code&gt;Touch&lt;/code&gt;&lt;/a&gt; in the &lt;a href=&quot;touchlist&quot;&gt;&lt;code&gt;TouchList&lt;/code&gt;&lt;/a&gt; gets canceled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b72e21073c231ba7f0f9c79e8cc5be522e924ff" translate="yes" xml:space="preserve">
          <source>The user has specified that the current browsing instance is not permitted access to the device; or the user has denied access for the current session; or the user has denied all access to user media devices globally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b741358a44a8c59ac6eafad98f0b6523f01fd59b" translate="yes" xml:space="preserve">
          <source>The user hasn't been asked for permission yet, so notifications won't be displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a1c353375628b276e804be072acc7fbb000bca8" translate="yes" xml:space="preserve">
          <source>The user requests a wipe out. Many browsers have settings that let users wipe all data stored for a given website, including cookies, bookmarks, stored passwords, and IndexedDB data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c69072e650e461d94165595cb4388286f6739e73" translate="yes" xml:space="preserve">
          <source>The user will be notified that your code has asked to register the protocol handler, so that they can decide whether or not to permit it. See the screenshot below for an example on google.co.uk.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8d6672219efb568c98e05732b7531fa6d127ca8" translate="yes" xml:space="preserve">
          <source>The user's location is described using a &lt;a href=&quot;position&quot;&gt;&lt;code&gt;Position&lt;/code&gt;&lt;/a&gt; object referencing a &lt;a href=&quot;coordinates&quot;&gt;&lt;code&gt;Coordinates&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cc240c935222515c590d3621c2b9d58d5a0aa54" translate="yes" xml:space="preserve">
          <source>The username fragment and password uniquely identify the remote peer for the duration of the ICE session, and are used to both ensure security and to avoid crosstalk across multiple ongoing ICE sessions. See &lt;a href=&quot;rtcicecandidate/usernamefragment&quot;&gt;&lt;code&gt;RTCIceCandidate.usernameFragment&lt;/code&gt;&lt;/a&gt; for further information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90f79ab80bed86c1b53443dd22ca22a02faba9fa" translate="yes" xml:space="preserve">
          <source>The username of the person to receive the description (if the caller is sending the message, this specifies the callee, and vice-versa).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="919f7229c276b6cfa86ab06641a906338c6ef005" translate="yes" xml:space="preserve">
          <source>The username of the person with whom negotiation is underway; the server will direct the message to this user only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="043dfcff71d3896591088134a7a74a921c8afc81" translate="yes" xml:space="preserve">
          <source>The username the ICE candidate needs to be delivered to. This lets the signaling server route the message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ea7bf2277be0d64c7c8bfd95f416503e3ff0498" translate="yes" xml:space="preserve">
          <source>The valid strings you can enter should, according to the specification, be CSS &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/color_value&quot;&gt;&lt;code&gt;&amp;lt;color&amp;gt;&lt;/code&gt;&lt;/a&gt; values. Each of the following examples describe the same color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c00ec5ca12b0aa766b2b6bb32bf398cd7c71c305" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;custom&lt;/code&gt; was specified. To set a custom waveform, just call &lt;a href=&quot;setperiodicwave&quot;&gt;&lt;code&gt;setPeriodicWave()&lt;/code&gt;&lt;/a&gt;. Doing so automatically sets the type for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d05d120e00af71688e93ed53712ca716b90582e3" translate="yes" xml:space="preserve">
          <source>The value as a &lt;a href=&quot;domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; value, in the units expressed by &lt;code&gt;unitType&lt;/code&gt;. Setting this attribute will cause &lt;code&gt;value&lt;/code&gt;, &lt;code&gt;valueInSpecifiedUnits&lt;/code&gt; and &lt;code&gt;unitType&lt;/code&gt; to be updated automatically to reflect this setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5cb4242a02a3445cae6f6bfafe4e61ef7026e2d" translate="yes" xml:space="preserve">
          <source>The value as a floating point value, in the units expressed by &lt;code&gt;unitType&lt;/code&gt;. Setting this attribute will cause &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;valueAsString&lt;/code&gt; to be updated automatically to reflect this setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21a1f8ba0abb429add350e21153a3453844adb43" translate="yes" xml:space="preserve">
          <source>The value as a floating point value, in user units. Setting this attribute will cause &lt;code&gt;valueInSpecifiedUnits&lt;/code&gt; and &lt;code&gt;valueAsString&lt;/code&gt; to be updated automatically to reflect this setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4ef8b2a20382afd7aa67f0e7aa4d1d89f9e2ece" translate="yes" xml:space="preserve">
          <source>The value as a string value, in the units expressed by &lt;code&gt;unitType&lt;/code&gt;. Setting this attribute will cause &lt;code&gt;value&lt;/code&gt;, &lt;code&gt;valueInSpecifiedUnits&lt;/code&gt; and &lt;code&gt;unitType&lt;/code&gt; to be updated automatically to reflect this setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f59ea001cf8b186ec53d043a88f442d2b9d24820" translate="yes" xml:space="preserve">
          <source>The value associated with the given key, or &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b2ba0a57ab322b54c2d02284e264ec03cef1044" translate="yes" xml:space="preserve">
          <source>The value can also be specified as a double-precision floating-point value, specifying the preferred maximum latency in seconds. This provides more precise control over the balance between audio latency and device energy usage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22149dd332e0f149ac3e0f417657c7efbbf9a0ed" translate="yes" xml:space="preserve">
          <source>The value for the &lt;code&gt;mode&lt;/code&gt; parameter is invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfd6d29468147d7a47f1b42a25842835598ed930" translate="yes" xml:space="preserve">
          <source>The value for the direction parameter is invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0fb0cbb94fba530584eaaf7520272f1244ad810" translate="yes" xml:space="preserve">
          <source>The value for the record at the cursor's position. Setting this attribute can raise an IDBDatabaseException with the following codes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06a62f7ab5525e1bc32929fcb5594d140ef093fc" translate="yes" xml:space="preserve">
          <source>The value for the specified property name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a92a4ffaff22a399fc94a2033fa2b7778df1ada" translate="yes" xml:space="preserve">
          <source>The value in &lt;code&gt;longitude&lt;/code&gt; is the geographical longitude of the location on Earth described by the &lt;code&gt;Coordinates&lt;/code&gt; object, in decimal degrees. The value is defined by the World Geodetic System 1984 specification (WGS 84).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ebcdec80c0a23408cf952e6ad2c185b722ef1b9" translate="yes" xml:space="preserve">
          <source>The value is &lt;code&gt;null&lt;/code&gt; if the request is not yet complete or was unsuccessful, with the exception that when reading text data using a &lt;code&gt;responseType&lt;/code&gt; of &lt;code&gt;&quot;text&quot;&lt;/code&gt; or the empty string (&lt;code&gt;&quot;&quot;&lt;/code&gt;), the response can contain the response so far while the request is still in the &lt;code&gt;LOADING&lt;/code&gt;&lt;a href=&quot;readystate&quot;&gt;&lt;code&gt;readyState&lt;/code&gt;&lt;/a&gt; (3).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9db707f77defd4071b53b0c625b58f54b26b4175" translate="yes" xml:space="preserve">
          <source>The value is a &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing an SDP message like this one:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6086b59370d09d510f705647e5eb3973b458f5b4" translate="yes" xml:space="preserve">
          <source>The value is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Float32Array&quot;&gt;&lt;code&gt;Float32Array&lt;/code&gt;&lt;/a&gt;, made up of the following values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62a3a2afaa6682e69602a2b8c67a00b9749669ff" translate="yes" xml:space="preserve">
          <source>The value is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Lists_and_Counters/Using_CSS_counters&quot;&gt;counter or counters&lt;/a&gt; function. The value can be obtained by using the &lt;code&gt;getCounterValue()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55569dd5e9ded79d4352d6f08a539dba544b98d8" translate="yes" xml:space="preserve">
          <source>The value is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/frequency&quot;&gt;&lt;code&gt;&amp;lt;frequency&amp;gt;&lt;/code&gt;&lt;/a&gt; in Hertz. The value can be obtained by using the getFloatValue method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4931d880569e8d92c8a6f048b148e91e30e3b36b" translate="yes" xml:space="preserve">
          <source>The value is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/frequency&quot;&gt;&lt;code&gt;&amp;lt;frequency&amp;gt;&lt;/code&gt;&lt;/a&gt; in Kilohertz.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="287885bfc6a3b3275d54fd51adb3335f9aa68b40" translate="yes" xml:space="preserve">
          <source>The value is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/frequency&quot;&gt;&lt;code&gt;&amp;lt;frequency&amp;gt;&lt;/code&gt;&lt;/a&gt; in Kilohertz. The value can be obtained by using the &lt;code&gt;getFloatValue()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c58be0c7c234fe01103423ceadcdd60426e02a80" translate="yes" xml:space="preserve">
          <source>The value is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; in centimeters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bac52b261e1e2a809e255dd4ef981d595b93e606" translate="yes" xml:space="preserve">
          <source>The value is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; in centimeters. The value can be obtained by using the &lt;code&gt;getFloatValue()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1ef6dd46314e4f03347b84150d862d4754ffcb2" translate="yes" xml:space="preserve">
          <source>The value is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; in em units.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f73825e45ce2f40228882dbb51dc463f0acb4b2d" translate="yes" xml:space="preserve">
          <source>The value is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; in em units. The value can be obtained by using the &lt;code&gt;getFloatValue()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4507f45acde444e285edd112c57df0358e548fb5" translate="yes" xml:space="preserve">
          <source>The value is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; in ex units.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db7ff50c9ef2fc04d30f25ce61afa717e9db0434" translate="yes" xml:space="preserve">
          <source>The value is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; in ex units. The value can be obtained by using the &lt;code&gt;getFloatValue()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad753cbee363214ad1077b6926f192fc2553c922" translate="yes" xml:space="preserve">
          <source>The value is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; in inches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64c7a0c12ede3044ae67bf031d0eb644a7a9d4d3" translate="yes" xml:space="preserve">
          <source>The value is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; in inches. The value can be obtained by using the &lt;code&gt;getFloatValue()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbe9d21dea02bbda266029ebf1d89eb8d8c8b5cc" translate="yes" xml:space="preserve">
          <source>The value is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; in millimeters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09d154720b6c67b148179f10a2e7593c5bf5f964" translate="yes" xml:space="preserve">
          <source>The value is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; in millimeters. The value can be obtained by using the &lt;code&gt;getFloatValue()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="279e7aa0742e8737615fde6efc36d9e19fa4ba2c" translate="yes" xml:space="preserve">
          <source>The value is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; in picas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="296c9f0ff71f297c0109b6f5719a8e9cb3647b5b" translate="yes" xml:space="preserve">
          <source>The value is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; in picas. The value can be obtained by using the &lt;code&gt;getFloatValue()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f232909e89340bc78d1b5df45f6b1a2f39fbb27a" translate="yes" xml:space="preserve">
          <source>The value is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; in pixels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85b14772296061733e1e99427b65fb10d92808a6" translate="yes" xml:space="preserve">
          <source>The value is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; in pixels. The value can be obtained by using the &lt;code&gt;getFloatValue()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b738ff5334f6c56bdee7eb80103e9b161414de27" translate="yes" xml:space="preserve">
          <source>The value is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; in points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dea07435b4a09922d7872696bf7858a7795fe96d" translate="yes" xml:space="preserve">
          <source>The value is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; in points. The value can be obtained by using the &lt;code&gt;getFloatValue()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8b8022c063b2747ea3cb17ab96fad4969506e02" translate="yes" xml:space="preserve">
          <source>The value is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/number&quot;&gt;&lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt;&lt;/a&gt; with an unknown dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1febd16c4477db698ae2274e13e6a543348713c5" translate="yes" xml:space="preserve">
          <source>The value is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/number&quot;&gt;&lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt;&lt;/a&gt; with an unknown dimension. The value can be obtained by using the &lt;code&gt;getFloatValue()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fee48a5d9d8ea133911f068647b6cd9ba9848b73" translate="yes" xml:space="preserve">
          <source>The value is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/percentage&quot;&gt;&lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68d70ebc1656548ae79cab802197794504813735" translate="yes" xml:space="preserve">
          <source>The value is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/percentage&quot;&gt;&lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt;&lt;/a&gt;. The value can be obtained by using the &lt;code&gt;getFloatValue()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="391915087f55caaa09913d11217f69eaf55a799c" translate="yes" xml:space="preserve">
          <source>The value is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/shape#Syntax&quot;&gt;&lt;code&gt;rect()&lt;/code&gt;&lt;/a&gt; function. The value can be obtained by using the &lt;code&gt;getRectValue()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22f67537625df9bd670491d8d1d08d5d43bebc8d" translate="yes" xml:space="preserve">
          <source>The value is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/string&quot;&gt;&lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e443ae4241e03ee55255db82c53bb2e9634776e4" translate="yes" xml:space="preserve">
          <source>The value is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/string&quot;&gt;&lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;&lt;/a&gt;. The value can be obtained by using the &lt;code&gt;getStringValue()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63a5f6d4d3670eebf9e15dbc98dea598327d7268" translate="yes" xml:space="preserve">
          <source>The value is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/time&quot;&gt;&lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt;&lt;/a&gt; in milliseconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ce164ec14a2a837cc9634d182ffe566e96c750f" translate="yes" xml:space="preserve">
          <source>The value is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/time&quot;&gt;&lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt;&lt;/a&gt; in milliseconds. The value can be obtained by using the &lt;code&gt;getFloatValue()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b4bc39a2b204f3546f46c75e395a1e6d437422e" translate="yes" xml:space="preserve">
          <source>The value is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/time&quot;&gt;&lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt;&lt;/a&gt; in seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3957efec760e93057f0a549a13b2d96863c94c19" translate="yes" xml:space="preserve">
          <source>The value is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/time&quot;&gt;&lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt;&lt;/a&gt; in seconds. The value can be obtained by using the &lt;code&gt;getFloatValue()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f56ea5f58182cd029a936f1e90b8e0ad5687b061" translate="yes" xml:space="preserve">
          <source>The value is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/uri&quot;&gt;&lt;code&gt;&amp;lt;uri&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c7a479243cc6ccc36bb3eaedfc198b587646500" translate="yes" xml:space="preserve">
          <source>The value is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/uri&quot;&gt;&lt;code&gt;&amp;lt;uri&amp;gt;&lt;/code&gt;&lt;/a&gt;. The value can be obtained by using the &lt;code&gt;getStringValue()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7f41cf2d26296ff0001500445699653908b5061" translate="yes" xml:space="preserve">
          <source>The value is a &lt;code&gt;CSSValue&lt;/code&gt; list and an instance of the &lt;a href=&quot;../cssvaluelist&quot;&gt;&lt;code&gt;CSSValueList&lt;/code&gt;&lt;/a&gt; interface can be obtained by using binding-specific casting methods on this instance of the &lt;code&gt;CSSValue&lt;/code&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa9bccbe78f731335af084c917c3bbf7cb223df5" translate="yes" xml:space="preserve">
          <source>The value is a &lt;code&gt;CSSValue&lt;/code&gt; list and an instance of the &lt;a href=&quot;cssvaluelist&quot;&gt;&lt;code&gt;CSSValueList&lt;/code&gt;&lt;/a&gt; interface can be obtained by using binding-specific casting methods on this instance of the &lt;code&gt;CSSValue&lt;/code&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87b64d80c032aea5c9ad3e2491a6ed1576caee25" translate="yes" xml:space="preserve">
          <source>The value is a custom value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="017feb48186e077d3ec3585aadcc5f585a87c8fd" translate="yes" xml:space="preserve">
          <source>The value is a primitive value and an instance of the &lt;a href=&quot;../cssprimitivevalue&quot;&gt;&lt;code&gt;CSSPrimitiveValue&lt;/code&gt;&lt;/a&gt; interface can be obtained by using binding-specific casting methods on this instance of the &lt;code&gt;CSSValue&lt;/code&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ce6b7db811a9283e755ba91b3449cb0a4f18ee9" translate="yes" xml:space="preserve">
          <source>The value is a primitive value and an instance of the &lt;a href=&quot;cssprimitivevalue&quot;&gt;&lt;code&gt;CSSPrimitiveValue&lt;/code&gt;&lt;/a&gt; interface can be obtained by using binding-specific casting methods on this instance of the &lt;code&gt;CSSValue&lt;/code&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e20e9b391c6120b6e04800ad67cea54b768431b4" translate="yes" xml:space="preserve">
          <source>The value is a simple &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/number&quot;&gt;&lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30a7c8b6b47fb1bc30c92b432b9f4bbdcca5625a" translate="yes" xml:space="preserve">
          <source>The value is a simple &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/number&quot;&gt;&lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt;&lt;/a&gt;. The value can be obtained by using the &lt;code&gt;getFloatValue()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3367981b93277eaee19e482eef296580d0ebbbf1" translate="yes" xml:space="preserve">
          <source>The value is an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/angle&quot;&gt;&lt;code&gt;&amp;lt;angle&amp;gt;&lt;/code&gt;&lt;/a&gt; in degrees.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="719fda609fb8bb52c0c5634561669a5e342273ba" translate="yes" xml:space="preserve">
          <source>The value is an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/angle&quot;&gt;&lt;code&gt;&amp;lt;angle&amp;gt;&lt;/code&gt;&lt;/a&gt; in degrees. The value can be obtained by using the &lt;code&gt;getFloatValue()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67cc244993bc80f1c7498e7a23d14ef1f4e0bc27" translate="yes" xml:space="preserve">
          <source>The value is an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/angle&quot;&gt;&lt;code&gt;&amp;lt;angle&amp;gt;&lt;/code&gt;&lt;/a&gt; in grads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30d52bb9b68f3e85e3970107d6cc66091cc9315a" translate="yes" xml:space="preserve">
          <source>The value is an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/angle&quot;&gt;&lt;code&gt;&amp;lt;angle&amp;gt;&lt;/code&gt;&lt;/a&gt; in grads. The value can be obtained by using the &lt;code&gt;getFloatValue()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="654cf3cb9423b8a8782bb4251b8ad6139cbc4e65" translate="yes" xml:space="preserve">
          <source>The value is an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/angle&quot;&gt;&lt;code&gt;&amp;lt;angle&amp;gt;&lt;/code&gt;&lt;/a&gt; in radians.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9666fc3029f2ccd871b98205bdbe0335d90680e" translate="yes" xml:space="preserve">
          <source>The value is an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/angle&quot;&gt;&lt;code&gt;&amp;lt;angle&amp;gt;&lt;/code&gt;&lt;/a&gt; in radians. The value can be obtained by using the &lt;code&gt;getFloatValue()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f551766201633ce0b27f50e477c2a40a3a6b63e" translate="yes" xml:space="preserve">
          <source>The value is an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/attr()&quot;&gt;&lt;code&gt;attr()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c547cbb435fde3c2c8a892c2e4d2cb4a04a77511" translate="yes" xml:space="preserve">
          <source>The value is an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/attr()&quot;&gt;&lt;code&gt;attr()&lt;/code&gt;&lt;/a&gt; function. The value can be obtained by using the &lt;code&gt;getStringValue()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4898250434ae4ead48359bf1e2b257f9df03072" translate="yes" xml:space="preserve">
          <source>The value is an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/color_value&quot;&gt;&lt;code&gt;&amp;lt;color&amp;gt;&lt;/code&gt;&lt;/a&gt;. The value can be obtained by using the &lt;code&gt;getRGBColorValue()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c24749ecab2c644970a6a55094cf88008164c7c" translate="yes" xml:space="preserve">
          <source>The value is an empty string if the user navigated to the page directly (not through a link, but, for example, via a bookmark). Since this property returns only a string, it does not give you DOM access to the referring page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48dcf6a735244359eaed753f254e648fd1cec01f" translate="yes" xml:space="preserve">
          <source>The value is an identifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6383f0417ddcb3b677853f49b445800ff99857db" translate="yes" xml:space="preserve">
          <source>The value is an identifier. The value can be obtained by using the &lt;code&gt;getStringValue()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8df3b7db3c2a4a62f5c9a3f95f348f0108a3942" translate="yes" xml:space="preserve">
          <source>The value is inherited and the &lt;code&gt;cssText&lt;/code&gt; contains &lt;code&gt;&quot;inherit&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2df5cff8bb16852ca752272c5d767a133935e424" translate="yes" xml:space="preserve">
          <source>The value is not a recognized CSS2 value. The value can only be obtained by using the &lt;a href=&quot;../cssvalue/csstext&quot;&gt;&lt;code&gt;cssText&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d13c027b5b89773e9259ea07e6b92fac3fe9ea2" translate="yes" xml:space="preserve">
          <source>The value is not a recognized CSS2 value. The value can only be obtained by using the &lt;a href=&quot;cssvalue/csstext&quot;&gt;&lt;code&gt;cssText&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52e8c6bb1070e37190f9d61afef094ca81de0acf" translate="yes" xml:space="preserve">
          <source>The value of &lt;a href=&quot;../element/tagname&quot;&gt;&lt;code&gt;Element.tagName&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9a33a98eccdf08982099e65eb035cd6694c60e2" translate="yes" xml:space="preserve">
          <source>The value of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Guard&quot;&gt;Guard&lt;/a&gt; is &lt;code&gt;immutable&lt;/code&gt;.​</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d86fdd3a64fab080bf9766ab758dac2a9f548087" translate="yes" xml:space="preserve">
          <source>The value of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Attr/name&quot;&gt;&lt;code&gt;Attr.name&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7839547b5cc1e78385d11c3a2f54848f93ae7ac7" translate="yes" xml:space="preserve">
          <source>The value of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/DocumentType/name&quot;&gt;&lt;code&gt;DocumentType.name&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5128920e6c07b79a1e092345c4d5ab3c387afd69" translate="yes" xml:space="preserve">
          <source>The value of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction/target&quot;&gt;&lt;code&gt;ProcessingInstruction.target&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df9acaf3c960fe81b6b51b5552cd6df403bdee29" translate="yes" xml:space="preserve">
          <source>The value of &lt;a href=&quot;language&quot;&gt;&lt;code&gt;navigator.language&lt;/code&gt;&lt;/a&gt; is the first element of the returned array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52499f2645ebbbc963983e37ffe36b34fc1e4b33" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;before&lt;/code&gt; can now be a long and is optional. It throws a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/DOMError&quot;&gt;&lt;code&gt;DOMError&lt;/code&gt;&lt;/a&gt; of the type &lt;code&gt;HierarchyRequestError&lt;/code&gt; if the passed &lt;code&gt;item&lt;/code&gt; is an ancestor of the &lt;a href=&quot;../htmlselectelement&quot;&gt;&lt;code&gt;HTMLSelectElement&lt;/code&gt;&lt;/a&gt; and no longer throws if the &lt;code&gt;before&lt;/code&gt; parameter is not found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e69d37edaec4a8736c7ef7d8c3eba3c242e3f21" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;channelNumber&lt;/code&gt; specifies a channel number which doesn't exist (that is, it's greater than or equal to the value of &lt;a href=&quot;numberofchannels&quot;&gt;&lt;code&gt;numberOfChannels&lt;/code&gt;&lt;/a&gt; on the channel).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d1efed955480b055cacc81c08ca99c1f9649e28" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;direction&lt;/code&gt; is used by &lt;a href=&quot;../rtcpeerconnection/createoffer&quot;&gt;&lt;code&gt;RTCPeerConnection.createOffer()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../rtcpeerconnection/createanswer&quot;&gt;&lt;code&gt;RTCPeerConnection.createAnswer()&lt;/code&gt;&lt;/a&gt; in order to generate the SDP generated by each of those methods. The SDP contains an a-line which specifies the directionality. For example, if the &lt;code&gt;direction&lt;/code&gt; is specified as &lt;code&gt;&quot;sendrecv&quot;&lt;/code&gt;, the corresponding SDP a-line is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbe256a269f022eaccd96066754e68998198d39e" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;enabled&lt;/code&gt;, in essence, represents what a typical user would consider the muting state for a track, whereas the &lt;a href=&quot;muted&quot;&gt;&lt;code&gt;muted&lt;/code&gt;&lt;/a&gt; property indicates a state in which the track is temporarily unable to output data, such as a scenario in which frames have been lost in transit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ebe3e8ddce95a82f28879babc90fa20ce7aa9c3" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;frameRate&lt;/code&gt; is negative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f40eead736f505ec82003b950d0ff1030d4160c" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;startInChannel&lt;/code&gt; is outside the current range of samples that already exist in the source buffer; that is, it's greater than its current &lt;a href=&quot;length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b6ae6c5d7920b3d42487a7506171aa302218d21" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;this&lt;/code&gt; within &lt;code&gt;modifyText()&lt;/code&gt; is a reference to the global object &lt;a href=&quot;../window&quot;&gt;&lt;code&gt;Window&lt;/code&gt;&lt;/a&gt; (or &lt;code&gt;undefined&lt;/code&gt; in the case of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;strict mode&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c92bc2b1a615af20a94dbb8796285470b69ff0ce" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;this&lt;/code&gt; within the handler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5123ebefb1e645a582dc710944d613048c96aaff" translate="yes" xml:space="preserve">
          <source>The value of a &lt;code&gt;ConstrainDOMString&lt;/code&gt; can be any of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07025ea471c8bca5ba257685a5cea2f466731f5e" translate="yes" xml:space="preserve">
          <source>The value of a &lt;code&gt;DOMHighResTimeStamp&lt;/code&gt; is a double-precision floating-point number which describes the number of milliseconds (accurate to within 5 microseconds if the device supports it) elapsed between two points in time. The starting time can be either a specific time determined by the script for a site or app, or the &lt;strong&gt;time origin&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90bcc60448c00fd108d00ed202ff2673d6044bd9" translate="yes" xml:space="preserve">
          <source>The value of dataset is a &lt;a href=&quot;../domstringmap&quot;&gt;&lt;code&gt;DOMStringMap&lt;/code&gt;&lt;/a&gt; object mapping key names to values; both the key names and the values are, themselves, &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; objects. You can access an individual value by using the syntax &lt;code&gt;&lt;em&gt;SVGElement&lt;/em&gt;.dataset.&lt;em&gt;keyName&lt;/em&gt;&lt;/code&gt; to refer to the key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e781237c2b8ddfce0f0cc6733be1a0af0304eddc" translate="yes" xml:space="preserve">
          <source>The value of the &lt;a href=&quot;../navigator&quot;&gt;&lt;code&gt;Navigator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&lt;strong&gt;vendor&lt;/strong&gt;&lt;/code&gt; property is always either &quot;&lt;code&gt;Google Inc.&lt;/code&gt;&quot;, &quot;&lt;code&gt;Apple Computer, Inc.&lt;/code&gt;&quot;, or (in Firefox) the empty string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4eb5acc3ea67b69a1a806f227bb8f55afcaf2c2" translate="yes" xml:space="preserve">
          <source>The value of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/transition-property&quot;&gt;&lt;code&gt;transition-property&lt;/code&gt;&lt;/a&gt; property that applies to the target is changed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c05ea4ee0c9106e2a3c6c88845ffe9980fa8644" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;&lt;strong&gt;Navigator.vendorSub&lt;/strong&gt;&lt;/code&gt; property is always the empty string, in any browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="776fecf56bedd40df82e1c4582f9931b4a697b03" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;NavigatorID.appCodeName&lt;/code&gt; property is always &quot;&lt;code&gt;Mozilla&lt;/code&gt;&quot;, in any browser. This property is kept only for compatibility purposes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b98150811a0598dc2958e62810f72ad265a056aa" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;NavigatorID.appName&lt;/code&gt; property is always &quot;&lt;code&gt;Netscape&lt;/code&gt;&quot;, in any browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cf93591e2fd780b44620dccb78418e397b65f35" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;NavigatorID.product&lt;/code&gt; property is always &quot;&lt;code&gt;Gecko&lt;/code&gt;&quot;, in any browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51d7e7fa24054ef5327bc4ea047ecf0eaa23466d" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;audio&lt;/code&gt; property can be specified as either of two types:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f1e8b84e14a503bd7012e84ce800f5bf7ba1505" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;navigationUI&lt;/code&gt; property must be one of the following strings. The default is &lt;code&gt;&quot;auto&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa18ebfd63e4fbb53608d1820a9701c76ea34e93" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;origin&lt;/code&gt; property of the dispatched event is not affected by the current value of &lt;code&gt;document.domain&lt;/code&gt; in the calling window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de41810685b2f5e23b83b04e3c7f7cbd39f04ee7" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;origin&lt;/code&gt; property when the sending window contains a &lt;code&gt;javascript:&lt;/code&gt; or &lt;code&gt;data:&lt;/code&gt; URL is the origin of the script that loaded the URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bf02c6a156305d4c7fb52c8531eaf6a14176a7b" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;video&lt;/code&gt; property can be specified as either of two types:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1b2c610f4f02e50361fe72a95299c3366f69ff4" translate="yes" xml:space="preserve">
          <source>The value of the HTTP header you want to add.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="797ddf7b2bb39a2617e58f952e29d2243cd09e75" translate="yes" xml:space="preserve">
          <source>The value of the auto increment flag for this object store.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0655d4c584f4cda48ae8159deae0ea747748140" translate="yes" xml:space="preserve">
          <source>The value of the current cursor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47b75aa5553be59be4e7e55e4716ce379d0badd0" translate="yes" xml:space="preserve">
          <source>The value of the current element being processed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0cc4ab1e973a68880df1073590048533ec59a3c" translate="yes" xml:space="preserve">
          <source>The value of the depth coordinate, z, as a floating point number. The default value is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e82b05dff163ac0f27e33a76835ea9a4dd8fdf05" translate="yes" xml:space="preserve">
          <source>The value of the horizontal coordinate, x, as a floating point number. The default value is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9d661b5edbb825b4b78e620973573e89d9ceb21" translate="yes" xml:space="preserve">
          <source>The value of the list as a &lt;a href=&quot;domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="164f01e6549956280d219056ff177df1f5095998" translate="yes" xml:space="preserve">
          <source>The value of the name parameter is not the name of an HTTP header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30f99426ec21c32a11c3203aeaf868cd6562557b" translate="yes" xml:space="preserve">
          <source>The value of the parameter to append.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="976451a3cf005214a6e64381e37c97bcabdba67c" translate="yes" xml:space="preserve">
          <source>The value of the parameter to set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4223925586beea1671f18518394bf2721418aece" translate="yes" xml:space="preserve">
          <source>The value of the perspective, w, as a floating point number. The default is 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15760a29c3a5cb4a56717efdf7afd2931323dd2c" translate="yes" xml:space="preserve">
          <source>The value of the specified key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9b16b03c29555767d6fa2f1e5ac09e258487dcc" translate="yes" xml:space="preserve">
          <source>The value of the vertical coordinate, y, as a floating point number. The default value is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="382234da0cf947a6248e2e06a1f2ffa7c9eeffc2" translate="yes" xml:space="preserve">
          <source>The value of this property corresponds to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffectReadOnly/timing&quot;&gt;&lt;code&gt;AnimationEffectReadOnly.timing&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffectReadOnly/timing&quot;&gt;&lt;code&gt;KeyframeEffectReadOnly.timing&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect/timing&quot;&gt;&lt;code&gt;KeyframeEffect.timing&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0405bdb56440711696bc5e9116c97222a4028e96" translate="yes" xml:space="preserve">
          <source>The value of this property corresponds to property of the same name in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffectReadOnly/timing&quot;&gt;&lt;code&gt;AnimationEffectReadOnly.timing&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffectReadOnly/timing&quot;&gt;&lt;code&gt;KeyframeEffectReadOnly.timing&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect/timing&quot;&gt;&lt;code&gt;KeyframeEffect.timing&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21b25a9457b0c657cbf71ec44036f8ff08d21113" translate="yes" xml:space="preserve">
          <source>The value of this property corresponds to the one in &lt;a href=&quot;../effecttiming&quot;&gt;&lt;code&gt;EffectTiming&lt;/code&gt;&lt;/a&gt; (which is the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffectReadOnly/timing&quot;&gt;&lt;code&gt;timing&lt;/code&gt;&lt;/a&gt; object for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffectReadOnly&quot;&gt;&lt;code&gt;AnimationEffectReadOnly&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keyframeeffect&quot;&gt;&lt;code&gt;KeyframeEffectReadOnly&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../keyframeeffect&quot;&gt;&lt;code&gt;KeyframeEffect&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f0430dbde66ff6cf6079e557a56ad45148670df" translate="yes" xml:space="preserve">
          <source>The value of this property corresponds to the one in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffectTimingReadOnly&quot;&gt;&lt;code&gt;AnimationEffectTimingReadOnly&lt;/code&gt;&lt;/a&gt; (which is the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffectReadOnly/timing&quot;&gt;&lt;code&gt;timing&lt;/code&gt;&lt;/a&gt; object for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffectReadOnly&quot;&gt;&lt;code&gt;AnimationEffectReadOnly&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../keyframeeffect&quot;&gt;&lt;code&gt;KeyframeEffectReadOnly&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../keyframeeffect&quot;&gt;&lt;code&gt;KeyframeEffect&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="138b044d278ebce6791d41689c2e5299449b1800" translate="yes" xml:space="preserve">
          <source>The value of this property is a &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing the full URL of a server to use during ICE negotiation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f8162cf3e22dd1c35ad35b9c28726036fa84d68" translate="yes" xml:space="preserve">
          <source>The value of this property may be specified as a single URL or as an array of multiple URLs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d88b0b24d8f852b8f59a0657ee994e8c9cfeb87" translate="yes" xml:space="preserve">
          <source>The value of this string is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fe412518b3a03890a243217cdcd87c2deb4138a" translate="yes" xml:space="preserve">
          <source>The value of version is zero or a negative number or not a number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84668a1f236c612a67d1b59234219bed9fbebfb4" translate="yes" xml:space="preserve">
          <source>The value parameter passed was not a valid key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97ff11d9f3b3c01d19d6b17e43990501b1afc8a5" translate="yes" xml:space="preserve">
          <source>The value passed into the &lt;code&gt;count&lt;/code&gt; parameter was zero or a negative number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4cb7bc285cd79fda9b3cf0ff2dd832e82436ffc" translate="yes" xml:space="preserve">
          <source>The value reflects that of the do-not-track header, i.e. values of {&quot;1&quot;, &quot;0&quot;, &quot;unspecified&quot; }. Note: Prior to Gecko 32, Gecko used the values { &quot;yes&quot;, &quot;no&quot;, &quot;unspecified&quot;} (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=887703&quot;&gt;bug 887703&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bdbd91dd5ca1ea3a5f5b5b092b47d6d4a9f28e0" translate="yes" xml:space="preserve">
          <source>The value retrieved from the object store.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a647efc911e05d6fd799ef612f58becc65b0f89f" translate="yes" xml:space="preserve">
          <source>The value returned by &lt;code&gt;returnValue&lt;/code&gt; is the opposite of the value returned by &lt;a href=&quot;defaultprevented&quot;&gt;&lt;code&gt;defaultPrevented&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ac9d8e93539105a3b0c7aed86e434907ee9687f" translate="yes" xml:space="preserve">
          <source>The value returned by this property depends on the performance entry's &lt;a href=&quot;entrytype&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d81f222db879af651838bcc389938b523628b725" translate="yes" xml:space="preserve">
          <source>The value specified as &lt;code&gt;outputIndex&lt;/code&gt; or &lt;code&gt;inputIndex&lt;/code&gt; doesn't correspond to an existing input or output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3ffb4cc141d2ffc909327acacfe878788d0b2c2" translate="yes" xml:space="preserve">
          <source>The value specified for &lt;a href=&quot;../rtcicecandidate/sdpmid&quot;&gt;&lt;code&gt;sdpMid&lt;/code&gt;&lt;/a&gt; is non-&lt;code&gt;null&lt;/code&gt; and doesn't match the media description ID of any media description included within the &lt;a href=&quot;remotedescription&quot;&gt;&lt;code&gt;remoteDescription&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b5dbaafba182d39e738e7fe19ff3f5fbf907ed1" translate="yes" xml:space="preserve">
          <source>The value specified for &lt;code&gt;mimeType&lt;/code&gt; is an empty string rather than a valid MIME type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bbaaa72829b8b5e7bc7c28feb3450607a181910" translate="yes" xml:space="preserve">
          <source>The value specified for &lt;code&gt;when&lt;/code&gt; is negative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="967ef5b8a97458f0ce29c933c4756d64578d5f89" translate="yes" xml:space="preserve">
          <source>The value the given property should have.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a516e1ceee6ce87a44dd29a94236c962f336951b" translate="yes" xml:space="preserve">
          <source>The value the parameter will start to transition towards at the given start time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af119caceb3e95ed52ef907b9e0c67aba1c8eed9" translate="yes" xml:space="preserve">
          <source>The value to be stored in the record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="636283d24e4b7d797a2555d5c5c0091ff6b74558" translate="yes" xml:space="preserve">
          <source>The value to be stored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c06718d1e0eef2c165aae300980208a0841e3da" translate="yes" xml:space="preserve">
          <source>The value to set as the body of the header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab8ae4ffd1f56b5b324481dfedac7c5afa0016ce" translate="yes" xml:space="preserve">
          <source>The value to store into the index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf32e2792bb48e1730d5ff258b8b7915d00bda8a" translate="yes" xml:space="preserve">
          <source>The value will be &lt;code&gt;null&lt;/code&gt; if the stream cannot be successfully written to (due to either being errored, or having an abort queued up), and zero if the stream is closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="942c94f3fa1fedd0c44f443966db73a060dccae5" translate="yes" xml:space="preserve">
          <source>The values in the example table above have been rounded to two decimal places.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa4533e4c532cec3a1d6decc14e7c0cbd4c70645" translate="yes" xml:space="preserve">
          <source>The values in this interface should not be used to compute view or projection matrices. In order to ensure the widest possible hardware compatibility use the matrices provided by &lt;a href=&quot;vrframedata&quot;&gt;&lt;code&gt;VRFrameData&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23f35b79fd5aaac460d678dca5788af7128a8c0a" translate="yes" xml:space="preserve">
          <source>The values listed are for the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe&quot;&gt;&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;&lt;/a&gt; in which the sample is presented above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bbaa6d95232d9d635293ce05cf3ddd7551945b2" translate="yes" xml:space="preserve">
          <source>The values listed are for the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe&quot;&gt;&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;&lt;/a&gt; in which the sample is presented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="981a7aefa2e8f7efe6c605dbb42a7309920906a5" translate="yes" xml:space="preserve">
          <source>The values returned by &lt;code&gt;getComputedStyle&lt;/code&gt; are known as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/resolved_value&quot;&gt;&lt;code&gt;resolved values&lt;/code&gt;&lt;/a&gt;. These are usually the same as the CSS 2.1 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/computed_value&quot;&gt;&lt;code&gt;computed values&lt;/code&gt;&lt;/a&gt;, but for some older properties like &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt; or &lt;code&gt;padding&lt;/code&gt;, they are instead the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/used_value&quot;&gt;&lt;code&gt;used values&lt;/code&gt;&lt;/a&gt;. Originally, CSS 2.0 defined the computed values to be the &quot;ready to be used&quot; final values of properties after cascading and inheritance, but CSS 2.1 redefined computed values as pre-layout, and used values as post-layout. For CSS 2.0 properties, the &lt;code&gt;getComputedStyle&lt;/code&gt; function returns the old meaning of computed values, now called &lt;strong&gt;used values&lt;/strong&gt;. An example of difference between pre- and post-layout values includes the resolution of percentages that represent the width or the height of an element (also known as its layout), as those will be replaced by their pixel equivalent only in the used value case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b6f3c4bd31589673588dd3334c2f969c530602a" translate="yes" xml:space="preserve">
          <source>The values set with &lt;a href=&quot;vertexattribpointer&quot;&gt;&lt;code&gt;vertexAttribPointer&lt;/code&gt;&lt;/a&gt; are context-global, i.e. they aren't part of the shader state (like generix vertex attribute indexes to shader variable bindings) and aren't part of the vertex array object state (like enabled vertex attribute arrays). The only way to change the values is by calling this function again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72a94f65bb1cbe6e07b90497305fc92cb8d35b74" translate="yes" xml:space="preserve">
          <source>The values supported by &lt;code&gt;responseType&lt;/code&gt; are the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bea9b3b9d093ed3896bb7430843fa8f6b7fde568" translate="yes" xml:space="preserve">
          <source>The values that can be combined to form the bitmask are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cad53f7f875ecf3125760cd3a749a527ed79b1f2" translate="yes" xml:space="preserve">
          <source>The variable &lt;code&gt;loremIpsum&lt;/code&gt; contains the text we'll use for the body of all of our articles. Obviously in the real world, you'd have some code to pull articles from a database or the like, but this does the job for our purposes. Every article uses the same text; you could of course change that easily enough.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f6a5b2150b450d9e1ad2c4043ea43191ab4f86c" translate="yes" xml:space="preserve">
          <source>The velocity relative to the listener is used to control the pitch change needed to conform with the &lt;a href=&quot;http://en.wikipedia.org/wiki/Doppler_effect&quot;&gt;Doppler effect&lt;/a&gt; due to the relative speed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="314e4aa2c407881e5008650230cc8c712510dc0e" translate="yes" xml:space="preserve">
          <source>The version of the connected database. Has the null value when the database is first created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd120f67ac4e3351ed79959adb23e04cecd2301f" translate="yes" xml:space="preserve">
          <source>The version to store in the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08116e45c37d7ab736e7989a33c24ca8bd2aef5f" translate="yes" xml:space="preserve">
          <source>The vertex shader</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc35063a6d7c301b5637019402552d1acc860bd0" translate="yes" xml:space="preserve">
          <source>The vertex shader can, as needed, also do things like determine the coordinates within the face's texture of the &lt;a href=&quot;https://en.wikipedia.org/wiki/texel_(graphics)&quot;&gt;texel&lt;/a&gt; to apply to the vertex, apply the normals to determine the lighting factor to apply to the vertex, and so on. This information can then be stored in &lt;a href=&quot;../data#Varyings&quot;&gt;varyings&lt;/a&gt; or &lt;a href=&quot;../data#Attributes&quot;&gt;attributes&lt;/a&gt; as appropriate to be shared with the fragment shader.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba6602a58a6efc2f4b614dbbea3e19cd42a17127" translate="yes" xml:space="preserve">
          <source>The vertex shader code may include a number of attributes, but we don't need to specify the values for each attribute. Instead, we can supply a default value that will be identical for all vertices. We can call &lt;code&gt;&lt;a href=&quot;disablevertexattribarray&quot;&gt;&lt;code&gt;gl.disableVertexAttribArray()&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; to tell WebGL to use the default value, while calling &lt;a href=&quot;enablevertexattribarray&quot;&gt;&lt;code&gt;gl.enableVertexAttribArray()&lt;/code&gt;&lt;/a&gt; will read the values from the array buffer as specified with &lt;code&gt;gl.vertexAttribPointer()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48d16f4e23ff7c00d1eea9fbe68df6cd80aff2af" translate="yes" xml:space="preserve">
          <source>The vertex shader must perform the needed transforms on the vertex's position, make any other adjustments or calculations it needs to make on a per-vertex basis, then return the transformed vertex by saving it in a special variable provided by GLSL, called &lt;code&gt;gl_Position&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="845898c14814b4a346972e2991623e406325cde7" translate="yes" xml:space="preserve">
          <source>The vertical coordinate of a point, relative to the top edge of the current viewport.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="999ed039c211b52858b1890bf8d90d9c21c07e1d" translate="yes" xml:space="preserve">
          <source>The vertical coordinate of a point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5c848583e0055fa9493058d5073d5d360b0130e" translate="yes" xml:space="preserve">
          <source>The very fact that RTCP is defined in the same RFC as RTP is a clue as to just how closely-interrelated these two protocols are.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7d09b9852e42555432a32419233a56d1e7e71a8" translate="yes" xml:space="preserve">
          <source>The very same list but as a space-separated tokens in a &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt;: &lt;a href=&quot;rel&quot;&gt;&lt;code&gt;HTMLAnchorElement.rel&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1033ae960c8cb5b61ee150aef1c3186847284a58" translate="yes" xml:space="preserve">
          <source>The very same list but as a space-separated tokens in a &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt;: &lt;a href=&quot;rel&quot;&gt;&lt;code&gt;HTMLAreaElement.rel&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6874c9a26e41ef5b85e68f58fd8f1d0aa5e4f77" translate="yes" xml:space="preserve">
          <source>The very same list but as a space-separated tokens in a &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt;: &lt;a href=&quot;rel&quot;&gt;&lt;code&gt;HTMLLinkElement.rel&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51c20ea3ec9ff7f15f946bcdaa0ec9bfadc95fc9" translate="yes" xml:space="preserve">
          <source>The very same list but as tokens: &lt;a href=&quot;rellist&quot;&gt;&lt;code&gt;HTMLAnchorElement.relList&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ffdabfa301f501dada06780202d4538cdcf8786" translate="yes" xml:space="preserve">
          <source>The very same list but as tokens: &lt;a href=&quot;rellist&quot;&gt;&lt;code&gt;HTMLAreaElement.relList&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e738a3f7559f2529ecb8272c7cb6e7e5aac8c04" translate="yes" xml:space="preserve">
          <source>The very same list but as tokens: &lt;a href=&quot;rellist&quot;&gt;&lt;code&gt;HTMLLinkElement.relList&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d430c5df00c038b0cb21652a2094354cc04c3c0d" translate="yes" xml:space="preserve">
          <source>The video keyboard</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71941c45ba704e48f1359adcd65e0efee6c8e185" translate="yes" xml:space="preserve">
          <source>The video source is facing away from the user, thereby viewing their environment. This is the back camera on a smartphone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e482bc938f06086499dfbdb0e6ed6f3c845d9a4" translate="yes" xml:space="preserve">
          <source>The video source is facing toward the user but to their left, such as a camera aimed toward the user but over their left shoulder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52da644171f2a5881601bf1b2671a7f7aeee95b5" translate="yes" xml:space="preserve">
          <source>The video source is facing toward the user but to their right, such as a camera aimed toward the user but over their right shoulder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="351262500ecadb5155b60f7bc08b1adb7f27f1cd" translate="yes" xml:space="preserve">
          <source>The video source is facing toward the user; this includes, for example, the front-facing camera on a smartphone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9512b8a9a954a5005274bc88570b1502892f53eb" translate="yes" xml:space="preserve">
          <source>The view attribute identifies the AbstractView [DOM2VIEWS] from which the event was generated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1750f44b5857163a52e2a6fd6334881e823b0cb" translate="yes" xml:space="preserve">
          <source>The view to be read into.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aae4897138b692ce8b049dbaa5305cc0b479a4e6" translate="yes" xml:space="preserve">
          <source>The viewport width and height are clamped to a range that is implementation dependent. To get this range, you can use the &lt;code&gt;MAX_VIEWPORT_DIMS&lt;/code&gt; constant, which returns an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array&quot;&gt;&lt;code&gt;Int32Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edfb3f0eb9ea0ec925b22c6e476db4a7819c8134" translate="yes" xml:space="preserve">
          <source>The visual viewport API adds two events, &lt;code&gt;onresize&lt;/code&gt; and &lt;code&gt;onscroll&lt;/code&gt;, that fire whenever the visual viewport changes. These events allow you to position elements relative to the visual viewport that would normally be anchored to the layout viewport.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c5258a7cbb02685a908273aabf441cab195ee57" translate="yes" xml:space="preserve">
          <source>The voice set in &lt;a href=&quot;../speechsynthesisutterance/voice&quot;&gt;&lt;code&gt;SpeechSynthesisUtterance.voice&lt;/code&gt;&lt;/a&gt; was not available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0edc1d3eb213b0ec6c08dd751c2895490f20805" translate="yes" xml:space="preserve">
          <source>The volume control</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5db221252270f2da4b504889c3b261849f6a391f" translate="yes" xml:space="preserve">
          <source>The volume slider in the settings bar provides a simple interface to change the gain value on the master gain node, thereby changing the loudness of all playing notes. The &lt;code&gt;changeVolume()&lt;/code&gt; method is the handler for the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/change&quot;&gt;change&lt;/a&gt;&lt;/code&gt; event on the slider.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e54f1e5a2e95ff9074ec170ca3c589ac1700d762" translate="yes" xml:space="preserve">
          <source>The waveform picker</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6541162334d281474545b070a2f79392f6be3bd9" translate="yes" xml:space="preserve">
          <source>The web page creates a &lt;code&gt;div&lt;/code&gt; element with the ID &lt;code&gt;result&lt;/code&gt; , which gets used to display the result, then spawns the worker. After spawning the worker, the &lt;code&gt;onmessage&lt;/code&gt; handler is configured to display the results by setting the contents of the &lt;code&gt;div&lt;/code&gt; element, and the &lt;code&gt;onerror&lt;/code&gt; handler is set to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Debugging_JavaScript#dump.28.29&quot;&gt;dump&lt;/a&gt; the error message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="453151a8b6c3475268acbc0d0417aa88a418aa49" translate="yes" xml:space="preserve">
          <source>The web server hosting the chat servic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77c935d4fc21caba386035c18bad5c57fd93ec7c" translate="yes" xml:space="preserve">
          <source>The webgl spec, based on the OpenGL ES 2.0/3.0 specs points out that the minimum and maximum width for a line is implementation defined. The maximum minimum width is allowed to be 1.0. The minimum maximum width is also allowed to be 1.0. Because of these implementation defined limits it is not recommended to use line widths other than 1.0 since there is no guarantee any user's browser will display any other width.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="282f25aab6e8cfd557f9443ddfaae267393ae32d" translate="yes" xml:space="preserve">
          <source>The welcome panel</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0837ea8c119de749a7bccc30b20115a265e995b" translate="yes" xml:space="preserve">
          <source>The whole thing is wrapped in a test that checks whether &lt;code&gt;getUserMedia&lt;/code&gt; is supported before running anything else. Next, we call &lt;code&gt;getUserMedia()&lt;/code&gt; and inside it define:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0f3e617d01525e0b2452ec35ab90eaa0ca339a8" translate="yes" xml:space="preserve">
          <source>The width (magnitude on the X axis), in CSS pixels, of the contact geometry of the pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9ec5051bad662420776d9108dcc3d0b286bacc8" translate="yes" xml:space="preserve">
          <source>The width of the &lt;code&gt;DOMRect&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50ddb1f1af0ed9fe4f4f84f7e434bca734f03e76" translate="yes" xml:space="preserve">
          <source>The width of the &lt;code&gt;DOMRectReadOnly&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0072b1b0819abe7b66f2c566e8f179f93ce2ced" translate="yes" xml:space="preserve">
          <source>The width of the bounds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e38420beea5433ea5f9e06ee8edf62ef0e494fef" translate="yes" xml:space="preserve">
          <source>The width of the event's contact area (in CSS pixels).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cc2c2a477dab42fcbb08d00c7dfb1b1c119eb32" translate="yes" xml:space="preserve">
          <source>The width of the image (i.e., the value for the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attr-width&quot;&gt;width&lt;/a&gt;&lt;/code&gt; attribute).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a04c661fdfc55e4501ba0565e630d50894693e2" translate="yes" xml:space="preserve">
          <source>The width of the image in pixels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="924a717cb84a878ef6da280675a5b2093b42b039" translate="yes" xml:space="preserve">
          <source>The width of the left border of an element in pixels. It includes the width of the vertical scrollbar if the text direction of the element is right&amp;ndash;to&amp;ndash;left and if there is an overflow causing a left vertical scrollbar to be rendered. &lt;code&gt;clientLeft&lt;/code&gt; does not include the left margin or the left padding. &lt;code&gt;clientLeft&lt;/code&gt; is read-only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="442e7fb13b5a532d6aba794a2191dbb561e3fc0c" translate="yes" xml:space="preserve">
          <source>The width of the offscreen canvas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="945232011b9a42eb5cb9da76e190668fb406c6fe" translate="yes" xml:space="preserve">
          <source>The width of the rectangle from which the &lt;code&gt;ImageBitmap&lt;/code&gt; will be extracted. This value can be negative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e89d13c4fe264f91ae6b7479b3bf3373be29c18" translate="yes" xml:space="preserve">
          <source>The width of the rectangle from which the &lt;code&gt;ImageData&lt;/code&gt; will be extracted. Positive values are to the right, and negative to the left.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8937b615820e3bef9d96f28db08396d90c59117f" translate="yes" xml:space="preserve">
          <source>The width of the rule on the page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="960ccc9a8efbe4b845fe9f6e604e180f4b4be985" translate="yes" xml:space="preserve">
          <source>The width of the sub-rectangle of the source &lt;code&gt;image&lt;/code&gt; to draw into the destination context. If not specified, the entire rectangle from the coordinates specified by &lt;code&gt;sx&lt;/code&gt; and &lt;code&gt;sy&lt;/code&gt; to the bottom-right corner of the image is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f90bf67277f327527ea0e447eca10aa2001bbf3c" translate="yes" xml:space="preserve">
          <source>The width of the top border of an element in pixels. It is a read-only, integer property of element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a78481dbb7decdb1f4befb0086e3e926c9f2093c" translate="yes" xml:space="preserve">
          <source>The width to draw the &lt;code&gt;image&lt;/code&gt; in the destination canvas. This allows scaling of the drawn image. If not specified, the image is not scaled in width when drawn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05604a76edcf5f123852053144c676dfe88b511c" translate="yes" xml:space="preserve">
          <source>The width to give the new &lt;code&gt;ImageData&lt;/code&gt; object. A negative value flips the rectangle around the vertical axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b12ade8a271a121ba8f96c1d087912eeea1bb6ea" translate="yes" xml:space="preserve">
          <source>The window method &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/window/sizeToContent&quot;&gt;sizeToContent()&lt;/a&gt; is also disabled if the user unchecks the preference &lt;code&gt;Move or resize existing windows&lt;/code&gt; checkbox. Moving and resizing a window remotely on the user's screen via script will very often annoy the users, will disorient the user, and will be wrong at best. The web author expects to have full control of (and can decide about) every position and size aspects of the users' browser window ... which is simply not true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17b6c8c897ffdecfd320d625d911a3134d42ca49" translate="yes" xml:space="preserve">
          <source>The window you create must respect the Same Origin Policy. If the window you open is not in the same orgin as the current window, you will not be able to resize, or access any information on, that window/tab.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efb363b832b0c1311b95ca8fe2e2b10276f30b55" translate="yes" xml:space="preserve">
          <source>The window.blur() method is the programmatic equivalent of the user shifting focus away from the current window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6cd62812c4618cba5b1d318a7bf5fc183ea1a1c" translate="yes" xml:space="preserve">
          <source>The words or patterns of words that we want the recognition service to recognize.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53cfbb58cb0931e10a7de6369e0e1781bf7355d1" translate="yes" xml:space="preserve">
          <source>The worker context is represented by a &lt;a href=&quot;../dedicatedworkerglobalscope&quot;&gt;&lt;code&gt;DedicatedWorkerGlobalScope&lt;/code&gt;&lt;/a&gt; object in the case of dedicated workers (standard workers that are utilized by a single script; shared workers use &lt;a href=&quot;../sharedworkerglobalscope&quot;&gt;&lt;code&gt;SharedWorkerGlobalScope&lt;/code&gt;&lt;/a&gt;). A dedicated worker is only accessible from the script that first spawned it, whereas shared workers can be accessed from multiple scripts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c58986abc431033dabd2188d6c00c6e6180c967" translate="yes" xml:space="preserve">
          <source>The worker sets the property &lt;code&gt;onmessage&lt;/code&gt; to a function which will receive messages sent when the worker object's &lt;code&gt;postMessage()&lt;/code&gt; is called (note that this differs from defining a global &lt;em&gt;variable&lt;/em&gt; of that name, or defining a &lt;em&gt;function&lt;/em&gt; with that name. &lt;code&gt;var onmessage&lt;/code&gt; and &lt;code&gt;function onmessage&lt;/code&gt; will define global properties with those names, but they will not register the function to receive messages sent by the web page that created the worker). This starts the recursion, spawning new copies of itself to handle each iteration of the calculation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaa72b71328af9d5bc04a2f7a2bf28988c8812cc" translate="yes" xml:space="preserve">
          <source>The worker thread is killed immediately without an opportunity to complete its operations or clean up after itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36d7debc01201c385d7b5b156e29c1e1ea8c599c" translate="yes" xml:space="preserve">
          <source>The worker's code is loaded from the file &lt;code&gt;&quot;worker.js&quot;&lt;/code&gt;. This code assumes that there's an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input&quot;&gt;&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;&lt;/a&gt; element represented by &lt;code&gt;first&lt;/code&gt;; an event handler for the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Change&quot;&gt;&lt;code&gt;change&lt;/code&gt;&lt;/a&gt; event is established so that when the user changes the value of &lt;code&gt;first&lt;/code&gt;, a message is posted to the worker to let it know.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeedd87293ce7496556af313b325153d6b47ee8d" translate="yes" xml:space="preserve">
          <source>The wrapper establishes a CSS grid with two columns and two rows. The first column (sized automatically based on its content) is used for the sidebar and the second column (which will be used for body content) is sized to be at least the width of the contents of the column and at most all remaining available space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42fe6ec365bb041b380312f61157044f10a4d867" translate="yes" xml:space="preserve">
          <source>The wrapper's width is fixed at 700px so that it will fit in the available space when presented inline on MDN below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d911913a6926f08758745fbb1c781a6b32e6e24" translate="yes" xml:space="preserve">
          <source>The writer&amp;rsquo;s lock is released.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cdf522270fb8fcf53df45448282e197ca022a9b" translate="yes" xml:space="preserve">
          <source>The x coordinate of the &lt;code&gt;DOMPoint&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="399695d426e21f1eae1b85eceea92c9deb812609" translate="yes" xml:space="preserve">
          <source>The x coordinate of the &lt;code&gt;DOMRect&lt;/code&gt;'s origin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0980a802f56661940381c8be1c865476926f21cc" translate="yes" xml:space="preserve">
          <source>The x coordinate of the reference point of the rectangle from which the &lt;code&gt;ImageBitmap&lt;/code&gt; will be extracted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="120c748b85282988780b2610b3af2b3cca0faab8" translate="yes" xml:space="preserve">
          <source>The x position of the listener in 3D space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdf6f984d09af8ac7a16fc06d73f65358913960b" translate="yes" xml:space="preserve">
          <source>The x position of the panner in 3D space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9c613339a0ca1e953f5dbd33e064372ff25f06b" translate="yes" xml:space="preserve">
          <source>The x value of the front vector of the listener.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7d819a41ca31213639d9dc9e498b59e0a94f599" translate="yes" xml:space="preserve">
          <source>The x value of the panner's direction vector in 3D space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c06d1ea172516eaa935104f9911153180859e151" translate="yes" xml:space="preserve">
          <source>The x value of the panner's velocity vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82df182d02a30cc8d5123e133893c86606c76b69" translate="yes" xml:space="preserve">
          <source>The x value of the up vector of the listener.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3cea14d18c729d3dce661a1020127fb1ce8d529" translate="yes" xml:space="preserve">
          <source>The x-axis (horizontal) coordinate of the arc's center.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="216075453a2c692eae370647a4fc0a7dd5043fdd" translate="yes" xml:space="preserve">
          <source>The x-axis (horizontal) coordinate of the ellipse's center.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6554a31a9cb26405ee300566cd88e0af396859df" translate="yes" xml:space="preserve">
          <source>The x-axis (horizontal) coordinate of the point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c008bba776b8dc4e0f25a1a241b797c3ad0893ec" translate="yes" xml:space="preserve">
          <source>The x-axis coordinate in the destination canvas at which to place the top-left corner of the source &lt;code&gt;image&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9a2e33d58c74c2cdcb6dcd02aff3c5ba005797c" translate="yes" xml:space="preserve">
          <source>The x-axis coordinate of the control point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fc9a75ae867c6ec391734cb233a97defd06f167" translate="yes" xml:space="preserve">
          <source>The x-axis coordinate of the end circle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9477d3b324b8d1530d87e0dd54f8f62dd42e7a80" translate="yes" xml:space="preserve">
          <source>The x-axis coordinate of the end point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64873eb29f4fb5e728f15528a80e6f145b16bdae" translate="yes" xml:space="preserve">
          <source>The x-axis coordinate of the first control point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a32f7bb9e3c99069a0a644b5b34359b4186bbbb0" translate="yes" xml:space="preserve">
          <source>The x-axis coordinate of the line's end point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1bacdf0e5d5185678263b251ce8b76ad9b39711" translate="yes" xml:space="preserve">
          <source>The x-axis coordinate of the point at which to begin drawing the text, in pixels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa073fbd4a60b458513f9a8a4b703e8aba07c18e" translate="yes" xml:space="preserve">
          <source>The x-axis coordinate of the point at which to begin drawing the text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5de31642cb67769578661a042fcb50980e2aab15" translate="yes" xml:space="preserve">
          <source>The x-axis coordinate of the point to check.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce162057c03994f32afc7b3ddbf5b566d46119ea" translate="yes" xml:space="preserve">
          <source>The x-axis coordinate of the rectangle's starting point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5103f0af750356e62c0dcd5682fed31d62ba4fa" translate="yes" xml:space="preserve">
          <source>The x-axis coordinate of the second control point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de44eb3f7c0eb37b7c18d099874dcb449c3064ca" translate="yes" xml:space="preserve">
          <source>The x-axis coordinate of the start circle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3917f01f034bc85f20a85a00820a7f86f778ba9e" translate="yes" xml:space="preserve">
          <source>The x-axis coordinate of the start point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44a3819ed1cfb2053ac3021665014e9660c832b3" translate="yes" xml:space="preserve">
          <source>The x-axis coordinate of the top left corner of the sub-rectangle of the source &lt;code&gt;image&lt;/code&gt; to draw into the destination context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e16baca9912f3b3cac4c4415d83c15da29a6b54f" translate="yes" xml:space="preserve">
          <source>The x-axis coordinate of the top-left corner of the rectangle from which the &lt;code&gt;ImageData&lt;/code&gt; will be extracted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d383ea9d3dc03d20b01031754581997ab38bedb3" translate="yes" xml:space="preserve">
          <source>The y coordinate of the &lt;code&gt;DOMPoint&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="470f37ffd3e83825d2111064516fc0046bb0d641" translate="yes" xml:space="preserve">
          <source>The y coordinate of the &lt;code&gt;DOMRect&lt;/code&gt;'s origin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0a74215e8b6989ceadf0e338feb62f0865674b1" translate="yes" xml:space="preserve">
          <source>The y coordinate of the reference point of the rectangle from which the &lt;code&gt;ImageBitmap&lt;/code&gt; will be extracted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fe8c922a0c9e43a1c29f02ad147762aa7d6c2b8" translate="yes" xml:space="preserve">
          <source>The y position of the listener in 3D space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19d68c8637a483f3bed4eceb240b17086b429619" translate="yes" xml:space="preserve">
          <source>The y position of the panner in 3D space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8798fcd5e93b6cbf348a96843d794eb440a2ce6" translate="yes" xml:space="preserve">
          <source>The y value of the front vector of the listener.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70326654060537e8207f6ac77c90fe64b3b5b2f3" translate="yes" xml:space="preserve">
          <source>The y value of the panner's direction vector in 3D space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="894f2fcdf4ac3bb021927fbbe637aef2052e03e7" translate="yes" xml:space="preserve">
          <source>The y value of the panner's velocity vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a79e2261e768ac66bf63d05acb9a4779ab91b9d8" translate="yes" xml:space="preserve">
          <source>The y value of the up vector of the listener.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="820482ba5c3b740aafef6b55e1b2375aaabfdf27" translate="yes" xml:space="preserve">
          <source>The y-axis (vertical) coordinate of the arc's center.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9ceb56253afb09513af7599c2f3221650a990c5" translate="yes" xml:space="preserve">
          <source>The y-axis (vertical) coordinate of the ellipse's center.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="803c2dced93c898ccc974e9dea91d8f6ed267feb" translate="yes" xml:space="preserve">
          <source>The y-axis (vertical) coordinate of the point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ea171ec82301103387cc995d2c072a5a4d718f5" translate="yes" xml:space="preserve">
          <source>The y-axis coordinate in the destination canvas at which to place the top-left corner of the source &lt;code&gt;image&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4937edd981670a6fcb09d41eb35fca385a28f965" translate="yes" xml:space="preserve">
          <source>The y-axis coordinate of the control point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfef6537f2ffa0634b116fa619aaa42bc29ede42" translate="yes" xml:space="preserve">
          <source>The y-axis coordinate of the end circle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db8e32b082c0aaee9eaa74e252647ce8061b58c8" translate="yes" xml:space="preserve">
          <source>The y-axis coordinate of the end point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d2445e09608ed4def6203bc7bcd7d9cfada3a22" translate="yes" xml:space="preserve">
          <source>The y-axis coordinate of the first control point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39b5c5742d1d5d71be6bcc4b1c3ea122b68c75c8" translate="yes" xml:space="preserve">
          <source>The y-axis coordinate of the line's end point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9d2fe755fde2a5bec8fd10456c5233dab3607ed" translate="yes" xml:space="preserve">
          <source>The y-axis coordinate of the point at which to begin drawing the text, in pixels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb86c5a68aba2901e75cd6a43df4dd456aa02c01" translate="yes" xml:space="preserve">
          <source>The y-axis coordinate of the point at which to begin drawing the text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fac6891c3008082370576d7ba431aa3f1958597" translate="yes" xml:space="preserve">
          <source>The y-axis coordinate of the point to check.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="163f0bcfdaa3813b04c6298b001408c33b1ff838" translate="yes" xml:space="preserve">
          <source>The y-axis coordinate of the rectangle's starting point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dea2c08cfc279c2d0db8c55b8655bc0a05c94c76" translate="yes" xml:space="preserve">
          <source>The y-axis coordinate of the second control point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d39db25e804d0129e8c91b385fd39fc379628bd4" translate="yes" xml:space="preserve">
          <source>The y-axis coordinate of the start circle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="247a688f76497ba1e99b4f37ba6ab8b4006231f6" translate="yes" xml:space="preserve">
          <source>The y-axis coordinate of the start point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3abb4e9c66d51879425109233e29694c23ce1cd3" translate="yes" xml:space="preserve">
          <source>The y-axis coordinate of the top left corner of the sub-rectangle of the source &lt;code&gt;image&lt;/code&gt; to draw into the destination context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d41cea0b3f7718935dbb1df8abf3d9e86ec3e229" translate="yes" xml:space="preserve">
          <source>The y-axis coordinate of the top-left corner of the rectangle from which the &lt;code&gt;ImageData&lt;/code&gt; will be extracted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ebc21c57a6f0afb51824c3e6c493a7c07eea541" translate="yes" xml:space="preserve">
          <source>The z coordinate of the &lt;code&gt;DOMPoint&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="057252692c83bc5fb15ae51d0cc8d91ca9943205" translate="yes" xml:space="preserve">
          <source>The z position of the listener in 3D space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68333ab83438f5744c3fa3f40d5106ba7855a02e" translate="yes" xml:space="preserve">
          <source>The z position of the panner in 3D space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2010c0d6625f998a0aedd3f87ba6b677e5e6e4d" translate="yes" xml:space="preserve">
          <source>The z value of the front vector of the listener.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="292730e2cfe203a5cce9a5707d85181c202a7ff3" translate="yes" xml:space="preserve">
          <source>The z value of the panner's direction vector in 3D space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1235dfd34153b1b83bfc944ce56e6b880ca9af12" translate="yes" xml:space="preserve">
          <source>The z value of the panner's velocity vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d58e10fafa809b11dc58fde14c15a96928c49d28" translate="yes" xml:space="preserve">
          <source>The z value of the up vector of the listener.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="270fe07c029a861554d060b4d964347083acea7f" translate="yes" xml:space="preserve">
          <source>The zero-based index number of the item in the drag data list to remove. If the &lt;code&gt;index&lt;/code&gt; doesn't correspond to an existing item in the list, the list is left unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f59f884d369979877e00824ab0a22e03b39f755" translate="yes" xml:space="preserve">
          <source>The zero-based index of the file to retrieve from the list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e74e0175787165a6cdbb7d60a49df65328a220ee" translate="yes" xml:space="preserve">
          <source>The zero-based index of the item in the drag data list to return.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3874fd5677c59cc537ee6cccee2d1842c33265c" translate="yes" xml:space="preserve">
          <source>The zero-based index of the m-line within the SDP of the media description with which the candidate is associated, or &lt;code&gt;null&lt;/code&gt; if no such associated exists. The default is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c699a0a26ca2d037830e720480377bbf419d3f84" translate="yes" xml:space="preserve">
          <source>The zero-based index of the range to return. A negative number or a number greater than or equal to &lt;a href=&quot;rangecount&quot;&gt;&lt;code&gt;Selection.rangeCount&lt;/code&gt;&lt;/a&gt; will result in an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a55c268a35d5097a000df87dbed236c666822606" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt; &lt;strong&gt;window.isSecureContext&lt;/strong&gt;&lt;/code&gt; read-only property indicates whether a context is capable of using features that require &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts&quot;&gt;secure contexts&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d999098e23a7c247bbd1ffb55a0fce5a0f197110" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/tonechange&quot;&gt;tonechange&lt;/a&gt;&lt;/code&gt; event is used both to indicate when an individual tone has played and when all tones have finished playing. The event's &lt;a href=&quot;../rtcdtmftonechangeevent/tone&quot;&gt;&lt;code&gt;tone&lt;/code&gt;&lt;/a&gt; property is a string indicating which tone just finished playing. If all tones have finished playing, &lt;code&gt;tone&lt;/code&gt; is an empty string; when that's the case, &lt;a href=&quot;../rtcdtmfsender/tonebuffer&quot;&gt;&lt;code&gt;RTCDTMFSender.toneBuffer&lt;/code&gt;&lt;/a&gt; is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="498e94a7cffca63784094a822e6fc0890b64a129" translate="yes" xml:space="preserve">
          <source>The&lt;code&gt;MouseEvent.buttons&lt;/code&gt; read-only property indicates which buttons are pressed on the mouse (or other input device) when the event is triggered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cc7506dd016d59015a903f64f3e5fb82f1b0046" translate="yes" xml:space="preserve">
          <source>The&lt;strong&gt; Media Capabilities API&lt;/strong&gt; allows developers to determine decoding and encoding abilities of the device, exposing information such as whether media is supported and whether playback should be smooth and power efficient, with real time feedback about playback to better enable adaptive streaming, and access to display property information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="463c21b44aa99ede7fcd44a5574bc529f2220884" translate="yes" xml:space="preserve">
          <source>Their novelty provides a new and unexploited opportunity for enterprising sites to reach potential customers. Has the customer switched tabs to answer an email? Win them back with an expiring offer of free shipping that they can&amp;rsquo;t ignore!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57b808f2b7dec9e5869597c4de1f5be8c479e01a" translate="yes" xml:space="preserve">
          <source>Then &quot;transmit&quot; the offer to the receiver by calling &lt;a href=&quot;../rtcpeerconnection/setremotedescription&quot;&gt;&lt;code&gt;receiverPC.setRemoteDescription()&lt;/code&gt;&lt;/a&gt;. This configures the receiver so that it knows how the caller is configured.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dd06fdc2970c1ebc1b1b25b179821b6e63a0df9" translate="yes" xml:space="preserve">
          <source>Then &lt;code&gt;addEventListener()&lt;/code&gt; is called to begin watching the &lt;code&gt;video&lt;/code&gt; element so that we obtain notification when the user presses the play button on the video. In response to the user beginning playback, this code fetches the width and height of the video, halving each (we will be halving the size of the video when we perform the chroma-keying effect), then calls the &lt;code&gt;timerCallback()&lt;/code&gt; method to start watching the video and computing the visual effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c309c0c2495ff9fd3616715981d50261f158ce08" translate="yes" xml:space="preserve">
          <source>Then a &lt;a href=&quot;paymentdetailsupdate&quot;&gt;&lt;code&gt;PaymentDetailsUpdate&lt;/code&gt;&lt;/a&gt; object is created with its &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/PaymentDetailsUpdate/error&quot;&gt;&lt;code&gt;error&lt;/code&gt;&lt;/a&gt; set to a generic message about address errors and with the reset of the object's values taken from &lt;code&gt;shippingAddressErrors&lt;/code&gt;, and, using &quot;&lt;code&gt;...defaultPaymentDetails&lt;/code&gt;&quot; as the final entry in the object, the remeainder of the properties' values are taken from &lt;code&gt;defaultPaymentDetails&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a7b2581be67a054a57aff440abc6e0171148db9" translate="yes" xml:space="preserve">
          <source>Then a new custom waveform is built using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createPeriodicWave&quot;&gt;&lt;code&gt;AudioContext.createPeriodicWave()&lt;/code&gt;&lt;/a&gt;. This waveform will be used any time the user selects &quot;Custom&quot; from the waveform picker control.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85092fca9e3988667a53576d6585fada443a85e4" translate="yes" xml:space="preserve">
          <source>Then a second &lt;code&gt;RTCPeerConnection&lt;/code&gt;, this one representing the receiving end of the call, is created and stored in &lt;code&gt;receiverPC&lt;/code&gt;; its &lt;code&gt;onicecandidate&lt;/code&gt; event handler is set up too.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a9b236bdde74c2827725c431b81ba5908de052c" translate="yes" xml:space="preserve">
          <source>Then add code to specify the texture to map onto the faces, just before draw:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69745cc86500dc905cd62eca31f6f7ca7a9e0642" translate="yes" xml:space="preserve">
          <source>Then come the event handlers. First, we prevent the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/dragover&quot;&gt;dragover&lt;/a&gt;&lt;/code&gt; event from being handled by the default handler, so that our drop zone can receive the drop:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3959aa02dca9340d7ed2d7fae0c98f7910492360" translate="yes" xml:space="preserve">
          <source>Then factoring out the scaleFactor, we get this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="309cef5b3533b8b58564f4b2e5c19214a1d1d74a" translate="yes" xml:space="preserve">
          <source>Then for both the incoming and outgoing &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video&quot;&gt;&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;&lt;/a&gt; elements, we remove their &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-src&quot;&gt;src&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-srcobject&quot;&gt;srcobject&lt;/a&gt;&lt;/code&gt; attributes using their &lt;a href=&quot;../element/removeattribute&quot;&gt;&lt;code&gt;removeAttribute()&lt;/code&gt;&lt;/a&gt; methods. This completes the disassociation of the streams from the video elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fab9350943d90b205ddfb3a55eccd2f3778e00c6" translate="yes" xml:space="preserve">
          <source>Then in &lt;code&gt;main()&lt;/code&gt; in place of the call to &lt;code&gt;loadTexture()&lt;/code&gt; in the previous example, we call &lt;code&gt;initTexture&lt;/code&gt;&lt;code&gt;()&lt;/code&gt; followed by &lt;code&gt;setupVideo()&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86511ae8b61858331343852df9b290f2ba5d94da" translate="yes" xml:space="preserve">
          <source>Then include a click event listener on the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; element:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c69e4554edc0d1b778b465e505f9f45d518adcb" translate="yes" xml:space="preserve">
          <source>Then it calls the &lt;code&gt;computeFrame()&lt;/code&gt; method, which performs the chroma-keying effect on the current video frame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0102849120b2cf5c4767ba335e22ccae43f41a4" translate="yes" xml:space="preserve">
          <source>Then move the last column's 1 up one space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15773a0ebb798d5acc04978f0802f724e5ce06b6" translate="yes" xml:space="preserve">
          <source>Then take that offer and set the caller's local description to match by calling &lt;a href=&quot;../rtcpeerconnection/setlocaldescription&quot;&gt;&lt;code&gt;callerPC.setLocalDescription()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c53f9679b33a623d07c987291a7f7cbf542a7b19" translate="yes" xml:space="preserve">
          <source>Then the answer is &quot;transmitted&quot; to the caller by calling &lt;a href=&quot;../rtcpeerconnection/setremotedescription&quot;&gt;&lt;code&gt;callerPC.setRemoteDescription()&lt;/code&gt;&lt;/a&gt;. This lets the caller know what the receiver's configuration is.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3c2b8d476927d3a8ff77b4d79dcee846676d62b" translate="yes" xml:space="preserve">
          <source>Then the current rotation angle (in degrees) is set to 0.0, since we haven't performed any rotation yet, and the rotation speed (in degrees per screen refresh period, typically 60 FPS) is set to 6.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61fee238b5bc6fb76aa43e975e21ab4281587d08" translate="yes" xml:space="preserve">
          <source>Then the download button's &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-download&quot;&gt;download&lt;/a&gt;&lt;/code&gt; attribute is set. While the &lt;code&gt;download&lt;/code&gt; attribute can be a Boolean, you can also set it to a string to use as the name for the downloaded file. So by setting the download link's &lt;code&gt;download&lt;/code&gt; attribute to &quot;RecordedVideo.webm&quot;, we tell the browser that clicking the button should download a file named &lt;code&gt;&quot;RecordedVideo.webm&quot;&lt;/code&gt; whose contents are the recorded video.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82ed27018ac26c6ef564b8d1352bdcd7417d3ad9" translate="yes" xml:space="preserve">
          <source>Then the event's &lt;a href=&quot;../event/preventdefault&quot;&gt;&lt;code&gt;preventDefault()&lt;/code&gt;&lt;/a&gt; method is called to ensure that the &lt;code&gt;mousedown&lt;/code&gt; event isn't triggered, potentially causing events to be handled twice if we had a handler for those events in case Pointer Event support is missing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5101503a39524d5201514bc0a40a02d19068c32" translate="yes" xml:space="preserve">
          <source>Then the final position is computed by multiplying the rotated position by the scaling vector provided by the JavaScript code in &lt;code&gt;uScalingFactor&lt;/code&gt;. The values of &lt;code&gt;z&lt;/code&gt; and &lt;code&gt;w&lt;/code&gt; are fixed at 0.0 and 1.0, respectively, since we're drawing in 2D.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="489f3243b29add7da7b362b6797ccbc945dd346a" translate="yes" xml:space="preserve">
          <source>Then the observer is instantiated, specifying the &lt;code&gt;callback()&lt;/code&gt; function, and we begin observing the DOM nodes of interest by calling &lt;code&gt;observe()&lt;/code&gt;, specifying that target node and the options record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0caf40faa986f0c437944e0fd6f6a4e5e0da832f" translate="yes" xml:space="preserve">
          <source>Then the receiver creates an answer by calling &lt;a href=&quot;../rtcpeerconnection/createanswer&quot;&gt;&lt;code&gt;receiverPC.createAnswer()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e5b0cf31bc70b35149aa12d39fc4b97a3255bda" translate="yes" xml:space="preserve">
          <source>Then the receiver sets its local description to match the newly-created answer by calling &lt;a href=&quot;../rtcpeerconnection/setlocaldescription&quot;&gt;&lt;code&gt;receiverPC.setLocalDescription()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5473746ce673e7baa73ecfddee64295800b5d335" translate="yes" xml:space="preserve">
          <source>Then the three uniforms' values are set:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c80b0a67a7898df51e7c295adf3db5e4a45c982b" translate="yes" xml:space="preserve">
          <source>Then the vertex buffer is bound to the &lt;code&gt;aVertexPosition&lt;/code&gt; attribute by calling &lt;a href=&quot;../webglrenderingcontext/vertexattribpointer&quot;&gt;&lt;code&gt;vertexAttribPointer()&lt;/code&gt;&lt;/a&gt;. This step is not obvious, since this binding is almost a side effect. But as a result, accessing &lt;code&gt;aVertexPosition&lt;/code&gt; now obtains data from the vertex buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="765e109c1099bb2060bf75ffd90d781d82b07ea7" translate="yes" xml:space="preserve">
          <source>Then the vertex buffer is bound to the &lt;code&gt;aVertexPosition&lt;/code&gt; attribute by calling &lt;a href=&quot;vertexattribpointer&quot;&gt;&lt;code&gt;vertexAttribPointer()&lt;/code&gt;&lt;/a&gt;. This step is not obvious, since this binding is almost a side effect. But as a result, accessing &lt;code&gt;aVertexPosition&lt;/code&gt; now obtains data from the vertex buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f3d8db13ab0d44e7a01c1ce70161c5ce7dc4ff8" translate="yes" xml:space="preserve">
          <source>Then the vertex shader uses the 4 dimensional point passed in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="207e7c5a834e7b180fd70a1e23609ec4e48c3e6e" translate="yes" xml:space="preserve">
          <source>Then there's a box which contains the text input box into which the user can type a message to transmit, with a button to send the entered text. This &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div&quot;&gt;&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;&lt;/a&gt; will be the first peer in the channel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c35e7b9b5b39cc9e76afabefe87aff1b39f93911" translate="yes" xml:space="preserve">
          <source>Then there's the roll-off factor (&lt;a href=&quot;../pannernode/rollofffactor&quot;&gt;&lt;code&gt;rolloffFactor&lt;/code&gt;&lt;/a&gt;) &amp;mdash; how quickly does the volume reduce as the panner moves away from the listener. The default value is 1; let's make that a bit bigger to exaggerate our movements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f665dc614e4c9f51e068cd53442d2cb74852d50" translate="yes" xml:space="preserve">
          <source>Then we add a method to handle toggle &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/display&quot;&gt;&lt;code&gt;display&lt;/code&gt;&lt;/a&gt; between &lt;code&gt;&quot;&lt;/code&gt;&lt;code&gt;flex&quot;&lt;/code&gt; and &lt;code&gt;&quot;&lt;/code&gt;&lt;code&gt;none&quot;&lt;/code&gt; and establish it as the handler for a &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/click&quot;&gt;click&lt;/a&gt;&lt;/code&gt; event on the &quot;Hide/Show&quot; the Box button:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65636735405d32d70871a5f657a94b22d25e4035" translate="yes" xml:space="preserve">
          <source>Then we add the code to &lt;code&gt;drawScene()&lt;/code&gt; to bind the normals array to a shader attribute so the shader code can get access to it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c19e0c05a9d5609a16a2189d554f7d2770a70797" translate="yes" xml:space="preserve">
          <source>Then we add the methods of adding/removing listeners:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f8fbf0ee115966420ae3a05c1390c26716298b4" translate="yes" xml:space="preserve">
          <source>Then we assign a handler for the play button's &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/click&quot;&gt;click&lt;/a&gt;&lt;/code&gt; event (see &lt;a href=&quot;#Toggling_the_oscillators_on_and_off&quot;&gt;Toggling the oscillators on and off&lt;/a&gt; for more on the &lt;code&gt;togglePlay()&lt;/code&gt; method), and for the volume slider's &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/input&quot;&gt;input&lt;/a&gt;&lt;/code&gt; event (see &lt;a href=&quot;#Controlling_the_linked_oscillators&quot;&gt;Controlling the linked oscillators&lt;/a&gt; to see the very short &lt;code&gt;changeVolume()&lt;/code&gt; method).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="387e66dd98a36d4a08f9f45b48c6ba7085709e8b" translate="yes" xml:space="preserve">
          <source>Then we call &lt;a href=&quot;windoworworkerglobalscope/settimeout&quot;&gt;&lt;code&gt;setTimeout()&lt;/code&gt;&lt;/a&gt;, passing into it a function which runs the callback passed into our implementation of &lt;code&gt;requestIdleCallback()&lt;/code&gt;. The callback is passed an object which conforms to &lt;a href=&quot;idledeadline&quot;&gt;&lt;code&gt;IdleDeadline&lt;/code&gt;&lt;/a&gt;, with &lt;a href=&quot;idledeadline/didtimeout&quot;&gt;&lt;code&gt;didTimeout&lt;/code&gt;&lt;/a&gt; set to &lt;code&gt;false&lt;/code&gt; and a&lt;a href=&quot;idledeadline/timeremaining&quot;&gt;&lt;code&gt;timeRemaining()&lt;/code&gt;&lt;/a&gt; method which is implemented to give the callback 50 milliseconds of time to begin with. Each time &lt;code&gt;timeRemaining()&lt;/code&gt; is called, it subtracts the elapsed time from the original 50 milliseconds to determine the amount of time left.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63045e64e686a4cbd840811c2045d7f9559512fc" translate="yes" xml:space="preserve">
          <source>Then we copy the name of the user we're calling into the variable &lt;code&gt;targetUsername&lt;/code&gt; and call &lt;code&gt;createPeerConnection()&lt;/code&gt;, a function which will create and do basic configuration of the &lt;a href=&quot;../rtcpeerconnection&quot;&gt;&lt;code&gt;RTCPeerConnection&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04e4fcb62703348e530022cce58ec44304ab1aa0" translate="yes" xml:space="preserve">
          <source>Then we define several variables:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e05cdd056dadd6f339e8c0f583ea1fb35bb1023" translate="yes" xml:space="preserve">
          <source>Then we establish the position of the square plane by loading the identity position and translating away from the camera by 6 units. After that, we bind the square's vertex buffer to the attribute the shader is using for &lt;code&gt;aVertexPosition&lt;/code&gt; and we tell WebGL how to pull the data out of it. Finally we draw the object by calling the &lt;a href=&quot;../../webglrenderingcontext/drawarrays&quot;&gt;&lt;code&gt;drawArrays()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78913e4f77f13493b985b5b096e7e2d3949f9dcc" translate="yes" xml:space="preserve">
          <source>Then we get the type of waveform to use by checking the value of the waveform picker control in the settings bar. If the user has it set to &lt;code&gt;&quot;custom&quot;&lt;/code&gt;, we call &lt;a href=&quot;../oscillatornode/setperiodicwave&quot;&gt;&lt;code&gt;OscillatorNode.setPeriodicWave()&lt;/code&gt;&lt;/a&gt; to configure the oscillator to use our custom waveform. Doing this automatically sets the oscillator's &lt;a href=&quot;../oscillatornode/type&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;custom&lt;/code&gt;. If any other waveform type is selected in the wave picker, we simply set the oscillator's type to the value of the picker; that value will be one of &lt;code&gt;sine&lt;/code&gt;, &lt;code&gt;square&lt;/code&gt;, &lt;code&gt;triangle&lt;/code&gt;, and &lt;code&gt;sawtooth&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c977e25d7ed6c243ad2e2cad106254fe29779a1" translate="yes" xml:space="preserve">
          <source>Then we hide the actual checkbox, because we don't want it cluttering up our UI:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca5f040065d7b403c3b4650fd65c8d821e8ec116" translate="yes" xml:space="preserve">
          <source>Then we initialize the variables which will hold the &lt;a href=&quot;../mediatrackconstraints&quot;&gt;&lt;code&gt;MediaTrackConstraints&lt;/code&gt;&lt;/a&gt; objects for the video and audio tracks, as well as the variables which will hold references to the video and audio tracks themselves, to &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5c0d560c7733c5f68e61fcedd924311eb24ce52" translate="yes" xml:space="preserve">
          <source>Then we iterate over the array of user names using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt;&lt;code&gt;forEach()&lt;/code&gt;&lt;/a&gt;. For each name, we create a new &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li&quot;&gt;&lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;&lt;/a&gt; element, then create a new text node containing the user name using &lt;a href=&quot;../document/createtextnode&quot;&gt;&lt;code&gt;createTextNode()&lt;/code&gt;&lt;/a&gt;. That text node is added as a child of the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element. Next, we set a handler for the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/click&quot;&gt;click&lt;/a&gt;&lt;/code&gt; event on the list item, that clicking on a user name calls our &lt;code&gt;invite()&lt;/code&gt; method, which we'll look at in the next section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e6484c76bd8e4a781639c2e2f7594a817968f53" translate="yes" xml:space="preserve">
          <source>Then we iterate over the items in the list of dropped items. For each one, we call its &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem/webkitGetAsEntry&quot;&gt;&lt;code&gt;webkitGetAsEntry()&lt;/code&gt;&lt;/a&gt; method to obtain a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry&quot;&gt;&lt;code&gt;FileSystemEntry&lt;/code&gt;&lt;/a&gt; representing the file. If that's successful, we call &lt;code&gt;scanFiles()&lt;/code&gt; to process the item&amp;mdash;either by adding it to the list if it's just a file or by adding it and walking down into it if it's a directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fa678caeaf8d8098cfaf0d90e77c6ddd6d3b836" translate="yes" xml:space="preserve">
          <source>Then we load a new ad by calling &lt;code&gt;&lt;a href=&quot;#Creating_an_ad&quot;&gt;loadRandomAd()&lt;/a&gt;&lt;/code&gt;, specifying the ad to be replaced as an input parameter. As we saw previously, &lt;code&gt;loadRandomAd()&lt;/code&gt; will replace an existing ad with content and data corresponding to a new ad, if you specify an existing ad's element as an input parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aab9feff38d88a71e4c7eadeb706c569fe794f63" translate="yes" xml:space="preserve">
          <source>Then we run a simple &lt;code&gt;spawnNotification()&lt;/code&gt; function when we want to fire a notification &amp;mdash; this is passed arguments to specify the body, icon, and title we want. Then it creates the necessary &lt;code&gt;options&lt;/code&gt; object and fires the notification using the &lt;a href=&quot;notification/notification&quot;&gt;&lt;code&gt;Notification()&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c341f3c48f42e66500ba5843dfb7cdee35f6eb1" translate="yes" xml:space="preserve">
          <source>Then we set up a promise which resolves when the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/onloadedmetadata&quot;&gt;onloadedmetadata&lt;/a&gt;&lt;/code&gt; event occurs on the video element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a66016707b10ed23ac1bbd3b14d25050088a377c" translate="yes" xml:space="preserve">
          <source>Then we set up the &lt;code&gt;handleCancelEvent()&lt;/code&gt; function, which is called in response to the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/animationcancel&quot;&gt;animationcancel&lt;/a&gt;&lt;/code&gt; event, as set up in the HTML above. All we do here is log information to the console, but you might find other use cases, such as starting a new animation or effect, or terminating some dependent operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11b4d5f5e9775278a440bf0d6eb6f38002042e5c" translate="yes" xml:space="preserve">
          <source>Then we set up the event handlers for the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/animationstart&quot;&gt;animationstart&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/animationend&quot;&gt;animationend&lt;/a&gt;&lt;/code&gt; events:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0735d8dd98e3e3e9882f8a98c4817ab28ccbc2a0" translate="yes" xml:space="preserve">
          <source>Then we set up the handler for the stop button.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="604a1e31d8468b9f6570da59a0a95fb60b4800eb" translate="yes" xml:space="preserve">
          <source>Then we start a loop to create the actual tasks. For each task, we create an object, &lt;code&gt;taskData&lt;/code&gt;, which includes two properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1403c2466d0224f613b0b7e4cac8f04d0610edd2" translate="yes" xml:space="preserve">
          <source>Then we update the vertex shader to adjust the color of each vertex, taking into account the ambient lighting as well as the effect of the directional lighting given the angle at which it's striking the face. We'll see how to do that when we look at the code for the shader.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a66f5af2ceb219d741249c19b08e92d05407465d" translate="yes" xml:space="preserve">
          <source>Then we use this as the event handler for a number of mouse events on the box that contains our log:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="108dd2a5c9a6aeedc15352c26867944d0b76d5ce" translate="yes" xml:space="preserve">
          <source>Then we'll create variables to define how far ahead we want to look, and how far ahead we want to schedule:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f402618c1ac3776c6527644fccad2af35bbc747" translate="yes" xml:space="preserve">
          <source>Then you can send it using code like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09685dce7684213f479cedfeedca00aa1f34511d" translate="yes" xml:space="preserve">
          <source>Then you use &lt;a href=&quot;../../canvasrenderingcontext2d#Paths&quot;&gt;drawing commands&lt;/a&gt; to draw into the path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71259e35f23602729e8a24a7846902a219139a4e" translate="yes" xml:space="preserve">
          <source>Then, drawScene() can be revised to actually use these colors when drawing the square:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a11e7fbe5bfb6db8b29dec6c7f9587e130492e5" translate="yes" xml:space="preserve">
          <source>Then, finally, each &lt;code&gt;RTCPeerConnection&lt;/code&gt; is closed by calling its &lt;a href=&quot;../rtcpeerconnection/close&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a51a2e891e28207e198c64fd8e8f61c87610ecc" translate="yes" xml:space="preserve">
          <source>Then, for each of the visible ads, we save the value of &lt;code&gt;dataset.totalViewTime&lt;/code&gt; (the total number of milliseconds the ad has currently been visible, as of the last time it was updated) and then call &lt;code&gt;updateAdTimer()&lt;/code&gt; to update the time. If it's changed, then we push the ad onto the &lt;code&gt;redrawList&lt;/code&gt; so we know it needs to be updated during the next animation frame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35e1939a4d46737dbf396926fe1876fba57646f0" translate="yes" xml:space="preserve">
          <source>Then, for each shader in the specified list of shaders, we call a &lt;code&gt;compileShader()&lt;/code&gt; function to compile it, passing into it the ID and type of the shader function to build. Each of those objects includes, as mentioned before, the ID of the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; element the shader code is found in and the type of shader it is. The compiled shader is attached to the shader program by passing it into &lt;a href=&quot;../webglrenderingcontext/attachshader&quot;&gt;&lt;code&gt;gl.attachShader()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6df3268da39c20a4cabf189c0c5da2e70c06abf" translate="yes" xml:space="preserve">
          <source>Then, if the width and height are both non-zero (meaning that there's at least potentially valid image data), we set the width and height of the canvas to match that of the captured frame, then call &lt;a href=&quot;../canvasrenderingcontext2d/drawimage&quot;&gt;&lt;code&gt;drawImage()&lt;/code&gt;&lt;/a&gt; to draw the current frame of the video into the context, filling the entire canvas with the frame image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72c780a88e61271aa004b3b314b195840f42d571" translate="yes" xml:space="preserve">
          <source>Then, if there's text waiting to be added to the log (that is, if &lt;code&gt;logFragment&lt;/code&gt; isn't &lt;code&gt;null&lt;/code&gt;), we append it to the log element using &lt;a href=&quot;node/appendchild&quot;&gt;&lt;code&gt;Element.appendChild()&lt;/code&gt;&lt;/a&gt; and set &lt;code&gt;logFragment&lt;/code&gt; to &lt;code&gt;null&lt;/code&gt; so we don't add it again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d24b070c8c4ea03202b24bd6b5ffe5ce64011b78" translate="yes" xml:space="preserve">
          <source>Then, we specify the memory layout of the array buffer, either by setting the index ourselves:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2380803b7341195c89f52e8ee28d858d6f6dcd2" translate="yes" xml:space="preserve">
          <source>Then, when you want to create an actual event listener that uses the options in question, you can do something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f00097a2997c3a92be7ab03028702730bc13eb0d" translate="yes" xml:space="preserve">
          <source>There also is the &lt;a href=&quot;range/range&quot;&gt;&lt;code&gt;Range()&lt;/code&gt;&lt;/a&gt; constructor available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00a3e42d0c4c00462f325126c594f81877ecf3b5" translate="yes" xml:space="preserve">
          <source>There are 3 ways to register event handlers for a DOM element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b8d850477653d483a6766cc99537595f8e63068" translate="yes" xml:space="preserve">
          <source>There are a myriad of video and audio codecs. Different browsers support different media types and new media types are always being developed. With the Media Capabilities API, developers can ensure each user is getting the best bitrate and storage savings for their browser, device, and OS capabilities.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1931e678d678ba2fc610140e2d6f32ea111b3b14" translate="yes" xml:space="preserve">
          <source>There are a number of additional events you can set listeners for which notifying your code of a variety of state changes. We use three of them: &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/iceconnectionstatechange&quot;&gt;iceconnectionstatechange&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/icegatheringstatechange&quot;&gt;icegatheringstatechange&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/signalingstatechange&quot;&gt;signalingstatechange&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89717d276f982e422b611c64e6faae73b1c4f99a" translate="yes" xml:space="preserve">
          <source>There are a number of other convenience methods belonging to the &lt;a href=&quot;../htmltableelement#Methods&quot;&gt;table interface&lt;/a&gt; that can be used for creating and modifying tables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22574341e25eaafcc3aa29306a7e17f7ba405e94" translate="yes" xml:space="preserve">
          <source>There are a number of reasons why a timeout may take longer to fire than anticipated. This section describes the most common reasons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad25db404365aac6ca42c02f76f58299c62e11a5" translate="yes" xml:space="preserve">
          <source>There are a number of small differences between the terminology used in CSS Animations and the terminology used in Web Animations. For instance, Web Animations doesn't use the string &lt;code&gt;&quot;infinite&quot;&lt;/code&gt;, but instead uses the JavaScript keyword &lt;code&gt;Infinity&lt;/code&gt;. And instead of &lt;code&gt;timing-function&lt;/code&gt; we use &lt;code&gt;easing&lt;/code&gt;. We aren&amp;rsquo;t listing an &lt;code&gt;easing&lt;/code&gt; value here because, unlike CSS Animations where the default &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function&quot;&gt;animation-timing-function&lt;/a&gt; is &lt;code&gt;ease&lt;/code&gt;, in the Web Animations API the default easing is &lt;code&gt;linear&lt;/code&gt; &amp;mdash; which is what we want here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8144c31e121c950c378250d01bb0d00bd63af0b1" translate="yes" xml:space="preserve">
          <source>There are a number of tags, such as &lt;code&gt;&amp;lt;bold&amp;gt;&lt;/code&gt;, that can be used. However, if the WebVTT file is used in a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track&quot;&gt;&lt;code&gt;&amp;lt;track&amp;gt;&lt;/code&gt;&lt;/a&gt; element where the attribute &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-kind&quot;&gt;kind&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;chapters&lt;/code&gt; then you cannot use tags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e5954040494bc061b63a97829220164590fd742" translate="yes" xml:space="preserve">
          <source>There are a number of web technologies that store data of one kind or another on the client side (i.e. on your local disk). IndexedDB is the most commonly talked about one. The process by which the browser works out how much space to allocate to web data storage and what to delete when that limit is reached is not simple, and differs between browsers. &lt;a href=&quot;indexeddb_api/browser_storage_limits_and_eviction_criteria&quot;&gt;Browser storage limits and eviction criteria&lt;/a&gt; attempts to explain how this works, at least in the case of Firefox.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bf1d296282c261a212324cd21e256ba8c09d075" translate="yes" xml:space="preserve">
          <source>There are a number of web technologies that store data of one kind or another on the client-side (i.e., on your local disk). The process by which the browser works out how much space to allocate to web data storage and what to delete when that limit is reached is not simple, and differs between browsers. This article describes how browsers determine what local content to purge and when in order to free up needed local storage space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94a7efe591dcd23f6d4c64e8090e24d8c22b5142" translate="yes" xml:space="preserve">
          <source>There are a series of methods available in the &lt;a href=&quot;../mediarecorder&quot;&gt;&lt;code&gt;MediaRecorder&lt;/code&gt;&lt;/a&gt; interface that allow you to control recording of the media stream; in Web Dictaphone we just make use of two, and listen to some events. First of all, &lt;a href=&quot;../mediarecorder/start&quot;&gt;&lt;code&gt;MediaRecorder.start()&lt;/code&gt;&lt;/a&gt; is used to start recording the stream once the record button is pressed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ce68cf04ecfe9f502e28d9e9c92412d25939900" translate="yes" xml:space="preserve">
          <source>There are a several exceptions which can occur when you attempt to change an index's name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed02c1cefa1ec48600687d90fb6239b2cc8addfc" translate="yes" xml:space="preserve">
          <source>There are a several exceptions which can occur when you attempt to change an object store's name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7cd4c1e4d12654f58b17c7a2bf08ed0ab9fce9e" translate="yes" xml:space="preserve">
          <source>There are a variety of demos and further explanations about canvas on these sites:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="692ea6c982466d27e8fae0cac66f6b904c8f3a64" translate="yes" xml:space="preserve">
          <source>There are also Gecko-Specific &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events&quot;&gt;DOM Events&lt;/a&gt; like &lt;code&gt;DOMContentLoaded&lt;/code&gt; and &lt;code&gt;DOMFrameContentLoaded&lt;/code&gt; (which can be handled using &lt;a href=&quot;../eventtarget/addeventlistener&quot;&gt;&lt;code&gt;EventTarget.addEventListener()&lt;/code&gt;&lt;/a&gt;) which are fired after the DOM for the page has been constructed, but do not wait for other resources to finish loading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e5a8ff61bcfbd8c4c9549993dd0c5096a99e5af" translate="yes" xml:space="preserve">
          <source>There are cases in which you may want to add a file to an existing drag event session, and you may also want to write the file to disk when the drop operation happens over a folder in the operating system when your code receives notification of the target folder's location. This only works in extensions (or other privileged code) and the data type &quot;application/moz-file-promise&quot; should be used. The following sample offers an overview of this advanced case:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68322449fcdf309003ef428b2a57e3aa27c57ed1" translate="yes" xml:space="preserve">
          <source>There are few steps that can be followed to write a simple webVTT file. Before start, it must be noted that you can make use of a notepad and then save the file as &amp;lsquo;.vtt&amp;rsquo; file. Steps are given below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4e16b41d396e4ff1f8bbbd42b27c140f721dcd9" translate="yes" xml:space="preserve">
          <source>There are four different sounds, or voices, which can be played. Each voice has four buttons, which represent four beats in one bar of music. When they are enabled the note will sound. When the instrument plays, it will move across this set of beats and loop the bar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6260e8ae6416b69d3bade48189d8fe2236aad51c" translate="yes" xml:space="preserve">
          <source>There are four main ways to load sound with the Web Audio API and it can be a little confusing as to which one you should use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c20dde9b1d72fffc7b03d389a257b75fcdaacae" translate="yes" xml:space="preserve">
          <source>There are many APIs which provide ways for Web content to store data on a user's computer, including &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/cookies&quot;&gt;cookies&lt;/a&gt;, the Web Storage API (&lt;a href=&quot;window/localstorage&quot;&gt;&lt;code&gt;Window.localStorage&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;window/sessionstorage&quot;&gt;&lt;code&gt;Window.sessionStorage&lt;/code&gt;&lt;/a&gt;), and &lt;a href=&quot;indexeddb_api&quot;&gt;IndexedDB&lt;/a&gt;. The Storage Standard is designed to serve as a common basis for the implementation of all of those APIs and storage technologies, so that their constraints and configurations can be understood and controlled using a common set of methods and properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d588489c98f52256af7d16f39154311e0b1e0b95" translate="yes" xml:space="preserve">
          <source>There are many reasons why calls may end. A call might have completed, with one or both sides having hung up. Perhaps a network failure has occurred, or one user might have quit their browser, or had a system crash. In any case, all good things must come to an end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16d576127d96fa8def05cbfe0085e7e1086b5010" translate="yes" xml:space="preserve">
          <source>There are many types of matrices, but the ones we are interested in are the 3D transformation matrices. These matrices consist of a set of 16 values arranged in a 4x4 grid. In JavaScript, it is easy to represent a matrix as an array. The typical starting point is to show the identity matrix. When this matrix is multiplied against another point or matrix then the result will be identical.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59ea919ed600d5c9b30e772f7cb93629315c1991" translate="yes" xml:space="preserve">
          <source>There are more advantages too &amp;mdash; you can detect when streams start or end, chain streams together, handle errors and cancel streams as required, and react to the speed the stream is being read at.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9d0d5268d4f571ea7d2bbd0bd953afc1fa56dbd" translate="yes" xml:space="preserve">
          <source>There are multiple properties in the CSSOM that will return a &lt;code&gt;CSSRuleList&lt;/code&gt;. They are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5111fa0e194dd742756bc923d13848c78ef810ae" translate="yes" xml:space="preserve">
          <source>There are no &lt;code&gt;2x2&lt;/code&gt;, &lt;code&gt;3x3&lt;/code&gt;, and &lt;code&gt;4x4&lt;/code&gt; versions of this method. They are abbreviated in &lt;code&gt;2&lt;/code&gt;, &lt;code&gt;3&lt;/code&gt;, and &lt;code&gt;4&lt;/code&gt;, respectively. See the syntax below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a61e6e0de8f55794c39c18b20c0307a07bd630a" translate="yes" xml:space="preserve">
          <source>There are no object of this type, but several interface are implemented it, like &lt;a href=&quot;workerlocation&quot;&gt;&lt;code&gt;WorkerLocation&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="359ce73d9363164551ed8ba8e9f3c9a0e18dbffd" translate="yes" xml:space="preserve">
          <source>There are no objects of this type, but several objects &lt;a href=&quot;htmlanchorelement&quot;&gt;&lt;code&gt;HTMLAnchorElement&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;htmlareaelement&quot;&gt;&lt;code&gt;HTMLAreaElement&lt;/code&gt;&lt;/a&gt; implement it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44d970cfa63ed88f417d531f2fc799f4a0114c41" translate="yes" xml:space="preserve">
          <source>There are now &lt;a href=&quot;https://addons.mozilla.org/seamonkey/browse/type:1/cat:48/sort:updated&quot;&gt;several Mozilla extensions&lt;/a&gt; (like Multizilla) and &lt;a href=&quot;https://addons.update.mozilla.org/firefox/browse/type:1/cat:14/sort:updated&quot;&gt;Firefox extensions&lt;/a&gt; (like &lt;a href=&quot;https://addons.mozilla.org/firefox/addon/158&quot;&gt;Tabbrowser preferences&lt;/a&gt;), features, settings and advanced preferences based on tab-browsing and based on converting window.open() calls into opening tabs, based on neutralizing window.open() calls, in particular in neutralizing unrequested openings of new windows (often referred as blocking unrequested popups or as blocking script-initiated windows opening automatically). Such features found in extensions include opening a link in a new window or not, in the same window, in a new tab or not, in &quot;background&quot; or not. Coding carelessly to open new windows can no longer be assured of success, can not succeed by force and, if it does, it will annoy a majority of users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a6aff8ecb8050b47f943057e1663211aaebfa19" translate="yes" xml:space="preserve">
          <source>There are numerous available free and open source tools for transcoding content and preparing it for use with DASH, DASH file servers, and DASH client libraries written in JavaScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1545017aa57829338fb46e792580222648e8b6c9" translate="yes" xml:space="preserve">
          <source>There are only two more lines of code in the &lt;code&gt;startup()&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6ba5455e43cd22b03a476f7f9eb781e9945b7d1" translate="yes" xml:space="preserve">
          <source>There are other examples available to learn more about the Web Audio API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a69ffb49cfc0479793e0ff1f560bcaa33d4fb4d4" translate="yes" xml:space="preserve">
          <source>There are other techniques used to ensure that data is submitted. One such technique is to delay the unload to submit data by creating an Image element and setting its &lt;code&gt;src&lt;/code&gt; attribute within the unload handler. As most user agents will delay the unload to complete the pending image load, data can be submitted during the unload. Another technique is to create a no-op loop for several seconds within the unload handler to delay the unload and submit data to a server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc2a72228882c9130903a2502017ede25275949f" translate="yes" xml:space="preserve">
          <source>There are other workaround techniques which have been used to ensure that this kind of data is submitted. One such technique is to delay the unload in order to submit data by creating an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&lt;/a&gt; element and setting its &lt;code&gt;src&lt;/code&gt; attribute within the unload handler. As most user agents will delay the unload to complete the pending image load, data can be submitted during the unload. Another technique is to create a no-op loop for several seconds within the unload handler to delay the unload and submit data to a server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfe3576f13f4523b73d03efd0070bfb604609443" translate="yes" xml:space="preserve">
          <source>There are several fallback scripts listed on &lt;a href=&quot;https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills&quot;&gt;this page&lt;/a&gt;. Basically those scripts check the location.hash at a regular interval. Here is a version that allows only one handler to be bound to the &amp;lt;code&amp;gt;window.onhashchange&amp;lt;/code&amp;gt; property:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a8687719d2bd4c6b957cc60b245486e1a985278" translate="yes" xml:space="preserve">
          <source>There are several properties which allow us to style lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="949906d598ccc58803e0af38c65a43af54def8e7" translate="yes" xml:space="preserve">
          <source>There are several properties you can look at in order to determine the width and height of elements, and it can be tricky to determine which is the right one for your needs. This article is designed to help you make that decision. Note that all these properties are read-only. If you want to set the width and height of an element, use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/width&quot;&gt;&lt;code&gt;width&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/height&quot;&gt;&lt;code&gt;height&lt;/code&gt;&lt;/a&gt; or the overriding &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/min-width&quot;&gt;&lt;code&gt;min-width&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/max-width&quot;&gt;&lt;code&gt;max-width&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/min-height&quot;&gt;&lt;code&gt;min-height&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/max-height&quot;&gt;&lt;code&gt;max-height&lt;/code&gt;&lt;/a&gt; properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2358cb4677e5ed2c92c690c24b5ea7b2829c0ae3" translate="yes" xml:space="preserve">
          <source>There are several steps here:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f633a9a7bf7e1cc5507528d69c49db68fbca1ac9" translate="yes" xml:space="preserve">
          <source>There are several types of &lt;a href=&quot;https://xhr.spec.whatwg.org/&quot;&gt;response attributes&lt;/a&gt; defined by the living standard specification for the &lt;a href=&quot;xmlhttprequest&quot;&gt;&lt;code&gt;XMLHttpRequest()&lt;/code&gt;&lt;/a&gt; constructor. These tell the client making the &lt;code&gt;XMLHttpRequest&lt;/code&gt; important information about the status of the response. Some cases where dealing with non-text response types may involve some manipulation and analysis are outlined in the following sections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b26ab05d62f813c3c3f83780c906f91eb3091dd" translate="yes" xml:space="preserve">
          <source>There are several types of event that can be fired to indicate that touch-related changes have occurred. You can determine which of these has happened by looking at the event's &lt;a href=&quot;event/type&quot;&gt;&lt;code&gt;TouchEvent.type&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69b8c58554506baa9d17fe108ca675c4185445f2" translate="yes" xml:space="preserve">
          <source>There are several versions of the &lt;code&gt;disconnect()&lt;/code&gt; method, which accept different combinations of parameters to control which nodes to disconnect from. If no parameters are provided, all outgoing connections are disconnected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d8b2bcc67a7183336c0667b0961f212f8b6e1eb" translate="yes" xml:space="preserve">
          <source>There are several ways in which you can indicate to the user that a drop is allowed at a certain location. The mouse pointer will update as necessary depending on the value of the &lt;a href=&quot;../datatransfer/dropeffect&quot;&gt;&lt;code&gt;dropEffect&lt;/code&gt;&lt;/a&gt; property. Although the exact appearance depends on the user's platform, typically a plus sign icon will appear for a 'copy' for example, and a 'cannot drop here' icon will appear when a drop is not allowed. This mouse pointer feedback is sufficient in many cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a7d9ac6b375aa6c280187b66e4d89c1ed67bb2d" translate="yes" xml:space="preserve">
          <source>There are several ways this code can be made better. Most real games would watch for &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/keydown&quot;&gt;keydown&lt;/a&gt;&lt;/code&gt; events, start motion when that happens, and stop the motion when the corresponding &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/keyup&quot;&gt;keyup&lt;/a&gt;&lt;/code&gt; occurs, instead of relying on key repeats. That would allow both smoother and faster movement, but would also allow the player to be moving and steering at the same time. Transitions or animations could be used to make the ship's movement smoother, too.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ee48f18164ed93097ef50e02be2935571196da3" translate="yes" xml:space="preserve">
          <source>There are several ways to get images for use on a canvas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9558be435a574a93ec3f1ab6cbf7cc871b090e8a" translate="yes" xml:space="preserve">
          <source>There are several ways to handle screen orientation, both with CSS and JavaScript. The first is the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/CSS/Media_queries#orientation&quot;&gt;orientation media query&lt;/a&gt;. This lets content adjust its layout using CSS, based on whether the browser window is in landscape mode (that is, its width is greater than its height) or portrait mode (its height is greater than its width).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="325b3c0869d1dd8072342791e67b2675e1486ea9" translate="yes" xml:space="preserve">
          <source>There are some basic questions you can answer to determine if a push notification is needed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d376ecbe7d5af57e09a537111b73c1e08d2d3201" translate="yes" xml:space="preserve">
          <source>There are some cases in which the synchronous usage of XMLHttpRequest was not replaceable, like during the &lt;a href=&quot;../windoweventhandlers/onunload&quot;&gt;&lt;code&gt;window.onunload&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../windoweventhandlers/onbeforeunload&quot;&gt;&lt;code&gt;window.onbeforeunload&lt;/code&gt;&lt;/a&gt; events. You should consider using the &lt;code&gt;fetch&lt;/code&gt; API with &lt;code&gt;keepalive&lt;/code&gt; flag. When &lt;code&gt;fetch&lt;/code&gt; with &lt;code&gt;keepalive&lt;/code&gt; isn't available, you can consider using the &lt;a href=&quot;../navigator/sendbeacon&quot;&gt;navigator.sendBeacon&lt;/a&gt; API can support these use cases typically while delivering a good UX.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19bd5c07f816d065e89be699de363873cab7001e" translate="yes" xml:space="preserve">
          <source>There are some cases, however, when the examples are more concise. To run examples that only demonstrate the basic relationship of the interface to the HTML elements, you may want to set up a test page in which interfaces can be easily accessed from scripts. The following very simple web page provides a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; element in the header in which you can place functions that test the interface, a few HTML elements with attributes that you can retrieve, set, or otherwise manipulate, and the web user interface necessary to call those functions from the browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95d9177640c554b7cdb4ad92d0e5004563e8bf4a" translate="yes" xml:space="preserve">
          <source>There are some other useful payment request methods worth knowing about.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfa1fc690db0dbd3232494d393d52cd0f8fa837f" translate="yes" xml:space="preserve">
          <source>There are some things worth noting about the XML output by &lt;code&gt;serializeToString()&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="176f3fbc6870559a485dea3405e108a5f2381199" translate="yes" xml:space="preserve">
          <source>There are three attributes provided by the &lt;a href=&quot;../file&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; object that contain useful information about the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e757283ceb8ce95088d4d09018c9bcc7aaed138" translate="yes" xml:space="preserve">
          <source>There are three basic types of information that need to be exchanged during signaling:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2564f39410267d755cec24d1aa5f5b31561feb99" translate="yes" xml:space="preserve">
          <source>There are three basic types of lighting:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b327796c3317331775828ffef97d473fb000bdd7" translate="yes" xml:space="preserve">
          <source>There are three extensions to the &lt;a href=&quot;element&quot;&gt;&lt;code&gt;Element&lt;/code&gt;&lt;/a&gt; interface:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4371f3da5d8157f4360723406f9f8f085fc64112" translate="yes" xml:space="preserve">
          <source>There are three kinds of &quot;variable&quot; or data storage available in GLSL, each of which with its own purpose and use cases: &lt;strong&gt;&lt;a href=&quot;#Attributes&quot;&gt;attributes&lt;/a&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;a href=&quot;#Varyings&quot;&gt;varyings&lt;/a&gt;&lt;/strong&gt;, and &lt;strong&gt;&lt;a href=&quot;#Uniforms&quot;&gt;uniforms&lt;/a&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba02abfa2bfc165ce113dd9a891527c4c57d0746" translate="yes" xml:space="preserve">
          <source>There are three methods that immediately draw rectangles to the bitmap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c44dea077469012e0116eb8a6e80fa7cd5df8a1" translate="yes" xml:space="preserve">
          <source>There are three possible execution modes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07a39cb953aeda216cac379f2ed84242f1fd33b9" translate="yes" xml:space="preserve">
          <source>There are three possible values for this property: &lt;code&gt;&quot;round&quot;&lt;/code&gt;, &lt;code&gt;&quot;bevel&quot;&lt;/code&gt;, and &lt;code&gt;&quot;miter&quot;&lt;/code&gt;. The default is &lt;code&gt;&quot;miter&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1213f53c4e342dcc007545aa926e295099b4a404" translate="yes" xml:space="preserve">
          <source>There are three possible values for this property: &lt;code&gt;round&lt;/code&gt;, &lt;code&gt;bevel&lt;/code&gt; and &lt;code&gt;miter&lt;/code&gt;. By default this property is set to &lt;code&gt;miter&lt;/code&gt;. Note that the &lt;code&gt;lineJoin&lt;/code&gt; setting has no effect if the two connected segments have the same direction, because no joining area will be added in this case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a3acb196aa6650f03312454609ade323e69b2a6" translate="yes" xml:space="preserve">
          <source>There are three primary components to the display for our virtual keyboard. The first is the musical keyboard itself. We draw this in a pair of nested &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div&quot;&gt;&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;&lt;/a&gt; elements so that we can make the keyboard horizontally scrollable if all the keys don't fit on the screen, without having them wrap around.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="145e5959e7429cf64762e4f476128505b5024e07" translate="yes" xml:space="preserve">
          <source>There are three types of keyboard events: &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/keydown&quot;&gt;keydown&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/keypress&quot;&gt;keypress&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/keyup&quot;&gt;keyup&lt;/a&gt;&lt;/code&gt;. For most keys, Gecko dispatches a sequence of key events like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c8f3d11222c43c141b2140af5136bc731fd8ae3" translate="yes" xml:space="preserve">
          <source>There are two challenges to detecting exactly if a browser supports HTML parsing in &lt;a href=&quot;../xmlhttprequest&quot;&gt;&lt;code&gt;XMLHttpRequest&lt;/code&gt;&lt;/a&gt;. First, the detection result is obtained asynchronously, because HTML support is only available in the asynchronous mode. Second, you have to actually fetch a test document over HTTP, because testing with a &lt;code&gt;data:&lt;/code&gt; URL would end up testing &lt;code&gt;data:&lt;/code&gt; URL support at the same time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e1ac1adebd8c50b4ae34b896f42cb5ed5483178" translate="yes" xml:space="preserve">
          <source>There are two different types of certificates used in WebAuthn for registration and authentication. They have similar names and similar purposes, but understanding the differences may be an initial point of confusion. The sections below describe attestation, which happens during registration, and assertion which happens during authentication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2b1e1f6289be07fd20cdb8afd0aea53fc6f218f" translate="yes" xml:space="preserve">
          <source>There are two different ways to format keyframes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ba71327a262557df11030096b19c270891ba7c6" translate="yes" xml:space="preserve">
          <source>There are two distinct sets of parameters. The first one allows to test the support of a pair &lt;em&gt;property-value&lt;/em&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="950a4a36b25eaf72766f999a4b4fa5abdb6ecdba" translate="yes" xml:space="preserve">
          <source>There are two flags you can set:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88e8f5cdb90be89e19992ef23ab921f6dce150d1" translate="yes" xml:space="preserve">
          <source>There are two forms of this constructor, which take their information in slightly different ways. The first one accepts four separate arguments &amp;mdash; the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/VRFieldOfViewReadOnly/upDegrees&quot;&gt;&lt;code&gt;VRFieldOfViewReadOnly.upDegrees&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/VRFieldOfViewReadOnly/rightDegrees&quot;&gt;&lt;code&gt;VRFieldOfViewReadOnly.rightDegrees&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/VRFieldOfViewReadOnly/downDegrees&quot;&gt;&lt;code&gt;VRFieldOfViewReadOnly.downDegrees&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/VRFieldOfViewReadOnly/leftDegrees&quot;&gt;&lt;code&gt;VRFieldOfViewReadOnly.leftDegrees&lt;/code&gt;&lt;/a&gt; values you want the field of view to have</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdb4eb41e30939877e13df12a446da62b67212c9" translate="yes" xml:space="preserve">
          <source>There are two interfaces or APIs used in WebVTT which are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fefc2350504774e394b73527f1c0e98c53a69f6f" translate="yes" xml:space="preserve">
          <source>There are two kinds of &lt;code&gt;AudioParam&lt;/code&gt;, &lt;em&gt;a-rate&lt;/em&gt; and &lt;em&gt;k-rate&lt;/em&gt; parameters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fe7396ba186072d1b9cf45dcc7a00d5064b3706" translate="yes" xml:space="preserve">
          <source>There are two levels of ICE restart: &lt;strong&gt;full ICE restart&lt;/strong&gt; causes all media streams in the session to be renegotiated. &lt;strong&gt;Partial ICE restart&lt;/strong&gt; allows ICE renegotiation of specific media streams instead of all of them at once. Some browsers don't yet support partial ICE restart, however.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c556e6c20b3cddc98acf617d738b94bb86361e3e" translate="yes" xml:space="preserve">
          <source>There are two live examples of this interface:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="783d6dca8372c564c305595a3abaab474db7e01c" translate="yes" xml:space="preserve">
          <source>There are two main types of setup, mobile or computer-connected. Their minimum hardware set ups are as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea1d86ab5cc0965f7aa3907f3b4b619e0ab3b1f8" translate="yes" xml:space="preserve">
          <source>There are two methods which use &lt;code&gt;DOMPointInit&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c599714c5fe4868c1729f6480045bb2b19a133a2" translate="yes" xml:space="preserve">
          <source>There are two shader functions run when drawing WebGL content: the &lt;strong&gt;vertex shader&lt;/strong&gt; and the &lt;strong&gt;fragment shader&lt;/strong&gt;. You write these in GLSL and pass the text of the code into WebGL to be compiled for execution on the GPU. Together, a set of vertex and fragment shaders is called a &lt;strong&gt;shader program&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="111bcba6742ada543a68c95a6c98ef3e3425a1a0" translate="yes" xml:space="preserve">
          <source>There are two types of &lt;code&gt;PromiseRejectionEvent&lt;/code&gt;: &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/unhandledrejection&quot;&gt;unhandledrejection&lt;/a&gt;&lt;/code&gt; is sent by the JavaScript runtime when a promise is rejected but the rejection goes unhandled. A recipient of &lt;code&gt;unhandledrejection&lt;/code&gt; sends a &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/rejectionhandled&quot;&gt;rejectionhandled&lt;/a&gt;&lt;/code&gt; event if it handles the rejection, so the system knows to stop treating the rejection as unhandled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a75238b45a440481058a6cfc2d0bcf4d79c63e5c" translate="yes" xml:space="preserve">
          <source>There are two types of controller you'll encounter with VR hardware:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e405506c787a35134c61cfcf3ecd0907423f06ef" translate="yes" xml:space="preserve">
          <source>There are two types of custom elements you can create:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58025463a5f401d907ee834bc94e53f125b76f45" translate="yes" xml:space="preserve">
          <source>There are two types of underlying source:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be1ebf9bb4b6b016203bf592acad0ba5cbbe22c4" translate="yes" xml:space="preserve">
          <source>There are two versions of this method: a two and a three parameter version:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44502ffc58afc9171ffa480847c6c583b4031a4f" translate="yes" xml:space="preserve">
          <source>There are two ways to create a new &lt;code&gt;DOMPointReadOnly&lt;/code&gt; instance. First, you can use its constructor, passing in the values of the parameters for each dimension and, optionally, the perspective:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32c9a5ee4c34e51543d64b1fbd48f9c6423730fe" translate="yes" xml:space="preserve">
          <source>There are two ways to create an &lt;code&gt;AudioNode&lt;/code&gt;: via the &lt;em&gt;constuctor&lt;/em&gt; and via the &lt;em&gt;factory method&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87ef743a6a424b54bdabed69b2cadf2238f6f108" translate="yes" xml:space="preserve">
          <source>There are two ways to manipulate &lt;a href=&quot;../audionode&quot;&gt;&lt;code&gt;AudioNode&lt;/code&gt;&lt;/a&gt; values, which are themselves objects of type &lt;a href=&quot;../audioparam&quot;&gt;&lt;code&gt;AudioParam&lt;/code&gt;&lt;/a&gt; interface. The first is to set the value directly via the property. So for instance if we want to change the &lt;code&gt;gain&lt;/code&gt; value of a &lt;a href=&quot;../gainnode&quot;&gt;&lt;code&gt;GainNode&lt;/code&gt;&lt;/a&gt; we would do so thus:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc606715d6d98999af2010b64fb48d27cbb4dfa8" translate="yes" xml:space="preserve">
          <source>There are two ways to use each of the output methods; you can simply pass in a list of objects whose string representations get concatenated into one string, then output to the console, or you can pass in a string containing zero or more substitution strings followed by a list of objects to replace them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd66be19ace740c2722a33149bbbe07c64ce2ae0" translate="yes" xml:space="preserve">
          <source>There are two ways you can create nodes with the Web Audio API. You can use the factory method on the context itself (e.g. &lt;code&gt;audioCtx.createGain()&lt;/code&gt;) or via a constructor of the node (e.g. &lt;code&gt;new GainNode()&lt;/code&gt;). We'll use the factory method in our code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5960816c694d72b816d9ef313b67a5035223d856" translate="yes" xml:space="preserve">
          <source>There are various ways to determine whether the node has a child node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5229746864ee10ec8cc534465346bd8d9f0afdaa" translate="yes" xml:space="preserve">
          <source>There aren't any property for this interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7cc4d8b3d78a79b3586c61b0c183e5bb001ebf9" translate="yes" xml:space="preserve">
          <source>There is &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=189112#c7&quot;&gt;an algorithm&lt;/a&gt; to obtain the height of the viewport excluding, if rendered, the horizontal scrollbar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8156a6358749cae4d45abc41ed807153e8c4de57" translate="yes" xml:space="preserve">
          <source>There is &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=189112#c7&quot;&gt;an algorithm&lt;/a&gt; to obtain the width of the viewport excluding, if rendered, the vertical scrollbar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="857e7cbdfa015d98a2546611f723543a8f95ea7c" translate="yes" xml:space="preserve">
          <source>There is a &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/sendAsBinary#sendAsBinary%28%29_polyfill&quot;&gt;polyfill available&lt;/a&gt; to support &lt;code&gt;sendAsBinary()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="108c9bfc838dc19b7628dd1fda0910bcfc724afd" translate="yes" xml:space="preserve">
          <source>There is a drawback to &lt;code&gt;attachEvent()&lt;/code&gt;: The value of &lt;code&gt;this&lt;/code&gt; will be a reference to the &lt;code&gt;window&lt;/code&gt; object, instead of the element on which it was fired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47543470d58323347a30898dec7e2f96dba48e93" translate="yes" xml:space="preserve">
          <source>There is a lot of discussion in progress about getting new specs to align with this behavior change, to mitigate potential problems going forward.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2206ff1ab85030f8ae9156d6ced9fb8dad6c1d41" translate="yes" xml:space="preserve">
          <source>There is a performance cost associated with looking at the &lt;code&gt;value&lt;/code&gt; property of a cursor, because the object is created lazily. To use a feature like &lt;code&gt;getAll()&lt;/code&gt;, the browser has to create all the objects at once. If you are just interested in looking at each of the keys, for instance, it is more efficient to use a &lt;a href=&quot;../idbcursor&quot;&gt;cursor&lt;/a&gt;. If you are trying to get an array of all the objects in an object store, though, you should use &lt;code&gt;getAll()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fd064067f9f8551eb066db9adfb520c97b8dfa2" translate="yes" xml:space="preserve">
          <source>There is a performance cost associated with looking at the &lt;code&gt;value&lt;/code&gt; property of a cursor, because the object is created lazily. When you use &lt;code&gt;getAll()&lt;/code&gt; for example, the browser must create all the objects at once. If you're just interested in looking at each of the keys, for instance, it is much more efficient to use a cursor than to use &lt;code&gt;getAll()&lt;/code&gt;. If you're trying to get an array of all the objects in an object store, though, use &lt;code&gt;getAll()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e28e6cb7c57b82d3a734b621022711a0b1ac949" translate="yes" xml:space="preserve">
          <source>There is a possible race condition here &amp;mdash; if the page content has finished loading before the &lt;code&gt;onmessage&lt;/code&gt; handler has been set, the messages could be lost because there is nothing to handle it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="722e6d39a083c88c15688dd489d063c9f2376b10" translate="yes" xml:space="preserve">
          <source>There is also a construct you&amp;rsquo;ll use called a &lt;strong&gt;controller&lt;/strong&gt; &amp;mdash; each reader has an associated controller that allows you to control the stream (for example, to cancel it if wished).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65201de949089e576015090637312f8ad0388156" translate="yes" xml:space="preserve">
          <source>There is also a construct you&amp;rsquo;ll use called a controller &amp;mdash; each writer has an associated controller that allows you to control the stream (for example, to abort it if wished).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b707c128c651756e96cb66f2cdcac1a69e976909" translate="yes" xml:space="preserve">
          <source>There is also an &lt;code&gt;activate&lt;/code&gt; event. The point where this event fires is generally a good time to clean up old caches and other things associated with the previous version of your service worker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f489029b631649817466aca0cd163edcbe67af22" translate="yes" xml:space="preserve">
          <source>There is also an Internet Explorer-compatible way to use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt;&lt;code&gt;Array.prototype.forEach&lt;/code&gt;&lt;/a&gt; for iteration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c666f768d3759a791b0c2c319478b26fd020bb6" translate="yes" xml:space="preserve">
          <source>There is also the option of libraries, of which there are a few depending on your use case. For a good all-rounder, &lt;a href=&quot;https://howlerjs.com/&quot;&gt;howler.js&lt;/a&gt; is a good choice. It has cross-browser support and, provides a useful subset of functionality. Although it doesn't harness the full gamut of filters and other effects the Web Audio API comes with, you can do most of what you'd want to do.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d573a5bea115520228121579af761d834eb4c50" translate="yes" xml:space="preserve">
          <source>There is an excellent diagram that clearly explains the three phases of event flow through the DOM in the &lt;a href=&quot;http://www.w3.org/TR/DOM-Level-3-Events/#dom-event-architecture&quot;&gt;DOM Level 3 Events draft&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f2436de8fbfd340752fe1bbb66d69d2550a17db" translate="yes" xml:space="preserve">
          <source>There is currently an issue flagged in the specification pointing out that at this time, no exceptions are being thrown if the canvas isn't origin-clean. This may change in the future, so it would be wise to plan ahead and watch for exceptions such as &lt;code&gt;SecurityError&lt;/code&gt; (although the specific error that might be thrown is not mentioned in the spec, this is a likely candidate).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57488d57f76077f4ee2cf0446536a26e8da5a984" translate="yes" xml:space="preserve">
          <source>There is currently only one registered &lt;a href=&quot;https://www.w3.org/TR/payment-method-id/#registry&quot;&gt;standardized payment method identifier&lt;/a&gt; (more may be added in the future):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f51e89a9b8f40922cff623bc0057da9f684eb30b" translate="yes" xml:space="preserve">
          <source>There is frequent confusion surrounding the meaning and use of &lt;em&gt;scope&lt;/em&gt;. Since a service worker can't have a scope broader than its own location, only use the &lt;code&gt;scope&lt;/code&gt; option when you need a scope that is narrower than the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="035469bdaf9675a96dd892e4c0b2edb8a93aeccb" translate="yes" xml:space="preserve">
          <source>There is no &lt;a href=&quot;../rtcrtpsender&quot;&gt;&lt;code&gt;RTCRtpSender&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../rtcrtpreceiver&quot;&gt;&lt;code&gt;RTCRtpReceiver&lt;/code&gt;&lt;/a&gt; whose &lt;code&gt;track&lt;/code&gt; matches the specified &lt;code&gt;selector&lt;/code&gt;, or &lt;code&gt;selector&lt;/code&gt; matches more than one sender or receiver.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7e977a4c35f50b569afb80bc98f41c54af82f9f" translate="yes" xml:space="preserve">
          <source>There is no &lt;code&gt;insertAfter&lt;/code&gt; method. It can be emulated by combining the &lt;code&gt;insertBefore&lt;/code&gt; method with &lt;code&gt;&lt;a href=&quot;nextsibling&quot;&gt;nextSibling&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a8cc27d65f284405fb98c87526d13732c3976b1" translate="yes" xml:space="preserve">
          <source>There is no &lt;code&gt;removeAttributeNodeNS&lt;/code&gt; (unlike the pair &lt;code&gt;setAttributeNode &lt;/code&gt;and&lt;code&gt;setAttributeNodeNS&lt;/code&gt; which need to know which existing attribute to replace (if any), &lt;code&gt;removeAttributeNode has no such requirement&lt;/code&gt;). &lt;code&gt;removeAttributeNode &lt;/code&gt;can remove namespaced as well as non-namespaced attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c13655c95efe7cc0deff4aa3970ded732c7e0a5" translate="yes" xml:space="preserve">
          <source>There is no &lt;em&gt;end&lt;/em&gt; property for &lt;code&gt;requestStart&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d39c0bae4580801fe954444b8320db090c80e576" translate="yes" xml:space="preserve">
          <source>There is no complex set up for using an &lt;code&gt;AudioDestinationNode&lt;/code&gt; &amp;mdash; by default, this simply represents the output of the user's system (e.g. their speakers), so you can get it hooked up inside an audio graph using only a few lines of code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fd60e4febb13b9d15709f063aa9af91f821a3cd" translate="yes" xml:space="preserve">
          <source>There is no data yet. Also, &lt;code&gt;readyState&lt;/code&gt; is &lt;code&gt;HAVE_NOTHING&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62748c19229a9f037c98bd21dcbf9d715e459698" translate="yes" xml:space="preserve">
          <source>There is no index with the given name (case-sensitive) in the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d03454339da57555840cd2655ea1892ad168ef04" translate="yes" xml:space="preserve">
          <source>There is no need to add JavaScript code to call &lt;code&gt;fileElem.click()&lt;/code&gt;. Also in this case you can style the label element as you wish. You need to provide a visual cue for the focus status of the hidden input field on its label, be it an outline as shown above, or background-color or box-shadow. (As of time of writing, Firefox doesn&amp;rsquo;t show this visual cue for &lt;code&gt;&amp;lt;input type=&quot;file&quot;&amp;gt;&lt;/code&gt; elements.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3dc53aef83c30b6b8ac7dcaa64f08409a7cdd6e" translate="yes" xml:space="preserve">
          <source>There is no object of type &lt;code&gt;NavigatorGeolocation&lt;/code&gt;, but some interfaces, like &lt;a href=&quot;navigator&quot;&gt;&lt;code&gt;Navigator&lt;/code&gt;&lt;/a&gt; implements it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a1ffb5817ce56023ffb589f2b23523560e9ce5d" translate="yes" xml:space="preserve">
          <source>There is no object of type &lt;code&gt;NavigatorID&lt;/code&gt;, but other interfaces, like &lt;a href=&quot;navigator&quot;&gt;&lt;code&gt;Navigator&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;workernavigator&quot;&gt;&lt;code&gt;WorkerNavigator&lt;/code&gt;&lt;/a&gt;, implement it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="591e27787246ec82ed949a688390d027cfd9edfb" translate="yes" xml:space="preserve">
          <source>There is no object of type &lt;code&gt;NavigatorLanguage&lt;/code&gt;, but other interfaces, like &lt;a href=&quot;navigator&quot;&gt;&lt;code&gt;Navigator&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;workernavigator&quot;&gt;&lt;code&gt;WorkerNavigator&lt;/code&gt;&lt;/a&gt;, implement it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58e7772c803b8693394d88ede8ca7420a0fa524a" translate="yes" xml:space="preserve">
          <source>There is no object of type &lt;code&gt;NavigatorOnLine&lt;/code&gt;, but other interfaces, like &lt;a href=&quot;navigator&quot;&gt;&lt;code&gt;Navigator&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;workernavigator&quot;&gt;&lt;code&gt;WorkerNavigator&lt;/code&gt;&lt;/a&gt;, implement it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f2c364f5bfa70b5a0228da1091401ade414ae94" translate="yes" xml:space="preserve">
          <source>There is no ongoing exchange of offer and answer underway. This may mean that the &lt;a href=&quot;../rtcpeerconnection&quot;&gt;&lt;code&gt;RTCPeerConnection&lt;/code&gt;&lt;/a&gt; object is new, in which case both the &lt;a href=&quot;localdescription&quot;&gt;&lt;code&gt;localDescription&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;remotedescription&quot;&gt;&lt;code&gt;remoteDescription&lt;/code&gt;&lt;/a&gt; are &lt;code&gt;null&lt;/code&gt;; it may also mean that negotiation is complete and a connection has been established.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39f087d267801765096318f3c5786c4ccde0708e" translate="yes" xml:space="preserve">
          <source>There is no ongoing exchange of offer and answer underway. This may mean that the &lt;a href=&quot;rtcpeerconnection&quot;&gt;&lt;code&gt;RTCPeerConnection&lt;/code&gt;&lt;/a&gt; object is new, in which case both the &lt;a href=&quot;rtcpeerconnection/localdescription&quot;&gt;&lt;code&gt;localDescription&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;rtcpeerconnection/remotedescription&quot;&gt;&lt;code&gt;remoteDescription&lt;/code&gt;&lt;/a&gt; are &lt;code&gt;null&lt;/code&gt;; it may also mean that negotiation is complete and a connection has been established.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6656b9489ce76c46a3cf5b62f6edcded0871e89e" translate="yes" xml:space="preserve">
          <source>There is no preference for this behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e90a0725b30e8a0d90fca809b2150ccb73a717db" translate="yes" xml:space="preserve">
          <source>There is no track already associated with the sender.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b6ab916b9f1931c39ef3dfa9e059828a190d237" translate="yes" xml:space="preserve">
          <source>There is no way to be notified when this value is changed (which can happen, for example, if the user drags the window to a display with a different pixel density). Since there are no callbacks or events available to detect pixel density changes, the only way to do so is to periodically check the value of &lt;code&gt;devicePixelRatio&lt;/code&gt; to see if it's changed. Just don't do it too often, or you'll impact performance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b21b7fbb345ef87015c54ff6507b188001ae7053" translate="yes" xml:space="preserve">
          <source>There is no way to clear the session history or to disable the back/forward navigation from unprivileged code. The closest available solution is the &lt;code&gt;&lt;a href=&quot;location#replace&quot;&gt;location.replace()&lt;/a&gt;&lt;/code&gt; method, which replaces the current item of the session history with the provided URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36fe53cdacadd3f36eef6b7777104103cd86aa63" translate="yes" xml:space="preserve">
          <source>There is not an &quot;official&quot; way to embed the code of a worker within a web page, like &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script&quot;&gt;&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;&lt;/a&gt; elements do for normal scripts. But a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script&quot;&gt;&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;&lt;/a&gt; element that does not have a &lt;code&gt;src&lt;/code&gt; attribute and has a &lt;code&gt;type&lt;/code&gt; attribute that does not identify an executable MIME type can be considered a data block element that JavaScript could use. &quot;Data blocks&quot; is a more general feature of HTML5 that can carry almost any textual data. So, a worker could be embedded in this way:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94b65007782c8b2d7a1a1834865a6abdc5b5dda1" translate="yes" xml:space="preserve">
          <source>There is one record for each key that is an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b52736f5a3c4fc1c37d67e351eea3978ad5c090" translate="yes" xml:space="preserve">
          <source>There is one record in the index for each item in an array of keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d96baaf92d10aa23e17d629d34103da9987afa1" translate="yes" xml:space="preserve">
          <source>There is only one type of track event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35025ec54394e3e0d04ac72f4815210bff73415c" translate="yes" xml:space="preserve">
          <source>There is slightly better support for &lt;code&gt;pageYOffset&lt;/code&gt; than for &lt;code&gt;scrollY&lt;/code&gt; in older browsers, but if you're not concerned about browsers more than a handful of years old, you can use either one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea1c1f7f35de18a5375074a25bdc71a404a203dd" translate="yes" xml:space="preserve">
          <source>There isn't enough memory available to allocate the buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69524f7c378b3e02590aee5ec44eb503f1299d35" translate="yes" xml:space="preserve">
          <source>There must be at least one space after &lt;code&gt;WEBVTT&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c4a1f357f66c3b5e0c1d6d4744bf3e4dec833c3" translate="yes" xml:space="preserve">
          <source>There must be at least two keyframes specified (representing the starting and ending states of the animation sequence). If your keyframe list has only one entry, &lt;a href=&quot;../element/animate&quot;&gt;&lt;code&gt;Element.animate()&lt;/code&gt;&lt;/a&gt; will throw a &lt;code&gt;NotSupportedError&lt;/code&gt; exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17e1af8a73d618369d1b78033b43199cd3b39069" translate="yes" xml:space="preserve">
          <source>There was an error in the speech recognition grammar or semantic tags, or the chosen grammar format or semantic tag format was unsupported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d11149c788402adbd352407acad5b1fa65c6143" translate="yes" xml:space="preserve">
          <source>There were various experiments conducted over the next few decades, but it wasn't resricted to science labs and battlefields anymore. Eventually pop culture took over with movie directors showing their visions of virtual reality. Movies like Tron (1982) and The Matrix (1999) were created, where people could transfer themselves into a whole new cyber world or were trapped in one without even knowing, accepting it as the real world.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f272780743da29d11032e050401c58ba4f9777fd" translate="yes" xml:space="preserve">
          <source>There's &lt;a href=&quot;https://bugzilla.mozilla.org/attachment.cgi?id=220609&quot;&gt;a simple test case&lt;/a&gt; that you can run to verify that the events are working (does not work in Chrome due to attaching the event listener to document.body).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc8af119de4d69d195d7eb4fe3d73b1216347933" translate="yes" xml:space="preserve">
          <source>There's &lt;a href=&quot;https://bugzilla.mozilla.org/attachment.cgi?id=220609&quot;&gt;a simple test case&lt;/a&gt; that you can run to verify that the events are working.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d48d421df8b7c0c5659389bcd922a44ba4f4f034" translate="yes" xml:space="preserve">
          <source>There's a &lt;a href=&quot;../stereopannernode&quot;&gt;&lt;code&gt;StereoPannerNode&lt;/code&gt;&lt;/a&gt; node, which changes the balance of the sound between the left and right speakers, if the user has stereo capabilities.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2d601f013a180e7caf5974866c51c1c292aa86d" translate="yes" xml:space="preserve">
          <source>There's a good reason why the notion of tracking visibility of ads is being used in this example. It turns out that one of the most common uses of Flash or other script in advertising on the Web is to record how long each ad is visible, for the purpose of billing and payment of revenues. Without the Intersection Observer API, this winds up being done using intervals and timeouts for each individual ad, or other techniques that tend to slow the page down. Using this API lets everything get streamlined by the browser to reduce the impact on performance substantially.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab27adafd9dd98144b1fc7d9e23a92d990055b13" translate="yes" xml:space="preserve">
          <source>There's a sequence of things that have to happen in order to make it possible to begin a WebRTC session:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5fc5881de87f85c7a454cf1ab5f029e0eb2e866" translate="yes" xml:space="preserve">
          <source>There's also a &lt;a href=&quot;web_audio_api/basic_concepts_behind_web_audio_api&quot;&gt;Basic Concepts Behind Web Audio API&lt;/a&gt; article, to help you understand the way digital audio works, specifically in the realm of the API. This also includes a good introduction to some of the concepts the API is built upon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="997d28e1c00ca36c3e20ab8cfc1e46204ec5fbf1" translate="yes" xml:space="preserve">
          <source>There's also a reference distance (&lt;code&gt;&lt;a href=&quot;../pannernode/refdistance&quot;&gt;refDistance&lt;/a&gt;&lt;/code&gt;), which is used by the distance models. We can keep that at the default value of &lt;code&gt;1&lt;/code&gt; as well:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5613b9799b53183cc286723baf665ceb4844e4de" translate="yes" xml:space="preserve">
          <source>There's also another limit called &lt;strong&gt;group limit&lt;/strong&gt; &amp;mdash; this is defined as 20% of the global limit, but it has a minimum of 10 MB and a maximum of 2 GB. Each origin is part of a group (group of origins). There's one group for each eTLD+1 domain. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cb3f711551918e49bcf6eebf8cd30764aa2cb09" translate="yes" xml:space="preserve">
          <source>There's an even more extensive example at &lt;a href=&quot;intersection_observer_api/timing_element_visibility&quot;&gt;Timing element visibility with the Intersection Observer API&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ef8c82adb4072591edd747f1352ce7dfb2fd097" translate="yes" xml:space="preserve">
          <source>There's more information in the &lt;a href=&quot;https://developers.google.com/chrome-developer-tools/docs/console-api#consoledirobject&quot;&gt;Chrome Console API reference&lt;/a&gt; about this and other functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3724586933fd10276a56ccb3cfe55f5d48c7b47" translate="yes" xml:space="preserve">
          <source>There's no strict right or wrong way when writing creative code. As long as you consider security, performance, and accessibility, you can adapt to your own style. In this article, we'll share a number of &lt;em&gt;best practices&lt;/em&gt; &amp;mdash; guidelines, tips, and tricks for working with the Web Audio API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2624e8d9ddad62b6beecab7420be074926dd91c" translate="yes" xml:space="preserve">
          <source>There's nothing magic in here. It's fairly basic CSS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aca55dc97193d40ad28701bdd92f406c9d56bdc6" translate="yes" xml:space="preserve">
          <source>There's nothing very difficult in these examples. In both cases we see a succession of curves being drawn which finally result in a complete shape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e889d8698fde7c242a7b2847687962e7ccc83481" translate="yes" xml:space="preserve">
          <source>There's one last function to define, and it's the point to the entire exercise: the &lt;code&gt;takepicture()&lt;/code&gt; function, whose job it is to capture the currently displayed video frame, convert it into a PNG file, and display it in the captured frame box. The code looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0c07ae2e8523c972399a7d7fe5f70bfb7ea30d7" translate="yes" xml:space="preserve">
          <source>There's the &lt;a href=&quot;https://github.com/chrisguttandin/standardized-audio-context&quot;&gt;&lt;code&gt;standardised-audio-context&lt;/code&gt;&lt;/a&gt; npm package, which creates API functionality consistently across browsers, full holes as they are found. It's constantly in development and endeavours to keep up with the current specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e019a82fef2e3f6171062fa30a094172b804c44" translate="yes" xml:space="preserve">
          <source>Therefore, it is possible to choose the range in which an &lt;a href=&quot;../audioparam&quot;&gt;&lt;code&gt;AudioParam&lt;/code&gt;&lt;/a&gt; will change by setting the value of the &lt;a href=&quot;../audioparam&quot;&gt;&lt;code&gt;AudioParam&lt;/code&gt;&lt;/a&gt; to the central frequency, and to use a &lt;a href=&quot;../gainnode&quot;&gt;&lt;code&gt;GainNode&lt;/code&gt;&lt;/a&gt; between the audio source and the &lt;a href=&quot;../audioparam&quot;&gt;&lt;code&gt;AudioParam&lt;/code&gt;&lt;/a&gt; to adjust the range of the &lt;a href=&quot;../audioparam&quot;&gt;&lt;code&gt;AudioParam&lt;/code&gt;&lt;/a&gt; changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2f666c413b929db0280b26ff281d05fc2e76e52" translate="yes" xml:space="preserve">
          <source>These APIs might be useful when working further with canvas and graphics:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee9a606273cacc92d323c135466e381bdacae85a" translate="yes" xml:space="preserve">
          <source>These are accessed through each ad's &lt;a href=&quot;../htmlelement/dataset&quot;&gt;&lt;code&gt;HTMLElement.dataset&lt;/code&gt;&lt;/a&gt; attribute, which provides a &lt;a href=&quot;../domstringmap&quot;&gt;&lt;code&gt;DOMStringMap&lt;/code&gt;&lt;/a&gt; mapping each custom attribute's name to its value. The values are strings, but we can convert those to numbers easily enough&amp;mdash;in fact, JavaScript generally does it automatically, although we'll have one instance where we have to do it ourselves.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13f84087545183278fce274f814078977d8a8991" translate="yes" xml:space="preserve">
          <source>These are images created using the &lt;code&gt;Image()&lt;/code&gt; constructor, as well as any &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&lt;/a&gt; element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e94523494a8c57eae349c90090228ce5d8d09a5" translate="yes" xml:space="preserve">
          <source>These are images embedded using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Element/image&quot;&gt;&lt;code&gt;&amp;lt;image&amp;gt;&lt;/code&gt;&lt;/a&gt; element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bededfc349a1a9c16a4c6528784f75e829fb54b5" translate="yes" xml:space="preserve">
          <source>These are properties of the window object that can be set to establish event handlers for the various things that can happen in the window that might be of interest.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a821830064c2ca53ea5d92dd7ffdb5edfa845f2c" translate="yes" xml:space="preserve">
          <source>These are supported values for the &lt;code&gt;resultType&lt;/code&gt; parameter of the &lt;code&gt;evaluate&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b1b071e05949d480c4d1ce488e58ed12e37bd73" translate="yes" xml:space="preserve">
          <source>These are the basic features of the Web Animations API, most of which are already supported across the latest release versions of Firefox and Chrome. By now you should be ready to &quot;jump down the rabbit hole&quot; of animating in the browser and ready to write your own animation experiments! If you're using the API and want to share, try using the #WAAPI hashtag. We will be watching and will write more tutorials to cover further features as support spreads!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23b3ff6648f23356d644f1640c87067e3c26e4c6" translate="yes" xml:space="preserve">
          <source>These are the steps you need to take to draw a frame:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92bc89741b07044ead54e0c0e22ccb0d6c1e61ea" translate="yes" xml:space="preserve">
          <source>These are used as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbeeb50fca15282002a007bc3ebaf034d2b5f63c" translate="yes" xml:space="preserve">
          <source>These are, in order:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a55097e024f02fa113e77cc5d09adab4b518a02e" translate="yes" xml:space="preserve">
          <source>These attributes are obsolete and should not be used, even if a browser still supports them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6402355fdb81e0c902ae10bc66c240d8bf7a7ff" translate="yes" xml:space="preserve">
          <source>These candidate types are listed in order of priority; the higher in the list they are, the more efficient they are.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2345cd6c133f3a6be031ebb39daaf9a5b4a54269" translate="yes" xml:space="preserve">
          <source>These characters represent the &quot;A&quot; through &quot;D&quot; keys which are part of the DTMF standard but not included on most telephones. These are &lt;em&gt;not&lt;/em&gt; interpreted as digits. Lower-case &quot;a&quot;-&quot;d&quot; automatically gets converted to upper-case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df9b51c97c0b2c3feeaef7c4f451a127335d7b6a" translate="yes" xml:space="preserve">
          <source>These characters represent the digit keys on a telephone keypad.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10dc30370cde8e39c8ce6bc141632e455c0b5bf4" translate="yes" xml:space="preserve">
          <source>These constants are defined on the &lt;a href=&quot;../webgl2renderingcontext&quot;&gt;&lt;code&gt;WebGL2RenderingContext&lt;/code&gt;&lt;/a&gt; interface. All WebGL 1 constants are also available in a WebGL 2 context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de0dc21549f8deed64732aaeafc4a9d7535110df" translate="yes" xml:space="preserve">
          <source>These constants are defined on the &lt;a href=&quot;../webglrenderingcontext&quot;&gt;&lt;code&gt;WebGLRenderingContext&lt;/code&gt;&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58c67efe933054b1f0ce614840269807b8651ce7" translate="yes" xml:space="preserve">
          <source>These constants are no longer available &amp;mdash; they were removed in Gecko 25. You should use the string constants directly instead. (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=888598&quot;&gt;bug 888598&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69d11bb6c762d3a73dde0ba88fdb62ea303f07e4" translate="yes" xml:space="preserve">
          <source>These constants are no longer available &amp;mdash; they were removed in Gecko 25. You should use the string constants directly instead. (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=891944&quot;&gt;bug 891944&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65d7409da269406f7f6eaaf802e3e2eb5b1488bc" translate="yes" xml:space="preserve">
          <source>These cookie blocking policies are known to break embedded cross-origin content that requires access to its first-party storage. As an example, federated logins often require access to authentication cookies stored in first-party storage, and will require the user to sign in on each site separately (or completely break) if those cookies are not available. In the case of breakage, site owners have often encouraged users to add their site as an exception or to disable the policy entirely. As a consequence, users who wish to continue to interact with embedded content are forced to greatly relax their blocking policy for resources loaded from all embedded origins and possibly across all websites.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa3d40b5978eb2d72bba3b4be6c0231207728abe" translate="yes" xml:space="preserve">
          <source>These correspond to the similarly-labeled keys which are typically on the bottom row of the telephone keypad.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63ab3d7bc9771c337e3b20d87f1b8e61d5b2cb19" translate="yes" xml:space="preserve">
          <source>These defaults ask for a pretty common camera configuration, but don't insist on any property being of special importance. The browser should do its best to match these settings but will settle for anything it considers a close match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bdd48fb618064ecf28a9c91a62bb5d2b1d63c09" translate="yes" xml:space="preserve">
          <source>These elements are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f1f14ab12c8e7a7d1fc283af78fd3a362c5da72" translate="yes" xml:space="preserve">
          <source>These errors may occur either directly because of a call to a &lt;code&gt;MediaRecorder&lt;/code&gt; method, or indirectly due to a problem arising during the recording process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b753bfb7e70e62060fa57970dc8290f179440f8" translate="yes" xml:space="preserve">
          <source>These event handlers are defined on the &lt;a href=&quot;globaleventhandlers&quot;&gt;&lt;code&gt;GlobalEventHandlers&lt;/code&gt;&lt;/a&gt; mixin, and implemented by &lt;a href=&quot;htmlelement&quot;&gt;&lt;code&gt;HTMLElement&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;document&quot;&gt;&lt;code&gt;Document&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;window&quot;&gt;&lt;code&gt;Window&lt;/code&gt;&lt;/a&gt;, as well as by &lt;a href=&quot;workerglobalscope&quot;&gt;&lt;code&gt;WorkerGlobalScope&lt;/code&gt;&lt;/a&gt; for Web Workers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="767745062027dc314280f4765a86bee30715d597" translate="yes" xml:space="preserve">
          <source>These events can be tracked using the &lt;a href=&quot;../notification/onclick&quot;&gt;&lt;code&gt;onclick&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../notification/onclose&quot;&gt;&lt;code&gt;onclose&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../notification/onerror&quot;&gt;&lt;code&gt;onerror&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../notification/onshow&quot;&gt;&lt;code&gt;onshow&lt;/code&gt;&lt;/a&gt; handlers. Because &lt;a href=&quot;../notification&quot;&gt;&lt;code&gt;Notification&lt;/code&gt;&lt;/a&gt; also inherits from &lt;a href=&quot;../eventtarget&quot;&gt;&lt;code&gt;EventTarget&lt;/code&gt;&lt;/a&gt;, it's possible to use the &lt;a href=&quot;../eventtarget/addeventlistener&quot;&gt;&lt;code&gt;addEventListener()&lt;/code&gt;&lt;/a&gt; method on it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3c6ae01aae11fbf35175c0482e92526a9abc385" translate="yes" xml:space="preserve">
          <source>These examples will disable right click on the page:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74d4c56287167455bd5fac29b911bfc91ae25554" translate="yes" xml:space="preserve">
          <source>These exceptions are returned by rejecting the returned promise. Your rejection handler should examine the received exception to determine which occurred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb1c14e7a3bef84404bae1d7042bafa49733da5a" translate="yes" xml:space="preserve">
          <source>These flags are only setable with the &lt;code&gt;secure&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a7a2720df3a4b85e9924ba7f064ca6aa8652c10" translate="yes" xml:space="preserve">
          <source>These functions are used send to event activity to the application window (to support debugging and learning about the event flow).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1710f52b80b720d094c833f0022e920cbf6365d9" translate="yes" xml:space="preserve">
          <source>These functions are used to send event activity to the application's window (to support debugging and learning about the event flow).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="add70970a027207d82f88204daff92e2b264e99c" translate="yes" xml:space="preserve">
          <source>These functions manage the global event caches &lt;code&gt;evCache1&lt;/code&gt;, &lt;code&gt;evCache2&lt;/code&gt; and &lt;code&gt;evCache3&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b43bb87640c9723d8b8a7e436cd44a88ce43ea6f" translate="yes" xml:space="preserve">
          <source>These functions support the application but aren't directly involved in the event flow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47866ca3e0d5dfccadb185033e346b8d56074b01" translate="yes" xml:space="preserve">
          <source>These functions support the application but aren't directly involved with the event flow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55aa32688d7fc066a527608733b3632334146405" translate="yes" xml:space="preserve">
          <source>These interfaces allow you to add audio spatialization panning effects to your audio sources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="008fd29c667023d006403abb9d97c97e2aab000a" translate="yes" xml:space="preserve">
          <source>These interfaces are related to interactivity with public-switched telephone networks (PTSNs).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d790b62e54280b56f39cdcac55f33d62c2a07e17" translate="yes" xml:space="preserve">
          <source>These interfaces are used to set up, open, and manage WebRTC connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d588cf1190e7f0f8d5f45e9dd67a86b17dd937a" translate="yes" xml:space="preserve">
          <source>These interfaces may return &lt;code&gt;null&lt;/code&gt; in certain cases where the methods and properties are not relevant. They may throw an exception &amp;mdash; for example when adding children to a node type for which no children can exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="450b11e86dc8048665575d86a1d5cc645f143abe" translate="yes" xml:space="preserve">
          <source>These lines create a new &lt;code&gt;Promise&lt;/code&gt; which is fulfilled when both of the two &lt;code&gt;Promise&lt;/code&gt;s (&lt;code&gt;stopped&lt;/code&gt; and &lt;code&gt;recorded&lt;/code&gt;) have resolved. Once that resolves, the array data is returned by &lt;code&gt;startRecording()&lt;/code&gt; to its caller.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd65638cc6b446c47d58fc40fb006dc25c41927e" translate="yes" xml:space="preserve">
          <source>These may vary substantially depending on the specifics of the service, and a given processing service may have multiple URLs used, depending on the version of their API, their communication technology, and so forth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d126a125430c518c3480f98bd6590612312c83fa" translate="yes" xml:space="preserve">
          <source>These mechanisms are available via the &lt;a href=&quot;../window/sessionstorage&quot;&gt;&lt;code&gt;Window.sessionStorage&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../window/localstorage&quot;&gt;&lt;code&gt;Window.localStorage&lt;/code&gt;&lt;/a&gt; properties (to be more precise, in supporting browsers the &lt;code&gt;Window&lt;/code&gt; object implements the &lt;code&gt;WindowLocalStorage&lt;/code&gt; and &lt;code&gt;WindowSessionStorage&lt;/code&gt; objects, which the &lt;code&gt;localStorage&lt;/code&gt; and &lt;code&gt;sessionStorage&lt;/code&gt; properties hang off) &amp;mdash; invoking one of these will create an instance of the &lt;a href=&quot;../storage&quot;&gt;&lt;code&gt;Storage&lt;/code&gt;&lt;/a&gt; object, through which data items can be set, retrieved, and removed. A different Storage object is used for the &lt;code&gt;sessionStorage&lt;/code&gt; and &lt;code&gt;localStorage&lt;/code&gt; for each origin &amp;mdash; they function and are controlled separately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7eed9f88496e650fbdee029eace300edcb495887" translate="yes" xml:space="preserve">
          <source>These mechanisms are available via the &lt;a href=&quot;window/sessionstorage&quot;&gt;&lt;code&gt;Window.sessionStorage&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;window/localstorage&quot;&gt;&lt;code&gt;Window.localStorage&lt;/code&gt;&lt;/a&gt; properties (to be more precise, in supporting browsers the &lt;code&gt;Window&lt;/code&gt; object implements the &lt;code&gt;WindowLocalStorage&lt;/code&gt; and &lt;code&gt;WindowSessionStorage&lt;/code&gt; objects, which the &lt;code&gt;localStorage&lt;/code&gt; and &lt;code&gt;sessionStorage&lt;/code&gt; properties hang off) &amp;mdash; invoking one of these will create an instance of the &lt;a href=&quot;storage&quot;&gt;&lt;code&gt;Storage&lt;/code&gt;&lt;/a&gt; object, through which data items can be set, retrieved and removed. A different Storage object is used for the &lt;code&gt;sessionStorage&lt;/code&gt; and &lt;code&gt;localStorage&lt;/code&gt; for each origin &amp;mdash; they function and are controlled separately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f5318c00d0b100c1c9ee4d152c8552e3e8325e6" translate="yes" xml:space="preserve">
          <source>These methods are available only on the &lt;code&gt;Notification&lt;/code&gt; object itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9612ebc03d85793c72674aada8aca4e5f6e27eb9" translate="yes" xml:space="preserve">
          <source>These methods are obsolete and should not be used, even if a browser still supports them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb1ffdc852a537d21c3e786dbed988694624da21" translate="yes" xml:space="preserve">
          <source>These methods copy data into a specified array, so you need to create a new array to receive the data before invoking one. The first one produces 32-bit floating point numbers, and the second and third ones produce 8-bit unsigned integers, therefore a standard JavaScript array won't do &amp;mdash; you need to use a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Float32Array&quot;&gt;&lt;code&gt;Float32Array&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Uint8Array&quot;&gt;&lt;code&gt;Uint8Array&lt;/code&gt;&lt;/a&gt; array, depending on what data you are handling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9749a53a977c72b99303a5164a21cf47e376ea89" translate="yes" xml:space="preserve">
          <source>These methods manage WebGL extensions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f119078244b1983d2174c33a1dc1930a9566340f" translate="yes" xml:space="preserve">
          <source>These promises are not fully supported as of this writing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55c1fb24154d106c91f4d0a30790946c4e288b2b" translate="yes" xml:space="preserve">
          <source>These properties are available only on an instance of the &lt;code&gt;Notification&lt;/code&gt; object or through its &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain&quot;&gt;&lt;code&gt;prototype&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;Notification&lt;/code&gt; object also inherits from the &lt;a href=&quot;eventtarget&quot;&gt;&lt;code&gt;EventTarget&lt;/code&gt;&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2f6118fd5244aa5759ea8a5c4fe46ede36b15e8" translate="yes" xml:space="preserve">
          <source>These properties are available only on instances of the &lt;code&gt;Notification&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8630d1beb7f5815e558353776c79277545daae3c" translate="yes" xml:space="preserve">
          <source>These properties are available only on the &lt;code&gt;Notification&lt;/code&gt; object itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3568c685f75a70eaae5cdeeedfc9dbd317bd2ad" translate="yes" xml:space="preserve">
          <source>These properties are computed locally, and are only available to the device receiving the media stream. Their primary purpose is to examine the error resiliency of the connection, as they provide information about lost packets, lost frames, and how heavily compressed the data is.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f30edcbc56980adc244f5a8988d7ff88626b8e11" translate="yes" xml:space="preserve">
          <source>These properties are defined on the &lt;a href=&quot;windoworworkerglobalscope&quot;&gt;&lt;code&gt;WindowOrWorkerGlobalScope&lt;/code&gt;&lt;/a&gt; mixin, and implemented by &lt;a href=&quot;window&quot;&gt;&lt;code&gt;Window&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;workerglobalscope&quot;&gt;&lt;code&gt;WorkerGlobalScope&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fc759053a1b5b839e7971266ff6d29bf786b910" translate="yes" xml:space="preserve">
          <source>These properties are listed in the order in which they occur during the navigation process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d1b535fb32806d374abdfbce171d60977fac683" translate="yes" xml:space="preserve">
          <source>These properties each describe the time at which a particular point in the page loading process was reached. Some correspond to DOM events; others describe the time at which internal browser operations of interest took place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e88d4dbcbe864ef724c4a9997e71e9ff32f40e6" translate="yes" xml:space="preserve">
          <source>These properties have been &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/deprecated&quot;&gt;deprecated&lt;/a&gt; and should no longer be used. They are documented primarily to help understand older code bases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b842c6fcd3d7a2e446f55ddf3a33b4c146bb49d1" translate="yes" xml:space="preserve">
          <source>These properties have been removed from the Payment Method: Basic Card specification and should no longer be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b49f67a7c32aee747a7e839530a8a36b76327565" translate="yes" xml:space="preserve">
          <source>These properties have been removed from the specification and should no longer be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="218b08a6a5d4723675abd323d41fe0dd5c165f90" translate="yes" xml:space="preserve">
          <source>These properties might be familiar to you, if you have worked with CSS before.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f159765f2fbe71b62bbbba938b6d82b5c6aaa671" translate="yes" xml:space="preserve">
          <source>These sources are collectively referred to by the type &lt;a href=&quot;../../canvasimagesource&quot;&gt;&lt;code&gt;CanvasImageSource&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="386f0e5157c5328b8098150dc1e9ab9d020228b8" translate="yes" xml:space="preserve">
          <source>These two are equivalent. In the first, &lt;code&gt;item()&lt;/code&gt; is the single method on the &lt;code&gt;nodeList&lt;/code&gt; object. The latter uses the typical array syntax to fetch the second item in the list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8a89fd7f943f9edb111238228217304d0295414" translate="yes" xml:space="preserve">
          <source>These two replacements also enable the HTML5 standard passage of arbitrary arguments to the callback functions of timers in IE. So they can be used as &lt;em&gt;non-standard-compliant&lt;/em&gt; polyfills also. See the &lt;a href=&quot;#Callback_arguments&quot;&gt;callback arguments paragraph&lt;/a&gt; for a &lt;em&gt;standard-compliant&lt;/em&gt; polyfill.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9593997401dabb5f77bb1fcfdbd52a7565d5c74c" translate="yes" xml:space="preserve">
          <source>These types are used within &lt;a href=&quot;using_extensions&quot;&gt;WebGL extensions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ef7edf5de6716bff91543d2b1dfb26bc9b6e317" translate="yes" xml:space="preserve">
          <source>These types are used within a &lt;a href=&quot;../webgl2renderingcontext&quot;&gt;&lt;code&gt;WebGL2RenderingContext&lt;/code&gt;&lt;/a&gt;. All WebGL 1 types are used as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e207e2aebc61dc272b811afe1a0f29df6eb231ff" translate="yes" xml:space="preserve">
          <source>These types are used within a &lt;a href=&quot;../webglrenderingcontext&quot;&gt;&lt;code&gt;WebGLRenderingContext&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d85b18bd4b6bf40358b79efd77203c14301ef1d8" translate="yes" xml:space="preserve">
          <source>These values are comparable to the computed styles of an Element returned using &lt;code&gt;window.getComputedStyle(elem)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60e98c6d7107d27f16bce801901447b2ce5914a8" translate="yes" xml:space="preserve">
          <source>These values are only estimates for several reasons, including both performance and preventing storage capacity data from being used for fingerprinting purposes. See the individual property pages for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b52a04e69b4f444f835ba5908ee67bb547dbf42" translate="yes" xml:space="preserve">
          <source>These values describe which phase the event flow is currently being evaluated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75579d8b8788f857e3e06caa52856f9d25c7aca0" translate="yes" xml:space="preserve">
          <source>These variables are used to manage the list of tasks that are waiting to be performed, as well as status information about the task queue and its execution:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20c2ca4409cb5f3c17cbb86be697f4423ef48692" translate="yes" xml:space="preserve">
          <source>These variables are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64b96854efa7f21d0cd1e0aa77ac30d7737e8cba" translate="yes" xml:space="preserve">
          <source>These variables will be used to store references to the dial button and the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div&quot;&gt;&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;&lt;/a&gt; into which logging information will be written. They'll get set up when the page is first loaded. See &lt;a href=&quot;#Initialization&quot;&gt;Initialization&lt;/a&gt; below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dd5f45468d7249ad4904a2ff926289482b672b5" translate="yes" xml:space="preserve">
          <source>These work in exactly the same way as &lt;code&gt;screenX&lt;/code&gt;/&lt;code&gt;screenY&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="652489284edfa9cf3f58cbeb8e988afda1c6482c" translate="yes" xml:space="preserve">
          <source>These, combined with additional values for other properties of the &lt;a href=&quot;../paymentaddress&quot;&gt;&lt;code&gt;PaymentAddress&lt;/code&gt;&lt;/a&gt;, would represent the full address, which is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01f29c90bdeaf2da2dae8d9a3918c0c800ac7774" translate="yes" xml:space="preserve">
          <source>They are read-only, but their counterpart, with the same name, in &lt;a href=&quot;dommatrix&quot;&gt;&lt;code&gt;DOMMatrix&lt;/code&gt;&lt;/a&gt; aren't.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="951c6c7803fc9518fff1c038ddcf792a20e4d131" translate="yes" xml:space="preserve">
          <source>They can also be created programmatically via JavaScript, but this is only really useful in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API&quot;&gt;&lt;code&gt;ServiceWorkers&lt;/code&gt;&lt;/a&gt;, when you are providing a custom response to a received request using a &lt;a href=&quot;../fetchevent/respondwith&quot;&gt;&lt;code&gt;respondWith()&lt;/code&gt;&lt;/a&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edd2516cc5afcfba72dc78eba774693f39fe306d" translate="yes" xml:space="preserve">
          <source>Things RTP doesn't do</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40a7ea113597dae6dfd33fd5ab0013d292582197" translate="yes" xml:space="preserve">
          <source>Things that don't work with structured clone</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="176d1270a4ec08e4a954fc89cb3ddf52fe730e7c" translate="yes" xml:space="preserve">
          <source>Things that trigger negotiation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3738a50c69fe9fcbd22969a5ff2e60471316b13" translate="yes" xml:space="preserve">
          <source>Things to avoid</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4824221375d3ce9b6f04cd13e1f0c90e7b5aac9d" translate="yes" xml:space="preserve">
          <source>Things to keep in mind</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0da42472b3dbe6143cca3d9ef365827712335a49" translate="yes" xml:space="preserve">
          <source>Things your users want to know</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9892199e599bdf28c3c4159f6d0724a42a97ed64" translate="yes" xml:space="preserve">
          <source>Think of a subprotocol as a custom &lt;a href=&quot;https://en.wikipedia.org/wiki/XML_schema&quot;&gt;XML schema&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/Document_Type_Definition&quot;&gt;doctype declaration&lt;/a&gt;. You're still using XML and its syntax, but you're additionally restricted by a structure you agreed on. WebSocket subprotocols are just like that. They do not introduce anything fancy, they just establish structure. Like a doctype or schema, both parties must agree on the subprotocol; unlike a doctype or schema, the subprotocol is implemented on the server and cannot be externally refered to by the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a8cf29266faf9bd2f28348fad2c5a8002189622" translate="yes" xml:space="preserve">
          <source>Think of an extension as compressing a file before e-mailing it to someone. Whatever you do, you're sending the &lt;em&gt;same&lt;/em&gt; data in different forms. The recipient will eventually be able to get the same data as your local copy, but it is sent differently. That's what an extension does. WebSockets defines a protocol and a simple way to send data, but an extension such as compression could allow sending the same data but in a shorter format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6383d5e0964b3c11743aa364449e9c94499eadd" translate="yes" xml:space="preserve">
          <source>Third party window content (e.g. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe&quot;&gt;&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;&lt;/a&gt; content) can access the IndexedDB store for the origin it is embedded into, unless the browser is set to &lt;a href=&quot;https://support.mozilla.org/en-US/kb/disable-third-party-cookies&quot;&gt;never accept third party cookies&lt;/a&gt; (see &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1147821&quot;&gt;bug 1147821&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74597a7753e031ab06568a761bc2da6c6d4687d0" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;../idbindex&quot;&gt;&lt;code&gt;IDBIndex&lt;/code&gt;&lt;/a&gt;'s transaction is inactive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cc3b26dc24d2f88b5e8527458659a068eec7d65" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;../idbobjectstore&quot;&gt;&lt;code&gt;IDBObjectStore&lt;/code&gt;&lt;/a&gt; has been deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b751e98eaac2c177a9f9f4dc71e38507fc1ea6f" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;../idbobjectstore&quot;&gt;&lt;code&gt;IDBObjectStore&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../idbindex&quot;&gt;&lt;code&gt;IDBIndex&lt;/code&gt;&lt;/a&gt; has been deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a16cac9b24ff131803e2077a48d2850dc13fe554" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;../idbobjectstore&quot;&gt;&lt;code&gt;IDBObjectStore&lt;/code&gt;&lt;/a&gt;'s transaction is inactive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="691a18f1d0b7225d6eeaa9dbcd91654aacccdb33" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;../sourcebuffer&quot;&gt;&lt;code&gt;SourceBuffer&lt;/code&gt;&lt;/a&gt; object is being updated (i.e. its &lt;a href=&quot;updating&quot;&gt;&lt;code&gt;SourceBuffer.updating&lt;/code&gt;&lt;/a&gt; property is currently &lt;code&gt;true&lt;/code&gt;), or this &lt;code&gt;SourceBuffer&lt;/code&gt; has been removed from the &lt;a href=&quot;../mediasource&quot;&gt;&lt;code&gt;MediaSource&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91aaca739a3d9cf346184c3ba09dd855a8199d8e" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Polyfill&quot;&gt;polyfill&lt;/a&gt; adds compatibility to all Browsers supporting &lt;a href=&quot;https://caniuse.com/#search=es5&quot;&gt;ES5&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a2c1acb3cee17f0f75a08a50ca5123bd67812cd" translate="yes" xml:space="preserve">
          <source>This &lt;em&gt;&lt;a href=&quot;../audiobuffer&quot;&gt;&lt;code&gt;AudioBuffer&lt;/code&gt;&lt;/a&gt;&lt;/em&gt; must have the same sample-rate as the &lt;code&gt;AudioContext&lt;/code&gt; or an exception will be thrown. At the time when this attribute is set, the buffer and the state of the attribute will be used to configure the &lt;code&gt;ConvolverNode&lt;/code&gt; with this impulse response having the given normalization. The initial value of this attribute is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39deeb8a2b385ab83888bf39251e1006f23d059a" translate="yes" xml:space="preserve">
          <source>This &lt;em&gt;is&lt;/em&gt; a little confusing, but what we're doing is using sin and cos to help us work out the circular motion the coordinates need for the rotation of the boombox.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c174037f42bdff2e7f596721f302d30e998fd83" translate="yes" xml:space="preserve">
          <source>This &lt;strong&gt;required&lt;/strong&gt; property is either a single &lt;a href=&quot;domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; or an array of &lt;a href=&quot;domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt;s, each specifying a URL which can be used to connect to the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="355ca8e73ffa0fa9c542b143e0c7fad3f84604e2" translate="yes" xml:space="preserve">
          <source>This API allows asynchronous read of &lt;a href=&quot;../blob&quot;&gt;&lt;code&gt;Blob&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../file&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d46c165022be2ce6d3c067a91f4b16e55b4c243" translate="yes" xml:space="preserve">
          <source>This API allows synchronous read of &lt;a href=&quot;../blob&quot;&gt;&lt;code&gt;Blob&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../file&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; objects. This is an API that works only in workers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df919cfd25897d3dc2638852a09ef1b1cf3d3fa0" translate="yes" xml:space="preserve">
          <source>This API has no official W3C or WHATWG specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa69a35f5ef7c966442e77e3e3d7341298985282" translate="yes" xml:space="preserve">
          <source>This API is designed to supersede accessing the clipboard using &lt;a href=&quot;document/execcommand&quot;&gt;&lt;code&gt;document.execCommand()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23090f3252892444fa02c12b398c56c6bdf9c159" translate="yes" xml:space="preserve">
          <source>This API is restricted to top-level contexts. Calls to &lt;code&gt;get()&lt;/code&gt; and &lt;code&gt;store()&lt;/code&gt; within an &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; element will resolve without effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff62dee57c4f09ac3b668f025cf5316345b4fd74" translate="yes" xml:space="preserve">
          <source>This API lets websites interact with a user agent&amp;rsquo;s password system so that websites can deal in a uniform way with site credentials and user agents can provide better assistance with the management of their credentials. For example, user agents have a particularly hard time dealing with federated identity providers or esoteric sign-in mechanisms that use more than just a username and password. To address these problems, the Credential Management API provides ways for a website to store and retrieve different types of credentials. This give users capabilities such as seeing the federated account they used to sign on to a site, or resuming a session without the explicit sign-in flow of an expired session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dad71b48b3e1d5813d4233ac6100133e11f0ab10" translate="yes" xml:space="preserve">
          <source>This API was moved to the &lt;code&gt;Element&lt;/code&gt; and &lt;code&gt;Attr&lt;/code&gt; APIs according to the DOM4 standard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="253e64c9f0a804b63343795db1804dabd011a452" translate="yes" xml:space="preserve">
          <source>This API was previously available on the &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/Node&quot;&gt;&lt;code&gt;Node&lt;/code&gt;&lt;/a&gt; API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e02c2994d68f7becce0fad8d06ecda2ef497564" translate="yes" xml:space="preserve">
          <source>This API was previously available on the&lt;code&gt;Node&lt;/code&gt; API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ff118404a521b4c3402072a38887d0b9dbd3276" translate="yes" xml:space="preserve">
          <source>This Boolean property stops the script's execution in browsers that support&lt;a href=&quot;https://hacks.mozilla.org/2015/08/es6-in-depth-modules/&quot;&gt; ES2015 modules&lt;/a&gt; &amp;mdash; used to run fallback scripts in older browsers that do &lt;em&gt;not&lt;/em&gt; support JavaScript modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="611662afe559078763db036e64a0cb29d21d7bfc" translate="yes" xml:space="preserve">
          <source>This HTML creates a panel (in a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div&quot;&gt;&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;&lt;/a&gt; block) that welcomes the user to a site and tells them what they're agreeing to by clicking the OK button.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a5e17defdbe6494d36481da8c1deece2e6ac90e" translate="yes" xml:space="preserve">
          <source>This IDBCursor's transaction is inactive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="171b4f1a41b679fe21230e49c0c3c3c108cbff43" translate="yes" xml:space="preserve">
          <source>This IDBIndex's transaction is inactive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a66f9a972ba3d70822a49955fea0b2bde4be6b33" translate="yes" xml:space="preserve">
          <source>This Property indicates how many bytes of data have been sent. The value is zero until &lt;code&gt;NetworkStream.DataAvailable&lt;/code&gt; is &lt;em&gt;true&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e0e1b0a75147eb2994dc5c5b885b540fe6d856f" translate="yes" xml:space="preserve">
          <source>This adds the &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; parameters, which indicate the size to which to scale the image when drawing it onto the canvas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf88e33eafdd45251159cf2ef25f1298ee334c5b" translate="yes" xml:space="preserve">
          <source>This all happens asynchronously.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fd958fbe858280fba2b10710baeae3bd7aeba3a" translate="yes" xml:space="preserve">
          <source>This also only works with the &lt;code&gt;lang&lt;/code&gt; attribute and not with &lt;code&gt;xml:lang&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34d01ae43990443e60442b78dae3887e2b1eaa84" translate="yes" xml:space="preserve">
          <source>This amends the previous example by looking at the contents of the &lt;code&gt;performance.navigation&lt;/code&gt; object. &lt;a href=&quot;../performancenavigation/type&quot;&gt;&lt;code&gt;performance.navigation.type&lt;/code&gt;&lt;/a&gt; indicates what kind of load operation took place: a navigation, a reload, or a shift through the browser's history. We also obtain the number of redirects that were incurred during the navigation from &lt;a href=&quot;../performancenavigation/redirectcount&quot;&gt;&lt;code&gt;performance.navigation.redirectCount&lt;/code&gt;&lt;/a&gt;. This information is output to the screen just like the page load time was previously: by inserting it into the element with class &lt;code&gt;&quot;output&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="471823c7a9f818f0a9f2d3341b211c2b8942647d" translate="yes" xml:space="preserve">
          <source>This application will only work on a browser that supports pointer events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d7cf787ab25324aaeaa14fd2544d212dbed030d" translate="yes" xml:space="preserve">
          <source>This article currently describes Navigation Timing Level 1. There is a specification for Level 2, but it is not yet covered here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5a900639552727efe6323d49608deb0f31ff380" translate="yes" xml:space="preserve">
          <source>This article demonstrates how to use a &lt;a href=&quot;../constantsourcenode&quot;&gt;&lt;code&gt;ConstantSourceNode&lt;/code&gt;&lt;/a&gt; to link multiple parameters together so they share the same value, which can be changed by simply setting the value of the &lt;a href=&quot;../constantsourcenode/offset&quot;&gt;&lt;code&gt;ConstantSourceNode.offset&lt;/code&gt;&lt;/a&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f78e3221b5052b6192b96863f61de295b3a1f7ab" translate="yes" xml:space="preserve">
          <source>This article demonstrates how to use the &lt;a href=&quot;../fullscreen_api&quot;&gt;Fullscreen API&lt;/a&gt; to place a given element into full-screen mode, as well as how to detect when the browser enters or exits full-screen mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="725bd3cf1a517194cbbfff5898fe47e0f93000c8" translate="yes" xml:space="preserve">
          <source>This article describes how the various WebRTC-related protocols interact with one another in order to create a connection and transfer data and/or media among peers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a495d7bef8cf7e019bd17c3f0baf7e52ae746a7" translate="yes" xml:space="preserve">
          <source>This article discusses some of the concepts and theory behind virtual reality (VR). If you are a newcomer to the area, it is worthwhile getting an understanding of these topics before you start diving into code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ac4e464991e0b9f4da285254b21fedeb59c7bef" translate="yes" xml:space="preserve">
          <source>This article doesn't get into details of the actual APIs involved in establishing and handling a WebRTC connection; it simply reviews the process in general with some information about why each step is required. See &lt;a href=&quot;signaling_and_video_calling&quot;&gt;Signaling and video calling&lt;/a&gt; for an actual example with a step-by-step explanation of what's the code does.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63f7121755ed932ab5ce73d361ee94a55a855b4c" translate="yes" xml:space="preserve">
          <source>This article explains an edge case that occurs with fetch (and potentially other APIs exhibiting the same kind of resource retrieval behavior). When a cross-origin fetch involving a relative URL is initiated from an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe&quot;&gt;&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;&lt;/a&gt;, the relative URL used to be resolved against the current global location, rather than the iframe's location.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7adfc2595765b418308ebfc06065b6df39d1709c" translate="yes" xml:space="preserve">
          <source>This article explains some of the audio theory behind how the features of the Web Audio API work, to help you make informed decisions while designing how audio is routed through your app. It won't turn you into a master sound engineer, but it will give you enough background to understand why the Web Audio API works like it does.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db8d5072b2410f2f7c78c11a2b98dbc0c6d3bb44" translate="yes" xml:space="preserve">
          <source>This article explores how to take data within a WebGL project, and project it into the proper spaces to display it on the screen. It assumes a knowledge of basic matrix math using translation, scale, and rotation matrices. It explains the three core matrices that are typically used to represent a 3D object: the model, view and projection matrices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d928d97834f4c4d90a8e27643d03ef9f6625d926" translate="yes" xml:space="preserve">
          <source>This article has given you a very basic idea of how to use the Gamepad Extensions to use VR controllers inside WebVR apps. In a real app you'd probably have a much more complex control system in effect, with controls assigned to the buttons on the VR controllers, and the display being affected by both the display pose and the controller poses simultaneously. Here however, we just wanted to isolate the pure Gamepad Extensions parts of that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5ca011d3bd4c665e9446857ffc9dc739282cda9" translate="yes" xml:space="preserve">
          <source>This article has given you the very basics of how to create a simple WebVR 1.1 app, to help you get started.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe4a100cf9125ef03cdcf891d5f9cec805bac258" translate="yes" xml:space="preserve">
          <source>This article introduces the protocols on top of which the WebRTC API is built.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef7200868160b2fd55ee5205a4adca29b47ca8ab" translate="yes" xml:space="preserve">
          <source>This article is an overview of some powerful, fundamental DOM level 1 methods and how to use them from JavaScript. You will learn how to create, access and control, and remove HTML elements dynamically. The DOM methods presented here are not specific to HTML; they also apply to XML. The demonstrations provided here will work fine in any modern browser, including all versions of Firefox and IE 5+.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="389fb99613c3221620b47bea3898d0ec5ae76f7a" translate="yes" xml:space="preserve">
          <source>This article offers suggestions and tips to improve your WebGL content. Following these suggestions can help improve your web application's compatibility with more devices and browsers, as well as increase its performance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f7d2c5b6006e345bdf65ccf7498a50d8aaa7291" translate="yes" xml:space="preserve">
          <source>This article presents the code and working demo of a video keyboard you can play using the mouse. The keyboard allows you to switch among the standard waveforms as well as one custom waveform, and you can control the master gain using a volume slider beneath the keyboard. This example makes use of the following Web API interfaces: &lt;a href=&quot;../audiocontext&quot;&gt;&lt;code&gt;AudioContext&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../oscillatornode&quot;&gt;&lt;code&gt;OscillatorNode&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../periodicwave&quot;&gt;&lt;code&gt;PeriodicWave&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../gainnode&quot;&gt;&lt;code&gt;GainNode&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dd71977027d74d3cda3a8b03b46a28d86167f07" translate="yes" xml:space="preserve">
          <source>This article provides a useful summary of best practices to keep in mind when developing web sites and applications that use Push Notifications for user engagement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fd57a9e6c01519f95e4cebde9f971b3d777ec5d" translate="yes" xml:space="preserve">
          <source>This article provides a walkthrough of how to make use of this simple technology.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1821d5ed750cd8c9a306517f4934976acd0c8a45" translate="yes" xml:space="preserve">
          <source>This article provides an interesting real-world example of using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas&quot;&gt;&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;&lt;/a&gt; element to do software rendering of a 3D environment using ray-casting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="736f76c3e35560d26b90ffc22adb6c23bea7b4e2" translate="yes" xml:space="preserve">
          <source>This article provides information on getting started with service workers, including basic architecture, registering a service worker, the install and activation process for a new service worker, updating your service worker, cache control and custom responses, all in the context of a simple app with offline functionality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cdecbf0913aeb5cf529a9149bc7b715c9e86a6c" translate="yes" xml:space="preserve">
          <source>This article shows how to use WebRTC to access the camera on a computer or mobile phone with WebRTC support and take a photo with it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f037f6bcfe634b68cdfb511a8929db7df912e56" translate="yes" xml:space="preserve">
          <source>This article shows how to use WebRTC to access the camera on a computer or mobile phone with WebRTC support and take a photo with it. &lt;a href=&quot;https://mdn-samples.mozilla.org/s/webrtc-capturestill&quot;&gt;Try this sample&lt;/a&gt; then read on to learn how it works.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04fcfc8edaedb085eb3143f05deedb059849b685" translate="yes" xml:space="preserve">
          <source>This article will introduce you to the basics of using WebGL. It's assumed that you already have an understanding of the mathematics involved in 3D graphics, and this article doesn't pretend to try to teach you 3D graphics concepts itself. We have a beginner-oriented guide, complete with coding assignments to complete, in our Learning Area: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/WebGL&quot;&gt;Learn WebGL for 2D and 3D graphics&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc134eb54626d01b289b889eda59423ebe98a5c4" translate="yes" xml:space="preserve">
          <source>This asks &lt;a href=&quot;../rtcpeerconnection&quot;&gt;&lt;code&gt;RTCPeerConnection&lt;/code&gt;&lt;/a&gt; to create and return a new answer. In our promise handler, the returned answer is set as the description of the local end of the connection by calling &lt;a href=&quot;setlocaldescription&quot;&gt;&lt;code&gt;setLocalDescription()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7fedaabcf76bf3a6947d615bf4395bef476764f" translate="yes" xml:space="preserve">
          <source>This attribute is only populated if the constructor is called with the &lt;code&gt;requestShipping&lt;/code&gt; flag set to &lt;code&gt;true&lt;/code&gt;. If &lt;code&gt;requestShipping&lt;/code&gt; was &lt;code&gt;false&lt;/code&gt; (or missing), &lt;code&gt;shippingOption&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt;, even the developer provides a selected a shipping option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb3de18807c8e44ed053ce8dc7fcf07cc48ff547" translate="yes" xml:space="preserve">
          <source>This attribute supports providing multiple certificates because even though a given DTLS connection uses only one certificate, providing multiple certificates allows support for multiple encryption algorithms. The implementation of &lt;code&gt;RTCPeerConnection&lt;/code&gt; will choose which certificate to use based on the algorithms it and the remote peer support, as determined during DTLS handshake.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cec279e233032970cd34bfb7d06d52f36ff678e4" translate="yes" xml:space="preserve">
          <source>This attribute was added to the specification in SVG 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97a5a54267dc44fd4ba09d929b4cedc1ac27a52c" translate="yes" xml:space="preserve">
          <source>This basically means all &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;typed arrays&lt;/a&gt; like Int32Array etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd8db3ab5c47451d5e2297a4363a832a818ff586" translate="yes" xml:space="preserve">
          <source>This begins by creating an offer by calling &lt;a href=&quot;createoffer&quot;&gt;&lt;code&gt;createOffer()&lt;/code&gt;&lt;/a&gt;; when that succeeds, we call &lt;code&gt;setLocalDescription()&lt;/code&gt;. The fulfillment handler for that promise can then send the newly-created offer along to the other peer using the signaling server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82151d74cf7c1600d034122acff7b72b21e30a60" translate="yes" xml:space="preserve">
          <source>This begins by setting up an &lt;code&gt;options&lt;/code&gt; object containing the settings for the observer. We want to watch for changes in visibility of the target element relative to the document's viewport, so &lt;code&gt;root&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;. We need no margin, so the margin offset, &lt;code&gt;rootMargin&lt;/code&gt;, is specified as &quot;0px&quot;. This causes the observer to watch for changes in the intersection between the target element's bounds and those of the viewport, without any added (or subtracted) space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99ca1b43323f1977f57351c6684de783d379663c" translate="yes" xml:space="preserve">
          <source>This begins with a basic sanity check: is the user even connected? If there's no &lt;a href=&quot;../rtcpeerconnection&quot;&gt;&lt;code&gt;RTCPeerConnection&lt;/code&gt;&lt;/a&gt;, they obviously can't make a call. Then the name of the user that was clicked upon is obtained from the event target's &lt;a href=&quot;../node/textcontent&quot;&gt;&lt;code&gt;textContent&lt;/code&gt;&lt;/a&gt; property, and we check to be sure that it's not the same user that's trying to start the call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4353405496d2d0c6341382b41452f362103152c" translate="yes" xml:space="preserve">
          <source>This behavior has been changed in the latest spec, and if omitted, the method will act as if the value of &lt;code&gt;deep&lt;/code&gt; was &lt;code&gt;false&lt;/code&gt;. Though it's still optional, you should always provide the &lt;code&gt;deep&lt;/code&gt; argument both for backward and forward compatibility. With Gecko 28.0 (Firefox 28 / Thunderbird 28 / SeaMonkey 2.25 / Firefox OS 1.3)), the console warned developers not to omit the argument. Starting with Gecko 29.0 (Firefox 29 / Thunderbird 29 / SeaMonkey 2.26)), a shallow clone is defaulted instead of a deep clone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a93c69779dba687c18b36481dfe58c6ef4028d03" translate="yes" xml:space="preserve">
          <source>This builds an object containing the candidate, then sends it to the other peer using the &lt;code&gt;sendToServer()&lt;/code&gt; function previously described in &lt;a href=&quot;#Sending_messages_to_the_signaling_server&quot;&gt;Sending messages to the signaling server&lt;/a&gt;. The message's properties are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fc44bf6799b291b1c3d76edb9ae44ab2f3c1a64" translate="yes" xml:space="preserve">
          <source>This builds the array of thresholds&amp;mdash;each of which is a ratio between 0.0 and 1.0, by pushing the value &lt;code&gt;i/numSteps&lt;/code&gt; onto the &lt;code&gt;thresholds&lt;/code&gt; array for each integer &lt;code&gt;i&lt;/code&gt; between 1 and &lt;code&gt;numSteps&lt;/code&gt;. It also pushes 0 to include that value. The result, given the default value of &lt;code&gt;numSteps&lt;/code&gt; (20), is the following list of thresholds:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="180433b2bbb7f8f1221c9a3f1700ddd55e0a0926" translate="yes" xml:space="preserve">
          <source>This callback does nothing unless it's the first time it's been called; this is tested by looking at the value of our &lt;code&gt;streaming&lt;/code&gt; variable, which is &lt;code&gt;false&lt;/code&gt; the first time this method is run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e9fee7c1c67c6ae29ef2f953e8b7141de0f8d91" translate="yes" xml:space="preserve">
          <source>This calls &lt;a href=&quot;event/preventdefault&quot;&gt;&lt;code&gt;event.preventDefault()&lt;/code&gt;&lt;/a&gt; to keep the browser from continuing to process the touch event (this also prevents a mouse event from also being delivered). Then we get the context and pull the list of changed touch points out of the event's &lt;a href=&quot;touchevent/changedtouches&quot;&gt;&lt;code&gt;TouchEvent.changedTouches&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e81f604cb7d7eed24c112dcd1c2b4dfb6efd24c4" translate="yes" xml:space="preserve">
          <source>This can also be thought of as a path which is relative to the root directory, with a &quot;/&quot; prepended to it to make it absolute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5c0bfcc105615d208b04badb928fb29787f0133" translate="yes" xml:space="preserve">
          <source>This can be also useful for logging and debugging purposes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eae0e0d0bec4036d3982f94038aa75527b88b50a" translate="yes" xml:space="preserve">
          <source>This can be used, for example, as a source for a &lt;a href=&quot;../webrtc_api&quot;&gt;WebRTC&lt;/a&gt;&lt;a href=&quot;../rtcpeerconnection&quot;&gt;&lt;code&gt;RTCPeerConnection&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c00e67da12a1a56ef21b3d6902e2326f5d19c0e9" translate="yes" xml:space="preserve">
          <source>This can be useful for routing to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input&quot;&gt;&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;&lt;/a&gt; elements, for example. See also this &lt;a href=&quot;https://codepen.io/peterj35/pen/PEdLKx&quot;&gt;codepen demo&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e46eb11b2376b3414d8c50362bdc8b864fda03a" translate="yes" xml:space="preserve">
          <source>This can complicate things, since you don't necessarily know what the size limits are for various user agents, and how they respond when a larger message is sent or received. Even when user agents share the same underlying library for handling Stream Control Transmission Protocol (SCTP) data, there can still be variations due to how the library is used. For example, both Firefox and Google Chrome use the &lt;code&gt;&lt;a href=&quot;https://github.com/sctplab/usrsctp&quot;&gt;usrsctp&lt;/a&gt;&lt;/code&gt; library to implement SCTP, but there are still situations in which data transfer on an &lt;code&gt;RTCDataChannel&lt;/code&gt; can fail due to differences in how they call the library and react to errors it returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f02a53b5319c62da1b98a163edd5faad95cb6b24" translate="yes" xml:space="preserve">
          <source>This can happen for a number of reasons:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b473495e2c11a7353d6192ff2d917a07e2939a15" translate="yes" xml:space="preserve">
          <source>This can happen in a couple of situations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52af7bbde8a195872fbc1d8f5bbc65c427b1c413" translate="yes" xml:space="preserve">
          <source>This can have a big effect if the sound is very directional &amp;mdash; controlled by the three cone-related attributes &lt;a href=&quot;coneinnerangle&quot;&gt;&lt;code&gt;PannerNode.coneInnerAngle&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;coneouterangle&quot;&gt;&lt;code&gt;PannerNode.coneOuterAngle&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;coneoutergain&quot;&gt;&lt;code&gt;PannerNode.coneOuterGain&lt;/code&gt;&lt;/a&gt;. In such a case, a sound pointing away from the listener can be very quiet or even silent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dffbf5f113f41683ecfe17e72307e4ec4b2f4ec" translate="yes" xml:space="preserve">
          <source>This can make things a bit harder for any users of the DOM who want to iterate through content, excluding the whitespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cfc9983ec11bc1664f2bd5270a9c176951714bb" translate="yes" xml:space="preserve">
          <source>This candidate examines the &lt;code&gt;priority&lt;/code&gt; of the candidate and, if it's greater than the priority of a previously-seen candidate, remembers the candidate for later use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23a444dc6e6b85ec15f5f290c1c5f03b014f6bb1" translate="yes" xml:space="preserve">
          <source>This causes a context that is currently using a hardware-accelerated backend to fallback to a software one. All state should be preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90dc05814d2d0a1e15cf2acc763576a2d3361f30" translate="yes" xml:space="preserve">
          <source>This change is implemented in Chrome since version 46.0 and Firefox since version 48.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46d584e35266d56f7d8dc3929fc14f9882edbbac" translate="yes" xml:space="preserve">
          <source>This changes Alice&amp;rsquo;s color and her transform&amp;rsquo;s rotation over 3 seconds at a constant (linear) rate and loops infinitely. In the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes&quot;&gt;@keyframes&lt;/a&gt; block we can see that 30% of the way through each loop (about .9 seconds in), Alice&amp;rsquo;s color changes from black to a deep burgundy then back again by the end of the loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="634c4bd1d74eb673f7dd805adbc6b98fd7845e78" translate="yes" xml:space="preserve">
          <source>This chapter describes the DOM Event Model. The &lt;a href=&quot;http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-Event&quot;&gt;Event&lt;/a&gt; interface itself is described, as well as the interfaces for event registration on nodes in the DOM, and &lt;a href=&quot;../eventtarget/addeventlistener&quot;&gt;event listeners&lt;/a&gt;, and several longer examples that show how the various event interfaces relate to one another.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a2851599dc3a3bfd54ca2b61870665cb13558c5" translate="yes" xml:space="preserve">
          <source>This chapter provides some longer examples of web and XML development using the DOM. Wherever possible, the examples use common APIs, tricks, and patterns in JavaScript for manipulating the document object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f879d3c7fe3e7e9484fd1c6af44389f38f0271df" translate="yes" xml:space="preserve">
          <source>This character instructs the dialing process to pause for two seconds before sending the next character in the buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b680af1fae190e09f829ae224af0be4a6ee1dbc" translate="yes" xml:space="preserve">
          <source>This code &amp;mdash; a snippet taken from the full example &lt;a href=&quot;../webgl_api/basic_2d_animation_example&quot;&gt;A basic 2D WebGL animation example&lt;/a&gt; &amp;mdash; shows the use of &lt;code&gt;enableVertexArray()&lt;/code&gt; to activate the attribute that will be used by the WebGL layer to pass individual vertexes from the vertex buffer into the vertex shader function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="611e2d96aba46178458dc3ec24df6c41bfa3e6fa" translate="yes" xml:space="preserve">
          <source>This code actually sets up the observation process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a66f5221b744c34b5d51ac4cfcbf33a1c8f7987" translate="yes" xml:space="preserve">
          <source>This code adds simple support for tabs to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea&quot;&gt;&lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;&lt;/a&gt; elements by making the tab key insert two space characters when either constraint edit box is focused.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0185603a88201b725431f8b6bb6bbf8be62a4c54" translate="yes" xml:space="preserve">
          <source>This code block waits for an &lt;a href=&quot;../installevent&quot;&gt;&lt;code&gt;InstallEvent&lt;/code&gt;&lt;/a&gt; to fire, then calls &lt;a href=&quot;../extendableevent/waituntil&quot;&gt;&lt;code&gt;waitUntil()&lt;/code&gt;&lt;/a&gt; to handle the install process for the app. This consists of calling &lt;a href=&quot;../cachestorage/open&quot;&gt;&lt;code&gt;CacheStorage.open&lt;/code&gt;&lt;/a&gt; to create a new cache, then using &lt;a href=&quot;add&quot;&gt;&lt;code&gt;Cache.add&lt;/code&gt;&lt;/a&gt; to add an asset to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6384e63587316d25bbf1ff41234ea414dc931469" translate="yes" xml:space="preserve">
          <source>This code block waits for an &lt;a href=&quot;../installevent&quot;&gt;&lt;code&gt;InstallEvent&lt;/code&gt;&lt;/a&gt; to fire, then runs &lt;a href=&quot;../extendableevent/waituntil&quot;&gt;&lt;code&gt;waitUntil()&lt;/code&gt;&lt;/a&gt; to handle the install process for the app. This consists of calling &lt;a href=&quot;../cachestorage/open&quot;&gt;&lt;code&gt;CacheStorage.open&lt;/code&gt;&lt;/a&gt; to create a new cache, then using &lt;code&gt;addAll()&lt;/code&gt; to add a series of assets to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccf49c4b0c557a62c2a6d9d28fd80279db261752" translate="yes" xml:space="preserve">
          <source>This code checks for the existence of the &lt;code&gt;requestFullscreen()&lt;/code&gt; method before calling it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c84361cc7c679cfeaaee25ffea164fc66e9b0243" translate="yes" xml:space="preserve">
          <source>This code checks if the browser supports service workers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e9cb27c1ae8e5986b59de0eef32a4a080ec8b0f" translate="yes" xml:space="preserve">
          <source>This code configures a data channel to receive binary data in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ArrayBuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; objects, and establishes a listener for &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/message&quot;&gt;message&lt;/a&gt;&lt;/code&gt; events which constructs a string representing the received data as a list of hexadecimal byte values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c56ed069eb6be154e45f277af140e3f0d7f9ba8" translate="yes" xml:space="preserve">
          <source>This code creates a handler for the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/load&quot;&gt;load&lt;/a&gt;&lt;/code&gt; event on the &lt;a href=&quot;window&quot;&gt;&lt;code&gt;window&lt;/code&gt;&lt;/a&gt; which in turn adds the needed &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/click&quot;&gt;click&lt;/a&gt;&lt;/code&gt; event handler to the &quot;Donate Now&quot; button so that clicking it starts the payment process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca5692b0b41d96ff65b3a261e09be32f3374dcb3" translate="yes" xml:space="preserve">
          <source>This code creates a new &lt;a href=&quot;paymentrequest&quot;&gt;&lt;code&gt;PaymentRequest&lt;/code&gt;&lt;/a&gt;, providing the supported handlers and payment options we set up above, as well as additional options (in this case, that we want to ask for shipping information).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02b09a94925750312737f4a46e5baa8c2e07bebb" translate="yes" xml:space="preserve">
          <source>This code example illustrates the use of the &lt;a href=&quot;../touchlist&quot;&gt;&lt;code&gt;TouchList&lt;/code&gt;&lt;/a&gt; interface's &lt;a href=&quot;item&quot;&gt;&lt;code&gt;item&lt;/code&gt;&lt;/a&gt; method and the &lt;a href=&quot;length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2670a11ac1873da6ca59a1a0e535103a53263594" translate="yes" xml:space="preserve">
          <source>This code fetches the incoming video &lt;a href=&quot;../mediastream&quot;&gt;&lt;code&gt;MediaStream&lt;/code&gt;&lt;/a&gt; from the &lt;code&gt;&quot;received_video&quot;&lt;/code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video&quot;&gt;&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;&lt;/a&gt; element's &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-srcobject&quot;&gt;srcobject&lt;/a&gt;&lt;/code&gt; attribute, then calls the stream's &lt;a href=&quot;../mediastream/gettracks&quot;&gt;&lt;code&gt;getTracks()&lt;/code&gt;&lt;/a&gt; method to get an array of the stream's tracks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="325f36fb73c19a6f4712bffae7749c15827d8475" translate="yes" xml:space="preserve">
          <source>This code finds descendant elements with the &lt;code&gt;&quot;colorbox&quot;&lt;/code&gt; class, adds the class &lt;code&gt;&quot;hueframe&quot;&lt;/code&gt;, by calling &lt;code&gt;item(0), &lt;/code&gt;then removes &lt;code&gt;&quot;colorbox&quot; &lt;/code&gt;(using array notation). Another element (if any are left) will then become &lt;code&gt;item(0)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a51cb8b9c83238a78ae3c50c0a9acda7e8c7d19" translate="yes" xml:space="preserve">
          <source>This code finds the ad's timer using its ID, &lt;code&gt;&quot;timer&quot;&lt;/code&gt;, and computes the number of seconds elapsed by dividing the ad's &lt;code&gt;totalViewTime&lt;/code&gt; by 1000. Then it calculates the number of minutes and seconds elapsed before setting the timer's &lt;a href=&quot;../htmlelement/innertext&quot;&gt;&lt;code&gt;innerText&lt;/code&gt;&lt;/a&gt; to a string representing that time in the form m:ss. The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart&quot;&gt;&lt;code&gt;String.padStart()&lt;/code&gt;&lt;/a&gt; method is used to ensure that the number of seconds is padded out to two digits if it's less than 10.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cfa1e37607e13d81dc945a13340c7ec95c9126a" translate="yes" xml:space="preserve">
          <source>This code gives us a result like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdfcfa130b47e8ae408b9ddc4119c70412560d56" translate="yes" xml:space="preserve">
          <source>This code grabs references to the elements in the XHTML document that are of particular interest, namely the &lt;code&gt;video&lt;/code&gt; element and the two &lt;code&gt;canvas&lt;/code&gt; elements. It also fetches references to the graphics contexts for each of the two canvases. These will be used when we're actually doing the chroma-keying effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bdc075fa8dce1e6680fce6dd790f227e8ba7a16" translate="yes" xml:space="preserve">
          <source>This code is analogous to the &lt;code&gt;icecandidate&lt;/code&gt; event handler for the caller, seen in &lt;a href=&quot;#Adding_candidates_to_the_caller&quot;&gt;Adding candidates to the caller&lt;/a&gt; above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9390ceda27316274f56344fe186d0a04ebf0440b" translate="yes" xml:space="preserve">
          <source>This code is called by the event handler above when the user hits the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9a093440844702b770d08ddddb47b9f97a54de9" translate="yes" xml:space="preserve">
          <source>This code is called when the user hits the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb9674e620e6fa142b0da4c3011ee9f1b68a2a71" translate="yes" xml:space="preserve">
          <source>This code is excerpted from our &lt;a href=&quot;https://github.com/mdn/web-speech-api/blob/master/speech-color-changer/script.js&quot;&gt;Speech color changer&lt;/a&gt; example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3307b4570270ca003e1b156447546376026d71f8" translate="yes" xml:space="preserve">
          <source>This code is similar, except that it will be called automatically whenever the server sends a message with the &lt;code&gt;event&lt;/code&gt; field set to &quot;ping&quot;; it then parses the JSON in the &lt;code&gt;data&lt;/code&gt; field and outputs that information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26862a0825b89781d69fe8df42b99f67288528dc" translate="yes" xml:space="preserve">
          <source>This code is very similar to what we did in the &lt;code&gt;invite()&lt;/code&gt; function back in &lt;a href=&quot;#Starting_a_call&quot;&gt;Starting a call&lt;/a&gt;. It starts by creating and configuring an &lt;a href=&quot;../rtcpeerconnection&quot;&gt;&lt;code&gt;RTCPeerConnection&lt;/code&gt;&lt;/a&gt; using our &lt;code&gt;createPeerConnection()&lt;/code&gt; function. Then it takes the SDP offer from the received &lt;code&gt;&quot;video-offer&quot;&lt;/code&gt; message and uses it to create a new &lt;a href=&quot;../rtcsessiondescription&quot;&gt;&lt;code&gt;RTCSessionDescription&lt;/code&gt;&lt;/a&gt; object representing the caller's session description.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45d87c6a0c71d130e985162fc3c46b6df402989b" translate="yes" xml:space="preserve">
          <source>This code lets you handle things differently when the window is very narrow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81dd9019c9d41bdaad185b29dd84ba24afcb375f" translate="yes" xml:space="preserve">
          <source>This code listens for incoming messages (that is, notices from the server that do not have an &lt;code&gt;event&lt;/code&gt; field on them) and appends the message text to a list in the document's HTML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="356c1026755b1461cf3cda8bab14f1e29efba3c8" translate="yes" xml:space="preserve">
          <source>This code now looks at the pending message to see if it has a &lt;code&gt;target&lt;/code&gt; property. If that property is present, it specifies the username of the client to which the message is to be sent, and we call &lt;code&gt;sendToOneUser()&lt;/code&gt; to send the message to them. Otherwise, the message is broadcast to all users by iterating over the connection list, sending the message to each user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56935f567bea894577b24035ebabc9f2d18c6518" translate="yes" xml:space="preserve">
          <source>This code obtains a reference to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas&quot;&gt;&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;&lt;/a&gt;, then gets a reference to its 2D graphics context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48af5c95278d984b1b40acc81c2624176165534e" translate="yes" xml:space="preserve">
          <source>This code sample is inspired by the Web Dictaphone demo. Some lines have been omitted for brevity; &lt;a href=&quot;https://github.com/mdn/web-dictaphone/&quot;&gt;refer to the source&lt;/a&gt; for the complete code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9965db5f9d4867c586d2e69e1730daccffadcc8" translate="yes" xml:space="preserve">
          <source>This code sets the buffer of vertexes that will be used to draw the triangles of the shape by calling &lt;a href=&quot;bindbuffer&quot;&gt;&lt;code&gt;bindBuffer()&lt;/code&gt;&lt;/a&gt;. Then the vertex position attribute's index is obtained from the shader program by calling &lt;a href=&quot;getattriblocation&quot;&gt;&lt;code&gt;getAttribLocation()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54303dd7110d5068b33f0fd4385a696ede20a3ca" translate="yes" xml:space="preserve">
          <source>This code sets up a handler for the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/merchantvalidation&quot;&gt;merchantvalidation&lt;/a&gt;&lt;/code&gt; event. The event handler calls a function, &lt;code&gt;getValidationData()&lt;/code&gt;, which retrieves the data from the validation URL, then passes that data (or a promise to deliver the data) into &lt;code&gt;complete()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c857939a3eb6bed2b5adc86676c80ac61b44788" translate="yes" xml:space="preserve">
          <source>This code sets up a handler for the welcome panel's &quot;OK&quot; button that hides the welcome panel and makes the follow-up panel&amp;mdash;with the curious name &quot;awesome&quot;&amp;mdash;visible in its place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5705b4e74ea55c89499ca4aecb928913f3836141" translate="yes" xml:space="preserve">
          <source>This code sets up the global values used by the rest of the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="403a61eab5dc884a0a7cc847beefeb6d371bee80" translate="yes" xml:space="preserve">
          <source>This code shows how to get the lists of supported codecs for both sender and receiver:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fdca42e863a2ff0b1f1fb8209fe2d8f6fe0b9c0" translate="yes" xml:space="preserve">
          <source>This code snippet creates a peer connection, adds a data channel to it, and starts creating new &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p&quot;&gt;&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;&lt;/a&gt; (paragraph) elements each time a message arrives, with the message's contents displayed inside it. The new elements are then attached to the end of the document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="038d9492006293f5d84b1f174207df4321acf792" translate="yes" xml:space="preserve">
          <source>This code snippet demonstrates the creation of a new &lt;code&gt;Worker&lt;/code&gt; using the &lt;a href=&quot;worker/worker&quot;&gt;&lt;code&gt;Worker()&lt;/code&gt;&lt;/a&gt; constructor; it also shows how to then send a message to the worker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fc86fcd4bad8b0a50e7edecdd752779ca02cffa" translate="yes" xml:space="preserve">
          <source>This code snippet erases the entire canvas. This is commonly required at the start of each frame in an animation. The dimensions of the cleared area are set to equal the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas&quot;&gt;&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;&lt;/a&gt; element's &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="911922ed2cb63ceb8eb6261b3e16bf0191de647d" translate="yes" xml:space="preserve">
          <source>This code snippet examines a candidate's component type and dispatches the candidate to different handlers depending on the value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5943cf2e08726b731f0ecd888f25a0b0e0696bd3" translate="yes" xml:space="preserve">
          <source>This code snippet examines the value of &lt;code&gt;protocol&lt;/code&gt; to decide if it should look at the value of &lt;a href=&quot;tcptype&quot;&gt;&lt;code&gt;tcpType&lt;/code&gt;&lt;/a&gt; to see if it's a &lt;strong&gt;simultaneous-open&lt;/strong&gt; (&lt;strong&gt;S-O&lt;/strong&gt;) candidate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a3a31a855be3e97cfa673e65c564bfce766038a" translate="yes" xml:space="preserve">
          <source>This code snippet fetches the IP address and port number of the candidate, storing them into an object for future use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a92e92a422a41c3280e6d0412966f57aef8619fd" translate="yes" xml:space="preserve">
          <source>This code snippet fills the entire canvas with a rectangle. This is often useful for creating a background, on top of which other things may then be drawn. To achieve this, the dimensions of the rectangle are set to equal the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas&quot;&gt;&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;&lt;/a&gt; element's &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e6154705bb0c42add68211365561a979cfcf1aa" translate="yes" xml:space="preserve">
          <source>This code snippet is for the global context:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e805dd184fb47e783f14910fb244d6bee386dd9e" translate="yes" xml:space="preserve">
          <source>This code snippet is for the worker (&lt;code&gt;worker-using.js&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee0c2f03b8d8f1fab60322bbaaeca2d95cfd2eed" translate="yes" xml:space="preserve">
          <source>This code snippet is from the &lt;a href=&quot;https://github.com/GoogleChrome/samples/blob/gh-pages/service-worker/prefetch/service-worker.js&quot;&gt;service worker fetch sample&lt;/a&gt; (&lt;a href=&quot;https://googlechrome.github.io/samples/service-worker/prefetch/&quot;&gt;run the fetch sample live&lt;/a&gt;). The &lt;a href=&quot;../serviceworkerglobalscope/onfetch&quot;&gt;&lt;code&gt;ServiceWorkerGlobalScope.onfetch&lt;/code&gt;&lt;/a&gt; event handler listens for the &lt;code&gt;fetch&lt;/code&gt; event. When fired, &lt;a href=&quot;respondwith&quot;&gt;&lt;code&gt;FetchEvent.respondWith(any value)&lt;/code&gt;&lt;/a&gt; returns a promise back to the controlled page. This promise resolves to the first matching URL request in the &lt;a href=&quot;../cache&quot;&gt;&lt;code&gt;Cache&lt;/code&gt;&lt;/a&gt; object. If no match is found, the code fetches a response from the network.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49a6649568fd665fb01df331edb8d3a71cf20929" translate="yes" xml:space="preserve">
          <source>This code snippet is from the &lt;a href=&quot;https://github.com/GoogleChrome/samples/blob/gh-pages/service-worker/prefetch/service-worker.js&quot;&gt;service worker fetch sample&lt;/a&gt; (see &lt;a href=&quot;https://googlechrome.github.io/samples/service-worker/prefetch/&quot;&gt;prefetch example live&lt;/a&gt;.) The &lt;a href=&quot;onfetch&quot;&gt;&lt;code&gt;ServiceWorkerGlobalScope.onfetch&lt;/code&gt;&lt;/a&gt; event handler listens for the &lt;code&gt;fetch&lt;/code&gt; event. When fired, the code returns a promise that resolves to the first matching request in the &lt;a href=&quot;../cache&quot;&gt;&lt;code&gt;Cache&lt;/code&gt;&lt;/a&gt; object. If no match is found, the code fetches a response from the network.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d00d7c04508d5955c2fa534c8706984ff0e59f7" translate="yes" xml:space="preserve">
          <source>This code snippet is from the &lt;a href=&quot;https://github.com/GoogleChrome/samples/blob/gh-pages/service-worker/prefetch/service-worker.js&quot;&gt;service worker prefetch sample&lt;/a&gt; (see &lt;a href=&quot;https://googlechrome.github.io/samples/service-worker/prefetch/&quot;&gt;prefetch example live&lt;/a&gt;.) The &lt;a href=&quot;serviceworkerglobalscope/onfetch&quot;&gt;&lt;code&gt;ServiceWorkerGlobalScope.onfetch&lt;/code&gt;&lt;/a&gt; event handler listens for the &lt;code&gt;fetch&lt;/code&gt; event. When fired, the code returns a promise that resolves to the first matching request in the &lt;a href=&quot;cache&quot;&gt;&lt;code&gt;Cache&lt;/code&gt;&lt;/a&gt; object. If no match is found, the code fetches a response from the network.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40df95a8e8aa7c92f22da2addd03478025791ae2" translate="yes" xml:space="preserve">
          <source>This code snippet is from the &lt;a href=&quot;https://github.com/GoogleChrome/samples/blob/gh-pages/service-worker/prefetch/service-worker.js&quot;&gt;service worker prefetch sample&lt;/a&gt; (see &lt;a href=&quot;https://googlechrome.github.io/samples/service-worker/prefetch/&quot;&gt;prefetch example live&lt;/a&gt;.) The code calls &lt;a href=&quot;extendableevent/waituntil&quot;&gt;&lt;code&gt;ExtendableEvent.waitUntil()&lt;/code&gt;&lt;/a&gt; in &lt;a href=&quot;serviceworkerglobalscope/oninstall&quot;&gt;&lt;code&gt;ServiceWorkerGlobalScope.oninstall&lt;/code&gt;&lt;/a&gt;, delaying treating the &lt;a href=&quot;serviceworkerregistration/installing&quot;&gt;&lt;code&gt;ServiceWorkerRegistration.installing&lt;/code&gt;&lt;/a&gt; worker as installed until the passed promise resolves successfully. The promise resolves when all resources have been fetched and cached, or else when any exception occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0958986c19171732c45a996648efb7bf510a7dc" translate="yes" xml:space="preserve">
          <source>This code snippet is from the &lt;a href=&quot;https://github.com/GoogleChrome/samples/blob/gh-pages/service-worker/prefetch/service-worker.js&quot;&gt;service worker prefetch sample&lt;/a&gt; (see &lt;a href=&quot;https://googlechrome.github.io/samples/service-worker/prefetch/&quot;&gt;prefetch running live&lt;/a&gt;.) The code calls &lt;a href=&quot;extendableevent/waituntil&quot;&gt;&lt;code&gt;ExtendableEvent.waitUntil()&lt;/code&gt;&lt;/a&gt; in &lt;a href=&quot;serviceworkerglobalscope/oninstall&quot;&gt;&lt;code&gt;ServiceWorkerGlobalScope.oninstall&lt;/code&gt;&lt;/a&gt; and delays treating the &lt;a href=&quot;serviceworkerregistration/installing&quot;&gt;&lt;code&gt;ServiceWorkerRegistration.installing&lt;/code&gt;&lt;/a&gt; worker as installed until the passed promise resolves successfully. The promise resolves when all resources have been fetched and cached, or when any exception occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3da37509ae074c85f6656db9797ab2bc2fa9dc9a" translate="yes" xml:space="preserve">
          <source>This code snippet is from the &lt;a href=&quot;https://github.com/GoogleChrome/samples/blob/gh-pages/service-worker/registration-events/index.html&quot;&gt;service worker registration-events sample&lt;/a&gt; (&lt;a href=&quot;https://googlechrome.github.io/samples/service-worker/registration-events/&quot;&gt;live demo&lt;/a&gt;). The code listens for any change in the &lt;a href=&quot;serviceworker/state&quot;&gt;&lt;code&gt;ServiceWorker.state&lt;/code&gt;&lt;/a&gt; and returns its value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2719bdcfb7cc3d5b6981acd0a0bf7739f5dc407" translate="yes" xml:space="preserve">
          <source>This code snippet is from the &lt;a href=&quot;https://github.com/GoogleChrome/samples/blob/gh-pages/service-worker/registration-events/index.html&quot;&gt;service worker registration-events sample&lt;/a&gt; (&lt;a href=&quot;https://googlechrome.github.io/samples/service-worker/registration-events/&quot;&gt;live demo&lt;/a&gt;). The code listens for any change in the &lt;a href=&quot;state&quot;&gt;&lt;code&gt;ServiceWorker.state&lt;/code&gt;&lt;/a&gt; and returns its value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="692d37171ae3f8649645cd67e6a22548cbf4e863" translate="yes" xml:space="preserve">
          <source>This code snippet is from the &lt;a href=&quot;https://github.com/GoogleChrome/samples/blob/gh-pages/service-worker/selective-caching/service-worker.js&quot;&gt;service worker selective caching sample&lt;/a&gt;. (see &lt;a href=&quot;https://googlechrome.github.io/samples/service-worker/selective-caching/&quot;&gt;selective caching live&lt;/a&gt;) The code uses &lt;a href=&quot;cachestorage/open&quot;&gt;&lt;code&gt;CacheStorage.open()&lt;/code&gt;&lt;/a&gt; to open any &lt;code&gt;Cache&lt;/code&gt; objects with a &lt;code&gt;Content-Type&lt;/code&gt; header that starts with &lt;code&gt;&quot;font/&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e12a5aa41a5e85e4583b731911ecb6762ebc6f29" translate="yes" xml:space="preserve">
          <source>This code snippet is from the MDN &lt;a href=&quot;https://github.com/mdn/sw-test/&quot;&gt;sw-test example&lt;/a&gt; (see &lt;a href=&quot;https://mdn.github.io/sw-test/&quot;&gt;sw-test running live&lt;/a&gt;.) This service worker script waits for an &lt;a href=&quot;installevent&quot;&gt;&lt;code&gt;InstallEvent&lt;/code&gt;&lt;/a&gt; to fire, then runs &lt;a href=&quot;extendableevent/waituntil&quot;&gt;&lt;code&gt;waitUntil&lt;/code&gt;&lt;/a&gt; to handle the install process for the app. This consists of calling &lt;a href=&quot;cachestorage/open&quot;&gt;&lt;code&gt;CacheStorage.open&lt;/code&gt;&lt;/a&gt; to create a new cache, then using &lt;a href=&quot;cache/addall&quot;&gt;&lt;code&gt;Cache.addAll&lt;/code&gt;&lt;/a&gt; to add a series of assets to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3f5078335268a4b083f754eb23d9b866692dfdf" translate="yes" xml:space="preserve">
          <source>This code snippet is taken from &lt;a href=&quot;../webgl_api/basic_2d_animation_example#Drawing_and_animating_the_scene&quot;&gt;the function &lt;code&gt;animateScene()&lt;/code&gt;&lt;/a&gt; in &quot;A basic 2D WebGL animation example.&quot; See that article for the full sample and to see the resulting animation in action.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="793d68bfd3a8e844bf6ffe3560511bb6c26d939e" translate="yes" xml:space="preserve">
          <source>This code snippet is taken from a &lt;a href=&quot;https://github.com/GoogleChrome/samples/blob/gh-pages/push-messaging-and-notifications&quot;&gt;push messaging and notification sample&lt;/a&gt;. (No live demo is available.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b25f8e8720baf48ff504004bb5ee7583d3e54608" translate="yes" xml:space="preserve">
          <source>This code snippet shows how to signal ICE candidates across an arbitrary signaling channel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dda634886f6212986f6b77a093a7e5b1cb8cf50a" translate="yes" xml:space="preserve">
          <source>This code snippet uses the &lt;code&gt;foundation&lt;/code&gt; of two candidates to determine if they're actually the same candidate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b97f69e5a8303d42b64dcd84645c18580bb0523f" translate="yes" xml:space="preserve">
          <source>This code snippet uses the value of &lt;code&gt;ip&lt;/code&gt; to implement an IP address based ban feature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa2d5092eeb44935a0906a83a3036448d462a0c8" translate="yes" xml:space="preserve">
          <source>This code starts by creating a JavaScript array containing four 4-value vectors, one for each vertices' color. Then a new WebGL buffer is allocated to store these colors, and the array is converted into floats and stored into the buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aa5b2b9bff4c2e23ad8a6cb27e676b0024a2cd1" translate="yes" xml:space="preserve">
          <source>This code starts by creating the gain nodes and setting them and the volume control that will adjust their value all to 0.5. Then the &lt;code&gt;ConstantSourceNode&lt;/code&gt; is created by calling &lt;a href=&quot;baseaudiocontext/createconstantsource&quot;&gt;&lt;code&gt;AudioContext.createConstantSource()&lt;/code&gt;&lt;/a&gt;, and the gain parameters of each of the two gain nodes are connected to the &lt;code&gt;ConstantSourceNode&lt;/code&gt;. After starting the constant source by calling its &lt;a href=&quot;audioscheduledsourcenode/start&quot;&gt;&lt;code&gt;start()&lt;/code&gt;&lt;/a&gt; method. Finally, the two gain nodes are connected to the audio destination (typically speakers or headphones).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dc7b7f63d6d2244ab28e81b61f7f5998166a8f6" translate="yes" xml:space="preserve">
          <source>This code strokes the first path three times, the second path two times, and the third path only once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="185d44c5354c152c7e22f4b1128e4657a2353e97" translate="yes" xml:space="preserve">
          <source>This code takes SDP which has been received from the remote peer and constructs a new &lt;a href=&quot;../rtcsessiondescription&quot;&gt;&lt;code&gt;RTCSessionDescription&lt;/code&gt;&lt;/a&gt; to pass into &lt;a href=&quot;setremotedescription&quot;&gt;&lt;code&gt;setRemoteDescription()&lt;/code&gt;&lt;/a&gt;. Once that succeeds, it uses &lt;a href=&quot;../mediadevices/getusermedia&quot;&gt;&lt;code&gt;MediaDevices.getUserMedia()&lt;/code&gt;&lt;/a&gt; to obtain access to the local webcam and microphone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad443b9596b97b894cf1f86ebe76af0a8baece3c" translate="yes" xml:space="preserve">
          <source>This code uses &lt;code&gt;requestAnimationFrame&lt;/code&gt; to ask the browser call the function &quot;&lt;code&gt;render&lt;/code&gt;&quot; each frame. &lt;code&gt;requestAnimationFrame&lt;/code&gt; passes us the time in milliseconds since the page loaded. We convert that to seconds and then subtract from it the last time to compute &lt;code&gt;deltaTime&lt;/code&gt; which is the number of second since the last frame was rendered. At the end of drawscene we add the code to update &lt;code&gt;squareRotation.&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4f51d763c1f9c916f6e2fabe48b33e400ac5a2f" translate="yes" xml:space="preserve">
          <source>This code uses the amount of time that's passed since the last time we updated the value of &lt;code&gt;squareRotation&lt;/code&gt; to determine how far to rotate the square.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f5785bbbd17422157f0a380316d02169c29d4ad" translate="yes" xml:space="preserve">
          <source>This code's job is to just restore the original text into the target box after the user's interaction with the element ends (for example, when they release the mouse button, or when they lift the stylus or finger from the screen).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84030ebd509c6ee77d38e1be5bd1ac17e2308409" translate="yes" xml:space="preserve">
          <source>This code, based on an older version of our &lt;a href=&quot;../webrtc_api/signaling_and_video_calling&quot;&gt;Signaling and video calling&lt;/a&gt; sample, responds to &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/addstream&quot;&gt;addstream&lt;/a&gt;&lt;/code&gt; events by setting the video source for a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video&quot;&gt;&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;&lt;/a&gt; element to the stream specified in the event, and then enabling a &quot;hang up&quot; button in the app's user interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df798030650e5c573f23eb989a8c2c1704e869e6" translate="yes" xml:space="preserve">
          <source>This code, executed when the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/load&quot;&gt;load&lt;/a&gt;&lt;/code&gt; event occurs, subtracts from the current time the time at which the navigation whose timing was recorded began (&lt;a href=&quot;../performancetiming/navigationstart&quot;&gt;&lt;code&gt;performance.timing.navigationStart&lt;/code&gt;&lt;/a&gt;), and outputs that information to the screen by inserting it into an element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54ce110c12d0b1294f6318f30387b5b9bb1b5d0a" translate="yes" xml:space="preserve">
          <source>This configuration option cannot be changed after it is first specified; once the certificates have been set, this property is ignored in future calls to &lt;a href=&quot;rtcpeerconnection/setconfiguration&quot;&gt;&lt;code&gt;RTCPeerConnection.setConfiguration()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0c17d7cb33f8977a0334d4dc852adb23986059e" translate="yes" xml:space="preserve">
          <source>This configuration option cannot be changed after it is first specified; once the certificates have been set, this property is ignored in future calls to &lt;a href=&quot;setconfiguration&quot;&gt;&lt;code&gt;RTCPeerConnection.setConfiguration()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f775cb9859c745b99dd52a8aba4ca36f8ab822af" translate="yes" xml:space="preserve">
          <source>This constructor does not do complete validation of the specified &lt;code&gt;candidateInfo&lt;/code&gt; object or string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="149d0792fcd4766ff175e51235e500f1cbbe5f13" translate="yes" xml:space="preserve">
          <source>This constructor has been deprecated because &lt;a href=&quot;../rtcpeerconnection/setlocaldescription&quot;&gt;&lt;code&gt;RTCPeerConnection.setLocalDescription()&lt;/code&gt;&lt;/a&gt; and other methods which take SDP as input now directly accept an object conforming to the &lt;code&gt;RTCSessionDescriptionInit&lt;/code&gt; dictionary, so you don't have to instantiate an &lt;code&gt;RTCSessionDescription&lt;/code&gt; yourself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5701c8c1eebdea428db51a030c7b07f6d6fc96af" translate="yes" xml:space="preserve">
          <source>This constructor is the preferred way of creating such an object in a &lt;a href=&quot;../worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ddc7ddae1f014aea1a21cb118ffd479d0c961e7" translate="yes" xml:space="preserve">
          <source>This constructor is used to create a synthetic &lt;a href=&quot;../dragevent&quot;&gt;&lt;code&gt;DragEvent&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a35cbc0b8a837379050ea697d644c6570a019881" translate="yes" xml:space="preserve">
          <source>This constructor returns a new &lt;code&gt;RTCSessionDescription&lt;/code&gt;. The parameter is a &lt;code&gt;RTCSessionDescriptionInit&lt;/code&gt; dictionary containing the values to assign the two properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="137502c797120fd61fa1302c551f8582f03fce5d" translate="yes" xml:space="preserve">
          <source>This could be for the following reasons:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cdbb78ca2c3269ca25a23a07129e1249044cdab" translate="yes" xml:space="preserve">
          <source>This could be used to populate a list of voices that the user can choose between when the event fires (see our &lt;a href=&quot;https://github.com/mdn/web-speech-api/blob/gh-pages/speak-easy-synthesis/script.js&quot;&gt;Speak easy synthesis demo&lt;/a&gt;.) Note that Firefox doesn't support it at present, and will just return a list of voices when &lt;a href=&quot;getvoices&quot;&gt;&lt;code&gt;SpeechSynthesis.getVoices()&lt;/code&gt;&lt;/a&gt; is fired. With Chrome however, you have to wait for the event to fire before populating the list, hence the bottom if statement seen below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d88db422599ade63e99d0c607e5d8ffe4d48db18" translate="yes" xml:space="preserve">
          <source>This could then be used to build a user interface for selecting the language the user would like to listen to while watching a movie, for example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e91852c6678901525d98ec606bc71b9b051507a7" translate="yes" xml:space="preserve">
          <source>This counterpart to &lt;code&gt;ontrack&lt;/code&gt; is called to handle the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/removetrack&quot;&gt;removetrack&lt;/a&gt;&lt;/code&gt; event; it's sent to the &lt;code&gt;RTCPeerConnection&lt;/code&gt; when the remote peer removes a track from the media being sent. See &lt;a href=&quot;#Handling_the_removal_of_tracks&quot;&gt;Handling the removal of tracks&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03a466fa359227c1ff4c19bc8d96b94ab3b8e129" translate="yes" xml:space="preserve">
          <source>This creates a handler that allows &lt;code&gt;web+burger://&lt;/code&gt; links to direct the user to your web application, inserting the burger information specified in the link into the URL. Recall that this script must be run from the same domain (so any page location at &lt;code&gt;burgers.example.com&lt;/code&gt;) and the second argument passed must be of &lt;code&gt;http&lt;/code&gt; or &lt;code&gt;https&lt;/code&gt; scheme (in this example it is &lt;code&gt;https&lt;/code&gt;) .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e1429073ced701d42db3ad261d5acda3c8a3ce8" translate="yes" xml:space="preserve">
          <source>This creates a new &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; and inserts it before the element with the ID &quot;&lt;code&gt;div1&lt;/code&gt;&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68af91b4a6c6922a173f5e758f1f94beabc45c99" translate="yes" xml:space="preserve">
          <source>This creates a new &lt;code&gt;ImageData&lt;/code&gt; object with the specified dimensions. All pixels are preset to transparent black (all zeroes i.e rgba(0,0,0,0)).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4bbbb33758558ffba5c13f53a853ce78e7ec9c3" translate="yes" xml:space="preserve">
          <source>This creates a variable, &lt;code&gt;newState&lt;/code&gt;, which is the opposite of the current value of &lt;code&gt;enabled&lt;/code&gt;, then uses that to select either the Emoji character for the &quot;play&quot; icon or the character for the &quot;pause&quot; icon as the new &lt;a href=&quot;../element/innerhtml&quot;&gt;&lt;code&gt;innerHTML&lt;/code&gt;&lt;/a&gt; of the pause button's element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1dd4b3e5ff9f06a8fb86b432fcb75215776e8a6" translate="yes" xml:space="preserve">
          <source>This creates an &lt;code&gt;options&lt;/code&gt; object with a getter function for the &lt;code&gt;passive&lt;/code&gt; property; the getter sets a flag, &lt;code&gt;passiveSupported&lt;/code&gt;, to &lt;code&gt;true&lt;/code&gt; if it gets called. That means that if the browser checks the value of the &lt;code&gt;passive&lt;/code&gt; property on the &lt;code&gt;options&lt;/code&gt; object, &lt;code&gt;passiveSupported&lt;/code&gt; will be set to &lt;code&gt;true&lt;/code&gt;; otherwise, it will remain &lt;code&gt;false&lt;/code&gt;. We then call &lt;code&gt;addEventListener()&lt;/code&gt; to set up a fake event handler, specifying those options, so that the options will be checked if the browser recognizes an object as the third parameter. Then, we call &lt;code&gt;removeEventListener()&lt;/code&gt; to clean up after ourselves. (Note that &lt;code&gt;handleEvent()&lt;/code&gt; is ignored on event listeners that aren't called.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c10a4c3135747fd9237fe8c50747c1330732afc1" translate="yes" xml:space="preserve">
          <source>This creates article boxes with a white background which float atop the blue background, with a small margin around the article. Every article which isn't the last item in the container has an 8px bottom margin to space things apart.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15124c4356b41009912db7f49759bd62426c1900" translate="yes" xml:space="preserve">
          <source>This currently only has one method available on it &amp;mdash; &lt;a href=&quot;../writablestreamdefaultcontroller/error&quot;&gt;&lt;code&gt;WritableStreamDefaultController.error()&lt;/code&gt;&lt;/a&gt;, which when invoked causes future interactions with the stream to error. This is useful when another part of an app goes wrong, and you want to propagate the error to the stream so that the whole system fails cleanly, rather than risking garbage being silently written to the stream (or something similarly bad).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ac649a99beec9f0af5b82ac4f2e4d7742403b5b" translate="yes" xml:space="preserve">
          <source>This cursor does not include duplicates, and its direction is monotonically decreasing in the order of keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ef49c53bead40ada54278d6231dd4fed10bfa58" translate="yes" xml:space="preserve">
          <source>This cursor does not include duplicates, and its direction is monotonically increasing in the order of keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69c6434ee2b3fe6628e1b9b9e0f2f7163dee4ee1" translate="yes" xml:space="preserve">
          <source>This cursor includes duplicates, and its direction is monotonically decreasing in the order of keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61cda63b17e63d95c9c45bdea01f6736c28a3e0e" translate="yes" xml:space="preserve">
          <source>This cursor includes duplicates, and its direction is monotonically increasing in the order of keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f374fa33dbd6e6721038cb7e88b2209b27d800d" translate="yes" xml:space="preserve">
          <source>This data is returned by the payment app that satisfies the payment request, and must conform to the structure defined in the &lt;a href=&quot;../basiccardresponse&quot;&gt;&lt;code&gt;BasicCardResponse&lt;/code&gt;&lt;/a&gt; dictionary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cb089584fb6e1b93fa0a8e0051e6cc511e38908" translate="yes" xml:space="preserve">
          <source>This data should be passed into the &lt;a href=&quot;complete&quot;&gt;&lt;code&gt;complete()&lt;/code&gt;&lt;/a&gt; method to let the user agent complete the transaction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b6945638597aef4e4fb66a23a69eb5bf20a687b" translate="yes" xml:space="preserve">
          <source>This data, particularly the &lt;code&gt;duration&lt;/code&gt; timestamp, can be used to help identify performance problems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adc7402fa7230b7e16cb49dbcbf134faedaff5fb" translate="yes" xml:space="preserve">
          <source>This default has changed in the latest spec &amp;mdash; the new default value is &lt;code&gt;false&lt;/code&gt;. Though it's still an optional argument, you should always provide the &lt;code&gt;deep&lt;/code&gt; argument for backward &lt;em&gt;and&lt;/em&gt; forward compatibility. With Gecko 28.0 (Firefox 28 / Thunderbird 28 / SeaMonkey 2.25 / Firefox OS 1.3), the console warns developers not to omit the argument. Starting with Gecko 29.0 (Firefox 29 / Thunderbird 29 / SeaMonkey 2.26)), a shallow clone is defaulted instead of a deep clone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e325065bf0ef55cca2c31ff998125fd45c5cc87" translate="yes" xml:space="preserve">
          <source>This defines the resource that you wish to fetch. This can either be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40cedbbda26067b79218f1ed498daf5114302ceb" translate="yes" xml:space="preserve">
          <source>This demo uses JavaScript to draw a ball on top of an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas&quot;&gt;&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;&lt;/a&gt; element. When you click the canvas, pointer lock is then used to remove the mouse pointer and allow you to move the ball directly using the mouse. Let's see how this works.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfff1330b35fb00e8aa04dcc9ee1e025ff03052d" translate="yes" xml:space="preserve">
          <source>This demonstrates how you can use both array syntax (line 2) and the &lt;a href=&quot;../htmlcollection/item&quot;&gt;&lt;code&gt;HTMLCollection.item()&lt;/code&gt;&lt;/a&gt; method (line 3) to obtain individual rows in the table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be25d1c5583b3e592cda4b71be6d842a8ed1262f" translate="yes" xml:space="preserve">
          <source>This demonstrates two things:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e66ee48d35373e716e7c6b37c885fe5cc5b5b356" translate="yes" xml:space="preserve">
          <source>This deprecated form of the method returns instantaneously without waiting for the actual setting to be done: in case of success, the &lt;code&gt;successCallback&lt;/code&gt; will be called; in case of failure, the &lt;code&gt;errorCallback&lt;/code&gt; will be called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa6f6380ccbd5b9e7852e7585896d78e77a74e85" translate="yes" xml:space="preserve">
          <source>This dictionary represents the object that should be passed into &lt;a href=&quot;subtlecrypto/sign&quot;&gt;&lt;code&gt;SubtleCrypto.sign()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;subtlecrypto/verify&quot;&gt;&lt;code&gt;SubtleCrypto.verify()&lt;/code&gt;&lt;/a&gt; when using the ECDSA algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98eb93bf78e8588fa8227b8f8646068372cb9381" translate="yes" xml:space="preserve">
          <source>This dictionary represents the object that should be passed into &lt;a href=&quot;subtlecrypto/sign&quot;&gt;&lt;code&gt;SubtleCrypto.sign()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;subtlecrypto/verify&quot;&gt;&lt;code&gt;SubtleCrypto.verify()&lt;/code&gt;&lt;/a&gt; when using the RSA-PSS algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a3737c6cdcf9269fef37445d380981c4383708a" translate="yes" xml:space="preserve">
          <source>This differs from the &lt;a href=&quot;../rtcicetransport/gatheringstate&quot;&gt;&lt;code&gt;gatheringState&lt;/code&gt;&lt;/a&gt;, which only indicates whether or not ICE gathering is currently underway.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46936d633d4989fa1a5236fb9f8c8dacbc4d6c30" translate="yes" xml:space="preserve">
          <source>This direction causes the cursor to be opened at the end of the source.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08a3a57457d4b0256bc9d4e4d4a9bf680710eb81" translate="yes" xml:space="preserve">
          <source>This direction causes the cursor to be opened at the end of the source. For every key with duplicate values, only the first record is yielded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="849338daaac2bb232f0ce46d11ee0819bdcc6ad2" translate="yes" xml:space="preserve">
          <source>This direction causes the cursor to be opened at the start of the source.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e95d4f4235889961ba79685e5d4333540231739" translate="yes" xml:space="preserve">
          <source>This direction causes the cursor to be opened at the start of the source. For every key with duplicate values, only the first record is yielded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0c5f40d67de9d4fdb18b711aef397880e45d3f3" translate="yes" xml:space="preserve">
          <source>This directly related to the &lt;a href=&quot;../web_audio_api&quot;&gt;Web Audio API&lt;/a&gt;, which allows us to place sounds on objects we have in the canvas or launch audio depending on the part of the scene the user is traveling towards or looking at.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02997f9e0b862ee244e3441e0b9110774453e91a" translate="yes" xml:space="preserve">
          <source>This document contains examples of the Beacon interfaces. See &lt;a href=&quot;../beacon_api&quot;&gt;&lt;code&gt;Beacon API&lt;/code&gt;&lt;/a&gt; for an overview of the API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ed2c1899d82d5f3c5c8d778aa82db46c3528a08" translate="yes" xml:space="preserve">
          <source>This document describes how to use the &lt;a href=&quot;../performanceframetiming&quot;&gt;&lt;code&gt;PerformanceFrameTiming&lt;/code&gt;&lt;/a&gt; interfaces including example code. For an overview of these interfaces see &lt;a href=&quot;https://developer.mozilla.org/Web/API/Frame_Timing_API&quot;&gt;Frame Timing API&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="482d06a1d1cd37457442b804c3a01909085db36b" translate="yes" xml:space="preserve">
          <source>This document establishes two &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas&quot;&gt;&lt;code&gt;canvas&lt;/code&gt;&lt;/a&gt; elements, with the IDs &lt;code&gt;c1&lt;/code&gt; and &lt;code&gt;c2&lt;/code&gt;. Canvas &lt;code&gt;c1&lt;/code&gt; is used to display the current frame of the original video, while &lt;code&gt;c2&lt;/code&gt; is used to display the video after performing the chroma-keying effect; &lt;code&gt;c2&lt;/code&gt; is preloaded with the still image that will be used to replace the green background in the video.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f580fc49798a533ed9b57d0639574bdbf68ea6ad" translate="yes" xml:space="preserve">
          <source>This document is an &lt;em&gt;overview&lt;/em&gt; of HTML drag and drop. It includes a description of the interfaces, the basic steps to add drag and drop support to an application and a summary of the interoperability of the interfaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7a26e1b0c8122e286e9cccf30dd2a6442efec2b" translate="yes" xml:space="preserve">
          <source>This document provides an overview of the &lt;code&gt;Resource Timing&lt;/code&gt; interfaces. For more details about the interfaces including examples see each interface's reference page, &lt;a href=&quot;resource_timing_api/using_the_resource_timing_api&quot;&gt;Using the Resource Timing API&lt;/a&gt;, and the references in the &lt;a href=&quot;#See_also&quot;&gt;See also&lt;/a&gt; section. For a graphical representation of the resource timing processing model see the &lt;a href=&quot;https://w3c.github.io/resource-timing/#process&quot;&gt;resource timing phases&lt;/a&gt; figure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f86a90882f9bd8603d6d86e8964fa995126713e" translate="yes" xml:space="preserve">
          <source>This document provides an overview of the &lt;code&gt;mark&lt;/code&gt; and &lt;code&gt;measure&lt;/code&gt;&lt;a href=&quot;performanceentry/entrytype&quot;&gt;&lt;code&gt;performance event types&lt;/code&gt;&lt;/a&gt; including the four &lt;code&gt;User Timing&lt;/code&gt; methods that extend the &lt;a href=&quot;performance&quot;&gt;&lt;code&gt;Performance&lt;/code&gt;&lt;/a&gt; interface. For more details and example code regarding these two performance event types and the methods, see &lt;a href=&quot;https://developer.mozilla.org/Web/API/User_Timing_API/Using_the_User_Timing_API&quot;&gt;Using the User Timing API&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee434451644a37b34408bc88551208a87c90d0ea" translate="yes" xml:space="preserve">
          <source>This document provides an overview of the standard's interfaces. For more details about the interfaces, see the reference pages and &lt;a href=&quot;https://developer.mozilla.org/Web/API/Performance_Timeline/Using_Performance_Timeline&quot;&gt;Using Performance Timeline&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcfbb4537e285c78bb4aaa8db801f9fb9bd4bd5d" translate="yes" xml:space="preserve">
          <source>This document provides samples for every interface that you can use in your own web development. In some cases, the samples are complete HTML pages, with the DOM access in a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; element, the interface (e.g, buttons) necessary to fire up the script in a form, and the HTML elements upon which the DOM operates listed as well. When this is the case, you can cut and paste the example into a new HTML document, save it, and run the example from the browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ca3f97a11a94048c70bb0948922ff28a741377a" translate="yes" xml:space="preserve">
          <source>This document shows the use of Resource Timing interfaces. For more details about the interfaces, including examples, see each interface's reference page and the references in the &lt;a href=&quot;#See_also&quot;&gt;See also&lt;/a&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baf4ca27e7b527f76d2649a92d525f3bb6c9a3a6" translate="yes" xml:space="preserve">
          <source>This doesn't directly relate to the WebSocket protocol, but it's worth mentioning here: your server will have to keep track of clients' sockets so you don't keep handshaking again with clients who have already completed the handshake. The same client IP address can try to connect multiple times (but the server can deny them if they attempt too many connections in order to save itself from &lt;a href=&quot;https://en.wikipedia.org/wiki/Denial_of_service&quot;&gt;Denial-of-Service attacks&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="508cb2a19e688c879fd5a48b0ea0dd802f622d0e" translate="yes" xml:space="preserve">
          <source>This element behaves in one of two modes: &lt;em&gt;default&lt;/em&gt; mode and &lt;em&gt;value&lt;/em&gt; mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12c4fcd8de68f8c78dab871c527827e765eabe60" translate="yes" xml:space="preserve">
          <source>This eliminates the need to check for comments or iterate through lines yourself; however, it is limited to only the first URL in the list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75bb5d12d14856074603e5cd5318110bef19757f" translate="yes" xml:space="preserve">
          <source>This enum defines strings that describe the current state of the session description, as used in the &lt;a href=&quot;rtcsessiondescription/type&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt; property. The session description's type will be specified using one of these values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de8fd86224adbc057fea1aad045720e87f7a3a29" translate="yes" xml:space="preserve">
          <source>This enum defines strings that describe the current state of the session description, as used in the &lt;a href=&quot;type&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt; property. The session description's type will be specified using one of these values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd70419109078f128706b57536b6baf3ba51ae00" translate="yes" xml:space="preserve">
          <source>This establishes our file &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input&quot;&gt;&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;&lt;/a&gt; element as well as a link that invokes the file picker (since we keep the file input hidden to prevent that less-than-attractive user interface from being displayed). This is explained in the section &lt;a href=&quot;#Using_hidden_file_input_elements_using_the_click()_method&quot;&gt;Using hidden file input elements using the click() method&lt;/a&gt;, as is the method that invokes the file picker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38be177877f07a312ef7b138ee257c0092ee9b0e" translate="yes" xml:space="preserve">
          <source>This evaluates to: [Infinity, Infinity, Infinity]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="933e872b05b227aa2ce788a7bec5ddb07c51069f" translate="yes" xml:space="preserve">
          <source>This event bubbles. If supported on the window, it is supported on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input&quot;&gt;&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;&lt;/a&gt; elements as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="329d103e30025bc58a4a5c6e3d516b56b6d387f9" translate="yes" xml:space="preserve">
          <source>This event can be captured at the &lt;code&gt;window&lt;/code&gt; object level by using the &lt;a href=&quot;eventtarget/addeventlistener&quot;&gt;&lt;code&gt;addEventListener&lt;/code&gt;&lt;/a&gt; method (using the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/devicelight&quot;&gt;devicelight&lt;/a&gt;&lt;/code&gt; event name) or by attaching an event handler to the &lt;a href=&quot;window/ondevicelight&quot;&gt;&lt;code&gt;window.ondevicelight&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b56710b0ad1aab6341070c09afcd3d736628b701" translate="yes" xml:space="preserve">
          <source>This event can be captured at the &lt;code&gt;window&lt;/code&gt; object level by using the &lt;a href=&quot;eventtarget/addeventlistener&quot;&gt;&lt;code&gt;addEventListener&lt;/code&gt;&lt;/a&gt; method (using the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/deviceproximity&quot;&gt;deviceproximity&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/userproximity&quot;&gt;userproximity&lt;/a&gt;&lt;/code&gt; event name) or by attaching an event handler to the &lt;a href=&quot;window/ondeviceproximity&quot;&gt;&lt;code&gt;window.ondeviceproximity&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;window/onuserproximity&quot;&gt;&lt;code&gt;window.onuserproximity&lt;/code&gt;&lt;/a&gt; properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac61f6a638aac33781f379ceeccbcbae503936ed" translate="yes" xml:space="preserve">
          <source>This event handler can be set to function which is passed a single input parameter: an &lt;a href=&quot;../event&quot;&gt;&lt;code&gt;Event&lt;/code&gt;&lt;/a&gt; object describing the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/iceconnectionstatechange&quot;&gt;iceconnectionstatechange&lt;/a&gt;&lt;/code&gt; event which occurred. Your code can look at the value of &lt;a href=&quot;iceconnectionstate&quot;&gt;&lt;code&gt;RTCPeerConnection.iceConnectionState&lt;/code&gt;&lt;/a&gt; to determine what the new state is.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9910ded83a3cf95934b48e95b4f715725d7ce47c" translate="yes" xml:space="preserve">
          <source>This event handler is called when an &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/offline&quot;&gt;offline&lt;/a&gt;&lt;/code&gt; is fired on body and bubbles up, when &lt;a href=&quot;../navigatoronline/online&quot;&gt;navigator.onLine&lt;/a&gt; property changes and becomes &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ddfe72f01c2a18e9c54c79c4f9b14fccdb1b49c" translate="yes" xml:space="preserve">
          <source>This event is also sent if the values of the radius, rotation angle, or force attributes of a touch point change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4542c4021857c9f1107529f02e1863d460581fd6" translate="yes" xml:space="preserve">
          <source>This event is fired after pointer capture is released for a pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5da69c50819bfbaefa88c0eeac84edb5bc3c1078" translate="yes" xml:space="preserve">
          <source>This event is fired continuously when an element or text selection is being dragged and the mouse pointer is over a valid drop target (every 50 ms WHEN mouse is not moving ELSE much faster between 5 ms (slow movement) and 1ms (fast movement) approximately. This firing pattern is different than &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/mouseover&quot;&gt;mouseover&lt;/a&gt;&lt;/code&gt; ).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d406794681205aeb7145c0100919917878e4e11" translate="yes" xml:space="preserve">
          <source>This event is fired for several reasons including: pointing device is moved out of the hit test boundaries of an element; firing the pointerup event for a device that does not support hover (see pointerup); after firing the pointercancel event (see pointercancel); when a pen stylus leaves the hover range detectable by the digitizer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8e9031c3823a765ce0f32eb23377876e9aff715" translate="yes" xml:space="preserve">
          <source>This event is fired when a drag operation is being ended (by releasing a mouse button or hitting the escape key).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52194dde96c01347babf030af0803632a2e9008d" translate="yes" xml:space="preserve">
          <source>This event is fired when a dragged element or text selection enters a valid drop target.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2d36af1ee8d8f299b1eca60fae522243fb06d4a" translate="yes" xml:space="preserve">
          <source>This event is fired when a dragged element or text selection leaves a valid drop target.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75e3feecf0c204785485c35470e78edf84b79ed5" translate="yes" xml:space="preserve">
          <source>This event is fired when a pointer changes coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c2fba9a58dd86da82f3ce015d3fdb7bd4a00e7a" translate="yes" xml:space="preserve">
          <source>This event is fired when a pointer is no longer &lt;em&gt;active&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68b692521ba440f8d3b73cfb3f4beea98f4dce86" translate="yes" xml:space="preserve">
          <source>This event is fired when a pointing device is moved into an element's hit test boundaries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79fb1af6710bc24e17015b14d94e33d31e1a9219" translate="yes" xml:space="preserve">
          <source>This event is fired when a pointing device is moved into the hit test boundaries of an element or one of its descendants, including as a result of a pointerdown event from a device that does not support hover (see pointerdown). This event type is similar to pointerover, but differs in that it does not bubble.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf30d80bcee3559524ec10b7c9706774fdfe4341" translate="yes" xml:space="preserve">
          <source>This event is fired when a pointing device is moved out of the hit test boundaries of an element. For pen devices, this event is fired when the stylus leaves the hover range detectable by the digitizer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f767f2eaf1b4458caf61cded926fd5dc038b3aa8" translate="yes" xml:space="preserve">
          <source>This event is fired when an element is no longer the drag operation's immediate selection target.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe9d5561daebfdf136cc25dbc0f0938fe9ae7473" translate="yes" xml:space="preserve">
          <source>This event is fired when an element or text selection is being dragged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0f90f62ce60b6768e210110a6b385d7bc3b89ba" translate="yes" xml:space="preserve">
          <source>This event is fired when an element or text selection is dropped on a valid drop target.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e3cb7c755f279dcce823751e32715f837abc6d7" translate="yes" xml:space="preserve">
          <source>This event is fired when an element receives pointer capture.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f8dc9f72b075b0a1ee02b937c339634534f2cd5" translate="yes" xml:space="preserve">
          <source>This event is fired when the user starts dragging an element or text selection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e92f02232ae3e1e894e02662896ceef2f90e051" translate="yes" xml:space="preserve">
          <source>This event is not be fired by all payment handlers. In particular, it's used by Apple Pay.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fd0aeb92cafc8f7bd5391cd8eafe8d3e7a3d25f" translate="yes" xml:space="preserve">
          <source>This event is sent by the WebRTC layer to the web site or application, so you will not typically need to instantiate an &lt;code&gt;RTCTrackEvent&lt;/code&gt; yourself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40811ae1653cb86688723ae0b635e8a7bad068d9" translate="yes" xml:space="preserve">
          <source>This event may not be fired by all payment handlers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fd00432a6818f1857e568940b5db2b12a40e6ef" translate="yes" xml:space="preserve">
          <source>This eventually became a problem. Over time, various applications (including those implementing WebRTC) began to use SCTP to transmit larger and larger messages. Eventually it was realized that when the messages become too large, it's possible for the transmission of a large message to block all other data transfers on that data channel&amp;mdash;including critical signaling messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7df937a4f6ad8f3d0b5dc4127f537650f3fcbbd9" translate="yes" xml:space="preserve">
          <source>This example activates a commentary track on a video by ducking the audio level of the main audio track to 50%, then enabling the commentary track.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22fd2027578d7c2b14b2dd33b6cd60e980c59890" translate="yes" xml:space="preserve">
          <source>This example adds a listener which, when a new track is added to the stream, appends a new item to a list of tracks; the new item shows the track's &lt;code&gt;kind&lt;/code&gt; (&lt;code&gt;&quot;audio&quot;&lt;/code&gt; or &lt;code&gt;&quot;video&quot;&lt;/code&gt;) and &lt;code&gt;label&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc78654bd5b287e18dbf91f30e080bb7e166cea5" translate="yes" xml:space="preserve">
          <source>This example adds a listener which, when a track is removed from the stream, logs the track that was removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d8133f70173427cf9058ffe1fbe8866efc15e87" translate="yes" xml:space="preserve">
          <source>This example adds a new certificate to an active connection if it doesn't already have one in use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5c0802eb11d8f44636acb8f6d6b8f315cad26b0" translate="yes" xml:space="preserve">
          <source>This example adds a new data channel to an existing &lt;a href=&quot;../rtcpeerconnection&quot;&gt;&lt;code&gt;RTCPeerConnection&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;myPeerConnection&lt;/code&gt;. It then establishes an &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; event handler which updates some user interface elements to prepare them for being used to send messages over the data channel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9032c2768ba377717415b1841a940460c4681ac" translate="yes" xml:space="preserve">
          <source>This example adds a video track to a connection and sets up a listener on a close button which removes the track when the user clicks the button.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e90e2d254027e45803df3df2db020d74754521b4" translate="yes" xml:space="preserve">
          <source>This example adds two items to be dragged. The last argument specifies the index of the item to add. You should add them in order starting with 0 as you cannot add items at positions farther than the last item, however you can replace existing items by using indices you have already added. Using 0 as the index is equivalent to calling &lt;a href=&quot;../datatransfer/setdata&quot;&gt;&lt;code&gt;setData()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee004a11ec9f23c230b7c06ff17181412a367927" translate="yes" xml:space="preserve">
          <source>This example animates a small model of our solar system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc53cdce9248037e5505246ecb5727af099e8180" translate="yes" xml:space="preserve">
          <source>This example applies a blue fill color to a rectangle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f04bb58b197479ade544f67dbb37b194c0367108" translate="yes" xml:space="preserve">
          <source>This example applies a blue stroke color to a rectangle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d936ab4fd3185b026bec9f881fed45c76742e5c0" translate="yes" xml:space="preserve">
          <source>This example attempts to call &lt;code&gt;requestFullscreen()&lt;/code&gt; outside of an event handler. Since &lt;code&gt;requestFullscreen()&lt;/code&gt; can only be called in response to user action, for security reasons, this will fail, causing the &lt;code&gt;fullscreenerror&lt;/code&gt; to be sent to the document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="862a350730700aad5b423c593dae620209c94b3e" translate="yes" xml:space="preserve">
          <source>This example attempts to switch into full-screen mode from outside a handler for a user-initiated event (such as a &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/click&quot;&gt;click&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/keypress&quot;&gt;keypress&lt;/a&gt;&lt;/code&gt; event). SInce full-screen mode changes are only permitted in response to a user input, this causes an error to occur, which triggers the delivery of the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/fullscreenerror&quot;&gt;fullscreenerror&lt;/a&gt;&lt;/code&gt; event to the error handler,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83729187f5fbdafe2b29b6e5dccd163f5d7a6ae5" translate="yes" xml:space="preserve">
          <source>This example begins loading content from the MDN home page, then due to some condition, aborts the transfer by calling &lt;code&gt;abort()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbe0af236902efc4eb8023be40e8d651910471c4" translate="yes" xml:space="preserve">
          <source>This example builds a &lt;code&gt;FormData&lt;/code&gt; instance containing values for fields named &quot;username&quot;, &quot;accountnum&quot;, &quot;userfile&quot; and &quot;webmasterfile&quot;, then uses the &lt;code&gt;XMLHttpRequest&lt;/code&gt; method &lt;a href=&quot;../xmlhttprequest#send()&quot;&gt;&lt;code&gt;send()&lt;/code&gt;&lt;/a&gt; to send the form's data. The field &quot;webmasterfile&quot; is a &lt;a href=&quot;../blob&quot;&gt;&lt;code&gt;Blob&lt;/code&gt;&lt;/a&gt;. A &lt;code&gt;Blob&lt;/code&gt; object represents a file-like object of immutable, raw data. Blobs represent data that isn't necessarily in a JavaScript-native format. The &lt;a href=&quot;../file&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; interface is based on &lt;code&gt;Blob&lt;/code&gt;, inheriting blob functionality and expanding it to support files on the user's system. In order to build a &lt;code&gt;Blob&lt;/code&gt; you can invoke the &lt;a href=&quot;../blob/blob&quot;&gt;&lt;code&gt;Blob() constructor&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="089e02134fca2cccd4c2538b43ebb52db0fd12bb" translate="yes" xml:space="preserve">
          <source>This example cancels both the &lt;code&gt;&lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/dragenter&quot;&gt;dragenter&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; and &lt;code&gt;&lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/dragover&quot;&gt;dragover&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; events by calling the &lt;a href=&quot;../event/preventdefault&quot;&gt;&lt;code&gt;preventDefault()&lt;/code&gt;&lt;/a&gt;. method. This allows a drop to occur on that element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ca5b572e3f656743ba108fe6aaab93f22134fda" translate="yes" xml:space="preserve">
          <source>This example causes the current document to toggle in and out of a full-screen presentation whenever the mouse button is clicked within it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ccb2c800909e422c7e2ff606f4ea18b07549a71" translate="yes" xml:space="preserve">
          <source>This example checks if the first node inside the document element is a comment node, and if it is not, displays a message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e73ccbbbcf7a6c3d97ddd68c429ea4a684efe56" translate="yes" xml:space="preserve">
          <source>This example checks the current horizontal scroll position of the document. If it's greater than 400 pixels, the window is scrolled back to the beginning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caa2fb9c52c5c5986dc70eec5b004682b3e58f46" translate="yes" xml:space="preserve">
          <source>This example checks the size of a log file and removes it if it's larger than a megabyte.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afce5c4b34d9a45aab04d604905852b6ca7fd2a8" translate="yes" xml:space="preserve">
          <source>This example checks the size of a log file in a temporary folder and, if it exceeds a megabyte, moves it into a different directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c80e65d6bb1a336bea7faa12e18a1f2e108fc9d" translate="yes" xml:space="preserve">
          <source>This example checks to see if the script is being executed asynchronously:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a035c3447c5ff43616c1a2c3fadf7b791c06e27" translate="yes" xml:space="preserve">
          <source>This example could be simplified somewhat; you may more often see the code look something like this, taking advantage of more advanced ECMAScript 2016 features:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e53f84d2af1fb2abc165aebc095017cb104ca8be" translate="yes" xml:space="preserve">
          <source>This example counts the number of tracks in an array of &lt;a href=&quot;../mediastreamtrack&quot;&gt;&lt;code&gt;MediaStreamTrack&lt;/code&gt;&lt;/a&gt; objects which are currently muted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3344a1d77cd2e65e164aeaff0e88b14bfdc210b5" translate="yes" xml:space="preserve">
          <source>This example creates a &lt;a href=&quot;../dompoint&quot;&gt;&lt;code&gt;DOMPoint&lt;/code&gt;&lt;/a&gt; object representing the top-left corner of the current window, in screen coordinates, then converts that to JSON.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2492e4e831e6796917af19d67b6be2c3a29a302f" translate="yes" xml:space="preserve">
          <source>This example creates a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio&quot;&gt;&lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt;&lt;/a&gt; element, establishes an error handler for it, then lets the user click buttons to choose whether to assign a valid audio file or a missing file to the element's &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio#attr-src&quot;&gt;src&lt;/a&gt;&lt;/code&gt; attribute. The error handler simply outputs a message to a box onscreen describing the error, including both the &lt;code&gt;code&lt;/code&gt; and the &lt;code&gt;message&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5e1a8e7ac48b3777b6be8a115ac1c8b4fc04848" translate="yes" xml:space="preserve">
          <source>This example creates a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video&quot;&gt;&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;&lt;/a&gt; element, establishes an error handler for it, and then sets the element's &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-src&quot;&gt;src&lt;/a&gt;&lt;/code&gt; attribute to the video resource to present in the element. The error handler simply outputs a message</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c551b19b4597e098976ceaa7ed656c8ed8236d2b" translate="yes" xml:space="preserve">
          <source>This example creates a &lt;code&gt;DOMPoint&lt;/code&gt; representing the top-left corner of the current window, then creates a second point based on the first, which is then offset by 100 pixels both vertically and horizontally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14b7c8f489637ea2b2cd69312e5172d3cb6a5f6a" translate="yes" xml:space="preserve">
          <source>This example creates a list of major web browsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94e01c519b4e2d08bad3a0cc70177e3ec840a6a8" translate="yes" xml:space="preserve">
          <source>This example creates a method called &lt;code&gt;readDirectory()&lt;/code&gt;, which fetches all of the entries in the specified &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDIrectoryEntry&quot;&gt;&lt;code&gt;FileSystemDIrectoryEntry&lt;/code&gt;&lt;/a&gt; and returns them in an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee2bf929ec4af5a43a62bea1d0faaa4c214fde72" translate="yes" xml:space="preserve">
          <source>This example creates a new &lt;a href=&quot;../audiocontext&quot;&gt;&lt;code&gt;AudioContext&lt;/code&gt;&lt;/a&gt; for interactive audio (optimizing for latency) and a sample rate of 44.1kHz.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f121cd8f7915b8775d2640752bf5cdfbd3fd5e43" translate="yes" xml:space="preserve">
          <source>This example creates a new &lt;a href=&quot;../mediarecorder&quot;&gt;&lt;code&gt;MediaRecorder&lt;/code&gt;&lt;/a&gt; instance and starts recording using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/user_agent&quot;&gt;user agent's&lt;/a&gt; default media format. It returns either the &lt;code&gt;MediaRecorder&lt;/code&gt; or the name of the error that occurred if any exceptions are thrown during the setup process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5892214e5945c1a0ad1410b31b0b9674bead3789" translate="yes" xml:space="preserve">
          <source>This example creates a new &lt;a href=&quot;../rtcpeerconnection&quot;&gt;&lt;code&gt;RTCPeerConnection&lt;/code&gt;&lt;/a&gt; which uses a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/TURN&quot;&gt;TURN&lt;/a&gt; server at &lt;code&gt;turnserver.example.org&lt;/code&gt; to negotiate connections. Logging into the TURN server uses the username &quot;webrtc&quot; and the creative password &quot;turnpassword&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ec2a187553312d3865d02f984209fee18b1d0f2" translate="yes" xml:space="preserve">
          <source>This example creates a new &lt;a href=&quot;../rtcpeerconnection&quot;&gt;&lt;code&gt;RTCPeerConnection&lt;/code&gt;&lt;/a&gt; which will use a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/STUN&quot;&gt;STUN&lt;/a&gt; server at &lt;code&gt;stunserver.example.org&lt;/code&gt; to negotiate connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f06fbbbb2ce4287b999fb54922f6141f65af498b" translate="yes" xml:space="preserve">
          <source>This example creates a new &lt;a href=&quot;../rtcpeerconnection&quot;&gt;&lt;code&gt;RTCPeerConnection&lt;/code&gt;&lt;/a&gt; which will use a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/TURN&quot;&gt;TURN&lt;/a&gt; server at &lt;code&gt;turnserver.example.org&lt;/code&gt; to negotiate connections. Logging into the TURN server will use the username &quot;webrtc&quot; and the creative password &quot;turnpassword&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d238cd72be6b873d183342587d19b0cae2946793" translate="yes" xml:space="preserve">
          <source>This example creates a new &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/unhandledrejection&quot;&gt;unhandledrejection&lt;/a&gt;&lt;/code&gt; event for the promise &lt;code&gt;myPromise&lt;/code&gt; with the reason being the string &quot;My house is on fire&quot;. The &lt;code&gt;reason&lt;/code&gt; could just as easily be a number, or even an object with detailed information including the home address, how serious the fire is, and the phone number of an emergency contact who should be notified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fee46bd9985e11874232f209749cc64d371f57f" translate="yes" xml:space="preserve">
          <source>This example creates a new &lt;code&gt;DOMPoint&lt;/code&gt; representing the top-left corner of the current window, with a &lt;em&gt;z&lt;/em&gt; component added to move the point closer to the user. This same code will work to create a &lt;code&gt;DOMPointReadOnly&lt;/code&gt; object; just change the interface name in the code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eacd87e16a860256ef9a97cd1b28c79eaefc3a73" translate="yes" xml:space="preserve">
          <source>This example creates a new HTML document and inserts it into an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe&quot;&gt;&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;&lt;/a&gt; in the current document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a27dc53a8115907a825128c91c65db89cb1f1d6" translate="yes" xml:space="preserve">
          <source>This example creates a new audio buffer, then copies the samples from another channel into it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6110037ae735e89cc4db25896962994038cf5ca" translate="yes" xml:space="preserve">
          <source>This example creates a periodic function using &lt;a href=&quot;../windoworworkerglobalscope/setinterval&quot;&gt;&lt;code&gt;setInterval()&lt;/code&gt;&lt;/a&gt; that collects statistics for an &lt;a href=&quot;../rtcpeerconnection&quot;&gt;&lt;code&gt;RTCPeerConnection&lt;/code&gt;&lt;/a&gt; every second, generating an HTML-formatted report and inserting it into a specific element in the DOM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bde58494d0fed00eff9a339745f0d3794f52c6d" translate="yes" xml:space="preserve">
          <source>This example creates a point, &lt;code&gt;origPoint&lt;/code&gt;, of type &lt;a href=&quot;../dompoint&quot;&gt;&lt;code&gt;DOMPoint&lt;/code&gt;&lt;/a&gt;, using &lt;a href=&quot;../dompoint/dompoint&quot;&gt;&lt;code&gt;new DOMPoint()&lt;/code&gt;&lt;/a&gt;. That point is then used as the input for &lt;code&gt;fromPoint()&lt;/code&gt; to create a new point, &lt;code&gt;newPoint&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a96e0142535559ce3d38564b6c90086bef6a5859" translate="yes" xml:space="preserve">
          <source>This example creates a rectangle using the &lt;code&gt;rect()&lt;/code&gt; method, and then draws it to the canvas using &lt;code&gt;stroke()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d8f9bee60754210e091cc30c3cd0c50b2b5fc52" translate="yes" xml:space="preserve">
          <source>This example creates a rectangular path using the &lt;code&gt;rect()&lt;/code&gt; method. The path is then rendered using the &lt;code&gt;fill()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="129f2770e71a6bdfca40fd1e2e3502835ccd1abb" translate="yes" xml:space="preserve">
          <source>This example creates a rounded corner using &lt;code&gt;arcTo()&lt;/code&gt;. This is one of the method's most common uses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11b145b737e7f576ee3f3b70feea3b68bae7775e" translate="yes" xml:space="preserve">
          <source>This example creates an &lt;code&gt;ImageData&lt;/code&gt; object that is 100 pixels wide and 100 pixels tall, making 10,000 pixels in all. The &lt;code&gt;data&lt;/code&gt; array stores four values for each pixel, making 4 x 10,000, or 40,000 values in all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76f789f52f1fc64ce53bfca92d99429e4412f1e8" translate="yes" xml:space="preserve">
          <source>This example creates an &lt;code&gt;ImageData&lt;/code&gt; object that is 200 pixels wide and 100 pixels tall, containing a total of 20,000 pixels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1603fef1b9a1db97cda6dbbdd14d4f8107918db2" translate="yes" xml:space="preserve">
          <source>This example creates an &lt;code&gt;ImageData&lt;/code&gt; object that is 200 pixels wide and 100 pixels tall. Thus, the &lt;code&gt;height&lt;/code&gt; property is &lt;code&gt;100&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1f83c8771093a58694e87a02104268c25dbf3e2" translate="yes" xml:space="preserve">
          <source>This example creates an &lt;code&gt;ImageData&lt;/code&gt; object that is 200 pixels wide and 100 pixels tall. Thus, the &lt;code&gt;width&lt;/code&gt; property is &lt;code&gt;200&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a7b3716610a5c5a4a0dc130e8de1bb85ff9cf30" translate="yes" xml:space="preserve">
          <source>This example creates an &lt;code&gt;unmute&lt;/code&gt; event handler which changes the state of a visual indicator to display the Emoji character representing a &quot;speaker&quot; icon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d66b55cf7772ec92626d6dc0ebba47603ee6345" translate="yes" xml:space="preserve">
          <source>This example creates an observer then, later, disconnects from it, leaving it available for possible reuse.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7560776f23946e6fac638b4b9f69dbab3c0990ef" translate="yes" xml:space="preserve">
          <source>This example creates an oscillator, then links it to a gain node, so that the gain node controls the volume of the oscillator node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="935d7c415f11404b577077901ac9b5d03e8c5e4f" translate="yes" xml:space="preserve">
          <source>This example creates and configures two &lt;code&gt;PerformanceObservers&lt;/code&gt;; one watches for &lt;code&gt;&quot;mark&quot;&lt;/code&gt; and &lt;code&gt;&quot;frame&quot;&lt;/code&gt; events, and the other watches for &lt;code&gt;&quot;measure&quot;&lt;/code&gt; events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68712c65513217185496da3e815c63fd9968261f" translate="yes" xml:space="preserve">
          <source>This example creates and fills a new &lt;code&gt;ImageData&lt;/code&gt; object with colorful pixels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a724b71a87e53c63ddecfe2aad64749d691f32f" translate="yes" xml:space="preserve">
          <source>This example creates and fills a new &lt;code&gt;ImageData&lt;/code&gt; object with purple pixels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e73c73a3a16cfe942ba538ee931ce72bbdea2a32" translate="yes" xml:space="preserve">
          <source>This example creates the first two (diagonal) sides of a triangle using the &lt;code&gt;lineTo()&lt;/code&gt; method. After that, the triangle's base is created with the &lt;code&gt;closePath()&lt;/code&gt; method, which automatically connects the shape's first and last points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e26e0a0262799b965326eb35eb0ad82acd0e9a3" translate="yes" xml:space="preserve">
          <source>This example creates three elliptical paths with vaying properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8587a271f1d2a9d3042410bfd5c8515a1346fda1" translate="yes" xml:space="preserve">
          <source>This example creates two buttons which let you set the current color of the paragraph element located under the coordinates (2, 2).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b901257b83f94ab3a6ae3c87c7d8f6a98109551" translate="yes" xml:space="preserve">
          <source>This example creates two paths, each of which contains a single line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8028fe3a46de4d348e7260928626f1f880915566" translate="yes" xml:space="preserve">
          <source>This example defines a audio configuration then checks to see if the user agent supports decoding that media configuration, and whether it will perform well in terms of smoothness and power efficiency.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eebf98d4da6c01d7b1d9c2c79b4c76e26c4f8cb3" translate="yes" xml:space="preserve">
          <source>This example deletes a temporary work file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97e56816be4ce17b325dc481a49c8b5f66d7a352" translate="yes" xml:space="preserve">
          <source>This example demonstrates a &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/click&quot;&gt;click&lt;/a&gt;&lt;/code&gt; event handler for a pause button.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="318942d1fdedb7b34fe6879be39788097a9943d4" translate="yes" xml:space="preserve">
          <source>This example demonstrates a simple event listener implemented using arrow function notation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25fde44f7a181d6c34d80c26abda65b98d3cbb9d" translate="yes" xml:space="preserve">
          <source>This example demonstrates how different &lt;a href=&quot;rollofffactor&quot;&gt;&lt;code&gt;rolloffFactor&lt;/code&gt;&lt;/a&gt; values affect how the volume of the test tone decreases with increasing distance from the listener:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0db1d52cccc2674275f08564e1536e6e20e350c" translate="yes" xml:space="preserve">
          <source>This example demonstrates how different values of &lt;a href=&quot;refdistance&quot;&gt;&lt;code&gt;refDistance&lt;/code&gt;&lt;/a&gt; affect how the volume of a sound decays as it moves away from the listener. Unlike &lt;a href=&quot;rollofffactor&quot;&gt;&lt;code&gt;rolloffFactor&lt;/code&gt;&lt;/a&gt;, changing this value also &lt;em&gt;delays&lt;/em&gt; the volume decay until the sound moves past the reference point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="831b0f00ff6983bbff81cd37bc1747994a925be1" translate="yes" xml:space="preserve">
          <source>This example demonstrates how events fire and are handled in the DOM in a very simple way. When the BODY of this HTML document loads, an event listener is registered with the top row of the TABLE. The event listener handles the event by executing the function stopEvent, which changes the value in the bottom cell of the table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d68399cba8f63bb176c2551051885d557979d0ac" translate="yes" xml:space="preserve">
          <source>This example demonstrates how the &lt;a href=&quot;../window/getcomputedstyle&quot;&gt;&lt;code&gt;window.getComputedStyle&lt;/code&gt;&lt;/a&gt; method can be used to get the styles of an element that are not set using the &lt;code&gt;style&lt;/code&gt; attribute or with JavaScript (e.g., &lt;code&gt;elt.style.backgroundColor=&quot;rgb(173, 216, 230)&quot;&lt;/code&gt;). These latter types of styles can be retrieved with the more direct &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/element/style&quot;&gt;&lt;code&gt;elt.style&lt;/code&gt;&lt;/a&gt; property, whose properties are listed in the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Reference&quot;&gt;DOM CSS Properties List&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87b3fc90574fc8631ec025cec2fbe698929d6bbd" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to confirm that playback has begun and how to gracefully handle blocked automatic playback:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d64d34709acf5e543ff3a28796ce0d7845f3bc9" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to create an &lt;a href=&quot;../oscillatornode&quot;&gt;&lt;code&gt;OscillatorNode&lt;/code&gt;&lt;/a&gt; which is scheduled to start playing in 2 seconds and stop playing 1 second after that. The times are calculated by adding the desired number of seconds to the context's current time stamp returned by &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/currentTime&quot;&gt;&lt;code&gt;AudioContext.currentTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e427dc5d39831ae9b026ef07bdc55937deea112" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to detect a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/WebGL&quot;&gt;WebGL&lt;/a&gt; rendering context and reports the result to the user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91035eeda86cd4121e3a14979113c918f6fe4ce2" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to make a simple synchronous request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a090785e44c96c21f459f3310340faa79cfbdfe5" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to use &lt;code&gt;addEventListener()&lt;/code&gt; to watch for mouse clicks on an element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beff8e52a51a2a994f292603f72a5250a5a7e666" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to use video files as textures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ecb841f365fb9cfdb27a00fb78b4889dbdd7d2e" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to watch for and act upon &lt;code&gt;pointerdown&lt;/code&gt; events using &lt;code&gt;onpointerdown&lt;/code&gt;. You could also use &lt;code&gt;addEventListener()&lt;/code&gt;, of course.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="511b70eafa42cd1baa9641e5c60ccacf3936c1b9" translate="yes" xml:space="preserve">
          <source>This example demonstrates simulating a click (that is programmatically generating a click event) on a checkbox using DOM methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28799e6d6c6990e93bb85da04feecee02950621e" translate="yes" xml:space="preserve">
          <source>This example demonstrates some of the benefits of translating the canvas origin. Without the &lt;code&gt;translate()&lt;/code&gt; method, all of the rectangles would be drawn at the same position (0,0). The &lt;code&gt;translate()&lt;/code&gt; method also gives us the freedom to place the rectangle anywhere on the canvas without having to manually adjust coordinates in the &lt;code&gt;fillRect()&lt;/code&gt; function. This makes it a little easier to understand and use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e892e2c4c9aa62107c0a1ec7dd8b76175350a294" translate="yes" xml:space="preserve">
          <source>This example demonstrates starting an oscillator node, scheduled to begin playing at once and to stop playing in one second. The stop time is determined by taking the audio context's current time from &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/currentTime&quot;&gt;&lt;code&gt;AudioContext.currentTime&lt;/code&gt;&lt;/a&gt; and adding 1 second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f77af4ce6edc6e43f055a3322106e52d317872d" translate="yes" xml:space="preserve">
          <source>This example demonstrates that the hierarchy of the entire document is considered when applying &lt;code&gt;selectors&lt;/code&gt;, so that levels outside the specified &lt;code&gt;baseElement&lt;/code&gt; are still considered when locating matches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb2ec2f8cb2608f036ffd243bfa2531199d01b58" translate="yes" xml:space="preserve">
          <source>This example demonstrates the &lt;code&gt;addHitRegion()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89fc2304b240086903be5b34e85edee9e1a077a4" translate="yes" xml:space="preserve">
          <source>This example demonstrates the &lt;code&gt;clearHitRegions()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e3522470e08cb7d2cd8534bcb4dc33de6b9b7ab" translate="yes" xml:space="preserve">
          <source>This example demonstrates the &lt;code&gt;getLineDash()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f52df6deaaabf5e36e43473641dbae0cd1775cd1" translate="yes" xml:space="preserve">
          <source>This example demonstrates the &lt;code&gt;removeHitRegion()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60f9c1f9e15adfc0329d9d3b25107347d15f6698" translate="yes" xml:space="preserve">
          <source>This example demonstrates the simple animation of a one-color shape. Topics examined are adapting to aspect ratio differences, a function to build shader programs from sets of multiple shaders, and the basics of drawing in WebGL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd6bc8dbbd217a48267faf723e93376988c174bb" translate="yes" xml:space="preserve">
          <source>This example demonstrates the use of &lt;code&gt;firstChild&lt;/code&gt; and how whitespace nodes might interfere with using this property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2b64a2a09a748867c26a6c8c335b4fd7c944733" translate="yes" xml:space="preserve">
          <source>This example demonstrates the use of the &lt;a href=&quot;ondrop&quot;&gt;&lt;code&gt;ondrop&lt;/code&gt;&lt;/a&gt; attribute to define an element's &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt; event handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50c86ebcc7b1d284ebcd534b140d33dcf362085a" translate="yes" xml:space="preserve">
          <source>This example demonstrates the various &lt;code&gt;textBaseline&lt;/code&gt; property values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="299584266fc307d799fdae59764963ce969be7d1" translate="yes" xml:space="preserve">
          <source>This example demonstrates using pointer events' various event types (&lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/pointerdown&quot;&gt;pointerdown&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/pointermove&quot;&gt;pointermove&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/pointerup&quot;&gt;pointerup&lt;/a&gt;&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/pointercancel&quot;&gt;pointercancel&lt;/a&gt;&lt;/code&gt;, etc.) for different multi-touch interactions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecd9312367982e58ff26c9bac0303836f80cf10e" translate="yes" xml:space="preserve">
          <source>This example demonstrates using the &lt;a href=&quot;ondragenter&quot;&gt;&lt;code&gt;ondragenter&lt;/code&gt;&lt;/a&gt; attribute handler to set an element's &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/dragenter&quot;&gt;dragenter&lt;/a&gt;&lt;/code&gt; event handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f27d6b0998332296d7b41768ba04305c5353cf5" translate="yes" xml:space="preserve">
          <source>This example demonstrates using the &lt;a href=&quot;ondragexit&quot;&gt;&lt;code&gt;ondragexit&lt;/code&gt;&lt;/a&gt; attribute handler to set an element's &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/dragexit&quot;&gt;dragexit&lt;/a&gt;&lt;/code&gt; event handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0112e279e4fb43d3f41d66cc57e49eed2a92dd99" translate="yes" xml:space="preserve">
          <source>This example demonstrates using the &lt;a href=&quot;ondragleave&quot;&gt;&lt;code&gt;ondragleave&lt;/code&gt;&lt;/a&gt; attribute handler to set an element's &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/dragleave&quot;&gt;dragleave&lt;/a&gt;&lt;/code&gt; event handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f06b4846ce53dce970729c40097f479913e36a4e" translate="yes" xml:space="preserve">
          <source>This example demonstrates using the &lt;a href=&quot;ondragover&quot;&gt;&lt;code&gt;ondragover&lt;/code&gt;&lt;/a&gt; attribute handler to set an element's &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/dragover&quot;&gt;dragover&lt;/a&gt;&lt;/code&gt; event handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f84c1628acc7b6a8702230c9140fc3a98fb9697b" translate="yes" xml:space="preserve">
          <source>This example demonstrates using the &lt;a href=&quot;ondragstart&quot;&gt;&lt;code&gt;ondragstart&lt;/code&gt;&lt;/a&gt; attribute handler to set an element's &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/dragstart&quot;&gt;dragstart&lt;/a&gt;&lt;/code&gt; event handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd20bd869b77a83aa1c6c4cdbb77c56f9e74d068" translate="yes" xml:space="preserve">
          <source>This example demonstrates using the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/touchstart&quot;&gt;touchstart&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/touchmove&quot;&gt;touchmove&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/touchcancel&quot;&gt;touchcancel&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/touchend&quot;&gt;touchend&lt;/a&gt;&lt;/code&gt;) touch events for the following gestures: single touch, two (simultaneous) touches, more than two simultaneous touches, 1-finger swipe, and 2-finger move/pinch/swipe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="857ead5e97e080e7e87c110ee22e95bfbac1e432" translate="yes" xml:space="preserve">
          <source>This example draws a blue triangle on top of a yellowish background. The &lt;code&gt;clearRect()&lt;/code&gt; method then erases part of the canvas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63d5ece748dea6a044bb991f19ef5ce931df45ef" translate="yes" xml:space="preserve">
          <source>This example draws a complete circle using the &lt;code&gt;arc()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bc1c7dc9ee8847a277a3c0d7b291e4ac9f4013d" translate="yes" xml:space="preserve">
          <source>This example draws a filled green rectangle using the &lt;code&gt;fillRect()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f199557868c7809aaacfb10ab59f2b26a8df21eb" translate="yes" xml:space="preserve">
          <source>This example draws a heart using cubic B&amp;eacute;zier curves.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d790cc8c204051129d49a629c648e4af3a059b5" translate="yes" xml:space="preserve">
          <source>This example draws a rectangle with a drop shadow and thick, beveled outlines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="104af60a59102c63f0b127153efd6a0175b574c0" translate="yes" xml:space="preserve">
          <source>This example draws a rectangle with a green outline using the &lt;code&gt;strokeRect()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98e4203c33e75a88a71bf0bca00dd405a1b91961" translate="yes" xml:space="preserve">
          <source>This example draws a rectangle, and then uses &lt;code&gt;getImageData()&lt;/code&gt; to grab a portion of the canvas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e540caeb94f69e918ccf0f0c5fd1211903eb5bec" translate="yes" xml:space="preserve">
          <source>This example draws a simple B&amp;eacute;zier curve using &lt;code&gt;bezierCurveTo()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a19cb4cd26a9bd0b16cc6786634cf14f68ad2000" translate="yes" xml:space="preserve">
          <source>This example draws a simple quadratic B&amp;eacute;zier curve using &lt;code&gt;quadraticCurveTo()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82d8fe8aa1c5b599b2e12fa7f58a2bc1e8a4230f" translate="yes" xml:space="preserve">
          <source>This example draws a smiley face consisting of three disconnected sub-paths. Note that, although &lt;code&gt;closePath()&lt;/code&gt; is called after all the arcs have been created, only the last arc (sub-path) gets closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ac6a11f42ad679a43087920946e1f430299b057" translate="yes" xml:space="preserve">
          <source>This example draws a straight line using the &lt;code&gt;lineTo()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8d0159198190d81f9d129a05fb891735eaecc93" translate="yes" xml:space="preserve">
          <source>This example draws a text string with a shadowing effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7953ecbb0e019264f1ffa8a5e670a3e269b501ee" translate="yes" xml:space="preserve">
          <source>This example draws an animated clock, showing your current time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c7140bb65c3de0bca87bc69ec17a4cf24b545e3" translate="yes" xml:space="preserve">
          <source>This example draws an ellipse at an angle of &amp;pi;/4 radians (45&lt;strong&gt;&amp;deg;&lt;/strong&gt;). To make a full ellipse, the arc begins at an angle of 0 radians (0&lt;strong&gt;&amp;deg;&lt;/strong&gt;), and ends at an angle of 2&amp;pi; radians (360&lt;strong&gt;&amp;deg;&lt;/strong&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d9822c79cc1581e89b7ce633f7b4728d78758b6" translate="yes" xml:space="preserve">
          <source>This example draws an image to the canvas using the &lt;code&gt;drawImage()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="986855db93587824f43d70b2cdc33447ffde57cc" translate="yes" xml:space="preserve">
          <source>This example draws various shapes to show what is possible when using &lt;code&gt;arc()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edddba5f0281c20e9f3016fc9bdd5a0bdeb78669" translate="yes" xml:space="preserve">
          <source>This example establishes a &lt;code&gt;fullscreenchange&lt;/code&gt; event handler, &lt;code&gt;handleFullscreenChange()&lt;/code&gt;. This function determines which element it was called on by checking the value of &lt;a href=&quot;../event/target&quot;&gt;&lt;code&gt;event.target&lt;/code&gt;&lt;/a&gt;, then compares the document's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/fullscreenElement&quot;&gt;&lt;code&gt;fullscreenElement&lt;/code&gt;&lt;/a&gt; value to the element to see if they're the same node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b84b4ac3c05e50952fae7441ae5af56090efafe" translate="yes" xml:space="preserve">
          <source>This example establishes a handler for the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/tonechange&quot;&gt;tonechange&lt;/a&gt;&lt;/code&gt; event which updates an element to display the currently playing tone in its content, or, if all tones have played, the string &quot;&amp;lt;none&amp;gt;&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed57d5197b4ee23f07ee900b8140cbc2c8d72ebe" translate="yes" xml:space="preserve">
          <source>This example establishes a method, &lt;code&gt;readFile()&lt;/code&gt;, reads a text file and calls a specified callback function with the received text (in a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; object) once the read is completed. If an error occurs, a specified (optional) error callback is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="160616646ba75eeaa07b0fdc5cd0a6300eda3245" translate="yes" xml:space="preserve">
          <source>This example establishes a method, &lt;code&gt;writeToFileEntry()&lt;/code&gt;, which outputs a text string to the file corresponding to the passed-in directory entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96288394941964ebf7c1dd3acaefd3d647416d27" translate="yes" xml:space="preserve">
          <source>This example establishes a video element and adds an error handler to it; the error handler simply logs the details to console.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="255f287b5a27ccdd057e1785afbacf61607d902c" translate="yes" xml:space="preserve">
          <source>This example establishes an event listener for &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/keydown&quot;&gt;keydown&lt;/a&gt;&lt;/code&gt; events which handles keyboard input for a game which uses the typical &quot;WASD&quot; keyboard layout for steering forward, left, backward, and right. This will use the same four keys physically regardless of what the actual corresponding characters are, such as if the user is using an AZERTY keyboard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34a3f80f80f5995c0ae11de67eb85fdac60bf0ef" translate="yes" xml:space="preserve">
          <source>This example examines the headers in the request's &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/readystatechange&quot;&gt;readystatechange&lt;/a&gt;&lt;/code&gt; event handler, &lt;a href=&quot;onreadystatechange&quot;&gt;&lt;code&gt;XMLHttpRequest.onreadystatechange&lt;/code&gt;&lt;/a&gt;. The code shows how to obtain the raw header string, as well as how to convert it into an array of individual headers and then how to take that array and create a mapping of header names to their values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be4cb5108ebb2b7b28fcddc3c8e3938fceacf9a4" translate="yes" xml:space="preserve">
          <source>This example fetches the current charging state of the battery and establishes a handler for the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/chargingchange&quot;&gt;chargingchange&lt;/a&gt;&lt;/code&gt; event, so that the charging state is recorded whenever it changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7f8d42d39a577e439249073c9877e412f6805ca" translate="yes" xml:space="preserve">
          <source>This example fetches the current configuration of the &lt;a href=&quot;../rtcpeerconnection&quot;&gt;&lt;code&gt;RTCPeerConnection&lt;/code&gt;&lt;/a&gt;, then looks to see if it has any certificates set by examining whether or not (a) the configuration has a value for &lt;code&gt;certificates&lt;/code&gt;, and (b) whether its length is zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d405a5c6accc148281ae5f99a5fcb3c518afe2f8" translate="yes" xml:space="preserve">
          <source>This example fetches the document's current HTML markup and replaces the &lt;code&gt;&quot;&amp;lt;&quot;&lt;/code&gt; characters with the HTML entity &lt;code&gt;&quot;&amp;amp;lt;&quot;&lt;/code&gt;, thereby essentially converting the HTML into raw text. This is then wrapped in a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre&quot;&gt;&lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt;&lt;/a&gt; element. Then the value of &lt;code&gt;innerHTML&lt;/code&gt; is changed to this new string. As a result, the document contents are replaced with a display of the page's entire source code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0f31723af12e91a747bd9e06a9b6f2684f33b59" translate="yes" xml:space="preserve">
          <source>This example fills a rectangle with the &lt;code&gt;fill()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b93312ab6515d8f0f78e5d0341d380f6710ead70" translate="yes" xml:space="preserve">
          <source>This example finds a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video&quot;&gt;&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;&lt;/a&gt; element in the document and resets it by calling &lt;code&gt;load()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1899a9670aae40361ad5b8e57fb2d39cf00cc71" translate="yes" xml:space="preserve">
          <source>This example finds all elements that have a class of &lt;code&gt;test&lt;/code&gt;, which are also a descendant of the element that has the &lt;code&gt;id&lt;/code&gt; of &lt;code&gt;main&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fa506f5dae445620d20080384c0ebedce860677" translate="yes" xml:space="preserve">
          <source>This example function replaces the current contents of the clipboard with a specified string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c767f1dec42843215ccb66206b022a1d441292c" translate="yes" xml:space="preserve">
          <source>This example gets a webcam's audio and video in a stream using &lt;a href=&quot;../mediadevices/getusermedia&quot;&gt;&lt;code&gt;getUserMedia()&lt;/code&gt;&lt;/a&gt;, attaches the stream to a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video&quot;&gt;&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;&lt;/a&gt; element, then sets a timer that, upon expiring, will stop the first audio track found on the stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52363a20bc2cb397c229e68d500d8c12aa2bdaeb" translate="yes" xml:space="preserve">
          <source>This example gets the form's element list, then iterates over the list, looking for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input&quot;&gt;&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;&lt;/a&gt; elements of type &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/text&quot;&gt;&quot;text&quot;&lt;/a&gt;&lt;/code&gt; so that some form of processing can be performed on them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1fed95cd489fb1c48f4630a7d97b2db9c1d3d51" translate="yes" xml:space="preserve">
          <source>This example gives a preference for camera resolution, and assigns the resulting &lt;a href=&quot;../mediastream&quot;&gt;&lt;code&gt;MediaStream&lt;/code&gt;&lt;/a&gt; object to a video element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5155a8744d180f5b4efe5d0bae1e3ee142448772" translate="yes" xml:space="preserve">
          <source>This example illustrates a variety of common line dash patterns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af02c9813f8e542014491da3a89d91026a941e2d" translate="yes" xml:space="preserve">
          <source>This example illustrates accessing all of a touch event's properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7debe77bf4888b740d3b003793cf8f7c147c41d5" translate="yes" xml:space="preserve">
          <source>This example illustrates accessing the drag and drop data within the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/dragend&quot;&gt;dragend&lt;/a&gt;&lt;/code&gt; event handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f36a7c197e9fe66bb0b259e6771a73c1febc5be3" translate="yes" xml:space="preserve">
          <source>This example illustrates how to access the &lt;a href=&quot;../touch&quot;&gt;&lt;code&gt;Touch&lt;/code&gt;&lt;/a&gt; object's &lt;a href=&quot;pagex&quot;&gt;&lt;code&gt;Touch.pageX&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;pagey&quot;&gt;&lt;code&gt;Touch.pageY&lt;/code&gt;&lt;/a&gt; properties. The &lt;a href=&quot;pagex&quot;&gt;&lt;code&gt;Touch.pageX&lt;/code&gt;&lt;/a&gt; property is the horizontal coordinate of a touch point relative to the viewport (in CSS pixels), including any scroll offset. The &lt;a href=&quot;pagey&quot;&gt;&lt;code&gt;Touch.pageY&lt;/code&gt;&lt;/a&gt; property is the vertical coordinate of a touch point relative to the viewport (in CSS pixels), including any scroll offset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45ae8f522b52a51106a635d52d1730c82d3c92fe" translate="yes" xml:space="preserve">
          <source>This example illustrates how to access the &lt;a href=&quot;../touch&quot;&gt;&lt;code&gt;Touch&lt;/code&gt;&lt;/a&gt; object's &lt;a href=&quot;screenx&quot;&gt;&lt;code&gt;Touch.screenX&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;screeny&quot;&gt;&lt;code&gt;Touch.screenY&lt;/code&gt;&lt;/a&gt; properties. The &lt;a href=&quot;screenx&quot;&gt;&lt;code&gt;Touch.screenX&lt;/code&gt;&lt;/a&gt; property is the horizontal (x) coordinate of a touch point relative to the screen in CSS pixels. The &lt;a href=&quot;screeny&quot;&gt;&lt;code&gt;Touch.screenY&lt;/code&gt;&lt;/a&gt; property is the vertical coordinate of a touch point relative to the screen in CSS pixels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11b64d94335b62564b50b1791e66b762f9af2977" translate="yes" xml:space="preserve">
          <source>This example illustrates how to access the &lt;a href=&quot;../touch&quot;&gt;&lt;code&gt;Touch&lt;/code&gt;&lt;/a&gt; object's &lt;a href=&quot;target&quot;&gt;&lt;code&gt;Touch.target&lt;/code&gt;&lt;/a&gt; property. The &lt;a href=&quot;target&quot;&gt;&lt;code&gt;Touch.target&lt;/code&gt;&lt;/a&gt; property is an &lt;a href=&quot;../element&quot;&gt;&lt;code&gt;Element&lt;/code&gt;&lt;/a&gt; (&lt;a href=&quot;../eventtarget&quot;&gt;&lt;code&gt;EventTarget&lt;/code&gt;&lt;/a&gt;) on which a touch point is started when contact is first placed on the surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36eb3f93645ddcdc6eeb4e885bb04374c7381b60" translate="yes" xml:space="preserve">
          <source>This example illustrates how to access the &lt;a href=&quot;../touchevent&quot;&gt;&lt;code&gt;TouchEvent&lt;/code&gt;&lt;/a&gt; key modifier properties: &lt;a href=&quot;altkey&quot;&gt;&lt;code&gt;TouchEvent.altKey&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;ctrlkey&quot;&gt;&lt;code&gt;TouchEvent.ctrlKey&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;metakey&quot;&gt;&lt;code&gt;TouchEvent.metaKey&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;shiftkey&quot;&gt;&lt;code&gt;TouchEvent.shiftKey&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45e30fd30382c72b20a7599115816a1c637072ad" translate="yes" xml:space="preserve">
          <source>This example illustrates simple accessing of the &lt;a href=&quot;tiltx&quot;&gt;&lt;code&gt;tiltX&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;tilty&quot;&gt;&lt;code&gt;tiltY&lt;/code&gt;&lt;/a&gt; properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7552a022096a43cf7b0c31c12b92ff6b740f9e73" translate="yes" xml:space="preserve">
          <source>This example illustrates the &lt;a href=&quot;../pointerevent&quot;&gt;&lt;code&gt;PointerEvent&lt;/code&gt;&lt;/a&gt; interface's &lt;a href=&quot;pointerid&quot;&gt;&lt;code&gt;pointerId&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ae756b51952a1c216717e71ed70d0db3303f6cd" translate="yes" xml:space="preserve">
          <source>This example illustrates the &lt;a href=&quot;../touchevent&quot;&gt;&lt;code&gt;TouchEvent&lt;/code&gt;&lt;/a&gt; object's &lt;a href=&quot;changedtouches&quot;&gt;&lt;code&gt;TouchEvent.changedTouches&lt;/code&gt;&lt;/a&gt; property. The &lt;a href=&quot;changedtouches&quot;&gt;&lt;code&gt;TouchEvent.changedTouches&lt;/code&gt;&lt;/a&gt; property is a &lt;a href=&quot;../touchlist&quot;&gt;&lt;code&gt;TouchList&lt;/code&gt;&lt;/a&gt; object that contains one &lt;a href=&quot;../touch&quot;&gt;&lt;code&gt;Touch&lt;/code&gt;&lt;/a&gt; object for each touch point which contributed to the event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0028492d52b27849aea64dc1e229b51859a30988" translate="yes" xml:space="preserve">
          <source>This example illustrates the &lt;a href=&quot;../touchevent&quot;&gt;&lt;code&gt;TouchEvent&lt;/code&gt;&lt;/a&gt; object's &lt;a href=&quot;targettouches&quot;&gt;&lt;code&gt;TouchEvent.targetTouches&lt;/code&gt;&lt;/a&gt; property. The &lt;a href=&quot;targettouches&quot;&gt;&lt;code&gt;TouchEvent.targetTouches&lt;/code&gt;&lt;/a&gt; property is a &lt;a href=&quot;../touchlist&quot;&gt;&lt;code&gt;TouchList&lt;/code&gt;&lt;/a&gt; object that includes those TPs that are currently touching the surface &lt;em&gt;and&lt;/em&gt; started on the element that is the target of the current event. As such, the &lt;code&gt;targetTouches&lt;/code&gt; list is a strict subset of the &lt;code&gt;touches&lt;/code&gt; list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05e02726173174f1246874c0c44f7c836a365f72" translate="yes" xml:space="preserve">
          <source>This example illustrates the &lt;a href=&quot;../touchevent&quot;&gt;&lt;code&gt;TouchEvent&lt;/code&gt;&lt;/a&gt; object's &lt;a href=&quot;touches&quot;&gt;&lt;code&gt;TouchEvent.touches&lt;/code&gt;&lt;/a&gt; property. The &lt;a href=&quot;touches&quot;&gt;&lt;code&gt;TouchEvent.touches&lt;/code&gt;&lt;/a&gt; property is a &lt;a href=&quot;../touchlist&quot;&gt;&lt;code&gt;TouchList&lt;/code&gt;&lt;/a&gt; object and containing a list of &lt;a href=&quot;../touch&quot;&gt;&lt;code&gt;Touch&lt;/code&gt;&lt;/a&gt; objects for every point of contact currently touching the surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b56ff09a77d1e4c46be6ac4274025d3648a8266" translate="yes" xml:space="preserve">
          <source>This example illustrates the effect of applying the &lt;code&gt;imageSmoothingEnabled&lt;/code&gt; property to a scaled image. The image's natural dimensions are 86 x 117.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeb80e0ac025c4ca95f8944a8e9ef43225d63b65" translate="yes" xml:space="preserve">
          <source>This example illustrates the effect of overlaying multiple transparent shapes on top of each other. We begin by drawing a solid background composed of four differently colored squares. Next, we set the &lt;code&gt;globalAlpha&lt;/code&gt; property to &lt;code&gt;0.2&lt;/code&gt; (20% opaque); this alpha level will apply to all of our transparent shapes. After that, we use a &lt;code&gt;for&lt;/code&gt; loop to draw a series of circles with increasing radii.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c6772cf4c02f5860872863b88e147575a8889fd" translate="yes" xml:space="preserve">
          <source>This example illustrates using the &lt;a href=&quot;../pointerevent&quot;&gt;&lt;code&gt;PointerEvent&lt;/code&gt;&lt;/a&gt; interface's &lt;a href=&quot;width&quot;&gt;&lt;code&gt;width&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;width&quot;&gt;&lt;code&gt;width&lt;/code&gt;&lt;/a&gt; properties to calculate the contact area.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b2b58e3434050c87c3a8cfe520c447ecd89061e" translate="yes" xml:space="preserve">
          <source>This example illustrates using the &lt;a href=&quot;../touch&quot;&gt;&lt;code&gt;Touch&lt;/code&gt;&lt;/a&gt; interface's &lt;a href=&quot;force&quot;&gt;&lt;code&gt;Touch.force&lt;/code&gt;&lt;/a&gt; property. This property is a relative value of pressure applied, in the range &lt;code&gt;0.0&lt;/code&gt; to &lt;code&gt;1.0&lt;/code&gt;, where &lt;code&gt;0.0&lt;/code&gt; is no pressure, and &lt;code&gt;1.0&lt;/code&gt; is the highest level of pressure the touch device is capable of sensing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ae29b94cf41ded984e5e2cd3c50f8c6dd69b17a" translate="yes" xml:space="preserve">
          <source>This example illustrates using the &lt;a href=&quot;../touch&quot;&gt;&lt;code&gt;Touch&lt;/code&gt;&lt;/a&gt; interface's &lt;a href=&quot;radiusx&quot;&gt;&lt;code&gt;Touch.radiusX&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;radiusx&quot;&gt;&lt;code&gt;Touch.radiusX&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;rotationangle&quot;&gt;&lt;code&gt;Touch.rotationAngle&lt;/code&gt;&lt;/a&gt; properties. The &lt;a href=&quot;radiusx&quot;&gt;&lt;code&gt;Touch.radiusX&lt;/code&gt;&lt;/a&gt; property is the radius of the ellipse which most closely circumscribes the touching area (e.g. finger, stylus) along the axis &lt;strong&gt;indicated&lt;/strong&gt; by the touch point's &lt;a href=&quot;rotationangle&quot;&gt;&lt;code&gt;Touch.rotationAngle&lt;/code&gt;&lt;/a&gt;. Likewise, the &lt;a href=&quot;radiusy&quot;&gt;&lt;code&gt;Touch.radiusY&lt;/code&gt;&lt;/a&gt; property is the radius of the ellipse which most closely circumscribes the touching area (e.g. finger, stylus) along the axis &lt;strong&gt;perpendicular&lt;/strong&gt; to that indicated by &lt;a href=&quot;rotationangle&quot;&gt;&lt;code&gt;Touch.rotationAngle&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;rotationangle&quot;&gt;&lt;code&gt;Touch.rotationAngle&lt;/code&gt;&lt;/a&gt; is the angle (in degrees) that the ellipse described by &lt;code&gt;radiusX&lt;/code&gt; and &lt;code&gt;radiusY&lt;/code&gt; is rotated clockwise about its center.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2a68e393297f81b5c695aa907d59f111662a3c5" translate="yes" xml:space="preserve">
          <source>This example illustrates using the &lt;a href=&quot;../touch&quot;&gt;&lt;code&gt;Touch&lt;/code&gt;&lt;/a&gt; object's &lt;a href=&quot;clientx&quot;&gt;&lt;code&gt;Touch.clientX&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;clienty&quot;&gt;&lt;code&gt;Touch.clientY&lt;/code&gt;&lt;/a&gt; properties. The &lt;a href=&quot;clientx&quot;&gt;&lt;code&gt;Touch.clientX&lt;/code&gt;&lt;/a&gt; property is the horizontal coordinate of a touch point relative to the browser's viewport excluding any scroll offset. The &lt;a href=&quot;clienty&quot;&gt;&lt;code&gt;Touch.clientY&lt;/code&gt;&lt;/a&gt; property is the vertical coordinate of the touch point relative to the browser's viewport excluding any scroll offset .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a6f4dc5310587b5b254b1c3813649ea4b095906" translate="yes" xml:space="preserve">
          <source>This example illustrates using the &lt;a href=&quot;pressure&quot;&gt;&lt;code&gt;pressure&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ebed18c5d26e1c1ed20e3c5cad383eac53db957" translate="yes" xml:space="preserve">
          <source>This example illustrates using the value of the &lt;a href=&quot;isprimary&quot;&gt;&lt;code&gt;isPrimary&lt;/code&gt;&lt;/a&gt; to call the appropriate processing function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="889e312c3b091a75143f8ef20cf671f64574a4b2" translate="yes" xml:space="preserve">
          <source>This example illustrates using the value of the &lt;a href=&quot;pointertype&quot;&gt;&lt;code&gt;pointerType&lt;/code&gt;&lt;/a&gt; to call the appropriate pointer type processing function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62c180986cc31e85f4a230d470752aaa1d1acdb3" translate="yes" xml:space="preserve">
          <source>This example includes the use of the &lt;em&gt;ondrag&lt;/em&gt; attribute handler to set an element's &lt;em&gt;drag&lt;/em&gt; event handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02e58d71c9f44cce2e41898292fada9137a550f2" translate="yes" xml:space="preserve">
          <source>This example initializes a linear gradient using the &lt;code&gt;createLinearGradient()&lt;/code&gt; method. Three color stops between the gradient's start and end points are then created. Finally, the gradient is assigned to the canvas context, and is rendered to a filled rectangle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a08cc93eac91dc55990ec9e7947204489fd38d1" translate="yes" xml:space="preserve">
          <source>This example initializes a radial gradient using the &lt;code&gt;createRadialGradient()&lt;/code&gt; method. Three color stops between the gradient's two circles are then created. Finally, the gradient is assigned to the canvas context, and is rendered to a filled rectangle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="394f2fb9623c18a1e22a70536f8cabbdee3ce62d" translate="yes" xml:space="preserve">
          <source>This example inserts a link from the dragged data. As you might be able to guess from the name, the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DragDrop/Recommended_Drag_Types#link&quot;&gt;text/uri-list&lt;/a&gt; type actually may contain a list of URLs, each on a separate line. In this code, we use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/split&quot;&gt;split&lt;/a&gt; to split the string into lines, then iterate over the list of lines, inserting each as a link into the document. Note also that we skip links starting with a number sign (#) as these are comments.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
