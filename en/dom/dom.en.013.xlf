<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="en" datatype="htmlbody" original="dom">
    <body>
      <group id="dom">
        <trans-unit id="771b0242b969842ec8c276735b985720ab9f4866" translate="yes" xml:space="preserve">
          <source>An unsigned 16-bit integer value which specifies the size of the prefetched ICE candidate pool. The default value is 0 (meaning no candidate prefetching will occur). You may find in some cases that connections can be established more quickly by allowing the ICE agent to start fetching ICE candidates before you start trying to connect, so that they're already available for inspection when &lt;a href=&quot;rtcpeerconnection/setlocaldescription&quot;&gt;&lt;code&gt;RTCPeerConnection.setLocalDescription()&lt;/code&gt;&lt;/a&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1635684ef98d55e859f3938bbef58c9d513ec0f" translate="yes" xml:space="preserve">
          <source>An unsigned 16-bit integer value which specifies the size of the prefetched ICE candidate pool. The default value is 0 (meaning no candidate prefetching will occur). You may find in some cases that connections can be established more quickly by allowing the ICE agent to start fetching ICE candidates before you start trying to connect, so that they're already available for inspection when &lt;a href=&quot;setlocaldescription&quot;&gt;&lt;code&gt;RTCPeerConnection.setLocalDescription()&lt;/code&gt;&lt;/a&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c3344594020ac535dfead0e75a99790491390fd" translate="yes" xml:space="preserve">
          <source>An unsigned 16-bit value containing the candidate's related port number, if any. For both peer and server reflexive candidates, the related address and port describe the base for that candidate. For relay candidates, the related address and port provide the mapped address selected by the TURN server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c5522b6ea1f737b9b5ca6d8a4316c828f3221b4" translate="yes" xml:space="preserve">
          <source>An unsigned 64-bit integer value which indicates the sum of the quantization parameter (QP) value for every frame sent or received so far on the track described by the &lt;a href=&quot;../rtcrtpstreamstats&quot;&gt;&lt;code&gt;RTCRtpStreamStats&lt;/code&gt;&lt;/a&gt; object. Since the value of QP is typically larger to indicate higher compression factors, the larger this sum is, the more heavily compressed the stream generally has been.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2988d5ae3c49308f2374663d1cc647accfdd14d8" translate="yes" xml:space="preserve">
          <source>An unsigned integer, equal to the number of values that &lt;a href=&quot;getbytefrequencydata&quot;&gt;&lt;code&gt;AnalyserNode.getByteFrequencyData()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;getfloatfrequencydata&quot;&gt;&lt;code&gt;AnalyserNode.getFloatFrequencyData()&lt;/code&gt;&lt;/a&gt; copy into the provided &lt;code&gt;TypedArray&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6e7594e7e606ab4df2614355fac2d9c155172f8" translate="yes" xml:space="preserve">
          <source>An unsigned integer, representing the window size of the FFT, given in number of samples. A higher value will result in more details in the frequency domain but fewer details in the time domain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e818f2885ad9c67a8f8c891816a7e2a30346c650" translate="yes" xml:space="preserve">
          <source>An unsigned long integer indicating the maximum number of bits per second to allow for this encoding. Other parameters may further constrain the bit rate, such as the value of &lt;code&gt;maxFramerate&lt;/code&gt; or transport or physical network limitations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c60d428a031069bfea77915e7d5e36bca6299260" translate="yes" xml:space="preserve">
          <source>An unsigned long integer indicating the number of SLI packets the sender received from the receiver due to lost runs of macroblocks. A high value of &lt;code&gt;sliCount&lt;/code&gt; may be an indication of an unreliable network.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40b2a73c6a690f71294d105f5f8a9ab8b8f4c518" translate="yes" xml:space="preserve">
          <source>An unsigned long integer indicating the number of columns this cell must span; this lets the cell occupy space across multiple columns of the table. It reflects the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td#attr-colspan&quot;&gt;colspan&lt;/a&gt;&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04791ea23dfa7c5335bcabed858b00841f65e50b" translate="yes" xml:space="preserve">
          <source>An unsigned long integer indicating the number of rows this cell must span; this lets a cell occupy space across multiple rows of the table. It reflects the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td#attr-rowspan&quot;&gt;rowspan&lt;/a&gt;&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="615698498c058455f5a063266c36eba5462bd4ad" translate="yes" xml:space="preserve">
          <source>An unsigned long integer value specifying the codec's clock rate in hertz (Hz). The clock rate is the rate at which the codec's RTP timestamp advances. Most codecs have specific values or ranges of values they permit; see the &lt;a href=&quot;https://www.iana.org/assignments/rtp-parameters/rtp-parameters.xhtml#rtp-parameters-2&quot;&gt;IANA payload format media type registry&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42a1592de6ea9749e12b69e72e59bfca67e818a8" translate="yes" xml:space="preserve">
          <source>An unsigned long integer value which, for &lt;code&gt;RTCRtpSender&lt;/code&gt;, indicates the preferred duration of a media packet in milliseconds. This is typically only relevant for audio encodings. The user agent will try to match this as well as it can.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f46e1371591a2f7f6fdbda9a913551440b5080b" translate="yes" xml:space="preserve">
          <source>An unsigned long integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb2e92aaf1409251c8f95a0397505be3997f37e2" translate="yes" xml:space="preserve">
          <source>An unsigned long number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcaf1c24613b44e7dc0ca307f1c9300365f24884" translate="yes" xml:space="preserve">
          <source>An unsigned long representing the height of the image. This value is optional if an array is given: the height will be inferred from the array's size and the given width.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96943a5470c6946faf49ed59449135593c52ed78" translate="yes" xml:space="preserve">
          <source>An unsigned long representing the width of the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="325c626af061a9dc45fdfc143ea16ea52b7be4a2" translate="yes" xml:space="preserve">
          <source>An unsigned long value indicating the maximum number of bytes that can be appended in this operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7818c64aab9646f6b8f2ab0a34f23f438d1a913b" translate="yes" xml:space="preserve">
          <source>An unsigned short integer indicating the number of channels the codec should support. For example, for audio codecs, a value of 1 specifies monaural sound while 2 indicates stereo.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aba4054e8a96e5a6b43fac2ead9d3e323169fbd8" translate="yes" xml:space="preserve">
          <source>An unsigned short integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c7eb7af9a792c2a20c76145e1cbdeea7a922750" translate="yes" xml:space="preserve">
          <source>An unsigned short representing the value of the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/zoomAndPan&quot;&gt;zoomAndPan&lt;/a&gt;&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="003e5afbaa3999a82ffadc6d194849ff9ff43a99" translate="yes" xml:space="preserve">
          <source>An unsigned, 32-bit integer value which uniquely identifies the source of RTP packets described by this &lt;code&gt;RTCRtpContributingSource&lt;/code&gt; (in which case the value is a CSRC identifier) or &lt;code&gt;RTCRtpSynchronizationSource&lt;/code&gt; (the value is an SSRC identifier).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95d9449b650be143ebf2f9dbc284ba3f792cba53" translate="yes" xml:space="preserve">
          <source>An up-to-date informal list of constants can be found on the &lt;a href=&quot;http://wiki.csswg.org/spec/cssom-constants&quot;&gt;CSSWG Wiki&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab763fd9d670af0b169849aa6f68fae64034a3b3" translate="yes" xml:space="preserve">
          <source>An&lt;code&gt;SVGRect&lt;/code&gt; object can be designated as read only, which means that attempts to modify the object will result in an exception being thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96089100b787b86a8aca609a15c0dda4061bb0a7" translate="yes" xml:space="preserve">
          <source>AnalyserNode</source>
          <target state="translated">AnalyserNode</target>
        </trans-unit>
        <trans-unit id="3bafa9b145f7a87b4e876484d7b2a213ada84cf8" translate="yes" xml:space="preserve">
          <source>AnalyserNode.constructor</source>
          <target state="translated">AnalyserNode.constructor</target>
        </trans-unit>
        <trans-unit id="30bb94fdb6eccc71935e299f07db0f23ab73d853" translate="yes" xml:space="preserve">
          <source>AnalyserNode.fftSize</source>
          <target state="translated">AnalyserNode.fftSize</target>
        </trans-unit>
        <trans-unit id="8b47da17004b360ccdf11fcab52f14605a61f896" translate="yes" xml:space="preserve">
          <source>AnalyserNode.frequencyBinCount</source>
          <target state="translated">AnalyserNode.frequencyBinCount</target>
        </trans-unit>
        <trans-unit id="87f0a0c15b025448d016621f4c02ef7558b4d5d6" translate="yes" xml:space="preserve">
          <source>AnalyserNode.getByteFrequencyData</source>
          <target state="translated">AnalyserNode.getByteFrequencyData</target>
        </trans-unit>
        <trans-unit id="29ecb8348b39de029935fb91f2afe6856df41955" translate="yes" xml:space="preserve">
          <source>AnalyserNode.getByteTimeDomainData</source>
          <target state="translated">AnalyserNode.getByteTimeDomainData</target>
        </trans-unit>
        <trans-unit id="aae1a8999081f7a291fb3b5c807fc687cd0765ae" translate="yes" xml:space="preserve">
          <source>AnalyserNode.getFloatFrequencyData</source>
          <target state="translated">AnalyserNode.getFloatFrequencyData</target>
        </trans-unit>
        <trans-unit id="13fad942a37f72a1650a144240ec32e35d33b43a" translate="yes" xml:space="preserve">
          <source>AnalyserNode.getFloatTimeDomainData</source>
          <target state="translated">AnalyserNode.getFloatTimeDomainData</target>
        </trans-unit>
        <trans-unit id="9d76ddd56461354dbc0b529862b4fbd300053838" translate="yes" xml:space="preserve">
          <source>AnalyserNode.maxDecibels</source>
          <target state="translated">AnalyserNode.maxDecibels</target>
        </trans-unit>
        <trans-unit id="13b46c61928fdf29d55c1668004ecd7b40b7c9ae" translate="yes" xml:space="preserve">
          <source>AnalyserNode.minDecibels</source>
          <target state="translated">AnalyserNode.minDecibels</target>
        </trans-unit>
        <trans-unit id="9d8f4ef3ebaa9c3b37b40533c2a5fe34828b54d5" translate="yes" xml:space="preserve">
          <source>AnalyserNode.smoothingTimeConstant</source>
          <target state="translated">AnalyserNode.smoothingTimeConstant</target>
        </trans-unit>
        <trans-unit id="dec1a1c3de78bb7bae86edd7816bdbe2304bee9a" translate="yes" xml:space="preserve">
          <source>Analyzing and manipulating the &lt;code&gt;responseXML&lt;/code&gt; property</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f8c77e7404ca30dcccf92c73c985f04a86420e7" translate="yes" xml:space="preserve">
          <source>Anchor</source>
          <target state="translated">Anchor</target>
        </trans-unit>
        <trans-unit id="b3f58341b49ed6b228d9cd15cda5c88e454504fd" translate="yes" xml:space="preserve">
          <source>And an example using async/await.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c2b566ba6199cec794efbdbfa0b77952a358b40" translate="yes" xml:space="preserve">
          <source>And boom: the animation starts playing (see the finished &lt;a href=&quot;http://codepen.io/rachelnabors/pen/rxpmJL&quot;&gt;version on Codepen&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b669bdf25f44e986afe42e821b151587e15d84f6" translate="yes" xml:space="preserve">
          <source>And finally the uniform is set to that location.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7401b027467775b29d7b43f2bf8147fd49f7d78a" translate="yes" xml:space="preserve">
          <source>And finally, we set the &lt;code&gt;src&lt;/code&gt; attribute to start and call &lt;code&gt;play&lt;/code&gt; to start loading and playing the video.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7a5ce779ddeb9a139df11ea4c1d5ac63c6a4e3b" translate="yes" xml:space="preserve">
          <source>And here is how you would use it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db2aef60798f19bc23de828157845762456ca25f" translate="yes" xml:space="preserve">
          <source>And here is the change of the &lt;code&gt;src&lt;/code&gt; attribute:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2575756e6247b0f385a73c3a435dc97f05afbcc9" translate="yes" xml:space="preserve">
          <source>And here's some CSS to make things look nice:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94aeaa5421e7c8dba608d4a6b63f4c74f92ec0c3" translate="yes" xml:space="preserve">
          <source>And here's the JavaScript code that does the job. First, listen for &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/keypress&quot;&gt;keypress&lt;/a&gt;&lt;/code&gt; events:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65052f4568bee4c3c3a973a988f4fc91628df2e0" translate="yes" xml:space="preserve">
          <source>And here's the result</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56cfc8651344f1ea80613714a0d182bc8475717d" translate="yes" xml:space="preserve">
          <source>And that's it!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b773e787d27773f4cc10ce89b0fa75e664ac33a" translate="yes" xml:space="preserve">
          <source>And the &lt;code&gt;click&lt;/code&gt; event listener starts like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="866a6a20a472b5cf4140da1e189259a4360b0237" translate="yes" xml:space="preserve">
          <source>And the &lt;code&gt;onmessage&lt;/code&gt; method is now trivial:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53c03c0f4266de1901ba7e1ef034d5a66ffaf9b0" translate="yes" xml:space="preserve">
          <source>And the corresponding HTMLXXX When mochitests for this are created, point to those instead and update this example -nickolay</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df53811aeacce989c7f71e460457b1cdfbe159a8" translate="yes" xml:space="preserve">
          <source>And this code, &lt;code&gt;runComposite()&lt;/code&gt;, handles the bulk of the work, relying on a number of utility functions to do the hard parts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c86c41e2c709e782aaadbf81f0c4880b5aa52d4" translate="yes" xml:space="preserve">
          <source>And to test:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b58cfc978ae5430593be2ca9737e89d1a1d23678" translate="yes" xml:space="preserve">
          <source>And we can do the same thing when setting the cake and bottle durations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="422ee4b35c62b5e4caea480d1569f682cbbfdd20" translate="yes" xml:space="preserve">
          <source>And we get references to all of the elements we'll need to access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1928f95c598b9e69462fcb512625cf8e28923044" translate="yes" xml:space="preserve">
          <source>Android</source>
          <target state="translated">Android</target>
        </trans-unit>
        <trans-unit id="bced9cc08c3939a0e0d679456c7b2c96155e69fa" translate="yes" xml:space="preserve">
          <source>Android 2.3</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d9732b8de5927726ce8c7dc733a0edbceca05f4" translate="yes" xml:space="preserve">
          <source>Android 3.0 or latter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6dca0ef7fa0b06ac84a0a79046299abb91a209e" translate="yes" xml:space="preserve">
          <source>Android Webview</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5b93109d2910f83b46a8f8b84565a2b90f04e8f" translate="yes" xml:space="preserve">
          <source>Android webview</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bdcbefcb4d80a4029db2701f44107135c3994c4" translate="yes" xml:space="preserve">
          <source>Angle. Applies a hue rotation on the drawing. A value of &lt;code&gt;0deg&lt;/code&gt; leaves the input unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0bd5aac1fa0fbc8d520a5b687003b327ecf3e11" translate="yes" xml:space="preserve">
          <source>Angular &amp;mdash; The acceleration of rotation of the HMD around any one of the axes. This information can be accessed using &lt;a href=&quot;../vrpose/angularacceleration&quot;&gt;&lt;code&gt;VRPose.angularAcceleration&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9155d9dd063563789b60d7a9749ff04800b37da5" translate="yes" xml:space="preserve">
          <source>Angular &amp;mdash; The speed at which the HMD is rotating around any one of the axes. This information can be accessed using &lt;a href=&quot;../vrpose/angularvelocity&quot;&gt;&lt;code&gt;VRPose.angularVelocity&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1d43e77cb60372572885251957374996138a515" translate="yes" xml:space="preserve">
          <source>AnimVal attribute or animVal property contains the same value as the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/new?slug=baseVal&amp;amp;parent=6389&quot;&gt;&lt;strong&gt;baseVal&lt;/strong&gt;&lt;/a&gt; property.If the given attribute or property is being animated, contains the current animated value of the attribute or property. If the given attribute or property is not currently being animated, then it contains the same value as baseVal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f22051e5460043efcae710f529a6c4fb21e0d70c" translate="yes" xml:space="preserve">
          <source>Animatable</source>
          <target state="translated">Animatable</target>
        </trans-unit>
        <trans-unit id="b67d5605eaff64ae8aff4de5a620c3f7ed3a0c86" translate="yes" xml:space="preserve">
          <source>AnimateElement</source>
          <target state="translated">AnimateElement</target>
        </trans-unit>
        <trans-unit id="6823fc6d88382080ba82fa4f5ab43cd3aae2a425" translate="yes" xml:space="preserve">
          <source>AnimateMotionElement</source>
          <target state="translated">AnimateMotionElement</target>
        </trans-unit>
        <trans-unit id="ef8329f66452f411bc96834595ea466c489bd27f" translate="yes" xml:space="preserve">
          <source>AnimateTransformElement</source>
          <target state="translated">AnimateTransformElement</target>
        </trans-unit>
        <trans-unit id="733b4da144abb689ac4be73788eb97a8bec453fd" translate="yes" xml:space="preserve">
          <source>AnimatedAngle</source>
          <target state="translated">AnimatedAngle</target>
        </trans-unit>
        <trans-unit id="a233f541c61a9ef2354c1c71c11f5e56ab37e2f2" translate="yes" xml:space="preserve">
          <source>AnimatedBoolean</source>
          <target state="translated">AnimatedBoolean</target>
        </trans-unit>
        <trans-unit id="0a673e308bae043fd533f2bad857417e6f3bbb64" translate="yes" xml:space="preserve">
          <source>AnimatedEnumeration</source>
          <target state="translated">AnimatedEnumeration</target>
        </trans-unit>
        <trans-unit id="7e88d36ea95fbeac03835c668d56abc42a7ae919" translate="yes" xml:space="preserve">
          <source>AnimatedInteger</source>
          <target state="translated">AnimatedInteger</target>
        </trans-unit>
        <trans-unit id="411f8fb445847a523678e7befb7c1226ab04c291" translate="yes" xml:space="preserve">
          <source>AnimatedLength</source>
          <target state="translated">AnimatedLength</target>
        </trans-unit>
        <trans-unit id="99232ecb58fc8dfb978af7e26b96a6bbb11e8899" translate="yes" xml:space="preserve">
          <source>AnimatedLengthList</source>
          <target state="translated">AnimatedLengthList</target>
        </trans-unit>
        <trans-unit id="019ea677bc8e50f3bb51ced5215965f9c6769c4f" translate="yes" xml:space="preserve">
          <source>AnimatedNumber</source>
          <target state="translated">AnimatedNumber</target>
        </trans-unit>
        <trans-unit id="1b9dcfe0f489174d82231aa387d774639e113701" translate="yes" xml:space="preserve">
          <source>AnimatedNumberList</source>
          <target state="translated">AnimatedNumberList</target>
        </trans-unit>
        <trans-unit id="7663113689535634e23e0cb01e7da4d026b47f4e" translate="yes" xml:space="preserve">
          <source>AnimatedPoints</source>
          <target state="translated">AnimatedPoints</target>
        </trans-unit>
        <trans-unit id="b88dc733deaf6de8b91f5493ca858e3575e96e4b" translate="yes" xml:space="preserve">
          <source>AnimatedPreserveAspectRatio</source>
          <target state="translated">AnimatedPreserveAspectRatio</target>
        </trans-unit>
        <trans-unit id="94bfc20bb74789dbc75745efa635008257517e24" translate="yes" xml:space="preserve">
          <source>AnimatedRect</source>
          <target state="translated">AnimatedRect</target>
        </trans-unit>
        <trans-unit id="6bdae90c6f9a90cf9c892b55ec8e14771daa3e70" translate="yes" xml:space="preserve">
          <source>AnimatedString</source>
          <target state="translated">AnimatedString</target>
        </trans-unit>
        <trans-unit id="17d9145e863b5f244490cc4b328cc2de76ca20f8" translate="yes" xml:space="preserve">
          <source>AnimatedString.animVal</source>
          <target state="translated">AnimatedString.animVal</target>
        </trans-unit>
        <trans-unit id="98178f4fe1381178baba6b1d9f0c5e5b93adb32c" translate="yes" xml:space="preserve">
          <source>AnimatedString.baseVal</source>
          <target state="translated">AnimatedString.baseVal</target>
        </trans-unit>
        <trans-unit id="7caf44271e34224545c6b424a87b60083f8c1d40" translate="yes" xml:space="preserve">
          <source>AnimatedTransformList</source>
          <target state="translated">AnimatedTransformList</target>
        </trans-unit>
        <trans-unit id="701ab07d81f8faaf50c5b9ffd1ee62045090b67e" translate="yes" xml:space="preserve">
          <source>Animating objects with WebGL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5e61532026150b1ea47125df655b6a91883767a" translate="yes" xml:space="preserve">
          <source>Animating textures in WebGL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62afd21e88769f01ba1c9330803baad57564d6e9" translate="yes" xml:space="preserve">
          <source>Animation</source>
          <target state="translated">Animation</target>
        </trans-unit>
        <trans-unit id="57d52edf1f506ff75df4483a83065b0df03dba0b" translate="yes" xml:space="preserve">
          <source>Animation Effect</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fa4287a4e6531e2a12f40330a4fefd4e2b62ba4" translate="yes" xml:space="preserve">
          <source>Animation-related CSS properties and at-rules: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/animation&quot;&gt;&lt;code&gt;animation&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/animation-delay&quot;&gt;&lt;code&gt;animation-delay&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/animation-direction&quot;&gt;&lt;code&gt;animation-direction&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/animation-duration&quot;&gt;&lt;code&gt;animation-duration&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/animation-fill-mode&quot;&gt;&lt;code&gt;animation-fill-mode&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/animation-iteration-count&quot;&gt;&lt;code&gt;animation-iteration-count&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/animation-name&quot;&gt;&lt;code&gt;animation-name&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/animation-play-state&quot;&gt;&lt;code&gt;animation-play-state&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function&quot;&gt;&lt;code&gt;animation-timing-function&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes&quot;&gt;&lt;code&gt;@keyframes&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6427c8884e6dd123d4e975fd61eeb7d8da8f314a" translate="yes" xml:space="preserve">
          <source>Animation-related CSS properties and at-rules: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/animation&quot;&gt;&lt;code&gt;animation&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/animation-delay&quot;&gt;&lt;code&gt;animation-delay&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/animation-direction&quot;&gt;&lt;code&gt;animation-direction&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/animation-duration&quot;&gt;&lt;code&gt;animation-duration&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/animation-fill-mode&quot;&gt;&lt;code&gt;animation-fill-mode&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/animation-iteration-count&quot;&gt;&lt;code&gt;animation-iteration-count&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/animation-name&quot;&gt;&lt;code&gt;animation-name&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/animation-play-state&quot;&gt;&lt;code&gt;animation-play-state&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function&quot;&gt;&lt;code&gt;animation-timing-function&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes&quot;&gt;&lt;code&gt;@keyframes&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="184d261b65e2ff1fa04215bd83762e6ece36f788" translate="yes" xml:space="preserve">
          <source>Animation.cancel</source>
          <target state="translated">Animation.cancel</target>
        </trans-unit>
        <trans-unit id="24f7750ccafb8bad96d2d0761e77fdc433c2a5c8" translate="yes" xml:space="preserve">
          <source>Animation.constructor</source>
          <target state="translated">Animation.constructor</target>
        </trans-unit>
        <trans-unit id="6cb0b1737491b286f4a6d961636ed55fb3e6a143" translate="yes" xml:space="preserve">
          <source>Animation.currentTime</source>
          <target state="translated">Animation.currentTime</target>
        </trans-unit>
        <trans-unit id="7bd6c3c1a81a8775ded5bc77ff104f9ccd6f4241" translate="yes" xml:space="preserve">
          <source>Animation.effect</source>
          <target state="translated">Animation.effect</target>
        </trans-unit>
        <trans-unit id="a227f10ae03618cc5d305cc2647d70f6c2a6f54d" translate="yes" xml:space="preserve">
          <source>Animation.finish</source>
          <target state="translated">Animation.finish</target>
        </trans-unit>
        <trans-unit id="5d36654a9cfcbbcab133036fd67ee94a5b9c532d" translate="yes" xml:space="preserve">
          <source>Animation.finished</source>
          <target state="translated">Animation.finished</target>
        </trans-unit>
        <trans-unit id="59036e6dfca67e369f45d3b6345fce60b9033686" translate="yes" xml:space="preserve">
          <source>Animation.id</source>
          <target state="translated">Animation.id</target>
        </trans-unit>
        <trans-unit id="a0a1078a20db830a9d554de846e692a8f83ac060" translate="yes" xml:space="preserve">
          <source>Animation.oncancel</source>
          <target state="translated">Animation.oncancel</target>
        </trans-unit>
        <trans-unit id="9f676d0a10ebfc1e8f1aa197a934e3e3723fef89" translate="yes" xml:space="preserve">
          <source>Animation.onfinish</source>
          <target state="translated">Animation.onfinish</target>
        </trans-unit>
        <trans-unit id="a0db5182ee3bdc4691590d6b6f7c100632fc0e5f" translate="yes" xml:space="preserve">
          <source>Animation.pause</source>
          <target state="translated">Animation.pause</target>
        </trans-unit>
        <trans-unit id="324073c753cfa4c49318835d578adce0186b99ce" translate="yes" xml:space="preserve">
          <source>Animation.pending</source>
          <target state="translated">Animation.pending</target>
        </trans-unit>
        <trans-unit id="e2fe522b04b6ce5b2d1ae664ced51f2e499b0f21" translate="yes" xml:space="preserve">
          <source>Animation.play</source>
          <target state="translated">Animation.play</target>
        </trans-unit>
        <trans-unit id="2530587b63bd1583c7855ef23779ad136d5aa7a0" translate="yes" xml:space="preserve">
          <source>Animation.playState</source>
          <target state="translated">Animation.playState</target>
        </trans-unit>
        <trans-unit id="0e7041fad7501163550c1980223b71a76e7e38bb" translate="yes" xml:space="preserve">
          <source>Animation.playbackRate</source>
          <target state="translated">Animation.playbackRate</target>
        </trans-unit>
        <trans-unit id="c0a4a429ce668972681d5b283d6ff987553b5f3f" translate="yes" xml:space="preserve">
          <source>Animation.ready</source>
          <target state="translated">Animation.ready</target>
        </trans-unit>
        <trans-unit id="3bef80b1ec0ce164be382f973d782443348e4e54" translate="yes" xml:space="preserve">
          <source>Animation.reverse</source>
          <target state="translated">Animation.reverse</target>
        </trans-unit>
        <trans-unit id="df7b589ebf81e4793be23bcaa879b62648858e02" translate="yes" xml:space="preserve">
          <source>Animation.startTime</source>
          <target state="translated">Animation.startTime</target>
        </trans-unit>
        <trans-unit id="1f52bea8d7f72155751d618cf02ea1d951c7e999" translate="yes" xml:space="preserve">
          <source>Animation.timeline</source>
          <target state="translated">Animation.timeline</target>
        </trans-unit>
        <trans-unit id="ad609317e35c54addeeadb6dde8e1016b68404e3" translate="yes" xml:space="preserve">
          <source>Animation.updatePlaybackRate</source>
          <target state="translated">Animation.updatePlaybackRate</target>
        </trans-unit>
        <trans-unit id="554fe1d23dfa99fb68d29febb2f18bfc39c03d08" translate="yes" xml:space="preserve">
          <source>AnimationEffect</source>
          <target state="translated">AnimationEffect</target>
        </trans-unit>
        <trans-unit id="219402df9a203fc48c4d5a9cc589e4e50fe96d17" translate="yes" xml:space="preserve">
          <source>AnimationEffect.getComputedTiming</source>
          <target state="translated">AnimationEffect.getComputedTiming</target>
        </trans-unit>
        <trans-unit id="f3b53b1f570a9ec7c3da122c98994432eb739907" translate="yes" xml:space="preserve">
          <source>AnimationEffect.getTiming</source>
          <target state="translated">AnimationEffect.getTiming</target>
        </trans-unit>
        <trans-unit id="7ea90f3492aab2097b5424a53671fddb40f9280f" translate="yes" xml:space="preserve">
          <source>AnimationEffect.updateTiming</source>
          <target state="translated">AnimationEffect.updateTiming</target>
        </trans-unit>
        <trans-unit id="5d0a15d1d126317ef1b77a20762d9fce9f7740fc" translate="yes" xml:space="preserve">
          <source>AnimationElement</source>
          <target state="translated">AnimationElement</target>
        </trans-unit>
        <trans-unit id="82ee4f5c45880377e08b1c0b68923f1744b3b97e" translate="yes" xml:space="preserve">
          <source>AnimationElement.onbegin</source>
          <target state="translated">AnimationElement.onbegin</target>
        </trans-unit>
        <trans-unit id="9d172fe656351e7af0b1e3bf6aa1398fa7029472" translate="yes" xml:space="preserve">
          <source>AnimationElement.onend</source>
          <target state="translated">AnimationElement.onend</target>
        </trans-unit>
        <trans-unit id="e332a15b4948ed44b9fb0ca2c414822c96ba9031" translate="yes" xml:space="preserve">
          <source>AnimationElement.onrepeat</source>
          <target state="translated">AnimationElement.onrepeat</target>
        </trans-unit>
        <trans-unit id="79afea8575db490397aae0b8d89d20e70afb5825" translate="yes" xml:space="preserve">
          <source>AnimationElement.targetElement</source>
          <target state="translated">AnimationElement.targetElement</target>
        </trans-unit>
        <trans-unit id="b68b862342361922d8aeebe8914e3813b3a82ea4" translate="yes" xml:space="preserve">
          <source>AnimationEvent</source>
          <target state="translated">AnimationEvent</target>
        </trans-unit>
        <trans-unit id="aba93e2038fab18cfc44ddaf964fa94049c3368f" translate="yes" xml:space="preserve">
          <source>AnimationEvent.animationName</source>
          <target state="translated">AnimationEvent.animationName</target>
        </trans-unit>
        <trans-unit id="d4ad76d302f804ed1b03822936808048027346a2" translate="yes" xml:space="preserve">
          <source>AnimationEvent.constructor</source>
          <target state="translated">AnimationEvent.constructor</target>
        </trans-unit>
        <trans-unit id="b3a3a0c93995e5b19563768361924a4bd7aec146" translate="yes" xml:space="preserve">
          <source>AnimationEvent.elapsedTime</source>
          <target state="translated">AnimationEvent.elapsedTime</target>
        </trans-unit>
        <trans-unit id="235e0fc014e387848345ea11ea17c9b270f4f81b" translate="yes" xml:space="preserve">
          <source>AnimationEvent.initAnimationEvent</source>
          <target state="translated">AnimationEvent.initAnimationEvent</target>
        </trans-unit>
        <trans-unit id="ecc388e51fa8c7f2a70f5d145f45ec6447ddd3a7" translate="yes" xml:space="preserve">
          <source>AnimationEvent.pseudoElement</source>
          <target state="translated">AnimationEvent.pseudoElement</target>
        </trans-unit>
        <trans-unit id="b41f8a5f6ec6f54f02e8cc110175decc617a73ee" translate="yes" xml:space="preserve">
          <source>AnimationPlaybackEvent</source>
          <target state="translated">AnimationPlaybackEvent</target>
        </trans-unit>
        <trans-unit id="b14794ab4e00b42df159f879e9b1dc79a796d321" translate="yes" xml:space="preserve">
          <source>AnimationPlaybackEvent.constructor</source>
          <target state="translated">AnimationPlaybackEvent.constructor</target>
        </trans-unit>
        <trans-unit id="7e7389b80a67e10bb38d5d9c0b984b7bb15c50f9" translate="yes" xml:space="preserve">
          <source>AnimationPlaybackEvent.currentTime</source>
          <target state="translated">AnimationPlaybackEvent.currentTime</target>
        </trans-unit>
        <trans-unit id="bf94a73bf54e3c92f5e61d4ae1cef4ab1712f2b9" translate="yes" xml:space="preserve">
          <source>AnimationPlaybackEvent.timelineTime</source>
          <target state="translated">AnimationPlaybackEvent.timelineTime</target>
        </trans-unit>
        <trans-unit id="40f4e34a1261ddd19f1199cb0ae75e8657fff15f" translate="yes" xml:space="preserve">
          <source>AnimationTimeline</source>
          <target state="translated">AnimationTimeline</target>
        </trans-unit>
        <trans-unit id="28aae5f2c11971628edc55b4dee541270deb5589" translate="yes" xml:space="preserve">
          <source>AnimationTimeline.currentTime</source>
          <target state="translated">AnimationTimeline.currentTime</target>
        </trans-unit>
        <trans-unit id="f47929e87c7f211965b97356cd618a6ee6c81d98" translate="yes" xml:space="preserve">
          <source>Animations have a &lt;strong&gt;playback rate&lt;/strong&gt; that provides a scaling factor from the rate of change of the animation's &lt;a href=&quot;../documenttimeline&quot;&gt;&lt;code&gt;timeline&lt;/code&gt;&lt;/a&gt; time values to the animation&amp;rsquo;s current time. The playback rate is initially &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6da80c5d531bc5111a9eb86ef019fdfe8ce22280" translate="yes" xml:space="preserve">
          <source>Another &lt;a href=&quot;../mediastream&quot;&gt;&lt;code&gt;MediaStream&lt;/code&gt;&lt;/a&gt; containing tracks to add.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e532fec4cb058ecb106a609c93b958614d2d5aa" translate="yes" xml:space="preserve">
          <source>Another &lt;code&gt;#text&lt;/code&gt; node is inserted between the closing &lt;code&gt;&amp;lt;/span&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;/p&amp;gt;&lt;/code&gt;tags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e41d42ab249db88d20395de827efba0de862d459" translate="yes" xml:space="preserve">
          <source>Another application developed specifically to demonstrate the Web Audio API is the &lt;a href=&quot;http://mdn.github.io/violent-theremin/&quot;&gt;Violent Theremin&lt;/a&gt;, a simple web application that allows you to change pitch and volume by moving your mouse pointer. It also provides a psychedelic lightshow (&lt;a href=&quot;https://github.com/mdn/violent-theremin&quot;&gt;see Violent Theremin source code&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8e7e45af0e6a7d5721ca8ab7ee7e612f6116afc" translate="yes" xml:space="preserve">
          <source>Another decelerated rate of change, going from fast to slow. Equivalent to &lt;code&gt;cubic-bezier(0, 0, 0.58, 1)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5159d078b2ba139c05491b5c58e0e0629a7bcba1" translate="yes" xml:space="preserve">
          <source>Another example. This function creates a new H1 element, adds text to that element, and then adds the &lt;code&gt;H1&lt;/code&gt; to the tree for this document:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d9cec0293c81ad1c8eb6e231bea3c9b328dca21" translate="yes" xml:space="preserve">
          <source>Another kind of queries are disjoint timer queries, which allow you to measure performance and profiling of your GPU. Disjoint timer queries are available with the &lt;a href=&quot;ext_disjoint_timer_query&quot;&gt;&lt;code&gt;EXT_disjoint_timer_query&lt;/code&gt;&lt;/a&gt; extension only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fc286cd6c782ff6cf37caff0c7498dd91e7a9c2" translate="yes" xml:space="preserve">
          <source>Another mind-bender is that matrix multiplication in WebGL and CSS3 needs to happen in the reverse order that the operations intuitively happen. For instance, to scale something down by 80%, move it down 200 pixels, and then rotate about the origin 90 degrees would look something like the following in pseudo-code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97dfed895de0cf23189b103d86273dae9ba568d0" translate="yes" xml:space="preserve">
          <source>Another nice little sound visualization to create is one of those Winamp-style frequency bar graphs. We have one available in Voice-change-O-matic; let's look at how it's done.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa8c8614d30d274a4c56fd8c053f8d349669204b" translate="yes" xml:space="preserve">
          <source>Another obvious improvement would be to add a &quot;ringing&quot; feature, so that instead of just asking the user for permission to use the camera and microphone, a &quot;User X is calling. Would you like to answer?&quot; prompt appears first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c34755acc981792a4ca3c10adef37cd69b08c4b" translate="yes" xml:space="preserve">
          <source>Another option is to create new &lt;a href=&quot;../../htmlimageelement&quot;&gt;&lt;code&gt;HTMLImageElement&lt;/code&gt;&lt;/a&gt; objects in our script. To do this, you can use the convenient &lt;code&gt;Image()&lt;/code&gt; constructor:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="100179e5619e88deac32f2ba25815b5053900848" translate="yes" xml:space="preserve">
          <source>Another option would be to do this using &lt;a href=&quot;../eventtarget/addeventlistener&quot;&gt;&lt;code&gt;EventTarget.addEventListener&lt;/code&gt;&lt;/a&gt;, however, when this method is used, you need to explicitly call &lt;code&gt;start()&lt;/code&gt; to begin the flow of messages to this document:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0db0d127987c503b7c41846bd5152054e127dc25" translate="yes" xml:space="preserve">
          <source>Another possibility is to use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind&quot;&gt;function's bind&lt;/a&gt;. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28166a2ec74b3e71f6c66db32bc09e7e97dfd774" translate="yes" xml:space="preserve">
          <source>Another possibility is to use an anonymous function to call your callback, although this solution is a bit more expensive. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9184ca17c50762602098afa8b9ca2cc44358a377" translate="yes" xml:space="preserve">
          <source>Another possibility is to use an anonymous function to call your callback, but this solution is a bit more expensive. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93e9332ad2b73dadd8c63efacb768afef379bd56" translate="yes" xml:space="preserve">
          <source>Another possible way to include images is via the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/data_URIs&quot;&gt;data: url&lt;/a&gt;. Data URLs allow you to completely define an image as a Base64 encoded string of characters directly in your code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3a99b772e4fec68f92d76a0a54a9a9dfcac43d5" translate="yes" xml:space="preserve">
          <source>Another possible way to solve the &quot;&lt;code&gt;this&lt;/code&gt;&quot; problem is to replace the host &lt;code&gt;setTimeout()&lt;/code&gt; and &lt;code&gt;setInterval()&lt;/code&gt; global functions with ones that allow passing a &lt;code&gt;this&lt;/code&gt; object and set it in the callback using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call&quot;&gt;&lt;code&gt;Function.prototype.call&lt;/code&gt;&lt;/a&gt;, e.g.:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f98c8783bbc2a99b03219fe448af6cecb46bcdc8" translate="yes" xml:space="preserve">
          <source>Another powerful feature of the new canvas &lt;code&gt;Path2D&lt;/code&gt; API is using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths&quot;&gt;SVG path data&lt;/a&gt; to initialize paths on your canvas. This might allow you to pass around path data and re-use them in both, SVG and canvas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29ddb7a09f3347524890013b5af969e817df8a11" translate="yes" xml:space="preserve">
          <source>Another reason, is that without this property you wouldn't be able to write, for example, &quot;&lt;a href=&quot;open&quot;&gt;&lt;code&gt;window.open('http://google.com/')&lt;/code&gt;&lt;/a&gt;&quot;. You'd have to use &quot;open('http://google.com/')&quot; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4429418b1322899156d020874acd3ebf8d74fde8" translate="yes" xml:space="preserve">
          <source>Another solution is using a special function called &lt;code&gt;handleEvent()&lt;/code&gt; to catch any events:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c33543bcb844cda6bf22e7825fbc67b2addc6925" translate="yes" xml:space="preserve">
          <source>Another thing that&amp;rsquo;s tough to do with CSS Animations alone is creating dependencies on values provided by other animations. For instance, in the Growing and Shrinking Alice game example, you might have noticed something odd about the cake&amp;rsquo;s duration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10d450b4784c7493e09f91e4755b22e8354305e8" translate="yes" xml:space="preserve">
          <source>Another thing you might want to do is let the user upload the selected file or files (such as the images selected using the previous example) to a server. This can be done asynchronously very easily.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cacf4ef8677e95e5ce5efd09a43c28c33e14a53b" translate="yes" xml:space="preserve">
          <source>Another useful difference in Chrome exists when sending DOM elements to the console.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed94b367f04c7c90f1fc265a74202a340ce16c2b" translate="yes" xml:space="preserve">
          <source>Another way of handling the reference to &lt;em&gt;this &lt;/em&gt;is to pass to the &lt;code&gt;EventListener&lt;/code&gt; a function that calls the method of the object which contains the fields that need to be accessed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c3701ee3c58c7ca93505b772217d406c9d58822" translate="yes" xml:space="preserve">
          <source>Another way to use the &lt;code&gt;OffscreenCanvas&lt;/code&gt; API, is to call &lt;a href=&quot;htmlcanvaselement/transfercontroltooffscreen&quot;&gt;&lt;code&gt;transferControlToOffscreen()&lt;/code&gt;&lt;/a&gt; on a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas&quot;&gt;&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;&lt;/a&gt; element, either on a &lt;a href=&quot;web_workers_api&quot;&gt;worker&lt;/a&gt; or the main thread, which will return an &lt;code&gt;OffscreenCanvas&lt;/code&gt; object from an &lt;a href=&quot;htmlcanvaselement&quot;&gt;&lt;code&gt;HTMLCanvasElement&lt;/code&gt;&lt;/a&gt; object from the main thread. Calling &lt;a href=&quot;offscreencanvas/getcontext&quot;&gt;&lt;code&gt;getContext()&lt;/code&gt;&lt;/a&gt; will then obtain a &lt;code&gt;RenderingContext&lt;/code&gt; from that &lt;code&gt;OffscreenCanvas&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a22281a5653e18fb98e0d603fa673c8640343c0" translate="yes" xml:space="preserve">
          <source>Another, more complex, solution forthe &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&quot;&gt;&lt;code&gt;this&lt;/code&gt;&lt;/a&gt; problemis &lt;a href=&quot;#A_little_framework&quot;&gt;the following framework&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="652eaa4ed33eb4018a2f7efacf826c0e7f32254a" translate="yes" xml:space="preserve">
          <source>Another, more heavy weight, way of communicating between browser contexts: &lt;a href=&quot;../serviceworker&quot;&gt;&lt;code&gt;ServiceWorker&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3627bab00f90c677a3f1267c4ac16ed7cc6bf07" translate="yes" xml:space="preserve">
          <source>Another, more heavyweight, way of communicating between browser contexts: &lt;a href=&quot;serviceworker&quot;&gt;&lt;code&gt;ServiceWorker&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6997f31c26c044ad8c5568f776b35ac077a534ae" translate="yes" xml:space="preserve">
          <source>Any &lt;em&gt;&lt;a href=&quot;#term_pointer&quot;&gt;pointer&lt;/a&gt;&lt;/em&gt; input device that can produce events. A pointer is considered active if it can still produce further events. For example, a pen that is a down state is considered active because it can produce additional events when the pen is lifted or moved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0ff454880555e0aa1b3a8e2746435e1c9520b24" translate="yes" xml:space="preserve">
          <source>Any VR devices attached to your computer will be returned by the &lt;a href=&quot;navigator/getvrdisplays&quot;&gt;&lt;code&gt;Navigator.getVRDisplays()&lt;/code&gt;&lt;/a&gt; method; each one will be represented by a &lt;a href=&quot;vrdisplay&quot;&gt;&lt;code&gt;VRDisplay&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4162b0849ddea731a4b6860c8eabb6ad75f23bd5" translate="yes" xml:space="preserve">
          <source>Any add-on hosted on &lt;a href=&quot;https://addons.mozilla.org/&quot;&gt;addons.mozilla.org&lt;/a&gt; which makes use of geolocation data must explicitly request permission before doing so. The following function will request permission in a manner similar to the automatic prompt displayed for web pages. The user's response will be saved in the preference specified by the &lt;code&gt;pref&lt;/code&gt; parameter, if applicable. The function provided in the &lt;code&gt;callback&lt;/code&gt; parameter will be called with a boolean value indicating the user's response. If &lt;code&gt;true&lt;/code&gt;, the add-on may access geolocation data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9e27fa016865aa926b53410acaea1fe16be12b0" translate="yes" xml:space="preserve">
          <source>Any autonomous custom element with a &lt;a href=&quot;https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name&quot;&gt;valid name&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4445505b46d53a573966d55f2052885233e6928" translate="yes" xml:space="preserve">
          <source>Any boolean expression. If the assertion is false, the message is written to the console.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61376f3e7dbdc6f9cb69bb9c4f892afba5aef504" translate="yes" xml:space="preserve">
          <source>Any constraint set which only permits values outside the range 0.0 to 1.0 cannot be satisfied and will result in failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2380f64dc27b42a92f65c9df2a613732d28d4480" translate="yes" xml:space="preserve">
          <source>Any data passed when initializing the event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="478edc0c32c477f666a1069418c24af4f5c07408" translate="yes" xml:space="preserve">
          <source>Any data type that can be used as a key path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01a8688e4b307cb2e65645837ffc073f1834ac69" translate="yes" xml:space="preserve">
          <source>Any data type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f1abe35fcb9882a657c396893375fae6b3f27ad" translate="yes" xml:space="preserve">
          <source>Any errors are caught and passed to &lt;code&gt;handleGetUserMediaError()&lt;/code&gt;, described in &lt;a href=&quot;#Handling_getUserMedia()_errors&quot;&gt;Handling getUserMedia() errors&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c318cbdda47c7bfab4b24eb03c6168ff91319b76" translate="yes" xml:space="preserve">
          <source>Any float values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a80c8f84a02b343a264f3db4cb23a9a787d4d511" translate="yes" xml:space="preserve">
          <source>Any int values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a9584cca1ff6a51febb37020d0ff3c6a4b8aa60" translate="yes" xml:space="preserve">
          <source>Any kind of object can be sent, not just a &lt;a href=&quot;domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt;. The API doesn't associate any semantic to the messages, so it is up to the participant to the channel to know what kind of messages to expect and what to do with them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a4c75065a51a16b84fab53304f2003d9f4a6027" translate="yes" xml:space="preserve">
          <source>Any of the following conditions apply:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="853f590450a406aedc6204a0c8ded478b51264e5" translate="yes" xml:space="preserve">
          <source>Any of the following cookie attribute values can optionally follow the key-value pair, specifying the cookie to set/update, and preceded by a semi-colon separator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d2c048d64da8ecb6927bebd5e11f66e804d73c5" translate="yes" xml:space="preserve">
          <source>Any other way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d08dfac4eb38f0f63eff98b00067979f08774a02" translate="yes" xml:space="preserve">
          <source>Any payment method specific errors which may have occurred. This object's contents will vary depending on the payment used. For example, if the user chose to pay by credit card using the &lt;code&gt;basic-card&lt;/code&gt; payment method, this is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/BasicCardErrors&quot;&gt;&lt;code&gt;BasicCardErrors&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76e1cc7c24e4b54af55f82b55853b9fc4af007ec" translate="yes" xml:space="preserve">
          <source>Any read operations must access a snapshot view of the data, which cannot change once it is created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="150d748ee772effb2ddbbe217dfce8b4ac74ec0f" translate="yes" xml:space="preserve">
          <source>Any uint values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c96f1ed1751e5f930b9bedcf459ca308d2e71fd4" translate="yes" xml:space="preserve">
          <source>Any value or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt; which represents the reason the promise was rejected. This can be anything from a numeric error code to an error &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; to an object which contains detailed information describing the situation resulting in the promise being rejected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d196ae5529392777ee0dc340dcb8952566428ba8" translate="yes" xml:space="preserve">
          <source>Any value type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="567b7a7b4dfb11b516b00e5032379b44eba4e810" translate="yes" xml:space="preserve">
          <source>Any web application can lock the screen to suits its own needs. The screen is locked using the &lt;a href=&quot;../screen/lockorientation&quot;&gt;&lt;code&gt;Screen.lockOrientation()&lt;/code&gt;&lt;/a&gt; method and unlocked using the &lt;a href=&quot;../screen/unlockorientation&quot;&gt;&lt;code&gt;Screen.unlockOrientation()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e559da241b483bcc4b4c1be78dee85c70607a54" translate="yes" xml:space="preserve">
          <source>Any window may access this method on any other window, at any time, regardless of the location of the document in the window, to send it a message. Consequently, any event listener used to receive messages &lt;strong&gt;must&lt;/strong&gt; first check the identity of the sender of the message, using the &lt;code&gt;origin&lt;/code&gt; and possibly &lt;code&gt;source&lt;/code&gt; properties. This cannot be overstated: &lt;strong&gt;Failure to check the &lt;code&gt;origin&lt;/code&gt; and possibly &lt;code&gt;source&lt;/code&gt; properties enables cross-site scripting attacks.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feeccc9bbe64c98ca46e81358ddc5ad2bbb6c7d3" translate="yes" xml:space="preserve">
          <source>Anything that requires syncing the CPU and GPU sides is potentially very slow, so if possible you should try to avoid doing that in your main rendering loops. This includes the following WebGL calls: &lt;code&gt;getError()&lt;/code&gt;, &lt;code&gt;readPixels()&lt;/code&gt;, and &lt;code&gt;finish()&lt;/code&gt;. WebGL getter calls such as &lt;code&gt;getParameter()&lt;/code&gt; and &lt;code&gt;getUniformLocation()&lt;/code&gt; should be considered slow too, so try to cache their results in a JavaScript variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d033fb2e467a9f54c62cfd1e3a4886a93ec897e5" translate="yes" xml:space="preserve">
          <source>App Cache</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2c07d231981fb4a9d65439de3ec85773cdae004" translate="yes" xml:space="preserve">
          <source>Appears in &lt;code&gt;document.&lt;br/&gt;
    styleSheets&lt;/code&gt; list</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a067f8b18e74216f874a52f92724f89b1dbf4638" translate="yes" xml:space="preserve">
          <source>Append the new list item to the list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe2f2f49086ead946eb25fe499c4d28a725fda4f" translate="yes" xml:space="preserve">
          <source>Append to an Existing Collection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0390e546e2f763b8c9bb5a540bda4ee91261c85" translate="yes" xml:space="preserve">
          <source>Appending an element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ce1ee789d2509f3ac948ebcea43daa53238bd8e" translate="yes" xml:space="preserve">
          <source>Appending an element and text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abeb5b892d887c8e53d42406406c1ce167e5e7ee" translate="yes" xml:space="preserve">
          <source>Appending text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0fd8cdb5f00d87a7e7c7a6fda6dfc2f231058a3" translate="yes" xml:space="preserve">
          <source>Appends a new value onto an existing header inside a &lt;code&gt;Headers&lt;/code&gt; object, or adds the header if it does not already exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bb182572113544201dc43813bb1ec213e243351" translate="yes" xml:space="preserve">
          <source>Appends a new value onto an existing key inside a &lt;code&gt;FormData&lt;/code&gt; object, or adds the key if it does not already exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d9fd6b2d67dcb3a31ea2d54ec8d40cc4606d754" translate="yes" xml:space="preserve">
          <source>Appends a specified key/value pair as a new search parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e28f8686dfdd03836c3a0c55e07923339581c3e0" translate="yes" xml:space="preserve">
          <source>Appends media segment data from a &lt;code&gt;ReadableStream&lt;/code&gt; object to the &lt;code&gt;SourceBuffer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7563f27741ce76ad9f2cdfe959370c047a868b4a" translate="yes" xml:space="preserve">
          <source>Appends media segment data from an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ArrayBuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;arraybufferview&quot;&gt;&lt;code&gt;ArrayBufferView&lt;/code&gt;&lt;/a&gt; object to the &lt;code&gt;SourceBuffer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="318ac0babe07c11eeba3bf840e0fc1b138f8e3ae" translate="yes" xml:space="preserve">
          <source>Appends the contents of the specified JavaScript object to the &lt;a href=&quot;blob&quot;&gt;&lt;code&gt;Blob&lt;/code&gt;&lt;/a&gt; being built. If the value you specify isn't a &lt;a href=&quot;blob&quot;&gt;&lt;code&gt;Blob&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;, the value is coerced to a string before being appended to the blob.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18b2b60a1a07cab1060e2d47172cbe32a0b7f89d" translate="yes" xml:space="preserve">
          <source>Applet</source>
          <target state="translated">Applet</target>
        </trans-unit>
        <trans-unit id="623ea3df37e644deaaeb60ee33763d09ae8eefac" translate="yes" xml:space="preserve">
          <source>Application Compatibility Layer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a678b7ea6d2c2b53253f066e7dc3c2fa4bef9a7f" translate="yes" xml:space="preserve">
          <source>Application UI</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df51e4778261006c817297da829d92fa4f620cf6" translate="yes" xml:space="preserve">
          <source>Application caches</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1b13f23bd8fbae11124ab8daa8f74774718de8a" translate="yes" xml:space="preserve">
          <source>Applications being built with user privacy and security in mind can choose to limit the permitted candidates to relay canddiates only. Doing so prevents the remote user's address from being exposed, but reduces the pool of available candidates to choose from. To do this, configure the ICE agent's ICE transport policy using &lt;a href=&quot;../rtcconfiguration&quot;&gt;&lt;code&gt;RTCConfiguration&lt;/code&gt;&lt;/a&gt;, like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7d326ce810171c4cc5ceb93144462be6c7d8d13" translate="yes" xml:space="preserve">
          <source>Applies a CSS and SVG filter to the Canvas, e.g. to change the brightness or blur the canvas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b8d29231bef1a361f10427a0e76f560aef0eaa0" translate="yes" xml:space="preserve">
          <source>Applies a drop shadow effect to the drawing. A drop shadow is effectively a blurred, offset version of the drawing's alpha mask drawn in a particular color, composited below the drawing. This function takes up to five arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b907a328a320a85ebad4d13072742ec9a9ad51f7" translate="yes" xml:space="preserve">
          <source>Applies a matrix transform specified as a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrixInit&quot;&gt;&lt;code&gt;DOMMatrixInit&lt;/code&gt;&lt;/a&gt; object to the &lt;code&gt;DOMPointReadOnly&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d53c1f5139dc16398a218a0db4eb4d41e6b85e9" translate="yes" xml:space="preserve">
          <source>Applies an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix&quot;&gt;&lt;code&gt;SVGMatrix&lt;/code&gt;&lt;/a&gt; representing a linear transform to the pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7162045dadf426009f077b971e17cb6d0a549685" translate="yes" xml:space="preserve">
          <source>Applies changes to parameters which configure how the &lt;code&gt;track&lt;/code&gt; is encoded and transmitted to the remote peer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39c94c2fe5dcd2d055849bd16a1a1d0d1f57aa04" translate="yes" xml:space="preserve">
          <source>Applies the specified transparency value to all future shapes drawn on the canvas. The value must be between 0.0 (fully transparent) to 1.0 (fully opaque). This value is 1.0 (fully opaque) by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a91e0dee96a023ada54b5e9731b40694e70fa3c" translate="yes" xml:space="preserve">
          <source>Applying color to the vertices</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8306559ba532168ab6517015c0fd53b841204319" translate="yes" xml:space="preserve">
          <source>Applying constraint set updates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c51add85369a4a35900e85befbfc68d9ed907ba" translate="yes" xml:space="preserve">
          <source>Applying constraints</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7300989a4e382d728d66389ab470d9fc8cde1511" translate="yes" xml:space="preserve">
          <source>Applying styles and colors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf87ff93bf640b71ff085712982d84a4823f50cf" translate="yes" xml:space="preserve">
          <source>Applying various context settings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b64dfa7e8c5344ee852e7fccab38465a928defab" translate="yes" xml:space="preserve">
          <source>Appropriate events will be sent to the media element itself as the load process proceeds:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dc785d2c1d59089287c6c436cb17a8a3bff11e1" translate="yes" xml:space="preserve">
          <source>Appropriate responses are built using &lt;code&gt;event.action&lt;/code&gt; within the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/notificationclick&quot;&gt;notificationclick&lt;/a&gt;&lt;/code&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2227cf7202c473893c35dd6d72c7930ac25d94c" translate="yes" xml:space="preserve">
          <source>Appropriate use cases for &lt;code&gt;hidden&lt;/code&gt; include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9a36850b7f3f78365a998cb16cb68b6fd79400d" translate="yes" xml:space="preserve">
          <source>Apps</source>
          <target state="translated">Apps</target>
        </trans-unit>
        <trans-unit id="fdc9aab5235ab3cccbaa6e1a9ae75f66188e911e" translate="yes" xml:space="preserve">
          <source>Archive API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5103cbc412090de9918662743710b4664f72774a" translate="yes" xml:space="preserve">
          <source>Arcs</source>
          <target state="translated">Arcs</target>
        </trans-unit>
        <trans-unit id="ec69a1a56a9bb4ade8716aebdc7206d73ce56a91" translate="yes" xml:space="preserve">
          <source>Are &lt;code&gt;double&lt;/code&gt; representing each component of a 4x4 matrix needed for 2D rotations and translations. They are aliases for some components of the 4x4 matrix:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93fd423ad673441e86f88bf06a58ea88c0f4ebb7" translate="yes" xml:space="preserve">
          <source>Are &lt;code&gt;double&lt;/code&gt; representing each component of a 4x4 matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd2b2ee6201fb660ef95c1678966e466c036d5c7" translate="yes" xml:space="preserve">
          <source>Are &lt;code&gt;double&lt;/code&gt; representing each component of a 4x4 matrix. They are read-only, but their counterpart, with the same name, in &lt;a href=&quot;dommatrix&quot;&gt;&lt;code&gt;DOMMatrix&lt;/code&gt;&lt;/a&gt; aren't.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbb9fa252e60809efa55a7ad83aea5438ef56753" translate="yes" xml:space="preserve">
          <source>Arguments</source>
          <target state="translated">Arguments</target>
        </trans-unit>
        <trans-unit id="107004472b7ba4e5e31f3082ee1fb5a1239eec61" translate="yes" xml:space="preserve">
          <source>Array</source>
          <target state="translated">Array</target>
        </trans-unit>
        <trans-unit id="6eb6467e007cb070adc85d58a09cd75d99be0f3c" translate="yes" xml:space="preserve">
          <source>Array Object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33d694d6e1830d20d9ffe82ea9829b9ca96de05a" translate="yes" xml:space="preserve">
          <source>Array of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry&quot;&gt;&lt;code&gt;FileSystemEntry&lt;/code&gt;&lt;/a&gt; objects &lt;strong&gt;describing&lt;/strong&gt; the currently-selected files or directories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33844fd086b777571a8b3080b13f074251525f38" translate="yes" xml:space="preserve">
          <source>Array of basic type: one entry with the name of the uniform suffixed with &lt;code&gt;[0]&lt;/code&gt;. E.g. &lt;code&gt;uniform vec4 b[];&lt;/code&gt; will result in &lt;code&gt;b[0]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95971ea269213b08d09c9553e6421bde178a5ca7" translate="yes" xml:space="preserve">
          <source>ArrayBuffer</source>
          <target state="translated">ArrayBuffer</target>
        </trans-unit>
        <trans-unit id="4e3eaa21fe5a60bc1dde52d5c6634382464cbe73" translate="yes" xml:space="preserve">
          <source>ArrayBuffer as parameter to send()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="344ca1bae01f225dce43a257eecb7eef13159726" translate="yes" xml:space="preserve">
          <source>ArrayBufferView</source>
          <target state="translated">ArrayBufferView</target>
        </trans-unit>
        <trans-unit id="97d526f7be9080d93f598df961ae7a262361894e" translate="yes" xml:space="preserve">
          <source>ArrayBufferView as parameter to send()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4db6519fb1057f6b9f617fbcafc538080a60ffa8" translate="yes" xml:space="preserve">
          <source>Arrays of structs or arrays: each entry of the array will generate its own entries. E.g. &lt;code&gt;uniform struct { float foo; vec4 bar; } d[2];&lt;/code&gt; will result in:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca3a50ee46f775c025378b130a64ab6afbdcea28" translate="yes" xml:space="preserve">
          <source>Arrow functions are a possible alternative, too:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8118ed7f5bbc3806a683edf129cb78f0f1099677" translate="yes" xml:space="preserve">
          <source>Art gallery example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c422841b7e3951946583038790545c4ed38481b" translate="yes" xml:space="preserve">
          <source>Articles</source>
          <target state="translated">Articles</target>
        </trans-unit>
        <trans-unit id="8e1b2362323ce59a64564afd1fd81ac199a56004" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;FileReader&lt;/code&gt; inherits from &lt;a href=&quot;eventtarget&quot;&gt;&lt;code&gt;EventTarget&lt;/code&gt;&lt;/a&gt;, all those events can also be listened for by using the &lt;a href=&quot;eventtarget/addeventlistener&quot;&gt;&lt;code&gt;addEventListener&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c955ac732afa986d19ab7b6ab407edee5215241e" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;detach()&lt;/code&gt; is now a no-op method, this method cannot throw anymore.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2bc1fb08e645b4c626b8b0d3436ba0103a32ef2" translate="yes" xml:space="preserve">
          <source>As ICE negotiation continues, any time a pair of candidates is discovered that is better than the currently-selected pair, the new pair is selected, replacing the previous pairing, and the &lt;code&gt;selectedcandidatepairchange&lt;/code&gt; event is fired again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10dd26a2bfa6f4e3906f4a1ea7556079d6b8c1f6" translate="yes" xml:space="preserve">
          <source>As WiFi-based locationing is often provided by Google, the vanilla Geolocation API may be unavailable in China. You may use local third-party providers such as &lt;a href=&quot;http://lbsyun.baidu.com/index.php?title=jspopular/guide/geolocation&quot;&gt;Baidu&lt;/a&gt;, &lt;a href=&quot;https://lbs.amap.com/api/javascript-api/guide/services/geolocation#geolocation&quot;&gt;Autonavi&lt;/a&gt;, or &lt;a href=&quot;http://lbs.qq.com/tool/component-geolocation.html&quot;&gt;Tencent&lt;/a&gt;. These services use the user's IP address and/or a local app to provide enhanced positioning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a64a4101485b8f0c93a5086541fdba833b51be08" translate="yes" xml:space="preserve">
          <source>As a &lt;a href=&quot;cssconditionrule&quot;&gt;&lt;code&gt;CSSConditionRule&lt;/code&gt;&lt;/a&gt; and therefore a &lt;a href=&quot;cssrule&quot;&gt;&lt;code&gt;CSSRule&lt;/code&gt;&lt;/a&gt; and a &lt;a href=&quot;cssgroupingrule&quot;&gt;&lt;code&gt;CSSGroupingRule&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;CSSSupportsRule&lt;/code&gt; also implements the properties of these interfaces. It has no specific properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d14397929113bfd643d1cd4647bb7a035b8759cf" translate="yes" xml:space="preserve">
          <source>As a &lt;a href=&quot;cssconditionrule&quot;&gt;&lt;code&gt;CSSConditionRule&lt;/code&gt;&lt;/a&gt; and therefore a &lt;a href=&quot;cssrule&quot;&gt;&lt;code&gt;CSSRule&lt;/code&gt;&lt;/a&gt;and a &lt;a href=&quot;cssgroupingrule&quot;&gt;&lt;code&gt;CSSGroupingRule&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;CSSSupportsRule&lt;/code&gt; also implements the methods of that interface. It has no specific methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66de8b548780e9ce968a26494df022a92baf93e9" translate="yes" xml:space="preserve">
          <source>As a &lt;a href=&quot;cssconditionrule&quot;&gt;&lt;code&gt;CSSConditionRule&lt;/code&gt;&lt;/a&gt;, and therefore both a &lt;a href=&quot;cssgroupingrule&quot;&gt;&lt;code&gt;CSSGroupingRule&lt;/code&gt;&lt;/a&gt; and a &lt;a href=&quot;cssrule&quot;&gt;&lt;code&gt;CSSRule&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;CSSMediaRule&lt;/code&gt; also implements the methods of that interface. It has no specific methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37c110070a927f6d6277fcfd52a13850d185f2ee" translate="yes" xml:space="preserve">
          <source>As a &lt;a href=&quot;cssconditionrule&quot;&gt;&lt;code&gt;CSSConditionRule&lt;/code&gt;&lt;/a&gt;, and therefore both a &lt;a href=&quot;cssgroupingrule&quot;&gt;&lt;code&gt;CSSGroupingRule&lt;/code&gt;&lt;/a&gt; and a &lt;a href=&quot;cssrule&quot;&gt;&lt;code&gt;CSSRule&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;CSSMediaRule&lt;/code&gt; also implements the properties of these interfaces. It has the following specific propert&lt;code&gt;y:&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="863d4328acbe33f89ae45cf0b48b3b9c46921e5e" translate="yes" xml:space="preserve">
          <source>As a &lt;a href=&quot;cssrule&quot;&gt;&lt;code&gt;CSSRule&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;CSSKeyframeRule&lt;/code&gt; also implements the methods of that interface. It has no specific methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e46707725f45e8aa242cb6b0ccae0c6c9ba016a6" translate="yes" xml:space="preserve">
          <source>As a &lt;a href=&quot;cssrule&quot;&gt;&lt;code&gt;CSSRule&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;CSSKeyframeRule&lt;/code&gt; also implements the properties of these interfaces. It has two specific properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e27c1e5b156e138e0b986197860deb53843bb1be" translate="yes" xml:space="preserve">
          <source>As a &lt;a href=&quot;cssrule&quot;&gt;&lt;code&gt;CSSRule&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;CSSKeyframesRule&lt;/code&gt; also implements the methods of that interface. It has three specific methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35d4b07b7cc9327e802e9fb1d49272da7c66458c" translate="yes" xml:space="preserve">
          <source>As a &lt;a href=&quot;cssrule&quot;&gt;&lt;code&gt;CSSRule&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;CSSKeyframesRule&lt;/code&gt; also implements the properties of these interfaces. It has two properties :</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17a008ade341ae745ae3e00c6bdefa5b32b5e76f" translate="yes" xml:space="preserve">
          <source>As a &lt;a href=&quot;cssrule&quot;&gt;&lt;code&gt;CSSRule&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;CSSNamespaceRule&lt;/code&gt; also implements the methods of that interface. It has &lt;em&gt;no &lt;/em&gt;specific methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4240ef77f2049fdc280d61b77d20e060042b18c2" translate="yes" xml:space="preserve">
          <source>As a &lt;a href=&quot;cssrule&quot;&gt;&lt;code&gt;CSSRule&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;CSSNamespaceRule&lt;/code&gt; also implements the properties of that interface. It has some specific properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f08314f48d84319c176e853cf75fb4e809235342" translate="yes" xml:space="preserve">
          <source>As a &lt;a href=&quot;cssrule&quot;&gt;&lt;code&gt;CSSRule&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;CSSPageRule&lt;/code&gt; also implements the methods of that interface. It has no specific methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffe3bce6b6a3fb11e933642b4e9bbabe402e5fab" translate="yes" xml:space="preserve">
          <source>As a &lt;a href=&quot;cssrule&quot;&gt;&lt;code&gt;CSSRule&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;CSSPageRule&lt;/code&gt; also implements the properties of this interface. It has the following specific properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3282860be397290bae1b97a8eacfea72356f632f" translate="yes" xml:space="preserve">
          <source>As a JavaScript developer, programmatically reading and manipulating streams of data received over the network, chunk by chunk, is very useful! But how do you use the Streams API&amp;rsquo;s readable stream functionality? This article explains the basics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1ae8d05d4db2e965d1294deac4e0bb414eb288d" translate="yes" xml:space="preserve">
          <source>As a JavaScript developer, programmatically writing data to a stream is very useful! This article explains the &lt;a href=&quot;../streams_api&quot;&gt;Streams API&lt;/a&gt;&amp;rsquo;s writable stream functionality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a379855f75fc8843e3e2f899c75e9fb4afe15dba" translate="yes" xml:space="preserve">
          <source>As a consequence of the way fallback is provided, unlike the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&lt;/a&gt; element, the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas&quot;&gt;&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;&lt;/a&gt; element &lt;strong&gt;requires&lt;/strong&gt; the closing tag (&lt;code&gt;&amp;lt;/canvas&amp;gt;&lt;/code&gt;). If this tag is not present, the rest of the document would be considered the fallback content and wouldn't be displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9feed4d8bfc2fd3e5b76e9b02dfbd117525d5c33" translate="yes" xml:space="preserve">
          <source>As a refresher, here's what our fragment shader looked like previously:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8acd2f734ea1e83b2b5e228888a8da6934673025" translate="yes" xml:space="preserve">
          <source>As a result, every time you change &lt;code&gt;N&lt;/code&gt; (the value of the input &lt;a href=&quot;../audioparam&quot;&gt;&lt;code&gt;AudioParam&lt;/code&gt;&lt;/a&gt;, the values of the two &lt;code&gt;GainNode&lt;/code&gt;s' &lt;code&gt;gain&lt;/code&gt; properties and the value of the &lt;code&gt;StereoPannerNode&lt;/code&gt;'s &lt;code&gt;pan&lt;/code&gt; propertry are all set to &lt;code&gt;N&lt;/code&gt; as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bda2160e7fb493a8ce9abe6bae7414fa4d8edb2f" translate="yes" xml:space="preserve">
          <source>As a result, the &lt;a href=&quot;../node/contains&quot;&gt;contains&lt;/a&gt; method no longer works on the property; the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes&quot;&gt;includes&lt;/a&gt; method should be used instead to check if a specific type of data is provided, using code like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2022a6ecb0f362478397ceec484e7933c004558b" translate="yes" xml:space="preserve">
          <source>As a result, while our shim doesn't constrain itself to the amount of idle time left in the current event loop pass like the true &lt;code&gt;requestIdleCallback()&lt;/code&gt;, it does at least limit the callback to no more than 50 milliseconds of run time per pass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e4d7fd80a5ab8c58302868ee6dbd5201e616efc" translate="yes" xml:space="preserve">
          <source>As a work-around, &lt;code&gt;document.body.contains()&lt;/code&gt; can be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="774b0ef07907f62c872f7919574a25b35226d622" translate="yes" xml:space="preserve">
          <source>As always, the returned collection is &lt;em&gt;live&lt;/em&gt;, meaning that it always reflects the current state of the DOM tree rooted at the element on which the function was called. As new elements that match &lt;code&gt;names&lt;/code&gt; are added to the subtree, they immediately appear in the collection. Similarly, if an existing element that doesn't match &lt;code&gt;names&lt;/code&gt; has its set of classes adjusted so that it matches, it immediately appears in the collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7af2d4427bfdc3eda1c3c0ef6ee59cad60d29b25" translate="yes" xml:space="preserve">
          <source>As an API that may involve significant privacy concerns, &lt;code&gt;getUserMedia()&lt;/code&gt; is held by the specification to very specific requirements for user notification and permission management. First, &lt;code&gt;getUserMedia()&lt;/code&gt; must always get user permission before opening any media gathering input such as a webcam or microphone. Browsers may offer a once-per-domain permission feature, but they must ask at least the first time, and the user must specifically grant ongoing permission if they choose to do so.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac09374527b6e8962a365690fb1cf52ca629d97a" translate="yes" xml:space="preserve">
          <source>As an abstract interface, you won't directly use &lt;code&gt;AbstractWorker&lt;/code&gt; in your code. Instead, you'll interact with either &lt;a href=&quot;worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;sharedworker&quot;&gt;&lt;code&gt;SharedWorker&lt;/code&gt;&lt;/a&gt;, both of which inherit the properties of &lt;code&gt;AbstractWorker&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aae49ee8c4f24aa4e2ad7ee77b3ab633094b22b1" translate="yes" xml:space="preserve">
          <source>As an example, a page at &lt;code&gt;&lt;var&gt;http://example.com/example.html&lt;/var&gt;&lt;/code&gt; running the following code will generate alerts as indicated:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ed9a75b25cbbf21f45b88d6cbdc598c5ba90ae9" translate="yes" xml:space="preserve">
          <source>As an example, let's take a chunk size of 1, and a high water mark of 3. This means that up to 3 chunks can be enqueued before the high water mark is reached and backpressure is applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48db06e14c14c808e2ee3ecae2294dff140dbf98" translate="yes" xml:space="preserve">
          <source>As animations play, they report changes to their &lt;a href=&quot;animation/playstate&quot;&gt;&lt;code&gt;playState&lt;/code&gt;&lt;/a&gt; through animation events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea3fdde84ce9d2d373ad467a549ac493145369c8" translate="yes" xml:space="preserve">
          <source>As another example of an interesting piece of data you can obtain using the Navigation Timing API that you can't otherwise easily get, you can get the amount of time it took to render the page:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb8b0ce2f3c8c1e84d93f01de5e5758bbf16c2f4" translate="yes" xml:space="preserve">
          <source>As before, we now start a for loop and cycle through each value in the &lt;code&gt;dataArray&lt;/code&gt;. For each one, we make the &lt;code&gt;barHeight&lt;/code&gt; equal to the array value, set a fill colour based on the &lt;code&gt;barHeight&lt;/code&gt; (taller bars are brighter), and draw a bar at &lt;code&gt;x&lt;/code&gt; pixels across the canvas, which is &lt;code&gt;barWidth&lt;/code&gt; wide and &lt;code&gt;barHeight/2&lt;/code&gt; tall (we eventually decided to cut each bar in half so they would all fit on the canvas better.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dce516225e2ff3b6ff4787ab9f11f7919fa8d9e9" translate="yes" xml:space="preserve">
          <source>As before, we'll vary the parameters when the range input values are changed by the user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3b43a3d1b67de702cb2401bd7c2238dd7082365" translate="yes" xml:space="preserve">
          <source>As can be seen in the &lt;a href=&quot;datatransferitem#Browser_compatibility&quot;&gt;DataTransferItem interface's Browser Compatibility table&lt;/a&gt;, drag-and-drop interoperability is relatively broad among desktop browsers (except the &lt;a href=&quot;datatransferitem&quot;&gt;&lt;code&gt;DataTransferItem&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;datatransferitemlist&quot;&gt;&lt;code&gt;DataTransferItemList&lt;/code&gt;&lt;/a&gt; interfaces have less support). This data also indicates drag and drop support among mobile browsers is very low.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a216df1c55acb15751ef64ad16efe2d99e487c5" translate="yes" xml:space="preserve">
          <source>As can be seen, the w component divides the x, y, and z components. When the w component is a non-zero real number then homogeneous coordinate easily translates back into a normal point in Cartesian space. Now what happens if the w component is zero? In JavaScript the value returned would be as follows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6f3c93c6b9f42abef0d7027619767406fb7a893" translate="yes" xml:space="preserve">
          <source>As compressed textures require hardware support, therefore no specific formats are required by WebGL; instead, a context can make different formats available, depending on hardware support. &lt;a href=&quot;https://toji.github.io/texture-tester/&quot;&gt;This site&lt;/a&gt; shows which formats are supported in the used browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a78b04ad4125c1cbf6bf67ed5f7632418053581" translate="yes" xml:space="preserve">
          <source>As each side of the peer-to-peer connection is successfully linked up, the corresponding &lt;a href=&quot;../rtcpeerconnection&quot;&gt;&lt;code&gt;RTCPeerConnection&lt;/code&gt;&lt;/a&gt;'s &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/icecandidate&quot;&gt;icecandidate&lt;/a&gt;&lt;/code&gt; event is fired. These handlers can do whatever's needed, but in this example, all we need to do is update the user interface:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f8e3e6774f12bfcfb3b5d1112152d0e5db486fb" translate="yes" xml:space="preserve">
          <source>As establishing a connection is asynchronous and prone to failure there is no guarantee that calling the &lt;code&gt;send()&lt;/code&gt; method immediately after creating a WebSocket object will be successful. We can at least be sure that attempting to send data only takes place once a connection is established by defining an &lt;code&gt;onopen&lt;/code&gt; handler to do the work:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63a0e6d734b7ca19d594b0cbc4a3321af7a39b72" translate="yes" xml:space="preserve">
          <source>As if its extensive variety of sound processing (and other) options wasn't enough, the Web Audio API also includes facilities to allow you to emulate the difference in sound as a listener moves around a sound source, for example panning as you move around a sound source inside a 3D game. The official term for this is &lt;strong&gt;spatialization&lt;/strong&gt;, and this article will cover the basics of how to implement such a system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9c00d690ed673ebf25f29e53cdf089636bd66d2" translate="yes" xml:space="preserve">
          <source>As indicated previously, &lt;code&gt;onupgradeneeded&lt;/code&gt; is the only place where you can alter the structure of the database. In it, you can create and delete object stores and build and remove indices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f4f53702bf89471e794c0599d1c8bd15917061b" translate="yes" xml:space="preserve">
          <source>As is the case any time we need to work with the contents of a canvas, we start by getting the &lt;a href=&quot;../canvasrenderingcontext2d&quot;&gt;&lt;code&gt;2D drawing context&lt;/code&gt;&lt;/a&gt; for the hidden canvas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11bf53fe7e2d976cb55831b757476fcf5ebadc66" translate="yes" xml:space="preserve">
          <source>As is the case with most of &lt;code&gt;RTCIceCandidate&lt;/code&gt;'s properties, the value of &lt;code&gt;port&lt;/code&gt; is extracted from the &lt;code&gt;candidate&lt;/code&gt; a-line string specified when creating the &lt;code&gt;RTCIceCandidate&lt;/code&gt;. The a-line string is obtained either from the &lt;a href=&quot;../rtcicecandidateinit&quot;&gt;&lt;code&gt;RTCIceCandidateInit&lt;/code&gt;&lt;/a&gt; property &lt;a href=&quot;../rtcicecandidateinit/candidate&quot;&gt;&lt;code&gt;candidate&lt;/code&gt;&lt;/a&gt; or from a-line string passed into the constructor upon using &lt;a href=&quot;rtcicecandidate&quot;&gt;&lt;code&gt;new RTCIceCandidate()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c2324f0f7d7957e27443596950ede89174e1047" translate="yes" xml:space="preserve">
          <source>As is the case with most of &lt;code&gt;RTCIceCandidate&lt;/code&gt;'s properties, the value of &lt;code&gt;priority&lt;/code&gt; is extracted from the &lt;code&gt;candidate&lt;/code&gt; a-line string specified when creating the &lt;code&gt;RTCIceCandidate&lt;/code&gt;. The a-line string is obtained either from the &lt;a href=&quot;../rtcicecandidateinit&quot;&gt;&lt;code&gt;RTCIceCandidateInit&lt;/code&gt;&lt;/a&gt; property &lt;a href=&quot;../rtcicecandidateinit/candidate&quot;&gt;&lt;code&gt;candidate&lt;/code&gt;&lt;/a&gt; or from an a-line string passed into &lt;a href=&quot;../rtcpeerconnection/addicecandidate&quot;&gt;&lt;code&gt;RTCPeerConnection.addIceCandidate()&lt;/code&gt;&lt;/a&gt; instead of an &lt;code&gt;RTCIceCandidate&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50cf505a665248a3ae88fc580bcf9657c4f17092" translate="yes" xml:space="preserve">
          <source>As it happens, all that lies between the two locations (&lt;code&gt;offsetTop&lt;/code&gt; and client area top) is the element's border. This is because the &lt;code&gt;offsetTop&lt;/code&gt; indicates the location of the top of the border (not the margin) while the client area starts immediately below the border, (client area includes padding.) Therefore, the &lt;strong&gt;clientTop&lt;/strong&gt; value will always equal the integer portion of the &lt;code&gt;.getComputedStyle()&lt;/code&gt; value for &quot;border-top-width&quot;. (Actually might be Math.round(parseFloat()).) For example, if the computed &quot;border-top-width&quot; is zero, then &lt;code&gt;clientTop&lt;/code&gt; is also zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c8b456db9e01d4871848c3d644a5ffa67929871" translate="yes" xml:space="preserve">
          <source>As it was a pure interface, with no object of this type, this change has no effect on the Web.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="062efd1232fcc96e9dcb6e8a9da27c72dd8d572f" translate="yes" xml:space="preserve">
          <source>As long as the connection is active, you can send tones at any time. Calling &lt;code&gt;insertDTMF()&lt;/code&gt; will append the specified tones to the end of the current tone buffer, so that those tones play after the previously-enqueued tones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a2cb9b03e699c804e5da0fce7b54501c38aae84" translate="yes" xml:space="preserve">
          <source>As many property value pairs as are contained in each keyframe of the animation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9361b6e3b8a2d7b2b79bdd77e074fbb67cc95f4b" translate="yes" xml:space="preserve">
          <source>As mentioned above, a dedicated worker is only accessible by the script that called it. In this section we'll discuss the JavaScript found in our &lt;a href=&quot;https://github.com/mdn/simple-web-worker&quot;&gt;Basic dedicated worker example&lt;/a&gt; (&lt;a href=&quot;https://mdn.github.io/simple-web-worker/&quot;&gt;run dedicated worker&lt;/a&gt;): This allows you to enter two numbers to be multiplied together. The numbers are sent to a dedicated worker, multiplied together, and the result is returned to the page and displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9123c1dba7efb2feaa4bb27ed30c6078c50e2da0" translate="yes" xml:space="preserve">
          <source>As mentioned above, error events bubble. Error events are targeted at the request that generated the error, then the event bubbles to the transaction, and then finally to the database object. If you want to avoid adding error handlers to every request, you can instead add a single error handler on the database object, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc750704d5834511469fdc885fa67b65dd123722" translate="yes" xml:space="preserve">
          <source>As mentioned above, the position sensor detects information concerning the HMD and constantly outputs it, allowing you to continually update a scene according to head movement, rotation, etc. But what exactly is the information?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f40d2365731e4287f791e33eb570ef653529c5de" translate="yes" xml:space="preserve">
          <source>As mentioned above, the value changes exponentially, with each &lt;code&gt;timeConstant&lt;/code&gt; bringing you another 63.2% toward the target value. You don't have to worry about reaching the target value; once you are close enough, any further changes will be imperceptible to a human listener.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51f69cf0c06bac2667d0d017a5757271fa70bb52" translate="yes" xml:space="preserve">
          <source>As mentioned above, we call the &lt;code&gt;close()&lt;/code&gt; method when the writing is finished, which triggers the &lt;code&gt;close()&lt;/code&gt; method specified inside the &lt;code&gt;WritableStream()&lt;/code&gt; constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39d01981dc89dcf12249f179f31f56360adc015d" translate="yes" xml:space="preserve">
          <source>As mentioned above, when the audio input from the microphone is obtained, &lt;code&gt;gotStream()&lt;/code&gt; is called. Its job is to build the stream being sent to the receiver, so the actual process of starting to transmit can begin. It also gets access to the &lt;code&gt;RTCDTMFSender&lt;/code&gt; we'll use to issue DTMF on the connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e200e122aaf4744f39516737f24534c3c7b07e2e" translate="yes" xml:space="preserve">
          <source>As mentioned earlier, Chrome currently supports speech recognition with prefixed properties, therefore at the start of our code we include these lines to feed the right objects to Chrome, and non-prefix browsers, like Firefox:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5db2c6f16924fcf9686744175a14bba0d97dcd93" translate="yes" xml:space="preserve">
          <source>As mentioned earlier, the chunks in a stream that have not yet been processed and finished with are kept track of by an internal queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="392b7b49935fb4b4c03e845e3fe37d1473e07c4f" translate="yes" xml:space="preserve">
          <source>As mentioned previously, scaling images can result in fuzzy or blocky artifacts due to the scaling process. You can use the drawing context's &lt;a href=&quot;../../canvasrenderingcontext2d/imagesmoothingenabled&quot;&gt;&lt;code&gt;imageSmoothingEnabled&lt;/code&gt;&lt;/a&gt; property to control the use of image smoothing algorithms when scaling images within your context. By default, this is &lt;code&gt;true&lt;/code&gt;, meaning images will be smoothed when scaled. You can disable this feature like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71932f94f00bdbccc05013fcb417572bda01c531" translate="yes" xml:space="preserve">
          <source>As multi-core computers become increasingly common, it's often useful to divide computationally complex tasks among multiple workers, which may then perform those tasks on multiple-processor cores.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c783d9de883bd6700b0936f988f86ce9da26560" translate="yes" xml:space="preserve">
          <source>As noted above, buttons may be configured differently to the standard &quot;left to right&quot; layout. A mouse configured for left-handed use may have the button actions reversed. Some pointing devices only have one button and use keyboard or other input mechanisms to indicate main, secondary, auxilary, etc. Others may have many buttons mapped to different functions and button values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82499eeddda5f4c6cb358ae91555935fc80b35d1" translate="yes" xml:space="preserve">
          <source>As noted above, values can be retrieved from storage using &lt;a href=&quot;../storage/getitem&quot;&gt;&lt;code&gt;Storage.getItem()&lt;/code&gt;&lt;/a&gt;. This takes the key of the data item as an argument, and returns the data value. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c758ba7010b94d0d91d5f8134eba60d024e20764" translate="yes" xml:space="preserve">
          <source>As of Chrome 45, this property no longer inherits from Node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fece39b29671cf0b324c4488dfaffeb87ceb5dc" translate="yes" xml:space="preserve">
          <source>As of Firefox 11 however, it is typical to receive a descriptive error message in the console from the Mozilla platform, and a closing code as defined in &lt;a href=&quot;http://tools.ietf.org/html/rfc6455#section-7.4&quot;&gt;RFC 6455, Section 7.4&lt;/a&gt; through the &lt;a href=&quot;https://developer.mozilla.org/en/WebSockets/WebSockets_reference/CloseEvent&quot;&gt;&lt;code&gt;CloseEvent&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fa9a3c17975f1f68930e255473e3734709c5ac9" translate="yes" xml:space="preserve">
          <source>As of Firefox 22, it does not appear that there is any way to distinguish between different kinds of error events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c95a16015363e940835a326ba27c351a3fe185d" translate="yes" xml:space="preserve">
          <source>As of Firefox 40, IndexedDB transactions have relaxed durability guarantees to increase performance (see &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1112702&quot;&gt;bug 1112702&lt;/a&gt;), which is the same behaviour as other IndexedDB-supporting browsers. In this case the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/complete&quot;&gt;complete&lt;/a&gt;&lt;/code&gt; event is fired after the OS has been told to write the data but potentially before that data has actually been flushed to disk. The event may thus be delivered quicker than before, however, there exists a small chance that the entire transaction will be lost if the OS crashes or there is a loss of system power before the data is flushed to disk. Since such catastrophic events are rare, most consumers should not need to concern themselves further.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b143e68216ac5ee408b409bdec706cfe757d1bf" translate="yes" xml:space="preserve">
          <source>As of Firefox 40, IndexedDB transactions have relaxed durability guarantees to increase performance (see &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1112702&quot;&gt;bug 1112702&lt;/a&gt;), which is the same behaviour as other IndexedDB-supporting browsers. Previously in a &lt;code&gt;readwrite&lt;/code&gt; transaction &lt;a href=&quot;../idbtransaction/oncomplete&quot;&gt;&lt;code&gt;IDBTransaction.oncomplete&lt;/code&gt;&lt;/a&gt; was fired only when all data was guaranteed to have been flushed to disk. In Firefox 40+ the &lt;code&gt;complete&lt;/code&gt; event is fired after the OS has been told to write the data but potentially before that data has actually been flushed to disk. The &lt;code&gt;complete&lt;/code&gt; event may thus be delivered quicker than before, however, there exists a small chance that the entire transaction will be lost if the OS crashes or there is a loss of system power before the data is flushed to disk. Since such catastrophic events are rare most consumers should not need to concern themselves further.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8942e7a778ca149f0cc50f4bd554b0d115764ec5" translate="yes" xml:space="preserve">
          <source>As of Firefox 40, IndexedDB transactions have relaxed durability guarantees to increase performance (see &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1112702&quot;&gt;bug 1112702&lt;/a&gt;), which is the same behaviour as other IndexedDB-supporting browsers. Previously in a &lt;code&gt;readwrite&lt;/code&gt; transaction &lt;a href=&quot;oncomplete&quot;&gt;&lt;code&gt;IDBTransaction.oncomplete&lt;/code&gt;&lt;/a&gt; was fired only when all data was guaranteed to have been flushed to disk. In Firefox 40+ the &lt;code&gt;complete&lt;/code&gt; event is fired after the OS has been told to write the data but potentially before that data has actually been flushed to disk. The &lt;code&gt;complete&lt;/code&gt; event may thus be delivered quicker than before, however, there exists a small chance that the entire transaction will be lost if the OS crashes or there is a loss of system power before the data is flushed to disk. Since such catastrophic events are rare most consumers should not need to concern themselves further.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b438e9c9662e85d47f6d030d40ba0f80a23e06ec" translate="yes" xml:space="preserve">
          <source>As of Firefox 52, the &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/DataTransfer/types&quot;&gt;&lt;code&gt;DataTransfer.types&lt;/code&gt;&lt;/a&gt; property returns a frozen array of &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/DOMString&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt;s as per spec, rather than a &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/DOMStringList&quot;&gt;&lt;code&gt;DOMStringList&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="098274646805fb15859dfd695d32c3a11d4c3452" translate="yes" xml:space="preserve">
          <source>As of Gecko 11.0, support for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; is implemented but not &lt;a href=&quot;../blob&quot;&gt;&lt;code&gt;Blob&lt;/code&gt;&lt;/a&gt; data types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75b1cc06f356e783e66634888f02039aae508e93" translate="yes" xml:space="preserve">
          <source>As of Gecko 6.0, calling &lt;code&gt;preventDefault()&lt;/code&gt; causes the &lt;a href=&quot;defaultprevented&quot;&gt;&lt;code&gt;Event.defaultPrevented()&lt;/code&gt;&lt;/a&gt; property's value to become &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="482a5154001a25775f532b9bcec1218e94940d45" translate="yes" xml:space="preserve">
          <source>As of January 2017 most implementations of WebGL only support a minimum of 1 and a maximum of 1 as the technology they are based on has these same limits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dce4faebed9ed57deeef9b7db53f182d574bf2a6" translate="yes" xml:space="preserve">
          <source>As of May 2015, the install event is an instance of &lt;a href=&quot;extendableevent&quot;&gt;&lt;code&gt;ExtendableEvent&lt;/code&gt;&lt;/a&gt; rather than a child of it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="997dc98e463db115f3f343e83abb60833dface64" translate="yes" xml:space="preserve">
          <source>As of Opera 32, this property no longer inherits from Node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e3816dee8642f0eab112af4d8f9513ef562604c" translate="yes" xml:space="preserve">
          <source>As optionally allowed by the spec, Mozilla allows this property to be set, either removing options at the end when using a shorter length, or adding blank options at the end when setting a longer length. Other implementations could potentially throw a &lt;a href=&quot;domexception&quot;&gt;DOMException&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4795fbadff312633af196b6791953be48377c4d7" translate="yes" xml:space="preserve">
          <source>As originally defined in DOM3 this attribute read/write. In the modern DOM Standard it is read only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5b4d3c76ed236e18963eab4bc0795aeb171f4ac" translate="yes" xml:space="preserve">
          <source>As our &lt;a href=&quot;https://github.com/mdn/dom-examples/tree/master/streams/simple-pump&quot;&gt;Simple stream pump&lt;/a&gt; example shows (&lt;a href=&quot;https://mdn.github.io/dom-examples/streams/simple-pump/&quot;&gt;see it live also&lt;/a&gt;), exposing it is a matter of just accessing the &lt;code&gt;body&lt;/code&gt; property of the response:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eaa33520bdaafa3d8dcada8dafdec947ad933a8" translate="yes" xml:space="preserve">
          <source>As part of the WebAuthn create() call, an authenticator will create a new keypair as well as an attestationObject for that keypair. The attestationObject contains the new public key, as well as signature over the entire attestationObject with a private key that is stored in the authenticator when it is manufactured. The public key that corresponds to the private key that has created the attestation signature is well known; however, there are various well known attestation public key chains for different ecosystems (for example, Android or TPM attestations).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1690cd8ff6cdc70984ebba37b5eaae4f88f9e1b4" translate="yes" xml:space="preserve">
          <source>As previously discussed, Internet Explorer versions 9 and below do not support the passing of arguments to the callback function in either &lt;code&gt;setTimeout()&lt;/code&gt; or &lt;code&gt;setInterval()&lt;/code&gt;. The following &lt;strong&gt;IE-specific&lt;/strong&gt; code demonstrates a method for overcoming this limitation. To use, simply add the following code to the top of your script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73fd6a6691770b853d5d6f2437d2f5fb9898b848" translate="yes" xml:space="preserve">
          <source>As previously mentioned, the &lt;a href=&quot;../intersectionobserver&quot;&gt;&lt;code&gt;IntersectionObserver&lt;/code&gt;&lt;/a&gt; callback receives as input an array of all of the observer's targeted elements which have become either more or less visible than one of the intersection observer ratios. We iterate over each of those entries&amp;mdash;which are of type &lt;a href=&quot;../intersectionobserverentry&quot;&gt;&lt;code&gt;IntersectionObserverEntry&lt;/code&gt;&lt;/a&gt;. If the target element is intersecting with the root, we know it has just transitioned from the obscured state to the visible state. If it's become at least 75% visible, then we consider the ad visible and we start the timer by setting the ad's &lt;code&gt;dataset.lastViewStarted&lt;/code&gt; attribute to the transition time in &lt;a href=&quot;../intersectionobserverentry/time&quot;&gt;&lt;code&gt;entry.time&lt;/code&gt;&lt;/a&gt;, then add the ad to the set &lt;code&gt;visibleAds&lt;/code&gt; so we know to process it as time goes by.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="462911a44b4b6cd17d22e40d9fee594c7d75da23" translate="yes" xml:space="preserve">
          <source>As recording progresses, we need to collect the audio data. We register an event handler to do this using &lt;a href=&quot;../mediarecorder/ondataavailable&quot;&gt;&lt;code&gt;mediaRecorder.ondataavailable&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a69cd76669c2d6f5c35aebc789da72b4e6364070" translate="yes" xml:space="preserve">
          <source>As set by &lt;a href=&quot;setlinedash&quot;&gt;&lt;code&gt;setLineDash()&lt;/code&gt;&lt;/a&gt;, strokes consist of lines that are 10 units wide, with spaces of 20 units in between each line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ca63e3a05265368e9a0e813fa7ec7cbfffadee5" translate="yes" xml:space="preserve">
          <source>As should be clear by now, WebGL doesn't have much built-in knowledge. It just runs two functions you supply &amp;mdash; a vertex shader and a fragment shader &amp;mdash; and expects you to write creative functions to get the results you want. In other words, if you want lighting you have to calculate it yourself. Fortunately, it's not all that hard to do, and this article will cover some of the basics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49833bcfb5c8f6e1e6bb91e3a4adbace4397d96e" translate="yes" xml:space="preserve">
          <source>As shown in the &lt;a href=&quot;../performance&quot;&gt;&lt;code&gt;Performance&lt;/code&gt;&lt;/a&gt; interface's &lt;a href=&quot;https://developer.mozilla.org/Web/API/Performance#Browser_compatibility&quot;&gt;Browser Compatibility&lt;/a&gt; table, most of the &lt;a href=&quot;../performance&quot;&gt;&lt;code&gt;Performance&lt;/code&gt;&lt;/a&gt; interfaces are broadly implemented by desktop browsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcd10b35a32984e3d782c835cb126df1e08b0961" translate="yes" xml:space="preserve">
          <source>As shown in the &lt;a href=&quot;performance&quot;&gt;&lt;code&gt;Performance&lt;/code&gt;&lt;/a&gt; interface's &lt;a href=&quot;https://developer.mozilla.org/Web/API/Performance#Browser_compatibility&quot;&gt;Browser Compatibility&lt;/a&gt; table, most of these interfaces are broadly implemented by desktop browsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07288271ebb8b8dcc25fdf6f89db1533261e0f71" translate="yes" xml:space="preserve">
          <source>As shown in the &lt;a href=&quot;performance&quot;&gt;&lt;code&gt;Performance&lt;/code&gt;&lt;/a&gt; interface's &lt;a href=&quot;https://developer.mozilla.org/Web/API/Performance#Browser_compatibility&quot;&gt;Browser Compatibility&lt;/a&gt; table, the &lt;code&gt;User Timing&lt;/code&gt; methods are broadly implemented by desktop and mobile browsers (the only exceptions are Desktop Safari and Mobile Safari, however &lt;a href=&quot;https://developer.apple.com/safari/technology-preview/release-notes/#r24&quot;&gt;the Safari Technology Preview 24 has support&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bb45b5014771384f2d9915daf3972c3296ec421" translate="yes" xml:space="preserve">
          <source>As shown in the &lt;a href=&quot;performanceframetiming&quot;&gt;&lt;code&gt;PerformanceFrameTiming&lt;/code&gt;&lt;/a&gt; interface's &lt;a href=&quot;https://developer.mozilla.org/Web/API/PerformanceFrameTiming#Browser_compatibility&quot;&gt;Browser Compatibility&lt;/a&gt; table, this interface has no implementations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a8a426bd04e48927593b5546de58b97d412c34b" translate="yes" xml:space="preserve">
          <source>As shown in the &lt;a href=&quot;performanceresourcetiming&quot;&gt;&lt;code&gt;PerformanceResourceTiming&lt;/code&gt;&lt;/a&gt; interface's &lt;a href=&quot;https://developer.mozilla.org/Web/API/PerformanceResourceTiming#Browser_compatibility&quot;&gt;Browser Compatibility&lt;/a&gt; table, most of these interfaces are broadly implemented by desktop browsers. However, note that some properties have little to no implementation so see each property's &quot;Browser compatibility&quot; section for more specific interoperability data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52872b14b5fe9df327e12b0077fd9ca5396b68d7" translate="yes" xml:space="preserve">
          <source>As soon as media is attached to the &lt;code&gt;RTCPeerConnection&lt;/code&gt;, a &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/notificationneeded&quot;&gt;notificationneeded&lt;/a&gt;&lt;/code&gt; event is triggered at the connection, so that ICE negotiation can be started.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="736561b7e490afca2e5cdf0c0cc527de3a91822e" translate="yes" xml:space="preserve">
          <source>As specified in &lt;a href=&quot;http://www.w3.org/TR/media-source/index.html#goals&quot;&gt;section 1.1 of the MSE spec: Goals&lt;/a&gt;, MSE is designed not to require support for any particular media format or codec. While this is true on paper, browser support varies for specific container/codec combinations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6141ac95efb14461a5d49bbd04a6f442b73740ba" translate="yes" xml:space="preserve">
          <source>As such, &lt;code&gt;RenderingContext&lt;/code&gt; is an implementation detail, and isn't something web developers directly use. There is no &lt;code&gt;RenderingContext&lt;/code&gt; interface, and there are no objects which implement type &lt;code&gt;RenderingContext&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b0ed8838f0185823a0affd7afa14689027000ac" translate="yes" xml:space="preserve">
          <source>As that doesn't hold true in cases like &lt;code&gt;Attr&lt;/code&gt; objects being returned by &lt;a href=&quot;document/evaluate&quot;&gt;&lt;code&gt;Document.evaluate&lt;/code&gt;&lt;/a&gt;, the DOM Living Standard reintroduced the property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df9eb4ddf2d36fb345705d5b66bdbb8adc4f1eae" translate="yes" xml:space="preserve">
          <source>As the &lt;a href=&quot;http://www.w3.org/TR/selection-api/#h_note_15&quot;&gt;Selection API specification notes&lt;/a&gt;, the Selection API was initially created by Netscape and used multiple ranges, for instance, to allow the user to select a column from a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table&quot;&gt;&lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;&lt;/a&gt;. However browsers other than Gecko did not implement multiple ranges, and the specification also requires the selection to always have a single range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4049cddf3214c703d08992fb239c40d61d8d53a" translate="yes" xml:space="preserve">
          <source>As the ICE agent performs negotiation of a &lt;a href=&quot;../rtcpeerconnection&quot;&gt;&lt;code&gt;RTCPeerConnection&lt;/code&gt;&lt;/a&gt;, it gathers and analyzes candidate configurations from each the two peers. As soon as it finds an acceptable matching pair of candidates, meeting the requirements for the connection, a &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/selectedcandidatepairchange&quot;&gt;selectedcandidatepairchange&lt;/a&gt;&lt;/code&gt; event is fired at the &lt;a href=&quot;../rtcicetransport&quot;&gt;&lt;code&gt;RTCIceTransport&lt;/code&gt;&lt;/a&gt;. From that time forward, the best matching pair of candidates will always be available by calling &lt;code&gt;getSelectedCandidatePair()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed64c70d3babc668b679bf59e5dd1643c9920b23" translate="yes" xml:space="preserve">
          <source>As the existing code allows the sending of arbitrary message types, no additional changes are required. Our clients can now send messages of unknown types to any specific user, letting them send signaling messages back and forth as desired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49290b6a0bccafd9756e0c7cad51b43eafbb3a2d" translate="yes" xml:space="preserve">
          <source>As the local cache is indexed by URL, this causes every request to be unique, thereby bypassing the cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cd3e759c9ac9acb5513c86a38a46ff54dae3c46" translate="yes" xml:space="preserve">
          <source>As the vector controls both the direction of travel and its velocity, the three parameters &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt; are expressed in &lt;em&gt;meters per second&lt;code&gt;.&lt;/code&gt;&lt;/em&gt; The default value of the velocity vector is &lt;code&gt;(0,&lt;/code&gt;&lt;code&gt;0,&lt;/code&gt;&lt;code&gt;0)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e5fa8e503a0b70f71d524910ac09966dd24863d" translate="yes" xml:space="preserve">
          <source>As usual, set the &lt;code&gt;text/plain&lt;/code&gt; type last as it is less specific than the uri type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7d0bcbf4a6d8292dbc68e42c5b45ef115ed89b9" translate="yes" xml:space="preserve">
          <source>As usual, we need a drawing context first. To draw the ball, we will create a &lt;code&gt;ball&lt;/code&gt; object which contains properties and a &lt;code&gt;draw()&lt;/code&gt; method to paint it on the canvas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03a5798d08d00d404c55b3b1df63c31947453819" translate="yes" xml:space="preserve">
          <source>As we finally release the &lt;code&gt;key 2&lt;/code&gt;, a &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/keyup&quot;&gt;keyup&lt;/a&gt;&lt;/code&gt; event is fired but the &lt;code&gt;key&lt;/code&gt; property will be set to the string value &lt;code&gt;&quot;2&quot;&lt;/code&gt; for both keyboard layouts because the modifier &lt;code&gt;shift&lt;/code&gt; key is no longer active.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab9e5df05ba8484f4411f2e603123a705263b3c9" translate="yes" xml:space="preserve">
          <source>As we finally release the &lt;code&gt;shift&lt;/code&gt; key, another &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/keyup&quot;&gt;keyup&lt;/a&gt;&lt;/code&gt; event is fired for it, and the key attribute value remains &lt;code&gt;&quot;Shift&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6e3c6998b87dfc88efd4284096a43aaba1506d5" translate="yes" xml:space="preserve">
          <source>As we have seen in the last example, there can be a series of paths and drawing commands to draw objects onto your canvas. To simplify the code and to improve performance, the &lt;a href=&quot;../../path2d&quot;&gt;&lt;code&gt;Path2D&lt;/code&gt;&lt;/a&gt; object, available in recent versions of browsers, lets you cache or record these drawing commands. You are able to play back your paths quickly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2574330708eabee3cb1e624211ede1fa72ff8317" translate="yes" xml:space="preserve">
          <source>As we release the &lt;code&gt;key 2&lt;/code&gt;, a &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/keyup&quot;&gt;keyup&lt;/a&gt;&lt;/code&gt; event is fired and the &lt;code&gt;key&lt;/code&gt; property will maintain the string values &lt;code&gt;&quot;@&quot;&lt;/code&gt; and &lt;code&gt;&quot;&quot;&quot;&lt;/code&gt; for the different keyboard layouts respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce4c344b58a4b8e17c35dec04faa7ddf403caf66" translate="yes" xml:space="preserve">
          <source>As we release the &lt;code&gt;shift&lt;/code&gt; key, a &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/keyup&quot;&gt;keyup&lt;/a&gt;&lt;/code&gt; event is fired for it, and the key attribute value remains &lt;code&gt;&quot;Shift&quot;&lt;/code&gt;. At this point, notice that the &lt;code&gt;key&lt;/code&gt; property value for the repeating keydown event of the &lt;code&gt;key 2&lt;/code&gt; key press is now &quot;2&quot; because the modifier &lt;code&gt;shift&lt;/code&gt; key is no longer active. The same goes for the &lt;a href=&quot;../inputevent/data&quot;&gt;&lt;code&gt;InputEvent.data&lt;/code&gt;&lt;/a&gt; property of the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/beforeinput&quot;&gt;beforeinput&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/input&quot;&gt;input&lt;/a&gt;&lt;/code&gt; events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a814a61fdb7f7c6dd4a0d17d392308d134a49f4" translate="yes" xml:space="preserve">
          <source>As web applications become more and more powerful, adding features such as audio and video manipulation, access to raw data using WebSockets, and so forth, it has become clear that there are times when it would be helpful for JavaScript code to be able to quickly and easily manipulate raw binary data. In the past, this had to be simulated by treating the raw data as a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String&quot;&gt;string&lt;/a&gt; and using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/charCodeAt&quot;&gt;&lt;code&gt;charCodeAt()&lt;/code&gt;&lt;/a&gt; method to read the bytes from the data buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e4aee3b2f64ed48e81e42c46a126441cae7de1b" translate="yes" xml:space="preserve">
          <source>As well as exchanging information about the media (discussed above in Offer/Answer and SDP), peers must exchange information about the network connection. This is known as an &lt;strong&gt;ICE candidate&lt;/strong&gt; and details the available methods the peer is able to communicate (directly or through a TURN server). Typically, each peer will propose its best candidates first, making their way down the line toward their worse candidates. Ideally, candidates are UDP (since it's faster, and media streams are able to recover from interruptions relatively easily), but the ICE standard does allow TCP candidates as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14892122c7c03c959a64fc677fd61411e478780a" translate="yes" xml:space="preserve">
          <source>As with &lt;a href=&quot;createobjectstore&quot;&gt;&lt;code&gt;IDBDatabase.createObjectStore&lt;/code&gt;&lt;/a&gt;, this method can be called &lt;em&gt;only&lt;/em&gt; within a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/IndexedDB/IDBTransaction#VERSION_CHANGE&quot;&gt;&lt;code&gt;versionchange&lt;/code&gt;&lt;/a&gt; transaction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="378dab4c87ff957ea9defdf2572be445ccf993e7" translate="yes" xml:space="preserve">
          <source>As with all drag-related events, the event's &lt;code&gt;&lt;a href=&quot;../datatransfer&quot;&gt;&lt;code&gt;dataTransfer&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; property will hold the data that is being dragged. The &lt;a href=&quot;../datatransfer/getdata&quot;&gt;&lt;code&gt;getData()&lt;/code&gt;&lt;/a&gt; method may be used to retrieve the data again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c04a2f3d5390f2e716cc7344b7e4ac771b3185a" translate="yes" xml:space="preserve">
          <source>As with any asynchronously-dispatched script (timeouts, user-generated events), it is not possible for the caller of &lt;code&gt;postMessage&lt;/code&gt; to detect when an event handler listening for events sent by &lt;code&gt;postMessage&lt;/code&gt; throws an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7425d0197389b142a4bc9095ee08897b79a386a8" translate="yes" xml:space="preserve">
          <source>As with everything, with great power comes great responsibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c5124678076352e4663599d62fca35a27875e5c" translate="yes" xml:space="preserve">
          <source>As with other links, the data for the &lt;code&gt;text/plain&lt;/code&gt; type should also contain the URL. However, a data URL is not usually as useful in a text context, so you may wish to exclude the &lt;code&gt;text/plain&lt;/code&gt; data in this situation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1da156924216b9e3a85b6cbfeede7e9d0340bea4" translate="yes" xml:space="preserve">
          <source>As with regular form data, you can append multiple values with the same name. For example (and being compatible with PHP's naming conventions by adding [] to the name):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="980610c968875affbf4435e998e86acf7543da44" translate="yes" xml:space="preserve">
          <source>As you can see there are no ways to pass the &lt;code&gt;this&lt;/code&gt; object to the callback function in the legacy JavaScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="127f8f63cc537aa96df57023280efb18429d4ab8" translate="yes" xml:space="preserve">
          <source>As you can see, the &lt;a href=&quot;../vrdisplayevent&quot;&gt;&lt;code&gt;event object&lt;/code&gt;&lt;/a&gt; provides two useful properties &amp;mdash; &lt;a href=&quot;../vrdisplayevent/display&quot;&gt;&lt;code&gt;VRDisplayEvent.display&lt;/code&gt;&lt;/a&gt;, which contains a reference to the &lt;a href=&quot;../vrdisplay&quot;&gt;&lt;code&gt;VRDisplay&lt;/code&gt;&lt;/a&gt; the event was fired in response to, and &lt;a href=&quot;../vrdisplayevent/reason&quot;&gt;&lt;code&gt;VRDisplayEvent.reason&lt;/code&gt;&lt;/a&gt;, which contains a human-readable reason why the event was fired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a0d6398eb2f6c5b42150576fae28d2e818c4f6c" translate="yes" xml:space="preserve">
          <source>As you can see, we're using a coordinate system of -1.0 to 1.0 for each axis. Why, you may ask, do we need to do any adjustments at all? This is simply because our context is not square. We're using a context that's 600 pixels wide and 460 tall. Each of those dimensions is mapped to the range -1.0 to 1.0. Since the two axes aren't the same length, if we don't adjust the values of one of the two axes, the square will get stretched out in one direction or the other. So we need to normalize these values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e188f4883d03757fe03270c8a220b335935b909" translate="yes" xml:space="preserve">
          <source>As you have seen above, &lt;a href=&quot;../response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; instances are returned when &lt;code&gt;fetch()&lt;/code&gt; promises are resolved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2be1ea99040276bc4c9a7a4ec8610d4e8dbb7da2" translate="yes" xml:space="preserve">
          <source>As you should be used to by now, each Web Audio API app starts with an audio context:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="624395d4c92cda461d51fe4d7a94cdf6f9f8826a" translate="yes" xml:space="preserve">
          <source>As you work with a lot of changing values within the Web Audio API and will want to provide users with control over these, the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/range&quot;&gt;&lt;code&gt;range input&lt;/code&gt;&lt;/a&gt; is often a good choice of control to use. It's a good option as you can set minimum and maximum values, as well as increments with the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-step&quot;&gt;&lt;code&gt;step&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e8d4ece0fd6dc3ff7deaa43485ccc5eac8706ab" translate="yes" xml:space="preserve">
          <source>As you'll have noticed when studying the &lt;code&gt;WritableStream()&lt;/code&gt; syntax skeleton, the &lt;code&gt;start()&lt;/code&gt;, &lt;code&gt;write()&lt;/code&gt;, and &lt;code&gt;close()&lt;/code&gt; methods can optionally have a &lt;code&gt;controller&lt;/code&gt; parameter passed to them. This contains an instance of the &lt;a href=&quot;../writablestreamdefaultcontroller&quot;&gt;&lt;code&gt;WritableStreamDefaultController&lt;/code&gt;&lt;/a&gt; interface, which can be used by the developer to further control the stream as required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80c8f5623fdc1080b9f8a441bbb09fe276881a21" translate="yes" xml:space="preserve">
          <source>As you'll see in the documentarion for &lt;code&gt;RTCRtpSynchronizationSource&lt;/code&gt;, it inherits the properties of &lt;a href=&quot;../rtcrtpcontributingsource&quot;&gt;&lt;code&gt;RTCRtpContributingSource&lt;/code&gt;&lt;/a&gt;, including &lt;a href=&quot;../rtcrtpcontributingsource/timestamp&quot;&gt;&lt;code&gt;timestamp&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../rtcrtpcontributingsource/source&quot;&gt;&lt;code&gt;source&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../rtcrtpcontributingsource/audiolevel&quot;&gt;&lt;code&gt;audioLevel&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="609669ae80dcd7e8580cd06a4edd5614c1eed240" translate="yes" xml:space="preserve">
          <source>As you've seen in the previous example, when joining two lines with the &lt;code&gt;miter&lt;/code&gt; option, the outside edges of the two joining lines are extended up to the point where they meet. For lines which are at large angles with each other, this point is not far from the inside connection point. However, as the angles between each line decreases, the distance (miter length) between these points increases exponentially.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a83ad18ac97d6a148ba182edba7c67085fc5fd3" translate="yes" xml:space="preserve">
          <source>Asks the user agent to place the specified element (and, by extension, its descendants) into full-screen mode, removing all of the browser's UI elements as well as all other applications from the screen. Returns a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt; which is resolved once full-screen mode has been activated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be3e4574d637986063ac58e54745cea480935cdc" translate="yes" xml:space="preserve">
          <source>Assembled together, you get this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbb67f76a80d1a709e6201e115dd307d30fb5477" translate="yes" xml:space="preserve">
          <source>Assembling the Animation from disparate pieces</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e03dc251be8fa0a9d0f75257a00fcb55f9bed839" translate="yes" xml:space="preserve">
          <source>Assertion</source>
          <target state="translated">Assertion</target>
        </trans-unit>
        <trans-unit id="eaeb4d235dc511b6c4dd10fe755f9a460b278b71" translate="yes" xml:space="preserve">
          <source>Assigning a value to &lt;code&gt;effectAllowed&lt;/code&gt; in events other than &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/dragstart&quot;&gt;dragstart&lt;/a&gt;&lt;/code&gt; has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1edfdf9bcc626ca85bdf3d0cfdb2066c786ce86b" translate="yes" xml:space="preserve">
          <source>Assigning any other value to &lt;code&gt;dropEffect&lt;/code&gt; has no effect and the old value is retained.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d0f5ce95363d9f7f0ca777c8a1c4202f7ac9cdc" translate="yes" xml:space="preserve">
          <source>Assigning any other value to &lt;code&gt;effectAllowed&lt;/code&gt; has no effect and the old value is retained.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="417f2ef9ad427ea699fd3970dc3d050ba8149011" translate="yes" xml:space="preserve">
          <source>Assigns binding points for active uniform blocks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5f3d8017fd0e7a7be9a17cf82abdecc70c8f922" translate="yes" xml:space="preserve">
          <source>Associated Web Audio API feature</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa3efe7357e94fd9eaa3c71df6e4f3588b9077ca" translate="yes" xml:space="preserve">
          <source>Associated constant</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d580f1ef585a1294932eea54b89309b65971bce" translate="yes" xml:space="preserve">
          <source>Associated with its &lt;a href=&quot;serviceworker&quot;&gt;&lt;code&gt;ServiceWorker&lt;/code&gt;&lt;/a&gt;'s state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5382dcd04d853c15e42bd2568447953df156ad1" translate="yes" xml:space="preserve">
          <source>Associated with the &lt;code&gt;&lt;a href=&quot;../globaleventhandlers/onscroll&quot;&gt;onscroll&lt;/a&gt;&lt;/code&gt; event, this equivalence can be useful to determine whether a user has read a text or not (see also the &lt;code&gt;&lt;a href=&quot;scrolltop&quot;&gt;element.scrollTop&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;clientheight&quot;&gt;element.clientHeight&lt;/a&gt;&lt;/code&gt; properties). For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="723fd5c02e1add8cf63437cfd0b06e1015519e49" translate="yes" xml:space="preserve">
          <source>Assume the following basic HTML:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01c717b2819d8a94d61c373082c7d966ebfb97af" translate="yes" xml:space="preserve">
          <source>Assume this basic HTML:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76eb0fc1d20e89e3422e5f0a809a99b431af723a" translate="yes" xml:space="preserve">
          <source>Assuming a frameset</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf2c0925c154f202a3d4189a230a42474253bad9" translate="yes" xml:space="preserve">
          <source>Assuming the &lt;code&gt;MediaRecorder&lt;/code&gt;'s &lt;a href=&quot;state&quot;&gt;&lt;code&gt;state&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;&quot;inactive&quot;&lt;/code&gt;, &lt;code&gt;start()&lt;/code&gt; sets the &lt;code&gt;state&lt;/code&gt; to &lt;code&gt;&quot;recording&quot;&lt;/code&gt;, then begins capturing media from the input stream. A &lt;code&gt;Blob&lt;/code&gt; is created and the data is collected in it until the time slice period elapses or the source media ends. Each time a &lt;code&gt;Blob&lt;/code&gt; is filled up to that point (the timeslice duration or the end-of-media, if no slice duration was provided), a &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/dataavailable&quot;&gt;dataavailable&lt;/a&gt;&lt;/code&gt; event is sent to the &lt;code&gt;MediaRecorder&lt;/code&gt; with the recorded data. If the source is still playing, a new &lt;code&gt;Blob&lt;/code&gt; is created and recording continues into that, and so forth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65ee8bb54f68f1363d911b769fa476c8d827a04d" translate="yes" xml:space="preserve">
          <source>Assuming the scenario mentioned before the code, the result would be HTML that looks like this being appended to the end of the document:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ed17c2eb3877708f652563f1dc2eb357b571bc8" translate="yes" xml:space="preserve">
          <source>Assuming your working directory (pwd) is the directory containing the tools, you'd run the following commands (shown with sample output):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0cbbe766b48dda81c5b499d4d1713a46174a7e8" translate="yes" xml:space="preserve">
          <source>Asynchronous &lt;code&gt;waitUntil&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="947a62304125b8f72456384668b3472b278af128" translate="yes" xml:space="preserve">
          <source>Asynchronous display of frames produced by an &lt;code&gt;OffscreenCanvas&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="915d2750221cf58652aa6fcd982057a633921f78" translate="yes" xml:space="preserve">
          <source>Asynchronous request</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45091f0d62f766848078beeaa249c2f24dfcad2c" translate="yes" xml:space="preserve">
          <source>Asynchronously asks the browser to make the element full-screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c2c789eb10c5385ec446e328b389b1a7a5d1cef" translate="yes" xml:space="preserve">
          <source>Asynchronously decodes audio file data contained in an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ArrayBuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt;. In this case, the ArrayBuffer is usually loaded from an &lt;a href=&quot;xmlhttprequest&quot;&gt;&lt;code&gt;XMLHttpRequest&lt;/code&gt;&lt;/a&gt;'s &lt;code&gt;response&lt;/code&gt; attribute after setting the &lt;code&gt;responseType&lt;/code&gt; to &lt;code&gt;arraybuffer&lt;/code&gt;. This method only works on complete files, not fragments of audio files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="181f7182e499bed922887a4e643d8a0044eee930" translate="yes" xml:space="preserve">
          <source>Asynchronously handling the file upload process</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1500c07a865b89566d5bbb669d8617406b4955c" translate="yes" xml:space="preserve">
          <source>At a minimum, one of &lt;code&gt;childList&lt;/code&gt;, &lt;code&gt;attributes&lt;/code&gt;, and/or &lt;code&gt;characterData&lt;/code&gt; must be &lt;code&gt;true&lt;/code&gt; when you call &lt;a href=&quot;mutationobserver/observe&quot;&gt;&lt;code&gt;observe()&lt;/code&gt;&lt;/a&gt;. Otherwise, a &lt;code&gt;TypeError&lt;/code&gt; exception will be thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4de584858fbea3c154ed081a43b7f5b6a2d7978e" translate="yes" xml:space="preserve">
          <source>At any point after the handshake, either the client or the server can choose to send a ping to the other party. When the ping is received, the recipient must send back a pong as soon as possible. You can use this to make sure that the client is still connected, for example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89d1d00563d1ab8fd282ca1980425d1d3d421515" translate="yes" xml:space="preserve">
          <source>At first sight a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas&quot;&gt;&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;&lt;/a&gt; looks like the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&lt;/a&gt; element, with the only clear difference being that it doesn't have the &lt;code&gt;src&lt;/code&gt; and &lt;code&gt;alt&lt;/code&gt; attributes. Indeed, the &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element has only two attributes, &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas#attr-width&quot;&gt;width&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas#attr-height&quot;&gt;height&lt;/a&gt;&lt;/code&gt;. These are both optional and can also be set using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/DOM&quot;&gt;DOM&lt;/a&gt;&lt;a href=&quot;../../htmlcanvaselement&quot;&gt;properties&lt;/a&gt;. When no &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attributes are specified, the canvas will initially be &lt;strong&gt;300 pixels&lt;/strong&gt; wide and &lt;strong&gt;150 pixels&lt;/strong&gt; high. The element can be sized arbitrarily by &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/CSS&quot;&gt;CSS&lt;/a&gt;, but during rendering the image is scaled to fit its layout size: if the CSS sizing doesn't respect the ratio of the initial canvas, it will appear distorted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9ac46c5c5a49b016a664e30170dbeed0bdcd981" translate="yes" xml:space="preserve">
          <source>At least 24 bits of the text in the &lt;code&gt;ufrag&lt;/code&gt; are required to be randomly selected by the ICE layer at the beginning of the ICE session. The specifics for which bits are random and what the remainder of the &lt;code&gt;ufrag&lt;/code&gt; text are are left up to the browser implementation to decide. For example, a browser might choose to always use a 24-character &lt;code&gt;ufrag&lt;/code&gt; in which bit 4 of each character is randomly selected between 0 and 1. Another example: it might take a user-defined string and append three 8-bit random bytes to the end. Or perhaps every character is entirely random.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13c9093d7e1c79cdf3fca1c8ceaeead4c119056f" translate="yes" xml:space="preserve">
          <source>At least as of Firefox 48, the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a91c4641e355f8d210bc88629e6d1b3de2d1e9ba" translate="yes" xml:space="preserve">
          <source>At least in Firefox, if a page defines a &lt;code&gt;console&lt;/code&gt; object, that object overrides the one built into Firefox.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a08033fbe21db19176b99534341889d906cee35" translate="yes" xml:space="preserve">
          <source>At least one of the ICE transports for the connection is in the &lt;code&gt;&quot;disconnected&quot;&lt;/code&gt; state and none of the other transports are in the state &lt;code&gt;&quot;failed&quot;&lt;/code&gt;, &lt;code&gt;&quot;connecting&quot;&lt;/code&gt;, or &lt;code&gt;&quot;checking&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f95ea07737b5e32fb8241f9629c8fd01b2ddba6" translate="yes" xml:space="preserve">
          <source>At least one of the connection's ICE transports (&lt;a href=&quot;../rtcicetransport&quot;&gt;&lt;code&gt;RTCIceTransport&lt;/code&gt;&lt;/a&gt;s or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/RTCDtlsTransport&quot;&gt;&lt;code&gt;RTCDtlsTransport&lt;/code&gt;&lt;/a&gt;s) are in the &lt;code&gt;&quot;new&quot;&lt;/code&gt; state, and none of them are in one of the following states: &lt;code&gt;&quot;connecting&quot;&lt;/code&gt;, &lt;code&gt;&quot;checking&quot;&lt;/code&gt;, &lt;code&gt;&quot;failed&quot;&lt;/code&gt;, or &lt;code&gt;&quot;disconnected&quot;&lt;/code&gt;, &lt;em&gt;or&lt;/em&gt; all of the connection's transports are in the &lt;code&gt;&quot;closed&quot;&lt;/code&gt; state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="092849b8ac0458d2ed6da9a2a1879dbe5cf3f569" translate="yes" xml:space="preserve">
          <source>At least one of the connection's ICE transports (&lt;a href=&quot;rtcicetransport&quot;&gt;&lt;code&gt;RTCIceTransport&lt;/code&gt;&lt;/a&gt;s or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/RTCDtlsTransport&quot;&gt;&lt;code&gt;RTCDtlsTransport&lt;/code&gt;&lt;/a&gt;s) are in the &lt;code&gt;&quot;new&quot;&lt;/code&gt; state, and none of them are in one of the following states: &lt;code&gt;&quot;connecting&quot;&lt;/code&gt;, &lt;code&gt;&quot;checking&quot;&lt;/code&gt;, &lt;code&gt;&quot;failed&quot;&lt;/code&gt;, or &lt;code&gt;&quot;disconnected&quot;&lt;/code&gt;, &lt;em&gt;or&lt;/em&gt; all of the connection's transports are in the &lt;code&gt;&quot;closed&quot;&lt;/code&gt; state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fe74af0f9f9eab8c32504a7bb5b084a4aa2d268" translate="yes" xml:space="preserve">
          <source>At least one remote candidate has been received, and the &lt;code&gt;RTCIceTransport&lt;/code&gt; has begun examining pairings of remote and local candidates in order to attempt to identify viable pairs that could be used to establish a connection. Keep in mind that gathering of local candidates may still be underway, and, similarly, the remote device also may still be gathering candidates of its own.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f56dc5faf0f9224efc5ae47015e4a5d800172056" translate="yes" xml:space="preserve">
          <source>At least one space</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f6df8e9a9206bd45d56bedc97bd113df844b362" translate="yes" xml:space="preserve">
          <source>At least with the addition of the abort notifications and &lt;a href=&quot;../idbdatabase/onclose&quot;&gt;&lt;code&gt;IDBDatabase.onclose&lt;/code&gt;&lt;/a&gt;, you can know when this has happened.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="689f5d80b77a950e04123dc1fd23abb9c5138e29" translate="yes" xml:space="preserve">
          <source>At that point, &lt;a href=&quot;currentdirection&quot;&gt;&lt;code&gt;currentDirection&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;null&lt;/code&gt; and a &lt;code&gt;negotiationneeded&lt;/code&gt; event is scheduled to be sent to the &lt;code&gt;RTCPeerConnection&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="775de6aedb723c3d9d0a77093ba4a1502d86ed94" translate="yes" xml:space="preserve">
          <source>At the end of a drag operation, the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/dragend&quot;&gt;dragend&lt;/a&gt;&lt;/code&gt; event fires at the &lt;em&gt;source&lt;/em&gt; element - the element that was the target of the drag start. This event fires whether the drag completed or was canceled. The &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/dragend&quot;&gt;dragend&lt;/a&gt;&lt;/code&gt; event handler can check the value of the &lt;a href=&quot;datatransfer/dropeffect&quot;&gt;&lt;code&gt;dropEffect&lt;/code&gt;&lt;/a&gt; property to determine if the drag operation succeeded or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8aaef50aede3f22764bbace6913e66baebe4d68" translate="yes" xml:space="preserve">
          <source>At the end of our example we first include the &lt;code&gt;removeGamepads()&lt;/code&gt; function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8981cf581f5d50fce44f60587ce71a4d9e2892c4" translate="yes" xml:space="preserve">
          <source>At the end of sample1 there is a call to setAttribute on the mytable object. This call was used to set the border property of the table. To retrieve the value of the attribute, use the getAttribute method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8f73ae55498055d4714abf8b54c0e4a38b072d0" translate="yes" xml:space="preserve">
          <source>At the end of the start function there is a new line of code. The table's border property was set using another DOM method, &lt;code&gt;setAttribute()&lt;/code&gt;. setAttribute has two arguments: the attribute name and the attribute value. You can set any attribute of any element using the setAttribute method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86d94fc2d01cf74f3a75f8185c10fad51faa5c85" translate="yes" xml:space="preserve">
          <source>At the end of this section of code, we invoke the &lt;code&gt;draw()&lt;/code&gt; function to start off the whole process:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17deb240c395c55b17602473715addba14f7d759" translate="yes" xml:space="preserve">
          <source>At the heart of Fetch are the Interface abstractions of HTTP &lt;a href=&quot;../request&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt;s, &lt;a href=&quot;../response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt;s, &lt;a href=&quot;../headers&quot;&gt;&lt;code&gt;Headers&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../body&quot;&gt;&lt;code&gt;Body&lt;/code&gt;&lt;/a&gt; payloads, along with a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch&quot;&gt;&lt;code&gt;global fetch&lt;/code&gt;&lt;/a&gt; method for initiating asynchronous resource requests. Because the main components of HTTP are abstracted as JavaScript objects, it is easy for other APIs to make use of such functionality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e293bf42ded01f169f86ccea1f63fcba8f30b886" translate="yes" xml:space="preserve">
          <source>At the time this event is received, the &lt;a href=&quot;../rtcdatachannel&quot;&gt;&lt;code&gt;RTCDataChannel&lt;/code&gt;&lt;/a&gt; it indicates may not yet actually be open. Be sure to wait for the &lt;code&gt;&quot;open&quot;&lt;/code&gt; event to be fired on the new &lt;code&gt;RTCDataChannel&lt;/code&gt; before using it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ded7d48480032625f4a3230bf248d8a36ade507d" translate="yes" xml:space="preserve">
          <source>At this point it would be beneficial to take a step back and look at and label the various coordinate systems. First off the cube's vertices are in model space. To move the model around the scene these vertices need to be converted into world space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c713c81ec573fe03aa257bede3f131c84ead21e6" translate="yes" xml:space="preserve">
          <source>At this point the w value of the transformed point is still 1.0. The cube still doesn't have any perspective. The next section will take this setup and modify the w values to provide some perspective.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="697e8e4c0cb0d8c11456c0b70c3340ae15703137" translate="yes" xml:space="preserve">
          <source>At this point we create another audio context, create an &lt;a href=&quot;../audiobuffersourcenode&quot;&gt;&lt;code&gt;AudioBufferSourceNode&lt;/code&gt;&lt;/a&gt; inside it, and set its buffer to be equal to the promise &lt;code&gt;AudioBuffer&lt;/code&gt;. This is then played as part of a simple standard audio graph.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc698d8b3b68338a399078a6f256c83822e061ad" translate="yes" xml:space="preserve">
          <source>At this point we create another audio context, create an &lt;a href=&quot;audiobuffersourcenode&quot;&gt;&lt;code&gt;AudioBufferSourceNode&lt;/code&gt;&lt;/a&gt; inside it, and set its buffer to be equal to the promise &lt;code&gt;AudioBuffer&lt;/code&gt;. This is then played as part of a simple standard audio graph.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f7c4e670b094b00ef9254bdc31cb5062bd0131c" translate="yes" xml:space="preserve">
          <source>At this point, let's look at how the WebVR parts of the code work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef632eec21188c676db6d89e2e2166c1e1f59551" translate="yes" xml:space="preserve">
          <source>At this point, the frame has been drawn. All that's left to do is to schedule to draw the next one. That's done here by calling &lt;a href=&quot;../window/requestanimationframe&quot;&gt;&lt;code&gt;requestAnimationFrame()&lt;/code&gt;&lt;/a&gt;, which asks that a callback function be executed the next time the browser is ready to update the screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a588ca9262f4fba779190550faeb3962f9d5dbb5" translate="yes" xml:space="preserve">
          <source>At this point, the rotating cube should be good to go.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="749d10f1f66623afe223d94732b4ff754b4581b4" translate="yes" xml:space="preserve">
          <source>At this point, the texture is loaded and ready to use. But before we can use it, we need to establish the mapping of the texture coordinates to the vertices of the faces of our cube. This replaces all the previously existing code for configuring colors for each of the cube's faces in &lt;code&gt;initBuffers()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cde062b0446496fa134d0071e410c173c41f161" translate="yes" xml:space="preserve">
          <source>At this point, the two participants know which codecs and video parameters are to be used for this call. They still don't know how to transmit the media data itself though. This is where &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/ICE&quot;&gt;Interactive Connectivity Establishment (ICE)&lt;/a&gt; comes in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08aaa54fcc40ba9d84e8d1752b8f2393dfc4ca29" translate="yes" xml:space="preserve">
          <source>At this point, we now have an animated cube rotating, its six faces rather vividly colored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8be98af46fb601945ec98d1cfc047b1440607fa6" translate="yes" xml:space="preserve">
          <source>At this point, we've seen all the code required to access the VR hardware, request that we present our scene to the hardware, and start running the rending loop. Let's now look at the code for the rendering loop, and explain how the WebVR-specific parts of it work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c7b464ca4b09cf3c582dbe83850804ca9bd91e8" translate="yes" xml:space="preserve">
          <source>At this point, you have enough code that the WebGL context should successfully initialize, and you should wind up with a big black, empty box, ready and waiting to receive content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="395448ba2b1f42ec1e953d187cdb9679d9abcd5c" translate="yes" xml:space="preserve">
          <source>At this point, you might want to configure the device capabilities before capturing an image. You can do this by calling &lt;a href=&quot;mediastreamtrack/applyconstraints&quot;&gt;&lt;code&gt;applyConstraints()&lt;/code&gt;&lt;/a&gt; on the track object before doing anything else.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9ecbdf42d7087f6e1cee1241bf0efb5c785c786" translate="yes" xml:space="preserve">
          <source>At this point, your service worker will observe the following lifecycle:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26e6010dba3252d5882b23b08c47ba4265c3ca4b" translate="yes" xml:space="preserve">
          <source>At this time, no major browser supports &lt;code&gt;animationcancel&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="886245c19af49850f43b6992b675eb85274d59b4" translate="yes" xml:space="preserve">
          <source>Attaches a &lt;code&gt;WebGLRenderingBuffer&lt;/code&gt; object to a &lt;code&gt;WebGLFrameBuffer&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4de3b5ea25a8dacd3fc6554082d2476af6c1ce9" translate="yes" xml:space="preserve">
          <source>Attaches a &lt;code&gt;WebGLShader&lt;/code&gt; to a &lt;code&gt;WebGLProgram&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6247d4c0a96e66fb2907913bb6558ca83f5925f" translate="yes" xml:space="preserve">
          <source>Attaches a single layer of a texture to a framebuffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dde7fc72e4be889b4eedf0554411a73c0639e38" translate="yes" xml:space="preserve">
          <source>Attaches a textures image to a &lt;code&gt;WebGLFrameBuffer&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bbb7bed763b54c11e7441632ccbd0c0cdab9c5e" translate="yes" xml:space="preserve">
          <source>Attaching a reader</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a98f07091a58d0c4ca99f34f17ef2d3e36b053f" translate="yes" xml:space="preserve">
          <source>Attatches a shadow DOM tree to the specified element and returns a reference to its &lt;a href=&quot;shadowroot&quot;&gt;&lt;code&gt;ShadowRoot&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a17b2da6ced3fe93fe5d10986326b7a298b44e4" translate="yes" xml:space="preserve">
          <source>Attempting to add the candidate fails for any reason.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75eb5a9c92c846ec68c294289ad8f3c86142c8a7" translate="yes" xml:space="preserve">
          <source>Attempting to clone DOM nodes will likewise throw a &lt;code&gt;DATA_CLONE_ERR&lt;/code&gt; exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3a930873ffcef08de0d2c63963c56c9cd68f472" translate="yes" xml:space="preserve">
          <source>Attempts to preserve the selection. This is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54b77dc42332e92f215162ec0e252d2afb7fd092" translate="yes" xml:space="preserve">
          <source>Attempts to replace the track currently being sent by the &lt;code&gt;RTCRtpSender&lt;/code&gt; with another track, without performing renegotiation. This method can be used, for example, to toggle between the front- and rear-facing cameras on a device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5e64cdef8043cef4495ff8df0230837d109578e" translate="yes" xml:space="preserve">
          <source>Attempts to set the value of &lt;code&gt;responseType&lt;/code&gt; to &lt;code&gt;&quot;document&quot;&lt;/code&gt; are ignored in a &lt;a href=&quot;../worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04fd7b048c83cf355c03f0e1ef41330717e158d9" translate="yes" xml:space="preserve">
          <source>Attestation</source>
          <target state="translated">Attestation</target>
        </trans-unit>
        <trans-unit id="bc9a688c50df2134fab59236d1d7d6111fd51b6d" translate="yes" xml:space="preserve">
          <source>Attr</source>
          <target state="translated">Attr</target>
        </trans-unit>
        <trans-unit id="f5724e8dbe75ab69bffc4c691d77904bf902d0d6" translate="yes" xml:space="preserve">
          <source>Attr.localName</source>
          <target state="translated">Attr.localName</target>
        </trans-unit>
        <trans-unit id="10c0b9c07b17de29ebb946f78b04bb9e08ce37e9" translate="yes" xml:space="preserve">
          <source>Attr.namespaceURI</source>
          <target state="translated">Attr.namespaceURI</target>
        </trans-unit>
        <trans-unit id="95a93392ab9628aca8f27a957a2587e12140de2f" translate="yes" xml:space="preserve">
          <source>Attr.prefix</source>
          <target state="translated">Attr.prefix</target>
        </trans-unit>
        <trans-unit id="a086d942884a301b827479029ba19c2746237425" translate="yes" xml:space="preserve">
          <source>Attribute</source>
          <target state="translated">Attribute</target>
        </trans-unit>
        <trans-unit id="a5b6872cf5ea44ca7a237dae99c658b80ed4674c" translate="yes" xml:space="preserve">
          <source>Attribute and Uniform Locations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d03457aba5b9a9c24cc0acf3efb3013c11fb41b" translate="yes" xml:space="preserve">
          <source>Attribute index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6652617f2c799eb11ee727b16c5646c48af6905" translate="yes" xml:space="preserve">
          <source>Attributes</source>
          <target state="translated">Attributes</target>
        </trans-unit>
        <trans-unit id="68b7d38fb3fd8c3afadda3b47ade3100ca7b69ad" translate="yes" xml:space="preserve">
          <source>Attributes can also be set and read using the object-properties bracket-syntax, as in &lt;em&gt;element.&lt;/em&gt;dataset[&lt;em&gt;keyname&lt;/em&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3ba2c2e8a4f5a0fd7f91f301c63f4c1778757cc" translate="yes" xml:space="preserve">
          <source>Attributes can be set and read by using the camelCase name (the key) like an object property of the dataset, as in &lt;em&gt;element.&lt;/em&gt;dataset.&lt;em&gt;keyname&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e81e48a5ff29cff7cb5f4d2b8a28c0aebbff320" translate="yes" xml:space="preserve">
          <source>Attributes may be matrices, in which case columns of the matrix must be loaded into successive vertex attribute slots.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acdac205f5e24cb75113c4b281a2c13f08b75159" translate="yes" xml:space="preserve">
          <source>Audio</source>
          <target state="translated">Audio</target>
        </trans-unit>
        <trans-unit id="3e8682e00c9a20507edb3cd145cfd5d1e1cbee22" translate="yes" xml:space="preserve">
          <source>Audio Channels API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c179fc68e5a2caea7877726f5b28a2c95550921" translate="yes" xml:space="preserve">
          <source>Audio Output Devices API&lt;br/&gt;&lt;small&gt;The definition of 'sinkId' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb8045debc5e100a160bc423106eb8891bc8407c" translate="yes" xml:space="preserve">
          <source>Audio buffers: frames, samples and channels</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97ce21b5984d793d2ee3c7290ef46da0326f50f5" translate="yes" xml:space="preserve">
          <source>Audio capture failed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a3b3b999b910f367531590e1c3a820ad821313d" translate="yes" xml:space="preserve">
          <source>Audio channels</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2d488ba9b806f7af99a955b96e98e9cee248274" translate="yes" xml:space="preserve">
          <source>Audio context</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93d8d2765e42601f85f25c139f4a12ed8a640c4f" translate="yes" xml:space="preserve">
          <source>Audio data: what's in a sample</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9394fdac05a0d9ad05d29abb17763c8aef8664fb" translate="yes" xml:space="preserve">
          <source>Audio graphs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8ad2f124a5d53206d0e212e4c0e74b9b7f4a2c3" translate="yes" xml:space="preserve">
          <source>Audio nodes are linked into chains and simple webs by their inputs and outputs. They typically start with one or more sources. Sources provide arrays of sound intensities (samples) at very small timeslices, often tens of thousands of them per second. These could be either computed mathematically (such as &lt;a href=&quot;oscillatornode&quot;&gt;&lt;code&gt;OscillatorNode&lt;/code&gt;&lt;/a&gt;), or they can be recordings from sound/video files (like &lt;a href=&quot;audiobuffersourcenode&quot;&gt;&lt;code&gt;AudioBufferSourceNode&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;mediaelementaudiosourcenode&quot;&gt;&lt;code&gt;MediaElementAudioSourceNode&lt;/code&gt;&lt;/a&gt;) and audio streams (&lt;a href=&quot;mediastreamaudiosourcenode&quot;&gt;&lt;code&gt;MediaStreamAudioSourceNode&lt;/code&gt;&lt;/a&gt;). In fact, sound files are just recordings of sound intensities themselves, which come in from microphones or electric instruments, and get mixed down into a single, complicated wave.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="878956691ad1c9788576d8c4f28d9dc6838e1dc5" translate="yes" xml:space="preserve">
          <source>Audio nodes are linked via their inputs and outputs, forming a chain that starts with one or more sources, goes through one or more nodes, then ends up at a destination. Although, you don't have to provide a destination if you, say, just want to visualize some audio data. A simple, typical workflow for web audio would look something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57f2d8594e21f612f8d81c078b1143f89bd50a5f" translate="yes" xml:space="preserve">
          <source>Audio processing in JavaScript</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a43c2ce7cabdc131178df8a0ff8e7a5f832bb8e" translate="yes" xml:space="preserve">
          <source>Audio sources can be obtained in a number of ways:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6060c86cc814daa5a2e453d05667d96d583dfe55" translate="yes" xml:space="preserve">
          <source>Audio spatialization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdb16abf82313446a159019d496b1ebab0d27fb5" translate="yes" xml:space="preserve">
          <source>Audio track kind strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a88c8706828f0d9b4730f9d12adb5b29730d283" translate="yes" xml:space="preserve">
          <source>AudioBuffer</source>
          <target state="translated">AudioBuffer</target>
        </trans-unit>
        <trans-unit id="f696159d30d32cdeb3aaedf1cec0d3c79a1c7d6c" translate="yes" xml:space="preserve">
          <source>AudioBuffer.constructor</source>
          <target state="translated">AudioBuffer.constructor</target>
        </trans-unit>
        <trans-unit id="cd8f4877285b7f29158d6fdcd2aa34081a6ed911" translate="yes" xml:space="preserve">
          <source>AudioBuffer.copyFromChannel</source>
          <target state="translated">AudioBuffer.copyFromChannel</target>
        </trans-unit>
        <trans-unit id="d28a1be28c8e6aa300290ec041ac55d63eabc7a6" translate="yes" xml:space="preserve">
          <source>AudioBuffer.copyToChannel</source>
          <target state="translated">AudioBuffer.copyToChannel</target>
        </trans-unit>
        <trans-unit id="cdff60cb94824985349e2df3f97e989e87054ea2" translate="yes" xml:space="preserve">
          <source>AudioBuffer.duration</source>
          <target state="translated">AudioBuffer.duration</target>
        </trans-unit>
        <trans-unit id="7c0581dac38024c3d292967f6f0d66b402d5d99f" translate="yes" xml:space="preserve">
          <source>AudioBuffer.getChannelData</source>
          <target state="translated">AudioBuffer.getChannelData</target>
        </trans-unit>
        <trans-unit id="e2a3110266b562b7c6335c802db3fd33df4d9f0f" translate="yes" xml:space="preserve">
          <source>AudioBuffer.length</source>
          <target state="translated">AudioBuffer.length</target>
        </trans-unit>
        <trans-unit id="731bf2fbe95e2324f11c4b9c9d3844cd66158996" translate="yes" xml:space="preserve">
          <source>AudioBuffer.numberOfChannels</source>
          <target state="translated">AudioBuffer.numberOfChannels</target>
        </trans-unit>
        <trans-unit id="ee72410697b88f7b5da7ead28bbe21bef9eefe86" translate="yes" xml:space="preserve">
          <source>AudioBuffer.sampleRate</source>
          <target state="translated">AudioBuffer.sampleRate</target>
        </trans-unit>
        <trans-unit id="07b612c3538a280bb381e37ff80e9b0917db8f90" translate="yes" xml:space="preserve">
          <source>AudioBufferSourceNode</source>
          <target state="translated">AudioBufferSourceNode</target>
        </trans-unit>
        <trans-unit id="2966ae0b548e7b4eb2a4e58ce94ad7853d7310ba" translate="yes" xml:space="preserve">
          <source>AudioBufferSourceNode.buffer</source>
          <target state="translated">AudioBufferSourceNode.buffer</target>
        </trans-unit>
        <trans-unit id="3a27b4855b6735a681f20ecfb2c21d341f3929fe" translate="yes" xml:space="preserve">
          <source>AudioBufferSourceNode.constructor</source>
          <target state="translated">AudioBufferSourceNode.constructor</target>
        </trans-unit>
        <trans-unit id="6833359bea44edeef871eddc4f2b0dfe852b0e8d" translate="yes" xml:space="preserve">
          <source>AudioBufferSourceNode.detune</source>
          <target state="translated">AudioBufferSourceNode.detune</target>
        </trans-unit>
        <trans-unit id="01ec9c5f8658b7b86463ca1ca9d3e1dc0d4f49b9" translate="yes" xml:space="preserve">
          <source>AudioBufferSourceNode.loop</source>
          <target state="translated">AudioBufferSourceNode.loop</target>
        </trans-unit>
        <trans-unit id="9ace8387f7e4a19dd808917deb7af993320535d0" translate="yes" xml:space="preserve">
          <source>AudioBufferSourceNode.loopEnd</source>
          <target state="translated">AudioBufferSourceNode.loopEnd</target>
        </trans-unit>
        <trans-unit id="7218800ce43bcdf4831b5d685c5846e04e122c6d" translate="yes" xml:space="preserve">
          <source>AudioBufferSourceNode.loopStart</source>
          <target state="translated">AudioBufferSourceNode.loopStart</target>
        </trans-unit>
        <trans-unit id="8590a681b5a84cf3987389bb9bc2452c39e14dcb" translate="yes" xml:space="preserve">
          <source>AudioBufferSourceNode.playbackRate</source>
          <target state="translated">AudioBufferSourceNode.playbackRate</target>
        </trans-unit>
        <trans-unit id="07009b818c9b184cf2b9e952b1ed29d17dd23b17" translate="yes" xml:space="preserve">
          <source>AudioBufferSourceNode.start</source>
          <target state="translated">AudioBufferSourceNode.start</target>
        </trans-unit>
        <trans-unit id="1bf94f95ffa0d3a5dd5f34c93ba3cfc636df0484" translate="yes" xml:space="preserve">
          <source>AudioContext</source>
          <target state="translated">AudioContext</target>
        </trans-unit>
        <trans-unit id="b42a7824815afc2a3c0dce3a8d7a8a422cd5e0a5" translate="yes" xml:space="preserve">
          <source>AudioContext.baseLatency</source>
          <target state="translated">AudioContext.baseLatency</target>
        </trans-unit>
        <trans-unit id="3b9cee2a72f23f59c3cf261ef9c6b9e320c0b28a" translate="yes" xml:space="preserve">
          <source>AudioContext.close</source>
          <target state="translated">AudioContext.close</target>
        </trans-unit>
        <trans-unit id="b683c3292a233deace88eef9f9b7090f928e9eb2" translate="yes" xml:space="preserve">
          <source>AudioContext.constructor</source>
          <target state="translated">AudioContext.constructor</target>
        </trans-unit>
        <trans-unit id="e1a78d9150ebf389645920c35ec28f6cd58c9453" translate="yes" xml:space="preserve">
          <source>AudioContext.createJavaScriptNode</source>
          <target state="translated">AudioContext.createJavaScriptNode</target>
        </trans-unit>
        <trans-unit id="7a07bfbac6c9e4c8e5a9af154c1ac56a15477a19" translate="yes" xml:space="preserve">
          <source>AudioContext.createMediaElementSource</source>
          <target state="translated">AudioContext.createMediaElementSource</target>
        </trans-unit>
        <trans-unit id="c85a248c015712971152c7fdfc093a56abf5e72c" translate="yes" xml:space="preserve">
          <source>AudioContext.createMediaStreamDestination</source>
          <target state="translated">AudioContext.createMediaStreamDestination</target>
        </trans-unit>
        <trans-unit id="b21f42626cfddf6e9585ea4563e9ce34d130a955" translate="yes" xml:space="preserve">
          <source>AudioContext.createMediaStreamTrackSource</source>
          <target state="translated">AudioContext.createMediaStreamTrackSource</target>
        </trans-unit>
        <trans-unit id="0de9b8858c1e611626c5c78d2c0144063ae3d2e6" translate="yes" xml:space="preserve">
          <source>AudioContext.createPeriodicWave</source>
          <target state="translated">AudioContext.createPeriodicWave</target>
        </trans-unit>
        <trans-unit id="d18f0650f115a424923a960e6841f24292317fe8" translate="yes" xml:space="preserve">
          <source>AudioContext.createWaveTable</source>
          <target state="translated">AudioContext.createWaveTable</target>
        </trans-unit>
        <trans-unit id="1be857a23657296cfa393fe0caa9e2c696f671d7" translate="yes" xml:space="preserve">
          <source>AudioContext.getOutputTimestamp</source>
          <target state="translated">AudioContext.getOutputTimestamp</target>
        </trans-unit>
        <trans-unit id="f435ef6b97ddb42c93e562de3d5d821b33b0b659" translate="yes" xml:space="preserve">
          <source>AudioContext.outputLatency</source>
          <target state="translated">AudioContext.outputLatency</target>
        </trans-unit>
        <trans-unit id="0b93411ef974f389a14467042653a3163347a372" translate="yes" xml:space="preserve">
          <source>AudioContext.suspend</source>
          <target state="translated">AudioContext.suspend</target>
        </trans-unit>
        <trans-unit id="82cb2a1a752771cee081b0b1141477f679777870" translate="yes" xml:space="preserve">
          <source>AudioContextLatencyCategory</source>
          <target state="translated">AudioContextLatencyCategory</target>
        </trans-unit>
        <trans-unit id="7ef46de9fadb0bcf3d6c76a21cb192cc22b1d32b" translate="yes" xml:space="preserve">
          <source>AudioContextOptions</source>
          <target state="translated">AudioContextOptions</target>
        </trans-unit>
        <trans-unit id="813c9b24bdb885c694f78dae1c43a6404306125c" translate="yes" xml:space="preserve">
          <source>AudioContextOptions.latencyHint</source>
          <target state="translated">AudioContextOptions.latencyHint</target>
        </trans-unit>
        <trans-unit id="c4810c8f2e5f7651af4a7b675bded7bb4449d032" translate="yes" xml:space="preserve">
          <source>AudioContextOptions.sampleRate</source>
          <target state="translated">AudioContextOptions.sampleRate</target>
        </trans-unit>
        <trans-unit id="b5d73e84f0169bf722f27535ed78477e49237dd9" translate="yes" xml:space="preserve">
          <source>AudioDestinationNode</source>
          <target state="translated">AudioDestinationNode</target>
        </trans-unit>
        <trans-unit id="954d6f4724f3468972dc48ef77964ba496023700" translate="yes" xml:space="preserve">
          <source>AudioDestinationNode.maxChannelCount</source>
          <target state="translated">AudioDestinationNode.maxChannelCount</target>
        </trans-unit>
        <trans-unit id="0689a0f537ec461496c6e81d6c9c8802a7c103c9" translate="yes" xml:space="preserve">
          <source>AudioListener</source>
          <target state="translated">AudioListener</target>
        </trans-unit>
        <trans-unit id="0039870b936feb1519d851896fc941ff13722e04" translate="yes" xml:space="preserve">
          <source>AudioListener.forwardX</source>
          <target state="translated">AudioListener.forwardX</target>
        </trans-unit>
        <trans-unit id="704130b32b5ee48e3d35df56b15f6efcf48865ea" translate="yes" xml:space="preserve">
          <source>AudioListener.forwardY</source>
          <target state="translated">AudioListener.forwardY</target>
        </trans-unit>
        <trans-unit id="54925cb491c46460370b4d0c888b99dd620a34a1" translate="yes" xml:space="preserve">
          <source>AudioListener.forwardZ</source>
          <target state="translated">AudioListener.forwardZ</target>
        </trans-unit>
        <trans-unit id="3cd626ac6844be35826b31b36a27242ae87bfedb" translate="yes" xml:space="preserve">
          <source>AudioListener.positionX</source>
          <target state="translated">AudioListener.positionX</target>
        </trans-unit>
        <trans-unit id="01a86b2c7fcb571f87f3db71364cb55407f41fe9" translate="yes" xml:space="preserve">
          <source>AudioListener.positionY</source>
          <target state="translated">AudioListener.positionY</target>
        </trans-unit>
        <trans-unit id="85fd37e7e71d60f1083f0bf36eaa79b0c0764dc6" translate="yes" xml:space="preserve">
          <source>AudioListener.positionZ</source>
          <target state="translated">AudioListener.positionZ</target>
        </trans-unit>
        <trans-unit id="b2bc97f68f0190701b5def26ac165a3e043856f6" translate="yes" xml:space="preserve">
          <source>AudioListener.setOrientation</source>
          <target state="translated">AudioListener.setOrientation</target>
        </trans-unit>
        <trans-unit id="31b620daf3f85a021a367328e21c13bf0a8e5da7" translate="yes" xml:space="preserve">
          <source>AudioListener.setPosition</source>
          <target state="translated">AudioListener.setPosition</target>
        </trans-unit>
        <trans-unit id="412e8a9a4426951c7978ff95669c88d2b103a2a7" translate="yes" xml:space="preserve">
          <source>AudioListener.upX</source>
          <target state="translated">AudioListener.upX</target>
        </trans-unit>
        <trans-unit id="333e634b27ea5746976caf30db76b6c0ef94a2ba" translate="yes" xml:space="preserve">
          <source>AudioListener.upY</source>
          <target state="translated">AudioListener.upY</target>
        </trans-unit>
        <trans-unit id="02723c6c8289ec1e9053bafab554d8d84db6a73c" translate="yes" xml:space="preserve">
          <source>AudioListener.upZ</source>
          <target state="translated">AudioListener.upZ</target>
        </trans-unit>
        <trans-unit id="e235f61a0f694cff02f347f2bc0a1f6c1340269a" translate="yes" xml:space="preserve">
          <source>AudioNode</source>
          <target state="translated">AudioNode</target>
        </trans-unit>
        <trans-unit id="eaca591f9096ab3cc6920ce39078913c1954332e" translate="yes" xml:space="preserve">
          <source>AudioNode.channelCount</source>
          <target state="translated">AudioNode.channelCount</target>
        </trans-unit>
        <trans-unit id="6e1024370ff10923a585ac6ad45d5f1385d1c7bb" translate="yes" xml:space="preserve">
          <source>AudioNode.channelCountMode</source>
          <target state="translated">AudioNode.channelCountMode</target>
        </trans-unit>
        <trans-unit id="a46eab58a7d9212b25474a0c07f0f37555713fed" translate="yes" xml:space="preserve">
          <source>AudioNode.channelInterpretation</source>
          <target state="translated">AudioNode.channelInterpretation</target>
        </trans-unit>
        <trans-unit id="30e898da4a9f851eae5bf9f598e44155d58c27c0" translate="yes" xml:space="preserve">
          <source>AudioNode.connect</source>
          <target state="translated">AudioNode.connect</target>
        </trans-unit>
        <trans-unit id="a3e7771627c636cd0719e2fdc734192811372caf" translate="yes" xml:space="preserve">
          <source>AudioNode.context</source>
          <target state="translated">AudioNode.context</target>
        </trans-unit>
        <trans-unit id="220414713504c62d9adb554c61fa5fa50eb56159" translate="yes" xml:space="preserve">
          <source>AudioNode.disconnect</source>
          <target state="translated">AudioNode.disconnect</target>
        </trans-unit>
        <trans-unit id="75fd883b6d7a3d44756c7788bf8a4782b886f6bc" translate="yes" xml:space="preserve">
          <source>AudioNode.numberOfInputs</source>
          <target state="translated">AudioNode.numberOfInputs</target>
        </trans-unit>
        <trans-unit id="85bbb5ab2be516ad414195829f43b20017e25e62" translate="yes" xml:space="preserve">
          <source>AudioNode.numberOfOutputs</source>
          <target state="translated">AudioNode.numberOfOutputs</target>
        </trans-unit>
        <trans-unit id="9350e38ac0fe1e8451fbb5389c4265a115f3396e" translate="yes" xml:space="preserve">
          <source>AudioNodeOptions</source>
          <target state="translated">AudioNodeOptions</target>
        </trans-unit>
        <trans-unit id="a029e12db05c016e42e24d61258fdfdc091d2b72" translate="yes" xml:space="preserve">
          <source>AudioParam</source>
          <target state="translated">AudioParam</target>
        </trans-unit>
        <trans-unit id="990a43767e5d6dc0acb34d0fe6ae540f590c9a18" translate="yes" xml:space="preserve">
          <source>AudioParam example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04c26b10a3625d43a533e04f8ddae93c53709c98" translate="yes" xml:space="preserve">
          <source>AudioParam notes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12953d99f22026606be32bc8d136502c59c932f3" translate="yes" xml:space="preserve">
          <source>AudioParam.cancelAndHoldAtTime</source>
          <target state="translated">AudioParam.cancelAndHoldAtTime</target>
        </trans-unit>
        <trans-unit id="06b3b7b6a75da248ac570174346a8348fa71e83d" translate="yes" xml:space="preserve">
          <source>AudioParam.cancelScheduledValues</source>
          <target state="translated">AudioParam.cancelScheduledValues</target>
        </trans-unit>
        <trans-unit id="3c5d74f6552dd36744b1bcd6d4566df98b299d16" translate="yes" xml:space="preserve">
          <source>AudioParam.defaultValue</source>
          <target state="translated">AudioParam.defaultValue</target>
        </trans-unit>
        <trans-unit id="371968313d37491cd374467d90e7eb75795e2cb5" translate="yes" xml:space="preserve">
          <source>AudioParam.exponentialRampToValueAtTime</source>
          <target state="translated">AudioParam.exponentialRampToValueAtTime</target>
        </trans-unit>
        <trans-unit id="ec832eac8e3e63d77c15494c3dd67510f450f2f2" translate="yes" xml:space="preserve">
          <source>AudioParam.linearRampToValueAtTime</source>
          <target state="translated">AudioParam.linearRampToValueAtTime</target>
        </trans-unit>
        <trans-unit id="c2de69c1e453d08228486846ed36ecd07e8119f1" translate="yes" xml:space="preserve">
          <source>AudioParam.maxValue</source>
          <target state="translated">AudioParam.maxValue</target>
        </trans-unit>
        <trans-unit id="e03a42b96c4b4fdd8302f06cee934740c4d66f62" translate="yes" xml:space="preserve">
          <source>AudioParam.minValue</source>
          <target state="translated">AudioParam.minValue</target>
        </trans-unit>
        <trans-unit id="a038b32b0e8ceb69ea9e48a9a123081044319bc6" translate="yes" xml:space="preserve">
          <source>AudioParam.setTargetAtTime</source>
          <target state="translated">AudioParam.setTargetAtTime</target>
        </trans-unit>
        <trans-unit id="66cf4c424368cb5e94e5fb15fd616da8030a3c73" translate="yes" xml:space="preserve">
          <source>AudioParam.setValueAtTime</source>
          <target state="translated">AudioParam.setValueAtTime</target>
        </trans-unit>
        <trans-unit id="f401288e4025d0aa235088f0ad9c8c446df21c8b" translate="yes" xml:space="preserve">
          <source>AudioParam.setValueCurveAtTime</source>
          <target state="translated">AudioParam.setValueCurveAtTime</target>
        </trans-unit>
        <trans-unit id="8edd6f6c5d7dfbf6dc15ad3edae6ce8a19911cc6" translate="yes" xml:space="preserve">
          <source>AudioParam.value</source>
          <target state="translated">AudioParam.value</target>
        </trans-unit>
        <trans-unit id="0f20755273e056d64c6913406dfaeb0f869c3635" translate="yes" xml:space="preserve">
          <source>AudioParam&lt;em&gt; Inherits methods from its parent, &lt;/em&gt;&lt;code&gt;AudioNode&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="864a37d84dac3ef4564e3a20ff82830f9a069de2" translate="yes" xml:space="preserve">
          <source>AudioParamMap</source>
          <target state="translated">AudioParamMap</target>
        </trans-unit>
        <trans-unit id="fae9a416fd4d1dd14b260fdb9d88e0c4c8fe144c" translate="yes" xml:space="preserve">
          <source>AudioScheduledSourceNode</source>
          <target state="translated">AudioScheduledSourceNode</target>
        </trans-unit>
        <trans-unit id="881756a5542843124bc41ad74557d2e283e74c05" translate="yes" xml:space="preserve">
          <source>AudioScheduledSourceNode.onended</source>
          <target state="translated">AudioScheduledSourceNode.onended</target>
        </trans-unit>
        <trans-unit id="61a2498d4b6b21538c242fc70bd1e402fa1777be" translate="yes" xml:space="preserve">
          <source>AudioScheduledSourceNode.start</source>
          <target state="translated">AudioScheduledSourceNode.start</target>
        </trans-unit>
        <trans-unit id="d6075df48679588c3df8b13ec593f7f5b257e90e" translate="yes" xml:space="preserve">
          <source>AudioScheduledSourceNode.stop</source>
          <target state="translated">AudioScheduledSourceNode.stop</target>
        </trans-unit>
        <trans-unit id="4c30a80ce09bd22cb712da2e47c2b70c6a7dbc6d" translate="yes" xml:space="preserve">
          <source>AudioTrack</source>
          <target state="translated">AudioTrack</target>
        </trans-unit>
        <trans-unit id="e5ecca7f582912e867b455acd1bf1b038f71a277" translate="yes" xml:space="preserve">
          <source>AudioTrack.enabled</source>
          <target state="translated">AudioTrack.enabled</target>
        </trans-unit>
        <trans-unit id="0b53abc435c056c49da90594bd5b070c86499604" translate="yes" xml:space="preserve">
          <source>AudioTrack.id</source>
          <target state="translated">AudioTrack.id</target>
        </trans-unit>
        <trans-unit id="f07e7c655eaf2cde26ef5b5fe2fa8fa6bb6543b2" translate="yes" xml:space="preserve">
          <source>AudioTrack.kind</source>
          <target state="translated">AudioTrack.kind</target>
        </trans-unit>
        <trans-unit id="8be34e3630ca3991f697b87c9162eb4af1c20034" translate="yes" xml:space="preserve">
          <source>AudioTrack.label</source>
          <target state="translated">AudioTrack.label</target>
        </trans-unit>
        <trans-unit id="2b39527f90fcdba2cba157970b872d3d75e388c4" translate="yes" xml:space="preserve">
          <source>AudioTrack.language</source>
          <target state="translated">AudioTrack.language</target>
        </trans-unit>
        <trans-unit id="2658f3e1d1f4eb30c3556561445e0ca5a69fea1c" translate="yes" xml:space="preserve">
          <source>AudioTrack.sourceBuffer</source>
          <target state="translated">AudioTrack.sourceBuffer</target>
        </trans-unit>
        <trans-unit id="81a6eac22482d72435af8b57d179ee69b7f19d92" translate="yes" xml:space="preserve">
          <source>AudioTrackList</source>
          <target state="translated">AudioTrackList</target>
        </trans-unit>
        <trans-unit id="5d6a0ebef88ee7d11d71faaea2b69fde4118cbc8" translate="yes" xml:space="preserve">
          <source>AudioTrackList.getTrackById</source>
          <target state="translated">AudioTrackList.getTrackById</target>
        </trans-unit>
        <trans-unit id="c8b2364aac4922d6d92f50dc5dc773e6a185c737" translate="yes" xml:space="preserve">
          <source>AudioTrackList.length</source>
          <target state="translated">AudioTrackList.length</target>
        </trans-unit>
        <trans-unit id="e590986b52c8e68b1cf6e374d636a7ea3c48c8dd" translate="yes" xml:space="preserve">
          <source>AudioTrackList.onaddtrack</source>
          <target state="translated">AudioTrackList.onaddtrack</target>
        </trans-unit>
        <trans-unit id="850a72ee675b542e6cc53f17057f9d29ed91da0e" translate="yes" xml:space="preserve">
          <source>AudioTrackList.onchange</source>
          <target state="translated">AudioTrackList.onchange</target>
        </trans-unit>
        <trans-unit id="d8447316495bf148dfd622b38b64a049777f65e4" translate="yes" xml:space="preserve">
          <source>AudioTrackList.onremovetrack</source>
          <target state="translated">AudioTrackList.onremovetrack</target>
        </trans-unit>
        <trans-unit id="ee1acfa55eb1476c86c5c4a68f256a67b25289ab" translate="yes" xml:space="preserve">
          <source>Authentication</source>
          <target state="translated">Authentication</target>
        </trans-unit>
        <trans-unit id="9e9074f3403940b3d4bc6af5af87f58396c94cea" translate="yes" xml:space="preserve">
          <source>AuthenticatorAssertionResponse</source>
          <target state="translated">AuthenticatorAssertionResponse</target>
        </trans-unit>
        <trans-unit id="a80cfc98ff07cbb2cc1db79dc4abceec92266c64" translate="yes" xml:space="preserve">
          <source>AuthenticatorAssertionResponse.authenticatorData</source>
          <target state="translated">AuthenticatorAssertionResponse.authenticatorData</target>
        </trans-unit>
        <trans-unit id="af54ddf9e4425d39173dd6e8fe1e8c3a7c26cf99" translate="yes" xml:space="preserve">
          <source>AuthenticatorAssertionResponse.clientDataJSON</source>
          <target state="translated">AuthenticatorAssertionResponse.clientDataJSON</target>
        </trans-unit>
        <trans-unit id="e425496abc1547b0a093aca082a006cf5eebfc34" translate="yes" xml:space="preserve">
          <source>AuthenticatorAttestationResponse</source>
          <target state="translated">AuthenticatorAttestationResponse</target>
        </trans-unit>
        <trans-unit id="dc6d5a910cfc488ab540a3add74cc537e9f38e51" translate="yes" xml:space="preserve">
          <source>AuthenticatorAttestationResponse.attestationObject</source>
          <target state="translated">AuthenticatorAttestationResponse.attestationObject</target>
        </trans-unit>
        <trans-unit id="d9cc7212648ebc9fe1269fa67a8c738764c7c0f3" translate="yes" xml:space="preserve">
          <source>AuthenticatorAttestationResponse.clientDataJSON</source>
          <target state="translated">AuthenticatorAttestationResponse.clientDataJSON</target>
        </trans-unit>
        <trans-unit id="24afe0eb9ba9e49cfd438c1c4221840b5362b087" translate="yes" xml:space="preserve">
          <source>AuthenticatorResponse</source>
          <target state="translated">AuthenticatorResponse</target>
        </trans-unit>
        <trans-unit id="36fb72268307aa52ff5d6863d4d885d1fddf5c42" translate="yes" xml:space="preserve">
          <source>AuthenticatorResponse.clientDataJSON</source>
          <target state="translated">AuthenticatorResponse.clientDataJSON</target>
        </trans-unit>
        <trans-unit id="2aac73658ea115e82cfe76eead385913195fa93f" translate="yes" xml:space="preserve">
          <source>Author(s)</source>
          <target state="translated">Author(s)</target>
        </trans-unit>
        <trans-unit id="b0baf72f8b8d389b790a0a417ad88bc21e6b53bb" translate="yes" xml:space="preserve">
          <source>Author(s): L. David Baron &amp;lt;dbaron at dbaron dot org&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e17e6dccdae49f1bd272f650fb4f3490ecf9d45" translate="yes" xml:space="preserve">
          <source>Auto-repeat behavior is the same as in Gecko 4.0 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61ef50d1ee6f4805d171470ba0639d6504ed2309" translate="yes" xml:space="preserve">
          <source>Auto-repeat handling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad348e81689db0109e9e2392bf672a16247f79c4" translate="yes" xml:space="preserve">
          <source>Auto-repeat handling prior to Gecko 5.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50111fc6e679441fad1bfd1eb8b98ad5f3a393d3" translate="yes" xml:space="preserve">
          <source>Auto-repeat on some GTK environments such as Ubuntu 9.4</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="519dab15964ceb55a7f2247508f547b705f27985" translate="yes" xml:space="preserve">
          <source>Autogrowing textarea example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fb032f327c7c4d652137b036b55fe310d21216d" translate="yes" xml:space="preserve">
          <source>Autokeyword</source>
          <target state="translated">Autokeyword</target>
        </trans-unit>
        <trans-unit id="73ddfb3eea96a0440d09d8565678310b9b576db9" translate="yes" xml:space="preserve">
          <source>Automatic gain control is a feature in which a sound source automatically manages changes in the volume of its source media to maintain a steady overall volume level. This feature is typically used on microphones, although it can be provided by other input sources as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21b0f142f4813987a60715a2695e6c8e7fb21eb2" translate="yes" xml:space="preserve">
          <source>Automatic gain control is typically a feature provided by microphones, although it can be provided by other input sources as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22975d2c62a8f21db3ba71af338bd670d0731d13" translate="yes" xml:space="preserve">
          <source>Automatic negotiation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a6c5195b7c19aa7a11235a3bcbced3ebe147ae0" translate="yes" xml:space="preserve">
          <source>Autonomous custom element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7c708205ac2891126f4d174951afbefe6e60c7f" translate="yes" xml:space="preserve">
          <source>Autoplay policy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea19336e2473c6f83c625efb2989e05fe846c4ed" translate="yes" xml:space="preserve">
          <source>Auxiliary button pressed (usually the middle button)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="681b5b5ae10b994e61d9fc53cf8a95498ff0df39" translate="yes" xml:space="preserve">
          <source>Availability</source>
          <target state="translated">Availability</target>
        </trans-unit>
        <trans-unit id="0e0dc88b9229e4795849221e186a05e505240c00" translate="yes" xml:space="preserve">
          <source>Availability.onchange</source>
          <target state="translated">Availability.onchange</target>
        </trans-unit>
        <trans-unit id="35ce86fe8e1c6851dd6319338380997fa627346c" translate="yes" xml:space="preserve">
          <source>Availability.value</source>
          <target state="translated">Availability.value</target>
        </trans-unit>
        <trans-unit id="556957327efa2ea736135b92247230092f6ba5f1" translate="yes" xml:space="preserve">
          <source>Available for use by applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21042f6ccaf10fae60ab204e74e0d96baa038025" translate="yes" xml:space="preserve">
          <source>Available for use by libraries and frameworks. &lt;strong&gt;May not&lt;/strong&gt; be used by applications. Available for registration at the IANA via first-come, first-serve.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="896300c82b19bf7218f7991d1313d0c075bcfc37" translate="yes" xml:space="preserve">
          <source>Available in Web Workers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55f596c8afe194cb179a08173c742a00d7c29dbb" translate="yes" xml:space="preserve">
          <source>Available in WebGL 1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67ccd50400cb16c7f7ed57501a8526b6417a91d6" translate="yes" xml:space="preserve">
          <source>Available in a WebGL 1 context</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69b7fbf272f7012666c94626122735dc1bb835ca" translate="yes" xml:space="preserve">
          <source>Available in privacy mode&lt;sup&gt;[3]&lt;/sup&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d28ddbdb25cf79cfa52355eac8bf17a5cbf93a8" translate="yes" xml:space="preserve">
          <source>Available in workers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13ccb575a070d65844b0056cf0313d01f10ffc3d" translate="yes" xml:space="preserve">
          <source>Available on Nightly build (535.2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99278b080629a1f46b081edffc98a048a07c9bd1" translate="yes" xml:space="preserve">
          <source>Available on all platforms behind a flag, but currently only works on desktop in an &lt;a href=&quot;https://webvr.info/get-chrome/&quot;&gt;experimental version of Chrome&lt;/a&gt; (other builds won't return any devices when &lt;code&gt;Navigator.getVRDisplays()&lt;/code&gt; is invoked).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77edc395c4dd2d1f560e0d60080402e3a4260bee" translate="yes" xml:space="preserve">
          <source>Available only to &lt;a href=&quot;https://developer.mozilla.org/docs/Archive/Add-ons&quot;&gt;legacy extensions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c9873c56297f742f1c7f344761bb016bfc22d76" translate="yes" xml:space="preserve">
          <source>Available only to &lt;a href=&quot;https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions&quot;&gt;WebExtensions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2963bb301f2ebe4f51b20946687918c1b8fe9800" translate="yes" xml:space="preserve">
          <source>Available only to &lt;a href=&quot;https://developer.mozilla.org/docs/Mozilla/Tech/XUL&quot;&gt;XUL documents&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a036897a76a4d2e74b1ecf83e06467ef1c16a119" translate="yes" xml:space="preserve">
          <source>Available rendering contexts: &lt;a href=&quot;../canvasrenderingcontext2d&quot;&gt;&lt;code&gt;CanvasRenderingContext2D&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../webglrenderingcontext&quot;&gt;&lt;code&gt;WebGLRenderingContext&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../webgl2renderingcontext&quot;&gt;&lt;code&gt;WebGL2RenderingContext&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../imagebitmaprenderingcontext&quot;&gt;&lt;code&gt;ImageBitmapRenderingContext&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd73364bee77a1be99c7b4061156854fcbdd277f" translate="yes" xml:space="preserve">
          <source>Available rendering contexts: &lt;a href=&quot;../canvasrenderingcontext2d&quot;&gt;&lt;code&gt;CanvasRenderingContext2D&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../webglrenderingcontext&quot;&gt;&lt;code&gt;WebGLRenderingContext&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../webgl2renderingcontext&quot;&gt;&lt;code&gt;WebGL2RenderingContext&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../imagebitmaprenderingcontext&quot;&gt;&lt;code&gt;ImageBitmapRenderingContext&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e1daad2089f15b68e2266bf6f1f4da1eaf18131" translate="yes" xml:space="preserve">
          <source>Available since &lt;a href=&quot;https://developer.microsoft.com/en-us/microsoft-edge/platform/status/intersectionobserver/&quot;&gt;Windows Insider Preview Build 14986&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="143d86b1191c75013ca90b4b087f1cb9a1214325" translate="yes" xml:space="preserve">
          <source>Avoid &lt;a href=&quot;drawing_text&quot;&gt;text rendering&lt;/a&gt; whenever possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f96b184e942118c716ce96a6a948e9db6c2c4bd7" translate="yes" xml:space="preserve">
          <source>Avoid brightness changes (use low frequency textures or fog effects to create smooth lighting transitions).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aecad857a061863297b57f8dbc4cb4e9bd5d40a7" translate="yes" xml:space="preserve">
          <source>Avoid eye convergion (e.g. if you have an object that comes towards the camera your eyes will follow and converge on it.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc1089b461d9c8aefc5c49c59c48a4e3828862fc" translate="yes" xml:space="preserve">
          <source>Avoid floating-point coordinates and use integers instead</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a4559b42cd8cdbe4c624016b2eccc14c68cd22d" translate="yes" xml:space="preserve">
          <source>Avoid focusing on different depths (e.g. avoid using a lot of particles with differents depths.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b110ffb831fb76be52cbd1f07ab2573ac566e4b" translate="yes" xml:space="preserve">
          <source>Avoid presenting the user with large amounts of text to read. You should also be careful with the distance between the eyes/camera and the text to read. 0.5m is uncomfortable, whereas at more than 2m the stereo effect starts to break down, so somewhere in between is advisable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a660acd6f1e2e4d2f7136cdd9b49d60f519b13b9" translate="yes" xml:space="preserve">
          <source>Avoid rapid brightness changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c595d96b5f94b7532ae771bd40e0d8fef003f45" translate="yes" xml:space="preserve">
          <source>Avoid resorting to &lt;code&gt;window.open()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="315ebcfbc4a97a131d0a024e45118da7aa0bbfac" translate="yes" xml:space="preserve">
          <source>Avoid sharp and/or unexpected camera rotations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23023e639b56bf1b958ff8b282c583624bbdc732" translate="yes" xml:space="preserve">
          <source>Avoid specifying an unnecessarily large number of URLs in the &lt;code&gt;urls&lt;/code&gt; property; the startup time for your connection will go up substantially. Every server in the list will be contacted and tried out before one is selected to be used for negotiation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07d7ac7bcb0ce2177192544ee1b2f8eba2850cef" translate="yes" xml:space="preserve">
          <source>Avoid the &lt;a href=&quot;../../canvasrenderingcontext2d/shadowblur&quot;&gt;&lt;code&gt;shadowBlur&lt;/code&gt;&lt;/a&gt; property whenever possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="614401e55aa72222e695f74965f16d1b55450657" translate="yes" xml:space="preserve">
          <source>Avoid unnecessary canvas state changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae4f281df5a5d0ff3cad6371f76d5c29b6d953ec" translate="yes" xml:space="preserve">
          <source>B</source>
          <target state="translated">B</target>
        </trans-unit>
        <trans-unit id="ea2cd59be015b1e387b6b00c1583a129ded3b504" translate="yes" xml:space="preserve">
          <source>Back in the main thread, we use &lt;code&gt;onmessage&lt;/code&gt; again, to respond to the message sent back from the worker:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d6a4bc03f537e81b17b74f150ab35244b1c5098" translate="yes" xml:space="preserve">
          <source>Background Tasks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33eb147b572a19e3b26cae9af8ff4911d239be6b" translate="yes" xml:space="preserve">
          <source>Background Tasks API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edb6de4f2f753f8a4af5fa32c9053954dc7687c1" translate="yes" xml:space="preserve">
          <source>Background data synchronization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfded4a21da8efbb2fa839d4b2207399ba6ad7be" translate="yes" xml:space="preserve">
          <source>Backpressure</source>
          <target state="translated">Backpressure</target>
        </trans-unit>
        <trans-unit id="1441dfefc56da793cac98a5a9ac61946d8b9496d" translate="yes" xml:space="preserve">
          <source>Bad Gateway</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="895c330ff6166a7f13701f8d9b78f313787269c8" translate="yes" xml:space="preserve">
          <source>Base64</source>
          <target state="translated">Base64</target>
        </trans-unit>
        <trans-unit id="6b6c8e8e9e899e58c8a82dcfe5a52c51d8589bc9" translate="yes" xml:space="preserve">
          <source>Base64 encoding and decoding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dca69a4b088b5864d3f061a64f77f37d079dfa6b" translate="yes" xml:space="preserve">
          <source>Base64 encoding schemes are commonly used when there is a need to encode binary data that needs to be stored and transferred over media that are designed to deal with textual data. This is to ensure that the data remain intact without modification during transport. Base64 is commonly used in a number of applications including email via &lt;a href=&quot;https://en.wikipedia.org/wiki/MIME&quot;&gt;MIME&lt;/a&gt;, and storing complex data in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/XML&quot;&gt;XML&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7eeeb4f8f4662a381579c68e17c70ae93f3fea5" translate="yes" xml:space="preserve">
          <source>Base64.Base64 encoding and decoding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd6e9e0aefc420fd906aded93efd661ef67a6945" translate="yes" xml:space="preserve">
          <source>BaseAudioContext</source>
          <target state="translated">BaseAudioContext</target>
        </trans-unit>
        <trans-unit id="9083c0916229a4204d455e8b875bbd9dfd7ad90c" translate="yes" xml:space="preserve">
          <source>BaseAudioContext.createAnalyser</source>
          <target state="translated">BaseAudioContext.createAnalyser</target>
        </trans-unit>
        <trans-unit id="f6e86cd294a30e558e9f447897551bc051cddc83" translate="yes" xml:space="preserve">
          <source>BaseAudioContext.createBiquadFilter</source>
          <target state="translated">BaseAudioContext.createBiquadFilter</target>
        </trans-unit>
        <trans-unit id="18ab48c6f5099e508436c713985a9000ae031b76" translate="yes" xml:space="preserve">
          <source>BaseAudioContext.createBuffer</source>
          <target state="translated">BaseAudioContext.createBuffer</target>
        </trans-unit>
        <trans-unit id="cfd3cd97df932b7602464dac9525326ac743e0b0" translate="yes" xml:space="preserve">
          <source>BaseAudioContext.createBufferSource</source>
          <target state="translated">BaseAudioContext.createBufferSource</target>
        </trans-unit>
        <trans-unit id="d3a66a2ba03d3b146d45f0e3319aa716079d552e" translate="yes" xml:space="preserve">
          <source>BaseAudioContext.createChannelMerger</source>
          <target state="translated">BaseAudioContext.createChannelMerger</target>
        </trans-unit>
        <trans-unit id="c66cf2d05c57e20abfb22b0bacaf4a201e67ca52" translate="yes" xml:space="preserve">
          <source>BaseAudioContext.createChannelSplitter</source>
          <target state="translated">BaseAudioContext.createChannelSplitter</target>
        </trans-unit>
        <trans-unit id="b267c64a91baa00d56ba8776027e9aa46be84b7e" translate="yes" xml:space="preserve">
          <source>BaseAudioContext.createConstantSource</source>
          <target state="translated">BaseAudioContext.createConstantSource</target>
        </trans-unit>
        <trans-unit id="1f2a24b522c49f65ea1130ac2b1e7e4c74a12c25" translate="yes" xml:space="preserve">
          <source>BaseAudioContext.createConvolver</source>
          <target state="translated">BaseAudioContext.createConvolver</target>
        </trans-unit>
        <trans-unit id="fea2a701979cdfc5bf53d1ece41cbd35dcfa1d8c" translate="yes" xml:space="preserve">
          <source>BaseAudioContext.createDelay</source>
          <target state="translated">BaseAudioContext.createDelay</target>
        </trans-unit>
        <trans-unit id="b07ab05d2b2fb27e71d36d7db40f9b61a78710a5" translate="yes" xml:space="preserve">
          <source>BaseAudioContext.createDynamicsCompressor</source>
          <target state="translated">BaseAudioContext.createDynamicsCompressor</target>
        </trans-unit>
        <trans-unit id="df7a124c6d7d5a171a75c7ed5435014973af8a90" translate="yes" xml:space="preserve">
          <source>BaseAudioContext.createGain</source>
          <target state="translated">BaseAudioContext.createGain</target>
        </trans-unit>
        <trans-unit id="f3b370638ef69105e6d499e6f0545fc19a54bda1" translate="yes" xml:space="preserve">
          <source>BaseAudioContext.createIIRFilter</source>
          <target state="translated">BaseAudioContext.createIIRFilter</target>
        </trans-unit>
        <trans-unit id="cd8fa2a34ffe43d8cc2848c9e9ce34942ad971c4" translate="yes" xml:space="preserve">
          <source>BaseAudioContext.createOscillator</source>
          <target state="translated">BaseAudioContext.createOscillator</target>
        </trans-unit>
        <trans-unit id="aa0c779428317c50c312832715109c28f65820ce" translate="yes" xml:space="preserve">
          <source>BaseAudioContext.createPanner</source>
          <target state="translated">BaseAudioContext.createPanner</target>
        </trans-unit>
        <trans-unit id="14df1f43f53ebcb32033a56643b77765dfddf4d3" translate="yes" xml:space="preserve">
          <source>BaseAudioContext.createPeriodicWave</source>
          <target state="translated">BaseAudioContext.createPeriodicWave</target>
        </trans-unit>
        <trans-unit id="ca8918772242979e5bd9ef5f9e83795dea0f072f" translate="yes" xml:space="preserve">
          <source>BaseAudioContext.createScriptProcessor</source>
          <target state="translated">BaseAudioContext.createScriptProcessor</target>
        </trans-unit>
        <trans-unit id="ce2c4bead59ed04f8a9fedad177f83384f446f30" translate="yes" xml:space="preserve">
          <source>BaseAudioContext.createStereoPanner</source>
          <target state="translated">BaseAudioContext.createStereoPanner</target>
        </trans-unit>
        <trans-unit id="559184a8986dea2269d4bb32f72f132d79da7bd1" translate="yes" xml:space="preserve">
          <source>BaseAudioContext.createWaveShaper</source>
          <target state="translated">BaseAudioContext.createWaveShaper</target>
        </trans-unit>
        <trans-unit id="c2b504edf350839f7dd10674b32c67cbc919e13b" translate="yes" xml:space="preserve">
          <source>BaseAudioContext.currentTime</source>
          <target state="translated">BaseAudioContext.currentTime</target>
        </trans-unit>
        <trans-unit id="b222ac44b1e14ca105887c8c5517c4adf05152a7" translate="yes" xml:space="preserve">
          <source>BaseAudioContext.decodeAudioData</source>
          <target state="translated">BaseAudioContext.decodeAudioData</target>
        </trans-unit>
        <trans-unit id="8466e5da8af700d7306b78e6b49e3536cef5b9f6" translate="yes" xml:space="preserve">
          <source>BaseAudioContext.destination</source>
          <target state="translated">BaseAudioContext.destination</target>
        </trans-unit>
        <trans-unit id="b9b0c781b4e6cc1400d8ff2b1a8c6591fed811af" translate="yes" xml:space="preserve">
          <source>BaseAudioContext.listener</source>
          <target state="translated">BaseAudioContext.listener</target>
        </trans-unit>
        <trans-unit id="7c6e93b606be4c43dcfcf075f7e25b7082b0614b" translate="yes" xml:space="preserve">
          <source>BaseAudioContext.onstatechange</source>
          <target state="translated">BaseAudioContext.onstatechange</target>
        </trans-unit>
        <trans-unit id="7192c9dfaff82a97b58133f1b561d9e49a389732" translate="yes" xml:space="preserve">
          <source>BaseAudioContext.resume</source>
          <target state="translated">BaseAudioContext.resume</target>
        </trans-unit>
        <trans-unit id="d2844ff75dbb5cee75862b016203541ee9b7f01b" translate="yes" xml:space="preserve">
          <source>BaseAudioContext.sampleRate</source>
          <target state="translated">BaseAudioContext.sampleRate</target>
        </trans-unit>
        <trans-unit id="3bebe0c2030662b2460fccfe46da26f7054f6966" translate="yes" xml:space="preserve">
          <source>BaseAudioContext.state</source>
          <target state="translated">BaseAudioContext.state</target>
        </trans-unit>
        <trans-unit id="238df7c7bc4347ab48e2f2d7cbc00a84ba059b71" translate="yes" xml:space="preserve">
          <source>BaseVal gets or sets the base value of the given attribute before any animations are applied.The base value of the given attribute before applying any animations. Setter throws DOMException.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19b132c78fecbc588c999a98cfa5f4064e692391" translate="yes" xml:space="preserve">
          <source>Based on Generic Sensor API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c8ce7ff99a5af2a1e8319f0938fc897d929b9b6" translate="yes" xml:space="preserve">
          <source>Based on Internet Explorer's implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4e814498ff5d10a2f98cedd616fbb983bf101a5" translate="yes" xml:space="preserve">
          <source>Based on the Wikipedia definition, IPD is the distance between the centers of the pupils of the two eyes. IPD is critical for the design of binocular viewing systems, where both eye pupils need to be positioned within the exit pupils of the viewing system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d3e50707f8ba74dc5001da1932c244e3628938f" translate="yes" xml:space="preserve">
          <source>Based on the Wikipedia definition, framerate is the frequency at which an imaging device produces unique consecutive images, called frames. A rate of 60fps is an acceptable rate for a smooth user experience, but depending on the performance of the machine the app is running on, or the complexity of the content you want to show, it can drastically lower. Less than 30fps is generally considered jittery, and annoying to the user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98500e809b5f3ac10623a2b187c7c56f78b4b1e9" translate="yes" xml:space="preserve">
          <source>Baseline alignment setting. Possible values: &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;hanging&lt;/code&gt;, &lt;code&gt;middle&lt;/code&gt;, &lt;code&gt;alphabetic&lt;/code&gt; (default), &lt;code&gt;ideographic&lt;/code&gt;, &lt;code&gt;bottom&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0edb39a776eadda30b4e43a30176297bbb44e7fe" translate="yes" xml:space="preserve">
          <source>Baseline alignment setting. Possible values: &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;hanging&lt;/code&gt;, &lt;code&gt;middle&lt;/code&gt;, &lt;code&gt;alphabetic&lt;/code&gt;, &lt;code&gt;ideographic&lt;/code&gt;, &lt;code&gt;bottom&lt;/code&gt;. The default value is &lt;code&gt;alphabetic&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0597e6ddb84c063530dcdaae695efc6e8a96b9b1" translate="yes" xml:space="preserve">
          <source>Basic Card Payment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="166e1da6b58b7a88d84d8292d2582d277ae6ffb7" translate="yes" xml:space="preserve">
          <source>Basic Card Payment&lt;br/&gt;&lt;small&gt;The definition of 'BasicCardRequest' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4d9022fd0dbdd3ef04ed868652263a22f24e98c" translate="yes" xml:space="preserve">
          <source>Basic Card Payment&lt;br/&gt;&lt;small&gt;The definition of 'BasicCardResponse' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c102e3f317e4125ccc335f92c587e648d8417a02" translate="yes" xml:space="preserve">
          <source>Basic Card Payment&lt;br/&gt;&lt;small&gt;The definition of 'billingAddress' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25d71ca6f6fa3e670720e7c85cd5ba43db4a7712" translate="yes" xml:space="preserve">
          <source>Basic Card Payment&lt;br/&gt;&lt;small&gt;The definition of 'cardNumber' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="126e5928a0bf4cb166a4e29ef438dd981e840934" translate="yes" xml:space="preserve">
          <source>Basic Card Payment&lt;br/&gt;&lt;small&gt;The definition of 'cardSecurityCode' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ba08415a06e81b3489424b37518c3c6fd1026fa" translate="yes" xml:space="preserve">
          <source>Basic Card Payment&lt;br/&gt;&lt;small&gt;The definition of 'cardholderName' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58a60915b6d9614e7356b71dce9ad615242dc2f4" translate="yes" xml:space="preserve">
          <source>Basic Card Payment&lt;br/&gt;&lt;small&gt;The definition of 'expiryMonth' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9cd8c037959cd58588aedbae78444d16b795448" translate="yes" xml:space="preserve">
          <source>Basic Card Payment&lt;br/&gt;&lt;small&gt;The definition of 'expiryYear' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f0266daea6fceee9f7ecc2fe507fb9cef93f845" translate="yes" xml:space="preserve">
          <source>Basic Card Payment&lt;br/&gt;&lt;small&gt;The definition of 'supportedNetworks' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fd19fe8615d2d50fea34a5cbc5eb87d4b4b1794" translate="yes" xml:space="preserve">
          <source>Basic Card Payment&lt;br/&gt;&lt;small&gt;The definition of 'supportedTypes' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f268550299226d9cedc8824c8df2f653f718872" translate="yes" xml:space="preserve">
          <source>Basic Concepts About the File System API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dac6b24f78471a132bc9a7ec7774530351b54fb0" translate="yes" xml:space="preserve">
          <source>Basic Example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a594ee7d084d3bef95325a540925014c1fa86ffd" translate="yes" xml:space="preserve">
          <source>Basic animation steps</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10e6b525c5b9a71013d2ed157fb1bc22d2d4c010" translate="yes" xml:space="preserve">
          <source>Basic animations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cd29f7a3e8c8e9d80af50abce6f80d41d4e42fc" translate="yes" xml:space="preserve">
          <source>Basic app setup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1857d34a1feb09a3b06c4dee942314c77cab82ee" translate="yes" xml:space="preserve">
          <source>Basic architecture</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="751457e157e1d2ea4e9e18c03c4474a0b4ba4d44" translate="yes" xml:space="preserve">
          <source>Basic audio context declaration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4e7ae591b0abd861a75d3fa39a7cab907d2a5c8" translate="yes" xml:space="preserve">
          <source>Basic concepts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e761da91706deef494566d743241cffd8875096b" translate="yes" xml:space="preserve">
          <source>Basic concepts behind Web Audio API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdc8858ea713432b7220f828394d5d31cc8f01d5" translate="yes" xml:space="preserve">
          <source>Basic controller access</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7f6b823bff99b0050013a737b8b12df4cbe8c62" translate="yes" xml:space="preserve">
          <source>Basic definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f7aeaee9d125308ff6afe93362055e1cb84d2e8" translate="yes" xml:space="preserve">
          <source>Basic events module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20b19d89ef0aed3f2d4f1afed1d3f801c6b85aa5" translate="yes" xml:space="preserve">
          <source>Basic example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c8d5fdc5db9950cf7bea592d196bad4f803b3fb" translate="yes" xml:space="preserve">
          <source>Basic examples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="033c90e468f5365f7f6688f400f9e663278eb81a" translate="yes" xml:space="preserve">
          <source>Basic implementation (Yes)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbc98071141a8008ee657d601c1ca6a727338c78" translate="yes" xml:space="preserve">
          <source>Basic pattern</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2144053287c65f3c3df698d051582dd818cad1d1" translate="yes" xml:space="preserve">
          <source>Basic properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7875ae996365fae631690467ef647f7e31aafc44" translate="yes" xml:space="preserve">
          <source>Basic results</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3870ba4764d41ed53d3f2fc506585fd5c8411c8a" translate="yes" xml:space="preserve">
          <source>Basic scissoring</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3946bbb1bfe0df1e0a286b2946140011f1c3498c" translate="yes" xml:space="preserve">
          <source>Basic steps</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48e2b3aff207a2929af920ad2047a4854ec8d687" translate="yes" xml:space="preserve">
          <source>Basic support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb3a8802da5b3164771a468d78ff7995a249f08a" translate="yes" xml:space="preserve">
          <source>Basic usage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31528a8438dc63c2ba7a4f135e149a6e0e6d66ba" translate="yes" xml:space="preserve">
          <source>Basic: &lt;a href=&quot;https://developer.mozilla.org/en-US/Firefox/Releases/3.5&quot;&gt;3.5&lt;/a&gt; (1.9.1)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78e0f9dd567dd017ebe4de948f9619620ffd01fc" translate="yes" xml:space="preserve">
          <source>BasicCardRequest</source>
          <target state="translated">BasicCardRequest</target>
        </trans-unit>
        <trans-unit id="ea8b8b224e95f546a996ba86ac70c44a718417d0" translate="yes" xml:space="preserve">
          <source>BasicCardRequest.supportedNetworks</source>
          <target state="translated">BasicCardRequest.supportedNetworks</target>
        </trans-unit>
        <trans-unit id="56a9abb14bb5200f56046b58c2eb9a781cc77c8d" translate="yes" xml:space="preserve">
          <source>BasicCardRequest.supportedTypes</source>
          <target state="translated">BasicCardRequest.supportedTypes</target>
        </trans-unit>
        <trans-unit id="2b4801c7c16f450d89d7fdd31b38028445119685" translate="yes" xml:space="preserve">
          <source>BasicCardResponse</source>
          <target state="translated">BasicCardResponse</target>
        </trans-unit>
        <trans-unit id="3dade27fe988260f9eac9f7d07e4523cadd09117" translate="yes" xml:space="preserve">
          <source>BasicCardResponse.billingAddress</source>
          <target state="translated">BasicCardResponse.billingAddress</target>
        </trans-unit>
        <trans-unit id="80de2ea71cb473b5db0b3f8200861913de29a754" translate="yes" xml:space="preserve">
          <source>BasicCardResponse.cardNumber</source>
          <target state="translated">BasicCardResponse.cardNumber</target>
        </trans-unit>
        <trans-unit id="42104914223d7465cf97351dc5d7c28b5d3d5303" translate="yes" xml:space="preserve">
          <source>BasicCardResponse.cardSecurityCode</source>
          <target state="translated">BasicCardResponse.cardSecurityCode</target>
        </trans-unit>
        <trans-unit id="542a0254afc1135b69e50db88cae59d77e824e23" translate="yes" xml:space="preserve">
          <source>BasicCardResponse.cardholderName</source>
          <target state="translated">BasicCardResponse.cardholderName</target>
        </trans-unit>
        <trans-unit id="001ebd7eff56cd2ce8c6b8ca60edfba9254c375b" translate="yes" xml:space="preserve">
          <source>BasicCardResponse.expiryMonth</source>
          <target state="translated">BasicCardResponse.expiryMonth</target>
        </trans-unit>
        <trans-unit id="b761cce9ba7b7f459b93561e686560ab56571d7e" translate="yes" xml:space="preserve">
          <source>BasicCardResponse.expiryYear</source>
          <target state="translated">BasicCardResponse.expiryYear</target>
        </trans-unit>
        <trans-unit id="d89db6ef9d24a81b4e8ed7659dc59fb7db5cf400" translate="yes" xml:space="preserve">
          <source>Basically, this can be passed into your WebGL code to transform the rendered view from a sitting to standing view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f24ad0681d1da118698c335208b33d4bd79732f" translate="yes" xml:space="preserve">
          <source>Basics of spatialization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbf402b7e51e7db1146d1108467af94ee8ff63c6" translate="yes" xml:space="preserve">
          <source>Batch canvas calls together. For example, draw a polyline instead of multiple separate lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c85675a7ef7e111c5ca0e296e4fbe6eb02211ad" translate="yes" xml:space="preserve">
          <source>Battery API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c6768472e11fa2ef33225de489da57d61b33411" translate="yes" xml:space="preserve">
          <source>Battery Status</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0cd046975ac459ab156bc7edc2ad7f0be4cd40d" translate="yes" xml:space="preserve">
          <source>Battery Status API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcfa26a53ed396eb49fc7b02a0cd95d90c5390a3" translate="yes" xml:space="preserve">
          <source>Battery Status API&lt;br/&gt;&lt;small&gt;The definition of 'Navigator.battery' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01e73f316fdd75fbcf863aad3aaf761d83a13546" translate="yes" xml:space="preserve">
          <source>Battery Status API&lt;br/&gt;&lt;small&gt;The definition of 'Navigator.getBattery()' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20a270acdb70e78980f9765b1e9c5e2ef65bed89" translate="yes" xml:space="preserve">
          <source>BatteryManager</source>
          <target state="translated">BatteryManager</target>
        </trans-unit>
        <trans-unit id="7b423455cee32019177e6a9ba270704b22bf10e2" translate="yes" xml:space="preserve">
          <source>BatteryManager.charging</source>
          <target state="translated">BatteryManager.charging</target>
        </trans-unit>
        <trans-unit id="9f7d8a4ef8b63bc97fdf1ed60b9888fb4cf800a9" translate="yes" xml:space="preserve">
          <source>BatteryManager.chargingTime</source>
          <target state="translated">BatteryManager.chargingTime</target>
        </trans-unit>
        <trans-unit id="977b15b08dbba3eaae10bba1cc217fee92410dde" translate="yes" xml:space="preserve">
          <source>BatteryManager.dischargingTime</source>
          <target state="translated">BatteryManager.dischargingTime</target>
        </trans-unit>
        <trans-unit id="a9685f2e2533eb2aca6ff46fbc5dafa8223a2ce3" translate="yes" xml:space="preserve">
          <source>BatteryManager.level</source>
          <target state="translated">BatteryManager.level</target>
        </trans-unit>
        <trans-unit id="1006b39eeb0eb44de38e3df128c6eab713b184b0" translate="yes" xml:space="preserve">
          <source>BatteryManager.onchargingchange</source>
          <target state="translated">BatteryManager.onchargingchange</target>
        </trans-unit>
        <trans-unit id="fa146d3bf5a1d8d0cbf63df12ab8d849c04e9de9" translate="yes" xml:space="preserve">
          <source>BatteryManager.onchargingtimechange</source>
          <target state="translated">BatteryManager.onchargingtimechange</target>
        </trans-unit>
        <trans-unit id="9e0503cff5611428697eb1fb5581317380d795b1" translate="yes" xml:space="preserve">
          <source>BatteryManager.ondischargingtimechange</source>
          <target state="translated">BatteryManager.ondischargingtimechange</target>
        </trans-unit>
        <trans-unit id="ab49ad52fa61236a3439caa158c72648f7c2e58f" translate="yes" xml:space="preserve">
          <source>BatteryManager.onlevelchange</source>
          <target state="translated">BatteryManager.onlevelchange</target>
        </trans-unit>
        <trans-unit id="0fd200f03984a6053151844ece5acdda1314cd52" translate="yes" xml:space="preserve">
          <source>Be aware that you can't call &lt;code&gt;delete()&lt;/code&gt; (or &lt;a href=&quot;update&quot;&gt;&lt;code&gt;IDBCursor.update()&lt;/code&gt;&lt;/a&gt;) on cursors obtained from &lt;a href=&quot;../idbindex/openkeycursor&quot;&gt;&lt;code&gt;IDBIndex.openKeyCursor()&lt;/code&gt;&lt;/a&gt;. For such needs, you have to use &lt;a href=&quot;../idbindex/opencursor&quot;&gt;&lt;code&gt;IDBIndex.openCursor()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99185aaa5819d437957e436c4f87f1946876f000" translate="yes" xml:space="preserve">
          <source>Be aware that you can't call &lt;code&gt;update()&lt;/code&gt; (or &lt;a href=&quot;delete&quot;&gt;&lt;code&gt;IDBCursor.delete()&lt;/code&gt;&lt;/a&gt;) on cursors obtained from &lt;a href=&quot;../idbindex/openkeycursor&quot;&gt;&lt;code&gt;IDBIndex.openKeyCursor()&lt;/code&gt;&lt;/a&gt;. For such needs, you have to use &lt;a href=&quot;../idbindex/opencursor&quot;&gt;&lt;code&gt;IDBIndex.openCursor()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da730f6a4be9b9ab4d2a8a1929b00e80da822627" translate="yes" xml:space="preserve">
          <source>Be aware that your callback is executed on the main thread. It should operate as quickly as possible; if anything time-consuming needs to be done, use &lt;a href=&quot;window/requestidlecallback&quot;&gt;&lt;code&gt;Window.requestIdleCallback()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e39f0bf27eb4cee6017d75abe2dac195206bcf31" translate="yes" xml:space="preserve">
          <source>Be aware, however, that &lt;code&gt;setAttribute&lt;/code&gt; removes all other style properties that may already have been defined in the element's style object. If the &lt;code&gt;&lt;var&gt;some-element&lt;/var&gt;&lt;/code&gt; element above had an in&amp;ndash;line style attribute of say &lt;code&gt;style=&quot;font-size:&amp;nbsp;18px&quot;&lt;/code&gt;, that value would be removed by the use of &lt;code&gt;setAttribute&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19357ce2fd6035b52e51b734ca23516ee8de6bc7" translate="yes" xml:space="preserve">
          <source>Be careful with heavy physics libraries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec1c7b568dfcdea519ba1efc657ccd2aeaa02c80" translate="yes" xml:space="preserve">
          <source>Be careful with the distance between objects and the camera in general. Oculus recommends 0.75m as a minimum distance of focus.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14d54ce84251b985233c37392a2a1955e5f482c7" translate="yes" xml:space="preserve">
          <source>Be careful! Although the &lt;code&gt;options&lt;/code&gt; object you can specify when creating an &lt;a href=&quot;../intersectionobserver&quot;&gt;&lt;code&gt;IntersectionObserver&lt;/code&gt;&lt;/a&gt; has a field named &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/threshold&quot;&gt;&lt;code&gt;threshold&lt;/code&gt;&lt;/a&gt;, this property is called &lt;code&gt;thresholds&lt;/code&gt;. Confusing? Yes. If you accidentally use &lt;code&gt;thresholds&lt;/code&gt; as the name of the field in your &lt;code&gt;options&lt;/code&gt;, the &lt;code&gt;thresholds&lt;/code&gt; array will wind up being simply &lt;code&gt;[0.0]&lt;/code&gt;, which is likely not what you expect. Debugging chaos may ensue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7dbd758ebc2b36bcc9c5c3b9020eb31189d1771" translate="yes" xml:space="preserve">
          <source>Beacon</source>
          <target state="translated">Beacon</target>
        </trans-unit>
        <trans-unit id="27d2881df81451ab6312feff3fe3cad472baf17c" translate="yes" xml:space="preserve">
          <source>Beacon API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e351fa112022f7c2043c4350f2c33069548b69d0" translate="yes" xml:space="preserve">
          <source>Beacon API: Using the Beacon API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e19e1f78af2df874efe524590c4f23055316272e" translate="yes" xml:space="preserve">
          <source>Beacon CanIUse data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95663726f2152849f54a7558eaf0f6e9787e3f2b" translate="yes" xml:space="preserve">
          <source>Beacon standard</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74ce9db3df394ad28e570218440c9366ae54d745" translate="yes" xml:space="preserve">
          <source>Beacon&lt;br/&gt;&lt;small&gt;The definition of 'sendBeacon()' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d827c3f76238816bb5eaeb6a8dd2e8068294333" translate="yes" xml:space="preserve">
          <source>Bear in mind however that &lt;code&gt;IDBLocaleAwareKeyRange&lt;/code&gt; has its own implementation of &lt;a href=&quot;idbkeyrange/bound&quot;&gt;&lt;code&gt;IDBKeyRange.bound&lt;/code&gt;&lt;/a&gt;. This is because when you use &lt;code&gt;bound()&lt;/code&gt;, it checks if lower bound &amp;lt; upper bound, and throws an exception if that&amp;rsquo;s not the case. With locale-aware indexes, the meaning of &amp;lt; depends on the locale, so for example in Lithuanian Y is sorted between I and K. The only difference between &lt;code&gt;IDBKeyRange&lt;/code&gt; and &lt;code&gt;IDBLocaleAwareKeyRange&lt;/code&gt; is that the latter doesn&amp;rsquo;t do the aforementioned check.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb7b157ccef481b57163844e3b8ebe6b7a09982b" translate="yes" xml:space="preserve">
          <source>Bear in mind that IndexedDB indexes can contain &lt;em&gt;any&lt;/em&gt; JavaScript data type; IndexedDB uses the &lt;a href=&quot;../web_workers_api/structured_clone_algorithm&quot;&gt;structured clone algorithm&lt;/a&gt; to serialize stored objects, which allows for storage of simple and complex objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbe350e49c0669501eea4303eef0b4bb9946ec61" translate="yes" xml:space="preserve">
          <source>Bear in mind that if you are using a &lt;a href=&quot;../idbcursor&quot;&gt;&lt;code&gt;IDBCursor&lt;/code&gt;&lt;/a&gt;, you can use the &lt;a href=&quot;../idbcursor/delete&quot;&gt;&lt;code&gt;IDBCursor.delete()&lt;/code&gt;&lt;/a&gt; method to more efficiently delete the current record &amp;mdash; without having to explicitly look up the record's key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f6167c932ee0dc403bd5afe4d4a819aa40cb078" translate="yes" xml:space="preserve">
          <source>Bear in mind that if you have a &lt;a href=&quot;../idbcursor&quot;&gt;&lt;code&gt;IDBCursor&lt;/code&gt;&lt;/a&gt; to the record you want to update, updating it with &lt;a href=&quot;../idbcursor/update&quot;&gt;&lt;code&gt;IDBCursor.update()&lt;/code&gt;&lt;/a&gt; is preferable to using &lt;a href=&quot;put&quot;&gt;&lt;code&gt;IDBObjectStore.put()&lt;/code&gt;&lt;/a&gt;. Doing so makes it clear that an existing record will be updated, instead of a new record being inserted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0016a5e4b49f8c18dd300c8675101d75abd59ad8" translate="yes" xml:space="preserve">
          <source>Bear in mind the following points:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1e030d99ec74d385d94f404ab7f51d07ab1a9de" translate="yes" xml:space="preserve">
          <source>Bearing this in mind, if your website or application requires timing and scheduling, it's best to stick with the &lt;a href=&quot;../audioparam&quot;&gt;&lt;code&gt;AudioParam&lt;/code&gt;&lt;/a&gt; methods for setting values. If you're sure it doesn't, setting it with the &lt;code&gt;value&lt;/code&gt; property is fine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49d6074d0fb4e6372c32c278634aed112db5f4e2" translate="yes" xml:space="preserve">
          <source>Because &lt;a href=&quot;../orientationsensor&quot;&gt;&lt;code&gt;OrientationSensor&lt;/code&gt;&lt;/a&gt; is a base class, &lt;code&gt;populateMatrix&lt;/code&gt; may only be read from one of its derived classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1794dab81accd729b8b18f83c0da71d1fc5d45a" translate="yes" xml:space="preserve">
          <source>Because &lt;a href=&quot;../orientationsensor&quot;&gt;&lt;code&gt;OrientationSensor&lt;/code&gt;&lt;/a&gt; is a base class, &lt;code&gt;quaternion&lt;/code&gt; may only be read from one of its derived classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aec6255565e5c1e8386eefcc4eaf897f30a14d8d" translate="yes" xml:space="preserve">
          <source>Because &lt;a href=&quot;../oscillatornode&quot;&gt;&lt;code&gt;OscillatorNode&lt;/code&gt;&lt;/a&gt; doesn't support the notion of being in a paused state, we have to simulate it by terminating the oscillators and starting them again when the play button is clicked again to toggle them back on. Let's look at the code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb63f79977b559543f95227272b1e49e0ed32a9e" translate="yes" xml:space="preserve">
          <source>Because &lt;a href=&quot;../oscillatornode&quot;&gt;&lt;code&gt;OscillatorNode&lt;/code&gt;&lt;/a&gt; is based on &lt;a href=&quot;../audioscheduledsourcenode&quot;&gt;&lt;code&gt;AudioScheduledSourceNode&lt;/code&gt;&lt;/a&gt;, this is to some extent an example for that as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe8abdca23d6cfd8f809ac09a6deda700bbd7b6b" translate="yes" xml:space="preserve">
          <source>Because &lt;a href=&quot;../sensor&quot;&gt;&lt;code&gt;Sensor&lt;/code&gt;&lt;/a&gt; is a base class, &lt;code&gt;activated&lt;/code&gt; may only be read from one of its derived classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fce1c5a5ac7ef9123d121486f203cd4b50fab38" translate="yes" xml:space="preserve">
          <source>Because &lt;a href=&quot;../sensor&quot;&gt;&lt;code&gt;Sensor&lt;/code&gt;&lt;/a&gt; is a base class, &lt;code&gt;hasReading&lt;/code&gt; may only be read from one of its derived classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3380d36695415e448565024c6e139c196e1482ff" translate="yes" xml:space="preserve">
          <source>Because &lt;a href=&quot;../sensor&quot;&gt;&lt;code&gt;Sensor&lt;/code&gt;&lt;/a&gt; is a base class, &lt;code&gt;onactivate&lt;/code&gt; may only be used on one of its derived classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2f0b82e402dd05e94eb693c289525f2db8fa920" translate="yes" xml:space="preserve">
          <source>Because &lt;a href=&quot;../sensor&quot;&gt;&lt;code&gt;Sensor&lt;/code&gt;&lt;/a&gt; is a base class, &lt;code&gt;onerror&lt;/code&gt; may only be used on one of its derived classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40b27ea7e628710621e684a4e717bb01c54febe3" translate="yes" xml:space="preserve">
          <source>Because &lt;a href=&quot;../sensor&quot;&gt;&lt;code&gt;Sensor&lt;/code&gt;&lt;/a&gt; is a base class, &lt;code&gt;onreading&lt;/code&gt; may only be used on one of its derived classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e248deac3298b160ede3710a4336566239898508" translate="yes" xml:space="preserve">
          <source>Because &lt;a href=&quot;../sensor&quot;&gt;&lt;code&gt;Sensor&lt;/code&gt;&lt;/a&gt; is a base class, &lt;code&gt;timestamp&lt;/code&gt; may only be read from one of its derived classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e816e67e978c8db53028bc83b4147313a0d29e6" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;insertAdjacentHTML()&lt;/code&gt; accepts a string and not a &lt;code&gt;Node&lt;/code&gt; as its second parameter, &lt;code&gt;XMLSerializer&lt;/code&gt; is used to first convert the node into a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6d352a54defdc479968372b648d534df813811c" translate="yes" xml:space="preserve">
          <source>Because DOM events abstract device input, they provide no way to learn what device or type of device fired an event. This can lead to instances where the same action triggers multiple event handlers. To deal with this, developers make assumptions and use heuristics to normalize behavior on web pages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e42f7d53c0bdb457c7aa8c463cb00a5661acff66" translate="yes" xml:space="preserve">
          <source>Because WebRTC provides interfaces that work together to accomplish a variety of tasks, we have divided up the interfaces in the list below by category. Please see the sidebar for an alphabetical list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78e04c90e50d750004a3734c0c4ad8e31826b83b" translate="yes" xml:space="preserve">
          <source>Because anti-aliasing is enabled by default, we might want to disable the smoothing to see clear pixels. You can toggle the checkbox to see the effect of the &lt;code&gt;imageSmoothingEnabled&lt;/code&gt; property (which needs prefixes for different browsers).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f97f3587c5e17af1a523e2db118ca719f776a40" translate="yes" xml:space="preserve">
          <source>Because event handling and screen updates are two of the most obvious ways users notice performance issues, it's important for your code to be a good citizen of the Web and help to prevent stalls in the execution of the event loop. In the past, there's been no way to do this reliably other than by writing code that's as efficient as possible and by offloading as much work as possible to &lt;a href=&quot;web_workers_api&quot;&gt;workers&lt;/a&gt;. &lt;a href=&quot;window/requestidlecallback&quot;&gt;&lt;code&gt;Window.requestIdleCallback()&lt;/code&gt;&lt;/a&gt; makes it possible to become actively engaged in helping to ensure that the browser's event loop runs smoothly, by allowing the browser to tell your code how much time it can safely use without causing the system to lag. If you stay within the limit given, you can make the user's experience much better.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07dd6641a9ac7a1dec703cbaed76b796fdf43edd" translate="yes" xml:space="preserve">
          <source>Because everything happens within a transaction, it is a very important concept in IndexedDB. To learn more about transactions, especially on how they relate to versioning, see &lt;a href=&quot;../idbtransaction&quot;&gt;&lt;code&gt;IDBTransaction&lt;/code&gt;&lt;/a&gt;, which also has reference documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06819ce516b3862edda14063e9797f166531682a" translate="yes" xml:space="preserve">
          <source>Because idle callbacks are intended to give your code a way to cooperate with the event loop to ensure that the system is utilized to its full potential without over-tasking it, resulting in lag or other performance problems, you should be thoughtful about how you go about using them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69c04f5701536d73f6cc7303d2415aa95c9a1e15" translate="yes" xml:space="preserve">
          <source>Because it was essentially part of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/DOM&quot;&gt;DOM 0&lt;/a&gt;, this technique for adding event listeners is very widely supported and requires no special cross&amp;ndash;browser code. It is normally used to register event listeners dynamically unless the extra features of &lt;code&gt;addEventListener()&lt;/code&gt; are needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7b77345916459e9166246a85f011b3dd811d33d" translate="yes" xml:space="preserve">
          <source>Because of how backpressure is supported in the API, its implementation in code may be less than obvious. To see how backpressure is implemented look for three things.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81e03dc152c0b3b1084591b28db6ab7c43cf31b4" translate="yes" xml:space="preserve">
          <source>Because of the way interface definitions in WebIDL work, if a constraint is requested but not supported, no error will occur. Instead, the specified constraints will be applied, with any unrecognized constraints stripped from the request.That can lead to confusing and hard to debug errors, so be sure to use &lt;code&gt;getSupportedConstraints()&lt;/code&gt; to retrieve this information before attempting to establish constraints if you need to know the difference between silently ignoring a constraint and a constraint being accepted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11a6bf02e48d0c610a22e0cdb2ffaa56ad0492d3" translate="yes" xml:space="preserve">
          <source>Because of these issues, these properties and methods have been removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b68eb94d0128121f993ddb87739cd18354e44f6" translate="yes" xml:space="preserve">
          <source>Because of this, there's no use for the device ID when calling &lt;a href=&quot;../mediastreamtrack/applyconstraints&quot;&gt;&lt;code&gt;MediaStreamTrack.applyConstraints()&lt;/code&gt;&lt;/a&gt;, since there is only one possible value; however, you can record a &lt;code&gt;deviceId&lt;/code&gt; and use it to ensure that you get the same source for multiple calls to &lt;a href=&quot;../mediadevices/getusermedia&quot;&gt;&lt;code&gt;getUserMedia()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7afc127734f544b32ab373f3a16840bf956bbf46" translate="yes" xml:space="preserve">
          <source>Because of this, there's no use for the group ID when calling &lt;a href=&quot;../mediastreamtrack/applyconstraints&quot;&gt;&lt;code&gt;MediaStreamTrack.applyConstraints()&lt;/code&gt;&lt;/a&gt;, since there is only one possible value, and you can't use it to ensure the same group is used across multiple browsing sessions when calling &lt;code&gt;getUserMedia()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="012d36641d4a938c8c9a5e866121a72e057a2357" translate="yes" xml:space="preserve">
          <source>Because older browsers (as well as some not-too-old browsers) still assume the third parameter is a Boolean, you need to build your code to handle this scenario intelligently. You can do this by using feature detection for each of the options you're interested in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdde2a01b705a299c232c45ef1749c7e25ed738d" translate="yes" xml:space="preserve">
          <source>Because small children tire out easily, unlike automaton chess pieces, Alice is constantly slowing down. We've done this in the code by setting a decay on her animation&amp;rsquo;s &lt;code&gt;playbackRate&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c9b5992c621ca1327c1b5b26b5be0fb40b3bdb9" translate="yes" xml:space="preserve">
          <source>Because some browsers have not yet implemented &lt;a href=&quot;../rtcpeerconnection/addtrack&quot;&gt;&lt;code&gt;RTCPeerConnection.addTrack()&lt;/code&gt;&lt;/a&gt;, therefore requiring the use of the obsolete &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/addStream&quot;&gt;&lt;code&gt;addStream()&lt;/code&gt;&lt;/a&gt; method, we use this Boolean to determine whether or not the user agent supports &lt;code&gt;addTrack()&lt;/code&gt;; if it doesn't, we'll fall back to &lt;code&gt;addStream()&lt;/code&gt;. This gets figured out in &lt;code&gt;connectAndDial()&lt;/code&gt;, as shown in &lt;a href=&quot;#Starting_the_connection_process&quot;&gt;Starting the connection process&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cb895741c84e4df0080af63616fcdddb5fae782" translate="yes" xml:space="preserve">
          <source>Because the &lt;code&gt;strokeStyle&lt;/code&gt; and &lt;code&gt;fillStyle&lt;/code&gt; properties accept CSS rgba color values, we can use the following notation to assign a transparent color to them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfb1de3f39409497704d8adb555a9e827f03e7b9" translate="yes" xml:space="preserve">
          <source>Because the Background Tasks API is fairly new, your code may need to be able to work on browsers that don't yet support it. You can do so with a simple shim that uses &lt;a href=&quot;windoworworkerglobalscope/settimeout&quot;&gt;&lt;code&gt;setTimeout()&lt;/code&gt;&lt;/a&gt; as a fallback option. This isn't a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/polyfill&quot;&gt;polyfill&lt;/a&gt;, since it's not functionally identical; &lt;code&gt;setTimeout()&lt;/code&gt; doesn't let you make use of idle periods, but instead runs your code when possible, leaving us to do the best we can to avoid causing the user to experience performance lag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea1cc7a32a23c062d7f281923a400f6117f4637c" translate="yes" xml:space="preserve">
          <source>Because the first bit is always 1 for client-to-server messages, you can subtract 128 from this byte to get rid of the MASK bit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a259d3502cc00f9fca2404abbf2bfb8c32bd439a" translate="yes" xml:space="preserve">
          <source>Because the signaling process is a state machine, being able to verify that your code is in the expected state when messages arrive can help avoid unexpected and avoidable failures. For example, if you receive an answer while the &lt;code&gt;signalingState&lt;/code&gt; isn't &lt;code&gt;&quot;have-local-offer&quot;&lt;/code&gt;, you know that something is wrong, since you should only receive answers after creating an offer but before an answer has been received and passed into &lt;a href=&quot;setlocaldescription&quot;&gt;&lt;code&gt;RTCPeerConnection.setLocalDescription()&lt;/code&gt;&lt;/a&gt;. Your code will be more reliable if you watch for mismatched states like this and handle them gracefully.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b377434429b659a9f763933e6e72cdd615c6033f" translate="yes" xml:space="preserve">
          <source>Because the streams for an &lt;code&gt;RTCPeerConnection&lt;/code&gt; are implemented using RTP and the interfaces &lt;a href=&quot;#RTCPeerConnection_and_RTP&quot;&gt;above&lt;/a&gt;, you can take advantage of the access this gives you to the internals of streams to make adjustments. Among the simplest things you can do is to implement a &quot;hold&quot; feature, wherein a participant in a call can click a button and turn off their microphone, begin sending music to the other peer instead, and stop accepting incoming audio.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="788553aa25a3633edf25a96825e6f1c60b7794fe" translate="yes" xml:space="preserve">
          <source>Because the velocity of the panner and the listener were not &lt;a href=&quot;audioparam&quot;&gt;&lt;code&gt;AudioParam&lt;/code&gt;&lt;/a&gt;s, the pitch modification could not be smoothly applied, resulting in audio glitches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47d5637b7ebaf242f704ee8e593c94ab7e32d6df" translate="yes" xml:space="preserve">
          <source>Because this error can occur even when the user has not yet granted permission to use the underlying device, it can potentially be used as a fingerprinting surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="564bc07ceddab38f1243812004ae3348ffdbee3e" translate="yes" xml:space="preserve">
          <source>Because using redirected to manually filter out redirects can allow forgery of redirects, you should instead set the redirect mode to &lt;code&gt;&quot;error&quot;&lt;/code&gt; in the &lt;code&gt;init&lt;/code&gt; parameter when calling &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch&quot;&gt;&lt;code&gt;fetch()&lt;/code&gt;&lt;/a&gt;, like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74f670f3c81c95b806bcddfd1b2015bb4d3fcd63" translate="yes" xml:space="preserve">
          <source>Because we changed an attribute and added a uniform we need to look up their locations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52b6e73325fd7a2105e2e8493f3537be104372b2" translate="yes" xml:space="preserve">
          <source>Before Android WebView 4.4, &lt;code&gt;click&lt;/code&gt; is only defined on buttons and inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="270c1bc515712e598f2433edf1d782676e00f3fb" translate="yes" xml:space="preserve">
          <source>Before Chrome 19, &lt;code&gt;click&lt;/code&gt; is only defined on buttons and inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e6fccc0befb58bcbb11fd635ac396d9c5aaa2ca" translate="yes" xml:space="preserve">
          <source>Before Chrome 22, the support for notification followed an old prefixed version of the specification and used the &lt;code&gt;navigator.webkitNotifications&lt;/code&gt; object to instantiate a new notification. Before Chrome 32, &lt;code&gt;Notification.permission&lt;/code&gt; was not supported. Before Chrome 42, service worker additions were not supported. Starting in Chrome 49, notifications do not work in incognito mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60d94992271b1c4d4067e7e3c94961383c674639" translate="yes" xml:space="preserve">
          <source>Before Chrome 30, the &lt;code&gt;offset&lt;/code&gt; argument was optional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="672d69fb12506df82526779a091e59941ed0601b" translate="yes" xml:space="preserve">
          <source>Before Chrome 48, this method always bypassed the browser cache. Starting with Chrome 48, it only bypasses the cache when the previous service worker check was more than twenty-four hours ago.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="004a070a2a145030a9a048fdac598dd6d33b543d" translate="yes" xml:space="preserve">
          <source>Before Chrome 49, the &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;listener&lt;/code&gt; parameters were optional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dae5a4a25d3771a4e91e09d3bc908b7e0c4110ca" translate="yes" xml:space="preserve">
          <source>Before Chrome 50, this property returned the deprecated child &lt;code&gt;DOMSettableTokenList&lt;/code&gt; instead of &lt;code&gt;DOMTokenList&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74487a1089f95708cfd95e1dd39a27c2e048500c" translate="yes" xml:space="preserve">
          <source>Before Chrome 50/Opera 37, this property returned &lt;code&gt;idle&lt;/code&gt; for an animation that had not yet started. Starting with Chrome 50/Opera 37, it shows &lt;code&gt;paused&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5444c84f1f88bb6c5cb54ac25a8e691bd99db840" translate="yes" xml:space="preserve">
          <source>Before Chrome 59, the default values were not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69114964604391a916fa9940b4db20802900df39" translate="yes" xml:space="preserve">
          <source>Before Chrome 63 the default value for the &lt;code&gt;RTCConfiguration.rtcpMuxPolicy&lt;/code&gt; parameter was &lt;code&gt;&quot;negotiate&amp;amp;quot&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acbde97f258bfc7a65859afeb3517ca9cca0b104" translate="yes" xml:space="preserve">
          <source>Before DOM4 this API was defined within the &lt;a href=&quot;../node&quot;&gt;&lt;code&gt;Node&lt;/code&gt;&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f58960ff31254f5237cfc221fa1cdfd047db1d7" translate="yes" xml:space="preserve">
          <source>Before Firefox 13, &lt;code&gt;deep&lt;/code&gt; was a required parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d15f6814cba46fdd2f6becb6f498e49ed2c6640" translate="yes" xml:space="preserve">
          <source>Before Firefox 14, &lt;code&gt;deep&lt;/code&gt; was a required parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23e349ee2e225228ab7ad5330718aabf141f26e3" translate="yes" xml:space="preserve">
          <source>Before Firefox 16, the second parameter, when set to &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, leads to an error instead of being handled as an empty dictionary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2091b211f357f66fff77dda47b156e72cf00476" translate="yes" xml:space="preserve">
          <source>Before Firefox 17, a call to this method after the dispatching of the event raised an exception instead of doing nothing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d38488125ca935bc4d898f234044b5797bb6ba10" translate="yes" xml:space="preserve">
          <source>Before Firefox 20, &lt;code&gt;conditionText&lt;/code&gt; could not be set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31c626b107304ea0aa7caca482092643e488745f" translate="yes" xml:space="preserve">
          <source>Before Firefox 28, Gecko was using device pixels instead of CSS pixels; in other words, it was assuming a value of &lt;code&gt;screenPixelsPerCSSPixel&lt;/code&gt; of 1 for any device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="480d1e41c7bbc96fdc9d1bf50d0b9b7ce2b4f583" translate="yes" xml:space="preserve">
          <source>Before Firefox 30, the &lt;code&gt;when&lt;/code&gt; parameter was not optional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10723dcebe28712147330c7f970aea358cec5d3d" translate="yes" xml:space="preserve">
          <source>Before Firefox 30, the console would be of type &lt;code&gt;WorkerConsole&lt;/code&gt; instead of &lt;code&gt;Console&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d23fc94eff76267b375173c78d7469da160ba33c" translate="yes" xml:space="preserve">
          <source>Before Firefox 33, you would access &lt;code&gt;indexedDB&lt;/code&gt; from chrome code using the &lt;code&gt;initWindowless&lt;/code&gt; method of the &lt;code&gt;nsIIndexedDatabaseManager&lt;/code&gt; service. This method was removed in Firefox 33.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a07bad77595ea385dae312cef753c3704d8e7f46" translate="yes" xml:space="preserve">
          <source>Before Firefox 35, the method didn't throw if &lt;code&gt;node&lt;/code&gt; was &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa1b676baaacaf5a0bbaa6c80f9e5e8f37e10b00" translate="yes" xml:space="preserve">
          <source>Before Firefox 38, Firefox returned the hash percent encoded. This has been fixed to match the spec.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc90cc4b80db18547972ef375c06a3cd3a7570ab" translate="yes" xml:space="preserve">
          <source>Before Firefox 44, Firefox incorrectly allowed elements inside a &lt;code&gt;&amp;lt;frame&amp;gt;&lt;/code&gt; or an &lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt; to request, and to be granted, fullscreen. In Firefox 44 and onwards this has been fixed: only elements in the top-level document or in an &lt;code&gt;&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;&lt;/code&gt; with the &lt;code&gt;allowfullscreen&lt;/code&gt; attribute can be displayed fullscreen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7b6cbb07a2121c6e4e672c0dbf24a3dccdfd7bc" translate="yes" xml:space="preserve">
          <source>Before Firefox 49, results for URL using the &lt;code&gt;blob&lt;/code&gt; scheme incorrectly returned &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="451dfe5d3c7cc98f82d6ab6132b7d12a3e07156b" translate="yes" xml:space="preserve">
          <source>Before Firefox 49, results for URL using the blob scheme incorrectly returned null.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="504c268c6b56dd3c391dbb8291c07ce4e9ab1eec" translate="yes" xml:space="preserve">
          <source>Before Firefox 5, &lt;code&gt;click&lt;/code&gt; is only defined on buttons and inputs, and has no effect on text and file inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="265f0e82a5b384d5f4ac0d489d7e442b6e33a975" translate="yes" xml:space="preserve">
          <source>Before Firefox 5.0, specifying non-finite values when adding color stops through a call to &lt;code&gt;addColorStop()&lt;/code&gt; incorrectly throws &lt;code&gt;SYNTAX_ERR&lt;/code&gt; instead of &lt;code&gt;INDEX_SIZE_ERR&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e533a32ddf50c9e6bc98b3c67cecf6823d17338f" translate="yes" xml:space="preserve">
          <source>Before Firefox 52, using JavaScript to change the mode of a text track that's part of a media element would send one change event to the element's textTracks TextTrackList for each change, even if mutliple changes are made in a single pass through the Firefox event loop. Starting in Firefox 52, these changes are reflected by a single event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a053cfa43fe903ff69121e2d685b443fbdb8fd2" translate="yes" xml:space="preserve">
          <source>Before Firefox 53, the &lt;code&gt;pathname&lt;/code&gt; and &lt;code&gt;search&lt;/code&gt;&lt;code&gt;HTMLHyperlinkElementUtils&lt;/code&gt; properties returned the wrong parts of the URL. For example, for a URL of &lt;code&gt;http://z.com/x?a=true&amp;amp;b=false&lt;/code&gt;, &lt;code&gt;pathname&lt;/code&gt; would return &lt;code&gt;'/x?a=true&amp;amp;b=false'&lt;/code&gt; and &lt;code&gt;search&lt;/code&gt; would return '', rather than &lt;code&gt;'/x'&lt;/code&gt; and &lt;code&gt;'?a=true&amp;amp;b=false'&lt;/code&gt; respectively. This has now been fixed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24ed6a559e924926594f69146b14885a547de286" translate="yes" xml:space="preserve">
          <source>Before Firefox 53, the &lt;code&gt;pathname&lt;/code&gt; property returned wrong parts of the URL. For example, for a URL of http://z.com/x?a=true&amp;amp;b=false, &lt;code&gt;pathname&lt;/code&gt; would return &quot;/x?a=true&amp;amp;b=false&quot; rather than &quot;/x&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e2b2444081556d53dbf5e0c0a6b8cee7c16cb6a" translate="yes" xml:space="preserve">
          <source>Before Firefox 53, the &lt;code&gt;search&lt;/code&gt; property returned wrong parts of the URL. For example, for a URL of http://z.com/x?a=true&amp;amp;b=false, &lt;code&gt;search&lt;/code&gt; would return &quot;&quot;, rather than &quot;?a=true&amp;amp;b=false&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="373bc8b4491a4f319b4238df1cf3ed5312eac65f" translate="yes" xml:space="preserve">
          <source>Before Firefox 55, &lt;code&gt;getUserMedia()&lt;/code&gt; incorrectly returns &lt;code&gt;NotSupportedError&lt;/code&gt; when the list of constraints specified is empty, or has all constraints set to &lt;code&gt;false&lt;/code&gt;. Starting in Firefox 55, this situation now correctly calls the failure handler with a &lt;code&gt;TypeError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4434bb1d55ccfb20faaee788d6c104c68253e4ad" translate="yes" xml:space="preserve">
          <source>Before Firefox 57, single quotes contained in URLs were escaped when accessed via URL APIs. See &lt;a href=&quot;https://bugzil.la/1386683&quot;&gt;bug 1386683&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeadf8313e628f19d05fa67eb4c80e245ca1bb90" translate="yes" xml:space="preserve">
          <source>Before Firefox 58, &lt;code&gt;nearest&lt;/code&gt; and &lt;code&gt;center&lt;/code&gt; values for the &lt;code&gt;block&lt;/code&gt; option was unsupported. See &lt;a href=&quot;https://bugzil.la/1389274&quot;&gt;bug 1389274&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6393a9bae606588190e62a17c29eff14ce19adf2" translate="yes" xml:space="preserve">
          <source>Before Gecko 5.0 (Firefox 5.0 / Thunderbird 5.0 / SeaMonkey 2.2), keyboard handling was less consistent across platforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7de37da17195c2e29e1dc1696cfd6be933641ad" translate="yes" xml:space="preserve">
          <source>Before IE 10, the value of XMLHttpRequest.responseText could be read only once the request was complete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79bad92d33aa15681dc53869aceec66df39fa664" translate="yes" xml:space="preserve">
          <source>Before Internet Explorer 10, throws an &quot;Invalid target element for this operation.&quot; error when called on a &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;tbody&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;thead&amp;gt;&lt;/code&gt;, or &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07bf07284a827d679433696a131897ea93e81826" translate="yes" xml:space="preserve">
          <source>Before Opera 17, the &lt;code&gt;offset&lt;/code&gt; argument was optional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6398d9e55bc081681f9e2492b408a4a7e9f67d57" translate="yes" xml:space="preserve">
          <source>Before Opera 35, this method always bypassed the browser cache. Starting with Opera 35, it only bypasses the cache when the previous service worker check was more than twenty-four hours ago.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e64c53c4f2604336f1859874cc3d8b77b533a5a2" translate="yes" xml:space="preserve">
          <source>Before Opera 37, this property returned the deprecated child &lt;code&gt;DOMSettableTokenList&lt;/code&gt; instead of &lt;code&gt;DOMTokenList&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7594f1bed8ad7a0744b2d23046ddc07e498de486" translate="yes" xml:space="preserve">
          <source>Before Opera 46, the default values were not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8acb44786afc8dd1a6ae4dfa42f721d1dccd860c" translate="yes" xml:space="preserve">
          <source>Before Safari 6, &lt;code&gt;click&lt;/code&gt; is only defined on buttons and inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="463cf041d15247208c912287de88484e653c016c" translate="yes" xml:space="preserve">
          <source>Before actually transferring the data, several preparatory steps are taken:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef49ff2863b2fdae2901ea9e8886cb760087e3de" translate="yes" xml:space="preserve">
          <source>Before an app can send a notification, the user must grant the application the right to do so. This is a common requirement when an API tries to interact with something outside a web page &amp;mdash; at least once, the user needs to specifically grant that application permission to present notifications, thereby letting the user control which apps/sites are allowed to display notifications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f48a6cd876a6fb6c90a15d43a039f9d0c853b3b" translate="yes" xml:space="preserve">
          <source>Before an extension can be used it has to be enabled using &lt;a href=&quot;../webglrenderingcontext/getextension&quot;&gt;&lt;code&gt;WebGLRenderingContext.getExtension()&lt;/code&gt;&lt;/a&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a4c3f2458544a9eb67e6ed6ed512551f57c4e9c" translate="yes" xml:space="preserve">
          <source>Before audio worklets were defined, the Web Audio API used the &lt;code&gt;ScriptProcessorNode&lt;/code&gt;  for JavaScript-based audio processing. Because the code is running in the main thread, it had bad performance. The &lt;code&gt;ScriptProcessorNode&lt;/code&gt; is kept for historic reasons but is marked as deprecated and will be removed in a future version of the specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02b5b5d5646e07c43d7858e8c8fe6a39f9de246a" translate="yes" xml:space="preserve">
          <source>Before examining RTP's use in WebRTC contexts, it's useful to have a general idea of what RTP does and does not offer. RTP is a data transport protocol, whose mission is to move data between two endpoints as efficiently as possible under current conditions. Those conditions may be affected by everything from the underlying layers of the network stack to the physical network connection, the intervening networks, the performance of the remote endpoint, noise levels, traffic levels, and so forth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8134e2f13a3cda83eca867ecaca23892b8138f53" translate="yes" xml:space="preserve">
          <source>Before getting into the details of how the API operates, there are tems you'll need to know.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eda7297a502ad60ffe0afe6055887334f4367df" translate="yes" xml:space="preserve">
          <source>Before the Blob constructor was available, this could be accomplished through the &lt;a href=&quot;blobbuilder&quot;&gt;&lt;code&gt;BlobBuilder&lt;/code&gt;&lt;/a&gt; API, which is now deprecated:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="606380e4df0d5211ab0ecf29c990f12b1548e9ef" translate="yes" xml:space="preserve">
          <source>Before the user has clicked a freshly loaded page, the &lt;code&gt;rangeCount&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;. After the user clicks on the page, &lt;code&gt;rangeCount&lt;/code&gt; is 1, even if no selection is visible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a8b6d2b4a79d91fe4d2f335b00318d847e452c0" translate="yes" xml:space="preserve">
          <source>Before this method is executed, the &lt;code&gt;moveTo()&lt;/code&gt; method is automatically called with the parameters (x,y). In other words, the current pen position is automatically reset to the default coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b101409277795e03bbd3edc3fd443002c45c4d5" translate="yes" xml:space="preserve">
          <source>Before using a particular value in the &lt;code&gt;options&lt;/code&gt; object, it's a good idea to ensure that the user's browser supports it, since these are an addition that not all browsers have supported historically. See &lt;a href=&quot;#Safely_detecting_option_support&quot;&gt;Safely detecting option support&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76a3901095ae6c0e58baf5e91a30b5607c73f7cf" translate="yes" xml:space="preserve">
          <source>Before version 4.4, the &lt;code&gt;offset&lt;/code&gt; argument was optional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6386d7be14a26732306558e2c86c3f5d084df47c" translate="yes" xml:space="preserve">
          <source>Before version 50, Chrome provided absolute values instead of relative values for this event. Developers still needing absolute values may use the &lt;code&gt;ondeviceorientationabsolute&lt;/code&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c61eb1fcd417429c129c8511b5d277e746c7912c" translate="yes" xml:space="preserve">
          <source>Before version 52, this was an &lt;code&gt;AudioParam.&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b56f7864218fcb2a64cd98195c02b2a65a87745" translate="yes" xml:space="preserve">
          <source>Before version 53, this method was defined on the &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/SVGPathElement&quot;&gt;&lt;code&gt;SVGPathElement&lt;/code&gt;&lt;/a&gt; interface, which inherits from this interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6178eedcc2a2435a1cb86efd96c0f65a7a63fd1" translate="yes" xml:space="preserve">
          <source>Before version 57, this event was implemented on AudioBufferSourceNode, OscillatorNode, and ConstantSourceNode, which are now children of this class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6c6407aaae2c1ba73625ac08bf0d2d439d34ea9" translate="yes" xml:space="preserve">
          <source>Before version 59, the default values were not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e926abf48847a8f1d2db062d2cce4f9bcd9e1fc" translate="yes" xml:space="preserve">
          <source>Before version 62 this function returned &lt;code&gt;null&lt;/code&gt; when called on a Window with no presentation (e.g. an iframe with &lt;code&gt;display: none;&lt;/code&gt; set). Since 62 it returns a &lt;code&gt;CSSStyleDeclaration&lt;/code&gt; object with &lt;code&gt;length&lt;/code&gt; 0, containing empty strings (&lt;a href=&quot;https://bugzil.la/1467722&quot;&gt;bug 1467722&lt;/a&gt;; also see &lt;a href=&quot;https://bugzil.la/1471231&quot;&gt;bug 1471231&lt;/a&gt; for further work).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dae9b276931f199d30e79e481ea93120266dd175" translate="yes" xml:space="preserve">
          <source>Before we can play our track we need to connect our audio graph from the audio source/input node to the destination.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b60c465a87ce8c538b704dc457ca2dcd3d4bed0" translate="yes" xml:space="preserve">
          <source>Before we can render our square plane, we need to create the buffer that contains its vertex positions and put the vertex positions in it. We'll do that using a function we call &lt;code&gt;initBuffers()&lt;/code&gt;; as we explore more advanced WebGL concepts, this routine will be augmented to create more -- and more complex -- 3D objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d96793b1d6e1f7b43a43aeea9c9e327d4fd9131f" translate="yes" xml:space="preserve">
          <source>Before we can start drawing, we need to talk about the canvas grid or &lt;strong&gt;coordinate space&lt;/strong&gt;. Our HTML skeleton from the previous page had a canvas element 150 pixels wide and 150 pixels high. To the right, you see this canvas with the default grid overlayed. Normally 1 unit in the grid corresponds to 1 pixel on the canvas. The origin of this grid is positioned in the &lt;em&gt;top left&lt;/em&gt; corner at coordinate (0,0). All elements are placed relative to this origin. So the position of the top left corner of the blue square becomes x pixels from the left and y pixels from the top, at coordinate (x,y). Later in this tutorial we'll see how we can translate the origin to a different position, rotate the grid and even scale it, but for now we'll stick to the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="840196f04bad5913295e4209b3acff07dfd8d4dc" translate="yes" xml:space="preserve">
          <source>Before we can track the intersection of an element with a container, we need to know what that container is. That container is the &lt;strong&gt;intersection root&lt;/strong&gt;, or &lt;strong&gt;root element&lt;/strong&gt;. This can be either an element in the document which is an ancestor of the element to be observed, or &lt;code&gt;null&lt;/code&gt; to use the document's viewport as the container.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4df4de902943e317991ad77b8e570f2fb2c37df7" translate="yes" xml:space="preserve">
          <source>Before we get to the animation code, we define a function which logs information to a box on the user's screen. We'll use this to show information about the events we receive. Note the use of &lt;a href=&quot;../animationevent/animationname&quot;&gt;&lt;code&gt;AnimationEvent.animationName&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../animationevent/elapsedtime&quot;&gt;&lt;code&gt;AnimationEvent.elapsedTime&lt;/code&gt;&lt;/a&gt; to get information about the event which occurred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3e263cb66e76f87efeea61d7f290a1ba00a9d3b" translate="yes" xml:space="preserve">
          <source>Before we look at the transformation methods, let's look at two other methods which are indispensable once you start generating ever more complex drawings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04747a9a3585a40af0e974cf3ae1adf9189d7d50" translate="yes" xml:space="preserve">
          <source>Before you can do anything with your new database, you need to start a transaction. Transactions come from the database object, and you have to specify which object stores you want the transaction to span. Once you are inside the transaction, you can access the object stores that hold your data and make your requests. Next, you need to decide if you're going to make changes to the database or if you just need to read from it. Transactions have three available modes: &lt;code&gt;readonly&lt;/code&gt;, &lt;code&gt;readwrite&lt;/code&gt;, and &lt;code&gt;versionchange&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75473262aa9d60ee33844079f7d4f42d7857abdb" translate="yes" xml:space="preserve">
          <source>Before you can write to the clipboard, you need to use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Permissions_API&quot;&gt;Permissions API&lt;/a&gt; to get the &lt;code&gt;&quot;clipboard-write&quot;&lt;/code&gt; permission.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffb5b1f0db2716f61879eb3da0bb4a319264e5b1" translate="yes" xml:space="preserve">
          <source>Before you read this article, you should really be familiar with the basics of the WebVR API already &amp;mdash; go and read &lt;a href=&quot;using_the_webvr_api&quot;&gt;Using the WebVR API&lt;/a&gt; first, if you haven't already done so, which also details browser support and required hardware setup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c445dd5994fd48a7f879efa85cd15aa5394f95f" translate="yes" xml:space="preserve">
          <source>Before you start</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31b1b4111d53113cf8d8e61ac51820026f9c036a" translate="yes" xml:space="preserve">
          <source>BeforeInstallPromptEvent.prompt</source>
          <target state="translated">BeforeInstallPromptEvent.prompt</target>
        </trans-unit>
        <trans-unit id="334a624947f514d9d8516a6c41112dc784885f59" translate="yes" xml:space="preserve">
          <source>BeforeUnloadEvent</source>
          <target state="translated">BeforeUnloadEvent</target>
        </trans-unit>
        <trans-unit id="e8cd2492a45b1ee0ffe47787927f1b6bc4d2980c" translate="yes" xml:space="preserve">
          <source>Beginning in Chrome 55, this is not supported in cross-origin iframes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c5b115e0d582bb64130c17a1853de27e3a6f308" translate="yes" xml:space="preserve">
          <source>Beginning in Chrome 60, this method requires a user gesture. Otherwise it returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="202bfade91848e61ded76725cba20b1068e96775" translate="yes" xml:space="preserve">
          <source>Beginning in Opera 47, this method requires a user gesture. Otherwise it returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c6ecee4eb91fdbdb7ed848f12140ec36125772f" translate="yes" xml:space="preserve">
          <source>Beginning in version 55, this is not supported in cross-origin iframes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="645d1962cbb4610af79244f8c0e3ecbdf694b1b3" translate="yes" xml:space="preserve">
          <source>Beginning in version 60, this method requires a user gesture. Otherwise it returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96d7fb65289778d3a40bd16bc42b67cf28cf5d64" translate="yes" xml:space="preserve">
          <source>Begins an asynchronous query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c77a71df5cf22925653f13ef2124245175ebdd5" translate="yes" xml:space="preserve">
          <source>Begins playback of the media.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3613c60f681dff83d2da26133d57a311ac03919" translate="yes" xml:space="preserve">
          <source>Begins recording media; this method can optionally be passed a &lt;code&gt;timeslice&lt;/code&gt; argument with a value in milliseconds. If this is specified, the media will be captured in separate chunks of that duration, rather than the default behavior of recording the media in a single large chunk.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53f8976724cd1c1dccd0d83c819b6a7c69bd39ea" translate="yes" xml:space="preserve">
          <source>Behaves identically to &lt;a href=&quot;webglrenderingcontext/drawarrays&quot;&gt;&lt;code&gt;gl.drawArrays()&lt;/code&gt;&lt;/a&gt; except that multiple instances of the range of elements are executed, and the instance advances for each iteration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e796849d26e9f54de7037ee02dabf217d884af4" translate="yes" xml:space="preserve">
          <source>Behaves identically to &lt;a href=&quot;webglrenderingcontext/drawelements&quot;&gt;&lt;code&gt;gl.drawElements()&lt;/code&gt;&lt;/a&gt; except that multiple instances of the set of elements are executed and the instance advances between each set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f097a7a7fdb4efa8be17ed1b22843e2fd93e3090" translate="yes" xml:space="preserve">
          <source>Behavior of Selection API in terms of editing host focus changes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ef74f9d893214bd4c945c2275bebe67580b282b" translate="yes" xml:space="preserve">
          <source>Being based on the edge of the document as it is, this property takes into account any horizontal scrolling of the page. For example, if the page is scrolled such that 200 pixels of the left side of the document are scrolled out of view, and the mouse is clicked 100 pixels inward from the left edge of the view, the value returned by &lt;code&gt;pageX&lt;/code&gt; will be 300.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9d0fa4f66fcc51c7c7fe37e0cbd379872939902" translate="yes" xml:space="preserve">
          <source>Below is a list of interfaces based on the &lt;code&gt;CSSStyleValue&lt;/code&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1541e4cbe4a26dd9e49e4cc0ca9bb7da67f29324" translate="yes" xml:space="preserve">
          <source>Below is a list of interfaces based on the OrientationSensor interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8a0cbf55406aec8300fbc98d1672eac09060d89" translate="yes" xml:space="preserve">
          <source>Below is a list of interfaces based on the Sensor interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aba08fd953929edf1f1b2c46ee5af00ec1dab869" translate="yes" xml:space="preserve">
          <source>Below is a list of interfaces which are based on the main &lt;code&gt;Event&lt;/code&gt; interface, with links to their respective documentation in the MDN API reference. Note that all event interfaces have names which end in &quot;Event&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a334e9f0ff0b6b1a2cf12b0b483ef297dde4136" translate="yes" xml:space="preserve">
          <source>Below is the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas&quot;&gt;&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;&lt;/a&gt; in which the image is scrolled. Note that the width and height specified here must match the values of the &lt;code&gt;CanvasXZSize&lt;/code&gt; and &lt;code&gt;CanvasYSize&lt;/code&gt; variables in the JavaScript code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0a96461d37d1022deac4a7e45341ea82b9f64f1" translate="yes" xml:space="preserve">
          <source>Below is the &lt;code&gt;draw()&lt;/code&gt; function from the previous page, but now it is making use of these three functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d3455e28c7e05ab06aee20bd74c9df34d425dea" translate="yes" xml:space="preserve">
          <source>Below is the actual functioning result of the code above. Try it out, play with it in your browser's developer tools, and experiment with using it in your own code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f80b47f28de12c791c8e945129dae40e089ace1" translate="yes" xml:space="preserve">
          <source>Below is the resulting content. Scroll this page up and down and notice how the appearance of the box changes as you do so.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16b27b011d6abb252d67e326f8a993a9d381f102" translate="yes" xml:space="preserve">
          <source>Below the playback element is a button for downloading the recorded video.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f202a89714e17a55c96dd18c1a7d527963f46d7" translate="yes" xml:space="preserve">
          <source>Below we see what the result looks like. Notice how before the animation starts running, the box is upright, then upon clicking the &quot;Animate!&quot; button, the box is instantly rotated 90&amp;deg; to the left (to correspond to the first keyframe in the animation sequence). Then, when the animation finishes running, the box instantaneously leaps back to its original state and is upright once again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb77322994aef41c90a1dbf061821ee460faf00a" translate="yes" xml:space="preserve">
          <source>Below we'll cover all of these steps, but first let's look at a toolchain we can use to do this fairly easily.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42805466220ad8c97017cc436ad772e69383e780" translate="yes" xml:space="preserve">
          <source>Below you'll find only the HTML and JavaScript for this example. The CSS is not shown, since it's not particularly crucial to understanding this functionality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc2ce6549be2b41c221e78ed439036ccfa392a4a" translate="yes" xml:space="preserve">
          <source>Below, you'll find an assortment of guides to help you learn WebGL concepts and tutorials that offer step-by-step lessons and examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b4e8701fc026c77d8784c22e3045d00e2bdd52d" translate="yes" xml:space="preserve">
          <source>Beneath the keyboard, we'll put some controls for configuring the layer. For now, we will have two controls: one to set the master volume and another to select what periodic waveform to use when generating notes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da8c46fcb95e3bb92c4bc4bdb99dda64a115bfb0" translate="yes" xml:space="preserve">
          <source>Besides the &lt;a href=&quot;performanceobserver&quot;&gt;&lt;code&gt;PerformanceObserver's&lt;/code&gt;&lt;/a&gt; interface's &lt;a href=&quot;performanceobserver/observe&quot;&gt;&lt;code&gt;observe()&lt;/code&gt;&lt;/a&gt; method (which is used to register the &lt;a href=&quot;performanceentry/entrytype&quot;&gt;&lt;code&gt;entry types&lt;/code&gt;&lt;/a&gt; to &lt;em&gt;observe&lt;/em&gt;), the &lt;a href=&quot;performanceobserver&quot;&gt;&lt;code&gt;PerformanceObserver&lt;/code&gt;&lt;/a&gt; interface also has a &lt;a href=&quot;performanceobserver/disconnect&quot;&gt;&lt;code&gt;disconnect()&lt;/code&gt;&lt;/a&gt; method that stops an observer from receiving further events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25f49ffb76894ff53dc55d86d7d1def43cde3250" translate="yes" xml:space="preserve">
          <source>Best Practices for using the VARY header</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb8de9ce8757ee3c542141ac80ff3b33dc04edff" translate="yes" xml:space="preserve">
          <source>Best practices</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab350c27894e297a584b89c079a5e204d7a4794b" translate="yes" xml:space="preserve">
          <source>Best practices for interactive canvas elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce03cfff74fce6c3108216aeb944644a6527e635" translate="yes" xml:space="preserve">
          <source>Beware that implementations that use a prefix may be buggy, or incomplete, or following an old version of the specification. Therefore, it is not recommended to use it in production code. It may be preferable to not support a browser than to claim to support it and fail:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a3a1c0ee30e9f07585acb7703f02ed128bbc720" translate="yes" xml:space="preserve">
          <source>Bezier and quadratic curves</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31b29fbff7ccab3ad43151ba7dcb96c2e8c34796" translate="yes" xml:space="preserve">
          <source>Big concepts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c39b74283963b44d19c6a84dbb0cdb06800f6839" translate="yes" xml:space="preserve">
          <source>Binary font data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d34dfde2fdf7f7adeda580c0e784f0dadf3991f0" translate="yes" xml:space="preserve">
          <source>Binary keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bdf2505c1f9ea6cd90d41762fb41d00a51b1117" translate="yes" xml:space="preserve">
          <source>Binary strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52ba30966fb00c962be3eff5b5654039b1acff35" translate="yes" xml:space="preserve">
          <source>Binding a buffer to a target</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29cf2a908702838cc4874c6d1d6647848a667bda" translate="yes" xml:space="preserve">
          <source>Binding a frame buffer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="531a4f65f9e4f0c71bbe2e003edc0938aa15bae7" translate="yes" xml:space="preserve">
          <source>Binding a renderbuffer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="706898d75bd880c17ba2d700bb680e91f0e1dad0" translate="yes" xml:space="preserve">
          <source>Binding a texture</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0a905d0469603601043eedc4d4b27977425978d" translate="yes" xml:space="preserve">
          <source>Binding multiple textures (to a &lt;code&gt;tx[]&lt;/code&gt; array) to different framebuffer color attachments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e512d22aa9b962d2f3bcee2159a20c90b2371606" translate="yes" xml:space="preserve">
          <source>Binding to this event can be used to prevent the browser from fully caching the page in cases where content is rendered by javascript. In certain circumstances when returning to a page that has executed javascript in order to populate content, you may find the javascript not running upon the return visit when navigating back. If window.onbeforeunload has been bound (and thus triggered when leaving that page) javascript in the page will be triggered on the subsequent return visit and therefore update the content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20d58be338854d9eca06bf8061ba88ddc20d812f" translate="yes" xml:space="preserve">
          <source>Binds a &lt;code&gt;WebGLBuffer&lt;/code&gt; object to a given target.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="837f5a2cb748022b204613acca5b9854dfd53e2c" translate="yes" xml:space="preserve">
          <source>Binds a &lt;code&gt;WebGLFrameBuffer&lt;/code&gt; object to a given target.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aaf90afc9744a05f03ea0319fff7b0834dfe2d7" translate="yes" xml:space="preserve">
          <source>Binds a &lt;code&gt;WebGLRenderBuffer&lt;/code&gt; object to a given target.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95cf6151452de1603fbcf910cca86e3cb884edb4" translate="yes" xml:space="preserve">
          <source>Binds a &lt;code&gt;WebGLTexture&lt;/code&gt; object to a given target.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="936c77fd225aa7d42858a7a855ea75127c9331e5" translate="yes" xml:space="preserve">
          <source>Binds a generic vertex index to a named attribute variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b367f3c0fc44c96a75f2120399fb28c032bafbf1" translate="yes" xml:space="preserve">
          <source>Binds a given &lt;a href=&quot;webglbuffer&quot;&gt;&lt;code&gt;WebGLBuffer&lt;/code&gt;&lt;/a&gt; to a given binding point (&lt;code&gt;target&lt;/code&gt;) at a given &lt;code&gt;index&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbfcb30265562d62d182920cf3c0645c9af1d369" translate="yes" xml:space="preserve">
          <source>Binds a given &lt;a href=&quot;webglsampler&quot;&gt;&lt;code&gt;WebGLSampler&lt;/code&gt;&lt;/a&gt; to a texture unit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="229d5e1a54a0954f8a34c8f50ec3566d9f3b340d" translate="yes" xml:space="preserve">
          <source>Binds a given &lt;a href=&quot;webglvertexarrayobject&quot;&gt;&lt;code&gt;WebGLVertexArrayObject&lt;/code&gt;&lt;/a&gt; to the buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49557f0e9479afd836f2bc5022864c3770fdfd19" translate="yes" xml:space="preserve">
          <source>Binds a passed &lt;a href=&quot;webgltransformfeedback&quot;&gt;&lt;code&gt;WebGLTransformFeedback&lt;/code&gt;&lt;/a&gt; object to the current GL state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4626b8638d840b5cda2d5dd6257197a1f07b36f" translate="yes" xml:space="preserve">
          <source>Binds a range of a given &lt;a href=&quot;webglbuffer&quot;&gt;&lt;code&gt;WebGLBuffer&lt;/code&gt;&lt;/a&gt; to a given binding point (&lt;code&gt;target&lt;/code&gt;) at a given &lt;code&gt;index&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d24e117fa8aee8265305af9102c979bae8b4a857" translate="yes" xml:space="preserve">
          <source>Biquad filters are typically less sensitive to numeric quirks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="781a2f513343a62e7bcfd90520b9f03ab483d107" translate="yes" xml:space="preserve">
          <source>BiquadFilterNode</source>
          <target state="translated">BiquadFilterNode</target>
        </trans-unit>
        <trans-unit id="76675a1e905e86482272e900055b17ee95da9137" translate="yes" xml:space="preserve">
          <source>BiquadFilterNode.Q</source>
          <target state="translated">BiquadFilterNode.Q</target>
        </trans-unit>
        <trans-unit id="6a2166602e764bb92ca49765e7223fd6d6a4caf3" translate="yes" xml:space="preserve">
          <source>BiquadFilterNode.constructor</source>
          <target state="translated">BiquadFilterNode.constructor</target>
        </trans-unit>
        <trans-unit id="15e30a253b228ac4f5a62ac0375e03abe09917f0" translate="yes" xml:space="preserve">
          <source>BiquadFilterNode.detune</source>
          <target state="translated">BiquadFilterNode.detune</target>
        </trans-unit>
        <trans-unit id="78fc45f5321e7b1723bb95589225232604808493" translate="yes" xml:space="preserve">
          <source>BiquadFilterNode.frequency</source>
          <target state="translated">BiquadFilterNode.frequency</target>
        </trans-unit>
        <trans-unit id="8f5abd27442e62c46d982ef693e0fb0df6810597" translate="yes" xml:space="preserve">
          <source>BiquadFilterNode.gain</source>
          <target state="translated">BiquadFilterNode.gain</target>
        </trans-unit>
        <trans-unit id="b4d8d68e5c9d05b54faf782c5065693f3b9b12e4" translate="yes" xml:space="preserve">
          <source>BiquadFilterNode.getFrequencyResponse</source>
          <target state="translated">BiquadFilterNode.getFrequencyResponse</target>
        </trans-unit>
        <trans-unit id="1cebe100b15b66c81f957874b48882ec54871376" translate="yes" xml:space="preserve">
          <source>BiquadFilterNode.type</source>
          <target state="translated">BiquadFilterNode.type</target>
        </trans-unit>
        <trans-unit id="f6477dc56d6fff307f84a46a3df0a99e9c9d1bbc" translate="yes" xml:space="preserve">
          <source>Bit 0, User Presence (UP) - If set, authenticator validated that the user was present through some Test of User Presence (TUP), such as touching a button on the authenticator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8186b6081427c6fcc4c46009444b99eab62fb6bc" translate="yes" xml:space="preserve">
          <source>Bit 2, User Verification (UV) - If set, authenticator verified the actual user, through a biometric, PIN, or other authentication method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e2a5afeb27ebe515db5a17ab83066bde11868f2" translate="yes" xml:space="preserve">
          <source>Bit 6, Attested Credential Data (AT) - If set, attestedCredentialData will immediately follow the first 37 bytes of this authenticatorData.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="702d7ce0b9832cbf57e0a64ad0b90e4ce1161beb" translate="yes" xml:space="preserve">
          <source>Bit 7, Extension data (ED) - If set, extension data is present. Extension data will follow attestedCredentialData if it is present, or will immediatelly follow the first 37 bytes of the authenticatorData if no attestedCredentialData is present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86caf81dff9d96ec113e72e01fe7b4b951b94990" translate="yes" xml:space="preserve">
          <source>Bit-field value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ddcf5fd9000b8dda7825e4903fad2409a5029e8" translate="yes" xml:space="preserve">
          <source>Bits per pixel</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dc97888788cc1b09dac9d2412a98d54e24f8b1e" translate="yes" xml:space="preserve">
          <source>Bitwise operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b88f45e60f61bd56e226d2d95307f16df7f7552c" translate="yes" xml:space="preserve">
          <source>Blending equations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bffd634bf0f42b00792921f11ed11951afe6492" translate="yes" xml:space="preserve">
          <source>Blending modes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c30b8a05b05cb37f23027cb038d1388796519e43" translate="yes" xml:space="preserve">
          <source>Blending of the computed fragment color values. See &lt;a href=&quot;blendfunc&quot;&gt;&lt;code&gt;WebGLRenderingContext.blendFunc()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3deec7cb95bac4bec607f3e1e5cdd2d20c5af772" translate="yes" xml:space="preserve">
          <source>Blink and WebKit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42c05669120c37912418aafd05d5ccf09a69c2d7" translate="yes" xml:space="preserve">
          <source>Blink only</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ebaf7fa03b380fd5ac05987f2bade9bf7fb396f" translate="yes" xml:space="preserve">
          <source>Blink/Webkit supports the current version of the spec, as shipped in Chrome 23+ and Opera 17+; IE10+ does too. Other and older implementations don't implement the current version of the spec, and thus do not support the &lt;code&gt;indexedDB.open(name, version).onupgradeneeded&lt;/code&gt; signature yet. For more information on how to upgrade the version of the database in older Webkit/Blink, see the &lt;a href=&quot;https://developer.mozilla.org/en/IndexedDB/IDBDatabase#setVersion()_.0A.0ADeprecated&quot;&gt;IDBDatabase reference article&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="735dd56bf76ba6f0af7b421f64d35c906acad67a" translate="yes" xml:space="preserve">
          <source>Blinking and flashing animation can be problematic for people with cognitive concerns such as Attention Deficit Hyperactivity Disorder (ADHD). Additionally, certain kinds of motion can be a trigger for Vestibular disorders, epilepsy, and migraine and Scotopic sensitivity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c24315eb20cc1f5a565ec08f29abab31c0925f1a" translate="yes" xml:space="preserve">
          <source>Blob</source>
          <target state="translated">Blob</target>
        </trans-unit>
        <trans-unit id="f1983a5ec56eb98f5ab11c2e2a865b144f30e74d" translate="yes" xml:space="preserve">
          <source>Blob as parameter to send()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46b16204a23a6970690ff8202a3993e564c226ec" translate="yes" xml:space="preserve">
          <source>Blob constructor example usage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d668e08a27656850fa2fc22bc2820a8d29ceeb2" translate="yes" xml:space="preserve">
          <source>Blob.constructor</source>
          <target state="translated">Blob.constructor</target>
        </trans-unit>
        <trans-unit id="992bbeddabadf737cc73cbf13edcd0a0ab6a3caf" translate="yes" xml:space="preserve">
          <source>Blob.size</source>
          <target state="translated">Blob.size</target>
        </trans-unit>
        <trans-unit id="1641d2ba24cc7255633870441f01cc096893922a" translate="yes" xml:space="preserve">
          <source>Blob.slice</source>
          <target state="translated">Blob.slice</target>
        </trans-unit>
        <trans-unit id="931a8aee531647133211aa99e47630387784194d" translate="yes" xml:space="preserve">
          <source>Blob.type</source>
          <target state="translated">Blob.type</target>
        </trans-unit>
        <trans-unit id="f5fb4f6daa6e99b52a40ce6c00830cdb5789e657" translate="yes" xml:space="preserve">
          <source>BlobBuilder</source>
          <target state="translated">BlobBuilder</target>
        </trans-unit>
        <trans-unit id="19646edaf21a9b85fa3645c3e287650976835391" translate="yes" xml:space="preserve">
          <source>BlobEvent</source>
          <target state="translated">BlobEvent</target>
        </trans-unit>
        <trans-unit id="4b1042bae3308db72e76f6c10c5bc3a1aae4b7c7" translate="yes" xml:space="preserve">
          <source>BlobEvent.constructor</source>
          <target state="translated">BlobEvent.constructor</target>
        </trans-unit>
        <trans-unit id="c1b850763a07f14c746f74605f91cec827db6820" translate="yes" xml:space="preserve">
          <source>BlobEvent.data</source>
          <target state="translated">BlobEvent.data</target>
        </trans-unit>
        <trans-unit id="704d405bd28169dc272618e4f4785facecf3f06b" translate="yes" xml:space="preserve">
          <source>BlobEvent.timecode</source>
          <target state="translated">BlobEvent.timecode</target>
        </trans-unit>
        <trans-unit id="5b3104d8dfad8f5ba57f18c9783d86b9bb9fc27a" translate="yes" xml:space="preserve">
          <source>Blocking default click handling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54c45c033f5eb914fae27a646cbd9e23d3750d19" translate="yes" xml:space="preserve">
          <source>Blocks</source>
          <target state="translated">Blocks</target>
        </trans-unit>
        <trans-unit id="7ead757815b49b2190aac0f634c4bd8d1a5818da" translate="yes" xml:space="preserve">
          <source>Blocks and waits for a &lt;a href=&quot;webglsync&quot;&gt;&lt;code&gt;WebGLSync&lt;/code&gt;&lt;/a&gt; object to become signaled or a given timeout to be passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14c271e533246dc904196d37aed1775c944f4508" translate="yes" xml:space="preserve">
          <source>Blocks execution until all previously called commands are finished.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="802e2d000ac24e2f1162f049e53bd767186f891e" translate="yes" xml:space="preserve">
          <source>Blog Post: &lt;a href=&quot;https://textslashplain.com/2018/07/26/be-skeptical-of-client-reported-mime-content-types/&quot;&gt;Be skeptical of client-reported MIME types&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e5681bf48b3c5fb65c733e151b1dcd13a1f1b0c" translate="yes" xml:space="preserve">
          <source>Blog post - Using the Battery API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e40a2307c6b5a8f3acb9595d9fdff5775ad8e54" translate="yes" xml:space="preserve">
          <source>Bluetooth API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02f8e93207e7f1e8f2e9ae9627ab14cd859a356d" translate="yes" xml:space="preserve">
          <source>Bluetooth API (Firefox OS)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="718a7e8a582e982e452dd5700addba4ffc1cf40d" translate="yes" xml:space="preserve">
          <source>Body</source>
          <target state="translated">Body</target>
        </trans-unit>
        <trans-unit id="b45cbb506fa497ecf08daf2c493e665bc742674b" translate="yes" xml:space="preserve">
          <source>Body.arrayBuffer</source>
          <target state="translated">Body.arrayBuffer</target>
        </trans-unit>
        <trans-unit id="b4b60203e6e8df3a239a1dede28c73f032ac5e35" translate="yes" xml:space="preserve">
          <source>Body.blob</source>
          <target state="translated">Body.blob</target>
        </trans-unit>
        <trans-unit id="58af2ee34b2f2a87c7e0e42434491b81047ba1ef" translate="yes" xml:space="preserve">
          <source>Body.body</source>
          <target state="translated">Body.body</target>
        </trans-unit>
        <trans-unit id="c12e4fe0e9affd76f4b8db2b406201bfe53524d9" translate="yes" xml:space="preserve">
          <source>Body.bodyUsed</source>
          <target state="translated">Body.bodyUsed</target>
        </trans-unit>
        <trans-unit id="5cfdff64c752a2ceb53df50afc10103fbf376f68" translate="yes" xml:space="preserve">
          <source>Body.formData</source>
          <target state="translated">Body.formData</target>
        </trans-unit>
        <trans-unit id="deac6d588686dff92957dd172f2d9b3944916495" translate="yes" xml:space="preserve">
          <source>Body.json</source>
          <target state="translated">Body.json</target>
        </trans-unit>
        <trans-unit id="ae7414df221f671a29a6ff6ad9fd660b55e5d632" translate="yes" xml:space="preserve">
          <source>Body.text</source>
          <target state="translated">Body.text</target>
        </trans-unit>
        <trans-unit id="fd8db32723b67048c961f071810cfe1da0f51632" translate="yes" xml:space="preserve">
          <source>Boilerplate 1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd56c61e9d7de790bffb9dfff7e9645204703a5a" translate="yes" xml:space="preserve">
          <source>Bold the contained text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="267b1113fd01224b7722f1a21da294dd09cde5dc" translate="yes" xml:space="preserve">
          <source>Boolean attributes are considered to be &lt;code&gt;true&lt;/code&gt; if they're present on the element at all, regardless of their actual &lt;code&gt;value&lt;/code&gt;; as a rule, you should specify the empty string (&lt;code&gt;&quot;&quot;&lt;/code&gt;) in &lt;code&gt;value&lt;/code&gt; (some people use the attribute's name; this works but is non-standard). See the &lt;a href=&quot;#Example&quot;&gt;example&lt;/a&gt; below for a practical demonstration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="311bc30da0cf385360e20d7f04fe7e8fd0fb26dd" translate="yes" xml:space="preserve">
          <source>Boolean. Setting to false will turn off the device's screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc44f3124b10fc3dfc3ebc3d5d9d77c2b4b572d2" translate="yes" xml:space="preserve">
          <source>Boolean: Setting this flag to &lt;code&gt;true&lt;/code&gt; allows making cross-site connections without requiring the server to opt-in using CORS. &lt;em&gt;Requires setting &lt;/em&gt;&lt;code&gt;mozAnon: true&lt;/code&gt;&lt;em&gt;, i.e. this can't be combined with sending cookies or other user credentials. This &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=692677#c68&quot;&gt;only works in privileged (reviewed) apps&lt;/a&gt;; it does not work on arbitrary webpages loaded in Firefox&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b4fce05d17452468697b9f4cc9f72690c4e2365" translate="yes" xml:space="preserve">
          <source>Boolean: Setting this flag to &lt;code&gt;true&lt;/code&gt; will cause the browser not to expose the origin and &lt;a href=&quot;http://www.w3.org/TR/2012/WD-XMLHttpRequest-20120117/#user-credentials&quot;&gt;user credentials&lt;/a&gt; when fetching resources. Most important, this means that cookies will not be sent unless explicitly added using setRequestHeader.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f4698382842477e211eb46de81fa506f01a8c34" translate="yes" xml:space="preserve">
          <source>Both</source>
          <target state="translated">Both</target>
        </trans-unit>
        <trans-unit id="aaf81edcc54c779bc812c605bd9e1e9b10c2ff75" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;geolocation/getcurrentposition&quot;&gt;&lt;code&gt;getCurrentPosition()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;geolocation/watchposition&quot;&gt;&lt;code&gt;watchPosition()&lt;/code&gt;&lt;/a&gt; accept a success callback, an optional error callback, and an optional &lt;a href=&quot;positionoptions&quot;&gt;PositionOptions&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc4196d59d86190940de200b3d2481145c9ec315" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;atob()&lt;/code&gt; and &lt;code&gt;btoa()&lt;/code&gt; work on strings. If you want to work on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ArrayBuffer&quot;&gt;&lt;code&gt;ArrayBuffers&lt;/code&gt;&lt;/a&gt;, please, read &lt;a href=&quot;#Solution_2_%E2%80%93_rewrite_the_DOMs_atob()_and_btoa()_using_JavaScript's_TypedArrays_and_UTF-8&quot;&gt;this paragraph&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e0f42f9515ff2b3128ad99e3bdd4920a79699c0" translate="yes" xml:space="preserve">
          <source>Both IE and Edge return an &lt;a href=&quot;../htmlcollection&quot;&gt;&lt;code&gt;HTMLCollection&lt;/code&gt;&lt;/a&gt;, not a &lt;a href=&quot;../nodelist&quot;&gt;&lt;code&gt;NodeList&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3f5a55a7fc67cc0151bf22584306629739cd37d" translate="yes" xml:space="preserve">
          <source>Both input channels (&lt;code&gt;L&lt;/code&gt; and &lt;code&gt;R&lt;/code&gt;) are equally combined to produce the unique output channel (&lt;code&gt;M&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26dd959d75352042c0c7a8cbb57082d509845d03" translate="yes" xml:space="preserve">
          <source>Both left input channels (&lt;code&gt;L&lt;/code&gt; and &lt;code&gt;SL&lt;/code&gt;) are equally combined to produce the unique left output channel (&lt;code&gt;L&lt;/code&gt;). And similarly, both right input channels (&lt;code&gt;R&lt;/code&gt; and &lt;code&gt;SR&lt;/code&gt;) are equally combined to produce the unique right output channel (&lt;code&gt;R&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3d485d92cb8103a7013b911914c3ebecb75eb86" translate="yes" xml:space="preserve">
          <source>Both of these examples vibrate the device for 200 ms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f711b9c04b26207b2f9c3d1b52646bb1f0335b08" translate="yes" xml:space="preserve">
          <source>Both our local and remote peers use a single method to handle events indicating a change in the status of the channel's connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca9f6d5e7d61f97e2780895d09ef1ebfc0b37ba3" translate="yes" xml:space="preserve">
          <source>Both produce:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31063e27626eb326a6be54e9a3f63af49048e049" translate="yes" xml:space="preserve">
          <source>Both properties return the horizontal distance from the left border of the user's browser viewport to the left side of the screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="078553652977f7fd52b2bb2a9fe35089789dfc66" translate="yes" xml:space="preserve">
          <source>Both properties return the vertical distance from the top border of the user's browser viewport to the top side of the screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6edccbe61962ca869528788b4375276356b0caa0" translate="yes" xml:space="preserve">
          <source>Both request and response (and by extension the &lt;code&gt;fetch()&lt;/code&gt; function), will try to intelligently determine the content type. A request will also automatically set a &lt;code&gt;Content-Type&lt;/code&gt; header if none is set in the dictionary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="615e5738a259bffab55afe2aedfe3e15e2339009" translate="yes" xml:space="preserve">
          <source>Both requests and responses may contain body data. A body is an instance of any of the following types:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f28d31d9404cd72f3f22c01728cd2c1bedc57b8" translate="yes" xml:space="preserve">
          <source>Both scripts then access the worker through a &lt;a href=&quot;messageport&quot;&gt;&lt;code&gt;MessagePort&lt;/code&gt;&lt;/a&gt; object created using the &lt;a href=&quot;sharedworker/port&quot;&gt;&lt;code&gt;SharedWorker.port&lt;/code&gt;&lt;/a&gt; property. If the onmessage event is attached using addEventListener, the port is manually started using its &lt;code&gt;start()&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7aec3495cc8f2d84ebaa4b251e442932e913810" translate="yes" xml:space="preserve">
          <source>Bound vertex array object (VAO).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="676167cbb2c97275c4be4d6c7fc8fcffc08b6517" translate="yes" xml:space="preserve">
          <source>Boundaries</source>
          <target state="translated">Boundaries</target>
        </trans-unit>
        <trans-unit id="c79642e154b1c9cecd9573f193c867699b41049a" translate="yes" xml:space="preserve">
          <source>Box modes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92dfac7f9ad9c1ef1a57e10b48534fe071110923" translate="yes" xml:space="preserve">
          <source>Breaking it out a little further we can see how this works:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48d6857f6b2869d031f463b13aa34df47e18c548" translate="yes" xml:space="preserve">
          <source>Breakout</source>
          <target state="translated">Breakout</target>
        </trans-unit>
        <trans-unit id="3147a77c203fac25af63f0105ad820dc04d7d9ff" translate="yes" xml:space="preserve">
          <source>Breaks the node into two nodes at a specified offset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a380475b36b201ad41ccf072d39ed1c62b29dae" translate="yes" xml:space="preserve">
          <source>Bring the pieces together</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5332ce8615ea5c929daa023bf1693c74d95b0853" translate="yes" xml:space="preserve">
          <source>Broadcast Channel</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="763a4ee5557975d7b483ac9a2093da529212b16c" translate="yes" xml:space="preserve">
          <source>Broadcast Channel API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e24cdee836b4b485fc19d2a65d91ab03b66b424" translate="yes" xml:space="preserve">
          <source>Broadcast Channel API overview</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e060ab122317520ea6fc7f4d9686f5ec91b869c" translate="yes" xml:space="preserve">
          <source>Broadcast Channel interface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="130321a4ce78ef93c11951931ee257e35562450a" translate="yes" xml:space="preserve">
          <source>Broadcast channels are named and bound to a specific origin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70c3534299b7efd531b139e1b6b6fccc6a134000" translate="yes" xml:space="preserve">
          <source>BroadcastChannel</source>
          <target state="translated">BroadcastChannel</target>
        </trans-unit>
        <trans-unit id="32e0238bfbead356ab635cacf2b21c73d3c3d21e" translate="yes" xml:space="preserve">
          <source>BroadcastChannel.close</source>
          <target state="translated">BroadcastChannel.close</target>
        </trans-unit>
        <trans-unit id="2fa9a20c962b53919156bbcd1bf67d6bf8a103ec" translate="yes" xml:space="preserve">
          <source>BroadcastChannel.constructor</source>
          <target state="translated">BroadcastChannel.constructor</target>
        </trans-unit>
        <trans-unit id="e1540017fcd5b1ab43c730d2fe71ccc1ffdb8133" translate="yes" xml:space="preserve">
          <source>BroadcastChannel.name</source>
          <target state="translated">BroadcastChannel.name</target>
        </trans-unit>
        <trans-unit id="2407e557a8599d9040c33328321d9cdfaa770ea2" translate="yes" xml:space="preserve">
          <source>BroadcastChannel.onmessage</source>
          <target state="translated">BroadcastChannel.onmessage</target>
        </trans-unit>
        <trans-unit id="ff1c4852fe72b55071841efc78302e0c91ff0297" translate="yes" xml:space="preserve">
          <source>BroadcastChannel.onmessageerror</source>
          <target state="translated">BroadcastChannel.onmessageerror</target>
        </trans-unit>
        <trans-unit id="3aeef7fb9690e838ed18c947246ccb2528660585" translate="yes" xml:space="preserve">
          <source>BroadcastChannel.postMessage</source>
          <target state="translated">BroadcastChannel.postMessage</target>
        </trans-unit>
        <trans-unit id="acfd33bc3d67aa87410e1b45f613d67339aa26c1" translate="yes" xml:space="preserve">
          <source>Broadly, one window may obtain a reference to another (&lt;em&gt;e.g.,&lt;/em&gt; via &lt;code&gt;targetWindow = window.opener&lt;/code&gt;), and then dispatch a &lt;a href=&quot;../messageevent&quot;&gt;&lt;code&gt;MessageEvent&lt;/code&gt;&lt;/a&gt; on it with &lt;code&gt;targetWindow.postMessage()&lt;/code&gt;. The receiving window is then free to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/Events&quot;&gt;handle this event&lt;/a&gt; as needed. The arguments passed to &lt;code&gt;window.postMessage()&lt;/code&gt; (&lt;em&gt;i.e.,&lt;/em&gt; the &amp;ldquo;message&amp;rdquo;) are &lt;a href=&quot;#The_dispatched_event&quot;&gt;exposed to the receiving window through the event object&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54a2cf5e634dbba0be2bf8a55f79252f5c790bdb" translate="yes" xml:space="preserve">
          <source>Browser</source>
          <target state="translated">Browser</target>
        </trans-unit>
        <trans-unit id="e2619fbf04c056c542136a7385daa9c55e7dbe0c" translate="yes" xml:space="preserve">
          <source>Browser API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aac7378f1efd1829430797b0495fda2b1605e7e6" translate="yes" xml:space="preserve">
          <source>Browser Compatibility</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a696f7db5308b5bedb0fb1fbd7845accbd8d6362" translate="yes" xml:space="preserve">
          <source>Browser Compatibility &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;Update compatibility data on GitHub&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eb88b3163eaaf6cb8f2a1398407e24ec70a6935" translate="yes" xml:space="preserve">
          <source>Browser Compatibility&lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;Update compatibility data on GitHub&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ae43cc0bfa1b6b0970b2cd92a2c398b8515696f" translate="yes" xml:space="preserve">
          <source>Browser Incompatibilities</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02a8c960030f2f9457b2f49cecd3b0e346163641" translate="yes" xml:space="preserve">
          <source>Browser Support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b4c1a9a64cc8f34c88861f0ddebafc376829c95" translate="yes" xml:space="preserve">
          <source>Browser Support&lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;Update compatibility data on GitHub&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16e2cebef02f87e20a111d1fca5a07fe990ac0dc" translate="yes" xml:space="preserve">
          <source>Browser bugs related to &lt;code&gt;queryCommandState()&lt;/code&gt;: &lt;a href=&quot;https://github.com/guardian/scribe/blob/master/BROWSERINCONSISTENCIES.md#documentquerycommandstate&quot;&gt;Scribe's &quot;Browser Inconsistencies&quot; documentation&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b99b91e559917941bb0e259fb1c7151b747a651d" translate="yes" xml:space="preserve">
          <source>Browser compatibility</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9596fac5cc2ce26e02f68794e8302c229989e32" translate="yes" xml:space="preserve">
          <source>Browser compatibility&lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;Update compatibility data on GitHub&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="891821e8e784f49d3d3e3a56309d3627d57d4d8f" translate="yes" xml:space="preserve">
          <source>Browser compatibility&lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;Update compatibility data on GitHub&lt;/a&gt;&lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;Update compatibility data on GitHub&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="804a24f74e12cccfd6a273a2b3bfb3a8980576d7" translate="yes" xml:space="preserve">
          <source>Browser identification (aka &quot;browser sniffing&quot;): not best, not reliable approach</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5cc5ba5559336518b80133946211065997ab94e" translate="yes" xml:space="preserve">
          <source>Browser identification based on detecting the user agent string is &lt;strong&gt;unreliable&lt;/strong&gt; and &lt;strong&gt;is not recommended&lt;/strong&gt;, as the user agent string is user configurable. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caa7ae8131b0e358dca91885f3b90f7468dff074" translate="yes" xml:space="preserve">
          <source>Browser support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32204be807e0edceebaa15e6bf99a6caf52085c1" translate="yes" xml:space="preserve">
          <source>Browser support test</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5fd732d33c7506c781daa2adfc40f99ac55ce59" translate="yes" xml:space="preserve">
          <source>Browsers currently support two versions of the &lt;code&gt;startRendering()&lt;/code&gt; method &amp;mdash; an older event-based version and a newer promise-based version. The former will eventually be removed, but currently both mechanisms are provided for legacy reasons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="173c4b540863768d2462d7922e80fbe8b7a9e5ac" translate="yes" xml:space="preserve">
          <source>Browsers equipped with pop-up window blockers will ignore all &lt;code&gt;window.open()&lt;/code&gt; method calls in &lt;code&gt;onunload&lt;/code&gt; event handler functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeded890b982b3bd0a42244e666a28c38ea45a21" translate="yes" xml:space="preserve">
          <source>Browsers generally only permit protocol handlers to register handlers if the handler's domain and protocol match that of the current site. Additionally, browsers increasingly require that the &lt;code&gt;registerProtocolHandler()&lt;/code&gt; function be used in a secure context (that is, on a page loaded using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/HTTPS&quot;&gt;HTTPS&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68bc47f3e16667c1b32f1a8d52fe31e62340cce5" translate="yes" xml:space="preserve">
          <source>Browsers have started to add experimental support for the &lt;a href=&quot;abortcontroller&quot;&gt;&lt;code&gt;AbortController&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;abortsignal&quot;&gt;&lt;code&gt;AbortSignal&lt;/code&gt;&lt;/a&gt; interfaces (aka The Abort API), which allow operations like Fetch and XHR to be aborted if they have not already completed. See the interface pages for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d182638bc34a2c44f4b85acd9e90885c480e5973" translate="yes" xml:space="preserve">
          <source>Browsers have started to implement an autoplay policy, which in general can be summed up as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a6196ccb29fd6b2ff269e9a0fe0e85c557e7ac5" translate="yes" xml:space="preserve">
          <source>Browsers implement this property differently.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a3b48766e63709d559b7f22380b8896bacf9bac" translate="yes" xml:space="preserve">
          <source>Browsers including Internet Explorer, Chrome, Safari, and Firefox store the delay as a 32-bit signed integer internally. This causes an integer overflow when using delays larger than 2147483647 (about 24.8 days), resulting in the timeout being executed immediately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7457faa07adc3cfb45f85a1002c45d143171d59" translate="yes" xml:space="preserve">
          <source>Browsers may offer the ability to override these restrictions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06533dd873a66e41e68aa8c49ccf72bf75bf3405" translate="yes" xml:space="preserve">
          <source>Browsers that support localStorage will have a property on the window object named localStorage. However, for various reasons, just asserting that property exists may throw exceptions. If it does exist, that is still no guarantee that localStorage is actually available, as various browsers offer settings that disable localStorage. So a browser may &lt;em&gt;support&lt;/em&gt; localStorage, but not make it &lt;em&gt;available&lt;/em&gt; to the scripts on the page. One example of that is Safari, which in Private Browsing mode gives us an empty localStorage object with a quota of zero, effectively making it unusable. However, we might still get a legitimate QuotaExceededError, which only means that we've used up all available storage space, but storage is actually &lt;em&gt;available&lt;/em&gt;. Our feature detect should take these scenarios into account.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d9d4bde669a16b878e73bf08c90c37d620f2426" translate="yes" xml:space="preserve">
          <source>Browsers typically dispatch &lt;em&gt;emulated&lt;/em&gt; mouse and click events when there is only a single active touch point. Multi-touch interactions involving two or more active touch points will usually only generate touch events. To prevent the emulated mouse events from being sent, use the &lt;a href=&quot;../event/preventdefault&quot;&gt;&lt;code&gt;preventDefault()&lt;/code&gt;&lt;/a&gt; method in the touch event handlers. For more information about the interaction between mouse and touch events, see &lt;a href=&quot;supporting_both_touchevent_and_mouseevent&quot;&gt;&lt;code&gt;Supporting both TouchEvent and MouseEvent&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60839834ff304d847e0edffcb58337e41acaa2ad" translate="yes" xml:space="preserve">
          <source>Browsers will release object URLs automatically when the document is unloaded; however, for optimal performance and memory usage, if there are safe times when you can explicitly unload them, you should do so.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb867a118873d078aa8209f4b32a20c74e9411b3" translate="yes" xml:space="preserve">
          <source>Browsers will report a supported media configuration as &lt;code&gt;smooth&lt;/code&gt; and &lt;code&gt;powerEfficient&lt;/code&gt; until stats on this device have been recorded. All supported audio codecs are reported to be power efficient.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58356fb4cac0b801f011b397f9dff45adb863892" translate="yes" xml:space="preserve">
          <source>Bubbles</source>
          <target state="translated">Bubbles</target>
        </trans-unit>
        <trans-unit id="7aeba4cd15b1afc5015285c0854f0edae2380d36" translate="yes" xml:space="preserve">
          <source>Budget</source>
          <target state="translated">Budget</target>
        </trans-unit>
        <trans-unit id="5066616357068ea4ba8e27f906fc3254d2e35173" translate="yes" xml:space="preserve">
          <source>Budget-based background timeout throttling is now available in modern browsers (Firefox 58+, Chrome 57+), placing an additional limit on background timer CPU usage. This operates in a similar way across modern browsers, with the details being as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="812a232014bf899d88bb95a090ad40abea79b311" translate="yes" xml:space="preserve">
          <source>BudgetService</source>
          <target state="translated">BudgetService</target>
        </trans-unit>
        <trans-unit id="b198ced7c65b126fa1e2386252aefe79b85173b8" translate="yes" xml:space="preserve">
          <source>BudgetService.getBudget</source>
          <target state="translated">BudgetService.getBudget</target>
        </trans-unit>
        <trans-unit id="72c10a972ae4c61644a23a3c049eeca127ccb896" translate="yes" xml:space="preserve">
          <source>BudgetService.getCost</source>
          <target state="translated">BudgetService.getCost</target>
        </trans-unit>
        <trans-unit id="64a8aaee4b4a2a9ab8585b2b4ced92851466afb4" translate="yes" xml:space="preserve">
          <source>BudgetService.reserve</source>
          <target state="translated">BudgetService.reserve</target>
        </trans-unit>
        <trans-unit id="f7ab99f7da984b7ea01382674754f5aa6ae18809" translate="yes" xml:space="preserve">
          <source>BudgetState</source>
          <target state="translated">BudgetState</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
